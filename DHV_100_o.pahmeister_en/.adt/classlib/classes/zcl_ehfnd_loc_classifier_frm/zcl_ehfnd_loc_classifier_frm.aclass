class ZCL_EHFND_LOC_CLASSIFIER_FRM definition
  public
  inheriting from CL_EHFND_FBI_GUIBB_FORM
  create public .

public section.

  methods IF_FPM_GUIBB_FORM~GET_DATA
    redefinition .
  methods IF_FPM_GUIBB_FORM~GET_DEFINITION
    redefinition .
protected section.

  data GR_CLASSIFIER type ref to ZCL_CLASSIF_HIER_FRM .
private section.

  methods ADJUST_CLASSIFIER_DESC
    changing
      !CS_DATA type DATA .
  methods MANAGE_ACTION_AVAILABILITY
    importing
      !IV_FPM_ACTION type FPM_EVENT_ID
    changing
      !CT_ACTION_USAGE type FPMGB_T_ACTIONUSAGE .
  methods CALL_FLUSH
    importing
      !IV_OLD_VALUE type STRING default ``
      !IV_NEW_VALUE type STRING default ``
      !IV_FIELD_NAME type STRING
    changing
      !CS_DATA type DATA .
ENDCLASS.



CLASS ZCL_EHFND_LOC_CLASSIFIER_FRM IMPLEMENTATION.


  METHOD adjust_classifier_desc.
    FIELD-SYMBOLS:
      <ls_data> TYPE ehfnds_loc_revision.

    ASSIGN cs_data TO <ls_data> CASTING.

    IF sy-subrc <> 0. RETURN. ENDIF.

    CLEAR <ls_data>-zz_classif_desc.

    IF <ls_data>-zz_classifier IS NOT INITIAL.
      <ls_data>-zz_classif_desc = zcl_zehfnd_location_utils=>get_classif_desc_by_class(
        iv_class = <ls_data>-zz_classifier
      ).
    ENDIF.
  ENDMETHOD.


  METHOD call_flush.
    GET REFERENCE OF iv_new_value INTO data(lr_new_value).
    GET REFERENCE OF iv_old_value INTO data(lr_old_value).
    GET REFERENCE OF cs_data INTO data(lr_data).

    data(lt_changelog) = VALUE fpmgb_t_changelog(
      (
        name = iv_field_name
        new_value = lr_new_value
        old_value = lr_old_value
      )
    ).

    if_fpm_guibb_form~flush(
      is_data = lr_data
      it_change_log = lt_changelog
    ).
  ENDMETHOD.


  METHOD if_fpm_guibb_form~get_data.
    DATA:
      lv_old_value TYPE string,
      lv_new_value TYPE string,
      lr_new_value TYPE REF TO data,
      lr_old_value TYPE REF TO data,
      lr_data      TYPE REF TO data.

    FIELD-SYMBOLS:
      <ls_revision> TYPE ehfnds_loc_revision.

    super->if_fpm_guibb_form~get_data(
      EXPORTING
        io_event                = io_event
        iv_raised_by_own_ui     = iv_raised_by_own_ui
        it_selected_fields      = it_selected_fields
        iv_edit_mode            = iv_edit_mode
        io_extended_ctrl        = io_extended_ctrl
      IMPORTING
        et_messages             = et_messages
        ev_data_changed         = ev_data_changed
        ev_field_usage_changed  = ev_field_usage_changed
        ev_action_usage_changed = ev_action_usage_changed
      CHANGING
        cs_data                 = cs_data
        ct_field_usage          = ct_field_usage
        ct_action_usage         = ct_action_usage
    ).

    manage_action_availability(
      EXPORTING
        iv_fpm_action = zif_ehfnd_ui_loc_impl_c=>gc_action_classifier_sh
      CHANGING
        ct_action_usage = ct_action_usage
    ).
    manage_action_availability(
      EXPORTING
        iv_fpm_action = zif_ehfnd_ui_loc_impl_c=>gc_action_clear_classifier
      CHANGING
        ct_action_usage = ct_action_usage
    ).

    ASSIGN ct_field_usage[ name = zif_ehfnd_loc_c=>sc_node_attribute-revision-zz_classifier ] TO FIELD-SYMBOL(<ls_field_usage>).
    IF sy-subrc = 0.
      <ls_field_usage>-read_only = abap_true.
    ENDIF.

    CASE io_event->mv_event_id.
      WHEN zif_ehfnd_ui_loc_impl_c=>gc_action_classifier_sh.
        zcl_classif_hier_frm=>open_as_dialog( ir_fpm = mo_fpm ).
      WHEN zif_ehfnd_ui_loc_impl_c=>gc_action_clear_classifier.
        ASSIGN cs_data TO <ls_revision> CASTING.
        IF sy-subrc = 0.
          lv_old_value = <ls_revision>-zz_classifier.
          CLEAR <ls_revision>-zz_classifier.

          call_flush(
            EXPORTING
              iv_field_name = zif_ehfnd_loc_c=>sc_node_attribute-revision-zz_classifier
              iv_new_value = |{ <ls_revision>-zz_classifier }|
            CHANGING
              cs_data = cs_data
          ).

*          GET REFERENCE OF lv_old_value INTO lr_old_value.
*          GET REFERENCE OF cs_data INTO lr_data.
*
*          DATA(lt_changelog) = VALUE fpmgb_t_changelog(
*            (
*              name = zif_ehfnd_loc_c=>sc_node_attribute-revision-zz_classifier
*              new_value = lr_new_value
*              old_value = lr_old_value
*            )
*          ).
*
*          if_fpm_guibb_form~flush(
*            is_data = lr_data
*            it_change_log = lt_changelog
*          ).
        ENDIF.
      WHEN if_fpm_constants=>gc_event-close_dialog.
        lv_new_value = zcl_classif_hier_frm=>get_selected_element( ).
        ASSIGN cs_data TO <ls_revision> CASTING.
        IF lv_new_value IS NOT INITIAL AND sy-subrc = 0.
          lv_old_value = <ls_revision>-zz_classifier.

          IF lv_old_value <> lv_new_value.
            <ls_revision>-zz_classifier = lv_new_value.

            call_flush(
              EXPORTING
                iv_field_name = zif_ehfnd_loc_c=>sc_node_attribute-revision-zz_classifier
                iv_old_value = lv_old_value
                iv_new_value = lv_new_value
              CHANGING
                cs_data = cs_data
            ).

*            GET REFERENCE OF lv_classifier INTO lr_new_value.
*            GET REFERENCE OF lv_old_value INTO lr_old_value.
*            GET REFERENCE OF cs_data INTO lr_data.
*
*            lt_changelog = VALUE fpmgb_t_changelog(
*              (
*                name = zif_ehfnd_loc_c=>sc_node_attribute-revision-zz_classifier
*                new_value = lr_new_value
*                old_value = lr_old_value
*              )
*            ).
*
*            if_fpm_guibb_form~flush(
*              is_data = lr_data
*              it_change_log = lt_changelog
*            ).
          ENDIF.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

    adjust_classifier_desc(
      CHANGING
        cs_data = cs_data
    ).

    ev_action_usage_changed = abap_true.
    ev_field_usage_changed = abap_true.
    ev_data_changed = abap_true.
  ENDMETHOD.


  METHOD if_fpm_guibb_form~get_definition.
    super->if_fpm_guibb_form~get_definition(
      IMPORTING
        es_message               = es_message
        eo_field_catalog         = eo_field_catalog
        et_field_description     = et_field_description
        et_action_definition     = et_action_definition
        et_special_groups        = et_special_groups
        ev_additional_error_info = ev_additional_error_info
        et_dnd_definition        = et_dnd_definition
    ).

    APPEND LINES OF VALUE fpmgb_t_actiondef(
      ( id = zif_ehfnd_ui_loc_impl_c=>gc_action_classifier_sh )
      ( id = zif_ehfnd_ui_loc_impl_c=>gc_action_clear_classifier )
    ) TO et_action_definition.
  ENDMETHOD.


  METHOD manage_action_availability.
    ASSIGN ct_action_usage[ id = iv_fpm_action ] TO FIELD-SYMBOL(<ls_action_usage>).
    IF sy-subrc = 0.
      <ls_action_usage>-enabled = abap_true.
    ENDIF.
  ENDMETHOD.
ENDCLASS.