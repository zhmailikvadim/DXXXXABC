"! This interface allows modifying operations on the current business objects' nodes
"! <p>An object implementing this interface is passed to the methods of business content classes that are allowed to modify node data (associations, actions, determinations, queries, validations).</p>
"! <p><strong>Note:</strong> In order to access nodes of a foreign business object, the service manager must be used instead.</p>
interface /BOBF/IF_FRW_MODIFY
  public .

  data MV_PROCESS_IMMEDIATELY_ALLOWED type BOOLE_D read-only .

"! Creates a new node instance
"! @parameter IV_NODE                         | Key of that node for which a node instance is to be created
"! @parameter IV_KEY                          | <strong>Optional Parameter:</strong> Node instance key of the new node instance. This key has to be unique and can be received via /BOBF/CL_FRW_FACTORY=&gt;GET_NEW_KEY().
"! If it is not provided by the consumer, the framework generates a new key automatically and returns it via <strong>EV_KEY</strong>.
"! @parameter IV_NODE_CAT                     | <strong>Deprecated</strong>
"! @parameter IS_DATA                         | Data of the new node instance. It is type like the combined structure of the node defined in <strong>IV_NODE</strong>
"! @parameter IT_CHANGED_FIELDS               | <strong>Optional Parameter:</strong> Table with attribute names identifying the attributes from <strong>IS_DATA</strong> that have to be taken into account. All other attributes
"! are ignored when creating the node instance.
"! @parameter IV_ASSOC_KEY                    | <strong>Optional Parameter:</strong> Key of the association that leads to the node for which the new node instance is to be created. This parameter must be filled if a sub node (and not the root
"! node) is created.
"! @parameter IV_SOURCE_NODE_KEY              | <strong>Optional Parameter:</strong> Key of the associations source node. This parameter must be filled if a sub node (and not the root node) is created.
"! @parameter IV_SOURCE_KEY                   | <strong>Optional Parameter:</strong> Node instance key of the new instance's source node. This parameter must be filled if a sub node (and not the root node) is created.
"! @parameter IV_ROOT_KEY                     | <strong>Deprecated</strong>
"! @parameter EV_KEY                          | Node instance key of the newly created node instance
  methods CREATE
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY optional
      !IV_NODE_CAT type /BOBF/OBM_NODE_CAT_KEY optional
      !IS_DATA type ref to DATA optional
      !IT_CHANGED_FIELDS type /BOBF/T_FRW_NAME optional
      !IV_ASSOC_KEY type /BOBF/OBM_ASSOC_KEY optional
      !IV_SOURCE_NODE_KEY type /BOBF/OBM_NODE_KEY optional
      !IV_SOURCE_KEY type /BOBF/CONF_KEY optional
      !IV_ROOT_KEY type /BOBF/CONF_KEY optional
    exporting
      !EV_KEY type /BOBF/CONF_KEY .

"! Deletes one or multiple node instances
"! @parameter IV_NODE                         | Key of the node whose instance shall be deleted
"! @parameter IV_KEY                          | <strong>Optional Parameter:</strong> Node instance key of the node instance to be deleted. If more than one instance shall be deleted, use parameter
"! <strong>IT_KEY</strong> instead.
"! @parameter IT_KEY                          | <strong>Optional Parameter:</strong> Table of node instance keys of the node instances to be deleted. If just one instance shall be deleted, use parameter
"! <strong>IV_KEY</strong> instead.
"! @parameter IV_ROOT_KEY                     | <strong>Deprecated</strong>
  methods DELETE
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY optional
      !IT_KEY type /BOBF/T_FRW_KEY optional
      !IV_ROOT_KEY type /BOBF/CONF_KEY optional .

"! Executes a BOPF action<br/>
"! The result of the method execution is identical to that of an action called externally using the service manager.
"! @parameter IV_ACT_KEY                      | Key of the action to be executed
"! @parameter IT_KEY                          | Table of node instance keys for which the action is to be executed
"! @parameter IS_PARAMETERS                   | <strong>Optional Parameter:</strong> If the action has a parameter structure defined, the consumer may hand over the parameter for the action's execution.
"! @parameter EO_MESSAGE                      | Message container that comprises all messages created by the action
"! @parameter ET_FAILED_KEY                   | Table of node instance keys, for which the action was not executed successfully
"! @parameter EO_CHANGE                       | Change container that comprises all changes executed by the action
  methods DO_ACTION
    importing
      !IV_ACT_KEY type /BOBF/ACT_KEY
      !IT_KEY type /BOBF/T_FRW_KEY
      !IS_PARAMETERS type ref to DATA optional
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY
      !EV_STATIC_ACTION_FAILED type abap_bool
      !EO_CHANGE type ref to /BOBF/IF_FRW_CHANGE
      !ET_DATA type INDEX TABLE .

"! Modifies a set of node instances
"! @parameter IT_MODIFICATION                 | Table containing the modifications to be executed
  methods DO_MODIFY
    importing
      !IT_MODIFICATION type /BOBF/T_FRW_MODIFICATION .

"! Explicitly flush the internal modification buffer to the transactional buffer
"! <p>Generally, BOPF buffers all modifications made by a content method like for instance an action or determination. When the <strong>END_MODIFY</strong> method is called,
"! the modifications that were made during the processing of the calling methods are immediately flushed on the transactional buffer. Based on the modifications, the change handler and a message instance are returned.</p>
"! <p><strong>Note:</strong>
"! In most cases, it is not necessary to call this method. After processing the content method and before retrieving data, the framework automatically flushes all modifications.
"! The only reason to flush the modifications explicitly is if processing of the content method relies on values of the parameters <strong>EO_MESSAGE</strong> and <strong>EO_CHANGE</strong>.</p>
"! @parameter IV_PROCESS_IMMEDIATELY          | <strong>Optional Parameter:</strong> If this indicator is set to true, the changes that have been made so far will not only be immediately executed on the buffer,
"!  but also all corresponding determinations after modification will be executed.
"!                                               <br/><strong>Note:</strong> This functionality is only available within action implementations. The parameters <strong>EO_MESSAGE</strong> and <strong>EO_CHANGE</strong> must
"! also be fetched for triggering the determinations.
"! @parameter EO_MESSAGE                      | Message container with all messages that are created during the modification
"! @parameter EO_CHANGE                       | Change container that contains all changes that are executed by the modification
  methods END_MODIFY
    importing
      !IV_PROCESS_IMMEDIATELY type BOOLE_D optional
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !EO_CHANGE type ref to /BOBF/IF_FRW_CHANGE .

"! Indicates node instances as changed without executing an modification (without real data change)<br/>
"! As a result of the method call, a change notification is created and used to explicitly trigger determinations without any real data change.
"! <br/><strong>Note: </strong>Do not use this method to notify changes that were already made explicitly using <strong>CREATE</strong>, <strong>UPDATE</strong>, or <strong>DELETE</strong>. In latter case, the changes are notified by the framework.
"! @parameter IV_NODE_KEY                     | Key of the node for which the change is to be notified
"! @parameter IV_KEY                          | <strong>Optional Parameter:</strong> Node instance key of the node instance for which the change is to be notified
"! @parameter IT_KEY                          | <strong>Optional Parameter:</strong> Table of node instance keys for which changes shall be notified
"! @parameter IV_CHANGE_MODE                  | <strong>Optional Parameter:</strong> The kind of change that is to be notified (e.g. create or update).
  methods NOTIFY_CHANGE
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY optional
      !IT_KEY type /BOBF/T_FRW_KEY optional
      !IV_CHANGE_MODE type /BOBF/CONF_CHANGE_MODE default /BOBF/IF_FRW_C=>SC_MODIFY_UPDATE .

"! Indicates outgoing associations of a node as changed, without executing a modification
"! <p> If consumers buffers the target instances of an association, he has to be informed from the backend as soon as the target instance set of an association has been changed.
"! To get recent data, the consumer would re-navigate the corresponding association for all source node instances that are currently stored in the buffer.</p>
"! @parameter IV_NODE_KEY                    | Key of the associations source node for which the change is to be notified
"! @parameter IV_KEY                         | <strong>Optional Parameter:</strong> Node instance key of the node instance for which the change is to be notified
"! @parameter IT_KEY                         | <strong>Optional Parameter:</strong> Table with technical keys of Node Instance for which the change is to be notified
"! @parameter IV_ASSOC_KEY                   | <strong>Optional Parameter:</strong> Key of the association for which the change is to be notified<br/>
"!                                             <strong>Note:</strong> If this parameter is not provided, the change will be notified for all associations that have been indicated as the source node (in the parameter <strong>IV_NODE_KEY</strong>).
  methods NOTIFY_ASSOCIATION_CHANGE
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY optional
      !IT_KEY type /BOBF/T_FRW_KEY optional
      !IV_ASSOC_KEY type /BOBF/OBM_ASSOC_KEY optional .

"! Indicates node instance properties as changed
"! <p>As result of method call, a property change notification is created and passed to the service consumer. </p>
"! <p><strong>Note: </strong> In general, it is sufficient to model the dependency between the change notifications and the property change notifications using the BOPF configuration tools (property change trigger feature).
"! However, in some cases, the modeling capabilities might not be detailed enough to cover all use cases. This method enables the application developers to explicitly create property change notifications.</p>
"! @parameter IV_NODE_KEY                   | Key of the node for which the property change is to be notified
"! @parameter IV_KEY                        | <strong>Optional Parameter:</strong> Node instance key of the node instance for which the property change is to be notified
"! @parameter IT_KEY                        | <strong>Optional Parameter:</strong> Table with node instance keys for which the property change is to be notified
"! @parameter IV_NODE_CHANGED               | If the value is true, a property change of the node will be notified
"! @parameter IV_NODE_ATTRIBUTE_CHANGED     | If the value is true, a property change of the node attributes will be notified
"! @parameter IV_ASSOCIATION_CHANGED        | If the value true, a property change will be notified for all associations with the node as the source node
"! @parameter IV_ACTION_CHANGED             | If the value is true, a property change will be notified for all actions of the node
  methods NOTIFY_PROPERTY_CHANGE
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY optional
      !IT_KEY type /BOBF/T_FRW_KEY optional
      !IV_NODE_CHANGED type BOOLE_D default ABAP_FALSE
      !IV_NODE_ATTRIBUTE_CHANGED type BOOLE_D default ABAP_FALSE
      !IV_ASSOCIATION_CHANGED type BOOLE_D default ABAP_FALSE
      !IV_ACTION_CHANGED type BOOLE_D default ABAP_FALSE .

"! Updates the data of a node instance
"! <p>As result of the method call, the node instance is updated in the buffer. If the <strong>IT_CHANGED_FIELDS</strong> parameter is not passed, all fields of the node instance will be updated.</p>
"! @parameter IV_NODE                       | Key of the node whose instances shall be updated
"! @parameter IV_KEY                        | Node instance key of the node instance, that shall be updated
"! @parameter IV_ROOT_KEY                   | <strong>Deprecated</strong>
"! @parameter IS_DATA                       | Node instance data containing the updated values. It is typed with the combined data structure of the node defined in <strong>IV_NODE</strong>
"! @parameter IT_CHANGED_FIELDS             | <strong>Optional Parameter:</strong> Table of names for attributes that are to be used for the update related to <strong>IS_DATA</strong>. If this parameter is not provided, all attributes will be updated.
  methods UPDATE
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IV_KEY type /BOBF/CONF_KEY
      !IV_ROOT_KEY type /BOBF/CONF_KEY optional
      !IS_DATA type ref to DATA
      !IT_CHANGED_FIELDS type /BOBF/T_FRW_NAME optional .

endinterface.