CLASS ltc_factory DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PUBLIC SECTION.
    METHODS getter_methods FOR TESTING RAISING cx_sadl_static.
    METHODS get_element_mapping FOR TESTING RAISING cx_sadl_static.
    METHODS sadl_entity FOR TESTING RAISING cx_sadl_static.
    METHODS cds_annotations FOR TESTING RAISING cx_sadl_static.
    METHODS cds_annotations_w_aliasing FOR TESTING RAISING cx_sadl_static.

  PRIVATE SECTION.

    CLASS-METHODS class_setup.
    METHODS _get_so_mp RETURNING VALUE(ro_mp) TYPE REF TO cl_bsa_sadl_mp
                       RAISING   cx_bsa_compile_time.

    METHODS _get_assoc_mp
      RETURNING
        VALUE(ro_mp) TYPE REF TO cl_bsa_sadl_mp
      RAISING
        cx_bsa_compile_time.
    METHODS setup.
    METHODS teardown.
    CLASS-DATA gv_timestamp TYPE timestamp.

ENDCLASS.


CLASS ltc_factory IMPLEMENTATION.

  METHOD class_setup.
    GET TIME STAMP FIELD gv_timestamp.
  ENDMETHOD.


  METHOD setup.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_true ).
  ENDMETHOD.


  METHOD teardown.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_false ).
  ENDMETHOD.


  METHOD getter_methods.
    DATA lv_entity_id TYPE if_sadl_types=>ty_uuid  VALUE 'cl_sadl_metadata_provider_so~Sadl_V_Aunit_So_C'.

    DATA(lo_mp) = _get_so_mp( ).
    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).

    cl_abap_unit_assert=>assert_bound(
        cl_sadl_entity_factory=>get_instance( )->get_entity(  iv_type = cl_sadl_entity_factory=>co_type-sadl
                                                              iv_id   = lv_entity_id ) ).

    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    cl_abap_unit_assert=>assert_bound( lo_mdp ).

    cl_abap_unit_assert=>assert_bound( lo_mdp->get_entity_load( cl_sadl_entity_util=>get_entity_name( lv_entity_id ) ) ).
    cl_abap_unit_assert=>assert_bound( lo_mdp->get_entity_load_by_id( lv_entity_id ) ).
    cl_abap_unit_assert=>assert_bound( lo_mdp->get_node( cl_sadl_entity_util=>get_entity_name( lv_entity_id ) ) ).
    cl_abap_unit_assert=>assert_bound( lo_mdp->get_node_by_id( lv_entity_id ) ).

    cl_abap_unit_assert=>assert_false( lo_mdp->entity_id_exists( 'BLA' ) ).
    cl_abap_unit_assert=>assert_false( lo_mdp->entity_id_exists( 'cl_sadl_metadata_provider_so~BLA' ) ).
    cl_abap_unit_assert=>assert_false( lo_mdp->entity_id_exists( 'BLA~SalesOrder' ) ).
    cl_abap_unit_assert=>assert_false( lo_mdp->entity_name_exists( 'BLA' ) ).

    TRY.
        lo_mdp->get_entity_load( 'BLA' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_entity_load_by_id( 'cl_sadl_metadata_provider_so~BLA' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_entity_load_by_id( 'BLA~Sadl_V_Aunit_So_C' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_node( 'BLA' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_node_by_id( 'cl_sadl_metadata_provider_so~BLA' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_node_by_id( 'BLA~Sadl_V_Aunit_So_C' ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
  ENDMETHOD.


  METHOD get_element_mapping.
    DATA lv_entity_id TYPE if_sadl_types=>ty_uuid  VALUE 'cl_sadl_metadata_provider_so~Sadl_V_Aunit_So_C'.

    DATA(lo_mp) = _get_so_mp( ).
    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).
    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    cl_abap_unit_assert=>assert_bound( lo_mdp ).

    lo_mdp->get_element_mapping(  EXPORTING iv_sadl_entity_id    = lv_entity_id
                                            iv_sadl_element_name = 'CURRENCY'
                                  IMPORTING ev_core_entity_id    = DATA(lv_entity)
                                            ev_core_entity_type  = DATA(lv_type)
                                            ev_core_element_name = DATA(lv_elem) ).
    cl_abap_unit_assert=>assert_equals( exp = 'SADL_V_AUNIT_SO_C' act = lv_entity ).
    cl_abap_unit_assert=>assert_equals( exp = 'CDS'               act = lv_type    ).
    cl_abap_unit_assert=>assert_equals( exp = 'CURRENCY'          act = lv_elem   ).

    lo_mdp->get_element_mapping(  EXPORTING iv_sadl_entity_id    = lv_entity_id
                                            iv_sadl_element_name = 'T_CURRENCY'
                                  IMPORTING ev_core_entity_id    = lv_entity
                                            ev_core_entity_type  = lv_type
                                            ev_core_element_name = lv_elem ).
    cl_abap_unit_assert=>assert_equals( exp = 'SADL_V_AUNIT_CURRENCY' act = lv_entity ).
    cl_abap_unit_assert=>assert_equals( exp = 'CDS'                   act = lv_type    ).
    cl_abap_unit_assert=>assert_equals( exp = 'LTEXT'                 act = lv_elem   ).

    TRY.
        lo_mdp->get_element_mapping(  EXPORTING iv_sadl_entity_id    = lv_entity_id
                                                iv_sadl_element_name = 'bla bla'
                                      IMPORTING ev_core_entity_id    = lv_entity
                                                ev_core_entity_type  = lv_type
                                                ev_core_element_name = lv_elem ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
    TRY.
        lo_mdp->get_element_mapping(  EXPORTING iv_sadl_entity_id    = 'bla bla'
                                                iv_sadl_element_name = 'T_CURRENCY'
                                      IMPORTING ev_core_entity_id    = lv_entity
                                                ev_core_entity_type  = lv_type
                                                ev_core_element_name = lv_elem ).
        cl_abap_unit_assert=>fail( ).
        ##NO_HANDLER
      CATCH cx_sadl_contract_violation.
    ENDTRY.
  ENDMETHOD.


  METHOD sadl_entity.
    DATA(lo_sadl_entity) = cl_sadl_entity_int_api_factory=>create( cl_sadl_mdp_factory=>get_mdp_for_mp( _get_assoc_mp( ) ) )->get_entity(
      iv_name  = 'cl_sadl_metadata_provider_assoc~Sadl_V_Aunit_So_C' ).
    cl_abap_unit_assert=>assert_bound( lo_sadl_entity ).
    DATA(lo_sadl_entity_items) = lo_sadl_entity->get_association_target( 'TO_ITEMS' ).
    cl_abap_unit_assert=>assert_bound( lo_sadl_entity_items ).
  ENDMETHOD.



  METHOD cds_annotations.
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource name="PAR"     binding="SADL_V_PARAMETER"     type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="PAR" maxEditMode="RO" name="SADL_V_ParameterSet" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml(  iv_uuid      = 'cl_sadl_metadata_provider_par'
                                                             iv_timestamp = gv_timestamp
                                                             iv_sadl_xml  = lv_sadl_xml_so ).
    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).

    DATA(lo_sadl_entity) = cl_sadl_entity_factory=>get_instance( )->get_entity(
        iv_type        = 'SADL'
        iv_id          = 'cl_sadl_metadata_provider_par~SADL_V_ParameterSet' ).

    cl_abap_unit_assert=>assert_bound( lo_sadl_entity ).

    CAST if_sadl_entity_cds_anno_prov( lo_sadl_entity )->get_annotations(
        IMPORTING et_entity_annotations    = DATA(lt_entity_annotations)
                  et_element_annotations   = DATA(lt_element_annotations)
                  et_parameter_annotations = DATA(lt_parameter_annotations) ).

    cl_abap_unit_assert=>assert_not_initial( lt_element_annotations ).
    cl_abap_unit_assert=>assert_not_initial( lt_entity_annotations ).
    cl_abap_unit_assert=>assert_not_initial( lt_parameter_annotations ).
  ENDMETHOD.



  METHOD cds_annotations_w_aliasing.
    DATA lv_entity_id TYPE if_sadl_types=>ty_uuid  VALUE 'cl_sadl_metadata_provider_assoc~Sadl_V_Aunit_So_C'.
    DATA(lo_mp) = _get_assoc_mp( ).
    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).

    DATA(lo_sadl_entity) = cl_sadl_entity_factory=>get_instance( )->get_entity(
        iv_type        = 'SADL'
        iv_id          = lv_entity_id ).

    cl_abap_unit_assert=>assert_bound( lo_sadl_entity ).

    " text denormalization with label annos (language specific)
    lo_sadl_entity->get_annotations_for_element(  EXPORTING iv_element     = 'T_CURRENCY'
                                                  IMPORTING et_annotations = DATA(lt_api_annos) ).
    cl_abap_unit_assert=>assert_not_initial( lt_api_annos ).
    cl_abap_unit_assert=>assert_true( boolc( line_exists(
        lt_api_annos[ name = if_sadl_cds_annotations=>endusertext_label ] ) ) ).

    CAST if_sadl_entity_cds_anno_prov( lo_sadl_entity )->get_annotations(
        IMPORTING et_element_annotations   = DATA(lt_element_annotations) ).

    CAST if_sadl_entity_cds_anno_prov( lo_sadl_entity )->get_element_anno_details(
        EXPORTING iv_element = 'T_CURRENCY'
                  iv_annotation = if_sadl_cds_annotations=>endusertext_label
        IMPORTING es_element_annotation = DATA(ls_element_annotation) ).
    cl_abap_unit_assert=>assert_not_initial( ls_element_annotation ).

    cl_abap_unit_assert=>assert_true( boolc( line_exists( lt_element_annotations[
        KEY annotation  COMPONENTS elementname = 'T_CURRENCY'
                                   annoname = CONV #( if_sadl_cds_annotations=>endusertext_label ) ] ) ) ).

    cl_abap_unit_assert=>assert_true( boolc( line_exists( lt_element_annotations[
        KEY annotation  COMPONENTS elementname = 'TO_ITEMS'
                                   annoname = CONV #( if_sadl_cds_annotations=>objectmodel_associationtype ) ] ) ) ).
  ENDMETHOD.


  METHOD _get_so_mp.
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource name="SO"     binding="SADL_V_AUNIT_SO_C"     type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="SO" maxEditMode="RO" name="Sadl_V_Aunit_So_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    ro_mp   = cl_sadl_mp_factory=>create_mp_entity_xml(  iv_uuid      = 'cl_sadl_metadata_provider_so'
                                                         iv_timestamp = gv_timestamp
                                                         iv_sadl_xml  = lv_sadl_xml_so ).
  ENDMETHOD.


  METHOD _get_assoc_mp.
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource name="SADL_V_AUnit_SOI"     binding="SADL_V_AUNIT_SOI_C"     type="CDS"/>| &
    |  <sadl:dataSource name="Sadl_V_Aunit_So"     binding="SADL_V_AUNIT_SO_C"     type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="Sadl_V_Aunit_So" maxEditMode="RO" name="Sadl_V_Aunit_So_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |      <sadl:association binding="_ITEMS"  target="Sadl_V_Aunit_Soi_C" name="TO_ITEMS" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="SADL_V_AUnit_SOI" maxEditMode="RO" name="Sadl_V_Aunit_Soi_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
*    |      <sadl:association binding="_SALESORDER" target="SalesOrder" name="TO_SO" cardinality="zeroToOne"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    ro_mp   = cl_sadl_mp_factory=>create_mp_entity_xml(  iv_uuid      = 'cl_sadl_metadata_provider_assoc'
                                                         iv_timestamp = gv_timestamp
                                                         iv_sadl_xml  = lv_sadl_xml_so ).
  ENDMETHOD.

ENDCLASS.


CLASS ltc_compiler_checks DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
*    METHODS test_assoc_mds_to_rds         FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_rds_to_mds         FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_wrong_binding      FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
*    METHODS test_path_in_assoc_binding    FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
*    METHODS test_assoc_use_more_than_once FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_wrong_target       FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_wrong_name        FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_binding_only      FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_assoc_wrong_target2       FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
    METHODS test_structure_wrong_name        FOR TESTING RAISING cx_sadl_static cx_sql_exception cx_sadl_contract_violation.
  PRIVATE SECTION.
    METHODS setup.
    METHODS teardown.
ENDCLASS.

CLASS ltc_compiler_checks IMPLEMENTATION.

  METHOD setup.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_true ).
  ENDMETHOD.


  METHOD teardown.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_false ).
  ENDMETHOD.

*  METHOD test_assoc_mds_to_rds.
*    GET TIME STAMP FIELD DATA(gv_timestamp).
*    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
*    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
*    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
*    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
*    |  <sadl:resultSet>| &
*    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" maxEditMode="RO">| &
*    |      <sadl:query name="SelectAll"/>| &
*    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
*    |      <sadl:association name="ITEMS" binding="_ITEMS" target="SADL_V_AUnit_SOI" cardinality="many"/>| &
*    |    </sadl:structure>| &
*    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
*    |      <sadl:query name="SelectAll"/>| &
*    |    </sadl:structure>| &
*    |  </sadl:resultSet>| &
*    |</sadl:definition>| ##string_ok.
*
*    TRY.
*        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'test_sadl_mds_rds'
*                                                                iv_timestamp = gv_timestamp
*                                                                iv_sadl_xml  = lv_sadl_xml ).
*
*        DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
*        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
*      CATCH cx_sadl_contract_violation INTO DATA(lx).
*        DATA(lx_error) = CAST cx_bsa_sadl_association( lx->previous ).
*        cl_abap_unit_assert=>assert_equals( exp = cx_bsa_sadl_association=>src_and_trg_different_ds_kind
*                                            act = lx_error->textid ).
*        cl_abap_unit_assert=>assert_equals( exp = `ITEMS`
*                                            act = lx_error->value ).
*        cl_abap_unit_assert=>assert_equals( exp = `association`
*                                            act = lx_error->localization_tag ).
*        cl_abap_unit_assert=>assert_equals( exp = `target`
*                                            act = lx_error->localization_attribute ).
*    ENDTRY.
*  ENDMETHOD.

  METHOD test_assoc_rds_to_mds.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="ITEMS" binding="_ITEMS" target="SADL_V_AUnit_SOI" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" maxEditMode="RO">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'test_sadl_rds_mds'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).

        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx).
        DATA(lx_error) = CAST cx_bsa_sadl_association( lx->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_bsa_sadl_association=>src_and_trg_different_ds_kind
                                            act = lx_error->textid ).
        cl_abap_unit_assert=>assert_equals( exp = `ITEMS`
                                            act = lx_error->value ).
        cl_abap_unit_assert=>assert_equals( exp = `association`
                                            act = lx_error->localization_tag ).
        cl_abap_unit_assert=>assert_equals( exp = `target`
                                            act = lx_error->localization_attribute ).
    ENDTRY.
  ENDMETHOD.

  METHOD test_assoc_wrong_binding.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SADL_V_AUnit_SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SADL_V_AUnit_SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SADL_V_AUnit_SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="TO_ITEMS" binding="_NONEXISTINGITEMS" target="SADL_V_AUnit_SOI" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SADL_V_AUnit_SOI" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'test_sadl_wrg_assoc'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).
        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx_static).
        DATA(lx_compiler_entity) = CAST cx_sadl_mdp_compound_load( lx_static->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_sadl_mdp_compound_load=>cx_sadl_mdp_compound_load
                                            act = lx_compiler_entity->textid ).
        cl_abap_unit_assert=>assert_equals( exp = 'TO_ITEMS'
                                            act = lx_compiler_entity->association_name ).
        cl_abap_unit_assert=>assert_equals( exp = 'SADL_V_AUnit_SO'
                                            act = lx_compiler_entity->sadl_structure ).
        cl_abap_unit_assert=>assert_equals( exp = '_NONEXISTINGITEMS'
                                            act = lx_compiler_entity->binding ).
*        DATA(lx_compiler_entity) = CAST cx_sadl_compiler_entity( lx_static->previous ).
*        cl_abap_unit_assert=>assert_equals( exp = cx_sadl_compiler_entity=>cx_unknown_entity_part
*                                            act = lx_compiler_entity->textid ).
*        cl_abap_unit_assert=>assert_equals( exp = `association`
*                                            act = lx_compiler_entity->entity_part ).
*        cl_abap_unit_assert=>assert_equals( exp = `_NONEXISTINGITEMS`
*                                            act = lx_compiler_entity->value ).
*        cl_abap_unit_assert=>assert_equals( exp = `SADL_V_AUNIT_SO`
*                                            act = lx_compiler_entity->entity_id ).
*        cl_abap_unit_assert=>assert_equals( exp = `CDS`
*                                            act = lx_compiler_entity->type ).
    ENDTRY.
  ENDMETHOD.


  METHOD test_assoc_wrong_target.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="ITEMS" binding="_ITEMS" target="Wrong_Target_Here" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'sadl_test_assoc_wrong_target'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).

        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx).
        DATA(lx_sadl_compilation) = CAST cx_bsa_sadl_ref_integrty_assoc( lx->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_bsa_sadl_ref_integrty_assoc=>cx_ref_unknown
                                            act = lx_sadl_compilation->textid ).
        cl_abap_unit_assert=>assert_equals( exp = `structure`
                                            act = lx_sadl_compilation->localization_tag_2 ).
        cl_abap_unit_assert=>assert_equals( exp = `Wrong_Target_Here`
                                            act = lx_sadl_compilation->value ).
    ENDTRY.
  ENDMETHOD.

  METHOD test_assoc_wrong_name.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="Wrong_Name_Here" binding="_ITEMS" target="SADL_V_AUnit_SOI" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'sadl_test_assoc_wrong_target'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).

        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx).
        DATA(lx_compiler_entity) = CAST cx_sadl_mdp_compound_load( lx->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_sadl_mdp_compound_load=>cx_sadl_mdp_compound_load
                                            act = lx_compiler_entity->textid ).
        cl_abap_unit_assert=>assert_equals( exp = 'SADL_V_AUnit_SO'
                                            act = lx_compiler_entity->sadl_structure ).
        cl_abap_unit_assert=>assert_equals( exp = 'Wrong_Name_Here'
                                            act = lx_compiler_entity->association_name ).
    ENDTRY.
  ENDMETHOD.

  METHOD test_assoc_binding_only.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="" binding="_ITEMS" target="" />| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'sadl_test_assoc_binding_only'
                                                            iv_timestamp = gv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).

    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    DATA(lr_load) = lo_mdp->get_entity_load( 'SADL_V_AUnit_SO' ).
    cl_abap_unit_assert=>assert_true( boolc( line_exists( lr_load->sadl_entity-associations[ name = 'TO_ITEMS' target_id = 'sadl_test_assoc_binding_only~SADL_V_AUnit_SOI' ] ) ) ).
  ENDMETHOD.


  METHOD test_assoc_wrong_target2.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="" binding="_ITEMS" target="" cardinality="many"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'sadl_test_assoc_wrong_target2'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).

        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx).
        DATA(lx_compiler_entity) = CAST cx_sadl_mdp_compound_load( lx->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_sadl_mdp_compound_load=>cx_sadl_mdp_compound_load
                                            act = lx_compiler_entity->textid ).
        cl_abap_unit_assert=>assert_equals( exp = 'SADL_V_AUnit_SO'
                                            act = lx_compiler_entity->sadl_structure ).
        cl_abap_unit_assert=>assert_equals( exp = '_ITEMS'
                                            act = lx_compiler_entity->binding ).
    ENDTRY.
*  ENDMETHOD.
*
*  METHOD test_path_in_assoc_binding.
*    GET TIME STAMP FIELD DATA(gv_timestamp).
*    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
*    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
*    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
*    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
*    |  <sadl:dataSource binding="SADL_V_AUNIT_SOISL" name="SOISL" type="CDS"/>| &
*    |  <sadl:resultSet>| &
*    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
*    |      <sadl:query name="SelectAll"/>| &
*    |      <sadl:association name="SL" binding="_ITEMS._SCHEDULELINES" target="SADL_V_AUnit_SOISL" cardinality="many"/>| &
*    |    </sadl:structure>| &
*    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
*    |      <sadl:query name="SelectAll"/>| &
*    |    </sadl:structure>| &
*    |    <sadl:structure name="SADL_V_AUnit_SOISL" dataSource="SOISL" exposure="TRUE">| &
*    |      <sadl:query name="SelectAll"/>| &
*    |    </sadl:structure>| &
*    |  </sadl:resultSet>| &
*    |</sadl:definition>| ##string_ok.
*
*
*    TRY.
*        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'zfi_sadl_path_assoc'
*                                                                iv_timestamp = gv_timestamp
*                                                                iv_sadl_xml  = lv_sadl_xml ).
*
*        DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
*        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
*      CATCH cx_sadl_contract_violation into DATA(lx).
*        DATA(lx_error) = CAST cx_bsa_sadl_association( lx->previous ).
*        cl_abap_unit_assert=>assert_equals( exp = cx_bsa_sadl_association=>path_in_assoc_exposure_case
*                                            act = lx_error->textid ).
*        cl_abap_unit_assert=>assert_equals( exp = `SL`
*                                            act = lx_error->value ).
*        cl_abap_unit_assert=>assert_equals( exp = `association`
*                                            act = lx_error->localization_tag ).
*        cl_abap_unit_assert=>assert_equals( exp = `target`
*                                            act = lx_error->localization_attribute ).
*    ENDTRY.
  ENDMETHOD.

  METHOD test_structure_wrong_name.
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SOI" name="SOI" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="Wrong_Name" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association name="TO_ITEMS" binding="_ITEMS" target="SADL_V_AUnit_SOI" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_SOI" dataSource="SOI" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.

    TRY.
        DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'sadl_test_assoc_wrong_target'
                                                                iv_timestamp = gv_timestamp
                                                                iv_sadl_xml  = lv_sadl_xml ).

        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_aunit_assert=>fail( msg    = 'Exception expected' ).
      CATCH cx_sadl_contract_violation INTO DATA(lx).
        DATA(lx_compiler_entity) = CAST cx_sadl_mdp_compound_load( lx->previous ).
        cl_abap_unit_assert=>assert_equals( exp = cx_sadl_mdp_compound_load=>cx_invalid_name
                                            act = lx_compiler_entity->textid ).
        cl_abap_unit_assert=>assert_equals( exp = 'Wrong_Name'
                                            act = lx_compiler_entity->name ).
    ENDTRY.
  ENDMETHOD.

ENDCLASS.


CLASS ltc_cache1 DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS use_cds_cache FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
ENDCLASS.


CLASS ltc_cache1 IMPLEMENTATION.
  METHOD use_cds_cache.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( ).
    cl_sadl_mdp_exposure=>get_for_entity( iv_type = 'CDS'
                                          iv_id   = 'SADL_V_AUNIT_SO' ).
    DATA(lo_entity_provider) = cl_sadl_entity_provider_cds=>get_instance( ).
    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_SO' ) ).
*    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_BUPA' ) ).
    cl_sadl_aunit_friend=>reset_sadl_load_cache( ).
    cl_sadl_load_area=>detach_area( ).  " remove read locks to get load from shared memory
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_BUPA" name="BUPA" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_BuPa" dataSource="BUPA" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'EXOSURE_CDS_CACHE1'
                                                            iv_timestamp = gv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_SO' ) ).
    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_BUPA' ) ).
  ENDMETHOD.
ENDCLASS.


CLASS ltc_cache2 DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS use_cds_cache FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
ENDCLASS.


CLASS ltc_cache2 IMPLEMENTATION.
  METHOD use_cds_cache.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( ).
    GET TIME STAMP FIELD DATA(gv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_SO"  name="SO" type="CDS"/>| &
    |  <sadl:dataSource binding="SADL_V_AUNIT_BUPA" name="BUPA" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure name="SADL_V_AUnit_SO" dataSource="SO" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure name="SADL_V_AUnit_BuPa" dataSource="BUPA" exposure="TRUE">| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'EXOSURE_CDS_CACHE2'
                                                            iv_timestamp = gv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    DATA(lo_entity_provider) = cl_sadl_entity_provider_cds=>get_instance( ).
    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_SO' ) ).
    cl_abap_unit_assert=>assert_true( lo_entity_provider->is_dd_data_cached( 'SADL_V_AUNIT_BUPA' ) ).
  ENDMETHOD.
ENDCLASS.


CLASS ltc_compound_load DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS cross_filter_by_so FOR TESTING RAISING cx_static_check.
    METHODS check_metadata FOR TESTING RAISING cx_static_check.
*    METHODS check_assoc_lines FOR TESTING RAISING cx_static_check.
    METHODS missing_assoc_target FOR TESTING RAISING cx_sadl_static.
    METHODS wrong_assoc_binding FOR TESTING RAISING cx_sadl_static.
    METHODS ignore_long_assoc_names_gtk FOR TESTING RAISING cx_sadl_static.
    METHODS compare_loads_single_entity FOR TESTING RAISING cx_sadl_static.
    METHODS check_compound_load_checksums FOR TESTING RAISING cx_sadl_static.
    METHODS check_load_checksum_txt_denorm FOR TESTING RAISING cx_sadl_static.
    METHODS compare_loads_no_draft FOR TESTING RAISING cx_sadl_static.
    METHODS compare_loads_draft20 FOR TESTING RAISING cx_sadl_static.
    METHODS compare_loads_w_textfield FOR TESTING RAISING cx_sadl_static.
    METHODS mixed_load FOR TESTING RAISING cx_sadl_static.
  PRIVATE SECTION.
*    CLASS-METHODS _create_compound_load IMPORTING io_mp          TYPE REF TO cl_bsa_sadl_mp
*                                        RETURNING VALUE(rr_load) TYPE REF TO if_sadl_load=>ty_sadl_load
*                                        RAISING   cx_sadl_static cx_sadl_contract_violation.
    METHODS _compare_loads IMPORTING iv_xml  TYPE string
                                     iv_uuid TYPE if_sadl_types=>ty_uuid
                           RAISING   cx_sadl_static.
    METHODS _make_load_deterministic CHANGING cs_load TYPE if_sadl_load=>ty_sadl_load
                                     RAISING  cx_sadl_static.
    METHODS _get_so_id_with_item_count EXPORTING ev_so    TYPE char10
                                                 ev_count TYPE i.
    METHODS _sadl_xml_no_draft RETURNING VALUE(rv_xml) TYPE string.
    METHODS setup.
    METHODS teardown.
ENDCLASS.


CLASS cl_sadl_mdp_factory DEFINITION LOCAL FRIENDS ltc_compound_load.


CLASS ltc_compound_load IMPLEMENTATION.

  METHOD setup.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_true ).
  ENDMETHOD.


  METHOD teardown.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( abap_false ).
  ENDMETHOD.


  METHOD ignore_long_assoc_names_gtk.
    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lo_mp) = NEW cl_sadl_mp_entity_exposure( it_paths               = VALUE #( ( `CDS~SADL_V_AUNIT_SO` ) )
                                                  iv_timestamp           = lv_timestamp
                                                  iv_expose_associations = cl_sadl_mp_entity_exposure=>co_association_exposure-true ).
    DATA(lo_api) = cl_sadl_entity_api_factory=>create( CAST #( lo_mp ) ).
    DATA(lo_entity) = lo_api->get_entity( iv_name = 'SADL_V_AUnit_SO' ).
    DATA(ls_assoc) = lo_entity->get_association( iv_name = 'TO_CURRENCYTEXTS' ).
    cl_abap_unit_assert=>assert_not_initial( ls_assoc ).
    TRY.
        lo_entity->get_association( iv_name = 'TO_OTHERITEMS__ASSOCWITHLONGNAME' ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_entity ##NO_HANDLER.
    ENDTRY.
  ENDMETHOD.


  METHOD _get_so_id_with_item_count.
    SELECT salesorderid, COUNT( * ) AS count FROM sadl_v_aunit_soi AS soi
        WHERE soi~\_salesorder-salesorderid <> @space " (also excludes NULL)
        GROUP BY salesorderid
        ORDER BY count DESCENDING
        INTO TABLE @DATA(lt_so)
        UP TO 1 ROWS.
    IF lt_so IS INITIAL.
      cl_abap_unit_assert=>abort( msg  = 'required EPM data not present'
                                  quit = if_aunit_constants=>method ).
    ENDIF.
    DATA(ls_so) = lt_so[ 1 ].
    SELECT COUNT( * ) FROM sadl_v_aunit_so WHERE salesorderid = @ls_so-salesorderid INTO @DATA(lv_so_count).
    IF lv_so_count <> 1.
      cl_abap_unit_assert=>abort( msg  = |EPM data not consistent for SO { ls_so-salesorderid }|
                                  quit = if_aunit_constants=>method ).
    ENDIF.
    ev_so = ls_so-salesorderid.
    ev_count = ls_so-count.
  ENDMETHOD.


  METHOD check_metadata.
    DATA(lo_mp)  = NEW cl_sadl_mp_entity_exposure( it_paths = VALUE #( ( `CDS~SADL_V_AUnit_SOI._SALESORDER` ) ) ).
    DATA(lr_load) = cl_sadl_mdp_factory=>_compile( lo_mp ).
    cl_abap_unit_assert=>assert_bound( lr_load ).
    LOOP AT lr_load->entity_loads ASSIGNING FIELD-SYMBOL(<s_entity_load>).
      ASSIGN <s_entity_load>-sadl_entity TO FIELD-SYMBOL(<sadl_entity>).
      cl_abap_unit_assert=>assert_equals( act = lines( <sadl_entity>-association_external_names )
                                          exp = lines( <sadl_entity>-associations ) ).
      LOOP AT <sadl_entity>-association_annotations ASSIGNING FIELD-SYMBOL(<s_anno>).
        IF NOT line_exists( <sadl_entity>-associations[ name = <s_anno>-name ] ).
          cl_abap_unit_assert=>fail( ).
        ENDIF.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


  METHOD cross_filter_by_so.
    DATA lt_data TYPE TABLE OF sadl_v_aunit_soi.
*    DATA ls_load TYPE if_sadl_load=>ty_sadl_load.

    DATA(lo_mp)  = NEW cl_sadl_mp_entity_exposure( it_paths = VALUE #( ( `CDS~SADL_V_AUNIT_SOI._SALESORDER` ) ) ).
    DATA(lr_load) = cl_sadl_mdp_factory=>_compile( lo_mp ).
    cl_abap_unit_assert=>assert_bound( lr_load ).
    cl_sadl_entity_load_handler=>add_sadl_load( lr_load->* ).
    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).

    _get_so_id_with_item_count( IMPORTING ev_so    = DATA(lv_so)
                                          ev_count = DATA(lv_count) ).

    DATA(lv_soi_entity_name) = `SADL_V_AUnit_SOI`.
    DATA(lv_sadl_id) = lo_mp->if_bsa_sadl_mp~get_uuid( ).
    DATA(lv_soi_entity_id) = CONV sadl_entity_id( lv_sadl_id && `~` && lv_soi_entity_name ).

    DATA(lo_abqi) = cl_sadl_abqi_factory=>create( ).
    CAST cl_sadl_abqi( lo_abqi )->if_sadl_init_mdp~init( io_mdp = lo_mdp  iv_entity_id = lv_soi_entity_id ).
    DATA(lo_cond_fact) = cl_sadl_cond_prov_factory_pub=>create_basic_condition_factory( ).
    DATA(lo_cond) = lo_cond_fact->condition( name = `TO_SALESORDER.SALESORDERID`
                                             operator = 'EQ' low = CONV #( lv_so ) ).
    lo_abqi->register_condition_provider( lo_cond ).
    lo_abqi->select( EXPORTING is_requested = VALUE #( elements = VALUE #( ( `SALESORDERID` ) ( `SALESORDERITEMPOSITION` ) )
                                                       fill_data = abap_true )
                     IMPORTING et_data_rows = lt_data ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_data )  exp = lv_count ).
    cl_abap_unit_assert=>assert_equals( act = VALUE char10( lt_data[ 1 ]-salesorderid )  exp = lv_so ).
*  ENDMETHOD.
*
*
*  METHOD check_assoc_lines.
*    CONSTANTS lc_assoc          TYPE string VALUE 'ASSOCIATION'.
*    CONSTANTS lc_sadl_structure TYPE string VALUE 'SADL_STRUCTURE'.
*    CONSTANTS lc_entity_name    TYPE if_sadl_entity=>ty_entity_id  VALUE 'SADL_ENTITY_NAME'.
*    TRY.
*        NEW cl_sadl_mdp_factory( )->_check_valid_association_names( is_structure_binding   = VALUE #( name                = lc_sadl_structure
*                                                                                                      association_binding = VALUE #( ( name = lc_assoc ) ) )
*                                                                    it_entity_associations = VALUE #( )
*                                                                    iv_exp_entity_name     = lc_entity_name ).
*        cl_abap_unit_assert=>fail( ).
*      CATCH cx_sadl_mdp_compound_load INTO DATA(lx).
*        cl_abap_unit_assert=>assert_equals( act = lx->association_name exp = lc_assoc ).
*        cl_abap_unit_assert=>assert_equals( act = lx->sadl_entity_name exp = lc_entity_name ).
*        cl_abap_unit_assert=>assert_equals( act = lx->sadl_structure exp = lc_sadl_structure ).
*    ENDTRY.
  ENDMETHOD.


  METHOD compare_loads_single_entity.
    DATA(lv_xml) = |<?xml version="1.0" encoding="utf-16"?>| &
          |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" syntaxVersion="" >| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SOI_ANLY" binding="SADL_CDS_RS_SOI_ANLY" />| &
          |<sadl:resultSet>| &
*          |<sadl:structure name="SADL_CDS_Rs_SOI_ANLY" dataSource="SADL_CDS_RS_SOI_ANLY" maxEditMode="RO" exposure="TRUE" >| &
          |<sadl:structure name="SADL_CDS_Rs_SOI_ANLY" dataSource="SADL_CDS_RS_SOI_ANLY" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          |</sadl:structure>| &
          |</sadl:resultSet>| &
          |</sadl:definition>| .

    _compare_loads( iv_uuid = 'compare_loads_single_entity'
                    iv_xml  = lv_xml ).
  ENDMETHOD.

  METHOD check_compound_load_checksums.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( ).
    DATA(lv_sadl_xml) =
           |<?xml version="1.0" encoding="utf-16"?>| &
           |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" syntaxVersion="" >| &
           | <sadl:dataSource type="CDS" name="SADL_V_AUNIT_PROD" binding="SADL_V_AUNIT_PROD" />| &
           | <sadl:dataSource type="CDS" name="SADL_V_AUNIT_SOI" binding="SADL_V_AUNIT_SOI" />| &
           |<sadl:resultSet>| &
           |<sadl:structure name="SADL_V_AUnit_Prod" dataSource="SADL_V_AUNIT_PROD" maxEditMode="RO" exposure="TRUE" >| &
           | <sadl:query name="SADL_QUERY">| &
           | </sadl:query>| &
           |</sadl:structure>| &
           |<sadl:structure name="SADL_V_AUnit_SOI" dataSource="SADL_V_AUNIT_SOI" maxEditMode="RO" exposure="TRUE" >| &
           | <sadl:query name="SADL_QUERY">| &
           | </sadl:query>| &
           | <sadl:association name="TO_PRODUCT" binding="_PRODUCT" target="SADL_V_AUnit_Prod" cardinality="zeroToOne" />| &
           |</sadl:structure>| &
           |</sadl:resultSet>| &
           |</sadl:definition>| .
    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lv_sadl_uuid) = CONV if_sadl_types=>ty_uuid( 'BSA_COMPOUND_LOAD_CHECHSUMS_001' ).
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = lv_sadl_uuid
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    DATA(lr_compound_load) = cl_sadl_mdp_factory=>_compile( io_mp = lo_mp ).
    cl_abap_unit_assert=>assert_equals( act = lines( lr_compound_load->entity_checksums ) exp = 4 ).
    cl_abap_unit_assert=>assert_equals( act = lines( lr_compound_load->cds_metadata ) exp = 4 ).
    DATA(lo_matcher) = NEW th_bsa_data_matcher( ).
    lo_matcher->assert_matches( act = lr_compound_load->entity_checksums
                                exp = VALUE if_sadl_load=>tt_entity_checksums( ( id = 'SADL_V_AUNIT_BUPA'     type = cl_sadl_entity_factory=>co_type-cds  ) "checksum = '?*'
                                                                               ( id = 'SADL_V_AUNIT_CURRENCY' type = cl_sadl_entity_factory=>co_type-cds )
                                                                               ( id = 'SADL_V_AUNIT_PROD'     type = cl_sadl_entity_factory=>co_type-cds )
                                                                               ( id = 'SADL_V_AUNIT_SOI'      type = cl_sadl_entity_factory=>co_type-cds ) )
                                ignore_initials_in_expected = abap_true ).

    LOOP AT lr_compound_load->entity_checksums ASSIGNING FIELD-SYMBOL(<s_checksum>).
      cl_abap_unit_assert=>assert_true( boolc( line_exists( lr_compound_load->cds_metadata[ id = <s_checksum>-id ] ) ) ).
    ENDLOOP.

  ENDMETHOD.


  METHOD check_load_checksum_txt_denorm.
    " Get exposure load
    DATA(lo_mdp) = cl_sadl_mdp_exposure=>get_for_entity( iv_type = cl_sadl_entity_factory=>co_type-cds
                                                         iv_id   = 'SADL_V_AUNIT_UNIT_OF_MEASURE' ).
    lo_mdp->get_checksums( IMPORTING et_checksums = DATA(lt_measure_checksum) ).
    DATA(lo_matcher) = NEW th_bsa_data_matcher( ).
    lo_matcher->assert_matches( act = lt_measure_checksum
                                exp = VALUE if_sadl_load=>tt_entity_checksums( ( id = 'SADL_V_AUNIT_UNIT_OF_MEASURE'   type = cl_sadl_entity_factory=>co_type-cds  )
                                                                               ( id = 'SADL_V_AUNIT_UNIT_OF_MEASURE_T' type = cl_sadl_entity_factory=>co_type-cds ) )
                                ignore_initials_in_expected = abap_true ).
    DATA(lo_mdp_exp) = cl_sadl_mdp_exposure=>get_for_entity( iv_type = cl_sadl_entity_factory=>co_type-cds
                                                             iv_id   = 'SADL_V_AUNIT_UNIT_OF_MEASURE_T' ).
    lo_mdp_exp->get_checksums( IMPORTING et_checksums = DATA(lt_measure_t_checksum) ).
    lo_matcher->assert_matches( act = lt_measure_t_checksum
                                exp = VALUE if_sadl_load=>tt_entity_checksums( ( id = 'SADL_V_AUNIT_UNIT_OF_MEASURE_T'   type = cl_sadl_entity_factory=>co_type-cds ) )
                                ignore_initials_in_expected = abap_true ).
    DATA(lv_sadl_xml) =
            |<?xml version="1.0" encoding="utf-16"?>| &
            |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" syntaxVersion="" >| &
            | <sadl:dataSource type="CDS" name="SADL_V_AUNIT_UNIT_OF_MEASURE" binding="SADL_V_AUNIT_UNIT_OF_MEASURE" />| &
            |<sadl:resultSet>| &
            |<sadl:structure name="SADL_V_AUnit_Unit_Of_Measure" dataSource="SADL_V_AUNIT_UNIT_OF_MEASURE" maxEditMode="RO" exposure="TRUE" >| &
            | <sadl:query name="SADL_QUERY">| &
            | </sadl:query>| &
            |</sadl:structure>| &
            |</sadl:resultSet>| &
            |</sadl:definition>| .
    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lv_sadl_uuid) = CONV if_sadl_types=>ty_uuid( 'BSA_COMPOUND_LOAD_CHECHSUMS_002' ).
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = lv_sadl_uuid
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    DATA(lr_compound_load) = cl_sadl_mdp_factory=>_compile( io_mp = lo_mp ).
    cl_abap_unit_assert=>assert_equals( act = lines( lr_compound_load->entity_checksums ) exp = 2 ).
    cl_abap_unit_assert=>assert_equals( act = lines( lr_compound_load->cds_metadata ) exp = 2 ).
    lo_matcher->assert_matches( act = lr_compound_load->entity_checksums
                                exp = VALUE if_sadl_load=>tt_entity_checksums( ( id = 'SADL_V_AUNIT_UNIT_OF_MEASURE'     type = cl_sadl_entity_factory=>co_type-cds  )
                                                                               ( id = 'SADL_V_AUNIT_UNIT_OF_MEASURE_T' type = cl_sadl_entity_factory=>co_type-cds ) )
                                ignore_initials_in_expected = abap_true ).
    LOOP AT lr_compound_load->entity_checksums ASSIGNING FIELD-SYMBOL(<s_checksum>).
      cl_abap_unit_assert=>assert_true( boolc( line_exists( lr_compound_load->cds_metadata[ id = <s_checksum>-id ] ) ) ).
    ENDLOOP.
  ENDMETHOD.



  METHOD _sadl_xml_no_draft.
    rv_xml = |<?xml version="1.0" encoding="utf-16"?>| &
          |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" syntaxVersion="" >| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SOI_ANLY" binding="SADL_CDS_RS_SOI_ANLY" />| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SOI_PARAM_ALPHA" binding="SADL_CDS_RS_SOI_PARAM_ALPHA" />| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SOI_PARAM_ANLY" binding="SADL_CDS_RS_SOI_PARAM_ANLY" />| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SO_ANLY" binding="SADL_CDS_RS_SO_ANLY" />| &
          | <sadl:dataSource type="CDS" name="SADL_CDS_RS_SO_ANLY2" binding="SADL_CDS_RS_SO_ANLY2" />| &
          |<sadl:resultSet>| &
          |<sadl:structure name="SADL_CDS_Rs_SOI_ANLY" dataSource="SADL_CDS_RS_SOI_ANLY" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_CDS_RS_SO_ANLY2" dataSource="SADL_CDS_RS_SO_ANLY2" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_CDS_Rs_SOI_Param_AlphaSet" dataSource="SADL_CDS_RS_SOI_PARAM_ALPHA" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:association name="TO_ITEMS" binding="_ITEMS" target="SADL_CDS_Rs_SOI_ANLY" cardinality="many" />| &
          | <sadl:association name="TO_PARENT" binding="_PARENT" target="SADL_CDS_RS_SO_ANLY2" cardinality="zeroToOne" />| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_CDS_RS_SOI_Param_AnlyResults" dataSource="SADL_CDS_RS_SOI_PARAM_ANLY" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:association name="TO_ITEMS" binding="_ITEMS" target="SADL_CDS_Rs_SOI_ANLY" cardinality="many" />| &
          | <sadl:association name="TO_PARENT" binding="_PARENT" target="SADL_CDS_RS_SO_ANLY2" cardinality="zeroToOne" />| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_CDS_RS_SO_ANLY" dataSource="SADL_CDS_RS_SO_ANLY" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:association name="TO_ITEMS_ANLY" binding="_ITEMS_ANLY" target="SADL_CDS_Rs_SOI_ANLY" cardinality="many" />| &
          |</sadl:structure>| &
          |</sadl:resultSet>| &
          |</sadl:definition>| .
  ENDMETHOD.

  METHOD compare_loads_no_draft.
    _compare_loads( iv_uuid = 'compare_loads_no_draft'
                    iv_xml  = _sadl_xml_no_draft( ) ).
  ENDMETHOD.

  METHOD compare_loads_draft20.
    DATA(ls_sadl_def) = NEW cl_sadl_mp_entity_exposure( iv_timestamp           = '1234'
                                                        iv_expose_associations = abap_true
                                                        it_paths                = VALUE #( ( `CDS~SADL_VD_CoreBO_SO` ) ) )->if_bsa_sadl_mp~get_sadl_definition( ).
    DATA(lv_sadl_xml) = cl_bsa_sadl_m2m_transformer=>get_instance( )->abap_structure_to_xml( ls_sadl_def ).
*    RETURN. " test method not finished.
    " For the RETURN with following statements you got a SVER mail
    IF 1 = 0.
      _compare_loads( iv_uuid = 'compare_loads_draft20'
                      iv_xml  = lv_sadl_xml ).
    ENDIF.
  ENDMETHOD.

  METHOD compare_loads_w_textfield.
    DATA(lv_xml)  = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="">| &
    |  <sadl:dataSource binding="I_Sadl_Rs_So_ItemWithDraft" name="I_SADL_RS_SO_ITEMWITHDRAFT" type="CDS"/>| &
    |  <sadl:resultSet>| &
*    |    <sadl:structure dataSource="I_SADL_RS_SO_ITEMWITHDRAFT" maxEditMode="RO" exposure="TRUE" name="I_Sadl_Rs_So_ItemWithDraft">| &
    |    <sadl:structure dataSource="I_SADL_RS_SO_ITEMWITHDRAFT" exposure="TRUE" name="I_Sadl_Rs_So_ItemWithDraft">| &
    |      <sadl:query name="SADL_QUERY"> </sadl:query>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    _compare_loads( iv_uuid = 'compare_loads_w_textfield'
                    iv_xml  = lv_xml ).
  ENDMETHOD.

  METHOD mixed_load.
    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-16"?>| &
          |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" syntaxVersion="" >| &
          |<sadl:dataSource type="CDS" name="SADL_V_AUnit_SOI"  binding="SADL_V_AUNIT_SOI" />| &
          |<sadl:dataSource type="CDS" name="SADL_V_AUnit_SO"   binding="SADL_V_AUNIT_SO" />| &
          |<sadl:dataSource type="CDS" name="SADL_V_AUnit_Prod" binding="SADL_V_AUNIT_PROD" />| &
          |<sadl:dataSource type="CDS" name="SADL_V_AUnit_BuPa" binding="SADL_V_AUNIT_BUPA" />| &
          |<sadl:resultSet>| &
          |<sadl:structure name="SADL_V_AUnit_SO" dataSource="SADL_V_AUnit_SO" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:association name="TO_ITEMS" binding="_ITEMS" target="SADL_V_AUnit_SOI" cardinality="many" />| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_V_AUnit_SOI" dataSource="SADL_V_AUnit_SOI" exposure="TRUE" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_V_AUnit_Prod" dataSource="SADL_V_AUnit_Prod" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:attribute name="NODE_KEY" binding="NODE_KEY" isKey="TRUE" />| &
          | <sadl:association name="TO_SUPPLIER" binding="_SUPPLIER" target="SADL_V_AUnit_BuPa" cardinality="many" />| &
          |</sadl:structure>| &
          |<sadl:structure name="SADL_V_AUnit_BuPa" dataSource="SADL_V_AUnit_BuPa" >| &
          | <sadl:query name="SADL_QUERY">| &
          | </sadl:query>| &
          | <sadl:attribute name="NODE_KEY" binding="NODE_KEY" />| &
          |</sadl:structure>| &
          |</sadl:resultSet>| &
          |</sadl:definition>| .

    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'mixed_mds_rds_case'
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    DATA(lr_entity_load) = lo_mdp->get_entity_load( 'SADL_V_AUnit_SO' ).
    cl_abap_unit_assert=>assert_bound( lr_entity_load ).
    cl_abap_unit_assert=>assert_true( boolc( line_exists( lr_entity_load->sadl_entity-associations[ name = 'TO_ITEMS' ] ) ) ).

    lr_entity_load = lo_mdp->get_entity_load( 'SADL_V_AUnit_Prod' ).
    cl_abap_unit_assert=>assert_bound( lr_entity_load ).
    cl_abap_unit_assert=>assert_true( boolc( line_exists( lr_entity_load->sadl_entity-associations[ name = 'TO_SUPPLIER' ] ) ) ).

  ENDMETHOD.

  METHOD _compare_loads.
    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = iv_uuid
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = iv_xml ).

    cl_sadl_entity_load_handler=>remove_sadl_load( iv_sadl_uuid = iv_uuid ).
    DATA(lr_compound_load) = cl_sadl_mdp_factory=>_compile( io_mp = lo_mp ).

    cl_abap_unit_assert=>assert_bound( lr_compound_load ).
    ASSIGN lr_compound_load->* TO FIELD-SYMBOL(<s_compound_load>).
    DATA(ls_compound_load) = <s_compound_load>.

    cl_sadl_entity_load_handler=>remove_sadl_load( iv_sadl_uuid = iv_uuid ).
    NEW cl_bsa_sadl_compiler( )->if_bsa_sadl_compiler~create( EXPORTING io_mp_context = lo_mp ).
    DATA(lr_old_load) = cl_sadl_entity_load_handler=>get_sadl_load( lo_mp ).

    cl_abap_unit_assert=>assert_bound( lr_old_load ).
    ASSIGN lr_old_load->* TO FIELD-SYMBOL(<s_old_load>).
    DATA(ls_old_load) = <s_old_load>.
    _make_load_deterministic( CHANGING cs_load = ls_old_load ).
    _make_load_deterministic( CHANGING cs_load = ls_compound_load ).

*    " replace old_load join targets with wild card
*    LOOP AT ls_old_load-entity_loads ASSIGNING FIELD-SYMBOL(<entity>).
*      LOOP AT <entity>-db_view_metadata-joins ASSIGNING FIELD-SYMBOL(<s_join>)
*          WHERE target_alias CS '.'.
*        <s_join>-target_alias = substring_to( val = <s_join>-target_alias  sub = '.' ) && '*'.
*      ENDLOOP.
*    ENDLOOP.

    cl_abap_unit_assert=>assert_equals( act = ls_compound_load  exp = ls_old_load ).
*                                        msg = 'Test first (Oswald)' level = if_aunit_constants=>tolerable ).
  ENDMETHOD.

  METHOD _make_load_deterministic.
    SORT cs_load-entity_loads.
    LOOP AT cs_load-entity_loads ASSIGNING FIELD-SYMBOL(<entity>).
      SORT <entity>-sadl_entity-primary_key.
      SORT <entity>-sadl_entity-elements.
      SORT <entity>-sadl_entity-entity_annotations.
      SORT <entity>-sadl_entity-element_annotations.
      SORT <entity>-sadl_entity-cds_element_annotations BY elementname annoname.
      SORT <entity>-query_options-business_key.
      SORT <entity>-query_options-dimension_properties.
*      DELETE <entity>-db_view_metadata-elements WHERE alias CP 'MANDT_*'. " numbering differs between compound load and old load
      SORT <entity>-db_view_metadata-joins.
      SORT <entity>-db_view_metadata-entities.
    ENDLOOP.
    SORT cs_load-bsa_metadata_nodes.
    LOOP AT cs_load-bsa_metadata_nodes ASSIGNING FIELD-SYMBOL(<s_node>).
      SORT <s_node>-attribute_mapping.
    ENDLOOP.
  ENDMETHOD.

  METHOD missing_assoc_target.
    DATA lx TYPE REF TO cx_root.

    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource name="SADL_V_AUnit_SOI"     binding="SADL_V_AUNIT_SOI_C"     type="CDS"/>| &
    |  <sadl:dataSource name="Sadl_V_Aunit_So"     binding="SADL_V_AUNIT_SO_C"     type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="Sadl_V_Aunit_So" maxEditMode="RO" name="Sadl_V_Aunit_So_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |      <sadl:association binding="_ITEMS"  target="Sadl_V_Aunit_Soi_C" name="TO_ITEMS" cardinality="many"/>| &
    |    </sadl:structure>| &
*    |    <sadl:structure dataSource="SADL_V_AUnit_SOI" maxEditMode="RO" name="Sadl_V_Aunit_Soi_C" exposure="TRUE">| &
*    |      <sadl:query name="Query"/>| &
*    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'missing_assoc_target'
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml_so ).

    TRY.
        cl_sadl_mdp_factory=>_compile( io_mp = lo_mp ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_contract_violation INTO lx.
        WHILE lx->previous IS BOUND.
          lx = lx->previous.
        ENDWHILE.
        DATA(lv_text) = lx->get_text( ).
        cl_abap_unit_assert=>assert_char_cp( act = lv_text  exp = '*Sadl_V_Aunit_Soi_C*').
    ENDTRY.
  ENDMETHOD.


  METHOD wrong_assoc_binding.
    DATA lx TYPE REF TO cx_root.

    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource name="SADL_V_AUnit_SOI"     binding="SADL_V_AUNIT_SOI_C"     type="CDS"/>| &
    |  <sadl:dataSource name="Sadl_V_Aunit_So"     binding="SADL_V_AUNIT_SO_C"     type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="Sadl_V_Aunit_So" maxEditMode="RO" name="Sadl_V_Aunit_So_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |      <sadl:association binding="_ITEMSS"  target="Sadl_V_Aunit_Soi_C" name="TO_ITEMS" cardinality="many"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="SADL_V_AUnit_SOI" maxEditMode="RO" name="Sadl_V_Aunit_Soi_C" exposure="TRUE">| &
    |      <sadl:query name="Query"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = 'Violates_Exposure_Naming_3'
                                                            iv_timestamp = lv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml_so ).

*    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).
    TRY.
        IF cl_sadl_mdp_factory=>_compile( lo_mp ) IS BOUND.
          cl_abap_unit_assert=>fail( ).
        ENDIF.
      CATCH cx_sadl_contract_violation cx_sadl_static INTO lx.
        WHILE lx->previous IS BOUND.
          lx = lx->previous.
        ENDWHILE.
        DATA(lv_text) = lx->get_text( ).
        cl_abap_unit_assert=>assert_char_cp( act = lv_text  exp = '*_ITEMSS*').
    ENDTRY.
  ENDMETHOD.


*  METHOD _create_compound_load.
*    IF cl_sadl_mdp_factory=>use_new_compilation( ) = abap_true.
*      rr_load = cl_sadl_mdp_factory=>_compile( io_mp ).
*    ELSE.
*      CREATE DATA rr_load.
*      cl_sadl_mdp_factory=>_get_binding_for_exposure(  EXPORTING io_mp                = io_mp
*                                                       IMPORTING et_structure_binding = DATA(lt_sadl_structure_binding)
*                                                                 ev_exposure_only     = DATA(lv_exposure_only) ).
*      IF lv_exposure_only = abap_true.
*        cl_sadl_mdp_factory=>_check_draft_enabled_structs( EXPORTING it_structure_binding = lt_sadl_structure_binding ).
*        rr_load->sadl_uuid = io_mp->if_bsa_sadl_mp~get_uuid( ).
*        rr_load->timestamp = io_mp->if_bsa_sadl_mp~get_timestamp( ).
*        rr_load->load_version = if_sadl_load=>co_load_gen_version.
*        TRY.
**          _check_naming( EXPORTING it_structure_binding = lt_sadl_structure_binding ).
*            cl_sadl_mdp_factory=>_append_exposure_loads( EXPORTING it_sadl_structure_binding = lt_sadl_structure_binding
*                                                         CHANGING  xs_load = rr_load->* ).
*          CATCH cx_sadl_contract_violation cx_sadl_static INTO DATA(lx).
*            CLEAR rr_load.
*        ENDTRY.
*      ENDIF.
*      IF rr_load IS BOUND AND rr_load->entity_loads IS INITIAL.
*        CLEAR rr_load.
*      ENDIF.
*    ENDIF.
*  ENDMETHOD.

ENDCLASS.

CLASS ltc_draft_enabled_struc DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS FINAL.
  PRIVATE SECTION.
    CONSTANTS lc_so            TYPE string VALUE 'SADL_VD_CoreBO_SO'.  "'I_AIS_U_SalesOrder'.
    CONSTANTS lc_item          TYPE string VALUE 'SADL_VD_CoreBO_SOItem'. "'I_AIS_U_SalesOrderItem'.
    CONSTANTS lc_schedule_line TYPE string VALUE 'SADL_VD_CoreBO_SOSchedLine'.  "'I_AIS_U_SalesOrderItemSL'.
    CONSTANTS: BEGIN OF lc_assoc_to_item,
                 name    TYPE string VALUE 'TO_ITEMS',
                 binding TYPE string VALUE '_ITEMS',
                 target  TYPE string VALUE lc_item,
               END OF lc_assoc_to_item.
    CONSTANTS: BEGIN OF lc_assoc_to_schedule_line,
                 name    TYPE string VALUE 'TO_SCHEDULELINE',
                 binding TYPE string VALUE '_SCHEDULELINE',
                 target  TYPE string VALUE lc_schedule_line,
               END OF lc_assoc_to_schedule_line.
    CLASS-METHODS class_setup.
    METHODS so_without_assoc         FOR TESTING RAISING cx_static_check.
    METHODS so_with_assoc            FOR TESTING RAISING cx_static_check.
    METHODS so_with_all_child_assocs FOR TESTING RAISING cx_static_check.
    METHODS so_with_all_child_nodes  FOR TESTING RAISING cx_static_check.
    METHODS draft1_sibling_not_exposed FOR TESTING RAISING cx_static_check.
    METHODS _get_mp RETURNING VALUE(ro_mp) TYPE REF TO cl_bsa_sadl_mp
                    RAISING   cx_static_check.
ENDCLASS.

CLASS cl_sadl_mdp_factory DEFINITION LOCAL FRIENDS ltc_draft_enabled_struc.


CLASS ltc_draft_enabled_struc IMPLEMENTATION.

  METHOD class_setup.
    cl_sadl_aunit_friend=>trigger_cds_exp_load_regen( ).
    TRY.
        cl_sadl_entity_factory=>get_instance( )->get_entity( iv_id = CONV #( lc_so )
                                                             iv_type = 'CDS' ).
      CATCH cx_sadl_entity cx_static_check.
        cl_abap_unit_assert=>abort( msg = 'Software Component HOME not available in this system' ).
    ENDTRY.
  ENDMETHOD.

  METHOD so_without_assoc.
    " expose Root and Item but without the connecting association -> expect exception
    TRY.
        DATA(lo_mp) = NEW cl_sadl_mp_entity_exposure( VALUE #( ( `CDS~` && lc_so )
                                                               ( `CDS~` && lc_item ) ) ).
        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_contract_violation ##NO_HANDLER.
    ENDTRY.
  ENDMETHOD.

  METHOD so_with_assoc.
    DATA(lo_mp) = NEW cl_sadl_mp_entity_exposure( VALUE #( ( `CDS~` && lc_so && '.' && lc_assoc_to_item-binding ) ) ).
    cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
  ENDMETHOD.

  METHOD so_with_all_child_assocs.
    DATA(lo_mp) = NEW cl_sadl_mp_entity_exposure( VALUE #( ( `CDS~` && lc_so && '.' && lc_assoc_to_item-binding && '.' && lc_assoc_to_schedule_line-binding ) ) ).
    cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
  ENDMETHOD.

  METHOD so_with_all_child_nodes.
    " Association to Schedule Line is missing -> expect exception
    TRY.
        DATA(lo_mp) = NEW cl_sadl_mp_entity_exposure( VALUE #( ( `CDS~` && lc_so && '.' && lc_assoc_to_item-binding )
                                                               ( `CDS~` && lc_assoc_to_schedule_line-binding ) ) ).
        cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_contract_violation ##NO_HANDLER.
    ENDTRY.
  ENDMETHOD.

  METHOD draft1_sibling_not_exposed.
    DATA(lo_mp) = _get_mp( ).
    cl_sadl_entity_mp_registry=>register_mp( CAST #( lo_mp ) ).

    DATA(lo_entity) = cl_sadl_entity_factory=>get_instance( )->get_entity( iv_type = cl_sadl_entity_factory=>co_type-sadl
                                                                           iv_id   = CONV #( 'cl_sadl_mdp_factory_ais~I_AIS_U_SalesOrder' ) ).
    cl_abap_unit_assert=>assert_bound( lo_entity ).
    lo_entity->get_associations( IMPORTING et_associations = DATA(lt_assocs) ).
    LOOP AT lt_assocs INTO DATA(ls_assoc).
      DATA(lo_target) = lo_entity->get_association_target( ls_assoc-name ).
      cl_abap_unit_assert=>assert_bound( lo_target ).
    ENDLOOP.
  ENDMETHOD.

  METHOD _get_mp.
    DATA lv_timestamp TYPE timestamp.
    GET TIME STAMP FIELD lv_timestamp.
    DATA(lv_sadl_xml_so) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="">| &
    |  <sadl:dataSource binding="I_AIS_U_SalesOrder" name="I_AIS_U_SALESORDER" type="CDS"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="I_AIS_U_SALESORDER" maxEditMode="ED" exposure="TRUE" name="I_AIS_U_SalesOrder">| &
    |      <sadl:query name="SADL_QUERY"> </sadl:query>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
    ro_mp   = cl_sadl_mp_factory=>create_mp_entity_xml(  iv_uuid      = 'cl_sadl_mdp_factory_ais'
                                                         iv_timestamp = lv_timestamp
                                                         iv_sadl_xml  = lv_sadl_xml_so ).
  ENDMETHOD.

ENDCLASS.
