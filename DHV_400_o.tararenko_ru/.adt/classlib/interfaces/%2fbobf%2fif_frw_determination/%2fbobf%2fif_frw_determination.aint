"! This interface is used by implemented determinations
"! <p>This interface defines the method <strong>EXECUTE</strong> to handle side effects of modifications. Due to performance reasons, it
"! is possible to reduce the instances for that the <strong>EXECUTE</strong> method is invoked.
"! If the execution of the determination shall only happen for instances having a certain attribute changed, the method <strong>CHECK_DELTA</strong> should be implemented.
"! If the determination execution is depending on other conditions, the method <strong>CHECK</strong> should be implemented.</p>
interface /BOBF/IF_FRW_DETERMINATION
  public .

"! This optional method allows to reduce the amount of node instances that will be processed by the determination due to performance reasons.
"! Thereto it can be implemented to check if the node attributes, that are relevant for triggering the determination logic, have been changed at all.
"! If not, the key of the corresponding node instance has to be removed from <strong>CT_KEY</strong>. This avoids that this instance is later on processed in the determination's <strong>EXECUTE</strong> method.
"! @parameter IS_CTX               | Provides determination execution context information
"! @parameter IO_READ              | Provides read access to the data of business object instances
"! @parameter CT_KEY               | List of node instances that will be processed by the determination in the <strong>EXECUTE</strong> method later on.
"! Can be reduced by the instances for which no determination is required as no check relevant node attributes are changed.
"! @raising  /BOBF/CX_FRW          | Exception
  methods CHECK_DELTA
    importing
      !IS_CTX type /BOBF/S_FRW_CTX_DET
      !IO_READ type ref to /BOBF/IF_FRW_READ
    changing
      !CT_KEY type /BOBF/T_FRW_KEY
    raising
      /BOBF/CX_FRW .

"! This optional method allows to reduce the amount of node instances that will be processed by the determination due to performance reasons.
"! Thereto it can be implemented to check whether the node instance attributes have values that require the execution of the determination.
"! If not, the key of the corresponding node instance has to be removed from <strong>CT_KEY</strong>. This avoids that this instance is later on processed in the determination's <strong>EXECUTE</strong> method.
"! @parameter IS_CTX               | Provides determination execution context information
"! @parameter IO_READ              | Provides read access to data of the business object instances
"! @parameter CT_KEY               | List of node instances that will be processed by the determination in the <strong>EXECUTE</strong> method later on.
"! Can be reduced by the instances for which no determination is required as no check relevant node attributes are changed.
"! @raising /BOBF/CX_FRW           | Exception
  methods CHECK
    importing
      !IS_CTX type /BOBF/S_FRW_CTX_DET
      !IO_READ type ref to /BOBF/IF_FRW_READ
    changing
      !CT_KEY type /BOBF/T_FRW_KEY
    raising
      /BOBF/CX_FRW .

"! Carries out the determination at runtime
"! <p>This mandatory method implements the main determination logic. It provides modification access to the nodes instance data and returns the messages and the keys of failed node instances (instances for which the determination cannot be executed).</p>
"! @parameter IS_CTX                    | Provides determination execution context information
"! @parameter IT_KEY                    | Set of node instance keys that are to be processed by the determination
"! @parameter IO_READ                   | Provides read access to data of the business object instances
"! @parameter IO_MODIFY                 | Provides modification access to data of the business object instances
"! @parameter EO_MESSAGE                | Message object used for returning information, warning, or error messages related to the determination execution
"! @parameter ET_FAILED_KEY             | Set of node instance keys (subset of <strong>IT_KEY</strong>) that do not match the determination criteria
"! <ul>
"! <li>Determination (After Modify): Changes that have triggered the determination for the failed instances are cached and the frameworks will try to repeat the determination execution for the failed instances during the next
"! modification core service call again. If the transaction is requested to be saved, but there are still those pending changes left over, the framework dumps. Thus you should use the <strong>ET_FAILED_KEY</strong> only in case of temporary lock
"! issues.</li>
"! <li>Determination (Adjust Numbers, Do_Save, AfterFailedSave, AfterLoading): Do not use. </li>
"! <li>Determination (Authority): The ET_FAILED_KEY instances are unload from the buffer.</li>
"! </ul>
"! @raising   /BOBF/CX_FRW              | Exception
  methods EXECUTE
    importing
      !IS_CTX type /BOBF/S_FRW_CTX_DET
      !IT_KEY type /BOBF/T_FRW_KEY
      !IO_READ type ref to /BOBF/IF_FRW_READ
      !IO_MODIFY type ref to /BOBF/IF_FRW_MODIFY
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY
    raising
      /BOBF/CX_FRW .

endinterface.