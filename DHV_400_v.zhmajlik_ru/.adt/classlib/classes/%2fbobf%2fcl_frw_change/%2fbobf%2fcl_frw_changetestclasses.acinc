*"* use this source file for your ABAP unit test classes
CLASS ltc_sort DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_sort.

CLASS ltc_sort DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS setup.
    METHODS no_sort FOR TESTING.
    METHODS complete_sort FOR TESTING.
    METHODS prerequisites FOR TESTING.
ENDCLASS.

CLASS ltc_sort IMPLEMENTATION.

  METHOD setup.
    CREATE OBJECT mo_cut.
    "build test data
    mo_cut->mt_change = VALUE #(
      ( change_mode = /bobf/if_frw_c=>sc_modify_delete
        external = abap_false
        failed = abap_false
        node_key = 1
        key = 100
        det_processed = abap_false
        val_processed = abap_false )
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_false
        failed = abap_false
        node_key = 1
        key = 100
        det_processed = abap_false
        val_processed = abap_false )
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_false
        failed = abap_false
        node_key = 1
        key = 100
        det_processed = abap_false
        val_processed = abap_false )
      ( change_mode = /bobf/if_frw_c=>sc_modify_update
        external = abap_false
        failed = abap_false
        node_key = 1
        key = 100
        det_processed = abap_false
        val_processed = abap_false )
    ).

  ENDMETHOD.

  METHOD no_sort.

*    "only delete duplicates. sort order should remain stable
*    mo_cut->sort(
*      EXPORTING
*        iv_sort   = /bobf/if_frw_c=>sc_change_unsorted
*    ).
*
*    cl_abap_unit_assert=>assert_equals(
*        exp = VALUE /bobf/t_frw_change(
*              ( change_mode = /bobf/if_frw_c=>sc_modify_delete
*                external = abap_false
*                failed = abap_false
*                node_key = 1
*                key = 100
*                det_processed = abap_false
*                val_processed = abap_false )
*              ( change_mode = /bobf/if_frw_c=>sc_modify_create
*                external = abap_false
*                failed = abap_false
*                node_key = 1
*                key = 100
*                det_processed = abap_false
*                val_processed = abap_false )
*              ( change_mode = /bobf/if_frw_c=>sc_modify_update
*                external = abap_false
*                failed = abap_false
*                node_key = 1
*                key = 100
*                det_processed = abap_false
*                val_processed = abap_false ) )
*        act = mo_cut->mt_change
*    ).
*    cl_abap_unit_assert=>assert_equals(
*      exp = /bobf/if_frw_c=>sc_change_unsorted
*      act = mo_cut->mv_sorted
*    ).
  ENDMETHOD.

  METHOD complete_sort.

    "sort and delete dupicate records
    mo_cut->sort(
      EXPORTING
        iv_sort   = /bobf/if_frw_c=>sc_change_sort_complete
    ).

    cl_abap_unit_assert=>assert_equals(
        exp = VALUE /bobf/t_frw_change(
              ( change_mode = /bobf/if_frw_c=>sc_modify_create
                external = abap_false
                failed = abap_false
                node_key = 1
                key = 100
                det_processed = abap_false
                val_processed = abap_false )
              ( change_mode = /bobf/if_frw_c=>sc_modify_delete
                external = abap_false
                failed = abap_false
                node_key = 1
                key = 100
                det_processed = abap_false
                val_processed = abap_false )
              ( change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                node_key = 1
                key = 100
                det_processed = abap_false
                val_processed = abap_false ) )
        act = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_frw_c=>sc_change_sort_complete
      act = mo_cut->mv_sorted
    ).


  ENDMETHOD.

  METHOD prerequisites.
* prerequisite: keep sort sequence of change modes
* CREATE < DELETE < UPDATE    < RELOADs
*                 < PROPERTYs

    IF NOT /bobf/if_frw_c=>sc_modify_create < /bobf/if_frw_c=>sc_modify_delete.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
    IF NOT /bobf/if_frw_c=>sc_modify_delete < /bobf/if_frw_c=>sc_modify_update.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
    IF NOT /bobf/if_frw_c=>sc_modify_update < /bobf/if_frw_c=>sc_modify_reload.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
    IF NOT /bobf/if_frw_c=>sc_modify_update < /bobf/if_frw_c=>sc_modify_reload_delete.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
    IF NOT /bobf/if_frw_c=>sc_modify_delete < /bobf/if_frw_c=>sc_modify_property_node.
      cl_abap_unit_assert=>fail( ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS ltc_failed_modifications DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_failed_modifications.

CLASS ltc_failed_modifications DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS setup.
    METHODS failed_modifs_by_it_node_mod FOR TESTING.
    METHODS failed_modifs_by_is_node_chmod FOR TESTING.
ENDCLASS.

CLASS ltc_failed_modifications IMPLEMENTATION.
  METHOD setup.
    CREATE OBJECT mo_cut.
  ENDMETHOD.

  METHOD failed_modifs_by_it_node_mod.

    DATA lt_node_mod TYPE /bobf/t_frw_node_mod.

    lt_node_mod = VALUE #(
     ( node         = 1
       key          = 10
       change_mode  = /bobf/if_frw_c=>sc_modify_create )
     ( node         = 1
       key          = 11
       change_mode  = /bobf/if_frw_c=>sc_modify_update )
    ).

    mo_cut->mt_change = VALUE #(
      ( node_key = 1
        key = 10
        change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_true
        failed = abap_false )
      ( node_key = 1
        key = 11
        change_mode = /bobf/if_frw_c=>sc_modify_update
        external = abap_true
        failed = abap_false )
      ( node_key = 1
        key = 12
        change_mode = /bobf/if_frw_c=>sc_modify_delete
        external = abap_true
        failed = abap_false )
    ).

    mo_cut->failed_modifications(
      EXPORTING
*        iv_change_mode =     " Change category
*        is_node        =     " Node
        it_node_mod    = lt_node_mod
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( mo_cut->mt_change ) ).
    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 10
         change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_true
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 11
         change_mode = /bobf/if_frw_c=>sc_modify_update
         external = abap_true
         failed = abap_true
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 12
         change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

  ENDMETHOD.

  METHOD failed_modifs_by_is_node_chmod.

    DATA ls_node TYPE /bobf/s_frw_node.

    ls_node-node = 1.
    ls_node-key = 10.

    mo_cut->mt_change = VALUE #(
      ( node_key = 1
        key = 10
        change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_true
        failed = abap_false )
      ( node_key = 1
        key = 11
        change_mode = /bobf/if_frw_c=>sc_modify_update
        external = abap_true
        failed = abap_false )
      ( node_key = 1
        key = 12
        change_mode = /bobf/if_frw_c=>sc_modify_delete
        external = abap_true
        failed = abap_false )
    ).

    mo_cut->failed_modifications(
      EXPORTING
        iv_change_mode = /bobf/if_frw_c=>sc_modify_create
        is_node        = ls_node
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( mo_cut->mt_change ) ).
    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 10
         change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_true
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 11
         change_mode = /bobf/if_frw_c=>sc_modify_update
         external = abap_true
         failed = abap_false
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         node_key = 1
         key = 12
         change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_prepare_for_export DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_prepare_for_export.

CLASS ltc_prepare_for_export DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS setup.
    METHODS delete_internal FOR TESTING.
    METHODS delete_unnecessary FOR TESTING.
    METHODS merge_succ_create_delete FOR TESTING.
    METHODS merge_c_u_and_d_u FOR TESTING.
ENDCLASS.

CLASS ltc_prepare_for_export IMPLEMENTATION.

  METHOD setup.
    CREATE OBJECT mo_cut.
  ENDMETHOD.

  METHOD delete_internal.
    mo_cut->mt_change = VALUE #(
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_true
        failed = abap_false
        key = 10
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true )
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_false
        failed = abap_false
        key = 11
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true )
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_false
        failed = abap_false
        key = 12
        node_key = 2
        val_processed = abap_true
        det_processed = abap_true )
    ).

    mo_cut->prepare_for_export( ).
    cl_abap_unit_assert=>assert_equals( exp = 1  act = lines( mo_cut->mt_change ) ).
    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
        change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_true
        failed = abap_false
        key = 10
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).


  ENDMETHOD.

  METHOD delete_unnecessary.
    mo_cut->mt_change = VALUE #(
       ( change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_check
         external = abap_false
         failed = abap_false
         key = 11
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify
         external = abap_false
         failed = abap_false
         key = 12
         node_key = 2
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_false
         key = 13
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_update
         external = abap_true
         failed = abap_false
         key = 14
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
     ).

    mo_cut->prepare_for_export( ).
    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( mo_cut->mt_change ) ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
        change_mode = /bobf/if_frw_c=>sc_modify_delete
        external = abap_true
        failed = abap_false
        key = 10
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
        change_mode = /bobf/if_frw_c=>sc_modify_create
        external = abap_true
        failed = abap_false
        key = 13
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
        change_mode = /bobf/if_frw_c=>sc_modify_update
        external = abap_true
        failed = abap_false
        key = 14
        node_key = 1
        val_processed = abap_true
        det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

  ENDMETHOD.

  METHOD merge_succ_create_delete.
    mo_cut->mt_change = VALUE #(
       ( change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
     ).

    mo_cut->prepare_for_export( ).
    cl_abap_unit_assert=>assert_equals( exp = 1 act = lines( mo_cut->mt_change ) ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_true
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).
  ENDMETHOD.

  METHOD merge_c_u_and_d_u.

    mo_cut->mt_change = VALUE #(
       ( change_mode = /bobf/if_frw_c=>sc_modify_update
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         key = 11
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
       ( change_mode = /bobf/if_frw_c=>sc_modify_update
         external = abap_true
         failed = abap_false
         key = 11
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true )
     ).

    mo_cut->prepare_for_export( ).
    cl_abap_unit_assert=>assert_equals( exp = 2 act = lines( mo_cut->mt_change ) ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         change_mode = /bobf/if_frw_c=>sc_modify_create
         external = abap_true
         failed = abap_false
         key = 10
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true
         TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

    READ TABLE mo_cut->mt_change WITH KEY key1 COMPONENTS
         change_mode = /bobf/if_frw_c=>sc_modify_delete
         external = abap_true
         failed = abap_false
         key = 11
         node_key = 1
         val_processed = abap_true
         det_processed = abap_true
        TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 0 ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_clear_external DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_clear_external.

CLASS ltc_clear_external DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS setup.
    METHODS clear_all_external FOR TESTING.
    METHODS clear_given_external FOR TESTING.
ENDCLASS.

CLASS ltc_clear_external IMPLEMENTATION.
  METHOD setup.
    CREATE OBJECT mo_cut.
  ENDMETHOD.

  METHOD clear_all_external.

    mo_cut->mt_change = VALUE #(
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_false
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_delete
          external = abap_true
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_false
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
      ).

    mo_cut->clear_external( ).
    cl_abap_unit_assert=>assert_equals( exp = 4 act = lines( mo_cut->mt_change ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_create
                external = abap_false
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_delete
                external = abap_false
                failed = abap_false
                key = 11
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                key = 11
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

  ENDMETHOD.

  METHOD clear_given_external.

    mo_cut->mt_change = VALUE #(
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_false
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_delete
          external = abap_true
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_false
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
      ).
    mo_cut->clear_external(
        it_change = VALUE #(
                      ( change_mode = /bobf/if_frw_c=>sc_modify_update
                        external = abap_true
                        failed = abap_false
                        key = 10
                        node_key = 1
                        val_processed = abap_true
                        det_processed = abap_true )
                      ( change_mode = /bobf/if_frw_c=>sc_modify_delete
                        external = abap_true
                        failed = abap_false
                        key = 11
                        node_key = 1
                        val_processed = abap_true
                        det_processed = abap_true )
        )
    ).

    cl_abap_unit_assert=>assert_equals( exp = 4 act = lines( mo_cut->mt_change ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_create
                external = abap_false
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_delete
                external = abap_false
                failed = abap_false
                key = 11
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                key = 11
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_condense DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_condense.

CLASS ltc_condense DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS setup.
    METHODS delete_failed FOR TESTING.
    METHODS condense_create_delete FOR TESTING.
    METHODS condense_create_update FOR TESTING.
ENDCLASS.

CLASS ltc_condense IMPLEMENTATION.
  METHOD setup.
    CREATE OBJECT mo_cut.
  ENDMETHOD.

  METHOD delete_failed.
    mo_cut->mt_change = VALUE #(
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_false
          failed = abap_true
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_delete
          external = abap_true
          failed = abap_true
          key = 12
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_false
          failed = abap_false
          key = 13
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
      ).
    mo_cut->/bobf/if_frw_change~condense( ).
    cl_abap_unit_assert=>assert_equals( exp = 2 act = lines( mo_cut->mt_change ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_true
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_false
                failed = abap_false
                key = 13
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).

  ENDMETHOD.

  METHOD condense_create_delete.
    mo_cut->mt_change = VALUE #(
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_false
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_delete
          external = abap_true
          failed = abap_false
          key = 12
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_true
          failed = abap_false
          key = 12
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
      ).
    mo_cut->/bobf/if_frw_change~condense( ).
    cl_abap_unit_assert=>assert_equals( exp = 2 act = lines( mo_cut->mt_change ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_true
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).
    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                  change_mode = /bobf/if_frw_c=>sc_modify_create
                  external = abap_false
                  failed = abap_false
                  key = 11
                  node_key = 1
                  val_processed = abap_true
                  det_processed = abap_true )
      table = mo_cut->mt_change
    ).


  ENDMETHOD.
  METHOD condense_create_update.
    mo_cut->mt_change = VALUE #(
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 10
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_false
          failed = abap_false
          key = 11
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_update
          external = abap_true
          failed = abap_false
          key = 12
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
        ( change_mode = /bobf/if_frw_c=>sc_modify_create
          external = abap_true
          failed = abap_false
          key = 12
          node_key = 1
          val_processed = abap_true
          det_processed = abap_true )
      ).
    mo_cut->/bobf/if_frw_change~condense( ).
    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( mo_cut->mt_change ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_update
                external = abap_true
                failed = abap_false
                key = 10
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
      table = mo_cut->mt_change
    ).
    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                  change_mode = /bobf/if_frw_c=>sc_modify_create
                  external = abap_false
                  failed = abap_false
                  key = 11
                  node_key = 1
                  val_processed = abap_true
                  det_processed = abap_true )
      table = mo_cut->mt_change
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
                change_mode = /bobf/if_frw_c=>sc_modify_create
                external = abap_true
                failed = abap_false
                key = 12
                node_key = 1
                val_processed = abap_true
                det_processed = abap_true )
     table = mo_cut->mt_change
    ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_has_changes DEFINITION DEFERRED.
CLASS /bobf/cl_frw_change DEFINITION LOCAL FRIENDS ltc_has_changes.

CLASS ltc_has_changes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw_change.
    METHODS empty_mt_change FOR TESTING.
    METHODS c_succ FOR TESTING.
    METHODS u_succ FOR TESTING.
    METHODS d_succ FOR TESTING.
    METHODS e FOR TESTING.
    METHODS c_succ_u_succ_d_succ_e FOR TESTING.
    METHODS c_succ_u_fail FOR TESTING.
    METHODS c_fail_u_fail FOR TESTING.
    METHODS assert_true IMPORTING iv_act TYPE any.
    METHODS assert_false IMPORTING iv_act TYPE any.
ENDCLASS.
CLASS ltc_has_changes IMPLEMENTATION.

  METHOD assert_true.
    cl_aunit_assert=>assert_equals( exp = abap_true act = iv_act ).
  ENDMETHOD.

  METHOD assert_false.
    cl_aunit_assert=>assert_equals( exp = abap_false act = iv_act ).
  ENDMETHOD.

  METHOD empty_mt_change.
    mo_cut = NEW /bobf/cl_frw_change( ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD c_succ.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_create ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD u_succ.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_update ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD d_succ.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_delete ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD e.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_lock ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD c_succ_u_succ_d_succ_e.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_create )
                                 ( change_mode = /bobf/if_frw_c=>sc_modify_update )
                                 ( change_mode = /bobf/if_frw_c=>sc_modify_delete )
                                 ( change_mode = /bobf/if_frw_c=>sc_modify_load ) ).
    cl_aunit_assert=>assert_not_initial( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                                              iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    cl_aunit_assert=>assert_initial( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                                              iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    cl_aunit_assert=>assert_not_initial( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                                              iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

  METHOD c_succ_u_fail.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_create )
                                 ( change_mode = /bobf/if_frw_c=>sc_modify_update failed = abap_true ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).

  ENDMETHOD.

  METHOD c_fail_u_fail.
    mo_cut = NEW /bobf/cl_frw_change( ).
    mo_cut->mt_change = VALUE #( ( change_mode = /bobf/if_frw_c=>sc_modify_create failed = abap_true )
                                 ( change_mode = /bobf/if_frw_c=>sc_modify_update failed = abap_true ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_all ) ).
    assert_true( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                      iv_selection   = /bobf/if_frw_c=>sc_change_failed_only ) ).
    assert_false( mo_cut->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify_c_u_d
                                       iv_selection   = /bobf/if_frw_c=>sc_change_succ_only ) ).
  ENDMETHOD.

ENDCLASS.

CLASS ltc_delete_duplicates DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    METHODS unique_content_changes FOR TESTING.
    METHODS nunique_content_changes FOR TESTING.
ENDCLASS.

CLASS ltc_delete_duplicates IMPLEMENTATION.
  METHOD unique_content_changes.
    DATA lo_change TYPE REF TO /bobf/cl_frw_change.
    CREATE OBJECT lo_change
      EXPORTING
        it_content_change = VALUE #(
         ( node_key = '1'
           content_key = '2'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_create )
         ( node_key = '1'
           content_key = '2'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_create )
         ( node_key = '1'
           content_key = '2'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_create ) ).

    lo_change->delete_duplicate_notifications( ).

    lo_change->get(
      IMPORTING
        et_content_change  = DATA(lt_content_change)
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = VALUE /bobf/t_frw_change_content(
          ( node_key = '1'
            content_key = '2'
            key = '3'
            change_mode = /bobf/if_frw_c=>sc_modify_create ) )
      act = lt_content_change ).

  ENDMETHOD.

  METHOD nunique_content_changes.

    DATA lo_change TYPE REF TO /bobf/cl_frw_change.
    CREATE OBJECT lo_change
      EXPORTING
        it_content_change = VALUE #(
         ( node_key = '1'
           content_key = '2'
           key = '4'
           change_mode = /bobf/if_frw_c=>sc_modify_create )
         ( node_key = '1'
           content_key = '2'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_delete )
         ( node_key = '5'
           content_key = '2'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_create )
         ( node_key = '5'
           content_key = '6'
           key = '3'
           change_mode = /bobf/if_frw_c=>sc_modify_create )
        ).

    lo_change->delete_duplicate_notifications( ).

    lo_change->get(
      IMPORTING
        et_content_change  = DATA(lt_content_change)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 4 act = lines( lt_content_change ) ).
    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change_content(
                node_key = '1'
                content_key = '2'
                key = '4'
                change_mode = /bobf/if_frw_c=>sc_modify_create )
      table = lt_content_change ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change_content(
                node_key = '1'
                content_key = '2'
                key = '3'
                change_mode = /bobf/if_frw_c=>sc_modify_delete )
      table = lt_content_change ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change_content(
               node_key = '5'
               content_key = '2'
               key = '3'
               change_mode = /bobf/if_frw_c=>sc_modify_create )
      table = lt_content_change ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change_content(
                node_key = '5'
                content_key = '6'
                key = '3'
                change_mode = /bobf/if_frw_c=>sc_modify_create )
      table = lt_content_change ).

  ENDMETHOD.
ENDCLASS.


CLASS ltc_optimize_mem DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.


  PRIVATE SECTION.

    CONSTANTS:
      co_dummy_node_key    TYPE /bobf/obm_node_key VALUE '123',
      co_dummy_content_key TYPE /bobf/conf_key VALUE '123'.

    CLASS-DATA:
      gt_10_unique_keys TYPE /bobf/t_frw_key.

    CLASS-METHODS:
      class_setup.

    METHODS:
      few_changes RETURNING VALUE(ro_change) TYPE REF TO /bobf/if_frw_change,
      few_notifications RETURNING VALUE(ro_change) TYPE REF TO /bobf/if_frw_change,
      many_changes RETURNING VALUE(ro_change) TYPE REF TO /bobf/if_frw_change,
      many_notifications RETURNING VALUE(ro_change) TYPE REF TO /bobf/if_frw_change,
      assert_duplicate_changes IMPORTING io_change TYPE REF TO /bobf/if_frw_change,
      assert_no_duplicate_changes IMPORTING io_change TYPE REF TO /bobf/if_frw_change,
      assert_duplicate_notifications IMPORTING io_change TYPE REF TO /bobf/if_frw_change,
      assert_no_duplicate_notifictns IMPORTING io_change TYPE REF TO /bobf/if_frw_change.

    METHODS:
      merge_few_to_few_changes FOR TESTING RAISING cx_static_check,
      merge_few_to_few_notifications FOR TESTING RAISING cx_static_check,
      merge_few_to_many_changes FOR TESTING RAISING cx_static_check,
      merge_few_to_many_notificatns FOR TESTING RAISING cx_static_check,
      merge_many_to_few_changes FOR TESTING RAISING cx_static_check,
      merge_many_to_few_notificatns FOR TESTING RAISING cx_static_check,
      merge_many_to_many_changes FOR TESTING RAISING cx_static_check,
      merge_many_to_many_notificatns FOR TESTING RAISING cx_static_check.

ENDCLASS.


CLASS ltc_optimize_mem IMPLEMENTATION.


  METHOD class_setup.

    DO 10 TIMES.
      INSERT VALUE #( key = /bobf/cl_frw_factory=>get_new_transient_key( ) ) INTO TABLE gt_10_unique_keys.
    ENDDO.

  ENDMETHOD.



  METHOD merge_few_to_few_changes.

    DATA(lo_change) = few_changes( ).
    lo_change->merge( few_changes( ) ).

    "merging just a few entries should not trigger the memory optimization:
    assert_duplicate_changes( lo_change ).

  ENDMETHOD.



  METHOD merge_few_to_few_notifications.

    DATA(lo_change) = few_notifications( ).
    lo_change->merge( few_notifications( ) ).

    "merging just a few entries should not trigger the memory optimization:
    assert_duplicate_notifications( lo_change ).

  ENDMETHOD.



  METHOD merge_few_to_many_changes.

    DATA(lo_change) = many_changes( ).
    lo_change->merge( few_changes( ) ).

    "merging just a few to many existing entries should not trigger memory optimization:
    assert_duplicate_changes( lo_change ).

  ENDMETHOD.



  METHOD merge_few_to_many_notificatns.

    DATA(lo_change) = many_notifications( ).
    lo_change->merge( few_notifications( ) ).

    "merging just a few to many existing entries should not trigger memory optimization:
    assert_duplicate_notifications( lo_change ).

  ENDMETHOD.



  METHOD merge_many_to_many_changes.

    DATA(lo_change) = many_changes( ).
    lo_change->merge( many_changes( ) ).

    "merging many new entries to many existing entries should trigger memory optimization:
    assert_no_duplicate_changes( lo_change ).

  ENDMETHOD.



  METHOD merge_many_to_many_notificatns.

    DATA(lo_change) = many_notifications( ).
    lo_change->merge( many_notifications( ) ).

    "merging many new entries to many existing entries should trigger memory optimization:
    assert_no_duplicate_notifictns( lo_change ).

  ENDMETHOD.



  METHOD merge_many_to_few_changes.

    DATA(lo_change) = few_changes( ).
    lo_change->merge( many_changes( ) ).

    "merging many to just a few existing entries should not trigger memory optimization:
    assert_duplicate_changes( lo_change ).

  ENDMETHOD.



  METHOD merge_many_to_few_notificatns.

    DATA(lo_change) = few_notifications( ).
    lo_change->merge( many_notifications( ) ).

    "merging many to just a few existing entries should not trigger memory optimization:
    assert_duplicate_notifications( lo_change ).

  ENDMETHOD.



  METHOD few_changes.

    ro_change = NEW /bobf/cl_frw_change( ).

    ro_change->add_change( iv_change_mode = /bobf/if_frw_c=>sc_modify_update
                           iv_node_key    = co_dummy_node_key
                           it_key         = gt_10_unique_keys ).

  ENDMETHOD.



  METHOD few_notifications.

    ro_change = NEW /bobf/cl_frw_change( ).

    ro_change->add_content_change( iv_change_mode = /bobf/if_frw_c=>sc_modify_association
                                   iv_node_key    = co_dummy_node_key
                                   it_key         = gt_10_unique_keys
                                   iv_content_key = co_dummy_content_key ).

  ENDMETHOD.



  METHOD many_changes.

    ro_change = NEW /bobf/cl_frw_change( ).

    DO 3000 TIMES.
      ro_change->add_change( iv_change_mode = /bobf/if_frw_c=>sc_modify_update
                             iv_node_key    = co_dummy_node_key
                             it_key         = gt_10_unique_keys ).
    ENDDO.

  ENDMETHOD.



  METHOD many_notifications.

    ro_change = NEW /bobf/cl_frw_change( ).

    DO 3000 TIMES.
      ro_change->add_content_change( iv_change_mode = /bobf/if_frw_c=>sc_modify_association
                                     iv_node_key    = co_dummy_node_key
                                     it_key         = gt_10_unique_keys
                                     iv_content_key = co_dummy_content_key ).
    ENDDO.

  ENDMETHOD.



  METHOD assert_duplicate_changes.

    io_change->get( EXPORTING iv_sorted = /bobf/if_frw_c=>sc_change_unsorted
                    IMPORTING et_change = DATA(lt_change) ).
    "there must be more than the 10 unique changes:
    IF lines( lt_change ) <= lines( gt_10_unique_keys ).
      cl_abap_unit_assert=>fail( ).
    ENDIF.

  ENDMETHOD.



  METHOD assert_no_duplicate_changes.

    io_change->get( EXPORTING iv_sorted = /bobf/if_frw_c=>sc_change_unsorted
                    IMPORTING et_change = DATA(lt_change) ).
    "there must be exactly the 10 unique changes:
    cl_abap_unit_assert=>assert_equals( act = lines( lt_change )  exp = lines( gt_10_unique_keys ) ).

  ENDMETHOD.



  METHOD assert_duplicate_notifications.

    io_change->get( EXPORTING iv_sorted = /bobf/if_frw_c=>sc_change_unsorted
                    IMPORTING et_content_change = DATA(lt_content_change) ).
    "there must be more than the 10 unique changes:
    IF lines( lt_content_change ) <= lines( gt_10_unique_keys ).
      cl_abap_unit_assert=>fail( ).
    ENDIF.

  ENDMETHOD.



  METHOD assert_no_duplicate_notifictns.

    io_change->get( EXPORTING iv_sorted = /bobf/if_frw_c=>sc_change_unsorted
                    IMPORTING et_content_change = DATA(lt_content_change) ).
    "there must be exactly the 10 unique changes:
    cl_abap_unit_assert=>assert_equals( act = lines( lt_content_change )  exp = lines( gt_10_unique_keys ) ).

  ENDMETHOD.


ENDCLASS.
