class /BOBF/CL_FRW_FACTORY definition
  public
  create public

  global friends /BOBF/CL_CONF_READONLY
                 /BOBF/CL_TOOL_AUNIT_FRW
                 /BOBF/CL_TOOL_TEST_BO_HELPER
                 /BOBF/CL_TOOL_TRACE .

public section.

  types:
    tt_bo_name TYPE STANDARD TABLE OF /bobf/obm_name .

    "! Return an instance of the Framework
    "! <br/> Does <em>not</em> raise an exception for an unknown BO Key.
    "! @parameter eo_instance | Will be returned as NOT BOUND when IV_BO_KEY contains an unknown key
  class-methods GET_BOPF
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
      !IS_CONTEXT type /BOBF/S_FRW_CONTEXT optional
    returning
      value(EO_INSTANCE) type ref to /BOBF/IF_FRW_SERVICE_LAYER
    raising
      /BOBF/CX_FRW .
  class-methods GET_AUTHORITY_HANDLER
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
    returning
      value(RO_AUTHORITY_HANDLER) type ref to /BOBF/CL_FRW_AUTHORITY_HANDLER
    raising
      /BOBF/CX_FRW .
  class-methods GET_BO_NAME
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
    returning
      value(EV_BO_NAME) type /BOBF/OBM_NAME .
  class-methods GET_CHANGE
    importing
      !IV_EXTERNAL type BOOLE_D default ABAP_TRUE
    returning
      value(EO_CHANGE) type ref to /BOBF/IF_FRW_CHANGE .
    "! Return an instance of the configuration
    "! <br/> Does <em>not</em> raise an exception for an unknown BO Key.
    "! @parameter eo_instance | Will be returned as NOT BOUND when IV_BO_KEY contains an unknown key
  class-methods GET_CONFIGURATION
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
    returning
      value(EO_INSTANCE) type ref to /BOBF/IF_FRW_CONFIGURATION
    raising
      /BOBF/CX_FRW .
  class-methods GET_MAIN_BUFFER
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
    returning
      value(EO_INSTANCE) type ref to /BOBF/IF_FRW_BUFFER
    raising
      /BOBF/CX_FRW .
  class-methods GET_MESSAGE
    returning
      value(EO_MESSAGE) type ref to /BOBF/IF_FRW_MESSAGE .
  class-methods GET_NEW_KEY
    returning
      value(EV_KEY) type /BOBF/CONF_KEY .
  class-methods GET_NEW_TRANSIENT_KEY
    returning
      value(EV_KEY) type /BOBF/CONF_KEY .
  class-methods GET_PROPERTY
    returning
      value(EO_PROPERTY) type ref to /BOBF/IF_FRW_PROPERTY .
  class-methods QUERY_BO
    importing
      !IV_BO_NAME type /BOBF/OBM_NAME optional
      !IV_PROXY_BO_NAME type /BOBF/OBM_NAME optional
      !IV_TEST type BOOLE_D default ABAP_FALSE
    returning
      value(EV_BO_KEY) type /BOBF/OBM_BO_KEY .
  class-methods QUERY_EXTENSION_BO
    importing
      !IV_EXTENSION_BO_NAME type /BOBF/OBM_NAME
    returning
      value(EV_EXTENSION_BO_KEY) type /BOBF/OBM_BO_KEY .
  class-methods QUERY_EXTENSION_BOS
    importing
      !IV_CORE_BO_NAME type /BOBF/OBM_NAME
    exporting
      !ET_EXTENSION_BO_NAME type /BOBF/T_FRW_NAME .
  class-methods QUERY_BOS
    exporting
      !ET_BO_KEY type /BOBF/T_FRW_KEY .
  class-methods QUERY_BO_BY_GENIL_COMPONENT
    importing
      !IV_GENIL_COMPONENT type /BOBF/CONF_GENIL_COMP_NAME
    exporting
      !ET_BO_KEY type /BOBF/T_FRW_KEY .
  class-methods QUERY_INHERITING_BO
    importing
      !IV_SUPER_BO_KEY type /BOBF/OBM_BO_KEY
      !IV_ONLY_INSTANTIABLE type BOOLE_D optional
    returning
      value(ET_BO_KEY) type /BOBF/T_FRW_KEY .
  class-methods QUERY_PARENT_BO
    importing
      !IV_CHILD_BO_KEY type /BOBF/OBM_BO_KEY
    returning
      value(EV_PARENT_BO_KEY) type /BOBF/OBM_BO_KEY .
  PROTECTED SECTION.

    CLASS-DATA gt_factory TYPE /bobf/t_frw_factory .

    "! Read factory for given BO_KEY from buffer (GT_FACTORY) or from DB. Fills buffer.
    "! If there is no entry for the BO_KEY on DB, ES_FACTORY is initial and buffer is not changed.
    CLASS-METHODS get_factory
      IMPORTING
        !iv_bo_key  TYPE /bobf/obm_bo_key
      EXPORTING
        !es_factory TYPE /bobf/s_frw_factory .
    CLASS-METHODS create_configuration
      IMPORTING
        !iv_bo_key   TYPE /bobf/obm_bo_key
        !iv_bo_name  TYPE /bobf/obm_name OPTIONAL
        !is_context  TYPE /bobf/s_frw_context OPTIONAL
        !iv_clone    TYPE boole_d OPTIONAL
      EXPORTING
        !eo_instance TYPE REF TO /bobf/if_frw_configuration
      RAISING
        /bobf/cx_frw .
    CLASS-METHODS get_shared_conf
      IMPORTING
        !iv_bo_key        TYPE /bobf/obm_bo_key
        !iv_bo_name       TYPE /bobf/obm_name
      RETURNING
        VALUE(eo_conf_sh) TYPE REF TO /bobf/cl_conf_readonly
      RAISING
        /bobf/cx_frw .
    "! Creates a configuration instance for the given factory. Updates GT_FACTORY.
    CLASS-METHODS create_config_for_factory
      IMPORTING is_context           TYPE /bobf/s_frw_context OPTIONAL
                iv_conf_addon_active TYPE boole_d
      CHANGING  cs_factory           TYPE /bobf/s_frw_factory
      RAISING   /bobf/cx_frw.
    "! Creates a BOPF instance for the given factory. Updates GT_FACTORY.
    "! <br/><strong>Precondition:</strong> cs_factory-conf must be bound (use CREATE_CONFIG_FOR_FACTORY)
    CLASS-METHODS create_bopf_for_factory
      IMPORTING iv_bopf_addon_active TYPE boole_d
      CHANGING  cs_factory           TYPE /bobf/s_frw_factory
      RAISING   /bobf/cx_frw.

private section.

  types:
    BEGIN OF ty_do_reference,
        name       TYPE /bobf/obm_name,
        bo_key     TYPE /bobf/obm_bo_key,
        ref_bo_key TYPE /bobf/obm_bo_key,
      END OF ty_do_reference .
  types:
    BEGIN OF ty_bo,
        bo_name      TYPE /bobf/obm_name,
        extension    TYPE boole_d,
        bo_key       TYPE /bobf/obm_bo_key,
        super_bo_key TYPE /bobf/obm_bo_key,
        objcat       TYPE /bobf/obm_objcat,
      END OF ty_bo .
  types:
    BEGIN OF ty_obj,
        bo_key   TYPE /bobf/obm_bo_key,
        version  TYPE /bobf/conf_version,
        abstract TYPE /bobf/obm_abstract,
      END OF ty_obj .
  types:
    tt_bo TYPE STANDARD TABLE OF ty_bo .
  types:
    tt_do_reference TYPE STANDARD TABLE OF ty_do_reference .
  types:
    tt_obj TYPE STANDARD TABLE OF ty_obj WITH NON-UNIQUE KEY primary_key COMPONENTS bo_key abstract .

  class-data GV_SHARED_OBJECT_UNEXCEPTIONAL type BOOLE_D value ABAP_FALSE ##NO_TEXT.
  class-data GV_SHARED_OBJECT_RESTRICT type BOOLE_D value ABAP_FALSE ##NO_TEXT.
  class-data GV_SHARED_OBJECT_DISABLE type BOOLE_D value ABAP_FALSE ##NO_TEXT.
  class-data GT_BOPF_ADDON_ACTIVE type /BOBF/T_FRW_KEY2 .
  class-data GV_TRANSIENT_KEY type /BOBF/CONF_KEY .
  class-data GT_DO_REFERENCE type TT_DO_REFERENCE .
  class-data GT_BO type TT_BO .
  class-data GT_OBJ type TT_OBJ .

  class-methods COLLECT_CONNECTED_BOS
    importing
      !IV_BO_KEY type /BOBF/OBM_BO_KEY
    exporting
      !ET_BO type TT_BO_NAME .
  class-methods SHARED_OBJECT_DISABLE
    returning
      value(EV_RETURNING) type BOOLE_D .
  class-methods SHARED_OBJECT_RESTRICT
    returning
      value(EV_RETURNING) type BOOLE_D .
  class-methods SHARED_OBJECT_UNEXCEPTIONAL
    returning
      value(EV_RETURNING) type BOOLE_D .
ENDCLASS.



CLASS /BOBF/CL_FRW_FACTORY IMPLEMENTATION.


  METHOD collect_connected_bos.

    DATA:
      ls_do_reference   TYPE ty_do_reference,
      lv_do_sub_bo_name TYPE /bobf/obm_name,
      lv_super_name     TYPE /bobf/obm_name,
      ls_super_bo       TYPE ty_bo,
      ls_obj            TYPE ty_obj,
      ls_bo             TYPE ty_bo,
      lt_do             TYPE tt_bo_name,
      lt_bo             TYPE tt_bo_name.

    CLEAR:
      et_bo.

    " fill caches (for the first time)
    IF gt_do_reference IS INITIAL.
      SELECT name bo_key ref_bo_key FROM /bobf/obm_node INTO TABLE gt_do_reference WHERE node_type = /bobf/if_conf_c=>sc_node_type_do. "#EC CI_NOFIELD
    ENDIF.
    IF gt_bo IS INITIAL.
      SELECT bo_name extension bo_key super_bo_key objcat FROM /bobf/obm_bo INTO TABLE gt_bo WHERE bo_deleted = abap_false.
    ENDIF.
    IF gt_obj IS INITIAL.
      SELECT bo_key version abstract FROM /bobf/obm_obj INTO TABLE gt_obj. "#EC CI_NOWHERE
    ENDIF.

    " 1. is there a super BO (inheritance)?
    READ TABLE gt_bo WITH KEY bo_key = iv_bo_key INTO ls_bo.
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.
    READ TABLE gt_bo WITH KEY bo_key = ls_bo-super_bo_key INTO ls_super_bo.
    IF sy-subrc = 0.
      IF ls_bo-extension = abap_false.
        " go up
        collect_connected_bos(
          EXPORTING iv_bo_key = ls_super_bo-bo_key
          IMPORTING et_bo     = lt_bo ).
        LOOP AT lt_bo INTO lv_super_name.
          READ TABLE et_bo WITH KEY table_line = lv_super_name TRANSPORTING NO FIELDS.
          IF sy-subrc NE 0.
            " only add DOs
            APPEND lv_super_name TO et_bo.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    " 2. is there one or more super BO (extension)?
    LOOP AT gt_bo INTO ls_super_bo WHERE super_bo_key = iv_bo_key AND extension = abap_true.
      " go up
      collect_connected_bos(
        EXPORTING iv_bo_key = ls_super_bo-bo_key
        IMPORTING et_bo     = lt_bo ).
      LOOP AT lt_do INTO lv_super_name.
        READ TABLE et_bo WITH KEY table_line = lv_super_name TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          " only add DOs
          APPEND lv_super_name TO et_bo.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " 3. are there some DOs? -> Go down and take the result
    " loop over all dependent nodes of the requested BO
    LOOP AT gt_do_reference INTO ls_do_reference WHERE bo_key = iv_bo_key.
      " go down
      collect_connected_bos(
        EXPORTING iv_bo_key = ls_do_reference-ref_bo_key
        IMPORTING et_bo     = lt_do ).
      LOOP AT lt_do INTO lv_do_sub_bo_name.
        READ TABLE et_bo WITH KEY table_line = lv_do_sub_bo_name TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          " only add DOs
          APPEND lv_do_sub_bo_name TO et_bo.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    " 4. super BO and DOs processed -> Now it's your turn, add yourself and end recursion
    READ TABLE gt_bo WITH KEY bo_key = iv_bo_key INTO ls_bo.
    IF ls_bo-objcat = /bobf/if_conf_c=>sc_objcat_do.
      " only add DOs (and only those who are not abstract) - otherwise no shared object instance possible
      READ TABLE gt_obj WITH KEY primary_key COMPONENTS bo_key = ls_bo-bo_key version = /bobf/if_conf_c=>sc_version_active INTO ls_obj.
      IF sy-subrc = 0 AND ls_obj-abstract = abap_false.
        APPEND ls_bo-bo_name TO et_bo.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD create_bopf_for_factory.
    CREATE OBJECT cs_factory-bopf TYPE /bobf/cl_frw
      EXPORTING
        io_conf = cs_factory-conf.
    IF iv_bopf_addon_active = abap_true.
      APPEND cs_factory-key TO gt_bopf_addon_active.
      /bobf/cl_frw_addon=>adjust_bopf( EXPORTING iv_bo_key = cs_factory-key
                                       CHANGING  co_bopf   = cs_factory-bopf ).
    ENDIF.
    "write back newly created ls_factory-bopf:
    MODIFY TABLE gt_factory FROM cs_factory.
  ENDMETHOD.


  METHOD create_configuration.

    DATA: lo_conf_sh TYPE REF TO /bobf/cl_conf_readonly,
          lo_conf    TYPE REF TO /bobf/cl_conf_readonly,
          lo_confrt  TYPE REF TO /bobf/cl_confrt_complete.

    CLEAR eo_instance.

* create new configuration object
    BREAK-POINT ID /bobf/conf_sh.
    IF iv_bo_name IS INITIAL.
      lo_conf_sh = get_shared_conf(
        iv_bo_key  = iv_bo_key
        iv_bo_name = get_bo_name( iv_bo_key ) ) .
    ELSE.
      lo_conf_sh = get_shared_conf(
        iv_bo_key  = iv_bo_key
        iv_bo_name = iv_bo_name ).
    ENDIF.
    ASSERT ID /bobf/frw CONDITION lo_conf_sh IS BOUND.

    IF lo_conf_sh IS BOUND.

      IF iv_clone = abap_false AND
         is_context-inactive_groups IS INITIAL.
*     no clone, runtime direct against shared
        CREATE OBJECT lo_confrt
          EXPORTING
            iv_bo_key = iv_bo_key.

        lo_confrt->initialize_data(
          io_instance = lo_conf_sh
          is_context  = is_context ).

      ELSE.
*     clone shared object
        CREATE OBJECT lo_conf
          EXPORTING
            iv_bo_key = iv_bo_key.

        lo_conf->initialize_from_shared(
          io_shared_instance = lo_conf_sh
          is_context         = is_context ).

*     runtime against clone
        CREATE OBJECT lo_confrt
          EXPORTING
            iv_bo_key = iv_bo_key.

        lo_confrt->initialize_data(
          io_instance = lo_conf
          is_context  = is_context
          iv_cloned   = abap_true ).

      ENDIF.

      eo_instance ?= lo_confrt.

    ENDIF.

  ENDMETHOD.


  METHOD create_config_for_factory.
    DATA lo_confrt    TYPE REF TO /bobf/cl_confrt_complete.
    DATA lo_confrt_if TYPE REF TO /bobf/if_confrt_complete.

    BREAK-POINT ID /bobf/conf_sh.
    "if addons manipulate configuration -> clone configuration
    create_configuration( EXPORTING iv_bo_key   = cs_factory-key
                                    iv_bo_name  = cs_factory-bo_name
                                    is_context  = is_context
                                    iv_clone    = iv_conf_addon_active
                          IMPORTING eo_instance = cs_factory-conf ).
    MODIFY TABLE gt_factory FROM cs_factory.

    IF iv_conf_addon_active = abap_true.
      " let addons manipulate cloned configuration
      lo_confrt   ?= cs_factory-conf.
      lo_confrt_if = lo_confrt->mo_conf_sh.
      /bobf/cl_frw_addon=>adjust_conf( iv_bo_key = cs_factory-key
                                       io_conf   = lo_confrt_if ).
      "update runtime configuration after clone manipulation
      lo_confrt->update_data( is_context ).
    ENDIF.
  ENDMETHOD.


  METHOD get_authority_handler.

    DATA lo_auth_handler_inst TYPE REF TO /bobf/if_frw_auth_handler_inst.

    " dumps in case of tool trace addon...
    " ro_authority_handler = CAST /bobf/cl_frw( get_bopf( iv_bo_key ) )->mo_authority_handler.

    DATA(lo_frw_service_layer) = get_bopf( iv_bo_key ).
    TRY.
        lo_auth_handler_inst ?= lo_frw_service_layer.
      CATCH cx_sy_move_cast_error.
        " seems to be tool trace addon...
        TRY.
            DATA(lo_tool_trace) = CAST /bobf/cl_tool_trace( lo_frw_service_layer ).
            lo_auth_handler_inst ?= lo_tool_trace->mo_bopf.
          CATCH cx_sy_move_cast_error.
            " ignore...
        ENDTRY.
    ENDTRY.

    IF lo_auth_handler_inst IS BOUND.
      ro_authority_handler = lo_auth_handler_inst->mo_authority_handler.
    ENDIF.

  ENDMETHOD.


  METHOD get_bopf.
    DATA lv_conf_addon_active TYPE boole_d.
    DATA lv_bopf_addon_active TYPE boole_d.
    DATA ls_factory           TYPE /bobf/s_frw_factory.

    get_factory( EXPORTING iv_bo_key  = iv_bo_key
                 IMPORTING es_factory = ls_factory ).
    IF ls_factory IS INITIAL.
      RETURN. "unknown business object
    ENDIF.
    IF ls_factory-bopf IS NOT BOUND.
      /bobf/cl_frw_addon=>addon_active( EXPORTING iv_bo_key = iv_bo_key
                                        IMPORTING ev_conf   = lv_conf_addon_active
                                                  ev_bopf   = lv_bopf_addon_active ).
      "create configuration instance
      IF ls_factory-conf IS NOT BOUND.
        "ls_factory-conf IS BOUND is a precondition for creating the BOPF instance
        create_config_for_factory( EXPORTING is_context           = is_context
                                             iv_conf_addon_active = lv_conf_addon_active
                                   CHANGING  cs_factory           = ls_factory ).
      ENDIF.
      create_bopf_for_factory( EXPORTING iv_bopf_addon_active = lv_bopf_addon_active
                               CHANGING  cs_factory           = ls_factory ).
    ENDIF.
    eo_instance = ls_factory-bopf.
  ENDMETHOD.


  METHOD get_bo_name.
    get_factory( EXPORTING iv_bo_key = iv_bo_key
                 IMPORTING es_factory = DATA(ls_factory) ).
    ev_bo_name = ls_factory-bo_name. "may be initial
  ENDMETHOD.


  METHOD get_change.

    CREATE OBJECT eo_change TYPE /bobf/cl_frw_change EXPORTING iv_external = iv_external.

  ENDMETHOD.


  METHOD get_configuration.
    DATA lv_conf_addon_active TYPE boole_d.
    DATA ls_factory           TYPE /bobf/s_frw_factory.

    get_factory( EXPORTING iv_bo_key  = iv_bo_key
                 IMPORTING es_factory = ls_factory ).

    IF ls_factory-conf IS NOT BOUND.
      IF ls_factory-key IS INITIAL.
        RETURN. "unknown business object
      ENDIF.
      /bobf/cl_frw_addon=>addon_active( EXPORTING iv_bo_key = ls_factory-key
                                        IMPORTING ev_conf   = lv_conf_addon_active ).
      create_config_for_factory( EXPORTING iv_conf_addon_active = lv_conf_addon_active
                                 CHANGING  cs_factory           = ls_factory ).
    ENDIF.
    eo_instance = ls_factory-conf.
  ENDMETHOD.


  METHOD get_factory.
    "check existence of BO KEY in configuration (buffer):
    READ TABLE gt_factory INTO es_factory WITH KEY key = iv_bo_key.
    IF sy-subrc <> 0.
      "check existence of BO KEY in configuration (DB):
      SELECT SINGLE bo_key bo_name bo_esr_name bo_generated
        FROM /bobf/obm_bo
        INTO (es_factory-key, es_factory-bo_name, es_factory-bo_proxy_name, es_factory-test)
        WHERE bo_key     = iv_bo_key
        AND   extension  = abap_false
        AND   bo_deleted = abap_false.                      "#EC WARNOK
      IF sy-subrc = 0.
        INSERT es_factory INTO TABLE gt_factory.
      ELSE.
        CLEAR es_factory.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_main_buffer.

    DATA:
      lo_bopf_if TYPE REF TO /bobf/if_frw_service_layer,
      lo_bopf    TYPE REF TO /bobf/cl_frw,
      lo_addon   TYPE REF TO /bobf/if_frw_addon.

    CLEAR eo_instance.

    lo_bopf_if = get_bopf( iv_bo_key = iv_bo_key ).

    IF gt_bopf_addon_active IS INITIAL.
      lo_bopf ?= lo_bopf_if.
    ELSE.
      READ TABLE gt_bopf_addon_active
        WITH KEY key_sort COMPONENTS table_line = iv_bo_key
        TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        lo_bopf ?= lo_bopf_if.
      ELSE.
        lo_addon ?= lo_bopf_if.
        lo_bopf = lo_addon->get_bopf( ).
      ENDIF.
    ENDIF.

    CHECK lo_bopf IS BOUND.

    eo_instance = lo_bopf->mo_buffer.

  ENDMETHOD.


  METHOD get_message.

    DATA lv_message_addon_active TYPE boole_d.

    " TODO: cache addon activation once per session
    " check if an addon replacing the message object is active

    " create a new message object
    IF /bobf/cl_frw_message_factory=>use_durable_message( ) = abap_true.
      eo_message = /bobf/cl_frw_message_factory=>create_container( ).
    ELSE.
      eo_message = new /bobf/cl_frw_message( ).
    ENDIF.

    " addon replacement
    IF /bobf/cl_frw_message_factory=>use_durable_message( ) = abap_false.
      /bobf/cl_frw_addon=>addon_active( IMPORTING ev_message = lv_message_addon_active ).
      IF lv_message_addon_active = abap_true.
        /bobf/cl_frw_addon=>adjust_message( CHANGING co_message = eo_message ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_new_key.
    TRY.
        ev_key = cl_system_uuid=>create_uuid_x16_static( ).
      CATCH cx_uuid_error.
        ASSERT ID /bobf/frw_fatal CONDITION 1 = 0.
    ENDTRY.
  ENDMETHOD.


  METHOD get_new_transient_key.

    ADD 1 TO gv_transient_key.
    ev_key = gv_transient_key.

  ENDMETHOD.


  METHOD get_property.

    CREATE OBJECT eo_property TYPE /bobf/cl_frw_property.

  ENDMETHOD.


  METHOD get_shared_conf.

    DATA: lo_handle                TYPE REF TO /bobf/cl_conf_shared,
          lo_except                TYPE REF TO cx_root,
          lo_inconst               TYPE REF TO cx_shm_inconsistent,
          lv_timestamp             TYPE        timestamp,
          lv_start_time            TYPE        i,
          lv_current_time          TYPE        i,
          lv_end_time              TYPE        i,
          lv_time                  TYPE        t,
          lv_bo_to_build           TYPE        /bobf/obm_name,
          lt_bo_to_build           TYPE        tt_bo_name,
          lv_shared_object_disable TYPE        boole_d VALUE abap_false,
          lt_shared_instance       TYPE        shm_inst_infos,
          ls_shared_instance       TYPE        shm_inst_info,
          lv_text_id               TYPE        sotr_conc,
          lv_inst_name             TYPE        shm_inst_name,
          lv_build_local           TYPE        boole_d,
          lv_consistent            TYPE        boole_d,
          lv_need_to_collect       TYPE        boole_d VALUE abap_false.

    BREAK-POINT ID /bobf/conf_sh.

    CLEAR:
      eo_conf_sh,
      lo_handle.


    lv_inst_name = iv_bo_name.
    lt_shared_instance = /bobf/cl_conf_shared=>get_instance_infos( inst_name = lv_inst_name ).

    IF lt_shared_instance IS INITIAL.
      lv_need_to_collect = abap_true.
    ELSE.
      TRY.
          lo_handle = /bobf/cl_conf_shared=>attach_for_read( lv_inst_name ).

          eo_conf_sh = lo_handle->root.
          " Check consistency of SHM object
          lv_consistent =  eo_conf_sh->check_consistency( ).
          IF lv_consistent = abap_false.
            lo_handle->invalidate_instance(
             EXPORTING
                inst_name              = lv_inst_name
                terminate_changer      = abap_false
                affect_server          = cl_shm_area=>affect_local_server
            ).
            CLEAR lo_handle.
            lv_need_to_collect = abap_true.
            lv_build_local = abap_true."force local build to avoid read lock errors
          ELSE.
            lt_bo_to_build = eo_conf_sh->mt_collected_bos.
            TRY.
                lo_handle->detach( ).
              CATCH cx_shm_wrong_handle ##no_handler.
              CATCH cx_shm_already_detached ##no_handler.
            ENDTRY.

          ENDIF.
        CATCH cx_shm_read_lock_active cx_shm_exclusive_lock_active cx_shm_no_active_version cx_shm_change_lock_active cx_shm_inconsistent INTO lo_except.
          lv_need_to_collect = abap_true.
      ENDTRY.
    ENDIF.

    IF lv_need_to_collect = abap_true.
      " get unique list of all bos which are subobjects of the requested bo or one of its super BOs
      " (those must exist as shared object instance before the shared object of the requested one is built)
      collect_connected_bos( EXPORTING iv_bo_key  = iv_bo_key
                             IMPORTING et_bo      = lt_bo_to_build  ).
    ENDIF.


    READ TABLE lt_bo_to_build WITH KEY table_line = iv_bo_name TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      APPEND iv_bo_name TO lt_bo_to_build.
    ENDIF.

    " BOs already having a shared object configuration must not be additionally attached
    " of course the requested BO must be always attached for read
    LOOP AT lt_bo_to_build INTO lv_bo_to_build.
      IF lv_bo_to_build NE iv_bo_name.

        CLEAR lt_shared_instance.
        lv_inst_name = lv_bo_to_build.
        lt_shared_instance = /bobf/cl_conf_shared=>get_instance_infos( inst_name = lv_inst_name ).
        READ TABLE lt_shared_instance WITH KEY name = lv_bo_to_build INTO ls_shared_instance.
        IF sy-subrc = 0.
          DELETE lt_bo_to_build.
          IF ls_shared_instance-versions_obsolete > 0 OR ls_shared_instance-versions_in_build > 0.
            lv_build_local = abap_true.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    " Build object in the local session if one of the referenced objects has a obsolte instance in SHM
    IF lv_build_local = abap_true.
      CREATE OBJECT eo_conf_sh
        EXPORTING
          iv_bo_key = iv_bo_key.
      eo_conf_sh->initialize_from_db( ).
      RETURN.
    ENDIF.

    " switch: deactivate shared object completely?
    gv_shared_object_disable = abap_false.
    ASSERT ID /bobf/conf_sh_disable CONDITION shared_object_disable( ) = abap_true.
    lv_shared_object_disable = gv_shared_object_disable.

    "before actually building the load in the shared memory, check whether BO can be built at all
    "(this requires select from DB, thus doing it at this late point in time)
    DATA(lx_exception) = /bobf/cl_conf_readonly=>is_loadable_bo( iv_bo_key = iv_bo_key ).
    IF lx_exception IS BOUND.
      RAISE EXCEPTION lx_exception.
    ENDIF.

    " loop over all sub BOs and the requested BO in order to attach/create the corresponding shared objects
    LOOP AT lt_bo_to_build INTO lv_bo_to_build.
      lv_inst_name = lv_bo_to_build.
      CLEAR lo_handle.
      GET TIME STAMP FIELD lv_timestamp.
      CONVERT TIME STAMP lv_timestamp TIME ZONE sy-zonlo INTO TIME lv_time.
      lv_start_time = lv_time+4(2).
      lv_end_time   = ( lv_start_time + 5 ) MOD 60.

      " get shared reference
      WHILE lo_handle IS NOT BOUND AND lv_shared_object_disable = abap_false.
        TRY.
            lo_handle = /bobf/cl_conf_shared=>attach_for_read( lv_inst_name ).

          CATCH cx_shm_inconsistent INTO lo_inconst.
            " the class cl_conf_readonly has changed but an instance with a different status is still hold in Shared Memory
            BREAK-POINT ID /bobf/conf_sh.
            IF lo_inconst->shm_timestamp < lo_inconst->load_timestamp.
              " => the shared instance is older than the current.
              TRY.
                  " Invalidate that shared instance
                  /bobf/cl_conf_shared=>propagate_instance(
                    EXPORTING
                      inst_name              = lv_inst_name
                      affecting_local_server = abap_true  ).
                CATCH cx_shm_parameter_error .
                  ASSERT ID /bobf/conf_sh CONDITION 0 = 1.
              ENDTRY.
              " For this time use the normal instance. After the next DB commit, the instances will be invalidated.
              EXIT.

            ELSE. " SHM_TIMESTAMP > LOAD_TIMESTAMP
              " => the shared instance is newer than the current instance
              IF lo_inconst->element IS NOT INITIAL.
                TRY.
                    " Invalidate that shared instance
                    /bobf/cl_conf_shared=>propagate_instance(
                      EXPORTING
                        inst_name              = lv_inst_name
                        affecting_local_server = abap_true  ).
                  CATCH cx_shm_parameter_error .
                    ASSERT ID /bobf/conf_sh CONDITION 0 = 1.
                ENDTRY.
                RAISE EXCEPTION TYPE /bobf/cx_frw_core
                  EXPORTING
                    textid     = /bobf/cx_frw_core=>sc_shm_inconsistent_element
                    previous   = lo_inconst
                    mv_element = lo_inconst->element.
              ELSE.
                " Configuration error: Load Program Lost. Please restart the Transaktion.
                RAISE EXCEPTION TYPE /bobf/cx_frw_core
                  EXPORTING
                    textid   = /bobf/cx_frw_core=>sc_shm_load_error
                    previous = lo_inconst.
              ENDIF.
            ENDIF.

          CATCH cx_shm_no_active_version INTO lo_except.
            lv_text_id = lo_except->textid.

            " WAIT UP TO x SECONDS command must not be used
            " (because this method is also used out of some conversion_exits and thus no commit is allowed)
            GET TIME STAMP FIELD lv_timestamp.
            CONVERT TIME STAMP lv_timestamp TIME ZONE sy-zonlo INTO TIME lv_time.
            lv_current_time = lv_time+4(2).

            IF lv_start_time < lv_end_time AND lv_current_time >= lv_end_time.
              EXIT.
            ENDIF.
            IF lv_start_time > lv_end_time AND lv_current_time >= lv_end_time AND lv_current_time < lv_start_time.
              EXIT.
            ENDIF.

          CATCH cx_shm_attach_error INTO lo_except.
            " in this internal mode there exists already a read lock, which should have been found in st_factory !!!
            ASSERT ID /bobf/conf_sh CONDITION 0 = 1.
            ASSERT ID /bobf/frw     CONDITION 0 = 1.
            RAISE EXCEPTION TYPE /bobf/cx_frw_core
              EXPORTING
                previous = lo_except.
        ENDTRY.
      ENDWHILE.

      " check if attaching (and building) was successful
      IF lo_handle IS NOT BOUND.
*      " Write log entry
*      CLEAR lv_log_info.
*      lv_log_info = 'Failed to build conf object from SHM. Start building in local session.'
*                    && 'Main BO: ' && iv_bo_key && ' referenced BO: ' && lv_bo_to_build.
*      IF lo_except IS BOUND.
*        lv_log_info = lv_log_info && ' Exception: ' && lo_except->get_text( ).
*      ENDIF.
*      /bobf/cl_conf_toolbox=>write_log(
*          iv_severity = 'E'
*          iv_info     = lv_log_info
*      ).
        " create session instance if shared instance access fails
        CREATE OBJECT eo_conf_sh
          EXPORTING
            iv_bo_key = iv_bo_key.
        eo_conf_sh->initialize_from_db( ).
        RETURN.
      ENDIF.

      " return the handle of the requested BO
      IF lo_handle IS BOUND AND lv_inst_name = iv_bo_name.
        eo_conf_sh = lo_handle->root.
        " Check consistency of SHM object
        eo_conf_sh->check_consistency( ).
        RETURN.
      ENDIF.

      IF lo_handle IS BOUND AND lv_inst_name NE iv_bo_name.
        " detach read lock from sub DOs
        TRY.
            lo_handle->detach( ).
          CATCH cx_shm_wrong_handle ##no_handler.
          CATCH cx_shm_already_detached ##no_handler.
        ENDTRY.
      ENDIF.
    ENDLOOP.


  ENDMETHOD.


  METHOD query_bo.

    DATA:
      ls_factory TYPE /bobf/s_frw_factory.

    CLEAR ev_bo_key.

* query in internal buffer
    IF iv_proxy_bo_name IS NOT INITIAL.
      READ TABLE gt_factory INTO ls_factory WITH KEY proxy_name
        COMPONENTS bo_proxy_name = iv_proxy_bo_name
                   test          = iv_test.
    ELSEIF iv_bo_name IS NOT INITIAL.
      READ TABLE gt_factory INTO ls_factory WITH KEY internal_name
        COMPONENTS bo_name = iv_bo_name.
    ELSE.
      RETURN.
    ENDIF.
    IF sy-subrc = 0.
      ev_bo_key = ls_factory-key.
      RETURN.
    ENDIF.

* query on database
    IF iv_proxy_bo_name IS NOT INITIAL.
      ls_factory-bo_proxy_name = iv_proxy_bo_name.
      SELECT SINGLE bo_key bo_name bo_generated
        FROM /bobf/obm_bo
        INTO (ls_factory-key, ls_factory-bo_name, ls_factory-test)
        WHERE bo_esr_name  = iv_proxy_bo_name
        AND   extension    = abap_false
        AND   bo_deleted   = abap_false
        AND   bo_generated = iv_test.                       "#EC WARNOK

*   only prototype available -> take it always
      IF sy-subrc <> 0 AND iv_test = abap_false.
        READ TABLE gt_factory INTO ls_factory WITH KEY proxy_name
          COMPONENTS bo_proxy_name = iv_proxy_bo_name
                     test          = abap_true.
        IF sy-subrc = 0.
          ev_bo_key = ls_factory-key.
          RETURN.
        ENDIF.

        SELECT SINGLE bo_key bo_name bo_generated
          FROM /bobf/obm_bo
          INTO (ls_factory-key, ls_factory-bo_name, ls_factory-test)
          WHERE bo_esr_name  = iv_proxy_bo_name
          AND   extension    = abap_false
          AND   bo_deleted   = abap_false
          AND   bo_generated = abap_true.                   "#EC WARNOK
      ENDIF.
    ELSEIF iv_bo_name IS NOT INITIAL.
      ls_factory-bo_name = iv_bo_name.
      SELECT SINGLE bo_key bo_esr_name bo_generated
        FROM /bobf/obm_bo
        INTO (ls_factory-key, ls_factory-bo_proxy_name, ls_factory-test)
        WHERE bo_name    = iv_bo_name
        AND   extension  = abap_false
        AND   bo_deleted = abap_false.
    ENDIF.
    IF sy-subrc = 0.
      ev_bo_key = ls_factory-key.
*   add business object to factory table
      INSERT ls_factory INTO TABLE gt_factory.
    ENDIF.

  ENDMETHOD.


  METHOD query_bos.

    SELECT bo_key
      FROM /bobf/obm_bo
      INTO TABLE et_bo_key
      WHERE extension    = abap_false
      AND   bo_deleted   = abap_false.

  ENDMETHOD.


  METHOD query_bo_by_genil_component.

    CLEAR et_bo_key.
    CHECK iv_genil_component IS NOT INITIAL.

    SELECT bo_key
      FROM /bobf/obm_obj
      INTO TABLE et_bo_key
      WHERE genil_comp_name = iv_genil_component
        AND genil_enabled   = abap_true.

  ENDMETHOD.


  METHOD query_extension_bo.

    DATA ls_factory TYPE /bobf/s_frw_factory.

    CLEAR ev_extension_bo_key.

    " query in internal buffer
    READ TABLE gt_factory INTO ls_factory WITH KEY internal_name COMPONENTS bo_name = iv_extension_bo_name.
    IF sy-subrc = 0.
      ev_extension_bo_key = ls_factory-key.
      RETURN.
    ENDIF.

    " query on database
    ls_factory-bo_name = iv_extension_bo_name.
    SELECT SINGLE bo_key bo_esr_name bo_generated
      FROM /bobf/obm_bo
      INTO (ls_factory-key, ls_factory-bo_proxy_name, ls_factory-test)
      WHERE bo_name    = iv_extension_bo_name
      AND   extension  = abap_true
      AND   bo_deleted = abap_false.
    IF sy-subrc = 0.
      ev_extension_bo_key = ls_factory-key.
    ENDIF.

  ENDMETHOD.


  METHOD query_extension_bos.

    DATA lv_core_bo_key          TYPE /bobf/conf_key.
    DATA lt_core_bo_key          TYPE /bobf/t_frw_key2.
    DATA lt_tmp_extension_bo_key TYPE /bobf/t_frw_key2.
    DATA lv_tmp_extension_bo_key TYPE /bobf/conf_key.
    DATA lv_bo_name              TYPE /bobf/obm_name.

    " initialize
    CLEAR et_extension_bo_name.
    IF iv_core_bo_name IS INITIAL.
      RETURN.
    ENDIF.
    SELECT SINGLE bo_key
      FROM  /bobf/obm_bo
      INTO  lv_core_bo_key
      WHERE bo_deleted = abap_false
      AND   bo_name    = iv_core_bo_name.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
    APPEND lv_core_bo_key TO lt_core_bo_key.

    WHILE lt_core_bo_key IS NOT INITIAL.
      " get extension BOs for a certain core BO
      LOOP AT lt_core_bo_key INTO lv_core_bo_key.
        DELETE lt_core_bo_key.
        SELECT bo_key
          FROM /bobf/obm_bo
          INTO TABLE lt_tmp_extension_bo_key
          WHERE extension    = abap_true
          AND   super_bo_key = lv_core_bo_key
          AND   bo_deleted   = abap_false.

        " process also the extension of extension (...) BO
        APPEND LINES OF lt_tmp_extension_bo_key TO lt_core_bo_key.
        LOOP AT lt_tmp_extension_bo_key INTO lv_tmp_extension_bo_key.
          SELECT SINGLE bo_name
            FROM /bobf/obm_bo
            INTO lv_bo_name
            WHERE bo_key = lv_tmp_extension_bo_key.
          APPEND lv_bo_name TO et_extension_bo_name.
        ENDLOOP.

      ENDLOOP.
    ENDWHILE.

  ENDMETHOD.


  METHOD query_inheriting_bo.

    DATA:
      lv_abstract TYPE boole_d,
      ls_bo_key   TYPE /bobf/s_frw_key.

    CLEAR et_bo_key.
    CHECK iv_super_bo_key IS NOT INITIAL.

    " get all children of the BO specified by IV_SUPER_BO_KEY
    SELECT bo_key
      FROM /bobf/obm_bo
      INTO TABLE et_bo_key
      WHERE super_bo_key = iv_super_bo_key
        AND bo_deleted   = abap_false
        AND extension    = abap_false.

    " remove all abstract business objects out of ET_BO_KEY
    IF iv_only_instantiable = abap_true.
      LOOP AT et_bo_key INTO ls_bo_key.
        SELECT SINGLE abstract FROM /bobf/obm_obj INTO lv_abstract
          WHERE bo_key = ls_bo_key-key AND version = /bobf/if_conf_c=>sc_version_active.
        IF sy-subrc = 0.
          IF lv_abstract = abap_true.
            DELETE et_bo_key.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD query_parent_bo.

    DATA:
      ls_bo_key TYPE /bobf/s_frw_key.

    CLEAR ev_parent_bo_key.

    IF iv_child_bo_key IS INITIAL.
      RETURN.
    ENDIF.

    " get parent BO key
    SELECT SINGLE super_bo_key
      FROM /bobf/obm_bo
      INTO ls_bo_key
      WHERE bo_key     = iv_child_bo_key
        AND bo_deleted = abap_false.                        "#EC WARNOK

    ev_parent_bo_key = ls_bo_key-key.

  ENDMETHOD.


  METHOD shared_object_disable.
    gv_shared_object_disable = abap_true.
    ev_returning = abap_true.
  ENDMETHOD.


  METHOD shared_object_restrict.
    gv_shared_object_restrict = abap_true.
    ev_returning = abap_true.
  ENDMETHOD.


  METHOD shared_object_unexceptional.
    gv_shared_object_unexceptional = abap_true.
    ev_returning = abap_true.
  ENDMETHOD.
ENDCLASS.