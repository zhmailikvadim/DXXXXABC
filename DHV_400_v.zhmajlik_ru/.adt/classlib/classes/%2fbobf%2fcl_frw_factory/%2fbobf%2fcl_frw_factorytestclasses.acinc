* ----------------------------------------------------------------------
*----------------------------------------------------------------------*
*       CLASS lcl_frw_factory DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_frw_factory DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
  FINAL
.
*?<asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
*?<asx:values>
*?<TESTCLASS_OPTIONS>
*?<TEST_CLASS>Lcl_Frw_Factory
*?</TEST_CLASS>
*?<OBJECT_UNDER_TEST>/BOPF/CL_FRW_FACTORY
*?</OBJECT_UNDER_TEST>
*?<OBJECT_IS_LOCAL/>
*?<GENERATE_FIXTURE/>
*?<GENERATE_CLASS_FIXTURE/>
*?<GENERATE_INVOCATION/>
*?<GENERATE_ASSERT_EQUAL/>
*?</TESTCLASS_OPTIONS>
*?</asx:values>
*?</asx:abap>
* ----------------------------------------------------------------------
* ===============
  PUBLIC SECTION.
* ===============

* ================
  PRIVATE SECTION.
* ================
    METHODS: get_bopf FOR TESTING.
    METHODS: get_change FOR TESTING.
    METHODS: get_configuration FOR TESTING.
    METHODS: get_message FOR TESTING.
    METHODS: get_new_key FOR TESTING.
    METHODS: get_new_transient_key FOR TESTING.
    METHODS: query_bo FOR TESTING.
ENDCLASS.       "Lcl_Frw_Factory
* ----------------------------------------------------------------------
CLASS lcl_frw_factory IMPLEMENTATION.
* ----------------------------------------------------------------------

* ----------------------------------------------------------------------
  METHOD get_bopf.
* ----------------------------------------------------------------------
    DATA:
      lo_bopf    TYPE REF TO /BOBF/IF_FRW_SERVICE_LAYER,
      lv_bo_name TYPE /BOBF/OBM_NAME,
      lv_bo_key  TYPE /BOBF/OBM_BO_KEY.

    TRY.
        lv_bo_key = /BOBF/IF_CONF_OBJ_C=>SC_BO_KEY.

*       check bo_key
        lv_bo_name = /BOBF/CL_FRW_FACTORY=>GET_BO_NAME( lv_bo_key ).

        CALL METHOD cl_aunit_assert=>assert_not_initial
          EXPORTING
            act = lv_bo_name
            msg = 'Business object not found'.

        lo_bopf = /BOBF/CL_FRW_FACTORY=>GET_BOPF(
                    iv_bo_key = lv_bo_key ).

        CALL METHOD cl_aunit_assert=>assert_bound
          EXPORTING
            act = lo_bopf
            msg = 'BOPF runtime object could not be created'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'BOPF runtime object could not be created'.
    ENDTRY.

  ENDMETHOD.       "Get_Bopf

* ----------------------------------------------------------------------
  METHOD get_change.
* ----------------------------------------------------------------------
    DATA:
      lo_change  TYPE REF TO /BOBF/IF_FRW_CHANGE.

    TRY.
        lo_change = /BOBF/CL_FRW_FACTORY=>GET_CHANGE( ).

        CALL METHOD cl_aunit_assert=>assert_bound
          EXPORTING
            act = lo_change
            msg = 'Error creating change object'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Error creating change object'.
    ENDTRY.

  ENDMETHOD.       "Get_Change

* ----------------------------------------------------------------------
  METHOD get_configuration.
* ----------------------------------------------------------------------
    DATA:
      lo_bopf    TYPE REF TO /BOBF/IF_FRW_CONFIGURATION,
      lv_bo_name TYPE /BOBF/OBM_NAME,
      lv_bo_key  TYPE /BOBF/OBM_BO_KEY.

    TRY.
        lv_bo_key = /BOBF/IF_CONF_OBJ_C=>SC_BO_KEY.

*       check bo_key
        lv_bo_name = /BOBF/CL_FRW_FACTORY=>GET_BO_NAME( lv_bo_key ).

        CALL METHOD cl_aunit_assert=>assert_not_initial
          EXPORTING
            act = lv_bo_name
            msg = 'Business object not found'.

        lo_bopf = /BOBF/CL_FRW_FACTORY=>GET_CONFIGURATION(
                    iv_bo_key = lv_bo_key ).

        CALL METHOD cl_aunit_assert=>assert_bound
          EXPORTING
            act = lo_bopf
            msg = 'Configuration object could not be created'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Configuration object could not be created'.
    ENDTRY.

  ENDMETHOD.       "Get_Configuration

* ----------------------------------------------------------------------
  METHOD get_message.
* ----------------------------------------------------------------------
    DATA:
      lo_message TYPE REF TO /BOBF/IF_FRW_MESSAGE.

    TRY.
        lo_message = /BOBF/CL_FRW_FACTORY=>GET_MESSAGE( ).

        CALL METHOD cl_aunit_assert=>assert_bound
          EXPORTING
            act = lo_message
            msg = 'Error creating message object'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Error creating message object'.
    ENDTRY.

  ENDMETHOD.       "Get_Message

* ----------------------------------------------------------------------
  METHOD get_new_key.
* ----------------------------------------------------------------------
    DATA:
      lv_key TYPE /BOBF/CONF_KEY.

    TRY.
        lv_key = /BOBF/CL_FRW_FACTORY=>GET_NEW_KEY( ).

        CALL METHOD cl_aunit_assert=>assert_not_initial
          EXPORTING
            act = lv_key
            msg = 'Key creation failed'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Key creation failed'.
    ENDTRY.

  ENDMETHOD.       "Get_New_Key

* ----------------------------------------------------------------------
  METHOD get_new_transient_key.
* ----------------------------------------------------------------------
    DATA:
      lv_key TYPE /BOBF/CONF_KEY.

    TRY.
        lv_key = /BOBF/CL_FRW_FACTORY=>GET_NEW_TRANSIENT_KEY( ).

        CALL METHOD cl_aunit_assert=>assert_not_initial
          EXPORTING
            act = lv_key
            msg = 'Key creation failed'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Key creation failed'.
    ENDTRY.

  ENDMETHOD.       "Get_New_Transient_Key

* ----------------------------------------------------------------------
  METHOD query_bo.
* ----------------------------------------------------------------------
    DATA:
      lv_bo_name TYPE /BOBF/OBM_NAME,
      lv_bo_key  TYPE /BOBF/OBM_BO_KEY.

    TRY.
        lv_bo_key = /BOBF/IF_CONF_OBJ_C=>SC_BO_KEY.

*       check bo_key
        lv_bo_name = /BOBF/CL_FRW_FACTORY=>GET_BO_NAME( lv_bo_key ).

        CALL METHOD cl_aunit_assert=>assert_not_initial
          EXPORTING
            act = lv_bo_name
            msg = 'Business object not found'.

        lv_bo_key = /BOBF/CL_FRW_FACTORY=>QUERY_BO(
                      iv_bo_name = lv_bo_name ).

        CALL METHOD cl_aunit_assert=>assert_equals
          EXPORTING
            exp = /BOBF/IF_CONF_OBJ_C=>SC_BO_KEY
            act = lv_bo_key
            msg = 'Business object not found'.

      CATCH /BOBF/CX_FRW.
        CALL METHOD cl_aunit_assert=>abort
          EXPORTING
            msg = 'Business object not found'.
    ENDTRY.

  ENDMETHOD.       "Query_Bo

ENDCLASS.       "Lcl_Frw_Factory
