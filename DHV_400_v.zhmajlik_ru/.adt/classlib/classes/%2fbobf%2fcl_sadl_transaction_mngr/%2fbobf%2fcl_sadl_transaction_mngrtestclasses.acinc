CLASS lth_message DEFINITION INHERITING FROM /bobf/cm_frw "is abstract, so we need a non-abstract subclass
  FOR TESTING
  FINAL.

ENDCLASS.




CLASS ltd_bopf_frw_change DEFINITION FINAL FOR TESTING.

  PUBLIC SECTION.
    INTERFACES /bobf/if_frw_change PARTIALLY IMPLEMENTED.
    METHODS constructor IMPORTING iv_has_changes TYPE abap_bool.

  PRIVATE SECTION.
    DATA mv_has_changes TYPE abap_bool.
ENDCLASS.



CLASS ltd_bopf_frw_change IMPLEMENTATION.

  METHOD constructor.
    mv_has_changes = iv_has_changes.
  ENDMETHOD.

  METHOD /bobf/if_frw_change~has_changes.
    cl_abap_unit_assert=>assert_equals( act = iv_selection  exp = /bobf/if_frw_c=>sc_change_succ_only ).
    ev_exist = mv_has_changes.
  ENDMETHOD.

ENDCLASS.




CLASS ltd_bopf_tra_change DEFINITION FINAL FOR TESTING.

  PUBLIC SECTION.
    INTERFACES /bobf/if_tra_change PARTIALLY IMPLEMENTED.

    TYPES gty_change TYPE c LENGTH 1.
    CONSTANTS gc_no_changes TYPE gty_change VALUE 'N'.
    CONSTANTS gc_only_empty_changes TYPE gty_change VALUE 'E'.
    CONSTANTS gc_with_changes TYPE gty_change VALUE 'C'.

    METHODS constructor IMPORTING iv_has_changes TYPE gty_change.

  PRIVATE SECTION.
    DATA mv_has_changes TYPE gty_change.

ENDCLASS.



CLASS ltd_bopf_tra_change IMPLEMENTATION.

  METHOD constructor.
    mv_has_changes = iv_has_changes.
  ENDMETHOD.

  METHOD /bobf/if_tra_change~get_changes.
    CASE mv_has_changes.
      WHEN gc_no_changes.
        CLEAR et_change.
      WHEN gc_only_empty_changes.
        et_change = VALUE #( ( bo_key = '1'  change_object = NEW ltd_bopf_frw_change( iv_has_changes = abap_false ) ) ).
      WHEN gc_with_changes.
        et_change = VALUE #( ( bo_key = '1'  change_object = NEW ltd_bopf_frw_change( iv_has_changes = abap_false ) )  "this makes it more complicated to detect the changes
                             ( bo_key = '2'  change_object = NEW ltd_bopf_frw_change( iv_has_changes = abap_true ) ) ).
      WHEN OTHERS. ASSERT 1 = 0.
    ENDCASE.
  ENDMETHOD.

ENDCLASS.




CLASS ltd_bopf_transaction_manager DEFINITION INHERITING FROM /bobf/cl_tra_transaction_mgr FINAL FOR TESTING.

  PUBLIC SECTION.


    METHODS set_next_message IMPORTING io_message TYPE REF TO /bobf/cm_frw.
    METHODS set_result_for_get_changes IMPORTING io_change TYPE REF TO /bobf/if_tra_change.
    METHODS /bobf/if_tra_transaction_mgr~cleanup REDEFINITION.
    METHODS /bobf/if_tra_transaction_mgr~get_transactional_changes REDEFINITION.

    DATA: BEGIN OF ms_method_call_counter READ-ONLY,
            discard_changes           TYPE i,
            get_transactional_changes TYPE i,
          END OF ms_method_call_counter.
  PRIVATE SECTION.
    DATA: BEGIN OF ms_result,
            get_changes TYPE REF TO /bobf/if_tra_change,
          END OF ms_result.
    DATA mo_next_message TYPE REF TO /bobf/cm_frw.

    METHODS add_message CHANGING co_frw_message TYPE REF TO /bobf/if_frw_message.

ENDCLASS.



CLASS ltd_bopf_transaction_manager IMPLEMENTATION.

  METHOD /bobf/if_tra_transaction_mgr~get_transactional_changes.
    ADD 1 TO ms_method_call_counter-get_transactional_changes.
    eo_change = ms_result-get_changes.
  ENDMETHOD.

  METHOD set_next_message.
    mo_next_message = io_message.
  ENDMETHOD.

  METHOD set_result_for_get_changes.
    ms_result-get_changes = io_change.
  ENDMETHOD.

  METHOD /bobf/if_tra_transaction_mgr~cleanup.
    ADD 1 TO ms_method_call_counter-discard_changes.
    cl_abap_unit_assert=>assert_equals( act = iv_cleanup_mode  exp = /bobf/if_conf_c=>sc_cleanup_refresh ).
    CLEAR eo_message.
    add_message( CHANGING co_frw_message = eo_message ).
  ENDMETHOD.

  METHOD add_message.
    IF mo_next_message IS BOUND.
      co_frw_message = /bobf/cl_frw_factory=>get_message( ).
      co_frw_message->add_cm( mo_next_message ).
      CLEAR mo_next_message.
    ENDIF.
  ENDMETHOD.

ENDCLASS.




CLASS ltc_instanciation DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS
  FINAL.

  PRIVATE SECTION.
    METHODS instanciation_is_bound FOR TESTING RAISING cx_static_check.
    METHODS instanciation_is_singleton FOR TESTING RAISING cx_static_check.
ENDCLASS.



CLASS ltc_instanciation IMPLEMENTATION.

  METHOD instanciation_is_bound.
    DATA(lo_transaction_manager) = /bobf/cl_sadl_transaction_mngr=>get( ).
    cl_abap_unit_assert=>assert_bound( lo_transaction_manager ).
    CAST /bobf/cl_sadl_transaction_mngr( lo_transaction_manager ).
  ENDMETHOD.


  METHOD instanciation_is_singleton.
    DATA(lo_transaction_manager1) = /bobf/cl_sadl_transaction_mngr=>get( ).
    DATA(lo_transaction_manager2) = /bobf/cl_sadl_transaction_mngr=>get( ).
    cl_abap_unit_assert=>assert_equals( act = lo_transaction_manager1
                                        exp = lo_transaction_manager2 ).
  ENDMETHOD.

ENDCLASS.




CLASS ltc_instance_methods DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA mo_sadl_transaction_manager TYPE REF TO if_sadl_transaction_manager.
    DATA mo_bopf_transaction_mngr TYPE REF TO ltd_bopf_transaction_manager.
    DATA mo_tcl TYPE REF TO /bobf/cl_sadl_transaction_mngr.

    METHODS setup RAISING cx_static_check.

    METHODS discard_changes FOR TESTING RAISING cx_static_check.
    METHODS has_changes_without_change_obj FOR TESTING RAISING cx_static_check.
    METHODS has_changes_w_empty_change_obj FOR TESTING RAISING cx_static_check.
    METHODS has_changes_true FOR TESTING RAISING cx_static_check.
    METHODS has_changes_failed_only FOR TESTING RAISING cx_static_check.
    METHODS messages_empty FOR TESTING RAISING cx_static_check.


ENDCLASS.

CLASS /bobf/cl_sadl_transaction_mngr DEFINITION LOCAL FRIENDS ltc_instance_methods.



CLASS ltc_instance_methods IMPLEMENTATION.

  METHOD setup.
*    mo_bopf_transaction_mngr = NEW ltd_bopf_transaction_manager( ).
    mo_bopf_transaction_mngr = NEW ltd_bopf_transaction_manager( ).
    /bobf/cl_sadl_transaction_mngr=>create_instance( io_bopf_transaction_mngr = mo_bopf_transaction_mngr ).
    mo_sadl_transaction_manager = /bobf/cl_sadl_transaction_mngr=>get( ).
    mo_sadl_transaction_manager->get_message_handler( )->clear( ).
  ENDMETHOD.

  METHOD discard_changes.
    DATA(lv_failed) = mo_sadl_transaction_manager->discard_changes( ).
    cl_abap_unit_assert=>assert_false( lv_failed ).
    cl_abap_unit_assert=>assert_equals( act = mo_bopf_transaction_mngr->ms_method_call_counter-discard_changes  exp = 1 ).
  ENDMETHOD.


  METHOD has_changes_without_change_obj.
    DATA(lv_has_changes) = mo_sadl_transaction_manager->has_changes( ).
    cl_abap_unit_assert=>assert_false( lv_has_changes ).
    cl_abap_unit_assert=>assert_equals( act = mo_bopf_transaction_mngr->ms_method_call_counter-get_transactional_changes  exp = 1 ).
  ENDMETHOD.


  METHOD has_changes_w_empty_change_obj.
    mo_bopf_transaction_mngr->set_result_for_get_changes( NEW ltd_bopf_tra_change( ltd_bopf_tra_change=>gc_no_changes ) ).
    DATA(lv_has_changes) = mo_sadl_transaction_manager->has_changes( ).
    cl_abap_unit_assert=>assert_false( lv_has_changes ).
    cl_abap_unit_assert=>assert_equals( act = mo_bopf_transaction_mngr->ms_method_call_counter-get_transactional_changes  exp = 1 ).
  ENDMETHOD.


  METHOD has_changes_true.
    mo_bopf_transaction_mngr->set_result_for_get_changes( NEW ltd_bopf_tra_change( ltd_bopf_tra_change=>gc_with_changes ) ).
    DATA(lv_has_changes) = mo_sadl_transaction_manager->has_changes( ).
    cl_abap_unit_assert=>assert_true( lv_has_changes ).
  ENDMETHOD.


  METHOD has_changes_failed_only.
    mo_bopf_transaction_mngr->set_result_for_get_changes( NEW ltd_bopf_tra_change( ltd_bopf_tra_change=>gc_only_empty_changes ) ).
    DATA(lv_has_changes) = mo_sadl_transaction_manager->has_changes( ).
    cl_abap_unit_assert=>assert_false( lv_has_changes ).
  ENDMETHOD.


  METHOD messages_empty.
    DATA(lo_msg_handler) = mo_sadl_transaction_manager->get_message_handler( ).

    cl_abap_unit_assert=>assert_bound( lo_msg_handler ).
    cl_abap_unit_assert=>assert_false( lo_msg_handler->has_errors( ) ).
    lo_msg_handler->get_messages( IMPORTING et_messages = DATA(lt_messages) ).
    cl_abap_unit_assert=>assert_initial( lt_messages ).
  ENDMETHOD.

ENDCLASS.




CLASS ltd_sadl_transact_mgr_for_save DEFINITION INHERITING FROM /bobf/cl_sadl_transaction_mngr FINAL FOR TESTING.

  PUBLIC SECTION.
    CLASS-METHODS get_instance_for_testing IMPORTING io_bopf_transaction_manager TYPE REF TO /bobf/cl_tra_transaction_mgr
                                           RETURNING VALUE(ro_instance)          TYPE REF TO if_sadl_transaction_manager.
    METHODS set_result_for_prepare_commit IMPORTING iv_rejected TYPE abap_bool
                                                    io_message  TYPE REF TO /bobf/cm_frw.
    METHODS set_result_for_after_commit IMPORTING io_message  TYPE REF TO /bobf/cm_frw.
  PROTECTED SECTION.
    METHODS bopf_prepare_commit REDEFINITION.
    METHODS bopf_commit_and_finalize REDEFINITION.
  PRIVATE SECTION.
    DATA mv_prepare_commit_rejected TYPE        abap_bool.
    DATA mo_prepare_commit_message  TYPE REF TO /bobf/cm_frw.
    DATA mo_commit_and_finalize_message TYPE REF TO /bobf/cm_frw.

ENDCLASS.

CLASS ltd_sadl_transact_mgr_for_save IMPLEMENTATION.

  METHOD bopf_commit_and_finalize.
    IF mo_commit_and_finalize_message IS BOUND.
      eo_message_after_commit = /bobf/cl_frw_factory=>get_message( ).
      eo_message_after_commit->add_cm( mo_commit_and_finalize_message ).
    ENDIF.
    CLEAR mo_commit_and_finalize_message.
  ENDMETHOD.

  METHOD bopf_prepare_commit.
    ev_rejected = mv_prepare_commit_rejected.
    IF mo_prepare_commit_message IS BOUND.
      eo_message_before_commit = /bobf/cl_frw_factory=>get_message( ).
      eo_message_before_commit->add_cm( mo_prepare_commit_message ).
    ENDIF.
    CLEAR mo_prepare_commit_message.
  ENDMETHOD.

  METHOD set_result_for_prepare_commit.
    mv_prepare_commit_rejected = iv_rejected.
    mo_prepare_commit_message = io_message.
  ENDMETHOD.

  METHOD get_instance_for_testing.
    ro_instance = NEW ltd_sadl_transact_mgr_for_save(
                        iv_entity_type           = cl_sadl_entity_factory=>co_type-cds "type CDS is required to trigger message handling logic
                        io_bopf_transaction_mngr = io_bopf_transaction_manager ).
  ENDMETHOD.

  METHOD set_result_for_after_commit.
    mo_commit_and_finalize_message = io_message.
  ENDMETHOD.

ENDCLASS.

CLASS ltd_bopf_sadl_message_handler DEFINITION INHERITING FROM /bobf/cl_sadl_message_handler FOR TESTING.
  PUBLIC SECTION.
    CLASS-METHODS inject.
    CLASS-METHODS clear_registry.
  PROTECTED SECTION.
    METHODS map_location_to_sadl REDEFINITION.
    METHODS pre_read_message_locations REDEFINITION.
ENDCLASS.
CLASS ltd_bopf_sadl_message_handler IMPLEMENTATION.
  METHOD inject.
    CLEAR mt_instance_registry.
    INSERT VALUE #( entity_type = cl_sadl_entity_factory=>co_type-cds
                    instance = NEW ltd_bopf_sadl_message_handler( iv_entity_type = cl_sadl_entity_factory=>co_type-cds ) )
      INTO TABLE mt_instance_registry.
  ENDMETHOD.

  METHOD map_location_to_sadl.
    CLEAR et_locations.
    APPEND VALUE #( primary_key_values = NEW i( ) ) TO et_locations.
  ENDMETHOD.

  METHOD pre_read_message_locations.
  ENDMETHOD.

  METHOD clear_registry.
    CLEAR mt_instance_registry.
  ENDMETHOD.
ENDCLASS.


CLASS ltc_instance_methods_save DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA mo_sadl_transaction_manager TYPE REF TO if_sadl_transaction_manager.
    DATA mo_bopf_transaction_mngr TYPE REF TO ltd_bopf_transaction_manager.

    METHODS setup.
    METHODS set_result_for_prepare_commit IMPORTING iv_rejected TYPE        abap_bool    OPTIONAL
                                                    io_message  TYPE REF TO /bobf/cm_frw OPTIONAL.
    METHODS assert_message_exists IMPORTING io_exp_message TYPE REF TO /bobf/cm_frw.
    METHODS set_result_for_after_commit
      IMPORTING
        io_message TYPE REF TO lth_message.
    METHODS save_succeeding             FOR TESTING RAISING cx_static_check.
    METHODS save_failing                FOR TESTING RAISING cx_static_check.
    METHODS save_with_msg_before_commit FOR TESTING RAISING cx_static_check.
    METHODS save_with_msg_after_commit  FOR TESTING RAISING cx_static_check.
    METHODS save_w_msg_bfre_and_aft_commit FOR TESTING RAISING cx_static_check.
    METHODS messages_combined FOR TESTING RAISING cx_static_check.
ENDCLASS.

CLASS /bobf/cl_sadl_transaction_mngr DEFINITION LOCAL FRIENDS ltc_instance_methods_save.


CLASS ltc_instance_methods_save IMPLEMENTATION.

  METHOD setup.
    ltd_bopf_sadl_message_handler=>inject( ).
    mo_bopf_transaction_mngr = NEW ltd_bopf_transaction_manager( ).
    mo_sadl_transaction_manager = ltd_sadl_transact_mgr_for_save=>get_instance_for_testing( io_bopf_transaction_manager = mo_bopf_transaction_mngr ).
    mo_sadl_transaction_manager->get_message_handler( )->clear( ).
  ENDMETHOD.

  METHOD save_succeeding.
    DATA(lv_failed) = mo_sadl_transaction_manager->save( ).
    cl_abap_unit_assert=>assert_false( lv_failed ).
  ENDMETHOD.

  METHOD save_failing.
    set_result_for_prepare_commit( iv_rejected = abap_true ).
    DATA(lv_failed) = mo_sadl_transaction_manager->save( ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD set_result_for_prepare_commit.
    CAST ltd_sadl_transact_mgr_for_save( mo_sadl_transaction_manager )->set_result_for_prepare_commit(
                                                                          iv_rejected = iv_rejected
                                                                          io_message  = io_message ).
  ENDMETHOD.

  METHOD save_with_msg_before_commit.
    DATA(lo_message) = NEW lth_message( ).
    set_result_for_prepare_commit( io_message = lo_message ).

    mo_sadl_transaction_manager->save( ).

    assert_message_exists( io_exp_message = lo_message ).
  ENDMETHOD.

  METHOD assert_message_exists.
    mo_sadl_transaction_manager->get_message_handler( )->get_messages( IMPORTING et_messages = DATA(lt_messages) ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_messages[ 1 ]-message  exp = io_exp_message ).
  ENDMETHOD.

  METHOD messages_combined.
    DATA(lo_save_message) = NEW lth_message( severity = /bobf/cm_frw=>co_severity_success ).
    DATA(lo_discard_message) = NEW lth_message( severity = /bobf/cm_frw=>co_severity_error ).

    DATA(lo_message_handler) = mo_sadl_transaction_manager->get_message_handler( ).

    set_result_for_prepare_commit( io_message = lo_save_message ).
    mo_sadl_transaction_manager->save( ).

    lo_message_handler->get_messages( IMPORTING et_messages = DATA(lt_messages_after_save) ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages_after_save )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_messages_after_save[ 1 ]-message  exp = lo_save_message ).

    mo_bopf_transaction_mngr->set_next_message( io_message = lo_discard_message ).
    mo_sadl_transaction_manager->discard_changes( ).

    lo_message_handler->get_messages( IMPORTING et_messages = DATA(lt_messages_after_discard) ).
    cl_abap_unit_assert=>assert_equals( exp = if_sadl_message_handler=>co_severity-error
                                    act = lt_messages_after_discard[ 1 ]-severity ).
    cl_abap_unit_assert=>assert_equals( exp = if_sadl_message_handler=>co_lifetime-transition
                                        act = lt_messages_after_discard[ 1 ]-lifetime ).

    cl_abap_unit_assert=>assert_equals( exp = if_sadl_message_handler=>co_severity-success
                                        act = lt_messages_after_discard[ 2 ]-severity ).
    cl_abap_unit_assert=>assert_equals( exp = if_sadl_message_handler=>co_lifetime-transition
                                        act = lt_messages_after_discard[ 2 ]-lifetime ).

  ENDMETHOD.

  METHOD save_with_msg_after_commit.
    DATA(lo_message) = NEW lth_message( ).
    set_result_for_after_commit( io_message = lo_message ).

    mo_sadl_transaction_manager->save( ).

    assert_message_exists( io_exp_message = lo_message ).
  ENDMETHOD.


  METHOD set_result_for_after_commit.
    CAST ltd_sadl_transact_mgr_for_save( mo_sadl_transaction_manager )->set_result_for_after_commit( io_message  = io_message ).
  ENDMETHOD.

  METHOD save_w_msg_bfre_and_aft_commit.
    DATA(lo_message_before_commit) = NEW lth_message( ).
    set_result_for_prepare_commit( io_message = lo_message_before_commit ).
    DATA(lo_message_after_commit) = NEW lth_message( ).
    set_result_for_after_commit( io_message = lo_message_after_commit ).

    mo_sadl_transaction_manager->save( ).

    DATA(lo_message_handler) = mo_sadl_transaction_manager->get_message_handler( ).
    lo_message_handler->get_messages( IMPORTING et_messages = DATA(lt_message) ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_message )  exp = 2 ).
  ENDMETHOD.

ENDCLASS.
