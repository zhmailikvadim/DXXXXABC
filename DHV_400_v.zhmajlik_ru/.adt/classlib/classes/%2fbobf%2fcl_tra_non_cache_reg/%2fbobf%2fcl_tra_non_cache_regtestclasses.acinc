*"* use this source file for your ABAP unit test classes
CLASS ltc_is_read_cache_disabled DEFINITION DEFERRED.
CLASS /bobf/cl_tra_non_cache_reg DEFINITION LOCAL FRIENDS ltc_is_read_cache_disabled.
CLASS ltc_is_read_cache_disabled DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_tra_non_cache_reg.
    METHODS setup.
    METHODS all_nodes_disabled FOR TESTING.
    METHODS all_nodes_dsabled_with_exc FOR TESTING.
    METHODS individual_node_disabled FOR TESTING.
    METHODS all_nodes_enabled FOR TESTING.
ENDCLASS.

CLASS ltc_is_read_cache_disabled IMPLEMENTATION.
  METHOD setup.
    CREATE OBJECT mo_cut.
    CLEAR mo_cut->mt_node_disabled.
    CLEAR mo_cut->mt_node_enabled.
    CLEAR mo_cut->mv_all_nodes.
    CLEAR mo_cut->mv_transaction_is_dirty.
  ENDMETHOD.

  METHOD all_nodes_disabled.
    mo_cut->disable_read_cache_all_nodes( ).
    cl_abap_unit_assert=>assert_true( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '111' ) ).
  ENDMETHOD.

  METHOD all_nodes_dsabled_with_exc.
    mo_cut->disable_read_cache_all_nodes( ).
    mo_cut->enable_read_cache_for_nodes( it_node_key = VALUE #( ( key = '111' ) ) ).
    cl_abap_unit_assert=>assert_false( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '111' ) ).
    cl_abap_unit_assert=>assert_true( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '222' ) ).
  ENDMETHOD.

  METHOD individual_node_disabled.
    mo_cut->disable_read_cache_for_nodes( it_node_key = VALUE #( ( key = '111' ) ( key = '222' ) ) ).
    cl_abap_unit_assert=>assert_true( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '222' ) ).
    cl_abap_unit_assert=>assert_false( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '333' ) ).
  ENDMETHOD.

  METHOD all_nodes_enabled.
    cl_abap_unit_assert=>assert_false( mo_cut->/bobf/if_tra_non_cache_reg~is_read_cache_disabled( iv_node_key = '111' ) ).
  ENDMETHOD.

ENDCLASS.
CLASS ltc_filter_by_cached_nodes DEFINITION DEFERRED.
class /bobf/cl_tra_non_cache_reg DEFINITION LOCAL FRIENDS ltc_filter_by_cached_nodes.
CLASS ltc_filter_by_cached_nodes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_tra_non_cache_reg.
    DATA mt_node TYPE /bobf/t_frw_node.
    METHODS setup.
    METHODS all_nodes_disabled FOR TESTING.
    METHODS individual_node_disabled FOR TESTING.
    METHODS all_nodes_disabled_with_exc FOR TESTING.
    METHODS all_nodes_enabled FOR TESTING.

ENDCLASS.

CLASS ltc_filter_by_cached_nodes IMPLEMENTATION.
  METHOD setup.
    CREATE OBJECT mo_cut.
    CLEAR mo_cut->mt_node_disabled.
    CLEAR mo_cut->mt_node_enabled.
    CLEAR mo_cut->mv_all_nodes.
    CLEAR mo_cut->mv_transaction_is_dirty.
    mt_node = VALUE #(
     ( node = 1
       key = 100 )
     ( node = 1
       key = 101 )
     ( node = 2
       key = 200 )
     ( node = 2
       key = 201 )
     ( node = 3
       key = 301 )
    ).
  ENDMETHOD.

  METHOD all_nodes_disabled.
    mo_cut->disable_read_cache_all_nodes( ).
    mo_cut->/bobf/if_tra_non_cache_reg~filter_by_cached_nodes(
      CHANGING
        ct_node = mt_node
    ).

    cl_abap_unit_assert=>assert_initial( mt_node ).

  ENDMETHOD.
  METHOD individual_node_disabled.
    mo_cut->disable_read_cache_for_nodes( it_node_key = VALUE #( ( key = 1 ) ( key = 3 ) ) ).
    mo_cut->/bobf/if_tra_non_cache_reg~filter_by_cached_nodes(
      CHANGING
        ct_node = mt_node
    ).
    cl_abap_unit_assert=>assert_equals(
      exp = VALUE /bobf/t_frw_node(
                   ( node = 2
                     key = 200 )
                   ( node = 2
                     key = 201 ) )
      act = mt_node
    ).
  ENDMETHOD.

  METHOD all_nodes_disabled_with_exc.
    mo_cut->disable_read_cache_all_nodes( ).
    mo_cut->enable_read_cache_for_nodes( it_node_key = VALUE #( ( key = 2 ) ) ).
    mo_cut->/bobf/if_tra_non_cache_reg~filter_by_cached_nodes(
      CHANGING
        ct_node = mt_node
    ).
    cl_abap_unit_assert=>assert_equals(
      exp = VALUE /bobf/t_frw_node(
                   ( node = 2
                     key = 200 )
                   ( node = 2
                     key = 201 ) )
      act = mt_node
    ).
  ENDMETHOD.

  METHOD all_nodes_enabled.
    DATA(lt_node_before) = mt_node.
    mo_cut->/bobf/if_tra_non_cache_reg~filter_by_cached_nodes(
      CHANGING
        ct_node = mt_node
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = lt_node_before
      act = mt_node
    ).

  ENDMETHOD.
ENDCLASS.
