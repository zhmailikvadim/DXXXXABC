*"* use this source file for your ABAP unit test classes
class lcl_lrep_http_handler definition deferred.
class /uif/cl_lrep_http_handler definition local friends lcl_lrep_http_handler.

class lcl_lrep_http_handler definition for testing
                                       duration short
                                       risk level harmless.
  private section.
    methods: handle_request for testing.
endclass.

class lcl_lrep_http_handler implementation.

  method handle_request.
    data: lo_handle_request type ref to /uif/cl_lrep_http_handler,
          lo_server         type ref to cl_http_server_net,
          lv_status_code    type i.

*   create objects
    create object lo_server.
    create object lo_handle_request.

*   Test 1 -> http object enmpty
    lo_handle_request->if_http_extension~handle_request( lo_server ).
    lo_server->response->get_status(
      importing
        code   = lv_status_code ).
    cl_abap_unit_assert=>assert_equals(
      act = lv_status_code
      exp = '403' ).

*   Test 2 -> set GET
    data: li_request type ref to if_http_request.
    li_request ?= cl_abap_testdouble=>create( 'IF_HTTP_REQUEST' ).
    cl_abap_testdouble=>configure_call( li_request )->returning( 'fetch' ).
    li_request->get_header_field(  name = /uif/if_lrep_connectivity_c=>header_csrf_token ).

    cl_abap_testdouble=>configure_call( li_request )->returning( 'GET' ).
    li_request->get_method( ).

    cl_abap_testdouble=>configure_call( li_request )->returning( /uif/if_lrep_connectivity_c=>encoding_gzip ).
    li_request->get_header_field( if_http_header_fields=>accept_encoding ).


*   Server Interface MOCK
    data: li_server type ref to if_http_server.
    li_server ?= cl_abap_testdouble=>create( 'IF_HTTP_SERVER' ).
    cl_abap_testdouble=>configure_call( li_server )->set_parameter(
      exporting
        name          = 'token'
        value         = 'token123' ).
    li_server->get_xsrf_token( ).

    li_server->request = li_request.

*   Response MOCK
    data: li_response type ref to if_http_response.
    li_response ?= cl_abap_testdouble=>create( 'IF_HTTP_RESPONSE' ).

    cl_abap_testdouble=>configure_call( li_response )->set_parameter(
      exporting
        name          = 'CODE'
        value         =  200 ).
    li_response->get_status( ).

    li_server->response = li_response.

    lo_handle_request->if_http_extension~handle_request( li_server ).
*   Nothing to test, the program went through

*   POST
    clear lv_status_code.
    cl_abap_testdouble=>configure_call( li_request )->returning( 'POST' ).
    li_request->get_method( ).

    lo_server->response = new cl_http_response( ). "override the mock
*   Wrong token
    lo_handle_request->if_http_extension~handle_request( li_server ).

  endmethod.

endclass.
