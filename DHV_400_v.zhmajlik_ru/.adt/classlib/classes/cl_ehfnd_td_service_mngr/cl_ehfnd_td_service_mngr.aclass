class CL_EHFND_TD_SERVICE_MNGR definition
  public
  inheriting from /BOBF/CL_TOOL_TEST_DOUBLE_SM
  create public
  for testing .

public section.

  interfaces /BOBF/IF_FRW_MODIFY .
  interfaces /BOBF/IF_FRW_READ .
  interfaces /BOBF/IF_FRW_QUERY .

  data MT_MODIFICATIONS type /BOBF/T_FRW_MODIFICATION read-only .
  data MT_QUERY_SELECT_PARAMETERS type /BOBF/T_FRW_QUERY_SELPARAM read-only .
  data MS_QUERY_OPTIONS type /BOBF/S_FRW_QUERY_OPTIONS .
  data MV_QUERY_KEY type /BOBF/OBM_QUERY_KEY read-only .
  data MO_MODIFY_CHANGE type ref to /BOBF/IF_TRA_CHANGE .
  data MR_T_QUERY_RESULT_DATA type ref to DATA .
  data MT_QUERY_RESULT_KEY type /BOBF/T_FRW_KEY .
  data MR_S_ACTION_PARAMETERS type ref to DATA read-only .
  data MV_ACTION_KEY type /BOBF/CONF_KEY read-only .
  data MT_ACTION_KEY type /BOBF/T_FRW_KEY read-only .
  data MO_ACTION_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE .
  data MO_ACTION_CHANGE type ref to /BOBF/IF_TRA_CHANGE .

  methods CLEANUP_DATA .
  methods SET_MODIFY_CHANGE
    importing
      !IO_CHANGE type ref to /BOBF/IF_TRA_CHANGE .
  methods SET_ACTION_CHANGE
    importing
      !IO_CHANGE type ref to /BOBF/IF_TRA_CHANGE .
  methods ASSERT_HAS_MODIFICATION
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IS_MODIFICATION type DATA .

  methods /BOBF/IF_TRA_SERVICE_MANAGER~DO_ACTION
    redefinition .
  methods /BOBF/IF_TRA_SERVICE_MANAGER~MODIFY
    redefinition .
  methods /BOBF/IF_TRA_SERVICE_MANAGER~QUERY
    redefinition .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS CL_EHFND_TD_SERVICE_MNGR IMPLEMENTATION.


  METHOD /bobf/if_frw_modify~create.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~delete.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~do_action.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~do_modify.

    " this just wraps the service manager modify
    /bobf/if_tra_service_manager~modify(
      EXPORTING
        it_modification = it_modification    " Changes
*      IMPORTING
*        eo_change       =     " Interface of Change Object
*        eo_message      =     " Interface of Message Object
    ).

  ENDMETHOD.


  METHOD /bobf/if_frw_modify~end_modify.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~notify_association_change.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~notify_change.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~notify_property_change.
  ENDMETHOD.


  METHOD /bobf/if_frw_modify~update.

    " this is being called when for example an update is performed in a determination for an existing record.
    " for the ease of consumption, this just wraps to the modify method of the service manager

    DATA(lt_modification) = VALUE /bobf/t_frw_modification( (
        node           = iv_node
        key            = iv_key
        data           = is_data
        changed_fields = it_changed_fields
        root_key       = iv_root_key
    ) ).

    me->/bobf/if_tra_service_manager~modify( EXPORTING it_modification = lt_modification ).

  ENDMETHOD.


  METHOD /bobf/if_frw_query~query.

    " this just wraps the service manager retrieve
    me->/bobf/if_tra_service_manager~query(
      EXPORTING
        iv_query_key            = is_ctx-query_key
        it_filter_key           = it_filter_key
        it_selection_parameters = it_selection_parameters
        is_query_options        = is_query_options
        iv_fill_data            = iv_fill_data
        it_requested_attributes = it_requested_attributes
      IMPORTING
        eo_message              = eo_message
        es_query_info           = es_query_info
        et_data                 = et_data
        et_key                  = et_key ).

  ENDMETHOD.


  METHOD /bobf/if_frw_query~retrieve_default_param ##NEEDED.
  ENDMETHOD.


  METHOD /bobf/if_frw_read~compare.
  ENDMETHOD.


  METHOD /bobf/if_frw_read~convert_altern_key.
  ENDMETHOD.


  METHOD /bobf/if_frw_read~get_root_key.
  ENDMETHOD.


  METHOD /bobf/if_frw_read~retrieve.

    " this just wraps the service manager retrieve
    /bobf/if_tra_service_manager~retrieve(
      EXPORTING
        iv_node_key             = iv_node    " Node
        it_key                  = it_key    " Key Table
        iv_before_image         = iv_before_image    " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
*        iv_edit_mode            =     " Change Mode
        iv_fill_data            = iv_fill_data    " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
*        iv_invalidate_cache     =   " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
        it_requested_attributes = it_requested_attributes    " List of Names (e.g. Fieldnames)
      IMPORTING
        eo_message              = eo_message    " Interface of Message Object
*        eo_change               =     " Interface of Change Object
        et_data                 = et_data
        et_failed_key           = et_failed_key    " Key Table
    ).

  ENDMETHOD.


  METHOD /bobf/if_frw_read~retrieve_by_association.

    " this just wraps the service manager retrieve by association
    /bobf/if_tra_service_manager~retrieve_by_association(
      EXPORTING
        iv_node_key             = iv_node    " Node
        it_key                  = it_key    " Key Table
        iv_association          = iv_association    " Association
        is_parameters           = is_parameters
        it_filtered_attributes  = it_filtered_attributes
        iv_fill_data            = iv_fill_data    " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
        iv_before_image         = iv_before_image    " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
*        iv_invalidate_cache     =     " Data element for domain BOOLE: TRUE (='X') and FALSE (=' ')
*        iv_edit_mode            =     " Change Mode
        it_requested_attributes = it_requested_attributes    " List of Names (e.g. Fieldnames)
      IMPORTING
        eo_message              = eo_message    " Interface of Message Object
*        eo_change               =     " Interface of Change Object
        et_data                 = et_data
        et_key_link             = et_key_link    " Key Link
        et_target_key           = et_target_key    " Key Table
        et_failed_key           = et_failed_key    " Key Table
    ).

  ENDMETHOD.


  METHOD /bobf/if_tra_service_manager~do_action.

    " remember action key
    mv_action_key = iv_act_key.
    mt_action_key = it_key.

    " remember parameters of the action
    IF ( is_parameters IS BOUND ).
      ASSIGN is_parameters->* TO FIELD-SYMBOL(<ls_parameters>).
      CREATE DATA mr_s_action_parameters LIKE <ls_parameters>.
      ASSIGN mr_s_action_parameters->* TO FIELD-SYMBOL(<ms_parameters>).
      MOVE-CORRESPONDING <ls_parameters> TO <ms_parameters>.
    ENDIF.

    eo_message = mo_action_message.
    eo_change = mo_action_change.

  ENDMETHOD.


  METHOD /bobf/if_tra_service_manager~modify.

    " remember modifications
    APPEND LINES OF it_modification TO mt_modifications.

    " return mocked data
    eo_change = mo_modify_change.

  ENDMETHOD.


  METHOD /bobf/if_tra_service_manager~query.

    CLEAR et_data.
    CLEAR et_key.

    " remember parameters
    mv_query_key               = iv_query_key.
    mt_query_select_parameters = it_selection_parameters.
    ms_query_options           = is_query_options.

    " return mocked data
    et_key = mt_query_result_key.
    IF iv_fill_data = abap_true.
      FIELD-SYMBOLS: <lt_query_result_data> TYPE INDEX TABLE.
      ASSIGN mr_t_query_result_data->* TO <lt_query_result_data>.
      et_data = <lt_query_result_data>.
    ENDIF.

  ENDMETHOD.


  METHOD assert_has_modification.

    " This checks if in the modification table there is an entry matching the data of the provided structure.
    " Only filled fields are checked.

    ASSERT iv_node_key IS NOT INITIAL.

    cl_ehfnd_abap_helper=>get_structdescr_fieldnames(
      EXPORTING
        io_structdescr = CAST cl_abap_structdescr( cl_abap_structdescr=>describe_by_data( is_modification ) )
      IMPORTING
        et_components  = DATA(lt_components) ).

    ASSIGN is_modification TO FIELD-SYMBOL(<ls_data_exp>).

    LOOP AT mt_modifications REFERENCE INTO DATA(lr_s_modification)
      WHERE node = iv_node_key.
      DATA(lv_match) = abap_true. " helper variable, this is true when a match was found in the modification table

      ASSIGN lr_s_modification->data->* TO FIELD-SYMBOL(<ls_data_act>).

      LOOP AT lt_components REFERENCE INTO DATA(lr_s_components).

        ASSIGN COMPONENT lr_s_components->name OF STRUCTURE <ls_data_exp> TO FIELD-SYMBOL(<lv_field_exp>).
        ASSIGN COMPONENT lr_s_components->name OF STRUCTURE <ls_data_act> TO FIELD-SYMBOL(<lv_field_act>).

        " only provided fields that are not initial are being checked
        IF <lv_field_exp> IS NOT INITIAL
          AND <lv_field_exp> <> <lv_field_act>.
          lv_match = abap_false.
          CONTINUE.
        ENDIF.

      ENDLOOP.

      IF lv_match = abap_true.
        " a matching modification was found
        RETURN.
      ENDIF.

    ENDLOOP.

    " test fails when no matching modification was found
    IF lv_match = abap_false.
      cl_abap_unit_assert=>fail( ). " Improvement potential: Provide meaningful message
    ENDIF.

  ENDMETHOD.


  METHOD cleanup_data.

    CLEAR mt_modifications.
    CLEAR mt_query_select_parameters.
    CLEAR mv_query_key.
    CLEAR mo_modify_change.
    CLEAR mr_t_query_result_data.
    CLEAR mt_query_result_key.
    CLEAR mr_s_action_parameters.
    CLEAR mv_action_key.
    CLEAR mt_action_key.
    CLEAR mo_action_message.
    CLEAR mo_action_change.

  ENDMETHOD.


  METHOD set_action_change.

    mo_action_change = io_change.

  ENDMETHOD.


  METHOD set_modify_change.

    mo_modify_change = io_change.

  ENDMETHOD.
ENDCLASS.