CLASS ltc DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    CLASS-METHODS class_setup.

    METHODS create_root FOR TESTING RAISING cx_static_check.
    METHODS deep_create FOR TESTING RAISING cx_static_check.
    METHODS deep_create_wrong_order FOR TESTING RAISING cx_static_check.

    METHODS get_sadl_batch RETURNING VALUE(ro_sadl_batch) TYPE REF TO if_sadl_batch
                           RAISING   cx_static_check.

    CLASS-DATA gv_timestamp TYPE timestamp.

    CONSTANTS gc_uuid TYPE if_sadl_types=>ty_uuid VALUE 'cl_sadl_batch_deep_create'.

    TYPES: BEGIN OF ty_root,
             my_id TYPE sadl_rs_so_root-id,
           END OF ty_root.

    TYPES: BEGIN OF ty_item,
             item_id TYPE sadl_rs_so_items-id,
           END OF ty_item.
ENDCLASS.

CLASS ltc IMPLEMENTATION.

  METHOD class_setup.
    GET TIME STAMP FIELD gv_timestamp.
    cl_sadl_entity_provider_srs=>_create_test_data( ).
  ENDMETHOD.

  METHOD create_root.
    DATA(lo_batch) = get_sadl_batch( ).
    DATA(ls_root) = VALUE ty_root( ).

    DATA(ls_create_root) = VALUE if_sadl_batch=>ty_create( entity_id = gc_uuid && '~' && 'ROOT'
                                                           rs_entity_data = REF #( ls_root ) ).
    lo_batch->modify( EXPORTING it_create = VALUE if_sadl_batch=>tt_create( ( ls_create_root ) )
                      IMPORTING ev_failed = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_false( lv_failed ).
    cl_abap_unit_assert=>assert_not_initial( ls_root-my_id ).
  ENDMETHOD.

  METHOD get_sadl_batch.
    DATA(lv_sadl_xml) = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl"  >| &
    |  <sadl:dataSource binding="SalesOrder~Root" name="DS" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="DS" maxEditMode="RO" name="ROOT">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_ID" isKey="TRUE"/>| &
    |    <sadl:structure binding="ass:Items" maxEditMode="RO" name="ITEM">| &
    |      <sadl:attribute binding="IDENTIFIER" name="ITEM_ID" isKey="TRUE"/>| &
    |    </sadl:structure>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##no_text.

    DATA(lo_mp) = cl_sadl_mp_factory=>create_mp_entity_xml( iv_uuid      = gc_uuid
                                                            iv_timestamp = gv_timestamp
                                                            iv_sadl_xml  = lv_sadl_xml ).
    DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_mp( lo_mp ).
    DATA(lo_sadl_api) = cl_sadl_entity_int_api_factory=>create( lo_mdp ).
    ro_sadl_batch = NEW cl_sadl_batch_runtime( lo_sadl_api ).
    cl_abap_unit_assert=>assert_bound( ro_sadl_batch ).
  ENDMETHOD.

  METHOD deep_create.
    DATA(lo_batch) = get_sadl_batch( ).
    DATA(ls_root) = VALUE ty_root( ).
    DATA(ls_item) = VALUE ty_item( ).

    DATA(ls_create_root) = VALUE if_sadl_batch=>ty_create( entity_id      = gc_uuid && '~' && 'ROOT'
                                                           rs_entity_data = REF #( ls_root ) ).
    DATA(ls_create_item) = VALUE if_sadl_batch=>ty_create( entity_id               = gc_uuid && '~' && 'ITEM'
                                                           rs_entity_data          = REF #( ls_item )
                                                           source-association_name = 'ITEM'
                                                           source-entity_id        = gc_uuid && '~' && 'ROOT'
                                                           source-tabix            = 1 ).
    lo_batch->modify( EXPORTING it_create = VALUE if_sadl_batch=>tt_create( ( ls_create_root ) ( ls_create_item ) )
                      IMPORTING ev_failed = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_false( act = lv_failed ).
    cl_abap_unit_assert=>assert_not_initial( ls_root-my_id ).
    cl_abap_unit_assert=>assert_not_initial( ls_item-item_id ).
  ENDMETHOD.

  METHOD deep_create_wrong_order.
    DATA(lo_batch) = get_sadl_batch( ).
    DATA(ls_root) = VALUE ty_root( ).
    DATA(ls_item) = VALUE ty_item( ).

    DATA(ls_create_root) = VALUE if_sadl_batch=>ty_create( entity_id      = gc_uuid && '~' && 'ROOT'
                                                           rs_entity_data = REF #( ls_root ) ).
    DATA(ls_create_item) = VALUE if_sadl_batch=>ty_create( entity_id               = gc_uuid && '~' && 'ITEM'
                                                           rs_entity_data          = REF #( ls_item )
                                                           source-association_name = 'ITEM'
                                                           source-entity_id        = gc_uuid && '~' && 'ROOT'
                                                           source-tabix            = 1 ).
    lo_batch->modify( EXPORTING it_create = VALUE if_sadl_batch=>tt_create( ( ls_create_item ) ( ls_create_root ) )
                      IMPORTING ev_failed = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( act = lv_failed ).
  ENDMETHOD.

ENDCLASS.
