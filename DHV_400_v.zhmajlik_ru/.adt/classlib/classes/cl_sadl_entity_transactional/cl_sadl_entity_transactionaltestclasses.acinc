CLASS ltd_delegation DEFINITION DEFERRED.
CLASS ltd_no_redefinition DEFINITION DEFERRED.

CLASS ltc_no_redefinition DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PRIVATE SECTION.
    METHODS neg_execute                FOR TESTING RAISING cx_static_check.
    METHODS neg_action_properties      FOR TESTING RAISING cx_static_check.
    METHODS neg_element_properties     FOR TESTING RAISING cx_static_check.
    METHODS neg_entity_properties      FOR TESTING RAISING cx_static_check.
    METHODS setup  RAISING cx_static_check.
    DATA mo_runtime TYPE REF TO ltd_no_redefinition.
ENDCLASS.

CLASS ltd_no_redefinition DEFINITION FINAL FOR TESTING
  INHERITING FROM cl_sadl_entity_transactional.
  PROTECTED SECTION.
    METHODS _create                     REDEFINITION.
    METHODS _create_by_association      REDEFINITION.
    METHODS _update                     REDEFINITION.
    METHODS _delete                     REDEFINITION.
    METHODS _read_keys_by_association   REDEFINITION.
    METHODS _read_by_association        REDEFINITION.
    METHODS _read                       REDEFINITION.
ENDCLASS.

CLASS ltd_no_redefinition IMPLEMENTATION.
  METHOD _create. CLEAR et_failed. ENDMETHOD.
  METHOD _create_by_association. CLEAR: ev_source_failed, et_target_failed. ENDMETHOD.
  METHOD _update. CLEAR et_failed. ENDMETHOD.
  METHOD _delete. CLEAR et_failed . ENDMETHOD.
  METHOD _read_keys_by_association. CLEAR: et_target_key_values, et_links, et_source_failed . ENDMETHOD.
  METHOD _read_by_association. CLEAR: et_target_entity_data, et_links, et_source_failed . ENDMETHOD.
  METHOD _read. CLEAR: et_entity_data, et_failed. ENDMETHOD.
ENDCLASS.

CLASS ltc_no_redefinition IMPLEMENTATION.
  METHOD setup.
    mo_runtime = NEW ltd_no_redefinition( iv_entity_type = cl_sadl_entity_factory=>co_type-sadl_reference_scenario
                                          iv_entity_id   = cl_sadl_entity_provider_srs=>co_entity_id-so_root ).
  ENDMETHOD.

  METHOD neg_execute.
    DATA lt_key_values TYPE STANDARD TABLE OF sadl_rs_so_root.
    TRY.
        mo_runtime->if_sadl_entity_transactional~execute( iv_action_name = 'ACTION'
                                                          it_key_values  = lt_key_values ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->name  exp = '_execute' ).
    ENDTRY.
  ENDMETHOD.

  METHOD neg_action_properties.
    DATA ls_key_values TYPE sadl_rs_so_root.
    TRY.
        mo_runtime->if_sadl_entity_transactional~get_properties_action_single( iv_action_name = 'ACTION'
                                                                               is_key_values  = ls_key_values ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->name  exp = '_get_properties_action' ).
    ENDTRY.
  ENDMETHOD.

  METHOD neg_element_properties.
    DATA ls_key_values TYPE sadl_rs_so_root.
    TRY.
        mo_runtime->if_sadl_entity_transactional~get_properties_elements_single( it_requested_elements = VALUE #( )
                                                                                 is_key_values         = ls_key_values ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->name  exp = '_get_properties_elements' ).
    ENDTRY.
  ENDMETHOD.

  METHOD neg_entity_properties.
    DATA ls_key_values TYPE sadl_rs_so_root.
    TRY.
        mo_runtime->if_sadl_entity_transactional~get_properties_entity_single( is_key_values = ls_key_values ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->name  exp = '_get_properties_entity' ).
    ENDTRY.
  ENDMETHOD.

ENDCLASS.


CLASS ltc_delegation DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PRIVATE SECTION.
    DATA mo_mock  TYPE REF TO ltd_delegation.
    METHODS setup  RAISING cx_static_check.
    METHODS get_entity_structure_ref       FOR TESTING RAISING cx_static_check.
    METHODS get_entity_table_ref           FOR TESTING RAISING cx_static_check.
    METHODS get_entity_key_struct_ref      FOR TESTING RAISING cx_static_check.
    METHODS get_entity_key_table_ref       FOR TESTING RAISING cx_static_check.
    METHODS get_action_param_struct_ref    FOR TESTING RAISING cx_static_check.
    METHODS create_by_association_single   FOR TESTING RAISING cx_static_check.
    METHODS create_by_assoc_single_fail    FOR TESTING RAISING cx_static_check.
    METHODS create_single                  FOR TESTING RAISING cx_static_check.
    METHODS create_single_fail             FOR TESTING RAISING cx_static_check.
    METHODS delete_single                  FOR TESTING RAISING cx_static_check.
    METHODS delete_single_fail             FOR TESTING RAISING cx_static_check.
    METHODS update_single                  FOR TESTING RAISING cx_static_check.
    METHODS update_single_fail             FOR TESTING RAISING cx_static_check.
    METHODS read_single                    FOR TESTING RAISING cx_static_check.
    METHODS read_single_fail               FOR TESTING RAISING cx_static_check.
    METHODS execute_single                 FOR TESTING RAISING cx_static_check.
    METHODS execute_single_fail            FOR TESTING RAISING cx_static_check.
    METHODS action_properties_single       FOR TESTING RAISING cx_static_check.
    METHODS action_properties_single_fail  FOR TESTING RAISING cx_static_check.
    METHODS association_properties_single  FOR TESTING RAISING cx_static_check.
    METHODS assoc_properties_single_fail   FOR TESTING RAISING cx_static_check.
    METHODS elements_properties_single     FOR TESTING RAISING cx_static_check.
    METHODS elem_properties_single_fail    FOR TESTING RAISING cx_static_check.
    METHODS entity_properties_single       FOR TESTING RAISING cx_static_check.
    METHODS entity_properties_single_fail  FOR TESTING RAISING cx_static_check.
    METHODS read_key_by_association_single FOR TESTING RAISING cx_static_check.
    METHODS read_key_by_assoc_single_fail  FOR TESTING RAISING cx_static_check.
    METHODS read_by_association_single     FOR TESTING RAISING cx_static_check.
    METHODS read_by_assoc_single_fail      FOR TESTING RAISING cx_static_check.
    DATA co_key TYPE cl_sadl_entity_provider_srs=>ty_key_type. "VALUE cl_sadl_entity_provider_srs=>ty_key_type( identifier = '1' )
ENDCLASS.


CLASS ltd_delegation DEFINITION FINAL FOR TESTING
  INHERITING FROM td_sadl_entity_transactional
  FRIENDS ltc_delegation.
ENDCLASS.

CLASS ltc_delegation IMPLEMENTATION.

  METHOD setup.
    mo_mock = NEW ltd_delegation( iv_entity_type = cl_sadl_entity_factory=>co_type-sadl_reference_scenario
                                  iv_entity_id   = cl_sadl_entity_provider_srs=>co_entity_id-so_root ).
    co_key = VALUE cl_sadl_entity_provider_srs=>ty_key_type( identifier = '1' ).
  ENDMETHOD.

  METHOD get_entity_structure_ref.
    DATA(lr_data_ref) = mo_mock->if_sadl_entity_container_fctry~create_entity_structure_ref( ).
    DATA(lt_component_table) = CAST cl_abap_structdescr( cl_abap_datadescr=>describe_by_data_ref( lr_data_ref ) )->get_components( ).
    READ TABLE lt_component_table WITH KEY name = `ACTIVE_INDICATOR` TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.

  METHOD get_entity_table_ref.
    DATA(lr_data_ref) = mo_mock->if_sadl_entity_container_fctry~create_entity_table_ref( ).
    DATA(lo_tabledesc) = CAST cl_abap_tabledescr( cl_abap_datadescr=>describe_by_data_ref( lr_data_ref ) ).
    DATA(lt_component_table) = CAST cl_abap_structdescr( lo_tabledesc->get_table_line_type(  ) )->get_components( ).
    READ TABLE lt_component_table WITH KEY name = `ACTIVE_INDICATOR` TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.

  METHOD create_single.
    FIELD-SYMBOLS <t_entity_data> TYPE INDEX TABLE.
    DATA(ls_entity_data_exp) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = '1' ).
    DATA ls_entity_data_act LIKE ls_entity_data_exp.

    mo_mock->if_sadl_entity_transactional~create_single( CHANGING cs_entity_data = ls_entity_data_exp ).

    READ TABLE mo_mock->mt_create_single_calls INDEX 1 INTO DATA(lr_data_structure).

    ASSIGN lr_data_structure->* TO <t_entity_data>.
    READ TABLE <t_entity_data> INTO ls_entity_data_act INDEX 1.
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act exp = ls_entity_data_exp ).
  ENDMETHOD.

  METHOD create_single_fail.
    mo_mock->mv_fail = abap_true.
    DATA(ls_entity_data_exp) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = '1' ).
    DATA(ls_entity_data_act) = ls_entity_data_exp.

    mo_mock->if_sadl_entity_transactional~create_single(  IMPORTING ev_failed      = DATA(lv_failed)
                                                          CHANGING  cs_entity_data = ls_entity_data_act ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act exp = ls_entity_data_exp ).
  ENDMETHOD.

  METHOD update_single.
    FIELD-SYMBOLS <t_entity_data> TYPE INDEX TABLE.
    DATA(ls_entity_data_act) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = '1' ).
    DATA ls_entity_data_exp LIKE ls_entity_data_act.

    mo_mock->if_sadl_entity_transactional~update_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                   it_updated_elements     = VALUE #( ( `IDENTIFIER` ) )
                                                                   is_entity_data          = ls_entity_data_exp ).

    READ TABLE mo_mock->mt_update_single_calls INTO DATA(ls_update_single_call) INDEX 1.
    ASSIGN ls_update_single_call-entity_data->* TO <t_entity_data>.
    READ TABLE <t_entity_data> INTO ls_entity_data_act INDEX 1.

    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act exp = ls_entity_data_exp ).
  ENDMETHOD.

  METHOD update_single_fail.
    mo_mock->mv_fail = abap_true.
    DATA(ls_entity_data) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = '1' ).

    mo_mock->if_sadl_entity_transactional~update_single( EXPORTING it_updated_elements = VALUE #( ( `IDENTIFIER` ) )
                                                                   is_entity_data      = ls_entity_data
                                                         IMPORTING ev_failed           = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD delete_single.
    mo_mock->if_sadl_entity_transactional~delete_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                   is_key_values           =  co_key ).

    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_delete_multi_calls ) exp = 1 ).
    READ TABLE mo_mock->mt_delete_multi_calls INTO DATA(ls_delete_multi_call) INDEX 1.
    cl_abap_unit_assert=>assert_equals( act = ls_delete_multi_call-alternative_key_name exp = 'ALT_KEY' ).
    ASSIGN ls_delete_multi_call-entity_key_values->* TO FIELD-SYMBOL(<s_entity_data>).
    cl_abap_unit_assert=>assert_equals( exp = co_key  act = <s_entity_data> ).
  ENDMETHOD.

  METHOD delete_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~delete_single( EXPORTING is_key_values = co_key
                                                         IMPORTING ev_failed     = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD read_key_by_association_single.
    DATA lt_entity_keys_act TYPE STANDARD TABLE OF cl_sadl_entity_provider_srs=>ty_so_root_ext.
    DATA(ls_entity_keys_exp) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = '1' ).

    mo_mock->if_sadl_entity_transactional~read_key_by_association_single( EXPORTING iv_association_name            = 'SADL_ASSOC'
                                                                                    iv_source_alternative_key_name = 'SOURCE_ALT_KEY'
                                                                                    is_source_key_values           = ls_entity_keys_exp
                                                                                    iv_target_alternative_key_name = 'TARGET_ALT_KEY'
                                                                                    iv_target_edit_mode            = if_sadl_entity_transactional=>co_edit_mode-edit_exclusive
                                                                          IMPORTING et_target_key_values           = lt_entity_keys_act ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_entity_keys_act )
                                        exp = 1 ).
    READ TABLE lt_entity_keys_act INTO DATA(ls_entity_data) INDEX 1.
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data
                                        exp = ls_entity_keys_exp ).
    cl_abap_unit_assert=>assert_equals( act = mo_mock->mt_read_key_assoc_single_calls[ 1 ]-association_name
                                        exp = 'SADL_ASSOC' ).
    cl_abap_unit_assert=>assert_equals( act = mo_mock->mt_read_key_assoc_single_calls[ 1 ]-source_alternative_key_name
                                        exp = 'SOURCE_ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = mo_mock->mt_read_key_assoc_single_calls[ 1 ]-target_alternative_key_name
                                        exp = 'TARGET_ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = mo_mock->mt_read_key_assoc_single_calls[ 1 ]-target_edit_mode
                                        exp = if_sadl_entity_transactional=>co_edit_mode-edit_exclusive ).

    ASSIGN mo_mock->mt_read_key_assoc_single_calls[ 1 ]-source_key_values[ 1 ] TO FIELD-SYMBOL(<s_source_key_values>).
    cl_abap_unit_assert=>assert_equals( act = <s_source_key_values>
                                        exp = ls_entity_keys_exp ).
  ENDMETHOD.

  METHOD read_key_by_assoc_single_fail.
    mo_mock->mv_fail = abap_true.
    DATA lt_entity_data_act TYPE STANDARD TABLE OF cl_sadl_entity_provider_srs=>ty_so_root_ext.

    mo_mock->if_sadl_entity_transactional~read_key_by_association_single( EXPORTING iv_association_name  = 'ASSOC'
                                                                                    is_source_key_values = co_key
                                                                          IMPORTING ev_source_failed     = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD read_single.
    DATA ls_entity_data_act TYPE cl_sadl_entity_provider_srs=>ty_so_root_ext.
    DATA ls_entity_data_exp LIKE ls_entity_data_act.

    MOVE-CORRESPONDING co_key TO ls_entity_data_exp.

    mo_mock->if_sadl_entity_transactional~read_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                 it_requested_elements   = VALUE #( ( `IDENTIFIER` ) )
                                                                 is_key_values           = co_key
                                                                 iv_edit_mode            = if_sadl_entity_transactional=>co_edit_mode-edit
                                                       IMPORTING es_entity_data          = ls_entity_data_act
                                                                 ev_failed               = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_false( lv_failed ).
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act  exp = ls_entity_data_exp ).
    DATA(ls_read_call) = mo_mock->mt_read_multi_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_read_call-alternative_key_name  exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = lines( ls_read_call-requested_elements )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = ls_read_call-edit_mode  exp = if_sadl_entity_transactional=>co_edit_mode-edit ).
    FIELD-SYMBOLS <t_keys> TYPE INDEX TABLE.
    ASSIGN ls_read_call-key_values->* TO <t_keys>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_keys> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = ls_read_call-requested_elements[ 1 ]  exp = 'IDENTIFIER' ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_read_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]  exp = co_key ).
  ENDMETHOD.


  METHOD execute_single.
    mo_mock->if_sadl_entity_transactional~execute_single( iv_action_name          = 'ACTION'
                                                         iv_alternative_key_name = 'ALT_KEY'
                                                         is_key_values           = co_key ).
    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_action_calls )  exp = 1 ).
    DATA(ls_action_call) = mo_mock->mt_action_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_action_call-alternative_key_name
                                        exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = ls_action_call-action_name
                                        exp = 'ACTION' ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_action_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_key_values_act> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]
                                        exp = co_key ).
  ENDMETHOD.


  METHOD execute_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~execute_single( EXPORTING iv_action_name = 'ACTION'
                                                                    is_key_values  = co_key
                                                          IMPORTING ev_failed      = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.


  METHOD association_properties_single.
    mo_mock->if_sadl_entity_transactional~get_properties_assoc_single( EXPORTING iv_association_name     = 'ASSOCIATION'
                                                                                 iv_alternative_key_name = 'ALT_KEY'
                                                                                 is_key_values           = co_key
                                                                       IMPORTING es_properties           = DATA(ls_properties) ).
    cl_abap_unit_assert=>assert_not_initial( ls_properties ).
    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_assoc_prop_calls )  exp = 1 ).
    DATA(ls_association_call) = mo_mock->mt_assoc_prop_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_association_call-alternative_key_name
                                        exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = ls_association_call-association_name
                                        exp = 'ASSOCIATION' ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_association_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_key_values_act> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]
                                        exp = co_key ).
  ENDMETHOD.


  METHOD action_properties_single.
    mo_mock->if_sadl_entity_transactional~get_properties_action_single( EXPORTING iv_action_name          = 'ACTION'
                                                                                  iv_alternative_key_name = 'ALT_KEY'
                                                                                  is_key_values           = co_key
                                                                        IMPORTING es_properties           = DATA(ls_properties) ).
    cl_abap_unit_assert=>assert_not_initial( ls_properties ).
    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_action_prop_calls )  exp = 1 ).
    DATA(ls_call) = mo_mock->mt_action_prop_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_call-alternative_key_name
                                        exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = ls_call-action_name
                                        exp = 'ACTION' ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_key_values_act> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]
                                        exp = co_key ).
  ENDMETHOD.

  METHOD action_properties_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~get_properties_action_single( EXPORTING iv_action_name = 'ACTION'
                                                                                  is_key_values  = co_key
                                                                        IMPORTING ev_failed      = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD assoc_properties_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~get_properties_assoc_single( EXPORTING iv_association_name = 'ASSOCIATION'
                                                                                 is_key_values       = co_key
                                                                       IMPORTING ev_failed           = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD elements_properties_single.
    mo_mock->if_sadl_entity_transactional~get_properties_elements_single( EXPORTING it_requested_elements    = VALUE #( ( `E1` ) )
                                                                                    iv_alternative_key_name  = 'ALT_KEY'
                                                                                    is_key_values            = co_key
                                                                          IMPORTING et_properties_by_element = DATA(ls_properties) ).
    cl_abap_unit_assert=>assert_not_initial( ls_properties ).
    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_elements_prop_calls )  exp = 1 ).
    DATA(ls_call) = mo_mock->mt_elements_prop_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_call-alternative_key_name
                                        exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = ls_call-requested_elements
                                        exp = VALUE stringtab( ( `E1` ) ) ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_key_values_act> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]
                                        exp = co_key ).
  ENDMETHOD.

  METHOD elem_properties_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~get_properties_elements_single( EXPORTING it_requested_elements = VALUE #( ( `E1` ) )
                                                                                    is_key_values         = co_key
                                                                          IMPORTING ev_failed             = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD entity_properties_single.
    mo_mock->if_sadl_entity_transactional~get_properties_entity_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                                  is_key_values           = co_key
                                                                        IMPORTING es_properties           = DATA(ls_properties) ).
    cl_abap_unit_assert=>assert_not_initial( ls_properties ).
    cl_abap_unit_assert=>assert_equals( act = lines( mo_mock->mt_entity_prop_calls )  exp = 1 ).
    DATA(ls_call) = mo_mock->mt_entity_prop_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_call-alternative_key_name
                                        exp = 'ALT_KEY' ).
    FIELD-SYMBOLS <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = lines( <t_key_values_act> )  exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ]
                                        exp = co_key ).
  ENDMETHOD.

  METHOD entity_properties_single_fail.
    mo_mock->mv_fail = abap_true.
    mo_mock->if_sadl_entity_transactional~get_properties_entity_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                                  is_key_values           = co_key
                                                                        IMPORTING ev_failed               = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD read_single_fail.
    DATA(ls_entity_key_values) = VALUE cl_sadl_entity_provider_srs=>ty_so_root_ext( identifier = 2 ).
    DATA ls_entity_data TYPE cl_sadl_entity_provider_srs=>ty_so_root_ext.

    mo_mock->if_sadl_entity_transactional~read_single( EXPORTING iv_alternative_key_name = 'ALT_KEY'
                                                                 it_requested_elements   = VALUE #( ( `IDENTIFIER` ) )
                                                                 is_key_values           = ls_entity_key_values
                                                       IMPORTING es_entity_data          = ls_entity_data
                                                                 ev_failed               = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_initial( ls_entity_data ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD read_by_association_single.
    DATA lt_entity_data_act   TYPE STANDARD TABLE OF cl_sadl_entity_provider_srs=>ty_so_root_ext.

    mo_mock->if_sadl_entity_transactional~read_by_association_single( EXPORTING iv_association_name            = 'ASSOC'
                                                                                iv_source_alternative_key_name = 'ALT_KEY'
                                                                                is_source_key_values           = co_key
                                                                                it_requested_elements          = VALUE #( ( `IDENTIFIER` ) )
                                                                                iv_target_edit_mode            = if_sadl_entity_transactional=>co_edit_mode-edit
                                                                      IMPORTING et_target_entity_data          = lt_entity_data_act
                                                                                ev_source_failed               = DATA(lv_source_failed) ).

    cl_abap_unit_assert=>assert_not_initial( lt_entity_data_act ).
    cl_abap_unit_assert=>assert_false( lv_source_failed ).
    DATA(ls_call) = mo_mock->mt_rba_calls[ 1 ].
    cl_abap_unit_assert=>assert_equals( act = ls_call-target_edit_mode  exp = if_sadl_entity_transactional=>co_edit_mode-edit ).
    cl_abap_unit_assert=>assert_equals( act = ls_call-alternative_key_name exp = 'ALT_KEY' ).
    cl_abap_unit_assert=>assert_equals( act = ls_call-association_name exp = 'ASSOC' ).
    cl_abap_unit_assert=>assert_equals( act = lines( ls_call-requested_elements ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = ls_call-requested_elements[ 1 ] exp = 'IDENTIFIER' ).
    FIELD-SYMBOLS: <t_key_values_act> TYPE STANDARD TABLE.
    ASSIGN ls_call-key_values->* TO <t_key_values_act>.
    cl_abap_unit_assert=>assert_equals( act = <t_key_values_act>[ 1 ] exp = co_key ).
  ENDMETHOD.

  METHOD read_by_assoc_single_fail.
    mo_mock->mv_fail = abap_true.
    DATA lt_entity_data_act TYPE STANDARD TABLE OF cl_sadl_entity_provider_srs=>ty_so_root_ext.

    mo_mock->if_sadl_entity_transactional~read_by_association_single( EXPORTING iv_association_name    = 'ASSOC'
                                                                                is_source_key_values   = co_key
                                                                                iv_target_edit_mode    = if_sadl_entity_transactional=>co_edit_mode-edit
                                                                      IMPORTING et_target_entity_data  = lt_entity_data_act
                                                                                ev_source_failed       = DATA(lv_failed) ).
    cl_abap_unit_assert=>assert_initial( lt_entity_data_act ).
    cl_abap_unit_assert=>assert_true( lv_failed ).
  ENDMETHOD.

  METHOD create_by_association_single.
    FIELD-SYMBOLS: <t_entity_data> TYPE INDEX TABLE.
    DATA(ls_entity_data_act) = VALUE cl_sadl_entity_provider_srs=>ty_so_items_ext( identifier = '2' ).
    DATA(ls_entity_data_exp) = ls_entity_data_act.
    mo_mock->if_sadl_entity_transactional~create_by_association_single( EXPORTING iv_association_name            = 'Items'
                                                                                  iv_source_alternative_key_name = 'SOURCE_KEY'
                                                                                  is_source_key_values           = co_key
                                                                        CHANGING  cs_target_entity_data          = ls_entity_data_act ).
    READ TABLE mo_mock->mt_cba_single_calls INDEX 1 INTO DATA(ls_cba_call).
    cl_abap_unit_assert=>assert_subrc( ).
    cl_abap_unit_assert=>assert_equals( act = ls_cba_call-source_key_name exp = 'SOURCE_KEY' ).

    ASSIGN ls_cba_call-source_key_values->* TO FIELD-SYMBOL(<s_ource_key_values>).
    cl_abap_unit_assert=>assert_equals( act = <s_ource_key_values> exp = co_key ).

    ASSIGN ls_cba_call-entity_data->* TO <t_entity_data>.
    READ TABLE <t_entity_data> INTO ls_entity_data_act INDEX 1.
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act exp = ls_entity_data_exp ).
  ENDMETHOD.

  METHOD create_by_assoc_single_fail.
    mo_mock->mv_fail = abap_true.
    DATA(ls_entity_data_act) = VALUE cl_sadl_entity_provider_srs=>ty_so_items_ext( identifier = '2' ).
    DATA(ls_entity_data_exp) = ls_entity_data_act.
    mo_mock->if_sadl_entity_transactional~create_by_association_single( EXPORTING iv_association_name   = 'Items'
                                                                                  is_source_key_values  = co_key
                                                                        IMPORTING ev_source_failed      = DATA(lv_src_failed)
                                                                                  ev_target_failed      = DATA(lv_tgt_failed)
                                                                        CHANGING  cs_target_entity_data = ls_entity_data_act ).
    cl_abap_unit_assert=>assert_true( lv_src_failed ).
    cl_abap_unit_assert=>assert_true( lv_tgt_failed ).
    cl_abap_unit_assert=>assert_equals( act = ls_entity_data_act exp = ls_entity_data_exp ).
  ENDMETHOD.

  METHOD get_entity_key_table_ref.
    DATA(lr_data_ref) = mo_mock->if_sadl_entity_container_fctry~create_entity_key_table_ref( ).
    DATA(lt_component_table) = CAST cl_abap_structdescr( CAST cl_abap_tabledescr( cl_abap_datadescr=>describe_by_data_ref( lr_data_ref ) )->get_table_line_type(  ) )->get_components( ).
    READ TABLE lt_component_table WITH KEY name = `ACTIVE_INDICATOR` TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.


  METHOD get_entity_key_struct_ref.
    DATA(lr_data_ref) = mo_mock->if_sadl_entity_container_fctry~create_entity_key_struct_ref( ).
    DATA(lt_component_table) = CAST cl_abap_structdescr( cl_abap_datadescr=>describe_by_data_ref( lr_data_ref ) )->get_components( ).
    READ TABLE lt_component_table WITH KEY name = `ACTIVE_INDICATOR` TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.


  METHOD get_action_param_struct_ref.
    DATA(lr_data_ref) = mo_mock->if_sadl_entity_container_fctry~create_action_parameter_ref( iv_action_name = 'SetActiveIndicator' ).
    DATA(lt_component_table) = CAST cl_abap_structdescr( cl_abap_datadescr=>describe_by_data_ref( lr_data_ref ) )->get_components( ).
    READ TABLE lt_component_table WITH KEY name = `ACT_INDICATOR` TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.
ENDCLASS.


CLASS ltd_entity_without_row_type DEFINITION FINAL FOR TESTING INHERITING FROM cl_sadl_entity.
  PUBLIC SECTION.
    INTERFACES if_sadl_entity_provider.
    METHODS constructor.
    METHODS if_sadl_entity~get_row_type_name REDEFINITION.
    METHODS if_sadl_entity~get_db_info REDEFINITION.
    METHODS if_sadl_entity~get_elements REDEFINITION.
    METHODS if_sadl_entity~get_primary_key_elements REDEFINITION.
ENDCLASS.

CLASS ltd_entity_without_row_type IMPLEMENTATION.
  METHOD constructor.
    super->constructor( EXPORTING iv_id   = 'ID'
                                  iv_type = 'TYPE' ).
  ENDMETHOD.

  METHOD if_sadl_entity_provider~value_help.
    CLEAR rt_values.
  ENDMETHOD.

  METHOD if_sadl_entity_provider~get_description.
    CLEAR rv_description.
  ENDMETHOD.

  METHOD if_sadl_entity_provider~get_entity.
    ro_entity = me.
  ENDMETHOD.

  METHOD if_sadl_entity_provider~get_default_auth_provider.
    CLEAR ro_provider.
  ENDMETHOD.

  METHOD if_sadl_entity_provider~is_nondefault_auth_prov_allowd.
    CLEAR rv_allowed.
  ENDMETHOD.

  METHOD if_sadl_entity~get_db_info.
    CLEAR rs_db_info.
  ENDMETHOD.

  METHOD if_sadl_entity~get_row_type_name.
    CLEAR rv_row_type_name.
  ENDMETHOD.

  METHOD if_sadl_entity~get_elements.
    CLEAR et_elements.
  ENDMETHOD.

  METHOD if_sadl_entity~get_primary_key_elements.
    CLEAR et_primary_key_elements.
  ENDMETHOD.

ENDCLASS.

CLASS ltc_delegation_neg DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PRIVATE SECTION.
    DATA mo_spy  TYPE REF TO td_sadl_entity_transactional.
    METHODS setup  RAISING cx_static_check.
    METHODS get_entity_structure_ref_neg   FOR TESTING RAISING cx_static_check.
    METHODS get_entity_table_ref_neg       FOR TESTING RAISING cx_static_check.
    METHODS get_entity_key_struct_ref_neg  FOR TESTING RAISING cx_static_check.
    METHODS get_entity_key_table_ref_neg   FOR TESTING RAISING cx_static_check.
    METHODS get_action_param_struc_ref_neg   FOR TESTING RAISING cx_static_check.
    METHODS call_method_and_assert IMPORTING iv_method_name TYPE string.
ENDCLASS.

CLASS ltc_delegation_neg IMPLEMENTATION.

  METHOD setup.
    cl_sadl_aunit_friend=>inject_sadl_entity_provider( iv_entity_type           = 'WITHOUT_ROW_TYPE'
                                                       io_sadl_entity_provider  = NEW ltd_entity_without_row_type( ) ).
    mo_spy = NEW td_sadl_entity_transactional( iv_entity_type = 'WITHOUT_ROW_TYPE'
                                               iv_entity_id   = 'ID' ).
  ENDMETHOD.

  METHOD get_entity_key_table_ref_neg.
    call_method_and_assert('CREATE_ENTITY_KEY_TABLE_REF').
  ENDMETHOD.

  METHOD get_entity_key_struct_ref_neg.
    call_method_and_assert('CREATE_ENTITY_KEY_STRUCT_REF').
  ENDMETHOD.

  METHOD get_action_param_struc_ref_neg.
    TRY.
        NEW td_sadl_entity_transactional( iv_entity_type = cl_sadl_entity_provider_srs=>co_type
                                          iv_entity_id   = 'SalesOrder~Root' )->if_sadl_entity_container_fctry~create_action_parameter_ref( 'SetActive' ).
        cl_abap_unit_assert=>fail( msg = 'Exception expected' ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx_impl).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->entity_id   exp = 'SalesOrder~Root' ).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->entity_type exp = cl_sadl_entity_provider_srs=>co_type ).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->textid      exp = cx_sadl_entity_trans_impl=>no_data_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD call_method_and_assert.
    TRY.
        DATA(lv_method) = |IF_SADL_ENTITY_CONTAINER_FCTRY~{ iv_method_name }|.
        CALL METHOD mo_spy->(lv_method).
        cl_abap_unit_assert=>fail( msg = 'Exception expected' ).
      CATCH cx_sadl_entity_trans_impl INTO DATA(lx_impl).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->entity_id   exp = 'ID' ).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->entity_type exp = 'TYPE' ).
        cl_abap_unit_assert=>assert_equals( act = lx_impl->textid      exp = cx_sadl_entity_trans_impl=>no_data_type ).
    ENDTRY.
  ENDMETHOD.

  METHOD get_entity_structure_ref_neg.
    call_method_and_assert('CREATE_ENTITY_STRUCTURE_REF').
  ENDMETHOD.

  METHOD get_entity_table_ref_neg.
    call_method_and_assert('CREATE_ENTITY_TABLE_REF').
  ENDMETHOD.

ENDCLASS.
