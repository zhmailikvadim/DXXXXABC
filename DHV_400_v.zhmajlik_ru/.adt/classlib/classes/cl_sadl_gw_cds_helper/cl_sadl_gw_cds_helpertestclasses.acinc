CLASS ltd_cds_parser DEFINITION FOR TESTING.
  PUBLIC SECTION.
    METHODS constructor IMPORTING iv_cds_view_name TYPE string.
    INTERFACES if_sadl_gw_cds_parser PARTIALLY IMPLEMENTED.

  PROTECTED SECTION.
    DATA: mv_cds_view_name TYPE string.
ENDCLASS.

CLASS ltd_cds_parser IMPLEMENTATION.
  METHOD constructor.
    me->mv_cds_view_name = iv_cds_view_name.
  ENDMETHOD.

  METHOD if_sadl_gw_cds_parser~get_associations.
    DATA(lo_association) = CAST if_sadl_gw_cds_parser_assoc( cl_abap_testdouble=>create( 'IF_SADL_GW_CDS_PARSER_ASSOC' ) ).

    rt_associations = VALUE #(
      ( alias = '_ROOT'   content = lo_association )
      ( alias = '_ITEM1'  content = lo_association )
      ( alias = '_ITEM2'  content = lo_association )
      ( alias = '_LEAF'   content = lo_association )
    ).
  ENDMETHOD.

  METHOD if_sadl_gw_cds_parser~get_datasource.
    ASSERT me->mv_cds_view_name(1) = 'C'.
    rs_datasource-name = 'I' && me->mv_cds_view_name+1.
  ENDMETHOD.

  METHOD if_sadl_gw_cds_parser~get_composition_root.
    DATA(lv_root_view) = me->mv_cds_view_name(2) && 'AUNIT_ROOT'.
    ro_composition_root = NEW ltd_cds_parser( lv_root_view ).
  ENDMETHOD.

  METHOD if_sadl_gw_cds_annotatable~get_annotation.
    ro_annotation ?= cl_abap_testdouble=>create( 'IF_SADL_GW_CDS_PARSER_ANNO' ).

    cl_abap_testdouble=>configure_call( ro_annotation )->ignore_all_parameters( )->returning( abap_true ).
    ro_annotation->is_truthy( ).
  ENDMETHOD.
ENDCLASS.


CLASS ltd_cds_composition DEFINITION FOR TESTING.
  PUBLIC SECTION.
    INTERFACES:
      if_sadl_gw_cds_composition PARTIALLY IMPLEMENTED,
      if_sadl_gw_cds_factory PARTIALLY IMPLEMENTED.
ENDCLASS.

CLASS ltd_cds_composition IMPLEMENTATION.
  METHOD if_sadl_gw_cds_factory~get_parser.
    ro_cds_parser = NEW ltd_cds_parser( iv_cds_view ).
  ENDMETHOD.

  METHOD if_sadl_gw_cds_composition~get_composition.
    DATA(lv_prefix) = iv_cds_view(2).
    rt_composition = VALUE #(
      ( cds_view = lv_prefix && 'AUNIT_ROOT' )

      association_to_root   = '_ROOT'
      association_to_parent = '_ROOT'
      parent_cds_view       = lv_prefix && 'AUNIT_ROOT'
      ( cds_view = lv_prefix && 'AUNIT_ITEM1'  association_from_parent = '_ITEM1' )
      ( cds_view = lv_prefix && 'AUNIT_ITEM2'  association_from_parent = '_ITEM2' )

      association_to_parent = '_ITEM1'
      parent_cds_view       = lv_prefix && 'AUNIT_ITEM1'
      ( cds_view = lv_prefix && 'AUNIT_LEAF'  association_from_parent = '_LEAF' )
    ).
  ENDMETHOD.
ENDCLASS.


CLASS ltc_cds_helper DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PUBLIC SECTION.
    METHODS check_consumption_composition FOR TESTING RAISING cx_static_check.
    METHODS is_xyz_view FOR TESTING RAISING cx_static_check.

  PRIVATE SECTION.
    METHODS setup RAISING cx_static_check.
    DATA: mo_helper TYPE REF TO cl_sadl_gw_cds_helper.
ENDCLASS.

CLASS cl_sadl_gw_cds_helper DEFINITION LOCAL FRIENDS ltc_cds_helper.

CLASS ltc_cds_helper IMPLEMENTATION.
  METHOD setup.
    DATA(lo_double) = NEW ltd_cds_composition( ).
    me->mo_helper = NEW cl_sadl_gw_cds_helper( ).
    me->mo_helper->mo_cds_composition = lo_double.
    me->mo_helper->mo_cds_factory     = lo_double.
  ENDMETHOD.

  METHOD check_consumption_composition.
    TRY.
        me->mo_helper->check_consumption_composition( 'C_AUNIT_ROOT' ).

      CATCH cx_sadl_gen_drft_generator INTO DATA(lx_exception).
        cl_aunit_assert=>fail(
          msg = 'Unexpected exception raised'
          detail = lx_exception->get_text( )
        ).
    ENDTRY.
  ENDMETHOD.

  METHOD is_xyz_view.
    DATA(lo_parser) = NEW ltd_cds_parser( 'MyTestView' ).
    cl_abap_unit_assert=>assert_true( me->mo_helper->is_consumption_view( lo_parser )  ).
    cl_abap_unit_assert=>assert_true( me->mo_helper->is_bo_view( lo_parser )  ).
    cl_abap_unit_assert=>assert_true( me->mo_helper->is_draft_enabled( lo_parser )  ).
  ENDMETHOD.
ENDCLASS.
