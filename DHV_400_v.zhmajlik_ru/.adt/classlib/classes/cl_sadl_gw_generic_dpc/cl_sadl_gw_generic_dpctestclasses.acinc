CLASS lth_dpc DEFINITION FOR TESTING
  INHERITING FROM cl_sadl_gw_generic_dpc
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS constructor IMPORTING iv_sadl_uuid      TYPE if_sadl_types=>ty_uuid
                                  iv_sadl_timestamp TYPE if_sadl_types=>ty_timestamp
                                  iv_sadl_xml       TYPE string
                        RAISING   /iwbep/cx_mgw_tech_exception .

    METHODS set_entity_set_type_map IMPORTING it_entity_set_type_map TYPE if_sadl_gw_types_int=>tt_entity_set_type_map.


  PROTECTED SECTION.
    METHODS get_sadl_xml REDEFINITION.
    METHODS get_sadl_metadata REDEFINITION.

    DATA mv_sadl_uuid      TYPE if_sadl_types=>ty_uuid.
    DATA mv_sadl_timestamp TYPE if_sadl_types=>ty_timestamp.
    DATA mv_sadl_xml       TYPE string.
ENDCLASS.

CLASS cl_sadl_gw_generic_dpc DEFINITION LOCAL FRIENDS lth_dpc.

CLASS lth_dpc IMPLEMENTATION.
  METHOD get_sadl_xml.
    ev_sadl_xml = mv_sadl_xml.
  ENDMETHOD.

  METHOD get_sadl_metadata.
    ev_uuid = mv_sadl_uuid.
    ev_timestamp = mv_sadl_timestamp.
  ENDMETHOD.

  METHOD constructor.
    super->constructor( ).
    mv_sadl_uuid = iv_sadl_uuid.
    mv_sadl_timestamp = iv_sadl_timestamp.
    mv_sadl_xml = iv_sadl_xml.

  ENDMETHOD.

  METHOD set_entity_set_type_map.
    CAST cl_sadl_gw_generic_dpc( me )->mt_entity_set_type_map = it_entity_set_type_map.
  ENDMETHOD.
ENDCLASS.

CLASS ltc_sadl_binding DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS sadl_binding FOR TESTING RAISING cx_static_check.
ENDCLASS.

CLASS ltc_sadl_binding IMPLEMENTATION.

  METHOD sadl_binding.

    GET TIME STAMP FIELD DATA(lv_timestamp).
    DATA(lo_sadl_binding_eng) = NEW lth_dpc( iv_sadl_uuid = 'SADL_V_BINDING_ENG'
                                             iv_sadl_timestamp = lv_timestamp
                                             iv_sadl_xml       =
    |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SalesOrder~Root" name="DSR" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="SalesOrder~Items" name="DSI" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="SalesOrder~ScheduleLine" name="DSS" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="BusinessPartner~Root" name="DSB" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="DSR" maxEditMode="RO" name="OVERVIEW" exposure = "TRUE">| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSI" maxEditMode="RO" name="SUBNODE" >| &
    |       <sadl:attribute binding="IDENTIFIER"  name="ID" />| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSS" maxEditMode="RO" name="SUBSUBNODE" >| &
    |       <sadl:attribute binding="IDENTIFIER"  name="ID" />| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSB" maxEditMode="RO" name="BUYER"  >| &
    |       <sadl:attribute binding="IDENTIFIER"  name="ID" />| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ) ##string_ok.

    lo_sadl_binding_eng->if_sadl_gw_sadl_binding~get_sadl_binding( IMPORTING es_sadl_binding = DATA(ls_sadl_binding) ).
    cl_abap_unit_assert=>assert_equals( exp = VALUE if_sadl_gw_sadl_binding=>tt_entity_sets(
                                                ( entity_set = 'OVERVIEW'    binding_name = 'SalesOrder~Root'          binding_type = 'SADL_REFERENCE_SCENARIO'
                                                                             exposure = abap_true     entity_type_for_exposure = 'SalesOrder_RootType' )
                                                ( entity_set = 'SUBNODE'     binding_name = 'SalesOrder~Items'         binding_type = 'SADL_REFERENCE_SCENARIO'
                                                                             sadl_attributes = VALUE #( ( name = 'ID' binding = 'IDENTIFIER' ) ) )
                                                ( entity_set = 'SUBSUBNODE'  binding_name = 'SalesOrder~ScheduleLine'  binding_type = 'SADL_REFERENCE_SCENARIO'
                                                                             sadl_attributes = VALUE #( ( name = 'ID' binding = 'IDENTIFIER' ) ) )
                                                ( entity_set = 'BUYER'       binding_name = 'BusinessPartner~Root'     binding_type = 'SADL_REFERENCE_SCENARIO'
                                                                             sadl_attributes = VALUE #( ( name = 'ID' binding = 'IDENTIFIER' ) ) ) )
                                        act = ls_sadl_binding-entity_sets ).
  ENDMETHOD.

ENDCLASS.

CLASS lth_my_dpc DEFINITION INHERITING FROM cl_sadl_gw_generic_dpc FOR TESTING.
  PUBLIC SECTION.
    CLASS-METHODS class_constructor.
    METHODS _get_timestamp RETURNING VALUE(rv_timestamp) TYPE timestamp RAISING cx_static_check.
    METHODS _get_uuid      RETURNING VALUE(rv_uuid) TYPE if_sadl_types=>ty_uuid RAISING cx_static_check.
    CONSTANTS co_sadl_uuid TYPE if_sadl_types=>ty_uuid VALUE 'BSA_LTC_GENERIC_DPC'.
    CONSTANTS co_overview TYPE string VALUE `OVERVIEW`.
    CONSTANTS co_overview_et TYPE string VALUE `OverviewET`.
    CONSTANTS co_subnode TYPE string VALUE `SUBNODE`.
    CONSTANTS co_subnode_et TYPE string VALUE `SubnodeET`.
  PROTECTED SECTION.
    CLASS-DATA gv_timestamp TYPE if_sadl_types=>ty_timestamp.
    METHODS get_sadl_metadata   REDEFINITION.
    METHODS get_sadl_xml REDEFINITION.
  PRIVATE SECTION.
ENDCLASS.

CLASS cl_sadl_gw_generic_dpc DEFINITION LOCAL FRIENDS lth_my_dpc.

CLASS lth_my_dpc IMPLEMENTATION.

  METHOD class_constructor.
    GET TIME STAMP FIELD gv_timestamp.
  ENDMETHOD.

  METHOD get_sadl_xml.
    ev_sadl_xml = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SalesOrder~Root" name="DSR" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="SalesOrder~Items" name="DSI" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="SalesOrder~ScheduleLine" name="DSS" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="BusinessPartner~Root" name="DSB" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="DSR" maxEditMode="RO" name="OVERVIEW">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="SELLER_IDENTIFIER" name="MY_SELLER_ID"/>| &
    |      <sadl:attribute binding="BUYER_IDENTIFIER" name="MY_BUYER_ID"/>| &
    |      <sadl:attribute binding="ACTIVE_INDICATOR" name="MY_ACT_INDICATOR"/>| &
    |      <sadl:attribute binding="TC" name="MY_TYPE_CODE"/>| &
    |      <sadl:query name="SelectAll">| &
*    |        <sadl:inputStructure>| &
*    |          <sadl:inputParameter name="SEARCH_TEXT" type="SEARCH_TEXT">| &
*    |            <sadl:attribute binding="MY_IDENTIFIER"/>| &
*    |            <sadl:attribute binding="MY_SELLER_ID"/>| &
*    |            <sadl:attribute binding="MY_BUYER_ID"/>| &
*    |            <sadl:attribute binding="MY_ACT_INDICATOR"/>| &
*    |            <sadl:attribute binding="MY_TYPE_CODE"/>| &
*    |          </sadl:inputParameter>| &
*    |        </sadl:inputStructure>| &
    |      </sadl:query>| &
    |      <sadl:association binding="ass:Items" target="SUBNODE" name="SUBNODE"/>| &
    |      <sadl:association binding="ass:Buyer" target="BUYER" name="BUYER"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSI" maxEditMode="RO" name="SUBNODE">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="PARENT_IDENTIFIER" name="MY_PARENT_IDENTIFIER"/>| &
    |      <sadl:attribute binding="PRODUCT_IDENTIFIER" name="MY_PRODUCT_ID"/>| &
    |      <sadl:attribute binding="TC" name="MY_TYPE_CODE"/>| &
    |      <sadl:query name="SelectAll"/>| &
    |      <sadl:association binding="ass:ScheduleLine" target="SUBSUBNODE" name="SUBSUBNODE"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSS" maxEditMode="RO" name="SUBSUBNODE">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="PARENT_IDENTIFIER" name="MY_PARENT_IDENTIFIER"/>| &
    |      <sadl:attribute binding="TC" name="MY_TYPE_CODE"/>| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSB" maxEditMode="RO" name="BUYER">| &
    |      <sadl:attribute binding="IDENTIFIER" name="BP_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="TYPE_CODE" name="BP_TYPE_CODE"/>| &
    |      <sadl:query name="SelectAll"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
  ENDMETHOD.


  METHOD get_sadl_metadata.
    ev_timestamp = gv_timestamp.
    ev_uuid = co_sadl_uuid.
  ENDMETHOD.


  METHOD _get_timestamp.
    get_sadl_metadata( IMPORTING ev_timestamp = rv_timestamp ).
  ENDMETHOD.


  METHOD _get_uuid.
    get_sadl_metadata( IMPORTING ev_uuid = rv_uuid ).
  ENDMETHOD.
ENDCLASS.


CLASS lth_my_trans_dpc DEFINITION INHERITING FROM lth_my_dpc FOR TESTING FINAL.
  PUBLIC SECTION.
    METHODS constructor RAISING /iwbep/cx_mgw_tech_exception.

  PROTECTED SECTION.
    METHODS get_sadl_metadata   REDEFINITION.
    METHODS get_sadl_xml REDEFINITION.

ENDCLASS.

CLASS lth_my_trans_dpc IMPLEMENTATION.
  METHOD constructor.
    super->constructor( ).

    mo_model = NEW td_sadl_gw_runtime_model(
       it_actions       = VALUE #( ( name = 'SetActIndicator'  multiplicity = /iwbep/if_mgw_med_odata_types=>gcs_cardinality-cardinality_0_n
                                     parameters = VALUE #( ( name = 'MY_IDENTIFIER' ) ) ) )
       it_esets         = VALUE #( ( name = 'Overview'  tech_name = 'OVERVIEW' )
                                   ( name = 'Subnode'  tech_name = 'SUBNODE' ) )
       it_entity_types  = VALUE #( ( name = 'OverviewET'  set_names = VALUE #( ( 'Overview' ) ) properties = VALUE #( ( name = 'MY_IDENTIFIER' is_key = abap_true )
                                                                                                                      ( name = 'MY_SELLER_ID' )
                                                                                                                      ( name = 'MY_BUYER_ID' )
                                                                                                                      ( name = 'MY_TYPE_CODE' )
                                                                                                                      ( name = 'MY_ACT_INDICATOR'  is_read_only = abap_true ) ) )
                                   ( name = 'SubnodeET'  set_names = VALUE #( ( 'Subnode' ) ) properties = VALUE #( ( name = 'MY_IDENTIFIER' is_key = abap_true  )
                                                                                                                    ( name = 'MY_PARENT_IDENTIFIER' )
                                                                                                                    ( name = 'MY_TYPE_CODE' )
                                                                                                                    ( name = 'MY_PRODUCT_ID' ) ) )
                                 ) ).
  ENDMETHOD.

  METHOD get_sadl_xml.
    ev_sadl_xml = |<?xml version="1.0" encoding="utf-8"?>| &
    |<sadl:definition xmlns:sadl="http://sap.com/sap.nw.f.sadl" xmlns="http://sap.com/sap.nw.f.sadl/attribute" syntaxVersion="V2">| &
    |  <sadl:dataSource binding="SalesOrder~Root" name="DSR" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:dataSource binding="SalesOrder~Items" name="DSI" type="SADL_REFERENCE_SCENARIO"/>| &
    |  <sadl:resultSet>| &
    |    <sadl:structure dataSource="DSR" maxEditMode="RO" name="OVERVIEW">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="SELLER_IDENTIFIER" name="MY_SELLER_ID"/>| &
    |      <sadl:attribute binding="BUYER_IDENTIFIER" name="MY_BUYER_ID"/>| &
    |      <sadl:attribute binding="ACTIVE_INDICATOR" name="MY_ACT_INDICATOR"/>| &
    |      <sadl:attribute binding="TC" name="MY_TYPE_CODE"/>| &
    |      <sadl:association binding="ass:Items" target="SUBNODE" name="SUBNODE"/>| &
    |      <sadl:action name="SetActIndicator"   binding="SetActiveIndicator" />| &
    |    </sadl:structure>| &
    |    <sadl:structure dataSource="DSI" maxEditMode="RO" name="SUBNODE">| &
    |      <sadl:attribute binding="IDENTIFIER" name="MY_IDENTIFIER" isKey='TRUE'/>| &
    |      <sadl:attribute binding="PARENT_IDENTIFIER" name="MY_PARENT_IDENTIFIER"/>| &
    |      <sadl:attribute binding="PRODUCT_IDENTIFIER" name="MY_PRODUCT_ID"/>| &
    |      <sadl:attribute binding="TC" name="MY_TYPE_CODE"/>| &
    |    </sadl:structure>| &
    |  </sadl:resultSet>| &
    |</sadl:definition>| ##string_ok.
  ENDMETHOD.


  METHOD get_sadl_metadata.
    ev_timestamp = gv_timestamp.
    ev_uuid = 'MY_TRANS_DPC'.
  ENDMETHOD.
ENDCLASS.


CLASS lth_consump_info_fetch_only DEFINITION INHERITING FROM cl_sadl_entity_consump_info
  FOR TESTING
  FINAL.

  PUBLIC SECTION.
    METHODS if_sadl_entity_consump_info~get_consumption_information REDEFINITION.
ENDCLASS.


CLASS lth_consump_info_fetch_only IMPLEMENTATION.
  METHOD if_sadl_entity_consump_info~get_consumption_information.
    rs_consumption_information = super->if_sadl_entity_consump_info~get_consumption_information( ).
    rs_consumption_information-transactional-allowed = abap_false.
  ENDMETHOD.
ENDCLASS.


CLASS lth_consump_info_trans_only DEFINITION INHERITING FROM cl_sadl_entity_consump_info
  FOR TESTING
  FINAL.

  PUBLIC SECTION.
    METHODS if_sadl_entity_consump_info~get_consumption_information REDEFINITION.
ENDCLASS.


CLASS lth_consump_info_trans_only IMPLEMENTATION.
  METHOD if_sadl_entity_consump_info~get_consumption_information.
    rs_consumption_information = super->if_sadl_entity_consump_info~get_consumption_information( ).
    rs_consumption_information-transactional-allowed = abap_true.
    rs_consumption_information-sadl_query-allowed = abap_false.
  ENDMETHOD.
ENDCLASS.


CLASS ltc_base DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PROTECTED SECTION.
    DATA mo_dpc TYPE REF TO cl_sadl_gw_generic_dpc.

    TYPES: BEGIN OF ty_sadl_type,
             my_identifier    TYPE sadl_rs_so_root-id,
             my_seller_id     TYPE sadl_rs_so_root-seller_id,
             my_buyer_id      TYPE sadl_rs_so_root-buyer_id,
             my_product       TYPE sadl_rs_so_items-prod_id_content_char,
             my_act_indicator TYPE sadl_rs_so_root-act_indicator,
             my_type_code     TYPE sadl_rs_so_root-type_code,
           END OF ty_sadl_type,
           tt_sadl_type TYPE STANDARD TABLE OF ty_sadl_type WITH DEFAULT KEY.

    METHODS _get_entityset IMPORTING iv_entity_set TYPE string
                           EXPORTING et_data       TYPE tt_sadl_type
                           RAISING   cx_static_check.
    METHODS _get_entityset_by_ref
      IMPORTING is_paging                TYPE td_sadl_gw_request_entset=>ty_paging OPTIONAL
                it_orderby               TYPE /iwbep/t_mgw_tech_order OPTIONAL
                it_select                TYPE /iwbep/t_mgw_tech_field_names OPTIONAL
                it_select_options        TYPE /iwbep/t_mgw_select_option OPTIONAL
                iv_search_string         TYPE string OPTIONAL
                iv_has_count             TYPE abap_bool OPTIONAL
                iv_has_inline_count      TYPE abap_bool OPTIONAL
                it_navigation_path       TYPE /iwbep/t_mgw_tech_navi OPTIONAL
                it_source_keys           TYPE /iwbep/t_mgw_tech_pairs OPTIONAL
                it_converted_source_keys TYPE /iwbep/t_mgw_tech_pairs OPTIONAL
                iv_entity_set            TYPE string DEFAULT lth_my_dpc=>co_overview
                iv_source_entity_set     TYPE string DEFAULT lth_my_dpc=>co_overview
      EXPORTING er_data                  TYPE REF TO data
      RAISING   cx_static_check.
    METHODS _get_keys IMPORTING iv_entity_set  TYPE string
                                is_entity      TYPE any
                      RETURNING VALUE(rt_keys) TYPE /iwbep/t_mgw_tech_pairs
                      RAISING   cx_static_check.
    METHODS _get_unconverted_keys IMPORTING iv_entity_set  TYPE string
                                  RETURNING VALUE(rt_keys) TYPE /iwbep/t_mgw_tech_pairs
                                  RAISING   cx_static_check.
    METHODS _get_existing_entity RETURNING VALUE(rs_data_exp) TYPE ty_sadl_type
                                 RAISING   cx_static_check.
    METHODS _get_key_elements IMPORTING iv_entity_set  TYPE string
                              RETURNING VALUE(rt_keys) TYPE stringtab
                              RAISING   cx_static_check.
    METHODS _create_entity IMPORTING io_data_provider        TYPE REF TO /iwbep/if_mgw_entry_provider
                                     io_tech_request_context TYPE REF TO /iwbep/if_mgw_req_entity_c
                           EXPORTING er_entity               TYPE REF TO data
                           RAISING   /iwbep/cx_mgw_busi_exception /iwbep/cx_mgw_tech_exception.

    METHODS _update_entity IMPORTING io_data_provider        TYPE REF TO /iwbep/if_mgw_entry_provider
                                     io_tech_request_context TYPE REF TO /iwbep/if_mgw_req_entity_u
                           EXPORTING er_entity               TYPE REF TO data
                           RAISING   /iwbep/cx_mgw_busi_exception /iwbep/cx_mgw_tech_exception.

  PRIVATE SECTION.
    METHODS setup RAISING cx_static_check.
ENDCLASS.

CLASS cl_sadl_gw_generic_dpc DEFINITION LOCAL FRIENDS ltc_base.

CLASS ltc_base IMPLEMENTATION.

  METHOD setup.
    mo_dpc = NEW lth_my_dpc( ).
  ENDMETHOD.


  METHOD _get_entityset_by_ref.
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entityset( EXPORTING iv_entity_name           = VALUE #( )
                                                                    iv_entity_set_name       = VALUE #( )
                                                                    iv_source_name           = VALUE #( )
                                                                    it_filter_select_options = VALUE #( )    " table of select options
                                                                    it_order                 = VALUE #( )    " the sorting order
                                                                    is_paging                = VALUE #( )    " paging structure
                                                                    it_navigation_path       = VALUE #( )
                                                                    it_key_tab               = VALUE #( )    " table for name value pairs
                                                                    iv_filter_string         = VALUE #( )    " the filter as a string containing ANDs and ORs etc
                                                                    iv_search_string         = VALUE #( )
                                                                    io_tech_request_context  = NEW td_sadl_gw_request_entset( iv_entity_set_name        = iv_entity_set
                                                                                                                              iv_source_entity_set_name = iv_source_entity_set
                                                                                                                              is_paging                 = is_paging
                                                                                                                              it_orderby                = it_orderby
                                                                                                                              it_select                 = it_select
                                                                                                                              it_select_options         = it_select_options
                                                                                                                              iv_search_string          = iv_search_string
                                                                                                                              iv_has_count              = iv_has_count
                                                                                                                              it_navigation_path        = it_navigation_path
                                                                                                                              it_source_keys            = it_source_keys
                                                                                                                              it_converted_source_keys  = it_converted_source_keys
                                                                                                                              iv_has_inline_count       = iv_has_inline_count )
                                                           IMPORTING er_entityset             = er_data ).
  ENDMETHOD.


  METHOD _get_entityset.
    CLEAR et_data.
    _get_entityset_by_ref( EXPORTING iv_entity_set = iv_entity_set
                           IMPORTING er_data       = DATA(lr_data) ).
    ASSIGN lr_data->* TO FIELD-SYMBOL(<t_data>).
    MOVE-CORRESPONDING <t_data> TO et_data.
  ENDMETHOD.


  METHOD _get_existing_entity.
    cl_sadl_entity_provider_srs=>get_test_data( IMPORTING et_so_root = DATA(lt_so_root) ).
    LOOP AT lt_so_root INTO DATA(ls_so_root).

      TRY.
          DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( it_keys        = VALUE #( ( name = 'MY_IDENTIFIER' value = ls_so_root-id ) )
                                                                  iv_entity_type = 'MyEntityType'
                                                                  iv_entity_set  = lth_my_dpc=>co_overview ).
          mo_dpc->if_sadl_gw_dpc~get_entity( EXPORTING io_tech_request_context = lo_techn_request
                                             IMPORTING es_data                 = rs_data_exp ).
        CATCH /iwbep/cx_mgw_busi_exception.
          CONTINUE.
      ENDTRY.
      IF rs_data_exp IS NOT INITIAL.
        EXIT.
      ENDIF.
    ENDLOOP.
    cl_abap_unit_assert=>assert_not_initial( rs_data_exp ).
  ENDMETHOD.


  METHOD _get_keys.
    DATA(lt_key_elements) = _get_key_elements( iv_entity_set ).
    LOOP AT lt_key_elements INTO DATA(lv_element).
      ASSIGN COMPONENT lv_element OF STRUCTURE is_entity TO FIELD-SYMBOL(<v_element>).
      APPEND VALUE #( name = lv_element value = <v_element> ) TO rt_keys.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_unconverted_keys.
    DATA(lt_key_elements) = _get_key_elements( iv_entity_set ).
    LOOP AT lt_key_elements INTO DATA(lv_element).
      APPEND VALUE #( name = lv_element value = 'ANY' ) TO rt_keys.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_key_elements.
    IF mo_dpc->mo_sadl_api IS NOT BOUND.
      mo_dpc->_init( ).
    ENDIF.
    mo_dpc->mo_sadl_api->get_entity( iv_entity_set )->get_primary_key_elements( IMPORTING et_primary_key_elements = rt_keys ).
  ENDMETHOD.


  METHOD _create_entity.
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                    iv_entity_set_name      = VALUE #( )
                                                                    iv_source_name          = VALUE #( )
                                                                    io_tech_request_context = io_tech_request_context
                                                                    io_data_provider        = io_data_provider
                                                                    it_key_tab              = VALUE #( )
                                                                    it_navigation_path      = VALUE #( )
                                                          IMPORTING er_entity               = er_entity ).
  ENDMETHOD.


  METHOD _update_entity.
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~update_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                    iv_entity_set_name      = VALUE #( )
                                                                    iv_source_name          = VALUE #( )
                                                                    io_tech_request_context = io_tech_request_context
                                                                    io_data_provider        = io_data_provider
                                                                    it_key_tab              = VALUE #( )
                                                                    it_navigation_path      = VALUE #( )
                                                          IMPORTING er_entity = er_entity ).
  ENDMETHOD.

ENDCLASS.


CLASS ltd_entity_api DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_sadl_message_handler PARTIALLY IMPLEMENTED.
    INTERFACES if_sadl_entity_runtime  PARTIALLY IMPLEMENTED.
    INTERFACES if_sadl_entity_api      PARTIALLY IMPLEMENTED.


    METHODS constructor IMPORTING io_sadl_api TYPE REF TO if_sadl_entity_api.
    METHODS set_messages IMPORTING it_messages    TYPE if_sadl_message_handler=>tt_messages
                                   iv_association TYPE string OPTIONAL
                                   iv_failed      TYPE abap_bool OPTIONAL.

  PRIVATE SECTION.
    TYPES: BEGIN OF ty_sadl,
             my_identifier TYPE string,
           END OF ty_sadl.
    DATA mt_messages TYPE if_sadl_message_handler=>tt_messages.
    DATA mv_association TYPE string.
    DATA mo_sadl_api TYPE REF TO if_sadl_entity_api.
    DATA mv_failed TYPE abap_bool.
ENDCLASS.


CLASS ltd_entity_api IMPLEMENTATION.

  METHOD constructor.
    mo_sadl_api = io_sadl_api.
  ENDMETHOD.

  METHOD set_messages.
    mt_messages = it_messages.
    mv_failed = iv_failed.
    mv_association = iv_association.
  ENDMETHOD.


  METHOD if_sadl_entity_api~get_runtime.
    ro_runtime = me.
  ENDMETHOD.


  METHOD if_sadl_entity_api~get_entity.
    ro_entity = mo_sadl_api->get_entity( iv_name ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~get_message_handler.
    ro_message_handler = me.
  ENDMETHOD.


  METHOD if_sadl_message_handler~get_messages.
    et_messages = mt_messages.
  ENDMETHOD.


  METHOD if_sadl_message_handler~clear.
    CLEAR mt_messages.
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_entity_structure_ref.
    CREATE DATA rr_structure_ref TYPE ty_sadl.
  ENDMETHOD.

  METHOD if_sadl_entity_container_fctry~create_entity_table_ref.
    CREATE DATA rr_table_ref TYPE STANDARD TABLE OF ty_sadl.
  ENDMETHOD.

  METHOD if_sadl_entity_transactional~create_single.
    CLEAR ev_failed.
    IF mv_failed = abap_true AND mv_association IS INITIAL.
      ev_failed = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~delete_single.
    CLEAR ev_failed.
    IF mv_failed = abap_true.
      ev_failed = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_single.
    CLEAR: ev_failed, es_entity_data.
    IF mv_failed = abap_true.
      ev_failed = abap_true.
    ELSE.
      DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
      MOVE-CORRESPONDING ls_data TO es_entity_data.
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~update_single.
    CLEAR ev_failed.
    IF mv_failed = abap_true.
      ev_failed = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~execute_single.
    CLEAR: et_data, ev_failed.
    IF mv_failed = abap_true.
      ev_failed = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~create_by_association_single.
    CLEAR: ev_source_failed, ev_target_failed.
    IF mv_failed = abap_true.
      IF mv_association IS INITIAL.
        ev_source_failed = abap_true.
      ELSEIF mv_association = iv_association_name.
        ev_target_failed = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.


CLASS lcx_message DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS FINAL
  INHERITING FROM cx_static_check.
  PUBLIC SECTION.
    INTERFACES if_t100_message.
    CONSTANTS:
      BEGIN OF cx_message,
        msgid TYPE symsgid VALUE 'SADL_TEST' ##MG_MISSING,
        msgno TYPE symsgno VALUE '666' ##MG_MIS_ATT,
        attr1 TYPE scx_attrname VALUE 'ATTR1',
        attr2 TYPE scx_attrname VALUE 'ATTR2',
        attr3 TYPE scx_attrname VALUE 'ATTR3',
        attr4 TYPE scx_attrname VALUE 'ATTR4',
      END OF cx_message .

    DATA attr1 TYPE string VALUE `Value1` ##NO_TEXT.
    DATA attr2 TYPE i VALUE 123.
    DATA attr3 TYPE sydatum VALUE '20150701'.
    DATA attr4(6) TYPE c VALUE `Value4` ##NO_TEXT.
    METHODS constructor
      IMPORTING
        textid   LIKE if_t100_message=>t100key OPTIONAL
        previous LIKE previous OPTIONAL.
ENDCLASS.

CLASS lcx_message IMPLEMENTATION.
  METHOD constructor.
    CALL METHOD super->constructor
      EXPORTING
        previous = previous.
    CLEAR me->textid.
    IF textid IS INITIAL.
      if_t100_message~t100key = if_t100_message=>default_textid.
    ELSE.
      if_t100_message~t100key = textid.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


CLASS ltc_messages DEFINITION FINAL FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PUBLIC SECTION.
    METHODS create_fail FOR TESTING RAISING cx_static_check.
    METHODS create_success FOR TESTING RAISING cx_static_check.
    METHODS read   FOR TESTING RAISING cx_static_check.
    METHODS read_navigation_to_0   FOR TESTING RAISING cx_static_check.
    METHODS execute_action_fail FOR TESTING RAISING cx_static_check.
    METHODS execute_action_success FOR TESTING RAISING cx_static_check.
    METHODS update_fail FOR TESTING RAISING cx_static_check.
    METHODS patch_fail FOR TESTING RAISING cx_static_check.
    METHODS patch_success FOR TESTING RAISING cx_static_check.
    METHODS update_success FOR TESTING RAISING cx_static_check.
    METHODS delete_fail FOR TESTING RAISING cx_static_check.
    METHODS delete_success FOR TESTING RAISING cx_static_check.
    METHODS create_by_assoc_target_fails FOR TESTING RAISING cx_static_check.
    METHODS create_by_assoc_source_fails FOR TESTING RAISING cx_static_check.
    METHODS create_by_assoc_success FOR TESTING RAISING cx_static_check.
    METHODS deep_create_root_fail FOR TESTING RAISING cx_static_check.
    METHODS deep_create_sub_fail FOR TESTING RAISING cx_static_check.
    METHODS deep_create_success FOR TESTING RAISING cx_static_check.

  PRIVATE SECTION.
    TYPES: BEGIN OF ty_sadl,
             my_identifier TYPE string,
           END OF ty_sadl.
    DATA mo_dpc TYPE REF TO cl_sadl_gw_generic_dpc.
    DATA mo_sadl_api_mock TYPE REF TO ltd_entity_api.
    DATA mx_message TYPE REF TO lcx_message.
    METHODS setup RAISING cx_static_check.
    METHODS create_by_assoc IMPORTING iv_source_failed TYPE abap_bool
                            RAISING   cx_static_check.
    METHODS assert_message_fail IMPORTING ix TYPE REF TO /iwbep/cx_mgw_busi_exception.
    METHODS assert_message_success.
ENDCLASS.

CLASS cl_sadl_gw_generic_dpc DEFINITION LOCAL FRIENDS ltc_messages.

CLASS ltc_messages IMPLEMENTATION.

  METHOD setup.
    cl_sadl_aunit_friend=>inject_entity_consump_info( iv_entity_id   = 'SalesOrder~Root'
                                                      iv_entity_type = 'SADL_REFERENCE_SCENARIO'
                                                      io_entity      = NEW lth_consump_info_trans_only( iv_type = 'SADL_REFERENCE_SCENARIO'  iv_id = 'SalesOrder~Root' ) ).
    mo_dpc = NEW lth_my_trans_dpc( ).
    mo_dpc->_init( ).
    mo_sadl_api_mock = NEW ltd_entity_api( mo_dpc->mo_sadl_api ).
    mo_dpc->mo_sadl_api = mo_sadl_api_mock.
    mo_dpc->/iwbep/if_mgw_conv_srv_runtime~init_dp_for_unit_test( VALUE #( ) ).
    DATA(lo_msg_cont) = CAST /iwbep/cl_mgw_msg_container( mo_dpc->/iwbep/if_mgw_conv_srv_runtime~get_message_container( ) ).
    lo_msg_cont->reset( ).  " otherwise message container collects messages from different test methods -> see int.incident 1570002368
  ENDMETHOD.


  METHOD create_fail.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_create( iv_entity_set = lth_my_dpc=>co_overview ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_entity( iv_entity_name          = VALUE #( )
                                                              iv_entity_set_name      = VALUE #( )
                                                              iv_source_name          = VALUE #( )
                                                              it_key_tab              = VALUE #( )
                                                              it_navigation_path      = VALUE #( )
                                                              io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                              io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD assert_message_fail.
    DATA(lt_messages) = ix->message_container->get_messages( ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages )  exp = 1 ).
    DATA(ls_msg) = lt_messages[ 1 ].
*    MESSAGE ID ls_msg-id TYPE ls_msg-type NUMBER ls_msg-number WITH ls_msg-message_v1 ls_msg-message_v2 ls_msg-message_v3 ls_msg-message_v4 INTO DATA(lv_text).
*    cl_abap_unit_assert=>assert_equals( act = lv_text  exp = mx_message->get_text( )  ). " Fails: Date conversion missing in MESSAGE INTO, wrong message type in get_text( )
    cl_abap_unit_assert=>assert_equals( act = lcx_message=>cx_message-msgid  exp = ls_msg-id ).
    cl_abap_unit_assert=>assert_equals( act = lcx_message=>cx_message-msgno  exp = ls_msg-number ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr1  exp = ls_msg-message_v1 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr2  exp = ls_msg-message_v2 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr3  exp = ls_msg-message_v3 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr4  exp = ls_msg-message_v4 ).
  ENDMETHOD.


  METHOD assert_message_success.
    DATA(lt_messages) = mo_dpc->/iwbep/if_mgw_conv_srv_runtime~get_message_container( )->get_messages( ).
    DATA(ls_msg) = lt_messages[ 1 ].
*    MESSAGE ID ls_msg-id TYPE ls_msg-type NUMBER ls_msg-number WITH ls_msg-message_v1 ls_msg-message_v2 ls_msg-message_v3 ls_msg-message_v4 INTO DATA(lv_text).
*    cl_abap_unit_assert=>assert_equals( act = lv_text  exp = mx_message->get_text( ) ).
    cl_abap_unit_assert=>assert_equals( act = lcx_message=>cx_message-msgid  exp = ls_msg-id ).
    cl_abap_unit_assert=>assert_equals( act = lcx_message=>cx_message-msgno  exp = ls_msg-number ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr1  exp = ls_msg-message_v1 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr2  exp = ls_msg-message_v2 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr3  exp = ls_msg-message_v3 ).
    cl_abap_unit_assert=>assert_equals( act = mx_message->attr4  exp = ls_msg-message_v4 ).
  ENDMETHOD.


  METHOD create_success.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message  = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_create( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_entity( iv_entity_name          = VALUE #( )
                                                          iv_entity_set_name      = VALUE #( )
                                                          iv_source_name          = VALUE #( )
                                                          it_key_tab              = VALUE #( )
                                                          it_navigation_path      = VALUE #( )
                                                          io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                          io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD read.
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( iv_entity_name          = VALUE #( )
                                                           iv_entity_set_name      = VALUE #( )
                                                           iv_source_name          = VALUE #( )
                                                           it_key_tab              = VALUE #( )
                                                           it_navigation_path      = VALUE #( )
                                                           io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->if_t100_message~t100key
                                            exp = /iwbep/cx_mgw_busi_exception=>resource_not_found ).
        cl_abap_unit_assert=>assert_equals( act = lx->http_status_code
                                            exp = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-not_found ).
        DATA(lt_messages) = mo_dpc->/iwbep/if_mgw_conv_srv_runtime~get_message_container( )->get_messages( ).
        cl_abap_unit_assert=>assert_initial( lt_messages ).  " currently no messages in get_entity and get_entityset
    ENDTRY.
  ENDMETHOD.


  METHOD read_navigation_to_0.
    " this test has nothing to do with messages. It just verifies that get_entity doesn't throw an exception if you navigate and don't get a hit.
    " (In contrast, we throw an exception in the non-navigate case.)
    DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( iv_source_entity_set = lth_my_dpc=>co_overview
                                                            it_navigation_path = VALUE #( ( source_entity_type = lth_my_dpc=>co_overview_et
                                                                                            target_entity_type = lth_my_dpc=>co_subnode_et
                                                                                            nav_prop           = 'SUBNODE' ) )
                                                            iv_entity_set = lth_my_dpc=>co_subnode
                                                            iv_entity_type = 'SubnodeET'
                                                            it_keys = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( iv_entity_name          = VALUE #( )
                                                       iv_entity_set_name      = VALUE #( )
                                                       iv_source_name          = VALUE #( )
                                                       it_key_tab              = VALUE #( )
                                                       it_navigation_path      = VALUE #( )
                                                       io_tech_request_context = lo_techn_request ).
  ENDMETHOD.


  METHOD update_fail.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_update( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~update_entity( iv_entity_name          = VALUE #( )
                                                              iv_entity_set_name      = VALUE #( )
                                                              iv_source_name          = VALUE #( )
                                                              it_key_tab              = VALUE #( )
                                                              it_navigation_path      = VALUE #( )
                                                              io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                              io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD patch_fail.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_update( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~patch_entity( iv_entity_name          = VALUE #( )
                                                             iv_entity_set_name      = VALUE #( )
                                                             iv_source_name          = VALUE #( )
                                                             it_key_tab              = VALUE #( )
                                                             it_navigation_path      = VALUE #( )
                                                             io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                             io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD patch_success.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message  = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_update( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~patch_entity( iv_entity_name          = VALUE #( )
                                                         iv_entity_set_name      = VALUE #( )
                                                         iv_source_name          = VALUE #( )
                                                         it_key_tab              = VALUE #( )
                                                         it_navigation_path      = VALUE #( )
                                                         io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                         io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD update_success.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message  = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_update( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~update_entity( iv_entity_name          = VALUE #( )
                                                          iv_entity_set_name      = VALUE #( )
                                                          iv_source_name          = VALUE #( )
                                                          it_key_tab              = VALUE #( )
                                                          it_navigation_path      = VALUE #( )
                                                          io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                          io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD delete_fail.
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_delete( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~delete_entity( iv_entity_name          = VALUE #( )
                                                              iv_entity_set_name      = VALUE #( )
                                                              iv_source_name          = VALUE #( )
                                                              it_key_tab              = VALUE #( )
                                                              it_navigation_path      = VALUE #( )
                                                              io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD delete_success.
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message  = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_delete( iv_entity_set  = lth_my_dpc=>co_overview
                                                            iv_entity_type = lth_my_dpc=>co_overview_et
                                                            it_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~delete_entity( iv_entity_name          = VALUE #( )
                                                          iv_entity_set_name      = VALUE #( )
                                                          iv_source_name          = VALUE #( )
                                                          it_key_tab              = VALUE #( )
                                                          it_navigation_path      = VALUE #( )
                                                          io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD create_by_assoc_target_fails.
    create_by_assoc( abap_false ).
  ENDMETHOD.


  METHOD create_by_assoc_source_fails.
    create_by_assoc( abap_true ).
  ENDMETHOD.


  METHOD create_by_assoc.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    IF iv_source_failed = abap_true.
      mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                               message = mx_message ) )
                                      iv_failed  = abap_true ).
    ELSE.
      mo_sadl_api_mock->set_messages( it_messages    = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                                  message = mx_message ) )
                                      iv_failed      = abap_true
                                      iv_association = lth_my_dpc=>co_subnode ).
    ENDIF.
    DATA(lo_techn_request) = NEW td_sadl_gw_request_create( iv_source_entity_set  = lth_my_dpc=>co_overview
                                                            iv_source_entity_type = lth_my_dpc=>co_overview
                                                            iv_entity_set         = lth_my_dpc=>co_subnode
                                                            it_source_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) )
                                                            it_navigation_path    = VALUE #( ( source_entity_type = lth_my_dpc=>co_overview
                                                                                               target_entity_type = lth_my_dpc=>co_subnode
                                                                                               nav_prop           = lth_my_dpc=>co_subnode ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_entity( iv_entity_name          = VALUE #( )
                                                              iv_entity_set_name      = VALUE #( )
                                                              iv_source_name          = VALUE #( )
                                                              it_key_tab              = VALUE #( )
                                                              it_navigation_path      = VALUE #( )
                                                              io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                              io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx).
        IF iv_source_failed = abap_true.
          cl_abap_unit_assert=>assert_equals( act = lx->if_t100_message~t100key  exp = /iwbep/cx_mgw_busi_exception=>resource_not_found ).
          cl_abap_unit_assert=>assert_equals( act = lx->entity_type  exp = lth_my_dpc=>co_overview ).
          DATA(lt_messages) = lx->message_container->get_messages( ).
          cl_abap_unit_assert=>assert_equals( act = lines( lt_messages )  exp = 1 ).
        ELSE.
          assert_message_fail( lx ).
        ENDIF.
    ENDTRY.
  ENDMETHOD.


  METHOD deep_create_root_fail.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_expand) = td_sadl_gw_expand_node=>create_from_table( it_path = VALUE #( ( source_set = lth_my_dpc=>co_overview  nav_prop = lth_my_dpc=>co_subnode )
                                                                                    ( source_set = lth_my_dpc=>co_subnode ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_deep_entity( iv_entity_name          = VALUE #( )
                                                                   iv_entity_set_name      = VALUE #( )
                                                                   iv_source_name          = VALUE #( )
                                                                   io_tech_request_context = NEW td_sadl_gw_request_create( iv_entity_set = lth_my_dpc=>co_overview )
                                                                   io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                                   it_key_tab              = VALUE #( )
                                                                   it_navigation_path      = VALUE #( )
                                                                   io_expand               = lo_expand ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD deep_create_sub_fail.
    TYPES tt_sadl_subnode TYPE STANDARD TABLE OF ty_sadl WITH DEFAULT KEY.
    TYPES: BEGIN OF ty_sadl_deep.
        INCLUDE TYPE ty_sadl.
    TYPES: subnode TYPE tt_sadl_subnode,
           END OF ty_sadl_deep.
    DATA(ls_data) = VALUE ty_sadl_deep( my_identifier = '666'  subnode = VALUE #( ( my_identifier = '6661' ) ) ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages    = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                                message  = mx_message ) )
                                    iv_association = lth_my_dpc=>co_subnode
                                    iv_failed      = abap_true ).
    DATA(lo_expand) = td_sadl_gw_expand_node=>create_from_table( it_path = VALUE #( ( source_set = lth_my_dpc=>co_overview  nav_prop = lth_my_dpc=>co_subnode )
                                                                                    ( source_set = lth_my_dpc=>co_subnode ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_deep_entity( iv_entity_name          = VALUE #( )
                                                                   iv_entity_set_name      = VALUE #( )
                                                                   iv_source_name          = VALUE #( )
                                                                   io_tech_request_context = NEW td_sadl_gw_request_create( iv_entity_set = lth_my_dpc=>co_overview )
                                                                   io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                                   it_key_tab              = VALUE #( )
                                                                   it_navigation_path      = VALUE #( )
                                                                   io_expand               = lo_expand ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD deep_create_success.
    TYPES tt_sadl_subnode TYPE STANDARD TABLE OF ty_sadl WITH DEFAULT KEY.
    TYPES: BEGIN OF ty_sadl_deep.
        INCLUDE TYPE ty_sadl.
    TYPES: subnode TYPE tt_sadl_subnode,
           END OF ty_sadl_deep.
    DATA(ls_data) = VALUE ty_sadl_deep( my_identifier = '666'  subnode = VALUE #( ( my_identifier = '6661' ) ) ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages    = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                                message  = mx_message ) )
                                    iv_association = lth_my_dpc=>co_subnode ).
    DATA(lo_expand) = td_sadl_gw_expand_node=>create_from_table( it_path = VALUE #( ( source_set = lth_my_dpc=>co_overview  nav_prop = lth_my_dpc=>co_subnode )
                                                                                    ( source_set = lth_my_dpc=>co_subnode ) ) ).

*    ltd_entity_api=>gs_data = value #( )
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_deep_entity( iv_entity_name          = VALUE #( )
                                                               iv_entity_set_name      = VALUE #( )
                                                               iv_source_name          = VALUE #( )
                                                               io_tech_request_context = NEW td_sadl_gw_request_create( iv_entity_set = lth_my_dpc=>co_overview )
                                                               io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                               it_key_tab              = VALUE #( )
                                                               it_navigation_path      = VALUE #( )
                                                               io_expand               = lo_expand ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD create_by_assoc_success.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error  message = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_create( iv_source_entity_set  = lth_my_dpc=>co_overview
                                                            iv_source_entity_type = lth_my_dpc=>co_overview_et
                                                            iv_entity_set         = lth_my_dpc=>co_subnode
                                                            iv_entity_type        = lth_my_dpc=>co_subnode_et
                                                            it_source_keys        = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) )
                                                            it_navigation_path    = VALUE #( ( source_entity_type = lth_my_dpc=>co_overview_et
                                                                                               target_entity_type = lth_my_dpc=>co_subnode_et
                                                                                               nav_prop           = lth_my_dpc=>co_subnode ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~create_entity( iv_entity_name          = VALUE #( )
                                                          iv_entity_set_name      = VALUE #( )
                                                          iv_source_name          = VALUE #( )
                                                          it_key_tab              = VALUE #( )
                                                          it_navigation_path      = VALUE #( )
                                                          io_data_provider        = NEW td_sadl_gw_data_provider( REF #( ls_data ) )
                                                          io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


  METHOD execute_action_fail.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) )
                                    iv_failed  = abap_true ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_func_imp( iv_entity_set_name  = lth_my_dpc=>co_overview
                                                              iv_entity_type_name = lth_my_dpc=>co_overview_et
                                                              iv_action_name      = 'SetActIndicator'
                                                              it_parameters       = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~execute_action( io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
        assert_message_fail( lx ).
    ENDTRY.
  ENDMETHOD.


  METHOD execute_action_success.
    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
    mx_message = NEW lcx_message( textid = lcx_message=>cx_message ).
    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error
                                                             message = mx_message ) ) ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_func_imp( iv_entity_set_name  = lth_my_dpc=>co_overview
                                                              iv_entity_type_name = lth_my_dpc=>co_overview_et
                                                              iv_action_name      = 'SetActIndicator'
                                                              it_parameters       = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~execute_action( io_tech_request_context = lo_techn_request ).
    assert_message_success( ).
  ENDMETHOD.


*  METHOD read_by_assoc_source_fails.
*    DATA(ls_data) = VALUE ty_sadl( my_identifier = '666' ).
*    DATA(lo_message) = NEW lcx_message( textid = lcx_message=>cx_message ).
*    mo_sadl_api_mock->set_messages( it_messages = VALUE #( ( severity = if_sadl_message_handler=>co_severity-error  message = lo_message ) )
*                                    iv_source_messages_ind = abap_true ).
*    DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( iv_entity_set        = 'SUBNODE'
*                                                            iv_source_entity_set = 'OVERVIEW'
*                                                            it_source_keys       = VALUE #( ( name = 'MY_IDENTIFIER'  value = '666' ) )
*                                                            it_navigation_path   = VALUE #( ( source_entity_type = lth_my_dpc=>co_overview
*                                                                                              target_entity_type = lth_my_dpc=>co_subnode
*                                                                                              nav_prop           = lth_my_dpc=>co_subnode ) ) ).
*    TRY.
*        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
*                                                                     iv_entity_set_name      = VALUE #( )
*                                                                     iv_source_name          = VALUE #( )
*                                                                     it_key_tab              = VALUE #( )
*                                                                     it_navigation_path      = VALUE #( )
*                                                                     io_tech_request_context = lo_techn_request ).
*        cl_abap_unit_assert=>fail( 'Exception expected' ).
*      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx) ##NEEDED.
*        DATA(lt_messages) = mo_dpc->/iwbep/if_mgw_conv_srv_runtime~get_message_container( )->get_messages( ).
*        cl_abap_unit_assert=>assert_not_initial( lt_messages ).
*    ENDTRY.
*  ENDMETHOD.
ENDCLASS.


CLASS ltc_get_count DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS FINAL .
  PRIVATE SECTION.
    METHODS count10_top0             FOR TESTING RAISING cx_static_check.
    METHODS count10_top0_skip2       FOR TESTING RAISING cx_static_check.
    METHODS count10_top3             FOR TESTING RAISING cx_static_check.
    METHODS count10_top10            FOR TESTING RAISING cx_static_check.
    METHODS count10_top11            FOR TESTING RAISING cx_static_check.
    METHODS count10_skip6            FOR TESTING RAISING cx_static_check.
    METHODS count_lower_skip         FOR TESTING RAISING cx_static_check.
    METHODS count_lower_skip_and_top FOR TESTING RAISING cx_static_check.
    METHODS count10_skip3_and_top7   FOR TESTING RAISING cx_static_check.
    METHODS count10_skip3_and_top12  FOR TESTING RAISING cx_static_check.
    METHODS count10_skip10_and_top1  FOR TESTING RAISING cx_static_check.
ENDCLASS.

CLASS cl_sadl_gw_generic_dpc DEFINITION LOCAL FRIENDS ltc_get_count.

CLASS ltc_get_count IMPLEMENTATION.
  METHOD count10_top0.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '0'   iv_skip = 0 )
                                        exp = 0 ).
  ENDMETHOD.

  METHOD count10_top0_skip2.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '0'   iv_skip = 2 )
                                        exp = 0 ).
  ENDMETHOD.

  METHOD count10_top3.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '3'   iv_skip = 0 )
                                        exp = 3 ).
  ENDMETHOD.

  METHOD count10_top10.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '10'   iv_skip = 0 )
                                        exp = 10 ).
  ENDMETHOD.

  METHOD count10_top11.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '11'   iv_skip = 0 )
                                        exp = 10 ).
  ENDMETHOD.

  METHOD count10_skip6.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = ''   iv_skip = 6 )
                                        exp = 4 ).
  ENDMETHOD.

  METHOD count_lower_skip.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '0'   iv_skip = 20 )
                                        exp = 0 ).
  ENDMETHOD.

  METHOD count_lower_skip_and_top.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '1'   iv_skip = 20 )
                                        exp = 0 ).
  ENDMETHOD.

  METHOD count10_skip3_and_top7.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '7'   iv_skip = 3 )
                                        exp = 7 ).
  ENDMETHOD.

  METHOD count10_skip3_and_top12.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '12'   iv_skip = 3 )
                                        exp = 7 ).
  ENDMETHOD.

  METHOD count10_skip10_and_top1.
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_gw_generic_dpc=>_get_count( iv_count = 10   iv_top = '1'   iv_skip = 10 )
                                        exp = 0 ).
  ENDMETHOD.
ENDCLASS.


CLASS ltc_mocked DEFINITION INHERITING FROM ltc_base
   FOR TESTING RISK LEVEL HARMLESS DURATION SHORT
   FINAL.

  PRIVATE SECTION.
    METHODS setup RAISING cx_sadl_static.
    METHODS get_entity                   FOR TESTING RAISING cx_static_check.
    METHODS get_entity_no_hit            FOR TESTING RAISING cx_static_check.
    METHODS get_entity_no_req_attr_suppl FOR TESTING RAISING cx_static_check.
    METHODS get_entity_duplicate_select  FOR TESTING RAISING cx_static_check.
    METHODS get_entityset                FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_duplicate_sel  FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_subnode        FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_requested_attr FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_count          FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_inlinecount    FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_skip_top_default  FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_skip_with_top     FOR TESTING RAISING cx_static_check.
    METHODS get_entityset_skip_without_top  FOR TESTING RAISING cx_static_check.
    METHODS get_entity_more_than_one_hit    FOR TESTING RAISING cx_static_check.
    METHODS _get_entity_set_via_api IMPORTING io_request_entityset TYPE REF TO /iwbep/if_mgw_req_entityset
                                    RAISING   cx_sadl_static cx_sadl_contract_violation /iwbep/cx_mgw_tech_exception /iwbep/cx_mgw_busi_exception.
    METHODS _assert_sel_condition IMPORTING iv_attribute     TYPE string
                                            iv_value         TYPE string
                                            is_actual_selopt TYPE th_sadl_query_engine_spy=>ty_select_options.

    DATA mo_query_engine_mock TYPE REF TO th_sadl_query_engine_spy_stub.
ENDCLASS.

CLASS ltc_mocked IMPLEMENTATION.

  METHOD setup.
    CREATE OBJECT mo_query_engine_mock.
    cl_sadl_aunit_friend=>inject_query_engine( mo_query_engine_mock ).
    cl_sadl_aunit_friend=>inject_entity_consump_info( iv_entity_id   = 'SalesOrder~Root'
                                                      iv_entity_type = 'SADL_REFERENCE_SCENARIO'
                                                      io_entity      = NEW lth_consump_info_fetch_only( iv_type = 'SADL_REFERENCE_SCENARIO'  iv_id = 'SalesOrder~Root' ) ).
  ENDMETHOD.


  METHOD get_entity.
    DATA lt_expected_requested TYPE if_sadl_query_engine_types=>tt_requested_elements.
    DATA lt_query_result TYPE STANDARD TABLE OF ty_sadl_type WITH DEFAULT KEY.

    lt_query_result = VALUE #( ( my_identifier = '001' ) ).
    mo_query_engine_mock->set_select_result( it_data = lt_query_result ).

    DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( it_keys       = VALUE #( ( name = 'MY_IDENTIFIER' value = '001' ) )
                                                            iv_entity_set = 'OVERVIEW'
                                                            iv_entity_type = 'MyEntityType'
                                                            it_select     = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                 iv_entity_set_name      = VALUE #( )
                                                                 iv_source_name          = VALUE #( )
                                                                 it_key_tab              = VALUE #( )
                                                                 it_navigation_path      = VALUE #( )
                                                                 io_tech_request_context = lo_techn_request
                                                       IMPORTING er_entity               = DATA(lr_entity) ).
    cl_abap_unit_assert=>assert_not_initial( lr_entity ).

    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).

    _assert_sel_condition( iv_attribute     = 'MY_IDENTIFIER'
                           iv_value         = '001'
                           is_actual_selopt = ls_actual_selopt ).

    APPEND 'MY_IDENTIFIER' TO lt_expected_requested.
    APPEND 'MY_SELLER_ID' TO lt_expected_requested.
    cl_abap_unit_assert=>assert_equals( exp = lt_expected_requested
                                        act = ls_actual_selopt-requested-elements ).
  ENDMETHOD.


  METHOD get_entity_duplicate_select.
    DATA lt_expected_requested TYPE if_sadl_query_engine_types=>tt_requested_elements.
    DATA lt_query_result TYPE STANDARD TABLE OF ty_sadl_type WITH DEFAULT KEY.

    lt_query_result = VALUE #( ( my_identifier = '001' ) ).
    mo_query_engine_mock->set_select_result( it_data = lt_query_result ).
    DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( it_keys       = VALUE #( ( name = 'MY_IDENTIFIER' value = '001' ) )
                                                            iv_entity_set = 'OVERVIEW'
                                                            iv_entity_type = 'MyEntityType'
                                                            it_select     = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) ( 'MY_SELLER_ID' ) ) ).
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                 iv_entity_set_name      = VALUE #( )
                                                                 iv_source_name          = VALUE #( )
                                                                 it_key_tab              = VALUE #( )
                                                                 it_navigation_path      = VALUE #( )
                                                                 io_tech_request_context = lo_techn_request
                                                       IMPORTING er_entity               = DATA(lr_entity) ).
    cl_abap_unit_assert=>assert_not_initial( lr_entity ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    lt_expected_requested = VALUE #( ( `MY_IDENTIFIER` ) ( `MY_SELLER_ID` ) ).
    cl_abap_unit_assert=>assert_equals( exp = lt_expected_requested
                                        act = ls_actual_selopt-requested-elements ).
  ENDMETHOD.


  METHOD get_entity_no_hit.
    TRY.
        DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( it_keys       = VALUE #( ( name = 'MY_IDENTIFIER' value = '001' ) )
                                                                iv_entity_set = 'OVERVIEW'
                                                                iv_entity_type = 'MyEntityType'
                                                                it_select     = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) ) ).
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                     iv_entity_set_name      = VALUE #( )
                                                                     iv_source_name          = VALUE #( )
                                                                     it_key_tab              = VALUE #( )
                                                                     it_navigation_path      = VALUE #( )
                                                                     io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'expected exception has not been thrown' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->if_t100_message~t100key
                                            exp = /iwbep/cx_mgw_busi_exception=>resource_not_found ).
        cl_abap_unit_assert=>assert_equals( act = lx->entity_type
                                            exp = 'MyEntityType' ).
        cl_abap_unit_assert=>assert_equals( act = lx->http_status_code
                                            exp = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-not_found ).
    ENDTRY.
  ENDMETHOD.


  METHOD get_entity_more_than_one_hit.
    DATA lt_query_result TYPE STANDARD TABLE OF ty_sadl_type WITH DEFAULT KEY.

    lt_query_result = VALUE #( ( my_identifier = '001' )
                               ( my_identifier = '001' ) ).
    mo_query_engine_mock->set_select_result( it_data = lt_query_result ).
    TRY.
        DATA(lo_techn_request) = NEW td_sadl_gw_request_entity( it_keys       = VALUE #( ( name = 'MY_IDENTIFIER' value = '001' ) )
                                                                iv_entity_set = 'OVERVIEW'
                                                                iv_entity_type = 'MyEntityType'
                                                                it_select     = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) ) ).
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                     iv_entity_set_name      = VALUE #( )
                                                                     iv_source_name          = VALUE #( )
                                                                     it_key_tab              = VALUE #( )
                                                                     it_navigation_path      = VALUE #( )
                                                                     io_tech_request_context = lo_techn_request ).
        cl_abap_unit_assert=>fail( 'expected exception has not been thrown' ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx).
        cl_abap_unit_assert=>assert_equals( act = lx->if_t100_message~t100key
                                            exp = /iwbep/cx_mgw_busi_exception=>resource_duplicate ).
    ENDTRY.
  ENDMETHOD.


  METHOD _assert_sel_condition.
    DATA(ls_exp_complex_condition) = VALUE if_sadl_query_engine_types=>ty_complex_condition( value = iv_value
                                                                                             type  = 'simpleValue' ).

    READ TABLE is_actual_selopt-restrictions-complex_condition TRANSPORTING NO FIELDS WITH KEY type      = 'equals'
                                                                                               attribute = iv_attribute. "#EC CI_STDSEQ
    cl_abap_unit_assert=>assert_subrc( ).
    READ TABLE is_actual_selopt-restrictions-complex_condition INTO DATA(ls_complex_condition) INDEX sy-tabix - 1.
    cl_abap_unit_assert=>assert_equals( exp = ls_exp_complex_condition act = ls_complex_condition ).
  ENDMETHOD.


  METHOD get_entity_no_req_attr_suppl.
    DATA(lo_request) = NEW td_sadl_gw_request_entity( it_keys = VALUE #( ( name = 'MY_IDENTIFIER' value = '002' ) )
                                                      iv_entity_type = 'MyEntityType'
                                                      iv_entity_set = lth_my_dpc=>co_overview ).

    TRY.
        mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entity( EXPORTING iv_entity_name          = VALUE #( )
                                                                     iv_entity_set_name      = VALUE #( )
                                                                     iv_source_name          = VALUE #( )
                                                                     it_key_tab              = VALUE #( )
                                                                     it_navigation_path      = VALUE #( )
                                                                     io_tech_request_context = lo_request ).
        cl_abap_unit_assert=>fail( ).
      CATCH /iwbep/cx_mgw_busi_exception INTO DATA(lx). " expected (no data injected)
        cl_abap_unit_assert=>assert_equals( act = lx->if_t100_message~t100key
                                            exp = /iwbep/cx_mgw_busi_exception=>resource_not_found ).
    ENDTRY.

    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    _assert_sel_condition( iv_attribute     = 'MY_IDENTIFIER'
                           iv_value         = '002'
                           is_actual_selopt = ls_actual_selopt ).
    cl_abap_unit_assert=>assert_equals( exp = 5  act = lines( ls_actual_selopt-requested-elements ) ).
  ENDMETHOD.


  METHOD get_entityset.
    _get_entityset_by_ref( EXPORTING is_paging         = VALUE #( skip = 10 top = 100 )
                                     it_orderby        = VALUE #( ( property = 'MY_IDENTIFIER' order = 'asc' ) )
                                     it_select         = VALUE #( ( 'MY_SELLER_ID' ) )
                                     it_select_options = VALUE #( ( property = 'MY_TYPE_CODE' select_options = VALUE #( ( low = '2' option = 'EQ' sign = 'I' ) ) ) )
*                                     iv_search_string  = 'MY_SEARCH_STRING' need to mock Query Options in order to set Search Scope
                                     iv_entity_set     = lth_my_dpc=>co_overview
                           IMPORTING er_data           = DATA(lr_entity) ).
    cl_aunit_assert=>assert_not_initial( lr_entity ).

    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).

    READ TABLE ls_actual_selopt-requested-elements TRANSPORTING NO FIELDS WITH KEY table_line = 'MY_SELLER_ID'.
    cl_abap_unit_assert=>assert_subrc( ). "equals( exp = 'MY_SELLER_ID' act = ls_actual_selopt-requested-elements[ 1 ] ).
    cl_abap_unit_assert=>assert_equals( exp = 11 act = ls_actual_selopt-paging-start_row ).
    cl_abap_unit_assert=>assert_equals( exp = 100 act = ls_actual_selopt-paging-maximum_rows ).
    READ TABLE ls_actual_selopt-sort_elements INTO DATA(ls_sort_element) INDEX 1.
    cl_abap_unit_assert=>assert_equals( exp = 'MY_IDENTIFIER' act = ls_sort_element-element_name ).
    cl_abap_unit_assert=>assert_equals( exp = abap_false act = ls_sort_element-descending ).
*    cl_abap_unit_assert=>assert_equals( exp = 'MY_SEARCH_STRING' act = ls_actual_selopt-restrictions-text_search-search_term ).
    cl_abap_unit_assert=>assert_equals( exp = VALUE if_sadl_query_types=>tt_complex_condition( ( value = '2' type = 'simpleValue') ( attribute = 'MY_TYPE_CODE' type = 'equals' ) )
                                        act = ls_actual_selopt-restrictions-complex_condition ).
  ENDMETHOD.


  METHOD get_entityset_duplicate_sel.
    _get_entityset_by_ref( EXPORTING it_select         = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) ( 'MY_SELLER_ID' ) )
                                     iv_entity_set     = lth_my_dpc=>co_overview
                           IMPORTING er_data           = DATA(lr_entity) ).
    cl_aunit_assert=>assert_not_initial( lr_entity ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals(
        act = ls_actual_selopt-requested-elements
        exp = VALUE if_sadl_query_engine_types=>tt_requested_elements( ( `MY_IDENTIFIER` ) ( `MY_SELLER_ID` ) ) ).
  ENDMETHOD.


  METHOD get_entityset_subnode.
    _get_entityset_by_ref( EXPORTING it_select     = VALUE #( ( 'MY_PRODUCT_ID' ) )
                                     iv_entity_set = lth_my_dpc=>co_subnode
                           IMPORTING er_data       = DATA(lr_entity) ).
    cl_aunit_assert=>assert_not_initial( lr_entity ).

    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).

    READ TABLE ls_actual_selopt-requested-elements TRANSPORTING NO FIELDS WITH KEY table_line = 'MY_PRODUCT_ID'.
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.


  METHOD get_entityset_requested_attr.
    _get_entityset_by_ref( EXPORTING is_paging     = VALUE #( skip = 10 top = 100 )
                                     it_orderby    = VALUE #( ( property = 'MY_IDENTIFIER' order = 'asc' ) )
                                     it_select     = VALUE #( ( 'MY_IDENTIFIER' ) ( 'MY_SELLER_ID' ) )
                                     iv_entity_set = lth_my_dpc=>co_overview
                           IMPORTING er_data       = DATA(lr_entity) ).
    cl_abap_unit_assert=>assert_not_initial( lr_entity ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).

    cl_abap_unit_assert=>assert_equals( exp = 11 act = ls_actual_selopt-paging-start_row ).
    cl_abap_unit_assert=>assert_equals( exp = 100 act = ls_actual_selopt-paging-maximum_rows ).
    READ TABLE ls_actual_selopt-sort_elements INTO DATA(ls_sort_element) INDEX 1.
    cl_abap_unit_assert=>assert_equals( exp = 'MY_IDENTIFIER' act = ls_sort_element-element_name ).
    cl_abap_unit_assert=>assert_equals( exp = abap_false act = ls_sort_element-descending ).

    READ TABLE ls_actual_selopt-requested-elements TRANSPORTING NO FIELDS WITH KEY table_line = 'MY_IDENTIFIER'.
    cl_abap_unit_assert=>assert_subrc( ).
    READ TABLE ls_actual_selopt-requested-elements TRANSPORTING NO FIELDS WITH KEY table_line = 'MY_SELLER_ID'.
    cl_abap_unit_assert=>assert_subrc( ).
  ENDMETHOD.


  METHOD get_entityset_count.
    DATA(lo_request) = NEW td_sadl_gw_request_entset( iv_has_count       = abap_true
                                                      iv_entity_set_name = lth_my_dpc=>co_overview ).

    _get_entity_set_via_api( lo_request ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals( exp = abap_true
                                        act = ls_actual_selopt-requested-fill_number_all_hits ).
    cl_abap_unit_assert=>assert_equals( exp = abap_false
                                        act = ls_actual_selopt-requested-fill_data ).
  ENDMETHOD.


  METHOD get_entityset_inlinecount.
    DATA(lo_request) = NEW td_sadl_gw_request_entset( iv_has_inline_count = abap_true
                                                      iv_entity_set_name  = lth_my_dpc=>co_overview ).

    _get_entity_set_via_api( lo_request ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals( exp = abap_true
                                        act = ls_actual_selopt-requested-fill_number_all_hits ).
    cl_abap_unit_assert=>assert_equals( exp = abap_true
                                        act = ls_actual_selopt-requested-fill_data ).
  ENDMETHOD.


  METHOD get_entityset_skip_top_default.
    DATA(lo_request) = NEW td_sadl_gw_request_entset( iv_entity_set_name = lth_my_dpc=>co_overview ).

    _get_entity_set_via_api( lo_request ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals( exp = 1
                                        act = ls_actual_selopt-paging-start_row ).
    cl_abap_unit_assert=>assert_equals( exp = 0
                                        act = ls_actual_selopt-paging-maximum_rows ).
  ENDMETHOD.


  METHOD get_entityset_skip_with_top.
    DATA(lo_request) = NEW td_sadl_gw_request_entset( iv_entity_set_name = lth_my_dpc=>co_overview
                                                      is_paging          = VALUE #( skip = 10  top = 100 )
                                                      it_orderby = VALUE #( ( property = 'MY_IDENTIFIER' ) ) ).

    _get_entity_set_via_api( lo_request ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals( exp = 11
                                        act = ls_actual_selopt-paging-start_row ).
    cl_abap_unit_assert=>assert_equals( exp = 100
                                        act = ls_actual_selopt-paging-maximum_rows ).
  ENDMETHOD.


  METHOD get_entityset_skip_without_top.
    " skip without top is not supported by HDB, but allowed by OData protocol.
    " Therefore cl_abap_math=>max_int4 is set for TOP, if only SKIP is set
    " But this is done in the HDB SQL engine (CL_SADL_SQL_ENGINE->GENERATE_PAGING)
    DATA(lo_request) = NEW td_sadl_gw_request_entset( iv_entity_set_name = lth_my_dpc=>co_overview
                                                      is_paging          = VALUE #( skip = 10 )
                                                      it_orderby = VALUE #( ( property = 'MY_IDENTIFIER' ) ) ).
    _get_entity_set_via_api( lo_request ).
    mo_query_engine_mock->get_parameters( IMPORTING es_select_options = DATA(ls_actual_selopt) ).
    cl_abap_unit_assert=>assert_equals( exp = 11
                                        act = ls_actual_selopt-paging-start_row ).
    cl_abap_unit_assert=>assert_equals( exp = 0
                                        act = ls_actual_selopt-paging-maximum_rows ).
  ENDMETHOD.


  METHOD _get_entity_set_via_api.
    DATA lr_entity TYPE REF TO data.
    mo_dpc->/iwbep/if_mgw_appl_srv_runtime~get_entityset( EXPORTING iv_entity_name           = VALUE #(  )
                                                                    iv_entity_set_name       = VALUE #(  )
                                                                    iv_source_name           = VALUE #(  )
                                                                    it_filter_select_options = VALUE #(  )
                                                                    it_order                 = VALUE #(  )
                                                                    is_paging                = VALUE #(  )
                                                                    it_navigation_path       = VALUE #(  )
                                                                    it_key_tab               = VALUE #(  )
                                                                    iv_filter_string         = VALUE #(  )
                                                                    iv_search_string         = VALUE #(  )
                                                                    io_tech_request_context  = io_request_entityset
                                                          IMPORTING er_entityset             = lr_entity ).
    cl_abap_unit_assert=>assert_not_initial( lr_entity ).
  ENDMETHOD.
ENDCLASS.


CLASS ltc_dedicated_fields DEFINITION INHERITING FROM ltc_base
  FINAL
  FOR TESTING DURATION SHORT RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS select_dedicated_field_neg FOR TESTING RAISING cx_static_check.
    METHODS filter_dedicated_field_neg FOR TESTING RAISING cx_static_check.
ENDCLASS.

CLASS ltc_dedicated_fields IMPLEMENTATION.

  METHOD select_dedicated_field_neg.
    TRY.
        _get_entityset_by_ref( it_select = VALUE #( ( 'MY_IDENTIFIER' ) ( 'FIELD_NOT_DEFINED_IN_SADL' ) ) ).
      CATCH /iwbep/cx_mgw_tech_exception INTO DATA(lx).
        DATA(lx_property_unmapped) = CAST cx_sadl_contract_violation( lx->previous ).
        cl_abap_unit_assert=>assert_equals( act = lx_property_unmapped->name  exp = 'FIELD_NOT_DEFINED_IN_SADL' ).
    ENDTRY.
  ENDMETHOD.


  METHOD filter_dedicated_field_neg.
    TRY.
        _get_entityset_by_ref( it_select_options = VALUE #( ( property = 'FIELD_NOT_DEFINED_IN_SADL' select_options = VALUE #( ( sign = 'I' option = 'EQ' low = space high = space ) ) ) ) ).
      CATCH /iwbep/cx_mgw_tech_exception INTO DATA(lx).
        DATA(lx_property_unmapped) = CAST cx_sadl_contract_violation( lx->previous ).
        cl_abap_unit_assert=>assert_equals( act = lx_property_unmapped->name  exp = 'FIELD_NOT_DEFINED_IN_SADL' ).
    ENDTRY.
  ENDMETHOD.
ENDCLASS.
