CLASS ltd_appl_trans_manager DEFINITION FOR TESTING CREATE PUBLIC FINAL
                             INHERITING FROM cl_sadl_frwk_transact_manager.
  PUBLIC SECTION.
    DATA mv_entity_type   TYPE sadl_entity_type VALUE 'TEST'.
    DATA mv_save_done     TYPE abap_bool.
    DATA mv_rollback_done TYPE abap_bool.
    DATA mv_has_changes   TYPE abap_bool.
    DATA mv_raise_message TYPE abap_bool.
    METHODS if_sadl_transaction_manager~save            REDEFINITION.
    METHODS if_sadl_transaction_manager~has_changes     REDEFINITION.
    METHODS if_sadl_transaction_manager~discard_changes REDEFINITION.
    METHODS if_sadl_batch~modify REDEFINITION.
    METHODS get_entity_type RETURNING VALUE(rv_entity_type) TYPE sadl_entity_type.
    METHODS constructor IMPORTING iv_entity_type TYPE sadl_entity_type.
  PROTECTED SECTION.
  PRIVATE SECTION.

    METHODS _raise_messages.
ENDCLASS.


CLASS ltd_appl_trans_manager IMPLEMENTATION.
  METHOD constructor.
    super->constructor( ).
    mv_entity_type = iv_entity_type.
  ENDMETHOD.

  METHOD get_entity_type.
    rv_entity_type = mv_entity_type.
  ENDMETHOD.

  METHOD if_sadl_transaction_manager~save.
    mv_save_done = abap_true.
    mv_has_changes = abap_false.
    _raise_messages( ).
  ENDMETHOD.

  METHOD if_sadl_transaction_manager~has_changes.
    rv_has_changes = mv_has_changes.
  ENDMETHOD.

  METHOD if_sadl_transaction_manager~discard_changes.
    mv_rollback_done = abap_true.
    mv_has_changes = abap_false.
    _raise_messages( ).
  ENDMETHOD.

  METHOD if_sadl_batch~modify.
    mv_save_done = abap_true.
    mv_has_changes = abap_false.
    _raise_messages( ).
  ENDMETHOD.

  METHOD _raise_messages.
    IF mv_raise_message = abap_true.
      DATA(lx_message1) = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' ).
      DATA(lx_message2) = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'SAVE_DONE' ).
      mo_message_handler->add_messages( it_messages = VALUE #( ( message = lx_message1  severity = if_sadl_message_handler=>co_severity-error
                                                                 locations = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) ) ) )
                                                                 lifetime = if_sadl_message_handler=>co_lifetime-state )
                                                               ( message = lx_message2  severity = if_sadl_message_handler=>co_severity-information ) ) ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.


CLASS ltc DEFINITION FOR TESTING FINAL DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS get_transaction_manager        FOR TESTING.
    METHODS register_transaction           FOR TESTING RAISING cx_sadl_static.
    METHODS register_same_transact_twice   FOR TESTING RAISING cx_sadl_static.
    METHODS register_unbound_transaction   FOR TESTING.
    METHODS register_other_trans_same_type FOR TESTING.
    METHODS register_other_type_same_trans FOR TESTING RAISING cx_sadl_static.
    METHODS register_other_trans_diff_type FOR TESTING RAISING cx_sadl_static. " currently only one transaction manager allowed
    METHODS rollback_without_register      FOR TESTING.
    METHODS rollback_with_register         FOR TESTING RAISING cx_sadl_static.
    METHODS rollback_with_message          FOR TESTING RAISING cx_sadl_static.
    METHODS rollback_register_2_enti_trans FOR TESTING RAISING cx_sadl_static.
    METHODS save_without_register          FOR TESTING.
    METHODS save_with_register             FOR TESTING RAISING cx_sadl_static.
    METHODS save_register_2_entity_trans   FOR TESTING RAISING cx_sadl_static.
    METHODS has_changes                    FOR TESTING RAISING cx_sadl_static.
    METHODS app_trans__manager_has_changes FOR TESTING RAISING cx_sadl_static.
    METHODS save_with_message              FOR TESTING RAISING cx_static_check.
    METHODS batch_with_message             FOR TESTING RAISING cx_static_check.
  PRIVATE SECTION.
    METHODS setup.
    METHODS check_registered_transactions IMPORTING io_transaction_manager       TYPE REF TO cl_sadl_transaction_manager
                                          RETURNING VALUE(ro_entity_transaction) TYPE REF TO if_sadl_transaction_manager.
*    METHODS check_registered_trans_of_type IMPORTING io_transact_manager   TYPE REF TO cl_sadl_transaction_manager
*                                                     io_entity_transaction TYPE REF TO ltd_appl_trans_manager
*                                                     iv_entity_type        TYPE        sadl_entity_type OPTIONAL.
    METHODS _check_has_changes IMPORTING iv_has_changes     TYPE abap_bool
                                         iv_save            TYPE abap_bool OPTIONAL
                                         iv_discard_changes TYPE abap_bool OPTIONAL
                               RAISING   cx_sadl_static.
    METHODS _register_entity_transaction IMPORTING io_entity_transaction TYPE REF TO cl_sadl_frwk_transact_manager
                                                   iv_entity_type        TYPE sadl_entity_type
                                         RAISING   cx_sadl_static.
    METHODS _assert_messages
      IMPORTING
        io_transaction_manager TYPE REF TO cl_sadl_transaction_manager.
    DATA ms_sadl_load TYPE if_sadl_load=>ty_sadl_load.
ENDCLASS.

CLASS cl_sadl_transaction_manager DEFINITION LOCAL FRIENDS ltc.

CLASS ltc IMPLEMENTATION.

  METHOD setup.
    CLEAR cl_sadl_transaction_manager=>go_transaction_manager.
    ms_sadl_load = VALUE #( sadl_uuid = `MY_SADL`
                            bsa_metadata_nodes = VALUE #( ( structure_name = `MY_SADL_NODE`  node_name = `MY_SADL_NODE`
                                                            ref_entity_id = `MY_BO~MY_NODE`  ref_entity_type = `TEST`
                                                            attribute_mapping = VALUE #( ( attribute_name = `MY_SADL_ATTRIBUTE`  referenced_attribute_name = `MY_BO_ATTRIBUTE`
                                                                                           path_id = `PRIM` ) )
                           paths = VALUE #( ( path_id = `PRIM` ) ) ) ) ).
  ENDMETHOD.

  METHOD _check_has_changes.
    CLEAR cl_sadl_transaction_manager=>go_transaction_manager.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_appl_trans_manager) = NEW ltd_appl_trans_manager( 'TEST_TYPE' ).

    lo_transact_manager->register_entity_transaction( io_entity_transaction = lo_appl_trans_manager
                                                      iv_entity_type        = 'TEST_TYPE'
                                                      io_mdp                = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) ) ).
    lo_appl_trans_manager->mv_has_changes = iv_has_changes.
    cl_abap_unit_assert=>assert_equals( act = lo_transact_manager->if_sadl_transaction_manager~has_changes( )
                                        exp = iv_has_changes ).
    IF iv_save = abap_true.
      lo_transact_manager->if_sadl_transaction_manager~save( ).
      cl_abap_unit_assert=>assert_equals( act = lo_transact_manager->if_sadl_transaction_manager~has_changes( )
                                          exp = abap_false ).
    ENDIF.
    IF iv_discard_changes = abap_true.
      lo_transact_manager->if_sadl_transaction_manager~discard_changes( ).
      cl_abap_unit_assert=>assert_equals( act = lo_transact_manager->if_sadl_transaction_manager~has_changes( )
                                          exp = abap_false ).
    ENDIF.
  ENDMETHOD.


  METHOD has_changes.
    _check_has_changes( iv_has_changes = abap_false
                        iv_save        = abap_true ).
    _check_has_changes( iv_has_changes = abap_true
                        iv_save        = abap_true ).
    _check_has_changes( iv_has_changes     = abap_false
                        iv_discard_changes = abap_true ).
    _check_has_changes( iv_has_changes     = abap_true
                        iv_discard_changes = abap_true ).
  ENDMETHOD.

  METHOD app_trans__manager_has_changes.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_appl_trans_manager) = NEW ltd_appl_trans_manager( 'TEST_TYPE' ).
    lo_transact_manager->register_entity_transaction( io_entity_transaction = lo_appl_trans_manager
                                                      iv_entity_type        = 'TEST_TYPE'
                                                      io_mdp                = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) ) ).
    cl_abap_unit_assert=>assert_equals( act = lo_transact_manager->if_sadl_transaction_manager~has_changes( )
                                        exp = abap_false ).
    lo_appl_trans_manager->mv_has_changes = abap_true.
    cl_abap_unit_assert=>assert_equals( act = lo_transact_manager->if_sadl_transaction_manager~has_changes( )
                                        exp = abap_true ).
  ENDMETHOD.


  METHOD check_registered_transactions.
    cl_abap_unit_assert=>assert_equals( act = lines( io_transaction_manager->mt_entity_transaction ) exp = 1 ).
    READ TABLE io_transaction_manager->mt_entity_transaction INTO DATA(ls_entity_transaction) INDEX 1.
    cl_abap_unit_assert=>assert_bound( ls_entity_transaction-transaction ).
    ro_entity_transaction = ls_entity_transaction-transaction.
  ENDMETHOD.


  METHOD get_transaction_manager.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    cl_abap_unit_assert=>assert_bound( lo_transact_manager ).
    cl_abap_unit_assert=>assert_equals( act = cl_sadl_transaction_manager=>get_transaction_manager( ) exp = lo_transact_manager ).
  ENDMETHOD.


  METHOD register_transaction.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    _register_entity_transaction( iv_entity_type = 'TEST_TYPE' io_entity_transaction = NEW ltd_appl_trans_manager( 'TEST_TYPE' ) ).
    cl_abap_unit_assert=>assert_equals( act = lines( lo_transact_manager->mt_entity_transaction ) exp = 1 ).
    READ TABLE lo_transact_manager->mt_entity_transaction INTO DATA(ls_entity_transaction) INDEX 1.
    cl_abap_unit_assert=>assert_bound( ls_entity_transaction-transaction ).
  ENDMETHOD.


  METHOD _register_entity_transaction.
    cl_sadl_transaction_manager=>get_transaction_manager( )->register_entity_transaction( iv_entity_type        = iv_entity_type
                                                                                          io_entity_transaction = io_entity_transaction
                                                                                          io_mdp                = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) ) ).
  ENDMETHOD.


  METHOD register_same_transact_twice.
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DO 2 TIMES.
      _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
      cl_abap_unit_assert=>assert_equals( act = check_registered_transactions( lo_transact_manager )  exp = lo_entity_transaction ).
    ENDDO.
  ENDMETHOD.


  METHOD register_unbound_transaction.
    TRY.
        _register_entity_transaction( iv_entity_type = VALUE #( )  io_entity_transaction = VALUE #( ) ).
        cl_abap_unit_assert=>fail( 'Exception expected' ).
      CATCH cx_sadl_static INTO DATA(lx).
        cl_abap_unit_assert=>assert_initial( cl_sadl_transaction_manager=>get_transaction_manager( )->mt_entity_transaction ).
        cl_abap_unit_assert=>assert_bound( lx ).
        cl_abap_unit_assert=>assert_equals( act = lx->textid  exp = cx_sadl_register_transaction=>cx_unbound_manager ).
    ENDTRY.
  ENDMETHOD.


  METHOD register_other_trans_same_type.
    DATA lx TYPE REF TO cx_sadl_static.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    TRY.
        _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = NEW ltd_appl_trans_manager( 'TEST' ) ).
        check_registered_transactions( lo_transact_manager ).
      CATCH cx_sadl_static INTO lx.
        cl_abap_unit_assert=>assert_not_bound( lx ).
    ENDTRY.

    TRY.
        _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = NEW ltd_appl_trans_manager( 'TEST' )  ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_static INTO lx.
        cl_abap_unit_assert=>assert_equals( act = lx->textid  exp = cx_sadl_register_transaction=>cx_another_manager_registered ).
    ENDTRY.
  ENDMETHOD.


  METHOD register_other_type_same_trans.
    DATA(lo_transact_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST&OTHER' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    check_registered_transactions( lo_transact_manager ).
    TRY.
        _register_entity_transaction( iv_entity_type = 'OTHER' io_entity_transaction = lo_entity_transaction ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_register_transaction INTO DATA(lx). " currently only one transaction manger allowed
        cl_abap_unit_assert=>assert_equals( act = lx->textid
                                            exp = cx_sadl_register_transaction=>cx_another_manager_registered ).
    ENDTRY.
*    cl_abap_unit_assert=>assert_equals( act = lines( lo_transact_manager->mt_entity_transaction ) exp = 2 ).
*    check_registered_trans_of_type( io_transact_manager   = lo_transact_manager
*                                    io_entity_transaction = lo_entity_transaction
*                                    iv_entity_type        = 'TEST' ).
*    check_registered_trans_of_type( io_transact_manager   = lo_transact_manager
*                                    io_entity_transaction = lo_entity_transaction
*                                    iv_entity_type        = 'OTHER' ).
  ENDMETHOD.


  METHOD register_other_trans_diff_type.
    DATA(lo_transact_manager)   = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction_test)   = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction_test ).
    check_registered_transactions( lo_transact_manager ).

    DATA(lo_entity_transaction_other) = NEW ltd_appl_trans_manager( 'OTHER' ).
    TRY.
        _register_entity_transaction( iv_entity_type = 'OTHER' io_entity_transaction = lo_entity_transaction_other ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_register_transaction INTO DATA(lx). " currently only one transaction manger allowed
        cl_abap_unit_assert=>assert_equals( act = lx->textid
                                            exp = cx_sadl_register_transaction=>cx_another_manager_registered ).
    ENDTRY.
*    cl_abap_unit_assert=>assert_equals( act = lines( lo_transact_manager->mt_entity_transaction )  exp = 2 ).
*    check_registered_trans_of_type( io_transact_manager   = lo_transact_manager
*                                    io_entity_transaction = lo_entity_transaction_test ).
*    check_registered_trans_of_type( io_transact_manager   = lo_transact_manager
*                                    io_entity_transaction = lo_entity_transaction_other ).
  ENDMETHOD.


  METHOD rollback_with_register.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    lo_transaction_manager->if_sadl_transaction_manager~discard_changes( ).
    cl_abap_unit_assert=>assert_false( lo_entity_transaction->mv_save_done ).
    cl_abap_unit_assert=>assert_true( lo_entity_transaction->mv_rollback_done ).
  ENDMETHOD.


  METHOD rollback_register_2_enti_trans.
*    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction_test) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction_test ).
    DATA(lo_entity_transaction_other) = NEW ltd_appl_trans_manager( 'OTHER' ).
    TRY.
        _register_entity_transaction( iv_entity_type = 'OTHER' io_entity_transaction = lo_entity_transaction_other ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_register_transaction INTO DATA(lx). " currently only one transaction manger allowed
        cl_abap_unit_assert=>assert_equals( act = lx->textid
                                            exp = cx_sadl_register_transaction=>cx_another_manager_registered ).
    ENDTRY.
*    lo_transaction_manager->if_sadl_transaction_manager~discard_changes( ).
*    cl_abap_unit_assert=>assert_false( lo_entity_transaction_test->mv_save_done ).
*    cl_abap_unit_assert=>assert_true( lo_entity_transaction_test->mv_rollback_done ).
*    cl_abap_unit_assert=>assert_false( lo_entity_transaction_other->mv_save_done ).
*    cl_abap_unit_assert=>assert_true( lo_entity_transaction_other->mv_rollback_done ).
  ENDMETHOD.


  METHOD rollback_without_register.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    lo_transaction_manager->if_sadl_transaction_manager~discard_changes( ).
    cl_abap_unit_assert=>assert_initial( lo_transaction_manager->mt_entity_transaction ).
  ENDMETHOD.


  METHOD save_with_register.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    DATA(lv_failed) = lo_transaction_manager->if_sadl_transaction_manager~save( ).
    cl_abap_unit_assert=>assert_true( lo_entity_transaction->mv_save_done ).
    cl_abap_unit_assert=>assert_false( lo_entity_transaction->mv_rollback_done ).
    cl_abap_unit_assert=>assert_false( lv_failed ).
  ENDMETHOD.


  METHOD save_with_message.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    lo_entity_transaction->mv_raise_message = abap_true.
    lo_transaction_manager->if_sadl_transaction_manager~save( ).
    _assert_messages( lo_transaction_manager ).
  ENDMETHOD.


  METHOD batch_with_message.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    lo_entity_transaction->mv_raise_message = abap_true.
    lo_transaction_manager->if_sadl_batch~modify( ).
    _assert_messages( lo_transaction_manager ).
  ENDMETHOD.


  METHOD rollback_with_message.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    DATA(lo_entity_transaction) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction ).
    lo_entity_transaction->mv_raise_message = abap_true.
    lo_transaction_manager->if_sadl_transaction_manager~discard_changes( ).
    _assert_messages( lo_transaction_manager ).
  ENDMETHOD.


  METHOD save_register_2_entity_trans.
    DATA(lo_entity_transaction_test) = NEW ltd_appl_trans_manager( 'TEST' ).
    _register_entity_transaction( iv_entity_type = 'TEST' io_entity_transaction = lo_entity_transaction_test ).
    DATA(lo_entity_transaction_other) = NEW ltd_appl_trans_manager( 'OTHER').
    TRY.
        _register_entity_transaction( iv_entity_type = 'OTHER' io_entity_transaction = lo_entity_transaction_other ).
        cl_abap_unit_assert=>fail( ).
      CATCH cx_sadl_register_transaction INTO DATA(lx). " currently only one transaction manager allowed
        cl_abap_unit_assert=>assert_equals( act = lx->textid
                                            exp = cx_sadl_register_transaction=>cx_another_manager_registered ).
    ENDTRY.
  ENDMETHOD.


  METHOD save_without_register.
    DATA(lo_transaction_manager) = cl_sadl_transaction_manager=>get_transaction_manager( ).
    lo_transaction_manager->if_sadl_transaction_manager~save( ).
    cl_abap_unit_assert=>assert_initial( lo_transaction_manager->mt_entity_transaction ).
*  ENDMETHOD.


*  METHOD check_registered_trans_of_type.
*    IF iv_entity_type IS INITIAL.
*      DATA(lv_entity_type) = io_entity_transaction->get_entity_type( ).
*    ELSE.
*      lv_entity_type = iv_entity_type.
*    ENDIF.
*    READ TABLE io_transact_manager->mt_entity_transaction INTO DATA(ls_entity_transaction) WITH TABLE KEY entity_type = lv_entity_type.
*    cl_abap_unit_assert=>assert_subrc( ).
*    cl_abap_unit_assert=>assert_bound( ls_entity_transaction-transaction ).
*    cl_abap_unit_assert=>assert_equals( act = ls_entity_transaction-transaction
*                                        exp = io_entity_transaction ).
  ENDMETHOD.


  METHOD _assert_messages.
    DATA(lo_msg_hdlr) = io_transaction_manager->if_sadl_transaction_manager~get_message_handler( ).
    cl_abap_unit_assert=>assert_true( lo_msg_hdlr->has_errors( ) ).
    lo_msg_hdlr->get_messages( IMPORTING et_messages = DATA(lt_messages) ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages )  exp = 2 ).
    cl_abap_unit_assert=>assert_equals( act = lt_messages[ 1 ]-locations
                                        exp = VALUE if_sadl_message_handler=>tt_locations( ( entity_type   = cl_sadl_entity_factory=>co_type-sadl
                                                                                             entity_id     = `MY_SADL~MY_SADL_NODE`
                                                                                             element_names = VALUE #( ( `MY_SADL_ATTRIBUTE` ) ) ) ) ).
  ENDMETHOD.

ENDCLASS.

CLASS ltd_mock_entity_provider DEFINITION FOR TESTING FINAL.
  PUBLIC SECTION.
    INTERFACES if_sadl_entity_provider PARTIALLY IMPLEMENTED.
    CONSTANTS co_type TYPE if_sadl_entity=>ty_entity_type VALUE 'TEST'. "#EC NOTEXT
ENDCLASS.


CLASS ltd_mock_entity_provider IMPLEMENTATION.

  METHOD if_sadl_entity_provider~get_entity.
    CASE iv_id.
      WHEN 'MY_BO~MY_NODE'.
        ro_entity = NEW cl_sadl_entity_mock( iv_type = co_type iv_id = 'MY_BO~MY_NODE' it_primary_key = VALUE #( ( `MY_SADL_KEY` ) ) ).
      WHEN 'MY_BO~MY_SUBNODE'.
        ro_entity = NEW cl_sadl_entity_mock( iv_type = co_type iv_id = 'MY_BO~MY_SUBNODE' it_primary_key = VALUE #( ( `MY_SADL_SUBKEY` ) ) ).
    ENDCASE.
  ENDMETHOD.
ENDCLASS.

CLASS ltc_add_messages DEFINITION FOR TESTING FINAL DURATION SHORT RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    METHODS single_matching                   FOR TESTING RAISING cx_static_check.
    METHODS two_matching_one_key              FOR TESTING RAISING cx_static_check.
    METHODS three_of_4_matching_two_keys      FOR TESTING RAISING cx_static_check.

  PRIVATE SECTION.
    TYPES:
      BEGIN OF node,
        my_sadl_key       TYPE c LENGTH 10,
        my_sadl_attribute TYPE c LENGTH 20,
      END OF node.
    TYPES:
      t_node TYPE STANDARD TABLE OF node WITH DEFAULT KEY.
    TYPES:
      BEGIN OF subnode,
        my_sadl_subkey    TYPE c LENGTH 10,
        my_sadl_attribute TYPE c LENGTH 20,
      END OF subnode.
    TYPES:
      t_subnode TYPE STANDARD TABLE OF subnode WITH DEFAULT KEY.
    DATA ms_sadl_load TYPE if_sadl_load=>ty_sadl_load.
    DATA mo_transaction_mamager TYPE REF TO cl_sadl_transaction_manager.
    METHODS setup.

ENDCLASS.

CLASS cl_sadl_transaction_manager DEFINITION LOCAL FRIENDS ltc_add_messages.

CLASS ltc_add_messages IMPLEMENTATION.

  METHOD setup.
    CLEAR cl_sadl_transaction_manager=>go_transaction_manager.
    ms_sadl_load = VALUE #( sadl_uuid = `MY_SADL`
                            bsa_metadata_nodes = VALUE #( ( structure_name = `MY_SADL_NODE`  node_name = `MY_SADL_NODE`
                                                            ref_entity_id = `MY_BO~MY_NODE`  ref_entity_type = `TEST`
                                                            attribute_mapping = VALUE #( ( attribute_name = `MY_SADL_KEY`  referenced_attribute_name = `MY_BO_KEY`
                                                                                           path_id = `PRIM` is_key = abap_true )
                                                                                         ( attribute_name = `MY_SADL_ATTRIBUTE`  referenced_attribute_name = `MY_BO_ATTRIBUTE`
                                                                                           path_id = `PRIM` ) )
                                                            paths = VALUE #( ( path_id = `PRIM` ) ) )
                                                          ( structure_name = `MY_SADL_SUBNODE`  node_name = `MY_SADL_SUBNODE`
                                                            ref_entity_id = `MY_BO~MY_SUBNODE`  ref_entity_type = `TEST`
                                                            attribute_mapping = VALUE #( ( attribute_name = `MY_SADL_SUBKEY`  referenced_attribute_name = `MY_BO_KEY`
                                                                                           path_id = `SUB` is_key = abap_true )
                                                                                         ( attribute_name = `MY_SADL_SUBATTRIBUTE`  referenced_attribute_name = `MY_BO_ATTRIBUTE`
                                                                                           path_id = `SUB` ) )
                                                            paths = VALUE #( ( path_id = `SUB` ) ) ) ) ).
    mo_transaction_mamager = cl_sadl_transaction_manager=>get_transaction_manager( ).
    mo_transaction_mamager->if_sadl_transaction_manager~get_message_handler( ).
    cl_sadl_aunit_friend=>inject_sadl_entity_provider( iv_entity_type = 'TEST' io_sadl_entity_provider = NEW ltd_mock_entity_provider( ) ).
  ENDMETHOD.


  METHOD single_matching.
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW node( my_sadl_key = 'A' ) ) ) ) ).
    mo_transaction_mamager->_add_messages(
      io_frwk_msg_handler = mo_transaction_mamager->mo_message_handler
      io_mdp = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) )
      it_keys = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST' key_data = NEW t_node( ( my_sadl_key = 'A') )
                         ) ) ).
    mo_transaction_mamager->mo_message_handler->if_sadl_message_handler~get_messages( IMPORTING et_messages = DATA(lt_messages) ).

    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages ) exp = 0 ).
  ENDMETHOD.


  METHOD two_matching_one_key.
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW node( my_sadl_key = 'A' ) ) ) ) ).
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_alt_key_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_SUBNODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW subnode( my_sadl_subkey = 'A' ) ) ) ) ).
    mo_transaction_mamager->_add_messages(
      io_frwk_msg_handler = mo_transaction_mamager->mo_message_handler
      io_mdp = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) )
      it_keys = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST' key_data = NEW t_node( ( my_sadl_key = 'A') ) ) ) ).

    mo_transaction_mamager->mo_message_handler->if_sadl_message_handler~get_messages( IMPORTING et_messages = DATA(lt_messages) ).

    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_messages[ 1 ]-message->t100key exp = cx_sadl_entity_consump_service=>cx_alt_key_persistency ).
  ENDMETHOD.


  METHOD three_of_4_matching_two_keys.
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW node( my_sadl_key = 'A' ) ) ) ) ).
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW node( my_sadl_key = 'B' ) ) ) ) ).
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_element_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_SUBNODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW subnode( my_sadl_subkey = 'A' ) ) ) ) ).
    mo_transaction_mamager->mo_message_handler->add_message( is_message = VALUE #(
      severity  = if_sadl_message_handler=>co_severity-error
      lifetime  = if_sadl_message_handler=>co_lifetime-state
      message   = NEW cx_sadl_entity_consump_service( textid = cx_sadl_entity_consump_service=>cx_alt_key_persistency element = 'DATA_INCONSISTENT' )
      locations = VALUE #( ( entity_id = 'MY_BO~MY_SUBNODE'  entity_type = 'TEST'  element_names = VALUE #( ( `MY_BO_ATTRIBUTE` ) )
                             primary_key_values = NEW subnode( my_sadl_subkey = 'C' ) ) ) ) ).

    mo_transaction_mamager->_add_messages(
      io_frwk_msg_handler = mo_transaction_mamager->mo_message_handler
      io_mdp = cl_sadl_mdp_factory=>get_mdp_for_load( REF #( ms_sadl_load ) )
      it_keys = VALUE #( ( entity_id = 'MY_BO~MY_NODE'  entity_type = 'TEST' key_data = NEW t_node( ( my_sadl_key = 'A') ( my_sadl_key = 'B') ) )
                         ( entity_id = 'MY_BO~MY_SUBNODE'  entity_type = 'TEST' key_data = NEW t_subnode( ( my_sadl_subkey = 'A') ( my_sadl_subkey = 'B') ) ) ) ).

    mo_transaction_mamager->mo_message_handler->if_sadl_message_handler~get_messages( IMPORTING et_messages = DATA(lt_messages) ).

    cl_abap_unit_assert=>assert_equals( act = lines( lt_messages ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_messages[ 1 ]-message->t100key exp = cx_sadl_entity_consump_service=>cx_alt_key_persistency ).
  ENDMETHOD.

ENDCLASS.
