class zcl_hr_d_send_to_hr definition
  public
  inheriting from /bobf/cl_lib_d_supercl_simple final
  create public.

  public section.
    methods /bobf/if_frw_determination~execute redefinition.

  protected section.

  private section.
    types ty_lt_sysmessages type standard table of symsg with default key.

    methods get_child_data
      importing iv_association     type /bobf/obm_node_key
                iv_node            type /bobf/obm_assoc_key
                it_key             type /bobf/t_frw_key
                io_read            type ref to /bobf/if_frw_read
      changing  it_data            type standard table
                ct_export_to_hr    type standard table
      returning value(et_messages) type ref to /bobf/if_frw_message.

    methods send_via_rfc
      exporting es_candidate       type zhr_s_sync_btw_erp_and_hr
      changing  cs_candidate       type zhr_s_sync_btw_erp_and_hr
      returning value(rt_messages) type bapirettab.

    methods modify_candidate
      importing is_candidate type zhr_s_sync_btw_erp_and_hr
                is_ctx       type /bobf/s_frw_ctx_det
                io_modify    type ref to /bobf/if_frw_modify
      changing  ct_header    type zthri_candidateheader.

    methods get_children_data
      importing i_zif_header_associations like zif_hr_i_candidateheader4_c_co=>sc_association
                i_zif_header_node         like zif_hr_i_candidateheader4_c_co=>sc_node
                it_key                    type /bobf/t_frw_key
                io_read                   type ref to /bobf/if_frw_read
                io_modify                 type ref to /bobf/if_frw_modify
      changing  cs_sync_btw_erp_and_hr    type zhr_s_sync_btw_erp_and_hr.

    methods add_bobf_messages
      importing it_messages type bapirettab
                is_ctx      type /bobf/s_frw_ctx_det
      changing  co_messages type ref to /bobf/if_frw_message.

    methods update_family_id
      importing io_modify type ref to /bobf/if_frw_modify
      changing  it_family type zthri_candidate_family.

    methods update_relatives_id
      importing io_modify    type ref to /bobf/if_frw_modify
      changing  it_relatives type zthri_candidate_relatives.

    methods update_language_id
      importing io_modify    type ref to /bobf/if_frw_modify
      changing  it_languages type zthri_candidate_language.

    methods update_language_level_id
      importing io_modify    type ref to /bobf/if_frw_modify
      changing  it_languages type zthri_candidate_language.

    methods update_desired_profession_id
      importing io_modify              type ref to /bobf/if_frw_modify
      changing  it_desired_professions type zthri_candidate_desired_prof.

    methods update_vacanc_id
      importing io_modify type ref to /bobf/if_frw_modify
      changing  it_vacanc type zthri_candidate_vacancies.

    methods send_via_aif
      importing is_aif_send_candidate_to_hr type zsd_s_aif_send_candidate_to_hr.


endclass.


class zcl_hr_d_send_to_hr implementation.
  method /bobf/if_frw_determination~execute.
    data lt_header    type zthri_candidateheader.
    data ls_candidate type zhr_s_sync_btw_erp_and_hr.

    data(zif_header_associations) = zif_hr_i_candidateheader4_c_co=>sc_association.
    data(zif_header_node) = zif_hr_i_candidateheader4_c_co=>sc_node.

    io_read->retrieve( exporting iv_node = is_ctx-node_key
                                 it_key  = it_key
                       importing et_data = lt_header ).

    if lt_header[ 1 ]-isactiveentity = abap_false.
      return.
    endif.

    ls_candidate-candidate_header = corresponding #( lt_header[ 1 ] ).

    get_children_data( exporting i_zif_header_associations = zif_header_associations
                                 i_zif_header_node         = zif_header_node
                                 it_key                    = it_key
                                 io_read                   = io_read
                                 io_modify                 = io_modify
                       changing  cs_sync_btw_erp_and_hr    = ls_candidate ).

    data(lt_messages) = send_via_rfc( importing es_candidate = ls_candidate
                                    changing  cs_candidate = ls_candidate ).

    if lt_messages is not initial.
      add_bobf_messages( exporting it_messages = lt_messages
                                   is_ctx      = is_ctx
                         changing  co_messages = eo_message ).
    else.
      modify_candidate( exporting is_candidate = ls_candidate
                                  is_ctx       = is_ctx
                                  io_modify    = io_modify
                        changing  ct_header    = lt_header ).
    endif.
  endmethod.

  method add_bobf_messages.
    " TODO: parameter IS_CTX is never used (ABAP cleaner)

    if co_messages is not bound.
      co_messages = /bobf/cl_frw_factory=>get_message( ).
    endif.

    loop at it_messages assigning field-symbol(<ls_messages>).
      data(lv_severinity) = /bobf/cm_frw=>co_severity_error.
      co_messages->add_cm( io_message = new  /bobf/cm_frw_symsg( severity     = lv_severinity
                                                                 message_text = conv #( <ls_messages>-message ) ) ).
    endloop.
  endmethod.

  method get_children_data.
    data lt_educations         type zthri_candidate_education.
    data lt_language           type zthri_candidate_language.
    data lt_lastwork           type zthri_candidate_last_work.
    data lt_profrecom          type zthri_candidate_profrecom.
    data lt_relatives          type zthri_candidate_relatives.
    data lt_seminar            type zthri_candidate_seminar.
    data lt_family             type zthri_candidate_family.
    data lt_desired_profession type zthri_candidate_desired_prof.
    data lt_vacanc             type zthri_candidate_vacancies.

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateeducation
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_educations
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_education ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatelanguage
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_language
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_language ).

    update_language_id( exporting io_modify    = io_modify
                        changing  it_languages = lt_language ).

    cs_sync_btw_erp_and_hr-candidate_language = corresponding #( lt_language ).

    update_language_level_id( exporting io_modify    = io_modify
                              changing  it_languages = lt_language ).

    cs_sync_btw_erp_and_hr-candidate_language = corresponding #( lt_language ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatelastwork
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_lastwork
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_last_work ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateprofrecom
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_profrecom
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_profrecom ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidaterelat
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_relatives
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_relatives ).

    update_relatives_id( exporting io_modify    = io_modify
                         changing  it_relatives = lt_relatives ).

    cs_sync_btw_erp_and_hr-candidate_relatives = corresponding #( lt_relatives ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateseminar
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_seminar
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_seminar ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatefamily
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_family
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_family ).

    update_family_id( exporting io_modify = io_modify
                      changing  it_family = lt_family ).

    cs_sync_btw_erp_and_hr-candidate_family = corresponding #( lt_family ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatedesprof
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    changing  it_data         = lt_desired_profession
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_desired_profession ).

    update_desired_profession_id( exporting io_modify              = io_modify
                                  changing  it_desired_professions = lt_desired_profession ).

    cs_sync_btw_erp_and_hr-candidate_desired_profession = corresponding #( lt_desired_profession ).

    get_child_data( exporting iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatevacanc
                               iv_node         = i_zif_header_node-zhr_i_candidateheader
                               it_key          = it_key
                               io_read         = io_read
                    changing   it_data         = lt_vacanc
                               ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_vacanc ).

    update_vacanc_id( exporting io_modify              = io_modify
                      changing  it_vacanc              = lt_vacanc ).

    cs_sync_btw_erp_and_hr-candidate_vacanc = corresponding #( lt_vacanc ).


  endmethod.

  method get_child_data.
    io_read->retrieve_by_association( exporting it_key         = it_key
                                                iv_node        = iv_node
                                                iv_association = iv_association
                                                iv_fill_data   = abap_true
                                      importing et_data        = it_data
                                                eo_message     = et_messages  ).

    move-corresponding it_data to ct_export_to_hr.
  endmethod.

  method modify_candidate.
    loop at ct_header reference into data(ls_header).
      if ls_header->objid is initial.
        ls_header->objid        = is_candidate-candidate_header-objid.
        ls_header->otype        = is_candidate-candidate_header-otype.
        ls_header->plvar        = is_candidate-candidate_header-plvar.
        ls_header->zhr_user     = is_candidate-candidate_header-zhr_user.
        ls_header->useralias    = is_candidate-candidate_header-useralias.
        ls_header->password     = is_candidate-candidate_header-password.
        ls_header->created_data = sy-datum.
        ls_header->created_user = sy-uname.
        ls_header->created_time = sy-uzeit.
      else.
        ls_header->changed_data = sy-datum.
        ls_header->changed_user = sy-uname.
        ls_header->changed_time = sy-uzeit.
      endif.
      io_modify->update( iv_node = is_ctx-node_key
                         iv_key  = ls_header->key
                         is_data = ls_header ).
    endloop.
  endmethod.

  method send_via_rfc.
    data ls_aif_send_candidate_to_hr type zsd_s_aif_send_candidate_to_hr.

    select single name from zhr_i_sever_vh
      into @cs_candidate-candidate_header-business_trip_sever
      where id = @cs_candidate-candidate_header-business_trip_sever_id.

    call function 'ZHR_FM_REGISTER_CANDIDATE'
      destination zcl_recruitment_static=>mv_destination
      exporting
        is_candidate        = cs_candidate
        iv_set_all_data     = abap_true
      importing
        et_messages         = rt_messages
        es_candidate_header = es_candidate.

    try.
        zcl_recruitment_static=>send_email( changing cs_candidate = es_candidate ).
      catch cx_send_req_bcs cx_document_bcs cx_address_bcs.
    endtry.
    delete rt_messages where type <> 'E' and type <> 'A'.

    ls_aif_send_candidate_to_hr-payload = cs_candidate.
    ls_aif_send_candidate_to_hr-key     = cs_candidate-candidate_header-num01_email.

    ls_aif_send_candidate_to_hr-destination = zcl_recruitment_static=>mv_destination.

    send_via_aif( ls_aif_send_candidate_to_hr ).
  endmethod.

  method update_family_id.
    loop at it_family reference into data(ls_family).
      select single id into @data(lv_id)
        from zhr_i_type_relat_vh
        where description = @ls_family->relat_degree.

      if ls_family->relat_id <> lv_id.
        ls_family->relat_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_family
                           iv_key  = ls_family->key
                           is_data = ls_family ).
      endif.
    endloop.
  endmethod.

  method update_relatives_id.
    loop at it_relatives reference into data(ls_relatives).
      select single id into @data(lv_id)
        from zhr_i_type_relat_vh
        where description = @ls_relatives->relat_degree.

      if sy-subrc <> 0.
        clear ls_relatives->relat_degree.
      endif.

      if ls_relatives->relat_id <> lv_id or ls_relatives->relat_degree is initial.
        ls_relatives->relat_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_relatives
                           iv_key  = ls_relatives->key
                           is_data = ls_relatives ).
      endif.
    endloop.
  endmethod.

  method update_language_id.
    loop at it_languages reference into data(ls_languages).
      select single objid into @data(lv_id)
        from zhr_i_name_langu
        where description = @ls_languages->name_language.

      if ls_languages->lang_id <> lv_id.
        ls_languages->lang_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_language
                           iv_key  = ls_languages->key
                           is_data = ls_languages ).
      endif.
    endloop.
  endmethod.

  method update_language_level_id.
    loop at it_languages reference into data(ls_languages).
      select single id into @data(lv_id)
        from zhr_i_level_lang_vh
        where description = @ls_languages->level_name.

      if ls_languages->prof_level <> lv_id.
        ls_languages->prof_level = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_language
                           iv_key  = ls_languages->key
                           is_data = ls_languages ).
      endif.
    endloop.
  endmethod.

  method update_desired_profession_id.
    loop at it_desired_professions reference into data(ls_desired_professions).
      select single id into @data(lv_id)
        from zhr_desirprof_vh
        where stext = @ls_desired_professions->name_profess.

      if ls_desired_professions->id_profess <> lv_id.
        ls_desired_professions->id_profess = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_desired_prof
                           iv_key  = ls_desired_professions->key
                           is_data = ls_desired_professions ).
      endif.
    endloop.
  endmethod.

  method update_vacanc_id.
    loop at it_vacanc reference into data(ls_vacanc).
      select single objid into @data(lv_id)
        from zhr_vacans_vh
        where name_vacanc = @ls_vacanc->name_vacans.

      if ls_vacanc->name_id <> lv_id.
        ls_vacanc->name_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader4_c_co=>sc_node-zhr_i_candidate_vacancies
                           iv_key  = ls_vacanc->key
                           is_data = ls_vacanc ).
      endif.
    endloop.
  endmethod.

  method send_via_aif.
    call function 'ZHR_SEND_CAND_TO_AIF' starting new task 'CANDIDATE'
      exporting
        is_aif_send_candidate_to_hr = is_aif_send_candidate_to_hr.
  endmethod.

endclass.