CLASS lcl_buffer DEFINITION FINAL CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS get_instance
      RETURNING VALUE(ro_instance) TYPE REF TO lcl_buffer.

    CLASS-METHODS check_instance
      RETURNING VALUE(rv_bound) TYPE abap_bool.

    METHODS set_keys
      IMPORTING it_keys                 TYPE /bobf/t_frw_key
      RETURNING VALUE(rv_already_exist) TYPE abap_bool.

    METHODS set_messages
      IMPORTING is_msg                  TYPE symsg
      RETURNING VALUE(rv_already_exist) TYPE abap_bool.

  PRIVATE SECTION.
    CLASS-DATA go_instance TYPE REF TO lcl_buffer.

    DATA mt_invoked_keys TYPE /bobf/t_frw_key.
    DATA mt_messages     TYPE TABLE OF symsg.
ENDCLASS.


CLASS lcl_buffer IMPLEMENTATION.
  METHOD get_instance.
    IF go_instance IS NOT BOUND.
      go_instance = NEW #( ).
    ENDIF.

    ro_instance = go_instance.
  ENDMETHOD.

  METHOD check_instance.
    IF go_instance IS BOUND.
      rv_bound = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD set_keys.
    LOOP AT it_keys ASSIGNING FIELD-SYMBOL(<ls_keys>).
      IF line_exists( mt_invoked_keys[ KEY key_sort
                                       key = <ls_keys>-key ] ).
        rv_already_exist = abap_true.
      ELSE.
        APPEND <ls_keys> TO mt_invoked_keys.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD set_messages.
    IF line_exists( mt_messages[ msgno = is_msg-msgno
                                 msgid = is_msg-msgid
                                 msgty = is_msg-msgty
                                 msgv1 = is_msg-msgv1
                                 msgv2 = is_msg-msgv2
                                 msgv3 = is_msg-msgv3
                                 msgv4 = is_msg-msgv4  ] ).
      rv_already_exist = abap_true.
    ELSE.
      APPEND is_msg TO mt_messages.
    ENDIF.
  ENDMETHOD.
ENDCLASS.