class ZCL_MM_AIF_SEND_TO_TRANSPORT definition
  public
  inheriting from ZCL_PE_AIF_SEND_TO_EXTERNAL
  final
  create public .

public section.
protected section.

  methods SEND
    redefinition .
private section.
ENDCLASS.



CLASS ZCL_MM_AIF_SEND_TO_TRANSPORT IMPLEMENTATION.


  method SEND.
    " -----------------------------------------------------------------------
    "  R E V I S I O N   H I S T O R Y                                     -
    " -----------------------------------------------------------------------
    " AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              -
    "              |            | TRANSPORT REQUESTS                       -
    " -----------------------------------------------------------------------
    " V.ZARETSKY   | 27.06.2024 | AIF Integration with other systems
    "              |            |
    " -----------------------------------------------------------------------

    CONSTANTS lc_success TYPE char15 VALUE 'Message sent'.
    CONSTANTS lc_error   TYPE char20 VALUE 'Incorrect structure'.

    DATA lo_http_client TYPE REF TO if_http_client.
    DATA lt_value       TYPE REF TO data.
    DATA lv_msgtype     TYPE symsgty.
    DATA lv_msg         TYPE char20.

    FIELD-SYMBOLS <lt_send> TYPE STANDARD TABLE.

    TRY.
        cl_http_client=>create_by_destination( EXPORTING destination = iv_destination
                                               IMPORTING client      = lo_http_client ).
        CREATE DATA lt_value LIKE STANDARD TABLE OF io_payload.
        ASSIGN lt_value->* TO <lt_send>.
        APPEND io_payload TO <lt_send>.
        DATA(lv_json) = /ui2/cl_json=>serialize( data = <lt_send> ).
        lo_http_client->request->set_method( 'POST' ).
        lo_http_client->request->set_formfield_encoding( lo_http_client->request->co_encoding_url ).
        lo_http_client->request->set_cdata( lv_json ).
        lo_http_client->send( EXCEPTIONS http_communication_failure = 1
                                         http_invalid_state         = 2 ).
      CATCH zcx_pe_aif INTO DATA(lo_exc).
        CALL FUNCTION '/AIF/UTIL_ADD_MSG'
          EXPORTING msgty      = lo_exc->if_t100_dyn_msg~msgty
                    msgid      = lo_exc->if_t100_message~t100key-msgid
                    msgno      = lo_exc->if_t100_message~t100key-msgno
                    msgv1      = lo_exc->if_t100_dyn_msg~msgv1
                    msgv2      = lo_exc->if_t100_dyn_msg~msgv2
                    msgv3      = lo_exc->if_t100_dyn_msg~msgv3
                    msgv4      = lo_exc->if_t100_dyn_msg~msgv4
          TABLES    return_tab = rt_messages.
        RETURN.
    ENDTRY.
    lo_http_client->receive( EXCEPTIONS http_invalid_state     = 1
                                    http_processing_failed     = 2
                                    http_communication_failure = 3
                                    OTHERS                     = 4 ).
    lo_http_client->response->get_status( IMPORTING code = DATA(lv_code) ).
    lo_http_client->close( ).
    IF lv_code = 200.
      lv_msgtype = 'S'.
      lv_msg = lc_success.
      CALL FUNCTION '/AIF/UTIL_ADD_MSG'
        EXPORTING msgty      = lv_msgtype
                  msgid      = '/AIF/MES'
                  msgno      = '262'
                  msgv1      = lv_msg
        TABLES    return_tab = rt_messages.
    ELSE.
      lv_msgtype = 'E'.
      lv_msg = lc_error.
      CALL FUNCTION '/AIF/UTIL_ADD_MSG'
        EXPORTING msgty      = lv_msgtype
                  msgid      = '/AIF/MES'
                  msgno      = '320'
                  msgv1      = lv_msg
        TABLES    return_tab = rt_messages.
    ENDIF.
  endmethod.
ENDCLASS.