*CLASS lcl_data_provider DEFINITION
*                        CREATE PUBLIC.
*
*  PUBLIC SECTION.
*    METHODS:
*      create_http_client            IMPORTING iv_rfcdest      TYPE rfcdest
*                                    EXPORTING eif_http_client TYPE REF TO if_http_client
*                                    RAISING   zcx_pe_aif,
*      post                          IMPORTING iif_request    TYPE REF TO if_rest_entity
*                                    EXPORTING es_response    TYPE zcl_pe_kafka_producer=>mtyp_s_api_response
*                                              ev_status      TYPE i
*                                    CHANGING  co_rest_client TYPE REF TO cl_rest_http_client
*                                    RAISING   cx_rest_client_exception.
*
*  PRIVATE SECTION.
*    METHODS get_response
*      EXPORTING es_response    TYPE zcl_pe_kafka_producer=>mtyp_s_api_response
*                ev_status      TYPE i
*      CHANGING
*                co_rest_client TYPE REF TO cl_rest_http_client.
*ENDCLASS.
*
*
*CLASS lcl_data_provider IMPLEMENTATION.
*
*  METHOD get_namespace_value.
*    DATA(lv_namespace_upper) = to_upper( iv_namespace ).
*    SELECT config_value
*    INTO TABLE rt_value
*      FROM zpe_t_kafka_ns
*      WHERE ( namespace = iv_namespace OR namespace = lv_namespace_upper )
*        AND config_key = iv_key.
*    IF sy-subrc <> 0 OR rt_value IS INITIAL.
*      RAISE EXCEPTION TYPE zcx_pe_kafka_producer MESSAGE e001(zpe_kafka_producer).
*    ENDIF.
*
*  ENDMETHOD.
*
*  METHOD get_kafka_configuration_value.
*    SELECT config_value
*      INTO TABLE rt_value
*        FROM zpe_t_kafka_conf
*        WHERE topic = iv_topic
*        AND config_key = iv_key.
*    IF sy-subrc <> 0.
*      CLEAR rt_value[].
*    ENDIF.
*
*  ENDMETHOD.
*
*  METHOD create_http_client.
*    cl_http_client=>create_by_destination( EXPORTING destination = iv_rfcdest
*                                              IMPORTING  client = eif_http_client
*                                              EXCEPTIONS argument_not_found       = 1
*                                                         destination_not_found    = 2
*                                                         destination_no_authority = 3
*                                                         plugin_not_active        = 4
*                                                         internal_error           = 5
*                                                         OTHERS                   = 6 ).
*    IF sy-subrc <> 0.
*      RAISE EXCEPTION TYPE zcx_pe_kafka_producer MESSAGE e002(zpe_kafka_producer).
*    ENDIF.
*  ENDMETHOD.
*
*  METHOD post.
*    co_rest_client->if_rest_resource~post( iif_request ).
*    get_response( IMPORTING es_response = es_response
*                                  ev_status = ev_status
*                        CHANGING co_rest_client = co_rest_client ).
*  ENDMETHOD.
*  METHOD get_response.
*************************************************************************
**  R E V I S I O N   H I S T O R Y                                     *
*************************************************************************
** AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
**              |            | TRANSPORT REQUESTS                       *
*************************************************************************
** RIOSNAT      | 10.03.2022 | 10163     : Kafka helper tool            *
**              |            | DS4K914528                               *
**----------------------------------------------------------------------*
*    DATA ls_offset TYPE zcl_pe_kafka_producer=>mtyp_s_offset.
*    DATA(lif_response) = co_rest_client->if_rest_client~get_response_entity( ).
*    DATA(lv_status) = lif_response->get_header_field( '~status_code' ).
*    ev_status = CONV #( lv_status ).
*    IF cl_rest_status_code=>is_success( iv_code = ev_status ).
*      /ui2/cl_json=>deserialize( EXPORTING json = lif_response->get_string_data( )
*                               CHANGING data = es_response ).
*    ELSE.
*      /ui2/cl_json=>deserialize( EXPORTING json = lif_response->get_string_data( )
*                               CHANGING data = ls_offset ).
*      es_response = VALUE zcl_pe_kafka_producer=>mtyp_s_api_response( offsets = VALUE #( ( ls_offset ) ) ).
*    ENDIF.
*  ENDMETHOD.
*ENDCLASS.