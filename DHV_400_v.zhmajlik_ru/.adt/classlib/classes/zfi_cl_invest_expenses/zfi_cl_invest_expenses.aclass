class ZFI_CL_INVEST_EXPENSES definition
  public
  create public .

public section.

  data GV_REPORT_TITLE type STRING .
  class-data GV_INITIATED type ABAP_BOOL .
  data MV_OPTION type CHAR3 .

  class-methods CHECK_BUKRS
    importing
      !IT_BUKRS type BUKRS_RAN_ITAB .
  methods CONSTRUCTOR
    importing
      value(IT_BUKRS) type BUKRS_RAN_ITAB
      value(IV_PERIOD) type FPPER
      value(IV_ALVDEF) type DISVARIANT-VARIANT
      value(IV_TYPE) type FLAG
      value(IV_TEMPL) type BAPIBDS01-OBJKEY
      value(IV_DEBUG) type ZFI_SUBPAR optional .
  class-methods F4_VARIANT
    importing
      value(IV_VARIANT) type DISVARIANT-VARIANT optional
    returning
      value(RV_VARIANT) type DISVARIANT-VARIANT .
  methods GET_DOCS_ACCORDING_TO_SUBPAR .
  methods SELECT_DATA .
  methods SHOW_DATA .
  methods END_OF_SELECTION
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods EXPORT_RESULTS
    importing
      value(IV_BKR) type ABAP_BOOL optional
      value(IV_SUBPAR) type ZFI_SUBPAR optional .
  class-methods LOAD_DEFAULT_SSCR .
protected section.

  types:
    BEGIN OF gty_s_setup,
        period        TYPE hcp_s_begda_endda,
        reptype       TYPE flag,
        alvdef        TYPE disvariant-variant,
        template      TYPE bapibds01-objkey,
        debug         TYPE string,
        it_bukrs      TYPE RANGE OF bukrs,
        it_hkonts     TYPE RANGE OF hkont,
        it_params     TYPE zfi_t_inv_costs_param,
        it_hdb_params TYPE zfi_cl_invest_expenses_hdb=>gty_t_hdb_params,
      END OF gty_s_setup .

  data GS_SETUP type GTY_S_SETUP .
  data GT_DATA type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_COSTS .
  data GT_DOCUMENTS type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS .
  data GR_GRID type ref to CL_GUI_ALV_GRID .

  methods EXPORT .
  methods VIEW_DOCUMENTS
    importing
      !IV_INDEX type I .
  methods VIEW_DOCUMENTS_NEW
    importing
      !IV_INDEX type I .
  methods BUILD_FIELDCAT
    returning
      value(RT_FCAT) type LVC_T_FCAT .
  methods CALCULATE
    importing
      value(IV_OPER) type CLIKE optional
      value(IV_OP1) type ZFI_S_INV_COSTS-VALUE1 optional
      value(IV_OP2) type ZFI_S_INV_COSTS-VALUE1 optional
    returning
      value(RV_RESULT) type ZFI_S_INV_COSTS-VALUE1 .
  methods RUN_CALCULATION
    importing
      !IT_DATA type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_COSTS .
  methods READ_HDB_PARAMS .
  methods READ_PARAMS .
  methods ON_TOOLBAR_EVT
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods ON_DOUBLE_CLICK_EVT
    for event DOUBLE_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW
      !E_COLUMN
      !ES_ROW_NO .
  methods ON_SALV_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods ON_UCOMM_EVT
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
private section.

  data MO_LOG type ref to IF_RECA_MESSAGE_LIST .
  data MT_TRN type ZFI_SLDTRN_HDB=>GTY_T_TRN_DOCS .
  data MT_INNFUND type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS .
  data MT_NOINNFUND type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS .
  data MT_SALDO type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS .

  methods SHOW_LOG .
  methods GET_TRN_DOCS
    exporting
      value(ET_TURN) type ZFI_SLDTRN_HDB=>GTY_T_TRN_DOCS
    raising
      ZCX_ERROR .
  methods EMPHASIZE_LINES
    importing
      value(IR_EXCEL) type ref to ZCL_EXCEL_SIMPLE
      value(IT_BOLD) type STANDARD TABLE .
  methods CALCULATE_INDEX
    importing
      !IV_SUBPAR type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_S_COST-SUBPAR
    returning
      value(RV_INDEX) type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_S_HDB_PARAM-INDEX .
  methods CHECK_ADD_GLOBAL_HKONTS
    importing
      !IT_RANGE type BSPL_SAKNR_RANGE_T .
  methods GET_NOINNFUND_DOCS
    importing
      !IT_DOCS type ZFI_SLDTRN_HDB=>GTY_T_TRN_DOCS
    exporting
      !ET_DATA type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS
    raising
      ZCX_ERROR .
  methods GET_INNFUND_DOCS
    importing
      !IT_DOCS type ZFI_SLDTRN_HDB=>GTY_T_TRN_DOCS
    exporting
      !ET_DATA type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS
    raising
      ZCX_ERROR .
  methods GET_SALDO
    exporting
      !ET_DATA type ZFI_CL_INVEST_EXPENSES_HDB=>GTY_T_DOCUMENTS
    raising
      ZCX_ERROR .
ENDCLASS.



CLASS ZFI_CL_INVEST_EXPENSES IMPLEMENTATION.


  METHOD build_fieldcat.
    rt_fcat[] = CORRESPONDING #(
      cl_salv_data_descr=>read_structdescr(
        CAST cl_abap_structdescr(
          CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( me->gt_data[] ) )->get_table_line_type( ) ) ) ).

    LOOP AT rt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'INDEX'.
          <ls_fcat>-tech = abap_true.
        WHEN 'SUBPAR'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-01l.
          <ls_fcat>-scrtext_m = TEXT-01m.
          <ls_fcat>-scrtext_s = TEXT-01s.
        WHEN 'VALUE1'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-02l.
          <ls_fcat>-scrtext_m = TEXT-02m.
          <ls_fcat>-scrtext_s = TEXT-02s.
        WHEN 'VALUE2'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-03l.
          <ls_fcat>-scrtext_m = TEXT-03m.
          <ls_fcat>-scrtext_s = TEXT-03s.
          <ls_fcat>-no_out = abap_true.   "#RM 12826(121) - убрать колоку "в т.ч..." - отдельной строкой выводить показатель
        WHEN 'ITEM_NAME'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-04l.
          <ls_fcat>-scrtext_m = TEXT-04m.
          <ls_fcat>-scrtext_s = TEXT-04s.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD calculate.
    CASE iv_oper.
      WHEN ''.                          "Пустой параметр придет с первым операндом в выражении
        rv_result = iv_op1 + iv_op2.
      WHEN '+'.
        rv_result = iv_op1 + iv_op2.
      WHEN '-'.
        rv_result = iv_op1 - iv_op2.
      WHEN '*'.
        rv_result = iv_op1 * iv_op2.
      WHEN '/'.
        IF iv_op2 <> 0.
          rv_result = iv_op1 / iv_op2.
        ENDIF.
    ENDCASE.
  ENDMETHOD.


  METHOD calculate_index.
    SPLIT iv_subpar AT '.' INTO TABLE DATA(lt_splits).

    "Индекс - триадами.
    LOOP AT lt_splits[] ASSIGNING FIELD-SYMBOL(<ls_split>).
      DATA(lv_off) = sy-tabix * 3 - 3.
      rv_index+lv_off(3) = CONV numc3( <ls_split> ).
    ENDLOOP.
  ENDMETHOD.


  METHOD check_add_global_hkonts.
    DATA: lv_hkont TYPE saknr.

    LOOP AT it_range[] ASSIGNING FIELD-SYMBOL(<ls_range>) WHERE sign = 'I'.
      CASE <ls_range>-option.
        WHEN 'CP'.
          "Дозаполнить нулями и проверить на вхождение в уже созанный диапазон как EQ.
          lv_hkont = replace( val = <ls_range>-low sub = '*' with = '0000000000' ).
        WHEN 'EQ'.
          lv_hkont = <ls_range>-low.
        WHEN OTHERS.
          "Пока неясно как обрабатывать BT, NP, прочие неописанные (в настройке их нет) - пропускаем
          CONTINUE.
      ENDCASE.

      IF lv_hkont NOT IN gs_setup-it_hkonts[] OR gs_setup-it_hkonts[] IS INITIAL.
        APPEND <ls_range> TO gs_setup-it_hkonts[].
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD check_bukrs.
    SELECT bukrs
      INTO TABLE @DATA(lt_bukrs)
      FROM t001
      WHERE bukrs IN @it_bukrs[].

    LOOP AT lt_bukrs[] ASSIGNING FIELD-SYMBOL(<lv_bukrs>).
      AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
         ID 'ACTVT' FIELD '03'
         ID 'BUKRS' FIELD <lv_bukrs>.
      IF sy-subrc <> 0.
        MESSAGE e460(f5) WITH  <lv_bukrs>. "'Нет полномочий для БЕ'
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD constructor.
    gs_setup = VALUE #(
      period   = VALUE #(
                   begda = |{ iv_period(4) }0101|
                   endda = cl_hrpad_date_computations=>get_last_day_in_month( date_in = |{ iv_period(6) }01| ) )
      reptype  = iv_type
      alvdef   = iv_alvdef
      template = iv_templ
      debug    = iv_debug
      it_bukrs = it_bukrs[] ).

    me->read_params( ).
    me->read_hdb_params( ).

    me->gv_report_title = SWITCH #( gs_setup-reptype
      WHEN 1 THEN TEXT-tt1
      WHEN 2 THEN TEXT-tt2 ).

  ENDMETHOD.


  METHOD emphasize_lines.
    DATA:
      BEGIN OF ls_size,
        top  TYPE i,
        left TYPE i,
        rows TYPE i,
        cols TYPE i,
      END OF ls_size.

    ir_excel->gr_handle->get_dimension(
      EXPORTING
        name = 'TABLE'
      IMPORTING
        top     = ls_size-top
        left    = ls_size-left
        rows    = ls_size-rows
        columns = ls_size-cols ).

    LOOP AT it_bold[] ASSIGNING FIELD-SYMBOL(<lv_bold>).
      ir_excel->gr_handle->insert_range_dim(
        name      = 'FONT'
        top       = ls_size-top + <lv_bold> - 1
        left      = ls_size-left
        rows      = 1
        columns   = ls_size-cols ).

      ir_excel->gr_handle->set_font(
        rangename = 'FONT'
        family    = ''
        size      = -1
        bold      = 1
        italic    = -1
        align     = -1 ).

    ENDLOOP.
  ENDMETHOD.


  METHOD end_of_selection.
    IF lines( me->gt_data[] ) > 0.
      rv_result = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD export.
    TYPES:
      BEGIN OF lty_s_xls,
        subpar    TYPE zfi_s_inv_costs_xls-subpar,
        item_name TYPE zfi_s_inv_costs_xls-item_name,
        value1    TYPE zfi_s_inv_costs_xls-value1,
        value2    TYPE zfi_s_inv_costs_xls-value2,
      END OF lty_s_xls.

    DATA:
      lv_error      TYPE c LENGTH 100,
      lt_xls        TYPE STANDARD TABLE OF lty_s_xls WITH UNIQUE SORTED KEY key COMPONENTS subpar,
      lt_bold_lines TYPE STANDARD TABLE OF sy-tabix,
      lt_cells      TYPE zcl_excel_simple=>gty_t_cell_value.

    LOOP AT me->gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>).
      READ TABLE lt_xls[] ASSIGNING FIELD-SYMBOL(<ls_xls>) WITH TABLE KEY key COMPONENTS subpar = <ls_data>-subpar.
      IF sy-subrc <> 0.
        INSERT VALUE #( subpar = <ls_data>-subpar
                        item_name = <ls_data>-item_name ) INTO TABLE lt_xls[] ASSIGNING <ls_xls>.
        IF <ls_data>-color IS NOT INITIAL.
          APPEND sy-tabix TO lt_bold_lines[].
        ENDIF.
      ENDIF.
      <ls_xls>-value1 = <ls_xls>-value1 + <ls_data>-value1.
      <ls_xls>-value2 = <ls_xls>-value2 + <ls_data>-value2.
    ENDLOOP.
    IF lt_xls[] IS INITIAL.
      RETURN.
    ENDIF.

    DATA(lr_excel) = NEW zcl_excel_simple( ).
    lr_excel->load_from_reposid(
      EXPORTING
        iv_classname = 'ZIBA_DOCS'
        iv_keyid     = 'FI'
        iv_formname  = me->gs_setup-template
        iv_docname   = SWITCH char140( me->gs_setup-reptype
                          WHEN 1 THEN TEXT-tt1
                          WHEN 2 THEN TEXT-tt2 )
      IMPORTING
        ev_error     = lv_error ).
    IF lv_error IS NOT INITIAL.
      FREE lr_excel.
      MESSAGE i069(zfi) WITH lv_error.
      RETURN.
    ENDIF.

    lr_excel->out_table(
      it_data     = lt_xls[]
      iv_sheet     = 1
      iv_name     = 'TABLE'
      iv_insert   = 'X' ).

    lr_excel->execute_macro( EXPORTING iv_macro_name = 'Module1.Macro1' ). "DHVK951325

    me->emphasize_lines( ir_excel = lr_excel
                         it_bold  = lt_bold_lines[] ).

    zcl_names=>get_org_names( EXPORTING it_bukrs    = me->gs_setup-it_bukrs[]
                              IMPORTING ev_org_name = DATA(lv_org_name)
                                        ev_butxt    = DATA(lv_butxt)
                                        ev_bukrs    = DATA(lv_buk) ).

    "Текстовки по БЕ
    APPEND VALUE #( name = 'BUKRS' ) TO lt_cells[] ASSIGNING FIELD-SYMBOL(<ls_cell>).
    SELECT COUNT(*)
      FROM t093c
      INTO @DATA(lv_count).

    SELECT bukrs
      FROM t093c
      INTO TABLE @DATA(lt_t093c)
      WHERE bukrs IN @me->gs_setup-it_bukrs[].

    CASE lines( lt_t093c[] ).
      WHEN 1.
        <ls_cell>-value = lv_butxt.
      WHEN lv_count.
        <ls_cell>-value = lv_org_name.
      WHEN OTHERS.
        <ls_cell>-value = lv_buk.
    ENDCASE.

    SELECT SINGLE a1~ltx AS low, a2~ltx AS high
      FROM t247 AS a1
        LEFT JOIN t247 AS a2 ON a2~spras = a1~spras
                            AND a2~mnr = @me->gs_setup-period-endda+4(2)
      INTO @DATA(ls_monthes)
      WHERE a1~spras = @sy-langu
        AND a1~mnr   = @me->gs_setup-period-begda+4(2).
    TRANSLATE ls_monthes TO LOWER CASE.

    APPEND VALUE #( name = 'DATES' ) TO lt_cells[] ASSIGNING <ls_cell>.
    <ls_cell>-value = |{ TEXT-x01 } & { TEXT-x02 } { gs_setup-period-endda(4) } { TEXT-x03 }|.
    <ls_cell>-value = replace( val = <ls_cell>-value
                               sub = '&'
                               with = COND #( WHEN gs_setup-period-begda(6) <> gs_setup-period-endda(6)
                                          THEN |{ ls_monthes-low } – { ls_monthes-high }|
                                          ELSE ls_monthes-low ) ).

    SELECT *
      FROM t001
      INTO TABLE @DATA(lt_bukrs)
      WHERE bukrs IN @gs_setup-it_bukrs[].

    zcl_names=>get_fio_formatted(
      EXPORTING
        iv_uname  = sy-uname
        iv_format = 'FML'                                                                  "ins 16.09.2024 V.Lipskij #13958
      IMPORTING
        et_pernr  = DATA(lt_pernr) ).
    IF lines( lt_pernr ) > 0.
      lr_excel->set_celn( iv_name = 'EXECUTER' iv_value = lt_pernr[ 1 ]-ename ).
    ENDIF.

    IF lines( lt_bukrs[] ) = 1.
      zcl_names=>get_top_chief(
        EXPORTING
          iv_bukrs    = lt_bukrs[ 1 ]-bukrs
          iv_desc_fio = 'X'                                                                 "ins 16.09.2024 V.Lipskij #13958
        IMPORTING
          es_names = DATA(ls_names) ).
      lr_excel->set_celn( iv_name = 'ACCNT' iv_value = ls_names-acc_s_fio ).
      lr_excel->set_celn( iv_name = 'HEAD' iv_value = ls_names-head_s_fio ).
    ENDIF.

    " заполнение заголовка
    lr_excel->add_cell_to_list( lt_cells[] ).
    lr_excel->cell_list_output( ).
  ENDMETHOD.


  METHOD export_results.
    DATA(lt_out) = VALUE zfi_t_inv_costs(
      FOR <ls_data> IN me->gt_data[]
      WHERE ( subpar = iv_subpar )
      ( CORRESPONDING #( <ls_data> ) ) ).

    IF iv_bkr IS INITIAL.
      LOOP AT lt_out[] ASSIGNING FIELD-SYMBOL(<ls_out>).
        IF sy-tabix = 1.
          DATA(ls_out) = <ls_out>.
        ELSE.
          ls_out-value1 = ls_out-value1 + <ls_out>-value1.
          ls_out-value2 = ls_out-value2 + <ls_out>-value2.
        ENDIF.
      ENDLOOP.
      IF sy-subrc = 0.
        lt_out[] = VALUE #( ( ls_out ) ).
      ENDIF.
    ENDIF.

    IF lt_out[] IS INITIAL.
      RETURN.
    ENDIF.

    EXPORT gt_report_exp FROM lt_out[] TO MEMORY ID zfi_memory=>gv_zfi_inv_costs.
  ENDMETHOD.


  METHOD f4_variant.
    "F4 варианта + валидация введенного вручную
    DATA(ls_vari) = VALUE disvariant( report = sy-cprog variant = iv_variant ).
    IF iv_variant IS SUPPLIED.
      IF iv_variant IS INITIAL.
        RETURN.
      ENDIF.
      CALL FUNCTION 'REUSE_ALV_VARIANT_EXISTENCE'
        EXPORTING
          i_save     = 'A'
        CHANGING
          cs_variant = ls_vari
        EXCEPTIONS
          OTHERS     = 1.
      IF sy-subrc <> 0.
        RETURN.
        MESSAGE e321(m7) WITH iv_variant sy-cprog.
      ENDIF.
    ELSE.
      CALL FUNCTION 'LVC_VARIANT_F4'
        EXPORTING
          is_variant    = ls_vari
          i_save        = 'A'
        IMPORTING
          es_variant    = ls_vari
        EXCEPTIONS
          not_found     = 1
          program_error = 2
          OTHERS        = 3.
      IF sy-subrc = 0.
        rv_variant = ls_vari-variant.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_docs_according_to_subpar.
    DATA: lt_hdb     TYPE zfi_cl_invest_expenses_hdb=>gty_t_hdb_params.
    DATA: lt_subpar_data TYPE zfi_cl_invest_expenses_hdb=>gty_t_costs.

    DATA(lt_dates) = VALUE date_t_range( (
      sign    = 'I'
      option  = 'BT'
      low     = gs_setup-period-begda
      high    = gs_setup-period-endda ) ).

    DATA ls_hdb_params TYPE zfi_cl_invest_expenses_hdb=>gty_s_hdb_param.

    "-->
    LOOP AT gs_setup-it_hdb_params ASSIGNING FIELD-SYMBOL(<fs_hdb_params>).
      IF <fs_hdb_params>-shkzg = 'Д'.
        <fs_hdb_params>-shkzg = 'S'.

        MOVE-CORRESPONDING <fs_hdb_params> TO ls_hdb_params.
        ls_hdb_params-shkzg = 'H'.
        ls_hdb_params-new_line = 'Д'.

"-->AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN
*        IF ls_hdb_params-mult = 1.
*          ls_hdb_params-mult = -1.
*        ELSEIF ls_hdb_params-mult = -1.
*          ls_hdb_params-mult = 1.
*        ENDIF.
"--<AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN

        APPEND ls_hdb_params TO gs_setup-it_hdb_params.
      ELSEIF <fs_hdb_params>-shkzg = 'К'.
        <fs_hdb_params>-shkzg = 'H'.

        MOVE-CORRESPONDING <fs_hdb_params> TO ls_hdb_params.
        ls_hdb_params-shkzg = 'S'.
        ls_hdb_params-new_line = 'К'.

*-->AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN
*        IF ls_hdb_params-mult = 1.
*          ls_hdb_params-mult = -1.
*        ELSEIF ls_hdb_params-mult = -1.
*          ls_hdb_params-mult = 1.
*        ENDIF.
*--<AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN

        APPEND ls_hdb_params TO gs_setup-it_hdb_params.
      ENDIF.
    ENDLOOP.

    SORT gs_setup-it_hdb_params BY subpar.
    "<-- AK_RUBAHOV #25625 ZFI_INVEST_EXPENSES В отчет не попадает сумма

*   --> AK_Gubarevich #26746 ZFI_INVEST_EXPENSES Оптимизация программы
    UNASSIGN <fs_hdb_params>.
    DATA(lv_line) = lines( gs_setup-it_hdb_params ).

    TRY.
        get_trn_docs( IMPORTING et_turn = mt_trn ).
      CATCH zcx_error.
        show_log( ).
        RETURN.
    ENDTRY.

    TRY.
        get_innfund_docs( EXPORTING it_docs = mt_trn
                          IMPORTING et_data = mt_innfund ).
      CATCH zcx_error.
        show_log( ).
        RETURN.
    ENDTRY.

    TRY.
        get_noinnfund_docs( EXPORTING it_docs = mt_trn
                            IMPORTING et_data = mt_noinnfund ).
      CATCH zcx_error.
        show_log( ).
        RETURN.
    ENDTRY.

    TRY.
        get_saldo( IMPORTING et_data = mt_saldo ).
      CATCH zcx_error.
        show_log( ).
        RETURN.
    ENDTRY.

    LOOP AT gs_setup-it_hdb_params ASSIGNING <fs_hdb_params>.

      cl_progress_indicator=>progress_indicate(
          i_text               = |В обработке... { <fs_hdb_params>-subpar } - { <fs_hdb_params>-item_name  }|
          i_processed          = sy-tabix
          i_total              = lv_line
          i_output_immediately = abap_true ).

      IF <fs_hdb_params>-shkzg = '' OR <fs_hdb_params>-filter = ''.
        CONTINUE.
      ENDIF.

      CLEAR lt_hdb[].
      APPEND INITIAL LINE TO lt_hdb ASSIGNING FIELD-SYMBOL(<fs_hdb>).
      IF sy-subrc EQ 0.
        MOVE <fs_hdb_params> TO <fs_hdb>.
      ENDIF.

      IF <fs_hdb_params>-shkzg = 'S' OR <fs_hdb_params>-shkzg = 'H' OR <fs_hdb_params>-shkzg = 'A'.

        CASE <fs_hdb_params>-innfond.
          WHEN abap_true.

            zfi_cl_invest_expenses_hdb=>apply_filter( EXPORTING it_docs  = mt_innfund
                                                                iv_filter = CONV #( <fs_hdb_params>-filter )
                                                      IMPORTING et_data  = DATA(lt_data) ).

          WHEN abap_false.
            zfi_cl_invest_expenses_hdb=>apply_filter( EXPORTING it_docs  = mt_noinnfund
                                                                iv_filter = CONV #( <fs_hdb_params>-filter )
                                                      IMPORTING et_data  = lt_data ).
          WHEN OTHERS.
        ENDCASE.

      ELSEIF   <fs_hdb_params>-shkzg = 'I' OR <fs_hdb_params>-shkzg = 'O'.
        zfi_cl_invest_expenses_hdb=>apply_filter( EXPORTING it_docs  = mt_saldo
                                                            iv_filter = CONV #( <fs_hdb_params>-filter_saldo )
                                                  IMPORTING et_data  = lt_data ).

      ENDIF.

      TRY.
          zfi_cl_invest_expenses_hdb=>read_data_for_subpar(
         EXPORTING
           iv_begda        = gs_setup-period-begda
           iv_endda        = gs_setup-period-endda
           it_param_hdb    = lt_hdb[]
           iv_debug_param  = gs_setup-debug
           it_data         = lt_data
          CHANGING
            ct_data         = lt_subpar_data
        ).
        CATCH cx_root INTO DATA(lr_error).
          MESSAGE e007(zfi_invest) INTO DATA(lv_dummy).
          IF mo_log IS NOT BOUND.
            mo_log = cf_reca_message_list=>create( ).
          ENDIF.
          mo_log->add_symsg( ).
          show_log( ).
          RETURN.
      ENDTRY.
    ENDLOOP.

    zfi_cl_invest_expenses_hdb=>create_result_table(
    EXPORTING
      iv_begda        = gs_setup-period-begda
      iv_endda        = gs_setup-period-endda
      iv_bukrs_flt    = cl_shdb_seltab=>combine_seltabs(
                            it_named_seltabs = VALUE #(
                            ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                            ) )
      it_param_hdb    = gs_setup-it_hdb_params
      it_data         = lt_subpar_data
    IMPORTING
      et_output       = DATA(lt_result)

    ).

* <-- AK_Gubarevich #26746 ZFI_INVEST_EXPENSES Оптимизация программы

    me->run_calculation( lt_result[] ).

    SORT me->gs_setup-it_hdb_params[] BY subpar.
  ENDMETHOD.


  METHOD get_innfund_docs.
    TRY.
        cl_progress_indicator=>progress_indicate(
         i_text               = |В обработке... Выборка данных из БД...|
         i_processed          = 4
         i_total              = 10
         i_output_immediately = abap_true ).

        zfi_cl_invest_expenses_hdb=>get_innfund_docs( EXPORTING iv_edate = gs_setup-period-endda
                                                                it_docs  = it_docs
                                                      IMPORTING et_data  = et_data ).

      CATCH cx_root.
        MESSAGE e002(zfi_invest) INTO DATA(lv_dummy).
        IF mo_log IS NOT BOUND.
          mo_log = cf_reca_message_list=>create( ).
        ENDIF.
        mo_log->add_symsg( ).
        RAISE EXCEPTION TYPE zcx_error.
    ENDTRY.

  ENDMETHOD.


  METHOD get_noinnfund_docs.
    TRY.
        cl_progress_indicator=>progress_indicate(
               i_text               = |В обработке... Выборка данных из БД...|
               i_processed          = 6
               i_total              = 10
               i_output_immediately = abap_true ).

        zfi_cl_invest_expenses_hdb=>get_noinnfund_docs( EXPORTING iv_edate = gs_setup-period-endda
                                                                  it_docs  = it_docs
                                                        IMPORTING et_data  = et_data ).
      CATCH cx_root.
        MESSAGE e003(zfi_invest) INTO DATA(lv_dummy).
        IF mo_log IS NOT BOUND.
          mo_log = cf_reca_message_list=>create( ).
        ENDIF.
        mo_log->add_symsg( ).
        RAISE EXCEPTION TYPE zcx_error.
    ENDTRY.

  ENDMETHOD.


  METHOD get_saldo.
    TRY.
        cl_progress_indicator=>progress_indicate(
               i_text               = |В обработке... Выборка данных из БД...|
               i_processed          = 8
               i_total              = 10
               i_output_immediately = abap_true ).

        zfi_cl_invest_expenses_hdb=>get_saldo( EXPORTING iv_edate = gs_setup-period-endda
                                                         iv_bcurr = abap_true
                                                         iv_filter = cl_shdb_seltab=>combine_seltabs(
                                                                                     it_named_seltabs = VALUE #(
                                                                                     ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                                                                     ( name = 'HKONT' dref = REF #( gs_setup-it_hkonts[] ) )
                                                                                                                                            ) )
                                               IMPORTING et_saldo  = et_data ) .
      CATCH cx_root.
        MESSAGE e004(zfi_invest) INTO DATA(lv_dummy).
        IF mo_log IS NOT BOUND.
          mo_log = cf_reca_message_list=>create( ).
        ENDIF.
        mo_log->add_symsg( ).
        RAISE EXCEPTION TYPE zcx_error.
    ENDTRY.

  ENDMETHOD.


  METHOD get_trn_docs.
    DATA(lt_dates) = VALUE date_t_range( (
      sign    = 'I'
      option  = 'BT'
      low     = gs_setup-period-begda
      high    = gs_setup-period-endda ) ).

    cl_progress_indicator=>progress_indicate(
      i_text               = |В обработке... Выборка данных из БД...|
      i_processed          = 2
      i_total              = 10
      i_output_immediately = abap_true ).

    TRY.
        CALL METHOD zfi_sldtrn_hdb=>get_trn_docs
          EXPORTING
            iv_bcurr       = abap_true
            iv_inturn      = abap_true                                   "--Учесть внутренние обороты
            iv_filter      = cl_shdb_seltab=>combine_seltabs(
                                 it_named_seltabs = VALUE #(
                                 ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                 ( name = 'BUDAT' dref = REF #( lt_dates[] ) )
                                 ( name = 'HKONT' dref = REF #( gs_setup-it_hkonts[] ) )
                                 )
                               )
            iv_filter_bseg = ''
            iv_shkzg       = ''
            iv_delrv       = abap_true
          IMPORTING
            et_data        = et_turn.
      CATCH cx_root.
        MESSAGE e001(zfi_invest) INTO DATA(lv_dummy).
        IF mo_log IS NOT BOUND.
          mo_log = cf_reca_message_list=>create( ).
        ENDIF.
        mo_log->add_symsg( ).
        RAISE EXCEPTION TYPE zcx_error.
    ENDTRY.
  ENDMETHOD.


  METHOD load_default_sscr.
    CALL FUNCTION 'RS_SUPPORT_SELECTIONS'
      EXPORTING
        report               = sy-cprog
        variant              = CONV rsvar-variant( |${ sy-uname }| )
      EXCEPTIONS
        variant_not_existent = 1
        variant_obsolete     = 2
        OTHERS               = 3.

  ENDMETHOD.


  METHOD on_double_click_evt.
    CASE e_column.
      WHEN 'VALUE1' OR 'VALUE2'.
        IF mv_option = 'NEW'.
          me->view_documents_new( CONV #( e_row-index ) ).
        ELSE.
          me->view_documents( CONV #( e_row-index ) ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.


  METHOD on_salv_click.
    TRY.
        DATA(ls_document) = CORRESPONDING zfi_cl_invest_expenses_hdb=>gty_s_document( me->gt_documents[ row ] ).
      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.

    CASE column.
      WHEN 'BELNR'.
        SET PARAMETER ID 'BUK' FIELD ls_document-bukrs.
        SET PARAMETER ID 'BLN' FIELD ls_document-belnr.
        SET PARAMETER ID 'GJR' FIELD ls_document-gjahr.
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      WHEN 'ANLN1'.
        SET PARAMETER ID 'BUK' FIELD ls_document-bukrs.
        SET PARAMETER ID 'AN1' FIELD ls_document-anln1.
        SET PARAMETER ID 'AN2' FIELD ls_document-anln2.
        CALL TRANSACTION 'AS03' AND SKIP FIRST SCREEN.
    ENDCASE.

  ENDMETHOD.


  METHOD on_toolbar_evt.
    e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
      ( butn_type = 3 )
      ( function = 'EXPORT' icon = icon_xls text = TEXT-t00 quickinfo = TEXT-q00 ) ).
  ENDMETHOD.


  METHOD on_ucomm_evt.

    CASE e_ucomm.
      WHEN 'EXPORT'.
        me->export( ).
    ENDCASE.
  ENDMETHOD.


  METHOD read_hdb_params.
    SELECT * FROM zfi_inv_costs_c
      INTO TABLE @DATA(lt_inv_costs)
      WHERE ( rep = '' OR rep = @gs_setup-reptype )
      ORDER BY subpar.

    "Здесь, по идее, должно быть соответствие настроек... Обходим значением по умолчанию
    gs_setup-it_hdb_params[] = VALUE #(
      FOR <ls_invcost> IN lt_inv_costs[]
      ( VALUE #(
          index         = me->calculate_index( <ls_invcost>-subpar )
          subpar        = <ls_invcost>-subpar
          shkzg         = <ls_invcost>-shkzg
          filter        = VALUE #( gs_setup-it_params[ subpar = <ls_invcost>-filter ]-filter DEFAULT '' )
          filter_corr   = VALUE #( gs_setup-it_params[ subpar = <ls_invcost>-filter_corr ]-filter_corr DEFAULT '' )
          filter_saldo  = VALUE #( gs_setup-it_params[ subpar = <ls_invcost>-filter ]-filter_saldo DEFAULT '' )
          filter_imprf  = VALUE #( gs_setup-it_params[ subpar = <ls_invcost>-filter_imprf ]-filter_imprf DEFAULT '' )
          filter_vnz    = VALUE #( gs_setup-it_params[ subpar = <ls_invcost>-filter_vnz ]-filter_vnz DEFAULT '' )
          item_name     = replace(
                            val = replace(
                              val = <ls_invcost>-item_name
                              sub = '<BEGDATE>'
                              with = |{ gs_setup-period-begda DATE = ENVIRONMENT }|
                              occ = 0 )
                            sub = '<ENDDATE>'
                            with = |{ cl_reca_date=>add_to_date( id_date = gs_setup-period-endda id_days = 1 ) DATE = ENVIRONMENT }| "|{ lv_endda DATE = ENVIRONMENT }|
                            occ = 0 )
          innfond       = <ls_invcost>-innfond
          formula       = <ls_invcost>-formula
          highlight     = <ls_invcost>-highlight
          mult          = SWITCH #( <ls_invcost>-sign  WHEN '-' THEN -1 ELSE 1 ) ) ) ).
  ENDMETHOD.


  METHOD read_params.
    TYPES: lty_t_range TYPE RANGE OF tvarvc-name,
           lty_s_range TYPE LINE OF lty_t_range.
    DATA: lv_varmask TYPE tvarvc-name VALUE 'ZFI_SVED6STR%',
          lt_imprf   TYPE RANGE OF tvarvc-low,
          lt_vnz     TYPE RANGE OF tvarvc-low,
          lt_hkont   TYPE RANGE OF tvarvc-low.

    "Рефакторинг. Эти настройки тоже можно вынести в tvarvc.
    DATA(lt_imprf_range) = VALUE lty_t_range( ( sign = 'I' option = 'EQ' low = 'ZFI_SVED6STR_1.1.2.4_3' ) ).
    DATA(lt_vnz_range)   = VALUE lty_t_range( ( sign = 'I' option = 'CP' low = '*VNZ' ) ).

    DATA(lt_dates) = VALUE date_t_range( (
      sign    = 'I'
      option  = 'BT'
      low     = gs_setup-period-begda
      high    = gs_setup-period-endda ) ).

    DATA(lv_prefix_length) = strlen( lv_varmask ).

    SELECT name, sign, opti AS option, low, high
      FROM tvarvc
      INTO TABLE @DATA(lt_tvarvc)
      WHERE name LIKE @lv_varmask
        AND ( low <> '' OR high <> '' )
      ORDER BY name.

    "Готовим глобальные hkont для фильтра начальной выборки( скорость работы )
    DATA(lt_global_range) = VALUE bspl_saknr_range_t(
      FOR <ls_hkont> IN lt_tvarvc[]
      WHERE ( name NOT IN lt_imprf_range[] AND name NOT IN lt_vnz_range[] )
      ( CORRESPONDING #( <ls_hkont> ) ) ).
    SORT lt_global_range[] BY sign option low.
    me->check_add_global_hkonts( it_range = lt_global_range[] ).

    LOOP AT lt_tvarvc[] ASSIGNING FIELD-SYMBOL(<ls_tvar>).
      IF <ls_tvar>-name IN lt_imprf_range[].
        lt_imprf[] = VALUE #( BASE lt_imprf[] ( CORRESPONDING #( <ls_tvar> ) ) ).
      ELSEIF <ls_tvar>-name IN lt_vnz_range[].
        lt_vnz[] = VALUE #( BASE lt_vnz[] ( CORRESPONDING #( <ls_tvar> ) ) ).
      ELSE.
        lt_hkont[] = VALUE #( BASE lt_hkont[] ( CORRESPONDING #( <ls_tvar> ) ) ).
      ENDIF.

      AT END OF name.
        "Собираем все счета для главного фильтра.
        gs_setup-it_params[] = VALUE #( BASE gs_setup-it_params[]
        ( subpar = <ls_tvar>-name+lv_prefix_length

          filter =        COND #( WHEN lt_hkont[] IS INITIAL
                                    THEN ''
                                    ELSE cl_shdb_seltab=>combine_seltabs(
                                            it_named_seltabs = VALUE #(
                                            ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                            ( name = 'HKONT' dref = REF #( lt_hkont[] ) )
                                            ( name = 'BUDAT' dref = REF #( lt_dates[] ) ) ) ) )
          filter_corr =   COND #( WHEN lt_hkont[] IS INITIAL
                                    THEN ''
                                    ELSE cl_shdb_seltab=>combine_seltabs(
                                            it_named_seltabs = VALUE #(
                                            ( name = 'GKONT' dref = REF #( lt_hkont[] ) ) ) ) )
          filter_saldo =  COND #( WHEN lt_hkont[] IS INITIAL
                                    THEN ''
                                    ELSE cl_shdb_seltab=>combine_seltabs(
                                            it_named_seltabs = VALUE #(
                                            ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                            ( name = 'HKONT' dref = REF #( lt_hkont[] ) ) ) ) )
          filter_imprf =  COND #( WHEN lt_imprf[] IS INITIAL
                                    THEN ''
                                    ELSE cl_shdb_seltab=>combine_seltabs(
                                            it_named_seltabs = VALUE #(
                                            ( name = 'IMPRF' dref = REF #( lt_imprf[] ) ) ) ) )
          filter_vnz =    COND #( WHEN lt_vnz[] IS INITIAL
                                    THEN ''
                                    ELSE cl_shdb_seltab=>combine_seltabs(
                                            it_named_seltabs = VALUE #(
                                            ( name = 'AUFNR' dref = REF #( lt_vnz[] ) ) ) ) )
        ) ).
        CLEAR: lt_hkont[], lt_imprf[], lt_vnz[].
      ENDAT.
    ENDLOOP.

  ENDMETHOD.


  METHOD run_calculation.
    DATA: lv_pattern TYPE string VALUE '(\d+(?:\.\d+)+)|(\d+)',
          lv_end     TYPE i,
          lt_results TYPE match_result_tab.

    SORT me->gs_setup-it_hdb_params[] BY index.

    me->gt_data[] = CORRESPONDING #( it_data[] ).

    LOOP AT me->gs_setup-it_hdb_params[] ASSIGNING FIELD-SYMBOL(<ls_param>) WHERE formula IS NOT INITIAL.
      FIND ALL OCCURRENCES OF REGEX lv_pattern IN <ls_param>-formula RESULTS lt_results[].

      LOOP AT me->gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) USING KEY subpar WHERE subpar = <ls_param>-subpar.
        <ls_data>-index = <ls_param>-index.

        CLEAR: lv_end.
        LOOP AT lt_results[] ASSIGNING FIELD-SYMBOL(<ls_result>).
          DATA(lv_subpar) = substring( val = <ls_param>-formula off = <ls_result>-offset len = <ls_result>-length ).
          "Между предыдущим операндом и началом нового - операция
          DATA(lv_oper) = condense( substring( val = <ls_param>-formula off = lv_end len = <ls_result>-offset - lv_end ) ).

          <ls_data>-value1 = me->calculate( iv_oper = lv_oper
                                            iv_op1 = <ls_data>-value1
                                            iv_op2 = VALUE #( me->gt_data[ bukrs = <ls_data>-bukrs
                                                                           subpar = lv_subpar ]-value1 DEFAULT 0 ) ).
          <ls_data>-value2 = me->calculate( iv_oper = lv_oper
                                            iv_op1 = <ls_data>-value2
                                            iv_op2 = VALUE #( me->gt_data[ bukrs = <ls_data>-bukrs
                                                                           subpar = lv_subpar ]-value2 DEFAULT 0 ) ).
          lv_end = <ls_result>-offset + <ls_result>-length.   "Конец операнда, индикатор для поиска операции (в lv_oper)
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


  METHOD select_data.
    DATA(lt_dates) = VALUE date_t_range( (
      sign    = 'I'
      option  = 'BT'
      low     = gs_setup-period-begda
      high    = gs_setup-period-endda ) ).

    DATA ls_hdb_params TYPE zfi_cl_invest_expenses_hdb=>gty_s_hdb_param.

    TRY.
        "-->
        LOOP AT gs_setup-it_hdb_params ASSIGNING FIELD-SYMBOL(<fs_hdb_params>).
          IF <fs_hdb_params>-shkzg = 'Д'.
            <fs_hdb_params>-shkzg = 'S'.

            MOVE-CORRESPONDING <fs_hdb_params> TO ls_hdb_params.
            ls_hdb_params-shkzg = 'H'.
            ls_hdb_params-new_line = 'Д'.

            "-->AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN
*            IF ls_hdb_params-mult = 1.
*              ls_hdb_params-mult = -1.
*            ELSEIF ls_hdb_params-mult = -1.
*              ls_hdb_params-mult = 1.
*            ENDIF.
            "--<AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN

            APPEND ls_hdb_params TO gs_setup-it_hdb_params.
          ELSEIF <fs_hdb_params>-shkzg = 'К'.
            <fs_hdb_params>-shkzg = 'H'.

            MOVE-CORRESPONDING <fs_hdb_params> TO ls_hdb_params.
            ls_hdb_params-shkzg = 'S'.
            ls_hdb_params-new_line = 'К'.

            "-->AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN
*            IF ls_hdb_params-mult = 1.
*              ls_hdb_params-mult = -1.
*            ELSEIF ls_hdb_params-mult = -1.
*              ls_hdb_params-mult = 1.
*            ENDIF.
            "--<AK_RUBAHOV #27579 ZFI_INVEST_EXPENSESN

            APPEND ls_hdb_params TO gs_setup-it_hdb_params.
          ENDIF.
        ENDLOOP.

        SORT gs_setup-it_hdb_params BY subpar.
        "<-- AK_RUBAHOV #25625 ZFI_INVEST_EXPENSES В отчет не попадает сумма

        zfi_cl_invest_expenses_hdb=>read_data(
          EXPORTING
            iv_begda        = gs_setup-period-begda
            iv_endda        = gs_setup-period-endda
            it_param_hdb    = gs_setup-it_hdb_params[]
            iv_bukrs_filter = cl_shdb_seltab=>combine_seltabs(
                                it_named_seltabs = VALUE #(
                                ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                )
                              )
            iv_sld_filter   = cl_shdb_seltab=>combine_seltabs(
                                it_named_seltabs = VALUE #(
                                ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                ( name = 'HKONT' dref = REF #( gs_setup-it_hkonts[] ) )
                                )
                              )
            iv_hkont_filter = cl_shdb_seltab=>combine_seltabs(
                                it_named_seltabs = VALUE #(
                                ( name = 'BUKRS' dref = REF #( gs_setup-it_bukrs[] ) )
                                ( name = 'BUDAT' dref = REF #( lt_dates[] ) )
                                ( name = 'HKONT' dref = REF #( gs_setup-it_hkonts[] ) )
                                )
                              )
            iv_debug_param = gs_setup-debug
          IMPORTING
            et_data = DATA(lt_data)
            et_docs = me->gt_documents[]
        ).
      CATCH cx_root INTO DATA(lr_error).
        MESSAGE TEXT-e01 TYPE 'I' DISPLAY LIKE 'E'.
        RETURN.
    ENDTRY.

    me->run_calculation( lt_data[] ).

    SORT me->gs_setup-it_hdb_params[] BY subpar.
  ENDMETHOD.


  METHOD show_data.
    IF gr_grid IS BOUND.
      gr_grid->refresh_table_display(
        EXPORTING is_stable = VALUE lvc_s_stbl( row = abap_true col = abap_true )
        EXCEPTIONS OTHERS = 0 ).
      RETURN.
    ENDIF.

    DATA(lt_fcat) = me->build_fieldcat( ).
    DATA(lt_sort) = VALUE lvc_t_sort(
      ( fieldname = 'BUKRS' spos = 1 up = abap_true subtot = abap_true )
      ( fieldname = 'INDEX' spos = 2 up = abap_true ) ).
    gr_grid = NEW #(
      i_parent = NEW cl_gui_custom_container(  container_name = 'ALV_CONTAINER' ) ).

    SET HANDLER: on_toolbar_evt
                 on_double_click_evt
                 on_ucomm_evt
                 FOR gr_grid.

    gr_grid->set_table_for_first_display(
        EXPORTING is_layout             = VALUE lvc_s_layo( zebra       = abap_true
                                                            col_opt     = abap_true
                                                            sel_mode    = 'A'
                                                            info_fname  = 'COLOR' )
                  i_save                = 'A'
                  is_variant            = VALUE disvariant( report = sy-cprog variant = gs_setup-alvdef )
        CHANGING  it_outtab             = me->gt_data[]
                  it_fieldcatalog       = lt_fcat[]
                  it_sort               = lt_sort[] ).

  ENDMETHOD.


  METHOD show_log.

    CHECK mo_log IS BOUND.
    CALL FUNCTION 'RECA_GUI_MSGLIST_POPUP'
      EXPORTING
        io_msglist = mo_log
        id_title   = TEXT-001.
    mo_log->free( ).

  ENDMETHOD.


  METHOD view_documents.
    DATA: lr_alv     TYPE REF TO cl_salv_table.

    ASSIGN gt_data[ iv_index ] TO FIELD-SYMBOL(<ls_data>).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    READ TABLE me->gs_setup-it_hdb_params[] ASSIGNING FIELD-SYMBOL(<ls_param>)
                                            WITH KEY subpar = <ls_data>-subpar
                                            BINARY SEARCH.
    IF sy-subrc = 0.
      IF <ls_param>-shkzg CA 'IO'.
        MESSAGE i138(zfi).
        RETURN.
      ELSEIF <ls_param>-formula IS NOT INITIAL.
        MESSAGE i162(zfi) WITH <ls_param>-formula.
        RETURN.
      ENDIF.
    ENDIF.

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = me->gt_documents[] ).
      CATCH cx_salv_msg.
    ENDTRY.

    DATA(lr_columns) = lr_alv->get_columns( ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    CAST cl_salv_column_table( lr_columns->get_column( 'BELNR' ) )->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CAST cl_salv_column_table( lr_columns->get_column( 'ANLN1' ) )->set_cell_type( if_salv_c_cell_type=>hotspot ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'PARAM'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-01l.
          <ls_fcat>-scrtext_m = TEXT-01m.
          <ls_fcat>-scrtext_s = TEXT-01s.
      ENDCASE.
    ENDLOOP.
    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_filter) = lr_alv->get_filters( ).
    lr_filter->clear( ).
    lr_filter->add_filter( columnname = 'BUKRS' low = CONV #( <ls_data>-bukrs ) ).
    lr_filter->add_filter( columnname = 'PARAM' low = CONV #( <ls_data>-subpar ) ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    lr_sort->add_sort( 'BELNR' ).
    lr_sort->add_sort( 'GJAHR' ).
    lr_sort->add_sort( 'BUZEI' ).
    lr_sort->add_sort( columnname = 'HKONT' position = 1 subtotal = abap_true ).
    lr_sort->add_sort( columnname = 'GKONT' position = 2 subtotal = abap_true ).

    lr_aggregations->add_aggregation( columnname  = 'VALUE1' aggregation = if_salv_c_aggregation=>total ).
    lr_aggregations->add_aggregation( columnname  = 'VALUE2' aggregation = if_salv_c_aggregation=>total ).

    DATA(lr_events) = lr_alv->get_event( ).
    SET HANDLER me->on_salv_click FOR lr_events.

    lr_alv->get_functions( )->set_all( ).
    lr_alv->set_screen_popup(
      start_column = 5
      end_column  = 200
      start_line  = 3
      end_line    = 30 ).

    lr_alv->display( ).

  ENDMETHOD.


  METHOD view_documents_new.
    DATA: lr_alv     TYPE REF TO cl_salv_table.
    DATA: lt_hdb     TYPE zfi_cl_invest_expenses_hdb=>gty_t_hdb_params.

    ASSIGN gt_data[ iv_index ] TO FIELD-SYMBOL(<ls_data>).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    READ TABLE me->gs_setup-it_hdb_params[] ASSIGNING FIELD-SYMBOL(<ls_param>)
                                            WITH KEY subpar = <ls_data>-subpar
                                            BINARY SEARCH.
    IF sy-subrc = 0.
      IF <ls_param>-shkzg CA 'IO'.
        MESSAGE i138(zfi).
        RETURN.
      ELSEIF <ls_param>-formula IS NOT INITIAL.
        MESSAGE i162(zfi) WITH <ls_param>-formula.
        RETURN.
      ENDIF.
    ENDIF.

    DATA(lt_dates) = VALUE date_t_range( (
     sign    = 'I'
     option  = 'BT'
     low     = gs_setup-period-begda
     high    = gs_setup-period-endda ) ).

    DATA(lt_bukrs) = VALUE date_t_range( (
     sign    = 'I'
     option  = 'EQ'
     low     = <ls_data>-bukrs ) ).

    LOOP AT me->gs_setup-it_hdb_params[] ASSIGNING FIELD-SYMBOL(<fs_param>) WHERE subpar = <ls_data>-subpar.
      APPEND INITIAL LINE TO lt_hdb ASSIGNING FIELD-SYMBOL(<fs_hdb>).
      IF sy-subrc EQ 0.
        MOVE <fs_param> TO <fs_hdb>.
      ENDIF.
    ENDLOOP.

    TRY.
        zfi_cl_invest_expenses_hdb=>read_data_on_double_click(
            EXPORTING
              iv_begda        = gs_setup-period-begda
              iv_endda        = gs_setup-period-endda
              it_param_hdb    = lt_hdb
              iv_bukrs_filter = cl_shdb_seltab=>combine_seltabs(
                                  it_named_seltabs = VALUE #(
                                  ( name = 'BUKRS' dref = REF #( lt_bukrs ) )
                                  )
                                )
              it_innfund     = mt_innfund
              it_noinnfund   = mt_noinnfund
              it_saldo       = mt_saldo
              iv_debug_param = gs_setup-debug
            IMPORTING
              et_docs = DATA(lt_docs)
          ).
      CATCH cx_root INTO DATA(lr_error).
        MESSAGE e001(zfi_invest) INTO DATA(lv_dummy).
        IF mo_log IS NOT BOUND.
          mo_log = cf_reca_message_list=>create( ).
        ENDIF.
        mo_log->add_symsg( ).
        show_log( ).
    ENDTRY.

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = lt_docs[] ).
      CATCH cx_salv_msg.
    ENDTRY.

    DATA(lr_columns) = lr_alv->get_columns( ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    CAST cl_salv_column_table( lr_columns->get_column( 'BELNR' ) )->set_cell_type( if_salv_c_cell_type=>hotspot ).
    CAST cl_salv_column_table( lr_columns->get_column( 'ANLN1' ) )->set_cell_type( if_salv_c_cell_type=>hotspot ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'PARAM'.
          <ls_fcat>-scrtext_l = <ls_fcat>-reptext = TEXT-01l.
          <ls_fcat>-scrtext_m = TEXT-01m.
          <ls_fcat>-scrtext_s = TEXT-01s.
      ENDCASE.
    ENDLOOP.
    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_filter) = lr_alv->get_filters( ).
    lr_filter->clear( ).
    lr_filter->add_filter( columnname = 'BUKRS' low = CONV #( <ls_data>-bukrs ) ).
    lr_filter->add_filter( columnname = 'PARAM' low = CONV #( <ls_data>-subpar ) ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    lr_sort->add_sort( 'BELNR' ).
    lr_sort->add_sort( 'GJAHR' ).
    lr_sort->add_sort( 'BUZEI' ).
    lr_sort->add_sort( columnname = 'HKONT' position = 1 subtotal = abap_true ).
    lr_sort->add_sort( columnname = 'GKONT' position = 2 subtotal = abap_true ).

    lr_aggregations->add_aggregation( columnname  = 'VALUE1' aggregation = if_salv_c_aggregation=>total ).
    lr_aggregations->add_aggregation( columnname  = 'VALUE2' aggregation = if_salv_c_aggregation=>total ).

    DATA(lr_events) = lr_alv->get_event( ).
    SET HANDLER me->on_salv_click FOR lr_events.

    lr_alv->get_functions( )->set_all( ).
    lr_alv->set_screen_popup(
      start_column = 5
      end_column  = 200
      start_line  = 3
      end_line    = 30 ).

    lr_alv->display( ).

  ENDMETHOD.
ENDCLASS.