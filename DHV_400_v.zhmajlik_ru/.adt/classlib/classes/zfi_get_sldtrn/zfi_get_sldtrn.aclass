class ZFI_GET_SLDTRN definition
  public
  final
  create public .

public section.

  types:
    gty_t_revkey TYPE STANDARD TABLE OF zfi_rev_key .
  types:
    gty_t_bukrs_rng  TYPE RANGE OF bseg-bukrs .
  types:
    gty_t_hkont_rng  TYPE RANGE OF bseg-hkont .
  types:
    gty_t_date_rng   TYPE RANGE OF bkpf-budat .
  types:
    gty_t_monat_rng  TYPE RANGE OF bkpf-monat .
  types:
    gty_t_vertn_rng  TYPE RANGE OF bseg-vertn .
  types:
    gty_t_zuonr_rng  TYPE RANGE OF bseg-zuonr .
  types:
    gty_t_partner_rng  TYPE RANGE OF but000-partner .
  types GTY_T_DATA type ZFI_T_REGISTR_ACC .
  types:
    gty_t_detail TYPE STANDARD TABLE OF zfi_registr_acc_detail .

  constants GC_KOKRS type KOKRS value 1001 ##NO_TEXT.
  data S_BUKRS type GTY_T_BUKRS_RNG .
  data S_HKONT type GTY_T_HKONT_RNG .
  data S_DATE type GTY_T_DATE_RNG .
  data GV_BCURR type CHAR01 .
  data GV_HIDERV type CHAR01 .
  data GV_INTURN type CHAR01 .
  data GV_PARTNER type CHAR01 .
  data GV_ID_TYP type BU_ID_TYPE .
  data GV_ACCOUNTING_CD type CHAR01 .
  data GV_ID_NUM type BU_ID_NUMBER .
  data GV_VPTNR type ABAP_BOOL .
  data GV_CRVAL type ABAP_BOOL .
  data GV_DBUKR type CHAR01 .
  data GV_HIDEPT type CHAR01 .
  data GV_OPTIM type ABAP_BOOL .

  methods GET_DATA
    importing
      !IT_BUKRS_RNG type GTY_T_BUKRS_RNG optional
      !IT_HKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_GKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_DATE_RNG type GTY_T_DATE_RNG optional
      !IT_MONAT_RNG type GTY_T_MONAT_RNG optional
      !IT_PARTNER_RNG type GTY_T_PARTNER_RNG optional
      !IT_MNAGR_RNG type GTY_T_VERTN_RNG optional
      !IT_VERTN_RNG type GTY_T_VERTN_RNG optional
      !IV_BCURR type CHAR01 optional
      !IV_ACURR type CHAR01 optional
      !IV_HIDERV type CHAR01 optional
      !IV_HIDEPT type CHAR01 default 'X'
      !IV_INTURN type CHAR01 optional
      !IV_DBUKR type CHAR01 optional
      !IV_KVART type ABAP_BOOL optional
      !IV_MONAT type ABAP_BOOL optional
      !IV_DAYS type ABAP_BOOL optional
      !IV_MLEV type J_3RK_GROUP_LEVEL optional
      !IV_CLEV type J_3RK_GROUP_LEVEL optional
      !IV_VERTN type ABAP_BOOL optional
      !IV_NDOC type ABAP_BOOL optional
      !IV_PARTNER type ABAP_BOOL optional
      !IV_ZUONR type ABAP_BOOL optional
      !IV_ID_TYP type BU_ID_TYPE optional
      !IV_ID_NUM type BU_ID_NUMBER optional
      !IV_SLD_AN type ABAP_BOOL optional
      !IV_VPTNR type ABAP_BOOL optional
      !IV_ACDOCA type ABAP_BOOL optional
      !IV_CRVAL type ABAP_BOOL optional
      !IV_NO_OP type ABAP_BOOL optional
      !IV_MAINAGR type ABAP_BOOL default ''
      !IV_CHMON type ABAP_BOOL optional
      !IV_ACCOUNTING_CD type ABAP_BOOL optional
    exporting
      !ET_DATA type GTY_T_DATA .
  methods GET_TRN_DETAIL
    importing
      !IT_BUKRS_RNG type GTY_T_BUKRS_RNG optional
      !IT_HKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_GKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_DATE_RNG type GTY_T_DATE_RNG optional
      !IT_MONAT_RNG type GTY_T_MONAT_RNG optional
      !IV_SHKZG type SHKZG optional
      !IT_VPTNR_RNG type GTY_T_PARTNER_RNG optional
      !IT_PARTNER_RNG type GTY_T_PARTNER_RNG optional
      !IT_ZUONR_RNG type GTY_T_ZUONR_RNG optional
      !IT_VERTN_RNG type GTY_T_VERTN_RNG optional
      !IV_WAERS type WAERS default ''
    exporting
      !ET_DETAIL type GTY_T_DETAIL .
  methods GET_TRN_DETAIL_A
    importing
      !IT_BUKRS_RNG type GTY_T_BUKRS_RNG optional
      !IT_HKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_GKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_DATE_RNG type GTY_T_DATE_RNG optional
      !IV_SHKZG type SHKZG optional
      !IT_VPTNR_RNG type GTY_T_PARTNER_RNG optional
      !IT_PARTNER_RNG type GTY_T_PARTNER_RNG optional
      !IT_ZUONR_RNG type GTY_T_ZUONR_RNG optional
      !IT_VERTN_RNG type GTY_T_VERTN_RNG optional
    exporting
      !ET_DETAIL type GTY_T_DETAIL .
  methods GET_SLD_DETAIL
    importing
      !IV_DATE type BUDAT optional
      !IV_SHKZG type SHKZG optional
      !IT_BUKRS_RNG type GTY_T_BUKRS_RNG optional
      !IT_HKONT_RNG type GTY_T_HKONT_RNG optional
      !IT_VPTNR_RNG type GTY_T_PARTNER_RNG optional
      !IT_PARTNER_RNG type GTY_T_PARTNER_RNG optional
      !IT_ZUONR_RNG type GTY_T_ZUONR_RNG optional
      !IT_VERTN_RNG type GTY_T_VERTN_RNG optional
      !IV_DETBAL type ABAP_BOOL
      !IT_MNAGR_RNG type GTY_T_VERTN_RNG optional
      !IV_FNAME type LVC_FNAME optional
      !IV_BUDAT_LOW type BUDAT optional
      !IV_BUDAT_HIGH type BUDAT optional
    exporting
      !ET_DETAIL type GTY_T_DETAIL .
  methods ADD_AGR_GRP
    changing
      !CT_DATA type GTY_T_DATA .
  methods GET_SLD
    importing
      !IV_ALL_HK type ABAP_BOOL optional
    returning
      value(RT_DATA) type GTY_T_DATA .
  PROTECTED SECTION.
private section.

  data S_GKONT type GTY_T_HKONT_RNG .
  data S_MONAT type GTY_T_MONAT_RNG .
  data S_PARTNER type GTY_T_PARTNER_RNG .
  data S_MNAGR type GTY_T_VERTN_RNG .
  data S_VERTN type GTY_T_VERTN_RNG .
  data GV_ACURR type CHAR01 .
  data GV_DETBAL type CHAR01 .
  data GV_KVART type CHAR01 .
  data GV_MONAT type CHAR01 .
  data GV_DAYS type CHAR01 .
  data GV_MLEV type J_3RK_GROUP_LEVEL .
  data GV_CLEV type J_3RK_GROUP_LEVEL .
  data GV_ZUONR type CHAR01 .
  data GV_NDOC type CHAR01 .
  data GV_VERTN type CHAR01 .
  data GV_SLD_AN type ABAP_BOOL .
  data GV_ACDOCA type ABAP_BOOL .
  data GV_MAINAGR type ABAP_BOOL .
  data GV_CHMON type ABAP_BOOL .

  methods GET_TRN
    returning
      value(RT_DATA) type GTY_T_DATA .
  methods GET_SLD_OP
    returning
      value(RT_DATA) type GTY_T_DATA .
  methods GET_TRN_A
    returning
      value(RT_DATA) type GTY_T_DATA .
ENDCLASS.



CLASS ZFI_GET_SLDTRN IMPLEMENTATION.


  method ADD_AGR_GRP.
  endmethod.


  METHOD get_data.
    s_bukrs          = it_bukrs_rng.
    s_hkont          = it_hkont_rng.
    s_gkont          = it_gkont_rng.
    s_date           = it_date_rng .
    s_monat          = it_monat_rng.
    s_partner        = it_partner_rng.
    s_vertn          = it_vertn_rng.
    s_mnagr          = it_mnagr_rng.
    gv_bcurr         = iv_bcurr    .
    gv_acurr         = iv_acurr    .
    gv_hiderv        = iv_hiderv   .
    gv_inturn        = iv_inturn   .
    gv_dbukr         = iv_dbukr    .
    gv_kvart         = iv_kvart    .
    gv_monat         = iv_monat    .
    gv_days          = iv_days     .
    gv_mlev          = iv_mlev     .
    gv_clev          = iv_clev     .
    gv_hidept        = iv_hidept   .
    gv_zuonr         = iv_zuonr.
    gv_partner       = iv_partner.
    gv_vptnr         = iv_vptnr.
    gv_ndoc          = iv_ndoc.
    gv_vertn         = iv_vertn.
    gv_id_typ        = iv_id_typ.
    gv_id_num        = iv_id_num.
    gv_sld_an        = iv_sld_an.
    gv_acdoca        = iv_acdoca.
    gv_crval         = iv_crval.
    gv_mainagr       = iv_mainagr.
    gv_chmon         = iv_chmon.
    gv_accounting_cd = iv_accounting_cd.  " AK_BUTVILOVSK #25179 ZFI_REGBY_K Доработка отчета с вариантом запуска "Без учета документов изменений"
    TRY.
        " выборка оборотов
        et_data = get_trn(  ).
        " выборка свернутого на начало года сальдо для основных счетов
        " iv_partner - признак запуска отчета по счетам контрагентов
        IF iv_partner = abap_false AND iv_sld_an = abap_false. " если установлена детализация по партнерам, или запрошена делатизация сальдо то не вызываем этот метод
          APPEND LINES OF get_sld( EXPORTING iv_all_hk = iv_no_op ) TO et_data.
        ENDIF.
        " выборка сальдо по открытым позициям для отчетов по открытым позициям
        IF iv_no_op = abap_false.
          APPEND LINES OF get_sld_op( ) TO et_data.
        ENDIF.
      CATCH cx_root INTO DATA(lr_error).
        MESSAGE TEXT-t98 TYPE 'I'.
    ENDTRY.
  ENDMETHOD.


  METHOD get_sld.
    DATA:
      lv_edate     TYPE d,            "последний день выборки
      lv_smonat    TYPE acdoca-poper, " bseg-h_monat,   "первый период выборки
      lv_emonat    TYPE acdoca-poper, " bseg-h_monat,   "последний период выборки
      lt_data      TYPE gty_t_data,
      lv_req       TYPE string,
      lv_only_s    TYPE string VALUE  `  AND SKB1.MITKZ not in ('D','K') AND SKB1.XOPVW  = ''`,
      lt_selcol    TYPE adbc_column_tab, "таблица соответствия полей запроса
      lv_bukrs_sel TYPE string,
      lv_bukrs_grp TYPE string,
      lv_bukrs1    TYPE string.
"      lv_chmonat   TYPE c.

    IF iv_all_hk = abap_true. " при выборке по всем счетам удаляется ограничение по основным счетам
      CLEAR lv_only_s.
    ENDIF.
    lv_edate = s_date[ 1 ]-high.
    IF lv_edate < '19000101'.
      lv_edate = s_date[ 1 ]-low.
    ENDIF.
    IF s_monat[] IS INITIAL.
      lv_smonat = '16'.
      lv_emonat = '16'.
    ELSEIF s_monat[ 1 ]-high <> space.
      lv_smonat = s_monat[ 1 ]-low.
      lv_emonat = s_monat[ 1 ]-high .
    ELSE.
      lv_smonat = s_monat[ 1 ]-low.
      lv_emonat = s_monat[ 1 ]-low.
    ENDIF.
    " заполнение таблицы колонок для запроса выборки
    lt_selcol =  VALUE #(
                          ( CONV adbc_name('HKONT') )
                          ( CONV adbc_name('HKONT_NAME') )
                          ( CONV adbc_name('WAERS') )
                          ( CONV adbc_name('SLD_I') )
                          ( CONV adbc_name('SLD_O') )
                          ( CONV adbc_name('SLD_ID') )
                          ( CONV adbc_name('SLD_IK') )
                          ( CONV adbc_name('SLD_OD') )
                          ( CONV adbc_name('SLD_OK') )
                          ).

    IF gv_dbukr = abap_true.
      APPEND 'BUKRS' TO lt_selcol.
      lv_bukrs_sel = `, ACDOCA.RBUKRS AS BUKRS`.
      lv_bukrs_grp = `, ACDOCA.RBUKRS `.
      lv_bukrs1 = `, BUKRS `.
    ENDIF.
*   выборка сальдо по счетам бе управления ОП
    lv_req =
      ` SELECT  HKONT,  HKONT_NAME, WAERS, SLD_I, SLD_O `
    &&         `, CASE WHEN SLD_I > 0 THEN   SLD_I ELSE 0 END AS SLD_ID`
    &&         `, CASE WHEN SLD_I < 0 THEN - SLD_I ELSE 0 END AS SLD_IK`
    &&         `, CASE WHEN SLD_O > 0 THEN   SLD_O ELSE 0 END AS SLD_OD`
    &&         `, CASE WHEN SLD_O < 0 THEN - SLD_O ELSE 0 END AS SLD_OK` && lv_bukrs1
    && ` FROM (SELECT`
    &&         ` SKAT.TXT50 as HKONT_NAME,`
    &&         ` ACDOCA.RACCT AS HKONT, `
    &&         ` CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN T001.WAERS`        "Выборка валюты
    &&         `      ELSE SKB1.WAERS`
    &&         ` END AS WAERS,`
    &&         `SUM( CASE WHEN ( ( ACDOCA.BUDAT < '` && s_date[ 1 ]-low && `' AND '` && gv_chmon && `' = '' ) OR ` "ВЫБОРКА входящего сальдо С УЧЕТОМ ВАЛЮТЫ
    &&         ` ( ACDOCA.POPER < '` && lv_smonat && `' AND '` && gv_chmon && `' = 'X' ) ) `
    &&                       ` THEN CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN ACDOCA.HSL ELSE ACDOCA.TSL END`
    &&                  ` ELSE 0`
    &&             ` END) AS SLD_I,`
    &&         `SUM( CASE WHEN ( ( ACDOCA.BUDAT <= '` && lv_edate && `' AND '` && gv_chmon && `' = '' ) OR `        "ВЫБОРКА ИСХОДЯЩЕГО САЛЬДО С УЧЕТОМ ВАЛЮТЫ И Д/К
    &&         ` ( ACDOCA.POPER <= '` && lv_emonat && `' AND '` && gv_chmon && `' = 'X' ) ) `
    &&                    `    THEN CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN ACDOCA.HSL ELSE ACDOCA.TSL END`
    &&                  ` ELSE 0`
    &&               ` END) AS SLD_O` && lv_bukrs_sel
    && ` FROM ACDOCA `
    && `   JOIN T001 ON T001.BUKRS = ACDOCA.RBUKRS`
    && `       AND T001.MANDT = ACDOCA.RCLNT`
    && `   JOIN SKAT ON  SKAT.SPRAS = '` && sy-langu &&  `'` "выборка названия счета
    && `       AND SKAT.MANDT = ACDOCA.RCLNT`
    && `       AND SKAT.KTOPL = T001.KTOPL`
    && `       AND SKAT.SAKNR = ACDOCA.RACCT`
    && `   JOIN SKB1 ON  SKB1.BUKRS = ACDOCA.RBUKRS`  "условие что это не контрольный счет(не надо разв сальдо)
    && `       AND SKB1.MANDT = ACDOCA.RCLNT`
    && `       AND SKB1.SAKNR = ACDOCA.RACCT` && lv_only_s
    && ` WHERE ACDOCA.RCLNT  = ` && `'` && sy-mandt &&   `' AND   RLDNR = '0L'  and GJAHR = '` && s_date[ 1 ]-low(4) && `' `
    &&    ` AND  ACDOCA.BUDAT <= '` && lv_edate && `' `
    &&    ` AND NOT ( ACDOCA.BSTAT  IN ('S') ) `
    &&    ` AND  ACDOCA.POPER <= '` && lv_emonat && `' AND (`
    &&   cl_lib_seltab=>new( it_sel = s_bukrs[] )->sql_where_condition( iv_field = `ACDOCA.RBUKRS` )   && ` ) AND ( `
    &&   cl_lib_seltab=>new( it_sel = s_hkont[] )->sql_where_condition( iv_field = `ACDOCA.RACCT` )
    &&   ` ) GROUP BY ACDOCA.RACCT, SKAT.TXT50, SKB1.WAERS, T001.WAERS ` && lv_bukrs_grp && ` )  `.
    TRY.
        DATA(result) = NEW cl_sql_statement( )->execute_query( lv_req ).
        result->set_param_table( itab_ref = REF #( rt_data )
                                 corresponding_fields = lt_selcol ).

        IF result->next_package( ) > 0.
*          cl_demo_output=>display( gt_data ).
        ENDIF.
      CATCH cx_sql_exception INTO DATA(err).
        cl_demo_output=>display(  err->get_text( ) ).
    ENDTRY.
    FREE lt_data.
  ENDMETHOD.


  METHOD get_sld_detail.
    DATA:
      lt_storno         TYPE STANDARD TABLE OF zfi_rev_key,
      lt_shkzg          TYPE RANGE OF shkzg,
      lv_emonat         TYPE bseg-h_monat,   "последний период выборки
      lv_req            TYPE string,
      lv_sign           TYPE i,
      lv_filter         TYPE string,
      lt_detail         TYPE zfi_sldtrn_hdb=>gty_t_det,
      lv_select         TYPE string,
      lv_pos            TYPE i,
      lt_selcol         TYPE adbc_column_tab, "таблица соответствия полей запроса
      lv_rate_date      TYPE dats,
      lv_waers          TYPE waers,
      lv_exchange_rate  TYPE ukurs_curr,
      lv_foreign_factor TYPE ffact_curr.

    FIELD-SYMBOLS:
      <ls_det> TYPE  zfi_registr_acc_detail.
    IF s_monat[] IS INITIAL.
      lv_emonat = '16'.
    ELSEIF s_monat[ 1 ]-high <> space.
      lv_emonat = s_monat[ 1 ]-high .
    ELSE.
      lv_emonat = s_monat[ 1 ]-low.
    ENDIF.
    IF iv_shkzg IS NOT INITIAL.
      lt_shkzg = VALUE #( ( sign = 'I' option = 'EQ'  low = iv_shkzg ) ).
    ENDIF.

    TRY.
        "заполнение фильтра
        DATA(lv_filter_op)  = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #(
            ( name = 'BUKRS' dref = REF #( s_bukrs[] ) )
         )
        ).
        lv_filter  = cl_shdb_seltab=>combine_seltabs(
          it_named_seltabs = VALUE #(
            ( name = 'BUKRS' dref = REF #( s_bukrs[] ) )
            ( name = 'BUKRS' dref = REF #( it_bukrs_rng[] ) )
            ( name = 'P_HKONT' dref = REF #( s_hkont[] ) )
            ( name = 'P_HKONT' dref = REF #( it_hkont_rng[] ) )
            ( name = 'P_VERTN' dref = REF #( s_vertn[] ) )
            ( name = 'P_VERTN' dref = REF #( it_vertn_rng[] ) )
            ( name = 'P_VPTNR' dref = REF #( it_vptnr_rng[] ) )
            ( name = 'P_ZUONR' dref = REF #( it_zuonr_rng[] ) )
          ) ).
        lv_filter = lv_filter &&
          ` AND ( ( `
       &&   cl_lib_seltab=>new( it_sel = it_partner_rng[] )->sql_where_condition( iv_field = `P_LIFNR` )   && ` ) OR  (`
       &&   cl_lib_seltab=>new( it_sel = it_partner_rng[] )->sql_where_condition( iv_field = `P_KUNNR` )   && ` ) ) AND ( ( `
       &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `P_LIFNR` )   && ` )  OR  (`
       &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `P_KUNNR` )   && ` ) ) `.

        IF gv_optim = abap_true.
          CALL METHOD zfi_sldtrn_hdb=>get_sld_detail_opt
            EXPORTING
              iv_bcurr         = gv_bcurr
              iv_date          = iv_date
              iv_spras         = sy-langu
              iv_id_typ        = gv_id_typ
              iv_id_num        = gv_id_num
              iv_sld_an        = gv_sld_an
              iv_filter        = lv_filter
              iv_filter_op     = lv_filter_op
              iv_hidept        = gv_hidept
              iv_storno        = gv_hiderv
              iv_emonat        = lv_emonat
              iv_crval         = gv_crval
              iv_shkzg         = iv_shkzg
              iv_accounting_cd = gv_accounting_cd    " AK_BUTVILOVSK #25179 ZFI_REGBY_K Доработка отчета с вариантом запуска "Без учета документов изменений"
            IMPORTING
              et_detail        = lt_detail[].
        ELSE.
          CALL METHOD zfi_sldtrn_hdb=>get_sld_detail
            EXPORTING
              iv_bcurr     = gv_bcurr
              iv_date      = iv_date
              iv_spras     = sy-langu
              iv_id_typ    = gv_id_typ
              iv_id_num    = gv_id_num
              iv_sld_an    = gv_sld_an
              iv_filter    = lv_filter
              iv_filter_op = lv_filter
              iv_hidept    = gv_hidept
              iv_storno    = gv_hiderv
              iv_emonat    = lv_emonat
              iv_crval     = gv_crval
              iv_shkzg     = iv_shkzg
              iv_fakerun   = 'X'
            IMPORTING
              et_detail    = lt_detail.
          DATA(lr_stmt) = NEW cl_sql_statement( ).
          lr_stmt->set_param( data_ref = REF #( lv_filter ) inout = cl_sql_statement=>c_param_in  is_lob = 'X' ).
          lr_stmt->set_param( data_ref = REF #( lv_filter_op ) inout = cl_sql_statement=>c_param_in  is_lob = 'X' ).
          DATA(lr_res) =  lr_stmt->execute_query(
                            statement = 'CALL "ZFI_SLDTRN_HDB=>GET_SLD_DETAIL"('
                                      && | iv_bcurr  => '{ gv_bcurr }',|
                                      && | iv_date   => '{ iv_date }',|
                                      && | iv_spras  => '{ sy-langu }',|
                                      && | iv_id_typ => '{ gv_id_typ }',|
                                      && | iv_id_num => '{ gv_id_num }',|
                                      && | iv_sld_an => '{ gv_sld_an }',|
                                      && | iv_filter => ?,|
                                      && | iv_filter_op => ?,|
                                      && | iv_hidept => '{ gv_hidept }',|
                                      && | iv_storno => '{ gv_hiderv }',|
                                      && | iv_emonat => '{ lv_emonat }',|
                                      && | iv_crval  => '{ gv_crval }',|
                                      && | iv_shkzg  => '{ iv_shkzg }',|
                                      && | et_detail => NULL )| ).
          lr_res->set_param_table( itab_ref = REF #( lt_detail ) ).
          lr_res->next_package( ).
          lr_res->close( ).
        ENDIF.
        et_detail = CORRESPONDING #( lt_detail ).
        " пересчет суммы в валюте документа
        LOOP AT et_detail ASSIGNING <ls_det>.
          IF iv_detbal = abap_false.
            IF <ls_det>-shkzg = 'H'.
              <ls_det>-wrbtr = - <ls_det>-wrbtr.
              <ls_det>-dmbtr = - <ls_det>-dmbtr.
              <ls_det>-summ  = - <ls_det>-summ.
              <ls_det>-currev = - <ls_det>-currev.
            ENDIF.
          ENDIF.
* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
          IF NOT ( iv_fname CP 'SLD_I*'
                OR iv_fname CP 'SLD_O*' ).
            CONTINUE.
          ENDIF.

          IF <ls_det>-waers_doc <> <ls_det>-waers_acc.

            CLEAR:
              lv_waers,
              lv_rate_date,
              lv_exchange_rate,
              lv_foreign_factor.

            SELECT SINGLE waers FROM t001
              WHERE bukrs = @<ls_det>-bukrs
              INTO @lv_waers.
            IF sy-subrc <> 0.
              CONTINUE.
            ENDIF.

            IF iv_fname CP 'SLD_I*'.
              lv_rate_date = iv_budat_low - 1.
            ELSEIF iv_fname CP 'SLD_O*'.
              lv_rate_date = iv_budat_high.
            ENDIF.

            CALL FUNCTION 'READ_EXCHANGE_RATE'
              EXPORTING
                date             = lv_rate_date
                foreign_currency = <ls_det>-waers_doc
                local_currency   = lv_waers
                exact_date       = abap_true
              IMPORTING
                exchange_rate    = lv_exchange_rate
                foreign_factor   = lv_foreign_factor
              EXCEPTIONS
                no_rate_found    = 1
                no_factors_found = 2
                no_spread_found  = 3
                derived_2_times  = 4
                overflow         = 5
                zero_rate        = 6
                OTHERS           = 7.
            IF sy-subrc <> 0.
              CONTINUE.
            ENDIF.
          ELSE.
            lv_exchange_rate  = 1.
            lv_foreign_factor = 1.
          ENDIF.

          <ls_det>-overvalued = <ls_det>-wrbtr * lv_exchange_rate / lv_foreign_factor.
          <ls_det>-residual   = <ls_det>-summ - <ls_det>-overvalued.
* <-- AK_BUTVILOVS #8000001029
        ENDLOOP.
      CATCH cx_root INTO DATA(lr_00).
        MESSAGE i839(>3).
    ENDTRY.
  ENDMETHOD.


  METHOD get_sld_op.
    DATA:
      lv_emonat TYPE bkpf-monat,
      lv_edate  TYPE d.
    lv_edate =
      COND #( WHEN s_date[ 1 ]-high  < '19000101' THEN s_date[ 1 ]-low ELSE s_date[ 1 ]-high ) + 1.
    IF s_monat[] IS INITIAL.
      lv_emonat = '16'.
    ELSEIF s_monat[ 1 ]-high <> space.
      lv_emonat = s_monat[ 1 ]-high .
    ELSE.
      lv_emonat = s_monat[ 1 ]-low.
    ENDIF.

    DATA(lv_flt)  = cl_shdb_seltab=>combine_seltabs(
         it_named_seltabs = VALUE #(
           ( name = 'BUKRS' dref = REF #( s_bukrs[] ) )
           ( name = 'PARTNER' dref = REF #( s_partner[] ) )
           ( name = 'HKONT' dref = REF #( s_hkont[] ) )
           ( name = 'AGREMNT' dref = REF #( s_vertn[] ) )
           ( name = 'ZZ_DOPEXT_KEY' dref = REF #( s_mnagr[] ) )
          ) ).

* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
    DATA:
      lv_sld_start_date TYPE dats,
      lv_start_date     TYPE datum,
      lv_saldo          TYPE abap_bool,

      ls_data           TYPE zfi_sldtrn_hdb=>gty_s_sld_op,
      ls_partner        TYPE but000,

      lt_unique_bukrs   TYPE SORTED TABLE OF bukrs WITH UNIQUE KEY table_line,
      lt_unique_hkont   TYPE SORTED TABLE OF hkont WITH UNIQUE KEY table_line,
      lt_vptnr_saldo    TYPE TABLE OF zfi_vptnr_saldo.

    FIELD-SYMBOLS:
      <ls_data>        TYPE zfi_sldtrn_hdb=>gty_s_sld_op,
      <ls_vptnr_saldo> TYPE zfi_vptnr_saldo.

    SELECT bukrs FROM t001
      WHERE bukrs IN @s_bukrs
      INTO TABLE @lt_unique_bukrs.
    IF sy-subrc = 0.
      SELECT distinct saknr AS hkont FROM skb1
        WHERE bukrs IN @s_bukrs
          AND saknr IN @s_hkont
          AND fstag = 'H001'
        INTO TABLE @lt_unique_hkont.
    ENDIF.

    IF   gv_vptnr                 = abap_true
     AND gv_sld_an                = abap_true
     AND gv_detbal                = abap_false
     AND lines( lt_unique_bukrs ) = 1
     AND lines( lt_unique_hkont ) = 1
     AND lines( s_date )          = 1.
      lv_start_date = s_date[ 1 ]-low.
      SELECT budat FROM zfi_vptnr_saldo
        WHERE bukrs IN @s_bukrs
          AND hkont IN @s_hkont
          AND budat <= @lv_start_date
        ORDER BY budat DESCENDING
        INTO @lv_sld_start_date.
        lv_saldo = abap_true.
        EXIT.
      ENDSELECT.
      IF sy-subrc <> 0.
        lv_sld_start_date = '19000101'.
      ENDIF.
    ELSE.
      lv_sld_start_date = '19000101'.
    ENDIF.
* <-- AK_BUTVILOVS #8000001029

    TRY .
        gv_optim = abap_true. " Обсуждали голосом с Владимиром Березовским 03/13/2020
        IF gv_optim = abap_true.
          CALL METHOD zfi_sldtrn_hdb=>get_sld_op_opt
            EXPORTING
              iv_bcurr         = gv_bcurr
              iv_sdate         = s_date[ 1 ]-low
              iv_edate         = lv_edate
              iv_emonat        = lv_emonat
              iv_ppaym         = gv_hidept
              iv_filter        = lv_flt
              iv_vertn         = gv_vertn
              iv_ndoc          = gv_ndoc
              iv_vptnr         = gv_vptnr
              iv_partner       = gv_partner
              iv_dbukr         = gv_dbukr
              iv_zuonr         = gv_zuonr
              iv_id_typ        = gv_id_typ
              iv_id_num        = gv_id_num
              iv_mainagr       = gv_mainagr
              iv_sld_an        = gv_sld_an
              iv_crval         = gv_crval
              iv_budat         = lv_sld_start_date   " AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
              iv_accounting_cd = gv_accounting_cd    " AK_BUTVILOVSK #25179 ZFI_REGBY_K Доработка отчета с вариантом запуска "Без учета документов изменений"
            IMPORTING
              et_data          = DATA(lt_data).
* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
          IF lv_saldo = abap_true.
            SELECT * FROM zfi_vptnr_saldo
              WHERE bukrs IN @s_bukrs
                AND hkont IN @s_hkont
                AND budat =  @lv_sld_start_date
              INTO TABLE @lt_vptnr_saldo.
            LOOP AT lt_data ASSIGNING <ls_data>.
              READ TABLE lt_vptnr_saldo ASSIGNING <ls_vptnr_saldo> WITH KEY vptnr = <ls_data>-partner.
              CHECK sy-subrc = 0.

              <ls_data>-sld_i = <ls_data>-sld_i + <ls_vptnr_saldo>-dmbtr.
              <ls_data>-sld_o = <ls_data>-sld_o + <ls_vptnr_saldo>-dmbtr.

              DELETE lt_vptnr_saldo INDEX sy-tabix.
            ENDLOOP.

            LOOP AT lt_vptnr_saldo ASSIGNING <ls_vptnr_saldo>.
              CLEAR ls_data.

              ls_data-bukrs   = <ls_vptnr_saldo>-bukrs.
              ls_data-hkont   = <ls_vptnr_saldo>-hkont.
              ls_data-partner = <ls_vptnr_saldo>-vptnr.
              ls_data-sld_i   = <ls_vptnr_saldo>-dmbtr.
              ls_data-sld_o   = <ls_vptnr_saldo>-dmbtr.

              SELECT SINGLE skat~txt50 FROM skat
                JOIN t001
                  ON  skat~ktopl = t001~ktopl
                  AND skat~spras = t001~spras
                WHERE skat~saknr = @<ls_vptnr_saldo>-hkont
                  AND t001~bukrs = @<ls_vptnr_saldo>-bukrs
                INTO @ls_data-hkont_name.

              SELECT SINGLE * FROM but000
                WHERE partner = @<ls_vptnr_saldo>-vptnr
                INTO @ls_partner.
              IF sy-subrc = 0.
                CASE ls_partner-type.
                  WHEN '1'.
                    ls_data-partner_name = |{ ls_partner-name_last } { ls_partner-name_first } { ls_partner-namemiddle }|.
                  WHEN  OTHERS.
                    ls_data-partner_name = |{ ls_partner-name_org1 }{ ls_partner-name_org2 }{ ls_partner-name_org3 }{ ls_partner-name_org4 }|.
                ENDCASE.
              ENDIF.

              SELECT SINGLE waers FROM skb1
                WHERE bukrs = @<ls_vptnr_saldo>-bukrs
                  AND saknr = @<ls_vptnr_saldo>-hkont
                INTO @ls_data-waers.

              lt_data = VALUE #( BASE lt_data ( ls_data ) ).
            ENDLOOP.
          ENDIF.
* <-- AK_BUTVILOVS #8000001029
          rt_data = CORRESPONDING #( lt_data ).
          FREE lt_data.
        ELSE.
          CALL METHOD zfi_sldtrn_hdb=>get_sld_op
            EXPORTING
              iv_bcurr   = gv_bcurr
              iv_sdate   = s_date[ 1 ]-low
              iv_edate   = lv_edate
              iv_emonat  = lv_emonat
              iv_ppaym   = gv_hidept
              iv_filter  = lv_flt
              iv_vertn   = gv_vertn
              iv_ndoc    = gv_ndoc
              iv_vptnr   = gv_vptnr
              iv_partner = gv_partner
              iv_dbukr   = gv_dbukr
              iv_zuonr   = gv_zuonr
              iv_id_typ  = gv_id_typ
              iv_id_num  = gv_id_num
              iv_mainagr = gv_mainagr
              iv_sld_an  = gv_sld_an
              iv_crval   = gv_crval
            IMPORTING
              et_data    = lt_data.
          rt_data = CORRESPONDING #( lt_data ).
          FREE lt_data.
        ENDIF.
      CATCH cx_root
*        cx_amdp_execution_failed
         INTO DATA(lr_error).
        MESSAGE e114(fg) WITH 'Ошибка вызова'(t99) 'zfi_sldtrn_hdb=>get_sld_op'.
    ENDTRY.
  ENDMETHOD.


  METHOD get_trn.
    DATA:
      lt_data   TYPE gty_t_data.
    " заполнение оборотов по ACDOCA
    IF gv_acdoca = abap_true AND gv_partner = abap_false.
      APPEND LINES OF get_trn_a( ) TO rt_data.
    ENDIF.
    DATA(lv_flt)  = cl_shdb_seltab=>combine_seltabs(
      it_named_seltabs = VALUE #(
        ( name = 'BUKRS' dref = REF #( s_bukrs[] ) )
        ( name = 'PARTNER' dref = REF #( s_partner[] ) )
        ( name = 'HKONT' dref = REF #( s_hkont[] ) )
        ( name = 'GKONT' dref = REF #( s_gkont[] ) )
        ( name = 'MONAT' dref = REF #( s_monat[] ) )
        ( name = 'BUDAT' dref = REF #( s_date[] ) )
        ( name = 'AGREMNT' dref = REF #( s_vertn[] ) )
        ( name = 'ZZ_DOPEXT_KEY' dref = REF #( s_mnagr[] ) )
       ) ).

* --> AK_BUTVILOVSK #25116 zfi_f2 Оптимизация отчета
    DATA(lv_flt_bseg)  = cl_shdb_seltab=>combine_seltabs(
      it_named_seltabs = VALUE #(
        ( name = 'BUKRS'   dref = REF #( s_bukrs[] ) )
        ( name = 'HKONT'   dref = REF #( s_hkont[] ) )
        ( name = 'H_BUDAT' dref = REF #( s_date[] ) )
       ) ).
* <-- AK_BUTVILOVSK #25116

    CALL METHOD zfi_sldtrn_hdb=>get_trn
      EXPORTING
        iv_bcurr       = gv_bcurr
        iv_filter      = lv_flt
        iv_filter_bseg = CONV #( lv_flt_bseg ) " AK_BUTVILOVSK #25116 zfi_f2 Оптимизация отчета
        iv_dbukr       = gv_dbukr
        iv_monat       = gv_monat
        iv_kvart       = gv_kvart
        iv_days        = gv_days
        iv_zuonr       = gv_zuonr
        iv_vptnr       = gv_vptnr
        iv_partner     = gv_partner
        iv_vertn       = gv_vertn
        iv_ndoc        = gv_ndoc
        iv_crval       = gv_crval
        iv_delrv       = gv_hiderv
        iv_id_typ      = gv_id_typ
        iv_id_num      = gv_id_num
        iv_inturn      = gv_inturn
        iv_mainagr     = gv_mainagr
        iv_t01         = 'I   КВАРТАЛ'(t01)
        iv_t02         = 'II  КВАРТАЛ'(t02)
        iv_t03         = 'III КВАРТАЛ'(t03)
        iv_t04         = 'IV  КВАРТАЛ'(t04)
      IMPORTING
        et_data        = lt_data.

    APPEND LINES OF lt_data TO  rt_data.
  ENDMETHOD.


  METHOD get_trn_a.
    DATA:
      lt_selcol TYPE adbc_column_tab,
      lv_req    TYPE string,
      lv_summ   TYPE zfi_registr_acc-debet,
      lv_dmbtr  TYPE zfi_registr_acc-debet,
      lv_wrbtr  TYPE zfi_registr_acc-debet,
      lt_turn   TYPE STANDARD TABLE OF zfi_registr_acc,
      lv_join   TYPE string, "соединения таблиц по параметрам
      lv_sel2   TYPE string,
      lv_grp_by TYPE string,
      lv_select TYPE string.

    " заполнение строки группировок
    lv_grp_by = 'HKONT,'       &&
                'GKONT,'       &&
                'HKONT_NAME,'  &&
                'WAERS'
                .
    " заполнение строки полей выборки
    lv_select = lv_grp_by.
    " c внутренними оборотами
    IF gv_inturn = abap_true.
      lv_select = lv_select &&
                 `, SUM( CASE SHKZG WHEN 'S' THEN SUMM END  ) AS DEBET` &&
                 `, SUM( CASE SHKZG WHEN 'H' THEN - SUMM END  ) AS KREDIT`.
    ELSE.
      lv_select = lv_select &&
                 `, SUM( CASE WHEN SHKZG = 'S' AND INTRN = '' THEN SUMM END  ) AS DEBET` &&
                 `, SUM( CASE WHEN SHKZG = 'H' AND INTRN = '' THEN - SUMM END  ) AS KREDIT`.
    ENDIF.


    " заполнение таблицы колонок для запроса выборки
    lt_selcol =  VALUE #(
                          ( CONV adbc_name('HKONT') )
                          ( CONV adbc_name('GKONT') )
                          ( CONV adbc_name('HKONT_NAME') )
                          ( CONV adbc_name('WAERS') )
                          ( CONV adbc_name('DEBET') )
                          ( CONV adbc_name('KREDIT') )

                         ).

    " формирование группировки по режимам экрана выбора
    IF gv_dbukr = abap_true.
      lv_select = lv_select && ', BUKRS'.
      lv_grp_by = lv_grp_by && ', BUKRS'.
      APPEND  'BUKRS' TO lt_selcol.
    ENDIF.
    IF gv_monat = abap_true.
      lv_select = lv_select && ', MNAME'.
      lv_grp_by = lv_grp_by && ', MNAME'.
      APPEND  'MNAME' TO lt_selcol.
      lv_select = lv_select && ', MONAT'.
      lv_grp_by = lv_grp_by && ', MONAT'.
      APPEND  'MONAT' TO lt_selcol.
    ENDIF.

    IF gv_kvart = abap_true.
      lv_select = lv_select && ', KVART'.
      lv_grp_by = lv_grp_by && ', KVART'.
      APPEND  'KVART' TO lt_selcol.
    ENDIF.
*
    IF gv_days = abap_true.
      lv_select = lv_select && ', BUDAT'.
      lv_grp_by = lv_grp_by &&
      ', BUDAT'.
      APPEND  'BUDAT' TO lt_selcol.
    ENDIF.
    "     если есть группировки п  счету
    IF gv_mlev <> space.
      lv_select = lv_select && `, left(hkont,` && gv_mlev && `) as hk_grp`.
      APPEND  'HK_GRP' TO lt_selcol.
    ENDIF.
    IF gv_clev <> space.
      lv_select = lv_select && `, left(gkont,` && gv_clev && `) as gk_grp`.
      APPEND  'GK_GRP' TO lt_selcol.
    ENDIF.
    IF gv_zuonr = abap_true.
      lv_select = lv_select && ', ZUONR'.
      lv_grp_by = lv_grp_by && ', ZUONR'.
      APPEND  'ZUONR' TO lt_selcol.
    ENDIF.
    IF gv_partner = abap_true OR gv_vptnr = abap_true.
      lv_select = lv_select && ', PARTNER'.
      lv_grp_by = lv_grp_by && ', PARTNER'.
      APPEND  'PARTNER' TO lt_selcol.
      lv_select = lv_select && ', PARTNER_NAME'.
      lv_grp_by = lv_grp_by && ', PARTNER_NAME'.
      APPEND  'PARTNER_NAME' TO lt_selcol.
      lv_sel2 =  ` BUT000.PARTNER,`
      &&         ` CONCAT(BUT000.NAME_ORG1,BUT000.NAME_ORG2) as PARTNER_NAME,`.

      IF gv_partner = abap_true.
        lv_join = lv_join
        &&  ` LEFT JOIN BUT000 ON BUT000.CLIENT = ACDOCA.RCLNT`
        &&  ` AND ( BUT000.PARTNER = ACDOCA.LIFNR AND ACDOCA.LIFNR <> '' OR BUT000.PARTNER =  ACDOCA.KUNNR AND ACDOCA.LIFNR = '' )`.
        IF gv_id_typ <> space AND gv_id_num <> space.
          lv_join = lv_join
          && `   JOIN BUT0ID ON  BUT0ID.PARTNER = BUT000.PARTNER`  "фильтр по ИД номеру(по БНБУ или МСФО)
          && `       AND BUT0ID.CLIENT = BUT000.CLIENT AND  BUT0ID.TYPE = '` && gv_id_typ && `' AND BUT0ID.IDNUMBER = '` && gv_id_num && `'`.
        ENDIF.
      ENDIF.
      IF  gv_vptnr = abap_true.
        lv_join = lv_join
         &&  ` LEFT JOIN BUT000 ON BUT000.CLIENT = ACDOCA.RCLNT`
         &&  ` AND  BUT000.PARTNER = ACDOCA.VPTNR`.
      ENDIF.
    ENDIF.


    lv_select = lv_select &&
                 `, SUM( CASE WHEN SHKZG = 'S' THEN 1 else 0 END  ) AS CNT_D` &&
                 `, SUM( CASE WHEN SHKZG = 'H' THEN 1 else 0 END  ) AS CNT_K`.
    APPEND 'CNT_D' TO lt_selcol.
    APPEND 'CNT_K' TO lt_selcol.

    " формирование строки запроса
    lv_req = ` SELECT ` && lv_select && ` FROM `
    && `(SELECT ACDOCA.RACCT AS HKONT, ACDOCA.RBUKRS, T247.LTX as MNAME, ACDOCA.BUDAT as BUDAT, ACDOCA.POPER as MONAT,ACDOCA.ZUONR,`
    &&          lv_sel2
    &&          ` COALESCE(JD.KREDIT, COALESCE(JK.DEBET,'?') ) AS GKONT, `
    &&          ` CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN `             "Сумма в валюте БЕ
    &&                     ` CASE WHEN ACDOCA.HSL > 0  THEN  ABS( COALESCE(JD.DMBTR, JK.DMBTR, ACDOCA.HSL) )`
    &&                                                   ` ELSE  - ABS( COALESCE(JD.DMBTR, JK.DMBTR, ACDOCA.HSL) ) END `
    &&                ` ELSE `                                                                       "Сумма в валюте счета
    &&                     ` CASE WHEN  ACDOCA.WSL > 0 THEN  ABS( COALESCE(JD.WRBTR, JK.WRBTR, ACDOCA.WSL) )`
    &&                     `      ELSE  - ABS(COALESCE(JD.WRBTR,JK.WRBTR, ACDOCA.WSL) )  END `
    &&         ` END AS SUMM,`
    &&         ` ACDOCA.DRCRK AS SHKZG, `"Определение дебет-кредит
    &&         ` SKAT.TXT20 AS HKONT_NAME,`
    &&         ` CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN T001.WAERS`        "Выборка валюты
    &&         `      ELSE SKB1.WAERS`
    &&         ` END AS WAERS,`
    &&         ` CASE WHEN COALESCE(JD.KREDIT, COALESCE(JK.DEBET,'?') ) = ACDOCA.RACCT AND `
    &&         `           COALESCE(BC.LIFNR, BC.KUNNR) = COALESCE(ACDOCA.LIFNR, ACDOCA.KUNNR) THEN 'X' else ''    `
    &&         ` END AS INTRN,`
    &&         ` CASE`                                                                            " формирование квартала
    &&         `   WHEN SUBSTR(ACDOCA.BUDAT,5,2) BETWEEN '01' AND '03' THEN 'I   КВАРТАЛ'`
    &&         `   WHEN SUBSTR(ACDOCA.BUDAT,5,2) BETWEEN '04' AND '06' THEN 'II  КВАРТАЛ'`
    &&         `   WHEN SUBSTR(ACDOCA.BUDAT,5,2) BETWEEN '07' AND '09' THEN 'III КВАРТАЛ'`
    &&         `   WHEN SUBSTR(ACDOCA.BUDAT,5,2) BETWEEN '10' AND '12' THEN 'IV  КВАРТАЛ'`
    &&         ` END  AS KVART`
    && `   FROM ACDOCA`
    && `        LEFT JOIN T247 on  T247.SPRAS = '` && sy-langu &&  `'`
    &&                       ` and T247.MNR = SUBSTR(ACDOCA.BUDAT,5,2)`

    && `    LEFT JOIN J_3RK_CORR_ITEMS AS JD  ON JD.BUKRS = ACDOCA.RBUKRS`
    && `       AND JD.MANDT = ACDOCA.RCLNT`
    && `       AND JD.GJAHR = ACDOCA.GJAHR`
    && `       AND JD.BELNR = ACDOCA.BELNR`
    && `       AND JD.BUZEID = RIGHT(ACDOCA.DOCLN,3) `

    && `    LEFT JOIN J_3RK_CORR_ITEMS AS JK  ON JK.BUKRS = ACDOCA.RBUKRS`
    && `       AND JK.GJAHR = ACDOCA.GJAHR`
    && `       AND JK.MANDT = ACDOCA.RCLNT`
    && `       AND JK.BELNR = ACDOCA.BELNR`
    && `       AND JK.BUZEIK =  RIGHT(ACDOCA.DOCLN,3)`
    && `    LEFT JOIN ACDOCA AS BC  ON BC.RBUKRS = ACDOCA.RBUKRS`
    && `       AND BC.RCLNT = ACDOCA.RCLNT`
    && `       AND BC.GJAHR = ACDOCA.GJAHR`
    && `       AND BC.BELNR = ACDOCA.BELNR`
    && `       AND ( RIGHT(BC.DOCLN,3) = COALESCE(JD.BUZEIK,JK.BUZEID) )`
    &&     lv_join
    && `   JOIN T001 ON T001.BUKRS = ACDOCA.RBUKRS`
    && `       AND T001.MANDT = ACDOCA.RCLNT`
    && `   JOIN SKAT ON  SKAT.SPRAS = '` && sy-langu &&  `'`
    && `       AND SKAT.MANDT = ACDOCA.RCLNT`
    && `       AND SKAT.KTOPL = T001.KTOPL`
    && `       AND SKAT.SAKNR = ACDOCA.RACCT`
    && `   JOIN SKB1 ON  SKB1.BUKRS = ACDOCA.RBUKRS`
    && `       AND SKB1.MANDT = ACDOCA.RCLNT`
    && `       AND SKB1.SAKNR = ACDOCA.RACCT`.
    IF gv_partner = abap_true.
      lv_req   = lv_req
      && `       AND ( (SKB1.MITKZ in ('D','K') OR SKB1.XOPVW  = 'X' ) )`.
    ENDIF.
    lv_req   = lv_req
    && ` WHERE ACDOCA.RCLNT  = '` && sy-mandt &&   `' `
    &&   ` AND ACDOCA.RLDNR = '0L' AND ACDOCA.BSTAT = 'U'  `.
    IF gv_partner = abap_true.
      lv_req = lv_req && ' AND ( ( '
      &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `ACDOCA.LIFNR` )   && ` ) OR (`
      &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `ACDOCA.KUNNR` )   && ` ) )  `.
    ENDIF.
    lv_req   = lv_req
    &&          `AND ( ` &&   cl_lib_seltab=>new( it_sel = s_bukrs[] )->sql_where_condition( iv_field = `ACDOCA.RBUKRS`   )  && `)`
    &&          `AND (`  &&   cl_lib_seltab=>new( it_sel = s_hkont[] )->sql_where_condition( iv_field = `ACDOCA.RACCT`   )  && `)`
    &&          `AND (`  &&   cl_lib_seltab=>new( it_sel = s_date[]  )->sql_where_condition( iv_field = `ACDOCA.BUDAT` )  && `)`
    &&          `AND (`  &&   cl_lib_seltab=>new( it_sel = s_monat[] )->sql_where_condition( iv_field = `ACDOCA.POPER` )  && `)`
    &&    `) WHERE (`   &&   cl_lib_seltab=>new( it_sel = s_gkont[] )->sql_where_condition( iv_field = `GKONT` )  && `)`
    &&    ` GROUP BY ` && lv_grp_by .                                 .
    TRY.
        DATA(result) = NEW cl_sql_statement( )->execute_query( lv_req ).
        result->set_param_table( itab_ref = REF #( rt_data )
                                 corresponding_fields = lt_selcol ).

        IF result->next_package( ) > 0.
*          cl_demo_output=>display( gt_data ).
        ENDIF.
      CATCH cx_sql_exception INTO DATA(err).
        cl_demo_output=>display(  err->get_text( ) ).
    ENDTRY.


  ENDMETHOD.


METHOD get_trn_detail.
  DATA:
    lv_flt      TYPE string,
    lv_flt_main TYPE string,
    lv_flt_cor  TYPE string.
  TRY.
      DATA(lt_bukrs_rng) = COND gty_t_bukrs_rng( WHEN it_bukrs_rng IS INITIAL THEN  s_bukrs[] ELSE it_bukrs_rng ).
      DATA(lt_hkont_rng) = COND gty_t_hkont_rng( WHEN it_hkont_rng IS INITIAL THEN  s_hkont[] ELSE it_hkont_rng ).
      DATA(lt_gkont_rng) = COND gty_t_hkont_rng( WHEN it_gkont_rng IS INITIAL THEN  s_gkont[] ELSE it_gkont_rng ).
      DATA(lt_date_rng) = COND gty_t_date_rng( WHEN it_date_rng IS INITIAL THEN  s_date[] ELSE it_date_rng ).
      DATA(lt_partner_rng) = COND gty_t_partner_rng( WHEN it_partner_rng IS INITIAL THEN s_partner[] ELSE it_partner_rng ).
      DATA(lt_vertn_rng) = COND gty_t_vertn_rng( WHEN it_vertn_rng IS INITIAL THEN s_vertn[] ELSE it_vertn_rng ).

      lv_flt  = cl_shdb_seltab=>combine_seltabs(
       it_named_seltabs = VALUE #(
         ( name = 'BUKRS' dref = REF #( lt_bukrs_rng ) )
         ( name = 'HKONT' dref = REF #( lt_hkont_rng ) )
         ( name = 'GKONT' dref = REF #( lt_gkont_rng ) )
         ( name = 'BUDAT' dref = REF #( lt_date_rng ) )
         ( name = 'PARTNER' dref = REF #( lt_partner_rng ) )
         ( name = 'ZUONR' dref = REF #( it_zuonr_rng ) )
         ( name = 'MONAT' dref = REF #( it_monat_rng ) )
         ( name = 'AGREMNT' dref = REF #( lt_vertn_rng ) )
         ( name = 'ZZ_DOPEXT_KEY' dref = REF #( s_mnagr[] ) )
      ) ).

* --> AK_BUTVILOVSK #25923 Оптимизация скорости "проваливания" в сумму
      DATA(lv_flt_bseg)  = cl_shdb_seltab=>combine_seltabs(
        it_named_seltabs = VALUE #(
          ( name = 'BUKRS'   dref = REF #( lt_bukrs_rng ) )
          ( name = 'HKONT'   dref = REF #( lt_hkont_rng ) )
          ( name = 'H_BUDAT' dref = REF #( lt_date_rng ) )
         ) ).
* <-- AK_BUTVILOVSK #25923

      IF 1 <> 1.
        CALL METHOD zfi_sldtrn_hdb=>get_trn_detail
          EXPORTING
            iv_bcurr       = gv_bcurr
            iv_filter      = lv_flt
            iv_filter_bseg = lv_flt_bseg  " AK_BUTVILOVSK #25923 Оптимизация скорости "проваливания" в сумму
            iv_hiderv      = gv_hiderv
            iv_partner     = gv_partner
            iv_vptnr       = gv_vptnr
            iv_inturn      = gv_inturn
            iv_id_typ      = gv_id_typ
            iv_id_num      = gv_id_num
            iv_crval       = gv_crval
            iv_shkzg       = iv_shkzg
            iv_waers       = iv_waers
          IMPORTING
            et_detail      = et_detail.
      ELSE.
        CALL METHOD zfi_sldtrn_hdb=>get_trn_detail
          EXPORTING
            iv_bcurr       = gv_bcurr
            iv_filter      = lv_flt
            iv_filter_bseg = lv_flt_bseg  " AK_BUTVILOVSK #25923 Оптимизация скорости "проваливания" в сумму
            iv_hiderv      = gv_hiderv
            iv_partner     = gv_partner
            iv_vptnr       = gv_vptnr
            iv_inturn      = gv_inturn
            iv_id_typ      = gv_id_typ
            iv_id_num      = gv_id_num
            iv_crval       = gv_crval
            iv_shkzg       = iv_shkzg
            iv_waers       = iv_waers
            iv_fakerun     = 'X'
          IMPORTING
            et_detail      = et_detail.
        DATA(lr_stmt) = NEW cl_sql_statement( ).
        lr_stmt->set_param( data_ref = REF #( lv_flt ) inout = cl_sql_statement=>c_param_in  is_lob = 'X' ).
        " AK_BUTVILOVSK #25923 Оптимизация скорости "проваливания" в сумму
        lr_stmt->set_param( data_ref = REF #( lv_flt_bseg ) inout = cl_sql_statement=>c_param_in  is_lob = 'X' ).
        DATA(lr_res) =  lr_stmt->execute_query(
                          statement = 'CALL "ZFI_SLDTRN_HDB=>GET_TRN_DETAIL"('
                                    && | iv_bcurr   => '{ gv_bcurr }',|
                                    && | iv_filter  => ?,|
                                    && | iv_filter_bseg  => ?,|            " AK_BUTVILOVSK #25923 Оптимизация скорости "проваливания" в сумму
                                    && | iv_hiderv  => '{ gv_hiderv }',|
                                    && | iv_partner => '{ gv_partner }',|
                                    && | iv_vptnr   => '{ gv_vptnr }',|
                                    && | iv_inturn  => '{ gv_inturn }',|
                                    && | iv_id_typ  => '{ gv_id_typ }', |
                                    && | iv_id_num  => '{ gv_id_num }',|
                                    && | iv_crval   => '{ gv_crval }',|
                                    && | iv_shkzg   => '{ iv_shkzg }',|
                                    && | iv_waers   => '{ iv_waers }',|
                                    && | et_detail => NULL )| ).
        lr_res->set_param_table( itab_ref = REF #( et_detail ) ).
        lr_res->next_package( ).
        lr_res->close( ).
      ENDIF.
    CATCH  cx_root INTO DATA(lr2) .
      MESSAGE i839(>3).
  ENDTRY.
ENDMETHOD. "get_trn_detail


  METHOD get_trn_detail_a.
    DATA:
      lv_intrn TYPE string. "условие при выборке без внутренних оборотов
    DEFINE add_sel_field.
      IF lv_select IS INITIAL.
        lv_select = &1.
      ELSE.
        lv_select = lv_select && `,` && &1.
      ENDIF.
      APPEND &1 TO lt_selcol.
    END-OF-DEFINITION.
    DEFINE map.
      &2-&3hkont = &1-hkont.
      &2-&3anln1 = &1-anln1.
      &2-&3anln2 = &1-anln2.
      &2-&3aufnr = &1-aufnr.
      &2-&3augbl = &1-augbl.
      &2-&3augdt = &1-augdt.
      &2-&3ebeln = &1-ebeln.
      &2-&3fipos = &1-fipos.
      &2-&3fistl = &1-fistl.
      &2-&3kostl = &1-kostl.
      &2-&3kunnr = &1-kunnr.
      &2-&3lifnr = &1-lifnr.
      &2-&3maktx = &1-maktx.
      &2-&3fipos_text = &1-fipos_text.
      &2-&3fistl_text = &1-fistl_text.
      &2-&3kostl_text = &1-kostl_text.
      &2-&3matnr = &1-matnr.
      &2-&3meins = &1-meins.
      &2-&3menge = &1-menge.
      &2-&3projk = &1-projk.
      &2-&3rebzg = &1-rebzg.
      &2-&3rebzj = &1-rebzj.
      &2-&3rebzz = &1-rebzz.
      &2-&3sgtxt = &1-sgtxt.
      &2-&3shkzg = &1-shkzg.
      &2-&3umskz = &1-umskz.
      &2-&3uzawe = &1-uzawe.
      &2-&3werks = &1-werks.
      &2-&3xnegp = &1-xnegp.
      &2-&3zfbdt = &1-zfbdt.
      &2-&3zuonr = &1-zuonr.
      &2-&3vptnr = &1-vptnr.
    END-OF-DEFINITION.
    DATA:
      lt_storno TYPE STANDARD TABLE OF zfi_rev_key,
      lt_selcol TYPE adbc_column_tab,
      lv_req    TYPE string,
      lv_sign   TYPE i,
      lv_summ   TYPE zfi_registr_acc-debet,
      lv_dmbtr  TYPE zfi_registr_acc-debet,
      lv_wrbtr  TYPE zfi_registr_acc-debet,
      lv_select TYPE string.
    IF gv_inturn = abap_false. "выборка без внутренних оборотов
      lv_intrn = ` AND INTRN = '' `.
    ENDIF.
    " заполнение строки полей выборки
    add_sel_field: 'BUKRS', 'BELNR','GJAHR','P_BUZEI','C_BUZEI','WAERS','WAERS_BUK',
                   'WAERS_DOC' ,'WAERS_ACC' ,'DMBTR','WRBTR' ,'SUMM' , 'SHKZG',
                   'BUDAT','AWKEY','AWTYP','BKTXT','BLART','BLDAT','CPUDT','TCODE','USNAM',
                   'XBLNR','KURSF', 'MONAT'.
    " формирование строки запроса
    lv_req = ` SELECT ` && lv_select && ` FROM ( `
    &&  `SELECT`
    &&        ` ACDOCA.BUDAT,ACDOCA.AWKEY,ACDOCA.AWTYP,ACDOCA.BKTXT,ACDOCA.BLART,ACDOCA.BLDAT,ACDOCA.CPUDT,ACDOCA.TCODE,ACDOCA.USNAM,`
    &&        ` ACDOCA.XBLNR,ACDOCA.KURSF,ACDOCA.MONAT,`
    &&        ` ACDOCA.RBUKRS AS BUKRS, ACDOCA.BELNR, ACDOCA.GJAHR,RIGHT(ACDOCA.DOCLN,3) AS as P_BUZEI, RIGHT(BC.DOCLN,3) AS C_BUZEI,`
    &&        ` COALESCE(JD.DMBTR,JK.DMBTR, BSEG.DMBTR) as DMBTR, COALESCE(JD.WRBTR,JK.WRBTR, BSEG.WRBTR) as WRBTR,`
    &&        ` T001.WAERS AS WAERS_BUK, SKB1.WAERS AS WAERS_ACC, BSEG.H_WAERS AS WAERS_DOC,`
    &&        ` CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN`            "Учет валюты счета
    &&                ` CASE WHEN COALESCE(JD.XNEGPD,JK.XNEGPK, BSEG.XNEGP)  = ''`     "Учет красного сторно
    &&                `        THEN  COALESCE(JD.DMBTR,JK.DMBTR, BSEG.DMBTR) `
    &&                `        ELSE   - COALESCE(JD.DMBTR, JK.DMBTR, BSEG.DMBTR)  `
    &&                ` END  `
    &&                ` ELSE`
    &&                ` CASE WHEN    COALESCE(JD.XNEGPD, JK.XNEGPK, BSEG.XNEGP)  = ''`
    &&                `        THEN  COALESCE(JD.WRBTR, JK.WRBTR, BSEG.WRBTR)`
    &&                `        ELSE - COALESCE(JD.WRBTR, JK.WRBTR, BSEG.WRBTR) `
    &&                ` END `
    &&         ` END AS SUMM,`
    &&         ` CASE  WHEN COALESCE(JD.XNEGPD, JK.XNEGPK, BSEG.XNEGP) = '' THEN`            "Определение дебет-кредит с учетом КС
    &&                    ` CASE WHEN JD.XNEGPD IS NOT NULL THEN 'S' `
    &&                    `      WHEN JD.XNEGPK IS NOT NULL THEN 'H' `
    &&                    ` ELSE BSEG.SHKZG`
    &&                    ` END`
    &&              `  ELSE CASE WHEN JD.XNEGPD IS NOT NULL THEN 'H' `
    &&                    `      WHEN JD.XNEGPK IS NOT NULL THEN 'S' `
    &&                    ` ELSE CASE BSEG.SHKZG`
    &&                    `        WHEN 'S' THEN 'H'`
    &&                    `        WHEN 'H' THEN 'S'`
    &&                         ` END`
    &&                    ` END`
    &&         ` END AS SHKZG, `
    &&         ` CASE WHEN '` && gv_bcurr && `' = 'X' OR SKB1.WAERS = T001.WAERS THEN T001.WAERS`        "Выборка валюты
    &&         `      ELSE SKB1.WAERS`
    &&         ` END AS WAERS,`
    &&         ` CASE WHEN COALESCE(JD.KREDIT,JK.DEBET) = BSEG.HKONT AND `
    &&         `           COALESCE(BC.LIFNR, BC.KUNNR) = COALESCE(BSEG.LIFNR, BSEG.KUNNR)`
    &&               `THEN 'X' ELSE ''    `
    &&         ` END AS INTRN`
    && `   FROM ACDOCA  `
    && `    JOIN BKPF  ON BKPF.BUKRS = BSEG.BUKRS`
    && `       AND BKPF.MANDT = BSEG.MANDT`
    && `       AND BKPF.GJAHR = BSEG.GJAHR`
    && `       AND BKPF.BELNR = BSEG.BELNR`

    && `    LEFT JOIN J_3RK_CORR_ITEMS AS JD  ON JD.BUKRS = BSEG.BUKRS`
    && `       AND JD.MANDT = BSEG.MANDT`
    && `       AND JD.GJAHR = BSEG.GJAHR`
    && `       AND JD.BELNR = BSEG.BELNR`
    && `       AND JD.BUZEID = BSEG.BUZEI`

    && `    LEFT JOIN J_3RK_CORR_ITEMS AS JK  ON JK.BUKRS = BSEG.BUKRS`
    && `       AND JK.GJAHR = BSEG.GJAHR`
    && `       AND JK.MANDT = BSEG.MANDT`
    && `       AND JK.BELNR = BSEG.BELNR`
    && `       AND JK.BUZEIK = BSEG.BUZEI`

    && `    LEFT JOIN BSEG AS BC  ON BC.BUKRS = BSEG.BUKRS`
    && `       AND BC.MANDT = BSEG.MANDT`
    && `       AND BC.GJAHR = BSEG.GJAHR`
    && `       AND BC.BELNR = BSEG.BELNR`
    && `       AND BC.BUZEI =  COALESCE(JD.BUZEIK,JK.BUZEID)`
    && `   JOIN T001 ON T001.BUKRS = BSEG.BUKRS`
    && `       AND T001.MANDT = BSEG.MANDT`
    && `   JOIN SKB1 ON  SKB1.BUKRS = BSEG.BUKRS`
    && `       AND SKB1.MANDT = BSEG.MANDT`
    && `       AND SKB1.SAKNR = BSEG.HKONT`.
    IF gv_partner = abap_true.
      lv_req   = lv_req
      && `       AND ( (SKB1.MITKZ in ('D','K') OR SKB1.XOPVW  = 'X' ) )`.
    ENDIF.
    IF gv_id_typ <> space AND gv_id_num <> space.
      lv_req = lv_req
      &&    ` LEFT JOIN BUT000 ON BUT000.CLIENT = BSEG.MANDT`
      &&                        ` AND ( BUT000.PARTNER = BSEG.LIFNR AND BSEG.LIFNR <> '' OR BUT000.PARTNER =  BSEG.KUNNR AND BSEG.LIFNR = '' )`
      && `   JOIN BUT0ID ON  BUT0ID.PARTNER = BUT000.PARTNER`  "фильтр по ИД номеру(по БНБУ или МСФО)
      && `       AND BUT0ID.CLIENT = BUT000.CLIENT AND  BUT0ID.TYPE = '` && gv_id_typ && `' AND BUT0ID.IDNUMBER = '` && gv_id_num && `'`.
    ENDIF.
    lv_req   = lv_req
    && ` WHERE BSEG.MANDT  = '` && sy-mandt &&   `' `
    &&          ` AND ( ` &&   cl_lib_seltab=>new( it_sel = s_bukrs[] )->sql_where_condition( iv_field      = `ACDOCA.BUKRS`   )  && `)`
    &&          ` AND ( ` &&   cl_lib_seltab=>new( it_sel = it_bukrs_rng )->sql_where_condition( iv_field   = `ACDOCA.BUKRS`   )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = s_hkont[] )->sql_where_condition( iv_field      = `ACDOCA.HKONT`   )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = it_hkont_rng )->sql_where_condition( iv_field   = `ACDOCA.HKONT`   )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = s_date[] )->sql_where_condition( iv_field       = `ACDOCA.H_BUDAT` )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = it_date_rng )->sql_where_condition( iv_field    = `ACDOCA.H_BUDAT` )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = s_monat[] )->sql_where_condition( iv_field      = `ACDOCA.H_MONAT` )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = it_zuonr_rng[] )->sql_where_condition( iv_field = `ACDOCA.ZUONR` )  && `)`
    &&          ` AND ( (`  &&   cl_lib_seltab=>new( it_sel = it_partner_rng[] )->sql_where_condition( iv_field = `ACDOCA.LIFNR` )  && `)`
    &&          ` OR    (`  &&   cl_lib_seltab=>new( it_sel = it_partner_rng[] )->sql_where_condition( iv_field = `ACDOCA.KUNNR` )  && `) )`
    &&          ` AND ( (`  &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `ACDOCA.LIFNR` )  && `)`
    &&          ` OR    (`  &&   cl_lib_seltab=>new( it_sel = s_partner[] )->sql_where_condition( iv_field = `ACDOCA.KUNNR` )  && `) )`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = it_gkont_rng )->sql_where_condition( iv_field = `COALESCE(BC.HKONT,'?')`   )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = s_gkont[] )->sql_where_condition( iv_field = `COALESCE(BC.HKONT,'?')`   )  && `)`
    &&          ` AND (`  &&   cl_lib_seltab=>new( it_sel = it_vptnr_rng[] )->sql_where_condition( iv_field = `BSEG.VPTNR` )     && `)`
    &&    `)  WHERE SHKZG = '` && iv_shkzg && `'` && lv_intrn.


    TRY.
        DATA(result) = NEW cl_sql_statement( )->execute_query( lv_req ).
        result->set_param_table( itab_ref = REF #( et_detail )
                                 corresponding_fields = lt_selcol ).

        IF result->next_package( upto = 10000000 ) > 0.
*          cl_demo_output=>display( et_detail ).
        ENDIF.
      CATCH cx_sql_exception INTO DATA(err).
        cl_demo_output=>display(  err->get_text( ) ).
    ENDTRY.
    IF et_detail IS INITIAL.
      RETURN.
    ENDIF.


    SELECT bseg~bukrs,bseg~belnr,bseg~gjahr,bseg~buzei,bseg~anln1,bseg~anln2,bseg~aufnr,bseg~augbl,
           bseg~augdt,bseg~ebeln,bseg~fipos,bseg~fistl,bseg~kostl,bseg~kunnr,bseg~lifnr,bseg~matnr,
           bseg~meins,bseg~menge,bseg~projk,bseg~rebzg,bseg~rebzj,bseg~rebzz,bseg~sgtxt,bseg~shkzg,
           bseg~umskz,bseg~uzawe,bseg~werks,bseg~xnegp,bseg~zfbdt,bseg~zuonr,bseg~hkont,bseg~vptnr,
           fmcit~bezei AS fipos_text,
           fmfctrt~bezeich AS fistl_text,
           makt~maktx,
           cskt~ktext AS kostl_text
      FROM bseg LEFT JOIN makt ON makt~spras = @sy-langu
                               AND makt~matnr = bseg~matnr
                     JOIN t001 ON t001~bukrs = bseg~bukrs
                LEFT JOIN fmfctrt ON fmfctrt~spras = @sy-langu
                                  AND fmfctrt~fikrs = t001~fikrs
                                  AND fmfctrt~fictr = bseg~fistl
                                  AND fmfctrt~datbis = '99991231'
                LEFT JOIN fmcit ON fmcit~spras = @sy-langu
                               AND fmcit~fikrs = t001~fikrs
                               AND fmcit~gjahr = bseg~gjahr
                               AND fmcit~fipex = bseg~fipos
                LEFT JOIN cskt ON cskt~spras = @sy-langu
                              AND cskt~kokrs = @gc_kokrs
                              AND cskt~kostl = bseg~kostl
      INTO TABLE @DATA(lt_turn)
      FOR ALL ENTRIES IN @et_detail
      WHERE bseg~bukrs = @et_detail-bukrs
        AND bseg~belnr = @et_detail-belnr
        AND bseg~gjahr = @et_detail-gjahr
        AND ( bseg~buzei = @et_detail-p_buzei OR bseg~buzei = @et_detail-c_buzei )
      .
    SORT lt_turn BY  bukrs belnr gjahr buzei.
    " удаление документов сторно
    IF gv_hiderv = abap_true.
      LOOP AT et_detail ASSIGNING FIELD-SYMBOL(<ls_det>).
        READ TABLE lt_storno TRANSPORTING NO FIELDS
        WITH KEY bukrs = <ls_det>-bukrs
        belnr = <ls_det>-belnr
        gjahr = <ls_det>-gjahr BINARY SEARCH.
        IF sy-subrc <> 0.
          INSERT VALUE #( mandt = sy-mandt
          bukrs = <ls_det>-bukrs
          belnr = <ls_det>-belnr
          gjahr = <ls_det>-gjahr
          ) INTO lt_storno INDEX sy-tabix.
        ENDIF.
      ENDLOOP.
      zfi_sldtrn_hdb=>get_storno(
      EXPORTING it_pos = lt_storno
      IMPORTING et_pos = lt_storno
        ).
      SORT lt_storno BY bukrs belnr gjahr.
      LOOP AT et_detail ASSIGNING <ls_det>.
        READ TABLE lt_storno TRANSPORTING NO FIELDS
        WITH KEY bukrs = <ls_det>-bukrs
        belnr = <ls_det>-belnr
        gjahr = <ls_det>-gjahr BINARY SEARCH .
        IF sy-subrc = 0.
          DELETE et_detail.
          CONTINUE.
        ENDIF.
      ENDLOOP.
    ENDIF.
    LOOP AT et_detail ASSIGNING <ls_det>.
      READ TABLE lt_turn ASSIGNING FIELD-SYMBOL(<ls_turn>)
        WITH KEY  bukrs = <ls_det>-bukrs
                  belnr = <ls_det>-belnr
                  gjahr = <ls_det>-gjahr
                  buzei = <ls_det>-p_buzei
                  BINARY SEARCH.
      IF sy-subrc = 0.
        map <ls_turn> <ls_det> p_.
      ENDIF.
      READ TABLE lt_turn ASSIGNING <ls_turn>
        WITH KEY  bukrs = <ls_det>-bukrs
                  belnr = <ls_det>-belnr
                  gjahr = <ls_det>-gjahr
                  buzei = <ls_det>-c_buzei
                  BINARY SEARCH.
      IF sy-subrc = 0.
        map <ls_turn> <ls_det> c_.
        <ls_det>-c_hkont = <ls_turn>-hkont.
      ENDIF.
      lv_sign = sign( <ls_det>-summ ).
      <ls_det>-dmbtr = lv_sign * <ls_det>-dmbtr.
      <ls_det>-wrbtr = lv_sign * <ls_det>-wrbtr.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.