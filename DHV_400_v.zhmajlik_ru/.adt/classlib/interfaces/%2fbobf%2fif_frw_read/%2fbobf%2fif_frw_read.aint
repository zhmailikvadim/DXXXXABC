"! This interface allows read operations on the current business objects' nodes
"! <p>An object implementing this interface is passed to the methods of business content classes that are allowed to read node data (associations, actions, determinations, queries, validations).</p>
"! <p><strong>Note:</strong> In order to access nodes of a foreign business object, the service manager must be used instead.</p>
interface /BOBF/IF_FRW_READ
  public .

  type-pools ABAP .
"! This method allows to convert business alternative keys to node instance keys and vice versa.
"! @parameter IV_NODE_KEY                     | Key of the node to which source and target alternative keys are assigned
"! @parameter IV_ALTKEY_KEY                   | Key of the source alternative key<br/>
"!                                              <strong>Note:</strong> You can also translate the node instance key into a certain business alternative key using constant SC_ALTERNATIVE_KEY_KEY of /bobf/if_frw_c as source alternative key.
"! @parameter IV_TARGET_ALTKEY_KEY            | <strong>Optional parameter:</strong> Key of the target alternative key<br/>
"!                                              <strong>Note:</strong> You can also translate from a business alternative key to the node instance key using constant SC_ALTERNATIVE_KEY_KEY of /bobf/if_frw_c as target alternative key.
"! @parameter IT_KEY                          | Table of source alternative keys for which the target alternative keys shall be retrieved
"! @parameter IV_BEFORE_IMAGE                 | <strong>Optional Parameter:</strong> Indicates whether the conversion should evaluate the before image or take changes done in the current transaction into account.
"! The semantic of the before image depends on the invocation context.
"! @parameter IV_INVALIDATE_CACHE             | <strong>Deprecated</strong>
"! @parameter ET_RESULT                       | Result table to be used for non-unique target alternative keys. May have multiple result lines pointing to the corresponding source alternative in <strong>IT_KEY</strong>.
"! @parameter ET_KEY                          | Result table to be used for unique target alternative keys. Each line of the result table corresponds to its source alternative key by index equality.<br/>
"!                                              <strong>Note:</strong> Do not use this parameter if you have a non-unique target alternative key.
  methods CONVERT_ALTERN_KEY
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IV_ALTKEY_KEY type /BOBF/OBM_ALTKEY_KEY
      !IV_TARGET_ALTKEY_KEY type /BOBF/OBM_ALTKEY_KEY default /BOBF/IF_FRW_C=>SC_ALTERNATIVE_KEY_KEY
      !IT_KEY type INDEX TABLE optional
      !IV_BEFORE_IMAGE type BOOLE_D default ABAP_FALSE
      !IV_INVALIDATE_CACHE type BOOLE_D default ABAP_FALSE
    exporting
      !ET_RESULT type /BOBF/T_FRW_KEYINDEX
      !ET_KEY type INDEX TABLE .

"! This method retrieves the root keys of the specified node instance keys
"! @parameter IV_NODE                         | Node of the instances for which the root key shall be retrieved
"! @parameter IT_KEY                          | Table of node instance for which the root key shall be retrieved
"! @parameter IV_BEFORE_IMAGE                 | Parameter that indicates whether the retrieve shall be evaluate the before image or take the changes of the current transaction into account.<br/>
"!                                              <strong>Note:</strong> The semantics of the before image can be different, depending on the context where this method is
"! used. Depending on the content category (action, association, determination, query, validation) that is called, and on the execution time (if the content is a determination), there may be no valid before image.
"!                                              In such a case, the returned values are those of the current image.
"! @parameter ET_TARGET_KEY                   | Result table containing the root keys of the instances defined in <strong>IT_KEY</strong>.
"! @parameter ET_KEY_LINK                     | Result table containing the linkage between a key of <strong>IT_KEY</strong> and its corresponding root key
"! @parameter ET_FAILED_KEY                   | Table of node instance keys that could not be read, for instance if the node instances do not exist. It is equal to or a subset of <strong>IT_KEY</strong>.
  methods GET_ROOT_KEY
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IT_KEY type /BOBF/T_FRW_KEY
      !IV_BEFORE_IMAGE type BOOLE_D default ABAP_FALSE
    exporting
      !ET_TARGET_KEY type /BOBF/T_FRW_KEY
      !ET_KEY_LINK type /BOBF/T_FRW_KEY_LINK
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY .

"! This method retrieves node instance data
"! @parameter IV_NODE                         | Key of the node from which node instance data shall be retrieved
"! @parameter IT_KEY                          | Table of node instance keys that shall be retrieved
"! @parameter IV_BEFORE_IMAGE                 | <strong>Optional parameter:</strong> Indicates that the before image is to be evaluated. The before image can be different, depending on the context where this method is used.
"! @parameter IV_FILL_DATA                    | <strong>Optional parameter:</strong> Indicates that the data of the retrieved node instances is to be read. If set to true, the parameter <strong>ET_DATA</strong>
"! will contain the data of the target node instances. If set to false, the parameter <strong>ET_DATA</strong> will be initial.
"! @parameter IT_REQUESTED_ATTRIBUTES         | List of attributes that are required by the consumer. If only persistent attributes are requested,
"! BOPF delays the execution of AfterLoading-Determinations configured to the transient fields of the same node. However, if later on one of the transient fields are requested, all AfterLoading-Determinations are triggered.
"!                                              <br/><strong>Note:</strong> BOPF reads always all attributes independent from the specified <strong>IT_REQUESTED_ATTRIBUTES</strong>
"! @parameter EO_MESSAGE                      | Message container that contains all messages created during the method execution
"! @parameter ET_DATA                         | Result table containing the retrieved node data. It is typed with the "Combined Table Type" of the node defined in <strong>IV_NODE</strong>
"!                                              <br/><strong>Note:</strong> This parameter is not provided if <strong>IV_FILL_DATA</strong> is set to false.
"! @parameter ET_FAILED_KEY                   | Table of node instance keys that could not be read (for example, if the node instances do not exist in the requested image). It is equal to or a subset of <strong>IT_KEY</strong>.
"!                                              <br/><strong>Note:</strong> Do not use this parameter if you have a non-unique alternative key of the node instance key.
"! @parameter ET_NODE_CAT                     | Returns the node category of the retrieved node instances
"!
  methods RETRIEVE
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IT_KEY type /BOBF/T_FRW_KEY
      !IV_BEFORE_IMAGE type BOOLE_D default ABAP_FALSE
      !IV_FILL_DATA type BOOLE_D default ABAP_TRUE
      !IT_REQUESTED_ATTRIBUTES type /BOBF/T_FRW_NAME optional
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_DATA type INDEX TABLE
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY
      !ET_NODE_CAT type /BOBF/T_FRW_NODE_CAT .

"! Retrieves node instance data and keys by navigating along an association
"! @parameter IV_NODE                         | Key of the source node of the association
"! @parameter IT_KEY                          | Table of technical keys of source node instance for which the target node instances are to be retrieved
"! @parameter IV_ASSOCIATION                  | Key of the association on the source node that is to be used for navigation
"! @parameter IS_PARAMETERS                   | <strong>Optional parameter:</strong> If the association has a filter structure (parameter) defined, it is filled by the consumer and handed over to the association's implementation
"! @parameter IT_FILTERED_ATTRIBUTES          | <strong>Optional parameter:</strong> Specifies which attributes in the filter structure that are to be used for the evaluation of the association.
"! All other attributes of the filter structure must be ignored.
"! @parameter IV_FILL_DATA                    | <strong>Optional parameter:</strong> Indicates that the data of the target node instances is to be read. If set to true, the parameter <strong>ET_DATA</strong>
"! will contain the data of the target node instances. If set to false, the parameter <strong>ET_DATA</strong> will be initial.
"! @parameter IV_BEFORE_IMAGE                 | <strong>Optional parameter:</strong> Indicates that the before image is to be read. The before image can be different, depending on the context where this method is used.
"! @parameter IT_REQUESTED_ATTRIBUTES         | <strong>Deprecated!</strong>
"! @parameter EO_MESSAGE                      | Message container that comprises the messages that are raised by the <strong>RETRIEVE_BY_ASSOCIATION</strong> call
"! @parameter ET_DATA                         | Result table of target node data, typed with the Combined Table Type of the association's target node. Note that this is only provided if <strong>IV_FILL_DATA</strong> is set to true.
"! @parameter ET_KEY_LINK                     | Result table of node instance pairs - source node instance and its corresponding target node instance - that is returned by this association
"! @parameter ET_TARGET_KEY                   | Result table of the target node instances (without the link information to the corresponding source node instance)
"! @parameter ET_FAILED_KEY                   | Table of node instance keys that could not be read, for instance if the source node instances do not exist. It is equal to or a subset of <strong>IT_KEY</strong>.
  methods RETRIEVE_BY_ASSOCIATION
    importing
      !IV_NODE type /BOBF/OBM_NODE_KEY
      !IT_KEY type /BOBF/T_FRW_KEY
      !IV_ASSOCIATION type /BOBF/OBM_ASSOC_KEY
      !IS_PARAMETERS type ref to DATA optional
      !IT_FILTERED_ATTRIBUTES type /BOBF/T_FRW_NAME optional
      !IV_FILL_DATA type BOOLE_D default ABAP_FALSE
      !IV_BEFORE_IMAGE type BOOLE_D default ABAP_FALSE
      !IT_REQUESTED_ATTRIBUTES type /BOBF/T_FRW_NAME optional
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_DATA type INDEX TABLE
      !ET_KEY_LINK type /BOBF/T_FRW_KEY_LINK
      !ET_TARGET_KEY type /BOBF/T_FRW_KEY
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY .

"! Compares the current with the previous version of data<br/>
"! You can use this method to compare the current and before image of node instances <strong>IT_KEY</strong> of the node <strong>IV_NODE</strong>
"! The result of the method call is passed as the change object <strong>EO_CHANGE</strong>.
"! If required (<strong> IV_FILL_ATTRIBUTES</strong> = true), the attributes of the node instances are also compared and the result is written into the change object, too.
"! The scope (<strong>IV_SCOPE</strong>) defines whether only the node specified or the complete subtree shall be compared.
"! @parameter IV_NODE_KEY                     | Key of the node whose node instances shall be compared
"! @parameter IV_KEY                          | Node instance key that shall be compared
"! @parameter IV_FILL_ATTRIBUTES              | <strong>Optional parameter:</strong> If true, the comparison is carried out on attribute level. Changed attributes are part of the change container (<strong>EO_CHANGE</strong>).
"! @parameter IV_SCOPE                        | <strong>Optional parameter:</strong>The scope defines whether only the specified node or the complete subtree is compared.
"! <ul>
"! <li>/BOBF/IF_FRW_C=&gt;SC_SCOPE_LOCAL: Compares exactly the node indicated in <strong>IV_NODE_KEY</strong></li>
"! <li>/BOBF/IF_FRW_C=&gt;SC_SCOPE_SUBSTRUCTURE: Compares the sub nodes of <strong>IV_NODE_KEY</strong>. Note that this scope is supported only for the ROOT node of a business object.</li>
"! </ul>
"! @parameter EO_CHANGE                       | Change container that comprises the changes between the current and the before image.
  methods COMPARE
    importing
      !IV_NODE_KEY type /BOBF/OBM_NODE_KEY
      !IT_KEY type /BOBF/T_FRW_KEY
      !IV_FILL_ATTRIBUTES type BOOLE_D default ABAP_FALSE
      !IV_SCOPE type /BOBF/FRW_SCOPE default /BOBF/IF_FRW_C=>SC_SCOPE_LOCAL
    exporting
      !EO_CHANGE type ref to /BOBF/IF_FRW_CHANGE .
endinterface.