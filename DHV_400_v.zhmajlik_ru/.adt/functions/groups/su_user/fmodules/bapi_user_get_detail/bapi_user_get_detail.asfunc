FUNCTION BAPI_USER_GET_DETAIL
  IMPORTING
    VALUE(USERNAME) LIKE BAPIBNAME-BAPIBNAME
    VALUE(CACHE_RESULTS) TYPE FLAG_X DEFAULT 'X'
  EXPORTING
    VALUE(LOGONDATA) LIKE BAPILOGOND
    VALUE(DEFAULTS) LIKE BAPIDEFAUL
    VALUE(ADDRESS) LIKE BAPIADDR3
    VALUE(COMPANY) LIKE BAPIUSCOMP
    VALUE(SNC) LIKE BAPISNCU
    VALUE(REF_USER) LIKE BAPIREFUS
    VALUE(ALIAS) LIKE BAPIALIAS
    VALUE(UCLASS) TYPE BAPIUCLASS
    VALUE(LASTMODIFIED) TYPE BAPIMODDAT
    VALUE(ISLOCKED) TYPE BAPISLOCKD
    VALUE(IDENTITY) TYPE BAPIIDENTITY
    VALUE(ADMINDATA) TYPE BAPIUSERADMIN
    VALUE(DESCRIPTION) TYPE BAPIUSDESC
  TABLES
    PARAMETER LIKE BAPIPARAM OPTIONAL
    PROFILES LIKE BAPIPROF OPTIONAL
    ACTIVITYGROUPS LIKE BAPIAGR OPTIONAL
    RETURN LIKE BAPIRET2
    ADDTEL LIKE BAPIADTEL OPTIONAL
    ADDFAX LIKE BAPIADFAX OPTIONAL
    ADDTTX LIKE BAPIADTTX OPTIONAL
    ADDTLX LIKE BAPIADTLX OPTIONAL
    ADDSMTP LIKE BAPIADSMTP OPTIONAL
    ADDRML LIKE BAPIADRML OPTIONAL
    ADDX400 LIKE BAPIADX400 OPTIONAL
    ADDRFC LIKE BAPIADRFC OPTIONAL
    ADDPRT LIKE BAPIADPRT OPTIONAL
    ADDSSF LIKE BAPIADSSF OPTIONAL
    ADDURI LIKE BAPIADURI OPTIONAL
    ADDPAG LIKE BAPIADPAG OPTIONAL
    ADDCOMREM LIKE BAPICOMREM OPTIONAL
    PARAMETER1 LIKE BAPIPARAM1 OPTIONAL
    GROUPS LIKE BAPIGROUPS OPTIONAL
    UCLASSSYS LIKE BAPIUCLASSSYS OPTIONAL
    EXTIDHEAD LIKE BAPIUSEXTIDHEAD OPTIONAL
    EXTIDPART LIKE BAPIUSEXTIDPART OPTIONAL
    SYSTEMS LIKE BAPIRCVSYS OPTIONAL.





  " Translate Key to Upper case
  set locale language sy-langu.
  translate username to upper case.

  " Initialize all exporting parameters
  clear: logondata, defaults,  address,        company,   snc,       ref_user
       , alias,     uclass,    lastmodified,   islocked,  identity,  admindata
       .
  clear: parameter[], profiles[],  activitygroups[], return[],    addtel[],    addfax[]
       , addttx[],    addtlx[],    addsmtp[],        addrml[],    addx400[],   addrfc[]
       , addprt[],    addssf[],    adduri[],         addpag[],    addcomrem[], parameter1[]
       , groups[],    uclasssys[], extidhead[],      extidpart[], systems[]
       .

  " --- Declaration of BAPI related data ---
  data: ls_agr                    type          bapiagr
       ,ls_prof                   type          bapiprof
       ,ls_param                  type          bapiparam
       ,ls_param1                 type          bapiparam1
       ,ls_groups                 type          bapigroups
       ,ls_uclasssys              type          bapiuclasssys
       ,ls_systems                type          bapircvsys
       ,ls_return                 type          bapiret2
       ,lt_return                 type          bapirettab
       .

  " --- Declaration of data related to transactional concept ---
  data: lt_bname                  type          suid_tt_bname
       ,ls_bname                  type          suid_st_bname
       ,lx_suid_identity          type ref to   cx_suid_identity
       ,lt_node_root              type          suid_tt_node_root
       ,lr_node_root              type ref to   suid_st_node_root
       ,lo_msg_buffer             type ref to   if_suid_msg_buffer
       .

  " --- Declaration of Identity related data ---
  data: ls_logondata              type          suid_st_node_logondata
       ,ls_defaults               type          suid_st_node_defaults
       ,lv_kostl                  type          xukostl
       ,ls_snc                    type          suid_st_node_snc
       ,ls_refuser                type          suid_st_node_reference_user
       ,ls_uclass                 type          suid_st_node_uclass
       ,lt_roles                  type          suid_tt_node_roles
       ,lr_roles                  type ref to   suid_st_node_role
       ,lt_role_details           type          suid_tt_node_role_details
       ,lr_role_details           type ref to   suid_st_node_role_detail
       ,lt_profiles               type          suid_tt_node_profiles
       ,lr_profiles               type ref to   suid_st_node_profile
       ,lt_parameters             type          suid_tt_node_parameters
       ,lr_parameters             type ref to   suid_st_node_parameter
       ,lt_groups                 type          suid_tt_node_groups
       ,lr_groups                 type ref to   suid_st_node_group
       ,lt_cua_uclass             type          suid_tt_node_cua_uclasses
       ,lr_cua_uclass             type ref to   suid_st_node_cua_uclass
       ,lt_cua_system             type          suid_tt_node_cua_systems
       ,lr_cua_system             type ref to   suid_st_node_cua_system
       ,ls_admindata              type          suid_st_node_admindata
       ,ls_pwdhash                type          suid_st_node_pwdhash
       ,lv_locked_by_admin        type          char01
       ,lv_locked_by_global_admin type          char01
       ,lv_locked_by_failed_logon type          char01
       ,lt_properties             type          if_suid_property_handler=>tt_properties
       ,ls_tech_user_data         type          suid_st_node_tech_user_data
       .

  " --- ADDRESS related data ---
  data:  lr_addr_map              type  ref to  cl_addr_map_from_bapiaddr
       , lt_telephone             type          addrt_telephone_number
       , lt_facsimile             type          addrt_facsimile_number
       , lt_email                 type          addrt_email_address
       , lt_web                   type          addrt_web_address
       , lt_telex                 type          addrt_telex_number
       , lt_teletex               type          addrt_teletex_number
       , lt_rml                   type          addrt_remote_mail_address
       , lt_x400                  type          addrt_x400_address
       , lt_printer               type          addrt_printer
       , lt_ssf                   type          addrt_ssf_address
       , lt_pager                 type          addrt_pager_number
       , ls_person_name           type          suid_st_node_person_name
       , ls_person                type          suid_st_node_person
       , lv_identity_uuid         type          suid_uuid
       , ls_workplace             type          suid_st_node_workplace
       , lv_adtype                type          suidadtype
       , ls_organisation          type          suid_st_node_organization
       , ls_location              type          suid_st_node_location
       , ls_organisation_name     type          suid_st_node_organization_name
       , lt_messages              type          if_suid_msg_buffer=>tt_messages
       , lt_new_messages          type          if_suid_msg_buffer=>tt_messages
       , lt_error	                type          addrt_error
       , lv_cua_active            type          char01
       , lv_cua_central           type          sesf_boolean
       , lv_cua_child             type          sesf_boolean
       .

  " --- Declaration of constants ---
  constants: lco_locked   type uslock value 'L'
            ,lco_unlocked type uslock value 'U'
            .


  " --- Collect list of relevant nodes ---
  clear: ls_bname, lt_bname, return[].

  ls_bname-bname = username.
  append ls_bname to lt_bname.

  try.

      if sy-uname          eq username     and
         logondata         is not supplied and
         snc               is not supplied and
         ref_user          is not supplied and
         alias             is not supplied and
         uclass            is not supplied and
         lastmodified      is not supplied and
         islocked          is not supplied and
         admindata         is not supplied and
         profiles          is not supplied and
         activitygroups    is not supplied and
         groups            is not supplied and
         uclasssys         is not supplied and
         extidhead         is not supplied and
         extidpart         is not supplied and
         systems           is not supplied.

        call method cl_identity_factory=>retrieve_own_user
          importing
            et_node_root  = lt_node_root
            eo_msg_buffer = lo_msg_buffer.

      else.
        call method cl_identity_factory=>retrieve
          exporting
            it_bname      = lt_bname
          importing
            et_node_root  = lt_node_root
            eo_msg_buffer = lo_msg_buffer.
      endif.

      " Perform evaluation of lifetime once message buffer
      cl_identity_tools=>msg_buffer_retrieve(
        exporting
          iv_bname             = ls_bname-bname
          io_msg_buffer        = lo_msg_buffer
          iv_lifetimeonce_only = if_identity=>co_true
        changing
          ct_messages          = lt_messages ).

      " Get Instance
      read table lt_node_root reference into lr_node_root index 1.
      if sy-subrc = 0.

        " --- Call all relevant GET methods
        " First check if respective information was supplied
        " --> Mapping Nodes->BAPI exports is considered

        " -- Read Logondata
        if ( logondata is supplied
          or alias     is supplied ).

          call method lr_node_root->idref->get_logondata
            importing
              es_logondata  = ls_logondata
              eo_msg_buffer = lo_msg_buffer.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).
        endif.

        " -- Read Defaults
        if   logondata is supplied
          or defaults  is supplied.

          call method lr_node_root->idref->get_defaults
            importing
              eo_msg_buffer = lo_msg_buffer
              es_defaults   = ls_defaults
              ev_kostl      = lv_kostl.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).
        endif.

        " -- Read AdminData
        if logondata    is supplied or
           lastmodified is supplied or
           admindata    is supplied.
          call method lr_node_root->idref->get_admindata
            importing
              es_admindata  = ls_admindata
              eo_msg_buffer = lo_msg_buffer.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).
        endif.

        " -- Read PasswordHash
        if logondata is supplied or
           islocked  is supplied.
          call method lr_node_root->idref->if_identity_password~get_password_hash
            importing
              es_node_pwdhash = ls_pwdhash
              eo_msg_buffer   = lo_msg_buffer.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).
        endif.

        if logondata is supplied.
          move-corresponding ls_logondata to logondata.
          move ls_defaults-tzone          to logondata-tzone.
          move ls_admindata-ltime         to logondata-ltime.
          move ls_pwdhash-bcode           to logondata-bcode.
          move ls_pwdhash-codvn           to logondata-codvn.
          move ls_pwdhash-passcode        to logondata-passcode.
          move ls_pwdhash-codvn           to logondata-codvc.
          move ls_pwdhash-pwdsaltedhash   to logondata-pwdsaltedhash.
          move ls_pwdhash-codvn           to logondata-codvs.

          " Downwards compatibility
          case logondata-codvs.
            when if_identity=>co_password_codeversion_g.
              logondata-codvn = if_identity=>co_password_codeversion_b.
            when if_identity=>co_password_codeversion_f.
              clear: logondata-codvn,
                     logondata-bcode.
            when if_identity=>co_password_codeversion_i.
              logondata-codvn = if_identity=>co_password_codeversion_b.
              logondata-codvc = if_identity=>co_password_codeversion_f.
            when if_identity=>co_password_codeversion_h.
              clear: logondata-codvn,
                     logondata-bcode,
                     logondata-codvc,
                     logondata-passcode.
            when others.            "no actions required
          endcase.
        endif.

        if defaults  is supplied.
          move-corresponding ls_defaults  to defaults.
          move lv_kostl                   to defaults-kostl.
        endif.

        if alias     is supplied.
          move ls_logondata-useralias     to alias-useralias.
        endif.

        if lastmodified is supplied.
          move ls_admindata-moddate       to lastmodified-moddate.
          move ls_admindata-modtime       to lastmodified-modtime.
          move ls_admindata-modifier      to lastmodified-modifier.
        endif.

        if admindata is supplied.
          move ls_admindata-aname         to admindata-aname.
          move ls_admindata-erdat         to admindata-erdat.
          move ls_admindata-trdat         to admindata-trdat.
        endif.


        if islocked is supplied.
          call method lr_node_root->idref->get_lockstatus
            importing
              ev_locked_by_admin        = lv_locked_by_admin
              ev_locked_by_global_admin = lv_locked_by_global_admin
              ev_locked_by_failed_logon = lv_locked_by_failed_logon
              eo_msg_buffer             = lo_msg_buffer.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          if lv_locked_by_admin = cl_identity_persistence=>co_flag_active.
            islocked-local_lock = lco_locked.
          else.
            islocked-local_lock = lco_unlocked.
          endif.

          if lv_locked_by_global_admin = cl_identity_persistence=>co_flag_active.
            islocked-glob_lock = lco_locked.
          else.
            islocked-glob_lock = lco_unlocked.
          endif.

          if lv_locked_by_failed_logon = cl_identity_persistence=>co_flag_active.
            islocked-wrng_logon = lco_locked.
          else.
            islocked-wrng_logon = lco_unlocked.
          endif.

          if ls_pwdhash-codvn = if_identity=>co_password_inactive.
            islocked-no_user_pw =  lco_locked.
          else.
            islocked-no_user_pw =  lco_unlocked.
          endif.
        endif.

        " -- Read SNC
        if snc is supplied.
          call method lr_node_root->idref->get_snc
            importing
              eo_msg_buffer = lo_msg_buffer
              es_snc        = ls_snc.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          move: ls_snc-guiflag to snc-guiflag
               ,ls_snc-pname   to snc-pname
               .
        endif.

        " -- Read Reference User
        if ref_user is supplied.
          call method lr_node_root->idref->get_reference_user
            importing
              eo_msg_buffer     = lo_msg_buffer
              es_reference_user = ls_refuser.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          move ls_refuser-refuser to ref_user-ref_user.
        endif.

        " -- Read licence data
        if uclass is supplied.
          call method lr_node_root->idref->get_uclass
            importing
              eo_msg_buffer = lo_msg_buffer
              es_uclass     = ls_uclass.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          move-corresponding ls_uclass to uclass.
        endif.

        " -- Read roles
        if activitygroups is supplied.
          call method lr_node_root->idref->get_roles
            exporting
              iv_get_role_details = 'X'
            importing
              eo_msg_buffer       = lo_msg_buffer
              et_roles            = lt_roles
              et_role_details     = lt_role_details.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          loop at lt_roles reference into lr_roles.
            clear: ls_agr.
            move: lr_roles->agr_name to ls_agr-agr_name
                 ,lr_roles->from_dat to ls_agr-from_dat
                 ,lr_roles->to_dat   to ls_agr-to_dat
                 ,lr_roles->agr_assign_type to ls_agr-org_flag
                 .
            read table lt_role_details reference into lr_role_details
                 with key agr_name = lr_roles->agr_name.
            if sy-subrc = 0.
              move lr_role_details->agr_text to ls_agr-agr_text.
            endif.
            append ls_agr to activitygroups.
          endloop.
        endif.

        " -- Read profiles
        if profiles is supplied.
          call method lr_node_root->idref->get_profiles
            importing
              eo_msg_buffer = lo_msg_buffer
              et_profiles   = lt_profiles.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          loop at lt_profiles reference into lr_profiles.
            clear: ls_prof.
            move: lr_profiles->profile to ls_prof-bapiprof
                 ,lr_profiles->ptext   to ls_prof-bapiptext
                 ,lr_profiles->type    to ls_prof-bapitype
                 ,lr_profiles->aktps   to ls_prof-bapiaktps
                 .
            append ls_prof to profiles.
          endloop.
        endif.

        " -- Read parameter
        if parameter1 is supplied or
           parameter  is supplied.
          call method lr_node_root->idref->get_parameters
            exporting
              iv_get_text   = if_identity=>co_true
            importing
              eo_msg_buffer = lo_msg_buffer
              et_parameters = lt_parameters.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          loop at lt_parameters reference into lr_parameters.
            clear: ls_param
                  ,ls_param1
                  .
            " Fields PARID, PARVA, PARTXT
            move-corresponding lr_parameters->* to ls_param1.
            move-corresponding lr_parameters->* to ls_param.
            append ls_param1 to parameter1.
            append ls_param  to parameter.
          endloop.
        endif.

        " -- Read groups
        if groups is supplied.
          call method lr_node_root->idref->get_groups
            importing
              eo_msg_buffer = lo_msg_buffer
              et_groups     = lt_groups.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          loop at lt_groups reference into lr_groups.
            clear: ls_groups.
            move lr_groups->usergroup to ls_groups-usergroup.
            append ls_groups to groups.
          endloop.
        endif.

        " -- Read CUA licence data
        if uclasssys is supplied.
          cl_suid_cua=>if_suid_cua_runtime~get_cua_landscape(
            importing
              ev_cua_central = lv_cua_central ).

          if lv_cua_central = if_identity=>co_true.
            call method lr_node_root->idref->if_identity_cua~get_cua_uclasses
              importing
                eo_msg_buffer   = lo_msg_buffer
                et_cua_uclasses = lt_cua_uclass.

            " Perform evaluation of lifetime once message buffer
            cl_identity_tools=>msg_buffer_retrieve(
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages ).

            loop at lt_cua_uclass reference into lr_cua_uclass.
              clear: ls_uclasssys.
              move: lr_cua_uclass->subsystem  to ls_uclasssys-rcvsystem
                   ,lr_cua_uclass->lic_type   to ls_uclasssys-lic_type
                   ,lr_cua_uclass->spec_vers  to ls_uclasssys-spec_vers
                   ,lr_cua_uclass->country_surcharge to ls_uclasssys-country_surcharge
                   ,lr_cua_uclass->substitute_from   to ls_uclasssys-substitute_from
                   ,lr_cua_uclass->substitute_until  to ls_uclasssys-substitute_until
                   ,lr_cua_uclass->sysid             to ls_uclasssys-sysid
                   ,lr_cua_uclass->client            to ls_uclasssys-client
                   ,lr_cua_uclass->bname_chargeable  to ls_uclasssys-bname_chargeable
                   .
              append ls_uclasssys to uclasssys.
            endloop.
          endif.
        endif.

        " -- Read CUA systems
        if systems is supplied.
          clear ls_systems.
          cl_suid_cua=>if_suid_cua_runtime~get_cua_landscape(
            importing
              ev_cua_central   = lv_cua_central
              ev_cua_child     = lv_cua_child
              ev_system_logsys = ls_systems-subsystem ).

          if lv_cua_central = if_identity=>co_true.
            call method lr_node_root->idref->if_identity_cua~get_cua_systems
              importing
                eo_msg_buffer  = lo_msg_buffer
                et_cua_systems = lt_cua_system.

            " Perform evaluation of lifetime once message buffer
            cl_identity_tools=>msg_buffer_retrieve(
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages ).

            loop at lt_cua_system reference into lr_cua_system.
              clear: ls_systems.
              move: lr_cua_system->subsystem to ls_systems-subsystem.
              append ls_systems to systems.
            endloop.
          endif.
          if lv_cua_child = if_identity=>co_true.
            append ls_systems to systems.
          endif.
        endif.


        " -- Read address
        if ( address   is supplied ) or
           ( addtel    is supplied ) or
           ( addfax    is supplied ) or
           ( addttx    is supplied ) or
           ( addtlx    is supplied ) or
           ( addsmtp   is supplied ) or
           ( addrml    is supplied ) or
           ( addx400   is supplied ) or
           ( addprt    is supplied ) or
           ( addssf    is supplied ) or
           ( adduri    is supplied ) or
           ( addpag    is supplied ) or
           ( addcomrem is supplied ) or
           ( company   is supplied ).

          data: ls_retrieve_commdata     type bup_s_commdata_read_api
              , lv_get_location	         type	sesf_boolean
              , lv_get_organization_name type	sesf_boolean
              .
          clear: ls_retrieve_commdata,
                 lv_get_location,
                 lv_get_organization_name.

          lr_node_root->idref->get_identity_indicator( importing ev_id_indicator = lv_adtype ).


          " -- Read address
          if address is supplied.
            " -- Read Personname
            lr_node_root->idref->if_identity_address~get_personname(
              importing
                es_personname           = ls_person_name
                eo_msg_buffer           = lo_msg_buffer ).

            " Perform evaluation of lifetime once message buffer
            cl_identity_tools=>msg_buffer_retrieve(
              exporting
                iv_bname                    = ls_bname-bname
                io_msg_buffer               = lo_msg_buffer
                iv_lifetimeonce_only        = if_identity=>co_true
                iv_lftonce_error_as_warning = if_identity=>co_true
              changing
                ct_messages                 = lt_messages ).

            if lv_adtype ne if_identity=>co_idad_techuser and
               lv_adtype ne if_identity=>co_idad_person.
              " -- Read Workplace data
              lr_node_root->idref->if_identity_address~get_workplacedata(
                importing
                  es_workplace            = ls_workplace
                  eo_msg_buffer           = lo_msg_buffer ).

              " Perform evaluation of lifetime once message buffer
              cl_identity_tools=>msg_buffer_retrieve(
                exporting
                  iv_bname                    = ls_bname-bname
                  io_msg_buffer               = lo_msg_buffer
                  iv_lifetimeonce_only        = if_identity=>co_true
                  iv_lftonce_error_as_warning = if_identity=>co_true
                changing
                  ct_messages                 = lt_messages ).

              " Retrieve some CommData
              ls_retrieve_commdata-telephone = if_identity=>co_true.
              ls_retrieve_commdata-facsimile = if_identity=>co_true.
              ls_retrieve_commdata-email     = if_identity=>co_true.

              " Retrieve Organization
              lv_get_location                = if_identity=>co_true.
              lv_get_organization_name       = if_identity=>co_true.
            endif.
          endif.


          " -- Retrieve CommData
          if lv_adtype ne if_identity=>co_idad_techuser and
             lv_adtype ne if_identity=>co_idad_person.
            if addcomrem is supplied.
              clear: ls_retrieve_commdata with if_identity=>co_true.
            else.
              if addtel    is supplied.
                ls_retrieve_commdata-telephone = if_identity=>co_true.
              endif.
              if addfax    is supplied.
                ls_retrieve_commdata-facsimile = if_identity=>co_true.
              endif.
              if addttx    is supplied.
                ls_retrieve_commdata-teletex   = if_identity=>co_true.
              endif.
              if addtlx    is supplied.
                ls_retrieve_commdata-telex     = if_identity=>co_true.
              endif.
              if addsmtp   is supplied.
                ls_retrieve_commdata-email     = if_identity=>co_true.
              endif.
              if addrml    is supplied.
                ls_retrieve_commdata-rml       = if_identity=>co_true.
              endif.
              if addx400   is supplied.
                ls_retrieve_commdata-x400      = if_identity=>co_true.
              endif.
              if addprt    is supplied.
                ls_retrieve_commdata-printer   = if_identity=>co_true.
              endif.
              if addssf    is supplied.
                ls_retrieve_commdata-ssf       = if_identity=>co_true.
              endif.
              if adduri    is supplied.
                ls_retrieve_commdata-web       = if_identity=>co_true.
              endif.
              if addpag    is supplied.
                ls_retrieve_commdata-pager     = if_identity=>co_true.
              endif.
            endif.
          endif.

          " -- Read communication data
          if ls_retrieve_commdata is not initial.
            lr_node_root->idref->if_identity_address~get_communication_data(
              exporting
                is_retrieve_commdata     = ls_retrieve_commdata
              importing
                et_telephone             = lt_telephone
                et_facsimile             = lt_facsimile
                et_email                 = lt_email
                et_web                   = lt_web
                et_telex                 = lt_telex
                et_teletex               = lt_teletex
                et_rml                   = lt_rml
                et_x400                  = lt_x400
                et_printer               = lt_printer
                et_ssf                   = lt_ssf
                et_pager                 = lt_pager
                eo_msg_buffer            = lo_msg_buffer  ).

            " Perform evaluation of lifetime once message buffer
            cl_identity_tools=>msg_buffer_retrieve(
              exporting
                iv_bname                    = ls_bname-bname
                io_msg_buffer               = lo_msg_buffer
                iv_lifetimeonce_only        = if_identity=>co_true
                iv_lftonce_error_as_warning = if_identity=>co_true
              changing
                ct_messages                 = lt_messages ).

            " Get reference to address structures converting class
            lr_addr_map = cl_addr_map_from_bapiaddr=>get_instance( ).

            lr_addr_map->convert_to_bapiaddr3(
              exporting
                it_telephone_number    = lt_telephone
                it_facsimile_number    = lt_facsimile
                it_email_address       = lt_email
                it_web_address         = lt_web
                it_telex_number        = lt_telex
                it_teletex_number      = lt_teletex
                it_remote_mail_address = lt_rml
                it_x400_address        = lt_x400
                it_printer             = lt_printer
                it_ssf_address         = lt_ssf
                it_pager_number        = lt_pager
              importing
                es_bapiaddr3           = address
                et_bapiadtel           = addtel[]
                et_bapiadfax           = addfax[]
                et_bapiadttx           = addttx[]
                et_bapiadtlx           = addtlx[]
                et_bapiadsmtp          = addsmtp[]
                et_bapiadrml           = addrml[]
                et_bapiadx400          = addx400[]
                et_bapiadrfc           = addrfc[]
                et_bapiadprt           = addprt[]
                et_bapiadssf           = addssf[]
                et_bapiaduri           = adduri[]
                et_bapiadpag           = addpag[]
                et_bapicomrem          = addcomrem[]
                et_error               = lt_error ).

            " ADDRESS-structur must always contains the default telephone number
            read table addtel with key r_3_user = '1'.

            if sy-subrc = 0.
              address-tel1_numbr = addtel-telephone.
              address-tel1_ext   = addtel-extension.
            else.
              clear address-tel1_numbr.
              clear address-tel1_ext.
            endif.

            " Perform evaluation of lifetime once message buffer
            clear lt_return.
            cl_identity_tools=>message_address_error_convert(
              exporting
                it_addr_error          = lt_error
              importing
                et_return              = lt_return ).

            append lines of lt_return to return.
          endif.

          " -- Retrieve Organization
          if lv_adtype ne if_identity=>co_idad_techuser and
             lv_adtype ne if_identity=>co_idad_person.
            if company                  is supplied             or
               lv_get_location          eq if_identity=>co_true or
               lv_get_organization_name eq if_identity=>co_true.

              " Read Organization
              lr_node_root->idref->if_identity_address~get_organization(
                exporting
                  iv_get_location          = lv_get_location
                  iv_get_organization_name = lv_get_organization_name
                importing
                  es_organization          = ls_organisation
                  eo_msg_buffer            = lo_msg_buffer
                  es_location              = ls_location
                  es_organization_name     = ls_organisation_name ).

              company = ls_organisation-company.

              " Perform evaluation of lifetime once message buffer
              cl_identity_tools=>msg_buffer_retrieve(
                exporting
                  iv_bname                    = ls_bname-bname
                  io_msg_buffer               = lo_msg_buffer
                  iv_lifetimeonce_only        = if_identity=>co_true
                  iv_lftonce_error_as_warning = if_identity=>co_true
                changing
                  ct_messages                 = lt_messages ).
            endif.
          endif.

          " -- Complete address
          if address is supplied.
            clear lt_return.

            if lv_adtype eq if_identity=>co_idad_techuser or
               lv_adtype eq if_identity=>co_idad_person.
              call method cl_suid_tools=>map_address_nodes_to_bapi
                exporting
                  is_node_person_name = ls_person_name
                importing
                  et_return           = lt_return
                changing
                  cs_bapiaddr3        = address.
            else.
              call method cl_suid_tools=>map_address_nodes_to_bapi
                exporting
                  is_node_person_name       = ls_person_name
                  is_node_workplace         = ls_workplace
                  is_node_location          = ls_location
                  is_node_organization      = ls_organisation
                  is_node_organization_name = ls_organisation_name
                importing
                  et_return                 = lt_return
                changing
                  cs_bapiaddr3              = address.
            endif.
            append lines of lt_return to return.

            call method cl_suid_tools=>map_address_code_sap_to_iso
              exporting
                iv_bname            = ls_bname-bname
                is_node_person_name = ls_person_name
                is_node_location    = ls_location
              importing
                et_messages         = lt_new_messages
              changing
                cs_bapiaddr3        = address.

            append lines of lt_new_messages to lt_messages.
          endif.
        endif.


        " -- Read Identity
        if identity is supplied.
          lr_node_root->idref->get_identity_indicator( importing ev_id_indicator = lv_adtype ).

          case lv_adtype .
            when if_identity=>co_idad_person          or
                 if_identity=>co_idad_person_org_rela or
                 if_identity=>co_idad_employee.

              lr_node_root->idref->if_identity_person~get_person(
                importing
                  es_person               = ls_person
                  eo_msg_buffer           = lo_msg_buffer ).

              " Perform evaluation of lifetime once message buffer
              cl_identity_tools=>msg_buffer_retrieve(
                exporting
                  iv_bname                    = ls_bname-bname
                  io_msg_buffer               = lo_msg_buffer
                  iv_lifetimeonce_only        = if_identity=>co_true
                  iv_lftonce_error_as_warning = if_identity=>co_true
                changing
                  ct_messages                 = lt_messages ).

              call method cl_gdt_conversion=>guid_outbound
                exporting
                  im_guid_x = ls_person-person_uuid
                importing
                  ex_value  = identity-bpperson.
          endcase.

          call method lr_node_root->idref->get_identity_uuid
            importing
              eo_msg_buffer    = lo_msg_buffer
              ev_identity_uuid = lv_identity_uuid.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          identity-identity_uuid = lv_identity_uuid.
        endif.

        " -- Read description
        if description is supplied.
          call method lr_node_root->idref->get_technical_user_data
            importing
              eo_msg_buffer     = lo_msg_buffer
              es_tech_user_data = ls_tech_user_data.

          " Perform evaluation of lifetime once message buffer
          cl_identity_tools=>msg_buffer_retrieve(
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages ).

          move ls_tech_user_data to description.
        endif.
      endif.

      " Finally, perform evaluation of message buffer and append to return
      cl_identity_tools=>msg_buffer_retrieve(
        exporting
          iv_bname             = ls_bname-bname
          io_msg_buffer        = lo_msg_buffer
          iv_lifetimeonce_only = if_identity=>co_false
        changing
          ct_messages          = lt_messages ).

      cl_identity_tools=>msg_buffer_convert_to_bapiret2(
        exporting
          it_messages = lt_messages
        importing
          et_return   = lt_return ).

      append lines of lt_return to return.

      " --- Clear cache
      if cache_results is initial.
        call method cl_identity_factory=>cleanup
          exporting
            it_bname = lt_bname.
      endif.

      return.

    catch cx_suid_identity into lx_suid_identity.
      call method cl_identity_tools=>message_suid_technical_error
        exporting
          ix_suid_identity = lx_suid_identity
        importing
          es_return        = ls_return.
      append ls_return to return.

      return.
  endtry.


endfunction.
