*----------------------------------------------------------------------*
***INCLUDE LSU_USERF07 .
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_CHANGE
*&---------------------------------------------------------------------*
form user_change
    using
      iv_username                 type bapibname-bapibname
      iv_cua_ts_force_modifaction type sesf_boolean
      iv_no_db_update             type sesf_boolean
      iv_repeat_enq               type sesf_boolean
      is_logondata                type bapilogond
      is_logondatax               type bapilogonx
      is_defaults                 type bapidefaul
      is_defaultsx                type bapidefax
      is_address                  type bapiaddr3
      is_parameterx               type bapiparamx
      is_company                  type bapiuscomp
      is_companyx                 type bapiuscomx
      is_snc                      type bapisncu
      is_sncx                     type bapisncux
      is_password                 type bapipwd
      is_passwordx                type bapipwdx
      is_addcomx                  type bapiadcomx
      is_ref_user                 type bapirefus
      is_ref_userx                type bapirefusx
      is_alias                    type bapialias
      is_aliasx                   type bapialiasx
      is_groupsx                  type bapigroupx
      is_uclass                   type bapiuclass
      is_uclassx                  type bapiuclassx
      is_extidsx                  type bapiusextidx
      iv_productive_pwd           type bapiflag-bapiflag
      iv_generate_pwd             type bapiflag-bapiflag
      is_description              type bapiusdesc
      is_descriptionx             type bapiusdescx
    changing
      es_generated_password       type bapipwd
      cs_addressx                 type bapiaddr3x
      it_parameter                type suid_tt_bapiparam
      it_addtel                   type suid_tt_bapiadtel
      it_addfax                   type suid_tt_bapiadfax
      it_addttx                   type suid_tt_bapiadttx
      it_addtlx                   type suid_tt_bapiadtlx
      it_addsmtp                  type suid_tt_bapiadsmtp
      it_addrml                   type suid_tt_bapiadrml
      it_addx400                  type suid_tt_bapiadx400
      it_addrfc                   type suid_tt_bapiadrfc
      it_addprt                   type suid_tt_bapiadprt
      it_addssf                   type suid_tt_bapiadssf
      it_adduri                   type suid_tt_bapiaduri
      it_addpag                   type suid_tt_bapiadpag
      it_addcomrem                type suid_tt_bapicomrem
      it_groups                   type suid_tt_bapigroups
      it_parameter1               type suid_tt_bapiparam1
      it_uclasssys                type suid_tt_bapiuclasssys
      et_return                   type bapirettab.


  data: lt_bname                 type          suid_tt_bname
      , ls_bname                 type          suid_st_bname
      , lt_node_root             type          suid_tt_node_root
      , lr_node_root             type ref to   suid_st_node_root
      , lo_msg_buffer            type ref to   if_suid_msg_buffer
      , ls_message               type          symsg
      , lv_bname                 type          xubname
      , ls_return                type          bapiret2
      , lt_return                type          bapirettab
      , lv_rejected              type          sesf_boolean
      , lv_central_logsys        type          uszbvlndsc-sendsystem
      , lt_change_fields         type          suid_tt_fields
      , lt_change_node_fields    type          suid_tt_fields
      , ls_node_logondata        type          suid_st_node_logondata
      , ls_node_pwdhash          type          suid_st_node_pwdhash
      , ls_node_password         type          suid_st_node_password
      , ls_node_defaults         type          suid_st_node_defaults
      , ls_node_snc              type          suid_st_node_snc
      , ls_node_ref_user         type          suid_st_node_reference_user
      , ls_node_uclass           type          suid_st_node_uclass
      , lt_node_cua_uclasses     type          suid_tt_node_cua_uclasses
      , lr_node_cua_uclass       type ref to   suid_st_node_cua_uclass
      , ls_node_cua_uclass       type          suid_st_node_cua_uclass
      , lr_cua_uclass            type ref to   suid_st_node_cua_uclass
      , lt_old_cua_uclasses      type          suid_tt_node_cua_uclasses
      , lr_bapi_uclasssys        type ref to   bapiuclasssys
      , lt_node_parameters       type          suid_tt_node_parameters
      , lt_old_parameters        type          suid_tt_node_parameters
      , lr_parameter             type ref to   suid_st_node_parameter
      , lr_node_parameter        type ref to   suid_st_node_parameter
      , lr_bapi_parameter1       type ref to   bapiparam1
      , lr_bapi_parameter        type ref to   bapiparam
      , lt_node_groups           type          suid_tt_node_groups
      , lt_old_groups            type          suid_tt_node_groups
      , lr_group                 type ref to   suid_st_node_group
      , lr_node_group            type ref to   suid_st_node_group
      , lr_bapi_group            type ref to   bapigroups
      , lt_change_workplace_flds type          suid_tt_fields
      , ls_addressx_wocomm       type          bapiaddr3x
      , ls_node_person_name      type          suid_st_node_person_name
      , ls_node_workplace        type          suid_st_node_workplace
      , ls_node_organization     type          suid_st_node_organization
      , lv_tabix                 type          sy-tabix
      , ls_current_state         type          bup_s_current_state_commdata
      , ls_retrieve_comm         type          bup_s_commdata_read_api
      , lr_addr_map              type  ref to  cl_addr_map_from_bapiaddr
      , ls_bapiaddr3x            type          bapiaddr3x
      , lt_telephone_old         type          addrt_telephone_number
      , lt_facsimile_old         type          addrt_facsimile_number
      , lt_email_old             type          addrt_email_address
      , lt_telephone             type          addrt_telephone_number
      , lt_facsimile             type          addrt_facsimile_number
      , lt_email                 type          addrt_email_address
      , lt_web                   type          addrt_web_address
      , lt_telex                 type          addrt_telex_number
      , lt_teletex               type          addrt_teletex_number
      , lt_rml                   type          addrt_remote_mail_address
      , lt_x400                  type          addrt_x400_address
      , lt_printer               type          addrt_printer
      , lt_ssf                   type          addrt_ssf_address
      , lt_pager                 type          addrt_pager_number
      , lt_error                 type          addrt_error
      , lt_bapiadtel             type          addrt_bapiadtel
      , lt_bapiadfax             type          addrt_bapiadfax
      , lt_bapiadttx             type          addrt_bapiadttx
      , lt_bapiadtlx             type          addrt_bapiadtlx
      , lt_bapiadsmtp            type          addrt_bapiadsmtp
      , lt_bapiadrml             type          addrt_bapiadrml
      , lt_bapiadx400            type          addrt_bapiadx400
      , lt_bapiadrfc             type          addrt_bapiadrfc
      , lt_bapiadprt             type          addrt_bapiadprt
      , lt_bapiadssf             type          addrt_bapiadssf
      , lt_bapiaduri             type          addrt_bapiaduri
      , lt_bapiadpag             type          addrt_bapiadpag
      , lt_bapicomrem            type          addrt_bapicomrem
      , lt_messages              type          if_suid_msg_buffer=>tt_messages
      , lt_returned_messages     type          if_suid_msg_buffer=>tt_messages
      , lx_suid_identity         type ref to   cx_suid_identity
      , logondatax_tmp           type          bapilogonx
      , lr_telephone_old         type ref to   addrs_telephone_number
      , lv_found                 type          flag
      , lv_node_name             type          suid_node_name
      , ls_generated_password    type          suid_st_node_password
      , ls_node_tech_user_data   type          suid_st_node_tech_user_data
      , lv_idadtype              type          suidadtype
      .


  clear et_return[].


  lv_bname       = iv_username.
  ls_bname-bname = lv_bname.
  append ls_bname to lt_bname.


* ----  Retrive user and existance check ------------------------------*
  try.

      " Change own data without authority check like using SU3
      " Check all flags except logondata-tzone, defaultsx (without KOSTL), parameterx-parid
      " and remaining fields of addressx and addcomx
      logondatax_tmp = is_logondatax.
      clear logondatax_tmp-tzone.

      if    sy-uname            eq iv_username and
            logondatax_tmp      is initial  and
            is_defaultsx-kostl  is initial  and
            is_passwordx        is initial  and
            is_aliasx           is initial  and
            is_groupsx          is initial  and
            cs_addressx-e_mail  is initial  and
            is_addcomx-adsmtp   is initial  and
            is_sncx             is initial  and
            is_ref_userx        is initial  and
            is_uclassx          is initial.

        call method cl_identity=>retrieve_for_update_own_user
          exporting
            iv_repeat_enq               = iv_repeat_enq
            iv_cua_ts_force_modifaction = iv_cua_ts_force_modifaction
          importing
            et_node_root                = lt_node_root
            eo_msg_buffer               = lo_msg_buffer.

      else.
        " If only password should be changed -> only ACTVT '05' should be checked
        if is_passwordx        is not initial  and
           logondatax_tmp      is initial  and
           is_defaultsx        is initial  and
           cs_addressx         is initial  and
           is_parameterx       is initial  and
           is_companyx         is initial  and
           is_addcomx          is initial  and
           is_ref_userx        is initial  and
           is_aliasx           is initial  and
           is_groupsx          is initial  and
           is_uclassx          is initial.
          lv_node_name = if_identity_definition=>gc_node_password.
        " If only snc name should be change -> only ACTVT '36' should be checked
        "                                      if 'CHECK_CHANGE_SNC' is set
        elseif is_passwordx    is initial  and
           logondatax_tmp      is initial  and
           is_defaultsx        is initial  and
           cs_addressx         is initial  and
           is_parameterx       is initial  and
           is_companyx         is initial  and
           is_sncx             is not initial  and
           is_addcomx          is initial  and
           is_ref_userx        is initial  and
           is_aliasx           is initial  and
           is_groupsx          is initial  and
           is_uclassx          is initial.
          lv_node_name = if_identity_definition=>gc_node_snc.
        else.
          lv_node_name = if_identity_definition=>gc_node_root.
        endif.

        call method cl_identity=>retrieve_for_update
          exporting
            it_bname                    = lt_bname
            iv_repeat_enq               = iv_repeat_enq
            iv_cua_ts_force_modifaction = iv_cua_ts_force_modifaction
            iv_node_name                = lv_node_name
          importing
            et_node_root                = lt_node_root
            eo_msg_buffer               = lo_msg_buffer.
      endif.

      " Perform evaluation of lifetime once message buffer
      call method cl_identity_tools=>msg_buffer_retrieve
        exporting
          iv_bname             = ls_bname-bname
          io_msg_buffer        = lo_msg_buffer
          iv_lifetimeonce_only = if_identity=>co_true
        changing
          ct_messages          = lt_messages.

      " Check user existance
      read table lt_node_root reference into lr_node_root index 1.
      " User doesn't exist or can't be maintained (locked, not CUA user, etc.)
      if sy-subrc ne 0.
        " Perform evaluation of message buffer and append to return
        call method cl_identity_tools=>msg_buffer_retrieve
          exporting
            iv_bname             = ls_bname-bname
            io_msg_buffer        = lo_msg_buffer
            iv_lifetimeonce_only = if_identity=>co_false
          changing
            ct_messages          = lt_messages.

      else.
        " --- User exist and can be maintained ----
        " Set LOGONDATA
        if is_logondatax is not initial or is_defaultsx is not initial or is_aliasx is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_logondata
              is_bapix_structure = is_logondatax
            importing
              et_change_fields   = lt_change_fields
            changing
              cs_node_structure  = ls_node_logondata.
          append lines of lt_change_fields to lt_change_node_fields.

          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_defaults
              is_bapix_structure = is_defaultsx
            importing
              et_change_fields   = lt_change_fields
            changing
              cs_node_structure  = ls_node_logondata.
          append lines of lt_change_fields to lt_change_node_fields.

          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_alias
              is_bapix_structure = is_aliasx
            importing
              et_change_fields   = lt_change_fields
            changing
              cs_node_structure  = ls_node_logondata.
          append lines of lt_change_fields to lt_change_node_fields.

          if lt_change_node_fields[] is not initial.
            sort lt_change_node_fields.
            delete adjacent duplicates from lt_change_node_fields.

            call method lr_node_root->idref->set_logondata
              exporting
                it_change_fields = lt_change_node_fields
                is_logondata     = ls_node_logondata
              importing
                eo_msg_buffer    = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set DEFAULTS
        if is_defaultsx is not initial or is_logondatax is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_logondata
              is_bapix_structure = is_logondatax
            importing
              et_change_fields   = lt_change_fields
            changing
              cs_node_structure  = ls_node_defaults.
          append lines of lt_change_fields to lt_change_node_fields.

          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_defaults
              is_bapix_structure = is_defaultsx
            importing
              et_change_fields   = lt_change_fields
            changing
              cs_node_structure  = ls_node_defaults.
          append lines of lt_change_fields to lt_change_node_fields.

          if lt_change_node_fields[] is not initial.
            sort lt_change_node_fields.
            delete adjacent duplicates from lt_change_node_fields.

            call method lr_node_root->idref->set_defaults
              exporting
                is_defaults      = ls_node_defaults
                it_change_fields = lt_change_node_fields
              importing
                eo_msg_buffer    = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set PASSWORD
        "  Text password
        if is_passwordx is not initial.
          if iv_generate_pwd is not initial.
            call method lr_node_root->idref->if_identity_password~password_generate
              exporting
                iv_password_in_message = if_identity=>co_false
              importing
                ev_generated_password  = ls_generated_password
                eo_msg_buffer          = lo_msg_buffer.
            es_generated_password-bapipwd = ls_generated_password-password.
          else.
            ls_node_password-password = is_password.
            call method lr_node_root->idref->if_identity_password~set_password
              exporting
                iv_pwdplain       = ls_node_password
                iv_productive_pwd = iv_productive_pwd
              importing
                eo_msg_buffer     = lo_msg_buffer.
          endif.

          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages.

          " Hash password
        elseif is_logondatax is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_logondata
              is_bapix_structure = is_logondatax
            importing
              et_change_fields   = lt_change_node_fields
            changing
              cs_node_structure  = ls_node_pwdhash.

          if lt_change_node_fields[] is not initial.
            call method lr_node_root->idref->if_identity_password~set_password_hash
              exporting
                is_node_pwdhash = ls_node_pwdhash
              importing
                eo_msg_buffer   = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set initial password (Setting of productive password is not allowed)
        if is_logondatax-ltime = if_identity=>co_true.
*           Set password to initial
          if is_logondata-ltime is initial.
            call method lr_node_root->idref->if_identity_password~set_password_to_initial
              importing
                eo_msg_buffer = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set SNC
        if is_sncx is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_snc
              is_bapix_structure = is_sncx
            importing
              et_change_fields   = lt_change_node_fields
            changing
              cs_node_structure  = ls_node_snc.

          if lt_change_node_fields[] is not initial.
            call method lr_node_root->idref->set_snc
              exporting
                is_snc           = ls_node_snc
                it_change_fields = lt_change_node_fields
              importing
                eo_msg_buffer    = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set REFERENCE USER
        if is_ref_userx is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_ref_user
              is_bapix_structure = is_ref_userx
            importing
              et_change_fields   = lt_change_node_fields
            changing
              cs_node_structure  = ls_node_ref_user.

          if lt_change_node_fields[] is not initial.
            call method lr_node_root->idref->set_reference_user
              exporting
                is_reference_user = ls_node_ref_user
                it_change_fields  = lt_change_node_fields
              importing
                eo_msg_buffer     = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set UCLASS
        if is_uclassx is not initial.
          if is_uclassx-uclass = if_identity=>co_true.
            " CUA Licence data assign
            if is_uclassx-uclasssys = c_table_single or is_uclassx-uclasssys = c_table_replace.
              " Get system Licence data
              call method lr_node_root->idref->if_identity_cua~get_cua_uclasses
                importing
                  et_cua_uclasses = lt_old_cua_uclasses.

              loop at it_uclasssys reference into lr_bapi_uclasssys.
                clear: ls_node_cua_uclass.
                move-corresponding lr_bapi_uclasssys->* to ls_node_cua_uclass.
                ls_node_cua_uclass-subsystem = lr_bapi_uclasssys->rcvsystem.
                read table lt_old_cua_uclasses reference into lr_cua_uclass
                     with key subsystem = lr_bapi_uclasssys->rcvsystem
                     binary search.
                lv_tabix = sy-tabix.
                if sy-subrc <> 0.
                  ls_node_cua_uclass-change_mode  = if_identity=>co_insert.
                  append ls_node_cua_uclass to lt_node_cua_uclasses.
                else.
                  " Colleac if update is needed
                  if ls_node_cua_uclass <> lr_cua_uclass->*.
                    ls_node_cua_uclass-change_mode  = if_identity=>co_update.
                    append ls_node_cua_uclass to lt_node_cua_uclasses.
                  endif.
                  " Delete entry from further processing
                  delete lt_old_cua_uclasses index lv_tabix.
                endif.
              endloop.

              if is_uclass is not initial.
                clear: ls_node_cua_uclass.
                " Get central system
                call method cl_suid_cua=>if_suid_cua_runtime~get_cua_landscape
                  importing
                    ev_central_logsys = lv_central_logsys.

                move-corresponding is_uclass to ls_node_cua_uclass.
                ls_node_cua_uclass-subsystem = lv_central_logsys.
                read table lt_old_cua_uclasses reference into lr_cua_uclass
                     with key subsystem = lv_central_logsys
                     binary search.
                lv_tabix = sy-tabix.
                if sy-subrc <> 0.
                  ls_node_cua_uclass-change_mode  = if_identity=>co_insert.
                  append ls_node_cua_uclass to lt_node_cua_uclasses.
                else.
                  if ls_node_cua_uclass <> lr_cua_uclass->*.
                    ls_node_cua_uclass-change_mode  = if_identity=>co_update.
                    append ls_node_cua_uclass to lt_node_cua_uclasses.
                  endif.
                  delete lt_old_cua_uclasses index lv_tabix.
                endif.
              endif.

              " Set status Delete for obsolete Licence data
              loop at lt_old_cua_uclasses reference into lr_node_cua_uclass.
                read table lt_node_cua_uclasses
                     with key subsystem = lr_node_cua_uclass->subsystem
                     transporting no fields
                     binary search.
                lv_tabix = sy-tabix.
                if sy-subrc <> 0.
                  " If change mode is 'R' then delete these entries,
                  " otherwise they stay unchanged
                  if is_uclassx-uclasssys = c_table_replace.
                    insert initial line into lt_node_cua_uclasses reference into lr_cua_uclass
                           index lv_tabix.
                    move lr_node_cua_uclass->* to lr_cua_uclass->*.
                    lr_cua_uclass->change_mode = if_identity=>co_delete.
                  endif.
                endif.
              endloop.

              " Set CUA Licence data
              call method lr_node_root->idref->if_identity_cua~set_cua_uclasses
                exporting
                  it_cua_uclasses = lt_node_cua_uclasses
                importing
                  eo_msg_buffer   = lo_msg_buffer.

              call method cl_identity_tools=>msg_buffer_retrieve
                exporting
                  iv_bname             = ls_bname-bname
                  io_msg_buffer        = lo_msg_buffer
                  iv_lifetimeonce_only = if_identity=>co_true
                changing
                  ct_messages          = lt_messages.

              " Inconsistent UCLASSX-UCLASSSYS flag
            elseif is_uclassx-uclasssys ne space.

              call method cl_identity_tools=>msg_buffer_retrieve
                exporting
                  iv_bname             = ls_bname-bname
                  io_msg_buffer        = lo_msg_buffer
                  iv_lifetimeonce_only = if_identity=>co_true
                changing
                  ct_messages          = lt_messages.

              " Lizenzdaten von Benutzer &1 wurden nicht geändert.
              if 1 = 0. message w100(suid01) with lv_bname. endif.
              ls_message-msgty = if_suid_msg_buffer=>co_type_warning.
              ls_message-msgid = 'SUID01'.
              ls_message-msgno = '100'.
              ls_message-msgv1 = lv_bname.
              " Add warning message
              call method cl_identity_tools=>message_convert_to_bapiret2
                exporting
                  is_message = ls_message
                importing
                  es_return  = ls_return.
              append ls_return to et_return.

              " Das Änderungskennzeichen &1 wird nicht unterstützt
              if 1 = 0. message w755(01) with is_uclassx-uclasssys. endif.
              ls_message-msgty = if_suid_msg_buffer=>co_type_warning.
              ls_message-msgid = '01'.
              ls_message-msgno = '755'.
              ls_message-msgv1 = is_uclassx-uclasssys.
              " Add warning message
              call method cl_identity_tools=>message_convert_to_bapiret2
                exporting
                  is_message = ls_message
                importing
                  es_return  = ls_return.
              append ls_return to et_return.

              " Local Licence data
            else.
              refresh: lt_change_node_fields.
              call method cl_suid_tools=>map_bapi_structures_to_nodes
                exporting
                  is_bapi_structure = is_uclass
                importing
                  et_change_fields  = lt_change_node_fields
                changing
                  cs_node_structure = ls_node_uclass.

              if lt_change_node_fields[] is not initial.
                call method lr_node_root->idref->set_uclass
                  exporting
                    is_uclass        = ls_node_uclass
                    it_change_fields = lt_change_node_fields
                  importing
                    eo_msg_buffer    = lo_msg_buffer.

                call method cl_identity_tools=>msg_buffer_retrieve
                  exporting
                    iv_bname             = ls_bname-bname
                    io_msg_buffer        = lo_msg_buffer
                    iv_lifetimeonce_only = if_identity=>co_true
                  changing
                    ct_messages          = lt_messages.
              endif.
            endif.
          endif.
        endif.

        " Set GROUPS
        if is_groupsx is not initial.
          sort it_groups.
          delete adjacent duplicates from it_groups.

          " Get existing group assignments
          call method lr_node_root->idref->get_groups
            importing
              et_groups = lt_old_groups.

          " Set status Insert for new groups and Update for existing
          loop at it_groups reference into lr_bapi_group.
            read table lt_old_groups
                 with key usergroup = lr_bapi_group->usergroup
                 transporting no fields
                 binary search.
            lv_tabix = sy-tabix.
            if sy-subrc <> 0.
              append initial line to lt_node_groups reference into lr_group.
              lr_group->usergroup = lr_bapi_group->usergroup.
              lr_group->change_mode = if_identity=>co_insert.
            else.
              " existing assignment: delete from old_roles to take out from further processing
              delete lt_old_groups index lv_tabix.
            endif.
          endloop.

          sort lt_node_groups by usergroup.

          " Set status Delete for obsolete groups
          loop at lt_old_groups reference into lr_group.
            " Table lt_node_groups is already sorted
            read table lt_node_groups
                 with key usergroup = lr_group->usergroup
                 transporting no fields
                 binary search.
            lv_tabix = sy-tabix.
            if sy-subrc <> 0.
              insert initial line into lt_node_groups reference into lr_node_group
                     index lv_tabix.
              move lr_group->* to lr_node_group->*.
              lr_node_group->change_mode = if_identity=>co_delete.
            endif.
          endloop.

          call method lr_node_root->idref->set_groups
            exporting
              it_groups     = lt_node_groups
            importing
              eo_msg_buffer = lo_msg_buffer.

          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages.
        endif.

        " Set PARAMETERS
        if is_parameterx is not initial.
          " If parameters are delivered with old structer BAPIPARAM instead of BAPIPARAM1
          " move data into table PARAM1 correspondingly
          if it_parameter1[] is initial.
            loop at it_parameter reference into lr_bapi_parameter.
              append initial line to it_parameter1 reference into lr_bapi_parameter1.
              move-corresponding lr_bapi_parameter->* to lr_bapi_parameter1->*.
            endloop.
          endif.

          sort it_parameter1.
          delete adjacent duplicates from it_parameter1 comparing parid.

          " Get existing parameter assignments
          call method lr_node_root->idref->get_parameters
            importing
              et_parameters = lt_old_parameters.

          " Set status Insert for new parameters and Update for existing
          loop at it_parameter1 reference into lr_bapi_parameter1.
            read table lt_old_parameters reference into lr_parameter
                 with key parid = lr_bapi_parameter1->parid
                 binary search.
            lv_tabix = sy-tabix.
            if sy-subrc <> 0.
              append initial line to lt_node_parameters reference into lr_node_parameter.
              lr_node_parameter->parid       = lr_bapi_parameter1->parid.
              lr_node_parameter->parva       = lr_bapi_parameter1->parva.
              " Parameter's text can't be set anyhow
              lr_node_parameter->change_mode = if_identity=>co_insert.
            else.
              " Collect if update is really needed (parameter's value is different)
              if lr_parameter->parva <> lr_bapi_parameter1->parva.
                append initial line to lt_node_parameters reference into lr_node_parameter.
                lr_node_parameter->parid       = lr_bapi_parameter1->parid.
                lr_node_parameter->parva       = lr_bapi_parameter1->parva.
                " Parameter's text can't be set anyhow
                lr_node_parameter->change_mode = if_identity=>co_update.
              endif.
              " existing assignment: delete from old_parameters to take out from further processing
              delete lt_old_parameters index lv_tabix.
            endif.
          endloop.

          sort lt_node_parameters by parid.

          " Set status Delete for obsolete parameters
          loop at lt_old_parameters reference into lr_parameter.
            " Table lt_node_parameters is already sorted
            read table lt_node_parameters
                 with key parid = lr_parameter->parid
                 transporting no fields
                 binary search.
            lv_tabix = sy-tabix.
            if sy-subrc <> 0.
              insert initial line into lt_node_parameters reference into lr_node_parameter
                     index lv_tabix.
              lr_node_parameter->parid       = lr_parameter->parid.
              lr_node_parameter->parva       = lr_parameter->parva.
              " Parameter's text can't be set anyhow
              lr_node_parameter->change_mode = if_identity=>co_delete.
            endif.
          endloop.

          call method lr_node_root->idref->set_parameters
            exporting
              it_parameters = lt_node_parameters
            importing
              eo_msg_buffer = lo_msg_buffer.

          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages.
        endif.

        " The BAPI isn't allowed to maitain BP related address data!
        lr_node_root->idref->get_identity_indicator( importing ev_id_indicator = lv_idadtype
                                                    ).
        if ( lv_idadtype <> if_identity=>co_idad_olduser ) and
           ( is_addcomx  is not initial  or
             cs_addressx is not initial  or
             is_companyx is not initial                  ).

          clear: ls_message
               , ls_return
               .
          ls_message-msgty = if_suid_msg_buffer=>co_type_warning.
          ls_message-msgid = 'SUID01'.

          case lv_idadtype.
            when if_identity=>co_idad_techuser.
              ls_message-msgno = '081'.
              if ( 1 = 0 ). message w081(suid01). endif.
            when others. "if_identity=>co_idad_person OR co_idad_employee
              ls_message-msgno = '080'.
              if ( 1 = 0 ). message w080(suid01). endif.
          endcase.

          " Add warning message
          call method cl_identity_tools=>message_convert_to_bapiret2
            exporting
              is_message = ls_message
            importing
              es_return  = ls_return.
          append ls_return to et_return.

        endif.

        " Set Communication data
        if ( is_addcomx             is not initial or
             cs_addressx-tel1_numbr is not initial or
             cs_addressx-tel1_ext   is not initial or
             cs_addressx-fax_number is not initial or
             cs_addressx-fax_extens is not initial or
             cs_addressx-e_mail     is not initial      ) and
           ( lv_idadtype = if_identity=>co_idad_olduser ).

            " Map change fields with retrieve commdata fields and to ls_current_state
            clear: ls_retrieve_comm, ls_current_state.
            if  is_addcomx-adtel       <> if_identity=>co_true and
              ( cs_addressx-tel1_numbr =  if_identity=>co_true or cs_addressx-tel1_ext = if_identity=>co_true ).
              ls_retrieve_comm-telephone              = if_identity=>co_true.
              ls_current_state-current_state_tel      = if_identity=>co_true.
              refresh: it_addtel.
            endif.
            if  is_addcomx-adfax       <> if_identity=>co_true and
              ( cs_addressx-fax_number =  if_identity=>co_true or cs_addressx-fax_extens = if_identity=>co_true ).
              ls_retrieve_comm-facsimile              = if_identity=>co_true.
              ls_current_state-current_state_fax      = if_identity=>co_true.
              refresh: it_addfax.
            endif.
            if  is_addcomx-adsmtp <> if_identity=>co_true and cs_addressx-e_mail = if_identity=>co_true.
              ls_retrieve_comm-email                  = if_identity=>co_true.
              ls_current_state-current_state_email    = if_identity=>co_true.
              refresh: it_addsmtp.
            endif.

            if is_addcomx-adtel = if_identity=>co_true.
              ls_current_state-current_state_tel      = if_identity=>co_true.
            endif.
            if is_addcomx-adfax = if_identity=>co_true.
              ls_current_state-current_state_fax      = if_identity=>co_true.
            endif.
            if is_addcomx-adsmtp = if_identity=>co_true.
              ls_current_state-current_state_email    = if_identity=>co_true.
            endif.
            if is_addcomx-aduri = if_identity=>co_true.
              ls_current_state-current_state_web      = if_identity=>co_true.
            endif.
            if is_addcomx-adtlx = if_identity=>co_true.
              ls_current_state-current_state_telex     = if_identity=>co_true.
            endif.
            if is_addcomx-adttx = if_identity=>co_true.
              ls_current_state-current_state_teletex  = if_identity=>co_true.
            endif.
            if is_addcomx-adrml = if_identity=>co_true.
              ls_current_state-current_state_rml      = if_identity=>co_true.
            endif.
            if is_addcomx-adx400 = if_identity=>co_true.
              ls_current_state-current_state_x400     = if_identity=>co_true.
            endif.
            if is_addcomx-adprt = if_identity=>co_true.
              ls_current_state-current_state_printer  = if_identity=>co_true.
            endif.
            if is_addcomx-adssf = if_identity=>co_true.
              ls_current_state-current_state_ssf      = if_identity=>co_true.
            endif.
            if is_addcomx-adpag = if_identity=>co_true.
              ls_current_state-current_state_pager    = if_identity=>co_true.
            endif.

            if ls_retrieve_comm is not initial.
              " Get already assigned communication data
              lr_node_root->idref->if_identity_address~get_communication_data(
                exporting
                  is_retrieve_commdata     = ls_retrieve_comm
                importing
                  eo_msg_buffer            = lo_msg_buffer
                  et_telephone             = lt_telephone_old
                  et_facsimile             = lt_facsimile_old
                  et_email                 = lt_email_old ).

              call method cl_identity_tools=>msg_buffer_retrieve
                exporting
                  iv_bname             = ls_bname-bname
                  io_msg_buffer        = lo_msg_buffer
                  iv_lifetimeonce_only = if_identity=>co_true
                changing
                  ct_messages          = lt_messages.
            endif.

            " Convert BAPIADDR3 structures into new ones
            lr_addr_map = cl_addr_map_from_bapiaddr=>get_instance( ).

            lt_bapiadtel  = it_addtel[].
            lt_bapiadfax  = it_addfax[].
            lt_bapiadttx  = it_addttx[].
            lt_bapiadtlx  = it_addtlx[].
            lt_bapiadsmtp = it_addsmtp[].
            lt_bapiadrml  = it_addrml[].
            lt_bapiadx400 = it_addx400[].
            lt_bapiadrfc  = it_addrfc[].
            lt_bapiadprt  = it_addprt[].
            lt_bapiadssf  = it_addssf[].
            lt_bapiaduri  = it_adduri[].
            lt_bapiadpag  = it_addpag[].
            lt_bapicomrem = it_addcomrem[].

            " ADDRESS structur always contains the default telephone number
            if is_addcomx-adtel  is initial and
              ( cs_addressx-tel1_numbr is not initial or
                cs_addressx-tel1_ext   is not initial ).


              loop at lt_telephone_old reference into lr_telephone_old
                  where mobile_phone is initial.

                read table lr_telephone_old->usages
                  with key comm_usage = 'AD_NMBDEFA' def_usage = 'X'
                  transporting no fields.

                if sy-subrc = 0.
                  lv_found = abap_true.
                  exit.
                endif.

              endloop.

              if lv_found = abap_true.

                " changing the default tel. number
                lr_telephone_old->updateflag = 'U'.
                refresh lr_telephone_old->notes.

              else.

                " create new default tel. number
                append initial line to lt_telephone_old reference into lr_telephone_old.
                lr_telephone_old->updateflag = 'I'.

              endif.

              if not cs_addressx-tel1_numbr is initial.
                lr_telephone_old->tel_number  = is_address-tel1_numbr.
              endif.

              if not cs_addressx-tel1_ext is initial.
                lr_telephone_old->tel_extens  = is_address-tel1_ext.
              endif.

              if lr_telephone_old->tel_number is initial and
                 lr_telephone_old->tel_extens is initial.

                " only delete and determine the new default tel. number
                delete table lt_telephone_old from lr_telephone_old->*.

              endif.

              clear: cs_addressx-tel1_numbr, cs_addressx-tel1_ext.
            endif.

            lr_addr_map->convert_from_bapiaddr3(
              exporting
                is_bapiaddr3               = is_address
                is_bapiaddr3x              = cs_addressx
                is_adcomx                  = is_addcomx
                it_bapiadtel_new           = lt_bapiadtel
                it_bapiadfax_new           = lt_bapiadfax
                it_bapiadttx_new           = lt_bapiadttx
                it_bapiadtlx_new           = lt_bapiadtlx
                it_bapiadsmtp_new          = lt_bapiadsmtp
                it_bapiadrml_new           = lt_bapiadrml
                it_bapiadx400_new          = lt_bapiadx400
                it_bapiadrfc_new           = lt_bapiadrfc
                it_bapiadprt_new           = lt_bapiadprt
                it_bapiadssf_new           = lt_bapiadssf
                it_bapiaduri_new           = lt_bapiaduri
                it_bapiadpag_new           = lt_bapiadpag
                it_bapicomrem_new          = lt_bapicomrem
                it_telephone_number_old    = lt_telephone_old
                it_facsimile_number_old    = lt_facsimile_old
                it_email_address_old       = lt_email_old
              importing
                et_telephone_number        = lt_telephone
                et_facsimile_number        = lt_facsimile
                et_email_address           = lt_email
                et_web_address             = lt_web
                et_telex_number            = lt_telex
                et_teletex_number          = lt_teletex
                et_remote_mail_address     = lt_rml
                et_x400_address            = lt_x400
                et_printer                 = lt_printer
                et_ssf_address             = lt_ssf
                et_pager_number            = lt_pager
                et_error                   = lt_error ).

            " append lines of lt_error to return.
            cl_identity_tools=>message_address_error_convert(
                                    exporting
                                      it_addr_error = lt_error
                                    importing
                                      et_return     = lt_return ).

            append lines of lt_return to et_return.

            " Set new communication data
            lr_node_root->idref->if_identity_address~set_communication_data(
              exporting
                it_telephone        = lt_telephone
                it_facsimile        = lt_facsimile
                it_email            = lt_email
                it_web              = lt_web
                it_telex            = lt_telex
                it_teletex          = lt_teletex
                it_rml              = lt_rml
                it_x400             = lt_x400
                it_printer          = lt_printer
                it_ssf              = lt_ssf
                it_pager            = lt_pager
                is_current_state    = ls_current_state
              importing
                eo_msg_buffer       = lo_msg_buffer  ).

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.

        endif.   "address changes requested AND lv_idadtype = if_identity=>co_idad_olduser

        " Set Address
        if ( lv_idadtype = if_identity=>co_idad_olduser ).
          ls_addressx_wocomm = cs_addressx.
          " Clear comm data
          clear: ls_addressx_wocomm-tel1_numbr,
                 ls_addressx_wocomm-tel1_ext,
                 ls_addressx_wocomm-fax_number,
                 ls_addressx_wocomm-fax_extens,
                 ls_addressx_wocomm-e_mail.
        endif.

        if ( ls_addressx_wocomm is not initial          ) and
           ( lv_idadtype = if_identity=>co_idad_olduser ).
          clear lt_return.
          call method cl_suid_tools=>map_address_bapi_to_nodes
            exporting
              is_address                 = is_address
              is_addressx                = ls_addressx_wocomm
            importing
              et_change_flds_person_name = lt_change_node_fields
              es_node_person_name        = ls_node_person_name
              et_change_flds_workplace   = lt_change_workplace_flds
              es_node_workplace          = ls_node_workplace
              et_return                  = lt_return.

          append lines of lt_return to et_return.

          call method cl_suid_tools=>map_bapi_language_to_nodes
            exporting
              iv_bname                   = ls_bname-bname
              is_address                 = is_address
              is_addressx                = ls_addressx_wocomm
            importing
              et_messages                = lt_returned_messages
            changing
              ct_change_flds_person_name = lt_change_node_fields
              cs_node_person_name        = ls_node_person_name.

          append lines of lt_returned_messages to lt_messages.

          " Set Person_Name
          if lt_change_node_fields is not initial.
            call method lr_node_root->idref->if_identity_address~set_personname
              exporting
                is_personname    = ls_node_person_name
                it_change_fields = lt_change_node_fields
              importing
                eo_msg_buffer    = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.

          " Set Workplace
          if lt_change_workplace_flds is not initial.
            call method lr_node_root->idref->if_identity_address~set_workplacedata
              exporting
                is_workplace     = ls_node_workplace
                it_change_fields = lt_change_workplace_flds
              importing
                eo_msg_buffer    = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " Set Organization
        if ( is_companyx is not initial                 ) and
           ( lv_idadtype = if_identity=>co_idad_olduser ).
          ls_node_organization-company = is_company-company.
          ls_node_organization-orgtype = if_identity=>co_company.

          call method lr_node_root->idref->if_identity_address~set_organization
            exporting
              is_organization = ls_node_organization
            importing
              eo_msg_buffer   = lo_msg_buffer.

          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_true
            changing
              ct_messages          = lt_messages.
        endif.

        " Set user description
        if is_descriptionx is not initial.
          refresh: lt_change_node_fields.
          call method cl_suid_tools=>map_bapi_structures_to_nodes
            exporting
              is_bapi_structure  = is_description
              is_bapix_structure = is_descriptionx
            importing
              et_change_fields   = lt_change_node_fields
            changing
              cs_node_structure  = ls_node_tech_user_data.

          if lt_change_node_fields[] is not initial.
            call method lr_node_root->idref->set_technical_user_data
              exporting
                is_tech_user_data = ls_node_tech_user_data
                it_change_fields  = lt_change_node_fields
              importing
                eo_msg_buffer     = lo_msg_buffer.

            call method cl_identity_tools=>msg_buffer_retrieve
              exporting
                iv_bname             = ls_bname-bname
                io_msg_buffer        = lo_msg_buffer
                iv_lifetimeonce_only = if_identity=>co_true
              changing
                ct_messages          = lt_messages.
          endif.
        endif.

        " --- Last general check before Save ---
        cl_identity=>do_check(
          importing
            ev_rejected   = lv_rejected
            eo_msg_buffer = lo_msg_buffer ).

        call method cl_identity_tools=>msg_buffer_retrieve
          exporting
            iv_bname             = ls_bname-bname
            io_msg_buffer        = lo_msg_buffer
            iv_lifetimeonce_only = if_identity=>co_true
          changing
            ct_messages          = lt_messages.

        " Check if any errors occured before - when positive ==>don't save
        if lv_rejected eq if_identity=>co_false.
          read table lt_messages transporting no fields
               with key msgty = if_suid_msg_buffer=>co_type_error.
          if sy-subrc = 0.
            lv_rejected = if_identity=>co_true.
          endif.

          read table lt_return transporting no fields
               with key type = if_suid_msg_buffer=>co_type_error.
          if sy-subrc = 0.
            lv_rejected = if_identity=>co_true.
          endif.
        endif.

        " --- Perform SAVE ---
        if lv_rejected     eq if_identity=>co_false and
           iv_no_db_update is initial.

          cl_identity=>do_save(
            exporting
              iv_update_task = if_identity=>co_false
            importing
              ev_rejected    = lv_rejected
              eo_msg_buffer  = lo_msg_buffer ).

          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_false
            changing
              ct_messages          = lt_messages.

          " Commit work
          if lv_rejected = if_identity=>co_false.
            commit work.
          else.
            rollback work.
          endif.

        else.
          " do_check rejected:
          call method cl_identity_tools=>msg_buffer_retrieve
            exporting
              iv_bname             = ls_bname-bname
              io_msg_buffer        = lo_msg_buffer
              iv_lifetimeonce_only = if_identity=>co_false
            changing
              ct_messages          = lt_messages.

        endif.
      endif.

      " add messages to return structure
      clear: lt_return.
      call method cl_identity_tools=>msg_buffer_convert_to_bapiret2
        exporting
          it_messages = lt_messages
        importing
          et_return   = lt_return.

      append lines of lt_return to et_return.

      " --- Clean up ---
      call method cl_identity=>cleanup
        exporting
          it_bname = lt_bname.

    catch cx_suid_identity into lx_suid_identity.
      " Exception at Save step ==> delete all update and background tasks
      rollback work.

      call method cl_identity_tools=>message_suid_technical_error
        exporting
          ix_suid_identity = lx_suid_identity
        importing
          es_return        = ls_return.
      append ls_return to et_return.
  endtry.


endform.                    " USER_CHANGE
