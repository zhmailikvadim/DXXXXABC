FUNCTION RSEC_GENERATE_PASSWORD
  IMPORTING
    VALUE(ALPHABET) TYPE C OPTIONAL
    VALUE(ALPHABET_LENGTH) TYPE I DEFAULT 0
    VALUE(FORCE_INIT) TYPE C DEFAULT ' '
    VALUE(OUTPUT_LENGTH) TYPE I DEFAULT 0
    VALUE(DOWNWARDS_COMPATIBLE) TYPE BOOLE_D DEFAULT SPACE
    SECURITY_POLICY TYPE SECURITY_POLICY_NAME DEFAULT SPACE
  EXPORTING
    OUTPUT TYPE C
  EXCEPTIONS
    SOME_ERROR.




* Note 631196: New default for ALPHABET: The set of characters, figures
* and special chars which are used for user passwords.
*   chars and figures: ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
*   special_chars:     <space> !"@$%&/()=?'`*+~#-_.,;:{[]}\<>|
* Chars which can be mis-interpreted are ommited (i.e. O0 1I| ., -_ ).
* 'Strange' special chars are ommited, too (i.e. <space> ! " ? ' ` ).
* Profile parameters for password rules:
*   login/min_password_lng
*   login/min_password_letters
*   login/min_password_digits
*   login/min_password_specials
*   login/min_password_lowercase   (unless: DOWNWARDS_COMPATIBLE = 'X')
*   login/min_password_uppercase   (unless: DOWNWARDS_COMPATIBLE = 'X')
*
* Generated password will only contain lowercase characters if this
* is demanded by login/min_password_lowercase.
  DATA: l_force_init    TYPE c,
        l_outputlen     TYPE i,
        l_alphabet(200) TYPE c,
        l_alphabetlen   TYPE i,
        l_policy_name   TYPE security_policy_name,
        password_compatibility(1).

  DATA: old_style TYPE boole_d.

  CONSTANTS: c_uppercase(24) TYPE c VALUE 'ABCDEFGHJKLMNPQRSTUVWXYZ',
             c_lowercase(26) TYPE c VALUE 'abcdefghijklmnopqrstuvwxyz',
             c_digits(8)     TYPE c VALUE '23456789',
             c_specials(19)  TYPE c VALUE '@$%&/\()=+-#~<>[]{}'.

  DATA: m TYPE i.

  DATA: min_password_lng       TYPE i,
        min_password_digits    TYPE i,
        min_password_letters   TYPE i,
        min_password_specials  TYPE i,
        min_password_lowercase TYPE i,
        min_password_uppercase TYPE i.

  DATA: output_uppercase(100),
        output_lowercase(100),
        output_digits(100),
        output_specials(100),
        output_remaining(100),
        l_index TYPE sy-index,
        offset TYPE i,
        rnd(1).

  DATA: max_password_lng      TYPE i,
        max_password_digits   TYPE i,
        max_password_letters  TYPE i,
        max_password_specials TYPE i,
        ls_prgn_cust_value    LIKE prgn_cust-path.

* Determine length of password (old/new style)
  IF downwards_compatible IS INITIAL.
    CALL 'C_SAPGPARAM'
      ID 'NAME' FIELD 'login/password_downwards_compatibility'
      ID 'VALUE' FIELD password_compatibility.            "#EC CI_CCALL
    IF password_compatibility = 5.
      old_style = 'X'.
    ENDIF.
  ELSE.
    old_style = 'X'.
  ENDIF.
  IF old_style = 'X'.
    max_password_lng = 8.
  ELSE.
    max_password_lng = 40.
  ENDIF.

  IF alphabet IS INITIAL.

*   Default case: Generate a valid user password using default alphabet

*   Check parameters

    PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_LENGTH'
                                      'login/min_password_lng'
                                CHANGING min_password_lng.
    IF min_password_lng > max_password_lng.
      min_password_lng = max_password_lng.
    ENDIF.

    PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_LETTERS'
                                      'login/min_password_letters'
                                CHANGING min_password_letters.
    IF min_password_letters > max_password_lng.
      min_password_letters = max_password_lng.
    ENDIF.

    PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_DIGITS'
                                      'login/min_password_digits'
                                CHANGING min_password_digits.
    IF min_password_digits > max_password_lng.
      min_password_digits = max_password_lng.
    ENDIF.

    PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_SPECIALS'
                                      'login/min_password_specials'
                                CHANGING min_password_specials.
    IF min_password_specials > max_password_lng.
      min_password_specials = max_password_lng.
    ENDIF.

    IF old_style IS INITIAL.
      PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_LOWERCASE'
                                        'login/min_password_lowercase'
                                  CHANGING min_password_lowercase.
      PERFORM get_parameter_value USING security_policy 'MIN_PASSWORD_UPPERCASE'
                                        'login/min_password_uppercase'
                                  CHANGING min_password_uppercase.

      m = min_password_letters - min_password_uppercase.
      IF min_password_lowercase < m.
        min_password_lowercase = m.
      ENDIF.

      m = min_password_letters - min_password_lowercase.
      IF min_password_uppercase < m.
        min_password_uppercase = m.
      ENDIF.

      m = min_password_lowercase + min_password_uppercase.
      IF min_password_letters < m.
        min_password_letters = m.
      ENDIF.

    ELSE.
      min_password_lowercase = 0.
      min_password_uppercase = min_password_letters.
    ENDIF.

    IF output_length > 0.
      l_outputlen   = output_length.
    ELSE.
*     check for customizing switch GEN_PSW_MAX_LENGTH
      SELECT SINGLE path FROM prgn_cust INTO ls_prgn_cust_value
             WHERE id  =   'GEN_PSW_MAX_LENGTH'.
      IF sy-subrc = 0 AND NOT ls_prgn_cust_value IS INITIAL.
        CATCH SYSTEM-EXCEPTIONS convt_no_number = 1.
          m = ls_prgn_cust_value.
          IF m < min_password_lng.
            DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
            MESSAGE i418(01) WITH l_outputlen 'LENGTH'.
          ELSE.
            l_outputlen = m.
            IF l_outputlen < max_password_lng.
              max_password_lng = l_outputlen.
            ENDIF.
          ENDIF.
        ENDCATCH.
        IF sy-subrc = 1.
          DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
        ENDIF.
      ELSE.
        DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
      ENDIF.
    ENDIF.
    IF l_outputlen > max_password_lng.
      l_outputlen = max_password_lng.
    ENDIF.

    IF l_outputlen < min_password_lng.
* 414(01) Mind. ein Profilparameter login/min_password_* ist zu groß
      MESSAGE e414(01) RAISING some_error.
    ENDIF.

    m =   min_password_digits
        + min_password_uppercase
        + min_password_lowercase
        + min_password_specials.
    IF l_outputlen < m.
* 414(01) Mind. ein Profilparameter login/min_password_* ist zu groß
*      message E414(01) RAISING SOME_ERROR.
      MESSAGE i414(01).
      min_password_uppercase = 0.
      min_password_lowercase = 0.
      min_password_specials = 0.
      min_password_letters = 0.
      min_password_digits = 0.
    ENDIF.

* Get customizing switches values for generated passwords

    DATA: sum TYPE i.

    SELECT SINGLE path FROM prgn_cust INTO ls_prgn_cust_value
           WHERE id  =   'GEN_PSW_MAX_DIGITS'.
    IF sy-subrc = 0 AND NOT ls_prgn_cust_value IS INITIAL.
      CATCH SYSTEM-EXCEPTIONS convt_no_number = 1.
        max_password_digits = ls_prgn_cust_value.
      ENDCATCH.
      IF sy-subrc = 1.
        max_password_digits = l_outputlen.
      ENDIF.
    ELSE.
      max_password_digits = l_outputlen.
    ENDIF.

    SELECT SINGLE path FROM prgn_cust INTO ls_prgn_cust_value
           WHERE id  =   'GEN_PSW_MAX_LETTERS'.
    IF sy-subrc = 0 AND NOT ls_prgn_cust_value IS INITIAL.
      CATCH SYSTEM-EXCEPTIONS convt_no_number = 1.
        max_password_letters = ls_prgn_cust_value.
      ENDCATCH.
      IF sy-subrc = 1.
        max_password_letters = l_outputlen.
      ENDIF.
    ELSE.
      max_password_letters = l_outputlen.
    ENDIF.

    SELECT SINGLE path FROM prgn_cust INTO ls_prgn_cust_value
           WHERE id  =   'GEN_PSW_MAX_SPECIALS'.
    IF sy-subrc = 0 AND NOT ls_prgn_cust_value IS INITIAL.
      CATCH SYSTEM-EXCEPTIONS convt_no_number = 1.
        max_password_specials = ls_prgn_cust_value.
      ENDCATCH.
      IF sy-subrc = 1.
        max_password_specials = l_outputlen.
      ENDIF.
    ELSE.
      max_password_specials = l_outputlen.
    ENDIF.

*   Check that min is less than max.

    IF max_password_digits < min_password_digits.
      max_password_digits = l_outputlen.
      MESSAGE i418(01) WITH l_outputlen 'DIGITS'.
    ENDIF.

    m = min_password_uppercase + min_password_lowercase.
    IF max_password_letters < m.
      max_password_letters = l_outputlen.
      MESSAGE i418(01) WITH l_outputlen 'LETTERS'.
    ENDIF.

    IF max_password_specials < min_password_specials.
      max_password_specials = l_outputlen.
      MESSAGE i418(01) WITH l_outputlen 'SPECIALS'.
    ENDIF.

* Check that sum of the customizing switches values is not less than
* generated password length

    sum = max_password_letters  +
          max_password_specials +
          max_password_digits.
    IF sum < l_outputlen.
      max_password_specials = l_outputlen.
      max_password_letters  = l_outputlen.
      max_password_digits   = l_outputlen.
      MESSAGE i418(01) WITH l_outputlen 'SUM'.
    ENDIF.

* If there is conditions for MAXIMUMS then
* generate random sample of password letters, digit and specials.
    IF NOT ( max_password_specials >= l_outputlen AND
             max_password_letters  >= l_outputlen AND
             max_password_digits   >= l_outputlen ).
      DATA lv_dummy TYPE i.
      PERFORM get_sample4  USING
                            l_outputlen
                            3
                            max_password_letters
                            max_password_digits
                            max_password_specials
                            0
                            '0.6'
                            '0.15'
                            '0.25'
                            0
                            'X'
                          CHANGING
                            min_password_letters
                            min_password_digits
                            min_password_specials
                            lv_dummy
                               .
      IF old_style IS NOT INITIAL.
        min_password_uppercase = min_password_letters.
      ENDIF.
    ENDIF.
*   Try...
    DO 1000 TIMES.
*     Generate random strings for uppercase, lowercase, digits, specials
*                             and remaining
      l_force_init = force_init.
*     Uppercase
      IF min_password_uppercase > 0.
        l_alphabet    = c_uppercase.
        l_alphabetlen = strlen( l_alphabet ).
        l_outputlen   = min_password_uppercase.
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD output_uppercase
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
        CLEAR l_force_init.
      ENDIF.
*     Lowercase
      IF min_password_lowercase > 0.
        l_alphabet    = c_lowercase.
        l_alphabetlen = strlen( l_alphabet ).
        l_outputlen   = min_password_lowercase.
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD output_lowercase
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
        CLEAR l_force_init.
      ENDIF.
*     Digits
      IF min_password_digits > 0.
        l_alphabet    = c_digits.
        l_alphabetlen = strlen( l_alphabet ).
        l_outputlen   = min_password_digits.
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD output_digits
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
        CLEAR l_force_init.
        max_password_digits = 0. "to not to use it in "Remain" section
      ENDIF.
*     Specials
      IF min_password_specials > 0.
        l_alphabet    = c_specials.
        l_alphabetlen = strlen( l_alphabet ).
        l_outputlen   = min_password_specials.
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD output_specials
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
        CLEAR l_force_init.
        max_password_specials = 0. "to not to use it in "Remain" section
      ENDIF.
*     Remaining
      IF output_length > 0.
        l_outputlen   = output_length.
      ELSE.
        DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
      ENDIF.
      IF l_outputlen > max_password_lng.
        l_outputlen = max_password_lng.
      ENDIF.
      l_outputlen = l_outputlen - min_password_uppercase
                                - min_password_lowercase
                                - min_password_digits
                                - min_password_specials.
      IF l_outputlen > 0.
        CLEAR l_alphabet.
*       Generated password will only contain lowercase characters
*       if this is demanded by login/min_password_lowercase.
        IF old_style IS INITIAL.
          CONCATENATE l_alphabet c_lowercase INTO l_alphabet.
        ENDIF.
*       Suppress usage of uppercase characters
*       if GEN_PSW_MAX_LETTERS = 0
        IF max_password_letters > 0.
          CONCATENATE l_alphabet c_uppercase INTO l_alphabet.
        ENDIF.
*       Suppress usage of digit characters
*       if GEN_PSW_MAX_DIGITS = 0 or if digits was already generated
*       and we use "Remain" section to generate letters
        IF max_password_digits > 0.
          CONCATENATE l_alphabet c_digits INTO l_alphabet.
        ENDIF.
*       Suppress usage of special characters
*       if GEN_PSW_MAX_SPECIALS = 0 or if specials was already generated
*       and we use "Remain" section to generate letters
        IF max_password_specials > 0.
          CONCATENATE l_alphabet c_specials INTO l_alphabet.
        ENDIF.
        l_alphabetlen = strlen( l_alphabet ).
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD output_remaining
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
        CLEAR l_force_init.
      ENDIF.
*     Permutate results
      IF output_length > 0.
        l_outputlen   = output_length.
      ELSE.
        DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
      ENDIF.
      IF l_outputlen > max_password_lng.
        l_outputlen = max_password_lng.
      ENDIF.
      DO l_outputlen TIMES.
        l_index = sy-index - 1.
*       get random value with approbiate propability
        CLEAR: l_alphabet, offset.
        m = strlen( output_uppercase ).
        IF m > 0.
          CLEAR l_alphabet+offset(m) WITH 'U'.
          ADD m TO offset.
        ENDIF.
        m = strlen( output_lowercase ).
        IF m > 0.
          CLEAR l_alphabet+offset(m) WITH 'L'.
          ADD m TO offset.
        ENDIF.
        m = strlen( output_digits ).
        IF m > 0.
          CLEAR l_alphabet+offset(m) WITH 'D'.
          ADD m TO offset.
        ENDIF.
        m = strlen( output_specials ).
        IF m > 0.
          CLEAR l_alphabet+offset(m) WITH 'S'.
          ADD m TO offset.
        ENDIF.
        m = strlen( output_remaining ).
        IF m > 0.
          CLEAR l_alphabet+offset(m) WITH 'R'.
          ADD m TO offset.
        ENDIF.
        l_alphabetlen = strlen( l_alphabet ).
        l_outputlen   = 1.
        CALL 'RSEC_GEN_PASSWD'
               ID 'ALPHABET'    FIELD l_alphabet
               ID 'ALPHABETLEN' FIELD l_alphabetlen
               ID 'OUTPUT'      FIELD rnd
               ID 'OUTPUTLEN'   FIELD l_outputlen
               ID 'FORCE_INIT'  FIELD l_force_init.       "#EC CI_CCALL
        IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
          MESSAGE e415(01) RAISING some_error.
        ENDIF.
*       Choose next character according to random number
        CASE rnd.
          WHEN 'U'.
            output+l_index(1) = output_uppercase+0(1).
            SHIFT output_uppercase.
          WHEN 'L'.
            output+l_index(1) = output_lowercase+0(1).
            SHIFT output_lowercase.
          WHEN 'D'.
            output+l_index(1) = output_digits+0(1).
            SHIFT output_digits.
          WHEN 'S'.
            output+l_index(1) = output_specials+0(1).
            SHIFT output_specials.
          WHEN 'R'.
            output+l_index(1) = output_remaining+0(1).
            SHIFT output_remaining.
        ENDCASE.
      ENDDO.

*     Check password rules
      DATA: pwd_bapipwd TYPE bapipwd,
            pwd_rc TYPE i.
      pwd_bapipwd-bapipwd = output.
      CALL FUNCTION 'PASSWORD_FORMAL_CHECK'
        EXPORTING
          password             = pwd_bapipwd
          downwards_compatible = downwards_compatible
          security_policy      = security_policy
        IMPORTING
          rc                   = pwd_rc
          msgid                = sy-msgid
          msgno                = sy-msgno
          msgv1                = sy-msgv1
          msgv2                = sy-msgv2
          msgv3                = sy-msgv3
          msgv4                = sy-msgv4
        EXCEPTIONS
          internal_error       = 1
          OTHERS               = 2.
      IF sy-subrc = 0 AND pwd_rc = 0.
        EXIT. " Valid password found
      ELSE.
        CLEAR output.
      ENDIF.
    ENDDO.
    IF output IS INITIAL.
* 416(01) Kein gültiges Passwort erzeugt. Bitte noch einmal versuchen.
      MESSAGE e416(01) RAISING some_error.
    ENDIF.

  ELSE.

*   Simple case: Generate a random string using given alphabet
    IF alphabet_length > 0.
      l_alphabetlen = alphabet_length.
    ELSE.
      l_alphabetlen = strlen( alphabet ).
    ENDIF.
    IF output_length > 0.
      l_outputlen   = output_length.
    ELSE.
      DESCRIBE FIELD output LENGTH l_outputlen IN CHARACTER MODE.
    ENDIF.
    IF l_outputlen > max_password_lng.
      l_outputlen = max_password_lng.
    ENDIF.
    CALL 'RSEC_GEN_PASSWD'
             ID 'ALPHABET'    FIELD alphabet
             ID 'ALPHABETLEN' FIELD l_alphabetlen
             ID 'OUTPUT'      FIELD output
             ID 'OUTPUTLEN'   FIELD l_outputlen
             ID 'FORCE_INIT'  FIELD force_init.           "#EC CI_CCALL
    IF sy-subrc <> 0.
* 415(01) In der Kernelroutine RSEC_GEN_PASSWD trat ein Problem auf
      MESSAGE e415(01) RAISING some_error.
    ENDIF.

  ENDIF.

* Avoid generating SAPScript commands: '<(>' and '<)>'.
  REPLACE ALL OCCURRENCES OF '<(>' IN output WITH '<>('.
  REPLACE ALL OCCURRENCES OF '<)>' IN output WITH '<>)'.

ENDFUNCTION.

*&--------------------------------------------------------------------*
*&      Form  get_sample4
*&--------------------------------------------------------------------*
*  We need to generate password with some limitation on max and min
* amount of letters, digits and specials characters. We can just
* generate password and then check the limitation. If password is
* not passed, then repeat.
* If there is no limitations we can generate the password using
* such technique with one step. But if we have strong limitations, for
* example max_letters = 5, max_disgits = 40, max_special = 5.
* We need to generate a lot password until it passes the requirements.
* So we need to do it another way: Randomly select the sample - of
* letters, digits, specials which pass the requirement
* (are between min and max)
* The problem is that a sample should be... plausible. For example the
* probability of generating password with only digits or only letters
* is much smaller than probability of "mixed" password.
* Letters should appear more often than digits and so on...
*
* This form routine solves the general problem of generating
* Plausible sample of 2 - 4 elements.
*---------------------------------------------------------------------*
* Get random sample - { a, b, c, d }:1) a + b + c + d  = outputlen and
*                                    2) min_a <= a <= max_a ...
* Parameters:
*  - outputlen  - length of the password
*  - set_power  - amount of member of the set:
*                 4 - { a, b, c, d }
*                 3 - { b, c, d }
*                 2 - { c, d }
*                 others values are not supported
* - max_d, max_c, max_b, max_a
*               - maximum limitations for corresponded
*                set member { a, b, c, d }
* - pd, pb, pc, pa  - probabilities of  appearance of set members.
*
* - min_d, min_c, min_b, min_a
*                 - minimimum limitations for set member { a, b, c, d }
*                 - returned valued for set member { a, b, c, d }
*---------------------------------------------------------------------*
*  Algorithm Description:
* 1. Get array of all possible sets { a, b, c, d }.
*   For every line:
* 1.2  Calculate probability of the set i: { a, b, c, d }
*      Pi = n!/a!/b!/c!* Pa**a * Pb**b * Pc**c * Pd**d.
*      Where n = a+b+c+d (length of pswd)
*1.3  Calculate Sum of previous probabilities:
*      Qi = Q(i-1) + Pi.
*      Q1 = P1, Q0 = 0.
*      Qk - overall sum. If no limitation, then Qk = 1.
*      k- amount of possible sets
* 2. Get random number R from  [0, Qk] (Uniform distribution).
* 3. Find j: Qj-1 < R <= Qj
* Take J-row - it contains the set we need.
*---------------------------------------------------------------------*
* Example: We need to generate upper-case 40-password with
* max_letter = 40 max_digit = 20, max_special = 20.
* min_letter = 0 min_digit = 2, min_special = 2.
* d  - letters, c -digits, b - specials, a - nothing,
* So max_letters = max_d = 40 and so on..
* How to get probability, Amount of Letter = 26
* Disgits  = 10,
* Specials = 30.
* So pd = p(letters) = 26 / (26+10+30) and so on..
* If we do not want to much specials in password we can play with
* probablities.
* In the ne we can do:
*      perform get_sample4  using
*                            40    " ouput lenhth of password
*                            3     " how many members are in the sample
*                            max_password_letters
*                            max_password_digits
*                            max_password_specials
*                            max_a   "not used
*                            '0.4'  "P(letter)
*                            '0.2'  "P(digits)
*                            '0.4'  "P(specials)
*                            0      "not used
*                          changing
*                            min_password_letters
*                            min_password_digits
*                            min_password_specials
*                            min_a "notused
*                               .
*---------------------------------------------------------------------*
* Note:
* The get_sample4 with set_power = 4 will provide the sample
* with best distribution. But it works a bit slow.
*---------------------------------------------------------------------*
FORM get_sample4 USING
                  outputlen TYPE i
                  set_power TYPE i
                  max_d     TYPE i
                  max_c     TYPE i
                  max_b     TYPE i
                  max_a     TYPE i
                  pd        TYPE f
                  pc        TYPE f
                  pb        TYPE f
                  pa        TYPE f
                  iv_init_flag TYPE char1
                CHANGING
                  min_d
                  min_c
                  min_b
                  min_a
                    .
  DATA: i TYPE i,
        j TYPE i,
        k TYPE i,
        l TYPE i,
        value1 TYPE i,
        value2 TYPE i.

  DATA fn  TYPE f.
  DATA fi  TYPE f.
  DATA fj  TYPE f.
  DATA fk  TYPE f.
  DATA fl  TYPE f.

  DATA fpi TYPE f.
  DATA fpj TYPE f.
  DATA fpk TYPE f.
  DATA fpl TYPE f.

  DATA q_1 TYPE f. "previous Q
  DATA qn  TYPE f. "Last Q
  DATA rnd TYPE f. "Uninorm distribute rnd-number on [0,Qn]

  DATA max_p   TYPE f.
  DATA index   TYPE i.
  DATA max_p_i TYPE i.

* Array to collect all samples.
  DATA: BEGIN OF array OCCURS 0,
          i       TYPE i,
          j       TYPE i,
          k       TYPE i,
          l       TYPE i,
          p       TYPE f, "Probability of sample P(i,j,k,l)
          q       TYPE f, " Sum of prevoiur P(i,j,k,l)
        END OF array.
  STATICS: array2 LIKE array[].
  STATICS: array3 LIKE array[].
  STATICS: array4 LIKE array[].
  DATA lv_init_flag TYPE char1.

  lv_init_flag = iv_init_flag.
  CASE set_power.
    WHEN 2.
      array[] = array2[].
    WHEN 3.
      array[] = array3[].
    WHEN 4.
      array[] = array4[].
  ENDCASE.
  IF lv_init_flag = 'X' OR array[] IS INITIAL.
    CLEAR array[].
* 1. Get array with all possible varinats.
    i = min_a.
    DO.
      j = min_b.
      DO.
        k = min_c.
        DO.
          l = outputlen - i - j - k.
          IF NOT ( l > max_d OR
                   l < min_d OR
                   l < 0 ).
            array-i = i.
            array-j = j.
            array-k = k.
            array-l = l.

* 1.2 Calculate p of the set
            PERFORM fact USING outputlen CHANGING fn.

            PERFORM fact USING l CHANGING fl.
            PERFORM fact USING k CHANGING fk.
            IF set_power > 2.
              PERFORM fact USING j CHANGING fj.
            ENDIF.
            IF set_power > 3.
              PERFORM fact USING i CHANGING fi.
            ENDIF.
            PERFORM power USING pd l CHANGING fpl.
            PERFORM power USING pc k CHANGING fpk.

            IF set_power > 2.
              PERFORM power USING pb j CHANGING fpj.
            ENDIF.
            IF set_power > 3.
              PERFORM power USING pa i CHANGING fpi.
            ENDIF.

            CASE set_power.
              WHEN 2.
                array-p  = fn / fk / fl * fpk * fpl.
              WHEN 3.
                array-p  = fn / fj / fk / fl * fpj * fpk * fpl.
              WHEN 4.
                array-p  = fn / fi / fj / fk / fl * fpi * fpj * fpk * fpl.
              WHEN OTHERS.
                MESSAGE x319(01) WITH 'System Error' .      "#EC NOTEXT
            ENDCASE.
            array-q  = array-p + q_1 .
            q_1 =  array-q.
            APPEND array.
            ADD 1 TO  index.
            IF max_p < array-p.
              max_p = array-p.
              max_p_i = index.
            ENDIF.

          ENDIF.
          k = k + 1.
          IF k > max_c OR set_power < 2.
            EXIT.
          ENDIF.
        ENDDO.
        j = j + 1.
        IF j > max_b OR set_power < 3.
          EXIT.
        ENDIF.
      ENDDO.
      i = i + 1.
      IF i > max_a OR set_power < 4.
        EXIT.
      ENDIF.
    ENDDO.
  ELSE.
* Use buffered array.
*... nothing to do
  ENDIF.

* Get Qn
  DESCRIBE TABLE array LINES value1.
  READ TABLE array INDEX value1 INTO array.
  qn = array-q.

*  get RND-number [0, Qn]
  DATA lr_prng TYPE REF TO cl_abap_random.
  DATA lv_seed TYPE i.
  lv_seed = cl_abap_random=>seed( ).
  lr_prng = cl_abap_random=>create( lv_seed ).
  rnd = lr_prng->float( ).
  IF qn <> 0.
    rnd = rnd * qn.
  ELSE.
    rnd = 1.
  ENDIF.

  IF rnd = 0.
    value2 = max_p_i.
  ELSE.
    LOOP AT array INTO array.
      value2 = sy-tabix.
      IF rnd < array-q.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDIF.
  READ TABLE array INTO array INDEX value2.
  IF sy-subrc = 0.
    min_a  = array-i.
    min_b  = array-j.
    min_c  = array-k.
    min_d  = array-l.
  ENDIF.
ENDFORM.                    "get_sample4

*&---------------------------------------------------------------------*
*&      Form  fact
*&---------------------------------------------------------------------*
*   Calculate Factorial from N
*----------------------------------------------------------------------*
*      -->N
*      -->RESULT     = N*(N-1)*(N-2)*...*2*1
*----------------------------------------------------------------------*
FORM fact USING n TYPE i
          CHANGING result TYPE f.
  TYPES: BEGIN OF ty_fact_buf,
            n    TYPE i,
            fact TYPE f,
         END OF ty_fact_buf.
  TYPES: ty_t_fact_buf TYPE STANDARD TABLE OF ty_fact_buf.
*  sorted table of ty_fact_buf  with key n.

  STATICS: st_fact_buf TYPE ty_t_fact_buf .
  DATA ls_buf TYPE ty_fact_buf.
  DATA i TYPE i.
  result = 1.

  IF n > 0 AND n < 10 .
    i = 1.
    DO n TIMES.
      result = result * i.
      ADD 1 TO i.
    ENDDO.
  ELSEIF n >= 10.
    READ TABLE st_fact_buf WITH KEY n = n INTO ls_buf
    BINARY SEARCH.
    IF sy-subrc = 0.
      result = ls_buf-fact.
    ELSE.
      i = 1.
      DO n TIMES.
        result = result * i.
        ADD 1 TO i.
      ENDDO.
      ls_buf-n = n .
      ls_buf-fact = result.
      INSERT ls_buf INTO st_fact_buf INDEX 1.
      SORT st_fact_buf  BY n.
    ENDIF.
  ENDIF.
ENDFORM.                    "fact

*&---------------------------------------------------------------------*
*&      Form  power
*&---------------------------------------------------------------------*
*   N Power of A
*----------------------------------------------------------------------*
*      -->RESULT   = A**N
*----------------------------------------------------------------------*
FORM power USING value(a) TYPE f
                 value(n) TYPE i
            CHANGING result TYPE f.
  DATA i TYPE i.
  DATA n_1 TYPE i.
  IF n = 0.
    result = 1.
  ELSEIF n > 0.
    result = a.
    n_1 = n - 1.
    DO n_1 TIMES.
      result = result * a.
    ENDDO.
  ENDIF.
ENDFORM.                    "power

*&---------------------------------------------------------------------*
*&      Form  get_parameter_value
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->POLICY_NAME     text
*      -->ATTRIBUTE_KEY   text
*      -->PARAMETER_NAME  text
*      -->VALUE           text
*----------------------------------------------------------------------*
FORM get_parameter_value
  USING policy_name    TYPE security_policy_name
        attribute_key  TYPE security_policy_attrib_key
        parameter_name TYPE pfeparname
  CHANGING value       TYPE i.

  DATA: parameter_value TYPE pfepvalue,
        excp       TYPE REF TO cx_security_policy,
        error_text(200),
        msg_var1   TYPE symsgv,                             "SYCHAR50
        msg_var2   TYPE symsgv,
        msg_var3   TYPE symsgv,
        msg_var4   TYPE symsgv.

  IF policy_name IS NOT INITIAL.
    TRY.
        CALL METHOD cl_security_policy=>get_attribute_value
          EXPORTING
            policy    = policy_name
            attribute = attribute_key
          RECEIVING
            value     = value.
      CATCH cx_security_policy.
*       if Security Policy does not exist, use default values (same as kernel)
        TRY.
            value = cl_security_policy_attribute=>get_default_value( attribute_key ).
          CATCH cx_security_policy INTO excp.
            error_text = excp->get_text( ).
            msg_var1 = error_text(50).
            msg_var2 = error_text+50(50).
            msg_var3 = error_text+100(50).
            msg_var4 = error_text+150(50).
            MESSAGE e001(00) WITH msg_var1 msg_var2 msg_var3 msg_var4 RAISING some_error.
        ENDTRY.
    ENDTRY.
  ELSE.
    CALL 'C_SAPGPARAM'
      ID 'NAME'  FIELD parameter_name
      ID 'VALUE' FIELD parameter_value.                   "#EC CI_CCALL
    value = parameter_value.
  ENDIF.
ENDFORM.                    "get_parameter_value
