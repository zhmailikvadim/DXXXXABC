*&---------------------------------------------------------------------*
*& Include          ZFI_REGINV_C01
*&---------------------------------------------------------------------*
* История изменений
* Дата          Запрос       Комментарий
* 13/02/2017    DHVK929675   Для входящих ЭСЧФ в настоящий момент в режимах Определение кода филиала и Подбор первичных документов отображаются документы со статусом портала "COMPLETED Выставлен" Необходимо также отображать ЭСЧФ со статусом
*                            "ON_AGREEMENT На согласовании".
*                            В основном режиме из этого статуса мы также можем отправлять на подписание.
* 13/02/2017    DHVK929706    Необходимо разрешить подтверждение аннулирования из статуса "выставлен аннулирован поставщиком"
* 26/02/2019    DHVK930347    Замена даты выставления на дату операции
* 14/03/2019    DHVK931456    Установка блокировок при взаимодействии с порталом
*                             Записывать в ZFI_ESF_DATE Время запроса списка
*                             Отбрасыать существующие ЭСЧФ до получения данных
*                             Не обновлять статус в базе  если он не изменился
* 21/03/2019   DHVK931862     При загрузке Необходимо отличать ситуацию когда у нас нет документов к загрузке. При этом выдавать сообщение не об ошибке, а о том что новых документов к загрузке нет, и соответственно сохранять новое время обращения на
*                             портал
* 29/03/2019   DHVK932265     В конец таблицы к полю DT_PODPIS добавляем еще одно поле Дата аннулирования ЭСЧФ в котором будем сохранять фактическую дату аннулирования на портале.
* 25/04/2019   DHVK933945     Доработки портала
* 01/10/2019   DHVK941587     Добавление входящих фактур со статусом IN PROGRESS
* 08/03/2020   ЗИ #22723      Заполнение полей КОД ТНВЭД и номер FI
*&---------------------------------------------------------------------*
CLASS lcl_report_in DEFINITION FINAL.
  PUBLIC SECTION.
    CONSTANTS:
      gc_mode1 TYPE char5 VALUE 'MODE1',   " Основной режим
      gc_mode2 TYPE char5 VALUE 'MODE2',   " Определение кода филиала
      gc_mode3 TYPE char5 VALUE 'MODE3'.   " Подбор первичных документов

    TYPES: BEGIN OF gty_s_fi_list,   "список FI-документов
             bukrs      TYPE bseg-bukrs,
             belnr      TYPE bseg-belnr,
             gjahr      TYPE bseg-gjahr,
             sum_nonds  TYPE zei_sum_nonds,
             sum_snds	  TYPE zei_sum_snds,
             sum_nds    TYPE zei_sum_nds,
             sum_excise TYPE zei_sum_excise,
             storno     TYPE icon_d,
           END OF gty_s_fi_list,
           gty_t_ref_esf TYPE STANDARD TABLE OF REF TO zcl_fi_esf_amdp=>gty_s_esf_data,
           BEGIN OF gty_s_esf_list,   "список ЭСЧФ
             pr_esf TYPE zfi_esf-pr_esf,
             n_esf  TYPE zfi_esf-n_esf,
           END OF gty_s_esf_list,

           gty_t_esf              TYPE SORTED TABLE OF zfi_esf WITH NON-UNIQUE KEY pr_esf n_esf,
           gty_t_filtered         TYPE TABLE OF zcl_fi_esf_amdp=>gty_s_esf_data,
           gty_t_fi_auto_filtered TYPE TABLE OF zcl_fi_esf_amdp=>gty_s_fi_data.

    CLASS-METHODS:
      build_fieldcat IMPORTING iv_table TYPE ANY TABLE iv_type TYPE char5 RETURNING VALUE(rt_fcat) TYPE lvc_t_fcat,      "fieldcat
      check_authorization RETURNING VALUE(rv_error) TYPE char50,                                                         "авторизация
      get_esf_data CHANGING et_data TYPE zcl_fi_esf_amdp=>gty_t_esf_data et_roster TYPE zcl_fi_esf_amdp=>gty_t_roster et_match TYPE zcl_fi_esf_amdp=>gty_t_match_data,   "получить данные ЭСЧФ
      get_fi_data CHANGING et_data TYPE zcl_fi_esf_amdp=>gty_t_fi_data,                                                  "получить данные FI
      get_super_user RETURNING VALUE(rv_super_user) TYPE char1,                                                          "'суперпользователь'?
      get_uname IMPORTING iv_uname TYPE xubname EXPORTING ev_full_name TYPE char100,                                     "имя пользователя
      popup_to_confirm IMPORTING iv_titlebar      TYPE any iv_text_question TYPE any
                                 iv_cancel        TYPE abap_bool DEFAULT 'X'
                       RETURNING VALUE(rv_answer) TYPE char1,   "запрос подтверждение

      refresh_alv IMPORTING ir_grid TYPE REF TO cl_gui_alv_grid,
      unlock_selected_fi_doc,                                                        "обновить ALV
      run,                                                                                                               "запуск программы(Входящие)
      save_data,                                                                                                         "сохранить данные
      show_1_n_grid CHANGING et_data TYPE ANY TABLE,                                                                     "1->N документы
      show_data,                                                                                                         "вывод в ALV
      show_grid_1007.                                                                                                    "вывод детализации в ALV

    CLASS-DATA:
      gt_esf_data              TYPE zcl_fi_esf_amdp=>gty_t_esf_data,
*      gt_esf_data_old          TYPE TABLE OF zcl_fi_esf_amdp=>gty_s_esf_data,
      gt_esf_data_filtered     TYPE zcl_fi_esf_amdp=>gty_t_esf_data,
      gt_esf_roster            TYPE zcl_fi_esf_amdp=>gty_t_roster,
      gt_esf_roster_detail     TYPE zcl_fi_esf_amdp=>gty_t_roster,
      gt_fi_data               TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
*      gt_fi_data_old           TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      gt_fi_data_filtered      TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      gt_fi_data_filtered_unp  TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      gt_fi_data_filtered_auto TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      gt_esf_match             TYPE zcl_fi_esf_amdp=>gty_t_match_data,
*      gt_esf_match_old         TYPE zcl_fi_esf_amdp=>gty_t_match_data,
      gt_bapiret               TYPE TABLE OF bapiret2,
      gt_fi_list               TYPE TABLE OF gty_s_fi_list,
      gt_esf_list              TYPE TABLE OF gty_s_esf_list,

      gv_mode                  TYPE char5 VALUE gc_mode1,
      gv_super_user            TYPE char1,
      gv_view_all_2            TYPE char1,
      gv_view_all_3            TYPE char1,
      gv_unp_filter_3          TYPE char1,
      gv_auto_mode_3           TYPE char1,
      gv_detail_sign           TYPE char20,
      gv_no_leave              TYPE char1,
      gv_esf_auto_mode         TYPE char26,
      gv_fi_auto_mode          TYPE char18,

      gr_grid_1                TYPE REF TO cl_gui_alv_grid,  "mode1/2
      gr_grid_2                TYPE REF TO cl_gui_alv_grid,  "mode3-1
      gr_grid_3                TYPE REF TO cl_gui_alv_grid,  "mode3-2
      gr_grid_1007             TYPE REF TO cl_gui_alv_grid,
      gr_grid_1008             TYPE REF TO cl_gui_alv_grid,
      gr_grid_detail           TYPE REF TO cl_gui_alv_grid,
      gr_cont_detail           TYPE REF TO cl_gui_docking_container,
      gr_splitter              TYPE REF TO cl_gui_splitter_container,
      gr_container_2           TYPE REF TO cl_gui_container,
      gr_container_3           TYPE REF TO cl_gui_container,
      gr_einv_service          TYPE REF TO zif_einvoice_service.

  PRIVATE SECTION.
    CLASS-METHODS:
      " MODE1: gr_grid_1: events: main_mode
      mode1_constructor,                    "конструктор Режим 1
      mode1_select_all
        IMPORTING ir_grid TYPE REF TO cl_gui_alv_grid OPTIONAL ,                     "выбрать все
      mode1_deselect_all,                   "не выбрать все
      mode1_download_all
        IMPORTING iv_fdate TYPE d OPTIONAL, "получить ЭСЧФ с портала с даты
      mode1_get_status,                     "получить статус
      mode1_refresh_db,                     "обновить данные из БД
      mode1_approve_null
        RETURNING VALUE(rv_ok) TYPE abap_bool,   " ок если операция проведена подтвердить аннулирование
      mode1_del_relation,                   "удалить связь
      mode1_checked_status_add,             "уcтановить статус "Проверено"
      mode1_checked_status_del,             "отменить статус "Проверено"
      mode1_signature,                      "подписать
      mode1_pack_sign
        CHANGING ct_pack TYPE gty_t_ref_esf, "подписать пакет
      mode1_get_detail,                     "вывод в Excel
      mode1_show_log,                       "LOG сообщений
      " MODE2: gr_grid_1: events: bukrs_mode
      mode2_constructor,                    "конструктор Режим 2
      mode2_select_all,                     "выбрать все
      mode2_deselect_all,                   "не выбрать все
      mode2_add_bukrs,                      "присвоить код филиала
      mode2_del_bukrs,                      "удалить код филиала
      mode2_refresh_db,                     "обновить данные из БД
      mode2_view_all,                       "просмотреть всё
      " MODE3: gr_grid_2: events: belnr_mode
      mode3_constructor,                    "конструктор Режим 3
      mode3_auto_mode,                      "режим Автоподбора Вкл/Выкл
      mode3_match_esf_and_fi,               "сопоставить ЭСЧФ и FI-документ
      mode3_view_all,                       "просмотркть всё
      mode3_unp_filter,                     "фильтр по УНП
      mode3_del_bukrs,                      "удалить код филиала
      mode3_refresh_db,                     "обновить данные из БД

      build_mode1_filter,                                            "фильтры для Основного Режима
      build_mode2_filter IMPORTING iv_mode TYPE char20,              "фильтры для Режима Филиала
      build_mode3_fi_filter,                                         "фильтры для Режима подбора перв. документов(FI)
      build_mode3_filter IMPORTING iv_mode TYPE char20,              "фильтры для Режима подбора перв. документов(ЭСЧФ)
      check_changed_esf_data RETURNING VALUE(rv_error) TYPE char1,   "проверка на измененный ЭСЧФ
      check_changed_fi_data RETURNING VALUE(rv_error) TYPE char1,    "проверка на уже присвоенные FI-документы
      check_marked_lines_esf RETURNING VALUE(rv_error) TYPE char1,   "проверка на выделенные строки
      check_reversed_fi_data RETURNING VALUE(rv_error) TYPE char1,   "проверка на сторнированные FI-документы
      clear_detail,            "очистить детализацию
      data_fi_auto_clearing,   "таблица для автосопоставления
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*      data_fi_auto_match IMPORTING is_esf_data TYPE zcl_fi_esf_amdp=>gty_s_esf_data EXPORTING et_fi_auto_filterd TYPE gty_t_fi_auto_filtered,   "автоподбор ЭСЧФ + FI
      data_fi_auto_match EXPORTING et_fi_auto_filterd TYPE gty_t_fi_auto_filtered
                         CHANGING  cs_esf_data        TYPE zcl_fi_esf_amdp=>gty_s_esf_data ,   "автоподбор ЭСЧФ + FI
* <-- AK_BUTVILOVS #8000001141
      data_fi_unp_clearing,   "таблица для фильтра по УНП
      data_view_all_off,      "просмотреть всё ВЫКЛ
      data_view_all_on,       "просмотреть всё ВКЛ
      dequeue_all_esf,        "деблокировать все ЭСЧФ
      dequeue_all_fi,         "деблокировать все ЭСЧФ
      enqueue_all_esf
        IMPORTING ir_grid TYPE REF TO cl_gui_alv_grid OPTIONAL,        "блокировать все ЭСЧФ
      enqueue_all_fi,         "блокировать все FI
      enqueue_data_1 IMPORTING it_good_cells TYPE lvc_t_modi,   "блокировка ЭСЧФ
      enqueue_data_3 IMPORTING it_good_cells TYPE lvc_t_modi,   "блокировка FI
      fill_ucomm_range,                                "список режимов для которых надо проверять, не изменились ли данные, а также сохранять и обновлять
      filtered_to_main IMPORTING iv_mode TYPE char1,   "Отфильтрованные записи в главную таблицу ( 1-ESF, 2-FI, 3-ALL )
      match_esf_and_fi_auto_mode,     "сопоставить ЭСЧФ + FI: авто режим
      match_esf_and_fi_manual_mode,   "сопоставить ЭСЧФ + FI: ручной режим
      move_corr_detail IMPORTING is_data TYPE zcl_fi_esf_amdp=>gty_s_esf_data,   "перенос детализации в закладки
      refresh_data IMPORTING iv_question TYPE char1,                             "обновить данные из БД

      " gr_grid_1/2 handler
      on_user_command_1 FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm sender,
      on_hotspot_1 FOR EVENT hotspot_click OF cl_gui_alv_grid IMPORTING e_row_id e_column_id es_row_no,
      on_double_click_1 FOR EVENT double_click OF cl_gui_alv_grid IMPORTING e_row e_column es_row_no,
      toolbar_buttons_1 FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive,
      menu_bt_handle_1 FOR EVENT menu_button OF cl_gui_alv_grid IMPORTING e_object e_ucomm,
      data_changed_finished_1 FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells,

      " gr_grid_3 handler
      on_user_command_3 FOR EVENT user_command OF cl_gui_alv_grid IMPORTING e_ucomm,
      on_hotspot_3 FOR EVENT hotspot_click OF cl_gui_alv_grid IMPORTING e_row_id e_column_id es_row_no,
      on_double_click_3 FOR EVENT double_click OF cl_gui_alv_grid IMPORTING e_row e_column es_row_no,
      toolbar_buttons_3 FOR EVENT toolbar OF cl_gui_alv_grid IMPORTING e_object e_interactive,
      data_changed_finished_3 FOR EVENT data_changed_finished OF cl_gui_alv_grid IMPORTING e_modified et_good_cells,

      " gr_grid_detail handler
      on_hotspot_detail FOR EVENT hotspot_click OF cl_gui_alv_grid IMPORTING e_row_id e_column_id es_row_no.
ENDCLASS.

CLASS lcl_report_in IMPLEMENTATION.
  METHOD unlock_selected_fi_doc.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      CALL FUNCTION 'DEQUEUE_EFBKPF'
        EXPORTING
          mode_bkpf = 'E'
          mandt     = sy-mandt
          bukrs     = <ls_fi_data>-bukrs
          belnr     = <ls_fi_data>-belnr
          gjahr     = <ls_fi_data>-gjahr.
    ENDLOOP.

  ENDMETHOD.

  METHOD check_authorization.
    SELECT bukrs
      FROM t001
      INTO TABLE @DATA(lt_bukrs)
     WHERE bukrs IN @so_bukrs.

    LOOP AT lt_bukrs ASSIGNING FIELD-SYMBOL(<ls_bukrs>).
      AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
             ID 'ACTVT' FIELD '03'
             ID 'BUKRS' FIELD <ls_bukrs>-bukrs.
      IF sy-subrc <> 0.
        CONCATENATE 'Нет прав на БЕ' <ls_bukrs>-bukrs INTO rv_error SEPARATED BY space.
        RETURN.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD run.
    DATA(lv_error) = check_authorization( ).
    IF NOT lv_error IS INITIAL.
      MESSAGE lv_error TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    get_esf_data( CHANGING et_data = gt_esf_data et_roster = gt_esf_roster et_match = gt_esf_match ).
    IF gt_esf_data_filtered IS INITIAL.
      build_mode1_filter( ).
    ENDIF.
    get_fi_data( CHANGING et_data = gt_fi_data ).
    IF gt_fi_data_filtered IS INITIAL.
      build_mode3_fi_filter( ).
    ENDIF.

    gv_super_user = get_super_user( ).

    gr_einv_service = zcl_einvoice_service_factory=>get_instance( ).
    TRY.
        gr_einv_service->login( ).
      CATCH zcx_einvoice_service INTO DATA(lr_err).
        DATA(ls_return) = lr_err->to_bapiret2( ).
        APPEND ls_return TO gt_bapiret.
    ENDTRY.

    fill_ucomm_range( ).

    CALL SCREEN 1001.
  ENDMETHOD.

  METHOD get_super_user.
*    AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
*         ID 'ACTVT' FIELD '16'.
    IF sy-subrc = 0.
      rv_super_user = abap_true.
    ELSE.
      rv_super_user = abap_false.
    ENDIF.
*    rv_super_user = abap_true.   " TEST ONLY DEL TODO DEL
  ENDMETHOD.

  METHOD get_esf_data.
    DATA:
      lr_bukrs        TYPE RANGE OF t001-bukrs,
      lr_n_esf        TYPE RANGE OF zfi_esf-n_esf,
      lr_dt_vs_esf    TYPE RANGE OF zfi_esf-dt_vs_esf,
      lr_status       TYPE RANGE OF zfi_esf-id_stat_esf_v,
      lv_sql_cond     TYPE string,
      lv_sql_cond_tmp TYPE string,
      lv_code_tov_ved TYPE zei_code_tov_ved,
      lv_cnt          TYPE i,
      lv_bukrs        TYPE bukrs,
      lv_ebeln        TYPE ebeln,
      lv_ebelp        TYPE ebelp,
      lv_matnr        TYPE matnr.

    FIELD-SYMBOLS:
      <ls_esf_data>    TYPE zcl_fi_esf_amdp=>gty_s_esf_data,
      <ls_roster_data> TYPE zcl_fi_esf_amdp=>gty_s_esf_roster.

    FREE: gt_esf_data, gt_esf_roster.

    " формирование параметров выборки
    CASE 'X'.
      WHEN p_mode1. " Исходящие
        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nri_o[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dti_o[] ) )  "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dti_o[] ) )  "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = lv_sql_cond_tmp && ` AND ID_TYPE_ESF = 'ORIGINAL' `.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          lv_sql_cond = lv_sql_cond_tmp.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nrc_o[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dtc_o[] ) )    "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dtc_o[] ) )    "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = lv_sql_cond_tmp && ` AND ID_TYPE_ESF = 'FIXED' `.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = lv_sql_cond && ` OR ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nra_o[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dta_o[] ) )       "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dta_o[] ) )       "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = |{ lv_sql_cond_tmp } AND ID_TYPE_ESF = '{ lcl_report=>gc_esf_ty_additional }' |.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = lv_sql_cond && ` OR ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'ID_STAT_ESF_V' dref = REF #( so_st_o[] ) ) ) ).

        IF NOT lv_sql_cond_tmp IS INITIAL.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = `( ` && lv_sql_cond && ` )` && ` AND ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        IF lcl_report_out=>gv_mode = lcl_report_out=>gc_mode4.
          lv_sql_cond_tmp = | ID_STAT_ESF_P = '{ lcl_report=>gc_stat_p_completed }' OR ID_STAT_ESF_P = '{ lcl_report=>gc_stat_p_completed_signed }' |.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.

          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = `( ` && lv_sql_cond && ` )` && ` AND ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.
        " end #8000000074 AK_BUTVILOVSK
      WHEN p_mode2. " Входящие
*        SELECT 'I' AS sign, 'EQ' AS option, '90' && bukrs AS low
*          FROM t001
*          INTO TABLE @lr_bukrs
*         WHERE bukrs IN @so_bukrs.
*        IF sy-subrc = 0.
*          APPEND VALUE #( sign = 'I' option = 'EQ' low = ' ' ) TO lr_bukrs.
*          lv_sql_cond = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'CODE_POKUP_FIL' dref = REF #( lr_bukrs[] ) )
*                                                                                   ) ).
*        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nri_i[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dti_i[] ) )  "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dti_i[] ) )  "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = lv_sql_cond_tmp && ` AND ID_TYPE_ESF = 'ORIGINAL' `.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = lv_sql_cond && ` OR ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nrc_i[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dtc_i[] ) )  "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dtc_i[] ) )  "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = lv_sql_cond_tmp && ` AND ID_TYPE_ESF = 'FIXED' `.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = lv_sql_cond && ` OR ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'N_ESF' dref = REF #( so_nra_i[] ) )
                                                                                      "( name = 'DT_VS_ESF' dref = REF #( so_dta_i[] ) ) "{ change DHVK930347
                                                                                       ( name = 'DT_OP_ESF' dref = REF #( so_dta_i[] ) ) "} change DHVK930347
                                                                                     ) ).
        IF NOT lv_sql_cond_tmp IS INITIAL.
          lv_sql_cond_tmp = |{ lv_sql_cond_tmp } AND ID_TYPE_ESF = '{ lcl_report=>gc_esf_ty_additional }' |.
          lv_sql_cond_tmp = `( ` && lv_sql_cond_tmp && ` )`.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = lv_sql_cond && ` OR ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.

        lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'ID_STAT_ESF_V' dref = REF #( so_st_i[] ) ) ) ).

        IF NOT lv_sql_cond_tmp IS INITIAL.
          IF lv_sql_cond IS INITIAL.
            lv_sql_cond = lv_sql_cond_tmp.
          ELSE.
            lv_sql_cond = `( ` && lv_sql_cond && ` )` && ` AND ` && lv_sql_cond_tmp.
          ENDIF.
        ENDIF.
    ENDCASE.

    SELECT bukrs
      FROM t001
      INTO TABLE @DATA(lt_bukrs)
     WHERE bukrs IN @so_bukrs.

    lv_sql_cond_tmp = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'UNP_POST'  dref = REF #( so_unps[] ) )
                                                                                   ( name = 'UNP_POKUP' dref = REF #( so_unpc[] ) )
                                                                                   ( name = 'WAERS'     dref = REF #( so_waers[] ) )
                                                                                   ( name = 'LAST_USER' dref = REF #( so_uname[] ) )
                                                                                   ( name = 'DT_OP_ESF' dref = REF #( so_opdat[] ) )  "ins DHVK930347
                                                                                 ) ).

    IF NOT lv_sql_cond_tmp IS INITIAL.
      IF lv_sql_cond IS INITIAL.
        lv_sql_cond = lv_sql_cond_tmp.
      ELSE.
        lv_sql_cond = `( ` && lv_sql_cond && ` )` && ` AND ` && lv_sql_cond_tmp.
      ENDIF.
    ENDIF.

    TRY.
        zcl_fi_esf_amdp=>get_data_esf( EXPORTING iv_pr_esf   = COND #( WHEN p_mode1 = abap_true THEN lcl_report=>gc_out_inv ELSE lcl_report=>gc_in_inv )
                                                 iv_cond     = lv_sql_cond
                                       IMPORTING et_esf_data = et_data
                                                 et_roster   = et_roster
                                                 et_match    = et_match ).
      CATCH  cx_root INTO DATA(lr_error).
        MESSAGE i000(zfi_ei) WITH 'Ошибка вызова метода'(m13) ' ZCL_FI_ESF_AMDP=>GET_DATA_ESF'.
        RETURN.
    ENDTRY.
    "-- унести в АМДП TODO
    IF p_mode1 = abap_true.
      DELETE et_data WHERE NOT n_esf+17(2) IN so_bukrs.
    ENDIF.

    IF p_mode2 = abap_true. " 8000000427
      SORT et_data BY pr_esf n_esf.
      DELETE ADJACENT DUPLICATES FROM et_data COMPARING ALL FIELDS.
    ENDIF.

    SORT et_match BY pr_esf n_esf bukrs belnr gjahr.
  ENDMETHOD.

  METHOD get_fi_data.
    DATA:
      lt_data     TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      lv_sql_cond TYPE string.

    CLEAR: gt_fi_data, gt_fi_data_filtered.

    " формирование параметров выборки
    lv_sql_cond = cl_shdb_seltab=>combine_seltabs(
      it_named_seltabs = VALUE #( ( name = 'BUKRS' dref = REF #( so_bukrs[] ) )
                                  ( name = 'BUDAT' dref = REF #( so_budat[] ) )
                                  ) ).

    TRY.
        zcl_fi_esf_amdp=>get_data_fi( EXPORTING iv_type   = COND #( WHEN p_mode1 = abap_true THEN lcl_report=>gc_out_inv ELSE lcl_report=>gc_in_inv )
                                                iv_storno = p_storno
                                                iv_cond   = lv_sql_cond
                                      IMPORTING et_fi_data = et_data ).
      CATCH  cx_root INTO DATA(lr_error).
        MESSAGE i001(zfi) WITH 'Ошибка вызова метода'(m13) 'ZCL_FI_ESF_AMDP=>GET_DATA_FI'.
        RETURN.
    ENDTRY.

*--> ak_ksenevich 25198 zfi_reginv номер электронной накладной
    LOOP AT et_data ASSIGNING FIELD-SYMBOL(<fs_et_data>).
      SELECT SINGLE awkey FROM bkpf INTO @DATA(lv_awkey)
        WHERE bukrs = @<fs_et_data>-bukrs
          AND belnr = @<fs_et_data>-belnr
          AND gjahr = @<fs_et_data>-gjahr
          AND awtyp = 'RMRP'.
      IF lv_awkey IS INITIAL.
        CONTINUE.
      ENDIF.
      SELECT SINGLE lfbnr, lfgja FROM ekbe INTO @DATA(ls_ekbe)
        WHERE gjahr = @lv_awkey+10(4)
          AND belnr = @lv_awkey(10)
          AND buzei = '0001'.
      IF sy-subrc = 0.
        SELECT SINGLE zznum_etsd FROM mkpf INTO @DATA(lv_zznum_etsd)
          WHERE mblnr = @ls_ekbe-lfbnr
            AND mjahr = @ls_ekbe-lfgja.
        IF sy-subrc = 0 AND NOT lv_zznum_etsd IS INITIAL.
          <fs_et_data>-xblnr = lv_zznum_etsd.
        ENDIF.
      ENDIF.
      CLEAR: lv_awkey, ls_ekbe, lv_zznum_etsd.
    ENDLOOP.
*<-- ak_ksenevich 25198 zfi_reginv номер электронной накладной

    SORT et_data BY bukrs belnr gjahr mwskz.
  ENDMETHOD.

  METHOD show_data.
    DATA:
      ls_layout  TYPE lvc_s_layo,
      ls_variant TYPE disvariant.

    ls_variant-report = sy-repid.
    ls_variant-handle(1)   = COND #( WHEN p_mode1 IS NOT INITIAL THEN 'A' ELSE 'B' ).
    ls_variant-handle+1(1) = 'B'.
    ls_variant-handle+2(1) = lcl_report_in=>gv_mode+4(1).

    CASE sy-dynnr.
      WHEN 1001.  "1/2 режимы
        ls_variant-handle+3(1) = 'G'.
        IF NOT gr_grid_1 IS BOUND.
          gr_grid_1 = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'ALV_1001' ) ).
          DATA(lt_fcat_alv1) = build_fieldcat( iv_table = gt_esf_data iv_type = 'ESF_I' ).

          gr_grid_1->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
          gr_grid_1->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

          gr_grid_1->set_table_for_first_display(
              EXPORTING is_layout            = VALUE #( cwidth_opt = abap_true zebra = abap_true info_fname = 'COLOR'  no_rowmark = abap_true )
                        i_save               = 'A'
                        i_default            = 'X'
                        is_variant           = ls_variant
          CHANGING  it_outtab            = gt_esf_data_filtered
                    it_fieldcatalog      = lt_fcat_alv1 ).

          SET HANDLER on_user_command_1
                      on_hotspot_1
                      on_double_click_1
                      toolbar_buttons_1
                      menu_bt_handle_1
                      data_changed_finished_1
                  FOR gr_grid_1.
          gr_grid_1->set_toolbar_interactive( ).
        ELSE.
          refresh_alv( gr_grid_1 ).
        ENDIF.

        show_grid_1007( ).
      WHEN 1011.  "3 режим
        gr_splitter = NEW #( parent = NEW cl_gui_custom_container( container_name = 'ALV_1011' ) rows = 2 columns = 1 ).
        gr_splitter->set_row_height( id = 1 height = 50 ).
        gr_splitter->set_row_height( id = 2 height = 50 ).

        IF NOT gr_grid_2 IS BOUND.
          ls_variant-handle+3(1) = 'H'.
          gr_container_2 = gr_splitter->get_container( row = 1 column = 1 ).
          gr_grid_2 = NEW #( i_parent = gr_container_2 ).
          DATA(lt_fcat_alv2) = build_fieldcat( iv_table = gt_esf_data iv_type = 'ESF_I' ).

          gr_grid_2->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
          gr_grid_2->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

          gr_grid_2->set_table_for_first_display(
              EXPORTING is_layout            = VALUE #( cwidth_opt = abap_true zebra = abap_true no_rowmark = abap_true )
                        i_save               = 'A'
                        is_variant           = ls_variant
              CHANGING  it_outtab            = gt_esf_data_filtered
                        it_fieldcatalog      = lt_fcat_alv2 ).

          SET HANDLER on_user_command_1
                      on_hotspot_1
                      on_double_click_1
                      toolbar_buttons_1
                      menu_bt_handle_1
                      data_changed_finished_1
                  FOR gr_grid_2.
          gr_grid_2->set_toolbar_interactive( ).
        ELSE.
          refresh_alv( gr_grid_2 ).
        ENDIF.

        IF NOT gr_grid_3 IS BOUND.
          ls_variant-handle+3 = 'I'.
          gr_container_3 = gr_splitter->get_container( row = 2 column = 1 ).
          gr_grid_3 = NEW #( i_parent = gr_container_3 ).
          DATA(lt_fcat_alv3) = build_fieldcat( iv_table = gt_fi_data iv_type = 'FI_I' ).

          gr_grid_3->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_enter ).
          gr_grid_3->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

          gr_grid_3->set_table_for_first_display(
              EXPORTING is_layout            = VALUE #( cwidth_opt = abap_true zebra = abap_true no_rowmark = abap_true )
                        i_save               = 'A'
                        is_variant           = ls_variant
              CHANGING  it_outtab            = gt_fi_data_filtered
                        it_fieldcatalog      = lt_fcat_alv3 ).

          SET HANDLER on_user_command_3
                      on_hotspot_3
                      toolbar_buttons_3
                      data_changed_finished_3
                  FOR gr_grid_3.
          gr_grid_3->set_toolbar_interactive( ).
        ELSE.
          refresh_alv( gr_grid_3 ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD build_fieldcat.
    rt_fcat = CORRESPONDING #( cl_salv_data_descr=>read_structdescr(
      CAST #( CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data( iv_table ) )->get_table_line_type( ) )
      )
    ).

    CASE iv_type.
      WHEN 'ESF_I' OR 'ESF_O'.
        LOOP AT rt_fcat ASSIGNING FIELD-SYMBOL(<ls_fcat>).
          <ls_fcat>-ref_table = 'ZFI_ESF'.
          <ls_fcat>-ref_field = <ls_fcat>-fieldname.

          IF ( NOT ( <ls_fcat>-fieldname = 'CHK_BOX' OR
                   <ls_fcat>-fieldname = 'ID_STAT_ESF_P' OR
                   <ls_fcat>-fieldname = 'ID_STAT_ESF_V' OR
                   <ls_fcat>-fieldname = 'LAST_USER' OR
                   <ls_fcat>-fieldname = 'AEDAT' OR
                   <ls_fcat>-fieldname = 'N_ESF' OR
                   <ls_fcat>-fieldname = 'ID_TYPE_ESF' OR
                   <ls_fcat>-fieldname = 'N_ESF_ISH' OR
                   <ls_fcat>-fieldname = 'DT_OP_ESF' OR
                   <ls_fcat>-fieldname = 'DT_VS_ESF' OR
                   <ls_fcat>-fieldname = 'BELNR' OR
                   <ls_fcat>-fieldname = 'N_DOG' OR
                   <ls_fcat>-fieldname = 'CODE_POKUP_FIL' OR
                   <ls_fcat>-fieldname = 'DT_DOG' OR
                   <ls_fcat>-fieldname = 'N_TP_BLANK' OR
                   <ls_fcat>-fieldname = 'SUM_SNDS' OR
                   <ls_fcat>-fieldname = 'SUM_NDS' OR
                   <ls_fcat>-fieldname = 'ID_VID_IOP_NAME' OR
                   <ls_fcat>-fieldname  = 'CRDAT' OR
                   <ls_fcat>-fieldname  = 'CREAT_USER' OR
                   <ls_fcat>-fieldname  = 'CANCELED' OR
                   <ls_fcat>-fieldname  = 'DEDUCT' OR
                   <ls_fcat>-fieldname  = 'DOP_FLG' OR
                   <ls_fcat>-fieldname  = 'CORR' OR
                   ( ( <ls_fcat>-fieldname = 'UNP_POSP' OR
                       <ls_fcat>-fieldname = 'NM_POSP' OR
                       <ls_fcat>-fieldname = 'UNP_POST' OR
                       <ls_fcat>-fieldname = 'SUM_EXCISE' OR
                       <ls_fcat>-fieldname = 'SUM_SNDS_BELNR' OR
                       <ls_fcat>-fieldname = 'SUM_NDS_BELNR' OR
                       <ls_fcat>-fieldname = 'SUM_EXCISE_BELNR' )
                       AND iv_type = 'ESF_I' ) OR
                   ( ( <ls_fcat>-fieldname = 'UNP_POKUP' OR
                       <ls_fcat>-fieldname = 'NM_POKUP' OR
                       <ls_fcat>-fieldname = 'UNP_POST' OR
                       <ls_fcat>-fieldname = 'NM_POST' OR
                       <ls_fcat>-fieldname = 'CODE_POST_FIL' OR
                       <ls_fcat>-fieldname = 'BELNR_R' OR
                       <ls_fcat>-fieldname = 'SUM_EXCISE' OR
                       <ls_fcat>-fieldname = 'ERR' OR
                       <ls_fcat>-fieldname = 'UNBIND' " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
            )
                     AND iv_type = 'ESF_O' ) )
            OR ( <ls_fcat>-fieldname  = 'CORR' AND ( p_mode1 = abap_true OR lcl_report_in=>gv_mode = 'MODE3' ) ) )
            AND lcl_report_out=>gv_mode <> lcl_report_out=>gc_mode4.    " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ

            <ls_fcat>-no_out = abap_true.
            CONTINUE.
          ENDIF.

*--> #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
          IF    lcl_report_out=>gv_mode = lcl_report_out=>gc_mode4
            AND NOT ( <ls_fcat>-fieldname = 'CHK_BOX'               " Выбор
                   OR <ls_fcat>-fieldname = 'ID_VID_IOP_NAME'       " Вид операции
                   OR <ls_fcat>-fieldname = 'N_ESF'                 " Номер ЭСЧФ
                   OR <ls_fcat>-fieldname = 'DT_OP_ESF'             " Дата совершения операции ЭСЧФ
                   OR <ls_fcat>-fieldname = 'DT_VS_ESF'             " Дата выставления ЭСЧФ
                   OR <ls_fcat>-fieldname = 'SUM_SNDS'              " Всего по счету. Стоимость товаров с НДС
                   OR <ls_fcat>-fieldname = 'SUM_NDS'               " Всего по счету. Сумма НДС
                   OR <ls_fcat>-fieldname = 'SUM_EXCISE'            " Сумма акциза
                   OR <ls_fcat>-fieldname = 'UNP_POKUP'             " УНП Получателя
                   OR <ls_fcat>-fieldname = 'NM_POKUP'              " Получатель
                   OR <ls_fcat>-fieldname = 'ID_STAT_ESF_P'         " Статус ЭСЧФ(Портал)
                   OR <ls_fcat>-fieldname = 'ID_STAT_ESF_V'         " Статус ЭСЧФ(Внутренний)
                   OR <ls_fcat>-fieldname = 'N_DOG'                 " Договор (контракт) на поставку товара
                   OR <ls_fcat>-fieldname = 'DT_DOG'                " Дата договора (контракта)
                   OR <ls_fcat>-fieldname = 'ID_VID_DOC'            " Вид документа
                   OR <ls_fcat>-fieldname = 'NM_VID_DOC'            " Название
                   OR <ls_fcat>-fieldname = 'DT_DOC'                " Дата
                   OR <ls_fcat>-fieldname = 'N_TP_BLANK_02'         " Номер
                   OR <ls_fcat>-fieldname = 'SER_TP_BLANK_02'       " Серия
                   OR <ls_fcat>-fieldname = 'CODE_TP_BLANK_02'      " Код типа бланка
                   OR <ls_fcat>-fieldname = 'ID_TYPE_ESF'           " Тип ЭСЧФ(Справочник)
                   OR <ls_fcat>-fieldname = 'N_ESF_ISH'             " К ЭСЧФ
                   OR <ls_fcat>-fieldname = 'BELNR'                 " № документа
                   OR <ls_fcat>-fieldname = 'BELNR_R'               " Ссылочный документ
                   OR <ls_fcat>-fieldname = 'BUKRS'                 " БЕ
                   OR <ls_fcat>-fieldname = 'GJAHR'                 " Финансовый год
                   OR <ls_fcat>-fieldname = 'CRDATE'                " Дата создания
                   OR <ls_fcat>-fieldname = 'CREAT_USER'            " Создавший
                   OR <ls_fcat>-fieldname = 'LAST_USER'             " Последний изменил
                   OR <ls_fcat>-fieldname = 'AEDAT'                 " Дата изменения
                   OR <ls_fcat>-fieldname = 'DOP_FLG'               " Доп данные
                   OR <ls_fcat>-fieldname = 'UNBIND' ).             " Статус привязки бух дока
            <ls_fcat>-tech = abap_true.
            CONTINUE.
          ENDIF.
*<-- end #8000000074 AK_BUTVILOVSK

          CASE <ls_fcat>-fieldname.
            WHEN 'MANDT'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'CHK_BOX'.
              CLEAR: <ls_fcat>-ref_table, <ls_fcat>-ref_field.
              <ls_fcat>-checkbox = abap_true.
              <ls_fcat>-edit = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Выбор'(f03).
              <ls_fcat>-fix_column = abap_true.
            WHEN 'ID_VID_IOP_NAME'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Вид операции'(f28).
              <ls_fcat>-lowercase = abap_true.
              DATA(ls_fcat1) = <ls_fcat>.
              DELETE rt_fcat INDEX sy-tabix.
              CONTINUE.
            WHEN 'PR_ESF'.
              <ls_fcat>-convexit = 'ZPESF'.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'BELNR_R'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Ссылочный документ'(f34).
              DATA(ls_fcat2) = <ls_fcat>.
              DELETE rt_fcat INDEX sy-tabix.
              CONTINUE.
            WHEN 'BUKRS_R'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'СсылочнБЕ'(f35).
            WHEN 'N_ESF'.
              <ls_fcat>-hotspot = abap_true.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'ID_STAT_ESF_P'.
              <ls_fcat>-convexit = 'ZSTAP'.
              <ls_fcat>-lowercase = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Статус ЭСЧФ(Портал)'(f05).
            WHEN 'ID_STAT_ESF_V'.
              <ls_fcat>-convexit = 'ZSTAV'.
              <ls_fcat>-lowercase = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Статус ЭСЧФ(Внутренний)'(f06).
            WHEN 'LAST_USER'.
              <ls_fcat>-convexit = 'ZUNAM'.
              <ls_fcat>-lowercase = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Последний изменил'(f04).
            WHEN 'ID_TYPE_ESF'.
              <ls_fcat>-convexit = 'ZESFT'.
            WHEN 'PR_SENDTORECIPIENT' OR 'PR_VZML_POST' OR 'PR_RESOFZ_POST' OR 'PR_SDPER_POST'
              OR 'PR_BIGCOMP_POST' OR 'PR_VZML_POKUP' OR 'PR_RESOFZ_POKUP' OR 'PR_SDPER_POKUP'
              OR 'PR_BIGCOMP_POKUP'.
              <ls_fcat>-convexit = 'XFELD'.
            WHEN 'ID_STAT_POST'.
              <ls_fcat>-convexit = 'ZSTPS'.
            WHEN 'COUNTRYCODE_POST' OR 'COUNTRYCODE_POKUP'.
              <ls_fcat>-convexit = 'ZCNTR'.
            WHEN 'UNP_POST'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'УНП Поставщика'(f07).
            WHEN 'CODE_POST_FIL'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'КодФилиала Поставщика'(f29).
            WHEN 'NM_POST'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Поставщик'(f30).
            WHEN 'UNP_POKUP'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'УНП Получателя'(f31).
            WHEN 'CODE_POKUP_FIL'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'КодФилиала Получателя'(f32).
            WHEN 'NM_POKUP'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Получатель'(f33).
            WHEN 'ID_STAT_POKUP'.
              <ls_fcat>-convexit = 'ZSTPL'.
            WHEN 'WAERS'.
              <ls_fcat>-no_out = abap_true.
              <ls_fcat>-convexit = 'ZWAER'.
            WHEN 'SUM_NONDS'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Стоим.тов.(раб,усл)без НДС'(f10).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_EXCISE'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма акциза'(f11).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_NDS'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма НДС'(f12).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_SNDS'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Стоим.тов.(раб,усл)с НДС'(f13).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_EXCISE_BELNR'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма акциза(док)'(f23).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_NDS_BELNR'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма НДС(док)'(f24).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'SUM_SNDS_BELNR'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Стоим.тов.(раб,усл)с НДС(док)'(f25).
              <ls_fcat>-cfieldname  = 'WAERS'.
            WHEN 'CREAT_USER' .
              <ls_fcat>-convexit = 'ZUNAM'.
              <ls_fcat>-coltext = <ls_fcat>-seltext =
              SWITCH #(  iv_type WHEN 'ESF_O' THEN TEXT-f35
                               WHEN 'ESF_I' THEN TEXT-f36 ).
            WHEN 'CRDATE' .
              <ls_fcat>-coltext = <ls_fcat>-seltext =
              SWITCH #(  iv_type WHEN 'ESF_O' THEN TEXT-f37
                               WHEN 'ESF_I' THEN TEXT-f38 ).
            WHEN 'CANCELED' .
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f40.
              <ls_fcat>-icon = abap_true.
            WHEN 'DEDUCT' .
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f41.
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-col_pos = 2.
              <ls_fcat>-hotspot = abap_true.
            WHEN 'CORR' .
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f39.
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-col_pos = 3.
              <ls_fcat>-hotspot = abap_true.
              " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
            WHEN 'UNBIND'.
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f43.
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-col_pos = 3.
            WHEN 'ERR' .
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f42.
              <ls_fcat>-coltext = <ls_fcat>-seltext = TEXT-f42.
            WHEN 'DOP_FLG'.
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-scrtext_l =
              <ls_fcat>-scrtext_m =
              <ls_fcat>-scrtext_s =
              <ls_fcat>-coltext =
              <ls_fcat>-seltext = TEXT-f47.
          ENDCASE.
        ENDLOOP.

        INSERT ls_fcat1 INTO rt_fcat INDEX 8.

        READ TABLE rt_fcat ASSIGNING <ls_fcat> WITH KEY fieldname = 'DT_VS_ESF'.
        IF sy-subrc = 0.
          INSERT ls_fcat2 INTO rt_fcat INDEX sy-tabix.
        ENDIF.
      WHEN 'FI_I' OR 'FI_O'.
        LOOP AT rt_fcat ASSIGNING <ls_fcat>.
          CASE <ls_fcat>-fieldname.
            WHEN 'STORNO'.
              <ls_fcat>-coltext = TEXT-f40. <ls_fcat>-icon = abap_true.
            WHEN 'CORR'.
              <ls_fcat>-no_out = SWITCH #( iv_type  WHEN 'FI_I' THEN abap_true ELSE abap_false ).
              <ls_fcat>-seltext =  <ls_fcat>-coltext = TEXT-f39.
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-hotspot = abap_true.
              <ls_fcat>-col_pos = 1.
            WHEN 'MANDT' OR 'SHKZG' OR 'DEL_FLG'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'WAERS' OR 'USNAM'.
              DELETE rt_fcat INDEX sy-tabix.
              CONTINUE.
            WHEN 'LIFNR' OR 'BKTXT' OR 'NMTXT' OR 'GJTXT' OR 'AWTYP' OR 'VBELN' OR 'MBLNR' OR 'LED' OR 'EXCISE'.
              IF iv_type = 'FI_I'.
                CASE <ls_fcat>-fieldname.
                  WHEN 'VBELN' OR 'MBLNR' OR 'LED'.
                    DELETE rt_fcat INDEX sy-tabix.
                    CONTINUE.
                ENDCASE.
                <ls_fcat>-no_out = abap_true.
              ELSE.
                IF <ls_fcat>-fieldname = 'LIFNR'.
                  <ls_fcat>-scrtext_l = 'Контрагент'(f27).
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'Контрагент'(f27).
                ENDIF.
                IF <ls_fcat>-fieldname = 'BKTXT'.
                  <ls_fcat>-no_out = abap_true.
                ENDIF.
                IF <ls_fcat>-fieldname = 'NMTXT'.
                  <ls_fcat>-scrtext_l = 'СсылДок'(f14).
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'Ссылочный Документ'(f15).
                ENDIF.
                IF <ls_fcat>-fieldname = 'GJTXT'.
                  <ls_fcat>-scrtext_l = 'ГодCcДок'(f16).
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'Год Ccылочного Документа'(f17).
                ENDIF.
                IF <ls_fcat>-fieldname = 'AWTYP'.
                  <ls_fcat>-no_out = abap_true.
                ENDIF.
                IF <ls_fcat>-fieldname = 'VBELN'.
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'SD фактура'(f18).
                ENDIF.
                IF <ls_fcat>-fieldname = 'MBLNR'.
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'MM фактура'(f19).
                ENDIF.
                IF <ls_fcat>-fieldname = 'EXCISE'.
                  <ls_fcat>-scrtext_l = 'СумАкциза'(f20).
                  <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма Акциза'(f21).
                ENDIF.
                IF <ls_fcat>-fieldname = 'LED'.
                  <ls_fcat>-icon = abap_true.
                  <ls_fcat>-scrtext_l = 'КорРазд6'(f22).
                ENDIF.
              ENDIF.
            WHEN 'ID_VID_IOP'.
              IF gr_grid_1 IS BOUND.
                <ls_fcat>-no_out = abap_true.
              ELSE.
                <ls_fcat>-fix_column = abap_true.
              ENDIF.
            WHEN 'ID_VID_IOP_NAME'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Вид операции'(f28).
            WHEN 'CHK_BOX'.
              <ls_fcat>-checkbox = abap_true.
              <ls_fcat>-edit = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Выбор'(f03).
              <ls_fcat>-fix_column = abap_true.
            WHEN 'N_ESF' OR 'BUKRS' OR 'GJAHR'.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'BELNR'.
              <ls_fcat>-hotspot = abap_true.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'UNP'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'УНП'(f09).
            WHEN 'NAME1'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Наименование'(f10).
            WHEN 'MJAHR'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'AWKEY'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'TOTAL_W_VAT'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма с НДС'(f01).
              <ls_fcat>-cfieldname = 'WAERS'.
            WHEN 'TOTAL_VAT'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма НДС'(f02).
            WHEN 'MWSKZ'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Код НДС'(f26).
*--> #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
            WHEN 'N_FORMER_ESF'.
              <ls_fcat>-tech = abap_true.
* --> AK_BUTVILOVS #8000001222, ZFI_REGINV-Подбор Вывести автора докумен
            WHEN 'AUTHOR'.
              <ls_fcat>-no_out    = SWITCH #( iv_type  WHEN 'FI_I' THEN abap_true ELSE abap_false ).
              <ls_fcat>-convexit  = 'ZUNAM'.
              <ls_fcat>-lowercase = abap_true.
              <ls_fcat>-coltext   = <ls_fcat>-reptext = 'Автор'(f45).
* <-- AK_BUTVILOVS #8000001222
*<-- #8000000074 AK_BUTVILOVS
*--> AK_KSENEVICH 25198 ZFI_REGINV Номер электронной накладной
            WHEN 'XBLNR'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = <ls_fcat>-tooltip = 'Ссылка'(f46).
*            WHEN 'AWKEY'.
*              <ls_fcat>-tech = abap_true.
*<-- AK_KSENEVICH 25198 ZFI_REGINV Номер электронной накладной
          ENDCASE.
        ENDLOOP.
      WHEN '1007'.
        LOOP AT rt_fcat ASSIGNING <ls_fcat>.
          <ls_fcat>-col_pos = sy-tabix.
          <ls_fcat>-ref_table = 'ZFI_ESF_ROSTER'.
          <ls_fcat>-ref_field = <ls_fcat>-fieldname.

          IF  <ls_fcat>-fieldname = 'PR_ESF' OR
            <ls_fcat>-fieldname = 'DEL_FLG' OR
            <ls_fcat>-fieldname = 'N_ESF'.
            <ls_fcat>-no_out = abap_true.
          ENDIF.

          IF p_mode1 = abap_true AND lcl_report=>gv_lock_error IS INITIAL.
            <ls_fcat>-edit = abap_true.
          ENDIF.

          CASE <ls_fcat>-fieldname.
            WHEN 'MANDT'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'PR_ESF'.
              <ls_fcat>-convexit = 'ZPESF'.
            WHEN 'MEINS'.
              <ls_fcat>-f4availabl = abap_true.
              CLEAR: <ls_fcat>-ref_table, <ls_fcat>-ref_field.
            WHEN 'ED_IZM'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'KOL_TOV'.
              <ls_fcat>-qfieldname = 'MEINS'.
            WHEN 'NONDS' OR 'EXCISE' OR 'NDS' OR 'SNDS'.
              <ls_fcat>-cfieldname = 'WAERS'.
              <ls_fcat>-do_sum = abap_true.
            WHEN 'DOP_DAN'.
              <ls_fcat>-convexit = 'ZDOPD'.
              "-->30.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
              <ls_fcat>-edit = abap_false.
            WHEN 'BUTTON'.
              <ls_fcat>-edit = abap_false.
              <ls_fcat>-tabname = 'ZFI_ESF_ROSTER'.
              <ls_fcat>-hotspot =
              <ls_fcat>-icon = abap_true.
              <ls_fcat>-reptext =
              <ls_fcat>-scrtext_l =
              <ls_fcat>-scrtext_m = TEXT-f47.
              <ls_fcat>-scrtext_s = TEXT-f47.
              CLEAR: <ls_fcat>-ref_field,
                     <ls_fcat>-ref_table.
              "-->30.01.2024 D.Kruhliakou #35697
            WHEN 'WAERS'.
              <ls_fcat>-no_out = abap_true.
            WHEN 'ID_TP_NDS'.
              <ls_fcat>-col_pos = sy-tabix - 2.           "изменение места колонки 'ID_TP_NDS'               "DHVK932265
          ENDCASE.
        ENDLOOP.
      WHEN '1008'.
        LOOP AT rt_fcat ASSIGNING <ls_fcat>.
          <ls_fcat>-ref_table = 'ZFI_ESF_DEDUCT'.
          <ls_fcat>-ref_field = <ls_fcat>-fieldname.
          IF  <ls_fcat>-fieldname = 'PR_ESF' OR
            <ls_fcat>-fieldname = 'DEL_FLG' OR
            <ls_fcat>-fieldname = 'MANDT' OR
            <ls_fcat>-fieldname = 'N_ESF'.
            <ls_fcat>-no_out = abap_true.
          ENDIF.

          <ls_fcat>-edit = abap_true.

          CASE <ls_fcat>-fieldname.
            WHEN 'ST_NDS'.
              <ls_fcat>-f4availabl = abap_true.
              CLEAR: <ls_fcat>-ref_table, <ls_fcat>-ref_field.
            WHEN 'PR_ESF'.
              <ls_fcat>-convexit = 'ZPESF'.
            WHEN 'NONDS' OR 'EXCISE' OR 'NDS' OR 'SNDS'.
*              <ls_fcat>-cfieldname = 'WAERS'.
              <ls_fcat>-do_sum = abap_true.
          ENDCASE.
        ENDLOOP.
*--> " #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
      WHEN 'BIND'.
        LOOP AT rt_fcat ASSIGNING <ls_fcat>.

          IF    NOT ( <ls_fcat>-fieldname = 'CHK_BOX'               " Выбор
                   OR <ls_fcat>-fieldname = 'ID_VID_IOP'            " Вид операции
                   OR <ls_fcat>-fieldname = 'ID_VID_IOP_NAME'       " Вид операции
                   OR <ls_fcat>-fieldname = 'BUKRS'                 " БЕ
                   OR <ls_fcat>-fieldname = 'BELNR'                 " № документа
                   OR <ls_fcat>-fieldname = 'GJAHR'                 " Финансовый год
                   OR <ls_fcat>-fieldname = 'BLDAT'                 " Дата документа
                   OR <ls_fcat>-fieldname = 'BUDAT'                 " Дата проводки
                   OR <ls_fcat>-fieldname = 'LIFNR'                 " Контрагент
                   OR <ls_fcat>-fieldname = 'NAME1'                 " Наименование
                   OR <ls_fcat>-fieldname = 'XBLNR'                 " Ссылка
                   OR <ls_fcat>-fieldname = 'TOTAL_W_VAT'           " Сумма с НДС
                   OR <ls_fcat>-fieldname = 'TOTAL_VAT'             " Сумма НДС
                   OR <ls_fcat>-fieldname = 'EXCISE'                " Сумма Акциза
                   OR <ls_fcat>-fieldname = 'MWSKZ'                 " Код НДС
                   OR <ls_fcat>-fieldname = 'N_FORMER_ESF' ).       " Номер прежн. ЭСЧФ
            <ls_fcat>-tech = abap_true.
            CONTINUE.
          ENDIF.

          CASE <ls_fcat>-fieldname.
            WHEN 'LIFNR'.
              <ls_fcat>-scrtext_l = 'Контрагент'(f27).
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Контрагент'(f27).
            WHEN 'EXCISE'.
              <ls_fcat>-scrtext_l = 'СумАкциза'(f20).
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма Акциза'(f21).
            WHEN 'ID_VID_IOP'.
              IF gr_grid_1 IS BOUND.
                <ls_fcat>-no_out = abap_true.
              ELSE.
                <ls_fcat>-fix_column = abap_true.
              ENDIF.
            WHEN 'ID_VID_IOP_NAME'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Вид операции'(f28).
            WHEN 'CHK_BOX'.
              <ls_fcat>-checkbox = abap_true.
              <ls_fcat>-edit = abap_true.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Выбор'(f03).
              <ls_fcat>-fix_column = abap_true.
            WHEN 'N_ESF' OR 'BUKRS' OR 'GJAHR'.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'BELNR'.
              <ls_fcat>-hotspot = abap_true.
              <ls_fcat>-fix_column = abap_true.
            WHEN 'NAME1'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Наименование'(f10).
            WHEN 'TOTAL_W_VAT'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма с НДС'(f01).
              <ls_fcat>-cfieldname = 'WAERS'.
            WHEN 'TOTAL_VAT'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Сумма НДС'(f02).
            WHEN 'MWSKZ'.
              <ls_fcat>-coltext = <ls_fcat>-reptext = 'Код НДС'(f26).
            WHEN 'N_FORMER_ESF'.
              <ls_fcat>-coltext = <ls_fcat>-reptext =
              <ls_fcat>-scrtext_l = <ls_fcat>-scrtext_m = 'Номер прежн. ЭСЧФ'(f44).
          ENDCASE.
        ENDLOOP.
*<-- " #8000000074 AK_BUTVILOVS
        "--> 30.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
      WHEN '1012'.
        LOOP AT rt_fcat ASSIGNING <ls_fcat>.
          CASE <ls_fcat>-fieldname.
            WHEN 'DO_CHOOSE'.
              <ls_fcat>-checkbox = abap_true.
              <ls_fcat>-edit = abap_true. "COND #( WHEN lcl_report_out=>gv_mode = lcl_report_out=>gc_mode1 THEN abap_true ELSE abap_false ).
              <ls_fcat>-reptext =
              <ls_fcat>-scrtext_l =
              <ls_fcat>-scrtext_m =
              <ls_fcat>-scrtext_s = TEXT-f48.
          ENDCASE.
        ENDLOOP.
        "<-- 30.01.2024 D.Kruhliakou #35697
    ENDCASE.

    MODIFY rt_fcat FROM VALUE #( scrtext_s = abap_false
                                 scrtext_m = abap_false
                                 scrtext_l = abap_false ) TRANSPORTING scrtext_s scrtext_m scrtext_l
                                                          WHERE fieldname = 'CHK_BOX'.
    DELETE rt_fcat WHERE fieldname IS INITIAL
                      OR fieldname = 'DEL_FLG'
                      OR fieldname = 'COLOR'
                      OR fieldname = 'FILTERED'.
  ENDMETHOD.

  METHOD on_user_command_1.
    lcl_report=>gv_ucomm = e_ucomm.

    IF strlen( gv_mode ) = strlen( e_ucomm ) AND gv_mode+4(1) <> e_ucomm+4(1).   "смена режима
      IF e_ucomm = gc_mode3. " 1/2 -> 3   "снять блокировки
        dequeue_all_esf( ).
      ENDIF.

      IF gv_mode = gc_mode3. " 3 -> 1/2   "снять блокировки
        dequeue_all_esf( ).
        dequeue_all_fi( ).
      ENDIF.

      IF e_ucomm <> gc_mode3 AND gv_mode <> gc_mode3.  " 1/2 -> 2/1   "снять блокировки
        dequeue_all_esf( ).
      ENDIF.

      refresh_data( abap_false ).   "обновить данные
    ENDIF.

    IF e_ucomm IN lcl_report=>gr_save.   "режимы, для которых надо проверять не изменились ли данные
      IF check_changed_esf_data( ) = abap_true OR check_changed_fi_data( ) = abap_true.
        dequeue_all_esf( ).
        dequeue_all_fi( ).

        show_data( ).
        RETURN.
      ENDIF.
    ENDIF.

    CASE e_ucomm.
      WHEN 'PROC_TYPE'.
        RETURN.
      WHEN 'MODE1'.
        IF gv_mode = gc_mode1.
          RETURN.
        ENDIF.
        mode1_constructor( ).
        LEAVE TO SCREEN 1001.
      WHEN 'MODE2'.
        IF gv_mode = gc_mode2.
          RETURN.
        ENDIF.
        mode2_constructor( ).
        LEAVE TO SCREEN 1001.
      WHEN 'MODE3'.
        IF gv_mode = gc_mode3.
          RETURN.
        ENDIF.
        mode3_constructor( ).
        LEAVE TO SCREEN 1011.
        " MODE_1
      WHEN 'SEL_ALL1'.
        mode1_select_all( sender ).
      WHEN 'DESEL_ALL1'.
        mode1_deselect_all( ).
      WHEN 'MODE1_DOWNLOAD_ALL'.
        mode1_download_all( ).
      WHEN 'MODE1_DLOADAD_ALL_DATE'.
        DATA(lt_fld) = VALUE rsfob_t_sval( ( tabname = 'UCL203C' fieldname = 'ODATE') ).
        CALL FUNCTION 'POPUP_GET_VALUES'
          EXPORTING
            popup_title     = 'Загрузить фактуры с даты:'(b38)
          TABLES
            fields          = lt_fld
          EXCEPTIONS
            error_in_fields = 1
            OTHERS          = 2.
        IF sy-subrc = 0 AND lt_fld[ 1 ]-value IS NOT INITIAL.
          mode1_download_all( CONV d( lt_fld[ 1 ]-value ) ).
        ELSE.
          RETURN.
        ENDIF.

      WHEN 'MODE1_GET_STATUS'.
        mode1_get_status( ).
      WHEN 'MODE1_REFRESH_DB'.
        mode1_refresh_db( ).
      WHEN 'MODE1_APPROVE_NULL'.
        IF  mode1_approve_null( ) = abap_false.
          RETURN.
        ENDIF.
      WHEN 'MODE1_DEL_RELATION'.
        mode1_del_relation( ).
      WHEN 'MODE1_CHECKED_STATUS_ADD'.
        mode1_checked_status_add( ).   " С этого начать"
      WHEN 'MODE1_CHECKED_STATUS_DEL'.
        mode1_checked_status_del( ).
      WHEN 'MODE1_SIGNATURE'.
        mode1_signature( ).
      WHEN 'MODE1_GET_DETAIL'.
        mode1_get_detail( ).
      WHEN 'MODE1_SHOW_LOG'.
        mode1_show_log( ).
        " MODE_2
      WHEN 'MODE2_ADD_BUKRS'.
        mode2_add_bukrs( ).
      WHEN 'MODE2_DEL_BUKRS'.
        mode2_del_bukrs( ).
      WHEN 'MODE2_REFRESH_DB'.
        mode2_refresh_db( ).
      WHEN 'MODE2_VIEW_ALL'.
        mode2_view_all( ).
        " MODE_3
      WHEN 'MODE3_MATCH_ESF_AND_FI'.
        mode3_match_esf_and_fi( ).
*        gr_grid_1->check_changed_data( ).
*        gr_grid_3->check_changed_data( ).
      WHEN 'MODE3_DEL_RELATION'.
        mode1_del_relation( ).
      WHEN 'MODE3_AUTO_MODE'.
        mode3_auto_mode( ).
      WHEN 'MODE3_VIEW_ALL'.
        mode3_view_all( ).
      WHEN 'MODE3_UNP_FILTER'.
        mode3_unp_filter( ).
      WHEN 'MODE3_DEL_BUKRS'.
        mode3_del_bukrs( ).
      WHEN 'MODE3_REFRESH_DB'.
        mode3_refresh_db( ).
    ENDCASE.

    IF e_ucomm IN lcl_report=>gr_save.
      save_data( ).
    ENDIF.

    IF e_ucomm NS 'SEL_ALL'.
      dequeue_all_esf( ).
      IF gv_mode = gc_mode3.
        dequeue_all_fi( ).
      ENDIF.
    ENDIF.

    IF e_ucomm IN lcl_report=>gr_leave.
      IF gv_no_leave <> abap_true.
        CLEAR gv_no_leave.
        LEAVE SCREEN.
      ENDIF.
    ENDIF.
    IF ( e_ucomm = 'MODE1' OR e_ucomm = 'MODE2'  ) AND gr_grid_1 IS BOUND.
      refresh_alv( gr_grid_1 ).
    ENDIF.
    show_data( ).
  ENDMETHOD.

  METHOD on_user_command_3.
    CASE e_ucomm.
      WHEN 'SEL_ALL3'.
        enqueue_all_fi( ).
      WHEN 'DESEL_ALL3'.
        dequeue_all_fi( ).
    ENDCASE.

    show_data( ).
  ENDMETHOD.

  METHOD on_hotspot_1.
    ASSIGN gt_esf_data_filtered[ e_row_id ] TO FIELD-SYMBOL(<ls_esf_data>).
    IF sy-subrc = 0.
      IF e_column_id-fieldname = 'DEDUCT'.
        lcl_corr_edit=>edit( EXPORTING iv_esf = <ls_esf_data>-n_esf
                                       iv_pr = <ls_esf_data>-pr_esf
                                       iv_edit = COND #( WHEN gv_mode <> gc_mode3 THEN  abap_false ELSE abap_true ) ).
        lcl_report_in=>gr_grid_1->refresh_table_display( ).

        RETURN.
      ENDIF.
      IF e_column_id-fieldname = 'CORR' AND <ls_esf_data>-belnr CO '0123456789' .
        lcl_corr_edit=>edit( EXPORTING iv_bukrs = <ls_esf_data>-bukrs
                             iv_belnr = <ls_esf_data>-belnr
                             iv_gjahr = <ls_esf_data>-gjahr
                             iv_edit = abap_false
                             ).
        RETURN.
      ENDIF.

      " DETIALED footer
      move_corr_detail( EXPORTING is_data = <ls_esf_data> ).
      IF sy-dynnr = 1001.
        show_grid_1007( ).
      ENDIF.

      " UNP Filter
      IF gv_mode = gc_mode3 AND gv_unp_filter_3 = abap_true.
        IF gt_fi_data_filtered = gt_fi_data_filtered_unp.
*        gt_fi_data_filtered = gt_fi_data_filtered_unp.
        ELSE.
          data_fi_unp_clearing( ).
          gt_fi_data_filtered = gt_fi_data_filtered_unp.
          DELETE gt_fi_data_filtered WHERE unp <> <ls_esf_data>-unp_post.
        ENDIF.
      ENDIF.

      " AUTO match
      IF gv_mode = gc_mode3 AND gv_auto_mode_3 = abap_true.
        IF gt_fi_data_filtered = gt_fi_data_filtered_auto.
*          gt_fi_data_filtered = gt_fi_data_filtered_auto.
        ELSE.
          data_fi_auto_clearing( ).
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*          data_fi_auto_match( EXPORTING is_esf_data = <ls_esf_data> IMPORTING et_fi_auto_filterd = gt_fi_data_filtered ).
          data_fi_auto_match( IMPORTING et_fi_auto_filterd = gt_fi_data_filtered
                              CHANGING  cs_esf_data        = <ls_esf_data>  ).
* <-- AK_BUTVILOVS #8000001141
        ENDIF.
      ENDIF.
    ENDIF.

    LEAVE SCREEN.
  ENDMETHOD.

  METHOD on_double_click_1.
    CHECK e_column = 'BELNR'.
    ASSIGN gt_esf_data_filtered[ e_row-index ] TO FIELD-SYMBOL(<ls_esf_data>).
    CHECK sy-subrc = 0.
    IF <ls_esf_data>-belnr CO '0123456789'.
      SET PARAMETER ID 'BLN' FIELD <ls_esf_data>-belnr.
      SET PARAMETER ID 'BUK' FIELD <ls_esf_data>-bukrs.
      SET PARAMETER ID 'GJR' FIELD <ls_esf_data>-gjahr.
      CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      RETURN.
    ENDIF.
    CLEAR gt_fi_list.

    IF gv_mode = gc_mode1 OR gv_mode = gc_mode3.
      LOOP AT  gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_match>) USING KEY k1
        WHERE pr_esf = <ls_esf_data>-pr_esf
          AND n_esf = <ls_esf_data>-n_esf .
        ASSIGN  gt_fi_data[ KEY k1 COMPONENTS  bukrs = <ls_match>-bukrs
                                               belnr = <ls_match>-belnr
                                               gjahr = <ls_match>-gjahr ]
           TO FIELD-SYMBOL(<ls_fi_data>).
        APPEND VALUE #( BASE CORRESPONDING #( <ls_fi_data> ) sum_nds   = <ls_fi_data>-total_vat
                                                             sum_snds  = <ls_fi_data>-total_w_vat
                                                             sum_nonds = <ls_fi_data>-total_w_vat -  <ls_fi_data>-total_vat )

          TO gt_fi_list.
      ENDLOOP.
    ENDIF.
    SORT gt_fi_list. DELETE ADJACENT DUPLICATES FROM gt_fi_list COMPARING ALL FIELDS.

    IF gt_fi_list IS NOT INITIAL.
      DATA(lv_lines) = lines( gt_fi_list ).
      IF lv_lines < 21.
        lv_lines = lv_lines + 9.
      ELSE.
        lv_lines = 25.
      ENDIF.

      gv_detail_sign = 'FI'.
      CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
    ENDIF.

  ENDMETHOD.

  METHOD toolbar_buttons_1.
    DATA:
      lt_buttons             TYPE TABLE OF stb_button,
      lv_mode3_unp_disabled  TYPE char1,
      lv_mode3_auto_disabled TYPE char1.

    DELETE e_object->mt_toolbar WHERE function = '&DETAIL'
                                   OR function = '&&SEP00'
                                   OR function = '&CHECK'
                                   OR function = '&REFRESH'
                                   OR function = '&&SEP01'
                                   OR function = '&LOCAL&CUT'
                                   OR function = '&LOCAL&COPY'
                                   OR function = '&LOCAL&PASTE'
                                   OR function = '&LOCAL&UNDO'
                                   OR function = '&&SEP02'
                                   OR function = '&LOCAL&APPEND'
                                   OR function = '&LOCAL&INSERT_ROW'
                                   OR function = '&LOCAL&DELETE_ROW'
                                   OR function = '&LOCAL&COPY_ROW'
                                   OR function = '&&SEP03'
                                   OR function = '&&SEP06'
                                   OR function = '&&SEP07'
                                   OR function = '&INFO'.

    lt_buttons = VALUE #( ( function = 'SEL_ALL1' quickinfo = 'Выбрать всё'(b30) icon = icon_select_all )
                          ( function = 'DESEL_ALL1' quickinfo = 'Отменить выделение'(b31) icon = icon_deselect_all )
                          ( butn_type = 3 ) ).

    INSERT LINES OF lt_buttons INTO e_object->mt_toolbar INDEX 1.
    CLEAR lt_buttons.

    APPEND VALUE #( butn_type = 3 ) TO e_object->mt_toolbar.

*--> #8000000273 AK_BUTVILOVS Разработка роли для просмотра z-транзакций по БНУ
    DATA:
      lv_no_authorization            TYPE abap_bool,
      lv_view_all_no_authorization_2 TYPE abap_bool,
      lv_view_all_no_authorization_3 TYPE abap_bool.

    AUTHORITY-CHECK OBJECT 'ZBN_DISPLA'
      ID 'ACTVT' FIELD '02'.
    IF sy-subrc <> 0.
      lv_no_authorization = abap_true.
    ENDIF.

    IF ( gv_view_all_3 = abap_true OR gv_auto_mode_3 = abap_true )
      OR lv_no_authorization = abap_true.
      lv_mode3_unp_disabled = abap_true.
    ENDIF.

    IF ( gv_unp_filter_3 = abap_true OR gv_view_all_3 = abap_true )
      OR lv_no_authorization = abap_true.
      lv_mode3_auto_disabled = abap_true.
    ENDIF.

    IF gv_view_all_2 = abap_true OR lv_no_authorization = abap_true.
      lv_view_all_no_authorization_2 = abap_true.
    ENDIF.

    IF gv_view_all_3 = abap_true OR lv_no_authorization = abap_true.
      lv_view_all_no_authorization_3 = abap_true.
    ENDIF.

    CASE gv_mode.
      WHEN gc_mode1.
        lt_buttons = VALUE #( ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b01 quickinfo = TEXT-b01 )
                              ( butn_type = 3 )
                              ( function = 'MODE1_DOWNLOAD_ALL' quickinfo = 'Загрузка ЭСФС'(b06) icon = icon_packing disabled = lv_no_authorization )
                              ( butn_type = 3 disabled = lv_no_authorization ) ).
        "КНОПКА ДЛЯ СУПЕРПОЛЬЗОВАТЕЛЯ                                           {DHVK933945
        AUTHORITY-CHECK OBJECT 'ZFI_PB_EXT'
          ID 'ACTVT' FIELD '31'
          ID 'BUKRS' FIELD '*'.
        IF sy-subrc = 0.
          lt_buttons = VALUE #( BASE lt_buttons
                                ( function = 'MODE1_DLOADAD_ALL_DATE' quickinfo = 'Загрузка ЭСФС с даты'(b37) icon = icon_delivery_date  )
                                ( butn_type = 3 ) ).
        ENDIF.                                                                 "}DHVK933945
        lt_buttons = VALUE #( BASE lt_buttons
                              ( function = 'MODE1_GET_STATUS' quickinfo = 'Получить Статус'(b07) icon = icon_status_overview disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_APPROVE_NULL' quickinfo = 'Подтвердить Аннулирование'(b09) icon = icon_reject disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_DEL_RELATION' quickinfo = 'Разорвать'(b10) icon = icon_system_undo disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_CHECKED_STATUS_ADD' quickinfo = 'Проверено'(b11) icon = icon_booking_ok disabled = lv_no_authorization )
                              ( function = 'MODE1_CHECKED_STATUS_DEL' quickinfo = 'Отменить Проверено'(b12) icon = icon_booking_stop disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_SIGNATURE' quickinfo = 'Подписать'(b13) icon = icon_set_state disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_GET_DETAIL' quickinfo = 'Просмотреть ЭСЧФ'(b14) icon = icon_display_text )
                              ( butn_type = 3 )
                              ( function = 'MODE1_SHOW_LOG' quickinfo = 'Протокол'(b15) icon = icon_history )
                              ( butn_type = 3 )
                              ( function = 'MODE1_REFRESH_DB' quickinfo = 'Обновить из БД'(b08) icon = icon_refresh disabled = lv_no_authorization ) ).
      WHEN gc_mode2.
        lt_buttons = VALUE #( ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b02 quickinfo = TEXT-b04 )
                              ( butn_type = 3 )
                              ( function = 'MODE2_ADD_BUKRS' quickinfo = 'Присвоить Филиал'(b16) icon = icon_wf_link disabled = lv_view_all_no_authorization_2 )
                              ( function = 'MODE2_DEL_BUKRS' quickinfo = 'Удалить Филиал'(b17) icon = icon_delete disabled = lv_view_all_no_authorization_2 )
                              ( butn_type = 3 )
                              ( function = 'MODE2_VIEW_ALL' quickinfo = 'Просмотреть Все'(b18) checked = gv_view_all_2 icon = icon_display )
                              ( butn_type = 3 )
                              ( function = 'MODE2_REFRESH_DB' quickinfo = 'Обновить из БД'(b08) icon = icon_refresh disabled = lv_view_all_no_authorization_2 )
                              "--> 04.03.2024 #37420 D.Kruhliakou Режим "определение кода филиала", добавить кнопку "Получить статус"
                              ( function = 'MODE1_GET_STATUS' quickinfo = 'Получить Статус'(b07) icon = icon_status_overview disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              "<-- 04.03.2024 #37420 D.Kruhliakou
                             ).
      WHEN gc_mode3.
        lt_buttons = VALUE #( ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b03 quickinfo = TEXT-b05 )
                              ( butn_type = 3 )
                              ( function = 'MODE3_MATCH_ESF_AND_FI' quickinfo = 'Сопоставить'(b20) icon = icon_relation disabled = lv_view_all_no_authorization_3 )
                              ( butn_type = 3 )
                              ( function = 'MODE3_AUTO_MODE' quickinfo = 'Автоматическое Сопоставление'(b19) icon = icon_compare checked = gv_auto_mode_3 disabled = lv_mode3_auto_disabled )
                              ( function = 'MODE3_UNP_FILTER' quickinfo = 'Фильтр УНП'(b22) icon = icon_filter checked = gv_unp_filter_3 disabled = lv_mode3_unp_disabled )
                              ( butn_type = 3 )
                              ( function = 'MODE3_VIEW_ALL' quickinfo = 'Просмотреть Все'(b18) icon = icon_display checked = gv_view_all_3 )
                              ( butn_type = 3 )
                              ( function = 'MODE1_GET_DETAIL' quickinfo = TEXT-b14 icon = icon_display_text )
                              ( butn_type = 3 )

                              ( function = 'MODE3_DEL_BUKRS' quickinfo = 'Удалить Филиал'(b17) icon = icon_delete disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE1_GET_STATUS' quickinfo = 'Получить Статус'(b07) icon = icon_status_overview disabled = lv_no_authorization )
                              ( butn_type = 3 )
                              ( function = 'MODE3_REFRESH_DB' quickinfo = 'Обновить из БД'(b08) icon = icon_refresh disabled = lv_view_all_no_authorization_3 ) ).
    ENDCASE.
*<-- #8000000273 AK_BUTVILOVS

    APPEND LINES OF lt_buttons TO e_object->mt_toolbar.
  ENDMETHOD.

  METHOD menu_bt_handle_1.
    IF e_ucomm = 'PROC_TYPE'.
      e_object->add_function( fcode = 'MODE1'
                              text  = 'Основной режим'(b01) ).
      e_object->add_function( fcode = 'MODE2'
                              text  = 'Опред. кода фил.'(b02) ).
      e_object->add_function( fcode = 'MODE3'
                              text  = 'Подбор перв. док.'(b03) ).
    ENDIF.
  ENDMETHOD.

  METHOD data_changed_finished_1.
    IF e_modified = 'X'.
      enqueue_data_1( EXPORTING it_good_cells = et_good_cells ).
    ENDIF.
  ENDMETHOD.

  METHOD toolbar_buttons_3.
    DATA lt_buttons TYPE TABLE OF stb_button.

    lt_buttons = VALUE #( ( function = 'SEL_ALL3' quickinfo = 'Выбрать всё'(b30) icon = icon_select_all )
                      ( function = 'DESEL_ALL3' quickinfo = 'Отменить выделение'(b31) icon = icon_deselect_all )
                      ( butn_type = 3 ) ).
    INSERT LINES OF lt_buttons INTO e_object->mt_toolbar INDEX 1.
    CLEAR lt_buttons.

    DELETE e_object->mt_toolbar WHERE function = '&DETAIL'
                                   OR function = '&&SEP00'
                                   OR function = '&CHECK'
                                   OR function = '&REFRESH'
                                   OR function = '&&SEP01'
                                   OR function = '&LOCAL&CUT'
                                   OR function = '&LOCAL&COPY'
                                   OR function = '&LOCAL&PASTE'
                                   OR function = '&LOCAL&UNDO'
                                   OR function = '&&SEP02'
                                   OR function = '&LOCAL&APPEND'
                                   OR function = '&LOCAL&INSERT_ROW'
                                   OR function = '&LOCAL&DELETE_ROW'
                                   OR function = '&LOCAL&COPY_ROW'
                                   OR function = '&&SEP03'
                                   OR function = '&&SEP06'
                                   OR function = '&&SEP07'
                                   OR function = '&INFO'.
  ENDMETHOD.

  METHOD on_hotspot_3.
    ASSIGN gt_fi_data_filtered[ e_row_id ] TO FIELD-SYMBOL(<ls_fi_data>).

    CHECK sy-subrc = 0.
    IF e_column_id-fieldname = 'CORR'.
      lcl_corr_edit=>edit( iv_belnr = <ls_fi_data>-belnr
                           iv_bukrs = <ls_fi_data>-bukrs
                           iv_gjahr = <ls_fi_data>-gjahr ).
      RETURN.
    ENDIF.
    SET PARAMETER ID 'BLN' FIELD <ls_fi_data>-belnr.
    SET PARAMETER ID 'BUK' FIELD <ls_fi_data>-bukrs.
    SET PARAMETER ID 'GJR' FIELD <ls_fi_data>-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDMETHOD.

  METHOD on_double_click_3.
    CHECK e_column = 'N_ESF'.

    CLEAR gt_esf_list.
    ASSIGN gt_fi_data_filtered[ e_row-index ] TO FIELD-SYMBOL(<ls_fi_data>).
    IF sy-subrc = 0.
      LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE bukrs = <ls_fi_data>-bukrs
                                                                           AND belnr = <ls_fi_data>-belnr
                                                                           AND gjahr = <ls_fi_data>-gjahr.
        APPEND CORRESPONDING #( <ls_esf_data> ) TO gt_esf_list.
      ENDLOOP.
    ENDIF.

    DATA(lv_lines) = lines( gt_esf_list ).
    IF lv_lines < 21.
      lv_lines = lv_lines + 8.
    ENDIF.

    gv_detail_sign = 'ESF'.
    CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
  ENDMETHOD.

  METHOD data_changed_finished_3.
    IF e_modified = 'X'.
      enqueue_data_3( EXPORTING it_good_cells = et_good_cells ).
    ENDIF.
  ENDMETHOD.

  METHOD on_hotspot_detail.
    ASSIGN gt_fi_list[ e_row_id ] TO FIELD-SYMBOL(<ls_fi_list>).
    CHECK sy-subrc = 0.

    SET PARAMETER ID 'BLN' FIELD <ls_fi_list>-belnr.
    SET PARAMETER ID 'BUK' FIELD <ls_fi_list>-bukrs.
    SET PARAMETER ID 'GJR' FIELD <ls_fi_list>-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDMETHOD.

  METHOD show_grid_1007.
    IF gr_grid_1007 IS NOT BOUND.
      DATA(ls_variant) = VALUE disvariant( report = sy-repid handle   = COND #( WHEN p_mode1 IS NOT INITIAL THEN 'A' ELSE 'B' ) ).
      ls_variant-handle+1(1) = 'D'.
      ls_variant-handle+2(1) = lcl_report_in=>gv_mode+4(1).
      ls_variant-handle+3(1) = 'J'.

      DATA(lt_fcat) = build_fieldcat( iv_table = gt_esf_roster iv_type = '1007' ).

      gr_grid_1007 = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'GRID_1007' ) ).

      gr_grid_1007->set_table_for_first_display(
          EXPORTING is_layout        = VALUE #( cwidth_opt = abap_true zebra = abap_true )
                    i_save           = 'A'
                    is_variant       = ls_variant
          CHANGING  it_outtab        = gt_esf_roster_detail
                    it_fieldcatalog  = lt_fcat ).

      gr_grid_1007->set_toolbar_interactive( ).
    ELSE.
      gr_grid_1007->refresh_table_display( EXPORTING is_stable = VALUE #( col = abap_true row = abap_true ) ).
    ENDIF.
  ENDMETHOD.


  METHOD mode1_constructor.
    build_mode1_filter( ).
    clear_detail( ).
    gv_mode = gc_mode1.
  ENDMETHOD.

  METHOD mode1_select_all.
    enqueue_all_esf( ir_grid ).
  ENDMETHOD.

  METHOD mode1_deselect_all.
    dequeue_all_esf( ).
  ENDMETHOD.

  METHOD mode2_select_all.
    enqueue_all_esf( ).
  ENDMETHOD.

  METHOD mode2_deselect_all.
    dequeue_all_esf( ).
  ENDMETHOD.

  METHOD mode1_get_status.
    DATA:
      lv_cnt      TYPE i,
      lt_status   TYPE zif_einvoice_service=>ty_t_doc_status,
      lt_doc_list TYPE zif_einvoice_service=>ty_t_inv_number.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    lv_cnt = REDUCE #( INIT cnt = 0 FOR line IN gt_esf_data_filtered WHERE ( chk_box = abap_true )  NEXT cnt = cnt + 1 ).

    IF popup_to_confirm( EXPORTING iv_titlebar = |{ TEXT-m87 }{ lv_cnt }|
                                   iv_text_question = 'Обновить статусы?'(m50) ) <> '1'.
      RETURN.
    ENDIF.

    gr_einv_service = zcl_einvoice_service_factory=>get_instance( ).

    CLEAR gt_bapiret.

    lt_doc_list = VALUE #( FOR ls_data IN gt_esf_data_filtered WHERE ( chk_box = abap_true ) ( ls_data-n_esf ) ).
    CHECK NOT lt_doc_list IS INITIAL.

    CALL FUNCTION 'ENQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode           = lcl_report=>gc_lock_stat_i
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      DATA(lv_uname) = sy-msgv1.
      MESSAGE i019(zfi_esf) WITH lv_uname TEXT-x97.
      RETURN.
    ENDIF.

    TRY.
        gr_einv_service->login( ).
        gr_einv_service->get_status_list( EXPORTING it_doc = lt_doc_list IMPORTING et_status = lt_status ).
      CATCH zcx_einvoice_service INTO DATA(lr_err).
        DATA(ls_return) = lr_err->to_bapiret2( ).
        APPEND ls_return TO gt_bapiret.
        MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
        CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
          EXPORTING
            mode = lcl_report=>gc_lock_stat_i.
        RETURN.
    ENDTRY.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true.
      ASSIGN lt_status[ number = <ls_data>-n_esf ] TO FIELD-SYMBOL(<ls_status>).
      IF sy-subrc <> 0 OR <ls_status>-status = 'NOT_FOUND' OR <ls_status>-status IS INITIAL.
        APPEND VALUE #( type = 'W'
                        id = 'ZFI_EI'
                        number = 034
                        message_v1 = <ls_data>-n_esf ) TO gt_bapiret.
      ELSE.
        IF <ls_data>-id_stat_esf_p = <ls_status>-status.
          <ls_data>-chk_box = abap_false.
          CONTINUE.
        ENDIF.
        IF <ls_status>-status = lcl_report=>gc_stat_p_cancelled                                                "{ins DHVK932265
          OR <ls_status>-status = lcl_report=>gc_stat_p_on_agreement_cancel.
          <ls_data>-dt_anul_prt = <ls_status>-date.
        ENDIF.                                                                                                    "}ins DHVK932265
        <ls_data>-id_stat_esf_p = <ls_status>-status.
        <ls_data>-last_user = sy-uname.
        <ls_data>-aedat = sy-datum.
        GET TIME STAMP FIELD <ls_data>-tstampl.
        IF <ls_status>-status = 'ERROR'.            " 13837-220 При получении такого статуса в ЭСЧФ очищаются поля PR_TEK_MES, DT_PODPIS. Поле ID_STAT_ESF_V получает значение INPROGRESS.
          CLEAR: <ls_data>-pr_tek_mec, <ls_data>-dt_podpis.
          <ls_data>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
          APPEND VALUE #( type = 'E'
                          id = 'ZFI_EI'
                          number = '041'
                          message_v1 = <ls_data>-n_esf
                          message_v2 = <ls_status>-message
                          ) TO gt_bapiret.
        ENDIF.
      ENDIF.

    ENDLOOP.

    IF NOT gt_bapiret IS INITIAL.
      MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode = lcl_report=>gc_lock_stat_i.
  ENDMETHOD.

  METHOD mode1_download_all. " получить все данные
    DATA:
      lt_document  TYPE zfi_t_einvoice,
      lt_esf_data  TYPE zcl_fi_esf_amdp=>gty_t_esf_data,
      lt_esf       TYPE TABLE OF zfi_esf,
      lt_roster    TYPE TABLE OF zfi_esf_roster,
      lv_uname     TYPE sy-uname,
      lv_from_date TYPE timestamp,
      ls_esf_date  TYPE zfi_esf_date,
      lv_to_date   TYPE timestamp.
    AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
        ID 'ACTVT' FIELD '73'.
    IF sy-subrc <> 0.
      MESSAGE 'Данная функция недоступна Вашему пользователю'(m33) TYPE 'I'.
      RETURN.
    ENDIF.

    IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                   iv_text_question = 'Загрузить ЭСЧФ?'(m51) ) <> '1'.
      RETURN.
    ENDIF.
    "Установка блокировки чтения списка с портала                           "{ins DHVK931456
    CALL FUNCTION 'ENQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode           = lcl_report=>gc_lock_list
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      lv_uname = sy-msgv1.
      MESSAGE i020(zfi_esf) WITH lv_uname.
      RETURN.
    ENDIF.                                                                      "}ins DHVK931456

    CLEAR gt_bapiret.

    dequeue_all_esf( ).

    SELECT SINGLE last_date,uname
      FROM zfi_esf_date
      INTO (@lv_from_date,@lv_uname).
    IF sy-subrc <> 0 OR lv_from_date IS INITIAL.
      GET TIME STAMP FIELD lv_from_date.
    ELSE.
      MESSAGE i043(zfi_ei) WITH |{ lv_from_date TIMESTAMP = ENVIRONMENT }|   lv_uname.        "{ins  DHVK933945
    ENDIF.
    IF iv_fdate IS SUPPLIED.
      CONVERT DATE iv_fdate TIME '00000000'
        INTO TIME STAMP lv_from_date   TIME ZONE 'UTC'.
    ENDIF.                                                                                    "}ins  DHVK93394
    TRY.

        gr_einv_service->get_list( EXPORTING iv_from_date = lv_from_date IMPORTING ev_to_date = lv_to_date et_document = lt_document ).

        IF lt_document IS INITIAL.
          MESSAGE 'Нет новых документов к загрузке'(m70) TYPE 'I'.
          "RETURN.                                                         del DHVK931862
        ENDIF.

        ls_esf_date-last_date = lv_to_date.
        ls_esf_date-uname = sy-uname.

        " Обновляем БД, т.к. "забрать" фактуры можно только раз в 12 часов
        DELETE FROM zfi_esf_date.
        MODIFY zfi_esf_date FROM ls_esf_date.
        IF sy-subrc = 0.
          COMMIT WORK AND WAIT.
        ELSE.
          MESSAGE x000(zfi_ei) WITH 'Ошибка при записи в таблицу ZFI_ESF_DATE'(m69).
        ENDIF.

        IF NOT lt_document IS INITIAL.
          " OKEI
          SELECT j_3rj_uom_conv~okei, t006a~msehi
            FROM j_3rj_uom_conv JOIN t006a ON j_3rj_uom_conv~uom = t006a~msehi
            INTO TABLE @DATA(lt_okei_tab)
           WHERE t006a~spras = 'E'
           ORDER BY okei.

          DELETE lt_okei_tab WHERE okei IS INITIAL.
        ELSE.
          RETURN.
        ENDIF.

        gt_esf_list = VALUE #( FOR ls_data IN lt_document ( pr_esf = ls_data-header-pr_esf
                                                            n_esf  = ls_data-header-n_esf ) ).

        IF NOT gt_esf_list IS INITIAL.
          SELECT pr_esf n_esf
            FROM zfi_esf
            INTO TABLE gt_esf_list
            FOR ALL ENTRIES IN gt_esf_list
           WHERE pr_esf = gt_esf_list-pr_esf
             AND n_esf = gt_esf_list-n_esf.
          SORT gt_esf_list BY pr_esf n_esf.
        ENDIF.

        LOOP AT lt_document ASSIGNING FIELD-SYMBOL(<ls_document>).
          READ TABLE gt_esf_list TRANSPORTING NO FIELDS
                                 WITH KEY pr_esf = <ls_document>-header-pr_esf
                                          n_esf = <ls_document>-header-n_esf
                                 BINARY SEARCH.
          IF sy-subrc <> 0.
            APPEND CORRESPONDING #( <ls_document>-header ) TO lt_esf_data.   "для ALV
            APPEND <ls_document>-header TO lt_esf.   "для БД

            LOOP AT <ls_document>-roster ASSIGNING FIELD-SYMBOL(<ls_roster>).
              <ls_roster>-pr_esf = <ls_document>-header-pr_esf.
              <ls_roster>-n_esf = <ls_document>-header-n_esf.

              READ TABLE lt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei_tab>)
                                     WITH KEY okei = <ls_roster>-ed_izm
                                     BINARY SEARCH.
              IF sy-subrc = 0.
                <ls_roster>-meins = <ls_okei_tab>-msehi.
              ENDIF.
            ENDLOOP.

            APPEND VALUE #( type = 'S'
                            id = 'ZFI_EI'
                            number = 033
                            message_v1 = <ls_document>-header-n_esf ) TO gt_bapiret.

            APPEND LINES OF <ls_document>-roster TO gt_esf_roster.
            APPEND LINES OF <ls_document>-roster TO lt_roster.
          ENDIF.

          IF NOT <ls_document>-sign_error IS INITIAL.
            APPEND LINES OF <ls_document>-sign_error TO gt_bapiret.
          ENDIF.
        ENDLOOP.

        IF NOT lt_esf IS INITIAL.
          MODIFY zfi_esf FROM TABLE lt_esf.
          IF sy-subrc = 0.
            MODIFY zfi_esf_roster FROM TABLE lt_roster.
          ENDIF.
          IF sy-subrc = 0.
            COMMIT WORK AND WAIT.
          ELSE.
            ROLLBACK WORK.
          ENDIF.
        ENDIF.
      CATCH zcx_einvoice_service INTO DATA(lr_err).
        DATA(ls_return) = lr_err->to_bapiret2( ).
        APPEND ls_return TO gt_bapiret.
        CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
          EXPORTING
            mode = lcl_report=>gc_lock_list.
        MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
        RETURN.
    ENDTRY.

    APPEND LINES OF lt_esf_data TO gt_esf_data.
    SORT gt_esf_data BY pr_esf n_esf dt_vs_esf.

    IF NOT lt_esf_data IS INITIAL.
      MESSAGE 'Новые ЭСЧФ загружены, смотрите Протокол'(m71) TYPE 'I'.
    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode = lcl_report=>gc_lock_list.
  ENDMETHOD.

  METHOD mode1_refresh_db.
    clear_detail( ).
    dequeue_all_esf( ).
    refresh_data( abap_true ).
  ENDMETHOD.

  METHOD mode1_approve_null. " Подтверждение аннулирования
    DATA:
      lt_esf_mod TYPE gty_t_esf,
      lv_text    TYPE char100.
    FIELD-SYMBOLS:
      <ls_esf> TYPE  zcl_fi_esf_amdp=>gty_s_esf_data.
    LOOP AT gt_esf_data_filtered TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      IF <ls_esf> IS ASSIGNED.
        MESSAGE i023(zfi_esf).
        RETURN.
      ELSE.
        ASSIGN gt_esf_data_filtered[ sy-tabix ] TO <ls_esf>.
      ENDIF.
    ENDLOOP.
    IF <ls_esf> IS NOT ASSIGNED.
      MESSAGE 'Выберите ЭСЧФ'(m09) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    IF <ls_esf>-id_stat_esf_p =  lcl_report=>gc_stat_p_cancelled OR
       <ls_esf>-id_stat_esf_p =  lcl_report=>gc_stat_p_on_agreement_cancel.
      lv_text = TEXT-m20.
    ELSEIF <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_sended.
      lv_text = replace( val = TEXT-m99 sub = '&' with = <ls_esf>-n_esf ) .
    ELSE.
      MESSAGE TEXT-t13 TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                   iv_text_question = lv_text ) <> '1'.
      RETURN.
    ENDIF.

    <ls_esf> = VALUE #( BASE <ls_esf>  id_stat_esf_v = lcl_report=>gc_stat_v_cancelled
                                       last_user = sy-uname
                                       aedat = sy-datum ).
    rv_ok = abap_true.
  ENDMETHOD.

  METHOD mode1_del_relation. " Удалить связь с FI
    DATA:
      lv_cnt     TYPE i,
      lv_text    TYPE char100,
      lt_esf_mod TYPE gty_t_esf.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data_filtered TRANSPORTING NO FIELDS WHERE chk_box = abap_true
                                                          AND id_stat_esf_v <> lcl_report=>gc_stat_v_matched.
      MESSAGE 'Все документы должны быть в статусе "Подобрано"'(m32) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDLOOP.

    "проверка выделения всех ESF для FI
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE belnr CO '0987654321' AND chk_box = abap_true.
      LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf>) USING KEY  k2
             WHERE bukrs = <ls_data>-bukrs
               AND belnr = <ls_data>-belnr
               AND gjahr = <ls_data>-gjahr.
        IF <ls_esf>-chk_box = abap_false.
          MESSAGE i042(zfi_ei) WITH <ls_data>-belnr .
          RETURN.
        ENDIF.
      ENDLOOP.

    ENDLOOP.
    IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                   iv_text_question = 'Отменить сопоставление?'(m21) ) <> '1'.
      RETURN.
    ENDIF.



    LOOP AT gt_esf_data_filtered ASSIGNING <ls_data> WHERE chk_box = abap_true
                                                                     AND NOT belnr IS INITIAL
                                                                     AND id_stat_esf_v = lcl_report=>gc_stat_v_matched.
      IF <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_cancelled
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_completed_signed
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_on_agreement_cancel.

        CONCATENATE <ls_data>-n_esf ': ЭСЧФ с статусе Выставлен.Подписан/Аннулирован/Aннулирован пост. не обрабатывается'(m31) INTO lv_text.
        MESSAGE lv_text TYPE 'I'.

        CONTINUE.
      ENDIF.
      IF p_mode1 = 'X'.
        DELETE FROM zfi_def_deduct WHERE n_esf = <ls_data>-n_esf.
      ENDIF.
      LOOP AT gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match1>) USING KEY k1 WHERE pr_esf = <ls_data>-pr_esf
                                                                                  AND n_esf = <ls_data>-n_esf.
        <ls_esf_match1>-del_flg = abap_true.

        READ TABLE gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data_ins>)
                              WITH KEY bukrs = <ls_esf_match1>-bukrs
                                       belnr = <ls_esf_match1>-belnr
                                       gjahr = <ls_esf_match1>-gjahr
                              BINARY SEARCH.
        IF sy-subrc = 0.
          LOOP AT gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data>) FROM sy-tabix.
            IF <ls_fi_data>-bukrs <> <ls_esf_match1>-bukrs
              OR <ls_fi_data>-belnr <> <ls_esf_match1>-belnr
              OR <ls_fi_data>-gjahr <> <ls_esf_match1>-gjahr.
              EXIT.
            ENDIF.
            IF <ls_fi_data>-n_esf = lcl_report=>gc_1_n.
              CLEAR lv_cnt.
              LOOP AT gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>) USING KEY k2 WHERE bukrs = <ls_esf_match1>-bukrs
                                                                                         AND belnr = <ls_esf_match1>-belnr
                                                                                         AND gjahr = <ls_esf_match1>-gjahr.
                IF <ls_esf_match>-del_flg = abap_true.
                  lv_cnt = lv_cnt + 1.
                ENDIF.
              ENDLOOP.
              IF lv_cnt = 0.
                CLEAR <ls_fi_data>-n_esf.
              ELSEIF lv_cnt = 1.
                <ls_fi_data>-n_esf = <ls_data>-n_esf.
              ELSEIF lv_cnt > 1.
                <ls_fi_data>-n_esf = lcl_report=>gc_1_n.
              ENDIF.
            ELSE.
              CLEAR <ls_fi_data>-n_esf.
            ENDIF.

            READ TABLE gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>)
                                           WITH KEY bukrs = <ls_esf_match1>-bukrs
                                                    belnr = <ls_esf_match1>-belnr
                                                    gjahr = <ls_esf_match1>-gjahr
                                                    mwskz = <ls_fi_data>-mwskz
                                           BINARY SEARCH.
            IF sy-subrc <> 0.
              INSERT <ls_fi_data_ins> INTO gt_fi_data_filtered INDEX sy-tabix.
            ELSE.
              CLEAR <ls_fi_data_filtered>-n_esf.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDLOOP.

      CLEAR: <ls_data>-bukrs, <ls_data>-belnr, <ls_data>-gjahr, <ls_data>-id_stat_esf_v, <ls_data>-sum_snds_belnr, <ls_data>-sum_nds_belnr, <ls_data>-sum_excise_belnr.
      <ls_data>-last_user = sy-uname.
      <ls_data>-aedat = sy-datum.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode1_checked_status_add. " Установить статус "Проверено"
    DATA:
      lt_esf_mod TYPE gty_t_esf,
      lv_text    TYPE char100.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data_filtered TRANSPORTING NO FIELDS WHERE chk_box = abap_true
                                                          AND id_stat_esf_v <> lcl_report=>gc_stat_v_matched.
      MESSAGE 'Все документы должны быть в статусе "Подобрано"'(m32) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDLOOP.

    IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                   iv_text_question = 'Установить статус "Проверено"?'(m22) ) <> '1'.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true
                                                                         AND NOT belnr IS INITIAL
                                                                         AND id_stat_esf_v = lcl_report=>gc_stat_v_matched.
      IF <ls_esf_data>-id_stat_esf_p = lcl_report=>gc_stat_p_cancelled
        OR <ls_esf_data>-id_stat_esf_p = lcl_report=>gc_stat_p_completed_signed
        OR <ls_esf_data>-id_stat_esf_p = lcl_report=>gc_stat_p_on_agreement_cancel.

        CONCATENATE <ls_esf_data>-n_esf ': ЭСЧФ с статусе Выставлен.Подписан/Аннулирован/Aннулирован пост. не обрабатывается'(m31) INTO lv_text.
        MESSAGE lv_text TYPE 'I'.
        CONTINUE.
      ENDIF.

      <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_checked.
      <ls_esf_data>-last_user = sy-uname.
      <ls_esf_data>-aedat = sy-datum.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode1_checked_status_del. " Отменить статус "Проверено"
    DATA:
      lt_esf_mod TYPE gty_t_esf,
      lv_text    TYPE char100.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_sel>)  WHERE chk_box = abap_true.
      IF <ls_sel>-id_stat_esf_v <> lcl_report=>gc_stat_v_checked.
        MESSAGE 'Все документы должны быть в статусе "Проверено"'(m28) TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
         ID 'ACTVT' FIELD '74'
         ID 'BUKRS' FIELD <ls_sel>-code_pokup_fil+2.
      IF sy-subrc <> 0 AND <ls_sel>-last_user <> sy-uname." может только тот, кто установил, либо сотрудник ЦА с super_user
        MESSAGE 'Данная функция недоступна Вашему пользователю'(m33) TYPE 'I'.
        RETURN.
      ENDIF.
      EXIT.
    ENDLOOP.


    IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                iv_text_question = 'Отменить статус "Проверено"?'(m23) ) <> '1'.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true
                                                                     AND id_stat_esf_v = lcl_report=>gc_stat_v_checked.

      IF <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_cancelled
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_completed_signed
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_on_agreement_cancel.

        CONCATENATE <ls_data>-n_esf ': ЭСЧФ с статусе Выставлен.Подписан/Аннулирован/Aннулирован пост. не обрабатывается'(m31) INTO lv_text.
        MESSAGE lv_text TYPE 'I'.
        CONTINUE.
      ENDIF.

      <ls_data>-id_stat_esf_v = lcl_report=>gc_stat_v_matched.
      <ls_data>-last_user = sy-uname.
      <ls_data>-aedat = sy-datum.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode1_signature.
    DATA:
      lv_mess         TYPE string,
      lv_error_x      TYPE abap_bool,
      lv_cnt_proc     TYPE i,          "количество записей к обработке
      lv_cnt_pack     TYPE i,          "текущее количество в пакете
      lv_text         TYPE char200,
      ls_info         TYPE zif_einvoice_service=>ty_s_status_info,
      ls_esf          TYPE zfi_esf,
      lt_pack         TYPE STANDARD TABLE OF REF TO zcl_fi_esf_amdp=>gty_s_esf_data,
      lv_message_char TYPE char1024.

    IF lcl_report=>check_oper( ) = abap_false.
      RETURN.
    ENDIF.
    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_sel>) WHERE chk_box = abap_true.
      IF <ls_sel>-id_stat_esf_v <> lcl_report=>gc_stat_v_checked.
        MESSAGE 'Все документы должны быть в статусе "Проверено"'(m52) TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.
        ADD 1 TO lv_cnt_proc.
      ENDIF.
      IF <ls_sel>-code_pokup_fil+2 = '99'. " V.Matsygud 15.02.2021 Для обработки БЕ 20
        AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
          ID 'ACTVT' FIELD '73'
          ID 'BUKRS' FIELD '20'.
      ELSE.
        AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
          ID 'ACTVT' FIELD '73'
          ID 'BUKRS' FIELD <ls_sel>-code_pokup_fil+2.
      ENDIF.
      IF sy-subrc <> 0.
        MESSAGE 'Данная функция недоступна Вашему пользователю'(m33) TYPE 'I'.
        RETURN.
      ENDIF.

    ENDLOOP.
    "Установка отправки на  портал                                              "{ins DHVK931456
    CALL FUNCTION 'ENQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode           = lcl_report=>gc_lock_send_i
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      DATA(lv_uname) = sy-msgv1.
      MESSAGE i021(zfi_esf) WITH lv_uname TEXT-x97.
      RETURN.
    ENDIF.                                                                      "}ins DHVK931456
    IF popup_to_confirm( EXPORTING iv_titlebar = TEXT-m01
                                iv_text_question = 'Подписать документ(ы)?'(m24) ) <> '1'.
      RETURN.
    ENDIF.
    CLEAR gt_bapiret.
    MESSAGE i999(fg) WITH TEXT-m88 lv_cnt_proc .
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true
                                                                     AND id_stat_esf_v = lcl_report=>gc_stat_v_checked.
      IF <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_cancelled
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_completed_signed
        OR <ls_data>-id_stat_esf_p = lcl_report=>gc_stat_p_on_agreement_cancel.

        CONCATENATE <ls_data>-n_esf TEXT-m31 INTO lv_text.
        MESSAGE lv_text TYPE 'I'.
        CONTINUE.
      ENDIF.
      TRY.
          CLEAR <ls_data>-err.
          DATA(lv_message) = gr_einv_service->sign_inbound_doc( EXPORTING iv_number = <ls_data>-n_esf ).
          <ls_data>-last_user = sy-uname.
          <ls_data>-aedat = sy-datum.
          <ls_data>-dt_podpis = sy-datum.
          <ls_data>-id_stat_esf_v = lcl_report=>gc_stat_v_sended.
          SELECT SINGLE gjahr , monat
            FROM zfi_esf_oper
            INTO @DATA(ls_open)
            WHERE bukrs = @<ls_data>-code_pokup_fil+2.
          CLEAR: <ls_data>-pr_tek_mec.
          IF <ls_data>-dt_op_esf(6) = ls_open-gjahr && ls_open-monat
            OR  <ls_data>-dt_op_esf(6) = sy-datum(6)
            OR ( <ls_data>-dt_op_esf(6) > ls_open-gjahr && ls_open-monat AND <ls_data>-dt_op_esf(6) > sy-datum(6) ).
            <ls_data>-pr_tek_mec = abap_true.
          ENDIF.
        CATCH zcx_einvoice_service INTO DATA(lr_err).
          <ls_data>-err = lr_err->get_text( ).
          <ls_data>-color = 'C600'.
          APPEND lr_err->to_bapiret2( ) TO gt_bapiret.
          lv_error_x = abap_true.
          CONTINUE.
      ENDTRY.
      ADD 1 TO lv_cnt_pack.
      APPEND REF #( <ls_data> ) TO lt_pack.
      CLEAR ls_open.
      "{DHVK933945 обработка и сохранение пакета документов
      IF lv_cnt_pack = lcl_report=>gc_packsize.
        CLEAR lv_cnt_pack.
        mode1_pack_sign( CHANGING ct_pack = lt_pack ).
      ENDIF.
      "}DHVK933945
    ENDLOOP.
    mode1_pack_sign( CHANGING ct_pack = lt_pack ).
    IF  gt_bapiret IS NOT INITIAL.
      MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
      EXPORTING
        mode = lcl_report=>gc_lock_send_i.


  ENDMETHOD.
  METHOD mode1_pack_sign.
    DATA:
      ls_esf          TYPE zfi_esf,
      lv_message_char TYPE char1024,
      ls_info         TYPE zif_einvoice_service=>ty_s_status_info.
    "ожидание обновления статуса
    CHECK ct_pack IS NOT INITIAL.
    WAIT UP TO lcl_report=>gc_delay SECONDS.

    LOOP AT ct_pack ASSIGNING FIELD-SYMBOL(<ls_pack>).
      TRY.
          CLEAR ls_info.
          "обновление статуса документа
          ls_info =  gr_einv_service->get_status( iv_inv_number = <ls_pack>->n_esf ).
          <ls_pack>->id_stat_esf_p = ls_info-status.
          IF ls_info-status = lcl_report=>gc_stat_p_error AND ls_info-message <> ''.
            CLEAR: <ls_pack>->pr_tek_mec, <ls_pack>->dt_podpis.
            <ls_pack>->id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
            lv_message_char = ls_info-message.
            <ls_pack>->err = ls_info-message.
            <ls_pack>->color = 'C600'.
            APPEND VALUE #(
               type = 'E' id = 'ZFI_EI' number = 000 message_v1 = <ls_pack>->n_esf && `: `
               message_v2 = ` ` && lv_message_char(49)
               message_v3 = lv_message_char+49(50)
               message_v4 = lv_message_char+99(50)
                        ) TO     gt_bapiret.
          ENDIF.
        CATCH zcx_einvoice_service INTO DATA(lr_err).
          <ls_pack>->err = lr_err->get_text( ).
          <ls_pack>->color = 'C600'.
          APPEND lr_err->to_bapiret2( ) TO gt_bapiret.
      ENDTRY.
      "сохранение нового статуса
      GET TIME STAMP FIELD <ls_pack>->tstampl.
      ls_esf = CORRESPONDING #( <ls_pack>->* ).
      MODIFY zfi_esf FROM ls_esf.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING
          mode_zfi_esf = 'E'
          mandt        = sy-mandt
          pr_esf       = <ls_pack>->pr_esf
          n_esf        = <ls_pack>->n_esf.
    ENDLOOP.
    COMMIT WORK.
    CLEAR ct_pack[].
  ENDMETHOD.
  METHOD mode1_get_detail.
    DATA:
      lt_roster TYPE zcl_fi_esf_amdp=>gty_t_roster,
      lv_cnt    TYPE i.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      lv_cnt = lv_cnt + 1.
      IF lv_cnt > 1.
        MESSAGE 'Выберите только одну запись'(m06) TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    " вывод в Excel
    SELECT dop_dan, nm_dop_dan
      FROM zfi_dop_dan
      INTO TABLE @DATA(lt_dop_dan)
     ORDER BY dop_dan.

    SELECT mseh3, msehi
      FROM t006a
      INTO TABLE @DATA(lt_t006a)
     WHERE spras = @sy-langu
     ORDER BY msehi.

    LOOP AT gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_roster>)
                          WHERE pr_esf = <ls_esf_data>-pr_esf
                            AND n_esf  = <ls_esf_data>-n_esf.
      APPEND <ls_roster> TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_roster_new>).
      READ TABLE lt_dop_dan ASSIGNING FIELD-SYMBOL(<ls_dop_dan>)
                            WITH KEY dop_dan = <ls_roster>-dop_dan
                            BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_roster_new>-dop_dan = <ls_dop_dan>-nm_dop_dan.
      ENDIF.

      READ TABLE lt_t006a ASSIGNING FIELD-SYMBOL(<ls_t006a>)
                          WITH KEY msehi = <ls_roster>-meins
                          BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_roster_new>-meins = <ls_t006a>-mseh3.
      ENDIF.
    ENDLOOP.

    lcl_excel=>out_to_excel( EXPORTING is_data = <ls_esf_data> it_roster = lt_roster ).
  ENDMETHOD.

  METHOD mode1_show_log.
    CALL FUNCTION 'MESSAGES_INITIALIZE'.

    LOOP AT gt_bapiret ASSIGNING FIELD-SYMBOL(<ls_return>).
      CALL FUNCTION 'MESSAGE_STORE'
        EXPORTING
          arbgb  = <ls_return>-id
          msgty  = <ls_return>-type
          msgv1  = <ls_return>-message_v1
          msgv2  = <ls_return>-message_v2
          msgv3  = <ls_return>-message_v3
          msgv4  = <ls_return>-message_v4
          txtnr  = <ls_return>-number
        EXCEPTIONS
          OTHERS = 0.
    ENDLOOP.

    CALL FUNCTION 'MESSAGES_SHOW'
      EXCEPTIONS
        OTHERS = 0.
  ENDMETHOD.

  METHOD mode2_constructor.
    CLEAR gv_view_all_2.

    build_mode2_filter( EXPORTING iv_mode = 'BUILD' ).
    clear_detail( ).
    gv_mode = gc_mode2.
  ENDMETHOD.

  METHOD mode2_add_bukrs.
    DATA:
      lt_esf_mod TYPE gty_t_esf,
      ls_data    TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    SELECT bukrs FROM t001 INTO TABLE @DATA(lt_bukrs) WHERE bukrs IN @so_bukrs.
    IF lines( lt_bukrs ) > 1.
      MESSAGE 'Укажите только одну БЕ на селекционном экране'(m07) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    IF so_bukrs[ 1 ]-low <> '20'. " V.Matsygud 12.02.2020 Добавлена обработка для БЕ 20

      MODIFY gt_esf_data_filtered FROM VALUE #( code_pokup_fil = '90' && so_bukrs[ 1 ]-low
                                                last_user = sy-uname
                                                aedat = sy-datum )
                                  TRANSPORTING code_pokup_fil
                                               last_user
                                               aedat
                                  WHERE chk_box = abap_true.
    ELSE. " V.Matsygud 12.02.2020 Добавлена обработка для БЕ 20
      MODIFY gt_esf_data_filtered FROM VALUE #( code_pokup_fil = '90' && '99'
                                            last_user = sy-uname
                                            aedat = sy-datum )
                              TRANSPORTING code_pokup_fil
                                           last_user
                                           aedat
                              WHERE chk_box = abap_true.

    ENDIF.

    move_corr_detail( EXPORTING is_data = ls_data ).
  ENDMETHOD.

  METHOD mode2_del_bukrs.
    DATA:
      ls_data    TYPE zcl_fi_esf_amdp=>gty_s_esf_data,
      lt_esf_mod TYPE gty_t_esf,
      lv_tstampl TYPE zfi_esf-tstampl.

    IF NOT check_marked_lines_esf( ) IS INITIAL.
      RETURN.
    ENDIF.

    MODIFY gt_esf_data_filtered FROM VALUE #( code_pokup_fil = abap_false
                                              last_user = sy-uname
                                              aedat = sy-datum )
                                TRANSPORTING code_pokup_fil
                                             last_user
                                             aedat
                                WHERE chk_box = abap_true.

    move_corr_detail( EXPORTING is_data = ls_data ).
  ENDMETHOD.

  METHOD mode2_refresh_db.
    clear_detail( ).
    dequeue_all_esf( ).
    refresh_data( EXPORTING iv_question = abap_true ).
  ENDMETHOD.

  METHOD mode2_view_all.
    IF gv_view_all_2 IS INITIAL.
      gv_view_all_2 = abap_true. " зажать кнопку
      refresh_data( EXPORTING iv_question = abap_false ).
    ELSE.
      gv_view_all_2 = abap_false. " отжать кнопку
      refresh_data( EXPORTING iv_question = abap_false ).
      IF NOT gs_part3-code_pokup_fil IS INITIAL.
        clear_detail( ).
        LEAVE SCREEN.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD mode3_auto_mode.
    IF gv_auto_mode_3 IS INITIAL.
      gv_auto_mode_3 = abap_true. " нажать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'AUTO_ON' ).
    ELSE.
      gv_auto_mode_3 = abap_false. " отжать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'AUTO_OFF' ).
    ENDIF.
  ENDMETHOD.

  METHOD mode3_match_esf_and_fi.

    CHECK check_reversed_fi_data( ) = abap_false.

    CASE gv_auto_mode_3.
      WHEN abap_true.
        match_esf_and_fi_auto_mode( ).
      WHEN abap_false.
        match_esf_and_fi_manual_mode( ).
    ENDCASE.
    unlock_selected_fi_doc( ).
    clear_detail( ).
  ENDMETHOD.

  METHOD mode3_constructor.
    CLEAR: gv_view_all_3, gv_auto_mode_3, gv_unp_filter_3.

    build_mode3_filter( EXPORTING iv_mode = 'BUILD' ).
    build_mode3_fi_filter( ).

    clear_detail( ).
    gv_mode = gc_mode3.
  ENDMETHOD.

  METHOD mode3_view_all.
    refresh_data( EXPORTING iv_question = abap_false ).
    IF gv_view_all_3 IS INITIAL.
      gv_view_all_3 = abap_true. " зажать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'VIEW_ALL' ).
    ELSE.
      gv_view_all_3 = abap_false. " отжать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'VIEW_FILTERED' ).
    ENDIF.
  ENDMETHOD.

  METHOD mode3_unp_filter.
    clear_detail( ).

    IF gv_unp_filter_3 IS INITIAL.
      gv_unp_filter_3 = abap_true. " нажать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'UNP_ON' ).
    ELSE.
      gv_unp_filter_3 = abap_false. " отжать кнопку
      build_mode3_filter( EXPORTING iv_mode = 'UNP_OFF' ).
    ENDIF.
  ENDMETHOD.

  METHOD mode3_del_bukrs.
    DATA ls_data TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    MODIFY gt_esf_data_filtered FROM VALUE #( code_pokup_fil = abap_false
                                              last_user = sy-uname
                                              aedat = sy-datum )
                                TRANSPORTING code_pokup_fil
                                             last_user
                                             aedat
                                WHERE chk_box = abap_true.

    move_corr_detail( EXPORTING is_data = ls_data ).
  ENDMETHOD.

  METHOD mode3_refresh_db.
    clear_detail( ).
    dequeue_all_esf( ).
    refresh_data( EXPORTING iv_question = abap_true ).
  ENDMETHOD.

  METHOD move_corr_detail.
    CLEAR gt_esf_roster_detail.

    IF NOT is_data IS INITIAL.
      lcl_report=>gv_n_esf = is_data-n_esf.
      lcl_report=>gv_pr_esf = is_data-pr_esf.
      MOVE-CORRESPONDING is_data TO gs_part1.
      MOVE-CORRESPONDING is_data TO gs_part2.
      MOVE-CORRESPONDING is_data TO gs_part3.
      MOVE-CORRESPONDING is_data TO gs_part4.
      MOVE-CORRESPONDING is_data TO gs_part5.

      gt_esf_roster_detail = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( pr_esf = is_data-pr_esf
                                                                           AND   n_esf = is_data-n_esf )
                                    ( ls_esf_roster ) ).
    ELSE.
      ASSIGN gt_esf_data_filtered[ KEY k1 pr_esf = lcl_report=>gv_pr_esf
                                          n_esf  = lcl_report=>gv_n_esf ]
        TO  FIELD-SYMBOL(<ls_esf_data>).
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <ls_esf_data> TO gs_part1.
        MOVE-CORRESPONDING <ls_esf_data> TO gs_part2.
        MOVE-CORRESPONDING <ls_esf_data> TO gs_part3.
        MOVE-CORRESPONDING <ls_esf_data> TO gs_part4.
        MOVE-CORRESPONDING <ls_esf_data> TO gs_part5.


        gt_esf_roster_detail = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( pr_esf = <ls_esf_data>-pr_esf
                                                                             AND   n_esf = <ls_esf_data>-n_esf )
                                      ( ls_esf_roster ) ).
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD clear_detail.
    CLEAR: lcl_report=>gv_n_esf,
           lcl_report=>gv_pr_esf,
           gs_part1,
           gs_part2,
           gs_part3,
           gs_part4,
           gs_part5,
           gt_esf_roster_detail.
  ENDMETHOD.

  METHOD save_data.
    DATA:
      ls_esf_data   TYPE zfi_esf,
      lt_esf_roster TYPE zcl_fi_esf_amdp=>gty_t_roster.

    filtered_to_main( EXPORTING iv_mode = gv_mode+4(1) ).

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true.
      GET TIME STAMP FIELD <ls_data>-tstampl.

      MOVE-CORRESPONDING <ls_data> TO ls_esf_data.
      MODIFY zfi_esf FROM ls_esf_data.

      LOOP AT gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>) WHERE pr_esf = <ls_data>-pr_esf
                                                                    AND n_esf = <ls_data>-n_esf.
        IF <ls_esf_match>-del_flg = abap_true.
          DELETE FROM zfi_esf_match WHERE pr_esf = <ls_esf_match>-pr_esf
                                      AND n_esf  = <ls_esf_match>-n_esf
                                      AND bukrs  = <ls_esf_match>-bukrs
                                      AND belnr  = <ls_esf_match>-belnr
                                      AND gjahr  = <ls_esf_match>-gjahr.
        ELSE.
          MODIFY zfi_esf_match FROM <ls_esf_match>.
        ENDIF.
      ENDLOOP.

      lt_esf_roster = VALUE #( FOR ls_roster IN gt_esf_roster WHERE ( pr_esf = <ls_data>-pr_esf AND n_esf = <ls_data>-n_esf ) ( ls_roster ) ).
      MODIFY zfi_esf_roster FROM TABLE lt_esf_roster.
      COMMIT WORK AND WAIT.

      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING
          mode_zfi_esf = 'E'
          mandt        = sy-mandt
          pr_esf       = <ls_data>-pr_esf
          n_esf        = <ls_data>-n_esf.

      CLEAR <ls_data>-chk_box.
    ENDLOOP.

    DELETE gt_esf_match WHERE del_flg = abap_true.

    " обновить данные
    CLEAR: gt_esf_data, gt_esf_roster, gt_esf_match.
    get_esf_data( CHANGING et_data = gt_esf_data et_roster = gt_esf_roster et_match = gt_esf_match ).

    CASE gv_mode.
      WHEN gc_mode1.
        build_mode1_filter( ).
        clear_detail( ).
      WHEN gc_mode2.
        build_mode2_filter( EXPORTING iv_mode = 'BUILD' ).
        clear_detail( ).
      WHEN gc_mode3.
        dequeue_all_fi( ).

        CLEAR gt_fi_data.
        get_fi_data( CHANGING et_data = gt_fi_data ).

        build_mode3_filter( EXPORTING iv_mode = 'BUILD' ).   "ЭСЧФ-фильтр

        CASE abap_true.   "FI-фильтр
          WHEN gv_auto_mode_3.
            build_mode3_filter( EXPORTING iv_mode = 'AUTO_ON' ).
          WHEN gv_unp_filter_3.
            build_mode3_filter( EXPORTING iv_mode = 'UNP_ON' ).
          WHEN OTHERS.
            build_mode3_fi_filter( ).
        ENDCASE.
    ENDCASE.
  ENDMETHOD.

  METHOD build_mode1_filter.
    gt_esf_data_filtered = gt_esf_data.
    IF so_bukrs[ 1 ]-low <> '20'. "V.Matsygud 12.02.2021 Обработка для БЕ 20
      DELETE gt_esf_data_filtered WHERE belnr IS INITIAL
                                     OR NOT code_pokup_fil+2(2) IN so_bukrs
                                     OR code_pokup_fil IS INITIAL.
    ELSE. "V.Matsygud 12.02.2021 Обработка для БЕ 20
      DELETE gt_esf_data_filtered WHERE belnr IS INITIAL
                                     OR NOT code_pokup_fil+2(2) = '99'
                                     OR code_pokup_fil IS INITIAL.
    ENDIF."V.Matsygud 12.02.2021 Обработка для БЕ 20


    .
  ENDMETHOD.

  METHOD build_mode2_filter.
    CLEAR gt_esf_data_filtered.
    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE belnr IS INITIAL
                                                                 AND  ( id_stat_esf_p = lcl_report=>gc_stat_p_completed OR
                                                                        id_stat_esf_p = lcl_report=>gc_stat_p_on_agreement OR  "DHVK929675 Замена
                                                                        id_stat_esf_p = lcl_report=>gc_stat_p_in_progress ). "DHVK941587
      " в режиме просмотр всех выводятся данные без ограничений, иначе ограничивается БЕ с экрана выбра или пусто
      IF gv_view_all_2 = abap_false AND
        ( NOT <ls_esf_data>-code_pokup_fil+2(2) IN so_bukrs
          AND NOT ( <ls_esf_data>-code_pokup_fil+2(2) = '99' AND so_bukrs[ 1 ]-low = '20' )"V.Matsygud 12.02.2021 Обработка для БЕ 20
          AND NOT <ls_esf_data>-code_pokup_fil IS INITIAL
        ).
        CONTINUE.
      ENDIF.
      APPEND <ls_esf_data> TO gt_esf_data_filtered.

    ENDLOOP.
  ENDMETHOD.

  METHOD build_mode3_filter.

    CASE iv_mode.
      WHEN 'BUILD'.
        gt_esf_data_filtered = gt_esf_data.

        IF so_bukrs[ 1 ]-low <> '20'."V.Matsygud 12.02.2021 Обработка для БЕ 20
          DELETE gt_esf_data_filtered WHERE NOT belnr IS INITIAL
                                         OR NOT code_pokup_fil+2(2) IN so_bukrs
                                         OR filtered = abap_true
                                         OR ( id_stat_esf_p <> lcl_report=>gc_stat_p_completed
                                          AND id_stat_esf_p <> lcl_report=>gc_stat_p_on_agreement
                                          AND id_stat_esf_p <> lcl_report=>gc_stat_p_in_progress ).   "DHVK941587).
        ELSE."V.Matsygud 12.02.2021 Обработка для БЕ 20
          DELETE gt_esf_data_filtered WHERE NOT belnr IS INITIAL
                                         OR NOT code_pokup_fil+2(2) = '99'
                                         OR filtered = abap_true
                                         OR ( id_stat_esf_p <> lcl_report=>gc_stat_p_completed
                                          AND id_stat_esf_p <> lcl_report=>gc_stat_p_on_agreement
                                          AND id_stat_esf_p <> lcl_report=>gc_stat_p_in_progress ).   "DHVK941587).
        ENDIF."V.Matsygud 12.02.2021 Обработка для БЕ 20

        build_mode3_fi_filter( ).
      WHEN 'VIEW_ALL'.
        data_view_all_on( ).
      WHEN 'VIEW_FILTERED'.
        data_view_all_off( ).
      WHEN 'UNP_ON'.
        gt_fi_data_filtered_unp = gt_fi_data_filtered.
        IF NOT gs_part2-unp_post IS INITIAL.
          DELETE gt_fi_data_filtered WHERE unp <> gs_part2-unp_post.
        ELSE.
          CLEAR gt_fi_data_filtered.
        ENDIF.

        gv_auto_mode_3 = COND #( WHEN gv_unp_filter_3 = abap_true THEN abap_false ).
      WHEN 'UNP_OFF'.
        data_fi_unp_clearing( ).
        gt_fi_data_filtered = gt_fi_data_filtered_unp.
      WHEN 'AUTO_ON'.
        gt_fi_data_filtered_auto = gt_fi_data_filtered.
        CLEAR gt_fi_data_filtered.

        gv_unp_filter_3 = COND #( WHEN gv_auto_mode_3 = abap_true THEN abap_false ).
      WHEN 'AUTO_OFF'.
        data_fi_auto_clearing( ).
        gt_fi_data_filtered = gt_fi_data_filtered_auto.
    ENDCASE.
  ENDMETHOD.

  METHOD build_mode3_fi_filter.
    gt_fi_data_filtered = gt_fi_data.
    DELETE gt_fi_data_filtered WHERE NOT n_esf IS INITIAL.
    SORT gt_fi_data_filtered BY bukrs belnr gjahr mwskz.
  ENDMETHOD.

  METHOD show_1_n_grid.
    DATA:
      lt_fcat    TYPE lvc_t_fcat,
      lt_exclude TYPE ui_functions,
      ls_variant TYPE disvariant.

    ls_variant-report = sy-repid.
    ls_variant-handle   = COND #( WHEN p_mode1 IS NOT INITIAL THEN 'A' ELSE 'B' ).
    ls_variant-handle+1(1) = 'C'.
    ls_variant-handle+2(1) = lcl_report_in=>gv_mode+4(1).
    ls_variant-handle+3(1) = SWITCH #( lcl_report_in=>gv_detail_sign
                                    WHEN 'ESF' THEN 'A'
                                    WHEN 'FI'  THEN 'B'
                                    WHEN 'LOCK_LIST_ESF' THEN 'C'
                                    WHEN 'LOCK_LIST_FI'  THEN 'D'
                                    ELSE 'I'
                          ).
    CASE gv_detail_sign.
      WHEN 'FI' OR 'LOCK_LIST_FI'.
        lt_fcat = VALUE #( ( fieldname = 'BUKRS' ref_table = 'BKPF' ref_field = 'BUKRS' )
                           ( fieldname = 'BELNR' ref_table = 'BKPF' ref_field = 'BELNR' hotspot = abap_true )
                           ( fieldname = 'GJAHR' ref_table = 'BKPF' ref_field = 'GJAHR' )
                           ( fieldname = 'SUM_NONDS'  ref_table = 'ZFI_ESF' ref_field = 'SUM_NONDS' )
                           ( fieldname = 'SUM_SNDS'   ref_table = 'ZFI_ESF' ref_field = 'SUM_SNDS'  )
                           ( fieldname = 'SUM_NDS'    ref_table = 'ZFI_ESF' ref_field = 'SUM_NDS'    )
                           ( fieldname = 'SUM_EXCISE' ref_table = 'ZFI_ESF' ref_field = 'SUM_EXCISE' )
                           ( fieldname = 'STORNO'     coltext = TEXT-f40 icon = abap_true )
                         ).


      WHEN 'ESF' OR 'LOCK_LIST_ESF'.
        lt_fcat = VALUE #( ( fieldname = 'N_ESF' ref_table = 'ZFI_ESF' ref_field = 'N_ESF' )
                         ).
    ENDCASE.

    APPEND cl_gui_alv_grid=>mc_fc_excl_all TO lt_exclude.

*    gr_cont_detail = NEW #( side = cl_gui_docking_container=>dock_at_top extension = 1000 ).
*     gr_cont_detail  = NEW #( i_parent  ).
    gr_grid_detail = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'DETAIL_CONT' ) ).

    gr_grid_detail->set_table_for_first_display(
      EXPORTING
        it_toolbar_excluding = lt_exclude
        is_layout            = VALUE #( zebra = abap_true cwidth_opt = abap_true no_rowmark = abap_true )
        i_save               = 'A'
        is_variant          = ls_variant
      CHANGING
        it_outtab            = et_data
        it_fieldcatalog      = lt_fcat ).

    SET HANDLER on_hotspot_detail
            FOR gr_grid_detail.
  ENDMETHOD.

  METHOD popup_to_confirm.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        titlebar              = iv_titlebar
        text_question         = iv_text_question
        text_button_1         = 'Да'(m03)
        text_button_2         = 'Нет'(m04)
        default_button        = '2'
        display_cancel_button = iv_cancel
      IMPORTING
        answer                = rv_answer
      EXCEPTIONS
        text_not_found        = 1
        OTHERS                = 2.
  ENDMETHOD.

  METHOD filtered_to_main.
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data_filtered>).
      ASSIGN gt_esf_data[  KEY k1 pr_esf = <ls_esf_data_filtered>-pr_esf
                                  n_esf  = <ls_esf_data_filtered>-n_esf ]
        TO FIELD-SYMBOL(<ls_esf_data>).
      IF sy-subrc = 0.
        <ls_esf_data> = <ls_esf_data_filtered>.
      ENDIF.
    ENDLOOP.

    IF iv_mode = '3'.
      data_fi_unp_clearing( ).
      LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>).
        READ TABLE gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data>)
                              WITH KEY bukrs = <ls_fi_data_filtered>-bukrs
                                       belnr = <ls_fi_data_filtered>-belnr
                                       gjahr = <ls_fi_data_filtered>-gjahr
                                       mwskz = <ls_fi_data_filtered>-mwskz
                              BINARY SEARCH.
        IF sy-subrc = 0.
          DELETE gt_fi_data INDEX sy-tabix.
          INSERT <ls_fi_data_filtered> INTO gt_fi_data INDEX sy-tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.

  METHOD data_view_all_on.
    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE code_pokup_fil IS INITIAL
                                                               AND id_stat_esf_p <> lcl_report=>gc_stat_p_cancelled
                                                               AND id_stat_esf_p <> lcl_report=>gc_stat_p_completed_signed
                                                               AND id_stat_esf_p <> lcl_report=>gc_stat_p_on_agreement_cancel.
      APPEND VALUE #( BASE CORRESPONDING #( <ls_esf_data> )
                        filtered = abap_true
                      ) TO gt_esf_data_filtered.

    ENDLOOP.
  ENDMETHOD.

  METHOD data_view_all_off.
    DATA:
      lr_bukrs TYPE RANGE OF t001-bukrs.

    SELECT 'I' AS sign, 'EQ' AS option, '90' && bukrs AS low
      FROM t001
      INTO CORRESPONDING FIELDS OF TABLE @lr_bukrs
     WHERE bukrs IN @so_bukrs ORDER BY bukrs.

    DATA bukrs_20 TYPE t001-bukrs. "V.Matsygud 12.02.2021 Обработка для БЕ 20
    bukrs_20 = 'IEQ9099'.
    IF so_bukrs[ 1 ]-low = '20'.
      APPEND bukrs_20 TO lr_bukrs.
    ENDIF.  "V.Matsygud 12.02.2021 Обработка для БЕ 20

    DELETE gt_esf_data_filtered WHERE NOT code_pokup_fil IN lr_bukrs
                                       OR filtered = abap_true
                                       OR ( id_stat_esf_p <> lcl_report=>gc_stat_p_completed
                                        AND id_stat_esf_p <> lcl_report=>gc_stat_p_on_agreement ).
  ENDMETHOD.

  METHOD data_fi_unp_clearing.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>).
      READ TABLE gt_fi_data_filtered_unp TRANSPORTING NO FIELDS
                                         WITH KEY bukrs = <ls_fi_data_filtered>-bukrs
                                                  belnr = <ls_fi_data_filtered>-belnr
                                                  gjahr = <ls_fi_data_filtered>-gjahr
                                                  mwskz = <ls_fi_data_filtered>-mwskz
                                         BINARY SEARCH.
      IF sy-subrc = 0.
        gt_fi_data_filtered_unp[ sy-tabix ] = <ls_fi_data_filtered>.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD data_fi_auto_clearing.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>).
      READ TABLE gt_fi_data_filtered_auto TRANSPORTING NO FIELDS
                                          WITH KEY bukrs = <ls_fi_data_filtered>-bukrs
                                                   belnr = <ls_fi_data_filtered>-belnr
                                                   gjahr = <ls_fi_data_filtered>-gjahr
                                                   mwskz = <ls_fi_data_filtered>-mwskz
                                          BINARY SEARCH.
      IF sy-subrc = 0.
        DELETE gt_fi_data_filtered_auto INDEX sy-tabix.
        INSERT <ls_fi_data_filtered> INTO gt_fi_data_filtered_auto INDEX sy-tabix.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_changed_esf_data.
    TYPES:
      BEGIN OF lty_s_esf_new,
        pr_esf    TYPE zfi_esf-pr_esf,
        n_esf     TYPE zfi_esf-n_esf,
        last_user TYPE zfi_esf-last_user,
        tstampl   TYPE zfi_esf-tstampl,
      END OF lty_s_esf_new.

    DATA:
      lt_esf_new TYPE SORTED TABLE OF lty_s_esf_new WITH NON-UNIQUE KEY pr_esf n_esf,
      lv_text    TYPE char100.

    gt_esf_list = VALUE #( FOR ls_data IN gt_esf_data_filtered WHERE ( chk_box = abap_true ) ( pr_esf = ls_data-pr_esf
                                                                                               n_esf  = ls_data-n_esf ) ).

    IF NOT gt_esf_list IS INITIAL.
      SELECT pr_esf n_esf last_user tstampl
        FROM zfi_esf
        INTO TABLE lt_esf_new
         FOR ALL ENTRIES IN gt_esf_list
       WHERE pr_esf = gt_esf_list-pr_esf
         AND n_esf = gt_esf_list-n_esf.

      LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true.
*        MOVE-CORRESPONDING <ls_data> TO ls_esf_old.
        LOOP AT lt_esf_new ASSIGNING FIELD-SYMBOL(<ls_esf_new>) WHERE n_esf = <ls_data>-n_esf.
*          IF <ls_esf_new>-tstampl > <ls_data>-tstampl AND <ls_esf_new>-last_user <> sy-uname.
          IF <ls_esf_new>-tstampl > <ls_data>-tstampl.
            get_uname( EXPORTING iv_uname = CONV xubname( <ls_esf_new>-last_user ) IMPORTING ev_full_name = lv_text ).

            CONCATENATE 'ЭСЧФ были изменены пользователем'(m30) lv_text INTO lv_text SEPARATED BY space.
            CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
            MESSAGE lv_text TYPE 'I'.

            rv_error = abap_true.
            FREE gt_esf_list.
            RETURN.
          ENDIF.
        ENDLOOP.
      ENDLOOP.

      FREE gt_esf_list.
    ENDIF.
  ENDMETHOD.

  METHOD data_fi_auto_match.
    DATA:
      lv_sum   TYPE bset-hwste,
      lv_nds   TYPE bset-hwste,
      lv_tabix TYPE sy-tabix.

    CLEAR:
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
      gv_esf_auto_mode,
      gv_fi_auto_mode,
* <-- AK_BUTVILOVS #8000001141
      gt_fi_data_filtered.

    SORT gt_fi_data_filtered_auto BY unp xblnr.
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*    DATA(lv_xblnr) =   is_esf_data-ser_tp_blank && is_esf_data-n_tp_blank.
    DATA(lv_xblnr) = cs_esf_data-ser_tp_blank && cs_esf_data-n_tp_blank.
* <-- AK_BUTVILOVS #8000001141
    READ TABLE gt_fi_data_filtered_auto TRANSPORTING NO FIELDS
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*                                        WITH KEY unp = is_esf_data-unp_post
                                        WITH KEY unp   = cs_esf_data-unp_post
* <-- AK_BUTVILOVS #8000001141
                                                 xblnr = lv_xblnr
                                          BINARY SEARCH.
    .
    IF sy-subrc <> 0.
      READ TABLE gt_fi_data_filtered_auto TRANSPORTING NO FIELDS
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*                                          WITH KEY unp = is_esf_data-unp_post
                                          WITH KEY unp   = cs_esf_data-unp_post
*                                                   xblnr = is_esf_data-n_tp_blank
                                                   xblnr = cs_esf_data-n_tp_blank
* <-- AK_BUTVILOVS #8000001141
                                          BINARY SEARCH.
    ENDIF.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.

      LOOP AT gt_fi_data_filtered_auto ASSIGNING FIELD-SYMBOL(<ls_fi_data>) FROM sy-tabix.
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*        IF ( <ls_fi_data>-n_esf <> abap_false AND <ls_fi_data>-n_esf <> is_esf_data-n_esf )
        IF ( <ls_fi_data>-n_esf <> abap_false AND <ls_fi_data>-n_esf <> cs_esf_data-n_esf )
*          OR <ls_fi_data>-unp <> is_esf_data-unp_post
          OR <ls_fi_data>-unp <> cs_esf_data-unp_post
*          OR ( <ls_fi_data>-xblnr <> is_esf_data-n_tp_blank AND <ls_fi_data>-xblnr <> lv_xblnr ).
          OR ( <ls_fi_data>-xblnr <> cs_esf_data-n_tp_blank AND <ls_fi_data>-xblnr <> lv_xblnr ).
* <-- AK_BUTVILOVS #8000001141
          EXIT.
        ENDIF.
        lv_sum = lv_sum + <ls_fi_data>-total_w_vat.
        lv_nds = lv_nds + <ls_fi_data>-total_vat.

        APPEND <ls_fi_data> TO gt_fi_data_filtered.
      ENDLOOP.
    ENDIF.
* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
*    IF lv_sum <> is_esf_data-sum_snds OR lv_nds <> is_esf_data-sum_nds.
    IF lv_sum <> cs_esf_data-sum_snds OR lv_nds <> cs_esf_data-sum_nds.
* <-- AK_BUTVILOVS #8000001141
      CLEAR gt_fi_data_filtered.
    ENDIF.

* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      <ls_esf_data>-chk_box = abap_false.
    ENDLOOP.

    LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data>.
      <ls_fi_data>-chk_box = abap_true.
      gv_fi_auto_mode = <ls_fi_data>-bukrs && <ls_fi_data>-belnr && <ls_fi_data>-gjahr.
    ENDLOOP.
    IF sy-subrc = 0.
      cs_esf_data-chk_box = abap_true.
      gv_esf_auto_mode = cs_esf_data-n_esf && cs_esf_data-pr_esf.
    ENDIF.
* <-- AK_BUTVILOVS #8000001141

    SORT gt_fi_data_filtered BY bukrs belnr gjahr mwskz.
    SORT gt_fi_data_filtered_auto BY bukrs belnr gjahr mwskz.
  ENDMETHOD.

  METHOD match_esf_and_fi_manual_mode.
    TYPES:
      BEGIN OF lty_s_bln,
        bukrs TYPE bkpf-bukrs,
        belnr TYPE bkpf-belnr,
        gjahr TYPE bkpf-gjahr,
      END OF lty_s_bln.
    DATA: lt_esf_mod TYPE gty_t_esf,
          lv_sum_fi  TYPE bset-hwste,
          lv_nds_fi  TYPE bset-hwste,
          lv_sum_esf TYPE bset-hwste,
          lv_nds_esf TYPE bset-hwste,
          lv_text    TYPE text100,
          lv_answer  TYPE char1,
          lt_r_esf   TYPE RANGE OF zfi_esf-n_esf,
          lt_sel_fi  TYPE SORTED TABLE OF lty_s_bln WITH UNIQUE KEY bukrs belnr gjahr,
          lv_cnt_esf TYPE i,
          lv_cnt_fi  TYPE i.

    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      IF NOT <ls_esf_data>-belnr IS INITIAL.
        CONCATENATE <ls_esf_data>-n_esf ': для ЭСЧФ уже существует связь' INTO lv_text.
        MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      IF  <ls_esf_data>-id_stat_esf_p = lcl_report=>gc_stat_p_in_progress.  "{DHVK941587
        MESSAGE i026(zfi_esf) WITH <ls_esf_data>-n_esf.
        RETURN.
      ENDIF.                                                                "}DHVK941587
      lv_sum_esf = lv_sum_esf + <ls_esf_data>-sum_snds.
      lv_nds_esf = lv_nds_esf + <ls_esf_data>-sum_nds.
      lv_cnt_esf = lv_cnt_esf + 1.
      READ TABLE lt_r_esf WITH KEY low = <ls_esf_data>-n_esf
        TRANSPORTING NO FIELDS
        BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( sign = 'I' option = 'EQ' low = <ls_esf_data>-n_esf )
          INTO TABLE lt_r_esf.
      ENDIF.
    ENDLOOP.

    IF lv_cnt_esf = 0.
      MESSAGE 'Выберите ЭСЧФ'(m09) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    "выборка корректировок ESF
    IF lt_r_esf IS NOT INITIAL.
      SELECT SUM( nds ) AS nds , SUM( snds ) AS snds
        FROM zfi_esf_deduct AS z
        WHERE z~n_esf IN @lt_r_esf
      INTO @DATA(ls_esf_d).

      ADD ls_esf_d-nds  TO lv_nds_esf.
      ADD ls_esf_d-snds TO lv_sum_esf.
      FREE lt_r_esf.
    ENDIF.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      lv_cnt_fi = lv_cnt_fi + 1.
      lv_sum_fi = lv_sum_fi + <ls_fi_data>-total_w_vat.
      lv_nds_fi = lv_nds_fi + <ls_fi_data>-total_vat.
      CALL FUNCTION 'ENQUEUE_EFBKPF'
        EXPORTING
          mode_bkpf      = 'E'
          mandt          = sy-mandt
          bukrs          = <ls_fi_data>-bukrs
          belnr          = <ls_fi_data>-belnr
          gjahr          = <ls_fi_data>-gjahr
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        RETURN.
      ENDIF.

      INSERT VALUE #( bukrs = <ls_fi_data>-bukrs
                      belnr = <ls_fi_data>-belnr
                      gjahr = <ls_fi_data>-gjahr )
          INTO TABLE lt_sel_fi.
    ENDLOOP.



    IF lv_cnt_fi = 0.
      MESSAGE 'Выберите FI-документы'(m14) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    "выборка корректировок BSET
    IF lt_sel_fi IS NOT INITIAL.
      SELECT nds, snds
        FROM zfi_bset_deduct AS z
        FOR ALL ENTRIES IN @lt_sel_fi
        WHERE z~bukrs = @lt_sel_fi-bukrs
         AND  z~belnr = @lt_sel_fi-belnr
         AND  z~gjahr = @lt_sel_fi-gjahr
      INTO TABLE @DATA(lt_bst_d).
      LOOP AT lt_bst_d ASSIGNING FIELD-SYMBOL(<lv_bst_d>).
        ADD <lv_bst_d>-nds  TO  lv_nds_fi.
        ADD <lv_bst_d>-snds TO  lv_sum_fi.
      ENDLOOP.
      FREE lt_bst_d.
      UNASSIGN <lv_bst_d>.
      " проверка наличия сторнированных документов
      SELECT bukrs, belnr, gjahr
        FROM bkpf AS z
        FOR ALL ENTRIES IN @lt_sel_fi
        WHERE z~bukrs = @lt_sel_fi-bukrs
         AND  z~belnr = @lt_sel_fi-belnr
         AND  z~gjahr = @lt_sel_fi-gjahr
         AND  ( z~xreversed = 'X' OR z~xreversing = 'X' )
      INTO  TABLE @DATA(lt_canceled).
      IF sy-subrc = 0 .
        MESSAGE i003(zfi_esf) WITH lt_canceled[ 1 ]-bukrs lt_canceled[ 1 ]-belnr lt_canceled[ 1 ]-gjahr.
        RETURN.
      ENDIF.
    ENDIF.


    IF NOT ( ( lv_cnt_esf = 1 AND lv_cnt_fi >= 1 ) OR ( lv_cnt_esf >= 1 AND lv_cnt_fi = 1 ) ).
      MESSAGE 'Возможна связь только "Один ко многим"'(m45) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    " Связь может быть только 1-N
    " Проверяем чтобы УНП, ссылочнвй документ и суммы с НДС и НДС совпадали
    IF lv_nds_fi <> lv_nds_esf.

      IF lv_nds_fi > lv_nds_esf.
        MESSAGE i001(zfi_esf) WITH lv_nds_fi lv_nds_esf .
        RETURN.
      ELSE.
        MESSAGE i002(zfi_esf) WITH lv_nds_fi lv_nds_esf .
        RETURN.
      ENDIF.
    ENDIF.
    IF lv_sum_fi <> lv_sum_esf.
      IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                     iv_cancel = abap_false
       iv_text_question = |{ TEXT-m79 } { 'документа'(m80) } { lv_sum_fi } { 'и ЭСЧФ'(m81) } { lv_sum_esf } { 'не совпадает. Продолжить?'(m82) } | )
       <> '1'.
        RETURN.
      ENDIF.
    ENDIF.


    LOOP AT gt_esf_data_filtered ASSIGNING <ls_esf_data> WHERE chk_box = abap_true.
      "если по позиционно проверка не прошла то выход
      LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data> WHERE chk_box = abap_true.
        "{ DHVK933945
        IF <ls_fi_data>-bldat <> <ls_esf_data>-dt_doc.
          IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                          iv_cancel = abap_false
                                iv_text_question = |{ TEXT-t09 } { <ls_fi_data>-bldat DATE = ENVIRONMENT } { TEXT-x98 } { <ls_esf_data>-dt_doc DATE = ENVIRONMENT } { TEXT-m82 } | )
            <> '1'.
            RETURN.
          ENDIF.
        ENDIF.
        IF <ls_fi_data>-ndoc <> <ls_esf_data>-n_dog.
          IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                          iv_cancel = abap_false
                                iv_text_question = |{ TEXT-t10 } { <ls_fi_data>-ndoc } { TEXT-m81 } { <ls_esf_data>-n_dog } { TEXT-m82 } | )
            <> '1'.
            RETURN.
          ENDIF.
        ENDIF.
        "} DHVK933945

        "  #8000001291, ZFI_REGINV Добавление «Код типа бланка»
        IF <ls_fi_data>-zzttn_code IS NOT INITIAL.
          IF <ls_fi_data>-zzttn_code = <ls_esf_data>-code_tp_blank    OR
             <ls_fi_data>-zzttn_code = <ls_esf_data>-code_tp_blank_02 OR
             <ls_fi_data>-zzttn_code = <ls_esf_data>-code_tp_blank_03 .
            " ok
          ELSE.
            IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                                      iv_cancel = abap_false
                iv_text_question = |{ TEXT-t14 } { <ls_fi_data>-zzttn_code } { TEXT-t15 } { <ls_esf_data>-code_tp_blank } { <ls_esf_data>-code_tp_blank_02 } { <ls_esf_data>-code_tp_blank_03 } { TEXT-t16 } | )
                        <> '1'.
              RETURN.
            ENDIF.
          ENDIF.
        ENDIF.

        IF <ls_fi_data>-unp <> <ls_esf_data>-unp_post.
          IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                          iv_cancel = abap_false
                                iv_text_question = |{ TEXT-m84 } { TEXT-m80 } { <ls_fi_data>-unp } { TEXT-m81 } { <ls_esf_data>-unp_post } { TEXT-m82 } | )
            <> '1'.
            RETURN.
          ENDIF.
        ENDIF.

        " <ls_fi_data>-xblnr может содержать серию и номер через пробел, а возможно просто номер ???
        SPLIT <ls_fi_data>-xblnr AT space INTO TABLE DATA(lt_spl).
        IF lines( lt_spl ) = 2 .
          DATA(lv_ser) = lt_spl[ 1 ].
          DATA(lv_n) = lt_spl[ 2 ].
        ELSEIF lines( lt_spl ) = 1.
          CLEAR lv_ser.
          lv_n = lt_spl[ 1 ].
        ENDIF.

        " проверяем серию и номер
        IF ( lv_n = <ls_esf_data>-n_tp_blank    OR
           lv_n = <ls_esf_data>-n_tp_blank_02   OR
           lv_n = <ls_esf_data>-n_tp_blank_03  ) AND
           ( lv_ser IS INITIAL OR
             lv_ser = <ls_esf_data>-ser_tp_blank OR
             lv_ser = <ls_esf_data>-ser_tp_blank_02 OR
             lv_ser = <ls_esf_data>-ser_tp_blank_03  ) .
          " ok
        ELSE.
          IF lv_ser IS NOT INITIAL . "есть буквенная серия
            IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                            iv_cancel = abap_false
iv_text_question = |{ TEXT-m85 } { TEXT-m80 } { <ls_fi_data>-xblnr } { TEXT-m81 } { <ls_esf_data>-ser_tp_blank } { <ls_esf_data>-n_tp_blank }, { <ls_esf_data>-ser_tp_blank_02 } { <ls_esf_data>-n_tp_blank_02 }, { <ls_esf_data>-ser_tp_blank_03
} { <ls_esf_data>-n_tp_blank_03 } { TEXT-m82 } | )
<> '1'.
              RETURN.
            ENDIF.
          ELSE . " нет серии, есть только номер
            IF popup_to_confirm(  EXPORTING iv_titlebar = TEXT-m01
                                                        iv_cancel = abap_false
              iv_text_question = |{ TEXT-m85 } { TEXT-m80 } { <ls_fi_data>-xblnr } { TEXT-m81 } { <ls_esf_data>-n_tp_blank }, { <ls_esf_data>-n_tp_blank_02 }, { <ls_esf_data>-n_tp_blank_03 } { TEXT-m82 } | )
              <> '1'.
              RETURN.
            ENDIF.
          ENDIF .
        ENDIF.
      ENDLOOP.
    ENDLOOP.
    LOOP AT gt_esf_data_filtered ASSIGNING <ls_esf_data> WHERE chk_box = abap_true.
      LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data> WHERE chk_box = abap_true.
        IF <ls_esf_data>-belnr IS INITIAL OR <ls_esf_data>-belnr = <ls_fi_data>-belnr.
          <ls_esf_data>-bukrs = <ls_fi_data>-bukrs.
          <ls_esf_data>-belnr = <ls_fi_data>-belnr.
          <ls_esf_data>-gjahr = <ls_fi_data>-gjahr.
        ELSE.
          CLEAR: <ls_esf_data>-bukrs, <ls_esf_data>-gjahr.
          <ls_esf_data>-belnr = lcl_report=>gc_1_n.
        ENDIF.

        IF <ls_fi_data>-n_esf IS INITIAL.
          <ls_fi_data>-n_esf = <ls_esf_data>-n_esf.
        ELSE.
          <ls_fi_data>-n_esf = lcl_report=>gc_1_n.
        ENDIF.

        READ TABLE gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>)
                                WITH KEY pr_esf = <ls_esf_data>-pr_esf
                                         n_esf  = <ls_esf_data>-n_esf
                                         bukrs  = <ls_fi_data>-bukrs
                                         belnr  = <ls_fi_data>-belnr
                                         gjahr  = <ls_fi_data>-gjahr
                                BINARY SEARCH.
        IF sy-subrc = 0.
          CLEAR <ls_esf_match>-del_flg.
        ELSE.
          INSERT VALUE #( pr_esf = <ls_esf_data>-pr_esf
                          n_esf = <ls_esf_data>-n_esf
                          bukrs = <ls_fi_data>-bukrs
                          belnr = <ls_fi_data>-belnr
                          gjahr = <ls_fi_data>-gjahr
                          sum_nonds = <ls_fi_data>-total_w_vat - <ls_fi_data>-total_vat
                          sum_nds = <ls_fi_data>-total_vat
                          sum_snds = <ls_fi_data>-total_w_vat
                          waers = <ls_fi_data>-waers ) INTO gt_esf_match INDEX sy-tabix.
        ENDIF.
      ENDLOOP.
      <ls_esf_data>-sum_nds_belnr = lv_nds_fi.
      <ls_esf_data>-sum_snds_belnr = lv_sum_fi.

      <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_matched.
      <ls_esf_data>-last_user = sy-uname.
      <ls_esf_data>-aedat = sy-datum.
      <ls_esf_data>-creat_user  = sy-uname.
      <ls_esf_data>-crdate = sy-datum.
    ENDLOOP.
  ENDMETHOD.

  METHOD match_esf_and_fi_auto_mode.
    DATA: lt_esf_mod TYPE gty_t_esf,
          lv_sum     TYPE bset-hwste,
          lv_nds     TYPE bset-hwste,
          lv_text    TYPE char100.

    IF lcl_report=>gv_n_esf IS INITIAL OR lcl_report=>gv_pr_esf IS INITIAL.
      MESSAGE 'Выберите ЭСЧФ'(m34) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    IF gt_fi_data_filtered IS INITIAL.
      MESSAGE 'Не найдено соответствующих FI-документов'(m35) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    READ TABLE gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WITH KEY chk_box = abap_true.
    IF <ls_esf_data> IS ASSIGNED.
      IF NOT <ls_esf_data>-belnr IS INITIAL.
        CONCATENATE <ls_esf_data>-n_esf ': для ЭСЧФ уже существует связь'(m39) INTO lv_text.
        MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

* --> AK_BUTVILOVS #8000001141, zfi_reginv Проблема подбора документов
      LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
        IF   gv_fi_auto_mode  <> <ls_fi_data>-bukrs && <ls_fi_data>-belnr && <ls_fi_data>-gjahr
          OR gv_esf_auto_mode <> <ls_esf_data>-n_esf && <ls_esf_data>-pr_esf.
          lv_text = |Выбранная ЭСЧФ { <ls_esf_data>-n_esf } отличается от исходной { gv_esf_auto_mode(25) } |.
          MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
          RETURN.
        ENDIF.
      ENDLOOP.
* <-- AK_BUTVILOVS #8000001141

      IF popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                     iv_text_question = 'Связать ЭСЧФ и FI-документ(ы)?'(m36) ) <> '1'.
        RETURN.
      ENDIF.

      LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data>.

        lv_sum = lv_sum + <ls_fi_data>-total_w_vat.
        lv_nds = lv_nds + <ls_fi_data>-total_vat.

        IF <ls_esf_data>-belnr IS INITIAL OR <ls_esf_data>-belnr = <ls_fi_data>-belnr.
          <ls_esf_data>-bukrs = <ls_fi_data>-bukrs.
          <ls_esf_data>-belnr = <ls_fi_data>-belnr.
          <ls_esf_data>-gjahr = <ls_fi_data>-gjahr.
        ELSE.
          CLEAR: <ls_esf_data>-bukrs, <ls_esf_data>-gjahr.
          <ls_esf_data>-belnr = lcl_report=>gc_1_n.
        ENDIF.

        IF <ls_fi_data>-n_esf IS INITIAL.
          <ls_fi_data>-n_esf = <ls_esf_data>-n_esf.
        ELSE.
          <ls_fi_data>-n_esf = lcl_report=>gc_1_n.
        ENDIF.

        READ TABLE gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>)
                                WITH KEY pr_esf = <ls_esf_data>-pr_esf
                                         n_esf  = <ls_esf_data>-n_esf
                                         bukrs  = <ls_fi_data>-bukrs
                                         belnr  = <ls_fi_data>-belnr
                                         gjahr  = <ls_fi_data>-gjahr
                                BINARY SEARCH.
        IF sy-subrc = 0.
          CLEAR <ls_esf_match>-del_flg.
        ELSE.
          INSERT VALUE #( pr_esf = <ls_esf_data>-pr_esf
                          n_esf = <ls_esf_data>-n_esf
                          bukrs = <ls_fi_data>-bukrs
                          belnr = <ls_fi_data>-belnr
                          gjahr = <ls_fi_data>-gjahr
                          sum_nonds = <ls_fi_data>-total_w_vat - <ls_fi_data>-total_vat
                          sum_nds = <ls_fi_data>-total_vat
                          sum_snds = <ls_fi_data>-total_w_vat
                          waers = <ls_fi_data>-waers ) INTO gt_esf_match INDEX sy-tabix.
        ENDIF.
      ENDLOOP.

      <ls_esf_data>-sum_nds_belnr = lv_nds.
      <ls_esf_data>-sum_snds_belnr = lv_sum.

      <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_matched.
      <ls_esf_data>-last_user = sy-uname.
      <ls_esf_data>-aedat = sy-datum.
      <ls_esf_data>-creat_user = sy-uname.
      <ls_esf_data>-crdate = sy-datum.

    ENDIF.
  ENDMETHOD.

  METHOD check_changed_fi_data.
    DATA:
      lt_fi_data   TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
      lt_esf_match TYPE TABLE OF zfi_esf_match,
      lv_text      TYPE char100.

    lt_fi_data = VALUE #( FOR ls_fi_data IN gt_fi_data_filtered WHERE ( chk_box = abap_true ) ( bukrs = ls_fi_data-bukrs
                                                                                                belnr = ls_fi_data-belnr
                                                                                                gjahr = ls_fi_data-gjahr ) ).
    SORT lt_fi_data. DELETE ADJACENT DUPLICATES FROM lt_fi_data COMPARING ALL FIELDS.

    IF NOT lt_fi_data IS INITIAL.
      SELECT m~n_esf, m~bukrs, m~belnr, m~gjahr
        FROM zfi_esf_match AS m
          JOIN zfi_esf AS e ON e~n_esf = m~n_esf
                            AND e~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled
                            AND e~id_stat_esf_v <> @lcl_report=>gc_stat_v_cancelled
        INTO CORRESPONDING FIELDS OF TABLE @lt_esf_match
        FOR ALL ENTRIES IN @lt_fi_data
       WHERE m~pr_esf = @lcl_report=>gc_in_inv
         AND m~bukrs = @lt_fi_data-bukrs
         AND m~belnr = @lt_fi_data-belnr
         AND m~gjahr = @lt_fi_data-gjahr.
      IF sy-subrc <> 0.
        rv_error = abap_false.
      ELSE.
        LOOP AT lt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
          CONCATENATE 'Документ'
                      <ls_esf_match>-bukrs
                      <ls_esf_match>-belnr
                      <ls_esf_match>-gjahr
                      'уже связан с ЭСЧФ'
                      <ls_esf_match>-n_esf INTO lv_text SEPARATED BY space.
          CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
          MESSAGE lv_text TYPE 'I'.

          rv_error = abap_true.
          RETURN.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD check_marked_lines_esf.
    IF NOT line_exists(  gt_esf_data_filtered[ chk_box = abap_true ]  ) .
      rv_error = abap_true.
      MESSAGE 'Выберите ЭСЧФ'(m09) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_data_1.
    DATA:
      lv_text TYPE char100.

    LOOP AT it_good_cells ASSIGNING FIELD-SYMBOL(<ls_good_cels>) WHERE fieldname = 'CHK_BOX'.
      ASSIGN gt_esf_data_filtered[ <ls_good_cels>-row_id ] TO FIELD-SYMBOL(<ls_esf_data_filtered>).
      IF sy-subrc = 0.
        CASE <ls_good_cels>-value.
          WHEN abap_true.
            CALL FUNCTION 'ENQUEUE_EZFI_ESF'
              EXPORTING
                mode_zfi_esf   = 'E'
                mandt          = sy-mandt
                pr_esf         = <ls_esf_data_filtered>-pr_esf
                n_esf          = <ls_esf_data_filtered>-n_esf
              EXCEPTIONS
                foreign_lock   = 1
                system_failure = 2
                OTHERS         = 3.
            IF sy-subrc <> 0.
              get_uname( EXPORTING iv_uname = CONV xubname( sy-msgv1 ) IMPORTING ev_full_name = lv_text ).
              lv_text = 'ЭСЧФ уже обрабатывается пользователем'(m46) && ` ` && lv_text.
              MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
              <ls_esf_data_filtered>-chk_box = abap_false.
            ENDIF.
          WHEN abap_false.
            CALL FUNCTION 'DEQUEUE_EZFI_ESF'
              EXPORTING
                mode_zfi_esf = 'E'
                mandt        = sy-mandt
                pr_esf       = <ls_esf_data_filtered>-pr_esf
                n_esf        = <ls_esf_data_filtered>-n_esf.
        ENDCASE.
      ENDIF.
      sy-subrc = 0.
    ENDLOOP.
    IF sy-subrc = 0.
      CASE gv_mode.
        WHEN gc_mode1 OR gc_mode2.
          refresh_alv( gr_grid_1 ).
        WHEN gc_mode3.
          refresh_alv( gr_grid_2 ).
      ENDCASE.
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_data_3.
    DATA:
      lv_text TYPE char100.

    LOOP AT it_good_cells ASSIGNING FIELD-SYMBOL(<ls_good_cels>) WHERE fieldname = 'CHK_BOX'.
      ASSIGN gt_fi_data_filtered[ <ls_good_cels>-row_id ] TO FIELD-SYMBOL(<ls_fi_data_filtered>).
      IF sy-subrc = 0.
        CASE <ls_good_cels>-value.
          WHEN abap_true.
            CALL FUNCTION 'ENQUEUE_EZFI_ESF_FI_LOCK'
              EXPORTING
                mode_zfi_esf_fi_lock = 'E'
                pr_esf               = lcl_report=>gc_in_inv
                bukrs                = <ls_fi_data_filtered>-bukrs
                belnr                = <ls_fi_data_filtered>-belnr
                gjahr                = <ls_fi_data_filtered>-gjahr
              EXCEPTIONS
                foreign_lock         = 1
                system_failure       = 2
                OTHERS               = 3.
            IF sy-subrc <> 0.
              get_uname( EXPORTING iv_uname = CONV xubname( sy-msgv1 ) IMPORTING ev_full_name = lv_text ).
              lv_text = 'Документ уже обрабатывается пользователем'(m47) && ` ` && lv_text.
              MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
              <ls_fi_data_filtered>-chk_box = abap_false.
            ENDIF.
          WHEN abap_false.
            CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
              EXPORTING
                mode_zfi_esf_fi_lock = 'E'
                pr_esf               = lcl_report=>gc_in_inv
                bukrs                = <ls_fi_data_filtered>-bukrs
                belnr                = <ls_fi_data_filtered>-belnr
                gjahr                = <ls_fi_data_filtered>-gjahr.
        ENDCASE.
      ENDIF.
      sy-subrc = 0.
    ENDLOOP.
    IF sy-subrc = 0.
      refresh_alv( gr_grid_3 ).
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_all_esf.
    CLEAR gt_esf_list.
    DATA lt_flt_sort TYPE SORTED TABLE OF i WITH UNIQUE KEY table_line.
    IF ir_grid IS BOUND.
      ir_grid->get_filtered_entries( IMPORTING et_filtered_entries = DATA(lt_flt)   ).
    ENDIF.
    lt_flt_sort = lt_flt.
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data_filtered>) WHERE chk_box = abap_false.
      DATA(lv_tabix) = sy-tabix.
      IF line_exists( lt_flt_sort[ table_line = sy-tabix ] ).
        CONTINUE.
      ENDIF.
      CALL FUNCTION 'ENQUEUE_EZFI_ESF'
        EXPORTING
          mode_zfi_esf   = 'E'
          mandt          = sy-mandt
          pr_esf         = <ls_esf_data_filtered>-pr_esf
          n_esf          = <ls_esf_data_filtered>-n_esf
        EXCEPTIONS
          foreign_lock   = 1
          system_failure = 2
          OTHERS         = 3.
      IF sy-subrc <> 0.
        READ TABLE gt_esf_list TRANSPORTING NO FIELDS
                               WITH KEY n_esf = <ls_esf_data_filtered>-n_esf
                               BINARY SEARCH.
        IF sy-subrc <> 0.
          INSERT VALUE #( n_esf = <ls_esf_data_filtered>-n_esf ) INTO gt_esf_list INDEX sy-tabix.
        ENDIF.
      ELSE.
        <ls_esf_data_filtered>-chk_box = abap_true.
      ENDIF.
    ENDLOOP.

    IF NOT gt_esf_list IS INITIAL.
      gv_detail_sign = 'LOCK_LIST_ESF'.

      DATA(lv_lines) = lines( gt_esf_list ).
      IF lv_lines < 21.
        lv_lines = lv_lines + 8.
      ELSE.
        lv_lines = 25.
      ENDIF.

      CALL SCREEN 1010 STARTING AT 35 8 ENDING AT 105 lv_lines.
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_all_fi.
    CLEAR gt_fi_list.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>).
      CALL FUNCTION 'ENQUEUE_EZFI_ESF_FI_LOCK'
        EXPORTING
          mode_zfi_esf_fi_lock = 'E'
          pr_esf               = lcl_report=>gc_in_inv
          bukrs                = <ls_fi_data_filtered>-bukrs
          belnr                = <ls_fi_data_filtered>-belnr
          gjahr                = <ls_fi_data_filtered>-gjahr
        EXCEPTIONS
          foreign_lock         = 1
          system_failure       = 2
          OTHERS               = 3.
      IF sy-subrc <> 0.
        READ TABLE gt_fi_list TRANSPORTING NO FIELDS
                              WITH KEY bukrs = <ls_fi_data_filtered>-bukrs
                                       belnr = <ls_fi_data_filtered>-belnr
                                       gjahr = <ls_fi_data_filtered>-gjahr
                              BINARY SEARCH.
        IF sy-subrc <> 0.
          INSERT VALUE #( bukrs = <ls_fi_data_filtered>-bukrs
                          belnr = <ls_fi_data_filtered>-belnr
                          gjahr = <ls_fi_data_filtered>-gjahr ) INTO gt_fi_list INDEX sy-tabix.
        ENDIF.
      ELSE.
        <ls_fi_data_filtered>-chk_box = abap_true.
      ENDIF.
    ENDLOOP.

    IF NOT gt_fi_list IS INITIAL.
      gv_detail_sign = 'LOCK_LIST_FI'.

      DATA(lv_lines) = lines( gt_fi_list ).
      IF lv_lines < 21.
        lv_lines = lv_lines + 8.
      ELSE.
        lv_lines = 25.
      ENDIF.

      CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
    ENDIF.
  ENDMETHOD.

  METHOD dequeue_all_esf.
    LOOP AT gt_esf_data_filtered ASSIGNING FIELD-SYMBOL(<ls_esf_data_filtered>) WHERE chk_box = abap_true.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING
          mode_zfi_esf = 'E'
          mandt        = sy-mandt
          pr_esf       = <ls_esf_data_filtered>-pr_esf
          n_esf        = <ls_esf_data_filtered>-n_esf.
      IF sy-subrc = 0.
        CLEAR <ls_esf_data_filtered>-chk_box.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD dequeue_all_fi.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>) WHERE chk_box = abap_true.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
        EXPORTING
          mode_zfi_esf_fi_lock = 'E'
          pr_esf               = lcl_report=>gc_in_inv
          bukrs                = <ls_fi_data_filtered>-bukrs
          belnr                = <ls_fi_data_filtered>-belnr
          gjahr                = <ls_fi_data_filtered>-gjahr.
      IF sy-subrc = 0.
        CLEAR <ls_fi_data_filtered>-chk_box.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_uname.
    SELECT SINGLE name_text
      FROM v_usr_name
      INTO ev_full_name
     WHERE bname = iv_uname.
    IF sy-subrc <> 0.
      ev_full_name = iv_uname.
    ENDIF.
  ENDMETHOD.

  METHOD refresh_data.
    DATA: lt_esf_data  TYPE TABLE OF zcl_fi_esf_amdp=>gty_s_esf_data,
          lt_fi_data   TYPE zcl_fi_esf_amdp=>gty_t_fi_data,
          lt_esf_match TYPE zcl_fi_esf_amdp=>gty_t_match_data.

    CLEAR gv_no_leave.

    IF iv_question = abap_true.
      DATA(lv_answer) = popup_to_confirm( EXPORTING iv_titlebar = 'Внимание!'(m01)
                                                    iv_text_question = 'Обновить данные?'(m49) ).
    ELSE.
      lv_answer = '1'.
    ENDIF.

    IF lv_answer = '1'.
      CLEAR: gt_esf_data, gt_esf_roster, gt_esf_match.

      get_esf_data( CHANGING et_data = gt_esf_data et_roster = gt_esf_roster et_match = gt_esf_match ).
      clear_detail( ).
*      data_new_to_old( ).

      CASE gv_mode.
        WHEN gc_mode1.
          build_mode1_filter( ).
        WHEN gc_mode2.
          CLEAR gt_esf_data_filtered.
          build_mode2_filter( EXPORTING iv_mode = 'BUILD' ).
        WHEN gc_mode3.
          get_fi_data( CHANGING et_data = gt_fi_data ).
*          gt_fi_data_old = gt_fi_data.
          CLEAR gt_fi_data_filtered.

          CLEAR: gv_auto_mode_3, gv_unp_filter_3.
          build_mode3_filter( EXPORTING iv_mode = 'BUILD' ).
      ENDCASE.
    ELSE.
      gv_no_leave = abap_true.
      RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD fill_ucomm_range.
    "сохранять данные для:
    lcl_report=>gr_save = VALUE #( ( sign = 'I' option = 'EQ' low = 'MODE1_APPROVE_NULL' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE1_GET_STATUS' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE1_DEL_RELATION' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE1_CHECKED_STATUS_ADD' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE1_CHECKED_STATUS_DEL' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE2_ADD_BUKRS' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE2_DEL_BUKRS' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE3_MATCH_ESF_AND_FI' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE3_DEL_RELATION' )
                                   ( sign = 'I' option = 'EQ' low = 'MODE3_DEL_BUKRS' ) ).

    "делать LEAVE SCREEN для:
    lcl_report=>gr_leave = VALUE #( ( sign = 'I' option = 'EQ' low = 'MODE1_REFRESH_DB' )
                                    ( sign = 'I' option = 'EQ' low = 'MODE2_ADD_BUKRS' )
                                    ( sign = 'I' option = 'EQ' low = 'MODE2_DEL_BUKRS' )
                                    ( sign = 'I' option = 'EQ' low = 'MODE2_REFRESH_DB' ) ).
  ENDMETHOD.

  METHOD refresh_alv.
    ir_grid->get_variant( IMPORTING es_variant = DATA(ls_variant) e_save = DATA(lv_save) ).
    ls_variant-handle+2(1) = lcl_report_in=>gv_mode+4(1).
    ir_grid->set_variant( EXPORTING is_variant = ls_variant i_save = lv_save ).

    ir_grid->get_frontend_layout( IMPORTING es_layout = DATA(ls_layout) ).
    IF ls_layout-cwidth_opt = '1'.
      ls_layout-cwidth_opt = abap_true.
    ENDIF.
    ir_grid->set_frontend_layout( is_layout = ls_layout ).

    ir_grid->refresh_table_display( is_stable = VALUE #( row = abap_true col = abap_true ) ).
  ENDMETHOD.

  METHOD check_reversed_fi_data.
    DATA:
      lt_fi_docs TYPE STANDARD TABLE OF gty_s_fi_list,
      lv_text    TYPE char100.

    lt_fi_docs = VALUE #( FOR ls_fi_data IN gt_fi_data_filtered WHERE ( chk_box = abap_true ) ( bukrs = ls_fi_data-bukrs
                                                                                                belnr = ls_fi_data-belnr
                                                                                                gjahr = ls_fi_data-gjahr ) ).

    CHECK NOT lt_fi_docs IS INITIAL.

    " проверка на сторнированные документы
    SELECT rbukrs, belnr, gjahr, xreversed
      FROM acdoca
      INTO TABLE @DATA(lt_acdoca)
      FOR ALL ENTRIES IN @lt_fi_docs
     WHERE rbukrs = @lt_fi_docs-bukrs
       AND belnr = @lt_fi_docs-belnr
       AND gjahr = @lt_fi_docs-gjahr
       AND xreversed = @abap_true.
    LOOP AT lt_acdoca ASSIGNING FIELD-SYMBOL(<ls_acdoca>).
      CONCATENATE 'Документ' <ls_acdoca>-rbukrs <ls_acdoca>-belnr <ls_acdoca>-gjahr 'был сторнирован' INTO lv_text SEPARATED BY space.
      MESSAGE lv_text TYPE 'I'.
    ENDLOOP.
    IF sy-subrc = 0.
      rv_error = abap_true.
      RETURN.
    ENDIF.
  ENDMETHOD.
ENDCLASS.