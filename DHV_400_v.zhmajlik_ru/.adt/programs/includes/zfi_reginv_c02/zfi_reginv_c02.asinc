*&---------------------------------------------------------------------*
*& Include          ZFI_REGINV_C02
*&---------------------------------------------------------------------*
*   История изменений
*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*   Номер       |  Комментарий
*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
*  #1           | #13837-134 DEV.030-БНУ.38.O-170 Изменение знака для 53 типа, вывод названия сбыт фактуры
*  #2           | #13837-163 DEV.030-БНУ.38.O-170 Изменение заполнение 43 типа, очитить поля Цена товара и Итого
*  #3           | #13837-205 DEV.030-БНУ.38.O-170 Для 32, 33 и 45-1 операции изменить алгоритм формирования Дата совершения операции ЭСЧФ
*  #4           | #13837-209 DEV.030-БНУ.38.O-170 Изменение 33 типа
*  #5           | #13837-210 DEV.030-БНУ.38.O-170 Изменение 32 типа
*  #6           | #13837-211 DEV.030-БНУ.38.O-170 Изменение знака FI документов для 32 и 681  типа
*  #7           | #13837-211 DEV.030-БНУ.38.O-170 Сохранение после операций с порталом
*  #8           | #13837-219 DEV.030-БНУ.38.O-170 Обновление статуса после подписания, доработка 31-го типа
*  #9           | #13837-265 DEV.030-БНУ.38.O-170 Изменение заполнения полей UN_GRPOL NM_GRPOL
*  #10          | #13837-267 DEV.030-БНУ.38.O-170 Унификация раазделов 1-5 для типов исх фактур 31 и 681
*  DHVK930347   | #13837-79б282 DEV.030-БНУ.38.O-170 Отображать ход процесса подписания ЭСЧФ(как входящих, так и исходящих ЭСЧФ) аналогично процессу загрузки. Шаг 10 документов.
*  DHVK930346   | Для всех типов исходящих ЭСЧФ дату и номер договора в случае если есть ссылка на основной договор(RMPS_T_CASE_ATTR-ZZ_DOPEXT_KEY) берем из него.
*  DHVK930820   | DEV.030-БНУ.38.O-170 1)31 "Реализация юр лицам РБ" цену в 6 разделе округляем до 2 знаков, не пересчитывая остальные колонки.
*                                      2)33 "Экспорт не ЕАЭС" цену в 6 разделе очищаем, не пересчитывая остальные колонки
*  DHVK931068   | DEV.030-БНУ.38.O-170 Отмена сопоставления для ЭСЧФ со статусом ошибка
*  DHVK931257   | DEV.030-БНУ.38.O-170 Бухг.фактуры для аннулированных ЭСЧФ включить в выборку
*  DHVK931287   | DEV.030-БНУ.38.O-170 Выборка реального курса
*  DHVK931835   | Создали Исходящий Исправленный ЭСЧФ. Перешли в режим "Управление" для редактирования этого ЭСЧФ.
*               | Поля: 8. УНП 9. Поставщик во втором разделе ЭСЧФ должны быть доступны для редактирования
*  DHVK932265   | в 33 типе исходящих ЭСЧФ необходимо заполнять поле UNP_POKUP как в 31 типе
*  DHVK932363   | Если выделить несколько документов относящихся к разным контрагентам - то сейчас выдается сообщение. Нам необходимо выдать запрос на разрешение такой операци по разным контрагентам, и пр положительном ответе создать ЭСЧФ.
*  DHVK934319   | Если в 6 разделе первые символы поля CODE_TOV_VED 3.1.Код товара (ТН ВЭД ЕАЭС) совпадают с значениями в Таблице ZFI_STRAT_GOODS то заполняется   признак PR_SDPER_POST
*               | Необходимо"Изменить тип сообщения на ошибку"- Раздел 6 не совпадает.
*  DHVK942202   | При создании дополнительных счетов фактур большая часть ЭСЧФ не заполняется, в том числе PR_VZML_POST. Но на этот признак завязано заполнение CODE_TOV_VED в шестом разделе. Соответсвенно при анализе этого признака необходимо идти в
*               | Исходный ЭСЧФ. Как минимум 31 и 681 типы ЭСЧФ(но возможно и другие)
*  #11          | 43 Ввозной не ЕАЭС.
*               | Меняем поиск ТНВЭД и Регистрационный номер выпуска товаров. Вместо таблицы ZCSSVHP используем ZCSSVHD. Вместо использования Заказа на поставку используем логистическую фактуру.
*  DHVK943067   | Использование номера исходной фактуры для генерации дополнительной ЭСЧФ
*  DHVK949928   | FI заполнение электронного номера документа
*  DHVK950017   | FI заполнение электронного номера документа (Изм. 22915)
*  DHVK950021   | FI заполнение электронного номера документа (Изм. 22915)
*  DHVK950029   | FI заполнение электронного номера документа (Изм. 22915)
*  DHVK951873   | 8000000077 Заполнение номера ТД и кода ТНВЭД, а также данных по грузоотправителю в ЭСЧФ "Ввозной не ЕАЭС"
*  DHVK966742   | 62 " Приобретение за пределами РБ без ввоза в РБ у взаимозависимых лиц (запросы "zfi_reginv 62 вид")
*  DHVK999546   | #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе zz_okrb значением 06100
*  DHVK9A00IC   | #29181 G.Domanikova 01/06/2023 #29181 Изменения в ЭСЧФ при ввозе товаров с территории ЕАЭС
*               |                                Изменение поля Стоимость товаров (работ, услуг), имущественных прав с учетом НДС, руб.
*               |                                Сохраним расчет для нового создания ESF NONDS(HWBAS)- ранее было NONDS + NDS
*               | #29181 G.Domanikova 08/06/2023 Анализ статуса по 42 ВО, изменение корректности сумм для статуса Проверено
*               | #29181 G.Domanikova 12/06/2023 Корректировка сумм с НДС в 6ом разделе, и XML для 42
*----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLASS lcl_report_out IMPLEMENTATION.
  METHOD last_mday.
    rv_mday = |{ iv_date(6) }01|.
    rv_mday = rv_mday + 33.
    rv_mday = |{ rv_mday(6) }01|.
    rv_mday = rv_mday - 1.
  ENDMETHOD.

  METHOD fill_esf_mwskz.
    IF line_exists( gt_esf_mlist[ pr_esf = is_esf-pr_esf
                                  n_esf  = is_esf-n_esf ] ).
      RETURN.
    ENDIF.
    " <--#25988 Перенос настроечной таблицы ZFI_roster_map в SPRO
    SELECT DISTINCT m~rate       AS st_nds,
                    dd07t~ddtext AS text1
      FROM zfi_esf_roster AS r
             JOIN
               zfi_st_nds AS m ON  r~id_tp_nds = m~id_tp_nds
                               AND ( r~st_nds = m~value_st_nds OR r~id_tp_nds = 'CALCULATED' )
                 LEFT JOIN
                   dd07t ON  dd07t~ddlanguage = @sy-langu
                         AND dd07t~domname    = 'ZFI_D_ESF_RATE'
                         AND dd07t~domvalue_l = m~rate
      INTO TABLE @DATA(lt_list)
      WHERE r~pr_esf = @is_esf-pr_esf
        AND r~n_esf  = @is_esf-n_esf.
    " >--#25988 Перенос настроечной таблицы ZFI_roster_map в SPRO

*      SELECT DISTINCT m~rate AS st_nds, dd07t~ddtext AS text1
*      FROM zfi_esf_roster AS r
*        JOIN  zfi_roster_map AS m ON r~id_tp_nds = m~id_tp_nds
*                                 AND ( r~st_nds = m~st_nds OR r~id_tp_nds = 'CALCULATED' )
*        LEFT JOIN dd07t ON dd07t~ddlanguage = @sy-langu
*                        AND dd07t~domname  = 'ZFI_D_ESF_RATE'
*                        AND dd07t~domvalue_l = m~rate
*      INTO TABLE @DATA(lt_list)
*      WHERE r~pr_esf = @is_esf-pr_esf
*        AND r~n_esf = @is_esf-n_esf.

    INSERT VALUE #( pr_esf = is_esf-pr_esf
                    n_esf  = is_esf-n_esf )
           INTO TABLE gt_esf_mlist ASSIGNING FIELD-SYMBOL(<ls_esf_mlist>).
    LOOP AT lt_list ASSIGNING FIELD-SYMBOL(<ls_list>).
      IF sy-tabix = 1.
        <ls_esf_mlist>-mlist = <ls_list>-st_nds.
      ELSE.
        <ls_esf_mlist>-mlist = |{ <ls_esf_mlist>-mlist },{ <ls_list>-st_nds }|.
      ENDIF.
      INSERT VALUE #( st_nds = <ls_list>-st_nds
                      text1  = <ls_list>-text1 )
             INTO TABLE <ls_esf_mlist>-t_mlist.
    ENDLOOP.
  ENDMETHOD.

  METHOD read_vbrp_all.
    DATA lt_utext TYPE zcl_text_for_material=>gty_t_mat_usl. " текст услуги
    DATA lt_mtext TYPE ztb_mat_text.                         " текст материала

    CLEAR rt_vbrp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      INSERT VALUE #( vbeln = COND #( WHEN iv_awkey = abap_true THEN <ls_fi_data_2>-awkey ELSE <ls_fi_data_2>-vbeln ) )
             INTO TABLE rt_vbrp.
    ENDLOOP.

    IF rt_vbrp IS INITIAL.
      RETURN.
    ENDIF.

    " 8000000248 поиск из настройки видов материала для услуг
    get_settings( ).

    SELECT vbrp~vbeln,
           vbrp~posnr,
           vbrp~fkimg,
           vbrp~netwr,
           vbrp~matnr,
           vbrp~vrkme,
           vbrp~arktx,
           vbrp~charg,
           vbrp~kzwi6,
           vbrp~mwsbp,
           mara~mtart,
           mara~zeinr,
           vbrp~shkzg,
           vbrp~waerk
      FROM vbrp
             JOIN
               mara ON mara~matnr = vbrp~matnr
      INTO CORRESPONDING FIELDS OF TABLE @rt_vbrp
      FOR ALL ENTRIES IN @rt_vbrp
      WHERE vbeln = @rt_vbrp-vbeln.
    LOOP AT rt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>).
      IF <ls_vbrp>-shkzg <> ''.
        <ls_vbrp>-netwr = - <ls_vbrp>-netwr.
        <ls_vbrp>-mwsbp = - <ls_vbrp>-mwsbp.
        <ls_vbrp>-koef  = -1.
      ELSE.
        <ls_vbrp>-koef = 1.
      ENDIF.
*      IF <ls_vbrp>-mtart = 'DIEN'. "услуга
      IF <ls_vbrp>-mtart IN gt_mtart_serv. " услуга
        INSERT VALUE #( tdname = <ls_vbrp>-vbeln && <ls_vbrp>-posnr ) INTO TABLE lt_utext.
      ELSE.
        IF NOT line_exists( lt_mtext[ matnr = <ls_vbrp>-matnr
                                      charg = <ls_vbrp>-charg ] ).
          INSERT VALUE #( matnr = <ls_vbrp>-matnr
                          charg = <ls_vbrp>-charg )
                 INTO TABLE lt_mtext.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF lt_mtext IS NOT INITIAL.
      zcl_text_for_material=>get_text_mat_v4( EXPORTING it_table = lt_mtext
                                              CHANGING  ct_table = lt_mtext ).
    ENDIF.
    IF lt_utext IS NOT INITIAL.
      zcl_text_for_material=>get_text_usl( CHANGING ct_text = lt_utext ).
    ENDIF.
    LOOP AT rt_vbrp ASSIGNING <ls_vbrp>.
      <ls_vbrp>-text = SWITCH #( <ls_vbrp>-mtart
                                 WHEN 'DIEN'
                                 THEN VALUE #( lt_utext[ tdname = <ls_vbrp>-vbeln && <ls_vbrp>-posnr ]-name DEFAULT '' )
                                 ELSE VALUE #( lt_mtext[ matnr = <ls_vbrp>-matnr
                                                         charg = <ls_vbrp>-charg ]-text DEFAULT '' ) ).
    ENDLOOP.
  ENDMETHOD.

  METHOD run.
    DATA(lv_error) = lcl_report_in=>check_authorization( ).
    IF lv_error IS NOT INITIAL.
      MESSAGE lv_error TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.

    get_taxnum( EXPORTING iv_partner = |{ '01' ALPHA = IN }|
                CHANGING  ev_taxnum  = gv_taxnum ).
    get_okei( ).
    fill_ucomm_range( ).

    get_fi_data( ).
    get_esf_data( ).
    get_dop_data( ). " Данные справочника ZFI_DOP_DAN 30.01.204 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
    " CALL SCREEN 2001.
    CALL SCREEN 1001.
  ENDMETHOD.

  METHOD show_data.
    DATA ls_variant           TYPE disvariant.
    DATA lt_toolbar_excluding TYPE ui_functions.
    DATA lt_f4                TYPE lvc_t_f4.
    DATA ls_layout            TYPE lvc_s_layo.

    ls_variant-report      = sy-repid.
    ls_variant-handle(1)   = COND #( WHEN p_mode1 IS NOT INITIAL THEN 'A' ELSE 'B' ).
    ls_variant-handle+1(1) = 'A'.
    ls_variant-handle+2(1) = lcl_report_out=>gv_mode+4(1).

    CASE iv_type.
      WHEN 'CREATE'.
        ls_variant-handle+3(1) = 'A'.
        IF gr_grid_1 IS NOT BOUND.
          gr_container1 = NEW #( side      = cl_gui_docking_container=>dock_at_top
                                 extension = 1000 ).
          er_grid = NEW #( i_parent = gr_container1 ).

          DATA(lv_build) = abap_true.
        ENDIF.
        DATA(lt_fcat_alv) = lcl_report_in=>build_fieldcat( iv_table = et_table
                                                           iv_type  = 'FI_O' ).
      WHEN 'CHANGE'.
        ls_variant-handle+3(1) = 'B'.

        IF gr_grid_2 IS NOT BOUND.
          gr_container2 = NEW #( container_name = 'ALV_1001' ).
          er_grid = NEW #( i_parent      = gr_container2
                           i_appl_events = abap_true ).

          lv_build = abap_true.
        ENDIF.
        lt_fcat_alv = lcl_report_in=>build_fieldcat( iv_table = et_table
                                                     iv_type  = 'ESF_O' ).
      WHEN '1007'.
        ls_variant-handle+3(1) = 'C'.
        IF gr_grid_1007 IS NOT BOUND.
          er_grid = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'GRID_1007' ) ).

          lv_build = abap_true.
        ENDIF.
        lt_fcat_alv = lcl_report_in=>build_fieldcat( iv_table = et_table
                                                     iv_type  = '1007' ).

        build_excluding( CHANGING et_excluding = lt_toolbar_excluding ).

        IF lcl_report=>gv_lock_error = abap_true.
          er_grid->set_ready_for_input( 0 ).
        ELSE.
          er_grid->set_ready_for_input( 1 ).
        ENDIF.
      WHEN 'UNBIND_FI'.                " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        ls_variant-handle+3(1) = 'D'.
        lt_fcat_alv = lcl_report_in=>build_fieldcat( iv_table = et_table
                                                     iv_type  = 'BIND' ).
        lv_build = abap_true.
        build_excluding( CHANGING et_excluding = lt_toolbar_excluding ).
        "--> 30.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
      WHEN '1012'.
        IF gr_grid_1012 IS NOT BOUND.
          er_grid = NEW #(
              i_parent = NEW cl_gui_docking_container( side      = cl_gui_docking_container=>dock_at_top
                                                       extension = cl_gui_docking_container=>ws_maximizebox ) ).

          lt_fcat_alv = lcl_report_in=>build_fieldcat( iv_table = et_table
                                                       iv_type  = '1012' ).
          build_excluding( CHANGING et_excluding = lt_toolbar_excluding ).

          lv_build = abap_true.
        ENDIF.

        IF lcl_report=>gv_lock_error = abap_true.
          er_grid->set_ready_for_input( 0 ).
        ELSE.
          er_grid->set_ready_for_input( 1 ).
        ENDIF.
        "<-- 30.01.2024 D.Kruhliakou #35697
    ENDCASE.

    IF er_grid IS NOT BOUND OR lv_build = abap_true.
      er_grid->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).

      IF iv_type = '1007'.
        lt_f4 = VALUE #( ( fieldname = 'MEINS' register = abap_true getbefore = abap_true ) ).
        er_grid->register_f4_for_fields( it_f4 = lt_f4 ).
      ENDIF.
      IF iv_type = '1008'.
        lt_f4 = VALUE #( ( fieldname = 'ST_NDS' register = abap_true getbefore = abap_true )  ).
        er_grid->register_f4_for_fields( it_f4 = lt_f4 ).
      ENDIF.

      er_grid->set_table_for_first_display( EXPORTING is_layout            = VALUE #( cwidth_opt = abap_true
                                                                                      zebra      = abap_true
                                                                                      no_rowmark = abap_true
                                                                                      info_fname = 'COLOR' )
                                                      i_save               = 'A'
                                                      is_variant           = ls_variant
                                                      it_toolbar_excluding = lt_toolbar_excluding
                                            CHANGING  it_outtab            = et_table
                                                      it_fieldcatalog      = lt_fcat_alv ).

      CASE iv_type.
        WHEN 'CREATE'.
          SET HANDLER on_user_command_1
                      on_hotspot_1
                      on_double_click_1
                      toolbar_buttons_1
                      menu_bt_handle_1
                      data_changed_finished_1
              FOR er_grid.
        WHEN 'CHANGE'.
          SET HANDLER on_user_command_1
                      on_hotspot_2
                      on_double_click_2
                      toolbar_buttons_1
                      menu_bt_handle_1
                      data_changed_finished_2
              FOR er_grid.
        WHEN '1007'.
          SET HANDLER on_f4_3
                      on_user_command_1
                      toolbar_buttons_1007
                      on_data_changed_3
                      data_changed_finished_2
                      on_hotspot_3              " 30.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
              FOR er_grid.
        WHEN '1008'.
          SET HANDLER on_f4_3
                      on_data_changed_3
                      data_changed_finished_2
              FOR er_grid.
        WHEN 'UNBIND_FI'.                " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
          SET HANDLER on_hotspot_1
                      on_double_click_1
                      toolbar_buttons_unbind
                      on_user_command_1 FOR er_grid.
      ENDCASE.

      er_grid->set_toolbar_interactive( ).
    ELSE.
      er_grid->get_variant( IMPORTING es_variant = ls_variant
                                      e_save     = DATA(lv_save) ).
      ls_variant-handle+2(1) = lcl_report_out=>gv_mode+4(1).
      er_grid->set_variant( is_variant = ls_variant
                            i_save     = lv_save ).

      er_grid->get_frontend_layout( IMPORTING es_layout = ls_layout ).
      IF ls_layout-cwidth_opt = '1'.
        ls_layout-cwidth_opt = abap_true.
        er_grid->set_frontend_layout( is_layout = ls_layout ).
      ENDIF.

      IF gv_change_mode = abap_true.
        er_grid->set_frontend_fieldcatalog( it_fieldcatalog = lt_fcat_alv ).   " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        CLEAR gv_change_mode.
      ENDIF.

      er_grid->refresh_table_display( is_stable = VALUE #( row = abap_true
                                                           col = abap_true ) ).
    ENDIF.
  ENDMETHOD.

  METHOD get_fi_docs.
    TYPES: BEGIN OF lty_s_doc_sums,
             bukrs TYPE bseg-bukrs,
             belnr TYPE bseg-belnr,
             gjahr TYPE bseg-gjahr,
             mwskz TYPE bset-mwskz,
             shkzg TYPE bset-shkzg,
             hwste TYPE bset-hwste,
             hwbas TYPE bset-hwbas,
           END OF lty_s_doc_sums.

    TYPES: BEGIN OF lty_s_lifname,
             partner TYPE but000-partner,
             name    TYPE string,
           END OF lty_s_lifname.

    TYPES: BEGIN OF lty_s_awkey,
             bukrs TYPE bseg-bukrs,
             belnr TYPE bseg-belnr,
             gjahr TYPE bseg-gjahr,
             awtyp TYPE bkpf-awtyp,
             awkey TYPE bkpf-awkey,
           END OF lty_s_awkey.

    TYPES: BEGIN OF lty_s_vbeln,
             vbeln TYPE vbrk-vbeln,
           END OF lty_s_vbeln.

    DATA lr_vid_iop         TYPE RANGE OF zfi_vid_iop_s-mwskz.
    DATA lr_pr_unbind       TYPE RANGE OF zei_unbind_esf. " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
    DATA lt_sumdocs_bset    TYPE SORTED TABLE OF lty_s_doc_sums WITH NON-UNIQUE KEY bukrs belnr gjahr mwskz.
    DATA lt_ref_lifdocs_in  TYPE zcl_fi_esf_amdp=>gty_t_ref_doc.
    DATA lt_real_awkey      TYPE STANDARD TABLE OF lty_s_awkey.
    DATA lt_ref_lifdocs_out TYPE zcl_fi_esf_amdp=>gty_t_ref_doc.
    DATA lt_sumdocs_bseg    TYPE STANDARD TABLE OF lty_s_doc_sums.
    DATA ls_fi_data         TYPE gty_s_fi_data.
    DATA lt_vbeln           TYPE SORTED TABLE OF lty_s_vbeln WITH NON-UNIQUE KEY vbeln.

    FIELD-SYMBOLS <ls_real_awkey> TYPE lty_s_awkey. " AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ

    SELECT zfi_vid_iop_h~id_vid_iop,
           zfi_vid_iop_h~nm_vid_doc,
           zfi_vid_iop_s~mwskz
      FROM zfi_vid_iop_h
             LEFT JOIN
               zfi_vid_iop_s ON zfi_vid_iop_h~id_vid_iop = zfi_vid_iop_s~id_vid_iop
      INTO TABLE @DATA(lt_vid_iop)
      ORDER BY zfi_vid_iop_h~id_vid_iop,
               zfi_vid_iop_s~mwskz.

    READ TABLE lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_op39>)
         WITH KEY id_vid_iop = '39' BINARY SEARCH.
    IF sy-subrc = 0.
      LOOP AT lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_op>)
           WHERE id_vid_iop = '31' OR id_vid_iop = '37'.
        APPEND VALUE #( BASE <ls_op39>
                        mwskz = <ls_op>-mwskz ) TO lt_vid_iop.
      ENDLOOP.
      DELETE lt_vid_iop WHERE mwskz IS INITIAL.
    ENDIF.

    SORT lt_vid_iop BY id_vid_iop
                       mwskz.
    lr_vid_iop = VALUE #( FOR ls_vid_iop IN lt_vid_iop
                          ( sign = 'I' option = 'EQ' low = ls_vid_iop-mwskz ) ).
    SORT lr_vid_iop BY low. DELETE lr_vid_iop WHERE low IS INITIAL.

    IF gv_mode = gc_mode4. " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      lr_pr_unbind = VALUE #( ( sign   = 'I'
                                option = 'EQ'
                                low    = ' ' ) ).
    ENDIF.

    SELECT bkpf~bukrs,
           bkpf~belnr,
           bkpf~gjahr,
           bkpf~budat,
           bkpf~bldat,
           bkpf~bktxt,
           bkpf~xblnr,
           bkpf~awtyp,
           bkpf~awkey,
*           zfi_esf_match~n_esf,
           but000~partner,
           dfkkbptaxnum~taxnum,
           but000~bu_group,
           but000~name_org1 && but000~name_org2 && but000~name_org3 && but000~name_org4 AS name1,
           but000~name_last && ' ' && but000~name_first && ' ' && but000~namemiddle     AS name2,
*           rmps_t_case_attr~zz_ndoc, rmps_t_case_attr~zz_dcdoc,                             "{ change DHVK930346
           coalesce( rmain~zz_ndoc ,rmps~zz_ndoc )                                      AS zz_ndoc,
           coalesce( rmain~zz_dcdoc,rmps~zz_dcdoc )                                     AS zz_dcdoc,                             "} change DHVK930346
           bset~mwskz,
           zfi_vid_iop_s~id_vid_iop,
           but000~type,
           log_unbd~n_esf                                                               AS n_former_esf,                                  " #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
           rmps~zext_key,
           bseg~vertn
      FROM bkpf
             LEFT JOIN
               bseg AS bseg ON bseg~bukrs = bkpf~bukrs
                      AND bseg~belnr = bkpf~belnr
                      AND bseg~gjahr = bkpf~gjahr
                      AND bseg~koart IN ( 'D', 'K' )
                 LEFT JOIN
                   but000 ON but000~partner = bseg~lifnr OR but000~partner = bseg~kunnr
                     LEFT JOIN
                       dfkkbptaxnum ON  ( dfkkbptaxnum~partner = but000~partner )
                                    AND   dfkkbptaxnum~taxtype = 'BY0'
                         LEFT JOIN
                           rmps_t_case_attr AS rmps ON  rmps~zext_key  = bseg~vertn
                                                    AND rmps~zext_key <> ''
                             LEFT JOIN
                               rmps_t_case_attr AS rmain ON  rmain~zext_key      = rmps~zz_dopext_key     "{ ins DHVK930346
                                                         AND rmps~zz_dopext_key <> ''
                                                         AND @p_mode1            = 'X'                          "} ins DHVK930346
                                 JOIN
                                   bset ON  bset~bukrs = bkpf~bukrs
                                        AND bset~belnr = bkpf~belnr
                                        AND bset~gjahr = bkpf~gjahr
                                     LEFT JOIN
                                       zfi_vid_iop_s ON zfi_vid_iop_s~mwskz = bset~mwskz
*--> #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
                                         LEFT JOIN
                                           zfi_esf_log_unbd AS log_unbd ON  log_unbd~belnr     = bkpf~belnr
                                                                        AND log_unbd~gjahr     = bkpf~gjahr
                                                                        AND log_unbd~bukrs     = bkpf~bukrs
                                                                        AND log_unbd~pr_unbind = @abap_true
                                                                        AND log_unbd~type      = 'S'
*<-- #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      WHERE     bkpf~bukrs IN @so_bukrs
        AND     bkpf~budat IN @so_budat
        AND     bset~mwskz IN @lr_vid_iop
        AND NOT EXISTS                                                                             "{ ins DHVK931267
        ( SELECT m~mandt
            FROM zfi_esf_match AS m
                   JOIN
                     zfi_esf AS e ON  e~pr_esf         = m~pr_esf
                                  AND e~n_esf          = m~n_esf
                                  AND e~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled
                                  AND e~id_stat_esf_v <> @lcl_report=>gc_stat_v_cancelled
            WHERE m~bukrs      = bkpf~bukrs
              AND m~belnr      = bkpf~belnr
              AND m~gjahr      = bkpf~gjahr
              AND m~pr_esf     = @lcl_report=>gc_out_inv
              AND m~pr_unbind IN @lr_pr_unbind )
        " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ; } ins DHVK931267
        AND     bkpf~xreversed  = ''
        AND     bkpf~xreversing = ''
      INTO TABLE @DATA(lt_data).

    SORT lt_data BY bukrs
                    belnr
                    gjahr
                    partner.
    DELETE ADJACENT DUPLICATES FROM lt_data COMPARING bukrs belnr gjahr partner.

    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      DATA(lv_len) = strlen( <ls_data>-bktxt ).
      " док-ты для BSET
      READ TABLE lt_sumdocs_bset TRANSPORTING NO FIELDS
           WITH KEY bukrs = <ls_data>-bukrs
                    belnr = <ls_data>-belnr
                    gjahr = <ls_data>-gjahr
           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( bukrs = <ls_data>-bukrs
                        belnr = <ls_data>-belnr
                        gjahr = <ls_data>-gjahr )
               INTO lt_sumdocs_bset INDEX sy-tabix.
      ENDIF.

      " док-ты для поиска LIFNR
      IF lv_len = 14 OR lv_len = 16.  " FI-документ

        DATA(lv_bukrs) = COND bukrs( WHEN <ls_data>-bktxt+14 IS INITIAL
                                     THEN <ls_data>-bukrs
                                     ELSE <ls_data>-bktxt+14 ).
        "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
          " Документы для Дополнительной / Исправленный ЭСЧФ
          INSERT VALUE #( bukrs = lv_bukrs
                          belnr = <ls_data>-xblnr(10)
                          gjahr = <ls_data>-xblnr+12(4) ) INTO TABLE gt_ref_bktxt.
          IF NOT line_exists( lt_ref_lifdocs_in[ bukrs = lv_bukrs
                                                 belnr = <ls_data>-xblnr(10)
                                                 gjahr = <ls_data>-xblnr+12(4) ]  ).
            INSERT VALUE #( bukrs = lv_bukrs
                            belnr = <ls_data>-xblnr(10)
                            gjahr = <ls_data>-xblnr+12(4) ) INTO TABLE lt_ref_lifdocs_in.
          ENDIF.
          "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        ELSE.
          " Документы для Дополнительной / Исправленный ЭСЧФ
          INSERT VALUE #( bukrs = lv_bukrs
                          belnr = <ls_data>-bktxt(10)
                          gjahr = <ls_data>-bktxt+10(4) ) INTO TABLE gt_ref_bktxt.
          IF NOT line_exists( lt_ref_lifdocs_in[ bukrs = lv_bukrs
                                                 belnr = <ls_data>-bktxt(10)
                                                 gjahr = <ls_data>-bktxt+10(4) ]  ).
            INSERT VALUE #( bukrs = lv_bukrs
                            belnr = <ls_data>-bktxt(10)
                            gjahr = <ls_data>-bktxt+10(4) ) INTO TABLE lt_ref_lifdocs_in.
          ENDIF.
        ENDIF.
      ELSEIF lv_len <> 0. " Другой документ, например ЗнП
        "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
          IF NOT line_exists( lt_ref_lifdocs_in[ belnr = <ls_data>-xblnr(10) ] ).
            INSERT VALUE #( belnr = <ls_data>-xblnr(10) ) INTO TABLE lt_ref_lifdocs_in.
          ENDIF.
          "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        ELSE.
          IF NOT line_exists( lt_ref_lifdocs_in[ belnr = <ls_data>-bktxt(10) ] ).
            INSERT VALUE #( belnr = <ls_data>-bktxt(10) ) INTO TABLE lt_ref_lifdocs_in.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    MOVE-CORRESPONDING lt_ref_lifdocs_in TO lt_real_awkey.

    IF lt_real_awkey IS NOT INITIAL.
      SELECT bukrs belnr gjahr awtyp awkey
        FROM bkpf
        INTO TABLE lt_real_awkey
        FOR ALL ENTRIES IN lt_real_awkey
        WHERE bukrs = lt_real_awkey-bukrs
          AND belnr = lt_real_awkey-belnr
          AND gjahr = lt_real_awkey-gjahr.

      SORT lt_real_awkey BY bukrs
                            belnr
                            gjahr.
    ENDIF.

    IF lt_ref_lifdocs_in IS NOT INITIAL.
      zcl_fi_esf_amdp=>get_ref_doc_attr( EXPORTING it_refdoc = lt_ref_lifdocs_in
                                         IMPORTING et_refdoc = lt_ref_lifdocs_out ).
    ENDIF.

    " формирование списка ссылочных документов у которых есть ESF
    IF gt_ref_bktxt IS NOT INITIAL.
      SELECT DISTINCT match~bukrs,
                      match~belnr,
                      match~gjahr,
                      match~n_esf
        FROM zfi_esf_match AS match
               JOIN
                 bkpf ON  match~bukrs = bkpf~bukrs
                      AND match~belnr = bkpf~belnr
                      AND match~gjahr = bkpf~gjahr
                   JOIN
                     zfi_esf AS esf ON  esf~pr_esf = match~pr_esf
                                    AND esf~n_esf  = match~n_esf
        INTO TABLE @DATA(lt_ref)
        FOR ALL ENTRIES IN @gt_ref_bktxt
        WHERE match~pr_esf       = @lcl_report=>gc_out_inv
          AND match~bukrs        = @gt_ref_bktxt-bukrs
          AND match~belnr        = @gt_ref_bktxt-belnr
          AND match~gjahr        = @gt_ref_bktxt-gjahr
          AND esf~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled.
      IF sy-subrc <> 0.
        CLEAR gt_ref_bktxt.
      ELSE.
        CLEAR gt_ref_bktxt.
        SORT lt_ref BY bukrs
                       belnr
                       gjahr
                       n_esf ASCENDING.
        LOOP AT lt_ref ASSIGNING FIELD-SYMBOL(<ls_ref>).
          AT NEW n_esf.
            INSERT VALUE #( bukrs = <ls_ref>-bukrs
                            belnr = <ls_ref>-belnr
                            gjahr = <ls_ref>-gjahr
                            n_esf = <ls_ref>-n_esf ) INTO TABLE gt_ref_bktxt.
          ENDAT.
        ENDLOOP.
        FREE lt_ref.
      ENDIF.
    ENDIF.

    IF lt_sumdocs_bset IS NOT INITIAL. " налоги
      SELECT bukrs
             belnr
             gjahr
             shkzg
             dmbtr AS hwste
             buzei
        FROM bseg
        INTO CORRESPONDING FIELDS OF TABLE lt_sumdocs_bseg
        FOR ALL ENTRIES IN lt_sumdocs_bset
        WHERE belnr = lt_sumdocs_bset-belnr
          AND bukrs = lt_sumdocs_bset-bukrs
          AND gjahr = lt_sumdocs_bset-gjahr
*         AND hkont = '1901000000'.
          AND hkont = '9030110000'.
      SORT lt_sumdocs_bseg BY bukrs
                              belnr
                              gjahr.

      SELECT bukrs belnr gjahr mwskz shkzg hwste hwbas
        FROM bset
        INTO CORRESPONDING FIELDS OF TABLE lt_sumdocs_bset
        FOR ALL ENTRIES IN lt_sumdocs_bset
        WHERE belnr = lt_sumdocs_bset-belnr
          AND bukrs = lt_sumdocs_bset-bukrs
          AND gjahr = lt_sumdocs_bset-gjahr.
    ENDIF.

    SORT lt_data BY bukrs
                    belnr
                    gjahr
                    mwskz.
    LOOP AT lt_data ASSIGNING <ls_data>.
      ls_fi_data = CORRESPONDING #( <ls_data> MAPPING ndoc = zz_ndoc dcdoc = zz_dcdoc
                                                       unp = taxnum  lifnr = partner ).
      lv_len = strlen( <ls_data>-bktxt ).
      ls_fi_data-rbukrs = COND bukrs( WHEN lv_len = 16
                                      THEN <ls_data>-bktxt+14
                                      ELSE '' ).
      IF <ls_data>-bktxt <> ''.
        DATA(lv_rbukrs) = COND bukrs( WHEN ls_fi_data-rbukrs IS INITIAL THEN ls_fi_data-bukrs ELSE ls_fi_data-rbukrs ). " БЕ ссылочного документа
      ENDIF.
      IF ls_fi_data-name1 IS INITIAL.
        ls_fi_data-name1 = <ls_data>-name2.
      ENDIF.
      " 39 Реализация физлицам
      IF <ls_data>-id_vid_iop = lcl_report_out=>gc_31 OR <ls_data>-id_vid_iop = lcl_report_out=>gc_37.
        ls_fi_data-id_vid_iop = COND #( WHEN <ls_data>-type = '1' THEN lcl_report_out=>gc_39 ELSE <ls_data>-id_vid_iop ).
      ENDIF.

      IF ls_fi_data-lifnr IS INITIAL OR ls_fi_data-id_vid_iop = '43'. " из ссылочных документов
        ASSIGN lt_ref_lifdocs_out[ bukrs = COND #( WHEN ls_fi_data-rbukrs IS INITIAL
                                                   THEN ls_fi_data-bukrs
                                                   ELSE ls_fi_data-rbukrs )
                                   "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
                                   belnr = COND #( WHEN <ls_data>-id_vid_iop  = '43'
                                                    AND <ls_data>-bktxt(2)   <> '51'
                                                   THEN <ls_data>-xblnr(10)
                                                   ELSE <ls_data>-bktxt(10) )

                                   gjahr = COND #( WHEN <ls_data>-id_vid_iop  = '43'
                                                    AND <ls_data>-bktxt(2)   <> '51'
                                                   THEN <ls_data>-xblnr+12(4)
                                                   ELSE <ls_data>-bktxt+10(4) ) ] TO FIELD-SYMBOL(<ls_ref_lifdocs>).
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        IF sy-subrc <> 0.
          "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
          IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
            ASSIGN lt_ref_lifdocs_out[ bukrs = ''
                                       belnr = <ls_data>-xblnr(10)
                                       gjahr = '' ] TO <ls_ref_lifdocs>.
            "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
          ELSE.
            ASSIGN lt_ref_lifdocs_out[ bukrs = ''
                                       belnr = <ls_data>-bktxt(10)
                                       gjahr = '' ] TO <ls_ref_lifdocs>.
          ENDIF.
        ENDIF.
        IF sy-subrc = 0.
          ls_fi_data = VALUE #( BASE ls_fi_data
                                lifnr = <ls_ref_lifdocs>-partner
                                unp   = <ls_ref_lifdocs>-taxnum
                                name1 = <ls_ref_lifdocs>-name
                                ndoc  = <ls_ref_lifdocs>-zz_ndoc
                                dcdoc = <ls_ref_lifdocs>-zz_dcdoc ).
        ENDIF.
      ENDIF.

      "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
        READ TABLE lt_real_awkey ASSIGNING <ls_real_awkey>
             WITH KEY bukrs = lv_rbukrs
                      belnr = <ls_data>-xblnr(10)
                      gjahr = <ls_data>-xblnr+12(4)
             BINARY SEARCH.
        IF sy-subrc <> 0.
          READ TABLE lt_real_awkey ASSIGNING <ls_real_awkey>
               WITH KEY bukrs = lv_rbukrs
                        belnr = <ls_data>-xblnr(10)
               BINARY SEARCH.
        ENDIF.
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      ELSE.
        READ TABLE lt_real_awkey ASSIGNING <ls_real_awkey>
             WITH KEY bukrs = lv_rbukrs
                      belnr = <ls_data>-bktxt(10)
                      gjahr = <ls_data>-bktxt+10(4)
             BINARY SEARCH.
        IF sy-subrc <> 0.
          READ TABLE lt_real_awkey ASSIGNING <ls_real_awkey>
               WITH KEY bukrs = lv_rbukrs
                        belnr = <ls_data>-bktxt(10)
               BINARY SEARCH.
        ENDIF.
      ENDIF.
      IF sy-subrc = 0.
        CASE <ls_real_awkey>-awtyp.
          WHEN 'RMRP'.
            ls_fi_data-mblnr = <ls_real_awkey>-awkey(10).
            ls_fi_data-mjahr = <ls_real_awkey>-awkey+10(4).
            ls_fi_data-awtyp = 'RMRP'.
          WHEN 'VBRK'.
          WHEN 'BKPF'.
            "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
            IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
              ls_fi_data-nmtxt = <ls_data>-xblnr(10).
              ls_fi_data-gjtxt = <ls_data>-xblnr+12(4).
              "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
            ELSE.
              ls_fi_data-nmtxt = <ls_data>-bktxt(10).
              ls_fi_data-gjtxt = <ls_data>-bktxt+10(4).
            ENDIF.
          WHEN OTHERS.
            ls_fi_data-nmtxt = <ls_data>-awkey(10).
        ENDCASE.
      ENDIF.

      CASE <ls_data>-awtyp.
        WHEN 'VBRK'.
          ls_fi_data-vbeln = <ls_data>-awkey.

          READ TABLE lt_vbeln TRANSPORTING NO FIELDS
               WITH KEY vbeln = ls_fi_data-vbeln
               BINARY SEARCH.
          IF sy-subrc <> 0.
            INSERT VALUE #( vbeln = ls_fi_data-vbeln ) INTO lt_vbeln INDEX sy-tabix.
          ENDIF.
        WHEN 'RMRP'.
          ls_fi_data-mblnr = <ls_data>-awkey.
          IF <ls_data>-bktxt+10(2) = '20'.
            ls_fi_data-awtyp = <ls_data>-awtyp.
          ELSE.
            CLEAR: ls_fi_data-nmtxt,
                   ls_fi_data-gjtxt.
          ENDIF.
      ENDCASE.

      "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      IF <ls_data>-id_vid_iop = '43' AND <ls_data>-bktxt(2) <> '51'.
        IF <ls_data>-bktxt CO '0123456789 '.
          ls_fi_data-nmtxt = <ls_data>-xblnr(10).
          IF lv_len = 14 OR lv_len = 16.
            ls_fi_data-gjtxt = <ls_data>-xblnr+12(4).
          ENDIF.
        ENDIF.
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      ELSE.
        IF <ls_data>-bktxt CO '0123456789 '.
          ls_fi_data-nmtxt = <ls_data>-bktxt(10).
          IF lv_len = 14 OR lv_len = 16.
            ls_fi_data-gjtxt = <ls_data>-bktxt+10(4).
          ENDIF.
        ENDIF.
      ENDIF.

      IF    <ls_data>-id_vid_iop = lcl_report_out=>gc_40 OR <ls_data>-id_vid_iop = lcl_report_out=>gc_42
         OR <ls_data>-id_vid_iop = lcl_report_out=>gc_43. " OR <ls_data>-id_vid_iop = lcl_report_out=>gc_62.
        ls_fi_data-led = icon_checked.
      ENDIF.

      READ TABLE lt_sumdocs_bset TRANSPORTING NO FIELDS
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        CLEAR ls_fi_data-mwskz.
        LOOP AT lt_sumdocs_bset ASSIGNING FIELD-SYMBOL(<ls_sumdocs_bset>) FROM sy-tabix.
          IF    <ls_sumdocs_bset>-bukrs <> ls_fi_data-bukrs
             OR <ls_sumdocs_bset>-belnr <> ls_fi_data-belnr
             OR <ls_sumdocs_bset>-gjahr <> ls_fi_data-gjahr.
            EXIT.
          ENDIF.
          READ TABLE lt_vid_iop TRANSPORTING NO FIELDS
               WITH KEY id_vid_iop = ls_fi_data-id_vid_iop
                        mwskz      = <ls_sumdocs_bset>-mwskz.
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.
          IF ls_fi_data-id_vid_iop = gc_38 AND <ls_sumdocs_bset>-shkzg = 'S'.
            CONTINUE.
          ENDIF.
          IF ls_fi_data-mwskz NP |*{ <ls_sumdocs_bset>-mwskz }*|.
            ls_fi_data-mwskz = COND #( WHEN ls_fi_data-mwskz = ''
                                       THEN <ls_sumdocs_bset>-mwskz
                                       ELSE |{ ls_fi_data-mwskz },{ <ls_sumdocs_bset>-mwskz }| ).
          ENDIF.

          IF <ls_data>-id_vid_iop = gc_42.                                                                        "{ 01/06/2023 G.Domanikova #29181 Изменения в ЭСЧФ при ввозе товаров с территории ЕАЭС
            " Изменение поля Стоимость товаров (работ, услуг), имущественных прав с учетом НДС, руб.
            " Сохраним расчет для нового создания ESF NONDS(HWBAS)- ранее было NONDS + NDS
            ls_fi_data-total_w_vat = ls_fi_data-total_w_vat + COND fins_vtcur12( WHEN <ls_sumdocs_bset>-shkzg = 'S'
                                                                                 THEN abs( <ls_sumdocs_bset>-hwbas )
                                                                                 ELSE - abs( <ls_sumdocs_bset>-hwbas ) ).
          ELSE.
            ls_fi_data-total_w_vat = ls_fi_data-total_w_vat + COND fins_vtcur12( WHEN <ls_sumdocs_bset>-shkzg = 'S'
                                                                                 THEN ( abs( <ls_sumdocs_bset>-hwbas ) + abs(
                                                                                            <ls_sumdocs_bset>-hwste ) )
                                                                                 ELSE - abs( <ls_sumdocs_bset>-hwbas ) - <ls_sumdocs_bset>-hwste ).
          ENDIF.                                                                                                  "} 01/06/2023 G.Domanikova #29181

          ls_fi_data-total_vat = ls_fi_data-total_vat + COND fins_vtcur12( WHEN <ls_sumdocs_bset>-shkzg = 'S'
                                                                           THEN <ls_sumdocs_bset>-hwste
                                                                           ELSE - <ls_sumdocs_bset>-hwste ).
        ENDLOOP.
      ENDIF.

      IF    ls_fi_data-id_vid_iop = gc_31
         OR ls_fi_data-id_vid_iop = gc_33
         OR ls_fi_data-id_vid_iop = gc_36
         OR ls_fi_data-id_vid_iop = gc_37
         OR ls_fi_data-id_vid_iop = gc_38
         OR ls_fi_data-id_vid_iop = gc_38_1
         OR ls_fi_data-id_vid_iop = gc_39
         OR ls_fi_data-id_vid_iop = gc_40
         OR ls_fi_data-id_vid_iop = gc_42
         OR ls_fi_data-id_vid_iop = gc_46   " ins Tararenko - #31229 Доработка Эсчф 46 вида операции
         OR ls_fi_data-id_vid_iop = gc_53                                  "#1
         OR ls_fi_data-id_vid_iop = gc_681                                  "#6
         OR ls_fi_data-id_vid_iop = gc_32
         OR ls_fi_data-id_vid_iop = gc_64.                                      "#6
        "       OR ls_fi_data-id_vid_iop = gc_62

        ls_fi_data-total_w_vat = - ls_fi_data-total_w_vat.
        ls_fi_data-total_vat   = - ls_fi_data-total_vat.
      ENDIF.

      READ TABLE lt_sumdocs_bseg TRANSPORTING NO FIELDS
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        LOOP AT lt_sumdocs_bseg ASSIGNING FIELD-SYMBOL(<ls_sumdocs_bseg>) FROM sy-tabix.
          IF    <ls_sumdocs_bseg>-bukrs <> ls_fi_data-bukrs
             OR <ls_sumdocs_bseg>-belnr <> ls_fi_data-belnr
             OR <ls_sumdocs_bseg>-gjahr <> ls_fi_data-gjahr.
            EXIT.
          ENDIF.

          ls_fi_data-excise = ls_fi_data-excise + COND #( WHEN <ls_sumdocs_bseg>-shkzg = 'S'
                                                          THEN <ls_sumdocs_bseg>-hwste
                                                          ELSE - <ls_sumdocs_bseg>-hwste ).
        ENDLOOP.
      ENDIF.

      READ TABLE gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data>)
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        IF <ls_fi_data>-id_vid_iop IS INITIAL.
          <ls_fi_data>-id_vid_iop = ls_fi_data-id_vid_iop.
        ELSEIF <ls_fi_data>-id_vid_iop IS NOT INITIAL AND ls_fi_data-id_vid_iop IS NOT INITIAL AND ls_fi_data-id_vid_iop <> <ls_fi_data>-id_vid_iop.
        ENDIF.

        <ls_fi_data>-total_w_vat = <ls_fi_data>-total_w_vat + ls_fi_data-total_w_vat.
        <ls_fi_data>-total_vat   = <ls_fi_data>-total_vat   + ls_fi_data-total_vat.
        <ls_fi_data>-excise      = <ls_fi_data>-excise      + ls_fi_data-excise.
        IF <ls_fi_data>-mwskz NS ls_fi_data-mwskz.
          <ls_fi_data>-mwskz = |{ <ls_fi_data>-mwskz }/{ ls_fi_data-mwskz }|.
        ENDIF.
      ELSE.
        INSERT ls_fi_data INTO gt_fi_data INDEX sy-tabix.
        CLEAR ls_fi_data.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_fi_data ASSIGNING <ls_fi_data>.
      READ TABLE lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_vid_iop>)
           WITH KEY id_vid_iop = <ls_fi_data>-id_vid_iop
           BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_fi_data>-id_vid_iop_name = <ls_vid_iop>-nm_vid_doc.
      ENDIF.
    ENDLOOP.

    SORT gt_fi_data BY id_vid_iop
                       bukrs
                       belnr
                       gjahr
                       mwskz.

    " ---------------------------------------------------------------------
    DELETE gt_fi_data WHERE id_vid_iop IS INITIAL.    " пока не точно
    " ---------------------------------------------------------------------

    gt_fi_data_old = gt_fi_data.
  ENDMETHOD.

  METHOD get_reffi_doc_data.
    TYPES: BEGIN OF lty_s_doc_sums,
             bukrs TYPE bseg-bukrs,
             belnr TYPE bseg-belnr,
             gjahr TYPE bseg-gjahr,
             mwskz TYPE bset-mwskz,
             shkzg TYPE bset-shkzg,
             hwste TYPE bset-hwste,
             hwbas TYPE bset-hwbas,
           END OF lty_s_doc_sums.

    TYPES: BEGIN OF lty_s_lifname,
             partner TYPE but000-partner,
             name    TYPE string,
           END OF lty_s_lifname.

    TYPES: BEGIN OF lty_s_awkey,
             bukrs TYPE bseg-bukrs,
             belnr TYPE bseg-belnr,
             gjahr TYPE bseg-gjahr,
             awtyp TYPE bkpf-awtyp,
             awkey TYPE bkpf-awkey,
           END OF lty_s_awkey.

    TYPES: BEGIN OF lty_s_vbeln,
             vbeln TYPE vbrk-vbeln,
           END OF lty_s_vbeln.

    DATA lr_vid_iop         TYPE RANGE OF zfi_vid_iop_s-mwskz.
    DATA lt_sumdocs_bset    TYPE SORTED TABLE OF lty_s_doc_sums WITH NON-UNIQUE KEY bukrs belnr gjahr mwskz.
    DATA lt_ref_lifdocs_in  TYPE zcl_fi_esf_amdp=>gty_t_ref_doc.
    DATA lt_real_awkey      TYPE STANDARD TABLE OF lty_s_awkey.
    DATA lt_ref_lifdocs_out TYPE zcl_fi_esf_amdp=>gty_t_ref_doc.
    DATA lt_sumdocs_bseg    TYPE STANDARD TABLE OF lty_s_doc_sums.
    DATA ls_fi_data         TYPE gty_s_fi_data.
    DATA lt_vbeln           TYPE SORTED TABLE OF lty_s_vbeln WITH NON-UNIQUE KEY vbeln.

*          lr_pr_unbind       TYPE RANGE OF zei_unbind_esf.   " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ

    SELECT zfi_vid_iop_h~id_vid_iop,
           zfi_vid_iop_h~nm_vid_doc,
           zfi_vid_iop_s~mwskz
      FROM zfi_vid_iop_h
             LEFT JOIN
               zfi_vid_iop_s ON zfi_vid_iop_h~id_vid_iop = zfi_vid_iop_s~id_vid_iop
      INTO TABLE @DATA(lt_vid_iop)
      ORDER BY zfi_vid_iop_h~id_vid_iop,
               zfi_vid_iop_s~mwskz.

    READ TABLE lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_op39>)
         WITH KEY id_vid_iop = '39' BINARY SEARCH.

    IF sy-subrc = 0.
      LOOP AT lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_op>) WHERE id_vid_iop = '31' OR id_vid_iop = '37'.
        APPEND VALUE #( BASE <ls_op39>
                        mwskz = <ls_op>-mwskz ) TO lt_vid_iop.
      ENDLOOP.
      DELETE lt_vid_iop WHERE mwskz IS INITIAL.
    ENDIF.

    SORT lt_vid_iop BY id_vid_iop
                       mwskz.
    lr_vid_iop = VALUE #( FOR ls_vid_iop IN lt_vid_iop
                          ( sign = 'I' option = 'EQ' low = ls_vid_iop-mwskz ) ).
    SORT lr_vid_iop BY low. DELETE lr_vid_iop WHERE low IS INITIAL.

    SELECT bkpf~bukrs,
           bkpf~belnr,
           bkpf~gjahr,
           bkpf~budat,
           bkpf~bldat,
           bkpf~bktxt,
           bkpf~xblnr,
           bkpf~awtyp,
           bkpf~awkey,
*           zfi_esf_match~n_esf,
           but000~partner,
           dfkkbptaxnum~taxnum,
           but000~bu_group,
           but000~name_org1 && but000~name_org2 && but000~name_org3 && but000~name_org4 AS name1,
           but000~name_last && ' ' && but000~name_first && ' ' && but000~namemiddle     AS name2,
*           rmps_t_case_attr~zz_ndoc, rmps_t_case_attr~zz_dcdoc,                             "{ change DHVK930346
           coalesce( rmain~zz_ndoc ,rmps~zz_ndoc )                                      AS zz_ndoc,
           coalesce( rmain~zz_dcdoc,rmps~zz_dcdoc )                                     AS zz_dcdoc,                             "} change DHVK930346
           bset~mwskz,
           zfi_vid_iop_s~id_vid_iop,
           but000~type
*                    log_unbd~n_esf AS n_former_esf                                  " #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
      FROM bkpf

             LEFT JOIN
               bseg AS bseg ON bseg~bukrs = bkpf~bukrs
                       AND bseg~belnr = bkpf~belnr
                       AND bseg~gjahr = bkpf~gjahr
                       AND bseg~koart IN ( 'D', 'K' )
                 LEFT JOIN
                   but000 ON but000~partner = bseg~lifnr OR but000~partner = bseg~kunnr
                     LEFT JOIN
                       dfkkbptaxnum ON  ( dfkkbptaxnum~partner = but000~partner )
                                    AND   dfkkbptaxnum~taxtype = 'BY0'
                         LEFT JOIN
                           rmps_t_case_attr AS rmps ON  rmps~zext_key  = bseg~vertn
                                                    AND rmps~zext_key <> ''
                             LEFT JOIN
                               rmps_t_case_attr AS rmain ON  rmain~zext_key      = rmps~zz_dopext_key     "{ ins DHVK930346
                                                         AND rmps~zz_dopext_key <> ''
                                                         AND @p_mode1            = 'X'                          "} ins DHVK930346

                                 JOIN
                                   bset ON  bset~bukrs = bkpf~bukrs
                                        AND bset~belnr = bkpf~belnr
                                        AND bset~gjahr = bkpf~gjahr
                                     LEFT JOIN
                                       zfi_vid_iop_s ON zfi_vid_iop_s~mwskz = bset~mwskz
**--> #8000000074 AK_BUTVILOVS Доработка по перепривязке ЭСЧФ
*                  LEFT JOIN zfi_esf_log_unbd AS log_unbd ON  log_unbd~belnr = bkpf~belnr
*                                                         AND log_unbd~gjahr = bkpf~gjahr
*                                                         AND log_unbd~bukrs = bkpf~bukrs
*                                                         AND log_unbd~pr_unbind = @abap_true
*                                                         AND log_unbd~type = 'S'
**<-- #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      WHERE bkpf~bukrs       = @iv_bukrs
        AND bkpf~belnr       = @iv_belnr
        AND bkpf~gjahr       = @iv_gjahr
        AND bset~mwskz      IN @lr_vid_iop
*       AND NOT EXISTS                                                                             "{ ins DHVK931267
*       ( SELECT m~mandt
*           FROM zfi_esf_match AS m
*             JOIN zfi_esf AS e ON e~pr_esf = m~pr_esf
*                              AND e~n_esf  = m~n_esf
*                              AND e~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled
*                              AND e~id_stat_esf_v <> @lcl_report=>gc_stat_v_cancelled
*           WHERE  m~bukrs = bkpf~bukrs
*             AND m~belnr = bkpf~belnr
*             AND m~gjahr = bkpf~gjahr
*             AND m~pr_esf = @lcl_report=>gc_out_inv
*             AND m~pr_unbind IN @lr_pr_unbind             " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
*       )                                                                                            "} ins DHVK931267
        AND bkpf~xreversed   = ''
        AND bkpf~xreversing  = ''
      INTO TABLE @DATA(lt_data).

    SORT lt_data BY bukrs
                    belnr
                    gjahr
                    partner.
    DELETE ADJACENT DUPLICATES FROM lt_data COMPARING bukrs belnr gjahr partner.

    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      DATA(lv_len) = strlen( <ls_data>-bktxt ).
      " док-ты для BSET
      READ TABLE lt_sumdocs_bset TRANSPORTING NO FIELDS
           WITH KEY bukrs = <ls_data>-bukrs
                    belnr = <ls_data>-belnr
                    gjahr = <ls_data>-gjahr
           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( bukrs = <ls_data>-bukrs
                        belnr = <ls_data>-belnr
                        gjahr = <ls_data>-gjahr )
               INTO lt_sumdocs_bset INDEX sy-tabix.
      ENDIF.

      " док-ты для поиска LIFNR

      IF lv_len = 14 OR lv_len = 16.  " FI-документ
        DATA(lv_bukrs) = COND bukrs( WHEN <ls_data>-bktxt+14 IS INITIAL
                                     THEN <ls_data>-bukrs
                                     ELSE <ls_data>-bktxt+14 ).
        " Документы для Дополнительной / Исправленный ЭСЧФ
        INSERT VALUE #( bukrs = lv_bukrs
                        belnr = <ls_data>-bktxt(10)
                        gjahr = <ls_data>-bktxt+10(4) ) INTO TABLE gt_ref_bktxt.

        IF NOT line_exists( lt_ref_lifdocs_in[ bukrs = lv_bukrs
                                               belnr = <ls_data>-bktxt(10)
                                               gjahr = <ls_data>-bktxt+10(4) ]  ).
          INSERT VALUE #( bukrs = lv_bukrs
                          belnr = <ls_data>-bktxt(10)
                          gjahr = <ls_data>-bktxt+10(4) )
                 INTO TABLE lt_ref_lifdocs_in.
        ENDIF.
      ELSEIF lv_len <> 0. " Другой документ, например ЗнП
        IF NOT line_exists( lt_ref_lifdocs_in[ belnr = <ls_data>-bktxt(10) ] ).
          INSERT VALUE #( belnr = <ls_data>-bktxt(10) ) INTO TABLE lt_ref_lifdocs_in.
        ENDIF.
      ENDIF.
    ENDLOOP.

    MOVE-CORRESPONDING lt_ref_lifdocs_in TO lt_real_awkey.

    IF lt_real_awkey IS NOT INITIAL.
      SELECT bukrs belnr gjahr awtyp awkey
        FROM bkpf
        INTO TABLE lt_real_awkey
        FOR ALL ENTRIES IN lt_real_awkey
        WHERE bukrs = lt_real_awkey-bukrs
          AND belnr = lt_real_awkey-belnr
          AND gjahr = lt_real_awkey-gjahr.

      SORT lt_real_awkey BY bukrs
                            belnr
                            gjahr.
    ENDIF.

    IF lt_ref_lifdocs_in IS NOT INITIAL.
      zcl_fi_esf_amdp=>get_ref_doc_attr( EXPORTING it_refdoc = lt_ref_lifdocs_in
                                         IMPORTING et_refdoc = lt_ref_lifdocs_out ).

    ENDIF.
    " формирование списка ссылочных документов у которых есть ESF
    IF gt_ref_bktxt IS NOT INITIAL.
      SELECT DISTINCT match~bukrs,
                      match~belnr,
                      match~gjahr,
                      match~n_esf
        FROM zfi_esf_match AS match
               JOIN
                 bkpf ON  match~bukrs = bkpf~bukrs
                      AND match~belnr = bkpf~belnr
                      AND match~gjahr = bkpf~gjahr
                   JOIN
                     zfi_esf AS esf ON  esf~pr_esf = match~pr_esf
                                    AND esf~n_esf  = match~n_esf
        INTO TABLE @DATA(lt_ref)
        FOR ALL ENTRIES IN @gt_ref_bktxt
        WHERE match~pr_esf       = @lcl_report=>gc_out_inv
          AND match~bukrs        = @gt_ref_bktxt-bukrs
          AND match~belnr        = @gt_ref_bktxt-belnr
          AND match~gjahr        = @gt_ref_bktxt-gjahr
          AND esf~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled.
      IF sy-subrc <> 0.
        CLEAR gt_ref_bktxt.
      ELSE.
        CLEAR gt_ref_bktxt.
        SORT lt_ref BY bukrs
                       belnr
                       gjahr
                       n_esf ASCENDING.
        LOOP AT lt_ref ASSIGNING FIELD-SYMBOL(<ls_ref>).
          AT NEW n_esf.
            INSERT VALUE #( bukrs = <ls_ref>-bukrs
                            belnr = <ls_ref>-belnr
                            gjahr = <ls_ref>-gjahr
                            n_esf = <ls_ref>-n_esf  )
                   INTO TABLE gt_ref_bktxt.
          ENDAT.
        ENDLOOP.
        FREE lt_ref.
      ENDIF.

    ENDIF.
    IF lt_sumdocs_bset IS NOT INITIAL. " налоги
      SELECT bukrs
             belnr
             gjahr
             shkzg
             dmbtr AS hwste
        FROM bseg
        INTO CORRESPONDING FIELDS OF TABLE lt_sumdocs_bseg
        FOR ALL ENTRIES IN lt_sumdocs_bset
        WHERE belnr = lt_sumdocs_bset-belnr
          AND bukrs = lt_sumdocs_bset-bukrs
          AND gjahr = lt_sumdocs_bset-gjahr
*         AND hkont = '1901000000'.
          AND hkont = '9030110000'.
      SORT lt_sumdocs_bseg BY bukrs
                              belnr
                              gjahr.

      SELECT bukrs belnr gjahr mwskz shkzg hwste hwbas
        FROM bset
        INTO CORRESPONDING FIELDS OF TABLE lt_sumdocs_bset
        FOR ALL ENTRIES IN lt_sumdocs_bset
        WHERE belnr = lt_sumdocs_bset-belnr
          AND bukrs = lt_sumdocs_bset-bukrs
          AND gjahr = lt_sumdocs_bset-gjahr.
    ENDIF.

    SORT lt_data BY bukrs
                    belnr
                    gjahr
                    mwskz.
    LOOP AT lt_data ASSIGNING <ls_data>.
      ls_fi_data = CORRESPONDING #( <ls_data> MAPPING ndoc = zz_ndoc dcdoc = zz_dcdoc unp = taxnum
                                                      lifnr = partner ).
      lv_len = strlen( <ls_data>-bktxt ).
      ls_fi_data-rbukrs = COND bukrs( WHEN lv_len = 16
                                      THEN <ls_data>-bktxt+14
                                      ELSE '' ).
      IF <ls_data>-bktxt <> ''.
        DATA(lv_rbukrs) = COND bukrs( WHEN ls_fi_data-rbukrs IS INITIAL THEN ls_fi_data-bukrs ELSE ls_fi_data-rbukrs ). " БЕ ссылочного документа
      ENDIF.
      IF ls_fi_data-name1 IS INITIAL.
        ls_fi_data-name1 = <ls_data>-name2.
      ENDIF.
      " 39 Реализация физлицам
      IF <ls_data>-id_vid_iop = lcl_report_out=>gc_31 OR <ls_data>-id_vid_iop = lcl_report_out=>gc_37.
        ls_fi_data-id_vid_iop = COND #( WHEN <ls_data>-type = '1' THEN lcl_report_out=>gc_39 ELSE <ls_data>-id_vid_iop ).
      ENDIF.

      IF ls_fi_data-lifnr IS INITIAL OR ls_fi_data-id_vid_iop = '43'. " из ссылочных документов
        ASSIGN lt_ref_lifdocs_out[ bukrs = COND #( WHEN ls_fi_data-rbukrs IS INITIAL
                                                   THEN ls_fi_data-bukrs
                                                   ELSE ls_fi_data-rbukrs )
                                   belnr = <ls_data>-bktxt(10)
                                   gjahr = <ls_data>-bktxt+10(4) ] TO FIELD-SYMBOL(<ls_ref_lifdocs>).
        IF sy-subrc <> 0.
          ASSIGN lt_ref_lifdocs_out[ bukrs = ''
                                     belnr = <ls_data>-bktxt(10)
                                     gjahr = '' ] TO <ls_ref_lifdocs>.
        ENDIF.
        IF sy-subrc = 0.
          ls_fi_data = VALUE #( BASE ls_fi_data
                                lifnr = <ls_ref_lifdocs>-partner
                                unp   = <ls_ref_lifdocs>-taxnum
                                name1 = <ls_ref_lifdocs>-name
                                ndoc  = <ls_ref_lifdocs>-zz_ndoc
                                dcdoc = <ls_ref_lifdocs>-zz_dcdoc ).
        ENDIF.
      ENDIF.

      READ TABLE lt_real_awkey ASSIGNING FIELD-SYMBOL(<ls_real_awkey>)
           WITH KEY bukrs = lv_rbukrs
                    belnr = <ls_data>-bktxt(10)
                    gjahr = <ls_data>-bktxt+10(4)
           BINARY SEARCH.
      IF sy-subrc <> 0.
        READ TABLE lt_real_awkey ASSIGNING <ls_real_awkey>
             WITH KEY bukrs = lv_rbukrs
                      belnr = <ls_data>-bktxt(10)
             BINARY SEARCH.
      ENDIF.
      IF sy-subrc = 0.
        CASE <ls_real_awkey>-awtyp.
          WHEN 'RMRP'.
            ls_fi_data-mblnr = <ls_real_awkey>-awkey(10).
            ls_fi_data-mjahr = <ls_real_awkey>-awkey+10(4).
            ls_fi_data-awtyp = 'RMRP'.
          WHEN 'VBRK'.
          WHEN 'BKPF'.
            ls_fi_data-nmtxt = <ls_data>-bktxt(10).
            ls_fi_data-gjtxt = <ls_data>-bktxt+10(4).
          WHEN OTHERS.
            ls_fi_data-nmtxt = <ls_data>-awkey(10).
        ENDCASE.
      ENDIF.

      CASE <ls_data>-awtyp.
        WHEN 'VBRK'.
          ls_fi_data-vbeln = <ls_data>-awkey.

          READ TABLE lt_vbeln TRANSPORTING NO FIELDS
               WITH KEY vbeln = ls_fi_data-vbeln
               BINARY SEARCH.
          IF sy-subrc <> 0.
            INSERT VALUE #( vbeln = ls_fi_data-vbeln ) INTO lt_vbeln INDEX sy-tabix.
          ENDIF.
        WHEN 'RMRP'.
          ls_fi_data-mblnr = <ls_data>-awkey.
          IF <ls_data>-bktxt+10(2) = '20'.
            ls_fi_data-awtyp = <ls_data>-awtyp.
          ELSE.
            CLEAR: ls_fi_data-nmtxt,
                   ls_fi_data-gjtxt.
          ENDIF.
      ENDCASE.

      IF <ls_data>-bktxt CO '0123456789 '.
        ls_fi_data-nmtxt = <ls_data>-bktxt(10).
        IF lv_len = 14 OR lv_len = 16.
          ls_fi_data-gjtxt = <ls_data>-bktxt+10(4).
        ENDIF.
      ENDIF.

      IF <ls_data>-id_vid_iop = lcl_report_out=>gc_40 OR <ls_data>-id_vid_iop = lcl_report_out=>gc_42 OR <ls_data>-id_vid_iop = lcl_report_out=>gc_43. " OR <ls_data>-id_vid_iop = lcl_report_out=>gc_62.
        ls_fi_data-led = icon_checked.
      ENDIF.

      READ TABLE lt_sumdocs_bset TRANSPORTING NO FIELDS
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        CLEAR ls_fi_data-mwskz.
        LOOP AT lt_sumdocs_bset ASSIGNING FIELD-SYMBOL(<ls_sumdocs_bset>) FROM sy-tabix.
          IF    <ls_sumdocs_bset>-bukrs <> ls_fi_data-bukrs
             OR <ls_sumdocs_bset>-belnr <> ls_fi_data-belnr
             OR <ls_sumdocs_bset>-gjahr <> ls_fi_data-gjahr.
            EXIT.
          ENDIF.

          READ TABLE lt_vid_iop TRANSPORTING NO FIELDS
               WITH KEY id_vid_iop = ls_fi_data-id_vid_iop
                        mwskz      = <ls_sumdocs_bset>-mwskz.
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          IF ls_fi_data-id_vid_iop = gc_38 AND <ls_sumdocs_bset>-shkzg = 'S'.
            CONTINUE.
          ENDIF.

          IF ls_fi_data-mwskz NP |*{ <ls_sumdocs_bset>-mwskz }*|.
            ls_fi_data-mwskz = COND #( WHEN ls_fi_data-mwskz = ''
                                       THEN <ls_sumdocs_bset>-mwskz
                                       ELSE |{ ls_fi_data-mwskz },{ <ls_sumdocs_bset>-mwskz }| ).
          ENDIF.
          ls_fi_data-total_w_vat = ls_fi_data-total_w_vat + COND fins_vtcur12( WHEN <ls_sumdocs_bset>-shkzg = 'S'
                                                                               THEN ( abs( <ls_sumdocs_bset>-hwbas ) + abs(
                                                                                          <ls_sumdocs_bset>-hwste ) )
                                                                               ELSE - abs( <ls_sumdocs_bset>-hwbas ) - <ls_sumdocs_bset>-hwste ).
          ls_fi_data-total_vat   = ls_fi_data-total_vat + COND fins_vtcur12( WHEN <ls_sumdocs_bset>-shkzg = 'S'
                                                                             THEN <ls_sumdocs_bset>-hwste
                                                                             ELSE - <ls_sumdocs_bset>-hwste ).
        ENDLOOP.
      ENDIF.

      IF    ls_fi_data-id_vid_iop = gc_31
         OR ls_fi_data-id_vid_iop = gc_33
         OR ls_fi_data-id_vid_iop = gc_36
         OR ls_fi_data-id_vid_iop = gc_37
         OR ls_fi_data-id_vid_iop = gc_38
         OR ls_fi_data-id_vid_iop = gc_38_1
         OR ls_fi_data-id_vid_iop = gc_39
         OR ls_fi_data-id_vid_iop = gc_40
         OR ls_fi_data-id_vid_iop = gc_42
         OR ls_fi_data-id_vid_iop = gc_53                                     "#1
         OR ls_fi_data-id_vid_iop = gc_681                                    "#6
         OR ls_fi_data-id_vid_iop = gc_32                                     "#6
         OR ls_fi_data-id_vid_iop = gc_64.
        "       OR ls_fi_data-id_vid_iop = gc_62

        ls_fi_data-total_w_vat = - ls_fi_data-total_w_vat.
        ls_fi_data-total_vat   = - ls_fi_data-total_vat.
      ENDIF.

      READ TABLE lt_sumdocs_bseg TRANSPORTING NO FIELDS
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        LOOP AT lt_sumdocs_bseg ASSIGNING FIELD-SYMBOL(<ls_sumdocs_bseg>) FROM sy-tabix.
          IF    <ls_sumdocs_bseg>-bukrs <> ls_fi_data-bukrs
             OR <ls_sumdocs_bseg>-belnr <> ls_fi_data-belnr
             OR <ls_sumdocs_bseg>-gjahr <> ls_fi_data-gjahr.

            EXIT.
          ENDIF.

          ls_fi_data-excise = ls_fi_data-excise + COND #( WHEN <ls_sumdocs_bseg>-shkzg = 'S'
                                                          THEN <ls_sumdocs_bseg>-hwste
                                                          ELSE - <ls_sumdocs_bseg>-hwste ).
        ENDLOOP.
      ENDIF.

      READ TABLE gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data>)
           WITH KEY bukrs = ls_fi_data-bukrs
                    belnr = ls_fi_data-belnr
                    gjahr = ls_fi_data-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        IF <ls_fi_data>-id_vid_iop IS INITIAL.
          <ls_fi_data>-id_vid_iop = ls_fi_data-id_vid_iop.
        ELSEIF <ls_fi_data>-id_vid_iop IS NOT INITIAL AND ls_fi_data-id_vid_iop IS NOT INITIAL AND ls_fi_data-id_vid_iop <> <ls_fi_data>-id_vid_iop.
        ENDIF.

        <ls_fi_data>-total_w_vat = <ls_fi_data>-total_w_vat + ls_fi_data-total_w_vat.
        <ls_fi_data>-total_vat   = <ls_fi_data>-total_vat + ls_fi_data-total_vat.
        <ls_fi_data>-excise      = <ls_fi_data>-excise + ls_fi_data-excise.
        IF <ls_fi_data>-mwskz NS ls_fi_data-mwskz.
          <ls_fi_data>-mwskz = |{ <ls_fi_data>-mwskz }/{ ls_fi_data-mwskz }|.
        ENDIF.
      ELSE.
        INSERT ls_fi_data INTO gt_fi_data INDEX sy-tabix.
        CLEAR ls_fi_data.
      ENDIF.
    ENDLOOP.

    LOOP AT gt_fi_data ASSIGNING <ls_fi_data>.
      READ TABLE lt_vid_iop ASSIGNING FIELD-SYMBOL(<ls_vid_iop>)
           WITH KEY id_vid_iop = <ls_fi_data>-id_vid_iop
           BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_fi_data>-id_vid_iop_name = <ls_vid_iop>-nm_vid_doc.
      ENDIF.
    ENDLOOP.

    SORT gt_fi_data BY id_vid_iop
                       bukrs
                       belnr
                       gjahr
                       mwskz.

    " ---------------------------------------------------------------------
    DELETE gt_fi_data WHERE id_vid_iop IS INITIAL.    " пока не точно
    " ---------------------------------------------------------------------

    gt_fi_data_old = gt_fi_data.
  ENDMETHOD.

  METHOD mode1_constructor.
    IF NOT (    lcl_report_out=>gv_mode = lcl_report_out=>gc_mode2
             OR lcl_report_out=>gv_mode = lcl_report_out=>gc_mode4 ).   " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      RETURN.
    ENDIF.

    lcl_report_out=>gv_mode = lcl_report_out=>gc_mode1.

    IF gr_container2 IS BOUND.
      gr_container2->free( ).
      FREE: gr_container2,
            gr_grid_2.
    ENDIF.

    get_fi_data( ).

    LEAVE TO SCREEN 2001.
  ENDMETHOD.

  METHOD mode1_create.
    TYPES: BEGIN OF lty_s_bukrs,
             bukrs TYPE bkpf-bukrs,
           END OF lty_s_bukrs.
    TYPES: BEGIN OF lty_s_doc,
             bukrs TYPE bseg-bukrs,
             belnr TYPE bseg-belnr,
             gjahr TYPE bseg-gjahr,
           END OF lty_s_doc.

    DATA lv_check_cnt TYPE i.                  " кол-во отмеченных документов
    DATA lt_lifnr     TYPE HASHED TABLE OF bseg-lifnr WITH UNIQUE KEY table_line.
    DATA lv_vid_op    TYPE zfi_esf-id_vid_iop.
    DATA lv_count     TYPE int4.               " AK_RUBAHOV #27144 ZFI_REGINV
    DATA lv_index     TYPE i.
    DATA lv_bef_eschf TYPE string.
    DATA lv_cur_eschf TYPE string.
    DATA lt_tlines    TYPE STANDARD TABLE OF tline.
    DATA ls_layout    TYPE lvc_s_layo.

    DATA(lv_error) = lcl_report_out=>check_marked_lines_fi( ).
    IF lv_error IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      lv_check_cnt = lv_check_cnt + 1.
      INSERT <ls_fi_data>-lifnr INTO TABLE lt_lifnr.

      IF lv_vid_op IS INITIAL.
        lv_vid_op = <ls_fi_data>-id_vid_iop.
      ELSEIF         lv_vid_op <> <ls_fi_data>-id_vid_iop
             AND NOT (     ( <ls_fi_data>-id_vid_iop = lcl_report_out=>gc_38 OR <ls_fi_data>-id_vid_iop = lcl_report_out=>gc_39 )
                       AND ( lv_vid_op               = lcl_report_out=>gc_38 OR lv_vid_op               = lcl_report_out=>gc_39 ) ).
        MESSAGE 'Выберите только один Вид Операции'(m17) TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      "--> AK_RUBAHOV #27144 ZFI_REGINV
      IF lv_count < 1.
        gv_vid_op = <ls_fi_data>-id_vid_iop. " AK_RUBAHOV #27144 ZFI_REGINV
      ELSE.
        CLEAR gv_vid_op.
      ENDIF.
      lv_count = lv_count + 1.
      "--< AK_RUBAHOV #27144 ZFI_REGINV
    ENDLOOP.
    " Если несколько контрагентов то вывести сообщение                                        "{ ins DHVK932363
    IF lines( lt_lifnr ) > 1.
      IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                          iv_cancel        = abap_false
                                          iv_text_question = TEXT-n01 ) <> '1'.
        RETURN.
      ENDIF.
    ENDIF.
    "{ ins DHVK932363
    " получить результат проверки
    DATA(lv_res) = check_matched_fi_data( it_fi_data = gt_fi_data_filtered ).
    IF lv_res = abap_true.
      RETURN.
    ENDIF.

    IF <ls_fi_data> IS NOT ASSIGNED.
      MESSAGE 'Ошибка при создании ЭСЧФ'(m62) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.
    "{ #25733 Массовое создание исходящих ЭСЧФ
    IF iv_id_type_esf IS NOT INITIAL.
      gv_id_type_esf = iv_id_type_esf.
    ELSE.
      gv_id_type_esf = COND #( WHEN lv_res = 'F' THEN 'FIXED' ELSE 'ORIGINAL' ).

      CLEAR: gv_change_vid_op,
             gv_partner,
             gv_name. " AK_RUBAHOV #27144 ZFI_REGINV
      CALL SCREEN 2010 STARTING AT 30 10.

      IF sy-ucomm <> 'BUT_YES'.
        RETURN.
      ENDIF.
    ENDIF.
    "} #25733 Массовое создание исходящих ЭСЧФ

    IF gv_id_type_esf IS INITIAL.
      RETURN.
    ENDIF.

    "--> AK_RUBAHOV #27144 ZFI_REGINV
    IF <ls_fi_data>-id_vid_iop = gc_39 AND gv_change_vid_op = 'X'.
      <ls_fi_data>-id_vid_iop = gc_31.

      SELECT SINGLE nm_vid_doc FROM zfi_vid_iop_h
        WHERE id_vid_iop = @gc_31
        INTO @<ls_fi_data>-id_vid_iop_name.

      IF gv_partner IS NOT INITIAL.
        <ls_fi_data>-lifnr = gv_partner.
        <ls_fi_data>-name1 = gv_name.

        SELECT SINGLE bu_sort1 FROM but000
          WHERE partner = @gv_partner
          INTO @<ls_fi_data>-unp.
      ENDIF.
    ENDIF.
    "--< AK_RUBAHOV #27144 ZFI_REGINV

    " дополнительный ЭСЧФ должен быть со ссылкой на документ с приавязанной ЭСЧФ
    IF gv_id_type_esf = lcl_report=>gc_esf_ty_additional OR gv_id_type_esf = 'FIXED'.
      IF lv_check_cnt < 1.
        MESSAGE e027(zfi_esf).
        RETURN.
      ENDIF.
      lv_index = 0.
      LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data> WHERE chk_box = abap_true.
        lv_bef_eschf = lv_cur_eschf.
        CLEAR lt_tlines.
        CALL FUNCTION 'READ_TEXT'
          EXPORTING  id                      = '0003'
                     language                = sy-langu
                     name                    = CONV thead-tdname( VALUE lty_s_doc( bukrs = <ls_fi_data>-bukrs
                                                                                   belnr = <ls_fi_data>-belnr
                                                                                   gjahr = <ls_fi_data>-gjahr ) )
                     object                  = 'BELEG'
          TABLES     lines                   = lt_tlines
          EXCEPTIONS id                      = 1
                     language                = 2
                     name                    = 3
                     not_found               = 4
                     object                  = 5
                     reference_check         = 6
                     wrong_access_to_archive = 7
                     OTHERS                  = 8.

        lv_cur_eschf = VALUE #( lt_tlines[ 1 ]-tdline DEFAULT space ).
        IF lv_index <> 0.
          IF lv_cur_eschf <> lv_bef_eschf.
            MESSAGE '№ и год исходного документа в выбранных строках не совпадают'(m91) TYPE 'I'.
            RETURN.
          ENDIF.
        ENDIF.
        lv_index = lv_index + 1.
      ENDLOOP.

      IF sy-subrc <> 0 OR lt_tlines IS INITIAL.
        MESSAGE 'Заполните ссылку на исходный документ'(m67) TYPE 'I'.
        RETURN.
      ENDIF.

      LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data> WHERE chk_box = abap_true.
        <ls_fi_data>-belnr_ish = lv_cur_eschf.
      ENDLOOP.

      SELECT e~n_esf,
             e~dt_vs_esf,
             e~pr_vzml_post                                 " DHVK942202
        INTO ( @<ls_fi_data>-n_esf_ish, @<ls_fi_data>-dt_vs_ish, @<ls_fi_data>-prvzml_ish )
        FROM zfi_esf_match AS m
               JOIN
                 zfi_esf AS e ON  e~pr_esf = m~pr_esf
                              AND e~n_esf  = m~n_esf
        WHERE m~bukrs = @<ls_fi_data>-bukrs
          AND m~gjahr = @lv_cur_eschf+10
          AND m~belnr = @lv_cur_eschf(10)
          AND (    NOT e~id_stat_esf_p IN (@lcl_report=>gc_stat_p_on_agreement_cancel,@lcl_report=>gc_stat_p_cancelled)
                OR NOT e~id_stat_esf_v IN (@lcl_report=>gc_stat_p_on_agreement_cancel,@lcl_report=>gc_stat_p_cancelled) ).
      ENDSELECT.

      IF sy-subrc <> 0.
        MESSAGE 'Не найдена не аннулированная ЕСЧФ к исходному документу '(m76) TYPE 'I'.
        RETURN.
      ENDIF.
    ELSE. " очистка полей для исходной фактуры
      CLEAR: <ls_fi_data>-n_esf_ish,
             <ls_fi_data>-dt_vs_ish,
             <ls_fi_data>-prvzml_ish,
             <ls_fi_data>-belnr_ish.
    ENDIF.

    CASE <ls_fi_data>-id_vid_iop.
      WHEN gc_31.
        lcl_report_out=>build_31( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_32.
        lcl_report_out=>build_32( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_33.
        lcl_report_out=>build_33( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_36.
        lcl_report_out=>build_36( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_37.
        lcl_report_out=>build_37( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_38.
        lcl_report_out=>build_38( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_38_1.
        lcl_report_out=>build_38_1( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_39.
        lcl_report_out=>build_39( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_40.
        lcl_report_out=>build_40( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_42.
        lcl_report_out=>build_42( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_43.
        lcl_report_out=>build_43( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_45_1.
        lcl_report_out=>build_45_1( iv_id_type_esf = gv_id_type_esf ).
        " start Tararenko O - #31229 - ЭСЧФ для 46 вида операции
      WHEN gc_46.
        lcl_report_out=>build_46( iv_id_type_esf = gv_id_type_esf ).
        " end Tararenko O - #31229 - ЭСЧФ для 46 вида операции
      WHEN gc_53.
        lcl_report_out=>build_53( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_681.
        lcl_report_out=>build_681( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_62.
        lcl_report_out=>build_62( iv_id_type_esf = gv_id_type_esf ).
      WHEN gc_64.
        lcl_report_out=>build_64( iv_id_type_esf = gv_id_type_esf ).
    ENDCASE.

    gv_save = abap_true.
    SORT gt_esf_data BY pr_esf
                        n_esf.
    CLEAR gv_id_type_esf.
    gr_grid_1->get_frontend_layout( IMPORTING es_layout = ls_layout ).
    ls_layout-cwidth_opt = abap_true.
    gr_grid_1->set_frontend_layout( is_layout = ls_layout ).

    gr_grid_1->get_variant( IMPORTING es_variant = DATA(ls_variant)
                                      e_save     = DATA(lv_save) ).
    ls_variant-handle+2(1) = lcl_report_out=>gv_mode+4(1).
    gr_grid_1->set_variant( is_variant = ls_variant
                            i_save     = lv_save ).

    gr_grid_1->refresh_table_display( is_stable = VALUE #( col = abap_true
                                                           row = abap_true ) ).
  ENDMETHOD.

  METHOD mode1_cancel.
    IF lcl_report_out=>check_marked_lines_fi( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_text_question = 'Отменить сопоставление?'(m37) ) <> '1'.
      RETURN.
    ENDIF.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data1>) WHERE     chk_box  = abap_true
                                                                            AND n_esf   IS NOT INITIAL.
      "--> AK_RUBAHOV #27144 ZFI_REGINV
      IF <ls_fi_data1>-id_vid_iop = '31'.
        SELECT SINGLE bseg~bukrs,
                      bseg~belnr,
                      bseg~gjahr,
                      but000~type,
                      but000~partner,
                      but000~name_last && ' ' && but000~name_first && ' ' && but000~namemiddle AS name,
                      dfkkbptaxnum~taxnum
          FROM bseg
                 LEFT JOIN
                   but000 ON but000~partner = bseg~kunnr
                     LEFT JOIN
                       dfkkbptaxnum ON  dfkkbptaxnum~partner = but000~partner
                                    AND dfkkbptaxnum~taxtype = 'BY0'
          WHERE bseg~bukrs  = @<ls_fi_data1>-bukrs
            AND bseg~belnr  = @<ls_fi_data1>-belnr
            AND bseg~gjahr  = @<ls_fi_data1>-gjahr
            AND bseg~koart  = 'D'
            AND but000~type = 1
          INTO @DATA(ls_partner).
        IF sy-subrc = 0.
          <ls_fi_data1>-id_vid_iop = '39'.
          SELECT SINGLE nm_vid_doc FROM zfi_vid_iop_h
            WHERE id_vid_iop = '39'
            INTO @<ls_fi_data1>-id_vid_iop_name.
          <ls_fi_data1>-lifnr = ls_partner-partner.
          <ls_fi_data1>-name1 = ls_partner-name.
          <ls_fi_data1>-unp   = ls_partner-taxnum.
        ENDIF.
      ENDIF.
      "--< AK_RUBAHOV #27144 ZFI_REGINV

      LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data2>) WHERE n_esf = <ls_fi_data1>-n_esf.
        <ls_fi_data2>-chk_box = abap_true.

        MODIFY gt_esf_data FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = lcl_report=>gc_out_inv
                                                                                          AND n_esf  = <ls_fi_data2>-n_esf.
        MODIFY gt_esf_roster FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = lcl_report=>gc_out_inv
                                                                                            AND n_esf  = <ls_fi_data2>-n_esf.
        MODIFY gt_esf_match FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = lcl_report=>gc_out_inv
                                                                                           AND n_esf  = <ls_fi_data2>-n_esf.

        sy-subrc = 0.
      ENDLOOP.
      IF sy-subrc = 0.
        gv_save = abap_true.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode1_mass_create.  " #25733 Массовое создание исходящих ЭСЧФ
    DATA lt_selected_rows TYPE TABLE OF sytabix.

    " Сохраняем номера выбранных строк
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      APPEND sy-tabix TO lt_selected_rows.
      <ls_fi_data>-chk_box = abap_false.
    ENDLOOP.
    IF lt_selected_rows IS INITIAL.
      RETURN.
    ENDIF.

    " Выводим сообщение о массовом создании
    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_cancel        = abap_false
                                        iv_text_question = TEXT-n02 ) <> '1'.
      RETURN.
    ENDIF.

    " Создаем для каждой отдельно
    LOOP AT lt_selected_rows ASSIGNING FIELD-SYMBOL(<fs_sel_row>).
      ASSIGN gt_fi_data_filtered[ <fs_sel_row> ] TO <ls_fi_data>.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.
      <ls_fi_data>-chk_box = abap_true.
      mode1_create( iv_id_type_esf = 'ORIGINAL' ).
      IF gv_save = abap_true.
        save_data( ).
      ENDIF.
      <ls_fi_data>-chk_box = abap_false.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode1_refresh.
    dequeue_all_fi( ).
    refresh_data( abap_true ).
  ENDMETHOD.

  METHOD mode2_constructor.
    lcl_report_out=>gv_mode = lcl_report_out=>gc_mode2.
    IF gr_einv_service IS NOT BOUND.
      gr_einv_service = zcl_einvoice_service_factory=>get_instance( ).
    ENDIF.
    IF gr_container1 IS BOUND.
      gr_container1->free( ).
      FREE: gr_container1,
            gr_grid_1.
    ENDIF.

    get_esf_data( ).

    LEAVE TO SCREEN 1001.
  ENDMETHOD.

  METHOD mode2_xml.
    DATA lv_path     TYPE string.
    DATA lv_xml      TYPE xstring.
    DATA lt_xml      TYPE xml_rawdata.
    DATA lt_roster   TYPE zfi_t_esf_roster.
    DATA ls_esf      TYPE zfi_esf.
    DATA lv_len      TYPE i.
    DATA lv_filename TYPE string.

    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>) WHERE chk_box = abap_true.
      IF lv_path IS INITIAL.
        cl_gui_frontend_services=>directory_browse(
          EXPORTING window_title    = CONV string( 'Выбор папки для выгрузки'(b40) )
                    initial_folder  = 'C:\'
          CHANGING  selected_folder = lv_path ).

        IF lv_path IS INITIAL.
          RETURN.
        ENDIF.
      ENDIF.
      CLEAR: lv_xml,
             lt_xml,
             lt_roster.
      lt_roster = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( n_esf = <ls_esf>-n_esf )
                           ( CORRESPONDING  zfi_esf_roster( ls_esf_roster ) ) ).
*      --> #35697 Журнал ЭСЧФ ZFI_REGINV V.Zaretsky 19.01.2024
*     DATA(ls_esf) = <ls_esf> .
      MOVE-CORRESPONDING <ls_esf> TO ls_esf.
      " <-- #35697 Журнал ЭСЧФ ZFI_REGINV V.Zaretsky 19.01.2024
      IF ls_esf-dt_vs_esf < '19000101'.
        ls_esf-dt_vs_esf = sy-datum.
      ENDIF.

      TRY.
          CALL TRANSFORMATION zfi_outbound_einvoice
               SOURCE header = ls_esf
                      roster = lt_roster
               RESULT XML lv_xml.
        CATCH cx_transformation_error INTO DATA(lr_parse_error).
          MESSAGE e018(zfi_ei) WITH lr_parse_error->get_text( ).
      ENDTRY.
      CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
        EXPORTING buffer        = lv_xml
        IMPORTING output_length = lv_len
        TABLES    binary_tab    = lt_xml.
      lv_filename = |{ lv_path }\\ESF_{ <ls_esf>-n_esf }.xml|.
      cl_gui_frontend_services=>gui_download( EXPORTING  bin_filesize = lv_len
                                                         filename     = lv_filename
                                                         filetype     = 'BIN'
                                              CHANGING   data_tab     = lt_xml
                                              EXCEPTIONS OTHERS       = 24 ).
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD mode2_refresh.
    dequeue_all_esf( ).
    unlock_esf_on_hotspot( ).
    clear_detail( ).

    refresh_data( abap_true ).
    LEAVE SCREEN.
  ENDMETHOD.

  METHOD mode2_get_status.
    DATA lt_doc_list TYPE zif_einvoice_service=>ty_t_inv_number.
    DATA lt_status   TYPE zif_einvoice_service=>ty_t_doc_status.

    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    CLEAR gt_bapiret.
    CALL FUNCTION 'ENQUEUE_EZFI_ESF_PORTAL'
      EXPORTING  mode           = lcl_report=>gc_lock_stat_o
      EXCEPTIONS foreign_lock   = 1
                 system_failure = 2
                 OTHERS         = 3.
    IF sy-subrc <> 0.
      DATA(lv_uname) = sy-msgv1.
      MESSAGE i019(zfi_esf) WITH lv_uname TEXT-x96.
      RETURN.
    ENDIF.

    " сохранить данные hotspot
    save_data( 'H' ).

    lt_doc_list = VALUE #( FOR ls_data IN gt_esf_data WHERE ( chk_box = abap_true )
                           ( ls_data-n_esf ) ).

    IF lt_doc_list IS INITIAL.
      RETURN.
    ENDIF.

    TRY.
        gr_einv_service->login( ).
        gr_einv_service->get_status_list( EXPORTING it_doc    = lt_doc_list
                                          IMPORTING et_status = lt_status ).
      CATCH zcx_einvoice_service INTO DATA(lr_err).
        DATA(ls_return) = lr_err->to_bapiret2( ).
        APPEND ls_return TO gt_bapiret.
        MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
        CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
          EXPORTING mode = lcl_report=>gc_lock_stat_o.
        RETURN.
    ENDTRY.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      ASSIGN lt_status[ number = <ls_esf_data>-n_esf ] TO FIELD-SYMBOL(<ls_status>).
      IF sy-subrc <> 0 OR <ls_status>-status = 'NOT_FOUND' OR <ls_status>-status IS INITIAL.
        APPEND VALUE #( type       = 'E'
                        id         = 'ZFI_EI'
                        number     = 034
                        message_v1 = <ls_esf_data>-n_esf ) TO gt_bapiret.
      ELSE.
        IF <ls_esf_data>-id_stat_esf_p = <ls_status>-status. " не обновлять данные ЭСЧФ без смены статуса
          <ls_esf_data>-chk_box = abap_false.
          CONTINUE.
        ENDIF.
        IF    <ls_status>-status = lcl_report=>gc_stat_p_cancelled                                                   "{ins DHVK932265
           OR <ls_status>-status = lcl_report=>gc_stat_p_on_agreement_cancel.
          <ls_esf_data>-dt_anul_prt = <ls_status>-date.
        ENDIF.                                                                                                    "}ins DHVK932265
        <ls_esf_data>-id_stat_esf_p = <ls_status>-status.
        <ls_esf_data>-last_user     = sy-uname.
        <ls_esf_data>-aedat         = sy-datum.
        GET TIME STAMP FIELD <ls_esf_data>-tstampl.
        IF <ls_status>-status = 'ERROR'.            " 13837-220 При получении такого статуса в ЭСЧФ очищаются поля PR_TEK_MES, DT_PODPIS. Поле ID_STAT_ESF_V получает значение INPROGRESS.
          CLEAR: <ls_esf_data>-pr_tek_mec,
                 <ls_esf_data>-dt_podpis.
          <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
          APPEND VALUE #( type       = 'E'
                          id         = 'ZFI_EI'
                          number     = '041'
                          message_v1 = <ls_esf_data>-n_esf
                          message_v2 = <ls_status>-message )
                 TO gt_bapiret.
        ENDIF.
      ENDIF.
    ENDLOOP.

    gv_save = abap_true.

    IF gt_bapiret IS NOT INITIAL.
      MESSAGE 'Возникли ошибки при выполнении операции, смотрите Протокол'(m53) TYPE 'I'.
    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
      EXPORTING mode = lcl_report=>gc_lock_stat_o.
  ENDMETHOD.

  METHOD mode2_approve_null.
    DATA lv_text TYPE string.

    FIELD-SYMBOLS <ls_esf> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      IF <ls_esf> IS ASSIGNED.
        MESSAGE e023(zfi_esf).
      ELSE.
        ASSIGN gt_esf_data[ sy-tabix ] TO <ls_esf>.
      ENDIF.
    ENDLOOP.
    IF <ls_esf> IS NOT ASSIGNED.
      MESSAGE 'Выберите ЭСЧФ'(m09) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    IF <ls_esf>-id_stat_esf_p = lcl_report=>gc_stat_p_cancelled.
      lv_text = TEXT-m20.
    ELSEIF <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_sended.
      lv_text = replace( val  = TEXT-m99
                         sub  = '&'
                         with = <ls_esf>-n_esf ).
    ELSE.
      MESSAGE TEXT-t13 TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_cancel        = abap_false
                                        iv_text_question = lv_text ) <> '1'.
      RETURN.
    ENDIF.
    IF <ls_esf>-id_stat_esf_v <> lcl_report=>gc_stat_v_cancelled.
      <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_cancelled.
      <ls_esf>-last_user     = sy-uname.
      <ls_esf>-aedat         = sy-datum.
      GET TIME STAMP FIELD <ls_esf>-tstampl.
      gv_save = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_del_relation.
    DATA lt_stat TYPE RANGE OF zfi_esf-id_stat_esf_p.
    DATA lv_flg  TYPE char1.
    DATA lv_text TYPE char100.

    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.
    lt_stat = VALUE #( sign   = 'I'
                       option = 'EQ'
                       ( low = '' )
                       ( low = lcl_report=>gc_stat_p_error ) ).
    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      IF <ls_esf_data>-id_stat_esf_v <> lcl_report=>gc_stat_v_inprogress.
        MESSAGE 'Все документы должны быть в статусе "В разработке"'(m65) TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      IF lv_flg = abap_true.
        MESSAGE TEXT-m74 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.
      lv_flg = abap_true.
    ENDLOOP.

    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_text_question = 'Отменить сопоставление?'(m37) ) <> '1'.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING <ls_esf_data>
         WHERE     chk_box        = abap_true
               AND n_esf         IS NOT INITIAL
               AND id_stat_esf_v  = lcl_report=>gc_stat_v_inprogress
           " AND id_stat_esf_p IS INITIAL.                            "{ замена DHVK931068
               AND id_stat_esf_p IN lt_stat.                             "}замена DHVK931068
      IF p_mode1 = 'X'.
        DELETE FROM zfi_def_deduct WHERE n_esf = <ls_esf_data>-n_esf.
      ENDIF.
      IF <ls_esf_data>-id_type_esf = 'ORIGINAL'.
        SELECT SINGLE id_stat_esf_v FROM zfi_esf
          INTO @DATA(lv_id_stat_esf_v)
          WHERE pr_esf    = @<ls_esf_data>-pr_esf
            AND n_esf_ish = @<ls_esf_data>-n_esf.
        IF sy-subrc = 0 AND NOT ( lv_id_stat_esf_v = lcl_report=>gc_stat_p_cancelled ).
          lv_text = |ЭСЧФ { <ls_esf_data>-n_esf }:|.
          CONCATENATE lv_text 'Удалите Дополнительные ЭСЧФ'(m66) INTO lv_text SEPARATED BY space.
          MESSAGE lv_text TYPE 'I'.

          CONTINUE.
        ENDIF.
      ENDIF.
      MODIFY gt_esf_roster FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                                          AND n_esf  = <ls_esf_data>-n_esf.
      MODIFY gt_esf_match FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                                         AND n_esf  = <ls_esf_data>-n_esf.
      <ls_esf_data>-del_flg = abap_true.
      CLEAR <ls_esf_data>-belnr.
      MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = abap_false ) TRANSPORTING n_esf WHERE n_esf = <ls_esf_data>-n_esf.

      sy-subrc = 0.

    ENDLOOP.
    IF sy-subrc = 0.
      gv_save = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_checked_status_add.
    DATA lt_bset          TYPE STANDARD TABLE OF bset WITH NON-UNIQUE SORTED KEY doc COMPONENTS bukrs belnr gjahr.
    DATA lv_question_text TYPE c LENGTH 320.
    DATA ls_esf           TYPE zfi_esf.
    DATA lv_sum_hwste     TYPE hwste.
    DATA lv_sum_hwbas     TYPE hwbas.

    " Проверка на выбранную запись в гриде                                     " #29181 G.Domanikova 08/06/2023 Анализ статуса
    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    " Установка статуса                                                        " #29181 G.Domanikova 08/06/2023 Анализ статуса
    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_text_question = 'Установить статус "Проверено"?'(m40) ) <> '1'.
      RETURN.
    ENDIF.

    " Только для 42 вида операции                                              " #29181 G.Domanikova 08/06/2023 Анализ статуса
    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>)
         WHERE     chk_box = abap_true
               AND (    id_stat_esf_v = lcl_report=>gc_stat_v_inprogress
                     OR id_stat_esf_v = lcl_report=>gc_stat_p_in_progress_error )
               AND id_vid_iop = '42'.
      IF <ls_esf>-belnr <> '->'. " 8000000501 для одного ссылочного бух. документа
        IF NOT line_exists( lt_bset[ KEY doc COMPONENTS bukrs = <ls_esf>-bukrs
                                                        belnr = <ls_esf>-belnr
                                                        gjahr = <ls_esf>-gjahr ] ).
          INSERT VALUE #( bukrs = <ls_esf>-bukrs
                          belnr = <ls_esf>-belnr
                          gjahr = <ls_esf>-gjahr )
                 INTO TABLE lt_bset.
        ENDIF.
      ELSE. " 8000000501 для нескольких ссылочных бух. документов
        SELECT bukrs belnr gjahr FROM zfi_esf_match
          INTO CORRESPONDING FIELDS OF TABLE lt_bset
          WHERE n_esf     = <ls_esf>-n_esf
            AND pr_esf    = <ls_esf>-pr_esf
            AND pr_unbind = ''.
      ENDIF.
    ENDLOOP.

    SORT lt_bset.

    DELETE ADJACENT DUPLICATES FROM lt_bset COMPARING ALL FIELDS.

    IF lt_bset IS NOT INITIAL.
      " Заполнение сумм
      SELECT bukrs, belnr, gjahr, hwste, hwbas
        FROM bset
        INTO CORRESPONDING FIELDS OF TABLE @lt_bset
        FOR ALL ENTRIES IN @lt_bset
        WHERE bukrs = @lt_bset-bukrs
          AND belnr = @lt_bset-belnr
          AND gjahr = @lt_bset-gjahr.

      IF sy-subrc <> 0.
        FREE lt_bset.
      ELSE.
        LOOP AT lt_bset ASSIGNING FIELD-SYMBOL(<ls_bset>).
          <ls_bset>-hwste = abs( <ls_bset>-hwste ).
          <ls_bset>-hwbas = abs( <ls_bset>-hwbas ).
        ENDLOOP.

        SORT lt_bset BY bukrs
                        belnr
                        gjahr
                        hwbas DESCENDING.

        LOOP AT lt_bset ASSIGNING <ls_bset>.
          AT NEW gjahr.
            CONTINUE.
          ENDAT.
          DELETE lt_bset.
        ENDLOOP.
      ENDIF.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING <ls_esf> WHERE chk_box = abap_true.
      " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел декларации
      IF     <ls_esf>-id_type_esf <> gc_esf_additional_type
         AND <ls_esf>-id_vid_iop  <> gc_39.                                        " AK_BUTVILOVS #8000000514, zfi_reginv 39Физлица Проверка при создан

        IF <ls_esf>-countrycode_post IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ENDIF.

        SELECT SINGLE mandt FROM ztreginv_intcn3
          WHERE intcn3 = @<ls_esf>-countrycode_post
          " TODO: variable is assigned but never used (ABAP cleaner)
          INTO @DATA(lv_mandt).

        IF     sy-subrc           = 0                                                    " AK_BUTVILOVS #8000000513, zfi_reginv УНП импортных поставщиков
           AND <ls_esf>-unp_post IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Поставщика'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Поставщика|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-addres_post IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Юридический адрес'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Юридический адрес|.
          ENDIF.
        ENDIF.

        SELECT SINGLE awkey FROM bkpf
          WHERE bukrs = @<ls_esf>-bukrs
            AND belnr = @<ls_esf>-belnr
            AND gjahr = @<ls_esf>-gjahr
            AND awtyp = 'VBRK'
          INTO @DATA(lv_awkey).

        IF sy-subrc = 0.
          SELECT SINGLE zdeliv_note_h~zser
            FROM zdeliv_note_h
                   JOIN
                     likp ON zdeliv_note_h~zdelivery = likp~vbeln
                       JOIN
                         vbfa ON likp~vbeln = vbfa~vbelv
                           LEFT JOIN
                             zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
            " TODO: variable is assigned but never used (ABAP cleaner)
            INTO @DATA(lv_zser)
            WHERE vbfa~vbeln   = @lv_awkey
              AND vbfa~vbtyp_v = 'J'. " поставка

          IF <ls_esf>-id_type_esf = gc_esf_original_type AND sy-subrc = 0.

            " 8000001292 Если все виды документов, указанные в разделе «Условия поставки», имеют код 602 615 (ТН-2),
            " то реквизиты грузополучателя и грузоотправителясделать необязательными для заполнения.
            IF     ( <ls_esf>-id_vid_doc    = '602' OR <ls_esf>-id_vid_doc    = '615' )
               AND ( <ls_esf>-id_vid_doc_02 = '602' OR <ls_esf>-id_vid_doc_02 = '615' OR <ls_esf>-id_vid_doc_02 IS INITIAL )
               AND ( <ls_esf>-id_vid_doc_03 = '602' OR <ls_esf>-id_vid_doc_03 = '615' OR <ls_esf>-id_vid_doc_03 IS INITIAL ).
              " не проверять!
            ELSE.
              IF <ls_esf>-countrycode_grotp IS INITIAL.
                IF lv_question_text IS INITIAL.
                  lv_question_text = 'Код страны грузоотправителя'.
                ELSE.
                  lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
                ENDIF.
              ENDIF.

              IF <ls_esf>-unn_grotp IS INITIAL.
                IF lv_question_text IS INITIAL.
                  lv_question_text = 'УНП Грузоотправителя'.
                ELSE.
                  lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
                ENDIF.
              ENDIF.

              IF <ls_esf>-nm_grotp IS INITIAL.
                IF lv_question_text IS INITIAL.
                  lv_question_text = 'Наименование'.
                ELSE.
                  lv_question_text = |{ lv_question_text }, Наименование|.
                ENDIF.
              ENDIF.

              IF <ls_esf>-address_grotp IS INITIAL.
                IF lv_question_text IS INITIAL.
                  lv_question_text = 'Адрес отправки'.
                ELSE.
                  lv_question_text = |{ lv_question_text }, Адрес отправки|.
                ENDIF.
              ENDIF.
            ENDIF.

*            IF <ls_esf>-countrycode_grpol IS INITIAL.
*              IF lv_question_text IS INITIAL.
*                lv_question_text = 'Код страны грузополучателя'.
*              ELSE.
*                lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*              ENDIF.
*            ENDIF.
*
*            IF <ls_esf>-unn_grpol IS INITIAL.
*              IF lv_question_text IS INITIAL.
*                lv_question_text = 'УНП Грузополучателя'.
*              ELSE.
*                lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*              ENDIF.
*            ENDIF.
*
*            IF <ls_esf>-nm_grpol IS INITIAL.
*              IF lv_question_text IS INITIAL.
*                lv_question_text = 'Наименование'.
*              ELSE.
*                lv_question_text = |{ lv_question_text }, Наименование|.
*              ENDIF.
*            ENDIF.
*
*            IF <ls_esf>-address_grpol  IS INITIAL.
*              IF lv_question_text IS INITIAL.
*                lv_question_text = 'Адрес доставки'.
*              ELSE.
*                lv_question_text = |{ lv_question_text }, Адрес доставки|.
*              ENDIF.
*            ENDIF.
          ENDIF.
        ENDIF.

        " Признак не заполненности полей по созднному ЭСЧФ                     " #29181 G.Domanikova 08/06/2023 Анализ статуса
        IF lv_question_text IS NOT INITIAL.

          lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.{ cl_abap_char_utilities=>cr_lf }| &&
                             |После заполнения, пожалуйста, попробуйте установить статус «Проверено» снова.|.
          SELECT SINGLE mandt FROM ztunn_grpol
            WHERE unn_grpol = @<ls_esf>-unn_grotp
            INTO @lv_mandt.
          IF sy-subrc <> 0.
            CALL FUNCTION 'POPUP_TO_INFORM'
              EXPORTING titel = gc_create_check_titlebar
                        txt1  = lv_question_text(80)
                        txt2  = lv_question_text+80(80)
                        txt3  = lv_question_text+160(80)
                        txt4  = lv_question_text+240(80).

            <ls_esf>-chk_box = abap_false.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.
      " <-- AK_BUTVILOVS #8000000213

      " Все документы должны быть в статусе "В разработке"/"В разработке ошибка"                   " #29181 G.Domanikova 08/06/2023 Анализ статуса
      IF     <ls_esf>-id_stat_esf_v <> lcl_report=>gc_stat_v_inprogress
         AND <ls_esf>-id_stat_esf_v <> lcl_report=>gc_stat_p_in_progress_error.
        MESSAGE TEXT-m75 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      " проверка сумм раздела 6 для 42 типа
      IF <ls_esf>-id_vid_iop = '42'.
        IF <ls_esf>-n_esf = VALUE #( gt_esf_roster_detail[ 1 ]-n_esf DEFAULT '' ).
          LOOP AT gt_esf_roster_detail ASSIGNING FIELD-SYMBOL(<ls_roster>).
            ls_esf-sum_nds   = ls_esf-sum_nds + <ls_roster>-nds.
            ls_esf-sum_snds  = ls_esf-sum_snds + <ls_roster>-snds.
            ls_esf-sum_nonds = ls_esf-sum_nonds + <ls_roster>-nonds.
          ENDLOOP.
        ELSE.
          LOOP AT gt_esf_roster ASSIGNING <ls_roster> USING KEY k1
               WHERE n_esf = <ls_esf>-n_esf.
            ls_esf-sum_nds   = ls_esf-sum_nds + <ls_roster>-nds.
            ls_esf-sum_snds  = ls_esf-sum_snds + <ls_roster>-snds.
            ls_esf-sum_nonds = ls_esf-sum_nonds + <ls_roster>-nonds.
          ENDLOOP.
        ENDIF.

        " 8000000501 для одного ссылочного бух. документа                                          " #29181 G.Domanikova 08/06/2023 Анализ статуса
        IF <ls_esf>-belnr <> '->'.
          ASSIGN lt_bset[ bukrs = <ls_esf>-bukrs
                          belnr = <ls_esf>-belnr
                          gjahr = <ls_esf>-gjahr ] TO <ls_bset>.
          IF sy-subrc <> 0.
            MESSAGE 'Данные Раздела 6 не совпадают с налоговыми данными бух.документа'(m61) TYPE 'I'.
            RETURN.
          ELSE.

            " Проверка сумм Раздела 6 с налоговыми данными бух.документа , должны совпадать!!!     " #29181 G.Domanikova 08/06/2023 Анализ статуса
            IF    abs( ls_esf-sum_nds )  <> abs( <ls_bset>-hwste )
               OR abs( ls_esf-sum_snds ) <> abs( <ls_bset>-hwbas ).                                   " #29181 G.Domanikova 08/06/2023 Изменение корректности сумм для статуса Проверено
*              abs( ls_esf-sum_snds ) <> abs( <ls_bset>-hwste + <ls_bset>-hwbas ).
              MESSAGE TEXT-m61 TYPE 'I'.
              RETURN.
            ENDIF.
          ENDIF.
        ELSE.
          " 8000000501 для нескольких ссылочных бух. документов                                    " #29181 G.Domanikova 08/06/2023 Анализ статуса
          CLEAR: lv_sum_hwste,
                 lv_sum_hwbas.
          LOOP AT lt_bset ASSIGNING <ls_bset>.
            lv_sum_hwste = lv_sum_hwste + <ls_bset>-hwste.
            lv_sum_hwbas = lv_sum_hwbas + <ls_bset>-hwbas.
          ENDLOOP.

          " Проверка сумм Раздела 6 с налоговыми данными бух.документа , должны совпадать!!!       " #29181 G.Domanikova 08/06/2023 Анализ статуса
          IF    abs( ls_esf-sum_nds )  <> lv_sum_hwste
             OR abs( ls_esf-sum_snds ) <> ( lv_sum_hwbas ).                                           " #29181 G.Domanikova 08/06/2023 Изменение корректности сумм для статуса Проверено
*            abs( ls_esf-sum_snds ) <> ( lv_sum_hwste + lv_sum_hwbas ).
            MESSAGE TEXT-m61 TYPE 'I'.
            RETURN.
          ENDIF.
        ENDIF.
        CLEAR ls_esf. " Очищаем чтобы суммы по докам не суммировались                              " #29181 G.Domanikova 12/06/2023 Изменение корректности сумм для для нескольких доков статуса Проверено
      ENDIF.

      " 8000000248 проверка на заполненность поля 31. "Доп.сведения" в Исправленном ЭСЧФ
      IF <ls_esf>-id_type_esf = 'FIXED' AND <ls_esf>-dop_sved IS INITIAL.
        MESSAGE TEXT-s01 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

      " V.Matsygud 2020 10 08   По 43 типу проверка заполнения поля 31. "Доп.сведения" в дополнительном ЭСЧФ
      IF <ls_esf>-id_vid_iop = '43' AND <ls_esf>-id_type_esf = 'ADDITIONAL' AND <ls_esf>-dop_sved IS INITIAL.
        MESSAGE TEXT-s01 TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ENDIF.

    ENDLOOP.

    LOOP AT gt_esf_data ASSIGNING <ls_esf> WHERE chk_box = abap_true.
      <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_checked.
      <ls_esf>-last_user     = sy-uname.
      <ls_esf>-aedat         = sy-datum.
      GET TIME STAMP FIELD <ls_esf>-tstampl.
    ENDLOOP.

    IF sy-subrc = 0.
      gv_save = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_checked_status_del.
    DATA lv_text TYPE char100.

    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_text_question = 'Отменить статус "Проверено" для выбранных ЭСЧФ?'(m41) ) <> '1'.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE     chk_box       = abap_true
                                                                    AND id_stat_esf_v = lcl_report=>gc_stat_v_checked.

      DATA(lv_len) = strlen( <ls_esf_data>-n_esf ) - 8.
      AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
                      ID 'ACTVT' FIELD '74'
                      ID 'BUKRS' FIELD <ls_esf_data>-n_esf+lv_len(2).

      IF sy-subrc <> 0 AND <ls_esf_data>-last_user <> sy-uname.
        lv_text = |ЭСЧФ { <ls_esf_data>-n_esf }:|.
        CONCATENATE lv_text 'Данная функция недоступна Вашему пользователю'(m33) INTO lv_text SEPARATED BY space.

        CONTINUE.
      ENDIF.

      <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
      <ls_esf_data>-last_user     = sy-uname.
      <ls_esf_data>-aedat         = sy-datum.
      GET TIME STAMP FIELD <ls_esf_data>-tstampl.
    ENDLOOP.
    IF sy-subrc = 0.
      gv_save = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_signature.
    DATA lv_cnt_proc TYPE i.                                      " количество записей к обработке
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA ls_info     TYPE zif_einvoice_service=>ty_s_status_info.
    DATA lt_roster   TYPE zfi_t_esf_roster.
    DATA lv_cnt_pack TYPE i.                                      " текущее количество в пакете
    DATA lt_pack     TYPE STANDARD TABLE OF REF TO zcl_fi_esf_amdp=>gty_s_esf_data.

    IF lcl_report=>check_oper( ) = abap_false.
      RETURN.
    ENDIF.

    IF check_marked_lines_esf( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_sel>) WHERE chk_box = abap_true.
      IF <ls_sel>-id_stat_esf_v <> lcl_report=>gc_stat_v_checked.
        MESSAGE 'Все документы должны быть в статусе "Проверено"'(m28) TYPE 'S' DISPLAY LIKE 'E'.
        RETURN.
      ELSE.                                                                                                 "{ins DHVK930347
        lv_cnt_proc = lv_cnt_proc + 1.                                                                               "}ins DHVK930347
      ENDIF.
      DATA(lv_len) = strlen( <ls_sel>-n_esf ) - 8.
      AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
                      ID 'ACTVT' FIELD '73'
                      ID 'BUKRS' FIELD <ls_sel>-n_esf+lv_len(2).
      IF sy-subrc <> 0.
        MESSAGE 'Данная функция недоступна Вашему пользователю'(m33) TYPE 'I'.
        RETURN.
      ENDIF.
    ENDLOOP.
    CLEAR gt_bapiret.

    " Установка отправки на  портал                                              "{ins DHVK931456
    CALL FUNCTION 'ENQUEUE_EZFI_ESF_PORTAL'
      EXPORTING  mode           = lcl_report=>gc_lock_send_o
      EXCEPTIONS foreign_lock   = 1
                 system_failure = 2
                 OTHERS         = 3.
    IF sy-subrc <> 0.
      DATA(lv_uname) = sy-msgv1.
      MESSAGE i021(zfi_esf) WITH lv_uname TEXT-x96.
      RETURN.
    ENDIF.                                                                      "}ins DHVK931456
    TRY.
        gr_einv_service->login( ).

      CATCH zcx_einvoice_service INTO DATA(lr_err).
        APPEND lr_err->to_bapiret2( ) TO gt_bapiret.
    ENDTRY.
    IF gt_bapiret IS INITIAL.
      MESSAGE i999(fg) WITH TEXT-m88 lv_cnt_proc.
      LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE     chk_box       = abap_true
                                                                      AND id_stat_esf_v = lcl_report=>gc_stat_v_checked.
        CLEAR ls_info.
        lt_roster = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( n_esf = <ls_esf_data>-n_esf )
                             ( CORRESPONDING  zfi_esf_roster( ls_esf_roster ) ) ).
        TRY.
            CLEAR <ls_esf_data>-err.
            <ls_esf_data>-dt_podpis = sy-datum.
            <ls_esf_data>-dt_vs_esf = sy-datum.
            " TODO: variable is assigned but never used (ABAP cleaner)
            DATA(lv_message) = gr_einv_service->create_outbound_doc( is_header = CORRESPONDING #( <ls_esf_data> )
                                                                     it_roster = lt_roster ).
            <ls_esf_data>-pr_tek_mec    = abap_true.
            <ls_esf_data>-id_stat_esf_v = lcl_report=>gc_stat_v_sended.
            <ls_esf_data>-last_user     = sy-uname.
            <ls_esf_data>-aedat         = sy-datum.
            GET TIME STAMP FIELD <ls_esf_data>-tstampl.

          CATCH zcx_einvoice_service INTO lr_err.
            CLEAR:
              <ls_esf_data>-dt_podpis,
              <ls_esf_data>-dt_vs_esf.
            <ls_esf_data>-err = lr_err->get_text( ).
            IF <ls_esf_data>-err IS INITIAL.
              <ls_esf_data>-err = 'Неизвестная ошибка при подписании'(x95).
            ENDIF.
            <ls_esf_data>-color = 'C600'.
            APPEND lr_err->to_bapiret2( ) TO gt_bapiret.
            MODIFY gt_bapiret FROM VALUE #( message_v1 = <ls_esf_data>-n_esf ) TRANSPORTING message_v1 WHERE message_v1 = abap_false.
        ENDTRY.
        CLEAR lt_roster.
        lv_cnt_pack = lv_cnt_pack + 1.
        APPEND REF #( <ls_esf_data> ) TO lt_pack.
        "{DHVK933945 обработка и сохранение пакета документов
        IF lv_cnt_pack = lcl_report=>gc_packsize.
          CLEAR lv_cnt_pack.
          mode2_pack_sign( CHANGING ct_pack = lt_pack ).
        ENDIF.
        "}DHVK933945
      ENDLOOP.
      mode2_pack_sign( CHANGING ct_pack = lt_pack ).
    ENDIF.

    CALL FUNCTION 'DEQUEUE_EZFI_ESF_PORTAL'
      EXPORTING  mode           = lcl_report=>gc_lock_send_o
      EXCEPTIONS foreign_lock   = 1
                 system_failure = 2
                 OTHERS         = 3.
    IF gt_bapiret IS NOT INITIAL.
      MESSAGE 'Возникли сообщения при выполнении операции, смотрите Протокол'(m72) TYPE 'I'.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_pack_sign.
    DATA ls_info         TYPE zif_einvoice_service=>ty_s_status_info.
    DATA lv_message_char TYPE char1024.
    DATA ls_esf          TYPE zfi_esf.

    " ожидание обновления статуса
    CHECK ct_pack IS NOT INITIAL.
    WAIT UP TO lcl_report=>gc_delay SECONDS.
    LOOP AT ct_pack ASSIGNING FIELD-SYMBOL(<ls_pack>).
      IF <ls_pack>->err IS INITIAL.
        TRY.
            CLEAR ls_info.
            ls_info = gr_einv_service->get_status( iv_inv_number = <ls_pack>->n_esf ).
            <ls_pack>->id_stat_esf_p = ls_info-status.
            IF ls_info-status = lcl_report=>gc_stat_p_error AND ls_info-message <> ''.
              CLEAR: <ls_pack>->pr_tek_mec,
                     <ls_pack>->dt_podpis.
              <ls_pack>->id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
              IF ls_info-message IS NOT INITIAL.
                CLEAR <ls_pack>->dt_vs_esf.
                <ls_pack>->err = ls_info-message.
                IF <ls_pack>->err IS INITIAL.
                  <ls_pack>->err = 'Неизвестная ошибка при получении статуса после подписания'(x94).
                ENDIF.
                <ls_pack>->color = 'C600'.
                lv_message_char = ls_info-message.
                APPEND VALUE #( type       = 'W'
                                id         = 'ZFI_EI'
                                number     = 000
                                message_v1 = |{ <ls_pack>->n_esf }: |
                                message_v2 = | { lv_message_char(49) }|
                                message_v3 = lv_message_char+49(50)
                                message_v4 = lv_message_char+99(50) )
                       TO gt_bapiret.
              ENDIF.
            ENDIF.
          CATCH zcx_einvoice_service INTO DATA(lr_err).
            CLEAR <ls_pack>->dt_vs_esf.
            <ls_pack>->err = lr_err->get_text( ).
            IF <ls_pack>->err IS INITIAL.
              <ls_pack>->err = 'Неизвестная ошибка при получении статуса после подписания'(x94).
            ENDIF.
            <ls_pack>->color = 'C600'.
            APPEND lr_err->to_bapiret2( ) TO gt_bapiret.
            MODIFY gt_bapiret FROM VALUE #( message_v1 = <ls_pack>->n_esf ) TRANSPORTING message_v1 WHERE message_v1 = abap_false.
        ENDTRY.
      ENDIF.
      " сохранение нового статуса
      GET TIME STAMP FIELD <ls_pack>->tstampl.
      ls_esf = CORRESPONDING #( <ls_pack>->* ).
      MODIFY zfi_esf FROM ls_esf.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING mode_zfi_esf = 'E'
                  mandt        = sy-mandt
                  pr_esf       = <ls_pack>->pr_esf
                  n_esf        = <ls_pack>->n_esf.

      " обновление экрана подробно после подписания
      IF <ls_pack>->pr_esf = lcl_report=>gv_pr_esf AND <ls_pack>->n_esf = lcl_report=>gv_n_esf.
        " записываем изменения в таблицу
        MOVE-CORRESPONDING <ls_pack>->* TO gs_part1.
        MOVE-CORRESPONDING <ls_pack>->* TO gs_part2.
        MOVE-CORRESPONDING <ls_pack>->* TO gs_part3.
        MOVE-CORRESPONDING <ls_pack>->* TO gs_part4.
        MOVE-CORRESPONDING <ls_pack>->* TO gs_part5.
      ENDIF.
    ENDLOOP.
    COMMIT WORK.
    CLEAR ct_pack[].
  ENDMETHOD.

  METHOD mode2_get_detail.
    DATA lv_cnt    TYPE i.
    DATA lt_roster TYPE zcl_fi_esf_amdp=>gty_t_roster.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      lv_cnt = lv_cnt + 1.
      IF lv_cnt > 1.
        MESSAGE 'Выберите только одну запись'(m06) TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    " вывод в Excel
    SELECT dop_dan, nm_dop_dan FROM zfi_dop_dan
      INTO TABLE @DATA(lt_dop_dan)
      ORDER BY dop_dan.

    LOOP AT gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_roster>) WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                    AND n_esf  = <ls_esf_data>-n_esf.
      APPEND <ls_roster> TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_roster_new>).
      READ TABLE lt_dop_dan ASSIGNING FIELD-SYMBOL(<ls_dop_dan>)
           WITH KEY dop_dan = <ls_roster>-dop_dan
           BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_roster_new>-dop_dan = <ls_dop_dan>-nm_dop_dan.
      ENDIF.
    ENDLOOP.

    lcl_excel=>out_to_excel( is_data   = <ls_esf_data>
                             it_roster = lt_roster ).
  ENDMETHOD.

  METHOD mode2_show_log.
    CHECK gt_bapiret IS NOT INITIAL.

    CALL FUNCTION 'MESSAGES_INITIALIZE'.

    LOOP AT gt_bapiret ASSIGNING FIELD-SYMBOL(<ls_return>).
      CALL FUNCTION 'MESSAGE_STORE'
        EXPORTING  arbgb  = <ls_return>-id
                   msgty  = <ls_return>-type
                   msgv1  = <ls_return>-message_v1
                   msgv2  = <ls_return>-message_v2
                   msgv3  = <ls_return>-message_v3
                   msgv4  = <ls_return>-message_v4
                   txtnr  = <ls_return>-number
        EXCEPTIONS OTHERS = 0.
    ENDLOOP.

    CALL FUNCTION 'MESSAGES_SHOW'
      EXCEPTIONS OTHERS = 0.
  ENDMETHOD.

  METHOD check_marked_lines_fi.
    IF NOT line_exists( gt_fi_data_filtered[ chk_box = abap_true ]  ).
      rv_error = abap_true.
      MESSAGE 'Выберите запись'(m29) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD check_marked_lines_esf.
    IF NOT line_exists( gt_esf_data[ chk_box = abap_true ]  ).
      rv_error = abap_true.
      MESSAGE 'Выберите ЭСЧФ'(m09) TYPE 'S' DISPLAY LIKE 'E'.
      RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD on_user_command_1.
    CLEAR gv_change_mode.     " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ

    " обработка кнопок 1007 экрана
    IF sender = gr_grid_1007.
      IF e_ucomm = 'CALCULATE'.
        LOOP AT gt_esf_roster_detail ASSIGNING FIELD-SYMBOL(<ls_roster>).
          IF <ls_roster>-cena_tov <> 0 AND <ls_roster>-kol_tov <> 0.
            <ls_roster>-nonds = <ls_roster>-kol_tov * <ls_roster>-cena_tov.
          ENDIF.

          "  принудителььно ставим текущий ЭСЧФ
          IF <ls_roster>-n_esf IS INITIAL.
            <ls_roster>-n_esf = lcl_report_out=>gs_esf_hotspot-n_esf.
          ENDIF.

          <ls_roster>-nds  = <ls_roster>-nonds * <ls_roster>-st_nds / 100.
          <ls_roster>-snds = <ls_roster>-nonds + <ls_roster>-nds.

          " start Tararenko #31229 - ЭСЧФ для 46 вида операции
          ASSIGN gt_esf_data[ n_esf = <ls_roster>-n_esf ] TO FIELD-SYMBOL(<ls_es>).
          IF sy-subrc = 0.
            IF <ls_es>-id_vid_iop = '46'.
              <ls_roster>-nds  = <ls_es>-sum_snds * <ls_roster>-st_nds / 120.
              <ls_roster>-snds = <ls_roster>-nonds + <ls_roster>-nds.

            ELSEIF <ls_es>-id_vid_iop = '40' OR <ls_es>-id_vid_iop = '42'.       " 11.09.2023 Domanikova #29181 - ЭСЧФ для 40-42 вида операции
              <ls_roster>-snds = <ls_roster>-nonds.
            ENDIF.
          ENDIF.
          " end Tararenko #31229 - ЭСЧФ для 46 вида операции

        ENDLOOP.
        gr_grid_1007->refresh_table_display( is_stable = VALUE #( row = 'X'
                                                                  col = 'X' ) ).
      ENDIF.
      RETURN.
    ENDIF.

    lcl_report=>gv_ucomm = e_ucomm.

    IF check_roster_nnp( ) = abap_true.
      RETURN.
    ENDIF.

    IF strlen( gv_mode ) = strlen( e_ucomm ) AND gv_mode+4(1) <> e_ucomm+4(1).   " смена режима
      IF gv_mode = gc_mode1 AND e_ucomm = gc_mode2. " 1 -> 2   "снять блокировки
        dequeue_all_fi( ).
      ELSEIF gv_mode = gc_mode2 AND e_ucomm = gc_mode1. " 2 -> 1   "снять блокировки
        save_hotspot_data( ).
        dequeue_all_esf( ).
        unlock_esf_on_hotspot( ).
        clear_detail( ).
      ELSEIF gv_mode = gc_mode4.      " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        " скрытие подэкрана "Список бух доков, непривязанных к ЭСЧФ"
        mode4_free_container( ).
      ENDIF.
      gv_change_mode = abap_true.     " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
    ENDIF.

    IF e_ucomm IN lcl_report=>gr_save.   " режимы, для которых надо проверять не изменились ли данные
      IF check_changed_esf_data( iv_mode  = 'S'
                                 iv_alert = abap_true ) = abap_true OR check_changed_fi_data( ) = abap_true.
        dequeue_all_esf( ).
        dequeue_all_fi( ).
        refresh_alv( ).
        RETURN.
      ENDIF.
    ENDIF.

    CASE e_ucomm.
      WHEN 'PROC_TYPE'.
        RETURN.
      WHEN 'MODE1'.
        IF gv_mode = gc_mode1.
          RETURN.
        ENDIF.
        mode1_constructor( ).
      WHEN 'MODE2'.
        IF gv_mode = gc_mode2.
          RETURN.
        ENDIF.
        mode2_constructor( ).
      WHEN 'MODE4'.                         " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        IF gv_mode = gc_mode4.
          RETURN.
        ENDIF.
        mode4_constructor( ).
      WHEN 'SEL_ALL'.
        select_all( sender ).
      WHEN 'DESEL_ALL'.
        deselect_all( ).
      WHEN 'MODE1_CREATE'.
        mode1_create( ).
      WHEN 'MODE1_CANCEL'.
        mode1_cancel( ).
      WHEN 'MODE1_MASS_CREATE'.             " #25733 Массовое создание исходящих ЭСЧФ
        mode1_mass_create( ).
      WHEN 'MODE1_REFRESH'.
        mode1_refresh( ).
      WHEN 'MODE2_GET_STATUS'.
        mode2_get_status( ).
      WHEN 'MODE2_APPROVE_NULL'.
        mode2_approve_null( ).
      WHEN 'MODE2_DEL_RELATION'.
        mode2_del_relation( ).
      WHEN 'MODE2_CHECKED_STATUS_ADD'.
        mode2_checked_status_add( ).
      WHEN 'MODE2_CHECKED_STATUS_DEL'.
        mode2_checked_status_del( ).
      WHEN 'MODE2_SIGNATURE'.
        mode2_signature( ).
      WHEN 'MODE2_COPY_33'.
        mode2_copy_33( ).
      WHEN 'MODE2_GET_DETAIL'.
        mode2_get_detail( ).
      WHEN 'MODE2_SHOW_LOG'.
        mode2_show_log( ).
      WHEN 'MODE2_REFRESH'.
        mode2_refresh( ).
      WHEN 'MODE2_XML'.
        mode2_xml( ).
      WHEN 'LIST_UNBIND'.                   " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        mode4_show_unbind_fi( ).
      WHEN 'UNBIND'.                        " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        mode4_unbind( ).
      WHEN 'BIND'.                          " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        mode4_bind( ).
      WHEN 'LOG_UNBIND'.                    " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        mode4_show_log_unbind( ).
      WHEN 'MODE4_REFRESH'.                 " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        mode4_refresh( ).
    ENDCASE.

    IF e_ucomm IN lcl_report=>gr_save AND gv_save = abap_true.   " режимы, для которых надо сохранять данные
      save_data( 'S' ).
    ENDIF.
    CLEAR gv_save.

    IF e_ucomm NS 'SEL_ALL'.
      dequeue_all_esf( ).
      dequeue_all_fi( ).
    ENDIF.

    refresh_alv( ).
    IF e_ucomm IN lcl_report=>gr_leave.
      LEAVE SCREEN.
    ENDIF.
  ENDMETHOD.

  METHOD on_hotspot_1.
    ASSIGN gt_fi_data_filtered[ e_row_id ] TO FIELD-SYMBOL(<ls_fi_data>).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    SET PARAMETER ID 'BLN' FIELD <ls_fi_data>-belnr.
    SET PARAMETER ID 'BUK' FIELD <ls_fi_data>-bukrs.
    SET PARAMETER ID 'GJR' FIELD <ls_fi_data>-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDMETHOD.

  METHOD on_double_click_1.
    DATA lv_bukrs TYPE bseg-bukrs.

    ASSIGN gt_fi_data_filtered[ e_row-index ] TO FIELD-SYMBOL(<ls_fi_data>).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CASE e_column.
      WHEN 'N_ESF'.
        IF <ls_fi_data>-n_esf = lcl_report=>gc_1_n.
          lcl_report_in=>gt_esf_list = VALUE #( FOR ls_match IN gt_esf_match WHERE (     bukrs = <ls_fi_data>-bukrs
                                                                                     AND belnr = <ls_fi_data>-belnr
                                                                                     AND gjahr = <ls_fi_data>-gjahr )
                                                ( n_esf = ls_match-n_esf ) ).
          IF lines( lcl_report_in=>gt_esf_list ) > 1.
            DATA(lv_lines) = lines( lcl_report_in=>gt_esf_list ).
            IF lv_lines < 21.
              lv_lines = lv_lines + 8.
            ELSE.
              lv_lines = 25.
            ENDIF.
          ENDIF.

          lcl_report_in=>gv_detail_sign = 'ESF'.
          CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
        ENDIF.
      WHEN 'VBELN'.
        IF <ls_fi_data>-vbeln IS INITIAL.
          RETURN.
        ENDIF.

        SET PARAMETER ID 'VF' FIELD <ls_fi_data>-vbeln.
        CALL TRANSACTION 'VF03' AND SKIP FIRST SCREEN.
      WHEN 'LIFNR'.
        IF <ls_fi_data>-lifnr IS INITIAL.
          RETURN.
        ENDIF.

        DATA(lr_navigation_request) = NEW cl_bupa_navigation_request( ).
        lr_navigation_request->set_maintenance_id( iv_value = cl_bupa_navigation_request=>gc_maintenance_id_partner ).
        lr_navigation_request->set_partner_number( CONV #( <ls_fi_data>-lifnr ) ).
        lr_navigation_request->set_bupa_activity( iv_value = cl_bupa_navigation_request=>gc_activity_display ).
        " Скрыть левую панель
        DATA(lr_dialog_joel_options) = NEW cl_bupa_dialog_joel_options( ).
        lr_dialog_joel_options->set_locator_visible( '' ).
        lr_dialog_joel_options->set_bupr_maintenance( VALUE #( change_allowed = '' ) ).
        cl_bupa_dialog_joel=>start_with_navigation( iv_request = lr_navigation_request
                                                    iv_options = lr_dialog_joel_options ).
      WHEN 'NMTXT'.
        IF <ls_fi_data>-nmtxt IS INITIAL.
          RETURN.
        ENDIF.
        lv_bukrs = SWITCH #( <ls_fi_data>-rbukrs WHEN '' THEN <ls_fi_data>-bukrs ELSE <ls_fi_data>-rbukrs ).
        SELECT SINGLE bukrs FROM bkpf
          INTO @lv_bukrs
          WHERE bukrs = @lv_bukrs
            AND belnr = @<ls_fi_data>-nmtxt
            AND gjahr = @<ls_fi_data>-gjtxt.
        IF sy-subrc = 0.
          SET PARAMETER ID 'BLN' FIELD <ls_fi_data>-nmtxt.
          SET PARAMETER ID 'BUK' FIELD lv_bukrs.
          SET PARAMETER ID 'GJR' FIELD <ls_fi_data>-gjtxt.
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSE.
          SELECT SINGLE ebeln FROM ekko
            " TODO: variable is assigned but never used (ABAP cleaner)
            INTO @DATA(lv_ebeln)
            WHERE ebeln = @<ls_fi_data>-nmtxt.

          SET PARAMETER ID 'BES' FIELD <ls_fi_data>-nmtxt.
          CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
        ENDIF.
      WHEN 'MBLNR'.
        SET PARAMETER ID 'RBN' FIELD <ls_fi_data>-mblnr.
        SET PARAMETER ID 'GJR' FIELD <ls_fi_data>-mjahr.
        CALL TRANSACTION 'MIR4' AND SKIP FIRST SCREEN.
    ENDCASE.
  ENDMETHOD.

  METHOD on_double_click_2.
    CASE e_column.
      WHEN 'BELNR'.
        CLEAR lcl_report_in=>gt_fi_list.
        ASSIGN gt_esf_data[ e_row-index ] TO FIELD-SYMBOL(<ls_est_data>).
        IF sy-subrc = 0.
          lcl_report_in=>gt_fi_list = VALUE #( FOR ls_data IN gt_esf_match WHERE (     n_esf     = <ls_est_data>-n_esf
                                                                                   AND pr_unbind = ' ' )
                                               ( bukrs = ls_data-bukrs
                                                 belnr = ls_data-belnr
                                                 gjahr = ls_data-gjahr ) ).

          SORT lcl_report_in=>gt_fi_list. DELETE ADJACENT DUPLICATES FROM lcl_report_in=>gt_fi_list COMPARING ALL FIELDS.

          IF lines( lcl_report_in=>gt_fi_list ) > 1.
            DATA(lv_lines) = lines( lcl_report_in=>gt_fi_list ).
            IF lv_lines < 21.
              lv_lines = lv_lines + 8.
            ELSE.
              lv_lines = 25.
            ENDIF.

            lcl_report_in=>gv_detail_sign = 'FI'.
            CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
          ELSEIF lines( lcl_report_in=>gt_fi_list ) = 1.
            SET PARAMETER ID 'BLN' FIELD <ls_est_data>-belnr.
            SET PARAMETER ID 'BUK' FIELD <ls_est_data>-bukrs.
            SET PARAMETER ID 'GJR' FIELD <ls_est_data>-gjahr.
            CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
          ENDIF.
        ENDIF.
      WHEN 'BELNR_R'.
        ASSIGN gt_esf_data[ e_row-index ] TO <ls_est_data>.
        IF sy-subrc = 0.
          DATA(lv_rbukrs) = SWITCH bukrs( <ls_est_data>-bukrs_r
                                          WHEN ''
                                          THEN <ls_est_data>-bukrs
                                          ELSE <ls_est_data>-bukrs_r ).
          SELECT SINGLE bukrs FROM bkpf
            INTO @lv_rbukrs
            WHERE bukrs = @lv_rbukrs
              AND belnr = @<ls_est_data>-belnr_r
              AND gjahr = @<ls_est_data>-gjahr_r.
          IF sy-subrc = 0.
            SET PARAMETER ID 'BLN' FIELD <ls_est_data>-belnr_r.
            SET PARAMETER ID 'BUK' FIELD lv_rbukrs.
            SET PARAMETER ID 'GJR' FIELD <ls_est_data>-gjahr_r.
            CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
          ELSE.
            SELECT SINGLE ebeln FROM ekko
              " TODO: variable is assigned but never used (ABAP cleaner)
              INTO @DATA(lv_ebeln)
              WHERE ebeln = @<ls_est_data>-belnr_r.
            IF sy-subrc = 0.
              SET PARAMETER ID 'BES' FIELD <ls_est_data>-belnr_r.
              CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN OTHERS.
        process_hotspot_2( e_row ).
    ENDCASE.
  ENDMETHOD.

  METHOD on_data_changed_3.
    FIELD-SYMBOLS <lt_mod>  TYPE zcl_fi_esf_amdp=>gty_t_roster.
    FIELD-SYMBOLS <ls_1007> TYPE LINE OF zcl_fi_esf_amdp=>gty_t_roster.

    ASSIGN er_data_changed->mp_mod_rows->* TO <lt_mod>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    er_data_changed->refresh_protocol( ).

    IF sender = lcl_report_out=>gr_grid_1007.
      LOOP AT <lt_mod> ASSIGNING <ls_1007>.
        IF <ls_1007> IS INITIAL.
          CONTINUE.
        ENDIF.

        IF lcl_report_out=>gs_esf_hotspot-id_vid_iop BETWEEN '32' AND '33' AND <ls_1007>-code_tov_ved IN lcl_report=>gr_strat_code.
          gs_part2-pr_sdper_post = abap_true.
        ENDIF.

        IF <ls_1007>-id_tp_nds IS INITIAL.
          er_data_changed->add_protocol_entry( i_msgid     = 'ZFI_ESF'
                                               i_msgty     = 'E'
                                               i_msgno     = '018'
                                               i_fieldname = 'ID_TP_NDS'
                                               i_row_id    = sy-tabix     ).
          DATA(lv_err) = abap_true.
        ENDIF.
      ENDLOOP.
    ENDIF.

    IF lv_err = abap_true.
      er_data_changed->display_protocol( ).
    ENDIF.
  ENDMETHOD.

  METHOD data_changed_finished_2.
    IF e_modified = 'X'.
      IF sender = gr_grid_1007.
        gr_grid_1007->refresh_table_display( is_stable = VALUE #( row = 'X'
                                                                  col = 'X' ) ).
      ENDIF.
      enqueue_data_2( it_good_cells = et_good_cells ).
    ENDIF.
  ENDMETHOD.

  METHOD on_f4_3.
    DATA lt_ret TYPE STANDARD TABLE OF ddshretval.

    IF e_fieldname <> 'MEINS'.
      RETURN.
    ENDIF.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING  retfield        = 'OKEI'
                 dynpprog        = sy-repid
                 dynpnr          = sy-dynnr
                 window_title    = 'Единица измерения'
                 value_org       = 'S'
      TABLES     value_tab       = gt_okei_tab
                 return_tab      = lt_ret
      EXCEPTIONS parameter_error = 1
                 no_values_found = 2
                 OTHERS          = 3.
    IF sy-subrc = 0.
      TRY.
          gt_esf_roster_detail[ es_row_no-row_id ]-ed_izm = lt_ret[ 1 ]-fieldval.
          gt_esf_roster_detail[ es_row_no-row_id ]-meins = gt_okei_tab[ okei = lt_ret[ 1 ]-fieldval ]-msehi.

          lcl_report_in=>refresh_alv( gr_grid_1007 ).
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.
    ENDIF.
  ENDMETHOD.

  METHOD toolbar_buttons_1007.
    APPEND VALUE #( function  = 'CALCULATE'
                    quickinfo = 'Рассчитать значения'(b36)
                    text      = TEXT-b36
                    icon      = icon_calculation )
           TO e_object->mt_toolbar.
  ENDMETHOD.

  METHOD toolbar_buttons_1.
    DATA lt_buttons          TYPE TABLE OF stb_button.
    " --> #8000000273 AK_BUTVILOVS Разработка роли для просмотра z-транзакций по БНУ
    DATA lv_no_authorization TYPE abap_bool.

    DELETE e_object->mt_toolbar WHERE    function = '&DETAIL'
                                      OR function = '&&SEP00'
                                      OR function = '&CHECK'
                                      OR function = '&REFRESH'
                                      OR function = '&&SEP01'
                                      OR function = '&LOCAL&CUT'
                                      OR function = '&LOCAL&COPY'
                                      OR function = '&LOCAL&PASTE'
                                      OR function = '&LOCAL&UNDO'
                                      OR function = '&&SEP02'
                                      OR function = '&LOCAL&APPEND'
                                      OR function = '&LOCAL&INSERT_ROW'
                                      OR function = '&LOCAL&DELETE_ROW'
                                      OR function = '&LOCAL&COPY_ROW'
                                      OR function = '&&SEP03'
                                      OR function = '&&SEP06'
                                      OR function = '&&SEP07'
                                      OR function = '&INFO'.

    IF gv_mode <> gc_mode4. " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      lt_buttons = VALUE #( ( function = 'SEL_ALL' quickinfo = 'Выбрать всё'(b30) icon = icon_select_all )
                            ( function = 'DESEL_ALL' quickinfo = 'Отменить выделение'(b31) icon = icon_deselect_all )
                            ( butn_type = 3 ) ).
      INSERT LINES OF lt_buttons INTO e_object->mt_toolbar INDEX 1.
    ENDIF.

    CLEAR lt_buttons.

    APPEND VALUE #( butn_type = 3 ) TO e_object->mt_toolbar.

    AUTHORITY-CHECK OBJECT 'ZBN_DISPLA'
                    ID 'ACTVT' FIELD '02'.
    IF sy-subrc <> 0.
      lv_no_authorization = abap_true.
    ENDIF.

    CASE lcl_report_out=>gv_mode.
      WHEN lcl_report_out=>gc_mode1.
        lt_buttons = VALUE #(
            ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b27 quickinfo = TEXT-b27 )
            ( butn_type = 3 )
            ( function = 'MODE1_CREATE' quickinfo = 'Создать'(b23) icon = icon_create disabled = lv_no_authorization )
            ( function = 'MODE1_MASS_CREATE' quickinfo = 'Создать массово'(b25) icon = icon_create_copy disabled = lv_no_authorization )  " #25733 Массовое создание исходящих ЭСЧФ
            ( function = 'MODE1_CANCEL' quickinfo = 'Отменить'(b24) icon = icon_system_undo disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE1_REFRESH' quickinfo = 'Обновить'(b26) icon = icon_refresh disabled = lv_no_authorization ) ).
      WHEN lcl_report_out=>gc_mode2.
        lt_buttons = VALUE #(
            ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b28 quickinfo = TEXT-b28 )
            ( butn_type = 3 )
            ( function = 'MODE2_GET_STATUS' quickinfo = 'Получить Статус'(b07) icon = icon_status_overview disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_APPROVE_NULL' quickinfo = 'Подтвердить Аннулирование'(b35) icon = icon_reject disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_DEL_RELATION' quickinfo = 'Отменить Сопоставление'(b21) icon = icon_system_undo disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_CHECKED_STATUS_ADD' quickinfo = 'Проверить'(b29) icon = icon_booking_ok disabled = lv_no_authorization )
            ( function = 'MODE2_CHECKED_STATUS_DEL' quickinfo = 'Отменить Проверено'(b12) icon = icon_booking_stop disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_SIGNATURE' quickinfo = 'Подписать'(b13) icon = icon_set_state disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_COPY_33' quickinfo = 'Скопировать ЭСЧФ'(b34) icon = icon_copy_object )
            ( butn_type = 3 )
            ( function = 'MODE2_GET_DETAIL' quickinfo = 'Просмотреть ЭСЧФ'(b14) icon = icon_display_text )
*                              ( butn_type = 3 )
            ( function = 'MODE2_SHOW_LOG' quickinfo = 'Протокол'(b15) icon = icon_history )
*                              ( butn_type = 3 )
            ( function = 'MODE2_REFRESH' quickinfo = 'Обновить'(b26) icon = icon_refresh disabled = lv_no_authorization )
            ( butn_type = 3 )
            ( function = 'MODE2_XML' quickinfo = 'Выгрузка XML'(b39) icon = icon_xml_doc )
            ( butn_type = 3 ) ).
      WHEN lcl_report_out=>gc_mode4.                  " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        lt_buttons = VALUE #(
            ( butn_type = 1 function = 'PROC_TYPE' text = TEXT-b41 quickinfo = TEXT-b41 )
            ( butn_type = 3 )
            ( function = 'MODE2_REFRESH' quickinfo = 'Обновить'(b26) icon = icon_refresh )
            ( butn_type = 3 )
            ( function = 'UNBIND' quickinfo = 'Отвязать бух док'(b42) icon = icon_hierarchy_var_red )
            ( function = 'BIND' quickinfo = 'Привязать бух док'(b43) icon = icon_hierarchy_var_green )
            ( butn_type = 3 )
            ( function = 'LIST_UNBIND' quickinfo = 'Вывести список бух доков, непривязанных к ЭСЧФ'(b44) icon = icon_display_tree )
            ( butn_type = 3 )
            ( function = 'LOG_UNBIND' quickinfo = 'Вывести лог по статусу привязки бух. дока к ЭСЧФ'(b45) icon = icon_display_note )
            ( butn_type = 3 ) ).
    ENDCASE.
    " <-- #8000000273 AK_BUTVILOVS
    APPEND LINES OF lt_buttons TO e_object->mt_toolbar.
  ENDMETHOD.

  METHOD menu_bt_handle_1.
    IF e_ucomm <> 'PROC_TYPE'.
      RETURN.
    ENDIF.

    e_object->add_function( fcode = 'MODE2'
                            text  = 'Управление ЭСЧФ'(b28) ).
    e_object->add_function( fcode = 'MODE1'
                            text  = 'Создание ЭСЧФ'(b27) ).
    AUTHORITY-CHECK OBJECT 'ZFI_REGINV'
                    ID 'ACTVT' FIELD '94'.
    IF sy-subrc = 0.
      e_object->add_function( fcode = 'MODE4'
                              text  = 'Перепривязка ЭСЧФ'(b41) ).
    ENDIF.
  ENDMETHOD.

  METHOD data_changed_finished_1.
    IF e_modified = 'X'.
      enqueue_data_1( it_good_cells = et_good_cells ).
    ENDIF.
  ENDMETHOD.

  METHOD on_hotspot_2.
    IF e_column_id-fieldname = 'DEDUCT'.
      ASSIGN gt_esf_data[ e_row_id-index ] TO FIELD-SYMBOL(<ls_esf_data>).
      IF sy-subrc = 0.
*        IF <ls_esf_data>-belnr CO '0987654321'.
        lcl_defer_deduct=>edit( is_doc = CORRESPONDING #( <ls_esf_data> ) ).
*          RETURN.
*        ENDIF.
      ENDIF.
    ENDIF.

    process_hotspot_2( e_row_id ).
  ENDMETHOD.

  "--> 30.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV. Доработка 31 типа ЭСЧФ
  METHOD get_dop_data.
    SELECT dop_dan
           nm_dop_dan
      FROM zfi_dop_dan
      INTO CORRESPONDING FIELDS OF TABLE gt_dop_dan.
  ENDMETHOD.

  METHOD update_dop_data.
    LOOP AT gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>) WHERE n_esf = is_esf-n_esf.
      IF <ls_esf_roster>-code_tov_ved IS INITIAL.
        CONTINUE.
      ENDIF.

      SELECT dop_dan FROM zfi_sign_goods
        WHERE low  <= @<ls_esf_roster>-code_tov_ved
          AND high >= @<ls_esf_roster>-code_tov_ved
        INTO TABLE @DATA(lt_dop_dan).

      IF lt_dop_dan IS NOT INITIAL.
        <ls_esf_roster>-dop_dan = REDUCE #( INIT lv_text = <ls_esf_roster>-dop_dan
                                            FOR ls_dop_dan IN lt_dop_dan INDEX INTO lv_idx
                                            NEXT lv_text = lv_text && COND #( WHEN lv_text IS NOT INITIAL
                                                                              THEN |; { ls_dop_dan-dop_dan }|
                                                                              ELSE ls_dop_dan-dop_dan ) ).
        CLEAR lt_dop_dan.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD on_hotspot_3.
    IF e_column_id-fieldname <> 'BUTTON'.
      RETURN.
    ENDIF.

    ASSIGN gt_esf_roster_detail[ e_row_id ] TO FIELD-SYMBOL(<fs_esf_roster>).
    IF sy-subrc = 0.
      IF <fs_esf_roster>-dop_dan IS NOT INITIAL.
        SPLIT <fs_esf_roster>-dop_dan AT '; ' INTO TABLE DATA(lt_dop_dan).

        LOOP AT gt_dop_dan ASSIGNING FIELD-SYMBOL(<fs_dop_dan>).
          IF line_exists( lt_dop_dan[ table_line = <fs_dop_dan>-dop_dan ] ).
            <fs_dop_dan>-do_choose = abap_true.
          ELSE.
            <fs_dop_dan>-do_choose = abap_false.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

    CALL SCREEN 1012 STARTING AT 75 5 ENDING AT 150 25.

    IF gv_update_dop = abap_true.
      CLEAR <fs_esf_roster>-dop_dan.
      <fs_esf_roster>-dop_dan = REDUCE #( INIT lv_text TYPE string
                                          FOR ls_dop_dan IN gt_dop_dan INDEX INTO lv_idx WHERE ( do_choose = abap_true )
                                          NEXT lv_text = lv_text && COND #( WHEN lv_text IS NOT INITIAL
                                                                            THEN |; { ls_dop_dan-dop_dan }|
                                                                            ELSE ls_dop_dan-dop_dan ) ).
      CLEAR gv_update_dop.
      LEAVE TO SCREEN 1001.
    ENDIF.
  ENDMETHOD.
  "<-- 30.01.2024 D.Kruhliakou

  METHOD get_vzml.
    SELECT SINGLE client FROM but0id
      INTO @sy-mandt
      WHERE partner  = @iv_partner
        AND type     = 'ESF'
        AND idnumber = '1'.
    IF sy-subrc = 0.
      cv_vzml = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD get_country.
    CLEAR ev_intcn3.

    SELECT SINGLE t005~intcn3
      FROM t005
             JOIN
               adrc ON t005~land1 = adrc~country
                 JOIN
                   but020 ON adrc~addrnumber = but020~addrnumber
      INTO ev_intcn3
      WHERE but020~partner = iv_partner.
  ENDMETHOD.

  METHOD get_partner_name.
    TYPES: BEGIN OF lty_s_cluster,
             clustr TYPE stxl-clustr,
             clustd TYPE stxl-clustd,
           END OF lty_s_cluster.

    TYPES: BEGIN OF lty_s_stxl,
             tdid    TYPE stxl-tdid,
             tdname  TYPE stxl-tdname,
             cluster TYPE lty_s_cluster,
           END OF lty_s_stxl.

    DATA lt_stxl     TYPE STANDARD TABLE OF lty_s_stxl.
    DATA lt_cluster  TYPE STANDARD TABLE OF lty_s_cluster.
    DATA lt_tline    TYPE STANDARD TABLE OF tline.
    DATA lt_but_name TYPE zcl_fi_esf_amdp=>gty_t_bu_name.

    CLEAR ev_text.

    SELECT tdid tdname clustr clustd
      INTO TABLE lt_stxl
      FROM stxl
      WHERE tdobject = iv_object
        AND tdid     = iv_id
        AND tdname   = iv_name
        AND tdspras  = iv_spras.
    IF sy-subrc = 0.
      SORT lt_stxl BY tdid
                      tdname.

      LOOP AT lt_stxl ASSIGNING FIELD-SYMBOL(<ls_stxl>).
        APPEND <ls_stxl>-cluster TO lt_cluster.
        AT END OF tdname.
          IF lt_cluster[] IS NOT INITIAL.
            IMPORT tline = lt_tline FROM INTERNAL TABLE lt_cluster.
            LOOP AT lt_tline ASSIGNING FIELD-SYMBOL(<ls_tline>).
              IF ev_text IS INITIAL.
                ev_text = <ls_tline>-tdline.
              ELSE.
                CONCATENATE ev_text <ls_tline>-tdline INTO ev_text SEPARATED BY space.
              ENDIF.
            ENDLOOP.
            CLEAR: lt_cluster,
                   lt_tline.
          ENDIF.
        ENDAT.
      ENDLOOP.
    ELSE.
      TRY.
          zcl_fi_esf_amdp=>get_but_name( EXPORTING iv_partner  = CONV bu_partner( iv_name )
                                         IMPORTING et_but_name = lt_but_name ).

          TRY.
              ev_text = lt_but_name[ 1 ]-text1.
              IF ev_text IS INITIAL.
                ev_text = lt_but_name[ 1 ]-text2.
              ENDIF.
            CATCH cx_sy_itab_line_not_found.
              RETURN.
          ENDTRY.
        CATCH cx_root.
          MESSAGE i001(zfi) WITH 'Ошибка вызова метода'(m01) 'ZCL_FI_ESF_AMDP=>GET_ADDRESS'.
          RETURN.
      ENDTRY.
    ENDIF.
  ENDMETHOD.

  METHOD get_addr.
    DATA lt_address TYPE zcl_fi_esf_amdp=>gty_t_address.

    CLEAR ev_text.

    TRY.
        zcl_fi_esf_amdp=>get_address( EXPORTING iv_partner = iv_partner
                                      IMPORTING et_address = lt_address ).

        TRY.
            ev_text = lt_address[ 1 ]-text.
          CATCH cx_sy_itab_line_not_found.
            RETURN.
        ENDTRY.
      CATCH cx_root.
        MESSAGE i001(zfi) WITH 'Ошибка вызова метода'(m01) 'ZCL_FI_ESF_AMDP=>GET_ADDRESS'.
        RETURN.
    ENDTRY.
  ENDMETHOD.

  METHOD get_taxnum.
    ev_taxnum = VALUE #( gt_taxnum[ partner = iv_partner ]-taxnum DEFAULT '' ).
    IF ev_taxnum IS INITIAL.
      SELECT SINGLE taxnum FROM dfkkbptaxnum
        INTO ev_taxnum
        WHERE partner = iv_partner
          AND taxtype = 'BY0'.
      IF sy-subrc = 0.
        INSERT VALUE #( taxnum  = ev_taxnum
                        partner = iv_partner )
               INTO TABLE gt_taxnum.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD get_bp3010.
    CLEAR ev_frt.

    SELECT SINGLE frt FROM bp3010
      INTO ev_frt
      WHERE partner = iv_patrner
        AND grp_typ = 904.
  ENDMETHOD.

  METHOD set_visibility.
    IF lcl_report=>gv_lock_error IS INITIAL AND gr_grid_1007 IS BOUND.
      gr_grid_1007->set_ready_for_input( 1 ).
    ENDIF.
    IF lcl_report=>gv_lock_error IS NOT INITIAL.
      RETURN.
    ENDIF. IF p_mode1 = abap_false.
      RETURN.
    ENDIF. IF lcl_report=>gv_n_esf IS INITIAL.
      RETURN.
    ENDIF.
    ASSIGN gt_esf_data[ KEY k1 COMPONENTS pr_esf = lcl_report=>gv_pr_esf
                                          n_esf  = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf_data>).

    IF <ls_esf_data> IS ASSIGNED AND ( <ls_esf_data>-id_stat_esf_v <> lcl_report=>gc_stat_v_inprogress ) AND gr_grid_1007 IS BOUND.
      gr_grid_1007->set_ready_for_input( 0 ).
    ENDIF.

    LOOP AT SCREEN.
      IF     sy-dynnr              = '1002' AND screen-name = 'GS_PART1-DT_ANUL_ESF'
         AND gs_part1-id_type_esf <> 'FIXED'.
        screen-input = 0.
      ENDIF.
      IF screen-name = 'LCL_REPORT=>GV_N_ESF' OR screen-name = 'GS_PART1-ID_TYPE_ESF'.
        CONTINUE.
      ENDIF.

      screen-input = 1.

*     #8000000345 Для Доп.ЭСЧФ редактировать можно все разделы (комментируем код ниже)
*      "Для Доп.ЭСЧФ редактировать можно только разделы 1 и 6(ALV)
*      IF gs_part1-id_type_esf = lcl_report=>gc_esf_ty_additional.
*         IF screen-name NS 'GS_PART1'.
*          CONTINUE.
*       ENDIF.
*      ENDIF.

      " IF gs_part1-id_type_esf = 'FIXED'.    {delete DHVK931835
      "  IF screen-name CS 'GS_PART2-UNP_POST' OR screen-name CS 'GS_PART2-NM_POST' OR screen-name CS 'GS_PART3-UNP_POKUP' OR screen-name CS 'GS_PART3-NM_POKUP'.
      "    screen-input = 0.
      "  ENDIF.
      " ENDIF.                                }delete DHVK931835

      IF screen-name CS 'DT_VS_ESF'.
        screen-input = 0.
      ENDIF.

      " #8000000666 Объект полномочий на флаг "НДС по курсовым разницам"
      IF screen-name = 'GS_PART1-CURRENCY_DIF_NDS'.
        AUTHORITY-CHECK OBJECT 'ZFI_RI_NDS'
                        ID 'ACTVT' FIELD '01'.
        IF sy-subrc = 0.
          screen-input = 1.
        ELSE.
          screen-input = 0.
        ENDIF.
      ENDIF.
      "
      IF <ls_esf_data> IS ASSIGNED.
        IF <ls_esf_data>-id_stat_esf_v <> lcl_report=>gc_stat_v_inprogress AND screen-name CS 'GS_PART'.
          screen-input = 0.
        ENDIF.
      ENDIF.

      IF screen-name CS 'GS_PART5-NM_VID_DOC'.
        screen-input = 0.
      ENDIF.

      MODIFY SCREEN.
    ENDLOOP.
  ENDMETHOD.

  METHOD build_31_15.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    GET REFERENCE OF <ls_esf> INTO er_esf.
    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = iv_id_vid_iop.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-bldat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      IF iv_id_vid_iop = gc_681.
        SELECT SINGLE t005~intcn3
          FROM t005
                 JOIN
                   vbpa ON t005~land1 = vbpa~land1
                     JOIN
                       vbfa ON vbpa~vbeln = vbfa~vbelv
          INTO @<ls_esf>-countrycode_pokup
          WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
            AND vbfa~vbtyp_v = 'J'
            AND vbpa~parvw   = 'WE'.
      ELSE.
        get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).
      ENDIF.

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                  CHANGING  ev_frt     = lv_frt ).
      <ls_esf>-code_pokup_fil = lv_frt.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

*     IF lv_auart <> 'ZUSL'.  " не заполняем для услуг
      IF lv_auart NOT IN gt_auart_serv. " не заполняем для услуг
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

        " 23.УНП( 50. COUNTRYCODE_GROTP )
        get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grotp = lv_taxnum.

        " 24.Наименование( 52. NM_GROTP )
        lv_name = lv_partner.
        get_partner_name( EXPORTING iv_id     = gc_id
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = gc_object
                          CHANGING  ev_text   = lv_text ).
        <ls_esf>-nm_grotp = lv_text.

        " 25.Адрес отправки( 56. NM_GRPOL )
        get_zdeliv_note_h( EXPORTING iv_vbeln  = <ls_fi_data>-vbeln
                           IMPORTING es_zdeliv = DATA(ls_zdeliv) ).

        IF gv_change_vid_op IS INITIAL. " AK_RUBAHOV #27144 ZFI_REGINV
          <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                           THEN ls_zdeliv-zvsteltxt
                                           ELSE <ls_esf>-addres_post ).
        ENDIF.

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = COND #( WHEN ls_zdeliv-zunpsht IS NOT INITIAL THEN ls_zdeliv-zunpsht ELSE lv_taxnum ).                      "#9

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol  = COND #( WHEN ls_zdeliv-zshtnm IS NOT INITIAL THEN ls_zdeliv-zshtnm ELSE <ls_esf>-nm_pokup ).                 "#9

        IF gv_change_vid_op IS INITIAL. " AK_RUBAHOV #27144 ZFI_REGINV
          " 29.Адрес отправки( 57. ADDRESS_GRPOL )
          <ls_esf>-address_grpol = COND #( WHEN ls_zdeliv-zvstel2txt IS NOT INITIAL
                                           THEN ls_zdeliv-zvstel2txt
                                           ELSE <ls_esf>-addres_pokup ).
        ENDIF.
      ENDIF.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60.
    SELECT SINGLE zdeliv_note_h~zser,
                  zdeliv_note_h~zblnk,
                  zdeliv_note_h~zkdf,
                  zdeliv_note_h~zvddc,
                  zdeliv_note_h~znum_etsd,
                  likp~wadat_ist,
                  zfi_vid_doc~id_vid_doc
      FROM zdeliv_note_h
             JOIN
               likp ON zdeliv_note_h~zdelivery = likp~vbeln
                 JOIN
                   vbfa ON likp~vbeln = vbfa~vbelv
                     LEFT JOIN
                       zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
      INTO @DATA(ls_deliv)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'J'. " поставка
    IF sy-subrc = 0.
*        <ls_esf>-id_vid_doc = COND #( WHEN ls_deliv-zvddc = 'ТТН-1' THEN 603
*                                      WHEN ls_deliv-zvddc = 'ТН-2' THEN 602 ).
*      <ls_esf>-id_vid_doc = ls_deliv-zvddc.

      "(DHVK949928
      IF ls_deliv-znum_etsd IS NOT INITIAL.
        CLEAR:ls_deliv-zkdf,
               ls_deliv-zser.                                " DHVK950021
      ELSE.
        ls_deliv-znum_etsd = ls_deliv-zblnk.                " DHVK950017
      ENDIF.
      ")DHVK949928

      <ls_esf>-id_vid_doc = ls_deliv-id_vid_doc.
      <ls_esf>-nm_vid_doc = ''.
      <ls_esf>-dt_doc     = ls_deliv-wadat_ist.
      IF ls_deliv-zkdf IS NOT INITIAL.                      " DHVK950029
        <ls_esf>-code_tp_blank = ls_deliv-zkdf.
      ELSE.
        <ls_esf>-code_tp_blank = ''.
      ENDIF.
      <ls_esf>-ser_tp_blank = ls_deliv-zser.
      <ls_esf>-n_tp_blank   = ls_deliv-znum_etsd.             " DHVK950017

*{ AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
*      Перемещено вниз
*      "Название ( 61. NM_VID_DOC )
*      SELECT SINGLE nm_vid_doc
*        FROM zfi_vid_doc
*        INTO <ls_esf>-nm_vid_doc
*       WHERE id_vid_doc = <ls_esf>-id_vid_doc.
*} AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    ELSE.
*--> AK_KSENEVICH 25198 ZFI_REGINV Номер электронной накладной
*      <ls_esf>-dt_doc = <ls_fi_data>-bldat.
*      <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
      " Исходящая поставка
      SELECT SINGLE vbelv FROM vbfa
        INTO @DATA(lv_vbfa_vbelv)
        WHERE vbeln   = @<ls_fi_data>-vbeln
          AND vbtyp_v = 'J'.
      " Документ отпуска материала
      SELECT vbeln, erdat FROM vbfa
        INTO @DATA(ls_vbfa_matdoc)
        UP TO 1 ROWS
        WHERE vbelv   = @lv_vbfa_vbelv
          AND vbtyp_n = 'R'
        ORDER BY vbeln DESCENDING.
      ENDSELECT.
      " Номер электронной накладной из документа отпуска материала
      SELECT SINGLE bldat, zznum_etsd
        FROM mkpf
        INTO @DATA(ls_mkpf_etsd)
        WHERE mblnr = @ls_vbfa_matdoc-vbeln
          AND mjahr = @ls_vbfa_matdoc-erdat(4).
      IF ls_mkpf_etsd-zznum_etsd IS NOT INITIAL.
        " Новая обработка
        SELECT SINGLE tntype, doctype FROM zmm_edoc_h
          INTO @DATA(ls_zmm_edoc_h)
          WHERE noteid = @ls_mkpf_etsd-zznum_etsd.

        <ls_esf>-id_vid_doc = SWITCH #( ls_zmm_edoc_h-tntype
                                        WHEN '700' THEN '614'
                                        WHEN '270' THEN '615' ).
*{ AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
*        Перемещено вниз
*        "Название ( 61. NM_VID_DOC )
*        SELECT SINGLE nm_vid_doc
*          FROM zfi_vid_doc
*          INTO <ls_esf>-nm_vid_doc
*         WHERE id_vid_doc = <ls_esf>-id_vid_doc.
*} AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
        <ls_esf>-dt_doc     = ls_mkpf_etsd-bldat.
        <ls_esf>-n_tp_blank = ls_mkpf_etsd-zznum_etsd.
      ELSE.
        " Прежняя обработка (закомментировано выше)
        <ls_esf>-dt_doc     = <ls_fi_data>-bldat.
        <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
        " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
        SELECT vbelv, posnv FROM vbfa
          UP TO 1 ROWS
          INTO @DATA(ls_vbfa)
          WHERE vbeln   = @<ls_fi_data>-vbeln
            AND vbtyp_n = 'M'
            AND vbtyp_v = 'C'
          ORDER BY posnn ASCENDING.
        ENDSELECT.
        IF sy-subrc = 0.
          SELECT zz_id_vid_doc FROM vbap
            UP TO 1 ROWS
            INTO <ls_esf>-id_vid_doc
            WHERE vbeln = ls_vbfa-vbelv
              AND posnr = ls_vbfa-posnv.
          ENDSELECT.
        ENDIF.
        " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
      ENDIF.

      " <-- AK_KSENEVICH 25198 ZFI_REGINV Номер электронной накладной
    ENDIF.

    " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.
    " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"

    "--> AK_RUBAHOV #26771 Интеграция с Торговлей ЦА-ПОН
    SELECT SINGLE * FROM zfi_wsi_doc
      WHERE bukrs = @<ls_fi_data>-bukrs
        AND belnr = @<ls_fi_data>-belnr
        AND gjahr = @<ls_fi_data>-gjahr
      INTO @DATA(ls_wsi_doc).
    IF sy-subrc = 0.
      " Вид документа
      <ls_esf>-id_vid_doc        = ls_wsi_doc-id_vid_doc.
      " Название
      <ls_esf>-nm_vid_doc        = ls_wsi_doc-nm_vid_doc.
      " Дата
      <ls_esf>-dt_doc            = ls_wsi_doc-dt_doc.
      " Код типа бланка
      <ls_esf>-code_tp_blank     = ls_wsi_doc-code_tp_blank.
      " Серия
      <ls_esf>-ser_tp_blank      = ls_wsi_doc-ser_tp_blank.
      " Номер
      <ls_esf>-n_tp_blank        = ls_wsi_doc-n_tp_blank.
      " Возврат товара
      <ls_esf>-refund_tp_blank   = ls_wsi_doc-refund_tp_blank.
      " 16.Код страны получателя
      <ls_esf>-countrycode_pokup = ls_wsi_doc-countrycode_pokup.
      " 17.УНП Получателя
      <ls_esf>-unp_pokup         = ls_wsi_doc-unp_pokup.
      " 8.1.Код филиала (обособленного подразделения)
      <ls_esf>-code_pokup_fil    = ls_wsi_doc-code_pokup_fil.
      " 18.Получатель
      <ls_esf>-nm_pokup          = ls_wsi_doc-nm_pokup.
      " 10.Юридический адрес
      <ls_esf>-addres_pokup      = ls_wsi_doc-addres_pokup.
      " 26.Код страны грузополучателя
      <ls_esf>-countrycode_grpol = ls_wsi_doc-countrycode_grpol.
      " 27.УНП Грузополучателя
      <ls_esf>-unn_grpol         = ls_wsi_doc-unn_grpol.
      " 24.Наименование
      <ls_esf>-nm_grpol          = ls_wsi_doc-nm_grpol.
      " 29.Адрес доставки
      <ls_esf>-address_grpol     = ls_wsi_doc-address_grpol.
    ENDIF.
    "--< AK_RUBAHOV #26771 Интеграция с Торговлей ЦА-ПОН

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      IF     iv_id_type_esf  = gc_esf_original_type
         AND ls_deliv       IS NOT INITIAL.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        CLEAR er_esf.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
* <-- AK_BUTVILOVS #8000000213
* ENDIF.
  ENDMETHOD.

  METHOD build_31.
    DATA lv_nnp   TYPE zfi_esf_roster-nnp.
    DATA lv_mwskz TYPE bseg-mwskz.
    DATA lv_waers TYPE t001-waers.
    DATA lt_nds   TYPE STANDARD TABLE OF rtax1u15.
    DATA lv_nds   TYPE i.
    DATA lv_wrbtr TYPE bseg-wrbtr.

    FIELD-SYMBOLS <ls_esf> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    build_31_15( EXPORTING iv_id_type_esf = iv_id_type_esf
                           iv_id_vid_iop  = CONV zfi_esf-id_vid_iop( gc_31 )
                 IMPORTING er_esf         = DATA(lr_esf) ).

    IF lr_esf IS INITIAL.
      RETURN.
    ENDIF.
    ASSIGN lr_esf->* TO <ls_esf>.
    DATA(lt_vbrp) = read_vbrp_all( ).
    SORT gt_okei_tab BY msehi.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      "--> AK_RUBAHOV #26771 Интеграция с Торговлей ЦА-ПОН
      SELECT SINGLE * FROM zfi_wsi_doc
        WHERE bukrs = @<ls_fi_data_2>-bukrs
          AND belnr = @<ls_fi_data_2>-belnr
          AND gjahr = @<ls_fi_data_2>-gjahr
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(ls_wsi).
      IF sy-subrc = 0.
        SELECT * FROM zfi_wsi_roster
          WHERE bukrs = @<ls_fi_data_2>-bukrs
            AND belnr = @<ls_fi_data_2>-belnr
            AND gjahr = @<ls_fi_data_2>-gjahr
          INTO TABLE @DATA(lt_wsi_roster).
      ENDIF.

      " roster
      IF lt_wsi_roster IS NOT INITIAL.
        LOOP AT lt_wsi_roster INTO DATA(ls_wsi_roster).
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<fs_esf_roster>).
          " Признак ЭСЧФ
          <fs_esf_roster>-pr_esf        = <ls_esf>-pr_esf.
          " 1.Номер ЭСЧФ
          <fs_esf_roster>-n_esf         = <ls_esf>-n_esf.
          " № п/п
          <fs_esf_roster>-nnp           = ls_wsi_roster-nnp.
          " Наименование товара
          <fs_esf_roster>-nm_tov        = ls_wsi_roster-nm_tov.
          " Код товара (ТН ВЭД ЕАЭС)
          <fs_esf_roster>-code_tov_ved  = ls_wsi_roster-code_tov_ved.
          " Код видов деятельности (ОКЭД)
          <fs_esf_roster>-code_tov_oced = ls_wsi_roster-code_tov_oced.
          " Базисная единица измерения
          <fs_esf_roster>-meins         = ls_wsi_roster-meins.
          " Количество (объем)
          <fs_esf_roster>-kol_tov       = ls_wsi_roster-kol_tov.
          " Цена (тариф) за единицу товара (работы, услуги)  без НДС
          <fs_esf_roster>-cena_tov      = ls_wsi_roster-cena_tov.
          " Всего по счету. Стоимость товаров (работ, услуг)
          <fs_esf_roster>-nonds         = ls_wsi_roster-nonds.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <fs_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <fs_esf_roster>-nonds.
          " В том числе сумма акциза, руб
          <fs_esf_roster>-excise = ls_wsi_roster-excise.
          <ls_esf_match>-sum_excise = <ls_esf_match>-sum_excise + <fs_esf_roster>-excise.
          <ls_esf>-sum_excise = <ls_esf>-sum_excise + <fs_esf_roster>-excise.
          " Ставка НДС
          <fs_esf_roster>-st_nds    = ls_wsi_roster-st_nds.
          " Ставка НДС (тип)
          <fs_esf_roster>-id_tp_nds = ls_wsi_roster-id_tp_nds.
          " Сумма НДС
          <fs_esf_roster>-nds       = ls_wsi_roster-nds.
          <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <fs_esf_roster>-nds.
          <ls_esf>-sum_nds = <ls_esf>-sum_nds + <fs_esf_roster>-nds.
          " Стоимость товаров c НДС
          <fs_esf_roster>-snds = ls_wsi_roster-snds.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <fs_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <fs_esf_roster>-snds.
          " Дополнительные данные
          <fs_esf_roster>-dop_dan = ls_wsi_roster-dop_dan.
          " Код ОКЕИ
          <fs_esf_roster>-ed_izm  = ls_wsi_roster-ed_izm.
          " Код валюты
          <fs_esf_roster>-waers   = ls_wsi_roster-waers.
        ENDLOOP.
        "--< AK_RUBAHOV #26771 Интеграция с Торговлей ЦА-ПОН

      ELSEIF <ls_fi_data_2>-vbeln IS NOT INITIAL.

        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).
        SORT gt_okei_tab BY msehi.
        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.
          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.
          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = <ls_vbrp>-kzwi6 * lv_kursf.
          <ls_esf_match>-sum_excise = <ls_esf_match>-sum_excise + <ls_esf_roster>-excise.
          <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_esf_roster>-excise.

          " ставка НДС
          " 8000000248 ставку НДС считывать из документа фактуры. Если не найдена, то получать расчетным путем.
          CLEAR lv_mwskz.
          lv_mwskz = |{ <ls_fi_data_2>-mwskz ALPHA = IN }|.

          CLEAR lv_waers.
          IF <ls_fi_data_2>-waers IS NOT INITIAL.
            lv_waers = <ls_fi_data_2>-waers.
          ELSE.
            lv_waers = <ls_vbrp>-waerk.
          ENDIF.

          IF <ls_fi_data_2>-bukrs IS NOT INITIAL AND lv_mwskz IS NOT INITIAL AND lv_waers IS NOT INITIAL.
            CLEAR lt_nds. REFRESH lt_nds.
            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT' " поиск ставки НДС по коду налога
              EXPORTING  i_bukrs           = <ls_fi_data_2>-bukrs
                         i_mwskz           = lv_mwskz
                         i_waers           = lv_waers
                         i_wrbtr           = <ls_vbrp>-mwsbp
              TABLES     t_mwdat           = lt_nds
              EXCEPTIONS bukrs_not_found   = 1
                         country_not_found = 2
                         mwskz_not_defined = 3
                         mwskz_not_valid   = 4
                         ktosl_not_found   = 5
                         kalsm_not_found   = 6
                         parameter_error   = 7
                         knumh_not_found   = 8
                         kschl_not_found   = 9
                         unknown_error     = 10
                         account_not_found = 11
                         txjcd_not_valid   = 12
                         OTHERS            = 13.
            IF sy-subrc = 0 AND lt_nds IS NOT INITIAL.
              TRY.
                  <ls_esf_roster>-st_nds = lt_nds[ 1 ]-msatz.
                CATCH cx_sy_itab_line_not_found.
                  CLEAR <ls_esf_roster>-st_nds.
              ENDTRY.
            ELSE.
              TRY. " расчетным путем - как было раньше
                  lv_nds = <ls_vbrp>-mwsbp / <ls_vbrp>-netwr * 100.
                  <ls_esf_roster>-st_nds = lv_nds.
                CATCH cx_sy_zerodivide.
                  <ls_esf_roster>-st_nds = 0.
              ENDTRY.
            ENDIF.
          ELSE.
            TRY.  " расчетным путем - как было раньше
                lv_nds = <ls_vbrp>-mwsbp / <ls_vbrp>-netwr * 100.
                <ls_esf_roster>-st_nds = lv_nds.
              CATCH cx_sy_zerodivide.
                <ls_esf_roster>-st_nds = 0.
            ENDTRY.
          ENDIF.
          "
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = COND #( WHEN <ls_esf_roster>-st_nds = 0 THEN 'NO_VAT' ELSE 'DECIMAL' ).
          " сумма НДС
          <ls_esf_roster>-nds       = <ls_vbrp>-mwsbp * lv_kursf.
          <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
          <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
          " сумма с НДС
          <ls_esf_roster>-snds = ( <ls_vbrp>-netwr + <ls_vbrp>-mwsbp ) * lv_kursf.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.
          IF    <ls_esf>-pr_vzml_post = abap_true                                                                      "#8
             OR <ls_fi_data_2>-prvzml_ish = abap_true AND <ls_esf>-id_type_esf = lcl_report=>gc_esf_ty_additional. " DHVK942202
            <ls_esf_roster>-code_tov_ved = <ls_vbrp>-zeinr.
          ENDIF.
          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.
          <ls_esf_roster>-cena_tov      = round( val = <ls_esf_roster>-cena_tov
                                                 dec = 2 ).              " DHVK930820

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova
        ENDLOOP.
      ELSE.

        " 8000000376 проверяем - это реализация ОС резиденту РБ или нет
        SELECT COUNT(*) FROM bseg
          WHERE bukrs  = <ls_fi_data_2>-bukrs
            AND belnr  = <ls_fi_data_2>-belnr
            AND gjahr  = <ls_fi_data_2>-gjahr
            AND anln1 IS NOT NULL.

        IF sy-subrc = 0. " реализация ОС резиденту РБ - заполняем данные позиции
          " roster
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING <ls_esf_roster>.
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf_match>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование ОС
          SELECT SINGLE zafull~txtf1,
                        zafull~txtf2
            INTO @DATA(ls_txt)
            FROM zafull
                   LEFT JOIN
                     bseg ON  zafull~bukrs = bseg~bukrs
                          AND zafull~anln1 = bseg~anln1
                          AND zafull~anln2 = bseg~anln2
            WHERE bseg~bukrs  = @<ls_fi_data_2>-bukrs
              AND bseg~belnr  = @<ls_fi_data_2>-belnr
              AND bseg~gjahr  = @<ls_fi_data_2>-gjahr
              AND bseg~anln1 IS NOT NULL.

          IF ls_txt-txtf2 IS INITIAL.
            <ls_esf_roster>-nm_tov = ls_txt-txtf1.
          ELSE.
            <ls_esf_roster>-nm_tov = ls_txt-txtf1 && ls_txt-txtf2.
          ENDIF.

          " ЕИ (по умолч. ШТ)
          <ls_esf_roster>-ed_izm  = '796'.
          <ls_esf_roster>-meins   = 'ST'.
          " количество
          <ls_esf_roster>-kol_tov = 1.
          " цена без НДС
          TRY.
              <ls_esf_roster>-cena_tov = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.

          " ставка НДС
          CLEAR lv_mwskz.
          lv_mwskz = |{ <ls_fi_data_2>-mwskz ALPHA = IN }|.

          CLEAR lv_waers.
          IF <ls_fi_data_2>-waers IS NOT INITIAL.
            <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
          ELSE.
            SELECT SINGLE h_waers INTO <ls_esf_roster>-waers
              FROM bseg
              WHERE bseg~bukrs  = <ls_fi_data_2>-bukrs
                AND bseg~belnr  = <ls_fi_data_2>-belnr
                AND bseg~gjahr  = <ls_fi_data_2>-gjahr
                AND bseg~anln1 IS NOT NULL.
          ENDIF.
          lv_waers = <ls_esf_roster>-waers.

          CLEAR lv_wrbtr.
          lv_wrbtr = <ls_fi_data_2>-total_w_vat.

          IF <ls_fi_data_2>-bukrs IS NOT INITIAL AND lv_mwskz IS NOT INITIAL AND lv_waers IS NOT INITIAL.
            CLEAR lt_nds. REFRESH lt_nds.
            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT' " поиск ставки НДС по коду налога
              EXPORTING  i_bukrs           = <ls_fi_data_2>-bukrs
                         i_mwskz           = lv_mwskz
                         i_waers           = lv_waers
                         i_wrbtr           = lv_wrbtr
              TABLES     t_mwdat           = lt_nds
              EXCEPTIONS bukrs_not_found   = 1
                         country_not_found = 2
                         mwskz_not_defined = 3
                         mwskz_not_valid   = 4
                         ktosl_not_found   = 5
                         kalsm_not_found   = 6
                         parameter_error   = 7
                         knumh_not_found   = 8
                         kschl_not_found   = 9
                         unknown_error     = 10
                         account_not_found = 11
                         txjcd_not_valid   = 12
                         OTHERS            = 13.
            IF sy-subrc = 0 AND lt_nds IS NOT INITIAL.
              TRY.
                  <ls_esf_roster>-st_nds = lt_nds[ 1 ]-msatz.
                CATCH cx_sy_itab_line_not_found.
                  CLEAR <ls_esf_roster>-st_nds.
              ENDTRY.
            ELSE.
              TRY. " расчетным путем
                  lv_nds = <ls_fi_data_2>-total_vat / <ls_fi_data_2>-total_w_vat * 100.
                  <ls_esf_roster>-st_nds = lv_nds.
                CATCH cx_sy_zerodivide.
                  <ls_esf_roster>-st_nds = 0.
              ENDTRY.
            ENDIF.
          ELSE.
            TRY.  " расчетным путем
                lv_nds = <ls_fi_data_2>-total_vat / <ls_fi_data_2>-total_w_vat * 100.
                <ls_esf_roster>-st_nds = lv_nds.
              CATCH cx_sy_zerodivide.
                <ls_esf_roster>-st_nds = 0.
            ENDTRY.
          ENDIF.
          "
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = COND #( WHEN <ls_esf_roster>-st_nds = 0 THEN 'NO_VAT' ELSE 'DECIMAL' ).
          " сумма НДС
          <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
          " сумма с НДС
          <ls_esf_roster>-snds      = <ls_fi_data_2>-total_w_vat.
          " сумма без НДС
          <ls_esf_roster>-nonds     = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
          " акциз
          <ls_esf_roster>-excise    = <ls_fi_data_2>-excise.
        ENDIF.
        " 8000000376 end

        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.

      ENDIF.
    ENDLOOP.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.
    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_32.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    " ТТН-1, ТН-2
    get_zdeliv_note_h( EXPORTING iv_vbeln  = <ls_fi_data>-vbeln
                       IMPORTING es_zdeliv = DATA(ls_zdeliv) ).

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    <ls_esf>-n_esf         = lv_n_esf.

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_32.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = last_mday( <ls_fi_data>-budat ).             "#3

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. "8000000345

    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.  " 8000000345

      " 34. N_VVOZ_TOV_POST / 35. DT_VVOZ_TOV_POST
      SELECT SINGLE znumber zdate FROM zfi_nds_selappl
        INTO ( <ls_esf>-n_vvoz_tov_post, <ls_esf>-dt_vvoz_tov_post )
        WHERE bukrs = <ls_fi_data>-bukrs
          AND belnr = <ls_fi_data>-belnr
          AND gjahr = <ls_fi_data>-gjahr.

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

*      IF lv_auart <> 'ZUSL'.  " не заполняем для услуг
      IF lv_auart NOT IN gt_auart_serv. " не заполняем для услуг
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

        " 23.УНП( 50. COUNTRYCODE_GROTP )
        get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grotp = lv_taxnum. CLEAR lv_taxnum.

        " 24.Наименование( 52. NM_GROTP )
        lv_name = lv_partner.
        get_partner_name( EXPORTING iv_id     = gc_id
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = gc_object
                          CHANGING  ev_text   = lv_text ).
        <ls_esf>-nm_grotp      = lv_text.

        " 25.Адрес отправки( 56. NM_GRPOL )
        <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                         THEN ls_zdeliv-zvsteltxt
                                         ELSE <ls_esf>-addres_post ).

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = lv_taxnum. CLEAR lv_taxnum.

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol      = <ls_esf>-nm_pokup.

        " 29.Адрес отправки( 57. ADDRESS_GRPOL )
        <ls_esf>-address_grpol = COND #( WHEN ls_zdeliv-zvstel2txt IS NOT INITIAL
                                         THEN ls_zdeliv-zvstel2txt
                                         ELSE <ls_esf>-addres_pokup ).
      ENDIF.
    ENDIF.                                                  " 8000000345
    "

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60.
    IF ls_zdeliv IS NOT INITIAL.
      <ls_esf>-id_vid_doc = '608'.                          " ls_zdeliv-zvddc.#5
      <ls_esf>-nm_vid_doc = ''.
      <ls_esf>-dt_doc     = ''.
      IF ls_zdeliv-zkdf IS NOT INITIAL.                     " DHVK950029
        <ls_esf>-code_tp_blank = ls_zdeliv-zkdf.
      ELSE.
        <ls_esf>-code_tp_blank = ''.
      ENDIF.
      <ls_esf>-ser_tp_blank = ls_zdeliv-zser.
      <ls_esf>-n_tp_blank   = ls_zdeliv-znum_etsd.

*{ AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
*      Перемещено вниз
*      "Название ( 61. NM_VID_DOC )
*      SELECT SINGLE nm_vid_doc
*        FROM zfi_vid_doc
*        INTO <ls_esf>-nm_vid_doc
*       WHERE id_vid_doc = <ls_esf>-id_vid_doc.
*} AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    ELSE.
      <ls_esf>-dt_doc     = <ls_fi_data>-bldat.
      <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
      " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
      SELECT vbelv, posnv FROM vbfa
        UP TO 1 ROWS
        INTO @DATA(ls_vbfa)
        WHERE vbeln   = @<ls_fi_data>-vbeln
          AND vbtyp_n = 'M'
          AND vbtyp_v = 'C'
        ORDER BY posnn ASCENDING.
      ENDSELECT.
      IF sy-subrc = 0.
        SELECT zz_id_vid_doc FROM vbap
          UP TO 1 ROWS
          INTO <ls_esf>-id_vid_doc
          WHERE vbeln = ls_vbfa-vbelv
            AND posnr = ls_vbfa-posnv.
        ENDSELECT.
      ENDIF.
      " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    ENDIF.

    " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.
    " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      IF     iv_id_type_esf  = gc_esf_original_type
         AND ls_zdeliv      IS NOT INITIAL.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

*    ENDIF.
    DATA(lt_vbrp) = read_vbrp_all( ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      IF <ls_fi_data>-vbeln IS NOT INITIAL.
        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).

        " ТН ВЭД ЕАЭС
        SELECT zcs_cust_goods~goods_tnvedcode,
               vbfa~posnn                     AS zeile
          FROM zcs_cust_goods
                 JOIN
                   zcs_cust_hsd ON zcs_cust_goods~declarant_id = zcs_cust_hsd~declarant_id
                     JOIN
                       vbfa ON vbfa~vbelv = zcs_cust_hsd~rel_mblnr
                            OR     vbfa~vbelv            = zcs_cust_goods~mblnr
                               AND right( vbfa~posnv,4 ) = zcs_cust_goods~zeile
          WHERE vbfa~vbeln   = @<ls_fi_data_2>-vbeln
            AND vbfa~vbtyp_v = 'J'
          ORDER BY goods_tnvedcode,
                   vbfa~posnn
          INTO TABLE @DATA(lt_cust_goods).

        SORT gt_okei_tab BY msehi.

        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.
          " код товара
          READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
               WITH KEY zeile = <ls_vbrp>-posnr+2(4)
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-code_tov_ved = <ls_cust_goods>-goods_tnvedcode.

            IF <ls_esf_roster>-code_tov_ved IN lcl_report=>gr_strat_code.             "{DHVK934319
              <ls_esf>-pr_sdper_post = abap_true.                                     "}DHVK934319
            ENDIF.
          ENDIF.

          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.
          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = 0.
          <ls_esf_match>-sum_excise = 0.
          <ls_esf>-sum_excise = 0.
          " ставка НДС
          <ls_esf_roster>-st_nds    = 0.
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = 'ZERO'.
          " сумма НДС
          <ls_esf_roster>-nds       = 0.
          <ls_esf_match>-sum_nds = 0.
          <ls_esf>-sum_nds = 0.
          " сумма с НДС
          <ls_esf_roster>-snds    = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds       = <ls_esf>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova
        ENDLOOP.
      ELSE.
        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
      ENDIF.
    ENDLOOP.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_33.
    TYPES:
      BEGIN OF lty_s_vbeln,
        vbeln TYPE vbrk-vbeln,
      END OF lty_s_vbeln.

    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lt_vbeln         TYPE STANDARD TABLE OF lty_s_vbeln.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.

      READ TABLE lt_vbeln TRANSPORTING NO FIELDS
           WITH KEY vbeln = <ls_fi_data>-vbeln
           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( vbeln = <ls_fi_data>-vbeln ) INTO lt_vbeln INDEX sy-tabix.
      ENDIF.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    " ТТН-1, ТН-2
    get_zdeliv_note_h( EXPORTING iv_vbeln  = <ls_fi_data>-vbeln
                       IMPORTING es_zdeliv = DATA(ls_zdeliv) ).

    " ТН ВЭД ЕАЭС
    IF lt_vbeln IS NOT INITIAL.
      " Выборка данных по декларациям у которых в заголовке есть поставка
      SELECT vbfa~vbeln,
             zcs_cust_hcd~permission_num,
             zcs_cust_hcd~date_permitted,
             zcs_cust_hcd~nom_reg
        FROM zcs_cust_hcd
               JOIN
                 vbfa ON vbfa~vbelv = zcs_cust_hcd~rel_mblnr
        INTO TABLE @DATA(lt_cust_hcd)
        FOR ALL ENTRIES IN @lt_vbeln
        WHERE vbfa~vbeln   = @lt_vbeln-vbeln
          AND vbfa~vbtyp_v = 'J'.
      " Выборка данных по декларациям у которых в заголовке прописано несколько поставок
      SELECT DISTINCT vbfa~vbeln,
                      zcs_cust_hcd~permission_num,
                      zcs_cust_hcd~date_permitted,
                      zcs_cust_hcd~nom_reg
        FROM zcs_cust_hcd
               JOIN
                 zcs_cust_goods AS goods ON goods~declarant_id = zcs_cust_hcd~declarant_id
                   JOIN
                     vbfa ON vbfa~vbelv = goods~mblnr
        APPENDING TABLE @lt_cust_hcd
        FOR ALL ENTRIES IN @lt_vbeln
        WHERE vbfa~vbeln   = @lt_vbeln-vbeln
          AND vbfa~vbtyp_v = 'J'.
      SORT lt_cust_hcd BY vbeln.

      IF lt_cust_hcd IS NOT INITIAL.
        SELECT nom_reg, depperm_date FROM zcs_cust_permis
          INTO TABLE @DATA(lt_cust_permis)
          FOR ALL ENTRIES IN @lt_cust_hcd

          WHERE nom_reg = @lt_cust_hcd-nom_reg.

        SORT lt_cust_permis BY depperm_date.
        DELETE ADJACENT DUPLICATES FROM lt_cust_permis COMPARING depperm_date.

        IF lines( lt_cust_permis ) > 1.
          MESSAGE 'Необходимо создать несколько ЭСЧФ к каждой дате разрешения на убытие'(m42) TYPE 'I'.
        ENDIF.
      ENDIF.
    ENDIF.
    " выборка по позициям декларации
    SELECT zcs_cust_goods~goods_tnvedcode,
           vbfa~posnn                     AS zeile,
           zcs_cust_hcd~cee_country_code,
           zcs_cust_hcd~cee_short_name,
           zcs_cust_hcd~cee_address
      FROM zcs_cust_goods
             JOIN
               zcs_cust_hcd ON zcs_cust_goods~declarant_id = zcs_cust_hcd~declarant_id
                 JOIN
                   vbfa ON vbfa~vbelv = zcs_cust_hcd~rel_mblnr
                        OR     vbfa~vbelv            = zcs_cust_goods~mblnr
                           AND right( vbfa~posnv,4 ) = zcs_cust_goods~zeile
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'J'
      ORDER BY goods_tnvedcode, zeile
      INTO TABLE @DATA(lt_cust_goods).
    IF lt_cust_goods IS NOT INITIAL.
      ASSIGN lt_cust_goods[ 1 ] TO FIELD-SYMBOL(<ls_goods_1>).
    ENDIF.
    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_33.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = last_mday( <ls_fi_data>-budat ).             "#3

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. "8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.
    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 19. PR_RESOFZ_POST
    SELECT SINGLE partner FROM bp3010
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_partner_tmp)
      WHERE partner  = @<ls_fi_data>-lifnr
        AND grp_typ  = 902
        AND grp     IN ( '001', '002' ).
    IF sy-subrc = 0.
      <ls_esf>-pr_resofz_post = abap_true.
    ENDIF.

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.  " 8000000345
      LOOP AT lt_vbeln ASSIGNING FIELD-SYMBOL(<ls_vbeln>).
        TRY.
            " 31. N_VYP_TOV_POST
            <ls_esf>-n_vyp_tov_post     = lt_cust_hcd[ vbeln = <ls_vbeln> ]-permission_num.

            " 32. DT_VYP_TOV_POST
            <ls_esf>-dt_vyp_tov_post    = lt_cust_hcd[ vbeln = <ls_vbeln> ]-date_permitted.

            " 33. DT_VYP_TOV_UB_POST
            <ls_esf>-dt_vyp_tov_ub_post = lt_cust_permis[
                                              nom_reg = lt_cust_hcd[ vbeln = <ls_vbeln> ]-nom_reg ]-depperm_date.
          CATCH cx_sy_itab_line_not_found.
        ENDTRY.

        IF <ls_esf>-n_vyp_tov_post IS NOT INITIAL.
          EXIT.
        ENDIF.
      ENDLOOP.

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).
      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

*      IF lv_auart <> 'ZUSL'.  " не заполняем для услуг
      IF lv_auart NOT IN gt_auart_serv. " не заполняем для услуг
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

        " 23.УНП( 50. COUNTRYCODE_GROTP )
        get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grotp = lv_taxnum.

        " 24.Наименование( 52. NM_GROTP )
        lv_name = lv_partner.
        get_partner_name( EXPORTING iv_id     = gc_id
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = gc_object
                          CHANGING  ev_text   = lv_text ).
        <ls_esf>-nm_grotp      = lv_text.

        " 25.Адрес отправки( 56. NM_GRPOL )
        <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                         THEN ls_zdeliv-zvsteltxt
                                         ELSE <ls_esf>-addres_post ).
        IF <ls_goods_1> IS ASSIGNED.                                       "{#4
          " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
          SELECT SINGLE t005~intcn3 FROM t005
            INTO <ls_esf>-countrycode_grpol
            WHERE land1 = <ls_goods_1>-cee_country_code.

          " 28.Наименование( 56. NM_GRPOL )
          <ls_esf>-nm_grpol      = <ls_goods_1>-cee_short_name.
          " 29.Адрес отправки( 57. ADDRESS_GRPOL )
          <ls_esf>-address_grpol = <ls_goods_1>-cee_address.
        ELSE.
          " 25.Адрес отправки( 56. NM_GRPOL )
          <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                           THEN ls_zdeliv-zvsteltxt
                                           ELSE <ls_esf>-addres_post ).

          " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
          get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                       CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

          " 28.Наименование( 56. NM_GRPOL )
          <ls_esf>-nm_grpol      = <ls_esf>-nm_pokup.

          " 29.Адрес отправки( 57. ADDRESS_GRPOL )
          <ls_esf>-address_grpol = COND #( WHEN ls_zdeliv-zvstel2txt IS NOT INITIAL
                                           THEN ls_zdeliv-zvstel2txt
                                           ELSE <ls_esf>-addres_pokup ).
        ENDIF.                                                              "}#4
      ENDIF.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60-65.
    IF ls_zdeliv IS NOT INITIAL.
      "<ls_esf>-id_vid_doc = '608'.                                            "{ change DHVK930819
      <ls_esf>-id_vid_doc = ls_zdeliv-zvddc.
      SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
        INTO <ls_esf>-nm_vid_doc
        WHERE id_vid_doc = <ls_esf>-id_vid_doc.
      <ls_esf>-dt_doc = ls_zdeliv-wadat_ist.                                      " change DHVK930819}
      IF ls_zdeliv-zkdf IS NOT INITIAL.                     " DHVK950029
        <ls_esf>-code_tp_blank = ls_zdeliv-zkdf.
      ELSE.
        <ls_esf>-code_tp_blank = ''.
      ENDIF.
      <ls_esf>-ser_tp_blank = ls_zdeliv-zser.
      <ls_esf>-n_tp_blank   = ls_zdeliv-znum_etsd.
    ELSE.
      <ls_esf>-dt_doc     = <ls_fi_data>-bldat.
      <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
    ENDIF.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      IF     iv_id_type_esf  = gc_esf_original_type
         AND ls_zdeliv      IS NOT INITIAL.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    SORT gt_okei_tab BY msehi.
    DATA(lt_vbrp) = read_vbrp_all( ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      IF <ls_fi_data>-vbeln IS NOT INITIAL.
        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).

        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf_match>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.

          " код товара
          READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
               WITH KEY zeile = <ls_vbrp>-posnr+2(4)
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-code_tov_ved = <ls_cust_goods>-goods_tnvedcode.
            IF <ls_esf_roster>-code_tov_ved IN lcl_report=>gr_strat_code.              "{DHVK934319
              <ls_esf>-pr_sdper_post = abap_true.                                      "}DHVK934319
            ENDIF.
          ENDIF.

          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.

          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.

          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.

          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = 0.
          <ls_esf_match>-sum_excise = 0.
          <ls_esf>-sum_excise = 0.
          " ставка НДС
          <ls_esf_roster>-st_nds    = 0.
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = 'ZERO'.
          " сумма НДС
          <ls_esf_roster>-nds       = 0.
          <ls_esf_match>-sum_nds = 0.
          <ls_esf>-sum_nds = 0.
          " сумма с НДС
          <ls_esf_roster>-snds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.
          <ls_esf_roster>-cena_tov      = 0.         " DHVK930820

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova

          IF <ls_esf>-pr_vzml_post = abap_true OR <ls_esf>-pr_sdper_post = abap_true. " V.Matsygud 2020 20 08 Дополнение #8000000699
            <ls_esf_roster>-dop_dan = 'ANALYZED_DEAL'.
          ENDIF.

        ENDLOOP.
      ELSE.
        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
      ENDIF.
    ENDLOOP.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_fi_data>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_36.
    DATA lv_n_esf   TYPE zfi_esf-n_esf.
    DATA lv_cnt     TYPE i.
    DATA lv_partner TYPE but000-partner.
    DATA lv_taxnum  TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt     TYPE bp3010-frt.
    DATA lv_name    TYPE thead-tdname.
    DATA lv_text    TYPE string.
    DATA lv_nnp     TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.

    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_36.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-budat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 19. PR_RESOFZ_POST
    SELECT SINGLE partner FROM bp3010
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_partner_tmp)
      WHERE partner  = @<ls_fi_data>-lifnr
        AND grp_typ  = 902
        AND grp     IN ( '001', '002' ).
    IF sy-subrc = 0.
      <ls_esf>-pr_resofz_post = abap_true.
    ENDIF.

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

      " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
      get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

      " 23.УНП( 50. COUNTRYCODE_GROTP )
      get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unn_grotp = lv_taxnum.

      " 24.Наименование( 52. NM_GROTP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_grotp      = lv_text.

      " 25.Адрес отправки( 56. NM_GRPOL )
      <ls_esf>-address_grotp = <ls_esf>-addres_post.

      " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

      " 27.УНП Грузополучателя( 55. UNN_GRPOL )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unn_grpol     = lv_taxnum.

      " 28.Наименование Грузополучателя( 56. NM_GRPOL )
      <ls_esf>-nm_grpol      = <ls_esf>-nm_pokup.

      " 29.Адрес отправки( 57. ADDRESS_GRPOL )
      <ls_esf>-address_grpol = <ls_esf>-addres_pokup.
    ENDIF.

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
      lv_nnp = lv_nnp + 1.

      " признак
      <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
      " номер
      <ls_esf_roster>-n_esf  = <ls_esf_match>-n_esf.
      " позиция
      <ls_esf_roster>-nnp    = lv_nnp.
      " наименование ОС
      SELECT SINGLE zafull~txtf1,
                    zafull~txtf2
        INTO @DATA(ls_txt)
        FROM zafull
               LEFT JOIN
                 bseg ON  zafull~bukrs = bseg~bukrs
                      AND zafull~anln1 = bseg~anln1
                      AND zafull~anln2 = bseg~anln2
        WHERE bseg~bukrs  = @<ls_fi_data_2>-bukrs
          AND bseg~belnr  = @<ls_fi_data_2>-belnr
          AND bseg~gjahr  = @<ls_fi_data_2>-gjahr
          AND bseg~anln1 IS NOT NULL.

      IF ls_txt-txtf2 IS INITIAL.
        <ls_esf_roster>-nm_tov = ls_txt-txtf1.
      ELSE.
        <ls_esf_roster>-nm_tov = ls_txt-txtf1 && ls_txt-txtf2.
      ENDIF.

      " ЕИ (по умолч. ШТ)
      <ls_esf_roster>-ed_izm  = '796'.
      <ls_esf_roster>-meins   = 'ST'.
      " количество
      <ls_esf_roster>-kol_tov = 1.
      " цена(тариф)
      TRY.
          <ls_esf_roster>-cena_tov = <ls_fi_data_2>-total_w_vat.
        CATCH cx_sy_zerodivide.
          <ls_esf_roster>-cena_tov = 0.
      ENDTRY.
      " без НДС
      <ls_esf_roster>-nonds = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_nonds = <ls_esf_roster>-nonds.
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
      " акциз
      <ls_esf_roster>-excise = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.
      " ставка НДС
      <ls_esf_roster>-st_nds    = 0.
      " ставка ндс/справочник
      <ls_esf_roster>-id_tp_nds = 'NO_VAT'.
      " сумма НДС
      <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nds = <ls_esf_roster>-nds.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
      " сумма с НДС
      <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_snds = <ls_esf_roster>-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

      IF <ls_fi_data_2>-waers IS NOT INITIAL.
        <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
      ELSE.
        SELECT SINGLE h_waers INTO <ls_esf_roster>-waers
          FROM bseg
          WHERE bseg~bukrs  = <ls_fi_data_2>-bukrs
            AND bseg~belnr  = <ls_fi_data_2>-belnr
            AND bseg~gjahr  = <ls_fi_data_2>-gjahr
            AND bseg~anln1 IS NOT NULL.
      ENDIF.

      " доп. данные позиции
* --> AK_BUTVILOVS #8000000699, zfi_reginv Дополнительные данные
*      <ls_esf_roster>-dop_dan = 'OUTSIDE_RB'.
      IF <ls_esf>-pr_vzml_post = abap_true.
        <ls_esf_roster>-dop_dan = 'OUTSIDE_RB; ANALYZED_DEAL'.
      ELSE.
        <ls_esf_roster>-dop_dan = 'OUTSIDE_RB'.
      ENDIF.
      " <-- AK_BUTVILOVS #8000000699
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_37.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    UNASSIGN <ls_fi_data>.
    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_37.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-bldat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 18 PR_VZML_POST
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                  CHANGING  ev_frt     = lv_frt ).
      <ls_esf>-code_pokup_fil = lv_frt.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 612.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC
    <ls_esf>-dt_doc     = <ls_fi_data>-bldat.

    " 65. N_TP_BLANK
    <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    SORT gt_okei_tab BY msehi.
    DATA(lt_vbrp) = read_vbrp_all( ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      IF <ls_fi_data_2>-vbeln IS NOT INITIAL.
        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).
        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.

          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.
          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = 0.
          <ls_esf_match>-sum_excise = 0.
          <ls_esf>-sum_excise = 0.
          " ставка НДС
          <ls_esf_roster>-st_nds    = 0.
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = 'NO_VAT'.
          " сумма НДС
          <ls_esf_roster>-nds       = 0.
          <ls_esf_match>-sum_nds = 0.
          <ls_esf>-sum_nds = 0.
          " сумма с НДС
          <ls_esf_roster>-snds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

* --> AK_BUTVILOVS #8000000699, zfi_reginv Дополнительные данные
*      <ls_esf_roster>-dop_dan = 'VAT_EXEMPTION'.
          IF <ls_esf>-pr_vzml_post = abap_true.
            <ls_esf_roster>-dop_dan = 'VAT_EXEMPTION; ANALYZED_DEAL'.
          ELSE.
            <ls_esf_roster>-dop_dan = 'VAT_EXEMPTION'.
          ENDIF.
          " <-- AK_BUTVILOVS #8000000699

          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova
        ENDLOOP.
      ELSE.
        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
      ENDIF.
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_38.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    UNASSIGN <ls_fi_data>.
    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_38.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    CALL FUNCTION '/CPD/DATE_GET_MONTH_LASTDAY'
      EXPORTING i_date = <ls_fi_data>-budat
      IMPORTING e_date = <ls_esf>-dt_op_esf.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post    = 'SELLER'.

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.
    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
      lv_nnp = lv_nnp + 1.

      " признак
      <ls_esf_roster>-pr_esf   = <ls_esf>-pr_esf.
      " номер
      <ls_esf_roster>-n_esf    = <ls_esf>-n_esf.
      " позиция
      <ls_esf_roster>-nnp      = lv_nnp.
      " наименование
      <ls_esf_roster>-nm_tov   = 'Услуги общепита'(t01).

      <ls_esf_roster>-ed_izm   = '796'.
      <ls_esf_roster>-meins    = 'ST'.
      " количество
      <ls_esf_roster>-kol_tov  = 1.
      " цена(тариф)
      <ls_esf_roster>-cena_tov = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
      " без НДС
      <ls_esf_roster>-nonds    = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
      " акциз
      <ls_esf_roster>-excise = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.
      " ставка НДС
      <ls_esf_roster>-st_nds    = 0.
      " ставка ндс/справочник
      <ls_esf_roster>-id_tp_nds = 'CALCULATED'.
      " сумма НДС
      <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nds = <ls_esf_roster>-nds.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
      " сумма с НДС
      <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_snds = <ls_esf_roster>-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

      <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_38_1.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    UNASSIGN <ls_fi_data>.
    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_38_1.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-bldat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 18 PR_VZML_POST
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

      " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
      get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

      " 23.УНП( 50. COUNTRYCODE_GROTP )
      get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unn_grotp = lv_taxnum.

      " 24.Наименование( 52. NM_GROTP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_grotp = lv_text.

      " 25.Адрес отправки( 56. NM_GRPOL )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-address_grotp = lv_text.

      " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

      " 27.УНП( 55. UNN_GRPOL )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unn_grpol = lv_taxnum.

      " 28.Наименование( 56. NM_GRPOL )
      <ls_esf>-nm_grpol  = <ls_esf>-nm_pokup.

      " 29.Адрес отправки( 57. ADDRESS_GRPOL )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-address_grpol = lv_text.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 603.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC
    <ls_esf>-dt_doc        = <ls_fi_data>-bldat.

    " 64. CODE_TP_BLANK
    <ls_esf>-code_tp_blank = '402961'.

    " 65. N_TP_BLANK
    <ls_esf>-n_tp_blank    = <ls_fi_data>-xblnr.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
      lv_nnp = lv_nnp + 1.

      " признак
      <ls_esf_roster>-pr_esf        = <ls_esf>-pr_esf.
      " номер
      <ls_esf_roster>-n_esf         = <ls_esf>-n_esf.
      " позиция
      <ls_esf_roster>-nnp           = lv_nnp.
      " наименование
      <ls_esf_roster>-nm_tov        = 'Питание'(t02).
      " Код видов деятельности (ОКЭД)
      <ls_esf_roster>-code_tov_oced = '56290'.
      " ЕИ
      <ls_esf_roster>-ed_izm        = '796'.
      <ls_esf_roster>-meins         = 'ST'.
      " количество
      <ls_esf_roster>-kol_tov       = 1.
      " цена(тариф)
      <ls_esf_roster>-cena_tov      = <ls_fi_data_2>-total_w_vat.
      " без НДС
      <ls_esf_roster>-nonds         = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_nonds = <ls_esf_roster>-nonds.
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
      " акциз
      <ls_esf_roster>-excise = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.
      " ставка НДС
      <ls_esf_roster>-st_nds    = 0.
      " ставка ндс/справочник
      <ls_esf_roster>-id_tp_nds = 'CALCULATED'.
      " сумма НДС
      <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nds = <ls_esf_roster>-nds.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
      " сумма с НДС
      <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_snds = <ls_esf_roster>-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

      <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_39.
    TYPES:
      BEGIN OF lty_s_zusl_key,
        vbeln TYPE vbrk-vbeln,
        auart TYPE vbak-auart,
      END OF lty_s_zusl_key.

    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lt_zusl_key      TYPE SORTED TABLE OF lty_s_zusl_key WITH NON-UNIQUE KEY vbeln.
    DATA ls_roster        TYPE zfi_esf_roster.
    DATA lv_waers         TYPE t001-waers.
    DATA lv_mwsbk         TYPE vbrk-mwsbk.
    DATA lv_mwskz         TYPE bseg-mwskz.
    DATA lt_nds           TYPE STANDARD TABLE OF rtax1u15.
    DATA lt_roster        TYPE TABLE OF zfi_esf_roster.

    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_39.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    CALL FUNCTION '/CPD/DATE_GET_MONTH_LASTDAY'
      EXPORTING i_date = <ls_fi_data>-budat
      IMPORTING e_date = <ls_esf>-dt_op_esf.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post    = 'SELLER'.

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        lv_question_text = 'Код страны поставщика'.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.
    ENDIF.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_tmp>) WHERE chk_box = abap_true.
      READ TABLE lt_zusl_key TRANSPORTING NO FIELDS
           WITH KEY vbeln = <ls_fi_data_tmp>-vbeln
           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT <ls_fi_data_tmp>-vbeln INTO lt_zusl_key INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    IF lt_zusl_key IS NOT INITIAL.
      SELECT vbfa~vbeln
             vbak~auart
        FROM vbak
               JOIN
                 vbfa ON vbak~vbeln = vbfa~vbelv
        INTO TABLE lt_zusl_key
        FOR ALL ENTRIES IN lt_zusl_key
        WHERE vbfa~vbeln   = lt_zusl_key-vbeln
          AND vbfa~vbtyp_v = 'C'.
    ENDIF.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data_tmp> WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_tmp>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_tmp>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_tmp>-gjahr.

      " roster
      " признак
      ls_roster-pr_esf = <ls_esf>-pr_esf.
      " номер
      ls_roster-n_esf  = <ls_esf>-n_esf.

      CLEAR: lv_waers,
             lv_mwsbk.

      " наименование
      READ TABLE lt_zusl_key ASSIGNING FIELD-SYMBOL(<ls_zusl_key>) WITH KEY vbeln = <ls_fi_data_tmp>-vbeln
           BINARY SEARCH.
      IF sy-subrc = 0.
        ls_roster-nm_tov = COND #( " WHEN <ls_zusl_key>-auart = 'ZUSL'
                                    WHEN <ls_zusl_key>-auart IN gt_auart_serv
                                    THEN 'Реализация услуг физическим лицам'(t03)
                                    ELSE 'Реализация материалов физическим лицам'(t04) ).
        " 8000000248 ставку НДС считывать из документа фактуры.
        SELECT SINGLE waerk INTO lv_waers
          FROM vbrk
          WHERE vbeln = <ls_zusl_key>-vbeln.

        SELECT SINGLE mwsbk INTO lv_mwsbk
          FROM vbrk
          WHERE vbeln = <ls_zusl_key>-vbeln.
        " 8000000248
      ELSE.
        ls_roster-nm_tov = 'Реализация материалов физическим лицам'(t04).
      ENDIF.

      " без НДС
      ls_roster-nonds = <ls_fi_data_tmp>-total_w_vat - <ls_fi_data_tmp>-total_vat.
      <ls_esf_match>-sum_nonds = ls_roster-nonds.
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + ls_roster-nonds.
      " акциз
      ls_roster-excise = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.

      " ставка НДС
      " 8000000248 ставку НДС считывать из документа фактуры. Если не найдена, то получать расчетным путем.
      CLEAR lv_mwskz.
      lv_mwskz = |{ <ls_fi_data_tmp>-mwskz ALPHA = IN }|.

      IF lv_waers IS INITIAL.
        IF <ls_fi_data_tmp>-waers IS NOT INITIAL.
          lv_waers = <ls_fi_data_tmp>-waers.
        ELSEIF <ls_fi_data>-waers IS NOT INITIAL.
          lv_waers = <ls_fi_data>-waers.
        ELSE.
          SELECT SINGLE waers INTO lv_waers
            FROM bkpf
            WHERE bukrs = <ls_fi_data>-bukrs
              AND belnr = <ls_fi_data>-belnr
              AND gjahr = <ls_fi_data>-gjahr.
        ENDIF.
      ENDIF.

      IF <ls_fi_data_tmp>-bukrs IS NOT INITIAL AND lv_mwskz IS NOT INITIAL AND lv_waers IS NOT INITIAL.
        CLEAR lt_nds. REFRESH lt_nds.
        CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT' " поиск ставки НДС по коду налога
          EXPORTING  i_bukrs           = <ls_fi_data_tmp>-bukrs
                     i_mwskz           = lv_mwskz
                     i_waers           = lv_waers
                     i_wrbtr           = lv_mwsbk
          TABLES     t_mwdat           = lt_nds
          EXCEPTIONS bukrs_not_found   = 1
                     country_not_found = 2
                     mwskz_not_defined = 3
                     mwskz_not_valid   = 4
                     ktosl_not_found   = 5
                     kalsm_not_found   = 6
                     parameter_error   = 7
                     knumh_not_found   = 8
                     kschl_not_found   = 9
                     unknown_error     = 10
                     account_not_found = 11
                     txjcd_not_valid   = 12
                     OTHERS            = 13.
        IF sy-subrc = 0 AND lt_nds IS NOT INITIAL.
          TRY.
              ls_roster-st_nds  = lt_nds[ 1 ]-msatz.
              ls_roster-dop_dan = ls_roster-st_nds.
            CATCH cx_sy_itab_line_not_found.
              CLEAR: ls_roster-st_nds,
                     ls_roster-dop_dan.
          ENDTRY.
        ELSE. " расчетным путем - как было раньше
          lv_cnt = <ls_fi_data_tmp>-total_vat / ( <ls_fi_data_tmp>-total_w_vat - <ls_fi_data_tmp>-total_vat ) * 100.
          ls_roster-dop_dan = lv_cnt.
          ls_roster-st_nds  = lv_cnt.
        ENDIF.
      ELSE. " расчетным путем - как было раньше
        lv_cnt = <ls_fi_data_tmp>-total_vat / ( <ls_fi_data_tmp>-total_w_vat - <ls_fi_data_tmp>-total_vat ) * 100.
        ls_roster-dop_dan = lv_cnt.
        ls_roster-st_nds  = lv_cnt.
      ENDIF.
      "
      " ставка ндс/справочник
      ls_roster-id_tp_nds = COND #( WHEN ls_roster-st_nds = 0 THEN 'NO_VAT' ELSE 'DECIMAL' ).
      " сумма НДС
      ls_roster-nds       = <ls_fi_data_tmp>-total_vat.
      <ls_esf_match>-sum_nds = ls_roster-nds.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + ls_roster-nds.
      " сумма с НДС
      ls_roster-snds = <ls_fi_data_tmp>-total_w_vat.
      <ls_esf_match>-sum_snds = ls_roster-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + ls_roster-snds.

      ls_roster-waers = <ls_fi_data>-waers.

      READ TABLE lt_roster ASSIGNING FIELD-SYMBOL(<ls_roster>)
           WITH KEY pr_esf        = ls_roster-pr_esf
                    n_esf         = ls_roster-n_esf
                    nnp           = ls_roster-nnp
                    nm_tov        = ls_roster-nm_tov
                    code_tov_ved  = ls_roster-code_tov_ved
                    code_tov_oced = ls_roster-code_tov_oced
                    meins         = ls_roster-meins
                    cena_tov      = ls_roster-cena_tov
                    st_nds        = ls_roster-st_nds
                    id_tp_nds     = ls_roster-id_tp_nds
                    dop_dan       = ls_roster-dop_dan
                    ed_izm        = ls_roster-ed_izm
                    waers         = ls_roster-waers
           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT ls_roster INTO lt_roster INDEX sy-tabix.
      ELSE.
        <ls_roster>-kol_tov = <ls_roster>-kol_tov + ls_roster-kol_tov.
        <ls_roster>-nonds   = <ls_roster>-nonds   + ls_roster-nonds.
        <ls_roster>-excise  = <ls_roster>-excise  + ls_roster-excise.
        <ls_roster>-nds     = <ls_roster>-nds     + ls_roster-nds.
        <ls_roster>-snds    = <ls_roster>-snds    + ls_roster-snds.
      ENDIF.
      CLEAR ls_roster.
    ENDLOOP.

    LOOP AT lt_roster ASSIGNING <ls_roster>.
      lv_nnp = lv_nnp + 1.
      <ls_roster>-nnp    = lv_nnp.
      <ls_roster>-st_nds = <ls_roster>-dop_dan.
      CLEAR <ls_roster>-dop_dan.
    ENDLOOP.
    APPEND LINES OF lt_roster TO gt_esf_roster.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_fi_data>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_40.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lt_ekbe          TYPE STANDARD TABLE OF gty_s_ekbe.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lt_esll          TYPE STANDARD TABLE OF gty_s_esll.
    DATA lt_mat_text      TYPE ztb_mat_text.
    DATA lt_roster        TYPE TABLE OF zfi_esf_roster.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.
      lv_cnt = lv_cnt + 1.
    ENDLOOP.

    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data>
                   IMPORTING ev_type    = DATA(lv_type)
                             et_ekbe    = lt_ekbe ).

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_40.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-budat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'FOREIGN_ORGANIZATION'.

    " 19. PR_RESOFZ_POST
    SELECT SINGLE partner FROM bp3010
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_partner_tmp)
      WHERE partner  = @<ls_fi_data>-lifnr
        AND grp_typ  = 902
        AND grp     IN ( '001', '002' ).
    IF sy-subrc = 0.
      <ls_esf>-pr_resofz_post = abap_true.
    ENDIF.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 9.Поставщик( 25. NM_POST )
    lv_name = <ls_fi_data>-lifnr.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup    = 'FOREIGN_ORGANIZATION_BUYER'.

      " 40. PR_BIGCOMP_POKUP
      <ls_esf>-pr_bigcomp_pokup = abap_true.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      SELECT SINGLE frt FROM bp3010
        INTO <ls_esf>-code_pokup_fil
        WHERE partner = lv_partner
          AND grp_typ = 904.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup      = lv_text.

      " 49. DT_VVOZ_TOV_POKUP
      <ls_esf>-dt_vvoz_tov_pokup = <ls_fi_data>-budat.

      IF lv_type = 'E'. " услуги
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        " 23.УНП( 50. COUNTRYCODE_GROTP )
        " 24.Наименование( 52. NM_GROTP )
        " 25.Адрес отправки( 56. NM_GRPOL )

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = lv_partner
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = lv_partner
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = lv_taxnum.

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol  = <ls_esf>-nm_pokup.

        " 29.Адрес отправки( 57. ADDRESS_GRPOL )
        get_addr( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_text    = lv_text ).
        <ls_esf>-address_grpol = lv_text.
      ENDIF.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG ) / "30.Дата договора (контракта)( 59. DT_DOG )
    get_rcm_rmrp( EXPORTING is_fi_data = <ls_fi_data>
                  IMPORTING ev_ndoc    = DATA(lv_ndoc)
                            ev_dcdoc   = <ls_esf>-dt_dog ).
    <ls_esf>-n_dog = lv_ndoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 611.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC / "65. N_TP_BLANK
    SELECT SINGLE bldat xblnr FROM bkpf
      INTO ( <ls_esf>-dt_doc, <ls_esf>-n_tp_blank )
      WHERE bukrs = <ls_fi_data>-bukrs
        AND belnr = <ls_fi_data>-bktxt(10)
        AND gjahr = <ls_fi_data>-bktxt+10(4).
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data_2>
                     IMPORTING ev_type    = lv_type
                               et_ekbe    = lt_ekbe
                               et_esll    = lt_esll ).
      IF lv_type IS INITIAL.
        get_esll_data( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING et_esll    = lt_esll ).
        lv_type = 'D'. " услуги
      ENDIF.

      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " ЕИ
      IF lv_type = 'E'. " ТМЦ
        SELECT DISTINCT rseg~belnr,
                        rseg~buzei,
                        rseg~bstme,
                        j_3rj_uom_conv~okei
          FROM rseg
                 JOIN
                   t006a ON rseg~bstme = t006a~msehi
                     JOIN
                       j_3rj_uom_conv ON j_3rj_uom_conv~uom = t006a~msehi
          INTO TABLE @DATA(lt_rseg)
          WHERE rseg~belnr = @<ls_fi_data_2>-mblnr
            AND rseg~gjahr = @<ls_fi_data_2>-mjahr.
        SORT lt_rseg BY buzei
                        belnr.
      ENDIF.

      IF lt_ekbe IS NOT INITIAL.
        IF lv_type = 'E'. " ТМЦ
          LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_dat>).
            IF NOT line_exists( lt_mat_text[ matnr = <ls_dat>-matnr
                                             charg = <ls_dat>-bwtar ] ).
              INSERT VALUE #( matnr = <ls_dat>-matnr
                              charg = <ls_dat>-bwtar )
                     INTO TABLE lt_mat_text.
            ENDIF.
          ENDLOOP.
          " lt_mat_text = VALUE #( FOR ls_ekbe IN lt_ekbe ( matnr = ls_ekbe-matnr charg = ls_ekbe-bwtar ) ).

          " SORT lt_mat_text BY matnr charg.
          " DELETE ADJACENT DUPLICATES FROM lt_mat_text COMPARING ALL FIELDS.
          zcl_text_for_material=>get_text_mat_v4( EXPORTING it_table = lt_mat_text
                                                  CHANGING  ct_table = lt_mat_text ).
          " SORT lt_mat_text BY matnr charg.

          LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_ekbe>).
            READ TABLE lt_mat_text ASSIGNING FIELD-SYMBOL(<ls_mat_text>)
                 WITH KEY matnr = <ls_ekbe>-matnr
                          charg = <ls_ekbe>-bwtar
                 BINARY SEARCH.
            IF sy-subrc = 0.
              <ls_ekbe>-maktx = <ls_mat_text>-text.
            ENDIF.
          ENDLOOP.
        ELSEIF lv_type = 'D'. " Услуги
          LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
            TRY.
                <ls_ekbe>-maktx = lt_esll[ sy-tabix ]-ktext1.
              CATCH cx_sy_itab_line_not_found.
            ENDTRY.
          ENDLOOP.
        ENDIF.

      ELSE.
        lt_ekbe = VALUE #( FOR ls_esll IN lt_esll
                           ( maktx = ls_esll-ktext1 ) ).
      ENDIF.

      LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
        " roster
        APPEND INITIAL LINE TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).

        lv_nnp = lv_nnp + 1.

        " признак
        <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
        " номер
        <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        <ls_esf_roster>-nm_tov = <ls_ekbe>-maktx.
        " ЕИ
        READ TABLE lt_rseg ASSIGNING FIELD-SYMBOL(<ls_rseg>)
             WITH KEY buzei = <ls_ekbe>-buzei
             BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_esf_roster>-ed_izm = <ls_rseg>-okei.
          <ls_esf_roster>-meins  = <ls_rseg>-bstme.
        ENDIF.
        " количество
        IF lv_type = 'E'.
          <ls_esf_roster>-kol_tov = <ls_ekbe>-bpmng.
        ENDIF.

        " акциз
        <ls_esf_roster>-excise = 0.
        <ls_esf_match>-sum_excise = 0.
        <ls_esf>-sum_excise = 0.
        " ставка НДС
        <ls_esf_roster>-st_nds    = 20.
        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'DECIMAL'.

        <ls_esf_roster>-waers     = <ls_fi_data_2>-waers.
      ENDLOOP.

      ASSIGN lt_roster[ 1 ] TO FIELD-SYMBOL(<ls_esf_roster_tmp>).
      IF sy-subrc = 0.
        " без НДС
        <ls_esf_roster_tmp>-nonds = <ls_esf_roster_tmp>-nonds + <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_fi_data_2>-total_w_vat.
        " сумма НДС
        <ls_esf_roster_tmp>-nds = <ls_esf_roster_tmp>-nds + <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        " сумма с НДС
        <ls_esf_roster_tmp>-snds = <ls_esf_roster_tmp>-snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
      ENDIF.
    ENDLOOP.

    APPEND LINES OF lt_roster TO gt_esf_roster.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_fi_data>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_42.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_hwbas_ost     TYPE bset-hwbas.
    DATA lv_hwste_ost     TYPE bset-hwste.
    DATA lv_total_vat     TYPE zfi_esf-sum_nds.
    DATA lv_total_w_vat   TYPE zfi_esf-sum_nonds.
    DATA lt_ekbe          TYPE TABLE OF gty_s_ekbe.
    DATA lt_mat_text      TYPE ztb_mat_text.
    DATA lv_hwbas_sum     TYPE bset-hwbas.
    DATA lv_hwste_sum     TYPE bset-hwste.
    DATA lt_roster        TYPE TABLE OF zfi_esf_roster.
    DATA lv_nnp           TYPE i.
    DATA lt_mwdat         TYPE TABLE OF rtax1u15.

    FIELD-SYMBOLS <ls_fi_data_2> TYPE gty_s_fi_data.
    FIELD-SYMBOLS <ls_ekbe>      TYPE gty_s_ekbe.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_42.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.  " 8000000501
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr. " 8000000501
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    CALL FUNCTION '/CPD/DATE_GET_MONTH_LASTDAY'
      EXPORTING i_date = <ls_fi_data>-budat
      IMPORTING e_date = <ls_esf>-dt_op_esf.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'FOREIGN_ORGANIZATION'.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 9.Поставщик( 25. NM_POST )
    lv_name = <ls_fi_data>-lifnr.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup    = 'CUSTOMER'.

      " 40. PR_BIGCOMP_POKUP
      <ls_esf>-pr_bigcomp_pokup = abap_true.

      " 15.1.Взаимозависимое лицо
      get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  cv_vzml    = <ls_esf>-pr_vzml_pokup ). " V.Matsygud 09.10.2020

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      SELECT SINGLE frt FROM bp3010
        INTO <ls_esf>-code_pokup_fil
        WHERE partner = lv_partner
          AND grp_typ = 904.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup      = lv_text.

      " 49. DT_VVOZ_TOV_POKUP
      <ls_esf>-dt_vvoz_tov_pokup = <ls_fi_data>-budat.

      " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
      " 23.УНП( 50. COUNTRYCODE_GROTP )
      " 24.Наименование( 52. NM_GROTP )
      " 25.Адрес отправки( 56. NM_GRPOL )

      " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

      " 27.УНП( 55. UNN_GRPOL )
      get_taxnum( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unn_grpol = lv_taxnum.

      " 28.Наименование( 56. NM_GRPOL )
      <ls_esf>-nm_grpol  = <ls_esf>-nm_pokup.

      " 29.Адрес отправки( 57. ADDRESS_GRPOL )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-address_grpol = lv_text.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG ) / "30.Дата договора (контракта)( 59. DT_DOG )
    get_rcm_rmrp( EXPORTING is_fi_data = <ls_fi_data>
                  IMPORTING ev_ndoc    = DATA(lv_ndoc)
                            ev_dcdoc   = <ls_esf>-dt_dog ).
    <ls_esf>-n_dog = lv_ndoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 608.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC / "65. N_TP_BLANK
    SELECT SINGLE bldat xblnr FROM bkpf
      INTO ( <ls_esf>-dt_doc, <ls_esf>-n_tp_blank )
      WHERE bukrs = <ls_fi_data>-bukrs
        AND belnr = <ls_fi_data>-bktxt(10)
        AND gjahr = <ls_fi_data>-bktxt+10(4).
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    CLEAR: lv_hwbas_ost,
           lv_hwste_ost.
    CLEAR: lv_total_vat,
           lv_total_w_vat.

    LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data_2> WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " данные из EKBE
      get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data_2>
                     IMPORTING et_ekbe    = lt_ekbe ).

      IF lt_ekbe IS NOT INITIAL.
        " 47. N_VVOZ_TOVN_POKUP / 48. DT_VVOZ_TOVN_POKUP
        ASSIGN lt_ekbe[ 1 ] TO <ls_ekbe>.
        DATA(lv_awkey) = <ls_ekbe>-belnr && <ls_ekbe>-gjahr.
        SELECT SINGLE number_z date_state
          FROM bkpf
                 JOIN
                   zfi_vat_applicat AS z ON  z~bukrs = bkpf~bukrs
                                         AND z~belnr = bkpf~belnr
                                         AND z~gjahr = bkpf~gjahr
          INTO ( <ls_esf>-n_vvoz_tovn_pokup, <ls_esf>-dt_vvoz_tovn_pokup )
          WHERE bkpf~awtyp = 'MKPF'
            AND bkpf~awkey = lv_awkey.
        " ЕИ
      ENDIF.

      SELECT DISTINCT rseg~belnr,
                      rseg~buzei,
                      rseg~bstme,
                      j_3rj_uom_conv~okei
        FROM rseg
               JOIN
                 t006a ON rseg~bstme = t006a~msehi
                   JOIN
                     j_3rj_uom_conv ON j_3rj_uom_conv~uom = t006a~msehi
        INTO TABLE @DATA(lt_rseg)
        WHERE rseg~belnr = @<ls_fi_data_2>-mblnr
          AND rseg~gjahr = @<ls_fi_data_2>-mjahr.

      SORT lt_rseg BY buzei
                      belnr.

      " наименование материала
      LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_data>).
        IF NOT line_exists( lt_mat_text[ matnr = <ls_data>-matnr
                                         charg = <ls_data>-bwtar ] ).
          INSERT VALUE #( matnr = <ls_data>-matnr
                          charg = <ls_data>-bwtar )
                 INTO TABLE lt_mat_text.
        ENDIF.
      ENDLOOP.

      " lt_mat_text = VALUE #( FOR ls_ekbe IN lt_ekbe ( matnr = ls_ekbe-matnr charg = ls_ekbe-bwtar ) ).
      " SORT lt_mat_text BY matnr charg.
      " DELETE ADJACENT DUPLICATES FROM lt_mat_text COMPARING ALL FIELDS.
      zcl_text_for_material=>get_text_mat_v4( EXPORTING it_table = lt_mat_text
                                              CHANGING  ct_table = lt_mat_text ).

      " Ставка НДС
      SELECT SINGLE mwskz FROM bset
        INTO @DATA(lv_mwskz)
        WHERE bukrs    = @<ls_fi_data_2>-bukrs
          AND belnr    = @<ls_fi_data_2>-belnr
          AND gjahr    = @<ls_fi_data_2>-gjahr
          AND hkont LIKE '18%'.

      " 8000000741 Необходимо общие суммы без НДС и сумму НДС брать из документов 88*.
      IF <ls_fi_data_2>-id_vid_iop = gc_42 AND <ls_fi_data_2>-belnr(2) = '88'.
        CLEAR: lv_hwbas_sum,
               lv_hwste_sum.
        SELECT SINGLE hwbas hwste FROM bset
          INTO ( lv_hwbas_sum, lv_hwste_sum )
          WHERE bukrs    = <ls_fi_data_2>-bukrs
            AND belnr    = <ls_fi_data_2>-belnr
            AND gjahr    = <ls_fi_data_2>-gjahr
            AND hkont LIKE '18%'.

        lv_hwbas_ost = lv_hwbas_sum.
        lv_hwste_ost = lv_hwste_sum.
      ENDIF.

      LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
        IF <ls_ekbe>-bewtp = 'Q' OR <ls_ekbe>-bewtp = 'N'.
          IF <ls_ekbe>-arewr IS NOT INITIAL.
            <ls_ekbe>-dmbtr = <ls_ekbe>-arewr.
          ENDIF.
        ENDIF.

        " roster
        APPEND INITIAL LINE TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).

        lv_nnp = lv_nnp + 1.

        " признак
        <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
        " номер
        <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        TRY.
            <ls_esf_roster>-nm_tov = lt_mat_text[ matnr = <ls_ekbe>-matnr
                                                  charg = <ls_ekbe>-bwtar ]-text.
          CATCH cx_sy_itab_line_not_found.
        ENDTRY.
        " код товара
        <ls_esf_roster>-code_tov_ved = <ls_ekbe>-tncode.
        " ЕИ
        READ TABLE lt_rseg ASSIGNING FIELD-SYMBOL(<ls_rseg>)
             WITH KEY buzei = <ls_ekbe>-buzei
             BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_esf_roster>-ed_izm = <ls_rseg>-okei.
          <ls_esf_roster>-meins  = <ls_rseg>-bstme.
        ENDIF.
        " количество
        <ls_esf_roster>-kol_tov = <ls_ekbe>-bpmng.
        " цена(тариф)
        TRY.
            <ls_esf_roster>-cena_tov = <ls_ekbe>-dmbtr / <ls_ekbe>-bpmng.
          CATCH cx_sy_zerodivide.
            <ls_esf_roster>-cena_tov = 0.
        ENDTRY.
*        " без НДС  V.Matsygud 14.10.2020 Закомментировал, код перенес ниже, после расчета сумм
*        <ls_esf_roster>-nonds = <ls_ekbe>-dmbtr.
*        <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
*        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
*        " акциз
*        <ls_esf_roster>-excise = 0.
*        <ls_esf_match>-sum_excise = 0.
*        <ls_esf>-sum_excise = 0.

        " Ставка НДС
        IF lv_mwskz IS NOT INITIAL.
          CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
            EXPORTING  i_bukrs           = <ls_fi_data_2>-bukrs
                       i_mwskz           = lv_mwskz
                       i_waers           = 'BYN'
                       i_wrbtr           = <ls_ekbe>-dmbtr
            TABLES     t_mwdat           = lt_mwdat
            EXCEPTIONS bukrs_not_found   = 1
                       country_not_found = 2
                       mwskz_not_defined = 3
                       mwskz_not_valid   = 4
                       ktosl_not_found   = 5
                       kalsm_not_found   = 6
                       parameter_error   = 7
                       knumh_not_found   = 8
                       kschl_not_found   = 9
                       unknown_error     = 10
                       account_not_found = 11
                       txjcd_not_valid   = 12
                       OTHERS            = 13.
          TRY.
              <ls_esf_roster>-st_nds = lt_mwdat[ 1 ]-msatz.
            CATCH cx_sy_itab_line_not_found.
              CLEAR <ls_esf_roster>-st_nds.
          ENDTRY.
        ENDIF.

        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'DECIMAL'.

        " сумма НДС
        " 8000000741 Необходимо общие суммы без НДС и сумму НДС брать из документов 88* и расчитывать позиционно из документа 51*. Остаток добавлять на последнюю позицию.
        " Иначе - расчетным путем, как раньше.
        IF <ls_fi_data_2>-id_vid_iop = gc_42 AND <ls_fi_data_2>-belnr(2) = '88'.
          IF sy-subrc = 0 AND lv_hwbas_sum IS NOT INITIAL AND lv_hwste_sum IS NOT INITIAL.

            TRY.
                <ls_esf_roster>-nds = lt_mwdat[ 1 ]-wmwst.
              CATCH cx_sy_itab_line_not_found.
                <ls_esf_roster>-nds = 0.
            ENDTRY.
            lv_hwbas_ost = lv_hwbas_ost - <ls_esf_roster>-nonds.
            lv_hwste_ost = lv_hwste_ost - <ls_esf_roster>-nds.

            AT LAST.
              IF lv_hwste_ost IS NOT INITIAL.
                <ls_esf_roster>-nds = <ls_esf_roster>-nds + lv_hwste_ost.
              ENDIF.

              IF lv_hwbas_ost IS NOT INITIAL.
                <ls_esf_roster>-nonds = <ls_esf_roster>-nonds + lv_hwbas_ost.
              ENDIF.
            ENDAT.

          ELSE.
            TRY.
                <ls_esf_roster>-nds = lt_mwdat[ 1 ]-wmwst.
              CATCH cx_sy_itab_line_not_found.
                <ls_esf_roster>-nds = 0.
            ENDTRY.
          ENDIF.
        ELSE.
          TRY.
              <ls_esf_roster>-nds = lt_mwdat[ 1 ]-wmwst.
            CATCH cx_sy_itab_line_not_found.
              <ls_esf_roster>-nds = 0.
          ENDTRY.
        ENDIF.

        " без НДС
        <ls_esf_roster>-nonds = <ls_ekbe>-dmbtr.
        <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
        " акциз
        <ls_esf_roster>-excise = 0.
        <ls_esf_match>-sum_excise = 0.
        <ls_esf>-sum_excise = 0.

        <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.

        " сумма с НДС                                                                              "{ 12/06/2023 G.DOMANIKOVA #29181 Корректировка сумм с НДС в 6ом разделе, и XML
        IF <ls_fi_data_2>-id_vid_iop = gc_42.
          <ls_esf_roster>-snds = <ls_esf_roster>-nonds.
        ELSE.
          <ls_esf_roster>-snds = <ls_esf_roster>-nonds + <ls_esf_roster>-nds.
        ENDIF.                                                                                     "} 12/06/2023 G.DOMANIKOVA #29181 Корректировка сумм с НДС в 6ом разделе, и XML
        <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

        " ДопДанные
*       <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        IF <ls_esf>-pr_vzml_pokup = abap_true OR <ls_esf>-pr_sdper_post = abap_true. " V.Matsygud 2020 20 08 Дополнение #8000000699
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT; ANALYZED_DEAL'.
        ELSE.
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        ENDIF.

        <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
      ENDLOOP.

      CLEAR lv_mwskz.
      " сверка сумм BSET <-> 6 раздел
      lv_total_vat = lv_total_vat + <ls_fi_data_2>-total_vat.
      lv_total_w_vat = lv_total_w_vat + <ls_fi_data_2>-total_w_vat.
    ENDLOOP.

    IF    lv_total_vat <> <ls_esf>-sum_nds
       OR lv_total_w_vat                    <> <ls_esf>-sum_snds
       OR ( lv_total_w_vat - lv_total_vat ) <> <ls_esf>-sum_nonds.

      MESSAGE 'Суммы Раздела 6 не совпадают с суммами BSET'(m61) TYPE 'I'.
    ENDIF.

    APPEND LINES OF lt_roster TO gt_esf_roster.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_43.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_vyp_tov_pokup TYPE matdoc-zzgtd. " AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    DATA ls_fi_esf_ish    TYPE zfi_esf.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lt_ekbe          TYPE STANDARD TABLE OF gty_s_ekbe.
    DATA lt_mat_text      TYPE ztb_mat_text.
    DATA lt_roster        TYPE STANDARD TABLE OF zfi_esf_roster.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.
    DATA lv_sum_nonds     TYPE zfi_esf-sum_nonds. " ins 07.05.2024 V.Lipskij #38467
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA lv_total_wo_vat  TYPE zfi_esf-sum_nonds.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_43.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-budat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.

      " 6.Статус поставщика( 17. ID_STAT_POST )
      <ls_esf>-id_stat_post = 'FOREIGN_ORGANIZATION'.

      " --> AK_BUTVILOVS #8000000699, zfi_reginv Дополнительные данные
      " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
*      get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr CHANGING cv_vzml = <ls_esf>-pr_vzml_post ). " Для 43 вида проставляется 15.1
* <-- AK_BUTVILOVS #8000000699

      " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
      get_country( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

      " 8.УНП( 23. UNP_POST )
      get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_post = lv_taxnum.

      " 9.Поставщик( 25. NM_POST )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_post = lv_text.

      " 10.Юридический адрес( 26. ADDRES_POST )
      get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_post   = lv_text.

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 38. PR_RESOFZ_POKUP
      SELECT SINGLE partner FROM bp3010
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_partner_tmp)
        WHERE partner  = @<ls_fi_data>-lifnr
          AND grp_typ  = 902
          AND grp     IN ( '001', '002' ).
      IF sy-subrc = 0.
        <ls_esf>-pr_resofz_pokup = abap_true.
      ENDIF.

      " 40. PR_BIGCOMP_POKUP
      <ls_esf>-pr_bigcomp_pokup = abap_true.

      " 15.1.Взаимозависимое лицо
      get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  cv_vzml    = <ls_esf>-pr_vzml_pokup ).

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      SELECT SINGLE frt FROM bp3010
        INTO <ls_esf>-code_pokup_fil
        WHERE partner = lv_partner
          AND grp_typ = 904.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

      " 8000000077 N_VYP_TOV_POKUP - Регистрационный номер выпуска товаров
      "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      IF <ls_fi_data>-id_vid_iop = '43' AND <ls_fi_data>-bktxt(2) <> '51'.
        SELECT SINGLE zzgtd FROM matdoc
          WHERE mblnr = @<ls_fi_data>-bktxt(10)
            AND mjahr = @<ls_fi_data>-bktxt+10(4)
          INTO @lv_vyp_tov_pokup.
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      ELSE.
        SELECT SINGLE m~zzgtd
          FROM matdoc AS m
                 JOIN
                   bseg AS b ON  m~mblnr = b~fmxdocnr
                             AND m~mjahr = b~fmxyear
          WHERE b~fmxdocnr <> ' '
            AND b~fmxyear  <> '0000'
            AND b~belnr     = @<ls_fi_data>-bktxt(10)
            AND b~gjahr     = @<ls_fi_data>-bktxt+10(4)
            AND b~bukrs     = @<ls_fi_data>-bukrs
          INTO @lv_vyp_tov_pokup.
      ENDIF.

      " 46 N_VYP_TOV_POKUP
*      SELECT SINGLE zcs_cust_hcd~permission_num                                       AS n_vyp_tov_pokup,
*                    t005_dis~intcn3                                                   AS countrycode_grotp,
*                    zcs_cust_hcd~cor_unp                                              AS unn_grotp,
*                    concat( zcs_cust_hcd~cor_short_name,  zcs_cust_hcd~cor_org_name ) AS nm_grotp,
*                    zcs_cust_hcd~cor_address                                          AS address_grotp,
*                    t005_cus~intcn3                                                   AS countrycode_grpol,
*                    zcs_cust_hcd~cee_unp                                              AS unn_grpol,
*                    concat( zcs_cust_hcd~cee_short_name, zcs_cust_hcd~cee_org_name )  AS nm_grpol,
*                    zcs_cust_hcd~cee_address                                          AS address_grpol
*        FROM zcs_cust_hcd JOIN zcssvhd ON zcs_cust_hcd~rel_mblnr = zcssvhd~svhnum
*                          LEFT JOIN t005 AS t005_dis ON  t005_dis~land1 = zcs_cust_hcd~dis_country_code
*                          LEFT JOIN t005 AS t005_cus ON  t005_cus~land1 = zcs_cust_hcd~cus_country_code
*        WHERE zcssvhd~docnum = @<ls_fi_data>-mblnr
*          AND left( zcssvhd~docdate, 4 )  = @<ls_fi_data>-gjahr
*          AND zcssvhd~doctype = @gc_doctype_43                                      "ins #11
*        INTO @DATA(ls_cust_hcd).

      IF lv_vyp_tov_pokup IS NOT INITIAL.
        " Данные по грузоотправителю
        SELECT SINGLE zcs_cust_hcd~permission_num                                       AS n_vyp_tov_pokup,
                      t005_dis~intcn3                                                   AS countrycode_grotp,
                      zcs_cust_hcd~cor_unp                                              AS unn_grotp,
                      concat( zcs_cust_hcd~cor_short_name,  zcs_cust_hcd~cor_org_name ) AS nm_grotp,
                      zcs_cust_hcd~cor_address                                          AS address_grotp,
                      t005_cus~intcn3                                                   AS countrycode_grpol,
                      zcs_cust_hcd~cee_unp                                              AS unn_grpol,
                      concat( zcs_cust_hcd~cee_short_name, zcs_cust_hcd~cee_org_name )  AS nm_grpol,
                      zcs_cust_hcd~cee_address                                          AS address_grpol
          FROM zcs_cust_hcd
                 LEFT JOIN
                   t005 AS t005_dis ON t005_dis~land1 = zcs_cust_hcd~dis_country_code
                     LEFT JOIN
                       t005 AS t005_cus ON t005_cus~land1 = zcs_cust_hcd~cus_country_code
          WHERE zcs_cust_hcd~permission_num = @lv_vyp_tov_pokup
          INTO @DATA(ls_cust_hcd).
      ENDIF.
      " end 8000000077

      <ls_esf> = CORRESPONDING #( BASE ( <ls_esf> ) ls_cust_hcd ).

      " --> AK_BUTVILOVS #8000000523, ZFI_REGINV Код страны грузополучателя
      " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).
      " <-- AK_BUTVILOVS #8000000523
    ELSE.

      " для дополнительных ЭСЧФ со ссылкой данные подтягиваем из исходного ЭСЧФ (#8000000213)
      CLEAR ls_fi_esf_ish.

      SELECT SINGLE * FROM zfi_esf
        INTO ls_fi_esf_ish
        WHERE n_esf = <ls_fi_data>-n_esf_ish.

      <ls_esf>-id_stat_post      = ls_fi_esf_ish-id_stat_post. " 6. Статус поставщика( 17. ID_STAT_POST )
      <ls_esf>-pr_vzml_post      = ls_fi_esf_ish-pr_vzml_post. " 6.1 Взаимозависимое лицо
      <ls_esf>-pr_resofz_post    = ls_fi_esf_ish-pr_resofz_post. " 6.2 Сделка с резидентов оффшорной зоны
      <ls_esf>-pr_sdper_post     = ls_fi_esf_ish-pr_sdper_post.   " 6.3 Сделка с товарами по перечню РБ
      <ls_esf>-pr_bigcomp_post   = ls_fi_esf_ish-pr_bigcomp_post. " 6.4 Орг включенная в перечень крупн. плат.
      <ls_esf>-countrycode_post  = ls_fi_esf_ish-countrycode_post. " 7. Код страны поставщика( 22. COUNTRYCODE_POST )
      <ls_esf>-unp_post          = ls_fi_esf_ish-unp_post. " 8. УНП поставщика( 23. UNP_POST )
      <ls_esf>-code_post_fil     = ls_fi_esf_ish-code_post_fil. " 8.1 Код филиала (обособл. подразделения)
      <ls_esf>-nm_post           = ls_fi_esf_ish-nm_post. " 9. Наименование поставщика( 25. NM_POST )
      <ls_esf>-addres_post       = ls_fi_esf_ish-addres_post.  " 10.Юридический адрес поставщика ( 26. ADDRES_POST )
      <ls_esf>-n_vyp_tov_post    = ls_fi_esf_ish-n_vyp_tov_post.  " 13.Регистрационный номер выпуска товаров

      <ls_esf>-id_stat_pokup     = ls_fi_esf_ish-id_stat_pokup. " 15. Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-pr_vzml_pokup     = ls_fi_esf_ish-pr_vzml_pokup. " 15.1 Взаимозависимое лицо
      <ls_esf>-pr_resofz_pokup   = ls_fi_esf_ish-pr_resofz_pokup. " 15.2 Сделка с резидентов оффшорной зоны
      <ls_esf>-pr_sdper_pokup    = ls_fi_esf_ish-pr_sdper_pokup.   " 15.3 Сделка с товарами по перечню РБ
      <ls_esf>-pr_bigcomp_pokup  = ls_fi_esf_ish-pr_bigcomp_pokup. " 15.4 Орг включенная в перечень крупн. плат.
      <ls_esf>-countrycode_pokup = ls_fi_esf_ish-countrycode_pokup.  " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      <ls_esf>-unp_pokup         = ls_fi_esf_ish-unp_pokup. " 17.УНП покупателя( 42. UNP_POKUP )
      <ls_esf>-code_pokup_fil    = ls_fi_esf_ish-code_pokup_fil.  " 17.Код филиала( 43. CODE_POKUP_FIL )
      <ls_esf>-nm_pokup          = ls_fi_esf_ish-nm_pokup. " 18.Наименование( 44. NM_POKUP )
      <ls_esf>-addres_pokup      = ls_fi_esf_ish-addres_pokup.  " 19.Юридический адрес( 45. ADDRES_POKUP )
      <ls_esf>-n_vyp_tov_pokup   = ls_fi_esf_ish-n_vyp_tov_pokup.  " 20.Регистрационный номер выпуска товаров

      <ls_esf>-countrycode_grotp = ls_fi_esf_ish-countrycode_grotp.  " 22.Код страны грузоотправителя
      <ls_esf>-unn_grotp         = ls_fi_esf_ish-unn_grotp. " 23.УНП грузоотправителя
      <ls_esf>-nm_grotp          = ls_fi_esf_ish-nm_grotp. " 24.Наименование грузоотправителя
      <ls_esf>-address_grotp     = ls_fi_esf_ish-address_grotp.  " 25.Адрес отправки
      <ls_esf>-countrycode_grpol = ls_fi_esf_ish-countrycode_grpol.  " 26.Код страны грузополучателя
      <ls_esf>-unn_grpol         = ls_fi_esf_ish-unn_grpol. " 27.УНП грузополучателя
      <ls_esf>-nm_grpol          = ls_fi_esf_ish-nm_grpol. " 28.Наименование грузополучателя
      <ls_esf>-address_grpol     = ls_fi_esf_ish-address_grpol.  " 29.Адрес доставки
      "
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG ) / "30.Дата договора (контракта)( 59. DT_DOG )
    get_rcm_rmrp( EXPORTING is_fi_data = <ls_fi_data>
                  IMPORTING ev_ndoc    = DATA(lv_ndoc)
                            ev_dcdoc   = <ls_esf>-dt_dog ).
    <ls_esf>-n_dog = lv_ndoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 609.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC / "65. N_TP_BLANK
    "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    IF <ls_fi_data>-id_vid_iop = '43' AND <ls_fi_data>-bktxt(2) <> '51'.
      SELECT SINGLE bldat xblnr FROM bkpf
        INTO ( <ls_esf>-dt_doc, <ls_esf>-n_tp_blank )
        WHERE bukrs = <ls_fi_data>-bukrs
          AND belnr = <ls_fi_data>-xblnr(10)
          AND gjahr = <ls_fi_data>-xblnr+12(4).
      "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    ELSE.
      SELECT SINGLE bldat xblnr FROM bkpf
        INTO ( <ls_esf>-dt_doc, <ls_esf>-n_tp_blank )
        WHERE bukrs = <ls_fi_data>-bukrs
          AND belnr = <ls_fi_data>-bktxt(10)
          AND gjahr = <ls_fi_data>-bktxt+10(4).
    ENDIF.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " данные из EKBE
      get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data_2>
                     IMPORTING et_ekbe    = lt_ekbe ).

      " ЕИ
      SELECT DISTINCT rseg~belnr,
                      rseg~buzei,
                      rseg~bstme,
                      j_3rj_uom_conv~okei
        FROM rseg
               JOIN
                 t006a ON rseg~bstme = t006a~msehi
                   JOIN
                     j_3rj_uom_conv ON j_3rj_uom_conv~uom = t006a~msehi
        INTO TABLE @DATA(lt_rseg)
        WHERE rseg~belnr = @<ls_fi_data_2>-mblnr
          AND rseg~gjahr = @<ls_fi_data_2>-mjahr.
      SORT lt_rseg BY buzei
                      belnr.

      " наименование материала
      LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_ekbe>).
        IF NOT line_exists( lt_mat_text[ matnr = <ls_ekbe>-matnr
                                         charg = <ls_ekbe>-bwtar ] ).
          INSERT VALUE #( matnr = <ls_ekbe>-matnr
                          charg = <ls_ekbe>-bwtar )
                 INTO TABLE lt_mat_text.
        ENDIF.
      ENDLOOP.

      "  lt_mat_text = VALUE #( FOR ls_ekbe IN lt_ekbe ( matnr = ls_ekbe-matnr charg = ls_ekbe-bwtar ) ).
      " SORT lt_mat_text BY matnr charg.
      " DELETE ADJACENT DUPLICATES FROM lt_mat_text COMPARING ALL FIELDS.
      zcl_text_for_material=>get_text_mat_v4( EXPORTING it_table = lt_mat_text
                                              CHANGING  ct_table = lt_mat_text ).

      LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
        " roster
        APPEND INITIAL LINE TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).

        lv_nnp = lv_nnp + 1.

        " признак
        <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
        " номер
        <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        TRY.
            <ls_esf_roster>-nm_tov = lt_mat_text[ matnr = <ls_ekbe>-matnr
                                                  charg = <ls_ekbe>-bwtar ]-text.
          CATCH cx_sy_itab_line_not_found.
        ENDTRY.
        " код товара
        <ls_esf_roster>-code_tov_ved = <ls_ekbe>-tncode.
        " ЕИ
        READ TABLE lt_rseg ASSIGNING FIELD-SYMBOL(<ls_rseg>)
             WITH KEY buzei = <ls_ekbe>-buzei
             BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_esf_roster>-ed_izm = <ls_rseg>-okei.
          <ls_esf_roster>-meins  = <ls_rseg>-bstme.
        ENDIF.
        " количество
        <ls_esf_roster>-kol_tov = <ls_ekbe>-bpmng.
        " цена(тариф)
        "--> chg 15.04.2024 V.Lipskij #38467
        TRY.
            " {#2
            <ls_esf_roster>-cena_tov = <ls_ekbe>-dmbtr / <ls_ekbe>-bpmng.
          CATCH cx_sy_zerodivide.
            <ls_esf_roster>-cena_tov = 0.
        ENDTRY.
*        <ls_esf_roster>-cena_tov = 0.                                      "}#2
        " без НДС
        <ls_esf_roster>-nonds = <ls_ekbe>-dmbtr.
        lv_sum_nonds = lv_sum_nonds + <ls_esf_roster>-nonds.
*        <ls_esf_roster>-nonds = 0.                                         "#2
        "<-- chg 15.04.2024 V.Lipskij #38467
        " акциз
        <ls_esf_roster>-excise = 0.
        <ls_esf_match>-sum_excise = 0.
        <ls_esf>-sum_excise = 0.

        " Ставка НДС
        <ls_esf_roster>-st_nds    = 20.

        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'DECIMAL'.

        " сумма НДС
        <ls_esf_roster>-nds       = 0.

        " сумма с НДС
        <ls_esf_roster>-snds      = 0.

        " ДопДанные
*        <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        IF <ls_esf>-pr_vzml_pokup = abap_true. " V.Matsygud 2020 20 08 Дополнение #8000000699
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT; ANALYZED_DEAL'.
        ELSE.
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        ENDIF.

        <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
      ENDLOOP.

      " без НДС
      <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
*      <ls_esf>-sum_nonds = 0. "#13837-223 <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).     " del 07.05.2024 V.Lipskij #38467
      <ls_esf>-sum_nonds = lv_sum_nonds.                                                                                       " ins 07.05.2024 V.Lipskij #38467
      " акциз
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.

      " сумма НДС
      <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_fi_data_2>-total_vat.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.

      " сумма с НДС
      <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_fi_data_2>-total_w_vat.
      <ls_esf>-sum_snds = 0. " 13837-223 <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
      " сверка сумм BSET <-> 6 раздел
      lv_total_wo_vat = lv_total_wo_vat + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
    ENDLOOP.

    LOOP AT gt_fi_data_filtered ASSIGNING <ls_fi_data_2> WHERE chk_box = abap_true.
      ASSIGN lt_roster[ lines( lt_roster ) ] TO FIELD-SYMBOL(<ls_roster>).
      IF sy-subrc = 0.
        APPEND INITIAL LINE TO lt_roster ASSIGNING <ls_esf_roster>.
        MOVE-CORRESPONDING <ls_roster> TO <ls_esf_roster>.

        lv_nnp = lv_nnp + 1.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        <ls_esf_roster>-nm_tov = 'Сумма НДС, уплаченная при ввозе'. " AK_RUBAHOV #27352 ZFI_REGINV Некорректно заполняется поле в товарной части
        " ЕИ
        CLEAR: <ls_esf_roster>-ed_izm,
               <ls_esf_roster>-meins.
        " количество
        CLEAR <ls_esf_roster>-kol_tov.
        " цена(тариф)
        CLEAR <ls_esf_roster>-cena_tov.
        " без НДС
        CLEAR <ls_esf_roster>-nonds.
        " акциз
        CLEAR <ls_esf_roster>-excise.
        " Ставка НДС
        <ls_esf_roster>-st_nds    = 20.
        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'DECIMAL'.
        " сумма НДС
        <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
        " сумма с НДС
        CLEAR <ls_esf_roster>-snds.
        " ДопДанные
*        <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        IF <ls_esf>-pr_vzml_pokup = abap_true. " V.Matsygud 2020 20 08 Дополнение #8000000699
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT; ANALYZED_DEAL'.
        ELSE.
          <ls_esf_roster>-dop_dan = 'IMPORT_VAT'.
        ENDIF.

      ENDIF.

      EXIT.
    ENDLOOP.

    APPEND LINES OF lt_roster TO gt_esf_roster.

    IF gv_id_type_esf = lcl_report=>gc_esf_ty_additional. " V.Matsygud 09.04.2021 Для дополнительных ЭСЧФ со ссылкой данные берем из исходного ЭСЧФ, сумму НДС из текущего бухдока (#23850)
      " Добавил поле "Возврат товара" в выборку - AK_BADYLEVIC #25828 ZFI_REGINV Доработка возврата товара
      SELECT SINGLE n_dog dt_dog id_vid_doc nm_vid_doc dt_doc code_tp_blank ser_tp_blank n_tp_blank refund_tp_blank
                    dop_sved " Условия поставки
                    id_vid_doc_02 nm_vid_doc_02 dt_doc_02 code_tp_blank_02 ser_tp_blank_02 n_tp_blank_02
                    refund_tp_blank_02 id_vid_doc_03 nm_vid_doc_03 dt_doc_03 code_tp_blank_03 ser_tp_blank_03
                    n_tp_blank_03 refund_tp_blank_03
        FROM zfi_esf
        INTO ( <ls_esf>-n_dog, <ls_esf>-dt_dog, <ls_esf>-id_vid_doc, <ls_esf>-nm_vid_doc, <ls_esf>-dt_doc,
               <ls_esf>-code_tp_blank, <ls_esf>-ser_tp_blank, <ls_esf>-n_tp_blank, <ls_esf>-refund_tp_blank,
               <ls_esf>-dop_sved, <ls_esf>-id_vid_doc_02, <ls_esf>-nm_vid_doc_02, <ls_esf>-dt_doc_02,
               <ls_esf>-code_tp_blank_02, <ls_esf>-ser_tp_blank_02, <ls_esf>-n_tp_blank_02, <ls_esf>-refund_tp_blank_02,
               <ls_esf>-id_vid_doc_03, <ls_esf>-nm_vid_doc_03, <ls_esf>-dt_doc_03, <ls_esf>-code_tp_blank_03,
               <ls_esf>-ser_tp_blank_03, <ls_esf>-n_tp_blank_03, <ls_esf>-refund_tp_blank_03 )
        WHERE n_esf = <ls_fi_data>-n_esf_ish.
      SELECT * FROM zfi_esf_roster
        INTO TABLE lt_roster " Данные по товарам
        WHERE n_esf = <ls_fi_data>-n_esf_ish.
      LOOP AT lt_roster ASSIGNING <ls_esf_roster>.
        <ls_esf_roster>-n_esf = <ls_esf>-n_esf.
        IF <ls_esf_roster>-nds IS NOT INITIAL.
          <ls_esf_roster>-nds = <ls_esf>-sum_nds.
        ENDIF.
      ENDLOOP.
      APPEND LINES OF lt_roster TO gt_esf_roster.
    ENDIF.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_45_1.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA ls_fi_esf_ish    TYPE zfi_esf.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " Партнер из Исх.поставки
    SELECT SINGLE vbpa~kunnr
      FROM vbpa
             JOIN
               vbfa ON vbpa~vbeln = vbfa~vbelv
      INTO @DATA(lv_kunnr)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'J'
        AND vbpa~parvw   = 'WE'.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    " ТТН-1, ТН-2
    get_zdeliv_note_h( EXPORTING iv_vbeln  = <ls_fi_data>-vbeln
                       IMPORTING es_zdeliv = DATA(ls_zdeliv) ).

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    <ls_esf>-n_esf         = lv_n_esf.

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_45_1.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = last_mday( <ls_fi_data>-budat ).             "#3
    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post    = 'SELLER'.

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " 34. N_VVOZ_TOV_POST / 35. DT_VVOZ_TOV_POST
      SELECT SINGLE znumber zdate FROM zfi_nds_selappl
        INTO ( <ls_esf>-n_vvoz_tov_post, <ls_esf>-dt_vvoz_tov_post )
        WHERE bukrs = <ls_fi_data>-bukrs
          AND belnr = <ls_fi_data>-belnr
          AND gjahr = <ls_fi_data>-gjahr.

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = lv_kunnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = lv_kunnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = lv_kunnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = lv_kunnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

*      IF lv_auart <> 'ZUSL'.  " не заполняем для услуг
      IF lv_auart NOT IN gt_auart_serv. " не заполняем для услуг
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

        " 23.УНП( 50. COUNTRYCODE_GROTP )
        get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grotp = lv_taxnum. CLEAR lv_taxnum.

        " 24.Наименование( 52. NM_GROTP )
        lv_name = lv_partner.
        get_partner_name( EXPORTING iv_id     = gc_id
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = gc_object
                          CHANGING  ev_text   = lv_text ).
        <ls_esf>-nm_grotp      = lv_text.

        " 25.Адрес отправки( 56. NM_GRPOL )
        <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                         THEN ls_zdeliv-zvsteltxt
                                         ELSE <ls_esf>-addres_post ).

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = lv_kunnr
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = lv_kunnr
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = lv_taxnum. CLEAR lv_taxnum.

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol      = <ls_esf>-nm_pokup.

        " 29.Адрес отправки( 57. ADDRESS_GRPOL )
        <ls_esf>-address_grpol = COND #( WHEN ls_zdeliv-zvstel2txt IS NOT INITIAL
                                         THEN ls_zdeliv-zvstel2txt
                                         ELSE <ls_esf>-addres_pokup ).
      ENDIF.

    ELSE.
      " для дополнительных ЭСЧФ со ссылкой данные подтягиваем из исходного ЭСЧФ (#8000000537)
      CLEAR ls_fi_esf_ish.

      SELECT SINGLE * FROM zfi_esf
        INTO ls_fi_esf_ish
        WHERE n_esf = <ls_fi_data>-n_esf_ish.

      <ls_esf>-dt_op_esf         = ls_fi_esf_ish-dt_op_esf. " 3.Дата совершения операции ЭСЧФ( 3. DT_OP_ESF )

      <ls_esf>-id_stat_post      = ls_fi_esf_ish-id_stat_post. " 6. Статус поставщика( 17. ID_STAT_POST )
      <ls_esf>-pr_vzml_post      = ls_fi_esf_ish-pr_vzml_post. " 6.1 Взаимозависимое лицо
      <ls_esf>-pr_resofz_post    = ls_fi_esf_ish-pr_resofz_post. " 6.2 Сделка с резидентов оффшорной зоны
      <ls_esf>-pr_sdper_post     = ls_fi_esf_ish-pr_sdper_post.   " 6.3 Сделка с товарами по перечню РБ
      <ls_esf>-pr_bigcomp_post   = ls_fi_esf_ish-pr_bigcomp_post. " 6.4 Орг включенная в перечень крупн. плат.

      <ls_esf>-id_stat_pokup     = ls_fi_esf_ish-id_stat_pokup. " 15. Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-pr_vzml_pokup     = ls_fi_esf_ish-pr_vzml_pokup. " 15.1 Взаимозависимое лицо
      <ls_esf>-pr_resofz_pokup   = ls_fi_esf_ish-pr_resofz_pokup. " 15.2 Сделка с резидентов оффшорной зоны
      <ls_esf>-pr_sdper_pokup    = ls_fi_esf_ish-pr_sdper_pokup.   " 15.3 Сделка с товарами по перечню РБ
      <ls_esf>-pr_bigcomp_pokup  = ls_fi_esf_ish-pr_bigcomp_pokup. " 15.4 Орг включенная в перечень крупн. плат.
      <ls_esf>-countrycode_pokup = ls_fi_esf_ish-countrycode_pokup.  " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      <ls_esf>-nm_pokup          = ls_fi_esf_ish-nm_pokup. " 18.Наименование( 44. NM_POKUP )
      <ls_esf>-addres_pokup      = ls_fi_esf_ish-addres_pokup.  " 19.Юридический адрес( 45. ADDRES_POKUP )

      <ls_esf>-countrycode_grotp = ls_fi_esf_ish-countrycode_grotp.  " 22.Код страны грузоотправителя
      <ls_esf>-unn_grotp         = ls_fi_esf_ish-unn_grotp. " 23.УНП грузоотправителя
      <ls_esf>-nm_grotp          = ls_fi_esf_ish-nm_grotp. " 24.Наименование грузоотправителя
      <ls_esf>-address_grotp     = ls_fi_esf_ish-address_grotp.  " 25.Адрес отправки
      <ls_esf>-countrycode_grpol = ls_fi_esf_ish-countrycode_grpol.  " 26.Код страны грузополучателя
      <ls_esf>-unn_grpol         = ls_fi_esf_ish-unn_grpol. " 27.УНП грузополучателя
      <ls_esf>-nm_grpol          = ls_fi_esf_ish-nm_grpol. " 28.Наименование грузополучателя
      <ls_esf>-address_grpol     = ls_fi_esf_ish-address_grpol.  " 29.Адрес доставки
      "
    ENDIF. " 8000000345
    "
    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 60.
    IF ls_zdeliv IS NOT INITIAL.
      <ls_esf>-id_vid_doc = ls_zdeliv-zvddc.
      <ls_esf>-nm_vid_doc = ''.
      <ls_esf>-dt_doc     = ''.
      IF ls_zdeliv-zkdf IS NOT INITIAL.                     " DHVK950029
        <ls_esf>-code_tp_blank = ls_zdeliv-zkdf.
      ELSE.
        <ls_esf>-code_tp_blank = ''.
      ENDIF.
      <ls_esf>-ser_tp_blank = ls_zdeliv-zser.
      <ls_esf>-n_tp_blank   = ls_zdeliv-znum_etsd.
    ELSE.
      <ls_esf>-dt_doc     = <ls_fi_data>-bldat.
      <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
    ENDIF.

*      "66. DOP_SVED
*      <ls_esf>-dop_sved = 'Договор комиссии между РУП «Производственное объединение «Белоруснефть» и ЗАО «Белорусская нефтяная компания»'.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    SORT gt_okei_tab BY msehi.

    DATA(lt_vbrp) = read_vbrp_all( ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      IF <ls_fi_data>-vbeln IS NOT INITIAL.
        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).

        " ТН ВЭД ЕАЭС
        SELECT zcs_cust_goods~goods_tnvedcode,
               zcs_cust_goods~zeile
          FROM zcs_cust_goods
                 JOIN
                   zcs_cust_hsd ON zcs_cust_goods~declarant_id = zcs_cust_hsd~declarant_id
                     JOIN
                       vbfa ON vbfa~vbelv = zcs_cust_hsd~rel_mblnr
          INTO TABLE @DATA(lt_cust_goods)
          WHERE vbfa~vbeln   = @<ls_fi_data_2>-vbeln
            AND vbfa~vbtyp_v = 'J'
          ORDER BY goods_tnvedcode, zeile.

        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.

          " код товара
          READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
               WITH KEY zeile = <ls_vbrp>-posnr+2(4)
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-code_tov_ved = <ls_cust_goods>-goods_tnvedcode.
          ENDIF.

          IF     gv_id_type_esf                = lcl_report=>gc_esf_ty_additional " для дополнительных ЭСЧФ со ссылкой данные ищем из исходного ЭСЧФ (#8000000537)
             AND <ls_esf_roster>-code_tov_ved IS INITIAL.

            SELECT SINGLE code_tov_ved FROM zfi_esf_roster
              INTO <ls_esf_roster>-code_tov_ved
              WHERE n_esf = <ls_fi_data>-n_esf_ish
                AND nnp   = <ls_esf_roster>-nnp.

          ENDIF.

          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.
          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = 0.
          <ls_esf_match>-sum_excise = 0.
          <ls_esf>-sum_excise = 0.
          " ставка НДС
          <ls_esf_roster>-st_nds    = 0.
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = 'ZERO'.
          " сумма НДС
          <ls_esf_roster>-nds       = 0.
          <ls_esf_match>-sum_nds = 0.
          <ls_esf>-sum_nds = 0.
          " сумма с НДС
          <ls_esf_roster>-snds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova
        ENDLOOP.
      ELSE.
        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
      ENDIF.
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_46. " start Tararenko #31229 - ЭСЧФ для 46 вида операции
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    "  <ls_esf>-n_esf = lv_n_esf.

    " 1.Признак ЭСЧФ
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.
    " 2.Номер ЭСЧФ
    <ls_esf>-n_esf         = lv_n_esf.
    " 3. Вид Операции
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_46.
    " 5. Код статуса ЭСЧФ - ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
    " 8. Балансовая единица
    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    " 9. Номер бухгалтерского документа
    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " 10.Финансовый год
    <ls_esf>-gjahr       = <ls_fi_data>-gjahr.
    " 12.Дата совершения операции ЭСЧФ( DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-bldat.

    " 13.Тип ЭСЧФ(ID_TYPE_ESF)
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 14.К ЭСЧФ( N_ESF_ISH ) / 15.Дата аннулирования ЭСЧФ( DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

    " 17.Статус поставщика( ID_STAT_POST )
    <ls_esf>-id_stat_post = 'COMMISSIONAIRE'.

    " 18.Взаимозависимое лицо( PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 21.Организация, включенная в перечень крупных плательщиков( PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 22.Код страны поставщика( COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 23.УНП( UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 24.Код филиала( CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 25.Поставщик( NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 26.Юридический адрес( ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.
      " 27. N_ESF_KOM  / "28. DT_ESF_KOM
      SELECT SINGLE zfi_esf~n_esf
                    zfi_esf~dt_vs_esf
        FROM zfi_esf
               JOIN
                 zfi_esf_match ON  zfi_esf~pr_esf = zfi_esf_match~pr_esf
                               AND zfi_esf~n_esf  = zfi_esf_match~n_esf
        INTO ( <ls_esf>-n_esf_kom, <ls_esf>-dt_esf_kom )
        WHERE zfi_esf_match~pr_esf = lcl_report=>gc_in_inv
          AND zfi_esf_match~bukrs  = <ls_fi_data>-bukrs
          AND zfi_esf_match~belnr  = <ls_fi_data>-bktxt(10)
          AND zfi_esf_match~gjahr  = <ls_fi_data>-bktxt+10(4).

      " 36. Статус получателя( ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 41.Код страны получателя( COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 42.УНП( UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 43.Код филиала( CODE_POKUP_FIL )
      get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                  CHANGING  ev_frt     = lv_frt ).
      <ls_esf>-code_pokup_fil = lv_frt.

      " 44.Наименование( NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 45.Юридический адрес( ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.
    ENDIF.

    " 58.Договор (контракт) на поставку товара( N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 59.Дата договора (контракта)( DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. Вид документа ( ID_VID_DOC )
    <ls_esf>-id_vid_doc = 601. " #31229/19 - V.Zaretsky изменить тип документа

    " 61. Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC
    <ls_esf>-dt_doc     = <ls_fi_data>-bldat.

    " 65. N_TP_BLANK
    <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.

    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
   " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
      lv_nnp = lv_nnp + 1.

      " признак
      <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
      " номер
      <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
      " позиция
      <ls_esf_roster>-nnp    = lv_nnp.
      " наименование
      SELECT SINGLE nm_tov FROM zfi_esf_roster
        INTO <ls_esf_roster>-nm_tov
        WHERE n_esf  = <ls_esf>-n_esf_kom
          AND pr_esf = lcl_report=>gc_in_inv
          AND nnp    = lv_nnp.

      " ЕИ
      <ls_esf_roster>-meins         = 'LE'.
      " Код вида деятельности
      <ls_esf_roster>-code_tov_oced = '06100'.
      " количество
      <ls_esf_roster>-kol_tov       = 1.

      " сумма с НДС
      <ls_esf_roster>-snds          = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

      " сумма НДС
      <ls_esf_roster>-nds = <ls_esf_roster>-nds + ( <ls_esf_roster>-snds * 20 / 120 ).
      <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + ( <ls_esf_roster>-snds * 20 / 120 ).
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + ( <ls_esf_roster>-snds * 20 / 120 ).

      " без НДС
      <ls_esf_roster>-nonds = <ls_fi_data_2>-total_w_vat - <ls_esf_roster>-nds.

      <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + ( <ls_esf_match>-sum_snds - <ls_esf_match>-sum_nds ).
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + ( <ls_esf>-sum_snds - <ls_esf>-sum_nds ).

      " цена(тариф)
      <ls_esf_roster>-cena_tov = <ls_esf_roster>-nonds.

      " акциз
      <ls_esf_roster>-excise   = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.
      " ставка НДС
      <ls_esf_roster>-st_nds    = 20.
      " ставка ндс/справочник
      <ls_esf_roster>-id_tp_nds = 'DECIMAL'.
      <ls_esf_roster>-waers     = <ls_fi_data_2>-waers.

    ENDLOOP.

    <ls_esf>-last_user  = sy-uname. " Последний пользователь изменивший запись
    <ls_esf>-aedat      = sy-datum.     " Дата последнего изменения
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD. " end Tararenko #31229 - ЭСЧФ для 46 вида операции

  METHOD build_53.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    <ls_esf>-n_esf         = lv_n_esf.

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_53.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-bldat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'AGENT'.

    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " 29. N_ESF_PROD / "30. DT_ESF_PROD
      SELECT SINGLE zfi_esf~n_esf
                    zfi_esf~dt_vs_esf
        FROM zfi_esf
               JOIN
                 zfi_esf_match ON  zfi_esf~pr_esf = zfi_esf_match~pr_esf
                               AND zfi_esf~n_esf  = zfi_esf_match~n_esf
        INTO ( <ls_esf>-n_esf_prod, <ls_esf>-dt_esf_prod )
        WHERE zfi_esf_match~pr_esf = lcl_report=>gc_in_inv
          AND zfi_esf_match~bukrs  = <ls_fi_data>-bukrs
          AND zfi_esf_match~belnr  = <ls_fi_data>-bktxt(10)
          AND zfi_esf_match~gjahr  = <ls_fi_data>-bktxt+10(4).

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CONSUMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                  CHANGING  ev_frt     = lv_frt ).
      <ls_esf>-code_pokup_fil = lv_frt.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.
    ENDIF. " 8000000345

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 608.

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC
    <ls_esf>-dt_doc     = <ls_fi_data>-bldat.

    " 65. N_TP_BLANK
    <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
*    ENDIF.

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
   " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
      lv_nnp = lv_nnp + 1.

      " признак
      <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
      " номер
      <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
      " позиция
      <ls_esf_roster>-nnp    = lv_nnp.
      " наименование
      SELECT SINGLE sgtxt FROM bseg
        INTO <ls_esf_roster>-nm_tov
        WHERE bukrs = <ls_fi_data_2>-bukrs
          AND belnr = <ls_fi_data_2>-belnr
          AND gjahr = <ls_fi_data_2>-gjahr
          AND buzei = 2.
      IF <ls_esf_roster>-nm_tov IS INITIAL.
        lv_name = |{ <ls_fi_data_2>-bukrs }  { <ls_fi_data_2>-belnr }{ <ls_fi_data_2>-gjahr }002|.
        get_partner_name( EXPORTING iv_id     = '0001'
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = 'DOC_ITEM'
                          CHANGING  ev_text   = lv_text ).
        <ls_esf_roster>-nm_tov = lv_text.
      ENDIF.
      " ЕИ
      <ls_esf_roster>-ed_izm   = '796'.
      <ls_esf_roster>-meins    = 'ST'.
      " количество
      <ls_esf_roster>-kol_tov  = 1.
      " цена(тариф)
      <ls_esf_roster>-cena_tov = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
      " без НДС
      <ls_esf_roster>-nonds    = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
      <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
      " акциз
      <ls_esf_roster>-excise = 0.
      <ls_esf_match>-sum_excise = 0.
      <ls_esf>-sum_excise = 0.
      " ставка НДС
      <ls_esf_roster>-st_nds    = 20.
      " ставка ндс/справочник
      <ls_esf_roster>-id_tp_nds = 'DECIMAL'.
      " сумма НДС
      <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
      <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
      <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
      " сумма с НДС
      <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat.
      <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
      <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

      <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
    ENDLOOP.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_681.
    DATA lv_nnp TYPE zfi_esf_roster-nnp.

    FIELD-SYMBOLS <ls_esf> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    build_31_15( EXPORTING iv_id_type_esf = iv_id_type_esf
                           iv_id_vid_iop  = CONV zfi_esf-id_vid_iop( gc_681 )
                 IMPORTING er_esf         = DATA(lr_esf) ).

    IF lr_esf IS INITIAL.
      RETURN.
    ENDIF.
    ASSIGN lr_esf->* TO <ls_esf>.
    SORT gt_okei_tab BY msehi.
    DATA(lt_vbrp) = read_vbrp_all( iv_awkey = abap_true ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                     IMPORTING ev_kursf   = DATA(lv_kursf) ).

      IF lt_vbrp IS INITIAL.
        CONTINUE.
      ENDIF.

      " ТН ВЭД ЕАЭС
      SELECT zcs_cust_goods~goods_tnvedcode,
             zcs_cust_goods~zeile
        FROM zcs_cust_goods
               JOIN
                 zcs_cust_hsd ON zcs_cust_goods~declarant_id = zcs_cust_hsd~declarant_id
                   JOIN
                     vbfa ON vbfa~vbelv = zcs_cust_hsd~rel_mblnr
" TODO: variable is assigned but never used (ABAP cleaner)
        INTO TABLE @DATA(lt_cust_goods)
        WHERE vbfa~vbeln   = @<ls_fi_data_2>-awkey
          AND vbfa~vbtyp_v = 'J'
        ORDER BY goods_tnvedcode, zeile.

      LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-awkey.
        APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
        lv_nnp = lv_nnp + 1.

        " признак
        <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
        " номер
        <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        <ls_esf_roster>-nm_tov = <ls_vbrp>-text.

        " код товара
        " https://service.iba.by/redmine/issues/13837#note-357 (2)
        IF    <ls_esf>-pr_vzml_post = abap_true                                                                       "#8
           OR <ls_fi_data_2>-prvzml_ish = abap_true AND <ls_esf>-id_type_esf = lcl_report=>gc_esf_ty_additional. " DHVK942202
          <ls_esf_roster>-code_tov_ved = <ls_vbrp>-zeinr.
        ENDIF.

        " ЕИ
        READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
             WITH KEY msehi = <ls_vbrp>-vrkme
             BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_esf_roster>-ed_izm = <ls_okei>-okei.
        ENDIF.
        <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
        " количество
        <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
        " цена(тариф)
        TRY.
            <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
          CATCH cx_sy_zerodivide.
            <ls_esf_roster>-cena_tov = 0.
        ENDTRY.
        " без НДС
        <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
        <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
        " акциз
        <ls_esf_roster>-excise = 0.
        <ls_esf_match>-sum_excise = 0.
        <ls_esf>-sum_excise = 0.
        " ставка НДС
        <ls_esf_roster>-st_nds    = 0.
        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'NO_VAT'.
        " сумма НДС
        <ls_esf_roster>-nds       = <ls_vbrp>-mwsbp * lv_kursf.
        <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
        " сумма с НДС
        <ls_esf_roster>-snds = <ls_vbrp>-netwr * lv_kursf.
        <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

        " ДопДанные
* --> AK_BUTVILOVS #8000000699, zfi_reginv Дополнительные данные
*      <ls_esf_roster>-dop_dan = 'DEDUCTION_IN_FULL'.
        IF <ls_esf>-pr_vzml_post = abap_true.
          <ls_esf_roster>-dop_dan = 'DEDUCTION_IN_FULL; ANALYZED_DEAL'.
        ELSE.
          <ls_esf_roster>-dop_dan = 'DEDUCTION_IN_FULL'.
        ENDIF.
        " <-- AK_BUTVILOVS #8000000699

        <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
        " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
        <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                THEN gc_zz_okrb
                                                ELSE <ls_esf_roster>-code_tov_oced ).
        " } 26/04/2023 G.Domanikova
      ENDLOOP.
    ENDLOOP.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_62. " 16.09.2020 V.Matsygud
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lt_ekbe          TYPE STANDARD TABLE OF gty_s_ekbe.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lt_esll          TYPE STANDARD TABLE OF gty_s_esll.
    DATA lt_mat_text      TYPE ztb_mat_text.
    DATA lt_roster        TYPE TABLE OF zfi_esf_roster.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    <ls_fi_data>-mjahr = <ls_fi_data>-gjahr. " Костыль
    get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data>
                   IMPORTING ev_type    = DATA(lv_type)
                             et_ekbe    = lt_ekbe ).

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_62.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = <ls_fi_data>-budat.

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'FOREIGN_ORGANIZATION'.
    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
*    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr CHANGING cv_vzml = <ls_esf>-pr_vzml_post ).

    " 19. PR_RESOFZ_POST
    SELECT SINGLE partner FROM bp3010
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_partner_tmp)
      WHERE partner  = @<ls_fi_data>-lifnr
        AND grp_typ  = 902
        AND grp     IN ( '001', '002' ).
    IF sy-subrc = 0.
      <ls_esf>-pr_resofz_post = abap_true.
    ENDIF.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 9.Поставщик( 25. NM_POST )
    lv_name = <ls_fi_data>-lifnr.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-lifnr ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. " 8000000345
      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup    = 'CUSTOMER'.

      " 40. PR_BIGCOMP_POKUP
      <ls_esf>-pr_bigcomp_pokup = abap_true.

      get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  cv_vzml    = <ls_esf>-pr_vzml_pokup ). " 15.1 Взаимозависимое лицо
      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = lv_partner
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 17.Код филиала( 43. CODE_POKUP_FIL )
      SELECT SINGLE frt FROM bp3010
        INTO <ls_esf>-code_pokup_fil
        WHERE partner = lv_partner
          AND grp_typ = 904.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = lv_partner.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = lv_partner
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

      IF lv_type = 'E'. " услуги

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = lv_partner
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = lv_partner
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = lv_taxnum.

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol  = <ls_esf>-nm_pokup.

        " 29.Адрес отправки( 57. ADDRESS_GRPOL )
        get_addr( EXPORTING iv_partner = lv_partner
                  CHANGING  ev_text    = lv_text ).
        <ls_esf>-address_grpol = lv_text.
      ENDIF.
    ENDIF.

    " 30.Договор (контракт) на поставку товара( 58. N_DOG ) / "30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60. ID_VID_DOC
    <ls_esf>-id_vid_doc = 612. " Акт выполненных работ

    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.

    " 62. DT_DOC / "65. N_TP_BLANK
    SELECT SINGLE bldat xblnr FROM bkpf
      INTO ( <ls_esf>-dt_doc, <ls_esf>-n_tp_blank )
      WHERE bukrs = <ls_fi_data>-bukrs
        AND belnr = <ls_fi_data>-bktxt(10)
        AND gjahr = <ls_fi_data>-bktxt+10(4).
*    ENDIF.

    <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr. " Номер
    <ls_esf>-dt_doc     = <ls_fi_data>-budat. " Дата

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      SELECT SINGLE zdeliv_note_h~zser
        FROM zdeliv_note_h
               JOIN
                 likp ON zdeliv_note_h~zdelivery = likp~vbeln
                   JOIN
                     vbfa ON likp~vbeln = vbfa~vbelv
                       LEFT JOIN
                         zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc
" TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_zser)
        WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
          AND vbfa~vbtyp_v = 'J'. " поставка
      IF     iv_id_type_esf = gc_esf_original_type
         AND sy-subrc       = 0.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      get_ekbe_data( EXPORTING is_fi_data = <ls_fi_data_2>
                     IMPORTING ev_type    = lv_type
                               et_ekbe    = lt_ekbe
                               et_esll    = lt_esll ).
      IF lv_type IS INITIAL.
        get_esll_data( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING et_esll    = lt_esll ).
        lv_type = 'D'. " услуги
      ENDIF.

      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " ЕИ
      IF lv_type = 'E'. " ТМЦ
        SELECT DISTINCT rseg~belnr,
                        rseg~buzei,
                        rseg~bstme,
                        j_3rj_uom_conv~okei
          FROM rseg
                 JOIN
                   t006a ON rseg~bstme = t006a~msehi
                     JOIN
                       j_3rj_uom_conv ON j_3rj_uom_conv~uom = t006a~msehi
          INTO TABLE @DATA(lt_rseg)
          WHERE rseg~belnr = @<ls_fi_data_2>-mblnr
            AND rseg~gjahr = @<ls_fi_data_2>-mjahr.
        SORT lt_rseg BY buzei
                        belnr.
      ENDIF.

      IF lt_ekbe IS NOT INITIAL.
        IF lv_type = 'E'. " ТМЦ
          LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_dat>).
            IF NOT line_exists( lt_mat_text[ matnr = <ls_dat>-matnr
                                             charg = <ls_dat>-bwtar ] ).
              INSERT VALUE #( matnr = <ls_dat>-matnr
                              charg = <ls_dat>-bwtar )
                     INTO TABLE lt_mat_text.
            ENDIF.
          ENDLOOP.

          zcl_text_for_material=>get_text_mat_v4( EXPORTING it_table = lt_mat_text
                                                  CHANGING  ct_table = lt_mat_text ).

          LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_ekbe>).
            READ TABLE lt_mat_text ASSIGNING FIELD-SYMBOL(<ls_mat_text>)
                 WITH KEY matnr = <ls_ekbe>-matnr
                          charg = <ls_ekbe>-bwtar
                 BINARY SEARCH.
            IF sy-subrc = 0.
              <ls_ekbe>-maktx = <ls_mat_text>-text.
            ENDIF.
          ENDLOOP.
        ELSEIF lv_type = 'D'. " Услуги
          LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
            TRY.
                <ls_ekbe>-maktx = lt_esll[ sy-tabix ]-ktext1.
              CATCH cx_sy_itab_line_not_found.
            ENDTRY.
          ENDLOOP.
        ENDIF.

      ELSE.
        lt_ekbe = VALUE #( FOR ls_esll IN lt_esll
                           ( maktx = ls_esll-ktext1 ) ).
      ENDIF.

      LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
        " roster
        APPEND INITIAL LINE TO lt_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).

        lv_nnp = lv_nnp + 1.

        " признак
        <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
        " номер
        <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
        " позиция
        <ls_esf_roster>-nnp    = lv_nnp.
        " наименование
        <ls_esf_roster>-nm_tov = <ls_ekbe>-maktx.
        " ЕИ
        READ TABLE lt_rseg ASSIGNING FIELD-SYMBOL(<ls_rseg>)
             WITH KEY buzei = <ls_ekbe>-buzei
             BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_esf_roster>-ed_izm = <ls_rseg>-okei.
          <ls_esf_roster>-meins  = <ls_rseg>-bstme.
        ENDIF.
        " количество
        IF lv_type = 'E'.
          <ls_esf_roster>-kol_tov = <ls_ekbe>-bpmng.
        ENDIF.

        " акциз
        <ls_esf_roster>-excise = 0.
        <ls_esf_match>-sum_excise = 0.
        <ls_esf>-sum_excise = 0.
        " ставка НДС
        <ls_esf_roster>-st_nds    = 0. " было 20
        <ls_esf_roster>-nds       = 0. " НДС добавил
        " ставка ндс/справочник
        <ls_esf_roster>-id_tp_nds = 'NO_VAT'.

        <ls_esf_roster>-waers     = <ls_fi_data_2>-waers.
      ENDLOOP.

      ASSIGN lt_roster[ 1 ] TO FIELD-SYMBOL(<ls_esf_roster_tmp>).
      IF sy-subrc = 0.
        " без НДС
        <ls_esf_roster_tmp>-nonds = <ls_esf_roster_tmp>-nonds + <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_fi_data_2>-total_w_vat.
        " сумма НДС
        <ls_esf_roster_tmp>-nds = <ls_esf_roster_tmp>-nds + <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        " сумма с НДС
        <ls_esf_roster_tmp>-snds = <ls_esf_roster_tmp>-snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
      ENDIF.
    ENDLOOP.

    APPEND LINES OF lt_roster TO gt_esf_roster.

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_fi_data>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.

  METHOD build_mode1_filter.
    gt_fi_data_filtered = gt_fi_data.
    DELETE gt_fi_data_filtered WHERE n_esf IS NOT INITIAL.
  ENDMETHOD.

  METHOD check_matched_fi_data.
    TYPES: BEGIN OF lty_s_fi_docs,
             n_esf         TYPE zfi_esf-n_esf,
             bukrs         TYPE bkpf-bukrs,
             belnr         TYPE bkpf-belnr,
             gjahr         TYPE bkpf-gjahr,
             id_stat_esf_p TYPE zfi_esf-id_stat_esf_p,
             id_stat_esf_v TYPE zfi_esf-id_stat_esf_v,
           END OF lty_s_fi_docs.

    DATA lt_fi_docs TYPE TABLE OF lty_s_fi_docs.
    DATA lv_text    TYPE char100.

    CLEAR rv_result.

    lt_fi_docs = VALUE #( FOR ls_fi_data IN it_fi_data WHERE ( chk_box = abap_true )
                          ( bukrs = ls_fi_data-bukrs
                            belnr = ls_fi_data-belnr
                            gjahr = ls_fi_data-gjahr ) ).

    IF lt_fi_docs IS INITIAL.
      RETURN.
    ENDIF.

    " проверка на сторнированные документы
    SELECT rbukrs, belnr, gjahr, xreversed
      FROM acdoca
      INTO TABLE @DATA(lt_acdoca)
      FOR ALL ENTRIES IN @lt_fi_docs
      WHERE rbukrs    = @lt_fi_docs-bukrs
        AND belnr     = @lt_fi_docs-belnr
        AND gjahr     = @lt_fi_docs-gjahr
        AND xreversed = @abap_true.

    LOOP AT lt_acdoca ASSIGNING FIELD-SYMBOL(<ls_acdoca>).
      CONCATENATE 'Документ' <ls_acdoca>-rbukrs <ls_acdoca>-belnr <ls_acdoca>-gjahr 'был сторнирован' INTO lv_text SEPARATED BY space.
      MESSAGE lv_text TYPE 'I'.
    ENDLOOP.

    IF sy-subrc = 0.
      rv_result = abap_true.
      RETURN.
    ENDIF.

    " проверка на уже связанные документы
    IF lt_fi_docs IS NOT INITIAL.
      SELECT m~n_esf,
             m~bukrs,
             m~belnr,
             m~gjahr,
             e~id_stat_esf_p,
             e~id_stat_esf_v
        FROM zfi_esf_match AS m
               JOIN
                 zfi_esf AS e ON  e~pr_esf = m~pr_esf
                              AND e~n_esf  = m~n_esf
        INTO TABLE @lt_fi_docs
        FOR ALL ENTRIES IN @lt_fi_docs
        WHERE m~bukrs = @lt_fi_docs-bukrs
          AND m~belnr = @lt_fi_docs-belnr
          AND m~gjahr = @lt_fi_docs-gjahr.

      IF sy-subrc = 0.
        LOOP AT lt_fi_docs ASSIGNING FIELD-SYMBOL(<ls_fi_docs>).
          IF     <ls_fi_docs>-id_stat_esf_p <> lcl_report=>gc_stat_p_cancelled
             AND <ls_fi_docs>-id_stat_esf_v <> lcl_report=>gc_stat_v_cancelled.
            CONCATENATE 'Документ' <ls_fi_docs>-bukrs <ls_fi_docs>-belnr <ls_fi_docs>-gjahr 'уже связан с ЭСЧФ' <ls_fi_docs>-n_esf INTO lv_text SEPARATED BY space.
            MESSAGE lv_text TYPE 'I'.
            rv_result = abap_true.
            RETURN.
          ENDIF.
          IF     <ls_fi_docs>-id_stat_esf_v  = lcl_report=>gc_stat_v_cancelled
             AND <ls_fi_docs>-id_stat_esf_p <> lcl_report=>gc_stat_p_cancelled.
            rv_result = 'F'.
          ENDIF.
        ENDLOOP.
      ELSE.
        rv_result = abap_false.
      ENDIF.
    ELSE.
      rv_result = abap_false.
    ENDIF.
  ENDMETHOD.

  METHOD update_detailed_data.
    DATA ls_esf_data TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    IF lcl_report=>gv_pr_esf IS INITIAL AND lcl_report=>gv_n_esf IS INITIAL.
      lcl_report=>gv_pr_esf = lcl_report=>gc_out_inv.
      lcl_report=>gv_n_esf = is_esf_data-n_esf.
      MOVE-CORRESPONDING is_esf_data TO gs_part1.
      MOVE-CORRESPONDING is_esf_data TO gs_part2.
      MOVE-CORRESPONDING is_esf_data TO gs_part3.
      MOVE-CORRESPONDING is_esf_data TO gs_part4.
      MOVE-CORRESPONDING is_esf_data TO gs_part5.
*      IF is_esf_data-id_type_esf = lcl_report=>gc_esf_ty_additional.                               "{DHVK930347 коммент 8000000430
*        CLEAR: gs_part3-nm_pokup, gs_part3-unp_pokup.
*      ENDIF.                                                                   "}DHVK930347
    ELSEIF lcl_report=>gv_n_esf <> is_esf_data-n_esf.
      ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf
                          n_esf  = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf_data>).
      IF sy-subrc = 0.
        ls_esf_data = <ls_esf_data>.

        " записываем изменения в таблицу
        MOVE-CORRESPONDING gs_part1 TO <ls_esf_data>.
        MOVE-CORRESPONDING gs_part2 TO <ls_esf_data>.
        MOVE-CORRESPONDING gs_part3 TO <ls_esf_data>.
        MOVE-CORRESPONDING gs_part4 TO <ls_esf_data>.
        MOVE-CORRESPONDING gs_part5 TO <ls_esf_data>.
        IF ls_esf_data <> <ls_esf_data> OR gv_update_esf = abap_true.   " были ли изменения на экране
          <ls_esf_data>-last_user = sy-uname.
          <ls_esf_data>-aedat     = sy-datum.
          GET TIME STAMP FIELD <ls_esf_data>-tstampl.
          save_data( 'H' ).   " сохраняем измененные данные
          CLEAR gv_update_esf.
        ENDIF.
        unlock_esf_on_hotspot( ).
        clear_detail( ).

        lcl_report=>gv_pr_esf = is_esf_data-pr_esf.
        lcl_report=>gv_n_esf = is_esf_data-n_esf.
        MOVE-CORRESPONDING is_esf_data TO gs_part1.
        MOVE-CORRESPONDING is_esf_data TO gs_part2.
        MOVE-CORRESPONDING is_esf_data TO gs_part3.
        MOVE-CORRESPONDING is_esf_data TO gs_part4.
        MOVE-CORRESPONDING is_esf_data TO gs_part5.
*        IF is_esf_data-id_type_esf = lcl_report=>gc_esf_ty_additional AND is_esf_data-pr_esf = lcl_report=>gc_out_inv.   "{DHVK930347 коммент 8000000430
*          CLEAR: gs_part3-nm_pokup, gs_part3-unp_pokup.
*        ENDIF.                                                                                       "}DHVK930347
      ENDIF.
    ENDIF.

    IF is_esf_data-id_stat_esf_v = lcl_report=>gc_stat_v_checked.
      lcl_report=>gv_lock_error = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD get_next_esf_number.
    TYPES:
      BEGIN OF lty_s_n_esf,
        n_esf TYPE zfi_esf-n_esf,
      END OF lty_s_n_esf.

    DATA lv_1n TYPE num1.

    SELECT SINGLE n_esf FROM zfi_esf
      " TODO: variable is assigned but never used (ABAP cleaner)
      INTO @DATA(lv_n_esf)
      WHERE pr_esf = @lcl_report=>gc_out_inv
        AND n_esf  = @iv_n_esf.
    IF sy-subrc <> 0.
      ev_n_esf = iv_n_esf.
      RETURN.
    ENDIF.

    DATA(lv_esf) = iv_n_esf.
    DO.
      lv_1n = lv_esf+19(1) + 1.
      lv_esf+19(1) = lv_1n.

      SELECT SINGLE n_esf FROM zfi_esf
        INTO lv_n_esf
        WHERE pr_esf = lcl_report=>gc_out_inv
          AND n_esf  = lv_esf.
      IF sy-subrc <> 0.
        EXIT.
      ENDIF.
    ENDDO.

    ev_n_esf = lv_esf.
  ENDMETHOD.

  METHOD generate_esf_number.
    DATA(lv_doc_num) = COND #( WHEN is_fi_data-belnr_ish <> space THEN is_fi_data-belnr_ish(10) ELSE is_fi_data-belnr ). " DHVK943067

    TRY.
        ev_n_esf = |{ gv_taxnum }-{ sy-datum(4) }-{ lv_doc_num }|.
        ev_n_esf+17(2) = is_fi_data-bukrs.

        get_next_esf_number( EXPORTING iv_n_esf = ev_n_esf
                             IMPORTING ev_n_esf = DATA(lv_n_esf_new) ).   " если номер ЭСЧФ уже существует
        IF ev_n_esf <> lv_n_esf_new.
          ev_n_esf = lv_n_esf_new.
        ENDIF.
      CATCH cx_sy_itab_line_not_found.
        EXIT.
    ENDTRY.
  ENDMETHOD.

  METHOD get_fi_data.
    CLEAR: gt_fi_data,
           gt_fi_data_filtered,
           gt_fi_data_old.

    get_fi_docs( ).
    gt_fi_data_old = gt_fi_data.
    build_mode1_filter( ).
  ENDMETHOD.

  METHOD get_esf_data.
    CLEAR: gt_esf_data,
           gt_esf_roster,
           gt_esf_match,
           gt_esf_data_old,
           gt_esf_match_old.

    lcl_report_in=>get_esf_data( CHANGING et_data   = gt_esf_data
                                          et_roster = gt_esf_roster
                                          et_match  = gt_esf_match ).

    IF p_mode1 = 'X'.               " 8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      filter_esf_data( ).
    ENDIF.

    SORT gt_esf_data BY id_vid_iop_name
                        pr_esf
                        n_esf
                        dt_vs_esf.
    gt_esf_data_old  = gt_esf_data.
    gt_esf_match_old = gt_esf_match.

    " ЗАПЛАТКА, ПОКА НЕ РАЗОБРАЛСЯ TODO
    SORT gt_esf_roster BY n_esf
                          nnp.
    DELETE ADJACENT DUPLICATES FROM gt_esf_roster COMPARING ALL FIELDS.
  ENDMETHOD.

  METHOD enqueue_data_1.
    DATA lv_text    TYPE char100.
    DATA lv_refresh TYPE char1.

    LOOP AT it_good_cells ASSIGNING FIELD-SYMBOL(<ls_good_cels>) WHERE fieldname = 'CHK_BOX'.
      ASSIGN gt_fi_data_filtered[ <ls_good_cels>-row_id ] TO FIELD-SYMBOL(<ls_fi_data_filtered>).
      IF sy-subrc = 0.
        IF <ls_fi_data_filtered>-n_esf IS INITIAL.
          CASE <ls_good_cels>-value.
            WHEN abap_true.
              CALL FUNCTION 'ENQUEUE_EZFI_ESF_FI_LOCK'
                EXPORTING  mode_zfi_esf_fi_lock = 'E'
                           pr_esf               = lcl_report=>gc_out_inv
                           bukrs                = <ls_fi_data_filtered>-bukrs
                           belnr                = <ls_fi_data_filtered>-belnr
                           gjahr                = <ls_fi_data_filtered>-gjahr
                EXCEPTIONS foreign_lock         = 1
                           system_failure       = 2
                           OTHERS               = 3.
              IF sy-subrc <> 0.
                lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( sy-msgv1 )
                                          IMPORTING ev_full_name = lv_text ).
                lv_text = |{ 'Документ уже обрабатывается пользователем'(m47) } { lv_text }|.
                MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
                <ls_fi_data_filtered>-chk_box = abap_false.

                lv_refresh = abap_true.
                EXIT.
              ENDIF.
            WHEN abap_false.
              CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
                EXPORTING mode_zfi_esf_fi_lock = 'E'
                          pr_esf               = lcl_report=>gc_out_inv
                          bukrs                = <ls_fi_data_filtered>-bukrs
                          belnr                = <ls_fi_data_filtered>-belnr
                          gjahr                = <ls_fi_data_filtered>-gjahr.
          ENDCASE.
        ELSE.
          CASE <ls_good_cels>-value.
            WHEN abap_true.
              " блокируем  FI-документ
              CALL FUNCTION 'ENQUEUE_EZFI_ESF_FI_LOCK'
                EXPORTING  mode_zfi_esf_fi_lock = 'E'
                           pr_esf               = lcl_report=>gc_out_inv
                           bukrs                = <ls_fi_data_filtered>-bukrs
                           belnr                = <ls_fi_data_filtered>-belnr
                           gjahr                = <ls_fi_data_filtered>-gjahr
                EXCEPTIONS foreign_lock         = 1
                           system_failure       = 2
                           OTHERS               = 3.
              IF sy-subrc <> 0.
                lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( sy-msgv1 )
                                          IMPORTING ev_full_name = lv_text ).
                lv_text = |{ 'Документ уже обрабатывается пользователем'(m47) } { lv_text }|.
                MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
                <ls_fi_data_filtered>-chk_box = abap_false.

                lv_refresh = abap_true.
                EXIT.
              ENDIF.

              " Блокируем ЭСЧФ
              CALL FUNCTION 'ENQUEUE_EZFI_ESF'
                EXPORTING  mode_zfi_esf   = 'E'
                           mandt          = sy-mandt
                           pr_esf         = lcl_report=>gc_out_inv
                           n_esf          = <ls_fi_data_filtered>-n_esf
                EXCEPTIONS foreign_lock   = 1
                           system_failure = 2
                           OTHERS         = 3.
              IF sy-subrc <> 0.
                lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( sy-msgv1 )
                                          IMPORTING ev_full_name = lv_text ).
                lv_text = |{ 'ЭСЧФ уже обрабатывается пользователем'(m46) } { lv_text }|.
                MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
                <ls_fi_data_filtered>-chk_box = abap_false.

                lv_refresh = abap_true.
                EXIT.
              ENDIF.
            WHEN abap_false.
              " деблокируем  FI-документ
              CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
                EXPORTING mode_zfi_esf_fi_lock = 'E'
                          pr_esf               = lcl_report=>gc_out_inv
                          bukrs                = <ls_fi_data_filtered>-bukrs
                          belnr                = <ls_fi_data_filtered>-belnr
                          gjahr                = <ls_fi_data_filtered>-gjahr.

              " деблокируем ЭСЧФ
              CALL FUNCTION 'DEQUEUE_EZFI_ESF'
                EXPORTING mode_zfi_esf = 'E'
                          mandt        = sy-mandt
                          pr_esf       = lcl_report=>gc_out_inv
                          n_esf        = <ls_fi_data_filtered>-n_esf.
          ENDCASE.
        ENDIF.
      ENDIF.
      sy-subrc = 0.
    ENDLOOP.
    IF lv_refresh = abap_true.
      gr_grid_1->refresh_table_display( " is_stable = VALUE #( row = abap_true col = abap_true )
                                        i_soft_refresh = abap_true ).
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_data_2.
    DATA lv_text    TYPE char100.
    DATA lv_refresh TYPE char1.

    LOOP AT it_good_cells ASSIGNING FIELD-SYMBOL(<ls_good_cels>) WHERE fieldname = 'CHK_BOX'.
      ASSIGN gt_esf_data[ <ls_good_cels>-row_id ] TO FIELD-SYMBOL(<ls_esf_data>).
      IF sy-subrc = 0.
        " проверить не удалена ли запись
        SELECT SINGLE n_esf FROM zfi_esf
          " TODO: variable is assigned but never used (ABAP cleaner)
          INTO @DATA(lv_n_esf)
          WHERE pr_esf = @<ls_esf_data>-pr_esf
            AND n_esf  = @<ls_esf_data>-n_esf.
        IF sy-subrc <> 0.
          CLEAR <ls_esf_data>-chk_box.

          lv_text = <ls_esf_data>-n_esf.
          CONCATENATE lv_text ': ЭСЧФ был удален'(m44) INTO lv_text.
          CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
          MESSAGE lv_text TYPE 'I'.

          RETURN.
        ENDIF.

        CASE <ls_good_cels>-value.
          WHEN abap_true.
            CALL FUNCTION 'DEQUEUE_EZFI_ESF'    " чтобы избежать множественной блокировки
              EXPORTING mode_zfi_esf = 'E'
                        mandt        = sy-mandt
                        pr_esf       = <ls_esf_data>-pr_esf
                        n_esf        = <ls_esf_data>-n_esf.

            CALL FUNCTION 'ENQUEUE_EZFI_ESF'
              EXPORTING  mode_zfi_esf   = 'E'
                         mandt          = sy-mandt
                         pr_esf         = <ls_esf_data>-pr_esf
                         n_esf          = <ls_esf_data>-n_esf
              EXCEPTIONS foreign_lock   = 1
                         system_failure = 2
                         OTHERS         = 3.
            IF sy-subrc <> 0.
              lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( sy-msgv1 )
                                        IMPORTING ev_full_name = lv_text ).
              lv_text = |{ 'ЭСЧФ уже обрабатывается пользователем'(m46) } { lv_text }|.
              MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'E'.
              <ls_esf_data>-chk_box = abap_false.

              lv_refresh = abap_true.
              EXIT.
            ENDIF.
          WHEN abap_false.
            CALL FUNCTION 'DEQUEUE_EZFI_ESF'
              EXPORTING mode_zfi_esf = 'E'
                        mandt        = sy-mandt
                        pr_esf       = <ls_esf_data>-pr_esf
                        n_esf        = <ls_esf_data>-n_esf.
        ENDCASE.
      ENDIF.
      sy-subrc = 0.
    ENDLOOP.
    IF lv_refresh = abap_true.
      gr_grid_2->refresh_table_display( is_stable = VALUE #( row = abap_true
                                                             col = abap_true ) ).
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_all_fi.
    DATA lt_flt_sort TYPE SORTED TABLE OF i WITH UNIQUE KEY table_line.

    CLEAR lcl_report_in=>gt_fi_list.
    IF ir_grid IS BOUND.
      ir_grid->get_filtered_entries( IMPORTING et_filtered_entries = DATA(lt_flt)   ).
    ENDIF.
    lt_flt_sort = lt_flt.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>).
      IF line_exists( lt_flt_sort[ table_line = sy-tabix ] ).
        CONTINUE.
      ENDIF.
      CALL FUNCTION 'ENQUEUE_EZFI_ESF_FI_LOCK'
        EXPORTING  mode_zfi_esf_fi_lock = 'E'
                   pr_esf               = lcl_report=>gc_out_inv
                   bukrs                = <ls_fi_data_filtered>-bukrs
                   belnr                = <ls_fi_data_filtered>-belnr
                   gjahr                = <ls_fi_data_filtered>-gjahr
        EXCEPTIONS foreign_lock         = 1
                   system_failure       = 2
                   OTHERS               = 3.
      IF sy-subrc <> 0.
        READ TABLE lcl_report_in=>gt_fi_list TRANSPORTING NO FIELDS
             WITH KEY bukrs = <ls_fi_data_filtered>-bukrs
                      belnr = <ls_fi_data_filtered>-belnr
                      gjahr = <ls_fi_data_filtered>-gjahr
             BINARY SEARCH.
        IF sy-subrc <> 0.
          INSERT VALUE #( bukrs = <ls_fi_data_filtered>-bukrs
                          belnr = <ls_fi_data_filtered>-belnr
                          gjahr = <ls_fi_data_filtered>-gjahr ) INTO lcl_report_in=>gt_fi_list INDEX sy-tabix.
        ENDIF.
      ELSE.
        <ls_fi_data_filtered>-chk_box = abap_true.
      ENDIF.
    ENDLOOP.

    IF lcl_report_in=>gt_fi_list IS NOT INITIAL.
      lcl_report_in=>gv_detail_sign = 'LOCK_LIST_FI'.

      DATA(lv_lines) = lines( lcl_report_in=>gt_fi_list ).
      IF lv_lines < 21.
        lv_lines = lv_lines + 8.
      ELSE.
        lv_lines = 25.
      ENDIF.

      CALL SCREEN 1010 STARTING AT 20 8 ENDING AT 105 lv_lines.
    ENDIF.
  ENDMETHOD.

  METHOD enqueue_all_esf.
    DATA lt_flt_sort TYPE SORTED TABLE OF i WITH UNIQUE KEY table_line.
    DATA lt_esf_list TYPE TABLE OF lcl_report_in=>gty_s_esf_list.

    CLEAR lcl_report_in=>gt_esf_list.
    IF ir_grid IS BOUND.
      ir_grid->get_filtered_entries( IMPORTING et_filtered_entries = DATA(lt_flt)   ).
    ENDIF.
    lt_flt_sort = lt_flt.
    lt_esf_list = VALUE #( FOR ls_data IN gt_esf_data
                           ( pr_esf = ls_data-pr_esf
                             n_esf  = ls_data-n_esf ) ).

    IF lt_esf_list IS INITIAL.
      RETURN.
    ENDIF.

    SELECT n_esf FROM zfi_esf
      INTO TABLE @DATA(lt_esf_new)
      FOR ALL ENTRIES IN @lt_esf_list
      WHERE pr_esf = @lt_esf_list-pr_esf
        AND n_esf  = @lt_esf_list-n_esf.
    SORT lt_esf_new BY n_esf.

    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_false.
      IF line_exists( lt_flt_sort[ table_line = sy-tabix ] ).
        CONTINUE.
      ENDIF.
      READ TABLE lt_esf_new TRANSPORTING NO FIELDS
           WITH KEY n_esf = <ls_esf_data>-n_esf
           BINARY SEARCH.
      IF sy-subrc = 0.
        CALL FUNCTION 'ENQUEUE_EZFI_ESF'
          EXPORTING  mode_zfi_esf   = 'E'
                     mandt          = sy-mandt
                     pr_esf         = <ls_esf_data>-pr_esf
                     n_esf          = <ls_esf_data>-n_esf
          EXCEPTIONS foreign_lock   = 1
                     system_failure = 2
                     OTHERS         = 3.
        IF sy-subrc <> 0.
          READ TABLE lcl_report_in=>gt_esf_list TRANSPORTING NO FIELDS
               WITH KEY n_esf = <ls_esf_data>-n_esf
               BINARY SEARCH.
          IF sy-subrc <> 0.
            INSERT VALUE #( n_esf = <ls_esf_data>-n_esf ) INTO lcl_report_in=>gt_esf_list INDEX sy-tabix.
          ENDIF.
        ELSE.
          <ls_esf_data>-chk_box = abap_true.
        ENDIF.
      ELSE.
        INSERT VALUE #( n_esf = <ls_esf_data>-n_esf ) INTO lcl_report_in=>gt_esf_list INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    IF lcl_report_in=>gt_esf_list IS NOT INITIAL.
      lcl_report_in=>gv_detail_sign = 'LOCK_LIST_ESF'.

      DATA(lv_lines) = lines( lcl_report_in=>gt_esf_list ).
      IF lv_lines < 21.
        lv_lines = lv_lines + 8.
      ELSE.
        lv_lines = 25.
      ENDIF.

      CALL SCREEN 1010 STARTING AT 35 8 ENDING AT 105 lv_lines.
    ENDIF.
  ENDMETHOD.

  METHOD dequeue_all_fi.
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_filtered>) WHERE chk_box = abap_true.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
        EXPORTING mode_zfi_esf_fi_lock = 'E'
                  pr_esf               = lcl_report=>gc_out_inv
                  bukrs                = <ls_fi_data_filtered>-bukrs
                  belnr                = <ls_fi_data_filtered>-belnr
                  gjahr                = <ls_fi_data_filtered>-gjahr.
      IF sy-subrc = 0.
        CLEAR <ls_fi_data_filtered>-chk_box.
      ENDIF.

      IF <ls_fi_data_filtered>-n_esf IS NOT INITIAL.
        CALL FUNCTION 'DEQUEUE_EZFI_ESF'
          EXPORTING mode_zfi_esf = 'E'
                    mandt        = sy-mandt
                    pr_esf       = lcl_report=>gc_out_inv
                    n_esf        = <ls_fi_data_filtered>-n_esf.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD dequeue_all_esf.
    LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data>) WHERE chk_box = abap_true.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING mode_zfi_esf = 'E'
                  mandt        = sy-mandt
                  pr_esf       = <ls_esf_data>-pr_esf
                  n_esf        = <ls_esf_data>-n_esf.
      IF sy-subrc = 0.
        CLEAR <ls_esf_data>-chk_box.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD refresh_data.
    IF iv_question = abap_true.
      DATA(lv_answer) = lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                                         iv_text_question = 'Обновить данные?'(m49) ).
    ELSE.
      lv_answer = '1'.
    ENDIF.

    IF lv_answer = '1'.
      CASE gv_mode.
        WHEN gc_mode1.
          CLEAR: gt_fi_data,
                 gt_fi_data_filtered,
                 gt_fi_data_old.

          get_fi_docs( ).
          build_mode1_filter( ).
          gt_fi_data_old = gt_fi_data.

          get_esf_data( ).
        WHEN gc_mode2.
          get_esf_data( ).
        WHEN gc_mode4.                     " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
          CLEAR: gt_fi_data,
                 gt_fi_data_filtered,
                 gt_fi_data_old.

          get_esf_data( ).                 " Получение данных ЭСЧФ из БД

          get_fi_docs( ).                  " Получение данных FI-документов
          build_mode1_filter( ).
          gt_fi_data_old = gt_fi_data.
      ENDCASE.
    ELSE.
      RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD fill_ucomm_range.
    lcl_report=>gr_save = VALUE #( sign   = 'I'
                                   option = 'EQ'
                                   ( low = 'MODE1_CREATE' )
                                   ( low = 'MODE1_CANCEL' )
                                   ( low = 'MODE1_MASS_CREATE' )  " #25733 Массовое создание исходящих ЭСЧФ
                                   ( low = 'MODE2_APPROVE_NULL' )
                                   ( low = 'MODE2_DEL_RELATION' )
                                   ( low = 'MODE2_CHECKED_STATUS_ADD' )
                                   ( low = 'MODE2_CHECKED_STATUS_DEL' )
                                   ( low = 'MODE2_COPY_33' )
                                   ( low = 'MODE2_GET_STATUS' ) ).    "#7

    lcl_report=>gr_leave = VALUE #( sign   = 'I'
                                    option = 'EQ'
                                    ( low = 'MODE2_APPROVE_NULL' )
                                    ( low = 'MODE2_GET_STATUS' )
                                    ( low = 'MODE2_DEL_RELATION' )
                                    ( low = 'MODE2_CHECKED_STATUS_ADD' )
                                    ( low = 'MODE2_CHECKED_STATUS_DEL' )
                                    ( low = 'MODE2_SIGNATURE' ) ).
  ENDMETHOD.

  METHOD check_changed_esf_data.
    " iv_mode :  S  - Standard, H - Hotspot
    " iv_alert: 'X' - Show message

    TYPES:
      BEGIN OF lty_s_esf_new,
        pr_esf    TYPE zfi_esf-pr_esf,
        n_esf     TYPE zfi_esf-n_esf,
        last_user TYPE zfi_esf-last_user,
        tstampl   TYPE zfi_esf-tstampl,
      END OF lty_s_esf_new.

    DATA lt_esf_new TYPE SORTED TABLE OF lty_s_esf_new WITH NON-UNIQUE KEY pr_esf n_esf.
    DATA lv_text    TYPE char100.

    " Формируем список по ESF
    IF iv_mode = 'H'.
      lcl_report_in=>gt_esf_list = VALUE #( FOR ls_data IN gt_esf_data WHERE (     pr_esf = lcl_report=>gv_pr_esf
                                                                               AND n_esf  = lcl_report=>gv_n_esf )
                                            ( pr_esf = ls_data-pr_esf
                                              n_esf  = ls_data-n_esf ) ).
    ELSE.
      lcl_report_in=>gt_esf_list = VALUE #( FOR ls_data IN gt_esf_data WHERE ( chk_box = abap_true )
                                            ( pr_esf = ls_data-pr_esf n_esf = ls_data-n_esf ) ).
    ENDIF.

    IF lcl_report_in=>gt_esf_list IS NOT INITIAL.
      SELECT pr_esf n_esf last_user tstampl
        FROM zfi_esf
        INTO TABLE lt_esf_new
        FOR ALL ENTRIES IN lcl_report_in=>gt_esf_list
        WHERE pr_esf = lcl_report_in=>gt_esf_list-pr_esf
          AND n_esf  = lcl_report_in=>gt_esf_list-n_esf.

      IF iv_mode = 'H'.
        ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf
                            n_esf  = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_data>).
        IF sy-subrc = 0.
          ASSIGN lt_esf_new[ pr_esf = lcl_report=>gv_pr_esf
                             n_esf  = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf_new>).
          IF sy-subrc = 0.
            IF <ls_esf_new>-tstampl > <ls_data>-tstampl.
              lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( <ls_esf_new>-last_user )
                                        IMPORTING ev_full_name = lv_text ).
              IF iv_alert = abap_true.
                CONCATENATE 'ЭСЧФ был изменен пользователем'(m55) lv_text INTO lv_text SEPARATED BY space.
                CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
                MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'W'.
              ENDIF.
              rv_error = abap_true.
            ENDIF.
          ENDIF.
        ELSE.
          IF iv_alert = abap_true.
            lv_text = lcl_report=>gv_n_esf.
            CONCATENATE lv_text ': ЭСЧФ был удален'(m44) INTO lv_text.
            CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
            MESSAGE lv_text TYPE 'I'.
          ENDIF.
          rv_error = abap_true.
        ENDIF.
        IF rv_error = abap_true.
          FREE lcl_report_in=>gt_esf_list.
          RETURN.
        ENDIF.
      ELSE.
        LOOP AT gt_esf_data ASSIGNING <ls_data> WHERE chk_box = abap_true.
          LOOP AT lt_esf_new ASSIGNING <ls_esf_new> WHERE n_esf = <ls_data>-n_esf.
            IF <ls_esf_new>-tstampl > <ls_data>-tstampl.
              lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( <ls_esf_new>-last_user )
                                        IMPORTING ev_full_name = lv_text ).
              IF iv_alert = abap_true.
                CONCATENATE 'ЭСЧФ были изменены пользователем'(m30) lv_text INTO lv_text SEPARATED BY space.
                CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
                MESSAGE lv_text TYPE 'I'.
              ENDIF.

              rv_error = abap_true.
              FREE lcl_report_in=>gt_esf_list.
              RETURN.
            ENDIF.
            sy-subrc = 0.
          ENDLOOP.
          IF sy-subrc <> 0.
            IF iv_alert = abap_true.
              lv_text = <ls_data>-n_esf.
              CONCATENATE lv_text ': ЭСЧФ был удален'(m44) INTO lv_text.
              CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
              MESSAGE lv_text TYPE 'I'.
            ENDIF.
            rv_error = abap_true.
            FREE lcl_report_in=>gt_esf_list.
            RETURN.
          ENDIF.
        ENDLOOP.
      ENDIF.
      FREE lcl_report_in=>gt_esf_list.

    ELSE.
*      IF iv_alert = abap_true.
*        CONCATENATE 'ЭСЧФ была изменена'(m57) lv_text INTO lv_text SEPARATED BY space.
*        CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
*        MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'W'.
*      ENDIF.
*      rv_error = abap_true.
*      FREE lcl_report_in=>gt_esf_list.
    ENDIF.
  ENDMETHOD.

  METHOD check_changed_fi_data.
    DATA lt_fi_data   TYPE SORTED TABLE OF zcl_fi_esf_amdp=>gty_s_fi_data WITH NON-UNIQUE KEY n_esf bukrs belnr gjahr.
    DATA lt_esf_match TYPE TABLE OF zfi_esf_match.
    DATA lv_text      TYPE char100.

    lt_fi_data = VALUE #( FOR ls_fi_data IN gt_fi_data_filtered
                          WHERE ( chk_box = abap_true )
                          ( n_esf = ls_fi_data-n_esf
                            bukrs = ls_fi_data-bukrs
                            belnr = ls_fi_data-belnr
                            gjahr = ls_fi_data-gjahr ) ).

    IF lt_fi_data IS INITIAL.
      RETURN.
    ENDIF.

    SELECT m~n_esf,
           m~bukrs,
           m~belnr,
           m~gjahr
      FROM zfi_esf_match AS m
             JOIN
               zfi_esf AS e ON  e~n_esf          = m~n_esf
                            AND e~id_stat_esf_p <> @lcl_report=>gc_stat_p_cancelled
                            AND e~id_stat_esf_v <> @lcl_report=>gc_stat_v_cancelled
      INTO CORRESPONDING FIELDS OF TABLE @lt_esf_match
      FOR ALL ENTRIES IN @lt_fi_data
      WHERE m~pr_esf = @lcl_report=>gc_out_inv
        AND m~bukrs  = @lt_fi_data-bukrs
        AND m~belnr  = @lt_fi_data-belnr
        AND m~gjahr  = @lt_fi_data-gjahr.

    SORT lt_esf_match BY bukrs
                         belnr
                         gjahr.

    LOOP AT lt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data>).
      READ TABLE lt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>)
           WITH KEY bukrs = <ls_fi_data>-bukrs
                    belnr = <ls_fi_data>-belnr
                    gjahr = <ls_fi_data>-gjahr
           BINARY SEARCH.
      IF sy-subrc = 0.
        IF    lcl_report=>gv_ucomm = 'MODE1_CREATE'
           OR lcl_report=>gv_ucomm = 'MODE1_MASS_CREATE'.  " #25733 Массовое создание исходящих ЭСЧФ
          CONCATENATE 'Документ' <ls_esf_match>-bukrs <ls_esf_match>-belnr <ls_esf_match>-gjahr 'уже связан с ЭСЧФ' <ls_esf_match>-n_esf INTO lv_text SEPARATED BY space.
          CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
          MESSAGE lv_text TYPE 'I'.
          rv_error = abap_true.
        ENDIF.
      ELSE.
        IF <ls_fi_data>-n_esf IS NOT INITIAL.   " на экране видно что создано, а по факту уже откатили
          CONCATENATE 'ЭСЧФ' <ls_fi_data>-n_esf 'была изменена. Обновите данные'(m56) INTO lv_text SEPARATED BY space.
          MESSAGE lv_text TYPE 'I'.
          rv_error = abap_true.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD save_data.
    " Только для mode2: S - Standard save, H - Hotspot save

    DATA ls_esf_data      TYPE zfi_esf.
    DATA lt_esf_roster    TYPE zcl_fi_esf_amdp=>gty_t_roster.
*      lt_esf_roster_del  TYPE zfi_t_esf_roster,
    DATA lt_esf_match_upd TYPE zcl_fi_esf_amdp=>gty_t_match_data.

*    DATA lt_esf_match_del  TYPE zcl_fi_esf_amdp=>gty_t_match_data.
*      lt_esf_roster_upd  TYPE zfi_t_esf_roster.

    CASE gv_mode.
      WHEN gc_mode1.   " CREATE mode
        LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
          LOOP AT gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>) WHERE     bukrs = <ls_fi_data>-bukrs
                                                                            AND belnr = <ls_fi_data>-belnr
                                                                            AND gjahr = <ls_fi_data>-gjahr.
            " ZFI_ESF
            ASSIGN gt_esf_data[ pr_esf = <ls_esf_match>-pr_esf
                                n_esf  = <ls_esf_match>-n_esf ] TO FIELD-SYMBOL(<ls_esf_data>).
            IF sy-subrc <> 0.
              CONTINUE.
            ENDIF.

            IF <ls_esf_match>-del_flg = abap_true.
              " ZFI_ESF
              DELETE FROM zfi_esf WHERE pr_esf = <ls_esf_match>-pr_esf
                                    AND n_esf  = <ls_esf_match>-n_esf.

              " ZFI_ESF_ROSTER
              DELETE FROM zfi_esf_roster WHERE pr_esf = <ls_esf_match>-pr_esf
                                           AND n_esf  = <ls_esf_match>-n_esf.

              " ZFI_ESF_MATCH
              DELETE FROM zfi_esf_match WHERE pr_esf = <ls_esf_match>-pr_esf
                                          AND n_esf  = <ls_esf_match>-n_esf.
            ELSE.
              " ZFI_ESF
              MOVE-CORRESPONDING <ls_esf_data> TO ls_esf_data.
              MODIFY zfi_esf FROM ls_esf_data.
              CLEAR ls_esf_data.

              " ZFI_ESF_ROSTER
              lt_esf_roster = VALUE #( FOR ls_roster IN gt_esf_roster WHERE ( pr_esf = <ls_esf_data>-pr_esf AND n_esf = <ls_esf_data>-n_esf )
                                       ( ls_roster ) ).

              MODIFY zfi_esf_roster FROM TABLE lt_esf_roster.

              " ZFI_ESF_MATCH
              MODIFY zfi_esf_match FROM <ls_esf_match>.
            ENDIF.
          ENDLOOP.

          COMMIT WORK AND WAIT.

          CALL FUNCTION 'DEQUEUE_EZFI_ESF_FI_LOCK'
            EXPORTING mode_zfi_esf_fi_lock = 'E'
                      pr_esf               = lcl_report=>gc_out_inv
                      bukrs                = <ls_fi_data>-bukrs
                      belnr                = <ls_fi_data>-belnr
                      gjahr                = <ls_fi_data>-gjahr.
          IF sy-subrc = 0.
            CLEAR <ls_fi_data>-chk_box.
          ENDIF.

          IF <ls_fi_data>-n_esf IS NOT INITIAL AND lcl_report=>gv_ucomm = 'MODE1_CANCEL'.
            CALL FUNCTION 'DEQUEUE_EZFI_ESF'
              EXPORTING mode_zfi_esf = 'E'
                        mandt        = sy-mandt
                        pr_esf       = lcl_report=>gc_out_inv
                        n_esf        = <ls_fi_data>-n_esf.

            CLEAR <ls_fi_data>-n_esf.
          ENDIF.
        ENDLOOP.

        DELETE gt_esf_data WHERE del_flg = abap_true.
        DELETE gt_esf_match WHERE del_flg = abap_true.
        DELETE gt_esf_roster WHERE del_flg = abap_true.
      WHEN gc_mode2.   " CHANGE mode
        IF iv_mode = 'S'. " Standard
          LOOP AT gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE chk_box = abap_true.
            IF <ls_data>-del_flg = abap_true.
              DELETE FROM zfi_esf WHERE pr_esf = <ls_data>-pr_esf
                                    AND n_esf  = <ls_data>-n_esf.
            ELSE.
              MOVE-CORRESPONDING <ls_data> TO ls_esf_data.
              MODIFY zfi_esf FROM ls_esf_data.
              CLEAR ls_esf_data.
            ENDIF.

            LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_data>-pr_esf
                                                                AND n_esf  = <ls_data>-n_esf.
              IF <ls_esf_match>-del_flg = abap_true.
                DELETE FROM zfi_esf_match WHERE pr_esf = <ls_esf_match>-pr_esf
                                            AND n_esf  = <ls_esf_match>-n_esf
                                            AND bukrs  = <ls_esf_match>-bukrs
                                            AND belnr  = <ls_esf_match>-belnr
                                            AND gjahr  = <ls_esf_match>-gjahr.
              ELSE.
                MODIFY zfi_esf_match FROM <ls_esf_match>.
              ENDIF.
            ENDLOOP.

            DELETE FROM zfi_esf_roster WHERE pr_esf = <ls_data>-pr_esf
                                         AND n_esf  = <ls_data>-n_esf.

            lt_esf_roster = VALUE #( FOR ls_roster IN gt_esf_roster WHERE ( pr_esf = <ls_data>-pr_esf AND n_esf = <ls_data>-n_esf )
                                     ( ls_roster ) ).
            DELETE lt_esf_roster WHERE del_flg = abap_true.

            MODIFY zfi_esf_roster FROM TABLE lt_esf_roster.
            COMMIT WORK AND WAIT.

            CALL FUNCTION 'DEQUEUE_EZFI_ESF'
              EXPORTING mode_zfi_esf = 'E'
                        mandt        = sy-mandt
                        pr_esf       = <ls_data>-pr_esf
                        n_esf        = <ls_data>-n_esf.
          ENDLOOP.

*          clear_detail( ).

          DELETE gt_esf_data WHERE del_flg = abap_true.
          DELETE gt_esf_match WHERE del_flg = abap_true.
          DELETE gt_esf_roster WHERE del_flg = abap_true.
        ELSEIF iv_mode = 'H'. " Hotspot
          IF lcl_report=>gv_lock_error = abap_false.
            ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf
                                n_esf  = lcl_report=>gv_n_esf ] TO <ls_esf_data>.
            IF sy-subrc = 0.

              " #8000000666 При снятии флага "НДС по курсовым разницам" для 31 и 33 типа ЭСЧФ. Ловим такую ситуацию
              SELECT SINGLE currency_dif_nds INTO @DATA(lv_currency_dif_nds)
                FROM zfi_esf
                WHERE pr_esf = @<ls_esf_data>-pr_esf
                  AND n_esf  = @<ls_esf_data>-n_esf.

              IF     <ls_esf_data>-currency_dif_nds = '' AND lv_currency_dif_nds = 'X'
                 AND ( <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_31 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_33 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_64 ).
                DATA(lv_diff_out) = 'X'.
              ENDIF.

              " #8000000666 При установке флага "НДС по курсовым разницам" для 31 и 33 типа ЭСЧФ. Ловим такую ситуацию
              IF     <ls_esf_data>-currency_dif_nds = 'X' AND lv_currency_dif_nds = ''
                 AND ( <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_31 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_33 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_64 ).
                DATA(lv_diff_set) = 'X'.
              ENDIF.
              "

              MOVE-CORRESPONDING <ls_esf_data> TO ls_esf_data.   " header

              MODIFY zfi_esf FROM ls_esf_data.
              CLEAR ls_esf_data.

              IF lv_diff_out IS INITIAL AND lv_diff_set IS INITIAL. " #8000000666

                LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                    AND n_esf  = <ls_esf_data>-n_esf.
                  IF <ls_esf_match>-del_flg = abap_true.
                    DELETE FROM zfi_esf_match WHERE pr_esf = <ls_esf_match>-pr_esf
                                                AND n_esf  = <ls_esf_match>-n_esf
                                                AND bukrs  = <ls_esf_match>-bukrs
                                                AND belnr  = <ls_esf_match>-belnr
                                                AND gjahr  = <ls_esf_match>-gjahr.
                  ELSE.
                    MODIFY zfi_esf_match FROM <ls_esf_match>.
                  ENDIF.
                ENDLOOP.

                lt_esf_roster = VALUE #( FOR ls_roster IN gt_esf_roster WHERE (     pr_esf = <ls_esf_data>-pr_esf
                                                                                AND n_esf  = <ls_esf_data>-n_esf )
                                         ( ls_roster ) ).
                IF lt_esf_roster IS NOT INITIAL.
                  DELETE FROM zfi_esf_roster WHERE pr_esf = <ls_esf_data>-pr_esf
                                               AND n_esf  = <ls_esf_data>-n_esf.
                  MODIFY zfi_esf_roster FROM TABLE lt_esf_roster.
                ENDIF.

                COMMIT WORK AND WAIT.

              ELSEIF lv_diff_out IS NOT INITIAL.
                " #8000000666 При снятии флага "НДС по курсовым разницам" для 31 и 33 типа ЭСЧФ
                " 1. В таблицу ZFI_ESF_MATCH подтягивать значения из бухгалтерского документа, по которому выставлено ЭСЧФ
                " 2. В таблице ZFI_ESF_ROSTER оставить последние введенные данные

** удаление текущих позиционных данных ЭСЧФ в ZFI_ESF_MATCH
*                CLEAR: lt_esf_match_del, lt_esf_match_del[].
*
*                LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE pr_esf = <ls_esf_data>-pr_esf
*                                                                AND n_esf = <ls_esf_data>-n_esf.
*                  IF NOT gt_esf_match IS INITIAL.
*                    APPEND INITIAL LINE TO lt_esf_match_del ASSIGNING FIELD-SYMBOL(<ls_esf_match_del>).
*                    MOVE-CORRESPONDING <ls_esf_match> TO <ls_esf_match_del>.
*                    DELETE gt_esf_match WHERE pr_esf = <ls_esf_match>-pr_esf
*                                         AND n_esf  = <ls_esf_match>-n_esf
*                                         AND bukrs  = <ls_esf_match>-bukrs
*                                         AND belnr  = <ls_esf_match>-belnr
*                                         AND gjahr  = <ls_esf_match>-gjahr.
*                  ENDIF.
*                ENDLOOP.
*
*                lt_esf_roster_del =  VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( n_esf = <ls_esf_data>-n_esf ) ( CORRESPONDING  zfi_esf_roster( ls_esf_roster ) ) ).
*
*
*                LOOP AT lt_esf_roster_del ASSIGNING FIELD-SYMBOL(<ls_esf_roster_del>).
*                  IF NOT gt_esf_roster IS INITIAL.
*                    DELETE gt_esf_roster WHERE pr_esf = <ls_esf_roster_del>-pr_esf
*                                           AND n_esf = <ls_esf_roster_del>-n_esf
*                                           AND nnp = <ls_esf_roster_del>-nnp.
*                  ENDIF.
*                ENDLOOP.
*
*
*                IF lt_esf_match_del[] IS NOT INITIAL.
*                  DELETE zfi_esf_match FROM TABLE lt_esf_match_del.
*                ENDIF.
*
*                IF lt_esf_roster_del[] IS NOT INITIAL.
*                  DELETE zfi_esf_roster FROM TABLE lt_esf_roster_del.
*                ENDIF.
*                COMMIT WORK AND WAIT.
*
*                CLEAR gt_fi_data.
*                get_fi_data( ).
*
** получить данные позиций ЭСЧФ
*                CASE <ls_esf_data>-id_vid_iop.
*                  WHEN gc_31.
*                    get_data_items_doc_31( lcl_report=>gv_n_esf ).
*                  WHEN gc_33.
*                    get_data_items_doc_33( lcl_report=>gv_n_esf ).
*                ENDCASE.
*
*                SORT gt_esf_match BY pr_esf n_esf bukrs belnr gjahr.
*                DELETE ADJACENT DUPLICATES FROM gt_esf_match COMPARING pr_esf n_esf bukrs belnr gjahr.
*
*                SORT gt_esf_roster BY pr_esf n_esf nnp.
*                DELETE ADJACENT DUPLICATES FROM gt_esf_roster COMPARING pr_esf n_esf nnp.

* обновление в ZFI_ESF_MATCH
*                CLEAR: lt_esf_match_upd, lt_esf_match_upd[].
*
*                LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE pr_esf = <ls_esf_data>-pr_esf
*                                                                AND n_esf = <ls_esf_data>-n_esf.
*                  APPEND INITIAL LINE TO lt_esf_match_upd ASSIGNING FIELD-SYMBOL(<ls_esf_match_upd>).
*                  MOVE-CORRESPONDING <ls_esf_match> TO <ls_esf_match_upd>.
*                ENDLOOP.
*
*
**                lt_esf_roster_upd =  VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( n_esf = <ls_esf_data>-n_esf ) ( CORRESPONDING  zfi_esf_roster( ls_esf_roster ) ) ).
*
*                IF lt_esf_match_upd[] IS NOT INITIAL.
*                  MODIFY zfi_esf_match FROM TABLE lt_esf_match_upd.
*
*                ENDIF.

*                IF lt_esf_roster_upd[] IS NOT INITIAL.
*                  MODIFY zfi_esf_roster FROM TABLE lt_esf_roster_upd.
*                ENDIF.

** обновление сумм в ZFI_ESF
**                ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf n_esf = lcl_report=>gv_n_esf ] TO <ls_esf_data>.
*
*                <ls_esf_data>-last_user = sy-uname.
*                <ls_esf_data>-aedat = sy-datum.
*                GET TIME STAMP FIELD <ls_esf_data>-tstampl.
*
*                CLEAR: <ls_esf_data>-sum_nonds,
*                       <ls_esf_data>-sum_excise,
*                       <ls_esf_data>-sum_nds,
*                       <ls_esf_data>-sum_snds.
*
*                LOOP AT lt_esf_roster_upd ASSIGNING FIELD-SYMBOL(<ls_roster_upd>).
*                  <ls_esf_data>-sum_nonds = <ls_esf_data>-sum_nonds + <ls_roster_upd>-nonds.
*                  <ls_esf_data>-sum_excise = <ls_esf_data>-sum_excise + <ls_roster_upd>-excise.
*                  <ls_esf_data>-sum_nds = <ls_esf_data>-sum_nds + <ls_roster_upd>-nds.
*                  <ls_esf_data>-sum_snds = <ls_esf_data>-sum_snds + <ls_roster_upd>-snds.
*                ENDLOOP.
*
*
*                CLEAR ls_esf_data.
*                MOVE-CORRESPONDING <ls_esf_data> TO ls_esf_data.   "header
*                MODIFY zfi_esf FROM ls_esf_data.

                IF <ls_esf_data>-belnr <> '->'. " по одному бухдоку

                  ASSIGN gt_esf_match[ pr_esf = <ls_esf_data>-pr_esf
                                       n_esf  = <ls_esf_data>-n_esf
                                       bukrs  = <ls_esf_data>-bukrs
                                       belnr  = <ls_esf_data>-belnr
                                       gjahr  = <ls_esf_data>-gjahr ] TO <ls_esf_match>.

                  IF sy-subrc = 0 AND <ls_esf_match>-bukrs IS NOT INITIAL AND <ls_esf_match>-belnr IS NOT INITIAL AND <ls_esf_match>-gjahr IS NOT INITIAL.
                    " ищем данные сумм из ссылочного бухдока согласно ZFI_ESF_MATCH
                    CLEAR gt_fi_data.
                    get_reffi_doc_data( iv_bukrs = <ls_esf_data>-bukrs
                                        iv_belnr = <ls_esf_data>-belnr
                                        iv_gjahr = <ls_esf_data>-gjahr ).

                    ASSIGN gt_fi_data[ bukrs = <ls_esf_match>-bukrs
                                       belnr = <ls_esf_match>-belnr
                                       gjahr = <ls_esf_match>-gjahr ] TO FIELD-SYMBOL(<ls_fi_data_n>).

                    CLEAR: <ls_esf_match>-sum_nonds,
                           <ls_esf_match>-sum_nds,
                           <ls_esf_match>-sum_snds.

                    <ls_esf_match>-sum_nds   = <ls_fi_data_n>-total_vat.
                    <ls_esf_match>-sum_snds  = <ls_fi_data_n>-total_w_vat.
                    <ls_esf_match>-sum_nonds = <ls_fi_data_n>-total_w_vat - <ls_fi_data_n>-total_vat.

                    " обновление сумм в ZFI_ESF_MATCH
                    MODIFY zfi_esf_match FROM <ls_esf_match>.
                  ENDIF.

                ELSE.  " по нескольким бухдокам

                  LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                      AND n_esf  = <ls_esf_data>-n_esf.

                    IF <ls_esf_match>-bukrs IS INITIAL OR <ls_esf_match>-belnr IS INITIAL OR <ls_esf_match>-gjahr IS INITIAL.
                      CONTINUE.
                    ENDIF.

                    " ищем данные сумм из ссылочного бухдока согласно ZFI_ESF_MATCH
                    CLEAR gt_fi_data.
                    get_reffi_doc_data( iv_bukrs = <ls_esf_match>-bukrs
                                        iv_belnr = <ls_esf_match>-belnr
                                        iv_gjahr = <ls_esf_match>-gjahr ).

                    ASSIGN gt_fi_data[ bukrs = <ls_esf_match>-bukrs
                                       belnr = <ls_esf_match>-belnr
                                       gjahr = <ls_esf_match>-gjahr ] TO FIELD-SYMBOL(<ls_fi_data_l>).

                    CLEAR: <ls_esf_match>-sum_nonds,
                           <ls_esf_match>-sum_nds,
                           <ls_esf_match>-sum_snds.

                    <ls_esf_match>-sum_nds   = <ls_fi_data_l>-total_vat.
                    <ls_esf_match>-sum_snds  = <ls_fi_data_l>-total_w_vat.
                    <ls_esf_match>-sum_nonds = <ls_fi_data_l>-total_w_vat - <ls_fi_data_l>-total_vat.

                    " обновление сумм в ZFI_ESF_MATCH
                    MODIFY zfi_esf_match FROM <ls_esf_match>.
                  ENDLOOP.

                ENDIF.

                COMMIT WORK AND WAIT.
                refresh_data( abap_false ).

                MESSAGE s000(zmm) WITH 'Данные таб. ZFI_ESF_MATCH обновлены из документа'.

              ELSEIF lv_diff_set IS NOT INITIAL.
                " #8000000666 При установленном флаге "НДС по курсовым разницам" для 31 и 33 типа ЭСЧФ
                " 1. В таблицу ZFI_ESF_MATCH подтягивать значения из позиций ЭСЧФ (если ->, то суммы записываем в 1 бухдок, в остальных обнуляем)
                " 2. В таблице ZFI_ESF_ROSTER оставить последние введенные данные

                " обновление в ZFI_ESF_MATCH согласно ZFI_ESF_ROSTER
                IF <ls_esf_data>-belnr <> '->'. " по одному бухдоку

                  CLEAR: lt_esf_match_upd,
                         lt_esf_match_upd[].

                  LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                      AND n_esf  = <ls_esf_data>-n_esf.
                    APPEND INITIAL LINE TO lt_esf_match_upd ASSIGNING FIELD-SYMBOL(<ls_esf_match_upd>).
                    MOVE-CORRESPONDING <ls_esf_match> TO <ls_esf_match_upd>.
                  ENDLOOP.

                  LOOP AT lt_esf_match_upd ASSIGNING <ls_esf_match_upd>.
                    CLEAR: <ls_esf_match_upd>-sum_nonds,
                           <ls_esf_match_upd>-sum_excise,
                           <ls_esf_match_upd>-sum_nds,
                           <ls_esf_match_upd>-sum_snds.

                    LOOP AT gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_roster>) WHERE     pr_esf = <ls_esf_match_upd>-pr_esf
                                                                                    AND n_esf  = <ls_esf_match_upd>-n_esf.
                      <ls_esf_match_upd>-sum_nonds  = <ls_esf_match_upd>-sum_nonds + <ls_roster>-nonds.
                      <ls_esf_match_upd>-sum_excise = <ls_esf_match_upd>-sum_excise + <ls_roster>-excise.
                      <ls_esf_match_upd>-sum_nds    = <ls_esf_match_upd>-sum_nds + <ls_roster>-nds.
                      <ls_esf_match_upd>-sum_snds   = <ls_esf_match_upd>-sum_snds + <ls_roster>-snds.
                    ENDLOOP.
                  ENDLOOP.

                  IF lt_esf_match_upd[] IS NOT INITIAL.
                    MODIFY zfi_esf_match FROM TABLE lt_esf_match_upd.
                  ENDIF.

                ELSE.  " по нескольким бухдокам (записываем суммы в 1 строку, остальные обнуляем)

                  SORT gt_esf_match BY pr_esf
                                       n_esf
                                       gjahr
                                       bukrs
                                       belnr.
                  LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                                      AND n_esf  = <ls_esf_data>-n_esf.
                    APPEND INITIAL LINE TO lt_esf_match_upd ASSIGNING <ls_esf_match_upd>.
                    MOVE-CORRESPONDING <ls_esf_match> TO <ls_esf_match_upd>.
                  ENDLOOP.

                  LOOP AT lt_esf_match_upd ASSIGNING <ls_esf_match_upd>.
                    IF sy-tabix = 1.
                      CLEAR: <ls_esf_match_upd>-sum_nonds,
                             <ls_esf_match_upd>-sum_excise,
                             <ls_esf_match_upd>-sum_nds,
                             <ls_esf_match_upd>-sum_snds.

                      LOOP AT gt_esf_roster ASSIGNING <ls_roster> WHERE     pr_esf = <ls_esf_match_upd>-pr_esf
                                                                        AND n_esf  = <ls_esf_match_upd>-n_esf.
                        <ls_esf_match_upd>-sum_nonds  = <ls_esf_match_upd>-sum_nonds + <ls_roster>-nonds.
                        <ls_esf_match_upd>-sum_excise = <ls_esf_match_upd>-sum_excise + <ls_roster>-excise.
                        <ls_esf_match_upd>-sum_nds    = <ls_esf_match_upd>-sum_nds + <ls_roster>-nds.
                        <ls_esf_match_upd>-sum_snds   = <ls_esf_match_upd>-sum_snds + <ls_roster>-snds.
                      ENDLOOP.
                    ELSE.
                      CLEAR: <ls_esf_match_upd>-sum_nonds,
                             <ls_esf_match_upd>-sum_excise,
                             <ls_esf_match_upd>-sum_nds,
                             <ls_esf_match_upd>-sum_snds.
                    ENDIF.
                  ENDLOOP.

                  IF lt_esf_match_upd[] IS NOT INITIAL.
                    MODIFY zfi_esf_match FROM TABLE lt_esf_match_upd.
                  ENDIF.

                ENDIF.

                COMMIT WORK AND WAIT.
                refresh_data( abap_false ).

                MESSAGE s000(zmm) WITH 'Данные таб. ZFI_ESF_MATCH обновлены из ЭСЧФ'.

                "
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD lock_esf_on_hotspot.
    DATA lv_text TYPE char100.

    CHECK is_esf_data-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    IF check_changed_esf_data( iv_mode  = 'H'
                               iv_alert = abap_true ) = abap_true.
      lcl_report=>gv_lock_error = abap_true.
      RETURN.
    ENDIF.

    CALL FUNCTION 'DEQUEUE_EZFI_ESF'    " чтобы избежать множественной блокировки
      EXPORTING mode_zfi_esf = 'E'
                mandt        = sy-mandt
                pr_esf       = is_esf_data-pr_esf
                n_esf        = is_esf_data-n_esf.

    CALL FUNCTION 'ENQUEUE_EZFI_ESF'
      EXPORTING  mode_zfi_esf   = 'E'
                 mandt          = sy-mandt
                 pr_esf         = is_esf_data-pr_esf
                 n_esf          = is_esf_data-n_esf
      EXCEPTIONS foreign_lock   = 1
                 system_failure = 2
                 OTHERS         = 3.
    IF sy-subrc = 0.
      CLEAR lcl_report=>gv_lock_error.
    ELSE.
      lcl_report_in=>get_uname( EXPORTING iv_uname     = CONV xubname( sy-msgv1 )
                                IMPORTING ev_full_name = lv_text ).
      lv_text = |{ 'ЭСЧФ уже обрабатывается пользователем'(m46) } { lv_text }|.
      MESSAGE lv_text TYPE 'S' DISPLAY LIKE 'W'.
      lcl_report=>gv_lock_error = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD unlock_esf_on_hotspot.
    IF lcl_report=>gv_pr_esf IS NOT INITIAL AND lcl_report=>gv_n_esf IS NOT INITIAL.
      CALL FUNCTION 'DEQUEUE_EZFI_ESF'
        EXPORTING mode_zfi_esf = 'E'
                  mandt        = sy-mandt
                  pr_esf       = lcl_report=>gv_pr_esf
                  n_esf        = lcl_report=>gv_n_esf.
      IF sy-subrc = 0.
        CLEAR lcl_report=>gv_lock_error.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD select_all.
    CASE gv_mode.
      WHEN gc_mode1.
        enqueue_all_fi( ir_grid ).
      WHEN gc_mode2.
        enqueue_all_esf( ir_grid ).
    ENDCASE.
  ENDMETHOD.

  METHOD deselect_all.
    CASE gv_mode.
      WHEN gc_mode1.
        dequeue_all_fi( ).
      WHEN gc_mode2.
        dequeue_all_esf( ).
    ENDCASE.
  ENDMETHOD.

  METHOD save_hotspot_data.
    DATA ls_esf_data TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    update_roster_items( lcl_report=>gv_n_esf ).
    ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf
                        n_esf  = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf_data>).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ls_esf_data = <ls_esf_data>.

    MOVE-CORRESPONDING gs_part1 TO <ls_esf_data>.
    MOVE-CORRESPONDING gs_part2 TO <ls_esf_data>.
    MOVE-CORRESPONDING gs_part3 TO <ls_esf_data>.
    MOVE-CORRESPONDING gs_part4 TO <ls_esf_data>.
    MOVE-CORRESPONDING gs_part5 TO <ls_esf_data>.
    IF ls_esf_data <> <ls_esf_data> OR gv_update_esf = abap_true.
      <ls_esf_data>-last_user = sy-uname.
      <ls_esf_data>-aedat     = sy-datum.
      GET TIME STAMP FIELD <ls_esf_data>-tstampl.

      lcl_report_out=>save_data( 'H' ).
      CLEAR gv_update_esf.
    ENDIF.
  ENDMETHOD.

  METHOD build_excluding.
    et_excluding = VALUE #( ( cl_gui_alv_grid=>mc_fc_detail )
                            ( cl_gui_alv_grid=>mc_fc_refresh )
                            ( cl_gui_alv_grid=>mc_fc_loc_cut )
                            ( cl_gui_alv_grid=>mc_fc_loc_append_row )
                            ( cl_gui_alv_grid=>mc_fc_loc_copy )
                            ( cl_gui_alv_grid=>mc_fc_loc_paste )
                            ( cl_gui_alv_grid=>mc_fc_loc_undo )
                            ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
                            ( cl_gui_alv_grid=>mc_fc_print )
                            ( cl_gui_alv_grid=>mc_fc_views )
                            ( cl_gui_alv_grid=>mc_mb_export )
                            ( cl_gui_alv_grid=>mc_fc_info ) ).
    IF gv_mode = gc_mode4.  " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
      et_excluding = VALUE #( BASE et_excluding
                              ( cl_gui_alv_grid=>mc_fc_loc_copy_row )
                              ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
                              ( cl_gui_alv_grid=>mc_fc_loc_delete_row ) ).

      DELETE et_excluding WHERE table_line = cl_gui_alv_grid=>mc_mb_export.
    ENDIF.
  ENDMETHOD.

  METHOD update_roster_items.
    DATA lt_roster TYPE zcl_fi_esf_amdp=>gty_t_roster.
    DATA lv_line   TYPE i.

    CHECK gt_esf_roster_detail IS NOT INITIAL.

    gr_grid_1007->check_changed_data( ).

    CLEAR gv_update_esf.
    SORT gt_esf_roster_detail BY n_esf
                                 nnp.

    MODIFY gt_esf_roster_detail FROM VALUE #( mandt  = sy-mandt
                                              pr_esf = lcl_report=>gv_pr_esf
                                              n_esf  = lcl_report=>gv_n_esf )
           TRANSPORTING mandt pr_esf n_esf
           WHERE pr_esf IS INITIAL.

    ASSIGN gt_esf_roster_detail[ 1 ] TO FIELD-SYMBOL(<ls_roster>).
    IF sy-subrc = 0.
      lt_roster = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE (     pr_esf = <ls_roster>-pr_esf
                                                                      AND n_esf  = <ls_roster>-n_esf )
                           ( ls_esf_roster ) ).
      SORT lt_roster BY n_esf
                        nnp.
      IF lt_roster <> gt_esf_roster_detail.
        gv_update_esf = abap_true.

        ASSIGN gt_esf_data[ pr_esf = <ls_roster>-pr_esf
                            n_esf  = <ls_roster>-n_esf ] TO FIELD-SYMBOL(<ls_esf_data>).
        IF sy-subrc = 0.
          <ls_esf_data>-last_user = sy-uname.
          <ls_esf_data>-aedat     = sy-datum.
          GET TIME STAMP FIELD <ls_esf_data>-tstampl.

          CLEAR: <ls_esf_data>-sum_nonds,
                 <ls_esf_data>-sum_excise,
                 <ls_esf_data>-sum_nds,
                 <ls_esf_data>-sum_snds.

          DELETE gt_esf_roster WHERE     pr_esf = lcl_report=>gc_out_inv
                                     AND n_esf  = <ls_roster>-n_esf.

          LOOP AT gt_esf_roster_detail ASSIGNING <ls_roster>.
            <ls_roster>-pr_esf = lcl_report=>gc_out_inv.
            APPEND <ls_roster> TO gt_esf_roster.

            " cуммы ZFI_ESF
            <ls_esf_data>-sum_nonds  = <ls_esf_data>-sum_nonds + <ls_roster>-nonds.
            <ls_esf_data>-sum_excise = <ls_esf_data>-sum_excise + <ls_roster>-excise.
            <ls_esf_data>-sum_nds    = <ls_esf_data>-sum_nds + <ls_roster>-nds.
            <ls_esf_data>-sum_snds   = <ls_esf_data>-sum_snds + <ls_roster>-snds.
          ENDLOOP.

          " #8000000666 ЭСЧФ тип 31 и 33, обновлять данные по суммам в таблице ZFI_ESF_MATCH, если установлен флаг «НДС по курсовым разницам»
          IF gs_part1-currency_dif_nds = 'X' OR     <ls_esf_data>-currency_dif_nds = 'X'
                                                AND ( <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_31 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_33 OR <ls_esf_data>-id_vid_iop = lcl_report_out=>gc_64 ).

            IF <ls_esf_data>-belnr <> '->'. " по одному бухдоку
              ASSIGN gt_esf_match[ pr_esf = <ls_roster>-pr_esf
                                   n_esf  = <ls_roster>-n_esf
                                   bukrs  = <ls_esf_data>-bukrs
                                   belnr  = <ls_esf_data>-belnr
                                   gjahr  = <ls_esf_data>-gjahr ] TO FIELD-SYMBOL(<ls_esf_match>).
              IF sy-subrc = 0.
                CLEAR: <ls_esf_match>-sum_nonds,
                       <ls_esf_match>-sum_excise,
                       <ls_esf_match>-sum_nds,
                       <ls_esf_match>-sum_snds.

                LOOP AT gt_esf_roster_detail ASSIGNING <ls_roster>.
                  <ls_esf_match>-sum_nonds  = <ls_esf_match>-sum_nonds + <ls_roster>-nonds.
                  <ls_esf_match>-sum_excise = <ls_esf_match>-sum_excise + <ls_roster>-excise.
                  <ls_esf_match>-sum_nds    = <ls_esf_match>-sum_nds + <ls_roster>-nds.
                  <ls_esf_match>-sum_snds   = <ls_esf_match>-sum_snds + <ls_roster>-snds.
                ENDLOOP.
              ENDIF.
            ELSE. " по нескольким бухдокам (записываем суммы в 1 строку, остальные обнуляем)
              SORT gt_esf_match BY pr_esf
                                   n_esf
                                   gjahr
                                   bukrs
                                   belnr.

              CLEAR lv_line.
              LOOP AT gt_esf_match ASSIGNING <ls_esf_match> WHERE     pr_esf = <ls_roster>-pr_esf
                                                                  AND n_esf  = <ls_roster>-n_esf.
                lv_line = lv_line + 1.

                IF lv_line = 1.
                  CLEAR: <ls_esf_match>-sum_nonds,
                         <ls_esf_match>-sum_excise,
                         <ls_esf_match>-sum_nds,
                         <ls_esf_match>-sum_snds.

                  LOOP AT gt_esf_roster_detail ASSIGNING <ls_roster>.
                    <ls_esf_match>-sum_nonds  = <ls_esf_match>-sum_nonds + <ls_roster>-nonds.
                    <ls_esf_match>-sum_excise = <ls_esf_match>-sum_excise + <ls_roster>-excise.
                    <ls_esf_match>-sum_nds    = <ls_esf_match>-sum_nds + <ls_roster>-nds.
                    <ls_esf_match>-sum_snds   = <ls_esf_match>-sum_snds + <ls_roster>-snds.
                  ENDLOOP.
                ELSE.
                  CLEAR: <ls_esf_match>-sum_nonds,
                         <ls_esf_match>-sum_excise,
                         <ls_esf_match>-sum_nds,
                         <ls_esf_match>-sum_snds.
                ENDIF.
              ENDLOOP.
            ENDIF.

          ENDIF.
          "
        ENDIF.

      ENDIF.
    ELSE. " удалили все записи из Roster
      MODIFY gt_esf_roster FROM VALUE #( del_flg = abap_true ) TRANSPORTING del_flg WHERE     pr_esf = lcl_report=>gc_out_inv
                                                                                          AND n_esf  = iv_n_esf.
    ENDIF.
  ENDMETHOD.

  METHOD clear_detail.
    CLEAR: lcl_report=>gv_n_esf,
           lcl_report=>gv_pr_esf,
           gs_part1,
           gs_part2,
           gs_part3,
           gs_part4,
           gs_part5,
           gt_esf_roster_detail.
  ENDMETHOD.

  METHOD refresh_alv.
    CASE gv_mode.
      WHEN gc_mode1.
        lcl_report_in=>refresh_alv( gr_grid_1 ).
      WHEN gc_mode2.
        lcl_report_in=>refresh_alv( gr_grid_2 ).
      WHEN gc_mode4.                            " #8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
        IF gr_grid_1 IS BOUND.
          lcl_report_in=>refresh_alv( gr_grid_1 ).
        ENDIF.

        IF go_grid_4 IS BOUND.
          lcl_report_in=>refresh_alv( go_grid_4 ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD get_real_kurs.
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA(lv_datum) = sy-datum.
    TRANSLATE lv_datum USING lcl_report=>gc_kurs_conv.

    SELECT SINGLE bkpf~kursf,
                  bkpf~waers AS doc_waers,
                  t001~waers AS buk_waers,
                  awtyp
      FROM bkpf
             JOIN
               t001 ON bkpf~bukrs = t001~bukrs
      INTO @DATA(ls_bkpf)
      WHERE bkpf~bukrs = @is_fi_data-bukrs
        AND bkpf~belnr = @is_fi_data-belnr
        AND bkpf~gjahr = @is_fi_data-gjahr.
    IF sy-subrc <> 0.
      MESSAGE e022(zfi_esf) WITH is_fi_data-belnr is_fi_data-bukrs is_fi_data-gjahr.
    ENDIF.

    IF ls_bkpf-awtyp = 'VBRK'.
      SELECT SINGLE dmbtr, wrbtr FROM bseg
        INTO @DATA(ls_bseg)
        WHERE bukrs = @is_fi_data-bukrs
          AND belnr = @is_fi_data-belnr
          AND gjahr = @is_fi_data-gjahr
          AND koart = 'D'.                                      " ins DHVK931287
      IF ls_bseg-wrbtr <> 0.
        ev_kursf = ls_bseg-dmbtr / ls_bseg-wrbtr.
      ENDIF.
      RETURN.
    ENDIF.
    IF ls_bkpf-buk_waers = ls_bkpf-doc_waers.
      ev_kursf = 1.
    ELSE.
      ev_kursf = ls_bkpf-kursf.
      SELECT SINGLE tfact FROM tcurf
        INTO @DATA(lv_tfact)
        WHERE kurst = 'M'
          AND fcurr = @ls_bkpf-buk_waers
          AND tcurr = @ls_bkpf-doc_waers.
      IF sy-subrc = 0.
        ev_kursf = ev_kursf / lv_tfact.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD mode2_copy_33.
    DATA lv_cnt        TYPE i.
    DATA lt_roster_tmp TYPE zcl_fi_esf_amdp=>gty_t_roster.
    DATA lt_match_tmp  TYPE zcl_fi_esf_amdp=>gty_t_match_data.

    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      lv_cnt = lv_cnt + 1.
      IF lv_cnt > 1.
        MESSAGE 'Выберите только одну запись'(m06) TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE     chk_box     = abap_true
                                                     AND id_vid_iop <> lcl_report_out=>gc_33
                                                     AND id_vid_iop <> lcl_report_out=>gc_64
                                                     AND id_vid_iop <> lcl_report_out=>gc_681
                                                     AND id_vid_iop <> lcl_report_out=>gc_42. " V.Matsygud 09.10.2020 Временно для БГПЗ
      MESSAGE 'Можно копировать только ЭСЧФ с Видом операции 33 и 681'(m60) TYPE 'W'.
      RETURN.
    ENDLOOP.

    IF lcl_report_in=>popup_to_confirm( iv_titlebar      = 'Внимание!'(m01)
                                        iv_text_question = 'Копировать ЭСЧФ?'(m59) ) <> '1'.
      RETURN.
    ENDIF.

    ASSIGN gt_esf_data[ chk_box = abap_true ] TO FIELD-SYMBOL(<ls_esf_data>).
    IF sy-subrc = 0.
      get_next_esf_number( EXPORTING iv_n_esf = <ls_esf_data>-n_esf
                           IMPORTING ev_n_esf = DATA(lv_n_esf_new) ).

      APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf_data_new>).
      IF sy-subrc = 0.
        MOVE-CORRESPONDING <ls_esf_data> TO <ls_esf_data_new>.
        <ls_esf_data_new>-n_esf = lv_n_esf_new.
        CLEAR <ls_esf_data_new>-id_stat_esf_p.
        <ls_esf_data_new>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.
        <ls_esf_data_new>-last_user     = sy-uname.
        <ls_esf_data_new>-aedat         = sy-datum.
        GET TIME STAMP FIELD <ls_esf_data_new>-tstampl.

        lt_roster_tmp = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( pr_esf = <ls_esf_data>-pr_esf AND n_esf = <ls_esf_data>-n_esf )
                                 ( ls_esf_roster ) ).
        MODIFY lt_roster_tmp FROM VALUE #( n_esf = lv_n_esf_new ) TRANSPORTING n_esf WHERE pr_esf = lcl_report=>gc_out_inv.
        APPEND LINES OF lt_roster_tmp TO gt_esf_roster.

        lt_match_tmp = VALUE #( FOR ls_esf_match IN gt_esf_match USING KEY k1 WHERE (     pr_esf = <ls_esf_data>-pr_esf
                                                                                      AND n_esf  = <ls_esf_data>-n_esf )
                                ( ls_esf_match ) ).

        MODIFY lt_match_tmp FROM VALUE #( n_esf = lv_n_esf_new ) TRANSPORTING n_esf WHERE pr_esf = lcl_report=>gc_out_inv.
        APPEND LINES OF lt_match_tmp TO gt_esf_match.

        gv_save = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD process_hotspot_2.
    DATA lv_text TYPE char100.

    ASSIGN gt_esf_data[ iv_row_id-index ] TO FIELD-SYMBOL(<ls_esf_data>).

    IF check_roster_nnp( ) = abap_true.
      RETURN.
    ENDIF.

    IF <ls_esf_data> IS ASSIGNED.
      fill_esf_mwskz( <ls_esf_data> ).
      gs_esf_hotspot = <ls_esf_data>.
      " проверить не удалена ли запись
      SELECT SINGLE n_esf FROM zfi_esf
        " TODO: variable is assigned but never used (ABAP cleaner)
        INTO @DATA(lv_n_esf)
        WHERE pr_esf = @<ls_esf_data>-pr_esf
          AND n_esf  = @<ls_esf_data>-n_esf.
      IF sy-subrc <> 0.
        lv_text = <ls_esf_data>-n_esf.
        CONCATENATE lv_text ': ЭСЧФ был удален'(m44) INTO lv_text.
        CONCATENATE lv_text '. Обновите данные'(m38) INTO lv_text.
        MESSAGE lv_text TYPE 'I'.
        RETURN.
      ENDIF.

      update_roster_items( <ls_esf_data>-n_esf ).
      update_detailed_data( EXPORTING is_esf_data = <ls_esf_data>
                            CHANGING  et_esf_data = gt_esf_data ).

      lock_esf_on_hotspot( <ls_esf_data> ).
      lcl_report_out=>gt_esf_roster_detail = VALUE #( FOR ls_esf_roster IN gt_esf_roster WHERE ( pr_esf = <ls_esf_data>-pr_esf AND n_esf = <ls_esf_data>-n_esf )
                                                      ( ls_esf_roster ) ).
      SORT gt_esf_roster_detail BY n_esf
                                   nnp.
      get_roster_meins( CHANGING et_roster = lcl_report_out=>gt_esf_roster_detail ).

      lcl_report_out=>show_data( EXPORTING iv_type  = '1007'
                                 CHANGING  er_grid  = lcl_report_out=>gr_grid_1007
                                           et_table = lcl_report_out=>gt_esf_roster_detail ).
    ENDIF.

    LEAVE SCREEN.
  ENDMETHOD.

  METHOD get_zdeliv_note_h.
    CLEAR es_zdeliv.

    SELECT SINGLE zdeliv_note_h~*,
                  likp~wadat_ist,
                  zfi_vid_doc~id_vid_doc
      FROM zdeliv_note_h
             JOIN
               vbfa ON zdeliv_note_h~zdelivery = vbfa~vbelv
                 JOIN
                   likp ON zdeliv_note_h~zdelivery = likp~vbeln
                     LEFT JOIN
                       zfi_vid_doc ON zdeliv_note_h~zvddc = zfi_vid_doc~zvddc " DHVK949928
      INTO @es_zdeliv
      WHERE vbfa~vbeln   = @iv_vbeln
        AND vbfa~vbtyp_v = 'J'. " поставка
*    es_zdeliv-zvddc = COND #( WHEN es_zdeliv-zvddc = 'ТТН-1' THEN 603
*                              WHEN es_zdeliv-zvddc = 'ТН-2' THEN 602 ).
*    CONDENSE es_zdeliv-zvddc .
    "(DHVK949928
    es_zdeliv-zvddc = es_zdeliv-id_vid_doc.
    IF es_zdeliv-znum_etsd IS NOT INITIAL.
      CLEAR:es_zdeliv-zkdf,
             es_zdeliv-zser.                                             " DHVK950021
    ELSE.
      es_zdeliv-znum_etsd = es_zdeliv-zblnk.                " DHVK950017
    ENDIF.
    ")DHVK949928
  ENDMETHOD.

  METHOD get_ekbe_data.
    TYPES:
      BEGIN OF lty_s_ekbe,
        belnr TYPE ekbe-belnr,
        buzei TYPE ekbe-buzei,
        gjahr TYPE ekbe-gjahr,
      END OF lty_s_ekbe.

    DATA lt_ekbe_key      TYPE SORTED TABLE OF lty_s_ekbe WITH NON-UNIQUE KEY belnr buzei gjahr.
    DATA lt_class         TYPE TABLE OF sclass.
    DATA lt_objdata       TYPE TABLE OF clobjdat.
    DATA lv_vyp_tov_pokup TYPE ze_zzgtd. " AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ

    CLEAR: ev_type,
           et_ekbe,
           et_esll.

    IF is_fi_data-awtyp <> 'RMRP'.
      RETURN.
    ENDIF.

    " ТМЦ / Услуги
    SELECT ekbe1~belnr,
           ekbe1~buzei,
           ekbe1~bewtp,
           ekbe1~werks,
           ekbe1~matnr,
           ekbe1~bwtar,
           ekbe1~bpmng,
           ekbe1~dmbtr,
           ekbe1~arewr,
           ekbe2~belnr AS belnr_typ,
           ekbe2~bewtp AS bewtp_typ,
           ekbe2~buzei AS buzei_typ,
           ekbe1~gjahr AS gjahr,
           ekbe2~gjahr AS gjahr_typ
      FROM ekbe AS ekbe1
             JOIN
               ekbe AS ekbe2 ON  ekbe1~lfbnr = ekbe2~belnr
                             AND ( ekbe1~lfpos = ekbe2~buzei OR ekbe2~bewtp = 'D' )
      INTO TABLE @DATA(lt_ekbe)
      WHERE ekbe1~gjahr = @is_fi_data-mjahr
        AND ekbe1~belnr = @is_fi_data-mblnr
        AND (    ekbe1~bewtp = 'Q'
              OR ekbe1~bewtp = 'N' ). " 8000000501

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ev_type = lt_ekbe[ 1 ]-bewtp_typ.
    IF ( ev_type = 'E' AND ( is_fi_data-id_vid_iop = lcl_report_out=>gc_40 OR is_fi_data-id_vid_iop = lcl_report_out=>gc_42 OR is_fi_data-id_vid_iop = lcl_report_out=>gc_62 ) )
       OR is_fi_data-id_vid_iop = lcl_report_out=>gc_43.

      LOOP AT lt_ekbe ASSIGNING FIELD-SYMBOL(<ls_ekbe>).
        INSERT VALUE #( belnr = <ls_ekbe>-belnr_typ
                        buzei = <ls_ekbe>-buzei_typ
                        gjahr = <ls_ekbe>-gjahr_typ ) INTO TABLE lt_ekbe_key.
      ENDLOOP.

      IF is_fi_data-id_vid_iop = lcl_report_out=>gc_43.
        "--> cng 22.04.2024 V.Lipskij #38467
*            "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        IF is_fi_data-id_vid_iop = lcl_report_out=>gc_43 AND is_fi_data-bktxt(2) <> '51'.
*              SELECT SINGLE zzgtd FROM matdoc
*               WHERE mblnr = @is_fi_data-bktxt(10)
*                  AND mjahr = @is_fi_data-bktxt+10(4)
*                INTO @lv_vyp_tov_pokup.
*              "--<AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
          SELECT matnr,
                 charg,
                 '   ' AS tovnum,
                 zzgtd
            FROM matdoc
            WHERE mblnr = @is_fi_data-bktxt(10)
              AND mjahr = @is_fi_data-bktxt+10(4)
              AND shkzg = 'S'
            ORDER BY matnr, charg
            INTO TABLE @DATA(lt_matdoc).
        ELSE.
          SELECT m~matnr,
                 m~charg,
                 '   '   AS tovnum,
                 m~zzgtd
*              SELECT SINGLE m~zzgtd
*               INTO @lv_vyp_tov_pokup
            FROM matdoc AS m
                   JOIN
                     bseg AS b ON  m~mblnr = b~fmxdocnr
                               AND m~mjahr = b~fmxyear
            WHERE b~fmxdocnr <> ' '
              AND b~fmxyear  <> '0000'
              AND m~shkzg     = 'S'
              AND b~belnr     = @is_fi_data-bktxt(10)
              AND b~gjahr     = @is_fi_data-bktxt+10(4)
              AND b~bukrs     = @is_fi_data-bukrs
            ORDER BY m~matnr,
                     m~charg
            INTO TABLE @lt_matdoc.
        ENDIF.

*          IF lv_vyp_tov_pokup IS NOT INITIAL.
        IF sy-subrc = 0.
          LOOP AT lt_matdoc ASSIGNING FIELD-SYMBOL(<ls_matdoc>).
            CALL FUNCTION 'CLAF_CLASSIFICATION_OF_OBJECTS'
              EXPORTING  classtype          = '023'
                         object             = CONV ausp-objek( VALUE mch1_key( matnr = <ls_matdoc>-matnr
                                                                               charg = <ls_matdoc>-charg ) )
                         objecttable        = 'MCH1'
                         initial_charact    = ''
              TABLES     t_class            = lt_class
                         t_objectdata       = lt_objdata
              EXCEPTIONS no_classification  = 1
                         no_classtypes      = 2
                         invalid_class_type = 3
                         OTHERS             = 4.
            IF sy-subrc <> 0.
              CONTINUE.
            ENDIF.
            ASSIGN lt_objdata[ atnam = 'Z_TOVNUM' ] TO FIELD-SYMBOL(<ls_objdata>).
            IF sy-subrc = 0.
              <ls_matdoc>-tovnum = <ls_objdata>-ausp1.
            ENDIF.
          ENDLOOP.
          lv_vyp_tov_pokup = lt_matdoc[ 1 ]-zzgtd.
          SELECT DISTINCT zcs_cust_goods~mblnr,
                          zcs_cust_goods~zeile,
                          zcs_cust_goods~goods_numeric,
                          zcs_cust_goods~goods_tnvedcode
            FROM zcs_cust_goods
                   JOIN
                     zcs_cust_hcd ON zcs_cust_goods~declarant_id = zcs_cust_hcd~declarant_id
            WHERE zcs_cust_hcd~permission_num = @lv_vyp_tov_pokup
            INTO TABLE @DATA(lt_cust_goods).

          SORT lt_cust_goods BY goods_numeric.
        ENDIF.
        "<-- cng 22.04.2024 V.Lipskij #38467
      ELSE.
        IF lt_ekbe_key IS NOT INITIAL.
          SELECT DISTINCT mblnr
                          zeile
                          zcs_cust_goods~goods_numeric
                          goods_tnvedcode
            FROM zcs_cust_goods
                   JOIN
                     zcs_cust_hsd AS h ON h~declarant_id = zcs_cust_goods~declarant_id
            INTO TABLE lt_cust_goods
            FOR ALL ENTRIES IN lt_ekbe_key
            WHERE mblnr       = lt_ekbe_key-belnr
              AND zeile       = lt_ekbe_key-buzei
              AND h~rel_gjahr = lt_ekbe_key-gjahr.
        ENDIF.

        SORT lt_cust_goods BY mblnr
                              zeile.
      ENDIF.

      LOOP AT lt_ekbe ASSIGNING <ls_ekbe>.
        DATA(lv_tabix) = sy-tabix.
        IF is_fi_data-id_vid_iop = lcl_report_out=>gc_43.
          "--> cng 22.04.2024 V.Lipskij #38467
          READ TABLE lt_matdoc ASSIGNING <ls_matdoc> WITH KEY matnr = <ls_ekbe>-matnr
                                                              charg = <ls_ekbe>-bwtar
               BINARY SEARCH.
          IF sy-subrc = 0.
            READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
                 WITH KEY goods_numeric = <ls_matdoc>-tovnum
                 BINARY SEARCH.
            IF sy-subrc = 0.
              APPEND INITIAL LINE TO et_ekbe ASSIGNING FIELD-SYMBOL(<ls_ekbe_fin>).
              MOVE-CORRESPONDING <ls_ekbe> TO <ls_ekbe_fin>.
              <ls_ekbe_fin>-tncode = <ls_cust_goods>-goods_tnvedcode.
            ELSE.
              READ TABLE lt_cust_goods ASSIGNING <ls_cust_goods>
                   WITH KEY goods_numeric = lv_tabix
                   BINARY SEARCH.
              IF sy-subrc = 0.
                APPEND INITIAL LINE TO et_ekbe ASSIGNING <ls_ekbe_fin>.
                MOVE-CORRESPONDING <ls_ekbe> TO <ls_ekbe_fin>.
                <ls_ekbe_fin>-tncode = <ls_cust_goods>-goods_tnvedcode.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSE.
          APPEND INITIAL LINE TO et_ekbe ASSIGNING <ls_ekbe_fin>.
          MOVE-CORRESPONDING <ls_ekbe> TO <ls_ekbe_fin>.
          "<-- cng 22.04.2024 V.Lipskij #38467
          <ls_ekbe_fin>-belnr = <ls_ekbe>-belnr_typ.
          <ls_ekbe_fin>-buzei = <ls_ekbe>-buzei_typ.
          <ls_ekbe_fin>-gjahr = <ls_ekbe>-gjahr_typ.
          READ TABLE lt_cust_goods ASSIGNING <ls_cust_goods>
               WITH KEY mblnr = <ls_ekbe>-belnr_typ
                        zeile = <ls_ekbe>-buzei_typ
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_ekbe_fin>-tncode = <ls_cust_goods>-goods_tnvedcode.
          ENDIF.
        ENDIF.
      ENDLOOP.

      SORT et_ekbe BY buzei.

    ELSEIF lt_ekbe[ 1 ]-bewtp_typ = 'D' AND ( is_fi_data-id_vid_iop = lcl_report_out=>gc_40 OR is_fi_data-id_vid_iop = lcl_report_out=>gc_62 ).
      ev_type = lt_ekbe[ 1 ]-bewtp_typ.

      SELECT esll2~introw
             esll2~ktext1
        FROM esll AS esll2
               JOIN
                 esll AS esll1 ON esll1~sub_packno = esll2~packno
                   JOIN
                     essr ON essr~packno = esll1~packno
        INTO TABLE et_esll
        FOR ALL ENTRIES IN lt_ekbe
        WHERE essr~lblni = lt_ekbe-belnr_typ.

      SORT et_esll BY introw.

      MOVE-CORRESPONDING lt_ekbe TO et_ekbe.
    ENDIF.
  ENDMETHOD.

  METHOD get_esll_data.
    CLEAR et_esll.

    SELECT DISTINCT esll2~introw
                    esll2~ktext1
      INTO TABLE et_esll
      FROM esll AS esll2
             JOIN
               esll AS esll1 ON esll2~packno = esll1~sub_packno
                 JOIN
                   ekpo ON esll1~packno = ekpo~packno
      WHERE ekpo~ebeln = is_fi_data-bktxt(10)
        AND ekpo~ebelp = is_fi_data-bktxt+10
        AND ekpo~pstyp = '9'
      ORDER BY esll2~introw.
  ENDMETHOD.

  METHOD get_rcm_rmrp.
    CLEAR: ev_ndoc,
           ev_dcdoc.

    "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    IF is_fi_data-id_vid_iop = '43' AND is_fi_data-bktxt(2) <> '51'.
      SELECT SINGLE rmps_t_case_attr~zz_ndoc,
                    rmps_t_case_attr~zz_dcdoc
        FROM rmps_t_case_attr
               JOIN
                 bseg ON  rmps_t_case_attr~zext_key  = bseg~vertn
                      AND rmps_t_case_attr~zext_key <> ''
        INTO ( @ev_ndoc, @ev_dcdoc )
        WHERE bseg~bukrs  = @is_fi_data-bukrs
          AND bseg~belnr  = @is_fi_data-xblnr(10)
          AND bseg~gjahr  = @is_fi_data-gjtxt
          AND bseg~vertn <> ''.
      "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    ELSE.
      SELECT SINGLE rmps_t_case_attr~zz_ndoc,
                    rmps_t_case_attr~zz_dcdoc
        FROM rmps_t_case_attr
               JOIN
                 bseg ON  rmps_t_case_attr~zext_key  = bseg~vertn
                      AND rmps_t_case_attr~zext_key <> ''
        INTO ( @ev_ndoc, @ev_dcdoc )
        WHERE bseg~bukrs  = @is_fi_data-bukrs
          AND bseg~belnr  = @is_fi_data-bktxt(10)
          AND bseg~gjahr  = @is_fi_data-gjtxt
          AND bseg~vertn <> ''.
    ENDIF.
  ENDMETHOD.

  METHOD bukrs_on_f4.
    TYPES: BEGIN OF lty_s_data,
             bukrs TYPE t001-bukrs,
             butxt TYPE t001-butxt,
           END OF lty_s_data.

    DATA lt_data TYPE STANDARD TABLE OF lty_s_data.
    DATA lt_ret  TYPE STANDARD TABLE OF ddshretval.

    SELECT '90' && bukrs AS bukrs,
           butxt
      FROM t001
      INTO TABLE @lt_data.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING  retfield        = 'BUKRS'
                 dynpprog        = sy-repid
                 dynpnr          = sy-dynnr
                 window_title    = 'БЕ'
                 value_org       = 'S'
      TABLES     value_tab       = lt_data
                 return_tab      = lt_ret
      EXCEPTIONS parameter_error = 1
                 no_values_found = 2
                 OTHERS          = 3.
    IF sy-subrc = 0.
      TRY.
          rv_bukrs = lt_ret[ 1 ]-fieldval.
        CATCH cx_sy_itab_line_not_found.
          CLEAR rv_bukrs.
      ENDTRY.
    ENDIF.
  ENDMETHOD.

  METHOD get_esf_ish_anul.
    IF iv_id_type_esf = lcl_report=>gc_esf_ty_additional OR iv_id_type_esf = 'FIXED'.
      ev_n_esf_ish = is_fi_data-n_esf_ish.                         " для доп и исправленных не ищется
      ev_dt_vs_esf = is_fi_data-dt_vs_ish.
    ELSE.
      SELECT zfi_esf_match~n_esf
             zfi_esf~dt_anul_esf
        FROM zfi_esf_match
               JOIN
                 zfi_esf ON  zfi_esf_match~pr_esf = zfi_esf~pr_esf
                         AND zfi_esf_match~n_esf  = zfi_esf~n_esf
        INTO ( ev_n_esf_ish, ev_dt_vs_esf )
        WHERE zfi_esf_match~pr_esf = lcl_report=>gc_out_inv
          AND zfi_esf_match~bukrs  = is_fi_data-bukrs
          AND zfi_esf_match~belnr  = is_fi_data-nmtxt
          AND zfi_esf_match~gjahr  = is_fi_data-gjtxt
        ORDER BY zfi_esf_match~n_esf DESCENDING.
        EXIT.
      ENDSELECT.
    ENDIF.
    IF iv_id_type_esf <> 'FIXED'.
      CLEAR ev_dt_vs_esf.
    ENDIF.
  ENDMETHOD.

  METHOD get_okei.
    SELECT j_3rj_uom_conv~okei
           t006a~msehi
           t006a~msehl
      FROM j_3rj_uom_conv
             JOIN
               t006a ON j_3rj_uom_conv~uom = t006a~msehi
      INTO TABLE gt_okei_tab
      WHERE t006a~spras = 'R'
      ORDER BY okei msehi msehl.

    DELETE gt_okei_tab WHERE okei IS INITIAL.
  ENDMETHOD.

  METHOD get_roster_meins.
    LOOP AT et_roster ASSIGNING FIELD-SYMBOL(<ls_roster>).
      READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei_tab>)
           WITH KEY okei = <ls_roster>-ed_izm
           BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_roster>-meins = <ls_okei_tab>-msehi.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_roster_nnp.
    DATA lv_text TYPE char100.

    CHECK gr_grid_1007 IS BOUND.

    gr_grid_1007->check_changed_data( ).

    LOOP AT gt_esf_roster_detail TRANSPORTING NO FIELDS WHERE nnp IS INITIAL.
      CONCATENATE 'Заполните все номера позиций для ЭСЧФ'(m73) lcl_report=>gv_n_esf INTO lv_text SEPARATED BY space.
      MESSAGE lv_text TYPE 'I'.
      rv_error = abap_true.
      RETURN.
    ENDLOOP.
  ENDMETHOD.

  "--> 8000000074 AK_BUTVILOVSK Доработка по перепривязке ЭСЧФ
  METHOD mode4_constructor.
    lcl_report_out=>gv_mode = lcl_report_out=>gc_mode4.
    IF gr_einv_service IS NOT BOUND.
      gr_einv_service = zcl_einvoice_service_factory=>get_instance( ).
    ENDIF.

    IF gr_container1 IS BOUND.
      gr_container1->free( ).
      FREE: gr_container1,
            gr_grid_1.
    ENDIF.

    IF gr_container2 IS BOUND.
      gr_container2->free( ).
      FREE: gr_container2,
            gr_grid_2.
    ENDIF.

    get_esf_data( ).

    LEAVE TO SCREEN 1001.
  ENDMETHOD.

  METHOD mode4_show_unbind_fi.
    IF go_dock_container IS INITIAL.

      " Создание docking container и привязка к правой части экрана
      CREATE OBJECT go_dock_container
        EXPORTING  side                        = cl_gui_docking_container=>dock_at_right
                   extension                   = 500
                   caption                     = 'Список бух доков, непривязанных к ЭСЧФ'
        EXCEPTIONS cntl_error                  = 1
                   cntl_system_error           = 2
                   create_error                = 3
                   lifetime_error              = 4
                   lifetime_dynpro_dynpro_link = 5
                   OTHERS                      = 6.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      " Создание экземпляра ALV GRID
      CREATE OBJECT go_grid_4
        EXPORTING  i_parent          = go_dock_container
        EXCEPTIONS error_cntl_create = 1
                   error_cntl_init   = 2
                   error_cntl_link   = 3
                   error_dp_create   = 4
                   OTHERS            = 5.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

      mode4_get_unbind_fi( ).

      show_data( EXPORTING iv_type  = 'UNBIND_FI'
                 CHANGING  er_grid  = go_grid_4
                           et_table = gt_fi_data_filtered ).

    ELSE.
      mode4_free_container( ).
    ENDIF.
  ENDMETHOD.

  METHOD mode4_free_container.
    IF go_grid_4 IS BOUND.
      go_grid_4->free( ).
      CLEAR go_grid_4.
    ENDIF.

    IF go_dock_container IS BOUND.
      go_dock_container->free( ).
      FREE go_dock_container.
    ENDIF.
  ENDMETHOD.

  METHOD mode4_get_unbind_fi.
    get_fi_data( ).
  ENDMETHOD.

  METHOD mode4_unbind.
    DATA lv_selected_cnt TYPE i.
    DATA ls_log_unbind   TYPE zfi_esf_log_unbd.
    DATA lt_esf_match    TYPE TABLE OF zfi_esf_match.
    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA ls_n_esf        TYPE zfi_def_deduct-n_esf. " #24763 AK_RUBAHOV Доработка Журнала регистрации ЭСЧФ
    DATA ls_esf_match    TYPE zfi_esf_match.

    FIELD-SYMBOLS <ls_esf_data> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    " Проверки на существование исключительно одной выбранной записи
    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      lv_selected_cnt = lv_selected_cnt + 1.
      IF lv_selected_cnt > 1.
        MESSAGE 'Выберите только одну запись'(m06) TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    ASSIGN gt_esf_data[ chk_box = abap_true ] TO <ls_esf_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " Внесение данных в лог по изменению статуса привязки бух. доков к ЭСЧФ
    MOVE-CORRESPONDING <ls_esf_data> TO ls_log_unbind.
    ls_log_unbind-pr_unbind = ' '.

    " Проверка на статус ЭСЧФ «Бух док привязан»
    SELECT * FROM zfi_esf_match
      WHERE n_esf  = @<ls_esf_data>-n_esf
        AND pr_esf = @<ls_esf_data>-pr_esf
      ORDER BY pr_unbind
      INTO TABLE @lt_esf_match
      UP TO 1 ROWS.
    IF sy-subrc = 0 AND lt_esf_match[ 1 ]-pr_unbind = 'X'.
      ls_log_unbind-type    = 'E'.
      ls_log_unbind-message = 'Ошибка. ЭСЧФ был ранее отвязан'.
      zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

      MESSAGE e422(zmm) DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    "--> #24763 AK_RUBAHOV Доработка Журнала регистрации ЭСЧФ
    SELECT SINGLE n_esf FROM zfi_def_deduct
      WHERE pr_esf = @<ls_esf_data>-pr_esf
        AND n_esf  = @<ls_esf_data>-n_esf
      INTO @ls_n_esf.

    IF sy-subrc = 0.
      DATA(lv_answer) = lcl_report_in=>popup_to_confirm(
          iv_titlebar      = 'Внимание!'(m01)
          iv_cancel        = abap_false
          iv_text_question = |{ TEXT-m93 } { <ls_esf_data>-n_esf } { TEXT-m94 } { TEXT-m95 } { TEXT-m96 }| ).
      IF lv_answer = '1'.
        DELETE FROM zfi_def_deduct WHERE pr_esf = <ls_esf_data>-pr_esf
                                     AND n_esf  = <ls_esf_data>-n_esf.
      ELSE.
        RETURN.
      ENDIF.
    ENDIF.
    "--> #24763 AK_RUBAHOV Доработка Журнала регистрации ЭСЧФ

    READ TABLE lt_esf_match INTO ls_esf_match INDEX 1.
    IF sy-subrc = 0.
      ls_esf_match-pr_unbind = 'X'.

      UPDATE zfi_esf SET belnr = ' '
  WHERE pr_esf = ls_esf_match-pr_esf
    AND n_esf  = ls_esf_match-n_esf.

      UPDATE zfi_esf_match FROM ls_esf_match.

      ls_log_unbind-type      = 'S'.
      ls_log_unbind-pr_unbind = 'X'.
      ls_log_unbind-message   = 'Бух. док. к ЭСЧФ отвязан'.
      zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

      COMMIT WORK.

      refresh_data( abap_false ).

      MESSAGE s000(zmm) WITH 'Бух. док. к ЭСЧФ отвязан'.

    ENDIF.
  ENDMETHOD.

  METHOD mode4_bind.
    DATA lv_selected_cnt TYPE i.
    DATA ls_log_unbind   TYPE zfi_esf_log_unbd.
    DATA lt_esf_match    TYPE TABLE OF zfi_esf_match.
    DATA ls_esf_match    TYPE zfi_esf_match.

    FIELD-SYMBOLS <ls_esf_data> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.
    FIELD-SYMBOLS <ls_fi_data>  TYPE gty_s_fi_data.

    " Проверки на существование исключительно одной выбранной записи ЭСЧФ
    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      lv_selected_cnt = lv_selected_cnt + 1.
      IF lv_selected_cnt > 1.
        MESSAGE 'Выберите только одну запись ЭСЧФ' TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись ЭСЧФ'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    CLEAR lv_selected_cnt.
    " Проверки на существование исключительно одной выбранной записи бух. док.
    LOOP AT gt_fi_data_filtered TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      lv_selected_cnt = lv_selected_cnt + 1.
      IF lv_selected_cnt > 1.
        MESSAGE 'Выберите только одну запись бух. док.' TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись бух. док.'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    ASSIGN gt_esf_data[ chk_box = abap_true ] TO <ls_esf_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc = 0.
      " Внесение данных в лог по изменению статуса привязки бух. доков к ЭСЧФ
      MOVE-CORRESPONDING <ls_esf_data> TO ls_log_unbind.
      ls_log_unbind-belnr     = <ls_fi_data>-belnr.
      ls_log_unbind-pr_unbind = 'X'.

      " Проверка на статус ЭСЧФ «Бух док привязан»
      SELECT * FROM zfi_esf_match
        WHERE n_esf  = @<ls_esf_data>-n_esf
          AND pr_esf = @<ls_esf_data>-pr_esf
        ORDER BY pr_unbind
        INTO TABLE @lt_esf_match.
      IF sy-subrc = 0 AND lt_esf_match[ 1 ]-pr_unbind = ' '.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Ошибка. ЭСЧФ был ранее привязан'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e423(zmm) DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      READ TABLE lt_esf_match INTO ls_esf_match WITH KEY bukrs = <ls_esf_data>-bukrs
                                                         belnr = <ls_esf_data>-belnr
                                                         gjahr = <ls_esf_data>-gjahr.

      " Сравнение данных ЭСЧФ и привязываемого документа БЕ
      IF <ls_esf_data>-bukrs <> <ls_fi_data>-bukrs.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле БЕ'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'БЕ' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Фин год
      IF <ls_esf_data>-gjahr <> <ls_fi_data>-gjahr.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Фин год'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Фин год' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Дата совершения операции (проводки)
      IF <ls_esf_data>-dt_op_esf <> <ls_fi_data>-budat.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Дата совершения операции (проводки)'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Дата совершения операции (проводки)' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа УНП Получателя
      IF <ls_esf_data>-unp_pokup <> <ls_fi_data>-unp.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Различие значений в поле УНП Получателя'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'УНП Получателя' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

*        " Сравнение данных ЭСЧФ и привязываемого документа Всего по счету. Сумма без НДС
*        IF <ls_esf_data>-sum_nonds <> ( <ls_fi_data>-total_w_vat - <ls_fi_data>-total_vat ).
*          ls_log_unbind-type = 'E'.
*          ls_log_unbind-message = 'Всего по счету. Сумма без НДС'.
*          zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).
*
*          MESSAGE e421(zmm) WITH 'Всего по счету. Сумма без НДС' DISPLAY LIKE 'W'.
*          RETURN.
*        ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Всего по счету. Сумма НДС
      IF <ls_esf_data>-sum_nds <> <ls_fi_data>-total_vat.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Всего по счету. Сумма НДС'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Всего по счету. Сумма НДС' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Всего по счету. Сумма с НДС
      IF <ls_esf_data>-sum_snds <> <ls_fi_data>-total_w_vat.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Всего по счету. Сумма с НДС'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Всего по счету. Сумма с НДС' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Всего по счету. Сумма акциза
      IF <ls_esf_data>-sum_excise <> <ls_fi_data>-excise.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Всего по счету. Сумма акциза'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Всего по счету. Сумма акциза' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      " Сравнение данных ЭСЧФ и привязываемого документа Валюта
      IF <ls_esf_data>-waers <> <ls_fi_data>-waers.
        ls_log_unbind-type    = 'E'.
        ls_log_unbind-message = 'Различие значений в поле Валюта'.
        zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

        MESSAGE e421(zmm) WITH 'Валюта' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.

      ls_esf_match = VALUE #( pr_esf     = <ls_esf_data>-pr_esf
                              n_esf      = <ls_esf_data>-n_esf
                              bukrs      = <ls_esf_data>-bukrs
                              belnr      = <ls_fi_data>-belnr
                              gjahr      = <ls_fi_data>-gjahr
                              sum_nonds  = <ls_esf_data>-sum_nonds
                              sum_nds    = <ls_esf_data>-sum_nds
                              sum_excise = <ls_esf_data>-sum_excise
                              sum_snds   = <ls_esf_data>-sum_snds
                              waers      = <ls_esf_data>-waers
                              pr_unbind  = ' ' ).

      MODIFY zfi_esf_match FROM ls_esf_match.

      UPDATE zfi_esf SET belnr = <ls_fi_data>-belnr
                         gjahr = <ls_fi_data>-gjahr
                WHERE pr_esf = <ls_esf_data>-pr_esf
                  AND n_esf  = <ls_esf_data>-n_esf.

      ls_log_unbind-type      = 'S'.
      ls_log_unbind-pr_unbind = ' '.
      ls_log_unbind-message   = 'Бух. док. к ЭСЧФ привязан'.
      zcl_log_unbind_helper=>add_entry_log( ls_log_unbind ).

      COMMIT WORK.

      refresh_data( abap_false ).

      MESSAGE s000(zmm) WITH 'Бух. док. к ЭСЧФ привязан'.

    ENDIF.
  ENDMETHOD.

  METHOD mode4_show_log_unbind.
    DATA lv_selected_cnt TYPE i.
    DATA lt_selection    TYPE TABLE OF rsparams.

    FIELD-SYMBOLS <ls_esf_data> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    " Проверки на существование исключительно одной выбранной записи
    LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE chk_box = abap_true.
      lv_selected_cnt = lv_selected_cnt + 1.
      IF lv_selected_cnt > 1.
        MESSAGE 'Выберите только одну запись'(m06) TYPE 'S' DISPLAY LIKE 'W'.
        RETURN.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      MESSAGE 'Выберите запись'(m05) TYPE 'S' DISPLAY LIKE 'W'.
      RETURN.
    ENDIF.

    ASSIGN gt_esf_data[ chk_box = abap_true ] TO <ls_esf_data>.
    IF sy-subrc = 0.
      lt_selection = VALUE #( ( selname = 'SO_N_ESF'
                                kind    = 'S'
                                sign    = 'I'
                                option  = 'EQ'
                                low     = <ls_esf_data>-n_esf ) ).
      SUBMIT zfi_log_unbind_view WITH SELECTION-TABLE lt_selection AND RETURN.
    ENDIF.
  ENDMETHOD.

  METHOD filter_esf_data.
    DATA lv_bind_count TYPE i.
    DATA lv_old_pr_esf TYPE zei_pr_esf.
    DATA lv_old_n_esf  TYPE zei_n_esf.

    FIELD-SYMBOLS <ls_esf_data> TYPE zcl_fi_esf_amdp=>gty_s_esf_data.

    SORT gt_esf_data BY pr_esf
                        n_esf
                        unbind.

    LOOP AT gt_esf_data ASSIGNING <ls_esf_data>.
      CLEAR lv_bind_count.

      IF     lv_old_pr_esf = <ls_esf_data>-pr_esf
         AND lv_old_n_esf  = <ls_esf_data>-n_esf.
        DELETE gt_esf_data.
      ELSE.
        lv_old_pr_esf = <ls_esf_data>-pr_esf.
        lv_old_n_esf  = <ls_esf_data>-n_esf.
* --> AK_BUTVILOVSK #8000000530, ZFI_REGINV После перепривязки №д стрелка
*        IF <ls_esf_data>-belnr <> '->'. " 8000000501
        LOOP AT gt_esf_data TRANSPORTING NO FIELDS WHERE     pr_esf = <ls_esf_data>-pr_esf
                                                         AND n_esf  = <ls_esf_data>-n_esf
                                                         AND unbind = '@6Z@'.
          lv_bind_count = lv_bind_count + 1.
        ENDLOOP.

*        CHECK lv_bind_count <= 1.                            " AK_BUTVILOVS 8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
* <-- AK_BUTVILOVSK 8000000530
        IF     <ls_esf_data>-unbind = '@6Z@'                      " Привязан
           AND lv_bind_count        = 1.                              " AK_BUTVILOVS 8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
          SELECT SINGLE bukrs, belnr, gjahr
            FROM zfi_esf_match
            WHERE pr_esf    = @<ls_esf_data>-pr_esf
              AND n_esf     = @<ls_esf_data>-n_esf
              AND pr_unbind = ' '
            INTO ( @<ls_esf_data>-bukrs, @<ls_esf_data>-belnr, @<ls_esf_data>-gjahr ).
        ELSE.
          SELECT SINGLE bukrs,
                        gjahr
            FROM zfi_esf
            WHERE pr_esf = @<ls_esf_data>-pr_esf
              AND n_esf  = @<ls_esf_data>-n_esf
            INTO ( @<ls_esf_data>-bukrs, @<ls_esf_data>-gjahr ).

          IF lv_bind_count <> 0.
            CONTINUE.
          ENDIF.
          <ls_esf_data>-belnr = ' '.
        ENDIF.
*        ENDIF.
      ENDIF.

      "--> 10.04.2024 D.Kruhliakou #38548 Добавление колонки в журнале регистрации ЭСЧФ
      IF <ls_esf_data> IS ASSIGNED.
        LOOP AT gt_esf_roster INTO DATA(ls_roster) WHERE pr_esf = <ls_esf_data>-pr_esf AND n_esf = <ls_esf_data>-n_esf.
          DATA(lv_dop_flg) = cl_abap_matcher=>matches( pattern     = '.*(UNIFIED_MARK)|(TRACE_MARK)|(IDENTIFIED_MARK).*'
                                                       text        = ls_roster-dop_dan
                                                       ignore_case = abap_true ).
          IF lv_dop_flg = abap_true.
            <ls_esf_data>-dop_flg = SWITCH #( lv_dop_flg WHEN abap_true THEN icon_message_information ).
            EXIT.
          ENDIF.
        ENDLOOP.
      ENDIF.
      "<-- 10.04.2024 D.Kruhliakou #38548
    ENDLOOP.
  ENDMETHOD.

  METHOD toolbar_buttons_unbind.
    INSERT VALUE #( function  = 'MODE4_REFRESH'
                    quickinfo = 'Обновить'(b26)
                    icon      = icon_refresh ) INTO e_object->mt_toolbar INDEX 1.
  ENDMETHOD.

  METHOD mode4_refresh.
    get_fi_data( ).

    show_data( EXPORTING iv_type  = 'UNBIND_FI'
               CHANGING  er_grid  = go_grid_4
                         et_table = gt_fi_data_filtered ).
  ENDMETHOD.
  "<-- 8000000074 AK_BUTVILOVSK

  METHOD get_settings.                                      " 8000000248
    gt_auart_serv = zcl_stvarv=>get_parameter_range( zcl_stvarv=>zsd_ordtype_services ).
    gt_mtart_serv = zcl_stvarv=>get_parameter_range( zcl_stvarv=>zsd_mtart_services ).
  ENDMETHOD.

*  METHOD get_data_items_doc_31.
*
*    DATA: lv_nds   TYPE i,
*          lv_nnp   TYPE zfi_esf_roster-nnp,
*          lv_mwskz TYPE bseg-mwskz,
*          lv_waers TYPE t001-waers,
*          lv_wrbtr TYPE bseg-wrbtr,
*          lt_nds   TYPE STANDARD TABLE OF rtax1u15.
*
*
*    ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf n_esf = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf>).
*
*    DATA(lt_vbrp) = read_vbrp_all( ).
*    SORT gt_okei_tab BY msehi.
*
*    LOOP AT gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>).
*      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
*      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
*      <ls_esf_match>-n_esf = <ls_esf>-n_esf.
*      <ls_esf_match>-bukrs = <ls_fi_data_2>-bukrs.
*      <ls_esf_match>-belnr = <ls_fi_data_2>-belnr.
*      <ls_esf_match>-gjahr = <ls_fi_data_2>-gjahr.
*
*      " roster
*      IF NOT <ls_fi_data_2>-vbeln IS INITIAL.
*
*        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2> IMPORTING ev_kursf = DATA(lv_kursf) ).
*        SORT gt_okei_tab BY msehi.
*        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
*          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
*          lv_nnp = lv_nnp + 1.
*
*          " признак
*          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
*          " номер
*          <ls_esf_roster>-n_esf = <ls_esf>-n_esf.
*          " позиция
*          <ls_esf_roster>-nnp = lv_nnp.
*          " наименование
*          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.
*          " ЕИ
*          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
*                                 WITH KEY msehi = <ls_vbrp>-vrkme
*                                 BINARY SEARCH.
*          IF sy-subrc = 0.
*            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
*          ENDIF.
*          <ls_esf_roster>-meins = <ls_vbrp>-vrkme.
*          " количество
*          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
*          " цена(тариф)
*          TRY .
*              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
*            CATCH cx_sy_zerodivide.
*              <ls_esf_roster>-cena_tov = 0.
*          ENDTRY.
*          " без НДС
*          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
*          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
*          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
*          " акциз
*          <ls_esf_roster>-excise = <ls_vbrp>-kzwi6 * lv_kursf.
*          <ls_esf_match>-sum_excise = <ls_esf_match>-sum_excise + <ls_esf_roster>-excise.
*          <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_esf_roster>-excise.
*
*          " ставка НДС
** 8000000248 ставку НДС считывать из документа фактуры. Если не найдена, то получать расчетным путем.
*          CLEAR lv_mwskz.
*          lv_mwskz = |{ <ls_fi_data_2>-mwskz ALPHA = IN }|.
*
*          CLEAR lv_waers.
*          IF <ls_fi_data_2>-waers IS NOT INITIAL.
*            lv_waers = <ls_fi_data_2>-waers.
*          ELSE.
*            lv_waers = <ls_vbrp>-waerk.
*          ENDIF.
*
*          IF <ls_fi_data_2>-bukrs IS NOT INITIAL AND lv_mwskz IS NOT INITIAL AND lv_waers IS NOT INITIAL.
*            CLEAR lt_nds. REFRESH lt_nds.
*            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT' " поиск ставки НДС по коду налога
*              EXPORTING
*                i_bukrs           = <ls_fi_data_2>-bukrs
*                i_mwskz           = lv_mwskz
*                i_waers           = lv_waers
*                i_wrbtr           = <ls_vbrp>-mwsbp
*              TABLES
*                t_mwdat           = lt_nds
*              EXCEPTIONS
*                bukrs_not_found   = 1
*                country_not_found = 2
*                mwskz_not_defined = 3
*                mwskz_not_valid   = 4
*                ktosl_not_found   = 5
*                kalsm_not_found   = 6
*                parameter_error   = 7
*                knumh_not_found   = 8
*                kschl_not_found   = 9
*                unknown_error     = 10
*                account_not_found = 11
*                txjcd_not_valid   = 12
*                OTHERS            = 13.
*            IF sy-subrc EQ 0 AND lt_nds IS NOT INITIAL.
*              TRY.
*                  <ls_esf_roster>-st_nds = lt_nds[ 1 ]-msatz.
*                CATCH cx_sy_itab_line_not_found.
*                  CLEAR <ls_esf_roster>-st_nds.
*              ENDTRY.
*            ELSE.
*              TRY. " расчетным путем - как было раньше
*                  lv_nds = <ls_vbrp>-mwsbp / <ls_vbrp>-netwr * 100.
*                  <ls_esf_roster>-st_nds = lv_nds.
*                CATCH cx_sy_zerodivide.
*                  <ls_esf_roster>-st_nds = 0.
*              ENDTRY.
*            ENDIF.
*          ELSE.
*            TRY.  " расчетным путем - как было раньше
*                lv_nds = <ls_vbrp>-mwsbp / <ls_vbrp>-netwr * 100.
*                <ls_esf_roster>-st_nds = lv_nds.
*              CATCH cx_sy_zerodivide.
*                <ls_esf_roster>-st_nds = 0.
*            ENDTRY.
*          ENDIF.
**
*          " ставка ндс/справочник
*          <ls_esf_roster>-id_tp_nds = COND #( WHEN <ls_esf_roster>-st_nds = 0 THEN 'NO_VAT' ELSE 'DECIMAL' ).
*          " сумма НДС
*          <ls_esf_roster>-nds = <ls_vbrp>-mwsbp * lv_kursf.
*          <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
*          <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
*          " сумма с НДС
*          <ls_esf_roster>-snds = ( <ls_vbrp>-netwr + <ls_vbrp>-mwsbp ) * lv_kursf.
*          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
*          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.
*          IF <ls_esf>-pr_vzml_post = abap_true                                                                      "#8
*            OR  <ls_fi_data_2>-prvzml_ish = abap_true AND  <ls_esf>-id_type_esf = lcl_report=>gc_esf_ty_additional. "DHVK942202
*            <ls_esf_roster>-code_tov_ved = <ls_vbrp>-zeinr.
*          ENDIF.
*          <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
*          <ls_esf_roster>-cena_tov = round( val = <ls_esf_roster>-cena_tov  dec = 2 ).              " DHVK930820
*
** 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
**
*        ENDLOOP.
*      ELSE.
*
** 8000000376 проверяем - это реализация ОС резиденту РБ или нет
*        SELECT COUNT(*) FROM bseg
*           WHERE bukrs = <ls_fi_data_2>-bukrs
*             AND belnr = <ls_fi_data_2>-belnr
*             AND gjahr = <ls_fi_data_2>-gjahr
*             AND anln1 IS NOT NULL.
*
*        IF sy-subrc EQ 0. " реализация ОС резиденту РБ - заполняем данные позиции
*          " roster
*          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING <ls_esf_roster>.
*          lv_nnp = lv_nnp + 1.
*
*          " признак
*          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
*          " номер
*          <ls_esf_roster>-n_esf = <ls_esf_match>-n_esf.
*          " позиция
*          <ls_esf_roster>-nnp = lv_nnp.
*          " наименование ОС
*          SELECT SINGLE zafull~txtf1,
*                        zafull~txtf2
*            INTO @DATA(ls_txt)
*            FROM zafull
*           LEFT JOIN bseg ON zafull~bukrs = bseg~bukrs
*                          AND zafull~anln1 = bseg~anln1
*                          AND zafull~anln2 = bseg~anln2
*           WHERE bseg~bukrs = @<ls_fi_data_2>-bukrs
*            AND bseg~belnr = @<ls_fi_data_2>-belnr
*            AND bseg~gjahr = @<ls_fi_data_2>-gjahr
*            AND bseg~anln1 IS NOT NULL.
*
*          IF ls_txt-txtf2 IS INITIAL.
*            <ls_esf_roster>-nm_tov = ls_txt-txtf1.
*          ELSE.
*            <ls_esf_roster>-nm_tov = ls_txt-txtf1 && ls_txt-txtf2.
*          ENDIF.
*
*          " ЕИ (по умолч. ШТ)
*          <ls_esf_roster>-ed_izm = '796'.
*          <ls_esf_roster>-meins = 'ST'.
*          " количество
*          <ls_esf_roster>-kol_tov = 1.
*          " цена без НДС
*          TRY.
*              <ls_esf_roster>-cena_tov = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
*            CATCH cx_sy_zerodivide.
*              <ls_esf_roster>-cena_tov = 0.
*          ENDTRY.
*
*          " ставка НДС
*          CLEAR lv_mwskz.
*          lv_mwskz = |{ <ls_fi_data_2>-mwskz ALPHA = IN }|.
*
*          CLEAR lv_waers.
*          IF NOT <ls_fi_data_2>-waers IS INITIAL.
*            <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
*          ELSE.
*            SELECT SINGLE h_waers
*              INTO <ls_esf_roster>-waers
*              FROM bseg
*             WHERE bseg~bukrs = <ls_fi_data_2>-bukrs
*              AND bseg~belnr = <ls_fi_data_2>-belnr
*              AND bseg~gjahr = <ls_fi_data_2>-gjahr
*              AND bseg~anln1 IS NOT NULL.
*          ENDIF.
*          lv_waers = <ls_esf_roster>-waers.
*
*          CLEAR lv_wrbtr.
*          lv_wrbtr = <ls_fi_data_2>-total_w_vat.
*
*          IF <ls_fi_data_2>-bukrs IS NOT INITIAL AND lv_mwskz IS NOT INITIAL AND lv_waers IS NOT INITIAL.
*            CLEAR lt_nds. REFRESH lt_nds.
*            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT' " поиск ставки НДС по коду налога
*              EXPORTING
*                i_bukrs           = <ls_fi_data_2>-bukrs
*                i_mwskz           = lv_mwskz
*                i_waers           = lv_waers
*                i_wrbtr           = lv_wrbtr
*              TABLES
*                t_mwdat           = lt_nds
*              EXCEPTIONS
*                bukrs_not_found   = 1
*                country_not_found = 2
*                mwskz_not_defined = 3
*                mwskz_not_valid   = 4
*                ktosl_not_found   = 5
*                kalsm_not_found   = 6
*                parameter_error   = 7
*                knumh_not_found   = 8
*                kschl_not_found   = 9
*                unknown_error     = 10
*                account_not_found = 11
*                txjcd_not_valid   = 12
*                OTHERS            = 13.
*            IF sy-subrc EQ 0 AND lt_nds IS NOT INITIAL.
*              TRY.
*                  <ls_esf_roster>-st_nds = lt_nds[ 1 ]-msatz.
*                CATCH cx_sy_itab_line_not_found.
*                  CLEAR <ls_esf_roster>-st_nds.
*              ENDTRY.
*            ELSE.
*              TRY. " расчетным путем
*                  lv_nds = <ls_fi_data_2>-total_vat / <ls_fi_data_2>-total_w_vat * 100.
*                  <ls_esf_roster>-st_nds = lv_nds.
*                CATCH cx_sy_zerodivide.
*                  <ls_esf_roster>-st_nds = 0.
*              ENDTRY.
*            ENDIF.
*          ELSE.
*            TRY.  " расчетным путем
*                lv_nds = <ls_fi_data_2>-total_vat / <ls_fi_data_2>-total_w_vat * 100.
*                <ls_esf_roster>-st_nds = lv_nds.
*              CATCH cx_sy_zerodivide.
*                <ls_esf_roster>-st_nds = 0.
*            ENDTRY.
*          ENDIF.
**
*          " ставка ндс/справочник
*          <ls_esf_roster>-id_tp_nds = COND #( WHEN <ls_esf_roster>-st_nds = 0 THEN 'NO_VAT' ELSE 'DECIMAL' ).
*          " сумма НДС
*          <ls_esf_roster>-nds = <ls_fi_data_2>-total_vat.
*          " сумма с НДС
*          <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat.
*          " сумма без НДС
*          <ls_esf_roster>-nonds = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
*          " акциз
*          <ls_esf_roster>-excise = <ls_fi_data_2>-excise.
*        ENDIF.
** 8000000376 end
*
*        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
*        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
*        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
*        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.
*
*        <ls_esf_match>-sum_nds = <ls_fi_data_2>-total_vat.
*        <ls_esf_match>-sum_nonds = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
*        <ls_esf_match>-sum_snds = <ls_fi_data_2>-total_w_vat.
*        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
*
*      ENDIF.
*    ENDLOOP.
*
*    <ls_esf>-last_user = sy-uname.
*    <ls_esf>-aedat = sy-datum.
*    <ls_esf>-creat_user = sy-uname.
*    <ls_esf>-crdate     = sy-datum.
*    GET TIME STAMP FIELD <ls_esf>-tstampl.
*
*  ENDMETHOD.
*
*  METHOD get_data_items_doc_33.
*
*    DATA: lv_nds   TYPE i,
*          lv_nnp   TYPE zfi_esf_roster-nnp,
*          lv_mwskz TYPE bseg-mwskz,
*          lv_waers TYPE t001-waers,
*          lv_wrbtr TYPE bseg-wrbtr,
*          lt_nds   TYPE STANDARD TABLE OF rtax1u15.
*
*    ASSIGN gt_esf_data[ pr_esf = lcl_report=>gv_pr_esf n_esf = lcl_report=>gv_n_esf ] TO FIELD-SYMBOL(<ls_esf>).
*
*
*    ASSIGN gt_fi_data[ n_esf = lcl_report=>gv_n_esf bukrs = <ls_esf>-bukrs belnr = <ls_esf>-belnr gjahr = <ls_esf>-gjahr ] TO FIELD-SYMBOL(<ls_fi_data>).
*    IF sy-subrc <> 0.
*      RETURN.
*    ENDIF.
*
*    " выборка по позициям декларации
*    SELECT zcs_cust_goods~goods_tnvedcode, vbfa~posnn AS zeile,
*            zcs_cust_hcd~cee_country_code, zcs_cust_hcd~cee_short_name,zcs_cust_hcd~cee_address
*      FROM zcs_cust_goods
*        JOIN zcs_cust_hcd ON zcs_cust_goods~declarant_id = zcs_cust_hcd~declarant_id
*        JOIN vbfa ON vbfa~vbelv = zcs_cust_hcd~rel_mblnr
*                     OR vbfa~vbelv = zcs_cust_goods~mblnr
*                        AND  right( vbfa~posnv,4 ) = zcs_cust_goods~zeile
*      WHERE vbfa~vbeln = @<ls_fi_data>-vbeln
*        AND vbfa~vbtyp_v = 'J'
*      ORDER BY goods_tnvedcode, zeile
*        INTO TABLE @DATA(lt_cust_goods).
*
*
*    SORT gt_okei_tab BY msehi.
*    DATA(lt_vbrp) = read_vbrp_all( ).
*
*    LOOP AT gt_fi_data ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
*
*      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
*      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
*      <ls_esf_match>-n_esf = <ls_esf>-n_esf.
*      <ls_esf_match>-bukrs = <ls_fi_data_2>-bukrs.
*      <ls_esf_match>-belnr = <ls_fi_data_2>-belnr.
*      <ls_esf_match>-gjahr = <ls_fi_data_2>-gjahr.
*
*      " roster
*      IF NOT <ls_fi_data_2>-vbeln IS INITIAL.
*        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2> IMPORTING ev_kursf = DATA(lv_kursf) ).
*
*        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
*          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
*          lv_nnp = lv_nnp + 1.
*
*          " признак
*          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
*          " номер
*          <ls_esf_roster>-n_esf = <ls_esf_match>-n_esf.
*          " позиция
*          <ls_esf_roster>-nnp = lv_nnp.
*          " наименование
*          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.
*
*          " код товара
*          READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
*                                   WITH KEY zeile = <ls_vbrp>-posnr+2(4)
*                                   BINARY SEARCH.
*          IF sy-subrc = 0.
*            <ls_esf_roster>-code_tov_ved = <ls_cust_goods>-goods_tnvedcode.
*            IF <ls_esf_roster>-code_tov_ved   IN lcl_report=>gt_strat_code.              "{DHVK934319
*              <ls_esf>-pr_sdper_post = abap_true.                                     "}DHVK934319
*            ENDIF.
*          ENDIF.
*          " ЕИ
*          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
*                                 WITH KEY msehi = <ls_vbrp>-vrkme
*                                 BINARY SEARCH.
*          IF sy-subrc = 0.
*            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
*          ENDIF.
*          <ls_esf_roster>-meins = <ls_vbrp>-vrkme.
*          " количество
*          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
*          " цена(тариф)
*          TRY .
*              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf *  <ls_vbrp>-koef.
*            CATCH cx_sy_zerodivide.
*              <ls_esf_roster>-cena_tov = 0.
*          ENDTRY.
*          " без НДС
*          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
*          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
*          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
*          " акциз
*          <ls_esf_roster>-excise = 0.
*          <ls_esf_match>-sum_excise = 0.
*          <ls_esf>-sum_excise = 0.
*          " ставка НДС
*          <ls_esf_roster>-st_nds = 0.
*          " ставка ндс/справочник
*          <ls_esf_roster>-id_tp_nds = 'ZERO'.
*          " сумма НДС
*          <ls_esf_roster>-nds = 0.
*          <ls_esf_match>-sum_nds = 0.
*          <ls_esf>-sum_nds = 0.
*          " сумма с НДС
*          <ls_esf_roster>-snds = <ls_vbrp>-netwr * lv_kursf.
*          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
*          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.
*          <ls_esf_roster>-waers = <ls_fi_data_2>-waers.
*          <ls_esf_roster>-cena_tov = 0.         " DHVK930820
*
** 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
**
*        ENDLOOP.
*      ELSE.
*        <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
*        <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
*        <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
*        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.
*
*        <ls_esf_match>-sum_nds = <ls_fi_data_2>-total_vat.
*        <ls_esf_match>-sum_nonds = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
*        <ls_esf_match>-sum_snds = <ls_fi_data_2>-total_w_vat.
*        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
*      ENDIF.
*    ENDLOOP.
*
*    <ls_esf>-last_user = sy-uname.
*    <ls_esf>-aedat = sy-datum.
*    <ls_esf>-creat_user = sy-uname.
*    <ls_esf>-crdate     = sy-datum.
*
*    GET TIME STAMP FIELD <ls_esf>-tstampl.
*
*  ENDMETHOD.

  METHOD build_64.
    DATA lv_n_esf         TYPE zfi_esf-n_esf.
    DATA lv_cnt           TYPE i.
    DATA lv_partner       TYPE but000-partner.
    DATA lv_taxnum        TYPE dfkkbptaxnum-taxnum.
    DATA lv_frt           TYPE bp3010-frt.
    DATA lv_name          TYPE thead-tdname.
    DATA lv_text          TYPE string.
    DATA lv_question_text TYPE string.
    DATA lv_answer        TYPE c LENGTH 1.
    DATA lv_nnp           TYPE zfi_esf_roster-nnp.

    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data>) WHERE chk_box = abap_true.
      IF lv_n_esf IS INITIAL.
        generate_esf_number( EXPORTING is_fi_data = <ls_fi_data>
                             IMPORTING ev_n_esf   = lv_n_esf ).
      ENDIF.

      lv_cnt = lv_cnt + 1.
    ENDLOOP.
    UNASSIGN <ls_fi_data>.

    ASSIGN gt_fi_data_filtered[ chk_box = abap_true ] TO <ls_fi_data>.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " улуги?
    SELECT SINGLE vbak~auart
      FROM vbak
             JOIN
               vbfa ON vbak~vbeln = vbfa~vbelv
      INTO @DATA(lv_auart)
      WHERE vbfa~vbeln   = @<ls_fi_data>-vbeln
        AND vbfa~vbtyp_v = 'C'.

    " 8000000248 поиск из настройки видов ТД для услуг
    get_settings( ).
    "

    " ТТН-1, ТН-2
    get_zdeliv_note_h( EXPORTING iv_vbeln  = <ls_fi_data>-vbeln
                       IMPORTING es_zdeliv = DATA(ls_zdeliv) ).

    lv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|.

    APPEND INITIAL LINE TO gt_esf_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
    <ls_esf>-n_esf         = lv_n_esf.

    " 1.Номер ЭСЧФ( 2. N_ESF )
    <ls_esf>-n_esf         = lv_n_esf.
*    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    <ls_esf>-pr_esf        = lcl_report=>gc_out_inv.

    " 3. ID_VID_IOP
    <ls_esf>-id_vid_iop    = lcl_report_out=>gc_64.

    " 5. ID_STAT_ESF_V
    <ls_esf>-id_stat_esf_v = lcl_report=>gc_stat_v_inprogress.

    " 8. BUKRS/9. BELNR/10. GJAHR
* --> AK_BUTVILOVS #8000000664, zfi_reginv БЕ и год ЭСЧФ с несколькими
*    IF lv_cnt = 1.
*      <ls_esf>-bukrs = <ls_fi_data>-bukrs.
*      <ls_esf>-belnr = <ls_fi_data>-belnr.
*      <ls_esf>-gjahr = <ls_fi_data>-gjahr.
*    ELSE.
*      <ls_esf>-belnr = lcl_report=>gc_1_n.
*    ENDIF.

    <ls_esf>-bukrs         = <ls_fi_data>-bukrs.
    <ls_esf>-gjahr         = <ls_fi_data>-gjahr.

    IF lv_cnt = 1.
      <ls_esf>-belnr = <ls_fi_data>-belnr.
    ELSE.
      <ls_esf>-belnr = lcl_report=>gc_1_n.
    ENDIF.
    " <-- AK_BUTVILOVS #8000000664

    " 3.Дата совершения операции ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-dt_op_esf   = last_mday( <ls_fi_data>-budat ).             "#3

    " 4.Тип ЭСЧФ( 12. DT_OP_ESF )
    <ls_esf>-id_type_esf = iv_id_type_esf.

    " 5.К ЭСЧФ( 14. N_ESF_ISH ) / 5.1.Дата аннулирования ЭСЧФ( 15. DT_ANUL_ESF )
    get_esf_ish_anul( EXPORTING is_fi_data     = <ls_fi_data>
                                iv_id_type_esf = <ls_esf>-id_type_esf
                      IMPORTING ev_n_esf_ish   = <ls_esf>-n_esf_ish
                                ev_dt_vs_esf   = <ls_esf>-dt_anul_esf ).

*    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional. "8000000345

    " 6.Статус поставщика( 17. ID_STAT_POST )
    <ls_esf>-id_stat_post = 'SELLER'.

    " 6.1.Взаимозависимое лицо( 18. PR_VZML_POST )
    get_vzml( EXPORTING iv_partner = <ls_fi_data>-lifnr
              CHANGING  cv_vzml    = <ls_esf>-pr_vzml_post ).

    " 6.4.Организация, включенная в перечень крупных плательщиков( 21. PR_BIGCOMP_POST )
    <ls_esf>-pr_bigcomp_post = abap_true.

    " 7.Код страны поставщика( 22. COUNTRYCODE_POST )
    get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                 CHANGING  ev_intcn3  = <ls_esf>-countrycode_post ).

    " 8.УНП( 23. UNP_POST )
    get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_taxnum  = lv_taxnum ).
    <ls_esf>-unp_post = lv_taxnum.

    " 8.1.Код филиала( 24. CODE_POST_FIL )
    get_bp3010( EXPORTING iv_patrner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                CHANGING  ev_frt     = lv_frt ).
    <ls_esf>-code_post_fil = lv_frt.

    " 9.Поставщик( 25. NM_POST )
    lv_name = lv_partner.
    get_partner_name( EXPORTING iv_id     = gc_id
                                iv_spras  = sy-langu
                                iv_name   = lv_name
                                iv_object = gc_object
                      CHANGING  ev_text   = lv_text ).
    <ls_esf>-nm_post = lv_text.

    " 10.Юридический адрес( 26. ADDRES_POST )
    get_addr( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
              CHANGING  ev_text    = lv_text ).
    <ls_esf>-addres_post = lv_text.

    IF gv_id_type_esf <> lcl_report=>gc_esf_ty_additional.  " 8000000345

      " 34. N_VVOZ_TOV_POST / 35. DT_VVOZ_TOV_POST
      SELECT SINGLE znumber zdate FROM zfi_nds_selappl
        INTO ( <ls_esf>-n_vvoz_tov_post, <ls_esf>-dt_vvoz_tov_post )
        WHERE bukrs = <ls_fi_data>-bukrs
          AND belnr = <ls_fi_data>-belnr
          AND gjahr = <ls_fi_data>-gjahr.

      " Статус получателя( 36. ID_STAT_POKUP )
      <ls_esf>-id_stat_pokup = 'CUSTOMER'.

      " 16.Код страны получателя( 41. COUNTRYCODE_POKUP )
      get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                   CHANGING  ev_intcn3  = <ls_esf>-countrycode_pokup ).

      " 17.УНП( 42. UNP_POKUP )
      get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                  CHANGING  ev_taxnum  = lv_taxnum ).
      <ls_esf>-unp_pokup = lv_taxnum.

      " 24.Наименование( 44. NM_POKUP )
      lv_name = <ls_fi_data>-lifnr.
      get_partner_name( EXPORTING iv_id     = gc_id
                                  iv_spras  = sy-langu
                                  iv_name   = lv_name
                                  iv_object = gc_object
                        CHANGING  ev_text   = lv_text ).
      <ls_esf>-nm_pokup = lv_text.

      " 19.Юридический адрес( 45. ADDRES_POKUP )
      get_addr( EXPORTING iv_partner = <ls_fi_data>-lifnr
                CHANGING  ev_text    = lv_text ).
      <ls_esf>-addres_pokup = lv_text.

*      IF lv_auart <> 'ZUSL'.  " не заполняем для услуг
      IF lv_auart NOT IN gt_auart_serv. " не заполняем для услуг
        " 22.Код страны грузоотправителя( "50. COUNTRYCODE_GROTP )
        get_country( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grotp ).

        " 23.УНП( 50. COUNTRYCODE_GROTP )
        get_taxnum( EXPORTING iv_partner = |{ <ls_fi_data>-bukrs ALPHA = IN }|
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grotp = lv_taxnum. CLEAR lv_taxnum.

        " 24.Наименование( 52. NM_GROTP )
        lv_name = lv_partner.
        get_partner_name( EXPORTING iv_id     = gc_id
                                    iv_spras  = sy-langu
                                    iv_name   = lv_name
                                    iv_object = gc_object
                          CHANGING  ev_text   = lv_text ).
        <ls_esf>-nm_grotp      = lv_text.

        " 25.Адрес отправки( 56. NM_GRPOL )
        <ls_esf>-address_grotp = COND #( WHEN ls_zdeliv-zvsteltxt IS NOT INITIAL
                                         THEN ls_zdeliv-zvsteltxt
                                         ELSE <ls_esf>-addres_post ).

        " 26.Код страны Грузополучателя( 54. COUNTRYCODE_GRPOL )
        get_country( EXPORTING iv_partner = <ls_fi_data>-lifnr
                     CHANGING  ev_intcn3  = <ls_esf>-countrycode_grpol ).

        " 27.УНП( 55. UNN_GRPOL )
        get_taxnum( EXPORTING iv_partner = <ls_fi_data>-lifnr
                    CHANGING  ev_taxnum  = lv_taxnum ).
        <ls_esf>-unn_grpol = lv_taxnum. CLEAR lv_taxnum.

        " 28.Наименование( 56. NM_GRPOL )
        <ls_esf>-nm_grpol      = <ls_esf>-nm_pokup.

        " 29.Адрес отправки( 57. ADDRESS_GRPOL )
        <ls_esf>-address_grpol = COND #( WHEN ls_zdeliv-zvstel2txt IS NOT INITIAL
                                         THEN ls_zdeliv-zvstel2txt
                                         ELSE <ls_esf>-addres_pokup ).
      ENDIF.
    ENDIF.                                                  " 8000000345
    "

    " 30.Договор (контракт) на поставку товара( 58. N_DOG )
    <ls_esf>-n_dog  = <ls_fi_data>-ndoc.

    " 30.Дата договора (контракта)( 59. DT_DOG )
    <ls_esf>-dt_dog = <ls_fi_data>-dcdoc.

    " 31.Дополнительные сведения (DOP_SVED). Автоматическое заполнение текстом согласно настройке (#8000000345)
    SELECT SINGLE text INTO <ls_esf>-dop_sved
      FROM zfi_esf_dop_sved
      WHERE id_type_esf = gv_id_type_esf
        AND id_vid_iop  = <ls_esf>-id_vid_iop.

    " 60.
    IF ls_zdeliv IS NOT INITIAL.
      <ls_esf>-id_vid_doc = '608'.                          " ls_zdeliv-zvddc.#5
      <ls_esf>-nm_vid_doc = ''.
      <ls_esf>-dt_doc     = ''.
      IF ls_zdeliv-zkdf IS NOT INITIAL.                     " DHVK950029
        <ls_esf>-code_tp_blank = ls_zdeliv-zkdf.
      ELSE.
        <ls_esf>-code_tp_blank = ''.
      ENDIF.
      <ls_esf>-ser_tp_blank = ls_zdeliv-zser.
      <ls_esf>-n_tp_blank   = ls_zdeliv-znum_etsd.

*{ AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
*      Перемещено вниз
*      "Название ( 61. NM_VID_DOC )
*      SELECT SINGLE nm_vid_doc
*        FROM zfi_vid_doc
*        INTO <ls_esf>-nm_vid_doc
*       WHERE id_vid_doc = <ls_esf>-id_vid_doc.
*} AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    ELSE.
      <ls_esf>-dt_doc     = <ls_fi_data>-bldat.
      <ls_esf>-n_tp_blank = <ls_fi_data>-xblnr.
      " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
      SELECT vbelv, posnv FROM vbfa
        UP TO 1 ROWS
        INTO @DATA(ls_vbfa)
        WHERE vbeln   = @<ls_fi_data>-vbeln
          AND vbtyp_n = 'M'
          AND vbtyp_v = 'C'
        ORDER BY posnn ASCENDING.
      ENDSELECT.
      IF sy-subrc = 0.
        SELECT SINGLE zz_id_vid_doc FROM vbap
          INTO <ls_esf>-id_vid_doc
          WHERE vbeln = ls_vbfa-vbelv
            AND posnr = ls_vbfa-posnv.
      ENDIF.
      " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    ENDIF.

    " { AK_BADYLEVIC #25732 Заполнение поля "Вид документа"
    " Название ( 61. NM_VID_DOC )
    SELECT SINGLE nm_vid_doc FROM zfi_vid_doc
      INTO <ls_esf>-nm_vid_doc
      WHERE id_vid_doc = <ls_esf>-id_vid_doc.
    " } AK_BADYLEVIC #25732 Заполнение поля "Вид документа"

    " --> AK_BUTVILOVS #8000000213, Документы не попадают 2 раздел деклараци
    DO 1 TIMES.
      IF NOT (    iv_id_type_esf = gc_esf_original_type
               OR iv_id_type_esf = gc_esf_add_no_reference_type
               OR iv_id_type_esf = gc_esf_fixed_type ).
        CONTINUE.
      ENDIF.

      IF <ls_esf>-countrycode_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Код страны поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, 'Код страны поставщика'|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-unp_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'УНП Поставщика'.
        ELSE.
          lv_question_text = |{ lv_question_text }, УНП Поставщика|.
        ENDIF.
      ENDIF.

      IF <ls_esf>-addres_post IS INITIAL.
        IF lv_question_text IS INITIAL.
          lv_question_text = 'Юридический адрес'.
        ELSE.
          lv_question_text = |{ lv_question_text }, Юридический адрес|.
        ENDIF.
      ENDIF.

      IF     iv_id_type_esf  = gc_esf_original_type
         AND ls_zdeliv      IS NOT INITIAL.
        IF <ls_esf>-countrycode_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Код страны грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Код страны грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-unn_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'УНП Грузоотправителя'.
          ELSE.
            lv_question_text = |{ lv_question_text }, УНП Грузоотправителя|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-nm_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Наименование'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Наименование|.
          ENDIF.
        ENDIF.

        IF <ls_esf>-address_grotp IS INITIAL.
          IF lv_question_text IS INITIAL.
            lv_question_text = 'Адрес отправки'.
          ELSE.
            lv_question_text = |{ lv_question_text }, Адрес отправки|.
          ENDIF.
        ENDIF.

*        IF <ls_esf>-countrycode_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Код страны грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Код страны грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-unn_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'УНП Грузополучателя'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, УНП Грузополучателя|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-nm_grpol IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Наименование'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Наименование|.
*          ENDIF.
*        ENDIF.
*
*        IF <ls_esf>-address_grpol  IS INITIAL.
*          IF lv_question_text IS INITIAL.
*            lv_question_text = 'Адрес доставки'.
*          ELSE.
*            lv_question_text = |{ lv_question_text }, Адрес доставки|.
*          ENDIF.
*        ENDIF.
      ENDIF.

      IF lv_question_text IS INITIAL.
        CONTINUE.
      ENDIF.

      lv_question_text = |По создаваемому ЭСЧФ не заполнены следующие поля: { lv_question_text }.| &&
                         cl_abap_char_utilities=>cr_lf &&
                         |Продолжить создание?|.

      CALL FUNCTION 'POPUP_TO_CONFIRM'
        EXPORTING  titlebar              = gc_create_check_titlebar
*                   DIAGNOSE_OBJECT       = ' '
                   text_question         = lv_question_text
                   text_button_1         = 'Да'
                   icon_button_1         = 'ICON_CHECKED'
                   text_button_2         = 'Нет'
                   icon_button_2         = 'ICON_CANCEL'
                   display_cancel_button = abap_false
        IMPORTING  answer                = lv_answer
        EXCEPTIONS text_not_found        = 1
                   OTHERS                = 2.
      IF sy-subrc <> 0.
      ENDIF.

      IF lv_answer <> '1'.
        DELETE TABLE gt_esf_data FROM <ls_esf>.
        RETURN.
      ENDIF.
    ENDDO.

    <ls_fi_data>-n_esf = <ls_esf>-n_esf.
    " <-- AK_BUTVILOVS #8000000213

*    ENDIF.
    DATA(lt_vbrp) = read_vbrp_all( ).
    LOOP AT gt_fi_data_filtered ASSIGNING FIELD-SYMBOL(<ls_fi_data_2>) WHERE chk_box = abap_true.
      " match
      APPEND INITIAL LINE TO gt_esf_match ASSIGNING FIELD-SYMBOL(<ls_esf_match>).
      <ls_esf_match>-pr_esf = <ls_esf>-pr_esf.
      <ls_esf_match>-n_esf  = <ls_esf>-n_esf.
      <ls_esf_match>-bukrs  = <ls_fi_data_2>-bukrs.
      <ls_esf_match>-belnr  = <ls_fi_data_2>-belnr.
      <ls_esf_match>-gjahr  = <ls_fi_data_2>-gjahr.

      " roster
      IF <ls_fi_data>-vbeln IS NOT INITIAL.
        get_real_kurs( EXPORTING is_fi_data = <ls_fi_data_2>
                       IMPORTING ev_kursf   = DATA(lv_kursf) ).

        " ТН ВЭД ЕАЭС
        SELECT zcs_cust_goods~goods_tnvedcode,
               vbfa~posnn                     AS zeile
          FROM zcs_cust_goods
                 JOIN
                   zcs_cust_hsd ON zcs_cust_goods~declarant_id = zcs_cust_hsd~declarant_id
                     JOIN
                       vbfa ON vbfa~vbelv = zcs_cust_hsd~rel_mblnr
                            OR     vbfa~vbelv            = zcs_cust_goods~mblnr
                               AND right( vbfa~posnv,4 ) = zcs_cust_goods~zeile
          WHERE vbfa~vbeln   = @<ls_fi_data_2>-vbeln
            AND vbfa~vbtyp_v = 'J'
          ORDER BY goods_tnvedcode,
                   vbfa~posnn
          INTO TABLE @DATA(lt_cust_goods).

        SORT gt_okei_tab BY msehi.

        LOOP AT lt_vbrp ASSIGNING FIELD-SYMBOL(<ls_vbrp>) WHERE vbeln = <ls_fi_data_2>-vbeln.
          APPEND INITIAL LINE TO gt_esf_roster ASSIGNING FIELD-SYMBOL(<ls_esf_roster>).
          lv_nnp = lv_nnp + 1.

          " признак
          <ls_esf_roster>-pr_esf = <ls_esf>-pr_esf.
          " номер
          <ls_esf_roster>-n_esf  = <ls_esf>-n_esf.
          " позиция
          <ls_esf_roster>-nnp    = lv_nnp.
          " наименование
          <ls_esf_roster>-nm_tov = <ls_vbrp>-text.
          " код товара
          READ TABLE lt_cust_goods ASSIGNING FIELD-SYMBOL(<ls_cust_goods>)
               WITH KEY zeile = <ls_vbrp>-posnr+2(4)
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-code_tov_ved = <ls_cust_goods>-goods_tnvedcode.

            IF <ls_esf_roster>-code_tov_ved IN lcl_report=>gr_strat_code.             "{DHVK934319
              <ls_esf>-pr_sdper_post = abap_true.                                     "}DHVK934319
            ENDIF.
          ENDIF.

          " ЕИ
          READ TABLE gt_okei_tab ASSIGNING FIELD-SYMBOL(<ls_okei>)
               WITH KEY msehi = <ls_vbrp>-vrkme
               BINARY SEARCH.
          IF sy-subrc = 0.
            <ls_esf_roster>-ed_izm = <ls_okei>-okei.
          ENDIF.
          <ls_esf_roster>-meins   = <ls_vbrp>-vrkme.
          " количество
          <ls_esf_roster>-kol_tov = <ls_vbrp>-fkimg.
          " цена(тариф)
          TRY.
              <ls_esf_roster>-cena_tov = <ls_vbrp>-netwr / <ls_vbrp>-fkimg * lv_kursf * <ls_vbrp>-koef.
            CATCH cx_sy_zerodivide.
              <ls_esf_roster>-cena_tov = 0.
          ENDTRY.
          " без НДС
          <ls_esf_roster>-nonds = <ls_vbrp>-netwr * lv_kursf.
          <ls_esf_match>-sum_nonds = <ls_esf_match>-sum_nonds + <ls_esf_roster>-nonds.
          <ls_esf>-sum_nonds = <ls_esf>-sum_nonds + <ls_esf_roster>-nonds.
          " акциз
          <ls_esf_roster>-excise = 0.
          <ls_esf_match>-sum_excise = 0.
          <ls_esf>-sum_excise = 0.
          " ставка НДС
          <ls_esf_roster>-st_nds    = 20.
          " ставка ндс/справочник
          <ls_esf_roster>-id_tp_nds = 'DECIMAL'.
          " сумма НДС
          <ls_esf_roster>-nds       = <ls_fi_data_2>-total_vat.
          <ls_esf_match>-sum_nds = <ls_esf_match>-sum_nds + <ls_esf_roster>-nds.
          <ls_esf>-sum_nds = <ls_esf>-sum_nds + <ls_esf_roster>-nds.
          " сумма с НДС
          <ls_esf_roster>-snds = <ls_fi_data_2>-total_w_vat.
          <ls_esf_match>-sum_snds = <ls_esf_match>-sum_snds + <ls_esf_roster>-snds.
          <ls_esf>-sum_snds = <ls_esf>-sum_snds + <ls_esf_roster>-snds.

          <ls_esf_roster>-waers         = <ls_fi_data_2>-waers.

*{ 26/04/2023 G.Domanikova #27733 Выгрузка в ЭСЧФ вида деятельности соответствующего в сбытовом заказе
* 8000000248 для услуг заполняем поле Код вида деятельности в позиции ЭСЧФ значением "кода вида деятельности ОКРБ"(поле ZZ_OKRB таблица T023) на основании данных вида деятельности заполненных в первичном документе
*          IF <ls_vbrp>-mtart IN gt_mtart_serv. "услуга
*            SELECT SINGLE t023~zz_okrb
*              FROM t023 JOIN vbap ON t023~matkl = vbap~matkl
*                        JOIN vbrp ON vbap~vbeln = vbrp~vgbel
*                                  AND vbap~posnr = vbrp~vgpos
*               INTO @DATA(lv_zz_okrb)
*             WHERE vbrp~vbeln = @<ls_vbrp>-vbeln
*               AND vbrp~posnr = @<ls_vbrp>-posnr
*               AND vbap~zz_xtwg <> ''.
*
*            IF lv_zz_okrb IS NOT INITIAL.
*              <ls_esf_roster>-code_tov_oced = lv_zz_okrb.
*            ENDIF.
*          ENDIF.
          " заменить выборку присвоением lv_zz_okrb значения 06100 (константа).
          <ls_esf_roster>-code_tov_oced = COND #( WHEN <ls_vbrp>-mtart IN gt_mtart_serv
                                                  THEN gc_zz_okrb
                                                  ELSE <ls_esf_roster>-code_tov_oced ).
          " } 26/04/2023 G.Domanikova
        ENDLOOP.
      ELSE.
        <ls_esf>-sum_nds    = <ls_esf>-sum_nds + <ls_fi_data_2>-total_vat.
        <ls_esf>-sum_nonds  = <ls_esf>-sum_nonds + ( <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat ).
        <ls_esf>-sum_snds   = <ls_esf>-sum_snds + <ls_fi_data_2>-total_w_vat.
        <ls_esf>-sum_excise = <ls_esf>-sum_excise + <ls_fi_data_2>-excise.

        <ls_esf_match>-sum_nds    = <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_nonds  = <ls_fi_data_2>-total_w_vat - <ls_fi_data_2>-total_vat.
        <ls_esf_match>-sum_snds   = <ls_fi_data_2>-total_w_vat.
        <ls_esf_match>-sum_excise = <ls_fi_data_2>-excise.
      ENDIF.
    ENDLOOP.

    "--> 23.01.2024 D.Kruhliakou #35697 Журнал ЭСЧФ ZFI_REGINV
    update_dop_data( <ls_esf> ).
    "--> 23.01.2024 D.Kruhliakou #35697

    <ls_esf>-last_user  = sy-uname.
    <ls_esf>-aedat      = sy-datum.
    <ls_esf>-creat_user = sy-uname.
    <ls_esf>-crdate     = sy-datum.

    GET TIME STAMP FIELD <ls_esf>-tstampl.

    MODIFY gt_fi_data_filtered FROM VALUE #( n_esf = <ls_esf>-n_esf ) TRANSPORTING n_esf WHERE chk_box = abap_true.
  ENDMETHOD.
ENDCLASS.