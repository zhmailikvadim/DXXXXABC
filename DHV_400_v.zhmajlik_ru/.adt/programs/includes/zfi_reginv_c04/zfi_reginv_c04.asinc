*&---------------------------------------------------------------------*
*& Include          ZFI_REGINV_C04
*&---------------------------------------------------------------------*
* История изменений
* Идентификатор  Дата       Примечание
*  DHVK929487    09/02/2019 DEV.030-БНУ.38.O-170 В исходящих ЭСЧФ сделать обязательным поле "Ставка НДС"
*&---------------------------------------------------------------------*
CLASS lcl_corr_edit IMPLEMENTATION.
  METHOD save.
    IF gv_esf IS INITIAL.  "Сохранение корректировок FI документов
      LOOP AT lcl_report_in=>gt_fi_data_filtered
        ASSIGNING FIELD-SYMBOL(<ls_fi_data>)
        USING KEY k1
        WHERE bukrs = gs_doc-bukrs
          AND belnr = gs_doc-belnr
          AND gjahr = gs_doc-gjahr   .
        <ls_fi_data>-corr = COND #( WHEN gt_bset IS INITIAL THEN '' ELSE icon_led_red ).
      ENDLOOP.
      lcl_report_in=>gr_grid_3->refresh_table_display(  i_soft_refresh = abap_true  is_stable = VALUE #( row = 'X' col = 'X' ) ).
      SORT  gt_bset_old BY npp.
      LOOP AT gt_bset ASSIGNING FIELD-SYMBOL(<ls_bset>).
        DATA(lv_tabix) = sy-tabix.
        READ TABLE gt_bset_old ASSIGNING FIELD-SYMBOL(<ls_bset_old>) WITH KEY npp = <ls_bset>-npp.
        IF sy-subrc = 0. "данные были
          IF <ls_bset> = <ls_bset_old>. "данные не изменились
            DELETE gt_bset_old INDEX sy-tabix.
            DELETE gt_bset INDEX lv_tabix.
            CONTINUE.
          ELSE.
            <ls_bset>-last_user = sy-uname.
            <ls_bset>-aedat = sy-datum.
          ENDIF.
        ELSE.  "данных не было
          <ls_bset>-creat_user = sy-uname.
          <ls_bset>-crdate = sy-datum.
        ENDIF.
      ENDLOOP.
      SORT  gt_bset BY npp.
      LOOP AT gt_bset_old ASSIGNING <ls_bset_old>.
        lv_tabix = sy-tabix.
        READ TABLE gt_bset ASSIGNING <ls_bset> WITH KEY npp = <ls_bset_old>-npp.
        IF sy-subrc = 0. "данные были
          DELETE gt_bset_old INDEX lv_tabix.
          CONTINUE.
        ENDIF.
      ENDLOOP.
      IF gt_bset IS NOT INITIAL.
        MODIFY zfi_bset_deduct FROM TABLE gt_bset.
      ENDIF.
      IF gt_bset_old IS NOT INITIAL.
        DELETE zfi_bset_deduct FROM TABLE gt_bset_old.
      ENDIF.
      CALL FUNCTION 'DEQUEUE_EFBKPF'
        EXPORTING
          mode_bkpf = 'E'
          mandt     = sy-mandt
          bukrs     = gs_doc-bukrs
          belnr     = gs_doc-belnr
          gjahr     = gs_doc-gjahr.
    ELSE.



      IF p_mode1 = abap_true.
        LOOP AT lcl_report_out=>gt_esf_data
             ASSIGNING FIELD-SYMBOL(<ls_esf_data>)
             USING KEY k1
             WHERE pr_esf = gv_pr
               AND n_esf = gv_esf.
          <ls_esf_data>-deduct = COND #( WHEN gt_esf IS INITIAL THEN '' ELSE icon_led_red ).
        ENDLOOP.
        lcl_report_out=>gr_grid_2->refresh_table_display( i_soft_refresh = abap_true  is_stable = VALUE #( row = 'X' col = 'X' ) ).
      ELSE.
        LOOP AT lcl_report_in=>gt_esf_data_filtered
             ASSIGNING <ls_esf_data>
             USING KEY k1
             WHERE pr_esf = gv_pr
             AND n_esf = gv_esf.
          <ls_esf_data>-deduct = COND #( WHEN gt_esf IS INITIAL THEN '' ELSE icon_led_red ).
          IF sy-dynnr = '1001'.
            lcl_report_in=>gr_grid_1->refresh_table_display( i_soft_refresh = abap_true  is_stable = VALUE #( row = 'X' col = 'X' ) ).
          ELSE.
            lcl_report_in=>gr_grid_2->refresh_table_display(  i_soft_refresh = abap_true  is_stable = VALUE #( row = 'X' col = 'X' ) ).
          ENDIF.
        ENDLOOP.
      ENDIF.


      SORT  gt_esf_old BY npp.
      LOOP AT gt_esf ASSIGNING FIELD-SYMBOL(<ls_esf>).
        lv_tabix = sy-tabix.
        READ TABLE gt_esf_old ASSIGNING FIELD-SYMBOL(<ls_esf_old>) WITH KEY npp = <ls_esf>-npp.
        IF sy-subrc = 0. "данные были
          IF <ls_esf> = <ls_esf_old>. "данные не изменились
            UNASSIGN: <ls_esf>,<ls_esf_old>.
            DELETE gt_esf_old INDEX sy-tabix.
            DELETE gt_esf INDEX lv_tabix.
            CONTINUE.
          ELSE.
            <ls_esf>-last_user = sy-uname.
            <ls_esf>-aedat = sy-datum.
          ENDIF.
        ELSE.  "данных не было
          <ls_esf>-creat_user = sy-uname.
          <ls_esf>-crdate = sy-datum.
        ENDIF.
      ENDLOOP.
      SORT  gt_esf BY npp.
      LOOP AT gt_esf_old ASSIGNING <ls_esf_old>.
        lv_tabix = sy-tabix.
        READ TABLE gt_esf ASSIGNING <ls_esf> WITH KEY npp = <ls_esf_old>-npp.
        IF sy-subrc = 0. "данные были
          DELETE gt_esf_old INDEX lv_tabix.
          CONTINUE.
        ENDIF.
      ENDLOOP.
      IF gt_esf IS NOT INITIAL.
        MODIFY zfi_esf_deduct FROM TABLE gt_esf.
      ENDIF.
      "обновление таблицы ЭСЧФ в гриде

      IF gt_esf_old IS NOT INITIAL.
        DELETE zfi_esf_deduct FROM TABLE gt_esf_old.
      ENDIF.

    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF'
      EXPORTING
        n_esf          = gv_esf
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    COMMIT WORK AND WAIT.
    CLEAR gv_changed.
  ENDMETHOD.
  METHOD user_command.
    CASE e_ucomm.
      WHEN 'SAVE'.
        IF gv_changed = abap_true.
          save( ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.
  METHOD on_data_changed.
    DATA:
      lv_max_pos TYPE i,
      lv_nds     TYPE acdoca-hsl,
      lv_snds    TYPE acdoca-hsl,
      lt_nds     TYPE STANDARD TABLE OF rtax1u15.
    FIELD-SYMBOLS:
      <ls_esf>      TYPE zfi_esf_deduct,
      <ls_bset>     TYPE zfi_bset_deduct,
      <lt_mod_rows> TYPE STANDARD TABLE,
      <lt_data>     TYPE STANDARD TABLE.

    ASSIGN gr_table->* TO <lt_data>.
    ASSIGN er_data_changed->mp_mod_rows->* TO <lt_mod_rows>.
    IF er_data_changed->mt_inserted_rows IS NOT INITIAL.
      IF gv_esf IS NOT INITIAL.
        LOOP AT gt_esf ASSIGNING <ls_esf>.
          IF <ls_esf>-npp > lv_max_pos.
            lv_max_pos = <ls_esf>-npp.
          ENDIF.
        ENDLOOP.
        ASSIGN <lt_mod_rows>[ 1 ] TO <ls_esf>.
        <ls_esf>-npp = lv_max_pos + 1.
        <ls_esf>-n_esf = gv_esf.
        <ls_esf>-pr_esf = gv_pr.
      ELSE.
        LOOP AT gt_bset ASSIGNING <ls_bset>.
          IF <ls_bset>-npp > lv_max_pos.
            lv_max_pos = <ls_bset>-npp.
          ENDIF.
        ENDLOOP.
        ASSIGN <lt_mod_rows>[ 1 ] TO <ls_bset>.
        MOVE-CORRESPONDING gs_doc TO <ls_bset>.
        <ls_bset>-npp = lv_max_pos + 1.
      ENDIF.
    ENDIF.
    LOOP AT er_data_changed->mt_good_cells ASSIGNING FIELD-SYMBOL(<ls_good>).
      CASE <ls_good>-fieldname.
*
        WHEN 'ST_NDS' .
          DATA(lv_error_x) = abap_true.
          IF <ls_good>-value IS NOT INITIAL AND  NOT line_exists( gt_rates[ KEY rate COMPONENTS rate =  <ls_good>-value ] ).
            er_data_changed->add_protocol_entry( EXPORTING
                                                   i_msgid = 'ZFI_EI' i_msgno = '040'  i_msgty = 'E'
                                                   i_msgv1 = gs_rates
                                                   i_fieldname = <ls_good>-fieldname
                                                   i_row_id = <ls_good>-row_id ).
          ENDIF.
        WHEN 'MWSKZ' .
          lv_error_x = abap_true.
          IF <ls_good>-value IS NOT INITIAL AND  NOT line_exists( gt_rates[ KEY rate COMPONENTS rate =  <ls_good>-value ] ).
            er_data_changed->add_protocol_entry( EXPORTING
                                                   i_msgid = 'ZFI_EI' i_msgno = '039'  i_msgty = 'E'
                                                   i_msgv1 = gs_rates
                                                   i_fieldname = <ls_good>-fieldname
                                                   i_row_id = <ls_good>-row_id ).
          ENDIF.

        WHEN 'NONDS'.
          IF gv_esf IS INITIAL.
            ASSIGN <lt_mod_rows>[ 1 ] TO <ls_bset>.
            UNASSIGN <ls_esf>.
          ELSE.
            ASSIGN <lt_mod_rows>[ 1 ] TO <ls_esf>.
            UNASSIGN <ls_bset>.
          ENDIF.
          IF  <ls_bset> IS ASSIGNED. "вычисление налога по коду НДС
            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
              EXPORTING
                i_bukrs           = gs_doc-bukrs
                i_mwskz           = <ls_bset>-mwskz
                i_waers           = gs_doc-waers
                i_wrbtr           = CONV bseg-wrbtr( <ls_bset>-nonds )
              TABLES
                t_mwdat           = lt_nds
              EXCEPTIONS
                bukrs_not_found   = 1
                country_not_found = 2
                mwskz_not_defined = 3
                mwskz_not_valid   = 4
                ktosl_not_found   = 5
                kalsm_not_found   = 6
                parameter_error   = 7
                knumh_not_found   = 8
                kschl_not_found   = 9
                unknown_error     = 10
                account_not_found = 11
                txjcd_not_valid   = 12
                OTHERS            = 13.
            IF sy-subrc <> 0.
* Implement suitable error handling here
            ENDIF.
            IF lt_nds IS NOT INITIAL.
              lv_nds = lt_nds[ 1 ]-wmwst.
            ENDIF.
            lv_snds = CONV acdoca-hsl( <ls_bset>-nonds + lv_nds ).
          ENDIF.
          IF <ls_esf> IS ASSIGNED."вычисление налога по ставке
            IF <ls_esf>-st_nds <> 'CLC'.
              DATA(lv_rate) = CONV i( <ls_esf>-st_nds ).
              IF lv_rate <> 0.
                lv_nds    = <ls_esf>-nonds * lv_rate / 100.
                lv_snds   = <ls_esf>-nonds + lv_nds.
              ENDIF.
            ENDIF.
          ENDIF.
          er_data_changed->modify_cell(
              i_row_id    = <ls_good>-row_id
              i_fieldname = 'NDS'
              i_value     = lv_nds ).
          er_data_changed->modify_cell(
            i_row_id    = <ls_good>-row_id
            i_fieldname = 'SNDS'
            i_value     = lv_snds ).

        WHEN 'NDS'.
          IF gv_esf IS INITIAL.
            ASSIGN <lt_mod_rows>[ 1 ] TO <ls_bset>.
            UNASSIGN <ls_esf>.
          ELSE.
            ASSIGN <lt_mod_rows>[ 1 ] TO <ls_esf>.
            UNASSIGN <ls_bset>.
          ENDIF.
          IF  <ls_bset> IS ASSIGNED.
            lv_snds = <ls_bset>-nds + <ls_bset>-nonds.
          ELSE.
            lv_snds  = <ls_esf>-nds + <ls_esf>-nonds.
          ENDIF.
          er_data_changed->modify_cell(
            i_row_id    = <ls_good>-row_id
            i_fieldname = 'SNDS'
            i_value     = lv_snds ).
*
      ENDCASE.
    ENDLOOP.
    IF lv_error_x = abap_true.
      er_data_changed->display_protocol( ).
    ENDIF.

  ENDMETHOD.

  METHOD data_changed_finished.
    IF e_modified = 'X'.
      gv_changed = 'X'.
    ENDIF.
  ENDMETHOD.

  METHOD on_f4.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.
    DATA:
      lt_ret   TYPE STANDARD TABLE OF ddshretval.
    IF  gt_rates IS INITIAL.
      RETURN.
    ENDIF.
    ASSIGN gr_table->* TO <lt_data>.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = 'RATE'
        dynpprog        = sy-repid
        dynpnr          = sy-dynnr
        window_title    = 'Ставка'
        value_org       = 'S'
      TABLES
        return_tab      = lt_ret
        value_tab       = gt_rates
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc = 0 AND lt_ret IS NOT INITIAL.
      ASSIGN COMPONENT e_fieldname OF  STRUCTURE <lt_data>[ es_row_no-row_id ]
         TO FIELD-SYMBOL(<ls_rate>).
      IF sy-subrc = 0.
        <ls_rate> = lt_ret[ 1 ]-fieldval.
      ENDIF.
    ENDIF.
    gr_grid->refresh_table_display( ).

  ENDMETHOD.
  METHOD edit.
    DATA:
      lv_title TYPE string.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.
    CLEAR: gv_esf, gs_doc,  gt_rates, gs_rates,gv_pr,
           gt_esf, gt_esf, gt_bset, gv_changed.
    gv_edit = iv_edit.
    IF iv_esf IS INITIAL. "корректировка FI документа
      lv_title = |{ TEXT-t05 } { iv_bukrs } { iv_belnr }-{ iv_gjahr } |.
      IF iv_edit = abap_true. "блокировка объекта корректировки
        CALL FUNCTION 'ENQUEUE_EFBKPF'
          EXPORTING
            mode_bkpf      = 'E'
            mandt          = sy-mandt
            bukrs          = iv_bukrs
            belnr          = iv_belnr
            gjahr          = iv_gjahr
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          RETURN.
        ENDIF.
      ENDIF.
      " выборка данных
      SELECT * FROM zfi_bset_deduct
        INTO TABLE gt_bset
        WHERE bukrs = iv_bukrs
          AND belnr = iv_belnr
          AND gjahr = iv_gjahr.
      "выборка ставок
      SELECT DISTINCT bset~mwskz AS rate , t007s~text1 AS  name
           FROM bset AS bset
             LEFT JOIN t007s ON  t007s~spras = @sy-langu
                             AND t007s~kalsm = 'TAXBY'
                             AND t007s~mwskz = bset~mwskz
           INTO TABLE @gt_rates
           WHERE bukrs = @iv_bukrs
             AND belnr = @iv_belnr
             AND gjahr = @iv_gjahr.

      SELECT SINGLE bukrs
        INTO @DATA(lv_bukrs)
        FROM t001
        WHERE bukrs = @iv_bukrs.

      gs_doc = VALUE #( bukrs = iv_bukrs
                        belnr = iv_belnr
                        gjahr = iv_gjahr
                        waers = lv_bukrs ).
    ELSE.                   "корректировка ЭСЧФ
      gv_esf = iv_esf.
      gv_pr  = iv_pr.
      lv_title = |{ TEXT-t06 } { iv_esf }  |.
      IF iv_edit = abap_true."блокировка объекта корректировки
        CALL FUNCTION 'ENQUEUE_EZFI_ESF'
          EXPORTING
            n_esf          = iv_esf
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          RETURN.
        ENDIF.
      ENDIF.
      " выборка данных
      SELECT * FROM zfi_esf_deduct
        INTO TABLE gt_esf
        WHERE n_esf = iv_esf.
      "выборка ставок

*<--#25988 Перенос настроечной таблицы ZFI_roster_map в SPRO
      SELECT DISTINCT m~rate AS rate, dd07t~ddtext AS name
           FROM zfi_esf_roster AS r
             JOIN zfi_st_nds AS m ON r~id_tp_nds = m~id_tp_nds
                                      AND ( r~st_nds = m~value_st_nds OR r~id_tp_nds = 'CALCULATED' )
             LEFT JOIN dd07t ON dd07t~ddlanguage = @sy-langu
                             AND dd07t~domname  = 'ZFI_D_ESF_RATE'
                             AND dd07t~domvalue_l = m~rate
           INTO TABLE @gt_rates
           WHERE r~n_esf = @iv_esf.
*>--#25988 Перенос настроечной таблицы ZFI_roster_map в SPRO

*      SELECT DISTINCT m~rate AS rate, dd07t~ddtext AS name
*       FROM zfi_esf_roster AS r
*         JOIN zfi_roster_map AS m ON r~id_tp_nds = m~id_tp_nds
*                              AND ( r~st_nds = m~st_nds OR r~id_tp_nds = 'CALCULATED' )
*         LEFT JOIN dd07t ON dd07t~ddlanguage = @sy-langu
*                     AND dd07t~domname  = 'ZFI_D_ESF_RATE'
*                     AND dd07t~domvalue_l = m~rate
*       INTO TABLE @gt_rates
*       WHERE r~n_esf = @iv_esf.

    ENDIF.
    "в режиме просмотра пустую таблицу не выводить
    IF iv_edit  = abap_false
      AND gt_esf IS INITIAL
      AND gt_bset IS INITIAL.
      RETURN.
    ENDIF.
    gt_bset_old = gt_bset.
    gt_esf_old = gt_esf.
    IF gt_rates IS NOT INITIAL.
      gs_rates = REDUCE string( INIT res = CONV string( gt_rates[ 1 ]-rate )
                  FOR line IN gt_rates FROM 2
                  NEXT res = res && ',' && line-rate  ).
    ENDIF.
    "формирование каталога полей
    gr_table = COND #( WHEN iv_esf IS INITIAL THEN REF #( gt_bset[] ) ELSE REF #( gt_esf ) ).
    ASSIGN gr_table->* TO <lt_data>.
    gt_fcat[] = CORRESPONDING #( cl_salv_data_descr=>read_structdescr(
      CAST cl_abap_structdescr( CAST cl_abap_tabledescr(
       cl_abap_tabledescr=>describe_by_data( <lt_data> ) )->get_table_line_type( ) )
       )
     ).
    LOOP AT gt_fcat ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      <ls_fcat>-ref_field = <ls_fcat>-fieldname.

      <ls_fcat>-ref_table = SWITCH #( iv_esf WHEN '' THEN 'ZFI_BSET_DEDUCT' ELSE 'ZFI_ESF_DEDUCT' ).

      CASE <ls_fcat>-fieldname.
        WHEN 'ST_NDS' OR 'MWSKZ'.
          <ls_fcat>-f4availabl = abap_true.
          <ls_fcat>-outputlen = 4.
          CLEAR: <ls_fcat>-ref_table, <ls_fcat>-ref_field.
      ENDCASE.
      <ls_fcat>-tech = SWITCH #( <ls_fcat>-fieldname
                                 WHEN 'PR_ESF' OR 'N_ESF' OR 'BUKRS' OR 'BELNR' OR 'GJAHR' OR 'MANDT' THEN abap_true  ).
      IF   p_mode1 = abap_true AND <ls_fcat>-fieldname =  'DT_NO_VCH'
           OR p_mode2 = abap_true AND <ls_fcat>-fieldname =  'DT_OT_VCH'.
        <ls_fcat>-tech =  abap_true.
      ENDIF.
      <ls_fcat>-edit = SWITCH #( <ls_fcat>-fieldname WHEN  'ST_NDS' OR 'BELNR' OR 'GJAHR' OR 'MWSKZ'
                                   OR 'NONDS' OR 'NDS' OR  'DT_OT_VCH' OR 'DT_NO_VCH' THEN abap_true  ).
    ENDLOOP.


    IF gr_grid IS BOUND.
      lcl_corr_edit=>close( ).
    ENDIF.
    CREATE OBJECT gr_dcontr
      EXPORTING
        width                       = 1200
        height                      = 150
        top                         = 80
        left                        = 60
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        event_already_registered    = 6
        error_regist_event          = 7
        OTHERS                      = 8.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    gr_grid = NEW #( i_parent = gr_dcontr i_appl_events = 'X' ).
    gr_grid->set_toolbar_interactive( ).
    IF iv_edit = abap_true.
      gr_grid->set_ready_for_input( 1 ).
    ELSE.
      gr_grid->set_ready_for_input( 0 ).
    ENDIF.
    gr_grid->register_edit_event( cl_gui_alv_grid=>mc_evt_modified ).
    DATA(lt_f4) = VALUE lvc_t_f4( ( fieldname = 'ST_NDS' register = abap_true getbefore = abap_true )
                                  ( fieldname = 'MWSKZ' register = abap_true getbefore = abap_true ) ).
    gr_grid->register_f4_for_fields( it_f4 = lt_f4 ).

    gr_grid->set_table_for_first_display(
    EXPORTING
      is_layout            = VALUE #( zebra      = 'X'
                                      col_opt = 'X'
                                      cwidth_opt = 'X'
                                      sel_mode   = 'S'
                                      grid_title = lv_title
                           )
      i_save               = 'A'
      i_default            = 'X'
      is_variant           = VALUE #( report = sy-repid handle = COND #( WHEN iv_esf IS INITIAL THEN 'BSET' ELSE 'ESF' ) )
    CHANGING
      it_outtab            = <lt_data>
      it_fieldcatalog      = gt_fcat ).
    SET HANDLER:
      on_data_changed
      data_changed_finished
      toolbar
      on_f4
      user_command
       FOR gr_grid.
    SET HANDLER
      on_close FOR gr_dcontr.

    gr_grid->set_toolbar_interactive( ).

    cl_gui_dialogbox_container=>set_focus( gr_dcontr ).
  ENDMETHOD.


  METHOD close.

    on_close( gr_dcontr ).
  ENDMETHOD.
  METHOD on_close.
    DATA:
      lv_uncomplete_x TYPE abap_bool,
      lv_ans          TYPE c.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.
    IF gv_changed = abap_true.
      "проверка на наличие незаполенных строк
      IF gv_esf IS NOT INITIAL.
        "LOOP AT gt_esf TRANSPORTING NO FIELDS WHERE snds = 0 OR st_nds IS INITIAL.  {DHVK929487 замена
        LOOP AT gt_esf ASSIGNING FIELD-SYMBOL(<ls_esf>).
          IF  <ls_esf>-snds = 0  AND p_mode1 = 'X' OR <ls_esf>-st_nds IS INITIAL.  "}DHVK929487 замена
            lv_uncomplete_x = abap_true.
            EXIT.
          ENDIF.
        ENDLOOP.
      ELSE.
        LOOP AT gt_bset TRANSPORTING NO FIELDS WHERE snds = 0 OR mwskz IS INITIAL.
          lv_uncomplete_x = abap_true.
          EXIT.
        ENDLOOP.
      ENDIF.
      DO .
        IF lv_uncomplete_x = abap_true.
          lv_ans = lcl_report_in=>popup_to_confirm(
         EXPORTING iv_titlebar  = 'Предупреждение'
                   iv_text_question = 'Есть неполные строки, отменить изменения и выйти?'  ) .
          IF  lv_ans <> '1'.
            RETURN.
          ENDIF.
          EXIT.
        ENDIF.
        lv_ans = lcl_report_in=>popup_to_confirm(
          EXPORTING iv_titlebar  = 'Данные изменились'
                    iv_text_question = 'Сохранить изменения?'  ) .
        IF  lv_ans = '1'.
          save( ).
        ELSEIF  lv_ans = 'A'.
          RETURN.
        ENDIF.
        EXIT.
      ENDDO.
    ENDIF.
    IF gv_edit = abap_true. "разблокировка объекта корректировки

      IF gv_esf IS INITIAL. "корректировка FI документа
        CALL FUNCTION 'DEQUEUE_EFBKPF'
          EXPORTING
            mode_bkpf      = 'E'
            mandt          = sy-mandt
            bukrs          = gs_doc-bukrs
            belnr          = gs_doc-belnr
            gjahr          = gs_doc-gjahr
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ELSE.
        CALL FUNCTION 'DEQUEUE_EZFI_ESF'
          EXPORTING
            n_esf          = gv_esf
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
      ENDIF.

    ENDIF.
    IF sender IS NOT INITIAL.
      sender->free( ).
    ENDIF.
    FREE:  gr_grid, gr_dcontr .
  ENDMETHOD.
  METHOD toolbar.
*    APPEND VALUE #( function = cl_gui_alv_grid=>mc_fc_loc_delete_row
*                    icon = ICON_SYSTEM_SAVE
*                   )   TO e_object->mt_toolbar.
  ENDMETHOD.
ENDCLASS.  "lcl_corr_edit