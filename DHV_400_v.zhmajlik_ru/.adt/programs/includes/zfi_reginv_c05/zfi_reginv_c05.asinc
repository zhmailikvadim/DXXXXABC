*&---------------------------------------------------------------------*
*& Include          ZFI_REGINV_C04
*&---------------------------------------------------------------------*
CLASS lcl_defer_deduct IMPLEMENTATION.
  METHOD save.


    LOOP AT lcl_report_out=>gt_esf_data
         ASSIGNING FIELD-SYMBOL(<ls_esf_data>)
         USING KEY k1
         WHERE pr_esf = gs_doc-pr_esf
           AND n_esf = gs_doc-n_esf.
      <ls_esf_data>-deduct = COND #( WHEN gt_data IS INITIAL THEN '' ELSE icon_led_red ).
    ENDLOOP.
    lcl_report_out=>gr_grid_2->refresh_table_display( i_soft_refresh = abap_true  is_stable = VALUE #( row = 'X' col = 'X' ) ).


    SORT  gt_data_old BY npp.
    LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<ls_esf>).
      DATA(lv_tabix) = sy-tabix.
      READ TABLE gt_data_old ASSIGNING FIELD-SYMBOL(<ls_esf_old>) WITH KEY npp = <ls_esf>-npp.
      IF sy-subrc = 0. "данные были
        IF <ls_esf> = <ls_esf_old>. "данные не изменились
          DELETE gt_data_old INDEX sy-tabix.
          DELETE gt_data INDEX lv_tabix.
          CONTINUE.
        ELSE.
          <ls_esf>-last_user = sy-uname.
          <ls_esf>-aedat = sy-datum.
        ENDIF.
      ELSE.  "данных не было
        <ls_esf>-creat_user = sy-uname.
        <ls_esf>-crdate = sy-datum.
      ENDIF.
    ENDLOOP.
    SORT  gt_data BY npp.
    LOOP AT gt_data_old ASSIGNING <ls_esf_old>.
      lv_tabix = sy-tabix.
      READ TABLE gt_data ASSIGNING <ls_esf> WITH KEY npp = <ls_esf_old>-npp.
      IF sy-subrc = 0. "данные были
        DELETE gt_data_old INDEX lv_tabix.
        CONTINUE.
      ENDIF.
    ENDLOOP.
    IF gt_data IS NOT INITIAL.
      MODIFY zfi_def_deduct FROM TABLE gt_data.
    ENDIF.
    "обновление таблицы ЭСЧФ в гриде

    IF gt_data_old IS NOT INITIAL.
      DELETE zfi_def_deduct FROM TABLE gt_data_old.
    ENDIF.

    CALL FUNCTION 'DEQUEUE_EZFI_ESF'
      EXPORTING
        n_esf = gs_doc-n_esf.
    COMMIT WORK AND WAIT.
    CLEAR gv_changed.
  ENDMETHOD.
  METHOD user_command.
    CASE e_ucomm.
      WHEN 'SAVE'.
        IF gv_changed = abap_true.
          save( ).
        ENDIF.
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
      WHEN 'INSERT_ROW'.
        insert_row( ).
      WHEN 'DELETE_ROW'.
        delete_row( ).
* <-- AK_BUTVILOVS #8000001303
    ENDCASE.
  ENDMETHOD.
  METHOD on_data_changed.
    DATA:
      ls_doc     TYPE gty_s_doc,
      lv_max_pos TYPE i,
      lt_nds     TYPE STANDARD TABLE OF rtax1u15.
    FIELD-SYMBOLS:
      <ls_data>     TYPE zfi_def_deduct,
      <ls_data_mod> TYPE zfi_def_deduct,
      <lt_mod_rows> TYPE STANDARD TABLE.

    ASSIGN er_data_changed->mp_mod_rows->* TO <lt_mod_rows>.
    IF er_data_changed->mt_inserted_rows IS NOT INITIAL.
      LOOP AT gt_data ASSIGNING <ls_data>.
        IF <ls_data>-npp > lv_max_pos.
          lv_max_pos = <ls_data>-npp.
        ENDIF.
      ENDLOOP.
      ASSIGN <lt_mod_rows>[ 1 ] TO <ls_data_mod>.
      MOVE-CORRESPONDING gs_doc TO <ls_data_mod>.

      <ls_data_mod>-npp = lv_max_pos + 1.
    ENDIF.
    LOOP AT er_data_changed->mt_good_cells ASSIGNING FIELD-SYMBOL(<ls_good>).
      CASE <ls_good>-fieldname.
        WHEN 'MWSKZ' .
          DATA(lv_error_x) = abap_true.
          IF <ls_good>-value IS NOT INITIAL AND  NOT line_exists( gt_rates[ KEY rate COMPONENTS rate =  <ls_good>-value ] ).
            er_data_changed->add_protocol_entry( EXPORTING
                                                   i_msgid = 'ZFI_EI' i_msgno = '039'  i_msgty = 'E'
                                                   i_msgv1 = gs_rates
                                                   i_fieldname = <ls_good>-fieldname
                                                   i_row_id = <ls_good>-row_id ).
          ENDIF.

        WHEN 'NONDS'.
          ASSIGN <lt_mod_rows>[ 1 ] TO <ls_data>.
          IF sy-subrc <> 0.
            UNASSIGN <ls_data>.
          ENDIF.
          IF  <ls_data> IS ASSIGNED. "вычисление налога по коду НДС
            CALL FUNCTION 'CALCULATE_TAX_FROM_NET_AMOUNT'
              EXPORTING
                i_bukrs           = gs_doc-bukrs
                i_mwskz           = <ls_data>-mwskz
                i_waers           = gv_waers
                i_wrbtr           = CONV bseg-wrbtr( <ls_data>-nonds )
              TABLES
                t_mwdat           = lt_nds
              EXCEPTIONS
                bukrs_not_found   = 1
                country_not_found = 2
                mwskz_not_defined = 3
                mwskz_not_valid   = 4
                ktosl_not_found   = 5
                kalsm_not_found   = 6
                parameter_error   = 7
                knumh_not_found   = 8
                kschl_not_found   = 9
                unknown_error     = 10
                account_not_found = 11
                txjcd_not_valid   = 12
                OTHERS            = 13.
            IF sy-subrc <> 0.
* Implement suitable error handling here
            ENDIF.
            IF lt_nds IS NOT INITIAL.
              DATA(lv_nds) = lt_nds[ 1 ]-wmwst.
            ENDIF.
            DATA(lv_snds) = CONV acdoca-hsl( <ls_data>-nonds + lv_nds ).
          ENDIF.
          er_data_changed->modify_cell(
              i_row_id    = <ls_good>-row_id
              i_fieldname = 'NDS'
              i_value     = lv_nds ).
          er_data_changed->modify_cell(
            i_row_id    = <ls_good>-row_id
            i_fieldname = 'SNDS'
            i_value     = lv_snds ).

        WHEN 'NDS'.
          ASSIGN <lt_mod_rows>[ 1 ] TO <ls_data>.
          lv_snds = <ls_data>-nds + <ls_data>-nonds.
          er_data_changed->modify_cell(
            i_row_id    = <ls_good>-row_id
            i_fieldname = 'SNDS'
            i_value     = lv_snds ).
*
      ENDCASE.
    ENDLOOP.
    IF lv_error_x = abap_true.
      er_data_changed->display_protocol( ).
    ENDIF.

  ENDMETHOD.

  METHOD data_changed_finished.
    IF e_modified = 'X'.
      gv_changed = 'X'.
    ENDIF.
  ENDMETHOD.

  METHOD on_f4.
    DATA:
      lt_ret   TYPE STANDARD TABLE OF ddshretval.
    IF  gt_rates IS INITIAL.
      RETURN.
    ENDIF.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield        = 'RATE'
        dynpprog        = sy-repid
        dynpnr          = sy-dynnr
        window_title    = 'Ставка'
        value_org       = 'S'
      TABLES
        return_tab      = lt_ret
        value_tab       = gt_rates
      EXCEPTIONS
        parameter_error = 1
        no_values_found = 2
        OTHERS          = 3.
    IF sy-subrc = 0 AND lt_ret IS NOT INITIAL.
      ASSIGN gt_data[ es_row_no-row_id ]-mwskz
         TO FIELD-SYMBOL(<lv_rate>).
      IF sy-subrc = 0.
        <lv_rate> = lt_ret[ 1 ]-fieldval.
      ENDIF.
    ENDIF.
    gr_grid->refresh_table_display( ).

  ENDMETHOD.
  METHOD edit.
    DATA:
      lt_doc   TYPE STANDARD TABLE OF gty_s_doc,
      lv_title TYPE string.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.
    CLEAR:  gt_rates, gs_rates, gv_waers,
          gt_data, gv_changed.
    gs_doc = is_doc.
    lt_doc = VALUE #( FOR doc IN lcl_report_out=>gt_esf_match USING KEY k1 WHERE ( pr_esf = is_doc-pr_esf AND n_esf = is_doc-n_esf )
                      ( CORRESPONDING #( doc ) ) ).
    IF iv_edit = abap_true. "блокировка объекта корректировки
      IF iv_edit = abap_true."блокировка объекта корректировки
        CALL FUNCTION 'ENQUEUE_EZFI_ESF'
          EXPORTING
            n_esf          = gs_doc-n_esf
          EXCEPTIONS
            foreign_lock   = 1
            system_failure = 2
            OTHERS         = 3.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.
    " выборка данных
    SELECT * FROM zfi_def_deduct
      INTO TABLE gt_data
      WHERE pr_esf = gs_doc-pr_esf
        AND n_esf  = gs_doc-n_esf
      .
    "выборка ставок
    IF lt_doc IS NOT INITIAL.
      SELECT DISTINCT bset~mwskz AS rate , t007s~text1 AS  name
           FROM bset AS bset
             LEFT JOIN t007s ON  t007s~spras = @sy-langu
                             AND t007s~kalsm = 'TAXBY'
                             AND t007s~mwskz = bset~mwskz
           INTO TABLE @gt_rates
           FOR ALL ENTRIES IN @lt_doc
           WHERE bukrs = @lt_doc-bukrs
             AND belnr = @lt_doc-belnr
             AND gjahr = @lt_doc-gjahr.
    ENDIF.
    IF is_doc-belnr(1) = '-'.
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
*      lv_title = |{ TEXT-t05 } { gs_doc-n_esf }|.
      lv_title = |{ TEXT-t06 } { gs_doc-n_esf }|.
* <-- AK_BUTVILOVS #8000001303
      IF NOT lt_doc  IS INITIAL.
        ASSIGN lt_doc[ 1 ] TO FIELD-SYMBOL(<ls_doc>).
        gs_doc = VALUE #( BASE gs_doc bukrs = <ls_doc> belnr = <ls_doc>-belnr gjahr = <ls_doc>-gjahr ).
      ENDIF.
    ELSE.
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
*      lv_title = |{ TEXT-t05 } { gs_doc-n_esf } { gs_doc-bukrs }-{ gs_doc-belnr }-{ gs_doc-gjahr } |.
      lv_title = |{ TEXT-t06 } { gs_doc-n_esf } { gs_doc-bukrs }-{ gs_doc-belnr }-{ gs_doc-gjahr } |.
* <-- AK_BUTVILOVS #8000001303
    ENDIF.

    SELECT SINGLE bukrs
      INTO @gv_waers
      FROM t001
      WHERE bukrs = @gs_doc-bukrs.


    "в режиме просмотра пустую таблицу не выводить
    IF iv_edit  = abap_false
      AND gt_data IS INITIAL.
      RETURN.
    ENDIF.
    gt_data_old = gt_data.
    IF gt_rates IS NOT INITIAL.
      gs_rates = REDUCE string( INIT res = CONV string( gt_rates[ 1 ]-rate )
                  FOR line IN gt_rates FROM 2
                  NEXT res = res && ',' && line-rate  ).
    ENDIF.
    "формирование каталога полей
    gt_fcat[] = CORRESPONDING #( cl_salv_data_descr=>read_structdescr(
      CAST cl_abap_structdescr( CAST cl_abap_tabledescr(
       cl_abap_tabledescr=>describe_by_data( gt_data ) )->get_table_line_type( ) )
       )
     ).
    LOOP AT gt_fcat ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      <ls_fcat>-ref_field = <ls_fcat>-fieldname.
      <ls_fcat>-ref_table = 'ZFI_DEF_DEDUCT'.
      CASE <ls_fcat>-fieldname.
        WHEN 'ST_NDS' OR 'MWSKZ'.
          <ls_fcat>-f4availabl = abap_true.
          <ls_fcat>-outputlen = 4.
          CLEAR: <ls_fcat>-ref_table, <ls_fcat>-ref_field.
      ENDCASE.
      <ls_fcat>-tech = SWITCH #( <ls_fcat>-fieldname
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
*                                 WHEN 'N_ESF' OR 'BUKRS' OR 'BELNR' OR 'GJAHR' OR 'MANDT' OR 'PR_ESF' OR 'ST_NDS' THEN abap_true  ).
                                 WHEN 'N_ESF' OR 'MANDT' OR 'PR_ESF' OR 'ST_NDS' THEN abap_true ).
* <-- AK_BUTVILOVS #8000001303, ZFI_PURBOOK
      IF   p_mode1 = abap_true AND <ls_fcat>-fieldname =  'DT_NO_VCH'
           OR p_mode2 = abap_true AND <ls_fcat>-fieldname =  'DT_OT_VCH'.
        <ls_fcat>-tech =  abap_true.
      ENDIF.
      <ls_fcat>-edit = SWITCH #( <ls_fcat>-fieldname WHEN  'ST_NDS' OR 'MWSKZ' OR  'DT_TEK_VCH' OR 'PR_VOSTAN'
                                   OR 'NONDS' OR 'NDS' OR  'DT_OT_VCH' OR 'DT_NO_VCH' THEN abap_true  ).
    ENDLOOP.


    IF gr_grid IS BOUND.
      close( ).
    ENDIF.
    CREATE OBJECT gr_dcontr
      EXPORTING
        width                       = 1200
        height                      = 150
        top                         = 80
        left                        = 60
      EXCEPTIONS
        cntl_error                  = 1
        cntl_system_error           = 2
        create_error                = 3
        lifetime_error              = 4
        lifetime_dynpro_dynpro_link = 5
        event_already_registered    = 6
        error_regist_event          = 7
        OTHERS                      = 8.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
    gr_grid = NEW #( i_parent = gr_dcontr i_appl_events = 'X' ).
    gr_grid->set_toolbar_interactive( ).
    IF iv_edit = abap_true.
      gr_grid->set_ready_for_input( 1 ).
    ELSE.
      gr_grid->set_ready_for_input( 0 ).
    ENDIF.
    gr_grid->register_edit_event( cl_gui_alv_grid=>mc_evt_modified ).
    DATA(lt_f4) = VALUE lvc_t_f4( ( fieldname = 'MWSKZ' register = abap_true getbefore = abap_true ) ).
    gr_grid->register_f4_for_fields( it_f4 = lt_f4 ).

    gr_grid->set_table_for_first_display(
    EXPORTING
      is_layout            = VALUE #( zebra      = 'X'
                                      col_opt = 'X'
                                      cwidth_opt = 'X'
                                      sel_mode   = 'S'
                                      grid_title = lv_title
                           )
      i_save               = 'A'
      i_default            = 'X'
      is_variant           = VALUE #( report = sy-repid handle = 'DEFF' )
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
      it_toolbar_excluding = VALUE #( ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
                                      ( cl_gui_alv_grid=>mc_fc_loc_append_row )
                                      ( cl_gui_alv_grid=>mc_fc_loc_delete_row )
                                      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
                                      ( cl_gui_alv_grid=>mc_fc_loc_copy_row ) )
* <-- AK_BUTVILOVS #8000001303
    CHANGING
      it_outtab            = gt_data
      it_fieldcatalog      = gt_fcat ).
    SET HANDLER:
      on_data_changed
      data_changed_finished
      toolbar
      on_f4
      user_command
       FOR gr_grid.
    SET HANDLER
      on_close FOR gr_dcontr.

    gr_grid->set_toolbar_interactive( ).

    cl_gui_dialogbox_container=>set_focus( gr_dcontr ).
  ENDMETHOD.


  METHOD close.

    on_close( gr_dcontr ).
  ENDMETHOD.
  METHOD on_close.
    DATA:
      lv_uncomplete_x TYPE abap_bool,
      lv_dates        TYPE i,
      lv_ans          TYPE c.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.
    IF gv_changed = abap_true.
      "проверка на наличие незаполенных строк
      LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
        IF  <ls_data>-snds = 0 OR <ls_data>-mwskz IS INITIAL.
          lv_uncomplete_x = abap_true.
        ENDIF.
        IF <ls_data>-dt_ot_vch > '19000101'.
          ADD 1 TO lv_dates.
        ENDIF.
        IF <ls_data>-dt_tek_vch > '19000101'.
          ADD 1 TO lv_dates.
        ENDIF.
        IF lv_dates <> 1.
          lv_uncomplete_x = abap_true.
        ENDIF.
        IF lv_uncomplete_x = abap_true.
          EXIT.
        ENDIF.
        CLEAR lv_dates.
      ENDLOOP.


      DO .
        IF lv_uncomplete_x = abap_true .
          lv_ans = lcl_report_in=>popup_to_confirm(
         EXPORTING iv_titlebar  = 'Предупреждение'
                   iv_text_question = 'Есть неполные строки, отменить изменения и выйти?'  ) .
          IF  lv_ans <> '1'.
            RETURN.
          ENDIF.
          EXIT.
        ENDIF.
        lv_ans = lcl_report_in=>popup_to_confirm(
          EXPORTING iv_titlebar  = 'Данные изменились'
                    iv_text_question = 'Сохранить изменения?'  ) .
        IF  lv_ans = '1'.
          save( ).
        ELSEIF  lv_ans = 'A'.
          RETURN.
        ENDIF.
        EXIT.
      ENDDO.
    ENDIF.
    CALL FUNCTION 'DEQUEUE_EZFI_ESF'
      EXPORTING
        n_esf          = gs_doc-n_esf
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      RETURN.
    ENDIF.
    IF sender IS NOT INITIAL.
      sender->free( ).
    ENDIF.
    FREE:  gr_grid, gr_dcontr .
  ENDMETHOD.
  METHOD toolbar.
*    APPEND VALUE #( function = cl_gui_alv_grid=>mc_fc_loc_delete_row
*                    icon = ICON_SYSTEM_SAVE
*                   )   TO e_object->mt_toolbar.
* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
    APPEND VALUE #( function = 'INSERT_ROW'
                    icon     = icon_insert_row
                  ) TO e_object->mt_toolbar.

    APPEND VALUE #( function = 'DELETE_ROW'
                    icon     = icon_delete_row
                  ) TO e_object->mt_toolbar.
* <-- AK_BUTVILOVS #8000001303
  ENDMETHOD.

* --> AK_BUTVILOVS #8000001303, ZFI_PURBOOK Доработка алгоритма для БЕ
  METHOD insert_row.
    DATA lv_max_pos TYPE i.

    FIELD-SYMBOLS:
      <ls_data>      TYPE zfi_def_deduct,
      <ls_esf_match> TYPE zcl_fi_esf_amdp=>gty_s_esf_match.

    LOOP AT gt_data ASSIGNING <ls_data>.
      IF <ls_data>-npp > lv_max_pos.
        lv_max_pos = <ls_data>-npp.
      ENDIF.
    ENDLOOP.
    IF sy-subrc <> 0.
      LOOP AT lcl_report_out=>gt_esf_match ASSIGNING <ls_esf_match> WHERE pr_esf = gs_doc-pr_esf
                                                                      AND n_esf  = gs_doc-n_esf
                                                                      AND pr_unbind = ' '. " #24763 AK_RUBAHOV Доработка Журнала регистрации ЭСЧФ
        APPEND INITIAL LINE TO gt_data ASSIGNING <ls_data>.

        MOVE-CORRESPONDING gs_doc TO <ls_data>.

        <ls_data>-npp   = lv_max_pos + 1.
        <ls_data>-bukrs = <ls_esf_match>-bukrs.
        <ls_data>-belnr = <ls_esf_match>-belnr.
        <ls_data>-gjahr = <ls_esf_match>-gjahr.
      ENDLOOP.

      gv_changed = abap_true.

      gr_grid->refresh_table_display( ).
    ENDIF.
  ENDMETHOD.

  METHOD delete_row.
    CHECK lines( gt_data ) > 0.
    CLEAR gt_data.

    gv_changed = abap_true.

    gr_grid->refresh_table_display( ).
  ENDMETHOD.
* <-- AK_BUTVILOVS #8000001303
ENDCLASS.  "lcl_corr_edit