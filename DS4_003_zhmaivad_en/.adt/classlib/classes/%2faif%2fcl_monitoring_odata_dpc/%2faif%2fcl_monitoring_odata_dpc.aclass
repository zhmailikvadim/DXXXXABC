class /AIF/CL_MONITORING_ODATA_DPC definition
  public
  inheriting from /IWBEP/CL_V4_ABS_DATA_PROVIDER
  final
  create public .

public section.

  interfaces /AIF/IF_MONITORING_ODATA_GLBL .
  interfaces /AIF/IF_BATCH_PREPARATION .

  methods CONSTRUCTOR .

  methods /IWBEP/IF_V4_DP_BASIC~CREATE_ENTITY
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~DELETE_ENTITY
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~EXECUTE_ACTION
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~READ_ENTITY
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~READ_ENTITY_LIST
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~READ_REF_TARGET_KEY_DATA
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~UPDATE_ENTITY
    redefinition .
  methods /IWBEP/IF_V4_DP_BATCH~PROCESS_BATCH
    redefinition .
  methods /IWBEP/IF_V4_DP_BATCH~PROCESS_CHANGE_SET
    redefinition .
  methods /IWBEP/IF_V4_DP_INTERMEDIATE~CHECK_MODIFICATION_CONDITIONS
    redefinition .
  methods /IWBEP/IF_V4_DP_INTERMEDIATE~PATCH_ENTITY
    redefinition .
  methods /IWBEP/IF_V4_DP_INTERMEDIATE~READ_ENTITY_TREE_LIST
    redefinition .
  methods /IWBEP/IF_V4_DP_BASIC~READ_REF_TARGET_KEY_DATA_LIST
    redefinition .
protected section.

  aliases C_CONNECTION
    for /AIF/IF_MONITORING_ODATA_GLBL~GC_CONNECTION .
  aliases TY_S_CUSTOMFUNCTION_KEY
    for /AIF/IF_MONITORING_ODATA_GLBL~TY_S_CUSTOMFUNCTION_KEY .
  aliases TY_S_CUSTOMHINT_KEY
    for /AIF/IF_MONITORING_ODATA_GLBL~TY_S_CUSTOMHINT_KEY .
  aliases TY_S_CUSTOMLINK_KEY
    for /AIF/IF_MONITORING_ODATA_GLBL~TY_S_CUSTOMLINK_KEY .
  aliases TY_S_CUSTOMTEXT_KEY
    for /AIF/IF_MONITORING_ODATA_GLBL~TY_S_CUSTOMTEXT_KEY .
private section.

  aliases GC_ENTITY_SET_NAMES
    for /AIF/IF_MONITORING_ODATA_GLBL~GC_ENTITY_SET_NAMES .
  aliases GC_ENTITY_TYPE_NAMES
    for /AIF/IF_MONITORING_ODATA_GLBL~GC_ENTITY_TYPE_NAMES .

  types:
        "! <p class="shorttext synchronized" lang="en">Kind of a package of batch operations</p>
    ty_batch_package_kind TYPE c LENGTH 1 .
  types:
    "! <p class="shorttext synchronized" lang="en">Package of batch operations</p>
    BEGIN OF ty_s_batch_package,
      kind                 TYPE ty_batch_package_kind,
      number_of_operations TYPE i,
      operations_info      TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
    END OF ty_s_batch_package .
  types:
        "! <p class="shorttext synchronized" lang="en">Packages of batch operations</p>
    ty_t_batch_package TYPE STANDARD TABLE OF ty_s_batch_package WITH KEY kind .
  types:
    BEGIN OF ty_msglog_filter_range,
      msgguid TYPE /aif/api_select_options_tt,
      ns      TYPE /aif/api_select_options_tt,
      ifname  TYPE /aif/api_select_options_tt,
      ifver   TYPE /aif/api_select_options_tt,
      msgty   TYPE /aif/api_select_options_tt,
    END OF ty_msglog_filter_range .
  types:
    BEGIN OF ty_payload_filter_range,
      msgguid TYPE /aif/api_select_options_tt,
      ns      TYPE /aif/api_select_options_tt,
      ifname  TYPE /aif/api_select_options_tt,
      ifver   TYPE /aif/api_select_options_tt,
      path    TYPE /aif/api_select_options_tt,
    END OF ty_payload_filter_range .
  types:
    BEGIN OF ty_itg_filter_range,
      msgguid       TYPE /aif/api_select_options_tt,
      ns            TYPE /aif/api_select_options_tt,
      ifname        TYPE /aif/api_select_options_tt,
      ifver         TYPE /aif/api_select_options_tt,
      log_message   TYPE /aif/api_select_options_tt,
      status        TYPE /aif/api_select_options_tt,
      process_date  TYPE /aif/api_select_options_tt,
      edited_status TYPE /aif/api_select_options_tt,
    END OF ty_itg_filter_range .
  types:
    BEGIN OF ty_keyfieldvalue_filter_range,
      msgguid TYPE /aif/api_select_options_tt,
      ns      TYPE /aif/api_select_options_tt,
      ifname  TYPE /aif/api_select_options_tt,
      ifver   TYPE /aif/api_select_options_tt,
    END OF ty_keyfieldvalue_filter_range .
  types:
    BEGIN OF ty_msg_key.
      INCLUDE TYPE /aif/ifkeys AS aifkeys.
  types:
      msgguid TYPE guid_32,
      msgguid_new TYPE guid_32,
    END OF ty_msg_key .
  types:
    ty_msg_key_st TYPE SORTED TABLE OF ty_msg_key WITH UNIQUE KEY aifkeys msgguid .
  types:
    tt_message_generic TYPE STANDARD TABLE OF /aif/s_message_generic .
  types:
    tt_msg_return TYPE STANDARD TABLE OF  /aif/s_msg_return .
  types:
    BEGIN OF ty_cfunc_filter_range,
      ns     TYPE /aif/api_select_options_tt,
      ifname TYPE /aif/api_select_options_tt,
      ifver  TYPE /aif/api_select_options_tt,
      msgid  TYPE /aif/api_select_options_tt,
      msgno  TYPE /aif/api_select_options_tt,
    END OF ty_cfunc_filter_range .
  types:
    BEGIN OF ty_ibnappid_filter_range,
      app_id    TYPE /aif/api_select_options_tt,
      tile_title TYPE /aif/api_select_options_tt,
    END OF ty_ibnappid_filter_range .
  types:
    BEGIN OF TY_S_KEY_FIELDS,
    ns TYPE /AIF/NS,
    IFNAME TYPE /AIF/IFNAME,
    IFVER TYPE /AIF/IFVERSION,
    FIELDNAME TYPE FIELDNAME,
  END OF TY_S_KEY_FIELDS .

  constants:
    "! <p class="shorttext synchronized" lang="en"></p>
    BEGIN OF gcs_batch_package_kinds,
      read_operations   TYPE ty_batch_package_kind VALUE '1',
      change_operations TYPE ty_batch_package_kind VALUE '2',
      change_set        TYPE ty_batch_package_kind VALUE '3',
    END OF gcs_batch_package_kinds .
  data MO_LOG_READER type ref to /AIF/IF_MSG_LOG_READER .
  data MO_PAYLOAD_HANDLE type ref to /AIF/IF_PAYLOAD_HANDLER .
  data MO_MPROC_DB type ref to /AIF/IF_MASS_PROC_DB .
  data MO_ODQ_MANAGER type ref to IF_ODQ_QUEUED_TASK_MANAGER .
  data MO_SELECTION_ENGINE type ref to /AIF/IF_SELECTION_ENGINE .
  data MO_CUSTOM_DATA type ref to /AIF/IF_CUSTOM_DATA_HANDLER .
  data MO_VALIDATION_API type ref to /AIF/IF_VALIDATION_API .
  data MO_BATCH_PREPARE type ref to /AIF/IF_BATCH_PREPARATION .
  data MO_DP_ADVANCED type ref to /IWBEP/IF_V4_DP_ADVANCED .
  data MO_LIENSE_CHECK type ref to /AIF/CL_LICENSE_CHECK .
  data MO_FACADE_OVERVIEW type ref to /AIF/IF_FACADE_OVERVIEW .
  data MO_LICENSE_CHECK_MANAGER type ref to /AIF/IF_LICENSE_CHECK_MANAGER .
  data MT_MESSAGE_REQUIRE_RESTART type TY_MSG_KEY_ST .
  data MO_DATA_SERVICE_COMMON type ref to /AIF/IF_DATA_SERVICE_COMMON .

  methods PATCH_ENTITY_CHANGED_FIELD
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_PATCH
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_PATCH
    raising
      /IWBEP/CX_GATEWAY .
  methods PATCH_ENTITY_CUSTOMFUNCTION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_PATCH
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_PATCH
    raising
      /IWBEP/CX_GATEWAY .
  methods PATCH_ENTITY_CUSTOMHINT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_PATCH
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_PATCH
    raising
      /IWBEP/CX_GATEWAY .
  methods PATCH_ENTITY_CUSTOMTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_PATCH
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_PATCH
    raising
      /IWBEP/CX_GATEWAY .
  methods PATCH_ENTITY_CUSTOMLINK
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_PATCH
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_PATCH
    raising
      /IWBEP/CX_GATEWAY .
  methods ACTION_PROCESS_MESSAGE
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_ACTION
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_ACTION
    raising
      /IWBEP/CX_GATEWAY .
  methods ACTION_MASS_PROCESS
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_ACTION
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_ACTION
    raising
      /IWBEP/CX_GATEWAY .
  methods MESSAGE_PROCESS
    importing
      !IV_MSGGUID type GUID_32
      !IV_NS type /AIF/NS
      !IV_IFNAME type /AIF/IFNAME
      !IV_IFVER type /AIF/IFVERSION
      !IV_ACTION_NAME type /IWBEP/IF_V4_MED_ELEMENT=>TY_E_MED_INTERNAL_NAME
    exporting
      !ET_RETURN type BAPIRET2_T
      !EV_NEW_MSGGUID type GUID_32 .
  methods READ_LIST_MESSAGELOGSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_INDEXTABLEGENERIC
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_INDEXTABLEGENERICSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_KEYFIELDSSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_CHGFIELDVALUEHELP
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_KEYFIELDVALUEHELP
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_TREE_LIST_PAYLOAD_VALUE
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_TREE_L
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_TREE_L
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_TREE_LIST_STRUCTURE_INFO
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_TREE_L
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_TREE_L
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_MESSAGETEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_KEYFIELD_VALUESET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods PARSE_MESSAGE_KEY
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
    returning
      value(ES_MESSAGE_KEY) type /AIF/S_MESSAGE_KEY
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_CUSTOMFUNCTIONSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_CUSTOMHINTSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_CUSTOMTEXTSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_CUSTOMLINKSET
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_CUSTOMFUNCTION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_CUSTOMHINT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_CUSTOMTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_CUSTOMLINK
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods CREATE_ENTITY_CUSTOMFUNCTION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_CREATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_CREATE
    raising
      /IWBEP/CX_GATEWAY .
  methods CREATE_ENTITY_CUSTOMHINT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_CREATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_CREATE
    raising
      /IWBEP/CX_GATEWAY .
  methods CREATE_ENTITY_CUSTOMTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_CREATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_CREATE
    raising
      /IWBEP/CX_GATEWAY .
  methods CREATE_ENTITY_CUSTOMLINK
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_CREATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_CREATE
    raising
      /IWBEP/CX_GATEWAY .
  methods UPDATE_ENTITY_CUSTOMFUNCTION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_UPDATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_UPDATE
    raising
      /IWBEP/CX_GATEWAY .
  methods UPDATE_ENTITY_CUSTOMHINT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_UPDATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_UPDATE
    raising
      /IWBEP/CX_GATEWAY .
  methods UPDATE_ENTITY_CUSTOMTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_UPDATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_UPDATE
    raising
      /IWBEP/CX_GATEWAY .
  methods UPDATE_ENTITY_CUSTOMLINK
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_UPDATE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_UPDATE
    raising
      /IWBEP/CX_GATEWAY .
  methods DELETE_ENTITY_CUSTOMFUNCTION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_DELETE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_DELETE
    raising
      /IWBEP/CX_GATEWAY .
  methods DELETE_ENTITY_CUSTOMHINT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_DELETE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_DELETE
    raising
      /IWBEP/CX_GATEWAY .
  methods DELETE_ENTITY_CUSTOMTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_DELETE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_DELETE
    raising
      /IWBEP/CX_GATEWAY .
  methods DELETE_ENTITY_CUSTOMLINK
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_DELETE
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_DELETE
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_VALIDATION
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_IBNAPPIDVALUEHELP
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_TREE_LIST_KEYFIELDS
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_TREE_L
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_TREE_L
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_MESSAGELOGTEXT
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_TREE_LIST_CFUNC_PARAS
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_INTM_TREE_L
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_INTM_TREE_L
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_LIST_IFSTATIC
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_LIST
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_LIST
    raising
      /IWBEP/CX_GATEWAY .
  methods READ_ENTITY_LICENSE
    importing
      !IO_REQUEST type ref to /IWBEP/IF_V4_REQU_BASIC_READ
      !IO_RESPONSE type ref to /IWBEP/IF_V4_RESP_BASIC_READ
    raising
      /IWBEP/CX_GATEWAY .
  methods GET_LICENSE_CHECK_MANAGER
    returning
      value(RO_INSTANCE) type ref to /AIF/IF_LICENSE_CHECK_MANAGER .
  methods ADD_MESSAGE_REQUIRE_RESTART
    importing
      !IS_MSG_KEY type TY_MSG_KEY .
  methods SAVE_AND_RESTART
    raising
      /AIF/CX_GATEWAY .
  methods GET_DATA_SERVICE_COMMON
    returning
      value(RO_DATA_SERVICE_COMMON) type ref to /AIF/IF_DATA_SERVICE_COMMON .
ENDCLASS.



CLASS /AIF/CL_MONITORING_ODATA_DPC IMPLEMENTATION.


  METHOD /aif/if_batch_preparation~create_batch_packages.
*   copy from parent class /IWBEP/CL_V4_ABS_DATA_PROVIDER.
    DATA:
      ls_batch_package          TYPE ty_s_batch_package,
      ls_batch_operation_info   TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      lv_new_batch_package_kind TYPE ty_batch_package_kind,
      lv_last_change_set_id     TYPE /iwbep/if_v4_request_info=>ty_change_set_id,
      lv_tabix                  TYPE sytabix.

    CLEAR et_batch_package.

    LOOP AT it_batch_operation_info INTO ls_batch_operation_info.
      lv_tabix = sy-tabix.
      ls_batch_package-number_of_operations = ls_batch_package-number_of_operations + 1.

      "calculate to which kind of package the current operation would belong to
      CASE ls_batch_operation_info-operation_kind.
        WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity      OR
             /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list OR
             /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function.

          lv_new_batch_package_kind = gcs_batch_package_kinds-read_operations.

        WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity     OR
             /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity     OR
             /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity     OR
             /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.

          IF ls_batch_operation_info-changeset_id IS NOT INITIAL.
            lv_new_batch_package_kind = gcs_batch_package_kinds-change_set.
          ELSE.
            lv_new_batch_package_kind = gcs_batch_package_kinds-change_operations.
          ENDIF.

        WHEN OTHERS.
*          ASSERT ls_batch_operation_info-operation_kind IS NOT INITIAL.
          DATA lv_operation TYPE string.
          lv_operation = ls_batch_operation_info-operation_kind.
          " unsupported operation
          RAISE EXCEPTION TYPE /aif/cx_gateway
            EXPORTING
              textid   = /aif/cx_gateway=>batch_operation_not_supported
              any_name = lv_operation.
      ENDCASE.

      IF lv_tabix EQ 1.
        " start of the first package
        ls_batch_package-kind = lv_new_batch_package_kind.
        lv_last_change_set_id = ls_batch_operation_info-changeset_id.
      ENDIF.

      " if the kind of package changes or another change set starts
      " add the current package to the list of packages and start a new one
      IF ls_batch_package-kind NE lv_new_batch_package_kind OR
         ls_batch_operation_info-changeset_id NE lv_last_change_set_id.
        APPEND ls_batch_package TO et_batch_package.
        CLEAR ls_batch_package.
        ls_batch_package-kind = lv_new_batch_package_kind.
        ls_batch_package-number_of_operations = 1.
        lv_last_change_set_id = ls_batch_operation_info-changeset_id.
      ENDIF.

      " append the current operation to the current package
      APPEND ls_batch_operation_info TO ls_batch_package-operations_info.

    ENDLOOP.
    " append the last package
    APPEND ls_batch_package TO et_batch_package.

  ENDMETHOD.


  METHOD /aif/if_batch_preparation~execute_batch_operation.
    DATA ls_todo_list_btc_oper TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list.
    DATA lo_request  TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response TYPE REF TO /iwbep/cl_v4_response_info_pro.


    "Content ID referencing must be handled by redefining method /IWBEP/IF_V4_DP_BATCH~PROCESS_CHANGE_SET
    is_batch_operation-request->get_todos( IMPORTING es_todo_list = ls_todo_list_btc_oper ).
    IF ls_todo_list_btc_oper-process-content_id_ref = abap_true.
*      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
*        EXPORTING
*          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_content_id
*          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
*          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
*          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-batch
*          method             = '/IWBEP/IF_V4_DP_BATCH~PROCESS_CHANGE_SET'.
      " unsupported operation
      RAISE EXCEPTION TYPE /aif/cx_gateway
        EXPORTING
          textid   = /aif/cx_gateway=>batch_operation_not_supported
          any_name = 'CONTENT_ID_REF'.
    ENDIF.


    lo_request  ?= is_batch_operation-request.
    lo_response ?= is_batch_operation-response.

    CASE is_batch_operation-kind.
      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).

        mo_dp_advanced->read_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list ).

        mo_dp_advanced->read_entity_list(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).


      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-action ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-action ).

        mo_dp_advanced->execute_action(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-function ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-function ).

        mo_dp_advanced->execute_function(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-create ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-create ).

        mo_dp_advanced->create_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update ).

        mo_dp_advanced->update_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-delete ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-delete ).

        mo_dp_advanced->delete_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN OTHERS.
*        RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
*          EXPORTING
*            exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider.
        DATA lv_operation TYPE string.
        lv_operation = is_batch_operation-kind.
        " unsupported operation
        RAISE EXCEPTION TYPE /aif/cx_gateway
          EXPORTING
            textid   = /aif/cx_gateway=>batch_operation_not_supported
            any_name = lv_operation.
    ENDCASE.

    " We validate here so that a corresponding error is triggered closely to the operation execution
    lo_response->validate( ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~create_entity.

    DATA lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
    CASE lv_entity_type_name.
      WHEN gc_entity_type_names-internal-custom_function.
        CALL METHOD me->create_entity_customfunction
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_hint.
        CALL METHOD me->create_entity_customhint
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_text.
        CALL METHOD me->create_entity_customtext
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_link.
        CALL METHOD me->create_entity_customlink
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN OTHERS.
        CALL METHOD super->/iwbep/if_v4_dp_basic~create_entity
          EXPORTING
            io_request  = io_request
            io_response = io_response.

    ENDCASE.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~delete_entity.

    DATA lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
*    TRY.
    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
    CASE lv_entity_type_name.
      WHEN gc_entity_type_names-internal-custom_function.
        CALL METHOD me->delete_entity_customfunction
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_hint.
        CALL METHOD me->delete_entity_customhint
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_text.
        CALL METHOD me->delete_entity_customtext
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_link.
        CALL METHOD me->delete_entity_customlink
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN OTHERS.
        CALL METHOD super->/iwbep/if_v4_dp_basic~delete_entity
          EXPORTING
            io_request  = io_request
            io_response = io_response.

    ENDCASE.
*      CATCH /iwbep/cx_gateway.
*    ENDTRY.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~execute_action.
*SUPER->/IWBEP/IF_V4_DP_BASIC~EXECUTE_ACTION(
*    IO_REQUEST  = IO_REQUEST
*    IO_RESPONSE = IO_RESPONSE
*       ).
    DATA :lv_action_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
*          ls_key_data TYPE any.
* get action name
    io_request->get_action(
    IMPORTING
      ev_action_name = lv_action_name
    ).
    CASE lv_action_name.
      WHEN 'MESSAGE_RESTART'.
        action_process_message( EXPORTING io_request = io_request io_response = io_response ).
      WHEN 'MESSAGE_CANCEL'.
        action_process_message( EXPORTING io_request = io_request io_response = io_response ).
      WHEN 'MASS_PROCESS'.
        action_mass_process( EXPORTING io_request = io_request io_response = io_response ).
    ENDCASE.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_entity.

    DATA lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).

    CASE lv_entity_type_name.
      WHEN gc_entity_type_names-internal-messagetext.
        read_entity_messagetext(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).

      WHEN gc_entity_type_names-internal-indextablegeneric.
        read_list_indextablegeneric(
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_type_names-internal-custom_function.
        read_entity_customfunction(
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_type_names-internal-custom_hint.
        read_entity_customhint(
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_type_names-internal-custom_text.
        read_entity_customtext(
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_type_names-internal-custom_link.
        read_entity_customlink(
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_type_names-internal-validation.
        read_entity_validation(
            io_request        = io_request
            io_response       = io_response ).
      WHEN gc_entity_type_names-internal-message_log_text.
        read_entity_messagelogtext(
            io_request        = io_request
            io_response       = io_response ).
      WHEN gc_entity_type_names-internal-license_check.
        read_entity_license(
            io_request        = io_request
            io_response       = io_response ).
      WHEN OTHERS.
        DATA lv_entity_name TYPE string.
        lv_entity_name = lv_entity_type_name.
        RAISE EXCEPTION TYPE /aif/cx_gateway
          EXPORTING
*           http_status_code = /IWBEP/CX_GATEWAY=>gcs_http_status_codes-sv_not_implemented
            textid      = /aif/cx_gateway=>entity_type_not_supported
            entity_type = lv_entity_name.

    ENDCASE.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_entity_list.

*&----------------------------------------------------------------------------------------------*
*&* delegation to specific entity sets
*&----------------------------------------------------------------------------------------------*
    io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_entityset_name) ).
    io_request->get_entity_type( IMPORTING EV_ENTITY_TYPE_NAME = DATA(lv_entity_name) ).

    IF lv_entity_name = gc_entity_set_names-internal-interface_statistics.
      read_list_ifstatic(
      EXPORTING
      io_request  = io_request
      io_response = io_response ).
      EXIT.
    ENDIF.
    CASE lv_entityset_name.

      WHEN gc_entity_set_names-internal-messagelogset.
        read_list_messagelogset(
          EXPORTING
            io_request        = io_request
            io_response       = io_response ).

      WHEN gc_entity_set_names-internal-indextablegeneric.
        read_list_indextablegenericset(
            io_request        = io_request
            io_response       = io_response ).

      WHEN 'KEYFIELDSSET'.
*     Call the entity set generated method
        read_list_keyfieldsset(
          EXPORTING
            io_request  = io_request
            io_response = io_response
         ).

      WHEN 'KEYFIELDVALUEHELSET'.
        read_list_keyfieldvaluehelp(
          EXPORTING
            io_request  = io_request
            io_response = io_response
         ).

      WHEN 'KEYFIELD_VALUESET'.
        read_list_keyfield_valueset(
          EXPORTING
            io_request  = io_request
            io_response = io_response
            ).

      WHEN 'CHGFIELDVALUEHELSET'.
        read_list_chgfieldvaluehelp(
          EXPORTING
            io_request  = io_request
            io_response = io_response
         ).
      WHEN 'CUSTOMFUNCTIONSET'.
        read_list_customfunctionset(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).
      WHEN 'CUSTOMHINTSET'.
        read_list_customhintset(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).
      WHEN 'CUSTOMTEXTSET'.
        read_list_customtextset(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).
      WHEN gc_entity_set_names-internal-custom_link.
        read_list_customlinkset(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).
      WHEN 'IBNAPPIDVALUEHELPSET'.
        read_list_ibnappidvaluehelp(
          EXPORTING
            io_request  = io_request
            io_response = io_response ).

      WHEN OTHERS.
        super->/iwbep/if_v4_dp_basic~read_entity_list( io_request  = io_request
                                                       io_response = io_response ).
    ENDCASE.



  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_ref_target_key_data.

    DATA:
          ls_message_key_source TYPE /aif/s_message_key.
    io_request->get_source_entity_type( IMPORTING ev_source_entity_type_name =  DATA(lv_entity_type) ).
    CASE lv_entity_type.
      WHEN /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-indextablegeneric.
        io_request->get_navigation_prop( IMPORTING ev_navigation_prop_name = DATA(lv_navigation_prop_name) ).
        io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).
        IF ( lv_navigation_prop_name = /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_validation
          OR lv_navigation_prop_name = /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_log_text )
          AND ls_todo_list-process-source_key_data = abap_true.
          io_request->get_source_key_data( IMPORTING es_source_key_data = ls_message_key_source ).
          io_response->set_target_key_data( EXPORTING is_target_key_data = ls_message_key_source ).
          ls_todo_list-process-target_key_data = abap_true.
          io_response->set_is_done( EXPORTING is_todo_list = ls_todo_list-process ).
        ENDIF.
    ENDCASE.


  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_ref_target_key_data_list.
    TYPES:
      BEGIN OF ty_s_key,
        p_datetime_from TYPE /aif/processing_tstmp,
        p_datetime_to   TYPE /aif/processing_tstmp,
      END OF ty_s_key.
    DATA :ls_key TYPE    ty_s_key,
          LT_KEY TYPE STANDARD TABLE OF ty_s_key.


    DATA lt_interface_statics TYPE STANDARD TABLE OF /aif/s_interfacestatistics.
    DATA ls_todolist TYPE /iwbep/if_v4_requ_basic_ref_l=>ty_s_todo_process_list.
*
*    TRY.

    io_request->get_source_key_data(
    IMPORTING
      es_source_key_data = ls_key ).

    io_request->get_source_entity_type( IMPORTING ev_source_entity_type_name = DATA(lv_entitytype_name) ).
    CASE lv_entitytype_name.
      WHEN 'INTERFACESTATISTICSPARA'.
        io_request->get_navigation_prop( IMPORTING ev_navigation_prop_name = DATA(lv_navigation_prop_name) ).
        io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).
        IF  ls_todo_list-process-source_key_data = abap_true.
          io_request->get_source_key_data( IMPORTING es_source_key_data = ls_key ).
          APPEND LS_KEY TO LT_KEY.
          io_response->set_target_key_data( EXPORTING iT_target_key_data = lT_key ).
          ls_todo_list-process-target_key_data = abap_true.
          io_response->set_is_done( EXPORTING is_todo_list = ls_todo_list-process ).
        ENDIF.
*        read_tree_list_ifstatic( io_request = io_request io_response = io_response ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~update_entity.

    DATA lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
    CASE lv_entity_type_name.
      WHEN gc_entity_type_names-internal-custom_function.
        CALL METHOD me->update_entity_customfunction
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_hint.
        CALL METHOD me->update_entity_customhint
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_text.
        CALL METHOD me->update_entity_customtext
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN gc_entity_type_names-internal-custom_link.
        CALL METHOD me->update_entity_customlink
          EXPORTING
            io_request  = io_request
            io_response = io_response.
      WHEN OTHERS.
        CALL METHOD super->/iwbep/if_v4_dp_basic~update_entity
          EXPORTING
            io_request  = io_request
            io_response = io_response.
    ENDCASE.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_batch.
    DATA:
      ls_todo_list           TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_list,
      ls_done_list           TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list,
      ls_batch_package       TYPE ty_s_batch_package,
      lt_batch_package       TYPE ty_t_batch_package,
      lt_operation_info      TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      ls_operation_info      TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      ls_batch_operation     TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
      lo_batch_request       TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_change_set_request  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_change_set_response TYPE REF TO /iwbep/cl_v4_response_info_pro ##needed,
      lx_gateway             TYPE REF TO /iwbep/cx_gateway.

    " We register the COMMIT watchdog once in case we do our generic BATCH handling.
    " We then set it per changeset
    CALL FUNCTION '/IWBEP/FM_V4_REGISTER_WATCHDOG'.
    io_request->get_todos(
      IMPORTING
        es_todo_list      =  ls_todo_list ).
    " continue-on-error is being considered
    IF ls_todo_list-process-continue_on_error EQ abap_true.
      ls_done_list-continue_on_error = abap_true.
    ENDIF.
    io_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).
* Packaging
    io_request->get_operations_info(
      IMPORTING
        et_operation_info = lt_operation_info ).
    mo_batch_prepare->create_batch_packages(
      EXPORTING
        it_batch_operation_info = lt_operation_info
      IMPORTING
        et_batch_package        = lt_batch_package ).
* Process packages
    LOOP AT lt_batch_package INTO ls_batch_package.
      CASE ls_batch_package-kind.
        WHEN gcs_batch_package_kinds-read_operations.
          "@ToCheck - parallelization (separate utility)
          " serial execution
          LOOP AT ls_batch_package-operations_info INTO ls_operation_info.
            TRY.
                io_request->get_operation(
                  EXPORTING
                    iv_operation_id = ls_operation_info-id
                  IMPORTING
                    es_operation    = ls_batch_operation ).

                mo_batch_prepare->execute_batch_operation( ls_batch_operation ).

              CATCH /iwbep/cx_gateway INTO lx_gateway.
                ls_batch_operation-response->set_gateway_exception( lx_gateway ).

                IF ls_todo_list-process-continue_on_error EQ abap_false.
                  RETURN.
                ENDIF.
            ENDTRY.
          ENDLOOP.
        WHEN gcs_batch_package_kinds-change_operations.
*         only one change set in the batch.
          LOOP AT ls_batch_package-operations_info INTO ls_operation_info.
            TRY.
                io_request->get_operation(
                  EXPORTING
                    iv_operation_id = ls_operation_info-id
                  IMPORTING
                    es_operation    = ls_batch_operation ).
                mo_batch_prepare->execute_batch_operation( ls_batch_operation ).

                TRY.
                    save_and_restart( ).
                    " for restarted outobund, GUID changes to new GUID.
                    DATA:  lo_response      TYPE REF TO /iwbep/cl_v4_response_info_pro ,
                           lo_response_set  TYPE REF TO /iwbep/if_v4_resp_intm_patch.
                    FIELD-SYMBOLS:  <ls_message_require_restart> TYPE ty_msg_key,
                                    <ls_keys_data>        TYPE /aif/s_payload_change.
                    LOOP AT mt_message_require_restart ASSIGNING  <ls_message_require_restart>.
                      IF <ls_message_require_restart>-msgguid_new IS NOT INITIAL
                         AND <ls_message_require_restart>-msgguid <> <ls_message_require_restart>-msgguid_new.
                        lo_response ?= ls_batch_operation-response.
                        DATA(RR_BUSI_DATA) =  lo_response->GET_BUSI_DATA_PRO(  ).
                        ASSIGN RR_BUSI_DATA->* TO <ls_keys_data>.
                        <ls_keys_data>-msgguid_new = <ls_message_require_restart>-msgguid_new.
                        lo_response_set ?= ls_batch_operation-response.
                        lo_response_set->set_busi_data( <ls_keys_data> ).
                        EXIT.
                      ENDIF.
                    ENDLOOP.
                  CATCH /aif/cx_gateway INTO lx_gateway .
                    RAISE EXCEPTION lx_gateway.
                ENDTRY.
                /iwbep/if_v4_dp_process_steps~commit( ).
              CATCH /iwbep/cx_gateway INTO lx_gateway.
                /iwbep/if_v4_dp_process_steps~rollback( ).
                ls_batch_operation-response->set_gateway_exception( lx_gateway ).
                IF ls_todo_list-process-continue_on_error EQ abap_false.
                  RETURN.
                ENDIF.
            ENDTRY.
          ENDLOOP.
        WHEN gcs_batch_package_kinds-change_set.
*         there are serveral change set in one batch
          lo_batch_request ?= io_request.
          TRY.
              DATA: lo_request_base  TYPE REF TO /iwbep/if_v4_request_info,
                    lo_response_base TYPE REF TO /iwbep/if_v4_response_info.

              lo_request_base  = CAST /iwbep/cl_v4_request_info_pro( lo_batch_request )->get_base_request_info( ).
              lo_response_base = CAST /iwbep/cl_v4_response_info_pro( io_response )->get_base_response_info( ).

              lo_change_set_request = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( lo_request_base ).
              lo_change_set_response = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
                              EXPORTING
                                io_request_info      = lo_request_base
                                io_request_info_pro  = lo_change_set_request
                                io_response_info     = lo_response_base ).

              lo_change_set_request->set_batch_operation_info( ls_batch_package-operations_info ).
              lo_change_set_request->set_request_info_pro_parent( lo_batch_request ).
              lo_change_set_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-batch-process_cs ).
              lo_change_set_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-batch-process_cs ).
              " transaction handling in process_change_set method
              /iwbep/if_v4_dp_batch~process_change_set(
                EXPORTING
                  io_request  = lo_change_set_request
                  io_response = lo_change_set_response ).

            CATCH /iwbep/cx_gateway INTO lx_gateway.
              LOOP AT ls_batch_package-operations_info INTO ls_operation_info.
                lo_change_set_request->/iwbep/if_v4_requ_btc_proc_cs~get_operation(
                  EXPORTING
                    iv_operation_id = ls_operation_info-id
                  IMPORTING
                    es_operation    = ls_batch_operation ).
                ls_batch_operation-response->set_gateway_exception( lx_gateway ).
              ENDLOOP.
              IF ls_todo_list-process-continue_on_error EQ abap_false.
                RETURN.
              ENDIF.
          ENDTRY.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_change_set.
    DATA:
      lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      ls_operation_info  TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
      lx_gateway         TYPE REF TO /iwbep/cx_gateway.

    io_request->get_operations_info(
      IMPORTING
        et_operation_info = lt_operation_info ).

    LOOP AT lt_operation_info INTO ls_operation_info.
      io_request->get_operation(
        EXPORTING
          iv_operation_id = ls_operation_info-id
        IMPORTING
          es_operation    = ls_batch_operation ).
      TRY.
          mo_batch_prepare->execute_batch_operation( ls_batch_operation ).
        CATCH /iwbep/cx_gateway INTO lx_gateway.
      ENDTRY.
    ENDLOOP.
    IF lx_gateway IS NOT BOUND.
      TRY.
*       all change in one batch will be saved into db per once
        save_and_restart( ).
        " for restarted outobund, GUID changes to new GUID.
        DATA:  lo_response      TYPE REF TO /iwbep/cl_v4_response_info_pro ,
               lo_response_set  TYPE REF TO /iwbep/if_v4_resp_intm_patch.
         FIELD-SYMBOLS:  <ls_message_require_restart> TYPE ty_msg_key,
                         <ls_keys_data>        TYPE /aif/s_payload_change.
         LOOP AT mt_message_require_restart ASSIGNING  <ls_message_require_restart>.
           IF <ls_message_require_restart>-msgguid_new IS NOT INITIAL
              AND <ls_message_require_restart>-msgguid <> <ls_message_require_restart>-msgguid_new.
              LOOP AT lt_operation_info INTO ls_operation_info.
                io_request->get_operation(
                 EXPORTING
                   iv_operation_id = ls_operation_info-id
                 IMPORTING
                   es_operation    = ls_batch_operation ).
               lo_response ?= ls_batch_operation-response.
               DATA(RR_BUSI_DATA) =  lo_response->GET_BUSI_DATA_PRO(  ).
               ASSIGN RR_BUSI_DATA->* TO <ls_keys_data>.
               IF <ls_keys_data>-msgguid = <ls_message_require_restart>-msgguid.
               " only update once for each GUID
                 <ls_keys_data>-msgguid_new = <ls_message_require_restart>-msgguid_new.
                 lo_response_set ?= ls_batch_operation-response.
                 lo_response_set->set_busi_data( <ls_keys_data> ).
                 EXIT.
               ENDIF.
              ENDLOOP.
           ENDIF.
         ENDLOOP.
        CATCH /aif/cx_gateway INTO lx_gateway.
      ENDTRY.
    ENDIF.

    IF lx_gateway IS NOT BOUND.
      CALL FUNCTION '/IWBEP/FM_V4_RECALL_WATCHDOG'.
      /iwbep/if_v4_dp_process_steps~commit( ).
    ELSE.
      CALL FUNCTION '/IWBEP/FM_V4_RECALL_WATCHDOG'.
      /iwbep/if_v4_dp_process_steps~rollback( ).
      RAISE EXCEPTION lx_gateway.
    ENDIF.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~check_modification_conditions.
    DATA lv_entity_type_name   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).

    CASE lv_entity_type_name.

      WHEN gc_entity_type_names-internal-payload_field_value_change.
*       skip etag validation for change payload
        DATA ls_done_list  TYPE /iwbep/if_v4_requ_intm_cond=>ty_s_todo_process_list.
        ls_done_list-if_match_etag = abap_true.
        ls_done_list-key_data  = abap_true.
        io_response->set_is_done( ls_done_list ).
      WHEN OTHERS.
        TEST-SEAM other_condition.
        super->/iwbep/if_v4_dp_intermediate~check_modification_conditions(
                 io_request  = io_request
                 io_response = io_response ).
        END-TEST-SEAM.
    ENDCASE.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~patch_entity.
    DATA lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
    CASE lv_entity_type_name.
      WHEN gc_entity_type_names-internal-payload_field_value_change.
        patch_entity_changed_field(
                 io_request  = io_request
                 io_response = io_response ).

      WHEN gc_entity_type_names-internal-custom_link.
        patch_entity_customlink(
                 io_request  = io_request
                 io_response = io_response ).
      WHEN gc_entity_type_names-internal-custom_function.
        patch_entity_customfunction(
                 io_request  = io_request
                 io_response = io_response ).
      WHEN gc_entity_type_names-internal-custom_text.
        patch_entity_customtext(
                 io_request  = io_request
                 io_response = io_response ).
      WHEN gc_entity_type_names-internal-custom_hint.
        patch_entity_customhint(
                 io_request  = io_request
                 io_response = io_response ).
      WHEN OTHERS.
*        super->/iwbep/if_v4_dp_intermediate~patch_entity(
*                 io_request  = io_request
*                 io_response = io_response ).
        DATA lv_entity_name TYPE string.
        lv_entity_name = lv_entity_type_name.
        RAISE EXCEPTION TYPE /aif/cx_gateway
          EXPORTING
*           http_status_code = /IWBEP/CX_GATEWAY=>gcs_http_status_codes-sv_not_implemented
            textid      = /aif/cx_gateway=>entity_type_not_supported
            entity_type = lv_entity_name.
    ENDCASE.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~read_entity_tree_list.
    io_request->get_entity_type( IMPORTING ev_entity_type_name = DATA(lv_entitytype_name) ).
    CASE lv_entitytype_name.
      WHEN /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-structure_info.
        read_tree_list_structure_info( io_request = io_request io_response = io_response ).
      WHEN /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-payload_structure.
        read_tree_list_payload_value( io_request = io_request io_response = io_response ).
      WHEN /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-keyfields.
        read_tree_list_keyfields( io_request = io_request io_response = io_response ).
      WHEN /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_function.
        TRY.
          DATA(lo_expand) = io_request->get_expand_tree_for_nav_prop( /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_cfunc_para ).
          read_tree_list_cfunc_paras( io_request = io_request io_response = io_response ).
        CATCH /iwbep/cx_v4_runtime.
*         not found
        ENDTRY.

      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.


  METHOD action_mass_process.
*  DATA: ls_key_data     TYPE /aif/mproc_key,
*        ls_mass_run     TYPE /aif/mproc_context_mainrun,
*        lv_dummy_mess   TYPE string,
*        ls_return       TYPE /aif/s_msg_return,
*        lv_message_text TYPE bapi_msg,
*        lt_return       TYPE STANDARD TABLE OF /aif/s_msg_return,
*        ls_todo_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
*        ls_done_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_process_list.
*
*  io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
*  io_request->get_parameter_data( IMPORTING es_parameter_data = ls_key_data ).
*
*  TRY.
*      ls_mass_run-sid = cl_rsmds_hash_utilities=>to_hash_c32( cl_http_server=>if_http_server~session_id ).
*    CATCH cx_rsmds_input_invalid
*          cx_rsmds_input_invalid_type.
*      MESSAGE e263(/aif/error_handling) INTO lv_dummy_mess.
*      set_mp_return ls_return.
*      IF ls_todo_list-return-busi_data = abap_true.
*        io_response->set_busi_data( ls_return ).
*      ENDIF.
*      RETURN.
*  ENDTRY.
*  ls_mass_run-code = ls_key_data-action_code.
*  ls_mass_run-content = ls_key_data-mass_process_context.
*
*  IF mo_odq_manager IS INITIAL.
*    mo_odq_manager = cl_odq_queued_task_manager=>get( ).
*  ENDIF.
*
*  DATA(lr_main)    = NEW lcl_mass_process_main( ls_mass_run ).
*
*  DATA(lv_user_dependent) = SWITCH #( cl_cos_utilities=>is_cloud( )
*                               WHEN abap_false THEN 'X'
*                               ELSE ''
*                           ).
*  DATA(lv_externalid) = '/AIF_MASS_PROC_MAIN_' && sy-uname && '_' && sy-datum && sy-uzeit.
*  DATA(l_taskid) = mo_odq_manager->create_task(
*  EXPORTING
*    i_externalid           = lv_externalid
*    ir_task                = lr_main
*    i_max_retry_counter    = 3
*    i_user_dependent       = lv_user_dependent ).
*  mo_odq_manager->schedule_task( l_taskid ).
*
*  select count(*) CONNECTION (c_connection) from /aif/mproc_mguid
*                 into @data(lv_count)
*                 where sid = @ls_mass_run-sid.
*  IF ls_key_data-action_code = /aif/if_globals=>gc_eh_actioncode-restart.
*    MESSAGE s160(/aif/error_handling) WITH lv_count INTO lv_dummy_mess.
*  ELSEIF ls_key_data-action_code = /aif/if_globals=>gc_eh_actioncode-cancel.
*    MESSAGE s161(/aif/error_handling) WITH lv_count INTO lv_dummy_mess.
*  ENDIF.
*  set_mp_return ls_return.
*  APPEND ls_return TO lt_return.
*
*  IF ls_todo_list-return-busi_data = abap_true.
*    io_response->set_busi_data( lt_return ).
*  ENDIF.
*
*  ls_done_list-action_import = abap_true.
*  ls_done_list-parameter_data = abap_true. "IMPLICITLY DONE ALREADY
*  io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD action_process_message.

    DATA: ls_key_data     TYPE /aif/s_message_key,
          lv_new_msgguid  TYPE guid_32,
          lv_action_name  TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          lv_message_text TYPE bapi_msg,
          ls_return       TYPE /aif/s_msg_return,
          lt_return       TYPE STANDARD TABLE OF /aif/s_msg_return,
          lt_proc_return  TYPE bapiret2_t,
          ls_todo_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
          ls_done_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_process_list.
    FIELD-SYMBOLS: <ls_return> TYPE /aif/s_msg_return.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_action( IMPORTING ev_action_name = lv_action_name ).
    io_request->get_key_data( IMPORTING es_key_data = ls_key_data ).

    IF ls_key_data IS NOT INITIAL.
      CALL METHOD message_process
        EXPORTING
          iv_msgguid     = ls_key_data-msgguid
          iv_ns          = ls_key_data-ns
          iv_ifname      = ls_key_data-ifname
          iv_ifver       = ls_key_data-ifver
          iv_action_name = lv_action_name
        IMPORTING
          ev_new_msgguid = lv_new_msgguid
          et_return      = lt_proc_return.
    ENDIF.
    APPEND LINES OF lt_proc_return TO lt_return.
    IF lv_new_msgguid IS INITIAL.
      lv_new_msgguid = ls_key_data-msgguid.
    ENDIF.
    LOOP AT lt_return ASSIGNING <ls_return>.
      IF <ls_return>-id = '/AIF/ERROR_HANDLING' AND <ls_return>-number = '003'.
        <ls_return>-number = '323'.
      ENDIF.
      CALL FUNCTION 'BAL_DSP_TXT_MSG_READ'
        EXPORTING
          i_msgid        = <ls_return>-id
          i_msgno        = <ls_return>-number
          i_msgv1        = <ls_return>-message_v1
          i_msgv2        = <ls_return>-message_v2
          i_msgv3        = <ls_return>-message_v3
          i_msgv4        = <ls_return>-message_v4
        IMPORTING
          e_message_text = lv_message_text
        EXCEPTIONS
          OTHERS         = 0.
      <ls_return>-message = lv_message_text.
      <ls_return>-msgguid = lv_new_msgguid.
    ENDLOOP.

    ls_done_list-key_data = abap_true. "IMPLICITLY DONE ALREADY

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( lt_return ).
    ENDIF.

    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD add_message_require_restart.
    IF line_exists( mt_message_require_restart[ aifkeys = is_msg_key-aifkeys msgguid = is_msg_key-msgguid ] ).
      RETURN.
    ELSE.
      INSERT is_msg_key INTO TABLE mt_message_require_restart.
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
    super->constructor( ).
    mo_payload_handle = /aif/cl_payload_handler=>get_instance( ).
    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    mo_facade_overview = /aif/cl_facade_overview=>get_instance( ).
    mo_validation_api = /aif/cl_validation_api=>get_instance( ).
    mo_log_reader = new /aif/cl_msg_log_reader( ).
    mo_batch_prepare = me.
    mo_dp_advanced = me.
  ENDMETHOD.


  METHOD create_entity_customfunction.

    DATA ls_todo_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_list.
    DATA ls_done_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_process_list.
    DATA ls_cfunc_requ TYPE /aif/s_custom_function.
    DATA ls_cfunc_resp TYPE /aif/s_custom_function.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.
    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_cfunc_requ.

* Create
    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).

    CALL METHOD mo_custom_data->create_custom_function
      EXPORTING
        is_custom_function = ls_cfunc_requ
      RECEIVING
        rs_custom_function = ls_cfunc_resp.

* Report list of request options handled by application
    io_response->set_busi_data( ls_cfunc_resp ).
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD create_entity_customhint.

    DATA ls_hint_requ TYPE /aif/s_custom_hint.
    DATA ls_hint_resp TYPE /aif/s_custom_hint.
    DATA ls_todo_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_list.
    DATA ls_done_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_process_list.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.
    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_hint_requ.

* Create
    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).

    CALL METHOD mo_custom_data->create_custom_hint
      EXPORTING
        is_custom_hint = ls_hint_requ
      RECEIVING
        rs_custom_hint = ls_hint_resp.

* Report list of request options handled by application
    io_response->set_busi_data( ls_hint_resp ).
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed

    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD create_entity_customlink.

    DATA:
      ls_clink_requ TYPE /aif/s_custom_link,
      ls_clink_resp TYPE /aif/s_custom_link,
      ls_todo_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_list,
      ls_done_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_process_list.

    " Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_busi_data( IMPORTING es_busi_data = ls_clink_requ ).
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed

    " Create
    ls_clink_resp = mo_custom_data->create_custom_link( is_custom_link = ls_clink_requ ).

    io_response->set_busi_data( ls_clink_resp ).

    " Report list of request options handled by application
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD create_entity_customtext.

    DATA ls_ctext_requ TYPE /aif/s_custom_text.
    DATA ls_ctext_resp TYPE /aif/s_custom_text.
    DATA ls_todo_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_list.
    DATA ls_done_list  TYPE /iwbep/if_v4_requ_basic_create=>ty_s_todo_process_list.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.
    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_ctext_requ.

* Create
    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).

    CALL METHOD mo_custom_data->create_custom_text
      EXPORTING
        is_custom_text = ls_ctext_requ
      RECEIVING
        rs_custom_text = ls_ctext_resp.

* Return data to the response
    io_response->set_busi_data( ls_ctext_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed
    io_response->set_is_done( ls_done_list ).


  ENDMETHOD.


  METHOD delete_entity_customfunction.
    DATA ls_todo_list       TYPE /iwbep/if_v4_requ_basic_delete=>ty_s_todo_list.
    DATA ls_done_list       TYPE /iwbep/if_v4_requ_basic_delete=>ty_s_todo_process_list.
    DATA ls_cfunc_key       TYPE ty_s_customfunction_key.

* Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_cfunc_key ).

* Delete
*    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    mo_custom_data->delete_custom_function( is_interface_key = ls_cfunc_key-aifkeys iv_custom_function_id = ls_cfunc_key-idfunc ).

* Response
    ls_done_list-key_data = abap_true.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD delete_entity_customhint.

    DATA ls_hint_key        TYPE        ty_s_customhint_key.
    DATA ls_todo_list       TYPE        /iwbep/if_v4_requ_basic_delete=>ty_s_todo_list.
    DATA ls_done_list       TYPE        /iwbep/if_v4_requ_basic_delete=>ty_s_todo_process_list.

*    TRY.
* Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_hint_key ).

* Delete
*    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    mo_custom_data->delete_custom_hint( is_interface_key = ls_hint_key-aifkeys iv_custom_hint_id = ls_hint_key-hintid ).

* Response
    ls_done_list-key_data = abap_true.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD delete_entity_customlink.

    DATA:
      ls_clink_key TYPE ty_s_customlink_key,
      ls_todo_list TYPE /iwbep/if_v4_requ_basic_delete=>ty_s_todo_list,
      ls_done_list TYPE /iwbep/if_v4_requ_basic_delete=>ty_s_todo_process_list.

    " Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_clink_key ).
    ls_done_list-key_data = abap_true.

    " Delete
    mo_custom_data->delete_custom_link( is_interface_key = ls_clink_key-aifkeys iv_custom_link_id = ls_clink_key-clinkid ).

    " Report list of request options handled by application
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD delete_entity_customtext.
    DATA ls_todo_list   TYPE        /iwbep/if_v4_requ_basic_delete=>ty_s_todo_list.
    DATA ls_done_list   TYPE        /iwbep/if_v4_requ_basic_delete=>ty_s_todo_process_list.
    DATA ls_ctext_key   TYPE        ty_s_customtext_key.

*    TRY.
* Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_ctext_key ).

* Delete
*    IF mo_custom_data IS INITIAL.
*      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
*    ENDIF.
    mo_custom_data->delete_custom_text( is_interface_key = ls_ctext_key-aifkeys iv_custom_text_id = ls_ctext_key-ctextid ).

* Response
    ls_done_list-key_data = abap_true.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD get_data_service_common.
    IF mo_data_service_common IS INITIAL.
      mo_data_service_common = /aif/cl_data_service_common=>get_instance( ).
    ENDIF.
    ro_data_service_common = mo_data_service_common.
  ENDMETHOD.


  METHOD get_license_check_manager.
    IF mo_license_check_manager IS INITIAL.
      mo_license_check_manager = /aif/cl_license_check_manager=>get_instance( ).
    ENDIF.
    ro_instance = mo_license_check_manager.
  ENDMETHOD.


  METHOD message_process.

    TYPES: BEGIN OF ty_msg_v1,
             ns        TYPE /aif/ns,
             ifname    TYPE /aif/ifname,
             ifver     TYPE /aif/ifversion,
             tree_node TYPE /aif/treenode_tt,
           END OF ty_msg_v1.

    DATA: ls_if_msgs      TYPE /aif/if_msgguids_st,
          lt_if_msgs      TYPE /aif/if_msgguids_tt,
          ls_return       TYPE bapiret2,
          lr_appl_engine  TYPE REF TO /aif/if_application_engine,
          lr_db_finf      TYPE REF TO /aif/cl_db_access_finf,
          lr_ui_facade    TYPE REF TO /aif/cl_ui_facade_auto_repr,
          lr_exception    TYPE REF TO /aif/cx_error_handling_general,
          lr_no_engine    TYPE REF TO /aif/cx_aif_engine_not_found,
          lv_counter      TYPE i VALUE 1,
          lv_processed    TYPE i,
          lv_confirm_mode TYPE /aif/confirm_mode,
          lr_data_row     TYPE REF TO data,
          lr_idx_entry    TYPE REF TO data,
          ls_finf         TYPE /aif/t_finf,
          ls_msg_v1       TYPE ty_msg_v1,
          lt_data1        TYPE /aif/treenode_tt,
          ls_tree_data    TYPE /aif/data_row_v_1_st,
          ls_tree_node    LIKE LINE OF ls_msg_v1-tree_node,
          lv_action_text  TYPE char20,
          lt_usw_data     TYPE /aif/usw_data_t,
          lv_msgv1        TYPE symsgv,
          lv_validated    TYPE abap_bool.
    FIELD-SYMBOLS: <ls_idx_entry> TYPE any,
                   <lv_status>    TYPE /aif/proc_status.
    CLEAR: et_return, ev_new_msgguid.
    ls_if_msgs = VALUE #( ns = iv_ns
                          ifname = iv_ifname
                          ifver = iv_ifver
                          msgguid = VALUE #( ( iv_msgguid ) ) ).
    APPEND ls_if_msgs TO lt_if_msgs.
    IF iv_action_name = 'MESSAGE_RESTART'.
      lv_validated = mo_validation_api->validate_restart(
        VALUE #( ns = iv_ns
        ifname = iv_ifname
        ifver = iv_ifver
        msgguid = iv_msgguid )
        ).
      lv_action_text = TEXT-001.
    ELSEIF iv_action_name = 'MESSAGE_CANCEL'.
      lv_validated = mo_validation_api->validate_cancel(
        VALUE #( ns = iv_ns
        ifname = iv_ifname
        ifver = iv_ifver
        msgguid = iv_msgguid )
        ).
      lv_action_text = TEXT-002.
    ENDIF.
    IF lv_validated = abap_true.
      lr_db_finf =  /aif/cl_db_access_finf=>get_instance( ).
      TRY.
          ls_finf = lr_db_finf->read_single( iv_ns        = iv_ns
                                             iv_ifname    = iv_ifname
                                             iv_ifver     = iv_ifver ).
          lr_appl_engine = /aif/cl_aif_engine_factory=>get_engine(
                                             iv_ns        = iv_ns
                                             iv_ifname    = iv_ifname
                                             iv_ifversion = iv_ifver ).
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = iv_ns
                                                                                              iv_ifname    = iv_ifname
                                                                                              iv_ifversion = iv_ifver ).
          ENDIF.
          DATA lr_index_table_buffer TYPE REF TO /aif/if_index_table_buffer.
          lr_index_table_buffer = mo_selection_engine->get_index_table_buffer_for_msg( iv_ns        = iv_ns
                                                                                       iv_ifname    = iv_ifname
                                                                                       iv_ifversion = iv_ifver
                                                                                       iv_msgguid   = iv_msgguid ).
*        Get single index entry.
          lr_idx_entry = lr_index_table_buffer->get_single_idx_entry( ).
          ASSIGN lr_idx_entry->* TO <ls_idx_entry>.
          ASSIGN COMPONENT 'STATUS' OF STRUCTURE <ls_idx_entry> TO <lv_status>.
          IF <lv_status> IS ASSIGNED AND ( <lv_status> EQ 'S' OR <lv_status> EQ 'C' ).
            ls_return-type = 'E'.
            ls_return-id =  '/AIF/ERROR_HANDLING'.
            ls_return-number = '170'.
            ls_return-message_v1 = lv_action_text.
            ls_return-message_v2 = iv_msgguid.
            ls_return-message_v3 = <lv_status>.
            APPEND ls_return TO et_return.
            RETURN.
          ENDIF.

          ls_tree_data-msgguid     = iv_msgguid.
          ls_tree_data-ns          = iv_ns.
          ls_tree_data-ifname      = iv_ifname.
          ls_tree_data-ifver       = iv_ifver.
          ls_tree_data-data_row    = lr_idx_entry.
          "set single index table.
          SELECT SINGLE msg_tbl INTO ls_tree_data-msg_tbl "#EC CI_NOFIELD
            FROM  /aif/t_inf_tbl
            WHERE
              ns = iv_ns
              AND   ifname = iv_ifname
              AND   ifver = iv_ifver.                "#EC CI_SEL_NESTED
          IF sy-subrc <> 0 OR ls_tree_data-msg_tbl  IS INITIAL.
            ls_tree_data-msg_tbl  = '/AIF/STD_IDX_TBL'.
          ENDIF.

          GET REFERENCE OF ls_tree_data INTO lr_data_row.
          ls_tree_node-data_row = lr_data_row.
          ls_tree_node-msgguid   = iv_msgguid.


          ls_msg_v1-ns           = iv_ns.
          ls_msg_v1-ifname       = iv_ifname.
          ls_msg_v1-ifver        = iv_ifver.
          INSERT ls_tree_node INTO TABLE ls_msg_v1-tree_node.

          CREATE OBJECT lr_ui_facade.
          lv_confirm_mode = /aif/if_globals=>gc_confirm_modes-once.

          IF iv_action_name = 'MESSAGE_RESTART'.
            CLEAR lt_usw_data.
            lr_appl_engine->restart(
              EXPORTING
                is_msg_v1           = ls_msg_v1
                is_finf             = ls_finf
                iv_total_msgs       = lv_counter
                ir_ui_facade        = lr_ui_facade
                iv_reset_msg_count  = abap_true
*              is_param_tech_depend = is_param_tech_depend
              IMPORTING
                et_return           = et_return
              CHANGING
                cv_confirm_mode     = lv_confirm_mode
                ct_treenodes        = lt_data1
                cv_processed_msgs   = lv_processed
                ct_usw_data         = lt_usw_data ).
*         User-Switch in IDoc Restart; skip normal restart
*         user switch should only take place in the cloud enviroment during an IDoc restart.
*         lt_usw_data was filled in the IDoc Restart method of the AIF application engine
            IF lt_usw_data IS NOT INITIAL.
              TRY.
                  /aif/cl_usw_helper=>raise_restart_event( it_usw_data = lt_usw_data
                                                           iv_msgv1    = lv_msgv1 ).
                CATCH cx_uuid_error cx_root.
                  ls_return = VALUE #( type = 'E'
                                       id = '/AIF/ERROR_HANDLING'
                                       number = '318'
                                         ).
                  APPEND ls_return TO et_return.
              ENDTRY.
            ENDIF.
            IF ls_tree_data-pi_msg_id IS NOT INITIAL.
*             special case if msgguid is changed.
              ev_new_msgguid = ls_tree_data-pi_msg_id.
            ENDIF.
          ELSEIF iv_action_name = 'MESSAGE_CANCEL'.
            lr_appl_engine->cancel(
              EXPORTING
                is_msg_v1           = ls_msg_v1
                is_finf             = ls_finf
                ir_ui_facade        = lr_ui_facade
              IMPORTING
                et_return           = et_return
              CHANGING
                cv_confirm_mode     = lv_confirm_mode
                ct_treenodes        = lt_data1 ).

            DATA lr_treenode TYPE REF TO /aif/treenode_st.
            LOOP AT lt_data1 REFERENCE INTO lr_treenode.
              /aif/cl_serialization=>update_serialtabs_after_cancel(
                  iv_ns        = ls_finf-ns
                  iv_ifname    = ls_finf-ifname
                  iv_ifversion = ls_finf-ifversion
                  is_message   = lr_treenode->* ).
            ENDLOOP.

          ENDIF.
        CATCH /aif/cx_error_handling_general INTO lr_exception.
          ls_return-type = 'E'.
          ls_return-id =  lr_exception->if_t100_message~t100key-msgid.
          ls_return-number = lr_exception->if_t100_message~t100key-msgno.
          ls_return-message_v1 = lr_exception->if_t100_message~t100key-attr1.
          ls_return-message_v2 = lr_exception->if_t100_message~t100key-attr2.
          ls_return-message_v3 = lr_exception->if_t100_message~t100key-attr3.
          ls_return-message_v4 = lr_exception->if_t100_message~t100key-attr4.
          APPEND ls_return TO et_return.
          RETURN.
        CATCH /aif/cx_aif_engine_not_found INTO lr_no_engine.
          ls_return-type = 'E'.
          ls_return-id =  lr_no_engine->if_t100_message~t100key-msgid.
          ls_return-number = lr_no_engine->if_t100_message~t100key-msgno.
          ls_return-message_v1 = lr_no_engine->if_t100_message~t100key-attr1.
          ls_return-message_v2 = lr_no_engine->if_t100_message~t100key-attr2.
          ls_return-message_v3 = lr_no_engine->if_t100_message~t100key-attr3.
          ls_return-message_v4 = lr_no_engine->if_t100_message~t100key-attr4.
          APPEND ls_return TO et_return.
          RETURN.
      ENDTRY.
    ELSE.
      ls_return = VALUE #( type = 'E'
                           id = '/AIF/ERROR_HANDLING'
                           number = '107'
                           message_v1 = lv_action_text
                           message_v2 = iv_ns
                           message_v3 = iv_ifname
                           message_v4 = iv_ifver ).
      APPEND ls_return TO et_return.
    ENDIF.

  ENDMETHOD.


  METHOD parse_message_key.
    DATA:
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE ty_keyfieldvalue_filter_range,
      ls_range         TYPE /iwbep/s_cod_select_option,
      ls_message_key   TYPE /aif/s_message_key.

    io_request->get_filter_props_with_ranges(
    IMPORTING
      et_property_path  = lt_property_path ).

    LOOP AT lt_property_path INTO DATA(lv_property_path).
      CASE lv_property_path.
        WHEN 'NS'.
          io_request->get_filter_ranges_for_prop(
          EXPORTING
            iv_property_path = lv_property_path
          IMPORTING
            et_range = ls_filter_range-ns ).
        WHEN 'IFNAME'.
          io_request->get_filter_ranges_for_prop(
          EXPORTING
            iv_property_path = lv_property_path
          IMPORTING
            et_range = ls_filter_range-ifname ).
        WHEN 'IFVER'.
          io_request->get_filter_ranges_for_prop(
          EXPORTING
            iv_property_path = lv_property_path
          IMPORTING
            et_range = ls_filter_range-ifver ).
        WHEN 'MSGGUID'.
          io_request->get_filter_ranges_for_prop(
          EXPORTING
            iv_property_path = lv_property_path
          IMPORTING
            et_range = ls_filter_range-msgguid ).
      ENDCASE.
    ENDLOOP.

    "Get namespace
    LOOP AT ls_filter_range-ns INTO ls_range.
      IF ls_range-sign = /aif/if_globals=>gc_range_sign-inclusive
      AND ls_range-option = /aif/if_globals=>gc_range_option-eq.
        ls_message_key-ns = ls_range-low.
        CLEAR ls_range.
        EXIT.
      ENDIF.
    ENDLOOP.
    "get Interface name
    LOOP AT ls_filter_range-ifname INTO ls_range.
      IF ls_range-sign = /aif/if_globals=>gc_range_sign-inclusive
      AND ls_range-option = /aif/if_globals=>gc_range_option-eq.
        ls_message_key-ifname = ls_range-low.
        CLEAR ls_range.
        EXIT.
      ENDIF.
    ENDLOOP.
    "get interface version
    LOOP AT ls_filter_range-ifver INTO ls_range.
      IF ls_range-sign = /aif/if_globals=>gc_range_sign-inclusive
      AND ls_range-option = /aif/if_globals=>gc_range_option-eq.
        ls_message_key-ifver = ls_range-low.
        CLEAR ls_range.
        EXIT.
      ENDIF.
    ENDLOOP.
    "get message guid
    LOOP AT ls_filter_range-msgguid INTO ls_range.
      IF ls_range-sign = /aif/if_globals=>gc_range_sign-inclusive
      AND ls_range-option = /aif/if_globals=>gc_range_option-eq.
        ls_message_key-msgguid = ls_range-low.
        CLEAR ls_range.
        EXIT.
      ENDIF.
    ENDLOOP.
    es_message_key = ls_message_key.
  ENDMETHOD.


  METHOD patch_entity_changed_field.

    DATA: ls_changed_data     TYPE /aif/s_payload_change,
          ls_keys_data        TYPE /aif/s_payload_change,
          lv_with_restart     TYPE string,
          ls_done_list        TYPE  /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list,
          lr_request_info_pro TYPE REF TO /iwbep/cl_v4_request_info_pro.
    TRY.
        io_request->get_key_data(  IMPORTING es_key_data  = ls_keys_data ).
        io_request->get_busi_data( IMPORTING es_busi_data = ls_changed_data ).
        ls_keys_data-value_new = ls_changed_data-value_new.
*        get etag value for checking
        TEST-SEAM get_change_with_restart.
          lr_request_info_pro ?= io_request.
          lv_with_restart = lr_request_info_pro->get_base_request_info( )->get_http_header( 'withrestart' ).
        END-TEST-SEAM.
        ls_keys_data-timestamp = ls_changed_data-timestamp.
        " Check if in emergency correction mode or not
        DATA(lv_is_emergency_correction) = get_data_service_common( )->is_emergency_correction( io_request ).
*       update payload according change set.
        mo_payload_handle->change_payload_via_path(  EXPORTING    iv_timestamp     = ls_keys_data-timestamp iv_is_emergency_correction = lv_is_emergency_correction
                                                     CHANGING     cs_payload_data  = ls_keys_data ).
        ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.
        io_response->set_busi_data( ls_keys_data ).
        io_response->set_is_done( ls_done_list ).
        IF lv_with_restart = 'true'.
          add_message_require_restart( CORRESPONDING #( ls_keys_data ) ).
        ENDIF.
      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found  INTO DATA(lr_exception_error).
        DATA lv_entity TYPE string.
        lv_entity = gc_entity_set_names-edm-payload_field_value_change                           .
        RAISE EXCEPTION TYPE /aif/cx_gateway
          EXPORTING
            textid      = /aif/cx_gateway=>save_fail
            entity_set  = lv_entity
            is_for_user = abap_true.
    ENDTRY.

  ENDMETHOD.


  METHOD patch_entity_customfunction.
    DATA ls_todo_list       TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list.
    DATA ls_done_list       TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.
    DATA lo_cfunc           TYPE REF TO /aif/cl_custom_function_list.
    DATA lo_single_cfunc    TYPE REF TO /aif/cl_custom_function.
    DATA ls_action_details  TYPE /aif/cfunc_action_st.
    DATA ls_attributes      TYPE /aif/cfunc_attributes_st.
    DATA ls_recipient       TYPE /aif/auth_userrecipient.
    DATA ls_msg_details     TYPE /aif/cfunc_msg_details_st.
    DATA ls_butlang         TYPE /aif/func_language.
    DATA lt_butlang         TYPE /aif/func_lang_tt.
    DATA lt_param           TYPE /aif/func_param_tt.
    DATA lt_cfuncs_rt       TYPE /aif/cfuncs_rt.
    DATA ls_cfunc_details   TYPE /aif/cfunc_det.
    DATA ls_cfunc_text      TYPE /aif/cfunc_text.
    DATA ls_cfunc_requ      TYPE /aif/s_custom_function.
    DATA ls_cfunc_resp      TYPE /aif/s_custom_function.
    DATA ls_cfunc_key       TYPE ty_s_customfunction_key.
    DATA lo_custom_data     TYPE REF TO /aif/if_custom_data_handler.
    DATA ls_cfunc_old       TYPE /aif/s_custom_function.
    DATA ls_cfunc_new       TYPE /aif/s_custom_function.
    DATA lv_property_path    TYPE string.
    DATA lt_p_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path.

    FIELD-SYMBOLS:
      <lv_provided_value> TYPE any,
      <lv_current_value>  TYPE any.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

    CALL METHOD io_request->get_key_data
      IMPORTING
        es_key_data = ls_cfunc_key.
    ls_done_list-key_data = abap_true. "key data processed

    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_cfunc_requ.

* Retrieve the record to be updated
    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    CALL METHOD mo_custom_data->get_single_custom_function
      EXPORTING
        iv_ns       = ls_cfunc_key-ns
        iv_ifname   = ls_cfunc_key-ifname
        iv_ifver    = ls_cfunc_key-ifver
        iv_cfunc_id = ls_cfunc_key-idfunc
      IMPORTING
        es_data     = ls_cfunc_old.
    IF ls_cfunc_old IS INITIAL.
      RAISE EXCEPTION TYPE /aif/cx_gateway
        EXPORTING
          textid             = /aif/cx_gateway=>accessed_entity_does_not_exist
          entity_type        = CONV #( gc_entity_type_names-internal-custom_function )
          exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
          http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-not_found.
    ENDIF.

    IF  ls_todo_list-process-partial_busi_data = abap_true .
      ls_cfunc_new = ls_cfunc_old.
      CALL METHOD io_request->get_provided_properties
        IMPORTING
          et_provided_property_path = lt_p_property_path.  " Provided properties (path representation)
      ls_done_list-partial_busi_data = abap_true. "Partial busi data processed

      " Mix the existing data with the provided data.
      LOOP AT lt_p_property_path INTO lv_property_path.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_cfunc_requ TO <lv_provided_value>.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_cfunc_new TO <lv_current_value>.
        <lv_current_value> = <lv_provided_value>.
      ENDLOOP.
    ELSE.
      ls_cfunc_new = ls_cfunc_requ.
    ENDIF.

* Update
    ls_cfunc_resp = mo_custom_data->update_custom_function( is_custom_function = ls_cfunc_new ).

    io_response->set_busi_data( ls_cfunc_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed
    IF ls_todo_list-process-partial_busi_data EQ abap_true.
      ls_done_list-partial_busi_data = abap_true. "partial business data processed
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD patch_entity_customhint.

    DATA ls_hint_key        TYPE        ty_s_customhint_key.
    DATA ls_hint_old        TYPE        /aif/s_custom_hint.
    DATA ls_hint_requ       TYPE        /aif/s_custom_hint.
    DATA ls_hint_resp       TYPE        /aif/s_custom_hint.
    DATA ls_todo_list       TYPE        /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list.
    DATA ls_done_list       TYPE        /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.
    DATA ls_hint_new        TYPE        /aif/s_custom_hint.
    DATA lv_property_path   TYPE        string.
    DATA lt_p_property_path TYPE        /iwbep/if_v4_runtime_types=>ty_t_property_path.

    FIELD-SYMBOLS:
      <lv_provided_value> TYPE any,
      <lv_current_value>  TYPE any.
*    TRY.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

      CALL METHOD io_request->get_key_data
        IMPORTING
          es_key_data = ls_hint_key.
      ls_done_list-key_data = abap_true. "key data processed

      CALL METHOD io_request->get_busi_data
        IMPORTING
          es_busi_data = ls_hint_requ.

* Retrieve the record to be updated
    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    CALL METHOD mo_custom_data->get_single_custom_hint
      EXPORTING
        iv_ns       = ls_hint_key-ns
        iv_ifname   = ls_hint_key-ifname
        iv_ifver    = ls_hint_key-ifver
        iv_chint_id = ls_hint_key-hintid
      IMPORTING
        es_data     = ls_hint_old.

    IF ls_hint_old IS INITIAL.
      RAISE EXCEPTION TYPE /aif/cx_gateway
        EXPORTING
          textid             = /aif/cx_gateway=>accessed_entity_does_not_exist
          entity_type        = CONV #( gc_entity_type_names-internal-custom_hint )
          exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
          http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-not_found.
    ENDIF.

    IF  ls_todo_list-process-partial_busi_data = abap_true .
      ls_hint_new = ls_hint_old.
      CALL METHOD io_request->get_provided_properties
        IMPORTING
          et_provided_property_path = lt_p_property_path.  " Provided properties (path representation)
      ls_done_list-partial_busi_data = abap_true. "Partial busi data processed

      " Mix the existing data with the provided data.
      LOOP AT lt_p_property_path INTO lv_property_path.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_hint_requ TO <lv_provided_value>.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_hint_new TO <lv_current_value>.
        <lv_current_value> = <lv_provided_value>.
      ENDLOOP.
    ELSE.
      ls_hint_new = ls_hint_requ.
    ENDIF.

* Update
    ls_hint_resp = mo_custom_data->update_custom_hint( is_custom_hint = ls_hint_new ).

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( ls_hint_resp ).
    ENDIF.

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed
    IF ls_todo_list-process-partial_busi_data EQ abap_true.
      ls_done_list-partial_busi_data = abap_true. "partial business data processed
    ENDIF.
    io_response->set_is_done( ls_done_list ).
  ENDMETHOD.


  METHOD patch_entity_customlink.

    DATA:
      ls_clink_key        TYPE ty_s_customlink_key,
      ls_clink_requ       TYPE /aif/s_custom_link,
      ls_clink_resp       TYPE /aif/s_custom_link,
      ls_clink_for_update TYPE /aif/s_custom_link,
      ls_clink_original   TYPE /aif/s_custom_link,
      lv_property_path    TYPE string,
      lt_p_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_todo_list        TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list,
      ls_done_list        TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.

    FIELD-SYMBOLS:
      <lv_provided_value> TYPE any,
      <lv_current_value>  TYPE any.

    " Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_clink_key ).
    ls_done_list-key_data = abap_true. "key data processed
    io_request->get_busi_data( IMPORTING es_busi_data = ls_clink_requ ).
    ls_done_list-busi_data = abap_true. "business data processed

    " Read the original and overwrite the changed fields
    ls_clink_original = mo_custom_data->read_custom_link( is_interface_key = ls_clink_key-aifkeys iv_custom_link_id = ls_clink_key-clinkid ).
    ls_clink_for_update = ls_clink_original.
    io_request->get_provided_properties( IMPORTING et_provided_property_path = lt_p_property_path ).  " Provided properties (path representation)
    ls_done_list-partial_busi_data = abap_true. "Partial busi data processed

    " Mix the existing data with the provided data.
    LOOP AT lt_p_property_path INTO lv_property_path.
      ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_clink_requ TO <lv_provided_value>.
      ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_clink_for_update TO <lv_current_value>.
      <lv_current_value> = <lv_provided_value>.
    ENDLOOP.

    " Update
    ls_clink_resp = mo_custom_data->update_custom_link( is_custom_link = ls_clink_for_update ).

    io_response->set_busi_data( ls_clink_resp ).

    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD patch_entity_customtext.

    DATA ls_ctext_key       TYPE ty_s_customtext_key.
    DATA ls_ctext_old       TYPE /aif/s_custom_text.
    DATA ls_ctext_new       TYPE /aif/s_custom_text.
    DATA ls_ctext_requ      TYPE /aif/s_custom_text.
    DATA ls_ctext_resp      TYPE /aif/s_custom_text.
    DATA ls_todo_list       TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list.
    DATA ls_done_list       TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.
    DATA lv_property_path   TYPE string.
    DATA lt_p_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path.

    FIELD-SYMBOLS:
      <lv_provided_value> TYPE any,
      <lv_current_value>  TYPE any.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

    CALL METHOD io_request->get_key_data
      IMPORTING
        es_key_data = ls_ctext_key.
    ls_done_list-key_data = abap_true. "key data processed

    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_ctext_requ.

* Retrieve the record to be updated
    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
*    TEST-SEAM GET_ORIGINAL_CTEXT.
    CALL METHOD mo_custom_data->get_single_custom_text
      EXPORTING
        iv_ns       = ls_ctext_key-ns
        iv_ifname   = ls_ctext_key-ifname
        iv_ifver    = ls_ctext_key-ifver
        iv_ctext_id = ls_ctext_key-ctextid
      IMPORTING
        es_data     = ls_ctext_old.
*    END-TEST-SEAM.
    IF ls_ctext_old IS INITIAL.
      RAISE EXCEPTION TYPE /aif/cx_gateway
        EXPORTING
          textid             = /aif/cx_gateway=>accessed_entity_does_not_exist
          entity_type        = CONV #( gc_entity_type_names-internal-custom_text )
          exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
          http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-not_found.
    ENDIF.

    IF  ls_todo_list-process-partial_busi_data = abap_true .
      ls_ctext_new = ls_ctext_old.
      CALL METHOD io_request->get_provided_properties
        IMPORTING
          et_provided_property_path = lt_p_property_path.  " Provided properties (path representation)
      ls_done_list-partial_busi_data = abap_true. "Partial busi data processed

      " Mix the existing data with the provided data.
      LOOP AT lt_p_property_path INTO lv_property_path.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_ctext_requ TO <lv_provided_value>.
        ASSIGN COMPONENT lv_property_path OF STRUCTURE ls_ctext_new TO <lv_current_value>.
        <lv_current_value> = <lv_provided_value>.
      ENDLOOP.
    ELSE.
      ls_ctext_new = ls_ctext_requ.
    ENDIF.

* Update
    ls_ctext_resp = mo_custom_data->update_custom_text( is_custom_text = ls_ctext_new ).

* Return data to the response
    io_response->set_busi_data( ls_ctext_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed

    IF ls_todo_list-process-partial_busi_data EQ abap_true.
      ls_done_list-partial_busi_data = abap_true. "partial business data processed
    ENDIF.

    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_customfunction.

    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_done_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list,
          ls_key_data  TYPE /aif/s_custom_function,
          ls_data      TYPE /aif/s_custom_function.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_key_data ).
    ls_done_list-key_data = abap_true.  "key_data processed

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_single_custom_function(
      EXPORTING
        iv_ns       = ls_key_data-ns
        iv_ifname   = ls_key_data-ifname
        iv_ifver    = ls_key_data-ifver
        iv_cfunc_id = ls_key_data-idfunc
      IMPORTING
        es_data     = ls_data ).

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( ls_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).


  ENDMETHOD.


  METHOD read_entity_customhint.

    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_done_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list,
          ls_key_data  TYPE /aif/s_custom_hint,
          ls_data      TYPE /aif/s_custom_hint.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_key_data ).
    ls_done_list-key_data = abap_true.  "key_data processed

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_single_custom_hint(
      EXPORTING
        iv_ns       = ls_key_data-ns
        iv_ifname   = ls_key_data-ifname
        iv_ifver    = ls_key_data-ifver
        iv_chint_id = ls_key_data-hintid
      IMPORTING
        es_data     = ls_data ).

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( ls_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_customlink.

    DATA:
      ls_todo_list  TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
      ls_done_list  TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list,
      ls_clink_key  TYPE ty_s_customlink_key,
      ls_clink_resp TYPE /aif/s_custom_link.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_clink_key ).
    ls_done_list-key_data = abap_true.  "key_data processed

    " Get data
    ls_clink_resp = mo_custom_data->read_custom_link( is_interface_key = ls_clink_key-aifkeys iv_custom_link_id = ls_clink_key-clinkid ).

    io_response->set_busi_data( ls_clink_resp ).
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_customtext.

    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_done_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list,
          ls_key_data  TYPE /aif/s_custom_text,
          ls_data      TYPE /aif/s_custom_text.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_key_data ).
    ls_done_list-key_data = abap_true.  "key_data processed

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_single_custom_text(
      EXPORTING
        iv_ns       = ls_key_data-ns
        iv_ifname   = ls_key_data-ifname
        iv_ifver    = ls_key_data-ifver
        iv_ctext_id = ls_key_data-ctextid
      IMPORTING
        es_data     = ls_data ).

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( ls_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_license.

    DATA ls_license TYPE /aif/license_check.
    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_key_data  TYPE /aif/license_check,
          ls_done_list TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list.

    io_request->get_key_data( IMPORTING es_key_data = ls_key_data ).

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    ls_done_list-key_data = abap_true.  "key_data processed

    CASE ls_key_data-app.
      WHEN '01'.  " Message Monitoring Overview, Message Monitoring for Integration Experts (overview page)
        " Check license for all namespaces assigned to the current user
        DATA(ls_alert_message) = get_license_check_manager( )->check_for_monitoring( ).

      WHEN '02'.  " Message Monitoring
        " Check license for the concerned namespace only
        ls_alert_message = get_license_check_manager( )->check_for_monitoring( iv_ns = ls_key_data-ns ).

      WHEN '03'.  " Message Monitoring for Administrators (overview page)
        " Check license for all namespaces in system
        ls_alert_message = get_license_check_manager( )->check_for_monitoring( iv_uname = '' ).
    ENDCASE.
    MOVE-CORRESPONDING ls_alert_message TO ls_license.

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( ls_license ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_messagelogtext.
    DATA: ls_message_text TYPE /aif/s_message_text,
          ls_message_key  TYPE /aif/s_message_key.

    TRY.
        io_request->get_key_data( IMPORTING es_key_data = ls_message_key ).
        ls_message_text = CORRESPONDING #( ls_message_key ).
        DATA(lo_auth_controller) = /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-app_log
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id ).
        TEST-SEAM text_log_auth.
        END-TEST-SEAM.

        IF lo_auth_controller->check_authority( ) = abap_true.
          ls_message_text-message_text = mo_log_reader->read_logtext_with_priority( is_message_key = ls_message_key ).
        ENDIF.
*  Set response and done flag

        io_response->set_busi_data( is_busi_data =  ls_message_text  ).
        io_response->set_is_done( is_todo_list = VALUE #( key_data  = abap_true  select = abap_true ) ).
      CATCH /aif/cx_error_handling_general INTO DATA(lo_error_general).
        DATA(lo_gateway) = NEW /iwbep/cx_gateway( ).
        DATA(lo_messate_container) = lo_gateway->get_message_container( ).
        lo_messate_container->add_exception( io_exception = lo_error_general iv_msg_type = 'E' ).
        RAISE EXCEPTION lo_gateway.
    ENDTRY.

  ENDMETHOD.


  METHOD read_entity_messagetext.

    TYPES:
      BEGIN OF ty_s_msgtext_key,
        msgid TYPE symsgid,
        msgno TYPE  symsgno,
        msgv1 TYPE  symsgv,
        msgv2 TYPE  symsgv,
        msgv3 TYPE  symsgv,
        msgv4 TYPE  symsgv,
      END OF ty_s_msgtext_key.


    DATA: ls_msgtext     TYPE /aif/s_msg_text,
          ls_msgtext_key TYPE ty_s_msgtext_key,
          lt_longtext    TYPE TABLE OF bapitgb,
          lv_selfdef     TYPE doku_selfd,
          ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_done_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_process_list.
    DATA ls_message     TYPE /iwbep/if_v4_runtime_types=>ty_s_message.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_msgtext_key ).
    ls_done_list-key_data = abap_true.  "key_data processed

    MOVE-CORRESPONDING ls_msgtext_key TO ls_msgtext.

    "Only support long text of SE91 messages
    ls_msgtext-longtext = cl_somu_t100_longtext_conv=>get_instance( )->get_as_html(
                                                                              iv_msg_id    =  ls_msgtext_key-msgid
                                                                              iv_msg_no    =  ls_msgtext_key-msgno
                                                                              iv_msg_v1    =  ls_msgtext_key-msgv1
                                                                              iv_msg_v2    =  ls_msgtext_key-msgv2
                                                                              iv_msg_v3    =  ls_msgtext_key-msgv3
                                                                              iv_msg_v4    =  ls_msgtext_key-msgv4
                                                                              iv_full_html =  abap_false
                                                                              ).

    REPLACE ALL OCCURRENCES OF '<I>' IN ls_msgtext-longtext WITH '<EM>'.
    REPLACE ALL OCCURRENCES OF '</I>' IN  ls_msgtext-longtext WITH '</EM>'.

    io_response->set_busi_data( ls_msgtext ).
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_entity_validation.
    DATA: ls_validation  TYPE /aif/s_validation,
          ls_message_key TYPE /aif/s_message_key.

    io_request->get_key_data( IMPORTING es_key_data = ls_message_key ).

    ls_validation = CORRESPONDING #( ls_message_key ).
    ls_validation-restart = mo_validation_api->validate_restart(
      is_message_key = ls_message_key ).
    ls_validation-cancel = mo_validation_api->validate_cancel(
      is_message_key = ls_message_key ).
    ls_validation-payload_edit = mo_validation_api->validate_payload(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_message_key = ls_message_key ).
    ls_validation-processor_edit = mo_validation_api->validate_processor(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_message_key = ls_message_key ).
    ls_validation-comment_edit = mo_validation_api->validate_comment(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_message_key = ls_message_key ).
    ls_validation-customfunction_edit = mo_validation_api->validate_customfunction(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_if_key = CORRESPONDING #( ls_message_key ) ).
    ls_validation-customhint_edit = mo_validation_api->validate_customhint(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_if_key = CORRESPONDING #( ls_message_key ) ).
    ls_validation-customtext_edit = mo_validation_api->validate_customtext(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_if_key = CORRESPONDING #( ls_message_key ) ).
    ls_validation-customdatalink_edit = mo_validation_api->validate_customdatalink(
      iv_action = /aif/if_validation_api=>gs_actions-edit
      is_if_key = CORRESPONDING #( ls_message_key ) ).

    ls_validation-idoc_http_error = mo_validation_api->validate_idoc_http_error(
                                                        is_message_key = ls_message_key ).

*  Set response and done flag

    io_response->set_busi_data( is_busi_data =  ls_validation  ).
    io_response->set_is_done( is_todo_list = VALUE #( key_data  = abap_true  select = abap_true ) ).

  ENDMETHOD.


  METHOD read_list_chgfieldvaluehelp.

    DATA:
      ls_message_key         TYPE /aif/s_message_key,
      lt_chgfields_valuehelp TYPE /aif/tt_valuehelp.
*   get key from filter properties
    ls_message_key = parse_message_key( io_request ).
    TRY.
*     Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          lt_chgfields_valuehelp = mo_selection_engine->/aif/if_data_selection~get_chgfields_valuehelp(  is_message_key = ls_message_key ).
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    io_response->set_busi_data( it_busi_data = lt_chgfields_valuehelp ).
    io_response->set_count( iv_count = lines( lt_chgfields_valuehelp ) ).
    io_response->set_is_done( is_todo_list = VALUE #( filter = abap_true ) ).
  ENDMETHOD.


  METHOD read_list_customfunctionset.

    DATA: ls_todo_list       TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_done_list       TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lt_property_path   TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_custom_function TYPE /aif/s_custom_function,
          ls_range           TYPE /iwbep/s_cod_select_option,
          ls_filter_range    TYPE ty_cfunc_filter_range,
          lr_data            TYPE REF TO data,
          lt_data            TYPE /aif/tt_custom_function.
    FIELD-SYMBOLS <lt_data>  TYPE STANDARD TABLE.

    CLEAR ls_filter_range.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " $FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.
      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path  = lt_property_path ).
      LOOP AT lt_property_path INTO DATA(lv_property_path).
        CASE lv_property_path.
          WHEN 'NS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ns ).
            READ TABLE ls_filter_range-ns INTO ls_range WITH KEY
                                                   sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                 option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_function-ns = ls_range-low.
            ENDIF.
          WHEN 'IFNAME'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifname ).
            READ TABLE ls_filter_range-ifname INTO ls_range WITH KEY
                                                       sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                     option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_function-ifname = ls_range-low.
            ENDIF.
          WHEN 'IFVER'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifver ).
            READ TABLE ls_filter_range-ifver INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_function-ifver = ls_range-low.
            ENDIF.
          WHEN 'MSGID'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgid ).
            READ TABLE ls_filter_range-msgid INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_function-msgid = ls_range-low.
            ENDIF.
          WHEN 'MSGNO'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgno ).
            READ TABLE ls_filter_range-msgno INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_function-msgno = ls_range-low.
            ENDIF.
          WHEN OTHERS.
            "do nothing
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_custom_functions( EXPORTING iv_ns     = ls_custom_function-ns
                                                    iv_ifname = ls_custom_function-ifname
                                                    iv_ifver  = ls_custom_function-ifver
                                                    iv_msgid  = ls_custom_function-msgid
                                                    iv_msgno  = ls_custom_function-msgno
                                          IMPORTING et_data = lt_data ) .

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( lt_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_list_customhintset.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_custom_hint   TYPE /aif/s_custom_hint,
          ls_range         TYPE /iwbep/s_cod_select_option,
          ls_filter_range  TYPE ty_cfunc_filter_range,
          lr_data          TYPE REF TO data,
          lt_data          TYPE /aif/tt_custom_hint.
    FIELD-SYMBOLS <lt_data>  TYPE STANDARD TABLE.

    CLEAR ls_filter_range.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " $FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.
      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path  = lt_property_path ).
      LOOP AT lt_property_path INTO DATA(lv_property_path).
        CASE lv_property_path.
          WHEN 'NS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ns ).
            READ TABLE ls_filter_range-ns INTO ls_range WITH KEY
                                                   sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                 option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_hint-ns = ls_range-low.
            ENDIF.
          WHEN 'IFNAME'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifname ).
            READ TABLE ls_filter_range-ifname INTO ls_range WITH KEY
                                                       sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                     option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_hint-ifname = ls_range-low.
            ENDIF.
          WHEN 'IFVER'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifver ).
            READ TABLE ls_filter_range-ifver INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_hint-ifver = ls_range-low.
            ENDIF.
          WHEN 'MSGID'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgid ).
            READ TABLE ls_filter_range-msgid INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_hint-msgid = ls_range-low.
            ENDIF.
          WHEN 'MSGNO'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgno ).
            READ TABLE ls_filter_range-msgno INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_hint-msgno = ls_range-low.
            ENDIF.
          WHEN OTHERS.
            "do nothing
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_custom_hints( EXPORTING iv_ns     = ls_custom_hint-ns
                                                iv_ifname = ls_custom_hint-ifname
                                                iv_ifver  = ls_custom_hint-ifver
                                                iv_msgid  = ls_custom_hint-msgid
                                                iv_msgno  = ls_custom_hint-msgno
                                      IMPORTING et_data = lt_data ) .

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( lt_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_list_customlinkset.

    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_clink_filter  TYPE /aif/s_custom_link,
      ls_range         TYPE /iwbep/s_cod_select_option,
      ls_filter_range  TYPE ty_cfunc_filter_range,
      lt_clink_resp    TYPE /aif/tt_custom_link.

    CLEAR ls_filter_range.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " $FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.
      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path = lt_property_path ).
      LOOP AT lt_property_path INTO DATA(lv_property_path).
        CASE lv_property_path.
          WHEN 'NS'.
            io_request->get_filter_ranges_for_prop(
                    EXPORTING
                      iv_property_path = lv_property_path
                    IMPORTING
                      et_range         = ls_filter_range-ns ).
            READ TABLE ls_filter_range-ns INTO ls_range
              WITH KEY sign   = /aif/if_globals=>gc_range_sign-inclusive
                       option = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_clink_filter-ns = ls_range-low.
            ENDIF.
          WHEN 'IFNAME'.
            io_request->get_filter_ranges_for_prop(
                    EXPORTING
                      iv_property_path = lv_property_path
                    IMPORTING
                      et_range         = ls_filter_range-ifname ).
            READ TABLE ls_filter_range-ifname INTO ls_range
              WITH KEY sign   = /aif/if_globals=>gc_range_sign-inclusive
                       option = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_clink_filter-ifname = ls_range-low.
            ENDIF.
          WHEN 'IFVER'.
            io_request->get_filter_ranges_for_prop(
                    EXPORTING
                      iv_property_path = lv_property_path
                    IMPORTING
                      et_range         = ls_filter_range-ifver ).
            READ TABLE ls_filter_range-ifver INTO ls_range
              WITH KEY sign   = /aif/if_globals=>gc_range_sign-inclusive
                       option = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_clink_filter-ifver = ls_range-low.
            ENDIF.
          WHEN 'MSGID'.
            io_request->get_filter_ranges_for_prop(
                    EXPORTING
                      iv_property_path = lv_property_path
                    IMPORTING
                      et_range         = ls_filter_range-msgid ).
            READ TABLE ls_filter_range-msgid INTO ls_range
              WITH KEY sign   = /aif/if_globals=>gc_range_sign-inclusive
                       option = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_clink_filter-msgid = ls_range-low.
            ENDIF.
          WHEN 'MSGNO'.
            io_request->get_filter_ranges_for_prop(
                    EXPORTING
                      iv_property_path = lv_property_path
                    IMPORTING
                      et_range         = ls_filter_range-msgno ).
            READ TABLE ls_filter_range-msgno INTO ls_range
              WITH KEY sign   = /aif/if_globals=>gc_range_sign-inclusive
                       option = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_clink_filter-msgno = ls_range-low.
            ENDIF.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    " interface key + messageGUID must be provided
    IF ls_clink_filter-ns IS INITIAL OR
       ls_clink_filter-ifname IS INITIAL OR
       ls_clink_filter-ifver IS INITIAL OR
       ls_clink_filter-msgid IS INITIAL.
    ELSE.
      " Get data
      lt_clink_resp = mo_custom_data->read_list_custom_link(
                                                        is_interface_key = ls_clink_filter-aifkeys
                                                        iv_msgid         = ls_clink_filter-msgid
                                                        iv_msgno         = ls_clink_filter-msgno
                                                        ).
    ENDIF.

    io_response->set_busi_data( lt_clink_resp ).

    " Report list of request options handled by application
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_list_customtextset.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_custom_text   TYPE /aif/s_custom_text,
          ls_range         TYPE /iwbep/s_cod_select_option,
          ls_filter_range  TYPE ty_cfunc_filter_range,
          lr_data          TYPE REF TO data,
          lt_data          TYPE /aif/tt_custom_text.
    FIELD-SYMBOLS <lt_data>  TYPE STANDARD TABLE.

    CLEAR ls_filter_range.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " $FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.
      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path  = lt_property_path ).
      LOOP AT lt_property_path INTO DATA(lv_property_path).
        CASE lv_property_path.
          WHEN 'NS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ns ).
            READ TABLE ls_filter_range-ns INTO ls_range WITH KEY
                                                   sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                 option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_text-ns = ls_range-low.
            ENDIF.
          WHEN 'IFNAME'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifname ).
            READ TABLE ls_filter_range-ifname INTO ls_range WITH KEY
                                                       sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                     option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_text-ifname = ls_range-low.
            ENDIF.
          WHEN 'IFVER'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifver ).
            READ TABLE ls_filter_range-ifver INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_text-ifver = ls_range-low.
            ENDIF.
          WHEN 'MSGID'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgid ).
            READ TABLE ls_filter_range-msgid INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_text-msgid = ls_range-low.
            ENDIF.
          WHEN 'MSGNO'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgno ).
            READ TABLE ls_filter_range-msgno INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_custom_text-msgno = ls_range-low.
            ENDIF.
          WHEN OTHERS.
            "do nothing
        ENDCASE.
      ENDLOOP.
    ENDIF.

    IF mo_custom_data IS INITIAL.
      mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ENDIF.
    mo_custom_data->get_custom_texts( EXPORTING iv_ns     = ls_custom_text-ns
                                                iv_ifname = ls_custom_text-ifname
                                                iv_ifver  = ls_custom_text-ifver
                                                iv_msgid  = ls_custom_text-msgid
                                                iv_msgno  = ls_custom_text-msgno
                                      IMPORTING et_data = lt_data ) .

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( lt_data ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_list_ibnappidvaluehelp.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE ty_ibnappid_filter_range,
      lt_appids        TYPE TABLE OF /aif/s_ibn_appid_valuehelp,
      lv_subrc         TYPE syst_subrc.
    FIELD-SYMBOLS: <lt_appids>  TYPE STANDARD TABLE,
                   <fs_ibn> TYPE /aif/s_ibn_appid_valuehelp.

      CONSTANTS:
          lc_fallback_langu TYPE sylangu VALUE 'E'.
    "User is required to have authorization to change custom function
    AUTHORITY-CHECK OBJECT '/AIF/CFUNC'
         ID '/AIF/NS' DUMMY
         ID '/AIF/IF' DUMMY
         ID '/AIF/IFVER' DUMMY
         ID '/AIF/NSREC' DUMMY
         ID '/AIF/VISI' DUMMY
         ID '/AIF/OTHUS' DUMMY
         ID 'ACTVT' FIELD '02'.
    TEST-SEAM ts_cfunc_auth_check.
      lv_subrc = sy-subrc.
    END-TEST-SEAM.
    IF lv_subrc = 0.
      " $FILTER Handling
      io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
      IF ls_todo_list-process-filter = abap_true.
        ls_done_list-filter = abap_true.
        io_request->get_filter_props_with_ranges(
          IMPORTING
            et_property_path  = lt_property_path ).
        LOOP AT lt_property_path INTO DATA(lv_property_path).
          CASE lv_property_path.
            WHEN 'APP_ID'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range = ls_filter_range-app_id ).
            WHEN 'TILE_TITLE'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range = ls_filter_range-tile_title ).
          ENDCASE.
        ENDLOOP.
      ENDIF.
      SELECT a~app_id, b~tile_title
        FROM sui_tm_mm_app AS a
        LEFT JOIN sui_tm_mm_appt AS b ON a~app_id = b~app_id
        INTO TABLE @lt_appids
        WHERE a~app_id IN @ls_filter_range-app_id
          AND b~tile_title IN @ls_filter_range-tile_title
          AND b~langu = @sy-langu.
*Begin of Note 2963062
      LOOP AT lt_appids ASSIGNING <fs_ibn>.
        IF <fs_ibn>-tile_title IS INITIAL .
          DATA(lv_2nd_langu) = /aif/cl_lang_control=>return_2nd_lang( ).
          IF lv_2nd_langu <> sy-langu.

            SELECT SINGLE tile_title FROM sui_tm_mm_appt INTO <fs_ibn>-tile_title
              WHERE app_id = <fs_ibn>-app_id
              AND langu = lv_2nd_langu.
          ENDIF.

        ENDIF.

        IF <fs_ibn>-tile_title IS INITIAL AND lc_fallback_langu <> sy-langu AND lc_fallback_langu <> lv_2nd_langu.
          SELECT SINGLE tile_title FROM sui_tm_mm_appt INTO <fs_ibn>-tile_title
           WHERE app_id = <fs_ibn>-app_id
           AND langu = lc_fallback_langu.

        ENDIF.
      ENDLOOP.
*End of Note 2963062
    ENDIF.
*   Set response data
    io_response->set_busi_data( it_busi_data = lt_appids ).
    io_response->set_is_done( is_todo_list = VALUE #( filter = abap_true ) ).

  ENDMETHOD.


  METHOD read_list_ifstatic.

    TYPES:
      BEGIN OF ty_s_key,
        p_datetime_from TYPE /aif/processing_tstmp,
        p_datetime_to   TYPE /aif/processing_tstmp,
      END OF ty_s_key.
    DATA: ls_key TYPE    ty_s_key,
          lt_key TYPE STANDARD TABLE OF ty_s_key.

    DATA lt_interfacestatistics  TYPE STANDARD TABLE OF /aif/s_interfacestatistics.

    io_request->get_key_data(
    IMPORTING
     et_key_data = lt_key ).
    READ TABLE lt_key INTO ls_key INDEX 1.

    DATA ls_time_span TYPE /aif/time_span_st.
    CONVERT TIME STAMP ls_key-p_datetime_from TIME ZONE 'UTC' INTO DATE ls_time_span-date_from TIME ls_time_span-time_from.
    CONVERT TIME STAMP ls_key-p_datetime_to TIME ZONE 'UTC' INTO DATE ls_time_span-date_to TIME ls_time_span-time_to.
    TRY.
      DATA(lt_statistic_raw) = mo_facade_overview->get_user_interface_statistic( is_time_span = ls_time_span ).
      CATCH /aif/cx_error_handling_general INTO  DATA(lo_exception_selection) .
        RAISE EXCEPTION TYPE /IWBEP/CX_GATEWAY
          EXPORTING
            PREVIOUS             = lo_exception_selection
             .
    ENDTRY.
    LOOP AT lt_statistic_raw ASSIGNING FIELD-SYMBOL(<ls_statistic_raw>).
      APPEND INITIAL LINE TO lt_interfacestatistics ASSIGNING FIELD-SYMBOL(<ls_statistic>).
      MOVE-CORRESPONDING <ls_statistic_raw> TO <ls_statistic>.
      <ls_statistic>-ifkey = <ls_statistic_raw>-ifdisplay.
    ENDLOOP.

    io_response->set_busi_data( it_busi_data = lt_interfacestatistics ).
    io_response->set_count( iv_count = lines( lt_interfacestatistics ) ).
    io_response->set_is_done( is_todo_list = VALUE #( key_data = abap_true ) ).

  ENDMETHOD.


  METHOD read_list_indextablegeneric.
    DATA: ls_condition   TYPE /iwbep/if_v4_runtime_types=>ty_s_read_conditions,
          ls_message_key TYPE /aif/s_message_key,
          lr_data        TYPE REF TO data.
    FIELD-SYMBOLS <ls_data> TYPE any.
    io_request->get_key_data( IMPORTING es_key_data = ls_message_key ).
    TRY.
*    Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns       = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          mo_selection_engine->/aif/if_data_selection~get_single_message_entry( EXPORTING is_message_key = ls_message_key
                                                                                IMPORTING er_message_entry = lr_data ) .
          ASSIGN lr_data->* TO <ls_data>.
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general INTO  DATA(lo_exception) .
        DATA(lo_gateway) = NEW /iwbep/cx_gateway( ).
        DATA(lo_messate_container) = lo_gateway->get_message_container( ).
        lo_messate_container->add_exception( io_exception = lo_exception iv_msg_type = 'E' ).
        RAISE EXCEPTION lo_gateway.
    ENDTRY.
*  Set response and done flag
    IF <ls_data> IS ASSIGNED.
      io_response->set_busi_data( is_busi_data =  <ls_data>  ).
    ENDIF.
    io_response->set_is_done( is_todo_list = VALUE #( key_data  = abap_true  select = abap_true ) ).

  ENDMETHOD.


  METHOD read_list_indextablegenericset.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_message_key   TYPE /aif/s_message_key,
          ls_range         TYPE /iwbep/s_cod_select_option,
          ls_filter_range  TYPE /aif/s_filter_range.

    CLEAR ls_filter_range.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    " $ORDERBY Handling
    IF ls_todo_list-process-orderby = abap_true.
      ls_done_list-orderby = abap_true.
      io_request->get_orderby( IMPORTING et_orderby_property = ls_filter_range-orderby ).
    ENDIF.


    " $SKIP / $TOP Handling
    IF ls_todo_list-process-skip = abap_true.
      ls_done_list-skip = abap_true.
      io_request->get_skip( IMPORTING ev_skip = ls_filter_range-skip ).
    ENDIF.
    IF ls_todo_list-process-top = abap_true.
      ls_done_list-top = abap_true.
      io_request->get_top( IMPORTING ev_top = ls_filter_range-top ).
    ENDIF.

    " $FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.
      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path  = lt_property_path ).
      LOOP AT lt_property_path INTO DATA(lv_property_path).
        CASE lv_property_path.
          WHEN 'NS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ns ).
            READ TABLE ls_filter_range-ns INTO ls_range WITH KEY
                                                   sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                 option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_message_key-ns = ls_range-low.
            ENDIF.
          WHEN 'IFNAME'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifname ).
            READ TABLE ls_filter_range-ifname INTO ls_range WITH KEY
                                                       sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                     option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_message_key-ifname = ls_range-low.
            ENDIF.
          WHEN 'IFVER'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-ifver ).
            READ TABLE ls_filter_range-ifver INTO ls_range WITH KEY
                                                      sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                    option  = /aif/if_globals=>gc_range_option-eq.
            IF sy-subrc = 0.
              ls_message_key-ifver = ls_range-low.
            ENDIF.
          WHEN 'MSGGUID'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-msgguid ).
            LOOP AT ls_filter_range-msgguid ASSIGNING FIELD-SYMBOL(<ls_msg_filter>).
              IF <ls_msg_filter>-low CA '*'.
                <ls_msg_filter>-option = 'CP'.
              ENDIF.
            ENDLOOP.
          WHEN 'STATUS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-status ).
          WHEN 'LOG_MESSAGE'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-log_message ).
          WHEN 'PROCESS_DATE'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-process_date ).
          WHEN 'EDITED_STATUS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-edited_status ).
          WHEN 'KEYFIELDS'.
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = lv_property_path
              IMPORTING
                et_range = ls_filter_range-keyfields ).
          WHEN 'MASS_PROCESS_FLAG'.
            ls_filter_range-mass_process  = abap_true.
          WHEN OTHERS.
            "do nothing
        ENDCASE.
      ENDLOOP.
    ENDIF.

    DATA: lv_count TYPE i,
          lr_data  TYPE REF TO data.
    FIELD-SYMBOLS <lt_data>   TYPE STANDARD TABLE.
    TRY.
*    Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.

          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          mo_selection_engine->/aif/if_data_selection~get_message_entries( EXPORTING is_filter_range    = ls_filter_range
*                                                                                   is_message_key     = ls_message_key
                                                                           IMPORTING er_message_entries = lr_data
                                                                                               ev_total = lv_count ) .
          ASSIGN lr_data->* TO <lt_data>.
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general INTO  DATA(lo_exception_selection) .
        RAISE EXCEPTION TYPE /aif/cx_gateway
          EXPORTING
            PREVIOUS             = lo_exception_selection
             .
    ENDTRY.
*  Set response and done flag
    IF ls_todo_list-return-count = abap_true.
      io_response->set_count( lv_count ).
    ENDIF.
    IF ls_todo_list-return-busi_data = abap_true AND <lt_data> IS ASSIGNED.
      io_response->set_busi_data( <lt_data> ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_list_keyfieldsset.

    DATA:
      ls_message_key          TYPE /aif/s_message_key,
      lt_keyfields_definition TYPE TABLE OF /aif/s_keyfields.
*   get key from filter properties
    ls_message_key = parse_message_key( io_request ).
    TRY.
*     Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          lt_keyfields_definition = mo_selection_engine->/aif/if_data_selection~get_keyfields_definition(  is_message_key = ls_message_key ).
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    io_response->set_busi_data( it_busi_data = lt_keyfields_definition ).
    io_response->set_count( iv_count = lines( lt_keyfields_definition ) ).
    io_response->set_is_done( is_todo_list = VALUE #( filter = abap_true ) ).

  ENDMETHOD.


  METHOD read_list_keyfieldvaluehelp.

    DATA:
      ls_message_key         TYPE /aif/s_message_key,
      lt_keyfields_valuehelp TYPE /aif/tt_keyfields_valuehelp.
*   get key from filter properties
    ls_message_key = parse_message_key( io_request ).
    TRY.
*     Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          lt_keyfields_valuehelp = mo_selection_engine->/aif/if_data_selection~get_keyfields_valuehelp(  is_message_key = ls_message_key ).
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    io_response->set_busi_data( it_busi_data = lt_keyfields_valuehelp ).
    io_response->set_count( iv_count = lines( lt_keyfields_valuehelp ) ).
    io_response->set_is_done( is_todo_list = VALUE #( filter = abap_true ) ).
  ENDMETHOD.


  METHOD read_list_keyfield_valueset.
    DATA:
      ls_message_key     TYPE /aif/s_message_key,
      lt_keyfields_value TYPE /aif/tt_keyfields_value.
*   get key from filter properties
    ls_message_key = parse_message_key( io_request ).
    TRY.
*     Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_message_key-ns
                   iv_ifname     = ls_message_key-ifname
                   iv_ifversion  = ls_message_key-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_message_key-ns
                                                                                              iv_ifname    = ls_message_key-ifname
                                                                                              iv_ifversion = ls_message_key-ifver ).
          ENDIF.
          lt_keyfields_value = mo_selection_engine->/aif/if_data_selection~get_keyfields_value(  is_message_key = ls_message_key ).
        ENDIF.
      CATCH /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
*   Set response data
    io_response->set_busi_data( it_busi_data = lt_keyfields_value ).
    io_response->set_is_done( is_todo_list = VALUE #( filter = abap_true ) ).
  ENDMETHOD.


  METHOD read_list_messagelogset.

    DATA:
      lt_messagelog    TYPE /aif/tt_msg_log,
      lv_msgtype       TYPE symsgty,
      ls_interface_key TYPE /aif/ifkeys,
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      ls_done_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
      lv_skip          TYPE i VALUE 0,
      lv_top           TYPE i VALUE 0,
      lv_count         TYPE i,
      ls_range         TYPE /iwbep/s_cod_select_option,
      ls_filter_range  TYPE ty_msglog_filter_range,
      lv_msgguid       TYPE guid_32.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    "$SKIP / $TOP Handling
    IF ls_todo_list-process-skip = abap_true.
      ls_done_list-skip = abap_true.
      io_request->get_skip( IMPORTING ev_skip = lv_skip ).
    ENDIF.
    IF ls_todo_list-process-top = abap_true.
      ls_done_list-top = abap_true.
      io_request->get_top( IMPORTING ev_top = lv_top ).
    ENDIF.

    "$FILTER Handling
    IF ls_todo_list-process-filter = abap_true.
      ls_done_list-filter = abap_true.

      io_request->get_filter_props_with_ranges(
        IMPORTING
          et_property_path = DATA(lt_prop_path)    " List of properties / property paths
      ).
      LOOP AT lt_prop_path ASSIGNING FIELD-SYMBOL(<lv_prop_path>).
        CASE <lv_prop_path>.
          WHEN 'NS'.
            "get namespace
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = 'NS'
              IMPORTING
                et_range         = ls_filter_range-ns ).
            LOOP AT ls_filter_range-ns INTO ls_range.
              IF ls_range-sign = 'I' AND ls_range-option = 'EQ'.
                ls_interface_key-ns = ls_range-low.
                EXIT.
              ENDIF.
            ENDLOOP.
          WHEN 'IFNAME'.
            "get interface name
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = 'IFNAME'
              IMPORTING
                et_range         = ls_filter_range-ifname ).
            LOOP AT ls_filter_range-ifname INTO ls_range.
              IF ls_range-sign = 'I' AND ls_range-option = 'EQ'.
                ls_interface_key-ifname = ls_range-low.
                EXIT.
              ENDIF.
            ENDLOOP.
          WHEN 'IFVER'.
            "get interface version
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = 'IFVER'
              IMPORTING
                et_range         = ls_filter_range-ifver ).
            LOOP AT ls_filter_range-ifver INTO ls_range.
              IF ls_range-sign = 'I' AND ls_range-option = 'EQ'.
                ls_interface_key-ifver = ls_range-low.
                EXIT.
              ENDIF.
            ENDLOOP.
          WHEN 'MSGGUID'.
            "get MessageGUID
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = 'MSGGUID'
              IMPORTING
                et_range         = ls_filter_range-msgguid ).
            LOOP AT ls_filter_range-msgguid INTO ls_range.
              IF ls_range-sign = 'I' AND ls_range-option = 'EQ'.
                lv_msgguid = ls_range-low.
                EXIT.
              ENDIF.
            ENDLOOP.
          WHEN 'MSGTY'.
            "get MsgType
            io_request->get_filter_ranges_for_prop(
              EXPORTING
                iv_property_path = 'MSGTY'
              IMPORTING
                et_range         = ls_filter_range-msgty ).
            LOOP AT ls_filter_range-msgty INTO ls_range.
              IF ls_range-sign = 'I' AND ls_range-option = 'EQ'.
                lv_msgtype = ls_range-low.
                EXIT.
              ENDIF.
            ENDLOOP.
          WHEN OTHERS.
        ENDCASE.
      ENDLOOP.
    ENDIF.

    "interface key + messageGUID must be provided
    CLEAR: lt_messagelog, lv_count.
    IF ls_interface_key-ns IS INITIAL OR
       ls_interface_key-ifname IS INITIAL OR
       ls_interface_key-ifver IS INITIAL OR
       lv_msgguid IS INITIAL.
    ELSE.
      IF ls_interface_key-ns = '/TECH' AND
        ls_interface_key-ifname = 'WS_TECH' AND
        ls_interface_key-ifver <> '1'.
        ls_interface_key-ifver = '1'.
      ENDIF.
*    Analyze (71) (means displaying application log messages)
      TRY.
          IF /aif/cl_authchk_controller=>get_instance(
                     iv_ns         = ls_interface_key-ns
                     iv_ifname     = ls_interface_key-ifname
                     iv_ifversion  = ls_interface_key-ifver
                     iv_actvt      = /aif/if_globals=>gc_eh_actvts-app_log
                     iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
            IF mo_log_reader IS NOT BOUND.
              CREATE OBJECT mo_log_reader TYPE /aif/cl_msg_log_reader.
            ENDIF.
            IF ls_todo_list-return-busi_data = abap_true.
              mo_log_reader->read_log(
                EXPORTING
                  is_interface_key  = ls_interface_key
                  iv_msgguid        = lv_msgguid
                  iv_filter_msgtype = lv_msgtype
                  is_page           = VALUE #( skip = lv_skip top = lv_top )
                IMPORTING
                  ev_count          = lv_count
                  et_msg_log        = lt_messagelog ).

            ELSE.
              mo_log_reader->read_log(
                EXPORTING
                  is_interface_key  = ls_interface_key
                  iv_msgguid        = lv_msgguid
                  iv_filter_msgtype = lv_msgtype
                  is_page           = VALUE #( skip = lv_skip top = lv_top )
                IMPORTING
                  ev_count          = lv_count ).
            ENDIF.
          ENDIF.
        CATCH /aif/cx_error_handling_general INTO DATA(lo_error).
          RAISE EXCEPTION TYPE /aif/cx_gateway
            EXPORTING
              textid             = /aif/cx_gateway=>no_authorization
              exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
              http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-forbidden.
      ENDTRY.
    ENDIF.

    IF ls_todo_list-return-busi_data = abap_true.
      io_response->set_busi_data( it_busi_data = lt_messagelog ).
    ENDIF.

    IF ls_todo_list-return-count = abap_true.
      io_response->set_count( lv_count ).
    ENDIF.

    " Report list of request options handled by application
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD read_tree_list_cfunc_paras.

    DATA: ls_todo_list        TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_list,
          ls_done_list        TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
          lt_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_custom_function  TYPE /aif/s_cfunc_with_para,
          lt_custom_functions TYPE TABLE OF /aif/s_cfunc_with_para,
          ls_range            TYPE /iwbep/s_cod_select_option,
          ls_filter_range     TYPE ty_cfunc_filter_range,
          lr_data             TYPE REF TO data,
          lt_data             TYPE /aif/tt_cfunc_with_para.

    FIELD-SYMBOLS <lt_data>  TYPE STANDARD TABLE.
    TRY.
        CLEAR ls_filter_range.
        io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
        IF ls_todo_list-process-filter = abap_true.
          ls_done_list-filter = abap_true.
          io_request->get_filter_props_with_ranges(
            IMPORTING
              et_property_path  = lt_property_path ).
          LOOP AT lt_property_path INTO DATA(lv_property_path).
            CASE lv_property_path.
              WHEN 'NS'.
                io_request->get_filter_ranges_for_prop(
                  EXPORTING
                    iv_property_path = lv_property_path
                  IMPORTING
                    et_range = ls_filter_range-ns ).
                READ TABLE ls_filter_range-ns INTO ls_range WITH KEY
                                                       sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                     option  = /aif/if_globals=>gc_range_option-eq.
                IF sy-subrc = 0.
                  ls_custom_function-ns = ls_range-low.
                ENDIF.
              WHEN 'IFNAME'.
                io_request->get_filter_ranges_for_prop(
                  EXPORTING
                    iv_property_path = lv_property_path
                  IMPORTING
                    et_range = ls_filter_range-ifname ).
                READ TABLE ls_filter_range-ifname INTO ls_range WITH KEY
                                                           sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                         option  = /aif/if_globals=>gc_range_option-eq.
                IF sy-subrc = 0.
                  ls_custom_function-ifname = ls_range-low.
                ENDIF.
              WHEN 'IFVER'.
                io_request->get_filter_ranges_for_prop(
                  EXPORTING
                    iv_property_path = lv_property_path
                  IMPORTING
                    et_range = ls_filter_range-ifver ).
                READ TABLE ls_filter_range-ifver INTO ls_range WITH KEY
                                                          sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                        option  = /aif/if_globals=>gc_range_option-eq.
                IF sy-subrc = 0.
                  ls_custom_function-ifver = ls_range-low.
                ENDIF.
              WHEN 'MSGID'.
                io_request->get_filter_ranges_for_prop(
                  EXPORTING
                    iv_property_path = lv_property_path
                  IMPORTING
                    et_range = ls_filter_range-msgid ).
                READ TABLE ls_filter_range-msgid INTO ls_range WITH KEY
                                                          sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                        option  = /aif/if_globals=>gc_range_option-eq.
                IF sy-subrc = 0.
                  ls_custom_function-msgid = ls_range-low.
                ENDIF.
              WHEN 'MSGNO'.
                io_request->get_filter_ranges_for_prop(
                  EXPORTING
                    iv_property_path = lv_property_path
                  IMPORTING
                    et_range = ls_filter_range-msgno ).
                READ TABLE ls_filter_range-msgno INTO ls_range WITH KEY
                                                          sign  = /aif/if_globals=>gc_range_sign-inclusive
                                                        option  = /aif/if_globals=>gc_range_option-eq.
                IF sy-subrc = 0.
                  ls_custom_function-msgno = ls_range-low.
                ENDIF.
              WHEN OTHERS.
                "do nothing
            ENDCASE.
          ENDLOOP.
        ENDIF.

        IF mo_custom_data IS INITIAL.
          mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
        ENDIF.
        mo_custom_data->read_tree_list_cfun(  EXPORTING iv_ns     = ls_custom_function-ns
                                                        iv_ifname = ls_custom_function-ifname
                                                        iv_ifver  = ls_custom_function-ifver
                                                        iv_msgid  = ls_custom_function-msgid
                                                        iv_msgno  = ls_custom_function-msgno
                                              IMPORTING et_data = lt_data ) .
        DATA(lo_expand) = io_request->get_expand_tree_for_nav_prop( /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_cfunc_para ).
        io_response->set_busi_data(
      it_busi_data = lt_data
      iv_expand_expression = CONV #( /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_cfunc_para ) ).
        lo_expand->set_is_done( VALUE #( filter = abap_true ) ).
        io_response->set_is_done( VALUE #( filter = abap_true ) ).
      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found INTO DATA(lo_error).
        RAISE EXCEPTION TYPE /aif/cx_gateway EXPORTING previous = lo_error.
    ENDTRY.

  ENDMETHOD.


  METHOD read_tree_list_keyfields.

    CONSTANTS:
    lc_fields TYPE string VALUE 'PARA_LIST'.
    DATA:
      lt_ranges TYPE RANGE OF string,
      ls_ifkeys TYPE /aif/ifkeys.
    DATA:
      ls_message_key          TYPE /aif/s_message_key,
      lt_keyfields_definition TYPE TABLE OF /aif/s_keyfields.

    TRY.
        io_request->get_filter_props_with_ranges(
          IMPORTING
            et_property_path  = DATA(lt_property_path) ).
        LOOP AT lt_property_path INTO DATA(lv_property_path).
          CASE lv_property_path.
            WHEN 'NS'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ns = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFNAME'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                   IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifname = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFVER'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                    IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifver = lt_ranges[ 1 ]-low.
              ENDIF.

            WHEN OTHERS.
              "only support filter by a single message
          ENDCASE.
        ENDLOOP.

        "get structures
        IF ls_ifkeys IS INITIAL .
*     do not support
          RETURN.
        ENDIF.
        DATA(lo_expand) = io_request->get_expand_tree_for_nav_prop( CONV #( lc_fields ) ).


*   get key from filter properties


*     Execute (16) (means selecting from index tables)
        IF /aif/cl_authchk_controller=>get_instance(
                   iv_ns         = ls_ifkeys-ns
                   iv_ifname     = ls_ifkeys-ifname
                   iv_ifversion  = ls_ifkeys-ifver
                   iv_actvt      = /aif/if_globals=>gc_eh_actvts-select
                   iv_check_type = /aif/if_globals=>gc_eh_auth_check_type-id )->check_authority( ) = abap_true.
          IF mo_selection_engine IS INITIAL.
            mo_selection_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_ifkeys-ns
                                                                                              iv_ifname    = ls_ifkeys-ifname
                                                                                              iv_ifversion = ls_ifkeys-ifver ).
          ENDIF.
          MOVE-CORRESPONDING ls_ifkeys TO ls_message_key.
          lt_keyfields_definition = mo_selection_engine->/aif/if_data_selection~get_keyfields_definition(  is_message_key = ls_message_key ).
        ENDIF.

        io_response->set_busi_data(
      it_busi_data = lt_keyfields_definition
      iv_expand_expression = lc_fields ).
        lo_expand->set_is_done( VALUE #( filter = abap_true ) ).
        io_response->set_is_done( VALUE #( filter = abap_true ) ).
      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found INTO DATA(lo_error).
        RAISE EXCEPTION TYPE /iwbep/cx_gateway EXPORTING previous = lo_error.
    ENDTRY.

  ENDMETHOD.


  METHOD read_tree_list_payload_value.

    CONSTANTS:
      lc_fields TYPE string VALUE 'FIELDS'.

    DATA:
      lt_ranges            TYPE RANGE OF string,
      ls_ifkeys            TYPE /aif/ifkeys,
      lv_msgguid           TYPE guid_32,
      lt_msgguid           TYPE TABLE OF guid_32,
      lv_path              TYPE string,
      lv_tabix_string      TYPE string,
      lv_flag_run_in_mass  TYPE abap_bool,
      lt_payload_value     TYPE /aif/tt_payload_structure,
      lt_payload_value_all TYPE /aif/tt_payload_structure.

    FIELD-SYMBOLS:
       <ls_payload_value>    TYPE LINE OF /aif/tt_payload_structure.

*    TRY.
        "Get request parameters
        io_request->get_filter_props_with_ranges(
          IMPORTING
            et_property_path = DATA(lt_property_path) ).
        LOOP AT lt_property_path INTO DATA(lv_property_path).
          CASE lv_property_path.
            WHEN 'NS'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range         = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ns = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFNAME'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range         = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifname = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFVER'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range         = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifver = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'MSGGUID'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range         = lt_ranges ).
              LOOP AT lt_ranges INTO DATA(ls_range).
                lv_msgguid = ls_range-low.
                APPEND lv_msgguid TO lt_msgguid.
              ENDLOOP.
            WHEN 'PATH'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range         = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                lv_path = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN OTHERS.
              "only support filter by a single message
          ENDCASE.
        ENDLOOP.

        "Check interface key, message id and path
        IF ls_ifkeys IS INITIAL OR lv_msgguid IS INITIAL.
*         Do not support
          RETURN.
        ENDIF.
        IF lines( lt_msgguid ) > 1.
          lv_flag_run_in_mass = abap_true.
        ELSE.
          lv_flag_run_in_mass = abap_false.
        ENDIF.
        "Get payload value and response the data
        DATA(lo_expand) = io_request->get_expand_tree_for_nav_prop( CONV #( lc_fields ) ).
        LOOP AT lt_msgguid INTO lv_msgguid.
          lv_tabix_string = sy-tabix && ':'.
          TRY.
              lt_payload_value = mo_payload_handle->get_payload_via_path( iv_msgguid = lv_msgguid is_ifkeys = ls_ifkeys iv_path = lv_path ).
              LOOP AT lt_payload_value ASSIGNING <ls_payload_value>.
                LOOP AT <ls_payload_value>-fields ASSIGNING FIELD-SYMBOL(<ls_field_value>).
                  "Replace fixed line number with current line number in the message guid table
                  REPLACE FIRST OCCURRENCE OF '1:' IN <ls_field_value>-line_number WITH lv_tabix_string .
                ENDLOOP.
              ENDLOOP.
              APPEND LINES OF lt_payload_value TO lt_payload_value_all.
            CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found INTO DATA(lo_error).
              IF lv_flag_run_in_mass = abap_true.
                "Just ignore
              ELSE.
                DATA lv_entity TYPE string.
                lv_entity = gc_entity_set_names-edm-payload_structure.
                RAISE EXCEPTION TYPE /aif/cx_gateway
                  EXPORTING
                    textid      = /aif/cx_gateway=>retrieve_fail
                    is_for_user = abap_true
                    entity_set  = lv_entity.
              ENDIF.
          ENDTRY.

        ENDLOOP.

        io_response->set_busi_data(
          it_busi_data         = lt_payload_value_all
          iv_expand_expression = lc_fields ).
        lo_expand->set_is_done( VALUE #( filter = abap_true ) ).
        io_response->set_is_done( VALUE #( filter = abap_true ) ).

*      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found INTO DATA(lo_error).
*        DATA lv_entity TYPE string.
*        lv_entity = gc_entity_set_names-edm-payload_structure.
*        RAISE EXCEPTION TYPE /aif/cx_gateway
*          EXPORTING
*            textid      = /aif/cx_gateway=>retrieve_fail
*            is_for_user = abap_true
*            entity_set  = lv_entity.
*    ENDTRY.

  ENDMETHOD.


  METHOD read_tree_list_structure_info.

    CONSTANTS:
    lc_fields TYPE string VALUE 'FIELDS'.
    DATA:
      lt_ranges  TYPE RANGE OF string,
      ls_ifkeys  TYPE /aif/ifkeys,
      lv_msgguid TYPE guid_32.

    TRY.
        io_request->get_filter_props_with_ranges(
          IMPORTING
            et_property_path  = DATA(lt_property_path) ).
        LOOP AT lt_property_path INTO DATA(lv_property_path).
          CASE lv_property_path.
            WHEN 'NS'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ns = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFNAME'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                   IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifname = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'IFVER'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                    IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                ls_ifkeys-ifver = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN 'MSGGUID'.
              io_request->get_filter_ranges_for_prop(
                EXPORTING
                  iv_property_path = lv_property_path
                  IMPORTING
                  et_range = lt_ranges ).
              IF lines( lt_ranges ) = 1.
                lv_msgguid = lt_ranges[ 1 ]-low.
              ENDIF.
            WHEN OTHERS.
              "only support filter by a single message
          ENDCASE.
        ENDLOOP.

        "get structures
        IF ls_ifkeys IS INITIAL OR lv_msgguid IS INITIAL.
*     do not support
          RETURN.
        ENDIF.
        DATA(lo_expand) = io_request->get_expand_tree_for_nav_prop( CONV #( lc_fields ) ).
        DATA(lt_structure_infos) = mo_payload_handle->get_all_structures_info( iv_msgguid = lv_msgguid is_ifkeys = ls_ifkeys ).
        io_response->set_busi_data(
          it_busi_data = lt_structure_infos
          iv_expand_expression = lc_fields ).
        lo_expand->set_is_done( VALUE #( filter = abap_true ) ).
        io_response->set_is_done( VALUE #( filter = abap_true ) ).

      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found INTO DATA(lo_error).
        RAISE EXCEPTION TYPE /iwbep/cx_gateway EXPORTING previous = lo_error.
    ENDTRY.

  ENDMETHOD.


  METHOD save_and_restart.

    DATA lt_message_fail_to_save TYPE /aif/msg_interface_tt.
    DATA: lo_exception TYPE REF TO /aif/cx_gateway,
          lv_new_msgguid  TYPE guid_32.

    mo_payload_handle->save_whole_payload( IMPORTING et_message_fail_to_save = lt_message_fail_to_save eo_exception = lo_exception ).

    LOOP AT lt_message_fail_to_save ASSIGNING FIELD-SYMBOL(<ls_message_fail_to_save>).
      DELETE mt_message_require_restart WHERE ns = <ls_message_fail_to_save>-ns AND ifname = <ls_message_fail_to_save>-ifname AND ifver = <ls_message_fail_to_save>-ifver AND msgguid = <ls_message_fail_to_save>-msgguid.
    ENDLOOP.
    LOOP AT mt_message_require_restart ASSIGNING FIELD-SYMBOL(<ls_message_require_restart>).
      message_process(
        EXPORTING
          iv_msgguid     = <ls_message_require_restart>-msgguid
          iv_ns          = <ls_message_require_restart>-ns
          iv_ifname      = <ls_message_require_restart>-ifname
          iv_ifver       = <ls_message_require_restart>-ifver
          iv_action_name = 'MESSAGE_RESTART'
        IMPORTING
          ev_new_msgguid = lv_new_msgguid
      ).
      IF lv_new_msgguid IS NOT INITIAL AND lv_new_msgguid <> <ls_message_require_restart>-msgguid.
        <ls_message_require_restart>-msgguid_new = lv_new_msgguid.
      ENDIF.
    ENDLOOP.

    IF lo_exception IS BOUND.
      RAISE EXCEPTION lo_exception.
    ENDIF.

  ENDMETHOD.


  METHOD update_entity_customfunction.
    DATA ls_todo_list       TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_list.
    DATA ls_done_list       TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_process_list.
    DATA ls_cfunc_requ      TYPE /aif/s_custom_function.
    DATA ls_cfunc_resp      TYPE /aif/s_custom_function.
    DATA ls_cfunc_key       TYPE ty_s_customfunction_key.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

    CALL METHOD io_request->get_key_data
      IMPORTING
        es_key_data = ls_cfunc_key.
    ls_done_list-key_data = abap_true. "key data processed

    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_cfunc_requ.

* Update
*    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ls_cfunc_resp = mo_custom_data->update_custom_function( is_custom_function = ls_cfunc_requ ).


    io_response->set_busi_data( ls_cfunc_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD update_entity_customhint.
    DATA ls_hint_key        TYPE        ty_s_customhint_key.
    DATA ls_hint_requ       TYPE        /aif/s_custom_hint.
    DATA ls_hint_resp       TYPE        /aif/s_custom_hint.
    DATA ls_todo_list       TYPE        /iwbep/if_v4_requ_basic_update=>ty_s_todo_list.
    DATA ls_done_list       TYPE        /iwbep/if_v4_requ_basic_update=>ty_s_todo_process_list.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

    CALL METHOD io_request->get_key_data
      IMPORTING
        es_key_data = ls_hint_key.
    ls_done_list-key_data = abap_true. "key data processed

    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_hint_requ.

* Update
*    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ls_hint_resp = mo_custom_data->update_custom_hint( is_custom_hint = ls_hint_requ ).

    io_response->set_busi_data( ls_hint_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "partial business data processed
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD update_entity_customlink.

    DATA:
      ls_clink_key  TYPE ty_s_customlink_key,
      ls_clink_requ TYPE /aif/s_custom_link,
      ls_clink_resp TYPE /aif/s_custom_link,
      ls_todo_list  TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_list,
      ls_done_list  TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_process_list.

    " Get the request options the application should/must handle
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
    io_request->get_key_data( IMPORTING es_key_data = ls_clink_key ).
    ls_done_list-key_data = abap_true. "key data processed
    io_request->get_busi_data( IMPORTING es_busi_data = ls_clink_requ ).
    ls_done_list-busi_data = abap_true. "business data processed
    ls_done_list-partial_busi_data = abap_true. "Partial busi data processed

    " Update
    ls_clink_resp = mo_custom_data->update_custom_link( is_custom_link = ls_clink_requ ).

    io_response->set_busi_data( ls_clink_resp ).

    " Report list of request options handled by application
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD update_entity_customtext.
    DATA ls_ctext_key   TYPE ty_s_customtext_key.
    DATA ls_ctext_requ  TYPE /aif/s_custom_text.
    DATA ls_ctext_resp  TYPE /aif/s_custom_text.
    DATA ls_todo_list   TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_list.
    DATA ls_done_list   TYPE /iwbep/if_v4_requ_basic_update=>ty_s_todo_process_list.

* Get the request options the application should/must handle
    CALL METHOD io_request->get_todos
      IMPORTING
        es_todo_list = ls_todo_list.

    CALL METHOD io_request->get_key_data
      IMPORTING
        es_key_data = ls_ctext_key.
    ls_done_list-key_data = abap_true. "key data processed

    CALL METHOD io_request->get_busi_data
      IMPORTING
        es_busi_data = ls_ctext_requ.

* Update
*    mo_custom_data = /aif/cl_custom_data_handler=>get_instance( ).
    ls_ctext_resp = mo_custom_data->update_custom_text( is_custom_text = ls_ctext_requ ).

* Return data to the response
    io_response->set_busi_data( ls_ctext_resp ).

* Report list of request options handled by application
    ls_done_list-busi_data = ls_todo_list-process-busi_data. "business data processed
    ls_done_list-partial_busi_data = ls_todo_list-process-partial_busi_data. "partial business data processed
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.
ENDCLASS.