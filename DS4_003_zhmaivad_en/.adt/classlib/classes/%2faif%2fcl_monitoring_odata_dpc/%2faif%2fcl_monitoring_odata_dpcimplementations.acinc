*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations


*CLASS lcl_mass_proc_db DEFINITION.
*  PUBLIC SECTION.
*    INTERFACES: /aif/if_mass_proc_db,
*      /aif/if_monitoring_odata_glbl.
*    CLASS-METHODS:
*      get_instance RETURNING VALUE(rr_mproc_db) TYPE REF TO /aif/if_mass_proc_db,
*      set_instance IMPORTING ir_mprc_db TYPE REF TO /aif/if_mass_proc_db.
*    ALIASES:
*      get_ifkey FOR /aif/if_mass_proc_db~get_ifkey,
*      insert_ifkey FOR /aif/if_mass_proc_db~insert_ifkey,
*      delete_ifkey FOR /aif/if_mass_proc_db~delete_ifkey,
*      get_mguid_count FOR /aif/if_mass_proc_db~get_mguid_count,
*      get_mguid FOR /aif/if_mass_proc_db~get_mguid,
*      get_mguid_offset FOR /aif/if_mass_proc_db~get_mguid_offset,
*      insert_mguid FOR /aif/if_mass_proc_db~insert_mguid,
*      insert_mguid_dynamic FOR /aif/if_mass_proc_db~insert_mguid_dynamic,
*      delete_mguid FOR /aif/if_mass_proc_db~delete_mguid,
*      delete_mguid_range FOR /aif/if_mass_proc_db~delete_mguid_range,
*      c_connection FOR /aif/if_monitoring_odata_glbl~gc_connection.
*
*  PRIVATE SECTION.
*    CLASS-DATA: sr_mprc_db_if  TYPE REF TO /aif/if_mass_proc_db,
*                sr_mprc_db_obj TYPE REF TO lcl_mass_proc_db.
*ENDCLASS.
*
*CLASS lcl_mass_process_main DEFINITION.
*  PUBLIC SECTION.
*    INTERFACES: if_odq_queued_task,
*      /aif/if_monitoring_odata_glbl.
*    ALIASES c_connection FOR /aif/if_monitoring_odata_glbl~gc_connection.
*    METHODS constructor
*      IMPORTING
*        is_mass_action TYPE /aif/mproc_context_mainrun.
*  PROTECTED SECTION.
*    CONSTANTS mc_package_size TYPE i VALUE 5.
*    CONSTANTS mc_task_prefix TYPE char20 VALUE '/AIF_MASS_PROC_SUB_'.
*  PRIVATE SECTION.
*    DATA ms_mass_action TYPE /aif/mproc_context_mainrun.
*ENDCLASS.
*
*CLASS lcl_mass_process_sub DEFINITION INHERITING FROM cl_odq_tq_sub_task.
*  PUBLIC SECTION.
*    INTERFACES  /aif/if_monitoring_odata_glbl.
*    ALIASES c_connection FOR /aif/if_monitoring_odata_glbl~gc_connection.
*    METHODS constructor IMPORTING iv_task_prefix TYPE char20.
*  PROTECTED SECTION.
*    TYPES: BEGIN OF ty_msg_v1,
*             ns        TYPE /aif/ns,
*             ifname    TYPE /aif/ifname,
*             ifver     TYPE /aif/ifversion,
*             tree_node TYPE /aif/treenode_tt,
*           END OF ty_msg_v1.
*
*    METHODS:
*      execute       REDEFINITION,
*      is_last       REDEFINITION,
*      get_main_task REDEFINITION.
*
*    METHODS: proc_mes IMPORTING is_context TYPE /aif/mproc_context_subrun,
*      restart_mes IMPORTING ir_idx_data  TYPE REF TO data
*                            ir_engine    TYPE REF TO /aif/if_application_engine
*                            ir_ui_facade TYPE REF TO /aif/if_ui_facade
*                            is_finf      TYPE /aif/t_finf,
*      cancel_mes IMPORTING ir_idx_data  TYPE REF TO data
*                           ir_engine    TYPE REF TO /aif/if_application_engine
*                           ir_ui_facade TYPE REF TO /aif/if_ui_facade
*                           is_finf      TYPE /aif/t_finf.
*    DATA mv_task_prefix TYPE char20.
*  PRIVATE SECTION.
*
*ENDCLASS.
*
*CLASS lcl_mass_proc_db IMPLEMENTATION.
*  METHOD get_instance.
*    IF sr_mprc_db_if IS INITIAL.
*      sr_mprc_db_obj = NEW #( ).
*      sr_mprc_db_if ?= sr_mprc_db_obj.
*    ENDIF.
*    rr_mproc_db = sr_mprc_db_if.
*  ENDMETHOD.
*
*  METHOD set_instance.
*    sr_mprc_db_if = ir_mprc_db.
*  ENDMETHOD.
*
*  METHOD get_ifkey.
*    SELECT SINGLE * CONNECTION (c_connection) FROM /aif/mproc_ifkey
*             INTO @rs_ifkey
*             WHERE sid = @iv_sid.             "#EC CI_ALL_FIELDS_NEEDED
*  ENDMETHOD.
*
*  METHOD insert_ifkey.
*    INSERT /aif/mproc_ifkey CONNECTION (c_connection) FROM @is_ifkey.
*    rv_subrc = sy-subrc.
*    COMMIT CONNECTION (c_connection).
*  ENDMETHOD.
*
*  METHOD delete_ifkey.
*    DELETE FROM /aif/mproc_ifkey CONNECTION (c_connection)
*                        WHERE sid = @iv_sid.
*    rv_subrc = sy-subrc.
*  ENDMETHOD.
*
*  METHOD get_mguid_count.
*
*    SELECT COUNT(*) CONNECTION (c_connection) FROM /aif/mproc_mguid
*            INTO @rv_count
*            WHERE sid = @iv_sid.
*  ENDMETHOD.
*
*  METHOD get_mguid.
*    SELECT * CONNECTION (c_connection) FROM /aif/mproc_mguid
*             INTO TABLE @rt_mguid
*             WHERE sid = @iv_sid."#EC CI_ALL_FIELDS_NEEDED
*  ENDMETHOD.
*
*  METHOD get_mguid_offset.
*    SELECT msgguid  FROM /aif/mproc_mguid
*         WHERE sid = @iv_sid
*         ORDER BY msgguid
*          INTO TABLE @rt_mguid
*          CONNECTION (c_connection)
*         OFFSET @iv_offset
*         UP TO @iv_count ROWS.
*
*  ENDMETHOD.
*
*  METHOD insert_mguid.
*    INSERT /aif/mproc_mguid CONNECTION (c_connection) FROM TABLE it_mguid.
*    rv_subrc = sy-subrc.
*  ENDMETHOD.
*
*  METHOD insert_mguid_dynamic.
*    FIELD-SYMBOLS <ls_keyfields_range> TYPE any.
*    ASSIGN ir_keyfields_range->* TO <ls_keyfields_range>.
*
*    DATA(ls_filter_range) = is_filter_range.
*    DATA(lv_from) = iv_from.
*    DATA(lv_dfrom) = iv_dfrom.
*    DATA(lv_tfrom) =  iv_tfrom.
*    DATA(lv_dto) = iv_dto.
*    DATA(lv_tto) =  iv_tto.
*    TRY.
*        INSERT /aif/mproc_mguid CONNECTION (c_connection) FROM (
*         SELECT @iv_sid AS sid, index_table~msgguid FROM (lv_from)
*           WHERE index_table~ns = @is_ifkey-ns
*           AND index_table~ifname = @is_ifkey-ifname
*           AND index_table~ifver = @is_ifkey-ifver
*           AND index_table~msgguid IN @ls_filter_range-msgguid
*           AND (iv_status_where)
*           AND (iv_date_where)
*           AND (iv_keys_where)
*           ).
*      CATCH cx_sy_open_sql_db
*           cx_sy_dynamic_osql_syntax
*           cx_sy_dynamic_osql_semantics .
*        rv_subrc = sy-subcs.
*    ENDTRY.
*    rv_subrc = sy-subcs.
*  ENDMETHOD.
*
*  METHOD delete_mguid.
*    DELETE FROM /aif/mproc_mguid CONNECTION (c_connection)
*                          WHERE sid = @iv_sid.
*    rv_subrc = sy-subrc.
*  ENDMETHOD.
*
*  METHOD delete_mguid_range.
*    DELETE FROM /aif/mproc_mguid CONNECTION (c_connection)
*                          WHERE sid = @iv_sid
*                          AND   msgguid IN @it_msgguid_range.
*    rv_subrc = sy-subrc.
*  ENDMETHOD.
*ENDCLASS.
*
*CLASS lcl_mass_process_main IMPLEMENTATION.
*  METHOD constructor.
*    ms_mass_action = is_mass_action.
*  ENDMETHOD.
*
*  METHOD if_odq_queued_task~execute.
*
*    DATA:
*      lv_index       TYPE int4 VALUE 1,
*      lv_stop        TYPE int4,
*      ls_sub_context TYPE /aif/mproc_context_subrun,
*      l_n10          TYPE n LENGTH 10,
*      lv_extid       TYPE string,
*      lv_data        TYPE xstring.
*
*    DATA(lr_mproc_db) = lcl_mass_proc_db=>get_instance( ).
*    DATA(ls_mes_key_tbl) = lr_mproc_db->get_ifkey( ms_mass_action-sid ).
*    DATA(lv_count) = lr_mproc_db->get_mguid_count( ms_mass_action-sid ).
*    CHECK lv_count > 0.
*
*    ls_sub_context-sid = ms_mass_action-sid.
*    ls_sub_context-code = ms_mass_action-code.
*    ls_sub_context-content = ms_mass_action-content.
*    ls_sub_context-aifkeys = ls_mes_key_tbl-aifkeys.
*    ls_sub_context-msg_tbl = ls_mes_key_tbl-msg_tbl.
*    ls_sub_context-mesnum = mc_package_size.
*
*    DATA(lr_sub)     = NEW lcl_mass_process_sub( mc_task_prefix ).
*    DATA(lr_manager) = cl_odq_queued_task_manager=>get( ).
*    lv_stop =  round( val = lv_count / mc_package_size
*                                          dec = 0
*                                          mode = cl_abap_math=>round_up ).
*    WHILE lv_index <= lv_stop.
*      DATA(lv_end) = lv_index * mc_package_size.
*      DATA(lv_start) = lv_end - mc_package_size + 1.
*
*      ls_sub_context-sidx = lv_start.
*
*      ls_sub_context-eidx = SWITCH #( boolc( lv_end <= lv_count )
*                                     WHEN abap_true then lv_end
*                                     else lv_count ).
*
*      ls_sub_context-mesnum = ls_sub_context-eidx - ls_sub_context-sidx + 1.
*
*      l_n10 = lv_index .
*      lv_extid = mc_task_prefix && i_taskid && '_' && sy-datum && sy-uzeit && '_' && l_n10 .
*      IF lv_index = lv_stop.
*        lv_extid = mc_task_prefix && i_taskid && '_' && sy-datum && sy-uzeit && '_LAST'.
*      ENDIF.
*
*      DATA(l_taskid) = lr_manager->create_task(
*        EXPORTING
*          i_externalid           = lv_extid
*          ir_task                = lr_sub
*          i_user_dependent       = i_user_dependent ).
*
*      CALL TRANSFORMATION id SOURCE contex = ls_sub_context
*                             RESULT XML lv_data.
*      lr_manager->schedule_task( i_taskid = l_taskid
*                                 i_task_data = lv_data  ).
*
*      lv_index = lv_index + 1.
*    ENDWHILE.
*
*
*    c_status = if_odq_queued_task=>c_execution_status-running.
*
*  ENDMETHOD.
*  METHOD if_odq_queued_task~on_delete.
*    DATA(lr_manager) = cl_odq_queued_task_manager=>get( ).
*
*    DATA: l_pattern TYPE string.
*    l_pattern = mc_task_prefix && i_taskid && '_%'.
*
*    SELECT taskid FROM odqtaskqueue INTO TABLE @DATA(lt_sub) WHERE ( clientdep = @space OR client = @sy-mandt ) AND externalid LIKE @l_pattern.
*
*    LOOP AT lt_sub ASSIGNING FIELD-SYMBOL(<ls_sub>).
*      lr_manager->delete_task( <ls_sub>-taskid ).
*    ENDLOOP.
*
*  ENDMETHOD.
*
*  METHOD if_odq_queued_task~on_success.
*    DELETE FROM /aif/mproc_ifkey CONNECTION (c_connection)
*                            WHERE sid = @ms_mass_action-sid.
*    c_stop_further_execution = abap_true.
*    c_delete_if_stopped = abap_true.
*  ENDMETHOD.
*ENDCLASS.
*
*
*CLASS lcl_mass_process_sub IMPLEMENTATION.
*  METHOD constructor.
*    super->constructor( ).
*    mv_task_prefix = iv_task_prefix.
*  ENDMETHOD.
*  METHOD execute.
*    DATA ls_sub_context TYPE /aif/mproc_context_subrun.
*    LOOP AT it_task_data ASSIGNING FIELD-SYMBOL(<ls_task_data>).
*
*
*      CALL TRANSFORMATION id SOURCE XML <ls_task_data>-data
*                             RESULT contex = ls_sub_context.
*      proc_mes( ls_sub_context ).
*
*    ENDLOOP.
*  ENDMETHOD.
*  METHOD get_main_task.
*    DATA(l_extid) = cl_odq_queued_task_manager=>get( )->get_externalid( i_sub_taskid ).
*    DATA(l_len)   = strlen( mv_task_prefix ).
*    r_main_taskid = l_extid+l_len(32).
*  ENDMETHOD.
*  METHOD is_last.
*    DATA: l_pattern TYPE string.
*    l_pattern = mv_task_prefix && i_main_taskid && '_%'.
*    DATA(l_len)   = strlen( l_pattern ) - 1.
*
*    SELECT SINGLE run_tsn, status FROM odqtaskqueue INTO @DATA(ls_main)
*           WHERE taskid = @i_main_taskid.
*
*    SELECT externalid, taskid, status, last_run_tsn FROM odqtaskqueue INTO TABLE @DATA(lt_extid)
*           WHERE ( clientdep = @space OR client = @sy-mandt ) AND externalid LIKE @l_pattern
*           ORDER BY externalid.
*
*    DATA(l_found_last) = abap_false.
*    LOOP AT lt_extid ASSIGNING FIELD-SYMBOL(<ls_extid2>).
*      IF <ls_extid2>-taskid = i_sub_taskid.
*        cl_odq_queued_task_manager=>status( |Task { <ls_extid2>-externalid } finished with success (current)| ) ##NO_TEXT.
*      ELSE.
*        cl_odq_queued_task_manager=>status( |Task { <ls_extid2>-externalid }: { <ls_extid2>-status } / { <ls_extid2>-last_run_tsn }| ) ##NO_TEXT.
*      ENDIF.
*      IF contains( val = <ls_extid2>-externalid end = '_LAST' ).
*        l_found_last = abap_true.
*      ENDIF.
*    ENDLOOP.
*
*    IF l_found_last EQ abap_true.
*      cl_odq_queued_task_manager=>status( 'Found last task' ) ##NO_TEXT.
*      r_is_last = abap_true.
*      LOOP AT lt_extid ASSIGNING FIELD-SYMBOL(<ls_extid>)
*           WHERE taskid <> i_sub_taskid
*             AND last_run_tsn < ls_main-run_tsn.
*        IF cl_odq_queued_task_manager=>get( )->enqueue_task( i_taskid = <ls_extid>-taskid i_wait = abap_true ) = abap_true.
*          SELECT SINGLE last_run_tsn FROM odqtaskqueue INTO @DATA(l_last_run_tsn) WHERE taskid = @<ls_extid>-taskid.
*          IF sy-subrc = 0 AND l_last_run_tsn < ls_main-run_tsn.
*            r_is_last = abap_false.
*          ENDIF.
*          cl_odq_queued_task_manager=>get( )->dequeue_task( <ls_extid>-taskid ).
*        ELSE.
*          r_is_last = abap_false.
*        ENDIF.
*        IF r_is_last = abap_false.
*          cl_odq_queued_task_manager=>status( |Task { <ls_extid>-externalid } did not yet finish | ) ##NO_TEXT.
*          EXIT.
*        ENDIF.
*      ENDLOOP.
*    ELSE.
*      cl_odq_queued_task_manager=>status( 'No last task found' ) ##NO_TEXT.
*    ENDIF.
*
*    cl_odq_queued_task_manager=>status( |R_IS_LAST = { r_is_last }.| ) ##NO_TEXT.
*
*  ENDMETHOD.
*
*  METHOD proc_mes.
*
*    DATA: ls_if_msgs      TYPE /aif/if_msgguids_st,
*          lt_if_msgs      TYPE /aif/if_msgguids_tt,
*          lt_msg_range    TYPE /iwbep/t_cod_select_options,
*          lref_idx_data_f TYPE REF TO data.
*
*    FIELD-SYMBOLS  <ls_idx_tbl> TYPE table.
*
*    DATA(lr_db_finf) =  /aif/cl_db_access_finf=>get_instance( ).
*
*    TRY .
*        DATA(ls_finf) = lr_db_finf->read_single( iv_ns   = is_context-ns
*                                          iv_ifname    = is_context-ifname
*                                          iv_ifver     = is_context-ifver ).
*        DATA(lr_appl_engine) = /aif/cl_aif_engine_factory=>get_engine(
*                                           iv_ns        = is_context-ns
*                                           iv_ifname    = is_context-ifname
*                                           iv_ifversion = is_context-ifver ).
*      CATCH /aif/cx_error_handling_general
*            /aif/cx_aif_engine_not_found .
*        RETURN.
*    ENDTRY.
*
*    DATA(lr_ui_facade) = NEW /aif/cl_ui_facade_auto_repr( ).
*
*    DATA(lv_offset) = is_context-sidx - 1.
*    DATA(lr_mproc_db) = lcl_mass_proc_db=>get_instance( ).
*    ls_if_msgs-msgguid =  lr_mproc_db->get_mguid_offset( iv_sid = is_context-sid iv_offset = lv_offset iv_count = is_context-mesnum ).
*
*    ls_if_msgs-ns = is_context-ns.
*    ls_if_msgs-ifname = is_context-ifname.
*    ls_if_msgs-ifver = is_context-ifver.
*    APPEND ls_if_msgs TO lt_if_msgs.
*
*    /aif/cl_aif_global_tools=>check_auth_for_mass_process(
*         EXPORTING
*           iv_action = is_context-code
*         CHANGING
*           ct_if_msgs = lt_if_msgs ).
*
*    ls_if_msgs = lt_if_msgs[ 1 ].
*
*    lt_msg_range = VALUE #( FOR guid IN ls_if_msgs-msgguid
*                            ( sign = 'I' option = 'EQ' low = guid ) ).
*
*    TRY.
*        DATA(lv_idx_tbl) = cl_abap_dyn_prg=>check_table_name_str(
*                                  val      = is_context-msg_tbl
*                                  packages = '' ).
*
*        CREATE DATA lref_idx_data_f TYPE STANDARD TABLE OF (lv_idx_tbl).
*        ASSIGN lref_idx_data_f->* TO <ls_idx_tbl>.
*
*      CATCH cx_abap_not_a_table
*            cx_abap_not_in_package
*            cx_sy_create_data_error.
*        RETURN.
*    ENDTRY.
*
*    SELECT * FROM (lv_idx_tbl) INTO TABLE <ls_idx_tbl> WHERE msgguid IN lt_msg_range.
*
*    IF is_context-code = /aif/if_globals=>gc_eh_actioncode-restart.
*      restart_mes( ir_idx_data = lref_idx_data_f ir_engine = lr_appl_engine ir_ui_facade = lr_ui_facade is_finf = ls_finf ).
*    ELSEIF is_context-code = /aif/if_globals=>gc_eh_actioncode-cancel.
*      cancel_mes( ir_idx_data = lref_idx_data_f ir_engine = lr_appl_engine ir_ui_facade = lr_ui_facade is_finf = ls_finf ).
*    ENDIF.
*
*    lr_mproc_db->delete_mguid_range( iv_sid = is_context-sid it_msgguid_range = lt_msg_range ).
*  ENDMETHOD.
*
*  METHOD restart_mes.
*    DATA:
*      ls_tree_data TYPE /aif/data_row_v_1_st,
*      ls_msg_v1    TYPE ty_msg_v1,
*      lv_counter   TYPE i VALUE 1,
*      lt_data1     TYPE /aif/treenode_tt,
*      lv_processed TYPE i.
*    FIELD-SYMBOLS: <ls_idx_entry> TYPE any,
*                   <ls_idx_tbl>   TYPE table.
*
*    DATA(lv_confirm_mode) = /aif/if_globals=>gc_confirm_modes-once.
*
*    asgn_aifkeys is_finf ls_msg_v1 ls_tree_data.
*    ASSIGN ir_idx_data->* TO <ls_idx_tbl>.
*    LOOP AT <ls_idx_tbl> ASSIGNING <ls_idx_entry>.
*      ASSIGN COMPONENT 'MSGGUID' OF STRUCTURE <ls_idx_entry> TO FIELD-SYMBOL(<fs_msgguid>).
*      ls_tree_data-msgguid     = <fs_msgguid>.
*      ls_tree_data-data_row    = REF #( <ls_idx_entry> ).
*      ls_msg_v1-tree_node = VALUE #( ( VALUE #( msgguid = <fs_msgguid> data_row = REF #( ls_tree_data ) ) ) ).
*
*      TRY.
*          ir_engine->restart(
*            EXPORTING
*              is_msg_v1           = ls_msg_v1
*              is_finf             = is_finf
*              iv_total_msgs       = lv_counter
*              ir_ui_facade        = ir_ui_facade
*              iv_reset_msg_count   = abap_true
**          IMPORTING
**            et_return           = et_return
*            CHANGING
*             cv_confirm_mode     = lv_confirm_mode
*              ct_treenodes        = lt_data1
*              cv_processed_msgs   = lv_processed
*  ).
*        CATCH /aif/cx_error_handling_general.
*      ENDTRY.
*    ENDLOOP.
*  ENDMETHOD.
*
*  METHOD cancel_mes.
*    DATA:
*      ls_tree_data TYPE /aif/data_row_v_1_st,
*      ls_msg_v1    TYPE ty_msg_v1,
*      lt_data1     TYPE /aif/treenode_tt.
*    FIELD-SYMBOLS: <ls_idx_entry> TYPE any,
*                   <ls_idx_tbl>   TYPE table.
*
*    DATA(lv_confirm_mode) = /aif/if_globals=>gc_confirm_modes-once.
*
*    asgn_aifkeys is_finf ls_msg_v1 ls_tree_data.
*    ASSIGN ir_idx_data->* TO <ls_idx_tbl>.
*    LOOP AT <ls_idx_tbl> ASSIGNING <ls_idx_entry>.
*      ASSIGN COMPONENT 'MSGGUID' OF STRUCTURE <ls_idx_entry> TO FIELD-SYMBOL(<fs_msgguid>).
*      ls_tree_data-msgguid     = <fs_msgguid>.
*      ls_tree_data-data_row    = REF #( <ls_idx_entry> ).
*      ls_msg_v1-tree_node = VALUE #( ( VALUE #( msgguid = <fs_msgguid> data_row = REF #( ls_tree_data ) ) ) ).
*
*      TRY.
*
*          ir_engine->cancel(
*            EXPORTING
*              is_msg_v1           = ls_msg_v1
*              is_finf             = is_finf
*              ir_ui_facade        = ir_ui_facade
**          IMPORTING
**            et_return           = et_return
*            CHANGING
*             cv_confirm_mode     = lv_confirm_mode
*              ct_treenodes        = lt_data1
*).
*        CATCH /aif/cx_error_handling_general.
*      ENDTRY.
*    ENDLOOP.
*
*  ENDMETHOD.
*ENDCLASS.