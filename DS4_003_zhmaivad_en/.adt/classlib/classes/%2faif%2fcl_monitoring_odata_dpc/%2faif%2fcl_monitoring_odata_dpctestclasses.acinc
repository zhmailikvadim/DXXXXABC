*"* use this source file for your ABAP unit test classes
CLASS ltcl_monitoring_odata_dpc DEFINITION DEFERRED.
CLASS ltcl_monitoring_odata_dpc2 DEFINITION DEFERRED.
CLASS /aif/cl_monitoring_odata_dpc DEFINITION LOCAL FRIENDS ltcl_monitoring_odata_dpc.
CLASS /aif/cl_monitoring_odata_dpc DEFINITION LOCAL FRIENDS ltcl_monitoring_odata_dpc2.
CLASS ltc_app_engince DEFINITION FOR TESTING FINAL.
  PUBLIC SECTION.
    INTERFACES /aif/if_application_engine PARTIALLY IMPLEMENTED.
ENDCLASS.
CLASS ltc_app_engince IMPLEMENTATION.
  METHOD /aif/if_application_engine~cancel.
    RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
  ENDMETHOD.
ENDCLASS.
CLASS ltcl_monitoring_odata_dpc DEFINITION FOR TESTING
  DURATION MEDIUM
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.

    CLASS-DATA:
      environment TYPE REF TO if_osql_test_environment.
    CLASS-METHODS:
      class_setup,
      class_teardown.

    DATA:
      mr_action_request    TYPE REF TO /iwbep/if_v4_requ_basic_action,
      mr_action_response   TYPE REF TO /iwbep/if_v4_resp_basic_action,
      mr_list_request      TYPE REF TO /iwbep/if_v4_requ_basic_list,
      mr_list_response     TYPE REF TO /iwbep/if_v4_resp_basic_list,
      mr_patch_request     TYPE REF TO /iwbep/if_v4_requ_intm_patch,
      mr_patch_response    TYPE REF TO /iwbep/if_v4_resp_intm_patch,
*      mr_create_request    TYPE REF TO /iwbep/if_v4_requ_basic_create,
*      mr_create_response   TYPE REF TO /iwbep/if_v4_resp_basic_create,
*      mr_update_request    TYPE REF TO /iwbep/if_v4_requ_basic_update,
*      mr_update_response   TYPE REF TO /iwbep/if_v4_resp_basic_update,
*      mr_delete_request    TYPE REF TO /iwbep/if_v4_requ_basic_delete,
*      mr_delete_response   TYPE REF TO /iwbep/if_v4_resp_basic_delete,
      mr_log_reader        TYPE REF TO /aif/if_msg_log_reader,
      mo_custom_data       TYPE REF TO /aif/if_custom_data_handler,
      mo_facade_overview   TYPE REF TO /aif/if_facade_overview,
*      mr_mproc_db          TYPE REF TO /aif/if_mass_proc_db,
*      mr_odq_manager       TYPE REF TO if_odq_queued_task_manager,
      mr_appl_engine       TYPE REF TO /aif/if_application_engine,
      mr_request_info_stub TYPE REF TO /iwbep/cl_v4_request_info_stub,
      mr_cut               TYPE REF TO /aif/cl_monitoring_odata_dpc.  "class under test


    METHODS:
      setup,
      teardown,
      get_objects FOR TESTING,
      execute_action FOR TESTING,
      execute_action_ext_01 FOR TESTING,
      execute_action_ext_02 FOR TESTING,
      execute_action_ext_03 FOR TESTING,
      read_entity FOR TESTING,
      read_entity_ext_01 FOR TESTING,
      read_entity_ext_02 FOR TESTING,
      read_entity_ext_03 FOR TESTING,
      read_entity_ext_04 FOR TESTING,
      read_entity_ext_05 FOR TESTING,
      read_entity_ext_06 FOR TESTING,
      read_entity_list FOR TESTING,
      read_entity_list_ext_01 FOR TESTING,
      read_entity_list_ext_02 FOR TESTING,
      read_entity_list_ext_03 FOR TESTING,
      read_entity_list_ext_04 FOR TESTING,
      read_entity_list_ext_05 FOR TESTING,
      read_entity_list_ext_06 FOR TESTING,
      read_entity_list_ext_07 FOR TESTING,
      read_entity_list_ext_08 FOR TESTING,
      read_entity_list_ext_09 FOR TESTING,
      process_batch_read FOR TESTING,
      process_batch_read_exception FOR TESTING,
      process_batch_change FOR TESTING,
      process_batch_change_exception FOR TESTING,
      process_batch_change_set FOR TESTING,
      process_batch_change_set_e FOR TESTING,
      execute_batch_operation FOR TESTING,
      process_change_set FOR TESTING,
      process_change_set_ext_01 FOR TESTING,
      process_change_set_ext_02 FOR TESTING,
      create_batch_packages     FOR TESTING,
      action_process_message FOR TESTING,
      action_process_message_ext_01 FOR TESTING,
      action_process_message_ext_02 FOR TESTING,
      action_process_message_ext_03 FOR TESTING,
      action_process_message_ext_04 FOR TESTING,
      action_process_message_ext_05 FOR TESTING,
      action_process_message_ext_06 FOR TESTING,
      action_process_message_ext_07 FOR TESTING,
      action_process_message_ext_08 FOR TESTING,
      action_mass_process_restart FOR TESTING,
      action_mass_process_cancel FOR TESTING,
      read_list_customlinkset FOR TESTING,
      read_list_messagelogset FOR TESTING,
      read_list_messagelogset_count FOR TESTING,
      read_list_messagelogset_ext_01 FOR TESTING,
      read_list_messagelogset_ext_02 FOR TESTING,
      read_list_messagelogset_ext_03 FOR TESTING,
      read_list_messagelogset_ext_04 FOR TESTING,
      read_entity_messagetext FOR TESTING,
      read_entity_messagetext_ext_01 FOR TESTING,
      read_entity_messagetext_ext_02 FOR TESTING,
      read_entity_messagetext_ext_03 FOR TESTING,
      read_entity_indextable FOR TESTING,
      read_entity_indextable_ext_01 FOR TESTING,
      read_list_indextablegenericset FOR TESTING,
      read_list_indextable_ext_01 FOR TESTING,
      read_list_indextable_ext_02 FOR TESTING,
      read_list_indextable_ext_03 FOR TESTING,
      read_list_indextable_ext_04 FOR TESTING,
      read_list_idxtbl_mass_process FOR TESTING,
      read_list_keyfieldsset FOR TESTING,
      read_list_keyfieldsset_ext_01 FOR TESTING,
      read_list_keyfield_valueset FOR TESTING,
      read_list_kfvalueset_ext_01 FOR TESTING,
      read_list_kfvaluehelp FOR TESTING,
      read_list_kfvaluehelp_ext_01 FOR TESTING,
      parse_message_key FOR TESTING,
      parse_message_key_ext_01 FOR TESTING,
      parse_message_key_ext_02 FOR TESTING,
      read_list_strs_info_tree_list FOR TESTING,
      read_tree_list_stru_info_ext_1 FOR TESTING,
      read_tree_list_stru_info_ext_2 FOR TESTING,
      read_tree_list_stru_info_ext_3 FOR TESTING,
      read_tree_list_stru_info_ext_4 FOR TESTING,
      read_list_payload_tree_list FOR TESTING,
      read_tree_list_payload_ext_1 FOR TESTING,
      read_tree_list_payload_ext_2 FOR TESTING,
      read_tree_list_payload_ext_3 FOR TESTING,
      read_tree_list_payload_ext_4 FOR TESTING,
      read_tree_list_payload_ext_5 FOR TESTING,
      read_tree_list_payload_ext_6 FOR TESTING,
      read_tree_list_keyfields FOR TESTING,
      read_tree_list_keyfields_2 FOR TESTING,
      read_tree_list_keyfields_3 FOR TESTING,
      read_list_chgvaluehelp FOR TESTING,
      read_list_chgvaluehelp_ext_01 FOR TESTING,
      read_list_cfunc FOR TESTING,
      read_list_cfunc_ext_1 FOR TESTING,
      read_list_cfunc_ext_2 FOR TESTING,
      read_list_chint FOR TESTING,
      read_list_chint_ext_1 FOR TESTING,
      read_list_chint_ext_2 FOR TESTING,
      read_list_ctext FOR TESTING,
      read_list_ctext_ext_1 FOR TESTING,
      read_list_ctext_ext_2 FOR TESTING,
      read_entity_cfunc FOR TESTING,
      read_entity_cfunc_ext_1 FOR TESTING,
      read_entity_chint FOR TESTING,
      read_entity_ctext FOR TESTING,
      read_entity_clink FOR TESTING,
      read_entity_validation FOR TESTING,
      patch_entity_changed_field FOR TESTING,
      patch_changed_field_error FOR TESTING,
      patch_entity_payload FOR TESTING,
      patch_entity_payload_undefine FOR TESTING,
      check_modification_conditions FOR TESTING,
      check_modification_conditiono FOR TESTING,
      read_list_ibnappidvaluehelp FOR TESTING,
      read_list_ibnappid_filter FOR TESTING,
      read_list_ibnappid_filter2 FOR TESTING,
      read_list_ibnappid_filter3 FOR TESTING,
      read_list_ibnappid_no_auth FOR TESTING,
      read_entity_list_ibnapp FOR TESTING,
      read_entity_list_IFSTATIC FOR TESTING,
      read_entity_license FOR TESTING,
      read_entity_license_app FOR TESTING.


ENDCLASS.       "ltcl_Monitoring_Odata_Dpc


CLASS ltcl_monitoring_odata_dpc IMPLEMENTATION.

  METHOD class_setup.

    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( '/AIF/STD_IDX_TBL' )
                                                                                  ( '/AIF/T_FINF' )
                                                                                  ( '/AIF/T_INF_KFLDS' )
                                                                                  ( '/AIF/MIDX_TEMPL' )
                                                                                  ( '/AIF/T_INF_TBL' )
                                                                                  ( 'SUI_TM_MM_APP' )
                                                                                  ( 'SUI_TM_MM_APPT' )
                                                                                  ( '/AIF/MPROC_MGUID' ) ) ).

  ENDMETHOD.

  METHOD class_teardown.

    environment->destroy( ).

  ENDMETHOD.

  METHOD setup.

    CREATE OBJECT mr_cut.

    environment->clear_doubles( ).

    mr_action_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_ACTION' ).
    mr_action_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_ACTION' ).

    mr_list_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_LIST' ).
    mr_list_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_LIST' ).
    mr_patch_request  ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_PATCH' ).
    mr_patch_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_PATCH' ).
*    mr_create_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_CREATE' ).
*    mr_create_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_CREATE' ).
*
*    mr_update_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_UPDATE' ).
*    mr_update_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_UPDATE' ).
*
*
*
*    mr_delete_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_DELETE' ).
*    mr_delete_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_DELETE' ).

    mr_log_reader ?= cl_abap_testdouble=>create( '/AIF/IF_MSG_LOG_READER' ).
    mo_custom_data ?= cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ).
    mo_facade_overview ?= cl_abap_testdouble=>create( '/AIF/IF_FACADE_OVERVIEW' ).

    mr_appl_engine ?= cl_abap_testdouble=>create( '/AIF/IF_APPLICATION_ENGINE' ).

*    mr_mproc_db ?= cl_abap_testdouble=>create( '/AIF/IF_MASS_PROC_DB' ).
*    mr_cut->mo_mproc_db = mr_mproc_db.
*
*    mr_odq_manager ?= cl_abap_testdouble=>create( 'IF_ODQ_QUEUED_TASK_MANAGER' ).
*    mr_cut->mo_odq_manager = mr_odq_manager.

    CONSTANTS:
      BEGIN OF gcs_service_key_for_aif,
        repository_id   TYPE /iwbep/v4_med_repository_id   VALUE 'DEFAULT',
        service_id      TYPE /iwbep/v4_med_service_id      VALUE '/AIF/MESSAGEHANDLING',
        service_version TYPE /iwbep/v4_med_service_version VALUE '0001',
        service_variant TYPE /iwbep/v4_med_service_variant VALUE '',
      END OF gcs_service_key_for_aif.
    DATA ls_service_key  TYPE /iwbep/s_v4_med_service_key.
    ls_service_key-repository_id   = gcs_service_key_for_aif-repository_id.
    ls_service_key-service_id      = gcs_service_key_for_aif-service_id.
    ls_service_key-service_version = gcs_service_key_for_aif-service_version.
    TRY.
        /iwbep/cl_v4s_runtime_factory=>create_request_info_stub(
               EXPORTING
                 is_service_key        = ls_service_key
               IMPORTING
                  eo_request_info_stub = mr_request_info_stub
                   ).
      CATCH /iwbep/cx_gateway.

    ENDTRY.

  ENDMETHOD.

  METHOD teardown.
    CLEAR: mr_action_request,
           mr_action_response,
           mr_list_request,
           mr_list_response,
           mr_patch_request,
           mr_patch_response,
           mr_log_reader,
*           mr_mproc_db,
*           mr_odq_manager,
           mr_appl_engine.
  ENDMETHOD.

  METHOD get_objects.
    DATA(lo_license) = mr_cut->get_license_check_manager( ).
    cl_abap_unit_assert=>assert_bound( lo_license ).
    DATA(lo_dsc1) = mr_cut->get_data_service_common( ).
    DATA(lo_dsc2) = mr_cut->get_data_service_common( ).
    cl_abap_unit_assert=>assert_equals(
      act = lo_dsc1
      exp = lo_dsc2
    ).
  ENDMETHOD.

  METHOD execute_action.

    DATA :lv_action_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_action_name = 'MESSAGE_RESTART'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_times( 2 ).
        mr_action_request->get_action( ).

        mr_cut->/iwbep/if_v4_dp_basic~execute_action(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD execute_action_ext_01.

    DATA :lv_action_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_action_name = 'MESSAGE_CANCEL'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_times( 2 ).
        mr_action_request->get_action( ).

        mr_cut->/iwbep/if_v4_dp_basic~execute_action(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD execute_action_ext_02.

    DATA :lv_action_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list   TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list.

    lv_action_name = 'MASS_PROCESS'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_once( ).
        mr_action_request->get_action( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        mr_action_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~execute_action(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD execute_action_ext_03.

    DATA :lv_action_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_action_name = 'TEST_ACTION'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_once( ).
        mr_action_request->get_action( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        mr_action_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~execute_action(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD read_entity.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'MESSAGETEXT'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_01.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'INDEXTABLEGENERIC'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_02.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'TESTENTITY'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_entity_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_03.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'CUSTOMFUNCTION'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_04.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'CUSTOMHINT'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_05.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'CUSTOMTEXT'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_ext_06.

    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_list.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list.

    lv_entityset_name = 'MESSAGELOGSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_01.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list.

    lv_entityset_name = 'INDEXTABLEGENERICSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_02.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lv_where_clause   TYPE string.

    lv_entityset_name = 'KEYFIELDSSET'.
    lv_where_clause = '( NS = ''TEST'' )'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_03.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list,
          lv_where_clause   TYPE string.

    lv_entityset_name = 'KEYFIELDVALUEHELSET'.
    lv_where_clause = '( NS = ''TEST'' )'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_04.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = 'KEYFIELD_VALUESET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_05.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = 'TESTENTITYSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_06.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = 'CUSTOMFUNCTIONSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_07.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = 'CUSTOMHINTSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_08.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = 'CUSTOMTEXTSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_list_ext_09.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_done_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_process_list.

    lv_entityset_name = /aif/if_monitoring_odata_glbl=>gc_entity_set_names-internal-custom_link."'CUSTOMLINKSET'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_is_done( ls_done_list ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD process_batch_read.
    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
*          ls_batch_package    TYPE ty_s_batch_package,
          lt_batch_package   TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_list,
          ls_done_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC' ) ).
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
    lt_operation_info = VALUE #( ( id = '111111' ) ).
    ls_batch_operation = VALUE #( id = '111111' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    lt_batch_package = VALUE #( ( kind = '1' number_of_operations = '1'
                                   operations_info = VALUE #( ( id = '1' operation_kind = 'EL'  ) ) ) ).
    ls_todo_list = VALUE #( process = VALUE #( continue_on_error = abap_true ) ).
    mr_cut->mo_batch_prepare = lo_batch_prepare.
    TRY.
        cl_abap_testdouble=>configure_call( lo_oper_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_oper_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( iv_operation_id = '1' ).

        cl_abap_testdouble=>configure_call( lo_btc_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_btc_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare
             )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
             )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package
             )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).


        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).
  ENDMETHOD.
  METHOD process_batch_read_exception.
    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
          lt_batch_package   TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_list,
          ls_done_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC' ) ).
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
    lt_operation_info = VALUE #( ( id = '111111' ) ).
    ls_batch_operation = VALUE #( id = '111111' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    lt_batch_package = VALUE #( ( kind = '1' number_of_operations = '1'
                                   operations_info = VALUE #( ( id = '1' operation_kind = 'EL'  ) ) ) ).
    ls_todo_list = VALUE #( process = VALUE #(   continue_on_error = abap_false ) ).
    mr_cut->mo_batch_prepare = lo_batch_prepare.
    TRY.
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_btc_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( iv_operation_id = '1' ).

        cl_abap_testdouble=>configure_call( lo_btc_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_btc_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare
             )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
             )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package
             )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->raise_exception( NEW /aif/cx_gateway( ) )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).

        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_btc_request
            io_response = lo_btc_response ).
      CATCH /iwbep/cx_gateway.
        DATA(lv_excepiton) = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_false( lv_excepiton ).
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).
  ENDMETHOD.
  METHOD process_batch_change.
    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
*          ls_batch_package    TYPE ty_s_batch_package,
          lt_batch_package   TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list,
          ls_done_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC' ) ).
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
    lt_operation_info = VALUE #( ( id = '2' ) ).
    ls_batch_operation = VALUE #( id = '2' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    lt_batch_package = VALUE #( ( kind = '2' number_of_operations = '1'
                                   operations_info = VALUE #( ( id = '2' operation_kind = 'EU'  ) ) ) ).
    ls_todo_list = VALUE #( process = VALUE #( content_id_ref = abap_true ) ).
    mr_cut->mo_batch_prepare = lo_batch_prepare.
    TRY.
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_btc_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( iv_operation_id = '2' ).

        cl_abap_testdouble=>configure_call( lo_btc_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_btc_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare
             )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
             )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package
             )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).


        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).
  ENDMETHOD.

  METHOD process_batch_change_exception.
    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
*          ls_batch_package    TYPE ty_s_batch_package,
          lt_batch_package   TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package,
          ls_key_data     TYPE /aif/s_message_key,
          lt_finf         TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl      TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data     TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list,
          ls_done_list       TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC' ) ).
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
*    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
    DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
    DATA lt_message_fail_to_save TYPE /aif/msg_interface_tt.
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.

    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' ) ).

    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).

    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
    lo_validation_api->validate_restart(
      is_message_key = ls_key_data ).

    mr_cut->mt_message_require_restart = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) ).
    lt_message_fail_to_save = VALUE #( ).
    DATA(lo_exception) = NEW /aif/cx_gateway( ).
    mr_cut->mo_payload_handle = lo_payload_handle.
    lt_operation_info = VALUE #( ( id = '2' ) ).
    ls_batch_operation = VALUE #( id = '2' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    lt_batch_package = VALUE #( ( kind = '2' number_of_operations = '1'
                                   operations_info = VALUE #( ( id = '2' operation_kind = 'EU'  ) ) ) ).
    ls_todo_list = VALUE #( process = VALUE #( content_id_ref = abap_true ) ).
    mr_cut->mo_batch_prepare = lo_batch_prepare.
    TRY.
        cl_abap_testdouble=>configure_call( lo_oper_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_oper_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( iv_operation_id = '2' ).

        cl_abap_testdouble=>configure_call( lo_btc_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_btc_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare
             )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
             )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package
             )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).
        cl_abap_testdouble=>configure_call( lo_payload_handle )->set_parameter( name = 'ET_MESSAGE_FAIL_TO_SAVE' value = lt_message_fail_to_save )->set_parameter( name = 'EO_EXCEPTION' value = lo_exception )->and_expect( )->is_called_once( ).
        lo_payload_handle->save_whole_payload(  ).

        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway   /aif/cx_error_handling_general.
        DATA(lv_exception) = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_false( lv_exception ).
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).
  ENDMETHOD.
  METHOD process_batch_change_set.
    DATA lo_response_info     TYPE REF TO /iwbep/if_v4_response_info.
    DATA lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.
    DATA: ls_conditions     TYPE /iwbep/if_v4_request_info=>ty_s_conditions,
          lt_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info.
    TRY.
        mr_request_info_stub->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-patch_entity ).
        mr_request_info_stub->set_is_patch( ).

        lo_response_info     = /iwbep/cl_v4s_runtime_factory=>create_response_info( mr_request_info_stub ).
        lo_request_info_pro = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( mr_request_info_stub ).
        lo_response_info_pro = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
          EXPORTING
            io_request_info      = mr_request_info_stub
            io_request_info_pro  = lo_request_info_pro
            io_response_info     = lo_response_info ).

        DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
        DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
        DATA ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation.
        ls_batch_operation = VALUE #(  id = '3' kind = 'UE' request = lo_oper_request response = lo_oper_response ).
        lo_request_info_pro->add_batch_operation_pro(  ls_batch_operation ).
        DATA  lt_batch_package    TYPE /iwbep/if_v4_request_info=>ty_t_operation_info.
        lt_batch_package = VALUE #( ( id = '3' changeset_id = '1'  operation_kind  = 'UE'  content_id = '01'   ) ).
        lo_request_info_pro->set_batch_operation_info(  lt_batch_package ) .
*
        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-batch-process_batch ).
        lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-batch-process_batch ).


        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        mr_cut->mo_payload_handle = lo_payload_handle.

        DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
        DATA  lt_batch_package_mock    TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package.
        lt_batch_package_mock = VALUE #( ( kind = 3  number_of_operations = 1
                                     operations_info = lt_batch_package ) ).
        lt_operation_info = VALUE #( ( id = '3' ) ).
        mr_cut->mo_batch_prepare = lo_batch_prepare.

        cl_abap_testdouble=>configure_call( lo_batch_prepare
                     )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
                     )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package_mock
                     )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).
        mr_cut->mt_message_require_restart = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' )
                                                      ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' ) ).
        DATA lt_message_fail_to_save TYPE /aif/msg_interface_tt.
        lt_message_fail_to_save = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' )
                                           ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' ) ).
        DATA(lo_exception) = NEW /aif/cx_gateway( ).
        cl_abap_testdouble=>configure_call( lo_payload_handle )->set_parameter( name = 'ET_MESSAGE_FAIL_TO_SAVE' value = lt_message_fail_to_save )->set_parameter( name = 'EO_EXCEPTION' value = lo_exception )->and_expect( )->is_called_once( ).
        lo_payload_handle->save_whole_payload(  ).
        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_request_info_pro
            io_response = lo_response_info_pro ).
*
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_batch_prepare ).
    cl_abap_testdouble=>verify_expectations( lo_payload_handle ).
  ENDMETHOD.

  METHOD process_batch_change_set_e.
    DATA lo_response_info     TYPE REF TO /iwbep/if_v4_response_info.
    DATA lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.
    DATA: ls_conditions     TYPE /iwbep/if_v4_request_info=>ty_s_conditions,
          lt_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info.
    TRY.
        mr_request_info_stub->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-patch_entity ).
        mr_request_info_stub->set_is_patch( ).

        lo_response_info     = /iwbep/cl_v4s_runtime_factory=>create_response_info( mr_request_info_stub ).
        lo_request_info_pro = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( mr_request_info_stub ).
        lo_response_info_pro = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
          EXPORTING
            io_request_info      = mr_request_info_stub
            io_request_info_pro  = lo_request_info_pro
            io_response_info     = lo_response_info ).

        DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
        DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
        DATA ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation.
        ls_batch_operation = VALUE #(  id = '3' kind = 'UE' request = lo_oper_request response = lo_oper_response ).
        lo_request_info_pro->add_batch_operation_pro(  ls_batch_operation ).
        DATA  lt_batch_package    TYPE /iwbep/if_v4_request_info=>ty_t_operation_info.
        lt_batch_package = VALUE #( ( id = '3' changeset_id = '1'  operation_kind  = 'UE'  content_id = '01'   ) ).
        lo_request_info_pro->set_batch_operation_info(  lt_batch_package ) .
*
        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-batch-process_batch ).
        lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-batch-process_batch ).


        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        mr_cut->mo_payload_handle = lo_payload_handle.

        DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
        DATA  lt_batch_package_mock    TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package.
        lt_batch_package_mock = VALUE #( ( kind = 3  number_of_operations = 1
                                     operations_info = lt_batch_package ) ).
        lt_operation_info = VALUE #( ( id = '3' ) ).
        mr_cut->mo_batch_prepare = lo_batch_prepare.

        cl_abap_testdouble=>configure_call( lo_batch_prepare
                     )->ignore_parameter(  'IT_BATCH_OPERATION_INFO'
                     )->set_parameter( name = 'ET_BATCH_PACKAGE' value = lt_batch_package_mock
                     )->and_expect( )->is_called_once( ).
        lo_batch_prepare->create_batch_packages(
                             it_batch_operation_info = lt_operation_info
             ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).
        mr_cut->mt_message_require_restart = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' )
                                                      ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' ) ).
        DATA lt_message_fail_to_save TYPE /aif/msg_interface_tt.
        lt_message_fail_to_save = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' )
                                           ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' ) ).
        DATA(lo_exception) = NEW /aif/cx_gateway( ).
        cl_abap_testdouble=>configure_call( lo_payload_handle )->set_parameter( name = 'ET_MESSAGE_FAIL_TO_SAVE' value = lt_message_fail_to_save )->set_parameter( name = 'EO_EXCEPTION' value = lo_exception )->and_expect( )->is_called_once( ).
        lo_payload_handle->save_whole_payload(  ).
        mr_cut->/iwbep/if_v4_dp_batch~process_batch(
          EXPORTING
            io_request  = lo_request_info_pro
            io_response = lo_response_info_pro ).
*
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_batch_prepare ).
    cl_abap_testdouble=>verify_expectations( lo_payload_handle ).
  ENDMETHOD.
  METHOD execute_batch_operation.

    DATA lo_response_info     TYPE REF TO /iwbep/if_v4_response_info.
    DATA lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.
    DATA: ls_conditions     TYPE /iwbep/if_v4_request_info=>ty_s_conditions,
          lt_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info.
    TRY.
        lo_response_info     = /iwbep/cl_v4s_runtime_factory=>create_response_info( mr_request_info_stub ).
        lo_request_info_pro = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( mr_request_info_stub ).
        lo_response_info_pro = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
          EXPORTING
            io_request_info      = mr_request_info_stub
            io_request_info_pro  = lo_request_info_pro
            io_response_info     = lo_response_info ).

        DATA ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation.
        DATA(lo_dp_advanced) = CAST /iwbep/if_v4_dp_advanced( cl_abap_testdouble=>create( '/IWBEP/IF_V4_DP_ADVANCED' ) ).
        mr_cut->mo_dp_advanced = lo_dp_advanced.

        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->read_entity( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->read_entity_list( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->execute_action( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->execute_function( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->create_entity( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->update_entity( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        cl_abap_testdouble=>configure_call( lo_dp_advanced )->ignore_all_parameters(  )->and_expect( )->is_called_once( ).
        lo_dp_advanced->delete_entity( EXPORTING  io_request        = lo_request_info_pro
                                                io_response       = lo_response_info_pro  ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway.

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_dp_advanced ).
    TRY.
        ls_batch_operation = VALUE #(  id = '3' kind = 'GG'
                                       request = lo_request_info_pro response = lo_response_info_pro ).
        mr_cut->/aif/if_batch_preparation~execute_batch_operation(
                                  EXPORTING
                                    is_batch_operation  = ls_batch_operation ).

      CATCH /iwbep/cx_gateway .
        DATA(lv_exception) = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_true( lv_exception ).
  ENDMETHOD.
  METHOD process_change_set.

    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC_CS' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC_CS' ) ).
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).

    lt_operation_info = VALUE #( ( id = '111111' ) ).
    ls_batch_operation = VALUE #( id = '111111' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    ls_todo_list = VALUE #( process = VALUE #( content_id_ref = abap_true ) ).

    TRY.
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( '111111' ).
        cl_abap_testdouble=>configure_call( lo_oper_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_oper_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_batch~process_change_set(
          EXPORTING
            io_request = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).

  ENDMETHOD.
  METHOD process_change_set_ext_01.

    DATA: lt_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
          lv_excp           TYPE c.

    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC_CS' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC_CS' ) ).

    TRY.
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_btc_request->get_operation( '' ).

        mr_cut->/iwbep/if_v4_dp_batch~process_change_set(
          EXPORTING
            io_request = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway.
        lv_excp = abap_true.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( EXPORTING act = lv_excp  exp = abap_false ).
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).

  ENDMETHOD.
  METHOD process_change_set_ext_02.
* save payload has exception
    DATA: lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
          lt_operation_info1 TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
          ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
          ls_todo_list       TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list,
          lv_excp            TYPE c.
    DATA(lo_oper_request) = CAST /iwbep/if_v4_requ_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_OPER' ) ).
    DATA(lo_oper_response) = CAST /iwbep/if_v4_resp_btc_oper( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_OPER' ) ).
    DATA(lo_btc_request) = CAST /iwbep/if_v4_requ_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BTC_PROC_CS' ) ).
    DATA(lo_btc_response) = CAST /iwbep/if_v4_resp_btc_proc_cs( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BTC_PROC_CS' ) ).
    DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
    DATA(lo_batch_prepare) = CAST /aif/if_batch_preparation( cl_abap_testdouble=>create( '/AIF/IF_BATCH_PREPARATION' ) ).
    lt_operation_info1 = VALUE #( ( id = '111111' ) ).
    ls_batch_operation = VALUE #( id = '111111' kind = 'ET' request = lo_oper_request response = lo_oper_response ).
    ls_todo_list = VALUE #( process = VALUE #( content_id_ref = abap_true ) ).
    mr_cut->mo_payload_handle = lo_payload_handle.
    mr_cut->mo_batch_prepare = lo_batch_prepare.
    TRY.
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ET_OPERATION_INFO' value = lt_operation_info1 )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operations_info( ).
        cl_abap_testdouble=>configure_call( lo_btc_request )->set_parameter( name = 'ES_OPERATION' value = ls_batch_operation )->and_expect( )->is_called_once( ).
        lo_btc_request->get_operation( '111111' ).
        cl_abap_testdouble=>configure_call( lo_oper_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_oper_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_batch_prepare )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_batch_prepare->execute_batch_operation( ls_batch_operation ).
        DATA lt_message_fail_to_save TYPE /aif/msg_interface_tt.
        lt_message_fail_to_save = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' )
                                           ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB' ) ).
        DATA(lo_exception) = NEW /aif/cx_gateway( ).
        cl_abap_testdouble=>configure_call( lo_payload_handle )->set_parameter( name = 'ET_MESSAGE_FAIL_TO_SAVE' value = lt_message_fail_to_save )->set_parameter( name = 'EO_EXCEPTION' value = lo_exception )->and_expect( )->is_called_once( ).
        lo_payload_handle->save_whole_payload(  ).
        mr_cut->/iwbep/if_v4_dp_batch~process_change_set(
          EXPORTING
            io_request = lo_btc_request
            io_response = lo_btc_response ).

      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
        lv_excp = abap_true.
    ENDTRY.

    cl_abap_unit_assert=>assert_true( lv_excp ).
    cl_abap_testdouble=>verify_expectations( lo_btc_request ).
    cl_abap_testdouble=>verify_expectations( lo_btc_response ).

  ENDMETHOD.
  METHOD create_batch_packages.
* save payload has exception
    DATA:
      lt_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      lt_batch_package  TYPE /aif/cl_monitoring_odata_dpc=>ty_t_batch_package,
      lv_excp           TYPE c.
    lt_operation_info = VALUE #( ( id = '1' changeset_id = 10   operation_kind  = /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity   content_id = '10'   )
                                 ( id = '2' changeset_id = 20   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list   content_id  = '20'  )
                                 ( id = '3' changeset_id = 30   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function   content_id  = '30'  )
                                 ( id = '4' changeset_id = 40   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity   content_id  = '40'  )
                                 ( id = '5' changeset_id = 50   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity   content_id  = '50' )
                                 ( id = '6' changeset_id = 60   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action   content_id  = '60' )
                                 ( id = '7' changeset_id = 70   operation_kind =  /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity   content_id  = '70'  )
*                                 ( id = '5' changeset_id = 60   operation_kind =  'AC'   content_id  = '60'  )
*                                 ( id = '5' changeset_id = 0   operation_kind =  'BC'   content_id  = '60'  )
                                 ).
    TRY.
        mr_cut->/aif/if_batch_preparation~create_batch_packages(
          EXPORTING
            it_batch_operation_info = lt_operation_info
          IMPORTING  et_batch_package = lt_batch_package ).

      CATCH /iwbep/cx_gateway .
        lv_excp = abap_true.
    ENDTRY.

    cl_abap_unit_assert=>assert_false( lv_excp ).

    lt_operation_info = VALUE #( ( id = '1' changeset_id = 0   operation_kind  = 'UE'   content_id = '10'   )
                                 ( id = '1' changeset_id = 0   operation_kind  = 'EL'   content_id = '20'   )
                                 ( id = '5' changeset_id = 0   operation_kind =  'BC'   content_id  = '60'  )
                                     ).
    TRY.
        mr_cut->/aif/if_batch_preparation~create_batch_packages(
          EXPORTING
            it_batch_operation_info = lt_operation_info
          IMPORTING  et_batch_package = lt_batch_package ).

      CATCH /iwbep/cx_gateway .
        lv_excp = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_true( lv_excp ).
  ENDMETHOD.
  METHOD action_process_message.

    DATA: ls_key_data     TYPE /aif/s_message_key,
          lv_action_name  TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
          lt_finf         TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl      TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data     TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lv_message_text TYPE bapi_msg,
          lt_return       TYPE STANDARD TABLE OF /aif/s_msg_return.

    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    lv_action_name = 'MESSAGE_RESTART'.
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' ) ).

    MESSAGE ID '/AIF/MES' TYPE 'S' NUMBER '108' WITH ls_key_data-msgguid INTO lv_message_text.
    lt_return = VALUE #( ( type = 'S' id =  '/AIF/MES' number = '108' message_v1 = ls_key_data-msgguid
                           message = lv_message_text msgguid = ls_key_data-msgguid ) ).

    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).

    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key_data )->and_expect( )->is_called_once( ).
        mr_action_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_action_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_once( ).
        mr_action_request->get_action( ).

        cl_abap_testdouble=>configure_call( mr_action_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_action_response->set_busi_data( lt_return ).
        DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
        mr_cut->mo_validation_api = lo_validation_api.
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_restart(
          is_message_key = ls_key_data ).

        mr_cut->action_process_message(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD action_process_message_ext_01.

    DATA: ls_key_data     TYPE /aif/s_message_key,
          lv_action_name  TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
          lr_appl_engine  TYPE REF TO /aif/if_application_engine,
          lv_message_text TYPE bapi_msg,
          lt_return       TYPE STANDARD TABLE OF /aif/s_msg_return.

    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_false ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key_data )->and_expect( )->is_called_once( ).
        mr_action_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_action_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_once( ).
        mr_action_request->get_action( ).

        cl_abap_testdouble=>configure_call( mr_action_response )->set_parameter( name = 'IA_BUSI_DATA' value = lt_return )->and_expect( )->is_never_called( ).
        mr_action_response->set_busi_data( lt_return ).

        DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
        mr_cut->mo_validation_api = lo_validation_api.
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_restart(
          is_message_key = ls_key_data ).

        mr_cut->action_process_message(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.
  METHOD action_process_message_ext_02.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' ) ).
*    lt_exp_data = VALUE #( ( type = 'S' id =  '/AIF/MES' number = '108' message_v1 = ls_key_data-msgguid ) ).
    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
    lo_validation_api->validate_cancel(
      is_message_key = ls_key_data ).
    mr_cut->message_process(
      EXPORTING
        iv_msgguid = ls_key_data-msgguid
        iv_ns      = ls_key_data-ns
        iv_ifname  = ls_key_data-ifname
        iv_ifver   = ls_key_data-ifver
        iv_action_name = 'MESSAGE_CANCEL'
      IMPORTING
        et_return  = lt_act_data ).
    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_03.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine,
          lr_sel_engine  TYPE REF TO /aif/if_selection_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST_1' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST_1' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST_1' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST_1' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'S' ) ).
    lt_exp_data = VALUE #( ( type = 'E' id =  '/AIF/ERROR_HANDLING' number = '170' message_v1 = 'Restart'
                             message_v2 = ls_key_data-msgguid message_v3 = 'S' ) ).
    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
    lo_validation_api->validate_restart(
      is_message_key = ls_key_data ).
    TRY.
        lr_sel_engine = /aif/cl_aif_engine_factory=>get_selection_engine_by_ifkeys( iv_ns        = ls_key_data-ns
                                                                                    iv_ifname    = ls_key_data-ifname
                                                                                    iv_ifversion = ls_key_data-ifver ).
      CATCH /aif/cx_error_handling_general /aif/cx_aif_engine_not_found.
    ENDTRY.
    mr_cut->mo_selection_engine = lr_sel_engine.
    mr_cut->message_process(
      EXPORTING
        iv_msgguid = ls_key_data-msgguid
        iv_ns      = ls_key_data-ns
        iv_ifname  = ls_key_data-ifname
        iv_ifver   = ls_key_data-ifver
        iv_action_name = 'MESSAGE_RESTART'
      IMPORTING
        et_return  = lt_act_data ).
    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_04.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '2' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_exp_data = VALUE #( ( type = 'E' id =  '/AIF/ERROR_HANDLING' number = '003' message_v1 = '/AIF/T_FINF'
                             message_v2 = ls_key_data-ns message_v3 = ls_key_data-ifname message_v4 = '2' ) ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
    lo_validation_api->validate_restart(
      is_message_key = ls_key_data ).
    mr_cut->message_process(
      EXPORTING
        iv_msgguid = ls_key_data-msgguid
        iv_ns      = ls_key_data-ns
        iv_ifname  = ls_key_data-ifname
        iv_ifver   = ls_key_data-ifver
        iv_action_name = 'MESSAGE_RESTART'
      IMPORTING
        et_return  = lt_act_data ).
    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_05.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST1' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST1' ifversion = '1' appl_engine_id = '100' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_exp_data = VALUE #( ( type = 'E' id =  'SY' number = '530' ) ).
    environment->insert_test_data( lt_finf ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
    lo_validation_api->validate_restart(
      is_message_key = ls_key_data ).

    mr_cut->message_process(
      EXPORTING
        iv_msgguid = ls_key_data-msgguid
        iv_ns      = ls_key_data-ns
        iv_ifname  = 'IF_TEST1'
        iv_ifver   = ls_key_data-ifver
        iv_action_name = 'MESSAGE_RESTART'
      IMPORTING
        et_return  = lt_act_data ).
    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_06.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_exp_data = VALUE #( ( type = 'E' id =  '/AIF/ERROR_HANDLING' number = '107' message_v1 = 'Cancel'
                             message_v2 = ls_key_data-ns message_v3 = ls_key_data-ifname message_v4 = ls_key_data-ifver ) ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
    lo_validation_api->validate_cancel(
      is_message_key = ls_key_data ).

    mr_cut->message_process(
      EXPORTING
        iv_msgguid = ls_key_data-msgguid
        iv_ns      = ls_key_data-ns
        iv_ifname  = ls_key_data-ifname
        iv_ifver   = ls_key_data-ifver
        iv_action_name = 'MESSAGE_CANCEL'
      IMPORTING
        et_return  = lt_act_data ).

    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_07.

    DATA: ls_key_data    TYPE /aif/s_message_key,
          lt_finf        TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl     TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lr_appl_engine TYPE REF TO /aif/if_application_engine.
    DATA: lt_exp_data TYPE bapiret2_t,
          lt_act_data TYPE bapiret2_t.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' ) ).

    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).
*    mr_cut->message_process(
*      EXPORTING
*        iv_msgguid = ls_key_data-msgguid
*        iv_ns      = ls_key_data-ns
*        iv_ifname  = ls_key_data-ifname
*        iv_ifver   = ls_key_data-ifver
*        iv_action_name = 'TEST_ACTION'
*      IMPORTING
*        et_return  = lt_act_data ).
    cl_abap_unit_assert=>assert_equals(
      act  = lt_act_data
      exp  = lt_exp_data ).

  ENDMETHOD.
  METHOD action_process_message_ext_08.

    DATA: ls_key_data     TYPE /aif/s_message_key,
          lv_action_name  TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_todo_list    TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
          lt_finf         TYPE STANDARD TABLE OF /aif/t_finf,
          lt_inf_tbl      TYPE STANDARD TABLE OF /aif/t_inf_tbl,
          lt_idx_data     TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lv_message_text TYPE bapi_msg,
          lt_return       TYPE STANDARD TABLE OF /aif/s_msg_return.
    environment->clear_doubles( ).
    ls_key_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST%' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ).
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    lv_action_name = 'MESSAGE_RESTART'.
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST1' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).
    lt_inf_tbl = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msg_tbl = '/AIF/STD_IDX_TBL' ) ).
    lt_idx_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST1' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' ) ).

    MESSAGE ID '/AIF/ERROR_HANDLING' TYPE 'E' NUMBER '003' WITH ls_key_data-ns ls_key_data-ifname ls_key_data-ifver ls_key_data-msgguid INTO lv_message_text.
    lt_return = VALUE #( ( type = 'E' id =  '/AIF/ERROR_HANDLING' number = '003' message_v1 = ls_key_data-ns message_v2 = ls_key_data-ifname message_v3 = ls_key_data-ifver
                           message_v4 = ls_key_data-msgguid
                           message = lv_message_text msgguid = ls_key_data-msgguid ) ).

    environment->insert_test_data( lt_finf ).
    environment->insert_test_data( lt_inf_tbl ).
    environment->insert_test_data( lt_idx_data ).

    TRY.
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key_data )->and_expect( )->is_called_once( ).
        mr_action_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_action_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'EV_ACTION_NAME' value = lv_action_name )->and_expect( )->is_called_once( ).
        mr_action_request->get_action( ).

        cl_abap_testdouble=>configure_call( mr_action_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_action_response->set_busi_data( lt_return ).
        DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
        mr_cut->mo_validation_api = lo_validation_api.
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_restart(
          is_message_key = ls_key_data ).

        mr_cut->action_process_message(
          EXPORTING
            io_request = mr_action_request
            io_response = mr_action_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_action_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).

  ENDMETHOD.

  METHOD action_mass_process_restart.

*    DATA: lt_mproc_mguid    TYPE STANDARD TABLE OF /aif/mproc_mguid,
*          ls_parameter_data TYPE /aif/mproc_key,
*          ls_mass_run       TYPE /aif/mproc_context_mainrun,
*          ls_todo_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
*          ls_done_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_process_list,
*          lv_message_text   TYPE bapi_msg,
*          lt_return         TYPE STANDARD TABLE OF /aif/s_msg_return.
*
*    TRY.
*        DATA(lv_sid) = cl_rsmds_hash_utilities=>to_hash_c32( cl_http_server=>if_http_server~session_id ).
*      CATCH cx_rsmds_input_invalid
*      cx_rsmds_input_invalid_type INTO DATA(lx_hash).
*        cl_abap_unit_assert=>fail( lx_hash->get_text( ) ).
*    ENDTRY.
*
*    lt_mproc_mguid = VALUE #( sid = lv_sid
*                             ( msgguid = |00505695007C1EDA89F5451CF746D91A| )
*                             ( msgguid = |00505695007C1EDA89F54570E607D91A| )
*                             ( msgguid = |00505695007C1EDA89F545BEF531991A| )
*                             ( msgguid = |00505695007C1EEA85E36701EBC9050F| )
*                             ( msgguid = |00505695007C1EEA85E3676CA9A74510| )
*                             ( msgguid = |00505695007C1EEA85E367A41338E510| ) ).
*
*    environment->insert_test_data( lt_mproc_mguid ).
*
*    ls_parameter_data = VALUE #( action_code = |R|  ).
*    ls_todo_list = VALUE #( process = VALUE #( action_import = abap_true parameter_data = abap_true ) return = VALUE #( busi_data = abap_true ) ).
*    ls_done_list = VALUE #( action_import = abap_true parameter_data = abap_true ).
*
*
*    DATA(lv_count) = lines( lt_mproc_mguid ).
*    MESSAGE ID '/AIF/ERROR_HANDLING' TYPE 'S' NUMBER '160'
*      WITH  lv_count
*      INTO   lv_message_text.
*    lt_return = VALUE #( ( type = 'S' id =  '/AIF/ERROR_HANDLING' number = '160'
*                           message_v1 = |{ lv_count }| message = lv_message_text msgguid = |*| ) ).
*    TRY.
*        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_PARAMETER_DATA' value = ls_parameter_data )->and_expect( )->is_called_once( ).
*        mr_action_request->get_parameter_data( ).
*
*        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
*        mr_action_request->get_todos( ).
*
*        cl_abap_testdouble=>configure_call( mr_action_response )->set_parameter( name = 'IA_BUSI_DATA' value = lt_return )->and_expect( )->is_called_once( ).
*        mr_action_response->set_busi_data( lt_return ).
*
*        cl_abap_testdouble=>configure_call( mr_action_response )->set_parameter( name = 'IS_TODO_LIST' value = ls_done_list )->and_expect( )->is_called_once( ).
*        mr_action_response->set_is_done( ls_done_list ).
*
*        DATA(lv_externalid) = '/AIF_MASS_PROC_MAIN_' && sy-uname && '_' && sy-datum && sy-uzeit.
*        ls_mass_run = VALUE #( sid = lv_sid code = |R| ).
*        DATA(lr_main)    = NEW lcl_mass_process_main( ls_mass_run ).
*
*        DATA(lv_user_dependent) = SWITCH #( cl_cos_utilities=>is_cloud( )
*                                     WHEN abap_false THEN 'X'
*                                     ELSE ''
*                                 ).
*
*        cl_abap_testdouble=>configure_call( mr_odq_manager )->ignore_parameter( 'I_EXTERNALID' )->ignore_parameter(
*                                                                                'IR_TASK' )->set_parameter(
*                                                                                  name = 'I_MAX_RETRY_COUNTER' value = 3 )->set_parameter(
*                                                                                  name = 'I_USER_DEPENDENT' value = lv_user_dependent )->and_expect( )->is_called_once( ).
*        mr_odq_manager->create_task(  EXPORTING i_externalid           = lv_externalid
*                                                ir_task                = lr_main
*                                                i_max_retry_counter    = 3
*                                                i_user_dependent       = lv_user_dependent ).
*
*
*        mr_cut->action_mass_process(
*          EXPORTING
*            io_request = mr_action_request
*            io_response = mr_action_response ).
*      CATCH /iwbep/cx_gateway.
*    ENDTRY.
*
*    cl_abap_testdouble=>verify_expectations( mr_action_request ).
*    cl_abap_testdouble=>verify_expectations( mr_action_response ).
*    cl_abap_testdouble=>verify_expectations( mr_odq_manager ).

*    environment->clear_doubles( ).

    cl_abap_unit_assert=>assert_equals(
            act = 1
            exp = 1 ).
  ENDMETHOD.

  METHOD action_mass_process_cancel.

*    DATA: lt_mproc_mguid    TYPE STANDARD TABLE OF /aif/mproc_mguid,
*          ls_parameter_data TYPE /aif/mproc_key,
*          ls_mass_run       TYPE /aif/mproc_context_mainrun,
*          ls_todo_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_list,
*          ls_done_list      TYPE /iwbep/if_v4_requ_basic_action=>ty_s_todo_process_list,
*          lv_message_text   TYPE bapi_msg,
*          lt_return         TYPE STANDARD TABLE OF /aif/s_msg_return.
*
*    TRY.
*        DATA(lv_sid) = cl_rsmds_hash_utilities=>to_hash_c32( cl_http_server=>if_http_server~session_id ).
*      CATCH cx_rsmds_input_invalid
*      cx_rsmds_input_invalid_type INTO DATA(lx_hash).
*        cl_abap_unit_assert=>fail( lx_hash->get_text( ) ).
*    ENDTRY.
*
*    lt_mproc_mguid = VALUE #( sid = lv_sid
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE194E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE1D4E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE214E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE254E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE294E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE2D4E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE314E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE354E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE394E4| )
*                            ( msgguid = |FA163E90372D1ED8B9CAE7E32EE3D4E4| )
*                            ( msgguid = |FA163E90372D1ED8BDF2914781D314DE| )
*                            ( msgguid = |FA163E90372D1ED8BDF2914781D334DE| ) ).
*
*    environment->insert_test_data( lt_mproc_mguid ).
*
*    ls_parameter_data = VALUE #( action_code = |C|  ).
*    ls_todo_list = VALUE #( process = VALUE #( action_import = abap_true parameter_data = abap_true ) return = VALUE #( busi_data = abap_true ) ).
*    ls_done_list = VALUE #( action_import = abap_true parameter_data = abap_true ).
*
*
*    DATA(lv_count) = lines( lt_mproc_mguid ).
*    MESSAGE ID '/AIF/ERROR_HANDLING' TYPE 'S' NUMBER '161'
*      WITH  lv_count
*      INTO   lv_message_text.
*    lt_return = VALUE #( ( type = 'S' id =  '/AIF/ERROR_HANDLING' number = '161'
*                           message_v1 = |{ lv_count }| message = lv_message_text msgguid = |*| ) ).
*    TRY.
*        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_PARAMETER_DATA' value = ls_parameter_data )->and_expect( )->is_called_once( ).
*        mr_action_request->get_parameter_data( ).
*
*        cl_abap_testdouble=>configure_call( mr_action_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
*        mr_action_request->get_todos( ).
*
*        cl_abap_testdouble=>configure_call( mr_action_response )->set_parameter( name = 'IA_BUSI_DATA' value = lt_return )->and_expect( )->is_called_once( ).
*        mr_action_response->set_busi_data( lt_return ).
*
*        cl_abap_testdouble=>configure_call( mr_action_response )->set_parameter( name = 'IS_TODO_LIST' value = ls_done_list )->and_expect( )->is_called_once( ).
*        mr_action_response->set_is_done( ls_done_list ).
*
*        DATA(lv_externalid) = '/AIF_MASS_PROC_MAIN_' && sy-uname && '_' && sy-datum && sy-uzeit.
*        ls_mass_run = VALUE #( sid = lv_sid code = |R| ).
*        DATA(lr_main)    = NEW lcl_mass_process_main( ls_mass_run ).
*
*        DATA(lv_user_dependent) = SWITCH #( cl_cos_utilities=>is_cloud( )
*                                     WHEN abap_false THEN 'X'
*                                     ELSE ''
*                                 ).
*
*        cl_abap_testdouble=>configure_call( mr_odq_manager )->ignore_parameter( 'I_EXTERNALID' )->ignore_parameter(
*                                                                                'IR_TASK' )->set_parameter(
*                                                                                  name = 'I_MAX_RETRY_COUNTER' value = 3 )->set_parameter(
*                                                                                  name = 'I_USER_DEPENDENT' value = lv_user_dependent )->and_expect( )->is_called_once( ).
*        mr_odq_manager->create_task(  EXPORTING i_externalid           = lv_externalid
*                                                ir_task                = lr_main
*                                                i_max_retry_counter    = 3
*                                                i_user_dependent       = lv_user_dependent ).
*
*
*        mr_cut->action_mass_process(
*          EXPORTING
*            io_request = mr_action_request
*            io_response = mr_action_response ).
*      CATCH /iwbep/cx_gateway.
*    ENDTRY.
*
*    cl_abap_testdouble=>verify_expectations( mr_action_request ).
*    cl_abap_testdouble=>verify_expectations( mr_action_response ).
*    cl_abap_testdouble=>verify_expectations( mr_odq_manager ).

    cl_abap_unit_assert=>assert_equals(
            act = 1
            exp = 1 ).
  ENDMETHOD.

  METHOD read_list_customlinkset.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      ls_interface_key TYPE /aif/ifkeys,
      lt_custom_link   TYPE /aif/tt_custom_link,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true )
                            return  = VALUE #( busi_data = abap_true ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) ) ).
    ls_filter_range = VALUE #( ns     = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver  = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgid  = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST_MSGID' ) )
                               msgno  = VALUE #( ( sign = 'I' option = 'EQ' low = '999' ) ) ).
    lt_custom_link = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' clinkid = '001' msgid = 'TEST_MSGID' msgno = '999' )
                              ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' clinkid = '002' msgid = 'TEST_MSGID' msgno = '999' ) ).

    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).

        cl_abap_testdouble=>configure_call( mo_custom_data )->returning( lt_custom_link )->and_expect( )->is_called_once( ).
        mo_custom_data->read_list_custom_link(
                          is_interface_key  = ls_interface_key
                          iv_msgid          = 'TEST_MSGID'
                          iv_msgno          = '999' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_custom_link )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_custom_link ).

        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->read_list_customlinkset(
          EXPORTING
            io_request  = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_messagelogset.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lv_skip          TYPE i VALUE 1,
      lv_top           TYPE i VALUE 1,
      lt_msg_log       TYPE /aif/tt_msg_log,
      lv_count         TYPE int4,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_index_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
      lt_exp_data      TYPE /aif/tt_msg_log.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true skip = abap_true top = abap_true )
                            return = VALUE #( busi_data = abap_true count = abap_true ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'MSGTY' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               msgty = VALUE #( ( sign = 'I' option = 'EQ' low = 'E' ) ) ).
    lt_msg_log = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' counter = '11' msgty = 'E' msgid = 'ABC' msgno = '123' )
                          ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' counter = '12' msgty = 'E' msgid = 'ABC' msgno = '124' ) ).
    lv_count = 2.
    lv_skip = 10.
    lv_top = 10.
    ls_page-skip = lv_skip.
    ls_page-top = lv_top.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_SKIP' value = lv_skip )->and_expect( )->is_called_once( ).
        mr_list_request->get_skip( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_TOP' value = lv_top )->and_expect( )->is_called_once( ).
        mr_list_request->get_top( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgty )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGTY' ).

        cl_abap_testdouble=>configure_call(
                              mr_log_reader
                              )->set_parameter(
                                name = 'ET_MSG_LOG'
                                value = lt_msg_log
                              )->set_parameter(
                                name = 'EV_COUNT'
                                value = lv_count )->and_expect( )->is_called_once( ).
        mr_log_reader->read_log(
                          is_interface_key  = ls_interface_key
                          iv_msgguid        = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'
                          iv_filter_msgtype = 'E'
                          is_page           = ls_page ).
        mr_cut->mo_log_reader = mr_log_reader.

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = 2 )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( 2 ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_msg_log )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_msg_log ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.

  METHOD read_list_messagelogset_count.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      lt_msg_log       TYPE /aif/tt_msg_log,
      lv_count         TYPE int4,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_exp_data      TYPE /aif/tt_msg_log.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_true ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'MSGTY' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               msgty = VALUE #( ( sign = 'I' option = 'EQ' low = 'E' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgty )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGTY' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = 0 )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( 0 ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_messagelogset_ext_01.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
          lt_msg_log       TYPE /aif/tt_msg_log,
          lv_count         TYPE int4.


    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'MSGTY' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'LT' low = '' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'LT' low = '' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'LT' low = '' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'LT' low = '' ) )
                               msgty = VALUE #( ( sign = 'I' option = 'LT' low = '' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgty )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGTY' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_msg_log )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_msg_log ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = lv_count )->and_expect( )->is_never_called( ).
        mr_list_response->set_count( lv_count ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_messagelogset_ext_02.

    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_msg_log   TYPE /aif/tt_msg_log,
          lv_count     TYPE int4.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_true ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_msg_log )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_msg_log ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = lv_count )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( lv_count ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_messagelogset_ext_03.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
          lt_msg_log       TYPE /aif/tt_msg_log,
          lv_count         TYPE int4.


    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_true ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'MSGTY' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( )
                               ifname = VALUE #( )
                               ifver = VALUE #( )
                               msgguid = VALUE #( )
                               msgty = VALUE #( ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgty )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGTY' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_msg_log )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_msg_log ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = lv_count )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( lv_count ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_messagelogset_ext_04.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          lt_msg_log       TYPE /aif/tt_msg_log,
          lv_count         TYPE int4.


    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_true ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_msg_log )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_msg_log ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = lv_count )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( lv_count ).

        mr_cut->read_list_messagelogset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.

  METHOD read_entity_messagetext.

    TYPES:
      BEGIN OF ty_s_msgtext_key,
        msgid TYPE  symsgid,
        msgno TYPE  symsgno,
        msgv1 TYPE  symsgv,
        msgv2 TYPE  symsgv,
        msgv3 TYPE  symsgv,
        msgv4 TYPE  symsgv,
      END OF ty_s_msgtext_key.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_msgtext_key TYPE ty_s_msgtext_key,
          ls_exp_data    TYPE /aif/s_msg_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_msgtext_key = VALUE #( msgid = '/AIF/MES' msgno = '005' ).
    ls_exp_data = VALUE #( msgid = '/AIF/MES' msgno = '005' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_msgtext_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_messagetext(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_messagetext_ext_01.

    TYPES:
      BEGIN OF ty_s_msgtext_key,
        msgid TYPE  symsgid,
        msgno TYPE  symsgno,
        msgv1 TYPE  symsgv,
        msgv2 TYPE  symsgv,
        msgv3 TYPE  symsgv,
        msgv4 TYPE  symsgv,
      END OF ty_s_msgtext_key.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_msgtext_key TYPE ty_s_msgtext_key,
          ls_exp_data    TYPE /aif/s_msg_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_exp_data = VALUE #( msgid = 'TEST' msgno = '000' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_msgtext_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_messagetext(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_messagetext_ext_02.

    TYPES:
      BEGIN OF ty_s_msgtext_key,
        msgid TYPE  symsgid,
        msgno TYPE  symsgno,
        msgv1 TYPE  symsgv,
        msgv2 TYPE  symsgv,
        msgv3 TYPE  symsgv,
        msgv4 TYPE  symsgv,
      END OF ty_s_msgtext_key.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_msgtext_key TYPE ty_s_msgtext_key,
          ls_exp_data    TYPE /aif/s_msg_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_msgtext_key = VALUE #( msgid = 'TEST' msgno = '000' ).
    ls_exp_data = VALUE #( msgid = 'TEST' msgno = '000' longtext = 'This is the test longtext' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_msgtext_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_messagetext(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD read_entity_messagetext_ext_03.

    TYPES:
      BEGIN OF ty_s_msgtext_key,
        msgid TYPE  symsgid,
        msgno TYPE  symsgno,
        msgv1 TYPE  symsgv,
        msgv2 TYPE  symsgv,
        msgv3 TYPE  symsgv,
        msgv4 TYPE  symsgv,
      END OF ty_s_msgtext_key.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          ls_msgtext_key TYPE ty_s_msgtext_key,
          ls_exp_data    TYPE /aif/s_msg_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_msgtext_key = VALUE #( msgid = 'TEST' msgno = '000' ).
    ls_exp_data = VALUE #( msgid = 'TEST' msgno = '000' longtext = 'This is the test longtext' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_msgtext_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_messagetext(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.

  METHOD read_entity_indextable.

    DATA: ls_message_key TYPE /aif/s_message_key,
          lr_data        TYPE REF TO data,
          ls_exp_data    TYPE /aif/s_message_generic.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_sel_engine) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).

    mr_cut->mo_selection_engine = lo_sel_engine.
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'MSGGUID1' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'MSGGUID1' ).
    GET REFERENCE OF ls_exp_data INTO lr_data.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_sel_engine )->set_parameter(
                     name = 'ER_MESSAGE_ENTRY' value = lr_data )->ignore_parameter(
                     'IS_MESSAGE_KEY' )->and_expect( )->is_called_once( ).
        lo_sel_engine->/aif/if_data_selection~get_single_message_entry(
          EXPORTING
            is_message_key    = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_list_indextablegeneric(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.

  METHOD read_entity_indextable_ext_01.

    DATA: ls_message_key TYPE /aif/s_message_key,
          ls_exp_data    TYPE /aif/s_message_generic.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_never_called( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_list_indextablegeneric(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.

  METHOD read_list_indextablegenericset.

    TYPES: ty_index_data      TYPE /aif/std_idx_tbl.
    DATA: ls_todo_list        TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lv_skip             TYPE i VALUE 1,
          lv_top              TYPE i VALUE 1,
          lt_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range     TYPE /aif/s_filter_range,
          lt_orderby_property TYPE abap_sortorder_tab,
          lt_index_data       TYPE STANDARD TABLE OF /aif/std_idx_tbl,
          lt_exp_data         TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.

    DATA: lt_finf TYPE STANDARD TABLE OF /aif/t_finf,
          lr_data TYPE REF TO data.

    lt_exp_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' process_date = '20191001010000' ) ).
    GET REFERENCE OF lt_exp_data INTO lr_data.
    DATA(lo_sel_engine) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).

    mr_cut->mo_selection_engine = lo_sel_engine.

    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = '2' pers_engine_id = '2' sel_engine_id = '0' log_engine_id = '0' ) ).

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_true skip = abap_true top = abap_true )
                            return = VALUE #( busi_data = abap_true count = abap_true ) ).

    lt_orderby_property = VALUE #( ( name = 'IFNAME' descending = '' )
                                   ( name = 'MSGGUID' descending = 'X' ) ).

    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'STATUS' ) )
                                ( CONV #( 'LOG_MESSAGE' ) )
                                ( CONV #( 'PROCESS_DATE' ) )
                                ( CONV #( 'EDITED_STATUS' ) )
                                ( CONV #( 'KEYFIELDS' ) )
                                ( CONV #( 'MASS_PROCESS_FLAG' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               status = VALUE #( ( sign = 'I' option = 'EQ' low = 'E' ) )
                               log_message = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST_LOG_MESSAGE' ) )
                               process_date = VALUE #( ( sign = 'I' option = 'EQ' low = '0' high = '0' ) )
                               edited_status = VALUE #( ( sign = 'I' option = 'EQ' low = '50' ) )
                               keyfields = VALUE #( ( sign = 'I' option = 'EQ' low = 'FIELD1' ) )
                               mass_process = 'X' ).

*    lt_index_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' create_date = '20191001' create_time = '010000' )
*                             ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB' status = 'E' create_date = '20191001' create_time = '020000' )
*                             ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC' status = 'C' create_date = '20191001' create_time = '030000' ) ).
*    environment->insert_test_data( lt_index_data ).
    environment->insert_test_data( lt_finf ).

*    lt_exp_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' process_date = '20191001010000' ) ).

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_SKIP' value = lv_skip )->and_expect( )->is_called_once( ).
        mr_list_request->get_skip( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_TOP' value = lv_top )->and_expect( )->is_called_once( ).
        mr_list_request->get_top( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_ORDERBY_PROPERTY' value = lt_orderby_property )->and_expect( )->is_called_once( ).
        mr_list_request->get_orderby( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-status )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'STATUS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-log_message )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'LOG_MESSAGE' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-process_date )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'PROCESS_DATE' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-edited_status )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'EDITED_STATUS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-keyfields )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'KEYFIELDS' ).

        cl_abap_testdouble=>configure_call( lo_sel_engine )->set_parameter(
                     name = 'ER_MESSAGE_ENTRIES' value = lr_data )->ignore_parameter(
                     'IS_FILTER_RANGE' )->and_expect( )->is_called_once( ).
        TRY.
            lo_sel_engine->/aif/if_data_selection~get_message_entries(
            EXPORTING
              is_filter_range    = ls_filter_range ).
          CATCH /aif/cx_error_handling_general.
        ENDTRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IV_COUNT' value = 0 )->and_expect( )->is_called_once( ).
        mr_list_response->set_count( 0 ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->read_list_indextablegenericset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_indextable_ext_01.

    DATA: ls_todo_list TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_exp_data  TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_false orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_exp_data ).
        mr_cut->read_list_indextablegenericset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_indextable_ext_02.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/s_filter_range,
          lt_exp_data      TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'GT' low = '' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'GT' low = '' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'GT' low = '' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = '*' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_exp_data ).
        mr_cut->read_list_indextablegenericset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_indextable_ext_03.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/s_filter_range,
          lt_exp_data      TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'MSGGUID' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_exp_data ).
        mr_cut->read_list_indextablegenericset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_indextable_ext_04.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/s_filter_range,
          lt_exp_data      TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_exp_data ).
        mr_cut->read_list_indextablegenericset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_idxtbl_mass_process.

*    TYPES: ty_index_data      TYPE /aif/std_idx_tbl.
*    DATA: ls_todo_list        TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
*          lv_skip             TYPE i VALUE 1,
*          lv_top              TYPE i VALUE 1,
*          lt_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
*          ls_filter_range     TYPE /aif/s_filter_range,
*          lt_orderby_property TYPE abap_sortorder_tab,
*          lt_index_data       TYPE STANDARD TABLE OF /aif/std_idx_tbl,
*          lt_exp_data         TYPE /aif/cl_monitoring_odata_dpc=>tt_message_generic.
*
*    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_true skip = abap_true top = abap_true )
*                            return = VALUE #( busi_data = abap_true count = abap_true ) ).
*
*    lt_orderby_property = VALUE #( ( name = 'IFNAME' descending = '' )
*                                   ( name = 'MSGGUID' descending = 'X' ) ).
*
*    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
*                                ( CONV #( 'IFNAME' ) )
*                                ( CONV #( 'IFVER' ) )
*                                ( CONV #( 'MSGGUID' ) )
*                                ( CONV #( 'STATUS' ) )
*                                ( CONV #( 'LOG_MESSAGE' ) )
*                                ( CONV #( 'PROCESS_DATE' ) )
*                                ( CONV #( 'EDITED_STATUS' ) )
*                                ( CONV #( 'MASS_PROCESS_FLAG' ) ) ).
*    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
*                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
*                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
*                               msgguid = VALUE #( ( sign = 'I' option = 'BT' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' high = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC' ) )
*                               status = VALUE #( ( sign = 'I' option = 'EQ' low = 'E' ) )
*                               log_message = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST_LOG_MESSAGE' ) )
*                               process_date = VALUE #( ( sign = 'I' option = 'EQ' low = '0' high = '0' ) )
*                               edited_status = VALUE #( ( sign = 'I' option = 'EQ' low = '50' ) ) ).
*
*    lt_index_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' status = 'E' create_date = '20191001' create_time = '010000' )
*                             ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB' status = 'E' create_date = '20191001' create_time = '020000' )
*                             ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC' status = 'C' create_date = '20191001' create_time = '030000' ) ).
*    environment->insert_test_data( lt_index_data ).
*
*    lt_exp_data = VALUE #(  ).
*
*    TRY.
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
*        mr_list_request->get_todos( ).
*
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_SKIP' value = lv_skip )->and_expect( )->is_called_once( ).
*        mr_list_request->get_skip( ).
*
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_TOP' value = lv_top )->and_expect( )->is_called_once( ).
*        mr_list_request->get_top( ).
*
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_ORDERBY_PROPERTY' value = lt_orderby_property )->and_expect( )->is_called_once( ).
*        mr_list_request->get_orderby( ).
*
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_props_with_ranges( ).
*
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-status )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'STATUS' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-log_message )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'LOG_MESSAGE' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-process_date )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'PROCESS_DATE' ).
*        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-edited_status )->and_expect( )->is_called_once( ).
*        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'EDITED_STATUS' ).
*
*        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_data )->and_expect( )->is_called_once( ).
*        mr_list_response->set_busi_data( lt_exp_data ).
*
*        TRY.
*            DATA(lv_sid) = cl_rsmds_hash_utilities=>to_hash_c32( cl_http_server=>if_http_server~session_id ).
*          CATCH cx_rsmds_input_invalid
*          cx_rsmds_input_invalid_type INTO DATA(lx_hash).
*            cl_abap_unit_assert=>fail( lx_hash->get_text( ) ).
*        ENDTRY.
*
*        DATA(lv_from) = |/AIF/STD_IDX_TBL AS index_table LEFT OUTER JOIN /aif/msgeditstat AS edit_status | &
*                        |ON index_table~ns = edit_status~ns AND index_table~ifname = edit_status~ifname AND | &
*                        |index_table~ifver = edit_status~ifver AND index_table~msgguid = edit_status~msgguid | &
*                        |LEFT OUTER JOIN /aif/msgprocstat AS proc_status ON index_table~ns = proc_status~ns AND | &
*                        |index_table~ifname = proc_status~ifname AND index_table~ifver = proc_status~ifver AND | &
*                        |index_table~msgguid = proc_status~msgguid LEFT OUTER JOIN /AIF/I_COMMENTCOUNT AS comm_cnt ON | &
*                        |index_table~ns = comm_cnt~ns AND index_table~ifname = comm_cnt~ifname AND index_table~ifver = comm_cnt~ifver AND index_table~msgguid = comm_cnt~msgguid|.
*
*
*        DATA(lv_status_where) = |( index_table~status IN @ls_filter_range-status OR edit_status~edited_status IN @ls_filter_range-edited_status )|.
*        DATA(lv_date_where) = |( ( index_table~create_date EQ @lv_dfrom AND index_table~create_time GE @lv_tfrom ) OR | &
*                              |( index_table~create_date GT @lv_dfrom AND index_table~create_date LT @lv_dto ) OR | &
*                              |( index_table~create_date EQ @lv_dto AND index_table~create_time LE @lv_tto ) )|.
*
*
*        DATA lr_keyfields_range TYPE REF TO data.
*
*        cl_abap_testdouble=>configure_call( mr_mproc_db )->set_parameter( name = 'iv_sid' value = lv_sid )->set_parameter(
*                                                                          name = 'is_ifkey' value = VALUE /aif/ifkeys( ns = |TEST| ifname = |IF_TEST| ifver = |1| ) )->set_parameter(
*                                                                          name = 'iv_dfrom' value = |00010101| )->set_parameter(
*                                                                          name = 'iv_tfrom' value = |000000| )->set_parameter(
*                                                                          name = 'iv_dto' value = |99991231| )->set_parameter(
*                                                                          name = 'iv_tto' value = |000000| )->set_parameter(
*                                                                          name = 'ir_keyfields_range' value = lr_keyfields_range )->set_parameter(
*                                                                          name = 'is_filter_range' value = ls_filter_range )->set_parameter(
*                                                                          name = 'iv_from' value = ls_filter_range )->set_parameter(
*                                                                          name = 'iv_status_where' value = lv_status_where )->set_parameter(
*                                                                          name = 'iv_date_where' value = lv_date_where )->set_parameter(
*                                                                          name = 'iv_keys_where' value = '' )->and_expect( )->is_called_once( ).
*
*        mr_mproc_db->insert_mguid_dynamic( iv_sid = lv_sid
*                                           is_ifkey = VALUE /aif/ifkeys( ns = |TEST| ifname = |IF_TEST| ifver = |1| )
*                                           iv_dfrom = |00010101|
*                                           iv_tfrom = |000000|
*                                           iv_dto = |99991231|
*                                           iv_tto = |000000|
*                                           ir_keyfields_range = lr_keyfields_range
**                                 if_key_range = <ls_keyfields_range>
*                                           is_filter_range = ls_filter_range
*                                           iv_from = lv_from
*                                           iv_status_where = lv_status_where
*                                           iv_date_where = lv_date_where
*                                           iv_keys_where = '' ).
*
*        cl_abap_testdouble=>configure_call( mr_mproc_db )->set_parameter( name = 'IS_IFKEY' value = VALUE /aif/mproc_ifkey( sid = lv_sid
*                                                                                                                            ns = |TEST|
*                                                                                                                            ifname = |IF_TEST|
*                                                                                                                            ifver = |1|
*                                                                                                                            msg_tbl = |/AIF/STD_IDX_TBL| )  )->and_expect( )->is_called_once( ).
*
*        mr_mproc_db->insert_ifkey( VALUE /aif/mproc_ifkey( sid = lv_sid
*                                                           ns = |TEST|
*                                                           ifname = |IF_TEST|
*                                                           ifver = |1|
*                                                           msg_tbl = |/AIF/STD_IDX_TBL| ) ).
*        mr_cut->read_list_indextablegenericset(
*          EXPORTING
*            io_request = mr_list_request
*            io_response = mr_list_response ).
*      CATCH /iwbep/cx_gateway.
*    ENDTRY.
*
*    cl_abap_testdouble=>verify_expectations( mr_list_request ).
*    cl_abap_testdouble=>verify_expectations( mr_mproc_db ).
*    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_keyfieldsset.

    DATA: lt_exp_data      TYPE STANDARD TABLE OF /aif/s_keyfields.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->read_list_keyfieldsset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).


  ENDMETHOD.

  METHOD read_list_keyfieldsset_ext_01.

    DATA: lt_keyfields   TYPE /aif/tt_keyfields,
          ls_message_key TYPE /aif/s_message_key,
          lt_exp_data    TYPE STANDARD TABLE OF /aif/s_keyfields.

    DATA(lo_data_selection) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).
    lt_keyfields = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_data_selection )->set_parameter( name = 'RT_KEYFIELDS' value = lt_keyfields )->and_expect( )->is_called_once( ).
        lo_data_selection->/aif/if_data_selection~get_keyfields_definition( ls_message_key ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->mo_selection_engine ?= lo_data_selection.
        mr_cut->read_list_keyfieldsset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.

  METHOD read_list_keyfield_valueset.

    DATA: lt_exp_data      TYPE STANDARD TABLE OF /aif/s_keyfield_value.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->read_list_keyfield_valueset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_kfvalueset_ext_01.

    DATA: lt_keyfields_value TYPE /aif/tt_keyfields_value,
          ls_message_key     TYPE /aif/s_message_key,
          lt_exp_data        TYPE STANDARD TABLE OF /aif/s_keyfield_value.
    DATA(lo_data_selection) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).
    lt_keyfields_value = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_data_selection )->set_parameter( name = 'RT_KEYFIELDS_VALUE' value = lt_keyfields_value )->and_expect( )->is_called_once( ).
        lo_data_selection->/aif/if_data_selection~get_keyfields_value( ls_message_key ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->mo_selection_engine ?= lo_data_selection.
        mr_cut->read_list_keyfield_valueset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_kfvaluehelp.

    DATA: lt_exp_data      TYPE STANDARD TABLE OF /aif/s_keyfield_value.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->read_list_keyfieldvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_kfvaluehelp_ext_01.

    DATA: lt_keyfields_valuehelp TYPE /aif/tt_keyfields_valuehelp,
          ls_message_key         TYPE /aif/s_message_key,
          lt_exp_data            TYPE STANDARD TABLE OF /aif/s_keyfield_value.
    DATA(lo_data_selection) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).
    lt_keyfields_valuehelp = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_data_selection )->set_parameter( name = 'RT_KEYFIELDS_VALUEHELP' value = lt_keyfields_valuehelp )->and_expect( )->is_called_once( ).
        lo_data_selection->/aif/if_data_selection~get_keyfields_valuehelp( ls_message_key ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->mo_selection_engine ?= lo_data_selection.
        mr_cut->read_list_keyfieldvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway  /aif/cx_error_handling_general.

    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD parse_message_key.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_itg_filter_range,
          ls_act_data      TYPE /aif/s_message_key,
          ls_exp_data      TYPE /aif/s_message_key.

    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'LT' low = 'AIFT' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'LT' low = 'FLBOOKING' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'LT' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'LT' low = 'MSGGUID1' ) ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        mr_cut->parse_message_key(
          EXPORTING
            io_request = mr_list_request
          RECEIVING
            es_message_key = ls_act_data ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals(
        act = ls_act_data
        exp = ls_exp_data ).
  ENDMETHOD.
  METHOD parse_message_key_ext_01.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_itg_filter_range,
          ls_act_data      TYPE /aif/s_message_key,
          ls_exp_data      TYPE /aif/s_message_key.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        mr_cut->parse_message_key(
          EXPORTING
            io_request = mr_list_request
          RECEIVING
            es_message_key = ls_act_data ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals(
        act = ls_act_data
        exp = ls_exp_data ).
  ENDMETHOD.
  METHOD parse_message_key_ext_02.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_itg_filter_range,
          ls_act_data      TYPE /aif/s_message_key,
          ls_exp_data      TYPE /aif/s_message_key.

    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'MSGGUID1' ) ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) ) ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'MSGGUID1' ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        mr_cut->parse_message_key(
          EXPORTING
            io_request = mr_list_request
          RECEIVING
            es_message_key = ls_act_data ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals(
        act = ls_act_data
        exp = ls_exp_data ).
  ENDMETHOD.

  METHOD read_list_strs_info_tree_list.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lt_strs_info     TYPE /aif/tt_structure_info,
      lv_msgguid       TYPE guid_32,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_index_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
      lt_exp_data      TYPE /aif/tt_msg_log.

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               ).
    lt_strs_info = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  )
                          ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  ) ).

    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-structure_info )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'FIELDS' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_expand->set_is_done( VALUE #( ) ).

        cl_abap_testdouble=>configure_call(
                              lo_payload_handle
                              )->set_parameter( name = 'IV_MSGGUID' value = lv_msgguid
                              )->set_parameter( name = 'IS_IFKEYS' value = ls_interface_key
                              )->returning(
                                value = lt_strs_info )->and_expect( )->is_called_once( ).
        lo_payload_handle->get_all_structures_info( iv_msgguid = lv_msgguid is_ifkeys = ls_interface_key ).
        mr_cut->mo_payload_handle = lo_payload_handle.
        mr_cut->mo_log_reader = mr_log_reader.

        cl_abap_testdouble=>configure_call( lo_tree_response )->set_parameter( name = 'IV_COUNT' value = 2 ).
        lo_tree_response->set_count( 2 ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_strs_info
        )->set_parameter( name = 'IV_EXPAND_EXPRESSION' value = 'FIELDS' )->and_expect( )->is_called_once( ).
        lo_tree_response->set_busi_data(
          it_busi_data = lt_strs_info
          iv_expand_expression = 'FIELDS' ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).
  ENDMETHOD.
  METHOD read_tree_list_stru_info_ext_1.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range.

    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        cl_abap_testdouble=>configure_call( lo_tree_response )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->read_tree_list_structure_info(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_stru_info_ext_2.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->read_tree_list_structure_info(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_stru_info_ext_3.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = 'TEST_ENTITY' )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_stru_info_ext_4.

    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      lt_strs_info     TYPE /aif/tt_structure_info,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_finf          TYPE STANDARD TABLE OF /aif/t_finf.

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               ).
    lt_strs_info = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  )
                          ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  ) ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = 'X' pers_engine_id = 'X' sel_engine_id = 'X' log_engine_id = 'X' ) ).
    environment->insert_test_data( lt_finf ).
    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-structure_info )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'FIELDS' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_expand->set_is_done( VALUE #( ) ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
METHOD read_tree_list_keyfields.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lt_strs_info     TYPE /aif/tt_structure_info,
      lv_msgguid       TYPE guid_32,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_index_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl.

    DATA: lt_keyfields   TYPE /aif/tt_keyfields,
          ls_message_key TYPE /aif/s_message_key,
          lt_exp_data    TYPE STANDARD TABLE OF /aif/s_keyfields.
    DATA(lo_selection_engine) = CAST /AIF/IF_SELECTION_ENGINE( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                               ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )

                               ).
    lt_strs_info = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  )
                          ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  ) ).
     lt_keyfields = VALUE #( (   ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ) ).

    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
*        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-keyfields )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'PARA_LIST' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_expand->set_is_done( VALUE #( ) ).

*        lo_data_selection->/aif/if_data_selection~get_keyfields_definition( ls_message_key ).
*        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
*        mr_list_response->set_busi_data( lt_keyfields ).
        ls_message_key-ns = 'TEST'.
        ls_message_key-ifname = 'IF_TEST'.
        ls_message_key-ifver = '1' .
        cl_abap_testdouble=>configure_call(
                            lo_selection_engine
                             )->set_parameter( name = 'IS_MESSAGE_KEY' value = ls_message_key
                             )->returning(
                             value = lt_keyfields )->and_expect( )->is_called_once( ).


* start
*        mr_cut->mo_selection_engine ?= lo_data_selection.
        lo_selection_engine->/aif/if_data_selection~get_keyfields_definition(  is_message_key = ls_message_key ).
        mr_cut->mo_selection_engine = lo_selection_engine.
* end


        cl_abap_testdouble=>configure_call( lo_tree_response )->set_parameter( name = 'IV_COUNT' value = 1 ).
        lo_tree_response->set_count( 1 ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_keyfields
        )->set_parameter( name = 'IV_EXPAND_EXPRESSION' value = 'PARA_LIST' )->and_expect( )->is_called_once( ).
        lo_tree_response->set_busi_data(
          it_busi_data = lt_keyfields
          iv_expand_expression = 'PARA_LIST' ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).





  ENDMETHOD.
METHOD read_tree_list_keyfields_2.


   TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-keyfields )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).





  ENDMETHOD.
METHOD read_tree_list_keyfields_3.

"*test raise exception
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lt_strs_info     TYPE /aif/tt_structure_info,
      lv_msgguid       TYPE guid_32,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_msglog_filter_range,
      lt_index_data    TYPE STANDARD TABLE OF /aif/std_idx_tbl,
      lt_finf          TYPE STANDARD TABLE OF /aif/t_finf.
    DATA: lt_keyfields   TYPE /aif/tt_keyfields,
          ls_message_key TYPE /aif/s_message_key,
          lt_exp_data    TYPE STANDARD TABLE OF /aif/s_keyfields.
    DATA(lo_selection_engine) = CAST /AIF/IF_SELECTION_ENGINE( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                               ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TESTA' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TESTB' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )

                               ).


*    lt_finf = VALUE #( ( ns = 'AA' ifname = 'BB' ifversion = '1' appl_engine_id = 'X' pers_engine_id = 'X' sel_engine_id = 'X' log_engine_id = 'X' ) ).
*    environment->insert_test_data( lt_finf ).

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
*        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-keyfields )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'PARA_LIST' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_expand->set_is_done( VALUE #( ) ).


*       mr_cut->mo_selection_engine = lo_selection_engine.


        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).





  ENDMETHOD.
  METHOD read_list_payload_tree_list.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lt_payload_value TYPE /aif/tt_payload_structure,
      lv_msgguid       TYPE guid_32,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range,
      lv_path          TYPE string.

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'PATH' ) )  ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               path = VALUE #( ( sign = 'I' option = 'EQ' low = 'PATH-SUB_PATH' ) )
                               ).
    lt_payload_value = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' path = 'PATH-SUB_PATH' )
                           ).

    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.
    lv_path = 'PATH-SUB_PATH'.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-payload_structure )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'PATH' ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'FIELDS' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_expand->set_is_done( VALUE #( ) ).

        cl_abap_testdouble=>configure_call(
                              lo_payload_handle
                              )->set_parameter( name = 'IV_MSGGUID' value = lv_msgguid
                              )->set_parameter( name = 'IS_IFKEYS' value = ls_interface_key
                              )->set_parameter( name = 'IV_PATH' value = lv_path
                              )->returning(
                                value = lt_payload_value )->and_expect( )->is_called_once( ).
        lo_payload_handle->get_payload_via_path( iv_msgguid = lv_msgguid is_ifkeys = ls_interface_key iv_path = lv_path ).
        mr_cut->mo_payload_handle = lo_payload_handle.
        mr_cut->mo_log_reader = mr_log_reader.
        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).
  ENDMETHOD.

  METHOD read_tree_list_payload_ext_1.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range.

    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'PATH' ) ) ).
    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'PATH' ).

        cl_abap_testdouble=>configure_call( lo_tree_response )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->read_tree_list_payload_value(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_payload_ext_2.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->read_tree_list_payload_value(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_payload_ext_3.

    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      lt_payload_value TYPE /aif/tt_payload_structure,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range,
      lt_finf          TYPE STANDARD TABLE OF /aif/t_finf.

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'PATH' ) )  ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               path = VALUE #( ( sign = 'I' option = 'EQ' low = 'PATH-SUB_PATH' ) )
                               ).
    lt_payload_value = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' path = 'PATH-SUB_PATH' ) ).
    lt_finf = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifversion = '1' appl_engine_id = 'X' pers_engine_id = 'X' sel_engine_id = 'X' log_engine_id = 'X' ) ).
    environment->insert_test_data( lt_finf ).
    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-payload_structure )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'PATH' ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'FIELDS' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_expand->set_is_done( VALUE #( ) ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_payload_ext_4.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = 'OTHERS' )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_tree_response )->ignore_all_parameters( )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_payload_ext_5.

    DATA: lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range.

    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'PATH' ) )
                                ( CONV #( 'OTHERS' ) )  ).
    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'PATH' ).

        cl_abap_testdouble=>configure_call( lo_tree_response )->and_expect( )->is_never_called( ).
        lo_tree_response->set_is_done( VALUE #( filter = abap_true ) ).

        mr_cut->read_tree_list_payload_value(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_tree_list_payload_ext_6.

    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_intm_tree_l=>ty_s_todo_process_list,
      ls_interface_key TYPE /aif/ifkeys,
      ls_page          TYPE /aif/if_msg_log_reader=>ts_page,
      lt_payload_value TYPE /aif/tt_payload_structure,
      lt_fields        TYPE /aif/tt_payload_field_value,
      lv_msgguid       TYPE guid_32,
      lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_payload_filter_range,
      lv_path          TYPE string.

    ls_todo_list = VALUE #( filter = abap_true  ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGGUID' ) )
                                ( CONV #( 'PATH' ) )  ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgguid = VALUE #( ( sign = 'I' option = 'EQ' low = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) )
                               path = VALUE #( ( sign = 'I' option = 'EQ' low = 'PATH-SUB_PATH' ) )
                               ).
    lt_fields = VALUE #(
        ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' path = 'PATH-SUB_PATH' line_number = '1: 1.2' field_value = '{values:{field1:value1}}' )
                       ).
    lt_payload_value = VALUE #( ( msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ns = 'TEST' ifname = 'IF_TEST' ifver = '1' path = 'PATH-SUB_PATH' fields = lt_fields )
                          ).

    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_msgguid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'.
    lv_path = 'PATH-SUB_PATH'.

    TRY.
        DATA(lo_tree_request) = CAST /iwbep/if_v4_requ_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_TREE_L' ) ).
        DATA(lo_tree_response) = CAST /iwbep/if_v4_resp_intm_tree_l( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_TREE_L' ) ).
        DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
        DATA(lo_expand) = CAST /iwbep/if_v4_expand_node( cl_abap_testdouble=>create( '/IWBEP/IF_V4_EXPAND_NODE' ) ).


        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter(
         name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-payload_structure )->and_expect( )->is_called_once( ).
        lo_tree_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgguid )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'MSGGUID' ).
        cl_abap_testdouble=>configure_call( lo_tree_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-path )->and_expect( )->is_called_once( ).
        lo_tree_request->get_filter_ranges_for_prop( iv_property_path = 'PATH' ).

        cl_abap_testdouble=>configure_call( lo_tree_request )->ignore_all_parameters( )->returning( value = lo_expand )->and_expect( )->is_called_once( ).
        lo_tree_request->get_expand_tree_for_nav_prop( 'FIELDS' ).

        cl_abap_testdouble=>configure_call( lo_expand )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_expand->set_is_done( VALUE #( ) ).

        cl_abap_testdouble=>configure_call(
                              lo_payload_handle
                              )->set_parameter( name = 'IV_MSGGUID' value = lv_msgguid
                              )->set_parameter( name = 'IS_IFKEYS' value = ls_interface_key
                              )->set_parameter( name = 'IV_PATH' value = lv_path
                              )->returning(
                                value = lt_payload_value ).
        lo_payload_handle->get_payload_via_path( iv_msgguid = lv_msgguid is_ifkeys = ls_interface_key iv_path = lv_path ).
        mr_cut->mo_payload_handle = lo_payload_handle.
        mr_cut->mo_log_reader = mr_log_reader.
        mr_cut->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
          EXPORTING
            io_request = lo_tree_request
            io_response = lo_tree_response ).
      CATCH /iwbep/cx_gateway /aif/cx_aif_engine_not_found /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_tree_request ).
    cl_abap_testdouble=>verify_expectations( lo_tree_response ).

  ENDMETHOD.
  METHOD read_list_chgvaluehelp.

    DATA: lt_exp_data      TYPE STANDARD TABLE OF /aif/s_keyfield_value.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->read_list_chgfieldvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_chgvaluehelp_ext_01.

    DATA: lt_chgfields_valuehelp TYPE /aif/tt_keyfields_valuehelp,
          ls_message_key         TYPE /aif/s_message_key,
          lt_exp_data            TYPE STANDARD TABLE OF /aif/s_keyfield_value.
    DATA(lo_data_selection) = CAST /aif/if_selection_engine( cl_abap_testdouble=>create( '/AIF/IF_SELECTION_ENGINE' ) ).
    lt_chgfields_valuehelp = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_data_selection )->set_parameter( name = 'RT_CHGFIELDS_VALUEHELP' value = lt_chgfields_valuehelp )->and_expect( )->is_called_once( ).
        lo_data_selection->/aif/if_data_selection~get_chgfields_valuehelp( ls_message_key ).
        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_data ).

        mr_cut->mo_selection_engine ?= lo_data_selection.
        mr_cut->read_list_chgfieldvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway  /aif/cx_error_handling_general.

    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_cfunc.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_function.
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).
    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgid = VALUE #( ( sign = 'I' option = 'EQ' low = 'MC_TEST' ) )
                               msgno = VALUE #( ( sign = 'I' option = 'EQ' low = '001' ) ) ).
    lt_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' idfunc = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter(
                     name = 'ET_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_custom_functions(
          EXPORTING
            iv_ns     = 'TEST'
            iv_ifname = 'IF_TEST'
            iv_ifver  = '1'
            iv_msgid  = 'MC_TEST'
            iv_msgno  = '001' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customfunctionset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_cfunc_ext_1.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_function.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customfunctionset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_list_cfunc_ext_2.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          lt_data          TYPE /aif/tt_custom_function.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customfunctionset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_list_chint.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_hint.
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).
    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgid = VALUE #( ( sign = 'I' option = 'EQ' low = 'MC_TEST' ) )
                               msgno = VALUE #( ( sign = 'I' option = 'EQ' low = '001' ) ) ).
    lt_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' hintid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter(
                     name = 'ET_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_custom_hints(
          EXPORTING
            iv_ns     = 'TEST'
            iv_ifname = 'IF_TEST'
            iv_ifver  = '1'
            iv_msgid  = 'MC_TEST'
            iv_msgno  = '001' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customhintset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_chint_ext_1.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_hint.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customhintset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_list_chint_ext_2.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          lt_data          TYPE /aif/tt_custom_hint.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customhintset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_list_ctext.

    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_text.
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).
    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_true count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    ls_filter_range = VALUE #( ns = VALUE #( ( sign = 'I' option = 'EQ' low = 'TEST' ) )
                               ifname = VALUE #( ( sign = 'I' option = 'EQ' low = 'IF_TEST' ) )
                               ifver = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) )
                               msgid = VALUE #( ( sign = 'I' option = 'EQ' low = 'MC_TEST' ) )
                               msgno = VALUE #( ( sign = 'I' option = 'EQ' low = '001' ) ) ).
    lt_data = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ctextid = 'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter(
                     name = 'ET_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_custom_texts(
          EXPORTING
            iv_ns     = 'TEST'
            iv_ifname = 'IF_TEST'
            iv_ifver  = '1'
            iv_msgid  = 'MC_TEST'
            iv_msgno  = '001' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customtextset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).

  ENDMETHOD.
  METHOD read_list_ctext_ext_1.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          ls_filter_range  TYPE /aif/cl_monitoring_odata_dpc=>ty_cfunc_filter_range,
          lt_data          TYPE /aif/tt_custom_text.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    lt_property_path = VALUE #( ( CONV #( 'NS' ) )
                                ( CONV #( 'IFNAME' ) )
                                ( CONV #( 'IFVER' ) )
                                ( CONV #( 'MSGID' ) )
                                ( CONV #( 'MSGNO' ) )
                                ( CONV #( 'TESTFIELD' ) ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ns )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'NS' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifname )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFNAME' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-ifver )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'IFVER' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgid )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-msgno )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'MSGNO' ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customtextset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_list_ctext_ext_2.
    DATA: ls_todo_list     TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
          lt_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
          lt_data          TYPE /aif/tt_custom_text.

    ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                            return = VALUE #( busi_data = abap_false count = abap_false ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_data )->and_expect( )->is_never_called( ).
        mr_list_response->set_busi_data( lt_data ).

        mr_cut->read_list_customtextset(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.
  METHOD read_entity_cfunc.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_custom_function,
          ls_exp_data    TYPE /aif/s_custom_function.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).

    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' idfunc = 'TESTFUNCTIONID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' idfunc = 'TESTFUNCTIONID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter( name = 'ES_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_single_custom_function(
          EXPORTING
            iv_ns       = ls_message_key-ns
            iv_ifname   = ls_message_key-ifname
            iv_ifver    = ls_message_key-ifver
            iv_cfunc_id = ls_message_key-idfunc ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_customfunction(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_cfunc_ext_1.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_custom_function,
          ls_exp_data    TYPE /aif/s_custom_function.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_false ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' idfunc = 'TESTFUNCTIONID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_never_called( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_customfunction(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_chint.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_custom_hint,
          ls_exp_data    TYPE /aif/s_custom_hint.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).

    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' hintid = 'TESTHINTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' hintid = 'TESTHINTID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter( name = 'ES_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_single_custom_hint(
          EXPORTING
            iv_ns       = ls_message_key-ns
            iv_ifname   = ls_message_key-ifname
            iv_ifver    = ls_message_key-ifver
            iv_chint_id = ls_message_key-hintid ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_customhint(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_ctext.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_custom_text,
          ls_exp_data    TYPE /aif/s_custom_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).

    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ctextid = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' ctextid = 'TESTTEXTID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->set_parameter( name = 'ES_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_custom_data->get_single_custom_text(
          EXPORTING
            iv_ns       = ls_message_key-ns
            iv_ifname   = ls_message_key-ifname
            iv_ifver    = ls_message_key-ifver
            iv_ctext_id = ls_message_key-ctextid ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_customtext(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_clink.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /AIF/IF_MONITORING_ODATA_GLBL=>ty_s_customlink_key,
          ls_exp_data    TYPE /aif/s_custom_link.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_custom_data) = CAST /aif/if_custom_data_handler( cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ) ).

    mr_cut->mo_custom_data = lo_custom_data.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' CLINKID = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' CLINKID = 'TESTTEXTID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key )->and_expect( )->is_called_once( ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_custom_data )->ignore_all_parameters(
         )->returning( value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_custom_data->read_custom_link( is_interface_key = ls_message_key-aifkeys
                                          iv_custom_link_id = ls_message_key-clinkid ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_exp_data )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->read_entity_customlink(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_validation.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_message_key,
          ls_exp_data    TYPE /aif/s_validation.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_validation_api) = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).

    mr_cut->mo_validation_api = lo_validation_api.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-validation ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_restart(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_cancel(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_payload(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_processor(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_comment(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customfunction(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customfunction(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customhint(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customhint(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customtext(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customtext(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customdatalink(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_customdatalink(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

    lo_entity_request = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    lo_entity_response = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    lo_validation_api = CAST /aif/if_validation_api( cl_abap_testdouble=>create( '/AIF/IF_VALIDATION_API' ) ).
    mr_cut->mo_validation_api = lo_validation_api.
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID'
     customdatalink_edit = abap_true customfunction_edit = abap_true customhint_edit = abap_true customtext_edit = abap_true ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-validation ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_restart(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_cancel(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_payload(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_processor(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_false ).
        lo_validation_api->validate_comment(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customfunction(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customfunction(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customhint(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customhint(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customtext(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customtext(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customdatalink(
          iv_action = /aif/if_validation_api=>gs_actions-edit
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_validation_api )->ignore_all_parameters( )->returning( value = abap_true ).
        lo_validation_api->validate_customdatalink(
          iv_action = /aif/if_validation_api=>gs_actions-create
          is_if_key = CORRESPONDING #( ls_message_key ) ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

  ENDMETHOD.
  METHOD patch_entity_changed_field.
    DATA: lr_request_infor TYPE REF TO /iwbep/if_v4_request_info,
          ls_changed_data  TYPE /aif/s_payload_change,
          ls_keys_data     TYPE /aif/s_payload_change,
          ls_change_data   TYPE /aif/s_payload_change,
          ls_done_list     TYPE  /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list,
          lv_timestamp     TYPE timestampl.
    DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).

    DATA(lo_data_service_common) = CAST /aif/if_data_service_common( cl_abap_testdouble=>create( '/AIF/IF_DATA_SERVICE_COMMON' ) ).
    mr_cut->mo_data_service_common = lo_data_service_common.
    cl_abap_testdouble=>configure_call( lo_data_service_common )->ignore_all_parameters( )->returning( abap_false ).
    lo_data_service_common->is_emergency_correction( VALUE #( ) ).

    ls_change_data   = VALUE #(   value_new = 'M111_0'
                                  timestamp  = '20200504122559.1234567' ).
    ls_keys_data = VALUE #(  ns = 'TEST_1'
                            ifname =  'TEST_1'
                            ifver  = '1'
                            msgguid = 'GUID111'
                            line_nr  = '1'
                            path    = 'RAW_GLOABL-NS'
                              ).
    ls_changed_data = ls_keys_data.
    ls_changed_data-value_new = ls_change_data-value_new.
    ls_changed_data-timestamp = ls_change_data-timestamp.
    ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.
    mr_cut->mo_payload_handle = lo_payload_handle.
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'ES_BUSI_DATA' value = ls_changed_data )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data( ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_keys_data )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_payload_handle )->set_parameter(
                     name = 'IV_TIMESTAMP' value = lv_timestamp )->set_parameter(
                     name = 'CS_PAYLOAD_DATA' value = ls_changed_data )->and_expect( )->is_called_once( ).
        lo_payload_handle->change_payload_via_path(
                             EXPORTING    iv_timestamp     = lv_timestamp
                             CHANGING     cs_payload_data  = ls_changed_data ).

        cl_abap_testdouble=>configure_call( mr_patch_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_changed_data )->and_expect( )->is_called_once( ).
        mr_patch_response->set_busi_data( ls_changed_data ).
        cl_abap_testdouble=>configure_call( mr_patch_response )->set_parameter( name = 'IS_TODO_LIST' value = ls_done_list )->and_expect( )->is_called_once( ).
        mr_patch_response->set_is_done( ls_done_list ).
        TEST-INJECTION get_change_with_restart.
          lv_with_restart = 'true'.
        END-TEST-INJECTION.
        mr_cut->patch_entity_changed_field(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD patch_changed_field_error.
    DATA: lr_request_info     TYPE REF TO /iwbep/if_v4_request_info,
          lr_request_info_pro TYPE REF TO /iwbep/cl_v4_request_info_pro,
          ls_changed_data     TYPE /aif/s_payload_change,
          ls_keys_data        TYPE /aif/s_payload_change,
          ls_change_data      TYPE /aif/s_payload_change,
          ls_done_list        TYPE  /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list,
          lv_timestamp        TYPE timestampl.
*    DATA(lo_payload_handle) = CAST /aif/if_payload_handler( cl_abap_testdouble=>create( '/AIF/IF_PAYLOAD_HANDLER' ) ).
    DATA(lo_data_service_common) = CAST /aif/if_data_service_common( cl_abap_testdouble=>create( '/AIF/IF_DATA_SERVICE_COMMON' ) ).
    mr_cut->mo_data_service_common = lo_data_service_common.
    cl_abap_testdouble=>configure_call( lo_data_service_common )->ignore_all_parameters( )->returning( abap_false ).
    lo_data_service_common->is_emergency_correction( VALUE #( ) ).
    lr_request_info  = CAST /iwbep/if_v4_request_info( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQUEST_INFO' ) ).
*    CREATE OBJECT lr_REQUEST_INFO_PRO EXPORTING IO_REQUEST_INFO =  lr_request_info  .
    ls_change_data   = VALUE #(   value_new = 'M111_0'
                                  timestamp  = '20200504122559.1234567' ).
    ls_keys_data = VALUE #(  ns = 'TEST_1'
                            ifname =  'TEST_1'
                            ifver  = '1'
                            msgguid = 'GUID111'
                            line_nr  = '1'
                            path    = 'RAW_GLOABL-NS'
                              ).
    ls_changed_data = ls_keys_data.
    ls_changed_data-value_new = ls_change_data-value_new.
    ls_changed_data-timestamp = ls_change_data-timestamp.
    ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.
*    mr_cut->mo_payload_handle = lo_payload_handle.
    TRY.
*        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'ES_BUSI_DATA' value = ls_changed_data )->and_expect( )->is_called_once( ).
*        mr_patch_request->get_busi_data( ).
*        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_keys_data )->and_expect( )->is_called_once( ).
*        mr_patch_request->get_key_data( ).
*        cl_abap_testdouble=>configure_call( lo_payload_handle )->raise_exception( new /aif/cx_error_handling_general( ) )->and_expect( )->is_called_once( ).
*        lo_payload_handle->change_payload_via_path(
*                             EXPORTING    iv_timestamp     = lv_timestamp
*                             CHANGING     cs_payload_data  = ls_changed_data ).
        TEST-INJECTION get_change_with_restart.
          lv_with_restart = 'false'.
        END-TEST-INJECTION.
        mr_cut->patch_entity_changed_field(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
        DATA(lv_exception) = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_true( act  = lv_exception ).
  ENDMETHOD.
  METHOD patch_entity_payload.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_changed_data TYPE /aif/s_payload_change,
          ls_keys_data    TYPE /aif/s_payload_change,
          ls_change_data  TYPE /aif/s_payload_change,
          ls_done_list    TYPE  /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list,
          lv_timestamp    TYPE timestampl.
    lv_entitytype = /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-payload_field_value_change.
    DATA(lo_data_service_common) = CAST /aif/if_data_service_common( cl_abap_testdouble=>create( '/AIF/IF_DATA_SERVICE_COMMON' ) ).
    mr_cut->mo_data_service_common = lo_data_service_common.
    cl_abap_testdouble=>configure_call( lo_data_service_common )->ignore_all_parameters( )->returning( abap_false ).
    lo_data_service_common->is_emergency_correction( VALUE #( ) ).
    ls_change_data   = VALUE #(   value_new = 'M111_0'
                                  timestamp  = '20200504122559.1234567' ).
    ls_keys_data = VALUE #(  ns = 'TEST_1'
                            ifname =  'TEST_1'
                            ifver  = '1'
                            msgguid = 'GUID111'
                            line_nr  = '1'
                            path    = 'RAW_GLOABL-NS'
                              ).
    ls_changed_data = ls_keys_data.
    ls_changed_data-value_new = ls_change_data-value_new.
    ls_changed_data-timestamp = ls_change_data-timestamp.
    ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.

    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        TEST-INJECTION get_change_with_restart.
          lv_with_restart = 'true'.
        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD patch_entity_payload_undefine.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
*          lr_intermedie_dp TYPE REF TO /iwbep/if_v4_dp_intermediate,
          ls_changed_data TYPE /aif/s_payload_change,
          ls_keys_data    TYPE /aif/s_payload_change,
          ls_change_data  TYPE /aif/s_payload_change,
          ls_done_list    TYPE  /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list,
          lv_timestamp    TYPE timestampl.
    lv_entitytype = 'Team'.
*    lr_intermedie_dp  = CAST /iwbep/if_v4_dp_intermediate( cl_abap_testdouble=>create( '/IWBEP/IF_V4_DP_INTERMEDIATE' ) ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general .
        DATA lv_flag TYPE /aif/boolean.
        lv_flag = abap_true.
    ENDTRY.
    cl_abap_unit_assert=>assert_true( act  = lv_flag ).
    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).

  ENDMETHOD.

  METHOD check_modification_conditions.

    DATA: lv_entitytype TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          lo_request    TYPE REF TO /iwbep/if_v4_requ_intm_cond,
          lo_response   TYPE REF TO /iwbep/if_v4_resp_intm_cond.
    lo_request  ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_COND' ).
    lo_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_COND' ).
*   first branch: change payload
    TRY.
        lv_entitytype =  /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-payload_field_value_change.
        cl_abap_testdouble=>configure_call( lo_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        lo_request->get_entity_type( ).

*        cl_abap_testdouble=>configure_call( mr_patch_response )->set_parameter( name = 'IS_TODO_LIST' value = ls_done_list )->and_expect( )->is_called_once( ).
*        mr_patch_response->set_is_done( ls_done_list ).
        mr_cut->/iwbep/if_v4_dp_intermediate~check_modification_conditions(
          EXPORTING
            io_request =  lo_request
            io_response = lo_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_HANDLER .

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_request ).
    cl_abap_testdouble=>verify_expectations( lo_response ).
  ENDMETHOD.
  METHOD    check_modification_conditiono.
    DATA: lv_entitytype TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          lo_request    TYPE REF TO /iwbep/if_v4_requ_intm_cond,
          lo_response   TYPE REF TO /iwbep/if_v4_resp_intm_cond.
    lo_request  ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_COND' ).
    lo_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_COND' ).
*   second branch: custom data link.
    TRY.
        lv_entitytype =  /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-custom_link.
        cl_abap_testdouble=>configure_call( lo_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        lo_request->get_entity_type( ).
        TEST-INJECTION other_condition.

        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_intermediate~check_modification_conditions(
          EXPORTING
            io_request =  lo_request
            io_response = lo_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_HANDLER .

    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_request ).
    cl_abap_testdouble=>verify_expectations( lo_response ).
  ENDMETHOD.

  METHOD read_list_ibnappidvaluehelp.

    DATA:
      lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_todo_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list.
    DATA:
      lt_ibn_app_ids   TYPE STANDARD TABLE OF sui_tm_mm_app,
      lt_ibn_app_texts TYPE STANDARD TABLE OF sui_tm_mm_appt,
      lt_exp_datas     TYPE STANDARD TABLE OF /aif/s_ibn_appid_valuehelp
      .

    lv_entityset_name = 'IBNAPPIDVALUEHELPSET'.

    lt_ibn_app_ids = VALUE #( ( app_id = 'App1' ) ).
    lt_ibn_app_texts = VALUE #( ( app_id = 'App1' langu = sy-langu tile_title = 'Demp App1' ) ).

    environment->insert_test_data( lt_ibn_app_ids ).
    environment->insert_test_data( lt_ibn_app_texts ).

    lt_exp_datas = VALUE #( ( app_id = 'App1' tile_title = 'Demp App1' ) ).

    ls_todo_list-process-filter = abap_false.

    TRY.

        TEST-INJECTION ts_cfunc_auth_check.
          lv_subrc = '0'.
        END-TEST-INJECTION.

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_datas )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_datas ).

        mr_cut->read_list_ibnappidvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_ibnappid_filter.

    DATA:
      lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_todo_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      lt_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range   TYPE /aif/cl_monitoring_odata_dpc=>ty_ibnappid_filter_range
      .
    DATA:
      lt_ibn_app_ids   TYPE STANDARD TABLE OF sui_tm_mm_app,
      lt_ibn_app_texts TYPE STANDARD TABLE OF sui_tm_mm_appt,
      lt_exp_datas     TYPE STANDARD TABLE OF /aif/s_ibn_appid_valuehelp
      .


    lt_property_path = VALUE #( ( CONV #( 'APP_ID' ) )
                                ( CONV #( 'TILE_TITLE' ) ) ).

    ls_filter_range = VALUE #( app_id = VALUE #( ( sign = 'I' option = 'EQ' low = 'App1' ) )
                               tile_title = VALUE #( ( sign = 'I' option = 'EQ' low = 'Demp App1' ) ) ).

    lt_ibn_app_ids = VALUE #( ( app_id = 'App1' ) ).
    lt_ibn_app_texts = VALUE #( ( app_id = 'App1' langu = sy-langu tile_title = 'Demp App1' ) ).

    environment->insert_test_data( lt_ibn_app_ids ).
    environment->insert_test_data( lt_ibn_app_texts ).

    lt_exp_datas = VALUE #( ( app_id = 'App1' tile_title = 'Demp App1' ) ).

    TRY.
        TEST-INJECTION ts_cfunc_auth_check.
          lv_subrc = '0'.
        END-TEST-INJECTION.

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-app_id )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'APP_ID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-tile_title )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'TILE_TITLE' ).

        lv_entityset_name = 'IBNAPPIDVALUEHELPSET'.
        ls_todo_list-process-filter = abap_true.
        ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                                return = VALUE #( busi_data = abap_true count = abap_false ) ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

*        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_datas )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_datas ).

        mr_cut->read_list_ibnappidvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_ibnappid_filter2.

    DATA:
      lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_todo_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      lt_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range   TYPE /aif/cl_monitoring_odata_dpc=>ty_ibnappid_filter_range
      .
    DATA:
      lt_ibn_app_ids   TYPE STANDARD TABLE OF sui_tm_mm_app,
      lt_ibn_app_texts TYPE STANDARD TABLE OF sui_tm_mm_appt,
      lt_exp_datas     TYPE STANDARD TABLE OF /aif/s_ibn_appid_valuehelp
      .


    lt_property_path = VALUE #( ( CONV #( 'APP_ID' ) )
                                ( CONV #( 'TILE_TITLE' ) )
                                ( CONV #( 'OTHERS' ) ) ).

    ls_filter_range = VALUE #( app_id = VALUE #( ( sign = 'E' option = 'EQ' low = 'App1' ) )
                               tile_title = VALUE #( ( sign = 'E' option = 'EQ' low = 'Demp App1' ) ) ).

    lt_ibn_app_ids = VALUE #( ( app_id = 'App1' ) ).
    lt_ibn_app_texts = VALUE #( ( app_id = 'App1' langu = sy-langu tile_title = 'Demp App1' ) ).

    environment->insert_test_data( lt_ibn_app_ids ).
    environment->insert_test_data( lt_ibn_app_texts ).

*    lt_exp_datas = VALUE #( ( app_id = 'App1' tile_title = 'Demp App1' ) ).

    TRY.
        TEST-INJECTION ts_cfunc_auth_check.
          lv_subrc = '0'.
        END-TEST-INJECTION.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_props_with_ranges( ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-app_id )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'APP_ID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-tile_title )->and_expect( )->is_called_once( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'TILE_TITLE' ).


        ls_todo_list-process-filter = abap_true.
        ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                                return = VALUE #( busi_data = abap_true count = abap_false ) ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

*        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_datas )->and_expect( )->is_called_once( ).

        mr_list_response->set_busi_data( lt_exp_datas ).

        mr_cut->read_list_ibnappidvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_ibnappid_filter3.
    DATA:
      lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_todo_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      lt_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range   TYPE /aif/cl_monitoring_odata_dpc=>ty_ibnappid_filter_range
      .
    DATA:
      lt_ibn_app_ids   TYPE STANDARD TABLE OF sui_tm_mm_app,
      lt_ibn_app_texts TYPE STANDARD TABLE OF sui_tm_mm_appt,
      lt_exp_datas     TYPE STANDARD TABLE OF /aif/s_ibn_appid_valuehelp
      .

    ls_filter_range = VALUE #( app_id = VALUE #( ( sign = 'E' option = 'EQ' low = 'App1' ) )
    tile_title = VALUE #( ( sign = 'E' option = 'EQ' low = 'Demp App1' ) ) ).

    lt_ibn_app_ids = VALUE #( ( app_id = 'App1' ) ).
    lt_ibn_app_texts = VALUE #( ( app_id = 'App1' langu = sy-langu tile_title = 'Demp App1' ) ).

    environment->insert_test_data( lt_ibn_app_ids ).
    environment->insert_test_data( lt_ibn_app_texts ).

    lt_exp_datas = VALUE #( ( app_id = 'App1' tile_title = 'Demp App1' ) ).

    TRY.

        TEST-INJECTION ts_cfunc_auth_check.
          lv_subrc = '0'.
        END-TEST-INJECTION.

        ls_todo_list-process-filter = abap_true.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_list_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_datas )->and_expect( )->is_called_once( ).

        mr_list_response->set_busi_data( lt_exp_datas ).

        mr_cut->read_list_ibnappidvaluehelp(
        EXPORTING
          io_request = mr_list_request
          io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.

  METHOD read_list_ibnappid_no_auth.
    DATA:
      lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_todo_list      TYPE /iwbep/if_v4_requ_basic_list=>ty_s_todo_list,
      lt_property_path  TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      ls_filter_range   TYPE /aif/cl_monitoring_odata_dpc=>ty_ibnappid_filter_range
      .
    DATA:
      lt_ibn_app_ids   TYPE STANDARD TABLE OF sui_tm_mm_app,
      lt_ibn_app_texts TYPE STANDARD TABLE OF sui_tm_mm_appt,
      lt_exp_datas     TYPE STANDARD TABLE OF /aif/s_ibn_appid_valuehelp
      .


    lt_property_path = VALUE #( ( CONV #( 'APP_ID' ) )
                                ( CONV #( 'TILE_TITLE' ) )
                                ( CONV #( 'OTHERS' ) ) ).

    ls_filter_range = VALUE #( app_id = VALUE #( ( sign = 'E' option = 'EQ' low = 'App1' ) )
                               tile_title = VALUE #( ( sign = 'E' option = 'EQ' low = 'Demp App1' ) ) ).

    lt_ibn_app_ids = VALUE #( ( app_id = 'App1' ) ).
    lt_ibn_app_texts = VALUE #( ( app_id = 'App1' langu = sy-langu tile_title = 'Demp App1' ) ).

    environment->insert_test_data( lt_ibn_app_ids ).
    environment->insert_test_data( lt_ibn_app_texts ).

*    lt_exp_datas = VALUE #( ( app_id = 'App1' tile_title = 'Demp App1' ) ).

    TRY.
        TEST-INJECTION ts_cfunc_auth_check.
          lv_subrc = '12'.
        END-TEST-INJECTION.

        ls_todo_list-process-filter = abap_true.
        ls_todo_list = VALUE #( process = VALUE #( filter = abap_true orderby = abap_false skip = abap_false top = abap_false )
                                return = VALUE #( busi_data = abap_true count = abap_false ) ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_PROPERTY_PATH' value = lt_property_path )->and_expect( )->is_never_called( ).
        mr_list_request->get_filter_props_with_ranges( ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-app_id )->and_expect( )->is_never_called( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'APP_ID' ).
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ET_RANGE' value = ls_filter_range-tile_title )->and_expect( )->is_never_called( ).
        mr_list_request->get_filter_ranges_for_prop( iv_property_path = 'TILE_TITLE' ).

        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_never_called( ).
        mr_list_request->get_todos( ).

*        cl_abap_testdouble=>configure_call( mr_list_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        cl_abap_testdouble=>configure_call( mr_list_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_exp_datas )->and_expect( )->is_called_once( ).
        mr_list_response->set_busi_data( lt_exp_datas ).

        mr_cut->read_list_ibnappidvaluehelp(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).

      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_list_response ).
  ENDMETHOD.


  METHOD read_entity_list_ibnapp.
    DATA: lv_entityset_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_entityset_name = 'IBNAPPIDVALUEHELPSET'.

    TRY.
        cl_abap_testdouble=>configure_call( mr_list_request )->set_parameter( name = 'EV_ENTITY_SET_NAME' value = lv_entityset_name )->and_expect( )->is_called_once( ).
        mr_list_request->get_entity_set( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity_list(
          EXPORTING
            io_request = mr_list_request
            io_response = mr_list_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_list_request ).
    cl_abap_testdouble=>verify_expectations( mr_action_response ).
  ENDMETHOD.
  METHOD read_entity_list_ifstatic.
    DATA lt_statistic TYPE STANDARD TABLE OF /aif/s_interfacestatistics.
    DATA lt_statistic_raw TYPE /aif/tt_if_statistic_all_info.
    DATA lo_request TYPE REF TO /iwbep/if_v4_requ_basic_list.
    DATA lo_response TYPE REF TO /iwbep/if_v4_resp_basic_list.
    DATA ls_time_span TYPE /aif/time_span_st.
    DATA lv_count TYPE int4.
    TYPES:
      BEGIN OF ty_s_key,
        p_datetime_from TYPE /aif/processing_tstmp,
        p_datetime_to   TYPE /aif/processing_tstmp,
      END OF ty_s_key.
    DATA: ls_key TYPE    ty_s_key,
          lt_key TYPE STANDARD TABLE OF ty_s_key.

    lt_key = VALUE #( ( p_datetime_from = '20210101000000' p_datetime_to = '20210131235959' ) ).
    ls_time_span-date_from = '20210101'.
    ls_time_span-time_from = '000000'.
    ls_time_span-date_to = '20210131'.
    ls_time_span-time_to = '235959'.
    lt_statistic_raw = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST1' ifver = '1' ifdisplay = 'TEST - IF_TEST1 - 1' count_all = '3' count_w = '0' count_e = '3' count_a = '0' count_i = '0' count_s = '0' count_c = '0')
                                ( ns = 'TEST' ifname = 'IF_TEST2' ifver = '1' ifdisplay = 'intrf. display name' count_all = '8' count_w = '0' count_e = '2' count_a = '0' count_i = '0' count_s = '6' count_c = '0')
    ).

    lt_statistic = VALUE #( ( ns = 'TEST' ifname = 'IF_TEST1' ifver = '1' ifkey = 'TEST - IF_TEST1 - 1' ifdisplay = 'TEST - IF_TEST1 - 1' count_all = '3' count_w = '0' count_e = '3' count_a = '0' count_i = '0' count_s = '0' count_c = '0')
                            ( ns = 'TEST' ifname = 'IF_TEST2' ifver = '1' ifkey = 'intrf. display name' ifdisplay = 'intrf. display name' count_all = '8' count_w = '0' count_e = '2' count_a = '0' count_i = '0' count_s = '6' count_c = '0')
    ).
    lv_count = 2.

    TRY.
        lo_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_LIST' ).
        lo_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_LIST' ).

        cl_abap_testdouble=>configure_call( lo_request )->set_parameter( name = 'ET_KEY_DATA' value = lt_key )->and_expect( )->is_called_once( ).
        lo_request->get_key_data( ).

        cl_abap_testdouble=>configure_call( mo_facade_overview )->returning( lt_statistic_raw )->and_expect( )->is_called_once( ).
        mo_facade_overview->get_user_interface_statistic( is_time_span = ls_time_span ).

        cl_abap_testdouble=>configure_call( lo_response )->set_parameter( name = 'IT_BUSI_DATA' value = lt_statistic )->and_expect( )->is_called_once( ).
        lo_response->set_busi_data( lt_statistic ).

        cl_abap_testdouble=>configure_call( lo_response )->set_parameter( name = 'IV_COUNT' value = lv_count )->and_expect( )->is_called_once( ).
        lo_response->set_count( lv_count ).

        mr_cut->mo_facade_overview = mo_facade_overview.
        mr_cut->read_list_ifstatic(
          EXPORTING
            io_request  = lo_request
            io_response = lo_response ).
      CATCH /iwbep/cx_gateway.
      CATCH /AIF/CX_ERROR_HANDLING_GENERAL.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_request ).
    cl_abap_testdouble=>verify_expectations( lo_response ).
  ENDMETHOD.
  METHOD read_entity_license.
    DATA: lv_entity_type_name TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    lv_entity_type_name = 'LICENSECHECK'.
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entity_type_name )->and_expect( )->is_called_once( ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_request->get_todos( ).

        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
  METHOD read_entity_license_app.
    DATA:
      ls_todo_list     TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
      ls_license       TYPE /aif/license_check,
      ls_alert_message TYPE bapiret2,
      ls_key           TYPE /aif/license_check.

    DATA(lo_license_check_manager) = CAST /aif/if_license_check_manager( cl_abap_testdouble=>create( '/AIF/IF_LICENSE_CHECK_MANAGER' ) ).
    mr_cut->mo_license_check_manager = lo_license_check_manager.
    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).

    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).

    " app = 01
    ls_key = VALUE #( ns = '' app = '01' ).

    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key ).
        lo_entity_request->get_key_data( ).

        cl_abap_testdouble=>configure_call( lo_license_check_manager )->returning( ls_alert_message ).
        lo_license_check_manager->check_for_monitoring( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_license ).
        lo_entity_response->set_busi_data( ls_license ).

        mr_cut->read_entity_license(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

    " app = 02
    ls_key = VALUE #( ns = '/STD' app = '02' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key ).
        lo_entity_request->get_key_data( ).

        cl_abap_testdouble=>configure_call( lo_license_check_manager )->returning( ls_alert_message ).
        lo_license_check_manager->check_for_monitoring( iv_ns = '/STD' ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_license ).
        lo_entity_response->set_busi_data( ls_license ).

        mr_cut->read_entity_license(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).

    " app = 03
    ls_key = VALUE #( ns = '' app = '03' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_key ).
        lo_entity_request->get_key_data( ).

        cl_abap_testdouble=>configure_call( lo_license_check_manager )->returning( ls_alert_message ).
        lo_license_check_manager->check_for_monitoring( iv_uname = '' ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->set_parameter( name = 'IS_BUSI_DATA' value = ls_license ).
        lo_entity_response->set_busi_data( ls_license ).

        mr_cut->read_entity_license(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( lo_entity_request ).
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).
  ENDMETHOD.
ENDCLASS.

CLASS ltcl_monitoring_odata_dpc2 DEFINITION FOR TESTING
  DURATION MEDIUM
  RISK LEVEL HARMLESS
.

  PRIVATE SECTION.
    TYPES:
      BEGIN OF ty_s_customtext_key.
        INCLUDE TYPE /aif/ifkeys AS aifkeys.
    TYPES:
        ctextid TYPE /aif/ctextid,
      END OF ty_s_customtext_key.

    DATA:
      mr_patch_request   TYPE REF TO /iwbep/if_v4_requ_intm_patch,
      mr_patch_response  TYPE REF TO /iwbep/if_v4_resp_intm_patch,
      mr_create_request  TYPE REF TO /iwbep/if_v4_requ_basic_create,
      mr_create_response TYPE REF TO /iwbep/if_v4_resp_basic_create,
      mr_update_request  TYPE REF TO /iwbep/if_v4_requ_basic_update,
      mr_update_response TYPE REF TO /iwbep/if_v4_resp_basic_update,
      mr_delete_request  TYPE REF TO /iwbep/if_v4_requ_basic_delete,
      mr_delete_response TYPE REF TO /iwbep/if_v4_resp_basic_delete,
      mo_custom_data     TYPE REF TO /aif/if_custom_data_handler,
      mr_cut             TYPE REF TO /aif/cl_monitoring_odata_dpc.  "class under test

    METHODS:
      setup,
      teardown,
      read_ref_target_key_data FOR TESTING,
      create_entity_cfunction FOR TESTING,
      update_entity_cfunction FOR TESTING,
      patch_entity_cfunction FOR TESTING,
      patch_entity_cfunction_e1 FOR TESTING,
      patch_entity_cfunction_e2 FOR TESTING,
      delete_entity_cfunction FOR TESTING,
      create_entity_ctext FOR TESTING,
      update_entity_ctext FOR TESTING,
      patch_entity_ctext FOR TESTING,
      patch_entity_ctext_e FOR TESTING,
      patch_entity_ctext_partial FOR TESTING,
      delete_entity_ctext FOR TESTING,
      create_entity_chint FOR TESTING,
      update_entity_chint FOR TESTING,
      patch_entity_chint FOR TESTING,
      patch_entity_chint_e1 FOR TESTING,
      patch_entity_chint_e2 FOR TESTING,
      delete_entity_chint FOR TESTING,
      create_entity_clink FOR TESTING,
      update_entity_clink FOR TESTING,
      patch_entity_clink FOR TESTING,
      patch_entity_clink_e FOR TESTING,
      delete_entity_clink FOR TESTING,
      create_entity_undefined FOR TESTING,
      update_entity_undefined FOR TESTING,
      delete_entity_undefined FOR TESTING,
      read_entity_message_log_text FOR TESTING.
ENDCLASS.       "ltcl_Monitoring_Odata_Dpc2


CLASS ltcl_monitoring_odata_dpc2 IMPLEMENTATION.

  METHOD setup.
    CREATE OBJECT mr_cut.
    mr_patch_request  ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_INTM_PATCH' ).
    mr_patch_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_INTM_PATCH' ).
    mr_create_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_CREATE' ).
    mr_create_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_CREATE' ).

    mr_update_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_UPDATE' ).
    mr_update_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_UPDATE' ).
    mr_delete_request ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_DELETE' ).
    mr_delete_response ?= cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_DELETE' ).
    mo_custom_data ?= cl_abap_testdouble=>create( '/AIF/IF_CUSTOM_DATA_HANDLER' ).
  ENDMETHOD.
  METHOD teardown.
    CLEAR:
    mo_custom_data,
    mr_patch_request,
    mr_patch_request,
    mr_create_request,
    mr_create_response,
    mr_update_request,
    mr_update_response,
    mr_delete_request,
    mr_delete_response.
  ENDMETHOD.
  METHOD read_ref_target_key_data.

    TRY.
        DATA(ls_todo_list) = VALUE /iwbep/if_v4_requ_basic_ref_r=>ty_s_todo_list(
          process = VALUE #( source_key_data = abap_true )
        ).
        DATA(ls_key_data) = VALUE /aif/s_message_key( ).
        DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_REF_R' ) ).
        DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_REF_R' ) ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_SOURCE_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-indextablegeneric ).
        lo_entity_request->get_source_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_NAVIGATION_PROP_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_property_names-internal-nav_validation ).
        lo_entity_request->get_navigation_prop( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_SOURCE_KEY_DATA' value = ls_key_data ).
        lo_entity_request->get_source_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_called_once( ).
        lo_entity_response->set_target_key_data( EXPORTING is_target_key_data = ls_key_data ).
        ls_todo_list-process-target_key_data = abap_true.
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_called_once( ).
        lo_entity_response->set_is_done( EXPORTING is_todo_list = ls_todo_list-process ).

        mr_cut->/iwbep/if_v4_dp_basic~read_ref_target_key_data(
          io_request = lo_entity_request
          io_response = lo_entity_response ).
        cl_abap_testdouble=>verify_expectations( lo_entity_response ).
        lo_entity_request = CAST /iwbep/if_v4_requ_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_REF_R' ) ).
        lo_entity_response = CAST /iwbep/if_v4_resp_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_REF_R' ) ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_SOURCE_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-indextablegeneric ).
        lo_entity_request->get_source_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_NAVIGATION_PROP_NAME' value = '' ).
        lo_entity_request->get_navigation_prop( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_SOURCE_KEY_DATA' value = ls_key_data ).
        lo_entity_request->get_source_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_never_called( ).
        lo_entity_response->set_target_key_data( EXPORTING is_target_key_data = ls_key_data ).
        ls_todo_list-process-target_key_data = abap_true.
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_never_called( ).
        lo_entity_response->set_is_done( EXPORTING is_todo_list = ls_todo_list-process ).
        mr_cut->/iwbep/if_v4_dp_basic~read_ref_target_key_data(
          io_request = lo_entity_request
          io_response = lo_entity_response ).
        cl_abap_testdouble=>verify_expectations( lo_entity_response ).

        lo_entity_request = CAST /iwbep/if_v4_requ_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_REF_R' ) ).
        lo_entity_response = CAST /iwbep/if_v4_resp_basic_ref_r( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_REF_R' ) ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_SOURCE_ENTITY_TYPE_NAME' value = '' ).
        lo_entity_request->get_source_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_NAVIGATION_PROP_NAME' value = '' ).
        lo_entity_request->get_navigation_prop( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_SOURCE_KEY_DATA' value = ls_key_data ).
        lo_entity_request->get_source_key_data( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list ).
        lo_entity_request->get_todos( ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_never_called( ).
        lo_entity_response->set_target_key_data( EXPORTING is_target_key_data = ls_key_data ).
        ls_todo_list-process-target_key_data = abap_true.
        cl_abap_testdouble=>configure_call( lo_entity_response )->and_expect( )->is_never_called( ).
        lo_entity_response->set_is_done( EXPORTING is_todo_list = ls_todo_list-process ).
        mr_cut->/iwbep/if_v4_dp_basic~read_ref_target_key_data(
          io_request = lo_entity_request
          io_response = lo_entity_response ).
        cl_abap_testdouble=>verify_expectations( lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.

  ENDMETHOD.


  METHOD create_entity_cfunction.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_function.
    TRY.
        cl_abap_testdouble=>configure_call( mr_create_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_create_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~create_entity(
          EXPORTING
            io_request =  mr_create_request
            io_response = mr_create_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_create_request ).
    cl_abap_testdouble=>verify_expectations( mr_create_response ).
  ENDMETHOD.

  METHOD update_entity_cfunction.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA: ls_cfunc_requ    TYPE /aif/s_custom_function.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_function.
    TRY.
        cl_abap_testdouble=>configure_call( mr_update_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_update_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->update_custom_function( is_custom_function = ls_cfunc_requ ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~update_entity(
          EXPORTING
            io_request =  mr_update_request
            io_response = mr_update_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_update_request ).
    cl_abap_testdouble=>verify_expectations( mr_update_response ).
  ENDMETHOD.

  METHOD patch_entity_cfunction.
    DATA ls_cfunc_requ   TYPE /aif/s_custom_function.
    DATA ls_cfunc_new    TYPE /aif/s_custom_function.
    DATA ls_cfunc_key    TYPE /aif/if_monitoring_odata_glbl=>ty_s_customfunction_key.
    DATA ls_done_list    TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.
    DATA ls_todo_list    TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list.
    DATA lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA lv_property_path   TYPE string.
    DATA lt_p_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path.

    lv_entitytype = /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-custom_function.
    ls_cfunc_requ  = VALUE #(   text = 'test_patch'
                                tooltip  = 'test_patch' ).
    ls_cfunc_key = VALUE #(  ns = 'TEST_1'
                            ifname =  'TEST_1'
                            ifver  = '1'
                            idfunc = 'FUNCID123456'
                              ).
    ls_cfunc_new = ls_cfunc_key.
    ls_cfunc_new-text = ls_cfunc_requ-text.
    ls_cfunc_new-tooltip = ls_cfunc_requ-tooltip.
    ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.
    lv_property_path = 'VISIBILITY'.
    APPEND lv_property_path TO  lt_p_property_path .
    TRY.
        ls_todo_list-process-partial_busi_data = abap_true.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_cfunc_requ )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_key_data' value = ls_cfunc_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'et_provided_property_path' value = lt_p_property_path )->and_expect( )->is_called_once( ).
        mr_patch_request->get_provided_properties( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_cfunc_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_cfunc_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_cfunc_key-ifver
            )->set_parameter( name = 'iv_cfunc_id' value = ls_cfunc_key-idfunc
            )->set_parameter( name = 'ES_DATA' value = ls_cfunc_new
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_function(
                            iv_ns     =  ls_cfunc_key-ns
                            iv_ifname =  ls_cfunc_key-ifname
                            iv_ifver  =  ls_cfunc_key-ifver
                            iv_cfunc_id = ls_cfunc_key-idfunc ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.

  METHOD patch_entity_cfunction_e1.
    DATA ls_cfunc_requ   TYPE /aif/s_custom_function.
    DATA ls_cfunc_new    TYPE /aif/s_custom_function.
    DATA ls_cfunc_key    TYPE /aif/if_monitoring_odata_glbl=>ty_s_customfunction_key.
    DATA lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_entitytype = /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-custom_function.
    ls_cfunc_requ  = VALUE #(   text = 'test_patch'
                                tooltip  = 'test_patch' ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_cfunc_requ )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_cfunc_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_cfunc_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_cfunc_key-ifver
            )->set_parameter( name = 'iv_cfunc_id' value = ls_cfunc_key-idfunc
            )->set_parameter( name = 'ES_DATA' value = ls_cfunc_new
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_function(
                            iv_ns     =  ls_cfunc_key-ns
                            iv_ifname =  ls_cfunc_key-ifname
                            iv_ifver  =  ls_cfunc_key-ifver
                            iv_cfunc_id = ls_cfunc_key-idfunc ).
*        mr_cut->mo_custom_data = mo_custom_data.
        CLEAR mr_cut->mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD patch_entity_cfunction_e2.
    DATA ls_cfunc_requ   TYPE /aif/s_custom_function.
    DATA ls_cfunc_new    TYPE /aif/s_custom_function.
    DATA ls_cfunc_key    TYPE /aif/if_monitoring_odata_glbl=>ty_s_customfunction_key.
    DATA ls_done_list    TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_process_list.
    DATA ls_todo_list    TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list.
    DATA lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.

    lv_entitytype = /aif/cl_monitoring_odata_dpc=>gc_entity_type_names-internal-custom_function.
    ls_cfunc_requ  = VALUE #(   text = 'test_patch'
                                tooltip  = 'test_patch' ).
    ls_cfunc_key = VALUE #(  ns = 'TEST_1'
                            ifname =  'TEST_1'
                            ifver  = '1'
                            idfunc = 'FUNCID123456'
                              ).
    ls_cfunc_new = ls_cfunc_key.
    ls_cfunc_new-text = ls_cfunc_requ-text.
    ls_cfunc_new-tooltip = ls_cfunc_requ-tooltip.
    ls_done_list-key_data = ls_done_list-partial_busi_data  = ls_done_list-busi_data =  abap_true.
*    lv_property_path = 'VISIBILITY'.
*    APPEND lv_property_path TO  lt_p_property_path .
    TRY.
        ls_todo_list-process-partial_busi_data = abap_false.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_cfunc_requ )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_key_data' value = ls_cfunc_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).

        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_cfunc_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_cfunc_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_cfunc_key-ifver
            )->set_parameter( name = 'iv_cfunc_id' value = ls_cfunc_key-idfunc
            )->set_parameter( name = 'ES_DATA' value = ls_cfunc_new
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_function(
                            iv_ns     =  ls_cfunc_key-ns
                            iv_ifname =  ls_cfunc_key-ifname
                            iv_ifver  =  ls_cfunc_key-ifver
                            iv_cfunc_id = ls_cfunc_key-idfunc ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD delete_entity_cfunction.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA: ls_cfunc_key    TYPE /aif/if_monitoring_odata_glbl=>ty_s_customfunction_key.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_function.

    TRY.
        cl_abap_testdouble=>configure_call( mr_delete_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_delete_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->delete_custom_function(
                          is_interface_key = ls_cfunc_key-aifkeys iv_custom_function_id = ls_cfunc_key-idfunc  ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~delete_entity(
          EXPORTING
            io_request =  mr_delete_request
            io_response = mr_delete_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_delete_request ).
    cl_abap_testdouble=>verify_expectations( mr_delete_response ).
  ENDMETHOD.

  METHOD create_entity_ctext.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    TRY.
        cl_abap_testdouble=>configure_call( mr_create_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_create_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~create_entity(
          EXPORTING
            io_request =  mr_create_request
            io_response = mr_create_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_create_request ).
    cl_abap_testdouble=>verify_expectations( mr_create_response ).
  ENDMETHOD.

  METHOD update_entity_ctext.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA: ls_ctext_requ   TYPE /aif/s_custom_text.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    TRY.
        cl_abap_testdouble=>configure_call( mr_update_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_update_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->update_custom_text( is_custom_text = ls_ctext_requ ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~update_entity(
          EXPORTING
            io_request =  mr_update_request
            io_response = mr_update_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( mr_update_request ).
    cl_abap_testdouble=>verify_expectations( mr_update_response ).
  ENDMETHOD.
  METHOD patch_entity_ctext.
    DATA:
      lv_entitytype      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_text     TYPE /aif/s_custom_text,
      ls_interface_key   TYPE /aif/ifkeys,
      lv_custom_text_id  TYPE /aif/ctextid,
      ls_ctext_key       TYPE  ty_s_customtext_key,
      ls_todo_list       TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list,
      ls_ctext_requ      TYPE /aif/s_custom_text,
      lv_property_path   TYPE string,
      lt_p_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path..
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_property_path = 'VISIBILITY'.
    APPEND lv_property_path TO  lt_p_property_path .
    lv_custom_text_id = '001'.
    MOVE-CORRESPONDING ls_interface_key TO ls_custom_text.
    ls_custom_text-ctextid = lv_custom_text_id .
    ls_custom_text-visibility = 'A' .
    MOVE-CORRESPONDING ls_custom_text TO ls_ctext_key.
    ls_ctext_requ = ls_custom_text.
    TRY.
        ls_todo_list-process-partial_busi_data = abap_true.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).

        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_ctext_requ )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).

        cl_abap_testdouble=>configure_call( mr_patch_request
          )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'es_key_data' value = ls_ctext_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'et_provided_property_path' value = lt_p_property_path )->and_expect( )->is_called_once( ).
        mr_patch_request->get_provided_properties( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_interface_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_interface_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_interface_key-ifver
            )->set_parameter( name = 'IV_CTEXT_ID' value = lv_custom_text_id
            )->set_parameter( name = 'ES_DATA' value = ls_custom_text
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_text(
                            iv_ns     =  ls_interface_key-ns
                            iv_ifname =  ls_interface_key-ifname
                            iv_ifver  =  ls_interface_key-ifver
                            iv_ctext_id = lv_custom_text_id ).
        mr_cut->mo_custom_data = mo_custom_data.
*        TEST-INJECTION GET_ORIGINAL_CTEXT.
*          ls_ctext_old =  ls_custom_text.
*        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.

  METHOD patch_entity_ctext_e.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_text    TYPE /aif/s_custom_text,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_text_id TYPE /aif/ctextid.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request
          )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        CLEAR mr_cut->mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).

  ENDMETHOD.

  METHOD patch_entity_ctext_partial.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_text    TYPE /aif/s_custom_text,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_text_id TYPE /aif/ctextid,
      ls_ctext_key      TYPE  ty_s_customtext_key,
      ls_todo_list      TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list,
      ls_ctext_requ     TYPE /aif/s_custom_text.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
*    lv_property_path = 'VISIBILITY'.
*    APPEND lv_property_path TO  lt_p_property_path .
    lv_custom_text_id = '001'.
    MOVE-CORRESPONDING ls_interface_key TO ls_custom_text.
    ls_custom_text-ctextid = lv_custom_text_id .
    ls_custom_text-visibility = 'A' .
    MOVE-CORRESPONDING ls_custom_text TO ls_ctext_key.
    ls_ctext_requ = ls_custom_text.
    TRY.
        ls_todo_list-process-partial_busi_data = abap_false.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
          )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'es_key_data' value = ls_ctext_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
*        cl_abap_testdouble=>configure_call( mr_patch_request
*        )->set_parameter( name = 'et_provided_property_path' value = lt_p_property_path )->and_expect( )->is_called_once( ).
*        mr_patch_request->get_provided_properties( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_interface_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_interface_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_interface_key-ifver
            )->set_parameter( name = 'IV_CTEXT_ID' value = lv_custom_text_id
            )->set_parameter( name = 'ES_DATA' value = ls_custom_text
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_text(
                            iv_ns     =  ls_interface_key-ns
                            iv_ifname =  ls_interface_key-ifname
                            iv_ifver  =  ls_interface_key-ifver
                            iv_ctext_id = lv_custom_text_id ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).

  ENDMETHOD.

  METHOD delete_entity_ctext.
    DATA: ls_ctext_key  TYPE /aif/if_monitoring_odata_glbl=>ty_s_customtext_key,
          lv_entitytype TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_text.
    TRY.
        cl_abap_testdouble=>configure_call( mr_delete_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_delete_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->delete_custom_text( is_interface_key = ls_ctext_key-aifkeys iv_custom_text_id = ls_ctext_key-ctextid ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~delete_entity(
          EXPORTING
            io_request =  mr_delete_request
            io_response = mr_delete_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_delete_request ).
    cl_abap_testdouble=>verify_expectations( mr_delete_response ).
  ENDMETHOD.

  METHOD create_entity_chint.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    TRY.
        cl_abap_testdouble=>configure_call( mr_create_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_create_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~create_entity(
          EXPORTING
            io_request =  mr_create_request
            io_response = mr_create_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_create_request ).
    cl_abap_testdouble=>verify_expectations( mr_create_response ).
  ENDMETHOD.

  METHOD update_entity_chint.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA: ls_hint_requ    TYPE /aif/s_custom_hint.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    TRY.
        cl_abap_testdouble=>configure_call( mr_update_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_update_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->update_custom_hint( is_custom_hint = ls_hint_requ ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~update_entity(
          EXPORTING
            io_request =  mr_update_request
            io_response = mr_update_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_update_request ).
    cl_abap_testdouble=>verify_expectations( mr_update_response ).
  ENDMETHOD.

  METHOD patch_entity_chint.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_hint    TYPE /aif/s_custom_hint,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_hint_id TYPE /aif/hintid,
      ls_hint_key       TYPE /aif/if_monitoring_odata_glbl=>ty_s_customhint_key,
      ls_todo_list      TYPE        /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list..
    DATA lv_property_path   TYPE        string.
    DATA lt_p_property_path TYPE        /iwbep/if_v4_runtime_types=>ty_t_property_path.

    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_custom_hint_id = '001'.
    ls_custom_hint = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  hintid = lv_custom_hint_id ).
    MOVE-CORRESPONDING ls_custom_hint TO ls_hint_key.
    lv_property_path = 'VISIBILITY'.
    APPEND lv_property_path TO  lt_p_property_path .
    TRY.
        ls_todo_list-process-partial_busi_data = abap_true.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_custom_hint )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'es_key_data' value = ls_hint_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'et_provided_property_path' value = lt_p_property_path )->and_expect( )->is_called_once( ).
        mr_patch_request->get_provided_properties( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_interface_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_interface_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_interface_key-ifver
            )->set_parameter( name = 'IV_CHINT_ID' value = lv_custom_hint_id
            )->set_parameter( name = 'ES_DATA' value = ls_custom_hint
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_hint(
                          iv_ns  = ls_interface_key-ns
                          iv_ifname  = ls_interface_key-ifname
                          iv_ifver  = ls_interface_key-ifver
                          iv_chint_id = lv_custom_hint_id ).

        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.

  METHOD patch_entity_chint_e1.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_hint    TYPE /aif/s_custom_hint,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_hint_id TYPE /aif/hintid,
      ls_hint_key       TYPE /aif/if_monitoring_odata_glbl=>ty_s_customhint_key..
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_custom_hint_id = '001'.
    MOVE-CORRESPONDING ls_custom_hint TO ls_hint_key.
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_interface_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_interface_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_interface_key-ifver
            )->set_parameter( name = 'IV_CHINT_ID' value = lv_custom_hint_id
            )->set_parameter( name = 'ES_DATA' value = ls_custom_hint
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_hint(
                          iv_ns  = ls_interface_key-ns
                          iv_ifname  = ls_interface_key-ifname
                          iv_ifver  = ls_interface_key-ifver
                          iv_chint_id = lv_custom_hint_id ).
*        mr_cut->mo_custom_data = mo_custom_data.
        CLEAR mr_cut->mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD patch_entity_chint_e2.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_hint    TYPE /aif/s_custom_hint,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_hint_id TYPE /aif/hintid,
      ls_hint_key       TYPE /aif/if_monitoring_odata_glbl=>ty_s_customhint_key,
      ls_todo_list      TYPE        /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list..
    DATA lv_property_path   TYPE        string.
    DATA lt_p_property_path TYPE        /iwbep/if_v4_runtime_types=>ty_t_property_path.

    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_custom_hint_id = '001'.
    ls_custom_hint = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  hintid = lv_custom_hint_id ).
    MOVE-CORRESPONDING ls_custom_hint TO ls_hint_key.
    TRY.
        ls_todo_list-process-partial_busi_data = abap_false.
        ls_todo_list-return-busi_data = abap_true.
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'ES_TODO_LIST' value = ls_todo_list )->and_expect( )->is_called_once( ).
        mr_patch_request->get_todos( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
         )->set_parameter( name = 'es_busi_data' value = ls_custom_hint )->and_expect( )->is_called_once( ).
        mr_patch_request->get_busi_data(   ).
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'es_key_data' value = ls_hint_key )->and_expect( )->is_called_once( ).
        mr_patch_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'IV_NS' value = ls_interface_key-ns
            )->set_parameter( name = 'IV_IFNAME' value = ls_interface_key-ifname
            )->set_parameter( name = 'IV_IFVER' value = ls_interface_key-ifver
            )->set_parameter( name = 'IV_CHINT_ID' value = lv_custom_hint_id
            )->set_parameter( name = 'ES_DATA' value = ls_custom_hint
            )->and_expect( )->is_called_once( ).
        mo_custom_data->get_single_custom_hint(
                          iv_ns  = ls_interface_key-ns
                          iv_ifname  = ls_interface_key-ifname
                          iv_ifver  = ls_interface_key-ifver
                          iv_chint_id = lv_custom_hint_id ).

        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD delete_entity_chint.
    DATA: ls_hint_key   TYPE /aif/if_monitoring_odata_glbl=>ty_s_customhint_key,
          lv_entitytype TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_hint.
    TRY.
        cl_abap_testdouble=>configure_call( mr_delete_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_delete_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->delete_custom_hint( is_interface_key = ls_hint_key-aifkeys iv_custom_hint_id = ls_hint_key-hintid ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~delete_entity(
          EXPORTING
            io_request =  mr_delete_request
            io_response = mr_delete_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_delete_request ).
    cl_abap_testdouble=>verify_expectations( mr_delete_response ).
  ENDMETHOD.

  METHOD create_entity_undefined.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = 'UnDefined'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_create_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_create_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~create_entity(
          EXPORTING
            io_request =  mr_create_request
            io_response = mr_create_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_create_request ).
    cl_abap_testdouble=>verify_expectations( mr_create_response ).
  ENDMETHOD.

  METHOD update_entity_undefined.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = 'UnDefined'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_update_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_update_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~update_entity(
          EXPORTING
            io_request =  mr_update_request
            io_response = mr_update_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_update_request ).
    cl_abap_testdouble=>verify_expectations( mr_update_response ).
  ENDMETHOD.

  METHOD delete_entity_undefined.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = 'UnDefined'.
    TRY.
        cl_abap_testdouble=>configure_call( mr_delete_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_delete_request->get_entity_type( ).

        mr_cut->/iwbep/if_v4_dp_basic~delete_entity(
          EXPORTING
            io_request =  mr_delete_request
            io_response = mr_delete_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_delete_request ).
    cl_abap_testdouble=>verify_expectations( mr_delete_response ).
  ENDMETHOD.

  METHOD create_entity_clink.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    DATA: ls_custom_link        TYPE /aif/s_custom_link.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    ls_custom_link = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1'  clinkid = 001 ).
    TRY.
        cl_abap_testdouble=>configure_call( mr_create_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_create_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->set_parameter( name = 'is_custom_link' value = ls_custom_link
            )->and_expect( )->is_called_once( ).
        mo_custom_data->create_custom_link(
                          is_custom_link  = ls_custom_link  ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~create_entity(
          EXPORTING
            io_request =  mr_create_request
            io_response = mr_create_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_create_request ).
    cl_abap_testdouble=>verify_expectations( mr_create_response ).
  ENDMETHOD.

  METHOD update_entity_clink.
    DATA: lv_entitytype   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          ls_clink_requ   TYPE /aif/s_custom_link.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    TRY.
        cl_abap_testdouble=>configure_call( mr_update_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_update_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->update_custom_link( is_custom_link = ls_clink_requ ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~update_entity(
          EXPORTING
            io_request =  mr_update_request
            io_response = mr_update_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_update_request ).
    cl_abap_testdouble=>verify_expectations( mr_update_response ).
  ENDMETHOD.

  METHOD patch_entity_clink.
    DATA:
      lv_entitytype      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_link     TYPE /aif/s_custom_link,
      ls_interface_key   TYPE /aif/ifkeys,
      lv_custom_link_id  TYPE /aif/clinkid,
      lv_property_path   TYPE string,
      lt_p_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path.

    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_custom_link_id = '001'.

    ls_custom_link = VALUE #( aifkeys = ls_interface_key  clinkid = lv_custom_link_id ).
    lv_property_path = 'VISIBILITY'.
    APPEND lv_property_path TO  lt_p_property_path .
    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( mo_custom_data )->returning( ls_custom_link )->and_expect( )->is_called_once( )."times( 999999 ). "is_called_once( ).
        mo_custom_data->read_custom_link(
                          is_interface_key  = ls_interface_key
                          iv_custom_link_id = lv_custom_link_id ).
        mr_cut->mo_custom_data = mo_custom_data.

        cl_abap_testdouble=>configure_call( mr_patch_request
        )->set_parameter( name = 'et_provided_property_path' value = lt_p_property_path )->and_expect( )->is_called_once( ).
        mr_patch_request->get_provided_properties( ).

        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.

  METHOD patch_entity_clink_e.
    DATA:
      lv_entitytype     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      ls_custom_link    TYPE /aif/s_custom_link,
      ls_interface_key  TYPE /aif/ifkeys,
      lv_custom_link_id TYPE /aif/clinkid.

    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    ls_interface_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1').
    lv_custom_link_id = '001'.

    ls_custom_link = VALUE #( aifkeys = ls_interface_key  clinkid = lv_custom_link_id ).

    TRY.
        cl_abap_testdouble=>configure_call( mr_patch_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_patch_request->get_entity_type( ).

        cl_abap_testdouble=>configure_call( mo_custom_data )->returning( ls_custom_link )->and_expect( )->is_called_once( )."times( 999999 ). "is_called_once( ).
        mo_custom_data->read_custom_link(
                          is_interface_key  = ls_interface_key
                          iv_custom_link_id = lv_custom_link_id ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_intermediate~patch_entity(
          EXPORTING
            io_request =  mr_patch_request
            io_response = mr_patch_response ).
      CATCH cx_root ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_patch_request ).
    cl_abap_testdouble=>verify_expectations( mr_patch_response ).
  ENDMETHOD.
  METHOD delete_entity_clink.
    DATA: ls_clink_key  TYPE /aif/if_monitoring_odata_glbl=>ty_s_customlink_key,
          lv_entitytype TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.
    lv_entitytype = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-custom_link.
    TRY.
        cl_abap_testdouble=>configure_call( mr_delete_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = lv_entitytype )->and_expect( )->is_called_once( ).
        mr_delete_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( mo_custom_data
            )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        mo_custom_data->delete_custom_link( is_interface_key = ls_clink_key-aifkeys iv_custom_link_id = ls_clink_key-clinkid ).
        mr_cut->mo_custom_data = mo_custom_data.
        mr_cut->/iwbep/if_v4_dp_basic~delete_entity(
          EXPORTING
            io_request =  mr_delete_request
            io_response = mr_delete_response ).
      CATCH /iwbep/cx_gateway /aif/cx_error_handling_general ##NO_Handler.
    ENDTRY.

    cl_abap_testdouble=>verify_expectations( mr_delete_request ).
    cl_abap_testdouble=>verify_expectations( mr_delete_response ).
  ENDMETHOD.
  METHOD read_entity_message_log_text.
    DATA: ls_todo_list   TYPE /iwbep/if_v4_requ_basic_read=>ty_s_todo_list,
          ls_message_key TYPE /aif/s_message_key,
          ls_exp_data    TYPE /aif/s_message_text.

    DATA(lo_entity_request) = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    DATA(lo_entity_response) = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    DATA(lo_log_reader) = CAST /aif/if_msg_log_reader( cl_abap_testdouble=>create( '/AIF/IF_MSG_LOG_READER' ) ).

    mr_cut->mo_log_reader = lo_log_reader.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' message_text = 'bbbbb' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-message_log_text ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_log_reader )->ignore_all_parameters( )->returning( value = ls_exp_data-message_text ).
        lo_log_reader->read_logtext_with_priority(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).
        TEST-INJECTION text_log_auth.
          lo_auth_controller = CAST /AIF/IF_AUTHCHK_HDL( cl_abap_testdouble=>create( '/AIF/IF_AUTHCHK_HDL' ) ).
          cl_abap_testdouble=>configure_call( lo_auth_controller )->returning( value = abap_true ).
          lo_auth_controller->check_authority( ).
        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_entity_response ).


    lo_entity_request = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    lo_entity_response = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    lo_log_reader = CAST /aif/if_msg_log_reader( cl_abap_testdouble=>create( '/AIF/IF_MSG_LOG_READER' ) ).
    mr_cut->mo_log_reader = lo_log_reader.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' message_text = 'bbbbb' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-message_log_text ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_log_reader )->ignore_all_parameters( )->returning( value = ls_exp_data-message_text )->and_expect( )->is_never_called( ).
        lo_log_reader->read_logtext_with_priority(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).
        TEST-INJECTION text_log_auth.
          lo_auth_controller = CAST /AIF/IF_AUTHCHK_HDL( cl_abap_testdouble=>create( '/AIF/IF_AUTHCHK_HDL' ) ).
          cl_abap_testdouble=>configure_call( lo_auth_controller )->returning( value = abap_false ).
          lo_auth_controller->check_authority( ).
        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_log_reader ).

    lo_entity_request = CAST /iwbep/if_v4_requ_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_REQU_BASIC_READ' ) ).
    lo_entity_response = CAST /iwbep/if_v4_resp_basic_read( cl_abap_testdouble=>create( '/IWBEP/IF_V4_RESP_BASIC_READ' ) ).
    lo_log_reader = CAST /aif/if_msg_log_reader( cl_abap_testdouble=>create( '/AIF/IF_MSG_LOG_READER' ) ).
    mr_cut->mo_log_reader = lo_log_reader.
    ls_todo_list = VALUE #( return = VALUE #( busi_data = abap_true ) ).
    ls_message_key = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' ).
    ls_exp_data = VALUE #( ns = 'TEST' ifname = 'IF_TEST' ifver = '1' msgguid = 'TESTTEXTID' message_text = 'bbbbb' ).
    TRY.
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'EV_ENTITY_TYPE_NAME' value = /aif/if_monitoring_odata_glbl=>gc_entity_type_names-internal-message_log_text ).
        lo_entity_request->get_entity_type( ).
        cl_abap_testdouble=>configure_call( lo_entity_request )->set_parameter( name = 'ES_KEY_DATA' value = ls_message_key ).
        lo_entity_request->get_key_data( ).
        cl_abap_testdouble=>configure_call( lo_log_reader )->ignore_all_parameters( )->returning( value = ls_exp_data-message_text )->and_expect( )->is_never_called( ).
        lo_log_reader->read_logtext_with_priority(
          is_message_key = ls_message_key ).
        cl_abap_testdouble=>configure_call( lo_entity_response )->ignore_all_parameters( )->and_expect( )->is_called_once( ).
        lo_entity_response->set_busi_data( ls_exp_data ).
        TEST-INJECTION text_log_auth.
          lo_auth_controller = CAST /AIF/IF_AUTHCHK_HDL( cl_abap_testdouble=>create( '/AIF/IF_AUTHCHK_HDL' ) ).
          cl_abap_testdouble=>configure_call( lo_auth_controller )->raise_exception( exception_object = NEW /aif/cx_error_handling_general( ) ).
          lo_auth_controller->check_authority( ).
        END-TEST-INJECTION.
        mr_cut->/iwbep/if_v4_dp_basic~read_entity(
          EXPORTING
            io_request = lo_entity_request
            io_response = lo_entity_response ).
      CATCH /iwbep/cx_gateway.
    ENDTRY.
    cl_abap_testdouble=>verify_expectations( lo_log_reader ).

  ENDMETHOD.



ENDCLASS.