class /AIF/CL_PERSIST_ENGINE_BASE definition
  public
  abstract
  create public .

*"* public components of class /AIF/CL_PERSIST_ENGINE_BASE
*"* do not include other source files here!!!
public section.

  interfaces /AIF/IF_DELETION_PERSISTENCY .
  interfaces /AIF/IF_PERSISTENCY_ENGINE .

  methods CONSTRUCTOR .
protected section.
*"* protected components of class /AIF/CL_PERSIST_ENGINE_BASE
*"* do not include other source files here!!!

  aliases GV_MASTER
    for /AIF/IF_PERSISTENCY_ENGINE~GV_MASTER .
private section.
*"* private components of class /AIF/CL_PERSIST_ENGINE_BASE
*"* do not include other source files here!!!
ENDCLASS.



CLASS /AIF/CL_PERSIST_ENGINE_BASE IMPLEMENTATION.


METHOD /aif/if_persistency_engine~archive.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


METHOD /aif/if_persistency_engine~buffer_last_msg_versions.

ENDMETHOD.


method /AIF/IF_PERSISTENCY_ENGINE~CHECK_SINGLE_MSG_EXISTENCE.
endmethod.


  method /AIF/IF_PERSISTENCY_ENGINE~CLEAR_HIDDEN_OBJECTS.
   DATA:
      lv_comp_name_old    TYPE string,
      lv_is_table         TYPE abap_bool,
      lv_cleared          TYPE abap_bool,
      lt_data_ref         TYPE TABLE OF REF TO data,
      lv_dash_pos_old     TYPE i,
      lt_hidden_fieldpath TYPE TABLE OF /aif/hidestruct_ext.
    FIELD-SYMBOLS:
      <lt_hidden_fieldpath> TYPE INDEX TABLE,
      <lv_hidden_fieldpath> TYPE /aif/hidestruct_ext,
      <lt_controller>       TYPE prxctrltab,
      <ls_data_ref>         TYPE REF TO data,
      <lt_data>             TYPE ANY TABLE,
      <ls_comp_data>        TYPE any.
    CONSTANTS:
      lc_dash           TYPE c VALUE '-',
      lc_contro_tabname TYPE string VALUE 'CONTROLLER'.
    CHECK ir_data IS NOT INITIAL AND ir_hidden_fieldpath IS NOT INITIAL.
    ASSIGN ir_data->* TO FIELD-SYMBOL(<ls_data>).
    ASSIGN ir_hidden_fieldpath->* TO <lt_hidden_fieldpath>.
    CHECK <ls_data> IS ASSIGNED AND <lt_hidden_fieldpath> IS ASSIGNED.
    DATA(lo_data_descr) = cl_abap_typedescr=>describe_by_data( <ls_data> ).
    IF lo_data_descr->kind = cl_abap_typedescr=>kind_table.
      ASSIGN <ls_data> TO <lt_data>.
    ELSE.
      lv_is_table = abap_false.
      APPEND ir_data TO lt_data_ref.
      ASSIGN lt_data_ref TO <lt_data>.
    ENDIF.
    LOOP AT <lt_data> ASSIGNING FIELD-SYMBOL(<ls_data_tmp>).
      lo_data_descr = cl_abap_typedescr=>describe_by_data( <ls_data_tmp> ).
      IF lo_data_descr->kind = cl_abap_typedescr=>kind_ref.
        ASSIGN <ls_data_tmp> TO <ls_data_ref>.
        IF <ls_data_ref> IS ASSIGNED.
          ASSIGN <ls_data_ref>->* TO <ls_data>.
        ENDIF.
      ELSE.
        ASSIGN <ls_data_tmp> TO <ls_data>.
      ENDIF.
      LOOP AT <lt_hidden_fieldpath> ASSIGNING <lv_hidden_fieldpath>.
        DATA(lv_dash_pos) = find( val = <lv_hidden_fieldpath> sub = lc_dash off = iv_off ).
        IF lv_dash_pos = -1.
          DATA(lv_comp_name) = substring( val = <lv_hidden_fieldpath> off = iv_off ).
        ELSE.
          lv_comp_name = substring( val = <lv_hidden_fieldpath> off = iv_off len = lv_dash_pos - iv_off ).
        ENDIF.
        IF lv_comp_name IS INITIAL.
*       invalid field
          CONTINUE.
        ENDIF.
        IF lv_comp_name <> lv_comp_name_old.
          IF <ls_comp_data> IS ASSIGNED AND lv_cleared = abap_false.
            me->/aif/if_persistency_engine~clear_hidden_objects(
              ir_data = REF #( <ls_comp_data> )
              iv_off  = lv_dash_pos_old + 1
              ir_hidden_fieldpath = REF #( lt_hidden_fieldpath ) ).
          ENDIF.
          CLEAR: lt_hidden_fieldpath.
          UNASSIGN <ls_comp_data>.
          lv_cleared = abap_false.
          lv_comp_name_old = lv_comp_name.
        ENDIF.
        ASSIGN COMPONENT lv_comp_name OF STRUCTURE <ls_data> TO <ls_comp_data>.
        lv_dash_pos_old = lv_dash_pos.
        APPEND <lv_hidden_fieldpath> TO lt_hidden_fieldpath.
        IF lv_dash_pos = -1 AND <ls_comp_data> IS ASSIGNED.
          CLEAR <ls_comp_data>.
          IF lv_is_table = abap_false.
            UNASSIGN <lt_controller>.
            ASSIGN COMPONENT lc_contro_tabname OF STRUCTURE <ls_data> TO <lt_controller>.
            IF <lt_controller> IS ASSIGNED.
              READ TABLE <lt_controller> WITH KEY field = lv_comp_name ASSIGNING FIELD-SYMBOL(<ls_contro>).
              IF sy-subrc IS NOT INITIAL.
                APPEND VALUE #( field = lv_comp_name ) TO <lt_controller> ASSIGNING <ls_contro>.
              ENDIF.
              lo_data_descr = cl_abap_typedescr=>describe_by_data( <ls_comp_data> ).
              IF lo_data_descr->kind = cl_abap_typedescr=>kind_elem.
                <ls_contro>-value = sai_ctrl_initial.
              ELSE.
                <ls_contro>-value = sai_ctrl_none.
              ENDIF.
            ENDIF.
          ENDIF.
          lv_cleared = abap_true.
          CONTINUE.
        ENDIF.
      ENDLOOP.
      IF <ls_comp_data> IS ASSIGNED AND lv_cleared = abap_false.
        me->/aif/if_persistency_engine~clear_hidden_objects(
          ir_data = REF #( <ls_comp_data> )
          iv_off  = lv_dash_pos + 1
          ir_hidden_fieldpath = REF #( lt_hidden_fieldpath ) ).
      ENDIF.
    ENDLOOP.
  endmethod.


METHOD /aif/if_persistency_engine~delete.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


METHOD /aif/if_persistency_engine~determine_status_icon.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


METHOD /aif/if_persistency_engine~get_buffer_msg_ver.

ENDMETHOD.


METHOD /aif/if_persistency_engine~get_deleted_message_ids.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


  method /AIF/IF_PERSISTENCY_ENGINE~GET_SOURCE_FORMAT_DATA.
    RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
  endmethod.


METHOD /aif/if_persistency_engine~lock.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


  method /AIF/IF_PERSISTENCY_ENGINE~MESSAGE_RESTART.
    "for any restart message, the payload edited status will be cleared.
    DATA: lr_msg_payload_status TYPE REF TO /aif/cl_msg_payload_status,
          lv_msgguid  TYPE guid_32.
    CREATE OBJECT lr_msg_payload_status.
    lv_msgguid = iv_msgguid.
    lr_msg_payload_status->/aif/if_msg_payload_status~clear_edited_status(
                                                iv_msgguid         = lv_msgguid
                                                iv_ns              = is_finf-ns
                                                iv_ifname          = is_finf-ifname
                                                iv_ifversion       = is_finf-ifversion ) .
  endmethod.


METHOD /aif/if_persistency_engine~read_all.
*  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


method /AIF/IF_PERSISTENCY_ENGINE~READ_ALL_CANCELLED_MESSAGES.
*  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
endmethod.


METHOD /AIF/IF_PERSISTENCY_ENGINE~READ_ALL_SUCCESS_MESSAGES.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


method /AIF/IF_PERSISTENCY_ENGINE~READ_MESSAGES_BY_MSG_KEY.
endmethod.


METHOD /aif/if_persistency_engine~retrieve.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


METHOD /aif/if_persistency_engine~save_buffer.

ENDMETHOD.


METHOD /aif/if_persistency_engine~unlock.

ENDMETHOD.


METHOD /aif/if_persistency_engine~update.
  RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = /aif/cx_aif_engine_base=>unsupported_operation.
ENDMETHOD.


METHOD constructor.
* gv_master must be initialized in the sub_class
ENDMETHOD.


  METHOD /aif/if_deletion_persistency~delete_additional_tables.

    CLEAR rs_result.
    rs_result-success = abap_true.

  ENDMETHOD.


  METHOD /aif/if_deletion_persistency~get_add_tables_to_delete.

    CLEAR rt_tables.

  ENDMETHOD.
ENDCLASS.