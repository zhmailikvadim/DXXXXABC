class /aif/cl_struc_pers_util definition
  public
  final
  create public .

  type-pools: abap.

  public section.

    interfaces /aif/if_struc_pers_util.

    methods:
      "! Creates an instance
      constructor.

  protected section.
  private section.

    methods:
      "! Initializes the general field with their data types (e.g. parent_id, counter, ...)
      init_general_fields,

      "! Initializes the admin fields with their data types (e.g. ns, ifname, ...)
      init_admin_fields,

      "! Returns all column names that are reserved by SAP standard and cannot be used
      get_sap_reserved_column_names
        returning
          value(rt_column_names) type /aif/string_tt,

      "! Returns the name of the fields of structure /aif/struc_pers_general
      get_struc_pers_general_names
        returning
          value(rt_column_names) type /aif/string_tt.

    data:
      "! db access wrapper for dbtab trese
      mo_db_access_trese type ref to lcl_db_access_trese,

      "! list of general fields
      mt_general_fields  type /aif/column_tt,

      "! list of admin fields
      mt_admin_fields    type /aif/column_tt.

ENDCLASS.



CLASS /AIF/CL_STRUC_PERS_UTIL IMPLEMENTATION.


  method /aif/if_struc_pers_util~get_admin_columns_for_root_tab.
    if mt_admin_fields is initial.
      me->init_admin_fields( ).
    endif.
    rt_columns = mt_admin_fields.
  endmethod.


  method /aif/if_struc_pers_util~get_general_columns.
    if mt_general_fields is initial.
      me->init_general_fields( ).
    endif.
    rt_columns = mt_general_fields.
  endmethod.


  method /aif/if_struc_pers_util~get_num_of_admin_columns.

    data: lt_columns type /aif/column_tt .

    lt_columns = me->/aif/if_struc_pers_util~get_admin_columns_for_root_tab( ).
    rv_num_of_admin_cols = lines( lt_columns ).

  endmethod.


  method /aif/if_struc_pers_util~get_num_of_general_columns.

    data: lt_columns                  type /aif/column_tt,
          lt_struc_pers_general_names type /aif/string_tt.

    lt_columns = me->/aif/if_struc_pers_util~get_general_columns( ).
    lt_struc_pers_general_names = me->get_struc_pers_general_names( ). " get name of the /AIF/STRUC_PERS_GENERAL-include
    rv_num_of_general_cols = lines( lt_columns ) + lines( lt_struc_pers_general_names ) - 1. " +6 because of the ".INCLUDE"-row

  endmethod.


  method /aif/if_struc_pers_util~get_reserved_column_names.

    data: lt_columns                  type /aif/column_tt,
          ls_column                   type /aif/column,
          lt_sap_reserved_names       type /aif/string_tt,
          lt_struc_pers_general_names type /aif/string_tt.

    lt_columns = me->/aif/if_struc_pers_util~get_admin_columns_for_root_tab( ).
    loop at lt_columns into ls_column.
      append ls_column-name to rt_column_names.
    endloop.

    lt_columns = me->/aif/if_struc_pers_util~get_general_columns( ).
    loop at lt_columns into ls_column.
      if ls_column-name <> '.INCLUDE'.
        append ls_column-name to rt_column_names.
      endif.
    endloop.


    lt_struc_pers_general_names = me->get_struc_pers_general_names( ).
    append lines of lt_struc_pers_general_names to rt_column_names.

    lt_sap_reserved_names = me->get_sap_reserved_column_names( ).
    append lines of lt_sap_reserved_names to rt_column_names.

  endmethod.


  method constructor.
    if mo_db_access_trese is initial.
      create object mo_db_access_trese.
    endif.
  endmethod.


  method get_sap_reserved_column_names.
    rt_column_names = mo_db_access_trese->load_names( ).
  endmethod.


  method get_struc_pers_general_names.

    append 'NS' to rt_column_names.
    append 'IFNAME' to rt_column_names.
    append 'IFVER' to rt_column_names.
    append 'MANDT' to rt_column_names.
    append 'MSGGUID' to rt_column_names.
    append 'VERSION' to rt_column_names.
    append 'COUNTER' to rt_column_names.

  endmethod.


  method init_admin_fields.

    data ls_field like line of mt_admin_fields.

    ls_field-name = 'STATUS'.
    ls_field-type_name = '/AIF/PERS_XML_STATUS_E'.
    ls_field-is_key = abap_false.
    ls_field-is_include = abap_false.
    ls_field-group_name = ''.
    append ls_field to mt_admin_fields.

    ls_field-name = 'CREATE_USER'.
    ls_field-type_name = '/AIF/CREATE_USER'.
    ls_field-is_key = abap_false.
    ls_field-is_include = abap_false.
    ls_field-group_name = ''.
    append ls_field to mt_admin_fields.

    ls_field-name = 'CREATE_DATE'.
    ls_field-type_name = '/AIF/CREATE_DATE'.
    ls_field-is_key = abap_false.
    ls_field-is_include = abap_false.
    ls_field-group_name = ''.
    append ls_field to mt_admin_fields.

    ls_field-name = 'CREATE_TIME'.
    ls_field-type_name = '/AIF/CREATE_TIME'.
    ls_field-is_key = abap_false.
    ls_field-is_include = abap_false.
    ls_field-group_name = ''.
    append ls_field to mt_admin_fields.

  endmethod.


  method init_general_fields.

    data ls_field like line of mt_general_fields.

    ls_field-name = '.INCLUDE'.
    ls_field-type_name = '/AIF/STRUC_PERS_GENERAL'.
    ls_field-is_key = abap_true.
    ls_field-is_include = abap_true.
    ls_field-group_name = '/AIF/STRUC_PERS_GENERAL'.

    append ls_field to mt_general_fields.

    ls_field-name = 'PARENT_ID'.
    ls_field-type_name = '/AIF/PERS_ROW_ID'.
    ls_field-is_key = abap_false.
    ls_field-is_include = abap_false.
    ls_field-group_name = ''.

    append ls_field to mt_general_fields.

  endmethod.
ENDCLASS.