*"* use this source file for your ABAP unit test classes

class lcl_tests definition deferred.
class /aif/cl_struc_pers_util definition local friends lcl_tests.

class lcl_db_access_trese_mock definition inheriting from lcl_db_access_trese.

  public section.
    methods:
      load_names redefinition.

endclass.

class lcl_db_access_trese_mock implementation.

  method load_names.
    append 'DBTAB1' to rt_names.
    append 'DBTAB2' to rt_names.
  endmethod.

endclass.

class lcl_tests definition for testing duration short risk level harmless.

  private section.

    data: "! class under test
          mo_cut type ref to /aif/cl_struc_pers_util.

    methods:
      "! preparations for the next unit test / is called directly before executing every unit test
      setup,

* helper methods
      verify_admin_columns importing it_result type /aif/column_tt,

      verify_general_columns importing it_result type /aif/column_tt,

* constructor
      "! constructor should create a db wrapper instance
      constructor_creates_dbw for testing,

* get_admin_columns_for_root_tab
      "! get_admin_columns_for_root_tab returns administrative columns from itab if itab is filled.
      get_admin_cols_returns_cols for testing,

      "! get_admin_columns_for_root_tab creates entries in itab if itab is empty.
      get_admin_cols_fills_itab for testing,

* get_general_columns
      "! get_general_columns returns general columns from itab if itab is filled.
      get_general_cols_returns_cols for testing,

      "! get_general_columns creates entries in itab.
      get_general_cols_fills_itab for testing,

* get_num_of_admin_columns
      "! get_num_of_admin_columns returns number of admin columns
      get_num_of_admin_col_ret_num for testing,

* get_cum_of_general_columns
      "! get_cum_of_general_columns returns number of general columns
      get_num_of_general_col_ret_num for testing,

* get_reserved_column_names
      "! get_reserved_column_names collects admin and general columns and uses the db wrapper to query the names reserved by sap
      get_reserved_col_collects_data for testing.


endclass.       "lcl_Tests


class lcl_tests implementation.

  method setup.

    mo_cut = new #( ).

  endmethod.

  method constructor_creates_dbw.

    cl_abap_unit_assert=>assert_not_initial( mo_cut->mo_db_access_trese ).

  endmethod.

  method get_admin_cols_fills_itab.

    " call method
    data(lt_result) = mo_cut->/aif/if_struc_pers_util~get_admin_columns_for_root_tab( ).

    " verify
    verify_admin_columns( lt_result ).
    verify_admin_columns( mo_cut->mt_admin_fields ).

  endmethod.

  method get_admin_cols_returns_cols.

    " prepare
    data(lt_itab) = value /aif/column_tt( ( name = 'ANYNAME'        type_name = 'ANYTYPE'   is_key = abap_false   is_include = abap_false   group_name = 'ANYGROUP' ) ).
    mo_cut->mt_admin_fields = lt_itab.

    " call method
    data(lt_result) = mo_cut->/aif/if_struc_pers_util~get_admin_columns_for_root_tab( ).

    " verify
    cl_abap_unit_assert=>assert_equals( act = lt_result
                                        exp = lt_itab ).

  endmethod.


  method verify_admin_columns.

    data(lt_exp) = value /aif/column_tt( ( name = 'STATUS'        type_name = '/AIF/PERS_XML_STATUS_E'   is_key = abap_false   is_include = abap_false   group_name = '' )
                                         ( name = 'CREATE_USER'   type_name = '/AIF/CREATE_USER'         is_key = abap_false   is_include = abap_false   group_name = '' )
                                         ( name = 'CREATE_DATE'   type_name = '/AIF/CREATE_DATE'         is_key = abap_false   is_include = abap_false   group_name = '' )
                                         ( name = 'CREATE_TIME'   type_name = '/AIF/CREATE_TIME'         is_key = abap_false   is_include = abap_false   group_name = '' ) ).
    cl_abap_unit_assert=>assert_equals( act = it_result
                                        exp = lt_exp ).

  endmethod.

  method get_general_cols_fills_itab.

    " call method
    data(lt_result) = mo_cut->/aif/if_struc_pers_util~get_general_columns( ).

    " verify
    verify_general_columns( lt_result ).
    verify_general_columns( mo_cut->mt_general_fields ).

  endmethod.

  method get_general_cols_returns_cols.

    " prepare
    data(lt_itab) = value /aif/column_tt( ( name = 'ANYNAME'        type_name = 'ANYTYPE'   is_key = abap_false   is_include = abap_false   group_name = 'ANYGROUP' ) ).
    mo_cut->mt_general_fields = lt_itab.

    " call method
    data(lt_result) = mo_cut->/aif/if_struc_pers_util~get_general_columns( ).

    " verify
    cl_abap_unit_assert=>assert_equals( act = lt_result
                                        exp = lt_itab ).

  endmethod.


  method verify_general_columns.

    data(lt_exp) = value /aif/column_tt( ( name = '.INCLUDE'    type_name = '/AIF/STRUC_PERS_GENERAL'   is_key = abap_true    is_include = abap_true    group_name = '/AIF/STRUC_PERS_GENERAL' )
                                         ( name = 'PARENT_ID'   type_name = '/AIF/PERS_ROW_ID'          is_key = abap_false   is_include = abap_false   group_name = '' ) ).
    cl_abap_unit_assert=>assert_equals( act = it_result
                                        exp = lt_exp ).

  endmethod.

  method get_num_of_admin_col_ret_num.

    " prepare
    me->get_admin_cols_returns_cols( ).

    " call method
    data(lv_result) = mo_cut->/aif/if_struc_pers_util~get_num_of_admin_columns( ).

    " verify
    cl_abap_unit_assert=>assert_equals( act = lv_result
                                        exp = 1 ).

  endmethod.

  method get_num_of_general_col_ret_num.

    " prepare
    me->get_general_cols_returns_cols( ).

    " call method
    data(lv_result) = mo_cut->/aif/if_struc_pers_util~get_num_of_general_columns( ).

    " verify
    cl_abap_unit_assert=>assert_equals( act = lv_result
                                        exp = 1 + 6 ).

  endmethod.

  method get_reserved_col_collects_data.

    data: lv_column_name type string.

    " prepare
    data(lt_admin_columns_itab)  = value /aif/column_tt( ( name = 'ADMIN'        type_name = 'ANYTYPE'   is_key = abap_false   is_include = abap_false   group_name = 'ANYGROUP' ) ).
    data(lt_general_columns_itab) = value /aif/column_tt( ( name = 'GENERAL'        type_name = 'ANYTYPE'   is_key = abap_false   is_include = abap_false   group_name = 'ANYGROUP' ) ).
    mo_cut->mt_admin_fields = lt_admin_columns_itab.
    mo_cut->mt_general_fields = lt_general_columns_itab.

    " inject mock
    data(lo_db_access_trese_mock) = new lcl_db_access_trese_mock( ).
    mo_cut->mo_db_access_trese = lo_db_access_trese_mock.

    " call method
    data(lt_result) = mo_cut->/aif/if_struc_pers_util~get_reserved_column_names( ).

    " verify result contains the provided admin columns
    loop at lt_admin_columns_itab into data(ls_column).
      lv_column_name = ls_column-name.
      cl_abap_unit_assert=>assert_table_contains( table = lt_result
                                                  line = lv_column_name ).
    endloop.

    " verify result contains the provided general columns
    loop at lt_general_columns_itab into ls_column.
      lv_column_name = ls_column-name.
      cl_abap_unit_assert=>assert_table_contains( table = lt_result
                                                  line = lv_column_name ).
    endloop.

    " verify result contains the components of /AIF/STRUC_PERS_GENERAL (because general-table only contains an include-structure)
    loop at mo_cut->get_struc_pers_general_names( ) into lv_column_name.
      cl_abap_unit_assert=>assert_table_contains( table = lt_result
                                                  line = lv_column_name ).
    endloop.

    " verify result contains the injected sap-reserved columns
    loop at lo_db_access_trese_mock->load_names( ) into lv_column_name.
      cl_abap_unit_assert=>assert_table_contains( table = lt_result
                                                  line = lv_column_name ).
    endloop.

    " verify number of lines
    cl_abap_unit_assert=>assert_equals( act = lines( lt_result )
                                        exp = lines( lt_admin_columns_itab )
                                            + lines( lt_general_columns_itab )
                                            + lines( lo_db_access_trese_mock->load_names( ) )
                                            + lines( mo_cut->get_struc_pers_general_names( ) ) ).

  endmethod.

endclass.