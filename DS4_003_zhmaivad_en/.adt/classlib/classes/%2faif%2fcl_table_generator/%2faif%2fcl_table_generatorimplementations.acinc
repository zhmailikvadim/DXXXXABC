*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations


class lcl_table_generator_dbw definition.

  public section.
    interfaces /aif/if_table_generator_dbw.

  private section.
    types: begin of lty_tr_object,
             objtype type trobjtype,
             objname type trobj_name,
           end of lty_tr_object.

endclass.


class lcl_table_generator_dbw implementation.


  method /aif/if_table_generator_dbw~activate_table.
    call function 'DDIF_TABL_ACTIVATE'
      exporting
        name        = name
        auth_chk    = 'X'
        excommit    = 'X'
      importing
        rc          = rc
      exceptions
        not_found   = 1
        put_failure = 2
        others      = 3.
    if sy-subrc  = 1 .
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>not_found.
    elseif sy-subrc  = 2.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>put_failure.
    elseif sy-subrc <> 0.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>put_failure.
    endif.
  endmethod.


  method /aif/if_table_generator_dbw~add_tr.

    data: ls_tr_object type lty_tr_object.

    ls_tr_object-objname = object_name.
    ls_tr_object-objtype = object_type.

    call function 'RS_CORR_INSERT'
      exporting
        object              = ls_tr_object
        object_class        = 'DICT'
        mode                = 'I'
        global_lock         = 'X'
        devclass            = devclass
        author              = sy-uname
        master_language     = sy-langu
        korrnum             = korrnum
        suppress_dialog     = abap_true
*          IMPORTING
*       devclass            = lv_package
*       korrnum             = lv_korrnum
      exceptions
        cancelled           = 1
        permission_failure  = 2
        unknown_objectclass = 3
        others              = 4.
    if sy-subrc  = 1 .
*      raise cancelled.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>cancelled.
    elseif sy-subrc  = 2.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>permission_failure.
    elseif sy-subrc  = 3.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>unknown_objectclass.
    elseif sy-subrc <> 0.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>cancelled.
    endif.

  endmethod.


  method /aif/if_table_generator_dbw~delete_table.
    call function 'DDIF_OBJECT_DELETE'
      exporting
        type          = type
        name          = name
*       ID            =
*       AUTHORITY_CHECK               = ' '
* IMPORTING
*       DELETED       =
* TABLES
*       OBJECTS_WITH_REFERENCES       =
      exceptions
        illegal_input = 1
        no_authority  = 2
        others        = 3.
    if sy-subrc  = 1 .
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>illegal_input.
    elseif sy-subrc  = 2.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>no_authority.
    elseif sy-subrc <> 0.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>illegal_input.
    endif.
  endmethod.


  method /aif/if_table_generator_dbw~get_table .
    call function 'DDIF_TABL_GET'
      exporting
        name          = name
*       STATE         = 'A'
        langu         = langu
      importing
        gotstate      = gotstate
        dd02v_wa      = dd02v_wa
        dd09l_wa      = dd09l_wa
      tables
        dd03p_tab     = dd03p_tab
*       DD05M_TAB     =
*       DD08V_TAB     =
*       DD12V_TAB     =
*       DD17V_TAB     =
*       DD35V_TAB     =
*       DD36M_TAB     =
      exceptions
        illegal_input = 1
        others        = 2.
    if sy-subrc <> 0.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>illegal_input.
    endif.
  endmethod.


  method /aif/if_table_generator_dbw~put_table .
    call function 'DDIF_TABL_PUT'
      exporting
        name              = name
        dd02v_wa          = dd02v_wa " Table Header
        dd09l_wa          = dd09l_wa " Technical Settings
      tables
        dd03p_tab         = dd03p_tab " Fields
*       DD05M_TAB         =
*       DD08V_TAB         = lt_dd08v
*       DD35V_TAB         =
*       DD36M_TAB         =
      exceptions
        tabl_not_found    = 1
        name_inconsistent = 2
        tabl_inconsistent = 3
        put_failure       = 4
        put_refused       = 5
        others            = 6.
    if sy-subrc = 1.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>dbtab_not_found.
    elseif  sy-subrc = 2.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>name_inconsistent.
    elseif  sy-subrc = 3.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>table_inconsistent.
    elseif  sy-subrc = 4.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>put_failure.
    elseif  sy-subrc = 5.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>put_refused.
    elseif  sy-subrc <> 0.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid = /aif/cx_struct_pers_base=>put_failure.
    endif.
  endmethod.

  method /aif/if_table_generator_dbw~trint_tadir_insert.

    call function 'TRINT_TADIR_INSERT'
      exporting
        author               = iv_author
        masterlang           = iv_masterlang
        devclass             = iv_package_name
*       GENFLAG              = ' '
        object               = 'TABL'
        obj_name             = iv_obj_name
        pgmid                = 'R3TR'
*       SRCSYSTEM            = SY-SYSID
      exceptions
        object_exists_global = 1
        object_exists_local  = 2
        others               = 3.

    if sy-subrc <> 0.
      data lv_ddobj_name type ddobjname.
      lv_ddobj_name = iv_obj_name.
      if 1 = 2. message e206(/aif/pers_tbl_gen) with iv_obj_name iv_package_name. endif.
      raise exception type /aif/cx_struct_pers_base
        exporting
          textid        = /aif/cx_struct_pers_base=>assign_dbtab_to_package_failed
          ddic_obj_name = lv_ddobj_name
          package_name  = iv_package_name.
    endif.

  endmethod.

  method /aif/if_table_generator_dbw~enqueue_aif_efgobj.

    call function 'ENQUEUE_/AIF/EFGOBJ'
      exporting
*       MODE_/AIF/T_FUNCGENLK       = 'E'
*       MANDT          = SY-MANDT
        new_name       = is_lockobj-new_name
        objtype        = is_lockobj-objtype
        x_new_name     = iv_new_name
        x_objtype      = iv_objtype
*       _SCOPE         = '2'
*       _WAIT          = ' '
*       _COLLECT       = ' '
      exceptions
        foreign_lock   = 1
        system_failure = 2
        others         = 3.
    if sy-subrc <> 0.
      rv_locked = abap_false.
    else.
      rv_locked = abap_true.
    endif.

  endmethod.


  method /aif/if_table_generator_dbw~enqueue_e_trkorr.

    call function 'ENQUEUE_E_TRKORR'
      exporting
        trkorr         = iv_transport_request
      exceptions
        foreign_lock   = 1
        system_failure = 2.
    if sy-subrc <> 0.
      rv_locked = abap_false.
    else.
      rv_locked = abap_true.
    endif.

  endmethod.


  method /aif/if_table_generator_dbw~dequeue_aif_efgobj.

    call function 'DEQUEUE_/AIF/EFGOBJ'
      exporting
        new_name   = is_lockobj-new_name
        objtype    = is_lockobj-objtype
        x_new_name = iv_new_name
        x_objtype  = iv_objtype.

  endmethod.


  method /aif/if_table_generator_dbw~dequeue_e_trkorr.

    call function 'DEQUEUE_E_TRKORR' exporting trkorr = iv_transport_request.

  endmethod.


endclass.