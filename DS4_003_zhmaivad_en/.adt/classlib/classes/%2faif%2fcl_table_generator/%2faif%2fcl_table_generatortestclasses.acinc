* use this source file for your ABAP unit test classes

class ltc_generate_tables_method definition for testing duration short risk level harmless.

  private section.

    data:
      "! class under test
      mo_cut             type ref to /aif/cl_table_generator,

      "! db wrapper mock
      mo_db_mock         type ref to /aif/if_table_generator_dbw,

      "! log writer mock
      mo_log_writer_mock type ref to /aif/if_appl_log_writer,

      "! util mock
      mo_util_mock       type ref to /aif/if_struc_pers_util.

    methods:
      "! preparations for the next unit test / is called directly before executing every unit test
      setup,

      "! generate_tables adds general columns to all dbtabs
      adds_general_col_to_all_dbtabs for testing raising /aif/cx_struct_pers_base,

      "! generate_tables adds admin columns to root dbtab
      adds_admin_col_to_root_dbtab for testing raising /aif/cx_struct_pers_base,

      "! generate_tables creates a dbtab in DDic
      creates_dbtab_in_ddic for testing raising /aif/cx_struct_pers_base,

      "! generate_tables should write a success message if ddic-table-put succeeded
      creates_dbtab_write_sucess_msg for testing raising /aif/cx_struct_pers_base,

      "! generate_tables should write an error message and unlock the table if ddic-table-put failes
      creates_dbtab_write_error_msg for testing raising /aif/cx_struct_pers_base,

      "! generate_tables unlocks the dbtab if ddic-table-put succeeded
      creates_dbtab_unlocks_dbtab for testing,

      "! generate_tables should write an error message if locking the dbtab failes
      creates_dbtab_lock_failes for testing,

      "! generate_tables explicitly assigns dbtab to local package
      assigns_local_pkg for testing raising /aif/cx_struct_pers_base,

      "! generate_tables adds dbtab to tr if no local package is used
      write_tr_if_no_local_package for testing raising /aif/cx_struct_pers_base,

      "! generate_tables should write a warning if locking failes when adding the dbtab to tr
      write_tr_lock_fails for testing,

      "! generate_tables should write a warning if adding the dbtab to tr failes
      write_tr_writes_warn_msg for testing raising /aif/cx_struct_pers_base,

      "! generate_tables activates the dbtab
      activate_dbtab for testing raising /aif/cx_struct_pers_base,

    "! generate_tables should write a warning if activation failes with an sy-subrc code
      activate_dbtab_write_warn_msg for testing raising /aif/cx_struct_pers_base,

    "! generate_tables should write a warning if activation failes with an exception
      activate_dbtab_wri_warn_msg_cx for testing raising /aif/cx_struct_pers_base,

      "! generate tables triggers saving of the log writer
      triggers_log_save for testing.
endclass.


class ltc_generate_tables_method implementation.

  method setup.

    mo_db_mock ?= cl_abap_testdouble=>create( '/AIF/IF_TABLE_GENERATOR_DBW' ).
    mo_log_writer_mock ?= cl_abap_testdouble=>create( '/AIF/IF_APPL_LOG_WRITER' ).
    mo_util_mock ?= cl_abap_testdouble=>create( '/AIF/IF_STRUC_PERS_UTIL' ).

    mo_cut = new /aif/cl_table_generator( io_db_table_access = mo_db_mock
                                          io_log_writer = mo_log_writer_mock
                                          io_util = mo_util_mock ).

  endmethod.

  method adds_general_col_to_all_dbtabs.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'ROOT_DBTAB'  is_root_table = abap_true  )
                                                 ( name = 'OTHER_DBTAB' is_root_table = abap_false ) ).
    data(lt_general_columns) = value /aif/column_tt( ( name = 'GENERAL_COL_KEY'   is_key = abap_true )
                                                     ( name = 'GENERAL_COL2'   is_key = abap_false ) ).

    cl_abap_testdouble=>configure_call( mo_util_mock )->returning( lt_general_columns )->and_expect( )->is_called_times( 2 ).
    mo_util_mock->get_general_columns( ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'ROOT_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_parameter( 'dd02v_wa' )->ignore_parameter( 'dd09l_wa' )->and_expect( )->is_called_once( ).
    mo_db_mock->put_table( name = 'ROOT_DBTAB'
                           dd03p_tab = value #( ( tabname = 'ROOT_DBTAB'   ddlanguage = sy-langu   keyflag = abap_true    fieldname = 'GENERAL_COL_KEY'   position = 1 )
                                                ( tabname = 'ROOT_DBTAB'   ddlanguage = sy-langu   keyflag = abap_false   fieldname = 'GENERAL_COL2'   position = 2 ) ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'OTHER_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_parameter( 'dd02v_wa' )->ignore_parameter( 'dd09l_wa' )->and_expect( )->is_called_once( ).
    mo_db_mock->put_table( name = 'OTHER_DBTAB'
                           dd03p_tab = value #( ( tabname = 'OTHER_DBTAB'   ddlanguage = sy-langu   keyflag = abap_true    fieldname = 'GENERAL_COL_KEY'   position = 1 )
                                                ( tabname = 'OTHER_DBTAB'   ddlanguage = sy-langu   keyflag = abap_false   fieldname = 'GENERAL_COL2'   position = 2 ) ) ).


    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_util_mock ).
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method adds_admin_col_to_root_dbtab.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'ROOT_DBTAB'  is_root_table = abap_true  )
                                                 ( name = 'OTHER_DBTAB' is_root_table = abap_false ) ).
    data(lt_admin_columns) = value /aif/column_tt( ( name = 'ADMIN_COL_KEY'   is_key = abap_true )
                                                   ( name = 'ADMIN_COL2'      is_key = abap_false ) ).

    cl_abap_testdouble=>configure_call( mo_util_mock )->returning( lt_admin_columns )->and_expect( )->is_called_once( ).
    mo_util_mock->get_admin_columns_for_root_tab( ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'ROOT_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_parameter( 'dd02v_wa' )->ignore_parameter( 'dd09l_wa' )->and_expect( )->is_called_once( ).
    mo_db_mock->put_table( name = 'ROOT_DBTAB'
                           dd03p_tab = value #( ( tabname = 'ROOT_DBTAB'   ddlanguage = sy-langu   keyflag = abap_true    fieldname = 'ADMIN_COL_KEY'   position = 1 )
                                                ( tabname = 'ROOT_DBTAB'   ddlanguage = sy-langu   keyflag = abap_false   fieldname = 'ADMIN_COL2'      position = 2 ) ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'OTHER_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_parameter( 'dd02v_wa' )->ignore_parameter( 'dd09l_wa' )->and_expect( )->is_called_once( ).
    mo_db_mock->put_table( name = 'OTHER_DBTAB'
                           dd03p_tab = value #( ) ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_util_mock ).
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method creates_dbtab_in_ddic.

    " prepare
    data(lt_columns) = value /aif/column_tt( ( name = 'COL_KEY'   is_key = abap_true     type_name = 'TYPENAME_1' )
                                             ( name = 'COL_2'     is_key = abap_false    type_name = 'TYPENAME_2'    group_name = 'IGNORED'    elementary_type_info-reftable = 'REFTAB'   elementary_type_info-reffield = 'REFFIELD' )
                                             ( name = 'COL_INCL'   is_key = abap_false   type_name = 'TYPENAME_3'    group_name = 'GROUP_NAME_3'    is_include = abap_true ) ).
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB'  is_root_table = abap_true  columns = lt_columns ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_parameter( 'dd02v_wa' )->and_expect( )->is_called_once( ).
    mo_db_mock->put_table( name = 'A_DBTAB'
                           dd03p_tab = value #( ( tabname = 'A_DBTAB'   ddlanguage = sy-langu   keyflag = abap_true    fieldname = 'COL_KEY'   position = 1   rollname = 'TYPENAME_1' )
                                                ( tabname = 'A_DBTAB'   ddlanguage = sy-langu   keyflag = abap_false   fieldname = 'COL_2'     position = 2   rollname = 'TYPENAME_2'   reftable = 'REFTAB'   reffield = 'REFFIELD' )
                                                ( tabname = 'A_DBTAB'   ddlanguage = sy-langu   keyflag = abap_false   fieldname = 'COL_INCL'  position = 3   rollname = ''                groupname = 'GROUP_NAME_3'  precfield = 'TYPENAME_3' ) )
                           dd09l_wa = value #( tabname = 'A_DBTAB'   tabart = 'APPL1'    tabkat = 9 ) ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method creates_dbtab_write_sucess_msg.
    data: ls_return     type bapiret2,
          lt_return_tab type bapiret2_t.
    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->set_parameter(
                                                                             name  = 'es_return'
                                                                             value = ls_return
                                                                             )->set_parameter(
                                                                             name  = 'et_return_tab'
                                                                             value = lt_return_tab
                                                                              )->and_expect( )->is_never_called( ).
*                                                                              )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_msg_to_log(
                                        iv_msgid = '/AIF/PERS_TBL_GEN'
                                        iv_msgno = '122'
                                        iv_msgty = 'S'
                                        iv_msgv1 = 'A_DBTAB'
                                         ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.


  method creates_dbtab_unlocks_dbtab.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_times( 2 ).
    mo_db_mock->dequeue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method creates_dbtab_write_error_msg.

    " prepare
    data(lo_exception) = new /aif/cx_struct_pers_base( ).
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_once( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->ignore_all_parameters( )->raise_exception( lo_exception ).
    mo_db_mock->put_table( name = 'A_DBTAB'
                           dd03p_tab = value #( ) ).

*    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
*    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
*                                              iv_message_type = 'E' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->and_expect( )->is_never_called( ).
*    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_msg_to_log( iv_msgid = '/AIF/PERS_TBL_GEN'
                                        iv_msgno = '203'
                                        iv_msgty = 'E'
                                        iv_msgv1 = 'A_DBTAB' ).
    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_times( 1 ).
    mo_db_mock->dequeue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).



    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method creates_dbtab_lock_failes.

    " prepare
    data(lo_exception) = new /aif/cx_struct_pers_base( ).
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_false )->and_expect( )->is_called_times( 1 ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
                                              iv_message_type = 'E' ).

*    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->and_expect( )->is_called_once( ).
    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->and_expect( )->is_never_called( ).
    mo_log_writer_mock->add_msg_to_log( iv_msgid = '/AIF/PERS_TBL_GEN'
                                        iv_msgno = '203'
                                        iv_msgty = 'E'
                                        iv_msgv1 = 'A_DBTAB' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).


    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.

  method assigns_local_pkg.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' package = '$TMP' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_once( ).
    mo_db_mock->trint_tadir_insert( iv_author = sy-uname
                                    iv_masterlang = sy-langu
                                    iv_package_name = '$TMP'
                                    iv_obj_name     = 'A_DBTAB' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = '' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method write_tr_if_no_local_package.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' package = 'A_PACKAGE' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( )->is_called_once( ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_once( ).
    mo_db_mock->dequeue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_once( ).
    mo_db_mock->add_tr( object_type = 'TABL'
                        object_name = 'A_DBTAB'
                        devclass = 'A_PACKAGE'
                        korrnum  = 'A_TR' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method write_tr_lock_fails.

    " prepare
    data(lo_exception) = new /aif/cx_struct_pers_base( ).
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_false ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
                                              iv_message_type = 'W' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).


    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.

  method write_tr_writes_warn_msg.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_once( ).
    mo_db_mock->dequeue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->raise_exception( new /aif/cx_struct_pers_base( ) ).
    mo_db_mock->add_tr( object_type = 'TABL'
                        object_name = 'A_DBTAB'
                        devclass = ''
                        korrnum  = 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
                                              iv_message_type = 'W' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).


    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.

  method activate_dbtab.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->and_expect( )->is_called_once( ).
    mo_db_mock->activate_table( 'A_DBTAB' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).

  endmethod.

  method activate_dbtab_write_warn_msg.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( 1 ).
    mo_db_mock->activate_table( 'A_DBTAB' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
                                              iv_message_type = 'W' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.


  method activate_dbtab_wri_warn_msg_cx.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->raise_exception( new /aif/cx_struct_pers_base( ) ).
    mo_db_mock->activate_table( 'A_DBTAB' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->ignore_parameter( 'io_exception' )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->add_exception_to_log( io_exception = new /aif/cx_struct_pers_base( )
                                              iv_message_type = 'W' ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_db_mock ).
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.

  method triggers_log_save.

    " prepare
    data(lt_db_scheme) = value /aif/db_table_tt( ( name = 'A_DBTAB' ) ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true )->and_expect( ).
    mo_db_mock->enqueue_aif_efgobj( is_lockobj = value #( new_name = 'A_DBTAB'   objtype = 'TABL' )
                                    iv_new_name = abap_true
                                    iv_objtype = abap_true ).

    cl_abap_testdouble=>configure_call( mo_db_mock )->returning( abap_true ).
    mo_db_mock->enqueue_e_trkorr( 'A_TR' ).

    cl_abap_testdouble=>configure_call( mo_log_writer_mock )->and_expect( )->is_called_once( ).
    mo_log_writer_mock->save_log( ).

    " call method
    mo_cut->/aif/if_table_generator~generate_tables( it_db_scheme = lt_db_scheme
                                                     iv_transport_request = 'A_TR' ).

    " verify
    cl_abap_testdouble=>verify_expectations( mo_log_writer_mock ).

  endmethod.

endclass.