CLASS /aif/cl_transformation_logic DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES /aif/if_transformation_logic.

    METHODS:
      "! Creates an instance
      "! @parameter io_structure_walker  | optionally provide an instance, which is used to traverse the raw structure
      constructor
        IMPORTING
          !io_structure_walker TYPE REF TO /aif/if_structure_walker OPTIONAL.

  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA:
      "! Structure walker instance
      mo_structure_walker TYPE REF TO /aif/if_structure_walker.

ENDCLASS.



CLASS /AIF/CL_TRANSFORMATION_LOGIC IMPLEMENTATION.


  METHOD /aif/if_transformation_logic~transform_records_to_structure.

    DATA: lo_structure_visitor TYPE REF TO /aif/cl_transf_from_records_v.

    CREATE OBJECT lo_structure_visitor TYPE /aif/cl_transf_from_records_v EXPORTING io_table_record_buffer = io_table_record_buffer.

    lo_structure_visitor->set_mapping( it_mapping ).

    mo_structure_walker->walk_through_structure( EXPORTING io_visitor = lo_structure_visitor
                                                 CHANGING  cs_structure = cs_structure ).


  ENDMETHOD.


  METHOD /aif/if_transformation_logic~transform_structure_to_records.

    DATA: lo_structure_visitor TYPE REF TO /aif/cl_transf_into_records_v.

    CREATE OBJECT lo_structure_visitor TYPE /aif/cl_transf_into_records_v EXPORTING io_table_record_buffer = io_table_record_buffer.

    lo_structure_visitor->set_mapping( it_mapping ).

    mo_structure_walker->walk_through_structure( EXPORTING io_visitor = lo_structure_visitor
                                                 CHANGING  cs_structure =  cs_structure ).

    eo_table_content = lo_structure_visitor->get_table_records( ).

  ENDMETHOD.


  METHOD constructor.

    mo_structure_walker = io_structure_walker.
    IF mo_structure_walker IS INITIAL.
      CREATE OBJECT mo_structure_walker TYPE /aif/cl_structure_walker.
    ENDIF.

  ENDMETHOD.
ENDCLASS.