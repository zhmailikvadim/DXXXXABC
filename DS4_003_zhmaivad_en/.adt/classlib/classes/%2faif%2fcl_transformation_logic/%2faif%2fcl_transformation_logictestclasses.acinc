*"* use this source file for your ABAP unit test classes

class lcl_tests definition deferred.
class /aif/cl_transformation_logic definition local friends lcl_tests.

class lcl_tests definition for testing duration short risk level harmless.

  private section.
    types: begin of lty_raw_w_one_field,
             field type char1,
           end of lty_raw_w_one_field.

    data:
      "! class under test
      mo_cut                   type ref to /aif/cl_transformation_logic,

      "! structure walker mock instance
      mo_structure_walker_mock type ref to /aif/if_structure_walker.

    methods: "! preparations for the next unit test / is called directly before executing every unit test
      setup,

      "! constructor creates a structure walker instance if no parameter is provided
      constructor_creates_walker for testing,

      "! calling transform_struct_to_records should use the structure walker(transform_structure_to_recordstransform_structure_to_records) and return an object.
      transform_stru2rec_walker for testing raising /aif/cx_struct_pers_base,

      "! calling transform_records_to_structure should use the structure walker and return an structure with data.
      transform_rec2stru_walker for testing raising /aif/cx_struct_pers_base.

    " todo: test for missing mapping entry

endclass.       "lcl_Tests


class lcl_tests implementation.


  method setup.

    " create the structure walker mock
    mo_structure_walker_mock ?= cl_abap_testdouble=>create( '/aif/if_structure_walker' ).

    " inject mock
    create object mo_cut exporting io_structure_walker = mo_structure_walker_mock.

  endmethod.


  method constructor_creates_walker.

    " call method
    data(lo_cut) = new /aif/cl_transformation_logic( ).

    " verify result
    cl_abap_unit_assert=>assert_not_initial( lo_cut->mo_structure_walker ).

  endmethod.


  method transform_stru2rec_walker.

    data: ls_raw          type lty_raw_w_one_field,
          lo_null_visitor type ref to /aif/if_structure_visitor.

    " prepare mock
    cl_abap_testdouble=>configure_call( mo_structure_walker_mock )->ignore_parameter( 'io_visitor' )->and_expect( )->is_called_once( ).
    mo_structure_walker_mock->walk_through_structure( exporting io_visitor = lo_null_visitor
                                                      changing cs_structure = ls_raw ).

    mo_cut->/aif/if_transformation_logic~transform_structure_to_records( exporting it_mapping = value /aif/mapping_instruction_tt( )
                                                                         importing eo_table_content = data(lo_returned_object)
                                                                         changing cs_structure = ls_raw ).

    cl_aunit_assert=>assert_not_initial( lo_returned_object ).
    cl_abap_testdouble=>verify_expectations( mo_structure_walker_mock ).

  endmethod.

  method transform_rec2stru_walker .

    data: ls_raw          type lty_raw_w_one_field,
          lo_null_visitor type ref to /aif/if_structure_visitor.

    " prepare mock
    cl_abap_testdouble=>configure_call( mo_structure_walker_mock )->ignore_parameter( 'io_visitor' )->and_expect( )->is_called_once( ).
    mo_structure_walker_mock->walk_through_structure( exporting io_visitor = lo_null_visitor
                                                      changing cs_structure = ls_raw ).
    data(lr_table_buffer) = new /aif/cl_table_record_buffer( it_nonunique_keys = value #( ) ).

    " call method
    mo_cut->/aif/if_transformation_logic~transform_records_to_structure( exporting it_mapping = value /aif/mapping_instruction_tt( )
                                                                                   io_table_record_buffer = lr_table_buffer
                                                                          changing cs_structure = ls_raw ).

    " verify result
    cl_abap_testdouble=>verify_expectations( mo_structure_walker_mock ).

  endmethod.

endclass.