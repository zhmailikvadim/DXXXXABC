CLASS /iwfnd/cl_mgw_runt_rclnt_utils DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
*"* public components of class /IWFND/CL_MGW_RUNT_RCLNT_UTILS
*"* do not include other source files here!!!
    INTERFACE /iwfnd/if_mgw_core_types LOAD .

    CONSTANTS:
      BEGIN OF gcs_rfc_error_code,
        invalid_logon_data TYPE i VALUE 1,
        no_trusted_system  TYPE i VALUE 2,
        missing_s_rfcacl   TYPE i VALUE 3,
        invalid_time_stamp TYPE i VALUE 4,
        user_locked        TYPE i VALUE 5,
        too_many_attemps   TYPE i VALUE 6,
        invalid_user_type  TYPE i VALUE 7,
        validity_exceeded  TYPE i VALUE 8,
        connection_closed  TYPE i VALUE 97,
        logon_failed       TYPE i VALUE 98,
        others             TYPE i VALUE 99,
      END OF gcs_rfc_error_code .

    CLASS-METHODS clear .
    CLASS-METHODS create_rfc_error_code
      IMPORTING
        !iv_rfc_message          TYPE bapiret2-message
      RETURNING
        VALUE(rv_rfc_error_code) TYPE i .
    CLASS-METHODS create_rfc_system_exception
      IMPORTING
        !iv_rfc_message          TYPE /iwfnd/bec_rfc_exception_text
      RETURNING
        VALUE(rx_tech_exception) TYPE REF TO /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS get_actual_system_alias_info
      RETURNING
        VALUE(rs_system_alias_info) TYPE /iwfnd/c_dfsyal .
    CLASS-METHODS get_data_provider
      IMPORTING
        !iv_service_id          TYPE /iwfnd/med_mdl_srg_identifier
        !iv_model_id            TYPE /iwfnd/med_mdl_identifier
        !iv_entity_name         TYPE string
        !io_context             TYPE REF TO /iwfnd/if_mgw_context
      RETURNING
        VALUE(ro_data_provider) TYPE REF TO /iwfnd/if_mgw_core_runtime .
    CLASS-METHODS get_rfc_destination
      RETURNING
        VALUE(rv_rfc_destination) TYPE /iwfnd/defi_rfc_dest .
    CLASS-METHODS get_routing_for_svc_group
      IMPORTING
        !io_svc_group TYPE REF TO /iwfnd/if_med_mdl_service_grp
        !iv_model_id  TYPE /iwfnd/med_mdl_identifier .
    CLASS-METHODS get_sa_cache_active
      RETURNING
        VALUE(rv_sa_cache_active) TYPE abap_bool .
    CLASS-METHODS get_serialized_request_details
      IMPORTING
        !iv_cache_timestamp       TYPE timestamp OPTIONAL
      RETURNING
        VALUE(rv_request_context) TYPE xstring
      RAISING
        /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS get_service_info
      EXPORTING
        !ev_service_namespace TYPE /iwfnd/med_mdl_namespace
        !ev_service_name      TYPE /iwfnd/med_mdl_service_grp_id
        !ev_service_version   TYPE /iwfnd/med_mdl_version .
    CLASS-METHODS get_system_alias_for_svc_group
      RETURNING
        VALUE(rv_system_alias) TYPE /iwfnd/defi_system_alias .
    CLASS-METHODS handle_rfc_failure
      IMPORTING
        !iv_sy_subrc        TYPE sy-subrc
        !iv_exp_msg         TYPE /iwfnd/bec_rfc_exception_text
        !iv_perf_handle_bep TYPE i
        !iv_perf_handle_hub TYPE i
        !io_perf_util       TYPE REF TO /iwfnd/cl_sutil_runtime
        !iv_log_agent       TYPE /iwfnd/sup_iw_agent
        !iv_message_handle  TYPE balmsghndl
        !iv_rfc_dest        TYPE rfcdest
      RAISING
        /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS parse_rfc_message_text
      IMPORTING
        !iv_message_text TYPE /iwfnd/bec_rfc_exception_text
      EXPORTING
        !ev_logon_rc     TYPE int2
        !ev_trusted_rc   TYPE int2 .
    CLASS-METHODS process_msg_container
      IMPORTING
        !it_msg_container               TYPE /iwfnd/t_mgw_message_container
        !is_msg_container_header        TYPE /iwfnd/s_message_container_h
        !iv_is_batch_caused_by_previous TYPE abap_bool DEFAULT abap_false
        !it_http_header_parameters      TYPE tihttpnvp
        !iv_error_location              TYPE /iwfnd/sutil_location
        !iv_model_id                    TYPE /iwfnd/med_mdl_identifier
        !iv_msg_handle                  TYPE balmsghndl OPTIONAL
        !iv_system_alias                TYPE /iwfnd/defi_system_alias OPTIONAL
        !iv_destination                 TYPE rfcdest OPTIONAL
        !iv_log_to_error_log            TYPE xsdboolean DEFAULT abap_true
        !io_msg_container               TYPE REF TO /iwfnd/if_mgw_msg_container OPTIONAL
      RAISING
        /iwfnd/cx_mgw_tech_exception
        /iwfnd/cx_mgw_busi_exception .
    CLASS-METHODS raise_routing_exceptions
      RAISING
        /iwfnd/cx_med_mdl_access
        /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS resolve_navigation
      IMPORTING
        !iv_model_id            TYPE /iwfnd/med_mdl_identifier
        !iv_service_id          TYPE /iwfnd/med_mdl_srg_identifier
        !iv_entity_name         TYPE string
        !iv_entity_set_name     TYPE string
        !iv_source_name         TYPE string
        !is_request_details     TYPE /iwfnd/if_mgw_core_types=>request_s
        !iv_is_for_entity       TYPE abap_bool DEFAULT ' '
        !iv_is_for_create       TYPE abap_bool DEFAULT ' '
      EXPORTING
        !ev_new_source_name     TYPE string
        !ev_new_entity_set_name TYPE string
        !es_new_request_details TYPE /iwfnd/if_mgw_core_types=>request_s
      RAISING
        /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS serialize_request_details
      IMPORTING
        !iv_service_doc_name   TYPE /iwfnd/med_mdl_service_grp_id OPTIONAL
        !iv_namespace          TYPE /iwfnd/med_mdl_namespace OPTIONAL
        !iv_version            TYPE /iwfnd/med_mdl_version OPTIONAL
        !is_system_alias_info  TYPE /iwfnd/c_dfsyal OPTIONAL
        !iv_base_url           TYPE string OPTIONAL
        !it_context            TYPE /iwfnd/if_mgw_core_types=>parameter_values_t OPTIONAL
        !is_odata_req_details  TYPE /iwfnd/if_mgw_core_types=>request_s OPTIONAL
        !it_parameter          TYPE /iwfnd/if_mgw_core_types=>parameter_values_t OPTIONAL
        !it_select_params      TYPE string_table OPTIONAL
        !iv_target_entity_name TYPE string OPTIONAL
        !iv_target_entity_set  TYPE string OPTIONAL
        !iv_http_method        TYPE string OPTIONAL
        !iv_icf_root_node      TYPE icfname OPTIONAL
        !iv_agent              TYPE /iwfnd/sup_iw_agent OPTIONAL
        !iv_cache_timestamp    TYPE tzntstmps OPTIONAL
        !iv_verbose_metadata   TYPE /iwfnd/mgw_verbose_metadata OPTIONAL
      EXPORTING
        !ev_serialized_data    TYPE xstring
      RAISING
        /iwfnd/cx_mgw_tech_exception .
    CLASS-METHODS set_sa_cache_active
      IMPORTING
        !iv_sa_cache_active TYPE abap_bool .
    CLASS-METHODS trigger_cache_cleanup
      IMPORTING
        !iv_model_id TYPE /iwfnd/med_mdl_identifier OPTIONAL .
    CLASS-METHODS update_system_alias_info
      IMPORTING
        !is_system_alias    TYPE /iwfnd/c_dfsyal
        !is_backend_version TYPE /iwfnd/cl_mgw_util_versions=>ty_s_mgw_build_version .
  PROTECTED SECTION.
*"* protected components of class /IWFND/CL_MGW_RUNT_RCLNT_UTILS
*"* do not include other source files here!!!
  PRIVATE SECTION.

    TYPES:
      ty_req_cache_cleanup_level TYPE c LENGTH 1 .

    CONSTANTS:
      BEGIN OF gcs_req_cache_cleanup_levels,
        all     TYPE ty_req_cache_cleanup_level VALUE 'A',
        service TYPE ty_req_cache_cleanup_level VALUE 'S',
      END OF gcs_req_cache_cleanup_levels .
    CONSTANTS gc_agent TYPE /iwfnd/sup_iw_agent VALUE 'MGW_REMOTE_PROXY'. "#EC NOTEXT
    CONSTANTS gc_id_transformation TYPE cxsltdesc VALUE 'ID'. "#EC NOTEXT
    CONSTANTS gc_msgid_mgw TYPE symsgid VALUE '/IWFND/CM_MGW'. "#EC NOTEXT
    CONSTANTS gc_msgno_data_exchanged TYPE symsgno VALUE 004. "#EC NOTEXT
    CLASS-DATA ms_system_alias_info TYPE /iwfnd/c_dfsyal .
    CLASS-DATA mv_request_context TYPE xstring .
    CLASS-DATA mv_rfc_destination TYPE /iwfnd/defi_rfc_dest VALUE space. "#EC NOTEXT
    CLASS-DATA mv_sa_cache_active TYPE abap_bool .
*"* private components of class /IWFND/CL_MGW_RUNT_RCLNT_UTILS
*"* do not include other source files here!!!
    CLASS-DATA mv_svc_name TYPE /iwfnd/med_mdl_service_grp_id .
    CLASS-DATA mv_svc_namespace TYPE /iwfnd/med_mdl_namespace .
    CLASS-DATA mv_svc_version TYPE /iwfnd/med_mdl_version .
    CLASS-DATA mv_system_alias TYPE /iwfnd/defi_system_alias .
    CLASS-DATA mx_med TYPE REF TO /iwfnd/cx_med_mdl_access .
    CLASS-DATA mx_tech TYPE REF TO /iwfnd/cx_mgw_tech_exception .

    CLASS-METHODS trigger_request_cache_cleanup
      IMPORTING
        !iv_cleanup_level TYPE c .
ENDCLASS.



CLASS /IWFND/CL_MGW_RUNT_RCLNT_UTILS IMPLEMENTATION.


  METHOD clear.

    CLEAR:
       ms_system_alias_info, " System alias info for the actual request
       mv_request_context,   " Serialized request context
       mv_rfc_destination,   " Logical RFC Destination - Points to SAP system
       mv_sa_cache_active,   " System-alias based cache flag
       mv_svc_name,          " Service Name
       mv_svc_namespace,     " Service Namespace
       mv_svc_version,       " Service Version
       mv_system_alias,      " System alias for the actual request
       mx_med,               " Exception class for meta data access
       mx_tech.               " MGW Technical Exception

  ENDMETHOD.


  METHOD create_rfc_error_code.

    DATA: lv_offset   TYPE i,
          lv_logon_rc	TYPE i,
          lv_trust_rc	TYPE i,
          lv_dummy    TYPE string,
          lv_suffix   TYPE string.


* Two different Trust RFC error messages are available (based on NW Releases):
*   No authorization to logon as trusted system (Trusted RC=2).
*   No authorization to log via a trusted system (L-RC=1002 T-RC=2).


    " Error Text 1: No authorization to logon as trusted system (Trusted RC=2).
    SEARCH iv_rfc_message FOR 'Trusted RC='.
    IF sy-subrc = 0.
      lv_offset = sy-fdpos + 11.
      lv_suffix = iv_rfc_message+lv_offset.
      SPLIT lv_suffix AT ')' INTO lv_dummy lv_suffix.
      TRY.
          lv_trust_rc = lv_dummy.
        CATCH cx_sy_conversion_no_number.
          rv_rfc_error_code = gcs_rfc_error_code-others.
          RETURN.
      ENDTRY.

      " Create RFC Error Code based on Trust Return Code
      CASE lv_trust_rc.
        WHEN 0.
          rv_rfc_error_code = gcs_rfc_error_code-invalid_logon_data.
        WHEN 1.
          rv_rfc_error_code = gcs_rfc_error_code-no_trusted_system.
        WHEN 2.
          rv_rfc_error_code = gcs_rfc_error_code-missing_s_rfcacl.
        WHEN 3.
          rv_rfc_error_code = gcs_rfc_error_code-invalid_time_stamp.
        WHEN OTHERS.
          rv_rfc_error_code = gcs_rfc_error_code-others.
      ENDCASE.
      RETURN.
    ENDIF.


    " Error Text 2: No authorization to log via a trusted system (L-RC=1002 T-RC=2).
    SEARCH iv_rfc_message FOR 'L-RC='.
    IF sy-subrc <> 0.
      IF iv_rfc_message CS 'connection closed (no data)'.
        rv_rfc_error_code = gcs_rfc_error_code-connection_closed.
      ELSEIF iv_rfc_message CS 'CPIC-CALL: ''ThSAPCMRCV'', communication rc: CM_DEAL'.
        rv_rfc_error_code = gcs_rfc_error_code-logon_failed.
      ELSE.
        rv_rfc_error_code = gcs_rfc_error_code-others.
      ENDIF.
      RETURN.
    ENDIF.

    " Determine Logon Return Code
    lv_offset = sy-fdpos + 5.
    lv_suffix = iv_rfc_message+lv_offset.
    SPLIT lv_suffix AT ' ' INTO lv_dummy lv_suffix.
    TRY.
        lv_logon_rc = lv_dummy.
      CATCH cx_sy_conversion_no_number.
        rv_rfc_error_code = gcs_rfc_error_code-others.
        RETURN.
    ENDTRY.

    " Determine Trusted Return Code
    SEARCH lv_suffix FOR 'T-RC='.
    IF sy-subrc <> 0.
      rv_rfc_error_code = gcs_rfc_error_code-others.
      RETURN.
    ENDIF.
    lv_offset = sy-fdpos + 5.
    lv_suffix = lv_suffix+lv_offset.
    SPLIT lv_suffix AT ')' INTO lv_dummy lv_suffix.
    TRY.
        lv_trust_rc = lv_dummy.
      CATCH cx_sy_conversion_no_number.
        rv_rfc_error_code = gcs_rfc_error_code-others.
        RETURN.
    ENDTRY.

    " Create RFC Error Code based on Trust and Logon Return Code
    CASE lv_trust_rc.
      WHEN 0.
        CASE lv_logon_rc.
          WHEN 1.
            rv_rfc_error_code = gcs_rfc_error_code-invalid_logon_data.
          WHEN 2.
            rv_rfc_error_code = gcs_rfc_error_code-user_locked.
          WHEN 3.
            rv_rfc_error_code = gcs_rfc_error_code-too_many_attemps.
          WHEN 7.
            rv_rfc_error_code = gcs_rfc_error_code-invalid_user_type.
          WHEN 8.
            rv_rfc_error_code = gcs_rfc_error_code-validity_exceeded.
          WHEN 1002.
            rv_rfc_error_code = gcs_rfc_error_code-missing_s_rfcacl.
          WHEN OTHERS.
            rv_rfc_error_code = gcs_rfc_error_code-others.
        ENDCASE.

      WHEN 1.
        rv_rfc_error_code = gcs_rfc_error_code-no_trusted_system.
      WHEN 2.
        rv_rfc_error_code = gcs_rfc_error_code-missing_s_rfcacl.
      WHEN 3.
        rv_rfc_error_code = gcs_rfc_error_code-invalid_time_stamp.
      WHEN OTHERS.
        rv_rfc_error_code = gcs_rfc_error_code-others.
    ENDCASE.

  ENDMETHOD.


  METHOD create_rfc_system_exception.

    DATA: lv_rfc_error_code TYPE i,
          lv_error_text     TYPE bapiret2-message,
          lv_sap_note_id    TYPE /iwbep/cx_gateway=>ty_sap_note_id,
          lv_textid         TYPE scx_t100key,
          lv_message_v1     TYPE symsgv,
          lv_message_v2     TYPE symsgv,
          lv_message_v3     TYPE symsgv,
          lv_message_v4     TYPE symsgv.


    " Determine RFC Error Code based on RFC Error Text
    lv_rfc_error_code = create_rfc_error_code( iv_rfc_message ).

    lv_sap_note_id = 128447. " 128447 - Trusted/trusting systems BC-MID-RFC

    " Set Text ID of technical exception
    CASE lv_rfc_error_code.
      WHEN gcs_rfc_error_code-invalid_logon_data.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_user_not_allowed.

      WHEN gcs_rfc_error_code-no_trusted_system.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_no_trusted_system.

      WHEN gcs_rfc_error_code-missing_s_rfcacl.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_missing_authorization.

      WHEN gcs_rfc_error_code-invalid_time_stamp.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_invalid_time_stamp.

      WHEN gcs_rfc_error_code-user_locked.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_user_locked.

      WHEN gcs_rfc_error_code-too_many_attemps.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_stop_session.

      WHEN gcs_rfc_error_code-invalid_user_type.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_wrong_user_type.

      WHEN gcs_rfc_error_code-validity_exceeded.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_user_not_valid.

      WHEN gcs_rfc_error_code-connection_closed.
        CLEAR: lv_sap_note_id.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_connection_closed.

      WHEN gcs_rfc_error_code-logon_failed.
        CLEAR: lv_sap_note_id.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_logon_failed.
        IF iv_rfc_message CS 'CPIC-CALL: ''ThSAPCMRCV'', communication rc: CM_DEAL'.
          lv_error_text = 'Logon failed / CPIC-CALL: ''ThSAPCMRCV'', communication rc: CM_DEALLOCATED_ABEND (cmRc=17)'.
        ENDIF.

      WHEN OTHERS.
        CLEAR: lv_sap_note_id.
        lv_textid = /iwfnd/cx_mgw_tech_exception=>rfc_system_failure.
        IF iv_rfc_message IS INITIAL.
          lv_error_text = 'Unknown Error'(e02).
        ELSE.
          lv_error_text = iv_rfc_message.
        ENDIF.
        CONCATENATE 'RFC Error:'(e03)
                    lv_error_text
          INTO lv_error_text SEPARATED BY space.

    ENDCASE.

    " Message Variables for displaying T100 message within Error Log
    lv_message_v1 = lv_error_text.
    lv_message_v2 = lv_error_text+50.
    lv_message_v3 = lv_error_text+100.
    lv_message_v4 = lv_error_text+150.

    " Create a technical exception
    CREATE OBJECT rx_tech_exception
      EXPORTING
        textid              = lv_textid
        sap_note_id         = lv_sap_note_id
        rfc_failure_message = lv_error_text
        rfc_message_v1      = lv_message_v1
        rfc_message_v2      = lv_message_v2
        rfc_message_v3      = lv_message_v3
        rfc_message_v4      = lv_message_v4.

  ENDMETHOD.


  METHOD get_actual_system_alias_info.

    rs_system_alias_info = ms_system_alias_info.

  ENDMETHOD.


  METHOD get_data_provider.

    CONSTANTS: lc_log_agent TYPE /iwfnd/sup_iw_agent VALUE 'DATA_PROVIDER_DE'.

    DATA: lv_provider_class_name  TYPE string.
    DATA: lo_instance_manager     TYPE REF TO /iwfnd/cl_mgw_inst_man.
    DATA: lx_inm_manager          TYPE REF TO /iwfnd/cx_inm_manager.
    DATA: lv_perf_handle          TYPE i.
    DATA: lo_sutil_runtime        TYPE REF TO /iwfnd/cl_sutil_runtime.
    DATA: lo_batch_helper         TYPE REF TO /iwfnd/cl_mgw_batch_helper.
    DATA: lo_logger               TYPE REF TO /iwfnd/cl_logger.
    DATA: lv_host_name            TYPE string.
    DATA: lt_request_attributes   TYPE tihttpnvp.
    DATA: lx_tech_exception       TYPE REF TO /iwfnd/cx_mgw_tech_exception.
    DATA: lx_busi_exception       TYPE REF TO /iwfnd/cx_mgw_busi_exception.


    lo_sutil_runtime = /iwfnd/cl_sutil_runtime=>get_instance( ).

    lv_perf_handle = lo_sutil_runtime->performance_start( iv_agent = lc_log_agent ).

    lo_logger = /iwfnd/cl_logger=>get_logger( ).

    io_context->get_parameter(
      EXPORTING iv_name  = /iwfnd/if_sodata_types=>gcs_iwf_context_parameters-all_parameters
      IMPORTING ev_value = lt_request_attributes
    ).

    io_context->get_parameter(
      EXPORTING iv_name  = /iwfnd/if_mgw_context=>gc_param_host_name
      IMPORTING ev_value = lv_host_name
    ).


* Get Instance Manager
    lo_instance_manager = /iwfnd/cl_mgw_inst_man=>get_inst_man( ).


* Get Data Provider from Instance Manager
    TRY.
        ro_data_provider = lo_instance_manager->get_data_provider(
                             iv_service_id         = iv_service_id
                             iv_model_id           = iv_model_id
                             iv_host_name          = lv_host_name
                             iv_entity_name        = iv_entity_name
                             it_request_attributes = lt_request_attributes
                           ).
      CATCH /iwfnd/cx_inm_manager INTO lx_inm_manager.
        CREATE OBJECT lx_tech_exception
          EXPORTING
            textid   = /iwfnd/cx_mgw_tech_exception=>missing_customizing
            previous = lx_inm_manager.
        lo_logger->log_step_completion_exception(
            io_exception    = lx_tech_exception
            iv_agent        = lc_log_agent
        ).
*         No exception at INIT allowed --> Exception will be raised at all later calls
        EXIT.
      CATCH /iwfnd/cx_mgw_tech_exception INTO lx_tech_exception.
*         No exception at INIT allowed --> Exception will be raised at all later calls
        EXIT.
    ENDTRY.


* No Data Provider: BEP Service as fallback
    IF ro_data_provider IS NOT BOUND.
      lo_logger->log_message(
         iv_msg_type     =  /iwfnd/cl_logger=>warning
         iv_msg_id       = '/IWFND/CM_MGW'
         iv_msg_number   = 088  "Data Provider Instantiation for service '&1' is based on fallback.
         iv_msg_v1       = iv_service_id
         iv_agent        = lc_log_agent
       ).

      TRY.
          ro_data_provider = lo_instance_manager->get_data_provider_fallback(
                               iv_service_id         = iv_service_id
                               iv_model_id           = iv_model_id
                               iv_host_name          = lv_host_name
                               iv_entity_name        = iv_entity_name
                               it_request_attributes = lt_request_attributes
                             ).
        CATCH /iwfnd/cx_inm_manager INTO lx_inm_manager.
          CREATE OBJECT lx_tech_exception
            EXPORTING
              textid   = /iwfnd/cx_mgw_tech_exception=>missing_customizing
              previous = lx_inm_manager.
*         No exception at INIT allowed --> Exception will be raised at all later calls
          EXIT.
        CATCH /iwfnd/cx_mgw_tech_exception INTO lx_tech_exception.
*         No exception at INIT allowed --> Exception will be raised at all later calls
          EXIT.
      ENDTRY.
    ENDIF.


* Batch only for BEP providers
    lv_provider_class_name = cl_abap_classdescr=>get_class_name( ro_data_provider ).
    SHIFT lv_provider_class_name BY 7 PLACES.
    IF lv_provider_class_name <> /iwfnd/cl_mgw_inst_man=>gcs_data_prov_impl_names-bep_remote_proxy AND
       lv_provider_class_name <> /iwfnd/cl_mgw_inst_man=>gcs_data_prov_impl_names-multi_origin_proxy.
      lo_batch_helper = /iwfnd/cl_mgw_batch_helper=>get_batch_helper( ).
      IF lo_batch_helper->mv_changeset = abap_true.
        lo_batch_helper->changeset_set_not_supported( ).

        CREATE OBJECT lx_busi_exception
          EXPORTING
            textid = /iwfnd/cx_mgw_busi_exception=>changeset_not_supported.

        lo_logger->log_step_completion_exception(
            io_exception    = lx_busi_exception
            iv_agent        = lc_log_agent
        ).
        " No exception at INIT allowed --> Exception will be raised at all later calls
      ENDIF.
    ENDIF.

* Logging
    lo_logger->log_message(
      iv_msg_type     = 'I'
      iv_msg_id       = '/IWFND/CM_MGW'
      iv_msg_number   = 085 "Data Provider Delegator instantiated data provider class '&1'
      iv_msg_v1       = lv_provider_class_name
      iv_agent        = lc_log_agent
    ).

    lo_sutil_runtime->performance_stop( lv_perf_handle ).

  ENDMETHOD.                    "get_data_provider


  METHOD get_rfc_destination.
    IF mv_rfc_destination IS NOT INITIAL.
      rv_rfc_destination = mv_rfc_destination.
    ELSE.
      rv_rfc_destination = ms_system_alias_info-rfc_dest.
    ENDIF.

  ENDMETHOD.


  METHOD get_routing_for_svc_group.

    DATA: lv_system_alias      TYPE        /iwfnd/defi_system_alias,
          ls_system_alias_info TYPE        /iwfnd/c_dfsyal,
          lv_service_id        TYPE        /iwfnd/med_mdl_srg_identifier,
          lv_service_name      TYPE        /iwfnd/med_mdl_srg_name,
          lv_svc_namespace     TYPE        /iwfnd/med_mdl_namespace,
          lv_svc_version       TYPE        /iwfnd/med_mdl_version,
          lo_logger            TYPE REF TO /iwfnd/cl_logger,
          lx_med               TYPE REF TO /iwfnd/cx_med_mdl_access,
          lx_tech              TYPE REF TO /iwfnd/cx_mgw_tech_exception,
          lx_destin_finder     TYPE REF TO /iwfnd/cx_destin_finder,
          lo_trans_handler     TYPE REF TO /iwfnd/cl_transaction_handler,
          lv_use_metadata_flag TYPE abap_bool,
          ls_hub_version       TYPE /iwfnd/cl_mgw_util_versions=>ty_s_mgw_hub_version.


    TRY .
        io_svc_group->get_service_for_model(
          EXPORTING
            iv_model_id       = iv_model_id
          IMPORTING
            ev_svc_identifier = lv_service_id
            ev_svc_name       = lv_service_name
            ev_svc_namespace  = lv_svc_namespace
            ev_svc_version    = lv_svc_version
        ).

        mv_svc_name      = lv_service_name.
        mv_svc_namespace = lv_svc_namespace.
        mv_svc_version   = lv_svc_version.

      CATCH /iwfnd/cx_med_mdl_access INTO lx_med.
        mx_med = lx_med.
        RETURN.
    ENDTRY.

* CATALOG Service doesn't have System Alias (prevent Error Log entry)
    IF lv_service_id CS '/IWFND/SG_MED_CATALOG_'.
      RETURN.
    ENDIF.

* SP10: In case of MDC the metadata is read from a designated backend system
*       Otherwise the metadata is read from the same system as the data
    lo_trans_handler     = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
    lv_use_metadata_flag = lo_trans_handler->get_is_mdc( ).

    IF lo_trans_handler->get_process_mode( ) = /iwfnd/if_mgw_core_types=>gcs_process_mode-co_deployed_only
    OR /iwfnd/cl_mgw_dest_finder=>get_process_mode( lv_service_id ) = /iwfnd/if_mgw_core_types=>gcs_process_mode-co_deployed_only.

      "Co-Depoyed Mode does not have a system alias
      ls_hub_version = /iwfnd/cl_mgw_util_versions=>get_hub_version( ).
      /iwfnd/cl_mgw_util_versions=>set_gwbep_version( iv_version = ls_hub_version-gwfnd_version ).

    ELSE.
      " If the service is inherited, use parent system alias and ask for routing information
      IF /iwfnd/cl_mgw_dest_finder=>get_process_mode( lv_service_id ) = /iwfnd/if_mgw_core_types=>gcs_process_mode-inherited.

        lv_system_alias = lo_trans_handler->get_system_alias( ).

      ELSE.
        TRY .
            /iwfnd/cl_mgw_dest_finder=>find_svc_destination_old(
              EXPORTING
                iv_svc_identifier  = lv_service_id
                iv_is_for_metadata = lv_use_metadata_flag "Only use special metadata routing for MDC
              IMPORTING
                ev_sys_alias        = lv_system_alias ).

          CATCH /iwfnd/cx_mgw_tech_exception INTO lx_tech.
            mx_tech  = lx_tech.
            CLEAR mv_system_alias.
            RETURN.
        ENDTRY.

      ENDIF.

      TRY .
          ls_system_alias_info = /iwfnd/cl_destin_finder=>get_destination_finder( )->get_system_alias_info( lv_system_alias ).

        CATCH /iwfnd/cx_destin_finder INTO lx_destin_finder.

          CREATE OBJECT lx_med
            EXPORTING
              textid   = /iwfnd/cx_med_mdl_access=>missing_system_alias
              previous = lx_destin_finder.

          lo_logger = /iwfnd/cl_logger=>get_logger( ).

          lo_logger->log_step_completion_exception(
            io_exception        = lx_med
            iv_agent            = /iwfnd/cl_med_mdl_provider=>gc_agent
            iv_log_to_error_log = abap_true
            iv_error_location   = /iwfnd/if_sutil_constants=>gcs_location-gateway
          ).
          mx_med = lx_med.
          RETURN.
      ENDTRY.

      IF ( ls_system_alias_info-is_for_bep = abap_false ).  " We need the RFC destination to call BEP
        mv_rfc_destination = ls_system_alias_info-rfc_dest.       " Keep the RFC destination
        CLEAR ls_system_alias_info-ws_provider_syst.        " But do not send WS to the BEP
        CLEAR ls_system_alias_info-rfc_dest.                " But do not send it to the BEP
      ENDIF.

      "this is needed in case of service composition that has different system aliases (see note 2440502)
      IF ls_system_alias_info-is_local_iwf EQ abap_false.
        lo_trans_handler->set_is_routing_based( ).
      ENDIF.

      ms_system_alias_info  = ls_system_alias_info.
      mv_system_alias       = lv_system_alias.
      lo_trans_handler->set_system_alias( lv_system_alias ).

* Set GWBEP Version
      /iwfnd/cl_mgw_util_versions=>set_gwbep_version( iv_version = ls_system_alias_info-gwbep_version ).

    ENDIF.

  ENDMETHOD.


  METHOD get_sa_cache_active.

    rv_sa_cache_active = mv_sa_cache_active.

  ENDMETHOD.


  METHOD get_serialized_request_details.

    DATA:
      lo_transaction_hand TYPE REF TO /iwfnd/cl_transaction_handler,
      lv_verbose_metadata TYPE /iwfnd/mgw_verbose_metadata.

* Fill attribute verbose_metadata (performance reasons loading texts)
    lo_transaction_hand   = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
    lv_verbose_metadata = lo_transaction_hand->get_extend_of_metadata( ).

    /iwfnd/cl_mgw_runt_rclnt_utils=>serialize_request_details(
      EXPORTING
        iv_service_doc_name   = mv_svc_name
        iv_version            = mv_svc_version
        iv_namespace          = mv_svc_namespace
        iv_agent              = /iwfnd/cl_med_mdl_provider=>gc_agent
        is_system_alias_info  = ms_system_alias_info
        iv_cache_timestamp    = iv_cache_timestamp
        iv_verbose_metadata   = lv_verbose_metadata
      IMPORTING
        ev_serialized_data    = mv_request_context
    ).

    rv_request_context = mv_request_context.

  ENDMETHOD.


  METHOD get_service_info.

    ev_service_namespace = mv_svc_namespace.
    ev_service_name      = mv_svc_name.
    ev_service_version   = mv_svc_version.

  ENDMETHOD.


  METHOD get_system_alias_for_svc_group.

    rv_system_alias = mv_system_alias.

  ENDMETHOD.


  METHOD handle_rfc_failure.

    DATA: lv_message_v1     TYPE symsgv,
          lv_message_v2     TYPE symsgv,
          lv_message_v3     TYPE symsgv,
          lv_message_v4     TYPE symsgv,
          lv_error_text     TYPE bapiret2-message,
          lo_logger         TYPE REF TO /iwfnd/cl_logger,
          lx_tech_exception TYPE REF TO /iwfnd/cx_mgw_tech_exception.


    " Stop performance trace step for backend
    IF iv_perf_handle_bep IS NOT INITIAL.
      io_perf_util->performance_stop( iv_perf_handle_bep ).
    ENDIF.

    " No more to do if no RFC error
    IF iv_sy_subrc = 0. RETURN. ENDIF.

    " Stop performance trace step for gateway hub
    IF iv_perf_handle_hub IS NOT INITIAL.
      io_perf_util->performance_stop( iv_perf_handle_hub ).
    ENDIF.

    " Get logger instance for Application Log
    lo_logger = /iwfnd/cl_logger=>get_logger( ).

    " System failure or communication failure
    CASE iv_sy_subrc.

      WHEN 1000. " System failure
        lx_tech_exception = create_rfc_system_exception( iv_exp_msg ).

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_agent            = iv_log_agent
          iv_msg_handle       = iv_message_handle
          iv_log_to_ccms      = abap_true
          iv_log_to_error_log = abap_true
          iv_error_location   = /iwfnd/if_sutil_constants=>gcs_location-backend
        ).
        RAISE EXCEPTION lx_tech_exception.

      WHEN 1001. " Communication failure
        IF iv_exp_msg CS 'CM_PRODUCT_SPECIFIC_ERROR'.
          CONCATENATE 'RFC Error:'(e03)
                      'Run ''Connection Test'' in sm59 for destination'(e04)
                      iv_rfc_dest
                      'for more details'(e05)
            INTO lv_error_text SEPARATED BY space.          "#EC NOTEXT
        ELSE.
          CONCATENATE 'RFC Error:'(e03)
                      iv_exp_msg
            INTO lv_error_text SEPARATED BY space.          "#EC NOTEXT
        ENDIF.
        lv_message_v1 = lv_error_text.
        lv_message_v2 = lv_error_text+50.
        lv_message_v3 = lv_error_text+100.
        lv_message_v4 = lv_error_text+150.
        CREATE OBJECT lx_tech_exception
          EXPORTING
            textid              = /iwfnd/cx_mgw_tech_exception=>rfc_communication_failure
            rfc_failure_message = iv_exp_msg
            rfc_message_v1      = lv_message_v1
            rfc_message_v2      = lv_message_v2
            rfc_message_v3      = lv_message_v3
            rfc_message_v4      = lv_message_v4.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_agent            = iv_log_agent
          iv_msg_handle       = iv_message_handle
          iv_log_to_ccms      = abap_true
          iv_log_to_error_log = abap_true
          iv_error_location   = /iwfnd/if_sutil_constants=>gcs_location-backend
        ).
        RAISE EXCEPTION lx_tech_exception.

      WHEN OTHERS.  " does it happen at all?
        CREATE OBJECT lx_tech_exception
          EXPORTING
            textid = /iwfnd/cx_mgw_tech_exception=>rfc_others_error.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_agent            = iv_log_agent
          iv_msg_handle       = iv_message_handle
          iv_log_to_ccms      = abap_true
          iv_log_to_error_log = abap_true
          iv_error_location   = /iwfnd/if_sutil_constants=>gcs_location-backend
        ).
        RAISE EXCEPTION lx_tech_exception.

    ENDCASE.

  ENDMETHOD.                    "HANDLE_RFC_FAILURE


  METHOD parse_rfc_message_text.

    DATA: lv_start_index TYPE i.
    DATA: lv_msg_suffix  TYPE string.
    DATA: lv_logon_rc	  TYPE char4,
          lv_trusted_rc	TYPE char4.


* Example: IV_MESSAGE_TEXT = "No authorization to log on as a Trusted System (L-RC=8 T-RC=0)."

    SEARCH iv_message_text FOR 'L-RC='.
    IF ( sy-subrc = 0 ).

      lv_start_index = sy-fdpos + 5.
      lv_msg_suffix = iv_message_text+lv_start_index.                 " lv_msg_suffix = "8 T-RC=0)."
      SPLIT lv_msg_suffix AT ' ' INTO lv_logon_rc lv_msg_suffix.      " EV_LOGON_RC = "8"

      TRY.
          ev_logon_rc = lv_logon_rc.
        CATCH cx_sy_conversion_no_number.
          CLEAR ev_logon_rc.
          EXIT.
      ENDTRY.


      SEARCH lv_msg_suffix FOR 'T-RC='.
      IF ( sy-subrc = 0 ).

        lv_start_index = sy-fdpos + 5.
        lv_msg_suffix = lv_msg_suffix+lv_start_index.                 " lv_msg_suffix = "0)."
        SPLIT lv_msg_suffix AT ')' INTO lv_trusted_rc lv_msg_suffix.  " EV_TRUSTED_RC = "0"

        TRY.
            ev_trusted_rc = lv_trusted_rc.
          CATCH cx_sy_conversion_no_number.
            CLEAR ev_logon_rc.
            CLEAR ev_trusted_rc.
        ENDTRY.

      ELSE.
        CLEAR ev_logon_rc.
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD process_msg_container.

    CONSTANTS:
          lc_delimiter            TYPE c LENGTH 1 VALUE '.'.

    DATA: ls_lead_msg            TYPE /iwfnd/s_mgw_message_container,
          lv_error_message       TYPE string,
          lo_logger              TYPE REF TO /iwfnd/cl_logger,
          lo_sutil_runtime       TYPE REF TO /iwfnd/cl_sutil_runtime,
          lo_mgw_msg_container   TYPE REF TO /iwfnd/if_mgw_msg_container,
          lx_tech_exception      TYPE REF TO /iwfnd/cx_mgw_tech_exception,
          lx_busi_exception      TYPE REF TO /iwfnd/cx_mgw_busi_exception,
          ls_http_header         TYPE ihttpnvp,
          lt_http_header         TYPE tihttpnvp,
          lo_transaction_handler TYPE REF TO /iwfnd/cl_transaction_handler.


* Cleanup Metadata Cache if outdated
    IF is_msg_container_header-exception_txt = '/IWBEP/CM_MGW_RT/003'.
      " Inform Transaction Handler to cleanup at processing end
      lo_transaction_handler = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
      lo_transaction_handler->set_cache_cleanup( ).
    ENDIF.

    " no data -> nothing to do
    IF it_msg_container[] IS INITIAL AND
       ( is_msg_container_header-exception_category IS INITIAL OR
         is_msg_container_header-exception_category = 'NONE' ).
      RETURN.
    ENDIF.

    " get logger instance
    lo_logger = /iwfnd/cl_logger=>get_logger( ).

    " Batch All: always create a new message container
    IF io_msg_container IS BOUND.
      lo_mgw_msg_container = io_msg_container.
    ELSE.
      lo_mgw_msg_container = /iwfnd/cl_mgw_msg_container=>get_mgw_msg_container( ).
    ENDIF.

    lo_sutil_runtime = /iwfnd/cl_sutil_runtime=>get_instance( ).
    lo_sutil_runtime->log_set_error_location( /iwfnd/if_sutil_constants=>gcs_location-backend ).

    lo_mgw_msg_container->add_messages_from_mgw_tab(
        EXPORTING
          it_msg_container        = it_msg_container
          is_msg_container_header = is_msg_container_header
          iv_message_creator      = gc_agent
          ).


    " get leading message to determine the msg id/type/class
    READ TABLE it_msg_container INTO ls_lead_msg WITH KEY is_leading_message = abap_true.

    " get/create error text
    IF is_msg_container_header-exception_category IS NOT INITIAL AND
       is_msg_container_header-exception_category <> /iwfnd/if_mgw_msg_container=>gcs_exception_category-none AND
       is_msg_container_header-exception_category <> /iwfnd/if_mgw_msg_container=>gcs_exception_category-warning.
      IF it_msg_container IS INITIAL AND is_msg_container_header-exception_ltxt IS INITIAL.
        lv_error_message = 'Exception raised without specific error'(e01).
      ELSE.
        lv_error_message = is_msg_container_header-exception_ltxt.
      ENDIF.
    ENDIF.

    " raise exception for client messages
    CASE is_msg_container_header-exception_category.

      WHEN /iwfnd/if_mgw_msg_container=>gcs_exception_category-none
        OR /iwfnd/if_mgw_msg_container=>gcs_exception_category-warning
        OR space.
        " no expection has been raised in backend system

      WHEN /iwfnd/if_mgw_msg_container=>gcs_exception_category-cr_incon OR
           /iwfnd/if_mgw_msg_container=>gcs_exception_category-cr_deprecated.

        lt_http_header = it_http_header_parameters.
        IF is_msg_container_header-http_status_code EQ '503'.
          ls_http_header-name  = 'retry-after'.
          ls_http_header-value = 0.
          APPEND ls_http_header TO lt_http_header.
        ENDIF.

        CREATE OBJECT lx_tech_exception
          EXPORTING
            remote_error_unlimited   = lv_error_message
            message_container        = lo_mgw_msg_container
            batch_caused_by_previous = iv_is_batch_caused_by_previous
            http_status_code         = is_msg_container_header-http_status_code
            sap_note_id              = is_msg_container_header-sap_note_id
            http_header_parameters   = lt_http_header
            msg_code                 = is_msg_container_header-message_code.

        IF is_msg_container_header-exception_code CA lc_delimiter.
          SPLIT is_msg_container_header-exception_code AT lc_delimiter
            INTO lx_tech_exception->if_t100_message~t100key-msgid lx_tech_exception->if_t100_message~t100key-msgno.
        ELSEIF ls_lead_msg-id IS NOT INITIAL AND ls_lead_msg-number IS NOT INITIAL.
          lx_tech_exception->if_t100_message~t100key-msgid = ls_lead_msg-id.
          lx_tech_exception->if_t100_message~t100key-msgno = ls_lead_msg-number.
        ENDIF.

        IF is_msg_container_header-exception_category EQ /iwfnd/if_mgw_msg_container=>gcs_exception_category-cr_deprecated.
          trigger_request_cache_cleanup( iv_cleanup_level = gcs_req_cache_cleanup_levels-all ).
        ELSE.
          trigger_request_cache_cleanup( iv_cleanup_level = gcs_req_cache_cleanup_levels-service ).
        ENDIF.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_msg_id           = gc_msgid_mgw
          iv_msg_number       = gc_msgno_data_exchanged
          iv_agent            = gc_agent
          iv_msg_handle       = iv_msg_handle
          iv_log_to_error_log = iv_log_to_error_log
          iv_system_alias     = iv_system_alias
          iv_destination      = iv_destination
          iv_error_location   = iv_error_location
        ).

*-------finally raise exception
        RAISE EXCEPTION lx_tech_exception.

      WHEN /iwfnd/if_mgw_msg_container=>gcs_exception_category-gwmdout.  " Metadata on Gateway is outdated

        lt_http_header = it_http_header_parameters.
        IF is_msg_container_header-http_status_code EQ '503'.
          ls_http_header-name  = 'retry-after'.
          ls_http_header-value = 0.
          APPEND ls_http_header TO lt_http_header.
        ENDIF.

        CREATE OBJECT lx_tech_exception
          EXPORTING
            remote_error_unlimited   = lv_error_message
            message_container        = lo_mgw_msg_container
            batch_caused_by_previous = iv_is_batch_caused_by_previous
            http_status_code         = is_msg_container_header-http_status_code
            sap_note_id              = is_msg_container_header-sap_note_id
            http_header_parameters   = lt_http_header
            msg_code                 = is_msg_container_header-message_code.

        IF is_msg_container_header-exception_code CA lc_delimiter.
          SPLIT is_msg_container_header-exception_code AT lc_delimiter
            INTO lx_tech_exception->if_t100_message~t100key-msgid lx_tech_exception->if_t100_message~t100key-msgno.
        ELSEIF ls_lead_msg-id IS NOT INITIAL AND ls_lead_msg-number IS NOT INITIAL.
          lx_tech_exception->if_t100_message~t100key-msgid = ls_lead_msg-id.
          lx_tech_exception->if_t100_message~t100key-msgno = ls_lead_msg-number.
        ENDIF.

*-------trigger cache refresh for the outdated model - metadata is reloaded and stored in cache in the next request
        trigger_cache_cleanup( iv_model_id ).

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_msg_id           = gc_msgid_mgw
          iv_msg_number       = gc_msgno_data_exchanged
          iv_agent            = gc_agent
          iv_msg_handle       = iv_msg_handle
          iv_log_to_error_log = iv_log_to_error_log
          iv_system_alias     = iv_system_alias
          iv_destination      = iv_destination
          iv_error_location   = iv_error_location
        ).

*-------finally raise exception
        RAISE EXCEPTION lx_tech_exception.

      WHEN /iwfnd/if_mgw_msg_container=>gcs_exception_category-busi.
        CREATE OBJECT lx_busi_exception
          EXPORTING
            business_error_unlimited = lv_error_message
            message_container        = lo_mgw_msg_container
            batch_caused_by_previous = iv_is_batch_caused_by_previous
            http_status_code         = is_msg_container_header-http_status_code
            sap_note_id              = is_msg_container_header-sap_note_id
            http_header_parameters   = it_http_header_parameters
            msg_code                 = is_msg_container_header-message_code.

        IF is_msg_container_header-exception_code CA lc_delimiter.
          SPLIT is_msg_container_header-exception_code AT lc_delimiter
            INTO lx_busi_exception->if_t100_message~t100key-msgid lx_busi_exception->if_t100_message~t100key-msgno.
        ELSEIF ls_lead_msg-id IS NOT INITIAL AND ls_lead_msg-number IS NOT INITIAL.
          lx_busi_exception->if_t100_message~t100key-msgid = ls_lead_msg-id.
          lx_busi_exception->if_t100_message~t100key-msgno = ls_lead_msg-number.
        ENDIF.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_busi_exception
          iv_msg_id           = gc_msgid_mgw
          iv_msg_number       = gc_msgno_data_exchanged
          iv_agent            = gc_agent
          iv_msg_handle       = iv_msg_handle
          iv_log_to_error_log = iv_log_to_error_log
          iv_system_alias     = iv_system_alias
          iv_destination      = iv_destination
          iv_error_location   = iv_error_location
        ).

        RAISE EXCEPTION lx_busi_exception.

      WHEN /iwfnd/if_mgw_msg_container=>gcs_exception_category-tech.
        CREATE OBJECT lx_tech_exception
          EXPORTING
            remote_error_unlimited   = lv_error_message
            message_container        = lo_mgw_msg_container
            batch_caused_by_previous = iv_is_batch_caused_by_previous
            http_status_code         = is_msg_container_header-http_status_code
            sap_note_id              = is_msg_container_header-sap_note_id
            http_header_parameters   = it_http_header_parameters
            msg_code                 = is_msg_container_header-message_code.

        IF is_msg_container_header-exception_code CA lc_delimiter.
          SPLIT is_msg_container_header-exception_code AT lc_delimiter
            INTO lx_tech_exception->if_t100_message~t100key-msgid lx_tech_exception->if_t100_message~t100key-msgno.
        ELSEIF ls_lead_msg-id IS NOT INITIAL AND ls_lead_msg-number IS NOT INITIAL.
          lx_tech_exception->if_t100_message~t100key-msgid = ls_lead_msg-id.
          lx_tech_exception->if_t100_message~t100key-msgno = ls_lead_msg-number.
        ENDIF.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_msg_id           = gc_msgid_mgw
          iv_msg_number       = gc_msgno_data_exchanged
          iv_agent            = gc_agent
          iv_msg_handle       = iv_msg_handle
          iv_log_to_error_log = iv_log_to_error_log
          iv_system_alias     = iv_system_alias
          iv_destination      = iv_destination
          iv_error_location   = iv_error_location
        ).

        RAISE EXCEPTION lx_tech_exception.

      WHEN OTHERS." other exception type raised -> map to tech exception
        CREATE OBJECT lx_tech_exception
          EXPORTING
            remote_error_unlimited   = lv_error_message
            message_container        = lo_mgw_msg_container
            http_status_code         = is_msg_container_header-http_status_code
            sap_note_id              = is_msg_container_header-sap_note_id
            batch_caused_by_previous = iv_is_batch_caused_by_previous
            msg_code                 = is_msg_container_header-message_code.

        IF is_msg_container_header-exception_code CA lc_delimiter.
          SPLIT is_msg_container_header-exception_code AT lc_delimiter
            INTO lx_tech_exception->if_t100_message~t100key-msgid lx_tech_exception->if_t100_message~t100key-msgno.
        ELSEIF ls_lead_msg-id IS NOT INITIAL AND ls_lead_msg-number IS NOT INITIAL.
          lx_tech_exception->if_t100_message~t100key-msgid = ls_lead_msg-id.
          lx_tech_exception->if_t100_message~t100key-msgno = ls_lead_msg-number.
        ENDIF.

        lo_logger->log_step_completion_exception(
          io_exception        = lx_tech_exception
          iv_msg_id           = gc_msgid_mgw
          iv_msg_number       = gc_msgno_data_exchanged
          iv_agent            = gc_agent
          iv_msg_handle       = iv_msg_handle
          iv_log_to_error_log = iv_log_to_error_log
          iv_system_alias     = iv_system_alias
          iv_destination      = iv_destination
          iv_error_location   = iv_error_location
        ).

        RAISE EXCEPTION lx_tech_exception.

    ENDCASE.

  ENDMETHOD.


  METHOD raise_routing_exceptions.

    IF mx_med IS BOUND.
      RAISE EXCEPTION mx_med.
    ENDIF.

    IF mx_tech IS BOUND.
      RAISE EXCEPTION mx_tech.
    ENDIF.

  ENDMETHOD.


  METHOD resolve_navigation.

* This method checks if the navigation path table (part of IS_REQUEST_DETAILS)
* contains a navigation step that references to a model that is part of a
* another service than the service called. (It checks for an "External Link").
* If an external link exists the request information is modified. Instead of
* the "original" data provider the data provider for the external model is
* instantiated and for example the key fields are adapted so that the data
* provider of the external model does not have to deal with information from
* service that has included it

    DATA: lo_med_service TYPE REF TO /iwfnd/if_med_mdl_service_grp,
          lo_med_model   TYPE REF TO /iwfnd/if_med_mdl_object_class,
          lx_med         TYPE REF TO /iwfnd/cx_med_mdl_access.

    DATA: lv_service_id      TYPE /iwfnd/med_mdl_srg_identifier,
          ls_navigation_path TYPE /iwfnd/if_mgw_core_types=>nav_s.

    DATA: lo_trans_handler  TYPE REF TO /iwfnd/cl_transaction_handler,
          lo_badi           TYPE REF TO /iwfnd/bd_mgw_mdl_composition,
          lx_tech_exception TYPE REF TO /iwfnd/cx_mgw_tech_exception.


* setting the default values.
    ev_new_source_name = iv_source_name.
    ev_new_entity_set_name = iv_entity_set_name.
    es_new_request_details = is_request_details.

    IF is_request_details-navigation_path IS INITIAL OR is_request_details-target_entity IS INITIAL.
      RETURN.
    ENDIF.

* Get Service
    TRY.
        lo_trans_handler  = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
        lo_med_service    = lo_trans_handler->get_service_group_metadata( ).
        lv_service_id = lo_med_service->get_identifier( ).
        IF lo_med_service->has_cross_nav_models( ) EQ abap_false.
          RETURN.
        ENDIF.

        lo_med_model  = lo_med_service->get_meta_model_by_entity_name( is_request_details-source_entity ).

        IF lo_med_model->mv_model_identifier EQ iv_model_id.
          RETURN. "keep things unchanged
        ENDIF.

        lo_med_service->get_service_for_model(
          EXPORTING
            iv_model_id       = lo_med_model->mv_model_identifier
          IMPORTING
            ev_svc_identifier = lv_service_id
        ).
        IF lv_service_id EQ iv_service_id.
          RETURN. "keep things unchanged
        ENDIF.

        " Create across services not supported
        IF iv_is_for_create = abap_true AND is_request_details-navigation_path IS NOT INITIAL.
          READ TABLE is_request_details-navigation_path INTO ls_navigation_path INDEX 1.
          CREATE OBJECT lx_tech_exception
            EXPORTING
              textid              = /iwfnd/cx_mgw_tech_exception=>post_across_services_not_sup
              http_status_code    = /iwfnd/cx_mgw_tech_exception=>gc_status_not_implemented
              navigation_property = ls_navigation_path-nav_prop.
          RAISE EXCEPTION lx_tech_exception.
        ENDIF.

        GET BADI lo_badi
          FILTERS
            iv_context_service         = iv_service_id
            iv_target_entity_type_name = es_new_request_details-target_entity
            iv_target_service          = lv_service_id.

        ev_new_source_name = es_new_request_details-target_entity.
        es_new_request_details-source_entity = es_new_request_details-target_entity.
        es_new_request_details-entity = es_new_request_details-target_entity.
        ev_new_entity_set_name = es_new_request_details-target_entity_set.

        es_new_request_details-technical_request-source_entity_type =
          es_new_request_details-technical_request-target_entity_type.
        es_new_request_details-technical_request-source_entity_set =
          es_new_request_details-technical_request-target_entity_set.

        CALL BADI lo_badi->resolve_navigation
          EXPORTING
            iv_source_entity_type_name = iv_source_name
            iv_target_entity_type_name = es_new_request_details-target_entity
            iv_source_entity_set_name  = iv_entity_set_name
            iv_target_entity_set_name  = es_new_request_details-target_entity_set
            iv_is_for_entity           = iv_is_for_entity
          CHANGING
            ct_navigation_path         = es_new_request_details-navigation_path
            ct_key_tab                 = es_new_request_details-key_tab
            cv_key                     = es_new_request_details-key
            ct_select_options          = es_new_request_details-filter_select_options
            ct_tech_navigation_path    = es_new_request_details-technical_request-navigation_path
            ct_tech_key_tab            = es_new_request_details-technical_request-key_tab
            cv_tech_key                = es_new_request_details-technical_request-key
            ct_tech_select_options     = es_new_request_details-technical_request-filter_select_options
            cv_tech_filter_string      = es_new_request_details-technical_request-filter_string.

      CATCH /iwfnd/cx_med_mdl_access INTO lx_med.
        RAISE EXCEPTION TYPE /iwfnd/cx_mgw_tech_exception
          EXPORTING
            previous = lx_med.
    ENDTRY.

  ENDMETHOD.                    "RESOLVE_NAVIGATION


  METHOD serialize_request_details.

*---exception handling and logging
    DATA: lx_transformation_exc TYPE REF TO cx_transformation_error,
          lx_tech_exc           TYPE REF TO /iwfnd/cx_mgw_tech_exception,
          ls_request_context    TYPE /iwfnd/if_mgw_core_types=>request_s.


    TRY.

        ls_request_context                    = is_odata_req_details.
*-----workaround for function imports in order to be able to pass uri parameters besides the normal fi parameters. request
*-----parameter table is interpreted as fi parmaeters and would lead to incompatibilities in BEP < SP 04. Therefore keep info redundant
        ls_request_context-parameters         = it_parameter.
        ls_request_context-target_entity      = iv_target_entity_name.
        IF iv_target_entity_set IS NOT INITIAL.
          ls_request_context-target_entity_set = iv_target_entity_set.
        ENDIF.
        ls_request_context-context_params     = it_context.
        ls_request_context-service_doc_name   = iv_service_doc_name.
        ls_request_context-base_url           = iv_base_url.
        ls_request_context-version            = iv_version.
        ls_request_context-namespace          = iv_namespace.
        ls_request_context-http_method        = iv_http_method.
        ls_request_context-icf_root_node      = iv_icf_root_node.
        ls_request_context-select_params      = it_select_params.
        ls_request_context-cache_timestamp    = iv_cache_timestamp.
        IF iv_verbose_metadata IS SUPPLIED.
          ls_request_context-technical_request-verbose_metadata = iv_verbose_metadata.
        ENDIF.
        MOVE-CORRESPONDING is_system_alias_info TO ls_request_context-system_alias_info.

        " For ST & Service Composition in BEP
        ls_request_context-request_service_name = /iwfnd/cl_transaction_handler=>get_transaction_handler( )->get_service_name( ).

        IF is_odata_req_details IS SUPPLIED.
          "        ls_request_context-expand_clauses = is_odata_req_details-expand_clauses.
          "        ls_request_context-filter_select_options = is_odata_req_details-filter_select_options.
          "        ls_request_context-format = is_odata_req_details-format.
          "        ls_request_context-function = is_odata_req_details-function.
          "        ls_request_context-incoming_message = is_odata_req_details-incoming_message.
          "        ls_request_context-key = is_odata_req_details-key.
          "        ls_request_context-key_tab = is_odata_req_details-key_tab.
          "        ls_request_context-navigation_path = is_odata_req_details-navigation_path.
          "        ls_request_context-operation = is_odata_req_details-operation.
          "        ls_request_context-order = is_odata_req_details-order.
          "        ls_request_context-paging = is_odata_req_details-paging.
          "        ls_request_context-property_path = is_odata_req_details-property_path.
          ls_request_context-source_entity = is_odata_req_details-entity.
          "        ls_request_context-type = is_odata_req_details-type.
        ENDIF.

        " no suppress of "initial components" because of STRING<->INTEGER problem
        CALL TRANSFORMATION (gc_id_transformation)
           SOURCE     context            = ls_request_context
*         OPTIONS    initial_components = 'suppress'
           RESULT XML ev_serialized_data.

      CATCH cx_transformation_error INTO lx_transformation_exc.

        CREATE OBJECT lx_tech_exc
          EXPORTING
            textid         = /iwfnd/cx_mgw_tech_exception=>serialization_error
            transformation = gc_id_transformation
            previous       = lx_transformation_exc.

        RAISE EXCEPTION lx_tech_exc.
    ENDTRY.

  ENDMETHOD.


  METHOD set_sa_cache_active.

    mv_sa_cache_active = iv_sa_cache_active.

  ENDMETHOD.


  METHOD trigger_cache_cleanup.

    DATA: lt_model_ids     TYPE /iwfnd/t_med_srg_models,
          ls_model_id      TYPE /iwfnd/s_med_srg_model,
          lo_service_group TYPE REF TO /iwfnd/if_med_mdl_service_grp,
          lo_trans_handler TYPE REF TO /iwfnd/cl_transaction_handler,
          lt_models        TYPE /iwfnd/if_med_mdl_service_grp=>ty_med_mdl_meta_model_table,
          ls_model         TYPE /iwfnd/if_med_mdl_service_grp=>ty_med_mdl_meta_model.

    TRY.
        lo_trans_handler = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
        lo_service_group = lo_trans_handler->get_service_group_metadata( ).
        lo_service_group->get_meta_models(
            IMPORTING
              et_meta_models = lt_models
        ).
        LOOP AT lt_models INTO ls_model.
          ls_model_id-model_identifier = ls_model-model_identifier.
          INSERT ls_model_id INTO TABLE lt_model_ids.
        ENDLOOP.
      CATCH /iwfnd/cx_med_mdl_access.                   "#EC NO_HANDLER
* In this case just take the current model - see below
    ENDTRY.

    IF lt_model_ids IS INITIAL.
      IF iv_model_id IS INITIAL. EXIT. ENDIF.
      ls_model_id-model_identifier = iv_model_id.
      INSERT ls_model_id INTO TABLE lt_model_ids.
    ENDIF.

*-trigger cache refresh for the model
    CALL FUNCTION '/IWFND/FM_MED_IMPL_CLEAN_MODEL'
      EXPORTING
        it_model_ids = lt_model_ids.

  ENDMETHOD.


  METHOD trigger_request_cache_cleanup.

    DATA lo_trans_handler     TYPE REF TO /iwfnd/cl_transaction_handler.
    DATA lv_system_alias      TYPE /iwfnd/defi_system_alias.
    DATA lv_service_name      TYPE /iwfnd/med_mdl_service_grp_id.
    DATA lv_service_version   TYPE /iwfnd/med_mdl_version.
    DATA lv_service_namespace TYPE /iwfnd/med_mdl_namespace.

    lo_trans_handler = /iwfnd/cl_transaction_handler=>get_transaction_handler( ).
    lv_system_alias      = lo_trans_handler->get_system_alias( ).

    CASE iv_cleanup_level.
      WHEN gcs_req_cache_cleanup_levels-all.

        /iwfnd/cl_mgw_shm_facade=>clear_request_cache( iv_system_alias = lv_system_alias ).

      WHEN gcs_req_cache_cleanup_levels-service.

        lv_service_name      = lo_trans_handler->get_service_name( ).
        lv_service_version   = lo_trans_handler->get_service_version( ).
        lv_service_namespace = lo_trans_handler->get_service_namespace( ).

        /iwfnd/cl_mgw_shm_facade=>clear_request_cache_for_srv(
          EXPORTING
            iv_system_alias      = lv_system_alias
            iv_service_name      = lv_service_name
            iv_service_version   = lv_service_version
            iv_service_namespace = lv_service_namespace ).

      WHEN OTHERS.
        ASSERT 1 EQ 2.
    ENDCASE.

  ENDMETHOD.


  METHOD update_system_alias_info.

    IF is_system_alias-system_alias IS NOT INITIAL AND is_backend_version IS NOT INITIAL.
      /iwfnd/cl_system_alias_dba=>cond_update_backend_info(
        EXPORTING
          iv_system_alias    = is_system_alias-system_alias
          iv_gwbep_version   = is_system_alias-gwbep_version
          is_backend_version = is_backend_version
      ).
    ENDIF.

  ENDMETHOD.
ENDCLASS.