class CF_RECA_MESSAGE_LIST definition
  public
  inheriting from CF_RECA_OBJECT
  final
  create private .

public section.
  type-pools ABAP .

  class-methods ADD_REQUIRED_MESSAGE
    importing
      value(IO_MSGLIST) type ref to IF_RECA_MESSAGE_LIST optional
      value(ID_TABNAME) type TABNAME
      value(ID_FIELDNAME) type FIELDNAME
      value(ID_INDEX) type NUMERIC optional
      value(ID_INTRENO) type RECAINTRENO optional
      value(ID_CONTEXT) type ANY optional
    returning
      value(RS_SYMSG) type RECASYMSG .
  class-methods CREATE
    importing
      value(ID_OBJECT) type BALOBJ_D default 'RECA'
      value(ID_SUBOBJECT) type BALSUBOBJ default 'MISC'
      value(ID_EXTNUMBER) type BALNREXT optional
      value(ID_DELDATE) type RECADATEFROM default RECA0_DATE-MIN
      value(IF_DELNOTBEFORE) type RECABOOL default ABAP_FALSE
    returning
      value(RO_INSTANCE) type ref to IF_RECA_MESSAGE_LIST .
  class-methods CREATE_BY_REFERENCE
    importing
      value(IO_MSGLIST) type ref to IF_RECA_MESSAGE_LIST optional
    returning
      value(RO_INSTANCE) type ref to IF_RECA_MESSAGE_LIST .
  class-methods FIND
    importing
      value(ID_OBJECT) type BALOBJ_D
      value(ID_SUBOBJECT) type BALSUBOBJ
      value(ID_EXTNUMBER) type BALNREXT
      value(IF_DELIVER_NEWEST) type RECABOOL default ABAP_FALSE
    returning
      value(RO_INSTANCE) type ref to IF_RECA_MESSAGE_LIST
    exceptions
      ERROR .
  class-methods FIND_BY_HANDLE
    importing
      value(ID_HANDLE) type BALLOGHNDL
    returning
      value(RO_INSTANCE) type ref to IF_RECA_MESSAGE_LIST
    exceptions
      ERROR .
  class-methods FIND_LAST_STORED_LOG
    importing
      value(ID_OBJECT) type BALOBJ_D
      value(ID_SUBOBJECT) type BALSUBOBJ
    returning
      value(RO_INSTANCE) type ref to IF_RECA_MESSAGE_LIST
    exceptions
      ERROR .
  class-methods REORG_MESSAGE_NUMBER
    importing
      !IO_MSGLIST type ref to IF_RECA_MESSAGE_LIST
      !IF_CONSIDER_CUSTOMIZING type RECABOOL default ABAP_TRUE
    exceptions
      ERROR .
protected section.
*"* protected components of class CF_RECA_MESSAGE_LIST
*"* do not include other source files here!!!
private section.
*"* private components of class CF_RECA_MESSAGE_LIST
*"* do not include other source files here!!!
ENDCLASS.



CLASS CF_RECA_MESSAGE_LIST IMPLEMENTATION.


METHOD add_required_message .

  DATA:
    ld_scrtext_l TYPE scrtext_l,
    ld_fieldtext TYPE as4text.

* PRECONDITION
* (io_msglist is not obligatory!)

* BODY
* get label
  CALL METHOD cl_reca_ddic_dtel=>get_text_by_fieldname
    EXPORTING
      id_tabname    = id_tabname
      id_fieldname  = id_fieldname
    IMPORTING
       ed_fieldtext = ld_fieldtext
       ed_scrtext_l = ld_scrtext_l
     EXCEPTIONS
       not_found    = 1
       OTHERS       = 2.
  IF sy-subrc <> 0.
    CLEAR ld_fieldtext.
    CONCATENATE id_tabname '-' id_fieldname
                INTO ld_scrtext_l.
  ENDIF.

* set message
  IF 1 = 2. MESSAGE e006(recabc) WITH '' ''. ENDIF.
  rs_symsg-msgty = 'E'.
  rs_symsg-msgid = 'RECABC'.
  rs_symsg-msgno = '006'.
  rs_symsg-msgv1 = ld_scrtext_l.
  rs_symsg-msgv2 = ld_fieldtext.

* add message
  IF io_msglist IS BOUND.
    CALL METHOD io_msglist->add
      EXPORTING
        id_msgty     = rs_symsg-msgty
        id_msgid     = rs_symsg-msgid
        id_msgno     = rs_symsg-msgno
        id_msgv1     = rs_symsg-msgv1
        id_msgv2     = rs_symsg-msgv2
        id_tabname   = id_tabname
        id_fieldname = id_fieldname
        id_index     = id_index
        id_intreno   = id_intreno
        id_context   = id_context.
  ENDIF.

ENDMETHOD.


METHOD create .

* BODY
* create instance
  CALL METHOD create_by_intfname
    EXPORTING
      id_intfname = 'IF_RECA_MESSAGE_LIST'
*     id_subtype  =
    IMPORTING
      eo_instance = ro_instance.

* initialize instance
  CALL METHOD ro_instance->init
    EXPORTING
      id_object       = id_object
      id_subobject    = id_subobject
      id_extnumber    = id_extnumber
      id_deldate      = id_deldate
      if_delnotbefore = if_delnotbefore
      id_activity     = '01'
    EXCEPTIONS
      OTHERS          = 0.

ENDMETHOD.


METHOD create_by_reference .

* BODY
  ro_instance = create( ).

  IF io_msglist IS BOUND.
    ro_instance->add_from_instance( io_msglist = io_msglist ).
  ENDIF.

ENDMETHOD.


METHOD find .

* BODY
* create instance
  CALL METHOD create_by_intfname
    EXPORTING
      id_intfname = 'IF_RECA_MESSAGE_LIST'
*     id_subtype  =
    IMPORTING
      eo_instance = ro_instance.

* initialize instance
  CALL METHOD ro_instance->init
    EXPORTING
      id_object        = id_object
      id_subobject     = id_subobject
      id_extnumber     = id_extnumber
      if_deliver_newest = if_deliver_newest
      id_activity       = '02'
    EXCEPTIONS
      error            = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
    FREE ro_instance.
    mac_symsg_raise error.
  ENDIF.

ENDMETHOD.


METHOD find_by_handle .

* BODY
* create instance
  CALL METHOD create_by_intfname
    EXPORTING
      id_intfname = 'IF_RECA_MESSAGE_LIST'
*     id_subtype  =
    IMPORTING
      eo_instance = ro_instance.

* initialize instance
  CALL METHOD ro_instance->init_by_handle
    EXPORTING
      id_handle   = id_handle
    EXCEPTIONS
      error       = 1
      OTHERS      = 2.
  IF sy-subrc <> 0.
    CLEAR ro_instance.
    mac_symsg_raise error.
  ENDIF.

ENDMETHOD.


METHOD find_last_stored_log .

  DATA:
    lt_log_header     TYPE balhdr_t,        "type sorted table:
                                            "no explicit SORT BY allowed
    lt_log_header_std TYPE TABLE OF balhdr, "SORT BY allowed
    ls_log_header     TYPE balhdr,
    ls_log_filter     TYPE bal_s_lfil,
    ld_log_count      TYPE i.

* BODY
* get all log header of current user
  CALL FUNCTION 'BAL_FILTER_CREATE'
    EXPORTING
      i_object       = id_object
      i_subobject    = id_subobject
      i_aluser       = sy-uname
    IMPORTING
      e_s_log_filter = ls_log_filter.

  CALL FUNCTION 'BAL_DB_SEARCH'
    EXPORTING
      i_s_log_filter     = ls_log_filter
    IMPORTING
      e_t_log_header     = lt_log_header
    EXCEPTIONS
      log_not_found      = 1
      no_filter_criteria = 2
      OTHERS             = 3.
  IF sy-subrc <> 0.
    mac_symsg_raise error.
  ENDIF.

  IF lt_log_header IS INITIAL.
    MESSAGE e097(recabc) RAISING error.
  ENDIF.

* get newest (last) log
* (copy is necessary for explicit sort by date)
  lt_log_header_std[] = lt_log_header[].
  SORT lt_log_header_std BY aldate altime.
  ld_log_count = lines( lt_log_header_std ).
  READ TABLE lt_log_header_std INDEX ld_log_count INTO ls_log_header.

* load log
  CALL METHOD cf_reca_message_list=>find
    EXPORTING
      id_object    = ls_log_header-object
      id_subobject = ls_log_header-subobject
      id_extnumber = ls_log_header-extnumber
      if_deliver_newest = abap_true
    RECEIVING
      ro_instance  = ro_instance
    EXCEPTIONS
      error        = 1
      OTHERS       = 2.
  IF sy-subrc <> 0.
    mac_symsg_raise error.
  ENDIF.

ENDMETHOD.


METHOD reorg_message_number.

  DATA: ld_handle TYPE balloghndl,
        ls_msg_x  TYPE recamsg_x,
        ls_msg  TYPE recamsg,
        lt_msg_x  TYPE re_t_msg_x.

  CALL METHOD io_msglist->get_list_x
    IMPORTING
      et_list_x = lt_msg_x.

  CALL METHOD io_msglist->get_handle
    RECEIVING
      rd_handle = ld_handle.

  CALL FUNCTION 'BAL_LOG_MSG_DELETE_ALL'
    EXPORTING
      i_log_handle  = ld_handle
    EXCEPTIONS
      log_not_found = 1
      OTHERS        = 2.
  IF sy-subrc <> 0.
    mac_symsg_raise error.
  ENDIF.

  LOOP AT lt_msg_x INTO ls_msg_x.
    MOVE-CORRESPONDING ls_msg_x TO ls_msg.
    IF NOT ls_msg-msgno IS INITIAL
      AND if_consider_customizing = abap_true.
      CALL METHOD cl_reca_message_services=>read_customized_message
        EXPORTING
          id_msgid         = ls_msg-msgid
          id_msgno         = ls_msg-msgno
          id_msgty_default = ls_msg-msgty
*         io_busobj        = mo_parent
        IMPORTING
          ed_msgty         = ls_msg-msgty.
      IF ls_msg-msgty <> '-'.
        CALL METHOD io_msglist->add
          EXPORTING
            is_message = ls_msg.
      ENDIF.
    ELSE.
      CALL METHOD io_msglist->add
        EXPORTING
          is_message = ls_msg.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
ENDCLASS.