class CL_ABAP_BEHV definition
  public
  create protected .

public section.

  types T_CID type ABP_BEHV_CID .
  types T_FLAG type ABP_BEHV_FLAG .
  types T_PID type ABP_BEHV_PID .

  constants FLAG_NULL type ABP_BEHV_FLAG value '00' ##NO_TEXT.
  constants FLAG_CHANGED type ABP_BEHV_FLAG value '01' ##NO_TEXT.
  constants FLAG_ERROR type ABP_BEHV_FLAG value '80' ##NO_TEXT.

  CONSTANTS:
    "! Names of technical fields in derived structure types
    BEGIN OF co_techfield_name,
      control    TYPE fieldname VALUE '%CONTROL',
      cid        TYPE fieldname VALUE '%CID',
      cid_ref    TYPE fieldname VALUE '%CID_REF',
      pre        TYPE fieldname VALUE '%PRE',  " 778
      pid        TYPE fieldname VALUE '%PID',
      tmp        TYPE fieldname VALUE '%TMP',
      pky        TYPE fieldname VALUE '%PKY',
      tky        TYPE fieldname VALUE '%TKY',
      key        TYPE fieldname VALUE '%KEY',
      data       TYPE fieldname VALUE '%DATA',
      param      TYPE fieldname VALUE '%PARAM',
      target     TYPE fieldname VALUE '%TARGET',
      fail       TYPE fieldname VALUE '%FAIL',
      msg        TYPE fieldname VALUE '%MSG',
      other      TYPE fieldname VALUE '%OTHER',
      foreign    TYPE fieldname VALUE '%FOREIGN',
      element    TYPE fieldname VALUE '%ELEMENT',
      field      TYPE fieldname VALUE '%FIELD',
      create     TYPE fieldname VALUE '%CREATE',
      update     TYPE fieldname VALUE '%UPDATE',
      delete     TYPE fieldname VALUE '%DELETE',
      assoc      TYPE fieldname VALUE '%ASSOC',
      action     TYPE fieldname VALUE '%ACTION',
      op         TYPE fieldname VALUE '%OP',
      perm       TYPE fieldname VALUE '%PERM',
      path       TYPE fieldname VALUE '%PATH',
      is_draft   TYPE fieldname VALUE '%IS_DRAFT',
      link_src   TYPE fieldname VALUE 'SOURCE',
      link_trg   TYPE fieldname VALUE 'TARGET',
      state_area TYPE fieldname VALUE '%STATE_AREA',
      msg_global TYPE fieldname VALUE '%GLOBAL',
      instances  TYPE fieldname VALUE 'INSTANCES',
      global     TYPE fieldname VALUE 'GLOBAL',
    END OF co_techfield_name .

  CONSTANTS:
    "! Names of secondary keys on derived table types
    BEGIN OF co_key_name,
     "! Key containing %IS_DRAFT [, %PID] and %KEY
      draft   TYPE seckeyname VALUE 'DRAFT',
     "! Key containing %CID[_REF] [, %PID] and %KEY
      cid     TYPE seckeyname VALUE 'CID',
     "! Key containing %PID and %KEY
      pid     TYPE seckeyname VALUE 'PID',
     "! Key containing %KEY / entity key components
      entity  TYPE seckeyname VALUE 'ENTITY',
    END OF co_key_name .
protected section.

  constants MS like IF_ABAP_BEHV_MESSAGE=>SEVERITY value IF_ABAP_BEHV_MESSAGE=>SEVERITY ##NO_TEXT.
  constants MC like IF_ABAP_BEHV=>CAUSE value IF_ABAP_BEHV=>CAUSE ##NO_TEXT.

  methods NEW_MESSAGE
    importing
      !ID type SYMSGID
      !NUMBER type SYMSGNO
      !SEVERITY type IF_ABAP_BEHV_MESSAGE=>T_SEVERITY
      !V1 type SIMPLE optional
      !V2 type SIMPLE optional
      !V3 type SIMPLE optional
      !V4 type SIMPLE optional
    returning
      value(OBJ) type ref to IF_ABAP_BEHV_MESSAGE .
  methods NEW_MESSAGE_WITH_TEXT
    importing
      !SEVERITY type IF_ABAP_BEHV_MESSAGE=>T_SEVERITY default IF_ABAP_BEHV_MESSAGE=>SEVERITY-ERROR
      !TEXT type CSEQUENCE optional
    returning
      value(OBJ) type ref to IF_ABAP_BEHV_MESSAGE .
ENDCLASS.



CLASS CL_ABAP_BEHV IMPLEMENTATION.


method new_message.

  obj = new lcl_abap_behv_msg(
    textid = value #(
               msgid = id
               msgno = number
               attr1 = cond #( when v1 is not initial then 'IF_T100_DYN_MSG~MSGV1' )
               attr2 = cond #( when v2 is not initial then 'IF_T100_DYN_MSG~MSGV2' )
               attr3 = cond #( when v3 is not initial then 'IF_T100_DYN_MSG~MSGV3' )
               attr4 = cond #( when v4 is not initial then 'IF_T100_DYN_MSG~MSGV4' )
    )
    msgty = switch #( severity
              when ms-ERROR       then 'E'
              when ms-WARNING     then 'W'
              when ms-INFORMATION then 'I'
              when ms-SUCCESS     then 'S' )
    msgv1 = |{ v1 }|
    msgv2 = |{ v2 }|
    msgv3 = |{ v3 }|
    msgv4 = |{ v4 }|
  ).

  obj->m_severity = severity.

endmethod.


method NEW_MESSAGE_WITH_TEXT.

  obj = new_message(
    id       = 'SABP_BEHV'
    number   = 100
    severity = severity
    v1       = text
  ).

endmethod.
ENDCLASS.