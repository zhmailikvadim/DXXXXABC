"! The class CL_ABAP_CONTAINER_UTILITIES was originally designed as helper class used for
"! the Unicode enabling of ABAP code. It provides two methods to copy data from structures
"! to character like container fields and vice versa. The methods uses an
"! "assign ...casting", so technically bytes are copied into a character field (and vice
"! versa) without knowledge of the real data types (data type hiding).<br>
"!
"! This works fine as long as data is copied/transferred within the same system without a
"! change of the endianess. Also the source(filled with method FILL_CONTAINER_C) and
"! target(read with method READ_CONTAINER_C) structures must have the same layout. That
"! is all components must have compatible data type at the same offests.<br>
"!
"! The class shouldn't be used anymore or only in very exceptional cases in which old code
"! has to be adapted and consumers of the class have knowledge on the content they send
"! and receive.<br>
"!
"! A suitable replacement for CL_ABAP_CONTAINER_UTILITIES might be the statements
"! "export/import 'objects' to data buffer 'buffer'" which are able to manage complex
"! data structures including internal tables.
class CL_ABAP_CONTAINER_UTILITIES definition
  public
  final
  create public .

public section.

    "! The method copies data of the structure im_value to the character like container field
    "! ex_container without knowledge of the real data types used in the structure. Data is
    "! truncated whenever the provided container is too short.
    "!
    "! @parameter im_value     | a flat structure
    "! @parameter ex_container | a character field of type c or a string field
  class-methods FILL_CONTAINER_C
    importing
      !IM_VALUE type ANY
    exporting
      !EX_CONTAINER type CSEQUENCE
    exceptions
      ILLEGAL_PARAMETER_TYPE .
    "! The method copies data of the container field im_container to the structure ex_value
    "! without knowledge of the real data types used in the structure.
    "!
    "! @parameter im_container | a character field of type c or a string field
    "! @parameter ex_value     | a flat structure
  class-methods READ_CONTAINER_C
    importing
      !IM_CONTAINER type CSEQUENCE
    exporting
      !EX_VALUE type ANY
    exceptions
      ILLEGAL_PARAMETER_TYPE .
  protected section.
*"* protected components of class CL_ABAP_CONTAINER_UTILITIES
*"* do not include other source files here!!!
  private section.
*"* private components of class CL_ABAP_CONTAINER_UTILITIES
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_ABAP_CONTAINER_UTILITIES IMPLEMENTATION.


  method fill_container_c .

    data: l_type_value     type c,
          l_type_container type c,
          l_len_value      type i,
          l_len_container  type i,
          l_ref            type ref to data.

    field-symbols: <xvalue>     type x,
                   <xcontainer> type x,
                   <ccontainer> type c.

    describe field im_value type l_type_value.
    case l_type_value.
      when 'u'.
        describe field ex_container type l_type_container.
        case l_type_container.
          when 'C'.
            assign im_value     to <xvalue>     casting.
            assign ex_container to <xcontainer> casting.
            <xcontainer> = <xvalue>.
          when 'g'.
            describe field im_value length l_len_value in byte mode.
            l_len_container =
              l_len_value div cl_abap_char_utilities=>charsize +
              sign( l_len_value mod cl_abap_char_utilities=>charsize ).
            create data l_ref type c length l_len_container.
            assign l_ref->* to <xcontainer> casting.
            assign im_value     to <xvalue>     casting.
            <xcontainer> = <xvalue>.
            assign l_ref->* to <ccontainer>.
            concatenate space space into ex_container separated by <ccontainer>.
          when others.
            message x002(sy).
        endcase.
      when 'h' or 'v' or 'r' or 'l'. " table, deep struc, object
        " referenc, data reference
        raise illegal_parameter_type.
      when others.   " single field
        ex_container = im_value.
    endcase.



  endmethod.                    "FILL_CONTAINER_C


  method read_container_c .


    data: l_type_value     type c,
          l_type_container type c,
          l_len_container  type i,
          l_ref            type ref to data.

    field-symbols: <xvalue>     type x,
                   <xcontainer> type x,
                   <ccontainer> type c.

    describe field ex_value type l_type_value.
    case l_type_value.
      when 'u'.
        describe field im_container type l_type_container.
        case l_type_container.
          when 'C'.
            assign ex_value     to <xvalue>     casting.
            assign im_container to <xcontainer> casting.
            <xvalue> = <xcontainer>.
          when 'g'.
            l_len_container = strlen( im_container ).
            create data l_ref type c length l_len_container.
            assign l_ref->* to <ccontainer>.
            <ccontainer> = im_container.
            assign <ccontainer> to <xcontainer> casting.
            assign ex_value     to <xvalue>     casting.
            <xvalue> = <xcontainer>.
          when others.
            message x002(sy).
        endcase.
      when 'h' or 'v' or 'r' or 'l'. " table, deep struc, object
        " referenc, data reference
        raise illegal_parameter_type.
      when others.   " single field
        ex_value = im_container.
    endcase.

  endmethod.
ENDCLASS.