class CL_ABAP_TSTMP definition
  public
  final
  create public .

public section.

  types:
    operation_mode type c length 1 .

  constants OP_MODE_NEXT type OPERATION_MODE value 'N' ##NO_TEXT.
  constants OP_MODE_BEFORE type OPERATION_MODE value 'B' ##NO_TEXT.
  constants OP_MODE_WALLCLOCK type OPERATION_MODE value 'W' ##NO_TEXT.
  constants UNIX_ZERO type TIMESTAMP value 19700101000000 ##NO_TEXT.

  class-methods MAKE_VALID_TIME
    importing
      value(DATE_IN) type D
      value(TIME_IN) type T
      !TIME_ZONE type TZNZONE
      !MODE type OPERATION_MODE default OP_MODE_WALLCLOCK
    exporting
      !DATE_VALID type D
      !TIME_VALID type T
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_TSTMP_INTERNAL_ERROR .
  class-methods CLASS_CONSTRUCTOR .
  class-methods ADD
    importing
      !TSTMP type P
      !SECS type NUMERIC
    returning
      value(R_TSTMP) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods ADD_TO_SHORT
    importing
      !TSTMP type P
      !SECS type NUMERIC
    returning
      value(R_TSTMP) type TZNTSTMPS
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SUBTRACT
    importing
      !TSTMP1 type P
      !TSTMP2 type P
    returning
      value(R_SECS) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SUBTRACTSECS
    importing
      !TSTMP type P
      !SECS type NUMERIC
    returning
      value(R_TSTMP) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SUBTRACTSECS_TO_SHORT
    importing
      !TSTMP type P
      !SECS type NUMERIC
    returning
      value(R_TSTMP) type TZNTSTMPS
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods COMPARE
    importing
      !TSTMP1 type P
      !TSTMP2 type P
    returning
      value(COMP) type I
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods TD_ADD
    importing
      !DATE type D
      !TIME type T
      !SECS type NUMERIC
    exporting
      !RES_DATE type D
      !RES_TIME type T
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods TD_SUBTRACT
    importing
      !DATE1 type D
      !TIME1 type T
      !DATE2 type D
      !TIME2 type T
    exporting
      !RES_SECS type NUMERIC
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods ISDOUBLEINTERVAL
    importing
      !DATE type D
      !TIME type T
    returning
      value(ISDOUBLEINTERVAL) type ABAP_BOOL
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods SYSTEMTSTMP_SYST2LOC
    importing
      !SYST_DATE type D
      !SYST_TIME type T
    exporting
      !LOC_DATE type D
      !LOC_TIME type T
      !LOC_DST type ABAP_BOOL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SYSTEMTSTMP_LOC2SYST
    importing
      !LOC_DATE type D
      !LOC_TIME type T
      !LOC_DST type ABAP_BOOL
    exporting
      !SYST_DATE type D
      !SYST_TIME type T
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SYSTEMTSTMP_UTC2SYST
    importing
      !UTC_TSTMP type TIMESTAMP
    exporting
      !SYST_DATE type D
      !SYST_TIME type T
    raising
      CX_PARAMETER_INVALID_RANGE .
  class-methods SYSTEMTSTMP_SYST2UTC
    importing
      !SYST_DATE type D
      !SYST_TIME type T
      !PENDANTIC_CHECK type ABAP_BOOL default ' '
    exporting
      !UTC_TSTMP type TIMESTAMP
    raising
      CX_PARAMETER_INVALID_RANGE .
  class-methods TD_NORMALIZE
    importing
      !DATE_IN type D
      !TIME_IN type T
    exporting
      !DATE_NORM type D
      !TIME_NORM type T
    raising
      CX_PARAMETER_INVALID_RANGE .
  class-methods NORMALIZE
    importing
      value(TSTMP_IN) type P
    returning
      value(TSTMP_OUT) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods MOVE
    importing
      !TSTMP_SRC type P
    exporting
      !TSTMP_TGT type P
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods MOVE_TO_SHORT
    importing
      !TSTMP_SRC type TZNTSTMPL
    returning
      value(TSTMP_OUT) type TZNTSTMPS
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods TSTMP2UTCLONG
    importing
      !TIMESTAMP type P
    returning
      value(UTCLONG) type UTCLONG
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_SY_CONVERSION_NO_DATE_TIME .
  class-methods UTCLONG2TSTMP
    importing
      !UTCLONG type UTCLONG
    returning
      value(TIMESTAMP) type TIMESTAMPL
    raising
      CX_SY_CONVERSION_NO_DATE_TIME .
  class-methods UTCLONG2TSTMP_SHORT
    importing
      !UTCLONG type UTCLONG
    returning
      value(TIMESTAMP) type TIMESTAMP
    raising
      CX_SY_CONVERSION_NO_DATE_TIME .
  class-methods ISDOUBLEINTERVAL_TZONE
    importing
      !DATE type D
      !TIME type T
      !TZONE type TZNZONE
    returning
      value(ISDOUBLEINTERVAL) type ABAP_BOOL
    raising
      CX_PARAMETER_INVALID_TYPE
      CX_PARAMETER_INVALID_RANGE .
  class-methods GET_SYSTEM_TIMEZONE
    returning
      value(SYSTEM_TIMEZONE) type TZNZONE .
  class-methods TIMET_TO_TSTMP
    importing
      value(TIME_T) type INT8
      !FLAG_LOCAL_APPSERVER type ABAP_BOOL default ABAP_TRUE
    returning
      value(R_TSTMP) type TZNTSTMPS
    raising
      CX_PARAMETER_INVALID_RANGE .
protected section.
*"* protected components of class CL_ABAP_TSTMP
*"* do not include other source files here!!!
private section.

*"* private components of class CL_ABAP_TSTMP
*"* do not include other source files here!!!
  constants MAXSECS type TZNTSTMPL value '315538070399.9999999' ##NO_TEXT.
  constants MINSECS type TZNTSTMPL value '-315538070399.9999999' ##NO_TEXT.
  constants SECSOFDAY type I value 86400 ##NO_TEXT.
  class-data M_SYSTEM_TZONE type TZNZONE .

  class-methods TSTMP2SECS
    importing
      !TSTMP type P
    returning
      value(SECS) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE
      CX_PARAMETER_INVALID_TYPE .
  class-methods SECS2TSTMP
    importing
      !SECS type NUMERIC
    returning
      value(TSTMP) type TZNTSTMPL
    raising
      CX_PARAMETER_INVALID_RANGE .
  class-methods GET_START_OF_DOUBLEDHOUR
    importing
      !DATE type D
      !TIME type T
    exporting
      !START_DATE type D
      !START_TIME type T .
ENDCLASS.



CLASS CL_ABAP_TSTMP IMPLEMENTATION.


  method UTCLONG2TSTMP_SHORT by kernel module abKm_UtclToTstampS fail.
  endmethod.


  method UTCLONG2TSTMP by kernel module abKm_UtclToTstampL fail.
  endmethod.


  method TSTMP2UTCLONG by kernel module abKm_TstampOldToNew fail.
  endmethod.


method TSTMP2SECS .

  data: date       type d,      " date part of incoming time stamp
        time       type t,      " time part of incoming time stamp
        nano_secs  type p
                   decimals 7,  " decimals fraction of Tstmp Secs
        p          type p.

  data: d_type  type string,
        d_len   type string,
        d_decs  type string,
        p_value type string.



*** input type check
  describe field tstmp
    type     d_type
    length   d_len in byte mode
    decimals d_decs.
  if NOT ( d_type = 'P' AND
           ( d_len = 8  AND d_decs = 0 ) OR
           ( d_len = 11 AND d_decs = 7 )
          ).
     concatenate d_type `(` d_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP'
         TYPE      = d_type.
  endif.


* consistency check for negative time stamps
  if tstmp < 0.
    p_value = tstmp.
    raise exception type cx_parameter_invalid_range
      exporting
        parameter = 'TSTMP'
        value     = p_value.
  endif.

* consistency check for valid time stamps
  convert time stamp tstmp time zone '      ' into date date time time.
  if sy-subrc <> 4.
    p_value = tstmp.
    raise exception type cx_parameter_invalid_range
      exporting
        parameter = 'TSTMP'
        value     = p_value.
  endif.

* get nano_secs
  p = trunc( tstmp ).
  nano_secs = tstmp - p.


* calculate returning diff
  Secs = nano_secs.
  Secs = Secs + time.
  Secs = Secs + date * 86400.

  return.



endmethod.


method TD_SUBTRACT .

  data l_tstmp1       type p.
  data l_tstmp2       type p.

  data l_Secs(11)    type p decimals 7.

  data ex_range type ref to cx_parameter_invalid_range.



* convert pair 1 to UTC tstmp1
  convert date date1 time time1
      into time stamp l_tstmp1 time zone '      '.
  if sy-subrc <> 4.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE1/TIME'.
    concatenate DATE1 '/' TIME1 into ex_range->value.
    raise exception ex_range.
  endif.

* convert pair 2 to UTC tstmp2
  convert date date2 time time2
      into time stamp l_tstmp2 time zone '      '.
  if sy-subrc <> 4.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE2/TIME2'.
    concatenate DATE2 '/' TIME2 into ex_range->value.
    raise exception ex_range.
  endif.

* subtract
  try.
    l_secs = subtract( tstmp1 = l_tstmp1 tstmp2 = l_tstmp2 ).
  catch cx_parameter_invalid.
*   assert, internal error
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE1/TIME1/DATE2/TIME2'.
    concatenate DATE1 '/' TIME1 '/'
                DATE2 '/' TIME2 into ex_range->value.
    raise exception ex_range.
  endtry.

* value check for out_secs
  try.
    res_secs = l_secs.
  catch cx_sy_conversion_error.
    create object ex_range.
    ex_range->parameter = 'RES_SECS'.
    ex_range->value      = l_secs.
    raise exception ex_range.
  endtry.

endmethod.


method TD_NORMALIZE .

  data ex_range type ref to cx_parameter_invalid_range.
  DATA: years type i,
        month type i,
        days  type i,
        hours type i,
        mins  type i,
        secs  type i.
  DATA: carry_over_days type i,
        carry_over      type i.


* pre check
  date_norm = date_in + 0.
  time_norm = time_in + 0.
  if date_norm = date_in AND time_norm = time_in.
    return.
  endif.



  try.
   years = date_in(4).
   month = date_in+4(2).
   days  = date_in+6(2).
   hours = time_in(2).
   mins  = time_in+2(2).
   secs  = time_in+4(2).
  catch cx_sy_conversion_error.
      create object ex_range.
      ex_range->parameter = 'DATE_IN/TIME_IN'.
      concatenate DATE_IN '/' TIME_IN into ex_range->value.
      raise exception ex_range.
  endtry.

* correct time
  carry_over = secs div 60. secs = secs mod 60.
  add carry_over to mins.
  carry_over = mins div 60. mins = mins mod 60.
  add carry_over to hours.
  carry_over_days = hours div 24. hours = hours mod 24.

  time_norm = secs + mins * 60 + hours * 3600.

* correct date
  carry_over = month div 13. month = month mod 13 + carry_over.
  add carry_over to years.

  clear date_norm.
  date_norm(4)   = years.
  date_norm+4(2) = month.
  date_norm+6(2) = '01'.
  date_norm = date_norm + days - 1 + carry_over_days.
  if date_norm = '00000000'.
      create object ex_range.
      ex_range->parameter = 'DATE_IN/TIME_IN'.
      concatenate DATE_IN '/' TIME_IN into ex_range->value.
      raise exception ex_range.
  endif.

endmethod.


method TD_ADD .

  data l_tstmp       type p.
  data l_Secs(11)    type p decimals 7.

  data ex_range type ref to cx_parameter_invalid_range.
  data ex       type ref to cx_parameter_invalid.

* input check in_secs
  try.
    l_Secs = secs.
  catch cx_sy_conversion_error.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = secs.
    raise exception ex_range.
  endtry.
  if l_Secs > maxsecs OR
     l_Secs < minsecs    .
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = secs.
    raise exception ex_range.
  endif.


* convert to UTC tstmp
  convert date date time time
      into time stamp l_tstmp time zone '      '.
  if sy-subrc <> 4.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE/TIME'.
    concatenate DATE '/' TIME into ex_range->value.
    raise exception ex_range.
  endif.

* add
  try.
    l_tstmp = add( tstmp = l_tstmp secs = secs ).
  catch cx_parameter_invalid into ex.
*   assert, internal error
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE/TIME'.
    concatenate DATE '/' TIME into ex_range->value.
    raise exception ex_range.
  endtry.

* re-convert to date / time pair
  convert time stamp l_tstmp time zone '      '
      into date res_date time res_time.

endmethod.


method SYSTEMTSTMP_UTC2SYST .

  data ex_range type ref to cx_parameter_invalid_range.
  data ex       type ref to cx_parameter_invalid.

  data d type d.
  data t type t.
  data dst.

  convert time stamp UTC_TSTMP time zone m_system_tzone
     into date d time t daylight saving time dst.
  if sy-subrc <> 0.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'UTC_TSTMP'.
    ex_range->value      = utc_tstmp.
    raise exception ex_range.
  endif.

  try.
    call method SYSTEMTSTMP_LOC2SYST
       exporting LOC_DATE = d
                 LOC_TIME = t
                 LOC_DST  = dst
       importing SYST_DATE = SYST_DATE
                 SYST_TIME = SYST_TIME.
  catch cx_parameter_invalid into ex.
*   assert: should never happen, internal error
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'UTC_TSTMP'.
    ex_range->value      = utc_tstmp.
    raise exception ex_range.
  endtry.


endmethod.


method SYSTEMTSTMP_SYST2UTC .

  data ex_range type ref to cx_parameter_invalid_range.
  data ex       type ref to cx_parameter_invalid.

  data d type d.
  data t type t.
  data dst.


  try.
    call method SYSTEMTSTMP_SYST2LOC
       exporting SYST_DATE = SYST_DATE
                 SYST_TIME = SYST_TIME
       importing LOC_DATE  = d
                 LOC_TIME  = t
                 LOC_DST  = dst.

  catch cx_parameter_invalid into ex.
    create object ex_range.
    ex_range->parameter = 'SYST_DATE/SYST_TIME'.
    concatenate SYST_DATE '/' SYST_TIME into ex_range->value.
    raise exception ex_range.
  endtry.

  convert date d time t daylight saving time dst
    into time stamp UTC_TSTMP time zone m_system_tzone.
  if sy-subrc <> 0 and pendantic_check = 'X'.
    create object ex_range.
    ex_range->parameter = 'SYST_DATE/SYST_TIME'.
    concatenate SYST_DATE '/' SYST_TIME into ex_range->value.
    raise exception ex_range.
  endif.

endmethod.


method SYSTEMTSTMP_SYST2LOC .

  data ex_range type ref to cx_parameter_invalid_range.

  data tstmp type p."#EC NEEDED

  data l_dst type i.
  data l_date type d.
  data l_time type t.

* input check
  convert date syst_date time syst_time
    into time stamp tstmp time zone '      '.
  if sy-subrc <> 4.
  create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SYST_DATE/SYST_TIME'.
    concatenate SYST_DATE '/' SYST_TIME into ex_range->value.
    raise exception ex_range.
  endif.

* normal output, outside doubled hour
  if 'X' <> isdoubleinterval( date = syst_date time = syst_time ).

    convert date syst_date time syst_time daylight saving time 'X' into
            time stamp tstmp time zone m_system_tzone.
    if sy-subrc = 0.
      loc_dst = 'X'.
    else.
      loc_dst = ' '.
    endif.
    loc_date = syst_date.
    loc_time = syst_time.
    return.
  endif.

* inside doubled hour
  data start_date  type d.
  data start_time  type t.
  data start_tstmp type p.
  data syst_tstmp  type p.
  data diff        type p.

* compute diff, the difference in seconds of SYST_DAT/SYST_TIME to start of dst
  call method get_start_of_doubledhour
                 exporting date = syst_date
                           time = syst_time
                 importing start_date = start_date
                           start_time = start_time.
  convert date start_date time start_time into
          time stamp start_tstmp time zone '      '.
  convert date syst_date  time syst_time  into
          time stamp syst_tstmp  time zone '      '.
  start_tstmp = tstmp2secs( start_tstmp ).
  syst_tstmp  = tstmp2secs( syst_tstmp  ).

  diff = ( syst_tstmp - start_tstmp ) * 2 .

* add the difference
  convert date start_date time start_time into
          time stamp syst_tstmp time zone m_system_tzone.
  syst_tstmp = add( tstmp = syst_tstmp secs = diff ).

* compute result
  convert time stamp syst_tstmp time zone m_system_tzone into
          date loc_date time loc_time daylight saving time loc_dst.

endmethod.


method SYSTEMTSTMP_LOC2SYST .


  data ex_range type ref to cx_parameter_invalid_range.

  data tstmp type p."#EC NEEDED

  data l_dst type i.
  data l_date type d.
  data l_time type t.

* input check
  convert date loc_date time loc_time
    into time stamp tstmp time zone '      '.
  if sy-subrc <> 4.
  create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'LOC_DATE/LOC_TIME'.
    concatenate LOC_DATE '/' LOC_TIME into ex_range->value.
    raise exception ex_range.
  endif.

* normal output, outside doubled hour
  if 'X' <> isdoubleinterval( date = loc_date time = loc_time ).

    syst_date = loc_date.
    syst_time = loc_time.
    return.
  endif.

* inside doubled hour
  data start_date  type d.
  data start_time  type t.
  data start_tstmp type p.
  data start_secs  type p.
  data loc_tstmp   type p.
  data loc_secs    type p.
  data diff        type p.

* compute diff, the difference in seconds of SYST_DAT/SYST_TIME to start of dst
  call method get_start_of_doubledhour
                 exporting date = loc_date
                           time = loc_time
                 importing start_date = start_date
                           start_time = start_time.
  convert date start_date time start_time daylight saving time 'X' into
          time stamp start_tstmp time zone m_system_tzone.
  convert date loc_date   time  loc_time  daylight saving time loc_dst into
          time stamp loc_tstmp   time zone m_system_tzone.
  start_secs  = tstmp2secs( start_tstmp ).
  loc_secs    = tstmp2secs( loc_tstmp   ).

  diff = ( loc_secs - start_secs ) div 2 .

* add the difference
  convert time stamp start_tstmp time zone m_system_tzone into
          date syst_date time syst_time.
  call method td_add
                exporting date = syst_date
                          time = syst_time
                          secs = diff
                importing res_date = syst_date
                          res_time = syst_time.

endmethod.


  method SUBTRACTSECS_TO_SHORT.
    data l_tstmpl type tzntstmpl.
    l_tstmpl = subtractsecs( tstmp = tstmp
                             secs = secs    ).
    r_tstmp = move_to_short( l_tstmpl ).
  endmethod.


method SUBTRACTSECS .


Data l_Secs(11) type p decimals 7.

Data ex_range type ref to cx_parameter_invalid_range.
Data ex       type ref to cx_parameter_invalid_range.


* input check
  try.
    l_Secs = Secs * -1.
  catch cx_sy_conversion_error.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = Secs.
    raise exception ex_range.
  endtry.
  if Secs > maxsecs or
     Secs < minsecs    .
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = Secs.
    raise exception ex_range.
  endif.


* subtract
  try.
    R_Tstmp = add( Tstmp = Tstmp Secs = l_Secs ).
  catch cx_parameter_invalid_range into ex.
    ex_range = new #( parameter = ex->parameter
                      value     = ex->value
                      previous  = ex           ).
    raise exception ex_range.
  endtry.


endmethod.


method SUBTRACT .

  Data: ex type ref to CX_PARAMETER_INVALID.

  Data: Secs1 type TZNTSTMPL,
        Secs2 type TZNTSTMPL.

*input check
  try.
    Secs1 = Tstmp2Secs( Tstmp1 ).
  catch cx_parameter_invalid into ex.
    ex->parameter = 'TSTMP1'.
    raise exception ex.
  endtry.

  try.
    Secs2 = Tstmp2Secs( Tstmp2 ).
  catch cx_parameter_invalid into ex.
    ex->parameter = 'TSTMP2'.
    raise exception ex.
  endtry.

  R_Secs = Secs1 - Secs2.

endmethod.


method SECS2TSTMP .

  data: date            type d,      " date part of incoming time stamp
        time            type t,      " time part of incoming time stamp
        nano_secs       type p
                        decimals 7,  " decimals fraction of Tstmp Secs
        l_TstmpDiff(11) type p        "#EC NEEDED
                        decimals 7,  " type correct TstmpDiff
        p               type p.

  data ex type ref to cx_parameter_invalid_range.


* input check
  try.
    l_TstmpDiff = Secs.
  catch cx_sy_conversion_error.
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'SECS'.
    ex->value      = Secs.
    raise exception ex.
  endtry.
  if Secs > MaxSecs.
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'SECS'.
    ex->value      = Secs.
    raise exception ex.
  endif.
  if Secs < 0.
* underflow,
* Special semantic here. It makes no sense to have
* negative time stamps in this conversion routine.
* At other places it in fact makes sense, for example
* for the result of a time stamp difference.
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'SECS'.
    ex->value      = Secs.
    raise exception ex.
  endif.

* consistency check
  date = trunc( Secs ) div SecsOfDay.
  if date = '00000000'.
    date = '00010101'.
  endif.
  time = trunc( Secs ) mod SecsOfDay.

* get nano_secs
  p = trunc( Secs ).
  nano_secs = Secs - p.


* calculate returning Tstmp
  convert date date time time into time stamp Tstmp time zone '      '.
  Tstmp = Tstmp + nano_secs.

  return.

endmethod.


method NORMALIZE.

  DATA ex_range type ref to cx_parameter_invalid_range.
  DATA: years type i,
        month type i,
        days  type i,
        hours type i,
        mins  type i,
        secs  type i.
  DATA: carry_over_days type i,
        carry_over      type i.
  data date_norm type d.
  DATA: l_tstmp type TZNTSTMPL.
  data: l_tstmp_in_old type TZNTSTMPL.
  DATA: fraction type TZNTSTMPL.


  data: d_type  type string,
        d_len   type string,
        d_decs  type string.

*** input type check
  describe field tstmp_in
    type     d_type
    length   d_len in byte mode
    decimals d_decs.
  if NOT ( d_type = 'P' AND
           ( d_len = 8  AND d_decs = 0 ) OR
           ( d_len = 11 AND d_decs = 7 )
          ).
     concatenate d_type `(` d_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP'
         TYPE      = d_type.
  endif.


  l_tstmp_in_old = tstmp_in.

  try.

* adjust l_tstmp according to needs of tstmp_out
    l_tstmp = trunc( tstmp_in ).
    fraction = tstmp_in - l_tstmp.

* correct date
    years = l_tstmp div 10000000000.
    l_tstmp = l_tstmp - ( years * 10000000000 ).
    month = ( l_tstmp div 100000000 ).
    l_tstmp = l_tstmp - ( month * 100000000 ).
    days = ( l_tstmp div 1000000 ).
    l_tstmp = l_tstmp - ( days * 1000000 ).
    hours = ( l_tstmp div 10000 ).
    l_tstmp = l_tstmp - ( hours * 10000 ).
    mins = ( l_tstmp div 100 ).
    l_tstmp = l_tstmp - ( mins * 100 ).
    secs = ( l_tstmp ).

* correct time
    carry_over = secs div 60. secs = secs mod 60.
    add carry_over to mins.
    carry_over = mins div 60. mins = mins mod 60.
    add carry_over to hours.
    carry_over_days = hours div 24. hours = hours mod 24.

* correct date from carry_over_days
    carry_over = month div 13. month = month mod 13 + carry_over.
    add carry_over to years.

* put date part to tstmp_out
    if years > 9999.
      create object ex_range.
      ex_range->parameter = 'TSTMP_IN'.
      ex_range->value = l_TSTmp_IN_old.
      raise exception ex_range.
    endif.
    date_norm(4)   = years.
    date_norm+4(2) = month.
    date_norm+6(2) = '01'.
    date_norm = date_norm + days - 1 + carry_over_days.
    if date_norm = '00000000'.
      create object ex_range.
      ex_range->parameter = 'TSTMP_IN'.
      ex_range->value = l_TSTmp_IN_old.
      raise exception ex_range.
    endif.
    tstmp_out = date_norm(4) * 10000000000.
    tstmp_out = tstmp_out + date_norm+4(2) * 100000000.
    tstmp_out = tstmp_out + date_norm+6(2) * 1000000.

* put time part to tstmp_out
    tstmp_out = tstmp_out + hours * 10000.
    tstmp_out = tstmp_out + mins  * 100.
    tstmp_out = tstmp_out + secs.

    tstmp_out = tstmp_out + fraction.

  catch cx_sy_conversion_error.
    create object ex_range.
    ex_range->parameter = 'TSTMP_IN'.
    ex_range->value = l_TSTmp_IN_old.
    raise exception ex_range.
  endtry.

endmethod.


method MOVE_TO_SHORT.
  move( exporting tstmp_src = tstmp_src
        importing tstmp_tgt = tstmp_out  ).
endmethod.


method move.

  data: d_type  type string,
        src_len type string,
        tgt_len type string,
        d_decs  type string.

*** input type check TSTMP_SRC
  describe field tstmp_src
    type     d_type
    length   src_len in byte mode
    decimals d_decs.
  if not ( d_type = 'P' and
           ( src_len = 8  and d_decs = 0 ) or
           ( src_len = 11 and d_decs = 7 )
          ).
     concatenate d_type `(` src_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP_SRC'
         type      = d_type.
  endif.

*** input type check TSTMP_TGT
  describe field tstmp_tgt
    type     d_type
    length   tgt_len in byte mode
    decimals d_decs.
  if not ( d_type = 'P' and
           ( tgt_len = 8  and d_decs = 0 ) or
           ( tgt_len = 11 and d_decs = 7 )
          ).
     concatenate d_type `(` tgt_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP_TGT'
         type      = d_type.
  endif.

  if tgt_len = 8 and src_len = 11.
    data secs_long(11) type p decimals 7.
    data secs_short type p.
    secs_long = tstmp2secs( tstmp_src ).
    secs_short = secs_long.
    secs_long = secs2tstmp( secs_short ).
    tstmp_tgt = secs_long.
  else.
    tstmp_tgt = tstmp_src.
  endif.

endmethod.


method make_valid_time.
  data timestamp type p.
  data is_valid type abap_bool.
  data param_string type string.

  lcl_time_helper=>make_timestamp(
    exporting
      date_in   = date_in
      time_in   = time_in
      time_zone = time_zone

    importing
      is_valid  = is_valid
      date_out  = date_valid
      time_out  = time_valid
      timestamp = timestamp
    exceptions invalid_input = 1
   ).
  if sy-subrc <> 0.
    concatenate date_in '/' time_in into param_string.
    raise exception type cx_parameter_invalid_range
      exporting
        parameter = param_string.
  endif.

  if is_valid = abap_true.
    return.
  endif.

  case mode.
    when op_mode_next.
      lcl_time_helper=>get_next_time(
        exporting  timestamp_in = timestamp
                   time_zone = time_zone
        importing  date_out  = date_valid
                   time_out  = time_valid
      ).

    when op_mode_before.
      lcl_time_helper=>get_time_b4(
        exporting  timestamp_in = timestamp
                   time_zone = time_zone
        importing  date_out  = date_valid
                   time_out  = time_valid
      ).

    when op_mode_wallclock.
      lcl_time_helper=>wallclock_time(
       exporting  timestamp_in = timestamp
                  time_zone = time_zone
       importing  date_out  = date_valid
                  time_out  = time_valid
      ).

    when others.
      move mode to param_string.
      raise exception type cx_parameter_invalid_range
        exporting
          parameter = param_string.
  endcase.

endmethod.


method isdoubleinterval_tzone.
  data ex_range type ref to cx_parameter_invalid_range.
  data tstmp type p. "#EC NEEDED

* input check
  convert date date time time into time stamp tstmp time zone '      '.
  if sy-subrc <> 4.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE/TIME'.
    concatenate date '/' time into ex_range->value.
    raise exception ex_range.
  endif.
  convert date date time time into time stamp tstmp time zone tzone.
  if sy-subrc = 8.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'TZONE'.
    ex_range->value = tzone.
    raise exception ex_range.
  endif.

  convert date date time time daylight saving time 'X'
          into
          time stamp tstmp
          time zone tzone.
  if sy-subrc <> 0.
    isdoubleinterval = ' '.
    return.
  endif.

  convert date date time time daylight saving time ' '
          into
          time stamp tstmp
          time zone tzone.
  if sy-subrc <> 0.
    isdoubleinterval = ' '.
    return.
  endif.

***
**
* For time zones with DST we know now, we are inside the double interval
* Not so for timezones without DST. Here the addition "DAYLIGHT SAVING TIME..." is ignored.
* Thus do a last check ...
  data ll_date type d.
  data ll_time type t.
  ll_date = date. ll_time = time.
* subtract one day
  try.
    call method cl_abap_tstmp=>td_add
                                  exporting date = ll_date
                                            time = ll_time
                                            secs = -86400
                                  importing res_date = ll_date
                                            res_time = ll_time.
  catch cx_parameter_invalid.
    isdoubleinterval = ' '.
    return.
  endtry.

* the last day MUST be inside DST (for timezones with DST)
  convert date ll_date time ll_time daylight saving time ' '
          into
          time stamp tstmp
          time zone tzone.
  if sy-subrc = 0.
*   NON-DST timezone
    isdoubleinterval = ' '.
    return.
  endif.

  isdoubleinterval = 'X'.
  return.

endmethod.


method ISDOUBLEINTERVAL.

data ex_range type ref to cx_parameter_invalid_range.

  data tstmp type p.

* input check
  convert date date time time into time stamp tstmp time zone '      '.
  if sy-subrc <> 4.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'DATE/TIME'.
    concatenate DATE '/' TIME into ex_range->value.
    raise exception ex_range.
  endif.



  convert date date time time daylight saving time 'X'
          into
          time stamp tstmp
          time zone m_system_tzone.
  if sy-subrc <> 0.
    isdoubleinterval = ' '.
    return.
  endif.

  convert date date time time daylight saving time ' '
          into
          time stamp tstmp
          time zone m_system_tzone.
  if sy-subrc <> 0.
    isdoubleinterval = ' '.
    return.
  endif.


***
**
* For time zones with DST we know now, we are inside the double interval
* Not so for timezones without DST. Here the addition "DAYLIGHT SAVING TIME..." is ignored.
* Thus do a last check ...
  data ll_date type d.
  data ll_time type t.
  ll_date = date. ll_time = time.
* subtract one day
  try.
    call method cl_abap_tstmp=>td_add
                                  exporting date = ll_date
                                            time = ll_time
                                            secs = -86400
                                  importing res_date = ll_date
                                            res_time = ll_time.
   catch cx_parameter_invalid.
    isdoubleinterval = ' '.
    return.
  endtry.
* the last day MUST be inside DST
  convert date ll_date time ll_time daylight saving time ' '
          into
          time stamp tstmp
          time zone m_system_tzone.
  if sy-subrc = 0.
*   NON-DST timezone
    isdoubleinterval = ' '.
    return.
  endif.



  isdoubleinterval = 'X'.


endmethod.


method get_system_timezone.
  system_timezone = m_system_tzone.
endmethod.


method GET_START_OF_DOUBLEDHOUR .

  data l_date type d.
  data l_time type t.

  l_date = date.
  l_time = time.


*** set start_date, start_time
*   most likely, it is the beginning of the current hour
  data ll_time type t.
  ll_time = l_time.
  ll_time+2 = '0000'.
  if 'X' = isdoubleinterval( date = l_date time = ll_time ).
    l_time = ll_time.
  endif.

  while 'X' = isdoubleinterval( date = l_date time = l_time ).
    call method cl_abap_tstmp=>td_add
                                  exporting date = l_date
                                            time = l_time
                                            secs = -1
                                  importing res_date = l_date
                                            res_time = l_time.
  endwhile.
  call method cl_abap_tstmp=>td_add
                                exporting date = l_date
                                          time = l_time
                                          secs = 1
                                importing res_date = l_date
                                          res_time = l_time.
  start_date = l_date.
  start_time = l_time.

* set end_date, end_time
*  l_date = date.
*  l_time = time.
*  while 'X' = isdoubleinterval( date = l_date time = l_time ).
*    call method cl_abap_tstmp=>td_add
*                                  exporting date = l_date
*                                            time = l_time
*                                            secs = 1
*                                  importing res_date = l_date
*                                            res_time = l_time.
*  endwhile.
*  end_date = l_date.
*  end_time = l_time.

endmethod.


method COMPARE .

*** This method owns the program attribut "fixpoint arithmetic"
*** If an program has not "fixpoint arithmetic" switched on, then
*** a direct comparism between a short and a long time stamp
*** ( TZNTSTMPL vs. TZNTSTMP ) will have nonsense result, since
*** a TZNTSTMPL value of let say '20011131123000,0000000' will be
*** treated as '200111311230000000000'.
*** passing the time stamps to a program with fixpoint arithmetic
*** on and doing the comparism there, will do the job.

data: d_type  type string,
        d_len   type string,
        d_decs  type string.
data date type d. "#EC NEEDED
data time type t. "#EC NEEDED
data ex type ref to cx_parameter_invalid_range.

*** input type check
  describe field tstmp1
    type     d_type
    length   d_len in byte mode
    decimals d_decs.
  if NOT ( d_type = 'P' AND
           ( d_len = 8  AND d_decs = 0 ) OR
           ( d_len = 11 AND d_decs = 7 )
          ).
     concatenate d_type `(` d_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP1'
         TYPE      = d_type.
  endif.
  if tstmp1 < 0 .
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'TSTMP1'.
    ex->value      = tstmp1.
    raise exception ex.
  endif.
  convert time stamp tstmp1 time zone '      ' into date date time time.
  if sy-subrc = 12.
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'TSTMP1'.
    ex->value      = tstmp1.
    raise exception ex.
  endif.

  describe field tstmp2
    type     d_type
    length   d_len in byte mode
    decimals d_decs.
  if NOT ( d_type = 'P' AND
           ( d_len = 8  AND d_decs = 0 ) OR
           ( d_len = 11 AND d_decs = 7 )
          ).
     concatenate d_type `(` d_len `) DECIMALS ` d_decs into d_type.
     raise exception type cx_parameter_invalid_type
       exporting
         parameter = 'TSTMP2'
         TYPE      = d_type.
  endif.
  if tstmp2 < 0 .
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'TSTMP1'.
    ex->value      = tstmp1.
    raise exception ex.
  endif.
  convert time stamp tstmp2 time zone '      ' into date date time time.
  if sy-subrc = 12.
    create object ex type cx_parameter_invalid_range.
    ex->parameter = 'TSTMP2'.
    ex->value      = tstmp2.
    raise exception ex.
  endif.


*** comparism
  if tstmp1 < tstmp2.
    comp = -1.
  elseif tstmp1 > tstmp2.
    comp = 1.
  else.
    comp = 0.
  endif.


endmethod.


method CLASS_CONSTRUCTOR.

  data l_tzonesys type ttzcu-tzonesys.

  select single tzonesys from ttzcu into l_tzonesys.
  if sy-subrc <> 0.
    " During client copy, ttzcu may be empty for current client. In principle this is a configuration issue.
    " But we can help here: As we must have the same value in all clients (for the time being),
    " we can spot for a value in cleint 000.
    select single tzonesys from ttzcu client specified into l_tzonesys where client = '000'.
    if sy-subrc <> 0.
      l_tzonesys = '??????'.
    endif.
  endif.

  m_system_tzone = l_tzonesys.

endmethod.


  method ADD_TO_SHORT.
    r_tstmp = move_to_short( add( tstmp = tstmp
                                  secs = secs    ) ).
  endmethod.


method ADD .

data:
  Tstmp_BaseSecs(11) type p decimals 7,  "base Secs return value
  l_Secs(11)         type p decimals 7.

data ex_range type ref to cx_parameter_invalid_range.
data ex_type  type ref to cx_parameter_invalid_type.

* input check Secs
  try.
    l_Secs = Secs.
  catch cx_sy_conversion_error.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = secs.
    raise exception ex_range.
  endtry.
  if l_Secs > maxsecs OR
     l_Secs < minsecs    .
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'SECS'.
    ex_range->value      = secs.
    raise exception ex_range.

  endif.

* input check Tstmp
  try.
    Tstmp_BaseSecs = Tstmp2Secs( Tstmp ).
  catch cx_parameter_invalid_range.
    create object ex_range.
    ex_range->parameter = 'TSTMP'.
    ex_range->value      = tstmp.
    raise exception ex_range.
  catch cx_parameter_invalid_type.
    create object ex_type.
    ex_type->parameter = 'TSTMP'.
    raise exception ex_type.
  endtry.

* add
  try.
    Tstmp_BaseSecs = Tstmp_BaseSecs + l_Secs.
  catch cx_sy_conversion_error.
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'TSTMP+SECS'.
    ex_range->value      = Tstmp_BaseSecs.
    raise exception ex_range.
  endtry.
  if Tstmp_BaseSecs > maxsecs OR
     Tstmp_BaseSecs < minsecs    .
    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'TSTMP+SECS'.
    ex_range->value      = Tstmp_BaseSecs.
    raise exception ex_range.
  endif.

  try.
    R_Tstmp = Secs2Tstmp( Tstmp_BaseSecs ).
  catch cx_parameter_invalid.
*   assert, internal error
    data c_tstmp(15).
    data c_secs(11).

    create object ex_range type cx_parameter_invalid_range.
    ex_range->parameter = 'TSTMP/SECS'.
    c_tstmp = tstmp. c_secs = secs.
    concatenate c_tstmp '/' c_secs into ex_range->value.
    raise exception ex_range.
  endtry.




endmethod.


  method TIMET_TO_TSTMP.

    if abap_true = flag_local_appserver.
      data bias type i.
      CALL 'ZDATE_SYSTEMINFO' id 'ZDATE_BIAS' field bias.
      time_t += bias.
    endif.

    try.
      r_tstmp = cl_abap_tstmp=>add_to_short( exporting tstmp   = cl_abap_tstmp=>unix_zero      " UTC Time Stamp
                                                       secs    = time_t                    ).  " Time Interval in Seconds
    catch cx_parameter_invalid_range into data(prev_exc).
      data(exc) = new CX_PARAMETER_INVALID_RANGE( parameter = 'TIME_T'
                                                  value     = conv #( time_t )
                                                  previous  = prev_exc          ).
      raise exception exc.
    endtry.

  endmethod.
ENDCLASS.