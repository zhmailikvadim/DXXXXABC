*"* local class implementation for public class
*"* CL_ABAP_TSTMP
*"* use this source file for the implementation part of
*"* local helper classes
class lcl_time_helper implementation.
    method get_next_time.

    data interval_length type i value 1800.
    data right_border type p.
    data valid_left type abap_bool value abap_false.
    data valid_right type abap_bool value abap_false.
    data last_length type i.
    data timestamp_start type p.
    data date_err type d.
    data time_err type t.

    timestamp_start = timestamp_in.
    do.
      right_border = cl_abap_tstmp=>add(
          tstmp   = timestamp_in
          secs    = interval_length    " Zeitspanne in Sekunden
      ).

      valid_right = is_valid_in_tz( timestamp = right_border tz = time_zone ).
      valid_left  = is_valid_in_tz( timestamp = timestamp_in tz = time_zone ).

* Exit condition : 1 div 2 = 1
      last_length = interval_length.
      divide interval_length by 2.
      if interval_length = last_length. exit. endif.

      if valid_left = abap_false and valid_right = abap_true.
        timestamp_in = cl_abap_tstmp=>add(
                         tstmp   = timestamp_in
                         secs    = interval_length    " Zeitspanne in Sekunden
                       ).
      endif.

      if valid_left = abap_true and valid_right = abap_true.
        timestamp_in = cl_abap_tstmp=>add(
                         tstmp   = timestamp_in
                         secs    = - interval_length    " Zeitspanne in Sekunden
                       ).
      endif.
      if valid_left = abap_false and valid_right = abap_false.
        timestamp_in = cl_abap_tstmp=>add(
                         tstmp   = timestamp_in
                         secs    = last_length   " Zeitspanne in Sekunden
                       ).
      endif.

      if valid_left = abap_true and valid_right = abap_false.
        convert time stamp timestamp_start time zone '      '
          into date date_err time time_err.
        raise exception type cx_tstmp_internal_error
          exporting  date       = date_err
                     time       = time_err
                     timezone   = time_zone
                     mode       = cl_abap_tstmp=>op_mode_next
                     border     = right_border
                     timestamp  = timestamp_in
                     returncode = 1.
      endif.
    enddo.

    if valid_left = abap_false and valid_right = abap_true.
      timestamp_in = right_border.
    endif.

    convert time stamp timestamp_in time zone '      ' into
      date date_out time time_out.

    convert date date_out time time_out into time stamp
      timestamp_in time zone time_zone.
    if sy-subrc <> 0.
      convert time stamp timestamp_start time zone '      '
          into date date_err time time_err.
      raise exception type cx_tstmp_internal_error
          exporting  date       = date_err
                     time       = time_err
                     timezone   = time_zone
                     mode       = cl_abap_tstmp=>op_mode_next
                     border     = right_border
                     timestamp  = timestamp_in
                     returncode = 2.
    endif.
  endmethod.                    "get_next_time

  method get_time_b4.

    data interval_length type i value 1800.
    data left_border type p.
    data valid_left type abap_bool value abap_false.
    data valid_right type abap_bool value abap_false.
    data last_length type i.
    data timestamp_start type p.
    data date_err type d.
    data time_err type t.

    timestamp_start = timestamp_in.
    do.
      left_border = cl_abap_tstmp=>add(
          tstmp   = timestamp_in
          secs    = - interval_length    " Zeitspanne in Sekunden
      ).

      valid_right = is_valid_in_tz( timestamp = timestamp_in tz = time_zone ).
      valid_left  = is_valid_in_tz( timestamp = left_border tz = time_zone ).

* Exit condition : 1 div 2 = 1
      last_length = interval_length.
      divide interval_length by 2.
      if interval_length = last_length. exit. endif.

      if valid_left = abap_false and valid_right = abap_true.
         convert time stamp timestamp_start time zone '      '
          into date date_err time time_err.
        raise exception type cx_tstmp_internal_error
          exporting  date         = date_err
                     time         = time_err
                     timezone     = time_zone
                     mode         = cl_abap_tstmp=>op_mode_before
                     border       = left_border
                     interval_len = interval_length
                     timestamp    = timestamp_in
                     returncode = 1.
      endif.

      if valid_left = abap_true and valid_right = abap_true.
        timestamp_in = cl_abap_tstmp=>add(
                         tstmp   = timestamp_in
                         secs    = interval_length    " Zeitspanne in Sekunden
                       ).
      endif.
      if valid_left = abap_false and valid_right = abap_false.
        timestamp_in = cl_abap_tstmp=>add(
                         tstmp   = timestamp_in
                         secs    = - last_length   " Zeitspanne in Sekunden
                       ).
      endif.

      if valid_left = abap_true and valid_right = abap_false.
        timestamp_in = cl_abap_tstmp=>add(
                        tstmp   = timestamp_in
                        secs    = - interval_length    " Zeitspanne in Sekunden
                      ).
      endif.
    enddo.

    if valid_left = abap_true and valid_right = abap_false.
      timestamp_in = left_border.
    endif.

    convert time stamp timestamp_in time zone '      ' into
      date date_out time time_out.

    convert date date_out time time_out into time stamp
      timestamp_in time zone time_zone.
    if sy-subrc <> 0.
      convert time stamp timestamp_start time zone '      '
          into date date_err time time_err.
      raise exception type cx_tstmp_internal_error
          exporting  date       = date_err
                     time       = time_err
                     timezone   = time_zone
                     mode       = cl_abap_tstmp=>op_mode_before
                     border     = left_border
                     timestamp  = timestamp_in
                     returncode = 2.
    endif.
  endmethod.                    "get_time_b4

  method wallclock_time.

    constants num_secs_in_hour type i value 3600.
    data tmpdate type d.
    data tmptime type t.
    data timestamp_start type p.
    data date_err type d.
    data time_err type t.

    timestamp_start = timestamp_in.

    timestamp_in =  cl_abap_tstmp=>add(
        tstmp   = timestamp_in    " UTC-Zeitstempel
        secs    =  - num_secs_in_hour   " Zeitspanne in Sekunden
     ).
    convert time stamp timestamp_in time zone '      ' into
      date tmpdate time tmptime.
    convert date tmpdate time tmptime into time stamp timestamp_in time zone time_zone.
    " should be valid now
    if sy-subrc <> 0.
      raise exception type cx_tstmp_internal_error
          exporting  date         = date_err
                     time         = time_err
                     timezone     = time_zone
                     mode         = cl_abap_tstmp=>op_mode_wallclock
                     timestamp    = timestamp_in
                     returncode   = 3.
    endif.
    " add an hour to valid UTC timestamp to get back to our
    " original time
    cl_abap_tstmp=>add(
      exporting
        tstmp   = timestamp_in " UTC-Zeitstempel
        secs    = num_secs_in_hour  " Zeitspanne in Sekunden
      receiving
        r_tstmp = timestamp_in " UTC-Zeitstempel
    ).

    " Now we convert back to valid time stamp in our timezone
    convert time stamp timestamp_in time zone time_zone
      into date date_out time time_out.

  endmethod.                    "wallclock_time

  method is_valid_in_tz.
    data tmptime type t.
    data tmpdate type d.

    convert time stamp timestamp time zone '      '
      into date tmpdate time tmptime.

    convert date tmpdate time tmptime
      into time stamp timestamp time zone tz.
    if sy-subrc = 0.
      is_valid = abap_true.
    else.
      is_valid = abap_false.
    endif.
    return.
  endmethod.                    "is_valid_in_tz

  method make_timestamp.
    clear date_out.
    clear time_out.
    is_valid = abap_false.
    convert date date_in time time_in into time stamp timestamp
      time zone time_zone.
    if sy-subrc = 0.
      date_out = date_in.
      time_out = time_in.
      is_valid = abap_true.
      return.
    endif.

    convert date date_in time time_in into time stamp timestamp
       time zone '      '.
    if sy-subrc <> 4. raise invalid_input. endif.
  endmethod.                    "make_timestamp
endclass.