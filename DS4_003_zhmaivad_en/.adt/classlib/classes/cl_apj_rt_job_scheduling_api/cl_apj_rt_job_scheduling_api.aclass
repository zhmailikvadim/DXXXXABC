class CL_APJ_RT_JOB_SCHEDULING_API definition
  public
  create protected .

public section.

  interfaces IF_APJ_RT_JOB_SCHEDULING_API .

  types:
    BEGIN OF ty_start_info,
        start_immediately TYPE boolean,
        timestamp         TYPE timestamp,
      END OF ty_start_info .
  types:
    BEGIN OF ty_job_exception,
        calender_id            TYPE btccalid,
        start_restriction_code TYPE btc_start_restriction,
      END OF ty_job_exception .
  types:
    BEGIN OF ty_weekday_info,
        on_monday    TYPE boolean,
        on_tuesday   TYPE boolean,
        on_wednesday TYPE boolean,
        on_thursday  TYPE boolean,
        on_friday    TYPE boolean,
        on_saturday  TYPE boolean,
        on_sunday    TYPE boolean,
      END OF ty_weekday_info .
  types:
    BEGIN OF ty_month_info,
        day                  TYPE int2,
        use_working_days_ind TYPE boolean,
        shift_direction      TYPE btcwdcdir,
        week_number          TYPE btcpweek,
      END OF ty_month_info .
  types:
    BEGIN OF ty_scheduling_info,
        test_mode            TYPE boolean,
        periodic_granularity TYPE apj_job_periodic_granularity,
        periodic_value       TYPE apj_job_periodic_value,
        timezone             TYPE timezone,
        exception            TYPE ty_job_exception,
        weekday_info         TYPE ty_weekday_info,
        month_info           TYPE ty_month_info,
      END OF ty_scheduling_info .
  types:
    BEGIN OF ty_job_details,
        job_name  TYPE btcjob,
        job_count TYPE btcjobcnt,
      END OF ty_job_details .
  types:
    BEGIN OF ty_end_info,
        type           TYPE apj_job_end_type_c,
        timestamp      TYPE timestamp,
        max_iterations TYPE btc_counter,
      END OF ty_end_info .

  class-methods GET_INSTANCE
    returning
      value(RO_INSTANCE) type ref to IF_APJ_RT_JOB_SCHEDULING_API .
  class-methods CANCEL_JOB
    importing
      !IS_JOB_DETAILS type TY_JOB_DETAILS
    exporting
      !ET_MESSAGE type BAPIRET2_T
      !EV_SUCCESSFUL type BOOLEAN
    raising
      CM_APJ_BASE .
  class-methods SCHEDULE_JOB
    importing
      value(IV_JOB_TEMPLATE_NAME) type APJ_JOB_TEMPLATE_NAME
      !IV_JOB_TEXT type APJ_JOB_TEXT
      !IS_START_INFO type TY_START_INFO
      !IS_END_INFO type TY_END_INFO optional
      !IS_SCHEDULING_INFO type TY_SCHEDULING_INFO optional
      !IT_JOB_PARAMETER_VALUE type IF_APJ_RT_TYPES=>TT_JOB_PARAMETER_VALUE optional
      !IV_ADJUST_START_INFO type BOOLEAN optional
      !IV_USERNAME type UNAME default SY-UNAME
      !IV_TEST_MODE type BOOLEAN optional
    exporting
      !ET_MESSAGE type BAPIRET2_T
      !ES_JOB_DETAILS type TY_JOB_DETAILS
    raising
      CM_APJ_BASE .
  class-methods GET_JOB_STATUS
    importing
      !IV_JOBNAME type BTCJOB
      !IV_JOBCOUNT type BTCJOBCNT
    exporting
      !EV_JOB_STATUS type BTCSTATUS
      !EV_USER_ERROR type ABAP_BOOL .
  class-methods RESTART_JOB
    importing
      !IS_JOB_DETAILS type TY_JOB_DETAILS
      !IV_RESTART_MODE type APJ_JOB_RESTART_MODE
    exporting
      !ET_MESSAGE type BAPIRET2_T
      !EV_SUCCESSFUL type BOOLEAN
      !ES_JOB_DETAILS type TY_JOB_DETAILS
    raising
      CM_APJ_BASE .
  PROTECTED SECTION.
    DATA:
      mo_dt_controller    TYPE REF TO if_apj_dt_controller.

    METHODS:
      constructor,
      get_job_run_info
        RETURNING
          VALUE(rs_job_run) TYPE apj_v_job_run_overview,
      get_variant_handler
        IMPORTING
          is_job_info_step          TYPE if_apj_rt_types=>ty_job_info_step
        RETURNING
          VALUE(ro_variant_handler) TYPE REF TO if_apj_rt_job_run_var_handler
        RAISING
          cm_apj_base,
      get_check_class_impl
        IMPORTING
          iv_check_class     TYPE seoclsname
        RETURNING
          VALUE(ro_instance) TYPE REF TO if_apj_jt_check
        RAISING
          cm_apj_base.

  PRIVATE SECTION.

    CLASS-DATA:
      so_instance TYPE REF TO cl_apj_rt_job_scheduling_api.

    CLASS-METHODS __adjust
      IMPORTING
        !is_start_info       TYPE cl_apj_rt_job_scheduling_api=>ty_start_info
        !is_scheduling_info  TYPE cl_apj_rt_job_scheduling_api=>ty_scheduling_info OPTIONAL
      RETURNING
        VALUE(rs_start_info) TYPE cl_apj_rt_job_scheduling_api=>ty_start_info
      RAISING
        cm_apj_base .
    CLASS-METHODS __check_and_adjust_months
      IMPORTING
        !is_date_time       TYPE cl_apj_fw_utilities=>ty_date_time
        !is_month_info      TYPE cl_apj_rt_job_scheduling_api=>ty_scheduling_info-month_info
      RETURNING
        VALUE(rs_date_time) TYPE cl_apj_fw_utilities=>ty_date_time .
    CLASS-METHODS __check_and_adjust_weeks
      IMPORTING
        !is_date_time       TYPE cl_apj_fw_utilities=>ty_date_time
        !is_weekday_info    TYPE cl_apj_rt_job_scheduling_api=>ty_scheduling_info-weekday_info
      RETURNING
        VALUE(rs_date_time) TYPE cl_apj_fw_utilities=>ty_date_time .
    CLASS-METHODS __check_and_adjust_week_month
      IMPORTING
        !is_date_time       TYPE cl_apj_fw_utilities=>ty_date_time
        !is_scheduling_info TYPE cl_apj_rt_job_scheduling_api=>ty_scheduling_info
      RETURNING
        VALUE(rs_date_time) TYPE cl_apj_fw_utilities=>ty_date_time .
    CLASS-METHODS __get_date_time
      IMPORTING
        VALUE(iv_timestamp) TYPE timestamp
        VALUE(iv_timezone)  TYPE timezone
      RETURNING
        VALUE(rs_date_time) TYPE cl_apj_fw_utilities=>ty_date_time .
    CLASS-METHODS __shift_month
      IMPORTING
        VALUE(iv_date) TYPE dats
        !iv_months     TYPE int4 DEFAULT 1
      RETURNING
        VALUE(rv_date) TYPE dats .
ENDCLASS.



CLASS CL_APJ_RT_JOB_SCHEDULING_API IMPLEMENTATION.


  METHOD cancel_job.
    CLEAR: et_message,
           ev_successful.

    " initialize message handler
    DATA(lo_message_handler) = cl_apj_message_handler=>get_instance( ).
    lo_message_handler->clear( ).

    " cancel job
    DATA(lo_rt_job_controller) = cl_apj_rt_job_controller=>get_instance( ).
    ev_successful = lo_rt_job_controller->cancel( is_job_info = VALUE #( job_name = is_job_details-job_name job_run_count = is_job_details-job_count ) ).

    et_message = lo_message_handler->get_all_as_bapi( ).
  ENDMETHOD.


  METHOD constructor.
    TRY.
        mo_dt_controller = cl_apj_dt_controller=>get_instance( iv_scoping_relevant = abap_true ).

      CATCH cm_apj_dt INTO DATA(lx_apj_dt). "should not happen
        RAISE EXCEPTION TYPE cx_fatal_exception
          EXPORTING
            previous = lx_apj_dt.
    ENDTRY.
  ENDMETHOD.


  METHOD get_check_class_impl.
    TRY.
        CREATE OBJECT ro_instance TYPE (iv_check_class).

      CATCH cx_sy_create_object_error INTO DATA(lx_exception).
        RAISE EXCEPTION TYPE cm_apj_dt
          EXPORTING
            previous = lx_exception.
    ENDTRY.
  ENDMETHOD.


  METHOD get_instance.
    IF so_instance IS NOT BOUND.
      so_instance = NEW #( ).
    ENDIF.

    ro_instance = so_instance.
  ENDMETHOD.


METHOD get_job_run_info.
    DATA:
      lv_job_name   TYPE btcjob,
      lv_job_count  TYPE btcjobcnt,
      lv_step_count TYPE btcstepcnt.

    data: lv_taskid  type btc_taskid.

    data: elementary_jce type APJ_JOB_CATALOG_ENTRY_NAME.
    data: chain_step type int2.

    CALL FUNCTION 'GET_JOB_RUNTIME_INFO'
      IMPORTING
        jobcount        = lv_job_count
        jobname         = lv_job_name
        stepcount       = lv_step_count
      EXCEPTIONS
        no_runtime_info = 1
        OTHERS          = 2.
    IF sy-subrc <> 0.
      CLEAR rs_job_run.
    ENDIF.

    SELECT SINGLE * FROM apj_v_job_run_overview
      WHERE job_name = @lv_job_name AND job_run_count = @lv_job_count
      %_HINTS HDB 'NO_CS_UNION_ALL, NO_SUBPLAN_SHARING'
      INTO @rs_job_run.

* 10.7.2018  We have to handle the case that the job catalog is collective.
* We need the elementary job catalog

* 25.9.2018 correction (otherwise the variable does not contain the number of
* the current step, but the total number of steps.
  rs_job_run-job_step_count = lv_step_count.

  if rs_job_run-JOB_CATALOG_ENTRY_TYPE_C = 'C'.

     SELECT SINGLE taskid FROM tbtc_task INTO lv_taskid
         WHERE jobname  = lv_job_name AND
               jobcount = lv_job_count.

     if sy-subrc = 0.

        select single progfromln into chain_step from tbtcp
                                              where jobname   = lv_job_name
                                                and jobcount  = lv_job_count
                                                and stepcount = lv_step_count.

        if sy-subrc = 0.

           TRY.
              cl_batch_scheduler=>get_apj_info_for_job(
                 EXPORTING
                    iv_jobname           = lv_job_name
                    iv_jobcount          = lv_job_count
                    iv_stepcount         = lv_step_count
                    iv_chain_step        = chain_step
                    iv_task_id           = lv_taskid
                 IMPORTING
                    ev_job_catalog_entry = elementary_jce
                ).
             CATCH cx_sdl_job .
          ENDTRY.

          rs_job_run-JOB_CATALOG_ENTRY_NAME = elementary_jce.

        endif.

     endif.

  endif.

ENDMETHOD.


  METHOD get_job_status.

    SELECT SINGLE job_run_status FROM apj_v_job_run_overview
      INTO @ev_job_status
      WHERE job_name = @iv_jobname AND job_run_count = @iv_jobcount.
    IF sy-subrc = 0 AND ev_job_status = 'U'.
      ev_user_error = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD get_variant_handler.
    ro_variant_handler = cl_apj_rt_job_run_var_handler=>get_instance( is_job_info_step ).
  ENDMETHOD.


  METHOD if_apj_rt_job_scheduling_api~check_before_schedule.

    DATA(ls_job_run) = get_job_run_info( ).

*   Only process in case of batch job scheduled by another user
    IF ( ls_job_run-job_name IS NOT INITIAL AND ls_job_run-job_created_by <> sy-uname ).

* 25.9.2018  d023157  for scheduling of collective templates externally
*      DATA(lo_var_handler) = get_variant_handler( VALUE #( job_name      = ls_job_run-job_name
*                                                           job_run_count = ls_job_run-job_run_count
*                                                           job_step      = ls_job_run-job_step_count ) ).
*
*      DATA(lt_variant_value) = lo_var_handler->get_values( ).

      DATA(lt_variant_value) = cl_apj_rt_appl_jobs_api=>get_appl_job_parameters( iv_job_name   = ls_job_run-job_name
                                                                                 iv_step_count = ls_job_run-job_step_count ).

      DATA(lo_jce) = CAST cl_apj_dt_job_cat_entry( mo_dt_controller->retrieve_single(
                                                    is_entity_type_name = VALUE #( entity_type = if_apj_dt_types=>cs_entity_type-job_catalog_entry
                                                                                   entity_name = ls_job_run-job_catalog_entry_name ) ) ).

      IF lo_jce IS BOUND.
        DATA(lv_check_class) = lo_jce->get_root( )-check_class.

        IF lv_check_class IS NOT INITIAL.
          DATA(lo_check_impl) = get_check_class_impl( lv_check_class ).

          DATA(lt_value) = CORRESPONDING if_apj_types=>tt_jt_selopt( lt_variant_value MAPPING parameter_name = selname ).

*          loop at lt_value ASSIGNING FIELD-SYMBOL(<value_line>).
*             clear <value_line>-parameter_name+8.
*             modify lt_value from <value_line>.
*          endloop.

          lo_check_impl->check_before_schedule(
            EXPORTING
              iv_job_name               = ls_job_run-job_name
              iv_job_catalog_entry_name = ls_job_run-job_catalog_entry_name
            IMPORTING
              ev_successful             = ev_successful
              et_msg                    = et_msg
            CHANGING
              ct_value                  = lt_value ).

          et_parameter_value = CORRESPONDING #( lt_value MAPPING selname = parameter_name ).
        ENDIF.
      ENDIF.
    ENDIF.


  ENDMETHOD.


  METHOD restart_job.
    CLEAR: et_message,
           ev_successful.

    " initialize message handler
    DATA(lo_message_handler) = cl_apj_message_handler=>get_instance( ).
    lo_message_handler->clear( ).

    " cancel job
    DATA(lo_rt_job_controller) = cl_apj_rt_job_controller=>get_instance( ).
    lo_rt_job_controller->restart( EXPORTING is_job_info = VALUE #( job_name = is_job_details-job_name job_run_count = is_job_details-job_count )
                                                   iv_restart_mode = iv_restart_mode
                                   IMPORTING ev_restarted = ev_successful
                                              es_job_details = es_job_details
                                                   ).

    et_message = lo_message_handler->get_all_as_bapi( ).
  ENDMETHOD.


  METHOD schedule_job.
    DATA: lo_job_template_entry TYPE REF TO cl_apj_dt_job_template_entry,
          lv_type               TYPE        if_apj_rt_types=>ty_exe_type,
          ls_start_info         TYPE        ty_start_info.

    CLEAR: es_job_details,
           et_message.

    " initialize message handler
    DATA(lo_message_handler) = cl_apj_message_handler=>get_instance( ).
    lo_message_handler->clear( ).

    " get job catalog entry name for job template
    DATA(lo_dt_controller) = cl_apj_dt_controller=>get_instance( iv_scoping_relevant = abap_true ).
    lo_job_template_entry ?= lo_dt_controller->retrieve_single( is_entity_type_name = VALUE #( entity_type = if_apj_dt_types=>cs_entity_type-job_template entity_name = iv_job_template_name ) ).

    IF lo_job_template_entry IS NOT BOUND.
      lo_message_handler->add( im_root = NEW cm_apj_rt( textid            = cm_apj_rt=>job_template_entry_not_found
                                                        job_template_name = iv_job_template_name
                                                        severity          = cm_apj_base=>cs_severity-error ) ).
    ELSE.
      IF iv_adjust_start_info = abap_true.
        ls_start_info = __adjust( EXPORTING is_start_info = is_start_info is_scheduling_info = is_scheduling_info ).
      ELSE.
        ls_start_info = is_start_info.
      ENDIF.

      DATA(lo_job_ctrl) = cl_apj_rt_job_controller=>get_instance( ).

      IF ls_start_info-start_immediately = abap_true.
        lv_type = if_apj_rt_types=>cs_exe_type-immediately.
      ELSE.
        lv_type = COND #( WHEN is_scheduling_info-periodic_granularity IS INITIAL THEN if_apj_rt_types=>cs_exe_type-once ELSE if_apj_rt_types=>cs_exe_type-periodically ).
      ENDIF.

*     Start and End date must be in system time zone!
      DATA(lv_start_timestamp) = cl_apj_fw_utilities=>convert_user_to_system_tstmp( ls_start_info-timestamp ).
      DATA(lv_end_timestamp)   = cl_apj_fw_utilities=>convert_user_to_system_tstmp( is_end_info-timestamp ).

*     Do not allow to schedule other than job class 'C' (low priority)
      cl_apj_rt_job_controller=>set_job_class( sbtch_jobclass_c ).
      DATA(ls_job_info) = lo_job_ctrl->execute( iv_job_template_name      = iv_job_template_name
                                                iv_job_catalog_entry_name = lo_job_template_entry->get_root( )-job_catalog_entry_name
                                                iv_job_text               = iv_job_text
                                                iv_username               = iv_username
                                                is_schedule_info          = VALUE #( type                 = lv_type
                                                                                     test_mode            = is_scheduling_info-test_mode
                                                                                     periodic_granularity = is_scheduling_info-periodic_granularity
                                                                                     periodic_value       = is_scheduling_info-periodic_value
                                                                                     timezone             = is_scheduling_info-timezone
                                                                                     start_date_time      = lv_start_timestamp
                                                                                     end_info             = VALUE #( type           = is_end_info-type
                                                                                                                     date_time      = lv_end_timestamp
                                                                                                                     max_iterations = is_end_info-max_iterations )
                                                                                     job_exception        = is_scheduling_info-exception
                                                                                     weekday_info         = is_scheduling_info-weekday_info
                                                                                     month_info           = is_scheduling_info-month_info )
                                                it_job_parameter_value    = it_job_parameter_value ).
    ENDIF.

    et_message = lo_message_handler->get_all_as_bapi( ).

    es_job_details-job_name  = ls_job_info-job_name.
    es_job_details-job_count = ls_job_info-job_run_count.

* some inserts into APJ tables have not been committed yet, but
* TBTCO has been committed.
* At least if the start condition is immediate start, we do a commit here.
if is_start_info-start_immediately = 'X'.
    CALL FUNCTION 'DB_COMMIT'.
endif.

  ENDMETHOD.


  METHOD __adjust.
    DATA: lt_job_pg_range TYPE RANGE OF if_apj_rt_types=>ty_job_periodic_granularity.
    DATA: lv_timezone TYPE timezone.

    lt_job_pg_range = VALUE #( ( sign = if_apj_types=>cs_sign-including option = if_apj_types=>cs_option-equal low = if_apj_rt_types=>cs_periodic_granularity-months )
                              ( sign = if_apj_types=>cs_sign-including option = if_apj_types=>cs_option-equal low = if_apj_rt_types=>cs_periodic_granularity-weeks )
                              ( sign = if_apj_types=>cs_sign-including option = if_apj_types=>cs_option-equal low = if_apj_rt_types=>cs_periodic_granularity-week_months ) ).


    IF is_scheduling_info-periodic_granularity IN lt_job_pg_range.
      lv_timezone = COND #( WHEN is_scheduling_info-timezone IS INITIAL THEN cl_apj_time_zone_handler=>cv_utc ELSE is_scheduling_info-timezone ).

      " get date / time
      DATA(ls_date_time) = __get_date_time( iv_timestamp = is_start_info-timestamp iv_timezone = lv_timezone ).

      CASE is_scheduling_info-periodic_granularity.
        WHEN if_apj_rt_types=>cs_periodic_granularity-months.
          ls_date_time = __check_and_adjust_months( is_date_time  = ls_date_time
                                                    is_month_info = is_scheduling_info-month_info ).

        WHEN if_apj_rt_types=>cs_periodic_granularity-weeks.
          ls_date_time = __check_and_adjust_weeks( is_date_time    = ls_date_time
                                                   is_weekday_info = is_scheduling_info-weekday_info ).

        WHEN if_apj_rt_types=>cs_periodic_granularity-week_months.
          ls_date_time = __check_and_adjust_week_month( is_date_time       = ls_date_time
                                                        is_scheduling_info = is_scheduling_info ).
      ENDCASE.

      IF ls_date_time IS NOT INITIAL.
        rs_start_info-timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date      = ls_date_time-date
                                                                               iv_time      = ls_date_time-time
                                                                               iv_timezone  = lv_timezone ).
      ENDIF.
    ELSE.
      rs_start_info = is_start_info.
    ENDIF.

  ENDMETHOD.


  METHOD __check_and_adjust_months.
    DATA: lv_day               TYPE int4,
          ls_date              TYPE cl_apj_fw_utilities=>ts_date,
          lv_last_day_of_month TYPE int4.

    CHECK is_month_info-day BETWEEN 1 AND 31.

    DO 2 TIMES.
      rs_date_time           = is_date_time.

      IF sy-index = 2.
        rs_date_time-date = __shift_month( iv_date = rs_date_time-date ).
      ENDIF.

      lv_last_day_of_month = cl_apj_fw_utilities=>get_last_day_of_month( iv_month = rs_date_time-date+4(2) iv_year = rs_date_time-date(4) ).
      IF is_month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-beginning.
        lv_day = nmin( val1 = is_month_info-day val2 = lv_last_day_of_month ).
      ELSE.
        lv_day = nmax( val1 = 1 val2 = ( lv_last_day_of_month - is_month_info-day + 1 ) ). " day start always with 1
      ENDIF.

      IF lv_day NOT BETWEEN 1 AND lv_last_day_of_month.
        CLEAR rs_date_time. " internal error => should hot happen
        RETURN.
      ENDIF.

      rs_date_time-date+6(2) = lv_day.

      " assumption: date is not in the past
      IF rs_date_time-date >= is_date_time-date.
        RETURN.
      ENDIF.
    ENDDO.

    " no valid start point found => should not happen
    CLEAR rs_date_time.
  ENDMETHOD.


  METHOD __check_and_adjust_weeks.

    ASSERT is_weekday_info IS NOT INITIAL. "ensure that at least on weekday is selected
    rs_date_time = is_date_time.

    DO 7 TIMES.
      rs_date_time-date = rs_date_time-date + sy-index - 1.

      " check weekday
      DATA(lv_weekday) = CONV int4( cl_apj_fw_utilities=>compute_day( iv_date = rs_date_time-date ) ).
      ASSIGN COMPONENT lv_weekday OF STRUCTURE is_weekday_info TO FIELD-SYMBOL(<v_on_weekday>).
      IF sy-subrc = 0 AND <v_on_weekday> = abap_true.
        RETURN.
      ENDIF.
    ENDDO.

    CLEAR rs_date_time. " no valid start point found => should not happen
  ENDMETHOD.


  METHOD __check_and_adjust_week_month.
    DATA: lv_week_number TYPE btcpweek,
          lv_week_day    TYPE int4,
          lv_date        TYPE dats.

    IF     is_scheduling_info-weekday_info IS NOT INITIAL
       AND is_scheduling_info-month_info-week_number BETWEEN 1 AND 5.

      " check if given date is valid
      lv_week_number = ( is_date_time-date+6(2) DIV 7 ) + sign( is_date_time-date+6(2) MOD 7 ).
      lv_week_day    = cl_apj_fw_utilities=>compute_day( iv_date = is_date_time-date ) - 1.

      IF     is_scheduling_info-month_info-week_number      = lv_week_number
         AND is_scheduling_info-weekday_info+lv_week_day(1) = abap_true.
        rs_date_time = is_date_time.
        RETURN.
      ENDIF.

      lv_date           = is_date_time-date.
      rs_date_time-time = is_date_time-time.
      DO 2 TIMES.
        lv_date+6(2) = '01'.

        IF sy-index = 2.
          CALL METHOD cl_apj_fw_utilities=>add_months_to_date
            EXPORTING
              iv_months = 1
            CHANGING
              cv_date   = lv_date.
        ENDIF.

        DO 7 TIMES.
          rs_date_time-date = lv_date + sy-index - 1.
          lv_week_day       = cl_apj_fw_utilities=>compute_day( iv_date = rs_date_time-date ) - 1.

          IF is_scheduling_info-weekday_info+lv_week_day(1) = abap_true.
            IF    is_scheduling_info-month_info-week_number BETWEEN 2 AND 4
               OR cl_apj_fw_utilities=>get_last_date_of_month( iv_date = rs_date_time-date ) < CONV dats( rs_date_time-date + 28 ).
              rs_date_time-date = rs_date_time-date + ( 7 * ( nmin( val1 = 4 val2 = CONV int4( is_scheduling_info-month_info-week_number ) ) - 1 ) ).
            ELSEIF is_scheduling_info-month_info-week_number = 5.
              ADD 28 TO rs_date_time-date.
            ENDIF.

            IF rs_date_time-date >= is_date_time-date.
              RETURN.
            ENDIF.
          ENDIF.
        ENDDO.
      ENDDO.
    ENDIF.

    CLEAR rs_date_time. " error situation
  ENDMETHOD.


  METHOD __get_date_time.
    rs_date_time = cl_apj_fw_utilities=>convert_ts_into_date_time( iv_timezone  = iv_timezone
                                                                   iv_timestamp = COND #( WHEN iv_timestamp IS INITIAL THEN cl_apj_fw_utilities=>get_timestamp( ) ELSE iv_timestamp ) ).
  ENDMETHOD.


  METHOD __shift_month.
    DATA: ls_date TYPE cl_apj_fw_utilities=>ts_date.

    ls_date = iv_date.
    ADD 1 TO ls_date-month.
    IF ls_date-month = 13.
      ls_date-month = 01.
      ADD 1 TO ls_date-year.
    ENDIF.
    rv_date = ls_date.
  ENDMETHOD.
ENDCLASS.