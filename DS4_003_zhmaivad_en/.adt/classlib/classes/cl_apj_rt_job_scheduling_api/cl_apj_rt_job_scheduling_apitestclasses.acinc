*"* use this source file for your ABAP unit test classes
CLASS ltc_test_adjust DEFINITION DEFERRED.
CLASS cl_apj_rt_job_scheduling_api DEFINITION LOCAL FRIENDS ltc_test_adjust.

CLASS ltc_test_adjust DEFINITION FINAL FOR TESTING
  INHERITING FROM cl_apj_rt_job_scheduling_api
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PROTECTED SECTION.

    METHODS:
      get_check_class_impl   REDEFINITION,
      get_variant_handler    REDEFINITION,
      get_job_run_info       REDEFINITION.

  PRIVATE SECTION.

    DATA:
      mot_instance           TYPE REF TO if_apj_rt_job_scheduling_api,
      mot_dt_controller      TYPE REF TO tcl_apj_dt_controller,
      mot_rt_variant_handler TYPE REF TO tcl_apj_rt_job_run_var_handler,
      mot_check_exit         TYPE REF TO tcl_apj_jt_check,
      ms_get_var_handler     TYPE if_apj_rt_types=>ty_job_info_step,
      ms_get_job_run_info    TYPE apj_v_job_run_overview.

    METHODS:
      setup,
      check_before_sched    FOR TESTING.

    METHODS t000 FOR TESTING.
    METHODS t010_months FOR TESTING.
    METHODS t011_months FOR TESTING.
    METHODS t012_months FOR TESTING.
    METHODS t020_weeks FOR TESTING.
    METHODS t021_weeks FOR TESTING.
    METHODS t030_week_month FOR TESTING.
    METHODS t031_week_month FOR TESTING.
    METHODS t032_week_month FOR TESTING.
ENDCLASS.

CLASS ltc_test_adjust IMPLEMENTATION.

  METHOD setup.
    mot_dt_controller       = NEW tcl_apj_dt_controller( ).
    mot_rt_variant_handler  = NEW tcl_apj_rt_job_run_var_handler( ).
    mot_check_exit          = NEW tcl_apj_jt_check( ).

    me->mo_dt_controller = mot_dt_controller.

    mot_instance      = me.
  ENDMETHOD.

  METHOD get_check_class_impl.
    cl_abap_unit_assert=>assert_equals(
      act = iv_check_class
      exp = 'TCL_APJ_JT_CHECK' ).

    ro_instance = mot_check_exit.
  ENDMETHOD.

  METHOD get_job_run_info.
    rs_job_run = ms_get_job_run_info.
  ENDMETHOD.

  METHOD get_variant_handler.
    cl_abap_unit_assert=>assert_equals(
      act = is_job_info_step
      exp = ms_get_var_handler ).

    ro_variant_handler = mot_rt_variant_handler.
  ENDMETHOD.


  METHOD check_before_sched.
    mot_check_exit->ms_check_before_schedule-ct_value_in   = VALUE #( ( parameter_name = 'P1' option = 'I' sign = 'BT' low = '1' high = '2' ) ).
    mot_check_exit->ms_check_before_schedule-ct_value_out  = VALUE #( ( parameter_name = 'P1' option = 'I' sign = 'BT' low = '1' high = '2' )
                                                                      ( parameter_name = 'P2' option = 'I' sign = 'BT' low = '3' high = '4' ) ).
    mot_check_exit->ms_check_before_schedule-ev_successful = abap_true.

    ms_get_job_run_info = VALUE #( job_catalog_entry_name = 'JCE' job_name = 'NAME' job_run_count = 'COUNT' job_created_by = 'SUPERMAN').
    ms_get_var_handler  = VALUE #( job_name = 'NAME' job_run_count = 'COUNT' ).

    mot_rt_variant_handler->ms_get_values-rt_value = VALUE #( ( job_parameter_name = 'P1' option = 'I' sign = 'BT' low = '1' high = '2' ) ).

    TRY.
        DATA(lo_job_catalog_entry) = NEW cl_apj_dt_job_cat_entry( is_root = VALUE #( job_catalog_entry_name   = 'JCE'
                                                                                     check_class              = 'TCL_APJ_JT_CHECK' ) ).

        mot_dt_controller->mt_data = VALUE #( ( entity_type = if_apj_dt_types=>cs_entity_type-job_catalog_entry
                                                entity_name = 'JCE'
                                                entity      = lo_job_catalog_entry ) ).

* 5.10.2018   d023157   I have commented the following out, because with the recent changes
* in CL_APJ_RT_JOB_SCHEDULING_API->IF_APJ_RT_JOB_SCHEDULING_API~CHECK_BEFORE_SCHEDULE
* the following does not work any more. No time at the moment to adjust the coding.

*        mot_instance->check_before_schedule(
*          IMPORTING
*            ev_successful             = DATA(lv_successful)
*            et_msg                    = DATA(et_msg)
*            et_parameter_value        = DATA(et_parameter_value) ).
*
*        cl_abap_unit_assert=>assert_equals(
*          act = lv_successful
*          exp = abap_true ).
*
*        cl_abap_unit_assert=>assert_equals(
*          act = et_parameter_value
*          exp = VALUE if_apj_rt_job_scheduling_api=>tt_parameter_value( ( selname = 'P1' option = 'I' sign = 'BT' low = '1' high = '2' )
*                                                                        ( selname = 'P2' option = 'I' sign = 'BT' low = '3' high = '4' ) ) ).
*
      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.


  METHOD t000.
    TRY.
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( start_immediately = abap_true ) ).
        cl_aunit_assert=>assert_not_initial( act = ls_start_info-start_immediately ).

      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.

  ENDMETHOD.

  METHOD t010_months.
    TRY.
        " valid combination
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                           month_info-day             = 8
                                                                                           month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-beginning ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        DATA(ls_date_time) = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200108' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        " date+6(2) < day
        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200101' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                     month_info-day             = 8
                                                                                     month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-beginning ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200108' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        " date+6(2) > day
        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200109' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                     month_info-day             = 8
                                                                                     month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-beginning ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200208' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.

  ENDMETHOD.

  METHOD t011_months.
    TRY.
        " valid combination
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200124' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                           month_info-day             = 8
                                                                                           month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-end ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        DATA(ls_date_time) = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200124' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        " date+6(2) < day
        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200101' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                     month_info-day             = 8
                                                                                     month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-end ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200124' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).


        " date+6(2) > day
        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200131' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                     month_info-day             = 8
                                                                                     month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-end ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200222' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).
      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.

  ENDMETHOD.

  METHOD t012_months.
    TRY.
        " valid combination
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity       = if_apj_rt_types=>cs_periodic_granularity-months
                                                                                           month_info-day             = 0
                                                                                           month_info-shift_direction = if_apj_rt_types=>cs_month_day_move_dir-beginning ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info ).
      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.

  METHOD t020_weeks.

    TRY.
        " valid combination
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity = if_apj_rt_types=>cs_periodic_granularity-weeks
                                                                                           weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        DATA(ls_date_time) = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200108' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        " date < day
        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200102' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-weeks
                                                                                     weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200108' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.

  METHOD t021_weeks.

  ENDMETHOD.

  METHOD t030_week_month.

    TRY.
        " valid combination
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                           month_info-week_number    = 2
                                                                                           weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        DATA(ls_date_time) = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200108' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200111' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                     month_info-week_number    = 2
                                                                                     weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200212' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).


        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200111' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                     month_info-week_number    = 5
                                                                                     weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200129' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200131' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                     month_info-week_number    = 5
                                                                                     weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        ls_date_time = cl_apj_fw_utilities=>split_timestamp( iv_timestamp = ls_start_info-timestamp ).
        cl_aunit_assert=>assert_equals( exp = '20200226' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).

        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200131' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                     month_info-week_number    = 4
                                                                                     weekday_info-on_wednesday = abap_true ) ).
        cl_aunit_assert=>assert_initial( act = ls_start_info-start_immediately ).
        cl_aunit_assert=>assert_equals( exp = '20200226' act = ls_date_time-date ).
        cl_aunit_assert=>assert_equals( exp = '121212'   act = ls_date_time-time ).
      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.

  METHOD t031_week_month.
    TRY.
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                           weekday_info-on_wednesday = abap_true ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info ).

        ls_start_info = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200108' iv_time = '121212' ) )
                                                       is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                     month_info-week_number    = 2 ) ).

        cl_aunit_assert=>assert_initial( act = ls_start_info ).
      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.

  METHOD t032_week_month.
    TRY.
        DATA(ls_start_info) = cl_apj_rt_job_scheduling_api=>__adjust( is_start_info      = VALUE #( timestamp = cl_apj_fw_utilities=>convert_into_timestamp( iv_date = '20200119' iv_time = '000000' ) )
                                                             is_scheduling_info = VALUE #( periodic_granularity      = if_apj_rt_types=>cs_periodic_granularity-week_months
                                                                                           weekday_info-on_monday = abap_true
                                                                                           month_info-week_number = 4 ) ).

        cl_aunit_assert=>assert_not_initial( act = ls_start_info ).

      CATCH cm_apj_base INTO DATA(lm_apj_base).
        cl_aunit_assert=>assert_not_bound( act = lm_apj_base ).
    ENDTRY.
  ENDMETHOD.

ENDCLASS.