
CLASS ltc_arun_db_select DEFINITION FINAL FOR TESTING DURATION SHORT
                         RISK LEVEL DANGEROUS
                         INHERITING FROM cl_arun_db_select.
  PUBLIC SECTION.
    CONSTANTS  : mc_tdc_ekes TYPE etobj_name VALUE 'TDC_ADJUST_EKES_BY_BDBS',
                 mc_tdc_eket TYPE etobj_name VALUE 'TDC_ADJUST_EKET_BY_BDBS',
                 mc_tdc_vbbe TYPE etobj_name VALUE 'TDC_ADJUST_VBBE_BY_BDBS',
                 mc_tdc_ekub TYPE etobj_name VALUE 'TDC_ADJUST_EKUB_BY_BDBS',
                 mc_tdc_resb TYPE etobj_name VALUE 'TDC_ADJUST_resb_BY_BDBS'.
*                mc_tdc_preread_bdbs TYPE etobj_name VALUE 'TDC_PREREAD_BDBS'.

    CLASS-DATA: mt_variants_ekes TYPE etvar_name_tabtype,
                mt_variants_eket TYPE etvar_name_tabtype,
                mt_variants_vbbe TYPE etvar_name_tabtype,
                mt_variants_ekub TYPE etvar_name_tabtype,
                mt_variants_resb TYPE etvar_name_tabtype.
*               mt_variants_preread_bdbs TYPE etvar_name_tabtype.

*    DATA : mo_util         TYPE REF TO td_cl_arun_utilities,
*           mo_cust         TYPE REF TO td_cl_arun_read_customizing,
*           mo_db_operation TYPE REF TO td_cl_arun_db_operation.

  PRIVATE SECTION.
    DATA: f_cut TYPE REF TO cl_arun_db_select.  "class under test
    CLASS-METHODS:class_setup,
      get_variants IMPORTING iv_tdc      TYPE etobj_name
                   EXPORTING et_variants TYPE etvar_name_tabtype.

*   CLASS-METHODS: class_teardown.
    METHODS: setup,
      execute_adjust_ekes_by_bdbs IMPORTING iv_variant TYPE etvar_id,
      execute_adjust_eket_by_bdbs IMPORTING iv_variant TYPE etvar_id,
      execute_adjust_ekub_by_bdbs IMPORTING iv_variant TYPE etvar_id,
      execute_adjust_vbbe_by_bdbs IMPORTING iv_variant TYPE etvar_id,
      execute_adjust_resb_by_bdbs IMPORTING iv_variant TYPE etvar_id.
*     execute_preread_bdbs        IMPORTING iv_variant TYPE etvar_id.
*   METHODS: teardown.
    METHODS: proc_adjust_ekes_by_bdbs_test FOR TESTING,
             proc_adjust_eket_by_bdbs_test FOR TESTING,
             proc_adjust_ekub_by_bdbs_test FOR TESTING,
             proc_adjust_vbbe_by_bdbs_test FOR TESTING,
             proc_adjust_resb_by_bdbs_test FOR TESTING.
*            proc_preread_bdbs_test        FOR TESTING.
ENDCLASS.                                                                           "ltc_Arun_Db_Select


CLASS ltc_arun_db_select IMPLEMENTATION.

  METHOD class_setup.
    CALL METHOD get_variants
      EXPORTING
        iv_tdc      = mc_tdc_ekes
      IMPORTING
        et_variants = mt_variants_ekes.

    CALL METHOD get_variants
      EXPORTING
        iv_tdc      = mc_tdc_eket
      IMPORTING
        et_variants = mt_variants_eket.

    CALL METHOD get_variants
      EXPORTING
        iv_tdc      = mc_tdc_ekub
      IMPORTING
        et_variants = mt_variants_ekub.

    CALL METHOD get_variants
      EXPORTING
        iv_tdc      = mc_tdc_vbbe
      IMPORTING
        et_variants = mt_variants_vbbe.

    CALL METHOD get_variants
      EXPORTING
        iv_tdc      = mc_tdc_resb
      IMPORTING
        et_variants = mt_variants_resb.

*    CALL METHOD get_variants
*      EXPORTING
*        iv_tdc      = mc_tdc_preread_bdbs
*      IMPORTING
*        et_variants = mt_variants_preread_bdbs.

  ENDMETHOD.

  METHOD setup.
    CREATE OBJECT f_cut.
  ENDMETHOD.

  METHOD get_variants.
    DATA : lo_tdc_api TYPE REF TO cl_apl_ecatt_tdc_api.
    TRY.
        lo_tdc_api  = cl_apl_ecatt_tdc_api=>get_instance( iv_tdc ).
        et_variants = lo_tdc_api->get_variant_list( ).
      CATCH cx_ecatt_tdc_access.
        cl_aunit_assert=>fail( msg = 'Error reading tdc:' && iv_tdc ).
    ENDTRY.
  ENDMETHOD.

  METHOD proc_adjust_ekes_by_bdbs_test.

    LOOP AT mt_variants_ekes ASSIGNING FIELD-SYMBOL(<lfs_variants>).
      IF <lfs_variants> = 'ECATTDEFAULT'.
        CONTINUE .
      ELSE.
        CALL METHOD execute_adjust_ekes_by_bdbs
          EXPORTING
            iv_variant = <lfs_variants>.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD proc_adjust_eket_by_bdbs_test.

    LOOP AT mt_variants_eket ASSIGNING FIELD-SYMBOL(<lfs_variants>).
      IF <lfs_variants> = 'ECATTDEFAULT'.
        CONTINUE .
      ELSE.
        CALL METHOD execute_adjust_eket_by_bdbs
          EXPORTING
            iv_variant = <lfs_variants>.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD proc_adjust_ekub_by_bdbs_test.

    LOOP AT mt_variants_ekub ASSIGNING FIELD-SYMBOL(<lfs_variants>).
      IF <lfs_variants> = 'ECATTDEFAULT'.
        CONTINUE .
      ELSE.
        CALL METHOD execute_adjust_ekub_by_bdbs
          EXPORTING
            iv_variant = <lfs_variants>.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD proc_adjust_vbbe_by_bdbs_test.

    LOOP AT mt_variants_vbbe ASSIGNING FIELD-SYMBOL(<lfs_variants>).
      IF <lfs_variants> = 'ECATTDEFAULT'.
        CONTINUE .
      ELSE.
        CALL METHOD execute_adjust_vbbe_by_bdbs
          EXPORTING
            iv_variant = <lfs_variants>.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.
  METHOD proc_adjust_resb_by_bdbs_test.

    LOOP AT mt_variants_resb ASSIGNING FIELD-SYMBOL(<lfs_variants>).
      IF <lfs_variants> = 'ECATTDEFAULT'.
        CONTINUE .
      ELSE.
        CALL METHOD execute_adjust_resb_by_bdbs
          EXPORTING
            iv_variant = <lfs_variants>.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

*  METHOD proc_preread_bdbs_test.
*
*    LOOP AT mt_variants_preread_bdbs ASSIGNING FIELD-SYMBOL(<lfs_variants>).
*      IF <lfs_variants> = 'ECATTDEFAULT'.
*        CONTINUE .
*      ELSE.
*        CALL METHOD execute_preread_bdbs
*          EXPORTING
*            iv_variant = <lfs_variants>.
*      ENDIF.
*    ENDLOOP.
*
*  ENDMETHOD.

  METHOD execute_adjust_ekes_by_bdbs.

    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
          ct_norm_ekes     TYPE if_atp_pac_db_select=>tt_norm_ekes,
          it_norm_ekes_exp TYPE if_atp_pac_db_select=>tt_norm_ekes,
          it_bdbs          TYPE arun_tt_bdbstab,
          it_norm_ekes     TYPE if_atp_pac_db_select=>tt_norm_ekes,
          lv_msg           TYPE string.
    TRY.
        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
          EXPORTING
            i_testdatacontainer         = mc_tdc_ekes
            i_write_access              = abap_true
            i_testdatacontainer_version = '01'
          RECEIVING
            e_tdc_ref                   = DATA(lo_tdc).

        IF lo_tdc IS BOUND.
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'MT_BDBS'      " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = mt_bdbs        " Variable to which the Value should be Transferred
          ).
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'IV_GRANULARITY'    " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = iv_granularity     " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'CT_NORM_EKES'    " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = ct_norm_ekes    " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
             EXPORTING
               i_param_name        = 'CT_NORM_EKES_EXP'    " Parameter Name
               i_variant_name      = iv_variant     " Variant Name
             CHANGING
               e_param_value       = it_norm_ekes_exp    " Variable to which the Value should be Transferred
          ).

          f_cut->mt_bdbs = mt_bdbs .

          f_cut->if_atp_pac_select_bdbs~adjust_ekes_by_bdbs(
            EXPORTING
                iv_granularity = iv_granularity
            CHANGING
                ct_norm_ekes = ct_norm_ekes ).

          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
          cl_abap_unit_assert=>assert_equals(
           EXPORTING
             act                  =  ct_norm_ekes     " Data object with current value
             exp                  =  it_norm_ekes_exp
             msg                  =  lv_msg ).         " Data object with expected type
        ENDIF.
      CATCH cx_ecatt_tdc_access.
    ENDTRY.


  ENDMETHOD.

  METHOD execute_adjust_eket_by_bdbs.

    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
          ct_norm_eket     TYPE if_atp_pac_db_select=>tt_norm_eket,
          it_norm_eket_exp TYPE if_atp_pac_db_select=>tt_norm_eket,
          it_bdbs          TYPE arun_tt_bdbstab,
          it_norm_eket     TYPE if_atp_pac_db_select=>tt_norm_eket,
          lv_msg           TYPE string.
    TRY.
        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
          EXPORTING
            i_testdatacontainer         = mc_tdc_eket
            i_write_access              = abap_true
            i_testdatacontainer_version = '01'
          RECEIVING
            e_tdc_ref                   = DATA(lo_tdc).

        IF lo_tdc IS BOUND.
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'MT_BDBS'      " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = mt_bdbs        " Variable to which the Value should be Transferred
          ).
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'IV_GRANULARITY'    " Parameter Name
              i_variant_name      = iv_variant          " Variant Name
            CHANGING
              e_param_value       = iv_granularity      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'CT_NORM_EKET'    " Parameter Name
              i_variant_name      = iv_variant        " Variant Name
            CHANGING
              e_param_value       = ct_norm_eket      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
             EXPORTING
               i_param_name        = 'CT_NORM_EKET_EXP'    " Parameter Name
               i_variant_name      = iv_variant     " Variant Name
             CHANGING
               e_param_value       = it_norm_eket_exp    " Variable to which the Value should be Transferred
          ).

          f_cut->mt_bdbs = mt_bdbs .

          f_cut->if_atp_pac_select_bdbs~adjust_eket_by_bdbs(
            EXPORTING
                iv_granularity = iv_granularity
            CHANGING
                ct_norm_eket = ct_norm_eket ).

          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
          cl_abap_unit_assert=>assert_equals(
           EXPORTING
             act                  =  ct_norm_eket     " Data object with current value
             exp                  =  it_norm_eket_exp
             msg                  =  lv_msg ).         " Data object with expected type
        ENDIF.
      CATCH cx_ecatt_tdc_access.
    ENDTRY.

  ENDMETHOD.


  METHOD execute_adjust_ekub_by_bdbs.

    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
          ct_norm_ekub     TYPE if_atp_pac_db_select=>tt_norm_ekub,
          it_norm_ekub_exp TYPE if_atp_pac_db_select=>tt_norm_ekub,
          it_bdbs          TYPE arun_tt_bdbstab,
          it_norm_ekub     TYPE if_atp_pac_db_select=>tt_norm_ekub,
          lv_msg           TYPE string.
    TRY.
        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
          EXPORTING
            i_testdatacontainer         = mc_tdc_ekub
            i_write_access              = abap_true
            i_testdatacontainer_version = '01'
          RECEIVING
            e_tdc_ref                   = DATA(lo_tdc).

        IF lo_tdc IS BOUND.
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'MT_BDBS'      " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = mt_bdbs        " Variable to which the Value should be Transferred
          ).
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'IV_GRANULARITY'    " Parameter Name
              i_variant_name      = iv_variant          " Variant Name
            CHANGING
              e_param_value       = iv_granularity      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'CT_NORM_EKUB'    " Parameter Name
              i_variant_name      = iv_variant        " Variant Name
            CHANGING
              e_param_value       = ct_norm_ekub      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
             EXPORTING
               i_param_name        = 'CT_NORM_EKUB_EXP'    " Parameter Name
               i_variant_name      = iv_variant     " Variant Name
             CHANGING
               e_param_value       = it_norm_ekub_exp    " Variable to which the Value should be Transferred
          ).

          f_cut->mt_bdbs = mt_bdbs .

          f_cut->if_atp_pac_select_bdbs~adjust_ekub_by_bdbs(
            EXPORTING
                iv_granularity = iv_granularity
            CHANGING
                ct_norm_ekub = ct_norm_ekub ).

          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
          cl_abap_unit_assert=>assert_equals(
           EXPORTING
             act                  =  ct_norm_ekub     " Data object with current value
             exp                  =  it_norm_ekub_exp
             msg                  =  lv_msg ).         " Data object with expected type
        ENDIF.
      CATCH cx_ecatt_tdc_access.
    ENDTRY.

  ENDMETHOD.

  METHOD execute_adjust_vbbe_by_bdbs.

    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
          ct_norm_vbbe     TYPE if_atp_pac_db_select=>tt_norm_vbbe,
          it_norm_vbbe_exp TYPE if_atp_pac_db_select=>tt_norm_vbbe,
          it_bdbs          TYPE arun_tt_bdbstab,
          it_norm_vbbe     TYPE if_atp_pac_db_select=>tt_norm_vbbe,
          lv_msg           TYPE string.
    TRY.
        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
          EXPORTING
            i_testdatacontainer         = mc_tdc_vbbe
            i_write_access              = abap_true
            i_testdatacontainer_version = '01'
          RECEIVING
            e_tdc_ref                   = DATA(lo_tdc).

        IF lo_tdc IS BOUND.
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'MT_BDBS'      " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = mt_bdbs        " Variable to which the Value should be Transferred
          ).
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'IV_GRANULARITY'    " Parameter Name
              i_variant_name      = iv_variant          " Variant Name
            CHANGING
              e_param_value       = iv_granularity      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'CT_NORM_VBBE'    " Parameter Name
              i_variant_name      = iv_variant        " Variant Name
            CHANGING
              e_param_value       = ct_norm_vbbe      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
             EXPORTING
               i_param_name        = 'CT_NORM_VBBE_EXP'    " Parameter Name
               i_variant_name      = iv_variant     " Variant Name
             CHANGING
               e_param_value       = it_norm_vbbe_exp    " Variable to which the Value should be Transferred
          ).

          f_cut->mt_bdbs = mt_bdbs .

          f_cut->if_atp_pac_select_bdbs~adjust_vbbe_by_bdbs(
            EXPORTING
                iv_granularity = iv_granularity
            CHANGING
                ct_norm_vbbe = ct_norm_vbbe ).

          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
          cl_abap_unit_assert=>assert_equals(
           EXPORTING
             act                  =  ct_norm_vbbe     " Data object with current value
             exp                  =  it_norm_vbbe_exp
             msg                  =  lv_msg ).         " Data object with expected type
        ENDIF.
      CATCH cx_ecatt_tdc_access.
    ENDTRY.

  ENDMETHOD.
  METHOD execute_adjust_resb_by_bdbs.

    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
          ct_norm_resb     TYPE if_atp_pac_db_select=>tt_norm_resb,
          it_norm_resb_exp TYPE if_atp_pac_db_select=>tt_norm_resb,
          it_bdbs          TYPE arun_tt_bdbstab,
          it_norm_resb     TYPE if_atp_pac_db_select=>tt_norm_resb,
          lv_msg           TYPE string.
    TRY.
        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
          EXPORTING
            i_testdatacontainer         = mc_tdc_resb
            i_write_access              = abap_true
            i_testdatacontainer_version = '01'
          RECEIVING
            e_tdc_ref                   = DATA(lo_tdc).

        IF lo_tdc IS BOUND.
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'MT_BDBS'      " Parameter Name
              i_variant_name      = iv_variant     " Variant Name
            CHANGING
              e_param_value       = mt_bdbs        " Variable to which the Value should be Transferred
          ).
          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'IV_GRANULARITY'    " Parameter Name
              i_variant_name      = iv_variant          " Variant Name
            CHANGING
              e_param_value       = iv_granularity      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
            EXPORTING
              i_param_name        = 'CT_NORM_RESB'    " Parameter Name
              i_variant_name      = iv_variant        " Variant Name
            CHANGING
              e_param_value       = ct_norm_resb      " Variable to which the Value should be Transferred
          ).

          lo_tdc->get_value(
             EXPORTING
               i_param_name        = 'CT_NORM_RESB_EXP'    " Parameter Name
               i_variant_name      = iv_variant     " Variant Name
             CHANGING
               e_param_value       = it_norm_resb_exp    " Variable to which the Value should be Transferred
          ).

          f_cut->mt_bdbs = mt_bdbs .

          f_cut->if_atp_pac_select_bdbs~adjust_resb_by_bdbs(
            EXPORTING
                iv_granularity = iv_granularity
            CHANGING
                ct_norm_resb = ct_norm_resb ).

          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
          cl_abap_unit_assert=>assert_equals(
           EXPORTING
             act                  =  ct_norm_resb     " Data object with current value
             exp                  =  it_norm_resb_exp
             msg                  =  lv_msg ).         " Data object with expected type
        ENDIF.
      CATCH cx_ecatt_tdc_access.
    ENDTRY.

  ENDMETHOD.

*  METHOD execute_preread_bdbs.
*
*    DATA: iv_granularity   TYPE cl_atp_pac_db_transactional=>ty_granularity,
*          ct_norm_vbbe     TYPE if_atp_pac_db_select=>tt_norm_vbbe,
*          it_norm_vbbe_exp TYPE if_atp_pac_db_select=>tt_norm_vbbe,
*          it_bdbs          TYPE arun_tt_bdbstab,
*          mt_bdbs_exp      type arun_tt_bdbstab,
*          it_norm_vbbe     TYPE if_atp_pac_db_select=>tt_norm_vbbe,
*          lv_msg           TYPE string.
*
*    DATA: lt_range  TYPE if_atp_pac_db_select=>tt_werks_matnr_range.
*    TRY.
*        CALL METHOD cl_apl_ecatt_tdc_api=>get_instance
*          EXPORTING
*            i_testdatacontainer         = mc_tdc_preread_bdbs
*            i_write_access              = abap_true
*            i_testdatacontainer_version = '01'
*          RECEIVING
*            e_tdc_ref                   = DATA(lo_tdc).
*
*        IF lo_tdc IS BOUND.
*          lo_tdc->get_value(
*            EXPORTING
*              i_param_name        = 'IT_RANGE'      " Parameter Name
*              i_variant_name      = iv_variant     " Variant Name
*            CHANGING
*              e_param_value       = lt_range        " Variable to which the Value should be Transferred
*          ).
*
*          lo_tdc->get_value(
*             EXPORTING
*               i_param_name        = 'MT_BDBS_EXP'    " Parameter Name
*               i_variant_name      = iv_variant     " Variant Name
*             CHANGING
*               e_param_value       = mt_bdbs_exp    " Variable to which the Value should be Transferred
*          ).
*
*          f_cut->mt_bdbs = mt_bdbs .
*          DATA lo_arun_deallocation_bop TYPE REF TO cl_arun_deallocation_bop.
*
*          cl_arun_deallocation=>mv_order_dealoc = abap_true.
*
*          lo_arun_deallocation_bop ?= cl_arun_atp_controller=>get_instance(
*          )->get_arun_dealloc( ).
*
*          CALL METHOD f_cut->if_atp_pac_select_bdbs~preread_bdbs
*            EXPORTING
*              it_range = lt_range .
*
*          lv_msg = |'Execution of '{ iv_variant } 'is failed'|.
*          cl_abap_unit_assert=>assert_equals(
*           EXPORTING
*             act                  =  mt_bdbs           " Data object with current value
*             exp                  =  mt_bdbs_exp
*             msg                  =  lv_msg ).         " Data object with expected type
*        ENDIF.
*      CATCH cx_ecatt_tdc_access.
*    ENDTRY.
*
*  ENDMETHOD.


ENDCLASS.