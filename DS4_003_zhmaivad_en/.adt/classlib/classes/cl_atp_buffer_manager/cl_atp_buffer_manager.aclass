class CL_ATP_BUFFER_MANAGER definition
  public
  create public .

public section.

  types:
    tt_t441v TYPE STANDARD TABLE OF t441v WITH DEFAULT KEY .
  types:
    tt_mverf TYPE STANDARD TABLE OF v03v_mverf_pos .
  types:
    BEGIN OF ty_buffered_field,
        fieldname TYPE name_feld,
      END OF ty_buffered_field .
  types:
    tt_buffered_field TYPE HASHED TABLE OF ty_buffered_field WITH UNIQUE KEY fieldname .
  types:
    BEGIN OF ty_registree,
        registree      TYPE REF TO if_atp_data_consumable,
        buffered_field TYPE tt_buffered_field,
      END OF ty_registree .

  class-methods GET_ADDRESS_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ALTV_CONSDTN_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ATPMAT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ATPPLANT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ATP_STOR_LOC_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_BATCH_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_BATCH_CROSSPLANT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_BUILDING_RULE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_BUSINESS_DATA_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_CUSTOMER_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_DOCUMENT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_EKKO_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_EKPO_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_EKPV_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ELIGIBLE_PLANT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ITEM_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_KNVV_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
*    TYPES:
*      BEGIN OF ty_buffername,
*        buffername TYPE tabname,
*      END OF ty_buffername.
*    TYPES tt_buffername TYPE HASHED TABLE OF ty_buffername WITH UNIQUE KEY buffername.
  class-methods GET_LIVECACHE_TS_ACTIVE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_KEY_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_TQA2DOC_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_TQA_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_TQA_DOC_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_TQA_HEAD_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_PAC_TQA_POS_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ALL_PAC_TQA_BUFFERS
    exporting
      !EO_TQA_POS_BUFFER type ref to IF_ATP_BUFFER
      !EO_TQA_DOC_BUFFER type ref to IF_ATP_BUFFER
      !EO_TQA2DOC_BUFFER type ref to IF_ATP_BUFFER
      !EO_TQA_HEAD_BUFFER type ref to IF_ATP_BUFFER .
  class-methods GET_PARTNER_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SALESORG_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SCHEDULELINE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SOT_CONDITION_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SOT_CRITERION_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SOT_DEFINITION_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_STO_CUSTOMER_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SUBSTN_METHOD_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SUBSTN_SOURCE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_SUBSTN_STRGY_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_T001W_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_ATP_ENH_CHK_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_T441V_DATA_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_TMVF_DATA_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBAK_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBAP_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VC_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBAP_DB_STATE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBEP_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBEP_DB_STATE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods REGISTER
    importing
      !IS_REGISTREE type TY_REGISTREE
      !IV_BUFFERNAME type TABNAME .
  class-methods RESET_ALL_BUFFER .
  class-methods RESET_ORDER_DATA_BUFFER .
  class-methods SET_ORDER_DATA
    importing
      !IS_HEADER type VBAK optional
      !IS_ITEM type VBAP optional
      !IT_BUSINESS_DATA type IF_ATP_DATA_ACCESS=>TT_BUSINESS_DATA optional
      !IT_SCHEDULELINE type IF_ATP_DATA_ACCESS=>TT_EXT_SO_SCHEDULELINE_DATA optional
      !IS_STO_HEADER type EKKO optional
      !IS_STO_ITEM type EKPO optional
      !IS_STO_SHIPPING_DATA type EKPV optional
      !IT_STO_SCHEDULELINE type IF_ATP_DATA_ACCESS=>TT_STO_SCHEDULELINE optional
      !IT_MVERF type TT_MVERF optional .
  class-methods SET_BOP_ORDER_DATA
    importing
      !IT_ORDER_DATA type TBL_ATP_BOP_ORDER_DATA .
  class-methods SET_PAC_KEY_DATA
    importing
      !IT_SCHED_PAC_KEY type IF_ATP_ABC_DATA_ACCESS=>TT_SCHED_PAC_KEY .
*      !IT_PARTNER_DATA type IF_ATP_DATA_ACCESS=>TT_PARTNER_DATA
  class-methods SET_PARTNER_DATA
    importing
      !IT_PARTNER_DATA type IF_ATP_DATA_ACCESS=>TTSK_PARTNER_DATA
      !IV_ORDER_ID type VBELN optional
      !IV_ITEM_ID type POSNR optional .
  class-methods SYNCHRONIZE_BUFFERS_4_RECHECK .
  class-methods UNREGISTER
    importing
      !IO_REGISTREE type ref to IF_ATP_DATA_CONSUMABLE .
  class-methods GET_TVAP_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_VBAP_SALES_DB_STATE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER_READ_ONLY .
  class-methods GET_VBAP_DELVY_DB_STATE_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER_READ_ONLY .
  class-methods GET_STORAGE_LOCATION_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_MAT_STOR_LOC_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_RMNG_QTY_ASSGMT_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
  class-methods GET_CHK_CONTROL_CUST_BUFFER
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER .
private section.

  types:
    tt_registree TYPE SORTED TABLE OF ty_registree WITH UNIQUE KEY registree .
  types:
    BEGIN OF ty_buf,
        tbl       TYPE tabname,
        buffer    TYPE REF TO if_atp_buffer_read_only,
        registree TYPE tt_registree,
      END OF ty_buf .
  types:
    tt_buf TYPE HASHED TABLE OF ty_buf WITH UNIQUE KEY tbl .

  constants LC_DOCUMENT type TABNAME value 'DOCUMENT' ##NO_TEXT.
  constants LC_ITEM type TABNAME value 'ITEM' ##NO_TEXT.
  constants LC_SCHEDULELINE type TABNAME value 'SCHEDULELINE' ##NO_TEXT.
  constants LC_VBAP_DB_STATE type TABNAME value 'VBAP_DB_STATE' ##NO_TEXT.
  constants LC_VBEP_DB_STATE type TABNAME value 'VBEP_DB_STATE' ##NO_TEXT.
  class-data MT_BUFFER type TT_BUF .
  constants GC_VBAP_SALES_BUF_DB_STATE type TABNAME value 'VBAP_SALES_DB_STATE' ##NO_TEXT.
  constants GC_VBAP_DELVY_BUF_DB_STATE type TABNAME value 'VBAP_DELVY_DB_STATE' ##NO_TEXT.
  constants GC_VBAP_SALES_BUF_CURRENT type TABNAME value 'VBAP_SALES_CURRENT' ##NO_TEXT.

  class-methods GET_BUFFER
    importing
      !IV_BUFFERNAME type TABNAME
    returning
      value(RO_BUFFER) type ref to IF_ATP_BUFFER_READ_ONLY .
  class-methods REMEMBER_BUFFER
    importing
      !IO_BUFFER type ref to IF_ATP_BUFFER_READ_ONLY
      !IV_BUFFERNAME type TABNAME .
ENDCLASS.



CLASS CL_ATP_BUFFER_MANAGER IMPLEMENTATION.


  METHOD get_sot_condition_buffer.
    CONSTANTS lc_sot_condition TYPE tabname VALUE 'ATPSOTCRITCNDN'.

    ro_buffer ?= get_buffer( iv_buffername = lc_sot_condition ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_sot_condition_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_sot_condition ).
    ENDIF.
  ENDMETHOD.


  METHOD get_sot_criterion_buffer.
    CONSTANTS lc_sot_critrn TYPE tabname VALUE 'ATPSOTCRITDEF'.

    ro_buffer ?= get_buffer( iv_buffername = lc_sot_critrn ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_sot_criterion_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_sot_critrn ).
    ENDIF.
  ENDMETHOD.


  METHOD get_sot_definition_buffer.
    CONSTANTS lc_sot_def TYPE tabname VALUE 'ATPSOTDEF'.

    ro_buffer ?= get_buffer( iv_buffername = lc_sot_def ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_sot_definition_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_sot_def ).
    ENDIF.
  ENDMETHOD.


  METHOD get_storage_location_buffer.
    CONSTANTS lc_storage_location TYPE tabname VALUE 'T001L'.

    ro_buffer ?= get_buffer( iv_buffername = lc_storage_location ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_storage_location_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_storage_location ).
    ENDIF.
  ENDMETHOD.


  METHOD get_sto_customer_buffer.
    CONSTANTS lc_sto_cust TYPE tabname VALUE 'STO_CUST'.
    ro_buffer ?= get_buffer( iv_buffername = lc_sto_cust ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_sto_customer_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_sto_cust ).
    ENDIF.
  ENDMETHOD.


  METHOD get_substn_method_buffer.
    CONSTANTS lc_substn_method TYPE tabname VALUE 'ABCSUBMETHOD'.

    ro_buffer ?= get_buffer( iv_buffername = lc_substn_method ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_substn_method_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_substn_method ).
    ENDIF.
  ENDMETHOD.


  METHOD get_substn_source_buffer.
    CONSTANTS lc_substn_source TYPE tabname VALUE 'ABCSUBMETHSRC'.

    ro_buffer ?= get_buffer( iv_buffername = lc_substn_source ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_substn_source_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_substn_source ).
    ENDIF.
  ENDMETHOD.


  METHOD get_substn_strgy_buffer.
    CONSTANTS lc_substnstrgy TYPE tabname VALUE 'ABCSUBSTNSTRGY'.

    ro_buffer ?= get_buffer( iv_buffername = lc_substnstrgy ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_substn_strgy_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_substnstrgy ).
    ENDIF.
  ENDMETHOD.


  METHOD get_t001w_buffer.
    CONSTANTS lc_t001w TYPE tabname VALUE 'T001W'.

    ro_buffer ?= get_buffer( iv_buffername = lc_t001w ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_t001w_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_t001w ).
    ENDIF.
  ENDMETHOD.


  METHOD get_t441v_data_buffer.
    CONSTANTS lc_t441v TYPE tabname VALUE 'T441V'.

    ro_buffer ?= get_buffer( iv_buffername = lc_t441v ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_t441v_data_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_t441v ).
    ENDIF.
  ENDMETHOD.


  METHOD get_tmvf_data_buffer.
    CONSTANTS lc_tmvf TYPE tabname VALUE 'TMVF'.

    ro_buffer ?= get_buffer( iv_buffername = lc_tmvf ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_tmvf_data_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_tmvf ).
    ENDIF.
  ENDMETHOD.


  METHOD get_tvap_buffer.
    CONSTANTS lc_tvap TYPE tabname VALUE 'TVAP'.

    ro_buffer ?= get_buffer( iv_buffername = lc_tvap ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_tvap_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_tvap ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbak_buffer.
    CONSTANTS lc_vbak TYPE tabname VALUE 'VBAK'.
    ro_buffer ?= get_buffer( iv_buffername = lc_vbak ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vbak_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbak ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbap_buffer.
    CONSTANTS lc_vbap TYPE tabname VALUE 'VBAP'.

    ro_buffer ?= get_buffer( iv_buffername = lc_vbap ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vbap_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbap ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbap_db_state_buffer.
    ro_buffer ?= get_buffer( iv_buffername = lc_vbap_db_state ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vbap_db_state_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbap_db_state ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbap_delvy_db_state_buffer.
    ro_buffer ?= get_buffer( iv_buffername = gc_vbap_delvy_buf_db_state ).
    IF ro_buffer IS INITIAL.
      ro_buffer ?= NEW cl_atp_delvy_buffer_item( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = gc_vbap_delvy_buf_db_state ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbap_sales_db_state_buffer.
    ro_buffer ?= get_buffer( iv_buffername = gc_vbap_sales_buf_db_state ).
    IF ro_buffer IS INITIAL.
      ro_buffer ?= cl_atp_buffer_factory=>create_vbap_sls_db_state_buf( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = gc_vbap_sales_buf_db_state ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbep_buffer.
    CONSTANTS lc_vbep TYPE tabname VALUE 'VBEP'.

    ro_buffer ?= get_buffer( iv_buffername = lc_vbep ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vbep_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbep ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vbep_db_state_buffer.
    ro_buffer ?= get_buffer( iv_buffername = lc_vbep_db_state ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vbep_db_state_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbep_db_state ).
    ENDIF.
  ENDMETHOD.


  METHOD get_vc_buffer.
    CONSTANTS lc_vc TYPE tabname VALUE 'VC'.

    ro_buffer ?= get_buffer( iv_buffername = lc_vc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_vc_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vc ).
    ENDIF.
  ENDMETHOD.


  METHOD register.
    READ TABLE mt_buffer ASSIGNING FIELD-SYMBOL(<ls_buffer>) WITH KEY tbl = iv_buffername.
    IF sy-subrc = 0.
      READ TABLE <ls_buffer>-registree TRANSPORTING NO FIELDS WITH KEY registree = is_registree-registree.
      IF sy-subrc <> 0.
        INSERT is_registree INTO TABLE <ls_buffer>-registree.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD remember_buffer.
    INSERT VALUE #( tbl    = iv_buffername
                    buffer = io_buffer ) INTO TABLE mt_buffer.
  ENDMETHOD.


  METHOD reset_all_buffer.
    CLEAR mt_buffer.
  ENDMETHOD.


  METHOD reset_order_data_buffer.
    DELETE mt_buffer WHERE tbl = lc_document OR
                           tbl = lc_item OR
                           tbl = lc_scheduleline.
  ENDMETHOD.


  METHOD set_bop_order_data.

     cl_atp_order_data_buffr_setter=>set_bop_order_data( it_order_data = it_order_data ).

  ENDMETHOD.


  METHOD set_order_data.

    IF is_header        IS NOT INITIAL OR
       is_item          IS NOT INITIAL OR
       it_business_data IS NOT INITIAL OR
       it_scheduleline  IS NOT INITIAL OR
       it_mverf         IS NOT INITIAL.

      cl_atp_order_data_buffr_setter=>set_sales_order_data(
          is_header            = is_header
          is_item              = is_item
          it_business_data     = it_business_data
          it_scheduleline      = it_scheduleline
          it_mverf             = it_mverf
      ).

    ENDIF.

    IF is_sto_header        IS NOT INITIAL OR
       is_sto_item          IS NOT INITIAL OR
       is_sto_shipping_data IS NOT INITIAL OR
       it_sto_scheduleline  IS NOT INITIAL.

      cl_atp_order_data_buffr_setter=>set_stock_transport_order_data(
          is_sto_header        = is_sto_header
          is_sto_item          = is_sto_item
          is_sto_shipping_data = is_sto_shipping_data
          it_sto_scheduleline  = it_sto_scheduleline
      ).

    ENDIF.

  ENDMETHOD.


  METHOD set_pac_key_data.

    DATA(lo_pac_key_buffer) = cl_atp_buffer_manager=>get_pac_key_buffer( ).
    lo_pac_key_buffer->set( it_data = it_sched_pac_key ).

  ENDMETHOD.


  METHOD set_partner_data.

    DATA lo_partner_buffer TYPE REF TO if_atp_buffer.
    DATA lt_partner_data TYPE if_atp_data_access=>ttsk_partner_data.
    DATA ls_partner_data LIKE LINE OF lt_partner_data.

    lo_partner_buffer = cl_atp_buffer_manager=>get_partner_buffer( ).

    IF iv_order_id IS NOT SUPPLIED OR iv_item_id IS NOT SUPPLIED.

      lo_partner_buffer->set( it_data = it_partner_data ).

    ELSE.

      LOOP AT it_partner_data ASSIGNING FIELD-SYMBOL(<ls_partner_data>).
        ls_partner_data = <ls_partner_data>.
        ls_partner_data-vbeln = iv_order_id.
        ls_partner_data-posnr = iv_item_id.
        INSERT ls_partner_data INTO TABLE lt_partner_data.
      ENDLOOP.

      lo_partner_buffer->set( it_data = lt_partner_data ).

    ENDIF.

  ENDMETHOD.


  METHOD synchronize_buffers_4_recheck.

    DATA(lo_vbap_buffer) = cl_atp_buffer_manager=>get_vbap_buffer( ).
    DATA(lo_item_buffer) = cl_atp_buffer_manager=>get_item_buffer( ).

    remember_buffer( io_buffer     = lo_item_buffer
                     iv_buffername = lc_vbap_db_state ).

  ENDMETHOD.


  METHOD unregister.
    DATA lt_buffer_to_be_deleted TYPE HASHED TABLE OF tabname WITH UNIQUE DEFAULT KEY.
    DATA lv_lines TYPE byte.

    LOOP AT mt_buffer ASSIGNING FIELD-SYMBOL(<ls_buffer>).
      lv_lines = lines( <ls_buffer>-registree ).
      READ TABLE <ls_buffer>-registree WITH KEY registree = io_registree TRANSPORTING NO FIELDS.
      IF 0 = sy-subrc AND
         1 = lv_lines .
        INSERT <ls_buffer>-tbl INTO TABLE lt_buffer_to_be_deleted.
      ELSEIF 0 = sy-subrc.
        DELETE <ls_buffer>-registree INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_buffer_to_be_deleted ASSIGNING FIELD-SYMBOL(<ls_buffername>).
      DELETE mt_buffer WHERE tbl = <ls_buffername>.
    ENDLOOP.
  ENDMETHOD.


  METHOD get_scheduleline_buffer.
    ro_buffer ?= get_buffer( iv_buffername = lc_scheduleline ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_scheduleline_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_scheduleline ).
    ENDIF.
  ENDMETHOD.


  METHOD get_address_buffer.
    CONSTANTS lc_adrc TYPE tabname VALUE 'ADRC'.
    ro_buffer ?= get_buffer( iv_buffername = lc_adrc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_address_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_adrc ).
    ENDIF.
  ENDMETHOD.


  METHOD get_all_pac_tqa_buffers.
    CONSTANTS lc_pac_tqa_pos TYPE tabname VALUE 'PAC_TQA'.
    eo_tqa_pos_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_pos ).
    IF eo_tqa_pos_buffer IS INITIAL.
      eo_tqa_pos_buffer = cl_atp_buffer_factory=>create_pac_tqa_pos_buffer( ).
      remember_buffer( io_buffer = eo_tqa_pos_buffer iv_buffername = lc_pac_tqa_pos ).
    ENDIF.

    CONSTANTS lc_pac_tqa_doc TYPE tabname VALUE 'PAC_TQA_DOC'.
    eo_tqa_doc_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_doc ).
    IF eo_tqa_doc_buffer IS INITIAL.
      eo_tqa_doc_buffer = cl_atp_buffer_factory=>create_pac_tqa_doc_buffer( ).
      remember_buffer( io_buffer = eo_tqa_doc_buffer iv_buffername = lc_pac_tqa_doc ).
    ENDIF.

    CONSTANTS lc_pac_tqa2doc TYPE tabname VALUE 'PAC_TQA2DOC'.
    eo_tqa2doc_buffer ?= get_buffer( iv_buffername = lc_pac_tqa2doc ).
    IF eo_tqa2doc_buffer IS INITIAL.
      eo_tqa2doc_buffer = cl_atp_buffer_factory=>create_pac_tqa2doc_buffer( ).
      remember_buffer( io_buffer = eo_tqa2doc_buffer iv_buffername = lc_pac_tqa2doc ).
    ENDIF.

    CONSTANTS lc_pac_tqa_head TYPE tabname VALUE 'PAC_TQA_HEAD'.
    eo_tqa_head_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_head ).
    IF eo_tqa_head_buffer IS INITIAL.
      eo_tqa_head_buffer = cl_atp_buffer_factory=>create_pac_tqa_head_buffer( ).
      remember_buffer( io_buffer = eo_tqa_head_buffer iv_buffername = lc_pac_tqa_head ).
    ENDIF.

  ENDMETHOD.


  METHOD get_altv_consdtn_buffer.
    CONSTANTS lc_altv_consdtn TYPE tabname VALUE 'ABCALTCNSDCNTX'.

    ro_buffer ?= get_buffer( iv_buffername = lc_altv_consdtn ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_altv_consdtn_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_altv_consdtn ).
    ENDIF.
  ENDMETHOD.


  METHOD get_atpmat_buffer.
    CONSTANTS lc_atpmat TYPE tabname VALUE 'TBL_ATPMAT_SORTED'.

    ro_buffer ?= get_buffer( iv_buffername = lc_atpmat ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_atpmat_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_atpmat ).
    ENDIF.
  ENDMETHOD.


  METHOD get_atpplant_buffer.
    CONSTANTS lc_atpplant TYPE tabname VALUE 'TBL_ATPPLANT'.

    ro_buffer ?= get_buffer( iv_buffername = lc_atpplant ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_atpplant_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_atpplant ).
    ENDIF.
  ENDMETHOD.


  METHOD get_batch_buffer.
    CONSTANTS lc_mcha TYPE tabname VALUE 'MCHA'.

    ro_buffer ?= get_buffer( iv_buffername = lc_mcha ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_batch_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_mcha ).
    ENDIF.
  ENDMETHOD.


  METHOD get_batch_crossplant_buffer.
    CONSTANTS lc_mch1 TYPE tabname VALUE 'MCH1'.

    ro_buffer ?= get_buffer( iv_buffername = lc_mch1 ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_batch_crossplant_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_mch1 ).
    ENDIF.
  ENDMETHOD.


  METHOD get_buffer.
    DATA ls_buffer LIKE LINE OF mt_buffer.
    READ TABLE mt_buffer INTO ls_buffer WITH KEY tbl = iv_buffername.
    IF sy-subrc = 0.
      ro_buffer = ls_buffer-buffer.
      RETURN.
    ENDIF.
  ENDMETHOD.


  METHOD get_building_rule_buffer.
    CONSTANTS lc_buildingrule TYPE tabname VALUE 'ATP_ABC_BUILDING_RULE_DB'.

    ro_buffer ?= get_buffer( iv_buffername = lc_buildingrule ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_building_rule_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_buildingrule ).
    ENDIF.
  ENDMETHOD.


  METHOD get_business_data_buffer.
    CONSTANTS lc_vbkd TYPE tabname VALUE 'VBKD'.

    ro_buffer ?= get_buffer( iv_buffername = lc_vbkd ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_business_data_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbkd ).
    ENDIF.
  ENDMETHOD.


  METHOD get_chk_control_cust_buffer.
    CONSTANTS lc_chk_control_cust_buffer TYPE tabname VALUE 'CHK_CONTROL_CUST_BUFFER'.
    ro_buffer ?= get_buffer( iv_buffername = lc_chk_control_cust_buffer ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_chk_control_cust_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_chk_control_cust_buffer ).
    ENDIF.
  ENDMETHOD.


  METHOD get_customer_buffer.
    CONSTANTS lc_kna1 TYPE tabname VALUE 'KNA1'.
    ro_buffer ?= get_buffer( iv_buffername = lc_kna1 ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_customer_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_kna1 ).
    ENDIF.
  ENDMETHOD.


  METHOD get_document_buffer.
    ro_buffer ?= get_buffer( iv_buffername = lc_document ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_document_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_document ).
    ENDIF.
  ENDMETHOD.


  METHOD get_ekko_buffer.
    CONSTANTS lc_ekko TYPE tabname VALUE 'EKKO'.
    ro_buffer ?= get_buffer( iv_buffername = lc_ekko ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_ekko_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_ekko ).
    ENDIF.
  ENDMETHOD.


  METHOD get_ekpo_buffer.
    CONSTANTS lc_ekpo TYPE tabname VALUE 'EKPO'.
    ro_buffer ?= get_buffer( iv_buffername = lc_ekpo ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_ekpo_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_ekpo ).
    ENDIF.
  ENDMETHOD.


  METHOD get_ekpv_buffer.
    CONSTANTS lc_ekpv TYPE tabname VALUE 'EKPV'.
    ro_buffer ?= get_buffer( iv_buffername = lc_ekpv ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_ekpv_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_ekpv ).
    ENDIF.
  ENDMETHOD.


  METHOD get_eligible_plant_buffer.
    CONSTANTS lc_eligible_plant TYPE tabname VALUE 'ELIGIBLE_PLANT'.

    ro_buffer ?= get_buffer( iv_buffername = lc_eligible_plant ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_eligible_plant_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_eligible_plant ).
    ENDIF.
  ENDMETHOD.


  METHOD get_item_buffer.
    ro_buffer ?= get_buffer( iv_buffername = lc_item ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_item_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_item ).
    ENDIF.
  ENDMETHOD.


  METHOD get_knvv_buffer.
    CONSTANTS lc_knvv TYPE tabname VALUE 'KNVV'.
    ro_buffer ?= get_buffer( iv_buffername = lc_knvv ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_knvv_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_knvv ).
    ENDIF.
  ENDMETHOD.


  METHOD get_livecache_ts_active_buffer.
    CONSTANTS lc_lc_active_status TYPE tabname VALUE 'LC_ACT_STATUS'.
    ro_buffer ?= get_buffer( iv_buffername = lc_lc_active_status ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_lc_ts_active_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_lc_active_status ).
    ENDIF.
  ENDMETHOD.


  METHOD get_mat_stor_loc_buffer.
    CONSTANTS lc_mat_stor_loc TYPE tabname VALUE 'MARD'.

    ro_buffer ?= get_buffer( iv_buffername = lc_mat_stor_loc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_mat_stor_loc_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_mat_stor_loc ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_key_buffer.
    CONSTANTS lc_pac_key TYPE tabname VALUE 'PAC_KEY'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_key ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_key_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_key ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_tqa2doc_buffer.
    CONSTANTS lc_pac_tqa2doc TYPE tabname VALUE 'PAC_TQA2DOC'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_tqa2doc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_tqa2doc_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_tqa2doc ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_tqa_buffer.
    CONSTANTS lc_pac_tqa TYPE tabname VALUE 'TQA_PAC'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_tqa ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_tqa_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_tqa ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_tqa_doc_buffer.
    CONSTANTS lc_pac_tqa_doc TYPE tabname VALUE 'PAC_TQA_DOC'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_doc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_tqa_doc_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_tqa_doc ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_tqa_head_buffer.
    CONSTANTS lc_pac_tqa_head TYPE tabname VALUE 'PAC_TQA_HEAD'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_head ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_tqa_head_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_tqa_head ).
    ENDIF.
  ENDMETHOD.


  METHOD get_pac_tqa_pos_buffer.
    CONSTANTS lc_pac_tqa_pos TYPE tabname VALUE 'PAC_TQA'.
    ro_buffer ?= get_buffer( iv_buffername = lc_pac_tqa_pos ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_pac_tqa_pos_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_pac_tqa_pos ).
    ENDIF.
  ENDMETHOD.


  METHOD get_partner_buffer.
    CONSTANTS lc_vbpa TYPE tabname VALUE 'VBPA'.

    ro_buffer ?= get_buffer( iv_buffername = lc_vbpa ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_partner_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_vbpa ).
    ENDIF.
  ENDMETHOD.


  METHOD get_rmng_qty_assgmt_buffer.
    CONSTANTS lc_rmng_qty_assgmt TYPE tabname VALUE 'ABCRGQTYASSGMT'.

    ro_buffer ?= get_buffer( iv_buffername = lc_rmng_qty_assgmt ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_rmng_qty_assgmt_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_rmng_qty_assgmt ).
    ENDIF.
  ENDMETHOD.


  METHOD get_salesorg_buffer.
    CONSTANTS lc_tvko TYPE tabname VALUE 'TVKO'.
    ro_buffer ?= get_buffer( iv_buffername = lc_tvko ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_tvko_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_tvko ).
    ENDIF.
  ENDMETHOD.


  METHOD GET_ATP_ENH_CHK_BUFFER.
    CONSTANTS lc_atp_enh_chk TYPE tabname VALUE 'ATP_ENH_CHK'.

    ro_buffer ?= get_buffer( iv_buffername = lc_atp_enh_chk ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_atp_enh_chk_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_atp_enh_chk ).
    ENDIF.
  ENDMETHOD.


  METHOD GET_ATP_STOR_LOC_BUFFER.
    CONSTANTS lc_atp_storage_loc TYPE tabname VALUE 'TBL_ATP_STORAGE_LOCATION'.

    ro_buffer ?= get_buffer( iv_buffername = lc_atp_storage_loc ).
    IF ro_buffer IS INITIAL.
      ro_buffer = cl_atp_buffer_factory=>create_atp_stor_loc_buffer( ).
      remember_buffer( io_buffer = ro_buffer iv_buffername = lc_atp_storage_loc ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.