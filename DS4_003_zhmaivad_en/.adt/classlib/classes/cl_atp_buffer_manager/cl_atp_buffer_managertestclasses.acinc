CLASS ltd_consumer DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PUBLIC SECTION.
    INTERFACES if_atp_data_consumable PARTIALLY IMPLEMENTED.
ENDCLASS.

CLASS ltd_consumer IMPLEMENTATION.
ENDCLASS.


CLASS ltc_atp_buffer_mngr DEFINITION DEFERRED.
CLASS cl_atp_buffer_manager DEFINITION LOCAL FRIENDS ltc_atp_buffer_mngr.
CLASS ltc_atp_buffer_mngr DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PRIVATE SECTION.
    CLASS-DATA:
        environment TYPE REF TO if_osql_test_environment.

    CLASS-METHODS:
      class_setup,
      class_teardown.


    DATA:
      f_cut                   TYPE REF TO cl_atp_buffer_manager.

    METHODS:
      setup,
      teardown,
      remember_and_get_buffer FOR TESTING,
      buffer_getter FOR TESTING,
      fill_partner_data FOR TESTING,
      fill_pac_key_data FOR TESTING,
      fill_sd_header_data FOR TESTING,
      fill_sd_item_data FOR TESTING,
      fill_business_data FOR TESTING,
      fill_tmvf_data FOR TESTING,
      fill_t441v_data FOR TESTING,
      fill_sto_header_data FOR TESTING,
      fill_sto_item_data FOR TESTING,
      fill_sto_shipping_data FOR TESTING,
      fill_sto_customer_data FOR TESTING,
      register_without_fields FOR TESTING,
      register_with_fields FOR TESTING,
      register_without_buffer_avail FOR TESTING,
      unregister_last_registered FOR TESTING,
      unregister_one_of_registree FOR TESTING,
      vbap_key_structure FOR TESTING,
      vbap_secondary_structure FOR TESTING,
      fill_bop_order_data FOR TESTING.


ENDCLASS.


CLASS ltc_atp_buffer_mngr IMPLEMENTATION.

  METHOD class_setup.

*-->Create doubles for database dependencies of the class
    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'kna1' )
                                                                                 ( 'adrc' ) )  ).
  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.

  METHOD setup.
    environment->clear_doubles( ).
  ENDMETHOD.


  METHOD teardown.
    cl_atp_buffer_manager=>reset_all_buffer( ).
  ENDMETHOD.

  METHOD remember_and_get_buffer.
* Check if buffer instance is remembered.
    DATA(lo_buff1) = cl_atp_buffer_manager=>get_vbak_buffer( ).
    DATA(lo_buff2) = cl_atp_buffer_manager=>get_vbak_buffer( ).

    cl_aunit_assert=>assert_equals( act = lo_buff1 exp = lo_buff2 ).
  ENDMETHOD.

  METHOD buffer_getter.
* Check all buffer returning methods if they return a valid object.
    DATA lo_buffer TYPE REF TO if_atp_buffer.
    f_cut = NEW cl_atp_buffer_manager( ).
    SELECT * FROM seocompo INTO TABLE @DATA(lt_methods) WHERE cmptype = 1 AND mtdtype = 0 AND clsname = 'CL_ATP_BUFFER_MANAGER' AND cmpname LIKE 'GET_%'.
    DELETE lt_methods WHERE cmpname = 'GET_BUFFER'.
    DELETE lt_methods WHERE cmpname = 'GET_ALL_PAC_TQA_BUFFERS'.
    DELETE lt_methods WHERE cmpname = 'GET_VBAP_SALES_DB_STATE_BUFFER'.
    DELETE lt_methods WHERE cmpname = 'GET_VBAP_DELVY_DB_STATE_BUFFER'.
    DELETE lt_methods WHERE cmpname = 'GET_ITEM_DATA_FROM_VBAP'.
    LOOP AT lt_methods INTO DATA(ls_method).
      CALL METHOD f_cut->(ls_method-cmpname)
        RECEIVING
          ro_buffer = lo_buffer.
      cl_aunit_assert=>assert_bound( act = lo_buffer ).
    ENDLOOP.
  ENDMETHOD.

  METHOD fill_partner_data.
    DATA lt_partner_data TYPE if_atp_data_access=>ttsk_partner_data.
    DATA ls_partner_data LIKE LINE OF lt_partner_data.

* Set test data
    ls_partner_data-vbeln = '1'.
    ls_partner_data-posnr = 1.
    ls_partner_data-parvw = 1.
    ls_partner_data-kunnr = 'ABC'.
    INSERT ls_partner_data INTO TABLE lt_partner_data.

* Call method under test
    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner_data )
    ).

    CLEAR ls_partner_data.
    ls_partner_data-vbeln = '2'.
    ls_partner_data-posnr = 1.
    ls_partner_data-parvw = 1.
    ls_partner_data-kunnr = 'XYZ'.
    INSERT ls_partner_data INTO TABLE lt_partner_data.

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner_data )
    ).

* Check if entries are in buffer
    DATA(lo_partner_buffer) = cl_atp_buffer_manager=>get_partner_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_partner_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).


    ASSIGN lr_query->* TO <ls_query>.
    LOOP AT lt_partner_data INTO ls_partner_data.
      <ls_query> = ls_partner_data.
      cl_aunit_assert=>assert_equals( exp = abap_true act = lo_partner_buffer->has( is_data = lr_query ) ).
    ENDLOOP.

  ENDMETHOD.

  METHOD fill_business_data.
    DATA lt_business_data TYPE TABLE OF vbkdvb.
    DATA ls_business_data LIKE LINE OF lt_business_data.

* Set test data
    ls_business_data-vbeln = 1.
    ls_business_data-posnr = 1.
    ls_business_data-kdgrp = 88.
    ls_business_data-bzirk = 'ABC'.
    INSERT ls_business_data INTO TABLE lt_business_data.
    ls_business_data-vbeln = 2.
    ls_business_data-posnr = 1.
    ls_business_data-kdgrp = 99.
    ls_business_data-bzirk = 'XYZ'.
    INSERT ls_business_data INTO TABLE lt_business_data.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( it_business_data = lt_business_data ).

* Check if entries are in buffer
    DATA(lo_business_data_buffer) = cl_atp_buffer_manager=>get_business_data_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_business_data_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    LOOP AT lt_business_data INTO ls_business_data.
      <ls_query> = ls_business_data.
      cl_aunit_assert=>assert_equals( exp = abap_true act = lo_business_data_buffer->has( is_data = lr_query ) ).
    ENDLOOP.

* get specifc key
    DATA ls_business_dat_key TYPE vbkd.
    DATA lt_business_dat_key TYPE TABLE OF vbkd.
    DATA lr_key TYPE REF TO data.
    FIELD-SYMBOLS <lt_key> TYPE any.

    ls_business_dat_key-vbeln = 2.
    ls_business_dat_key-posnr = 1.
    INSERT ls_business_dat_key INTO TABLE lt_business_dat_key.

    lo_business_data_buffer->get_key_table_structure(
      IMPORTING
        er_key_table_structure = lr_key
    ).
    ASSIGN lr_key->* TO <lt_key>.
    <lt_key> = CORRESPONDING #( lt_business_dat_key ).

    lo_business_data_buffer->get(
      EXPORTING
        it_key           = lr_key
      IMPORTING
        et_data          = DATA(lr_data_found_act)
        et_key_not_found = DATA(lr_not_found_act)
    ).
    FIELD-SYMBOLS <lt_not_found_act> TYPE ANY TABLE.
    ASSIGN lr_not_found_act->* TO <lt_not_found_act>.
    cl_aunit_assert=>assert_equals( exp = 0 act = lines( <lt_not_found_act> ) ).
  ENDMETHOD.

  METHOD fill_tmvf_data.
    DATA ls_tmvf_data TYPE tmvf.
    DATA lt_tmvf_data TYPE TABLE OF tmvf.


    lt_tmvf_data = VALUE #( sumau = 'A' sumlf = 'A'
         ( mtvfp = '01' swbzt = 10 acenq = 'X' adv_atp = 'A')
         ( mtvfp = '03' swbzt = 0  acenq = 'X' ) ).

    cl_atp_buffer_manager=>get_tmvf_data_buffer( )->set( it_data = lt_tmvf_data ).

* Check if entries are in buffer
    DATA(lo_tmvf_buffer) = cl_atp_buffer_manager=>get_tmvf_data_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_tmvf_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    LOOP AT lt_tmvf_data INTO ls_tmvf_data.
      <ls_query> = ls_tmvf_data.
      cl_aunit_assert=>assert_equals( exp = abap_true act = lo_tmvf_buffer->has( is_data = lr_query ) ).
    ENDLOOP.
*

  ENDMETHOD.

  METHOD fill_t441v_data.

    DATA lt_t441v_data TYPE cl_atp_buffer_manager=>tt_t441v.
    DATA ls_t441v_data LIKE LINE OF lt_t441v_data.


    lt_t441v_data = VALUE #( eisbp = 'X' umlmp = 'X' bestp = 'X' fertp = 'X' banfp = 'X'
         ( mtvfp = '01' prreg = '01' plafp = 'X')
         ( mtvfp = '03' prreg = '03' skbdp = 'X' ) ).

    cl_atp_buffer_manager=>get_t441v_data_buffer( )->set( it_data = lt_t441v_data ).

* Check if entries are in buffer
    DATA(lo_t441v_buffer) = cl_atp_buffer_manager=>get_t441v_data_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_t441v_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    LOOP AT lt_t441v_data INTO ls_t441v_data.
      <ls_query> = ls_t441v_data.
      cl_aunit_assert=>assert_equals( exp = abap_true act = lo_t441v_buffer->has( is_data = lr_query ) ).
    ENDLOOP.

  ENDMETHOD.



  METHOD fill_pac_key_data.
    DATA lt_pac_key_data TYPE if_atp_abc_data_access=>tt_sched_pac_key.
    DATA ls_pac_key_data LIKE LINE OF lt_pac_key_data.

* Set test data
    ls_pac_key_data-atpcat = 'VC'.
    ls_pac_key_data-delnr = '1'.
    ls_pac_key_data-delps = '10'.
    ls_pac_key_data-subitem = '1'.
    ls_pac_key_data-werks = '0001'.
    INSERT ls_pac_key_data INTO TABLE lt_pac_key_data.

* Call method under test
    cl_atp_buffer_manager=>set_pac_key_data( it_sched_pac_key = lt_pac_key_data ).

* Check if entries are in buffer
    DATA(lo_pac_key_data_buffer) = cl_atp_buffer_manager=>get_pac_key_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_pac_key_data_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    LOOP AT lt_pac_key_data INTO ls_pac_key_data.
      <ls_query> = ls_pac_key_data.
      cl_aunit_assert=>assert_equals( exp = abap_true act = lo_pac_key_data_buffer->has( is_data = lr_query ) ).
    ENDLOOP.

* get specifc key
    DATA ls_sched_key TYPE atp_sched_key.
    DATA lt_sched_key TYPE TABLE OF atp_sched_key.
    DATA lr_key TYPE REF TO data.
    FIELD-SYMBOLS <lt_key> TYPE any.

    ls_sched_key-atpcat = 'VC'.
    ls_sched_key-delnr = '1'.
    ls_sched_key-delps = '10'.
    ls_sched_key-subitem = '1'.
    INSERT ls_sched_key INTO TABLE lt_sched_key.

    lo_pac_key_data_buffer->get_key_table_structure(
      IMPORTING
        er_key_table_structure = lr_key
    ).
    ASSIGN lr_key->* TO <lt_key>.
    <lt_key> = CORRESPONDING #( lt_sched_key ).

    lo_pac_key_data_buffer->get(
      EXPORTING
        it_key           = lr_key
      IMPORTING
        et_data          = DATA(lr_data_found_act)
        et_key_not_found = DATA(lr_not_found_act)
    ).
    FIELD-SYMBOLS <lt_not_found_act> TYPE ANY TABLE.
    FIELD-SYMBOLS <lt_found_act> TYPE ANY TABLE.
    ASSIGN lr_not_found_act->* TO <lt_not_found_act>.
    ASSIGN lr_data_found_act->* TO <lt_found_act>.
    cl_aunit_assert=>assert_equals( exp = 0 act = lines( <lt_not_found_act> ) ).
    cl_aunit_assert=>assert_equals( exp = lt_pac_key_data act = <lt_found_act> ).
  ENDMETHOD.



  METHOD fill_sd_header_data.
    DATA ls_header_data TYPE vbak.

* Set test data
    ls_header_data-vbeln = 1.
    ls_header_data-vbtyp = 'C'.
    ls_header_data-vkorg = 0001.
    ls_header_data-vtweg = 01.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( is_header = ls_header_data ).

* Check if entries are in buffer
    DATA(lo_vbak_buffer) = cl_atp_buffer_manager=>get_vbak_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_vbak_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    <ls_query> = ls_header_data.
    cl_aunit_assert=>assert_equals( exp = abap_true act = lo_vbak_buffer->has( is_data = lr_query ) ).

  ENDMETHOD.

  METHOD fill_sd_item_data.
    DATA ls_item_data TYPE vbap.

* Set test data
    ls_item_data-vbeln = 1.
    ls_item_data-posnr = 20.
    ls_item_data-matnr = 'ABC'.
    ls_item_data-werks = 0001.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( is_item = ls_item_data ).

* Check if entries are in buffer
    DATA(lo_vbap_buffer) = cl_atp_buffer_manager=>get_vbap_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_vbap_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    <ls_query> = ls_item_data.
    cl_aunit_assert=>assert_equals( exp = abap_true act = lo_vbap_buffer->has( is_data = lr_query ) ).

  ENDMETHOD.

  METHOD fill_sto_header_data.
    DATA ls_header_data TYPE ekko.

* Set test data
    ls_header_data-ebeln = 1.
    ls_header_data-bsart = 'S'.
    ls_header_data-bstyp = 'X'.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( is_sto_header = ls_header_data ).

* Check if entries are in buffer
    DATA(lo_ekko_buffer) = cl_atp_buffer_manager=>get_ekko_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_ekko_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    <ls_query> = ls_header_data.
    cl_aunit_assert=>assert_equals( exp = abap_true act = lo_ekko_buffer->has( is_data = lr_query ) ).

  ENDMETHOD.

  METHOD fill_sto_item_data.
    DATA ls_item_data TYPE ekpo.

* Set test data
    ls_item_data-ebeln = 1.
    ls_item_data-ebelp = 10.
    ls_item_data-werks = 0001.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( is_sto_item = ls_item_data ).

* Check if entries are in buffer
    DATA(lo_ekpo_buffer) = cl_atp_buffer_manager=>get_ekpo_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_ekpo_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    <ls_query> = ls_item_data.
    cl_aunit_assert=>assert_equals( exp = abap_true act = lo_ekpo_buffer->has( is_data = lr_query ) ).

  ENDMETHOD.
  METHOD fill_sto_shipping_data.
    DATA ls_shipping_data TYPE ekpv.

* Set test data
    ls_shipping_data-ebeln = 1.
    ls_shipping_data-ebelp = 10.
    ls_shipping_data-kunnr = 'ABC Inc.'.

* Call method under test
    cl_atp_buffer_manager=>set_order_data( is_sto_shipping_data = ls_shipping_data ).

* Check if entries are in buffer
    DATA(lo_ekpv_buffer) = cl_atp_buffer_manager=>get_ekpv_buffer( ).
    DATA lr_query TYPE REF TO data.
    FIELD-SYMBOLS <ls_query> TYPE any.

    lo_ekpv_buffer->get_data_structure(
      IMPORTING
        er_structure = lr_query
    ).

    ASSIGN lr_query->* TO <ls_query>.
    <ls_query> = ls_shipping_data.
    cl_aunit_assert=>assert_equals( exp = abap_true act = lo_ekpv_buffer->has( is_data = lr_query ) ).

  ENDMETHOD.

  METHOD fill_sto_customer_data.
    DATA ls_shipping_data TYPE ekpv.
    DATA ls_item_data TYPE ekpo.
    DATA lt_adrc TYPE TABLE OF adrc.
    DATA lt_kna1 TYPE TABLE OF kna1.

    lt_kna1 = VALUE #( ( kunnr = 'ABC Inc.' adrnr = '1' ) ).
    lt_adrc = VALUE #( ( addrnumber = '1' country = 'DE' region = 'X' ) ).


* Set test data to db
    environment->insert_test_data( i_data = lt_kna1 ).
    environment->insert_test_data( i_data = lt_adrc ).

* Set test data
    ls_shipping_data-ebeln = 1.
    ls_shipping_data-ebelp = 10.
    ls_shipping_data-kunnr = 'ABC Inc.'.

    ls_item_data-ebeln = 1.
    ls_item_data-ebelp = 10.

* Call method under test
    cl_atp_buffer_manager=>set_order_data(
      EXPORTING
        is_sto_item          = ls_item_data
        is_sto_shipping_data = ls_shipping_data ).

* Check if entries are in buffer
    DATA(lo_sto_cust_buffer) = cl_atp_buffer_manager=>get_sto_customer_buffer( ).
    DATA lr_all_data TYPE REF TO data.
    DATA lt_all_data TYPE if_read_order_trans_buffer=>tts_customer.
    DATA lt_data_exp TYPE if_read_order_trans_buffer=>tts_customer.
    FIELD-SYMBOLS <lt_all_data> TYPE any.


    lo_sto_cust_buffer->get_all(
      IMPORTING
        et_data = lr_all_data
    ).

    ASSIGN lr_all_data->* TO <lt_all_data>.
    lt_all_data = CORRESPONDING #( <lt_all_data> ).

    lt_data_exp = VALUE #( ( order_id = 1
                             item_id = 10
                             order_type = if_prodallocordertype_c=>sc_stock_transport
                             customer = 'ABC Inc.'
                             country = 'DE'
                             region = 'X ') ).

    cl_aunit_assert=>assert_equals( exp = lt_data_exp act = lt_all_data ).

  ENDMETHOD.

  METHOD register_without_buffer_avail.
    DATA lo_registree TYPE REF TO if_atp_data_consumable.

    " Test setup
    lo_registree ?= NEW ltd_consumer( ).
*    cl_atp_buffer_manager=>get_vbak_buffer( ). <<--- no buffer created

    " Method under test
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree ) ).

    " Check result
    READ TABLE cl_atp_buffer_manager=>mt_buffer INTO DATA(ls_buffer) WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_subrc( act = sy-subrc
                                   exp = 4 ).
  ENDMETHOD.

  METHOD register_with_fields.
    DATA lt_fields TYPE cl_atp_buffer_manager=>tt_buffered_field.
    DATA lo_registree TYPE REF TO if_atp_data_consumable.

    " Test setup
    lo_registree ?= NEW ltd_consumer( ).
    INSERT VALUE #( fieldname = 'XXX' ) INTO TABLE lt_fields.
    INSERT VALUE #( fieldname = 'XYX' ) INTO TABLE lt_fields.
    cl_atp_buffer_manager=>get_vbak_buffer( ).

    " Method under test
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree buffered_field = lt_fields ) ).

    " Check result
    READ TABLE cl_atp_buffer_manager=>mt_buffer INTO DATA(ls_buffer) WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_bound( act = ls_buffer-buffer ).
    cl_aunit_assert=>assert_equals( act = ls_buffer-registree[ 1 ]-buffered_field
                                    exp = lt_fields ).
    cl_aunit_assert=>assert_bound( act = ls_buffer-registree[ 1 ]-registree ).
  ENDMETHOD.

  METHOD register_without_fields.
    DATA lo_registree TYPE REF TO if_atp_data_consumable.

    " Test setup
    lo_registree ?= NEW ltd_consumer( ).
    cl_atp_buffer_manager=>get_vbak_buffer( ).

    " Method under test
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree ) ).

    " Check result
    READ TABLE cl_atp_buffer_manager=>mt_buffer INTO DATA(ls_buffer) WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_bound( act = ls_buffer-buffer ).
    cl_aunit_assert=>assert_initial( act = ls_buffer-registree[ 1 ]-buffered_field ).
    cl_aunit_assert=>assert_bound( act = ls_buffer-registree[ 1 ]-registree ).
  ENDMETHOD.

  METHOD unregister_last_registered.
    DATA lo_registree TYPE REF TO if_atp_data_consumable.

    " Test setup
    lo_registree ?= NEW ltd_consumer( ).
    cl_atp_buffer_manager=>get_vbak_buffer( ).
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree ) ).

    " Method under test
    cl_atp_buffer_manager=>unregister( io_registree = lo_registree ).

    " Check result
    READ TABLE cl_atp_buffer_manager=>mt_buffer TRANSPORTING NO FIELDS WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_subrc( act = sy-subrc
                                   exp = 4 ).
  ENDMETHOD.

  METHOD unregister_one_of_registree.
    DATA lo_registree TYPE REF TO if_atp_data_consumable.

    " Test setup
    lo_registree ?= NEW ltd_consumer( ).
    cl_atp_buffer_manager=>get_vbak_buffer( ).
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree ) ).
    lo_registree ?= NEW ltd_consumer( ).
    cl_atp_buffer_manager=>register(
      EXPORTING
        iv_buffername = 'VBAK'
        is_registree  = VALUE #( registree = lo_registree ) ).

    READ TABLE cl_atp_buffer_manager=>mt_buffer INTO DATA(ls_buffer) WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_equals( act = lines( ls_buffer-registree )
                                    exp = 2 ).

    " Method under test
    cl_atp_buffer_manager=>unregister( io_registree = lo_registree ).

    " Check result
    READ TABLE cl_atp_buffer_manager=>mt_buffer INTO ls_buffer WITH KEY tbl = 'VBAK'.
    cl_aunit_assert=>assert_equals( act = lines( ls_buffer-registree )
                                    exp = 1 ).

    cl_aunit_assert=>assert_bound( act = ls_buffer-buffer ).
    cl_aunit_assert=>assert_bound( act = ls_buffer-registree[ 1 ]-registree ).
  ENDMETHOD.


  METHOD vbap_key_structure.

    "Application buffer and generic buffer must use the same key structure

    DATA(lo_vbap_buffer)     = cl_atp_buffer_manager=>get_vbap_db_state_buffer( ).
    DATA(lo_appl_buffer_db)  = cl_atp_buffer_manager=>get_vbap_sales_db_state_buffer( ).

    lo_vbap_buffer->get_key_structure( IMPORTING er_key_structure = DATA(lr_vbap_key) ).
    lo_appl_buffer_db->get_key_structure( IMPORTING er_key_structure = DATA(lr_appl_key_db) ).

    cl_aunit_assert=>assert_equals( act = lr_vbap_key  exp = lr_appl_key_db ).

  ENDMETHOD.


  METHOD vbap_secondary_structure.

    "Application buffer and generic buffer must use the same secondary key structure

    DATA(lo_vbap_buffer)     = cl_atp_buffer_manager=>get_vbap_db_state_buffer( ).
    DATA(lo_appl_buffer_db)  = cl_atp_buffer_manager=>get_vbap_sales_db_state_buffer( ).

    lo_vbap_buffer->get_secondary_key_structure(
      EXPORTING
        iv_key_name      = if_atp_data_access=>c_secondary_key_name-vbap_db_state_by_main_item
      IMPORTING
        er_key_structure = DATA(lr_vbap_secondary_key)
    ).

    lo_appl_buffer_db->get_secondary_key_structure(
      EXPORTING
        iv_key_name      = if_atp_data_access=>c_secondary_key_name-vbap_db_state_by_main_item
      IMPORTING
        er_key_structure = DATA(lr_appl_db_secondary_key)
    ).

    cl_aunit_assert=>assert_equals( act = lr_vbap_secondary_key  exp = lr_appl_db_secondary_key ).

  ENDMETHOD.


  METHOD fill_bop_order_data.

    DATA: lt_document_act     TYPE if_atp_order_info_data_providr=>tt_document,
          lt_item_act         TYPE if_atp_order_info_data_providr=>tt_item,
          lt_scheduleline_act TYPE if_atp_order_info_data_providr=>tt_scheduleline.

    FIELD-SYMBOLS: <lt_document_act>     TYPE if_atp_order_info_data_providr=>tt_document,
                   <lt_item_act>         TYPE if_atp_order_info_data_providr=>tt_item,
                   <lt_scheduleline_act> TYPE if_atp_order_info_data_providr=>tt_scheduleline.

    DATA(lt_order_data) = VALUE tbl_atp_bop_order_data(
                            ( atpcat = 1 delnr = 1 delps = 1 subitem = 0 delet = 10 delivered_qty = 1 substitution_status = cl_atp_abc_c=>item_status-original complete_delivery = abap_true )
                            ( atpcat = 1 delnr = 2 delps = 2 subitem = 0 delet = 10 delivered_qty = 2 substitution_status = cl_atp_abc_c=>item_status-original complete_delivery = abap_false )
                            ( atpcat = 1 delnr = 2 delps = 2 subitem = 0 delet = 20 delivered_qty = 3 substitution_status = cl_atp_abc_c=>item_status-original complete_delivery = abap_false )
                            ( atpcat = 1 delnr = 2 delps = 3 subitem = 0 delet = 10 delivered_qty = 4 substitution_status = cl_atp_abc_c=>item_status-subitem  complete_delivery = abap_false )
                            ( atpcat = 1 delnr = 2 delps = 3 subitem = 0 delet = 20 delivered_qty = 5 substitution_status = cl_atp_abc_c=>item_status-subitem  complete_delivery = abap_false )
                          ).

    cl_atp_buffer_manager=>set_bop_order_data( it_order_data = lt_order_data ).

    DATA(lo_document_buffer)     = cl_atp_buffer_manager=>get_document_buffer( ).
    DATA(lo_item_buffer)         = cl_atp_buffer_manager=>get_item_buffer( ).
    DATA(lo_scheduleline_buffer) = cl_atp_buffer_manager=>get_scheduleline_buffer( ).

    lo_document_buffer->get_all(
      IMPORTING
        et_data          = DATA(lt_document_data)
    ).

    lo_item_buffer->get_all(
      IMPORTING
        et_data          = DATA(lt_item_data)
    ).

    lo_scheduleline_buffer->get_all(
      IMPORTING
        et_data          = DATA(lt_scheduleline_data)
    ).

    DATA(lt_document_exp) = VALUE if_atp_order_info_data_providr=>tt_document(
                                ( atpcat = 1 delnr = 1 complete_delivery = abap_true )
                                ( atpcat = 1 delnr = 2 complete_delivery = abap_false )
                            ).

    DATA(lt_item_exp) = VALUE if_atp_order_info_data_providr=>tt_item(
                            ( atpcat = 1 delnr = 1 delps = 1 substitution_status = cl_atp_abc_c=>item_status-original )
                            ( atpcat = 1 delnr = 2 delps = 2 substitution_status = cl_atp_abc_c=>item_status-original )
                            ( atpcat = 1 delnr = 2 delps = 3 substitution_status = cl_atp_abc_c=>item_status-subitem )
                        ).

    DATA(lt_scheduleline_exp) = VALUE if_atp_order_info_data_providr=>tt_scheduleline(
                                    ( atpcat = 1 delnr = 1 delps = 1 subitem = 0 delet = 10 delivered_qty = 1 )
                                    ( atpcat = 1 delnr = 2 delps = 2 subitem = 0 delet = 10 delivered_qty = 2 )
                                    ( atpcat = 1 delnr = 2 delps = 2 subitem = 0 delet = 20 delivered_qty = 3 )
                                    ( atpcat = 1 delnr = 2 delps = 3 subitem = 0 delet = 10 delivered_qty = 4 )
                                    ( atpcat = 1 delnr = 2 delps = 3 subitem = 0 delet = 20 delivered_qty = 5 )
                                ).

    ASSIGN lt_document_data->* TO <lt_document_act>.
    lt_document_act = CORRESPONDING #( <lt_document_act> ).

    ASSIGN lt_item_data->* TO <lt_item_act>.
    lt_item_act =  CORRESPONDING #( <lt_item_act> ).

    ASSIGN lt_scheduleline_data->* TO <lt_scheduleline_act>.
    lt_scheduleline_act = CORRESPONDING #( <lt_scheduleline_act> ).

    th_atp_table_assert=>equals(
      EXPORTING
        it_act                  = lt_document_act
        it_exp                  = lt_document_exp
    ).

    th_atp_table_assert=>equals(
      EXPORTING
        it_act                  = lt_item_act
        it_exp                  = lt_item_exp
    ).

    th_atp_table_assert=>equals(
      EXPORTING
        it_act                  = lt_scheduleline_act
        it_exp                  = lt_scheduleline_exp
    ).

  ENDMETHOD.

ENDCLASS.