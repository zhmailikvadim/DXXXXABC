*"* use this source file for your ABAP unit test classes
CLASS lcl_field_catalog DEFINITION
  FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.


  PUBLIC SECTION.

    METHODS:
      t001_value_too_long           FOR TESTING,
      t002_attr_dpp_rlvt_but_no_vh  FOR TESTING,
      t010_value_group_value_exists FOR TESTING,
      t011_value_group_mixed_ctlg   FOR TESTING.

  PRIVATE SECTION.

    CLASS-DATA:
        mo_environment TYPE REF TO if_osql_test_environment.

    CLASS-METHODS:
      class_setup,
      class_teardown.

ENDCLASS.

CLASS lcl_field_catalog IMPLEMENTATION.

  METHOD class_setup.
    mo_environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'pactlg_path' )
                                                                                    ( 'pactlg_pathref' )
                                                                                    ( 'I_ALLOCCHARCCTLGVALGRPVAL' ) ) ).
  ENDMETHOD.

  METHOD class_teardown.
    mo_environment->destroy( ).
  ENDMETHOD.

  METHOD t001_value_too_long.

    DATA: lt_sc_characteristic       TYPE cl_atp_field_catalog=>tt_characteristic,
          lt_in_characteristic_value TYPE cl_atp_field_catalog=>tt_characteristic_value.

    DATA: lo_cut_field_catalog TYPE REF TO cl_atp_field_catalog.

    DATA: lt_tr_charc_value_w_exist_act TYPE cl_atp_field_catalog=>tt_charc_value_w_existence,
          lt_tr_charc_value_w_exist_exp TYPE cl_atp_field_catalog=>tt_charc_value_w_existence.

    lt_sc_characteristic = VALUE #( (
      characteristicuuid            = 'F1'
      abapdataelement               = 'KUNNR'
      prodalloccharcvaluehelp       = 'I_Customer_VH'
      prodalloccharcvalhelptblfield = 'Customer'
      prodalloccharcvalblockfield   = 'IsBusinessPurposeCompleted'
      arecharcvaluessdpprelevant    = abap_true
    ) ).

    lt_in_characteristic_value = VALUE #( (
        key            = 'A1'
        characteristic = 'F1'
        value          = 'A_CUSTOMER_NAME_THAT_IS_TOO_LONG_FOR_THE_KUNNR_FIELD_BUT_STILL_FITS_IN_A_CUSTOM_SORT_SEQUENCE'
    ) ).


    lo_cut_field_catalog = NEW #(
      it_characteristic = lt_sc_characteristic
    ).


    lo_cut_field_catalog->check_data_existence(
      EXPORTING
        it_characteristic_value    = lt_in_characteristic_value
      IMPORTING
        et_charc_value_w_existence = lt_tr_charc_value_w_exist_act
    ).


    lt_tr_charc_value_w_exist_exp = VALUE #( (
      key            = 'A1'
      characteristic = 'F1'
      value          = 'A_CUSTOMER_NAME_THAT_IS_TOO_LONG_FOR_THE_KUNNR_FIELD_BUT_STILL_FITS_IN_A_CUSTOM_SORT_SEQUENCE'
      value_blocked  = abap_false
      value_exists   = abap_false
    ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_tr_charc_value_w_exist_exp
        it_act = lt_tr_charc_value_w_exist_act
    ).

  ENDMETHOD.

  METHOD t002_attr_dpp_rlvt_but_no_vh.

    DATA: lt_sc_characteristic       TYPE cl_atp_field_catalog=>tt_characteristic,
          lt_in_characteristic_value TYPE cl_atp_field_catalog=>tt_characteristic_value.

    DATA: lo_cut_field_catalog TYPE REF TO cl_atp_field_catalog.

    DATA: lt_tr_charc_value_w_exist_act TYPE cl_atp_field_catalog=>tt_charc_value_w_existence,
          lt_tr_charc_value_w_exist_exp TYPE cl_atp_field_catalog=>tt_charc_value_w_existence.

    lt_sc_characteristic = VALUE #( (
      characteristicuuid            = 'F1'
      abapdataelement               = 'KUNNR'
      prodalloccharcvaluehelp       = ''
      prodalloccharcvalhelptblfield = ''
      prodalloccharcvalblockfield   = ''
      arecharcvaluessdpprelevant    = abap_true
    ) ).

    lt_in_characteristic_value = VALUE #( (
        key            = 'A1'
        characteristic = 'F1'
        value          = 'ANY_VALUE'
    ) (
        key            = 'A2'
        characteristic = 'F1'
        value          = 'OTHER_VALUE'
    ) ).


    lo_cut_field_catalog = NEW #(
      it_characteristic = lt_sc_characteristic
    ).


    lo_cut_field_catalog->check_data_existence(
      EXPORTING
        it_characteristic_value    = lt_in_characteristic_value
      IMPORTING
        et_charc_value_w_existence = lt_tr_charc_value_w_exist_act
    ).


    lt_tr_charc_value_w_exist_exp = VALUE #( (
      key            = 'A1'
      characteristic = 'F1'
      value          = 'ANY_VALUE'
      value_blocked  = abap_false
      value_exists   = abap_false
    ) (
      key            = 'A2'
      characteristic = 'F1'
      value          = 'OTHER_VALUE'
      value_blocked  = abap_false
      value_exists   = abap_false
    ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_tr_charc_value_w_exist_exp
        it_act = lt_tr_charc_value_w_exist_act
    ).

  ENDMETHOD.

  METHOD t010_value_group_value_exists.

    DATA: lt_sc_characteristic       TYPE cl_atp_field_catalog=>tt_characteristic,
          lt_in_characteristic_value TYPE cl_atp_field_catalog=>tt_characteristic_value,
          lt_value_group_value       TYPE TABLE OF i_alloccharcctlgvalgrpval.

    lt_value_group_value = VALUE #( ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'B1'
                                      charcctlgvaluegroupvalueuuid = 'C1'
                                      charccatalogvaluegroupvalue  = 'MATERIAL_GROUP_A' )
                                    ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'B1'
                                      charcctlgvaluegroupvalueuuid = 'C2'
                                      charccatalogvaluegroupvalue  = 'MATERIAL_GROUP_B' )
                                      ).

    mo_environment->insert_test_data( i_data = lt_value_group_value ).

    SELECT * FROM i_alloccharcctlgvalgrpval INTO TABLE @DATA(lt_test).

    SELECT * FROM i_alloccharcctlgvalgrpval INTO TABLE @DATA(lt_test_2)
      WHERE i_alloccharcctlgvalgrpval~prodalloccharcctlgpathuuid = 'B1000000000000000000000000000000'.

    lt_sc_characteristic = VALUE #( ( characteristicuuid            = 'B1'
                                      abapdataelement               = 'CHAR40'
                                      prodalloccharcvaluehelp       = 'I_ALLOCCHARCCTLGVALGRPVAL'
                                      prodalloccharcvalhelptblfield = 'CharcCatalogValueGroupValue'
                                      prodalloccharcvalblockfield   = ''
                                      arecharcvaluessdpprelevant    = abap_true )
                                       ).

    lt_in_characteristic_value = VALUE #( ( key            = 'D1'
                                            characteristic = 'B1'
                                            value          = 'MATERIAL_GROUP_A' )
                                          ( key            = 'D2'
                                            characteristic = 'B1'
                                            value          = 'MATERIAL_GROUP_B' )
                                          ( key            = 'D2'
                                            characteristic = 'B1'
                                            value          = 'MATERIAL_GROUP_C' ) ).


    DATA: lo_cut_field_catalog TYPE REF TO cl_atp_field_catalog.

    lo_cut_field_catalog = NEW #(
      it_characteristic = lt_sc_characteristic
    ).


    DATA: lt_tr_charc_value_w_exist_act TYPE cl_atp_field_catalog=>tt_charc_value_w_existence,
          lt_tr_charc_value_w_exist_exp TYPE cl_atp_field_catalog=>tt_charc_value_w_existence.

    lo_cut_field_catalog->check_data_existence(
      EXPORTING
        it_characteristic_value    = lt_in_characteristic_value
      IMPORTING
        et_charc_value_w_existence = lt_tr_charc_value_w_exist_act
    ).


    lt_tr_charc_value_w_exist_exp = VALUE #( ( key            = 'D1'
                                               characteristic = 'B1'
                                               value          = 'MATERIAL_GROUP_A'
                                               value_blocked  = abap_false
                                               value_exists   = abap_true )
                                             ( key            = 'D2'
                                               characteristic = 'B1'
                                               value          = 'MATERIAL_GROUP_B'
                                               value_blocked  = abap_false
                                               value_exists   = abap_true )
                                             ( key            = 'D2'
                                               characteristic = 'B1'
                                               value          = 'MATERIAL_GROUP_C'
                                               value_blocked  = abap_false
                                               value_exists   = abap_false )   ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_tr_charc_value_w_exist_exp
        it_act = lt_tr_charc_value_w_exist_act
    ).

  ENDMETHOD.

  METHOD t011_value_group_mixed_ctlg.

    DATA: lt_sc_characteristic       TYPE cl_atp_field_catalog=>tt_characteristic,
          lt_in_characteristic_value TYPE cl_atp_field_catalog=>tt_characteristic_value,
          lt_value_group_value       TYPE TABLE OF i_alloccharcctlgvalgrpval,
          lt_catalog_path            TYPE TABLE OF pactlg_path,
          lt_catalog_path_ref        TYPE TABLE OF pactlg_pathref.

    lt_catalog_path = VALUE #( (
      prodalloccharcctlgpathuuid = 'A01'
      prodalloccharcctlgpathintid = 'A01'
    ) (
      prodalloccharcctlgpathuuid = 'B01'
      prodalloccharcctlgpathintid = 'B01'
    ) (
      prodalloccharcctlgpathuuid = 'C01'
      prodalloccharcctlgpathintid = 'C01'
    ) ).

    mo_environment->insert_test_data( i_data = lt_catalog_path ).

    lt_catalog_path_ref = VALUE #( ( prodalloccharcctlgpathrefuuid  = '1'
                                     prodalloccharccataloguuid      = 'A'
                                     prodalloccharcctlgpathuuid     = 'C01'
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = 'A01'
                                     basecharccatalogpathintid      = 'A01' )
                                   ( prodalloccharcctlgpathrefuuid  = '2'
                                     prodalloccharccataloguuid      = 'B'
                                     prodalloccharcctlgpathuuid     = 'C01'
                                     prodalloccharccatalogismain    = abap_false
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = 'B01'
                                     basecharccatalogpathintid      = 'B01' ) ).

    mo_environment->insert_test_data( i_data = lt_catalog_path_ref ).

    lt_value_group_value = VALUE #( ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'A01'
                                      charcctlgvaluegroupvalueuuid = 'A11'
                                      charccatalogvaluegroupvalue  = 'MATERIAL_GROUP_A' )
                                    ( prodalloccharccataloguuid    = 'B1'
                                      prodalloccharcctlgpathuuid   = 'B01'
                                      charcctlgvaluegroupvalueuuid = 'B11'
                                      charccatalogvaluegroupvalue  = 'MATERIAL_GROUP_B' )
                                      ).

    mo_environment->insert_test_data( i_data = lt_value_group_value ).

    lt_sc_characteristic = VALUE #( ( characteristicuuid            = 'C01'
                                      abapdataelement               = 'CHAR40'
                                      prodalloccharcvaluehelp       = 'I_ALLOCCHARCCTLGVALGRPVAL'
                                      prodalloccharcvalhelptblfield = 'CharcCatalogValueGroupValue'
                                      prodalloccharcvalblockfield   = ''
                                      arecharcvaluessdpprelevant    = abap_true )
                                       ).

    lt_in_characteristic_value = VALUE #( ( key            = 'D1'
                                            characteristic = 'C01'
                                            value          = 'MATERIAL_GROUP_B' ) ).


    DATA: lo_cut_field_catalog TYPE REF TO cl_atp_field_catalog.

    lo_cut_field_catalog = NEW #(
      it_characteristic = lt_sc_characteristic
    ).


    DATA: lt_tr_charc_value_w_exist_act TYPE cl_atp_field_catalog=>tt_charc_value_w_existence,
          lt_tr_charc_value_w_exist_exp TYPE cl_atp_field_catalog=>tt_charc_value_w_existence.

    lo_cut_field_catalog->check_data_existence(
      EXPORTING
        it_characteristic_value    = lt_in_characteristic_value
      IMPORTING
        et_charc_value_w_existence = lt_tr_charc_value_w_exist_act
    ).


    lt_tr_charc_value_w_exist_exp = VALUE #( ( key            = 'D1'
                                               characteristic = 'C01'
                                               value          = 'MATERIAL_GROUP_B'
                                               value_blocked  = abap_false
                                               value_exists   = abap_true ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_tr_charc_value_w_exist_exp
        it_act = lt_tr_charc_value_w_exist_act
    ).

  ENDMETHOD.

ENDCLASS.