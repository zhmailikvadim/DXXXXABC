CLASS cl_atp_fieldcatalog_db DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_atp_fieldcatalog_db .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS CL_ATP_FIELDCATALOG_DB IMPLEMENTATION.


  METHOD if_atp_fieldcatalog_db~read_all_path_refs_for_charc.

    CLEAR et_path_ref_for_charc.

    CHECK it_path_ref_for_charc IS NOT INITIAL.

    SELECT DISTINCT
           path~prodalloccharcctlgpathuuid        AS given_path_uuid,
           path_4_ref~prodalloccharccataloguuid   AS requested_catalog_uuid,
           path_4_ref~prodalloccharcctlgpathuuid  AS resulting_path_uuid,
           path_4_ref~prodalloccharcctlgpathintid AS resulting_path_int_uuid
      FROM pactlg_path AS path
      INNER JOIN pactlg_pathref AS ref_join
            ON (    path~prodalloccharcctlgpathuuid = ref_join~prodalloccharcctlgpathuuid
                 OR path~prodalloccharcctlgpathuuid = ref_join~basecharccatalogpathuuid )
      LEFT OUTER JOIN pactlg_pathref AS ref
           ON ref_join~prodalloccharcctlgpathuuid = ref~prodalloccharcctlgpathuuid
      LEFT OUTER JOIN pactlg_path AS path_4_ref
           ON (    path_4_ref~prodalloccharcctlgpathuuid = ref~basecharccatalogpathuuid
                OR path_4_ref~prodalloccharcctlgpathuuid = ref~prodalloccharcctlgpathuuid )
      INNER JOIN @it_path_ref_for_charc AS input
            ON     path~prodalloccharcctlgpathuuid      = input~given_path_uuid
               AND path_4_ref~prodalloccharccataloguuid = input~requested_catalog_uuid
*      FOR ALL ENTRIES IN @it_path_ref_for_charc
*                WHERE  path~prodalloccharcctlgpathuuid      = @it_path_ref_for_charc-given_path_uuid
*                   AND path_4_ref~prodalloccharccataloguuid = @it_path_ref_for_charc-requested_catalog_uuid
      INTO TABLE @et_path_ref_for_charc.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_base_paths.

    CHECK it_catalog_path_uuid IS NOT INITIAL.

    SELECT pactlg_path~*
      FROM pactlg_path
      INNER JOIN pactlg_pathref
      ON pactlg_path~prodalloccharcctlgpathuuid = pactlg_pathref~basecharccatalogpathuuid
      FOR ALL ENTRIES IN @it_catalog_path_uuid
      WHERE pactlg_pathref~prodalloccharcctlgpathuuid = @it_catalog_path_uuid-charc_path_uuid
      INTO TABLE @et_catalog_path.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info.
    CHECK it_catalog_uuid IS NOT INITIAL.

    SELECT * FROM pactlg
      INTO TABLE @et_catalog_info
      FOR ALL ENTRIES IN @it_catalog_uuid
      WHERE prodalloccharccataloguuid = @it_catalog_uuid-catalog_uuid.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info_by_usetype.
    CHECK iv_catalog_use_type IS NOT INITIAL.

    SELECT * FROM pactlg
      INTO TABLE @et_catalog_info
        WHERE prodalloccharccatalogusetype = @iv_catalog_use_type.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info_via_type.
    CHECK iv_catalog_type     IS NOT INITIAL
      AND iv_catalog_use_type IS NOT INITIAL.

    SELECT SINGLE * FROM pactlg
      INTO @es_catalog_info
      WHERE prodalloccharccatalogtype    = @iv_catalog_type
        AND prodalloccharccatalogusetype = @iv_catalog_use_type.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path.

    me->if_atp_fieldcatalog_db~read_catalog_paths(
      EXPORTING
        it_catalog_path_uuid = VALUE #( ( charc_path_uuid = iv_catalog_path_uuid ) )
      IMPORTING
        et_catalog_path      = DATA(lt_catalog_path)
    ).

    IF lines( lt_catalog_path ) = 1.
      es_catalog_path = lt_catalog_path[ 1 ].
    ENDIF.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_paths.

    DATA lt_catalog_path LIKE et_catalog_path.

    IF it_catalog_path_uuid IS NOT INITIAL.

      SELECT *
        FROM pactlg_path
        FOR ALL ENTRIES IN @it_catalog_path_uuid
        WHERE prodalloccharcctlgpathuuid = @it_catalog_path_uuid-charc_path_uuid
        INTO CORRESPONDING FIELDS OF TABLE @et_catalog_path.

    ENDIF.

    IF it_catalog_path_int_id IS NOT INITIAL.

      SELECT *
        FROM pactlg_path
        FOR ALL ENTRIES IN @it_catalog_path_int_id
        WHERE prodalloccharcctlgpathintid = @it_catalog_path_int_id-charc_path_int_id
        INTO CORRESPONDING FIELDS OF TABLE @lt_catalog_path.

      et_catalog_path = CORRESPONDING #( BASE ( et_catalog_path ) lt_catalog_path ).

    ENDIF.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_paths_by.

    CLEAR et_catalog_path.

    CHECK iv_catalog_use_type IS NOT INITIAL.

    CHECK iv_catalog_type     IS NOT INITIAL.

    SELECT *
      FROM pactlg_path
      WHERE prodalloccharccatalogusetype   = @iv_catalog_use_type
        AND prodalloccharccatalogtype      = @iv_catalog_type
        AND prodalloccharcctlgpathishidden = @abap_false
      INTO CORRESPONDING FIELDS OF TABLE @et_catalog_path.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_ref.
    me->if_atp_fieldcatalog_db~read_catalog_path_refs(
     EXPORTING
       it_catalog_path_ref_uuid = VALUE #( ( charc_path_ref_uuid = iv_catalog_path_ref_uuid ) )
     IMPORTING
       et_catalog_path_ref      = DATA(lt_catalog_path_ref) ).

    READ TABLE lt_catalog_path_ref INTO es_catalog_path_ref WITH KEY prodalloccharcctlgpathrefuuid = iv_catalog_path_ref_uuid.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs.
    CHECK it_catalog_path_ref_uuid IS NOT INITIAL.

    SELECT
      ref~*,
      path~prodalloccharccataloguuid AS baseprodalloccharccataloguuid,
      path~abapdataelement           AS basedataelement
      FROM pactlg_pathref AS ref
      INNER JOIN pactlg_path AS path
      ON ref~basecharccatalogpathuuid = path~prodalloccharcctlgpathuuid
      INTO TABLE @et_catalog_path_ref
      FOR ALL ENTRIES IN @it_catalog_path_ref_uuid
      WHERE ref~prodalloccharcctlgpathrefuuid = @it_catalog_path_ref_uuid-charc_path_ref_uuid.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs_by.

    CLEAR et_catalog_path_ref.

    IF it_catalog_uuid IS NOT INITIAL.

      SELECT
        ref~*,
        path~prodalloccharccataloguuid AS baseprodalloccharccataloguuid,
        path~abapdataelement           AS basedataelement
        FROM pactlg_pathref AS ref
        INNER JOIN pactlg_path AS path
        ON ref~basecharccatalogpathuuid = path~prodalloccharcctlgpathuuid
        INTO TABLE @et_catalog_path_ref
        FOR ALL ENTRIES IN @it_catalog_uuid
        WHERE ref~prodalloccharccataloguuid = @it_catalog_uuid-catalog_uuid.

    ELSEIF it_catalog_path_uuid IS NOT INITIAL.

      SELECT
        ref~*,
        path~prodalloccharccataloguuid AS baseprodalloccharccataloguuid,
        path~abapdataelement           AS basedataelement
        FROM pactlg_pathref AS ref
        INNER JOIN pactlg_path AS path
        ON ref~basecharccatalogpathuuid = path~prodalloccharcctlgpathuuid
        INTO TABLE @et_catalog_path_ref
        FOR ALL ENTRIES IN @it_catalog_path_uuid
        WHERE ref~prodalloccharcctlgpathuuid = @it_catalog_path_uuid-charc_path_uuid.
    ENDIF.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_text.

    CLEAR et_catalog_path_text.

    CHECK it_catalog_path_int_id IS NOT INITIAL.

    SELECT prodalloccharcctlgpathintid AS charc_path_int_id,
           prodalloccharcctlgpathdesc  AS text
      FROM i_prodalloccharcctlgpathpicker( p_hastext = @abap_true )
      FOR ALL ENTRIES IN @it_catalog_path_int_id
      WHERE prodalloccharcctlgpathintid = @it_catalog_path_int_id-charc_path_int_id
      INTO CORRESPONDING FIELDS OF TABLE @et_catalog_path_text.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_text.

    CLEAR et_catalog_text.

    CHECK it_catalog_uuid IS NOT INITIAL.

    SELECT atpseloptntoolcritrnctlguuid  AS catalog_uuid,
           prodalloccharccatalogtypedesc AS catalog_text
      FROM c_atpseloptntoolcritrncatalog AS catalog
      INNER JOIN i_prodalloccharccatalogtypet AS text
            ON  text~prodalloccharccatalogtype = catalog~prodalloccharccatalogtype
            AND text~language                  = @sy-langu
      FOR ALL ENTRIES IN @it_catalog_uuid
      WHERE atpseloptntoolcritrnctlguuid = @it_catalog_uuid-catalog_uuid
      INTO TABLE @DATA(lt_catalog_text).

    et_catalog_text = CORRESPONDING #( lt_catalog_text DISCARDING DUPLICATES ).

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_value_for_value_help.
    DATA:
      lv_inlinecount           TYPE i,
      lv_count                 TYPE i,
      lt_count_data            TYPE tbl_atp_charc_value_value_help,
      lv_language_name         TYPE string,
      lv_valhelp               TYPE string,
      lv_valhelp_field         TYPE string,
      lv_valhelp_link          TYPE string,
      lv_valhelp_textfield     TYPE string,
      lv_valhelp_wl            TYPE string,
      lv_valhelp_field_wl      TYPE string,
      lv_valhelp_link_wl       TYPE string,
      lv_valhelp_textfld_wl    TYPE string,
      lv_desc_name             TYPE string,
      lv_fields                TYPE string,
      lv_flt_where_cond        TYPE string,
      lv_where_cond            TYPE string,
      lt_id_selopt             TYPE /iwbep/t_cod_select_options,
      lt_desc_selopt           TYPE /iwbep/t_cod_select_options,
      lv_clfncharacteristic    TYPE string,
      lv_clfncharacteristic_wl TYPE string.
    DATA:
      lo_excp        TYPE REF TO cx_sy_dynamic_osql_semantics,
      lo_syntax_excp TYPE REF TO cx_sy_dynamic_osql_syntax,
      lo_data_excp   TYPE REF TO cx_sy_open_sql_data_error.

*   Leave, if there is no value help
    IF is_catalog_path-prodalloccharcvaluehelp IS INITIAL.
      RETURN.
    ENDIF.

*   copy selection options
    lt_id_selopt    = it_id_selopt.                         "AB2700361
    lt_desc_selopt  = it_desc_selopt.                       "AB2700361
*   check db content wich is used for dynamic selects (security)
    "CL_ABAP_DYN_PRG
    lv_valhelp_wl           = is_catalog_path-prodalloccharcvaluehelp.
    lv_valhelp_field_wl     = is_catalog_path-prodalloccharcvalhelptblfield.
    lv_valhelp_link_wl      = is_catalog_path-prodalloccharcvalhelptextlink.
    lv_valhelp_textfld_wl   = is_catalog_path-prodalloccharcvalhelptxttblfld.
    lv_clfncharacteristic_wl = is_catalog_path-charcinternalid.

    lv_valhelp           = cl_abap_dyn_prg=>escape_quotes( val   = is_catalog_path-prodalloccharcvaluehelp ).
    lv_valhelp_field     = cl_abap_dyn_prg=>escape_quotes( val   = is_catalog_path-prodalloccharcvalhelptblfield ).
    lv_valhelp_link      = cl_abap_dyn_prg=>escape_quotes( val   = is_catalog_path-prodalloccharcvalhelptextlink ).
    lv_valhelp_textfield = cl_abap_dyn_prg=>escape_quotes( val   = is_catalog_path-prodalloccharcvalhelptxttblfld ).
    lv_clfncharacteristic = cl_abap_dyn_prg=>escape_quotes( val   = CONV string( is_catalog_path-charcinternalid ) ).
    TRY.
        lv_valhelp           = cl_abap_dyn_prg=>check_whitelist_str( val = lv_valhelp whitelist = lv_valhelp_wl ).
      CATCH cx_abap_not_in_whitelist.
        RETURN.
    ENDTRY.
    TRY.
        lv_valhelp_field           = cl_abap_dyn_prg=>check_whitelist_str( val = lv_valhelp_field whitelist = lv_valhelp_field_wl ).
      CATCH cx_abap_not_in_whitelist.
        RETURN.
    ENDTRY.
    TRY.
        lv_valhelp_link           = cl_abap_dyn_prg=>check_whitelist_str( val = lv_valhelp_link whitelist = lv_valhelp_link_wl ).
      CATCH cx_abap_not_in_whitelist.
        IF NOT is_catalog_path-prodalloccharcvalhelptextlink IS INITIAL.
          RETURN.
        ELSE.
          CLEAR lv_valhelp_link.
        ENDIF.
    ENDTRY.
    TRY.
        lv_valhelp_textfield           = cl_abap_dyn_prg=>check_whitelist_str( val = lv_valhelp_textfield whitelist = lv_valhelp_textfld_wl ).
      CATCH cx_abap_not_in_whitelist.
        IF NOT is_catalog_path-prodalloccharcvalhelptxttblfld IS INITIAL.
          RETURN.
        ELSE.
          CLEAR lv_valhelp_link.
        ENDIF.
    ENDTRY.
    TRY.
        lv_clfncharacteristic = cl_abap_dyn_prg=>check_whitelist_str( val = lv_clfncharacteristic whitelist = lv_clfncharacteristic_wl ).
      CATCH cx_abap_not_in_whitelist.
        IF lv_valhelp = if_prod_alloc_charc_catalog_c=>sc_clfncharcvalue-value_help_view.  "only if this is the case the classification characteristic will be used
          RETURN.
        ELSE.
          CLEAR lv_clfncharacteristic.
        ENDIF.
    ENDTRY.

*   Make generic DB call to get ID and description for value help:
    lv_fields = lv_valhelp_field && ` AS PRODALLOCCHARC`.
    IF lv_valhelp_textfield IS INITIAL.
      lv_desc_name = ''' '''.
    ELSEIF lv_valhelp_link IS INITIAL.
      "textfield in same view
      lv_desc_name = lv_valhelp_textfield.
    ELSE.
      "separate text view
      lv_desc_name = '\' && lv_valhelp_link && '-'
                         && lv_valhelp_textfield.
      lv_language_name = '\' && lv_valhelp_link && '-LANGUAGE'.
      lv_where_cond = ` ( ` && lv_language_name && ` = @SY-LANGU OR ` && lv_language_name  && ` IS NULL ) `.
    ENDIF.
    lv_fields = lv_fields && `, ` && lv_desc_name && ` AS PRODALLOCCHARCDESC`.

    "add search filter to where condition
    IF NOT lt_id_selopt IS INITIAL OR
     ( NOT lt_desc_selopt IS INITIAL AND NOT lv_valhelp_textfield IS INITIAL ).
      IF NOT lt_id_selopt IS INITIAL AND
       ( lt_desc_selopt IS INITIAL OR lv_valhelp_textfield IS INITIAL ).
        lv_flt_where_cond = ` ( ` && lv_valhelp_field && ` IN @LT_ID_SELOPT  ) `.
      ELSEIF lt_id_selopt IS INITIAL AND
           ( NOT lt_desc_selopt IS INITIAL AND NOT lv_valhelp_textfield IS INITIAL ).
        lv_flt_where_cond = ` ( ` && lv_desc_name  && `  IN @LT_DESC_SELOPT  ) `.
      ELSE. "both tables filled
        IF iv_selopt_and = abap_true.
          lv_flt_where_cond = ` ( ` && lv_valhelp_field && ` IN @LT_ID_SELOPT AND ` && lv_desc_name  && `  IN @LT_DESC_SELOPT  ) `.
        ELSE.
          lv_flt_where_cond = ` ( ` && lv_valhelp_field && ` IN @LT_ID_SELOPT OR ` && lv_desc_name  && `  IN @LT_DESC_SELOPT  ) `.
        ENDIF.
      ENDIF.
      IF lv_where_cond IS INITIAL.
        lv_where_cond = lv_flt_where_cond.
      ELSE.
        lv_where_cond = lv_where_cond && ` AND  ` && lv_flt_where_cond.
      ENDIF.
    ENDIF.

    IF lv_valhelp = 'I_ALLOCCHARCCTLGVALGRPVAL'. "in case of group values, make sure only to only show
*       values of THIS group
      lv_where_cond = lv_where_cond && ` AND I_ALLOCCHARCCTLGVALGRPVAL~prodalloccharcctlgpathuuid = '`  ##NO_TEXT
      && is_catalog_path-prodalloccharcctlgpathuuid && `'`.
    ENDIF.

    IF lv_valhelp = if_prod_alloc_charc_catalog_c=>sc_clfncharcvalue-value_help_view.
      "in case of classification characteristics, make sure to only show values of THIS characteristic
      IF lv_where_cond IS NOT INITIAL.
        lv_where_cond = lv_where_cond && ` AND `.    "no language condition in this case, therefore the where condition may be empty
      ENDIF.
      lv_where_cond = lv_where_cond && `CHARCINTERNALID = '` && lv_clfncharacteristic && `'`.
    ENDIF.

    "execute dynamic select
    IF lv_where_cond IS INITIAL.
      TRY.
          SELECT FROM (lv_valhelp)
            FIELDS DISTINCT (lv_fields)
            ORDER BY (lv_valhelp_field)
            INTO CORRESPONDING FIELDS OF TABLE @et_value
            OFFSET @is_paging-skip UP TO @is_paging-top ROWS.
        CATCH cx_sy_dynamic_osql_semantics INTO lo_excp.
          RETURN.
        CATCH cx_sy_dynamic_osql_syntax INTO lo_syntax_excp.
          RETURN.
        CATCH cx_sy_open_sql_data_error INTO lo_data_excp.
          RETURN.
      ENDTRY.
    ELSE.
      TRY.
          SELECT FROM (lv_valhelp)
            FIELDS DISTINCT (lv_fields)
            WHERE (lv_where_cond)
            ORDER BY (lv_valhelp_field)
            INTO CORRESPONDING FIELDS OF TABLE @et_value
            OFFSET @is_paging-skip UP TO @is_paging-top ROWS.
        CATCH cx_sy_dynamic_osql_semantics INTO lo_excp.
          RETURN.
        CATCH cx_sy_dynamic_osql_syntax INTO lo_syntax_excp.
          RETURN.
        CATCH cx_sy_open_sql_data_error INTO lo_data_excp.
          RETURN.
      ENDTRY.
    ENDIF.


*   fill response context (only for first package needed)
    IF is_paging-skip = 0.

      IF lv_where_cond IS INITIAL.
        "only language filter, no where clause needed
        TRY.
            SELECT COUNT(*) FROM (lv_valhelp)
              INTO @lv_inlinecount.
          CATCH cx_sy_dynamic_osql_semantics INTO lo_excp.
            RETURN.
          CATCH cx_sy_dynamic_osql_syntax INTO lo_syntax_excp.
            RETURN.
          CATCH cx_sy_open_sql_data_error INTO lo_data_excp.
            RETURN.
        ENDTRY.
      ELSE.
        TRY.
            SELECT FROM (lv_valhelp)
              FIELDS DISTINCT (lv_fields)
              WHERE (lv_where_cond)
              INTO CORRESPONDING FIELDS OF TABLE @lt_count_data PACKAGE SIZE 1000.
              "count results, because use of \_TEXT 1..n assoc with count(*) in where cond will lead to exception
              lv_count = lines( lt_count_data ).
              lv_inlinecount = lv_inlinecount + lv_count.
              CLEAR lt_count_data.
            ENDSELECT.
          CATCH cx_sy_dynamic_osql_semantics INTO lo_excp.
            RETURN.
          CATCH cx_sy_dynamic_osql_syntax INTO lo_syntax_excp.
            RETURN.
          CATCH cx_sy_open_sql_data_error INTO lo_data_excp.
            RETURN.
        ENDTRY.
      ENDIF.

      ev_count = lv_inlinecount.
    ENDIF.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_value_groups.

    CLEAR: et_value_group,
           et_value_group_parent,
           et_value_group_value.

    CHECK it_catalog_path_uuid IS NOT INITIAL.

*    SELECT DISTINCT
*      value~prodalloccharcctlgpathuuid       AS value_group_path_uuid,
*      value~charccatalogvaluegroupvalue      AS value_group_value,
*      base_value~charccatalogparentpathvalue AS base_value,
*      value~charcctlggroupvalueisfallback    AS group_value_is_fallback
*    FROM pactlg_grpval AS value
*    LEFT OUTER JOIN pactlg_parval AS base_value
*      ON value~charcctlgvaluegroupvalueuuid = base_value~charcctlgvaluegroupvalueuuid
*    FOR ALL ENTRIES IN @it_catalog_path_uuid
*    WHERE value~prodalloccharcctlgpathuuid = @it_catalog_path_uuid-charc_path_uuid
*      AND (    value~charcctlggroupvalueisfallback = @abap_true     " either this is the default, then it needs no parent value
*            OR base_value~charccatalogparentpathvalue IS NOT NULL ) " or there is a parent value
*    INTO CORRESPONDING FIELDS OF TABLE @et_value_group.

    SELECT DISTINCT
      charcctlgvaluegroupvalueuuid     AS group_uuid,
      prodalloccharcctlgpathuuid       AS group_path_uuid,
      charccatalogvaluegroupvalue      AS group_value,
      charcctlggroupvalueisfallback    AS group_value_is_fallback
    FROM pactlg_grpval
    FOR ALL ENTRIES IN @it_catalog_path_uuid
    WHERE prodalloccharcctlgpathuuid = @it_catalog_path_uuid-charc_path_uuid
    INTO CORRESPONDING FIELDS OF TABLE @et_value_group_value.

    CHECK et_value_group_value IS NOT INITIAL.

    SELECT DISTINCT
      charcctlgparentpathvalueuuid     AS parent_uuid,
      charcctlgvaluegroupvalueuuid     AS group_uuid,
      prodalloccharcctlgparpathintid   AS parent_path_int_id,
      charccatalogparentpathvalue      AS parent_value
    FROM pactlg_parval
    FOR ALL ENTRIES IN @et_value_group_value
    WHERE charcctlgvaluegroupvalueuuid = @et_value_group_value-group_uuid
    INTO CORRESPONDING FIELDS OF TABLE @et_value_group_parent.

  ENDMETHOD.
ENDCLASS.