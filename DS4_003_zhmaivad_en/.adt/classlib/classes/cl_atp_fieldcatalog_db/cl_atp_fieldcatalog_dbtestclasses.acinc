CLASS ltc_fc_db DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PUBLIC SECTION.

    DATA:
       f_cut TYPE REF TO cl_atp_fieldcatalog_db.

    METHODS:
      field_cat_value              FOR TESTING,
      field_cat_val_no_filter      FOR TESTING,
      field_cat_value_w_val_grp    FOR TESTING,
      field_cat_val_clfn           FOR TESTING,
      field_cat_val_clfn_txt       FOR TESTING,
      field_cat_val_clfn_filter    FOR TESTING,
      field_cat_val_clfn_wrng_fltr FOR TESTING,
      field_cat_path               FOR TESTING,
      field_cat_multiple_paths     FOR TESTING,
      field_cat_path_ref           FOR TESTING,
      field_cat_path_ref_by        FOR TESTING,
      field_cat_multiple_path_ref  FOR TESTING,
      field_cat_info               FOR TESTING,
      field_cat_info_via_type      FOR TESTING,
      field_cat_base_paths         FOR TESTING,
      field_cat_path_text          FOR TESTING,
      field_cat_paths_by           FOR TESTING,
      field_cat_value_groups       FOR TESTING,

      all_path_refs_for_charc      FOR TESTING,
      all_path_refs_for_charc_mul  FOR TESTING.

  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA:
        environment TYPE REF TO if_osql_test_environment.

    CLASS-METHODS:
      class_setup,
      class_teardown.

    METHODS:
      setup.
ENDCLASS.

CLASS ltc_fc_db IMPLEMENTATION.

  METHOD class_setup.

*-->Create doubles for database dependencies of the class
    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'pactlg_path' )
                                                                                 ( 'pactlg_pathref' )
                                                                                 ( 'i_materialstdvh' )
                                                                                 ( 'i_prodalloccharcctlgpathpicker' )
                                                                                 ( 'I_ALLOCCHARCCTLGVALGRPVAL' )
                                                                                 ( 'pactlg')
                                                                                 ( 'pactlg_grpval')
                                                                                 ( 'pactlg_parval')
                                                                                 ( 'p_charcctlgclfncharcvalue' ) ) ).
  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.

  METHOD setup.
    environment->clear_doubles( ).
  ENDMETHOD.


  METHOD field_cat_value.
    DATA ls_catalog_path TYPE pactlg_path.
    DATA lt_value_exp TYPE tbl_atp_charc_value_value_help.
    DATA lt_material_vh TYPE TABLE OF i_materialstdvh.
    lt_material_vh = VALUE #( ( material = 'Material-A' )
                              ( material = 'Moep 1' ) ).


    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '3333'
                        prodalloccharcvaluehelp = 'i_materialstdvh'
                        prodalloccharcvalhelptblfield = 'material'
                        prodalloccharcvalhelptextlink = '_text'
                        prodalloccharcvalhelptxttblfld = 'materialname' ).

    environment->insert_test_data( i_data = lt_material_vh ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
    DATA ls_value_exp TYPE i_prodalloccharcvaluevh .
    ls_value_exp-prodalloccharc = 'Material-A'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.
    ls_value_exp-prodalloccharc = 'Moep 1'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.

    cl_aunit_assert=>assert_equals( exp = 2 act = lv_count_act ).

    th_atp_coordinator=>assert_equals_ignoring_order(
      EXPORTING
        it_act   = lt_value_act
        it_exp   = lt_value_exp
    ).

  ENDMETHOD.

  METHOD field_cat_val_no_filter.
    DATA ls_catalog_path TYPE pactlg_path.
    DATA lt_value_exp TYPE tbl_atp_charc_value_value_help.
    DATA lt_charctlgclfncharval TYPE TABLE OF p_charcctlgclfncharcvalue.
    lt_charctlgclfncharval = VALUE #( ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description' )
                                      ( charcinternalid = '1234567891'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description' )  ).

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '1245678930'
                        prodalloccharcvaluehelp = 'P_CHARCCTLGCLFNCHARCVALUE'
                        prodalloccharcvalhelptblfield = 'CHARCVALUE'
                        prodalloccharcvalhelptxttblfld = 'CHARCVALUEDESCRIPTION'
                        abapdictionarydatatype = if_atp_field=>sc_datatype-character
                        abapdictionarydatatypelength = 40 abapoutputlengthvalue = 40
                        charcinternalid = '1234567890' ).

    environment->insert_test_data( i_data = lt_charctlgclfncharval ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
    DATA ls_value_exp TYPE i_prodalloccharcvaluevh .
    ls_value_exp-prodalloccharc = 'CLFNVALUE'.
    ls_value_exp-prodalloccharcdesc = 'Classification Value Description'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.

    cl_aunit_assert=>assert_equals( exp = 1 act = lv_count_act ).

    th_atp_coordinator=>assert_equals_ignoring_order(
      EXPORTING
        it_act   = lt_value_act
        it_exp   = lt_value_exp
    ).
  ENDMETHOD.

  METHOD field_cat_value_w_val_grp.

    DATA: ls_catalog_path      TYPE pactlg_path,
          lt_value_exp         TYPE tbl_atp_charc_value_value_help,
          ls_value_exp         LIKE LINE OF lt_value_exp,
          lt_material_vh       TYPE TABLE OF i_materialstdvh,
          lt_value_group_value TYPE TABLE OF i_alloccharcctlgvalgrpval.

    lt_value_group_value = VALUE #( ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'B1'
                                      charcctlgvaluegroupvalueuuid = 'C1'
                                      charccatalogvaluegroupvalue  = 'MatGrp-A' )
                                    ( prodalloccharccataloguuid    = 'A2'
                                      prodalloccharcctlgpathuuid   = 'B2'
                                      charcctlgvaluegroupvalueuuid = 'C2'
                                      charccatalogvaluegroupvalue  = 'MatGrp-B' )
                                      ).

    environment->insert_test_data( i_data = lt_value_group_value ).

    SELECT * FROM i_alloccharcctlgvalgrpval INTO TABLE @DATA(lt_test).

    SELECT * FROM i_alloccharcctlgvalgrpval INTO TABLE @DATA(lt_test_2)
      WHERE i_alloccharcctlgvalgrpval~prodalloccharcctlgpathuuid = 'B1000000000000000000000000000000'.

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid     = 'B1'
                        prodalloccharcvaluehelp        = 'I_ALLOCCHARCCTLGVALGRPVAL'
                        prodalloccharcvalhelptblfield  = 'CharcCatalogValueGroupValue'
                        prodalloccharcvalhelptextlink  = '_Text'
                        prodalloccharcvalhelptxttblfld = 'CharcCtlgValGrpValDescription' ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
*    ls_value_exp-prodalloccharcctlgpathuuid = 'B1'.
    ls_value_exp-prodalloccharc             = 'MatGrp-A'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.

    th_atp_coordinator=>assert_equals_ignoring_order(
      EXPORTING
        it_act   = lt_value_act
        it_exp   = lt_value_exp
    ).

  ENDMETHOD.

  METHOD field_cat_val_clfn.
    DATA ls_catalog_path TYPE pactlg_path.
    DATA lt_value_exp TYPE tbl_atp_charc_value_value_help.
    DATA lt_charctlgclfncharval TYPE TABLE OF p_charcctlgclfncharcvalue.
    lt_charctlgclfncharval = VALUE #( ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description' ) ).

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '1245678930'
                        prodalloccharcvaluehelp = 'P_CHARCCTLGCLFNCHARCVALUE'
                        prodalloccharcvalhelptblfield = 'CHARCVALUE'
                        prodalloccharcvalhelptxttblfld = 'CHARCVALUEDESCRIPTION'
                        abapdictionarydatatype = if_atp_field=>sc_datatype-character
                        abapdictionarydatatypelength = 40 abapoutputlengthvalue = 40
                        charcinternalid = '1234567890' ).

    environment->insert_test_data( i_data = lt_charctlgclfncharval ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
    DATA ls_value_exp TYPE i_prodalloccharcvaluevh .
    ls_value_exp-prodalloccharc = 'CLFNVALUE'.
    ls_value_exp-prodalloccharcdesc = 'Classification Value Description'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.

    cl_aunit_assert=>assert_equals( exp = 1 act = lv_count_act ).

    th_atp_coordinator=>assert_equals_ignoring_order(
      EXPORTING
        it_act   = lt_value_act
        it_exp   = lt_value_exp
    ).
  ENDMETHOD.

  METHOD field_cat_val_clfn_txt.
    DATA ls_catalog_path TYPE pactlg_path.
    DATA lt_value_exp TYPE tbl_atp_charc_value_value_help.
    DATA lt_charctlgclfncharval TYPE TABLE OF p_charcctlgclfncharcvalue.
    lt_charctlgclfncharval = VALUE #( ( charcinternalid = '1234567891'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description1' ) ).

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '1245678931'
                        prodalloccharcvaluehelp = 'P_CHARCCTLGCLFNCHARCVALUE'
                        prodalloccharcvalhelptblfield = 'CHARCVALUE'
                        prodalloccharcvalhelptxttblfld = 'CHARCVALUEDESCRIPTION'
                        abapdictionarydatatype = if_atp_field=>sc_datatype-character
                        abapdictionarydatatypelength = 40 abapoutputlengthvalue = 40
                        charcinternalid = '1234567891' ).

    environment->insert_test_data( i_data = lt_charctlgclfncharval ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
    SELECT SINGLE charcvaluedescription FROM p_charcctlgclfncharcvalue
      WHERE charcvalue = 'CLFNVALUE'
        AND  charcinternalid = '1234567891'
    INTO @DATA(lv_text).

    cl_aunit_assert=>assert_equals( exp = lt_value_act[ 1 ]-prodalloccharcdesc act = lv_text ).

  ENDMETHOD.

  METHOD field_cat_val_clfn_filter.
    DATA: ls_catalog_path        TYPE pactlg_path,
          lt_value_exp           TYPE tbl_atp_charc_value_value_help,
          lt_charctlgclfncharval TYPE TABLE OF p_charcctlgclfncharcvalue,
          lt_id_selopt           TYPE /iwbep/t_cod_select_options,
          lt_desc_selopt         TYPE /iwbep/t_cod_select_options.

    lt_charctlgclfncharval = VALUE #( ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description' )
                                       ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE1'
                                        charcvaluedescription = 'Classification Value Description1' )
                                       ( charcinternalid = '1234567890'
                                        charcvalue = 'CHARVALUE'
                                        charcvaluedescription = 'Char Value Description' )  ).

    INSERT VALUE #( sign = 'I' option = 'CP' low = '*CLFN*' ) INTO TABLE lt_id_selopt.
    INSERT VALUE #( sign = 'I' option = 'CP' low = '*Classification*' ) INTO TABLE lt_desc_selopt.

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '1245678930'
                        prodalloccharcvaluehelp = 'P_CHARCCTLGCLFNCHARCVALUE'
                        prodalloccharcvalhelptblfield = 'CHARCVALUE'
                        prodalloccharcvalhelptxttblfld = 'CHARCVALUEDESCRIPTION'
                        abapdictionarydatatype = if_atp_field=>sc_datatype-character
                        abapdictionarydatatypelength = 40 abapoutputlengthvalue = 40
                        charcinternalid = '1234567890' ).

    environment->insert_test_data( i_data = lt_charctlgclfncharval ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
        it_id_selopt    = lt_id_selopt
        it_desc_selopt  = lt_desc_selopt
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

* Expected data
    DATA ls_value_exp TYPE i_prodalloccharcvaluevh .
    ls_value_exp-prodalloccharc = 'CLFNVALUE'.
    ls_value_exp-prodalloccharcdesc = 'Classification Value Description'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.
    ls_value_exp-prodalloccharc = 'CLFNVALUE1'.
    ls_value_exp-prodalloccharcdesc = 'Classification Value Description1'.
    INSERT ls_value_exp INTO TABLE lt_value_exp.

    cl_aunit_assert=>assert_equals( exp = 2 act = lv_count_act ).

    th_atp_coordinator=>assert_equals_ignoring_order(
      EXPORTING
        it_act   = lt_value_act
        it_exp   = lt_value_exp
    ).
  ENDMETHOD.

  METHOD field_cat_val_clfn_wrng_fltr.
    DATA: ls_catalog_path        TYPE pactlg_path,
          lt_charctlgclfncharval TYPE TABLE OF p_charcctlgclfncharcvalue,
          lt_id_selopt           TYPE /iwbep/t_cod_select_options,
          lt_desc_selopt         TYPE /iwbep/t_cod_select_options.

    lt_charctlgclfncharval = VALUE #( ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE'
                                        charcvaluedescription = 'Classification Value Description' )
                                       ( charcinternalid = '1234567890'
                                        charcvalue = 'CLFNVALUE1'
                                        charcvaluedescription = 'Classification Value Description1' )  ).

    INSERT VALUE #( sign = 'I' option = 'CP' low = '*CHAR*' ) INTO TABLE lt_id_selopt.
    INSERT VALUE #( sign = 'I' option = 'CP' low = '*TEST*' ) INTO TABLE lt_desc_selopt.

    ls_catalog_path = VALUE #(
                        prodalloccharcctlgpathuuid = '1245678930'
                        prodalloccharcvaluehelp = 'P_CHARCCTLGCLFNCHARCVALUE'
                        prodalloccharcvalhelptblfield = 'CHARCVALUE'
                        prodalloccharcvalhelptxttblfld = 'CHARCVALUEDESCRIPTION'
                        abapdictionarydatatype = if_atp_field=>sc_datatype-character
                        abapdictionarydatatypelength = 40 abapoutputlengthvalue = 40
                        charcinternalid = '1234567890' ).

    environment->insert_test_data( i_data = lt_charctlgclfncharval ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_value_for_value_help(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( skip = 0 )
        it_id_selopt    = lt_id_selopt
        it_desc_selopt  = lt_desc_selopt
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).
    cl_aunit_assert=>assert_initial( act = lt_value_act msg = 'Unexpected result: 0 result lines expected' ).
  ENDMETHOD.

  METHOD field_cat_path.
    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    lt_catalog_path = VALUE #( ( prodalloccharcctlgpathuuid = '4711'
                        prodalloccharcvaluehelp = 'xxxx'
                        prodalloccharcvalhelptblfield = 'material'
                        prodalloccharcvalhelptextlink = '_text'
                        prodalloccharcvalhelptxttblfld = 'materialname' ) ).

    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_path(
      EXPORTING
        iv_catalog_path_uuid = '4711'
      IMPORTING
        es_catalog_path      = DATA(ls_catalog_path_act)
    ).

    DATA(ls_catalog_path_exp) = lt_catalog_path[ 1 ].
    CLEAR ls_catalog_path_act-client.

    cl_aunit_assert=>assert_equals( exp = ls_catalog_path_exp act = ls_catalog_path_act ).
  ENDMETHOD.

  METHOD field_cat_multiple_paths.

    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    DATA lt_catalog_path_exp TYPE pactlg_path_tab.

    lt_catalog_path = VALUE #( (
      prodalloccharcctlgpathuuid = '4711'
      prodalloccharcctlgpathintid = '4711'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'material'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'materialname'
    ) (
      prodalloccharcctlgpathuuid = '4712'
      prodalloccharcctlgpathintid = '4712'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'plant'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'plantname'
    ) (
      prodalloccharcctlgpathuuid = '4713'
      prodalloccharcctlgpathintid = '4713'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'customer'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'customername'
    ) ).

    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_paths(
      EXPORTING
        it_catalog_path_uuid = VALUE #( ( charc_path_uuid = '4712' ) ( charc_path_uuid = '4713' ) )
      IMPORTING
        et_catalog_path      = DATA(lt_catalog_path_act)
    ).

    lt_catalog_path_exp = VALUE #( (
      lt_catalog_path[ 2 ]
    ) (
      lt_catalog_path[ 3 ]
    ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_catalog_path_exp
        it_act = lt_catalog_path_act
        it_component_to_ignore = VALUE #( ( |CLIENT| ) )
    ).

  ENDMETHOD.

  METHOD field_cat_base_paths.

    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    DATA lt_catalog_path_ref TYPE TABLE OF pactlg_pathref.
    DATA lt_catalog_path_exp TYPE pactlg_path_tab.

    lt_catalog_path = VALUE #( (
      prodalloccharcctlgpathuuid = '4711'
      prodalloccharcctlgpathintid = '4711'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'material'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'materialname'
    ) (
      prodalloccharcctlgpathuuid = '4712'
      prodalloccharcctlgpathintid = '4712'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'plant'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'plantname'
    ) (
      prodalloccharcctlgpathuuid = '4713'
      prodalloccharcctlgpathintid = '4713'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'customer'
      prodalloccharcvalhelptextlink = '_text'
      prodalloccharcvalhelptxttblfld = 'customername'
    ) (
      prodalloccharcctlgpathuuid = '4714'
      prodalloccharcctlgpathintid = '4714'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'wrong'
      prodalloccharcvalhelptextlink = '_wrong'
      prodalloccharcvalhelptxttblfld = 'wrong'
    ) (
      prodalloccharcctlgpathuuid = '4715'
      prodalloccharcctlgpathintid = '4715'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'wrong'
      prodalloccharcvalhelptextlink = '_wrong'
      prodalloccharcvalhelptxttblfld = 'wrong'
    ) (
      prodalloccharcctlgpathuuid = '4716'
      prodalloccharcctlgpathintid = '4716'
      prodalloccharcvaluehelp = 'xxxx'
      prodalloccharcvalhelptblfield = 'wrong'
      prodalloccharcvalhelptextlink = '_wrong'
      prodalloccharcvalhelptxttblfld = 'wrong'
    ) ).

    environment->insert_test_data( i_data = lt_catalog_path ).

    lt_catalog_path_ref = VALUE #( ( prodalloccharcctlgpathrefuuid  = '1'
                                     prodalloccharccataloguuid      = 'A'
                                     prodalloccharcctlgpathuuid     = '4711'
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = '4712'
                                     basecharccatalogpathintid      = '4712' )
                                   ( prodalloccharcctlgpathrefuuid  = '2'
                                     prodalloccharccataloguuid      = 'B'
                                     prodalloccharcctlgpathuuid     = '4711'
                                     prodalloccharccatalogismain    = abap_false
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = '4713'
                                     basecharccatalogpathintid      = '4713' )
                                   ( prodalloccharcctlgpathrefuuid  = '3'
                                     prodalloccharccataloguuid      = 'A'
                                     prodalloccharcctlgpathuuid     = '4714'
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = '4715'
                                     basecharccatalogpathintid      = '4715' )
                                   ( prodalloccharcctlgpathrefuuid  = '4'
                                     prodalloccharccataloguuid      = 'B'
                                     prodalloccharcctlgpathuuid     = '4714'
                                     prodalloccharccatalogismain    = abap_false
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = '4716'
                                     basecharccatalogpathintid      = '4716' ) ).

    environment->insert_test_data( i_data = lt_catalog_path_ref ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_base_paths(
      EXPORTING
        it_catalog_path_uuid = VALUE #( ( charc_path_uuid = '4711' ) )
      IMPORTING
        et_catalog_path      = DATA(lt_catalog_path_act)
    ).

    lt_catalog_path_exp = VALUE #( (
      lt_catalog_path[ 2 ]
    ) (
      lt_catalog_path[ 3 ]
    ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_catalog_path_exp
        it_act = lt_catalog_path_act
        it_component_to_ignore = VALUE #( ( |CLIENT| ) )
    ).

  ENDMETHOD.

  METHOD field_cat_path_ref.
    DATA ls_catalog_path_ref TYPE if_atp_fieldcatalog_db=>ts_catalog_path_ref.
    DATA lt_catalog_path_ref TYPE TABLE OF pactlg_pathref.
    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    lt_catalog_path = VALUE #( ( prodalloccharcctlgpathuuid = 3
                                 prodalloccharcctlgpathintid = 3
                                 prodalloccharccataloguuid = 6
                                 abapdataelement = 'XX' ) ).

    ls_catalog_path_ref = VALUE #( prodalloccharcctlgpathrefuuid  = '4711'
                                   prodalloccharccataloguuid      = 1
                                   prodalloccharcctlgpathuuid     = 2
                                   prodalloccharccatalogismain    = abap_true
                                   basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                   basecharccatalogpathuuid       = 3
                                   basecharccatalogpathintid      = 3
                                   baseprodalloccharccataloguuid = 6
                                   basedataelement = 'XX' ) .
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    environment->insert_test_data( i_data = lt_catalog_path_ref ).
    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_path_ref(
      EXPORTING
        iv_catalog_path_ref_uuid = '4711'
      IMPORTING
        es_catalog_path_ref      = DATA(ls_catalog_path_ref_act)
    ).

    DATA(ls_catalog_path_ref_exp) = ls_catalog_path_ref.
    CLEAR ls_catalog_path_ref_act-client.

    cl_aunit_assert=>assert_equals( exp = ls_catalog_path_ref_exp
                                    act = ls_catalog_path_ref_act ).
  ENDMETHOD.


  METHOD field_cat_path_ref_by.
    DATA ls_catalog_path_ref TYPE if_atp_fieldcatalog_db=>ts_catalog_path_ref.
    DATA lt_catalog_path_ref TYPE TABLE OF pactlg_pathref.
    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    lt_catalog_path = VALUE #( ( prodalloccharcctlgpathuuid = 3
                                 prodalloccharcctlgpathintid = 3
                                 prodalloccharccataloguuid = 6
                                 abapdataelement = 'XX' ) ).

    ls_catalog_path_ref = VALUE #( prodalloccharcctlgpathrefuuid  = '4711'
                                   prodalloccharccataloguuid      = 1
                                   prodalloccharcctlgpathuuid     = 2
                                   prodalloccharccatalogismain    = abap_true
                                   basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                   basecharccatalogpathuuid       = 3
                                   basecharccatalogpathintid      = 3
                                   baseprodalloccharccataloguuid = 6
                                   basedataelement = 'XX' ) .
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    environment->insert_test_data( i_data = lt_catalog_path_ref ).
    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_path_refs_by(
      EXPORTING
        it_catalog_uuid       = VALUE #( ( catalog_uuid = 1 ) )
      IMPORTING
        et_catalog_path_ref   = DATA(lt_catalog_path_ref_act) ).

    DATA lt_catalog_path_ref_exp TYPE if_atp_fieldcatalog_db=>tt_catalog_path_ref .
    lt_catalog_path_ref_exp = VALUE #( ( ls_catalog_path_ref ) ).

    th_atp_coordinator=>assert_table_equals(
        EXPORTING
          it_exp = lt_catalog_path_ref_exp
          it_act = lt_catalog_path_ref_act
          it_component_to_ignore = VALUE #( ( |CLIENT| ) ) ).
  ENDMETHOD.

  METHOD field_cat_multiple_path_ref.

    DATA lt_catalog_path         TYPE TABLE OF pactlg_path.
    DATA lt_catalog_path_ref TYPE TABLE OF pactlg_pathref.
    DATA lt_catalog_path_ref_exp TYPE if_atp_fieldcatalog_db=>tt_catalog_path_ref.

    lt_catalog_path = VALUE #( prodalloccharccataloguuid = 6
                                    ( prodalloccharcctlgpathuuid = 3
                                      prodalloccharcctlgpathintid = 3
                                      abapdataelement = 'XX' )
                                    ( prodalloccharcctlgpathuuid = 4
                                      prodalloccharcctlgpathintid = 4
                                      abapdataelement = 'XX' )
                                    ( prodalloccharcctlgpathuuid = 5
                                      prodalloccharcctlgpathintid = 5
                                      abapdataelement = 'XX' ) ).

    lt_catalog_path_ref = VALUE #( ( prodalloccharcctlgpathrefuuid  = '4711'
                                     prodalloccharccataloguuid      = 1
                                     prodalloccharcctlgpathuuid     = 2
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = 3
                                     basecharccatalogpathintid      = 3 )
                                   ( prodalloccharcctlgpathrefuuid  = '4712'
                                     prodalloccharccataloguuid      = 1
                                     prodalloccharcctlgpathuuid     = 2
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = 5
                                     basecharccatalogpathintid      = 5 )
                                   ( prodalloccharcctlgpathrefuuid  = '4713'
                                     prodalloccharccataloguuid      = 1
                                     prodalloccharcctlgpathuuid     = 2
                                     prodalloccharccatalogismain    = abap_true
                                     basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                     basecharccatalogpathuuid       = 4
                                     basecharccatalogpathintid      = 4 ) ).

    environment->insert_test_data( i_data = lt_catalog_path_ref ).
    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).
    f_cut->if_atp_fieldcatalog_db~read_catalog_path_refs(
      EXPORTING
        it_catalog_path_ref_uuid = VALUE #( ( charc_path_ref_uuid = '4712' )
                                            ( charc_path_ref_uuid = '4713' ) )
      IMPORTING
        et_catalog_path_ref      = DATA(lt_catalog_path_ref_act) ).

    lt_catalog_path_ref_exp = VALUE #( baseprodalloccharccataloguuid = 6
                                       basedataelement = 'XX'
                                       ( prodalloccharcctlgpathrefuuid  = '4712'
                                         prodalloccharccataloguuid      = 1
                                         prodalloccharcctlgpathuuid     = 2
                                         prodalloccharccatalogismain    = abap_true
                                         basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                         basecharccatalogpathuuid       = 5
                                         basecharccatalogpathintid      = 5 )
                                       ( prodalloccharcctlgpathrefuuid  = '4713'
                                         prodalloccharccataloguuid      = 1
                                         prodalloccharcctlgpathuuid     = 2
                                         prodalloccharccatalogismain    = abap_true
                                         basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order
                                         basecharccatalogpathuuid       = 4
                                         basecharccatalogpathintid      = 4 ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_catalog_path_ref_exp
        it_act = lt_catalog_path_ref_act
        it_component_to_ignore = VALUE #( ( |CLIENT| ) )
        iv_ignore_order = abap_true ).

  ENDMETHOD.

  METHOD field_cat_info.
    DATA lt_catalog TYPE if_atp_fieldcatalog_db=>tt_catalog.
    DATA lv_uuid TYPE prodalloccharccataloguuid.

    lt_catalog = VALUE #( ( prodalloccharccataloguuid = '1' )
                          ( prodalloccharccataloguuid = '2' )
                          ( prodalloccharccataloguuid = '3' ) ).
    environment->insert_test_data( i_data = lt_catalog ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).

    lv_uuid = '1'.
    f_cut->if_atp_fieldcatalog_db~read_catalog_info(
      EXPORTING
        it_catalog_uuid = VALUE #( ( catalog_uuid = lv_uuid ) )
      IMPORTING
        et_catalog_info = DATA(lt_catalog_info_act)
    ).


    DATA lt_catalog_exp TYPE if_atp_fieldcatalog_db=>tt_catalog.
    lt_catalog_exp = VALUE #( ( client = sy-mandt
                                prodalloccharccataloguuid = '1' ) ).

    cl_aunit_assert=>assert_equals( act = lt_catalog_info_act
                                    exp = lt_catalog_exp ).

  ENDMETHOD.

  METHOD field_cat_info_via_type.
    DATA lt_catalog TYPE if_atp_fieldcatalog_db=>tt_catalog.

    lt_catalog = VALUE #( ( prodalloccharccataloguuid = '1' prodalloccharccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_bop )
                          ( prodalloccharccataloguuid = '2' )
                          ( prodalloccharccataloguuid = '3' ) ).
    environment->insert_test_data( i_data = lt_catalog ).
    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_catalog_info_via_type(
      EXPORTING
        iv_catalog_type     = if_prodalloccharccatalogtype_c=>sc_sales_order
        iv_catalog_use_type = if_prodalloccharcctlgusetype_c=>sc_bop
      IMPORTING
        es_catalog_info     = DATA(ls_catalog_info_act)
    ).


    DATA ls_catalog_info_exp TYPE pactlg.
    ls_catalog_info_exp = VALUE #( client                       = sy-mandt
                                   prodalloccharccataloguuid    = '1'
                                   prodalloccharccatalogtype    = if_prodalloccharccatalogtype_c=>sc_sales_order
                                   prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_bop ).

    cl_aunit_assert=>assert_equals( act = ls_catalog_info_act
                                    exp = ls_catalog_info_exp ).

  ENDMETHOD.


  METHOD field_cat_path_text.

    TYPES: tt_catalog_text TYPE TABLE OF i_prodalloccharcctlgpathpicker.

    DATA: lt_catalog_text        TYPE tt_catalog_text,
          lt_catalog_path_int_id TYPE if_atp_data_access=>tt_catalog_path_int_id,
          lt_parameter           TYPE if_osql_param_values_config=>ty_parameter_value_pairs.

    lt_catalog_text = VALUE #( ( prodalloccharcctlgpathintid = '1' prodalloccharcctlgpathdesc = 'UnitTestText'       )
                               ( prodalloccharcctlgpathintid = '2' prodalloccharcctlgpathdesc = 'UnitTestText_Wrong' )  ).

    lt_parameter = VALUE #( ( parameter_name  = 'P_HASTEXT'
                              parameter_value = abap_true ) ).

    environment->insert_test_data( i_data = lt_catalog_text i_parameter_values = lt_parameter ).

    lt_catalog_path_int_id = VALUE #( ( charc_path_int_id = '1' ) ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_catalog_path_text(
      EXPORTING
        it_catalog_path_int_id = lt_catalog_path_int_id
      IMPORTING
        et_catalog_path_text   = DATA(lt_catalog_path_text_act)
    ).

    DATA: lt_catalog_path_text_exp LIKE lt_catalog_path_text_act.

    lt_catalog_path_text_exp = VALUE #( ( charc_path_int_id = '1' text = 'UnitTestText' ) ).

    cl_aunit_assert=>assert_equals( act = lt_catalog_path_text_act
                                    exp = lt_catalog_path_text_exp ).

  ENDMETHOD.


  METHOD field_cat_paths_by.

    DATA lt_catalog_path TYPE TABLE OF pactlg_path.
    DATA lt_catalog_path_exp TYPE pactlg_path_tab.

    lt_catalog_path = VALUE #( ( prodalloccharcctlgpathuuid     = '13'
                                 prodalloccharcctlgpathintid    = '13'
                                 prodalloccharccatalogtype      = if_prodalloccharccatalogtype_c=>sc_stock_transport_order
                                 prodalloccharccatalogusetype   = if_prodalloccharcctlgusetype_c=>sc_bop         )
                               ( prodalloccharcctlgpathuuid     = '4711'
                                 prodalloccharcctlgpathintid    = '4711'
                                 prodalloccharccatalogtype      = if_prodalloccharccatalogtype_c=>sc_sales_order
                                 prodalloccharccatalogusetype   = if_prodalloccharcctlgusetype_c=>sc_bop         )
                               ( prodalloccharcctlgpathuuid     = '4712'
                                 prodalloccharcctlgpathintid    = '4712'
                                 prodalloccharccatalogtype      = if_prodalloccharccatalogtype_c=>sc_sales_order
                                 prodalloccharccatalogusetype   = if_prodalloccharcctlgusetype_c=>sc_bop
                                 prodalloccharcctlgpathishidden = abap_true         )
                                 ).

    environment->insert_test_data( i_data = lt_catalog_path ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_catalog_paths_by(
      EXPORTING
        iv_catalog_use_type = if_prodalloccharcctlgusetype_c=>sc_bop
        iv_catalog_type     = if_prodalloccharccatalogtype_c=>sc_sales_order
      IMPORTING
        et_catalog_path     = DATA(lt_catalog_path_act)
    ).

    lt_catalog_path_exp = VALUE #( (
      lt_catalog_path[ 2 ]
    ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_catalog_path_exp
        it_act = lt_catalog_path_act
        it_component_to_ignore = VALUE #( ( |CLIENT| ) )
    ).


  ENDMETHOD.


  METHOD field_cat_value_groups.

    DATA: lt_value_group_value TYPE TABLE OF pactlg_grpval,
          lt_parent_path_value TYPE TABLE OF pactlg_parval,
          lt_catalog_path_uuid TYPE if_atp_data_access=>tt_fc_catalog_path_uuid.

    lt_catalog_path_uuid = VALUE #( ( charc_path_uuid = 'B1' ) ).

    lt_value_group_value = VALUE #( ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'B1'
                                      charcctlgvaluegroupvalueuuid = 'C1'
                                      charccatalogvaluegroupvalue  = 'MatGrp-A' )
                                    ( prodalloccharccataloguuid    = 'A1'
                                      prodalloccharcctlgpathuuid   = 'B1'
                                      charcctlgvaluegroupvalueuuid = 'C2'
                                      charccatalogvaluegroupvalue  = 'MatGrp-B' )
                                      ).

    lt_parent_path_value = VALUE #( ( prodalloccharccataloguuid      = 'A1'
                                      prodalloccharcctlgparpathintid = 'D1'
                                      charcctlgparentpathvalueuuid   = 'E1'
                                      charcctlgvaluegroupvalueuuid   = 'C1'
                                      charccatalogparentpathvalue    = 'Mat-A1' )
                                    ( prodalloccharccataloguuid      = 'A1'
                                      prodalloccharcctlgparpathintid = 'D1'
                                      charcctlgparentpathvalueuuid   = 'E2'
                                      charcctlgvaluegroupvalueuuid   = 'C1'
                                      charccatalogparentpathvalue    = 'Mat-A2' )
                                    ( prodalloccharccataloguuid      = 'A1'
                                      prodalloccharcctlgparpathintid = 'D2'
                                      charcctlgparentpathvalueuuid   = 'E3'
                                      charcctlgvaluegroupvalueuuid   = 'C2'
                                      charccatalogparentpathvalue    = 'Mat-B1' )
                                    ( prodalloccharccataloguuid      = 'A1'
                                      prodalloccharcctlgparpathintid = 'D2'
                                      charcctlgparentpathvalueuuid   = 'E4'
                                      charcctlgvaluegroupvalueuuid   = 'C2'
                                      charccatalogparentpathvalue    = 'Mat-B2' )
                                      ).

    environment->insert_test_data( i_data = lt_value_group_value ).
    environment->insert_test_data( i_data = lt_parent_path_value ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_value_groups(
      EXPORTING
        it_catalog_path_uuid  = lt_catalog_path_uuid
      IMPORTING
        et_value_group_value  = DATA(lt_value_group_value_act)
        et_value_group_parent = DATA(lt_value_group_parent_act)
    ).

    DATA: lt_value_group_value_exp  LIKE lt_value_group_value_act,
          lt_value_group_parent_exp LIKE lt_value_group_parent_act.

    lt_value_group_value_exp = VALUE #( ( group_uuid              = 'C1'
                                          group_path_uuid         = 'B1'
                                          group_value             = 'MatGrp-A'
                                          group_value_is_fallback = '' )
                                        ( group_uuid              = 'C2'
                                          group_path_uuid         = 'B1'
                                          group_value             = 'MatGrp-B'
                                          group_value_is_fallback = '' ) ).

    lt_value_group_parent_exp = VALUE #( ( parent_value       = 'Mat-A1'
                                           group_uuid         = 'C1'
                                           parent_uuid        = 'E1'
                                           parent_path_int_id = 'D1' )
                                         ( parent_value       = 'Mat-A2'
                                           group_uuid         = 'C1'
                                           parent_uuid        = 'E2'
                                           parent_path_int_id = 'D1' )
                                         ( parent_value       = 'Mat-B1'
                                           group_uuid         = 'C2'
                                           parent_uuid        = 'E3'
                                           parent_path_int_id = 'D2' )
                                         ( parent_value       = 'Mat-B2'
                                           group_uuid         = 'C2'
                                           parent_uuid        = 'E4'
                                           parent_path_int_id = 'D2' ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_value_group_parent_exp
        it_act = lt_value_group_parent_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp = lt_value_group_value_exp
        it_act = lt_value_group_value_act
    ).

  ENDMETHOD.


  METHOD all_path_refs_for_charc.

    DATA: lt_catalog_path           TYPE TABLE OF pactlg_path,
          ls_catalog_path           LIKE LINE OF lt_catalog_path,
          lt_catalog_path_ref       TYPE TABLE OF pactlg_pathref,
          ls_catalog_path_ref       LIKE LINE OF lt_catalog_path_ref,
          lt_catalog_path_exp       TYPE pactlg_path_tab,
          lt_path_ref_for_charc     TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc_input,
          lt_path_ref_for_charc_exp TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc.

    lt_path_ref_for_charc_exp = VALUE #( ( given_path_uuid = 'E1'  requested_catalog_uuid = 'D2' resulting_path_uuid = 'E2'  ) ).

    lt_path_ref_for_charc = CORRESPONDING #( lt_path_ref_for_charc_exp DISCARDING DUPLICATES ).

    ls_catalog_path = VALUE #(
      prodalloccharcctlgpathuuid     = '4710'
      prodalloccharccatalogtype      = if_prodalloccharccatalogtype_c=>sc_sales_order
      prodalloccharccatalogusetype   = if_prodalloccharcctlgusetype_c=>sc_bop
      prodalloccharccatalogcharctype = if_pacharccatalogcharctype_c=>sc_base
      prodalloccharccatalogpathtype  = if_pacharccatalogpathtype_c=>sc_charcacteristic
      abapdataelement                = 'MATNR' ).

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E1'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_sales_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D1'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E2'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D2'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E3'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_mixed.
    ls_catalog_path-prodalloccharccataloguuid   = 'D3'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    environment->insert_test_data( i_data = lt_catalog_path ).

    ls_catalog_path_ref = VALUE #( prodalloccharcctlgpathrefuuid  = '13'
                                   prodalloccharccataloguuid      = 'D1'
                                   prodalloccharcctlgpathuuid     = '4710'
                                   basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order ) .

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F1'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E3'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E1'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F2'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E3'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E2'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    environment->insert_test_data( i_data = lt_catalog_path_ref ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_all_path_refs_for_charc(
      EXPORTING
        it_path_ref_for_charc = lt_path_ref_for_charc
      IMPORTING
        et_path_ref_for_charc = DATA(lt_path_ref_for_charc_act)
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp                 = lt_path_ref_for_charc_exp
        it_act                 = lt_path_ref_for_charc_act
        it_component_to_ignore = VALUE #( ( |RESULTING_PATH_INT_UUID| ) )
    ).

  ENDMETHOD.

  METHOD all_path_refs_for_charc_mul.

    DATA: lt_catalog_path           TYPE TABLE OF pactlg_path,
          ls_catalog_path           LIKE LINE OF lt_catalog_path,
          lt_catalog_path_ref       TYPE TABLE OF pactlg_pathref,
          ls_catalog_path_ref       LIKE LINE OF lt_catalog_path_ref,
          lt_catalog_path_exp       TYPE pactlg_path_tab,
          lt_path_ref_for_charc     TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc_input,
          lt_path_ref_for_charc_exp TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc.

    lt_path_ref_for_charc_exp = VALUE #( ( given_path_uuid = 'E1'  requested_catalog_uuid = 'D2' resulting_path_uuid = 'E2'  )
                                         ( given_path_uuid = 'E3'  requested_catalog_uuid = 'D2' resulting_path_uuid = 'E2'  )
                                         ( given_path_uuid = 'E2'  requested_catalog_uuid = 'D3' resulting_path_uuid = 'E3'  )

                                         ( given_path_uuid = 'E5'  requested_catalog_uuid = 'D1' resulting_path_uuid = 'E4'  )

                                         ( given_path_uuid = 'E11' requested_catalog_uuid = 'D3' resulting_path_uuid = 'E13' ) ).

    lt_path_ref_for_charc = CORRESPONDING #( lt_path_ref_for_charc_exp DISCARDING DUPLICATES ).

    ls_catalog_path = VALUE #(
      prodalloccharcctlgpathuuid     = '4710'
      prodalloccharccatalogtype      = if_prodalloccharccatalogtype_c=>sc_sales_order
      prodalloccharccatalogusetype   = if_prodalloccharcctlgusetype_c=>sc_bop
      prodalloccharccatalogcharctype = if_pacharccatalogcharctype_c=>sc_base
      prodalloccharccatalogpathtype  = if_pacharccatalogpathtype_c=>sc_charcacteristic
      abapdataelement                = 'MATNR' ).

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E1'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_sales_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D1'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E2'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D2'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E3'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_mixed.
    ls_catalog_path-prodalloccharccataloguuid   = 'D3'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    lt_catalog_path_exp = lt_catalog_path.

    ls_catalog_path-prodalloccharccatalogpathtype = if_pacharccatalogpathtype_c=>sc_node.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E4'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_sales_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D1'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E5'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D2'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E6'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_mixed.
    ls_catalog_path-prodalloccharccataloguuid   = 'D3'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharccatalogpathtype = if_pacharccatalogpathtype_c=>sc_charcacteristic.
    ls_catalog_path-prodalloccharccatalogusetype  = if_prodalloccharcctlgusetype_c=>sc_abc.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E7'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_sales_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D4'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E8'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D5'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E9'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_mixed.
    ls_catalog_path-prodalloccharccataloguuid   = 'D6'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_bop.
    ls_catalog_path-abapdataelement              = 'WERKS_D'.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E11'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_sales_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D1'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E12'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    ls_catalog_path-prodalloccharccataloguuid   = 'D2'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    ls_catalog_path-prodalloccharcctlgpathuuid  = 'E13'.
    ls_catalog_path-prodalloccharcctlgpathintid = ls_catalog_path-prodalloccharcctlgpathuuid.
    ls_catalog_path-prodalloccharccatalogtype   = if_prodalloccharccatalogtype_c=>sc_mixed.
    ls_catalog_path-prodalloccharccataloguuid   = 'D3'.
    INSERT ls_catalog_path INTO TABLE lt_catalog_path.

    environment->insert_test_data( i_data = lt_catalog_path ).

    ls_catalog_path_ref = VALUE #( prodalloccharcctlgpathrefuuid  = '13'
                                   prodalloccharccataloguuid      = 'D1'
                                   prodalloccharcctlgpathuuid     = '4710'
                                   basecharacteristiccatalogtype  = if_prodalloccharccatalogtype_c=>sc_sales_order ) .

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F1'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E3'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E1'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F2'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E3'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E2'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F3'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E6'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E4'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F4'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E6'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E5'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F5'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E13'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E11'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    ls_catalog_path_ref-prodalloccharcctlgpathrefuuid = 'F6'.
    ls_catalog_path_ref-prodalloccharcctlgpathuuid    = 'E13'.
    ls_catalog_path_ref-prodalloccharccataloguuid     = 'D3'.
    ls_catalog_path_ref-basecharccatalogpathuuid      = 'E12'.
    ls_catalog_path_ref-basecharccatalogpathintid     = ls_catalog_path_ref-basecharccatalogpathuuid.
    ls_catalog_path_ref-basecharacteristiccatalogtype = if_prodalloccharccatalogtype_c=>sc_stock_transport_order.
    INSERT CORRESPONDING #( ls_catalog_path_ref ) INTO TABLE lt_catalog_path_ref.

    environment->insert_test_data( i_data = lt_catalog_path_ref ).

    f_cut = NEW cl_atp_fieldcatalog_db( ).

    f_cut->if_atp_fieldcatalog_db~read_all_path_refs_for_charc(
      EXPORTING
        it_path_ref_for_charc = lt_path_ref_for_charc
      IMPORTING
        et_path_ref_for_charc = DATA(lt_path_ref_for_charc_act)
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_exp                 = lt_path_ref_for_charc_exp
        it_act                 = lt_path_ref_for_charc_act
        it_component_to_ignore = VALUE #( ( |RESULTING_PATH_INT_UUID| ) )
    ).

  ENDMETHOD.

ENDCLASS.