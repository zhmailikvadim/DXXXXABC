class CL_ATP_INFO_API_GET_AVAILY definition
  public
  create public .

public section.

  interfaces IF_ATP_INFO_API_GET_AVAILY .

  aliases GET_TIMESERIES
    for IF_ATP_INFO_API_GET_AVAILY~GET_TIMESERIES .
  aliases TIMESERIE_TAB_TYPE
    for IF_ATP_INFO_API_GET_AVAILY~TIMESERIE_TAB_TYPE .

  constants DEFAULT_POSITION_NUMBER type DECFLOAT16 value '000010' ##NO_TEXT.
  constants MAX_QUANTITY type OMENG value CL_ATP_S4_C=>ATP_MAX_QTY ##NO_TEXT.
  constants MAX_TIMESTAMP type TZNTSTMPS value '99991230235959' ##NO_TEXT.

  methods CONSTRUCTOR
    importing
      !ATP_INFO_API_CONVERTER type ref to IF_ATP_INFO_API_CONVERTER optional
      !ATP_INFO_API_DATA_PROVIDER type ref to CL_ATP_INFO_API_DATA_PROVIDER optional
      !ATP_INFO_API_VALIDATOR type ref to CL_ATP_INFO_API_VALIDATOR optional
      !ATP_INFO_API_CHARACTERISTIC type ref to IF_ATP_INFO_API_CHARACTERISTIC optional
      !ATP_INFO_API_STRATEGY type ref to IF_ATP_INFO_API_STRATEGY optional
      !ATP_INFO_API_USAGE type ref to IF_ATP_INFO_API_USAGE optional .
  methods SET_ATP_INFO_API_STRATEGY
    importing
      !ATP_INFO_API_STRATEGY type ref to IF_ATP_INFO_API_STRATEGY .
  methods GET_MRP_ELEMENT_BY_PURPOSE
    importing
      !ATPRELEVANTDOCUMENTPURPOSE type ATP_RELEVANT_DOCUMENT_PURPOSE
    returning
      value(MRP_ELEMENT) type DELKZ
    raising
      CX_ATP_INFO_API_FAIL .
protected section.

  data INFO_API_CONVERTER type ref to CL_ATP_INFO_API_CONVERTER .
  data DATA_PROVIDER type ref to CL_ATP_INFO_API_DATA_PROVIDER .
  data VALIDATOR type ref to CL_ATP_INFO_API_VALIDATOR .
  data CHARACTERISTICS_MAPPER type ref to IF_ATP_INFO_API_CHARACTERISTIC .
  data STRATEGY type ref to IF_ATP_INFO_API_STRATEGY .
  data ATP_INFO_API_USAGE type ref to IF_ATP_INFO_API_USAGE .
  class-data ATP_INFO_API_GET_AVAILY type ref to IF_ATP_INFO_API_GET_AVAILY .

  methods MRP_TIMESERIES_TO_RESULT
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTMRPAREA=>TIMESERIES_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTMRPAREA=>TIMESERIES_RESULT .
  methods FIND_TS_AT_DATE_4_MRPAREA
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTMRPAREA=>ATDATETME_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTMRPAREA=>ATDATETME_RESULT .
  methods FIND_TS_OF_QTY_4_MRPAREA
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTMRPAREA=>OFQTY_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTMRPAREA=>OFQTY_RESULT .
  methods FIND_TS_OF_QTY_4_SLOC
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTSTORELOC=>OFQTY_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTSTORELOC=>OFQTY_RESULT .
  methods FIND_TS_AT_DATE_4_SLOC
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTSTORELOC=>ATDATETME_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTSTORELOC=>ATDATETME_RESULT .
  methods STORLOC_TIMESERIES_TO_RESULT
    importing
      !KEY type ref to IF_ATPRLVTPRODUCTSTORELOC=>TIMESERIES_KEY
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type IF_ATPRLVTPRODUCTSTORELOC=>TIMESERIES_RESULT .
  methods GET_QUANTITY_OF_MATCHING_TS
    importing
      !PRODUCTAVAILABILITYUTCDATETIME type TZNTSTMPS
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type OMENG .
  methods GET_TIMESTAMP_OF_MATCHING_TS
    importing
      !AVAILABLEQUANTITYINBASEUNIT type OMENG
      !TIMESERIES type CL_ATP_INFO_API_GET_AVAILY=>TIMESERIE_TAB_TYPE
    returning
      value(RESULT) type TZNTSTMPS .
  PRIVATE SECTION.


ENDCLASS.



CLASS CL_ATP_INFO_API_GET_AVAILY IMPLEMENTATION.


  METHOD constructor.
    info_api_converter = COND #( WHEN atp_info_api_converter IS BOUND
                                      THEN CAST cl_atp_info_api_converter( atp_info_api_converter )
                                      ELSE NEW cl_atp_info_api_converter( ) ).
    data_provider = COND #( WHEN atp_info_api_data_provider IS BOUND
                                 THEN atp_info_api_data_provider
                                 ELSE NEW cl_atp_info_api_data_provider( ) ).
    validator = COND #( WHEN atp_info_api_validator IS BOUND
                             THEN atp_info_api_validator
                             ELSE NEW cl_atp_info_api_validator( ) ).
    characteristics_mapper = COND #( WHEN atp_info_api_characteristic IS BOUND
                                          THEN atp_info_api_characteristic
                                          ELSE NEW cl_atp_info_api_characteristic( ) ).
    strategy = COND #( WHEN atp_info_api_strategy IS BOUND
                            THEN atp_info_api_strategy
                            ELSE NEW cl_atp_info_api_strategy( ) ).
    me->atp_info_api_usage = COND #( WHEN atp_info_api_usage IS BOUND
                                          THEN atp_info_api_usage
                                          ELSE NEW cl_atp_info_api_usage( ) ).
  ENDMETHOD.


  METHOD find_ts_at_date_4_mrparea.

    IF timeseries IS NOT INITIAL.
      DATA(sap_uom) = timeseries[ 1 ]-BaseUnit.
      TRY.
          DATA(iso_uom) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iso_uom( sap_uom ).
        CATCH cx_gdt_conversion.
      ENDTRY.
    ENDIF.

    INSERT VALUE #(
        %cid_ref                           = ''
        %cid                               = key->%cid
        product                            = key->product
        mrparea                            = key->mrparea
        %param-availablequantityinbaseunit = get_quantity_of_matching_ts(
            productavailabilityutcdatetime = key->%param-productavailabilityutcdatetime
            timeseries                     = timeseries )
        %param-baseunit                    = sap_uom
        %param-baseunitisocode             = iso_uom ) INTO TABLE result.
  ENDMETHOD.


  METHOD find_ts_at_date_4_Sloc.
    IF timeseries IS NOT INITIAL.
      DATA(sap_uom) = timeseries[ 1 ]-BaseUnit.
      TRY.
          DATA(iso_uom) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iso_uom( sap_uom ).
        CATCH cx_gdt_conversion.
      ENDTRY.
    ENDIF.

    INSERT VALUE #(
        %cid_ref                           = ''
        %cid                               = key->%cid
        product                            = key->product
        mrparea                            = key->mrparea
        storagelocation                    = key->storagelocation
        %param-availablequantityinbaseunit = get_quantity_of_matching_ts(
            productavailabilityutcdatetime = key->%param-productavailabilityutcdatetime
            timeseries                     = timeseries )
        %param-baseunit                    = sap_uom
        %param-BaseUnitIsoCode             = iso_uom ) INTO TABLE result.

  ENDMETHOD.


  METHOD find_ts_of_qty_4_mrparea.
    IF timeseries IS NOT INITIAL.
      DATA(sap_timezonecode) = timeseries[ 1 ]-ProdAvailyPerdStrtTimeZone.
      TRY.
          DATA(iana_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_timezonecode ).
        CATCH cx_tzone_exception.
      ENDTRY.
    ENDIF.

    INSERT VALUE #( %cid_ref                              = ''
        %cid                                  = key->%cid
        product                               = key->product
        mrparea                               = key->mrparea
        %param-ProductAvailabilityUTCDateTime = get_timestamp_of_matching_ts(
            availablequantityinbaseunit = key->%param-AvailableQuantityInBaseUnit
            timeseries                  = timeseries )
                    %param-ProductAvailabilityTimeZone    = sap_timezonecode
                    %param-ProdAvailyTmeZnIANACode        = iana_timezonecode )
           INTO TABLE result.
  ENDMETHOD.


  METHOD find_ts_of_qty_4_sloc.
    IF timeseries IS NOT INITIAL.
      DATA(sap_timezonecode) = timeseries[ 1 ]-ProdAvailyPerdStrtTimeZone.
      TRY.
          DATA(iana_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_timezonecode ).
        CATCH cx_tzone_exception.
      ENDTRY.
    ENDIF.
    INSERT VALUE #( %cid_ref                              = ''
                    %cid                                  = key->%cid
                    product                               = key->product
                    mrparea                               = key->mrparea
                    storagelocation                       = key->storagelocation
                    %param-ProductAvailabilityUTCDateTime = get_timestamp_of_matching_ts(
                                                                availablequantityinbaseunit = key->%param-AvailableQuantityInBaseUnit
                                                                timeseries                  = timeseries )
                    %param-ProductAvailabilityTimeZone    = sap_timezonecode
                    %param-ProdAvailyTmeZnIANACode        = iana_timezonecode
                     ) INTO TABLE result.
  ENDMETHOD.


  METHOD get_mrp_element_by_purpose.
    CASE atprelevantdocumentpurpose.
      WHEN cl_atp_check_customizing_c=>atp_relevant_document_purpose-sales.
        mrp_element = cl_atpcat_c=>sales_order. "'VC'.
      WHEN 'STO'.
        mrp_element = cl_atpcat_c=>stock_transport_order. "'U1'.
      WHEN OTHERS.
        MESSAGE ID 'ATP_INFO_API' TYPE 'E' NUMBER '122' WITH atprelevantdocumentpurpose INTO DATA(msg) ##NEEDED.
        RAISE EXCEPTION TYPE cx_atp_info_api_fail USING MESSAGE.
    ENDCASE.
  ENDMETHOD.


  METHOD get_quantity_of_matching_ts.
    LOOP AT timeseries REFERENCE INTO DATA(timeseries_record).
      IF timeseries_record->ProdAvailyPerdStrtUTCDteTme > productavailabilityutcdatetime.
        EXIT.
      ENDIF.
      result = timeseries_record->AvailableQuantityInBaseUnit.
    ENDLOOP.
  ENDMETHOD.


  METHOD get_timestamp_of_matching_ts.
    LOOP AT timeseries REFERENCE INTO DATA(timeseries_record).
      result = timeseries_record->ProdAvailyPerdStrtUTCDteTme.
      IF timeseries_record->AvailableQuantityInBaseUnit >= AvailableQuantityInBaseUnit.
        RETURN.
      ENDIF.
    ENDLOOP.
    result = max_timestamp.
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_avail_at_datim_by_mrparea.
    LOOP AT keys REFERENCE INTO DATA(key).
      TRY.
          DATA(timeseries) = get_timeseries(
              material_number            = key->product
              mrparea                    = key->mrparea
              atpcheckingrule            = key->%param-atpcheckingrule
              atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
              characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid %tky = key->%tky ) TO failed-productmrparea.
          APPEND VALUE #( %cid = key->%cid
                          %tky = key->%tky
                          %msg = cl_atp_info_api_rap_message=>new_message_by_symsg(
                                     severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productmrparea.
          CONTINUE.

      ENDTRY.
      INSERT LINES OF find_ts_at_date_4_mrparea( key        = key
                                                 timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.

    " Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-mrparea
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-at_date_time
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_avail_at_datim_by_storloc.
    LOOP AT keys REFERENCE INTO DATA(key).
      TRY.
          DATA(timeseries) = get_timeseries(
              material_number            = key->product
              mrparea                    = key->mrparea
              storage_location           = key->storagelocation
              atpcheckingrule            = key->%param-atpcheckingrule
              atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
              characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid %tky = key->%tky ) TO failed-productstoragelocation.
          APPEND VALUE #(
              %cid = key->%cid
              %tky = key->%tky
              %msg = cl_atp_info_api_rap_message=>new_message_by_symsg( severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productstoragelocation.
          CONTINUE.

      ENDTRY.
      INSERT LINES OF find_ts_at_date_4_Sloc( key        = key
                                              timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.
    " Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-storage_location
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-at_date_time
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_avail_of_qty_by_mrparea.
    LOOP AT keys REFERENCE INTO DATA(key).
      TRY.
          DATA(timeseries) = get_timeseries(
              material_number            = key->product
              mrparea                    = key->mrparea
              atpcheckingrule            = key->%param-atpcheckingrule
              atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
              characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid %tky = key->%tky ) TO failed-productmrparea.
          APPEND VALUE #( %cid = key->%cid
                          %tky = key->%tky
                          %msg = cl_atp_info_api_rap_message=>new_message_by_symsg(
                                     severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productmrparea.
          CONTINUE.
      ENDTRY.
      INSERT LINES OF find_ts_of_qty_4_mrparea( key        = key
                                                timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.

" Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-mrparea
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-of_quantity
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_avail_of_qty_by_storloc.
    LOOP AT keys REFERENCE INTO DATA(key).
      TRY.
          DATA(timeseries) = get_timeseries(
                                 material_number            = key->product
                                 mrparea                    = key->mrparea
                                 storage_location           = key->storagelocation
                                 atpcheckingrule            = key->%param-atpcheckingrule
                                 atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
                                 characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid %tky = key->%tky ) TO failed-productstoragelocation.
          APPEND VALUE #( %cid = key->%cid
                          %tky = key->%tky
                          %msg = cl_atp_info_api_rap_message=>new_message_by_symsg( severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productstoragelocation.
          CONTINUE.

      ENDTRY.
      INSERT LINES OF find_ts_of_qty_4_sloc( key        = key
                                             timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.

" Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-storage_location
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-of_quantity
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_timeseries.
    DATA(plant) = data_provider->get_plant_for_mrp_area( mrparea ).
    IF plant IS INITIAL.
      RAISE EXCEPTION TYPE cx_atp_info_api_fail USING MESSAGE.
    ENDIF.

    IF validator->check_input( product = material_number mrp_area = mrparea storage_location = storage_location plant = plant checking_rule = atpcheckingrule ) = abap_false.
      RAISE EXCEPTION TYPE cx_atp_info_api_fail USING MESSAGE.
    ENDIF.

    characteristics_mapper->reset_atp_buffers( ).
    IF characteristics IS NOT INITIAL.
      TRY.
          characteristics_mapper->map_characteristics( characteristics ).
        CATCH cx_atp_info_api_ctlg_read_fail.
          RAISE EXCEPTION TYPE cx_atp_info_api_fail USING MESSAGE.
      ENDTRY.
    ENDIF.

    timeseries = strategy->get_availability( material_number  = material_number
                                             mrp_area         = mrparea
                                             mrp_element      = get_mrp_element_by_purpose( atprelevantdocumentpurpose )
                                             plant            = plant
                                             storage_location = storage_location
                                             atpcheckingrule  = atpcheckingrule ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_time_series_by_mrparea.
    LOOP AT keys REFERENCE INTO DATA(key).

      TRY.
          DATA(timeseries) = get_timeseries(
              material_number            = key->product
              mrparea                    = key->mrparea
              atpcheckingrule            = key->%param-atpcheckingrule
              atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
              characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid  %tky = key->%tky ) TO failed-productmrparea.
          APPEND VALUE #( %cid = key->%cid
                          %tky = key->%tky
                          %msg = cl_atp_info_api_rap_message=>new_message_by_symsg(
                                     severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productmrparea.
          CONTINUE.

      ENDTRY.
      INSERT LINES OF mrp_timeseries_to_result( key        = key
                                                timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.

" Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-mrparea
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-timeseries
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~get_time_series_by_storloc.
    LOOP AT keys REFERENCE INTO DATA(key).
      TRY.
          DATA(timeseries) = get_timeseries(
              material_number            = key->product
              mrparea                    = key->mrparea
              storage_location           = key->storagelocation
              atpcheckingrule            = key->%param-atpcheckingrule
              atprelevantdocumentpurpose = key->%param-_documentattributes-atprelevantdocumentpurpose
              characteristics            = CORRESPONDING #( key->%param-_documentattributes-_characteristics ) ).
        CATCH cx_atp_info_api_fail.
          APPEND VALUE #( %cid = key->%cid %tky = key->%tky ) TO failed-productstoragelocation.
          APPEND VALUE #(
              %cid = key->%cid
              %tky = key->%tky
              %msg = cl_atp_info_api_rap_message=>new_message_by_symsg( severity = if_abap_behv_message=>severity-error ) )
                 TO reported-productstoragelocation.
          CONTINUE.

      ENDTRY.
      INSERT LINES OF storloc_timeseries_to_result( key        = key
                                                    timeseries = timeseries ) INTO TABLE result.
    ENDLOOP.

    " Removed temporarily
*    CAST cl_atp_info_api_usage( atp_info_api_usage )->if_atp_info_api_usage~count_usage( function_name    = if_atp_info_api_usage=>function_name-susage_insert
*                                                                                         feature_name     = if_atp_info_api_usage=>feature-atp_info_api_usage
*                                                                                         feature_type     = if_atp_info_api_usage=>type-storage_location
*                                                                                         feature_subtype  = if_atp_info_api_usage=>subtype-timeseries
*                                                                                         feature_traffic  = lines( keys ) ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~read_a_atprlvtproductmrparea.
    result = data_provider->read_a_atprlvtproductmrparea( product = product mrparea = mrparea ).
  ENDMETHOD.


  METHOD if_atp_info_api_get_availy~read_a_atprlvtproductstorloc.
    result = data_provider->read_a_atprlvtproductstoreloc( product = product mrparea = mrparea storage_location = lgort ).
  ENDMETHOD.


  METHOD mrp_timeseries_to_result.
    IF timeseries IS NOT INITIAL.
      DATA(sap_start_timezonecode) = timeseries[ 1 ]-ProdAvailyPerdStrtTimeZone.
      DATA(sap_end_timezonecode)   = timeseries[ 1 ]-ProdAvailyPerdEndTimeZone.
      DATA(sap_uom) = timeseries[ 1 ]-BaseUnit.
      TRY.
          DATA(iana_start_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_start_timezonecode ).
          DATA(iana_end_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_end_timezonecode ).
        CATCH cx_tzone_exception.
        ENDTRY.
      TRY.
          DATA(iso_uom) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iso_uom( sap_uom ).
        CATCH cx_gdt_conversion.
      ENDTRY.
    ENDIF.

    LOOP AT timeseries REFERENCE INTO DATA(timeseries_record).
      INSERT VALUE #( %cid_ref                           = ''
                      %cid                               = key->%cid
                      product                            = key->product
                      mrparea                            = key->mrparea
                      %param-ProdAvailyPerdStrtUTCDteTme = timeseries_record->ProdAvailyPerdStrtUTCDteTme
                      %param-ProdAvailyPerdStrtTimeZone     = sap_start_timezonecode
                      %param-ProdAvailyPerdStrtTmznIANACode = iana_start_timezonecode
                      %param-ProdAvailyPerdEndUTCDteTme     = timeseries_record->ProdAvailyPerdEndUTCDteTme
                      %param-ProdAvailyPerdEndTimeZone      = sap_end_timezonecode
                      %param-ProdAvailyPerdEndTmznIANACode  = iana_end_timezonecode
                      %param-availablequantityinbaseunit    = timeseries_record->availablequantityinbaseunit
                      %param-baseunit                       = sap_uom
                      %param-BaseUnitIsoCode                = iso_uom ) INTO TABLE result.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_atp_info_api_strategy.
    strategy = atp_info_api_strategy.
  ENDMETHOD.


  METHOD storloc_timeseries_to_result.
    IF timeseries IS NOT INITIAL.
      DATA(sap_start_timezonecode) = timeseries[ 1 ]-ProdAvailyPerdStrtTimeZone.
      DATA(sap_end_timezonecode)   = timeseries[ 1 ]-ProdAvailyPerdEndTimeZone.
      DATA(sap_uom) = timeseries[ 1 ]-BaseUnit.
      TRY.
          DATA(iana_start_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_start_timezonecode ).
          DATA(iana_end_timezonecode) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iana_timezone( sap_end_timezonecode ).
        CATCH cx_tzone_exception.
      ENDTRY.
      TRY.
          DATA(iso_uom) = info_api_converter->if_atp_info_api_converter~convert_sap_to_iso_uom( sap_uom ).
        CATCH cx_gdt_conversion.
      ENDTRY.
    ENDIF.
    LOOP AT timeseries REFERENCE INTO DATA(timeseries_record).
      INSERT VALUE #( %cid_ref                           = ''
                      %cid                               = key->%cid
                      product                            = key->product
                      mrparea                            = key->mrparea
                      storagelocation                    = key->storagelocation
                      %param-ProdAvailyPerdStrtUTCDteTme = timeseries_record->ProdAvailyPerdStrtUTCDteTme
                      %param-ProdAvailyPerdStrtTimeZone     = sap_start_timezonecode
                      %param-ProdAvailyPerdStrtTmznIANACode = iana_start_timezonecode
                      %param-ProdAvailyPerdEndUTCDteTme     = timeseries_record->ProdAvailyPerdEndUTCDteTme
                      %param-ProdAvailyPerdEndTimeZone      = sap_end_timezonecode
                      %param-ProdAvailyPerdEndTmznIANACode  = iana_end_timezonecode
                      %param-availablequantityinbaseunit    = timeseries_record->availablequantityinbaseunit
                      %param-baseunit                       = sap_uom
                      %param-baseunitisocode                = iso_uom ) INTO TABLE result.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.