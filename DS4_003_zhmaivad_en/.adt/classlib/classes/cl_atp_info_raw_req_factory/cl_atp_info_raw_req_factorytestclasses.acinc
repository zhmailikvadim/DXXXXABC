*"* use this source file for your ABAP unit test classes

CLASS ltc_material_plant_req DEFINITION
  FOR TESTING
  RISK LEVEL HARMLESS
  DURATION SHORT.


  PRIVATE SECTION.

  METHODS:
    assert_same_req_object
      IMPORTING
        io_act TYPE REF TO if_atp_info_req
        io_exp TYPE REF TO if_atp_info_req.

  METHODS:
    t001_interprete_without_data FOR TESTING,
    t002_interprete_one_matwerks FOR TESTING.

ENDCLASS.

CLASS ltc_material_plant_req IMPLEMENTATION.

  METHOD assert_same_req_object.

    DATA: lt_scheduleline_for_read_act TYPE tbl_atpcs_s4,
          lt_scheduleline_for_read_exp TYPE tbl_atpcs_s4.


    cl_aunit_assert=>assert_bound(
      EXPORTING
        act = io_act
        msg = 'The actual request object is not bound'
    ).


    " NOTE: For now, we only find out because we don't have access to the internal check context
    "       Unfortunately, it's also not possible easily introduce a test double as the request object creation
    "       currently happens in the local rawreq classes.
    "       A proper way for to get access could be the introduction of a request factory (test double could create test instances)
    "       that is injected by the raw req factory. Drawback: A lot of new classes (3) just for testing...
    "       Maybe, the usage of the friend concept is also an option here.
    io_act->to_scheduleline_for_data_read(
      IMPORTING
        et_scheduleline = lt_scheduleline_for_read_act
    ).

    io_exp->to_scheduleline_for_data_read(
      IMPORTING
        et_scheduleline = lt_scheduleline_for_read_exp
    ).

    cl_aunit_assert=>assert_equals(
      EXPORTING
        act = lt_scheduleline_for_read_act
        exp = lt_scheduleline_for_read_exp
        msg = 'The request objects don''t have the same check context'
    ).

  ENDMETHOD.

  METHOD t001_interprete_without_data.

    DATA: lo_factory TYPE REF TO cl_atp_info_raw_req_factory,
          f_cut      TYPE REF TO if_atp_info_raw_req.

    DATA: lt_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_checking_rule TYPE prreg.

    DATA: lo_mock_pac_db TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat TYPE tbl_atpmat,
          lt_mock_atpplant TYPE tbl_atpplant.

    DATA: lo_tr_interpreted_result_act TYPE REF TO if_atp_info_req,
          lo_tr_interpreted_result_exp TYPE REF TO if_atp_info_req,
          lt_tr_check_context_exp      TYPE tbl_atpcs_s4.



    " 1. Build test input data
    lt_material_plant = VALUE #( ).
    lv_checking_rule = 'A'.



    " 2. Setup mock for
    "      a) customizing

    lt_mock_atpmat = VALUE #( (
      matnr = 'DB_INFO_MAIN'
      werks = 'DB03'
      berid = 'DB03'
      mtvfp = 'DB'
    ) ).

    lt_mock_atpplant = VALUE #( (
      werks = 'DB03'
    ) ).


    CREATE OBJECT lo_mock_pac_db.

    td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
    lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
      EXPORTING
        it_atpmat         = lt_mock_atpmat
        it_atpplant       = lt_mock_atpplant
    ).



    " 3. Get test object
    CREATE OBJECT lo_factory.
    f_cut = lo_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_material_plant
        iv_checking_rule  = lv_checking_rule
    ).

    lo_tr_interpreted_result_act = f_cut->interprete( ).



    " 4. Build expected result
    lt_tr_check_context_exp = VALUE #( ).

    CREATE OBJECT lo_tr_interpreted_result_exp TYPE cl_atp_info_req
      EXPORTING
        it_check_context = lt_tr_check_context_exp.



    " 5. Perform the assertions
    me->assert_same_req_object(
      EXPORTING
        io_act = lo_tr_interpreted_result_act
        io_exp = lo_tr_interpreted_result_exp
    ).


  ENDMETHOD.

  METHOD t002_interprete_one_matwerks.

    DATA: lo_factory TYPE REF TO cl_atp_info_raw_req_factory,
          f_cut      TYPE REF TO if_atp_info_raw_req.

    DATA: lt_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_checking_rule TYPE prreg.

    DATA: lo_mock_pac_db TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat TYPE tbl_atpmat,
          lt_mock_atpplant TYPE tbl_atpplant.

    DATA: lo_tr_interpreted_result_act TYPE REF TO if_atp_info_req,
          lo_tr_interpreted_result_exp TYPE REF TO if_atp_info_req,
          lt_tr_check_context_exp      TYPE tbl_atpcs_s4.



    " 1. Build test input data
    lt_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_checking_rule = 'A'.



    " 2. Setup mock for
    "      a) customizing

    lt_mock_atpmat = VALUE #( (
      matnr = 'DB_INFO_MAIN'
      werks = 'DB03'
      berid = 'DB03'
      mtvfp = 'DB'
    ) ).

    lt_mock_atpplant = VALUE #( (
      werks = 'DB03'
    ) ).


    CREATE OBJECT lo_mock_pac_db.

    td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
    lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
      EXPORTING
        it_atpmat         = lt_mock_atpmat
        it_atpplant       = lt_mock_atpplant
    ).



    " 3. Get test object
    CREATE OBJECT lo_factory.
    f_cut = lo_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_material_plant
        iv_checking_rule  = lv_checking_rule
    ).

    lo_tr_interpreted_result_act = f_cut->interprete( ).



    " 4. Build expected result
    lt_tr_check_context_exp = VALUE #( (
      matnr        = 'DB_INFO_MAIN'
      werks        = 'DB03'
      berid        = 'DB03'
      mtvfp        = 'DB'
      prreg        = 'A'
      pac_relevant = abap_true
    ) ).

    CREATE OBJECT lo_tr_interpreted_result_exp TYPE cl_atp_info_req
      EXPORTING
        it_check_context = lt_tr_check_context_exp.



    " 5. Perform the assertions
    me->assert_same_req_object(
      EXPORTING
        io_act = lo_tr_interpreted_result_act
        io_exp = lo_tr_interpreted_result_exp
    ).

  ENDMETHOD.

ENDCLASS.