*"* use this source file for your ABAP unit test classes

CLASS lcl_atp_info_req DEFINITION
  FOR TESTING
  RISK LEVEL HARMLESS
  DURATION SHORT.

  PRIVATE SECTION.

    METHODS:
      assert_same_res_object
        IMPORTING
          io_act TYPE REF TO cl_atp_info_res
          io_exp TYPE REF TO cl_atp_info_res.

    METHODS:
      t001_take_no_raw_results FOR TESTING,
      t002_take_raw_results_werksprf FOR TESTING.

ENDCLASS.

CLASS lcl_atp_info_req IMPLEMENTATION.

  METHOD assert_same_res_object.

    DATA: lt_availability_timeseries_act TYPE tbl_atp_info_res_availy_record,
          lt_availability_timeseries_exp TYPE tbl_atp_info_res_availy_record.


    cl_aunit_assert=>assert_bound(
      EXPORTING
        act = io_act
        msg = 'The actual request object is not bound'
    ).


    " NOTE: For now, we only find out equality by calling the same transformation method
    "       because we don't have access to the internal result attributes.
    "       We will need a way to mock the result object creation
    io_act->to_availability_timeseries(
      IMPORTING
        et_availability_timeseries = lt_availability_timeseries_act
    ).

    io_exp->to_availability_timeseries(
      IMPORTING
        et_availability_timeseries = lt_availability_timeseries_exp
    ).

    cl_aunit_assert=>assert_equals(
      EXPORTING
        act = lt_availability_timeseries_act
        exp = lt_availability_timeseries_exp
        msg = 'The result objects don''t transform to the same timeseries'
    ).

  ENDMETHOD.

  METHOD t001_take_no_raw_results.

    DATA: f_cut TYPE REF TO cl_atp_info_req.

    DATA: lt_in_check_context TYPE tbl_atpcs_s4,
          lt_in_chkkey        TYPE tbl_bsatp_chkkey,
          lt_in_single        TYPE tbl_bsatp_single_records.

    DATA: lo_mock_pac_db    TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat    TYPE tbl_atpmat,
          lt_mock_atpplant  TYPE tbl_atpplant,
          lv_test_date      TYPE dats,
          lv_test_timestamp TYPE timestamp.

    DATA: lo_tr_result_act TYPE REF TO cl_atp_info_res,
          lo_tr_result_exp TYPE REF TO cl_atp_info_res,
          lt_tr_chkkey_exp TYPE tbl_bsatp_chkkey,
          lt_tr_single_exp TYPE tbl_bsatp_single_records.



    " 1. Build test input data
    lt_in_chkkey = VALUE #( ).
    lt_in_single = VALUE #( ).



    " 2. Get test object
    CREATE OBJECT f_cut
      EXPORTING
        it_check_context = lt_in_check_context.

    f_cut->if_atp_info_req~take_raw_result(
      EXPORTING
        it_chkkey = lt_in_chkkey
        it_single = lt_in_single
    ).

    lo_tr_result_act = f_cut->get_result( ).



    " 4. Build expected result
    lt_tr_chkkey_exp = VALUE #( ).
    lt_tr_single_exp = VALUE #( ).

    CREATE OBJECT lo_tr_result_exp
      EXPORTING
        it_chkkey = lt_tr_chkkey_exp
        it_single = lt_tr_single_exp.



    " 5. Perform the assertions
    me->assert_same_res_object(
      EXPORTING
        io_act = lo_tr_result_act
        io_exp = lo_tr_result_exp
    ).

  ENDMETHOD.

  METHOD t002_take_raw_results_werksprf.

    DATA: f_cut TYPE REF TO cl_atp_info_req.

    DATA: lt_in_check_context TYPE tbl_atpcs_s4,
          lt_in_chkkey        TYPE tbl_bsatp_chkkey,
          lt_in_single        TYPE tbl_bsatp_single_records.

    DATA: lo_mock_pac_db    TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat    TYPE tbl_atpmat,
          lt_mock_atpplant  TYPE tbl_atpplant,
          lv_test_date      TYPE dats,
          lv_test_timestamp TYPE timestamp.

    DATA: lo_tr_result_act TYPE REF TO cl_atp_info_res,
          lo_tr_result_exp TYPE REF TO cl_atp_info_res,
          lt_tr_chkkey_exp TYPE tbl_bsatp_chkkey,
          lt_tr_single_exp TYPE tbl_bsatp_single_records.



    " 1. Build test input data
    lt_in_chkkey = VALUE #( (
      lvl_id   = 'DB03'
      lvl_type = cl_bsatp_c=>werkprf
      idx      = 1
      matnr    = 'DB_INFO_MAIN'
      werks    = 'DB03'
      berid    = 'DB03'
    ) ).

    lt_in_single = VALUE #( (
      chkkey_idx = 1
      atpdate    = cl_atp_s4_c=>atp_stock_date
      atpcat     = cl_atpcat_c=>stock_plant
      cattype    = cl_bsatp_c=>cattype_stock
      rcpqty     = 100
      atpqty     = 40
      catpqty    = 40
    ) (
      chkkey_idx = 1
      atpdate    = '20170220'
      atpcat     = cl_atpcat_c=>sales_order
      cattype    = cl_bsatp_c=>cattype_demand
      reqqty     = 60
      cnfqty     = 60
      atpqty     = 0
      catpqty    = 40
    ) ).



    " 2. Get test object
    CREATE OBJECT f_cut
      EXPORTING
        it_check_context = lt_in_check_context.

    f_cut->if_atp_info_req~take_raw_result(
      EXPORTING
        it_chkkey = lt_in_chkkey
        it_single = lt_in_single
    ).

    lo_tr_result_act = f_cut->get_result( ).



    " 4. Build expected result
    lt_tr_chkkey_exp = lt_in_chkkey.
    lt_tr_single_exp = lt_in_single.

    CREATE OBJECT lo_tr_result_exp
      EXPORTING
        it_chkkey = lt_tr_chkkey_exp
        it_single = lt_tr_single_exp.



    " 5. Perform the assertions
    me->assert_same_res_object(
      EXPORTING
        io_act = lo_tr_result_act
        io_exp = lo_tr_result_exp
    ).

  ENDMETHOD.

ENDCLASS.