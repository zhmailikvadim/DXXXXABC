"!@testing C_SA_STRPBILLINGWITHREFSDDOC
CLASS ltc_c_sa_strpbillingwithrefsdd DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    CLASS-DATA:
        environment TYPE REF TO if_cds_test_environment.
    CLASS-METHODS:
      class_setup
        RAISING
          cx_static_check,
      class_teardown.
    DATA:
      gt_act_results TYPE STANDARD TABLE OF c_sa_strpbillingwithrefsddoc  WITH EMPTY KEY,
      gs_act_results TYPE c_sa_strpbillingwithrefsddoc,
      test_data      TYPE REF TO if_cds_test_data,

      gt_sd_billgdocitem       TYPE STANDARD TABLE OF isdbillgdocitem WITH EMPTY KEY,
      gt_sd_salesdocitem       TYPE STANDARD TABLE OF isdsalesdocitem WITH EMPTY KEY,
      gt_sd_billingdoc       TYPE STANDARD TABLE OF isdbillingdoc WITH EMPTY KEY.

    METHODS:
      setup RAISING cx_static_check,

      prepare_testdata_set          FOR TESTING RAISING cx_static_check,

      aunit_for_cds_method          FOR TESTING RAISING cx_static_check,

      check_ref_sddoc_method.

ENDCLASS.

CLASS ltc_c_sa_strpbillingwithrefsdd IMPLEMENTATION.

  METHOD class_setup.
    environment = cl_cds_test_environment=>create( i_for_entity = 'C_SA_STRPBILLINGWITHREFSDDOC' ).
  ENDMETHOD.

  METHOD setup.
    environment->clear_doubles( ).
  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.

  METHOD prepare_testdata_set.
    "Prepare test data for 'gt_sd_billgdocitem'
    gt_sd_billgdocitem = VALUE #( BASE gt_sd_billgdocitem ( BillingDocument = '0090000970' BillingDocumentItem = '10'
                                 ReferenceSDDocument = '0070000030' ReferenceSDDocumentItem = '10'
                                 ReferenceSDDocumentCategory = 'L' SalesDocument = '0070000030'
                                 SalesDocumentItem = '10'
                                 ) ).

    gt_sd_billgdocitem = VALUE #( BASE gt_sd_billgdocitem ( BillingDocument = '0090000971' BillingDocumentItem = '10'
                                 ReferenceSDDocument = '0080000030' ReferenceSDDocumentItem = '10'
                                 ReferenceSDDocumentCategory = 'J' SalesDocument = '0000001001'
                                 SalesDocumentItem = '10'
                                 ) ).

    gt_sd_billgdocitem = VALUE #( BASE gt_sd_billgdocitem ( BillingDocument = '0090000972' BillingDocumentItem = '10'
                                 ReferenceSDDocument = '0090000971' ReferenceSDDocumentItem = '10'
                                 ReferenceSDDocumentCategory = 'M' SalesDocument = '0000001001'
                                 SalesDocumentItem = '10'
                                 ) ).

    test_data = cl_cds_test_data=>create( gt_sd_billgdocitem ).

    DATA(gt_sd_billgdocitem_test) = environment->get_double( i_name = 'I_BILLINGDOCUMENTITEM' ).
    gt_sd_billgdocitem_test->insert( test_data ).

    "Prepare test data for 'gt_sd_salesdocitem'
    gt_sd_salesdocitem = VALUE #( BASE gt_sd_salesdocitem ( SalesDocument = '0070000030' SalesDocumentItem = '10'
                                ReferenceSDDocument = '0090000030' ReferenceSDDocumentItem = '10'
                                ReferenceSDDocumentCategory = 'M'
                                ) ).

    gt_sd_salesdocitem = VALUE #( BASE gt_sd_salesdocitem ( SalesDocument = '0000001001' SalesDocumentItem = '10'
                                ReferenceSDDocument = '0000001000' ReferenceSDDocumentItem = '10'
                                ReferenceSDDocumentCategory = 'C'
                                ) ).

    test_data = cl_cds_test_data=>create( gt_sd_salesdocitem ).

    DATA(gt_sd_salesdocitem_test) = environment->get_double( i_name = 'I_SALESDOCUMENTITEM' ).
    gt_sd_salesdocitem_test->insert( test_data ).

    "Prepare test data for 'gt_sd_billingdoc'
    gt_sd_billingdoc = VALUE #( BASE gt_sd_billingdoc ( BillingDocument = '0090000970'
                              CompanyCode = '5900' FiscalYear = '2018' AccountingDocument = '1800000001'
                              ) ).

    gt_sd_billingdoc = VALUE #( BASE gt_sd_billingdoc ( BillingDocument = '0090000971'
                              CompanyCode = '5900' FiscalYear = '2018' AccountingDocument = '1800000002'
                              ) ).

    gt_sd_billingdoc = VALUE #( BASE gt_sd_billingdoc ( BillingDocument = '0090000972'
                              CompanyCode = '5900' FiscalYear = '2018' AccountingDocument = '1800000003'
                              ) ).

    test_data = cl_cds_test_data=>create( gt_sd_billingdoc ).

    DATA(gt_sd_billingdoc_test) = environment->get_double( i_name = 'I_BILLINGDOCUMENT' ).
    gt_sd_billingdoc_test->insert( test_data ).
  ENDMETHOD.

  METHOD aunit_for_cds_method.
    prepare_testdata_set( ).

    CLEAR gt_act_results.

    SELECT * FROM  c_sa_strpbillingwithrefsddoc INTO TABLE @gt_act_results.
    IF sy-subrc = 0 and gt_act_results is NOT INITIAL.
      check_ref_sddoc_method( ).
    ENDIF.

  ENDMETHOD.

  METHOD check_ref_sddoc_method.

    cl_abap_unit_assert=>assert_equals( act = lines( gt_act_results ) exp = 3 ).

    READ TABLE gt_act_results INTO gs_act_results WITH KEY billingdocument = '0090000970'.
    IF sy-subrc = 0.
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-BillingDocument
                                        exp =  '0090000970' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-ReferenceSDDocument
                                        exp =  '0090000030' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-CompanyCode
                                        exp = '5900' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-FiscalYear
                                        exp = '2018' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-AccountingDocument
                                        exp = '1800000001' ).
    ENDIF.

    CLEAR gs_act_results.

    READ TABLE gt_act_results INTO gs_act_results WITH KEY billingdocument = '0090000971'.
    IF sy-subrc = 0.
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-BillingDocument
                                        exp =  '0090000971' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-ReferenceSDDocument
                                        exp =  '' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-CompanyCode
                                        exp = '5900' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-FiscalYear
                                        exp = '2018' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-AccountingDocument
                                        exp = '1800000002' ).
    ENDIF.

    CLEAR gs_act_results.

    READ TABLE gt_act_results INTO gs_act_results WITH KEY billingdocument = '0090000972'.
    IF sy-subrc = 0.
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-BillingDocument
                                        exp =  '0090000972' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-ReferenceSDDocument
                                        exp =  '0090000971' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-CompanyCode
                                        exp = '5900' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-FiscalYear
                                        exp = '2018' ).
    cl_abap_unit_assert=>assert_equals( act = gs_act_results-AccountingDocument
                                        exp = '1800000003' ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.