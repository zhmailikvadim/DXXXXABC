class CL_HANDLE_MM definition
  public
  create public .

public section.
*"* public components of class CL_HANDLE_MM
*"* do not include other source files here!!!
  type-pools MMCNT .

  interfaces IF_ASYNC_SUBJECT_MM .
  interfaces IF_FIELDSELECTION_MM .
  interfaces IF_FLUSH_TRANSPORT_MM .
  interfaces IF_MESSAGE_OBJ_MM .
  interfaces IF_MODEL_MM .
  interfaces IF_SUBJECT_MM .

  types:
    begin of type_s_lookup_hash,                          "1428972
              ebeln type ekko-ebeln,
              ebelp type ekpo-ebelp,
              etenr type eket-etenr,
              zekkn type ekkn-zekkn,
              model type ref to cl_handle_mm,
        end of type_s_lookup_hash .
  types:
    type_t_lookup_hash type hashed table of type_s_lookup_hash
       with unique key ebeln ebelp etenr zekkn .

  constants C_NEW type I value 0 ##NO_TEXT.
  class-data MY_OBJTYP type MEPO_OBJDESC-OBJTYP read-only .
  data ID type I read-only .
  constants C_AVAILABLE type I value 1 ##NO_TEXT.
  data STATE type I read-only .
  constants C_VERIFY type I value 2 ##NO_TEXT.
  data MY_PARENT type ref to IF_MODEL_MM .
  constants C_DELETED type I value 3 ##NO_TEXT.

  methods MAP_ADDRESS_TO_API
    importing
      !IS_ADDRESS type IF_MM_PUR_PO_ADDRESS_UTILITY=>TY_ADDRESS_COMPLETE
    returning
      value(RS_ADDRESS_API) type MEPOADDRESSDATA .
  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR
    importing
      !IV_ADDRESS_HANDLING_ACTIVE type ABAP_BOOL optional
      !IO_ADDRESS_HANDLER type ref to IF_MM_PUR_PO_ADDRESS_UTILITY optional .
  methods SET_PARENT
    importing
      !IM_PARENT type ref to IF_MODEL_MM
    exceptions
      ALREADY_SET
      CANNOT_BE_SET .
  methods CAN_INITIATE_FLUSH
    exporting
      !EX_MODEL type ref to IF_MODEL_MM
    exceptions
      CANNOT_INITIATE .
  methods ADD_ITEM
    importing
      !IM_ITEM type ref to IF_MODEL_MM
    exceptions
      FAILURE .
  methods GET_ITEMS
    importing
      value(IM_ITEMS_WITH_ERROR) type MMPUR_BOOL optional
      value(IM_ENQ_ERR_MAT) type MMPUR_BOOL optional
      value(IM_ENQ_ERR_CON) type MMPUR_BOOL optional
    exporting
      !EX_ITEMS type MMPUR_MODELS .
  methods HAS_ITEMS
    exporting
      !EX_COUNT type I .
  methods REMOVE_ITEM
    importing
      !IM_ITEM type ref to IF_MODEL_MM
    exceptions
      FAILURE .
  methods REMOVE_ITEMS
    exceptions
      FAILURE .
  methods GET_ADDRESS_HANDLER
    returning
      value(RO_ADDRESS_HANDLER) type ref to IF_MM_PUR_PO_ADDRESS_UTILITY .
  methods SET_ADDRESS_HANDLER
    importing
      !IO_ADDRESS_HANDLER type ref to IF_MM_PUR_PO_ADDRESS_UTILITY .
  methods SET_STATE
    importing
      !IM_STATE type I .
  methods CHP_ADD_HASH_ENTRY
    importing
      !IM_DATA type ANY .
  methods CHP_REGISTER
    importing
      !IM_ACTION type MMCHP_CHP_ACTION
      !IM_HANDLE type ref to CL_HANDLE_MM optional .
  methods GET_HASH_ENTRY
  final
    importing
      !IS_DATA type CL_HANDLE_MM=>TYPE_S_LOOKUP_HASH
    exporting
      !EX_MODEL type ref to CL_HANDLE_MM .
  methods PROCESS_INPUT_FILTER
    importing
      !IM_DATA type ANY
      !IM_DATA_OLD type ANY
      !IM_USE_HANDLER type MMPUR_BOOL default MMPUR_YES
    exporting
      value(EX_DATA) type ANY
      value(EX_BAD_FIELDS) type MEPO_T_METAFIELD_MAPPING .
  methods CHECK_BADI_DATAX
    importing
      !IM_DATA_OLD type ANY
      !IM_DATA_NEW type ANY
      !IM_DATAX_OLD type ANY
    exporting
      !EX_DATAX_NEW type ANY .
  methods SET_HASH_ENTRY
  final
    importing
      !IS_DATA type CL_HANDLE_MM=>TYPE_S_LOOKUP_HASH .
  methods IS_ADDRESS_HANDLING_ACTIVE
    returning
      value(RV_ACTIVE) type ABAP_BOOL .
  methods SET_ADDRESS_HANDLING
    importing
      !IV_ADDRESS_HANDLING_ACTIVE type ABAP_BOOL
      !IR_ADDRESS_HANDLER type ref to IF_MM_PUR_PO_ADDRESS_UTILITY optional .
  methods GET_ADDRESS
    returning
      value(RS_ADDRESS) type IF_MM_PUR_PO_ADDRESS_UTILITY=>TY_ADDRESS_COMPLETE .
  methods GET_MEPOADDRESS_DATA
    returning
      value(RS_MEPOADDRESS) type MEPOADDRESSDATA .
  methods SET_ADDRESS
    importing
      !IS_ADDRESS type IF_MM_PUR_PO_ADDRESS_UTILITY=>TY_ADDRESS_COMPLETE .
protected section.

  types:
*"* protected components of class CL_HANDLE_MM
*"* do not include other source files here!!!
    BEGIN OF ty_mepo_address_hash_entry,
      node TYPE REF TO cl_handle_mm,
      data TYPE mepoaddressdata,
    END OF ty_mepo_address_hash_entry .
  types:
    tt_mepo_address_hash_entry TYPE SORTED TABLE OF ty_mepo_address_hash_entry WITH UNIQUE KEY node .
  types:
    BEGIN OF ty_mepo_addressx_hash_entry,
      node  TYPE REF TO cl_handle_mm,
      datax TYPE mepoaddressdatax,
    END OF ty_mepo_addressx_hash_entry .
  types:
    tt_mepo_addressx_hash_entry TYPE SORTED TABLE OF ty_mepo_addressx_hash_entry WITH UNIQUE KEY node .

  data MT_ADDR_HASH type TT_MEPO_ADDRESS_HASH_ENTRY .
  data MT_ADDRX_HASH type TT_MEPO_ADDRESSX_HASH_ENTRY .
  data MY_ITEMS type MMPUR_MODELS .
  data MV_ADDRESS_HANDLING_ACTIVE type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  data MV_NON_INTERACTIVE_MODE type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  data MV_RTTS_NAME type ABAP_COMPNAME .
  class-data MTH_HASH type TYPE_T_LOOKUP_HASH .
  data MR_ADDRESS_HANDLER type ref to IF_MM_PUR_PO_ADDRESS_UTILITY .

  methods GET_ADDRESSX_HASH_TAB
    returning
      value(RT_ADDRX_HASH) type TT_MEPO_ADDRESSX_HASH_ENTRY .
  methods GET_ADDRESS_HASH_TABLE
    returning
      value(RT_ADDR_HASH) type TT_MEPO_ADDRESS_HASH_ENTRY .
  methods FLUSH_DATA
    importing
      !IM_MODELS type MMPUR_MODELS
    exceptions
      ILLEGAL_CALL
      ERROR .
  methods GET_MAPPING
    exporting
      !EX_MAPPING type MEPO_T_METAFIELD_MAPPING
      !EX_FS_TEMPLATE type TTYP_FIELDSELECTION_MM .
  methods GET_INTERACTIVE_MODE
    returning
      value(RV_INTERACTIVE_MODE) type ABAP_BOOL .
  methods SET_INTERACTIVE_MODE
    importing
      !IV_INTERACTIVE_MODE type ABAP_BOOL .
private section.

*"* private components of class CL_HANDLE_MM
*"* do not include other source files here!!!
  data MO_RTTS type ref to IF_MMPUR_RTTS .
  data MR_ADDRESS_DATA type ref to if_mm_pur_po_address_utility=>ty_address_complete .
ENDCLASS.



CLASS CL_HANDLE_MM IMPLEMENTATION.


METHOD set_state.

  state = im_state.

ENDMETHOD.


METHOD SET_PARENT.


  IF NOT MY_PARENT IS INITIAL.
    RAISE ALREADY_SET.
  ELSE.
    IF NOT IM_PARENT IS INITIAL.
      MY_PARENT = IM_PARENT.
    ELSE.
      RAISE CANNOT_BE_SET.
    ENDIF.
  ENDIF.

ENDMETHOD.




























method SET_HASH_ENTRY.
* new with note 1428972

  READ TABLE me->mth_hash WITH TABLE KEY
  ebeln = is_data-ebeln
  ebelp = is_data-ebelp
  etenr = is_data-etenr
  zekkn = is_data-zekkn
  TRANSPORTING NO FIELDS.

  IF sy-subrc NE 0.
  INSERT is_data INTO TABLE me->mth_hash.
  ENDIF.

endmethod.


  METHOD set_address_handling.

    "-- set the address handling indicator for the current node (PO header)
    me->mv_address_handling_active = iv_address_handling_active.

    IF iv_address_handling_active <> abap_true. RETURN. ENDIF.

    IF mr_address_data IS INITIAL.
      CREATE DATA mr_address_data.
    ENDIF.

    IF ir_address_handler IS SUPPLIED AND ir_address_handler IS BOUND.
      mr_address_handler = ir_address_handler.
    ENDIF.

    "-- propagate the address handling indicator to the items if any exists
    me->has_items( IMPORTING ex_count = DATA(lv_items_count) ).
    IF lv_items_count > 0 .
      me->get_items( IMPORTING ex_items = DATA(lt_items) ).
      LOOP AT lt_items REFERENCE INTO DATA(lr_item_model) WHERE model IS INSTANCE OF cl_handle_mm.
        CAST cl_handle_mm( lr_item_model->model )->set_address_handling( iv_address_handling_active = iv_address_handling_active
                                                                         ir_address_handler = mr_address_handler ).
      ENDLOOP.
    ENDIF.


  ENDMETHOD.


  METHOD set_address_handler.
    mr_address_handler = io_address_handler.
  ENDMETHOD.


  METHOD set_address.

    FIELD-SYMBOLS <ls_address_data> TYPE if_mm_pur_po_address_utility=>ty_address_complete.

    IF mr_address_data IS BOUND.
      ASSIGN mr_address_data->* TO <ls_address_data>.
      IF sy-subrc = 0.
        <ls_address_data> = is_address.
      ENDIF.
    ENDIF.

  ENDMETHOD.


METHOD remove_items.

  DATA: l_item_line LIKE LINE OF my_items,
        l_item      TYPE REF TO cl_handle_mm,
        l_hd        TYPE REF TO cl_message_handler_mm.

  CALL METHOD cl_message_handler_mm=>get_handler
                                        IMPORTING ex_handler = l_hd.

  LOOP AT my_items INTO l_item_line.

    l_item ?= l_item_line-model.
*- Remove dependent Objects
    CALL METHOD l_item->remove_items.

*- Remove event log entries for the item

    CALL METHOD l_hd->remove_by_bo EXPORTING im_business_obj = l_item.

*- Remove item from handle manager
    CALL METHOD cl_handle_manager_mm=>remove
                               EXPORTING im_id = l_item->id
                               EXCEPTIONS failure = 01.
    IF sy-subrc NE 0.
      RAISE failure.
    ENDIF.
    DELETE me->mth_hash WHERE model EQ l_item.      "2568712
  ENDLOOP.

  REFRESH my_items.

ENDMETHOD.


METHOD remove_item.

  DATA: l_item      TYPE REF TO cl_handle_mm,
        l_index     TYPE sy-tabix,
        l_hd        type ref to cl_message_handler_mm.

  mmpur_dynamic_cast l_item im_item.
  IF l_item IS INITIAL.
    RAISE failure.
  ENDIF.

  READ TABLE my_items WITH KEY model = im_item
             TRANSPORTING NO FIELDS.
  l_index = sy-tabix.
  IF sy-subrc NE 0.
    RAISE failure.
  ENDIF.

*- Remove dependent items
  CALL METHOD l_item->remove_items.

  DELETE my_items INDEX l_index.

*- Remove event log entries for the item
  call method cl_message_handler_mm=>get_Handler
                                        importing ex_handler = l_hd.

  CALL METHOD l_hd->remove_by_bo EXPORTING im_business_obj = l_item.

*- Remove item from handle manager
  CALL METHOD cl_handle_manager_mm=>remove
                             EXPORTING im_id = l_item->id.

  DELETE me->mth_hash WHERE model EQ im_item.      "2568712

ENDMETHOD.


METHOD process_input_filter .

  DATA: lt_mapping          TYPE mepo_t_metafield_mapping,
        lt_fs               TYPE ttyp_fieldselection_mm,
        ls_dfies            TYPE dfies,
        l_rc                TYPE sy-subrc,
        l_message_line(72)  TYPE c.


  FIELD-SYMBOLS: <mapping> LIKE LINE OF lt_mapping,
                 <fs>      LIKE LINE OF lt_fs,
                 <old>     TYPE any,
                 <target>  TYPE any.

  ex_data = im_data.
  CLEAR ex_bad_fields.

  CALL METHOD me->get_mapping
    IMPORTING
      ex_mapping     = lt_mapping
      ex_fs_template = lt_fs.

  CALL METHOD me->if_fieldselection_mm~fs_get
    CHANGING
      ch_fieldselection = lt_fs.

  LOOP AT lt_mapping ASSIGNING <mapping> WHERE NOT metafield IS INITIAL.

    READ TABLE lt_fs ASSIGNING <fs> WITH TABLE KEY
                                  metafield = <mapping>-metafield.
    CHECK   sy-subrc IS INITIAL.
    CHECK <fs>-fieldstatus EQ '-' OR
          <fs>-fieldstatus EQ '*'.
    ASSIGN COMPONENT <mapping>-fieldname
                                OF STRUCTURE im_data_old TO <old>.
    CHECK sy-subrc IS INITIAL.
    ASSIGN COMPONENT <mapping>-fieldname
                                OF STRUCTURE ex_data TO <target>.
    CHECK sy-subrc IS INITIAL.
    CHECK <target> NE <old>.
    <target> = <old>.
    INSERT <mapping> INTO TABLE ex_bad_fields.
  ENDLOOP.

  IF im_use_handler NE mmpur_no.
*
* write an information message into the message log
*
    INCLUDE mm_messages_mac.
    mmpur_business_obj me.
    mmpur_context mmcnt_input_filter.
    mmpur_metafield 0.
    LOOP AT ex_bad_fields ASSIGNING <mapping>.
      PERFORM get_ftext IN PROGRAM rddfie00
                                  USING <mapping>-tabname
                                        <mapping>-fieldname
                                        sy-langu
                                  CHANGING ls_dfies l_rc.
      IF l_rc EQ 0.
        l_message_line = ls_dfies-scrtext_m.
      ELSE.
        l_message_line = <mapping>-fieldname.
      ENDIF.

      MESSAGE i664(me) WITH l_message_line INTO gl_dummy.
      mmpur_message sy-msgty sy-msgid sy-msgno
                    sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


  METHOD map_address_to_api.

    IF mr_address_handler IS BOUND.
      rs_address_api = mr_address_handler->inbound_map_address_to_api( is_address = is_address ).
    ENDIF.

  ENDMETHOD.


  METHOD is_address_handling_active.
    rv_active = me->mv_address_handling_active.
  ENDMETHOD.


method IF_MESSAGE_OBJ_MM~GET_PARENT.
  re_object ?= my_parent.
endmethod.


METHOD IF_MESSAGE_OBJ_MM~DESCRIBE.

  DATA: L_IF_MSG TYPE REF TO IF_MESSAGE_OBJ_MM.

  IF NOT MY_PARENT IS INITIAL.
    MMPUR_DYNAMIC_CAST L_IF_MSG MY_PARENT.
    RE_DESCRIPTION = L_IF_MSG->DESCRIBE( ).
  ENDIF.

ENDMETHOD.


METHOD if_flush_transport_mm~start .

  CALL METHOD me->flush_data
    EXPORTING
      im_models    = im_models
    EXCEPTIONS
      illegal_call = 1
      error        = 2.

  CASE sy-subrc.
    WHEN 1.
      RAISE illegal_call.
    WHEN 2.
      RAISE error.
  ENDCASE.

ENDMETHOD.                    "


METHOD if_flush_transport_mm~can_initiate_flush .

  DATA: l_model TYPE REF TO if_model_mm.

  CALL METHOD me->can_initiate_flush
    IMPORTING
      ex_model        = l_model
    EXCEPTIONS
      cannot_initiate = 1.

  IF sy-subrc IS INITIAL.
    mmpur_dynamic_cast re_flushable l_model.
  ENDIF.

ENDMETHOD.                    "


METHOD if_fieldselection_mm~fs_get.

  IF NOT my_parent IS INITIAL.
    DATA: l_handle TYPE REF TO cl_handle_mm.
    l_handle ?= my_parent.
    CALL METHOD l_handle->if_fieldselection_mm~fs_get
                   exporting im_requested_type    = im_requested_type
                             im_sender            = im_sender
                             im_initiator         = im_initiator
                   CHANGING  ch_fieldselection    = ch_fieldselection.
  ENDIF.

ENDMETHOD.


method IF_ASYNC_SUBJECT_MM~RESET_CHANGES.
* ...
endmethod.


method IF_ASYNC_SUBJECT_MM~PUBLISH.

  raise event if_subject_mm~changed
                 exporting changelist = IM_CHANGELIST.

endmethod.


method IF_ASYNC_SUBJECT_MM~GET_CHANGES.

endmethod.


METHOD HAS_ITEMS.


  DATA: N TYPE I.

  DESCRIBE TABLE MY_ITEMS LINES N.
  EX_COUNT = N.

ENDMETHOD.


  METHOD get_mepoaddress_data.

    IF is_address_handling_active( ).
      rs_mepoaddress = me->map_address_to_api( me->get_address( ) ).
    ENDIF.

  ENDMETHOD.


METHOD get_mapping .
* to be defined in a subclass
ENDMETHOD.


METHOD GET_ITEMS.

  EX_ITEMS[] = MY_ITEMS[].
ENDMETHOD.


method GET_HASH_ENTRY.
* new with note 1428972

  DATA ls_hash_line TYPE type_s_lookup_hash.

  READ TABLE me->mth_hash INTO ls_hash_line WITH TABLE KEY
    ebeln = is_data-ebeln
    ebelp = is_data-ebelp
    etenr = is_data-etenr
    zekkn = is_data-zekkn.

  IF sy-subrc EQ 0.
    ex_model = ls_hash_line-model.
  ENDIF.

endmethod.


  METHOD get_address_hash_table.
    rt_addr_hash = mt_addr_hash .
  ENDMETHOD.


  METHOD get_address_handler.
    ro_address_handler = mr_address_handler.
  ENDMETHOD.


  METHOD get_addressx_hash_tab.
    rt_addrx_hash = mt_addrx_hash .
  ENDMETHOD.


  METHOD get_address.

    FIELD-SYMBOLS <ls_address_data> LIKE rs_address.

    IF mr_address_data IS BOUND.
      ASSIGN mr_address_data->* TO <ls_address_data>.
      IF sy-subrc = 0.
        rs_address = <ls_address_data>.
      ENDIF.
    ENDIF.

  ENDMETHOD.


METHOD FLUSH_DATA.

  raise illegal_call.
ENDMETHOD.


METHOD constructor.

  mv_address_handling_active = iv_address_handling_active.
  mr_address_handler = io_address_handler.

  IF mv_address_handling_active = abap_true AND mr_address_data IS INITIAL.
    CREATE DATA mr_address_data.
  ENDIF.

* Registrierung (kann später wegfallen)
  cl_handle_manager_mm=>add( EXPORTING im_handle = me
                             IMPORTING ex_id     = id ).
* Status
  state = c_new.

* get RTTS factory for runtime optimization
  CALL FUNCTION 'MMPUR_RTTS_FACTORY'                        "1355577
    IMPORTING
      eo_factory = me->mo_rtts.

ENDMETHOD.


method CLASS_CONSTRUCTOR.
*...
endmethod.


METHOD chp_register.

  DATA: fw TYPE REF TO cl_framework_mm,
        l_handle TYPE REF TO cl_handle_mm,
        l_parent TYPE REF TO cl_handle_mm.

  IF im_handle IS INITIAL.
    l_handle = me.
  ELSE.
    l_handle = im_handle.
  ENDIF.
  IF my_parent IS INITIAL.
* the final instance in the object hierarchy
    CALL METHOD cl_framework_mm=>get_instance
      IMPORTING
        ex_instance = fw.
    CALL METHOD fw->chp_register_model(
      im_model = l_handle
      im_action = im_action
      im_container = l_handle->my_parent ).
  ELSE.
* don't know what to do
    mmpur_dynamic_cast l_parent my_parent.
    IF NOT l_parent IS INITIAL.
      CALL METHOD l_parent->chp_register(
        im_action = im_action
        im_handle = l_handle ).
    ENDIF.
  ENDIF.

ENDMETHOD.                    "


method CHP_ADD_HASH_ENTRY.
* this has to be implemented by the specific class
endmethod.


METHOD check_badi_datax.

  DATA: lr_struct  TYPE REF TO cl_abap_structdescr,
        lr_element TYPE REF TO cl_abap_elemdescr,
        lv_name    TYPE abap_compname.                      "1355577

  FIELD-SYMBOLS: <old>     TYPE ANY,
                 <target>  TYPE ANY,
                 <targetx> TYPE ANY,
                 <mapping> TYPE abap_compdescr.

  ex_datax_new = im_datax_old.

* call RTTS factory
  lr_struct = me->mo_rtts->get_struc_descr( me->mv_rtts_name ). "1355577
  CONCATENATE me->mv_rtts_name abap_true INTO lv_name IN CHARACTER MODE.
  me->mo_rtts->get_struc_descr( lv_name ).


  LOOP AT lr_struct->components ASSIGNING <mapping>.

    ASSIGN COMPONENT <mapping>-name OF STRUCTURE im_data_old TO <old>.
    CHECK sy-subrc IS INITIAL.
    ASSIGN COMPONENT <mapping>-name OF STRUCTURE im_data_new TO <target>.
    CHECK: sy-subrc IS INITIAL,
           <old> NE <target>.                               "910250
    ASSIGN COMPONENT <mapping>-name OF STRUCTURE ex_datax_new TO <targetx>.
    CHECK sy-subrc IS INITIAL.
    CHECK <old> NE <target>.
    lr_element =  me->mo_rtts->get_elem_descr(              "1355577
                        iv_struct    = lv_name
                        iv_component = <mapping>-name
                        iv_value     = <targetx> ).
    CHECK lr_element->absolute_name EQ '\TYPE=BAPIUPDATE'.
    <targetx> = mmpur_yes.
  ENDLOOP.

ENDMETHOD.


METHOD CAN_INITIATE_FLUSH.


DATA: L_PARENT TYPE REF TO CL_HANDLE_MM.

IF NOT MY_PARENT IS INITIAL.

  L_PARENT ?= MY_PARENT.
  CALL METHOD L_PARENT->CAN_INITIATE_FLUSH
          IMPORTING  EX_MODEL = EX_MODEL
          EXCEPTIONS CANNOT_INITIATE = 1.
  IF SY-SUBRC NE 0.
    RAISE CANNOT_INITIATE.
  ENDIF.

ELSE.
  RAISE CANNOT_INITIATE.
ENDIF.

ENDMETHOD.


METHOD add_item.

  DATA lr_item TYPE REF TO cl_handle_mm.

  mmpur_dynamic_cast lr_item im_item.
  IF NOT lr_item IS INITIAL.
    "-- propagate the address_handling indicator from the parent (header)
    lr_item->set_address_handling( iv_address_handling_active = me->is_address_handling_active( )
                                   ir_address_handler = me->get_address_handler( ) ).
    APPEND VALUE #( model = lr_item ) TO  my_items.
    lr_item->set_parent( me ).
  ELSE.
    RAISE failure.
  ENDIF.

ENDMETHOD.


  METHOD get_interactive_mode.

     CALL FUNCTION 'MEPO_DOC_INTERACTIVE_MODE'
       IMPORTING
         ev_interactive_mode =  rv_interactive_mode                " Interactive Mode
     ##FM_SUBRC_OK.

     mv_non_interactive_mode = xsdbool( rv_interactive_mode <> abap_true ).

  ENDMETHOD.


  METHOD set_interactive_mode.

     CALL FUNCTION 'MEPO_DOC_INTERACTIVE_MODE'
       EXPORTING
         iv_interactive_mode = iv_interactive_mode
     ##FM_SUBRC_OK.

     mv_non_interactive_mode = xsdbool( iv_interactive_mode <> abap_true ).

  ENDMETHOD.
ENDCLASS.