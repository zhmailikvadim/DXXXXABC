CLASS ltc_cl_isu_touexception DEFINITION DEFERRED.
CLASS cl_isu_touexception DEFINITION LOCAL FRIENDS ltc_cl_isu_touexception.

*----------------------------------------------------------------------*
*       CLASS ltc_cl_isu_touexception DEFINITION
*----------------------------------------------------------------------*
CLASS ltc_cl_isu_touexception DEFINITION FOR TESTING INHERITING FROM cl_isu_aunit_touexcept_reuse
  DURATION SHORT
  RISK LEVEL DANGEROUS
  FINAL.

  PRIVATE SECTION.

    DATA: testdata TYPE etouexcept_auto_data.

    CLASS-DATA: testexceptionid TYPE e_touexcept_int_id,
                testprogram TYPE etouexcptprg.

    CONSTANTS: co_exception_text TYPE e_touexcept_text VALUE 'Unit test 01', "#EC NOTEXT
               co_external_id TYPE e_touexcept_ext_id VALUE 'Ext ID Unit Test 01',
               co_external_id_2 TYPE e_touexcept_ext_id VALUE 'Ext ID Unit Test 02',
               co_source_system TYPE e_touexcept_source VALUE 'System Unit Test 01', "#EC NOTEXT
               co_datefrom TYPE e_touexcept_datefrom VALUE '20120101',
               co_datefrom_wrong_1 TYPE e_touexcept_datefrom VALUE '20120102',
               co_datefrom_wrong_2 TYPE e_touexcept_datefrom VALUE '20110101',
               co_datefrom_new TYPE e_touexcept_datefrom VALUE '20120102',
               co_timefrom TYPE e_touexcept_timefrom VALUE '100000',
               co_timefrom_wrong TYPE e_touexcept_timefrom VALUE 'ZZ0099', "#EC VALUE_OK
               co_dateto TYPE e_touexcept_dateto VALUE '20120101',
               co_dateto_wrong_1 TYPE e_touexcept_dateto VALUE '20110101',
               co_dateto_new TYPE e_touexcept_dateto VALUE '20120102',
               co_timeto TYPE e_touexcept_timeto VALUE '125959',
               co_programid TYPE e_touexceptprog_id VALUE 'ZUTEST1',
               co_program_validfrom TYPE e_touep_valfrom VALUE '20120101',
               co_program_validto TYPE e_touep_valfrom VALUE '20121231',
               co_program_timezone TYPE e_touep_tzone VALUE 'CET',
               co_program_act_category TYPE e_touep_act_category VALUE '00',
               co_datefrom_comp_name TYPE name_komp VALUE 'DATEFROM',
               co_timefrom_comp_name TYPE name_komp VALUE 'TIMEFROM',
               co_dateto_comp_name TYPE name_komp VALUE 'DATETO',
               co_timeto_comp_name TYPE name_komp VALUE 'TIMETO',
               co_progid_comp_name TYPE name_komp VALUE 'EXCEPTIONPROGRAMID',
               co_extid_comp_name TYPE name_komp VALUE'EXCEPTIONEXTID',
               co_msg_wrong_comp TYPE text30 VALUE 'Wrong error component', "#EC NOTEXT
               co_msg_wrong_error_no TYPE text30 VALUE 'Wrong error number', "#EC NOTEXT
               co_msg_test_fail TYPE text30 VALUE 'Test failed', "#EC NOTEXT
               co_msg_wrong_bool TYPE text30 VALUE 'Wrong bool value'. "#EC NOTEXT

    CLASS-METHODS: class_setup,
                   class_teardown.

    METHODS: setup,
             teardown.

    METHODS: test01_create_exception FOR TESTING,
             test02_create_exception FOR TESTING,
             test03_create_exception FOR TESTING,
             test04_create_exception FOR TESTING,
             test05_create_exception FOR TESTING,
             test06_create_exception FOR TESTING,
             test07_create_exception FOR TESTING,
             test08_create_exception FOR TESTING,
             test11_change_exception FOR TESTING,
             test12_change_exception FOR TESTING,
             test13_change_exception FOR TESTING,
             test14_change_exception FOR TESTING,
             test21_delete_exception FOR TESTING.

ENDCLASS.       "ltc_cl_isu_touexception

*----------------------------------------------------------------------*
*       CLASS ltc_cl_isu_touexception IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS ltc_cl_isu_touexception IMPLEMENTATION.

* class setup
  METHOD class_setup.

* init data
    testprogram-mandt = sy-mandt.
    testprogram-exceptprogid = co_programid.
    testprogram-validfrom = co_program_validfrom.
    testprogram-validto = co_program_validto.
    testprogram-tzone = co_program_timezone.
    testprogram-act_category = co_program_act_category.

* create relevant program
    create_exception_program( EXPORTING x_etouexcptprg = testprogram ).

  ENDMETHOD.       "class_setup

* setup
  METHOD setup.

* init test data (date/time in LTC)
    testdata-exception-exceptiontxt = co_exception_text.
    testdata-exception-exceptionextid = co_external_id.
    testdata-exception-exceptionsource = co_source_system.
    testdata-exception-datefrom = co_datefrom.
    testdata-exception-timefrom = co_timefrom.
    testdata-exception-dateto = co_dateto.
    testdata-exception-timeto = co_timeto.
    testdata-exception-exceptionprogramid = co_programid.

  ENDMETHOD.       "setup

* create exception, missing DATEFROM
  METHOD test01_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    CLEAR: testdata-exception-datefrom.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.

        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_datefrom_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '005'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test01_create_exception

* create exception, wrong format TIMEFROM
  METHOD test02_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-timefrom = co_timefrom_wrong.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_timefrom_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '010'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test02_create_exception

* create exception, missing DATETO
  METHOD test03_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    CLEAR: testdata-exception-dateto.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_dateto_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '007'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test03_create_exception

* create exception, missing TIMETO
  METHOD test04_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    CLEAR: testdata-exception-timeto.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_timeto_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '008'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test04_create_exception

* create exception, missing PROGRAMID
  METHOD test05_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    CLEAR: testdata-exception-exceptionprogramid.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_progid_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '010'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test05_create_exception

* create exception, ok
  METHOD test06_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lr_except_db TYPE REF TO cl_isu_touexception_db,
          lt_sel_exceptextid TYPE etouexcept_ext_id_range_tab,
          wa_exceptextid_range TYPE etouexcept_ext_id_range,
          lt_exception TYPE etouexception_tab,
          wa_exception TYPE etouexception,
          ls_exception_sel TYPE etouexcept_selection,
          lv_not_found TYPE abap_bool.

    APPEND testdata TO lt_except_auto_data.

* create exception for later use
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

      CATCH cx_isu_touexception_gen_fault INTO cl_isu_touexception_exc_facty=>gf_exc.
        cl_aunit_assert=>fail( cl_isu_touexception_exc_facty=>gf_exc->get_text( ) ).
    ENDTRY.

* read test data exception ID
    CALL METHOD cl_isu_touexception_db=>get_instance
      RECEIVING
        y_instance = lr_except_db.

* prepare selection
    wa_exceptextid_range-sign = 'I'.
    wa_exceptextid_range-option = 'EQ'.
    wa_exceptextid_range-low = co_external_id.
    APPEND wa_exceptextid_range TO lt_sel_exceptextid[].

    ls_exception_sel-exceptionextid = lt_sel_exceptextid.

    TRY.
        CALL METHOD lr_except_db->read_exception_by_selection
          EXPORTING
            xt_exception_sel = ls_exception_sel
          IMPORTING
            yt_exception     = lt_exception
            y_not_found      = lv_not_found.

      CATCH cx_isu_touexception_gen_fault INTO cl_isu_touexception_exc_facty=>gf_exc.
        cl_aunit_assert=>fail( cl_isu_touexception_exc_facty=>gf_exc->get_text( ) ).
    ENDTRY.

* check exsiting of exception
    CALL METHOD cl_abap_unit_assert=>assert_false
      EXPORTING
        act = lv_not_found
        msg = co_msg_wrong_bool.

* update test data with new ID
    READ TABLE lt_exception INDEX 1 INTO wa_exception.

    IF sy-subrc = 0.
      testexceptionid = wa_exception-exceptionid.
    ENDIF.

  ENDMETHOD.       "test06_create_exception

* create exception, overlap
  METHOD test07_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-exceptionextid = co_external_id_2.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_progid_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '029'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test07_create_exception, overlap

* create exception, unique external ID
  METHOD test08_create_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-exceptionextid = co_external_id.
    APPEND testdata TO lt_except_auto_data.

* create exception with error
    TRY.
        create_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_extid_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '048'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test08_create_exception, unique external ID

* change exception, compare datefrom with dateto
  METHOD test11_change_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-exceptionid = testexceptionid.
    testdata-exception-datefrom = co_datefrom_wrong_1.
    APPEND testdata TO lt_except_auto_data.

* change exception with error
    TRY.
        change_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_dateto_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '009'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test11_change_exception

* change exception, compare timefrom with timeto, in case of the same date
  METHOD test12_change_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-exceptionid = testexceptionid.
    testdata-exception-timefrom = co_timeto.
    testdata-exception-timeto = co_timefrom.
    APPEND testdata TO lt_except_auto_data.

* change exception with error
    TRY.
        change_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_timeto_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '023'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test12_change_exception

* change exception, time range from program
  METHOD test13_change_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab,
          lx_except TYPE REF TO cx_isu_touexception_gen_fault.

    testdata-exception-exceptionid = testexceptionid.
    testdata-exception-datefrom = co_datefrom_wrong_2.
    testdata-exception-dateto = co_dateto_wrong_1.
    APPEND testdata TO lt_except_auto_data.

* change exception with error
    TRY.
        change_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

* never reached, would be an error
        CALL METHOD cl_aunit_assert=>fail
          EXPORTING
            msg = co_msg_test_fail.

      CATCH cx_isu_touexception_gen_fault INTO lx_except.

* check component
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->error_component
            act = co_progid_comp_name
            msg = co_msg_wrong_comp.

* check error number
        CALL METHOD cl_abap_unit_assert=>assert_equals
          EXPORTING
            exp = lx_except->if_t100_message~t100key-msgno
            act = '041'
            msg = co_msg_wrong_error_no.
    ENDTRY.

  ENDMETHOD.       "test13_change_exception

* change exception, ok
  METHOD test14_change_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab.

    testdata-exception-exceptionid = testexceptionid.
    testdata-exception-exceptionextid = co_external_id_2.
    testdata-exception-datefrom = co_datefrom_new.
    testdata-exception-dateto = co_dateto_new.
    APPEND testdata TO lt_except_auto_data.

* change exception
    TRY.
        change_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

      CATCH cx_isu_touexception_gen_fault INTO cl_isu_touexception_exc_facty=>gf_exc.
        cl_aunit_assert=>fail( cl_isu_touexception_exc_facty=>gf_exc->get_text( ) ).
    ENDTRY.

  ENDMETHOD.       "test13_change_exception

* delete exception
  METHOD test21_delete_exception.

    DATA: lt_except_auto_data TYPE etouexcept_auto_data_tab.

    testdata-exception-exceptionid = testexceptionid.
    APPEND testdata TO lt_except_auto_data.

* delete exception
    TRY.
        delete_exception( EXPORTING xt_except_auto_data = lt_except_auto_data ).

      CATCH cx_isu_touexception_gen_fault INTO cl_isu_touexception_exc_facty=>gf_exc.
        cl_aunit_assert=>fail( cl_isu_touexception_exc_facty=>gf_exc->get_text( ) ).
    ENDTRY.

  ENDMETHOD.       "test21_delete_exception

* teardown
  METHOD teardown.

* not used!

  ENDMETHOD.       "teardown

* class teardown
  METHOD class_teardown.

* delete relevant customizing entry
    delete_exception_program( EXPORTING x_etouexcptprg = testprogram ).

    COMMIT WORK.

  ENDMETHOD.       "class_teardown
ENDCLASS.       "ltc_cl_isu_touexception