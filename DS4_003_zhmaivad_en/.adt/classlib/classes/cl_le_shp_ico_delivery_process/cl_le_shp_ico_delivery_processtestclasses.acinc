*"* use this source file for your ABAP unit test classes
INCLUDE i_cl_le_shp_ico_util  ##INCL_OK .   " Test double for class CL_LE_SHP_ICO_UTIL.

CLASS ltd_le_shp_ico_delivery DEFINITION INHERITING FROM cl_le_shp_ico_delivery_process FINAL.

  PUBLIC SECTION.
    METHODS fill_buffer IMPORTING is_buffer TYPE gsty_likp_buffer.
    METHODS get_buffer RETURNING VALUE(rs_buffer) TYPE gsty_likp_buffer.

ENDCLASS.

CLASS ltd_le_shp_ico_delivery IMPLEMENTATION.

  METHOD fill_buffer.
    ms_likp_buffer = is_buffer.
  ENDMETHOD.

  METHOD get_buffer.
    rs_buffer = ms_likp_buffer.
  ENDMETHOD.

ENDCLASS.

CLASS ltc_unit_tests DEFINITION
  FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
  FINAL.

  PUBLIC SECTION.

    CONSTANTS:
      BEGIN OF gc_delivery_id,
        no_delivery TYPE vbeln VALUE 'NO_DLV',
        no_ic       TYPE vbeln VALUE 'NO_IC',
        sto         TYPE vbeln VALUE 'STO',
        sales       TYPE vbeln VALUE 'SALES',
        buffer      TYPE vbeln VALUE 'UT_BUFFER',
      END OF gc_delivery_id.

  PRIVATE SECTION.
    CLASS-DATA:
      environment TYPE REF TO if_osql_test_environment.

    CLASS-METHODS:
      class_setup,
      class_teardown.

    METHODS:
      setup,
      teardown.

    METHODS:
      is_registered_in_vcm_true         FOR TESTING,
      is_registered_in_vcm_false        FOR TESTING,
      filter_irrelevant_items           FOR TESTING,
      get_vcm_predecessor_status_c      FOR TESTING,
      get_vcm_predecessor_status_no     FOR TESTING,
      is_delivery_not_ic_rel            FOR TESTING,
      is_delivery_ic_sto_active         FOR TESTING,
      is_delivery_ic_sales_rel          FOR TESTING,
      is_delivery_ic_buffer_read        FOR TESTING,
      is_delivery_ic_likp_input         FOR TESTING,
      is_delivery_ic_no_input           FOR TESTING,
      is_delivery_ic_no_delivery        FOR TESTING,
      fill_buffer_is_buffer_filled      FOR TESTING,
      set_vcm_lock_success              FOR TESTING,
      set_vcm_lock_error                FOR TESTING,
      set_vcm_lock_no_delivery          FOR TESTING,
      set_vcm_lock_not_relevant         FOR TESTING,
      release_vcm_from_table_success    FOR TESTING,
      release_vcm_lock_success          FOR TESTING,
      release_vcm_lock_no_delivery      FOR TESTING,
      release_vcm_lock_not_relevant     FOR TESTING,
      check_qty_reduction_not_rele      FOR TESTING,
      check_qty_reduction_warning       FOR TESTING,
      check_qty_reduction_ok            FOR TESTING,
      check_qty_reduction_odel_ok       FOR TESTING.

    DATA cut                TYPE REF TO ltd_le_shp_ico_delivery.
    DATA mo_le_shp_ico_util TYPE REF TO ltd_le_shp_ico_util.

ENDCLASS.



CLASS ltc_unit_tests IMPLEMENTATION.

  METHOD class_setup.

    DATA:
      vcm_rt_chain_ins TYPE TABLE OF vcm_rt_chain_ins,
      vcm_rt_step_ins  TYPE TABLE OF vcm_rt_step_ins,
      vcm_rt_bo_item   TYPE TABLE OF vcm_rt_bo_item,
      vcm_rt_inbd_item TYPE TABLE OF vcm_rt_inbd_item,
      lt_likp          TYPE STANDARD TABLE OF likp.

    vcm_rt_chain_ins = VALUE #( ( guid = '1' value_chain_type = 'LE_SHP_ICO_VCM_TEST' ) ).
    vcm_rt_step_ins  = VALUE #( ( guid = '2' value_chain_ins_guid = '1' step_type = 'ODDC' ) ).
    vcm_rt_bo_item   = VALUE #( ( business_object = 'OUTBOUND_DELIVERY'
                                  business_object_id = '200'
                                  business_object_item_id = '000010'
                                  predecessor_id = '100'
                                  predecessor_item_id = '000010'
                                  value_chain_ins_guid = '1'
                                  step_ins_guid = '2' ) ).
    vcm_rt_inbd_item = VALUE #( ( business_object_id = '100'
                                  business_object_item_id = '000010'
                                  process_status = 'C'
                                  step_ins_guid = '2' ) ).
    lt_likp = VALUE #( ( vbeln = gc_delivery_id-no_ic    vbtyp = if_sd_doc_category=>delivery spe_le_scenario = ' ' )
                       ( vbeln = gc_delivery_id-sto      vbtyp = if_sd_doc_category=>delivery spe_le_scenario = if_le_shp_ico_c=>spe_le_scenario-intercompany_stock_transfer )
                       ( vbeln = gc_delivery_id-sales    vbtyp = if_sd_doc_category=>delivery spe_le_scenario = if_le_shp_ico_c=>spe_le_scenario-intercompany_sales_process )
                       ( vbeln = gc_delivery_id-buffer   vbtyp = if_sd_doc_category=>delivery spe_le_scenario = ' ' ) ).

    environment = cl_osql_test_environment=>create(
                     i_dependency_list = VALUE #( ( 'VCM_RT_CHAIN_INS' )
                                                  ( 'VCM_RT_STEP_INS' )
                                                  ( 'VCM_RT_BO_ITEM' )
                                                  ( 'VCM_RT_INBD_ITEM' )
                                                  ( 'LIKP' ) ) ).
    environment->insert_test_data( vcm_rt_chain_ins ).
    environment->insert_test_data( vcm_rt_step_ins ).
    environment->insert_test_data( vcm_rt_bo_item ).
    environment->insert_test_data( vcm_rt_inbd_item ).
    environment->insert_test_data( lt_likp ).

    "clear transitional buffer
    CALL FUNCTION 'LE_DELIVERY_REFRESH_BUFFER'.

  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.

  METHOD setup.

    mo_le_shp_ico_util = NEW ltd_le_shp_ico_util( ).
    cut = NEW  ltd_le_shp_ico_delivery( io_le_shp_ico_util = mo_le_shp_ico_util  ).

  ENDMETHOD.


  METHOD teardown.

    CLEAR mo_le_shp_ico_util.
    CLEAR cut.

  ENDMETHOD.

  METHOD is_registered_in_vcm_true.
    DATA(delivery_document_item) = VALUE lipsvb(  vbeln = '200' posnr = '10'
                                                  vgbel = '100' vgpos = '10' vgtyp = 'C'
                                                  vcm_chain_uuid = '1'
                                                  vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process ).

    DATA(is_registered) = cut->if_le_shp_ico_delivery_process~is_registered_in_vcm( delivery_document_item = delivery_document_item
                                                                                    step_type              = 'ODDC'   ).
    cl_abap_unit_assert=>assert_true( act = is_registered ).

    is_registered = cl_le_shp_ico_factory=>get( )->get_delivery_instance( )->is_registered_in_vcm( delivery_document_item = delivery_document_item ).
    cl_abap_unit_assert=>assert_true( act = is_registered ).

  ENDMETHOD.

  METHOD is_registered_in_vcm_false.

    DATA(delivery_document_item) = VALUE lipsvb(  vbeln = '201' posnr = '10'
                                                  vgbel = '100' vgpos = '10' vgtyp = 'C'
                                                  vcm_chain_uuid = '1'
                                                  vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process ).

    DATA(is_registered) = cut->if_le_shp_ico_delivery_process~is_registered_in_vcm( delivery_document_item = delivery_document_item
                                                                                    step_type              = 'ODDC'   ).

    cl_abap_unit_assert=>assert_false( act = is_registered ).

  ENDMETHOD.

  METHOD filter_irrelevant_items.
    DATA: delivery_items_before   TYPE shp_lips_t,
          delivery_items_expected TYPE shp_lips_t.

    delivery_items_before = VALUE #( ( vbeln = '200' posnr = '10' vgbel = '100' vgpos = '10' vcm_chain_uuid = '1' vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process )
                                     ( vbeln = '200' posnr = '20' vgbel = '100' vgpos = '20' ) ).

    delivery_items_expected = VALUE #( ( vbeln = '200' posnr = '10' vgbel = '100' vgpos = '10' vcm_chain_uuid = '1' vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process ) ).

    DATA(delivery_items_after) = cut->if_le_shp_ico_delivery_process~filter_irrelevant_items( delivery_items_before ).

    cl_abap_unit_assert=>assert_equals(
      EXPORTING
        act                  = delivery_items_after
        exp                  = delivery_items_expected
    ).
  ENDMETHOD.

  METHOD get_vcm_predecessor_status_c.
    DATA(delivery_document_item) = VALUE lipsvb(  vbeln = '200' posnr = '10'
                                                  vgbel = '100' vgpos = '10' vgtyp = 'C'
                                                  vcm_chain_uuid = '1'
                                                  vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process ).

    DATA(vcm_predecessor_status) = cut->if_le_shp_ico_delivery_process~get_vcm_predecessor_status( delivery_document_item ).

    cl_abap_unit_assert=>assert_equals(
      EXPORTING
        act                  = vcm_predecessor_status
        exp                  = cl_vcm_const_value_chain_step=>c_status-completed
    ).
  ENDMETHOD.

  METHOD get_vcm_predecessor_status_no.

    DATA(delivery_document_item) = VALUE lipsvb(  vbeln = '200' posnr = '10'
                                                  vgbel = '100' vgpos = '10' vgtyp = 'C'
                                                  vcm_chain_uuid = '1'
                                                  vcm_chain_category = if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process ).

    DATA(vcm_predecessor_status) = cut->if_le_shp_ico_delivery_process~get_vcm_predecessor_status( business_object_type   = if_le_shp_ico_c=>vcm_business_object-inbound_delivery
                                                                                                   delivery_document_item = delivery_document_item ).
    cl_abap_unit_assert=>assert_initial( act = vcm_predecessor_status ).

  ENDMETHOD.

  METHOD is_delivery_not_ic_rel.
    DATA lv_vbtyp TYPE vbtypl.

    TRY.
        cl_abap_unit_assert=>assert_equals( act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( EXPORTING iv_delivery_id ='NO_IC'
                                                                                                               IMPORTING ev_vbtyp  = lv_vbtyp )
                                            exp = abap_false ).
        cl_abap_unit_assert=>assert_equals( act = lv_vbtyp exp = if_sd_doc_category=>delivery ).

      CATCH cx_le_shp_ico_dlvry_not_exists.
        cl_abap_unit_assert=>fail( msg = 'Exception raised' ).
    ENDTRY.
  ENDMETHOD.


  METHOD is_delivery_ic_sto_active.

    TRY.
        cl_abap_unit_assert=>assert_equals( act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( EXPORTING iv_delivery_id ='STO' )
                                            exp = abap_true ).

      CATCH cx_le_shp_ico_dlvry_not_exists.
        cl_abap_unit_assert=>fail( msg = 'Exception raised' ).
    ENDTRY.
  ENDMETHOD.

  METHOD is_delivery_ic_sales_rel.

    TRY.
        cl_abap_unit_assert=>assert_equals(
          EXPORTING act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( iv_delivery_id = 'SALES' )
                    exp = abap_true ).
      CATCH cx_le_shp_ico_dlvry_not_exists.
        cl_abap_unit_assert=>fail( msg = 'Exception raised' ).
    ENDTRY.

  ENDMETHOD.

  METHOD is_delivery_ic_buffer_read.
    DATA lv_vbeln TYPE vbeln.
    DATA lv_vbtyp TYPE vbtypl.

    cut->fill_buffer( EXPORTING is_buffer = VALUE #( vbeln = ltc_unit_tests=>gc_delivery_id-buffer
                                                     vbtyp = if_sd_doc_category=>delivery
                                                     spe_le_scenario = if_le_shp_ico_c=>spe_le_scenario-intercompany_sales_process ) ).

    TRY.
        cl_abap_unit_assert=>assert_equals(
          EXPORTING act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( EXPORTING iv_delivery_id = ltc_unit_tests=>gc_delivery_id-buffer
                                                                                       IMPORTING ev_vbeln = lv_vbeln
                                                                                                 ev_vbtyp = lv_vbtyp )
                    exp = abap_true ).
        cl_abap_unit_assert=>assert_equals( act = lv_vbeln exp = ltc_unit_tests=>gc_delivery_id-buffer ).
        cl_abap_unit_assert=>assert_equals( act = lv_vbtyp exp = if_sd_doc_category=>delivery ).
      CATCH cx_le_shp_ico_dlvry_not_exists.
        cl_abap_unit_assert=>fail( msg = 'Exception raised' ).
    ENDTRY.

  ENDMETHOD.

  METHOD is_delivery_ic_likp_input.

    DATA lv_vbeln TYPE vbeln.
    DATA lv_vbtyp TYPE vbtypl.

    TRY.
        cl_abap_unit_assert=>assert_equals(
          EXPORTING act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant(
                                                  EXPORTING is_delivery_header = VALUE #( vbeln = gc_delivery_id-sto
                                                                                          vbtyp = if_sd_doc_category=>delivery
                                                                                          spe_le_scenario = if_le_shp_ico_c=>spe_le_scenario-intercompany_stock_transfer )
                                                  IMPORTING ev_vbeln = lv_vbeln
                                                            ev_vbtyp = lv_vbtyp )
                    exp = abap_true ).

        cl_abap_unit_assert=>assert_equals( act = lv_vbeln exp = gc_delivery_id-sto ).
        cl_abap_unit_assert=>assert_equals( act = lv_vbtyp exp = if_sd_doc_category=>delivery ).

        " now check buffer
        cl_abap_unit_assert=>assert_equals( act = cut->get_buffer( )-vbeln
                                            exp = gc_delivery_id-sto ).
        cl_abap_unit_assert=>assert_equals( act = cut->get_buffer( )-vbtyp
                                            exp = if_sd_doc_category=>delivery ).
        cl_abap_unit_assert=>assert_equals( act = cut->get_buffer( )-spe_le_scenario
                                            exp = if_le_shp_ico_c=>spe_le_scenario-intercompany_stock_transfer ).

      CATCH cx_le_shp_ico_dlvry_not_exists.
        cl_abap_unit_assert=>fail( msg = 'Exception raised' ).
    ENDTRY.

  ENDMETHOD.


  METHOD is_delivery_ic_no_input.

    TRY.
        cl_abap_unit_assert=>assert_equals(
          EXPORTING act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( iv_delivery_id = '' )
                    exp = abap_true ).
      CATCH cx_le_shp_ico_dlvry_not_exists.
        RETURN.
    ENDTRY.

    cl_abap_unit_assert=>fail( msg = 'Exception expected: No input' ).

  ENDMETHOD.

  METHOD is_delivery_ic_no_delivery.

    TRY.
        cl_abap_unit_assert=>assert_equals(
          EXPORTING act = cut->if_le_shp_ico_delivery_process~is_delivery_ic_relevant( iv_delivery_id = ltc_unit_tests=>gc_delivery_id-no_delivery )
                    exp = abap_false ).
      CATCH cx_le_shp_ico_dlvry_not_exists.
        RETURN.
    ENDTRY.

    cl_abap_unit_assert=>fail( msg = 'Exception expected: Delivery does not exist' ).

  ENDMETHOD.


  METHOD set_vcm_lock_success.
    mo_le_shp_ico_util->set_locked_vcm( VALUE #( ( guid = ltd_le_shp_ico_util=>gc_vcm_guid-vcm_success ) ) ).
    TRY.
        cut->if_le_shp_ico_delivery_process~set_vcm_lock( EXPORTING iv_delivery_id = ltc_unit_tests=>gc_delivery_id-sto
                                                          IMPORTING ev_is_ic_relevant = DATA(lv_is_ic_relevant)
                                                                    et_locked_vcm = DATA(lt_locked_vcm)           ).
      CATCH cx_le_shp_ico_vcm_not_locked. " Delivery not locked
        cl_abap_unit_assert=>fail( msg = 'No exception expected').
    ENDTRY.

    cl_abap_unit_assert=>assert_true( act = lv_is_ic_relevant ).
    cl_abap_unit_assert=>assert_equals( exp = 1
                                        act = lines( lt_locked_vcm ) ).
    cl_abap_unit_assert=>assert_equals( exp = ltd_le_shp_ico_util=>gc_vcm_guid-vcm_success
                                        act = lt_locked_vcm[ 1 ]-guid ).

  ENDMETHOD.

  METHOD set_vcm_lock_error.

    mo_le_shp_ico_util->return_exception( ).
    TRY.
        cut->if_le_shp_ico_delivery_process~set_vcm_lock( EXPORTING iv_delivery_id = ltc_unit_tests=>gc_delivery_id-sto
                                                                   IMPORTING ev_is_ic_relevant = DATA(lv_is_ic_relevant)
                                                                             et_locked_vcm = DATA(lt_locked_vcm) ) ##NEEDED .
      CATCH cx_le_shp_ico_vcm_not_locked. " Delivery not locked
        cl_abap_unit_assert=>assert_true( act = lv_is_ic_relevant ).
        RETURN.
    ENDTRY.
    cl_abap_unit_assert=>fail( msg = 'Exception is expected').
  ENDMETHOD.

  METHOD set_vcm_lock_no_delivery.
    mo_le_shp_ico_util->return_exception( ).
    TRY.
        cut->if_le_shp_ico_delivery_process~set_vcm_lock( EXPORTING iv_delivery_id = ltc_unit_tests=>gc_delivery_id-no_delivery
                                                                   IMPORTING ev_is_ic_relevant = DATA(lv_is_ic_relevant)
                                                                             et_locked_vcm = DATA(lt_locked_vcm)                   ).
      CATCH cx_le_shp_ico_vcm_not_locked. " Delivery not locked
        cl_abap_unit_assert=>fail( msg = 'No exception expected').
    ENDTRY.
    cl_abap_unit_assert=>assert_initial( act = lv_is_ic_relevant ).
    cl_abap_unit_assert=>assert_initial( act = lt_locked_vcm ).
  ENDMETHOD.


  METHOD set_vcm_lock_not_relevant.
    mo_le_shp_ico_util->return_exception( ).
    TRY.
        cut->if_le_shp_ico_delivery_process~set_vcm_lock( EXPORTING iv_delivery_id = ltc_unit_tests=>gc_delivery_id-no_ic
                                                                   IMPORTING ev_is_ic_relevant = DATA(lv_is_ic_relevant)
                                                                             et_locked_vcm = DATA(lt_locked_vcm)            ).
      CATCH cx_le_shp_ico_vcm_not_locked. " Delivery not locked
        cl_abap_unit_assert=>fail( msg = 'No exception expected').
    ENDTRY.
    cl_abap_unit_assert=>assert_initial( act = lv_is_ic_relevant ).
    cl_abap_unit_assert=>assert_initial( act = lt_locked_vcm ).
  ENDMETHOD.

  METHOD release_vcm_from_table_success.
    cut->if_le_shp_ico_delivery_process~release_vcm_lock( it_locked_vcm = VALUE #( ( guid = ltd_le_shp_ico_util=>gc_vcm_guid-vcm_success ) ) ).
    cl_abap_unit_assert=>assert_true( act = mo_le_shp_ico_util->mv_lock_released ).
  ENDMETHOD.

  METHOD release_vcm_lock_success.
    cut->if_le_shp_ico_delivery_process~release_vcm_lock( iv_delivery_id = 'STO' ).
    cl_abap_unit_assert=>assert_true( act = mo_le_shp_ico_util->mv_lock_released ).
  ENDMETHOD.

  METHOD release_vcm_lock_no_delivery.
    mo_le_shp_ico_util->return_exception( ).
    cut->if_le_shp_ico_delivery_process~release_vcm_lock( iv_delivery_id = ltc_unit_tests=>gc_delivery_id-no_delivery ).
    cl_abap_unit_assert=>assert_false( act = mo_le_shp_ico_util->mv_lock_released ).
  ENDMETHOD.


  METHOD release_vcm_lock_not_relevant.
    cut->if_le_shp_ico_delivery_process~release_vcm_lock( iv_delivery_id = ltc_unit_tests=>gc_delivery_id-no_ic ).
    cl_abap_unit_assert=>assert_false( act = mo_le_shp_ico_util->mv_lock_released ).
  ENDMETHOD.

  METHOD fill_buffer_is_buffer_filled.

    cut->if_le_shp_ico_delivery_process~fill_likp_buffer( is_likp = VALUE likp( vbeln = '123'
                                                                                vbtyp = 'J'
                                                                                spe_le_scenario = '3' ) ).
    DATA(ls_likp_buffer) = cut->get_buffer( ).

    cl_abap_unit_assert=>assert_equals(
      EXPORTING
        act                  =  ls_likp_buffer-vbeln
        exp                  =  '123' ).

  ENDMETHOD.

  METHOD check_qty_reduction_not_rele.

    cl_abap_unit_assert=>assert_false( act =
        cut->if_le_shp_ico_delivery_process~check_quantiy_reduction(
          vcm_chain_category = CONV #( if_le_shp_ico_c=>vcm_chain_category-intercompany_sales_process )
          vbtyp              = if_sd_doc_category=>delivery_shipping_notif
          lfimg_after        = '1.00'   ##LITERAL
          lfimg_before       = '2.00'   ##LITERAL
          ormng              = '3.00' ) ##LITERAL
        ).

  ENDMETHOD.

  METHOD check_qty_reduction_warning.

    cl_abap_unit_assert=>assert_true( act =
        cut->if_le_shp_ico_delivery_process~check_quantiy_reduction(
          vcm_chain_category = CONV #( if_le_shp_ico_c=>vcm_chain_category-intercompany_stock_transfer )
          vbtyp              = if_sd_doc_category=>delivery_shipping_notif
          lfimg_after        = '1.00'   ##LITERAL
          lfimg_before       = '2.00'   ##LITERAL
          ormng              = '3.00' ) ##LITERAL
        ).

  ENDMETHOD.

  METHOD check_qty_reduction_ok.

    cl_abap_unit_assert=>assert_false( act =
        cut->if_le_shp_ico_delivery_process~check_quantiy_reduction(
          vcm_chain_category = CONV #( if_le_shp_ico_c=>vcm_chain_category-intercompany_stock_transfer )
          vbtyp              = if_sd_doc_category=>delivery_shipping_notif
          lfimg_after        = '3.00'   ##LITERAL
          lfimg_before       = '2.00'   ##LITERAL
          ormng              = '4.00' ) ##LITERAL
        ).

  ENDMETHOD.

  METHOD check_qty_reduction_odel_ok.

    cl_abap_unit_assert=>assert_false( act =
        cut->if_le_shp_ico_delivery_process~check_quantiy_reduction(
          vcm_chain_category = CONV #( if_le_shp_ico_c=>vcm_chain_category-intercompany_stock_transfer )
          vbtyp              = if_sd_doc_category=>delivery
          lfimg_after        = '1.00'   ##LITERAL
          lfimg_before       = '2.00'   ##LITERAL
          ormng              = '3.00' ) ##LITERAL
        ).

  ENDMETHOD.

ENDCLASS.