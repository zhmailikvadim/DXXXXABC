*"* use this source file for your ABAP unit test classes
CLASS ltd_vb_batch_util DEFINITION FINAL FOR TESTING.
  PUBLIC SECTION.
    INTERFACES if_vb_batch_util PARTIALLY IMPLEMENTED.

ENDCLASS.

CLASS ltd_vb_batch_util IMPLEMENTATION.

  METHOD if_vb_batch_util~is_mat_batch_managed_for_plant.

    IF iv_plant = '0001' AND
       iv_material = 'BATCH_MAT'.
      rv_is_material_batch_managed = abap_true.
    ELSEIF iv_plant = '0001' AND iv_material = 'NO_BATCH_MAT'.
      rv_is_material_batch_managed = abap_false.
    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS ltcl_batch_handler DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: vb_batch_util TYPE REF TO ltd_vb_batch_util.
    DATA: mo_cut        TYPE REF TO if_matdoc_rap_item_validate.
    DATA: message_handler TYPE REF TO if_matdoc_rap_message_handler.
    DATA: fail TYPE if_matdoc_rap_message_handler=>tt_failed_late.
    DATA: reported TYPE if_matdoc_rap_message_handler=>tt_reported_late.
    METHODS:
      setup,
      assert_batch_error_message,
      assert_shelfexp_error_message,
      assert_manfctdt_error_message,
      assert_stockseg_error_message,
      ok_material_batch_managed FOR TESTING RAISING cx_static_check,
      material_ok_plant_ko FOR TESTING RAISING cx_static_check,
      ko_nobatch_mat_with_batch FOR TESTING RAISING cx_static_check,
      ko_nobatch_mat_with_shelfexp FOR TESTING RAISING cx_static_check,
      ko_nobatch_mat_with_manudate FOR TESTING RAISING cx_static_check,
      ko_nobatch_mat_with_stockseg FOR TESTING RAISING cx_static_check.
ENDCLASS.


CLASS ltcl_batch_handler IMPLEMENTATION.

  METHOD setup.
    vb_batch_util = NEW ltd_vb_batch_util(  ).
    cl_vb_batch_factory_injector=>util( vb_batch_util ).
    mo_cut = cl_matdoc_rap_fct_itm_bo_logic=>create(  )->get_validater_for( 'BATCH' ).
    message_handler = cl_matdoc_bil_factory=>get_message_handler(  ).
  ENDMETHOD.

  METHOD ok_material_batch_managed.
    mo_cut->validate_fields_item(
        io_message_handler = message_handler
        item               = VALUE #( Plant = '0001' Material = 'BATCH_MAT' ) ).
    message_handler->fill_fail_late_item(
      CHANGING
        failed_late = fail
    ).

    cl_abap_unit_assert=>assert_initial( fail ).
  ENDMETHOD.

  METHOD material_ok_plant_ko.
    mo_cut->validate_fields_item(
      io_message_handler = message_handler
      item               = VALUE #( Plant = '' Material = 'BATCH_MAT' ) ).
    message_handler->fill_fail_late_item(
      CHANGING
        failed_late = fail
    ).
    cl_abap_unit_assert=>assert_initial( fail ).
  ENDMETHOD.

  METHOD ko_nobatch_mat_with_batch.

    mo_cut->validate_fields_item(
      io_message_handler = message_handler
      item               = VALUE #( Plant = '0001' Material = 'NO_BATCH_MAT' batch = '1' ) ).
    message_handler->fill_fail_late_item(
      CHANGING
        failed_late = fail
    ).
    message_handler->fill_rep_late_item(
      CHANGING
        reported_late = reported
    ).

    assert_batch_error_message( ).

  ENDMETHOD.

  METHOD ko_nobatch_mat_with_shelfexp.
    mo_cut->validate_fields_item(
      io_message_handler = message_handler
      item               = VALUE #( Plant = '0001' Material = 'NO_BATCH_MAT' shelflifeexpirationdate = '20200202' ) ).
    message_handler->fill_fail_late_item(
      CHANGING
        failed_late = fail  ).
    message_handler->fill_rep_late_item(
      CHANGING
        reported_late = reported ).
    assert_shelfexp_error_message(  ).
  ENDMETHOD.

  METHOD ko_nobatch_mat_with_manudate.
    mo_cut->validate_fields_item(
      io_message_handler = message_handler
      item               = VALUE #( Plant = '0001' Material = 'NO_BATCH_MAT' manufacturedate = '20200202' ) ).
    message_handler->fill_fail_late_item(
      CHANGING
        failed_late = fail  ).
    message_handler->fill_rep_late_item(
      CHANGING
        reported_late = reported ).
    assert_manfctdt_error_message(  ).
  ENDMETHOD.

  METHOD ko_nobatch_mat_with_stockseg.
*    mo_cut->validate_fields_item(
*      io_message_handler = message_handler
*      item               = VALUE #( Plant = '0001' Material = 'NO_BATCH_MAT'  ) ).
*    message_handler->fill_fail_late_item(
*      CHANGING
*        failed_late = fail  ).
*    message_handler->fill_rep_late_item(
*      CHANGING
*        reported_late = reported ).
*    assert_stockseg_error_message(  ).
  ENDMETHOD.

  METHOD assert_batch_error_message.
    DATA msg_exp TYPE symsg.
    DATA msg_act TYPE symsg.
    msg_exp = VALUE #( msgid = 'MM_IM_ODATA_API_MDOC'
                       msgno = '012'
                       msgv1 = 'NO_BATCH_MAT'
                       msgv2 = '0001' ).
    msg_act = VALUE #( msgid = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgid
                       msgno = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgno
                       msgv1 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv1
                       msgv2 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv2 ).
    cl_abap_unit_assert=>assert_equals(
     act                  = msg_act
     exp                  = msg_exp ).
  ENDMETHOD.

  METHOD assert_shelfexp_error_message.
    DATA msg_exp TYPE symsg.
    DATA msg_act TYPE symsg.
    msg_exp = VALUE #( msgid = 'MM_IM_ODATA_API_MDOC'
                       msgno = '013'
                       msgv1 = 'ShelfLifeExpirationDate'
                       msgv2 = 'NO_BATCH_MAT'
                       msgv3 = '0001' ).
    msg_act = VALUE #( msgid = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgid
                       msgno = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgno
                       msgv1 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv1
                       msgv2 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv2
                       msgv3 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv3 ).
    cl_abap_unit_assert=>assert_equals(
   EXPORTING
     act                  = msg_act
     exp                  = msg_exp ).
  ENDMETHOD.

  METHOD assert_manfctdt_error_message.
    DATA msg_exp TYPE symsg.
    DATA msg_act TYPE symsg.
    msg_exp = VALUE #( msgid = 'MM_IM_ODATA_API_MDOC'
                       msgno = '013'
                       msgv1 = 'ManufactureDate'
                       msgv2 = 'NO_BATCH_MAT'
                       msgv3 = '0001' ).
    msg_act = VALUE #( msgid = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgid
                       msgno = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgno
                       msgv1 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv1
                       msgv2 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv2
                       msgv3 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv3 ).
    cl_abap_unit_assert=>assert_equals(
     act                  = msg_act
     exp                  = msg_exp ).
  ENDMETHOD.

  METHOD assert_stockseg_error_message.
    DATA msg_exp TYPE symsg.
    DATA msg_act TYPE symsg.
    msg_exp = VALUE #( msgid = 'MM_IM_ODATA_API_MDOC'
                       msgno = '012'
                       msgv1 = 'NO_BATCH_MAT'
                       msgv2 = '0001' ).
    msg_act = VALUE #( msgid = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgid
                       msgno = reported-materialdocumentitem[ 1 ]-%msg->if_t100_message~t100key-msgno
                       msgv1 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv1
                       msgv2 = reported-materialdocumentitem[ 1 ]-%msg->if_t100_dyn_msg~msgv2 ).
    cl_abap_unit_assert=>assert_equals(
     act                  = msg_act
     exp                  = msg_exp ).
  ENDMETHOD.

ENDCLASS.