"! Number ranges: Runtime
class CL_NUMBERRANGE_RUNTIME definition
  public
  final
  create public .

public section.

"! Check of number length
  types NR_LENGTH_CHECK type CHAR1 .
"! Alphanumeric number for NUMBER_CHECK type CHAR20
  types NR_NUMBER_ALPHA type NRFROM .
"! Ignore buffering
  types NR_IGNORE_BUFFER type CHAR1 .
"! Number for NUMBER_CHECK type NUMC20
  types NR_NUMBER type NRLEVEL .
"! Flag: Check if given number is numeric
  types NR_NUMERIC_CHECK type CHAR1 .
"! Object
  types NR_OBJECT type NROBJ .
"! Quantity of requested numbers
  types NR_QUANTITY type NRQUAN .
"! Returncode - see values in the documentation of the methods
  types NR_RETURNCODE type NRRETURN .
"! Quantity of returned numbers
  types NR_RETURNED_QUANTITY type NRQUAN .
"! Subobject
  types NR_SUBOBJECT type NRSOBJ .
"! To year
  types NR_TOYEAR type NRYEAR .
"! Interval number
  types NR_INTERVAL type NRNR .
"! Flag: X = basis object.
  types NR_FLAG type FLAG .

"! Method check number
"! @parameter nr_range_nr            | interval number
"! @parameter number                 | number to be checked, type NUMC
"! @parameter object                 | number range object
"! @parameter subobject              | subobject
"! @parameter toyear                 | to year
"! @parameter numeric_check          | check if number to be checked is numeric, only if from- and tonumber of the external interval are numeric
"! @parameter number_alpha           | number to be checked, type CHAR
"! @parameter length_check           | check of number length
"! @parameter returncode             | " " (Space) number is in interval
"!                                   | "X" Nummer liegt außerhalb des Intervalls
"!                                   | "L" check of number length: length of the checked number is bigger than the defined length
"! @raising   CX_NR_OBJECT_NOT_FOUND | exception class for object not found
"! @raising   CX_NUMBER_RANGES       | exception class for number ranges
  class-methods NUMBER_CHECK
    importing
      !NR_RANGE_NR type NR_INTERVAL
      !NUMBER type NR_NUMBER optional
      !NUMERIC_CHECK type NR_NUMERIC_CHECK default SPACE
      !OBJECT type NR_OBJECT
      !SUBOBJECT type NR_SUBOBJECT default SPACE
      !TOYEAR type NR_TOYEAR default '0000'
      !NUMBER_ALPHA type NR_NUMBER_ALPHA optional
      !LENGTH_CHECK type NR_LENGTH_CHECK optional
    exporting
      !RETURNCODE type NR_RETURNCODE
    raising
      CX_NR_OBJECT_NOT_FOUND
      CX_NUMBER_RANGES .
"! Method get number
"! @parameter nr_range_nr            | interval number
"! @parameter object                 | number range object
"! @parameter quantity               | this parameter can be used to specify how many numbers are requested
"!                                   | for parallel and local buffering, the value must be 1.
"! @parameter subobject              | subobject
"! @parameter toyear                 | to year
"! @parameter ignore_buffer          | = space - the numbers are drawn with buffering of object
"!                                   | = X - the numbers are drawn directly from table NRIV (bypassing buffering)
"!                                   | = S - the numbers are drawn using Italian buffering
"! @parameter number                 | returned number
"! @parameter returned_quantity      | quantity of returned numbers
"!                                   | if fewer numbers are available than requested, this parameter contains how many numbers were returned.
"!                                   | in this case, the return code is 3
"! @parameter returncode             | space - everything ok
"!                                   | 1 - the returned number is in a critical range (specified under “percentage warning” in the object definition)
"!                                   | 2 - the last number of the interval was returned
"!                                   | 3 - see parameter returned quantity
"! @raising   CX_NR_OBJECT_NOT_FOUND | exception class for object not found
"! @raising   CX_NUMBER_RANGES       | exception class for number ranges
  class-methods NUMBER_GET
    importing
      !IGNORE_BUFFER type NR_IGNORE_BUFFER default SPACE
      !NR_RANGE_NR type NR_INTERVAL
      !OBJECT type NR_OBJECT
      !QUANTITY type NR_QUANTITY default '1'
      !SUBOBJECT type NR_SUBOBJECT default SPACE
      !TOYEAR type NR_TOYEAR default '0000'
    exporting
      !NUMBER type NR_NUMBER
      !RETURNCODE type NR_RETURNCODE
      !RETURNED_QUANTITY type NR_RETURNED_QUANTITY
    raising
      CX_NR_OBJECT_NOT_FOUND
      CX_NUMBER_RANGES .
  class-methods NUMBER_STATUS
    importing
      !NR_RANGE_NR type NR_INTERVAL
      !OBJECT type NR_OBJECT
      !SUBOBJECT type NR_SUBOBJECT default SPACE
      !TOYEAR type NR_TOYEAR default '0000'
    exporting
      !NUMBER type NR_NUMBER
    raising
      CX_NR_OBJECT_NOT_FOUND
      CX_NUMBER_RANGES .
protected section.
private section.
ENDCLASS.



CLASS CL_NUMBERRANGE_RUNTIME IMPLEMENTATION.


  METHOD number_check.

    DATA: lv_object    TYPE nr_object,
          lv_subobject TYPE nr_subobject,
          lv_number    TYPE nr_number_alpha.

    IF number IS INITIAL AND number_alpha IS INITIAL.
      RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '098'.
    ELSE.
      IF number IS NOT INITIAL.
        lv_number = number.
      ELSE.
        lv_number = number_alpha.
      ENDIF.
    ENDIF.
*   convert object name to upper case
    CLEAR lv_object.
    IF object IS NOT INITIAL.
      lv_object = to_upper( object ).
    ENDIF.
*   convert subobject name to upper case
    CLEAR lv_subobject.
    IF subobject IS NOT INITIAL.
      lv_subobject = to_upper( subobject ).
    ENDIF.

*   check changeability
    DATA(lv_basis) = cl_szn_number_range=>get_blacklist( iv_object      = lv_object
                                                         iv_api_name    = 'CL_NUMBERRANGE_RUNTIME' ).
    CASE lv_basis.
      WHEN cl_szn_number_range=>c_no_authority.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '810'.      "no authority
      WHEN cl_szn_number_range=>c_not_exists.
        RAISE EXCEPTION TYPE cx_nr_object_not_found
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '002'
                WITH    lv_object. "object does not exist
    ENDCASE.

*   check number
    CALL FUNCTION 'NUMBER_CHECK'
         EXPORTING
           nr_range_nr                   = nr_range_nr
           number                        = lv_number
           object                        = lv_object
           subobject                     = lv_subobject
           toyear                        = toyear
           numeric_check                 = numeric_check
           length_check                  = length_check
         IMPORTING
           returncode                    = returncode
         EXCEPTIONS
           interval_not_found            = 1
           number_range_not_extern       = 2
           object_not_found              = 3
           OTHERS                        = 4.

      IF sy-subrc <> 0.
        CASE sy-subrc.
          WHEN 3.
            RAISE EXCEPTION TYPE cx_nr_object_not_found
                  USING MESSAGE.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE cx_number_ranges
                USING MESSAGE.
        ENDCASE.
      ENDIF.

  ENDMETHOD.


  METHOD number_get.

    DATA: lv_object    TYPE nr_object,
          lv_subobject TYPE nr_subobject,
          lv_ignore    TYPE nr_ignore_buffer.

*   convert to upper case
    IF object IS NOT INITIAL.
      lv_object = to_upper( object ).
    ENDIF.
    IF subobject IS NOT INITIAL.
      lv_subobject = to_upper( subobject ).
    ENDIF.
    IF ignore_buffer IS NOT INITIAL.
      lv_ignore = to_upper( ignore_buffer ).
    ENDIF.

*   check changeability
    DATA(lt_call_stack) = cl_abap_release_blacklist=>get_abap_stack( 2 ).
    IF lines( lt_call_stack ) > 1.
      DATA(lv_caller) = lt_call_stack[ 2 ]-program.
    ENDIF.

*   checked changeability
    DATA(lv_basis) = cl_szn_number_range=>get_blacklist( iv_object   = lv_object
                                                         iv_caller   = lv_caller
                                                         iv_api_name = 'CL_NUMBERRANGE_RUNTIME' ).
    CASE lv_basis.
      WHEN cl_szn_number_range=>c_no_authority.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '810'.      "no authority
      WHEN cl_szn_number_range=>c_not_exists.
        RAISE EXCEPTION TYPE cx_nr_object_not_found
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '002'
                WITH    lv_object. "object does not exist
    ENDCASE.

*   get number
    CALL FUNCTION 'NUMBER_GET_NEXT'
         EXPORTING
           nr_range_nr             = nr_range_nr
           object                  = lv_object
           quantity                = quantity
           subobject               = lv_subobject
           toyear                  = toyear
           ignore_buffer           = lv_ignore
         IMPORTING
           number                  = number
           quantity                = returned_quantity
           returncode              = returncode
         EXCEPTIONS
           interval_not_found      = 1
           number_range_not_intern = 2
           object_not_found        = 3
           quantity_is_0           = 4
           quantity_is_not_1       = 5
           interval_overflow       = 6
           buffer_overflow         = 7
           OTHERS                  = 8.

      IF sy-subrc <> 0.
        CASE sy-subrc.
          WHEN 3.
            RAISE EXCEPTION TYPE cx_nr_object_not_found
                  USING MESSAGE.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE cx_number_ranges
                USING MESSAGE.
        ENDCASE.
      ENDIF.

  ENDMETHOD.


  method NUMBER_STATUS.

     DATA: lv_object          TYPE nr_object,
           lv_subobject       TYPE nr_subobject,
*           lv_number          TYPE nrlevel,
           lt_intervals       TYPE inriv_tt,
           lv_interval_exists TYPE abap_bool,
           ls_tnro            TYPE tnro.

*   convert to upper case
    IF object IS NOT INITIAL.
      lv_object = to_upper( object ).
    ENDIF.
    IF subobject IS NOT INITIAL.
      lv_subobject = to_upper( subobject ).
    ENDIF.

*   check changeability
    DATA(lt_call_stack) = cl_abap_release_blacklist=>get_abap_stack( 2 ).
    IF lines( lt_call_stack ) > 1.
      DATA(lv_caller) = lt_call_stack[ 2 ]-program.
    ENDIF.

*   checked changeability
    DATA(lv_basis) = cl_szn_number_range=>get_blacklist( iv_object   = lv_object
                                                         iv_caller   = lv_caller
                                                         iv_api_name = 'CL_NUMBERRANGE_RUNTIME' ).
    CASE lv_basis.
      WHEN cl_szn_number_range=>c_no_authority.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '810'.      "no authority
      WHEN cl_szn_number_range=>c_not_exists.
        RAISE EXCEPTION TYPE cx_nr_object_not_found
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '002'
                WITH    lv_object. "object does not exist
    ENDCASE.

*   get object details
    CALL FUNCTION 'NUMBER_RANGE_OBJECT_READ'
         EXPORTING
           language          = sy-langu
           object            = lv_object
         IMPORTING
           interval_exists   = lv_interval_exists
           object_attributes = ls_tnro
*           object_text       = obj_text
         EXCEPTIONS
           object_not_found  = 1
           OTHERS            = 2.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE cx_nr_object_not_found
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '002'
                WITH    lv_object. "object does not exist
    ELSE.
      IF ls_tnro-yearind IS NOT INITIAL AND toyear IS INITIAL.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '890'.    " need year by this number range object type
      ENDIF.
    ENDIF.

*   get interval
    CALL FUNCTION 'NUMBER_RANGE_INTERVAL_LIST'
         EXPORTING
           nr_range_nr1               = nr_range_nr
           object                     = lv_object
           subobject                  = lv_subobject
         TABLES
           interval                   = lt_intervals
         EXCEPTIONS
           nr_range_nr1_not_found     = 1
           nr_range_nr1_not_intern    = 2
           nr_range_nr2_must_be_space = 3
           nr_range_nr2_not_extern    = 4
           nr_range_nr2_not_found     = 5
           object_not_found           = 6
           subobject_must_be_space    = 7
           subobject_not_found        = 8
           OTHERS                     = 9.
   IF sy-subrc <> 0.
      CASE sy-subrc.
        WHEN 1.
          RAISE EXCEPTION TYPE cx_number_ranges
                USING MESSAGE.
        WHEN 6.
          RAISE EXCEPTION TYPE cx_nr_object_not_found
                USING MESSAGE.
        WHEN 7 OR 8.
          RAISE EXCEPTION TYPE cx_nr_subobject
                USING MESSAGE.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE cx_number_ranges
                USING MESSAGE.
      ENDCASE.
    ENDIF.

*   return number status
    IF toyear IS NOT INITIAL.
      READ TABLE lt_intervals WITH KEY subobject = lv_subobject
                                       nrrangenr = nr_range_nr
                                       toyear    = toyear
                             INTO DATA(ls_interval).
      IF ls_interval-externind IS INITIAL.
        number = ls_interval-nrlevel.
      ELSE.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '752'.
      ENDIF.
    ELSE.
      READ TABLE lt_intervals WITH KEY subobject = lv_subobject
                                       nrrangenr = nr_range_nr
                                  INTO ls_interval.
      IF ls_interval-externind IS INITIAL.
        number = ls_interval-nrlevel.
      ELSE.
        RAISE EXCEPTION TYPE cx_number_ranges
                MESSAGE ID 'NR'
                TYPE   'E'
                NUMBER '752'.
      ENDIF.
    ENDIF.

  endmethod.
ENDCLASS.