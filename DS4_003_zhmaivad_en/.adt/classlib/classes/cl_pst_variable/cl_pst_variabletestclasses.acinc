
DEFINE source_code.
  add_sample_code( i_line_number = &1 i_code_before = &2 ).
END-OF-DEFINITION.

DEFINE sample_code.
  APPEND &1 TO sample_code.
END-OF-DEFINITION.

CLASS ltc_is_promotable DEFINITION INHERITING FROM th_pst_helper FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: sample_code  TYPE string_table,
          pst_variable TYPE REF TO cl_pst_variable.
    METHODS:
      local_var_promotable FOR TESTING RAISING cx_static_check,
      local_var_typed_locally FOR TESTING RAISING cx_static_check,
      local_var_defined_with_like FOR TESTING RAISING cx_static_check,
      local_var_declared_inline FOR TESTING RAISING cx_static_check,
      structured_var_not_promotable FOR TESTING RAISING cx_static_check,
      scope_of_variables FOR TESTING RAISING cx_static_check,

      assert_is_promotable
        IMPORTING i_position_string TYPE string DEFAULT '1,1',
      assert_is_not_promotable
        IMPORTING i_position_string TYPE string DEFAULT '1,1',
      create_variable_by_sample_code
        IMPORTING i_position_string TYPE string,
      assert_local_scope
        IMPORTING i_variable_name   TYPE string
                  i_position_string TYPE string DEFAULT '1,1',
      assert_global_scope
        IMPORTING i_variable_name   TYPE string
                  i_position_string TYPE string DEFAULT '1,1'.
ENDCLASS.


CLASS ltc_is_promotable IMPLEMENTATION.

  METHOD assert_is_promotable.

    create_variable_by_sample_code( i_position_string = i_position_string ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_promotable( ) ).

  ENDMETHOD.

  METHOD assert_is_not_promotable.

    create_variable_by_sample_code( i_position_string = i_position_string ).
    cl_abap_unit_assert=>assert_false( pst_variable->is_promotable( ) ).

  ENDMETHOD.

  METHOD local_var_promotable.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA variable TYPE string.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    assert_is_promotable( '7,10' ).

  ENDMETHOD.

  METHOD scope_of_variables.

    sample_code:

      `REPORT report.`,
      `DATA: global_variable TYPE i.`,
      `CONSTANTS: global_constant TYPE i VALUE 0.`,
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    CONSTANTS: member_constant TYPE i VALUE 0.`,
      `    CLASS-DATA: static_attribute TYPE i.`,
      `    DATA: attribute TYPE i.`,
      `    METHODS one IMPORTING parameter TYPE i.`,
      `ENDCLASS.`,

      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: local_variable TYPE string.`,
      `    FIELD-SYMBOLS: <field_symbol> TYPE i.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    assert_local_scope(  i_variable_name = 'local_variable'    i_position_string = '13,10' ).
    assert_local_scope(  i_variable_name = 'parameter'         i_position_string = '13,10' ).
    assert_local_scope(  i_variable_name = '<field_symbol>'    i_position_string = '13,10' ).

    assert_global_scope( i_variable_name =  'global_variable'  i_position_string = '13,10' ).
    assert_global_scope( i_variable_name =  'global_constant'  i_position_string = '13,10' ).
    assert_global_scope( i_variable_name =  'member_constant'  i_position_string = '13,10' ).
    assert_global_scope( i_variable_name =  'static_attribute' i_position_string = '13,10' ).
    assert_global_scope( i_variable_name =  'attribute'        i_position_string = '13,10' ).

  ENDMETHOD.

  METHOD local_var_typed_locally.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    TYPES: my_type TYPE string.`,
      `    DATA variable TYPE my_type.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    assert_is_not_promotable( '7,10' ).

  ENDMETHOD.

  METHOD local_var_defined_with_like.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: variable LIKE abap_true.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    assert_is_not_promotable( '7,10' ).

  ENDMETHOD.

  METHOD local_var_declared_inline.

    abort_if_wrong_release( 'Inline declarations are not supported below 7.40 release.' ).

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA(variable) = 'hello'.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    assert_is_promotable( '7,10' ).

  ENDMETHOD.

  METHOD structured_var_not_promotable.

    sample_code:
     `CLASS lcl DEFINITION.`,
     `  PUBLIC SECTION.`,
     `    METHODS one.`,
     `ENDCLASS.`,
     `CLASS lcl IMPLEMENTATION.`,
     `  METHOD one.`,
     `    DATA: begin of variable,`,
     `            first type string,`,
     `            second type i,`,
     `          end of variable.`,
     `  ENDMETHOD.`,
     `ENDCLASS.`.

    assert_is_not_promotable( '7,22' ).

  ENDMETHOD.

  METHOD create_variable_by_sample_code.

    DATA: root     TYPE REF TO cl_pst_node,
          variable TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( i_source_code = sample_code i_position_string = i_position_string ).
    variable = root->find_node_by_name( i_name = 'variable' i_kind = ce_pst_kind=>any ).
    pst_variable = cl_pst_variable=>create( variable ).

  ENDMETHOD.


  METHOD assert_local_scope.

    DATA: root     TYPE REF TO cl_pst_node,
          variable TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( i_source_code = sample_code i_position_string = i_position_string ).
    variable = root->find_node_by_name( i_name = i_variable_name i_kind = ce_pst_kind=>any ).
    assert_bound( variable ).
    pst_variable = cl_pst_variable=>create( variable ).

    assert_equals( act = pst_variable->has_local_scope( ) exp = abap_true ).

  ENDMETHOD.

  METHOD assert_global_scope.

    DATA: root     TYPE REF TO cl_pst_node,
          variable TYPE REF TO cl_pst_node.


    root = build_pst_from_sample_code( i_source_code = sample_code i_position_string = i_position_string ).
    variable = root->find_node_by_name( i_name = i_variable_name i_kind = ce_pst_kind=>any ).
    assert_bound( variable ).
    pst_variable = cl_pst_variable=>create( variable ).

    assert_equals( act = pst_variable->has_local_scope( ) exp = abap_false ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_useable_as_parameter DEFINITION INHERITING FROM th_pst_helper FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: sample_code  TYPE string_table,
          pst_variable TYPE REF TO cl_pst_variable.
    METHODS:
      simple_type FOR TESTING RAISING cx_static_check,
      table_type FOR TESTING RAISING cx_static_check,
      range_type FOR TESTING RAISING cx_static_check,
      type_c_with_length FOR TESTING RAISING cx_static_check,
      type_p_with_length FOR TESTING RAISING cx_static_check,

      assert_not_useable_as_param,
      assert_useable_as_param,
      create_variable_by_sample_code.
ENDCLASS.


CLASS ltc_useable_as_parameter IMPLEMENTATION.

  METHOD simple_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    assert_useable_as_param( ).

  ENDMETHOD.

  METHOD table_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE TABLE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    assert_not_useable_as_param( ).

  ENDMETHOD.

  METHOD range_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE RANGE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    assert_not_useable_as_param( ).

  ENDMETHOD.

  METHOD type_c_with_length.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE c LENGTH 10.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    assert_not_useable_as_param( ).

  ENDMETHOD.

  METHOD type_p_with_length.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE p LENGTH 10 DECIMALS 2.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    assert_not_useable_as_param( ).

  ENDMETHOD.

  METHOD assert_useable_as_param.

    create_variable_by_sample_code( ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_useable_as_parameter_type( ) ).

  ENDMETHOD.

  METHOD assert_not_useable_as_param.

    create_variable_by_sample_code( ).
    cl_abap_unit_assert=>assert_false( pst_variable->is_useable_as_parameter_type( ) ).

  ENDMETHOD.

  METHOD create_variable_by_sample_code.

    DATA: root      TYPE REF TO cl_pst_node,
          attribute TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( sample_code ).
    attribute = root->find_node_by_name( i_name = 'attribute' i_kind = ce_pst_kind=>any ).
    pst_variable = cl_pst_variable=>create( attribute ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_get_type_def DEFINITION INHERITING FROM th_pst_helper FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: sample_code  TYPE string_table,
          pst_variable TYPE REF TO cl_pst_variable.
    METHODS:
      simple_type FOR TESTING RAISING cx_static_check,
      range_type FOR TESTING RAISING cx_static_check,
      standard_table_without_key FOR TESTING RAISING cx_static_check,
      line_type FOR TESTING RAISING cx_static_check,
      type_c_with_length FOR TESTING RAISING cx_static_check,
      standard_table_with_key FOR TESTING RAISING cx_static_check,
      data_with_value_only FOR TESTING RAISING cx_static_check,
      type_c_without_length FOR TESTING RAISING cx_static_check,
      type_p_with_length_decimals FOR TESTING RAISING cx_static_check,
      type_p_without_length FOR TESTING RAISING cx_static_check,
      inline_declared_variable FOR TESTING RAISING cx_static_check,
      star_select_list_into_itab FOR TESTING RAISING cx_static_check,
      star_select_list_into_entry FOR TESTING RAISING cx_static_check,
      select_list_into_itab FOR TESTING RAISING cx_static_check,
      select_list_into_wa FOR TESTING RAISING cx_static_check,

      verify_type_def
        IMPORTING
          i_type_def TYPE string
          i_var_name TYPE string DEFAULT 'attribute' ##NO_TEXT
          i_line_type_only type abap_bool default abap_false.
ENDCLASS.


CLASS ltc_get_type_def IMPLEMENTATION.

  METHOD simple_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE string.' ).

  ENDMETHOD.

  METHOD range_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE RANGE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE RANGE OF string.' ).

  ENDMETHOD.

  METHOD standard_table_without_key.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE TABLE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE TABLE OF string WITH DEFAULT KEY.' ).

  ENDMETHOD.

  METHOD standard_table_with_key.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE STANDARD TABLE OF syst WITH NON-UNIQUE KEY primary_key COMPONENTS mandt uname READ-ONLY INITIAL SIZE 5.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE STANDARD TABLE OF syst WITH NON-UNIQUE KEY primary_key COMPONENTS mandt uname INITIAL SIZE 5.' ).

  ENDMETHOD.


  METHOD line_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE LINE OF string_table.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE LINE OF string_table.' ).
    cl_abap_unit_assert=>assert_equals( exp = 'TYPE LINE OF' act = pst_variable->get_type_operator( ) ).
    cl_abap_unit_assert=>assert_equals( exp = 'string_table' act = pst_variable->get_referenced_type( ) ).

  ENDMETHOD.

  METHOD type_c_with_length.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE c LENGTH 10.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE c LENGTH 10.' ).

  ENDMETHOD.

  METHOD type_p_with_length_decimals.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE p LENGTH 10 DECIMALS 2.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE p LENGTH 10 DECIMALS 2.' ).

  ENDMETHOD.

  METHOD type_c_without_length.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE c.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE c LENGTH 1.' ).

  ENDMETHOD.

  METHOD type_p_without_length.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE p.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    "default length of p is 8 byte - each byte takes two decimal places but the last one only one and the sign
    verify_type_def( i_type_def = 'TYPES: helper_type TYPE p LENGTH 15.' ).

  ENDMETHOD.

  METHOD data_with_value_only.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute VALUE 'x'.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE c LENGTH 1.' ).

  ENDMETHOD.

  METHOD inline_declared_variable.

    sample_code:
      `REPORT dummy. CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA(variable) = 'xu'.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE c LENGTH 2.' i_var_name = 'variable' ).
    cl_abap_unit_assert=>assert_equals( exp = 'TYPE' act = to_upper( pst_variable->get_type_operator( ) ) ).
    cl_abap_unit_assert=>assert_equals( exp = 'C' act = pst_variable->get_referenced_type( ) ).

  ENDMETHOD.

  METHOD star_select_list_into_itab.

    sample_code:
      `REPORT dummy. CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    select * from snwd_stock into table @data(itab).`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE snwd_stock.' i_var_name = 'itab' i_line_type_only = abap_true ).
    cl_abap_unit_assert=>assert_equals( exp = 'type standard table of' act = pst_variable->get_type_operator( ) ).
    cl_abap_unit_assert=>assert_equals( exp = 'SNWD_STOCK' act = pst_variable->get_referenced_type( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->is_useable_as_parameter_type( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_promotable( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->helper_type_needed4declaration( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->helper_type_needed4parameter( ) ).

  ENDMETHOD.

  METHOD star_select_list_into_entry.

    sample_code:
      `REPORT dummy. CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    select single * from snwd_stock into @data(entry).`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_type_def( i_type_def = 'TYPES: helper_type TYPE snwd_stock.' i_var_name = 'entry' ).
    cl_abap_unit_assert=>assert_equals( exp = 'type' act = pst_variable->get_type_operator( ) ).
    cl_abap_unit_assert=>assert_equals( exp = 'SNWD_STOCK' act = pst_variable->get_referenced_type( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_useable_as_parameter_type( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_promotable( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->helper_type_needed4declaration( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->helper_type_needed4parameter( ) ).


  ENDMETHOD.

  METHOD select_list_into_itab.

    sample_code:
      `REPORT dummy. CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    select client, node_key from snwd_stock into table @data(itab).`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    DATA(exp_line_type_def) = |TYPES: BEGIN OF helper_type,{ nl }         client TYPE snwd_stock-client,{ nl }         node_key TYPE snwd_stock-node_key,{ nl }       END OF helper_type.|.
    DATA(exp_type_def) = |TYPES: BEGIN OF helper_type_line,{ nl }         client TYPE snwd_stock-client,{ nl }         node_key TYPE snwd_stock-node_key,{ nl }       END OF helper_type_line.|.
    exp_type_def = |{ exp_type_def }{ nl }TYPES helper_type TYPE TABLE OF helper_type_line WITH EMPTY KEY.|.

    verify_type_def( i_type_def = exp_type_def i_var_name = 'itab' ).
    verify_type_def( i_type_def = exp_line_type_def i_var_name = 'itab' i_line_type_only = abap_true ).
    cl_abap_unit_assert=>assert_equals( exp = 'type standard table of' act = pst_variable->get_type_operator( ) ).
    cl_abap_unit_assert=>assert_equals( exp = '' act = pst_variable->get_referenced_type( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->is_useable_as_parameter_type( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_promotable( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->helper_type_needed4declaration( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->helper_type_needed4parameter( ) ).


  ENDMETHOD.

  METHOD select_list_into_wa.

    sample_code:
      `REPORT dummy. CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    select single client, node_key from snwd_stock into @data(entry).`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    DATA(exp_type_def) = |TYPES: BEGIN OF helper_type,{ nl }         client TYPE snwd_stock-client,{ nl }         node_key TYPE snwd_stock-node_key,{ nl }       END OF helper_type.|.

    verify_type_def( i_type_def = exp_type_def i_var_name = 'entry' ).
    verify_type_def( i_type_def = exp_type_def i_var_name = 'entry' i_line_type_only = abap_true ).
    cl_abap_unit_assert=>assert_equals( exp = 'type' act = pst_variable->get_type_operator( ) ).
    cl_abap_unit_assert=>assert_equals( exp = '' act = pst_variable->get_referenced_type( ) ).
    cl_abap_unit_assert=>assert_false( pst_variable->is_useable_as_parameter_type( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->is_promotable( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->helper_type_needed4declaration( ) ).
    cl_abap_unit_assert=>assert_true( pst_variable->helper_type_needed4parameter( ) ).

  ENDMETHOD.

  METHOD verify_type_def.

    DATA: root      TYPE REF TO cl_pst_node,
          attribute TYPE REF TO cl_pst_node,
          type_def TYPE REF TO cl_pst_region.

    root = build_pst_from_sample_code( sample_code ).

    attribute = root->find_node_by_name( i_name = i_var_name i_kind = ce_pst_kind=>any ).

    pst_variable = cl_pst_variable=>create( attribute ).
    type_def = pst_variable->get_type_def( i_helper_type = 'helper_type' i_flg_line_type = i_line_type_only ).
    cl_abap_unit_assert=>assert_equals( exp = to_lower( i_type_def ) act = to_lower( type_def->to_string( ) ) ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_get_referenced_data_object DEFINITION INHERITING FROM th_pst_helper FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: sample_code  TYPE string_table,
          pst_variable TYPE REF TO cl_pst_variable.

    METHODS:
      local_var_like_local_var FOR TESTING RAISING cx_static_check,
      local_var_like_attribute FOR TESTING RAISING cx_static_check,
      local_var_like_parameter FOR TESTING RAISING cx_static_check,
      local_var_like_inline_lcl_var FOR TESTING RAISING cx_static_check,
      local_var_like_local_constant FOR TESTING RAISING cx_static_check,
      local_var_like_constant FOR TESTING RAISING cx_static_check,
      attribute_like_attribute FOR TESTING RAISING cx_static_check,
      attribute_like_constant FOR TESTING RAISING cx_static_check,
      parameter_like_attribute FOR TESTING RAISING cx_static_check,
      parameter_like_parameter FOR TESTING RAISING cx_static_check,
      verify_referenced_variable
        IMPORTING
          i_name_of_referenced_var      TYPE string
          i_name_of_var_typed_with_like TYPE string
          i_position_string             TYPE string DEFAULT '1,1'
          i_kind_referenced_var         TYPE REF TO ce_pst_kind OPTIONAL.
ENDCLASS.


CLASS ltc_get_referenced_data_object IMPLEMENTATION.

  METHOD local_var_like_local_var.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: local_var TYPE string,`,
      `          like_local_var LIKE local_var.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'local_var' i_name_of_var_typed_with_like = 'like_local_var' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD local_var_like_inline_lcl_var.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: local_var TYPE string VALUE 'hello'.`,
      `    DATA: like_local_var LIKE local_var.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'local_var' i_name_of_var_typed_with_like = 'like_local_var' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD local_var_like_local_constant.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    CONSTANTS: constant TYPE string VALUE 'hello'.`,
      `    DATA: like_local_constant LIKE constant.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'constant' i_name_of_var_typed_with_like = 'like_local_constant' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD local_var_like_attribute.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `    DATA: attribute TYPE string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: like_attribute LIKE attribute.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'attribute' i_name_of_var_typed_with_like = 'like_attribute' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD local_var_like_constant.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `    CONSTANTS: constant TYPE string VALUE 'hello'.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: like_constant LIKE constant.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'constant' i_name_of_var_typed_with_like = 'like_constant' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD local_var_like_parameter.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one IMPORTING i_input TYPE string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: like_parameter LIKE i_input.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'i_input' i_name_of_var_typed_with_like = 'like_parameter' i_position_string = '7,20' ).

  ENDMETHOD.

  METHOD attribute_like_attribute.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one.`,
      `    DATA: attribute TYPE string,`,
      `          like_attribute LIKE attribute.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `    DATA: attribute TYPE I. "local var shadows attribute`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'attribute' i_kind_referenced_var = ce_pst_kind=>attribute
                                i_name_of_var_typed_with_like = 'like_attribute' i_position_string = '9,20' ).

    "check that not the shadowing local variable is found
    cl_abap_unit_assert=>assert_equals( exp = ce_pst_kind=>attribute act = pst_variable->get_referenced_data_object( )->kind ).

  ENDMETHOD.

  METHOD attribute_like_constant.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    CONSTANTS: constant TYPE string VALUE 'hello'.`,
      `    DATA: like_constant LIKE constant.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'constant' i_name_of_var_typed_with_like = 'like_constant' ).

  ENDMETHOD.

  METHOD parameter_like_attribute.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE string.`,
      `    METHODS: one IMPORTING i_input LIKE attribute.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'attribute' i_name_of_var_typed_with_like = 'i_input' ).

  ENDMETHOD.

  METHOD parameter_like_parameter.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    METHODS: one IMPORTING i_input TYPE string`,
      `                 RETURNING VALUE(r_result) LIKE i_input.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `  METHOD one.`,
      `  ENDMETHOD.`,
      `ENDCLASS.`.

    verify_referenced_variable( i_name_of_referenced_var = 'i_input' i_name_of_var_typed_with_like = 'r_result' ).

  ENDMETHOD.

  METHOD verify_referenced_variable.

    DATA: root                TYPE REF TO cl_pst_node,
          exp_referenced_var  TYPE REF TO cl_pst_node,
          var_typed_with_like TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( i_source_code = sample_code i_position_string = i_position_string ).

    IF i_kind_referenced_var IS NOT INITIAL.
      exp_referenced_var = root->find_node_by_name( i_name = i_name_of_referenced_var i_kind = i_kind_referenced_var ).
    ELSE.
      exp_referenced_var = root->find_node_by_name( i_name = i_name_of_referenced_var ).
    ENDIF.
    var_typed_with_like = root->find_node_by_name( i_name = i_name_of_var_typed_with_like ).

    cl_abap_unit_assert=>assert_bound( exp_referenced_var ).

    pst_variable = cl_pst_variable=>create( var_typed_with_like ).

    cl_abap_unit_assert=>assert_true( pst_variable->is_defined_with_like( ) ).
    cl_abap_unit_assert=>assert_equals( exp = exp_referenced_var act = pst_variable->get_referenced_data_object( ) ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_name_proposal DEFINITION INHERITING FROM th_pst_helper FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: sample_code  TYPE string_table,
          pst_variable TYPE REF TO cl_pst_variable.
    METHODS:
      simple_type FOR TESTING RAISING cx_static_check,
      table_type FOR TESTING RAISING cx_static_check,
      range_type FOR TESTING RAISING cx_static_check,
      line_type FOR TESTING RAISING cx_static_check,
      verify_name_proposal_for_type
        IMPORTING
          exp_name_proposal TYPE string.
ENDCLASS.


CLASS ltc_name_proposal IMPLEMENTATION.

  METHOD simple_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_name_proposal_for_type( 'string' ).

  ENDMETHOD.

  METHOD table_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE TABLE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_name_proposal_for_type( 'table_of_string' ).

  ENDMETHOD.

  METHOD range_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE RANGE OF string.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_name_proposal_for_type( 'range_of_string' ).

  ENDMETHOD.

  METHOD line_type.

    sample_code:
      `CLASS lcl DEFINITION.`,
      `  PUBLIC SECTION.`,
      `    DATA: attribute TYPE LINE OF string_table.`,
      `ENDCLASS.`,
      `CLASS lcl IMPLEMENTATION.`,
      `ENDCLASS.`.

    verify_name_proposal_for_type( 'line_of_string_table' ).

  ENDMETHOD.

  METHOD verify_name_proposal_for_type.

    DATA: root      TYPE REF TO cl_pst_node,
          attribute TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( sample_code ).

    attribute = root->find_node_by_name( i_name = 'attribute' i_kind = ce_pst_kind=>any ).

    pst_variable = cl_pst_variable=>create( attribute ).
    cl_abap_unit_assert=>assert_equals( exp = to_lower( exp_name_proposal ) act = to_lower( pst_variable->propose_name_for_type( ) ) ).


  ENDMETHOD.

ENDCLASS.

CLASS ltc_get_declaration_fragment DEFINITION FINAL INHERITING FROM th_pst_helper FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: pst_variable TYPE REF TO cl_pst_variable.
    METHODS:
      explicitely_declared_var FOR TESTING RAISING cx_static_check,
      inline_declared_var FOR TESTING RAISING cx_static_check,
      inline_like_other_var FOR TESTING RAISING cx_static_check,
      inline_declared_hostvar_itab FOR TESTING RAISING cx_static_check,
      inline_declared_hostvar_wa FOR TESTING RAISING cx_static_check,
      sorted_table_type_inline_dec FOR TESTING RAISING cx_static_check,
      verify_declaration_fragment IMPORTING exp TYPE string.
ENDCLASS.


CLASS ltc_get_declaration_fragment IMPLEMENTATION.

  METHOD explicitely_declared_var.

    source_code:
    1  `REPORT dummy. CLASS lcl DEFINITION.`,
    2  `  PUBLIC SECTION.`,
    3  `    METHODS one.`,
    4  `ENDCLASS.`,
    5  `CLASS lcl IMPLEMENTATION.`,
    6  `  METHOD one.`,
    7  `    DATA: variable TYPE string.`,
    8  `  ENDMETHOD.`,
    9  `ENDCLASS.`.

    verify_declaration_fragment( 'variable type string' ).

  ENDMETHOD.

  METHOD inline_declared_var.

    abort_if_wrong_release( 'Inline declarations are not supported below 7.40 release.' ).

    source_code:
    1  `REPORT dummy. CLASS lcl DEFINITION.`,
    2  `  PUBLIC SECTION.`,
    3  `    METHODS one.`,
    4  `ENDCLASS.`,
    5  `CLASS lcl IMPLEMENTATION.`,
    6  `  METHOD one.`,
    7  `    DATA(variable) = 42.`,
    8  `  ENDMETHOD.`,
    9  `ENDCLASS.`.

    verify_declaration_fragment( 'variable type i' ).

  ENDMETHOD.

  METHOD inline_declared_hostvar_itab.

    source_code:
    1  `REPORT dummy. CLASS lcl DEFINITION.`,
    2  `  PUBLIC SECTION.`,
    3  `    METHODS one.`,
    4  `ENDCLASS.`,
    5  `CLASS lcl IMPLEMENTATION.`,
    6  `  METHOD one.`,
    7  `    select * from snwd_stock into table @data(variable).`,
    8  `  ENDMETHOD.`,
    9  `ENDCLASS.`.

    verify_declaration_fragment( 'variable type standard table of snwd_stock' ).

  ENDMETHOD.

  METHOD inline_declared_hostvar_wa.

    source_code:
    1  `REPORT dummy. CLASS lcl DEFINITION.`,
    2  `  PUBLIC SECTION.`,
    3  `    METHODS one.`,
    4  `ENDCLASS.`,
    5  `CLASS lcl IMPLEMENTATION.`,
    6  `  METHOD one.`,
    7  `    select single * from snwd_stock into @data(variable).`,
    8  `  ENDMETHOD.`,
    9  `ENDCLASS.`.

    verify_declaration_fragment( 'variable type snwd_stock' ).

  ENDMETHOD.


    method sorted_table_type_inline_dec.

    source_code:
    1 `REPORT dummy. CLASS lcl DEFINITION.`,
    2 `  PUBLIC SECTION.`,
    3 `    METHODS one.`,
    4 `    DATA : orig_type type sorted table of satc_ac_raw with unique key item_id check_run_ix info_type.`,
    5 `ENDCLASS.`,
    6 `CLASS lcl IMPLEMENTATION.`,
    7 `  METHOD one.`,
    8 `    data(variable) = orig_type. `,
    9 `  ENDMETHOD.`,
   10 `ENDCLASS.`.

   "key info cant be determined so we leave it out to the user
   "for sorted tables we always generate non-unique key addition so far
   verify_declaration_fragment( 'variable type sorted table of satc_ac_raw with non-unique key' ).


  endmethod.

  METHOD inline_like_other_var.

    abort_if_wrong_release( 'Inline declarations are not supported below 7.40 release.' ).

    source_code:
    1 `REPORT dummy. CLASS lcl DEFINITION.`,
    2 `  PUBLIC SECTION.`,
    3 `    METHODS one.`,
    4 `ENDCLASS.`,
    5 `CLASS lcl IMPLEMENTATION.`,
    6 `  METHOD one.`,
    7 `    DATA: local TYPE I,`,
    8 `          other LIKE local.`,
    9 `    DATA(variable) = other.`,
   10 `  ENDMETHOD.`,
   11 `ENDCLASS.`.

    verify_declaration_fragment( 'variable type i' ).

  ENDMETHOD.

  METHOD verify_declaration_fragment.

    DATA: root     TYPE REF TO cl_pst_node,
          variable TYPE REF TO cl_pst_node.

    root = build_pst_from_sample_code( source_code ).

    variable = root->find_node_by_name( i_name = 'variable' i_kind = ce_pst_kind=>any ).

    pst_variable = cl_pst_variable=>create( variable ).
    cl_abap_unit_assert=>assert_equals( exp = to_lower( exp ) act = to_lower( pst_variable->get_declaration_fragment( ) ) ).

  ENDMETHOD.

ENDCLASS.

class ltc_line_of_types definition final INHERITING FROM th_pst_helper for testing duration short risk level harmless.

  private section.
    methods:
      field_symbol_loop_at_stringtab for testing raising cx_static_check.
    METHODS get_type_info_for_variable
      IMPORTING
        i_name  TYPE string
      RETURNING
        value(r_result) TYPE ref to cl_art_type_info.
endclass.


class ltc_line_of_types implementation.

  method field_symbol_loop_at_stringtab.

    source_code:
    1 `REPORT dummy. CLASS lcl DEFINITION.`,
    2 `  PUBLIC SECTION.`,
    3 `    METHODS one.`,
    4 `ENDCLASS.`,
    5 `CLASS lcl IMPLEMENTATION.`,
    6 `  METHOD one.`,
    7 `    DATA: itab TYPE stringtab.`,
    8 `    LOOP at itab assigning field-symbol(<field_symbol>).`,
    9 `    ENDLOOP.`,
   10 `  ENDMETHOD.`,
   11 `ENDCLASS.`.

   data(cut) = get_type_info_for_variable( `<field_symbol>` ).

   cl_abap_unit_assert=>assert_equals( exp = `STRING` act = cut->get_name( ) ).
   cl_abap_unit_assert=>assert_equals( exp = `TYPE` act = cut->get_operator( ) ).


  endmethod.


  METHOD get_type_info_for_variable.

    DATA(root) = build_pst_from_sample_code( source_code ).

    data(variable_node) = root->find_node_by_name( i_name = i_name i_kind = ce_pst_kind=>any_local_declaration ).

    data(pst_variable) = cl_pst_variable=>create( variable_node ).
    r_result = pst_variable->get_corresponding_type_info(  ).

  ENDMETHOD.




endclass.