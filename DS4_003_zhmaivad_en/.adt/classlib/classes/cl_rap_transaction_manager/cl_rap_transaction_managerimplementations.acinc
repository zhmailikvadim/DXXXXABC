CLASS lcl_ai_transaction_trace_wrap DEFINITION.
  PUBLIC SECTION.
    METHODS constructor IMPORTING io_ai_transaction TYPE REF TO if_rap_ai_transaction.
    INTERFACES if_rap_ai_transaction.
  PRIVATE SECTION.
    DATA mo_ai_transaction TYPE REF TO if_rap_ai_transaction.
    DATA mo_tracer TYPE REF TO if_sadl_trace.
ENDCLASS.

CLASS lcl_ai_transaction_trace_wrap IMPLEMENTATION.

  METHOD constructor.
    mo_ai_transaction = io_ai_transaction.
    mo_tracer = cl_sadl_trace_factory=>build_wrapper_pattern_tracer( )->for_runtime( )->create_for_object( `AI/BOBF Modify Handler` ) ##NO_TEXT.
  ENDMETHOD.

  METHOD if_rap_ai_transaction~adjust_numbers.
    DATA(lo_task) = mo_tracer->add_event( `Transaction ADJUST_NUMBERS` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->adjust_numbers( ).
    lo_task->with_automatic_message( )->trace_end_of_task( ).
  ENDMETHOD.

  METHOD if_rap_ai_transaction~check_before_save.
    DATA(lo_task) = mo_tracer->add_event( `Transaction CHECK_BEFORE_SAVE` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->check_before_save( IMPORTING ev_rejected = ev_rejected ).
    lo_task->with_message( COND #( WHEN ev_rejected = abap_true THEN `FAILED!` )
        )->trace_end_of_task( ) ##NO_TEXT.
  ENDMETHOD.

  METHOD if_rap_ai_transaction~cleanup.
    DATA(lo_task) = mo_tracer->add_event( `Transaction CLEANUP` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->cleanup( ).
    lo_task->with_automatic_message( )->trace_end_of_task( ).
  ENDMETHOD.

  METHOD if_rap_ai_transaction~cleanup_finalization.
    DATA(lo_task) = mo_tracer->add_event( `Transaction CLEANUP_FINALIZATION` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->cleanup_finalization( ).
    lo_task->with_automatic_message( )->trace_end_of_task( ).
  ENDMETHOD.

  METHOD if_rap_ai_transaction~finalize.
    DATA(lo_task) = mo_tracer->add_event( `Transaction FINALIZE` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->finalize( IMPORTING ev_rejected = ev_rejected ).
    lo_task->with_message( COND #( WHEN ev_rejected = abap_true THEN `FAILED!` )
        )->trace_end_of_task( ) ##NO_TEXT.
  ENDMETHOD.

  METHOD if_rap_ai_transaction~has_changes.
    DATA(lo_task) = mo_tracer->add_event( `Transaction HAS_CHANGES` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    rv_has_changes = mo_ai_transaction->has_changes( ).
    lo_task->with_message( COND #( WHEN rv_has_changes = abap_true THEN `CONTAINS CHANGES` ELSE `No changes` )
        )->trace_end_of_task( ) ##NO_TEXT.
  ENDMETHOD.

  METHOD if_rap_ai_transaction~save.
    DATA(lo_task) = mo_tracer->add_event( `Transaction SAVE` )->classified_as_extended_info( )->with_automatic_message( )->as_task_begin( ) ##NO_TEXT.
    mo_ai_transaction->save( ).
    lo_task->with_automatic_message( )->trace_end_of_task( ).
  ENDMETHOD.

ENDCLASS.