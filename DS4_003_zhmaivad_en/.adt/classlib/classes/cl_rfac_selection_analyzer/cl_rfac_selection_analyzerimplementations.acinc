*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS lcl_abap_types_helper IMPLEMENTATION.
  METHOD class_constructor.
    DATA: generic_type  TYPE string,
          type_operator TYPE string.

    generic_type = 'any' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'any table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'c' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'clike' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'csequence' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'data' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'decfloat' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'hashed table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'index table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'n' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'numeric' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'object' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'p' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'simple' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'sorted table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'standard table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'table' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'x' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.
    generic_type = 'xsequence' ##NO_TEXT.
    INSERT generic_type INTO TABLE lcl_abap_types_helper=>generic_types.

    type_operator = 'like' ##NO_TEXT.
    INSERT type_operator INTO TABLE lcl_abap_types_helper=>type_operators.
    type_operator = 'type' ##NO_TEXT.
    INSERT type_operator INTO TABLE lcl_abap_types_helper=>type_operators.
    type_operator = 'type ref to' ##NO_TEXT.
    INSERT type_operator INTO TABLE lcl_abap_types_helper=>type_operators.
  ENDMETHOD.

  METHOD is_generic_type.
    CHECK i_parameter_type IS NOT INITIAL.
    IF i_parameter_type CS '%'.
      r_is_generic_type = abap_true.
      RETURN.
    ENDIF.
    READ TABLE lcl_abap_types_helper=>generic_types WITH TABLE KEY table_line = i_parameter_type TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      r_is_generic_type = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD is_type_operator_supported.
    CHECK i_type_operator IS NOT INITIAL.
    READ TABLE lcl_abap_types_helper=>type_operators WITH TABLE KEY table_line = i_type_operator TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      r_is_supported = abap_true.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_art_source_repository IMPLEMENTATION.

  METHOD create_instance.
    CREATE OBJECT r_source_repository TYPE lcl_art_source_repository EXPORTING i_blackboard = i_blackboard.
  ENDMETHOD.

  METHOD constructor.
    me->blackboard = i_blackboard.
  ENDMETHOD.

  METHOD lif_source_repository~get_backend_source_selection.

    DATA: pos_selected_source         TYPE REF TO cl_pst_source_position,
          backend_pos_selected_source TYPE REF TO cl_pst_source_position.

    pos_selected_source = me->blackboard->get_pst_position4selection( ).
    IF pos_selected_source->is_cursor( ) = abap_true.
      RAISE EXCEPTION TYPE cx_rfac_error MESSAGE e018(srfac_impl).
    ENDIF.

    backend_pos_selected_source = pos_selected_source->get_backend_position( ).

    r_source_selection-main_program = backend_pos_selected_source->main_prog.
    r_source_selection-global_wb_type = blackboard->get_wb_object_type( ).
    r_source_selection-start_position-include = backend_pos_selected_source->include.
    r_source_selection-start_position-row = backend_pos_selected_source->range-start-row.
    r_source_selection-start_position-col = backend_pos_selected_source->range-start-col.
    r_source_selection-end_position-include  = backend_pos_selected_source->include.
    r_source_selection-end_position-row  = backend_pos_selected_source->range-end-row.
    r_source_selection-end_position-col  = backend_pos_selected_source->range-end-col.

  ENDMETHOD.

  METHOD lif_source_repository~get_selected_source_code.
    CLEAR: e_source_code.

    DATA(selection_position) = blackboard->get_pst_position4selection( ).

    e_source_code = cl_art_source_utility=>get_selected_code_lines( i_source_code = blackboard->get_focused_source( )
                                                                    i_users_selection = selection_position ).

  ENDMETHOD.

  METHOD lif_source_repository~get_include_source_code.
    DATA: source_repository     TYPE REF TO cl_art_source_repository,
          oo_clif_source        TYPE REF TO cl_oo_clif_source,
          syntax_check_includes TYPE sreptab,
          line                  LIKE LINE OF syntax_check_includes.
    CLEAR: e_source_code.

    source_repository = cl_art_source_repository=>get_instance( ).

    IF strlen( i_include_name ) = 32 AND i_include_name+30(2) = 'CP'.
      oo_clif_source ?= source_repository->get_oo_clif_source_object( i_clif_name = cl_oo_classname_service=>get_clsname_by_include( i_include_name )
                                                                     i_mode = cl_art_source_repository=>mode_4_compiler-grained_registered_source ).

      syntax_check_includes = oo_clif_source->get_syntax_check_includes( ).
      READ TABLE syntax_check_includes WITH KEY name = i_include_name INTO line.
      e_source_code = line-source->*.
    ELSE.
      e_source_code = source_repository->read_source( i_include = i_include_name ).
    ENDIF.

  ENDMETHOD.

  METHOD lif_source_repository~get_abap_compiler.

    r_abap_compiler = cl_art_source_repository=>get_instance( )->get_compiler_for_main_program( i_main_program = blackboard->get_main_programm( ) ).

  ENDMETHOD.

  METHOD lif_source_repository~get_frontend_selection_start.
    r_source_selection = blackboard->get_pst_position4selection( )->get_start_position( ).
  ENDMETHOD.

ENDCLASS.

CLASS lcl_source_repository_factory IMPLEMENTATION.
  METHOD get_repository.
    r_repository = lcl_art_source_repository=>create_instance( i_blackboard = i_blackboard ).
  ENDMETHOD.
ENDCLASS.

CLASS lcl_method_extraction_context DEFINITION CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS create
      IMPORTING
        i_source_method               TYPE REF TO cl_pst_method_implementation
        i_backend_pos_above_selection TYPE REF TO cl_pst_source_position
        i_backend_pos_selection       TYPE REF TO cl_pst_source_position
        i_backend_pos_below_selection TYPE REF TO cl_pst_source_position
      RETURNING
        VALUE(r_result)               TYPE REF TO lcl_method_extraction_context.

    DATA source_method TYPE REF TO cl_pst_method_implementation READ-ONLY.
    DATA backend_pos_above_selection TYPE REF TO cl_pst_source_position READ-ONLY.
    DATA backend_pos_selection TYPE REF TO cl_pst_source_position READ-ONLY.
    DATA backend_pos_below_selection TYPE REF TO cl_pst_source_position READ-ONLY.
  PROTECTED SECTION.
  PRIVATE SECTION.

ENDCLASS.

CLASS lcl_method_extraction_context IMPLEMENTATION.

  METHOD create.

    r_result = NEW #( ).

    r_result->source_method = i_source_method.
    r_result->backend_pos_above_selection = i_backend_pos_above_selection.
    r_result->backend_pos_selection = i_backend_pos_selection.
    r_result->backend_pos_below_selection = i_backend_pos_below_selection.

  ENDMETHOD.

ENDCLASS.

CLASS ltc_affected_var_abstract DEFINITION DEFERRED.
CLASS lcl_affected_variable DEFINITION CREATE PRIVATE FRIENDS ltc_affected_var_abstract.
  PUBLIC SECTION.

    TYPES: BEGIN OF ts_usage_vector,
             first_usage_inside   TYPE lif_affected_variable=>usage_access,
             leading_usage_inside TYPE lif_affected_variable=>usage_access,
             last_usage_above     TYPE lif_affected_variable=>usage_access,
             first_usage_below    TYPE lif_affected_variable=>usage_access,
           END OF ts_usage_vector.

    INTERFACES lif_affected_variable.
    CLASS-METHODS create
      IMPORTING
        i_fullname      TYPE string
        i_context       TYPE REF TO lcl_method_extraction_context
      RETURNING
        VALUE(r_result) TYPE REF TO lcl_affected_variable.

    ALIASES: add_reference FOR lif_affected_variable~add_reference,
             get_name FOR lif_affected_variable~get_name.
    ALIASES: param_direction FOR lif_affected_variable~param_direction,
             usage_access FOR lif_affected_variable~usage_access.
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA fullname TYPE string.
    DATA name TYPE string.
    DATA definition_reference TYPE ts_position_and_reference.
    DATA usage_references TYPE tt_positions_and_references.
    DATA context TYPE REF TO lcl_method_extraction_context.
    DATA m_usage_vector TYPE ts_usage_vector.
    DATA: variable TYPE REF TO cl_pst_variable.
    METHODS get_usage_vector
      RETURNING
        VALUE(r_result) TYPE ts_usage_vector.
    METHODS map_mode2_to_usage_access
      IMPORTING
        i_mode2         TYPE scr_ref-mode2
      RETURNING
        VALUE(r_result) TYPE lif_affected_variable=>usage_access.
    METHODS usages_below_are_independent
      RETURNING
        VALUE(r_result) TYPE abap_bool.
    METHODS usages_above_are_independent
      RETURNING
        VALUE(r_result) TYPE abap_bool.
    METHODS usages_inside_are_independent
      RETURNING
        VALUE(r_result) TYPE abap_bool.
    METHODS get_direction_from_leading_use
      IMPORTING
        i_leading_usage_inside TYPE lif_affected_variable=>usage_access
      RETURNING
        VALUE(r_result)        TYPE lif_affected_variable=>param_direction.
    CLASS-METHODS determine_leading_usage
      IMPORTING
        i_leading_usage_access TYPE lif_affected_variable=>usage_access
        i_next_usage_access    TYPE lif_affected_variable=>usage_access
      RETURNING
        VALUE(r_result)        TYPE lif_affected_variable=>usage_access.

ENDCLASS.


CLASS lcl_affected_variable IMPLEMENTATION.

  METHOD create.

    r_result = NEW #( ).
    r_result->fullname = i_fullname.
    r_result->context = i_context.
    r_result->variable = i_context->source_method->find_variable( i_name = r_result->get_name(  ) ).

  ENDMETHOD.

  METHOD lif_affected_variable~add_reference.

    CASE i_compiler_reference-grade.
      WHEN cl_abap_compiler=>grade_definition.
        ASSERT definition_reference IS INITIAL.
        definition_reference = VALUE #( backend_position = i_backend_position reference = i_compiler_reference ).
      WHEN cl_abap_compiler=>grade_direct.
        INSERT VALUE #( backend_position = i_backend_position reference = i_compiler_reference ) INTO TABLE usage_references.
      WHEN OTHERS.
        "component and properties grade are not relevant
    ENDCASE.

  ENDMETHOD.

  METHOD lif_affected_variable~should_become_parameter.

    IF variable IS BOUND AND variable->has_local_scope(  ).

      DATA(usage_vector) = get_usage_vector(  ).

      IF variable->is_parameter(  ).
        r_result = xsdbool( usage_vector-leading_usage_inside <> lif_affected_variable=>variable_usage-none ).
      ELSE.

        r_result = xsdbool( ( usage_vector-last_usage_above  <> lif_affected_variable=>variable_usage-none
                              OR usage_vector-first_usage_below <> lif_affected_variable=>variable_usage-none
                            ) AND usage_vector-leading_usage_inside <> lif_affected_variable=>variable_usage-none ).

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD lif_affected_variable~get_parameter_direction.

    IF me->lif_affected_variable~should_become_parameter(  ).
      DATA(usage_vector) = me->get_usage_vector(  ).


      IF usages_inside_are_independent(  ).
        IF variable->is_parameter(  ).
          r_result = get_direction_from_leading_use( usage_vector-leading_usage_inside ).
        ELSE.
          r_result = lif_affected_variable=>parameter_direction-none.
        ENDIF.
      ELSE.
        r_result = get_direction_from_leading_use( usage_vector-leading_usage_inside ).
      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD get_direction_from_leading_use.

    CASE i_leading_usage_inside.
      WHEN lif_affected_variable=>variable_usage-read.
        r_result = lif_affected_variable=>parameter_direction-importing.
      WHEN lif_affected_variable=>variable_usage-read_and_write.
        r_result = lif_affected_variable=>parameter_direction-changing.
      WHEN lif_affected_variable=>variable_usage-write.
        r_result = lif_affected_variable=>parameter_direction-exporting.
    ENDCASE.

  ENDMETHOD.

  METHOD get_usage_vector.

    IF m_usage_vector IS INITIAL.

      m_usage_vector-last_usage_above = lif_affected_variable~variable_usage-none.
      m_usage_vector-first_usage_inside   = lif_affected_variable~variable_usage-none.
      m_usage_vector-leading_usage_inside = lif_affected_variable~variable_usage-none.
      m_usage_vector-first_usage_below = lif_affected_variable~variable_usage-none.

      LOOP AT usage_references ASSIGNING FIELD-SYMBOL(<line>).

        CASE abap_true.
          WHEN context->backend_pos_above_selection->includes( <line>-backend_position ).
            m_usage_vector-last_usage_above = map_mode2_to_usage_access( <line>-reference-mode2 ).
          WHEN context->backend_pos_selection->includes( <line>-backend_position ).
            IF m_usage_vector-first_usage_inside = lif_affected_variable~variable_usage-none.
              m_usage_vector-first_usage_inside = map_mode2_to_usage_access( <line>-reference-mode2 ).
              m_usage_vector-leading_usage_inside = m_usage_vector-first_usage_inside.
            ELSE.
              m_usage_vector-leading_usage_inside = determine_leading_usage( i_leading_usage_access = m_usage_vector-leading_usage_inside
                                                                             i_next_usage_access    = map_mode2_to_usage_access( <line>-reference-mode2 ) ).
            ENDIF.
          WHEN context->backend_pos_below_selection->includes( <line>-backend_position ).
            IF m_usage_vector-first_usage_below = lif_affected_variable~variable_usage-none.
              m_usage_vector-first_usage_below = map_mode2_to_usage_access( <line>-reference-mode2 ).
            ENDIF.
        ENDCASE.

      ENDLOOP.

    ENDIF.

    r_result = m_usage_vector.

  ENDMETHOD.


  METHOD map_mode2_to_usage_access.

    CASE i_mode2.
      WHEN cl_abap_compiler=>mode2_write OR cl_abap_compiler=>mode2_assign.
        r_result = lif_affected_variable~variable_usage-write.
      WHEN cl_abap_compiler=>mode2_read.
        r_result = lif_affected_variable~variable_usage-read.
      when cl_abap_compiler=>mode2_read_write.
        r_result = lif_affected_variable~variable_usage-read_and_write.
    ENDCASE.

  ENDMETHOD.


  METHOD determine_leading_usage.

    CASE i_leading_usage_access.
      WHEN lif_affected_variable=>variable_usage-none.
        r_result = i_next_usage_access.
      WHEN lif_affected_variable=>variable_usage-write OR lif_affected_variable=>variable_usage-read_and_write.
        r_result = i_leading_usage_access.
      WHEN lif_affected_variable=>variable_usage-read.
        CASE i_next_usage_access.
          WHEN lif_affected_variable=>variable_usage-none OR lif_affected_variable=>variable_usage-read.
            r_result = lif_affected_variable=>variable_usage-read.
          WHEN lif_affected_variable=>variable_usage-write OR lif_affected_variable=>variable_usage-read_and_write.
            r_result = lif_affected_variable=>variable_usage-read_and_write.
        ENDCASE.
    ENDCASE.

  ENDMETHOD.

  METHOD lif_affected_variable~get_name.
    IF name IS INITIAL.
      DATA(offset_for_variable_name) = find_any_of( val = fullname sub = ':' occ = -1 ) + 1.
      name = to_lower( fullname+offset_for_variable_name ).
    ENDIF.
    r_result = name.

  ENDMETHOD.


  METHOD usages_below_are_independent.
    DATA(usage_vector) = get_usage_vector(  ).
    r_result = xsdbool( usage_vector-first_usage_inside = lif_affected_variable=>variable_usage-none OR
                        usage_vector-first_usage_below = lif_affected_variable=>variable_usage-write OR
                        usage_vector-first_usage_below = lif_affected_variable=>variable_usage-none ).
  ENDMETHOD.


  METHOD usages_above_are_independent.
    DATA(usage_vector) = get_usage_vector(  ).
    r_result = xsdbool( usage_vector-last_usage_above = lif_affected_variable=>variable_usage-none OR
                        usage_vector-first_usage_inside = lif_affected_variable=>variable_usage-write OR
                        usage_vector-first_usage_inside = lif_affected_variable=>variable_usage-none ).
  ENDMETHOD.


  METHOD usages_inside_are_independent.
    r_result = xsdbool( usages_above_are_independent(  ) AND usages_below_are_independent(  ) ).
  ENDMETHOD.

ENDCLASS.