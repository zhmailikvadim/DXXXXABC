*"* use this source file for your ABAP unit test classes

class ltc_rfc_krn_services definition final for testing
  duration short
  risk level harmless.

  private section.
    methods:
      authority_check_rfc_1 for testing raising cx_static_check,
      authority_check_rfc_2 for testing raising cx_static_check,
      authority_check_rfc_3 for testing raising cx_static_check,
      is_initial for testing raising cx_static_check,
      only_base16_test for testing raising cx_static_check.

endclass.

class ltc_rfc_krn_services implementation.


  method is_initial.
    data lv_flag type abap_bool value abap_false.
    cl_rfc_krn_services=>get_new_rfc_tid24(
      importing
        is_tid = data(ls_tid)
    ).
    if ls_tid is initial.
      lv_flag = abap_true.
    endif.
    cl_abap_unit_assert=>assert_equals( act = lv_flag exp = abap_false ).
  endmethod.

  method authority_check_rfc_1.
*    DATA lv_authorized TYPE ABAP_BOOLEAN.
*    CALL FUNCTION 'RFC_SIMULATE_AUTH_CHECK' DESTINATION 'NONE'
*      EXPORTING
*        IV_USER = 'ANZEIGER'
*        IV_FM = 'RFC_SIMULATE_AUTH_CHECK'
*      IMPORTING
*        EV_AUTHORIZED = lv_authorized.
*    cl_abap_unit_assert=>assert_equals( act = lv_authorized exp = abap_false ).
  endmethod.

  method authority_check_rfc_2.
*    DATA lv_authorized TYPE ABAP_BOOLEAN.
*    CALL FUNCTION 'RFC_SIMULATE_AUTH_CHECK' DESTINATION 'NONE'
*      EXPORTING
*        IV_USER = 'ANZEIGER'
*        IV_FM = 'RFC_PING'
*      IMPORTING
*        EV_AUTHORIZED = lv_authorized.
*    cl_abap_unit_assert=>assert_equals( act = lv_authorized exp = abap_true ).
  endmethod.

  method authority_check_rfc_3.
*    DATA lv_authorized TYPE ABAP_BOOLEAN.
*    CALL FUNCTION 'RFC_SIMULATE_AUTH_CHECK' DESTINATION 'NONE'
*      EXPORTING
*        IV_USER = 'GERECHT'
*        IV_FM = 'RFC_SIMULATE_AUTH_CHECK'
*      IMPORTING
*        EV_AUTHORIZED = lv_authorized.
*    cl_abap_unit_assert=>assert_equals( act = lv_authorized exp = abap_true ).
  endmethod.

  method only_base16_test.
    cl_rfc_krn_services=>get_new_rfc_tid24(
      importing
        is_tid = data(ls_tid)
    ).
    data lv_pidraw type x length 2.
    lv_pidraw = ls_tid-arfcpid  .
     cl_abap_unit_assert=>assert_equals( act = lv_pidraw exp = ls_tid-arfcpid  ).
  endmethod.



endclass.