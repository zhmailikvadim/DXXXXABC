class CX_ROOT definition
  public
  abstract
  create public .

*"* public components of class CX_ROOT
*"* do not include other source files here!!!
public section.

  interfaces IF_MESSAGE .
  interfaces IF_SERIALIZABLE_OBJECT .

  aliases GET_LONGTEXT
    for IF_MESSAGE~GET_LONGTEXT .
  aliases GET_TEXT
    for IF_MESSAGE~GET_TEXT .

  constants CX_ROOT type SOTR_CONC value '16AA9A3937A9BB56E10000000A11447B'. "#EC NOTEXT
  data TEXTID type SOTR_CONC read-only .
  data PREVIOUS type ref to CX_ROOT read-only .
  data KERNEL_ERRID type S380ERRID read-only .
  type-pools ABAP .
  data IS_RESUMABLE type ABAP_BOOL read-only .

  methods CONSTRUCTOR
    importing
      !TEXTID like TEXTID optional
      !PREVIOUS like PREVIOUS optional .
  methods GET_SOURCE_POSITION
    exporting
      !PROGRAM_NAME type SYREPID
      !INCLUDE_NAME type SYREPID
      !SOURCE_LINE type I .
protected section.
*"* protected components of class CX_ROOT
*"* do not include other source files here!!!
private section.
*"* private components of class CX_ROOT
*"* do not include other source files here!!!

  data INTERNAL_SOURCE_POS type SCX_SRCPOS .

  methods SERIALIZE_HELPER
    exporting
      !INTERNAL_SOURCE_POS type SCX_SRCPOS
      !TEXTID type SOTR_CONC
      !PREVIOUS type ref to CX_ROOT
      !KERNEL_ERRID type S380ERRID
      !IS_RESUMABLE type ABAP_BOOL .
  methods DESERIALIZE_HELPER
    importing
      !INTERNAL_SOURCE_POS type SCX_SRCPOS
      !TEXTID type SOTR_CONC
      !PREVIOUS type ref to CX_ROOT
      !KERNEL_ERRID type S380ERRID
      !IS_RESUMABLE type ABAP_BOOL .
ENDCLASS.



CLASS CX_ROOT IMPLEMENTATION.


  method constructor.
    if textid is initial.
      me->textid = cx_root.
    else.
      me->textid = textid.
    endif.
    me->previous = previous.
  endmethod.


  method deserialize_helper.
    clear me->internal_source_pos. " prog_id + cont_id only work in original program => set to "invalid"
    me->textid       = textid.
    me->previous     = previous.
    me->kernel_errid = kernel_errid.
    me->is_resumable = is_resumable.
  endmethod.


  METHOD get_source_position.
    CALL 'GET_SOURCE_POSITION'
      "EXPORTING
        ID 'INTERNAL'     FIELD internal_source_pos
      "IMPORTING
        ID 'PROGRAM_NAME' FIELD program_name
        ID 'INCLUDE_NAME' FIELD include_name
        ID 'SOURCE_LINE'  FIELD source_line.
  endmethod.


  method if_message~get_longtext.
    try.
      call method ('CL_MESSAGE_HELPER')=>get_longtext_for_message
        exporting
          text   = me
          preserve_newlines = preserve_newlines
        receiving
          result = result.
    catch cx_root.
      result = 'CX_ROOT: call to CL_MESSAGE_HELPER=>GET_LONGTEXT_FOR_MESSAGE failed' ##NO_TEXT.
    endtry.
  endmethod.


METHOD IF_MESSAGE~GET_TEXT.
  TRY.
    CALL METHOD ('CL_MESSAGE_HELPER')=>GET_TEXT_FOR_MESSAGE
      EXPORTING
        TEXT   = ME
      RECEIVING
        RESULT = RESULT.
  CATCH CX_ROOT.
    RESULT = 'CX_ROOT: Call to CL_MESSAGE_HELPER=>GET_TEXT_FOR_MESSAGE failed' ##NO_TEXT.
  ENDTRY.

ENDMETHOD.


  method serialize_helper.
    internal_source_pos = me->internal_source_pos.
    textid              = me->textid.
    previous            = me->previous.
    kernel_errid        = me->kernel_errid.
    is_resumable        = me->is_resumable.
  endmethod.
ENDCLASS.