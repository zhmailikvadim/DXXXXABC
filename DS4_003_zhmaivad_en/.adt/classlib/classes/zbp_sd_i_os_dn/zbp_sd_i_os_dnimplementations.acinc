************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KALSHZHA     | 01.02.2023 | 16869 3/3 [Development] Outbound Sch     *
*              |            | DS4K940325                               *
*----------------------------------------------------------------------*
* KALSHZHA     | 22.05.2023 | 21551 3/3 [Development] Outbound Sch     *
*              |            | DS4K953116                               *
*----------------------------------------------------------------------*
* BALUNYAN     | 14.08.2023 | 21551 3/3 [Development] Outbound Sch     *
*              |            | DS4K953116                               *
*----------------------------------------------------------------------*
* BALUNYAN     | 31.08.2023 | 21551 3/3 [Development] Outbound Sch     *
*              |            | DS4K953116                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 11.12.2023 | 27429     : Development - Outbound schedu*
*              |            | DS4K972979                               *
*----------------------------------------------------------------------*
CLASS lhc_zsd_i_os_dn DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING it_keys
      REQUEST is_request
       FOR zsd_i_os_dn RESULT result.

    METHODS createwithreference FOR MODIFY
      IMPORTING it_keys FOR ACTION zsd_i_os_dn~createwithreference.


    METHODS create_cst FOR MODIFY
      IMPORTING keys FOR ACTION zsd_i_os_dn~create_cst RESULT result.

    METHODS copy FOR MODIFY
      IMPORTING it_keys FOR ACTION zsd_i_os_dn~copy.

    METHODS get_time_zone
      IMPORTING iv_zvstel       TYPE zsd_t_os_dn_cut-zvstel
      RETURNING VALUE(rv_tzone) TYPE adrc-time_zone.

    METHODS filladminfields FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zsd_i_os_dn~filladminfields.

    METHODS filltimezone FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zsd_i_os_dn~filltimezone.

    METHODS validateshippingpoint FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_os_dn~validateshippingpoint.

    METHODS validatedistributionchannel FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_os_dn~validatedistributionchannel.

    METHODS validateorderreason FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_os_dn~validateorderreason.
    METHODS validatepurchasingdocumenttype FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_os_dn~validatepurchasingdocumenttype.
    METHODS validatecutofftimezone FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_os_dn~validatecutofftimezone.

    METHODS is_update_granted
      IMPORTING iv_shipping_point        TYPE vstel
      RETURNING VALUE(rv_update_granted) TYPE char2.
    METHODS is_delete_granted
      IMPORTING iv_shipping_point        TYPE vstel
      RETURNING VALUE(rv_delete_granted) TYPE char2.
    METHODS is_creation_granted
      IMPORTING iv_shipping_point          TYPE vstel
      RETURNING VALUE(rv_creation_granted) TYPE char2.

ENDCLASS.

CLASS lhc_zsd_i_os_dn IMPLEMENTATION.
  METHOD create_cst.
    DATA(ls_data) = keys[ 1 ].

    IF ls_data-%param-cutofftimezone IS INITIAL.
      DATA(lv_timezone) = sy-zonlo.
    ELSE.
      lv_timezone = ls_data-%param-cutofftimezone.
    ENDIF.

    IF is_creation_granted( ls_data-%param-shippingpoint ) = if_abap_behv=>auth-allowed.

      MODIFY ENTITY IN LOCAL MODE zsd_i_os_dn
               CREATE FIELDS (
                     shippingpoint
                     distributionchannel
                     purchasingdocumenttype
                     orderreason
                     cutofftime
                     cutofftimezone
                     )
                 WITH VALUE #( (
                                  %cid                   = ls_data-%cid
                                  shippingpoint          = ls_data-%param-shippingpoint
                                  distributionchannel    = ls_data-%param-distributionchannel
                                  purchasingdocumenttype = ls_data-%param-purchasingdocumenttype
                                  orderreason            = ls_data-%param-orderreason
                                  cutofftime             = ls_data-%param-cutofftime
                                  cutofftimezone         = lv_timezone
                 ) )
           MAPPED mapped
           FAILED failed
           REPORTED reported.

      CHECK failed-zsd_i_os_dn IS INITIAL.
      READ ENTITY IN LOCAL MODE zsd_i_os_dn
           ALL FIELDS
           WITH VALUE #( ( shippingpoint       = ls_data-%param-shippingpoint
                           distributionchannel = ls_data-%param-distributionchannel
                           purchasingdocumenttype      = ls_data-%param-purchasingdocumenttype
                           orderreason         = ls_data-%param-orderreason ) )
          RESULT DATA(lt_os_lt_result).

      result = VALUE #( FOR <ls_os_lt_result> IN lt_os_lt_result ( %cid = ls_data-%cid
                                                                   %param =  <ls_os_lt_result> ) ).
    ELSE.
      APPEND VALUE #(
         %msg      = NEW zcx_sd_os_dn(
                         iv_shippingpoint = ls_data-%param-shippingpoint
                         iv_textid        = zcx_sd_os_lt=>mc_creation_not_allowed
                         iv_severity      = if_abap_behv_message=>severity-error )
         %element-shippingpoint = if_abap_behv=>mk-on
      ) TO reported-zsd_i_os_dn.
    ENDIF.
  ENDMETHOD.

  METHOD filltimezone.
    READ ENTITY IN LOCAL MODE zsd_i_os_dn
        FIELDS (
            shippingpoint
            distributionchannel
            purchasingdocumenttype
            orderreason
            cutofftimezone )
       WITH CORRESPONDING #( keys )
    RESULT DATA(lt_data).
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      IF <ls_data>-cutofftimezone IS INITIAL.
        <ls_data>-cutofftimezone = get_time_zone( <ls_data>-shippingpoint ).
        MODIFY ENTITY IN LOCAL MODE zsd_i_os_dn
        UPDATE SET FIELDS WITH VALUE #( (
         shippingpoint = <ls_data>-shippingpoint
         distributionchannel = <ls_data>-distributionchannel
         purchasingdocumenttype = <ls_data>-purchasingdocumenttype
         orderreason = <ls_data>-orderreason
         cutofftimezone = <ls_data>-cutofftimezone ) )
         REPORTED DATA(ls_reported).
        reported = CORRESPONDING #( DEEP ls_reported ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
  METHOD filladminfields.
    DATA: lt_os_dn_u       TYPE TABLE FOR UPDATE zsd_i_os_dn.

    READ ENTITY IN LOCAL MODE zsd_i_os_dn
        FIELDS (
            changedon
            changedat
            createdat
            createdon )
       WITH CORRESPONDING #( keys )
    RESULT DATA(lt_os_dn).

    LOOP AT lt_os_dn ASSIGNING FIELD-SYMBOL(<ls_os_dn>).
      APPEND INITIAL LINE TO lt_os_dn_u ASSIGNING FIELD-SYMBOL(<ls_os_dn_u>).
      <ls_os_dn_u>-%key = <ls_os_dn>-%key.

      IF <ls_os_dn>-createdat IS INITIAL.
        <ls_os_dn_u>-createdat = cl_abap_context_info=>get_system_time( ).
      ELSE.
        <ls_os_dn_u>-createdat = <ls_os_dn>-createdat.
      ENDIF.

      IF <ls_os_dn>-createdon IS INITIAL.
        <ls_os_dn_u>-createdon = cl_abap_context_info=>get_system_date( ).
      ELSE.
        <ls_os_dn_u>-createdon = <ls_os_dn>-createdon.
      ENDIF.

      <ls_os_dn_u>-changedat = cl_abap_context_info=>get_system_time( ).
      <ls_os_dn_u>-changedon = cl_abap_context_info=>get_system_date( ).
    ENDLOOP.
    IF lt_os_dn_u IS NOT INITIAL.

      MODIFY ENTITY  IN LOCAL MODE zsd_i_os_dn
          UPDATE FIELDS (
              changedon
              changedat
              createdat
              createdon )
            WITH CORRESPONDING #( lt_os_dn_u ).
    ENDIF.


  ENDMETHOD.

  METHOD copy.
    DATA: lt_new      TYPE TABLE FOR CREATE zsd_i_os_dn.

    DATA(ls_data) = it_keys[ 1 ]-%param.

    IF is_creation_granted( ls_data-newshippingpoint ) = if_abap_behv=>auth-allowed.

      APPEND VALUE #(
                         %data-shippingpoint       =  ls_data-newshippingpoint
                         %data-distributionchannel =  ls_data-distributionchannel
                         %data-purchasingdocumenttype = ls_data-purchasingdocumenttype
                         %data-orderreason = ls_data-orderreason
                         %data-cutofftime = ls_data-cutofftime
                         %data-cutofftimezone = ls_data-cutofftimezone

      ) TO lt_new.

      "create new BO instance
      MODIFY ENTITY IN LOCAL MODE zsd_i_os_dn
          CREATE FIELDS (
           shippingpoint
           distributionchannel
           purchasingdocumenttype
           orderreason
           cutofftime
           cutofftimezone
          )
            WITH lt_new
      MAPPED mapped
      FAILED failed
      REPORTED reported.
    ELSE.
      APPEND VALUE #(
         %msg      = NEW zcx_sd_os_dn(
                         iv_shippingpoint = ls_data-newshippingpoint
                         iv_textid        = zcx_sd_os_lt=>mc_creation_not_allowed
                         iv_severity      = if_abap_behv_message=>severity-error )
         %element-shippingpoint = if_abap_behv=>mk-on
      ) TO reported-zsd_i_os_dn.
    ENDIF.
  ENDMETHOD.

  METHOD get_instance_authorizations.
    DATA ls_result LIKE LINE OF result.
    CHECK is_request IS NOT INITIAL.
    LOOP AT it_keys INTO DATA(ls_key).
      ls_result = VALUE #( shippingpoint       = ls_key-shippingpoint
                           distributionchannel = ls_key-distributionchannel
                           orderreason         = ls_key-orderreason
                           purchasingdocumenttype = ls_key-purchasingdocumenttype
                          %update              = is_update_granted( iv_shipping_point = ls_key-shippingpoint )
                          %delete              = is_delete_granted( iv_shipping_point = ls_key-shippingpoint )
                         ).
      APPEND ls_result TO result.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_time_zone.
    SELECT SINGLE addresstimezone
    INTO @rv_tzone
    FROM zsd_i_shipping_points
    WHERE shippingpoint EQ @iv_zvstel.               "#EC CI_SEL_NESTED
    IF sy-subrc NE 0.
      CLEAR rv_tzone.
    ENDIF.
  ENDMETHOD.

  METHOD createwithreference.
    DATA: lt_new      TYPE TABLE FOR CREATE zsd_i_os_dn.

    DATA(ls_shipping_point) = it_keys[ 1 ].

    IF is_creation_granted( ls_shipping_point-%param-newshippingpoint ) = if_abap_behv=>auth-allowed.

      SELECT shippingpoint,
             distributionchannel,
             purchasingdocumenttype,
             orderreason,
             cutofftime,
             cutofftimezone
      FROM zsd_i_os_dn
      WHERE shippingpoint = @ls_shipping_point-%param-shippingpoint
      OR shippingpoint = @ls_shipping_point-%param-newshippingpoint
      INTO TABLE @DATA(lt_referenced).

      IF sy-subrc = 0.
        DATA(lt_records_to_create) = lt_referenced.
        DELETE lt_records_to_create WHERE shippingpoint = ls_shipping_point-%param-newshippingpoint.

        DATA(lt_existing_records) = lt_referenced.
        DELETE lt_existing_records WHERE shippingpoint = ls_shipping_point-%param-shippingpoint.

        DATA(lv_duplicate_counter) = 0.
        LOOP AT lt_existing_records ASSIGNING FIELD-SYMBOL(<ls_existing_records>).

          DELETE lt_records_to_create
          WHERE distributionchannel = <ls_existing_records>-distributionchannel
          AND orderreason           = <ls_existing_records>-orderreason
          AND purchasingdocumenttype = <ls_existing_records>-purchasingdocumenttype.

          IF sy-subrc = 0.
            lv_duplicate_counter = lv_duplicate_counter + 1.
          ENDIF.

        ENDLOOP.

        IF lt_records_to_create IS NOT INITIAL.
          LOOP AT lt_records_to_create ASSIGNING FIELD-SYMBOL(<ls_records_to_create>).
            APPEND VALUE #(
                             %data-shippingpoint       =  ls_shipping_point-%param-newshippingpoint
                             %data-distributionchannel = <ls_records_to_create>-distributionchannel
                             %data-purchasingdocumenttype = <ls_records_to_create>-purchasingdocumenttype
                             %data-orderreason = <ls_records_to_create>-orderreason
                             %data-cutofftime = <ls_records_to_create>-cutofftime
                             %data-cutofftimezone  = <ls_records_to_create>-cutofftimezone

              ) TO lt_new.
          ENDLOOP.

          MODIFY ENTITY IN LOCAL MODE zsd_i_os_dn
              CREATE FIELDS (
             shippingpoint
             distributionchannel
             purchasingdocumenttype
             orderreason
             cutofftime
             cutofftimezone
                )
                WITH CORRESPONDING #( lt_new )
            MAPPED mapped
            FAILED failed
            REPORTED reported.
        ENDIF.
      ENDIF.

      DATA(lv_created_records) = lines( lt_records_to_create ) - lines( failed-zsd_i_os_dn ).

      IF lv_created_records IS INITIAL.
        DATA(lv_severenity) = if_abap_behv_message=>severity-error.
      ELSE.
        lv_severenity = if_abap_behv_message=>severity-success.
      ENDIF.

      APPEND VALUE #(
         %msg      = NEW zcx_sd_os_dn(
                         iv_duplicate_record = lv_duplicate_counter
                         iv_created_record = lv_created_records
                         iv_textid      = zcx_sd_os_dn=>mc_created_record
                         iv_severity    = lv_severenity )
         %element-shippingpoint = if_abap_behv=>mk-on
      ) TO reported-zsd_i_os_dn.
    ELSE.
      APPEND VALUE #(
         %msg      = NEW zcx_sd_os_dn(
                         iv_shippingpoint = ls_shipping_point-%param-newshippingpoint
                         iv_textid        = zcx_sd_os_lt=>mc_creation_not_allowed
                         iv_severity      = if_abap_behv_message=>severity-error )
         %element-shippingpoint = if_abap_behv=>mk-on
      ) TO reported-zsd_i_os_dn.
    ENDIF.
  ENDMETHOD.

  METHOD validateshippingpoint.
    DATA(ls_key) = keys[ 1 ].

    IF ls_key-shippingpoint IS NOT INITIAL.

      SELECT SINGLE shippingpoint
      FROM i_shippingpointvh
      WHERE shippingpoint = @ls_key-shippingpoint
      INTO @DATA(lv_checked_shipping_point).
      IF sy-subrc <> 0.
        lv_checked_shipping_point = ls_key-shippingpoint.
        APPEND VALUE #(  %tky = ls_key-%tky ) TO failed-zsd_i_os_dn.
        APPEND VALUE #(  %tky = ls_key-%tky
                         %msg      = NEW zcx_sd_os_dn(
                                         iv_shippingpoint = lv_checked_shipping_point
                                         iv_textid      = zcx_sd_os_dn=>mc_shipping_point_unknown
                                         iv_severity    = if_abap_behv_message=>severity-error )
                         %element-shippingpoint = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_os_dn.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD validatedistributionchannel.
    DATA(ls_key) = keys[ 1 ].

    IF ls_key-distributionchannel IS NOT INITIAL.

      SELECT SINGLE distributionchannel  ##WARN_OK
      FROM i_distributionchannelvaluehelp
      WHERE distributionchannel = @ls_key-distributionchannel
      INTO @DATA(lv_checked_distrib_channel).

      IF sy-subrc <> 0.
        lv_checked_distrib_channel = ls_key-distributionchannel.
        APPEND VALUE #(  %tky = ls_key-%tky ) TO failed-zsd_i_os_dn.
        APPEND VALUE #(  %tky = ls_key-%tky
                         %msg      = NEW zcx_sd_os_dn(
                                         iv_distributionchannel = lv_checked_distrib_channel
                                         iv_textid      = zcx_sd_os_dn=>mc_distrib_channel_unknown
                                         iv_severity    = if_abap_behv_message=>severity-error )
                         %element-distributionchannel = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_os_dn.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD validateorderreason.
    DATA(ls_key) = keys[ 1 ].

    IF ls_key-orderreason IS NOT INITIAL.

      SELECT SINGLE orderreason
      FROM zsd_i_order_reason_vh
      WHERE orderreason = @ls_key-orderreason
      INTO @DATA(lv_checked_order_reason).

      IF sy-subrc <> 0.
        lv_checked_order_reason = ls_key-orderreason.
        APPEND VALUE #(  %tky = ls_key-%tky ) TO failed-zsd_i_os_dn.
        APPEND VALUE #(  %tky = ls_key-%tky
                         %msg      = NEW zcx_sd_os_dn(
                                         iv_orderreason = lv_checked_order_reason
                                         iv_textid      = zcx_sd_os_dn=>mc_order_reason_unknown
                                         iv_severity    = if_abap_behv_message=>severity-error )
                         %element-orderreason = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_os_dn.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD validatepurchasingdocumenttype.
    DATA(ls_key) = keys[ 1 ].

    IF ls_key-purchasingdocumenttype IS NOT INITIAL.

      SELECT SINGLE purchasingdocumenttype ##WARN_OK
      FROM i_purchasingdocumenttype
      WHERE purchasingdocumenttype = @ls_key-purchasingdocumenttype
      INTO @DATA(lv_checked_data).

      IF sy-subrc <> 0.
        lv_checked_data = ls_key-purchasingdocumenttype.
        APPEND VALUE #(  %tky = ls_key-%tky ) TO failed-zsd_i_os_dn.
        APPEND VALUE #(  %tky = ls_key-%tky
                         %msg      = NEW zcx_sd_os_dn(
                                         iv_purchasingdocumenttype = lv_checked_data
                                         iv_textid      = zcx_sd_os_dn=>mc_order_type_unknown
                                         iv_severity    = if_abap_behv_message=>severity-error )
                         %element-purchasingdocumenttype = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_os_dn.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD validatecutofftimezone.
    READ ENTITY IN LOCAL MODE zsd_i_os_dn
            FIELDS (
                cutofftimezone )
           WITH CORRESPONDING #( keys )
        RESULT DATA(lt_os_dn).

    IF lt_os_dn IS NOT INITIAL.
      DATA(ls_os_dn) = lt_os_dn[ 1 ].

      SELECT SINGLE timezoneid
      FROM i_timezone
      WHERE timezoneid = @ls_os_dn-cutofftimezone
      INTO @DATA(lv_checked_data).

      IF sy-subrc <> 0.
        lv_checked_data = ls_os_dn-cutofftimezone.
        APPEND VALUE #(  %tky = ls_os_dn-%tky ) TO failed-zsd_i_os_dn.
        APPEND VALUE #(  %tky = ls_os_dn-%tky
                         %msg      = NEW zcx_sd_os_dn(
                                         iv_cutofftimezone = lv_checked_data
                                         iv_textid      = zcx_sd_os_dn=>mc_cut_off_time_zone_unknown
                                         iv_severity    = if_abap_behv_message=>severity-error )
                         %element-cutofftimezone = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_os_dn.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD is_delete_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
    ID 'VSTEL' FIELD iv_shipping_point
    ID 'ACTVT'  FIELD '24'.

    IF sy-subrc = 0.
      rv_delete_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_delete_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.

  METHOD is_update_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
        ID 'VSTEL' FIELD iv_shipping_point
        ID 'ACTVT' FIELD '02'.

    IF sy-subrc = 0.
      rv_update_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_update_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.

  METHOD is_creation_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
    ID 'VSTEL' FIELD iv_shipping_point
    ID 'ACTVT' FIELD '01'.

    IF sy-subrc = 0.
      rv_creation_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_creation_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.

ENDCLASS.