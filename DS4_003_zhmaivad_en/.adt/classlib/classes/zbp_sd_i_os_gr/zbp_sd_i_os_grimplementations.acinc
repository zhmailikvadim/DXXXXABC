************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* HURTSALE     | 05.06.2023 | 21930     : GR leadtime table Fiori app  *
*              |            | DS4K954488                               *
*----------------------------------------------------------------------*
* HURTSALE     | 19.10.2023 | 26109     : GR LT - Remove Val From Date *
*              |            | DS4K967637                               *
*----------------------------------------------------------------------*/
CLASS lhc__os_gr DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.
    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR _os_gr RESULT result ##NEEDED.

    METHODS setcreateadmindata FOR DETERMINE ON MODIFY
      IMPORTING keys FOR _os_gr~setcreateadmindata.

    METHODS add FOR MODIFY
      IMPORTING keys FOR ACTION _os_gr~add RESULT result.
    METHODS copy FOR MODIFY
      IMPORTING keys FOR ACTION _os_gr~copy RESULT result.

    METHODS createwithreference FOR MODIFY
      IMPORTING keys FOR ACTION _os_gr~createwithreference RESULT result.
    METHODS checkgrfields FOR VALIDATE ON SAVE
      IMPORTING keys FOR _os_gr~checkgrfields.
    METHODS setdelindicator FOR MODIFY
      IMPORTING keys FOR ACTION _os_gr~setdelindicator RESULT result.
    METHODS convertleadtime FOR DETERMINE ON SAVE
      IMPORTING keys FOR _os_gr~convertleadtime.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys REQUEST requested_features FOR _os_gr RESULT result ##NEEDED.
    METHODS setchangeadmindata FOR DETERMINE ON SAVE
      IMPORTING keys FOR _os_gr~setchangeadmindata.

ENDCLASS.

CLASS lhc__os_gr IMPLEMENTATION.

  METHOD get_instance_authorizations.
    result = VALUE #( FOR ls_key IN keys ( %tky        = ls_key-%tky
                        %update              = if_abap_behv=>auth-allowed
                        %action-setdelindicator = if_abap_behv=>auth-allowed ) ).
  ENDMETHOD.

  METHOD add.
    LOOP AT keys ASSIGNING FIELD-SYMBOL(<ls_key>).
      READ ENTITY IN LOCAL MODE zsd_i_os_gr
          ALL FIELDS
          WITH VALUE #( ( purchasingorganization = <ls_key>-%param-purchasingorganizationnew
                          saleschannel = <ls_key>-%param-saleschannelnew
                          ordertype = <ls_key>-%param-ordertypenew
                          orderreason = <ls_key>-%param-orderreasonnew
                          plant = <ls_key>-%param-plantnew ) )
          RESULT DATA(lt_gr_result).

      IF lt_gr_result IS NOT INITIAL.
        MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
               ENTITY _os_gr
               UPDATE FIELDS (
                 deletionindicator
                 changedat
                 changedon
                 changedby
                 leadtimeint )
               WITH  VALUE #( FOR <ls_gr_result> IN lt_gr_result
                               ( %tky = <ls_gr_result>-%tky
                                 leadtimeint =  <ls_key>-%param-leadtimenew
                                 deletionindicator = abap_false
                                 changedat = sy-uzeit
                                 changedon = sy-datum
                                 changedby = sy-uname  ) )
              MAPPED mapped
              FAILED failed
              REPORTED reported.
      ELSE.
        MODIFY ENTITY IN LOCAL MODE zsd_i_os_gr
            CREATE FIELDS (
              purchasingorganization
              saleschannel
              ordertype
              orderreason
              plant
              leadtimeint )
            WITH VALUE #( (
                             %cid = <ls_key>-%cid
                             %data-purchasingorganization =  <ls_key>-%param-purchasingorganizationnew
                             %data-saleschannel = <ls_key>-%param-saleschannelnew
                             %data-ordertype = <ls_key>-%param-ordertypenew
                             %data-orderreason = <ls_key>-%param-orderreasonnew
                             %data-plant = <ls_key>-%param-plantnew
                             %data-leadtimeint = <ls_key>-%param-leadtimenew ) )
            MAPPED mapped
            FAILED failed
            REPORTED reported.
      ENDIF.

      CHECK failed-_os_gr IS INITIAL.

      READ ENTITY IN LOCAL MODE zsd_i_os_gr
        ALL FIELDS
        WITH VALUE #( ( purchasingorganization = <ls_key>-%param-purchasingorganizationnew
                        saleschannel = <ls_key>-%param-saleschannelnew
                        ordertype = <ls_key>-%param-ordertypenew
                        orderreason = <ls_key>-%param-orderreasonnew
                        plant = <ls_key>-%param-plantnew ) )
        RESULT lt_gr_result.

      result = VALUE #( FOR ls_gr_result IN lt_gr_result ( %cid = <ls_key>-%cid
                                                             %param = ls_gr_result ) ).
    ENDLOOP.
  ENDMETHOD.

  METHOD copy.
    LOOP AT keys ASSIGNING FIELD-SYMBOL(<ls_key>).
      MODIFY ENTITY IN LOCAL MODE zsd_i_os_gr
        CREATE FIELDS (
          purchasingorganization
          saleschannel
          ordertype
          orderreason
          plant
          leadtimeint )
        WITH VALUE #( (  %cid = <ls_key>-%cid
                         %data-purchasingorganization =  <ls_key>-%param-purchasingorganization
                         %data-saleschannel = <ls_key>-%param-saleschannel
                         %data-ordertype = <ls_key>-%param-ordertype
                         %data-orderreason = <ls_key>-%param-orderreason
                         %data-plant = <ls_key>-%param-plant
                         %data-leadtimeint = <ls_key>-%param-leadtime ) )
        MAPPED mapped
        FAILED failed
        REPORTED reported.

      CHECK failed-_os_gr IS INITIAL.

      READ ENTITY IN LOCAL MODE zsd_i_os_gr
        ALL FIELDS
        WITH VALUE #( ( purchasingorganization = <ls_key>-%param-purchasingorganization
                        saleschannel = <ls_key>-%param-saleschannel
                        ordertype = <ls_key>-%param-ordertype
                        orderreason = <ls_key>-%param-orderreason
                        plant = <ls_key>-%param-plant ) )
        RESULT DATA(lt_gr_result).

      result = VALUE #( FOR ls_gr_result IN lt_gr_result ( %cid = <ls_key>-%cid
                                                             %param = ls_gr_result ) ).
    ENDLOOP.
  ENDMETHOD.

  METHOD createwithreference.
    DATA(ls_data) = VALUE #( keys[ 1 ] OPTIONAL ).

    SELECT
      saleschannel,
      ordertype,
      orderreason,
      leadtimeint
    FROM zsd_i_os_gr INTO TABLE @DATA(lt_referenced_gr_lt)
    WHERE purchasingorganization = @ls_data-%param-purchasingorganization
    AND plant = @ls_data-%param-plant.
    IF sy-subrc = 0.
      MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
        ENTITY _os_gr
        CREATE FIELDS (
         purchasingorganization
         plant
         saleschannel
         ordertype
         orderreason
         leadtimeint )
        AUTO FILL CID WITH VALUE #( FOR <ls_referenced_gr_lt> IN  lt_referenced_gr_lt (
                                                                          purchasingorganization = ls_data-%param-purchasingorganizationnew
                                                                          plant = ls_data-%param-plantnew
                                                                          saleschannel = <ls_referenced_gr_lt>-saleschannel
                                                                          ordertype = <ls_referenced_gr_lt>-ordertype
                                                                          orderreason = <ls_referenced_gr_lt>-orderreason
                                                                          leadtimeint = <ls_referenced_gr_lt>-leadtimeint ) )
        MAPPED mapped
        FAILED failed
        REPORTED reported.

      CHECK failed-_os_gr IS INITIAL.

      result = VALUE #( FOR ls_gr_result IN mapped-_os_gr (
                                              %cid   = ls_data-%cid
                                              %param = CORRESPONDING #( ls_gr_result ) ) ).
    ENDIF.
  ENDMETHOD.

  METHOD checkgrfields.
    CONSTANTS :
      lc_hardcode_id TYPE zpe_hm_id VALUE '212' ##NEEDED,
      lc_separator   TYPE char1 VALUE ',' ##NEEDED.

    DATA: lv_order_reason_text TYPE string,
          lv_subrc             TYPE syst_subrc.

    "To get labels of CDS fields
    DATA(lo_cmm_labels) = cl_cmm_labels=>get_instance( zif_sd_os_gr=>gc_entity_name ).

    TRY.
        DATA(lt_hm_table) = zcl_pe_hm_basic=>get_table( '212' ).
      ##NO_HANDLER CATCH zcx_pe_hm.
    ENDTRY.

    DATA(ls_data) = VALUE #( keys[ 1 ] OPTIONAL ).

    "check Plant
    IF ls_data-plant IS NOT INITIAL.
      SELECT COUNT( * ) FROM i_plant UP TO 1 ROWS
        WHERE plant = @ls_data-plant.
      IF sy-subrc = 0.
        SELECT COUNT( * ) FROM i_plantpurchasingorganization UP TO 1 ROWS
         WHERE purchasingorganization = @ls_data-purchasingorganization
         AND plant = @ls_data-plant.
        IF sy-subrc <> 0.
          MESSAGE e004(me) WITH ls_data-purchasingorganization ls_data-plant INTO sy-msgli.

          APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
          APPEND VALUE #( %tky = ls_data-%tky
                          %msg = new_message( id = sy-msgid
                                              number = sy-msgno
                                              v1 = sy-msgv1
                                              v2 = sy-msgv2
                                              severity = if_abap_behv_message=>severity-error )
                                              %element-plant = if_abap_behv=>mk-on ) TO reported-_os_gr.
        ENDIF.
      ELSE.
        MESSAGE e008(zsd_lead_times) WITH ls_data-plant INTO sy-msgli.

        APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
        APPEND VALUE #( %tky = ls_data-%tky
                        %msg = new_message( id = sy-msgid
                                            number = sy-msgno
                                            v1 = sy-msgv1
                                            severity = if_abap_behv_message=>severity-error )
                                            %element-plant = if_abap_behv=>mk-on ) TO reported-_os_gr.
      ENDIF.
    ENDIF.

    "check Purchasing Organization
    IF ls_data-purchasingorganization IS NOT INITIAL.
      SELECT COUNT( * ) FROM i_purchasingorganization UP TO 1 ROWS
        WHERE purchasingorganization = @ls_data-purchasingorganization.
      IF sy-subrc <> 0.
        MESSAGE e015(me) WITH ls_data-purchasingorganization INTO sy-msgli.

        APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
        APPEND VALUE #( %tky = ls_data-%tky
                        %msg = new_message( id = sy-msgid
                                            number = sy-msgno
                                            v1 = sy-msgv1
                                            severity = if_abap_behv_message=>severity-error )
                                            %element-purchasingorganization = if_abap_behv=>mk-on ) TO reported-_os_gr.
      ENDIF.
    ENDIF.

    "check Sales Channel
    IF ls_data-saleschannel IS NOT INITIAL.
      SELECT COUNT( * ) FROM i_distributionchannel UP TO 1 ROWS
        WHERE distributionchannel = @ls_data-saleschannel.
      IF sy-subrc <> 0.
        "get sales channel label
        DATA(lv_saleschannel_label) = lo_cmm_labels->if_cmm_labels~get_label_value(
          iv_fieldname   = zif_sd_os_gr=>gc_s_cds_fields-saleschannel
          iv_entity_name = zif_sd_os_gr=>gc_entity_name ).

        MESSAGE e002(cfd_sap_gui) WITH lv_saleschannel_label INTO sy-msgli.

        APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
        APPEND VALUE #( %tky = ls_data-%tky
                        %msg = new_message( id = sy-msgid
                                            number = sy-msgno
                                            v1 = sy-msgv1
                                            severity = if_abap_behv_message=>severity-error )
                                            %element-saleschannel = if_abap_behv=>mk-on ) TO reported-_os_gr.
      ENDIF.
    ENDIF.

    "check Purchasing Order Type
    IF ls_data-ordertype IS NOT INITIAL.
      SELECT COUNT( * ) FROM i_purchasingdocumenttype UP TO 1 ROWS
        WHERE purchasingdocumenttype = @ls_data-ordertype
        AND purchasingdocumentcategory = 'F'.
      IF sy-subrc <> 0.
        lv_subrc = sy-subrc.
        "get purchasing order type label
        DATA(lv_pur_order_type_label) = lo_cmm_labels->if_cmm_labels~get_label_value(
          iv_fieldname   = zif_sd_os_gr=>gc_s_cds_fields-ordertype
          iv_entity_name = zif_sd_os_gr=>gc_entity_name ).

        MESSAGE e002(cfd_sap_gui) WITH lv_pur_order_type_label INTO sy-msgli.

        APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
        APPEND VALUE #( %tky = ls_data-%tky
                        %msg = new_message( id = sy-msgid
                                            number = sy-msgno
                                            v1 = sy-msgv1
                                            severity = if_abap_behv_message=>severity-error )
                                            %element-ordertype = if_abap_behv=>mk-on ) TO reported-_os_gr.

      ENDIF.

      "check if Order Reason is linked to Order Type
      IF lv_subrc = 0 AND ls_data-orderreason IS NOT INITIAL AND
         NOT line_exists( lt_hm_table[ field1 = ls_data-ordertype
                                       field2 = ls_data-orderreason ] ).


        LOOP AT lt_hm_table ASSIGNING FIELD-SYMBOL(<ls_hm>) WHERE field1 = ls_data-ordertype.
          IF lv_order_reason_text IS INITIAL.
            lv_order_reason_text = <ls_hm>-field2.
            CONTINUE.
          ENDIF.

          lv_order_reason_text = |{ <ls_hm>-field2 }| && |{ lc_separator }| && |{ lv_order_reason_text }|.
        ENDLOOP.
        MESSAGE  e001(zsd_msg_cls_cst) WITH lv_order_reason_text INTO sy-msgli.

        APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
        APPEND VALUE #( %tky = ls_data-%tky
                        %msg = new_message( id = sy-msgid
                                            number = sy-msgno
                                            v1 = sy-msgv1
                                            severity = if_abap_behv_message=>severity-error )
                                            %element-orderreason = if_abap_behv=>mk-on ) TO reported-_os_gr.
      ENDIF.
    ENDIF.

    "check Order Reason
    IF ls_data-orderreason IS NOT INITIAL AND
       ls_data-ordertype IS INITIAL.

      MESSAGE e009(zsd_lead_times) INTO sy-msgli.

      APPEND VALUE #( %tky = ls_data-%tky ) TO failed-_os_gr.
      APPEND VALUE #( %tky = ls_data-%tky
                      %msg = new_message( id = sy-msgid
                                          number = sy-msgno
                                          v1 = sy-msgv1
                                          severity = if_abap_behv_message=>severity-error )
                                          %element-ordertype = if_abap_behv=>mk-on ) TO reported-_os_gr.
    ENDIF.
  ENDMETHOD.

  METHOD setdelindicator.
    MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
             ENTITY _os_gr
             UPDATE FIELDS (
               deletionindicator
               changedat
               changedon
               changedby )
             WITH  VALUE #( FOR <ls_key> IN keys
                             ( %tky = <ls_key>-%tky
                               deletionindicator = abap_true
                               changedat = sy-uzeit
                               changedon = sy-datum
                               changedby = sy-uname  ) ).
    READ ENTITIES OF zsd_i_os_gr IN LOCAL MODE
       ENTITY _os_gr
      ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_os_gr).
*
    result = VALUE #( FOR ls_os_gr IN lt_os_gr
                        (  %tky = ls_os_gr-%tky
                           %param = CORRESPONDING #( ls_os_gr ) ) ).
  ENDMETHOD.

  METHOD convertleadtime.
    READ ENTITIES OF zsd_i_os_gr IN LOCAL MODE
      ENTITY _os_gr
      FIELDS ( leadtimeint )
      WITH CORRESPONDING #( keys )
      RESULT DATA(lt_os_gr).

    CHECK lt_os_gr IS NOT INITIAL.

    MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
      ENTITY _os_gr
      UPDATE FIELDS ( leadtimeint )
      WITH VALUE #( FOR <ls_os_gr> IN lt_os_gr
                     ( %tky = <ls_os_gr>-%tky
                       leadtimeint  = <ls_os_gr>-leadtime * zif_sd_os_gr=>gc_conversion_size ) ).
  ENDMETHOD.

  METHOD get_instance_features.
    READ ENTITIES OF zsd_i_os_gr IN LOCAL MODE
          ENTITY _os_gr
          FIELDS ( deletionindicator )
          WITH CORRESPONDING #( keys )
          RESULT DATA(lt_os_gr).

    LOOP AT lt_os_gr ASSIGNING FIELD-SYMBOL(<ls_os_gr>).
      APPEND INITIAL LINE TO result ASSIGNING FIELD-SYMBOL(<ls_result>).
      <ls_result>-%tky = <ls_os_gr>-%tky.

      <ls_result>-%action-setdelindicator = COND #( WHEN <ls_os_gr>-deletionindicator <> abap_true
                                                    THEN if_abap_behv=>fc-o-enabled
                                                    ELSE if_abap_behv=>fc-o-disabled ).

    ENDLOOP.
  ENDMETHOD.

  METHOD setchangeadmindata.
    READ ENTITIES OF zsd_i_os_gr IN LOCAL MODE
         ENTITY _os_gr
         FIELDS (
           changedon
           changedat
           changedby
           createdat
           createdon
           createdby )
        WITH CORRESPONDING #( keys )
     RESULT DATA(lt_os_gr).

    CHECK lt_os_gr IS NOT INITIAL.

    MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
        ENTITY _os_gr
        UPDATE FIELDS (
          changedon
          changedat
          changedby )
        WITH VALUE #( FOR <ls_os_gr> IN lt_os_gr
                        ( %key = <ls_os_gr>-%key
                          changedat = COND #( WHEN <ls_os_gr>-createdat IS NOT INITIAL THEN sy-uzeit  )
                          changedon = COND #( WHEN <ls_os_gr>-createdon IS NOT INITIAL THEN sy-datum  )
                          changedby = COND #( WHEN <ls_os_gr>-createdby IS NOT INITIAL THEN sy-uname  ) ) ).
  ENDMETHOD.

  METHOD setcreateadmindata.
    READ ENTITIES OF zsd_i_os_gr IN LOCAL MODE
        ENTITY _os_gr
        FIELDS (
          changedon
          changedat
          changedby
          createdat
          createdon
          createdby )
       WITH CORRESPONDING #( keys )
    RESULT DATA(lt_os_gr).

    CHECK lt_os_gr IS NOT INITIAL.

    MODIFY ENTITIES OF zsd_i_os_gr IN LOCAL MODE
        ENTITY _os_gr
        UPDATE FIELDS (
          changedon
          changedat
          changedby
          createdat
          createdon
          createdby )
        WITH VALUE #( FOR <ls_os_gr> IN lt_os_gr
                        ( %key = <ls_os_gr>-%key
                          createdat = COND #( WHEN <ls_os_gr>-createdat IS INITIAL THEN sy-uzeit
                                                                                    ELSE <ls_os_gr>-createdat )
                          createdon = COND #( WHEN <ls_os_gr>-createdon IS INITIAL THEN sy-datum
                                                                                    ELSE <ls_os_gr>-createdon )
                          createdby = COND #( WHEN <ls_os_gr>-createdby IS INITIAL THEN sy-uname
                                                                                    ELSE <ls_os_gr>-createdby )
                          changedat = sy-uzeit
                          changedon = sy-datum
                          changedby = sy-uname  ) ) .
  ENDMETHOD.

ENDCLASS.