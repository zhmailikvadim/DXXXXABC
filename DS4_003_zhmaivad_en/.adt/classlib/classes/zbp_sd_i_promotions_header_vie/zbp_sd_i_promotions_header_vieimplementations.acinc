************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHADDFAD     | 08.12.2022 | 14094: Markdown Validation app,Behavior  *
*              |            | implementation class                     *
*              |            | DS4K932127                               *
*----------------------------------------------------------------------*
##CLASS_FINAL CLASS lhc_header DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PUBLIC SECTION.

    METHODS rfc_callback
      IMPORTING p_task TYPE clike.

  PRIVATE SECTION.


    DATA: mv_processed TYPE xfeld,
          mt_return    TYPE tt_bapiret2.

    METHODS read FOR READ
      IMPORTING keys FOR READ header RESULT result.

    METHODS rba_item FOR READ
 ##NEEDED IMPORTING keys_rba FOR READ header\_item FULL result_requested
 ##NEEDED RESULT result LINK association_links.

    METHODS activate_promotion FOR MODIFY
      IMPORTING keys FOR ACTION header~activate_promotion.

    METHODS deactivate_promotion FOR MODIFY
      IMPORTING keys FOR ACTION header~deactivate_promotion.

    METHODS delete_promotion FOR MODIFY
      IMPORTING keys FOR ACTION header~delete_promotion.

    METHODS get_instance_features FOR INSTANCE FEATURES
 ##NEEDED IMPORTING keys REQUEST requested_features FOR header
 ##NEEDED RESULT result.

ENDCLASS.

CLASS lhc_header IMPLEMENTATION.
  METHOD rfc_callback.
    DATA:  lv_message_rfc TYPE char100.

    RECEIVE RESULTS FROM FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION'
        CHANGING
          ct_return = mt_return
        EXCEPTIONS
          no_data_found                 = 1
          obligatory_parameter_missing  = 2
          not_all_defaults_maintained   = 3
          system_failure                = 4 MESSAGE lv_message_rfc
          communication_failure         = 5 MESSAGE lv_message_rfc
          resource_failure              = 6
          OTHERS                        = 9.
    IF sy-subrc IS NOT INITIAL.
      APPEND VALUE #( type = 'E'
                  id = 'ZSD_MD_VALIDATION'
                  number = '011'
                  message_v1 = lv_message_rfc ) TO mt_return.
    ENDIF.

    mv_processed = abap_on.
  ENDMETHOD.

  METHOD read.
    SELECT * FROM zsd_i_promotions_header_view
    FOR ALL ENTRIES IN @keys
    WHERE promotion = @keys-promotion
    INTO CORRESPONDING FIELDS OF TABLE @result. "#EC CI_SUBRC "#EC CI_FAE_NO_LINES_OK
  ENDMETHOD.

  ##NEEDED METHOD rba_item.
  ENDMETHOD.

  METHOD activate_promotion.

    DATA:  lv_message_rfc TYPE char100.
    LOOP AT keys ASSIGNING FIELD-SYMBOL(<ls_keys>).

      CLEAR: mv_processed,
             mt_return[].


      CALL FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION' STARTING NEW TASK 'DEACTIVATE'
        CALLING rfc_callback ON END OF TASK
        EXPORTING
          iv_aktnr              = <ls_keys>-promotion
          iv_deactivate         = ''
        EXCEPTIONS
          system_failure        = 1 MESSAGE lv_message_rfc
          communication_failure = 2 MESSAGE lv_message_rfc
          resource_failure      = 3
          OTHERS                = 4.

      IF sy-subrc IS NOT INITIAL.
        ##NEEDED  MESSAGE e011(zsd_md_validation) WITH lv_message_rfc INTO DATA(lv_dummy).
        APPEND VALUE #( type = 'E'
                        id = 'ZSD_MD_VALIDATION'
                        number = '011'
                        message_v1 = lv_message_rfc ) TO mt_return.
      ENDIF.

      WAIT FOR ASYNCHRONOUS TASKS UNTIL mv_processed = abap_on.

      LOOP AT mt_return ASSIGNING FIELD-SYMBOL(<ls_return>). "#EC CI_NESTED
        IF sy-subrc IS INITIAL.
          APPEND VALUE #( %tky         = <ls_keys>-%tky
                          %msg         = new_message( id = <ls_return>-id
                                                      number = <ls_return>-number
                                                      v1 = <ls_return>-message_v1
                                                      severity = COND #( WHEN <ls_return>-type = 'E'
                                                                         THEN if_abap_behv_message=>severity-error
                                                                         ELSE if_abap_behv_message=>severity-success  ) )
                           )      TO reported-header.
        ENDIF.
      ENDLOOP.


    ENDLOOP.
  ENDMETHOD.

  METHOD deactivate_promotion.
    DATA:  lv_message_rfc TYPE char100.
    LOOP AT keys ASSIGNING FIELD-SYMBOL(<ls_keys>).

      CLEAR: mv_processed,
             mt_return[].


      CALL FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION' STARTING NEW TASK 'DEACTIVATE'
        CALLING rfc_callback ON END OF TASK
        EXPORTING
          iv_aktnr              = <ls_keys>-promotion
          iv_deactivate         = 'X'
        EXCEPTIONS
          system_failure        = 1 MESSAGE lv_message_rfc
          communication_failure = 2 MESSAGE lv_message_rfc
          resource_failure      = 3
          OTHERS                = 4.

      IF sy-subrc IS NOT INITIAL.
        APPEND VALUE #( type = 'E'
                        id = 'ZSD_MD_VALIDATION'
                        number = '011'
                        message_v1 = lv_message_rfc ) TO mt_return.
      ENDIF.

      WAIT FOR ASYNCHRONOUS TASKS UNTIL mv_processed = abap_on.

      LOOP AT mt_return ASSIGNING FIELD-SYMBOL(<ls_return>). "#EC CI_NESTED
        IF sy-subrc IS INITIAL.
          APPEND VALUE #( %tky         = <ls_keys>-%tky
                          %msg         = new_message( id = <ls_return>-id
                                                      number = <ls_return>-number
                                                      v1 = <ls_return>-message_v1
                                                      severity = COND #( WHEN <ls_return>-type = 'E'
                                                                         THEN if_abap_behv_message=>severity-error
                                                                         ELSE if_abap_behv_message=>severity-success  ) )
                           )      TO reported-header.
        ENDIF.
      ENDLOOP.

    ENDLOOP.
  ENDMETHOD.

  METHOD delete_promotion.
    DATA      lt_return TYPE bapiret2_tty.
    LOOP AT keys ASSIGNING FIELD-SYMBOL(<ls_keys>).
      CLEAR: lt_return.

      CALL FUNCTION 'WPM_PROMOTION_DELETE'
        EXPORTING
          iv_aktnr              = <ls_keys>-promotion
        IMPORTING
          et_return             = lt_return
        EXCEPTIONS
          promotion_not_found   = 1
          foreign_lock          = 2
          deletion_not_possible = 3
          OTHERS                = 4.

      IF sy-subrc IS INITIAL.
        ##NEEDED  MESSAGE s001(zsd_md_validation) WITH <ls_keys>-promotion INTO DATA(lv_dummy).

        APPEND VALUE #( %tky         = <ls_keys>-%tky
                        %msg         = new_message( severity   = if_abap_behv_message=>severity-success
                                                    id     = 'ZSD_MD_VALIDATION'
                                                    number = '001'
                                                    v1  = <ls_keys>-promotion
                                                    ) )
                              TO reported-header.
      ELSE.
        LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<ls_return>). "#EC CI_NESTED
          APPEND VALUE #( %tky         = <ls_keys>-%tky
                  %msg         = new_message( id = <ls_return>-id
                                              number = <ls_return>-number
                                              v1 = <ls_return>-message_v1
                                              v2 = <ls_return>-message_v2
                                              severity = if_abap_behv_message=>severity-error
                                        ) )
                  TO reported-header.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD get_instance_features.
    DATA: ls_result LIKE LINE OF result.

    READ ENTITIES OF zsd_i_promotions_header_view IN LOCAL MODE
    ENTITY header
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_promotions).

    LOOP AT lt_promotions ASSIGNING FIELD-SYMBOL(<ls_promotions>).
      ls_result-%key = <ls_promotions>-%key.

      IF <ls_promotions>-status = 'Open'.
        ls_result-%action-delete_promotion = if_abap_behv=>fc-o-enabled.
        ls_result-%action-deactivate_promotion = if_abap_behv=>fc-o-disabled.
      ELSE.
        ls_result-%action-delete_promotion = if_abap_behv=>fc-o-disabled.
        ls_result-%action-deactivate_promotion = if_abap_behv=>fc-o-enabled.
      ENDIF.


      APPEND ls_result TO result.
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.

##CLASS_FINAL CLASS lhc_item DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PUBLIC SECTION.

    METHODS rfc_callback
      IMPORTING p_task TYPE clike.

  PRIVATE SECTION.
    DATA: mv_processed TYPE xfeld,
          mt_return    TYPE tt_bapiret2.

    METHODS read FOR READ
      IMPORTING keys FOR READ item RESULT result.

    METHODS rba_header FOR READ
      ##NEEDED IMPORTING keys_rba FOR READ item\_header FULL result_requested
      ##NEEDED RESULT result LINK association_links.

    METHODS activate_article FOR MODIFY
      IMPORTING keys FOR ACTION item~activate_article.

    METHODS deactivate_article FOR MODIFY
      IMPORTING keys FOR ACTION item~deactivate_article.

    METHODS delete_article FOR MODIFY
      IMPORTING keys FOR ACTION item~delete_article. " RESULT ct_result.

    METHODS get_instance_features FOR INSTANCE FEATURES
     ##NEEDED IMPORTING keys REQUEST requested_features FOR item
     ##NEEDED RESULT result.


ENDCLASS.

CLASS lhc_item IMPLEMENTATION.

  METHOD read.
    SELECT * FROM zsd_i_articles_item_view
    FOR ALL ENTRIES IN @keys
    WHERE promotion = @keys-promotion
    INTO CORRESPONDING FIELDS OF TABLE @result. "#EC CI_SUBRC "#EC CI_FAE_NO_LINES_OK
  ENDMETHOD.

  ##NEEDED METHOD rba_header.
  ENDMETHOD.

  METHOD activate_article.

    DATA: lt_articles    TYPE zsd_tt_matnr,
          lv_message_rfc TYPE char100.

    lt_articles = CORRESPONDING #( keys MAPPING matnr = materialnumber ).
    SORT lt_articles BY matnr.
    DELETE ADJACENT DUPLICATES FROM lt_articles COMPARING matnr.

    READ TABLE keys ASSIGNING FIELD-SYMBOL(<ls_keys>) INDEX 1.
    IF sy-subrc IS INITIAL.
      CALL FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION' STARTING NEW TASK 'ACTIVATE'
        DESTINATION 'NONE'
        CALLING rfc_callback ON END OF TASK
        EXPORTING
          iv_aktnr              = <ls_keys>-promotion
          it_artnr              = lt_articles
          iv_deactivate         = ''
        EXCEPTIONS
          system_failure        = 1 MESSAGE lv_message_rfc
          communication_failure = 2 MESSAGE lv_message_rfc
          resource_failure      = 3
          OTHERS                = 4.
      IF sy-subrc IS NOT INITIAL.
        APPEND VALUE #( type = 'E'
                  id = 'ZSD_MD_VALIDATION'
                  number = '011'
                  message_v1 = lv_message_rfc ) TO mt_return.
      ENDIF.

      WAIT FOR ASYNCHRONOUS TASKS UNTIL mv_processed = abap_on.

      IF mt_return[] IS NOT INITIAL.
        LOOP AT mt_return[] ASSIGNING FIELD-SYMBOL(<ls_return>).
          APPEND VALUE #( %tky         = <ls_keys>-%tky
                         %msg         = new_message( id = <ls_return>-id
                                                     number = <ls_return>-number
                                                     v1 = <ls_return>-message_v1
                                                     severity = COND #( WHEN <ls_return>-type = 'E'
                                                                       THEN if_abap_behv_message=>severity-error
                                                                       ELSE if_abap_behv_message=>severity-success  ) )
                          )      TO reported-header.
        ENDLOOP.



      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD deactivate_article.

    DATA: lt_articles    TYPE zsd_tt_matnr,
          lv_message_rfc TYPE char100.

    lt_articles = CORRESPONDING #( keys MAPPING matnr = materialnumber ).
    SORT lt_articles BY matnr.
    DELETE ADJACENT DUPLICATES FROM lt_articles COMPARING matnr.


    READ TABLE keys ASSIGNING FIELD-SYMBOL(<ls_keys>) INDEX 1.
    IF sy-subrc IS INITIAL.
      CALL FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION' STARTING NEW TASK 'DEACTIVATE'
        DESTINATION 'NONE'
        CALLING rfc_callback ON END OF TASK
        EXPORTING
          iv_aktnr              = <ls_keys>-promotion
          it_artnr              = lt_articles
          iv_deactivate         = 'X'
        EXCEPTIONS
          system_failure        = 1 MESSAGE lv_message_rfc
          communication_failure = 2 MESSAGE lv_message_rfc
          resource_failure      = 3
          OTHERS                = 4.
      IF sy-subrc IS NOT INITIAL.
        APPEND VALUE #( type = 'E'
            id = 'ZSD_MD_VALIDATION'
            number = '011'
            message_v1 = lv_message_rfc ) TO mt_return.
      ENDIF.

      WAIT FOR ASYNCHRONOUS TASKS UNTIL mv_processed = abap_on.

      IF mt_return[] IS NOT INITIAL.
        LOOP AT mt_return[] ASSIGNING FIELD-SYMBOL(<ls_return>).
          APPEND VALUE #( %tky         = <ls_keys>-%tky
                         %msg         = new_message( id = <ls_return>-id
                                                     number = <ls_return>-number
                                                     v1 = <ls_return>-message_v1
                                                     severity = COND #( WHEN <ls_return>-type = 'E'
                                                                       THEN if_abap_behv_message=>severity-error
                                                                       ELSE if_abap_behv_message=>severity-success  ) )
                          )      TO reported-header.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD delete_article.

    DATA(lt_articles) = keys.
    SORT lt_articles BY promotion materialnumber.
    DELETE ADJACENT DUPLICATES FROM lt_articles COMPARING promotion materialnumber.

    LOOP AT lt_articles ASSIGNING FIELD-SYMBOL(<ls_articles>).

      CALL FUNCTION 'PROMOTION_POSITION_DELETE'
        EXPORTING
          faktnr                         = <ls_articles>-promotion
          fmatnr                         = <ls_articles>-materialnumber
          flisting_check                 = ' '
        EXCEPTIONS
          wrong_parameters               = 1
          promotion_not_found            = 2
          position_not_found             = 3
          position_in_subsequent_process = 4
          position_in_advert_medium      = 5
          OTHERS                         = 6.
      IF sy-subrc IS INITIAL.
        ##NEEDED  MESSAGE s006(zsd_md_validation) WITH <ls_articles>-materialnumber INTO DATA(lv_dummy).
        APPEND VALUE #( %tky         = <ls_articles>-%tky
                        %msg         = new_message( severity   = if_abap_behv_message=>severity-success
                                                    id     = 'ZSD_MD_VALIDATION'
                                                    number = '006'
                                                    v1  = <ls_articles>-materialnumber
                                                    ) )
                              TO reported-header.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD rfc_callback.
    DATA:  lv_message_rfc TYPE char100.

    RECEIVE RESULTS FROM FUNCTION 'ZSD_FM_MARKDOWN_VALIDATION'
        CHANGING
          ct_return = mt_return
        EXCEPTIONS
          no_data_found                 = 1
          obligatory_parameter_missing  = 2
          not_all_defaults_maintained   = 3
          system_failure                = 4 MESSAGE lv_message_rfc
          communication_failure         = 5 MESSAGE lv_message_rfc
          resource_failure              = 6
          OTHERS                        = 9.
    IF sy-subrc IS NOT INITIAL.
      APPEND VALUE #( type = 'E'
                  id = 'ZSD_MD_VALIDATION'
                  number = '011'
                  message_v1 = lv_message_rfc ) TO mt_return.
    ENDIF.

    mv_processed = abap_on.
  ENDMETHOD.

  METHOD get_instance_features.

    READ ENTITIES OF zsd_i_promotions_header_view IN LOCAL MODE
    ENTITY item
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_articles).

    result = VALUE #( FOR ls_articles IN lt_articles
                              ( %tky                   = ls_articles-%tky

                 ##NO_TEXT      %features-%action-delete_article = COND #( WHEN ls_articles-status = 'Open'
                                                                            THEN if_abap_behv=>fc-o-enabled
                                                                            ELSE if_abap_behv=>fc-o-disabled )

                 ##NO_TEXT      %features-%action-deactivate_article = COND #( WHEN ls_articles-status = 'Open'
                                                                                THEN if_abap_behv=>fc-o-disabled
                                                                                ELSE if_abap_behv=>fc-o-enabled )

                            ) ).


  ENDMETHOD.

ENDCLASS.

##CLASS_FINAL CLASS lsc_zsd_i_promotions_header_vi DEFINITION INHERITING FROM cl_abap_behavior_saver.
  PROTECTED SECTION.

    METHODS finalize REDEFINITION.

    METHODS check_before_save REDEFINITION.

    METHODS save REDEFINITION.

    METHODS cleanup REDEFINITION.

    METHODS cleanup_finalize REDEFINITION.


ENDCLASS.

CLASS lsc_zsd_i_promotions_header_vi IMPLEMENTATION.

  ##NEEDED METHOD finalize.
  ENDMETHOD.

  ##NEEDED METHOD check_before_save.
  ENDMETHOD.

  ##NEEDED METHOD save.
  ENDMETHOD.

  ##NEEDED METHOD cleanup.
  ENDMETHOD.

  ##NEEDED METHOD cleanup_finalize.
  ENDMETHOD.

ENDCLASS.