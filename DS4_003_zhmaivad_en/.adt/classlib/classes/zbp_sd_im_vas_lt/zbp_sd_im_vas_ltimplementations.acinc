************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KARPOSER     | 03.02.2023 | 16881     : [Feature] 2/3 [Development]  *
*              |            | DS4K940341                               *
*----------------------------------------------------------------------*
* KARPOSER     | 23.06.2023 | 22428     : [Defect]-Outbound scheduling *
*              |            | DS4K955792                               *
*----------------------------------------------------------------------*
* BALUNYAN     | 17.08.2023 | 24391     : [Defect]-Outbound scheduling *
*              |            | DS4K961110                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 12.10.2023 | 24047     : [Feature] Activate delta OS  *
*              |            | DS4K960050                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 11.12.2023 | 27429     : Development - Outbound schedu*
*              |            | DS4K972979                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 29.02.2024 | 29527     : [Defect]- Issues in OS  Lead Times*
*              |            | DS4K981479                               *
*----------------------------------------------------------------------*

CLASS lhc_zsd_i_vas_lt DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR zsd_i_vas_lt RESULT result ##NEEDED.

    METHODS add FOR MODIFY
      IMPORTING keys FOR ACTION zsd_i_vas_lt~create RESULT result.

    METHODS copy FOR MODIFY
      IMPORTING keys FOR ACTION zsd_i_vas_lt~copy RESULT result.

    METHODS deleterecord FOR MODIFY
      IMPORTING keys FOR ACTION zsd_i_vas_lt~deleterecord RESULT result.

    METHODS createwithreference FOR MODIFY
      IMPORTING keys FOR ACTION zsd_i_vas_lt~createwithreference RESULT result.

    METHODS validateshippingpoint FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_vas_lt~validateshippingpoint.
    METHODS validatevascode FOR VALIDATE ON SAVE
      IMPORTING keys FOR zsd_i_vas_lt~validatevascode.
    METHODS convertleadtime FOR DETERMINE ON SAVE
      IMPORTING keys FOR zsd_i_vas_lt~convertleadtime.
    METHODS setcreateadmindata FOR DETERMINE ON MODIFY
      IMPORTING keys FOR zsd_i_vas_lt~setcreateadmindata.

    METHODS setchangeadmindata FOR DETERMINE ON SAVE
      IMPORTING keys FOR zsd_i_vas_lt~setchangeadmindata.

    METHODS is_update_granted
      IMPORTING iv_shipping_point        TYPE vstel
      RETURNING VALUE(rv_update_granted) TYPE char2.
    METHODS is_delete_granted
      IMPORTING iv_shipping_point        TYPE vstel
      RETURNING VALUE(rv_delete_granted) TYPE char2.
    METHODS is_creation_granted
      IMPORTING iv_shipping_point          TYPE vstel
      RETURNING VALUE(rv_creation_granted) TYPE char2.

ENDCLASS.

CLASS lhc_zsd_i_vas_lt IMPLEMENTATION.

  METHOD get_instance_authorizations.
    DATA ls_result LIKE LINE OF result.

    LOOP AT keys INTO DATA(ls_key).
      ls_result = VALUE #( shippingpoint       = ls_key-shippingpoint
                           vascode             = ls_key-vascode
                           %update             = is_update_granted( iv_shipping_point = ls_key-shippingpoint )
                         ).
      APPEND ls_result TO result.
    ENDLOOP.
  ENDMETHOD.

  METHOD add.
    CHECK keys IS NOT INITIAL.

    DATA(ls_data) = keys[ 1 ].

    IF is_creation_granted( ls_data-%param-shippingpoint ) = if_abap_behv=>auth-allowed.

      MODIFY ENTITY IN LOCAL MODE zsd_i_vas_lt
          CREATE FIELDS (
           shippingpoint
           vascode
           leadtimeraw )
          WITH VALUE #( (  %data-shippingpoint =  ls_data-%param-shippingpoint
                           %data-vascode = ls_data-%param-vascode
                           %data-leadtimeraw = ls_data-%param-leadtime ) )
          MAPPED mapped
          FAILED failed
          REPORTED reported.

      CHECK failed-zsd_i_vas_lt IS INITIAL.

      READ ENTITY IN LOCAL MODE zsd_i_vas_lt
       ALL FIELDS
       WITH VALUE #( ( shippingpoint       = ls_data-%param-shippingpoint
                       vascode             = ls_data-%param-vascode
                   ) )
      RESULT DATA(lt_vas_result).

      result = VALUE #( FOR <ls_vas_result> IN lt_vas_result ( %cid = ls_data-%cid
                                                               %param = <ls_vas_result> ) ).

    ELSE.

      MESSAGE e020(zsd_lead_times) WITH ls_data-%param-shippingpoint INTO sy-msgli.
      APPEND VALUE #(  %msg      = new_message( id = sy-msgid
                                                number = sy-msgno
                                                v1 = sy-msgv1
                                                severity = if_abap_behv_message=>severity-error )
                       %element-shippingpoint = if_abap_behv=>mk-on
                    ) TO reported-zsd_i_vas_lt.

    ENDIF.
  ENDMETHOD.

  METHOD copy.
    CHECK keys IS NOT INITIAL.

    DATA(ls_data) = keys[ 1 ].

    IF is_creation_granted( ls_data-%param-shippingpoint ) = if_abap_behv=>auth-allowed.

      MODIFY ENTITY IN LOCAL MODE zsd_i_vas_lt
          CREATE FIELDS (
           shippingpoint
           vascode
           leadtimeraw )
          WITH VALUE #( (  %data-shippingpoint =  ls_data-%param-shippingpoint
                           %data-vascode = ls_data-%param-vascode
                           %data-leadtimeraw = ls_data-%param-leadtime ) )
       MAPPED mapped
       FAILED failed
       REPORTED reported.

      READ ENTITY IN LOCAL MODE zsd_i_vas_lt
       ALL FIELDS
       WITH VALUE #( ( shippingpoint       = ls_data-%param-shippingpoint
                       vascode             = ls_data-%param-vascode
                        ) )
      RESULT DATA(lt_vas_result).

      CHECK failed-zsd_i_vas_lt IS INITIAL.

      result = VALUE #( FOR <ls_vas_result> IN lt_vas_result ( %cid = ls_data-%cid
                                                               %param = <ls_vas_result> ) ).


    ELSE.

      MESSAGE e020(zsd_lead_times) WITH ls_data-%param-shippingpoint INTO sy-msgli.
      APPEND VALUE #(  %msg      = new_message( id = sy-msgid
                                                number = sy-msgno
                                                v1 = sy-msgv1
                                                severity = if_abap_behv_message=>severity-error )
                       %element-shippingpoint = if_abap_behv=>mk-on
                    ) TO reported-zsd_i_vas_lt.

    ENDIF.
  ENDMETHOD.

  METHOD deleterecord.
    DATA ls_vas_lt TYPE zsd_t_vas_lt.
    DATA(ls_data) = keys[ 1 ].

    IF is_delete_granted( ls_data-shippingpoint ) = if_abap_behv=>auth-allowed.

      READ ENTITY IN LOCAL MODE
          zsd_i_vas_lt
          ALL FIELDS
          WITH CORRESPONDING #( keys )
          RESULT DATA(lt_vas_result).
      CHECK lt_vas_result IS NOT INITIAL.
      ASSIGN lt_vas_result[ 1 ] TO FIELD-SYMBOL(<ls_result>).

      ls_vas_lt = CORRESPONDING #( <ls_result> MAPPING zvstel         = shippingpoint
                                                       zvas_code      = vascode
                                                       zdeletion_indi = deletionind
                                                       zlead_time     = leadtimeraw
                                                       created_on     = createdon
                                                       created_at     = createdat
                                                       created_by     = createdby
                                                       changed_on     = changedon
                                                       changed_at     = changedat
                                                       changed_by     = changedby ).
      DELETE zsd_t_vas_lt FROM ls_vas_lt.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      LOOP AT lt_vas_result ASSIGNING <ls_result>.
        <ls_result>-deletionind   = abap_true.
        <ls_result>-changedon     = sy-datum.
        <ls_result>-changedat     = sy-uzeit.
        <ls_result>-changedby     = sy-uname.
        <ls_result>-changedonlong = sy-datum && sy-uzeit.
      ENDLOOP.

      SELECT zvstel, zvas_code, zdeletion_indi
          FROM zsd_t_vas_lt
          WHERE zvstel         = @<ls_result>-shippingpoint
            AND zvas_code      = @<ls_result>-vascode
            AND zdeletion_indi = @<ls_result>-deletionind
            INTO TABLE @DATA(lt_vas_lt).
      IF sy-subrc <> 0.
        CLEAR lt_vas_lt.
      ENDIF.

      IF lt_vas_lt IS INITIAL.

        MODIFY ENTITY IN LOCAL MODE zsd_i_vas_lt
          CREATE FIELDS ( shippingpoint
                          vascode
                          deletionind
                          leadtime
                          changedon
                          changedat
                          changedby
                          changedonlong
                          createdon
                          createdat
                          createdby )
          WITH VALUE #( FOR <ls_vas_result> IN lt_vas_result
               ( %key = <ls_vas_result>-%key
                 shippingpoint       = <ls_result>-shippingpoint
                 vascode             = <ls_result>-vascode
                 deletionind         = <ls_result>-deletionind
                 leadtime            = <ls_result>-leadtime
                 changedon           = <ls_result>-changedon
                 changedat           = <ls_result>-changedat
                 changedby           = <ls_result>-changedby
                 changedonlong       = <ls_result>-changedonlong
                 createdon           = <ls_result>-createdon
                 createdat           = <ls_result>-createdat
                 createdby           = <ls_result>-createdby ) ).
      ELSE.
        ls_vas_lt = CORRESPONDING #( <ls_result> MAPPING zvstel         = shippingpoint
                                                         zvas_code      = vascode
                                                         zdeletion_indi = deletionind
                                                         zlead_time     = leadtimeraw
                                                         created_on     = createdon
                                                         created_at     = createdat
                                                         created_by     = createdby
                                                         changed_on     = changedon
                                                         changed_at     = changedat
                                                         changed_by     = changedby ).

        MODIFY zsd_t_vas_lt FROM ls_vas_lt.
        IF sy-subrc <> 0.
          RETURN.
        ENDIF.
      ENDIF.

      result = VALUE #( FOR <ls_vas_lt_result> IN lt_vas_result ( %tky   = ls_data-%tky
                                                                  %param = <ls_vas_lt_result> ) ).

      APPEND VALUE #(
               %msg      = NEW zcx_sd_os_lt(
                               iv_textid      = zcx_sd_os_lt=>mc_delete_record_res
                               iv_severity    = if_abap_behv_message=>severity-success )
            ) TO reported-zsd_i_vas_lt.
    ENDIF.
  ENDMETHOD.

  METHOD createwithreference.
    CHECK keys IS NOT INITIAL.

    DATA(ls_shipping_point) = keys[ 1 ].

    IF is_creation_granted( ls_shipping_point-%param-new_shipping_point ) = if_abap_behv=>auth-allowed.

      SELECT
        shippingpoint,
        vascode,
        leadtimeraw AS leadtime
      FROM zsd_i_vas_lt INTO TABLE @DATA(lt_vas)
      WHERE shippingpoint = @ls_shipping_point-%param-shipping_point
       OR shippingpoint = @ls_shipping_point-%param-new_shipping_point .

      IF sy-subrc = 0.
        DATA(lt_records_to_create) = lt_vas.
        DELETE lt_records_to_create WHERE shippingpoint = ls_shipping_point-%param-new_shipping_point.

        DATA(lt_existing_records) = lt_vas.
        DELETE lt_existing_records WHERE shippingpoint = ls_shipping_point-%param-shipping_point.

        DATA(lv_duplicate_counter) = 0.
        LOOP AT lt_existing_records ASSIGNING FIELD-SYMBOL(<ls_existing_records>).

          DELETE lt_records_to_create
          WHERE vascode = <ls_existing_records>-vascode.

          IF sy-subrc = 0.
            lv_duplicate_counter = lv_duplicate_counter + 1.
          ENDIF.

        ENDLOOP.
        IF lt_records_to_create IS NOT INITIAL .
          MODIFY ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
              ENTITY zsd_i_vas_lt
              CREATE FIELDS (
                  shippingpoint
                  vascode
                  leadtimeraw )
                WITH VALUE #( FOR <ls_records_to_create> IN  lt_records_to_create (   %data-shippingpoint       = ls_shipping_point-%param-new_shipping_point
                                                          %data-vascode             = <ls_records_to_create>-vascode
                                                          %data-leadtimeraw            = <ls_records_to_create>-leadtime ) )
          MAPPED mapped
          FAILED failed
          REPORTED reported.


          CHECK failed-zsd_i_vas_lt IS INITIAL.

          READ ENTITY IN LOCAL MODE zsd_i_vas_lt
           ALL FIELDS
           WITH VALUE #( FOR <ls_vas> IN lt_vas ( shippingpoint       = ls_shipping_point-%param-new_shipping_point
                                                  vascode             = <ls_vas>-vascode
                                                  ) )
          RESULT DATA(lt_vas_result).

          result = VALUE #( FOR <ls_vas_result> IN lt_vas_result ( %cid = ls_shipping_point-%cid
                                                                   %param = <ls_vas_result> ) ).
        ENDIF.
      ENDIF.

      DATA(lv_created_records) = lines( lt_records_to_create ) - lines( failed-zsd_i_vas_lt ).

      IF lv_created_records IS INITIAL.
        DATA(lv_severenity) = if_abap_behv_message=>severity-error.
      ELSE.
        lv_severenity = if_abap_behv_message=>severity-success.
      ENDIF.

      MESSAGE e017(zsd_lead_times) WITH lv_created_records lv_duplicate_counter INTO sy-msgli.
      APPEND VALUE #(  %msg      = new_message( id = sy-msgid
                                                number = sy-msgno
                                                v1 = sy-msgv1
                                                v2 = sy-msgv2
                                                severity = lv_severenity )
                       %element-shippingpoint = if_abap_behv=>mk-on ) TO reported-zsd_i_vas_lt.


    ELSE.
      MESSAGE e020(zsd_lead_times) WITH ls_shipping_point-%param-new_shipping_point INTO sy-msgli.
      APPEND VALUE #(  %msg      = new_message( id = sy-msgid
                                                number = sy-msgno
                                                v1 = sy-msgv1
                                                severity = if_abap_behv_message=>severity-error )
                       %element-shippingpoint = if_abap_behv=>mk-on
                    ) TO reported-zsd_i_vas_lt.

    ENDIF.
  ENDMETHOD.

  METHOD validateshippingpoint.
    TYPES: BEGIN OF ltyp_shiping_point,
             shippingpoint TYPE i_shippingpointvh-shippingpoint,
           END OF ltyp_shiping_point.
    DATA: lts_shiping_points TYPE SORTED TABLE OF ltyp_shiping_point WITH UNIQUE KEY shippingpoint.

    READ ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
      ENTITY zsd_i_vas_lt
          FIELDS ( shippingpoint )
         WITH CORRESPONDING #( keys )
      RESULT DATA(lt_vas_lt).
    CHECK lt_vas_lt IS NOT INITIAL.

    lts_shiping_points = CORRESPONDING #( lt_vas_lt DISCARDING DUPLICATES ).
    DELETE lts_shiping_points WHERE shippingpoint IS INITIAL.

    SELECT
       tab~shippingpoint
    FROM i_shippingpointvh AS tab
    JOIN @lts_shiping_points AS restr
    ON  tab~shippingpoint = restr~shippingpoint
    INTO CORRESPONDING FIELDS OF TABLE @lts_shiping_points.

    LOOP AT lt_vas_lt ASSIGNING FIELD-SYMBOL(<ls_vas_lt>).
      IF <ls_vas_lt>-shippingpoint IS INITIAL OR NOT line_exists( lts_shiping_points[ shippingpoint = <ls_vas_lt>-shippingpoint ] ).

        APPEND VALUE #(  %tky = <ls_vas_lt>-%tky ) TO failed-zsd_i_vas_lt.

        MESSAGE e010(zsd_lead_times) WITH <ls_vas_lt>-shippingpoint INTO sy-msgli.
        APPEND VALUE #(  %tky = <ls_vas_lt>-%tky
                         %msg      = new_message( id = sy-msgid
                                                  number = sy-msgno
                                                  v1 = sy-msgv1
                                                  severity = if_abap_behv_message=>severity-error )
                         %element-shippingpoint = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_vas_lt.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD validatevascode.
    TYPES: BEGIN OF ltyp_vas_code,
             vascode TYPE zsd_i_vas_code_vh-vascode,
           END OF ltyp_vas_code.
    DATA: lts_vas_codes TYPE SORTED TABLE OF ltyp_vas_code WITH UNIQUE KEY vascode.

    READ ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
      ENTITY zsd_i_vas_lt
          FIELDS ( shippingpoint )
         WITH CORRESPONDING #( keys )
      RESULT DATA(lt_vas_lt).
    CHECK lt_vas_lt IS NOT INITIAL.

    lts_vas_codes = CORRESPONDING #( lt_vas_lt DISCARDING DUPLICATES ).
    DELETE lts_vas_codes WHERE vascode IS INITIAL.

    SELECT
       tab~vascode
    FROM zsd_i_vas_code_vh AS tab
    JOIN @lts_vas_codes AS restr
    ON  tab~vascode = restr~vascode
    INTO CORRESPONDING FIELDS OF TABLE @lts_vas_codes.

    LOOP AT lt_vas_lt ASSIGNING FIELD-SYMBOL(<ls_vas_lt>)
      WHERE vascode IS NOT INITIAL.
      IF NOT line_exists( lts_vas_codes[ vascode = <ls_vas_lt>-vascode ] ).

        APPEND VALUE #(  %tky = <ls_vas_lt>-%tky ) TO failed-zsd_i_vas_lt.

        MESSAGE e015(zsd_lead_times) WITH <ls_vas_lt>-vascode INTO sy-msgli.
        APPEND VALUE #(  %tky = <ls_vas_lt>-%tky
                         %msg      = new_message( id = sy-msgid
                                                  number = sy-msgno
                                                  v1 = sy-msgv1
                                                  severity = if_abap_behv_message=>severity-error )
                         %element-vascode = if_abap_behv=>mk-on
                      ) TO reported-zsd_i_vas_lt.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD convertleadtime.
    TRY.
        DATA(lv_conversion_size) = zcl_pe_hm_basic=>get_value( iv_id = '0000002218' iv_sequence = '001' ).

        READ ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
              ENTITY zsd_i_vas_lt
              FIELDS (
                  leadtimeraw )
             WITH CORRESPONDING #( keys )
          RESULT DATA(lt_vas_lt).

        CHECK lt_vas_lt IS NOT INITIAL.

        MODIFY ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
               ENTITY zsd_i_vas_lt
               UPDATE FIELDS ( leadtimeraw )
               WITH VALUE #( FOR <ls_vas_lt> IN lt_vas_lt
                    ( %tky = <ls_vas_lt>-%tky
                      leadtimeraw  = <ls_vas_lt>-leadtime * lv_conversion_size ) ).

      CATCH zcx_pe_hm.
        CLEAR: lv_conversion_size.
    ENDTRY.
  ENDMETHOD.

  METHOD setcreateadmindata.
    READ ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
           ENTITY zsd_i_vas_lt
           FIELDS (
             changedon
             changedat
             changedby
             createdat
             createdon
             createdby )
          WITH CORRESPONDING #( keys )
       RESULT DATA(lt_vas_lt).

    CHECK lt_vas_lt IS NOT INITIAL.

    MODIFY ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
        ENTITY zsd_i_vas_lt
        UPDATE FIELDS (
          changedon
          changedat
          changedby
          createdat
          createdon
          createdby )
        WITH VALUE #( FOR <ls_vas_lt> IN lt_vas_lt
                        ( %key = <ls_vas_lt>-%key
                          createdat = sy-uzeit
                          createdon = sy-datum
                          createdby = sy-uname
                          changedat = sy-uzeit
                          changedon = sy-datum
                          changedby = sy-uname  ) ).
  ENDMETHOD.

  METHOD setchangeadmindata.
    READ ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
           ENTITY zsd_i_vas_lt
           FIELDS (
             changedon
             changedat
             changedby
             createdat
             createdon
             createdby )
          WITH CORRESPONDING #( keys )
       RESULT DATA(lt_vas_lt).

    CHECK lt_vas_lt IS NOT INITIAL.

    MODIFY ENTITIES OF zsd_i_vas_lt IN LOCAL MODE
        ENTITY zsd_i_vas_lt
        UPDATE FIELDS (
          changedon
          changedat
          changedby )
        WITH VALUE #( FOR <ls_vas_lt> IN lt_vas_lt
                        ( %key = <ls_vas_lt>-%key
                          changedat = sy-uzeit
                          changedon = sy-datum
                          changedby = sy-uname ) ).
  ENDMETHOD.
  METHOD is_delete_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
    ID 'VSTEL' FIELD iv_shipping_point
    ID 'ACTVT'  FIELD '24'.

    IF sy-subrc = 0.
      rv_delete_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_delete_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.

  METHOD is_update_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
    ID 'VSTEL' FIELD iv_shipping_point
    ID 'ACTVT' FIELD '02'.

    IF sy-subrc = 0.
      rv_update_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_update_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.
  METHOD is_creation_granted.
    AUTHORITY-CHECK OBJECT 'V_LIKP_VST'
    ID 'VSTEL' FIELD iv_shipping_point
    ID 'ACTVT' FIELD '01'.

    IF sy-subrc = 0.
      rv_creation_granted = if_abap_behv=>auth-allowed.
    ELSE.
      rv_creation_granted = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.
ENDCLASS.