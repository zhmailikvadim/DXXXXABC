CLASS zcl_ada_sc_vas_upload_factory DEFINITION
  PUBLIC
*  GLOBAL FRIENDS ZCL_ADA_SC_VAS_UPLOAD_FACTORY_INJ
  CREATE PUBLIC.

  PUBLIC SECTION.
    TYPES: BEGIN OF mty_s_vas_code,
             vas_code TYPE /sapcnd/cond_type,
           END OF mty_s_vas_code.

    TYPES: mty_t_vas_code TYPE TABLE OF mty_s_vas_code.

    CLASS-METHODS get_vas_upload_excel_template
      IMPORTING iv_vas_code                     TYPE /sapcnd/cond_type
      RETURNING VALUE(ro_excel_upload_template) TYPE REF TO zif_ada_sc_vas_upload_template.

    CLASS-METHODS get_vas_cond_rec_simulation
      IMPORTING it_vas_codes                    TYPE mty_t_vas_code
                iv_condition_id                 TYPE fsh_var_condrec_id OPTIONAL
      RETURNING VALUE(ro_excel_upload_template) TYPE REF TO zif_ada_sc_vas_upload_template
      RAISING   cx_static_check.

    CLASS-METHODS get_vas_cond_rec_upload
      IMPORTING it_vas_codes                    TYPE mty_t_vas_code
      RETURNING VALUE(ro_excel_upload_template) TYPE REF TO zif_ada_sc_vas_upload_template
      RAISING   cx_static_check.

  PROTECTED SECTION.

  PRIVATE SECTION.
    CLASS-DATA so_vas_upload_template TYPE REF TO zif_ada_sc_vas_upload_template.
ENDCLASS.



CLASS ZCL_ADA_SC_VAS_UPLOAD_FACTORY IMPLEMENTATION.


  METHOD get_vas_cond_rec_simulation.

  ENDMETHOD.


  METHOD get_vas_cond_rec_upload.

  ENDMETHOD.


  METHOD get_vas_upload_excel_template.
    CASE iv_vas_code.
      WHEN 'ZSHA'.
        IF so_vas_upload_template IS NOT BOUND.
*          so_vas_upload_template = NEW zcl_ada_sc_vas_zsha_template(  ).
          ro_excel_upload_template = so_vas_upload_template.
        ENDIF.

      WHEN 'ZVAS'.
        IF so_vas_upload_template IS NOT BOUND.
*          so_vas_upload_template = NEW zcl_ada_sc_vas_zvas_template(  ).
          ro_excel_upload_template = so_vas_upload_template.
        ENDIF.

      WHEN 'ZVAE'.
        IF so_vas_upload_template IS NOT BOUND.
*          so_vas_upload_template = NEW zcl_ada_sc_vas_zvae_template(  ).
          ro_excel_upload_template = so_vas_upload_template.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

*    DATA:
*      lo_ref             TYPE REF TO object,
*      lt_template_source TYPE STANDARD TABLE OF ltyp_s_template_source.
*
*    TRY.
*        zcl_pe_hm_complex=>get_table(
*          EXPORTING
*            iv_id           = '024F85009E261EED928F055A4B10A0D2'
*            is_filter       = iv_application_ID
*            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
*          IMPORTING
*            et_table        = lt_template_source ).
*
*      CATCH  zcx_pe_hm.
*        RETURN.
*    ENDTRY.
*
*    DATA(ls_template_source) = VALUE ltyp_s_template_source( lt_template_source[ 1 ] OPTIONAL ).
*
*    CASE ls_template_source-source_type.
*
*      WHEN 'CLASS'.
*
*        TRY.
*            ls_template_source-source = to_upper( val = ls_template_source-source ).
*            CREATE OBJECT lo_ref TYPE (ls_template_source-source).
*
*            IF lo_ref IS INSTANCE OF zif_pe_excel_template.
*              DATA(lif_excel_template) = CAST zif_pe_excel_template( lo_ref ).
*              ev_content = lif_excel_template->get_excel( ).
*            ENDIF.
*
*          CATCH cx_root.
*            RETURN.
*        ENDTRY.
*
*    ENDCASE.
*
*    ev_file_name = ls_template_source-file_name.
*    endmethod.


  ENDMETHOD.
ENDCLASS.