class ZCL_ADA_STO_UD_HANDLER definition
  public
  final
  create public .

public section.

  interfaces ZIF_ADA_STO_UD_HANDLER .

  aliases MT_BSART
    for ZIF_ADA_STO_UD_HANDLER~MT_BSART .
  aliases MT_BSGRU
    for ZIF_ADA_STO_UD_HANDLER~MT_BSGRU .
  aliases MT_EBELN
    for ZIF_ADA_STO_UD_HANDLER~MT_EBELN .
  aliases MT_EKGRP
    for ZIF_ADA_STO_UD_HANDLER~MT_EKGRP .
  aliases MT_EKORG
    for ZIF_ADA_STO_UD_HANDLER~MT_EKORG .
  aliases MT_ERDAT
    for ZIF_ADA_STO_UD_HANDLER~MT_ERDAT .
  aliases MT_ERNAM
    for ZIF_ADA_STO_UD_HANDLER~MT_ERNAM .
  aliases MT_LGORT
    for ZIF_ADA_STO_UD_HANDLER~MT_LGORT .
  aliases MT_STO_UD
    for ZIF_ADA_STO_UD_HANDLER~MT_STO_UD .
  aliases MT_WERKS_R
    for ZIF_ADA_STO_UD_HANDLER~MT_WERKS_R .
  aliases MT_WERKS_S
    for ZIF_ADA_STO_UD_HANDLER~MT_WERKS_S .
  aliases MV_DAYS_FROM_GI
    for ZIF_ADA_STO_UD_HANDLER~MV_DAYS_FROM_GI .
  aliases MV_DAYS_FROM_GR
    for ZIF_ADA_STO_UD_HANDLER~MV_DAYS_FROM_GR .
  aliases MV_IS_SEARCH_BY_UD_STO
    for ZIF_ADA_STO_UD_HANDLER~MV_IS_SEARCH_BY_UD_STO .
  aliases CREATE_IBD_FOR_UD_PART
    for ZIF_ADA_STO_UD_HANDLER~CREATE_IBD_FOR_UD_PART .
  aliases FIND_UD_STO
    for ZIF_ADA_STO_UD_HANDLER~FIND_UD_STO .

  methods CONSTRUCTOR
    importing
      !IT_BSART like MT_BSART optional                      "
      !IT_EKORG like MT_EKORG optional                      "
      !IT_EKGRP like MT_EKGRP optional
      !IT_STO_UD like MT_STO_UD optional
      !IT_EBELN like MT_EBELN optional
      !IT_WERKS_R like MT_WERKS_R optional                  "
      !IT_LGORT like MT_LGORT optional
      !IT_WERKS_S like MT_WERKS_S optional
      !IT_BSGRU like MT_BSGRU optional
      !IT_ERDAT like MT_ERDAT optional                      "
      !IT_ERNAM like MT_ERNAM optional
      !IV_DAYS_FROM_GR type NUMC3 optional                  "
      !IV_DAYS_FROM_GI type NUMC3 optional                  "
      !IV_IS_SEARCH_BY_UD_STO type ABAP_BOOL optional .
  PROTECTED SECTION.
  PRIVATE SECTION.
    TYPES:
      mtyp_t_sto_ud_log TYPE SORTED TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE KEY under_delivered_sto under_delivered_sto_item .
    TYPES:
      BEGIN OF mtyp_s_pur_order_key,
        ebeln TYPE ekko-ebeln,
        ebelp TYPE ekpo-ebelp,
      END OF mtyp_s_pur_order_key .
    TYPES:
      mtyp_t_pur_order_key TYPE STANDARD TABLE OF mtyp_s_pur_order_key WITH KEY ebeln ebelp .
    TYPES:
      BEGIN OF mtyp_s_pur_order_data,
        ebeln                  TYPE ebeln,
        ebelp                  TYPE ebelp,
        bukrs                  TYPE bukrs,
        ihrez                  TYPE ihrez,
        bsart                  TYPE esart,
        lifnr                  TYPE elifn,
        ekorg                  TYPE ekorg,
        ekgrp                  TYPE bkgrp,
        reswk                  TYPE reswk,
        adrnr                  TYPE ad_addrnum,
        zz1_zsales_channel_pdh TYPE zz1_zsales_channel,
        matnr                  TYPE matnr ,
        menge                  TYPE bstmg ,
        meins                  TYPE bstme ,
        werks                  TYPE ewerk ,
        umrez                  TYPE umbsz ,
        umren                  TYPE umbsn ,
        lmein                  TYPE lagme ,
        ematn                  TYPE ematnr ,
        lgort                  TYPE lgort_d ,
        txz01                  TYPE txz01 ,
        ko_prctr               TYPE prctr ,
        idnlf                  TYPE idnlf ,
      END OF mtyp_s_pur_order_data .
    TYPES:
      mtyp_t_pur_order_data TYPE STANDARD TABLE OF mtyp_s_pur_order_data WITH DEFAULT KEY .
    TYPES:
      BEGIN OF mtyp_s_material_sto_ud,
        ebeln TYPE ekbe-ebeln,
        ebelp TYPE ekbe-ebelp,
        matnr TYPE mara-matnr,
        maktx TYPE makt-maktx,
      END OF mtyp_s_material_sto_ud .
    TYPES:
      mtyp_t_material_sto_ud TYPE STANDARD TABLE OF mtyp_s_material_sto_ud WITH DEFAULT KEY .
    TYPES:
      BEGIN OF mtyp_s_ekbe_pgi,
        ebeln TYPE ekbe-ebeln,
        ebelp TYPE ekbe-ebelp,
        belnr TYPE ekbe-belnr,
        vgabe TYPE ekbe-vgabe,
      END OF mtyp_s_ekbe_pgi .
    TYPES:
      mtyp_t_ekbe_pgi TYPE STANDARD TABLE OF mtyp_s_ekbe_pgi WITH DEFAULT KEY .
    TYPES:
      BEGIN OF mtyp_s_matdoc,
        mblnr TYPE mkpf-mblnr,
        mjahr TYPE mkpf-mjahr,
      END OF mtyp_s_matdoc .
    TYPES:
      mtyp_t_matdoc TYPE STANDARD TABLE OF mtyp_s_matdoc WITH DEFAULT KEY .
    TYPES:
      BEGIN OF mtyp_s_matdoc_data,
        mblnr TYPE mkpf-mblnr,
        mjahr TYPE mkpf-mjahr,
        werks TYPE mseg-werks,
        lgort TYPE mseg-lgort,
        matnr TYPE mseg-matnr,
        menge TYPE mseg-menge,
        meins TYPE mseg-meins,
      END OF mtyp_s_matdoc_data .
    TYPES:
      mtyp_t_matdoc_data TYPE STANDARD TABLE OF mtyp_s_matdoc_data WITH DEFAULT KEY .
    TYPES:
      BEGIN OF mtyp_s_delivery_key,
        vbeln TYPE likp-vbeln,
        posnr TYPE lips-posnr,
      END OF mtyp_s_delivery_key .
    TYPES:
      mtyp_t_delivery_keys TYPE STANDARD TABLE OF mtyp_s_delivery_key WITH KEY vbeln posnr .
    TYPES:
      BEGIN OF mtyp_s_delivery_data,
        vbeln TYPE likp-vbeln,
        posnr TYPE lips-posnr,
        werks TYPE lips-werks,
        lgort TYPE lips-lgort,
        bwart TYPE lips-bwart,
        meins TYPE lips-meins,
        vrkme TYPE lips-vrkme,
        wbstk TYPE likp-wbstk,
      END OF mtyp_s_delivery_data .
    TYPES:
      mtyp_t_deliveries_data TYPE STANDARD TABLE OF mtyp_s_delivery_data WITH DEFAULT KEY .
    TYPES:
      mtyp_t_bapiret TYPE STANDARD TABLE OF bapireturn. "bapiret2 .

    DATA mv_alt_bapi_ibd_create TYPE abap_bool VALUE abap_true ##NO_TEXT.
    DATA:
      mt_sto_ud_logs TYPE STANDARD TABLE OF zsd_t_sto_ud_log .
    DATA mt_hm_1081 TYPE zpe_tt_hm_table .
    DATA mt_hm_1087 TYPE zpe_tt_hm_table .
    DATA mt_hm_876_bwart TYPE zpe_tt_hm_table .
    DATA mv_hm_685_sto_intra_zu65 TYPE zpe_hm_field.
    DATA mv_hm_685_sto_inter_zu60 TYPE zpe_hm_field.
    DATA mv_hm_1042_lfart_zel      TYPE zpe_hm_field.
    CONSTANTS mc_no_data_found_error TYPE string VALUE 'Required data is not found'.
    METHODS update_ud_sto_log
      IMPORTING
        !its_ud_sto_log TYPE mtyp_t_sto_ud_log
      RAISING
        zcx_sd_sto_ud .
    METHODS vldt_plant_sloc_exist_in_hm
      RAISING
        zcx_sd_sto_ud .
    METHODS get_sto_ud_logs
      IMPORTING
        !iv_status             TYPE zsd_sto_ud_status
        !iv_process            TYPE zsd_sto_ud_process OPTIONAL
      RETURNING
        VALUE(rts_sto_ud_logs) TYPE mtyp_t_sto_ud_log .
    METHODS is_intra_company_movement
      IMPORTING
        !iv_supplying_plant TYPE reswk
        !iv_receiving_plant TYPE ewerk
      RETURNING
        VALUE(rv_result)    TYPE abap_bool .
    METHODS get_deliveries_data
      IMPORTING
        !it_delivery_keys TYPE mtyp_t_delivery_keys
      RETURNING
        VALUE(rt_result)  TYPE mtyp_t_deliveries_data .
    METHODS get_purchase_orders_data
      IMPORTING
        !it_purchase_order_keys TYPE mtyp_t_pur_order_key
      RETURNING
        VALUE(rt_result)        TYPE mtyp_t_pur_order_data .
    METHODS get_matdoc_pur_hist_data
      IMPORTING
        !it_matdoc       TYPE mtyp_t_matdoc
      RETURNING
        VALUE(rt_result) TYPE mtyp_t_matdoc_data .
    METHODS get_materials_from_ud_sto
      IMPORTING
        !its_sto_ud_log            TYPE mtyp_t_sto_ud_log
      RETURNING
        VALUE(rt_materials_sto_ud) TYPE mtyp_t_material_sto_ud .
    METHODS create_ibd_using_alt_bapi
      IMPORTING
        !is_sto_ud_log     TYPE zsd_t_sto_ud_log
        !is_pur_order_data TYPE mtyp_s_pur_order_data
      EXPORTING
        !et_return         TYPE mtyp_t_bapiret
        !ev_delivery_no    TYPE likp-vbeln .
    METHODS get_ekbe_belnr_for_pgi_sto_ud
      IMPORTING
        !its_sto_ud_log  TYPE mtyp_t_sto_ud_log
      RETURNING
        VALUE(rt_result) TYPE mtyp_t_ekbe_pgi .
ENDCLASS.



CLASS ZCL_ADA_STO_UD_HANDLER IMPLEMENTATION.


  METHOD CONSTRUCTOR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    IF iv_is_search_by_ud_sto = abap_true.
      IF it_sto_ud IS INITIAL.
        " UnderDelivered STO parameter is required to be filled
        MESSAGE e009(zsd_sto_ud).
      ENDIF.
    ELSEIF iv_is_search_by_ud_sto = abap_false AND ( it_bsart IS INITIAL OR it_ekorg IS INITIAL OR it_werks_r IS INITIAL ).
      " STO Type, Pur.Org and Rec.Plant parameters are required to be filled
      MESSAGE e010(zsd_sto_ud).
    ENDIF.

    mt_bsart        = it_bsart       .
    mt_ekorg        = it_ekorg       .
    mt_ekgrp        = it_ekgrp       .
    mt_sto_ud       = it_sto_ud      .
    mt_ebeln        = it_ebeln       .
    mt_werks_r      = it_werks_r     .
    mt_lgort        = it_lgort       .
    mt_werks_s      = it_werks_s     .
    mt_bsgru        = it_bsgru       .
    mt_erdat        = it_erdat       .
    mt_ernam        = it_ernam       .
    mv_days_from_gr = iv_days_from_gr.
    mv_days_from_gi = iv_days_from_gi.
    mv_is_search_by_ud_sto = iv_is_search_by_ud_sto.
    TRY.
        mt_hm_1081      = zcl_pe_hm_basic=>get_table( '1081' ).
        mt_hm_1087      = zcl_pe_hm_basic=>get_table( '1087' ).
        mt_hm_876_bwart = zcl_pe_hm_basic=>get_table( '876' ).
        mv_hm_685_sto_intra_zu65 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '012' ).
        mv_hm_685_sto_inter_zu60 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '011' ).
        mv_hm_1042_lfart_zel     = zcl_pe_hm_basic=>get_value( iv_id = '1042' iv_sequence = '001' ).

      CATCH zcx_pe_hm INTO DATA(lo_exception).
        MESSAGE lo_exception.
    ENDTRY.

  ENDMETHOD.


  METHOD CREATE_IBD_USING_ALT_BAPI.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA   lt_komdlgn TYPE STANDARD TABLE OF komdlgn.
    DATA   lt_vbfs    TYPE STANDARD TABLE OF vbfs.
    DATA   lt_vbls    TYPE STANDARD TABLE OF vbls.
    DATA   lt_lips    TYPE STANDARD TABLE OF lips.

    DATA ls_vbsk    TYPE vbsk.
    DATA ls_komdlgn TYPE komdlgn.
    DATA ls_vbls    TYPE vbls.

    CLEAR: ev_delivery_no, et_return.

    ls_vbsk-mandt = sy-mandt.
    ls_vbsk-ernam = sy-uname.
    ls_vbsk-erdat = sy-datum.
    ls_vbsk-uzeit = sy-uzeit.

    IF mt_werks_r IS NOT INITIAL.
      DATA(ls_hm_sloc) = VALUE #( mt_hm_1087[ field1 = mt_werks_r[ 1 ]-low ] OPTIONAL ).
    ENDIF.

    ls_komdlgn-lfart = mv_hm_1042_lfart_zel.
    ls_komdlgn-matnr = is_pur_order_data-matnr.
    ls_komdlgn-werks = ls_hm_sloc-field1.
    ls_komdlgn-lfimg = is_sto_ud_log-quantity_short.
    ls_komdlgn-vrkme = is_pur_order_data-meins.
    ls_komdlgn-meins = is_pur_order_data-lmein.
    ls_komdlgn-vgbel = is_pur_order_data-ebeln.
    ls_komdlgn-vgpos = is_pur_order_data-ebelp.
    ls_komdlgn-ematn = is_pur_order_data-ematn.
    ls_komdlgn-vgtyp = 'V'.
    ls_komdlgn-kzazu = 'X'.

    ls_komdlgn-lifex = is_sto_ud_log-under_delivered_dn. "
    ls_komdlgn-verur = is_sto_ud_log-under_delivered_dn. "
    ls_komdlgn-lgort = ls_hm_sloc-field2.
    ls_komdlgn-lifnr = COND #( WHEN is_pur_order_data-reswk IS NOT INITIAL THEN is_pur_order_data-reswk ELSE is_pur_order_data-lifnr ).

    ls_komdlgn-kdmat = is_pur_order_data-idnlf.
    ls_komdlgn-spe_lifex_type = 'S'.
    ls_komdlgn-wauhr = sy-uzeit.
    ls_komdlgn-wadat = sy-datum.

    APPEND ls_komdlgn TO lt_komdlgn.
    IF lt_komdlgn[] IS NOT INITIAL.
      CALL FUNCTION 'GN_DELIVERY_CREATE'
        EXPORTING
          vbsk_i   = ls_vbsk
        TABLES
          xkomdlgn = lt_komdlgn
          xvbfs    = lt_vbfs
          xvbls    = lt_vbls
          xxlips   = lt_lips
        EXCEPTIONS
          OTHERS   = 1.
    ENDIF.

    IF sy-subrc <> 0 OR line_exists( lt_vbfs[ msgty = 'E' ] ).
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      DATA: ls_return TYPE bapireturn.
      DATA(ls_vbfs) = VALUE #( lt_vbfs[ msgty = 'E' ] OPTIONAL ).
      CALL FUNCTION 'BALW_BAPIRETURN_GET'
        EXPORTING
          type       = ls_vbfs-msgty
          cl         = ls_vbfs-msgid
          number     = CONV symsgno( ls_vbfs-msgno )
          par1       = ls_vbfs-msgv1
          par2       = ls_vbfs-msgv2
          par3       = ls_vbfs-msgv3
          par4       = ls_vbfs-msgv4
        IMPORTING
          bapireturn = ls_return.
      APPEND ls_return TO et_return.
    ELSE.
      DATA(lv_index) = lines( lt_vbls ).
      READ TABLE lt_vbls INTO ls_vbls INDEX lv_index.     "#EC CI_SUBRC
      DATA(lv_vbeln) = ls_vbls-vbeln_lif.
      ev_delivery_no = lv_vbeln.
    ENDIF.

  ENDMETHOD.


  METHOD GET_DELIVERIES_DATA.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA lt_delivery_keys_wo_posnr LIKE it_delivery_keys.
    DATA lt_delivery_keys_with_posnr LIKE it_delivery_keys.

    LOOP AT it_delivery_keys ASSIGNING FIELD-SYMBOL(<ls_delivery_key>).
      IF <ls_delivery_key>-posnr IS INITIAL AND <ls_delivery_key>-vbeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_delivery_keys_wo_posnr ASSIGNING FIELD-SYMBOL(<ls_delivery_wo_posnr>).
        <ls_delivery_wo_posnr> = CORRESPONDING #( <ls_delivery_key> ).
      ELSEIF  <ls_delivery_key>-posnr IS NOT INITIAL AND <ls_delivery_key>-vbeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_delivery_keys_with_posnr ASSIGNING FIELD-SYMBOL(<ls_delivery_with_posnr>).
        <ls_delivery_with_posnr> = CORRESPONDING #( <ls_delivery_key> ).
      ELSE.
        RETURN.
      ENDIF.
    ENDLOOP.

    IF lt_delivery_keys_wo_posnr IS NOT INITIAL.
      SELECT
        DeliveryDocument                               AS vbeln,
        DeliveryDocumentItem                           AS posnr,
        Plant                                          AS werks,
        StorageLocation                                AS lgort,
        GoodsMovementType                              AS bwart,
        BaseUnit                                       AS meins,
        DeliveryQuantityUnit                           AS vrkme,
        \_DeliveryDocument-OverallGoodsMovementStatus  AS wbstk
        FROM  i_deliverydocumentitem AS lips
        INNER JOIN @lt_delivery_keys_wo_posnr AS itab ON itab~vbeln = lips~DeliveryDocument
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC
    ENDIF.

    IF lt_delivery_keys_with_posnr IS NOT INITIAL.
      SELECT
        DeliveryDocument                               AS vbeln,
        DeliveryDocumentItem                           AS posnr,
        Plant                                          AS werks,
        StorageLocation                                AS lgort,
        GoodsMovementType                              AS bwart,
        BaseUnit                                       AS meins,
        DeliveryQuantityUnit                           AS vrkme,
        \_DeliveryDocument-OverallGoodsMovementStatus  AS wbstk
        FROM  i_deliverydocumentitem AS lips
        INNER JOIN @lt_delivery_keys_with_posnr AS itab ON  itab~vbeln = lips~DeliveryDocument
                                                       AND itab~posnr = lips~DeliveryDocumentItem
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC

    ENDIF.

  ENDMETHOD.


  METHOD GET_EKBE_BELNR_FOR_PGI_STO_UD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    IF its_sto_ud_log IS NOT INITIAL.
      SELECT
        PurchaseOrder AS ebeln,
        PurchaseOrderItem AS ebelp,
        PurchasingHistoryDocument AS belnr,
        PurchasingHistoryDocumentType AS vgabe,
        DocumentReferenceID  AS xblnr
        FROM i_purchaseorderhistoryapi01
        FOR ALL ENTRIES IN @its_sto_ud_log
        WHERE PurchaseOrder = @its_sto_ud_log-virtual_return_sto
        AND   PurchasingHistoryDocumentType = '8' "vgabe
        INTO CORRESPONDING FIELDS OF TABLE @rt_result.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD GET_MATDOC_PUR_HIST_DATA.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    IF  it_matdoc IS NOT INITIAL.
      SELECT mseg~mblnr, mseg~mjahr, ekbe~werks, mseg~lgort, ekbe~matnr, ekbe~menge, mseg~meins
      FROM ekbe
      INNER JOIN mseg ON mseg~mblnr = ekbe~belnr AND mseg~mjahr = ekbe~gjahr AND mseg~zeile = ekbe~buzei
      FOR ALL ENTRIES IN @it_matdoc
      WHERE ekbe~belnr = @it_matdoc-mblnr
        AND ekbe~gjahr = @it_matdoc-mjahr
      INTO CORRESPONDING FIELDS OF TABLE @rt_result.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD GET_MATERIALS_FROM_UD_STO.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    " Get corresponding materials from under-delivered STO and its item.
    IF its_sto_ud_log IS NOT INITIAL.
      SELECT ebeln, ebelp, ekbe~matnr, makt~maktx
        FROM ekbe
        INNER JOIN makt ON ekbe~matnr = makt~matnr AND makt~spras = @sy-langu
        FOR ALL ENTRIES IN @its_sto_ud_log
        WHERE ebeln = @its_sto_ud_log-under_delivered_sto
        AND   ebelp = @its_sto_ud_log-under_delivered_sto_item
        AND   xblnr = @its_sto_ud_log-under_delivered_dn
        INTO CORRESPONDING FIELDS OF TABLE @rt_materials_sto_ud.
      IF sy-subrc = 0.
      ELSE.
        MESSAGE e002(zsd_sto_ud) INTO DATA(lv_msg).         "#EC NEEDED
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD GET_PURCHASE_ORDERS_DATA.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA lt_pur_orders_wo_item_key LIKE it_purchase_order_keys.
    DATA lt_pur_orders_with_item_key LIKE it_purchase_order_keys.

    LOOP AT it_purchase_order_keys ASSIGNING FIELD-SYMBOL(<ls_pur_order_key>).
      IF <ls_pur_order_key>-ebelp IS INITIAL AND <ls_pur_order_key>-ebeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_pur_orders_wo_item_key ASSIGNING FIELD-SYMBOL(<ls_pur_order_wo_item_key>).
        <ls_pur_order_wo_item_key> = CORRESPONDING #( <ls_pur_order_key> ).
      ELSEIF  <ls_pur_order_key>-ebelp IS NOT INITIAL AND <ls_pur_order_key>-ebeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_pur_orders_with_item_key ASSIGNING FIELD-SYMBOL(<ls_pur_order_with_item_key>).
        <ls_pur_order_with_item_key> = CORRESPONDING #( <ls_pur_order_key> ).
      ELSE.
        RETURN.
      ENDIF.
    ENDLOOP.

    IF lt_pur_orders_wo_item_key IS NOT INITIAL.
      SELECT
        PurchaseOrder                              AS ebeln,
        \_PurchaseOrder-CompanyCode                AS bukrs,
        \_PurchaseOrder-CorrespncExternalReference AS ihrez,
        \_PurchaseOrder-PurchaseOrderType          AS bsart,
        \_PurchaseOrder-Supplier                   AS lifnr,
        \_PurchaseOrder-PurchasingOrganization     AS ekorg,
        \_PurchaseOrder-PurchasingGroup            AS ekgrp,
        \_PurchaseOrder-SupplyingPlant             AS reswk,
        \_PurchaseOrder-ManualSupplierAddressID    AS adrnr,
        \_PurchaseOrder-zz1_zsales_channel_pdh     AS zz1_zsales_channel_pdh,
        PurchaseOrderItem                          AS ebelp,
        Material                                   AS matnr,
        OrderQuantity                              AS menge,
        PurchaseOrderQuantityUnit                  AS meins,
        Plant                                      AS werks,
        OrderItemQtyToBaseQtyNmrtr                 AS umrez,
        OrderItemQtyToBaseQtyDnmntr                AS umren,
        BaseUnit                                   AS lmein,
        ManufacturerMaterial                       AS ematn,
        StorageLocation                            AS lgort,
        PurchaseOrderItemText                      AS txz01,
        ProfitCenter                               AS ko_prctr,
        SupplierMaterialNumber                     AS idnlf
        FROM i_purchaseorderitemapi01 AS ekpo
        INNER JOIN @lt_pur_orders_wo_item_key AS itab ON itab~ebeln = ekpo~PurchaseOrder
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC

    ENDIF.

    IF lt_pur_orders_with_item_key IS NOT INITIAL.
      SELECT
        PurchaseOrder                              AS ebeln,
        \_PurchaseOrder-CompanyCode                AS bukrs,
        \_PurchaseOrder-CorrespncExternalReference AS ihrez,
        \_PurchaseOrder-PurchaseOrderType          AS bsart,
        \_PurchaseOrder-Supplier                   AS lifnr,
        \_PurchaseOrder-PurchasingOrganization     AS ekorg,
        \_PurchaseOrder-PurchasingGroup            AS ekgrp,
        \_PurchaseOrder-SupplyingPlant             AS reswk,
        \_PurchaseOrder-ManualSupplierAddressID    AS adrnr,
        \_PurchaseOrder-zz1_zsales_channel_pdh     AS zz1_zsales_channel_pdh,
        PurchaseOrderItem                          AS ebelp,
        Material                                   AS matnr,
        OrderQuantity                              AS menge,
        PurchaseOrderQuantityUnit                  AS meins,
        Plant                                      AS werks,
        OrderItemQtyToBaseQtyNmrtr                 AS umrez,
        OrderItemQtyToBaseQtyDnmntr                AS umren,
        BaseUnit                                   AS lmein,
        ManufacturerMaterial                       AS ematn,
        StorageLocation                            AS lgort,
        PurchaseOrderItemText                      AS txz01,
        ProfitCenter                               AS ko_prctr,
        SupplierMaterialNumber                     AS idnlf
        FROM i_purchaseorderitemapi01 AS ekpo
        INNER JOIN @lt_pur_orders_with_item_key AS itab ON  itab~ebeln = ekpo~PurchaseOrder
                                                        AND itab~ebelp = ekpo~PurchaseOrderItem
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC
    ENDIF.

  ENDMETHOD.


  METHOD GET_STO_UD_LOGS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    IF mt_sto_ud_logs IS NOT INITIAL.
      IF iv_process IS SUPPLIED.
        SELECT *
          FROM zsd_t_sto_ud_log
          FOR ALL ENTRIES IN @mt_sto_ud_logs
          WHERE under_delivered_sto =  @mt_sto_ud_logs-under_delivered_sto
          AND   under_delivered_sto_item = @mt_sto_ud_logs-under_delivered_sto_item
          AND   status = @iv_status
          AND   process = @iv_process
          INTO CORRESPONDING FIELDS OF TABLE @rts_sto_ud_logs.

      ELSE.
        SELECT *
          FROM zsd_t_sto_ud_log
          FOR ALL ENTRIES IN @mt_sto_ud_logs
          WHERE under_delivered_sto =  @mt_sto_ud_logs-under_delivered_sto
          AND   under_delivered_sto_item = @mt_sto_ud_logs-under_delivered_sto_item
          AND   status = @iv_status
          INTO CORRESPONDING FIELDS OF TABLE @rts_sto_ud_logs.

      ENDIF.

      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD IS_INTRA_COMPANY_MOVEMENT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    " If the company code Is the same (BURKS) then intracompany, if different then intercompany.
    SELECT SINGLE CompanyCode AS bukrs               "#EC CI_SEL_NESTED
      FROM i_valuationarea "t001k
      WHERE ValuationArea = @iv_supplying_plant
      INTO @DATA(lv_bukrs_supplying).
    IF sy-subrc = 0.
      SELECT SINGLE  CompanyCode AS bukrs            "#EC CI_SEL_NESTED
        FROM i_valuationarea
        WHERE ValuationArea = @iv_receiving_plant
        INTO @DATA(lv_bukrs_receiving).
      IF sy-subrc = 0 AND lv_bukrs_receiving = lv_bukrs_supplying.
        rv_result = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD UPDATE_UD_STO_LOG.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    MODIFY zsd_t_sto_ud_log FROM TABLE its_ud_sto_log.
    IF sy-subrc = 0 AND sy-dbcnt > 0.
      COMMIT WORK AND WAIT.
    ENDIF.

    LOOP AT its_ud_sto_log ASSIGNING FIELD-SYMBOL(<ls_ud_sto_log>) WHERE error_msg_text IS NOT INITIAL . "#EC CI_SORTSEQ
      RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e007(zsd_sto_ud) WITH <ls_ud_sto_log>-status <ls_ud_sto_log>-error_msg_text.
    ENDLOOP.

  ENDMETHOD.


  METHOD VLDT_PLANT_SLOC_EXIST_IN_HM.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    " Check if the selected plant and storage location combinations are maintained in Hardcode Manager
    IF mt_werks_s IS NOT INITIAL.
      SELECT werks
         FROM t001w
         WHERE werks IN @mt_werks_r
           OR  werks IN @mt_werks_s
         INTO TABLE @DATA(lt_werks).
    ELSE.
      SELECT werks
        FROM t001w
        WHERE werks IN @mt_werks_r
        INTO TABLE @lt_werks.
    ENDIF.

    IF sy-subrc = 0.
      IF mt_lgort IS NOT INITIAL.
        SELECT lgort
          FROM t001l                                    "#EC CI_GENBUFF
          FOR ALL ENTRIES IN @lt_werks
          WHERE werks = @lt_werks-werks
          AND lgort IN @mt_lgort
          INTO TABLE @DATA(lt_lgort).
        IF sy-subrc = 0.
          LOOP AT lt_lgort ASSIGNING FIELD-SYMBOL(<ls_lgort>).
            LOOP AT lt_werks ASSIGNING FIELD-SYMBOL(<ls_werks>). "#EC CI_NESTED
              READ TABLE mt_hm_1087 ASSIGNING FIELD-SYMBOL(<ls_hm_1087>) WITH KEY field1 = <ls_werks>-werks  field2 = <ls_lgort>-lgort. "#EC CI_STDSEQ
              IF sy-subrc <> 0.
                RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e001(zsd_sto_ud) WITH <ls_werks>-werks <ls_lgort>-lgort .
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDIF.
      ELSE.
        LOOP AT lt_werks ASSIGNING <ls_werks>.
          READ TABLE mt_hm_1087 ASSIGNING <ls_hm_1087> WITH KEY field1 = <ls_werks>-werks . "#EC CI_STDSEQ
          IF sy-subrc <> 0.
            RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e001(zsd_sto_ud) WITH <ls_werks>-werks.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~CREATE_VIRTUAL_RETURN_STO.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA lt_return  TYPE STANDARD TABLE OF bapiret2.
    DATA ls_exp_po_header TYPE bapimepoheader.
*    DATA lv_exp_po_order TYPE ebeln.

    DATA ls_is_header TYPE mepoheader.
    DATA ls_is_header_x TYPE mepoheaderx.
    DATA lt_it_items  TYPE STANDARD TABLE OF mepoitem .
    DATA lt_it_items_x  TYPE STANDARD TABLE OF mepoitemx.

    "Select all entries in the STO UD Log table where the status = "3" (GR posted) and Process indicator = "V".
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = zif_sd_sto_ud_const=>mc_status-virtual_gr_posted
                                             iv_process = zif_sd_sto_ud_const=>mc_process-virtual_return ).


    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(lt_pur_order_data) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                          ( ebeln = ls_line-under_delivered_sto  ebelp = ls_line-under_delivered_sto_item ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        DATA(ls_pur_order_data) = VALUE #( lt_pur_order_data[ ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item ] OPTIONAL ).

        DATA(ls_hm_rec_sloc) = VALUE #( mt_hm_1087[ field1 = mt_werks_r[ 1 ]-low ] OPTIONAL ).
        DATA(ls_hm_sen_sloc) = VALUE #( mt_hm_1087[ field1 = COND #( WHEN mt_werks_s IS NOT INITIAL THEN mt_werks_s[ 1 ]-low  ELSE ls_pur_order_data-reswk ) ] OPTIONAL ).


        " Fill PO Header
        ls_is_header-ihrez = |{ <ls_sto_ud_log>-under_delivered_sto }/{ <ls_sto_ud_log>-under_delivered_sto_item } |.
        ls_is_header-bukrs = ls_pur_order_data-bukrs.
        DATA(lv_is_intra_company) = is_intra_company_movement( iv_receiving_plant = ls_pur_order_data-werks
                                                               iv_supplying_plant = COND #( WHEN ls_pur_order_data-reswk IS NOT INITIAL THEN ls_pur_order_data-reswk ELSE ls_pur_order_data-lifnr ) ).

        ls_is_header-bsart = COND #( WHEN lv_is_intra_company = abap_true THEN mv_hm_685_sto_intra_zu65
                                                                          ELSE mv_hm_685_sto_inter_zu60  ).
        ls_is_header-ekorg = ls_pur_order_data-ekorg.
        ls_is_header-ekgrp = ls_pur_order_data-ekgrp.
        ls_is_header-reswk = ls_pur_order_data-reswk.
        ls_is_header-aedat = sy-datum.
        ls_is_header-lifnr = ls_pur_order_data-lifnr.
        ls_is_header-zz1_zsales_channel_pdh = ls_pur_order_data-zz1_zsales_channel_pdh.
        ls_is_header_x-ihrez = abap_true.
        ls_is_header_x-bukrs = abap_true.
        ls_is_header_x-bsart = abap_true.
        ls_is_header_x-ekorg = abap_true.
        ls_is_header_x-ekgrp = abap_true.
        ls_is_header_x-reswk = abap_true.
        ls_is_header_x-lifnr = abap_true.
        ls_is_header_x-aedat = abap_true.
        ls_is_header_x-zz1_zsales_channel_pdh = abap_true.

        " Fill PO Item
        lt_it_items = VALUE #( BASE lt_it_items
                              ( matnr     = ls_pur_order_data-matnr
                                ebelp     = <ls_sto_ud_log>-under_delivered_sto_item
                                werks     = ls_pur_order_data-werks
                                lgort    = ls_hm_rec_sloc-field2
                                reslo    = ls_hm_sen_sloc-field2
                                menge    = <ls_sto_ud_log>-quantity_short
                                meins    = ls_pur_order_data-meins
                                retpo    = abap_true
                                ) ).
        lt_it_items_x = VALUE #( BASE lt_it_items_x
                                ( ebelp_key = <ls_sto_ud_log>-under_delivered_sto_item
                                  ebelp    = abap_true
                                  matnr    = abap_true
                                  werks    = abap_true
                                  lgort    = abap_true
                                  reslo  = abap_true
                                  menge  = abap_true
                                  meins  = abap_true
                                  retpo  = abap_true
                                  ) ).
        CALL FUNCTION 'DMCC_MIG_PUR_PO_CREATE'
          EXPORTING
            is_header  = ls_is_header
            is_headerx = ls_is_header_x
          IMPORTING
            ev_header  = ls_exp_po_header
          TABLES
            it_items   = lt_it_items
            it_itemx   = lt_it_items_x
            et_return  = lt_return.

        IF line_exists( lt_return[ type = 'E' ] ).
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_created.
          <ls_sto_ud_log>-virtual_return_sto = ls_exp_po_header-po_number .
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.

        CLEAR: lt_it_items, lt_it_items_x, ls_is_header, ls_is_header_x.
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.


  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~DOWN_ADJUSTMENT_RECEIVING_PLNT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 22.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
*    DATA lt_sto_ud_logs     TYPE TABLE OF zsd_t_sto_ud_log.
    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = zif_sd_sto_ud_const=>mc_status-virtual_gr_posted
                                             iv_process = zif_sd_sto_ud_const=>mc_process-down_adjustment ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(ls_hm_bwart_702) = VALUE #( mt_hm_876_bwart[ field1 = '702' ] OPTIONAL ). "#EC CI_STDSEQ
      DATA(lt_matdoc_pur_hist_data) = get_matdoc_pur_hist_data( it_matdoc = VALUE #( FOR ls_sto_ud_log IN lts_sto_ud_logs
                                                                                    ( mblnr = ls_sto_ud_log-virtual_gr_matdoc
                                                                                      mjahr = ls_sto_ud_log-virtual_gr_matdoc_year ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        DATA(ls_matdoc_pur_hist_data) =  VALUE #( lt_matdoc_pur_hist_data[ mblnr = <ls_sto_ud_log>-virtual_gr_matdoc   mjahr = <ls_sto_ud_log>-virtual_gr_matdoc_year ] OPTIONAL ).

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_06.
        ls_goodsmvt_header-doc_date     = sy-datum.
        ls_goodsmvt_header-pstng_date   = sy-datum.
        ls_goodsmvt_header-pr_uname     = sy-uname.
        ls_goodsmvt_header-ref_doc_no   = <ls_sto_ud_log>-virtual_gr_matdoc.

        lt_goodsmvt_item = VALUE #( BASE lt_goodsmvt_item
                                    ( po_number            = <ls_sto_ud_log>-virtual_return_sto
                                      po_item              = <ls_sto_ud_log>-under_delivered_sto_item
                                      move_type            = ls_hm_bwart_702-field1
                                      move_reas            = zif_sd_sto_ud_const=>mc_move_reason-reason_1003
                                      ref_doc              = <ls_sto_ud_log>-virtual_gr_matdoc
                                      plant                = ls_matdoc_pur_hist_data-werks
*                                      mvt_ind              = 'B'
                                      entry_qnt            = ls_matdoc_pur_hist_data-menge
                                      entry_uom            = ls_matdoc_pur_hist_data-meins
                                      material             = ls_matdoc_pur_hist_data-matnr
                                      stge_loc             = ls_matdoc_pur_hist_data-lgort
                                      no_more_gr           = abap_true "
                                       ) ) .


        " Post the down adjustment in sending plant
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-down_ajustment_r_plant_posted.
          <ls_sto_ud_log>-down_adjustment_matdoc = ls_goodsmvt_headret-mat_doc.
          <ls_sto_ud_log>-down_adjustment_matdoc_year = ls_goodsmvt_headret-doc_year.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.
        CLEAR: lt_goodsmvt_item.
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~DOWN_ADJUSTMENT_SENDING_PLANT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*

*    DATA lt_sto_ud_logs     TYPE TABLE OF zsd_t_sto_ud_log.
    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_pgi_posted
                                             iv_process = zif_sd_sto_ud_const=>mc_process-virtual_return ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(ls_hm_bwart_702) = VALUE #( mt_hm_876_bwart[ field1 = '702' ] OPTIONAL ).
      DATA(lt_matdoc_pur_hist_data) = get_matdoc_pur_hist_data( it_matdoc = VALUE #( FOR ls_sto_ud_log IN lts_sto_ud_logs
                                                                                    ( mblnr = ls_sto_ud_log-virt_return_sto_gi_matdoc
                                                                                      mjahr = ls_sto_ud_log-virt_return_sto_gi_matdoc_year ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        DATA(ls_matdoc_pur_hist_data) =  VALUE #( lt_matdoc_pur_hist_data[ mblnr = <ls_sto_ud_log>-virt_return_sto_gi_matdoc   mjahr = <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year ] OPTIONAL ).

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_06.
        ls_goodsmvt_header-doc_date     = sy-datum.
        ls_goodsmvt_header-pstng_date   = sy-datum.
        ls_goodsmvt_header-pr_uname     = sy-uname.
        ls_goodsmvt_header-ref_doc_no   = <ls_sto_ud_log>-virt_return_sto_gi_matdoc.

        lt_goodsmvt_item = VALUE #( BASE lt_goodsmvt_item
                                    ( po_number            = <ls_sto_ud_log>-virtual_return_sto
                                      po_item              = <ls_sto_ud_log>-under_delivered_sto_item
                                      move_type            = ls_hm_bwart_702-field1
                                      move_reas            = zif_sd_sto_ud_const=>mc_move_reason-reason_1002
                                      ref_doc              = <ls_sto_ud_log>-virt_return_sto_gi_matdoc
                                      plant                = ls_matdoc_pur_hist_data-werks
*                                      mvt_ind              = 'B'
                                      entry_qnt            = ls_matdoc_pur_hist_data-menge
                                      entry_uom            = ls_matdoc_pur_hist_data-meins
                                      material             = ls_matdoc_pur_hist_data-matnr
                                      stge_loc             = ls_matdoc_pur_hist_data-lgort
                                      no_more_gr           = abap_true "
                                       ) ) .


        " Post the down adjustment in sending plant
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-down_ajustment_s_plant_posted.
          <ls_sto_ud_log>-down_adjustment_matdoc = ls_goodsmvt_headret-mat_doc.
          <ls_sto_ud_log>-down_adjustment_matdoc_year = ls_goodsmvt_headret-doc_year.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.
        CLEAR: lt_goodsmvt_item.
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~POST_GI_FOR_VIRTUAL_RETURN_STO.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA ls_vbkok_wa TYPE vbkok.
    DATA lt_vbpok_tab  TYPE STANDARD TABLE OF vbpok.
    DATA lt_prot   TYPE STANDARD TABLE OF prott.
    DATA ls_return TYPE bapireturn.


    "Select all entries in the STO UD Log table where the status = "5" (Virtual return STO GR posted) and Process indicator = "V".
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_gr_posted
                                             iv_process = zif_sd_sto_ud_const=>mc_process-virtual_return ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      " Find their DN number: select BELNR from table EKBE where EBELN = virtual return STO number from Z table and VGABE = 8
      DATA(lt_ekbe_pgi) = get_ekbe_belnr_for_pgi_sto_ud( lts_sto_ud_logs ).


      DATA(lt_deliveries_data) = get_deliveries_data( it_delivery_keys = VALUE #( FOR ls_ekbe_pgi_line IN lt_ekbe_pgi
                                                                                ( vbeln = ls_ekbe_pgi_line-belnr ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        DATA(ls_ekbe_pgi) = VALUE #( lt_ekbe_pgi[ ebeln = <ls_sto_ud_log>-virtual_return_sto ] OPTIONAL ).
        DATA(ls_lips) = VALUE #( lt_deliveries_data[ vbeln = ls_ekbe_pgi-belnr ] OPTIONAL ).
*        DATA(ls_lips) = VALUE #( lt_lips[ vbeln = ls_ekbe_pgi-belnr ] OPTIONAL ).

        ls_vbkok_wa-vbeln_vl = |{ ls_lips-vbeln ALPHA = IN }|.
        ls_vbkok_wa-vbeln    = |{ ls_lips-vbeln ALPHA = IN }|.
        ls_vbkok_wa-wabuc = abap_true.

        CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
          EXPORTING
            vbkok_wa               = ls_vbkok_wa
            synchron               = abap_true
            delivery               = ls_vbkok_wa-vbeln_vl
            if_error_messages_send = ' '
          TABLES
            vbpok_tab              = lt_vbpok_tab
            prot                   = lt_prot.

        IF line_exists( lt_prot[ msgty = 'E' ] ).
          DATA(ls_prot) = VALUE #( lt_prot[ msgty = 'E' ] OPTIONAL ).
          CALL FUNCTION 'BALW_BAPIRETURN_GET'
            EXPORTING
              type       = ls_prot-msgty
              cl         = ls_prot-msgid
              number     = CONV symsgno( ls_prot-msgno )
              par1       = ls_prot-msgv1
              par2       = ls_prot-msgv2
              par3       = ls_prot-msgv3
              par4       = ls_prot-msgv4
            IMPORTING
              bapireturn = ls_return.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          <ls_sto_ud_log>-error_msg_no   = ls_return-code.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_pgi_posted.
          SELECT mblnr, mjahr                        "#EC CI_SEL_NESTED
          FROM mkpf
          WHERE le_vbeln = @ls_vbkok_wa-vbeln_vl
          ORDER BY mblnr
          INTO TABLE @DATA(lt_ekko)  ##WARN_OK
          UP TO 1 ROWS.
          IF sy-subrc = 0.
            <ls_sto_ud_log>-virt_return_sto_gi_matdoc = lt_ekko[ 1 ]-mblnr .
            <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year = lt_ekko[ 1 ]-mjahr.
          ENDIF.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.
        CLEAR: ls_vbkok_wa.

      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.

  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~POST_GR_FOR_VIRTUAL_RETURN_STO.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code   TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item   TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return          TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.

    "Select all entries in the STO UD Log table where the status = "4" (Virtual STO created) and Process indicator = "V".
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_created
                                             iv_process = zif_sd_sto_ud_const=>mc_process-virtual_return ).

    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(lt_po_items) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                    ( ebeln = ls_line-virtual_return_sto ) ) ).

      DATA(ls_hm_bwart_161) = VALUE #( mt_hm_876_bwart[ field1 = '161' ] OPTIONAL ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_01.
        ls_goodsmvt_header-doc_date = sy-datum.
        ls_goodsmvt_header-pstng_date = sy-datum.
        ls_goodsmvt_header-pr_uname = sy-uname.

        LOOP AT lt_po_items ASSIGNING FIELD-SYMBOL(<ls_return_sto_item>) WHERE ebeln = <ls_sto_ud_log>-virtual_return_sto. "#EC CI_STDSEQ  "#EC CI_NESTED
          lt_goodsmvt_item = VALUE #( BASE lt_goodsmvt_item
                                      ( po_number            = <ls_return_sto_item>-ebeln
                                        po_item              = <ls_return_sto_item>-ebelp
                                        move_type            =  ls_hm_bwart_161-field1 " 161
                                        mvt_ind              = zif_sd_sto_ud_const=>mc_movement_indicator-purchase_order "'B'
                                        entry_qnt            = <ls_sto_ud_log>-quantity_short
                                        entry_uom            = <ls_return_sto_item>-meins
                                        entry_uom_iso        = <ls_sto_ud_log>-quantity_short
                                        plant                = <ls_return_sto_item>-werks
                                        material             = <ls_return_sto_item>-matnr
                                        stge_loc             = <ls_return_sto_item>-lgort
*                                        no_more_gr           = abap_true "
                                         ) ) .

        ENDLOOP.

        " post the GR for the Virtual return STO
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
          <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-virtual_return_sto_gr_posted.
          <ls_sto_ud_log>-virt_return_sto_gr_matdoc = ls_goodsmvt_headret-mat_doc.
          <ls_sto_ud_log>-virt_return_sto_gr_matdoc_year = ls_goodsmvt_headret-doc_year.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.

        CLEAR: lt_goodsmvt_item.
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).
    ENDIF.


  ENDMETHOD.


  METHOD ZIF_ADA_STO_UD_HANDLER~POST_VIRTUAL_GR_FOR_UD_QUAN.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
*    DATA lt_sto_ud_logs     TYPE TABLE OF zsd_t_sto_ud_log.
    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status = zif_sd_sto_ud_const=>mc_status-virtual_gr_ibd_created ).
    IF lts_sto_ud_logs IS NOT INITIAL.


      DATA(lt_sto_ud_materials)  = get_materials_from_ud_sto( lts_sto_ud_logs ).
      DATA(lt_deliveries_data)   = get_deliveries_data( it_delivery_keys = VALUE #( FOR ls_sto_ud_log IN lts_sto_ud_logs
                                                                                  ( vbeln = ls_sto_ud_log-virtual_gr_ibd ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        DATA(ls_delivery_data) = VALUE #( lt_deliveries_data[ vbeln = <ls_sto_ud_log>-virtual_gr_ibd ] OPTIONAL ). "#EC CI_STDSEQ
        IF ls_delivery_data-wbstk <> 'C'.

          DATA(ls_sto_ud_material) = VALUE #( lt_sto_ud_materials[ ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item ] OPTIONAL ). "#EC CI_STDSEQ
          IF ls_sto_ud_material IS INITIAL OR ls_delivery_data IS INITIAL.
            <ls_sto_ud_log>-error_msg_text = mc_no_data_found_error.
            CONTINUE.
          ENDIF.

          ls_goodsmvt_code = '01'.
          ls_goodsmvt_header-doc_date = sy-datum.
          ls_goodsmvt_header-pstng_date = sy-datum.
          ls_goodsmvt_header-pr_uname = sy-uname.
          ls_goodsmvt_header-ref_doc_no = <ls_sto_ud_log>-under_delivered_dn.

          lt_goodsmvt_item = VALUE #( BASE lt_goodsmvt_item
                                      ( po_number            = <ls_sto_ud_log>-under_delivered_sto
                                        po_item              = <ls_sto_ud_log>-under_delivered_sto_item
                                        move_type            = '101' "ls_sto_ud_delivery_item-bwart "101
                                        mvt_ind              = 'B'
                                        entry_qnt            = <ls_sto_ud_log>-quantity_short
                                        entry_uom            = ls_delivery_data-vrkme
                                        entry_uom_iso        = ls_delivery_data-meins
                                        deliv_numb_to_search = ls_delivery_data-vbeln
                                        deliv_item_to_search = ls_delivery_data-posnr
                                        deliv_numb           = <ls_sto_ud_log>-virtual_gr_ibd
                                        deliv_item           = ls_delivery_data-posnr
                                        plant                = ls_delivery_data-werks
                                        material             = ls_sto_ud_material-matnr
                                        stge_loc             = ls_delivery_data-lgort
                                        no_more_gr           = abap_true "
                                         ) ) .

          " Post GR against using current STO inbound delivery
          CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
            EXPORTING
              goodsmvt_header  = ls_goodsmvt_header
              goodsmvt_code    = ls_goodsmvt_code
            IMPORTING
              goodsmvt_headret = ls_goodsmvt_headret
            TABLES
              goodsmvt_item    = lt_goodsmvt_item
              return           = lt_return.
          IF line_exists( lt_return[ type = 'E' ] ).
            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
            <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
            <ls_sto_ud_log>-status = zif_sd_sto_ud_const=>mc_status-virtual_gr_posted.
            <ls_sto_ud_log>-virtual_gr_matdoc = ls_goodsmvt_headret-mat_doc.
            <ls_sto_ud_log>-virtual_gr_matdoc_year = ls_goodsmvt_headret-doc_year.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
        ENDIF.
        CLEAR: lt_goodsmvt_item, ls_goodsmvt_header, ls_goodsmvt_code, lt_return .
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.


  ENDMETHOD.
ENDCLASS.