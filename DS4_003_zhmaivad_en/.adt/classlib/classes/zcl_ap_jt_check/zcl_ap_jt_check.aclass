class ZCL_AP_JT_CHECK definition
  public
  create public .

public section.

  interfaces IF_APJ_JT_CHECK .
protected section.
private section.

  methods INSERT_FIELD
    importing
      !IP_PARAMETER_NAME type STRING
      !IP_VALUE_LOW type APJ_JOB_TEMPLATE_VALUE
      !IP_VALUE_HIGH type APJ_JOB_TEMPLATE_VALUE
      !IP_OPTION type APJ_OPTION default 'EQ'
    changing
      !CT_VALUE type IF_APJ_TYPES=>TT_JT_SELOPT .
ENDCLASS.



CLASS ZCL_AP_JT_CHECK IMPLEMENTATION.


  METHOD if_apj_jt_check~adjust_metadata.
    RETURN.
  ENDMETHOD.


  METHOD if_apj_jt_check~check_and_adjust.
    DATA(lv_value) = VALUE #( ct_value[ parameter_name = 'XBLNI' ] OPTIONAL ).
    IF lv_value-low IS INITIAL.
       MESSAGE W404(R3) INTO data(lv_message).
      et_msg = VALUE #( BASE et_msg ( type = sy-msgty id = sy-msgid number = sy-msgno message_v1 = 'Refeence number can''t be empty' message_v2 = 'It was auto-filled as WK_YYYYWK' ) ).

      insert_field( EXPORTING ip_parameter_name = 'XBLNI'
                       ip_value_low      = |WK_{ cl_sawe_date=>get_instance( )->get_week_of_a_day( sy-datum ) }|
                       ip_value_high     = ''
                       ip_option         = 'EQ'
             CHANGING  ct_value = ct_value ).
    ENDIF.
    ev_successful = abap_true.
  ENDMETHOD.


  METHOD if_apj_jt_check~check_before_schedule.
    ev_successful = abap_true.
  ENDMETHOD.


  method IF_APJ_JT_CHECK~GET_ADDITIONAL_PARAMETERS.
  endmethod.


  METHOD if_apj_jt_check~get_dynamic_properties.
    RETURN.
  ENDMETHOD.


  METHOD if_apj_jt_check~initialize.
    DATA:
      lv_help_low  TYPE apj_job_template_value, "low value
      lv_help_high TYPE apj_job_template_value, "high value
      lv_fromdate  TYPE n LENGTH 8. "date

*Set the defalut value for next shipping date
    lv_fromdate = sy-datum.
    lv_fromdate = lv_fromdate - 1.
    lv_help_low = lv_fromdate.
    lv_help_high = sy-datum.

    DATA(lo_date) = cl_sawe_date=>get_instance( ).
    DATA(lv_week) = lo_date->get_week_of_a_day( sy-datum ).
    DATA(lv_year) = sy-datum(4).


*Insert parameter
    insert_field( EXPORTING ip_parameter_name = 'GIDAT'
                            ip_value_low      = lv_help_low
                            ip_value_high     = ''
                            ip_option         = 'EQ'
                  CHANGING  ct_value = ct_value ).
     insert_field( EXPORTING ip_parameter_name = 'R_LGORT'
                            ip_value_low      = 'S001'
                            ip_value_high     = ''
                            ip_option         = 'EQ'
                  CHANGING  ct_value = ct_value ).
*Insert parameter
    GET PARAMETER ID 'WRK' FIELD lv_help_low.
    insert_field( EXPORTING ip_parameter_name = 'R_WERKS'
                            ip_value_low      = lv_help_low
                            ip_value_high     = ''
                            ip_option         = 'EQ'
                  CHANGING  ct_value = ct_value ).

    insert_field( EXPORTING ip_parameter_name = 'XBLNI'
                            "ip_value_low      = |WK_{ lo_date->get_week_of_a_day( sy-datum ) }_{ lv_year }|
                            ip_value_low      = |WK_{ lo_date->get_week_of_a_day( sy-datum ) }|
                            ip_value_high     = ''
                            ip_option         = 'EQ'
                  CHANGING  ct_value = ct_value ).

  ENDMETHOD.


  METHOD INSERT_FIELD.
    DATA wa_value LIKE LINE OF ct_value. "select opetion
    DATA(lv_value_low)  = ip_value_low. "low value
    DATA(lv_value_high) = ip_value_high. "high value

    CONSTANTS: c_sign_i TYPE apj_sign VALUE 'I'. "sign 'I'

    TRY.    " Only add the line if the parameter does not exist already
            " Otherwise just change the line
        wa_value = ct_value[ parameter_name = ip_parameter_name ].

        ct_value[ parameter_name = ip_parameter_name ]-sign = c_sign_i.
        ct_value[ parameter_name = ip_parameter_name ]-option = ip_option.
        ct_value[ parameter_name = ip_parameter_name ]-low = lv_value_low.
*   only set if parameter is provided
        ct_value[ parameter_name = ip_parameter_name ]-high = lv_value_high.

    CATCH cx_root.  " Parameter does not exist -> APPEND.

        wa_value-parameter_name = ip_parameter_name.
        wa_value-sign           = c_sign_i.
        wa_value-option         = ip_option.
        wa_value-low            = lv_value_low.
*   only set if parameter is provided
        wa_value-high = lv_value_high.

        APPEND wa_value TO ct_value.
        CLEAR wa_value.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.