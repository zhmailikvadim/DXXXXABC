CLASS zcl_approp_via_rfc DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_rap_query_provider .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_APPROP_VIA_RFC IMPLEMENTATION.


  METHOD if_rap_query_provider~select.
    TYPES: BEGIN OF ty_approp,
             externalnumber   TYPE ima_posid,
             req_txt          TYPE ima_txt50,
             rsp_cost_center  TYPE ima_vkostl,
             appr_date        TYPE ima_gdatu,
             orig_appr_year   TYPE ima_gjahr,
             description      TYPE ima_txv50,
             completion_date  TYPE ima_fdatu,
             start_up_date    TYPE ima_idatu,
             overhead_costs   TYPE bapicurr_d,
             req_cost_center  TYPE ima_akostl,
             percentage       TYPE ima_aproz,
             partner_function TYPE parvw,
             partner          TYPE i_parnr,
             fiscal_year      TYPE gjahr,
             inv_prog         TYPE im_prnam,
             appr_year        TYPE im_gnjhr,
             program_pos      TYPE im_posid,
             percent_prog_pos TYPE im_prozu,
           END OF ty_approp.
    DATA: ls_approp_req TYPE ty_approp.
    DATA: lt_approp_req TYPE STANDARD TABLE OF ty_approp.
    DATA: ls_master_data TYPE bapiappreqmaster,
          ls_controlling TYPE bapi_appreq_id-cntrl_area,
          lt_org         TYPE TABLE OF bapiappreqorgunit,
          lt_partner     TYPE TABLE OF bapiappreqpartnerout,
          lt_pos         TYPE TABLE OF bapiappreqexpprogassgn,
          lt_variant     TYPE TABLE OF bapiappreqvarntmulti,
          lt_plantot     TYPE TABLE OF bapiappreqplantotalmulti,
          lt_planyear    TYPE TABLE OF bapiappreqplanyearmulti,
          lt_return      TYPE TABLE OF bapiret2.
    "Set RFC destination
    TRY.
        "data(lo_rfc_dest) = cl_rfc_destination_provider=>proxy_type_onpremise(
        "i_name = ''
        ").
        "DATA(lv_rfc_dest_name) = lo_rfc_dest->get_destination_name(  ).
        "Check if data is requested
        IF io_request->is_data_requested(  ).
*          DATA lv_maxrows TYPE int4.
*          DATA(lv_skip) = io_request->get_paging( )->get_offset(  ).
*          DATA(lv_top) = io_request->get_paging( )->get_page_size(  ).
*          lv_maxrows = lv_skip + lv_top.
          io_request->get_paging( )->get_offset(  ).
          io_request->get_paging( )->get_page_size(  ).
          "Call BAPI
          CALL FUNCTION 'BAPI_APPREQUEST_GETDETAIL'
            EXPORTING
              externalnumber    = '2.018E11-016288'
*             language          =
*             language_iso      =
            IMPORTING
              master_data       = ls_master_data
*             user_fields       =
              "controlling_area  = ls_controlling
            TABLES
              org_units         = lt_org
*             division          =
*             material_group    =
*             invest_reason     =
*             environmnt_invest =
*             assets_equis      =
*             order             =
*             wbs_element       =
              partner           = lt_partner
              assignment_to_pos = lt_pos
*             assignment_to_budg_categ =
              variant           = lt_variant
*             variant_to_version       =
*             assigned_apprequests     =
              plan_total        = lt_plantot
              plan_year         = lt_planyear
*             plan_total_obj    =
*             plan_year_obj     =
              return            = lt_return.
        ENDIF.
        ls_approp_req-externalnumber = '2.018E11-016288'.
        ls_approp_req-req_txt = ls_master_data-req_txt.
        ls_approp_req-rsp_cost_center = ls_master_data-rsp_cost_center.
        ls_approp_req-appr_date = ls_master_data-appr_date.
        ls_approp_req-orig_appr_year = ls_master_data-orig_appr_year.

        READ TABLE lt_org INTO DATA(ls_org) INDEX 1.
        ls_approp_req-req_cost_center = ls_org-req_cost_center.
        ls_approp_req-percentage = ls_org-percentage.

        READ TABLE lt_partner INTO DATA(ls_partner) INDEX 1.
        ls_approp_req-partner_function = ls_partner-partner_function.
        ls_approp_req-partner = ls_partner-partner.

        READ TABLE lt_pos INTO DATA(ls_pos) INDEX 1.
        ls_approp_req-inv_prog = ls_pos-inv_prog.
        ls_approp_req-appr_year = ls_pos-appr_year.
        ls_approp_req-percent_prog_pos = ls_pos-percent_prog_pos.
        ls_approp_req-program_pos = ls_pos-program_pos.

        READ TABLE lt_variant INTO DATA(ls_variant) INDEX 1.
        ls_approp_req-req_cost_center = ls_variant-description.
        ls_approp_req-start_up_date = ls_variant-start_up_date.

        READ TABLE lt_plantot INTO DATA(ls_plantot) INDEX 1.
        ls_approp_req-overhead_costs = ls_plantot-overhead_costs.

        READ TABLE lt_planyear INTO DATA(ls_planyear) INDEX 1.
        ls_approp_req-fiscal_year = ls_planyear-fiscal_year.

        APPEND ls_approp_req TO lt_approp_req.
        CLEAR ls_approp_req.
        "Set total no. of records
        io_response->set_total_number_of_records( lines( lt_approp_req ) ).
        "Output data
        io_response->set_data( lt_approp_req ).
      CATCH  cx_rfc_dest_provider_error INTO DATA(lx_dest).
    ENDTRY.

  ENDMETHOD.
ENDCLASS.