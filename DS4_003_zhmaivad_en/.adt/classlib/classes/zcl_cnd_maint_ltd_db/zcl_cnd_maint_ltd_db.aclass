class ZCL_CND_MAINT_LTD_DB definition
  public
  create private

  global friends CL_SD_PRCG_CNDNRECORD_DPC_EXT .

public section.

  interfaces IF_CND_MAINT_LTD_TYPES .
  interfaces IF_CND_MAINT_LTD_DB .

  types:
    ty_where_tab_t TYPE STANDARD TABLE OF where_tab WITH NON-UNIQUE DEFAULT KEY .
  types:
    ty_sel_tab_t TYPE STANDARD TABLE OF sel_table WITH NON-UNIQUE DEFAULT KEY .

  class-methods GET_INSTANCE
    returning
      value(RO_DB) type ref to IF_CND_MAINT_LTD_DB .
protected section.
private section.

  aliases TY_COND_QUERY_S
    for IF_CND_MAINT_LTD_DB~TY_COND_QUERY_S .
  aliases TY_COND_QUERY_T
    for IF_CND_MAINT_LTD_DB~TY_COND_QUERY_T .
  aliases TY_COND_SELOPT_S
    for IF_CND_MAINT_LTD_DB~TY_COND_SELOPT_S .
  aliases TY_COND_SELOPT_T
    for IF_CND_MAINT_LTD_DB~TY_COND_SELOPT_T .
  aliases TY_COND_SELRAN_S
    for IF_CND_MAINT_LTD_DB~TY_COND_SELRAN_S .
  aliases TY_COND_SELRAN_T
    for IF_CND_MAINT_LTD_DB~TY_COND_SELRAN_T .
  aliases TY_FNAMEVALUE_S
    for IF_CND_MAINT_LTD_DB~TY_FNAMEVALUE_S .
  aliases TY_FNAMEVALUE_T
    for IF_CND_MAINT_LTD_DB~TY_FNAMEVALUE_T .
  aliases TY_KONM_T
    for IF_CND_MAINT_LTD_DB~TY_KONM_T .
  aliases TY_KONW_T
    for IF_CND_MAINT_LTD_DB~TY_KONW_T .
  aliases TY_VAKEVB_PLUS_S
    for IF_CND_MAINT_LTD_DB~TY_VAKEVB_PLUS_S .
  aliases TY_VAKEVB_PLUS_T
    for IF_CND_MAINT_LTD_DB~TY_VAKEVB_PLUS_T .
  aliases TY_VKON_COND_RECORD_S
    for IF_CND_MAINT_LTD_DB~TY_VKON_COND_RECORD_S .
  aliases TY_VKON_COND_RECORD_T
    for IF_CND_MAINT_LTD_DB~TY_VKON_COND_RECORD_T .
  aliases TY_VKON_TIME_VAKE_AKT_S
    for IF_CND_MAINT_LTD_DB~TY_VKON_TIME_VAKE_AKT_S .
  aliases TY_VKON_TIME_VAKE_AKT_T
    for IF_CND_MAINT_LTD_DB~TY_VKON_TIME_VAKE_AKT_T .

  types:
    BEGIN OF knumh_map_sty,
        knumh_old TYPE knumh,
        knumh_new TYPE knumh,
      END   OF knumh_map_sty .
  types:
    knumh_map_tty TYPE SORTED TABLE OF knumh_map_sty WITH UNIQUE KEY knumh_old .

  constants C_PRICING_USAGE type KVEWE value 'A' ##NO_TEXT.
  constants C_SALES_VALIDITY_VIEW_NAME type TABNAME16 value 'ZPSLSPRCGCNDNVA' ##NO_TEXT.
  constants C_PURG_VALIDITY_VIEW_NAME type TABNAME16 value 'APURGPRCGCNDNVA' ##NO_TEXT.
  class-data GC_TEMPORAER type CHAR2 value '$$' ##NO_TEXT.
  data MT_KNUMH_MAP type KNUMH_MAP_TTY .
  data MT_WHITELIST type STRING_HASHED_TABLE .
  data MO_DEP_MGR type ref to IF_CND_MAINT_LTD_DEP .
  data MO_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MT_CONDITION_TABLE type IF_CND_MAINT_LTD_DEP=>CONTAB_T .
  data MV_SLS_CNDN_APP_FLAG type ABAP_BOOL .
  class-data MO_SELF type ref to ZCL_CND_MAINT_LTD_DB .

  methods FIORI_APP_WHERE_CLAUSE
    importing
      !IT_CNDN_CRITERIA_ITEM type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_ITM_TECH_T
    returning
      value(RV_WHERE) type STRING .
  methods BUILD_WHERE_FOR_CNDNFLD
    importing
      !IV_KAPPL type KAPPL optional
      !IT_CNDN_FIELD_QUERY type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_ITM_TECH_T
      !IS_T681 type T681
    exporting
      !EV_WHERE type STRING .
  methods GET_CONDITION_ID
    importing
      value(IV_KNUMH_OLD) type KNUMH
    exporting
      !EV_KNUMH_NEW type KNUMH
    raising
      CX_CND_MAINT_LTD_EXCEPTION .
  methods CHANGE_CONDITION_ID
    importing
      !IV_KNUMH_OLD type KNUMH
    exporting
      !EV_KNUMH_NEW type KNUMH
    raising
      CX_CND_MAINT_LTD_EXCEPTION .
  methods CONSTRUCTOR .
  methods CHECK_XKONP
    changing
      !CS_XKONP type KONPDB .
  methods GET_TIME_VAKE_FROM_DB
    importing
      !IV_KVEWE type KVEWE
      !IV_KOTABNR type KOTABNR
      !IT_COND_RECORD_KEY type CNDT_CONDITION_KEY
    exporting
      !ET_TIME_VAKE type IF_CND_MAINT_LTD_TYPES=>TY_VAKE_T .
  methods GET_KOTABNR_KSCHL_FROM_KONH
    changing
      !CS_COND_QUERY type TY_COND_QUERY_S .
  methods BUILD_WHERE_CONDITION
    importing
      !IS_T681 type T681
      !IS_CNDN_CRITERIA_HEADER type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_HDR_TECH_S
    changing
      !CV_WHERE_CONDITION type STRING .
  methods BUILD_SQL_CLAUSE_FOR_QRY_OPTN
    importing
      !IS_CNDN_QUERY_OPTION type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_QUERY_OPTION_S
      !IV_CONDITION_TABLE type KOTAB
      !IT_CNDN_ORDERBY type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_ORDERBY_FIELD_T
    exporting
      !EV_COUNT_RELEVANT type BOOLEAN
      !EV_ORDERBY_CONDITION type STRING .
  methods BUILD_DYNAMIC_TABLE
    importing
      !IV_APPL type KAPPL
    exporting
      !ER_TABLE_TYPE type ref to DATA .
ENDCLASS.



CLASS ZCL_CND_MAINT_LTD_DB IMPLEMENTATION.


  METHOD if_cnd_maint_ltd_db~set_sls_cndn_app_flag.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    mv_sls_cndn_app_flag = iv_flag.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~save_condition_text_db.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    DATA lt_konpt_mod TYPE STANDARD TABLE OF konpt.
    DATA lt_konpt_del TYPE STANDARD TABLE OF konpt.
    DATA ls_konpt TYPE konpt.

    DELETE ct_konpt WHERE updkz <> if_cnd_maint_ltd_types=>c_updkz_insert
                      AND updkz <> if_cnd_maint_ltd_types=>c_updkz_update
                      AND updkz <> if_cnd_maint_ltd_types=>c_updkz_delete.

    CHECK ct_konpt IS NOT INITIAL.

    LOOP AT ct_konpt ASSIGNING FIELD-SYMBOL(<ls_konpt>).
      IF <ls_konpt>-vtext IS INITIAL.
        <ls_konpt>-updkz = if_cnd_maint_ltd_types=>c_updkz_delete.
      ENDIF.

      CLEAR ls_konpt.
      MOVE-CORRESPONDING <ls_konpt> TO ls_konpt.

      IF <ls_konpt>-updkz = if_cnd_maint_ltd_types=>c_updkz_delete.
        APPEND ls_konpt TO lt_konpt_del.
      ELSE.
        APPEND ls_konpt TO lt_konpt_mod.
      ENDIF.
    ENDLOOP.

    TEST-SEAM save_cond_text.
      IF lt_konpt_mod IS NOT INITIAL.
        MODIFY konpt FROM TABLE lt_konpt_mod.
      ENDIF.

      IF lt_konpt_del IS NOT INITIAL.
        DELETE konpt FROM TABLE lt_konpt_del.
      ENDIF.
    END-TEST-SEAM.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~save_conditions_db.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
*---------------------------------------------------------------------*
* This method is basically a copy of function RV_CONDITION_SAVE resp.
* WV_CONDITION_SAVE, but with some modernizatons and simplifications.
* Note: There are some restrictions, e.g. bonus is not supported.
*---------------------------------------------------------------------*
    TYPES:
      BEGIN OF knumh_to_xvake_sty,
        knumh TYPE knumh,
        tabix TYPE sytabix,
      END OF knumh_to_xvake_sty,
      knumh_to_xvake_tty TYPE SORTED TABLE OF knumh_to_xvake_sty WITH NON-UNIQUE DEFAULT KEY.
    DATA:
      lv_db_update      TYPE abap_bool,
      lv_tabix_vake_db  TYPE sytabix,
      lv_tabix_scale    TYPE sytabix,
      lv_tabix_xkondat  TYPE sytabix,
      lv_tabix_xkonh    TYPE sytabix,
      lv_tabix_xkonp    TYPE sytabix,
      lv_tabix_ykondat  TYPE sytabix,
      lv_overlap_index  TYPE sytabix,
      ls_bool           TYPE boole,
      ls_knumh_to_xvake TYPE knumh_to_xvake_sty,
      lt_knumh_to_xvake TYPE knumh_to_xvake_tty,
      ls_cond_scale     TYPE if_cnd_maint_ltd_types=>ty_cond_scale_usage_a_s,
      lt_cond_scale     TYPE if_cnd_maint_ltd_types=>ty_cond_scale_usg_a_sorted_t,
      ls_cond_text      TYPE LINE OF cond_konptdb_t,
      lt_cond_text      TYPE cond_konptdb_t.
    FIELD-SYMBOLS <lt_cond_record> TYPE if_cnd_maint_ltd_types=>ty_cond_record_usage_a_t.
    FIELD-SYMBOLS <lt_cond_scale>  TYPE if_cnd_maint_ltd_types=>ty_cond_scale_usg_a_sorted_t.
    FIELD-SYMBOLS <lt_cond_text>   TYPE cond_konptdb_t.
    CONSTANTS lc_cpe_message_class TYPE symsgid VALUE 'CPE' ##NO_TEXT.
*---------------------------------------------------------------------*

* build index table for KNUMH
    LOOP AT ct_xvake ASSIGNING FIELD-SYMBOL(<ls_xvake>)
                     WHERE knumh(2) EQ gc_temporaer.
      ls_knumh_to_xvake-knumh = <ls_xvake>-knumh.
      ls_knumh_to_xvake-tabix = sy-tabix.
      INSERT ls_knumh_to_xvake INTO TABLE lt_knumh_to_xvake.
    ENDLOOP.

* get condition id KNUMH
    LOOP AT ct_time_vake_db ASSIGNING FIELD-SYMBOL(<ls_time_vake_db>).
      lv_tabix_vake_db = sy-tabix.
*     get a valid condition record id KNUMH to substitute any temporary
      IF <ls_time_vake_db>-xxdbaction <> space.
        lv_db_update = abap_true.
        IF <ls_time_vake_db>-knumh(2) = gc_temporaer.
*         check whether the record should be written
*         without getting a valid number konh, konp,,, are deleted
          READ TABLE lt_knumh_to_xvake ASSIGNING FIELD-SYMBOL(<ls_knumh_to_xvake>)
                                       WITH KEY knumh = <ls_time_vake_db>-knumh.
          CHECK sy-subrc EQ 0.
          READ TABLE ct_xvake ASSIGNING <ls_xvake>
                              INDEX <ls_knumh_to_xvake>-tabix.
          CHECK sy-subrc EQ 0.
          IF <ls_xvake>-noupd = abap_true.
*           special handling in case the last time range is overwritten
            IF <ls_time_vake_db>-xxdbaction = 'U'         AND
               <ls_time_vake_db>-datab      = <ls_xvake>-datab AND
               <ls_time_vake_db>-datbi      = <ls_xvake>-datbi.
              <ls_time_vake_db>-xxdbaction = 'D'.
            ELSE.
              CLEAR <ls_time_vake_db>-xxdbaction.
            ENDIF.
          ELSE.
            TRY .
                get_condition_id(
                EXPORTING
                  iv_knumh_old = <ls_time_vake_db>-knumh
                IMPORTING
                  ev_knumh_new = <ls_time_vake_db>-knumh ).
              CATCH cx_cnd_maint_ltd_exception.
                DELETE ct_time_vake_db INDEX lv_tabix_vake_db.
            ENDTRY.
          ENDIF.                                                 "WD4.0C
        ENDIF.
      ENDIF.
**   Check if bonus active flag should be set (WD-IDOC)      "THV: No Bonus supported
*    IF time_vake_db-kvewe = kvewe_bonus.
*      bonus_aktiv = yes.
*      application = time_vake_db-kappl.
*    ENDIF.
    ENDLOOP.

*   get condition id for dependent structures
*   condition header table KONH
    LOOP AT ct_xkonh ASSIGNING FIELD-SYMBOL(<ls_xkonh>).
      lv_tabix_xkonh = sy-tabix.
*     DB change?
      IF <ls_xkonh>-updkz <> space.
        lv_db_update = abap_true.
*       substitute temporary condition record id by the valid id
        IF <ls_xkonh>-knumh(2) = gc_temporaer.
          TRY.
              change_condition_id(
                EXPORTING
                  iv_knumh_old = <ls_xkonh>-knumh
                IMPORTING
                  ev_knumh_new = <ls_xkonh>-knumh ).
              IF <ls_xkonh>-priceapprovalrequest(2) = gc_temporaer.
                <ls_xkonh>-priceapprovalrequest = <ls_xkonh>-knumh.
              ENDIF.
            CATCH cx_cnd_maint_ltd_exception.
              DELETE ct_xkonh INDEX lv_tabix_xkonh.
          ENDTRY.
        ENDIF.
      ELSE.
*       delete in case no update is required
        DELETE ct_xkonh INDEX lv_tabix_xkonh.
      ENDIF.
    ENDLOOP.


    DATA: lv_cpe_condition_used TYPE boolean.
*   condition item table KONP
    LOOP AT ct_xkonp ASSIGNING FIELD-SYMBOL(<ls_xkonp>).
      lv_tabix_xkonp = sy-tabix.
*     check DB change requested
      IF <ls_xkonp>-updkz <> space.
        lv_db_update = abap_true.
* Consistency KZBZG - KONMS, KONWS
        CALL METHOD check_xkonp
          CHANGING
            cs_xkonp = <ls_xkonp>.    " KONP: Structure for Posting

* Commodity Management, handling of CPE conditions
        DATA lv_knumh_old_cpe TYPE knumh.
        lv_knumh_old_cpe = <ls_xkonp>-knumh.

        IF <ls_xkonp>-krech = 'Q'.
          SELECT SINGLE * FROM i_purgprcgcndntype INTO @DATA(ls_t685a) WHERE conditiontype = @<ls_xkonp>-kschl.
          IF ls_t685a-cmmdtypricingengineisenabled = abap_true.
            lv_cpe_condition_used = abap_true.
          ENDIF.
        ENDIF.

*       substitute temporary condition record id by the valid id
        IF <ls_xkonp>-knumh(2) = gc_temporaer.
          TRY.
              change_condition_id(
                EXPORTING
                  iv_knumh_old = <ls_xkonp>-knumh
                IMPORTING
                  ev_knumh_new = <ls_xkonp>-knumh ).
            CATCH cx_cnd_maint_ltd_exception.
              DELETE ct_xkonp INDEX lv_tabix_xkonp.
          ENDTRY.

* Commodity Management, handling of CPE conditions
          IF lv_cpe_condition_used = abap_true AND <ls_xkonp> IS ASSIGNED AND <ls_xvake> IS ASSIGNED.
            CALL FUNCTION 'CPE_ERP_MD_KNUMH_KOPOS_CHANGE'
              EXPORTING
                iv_application      = <ls_xkonp>-kappl
                iv_usage            = <ls_xvake>-kvewe
                iv_knumh_old        = lv_knumh_old_cpe
                iv_knumh_new        = <ls_xkonp>-knumh
              EXCEPTIONS
                cpe_not_active      = 1
                old_knumh_not_found = 2
                OTHERS              = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here
            ENDIF.
          ENDIF.

        ENDIF.
      ELSE.
*       delete in case no update is required
        DELETE ct_xkonp INDEX lv_tabix_xkonp.
      ENDIF.
    ENDLOOP.

* Prepare budget data
* PERFORM budget_data_prepare(sapmv13a).   "THV: Not supported

*   scales
    LOOP AT ct_xscale ASSIGNING FIELD-SYMBOL(<ls_scale>).
      lv_tabix_scale = sy-tabix.
*     check DB change requested
      IF <ls_scale>-updkz <> space.
        lv_db_update = abap_true.
*       substitute temporary condition record id by the valid id
        IF <ls_scale>-knumh(2) = gc_temporaer.
          TRY.
              change_condition_id(
                EXPORTING
                  iv_knumh_old = <ls_scale>-knumh
                IMPORTING
                  ev_knumh_new = <ls_scale>-knumh ).
            CATCH cx_cnd_maint_ltd_exception.
              DELETE ct_xscale INDEX lv_tabix_scale.
          ENDTRY.
        ENDIF.
*   ELSE.
* No database update: delete entry
*     DELETE ct_scale INDEX lv_tabix_scale.
      ENDIF.
    ENDLOOP.

*   change documents
    LOOP AT ct_xkondat ASSIGNING FIELD-SYMBOL(<ls_xkondat>).
      lv_tabix_xkondat = sy-tabix.
      IF <ls_xkondat>-knumh(2) = gc_temporaer.
        TRY.
            change_condition_id(
              EXPORTING
                iv_knumh_old = <ls_xkondat>-knumh
              IMPORTING
                ev_knumh_new = <ls_xkondat>-knumh ).
          CATCH cx_cnd_maint_ltd_exception.
            DELETE ct_xkondat INDEX lv_tabix_xkondat.
        ENDTRY.
      ENDIF.
    ENDLOOP.
    LOOP AT ct_ykondat ASSIGNING FIELD-SYMBOL(<ls_ykondat>).
      lv_tabix_ykondat = sy-tabix.
      IF <ls_ykondat>-knumh(2) = gc_temporaer.
        TRY.
            change_condition_id(
              EXPORTING
                iv_knumh_old = <ls_ykondat>-knumh
              IMPORTING
                ev_knumh_new = <ls_ykondat>-knumh ).
          CATCH cx_cnd_maint_ltd_exception.
            DELETE ct_ykondat INDEX lv_tabix_ykondat.
        ENDTRY.
      ENDIF.
    ENDLOOP.

    DATA lv_tabix_xkonpt TYPE sy-tabix.
    DELETE ct_xkonpt WHERE updkz <> if_cnd_maint_ltd_types=>c_updkz_insert
                       AND updkz <> if_cnd_maint_ltd_types=>c_updkz_update
                       AND updkz <> if_cnd_maint_ltd_types=>c_updkz_delete.
    LOOP AT ct_xkonpt ASSIGNING FIELD-SYMBOL(<ls_xkonpt>).
      lv_tabix_xkonpt = sy-tabix.

*     delete record with wrong language key
      SELECT SINGLE spras INTO @DATA(lv_spras) FROM t002 BYPASSING BUFFER WHERE spras = @<ls_xkonpt>-spras.
      IF sy-subrc <> 0.
        DELETE ct_xkonpt INDEX lv_tabix_xkonpt.
        CONTINUE.
      ENDIF.

      IF <ls_xkonpt>-updkz <> space.
        lv_db_update = abap_true.
        IF <ls_xkonpt>-knumh(2) = gc_temporaer.
          TRY.
              change_condition_id(
                EXPORTING
                  iv_knumh_old = <ls_xkonpt>-knumh
                IMPORTING
                  ev_knumh_new = <ls_xkonpt>-knumh ).
            CATCH cx_cnd_maint_ltd_exception.
              DELETE ct_xkonpt INDEX lv_tabix_xkonpt.
          ENDTRY.
        ENDIF.
      ENDIF.
    ENDLOOP.
** Set bonus flag      "THV: Bonus not supported
*  IF bonus_aktiv = yes.
*    IF application = kappl-sales.
*      abtyp_general = abtyp-bonus.
*    ELSE.
*      abtyp_general = abtyp-bonus_ein.
*    ENDIF.
*  ELSE.
*    abtyp_general = no.
*  ENDIF.
** Check agreement type
*  IF abtyp_general NA abtyp-bonus_all.
** WWS1.2A M.U. Ende     (IDOC)
** Call index preparation
*    CALL FUNCTION 'SD_COND_INDEX_UPDATE_PREP'
*      TABLES
*        ip_dbtime = time_vake_db
*        ip_komgfn = index_new
*        ip_komgfo = index_old
*        ip_time   = time_vake
*        ip_xkonh  = xkonh
*        ip_ykonh  = ykonh.
*  ENDIF.                               "WWS1.2A M.U. (IDOC)

*   Call update module in case update is requested for any time_vake_db, xkonh, xkonp, ...
    IF lv_db_update = abap_true.
      ls_bool-boole = abap_true.
      DATA: lt_xvake TYPE cond_vakevb_t.
      DATA  lt_time  TYPE STANDARD TABLE OF vakedb.
      lt_xvake = ct_xvake.    "Due to fifferent structure
      lt_time  = ct_time_vake_db ##ENH_OK .

      TEST-SEAM rv_kondition_sichern_v13a.
        IF iv_sync = abap_false.
* Commodity Management, handling of CPE conditions
          IF lv_cpe_condition_used = abap_true.
            CALL FUNCTION 'CPE_ERP_MD_FORMULA_SAVE'
              EXPORTING
                iv_konp_consistence = 'X'
                it_konpdb           = ct_xkonp
              EXCEPTIONS
                cpe_not_active      = 1
                formula_not_found   = 2
                OTHERS              = 3.
            IF sy-subrc <> 0.
* Implement suitable error handling here
              CALL METHOD cl_message_mm=>create
                EXPORTING
                  im_msgid = lc_cpe_message_class
                  im_msgty = 'W' ##NO_TEXT
                  im_msgno = 804
*                 im_msgv1 = lv_msg_var_cpe_cond
*                 im_msgv2 = lv_msg_var_basis_cond
*                 im_msgv3 = lv_msg_var_period_start
*                 im_msgv4 = lv_msg_var_period_end
                EXCEPTIONS
                  failure  = 01
                  dialog   = 02.
              IF sy-subrc <> 0.
*              Error handling not neccessary so far
              ENDIF.
            ENDIF.
          ENDIF.

          CALL FUNCTION 'RV_KONDITION_SICHERN_V13A' IN UPDATE TASK
            EXPORTING
              change_docs_write = ls_bool
              use_outbound_call = ls_bool
            TABLES
              db_time           = lt_time
              db_xkonh          = ct_xkonh
              db_ykonh          = ct_ykonh
              db_xkonp          = ct_xkonp
              db_ykonp          = ct_ykonp
              db_xkonpt         = ct_xkonpt
              db_xstaf          = ct_xscale
              db_ystaf          = ct_yscale
              db_xkondat        = ct_xkondat
              db_ykondat        = ct_ykondat
              db_xvake          = lt_xvake.
        ELSE.
          "Call in sync

* Commodity Management, handling of CPE conditions
          IF lv_cpe_condition_used = abap_true.
* Error - CPE function modules are only called IN UPDATE TASK
          ENDIF.

          CALL FUNCTION 'RV_KONDITION_SICHERN_V13A'
            EXPORTING
              change_docs_write = ls_bool
              use_outbound_call = ls_bool
            TABLES
              db_time           = lt_time
              db_xkonh          = ct_xkonh
              db_ykonh          = ct_ykonh
              db_xkonp          = ct_xkonp
              db_ykonp          = ct_ykonp
              db_xkonpt         = ct_xkonpt
              db_xstaf          = ct_xscale
              db_ystaf          = ct_yscale
              db_xkondat        = ct_xkondat
              db_ykondat        = ct_ykondat
              db_xvake          = lt_xvake.
        ENDIF.
      END-TEST-SEAM.
      ASSIGN cr_cond_record->* TO <lt_cond_record>.
      LOOP AT <lt_cond_record> ASSIGNING FIELD-SYMBOL(<ls_cond_record>)
        WHERE knumh(2) EQ gc_temporaer.
        TRY.
            change_condition_id(
              EXPORTING
                iv_knumh_old = <ls_cond_record>-knumh
              IMPORTING
                ev_knumh_new = <ls_cond_record>-knumh ).
          CATCH cx_cnd_maint_ltd_exception ##NO_HANDLER.
        ENDTRY.
      ENDLOOP.
      ASSIGN cr_cond_scale->* TO <lt_cond_scale>.
      IF <lt_cond_scale> IS ASSIGNED.
        LOOP AT <lt_cond_scale> INTO ls_cond_scale.
          IF ls_cond_scale-knumh(2) EQ gc_temporaer.
            TRY.
                change_condition_id(
                  EXPORTING
                    iv_knumh_old = ls_cond_scale-knumh
                  IMPORTING
                    ev_knumh_new = ls_cond_scale-knumh ).
              CATCH cx_cnd_maint_ltd_exception ##NO_HANDLER.
            ENDTRY.
            INSERT ls_cond_scale INTO TABLE lt_cond_scale.
          ELSE.
            INSERT ls_cond_scale INTO TABLE lt_cond_scale.
          ENDIF.
        ENDLOOP.
        <lt_cond_scale> = lt_cond_scale.
      ENDIF.
      ASSIGN cr_cond_text->* TO <lt_cond_text>.
      IF <lt_cond_text> IS ASSIGNED.
        LOOP AT <lt_cond_text> INTO ls_cond_text.
          IF ls_cond_text-knumh(2) EQ gc_temporaer.
            TRY.
                change_condition_id(
                  EXPORTING
                    iv_knumh_old = ls_cond_text-knumh
                  IMPORTING
                    ev_knumh_new = ls_cond_text-knumh ).
              CATCH cx_cnd_maint_ltd_exception ##NO_HANDLER.
            ENDTRY.
            INSERT ls_cond_text INTO TABLE lt_cond_text.
          ELSE.
            INSERT ls_cond_text INTO TABLE lt_cond_text.
          ENDIF.
        ENDLOOP.
        <lt_cond_text> = lt_cond_text.
      ENDIF.
    ENDIF.

** Call of function module for updating the budgets           "THV: Not supported yet
*  CALL FUNCTION 'RKE_POST_COMMITMENT_TABLES'.

** Update multidimensional freight rate condition record numbers      "THV: Not supported yet
** and export data to memory.
*  CALL FUNCTION 'SD_CHANGE_COND_REC_NUMBER'
*    EXPORTING
*      i_knumh     = i_knumh
*    TABLES
*      t_knumh_map = knumh_map
*      t_konp      = xkonp.
*
** Update multidimensional freight rate
*  CALL FUNCTION 'SD_RATES_SAVE'
*    EXPORTING
*      i_opt_update_task   = 'X'
*      i_opt_memory_import = 'X'
*    EXCEPTIONS
*      import_failed       = 1
*      OTHERS              = 0.

* Call of function module for updating the condition indices
*  DESCRIBE TABLE index_new LINES entries.                    "THV: Not supported yet
*  IF entries = 0.
*    DESCRIBE TABLE index_old LINES entries.
*  ENDIF.
*  IF entries NE 0.
*    CALL FUNCTION 'SD_COND_INDEX_POST' IN UPDATE TASK
*      EXPORTING
*        pi_kvewe  = xkonh-kvewe
*      TABLES
*        pi_komgfn = index_new
*        pi_komgfo = index_old.
*  ENDIF.

    " --> Assign condition record number to the new genearted condition record for overlap case
    CLEAR: lv_overlap_index.
    LOOP AT ct_adj_overlap_cndnrecd ASSIGNING FIELD-SYMBOL(<fs_adj_overlap_cndnrecd>).
      lv_overlap_index = sy-tabix.
      IF <fs_adj_overlap_cndnrecd>-knumh(2) = gc_temporaer.
        TRY.
            change_condition_id(
              EXPORTING
                iv_knumh_old = <fs_adj_overlap_cndnrecd>-knumh
              IMPORTING
                ev_knumh_new = <fs_adj_overlap_cndnrecd>-knumh ).
          CATCH cx_cnd_maint_ltd_exception.
            DELETE ct_adj_overlap_cndnrecd INDEX lv_overlap_index.
        ENDTRY.
      ENDIF.
    ENDLOOP.

    CLEAR: lv_overlap_index.
    LOOP AT ct_org_overlap_cndnrecd ASSIGNING FIELD-SYMBOL(<fs_org_overlap_cndnrecd>).
      lv_overlap_index = sy-tabix.
      IF <fs_org_overlap_cndnrecd>-knumh(2) = gc_temporaer.
        TRY.
            change_condition_id(
              EXPORTING
                iv_knumh_old = <fs_org_overlap_cndnrecd>-knumh
              IMPORTING
                ev_knumh_new = <fs_org_overlap_cndnrecd>-knumh ).
          CATCH cx_cnd_maint_ltd_exception.
            DELETE ct_org_overlap_cndnrecd INDEX lv_overlap_index.
        ENDTRY.
      ENDIF.
    ENDLOOP.
    " <-- End.

    FREE mt_knumh_map.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_time_vake.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    DATA:
      lt_cond_record_key TYPE cndt_condition_key,
      lt_time_vake       TYPE if_cnd_maint_ltd_types=>ty_vake_t.

*   Initialize export parameters
    CLEAR et_time_vake.

*   Work on all condition keys (sorted)
    LOOP AT it_cond_record_key ASSIGNING FIELD-SYMBOL(<ls_cond_record_key>).

      CHECK <ls_cond_record_key>-kvewe EQ 'A'.

      AT NEW kotabnr.
        CLEAR lt_cond_record_key.
        DATA(lv_kvewe) = <ls_cond_record_key>-kvewe.
        DATA(lv_kotabnr) = <ls_cond_record_key>-kotabnr.
      ENDAT.

      APPEND INITIAL LINE TO lt_cond_record_key ASSIGNING FIELD-SYMBOL(<ls_cond_key>).
      MOVE-CORRESPONDING <ls_cond_record_key> TO <ls_cond_key>.

      AT END OF kotabnr.

        get_time_vake_from_db(
          EXPORTING
            iv_kvewe           = lv_kvewe
            iv_kotabnr         = lv_kotabnr
            it_cond_record_key = lt_cond_record_key
          IMPORTING
            et_time_vake = lt_time_vake ).

        IF lt_time_vake IS NOT INITIAL.
          IF et_time_vake IS INITIAL.
            et_time_vake = lt_time_vake.
          ELSE.
            APPEND LINES OF lt_time_vake TO et_time_vake.  "ET_TIME_VAKE is automatically sorted
          ENDIF.
        ENDIF.

      ENDAT.

    ENDLOOP.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sls_cndn_app_flag.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    rv_flag = mv_sls_cndn_app_flag.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sales_supplement_text.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_slsprcgcndnsupplementtext
      INTO TABLE @et_supplement_text
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sales_supplement.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_slsprcgcndnrecdsuplmnt
      INTO TABLE @et_supplement
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sales_scales.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_slsprcgcndnrecordscale
      INTO TABLE @et_scales
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sales_conditionrecord_text.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_slsprcgconditionrecordtext
      INTO TABLE @et_condition_record_text
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_sales_conditionrecord.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_slsprcgconditionrecord
      INTO TABLE @et_condition_record
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_purchase_supplement.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_purgprcgcndnrecdsuplmnt
      INTO TABLE @et_supplement
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_purchase_scales.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_purgprcgcndnrecordscale
      INTO TABLE @et_scales
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_purchase_conditionrecord.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK NOT it_knumh_sel IS INITIAL.

    SELECT * FROM i_purgprcgconditionrecord
      INTO TABLE @et_condition_record
       FOR ALL ENTRIES IN @it_knumh_sel
     WHERE conditionrecord = @it_knumh_sel-knumh
     ORDER BY PRIMARY KEY.
  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_konw.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    CHECK NOT it_knumh_sel IS INITIAL.
    SELECT * FROM konw INTO TABLE et_konw
                       FOR ALL ENTRIES IN it_knumh_sel
                       WHERE knumh = it_knumh_sel-knumh
                       ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_konpt.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CHECK it_knumh_sel IS NOT INITIAL.
    IF iv_spras IS INITIAL.
      SELECT * FROM konpt INTO TABLE et_konpt FOR ALL ENTRIES IN it_knumh_sel
       WHERE knumh = it_knumh_sel-knumh
       ORDER BY PRIMARY KEY.

    ELSE.
      SELECT * FROM konpt INTO TABLE et_konpt FOR ALL ENTRIES IN it_knumh_sel
       WHERE knumh = it_knumh_sel-knumh AND spras = iv_spras
       ORDER BY PRIMARY KEY.
    ENDIF.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_konp.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    CHECK NOT it_knumh_sel IS INITIAL.
    SELECT * FROM konp INTO TABLE et_konp
                       FOR ALL ENTRIES IN it_knumh_sel
                       WHERE knumh = it_knumh_sel-knumh
                       ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_konm.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    CHECK NOT it_knumh_sel IS INITIAL.
    SELECT * FROM konm INTO TABLE et_konm
                       FOR ALL ENTRIES IN it_knumh_sel
                       WHERE knumh = it_knumh_sel-knumh
                       ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_konh.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    CHECK NOT it_knumh_sel IS INITIAL.
    SELECT * FROM konh INTO TABLE et_konh
                       FOR ALL ENTRIES IN it_knumh_sel
                       WHERE knumh = it_knumh_sel-knumh
                       ORDER BY PRIMARY KEY.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_cond_record_by_query.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    DATA:
      lr_cond        TYPE REF TO data,
      lv_tabix_char  TYPE char1,
      lv_by_knumh    TYPE char1,
      ls_cond_record TYPE ty_vkon_cond_record_s,
      ls_komg        TYPE komg,
      ls_selstate    TYPE sline72,
      lt_selstate    TYPE TABLE OF sline72,
      ls_knumh       TYPE knumh_sty.
    DATA lt_selran_1       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_2       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_3       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_4       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_5       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_6       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_7       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_8       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_9       TYPE ty_cond_selran_t ##NEEDED.
    DATA lt_selran_10      TYPE ty_cond_selran_t ##NEEDED.

    FIELD-SYMBOLS:
      <lt_cond>   TYPE STANDARD TABLE,
      <ls_cond>   TYPE any,
      <lt_selran> TYPE ty_cond_selran_t.

    CLEAR: et_cond_record,
           et_knumh.

    DATA(ls_cond_query) = is_cond_query.
* Read T681
    TRY.
        IF ls_cond_query-kvewe NE if_cnd_maint_ltd_types=>c_usage_pricing.
          RETURN.
        ENDIF.
        IF ls_cond_query-kotabnr IS INITIAL OR ls_cond_query-kschl IS INITIAL.
          get_kotabnr_kschl_from_konh( CHANGING cs_cond_query = ls_cond_query ).
        ENDIF.
        DATA(ls_t681)  = mo_dep_mgr->get_t681( iv_kvewe = ls_cond_query-kvewe iv_kotabnr = ls_cond_query-kotabnr ).
        DATA(lt_tmc1k) = mo_dep_mgr->get_tmc1k( iv_kotab = ls_t681-kotab ).
      CATCH cx_cnd_maint_ltd_exception.
        RETURN.
    ENDTRY.

* Create select statement
    LOOP AT ls_cond_query-t_selopt ASSIGNING FIELD-SYMBOL(<ls_selopt>).
      lv_tabix_char = sy-tabix.
      IF <ls_selopt>-fieldname <> if_cnd_maint_ltd_types=>c_fieldname_condition_key.
        READ TABLE lt_tmc1k TRANSPORTING NO FIELDS
          WITH KEY qufna = <ls_selopt>-fieldname.
        IF sy-subrc <> 0.
          CONTINUE. "Ignore fields, that do not belong to the condition table
        ENDIF.
      ELSE.
        lv_by_knumh = abap_true.
      ENDIF.
      CONCATENATE 'LT_SELRAN_' lv_tabix_char INTO DATA(lv_selran_tabname).
      CLEAR ls_selstate.
      DATA(lv_fieldname) = cl_abap_dyn_prg=>escape_quotes( <ls_selopt>-fieldname ). "prevent SQL injection
      IF lt_selstate IS INITIAL.
        CONCATENATE lv_fieldname 'IN' lv_selran_tabname INTO ls_selstate SEPARATED BY space.
      ELSE.
        CONCATENATE 'AND' lv_fieldname 'IN' lv_selran_tabname INTO ls_selstate SEPARATED BY space.
      ENDIF.
      APPEND ls_selstate TO lt_selstate.
*   Fill corresponding selran table
      ASSIGN (lv_selran_tabname) TO <lt_selran>.
      <lt_selran> = <ls_selopt>-t_selran.
    ENDLOOP.

* Now, select the data
    CREATE DATA lr_cond TYPE STANDARD TABLE OF (ls_t681-kotab).
    ASSIGN lr_cond->* TO <lt_cond>.
    TRY.
        DATA(lv_kotab) = cl_abap_dyn_prg=>check_whitelist_tab( val = ls_t681-kotab whitelist = mt_whitelist ).
      CATCH cx_abap_not_in_whitelist.
        RETURN.
    ENDTRY.
    TRY.
        IF ls_t681-ksdat EQ abap_true.
          TEST-SEAM select_with_date.
            IF ls_cond_query-datam_to IS NOT INITIAL AND ls_cond_query-datam_from IS NOT INITIAL.
              SELECT * FROM (lv_kotab) INTO TABLE <lt_cond> BYPASSING BUFFER "#EC CI_DYNTAB
                       WHERE kappl =  ls_cond_query-kappl
                       AND   kschl =  ls_cond_query-kschl
                       AND   datab <= ls_cond_query-datam_to
                       AND   datbi >= ls_cond_query-datam_from
                       AND   (lt_selstate)             "#EC CI_DYNWHERE
                       ORDER BY PRIMARY KEY.
            ELSE.
              IF lv_by_knumh EQ abap_true.
                SELECT * FROM (lv_kotab) INTO TABLE <lt_cond> BYPASSING BUFFER "#EC CI_DYNTAB
                        WHERE kappl =  ls_cond_query-kappl
                        AND   (lt_selstate)            "#EC CI_DYNWHERE
                        ORDER BY PRIMARY KEY.
              ELSE.
                SELECT * FROM (lv_kotab) INTO TABLE <lt_cond> BYPASSING BUFFER "#EC CI_DYNTAB
                        WHERE kappl =  ls_cond_query-kappl
                        AND   kschl =  ls_cond_query-kschl
                        AND   (lt_selstate)            "#EC CI_DYNWHERE
                        ORDER BY PRIMARY KEY.
              ENDIF.
            ENDIF.
          END-TEST-SEAM.
        ELSE.
          TEST-SEAM select_without_date.
            SELECT * FROM (lv_kotab) INTO TABLE <lt_cond> BYPASSING BUFFER "#EC CI_DYNTAB
                    WHERE kappl =  ls_cond_query-kappl
                    AND   kschl =  ls_cond_query-kschl
                    AND   (lt_selstate)                "#EC CI_DYNWHERE
                    ORDER BY PRIMARY KEY.
          END-TEST-SEAM.
        ENDIF.
      CATCH cx_sy_dynamic_osql_semantics
            cx_sy_dynamic_osql_syntax
            cx_sy_dynamic_osql_error
            cx_sy_open_sql_data_error.
        RETURN.
    ENDTRY.

* Fill returning table
    LOOP AT <lt_cond> ASSIGNING <ls_cond>.

      CLEAR ls_cond_record.
      MOVE-CORRESPONDING <ls_cond> TO ls_cond_record.
      ls_cond_record-kvewe = ls_cond_query-kvewe.
      ls_cond_record-kotabnr = ls_cond_query-kotabnr.

*   To be on the save side, the key fields are redetermined
      MOVE-CORRESPONDING <ls_cond> TO ls_komg.
      mo_util->map_komg_to_key_fields(
        EXPORTING
          iv_kvewe      = ls_cond_query-kvewe
          iv_kotabnr    = ls_cond_query-kotabnr
          is_komg       = ls_komg
        IMPORTING
          et_key_fields = ls_cond_record-key_fields ).

      mo_util->map_komg_to_data_fields(
        EXPORTING
          iv_kvewe       = ls_cond_query-kvewe
          iv_kotabnr     = ls_cond_query-kotabnr
          is_komg        = ls_komg
        IMPORTING
          et_data_fields = ls_cond_record-data_fields ).

*   Fill some additional fields
      ls_cond_record-datam = ls_cond_record-datab.

*   Now append
      APPEND ls_cond_record TO et_cond_record.

*   Prepare KONP mass select
      ls_knumh-knumh = ls_cond_record-knumh.
      INSERT ls_knumh INTO TABLE et_knumh.

    ENDLOOP.

  ENDMETHOD.


  METHOD if_cnd_maint_ltd_db~get_cond_records_by_query.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
*********************************************************************************
* Multiple conditions from one table will be constructed of one WHERE clause
* connected with OR expression. e.g. MATNR from A304/ VKORG from A304
* WHERE clause shall be: MATNR OR VKORG
* If these conditions connected with AND, they shall be included in one record
*********************************************************************************
    FIELD-SYMBOLS:
      <fs_t_cond_result>       TYPE STANDARD TABLE,
      <fs_t_cond_export_table> TYPE STANDARD TABLE,
      <fs_s_cond_export_line>  TYPE any.
    DATA: lr_cond_result      TYPE REF TO data,
          lr_cond_export_line TYPE REF TO data,
          lv_count            TYPE i,
          ls_knumh            TYPE knumh_sty,
          lv_from             TYPE string,
          lv_oncon            TYPE string,
          lv_cds              TYPE string,
          lv_where            TYPE string.

    CLEAR: er_cndn_valdty,
           et_knumh,
           es_cndn_count.

    " Construct dynamical table to store condition validity - Optimize SQL and avoid exhaused memory issue
    build_dynamic_table(
      EXPORTING
        iv_appl       = is_cndn_criteria_header-kappl
      IMPORTING
        er_table_type = er_cndn_valdty
    ).
    IF er_cndn_valdty IS NOT BOUND.
      RETURN.
    ENDIF.

    ASSIGN er_cndn_valdty->* TO <fs_t_cond_export_table>.
    IF <fs_t_cond_export_table> IS ASSIGNED.
      REFRESH <fs_t_cond_export_table>.
    ENDIF.

    CREATE DATA lr_cond_export_line LIKE LINE OF <fs_t_cond_export_table>.
    ASSIGN lr_cond_export_line->* TO <fs_s_cond_export_line>.

    " Build Range - one time one condition table with multiple records allowed('OR' relationship)
    LOOP AT it_cndn_criteria_item ASSIGNING FIELD-SYMBOL(<fs_cndn_field_query>).
      IF <fs_cndn_field_query> IS ASSIGNED.

        " Check condition table is not initial
        IF <fs_cndn_field_query>-kotabnr IS INITIAL OR is_t681-kotabnr IS INITIAL.
          RETURN.
        ENDIF.
      ENDIF.
    ENDLOOP.

    " Build table FROM
    TRY .
        CREATE DATA lr_cond_result TYPE STANDARD TABLE OF (is_t681-kotab).
        IF <fs_t_cond_result> IS NOT ASSIGNED.
          ASSIGN lr_cond_result->* TO <fs_t_cond_result>.
        ENDIF.

      CATCH cx_sy_create_data_error.
        RETURN.
    ENDTRY.

    " Check whitelist of A tables
    TRY.
        DATA(lv_kotab) = cl_abap_dyn_prg=>check_whitelist_tab( val = is_t681-kotab whitelist = mt_whitelist ).
      CATCH cx_abap_not_in_whitelist.
        RETURN.
    ENDTRY.

    "F4111 Mange Prices - Sales app
    IF mv_sls_cndn_app_flag = abap_true.
      lv_where = fiori_app_where_clause( it_cndn_criteria_item ).
    ELSE.
      " Build where condition only for condition fields
      TRY.
          build_where_for_cndnfld(
            EXPORTING
              iv_kappl            = is_cndn_criteria_header-kappl
              it_cndn_field_query = it_cndn_criteria_item
              is_t681             = is_t681
            IMPORTING
              ev_where            = lv_where
              ).
        CATCH cx_cnd_maint_ltd_exception.
          IF lv_where IS INITIAL.
            RETURN.
          ENDIF.
      ENDTRY.
    ENDIF.

    " Get Condition type and corresponding condition table
    IF is_cndn_criteria_header-kappl = if_cnd_maint_ltd_types=>c_kappl_v.
      mo_dep_mgr->get_t685_t682i(
        EXPORTING
          iv_kvewe  = if_ct_constants=>c_usage_pricing
          iv_kappl  = if_ct_constants=>c_application_sales
        IMPORTING
          et_contab = mt_condition_table
      ).
      lv_cds = 'I_SlsPrcgConditionRecord'.
    ELSEIF is_cndn_criteria_header-kappl = if_cnd_maint_ltd_types=>c_kappl_m.
      mo_dep_mgr->get_t685_t682i(
        EXPORTING
          iv_kvewe  = if_ct_constants=>c_usage_pricing
          iv_kappl  = if_ct_constants=>c_application_purg
        IMPORTING
          et_contab = mt_condition_table
      ).
      lv_cds = 'I_PurgPrcgConditionRecord'.
    ENDIF.

    IF mt_condition_table IS NOT INITIAL.
      TRY.
          " Build final where clause for all the conditions
          build_where_condition(
            EXPORTING
              is_t681                 = is_t681                  " Conditions: Structures
              is_cndn_criteria_header = is_cndn_criteria_header
            CHANGING
              cv_where_condition      = lv_where
          ).

          "Consider price table with condition table together, and deletion flag
          "Example: SELECT * FROM A304 INNER JOIN I_SlsPrcgConditionRecord ON A304~KNUMH = I_SlsPrcgConditionRecord~ConditionRecord
          "          WHERE KSCHL = 'PSP0' AND I_SlsPrcgConditionRecord~ConditionIsDeleted = ''
          "FROM
          CLEAR: lv_from,lv_oncon.
          CONCATENATE lv_kotab '~KNUMH' INTO lv_from.
          CONCATENATE lv_cds '~ConditionRecord' INTO lv_oncon.
          CONCATENATE lv_from '=' lv_oncon INTO lv_oncon SEPARATED BY space.

          CLEAR lv_from.
          CONCATENATE lv_kotab ' INNER JOIN ' lv_cds ' ON ' lv_oncon
                 INTO lv_from SEPARATED BY space.

          "WHERE
          DATA(lrt_record) = mo_util->get_excluded_records( ).
          IF lrt_record IS NOT INITIAL.
            "Excluded records, eg. draft record in Manage Price - Sales app
            CLEAR:lv_oncon.
            CONCATENATE lv_cds '~ConditionRecord' INTO lv_oncon.
            CONCATENATE lv_where ' AND ' lv_oncon ' IN @lrt_record '
                   INTO lv_where SEPARATED BY space.
          ENDIF.
          IF is_cndn_criteria_header-exclude_deleted = abap_true. "not contain deleted record
            CLEAR:lv_oncon.
            CONCATENATE lv_cds '~ConditionIsDeleted' INTO lv_oncon.
            CONCATENATE lv_where ' AND ' lv_oncon ' = '''' '
                   INTO lv_where SEPARATED BY space.
          ENDIF.

          " Prevent SQL injection
          lv_where = cl_abap_dyn_prg=>escape_quotes_str( val = lv_where ).

          " Build query option for SQL clause
          build_sql_clause_for_qry_optn(
            EXPORTING
              is_cndn_query_option    = is_cndn_query_option
              it_cndn_orderby         = it_cndn_orderby
              iv_condition_table      = is_t681-kotab
            IMPORTING
              ev_orderby_condition    = DATA(lv_orderby_condition)
              ev_count_relevant       = DATA(lv_count_relevant)   " ABAP_TRUE means COUNT is in the query option
          ).

          " Build SQL Dynamically
          IF lv_count_relevant = abap_true.                       " $Count
            " COUNT relevant
            SELECT COUNT(*) FROM (lv_from)               "#EC CI_DYNTAB
                   WHERE (lv_where)                    "#EC CI_DYNWHERE
                   INTO @lv_count.

          ELSE.
            DATA(lv_package_size) = is_cndn_query_option-prcgqueryoptiontop + is_cndn_query_option-prcgqueryoptionskip.
            IF is_cndn_query_option-prcgqueryoptiontop <> 0.      " $Top (Orderby, Skip)

              SELECT * FROM (lv_from)                    "#EC CI_DYNTAB
                WHERE (lv_where)                       "#EC CI_DYNWHERE
                ORDER BY (lv_orderby_condition)
                INTO CORRESPONDING FIELDS OF TABLE @<fs_t_cond_result>
                UP TO @lv_package_size ROWS.

            ELSEIF is_cndn_query_option-prcgqueryoptionskip = 0.  " $Orderby
              " Entries are more than 200, without $SKIP
              SELECT * FROM (lv_from)                    "#EC CI_DYNTAB
                WHERE (lv_where)                       "#EC CI_DYNWHERE
                ORDER BY (lv_orderby_condition)
                INTO CORRESPONDING FIELDS OF TABLE @<fs_t_cond_result>
                UP TO @is_cndn_query_option-prcgqueryoptiontop ROWS.
            ELSE.                                                 " $Skip
              " Process $SKIP Combination
              SELECT * FROM (lv_from)                    "#EC CI_DYNTAB
                WHERE (lv_where)                       "#EC CI_DYNWHERE
                INTO CORRESPONDING FIELDS OF TABLE @<fs_t_cond_result>.
            ENDIF.
          ENDIF.

          " $INLINECOUNT
          IF is_cndn_query_option-prcgqueryoptioninlinecount IS NOT INITIAL.
            SELECT COUNT(*) FROM (lv_from)               "#EC CI_DYNTAB
                   WHERE (lv_where)                    "#EC CI_DYNWHERE
                   INTO @es_cndn_count-inlinecount.
          ENDIF.

          es_cndn_count-count = lv_count.
          CLEAR: lv_where.
        CATCH cx_sy_sql_error INTO DATA(lr_ex).
          RETURN.
      ENDTRY.

      " Fill returning table
      LOOP AT <fs_t_cond_result> ASSIGNING FIELD-SYMBOL(<fs_cond_result>).

        MOVE-CORRESPONDING <fs_cond_result> TO <fs_s_cond_export_line>.

        " Make output table is dynamic
        ASSIGN COMPONENT if_cnd_maint_ltd_util=>c_kvewe OF STRUCTURE <fs_s_cond_export_line>
        TO FIELD-SYMBOL(<fs_kvewe>).
        IF <fs_kvewe> IS ASSIGNED.
          <fs_kvewe> = c_pricing_usage.
        ENDIF.

        ASSIGN COMPONENT if_cnd_maint_ltd_util=>c_kotabnr OF STRUCTURE <fs_s_cond_export_line>
        TO FIELD-SYMBOL(<fs_kotabnr>).
        IF <fs_kotabnr> IS ASSIGNED.
          <fs_kotabnr> = is_t681-kotabnr.
        ENDIF.

        ASSIGN COMPONENT if_cnd_maint_ltd_util=>c_knumh OF STRUCTURE <fs_s_cond_export_line>
        TO FIELD-SYMBOL(<fs_knumh>).
        IF <fs_knumh> IS ASSIGNED.
          ls_knumh-knumh = <fs_knumh>.
        ENDIF.

        APPEND <fs_s_cond_export_line> TO <fs_t_cond_export_table>.

        INSERT ls_knumh INTO TABLE et_knumh.

      ENDLOOP.

      CLEAR: <fs_t_cond_result>.
    ENDIF.

  ENDMETHOD.


  METHOD get_time_vake_from_db.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    DATA:
      lr_cond          TYPE REF TO data,
      lr_cond_key      TYPE REF TO data,
      lv_com_fname(50),
      ls_komg          TYPE komg,
      ls_time_vake     TYPE vake,
      lt_selstate      TYPE sd_cond_t_sline72.

    FIELD-SYMBOLS:
      <ls_cond>     TYPE any,
      <lt_cond>     TYPE STANDARD TABLE,
      <lt_cond_key> TYPE STANDARD TABLE.

*   Initialize export parameters
    CLEAR et_time_vake.

    TRY.
*       Read T681
        DATA(ls_t681) = mo_dep_mgr->get_t681( iv_kotabnr = iv_kotabnr iv_kvewe = iv_kvewe ).
        IF ls_t681-ksdat IS INITIAL.
          RAISE EXCEPTION TYPE cx_cnd_maint_ltd_exception.
        ENDIF.
        DATA(lt_tmc1k) = mo_dep_mgr->get_tmc1k( iv_kotab = ls_t681-kotab ).
*       prevent SQL injections
        DATA(lv_kotab)  = cl_abap_dyn_prg=>check_whitelist_tab( val = ls_t681-kotab whitelist = mt_whitelist ).
      CATCH cx_cnd_maint_ltd_exception cx_abap_not_in_whitelist.
        RETURN.
    ENDTRY.

*   Fill the key table <LT_COND_KEY>
    CREATE DATA lr_cond_key TYPE STANDARD TABLE OF (lv_kotab).
    ASSIGN lr_cond_key->* TO <lt_cond_key>.

    LOOP AT it_cond_record_key ASSIGNING FIELD-SYMBOL(<ls_cond_record_key>).

      APPEND INITIAL LINE TO <lt_cond_key> ASSIGNING FIELD-SYMBOL(<ls_cond_key>).
*     Map from key fields to komg
      mo_util->map_key_fields_to_komg(
        EXPORTING
          it_key_fields = <ls_cond_record_key>-key_fields
        IMPORTING
          es_komg       = ls_komg ).
      MOVE-CORRESPONDING ls_komg TO <ls_cond_key>.
      MOVE-CORRESPONDING <ls_cond_record_key> TO <ls_cond_key>.

    ENDLOOP.

*   Build static part of the select statement
    APPEND INITIAL LINE TO lt_selstate ASSIGNING FIELD-SYMBOL(<ls_selstate>).
    <ls_selstate>-line72 = 'KAPPL = <LT_COND_KEY>-KAPPL'.
    APPEND INITIAL LINE TO lt_selstate ASSIGNING <ls_selstate>.
    <ls_selstate>-line72 = 'AND KSCHL = <LT_COND_KEY>-KSCHL'.

*   Build dynamic part of the select statement
    LOOP AT lt_tmc1k ASSIGNING FIELD-SYMBOL(<ls_tmc1k>).

      APPEND INITIAL LINE TO lt_selstate ASSIGNING <ls_selstate>.
      DATA(lv_fieldname) = cl_abap_dyn_prg=>escape_quotes( <ls_tmc1k>-qufna ). "prevent SQL injection
      CONCATENATE '<LT_COND_KEY>-' lv_fieldname INTO lv_com_fname.
      CONCATENATE 'AND' lv_fieldname
                  INTO <ls_selstate>-line72
                  SEPARATED BY space.
      APPEND INITIAL LINE TO lt_selstate ASSIGNING <ls_selstate>.
      CONCATENATE '= ' lv_com_fname
                  INTO <ls_selstate>-line72
                  SEPARATED BY space.

    ENDLOOP.

*   Now, select the data
    CREATE DATA lr_cond TYPE STANDARD TABLE OF (lv_kotab).
    ASSIGN lr_cond->* TO <lt_cond>.
    TEST-SEAM select_all_conditions.
      SELECT * FROM (lv_kotab) INTO TABLE <lt_cond> BYPASSING BUFFER "#EC CI_DYNTAB
                                    FOR ALL ENTRIES IN <lt_cond_key>
                                    WHERE (lt_selstate)
                                    ORDER BY PRIMARY KEY. "#EC CI_DYNWHERE
    END-TEST-SEAM.

*   Fill export table ET_TIME_VAKE
    LOOP AT <lt_cond> ASSIGNING <ls_cond>.
      CLEAR ls_time_vake.
      MOVE-CORRESPONDING <ls_cond> TO ls_time_vake.
      ls_time_vake-kvewe = iv_kvewe.
      ls_time_vake-kotabnr = iv_kotabnr.
*     To be on the save side, the key fields are redetermined
      MOVE-CORRESPONDING <ls_cond> TO ls_komg.
      CALL FUNCTION 'SD_CONDITION_VAKEY_FILL'
        EXPORTING
          p_kotabnr = iv_kotabnr
          p_kvewe   = iv_kvewe
          p_komg    = ls_komg
        IMPORTING
          p_vakey   = ls_time_vake-vakey
        EXCEPTIONS
          OTHERS    = 0.
*     Now append
      APPEND ls_time_vake TO et_time_vake.
    ENDLOOP.

  ENDMETHOD.


  METHOD get_kotabnr_kschl_from_konh.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

*   try to derive data from existing KONH entry
    READ TABLE cs_cond_query-t_selopt ASSIGNING FIELD-SYMBOL(<ls_selopt>)
      WITH KEY fieldname = if_cnd_maint_ltd_types=>c_fieldname_condition_key.
    IF sy-subrc = 0.
*     get the KONH record for the key
      if_cnd_maint_ltd_db~get_konh(
        EXPORTING
          it_knumh_sel = VALUE #( ( knumh = <ls_selopt>-t_selran[ 1 ]-low ) )
        IMPORTING
          et_konh      = DATA(lt_konh) ).
      TRY.
          DATA(ls_konh) = lt_konh[ 1 ].
          cs_cond_query-kotabnr = ls_konh-kotabnr.
          IF cs_cond_query-kschl IS INITIAL.
            cs_cond_query-kschl = ls_konh-kschl.
          ENDIF.
        CATCH cx_sy_itab_line_not_found ##NO_HANDLER .
      ENDTRY.
    ENDIF.

  ENDMETHOD.


  METHOD get_instance.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    IF mo_self IS INITIAL.
      mo_self = NEW #( ).
    ENDIF.
    ro_db = mo_self.
  ENDMETHOD.


  METHOD get_condition_id.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    DATA:
      ls_knumh_map TYPE knumh_map_sty.

* Determination of the new number
    TEST-SEAM number_get_next.
      CALL FUNCTION 'NUMBER_GET_NEXT'
        EXPORTING
          nr_range_nr = '01'
          object      = 'KONH'
        IMPORTING
          number      = ev_knumh_new.
    END-TEST-SEAM.

* Store relation of old number and new number in internal table
    ls_knumh_map-knumh_old = iv_knumh_old.
    ls_knumh_map-knumh_new = ev_knumh_new.
    READ TABLE mt_knumh_map TRANSPORTING NO FIELDS
                            WITH TABLE KEY knumh_old = ls_knumh_map-knumh_old.
    IF sy-subrc EQ 0.
*   Number already assigned
      RAISE EXCEPTION TYPE cx_cnd_maint_ltd_exception
        MESSAGE e003(cnd_maint_ltd_api) WITH iv_knumh_old.
    ELSE.
      INSERT ls_knumh_map INTO TABLE mt_knumh_map.
    ENDIF.

  ENDMETHOD.


  METHOD fiori_app_where_clause.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    CONSTANTS:c_single_quote TYPE string VALUE ''''.
    TYPES:BEGIN OF ty_sql,
            fieldname  TYPE fieldname,
            sql        TYPE string,
            fieldcount TYPE i,
            fieldunion TYPE string,
          END OF ty_sql.
    DATA: lv_where       TYPE string,
          lv_where_field TYPE string,
          lv_low         TYPE string,
          lv_high        TYPE string,
          lv_fieldunion  TYPE string.

    DATA:lt_sql        TYPE TABLE OF ty_sql,
         lt_sql_fields TYPE TABLE OF ty_sql,
         lt_fields     TYPE TABLE OF ty_sql,
         ls_sql        TYPE ty_sql.

    CLEAR rv_where.
    LOOP AT it_cndn_criteria_item INTO DATA(ls_item).
      CLEAR lt_sql_fields.
      LOOP AT ls_item-t_selopt INTO DATA(ls_selopt).
        CLEAR ls_sql.
        ls_sql-fieldname = ls_selopt-field_name.

        IF ls_selopt-sign = 'E'.
          ls_selopt-sign = 'I'.
          CASE ls_selopt-option.
            WHEN 'EQ'.
              ls_selopt-option = 'NE'.
            WHEN 'NE'.
              ls_selopt-option = 'EQ'.
            WHEN 'BT'.
              ls_selopt-option = 'NB'.
            WHEN 'NB'.
              ls_selopt-option = 'BT'.
            WHEN 'CP'.
              ls_selopt-option = 'NP'.
            WHEN 'NP'.
              ls_selopt-option = 'CP'.
            WHEN 'LT'.
              ls_selopt-option = 'GE'.
            WHEN 'GE'.
              ls_selopt-option = 'LT'.
            WHEN 'GT'.
              ls_selopt-option = 'LE'.
            WHEN 'LE'.
              ls_selopt-option = 'GT'.
          ENDCASE.
        ENDIF.

        CONCATENATE c_single_quote ls_selopt-low  c_single_quote INTO lv_low.
        CONCATENATE c_single_quote ls_selopt-high c_single_quote INTO lv_high.
        CASE ls_selopt-option.
          WHEN 'BT'.
            CONCATENATE ls_selopt-field_name 'GE' lv_low  'AND' ls_selopt-field_name 'LE' lv_high INTO ls_sql-sql SEPARATED BY space.
          WHEN 'NB'.
            CONCATENATE ls_selopt-field_name 'GE' lv_low  'AND' ls_selopt-field_name 'LE' lv_high INTO ls_sql-sql SEPARATED BY space.
            CONCATENATE 'NOT (' ls_sql-sql ')' INTO ls_sql-sql SEPARATED BY space.
          WHEN 'CP'.
            REPLACE ALL OCCURRENCES OF '*' IN lv_low WITH '%'.
            CONCATENATE ls_selopt-field_name 'LIKE' lv_low INTO ls_sql-sql SEPARATED BY space.
          WHEN 'NP'.
            REPLACE ALL OCCURRENCES OF '*' IN lv_low WITH '%'.
            CONCATENATE 'NOT' ls_selopt-field_name 'LIKE' lv_low INTO ls_sql-sql SEPARATED BY space.
          WHEN OTHERS.
            CONCATENATE ls_selopt-field_name ls_selopt-option lv_low INTO ls_sql-sql SEPARATED BY space.
        ENDCASE.

        READ TABLE lt_sql_fields ASSIGNING FIELD-SYMBOL(<fs_sql>) WITH KEY fieldname = ls_sql-fieldname.
        IF sy-subrc EQ 0.
          CONCATENATE <fs_sql>-sql 'AND' ls_sql-sql INTO <fs_sql>-sql SEPARATED BY space.
        ELSE.
          APPEND ls_sql TO lt_sql_fields.
        ENDIF.
      ENDLOOP.

      DATA(lt_fields_union) = lt_sql_fields.
      SORT lt_fields_union BY fieldname.               "#EC CI_SORTLOOP
      DELETE ADJACENT DUPLICATES FROM lt_fields_union COMPARING fieldname.

      CLEAR lv_fieldunion.
      LOOP AT lt_fields_union INTO ls_sql.
        IF lv_fieldunion IS INITIAL.
          lv_fieldunion = ls_sql-fieldname.
        ELSE.
          CONCATENATE lv_fieldunion ls_sql-fieldname INTO lv_fieldunion SEPARATED BY space.
        ENDIF.
      ENDLOOP.

      DATA(lv_fieldcount) = lines( lt_sql_fields ).
      LOOP AT lt_sql_fields INTO ls_sql.
        READ TABLE lt_sql WITH KEY fieldname  = ls_sql-fieldname
                                   sql        = ls_sql-sql
                                   fieldcount = lv_fieldcount
                                   fieldunion = lv_fieldunion TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          ls_sql-fieldcount = lv_fieldcount.
          ls_sql-fieldunion = lv_fieldunion.
          APPEND ls_sql TO lt_sql.
        ENDIF.

        READ TABLE lt_fields WITH KEY fieldname  = ls_sql-fieldname
                                      fieldcount = lv_fieldcount
                                      fieldunion = lv_fieldunion TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          CLEAR ls_sql-sql.
          ls_sql-fieldcount = lv_fieldcount.
          ls_sql-fieldunion = lv_fieldunion.
          APPEND ls_sql TO lt_fields.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    "When create new record in app, the second query will contain one more field (knumh)
    DATA(lt_fieldcounts) = lt_fields.
    SORT lt_fieldcounts BY fieldunion fieldcount.
    DELETE ADJACENT DUPLICATES FROM lt_fieldcounts COMPARING fieldunion fieldcount.

    LOOP AT lt_fieldcounts INTO DATA(ls_fieldcount).
      CLEAR lv_where.
      LOOP AT lt_fields INTO DATA(ls_field) WHERE fieldcount = ls_fieldcount-fieldcount
                                              AND fieldunion = ls_fieldcount-fieldunion.
        CLEAR lv_where_field.
        LOOP AT lt_sql INTO ls_sql WHERE fieldname  = ls_field-fieldname
                                     AND fieldcount = ls_field-fieldcount
                                     AND fieldunion = ls_field-fieldunion.
          IF lv_where_field IS INITIAL.
            lv_where_field = ls_sql-sql.
          ELSE.
            CONCATENATE lv_where_field 'OR' ls_sql-sql INTO lv_where_field SEPARATED BY space.
          ENDIF.
        ENDLOOP.

        IF lv_where IS INITIAL.
          CONCATENATE '(' lv_where_field ')' INTO lv_where SEPARATED BY space.
        ELSE.
          CONCATENATE lv_where 'AND' '(' lv_where_field ')' INTO lv_where SEPARATED BY space.
        ENDIF.
      ENDLOOP.

      IF rv_where IS INITIAL.
        rv_where = lv_where.
      ELSE.
        CONCATENATE rv_where 'OR' lv_where INTO rv_where SEPARATED BY space.
      ENDIF.
    ENDLOOP.

    CONCATENATE '(' rv_where ')' INTO rv_where SEPARATED BY space.
  ENDMETHOD.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

    mo_dep_mgr = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_util = cl_cnd_maint_ltd_util=>get_instance( ).

    DATA(lt_kotab) = mo_dep_mgr->get_kotab( ).

    LOOP AT lt_kotab ASSIGNING FIELD-SYMBOL(<ls_kotab>).
      INSERT CONV #( <ls_kotab> ) INTO TABLE mt_whitelist.
    ENDLOOP.

  ENDMETHOD.


  METHOD check_xkonp.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    " KONMS and KONWS have to be initial, if KZBZG is initial
    IF cs_xkonp-kzbzg IS INITIAL.
      CLEAR: cs_xkonp-konms, cs_xkonp-konws.
    ENDIF.
  ENDMETHOD.


  METHOD change_condition_id.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*

* Determination of number from temporary number
    READ TABLE mt_knumh_map ASSIGNING FIELD-SYMBOL(<ls_knumh_map>)
                             WITH TABLE KEY knumh_old = iv_knumh_old.

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE cx_cnd_maint_ltd_exception
        MESSAGE e002(cnd_maint_ltd_api) WITH 'MT_KNUMH_MAP' 'CHANGE_CONDITION_ID' 'CHANGE_CONDITION_ID'.
    ENDIF.
    ev_knumh_new = <ls_knumh_map>-knumh_new.

  ENDMETHOD.


  METHOD build_where_for_cndnfld.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    DATA: lt_sel_tab TYPE ty_sel_tab_t,
          ls_sel_tab TYPE sel_table.
    DATA: lt_where      TYPE ty_where_tab_t,
          lt_where_temp TYPE ty_where_tab_t,
          lv_where      TYPE string.

    CLEAR: ev_where.

    " Build WHERE dynamically
    LOOP AT it_cndn_field_query ASSIGNING FIELD-SYMBOL(<fs_cndn_field_query>).

      REFRESH lt_sel_tab.
      LOOP AT <fs_cndn_field_query>-t_selopt ASSIGNING FIELD-SYMBOL(<fs_selopt>).
        CLEAR: ls_sel_tab.
        ls_sel_tab-field = <fs_selopt>-field_name.
        ls_sel_tab-high = <fs_selopt>-high.
        ls_sel_tab-low = <fs_selopt>-low.
        ls_sel_tab-option = <fs_selopt>-option.
        ls_sel_tab-sign = <fs_selopt>-sign.
        ls_sel_tab-table = is_t681-kotab.
        APPEND ls_sel_tab TO lt_sel_tab.
      ENDLOOP.

      " Call Function module to get WHERE table
      CLEAR lt_where_temp.
      TRY.
          mo_util->convert_select_option_to_where(
            EXPORTING
              iv_kappl            = iv_kappl
              iv_select_tablename = is_t681-kotab
              it_select_fields    = lt_sel_tab
            IMPORTING
              et_where_cond       = lt_where_temp
          ).
        CATCH cx_cnd_maint_ltd_exception.
          CONTINUE.
      ENDTRY.

      " Build OR expression for search fields
      IF lt_where_temp IS NOT INITIAL.
        IF lt_where IS NOT INITIAL.
          APPEND 'OR' TO lt_where.
        ENDIF.

        APPEND LINES OF lt_where_temp TO lt_where.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_where ASSIGNING FIELD-SYMBOL(<ls_where>).
      CONCATENATE lv_where  <ls_where> INTO lv_where SEPARATED BY space.
    ENDLOOP.

    IF lv_where IS NOT INITIAL.
      CONCATENATE '(' lv_where ')' INTO ev_where SEPARATED BY space.
    ENDIF.

  ENDMETHOD.


  METHOD build_where_condition.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
    DATA: lv_kappl                   TYPE string,   " Application
          lv_datam_from              TYPE string,   " Valid from
          lv_kschl                   TYPE string,   " Condition type statement
          lv_kschl_convert           TYPE string,   " Condition type value with escape character
          lv_appl_cndntype_condition TYPE string,   " Application and condition type statement
          lv_count                   TYPE i,
          ls_condition_table         TYPE if_cnd_maint_ltd_dep=>contab_s,
          lv_datam_to                TYPE string.

    CONCATENATE '''' is_cndn_criteria_header-kappl '''' INTO lv_kappl.
    CONCATENATE '''' is_cndn_criteria_header-datam_from '''' INTO lv_datam_from.
    CONCATENATE '''' is_cndn_criteria_header-datam_to '''' INTO lv_datam_to.

    " Get Condition Type
    LOOP AT mt_condition_table INTO ls_condition_table WHERE kvewe = if_ct_types=>c_usage_pricing
                                                         AND kappl = is_cndn_criteria_header-kappl
                                                         AND kotabnr = is_t681-kotabnr.
      lv_count = lv_count + 1.

      " Condition Type Value
      CONCATENATE '''' ls_condition_table-kschl '''' INTO lv_kschl_convert.

      IF lv_count <> 1.
        CONCATENATE lv_kschl 'OR' INTO lv_kschl SEPARATED BY space.
      ENDIF.

      IF lv_kschl IS INITIAL.
        CONCATENATE '( KSCHL =' lv_kschl_convert INTO lv_kschl SEPARATED BY space.
      ELSE.
        CONCATENATE lv_kschl 'KSCHL =' lv_kschl_convert INTO lv_kschl SEPARATED BY space.
      ENDIF.

      CLEAR: lv_kschl_convert.
    ENDLOOP.

    CONCATENATE lv_kschl ')' INTO lv_kschl SEPARATED BY space.

    CLEAR: lv_count.

    " Consolidate the basic conditions with application and condition type
    CONCATENATE 'KAPPL =' lv_kappl 'AND' lv_kschl INTO lv_appl_cndntype_condition SEPARATED BY space.

    IF is_t681-ksdat EQ abap_true.
      IF is_cndn_criteria_header-datam_from IS INITIAL AND is_cndn_criteria_header-datam_to IS INITIAL.

        " Handle WHERE condition is initial
        IF cv_where_condition IS INITIAL.

          " Only push APPLICATION in where condition
          cv_where_condition = lv_appl_cndntype_condition.

        ELSE.
          " Build where clause base on condition fields
          CONCATENATE lv_appl_cndntype_condition 'AND' cv_where_condition INTO cv_where_condition SEPARATED BY space.

        ENDIF.
      ELSEIF is_cndn_criteria_header-datam_from IS INITIAL AND is_cndn_criteria_header-datam_to IS NOT INITIAL.

        " Handle WHERE condition is initial
        IF cv_where_condition IS INITIAL.

          " Build APPLICATION and VALIDITY as where condition
          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_to
            'AND DATBI >=' lv_datam_to
            INTO cv_where_condition SEPARATED BY space.
        ELSE.
          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_to
            'AND DATBI >=' lv_datam_to 'AND' cv_where_condition
            INTO cv_where_condition SEPARATED BY space.
        ENDIF.

      ELSEIF is_cndn_criteria_header-datam_from IS NOT INITIAL AND is_cndn_criteria_header-datam_to IS INITIAL.

        " Handle WHERE condition is initial
        IF cv_where_condition IS INITIAL.
          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_from
            'AND DATBI >=' lv_datam_from
            INTO cv_where_condition SEPARATED BY space.

        ELSE.
          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_from
            'AND DATBI >=' lv_datam_from 'AND' cv_where_condition
            INTO cv_where_condition SEPARATED BY space.

        ENDIF.

      ELSEIF is_cndn_criteria_header-datam_from IS NOT INITIAL AND is_cndn_criteria_header-datam_to IS NOT INITIAL.
        " Handle WHERE condition is initial
        IF cv_where_condition IS INITIAL.

          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_to
            'AND DATBI >=' lv_datam_from
            INTO cv_where_condition SEPARATED BY space.

        ELSE.
          CONCATENATE lv_appl_cndntype_condition 'AND DATAB <=' lv_datam_to
            'AND DATBI >=' lv_datam_from 'AND' cv_where_condition
            INTO cv_where_condition SEPARATED BY space.

        ENDIF.
      ENDIF.

    ELSE.

      " Get data from condition table without validity fields, if the validity criteria is initial
      IF is_cndn_criteria_header-datam_from IS INITIAL AND is_cndn_criteria_header-datam_to IS INITIAL.

        " Handle WHERE condition is initial
        IF cv_where_condition IS INITIAL.
          cv_where_condition = lv_appl_cndntype_condition.

        ELSE.
          CONCATENATE lv_appl_cndntype_condition 'AND' cv_where_condition
            INTO cv_where_condition SEPARATED BY space.

        ENDIF.
      ENDIF.
    ENDIF.
    CLEAR: lv_kschl, lv_appl_cndntype_condition.
  ENDMETHOD.


  METHOD build_sql_clause_for_qry_optn.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
* Build SQL clause for query option

    DATA:
      ls_orderby_field          TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_orderby_field_s,
      lt_orderby_for_cndn_table TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_orderby_field_t,
      lv_orderby_string         TYPE string.

    CLEAR: ev_orderby_condition, ev_count_relevant.

    " $ORDERBY
    IF is_cndn_query_option-prcgqueryoptionorderby IS NOT INITIAL.

      LOOP AT it_cndn_orderby INTO ls_orderby_field WHERE conditiontable = iv_condition_table.
        APPEND ls_orderby_field TO lt_orderby_for_cndn_table.
      ENDLOOP.

      CLEAR: ls_orderby_field.

      DESCRIBE TABLE lt_orderby_for_cndn_table LINES DATA(lv_orderby_count).

      LOOP AT lt_orderby_for_cndn_table INTO ls_orderby_field.

        IF ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_asc.
          ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_asc_sql.
        ELSEIF ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_desc.
          ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_desc_sql.
        ENDIF.

        IF sy-tabix = 1.
          CONCATENATE ls_orderby_field-sortfield ls_orderby_field-sortsequence
          INTO lv_orderby_string SEPARATED BY space.

        ELSE.

          CONCATENATE lv_orderby_string ls_orderby_field-sortfield ls_orderby_field-sortsequence
          INTO lv_orderby_string SEPARATED BY space.
        ENDIF.

        IF sy-tabix < lv_orderby_count.
          CONCATENATE lv_orderby_string if_cnd_maint_ltd_types=>c_comma
          INTO lv_orderby_string SEPARATED BY space.

        ENDIF.
      ENDLOOP.
    ENDIF.

    " $COUNT
    IF is_cndn_query_option-queryoptioncountisset IS NOT INITIAL .
      ev_count_relevant = abap_true.
    ENDIF.

    ev_orderby_condition = lv_orderby_string.

  ENDMETHOD.


  METHOD build_dynamic_table.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
* BOBRULA      | 10.05.2023 | 21168     : Pricing upload app fix       *
*              |            | DS4K951960                               *
*----------------------------------------------------------------------*

**********************************************************************
* Build output table dynamically to avoid exhausted memory issue
**********************************************************************
    DATA: lv_tabname  TYPE tabname16.

    " Identify SQL view name
    IF iv_appl = if_cnd_maint_ltd_types=>c_kappl_v.
      lv_tabname = c_sales_validity_view_name.
    ELSEIF iv_appl = if_cnd_maint_ltd_types=>c_kappl_m.
      lv_tabname = c_purg_validity_view_name.
    ENDIF.

    mo_util->create_dynamic_table(
      EXPORTING
        iv_tabname          = CONV #( lv_tabname )       " Table name
        i_length_in_byte    = abap_true                  " Boolean Variable (X = True, - = False, Space = Unknown)
        iv_incld_addi_field = abap_true
      IMPORTING
        er_table            = er_table_type
    ).
  ENDMETHOD.
ENDCLASS.