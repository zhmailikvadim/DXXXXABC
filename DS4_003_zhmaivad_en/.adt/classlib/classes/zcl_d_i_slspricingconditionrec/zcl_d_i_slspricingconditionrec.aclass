class ZCL_D_I_SLSPRICINGCONDITIONREC definition
  public
  inheriting from /BOBF/CL_LIB_D_SUPERCL_SIMPLE
  final
  create public .

public section.

  methods CONSTRUCTOR .

  methods /BOBF/IF_FRW_DETERMINATION~EXECUTE
    redefinition .
  PROTECTED SECTION.
private section.

  types:
    ty_field_mandatory_buffer_t TYPE SORTED TABLE OF t682z_nobli WITH NON-UNIQUE KEY kvewe kappl kozgf zifna .
  types:
    BEGIN OF ty_tabfield_s,
          tabname   TYPE dd03l-tabname,
          fieldname TYPE dd03l-fieldname,
          position  TYPE dd03l-position,
        END OF ty_tabfield_s .
  types:
    ty_tabfield_t TYPE STANDARD TABLE OF ty_tabfield_s .
  types:
    ty_keyfield_t TYPE STANDARD TABLE OF ZI_SlsPrcgKeyCombinationField .

  data MO_COND_DEPENDENCY type ref to IF_CND_MAINT_LTD_DEP .
  data MO_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MO_SVC_MNGR type ref to /BOBF/IF_TRA_SERVICE_MANAGER .
  data MT_FIELD_MANDATORY_BUFFER type TY_FIELD_MANDATORY_BUFFER_T .
  data MT_FIELDS type TY_TABFIELD_T .
  data MT_KEYFIELD type TY_KEYFIELD_T .

  methods IS_FIELD_MANDATORY
    importing
      !IV_KVEWE type KVEWE
      !IV_KAPPL type KAPPL
      !IV_KSCHL type KSCHL
      !IV_KOTABNR type KOTABNR
      !IV_FIELDNAME type FIELDNAME
    returning
      value(RV_IS_MANDATORY) type ABAP_BOOL .
  methods CHECK_UOM_CONVERSION
    importing
      !IS_COND_RECORD type ZSISLSPRICINGCONDITIONRECORDT
    returning
      value(RV_HAS_CONVERSION) type ABAP_BOOL .
ENDCLASS.



CLASS ZCL_D_I_SLSPRICINGCONDITIONREC IMPLEMENTATION.


  METHOD /bobf/if_frw_determination~execute.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    " The condition records' data is typed with BO node's combined table type
    CONSTANTS:c_dollar_sign_double  TYPE string VALUE '$$',
              c_dollar_sign_single  TYPE string VALUE '$',
              c_seqno_initial       TYPE kopos VALUE '00',
              c_seqno_record        TYPE kopos VALUE '01',
              c_condition_usage     TYPE kvewe VALUE 'A',
              c_condition_app_sales TYPE kappl VALUE 'V',
              c_read_only           TYPE char20 VALUE 'READ_ONLY',
              c_enabled             TYPE char20 VALUE 'ENABLED',
              c_mandatory           TYPE char20 VALUE 'MANDATORY'.
    TYPES:BEGIN OF ty_fields_access,
            tabname                       TYPE dd03l-tabname,
            conditiontable                TYPE kotabnr,
            conditionfieldname            TYPE dd03l-fieldname,
            position                      TYPE dd03l-position,
            conditiontype                 TYPE kschl,
            accessnumberofaccesssequence  TYPE kolnr,
            action                        TYPE char20,
            fieldcontrol                  TYPE char20,
            prcgcndnvalueinitialisallowed TYPE kzini,
          END OF ty_fields_access.
    DATA: lt_record            TYPE ZTISLSPRICINGCONDITIONRECORDT,
          ls_record            TYPE ZSISLSPRICINGCONDITIONRECORDT,
          lt_wlf_mp_fields     TYPE STANDARD TABLE OF wlf_mp_fields,
          lt_wlf_mp_fields_tmp TYPE STANDARD TABLE OF wlf_mp_fields,
          ls_wlf_mp_fields     TYPE wlf_mp_fields,
          lv_tabix             TYPE sy-tabix,
          lt_fields            TYPE ty_tabfield_t,
          ls_fields            TYPE ty_tabfield_s,
          lt_fields_access     TYPE TABLE OF ty_fields_access,
          ls_fields_access     TYPE ty_fields_access.

    FIELD-SYMBOLS: <fs_value> TYPE any.
    "(1) Retrieve the data of the node instance
    io_read->retrieve(
      EXPORTING
        iv_node  = is_ctx-node_key    " uuid of the node instance
        it_key   = it_key             " keys given to the determination
        iv_before_image = abap_false
      IMPORTING
        et_data = lt_record ).

*    "(2) Create a property helper object
    DATA(lo_property_helper) = NEW /bobf/cl_lib_h_set_property(
                                 io_modify = io_modify
                                 is_context = is_ctx ).

    mo_cond_dependency->get_wlf_mp_fields(
*        iv_bor_obj_spec  = 'BUS30110'       " Object Type
*        iv_map_data_cat  = 'B'              " Mapping Data Category
      IMPORTING
        et_wlf_mp_fields = lt_wlf_mp_fields_tmp " Mapping external to internal fields
    ).
    SORT lt_wlf_mp_fields_tmp BY ext_fieldname.
    DELETE ADJACENT DUPLICATES FROM lt_wlf_mp_fields_tmp COMPARING ext_fieldname.

    IF mt_fields IS INITIAL.
      SELECT tabname fieldname
        FROM dd03l
        INTO CORRESPONDING FIELDS OF TABLE mt_fields
       WHERE tabname IN ( 'ZCSLSPRCGCNDNRTP', 'ZISLSPRCGCNDNVA', 'SDPRCG_CNDNR' )
         AND as4local = 'A'.
      DELETE mt_fields WHERE fieldname = 'MANDT'.
    ENDIF.
    MOVE-CORRESPONDING mt_fields TO lt_fields.
    DATA(lt_fields_atab) = mt_fields.
    DELETE lt_fields_atab WHERE tabname <> 'ZISLSPRCGCNDNVA'.
    SORT lt_fields_atab BY fieldname.
    DELETE ADJACENT DUPLICATES FROM lt_fields_atab COMPARING fieldname.

    DATA(lt_fields_nona) = mt_fields.
    LOOP AT lt_fields_atab INTO ls_fields.
      DELETE lt_fields_nona WHERE fieldname = ls_fields-fieldname.
    ENDLOOP.
    SORT lt_fields_nona BY fieldname.
    DELETE ADJACENT DUPLICATES FROM lt_fields_nona COMPARING fieldname.

    SORT lt_fields BY fieldname.
    DELETE ADJACENT DUPLICATES FROM lt_fields COMPARING fieldname.

*If InitialValueAllowed is abap_true, then the field ConditionFieldName is not required
    IF NOT lt_record IS INITIAL.
      DATA(lt_record_k) = lt_record.
      SORT lt_record_k BY conditiontype.
      DELETE ADJACENT DUPLICATES FROM lt_record_k COMPARING conditiontype.
      LOOP AT lt_record_k INTO DATA(ls_record_k).
        READ TABLE mt_keyfield WITH KEY conditiontype = ls_record_k-conditiontype
                               TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          DELETE lt_record_k WHERE conditiontype = ls_record_k-conditiontype.
        ENDIF.
      ENDLOOP.
      IF NOT lt_record_k IS INITIAL.
        SELECT conditiontype,
               conditiontable,
               accessnumberofaccesssequence,
               conditionfieldname,
               prcgcndnvalueinitialisallowed
          FROM zi_slsprcgkeycombinationfield
           FOR ALL ENTRIES IN @lt_record_k
         WHERE conditiontype = @lt_record_k-conditiontype
         APPENDING CORRESPONDING FIELDS OF TABLE @mt_keyfield.
        SORT mt_keyfield BY conditiontype conditiontable
                            accessnumberofaccesssequence conditionfieldname.
      ENDIF.
      MOVE-CORRESPONDING mt_keyfield TO lt_fields_access.
      LOOP AT lt_fields_access INTO ls_fields_access.
        READ TABLE lt_record WITH KEY conditiontype = ls_fields_access-conditiontype
                             TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE lt_fields_access WHERE conditiontype = ls_fields_access-conditiontype.
        ELSE.
          TRANSLATE ls_fields_access-conditionfieldname TO UPPER CASE.
          MODIFY lt_fields_access FROM ls_fields_access.
        ENDIF.
      ENDLOOP.
    ENDIF.

*   "(3) Set properties of attributes
    LOOP AT lt_record INTO ls_record.
**For active-based draft data
      IF ls_record-conditionrecord IS NOT INITIAL AND
         ls_record-conditionrecord(2) NE c_dollar_sign_double."'$$'.

        LOOP AT lt_fields INTO ls_fields.
          IF ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionvaliditystartdate
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionvalidityenddate
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionratevalue
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionexclusion
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-additionalvaluedays
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-fixedvaluedate
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontext
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-paymentterms
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionlowerlimit
          OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionupperlimit.
            lo_property_helper->set_attribute_enabled(
                 iv_attribute_name = CONV #( ls_fields-fieldname )
                 iv_key            = ls_record-key
                 iv_value          = abap_true ).
          ELSE.
            lo_property_helper->set_attribute_read_only(
                 iv_attribute_name = CONV #( ls_fields-fieldname )
                 iv_key            = ls_record-key
                 iv_value          = abap_true ).
          ENDIF.
        ENDLOOP.
      ELSE.
***For totally new Draft data: condition record starts with $$
        LOOP AT lt_fields INTO ls_fields.
          "Condition record and sequentialnumber must be read-only
          IF ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionrecord OR
            ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionsequentialnumber.
            lo_property_helper->set_attribute_read_only(
                 iv_attribute_name = CONV #( ls_fields-fieldname )
                 iv_key            = ls_record-key
                 iv_value          = abap_true ).
            CONTINUE.
          ENDIF.

          "ConditionType, ConditionTable, ConditionValidityStartDate, ConditionValidityEndDate are editiable
          IF ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontype
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontable
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionvaliditystartdate
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionvalidityenddate
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionexclusion
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-additionalvaluedays
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-fixedvaluedate
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontext
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-paymentterms
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionlowerlimit
            OR ls_fields-fieldname = ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionupperlimit.
            lo_property_helper->set_attribute_enabled(
                 iv_attribute_name = CONV #( ls_fields-fieldname )
                 iv_key            = ls_record-key
                 iv_value          = abap_true ).
            CONTINUE.
          ENDIF.

          "Fields not in any A tables are editable
          READ TABLE lt_fields_nona WITH KEY fieldname = ls_fields-fieldname TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            IF ( ls_fields-fieldname EQ ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-baseunit ).
              lo_property_helper->set_attribute_read_only(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              " numerator and denominator are enabled when calculationtype is for quantity type and material is exist.
            ELSEIF ( ls_fields-fieldname EQ ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontobaseqtynmrtr
               OR ls_fields-fieldname EQ ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditiontobaseqtydnmntr ).
              IF ( ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity OR ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity_daily
               OR ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity_weekly OR ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity_monthly
               OR ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity_yearly OR ls_record-conditioncalculationtype EQ if_pricing_calculation_types=>c_quantity_adjustment )
               AND check_uom_conversion( EXPORTING is_cond_record = ls_record ) EQ abap_false.
                lo_property_helper->set_attribute_enabled(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              ELSE.
                lo_property_helper->set_attribute_read_only(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              ENDIF.
            ELSEIF ( ls_fields-fieldname EQ ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionquantity
                  OR ls_fields-fieldname EQ ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_node_attribute-zi_slspricingconditionrecordtp-conditionquantityunit )
              AND ( ls_record-conditioncalculationtype IS NOT INITIAL )
              AND ( mo_cond_dependency->is_uom_dependent( ls_record-conditioncalculationtype ) = abap_false OR
                    ls_record-conditioncalculationtype = if_pricing_calculation_types=>c_quantity_adjustment ).
              lo_property_helper->set_attribute_read_only(
                 iv_attribute_name = CONV #( ls_fields-fieldname )
                 iv_key            = ls_record-key
                 iv_value          = abap_true ).
            ELSE.
              lo_property_helper->set_attribute_enabled(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
            ENDIF.
            CONTINUE.
          ENDIF.

          "Configuration of A table (tcode V/07) is not satisfied, set read-only
          "e.g. a) field Material can be initial configured in V/07
          "        for conition type PSP0 with condtion table A4AJ and accessnumber 010, set read-only
          "     b) Customer is a field for condition type PSP0, but not a field of table A304, set read-only
          "        DepartureCountry is not a field for condition type PSP0, set read-only
          READ TABLE lt_fields_atab WITH KEY fieldname = ls_fields-fieldname TRANSPORTING NO FIELDS BINARY SEARCH.
          IF sy-subrc = 0.
            IF NOT lt_fields_access IS INITIAL AND NOT ls_record-conditiontype IS INITIAL
              AND NOT ls_record-accessnumberofaccesssequence IS INITIAL.
              CLEAR ls_fields_access.
              READ TABLE lt_fields_access INTO ls_fields_access
                                          WITH KEY conditionfieldname = CONV #( ls_fields-fieldname )
                                                   conditiontype = ls_record-conditiontype
                                                   accessnumberofaccesssequence  = ls_record-accessnumberofaccesssequence.
              IF sy-subrc <> 0 OR sy-subrc = 0 AND ls_fields_access-prcgcndnvalueinitialisallowed = abap_true.
                ASSIGN COMPONENT ls_fields-fieldname OF STRUCTURE ls_record TO FIELD-SYMBOL(<fs_key>).
                IF <fs_key> IS ASSIGNED.
                  CLEAR <fs_key>.
                ENDIF.
                lo_property_helper->set_attribute_read_only(
                     iv_attribute_name = CONV #( ls_fields-fieldname )
                     iv_key            = ls_record-key
                     iv_value          = abap_true ).
                CONTINUE.
              ENDIF.
              CLEAR ls_fields_access.
            ELSEIF NOT lt_fields_access IS INITIAL AND NOT ls_record-conditiontype IS INITIAL
              AND ls_record-accessnumberofaccesssequence IS INITIAL.
              DATA(lt_fields_access_tmp) = lt_fields_access.
              DELETE lt_fields_access_tmp WHERE conditiontype <> ls_record-conditiontype.
              IF NOT ls_record-conditiontable IS INITIAL.
                DELETE lt_fields_access_tmp WHERE conditiontable <> ls_record-conditiontable.
              ENDIF.
              READ TABLE lt_fields_access_tmp WITH KEY conditionfieldname = CONV #( ls_fields-fieldname )
                                                       conditiontype = ls_record-conditiontype TRANSPORTING NO FIELDS.
              IF sy-subrc <> 0.
                ASSIGN COMPONENT ls_fields-fieldname OF STRUCTURE ls_record TO <fs_key>.
                IF <fs_key> IS ASSIGNED.
                  CLEAR <fs_key>.
                ENDIF.
                lo_property_helper->set_attribute_read_only(
                     iv_attribute_name = CONV #( ls_fields-fieldname )
                     iv_key            = ls_record-key
                     iv_value          = abap_true ).
                CONTINUE.
              ENDIF.
            ENDIF.
          ENDIF.

          "mandatory fields in A table
          READ TABLE lt_wlf_mp_fields_tmp INTO DATA(ls_map) WITH KEY ext_fieldname = CONV #( ls_fields-fieldname ) BINARY SEARCH.
          IF sy-subrc = 0.
            DATA(lv_fieldname) = ls_map-int_fieldname.
          ELSE.
            lv_fieldname = ls_fields-fieldname.
          ENDIF.
          IF NOT ls_record-conditiontype IS INITIAL AND NOT ls_record-conditiontable IS INITIAL.
            IF is_field_mandatory( iv_kvewe     = c_condition_usage "'A'
                                   iv_kappl     = c_condition_app_sales "'V'
                                   iv_kschl     = ls_record-conditiontype
                                   iv_kotabnr   = ls_record-conditiontable
                                   iv_fieldname = CONV #( lv_fieldname ) ) EQ abap_true.

              lo_property_helper->set_attribute_mandatory(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              lo_property_helper->set_attribute_enabled(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              CONTINUE.
            ELSE.
              lo_property_helper->set_attribute_enabled(
                   iv_attribute_name = CONV #( ls_fields-fieldname )
                   iv_key            = ls_record-key
                   iv_value          = abap_true ).
              CONTINUE.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD check_uom_conversion.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:
      lv_matnr              TYPE matnr,
      lv_vkorg              TYPE vkorg,
      lv_vtweg              TYPE vtweg,
      lv_subrc              TYPE sysubrc,
      lv_unit_of_measure(3) TYPE c,
      lv_quan               TYPE f ##NEEDED.

    lv_unit_of_measure = is_cond_record-conditionquantityunit.
* Fill LV_MATNR, LV_VKORG, LV_VTWEG
    lv_matnr = is_cond_record-material.
    lv_vkorg = is_cond_record-salesorganization.
    lv_vtweg = is_cond_record-distributionchannel.
    rv_has_conversion = abap_true.
* material does not exist
    IF ( lv_matnr =  space OR lv_matnr CO '0' ) OR ( lv_unit_of_measure =  space OR lv_unit_of_measure CO '0' ).
      RETURN.

* material exists
    ELSE.
*   Fill LV_MEINS
      DATA(lv_meins) = mo_cond_dependency->get_meins( EXPORTING iv_matnr = lv_matnr ).
*   Fill LV_VRKME
      TEST-SEAM get_vrkme.
        DATA(lv_vrkme) = mo_cond_dependency->get_vrkme( EXPORTING iv_matnr = lv_matnr
                                                                  iv_vkorg = lv_vkorg
                                                                  iv_vtweg = lv_vtweg ).
      END-TEST-SEAM.

* qunatity unit = sales unit or base unit of measure
      IF lv_unit_of_measure = lv_vrkme OR
         lv_unit_of_measure = lv_meins.
        RETURN.
      ENDIF.

* check with unit of material master
      TEST-SEAM material_unit_conversion.
        CALL FUNCTION 'MATERIAL_UNIT_CONVERSION'
          EXPORTING
            matnr                = lv_matnr
            meinh                = lv_unit_of_measure
            meins                = lv_meins
          IMPORTING
            output               = lv_quan
          EXCEPTIONS ##FM_SUBRC_OK
            material_not_found   = 3
            conversion_not_found = 4
            meinh_not_found      = 8
            meins_missing        = 8
            no_meinh             = 8.
      END-TEST-SEAM.
* unit is valid
      IF sy-subrc EQ 4.
        rv_has_conversion = abap_false.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    super->constructor( ).

    mo_cond_dependency = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_util = cl_cnd_maint_ltd_util=>get_instance( ).
    mo_svc_mngr = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( ZIF_I_SLSPRICINGCONDITIONREC_C=>sc_bo_key ).
  ENDMETHOD.


  METHOD is_field_mandatory.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

*   by default condition table key fields are considered as mandatory fields
    rv_is_mandatory = abap_true.

*   get the access sequence
    DATA(lv_kozgf) = mo_cond_dependency->get_t685( iv_kappl = iv_kappl iv_kschl = iv_kschl )-kozgf.

*   check whether the information is buffered already
    IF NOT mt_field_mandatory_buffer IS INITIAL.
      READ TABLE mt_field_mandatory_buffer WITH KEY kvewe = iv_kvewe
                                                    kappl = iv_kappl
                                                    kozgf = lv_kozgf
                                                    zifna = iv_fieldname
                                                    nobli = abap_false
                                                    TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        rv_is_mandatory = abap_false.
        RETURN. "if the field is optional in any access it is not mandatory and we can stop here
      ENDIF.
    ELSE.
*   field was not in buffer already

*   get information about field being mandatory and optional
      mo_cond_dependency->get_mandatory_fields(
        EXPORTING
          iv_kvewe   = iv_kvewe
          iv_kappl   = iv_kappl
          iv_kozgf   = lv_kozgf
          iv_kotabnr = iv_kotabnr
        IMPORTING
          et_fields  = DATA(lt_fields) ).

*   check whether the field is flagged as 'not mandatory'
      READ TABLE lt_fields WITH KEY kvewe = iv_kvewe
                                    kappl = iv_kappl
                                    kozgf = lv_kozgf
                                    zifna = iv_fieldname
                                    nobli = abap_false
                                    TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        rv_is_mandatory = abap_false.
      ENDIF.

*   move the set to the buffer
      INSERT LINES OF lt_fields INTO TABLE mt_field_mandatory_buffer.
    ENDIF.
  ENDMETHOD.
ENDCLASS.