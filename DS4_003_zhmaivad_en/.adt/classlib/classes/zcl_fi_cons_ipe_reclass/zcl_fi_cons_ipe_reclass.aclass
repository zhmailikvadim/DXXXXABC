class ZCL_FI_CONS_IPE_RECLASS definition
  public
  final
  create public .

public section.

  interfaces IF_BADI_INTERFACE .
  interfaces IF_BADI_FINCS_CUST_CONSMON .
protected section.
private section.
ENDCLASS.



CLASS ZCL_FI_CONS_IPE_RECLASS IMPLEMENTATION.


    METHOD if_badi_fincs_cust_consmon~execute.
*This is an Example Implementation of Simple Sign-off Task. If all of the previous tasks
*in the Monitor are locked (or irrelevant), set the status of this task also to locked.

*      DATA: lt_tasks  TYPE fc02_t_cacti,
*            lv_status TYPE fc_status.
*
*      consolidationtaskstatus = '8'. "preset to error
*
*      CALL FUNCTION 'FC_GET_TASKS'
*        EXPORTING
*          e_dimen             = fc00_c_dimen_y1
*          e_itclg             = consolidationchartofaccounts
*          e_rvers             = consolidationversion
*          e_ryear             = fiscalyear
*          e_perid             = fiscalperiod
*        IMPORTING
*          it_cons_tasks       = lt_tasks
*        EXCEPTIONS
*          cacgr_are_different = 1
*          OTHERS              = 2.
*
*      IF sy-subrc <> 0.
*        EXIT.
*      ENDIF.
*
*      SORT lt_tasks BY seqnr.
*
*      DATA(lv_all_blocked) = abap_true.
*      LOOP AT lt_tasks ASSIGNING FIELD-SYMBOL(<ls_previous_task>). "check status of all previous tasks
*        IF <ls_previous_task>-cacti = consolidationtask.
*          EXIT.
*        ENDIF.
*
**Get status of the previous task
*        CALL FUNCTION 'FC_STATUS_REQUEST'
*          EXPORTING
*            e_dimen            = fc00_c_dimen_y1
*            e_itclg            = consolidationchartofaccounts
*            e_rvers            = consolidationversion
*            e_congr            = consolidationgroup
*            e_bunit            = consolidationgroup
*            e_ryear            = fiscalyear
*            e_perid            = fiscalperiod
*            e_cacti            = <ls_previous_task>-cacti
*            e_read_flag        = abap_true
*            e_status_calculate = abap_false
*            e_monitor_flag     = abap_true
*          IMPORTING
*            i_status_detail    = lv_status.
*
*        IF  lv_status <> '10'  "task blocked
*        AND lv_status <> '12'  "irrelevant
*        AND lv_status <> '15'. "blocked by user
*          lv_all_blocked = abap_false.
*          EXIT.
*        ENDIF.
*      ENDLOOP.
*
*      IF lv_all_blocked = abap_true.
*        consolidationtaskstatus = '10'. "task blocked
*      ENDIF.
      DATA: et_doc     TYPE fc05_t_pdoc_s4h_qfle,
            it_message TYPE fc05_t_message,
            ct_head    TYPE fc05_t_pdoc_head.
*          ls_Doc     LIKE LINE OF et_doc,
*          ls_head    LIKE LINE OF ct_head.

      et_doc = VALUE #( ( rbunit = 'DE01' ritem = '1101110000' sityp = 'S40' subit = '400' rtcur = 'EUR' rhcur = 'EUR'
      tsl = '100.00' hsl = '100.00' ksl = '100.00' segment = 'DE01105' zzmchan_gr = '1' zzbrand_gr = '11' )
      ( rbunit = 'DE01' ritem = '1101110000' sityp = 'S40' subit = '400' rtcur = 'EUR' rhcur = 'EUR'
      tsl = '100.00-' hsl = '100.00-' ksl = '100.00-' segment = 'DE01105' zzmchan_gr = '1' zzbrand_gr = '11' ) ).

      ct_head = VALUE #( ( docty = '21' s_cont-rlevl = '20' s_cont-nrrng = '20' rcongr = 'ITC2' sgtxt = 'TEST2' FROM = '1' TO = '2' ) ).

      CALL FUNCTION 'FC_DOCUMENT_POST3'
        EXPORTING
          e_rldnr    = 'Y1'
          e_itclg    = 'GC'
          e_dimen    = 'Y1'
          e_rvers    = '100'
          e_ryear    = '2021'
          e_perid    = '012'
*         E_RRCTY    =
*         ES_CONTROL =
          et_doc     = et_doc
        IMPORTING
          it_message = it_message
        CHANGING
          ct_head    = ct_head.

    ENDMETHOD.
ENDCLASS.