class ZCL_I_A_REQUESTFORAPPROVAL definition
  public
  inheriting from /BOBF/CL_LIB_A_SUPERCL_SIMPLE
  final
  create public .

public section.
methods CONSTRUCTOR .

  methods /BOBF/IF_FRW_ACTION~EXECUTE
    redefinition .
protected section.
private section.

  data MO_COND_CHECKS type ref to IF_CND_MAINT_LTD_CHECK .
  data MO_SLS_API type ref to IF_SLSPRCG_CNDNRECD_API .
  data MO_DEP type ref to IF_CND_MAINT_LTD_DEP .
  data MO_SERVICE_MANAGER type ref to /BOBF/IF_TRA_SERVICE_MANAGER .
  data MT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T .
  data MO_PRCG_UTIL type ref to IF_CNDNRECORD_PUBLIC_UTILITY .
  data MO_LTD_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MO_REQ_UTIL type ref to IF_CNDNRECORD_REQUEST_UTILITY .
  data MO_LTD_API type ref to IF_CND_MAINT_LTD_API .

  methods REQUEST_FOR_APPROVAL
    importing
      !IS_CTX type /BOBF/S_FRW_CTX_ACT
      !IT_KEY type /BOBF/T_FRW_KEY
      !IO_READ type ref to /BOBF/IF_FRW_READ
      !IO_MODIFY type ref to /BOBF/IF_FRW_MODIFY
      !IS_PARAMETERS type ref to DATA
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY
      !EV_STATIC_ACTION_FAILED type ABAP_BOOL
      !ET_DATA type INDEX TABLE
      !ET_DATA_LINK type /BOBF/T_FRW_ACT_EXP_DATA_LINK .
ENDCLASS.



CLASS ZCL_I_A_REQUESTFORAPPROVAL IMPLEMENTATION.


  method /BOBF/IF_FRW_ACTION~EXECUTE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
 DATA:lv_defined TYPE abap_bool,
       lv_active  TYPE abap_bool.
  CONSTANTS: lc_feature_toggle_id TYPE sftgl_ft_id VALUE 'SD_PRICE_APPROVAL_BASIC_FUNCTION'.

  lv_defined = cl_feature_toggle=>is_defined( lc_feature_toggle_id ).
  lv_active  = cl_feature_toggle=>is_active( lc_feature_toggle_id ).

  TEST-SEAM feature_toggle_fine.
  END-TEST-SEAM.

  IF lv_defined = abap_true AND lv_active = abap_true.
    request_for_approval(
      EXPORTING
        is_ctx                  = is_ctx
        it_key                  = it_key
        io_read                 = io_read
        io_modify               = io_modify
        is_parameters           = is_parameters
      IMPORTING
        eo_message              = eo_message
        et_failed_key           = et_failed_key
        ev_static_action_failed = ev_static_action_failed
        et_data                 = et_data
        et_data_link            = et_data_link
    ).
  ENDIF.
  endmethod.


 METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    super->constructor( ).
    mo_ltd_api = cl_cnd_maint_ltd_api_factory=>get_instance( )->get_api_instance( ).
    mo_sls_api = NEW zcl_slsprcg_cndnrecord_api( ).
    mo_dep = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_cond_checks = cl_cnd_maint_ltd_check_mgr=>get_instance( ).
    mo_service_manager = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( if_i_slspricingconditionreco_c=>sc_bo_key ).
    mo_prcg_util = cl_cndnrecord_public_utility=>get_instance( ).
    mo_ltd_util = cl_cnd_maint_ltd_util=>get_instance( ).
    mo_req_util ?= cl_cndnrecord_request_utility=>get_instance( ).
  ENDMETHOD.


METHOD request_for_approval.
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
  TYPES: BEGIN OF ty_record_wf,
           conditionrecord TYPE zc_slspricingconditionrecordtp-conditionrecord,
           id              TYPE string,
         END OF ty_record_wf.
  TYPES: BEGIN OF ty_keys,
           conditionrecord           TYPE zc_slspricingconditionrecordtp-conditionrecord,
           conditionsequentialnumber TYPE zc_slspricingconditionrecordtp-conditionsequentialnumber,
           conditionvalidityenddate  TYPE zc_slspricingconditionrecordtp-conditionvalidityenddate,
         END OF ty_keys.

  DATA: ls_keys                       TYPE ty_keys,
        lt_keys                       TYPE TABLE OF ty_keys,
        ls_set                        TYPE zc_slspricingconditionrecordtp,
        lt_failed_key                 TYPE /bobf/t_frw_key,
        lt_cndn_cds                   TYPE TABLE OF ZSISLSPRICINGCONDITIONRECORDT,
        ls_cndn_cds                   LIKE LINE OF lt_cndn_cds,
        lv_knumh                      TYPE knumh,
        lt_message                    TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
        ls_message                    TYPE symsg,
        lt_condition_record_c         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
        ls_condition_record           TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_s,
        ls_cndnrecord_criteria_header TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_header_s,
        lt_cndnrecord_criteria_item   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
        ls_cndnrecord_criteria_item   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_s,
        ls_cndnrecord_query_option    TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
        lt_condition_validity         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
        lt_condition_validity_c       TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
        lt_condition_record           TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
        ls_cndn_query_option_response TYPE if_slsprcg_cndnrecd_api_types=>ty_query_option_response_s,
        lr_data                       TYPE REF TO data,
        lt_uuid                       TYPE TABLE OF /bobf/uuid,
        lt_sim_result                 TYPE if_swf_flex_ifs_sim=>tt_sim_result,
        lt_sim_result_all             TYPE if_swf_flex_ifs_sim=>tt_sim_result,
        lv_num8                       TYPE n LENGTH 8,
        lv_dolorsign                  TYPE c VALUE '$',
        lv_knumh_temp                 TYPE knumh,
        lv_validitycount              TYPE i,
        lt_record_wf                  TYPE TABLE OF ty_record_wf,
        lr_cond_record                TYPE REF TO data,
        lr_cond_record_del            TYPE REF TO data,
        lt_cond_record                TYPE if_cnd_maint_ltd_types=>ty_cond_record_usage_a_t,
        lt_cond_record_del            TYPE if_cnd_maint_ltd_types=>ty_cond_record_usage_a_t,
        ls_cond_record                TYPE if_cnd_maint_ltd_types=>ty_cond_record_usage_a_s,
        lv_request_string             TYPE string,
        lv_priceapprovalrequest       TYPE priceapprovalrequest.

  DATA:ls_request TYPE sdslsprc_approval_request_s,
       lt_request TYPE TABLE OF sdslsprc_approval_request_s.

  CONSTANTS:cv_comma TYPE c VALUE ','.

  FIELD-SYMBOLS:
    <ls_parameters> TYPE sdprcg_conditionuuid,
    <fs_cds>        TYPE any.

  ev_static_action_failed = abap_false.
  ASSIGN is_parameters->* TO <ls_parameters>.
  IF NOT <ls_parameters> IS ASSIGNED OR <ls_parameters> IS INITIAL.
    ev_static_action_failed = abap_true.
    RETURN.
  ENDIF.

  IF eo_message IS NOT BOUND.
    eo_message = /bobf/cl_frw_message_factory=>create_container( ).
  ENDIF.

  CLEAR:et_data.
  lr_data = REF #( et_data ).

**Get the non-neccessary sign, e.g. '-'
  DATA(lv_uuid_str) = <ls_parameters>-conditionrecorduuid.
  DATA(lv_offset) = 0.
  DATA(lv_len) = 1.
  DATA(lv_strlen) = strlen( lv_uuid_str ).
  WHILE ( lv_strlen > lv_offset ).
    DATA(lv_link_sign) = lv_uuid_str+lv_offset(lv_len).
    IF lv_link_sign NA '0123456789'.
      EXIT.
    ELSE.
      lv_offset = lv_offset + lv_len.
      CLEAR:lv_link_sign.
    ENDIF.
  ENDWHILE.
  IF lv_link_sign <> cv_comma AND lv_link_sign <> space.
    REPLACE ALL OCCURRENCES OF lv_link_sign IN lv_uuid_str WITH space.
  ENDIF.
  CONDENSE lv_uuid_str NO-GAPS.
  SPLIT lv_uuid_str AT cv_comma INTO TABLE DATA(lt_uuid_char).
  lt_uuid = lt_uuid_char.
  lt_keys = CONV #( lt_uuid ).

  LOOP AT lt_keys INTO ls_keys.
    APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_keys-conditionrecord ) TO ls_cndnrecord_criteria_item-conditionrecord.
  ENDLOOP.
  APPEND ls_cndnrecord_criteria_item TO lt_cndnrecord_criteria_item.
  APPEND LINES OF lt_cndnrecord_criteria_item TO mt_cndnrecord_criteria_item.

**get DB data
  TRY.
      mo_sls_api->get_condition_record(
        EXPORTING
          is_cndnrecord_criteria_header = ls_cndnrecord_criteria_header
          it_cndnrecord_criteria_item   = lt_cndnrecord_criteria_item
          is_cndnrecord_query_option    = ls_cndnrecord_query_option
        IMPORTING
          et_condition_validity_enh     = lt_condition_validity
          et_condition_record           = lt_condition_record
          es_cndn_query_option_response = ls_cndn_query_option_response ).
    CATCH cx_prcg_cndnrecord_exception INTO DATA(le_cndn).
      CLEAR ls_message.
      ls_message-msgid = le_cndn->if_t100_message~t100key-msgid.
      ls_message-msgno = le_cndn->if_t100_message~t100key-msgno.
      ls_message-msgty = le_cndn->if_t100_dyn_msg~msgty.
      ls_message-msgv1 = le_cndn->if_t100_dyn_msg~msgv1.
      ls_message-msgv2 = le_cndn->if_t100_dyn_msg~msgv2.
      ls_message-msgv3 = le_cndn->if_t100_dyn_msg~msgv3.
      ls_message-msgv4 = le_cndn->if_t100_dyn_msg~msgv4.

      DATA(lv_root_key) = /bopf/cl_frw_factory=>get_new_key( ).
      lv_root_key = <ls_parameters>-conditionrecorduuid.
      eo_message->add_message(
        EXPORTING
          is_msg       = ls_message
          iv_node      = if_i_slspricingconditionreco_c=>sc_node-i_slspricingconditionrecordtp
          iv_key       = lv_root_key
          iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition ).

      ev_static_action_failed = abap_true.
      APPEND VALUE #( key = lv_root_key ) TO et_failed_key.

      RETURN.
  ENDTRY.

  mo_prcg_util->get_mapping_fields(
    EXPORTING
      iv_incl_record    = abap_true
    IMPORTING
      et_mapping_fields = DATA(lt_mapping)
  ).

  "find which records satisfy workflow, if not satisfy, do nothing
  "if satisfy, collect them to delete entity, and regenerate new entities with release status Blocked
  LOOP AT lt_condition_record INTO ls_condition_record.
    CLEAR lv_priceapprovalrequest.
    lv_validitycount = 0.

    lv_num8 = lv_num8 + 1.
    DATA(ls_condition_record_c) = ls_condition_record.
    CONCATENATE lv_dolorsign lv_dolorsign lv_num8 INTO ls_condition_record_c-conditionrecord.

    LOOP AT lt_condition_validity INTO DATA(ls_condition_validity)
                                 WHERE conditionrecord = ls_condition_record-conditionrecord.
      lv_validitycount = lv_validitycount + 1.
      IF lv_validitycount = 1.
        mo_req_util->simulate(
          EXPORTING
            iv_sibfboriid = CONV #( ls_condition_record-conditionrecord )
          IMPORTING
            es_sim_result = DATA(ls_sim_result)
        ).

        "if different condition records satisfy the same workflow,
        "use the first condition record number as request number to trigger workflow
        IF ls_sim_result-selected = abap_true AND ls_sim_result-id IS NOT INITIAL.
          APPEND ls_sim_result TO lt_sim_result_all.
          READ TABLE lt_sim_result WITH KEY id = ls_sim_result-id TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            APPEND ls_sim_result TO lt_sim_result.
            APPEND VALUE #( conditionrecord = ls_condition_record-conditionrecord id = ls_sim_result-id )
                TO lt_record_wf.
          ENDIF.

          READ TABLE lt_record_wf INTO DATA(ls_record_wf) WITH KEY id = ls_sim_result-id.
          IF sy-subrc = 0.
            lv_priceapprovalrequest = ls_record_wf-conditionrecord.
          ENDIF.
        ENDIF.
        CLEAR ls_sim_result.
      ENDIF.

      LOOP AT lt_mapping INTO DATA(ls_mapping).
        ASSIGN COMPONENT ls_mapping-fieldname_int OF STRUCTURE ls_cond_record TO FIELD-SYMBOL(<fs_int>).
        IF <fs_int> IS ASSIGNED.
          ASSIGN COMPONENT ls_mapping-fieldname_ext OF STRUCTURE ls_condition_record TO FIELD-SYMBOL(<fs_ext>).
          IF <fs_ext> IS ASSIGNED.
            <fs_int> = <fs_ext>.
            UNASSIGN <fs_ext>.
          ENDIF.
          UNASSIGN <fs_int>.
        ENDIF.
      ENDLOOP.

      mo_ltd_util->get_key_fields(
        EXPORTING
          iv_kvewe      = if_ct_types=>c_usage_pricing
          iv_kotabnr    = ls_condition_record-conditiontable
        IMPORTING
          et_key_fields = DATA(lt_key_fields)
      ).
      mo_ltd_util->get_data_fields(
        EXPORTING
          iv_kvewe       = if_ct_types=>c_usage_pricing
          iv_kotabnr     = ls_condition_record-conditiontable
        IMPORTING
          et_data_fields = DATA(lt_data_fields)
      ).

      LOOP AT lt_key_fields ASSIGNING FIELD-SYMBOL(<fs_key>).
        READ TABLE lt_mapping INTO ls_mapping WITH KEY fieldname_int = <fs_key>-fieldname.
        IF sy-subrc NE 0. "Custom fields
          ls_mapping-fieldname_ext = <fs_key>-fieldname.
        ENDIF.
        ASSIGN COMPONENT ls_mapping-fieldname_ext OF STRUCTURE ls_condition_validity TO <fs_ext>.
        IF <fs_ext> IS ASSIGNED.
          <fs_key>-fieldvalue = <fs_ext>.
          UNASSIGN <fs_ext>.
        ENDIF.
        CLEAR ls_mapping.
      ENDLOOP.

      LOOP AT lt_data_fields ASSIGNING FIELD-SYMBOL(<fs_data>).
        READ TABLE lt_mapping INTO ls_mapping WITH KEY fieldname_int = <fs_data>-fieldname.
        IF sy-subrc NE 0. "Custom fields
          ls_mapping-fieldname_ext = <fs_data>-fieldname.
        ENDIF.
        ASSIGN COMPONENT ls_mapping-fieldname_ext OF STRUCTURE ls_condition_validity TO <fs_ext>.
        IF <fs_ext> IS ASSIGNED.
          <fs_data>-fieldvalue = <fs_ext>.
          UNASSIGN <fs_ext>.
        ENDIF.
        CLEAR ls_mapping.
      ENDLOOP.

      ls_cond_record-del_db = abap_true.
      ls_cond_record-updkz = if_cnd_maint_ltd_types=>c_updkz_delete. "'D'.
      ls_cond_record-kvewe = if_ct_types=>c_usage_pricing. "'A'.
      ls_cond_record-datam = ls_condition_validity-conditionvaliditystartdate.
      ls_cond_record-datab = ls_condition_validity-conditionvaliditystartdate.
      ls_cond_record-datbi = ls_condition_validity-conditionvalidityenddate.
      ls_cond_record-key_fields  = lt_key_fields.
      ls_cond_record-data_fields = lt_data_fields.

      APPEND ls_cond_record TO lt_cond_record_del.

      ls_cond_record-priceapprovalrequest = lv_priceapprovalrequest.
      ls_cond_record-loevm_ko = abap_false.
      ls_cond_record-knumh    = lv_knumh_temp.
      ls_cond_record-del_db   = abap_false.
      ls_cond_record-updkz    = if_cnd_maint_ltd_types=>c_updkz_insert. "'I'.
      READ TABLE ls_cond_record-key_fields ASSIGNING <fs_key> WITH KEY fieldname = 'KFRST'.
      IF sy-subrc = 0 AND <fs_key> IS ASSIGNED.
        <fs_key>-fieldvalue = 'D'.
      ENDIF.

      READ TABLE ls_cond_record-data_fields ASSIGNING <fs_data> WITH KEY fieldname = 'KBSTAT'.
      IF sy-subrc = 0 AND <fs_data> IS ASSIGNED.
        <fs_data>-fieldvalue = ''.
      ENDIF.
      APPEND ls_cond_record TO lt_cond_record.
    ENDLOOP.
  ENDLOOP.

  "if records satisfy workflow, delete first, then change the release status to Blocked and do not change other values
  " and create them again with new record number

  "need to delete the previous record from DB according to the VK12 behavior
  GET REFERENCE OF lt_cond_record_del INTO lr_cond_record_del.
  mo_ltd_api->save(
    EXPORTING
      iv_sync          = abap_true
      iv_check_records = abap_true
    IMPORTING
      et_return        = DATA(lt_return)
    CHANGING
      cr_cond_record   = lr_cond_record_del
  ).

* VK 083 Conditions for the selection entered are blocked by &
  LOOP AT lt_return INTO DATA(ls_return) WHERE type = if_xo_const_message=>abort
                                            OR type = if_xo_const_message=>error.
    CLEAR ls_message.
    ls_message-msgid = ls_return-id.
    ls_message-msgno = ls_return-number.
    ls_message-msgty = ls_return-type.
    ls_message-msgv1 = ls_return-message_v1.
    ls_message-msgv2 = ls_return-message_v2.
    ls_message-msgv3 = ls_return-message_v3.
    ls_message-msgv4 = ls_return-message_v4.

    lv_root_key = <ls_parameters>-conditionrecorduuid.
    eo_message->add_message(
      EXPORTING
        is_msg       = ls_message
        iv_node      = if_i_slspricingconditionreco_c=>sc_node-i_slspricingconditionrecordtp
        iv_key       = lv_root_key
        iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition ).

    ev_static_action_failed = abap_true.
    APPEND VALUE #( key = lv_root_key ) TO et_failed_key.
    RETURN.
  ENDLOOP.

  GET REFERENCE OF lt_cond_record INTO lr_cond_record.
  mo_ltd_api->save(
    EXPORTING
      iv_sync          = abap_true
      iv_check_records = abap_true
    IMPORTING
      et_return        = lt_return
    CHANGING
      cr_cond_record   = lr_cond_record
  ).
  LOOP AT lt_return INTO ls_return WHERE type = if_xo_const_message=>abort
                                            OR type = if_xo_const_message=>error.
    CLEAR ls_message.
    ls_message-msgid = ls_return-id.
    ls_message-msgno = ls_return-number.
    ls_message-msgty = ls_return-type.
    ls_message-msgv1 = ls_return-message_v1.
    ls_message-msgv2 = ls_return-message_v2.
    ls_message-msgv3 = ls_return-message_v3.
    ls_message-msgv4 = ls_return-message_v4.

    lv_root_key = <ls_parameters>-conditionrecorduuid.
    eo_message->add_message(
      EXPORTING
        is_msg       = ls_message
        iv_node      = if_i_slspricingconditionreco_c=>sc_node-i_slspricingconditionrecordtp
        iv_key       = lv_root_key
        iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition ).

    ev_static_action_failed = abap_true.
    APPEND VALUE #( key = lv_root_key ) TO et_failed_key.
    RETURN.
  ENDLOOP.

  LOOP AT lt_record_wf INTO ls_record_wf.
    mo_req_util->trigger_workflow(
      EXPORTING
        iv_kappl  = 'V'
        iv_objkey = CONV #( ls_record_wf-conditionrecord )
      ).

    MESSAGE i001(00) WITH ls_record_wf-conditionrecord INTO DATA(lv_message_workflow).
    CLEAR:ls_message.
    MOVE-CORRESPONDING sy TO ls_message.
    lv_root_key = ls_record_wf-conditionrecord.
    eo_message->add_message(
      EXPORTING
        is_msg       = ls_message
        iv_node      = if_i_slspricingconditionreco_c=>sc_node-i_slspricingconditionrecordtp
        iv_key       = lv_root_key
        iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition
    ).
  ENDLOOP.
ENDMETHOD.
ENDCLASS.