class ZCL_INF_CONFIGURATION definition
  public
  final
  create public .

public section.

  methods CONSTRUCTOR .
  methods GET_OBJECT_SUBOBJECT
    exporting
      !ET_OBJ_SUBOBJ type ZTINF_MASTR_DATA_TT .
  methods SET_OBJECT_SUBOBJECT
    importing
      !IT_OBJ_SUBOBJ type ZTINF_MASTR_DATA_TT
    exporting
      !E_MESSAGE type BAPI_MSG .
  methods GET_OBJID_METADATA
    exporting
      !ET_OBJID_METADATA type ZTINF_META_DATA_TT .
  methods SET_OBJID_METADATA
    importing
      !IT_OBJ_METADATA type ZTINF_META_DATA_TT
    exporting
      !E_MESSAGE type BAPI_MSG .
  methods GET_SPRINT_CYCLE
    exporting
      !ET_SPRINT_LOAD type ZTINF_SPRIN_LOAD_TT .
  methods SET_SPRINT_CYCLE
    importing
      !IT_SPRINT_LOAD type ZTINF_SPRIN_LOAD_TT
    exporting
      !E_MESSAGE type BAPI_MSG .
  methods GET_SPRINT_VAR
    exporting
      !ET_SPRINT_VAR type ZTINF_SPRINT_VAR_TT .
  methods SET_SPRINT_VAR
    importing
      !IT_SPRINT_VAR type ZTINF_SPRINT_VAR_TT
    exporting
      !E_MESSAGE type BAPI_MSG .
  methods GET_RUNID
    importing
      !I_OBJECTID type ZINF_DE_OBJ_ID
      !I_TRANS_TYPE type ZINF_DE_TRANS_TYPE
      !I_TRANS_METHODS type ZINF_DE_TRANS_METHOD
      !I_CREATE type ZINF_DE_CORRECTION
    changing
      !C_RUNID type ZINF_DE_RUNID .
protected section.
private section.

  methods SET_RUNID
    importing
      !I_OBJECTID type ZINF_DE_OBJ_ID
      !I_TRANS_TYPE type ZINF_DE_TRANS_TYPE
      !I_TRANS_METHODS type ZINF_DE_TRANS_METHOD
      !I_CREATE type ZINF_DE_CORRECTION
    returning
      value(E_RUNID) type ZINF_DE_RUNID .
ENDCLASS.



CLASS ZCL_INF_CONFIGURATION IMPLEMENTATION.


method CONSTRUCTOR.

  endmethod.


method GET_OBJECT_SUBOBJECT.
    SELECT * FROM ZTINF_MASTR_DATA "#EC CI_NOWHERE
      INTO TABLE Et_OBJ_SUBOBJ.
  endmethod.


method GET_OBJID_METADATA.
    SELECT * FROM ZTINF_META_DATA INTO TABLE et_objid_metadata. "#EC CI_NOWHERE
  endmethod.


  METHOD get_runid.
    DATA: lt_trans_tab TYPE ztinf_trans_tab_tt,
          ls_trans_tab TYPE ztinf_trans_tab.
*- Get latest RUNID for an object from transaction table
    IF i_trans_type = '02'. " Extraction
      IF i_create = ' '.
        CALL METHOD me->set_runid
          EXPORTING
            i_objectid      = i_objectid
            i_trans_type    = i_trans_type
            i_trans_methods = i_trans_methods
            i_create        = i_create
          RECEIVING
            e_runid         = c_runid.
      ELSEIF i_create = 'A' or i_create = 'O'.
        IF c_runid IS INITIAL.
*       CALL METHOD go_sprint->get_current_sprint
*        IMPORTING
*          e_sprint = l_sprint.
          SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab   "#EC CI_NOFIELD
               WHERE objectid = i_objectid AND trans_type = i_trans_type
                 AND trans_methods = i_trans_methods.
          IF sy-subrc = 0.
            SORT lt_trans_tab BY RUNID DESCENDING." aedat DESCENDING aezet DESCENDING.
            READ TABLE lt_trans_tab INTO ls_trans_tab INDEX 1.
            IF sy-subrc = 0.
            c_runid = ls_trans_tab-runid.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    IF i_trans_type = '03'. " Transformation
      IF i_create = ' '.
        SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab "#EC CI_NOFIELD
                WHERE objectid = i_objectid
                  AND trans_type = '02'
                  AND trans_methods = i_trans_methods.
        IF sy-subrc = 0.
          SORT lt_trans_tab BY RUNID DESCENDING. "aedat DESCENDING aezet DESCENDING.
          READ TABLE lt_trans_tab INTO ls_trans_tab INDEX 1.
          IF sy-subrc = 0.
            c_runid = ls_trans_tab-runid.
          ENDIF.
        ENDIF.

      ELSEIF i_create = 'A' or i_create = 'O'.
        IF c_runid IS INITIAL.
*       CALL METHOD go_sprint->get_current_sprint
*        IMPORTING
*          e_sprint = l_sprint.
          SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab "#EC CI_NOFIELD
               WHERE objectid = i_objectid
*                 AND trans_type = i_trans_type
                 AND trans_methods = i_trans_methods.
          IF sy-subrc = 0.
            SORT lt_trans_tab BY trans_type ASCENDING RUNID DESCENDING."aedat DESCENDING aezet DESCENDING.
*            READ TABLE lt_trans_tab INTO ls_trans_tab INDEX 1.
            LOOP at lt_trans_tab INTO ls_trans_tab where trans_type = i_trans_type.
              exit.
            ENDLOOP.
            IF sy-subrc = 0.
              c_runid = ls_trans_tab-runid.
            else.
*-             Take runID created for previous step
               LOOP at lt_trans_tab INTO ls_trans_tab where trans_type = '02'.
                exit.
               ENDLOOP.
               if sy-subrc eq 0.
                 c_runid = ls_trans_tab-runid.
               endif.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
    IF i_trans_type = '04'. " Load
      IF i_create = ' '.
        SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab "#EC CI_NOFIELD
                WHERE objectid = i_objectid AND trans_type = '03'
                  AND trans_methods = i_trans_methods.
        IF sy-subrc = 0.
          SORT lt_trans_tab BY RUNID DESCENDING."aedat DESCENDING aezet DESCENDING.
          READ TABLE lt_trans_tab INTO ls_trans_tab INDEX 1.
          IF sy-subrc = 0.
            c_runid = ls_trans_tab-runid.
          ENDIF.
        else.
*-       This scenario can happen if Extraction & transformation is from BODS and load from Conversion program
         SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab "#EC CI_NOFIELD
                WHERE objectid = i_objectid AND trans_type = '03'.
          SORT lt_trans_tab BY RUNID DESCENDING."aedat DESCENDING aezet DESCENDING.
          READ TABLE lt_trans_tab INTO ls_trans_tab INDEX 1.
          IF sy-subrc = 0.
            c_runid = ls_trans_tab-runid.
          ENDIF.
        ENDIF.
      ELSEIF i_create = 'A' or i_create = 'O'.
        IF c_runid IS INITIAL.
*       CALL METHOD go_sprint->get_current_sprint
*        IMPORTING
*          e_sprint = l_sprint.
          SELECT * FROM ztinf_trans_tab INTO TABLE lt_trans_tab "#EC CI_NOFIELD
               WHERE objectid = i_objectid
*            AND trans_type = i_trans_type
                 AND trans_methods = i_trans_methods.
          IF sy-subrc = 0.
            SORT lt_trans_tab BY trans_type ASCENDING RUNID DESCENDING."aedat DESCENDING aezet DESCENDING.
            LOOP at lt_trans_tab INTO ls_trans_tab where trans_type = i_trans_type.
              exit.
            ENDLOOP.
            IF sy-subrc = 0.
              c_runid = ls_trans_tab-runid.
            else.
*-             Take runID created for previous step
               LOOP at lt_trans_tab INTO ls_trans_tab where trans_type = '03'.
                exit.
               ENDLOOP.
               if sy-subrc eq 0.
                 c_runid = ls_trans_tab-runid.
               endif.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      IF c_runid IS INITIAL AND ( i_trans_methods = '02' or i_trans_methods = '04').
        CALL METHOD me->set_runid
          EXPORTING
            i_objectid      = i_objectid
            i_trans_type    = i_trans_type
            i_trans_methods = i_trans_methods
            i_create        = i_create
          RECEIVING
            e_runid         = c_runid.
      ENDIF.
    ENDIF.
  ENDMETHOD.


method GET_SPRINT_CYCLE.
    SELECT * FROM ZTINF_SPRIN_LOAD INTO TABLE ET_SPRINT_LOAD. "#EC CI_NOWHERE
  endmethod.


method GET_SPRINT_VAR.
    SELECT * FROM ZTINF_SPRINT_VAR INTO TABLE ET_SPRINT_VAR. "#EC CI_NOWHERE
  endmethod.


method SET_OBJECT_SUBOBJECT.

    MODIFY ZTINF_MASTR_DATA FROM TABLE it_obj_subobj.
    IF sy-subrc NE 0.
      e_message = 'Database insert/update failed'.
    ENDIF.
  endmethod.


METHOD set_objid_metadata.
    MODIFY ztinf_meta_data FROM TABLE it_obj_metadata.
    IF sy-subrc NE 0.
      e_message = 'Database insert/update failed'.
    ENDIF.
  ENDMETHOD.


  METHOD set_runid.
*    DATA:
*    lv_number TYPE i.
    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr = '01'
        object      = 'ZRUNID'
*       QUANTITY    = '1'
*       SUBOBJECT   = ' '
*       TOYEAR      = '0000'
*       IGNORE_BUFFER                 = ' '
      IMPORTING
        number      = e_runid
*       QUANTITY    =
*       RETURNCODE  =
 EXCEPTIONS
       INTERVAL_NOT_FOUND            = 1
       NUMBER_RANGE_NOT_INTERN       = 2
       OBJECT_NOT_FOUND              = 3
       QUANTITY_IS_0                 = 4
       QUANTITY_IS_NOT_1             = 5
       INTERVAL_OVERFLOW             = 6
       BUFFER_OVERFLOW               = 7
       OTHERS      = 8
      .
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.


method SET_SPRINT_CYCLE.
    MODIFY ZTINF_SPRIN_LOAD FROM TABLE IT_SPRINT_LOAD.
     IF SY-SUBRC NE 0.
       e_message = 'Database insert/update failed'.
     ENDIF.
  endmethod.


METHOD set_sprint_var.
    MODIFY ztinf_sprint_var FROM TABLE it_sprint_var.
    IF sy-subrc NE 0.
      e_message = text-001.  " 'Database insert/update failed'
    ENDIF.
  ENDMETHOD.
ENDCLASS.