class ZCL_PD_AFM_GENERATION definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF gtyp_selection,
        srcgrp   TYPE RANGE OF zpd_t_pmmarket-surce_grp,
        matnr    TYPE RANGE OF zpd_t_spmas-matnr,
        lifnr    TYPE RANGE OF zpd_t_afm_guidnc-lifnr,
        season   TYPE RANGE OF zpd_t_spmas-season,
        mrpin    TYPE RANGE OF zpd_t_afm-dismm,
        sim(1),
        init(1),
        delta(1),
        mark(1),
        del(1),
      END OF gtyp_selection .

  methods CONSTRUCTOR
    importing
      !IS_SELECTION type GTYP_SELECTION
    raising
      CX_BALI_RUNTIME .
  methods ADD_MESSAGE_TO_THE_LOG
    importing
      !IS_MESSAGE type BAL_S_MSG .
  methods GET_AFM_TABLE
    returning
      value(RT_AFM) type ZPD_TT_AFM .
  methods GET_UPDATED_AFM
    returning
      value(RT_AFM) type ZPD_TT_AFM .
  methods DISPLAY_LOG
    raising
      ZCX_SD_BALL_LOG .
protected section.
private section.

  types:
    BEGIN OF gtyp_mara_seas,
      matnr         TYPE zpd_t_mara_seas-matnr,
      fsh_season    TYPE zpd_t_mara_seas-fsh_season,
      zzfirstexftyd TYPE zpd_t_mara_seas-zzfirstexftyd,
      zzlastexftyd  TYPE zpd_t_mara_seas-zzlastexftyd,
      zzldt         TYPE zpd_t_mara_seas-zzldt,
    END OF gtyp_mara_seas .
  types:
    BEGIN OF gtyp_spmafs,
      matnr    TYPE zpd_t_spmafs-matnr,
      season   TYPE zpd_t_pmseason-season,
      zfactory TYPE bu_id_number, "zpd_t_spmafs-zfactory,
      zspprity TYPE zpd_t_spmafs-zspprity,
      zdpldtme TYPE zpd_t_spmafs-zdpldtme,
    END OF gtyp_spmafs .
  types:
    BEGIN OF gtyp_active_seasons,
      season TYPE zpd_t_pmseason-season,
    END OF gtyp_active_seasons .
  types:
    BEGIN OF gtyp_lfa1,
      Supplier TYPE lifnr,
      Country  TYPE land1_gp,
      idnumber TYPE bu_id_number,
      partner  TYPE bu_partner,
    END OF gtyp_lfa1 .
  types:
    BEGIN OF gtyp_mara,
      Product TYPE matnr,
      zzmpg   TYPE zpd_zzmpg,
      mtart   TYPE mtart,
    END OF gtyp_mara .
  types:
    BEGIN OF gtyp_prodiv,
      matnr      TYPE matnr,
      fsh_mg_at1 TYPE fsh_mg_attribute1,
    END OF gtyp_prodiv .
  types:
    BEGIN OF gtyp_spm,
      matnr      TYPE zpd_t_spmas-matnr,
      season     TYPE zpd_t_spmas-season,
      zfactory   TYPE zpd_t_spmafs-zfactory,
      zspfefdt   TYPE zpd_t_spmas-zspfefdt,
      zsplefdt   TYPE zpd_t_spmas-zsplefdt,
      zspprity   TYPE zpd_t_spmafs-zspprity,
      zspprodiv  TYPE zpd_t_spmas-zspprodiv,
      zdpldtme   TYPE zpd_t_spmafs-zdpldtme,
      zspmprplh  TYPE zpd_t_spmas-zspmprplh,
      zzmpg      TYPE zpd_zzmpg,
      land1      TYPE land1_gp,
      source_grp TYPE  zpd_surce_grp,
    END OF gtyp_spm .
  types:
    BEGIN OF gtyp_marc,
      matnr TYPE matnr,
      dismm TYPE dismm,
    END OF gtyp_marc .
  types:
    BEGIN OF gtyp_result,
      begda     TYPE datum,
      endda     TYPE datum,
      zhardex_s TYPE fc_actind,
      zhardex_e TYPE fc_actind,
      season    TYPE  fsh_saiso,
    END OF gtyp_result .
  types:
    BEGIN OF gtyp_dates,
      start_ind(1),
      end_ind(1),
      datum        TYPE datum,
      table(1),
      zhardex      TYPE  fc_actind,
      season       TYPE  fsh_saiso,
    END OF gtyp_dates .
  types:
    gtyp_dates_t TYPE STANDARD TABLE OF gtyp_dates WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF gtyp_sg_dates,
      source_grp TYPE  zpd_surce_grp,
      matnr      TYPE zpd_t_spmas-matnr,
      dates      TYPE STANDARD TABLE OF gtyp_dates WITH NON-UNIQUE DEFAULT KEY,
      result     TYPE STANDARD TABLE OF gtyp_result WITH NON-UNIQUE DEFAULT KEY,
    END OF gtyp_sg_dates .
  types:
    gtyp_sg_dates_t TYPE STANDARD TABLE OF gtyp_sg_dates WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF gtyp_sg,
      source_grp TYPE  zpd_surce_grp,
    END OF gtyp_sg .
  types:
    BEGIN OF gtyp_base,
      matnr      TYPE zpd_t_spmas-matnr,
      zspprodiv  TYPE zpd_t_spmas-zspprodiv,
      zzmpg      TYPE zpd_zzmpg,
      zfactory   TYPE zpd_t_spmafs-zfactory,
      land1      TYPE land1_gp,
      where(255),
    END OF gtyp_base .
  types:
    BEGIN OF gtyp_pmprior,
      source_grp TYPE zpd_surce_grp,
      spart      TYPE spart,
      origin     TYPE zpd_coo,
      frm_dat    TYPE zpd_frm_dat,
      to_dat     TYPE zpd_to_dat,
      progrp     TYPE zpd_progrp,
      landx      TYPE name1_gp,
      lfnr       TYPE lifnr,
      priority   TYPE zpd_priority,
      zhardex    TYPE fc_actind,
    END OF gtyp_pmprior .
  types:
    gtyp_pmprior_t TYPE STANDARD TABLE OF gtyp_pmprior WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF gtyp_pmdcloc,
      source_grp TYPE  zpd_surce_grp,
      werks      TYPE werks_d,
    END OF gtyp_pmdcloc .
  types:
    BEGIN OF gtyp_dismm,
      satnr TYPE  satnr,
      werks TYPE werks_d,
      dismm TYPE dismm,
    END OF gtyp_dismm .
  types:
    BEGIN OF gtyp_mara_C,
      matnr TYPE matnr,
      satnr TYPE satnr,
      mtart TYPE mtart,
    END OF gtyp_mara_C .

  data:
    gt_mara_C TYPE TABLE OF gtyp_mara_C .
  data:
    gt_dismm TYPE TABLE OF gtyp_dismm .
  data:
    gt_base TYPE TABLE OF gtyp_base .
  data:
    gt_marc TYPE TABLE OF gtyp_marc .
  data:
    gt_spm TYPE TABLE OF gtyp_spm .
  data:
    gt_prodiv TYPE TABLE OF gtyp_prodiv .
  data:
    gt_mara TYPE TABLE OF gtyp_mara .
  data:
    gt_lfa1 TYPE TABLE OF gtyp_lfa1 .
  data:
    gt_active_seasons TYPE TABLE OF gtyp_active_seasons .
  data:
    gt_mara_seas TYPE TABLE OF gtyp_mara_seas .
  data:
    gt_spmafs TYPE TABLE OF gtyp_spmafs .
  data GS_SELECTION type GTYP_SELECTION .
  data:
    gt_pmprior TYPE TABLE OF gtyp_pmprior .
  data:
    gt_sg TYPE TABLE OF gtyp_sg .
  data:
    gt_mtart TYPE RANGE OF mtart .
  data:
    gt_pmdcloc TYPE TABLE OF gtyp_pmdcloc .
  data:
    gt_sg_dates TYPE TABLE OF gtyp_sg_dates .
  constants GC_LOG_OBJECT type BALOBJ_D value 'ZPD_AFM' ##NO_TEXT.
  constants GC_LOG_SUBOBJECT type BALSUBOBJ value 'ZPD_AFM_SUB' ##NO_TEXT.
  data MT_MESSAGES type BAL_T_MSG .
  data GT_AFM type ZPD_TT_AFM .
  data GS_AFM type ZPD_T_AFM .
  data GT_AFM_UPD type ZPD_TT_AFM .
  data GIF_LOG type ref to IF_BALI_LOG .
  data GV_MESS_ID type SYSUUID_C32 .

  methods PROCESS_SPM_PERIODS .
  methods GENERATE .
  methods CHANGE_START_DATE
    changing
      !CV_DATE type DATUM .
  methods PH_PROCESS .
  methods GET_CONDITION
    importing
      !IV_SG type ZPD_SURCE_GRP
    changing
      !CS_BASE type GTYP_BASE .
  methods CREATE_AFM_TABLE .
  methods MERGE_ROWS .
  methods SET_MARC_UPDATE_FLAG .
  methods FILL_SPM_PERIODS
    importing
      !IS_BASE type GTYP_BASE
    changing
      !CT_DATES type GTYP_DATES_T .
  methods FILL_PM_PERIODS
    importing
      !IS_BASE type GTYP_BASE
    changing
      !CT_DATES type GTYP_DATES_T
      !CT_PMPRIOR type GTYP_PMPRIOR_T .
  methods FILL_FINAL_PERIODS
    changing
      !CT_SG_DATES type GTYP_SG_DATES_T .
  methods FINAL_PRIORITY .
  methods FILL_AFM_TABLE
    changing
      !CT_SG_DATES type GTYP_SG_DATES_T
      !CT_PMPRIOR type GTYP_PMPRIOR_T .
  methods CHECK_SPM_PERIOD
    importing
      !IS_BASE type GTYP_BASE
      !IS_RESULT type GTYP_RESULT
    returning
      value(RV_ERROR) type ABAP_BOOLEAN .
  methods DELETE_UPDATE_AFM_ENTRIES .
  methods SAVE_LOG .
ENDCLASS.



CLASS ZCL_PD_AFM_GENERATION IMPLEMENTATION.


  METHOD add_message_to_the_log.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    CHECK is_message IS NOT INITIAL.

    mt_messages = VALUE #( BASE mt_messages ( is_message ) ).

  ENDMETHOD.


  METHOD change_start_date.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    IF cv_date+6(2) GT '15'.
      cv_date+6(2) = '16'.
    ELSE.
      cv_date+6(2) = '01'.
    ENDIF.
  ENDMETHOD.


  METHOD check_spm_period.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    LOOP AT gt_spm ASSIGNING FIELD-SYMBOL(<ls_spm>)
  WHERE zspfefdt <= is_result-begda AND
        zsplefdt >= is_result-begda AND
        zspprodiv = is_base-zspprodiv AND
        matnr     = is_base-matnr AND
        zzmpg     = is_base-zzmpg AND
        zfactory  = is_base-zfactory AND
        land1     = is_base-land1.                       "#EC CI_NESTED
      EXIT.
    ENDLOOP.
    IF sy-subrc <> 0.
      rv_error = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*


    TRY.
        gv_mess_id = cl_system_uuid=>create_uuid_c32_static( ).
      CATCH cx_uuid_error.
        RETURN.
      CATCH cx_static_check.
        RETURN.
    ENDTRY.

    TRY.

        gif_log = cl_bali_log=>create( ).
        DATA(lif_log_header) = cl_bali_header_setter=>create( object = gc_log_object subobject = gc_log_subobject external_id = sy-uname && gv_mess_id  ).
        gif_log->set_header( lif_log_header ) ##SUBRC_OK.

      CATCH cx_bali_runtime.

        MESSAGE e027(zpd_i_cutoff).

    ENDTRY.


    DATA: lt_aedat TYPE RANGE OF datum.
    gs_selection = is_selection.
    IF is_selection-delta = 'X'.
      DATA(lv_tstamp_prev) = zcl_pe_abap_runtime=>get_last_execution( )-timestamp.
      TRY.
          DATA(lv_timestamp) = cl_abap_tstmp=>move_to_short( lv_tstamp_prev ).
        CATCH cx_parameter_invalid_type cx_parameter_invalid_range INTO DATA(lo_param_exception) ##NEEDED.
          RETURN.
      ENDTRY.
      CONVERT TIME STAMP lv_timestamp TIME ZONE sy-zonlo INTO DATE DATA(lv_aedat).
      APPEND VALUE #( sign   = if_fsbp_const_range=>sign_include
                      option = if_fsbp_const_range=>option_greater
                      low    = lv_aedat ) TO lt_aedat.
    ENDIF.
    TRY.
        gt_mtart = zcl_pe_hm_basic=>get_range( iv_id = '1364' ).
      CATCH zcx_pe_hm.
        MESSAGE e004(zpd_afm).
    ENDTRY.
    SELECT b~matnr,
       a~season,
       b~zzfirstexftyd,
       b~zzlastexftyd,
       b~zzldt
       FROM zpd_t_pmseason AS a
  INNER JOIN zpd_t_mara_seas AS b ON a~season EQ b~fsh_season
  INTO TABLE @gt_mara_seas
    WHERE a~season IN @is_selection-season AND
          a~active EQ @abap_true AND
          b~matnr IN @is_selection-matnr AND
          b~zload_dt IN @lt_aedat.
    IF sy-subrc <> 0 AND gt_mara_seas[] IS INITIAL.
      MESSAGE e002(zpd_afm) INTO DATA(lv_dummy).
      gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
    ENDIF.
    DELETE gt_mara_seas WHERE zzfirstexftyd IS INITIAL.
    DELETE gt_mara_seas WHERE zzlastexftyd IS INITIAL.
    DELETE gt_mara_seas WHERE zzfirstexftyd = '00000000'.
    DELETE gt_mara_seas WHERE zzlastexftyd = '00000000'.

    SELECT b~matnr,
           a~season,
           b~zfactory,
           b~zspprity,
           b~zdpldtme FROM zpd_t_pmseason AS a INNER JOIN zpd_t_spmafs AS b
                                                     ON a~season EQ b~season
      INTO TABLE @gt_spmafs
        WHERE a~active EQ @abap_true
          AND b~matnr  IN @is_selection-matnr
          AND b~zfactory IN @is_selection-lifnr
          AND b~zload_dt IN @lt_aedat.
    IF sy-subrc <> 0.
      CLEAR: gt_spmafs.
    ENDIF.


    SELECT DISTINCT season FROM zpd_t_pmseason INTO TABLE gt_active_seasons
      WHERE active EQ abap_true.
    IF sy-subrc <> 0.
      MESSAGE e028(zpd_afm) INTO lv_dummy.
      gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
    ENDIF.
    SORT gt_active_seasons BY season ASCENDING.
    IF lines( gt_spmafs ) <> 0.
      SELECT b~supplier, b~country, a~idnumber, a~partner
        FROM but0id  AS a
        INNER JOIN  i_supplier AS b ON b~supplier = a~partner
        FOR ALL ENTRIES IN @gt_spmafs
        WHERE a~idnumber = @gt_spmafs-zfactory
        INTO TABLE @gt_lfa1.
      IF sy-subrc <> 0.
        MESSAGE e032(zpd_afm) INTO lv_dummy.
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.
    ENDIF.
    IF lines( gt_mara_seas ) <> 0.
      SELECT product, productprodgroup AS zzmpg, producttype AS mtart  FROM zfi_i_productd_ex INTO TABLE @gt_mara
        FOR ALL ENTRIES IN @gt_mara_seas
        WHERE product = @gt_mara_seas-matnr.
      IF sy-subrc <> 0.
        MESSAGE e016(zpd_afm) INTO lv_dummy.
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.
      SELECT matnr, fsh_mg_at1 FROM zsc_i_mara_cust_field_for_po INTO TABLE @gt_prodiv
        FOR ALL ENTRIES IN @gt_mara_seas
        WHERE matnr = @gt_mara_seas-matnr.
      IF sy-subrc <> 0.
        MESSAGE e016(zpd_afm) INTO lv_dummy .
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.
      SELECT matnr, dismm FROM zpd_i_prod_afm INTO TABLE @gt_marc
        FOR ALL ENTRIES IN @gt_mara_seas
        WHERE matnr = @gt_mara_seas-matnr.
      IF sy-subrc <> 0.
        MESSAGE e016(zpd_afm) INTO lv_dummy .
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.


      SELECT satnr, werks, dismm FROM zpd_i_prod_afm
        INTO TABLE @gt_dismm
        FOR ALL ENTRIES IN @gt_mara_seas
          WHERE satnr = @gt_mara_seas-matnr
            AND dismm IN @is_selection-mrpin.
      IF sy-subrc <> 0.
        MESSAGE e016(zpd_afm) INTO lv_dummy .
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.
      SELECT matnr, satnr, mtart FROM zpd_i_prod_afm INTO TABLE @gt_mara_c
        FOR ALL ENTRIES IN @gt_mara_seas
        WHERE satnr = @gt_mara_seas-matnr AND mtart IN @gt_mtart.
      IF sy-subrc <> 0.
        MESSAGE e016(zpd_afm) INTO lv_dummy ##NEEDED.
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ENDIF.
    ENDIF.


    SELECT source_grp, spart, origin, frm_dat, to_dat, progrp, landx, lfnr, priority, zhardex FROM zpd_t_pmprior INTO TABLE @gt_pmprior
        WHERE source_grp IN @is_selection-srcgrp AND aedat IN @lt_aedat.
    IF sy-subrc <> 0.
      MESSAGE e029(zpd_afm) INTO lv_dummy.
      TRY.
          gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
        CATCH cx_bali_runtime.
          MESSAGE e027(zpd_i_cutoff).
      ENDTRY.
    ENDIF.
    gt_pmprior = VALUE #( LET lt_temp = gt_pmprior IN FOR ls_temp IN lt_temp      (
          source_grp = ls_temp-source_grp
          spart = |{ ls_temp-spart ALPHA = OUT }|
          origin = ls_temp-origin
          frm_dat = ls_temp-frm_dat
          to_dat = ls_temp-to_dat
          progrp = ls_temp-progrp
          landx = ls_temp-landx
          lfnr = ls_temp-lfnr
          priority = ls_temp-priority
          zhardex = ls_temp-zhardex ) ).

    SELECT source_grp FROM zpd_t_pmprior INTO TABLE @gt_sg
        WHERE source_grp IN @is_selection-srcgrp GROUP BY source_grp.
    IF sy-subrc <> 0.
      MESSAGE e030(zpd_afm) INTO lv_dummy.
      TRY.
          gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
        CATCH cx_bali_runtime.
          MESSAGE e027(zpd_i_cutoff).
      ENDTRY.
    ENDIF.

    SELECT source_grp, werks FROM zpd_t_pmdcloc INTO TABLE @gt_pmdcloc
      WHERE source_grp IN @is_selection-srcgrp.
    IF sy-subrc <> 0.
      MESSAGE e031(zpd_afm) INTO lv_dummy.
      IF lv_dummy IS NOT INITIAL.
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.

      ENDIF.

    ENDIF.
    generate( ).

  ENDMETHOD.


  METHOD create_afm_table.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    DATA: lt_pmprior TYPE TABLE OF gtyp_pmprior.
    LOOP AT gt_sg ASSIGNING FIELD-SYMBOL(<ls_sg>).

      LOOP AT gt_base ASSIGNING FIELD-SYMBOL(<ls_base>). "#EC CI_NESTED
        lt_pmprior[] = gt_pmprior[].
        DELETE lt_pmprior[] WHERE source_grp <> <ls_sg>-source_grp.
        READ TABLE lt_pmprior TRANSPORTING NO FIELDS WITH KEY origin = <ls_base>-land1.
        IF sy-subrc <> 0.
          READ TABLE lt_pmprior ASSIGNING FIELD-SYMBOL(<ls_prio>) WITH KEY spart = CONV #( <ls_base>-zspprodiv ).
          IF sy-subrc = 0.
            APPEND INITIAL LINE TO lt_pmprior ASSIGNING FIELD-SYMBOL(<ls_prioe>).
            <ls_prioe> = CORRESPONDING #( <ls_prio> ).
            <ls_prioe>-origin = <ls_base>-land1.
            CLEAR: <ls_prioe>-priority.
            READ TABLE gt_spm ASSIGNING FIELD-SYMBOL(<ls_spm>) WITH KEY zspprodiv = <ls_base>-zspprodiv
                                                        matnr     = <ls_base>-matnr
                                                        zzmpg     = <ls_base>-zzmpg
                                                        zfactory  = <ls_base>-zfactory
                                                        land1     = <ls_base>-land1.
            IF sy-subrc <> 0.
              UNASSIGN <ls_spm>.
            ELSE.
              <ls_prioe>-frm_dat = <ls_spm>-zspfefdt.
              <ls_prioe>-to_dat = <ls_spm>-zsplefdt.
            ENDIF.
          ENDIF.
        ENDIF.



        CLEAR: <ls_base>-where.
        get_condition( EXPORTING iv_sg = <ls_sg>-source_grp CHANGING cs_base = <ls_base> ).
        IF <ls_base>-where IS INITIAL.
          CONTINUE.
        ENDIF.
        READ TABLE gt_sg_dates ASSIGNING FIELD-SYMBOL(<ls_gs_dates>) WITH KEY source_grp = <ls_sg>-source_grp matnr = <ls_base>-matnr.
        IF sy-subrc <> 0.
          APPEND INITIAL LINE TO gt_sg_dates ASSIGNING <ls_gs_dates>.
        ENDIF.

        <ls_gs_dates>-source_grp = <ls_sg>-source_grp.
        <ls_gs_dates>-matnr = <ls_base>-matnr.
        fill_spm_periods( EXPORTING is_base = <ls_base> CHANGING ct_dates = <ls_gs_dates>-dates ).
        fill_pm_periods( EXPORTING is_base = <ls_base> CHANGING ct_dates = <ls_gs_dates>-dates ct_pmprior = lt_pmprior ).
        LOOP AT <ls_gs_dates>-dates ASSIGNING FIELD-SYMBOL(<ls_date>) WHERE zhardex = abap_true. "#EC CI_NESTED
          LOOP AT <ls_gs_dates>-dates ASSIGNING FIELD-SYMBOL(<ls_dat>) WHERE datum = <ls_date>-datum AND zhardex <> abap_true. "#EC CI_NESTED
            <ls_dat>-zhardex = abap_true.
          ENDLOOP.
        ENDLOOP.
        DELETE ADJACENT DUPLICATES FROM <ls_gs_dates>-dates COMPARING start_ind end_ind datum.
      ENDLOOP.
    ENDLOOP.

    fill_final_periods( CHANGING ct_sg_dates = gt_sg_dates ).
    fill_afm_table( CHANGING ct_sg_dates = gt_sg_dates ct_pmprior = lt_pmprior ).







    LOOP AT gt_spm ASSIGNING <ls_spm> WHERE zspmprplh = abap_true.
      CLEAR:gs_afm.
      gs_afm-matnr                = <ls_spm>-matnr.
      gs_afm-lifnr                = <ls_spm>-zfactory.
      gs_afm-product_division     = <ls_spm>-zspprodiv.
      gs_afm-zdpldtme             = <ls_spm>-zdpldtme.
      gs_afm-place_holder_article = <ls_spm>-zspmprplh.
      gs_afm-coo                  = <ls_spm>-land1.
      gs_afm-frm_dateu = <ls_spm>-zspfefdt.
      gs_afm-to_datef  = <ls_spm>-zsplefdt.
      gs_afm-source_grp = <ls_spm>-source_grp.
      READ TABLE gt_pmdcloc INTO DATA(ls_pmdcloc)
     WITH KEY source_grp =  gs_afm-source_grp.
      IF sy-subrc IS INITIAL.
        gs_afm-locno = ls_pmdcloc-werks.
      ENDIF.
      READ TABLE gt_lfa1 INTO DATA(ls_lfa1)
        WITH KEY idnumber = gs_afm-lifnr.
      IF sy-subrc IS INITIAL.
        gs_afm-partner = ls_lfa1-partner.
      ENDIF.
      TRY.
          gs_afm-plan_type = zcl_pe_hm_basic=>get_value( iv_id = '1031' ).
          gs_afm-slt_llt = zcl_pe_hm_basic=>get_value( iv_id = '1033' ).
        CATCH zcx_pe_hm.
          MESSAGE e004(zpd_afm).
      ENDTRY.
      APPEND gs_afm TO gt_afm .
    ENDLOOP.
  ENDMETHOD.


  METHOD delete_update_afm_entries.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 11.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    CLEAR: gt_afm_upd[].
    SELECT client, record_uuid, matnr, lifnr, locno, source_grp, frm_dateu, to_datef,
       finalprio, matrixprio, spmpriority, plan_type, zdpldtme, slt_llt, loekz, blekz,
       dismm, coo, ernam, erdat, aenam, aedat, place_holder_article, product_division,
       field_level_lock, frm_dateu_lock, to_datef_lock, finalprio_lock, plan_type_lock,
       slt_llt_lock, partner, zmsource, rel_marc_up, del_flag, zhardex, season
  FROM zpd_t_afm_new INTO TABLE @gt_afm_upd
  WHERE matnr IN @gs_selection-matnr AND
        lifnr IN @gs_selection-lifnr AND
        source_grp IN @gs_selection-srcgrp AND
        dismm IN @gs_selection-mrpin AND
        blekz <> 'X' AND blekz <> 'P' AND
        place_holder_article <> 'X' .
    IF sy-subrc = 0.
      LOOP AT gt_afm_upd ASSIGNING FIELD-SYMBOL(<ls_afm_ch>).
        DATA(lv_tabix) = sy-tabix.
        READ TABLE gt_afm TRANSPORTING NO FIELDS WITH KEY record_uuid = <ls_afm_ch>-record_uuid.
        IF sy-subrc = 0.
          DELETE gt_afm_upd INDEX lv_tabix.
        ELSE.
          <ls_afm_ch>-loekz = abap_true.
          <ls_afm_ch>-del_flag = abap_true.
        ENDIF.
      ENDLOOP.
    ENDIF.


    IF gs_selection-sim IS INITIAL AND lines( gt_afm ) IS NOT INITIAL.
      MODIFY zpd_t_afm_new FROM TABLE gt_afm.
      IF sy-subrc = 0.
        COMMIT WORK AND WAIT.
      ELSE.
        ROLLBACK WORK.
      ENDIF.
      IF gs_selection-mark  = abap_true.
        MODIFY zpd_t_afm_new FROM TABLE gt_afm_upd.
        IF sy-subrc = 0.
          COMMIT WORK AND WAIT.
        ELSE.
          ROLLBACK WORK.
        ENDIF.
      ENDIF.
      IF gs_selection-del = abap_true.
        DELETE zpd_t_afm_new FROM TABLE gt_afm_upd.
        IF sy-subrc = 0.
          COMMIT WORK AND WAIT.
        ELSE.
          ROLLBACK WORK.
        ENDIF.
      ENDIF.
      IF sy-subrc IS INITIAL.
        MESSAGE s003(zpd_afm).
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD display_log.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 11.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    DATA: lv_number TYPE balhdr-extnumber.
    lv_number = sy-uname && gv_mess_id.
    CALL FUNCTION 'APPL_LOG_DISPLAY'
      EXPORTING
        object                    = gc_log_object
        subobject                 = gc_log_subobject
        external_number           = lv_number
        suppress_selection_dialog = abap_true
      EXCEPTIONS
        no_authority              = 1
        OTHERS                    = 2.
    IF sy-subrc <> 0.
      MESSAGE e014(zsd_discount).
    ENDIF.

  ENDMETHOD.


  METHOD fill_afm_table.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*


    LOOP AT ct_sg_dates ASSIGNING FIELD-SYMBOL(<ls_gs_dates>).
      LOOP AT <ls_gs_dates>-result ASSIGNING FIELD-SYMBOL(<ls_result>). "#EC CI_NESTED



        LOOP AT gt_base ASSIGNING FIELD-SYMBOL(<ls_base>) WHERE matnr = <ls_gs_dates>-matnr. "#EC CI_NESTED
          IF check_spm_period( is_base = <ls_base> is_result = <ls_result>  ) = abap_true.
            CONTINUE.
          ENDIF.
          CLEAR gs_afm.
          READ TABLE gt_spm ASSIGNING FIELD-SYMBOL(<ls_spm>)
            WITH KEY zspprodiv = <ls_base>-zspprodiv
                     matnr     = <ls_base>-matnr
                     zzmpg     = <ls_base>-zzmpg
                     zfactory  = <ls_base>-zfactory
                     land1     = <ls_base>-land1
                     season    = <ls_result>-season.
          IF sy-subrc = 0.
            gs_afm-matnr                = <ls_spm>-matnr.
            gs_afm-lifnr                = <ls_spm>-zfactory.
            gs_afm-product_division     = <ls_spm>-zspprodiv.
            gs_afm-zdpldtme             = <ls_spm>-zdpldtme.
            gs_afm-place_holder_article = <ls_spm>-zspmprplh.
            gs_afm-coo                  = <ls_spm>-land1.
            gs_afm-spmpriority = <ls_spm>-zspprity.
          ELSE.
            READ TABLE gt_spm ASSIGNING <ls_spm>
           WITH KEY zspprodiv = <ls_base>-zspprodiv
                    matnr     = <ls_base>-matnr
                    zzmpg     = <ls_base>-zzmpg
                    zfactory  = <ls_base>-zfactory
                    land1     = <ls_base>-land1.
            IF sy-subrc IS INITIAL.
              gs_afm-matnr                = <ls_spm>-matnr.
              gs_afm-lifnr                = <ls_spm>-zfactory.
              gs_afm-product_division     = <ls_spm>-zspprodiv.
              gs_afm-zdpldtme             = <ls_spm>-zdpldtme.
              gs_afm-place_holder_article = <ls_spm>-zspmprplh.
              gs_afm-coo                  = <ls_spm>-land1.
              gs_afm-spmpriority = <ls_spm>-zspprity.
            ENDIF.
          ENDIF.

          IF <ls_result>-zhardex_s IS NOT INITIAL AND <ls_result>-zhardex_e IS NOT INITIAL.
            gs_afm-zhardex = abap_true.
          ENDIF.
          gs_afm-season = <ls_result>-season.
          gs_afm-frm_dateu  = <ls_result>-begda.
          gs_afm-to_datef   = <ls_result>-endda.
          gs_afm-source_grp = <ls_gs_dates>-source_grp.


          LOOP AT ct_pmprior INTO DATA(ls_pmprior) WHERE origin = gs_afm-coo AND spart = gs_afm-product_division AND frm_dat <= gs_afm-frm_dateu AND to_dat >= gs_afm-frm_dateu. "#EC CI_NESTED
            IF ls_pmprior-priority IS NOT INITIAL.
              gs_afm-matrixprio = ls_pmprior-priority.
            ELSE.
              gs_afm-matrixprio = 'Z'.
            ENDIF.
            CLEAR: ls_pmprior.
            EXIT.
          ENDLOOP.
          IF sy-subrc <> 0.
            gs_afm-matrixprio = 'Z'.
          ENDIF.
          READ TABLE gt_pmdcloc INTO DATA(ls_pmdcloc)
                 WITH KEY source_grp =  gs_afm-source_grp.
          IF sy-subrc IS INITIAL.
            gs_afm-locno = ls_pmdcloc-werks.
          ENDIF.

          READ TABLE gt_mara_c TRANSPORTING NO FIELDS WITH KEY satnr = gs_afm-matnr.
          IF sy-subrc <> 0.
            READ TABLE gt_dismm INTO DATA(ls_dismm)
                     WITH KEY satnr =  gs_afm-matnr
                              werks =  gs_afm-locno.

            IF sy-subrc IS INITIAL.
              gs_afm-dismm  = ls_dismm-dismm.

            ELSE.
              MESSAGE e014(zpd_afm) INTO DATA(lv_dummy) WITH gs_afm-locno gs_afm-matnr.
              IF lv_dummy IS NOT INITIAL.
                TRY.
                    gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
                  CATCH cx_bali_runtime.
                    MESSAGE e027(zpd_i_cutoff).
                ENDTRY.
              ENDIF.
              CONTINUE.
            ENDIF.
          ENDIF.


          READ TABLE gt_lfa1 INTO DATA(ls_lfa1)
            WITH KEY idnumber = gs_afm-lifnr.
          IF sy-subrc IS INITIAL.
            gs_afm-partner = ls_lfa1-partner.
          ENDIF.

          TRY.
              gs_afm-plan_type = zcl_pe_hm_basic=>get_value( iv_id = '1031' ).
              gs_afm-slt_llt = zcl_pe_hm_basic=>get_value( iv_id = '1033' ).
            CATCH zcx_pe_hm.
              MESSAGE e004(zpd_afm).
          ENDTRY.
          gs_afm-ernam     = sy-uname.
          gs_afm-erdat     = sy-datum.


          APPEND gs_afm TO gt_afm.

        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD fill_final_periods.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    SORT ct_sg_dates BY source_grp ASCENDING matnr ASCENDING.


    LOOP AT ct_sg_dates ASSIGNING FIELD-SYMBOL(<ls_gs_dates>).
      IF lines( <ls_gs_dates>-dates ) IS INITIAL.
        CONTINUE.
      ENDIF.
      APPEND INITIAL LINE TO <ls_gs_dates>-result ASSIGNING FIELD-SYMBOL(<ls_result>).
      LOOP AT <ls_gs_dates>-dates ASSIGNING FIELD-SYMBOL(<ls_date>).   "#EC CI_NESTED
        IF <ls_date>-season IS INITIAL.
          LOOP AT gt_mara_seas ASSIGNING FIELD-SYMBOL(<ls_seas>) WHERE matnr = <ls_gs_dates>-matnr. "#EC CI_NESTED
            IF <ls_date>-datum BETWEEN <ls_seas>-zzfirstexftyd AND <ls_seas>-zzlastexftyd.
              <ls_date>-season = <ls_seas>-fsh_season.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF <ls_date>-start_ind = abap_true AND ( <ls_result>-begda IS INITIAL OR <ls_result>-begda = '00000000' ).
          <ls_result>-begda = <ls_date>-datum.
          <ls_result>-zhardex_s = <ls_date>-zhardex.
          <ls_result>-season = <ls_date>-season.
        ELSEIF <ls_date>-start_ind = abap_true AND <ls_result>-begda IS NOT INITIAL AND <ls_result>-begda NE <ls_date>-datum.
          <ls_result>-endda = <ls_date>-datum - 1.
          <ls_result>-zhardex_e = <ls_date>-zhardex.
          <ls_result>-season = <ls_date>-season.
          APPEND INITIAL LINE TO <ls_gs_dates>-result ASSIGNING <ls_result>.
          <ls_result>-begda = <ls_date>-datum.
          <ls_result>-zhardex_s = <ls_date>-zhardex.
          <ls_result>-season = <ls_date>-season.
        ELSEIF <ls_date>-end_ind = abap_true AND ( <ls_result>-endda IS INITIAL OR <ls_result>-endda = '00000000' ) AND
           ( <ls_result>-begda IS INITIAL OR <ls_result>-begda = '00000000' ).
          DATA(ls_prev) = VALUE #( <ls_gs_dates>-result[ lines( <ls_gs_dates>-result ) - 1 ] ).
          <ls_result>-begda = ls_prev-endda + 1.
          <ls_result>-endda = <ls_date>-datum.
          <ls_result>-season = <ls_date>-season.
        ELSEIF <ls_date>-end_ind = abap_true AND ( <ls_result>-endda IS INITIAL OR <ls_result>-endda = '00000000' ).
          <ls_result>-endda = <ls_date>-datum.
          <ls_result>-zhardex_e = <ls_date>-zhardex.
          <ls_result>-season = <ls_date>-season.
        ENDIF.
        IF <ls_result>-begda IS NOT INITIAL AND <ls_result>-endda IS NOT INITIAL.
          APPEND INITIAL LINE TO <ls_gs_dates>-result ASSIGNING <ls_result>.
        ENDIF.
      ENDLOOP.

      DELETE <ls_gs_dates>-result WHERE ( begda = '00000000' OR begda IS INITIAL ) OR
                                        ( endda = '00000000' OR endda IS INITIAL ).

      SORT <ls_gs_dates>-result.                       "#EC CI_SORTLOOP
      DELETE ADJACENT DUPLICATES FROM <ls_gs_dates>-result.
    ENDLOOP.
  ENDMETHOD.


  METHOD fill_pm_periods.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    IF is_base-where IS NOT INITIAL.
      LOOP AT ct_pmprior INTO DATA(ls_pmprior) WHERE (is_base-where).
        READ TABLE gt_spm TRANSPORTING NO FIELDS WITH KEY matnr = is_base-matnr  land1 = ls_pmprior-origin.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.
        SORT ct_dates BY datum ASCENDING.              "#EC CI_SORTLOOP
        READ TABLE ct_dates ASSIGNING FIELD-SYMBOL(<ls_dates_s>) WITH KEY start_ind = abap_true table = 'S'.
        IF ls_pmprior-to_dat < <ls_dates_s>-datum AND sy-subrc = 0.
          CONTINUE.
        ENDIF.
        APPEND VALUE #( start_ind = abap_true
                       end_ind = ''
                       datum = COND #( WHEN sy-subrc = 0 AND ls_pmprior-frm_dat < <ls_dates_s>-datum THEN <ls_dates_s>-datum ELSE ls_pmprior-frm_dat )
                       zhardex = COND #( WHEN ls_pmprior-zhardex = 'X' THEN 'X' ELSE '') ) TO ct_dates.

        SORT ct_dates BY datum DESCENDING.             "#EC CI_SORTLOOP
        READ TABLE ct_dates ASSIGNING FIELD-SYMBOL(<ls_dates_e>) WITH KEY end_ind = abap_true table = 'S'. "#EC CI_SUBRC
        APPEND VALUE #( start_ind = ''
                        end_ind = abap_true
                        datum = COND #( WHEN sy-subrc = 0 AND ls_pmprior-to_dat > <ls_dates_e>-datum THEN <ls_dates_e>-datum ELSE ls_pmprior-to_dat )
                        zhardex = COND #( WHEN ls_pmprior-zhardex = 'X' THEN 'X' ELSE '') ) TO ct_dates.
      ENDLOOP.
    ENDIF.

    LOOP AT ct_dates ASSIGNING <ls_dates_e> WHERE end_ind = abap_true.
      DATA(lv_indx) = sy-tabix.
      READ TABLE ct_dates TRANSPORTING NO FIELDS WITH KEY start_ind = abap_true datum = <ls_dates_e>-datum.
      IF sy-subrc = 0.
        DELETE ct_dates INDEX lv_indx.
      ENDIF.
    ENDLOOP.
    SORT ct_dates BY datum ASCENDING.
  ENDMETHOD.


  METHOD fill_spm_periods.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    LOOP AT gt_spm INTO DATA(ls_spm) WHERE zspprodiv = is_base-zspprodiv
                                        AND matnr     = is_base-matnr
                                        AND zzmpg     = is_base-zzmpg
                                        AND zfactory  = is_base-zfactory
                                        AND land1     = is_base-land1. "#EC CI_NESTED
      APPEND VALUE #( start_ind = abap_true
                      end_ind = ''
                      datum = ls_spm-zspfefdt
                      table = 'S'
                      season = ls_spm-season )
                      TO ct_dates.
      APPEND VALUE #( start_ind = ''
                      end_ind = abap_true
                      datum = ls_spm-zsplefdt
                      table = 'S'
                      season = ls_spm-season )
                       TO ct_dates.
    ENDLOOP.
  ENDMETHOD.


  METHOD final_priority.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    DATA: lt_afm TYPE zpd_tt_afm.
    LOOP AT gt_afm ASSIGNING FIELD-SYMBOL(<ls_afm>).
      lt_afm[] = gt_afm[].
      DELETE lt_afm WHERE source_grp <> <ls_afm>-source_grp.
      DELETE lt_afm WHERE matnr <> <ls_afm>-matnr.
      DELETE lt_afm WHERE frm_dateu <> <ls_afm>-frm_dateu AND to_datef <> <ls_afm>-to_datef.
      SORT lt_afm BY matrixprio ASCENDING spmpriority ASCENDING. "#EC CI_SORTLOOP
      IF lines( lt_afm ) > 1.
        <ls_afm>-zmsource = abap_true.
      ELSE.
        CLEAR: <ls_afm>-zmsource.
      ENDIF.
      DELETE ADJACENT DUPLICATES FROM lt_afm COMPARING matrixprio spmpriority.
      READ TABLE lt_afm TRANSPORTING NO FIELDS WITH KEY matrixprio = <ls_afm>-matrixprio spmpriority = <ls_afm>-spmpriority.
      IF sy-subrc = 0.
        DATA(lv_index) = sy-tabix - 1.
        <ls_afm>-finalprio = sy-abcde+lv_index(1).
      ENDIF.
      READ TABLE gt_spm TRANSPORTING NO FIELDS WITH KEY matnr = <ls_afm>-matnr zspmprplh = abap_true.
      IF sy-subrc = 0.
        READ TABLE gt_mara_c TRANSPORTING NO FIELDS WITH KEY satnr = <ls_afm>-matnr.
        IF sy-subrc = 0.
          CLEAR: <ls_afm>-finalprio, <ls_afm>-matrixprio, <ls_afm>-spmpriority.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD generate.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    process_spm_periods( ).
    ph_process( ).
    create_afm_table( ).
    final_priority( ).
    merge_rows( ).
    set_marc_update_flag( ).
    delete_update_afm_entries( ).
    save_log( ).

  ENDMETHOD.


  METHOD get_afm_table.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    rt_afm[] = gt_afm[].
  ENDMETHOD.


  METHOD get_condition.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    READ TABLE gt_pmprior TRANSPORTING NO FIELDS
        WITH KEY source_grp = iv_sg
                 spart   = CONV #( cs_base-zspprodiv )
                 progrp  = cs_base-zzmpg
                 lfnr    = CONV #( cs_base-zfactory )
                 origin  = cs_base-land1.

    IF sy-subrc IS INITIAL.
      cs_base-where = `SPART = ` && `'` && |{ cs_base-zspprodiv }| && `'`  && ` AND ` &&
                       `PROGRP = ` && `'` && |{ cs_base-zzmpg }| && `'`  && ` AND ` &&
                       `LFNR = ` && `'` && |{ cs_base-zfactory }| && `'`  && ` AND ` &&
                       `ORIGIN = ` && `'` && |{ cs_base-land1 }| && `'` .
    ELSE.
      READ TABLE gt_pmprior TRANSPORTING NO FIELDS
        WITH KEY source_grp = iv_sg
                 spart   = CONV #( cs_base-zspprodiv )
                 lfnr    = CONV #( cs_base-zfactory )
                 origin  = cs_base-land1.
      IF sy-subrc IS INITIAL.
        cs_base-where = `SPART = ` && `'` && |{ cs_base-zspprodiv }| && `'`  && ` AND ` &&
                   `LFNR = ` && `'` && |{ cs_base-zfactory }| && `'`  && ` AND ` &&
                   `ORIGIN = ` && `'` && |{ cs_base-land1 }| && `'` .
      ELSE.
        READ TABLE gt_pmprior TRANSPORTING NO FIELDS
          WITH KEY source_grp = iv_sg
                   spart   = CONV #( cs_base-zspprodiv )
                   progrp  = cs_base-zzmpg
                   origin  = cs_base-land1.
        IF sy-subrc IS INITIAL.
          cs_base-where = `SPART = ` && `'` && |{ cs_base-zspprodiv }| && `'`  && ` AND ` &&
                     `PROGRP = ` && `'` && |{ cs_base-zzmpg }| && `'`  && ` AND ` &&
                     `ORIGIN = ` && `'` && |{ cs_base-land1 }| && `'` .
        ELSE.
          READ TABLE gt_pmprior TRANSPORTING NO FIELDS
            WITH KEY source_grp = iv_sg
                     spart   = CONV #( cs_base-zspprodiv )
                     origin  = cs_base-land1.
          IF sy-subrc IS INITIAL.
            cs_base-where = `SPART = ` && `'` && |{ cs_base-zspprodiv }| && `'`  && ` AND ` &&
                       `ORIGIN = ` && `'` && |{ cs_base-land1 }| && `'` .
          ELSE.
            READ TABLE gt_pmprior TRANSPORTING NO FIELDS
                WITH KEY source_grp = iv_sg
                         spart   = CONV #( cs_base-zspprodiv ).
            IF sy-subrc IS INITIAL.
              cs_base-where = |SPART = { cs_base-zspprodiv } |.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.






  ENDMETHOD.


  METHOD get_updated_afm.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 11.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    rt_afm = gt_afm_upd.
  ENDMETHOD.


  METHOD merge_rows.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
*    Final priority


    SELECT record_uuid, matnr, lifnr, locno, source_grp, frm_dateu,
       to_datef, finalprio, matrixprio, spmpriority, plan_type,
       zdpldtme, slt_llt, loekz, blekz, dismm, coo, ernam, erdat,
       aenam, aedat, place_holder_article, product_division,
       field_level_lock, frm_dateu_lock, to_datef_lock, finalprio_lock,
       plan_type_lock, slt_llt_lock, partner, zmsource, rel_marc_up
  FROM zpd_t_afm_new INTO TABLE @DATA(lt_afm_ch)
  FOR ALL ENTRIES IN @gt_afm
  WHERE matnr = @gt_afm-matnr AND
        lifnr = @gt_afm-lifnr AND
        source_grp = @gt_afm-source_grp.                  "#EC CI_SUBRC

    LOOP AT gt_afm ASSIGNING FIELD-SYMBOL(<ls_afm>).
      DATA(lv_index_afm) = sy-tabix.
      READ TABLE lt_afm_ch ASSIGNING FIELD-SYMBOL(<ls_afm_ch>) WITH KEY
                  matnr = <ls_afm>-matnr lifnr = <ls_afm>-lifnr locno = <ls_afm>-locno
                  source_grp = <ls_afm>-source_grp frm_dateu = <ls_afm>-frm_dateu
                  to_datef  = <ls_afm>-to_datef finalprio = <ls_afm>-finalprio
                  matrixprio = <ls_afm>-matrixprio spmpriority = <ls_afm>-spmpriority
                  plan_type = <ls_afm>-plan_type zdpldtme = <ls_afm>-zdpldtme
                  slt_llt = <ls_afm>-slt_llt loekz = <ls_afm>-loekz blekz = <ls_afm>-blekz
                  dismm = <ls_afm>-dismm coo = <ls_afm>-coo place_holder_article = <ls_afm>-place_holder_article
                  product_division = <ls_afm>-product_division field_level_lock = <ls_afm>-field_level_lock
                  frm_dateu_lock = <ls_afm>-frm_dateu_lock to_datef_lock = <ls_afm>-to_datef_lock
                  finalprio_lock = <ls_afm>-finalprio_lock plan_type_lock = <ls_afm>-plan_type_lock
                  slt_llt_lock = <ls_afm>-slt_llt_lock partner = <ls_afm>-partner zmsource = <ls_afm>-zmsource.
      IF sy-subrc = 0.
        <ls_afm>-record_uuid = <ls_afm_ch>-record_uuid.
      ELSE.
        TRY.
            <ls_afm>-record_uuid = cl_system_uuid=>create_uuid_c32_static( ).
          CATCH cx_uuid_error.
            EXIT.
          CATCH cx_static_check.
            EXIT.
        ENDTRY.
      ENDIF.

      LOOP AT gt_afm ASSIGNING FIELD-SYMBOL(<ls_afm_t>)
         WHERE to_datef = <ls_afm>-to_datef AND
        frm_dateu = <ls_afm>-frm_dateu AND
        ( finalprio <> <ls_afm>-finalprio OR
          matrixprio <> <ls_afm>-matrixprio OR
          spmpriority <> <ls_afm>-spmpriority ) AND
        matnr = <ls_afm>-matnr AND
        source_grp = <ls_afm>-source_grp AND
        lifnr = <ls_afm>-lifnr.                          "#EC CI_NESTED
        EXIT.
      ENDLOOP.
      IF sy-subrc = 0.
        CONTINUE.
      ENDIF.

      READ TABLE gt_afm ASSIGNING FIELD-SYMBOL(<ls_afm_merge>)
      WITH KEY matnr = <ls_afm>-matnr
               lifnr = <ls_afm>-lifnr
               locno = <ls_afm>-locno
               source_grp = <ls_afm>-source_grp
               matrixprio = <ls_afm>-matrixprio
               spmpriority = <ls_afm>-spmpriority
               finalprio = <ls_afm>-finalprio
               to_datef = <ls_afm>-frm_dateu - 1
               coo = <ls_afm>-coo
               zdpldtme = <ls_afm>-zdpldtme.
      IF sy-subrc = 0.
        LOOP AT gt_afm ASSIGNING <ls_afm_t>
          WHERE to_datef = <ls_afm_merge>-to_datef AND
                frm_dateu = <ls_afm_merge>-frm_dateu AND
                ( finalprio <> <ls_afm>-finalprio OR
                  matrixprio <> <ls_afm>-matrixprio OR
                  spmpriority <> <ls_afm>-spmpriority ) AND
                matnr = <ls_afm_merge>-matnr AND
                source_grp = <ls_afm_merge>-source_grp AND
                lifnr = <ls_afm>-lifnr.                        "#EC CI_NESTED
          EXIT.
        ENDLOOP.
        IF sy-subrc <> 0.
          <ls_afm_merge>-to_datef = <ls_afm>-to_datef.
          DELETE gt_afm INDEX lv_index_afm.
          CLEAR: lv_index_afm.
          READ TABLE lt_afm_ch ASSIGNING <ls_afm_ch> WITH KEY
            matnr = <ls_afm_merge>-matnr lifnr = <ls_afm_merge>-lifnr locno = <ls_afm_merge>-locno
            source_grp = <ls_afm_merge>-source_grp frm_dateu = <ls_afm_merge>-frm_dateu
            to_datef  = <ls_afm_merge>-to_datef finalprio = <ls_afm_merge>-finalprio
            matrixprio = <ls_afm_merge>-matrixprio spmpriority = <ls_afm_merge>-spmpriority
            plan_type = <ls_afm_merge>-plan_type zdpldtme = <ls_afm_merge>-zdpldtme
            slt_llt = <ls_afm_merge>-slt_llt loekz = <ls_afm_merge>-loekz blekz = <ls_afm_merge>-blekz
            dismm = <ls_afm_merge>-dismm coo = <ls_afm_merge>-coo place_holder_article = <ls_afm_merge>-place_holder_article
            product_division = <ls_afm_merge>-product_division field_level_lock = <ls_afm_merge>-field_level_lock
            frm_dateu_lock = <ls_afm_merge>-frm_dateu_lock to_datef_lock = <ls_afm_merge>-to_datef_lock
            finalprio_lock = <ls_afm_merge>-finalprio_lock plan_type_lock = <ls_afm_merge>-plan_type_lock
            slt_llt_lock = <ls_afm_merge>-slt_llt_lock partner = <ls_afm_merge>-partner zmsource = <ls_afm_merge>-zmsource.
          IF sy-subrc = 0.
            <ls_afm_merge>-record_uuid = <ls_afm_ch>-record_uuid.
          ENDIF.
        ELSE.
          CONTINUE.
        ENDIF.

      ELSE.
        CONTINUE.
      ENDIF.



    ENDLOOP.
  ENDMETHOD.


  METHOD ph_process.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    DATA: lt_spm TYPE TABLE OF gtyp_spm.
    lt_spm[] = gt_spm[].
    DELETE lt_spm WHERE zspmprplh IS INITIAL.
    CHECK lines( lt_spm ) <> 0.

    SELECT source_grp, spart FROM zpd_t_pmprior INTO TABLE @DATA(lt_pmprior)
              WHERE source_grp IN @gs_selection-srcgrp GROUP BY source_grp, spart.
    IF sy-subrc = 0.
      lt_pmprior = VALUE #( LET lt_temp = lt_pmprior IN FOR ls_temp IN lt_temp
                          ( source_grp = ls_temp-source_grp
                            spart = |{ ls_temp-spart ALPHA = OUT }| ) ).
    ENDIF.
    TRY.
        DATA(lv_type) = zcl_pe_hm_basic=>get_value( iv_id = '1126' ).
      CATCH zcx_pe_hm.
        MESSAGE e004(zpd_afm).
    ENDTRY.
    IF lines( lt_spm ) > 0.


      SELECT a~source_grp,
            a~matnr,
            a~lifnr,
            a~frm_dateu,
            a~to_datef,
            b~country,
            c~idnumber
       FROM zpd_t_afm_guidnc AS a
       INNER JOIN but0id AS c ON c~idnumber = a~lifnr
       INNER JOIN i_supplier AS b ON b~supplier = c~partner
        FOR ALL ENTRIES IN @lt_spm
         WHERE matnr = @lt_spm-matnr
           AND c~type = @lv_type
           AND source_grp IN @gs_selection-srcgrp
         INTO TABLE @DATA(lt_src_guid).            "#EC CI_NO_TRANSFORM
      IF sy-subrc <> 0.
        MESSAGE e000(zpd_afm_m) INTO DATA(lv_dummy) .
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
      ELSE.
        SELECT b~supplier, b~country, a~idnumber, a~partner
        FROM but0id  AS a
        INNER JOIN  i_supplier AS b ON b~supplier = a~partner
        FOR ALL ENTRIES IN @lt_src_guid
        WHERE a~idnumber = @lt_src_guid-idnumber
        APPENDING TABLE @gt_lfa1.                  "#EC CI_NO_TRANSFORM
        IF sy-subrc <> 0.
          MESSAGE e032(zpd_afm) INTO lv_dummy.
          TRY.
              gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
            CATCH cx_bali_runtime.
              MESSAGE e027(zpd_i_cutoff).
          ENDTRY.
        ENDIF.
      ENDIF.
    ENDIF.
    DELETE gt_spm WHERE zspmprplh IS NOT INITIAL.
    LOOP AT lt_src_guid ASSIGNING FIELD-SYMBOL(<ls_src_guid>).
      READ TABLE lt_pmprior TRANSPORTING NO FIELDS WITH KEY source_grp = <ls_src_guid>-source_grp.
      IF sy-subrc <> 0.
        MESSAGE e001(zpd_afm_m) WITH <ls_src_guid>-source_grp INTO lv_dummy .
        IF lv_dummy IS NOT INITIAL.
          TRY.
              gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
            CATCH cx_bali_runtime.
              MESSAGE e027(zpd_i_cutoff).
          ENDTRY.
        ENDIF.

      ENDIF.
      LOOP AT gt_mara_seas ASSIGNING FIELD-SYMBOL(<ls_seas>) WHERE matnr = <ls_src_guid>-matnr. "#EC CI_NESTED
        APPEND INITIAL LINE TO gt_spm ASSIGNING FIELD-SYMBOL(<ls_spm_temp>).
        IF <ls_src_guid>-frm_dateu > <ls_seas>-zzfirstexftyd AND <ls_src_guid>-frm_dateu > <ls_seas>-zzlastexftyd.
          CONTINUE.
        ENDIF.

        <ls_spm_temp>-zspfefdt = COND #( WHEN <ls_seas>-zzfirstexftyd >= <ls_src_guid>-frm_dateu AND  <ls_seas>-zzfirstexftyd <= <ls_src_guid>-to_datef THEN <ls_seas>-zzfirstexftyd
                                         WHEN <ls_seas>-zzfirstexftyd < <ls_src_guid>-frm_dateu THEN <ls_src_guid>-frm_dateu
                                         WHEN <ls_seas>-zzfirstexftyd > <ls_src_guid>-to_datef THEN <ls_src_guid>-to_datef ).

        <ls_spm_temp>-zsplefdt = COND #( WHEN <ls_seas>-zzlastexftyd >= <ls_src_guid>-frm_dateu AND <ls_seas>-zzlastexftyd <= <ls_src_guid>-to_datef THEN <ls_seas>-zzlastexftyd
                                         WHEN <ls_seas>-zzlastexftyd > <ls_src_guid>-to_datef THEN <ls_src_guid>-to_datef
                                         WHEN <ls_seas>-zzlastexftyd < <ls_src_guid>-frm_dateu THEN <ls_src_guid>-frm_dateu ).
        " if valid from equals to valid to, then mark it for deletion
        IF <ls_spm_temp>-zspfefdt = <ls_spm_temp>-zsplefdt.
          CLEAR: <ls_spm_temp>.
          CONTINUE.
        ENDIF.


        <ls_spm_temp>-matnr = <ls_src_guid>-matnr.
        <ls_spm_temp>-zfactory = <ls_src_guid>-lifnr.

        <ls_spm_temp>-source_grp = <ls_src_guid>-source_grp.

        <ls_spm_temp>-land1 = <ls_src_guid>-country.

        <ls_spm_temp>-zdpldtme = <ls_seas>-zzldt.
        <ls_spm_temp>-zspmprplh = abap_true.
        READ TABLE gt_prodiv INTO DATA(ls_prodiv)
          WITH KEY matnr = <ls_spm_temp>-matnr.
        IF sy-subrc IS INITIAL.
          <ls_spm_temp>-zspprodiv = ls_prodiv-fsh_mg_at1.
          TRY.
              DATA(lr_mlt) = zcl_pe_hm_basic=>get_table( iv_id = '2153' ).
            CATCH zcx_pe_hm.
              MESSAGE e004(zpd_afm).
          ENDTRY.

          READ TABLE lr_mlt ASSIGNING FIELD-SYMBOL(<ls_mlt>) WITH KEY field1 = ls_prodiv-fsh_mg_at1.
          IF sy-subrc = 0.
            <ls_spm_temp>-zdpldtme = <ls_mlt>-field2.
          ENDIF.

        ENDIF.
        READ TABLE gt_marc INTO DATA(ls_marc)
          WITH KEY matnr = <ls_spm_temp>-matnr.
        IF sy-subrc IS INITIAL.
          <ls_spm_temp>-zzmpg = ls_marc-dismm.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    CHECK lines( gt_spm ) IS NOT INITIAL.
    SORT gt_spm.
    DELETE gt_spm WHERE zspfefdt IS INITIAL AND zsplefdt IS INITIAL.
    DELETE gt_spm WHERE matnr IS INITIAL.
    DELETE ADJACENT DUPLICATES FROM gt_spm.

  ENDMETHOD.


  METHOD process_spm_periods.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    DATA: lv_tabix_spm TYPE sy-tabix.
    DATA: lv_tabix_season TYPE sy-tabix.
    DATA: ls_spm TYPE gtyp_spm.
    DATA: ls_base TYPE gtyp_base.
    SELECT spmpriority FROM ZPD_T_ex_prio INTO TABLE @DATA(lt_exprio) WHERE ex_ind = @abap_true.
    IF sy-subrc = 0.
      LOOP AT lt_exprio ASSIGNING FIELD-SYMBOL(<ls_prio>).
        DELETE gt_spmafs WHERE zspprity = <ls_prio>-spmpriority.
      ENDLOOP.
    ENDIF.
    TRY.
        DATA(lr_mtartt) = zcl_pe_hm_basic=>get_range( iv_id = '550' ).
      CATCH zcx_pe_hm.
        MESSAGE e004(zpd_afm) INTO DATA(lv_dummy).
        TRY.
            gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
          CATCH cx_bali_runtime.
            MESSAGE e027(zpd_i_cutoff).
        ENDTRY.
    ENDTRY.
    TRY.
        DATA(lv_mtart) = zcl_pe_hm_basic=>get_value( iv_id = '1026' ).
      CATCH zcx_pe_hm.
        MESSAGE e004(zpd_afm) INTO lv_dummy .
        IF lv_dummy IS NOT INITIAL.
          TRY.
              gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
            CATCH cx_bali_runtime.
              MESSAGE e027(zpd_i_cutoff).
          ENDTRY.
        ENDIF.
    ENDTRY.
    SORT gt_mara_seas BY matnr fsh_season ASCENDING.
    LOOP AT gt_mara_seas ASSIGNING FIELD-SYMBOL(<ls_mara_seas>).
      lv_tabix_spm = sy-tabix.
      change_start_date( CHANGING cv_date = <ls_mara_seas>-zzfirstexftyd ).
      READ TABLE gt_active_seasons TRANSPORTING NO FIELDS WITH KEY season = <ls_mara_seas>-fsh_season.
      IF sy-subrc = 0.
        lv_tabix_season = sy-tabix.
        READ TABLE gt_mara_seas ASSIGNING FIELD-SYMBOL(<ls_mara_seas_next>) INDEX lv_tabix_spm + 1.
        IF sy-subrc = 0.
          change_start_date( CHANGING cv_date = <ls_mara_seas_next>-zzfirstexftyd ).
          IF lines( gt_active_seasons ) >= lv_tabix_season + 1.
            DATA(lv_season_next) = gt_active_seasons[ lv_tabix_season + 1 ]-season.
            IF <ls_mara_seas_next>-fsh_season = lv_season_next AND <ls_mara_seas>-matnr = <ls_mara_seas_next>-matnr.
              <ls_mara_seas>-zzlastexftyd = <ls_mara_seas_next>-zzfirstexftyd - 1.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
      CLEAR ls_spm.

      ls_spm-matnr = <ls_mara_seas>-matnr.
      ls_spm-season = <ls_mara_seas>-fsh_season.
      ls_spm-zspfefdt = <ls_mara_seas>-zzfirstexftyd.
      ls_spm-zsplefdt = <ls_mara_seas>-zzlastexftyd.

      READ TABLE gt_mara INTO DATA(ls_mara)
        WITH KEY product = <ls_mara_seas>-matnr.
      IF sy-subrc IS INITIAL.
        IF ls_mara-mtart NOT IN lr_mtartt.
          CLEAR: ls_spm-zzmpg.
        ENDIF.
        ls_spm-zzmpg = ls_mara-zzmpg.
      ELSE.
        CLEAR: ls_spm-zzmpg.
      ENDIF.

      READ TABLE gt_prodiv INTO DATA(ls_prodiv)
        WITH KEY matnr = <ls_mara_seas>-matnr.
      IF sy-subrc IS INITIAL.
        ls_spm-zspprodiv = |{ ls_prodiv-fsh_mg_at1 ALPHA = OUT }|.
      ENDIF.

      IF ls_mara-mtart EQ lv_mtart.
        ls_spm-zspmprplh = abap_true.
      ENDIF.

      LOOP AT gt_spmafs ASSIGNING FIELD-SYMBOL(<ls_spmafs>)
             WHERE matnr EQ <ls_mara_seas>-matnr
               AND season EQ <ls_mara_seas>-fsh_season.  "#EC CI_NESTED
        ls_spm-zfactory = <ls_spmafs>-zfactory.
        ls_spm-zdpldtme = <ls_spmafs>-zdpldtme.
        ls_spm-zspprity = <ls_spmafs>-zspprity.

        READ TABLE gt_lfa1 INTO DATA(ls_lfa1)
          WITH KEY idnumber = CONV #( <ls_spmafs>-zfactory ) ##OPERATOR[IDNUMBER].
        IF sy-subrc IS INITIAL.
          ls_spm-land1 = ls_lfa1-country.
        ELSE.
          CLEAR: ls_spm-land1.
        ENDIF.
        READ TABLE gt_spm ASSIGNING FIELD-SYMBOL(<ls_spm_prev>)
          WITH KEY matnr = <ls_mara_seas>-matnr
                   zsplefdt = <ls_mara_seas>-zzfirstexftyd - 1
                   zspprity = ls_spm-zspprity
                   zspprodiv = ls_spm-zspprodiv
                   zdpldtme = ls_spm-zdpldtme
                   zspmprplh = ls_spm-zspmprplh
                   zzmpg = ls_spm-zzmpg
                   land1 = ls_spm-land1
                   season = <ls_mara_seas>-fsh_season.
        IF sy-subrc = 0.
          <ls_spm_prev>-zsplefdt = <ls_mara_seas>-zzlastexftyd.
        ELSE.
          APPEND ls_spm TO gt_spm.
          ls_base-matnr     = ls_spm-matnr.
          ls_spm-zspprodiv = |{ ls_spm-zspprodiv ALPHA = OUT }|.
          ls_base-zspprodiv = ls_spm-zspprodiv.
          ls_base-zzmpg     = ls_spm-zzmpg.
          ls_base-zfactory  = ls_spm-zfactory.
          ls_base-land1     = ls_spm-land1.
          IF ls_spm-zspmprplh <> abap_true.
            COLLECT ls_base INTO gt_base.
          ENDIF.
        ENDIF.
      ENDLOOP.
      IF sy-subrc <> 0 AND ls_spm-zspmprplh = abap_true.
        APPEND ls_spm TO gt_spm.
      ENDIF.
    ENDLOOP.




  ENDMETHOD.


  METHOD save_log.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 11.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*

    TRY.
        cl_bali_log_db=>get_instance( )->save_log( log                        = gif_log
                                                   assign_to_current_appl_job = abap_true ).
        COMMIT WORK.
      CATCH cx_bali_runtime.
        MESSAGE e014(zsd_discount).
    ENDTRY.
  ENDMETHOD.


  METHOD set_marc_update_flag.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* USTINKON     | 07.12.2023 | 27180     : P&FE - [Build] - AFM program *
*              |            | DS4K972132                               *
*----------------------------------------------------------------------*
    DATA: lv_datum TYPE sy-datum.
    IF gt_afm[] IS NOT INITIAL.
      SELECT matnr, locno, frm_dateu, to_datef, zdpldtme, finalprio, blekz, record_uuid, source_grp, lifnr, rel_marc_up
        FROM zpd_t_afm_new INTO TABLE @DATA(lt_afm_rel)
        FOR ALL ENTRIES IN @gt_afm
        WHERE matnr = @gt_afm-matnr AND locno = @gt_afm-locno AND frm_dateu = @gt_afm-frm_dateu AND to_datef = @gt_afm-to_datef.
      IF sy-subrc = 0.
        SORT lt_afm_rel BY matnr locno frm_dateu to_datef finalprio.
        DATA(lt_afm_rel_tmp) = lt_afm_rel.
        CLEAR: lt_afm_rel_tmp.
        lt_afm_rel_tmp = CORRESPONDING #( lt_afm_rel EXCEPT record_uuid source_grp rel_marc_up ) .
        SORT lt_afm_rel_tmp BY frm_dateu DESCENDING to_datef DESCENDING finalprio ASCENDING.
        DELETE ADJACENT DUPLICATES FROM lt_afm_rel_tmp COMPARING ALL FIELDS.

        LOOP AT lt_afm_rel_tmp ASSIGNING FIELD-SYMBOL(<ls_tmp>).

          lv_datum = sy-datum + <ls_tmp>-zdpldtme.
          IF lv_datum BETWEEN <ls_tmp>-frm_dateu AND <ls_tmp>-to_datef.
          ELSE.
            DELETE lt_afm_rel_tmp.
          ENDIF.
        ENDLOOP.
        IF lines( lt_afm_rel_tmp ) > 0.
          lt_afm_rel_tmp[ 1 ]-rel_marc_up = 'R'.
        ENDIF.
        DELETE lt_afm_rel_tmp WHERE rel_marc_up IS INITIAL.
        LOOP AT gt_afm ASSIGNING FIELD-SYMBOL(<ls_afm>).
          READ TABLE lt_afm_rel_tmp ASSIGNING <ls_tmp>
          WITH KEY matnr = <ls_afm>-matnr locno = <ls_afm>-locno
                           frm_dateu = <ls_afm>-frm_dateu to_datef = <ls_afm>-to_datef
                           blekz = <ls_afm>-blekz lifnr = <ls_afm>-lifnr.
          IF sy-subrc = 0.
            <ls_afm>-rel_marc_up = <ls_tmp>-rel_marc_up.
          ENDIF.
        ENDLOOP.
      ELSE.
        LOOP AT gt_afm ASSIGNING <ls_afm>.
          <ls_afm>-rel_marc_up = 'R'.
        ENDLOOP.
      ENDIF.
    ELSE.
      MESSAGE s016(zpd_afm) INTO DATA(lv_dummy) ##NEEDED.
      TRY.
          gif_log->add_item( cl_bali_message_setter=>create_from_sy( ) ).
        CATCH cx_bali_runtime.
          MESSAGE e027(zpd_i_cutoff).
      ENDTRY.
    ENDIF.





  ENDMETHOD.
ENDCLASS.