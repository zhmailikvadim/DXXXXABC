CLASS zcl_pd_price_overview DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_sadl_exit .
    INTERFACES if_sadl_exit_filter_transform .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_PD_PRICE_OVERVIEW IMPLEMENTATION.


  METHOD if_sadl_exit_filter_transform~map_atom.
*    TRY.
    CASE iv_operator.

      WHEN if_sadl_exit_filter_transform~co_operator-equals        .
*            DATA(lv_validon) = cl_sadl_cond_prov_factory_pub=>create_simple_cond_factory( )->element( 'ValidOnTest' ).
        DATA(lo_validfrom) = cl_sadl_cond_prov_factory_pub=>create_simple_cond_factory( )->element( 'VALIDFROM' ).
        DATA(lo_validto) = cl_sadl_cond_prov_factory_pub=>create_simple_cond_factory( )->element( 'VALIDTO' ).

        DATA(lo_validfrommvke) = cl_sadl_cond_prov_factory_pub=>create_simple_cond_factory( )->element( 'VALIDFROMMVKE' ).
        DATA(lo_validtomvke) = cl_sadl_cond_prov_factory_pub=>create_simple_cond_factory( )->element( 'VALIDTOMVKE' ).

*       ro_condition = lv_validfrom->equals( iv_value ).

*        ro_condition = lo_validfrom->less_than_or_equals( iv_value )->and( lo_validto->greater_than_or_equals( iv_value ) )->or(
*                       lo_validtomvke->less_than_or_equals( iv_value ) )->and( lo_validtomvke->greater_than_or_equals( iv_value ) ).

*DATA(lo_cond_factory) = cl_sadl_cond_prov_factory_pub=>create_basic_condition_factory( ).
*ro_condition = lo_cond_factory->condition(
*                    name         = `MP_TITLE`    operator     = `CP` low = lv_search_term
*                    )->or( lo_cond_factory->condition(
*                    name         = `MP_ID`       operator     = `CP` low = lv_search_term )
*                    ) .

*      WHEN if_sadl_exit_filter_transform~co_operator-less_than     .
*        ro_condition = flightdate->less_than( lv_date  ).
*
*      WHEN if_sadl_exit_filter_transform~co_operator-greater_than  .
*        ro_condition = flightdate->greater_than( lv_date  ).
*
*      WHEN if_sadl_exit_filter_transform~co_operator-is_null       .
*        ro_condition = flightdate->is_null( ).
*
*
*      WHEN OTHERS.
*        "Operator not expected
*        RAISE EXCEPTION TYPE /dmo/cx_virtual_elements
*          EXPORTING
*            textid   = /dmo/cx_virtual_elements=>filter_operator_not_allowed
*            entity   = iv_entity
*            element  = iv_element
*            operator = iv_operator.
    ENDCASE.

*      CATCH cx_sadl_exit_filter_not_supp cx_sadl_exit.
*    ENDTRY.
  ENDMETHOD.
ENDCLASS.