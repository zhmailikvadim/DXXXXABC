CLASS ltc_send_to_kafka DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
  FINAL.

  PRIVATE SECTION.

    METHODS no_topic FOR TESTING.
    METHODS no_key FOR TESTING.
    METHODS no_value FOR TESTING.
    METHODS no_metadata FOR TESTING.
    METHODS no_payload FOR TESTING.
    METHODS no_version FOR TESTING.
    METHODS no_source FOR TESTING.
    METHODS no_time FOR TESTING.
    METHODS no_id FOR TESTING.
    METHODS correct FOR TESTING.

ENDCLASS.

CLASS ltc_send_to_kafka IMPLEMENTATION.

  METHOD no_topic.

    TYPES: BEGIN OF ltyp_s_message,
             key   TYPE zpe_s_kafka_key,
             value TYPE zpe_s_kafka_value,
           END OF ltyp_s_message.

    DATA: ls_message TYPE ltyp_s_message.

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'TOPIC'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_key.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             value TYPE zpe_s_kafka_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'mb_o2c.saps4hana.event.listing_condition' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).

*   OK, no errors - KEY is not mandatory
    READ TABLE lt_messages WITH KEY type = 'E' TRANSPORTING NO FIELDS.
    cl_abap_unit_assert=>assert_subrc( exp = 4 ).

  ENDMETHOD.

  METHOD no_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'VALUE'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.

  METHOD no_metadata.

*    TYPES: BEGIN OF ltyp_s_metadata,
*             event_version TYPE zpe_s_kafka_metadata-event_version,
*             event_source  TYPE zpe_s_kafka_metadata-event_source,
*             event_name    TYPE zpe_s_kafka_metadata-event_name,
*             event_time    TYPE zpe_s_kafka_metadata-event_time,
*             event_id      TYPE zpe_s_kafka_metadata-event_id,
*             event_key     TYPE zpe_s_kafka_metadata-event_key,
*           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
*            metadata TYPE ltyp_s_metadata,
             payload TYPE string,
           END OF ltyp_s_value.


    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'METADATA'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_payload.

    TYPES: BEGIN OF ltyp_s_metadata,
             event_version TYPE zpe_s_kafka_metadata-event_version,
             event_source  TYPE zpe_s_kafka_metadata-event_source,
             event_name    TYPE zpe_s_kafka_metadata-event_name,
             event_time    TYPE zpe_s_kafka_metadata-event_time,
             event_id      TYPE zpe_s_kafka_metadata-event_id,
             event_key     TYPE zpe_s_kafka_metadata-event_key,
           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
             metadata TYPE ltyp_s_metadata,
*             payload  TYPE string,
           END OF ltyp_s_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'PAYLOAD'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_version.

    TYPES: BEGIN OF ltyp_s_metadata,
*            event_version TYPE zpe_s_kafka_metadata-event_version,
             event_source TYPE zpe_s_kafka_metadata-event_source,
             event_name   TYPE zpe_s_kafka_metadata-event_name,
             event_time   TYPE zpe_s_kafka_metadata-event_time,
             event_id     TYPE zpe_s_kafka_metadata-event_id,
             event_key    TYPE zpe_s_kafka_metadata-event_key,
           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
             metadata TYPE ltyp_s_metadata,
             payload  TYPE string,
           END OF ltyp_s_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'EVENT_VERSION'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_source.

    TYPES: BEGIN OF ltyp_s_metadata,
             event_version TYPE zpe_s_kafka_metadata-event_version,
*            event_source  TYPE zpe_s_kafka_metadata-event_source,
             event_name    TYPE zpe_s_kafka_metadata-event_name,
             event_time    TYPE zpe_s_kafka_metadata-event_time,
             event_id      TYPE zpe_s_kafka_metadata-event_id,
             event_key     TYPE zpe_s_kafka_metadata-event_key,
           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
             metadata TYPE ltyp_s_metadata,
             payload  TYPE string,
           END OF ltyp_s_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'EVENT_SOURCE'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_time.

    TYPES: BEGIN OF ltyp_s_metadata,
             event_version TYPE zpe_s_kafka_metadata-event_version,
             event_source  TYPE zpe_s_kafka_metadata-event_source,
             event_name    TYPE zpe_s_kafka_metadata-event_name,
*            event_time    TYPE zpe_s_kafka_metadata-event_time,
             event_id      TYPE zpe_s_kafka_metadata-event_id,
             event_key     TYPE zpe_s_kafka_metadata-event_key,
           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
             metadata TYPE ltyp_s_metadata,
             payload  TYPE string,
           END OF ltyp_s_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'EVENT_TIME'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD no_id.

    TYPES: BEGIN OF ltyp_s_metadata,
             event_version TYPE zpe_s_kafka_metadata-event_version,
             event_source  TYPE zpe_s_kafka_metadata-event_source,
             event_name    TYPE zpe_s_kafka_metadata-event_name,
             event_time    TYPE zpe_s_kafka_metadata-event_time,
*            event_id      TYPE zpe_s_kafka_metadata-event_id,
             event_key     TYPE zpe_s_kafka_metadata-event_key,
           END OF ltyp_s_metadata.

    TYPES: BEGIN OF ltyp_s_value,
             metadata TYPE ltyp_s_metadata,
             payload  TYPE string,
           END OF ltyp_s_value.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE ltyp_s_value,
           END OF ltyp_s_message.


    DATA(ls_message) = VALUE ltyp_s_message( topic = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).
    READ TABLE lt_messages WITH KEY number      = '0149'
                                    message_v1  = 'EVENT_ID'
                           TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( ).

  ENDMETHOD.


  METHOD correct.

    TYPES: BEGIN OF ltyp_s_message,
             topic TYPE zpe_kafka_topic,
             key   TYPE zpe_s_kafka_key,
             value TYPE zpe_s_kafka_value,
           END OF ltyp_s_message.

    DATA(ls_message) = VALUE ltyp_s_message( topic          = 'mb_o2c.saps4hana.event.listing_condition'
                                             key-event_name = 'ListingConditions_Create'
                                             key-event_key  = 'TEST' ).

    DATA(lt_messages) = zcl_pe_aif_send_to_kafka=>run( ls_message ).

    READ TABLE lt_messages WITH KEY type = 'E' TRANSPORTING NO FIELDS ##WARN_OK.
    cl_abap_unit_assert=>assert_subrc( exp = 4 ).

  ENDMETHOD.

ENDCLASS.