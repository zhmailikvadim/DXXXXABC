*"* use this source file for your ABAP unit test classes
CLASS ltc_test DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.

    DATA: mt_code   TYPE string_table,
          ms_result TYPE scirest_ad,
          mo_check  TYPE REF TO zcl_pe_atc_guidelines.

    METHODS: setup,
      mn001_001 FOR TESTING,
      mn001_002 FOR TESTING,
      mn002_001 FOR TESTING,
      mn002_002 FOR TESTING,
      mn003_001 FOR TESTING,
      mn004_001 FOR TESTING,
      mn005_001 FOR TESTING,
      mn007_001 FOR TESTING,
      mn007_002 FOR TESTING,
      mn008_001 FOR TESTING,
      mn008_002 FOR TESTING,
      mn008_003 FOR TESTING,
      mn010_001 FOR TESTING,
      mn010_002 FOR TESTING,
      mn011_001 FOR TESTING,
      mn011_002 FOR TESTING,
      mn012_001 FOR TESTING,
      mn013_001 FOR TESTING,
      mn016_001 FOR TESTING,
      mn016_002 FOR TESTING,
      mn018_001 FOR TESTING,
      mn018_002 FOR TESTING,
      mn019_001 FOR TESTING,
      mn020_001 FOR TESTING,
      mn020_002 FOR TESTING,
      mn020_003 FOR TESTING,
      mn020_005 FOR TESTING,
      mn020_006 FOR TESTING,
      mn020_007 FOR TESTING,
      mn020_008 FOR TESTING,
      mn020_009 FOR TESTING,
      mn020_010 FOR TESTING,
      mn021_001 FOR TESTING,
      mn021_002 FOR TESTING,
      mn021_003 FOR TESTING,
      mn021_004 FOR TESTING,
      mn021_005 FOR TESTING,
      mn022_001 FOR TESTING,
      mn022_002 FOR TESTING,
      mn023_001 FOR TESTING,
      mn023_002 FOR TESTING,
      mn024_001 FOR TESTING,
      mn024_002 FOR TESTING,
      mn024_003 FOR TESTING,
      mn024_004 FOR TESTING,
      mn025_001 FOR TESTING,
      mn025_002 FOR TESTING,
      mn025_003 FOR TESTING,
      mn025_004 FOR TESTING,
      mn026_001 FOR TESTING,
      mn026_002 FOR TESTING,
      mn027_001 FOR TESTING,
      mn027_002 FOR TESTING,
      mn028_001 FOR TESTING,
      mn028_002 FOR TESTING,
      mn029_001 FOR TESTING,
      mn029_002 FOR TESTING,
      mn030_001 FOR TESTING,
      mn032_001 FOR TESTING,
      mn032_002 FOR TESTING,
      mn032_003 FOR TESTING,
      mn032_004 FOR TESTING,
      mn032_006 FOR TESTING,
      mn032_007 FOR TESTING,
      mn032_008 FOR TESTING,
      mn032_009 FOR TESTING,
      mn032_010 FOR TESTING,
      mn032_012 FOR TESTING,
      mn033_001 FOR TESTING,
      mn033_002 FOR TESTING,
      mn033_003 FOR TESTING,
      mn033_004 FOR TESTING,
      mn033_005 FOR TESTING,
      mn034_001 FOR TESTING RAISING cx_static_check,
      mn034_002 FOR TESTING RAISING cx_static_check,
      mn035_001 FOR TESTING,
      mn035_002 FOR TESTING,
      mn035_003 FOR TESTING,
      mn036_001 FOR TESTING,
      mn036_002 FOR TESTING,
      mn036_003 FOR TESTING,
      mn036_004 FOR TESTING,
      mn036_005 FOR TESTING,
      mn036_006 FOR TESTING,
      mn037_001 FOR TESTING,
      mn039_001 FOR TESTING,
      mn040_001 FOR TESTING,
      mn041_001 FOR TESTING,
      mn041_002 FOR TESTING,
      mn041_003 FOR TESTING,
      mn041_004 FOR TESTING,
      mn041_005 FOR TESTING,
      mn041_006 FOR TESTING,
      mn041_007 FOR TESTING,
      mn041_008 FOR TESTING,
      mn095_001 FOR TESTING,
      mn095_002 FOR TESTING,
      mn098_001 FOR TESTING,
      mn098_002 FOR TESTING,
      mn098_003 FOR TESTING.

ENDCLASS.

CLASS ltc_remote_test DEFINITION FINAL FOR TESTING  DURATION SHORT
  RISK LEVEL HARMLESS INHERITING FROM cl_ci_test_verify.

  PRIVATE SECTION.
    DATA:ms_result TYPE scir_rest.

    METHODS:
      remote_mn032 FOR TESTING RAISING cx_static_check,
      remote_mn033_neg FOR TESTING RAISING cx_static_check,
      remote_mn034 FOR TESTING RAISING cx_static_check.

ENDCLASS.

CLASS ltc_test IMPLEMENTATION.

  METHOD setup.

    mo_check = NEW #( ).
    zcl_aoc_unit_test=>set_check( mo_check ).

  ENDMETHOD.


  METHOD mn001_001.

*   Error - Hardcoding tables must be accessed using Hardcode Manager API
    _code 'SELECT SINGLE field1 INTO @DATA(lv_value) FROM zpe_t_hm WHERE id = ''1'' AND sequence = ''1''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '001'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn001_002.

*   Error - Hardcoding tables must be accessed using Hardcode Manager API
    _code 'SELECT SINGLE @abap_true INTO @DATA(lv_found)                           ##NEEDED'.
    _code '  FROM zpe_t_hm_bs01'.
    _code ' WHERE id = ''1''.'.
    _code 'IF sy-subrc NE 0.'.
    _code '  RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e011(zpe_hm) WITH ''1''.'.
    _code 'ENDIF.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '001'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn002_001.

*   Error - Use icon constants (e.g. icon_dummy instead of @00@)
    _code 'WRITE ''@00@'' AS ICON'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '002'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn002_002.

*   ok - Use icon constants (e.g. icon_dummy instead of @00@)
    _code 'WRITE icon_dummy AS ICON'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn003_001.

*   Error - REUSE_ALV_GRID_DISPLAY not recommended. Use instead CL_SALV_TABLE
    _code 'CALL FUNCTION ''REUSE_ALV_GRID_DISPLAY'''.
    _code '*  EXPORTING'.
    _code '*    i_interface_check           = space'.
    _code '*    i_bypassing_buffer          = space'.
    _code '*    i_buffer_active             = space'.
    _code '*  IMPORTING'.
    _code '*    e_exit_caused_by_caller     ='.
    _code '*    es_exit_caused_by_user      ='.
    _code '    TABLES'.
    _code '      t_outtab = gt_data'.
    _code '*  EXCEPTIONS'.
    _code '*       program_error               = 1'.
    _code '*       others   = 2.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '003'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn004_001.

*   Error - SO_NEW_DOCUMENT_ATT_SEND_API1 not recommended. Use instead CL_BCS.
    _code 'DATA:lt_object_pack TYPE STANDARD TABLE OF sopcklsti1,'.
    _code '     lt_email_text  TYPE STANDARD TABLE OF solisti1,'.
    _code '     lt_reclist     TYPE STANDARD TABLE OF somlreci1,'.
    _code '     lv_email_data  TYPE sodocchgi1.'.
    _code 'CALL FUNCTION ''SO_NEW_DOCUMENT_ATT_SEND_API1'''.
    _code '  EXPORTING'.
    _code '    document_data              = lv_email_data'.
    _code '    put_in_outbox              = '' '''.
    _code '  TABLES'.
    _code '    packing_list               = lt_object_pack'.
    _code '    contents_txt               = lt_email_text'.
    _code '    receivers                  = lt_reclist'.
    _code '  EXCEPTIONS'.
    _code '    too_many_receivers         = 1'.
    _code '    document_not_sent          = 2'.
    _code '    document_type_not_exist    = 3'.
    _code '    operation_no_authorization = 4'.
    _code '    parameter_error            = 5'.
    _code '    x_error                    = 6'.
    _code '    enqueue_error              = 7'.
    _code '    OTHERS                     = 8.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '004'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn005_001.

*   Error - SAPGUI_PROGRESS_INDICATOR not recommended. Use instead CL_PROGRESS_INDICATOR..
    _code 'CALL FUNCTION ''SAPGUI_PROGRESS_INDICATOR'''.
    _code '  EXPORTING'.
    _code '    percentage = 50'.
    _code '    text       = ''WIP''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '005'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn007_001.

*   Error - JOB_OPEN or JOB_SUBMIT not recommended. Use instead CL_BP_ABAP_JOB.
    _code 'CALL FUNCTION ''JOB_OPEN'''.
    _code '  EXPORTING'.
    _code '    jobname = ''my_job''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '212'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn007_002.

*   Error - JOB_OPEN or JOB_SUBMIT not recommended. Use instead CL_BP_ABAP_JOB.
    _code 'CALL FUNCTION ''JOB_SUBMIT'''.
    _code '  EXPORTING'.
    _code '    authcknam = sy-uname'.
    _code '    jobcount  = ''count'''.
    _code '    jobname   = ''name''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '213'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn008_001.

*   Error - FM not recommended. Use instead POPUP_TO_CONFIRM.
    _code 'CALL FUNCTION ''POPUP_TO_DECIDE'''.
    _code '  EXPORTING'.
    _code '    textline1    = ''text'''.
    _code '    text_option1 = ''text'''.
    _code '    text_option2 = ''text'''.
    _code '    titel        = ''title''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '008'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn008_002.

*   Error - FM not recommended. Use instead POPUP_TO_CONFIRM.
    _code 'CALL FUNCTION ''POPUP_TO_CONFIRM_DEL'''.
    _code '  EXPORTING'.
    _code '    begda = sy-datum'.
    _code '    endda = sy-datum.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '008'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn008_003.

*   Ok - Recommended FM.
    _code 'CALL FUNCTION ''POPUP_TO_CONFIRM'''.
    _code '  EXPORTING'.
    _code '    text_question = ''text''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).
  ENDMETHOD.


  METHOD mn010_001.

*   Error - GUI_DOWNLOAD or UPLOAD not recommended. Use instead CL_GUI_FRONTEND_SERVICES.
    _code 'CALL FUNCTION ''GUI_DOWNLOAD'''.
    _code '  EXPORTING'.
    _code '    filename = ''file'''.
    _code '  TABLES'.
    _code '    data_tab = gt_data.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '010'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn010_002.

*   Error - GUI_DOWNLOAD or UPLOAD not recommended. Use instead CL_GUI_FRONTEND_SERVICES.
    _code 'CALL FUNCTION ''GUI_UPLOAD'''.
    _code '  EXPORTING'.
    _code '    filename = ''file'''.
    _code '  TABLES'.
    _code '    data_tab = gt_data.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '010'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn011_001.

*   Error - FM AUTHORITY_CHECK not recommended. Use ABAP command AUTHORITY_CHECK instead.
    _code 'CALL FUNCTION ''AUTHORITY_CHECK'''.
    _code '  EXPORTING'.
    _code '    object = ''WHATEVER''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '011'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn011_002.

*   Ok - Recommended.
    _code 'AUTHORITY-CHECK OBJECT ''S_GUI'''.
    _code '                ID     ''ACTVT'''.
    _code '                FIELD  ''60''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn012_001.

*   Error - FM SU_RAUTH_CHECK_FOR_USER not recommended. Use ABAP command AUTHORITY_CHECK instead.
    _code 'CALL FUNCTION ''SU_RAUTH_CHECK_FOR_USER'''.
    _code '  EXPORTING'.
    _code '    iv_user   = sy-uname'.
    _code '    iv_object = ''whatever''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '012'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn013_001.

*   Error - AUTHORITY-CHECK on object 'S_TCODE' not recommended. Use ABAP command CALL TRANSACTION with addition WITH AUTHORITY-CHECK.
    _code 'AUTHORITY-CHECK OBJECT ''S_TCODE'' ID ''TCD'' FIELD sy-tcode.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '013'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn016_001.

*   Error - Not needed on HANA DBs.
    _code 'CALL FUNCTION ''DB_EXISTS_INDEX'''.
    _code '  EXPORTING'.
    _code '    dbindex = ''index'''.
    _code '    tabname = ''table''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '016'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn016_002.

*   Error - Not needed on HANA DBs.
    _code 'CALL FUNCTION ''DD_INDEX_NAME'''.
    _code '  EXPORTING'.
    _code '    indexname = ''index'''.
    _code '    tabname = ''table''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '016'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn018_001.

*   Error - DB operation not allowed.
    _code 'CALL FUNCTION ''DB_SET_ISOLATION_LEVEL''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '018'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn018_002.

*   Error - DB operation not allowed.
    _code 'CALL FUNCTION ''DB_RESET_ISOLATION_TO_DEFAULT''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '018'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn019_001.

*   Error - •BYPASSING BUFFER is not recommended. Lower performance, risk of data inconsistency.
    _code 'DATA gwa_country TYPE I_COUNTRY.'.
    _code 'SELECT SINGLE * FROM I_COUNTRY BYPASSING BUFFER'.
    _code '    INTO gwa_country'.
    _code '    WHERE land1 EQ ''es''.'.
    _code 'IF sy-subrc EQ 0.'.
    _code '  WRITE gwa_country-lkvrz.'.
    _code 'ENDIF.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '019'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn020_001.

*   Error - Keyword EXPORTING can be omitted when calling methods with functional writing style and supplying only exporting parameters.
    _code 'lx_error->to_fpm_error('.
    _code 'EXPORTING iv_ref_name = lv_field_name'.
    _code 'iv_ref_index = lv_row ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '020'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn020_002.

*   Error - ok.
    _code 'lx_error->to_fpm_error('.
    _code 'iv_ref_name = lv_field_name'.
    _code 'iv_ref_index = lv_row ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn020_003.

*   Error - Keyword EXPORTING can be omitted when calling methods with functional writing style and supplying only exporting parameters.
    _code 'li_bcs->send_mail('.
    _code 'EXPORTING'.
    _code 'iv_subject_text = iv_subject_text'.
    _code 'iv_distr_list = iv_distr_list'.
    _code 'iv_recipient = iv_recipient'.
    _code 'it_body = lt_body_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '020'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn020_005.

*   Error - Keyword EXPORTING can be omitted when calling methods with functional writing style and supplying only exporting parameters.
    _code 'foo( EXPORTING iv_bar = ''CHANGING'' ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '020'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn020_006.

    _code 'foo( EXPORTING iv_bar = '')'' CHANGING cv_moo = lv_boo ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn020_007.

*   Error - Keyword EXPORTING can be omitted when calling methods with functional writing style and supplying only exporting parameters.
    _code 'foo( iv_bar = bar( EXPORTING ci_moo = lv_boo ) ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '020'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn020_008.

    _code '  cl_ci_inspection=>get_ref('.
    _code '    EXPORTING'.
    _code '      p_user          = '''''.
    _code '      p_name          = lv_name'.
    _code '    RECEIVING'.
    _code '      p_ref           = lo_ci'.
    _code '    EXCEPTIONS'.
    _code '      insp_not_exists = 1'.
    _code '      OTHERS          = 2 ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn020_009.

    _code '  cl_ci_inspection=>get_ref('.
    _code '    EXPORTING'.
    _code '      p_user          = '''''.
    _code '      p_name          = lv_name'.
    _code '    EXCEPTIONS'.
    _code '      insp_not_exists = 1'.
    _code '      OTHERS          = 2 ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn020_010.

*   Error - Keyword EXPORTING can be omitted when calling methods with functional writing style and supplying only exporting parameters.
    _code 'lv_foo = bar( EXPORTING ci_moo = lv_boo ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '020'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn021_001.

*   Error - Use NEW abc( ) expression
    _code 'DATA: lo_obj TYPE REF TO zcl_pe_atc_guidelines.'.
    _code 'CREATE OBJECT lo_obj.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '021'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn021_002.

    _code 'DATA: lo_obj2  TYPE REF TO object,'.
    _code '      lv_class TYPE string.'.
    _code 'CREATE OBJECT lo_obj2 TYPE (lv_class).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn021_003.

    _code 'WHEN zcl_pe_hm=>gc_s_mapping_type-data_elements.'.
    _code '  CREATE DATA lo_target LIKE LINE OF et_table.'.
    _code '  ASSIGN lo_target->* TO <ls_target>.'.
    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn021_004.

    _code 'CREATE DATA rs_kafka_record-key LIKE is_data_key.'.
    _code 'CASE cl_abap_typedescr=>describe_by_data( is_data_key )->type_kind.'.
    _code '  WHEN cl_abap_typedescr=>typekind_table.'.
    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn021_005.

*   Error - Use NEW abc( ) expression
    _code 'DATA: lo_obj TYPE REF TO zcl_pe_atc_guidelines.'.
    _code 'CREATE OBJECT lo_obj TYPE i.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '021'
                                        act = ms_result-code ).
  ENDMETHOD.

  METHOD mn022_001.

*   Error - Use ABAP Built-in functions (e.g. CONDENSE)
    _code 'DATA gv_text TYPE string VALUE ''this is a string''.'.
    _code 'CONDENSE gv_text.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '022'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn022_002.

    _code 'DATA gv_text TYPE string VALUE ''this is a string''.'.
    _code 'gv_text = condense( gv_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn023_001.

*   Error - Use CONCAT_LINES_OF( )
    _code 'DATA: gt_text TYPE STANDARD TABLE OF string.'.
    _code 'CONCATENATE LINES OF gt_text INTO DATA(lv_one_line).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '023'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn023_002.

    _code 'DATA: gt_text TYPE STANDARD TABLE OF string.'.
    _code 'DATA(gv_one_line) = concat_lines_of( gt_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn024_001.

*   Error - Use SHIFT_LEFT( )
    _code 'DATA: gv_text TYPE string.'.
    _code 'SHIFT gv_text LEFT.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '024'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn024_002.

    _code 'DATA: gv_text TYPE string.'.
    _code 'gv_text = shift_left( gv_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn024_003.

*   Error - Use SHIFT_RIGHT
    _code 'DATA: gv_text TYPE string.'.
    _code 'SHIFT gv_text RIGHT.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '024'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn024_004.

    _code 'DATA: gv_text TYPE string.'.
    _code 'gv_text = shift_right( gv_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn025_001.

*   Error - Use TO_UPPER( ), TO_LOWER( ) or TRANSLATE() expression
    _code 'DATA: gv_text TYPE string VALUE ''this is a text''.'.
    _code 'TRANSLATE gv_text TO UPPER CASE.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '025'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn025_002.

    _code 'DATA: gv_text TYPE string VALUE ''this is a text''.'.
    _code 'gv_text = to_upper( gv_text ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn025_003.

    _code 'DATA: gv_text TYPE string VALUE ''this is a text''.'.
    _code 'gv_text = translate( val = gv_text from = ''this'' to = ''that'' ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn025_004.

    _code 'WRITE: / ''Error''(005) COLOR COL_NEGATIVE,'.
    _code '         ''Cannot translate from''(003),'.
    _code '         go_lang->sourcelanguagecode,'.
    _code '         ''to''(004),'.
    _code '         go_lang->targetlanguagecode.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn026_001.

*   Error - Use string templates &&
    _code 'CONCATENATE ''this'' ''and'' ''that'' INTO DATA(gv_text).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '026'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn026_002.

    _code 'gv_text = ''this'' && ''and'' && ''that''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn027_001.

*   Error - Use REF#() expression
    _code 'DATA: gv_ref1 TYPE REF TO i'.
    _code 'GET REFERENCE OF gv_ref1 INTO DATA(gv_ref2)'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '027'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn027_002.

    _code 'DATA: gv_ref1 TYPE REF TO i'.
    _code 'DATA(gv_ref3) = REF #( gv_ref1 ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn028_001.

*   Error - Use CORRESPONDING #( ) expression
    _code 'DATA: gs_mara1 TYPE i_product,'.
    _code '      gs_mara2 TYPE i_product.'.
    _code 'MOVE-CORRESPONDING gs_mara1 TO gs_mara2.'.


    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '028'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn028_002.

    _code 'DATA: gs_mara1 TYPE i_product,'.
    _code '      gs_mara2 TYPE i_product.'.
    _code 'gs_mara2 = CORRESPONDING #( gs_mara1 ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn029_001.

*   Error - Use short form: MESSAGE exc_obj
    _code 'DATA: go_exception TYPE REF TO zcx_pe_hm'.
    _code 'MESSAGE go_exception->get_text( ) TYPE ''E''.'.


    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '029'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn029_002.

    _code 'DATA: go_exception TYPE REF TO zcx_pe_hm'.
    _code 'MESSAGE go_exception.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn030_001.

*   Error - Security threat, critical function module
    _code 'CALL FUNCTION ''RFC_READ_TABLE'''.
    _code '  EXPORTING'.
    _code '    query_table = ''MARA''.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '030'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn032_001.

*   Error - Use functional writing style
    _code 'CALL METHOD build_statements'.
    _code '  EXPORTING'.
    _code '    it_tokens     = io_scan->tokens'.
    _code '    it_statements = io_scan->statements'.
    _code '    it_levels     = io_scan->levels'.
    _code '  IMPORTING'.
    _code '    et_tokens     = whatever'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '032'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn032_002.

*   No error, dynamic method
    _code 'DATA: lv_method TYPE string VALUE ''build_statements''.'.
    _code 'CALL METHOD (lv_method)'.
    _code '  EXPORTING'.
    _code '    it_statements = io_scan->statements'.
    _code '    it_levels     = io_scan->levels'.
    _code '  RECEIVING'.
    _code '    rt_statements = lt_statements.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn032_003.

    _code 'CALL METHOD zcl_foo=>bar.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '032'
                                        act = ms_result-code ).

  ENDMETHOD.


  METHOD mn032_004.

    _code 'zcl_foo=>bar( ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_006.

    _code 'CALL METHOD lo_ref->(lv_method).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_007.

    _code 'CALL BADI lr_handle->method'.
    _code '  RECEIVING'.
    _code '    rv_true = lv_bool.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_008.

    _code 'CALL METHOD (lv_classname)=>(lv_method)'.
    _code '  RECEIVING'.
    _code '    rv_var = lv_var.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_009.

    _code 'cl_oo_include_naming=>get_instance_by_include('.
    _code '  EXPORTING'.
    _code '    progname = p_sub_obj_name'.
    _code '  RECEIVING'.
    _code '    cifref   = li_clif'.
    _code '  EXCEPTIONS'.
    _code '    OTHERS   = 1 ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_010.

    _code 'CALL METHOD (lv_method)'.
    _code '  EXPORTING'.
    _code '    is_data = is_data'.
    _code '  RECEIVING'.
    _code '    rv_ret  = lv_ret.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( ms_result ).

  ENDMETHOD.


  METHOD mn032_012.

    _code 'CALL METHOD set_level( ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '032'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn033_001.

*   Error - Use functional writing style instead of RECEIVING
    _code 'CALL METHOD build_statements'.
    _code '  EXPORTING'.
    _code '    it_tokens     = io_scan->tokens'.
    _code '    it_statements = io_scan->statements'.
    _code '  RECEIVING'.
    _code '    rv_statements = whatever.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '033'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn033_002.

*   No error, classic exceptions
    _code 'CALL METHOD build_statements'.
    _code '  EXPORTING'.
    _code '    it_tokens     = io_scan->tokens'.
    _code '    it_statements = io_scan->statements'.
    _code '  RECEIVING'.
    _code '    rv_statements = whatever'.
    _code '  EXCEPTIONS'.
    _code '    error1 = 1.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn033_003.

    _code 'zcl_foo=>bar(          '.
    _code '  RECEIVING            '.
    _code '    rv_moo = lv_boo ). '.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '033'
                                        act = ms_result-code ).

  ENDMETHOD.


  METHOD mn033_004.

    _code 'CALL METHOD foobar'.
    _code '  EXPORTING'.
    _code '    is_data = is_data'.
    _code '  RECEIVING'.
    _code '    rv_ret  = lv_ret.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '033'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn033_005.

*    No error - false positive T4MTEMP-30466
    _code 'lt_gm_items =  VALUE #( (  material = <ls_inventory_adjustment>-material ##WARN_OK'.
    _code '                           plant = <ls_inventory_adjustment>-plant'.
    _code '                           stge_loc = <ls_inventory_adjustment>-storagelocation'.
    _code '                           entry_qnt = <ls_inventory_adjustment>-quantityinbaseunit'.
    _code '                           entry_uom = lt_mara_meins[ product = <ls_inventory_adjustment>-material ]-baseunit'.
    _code '                           move_type = <ls_inventory_adjustment>-goodsmovementtype'.
    _code '                           spec_stock = <ls_inventory_adjustment>-inventoryspecialstocktype'.
    _code '                           sales_ord = <ls_inventory_adjustment>-salesorder'.
    _code '                           s_ord_item = <ls_inventory_adjustment>-salesorderitem'.
    _code '                           val_sales_ord = <ls_inventory_adjustment>-salesorder'.
    _code '                           val_s_ord_item = <ls_inventory_adjustment>-salesorderitem'.
    _code '                           costcenter = <ls_inventory_adjustment>-costcenter'.
    _code '                           po_number = <ls_inventory_adjustment>-purchaseorder'.
    _code '                           po_item = <ls_inventory_adjustment>-purchaseorderitem'.
    _code '                           move_mat = <ls_inventory_adjustment>-issgorrcvgmaterial'.
    _code '                           move_plant = <ls_inventory_adjustment>-issuingorreceivingplant'.
    _code '                           move_stloc = <ls_inventory_adjustment>-issuingorreceivingstorageloc'.
    _code '                       ) ).                "#EC CI_STDSEQ'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn034_001.

*   Error - Avoid use of SELECT-ENDSELECT
    _code 'DATA: lt_matnr TYPE STANDARD TABLE OF matnr.'.
    _code 'SELECT matnr FROM mara INTO @DATA(lv_matnr).'.
    _code '   INSERT lv_matnr INTO TABLE lt_matnr'.
    _code 'ENDSELECT'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '034'
                                        act = ms_result-code ).
  ENDMETHOD.


  METHOD mn034_002.

*   No Error - UP TO 1 ROWS
    _code 'SELECT mtart FROM i_product INTO @DATA(gv_mtart) UP TO 1 ROWS'.
    _code '    WHERE color = ''20211001'' ORDER BY color.'.
    _code '  EXIT.'.
    _code 'ENDSELECT'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn035_001.
*   No error - dynamic variables
    _code 'RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE ID TYPE <ls_message>-msgty NUMBER <ls_message>-msgno'.
    _code 'WITH <ls_message>-msgv1 <ls_message>-msgv2 <ls_message>-msgv3 <ls_message>-msgv4.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).
  ENDMETHOD.

  METHOD mn035_002.
*   No Error - short form used
    _code 'RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).
  ENDMETHOD.

  METHOD mn035_003.
*   Error - short form not used
    APPEND `RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE ID 'AAA' TYPE 'E' NUMBER '001' WITH 'ASDSADAD'` TO mt_code.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '035' act = ms_result-code ).
  ENDMETHOD.

  METHOD mn036_001.
* Error - CP uses wrong wildcard (%)
    _code 'lv_value CP ''aa%'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '036'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn036_002.
* No error - CP uses correct wildcard (*) - It uses also the wrong one (%), but its literal value is considered

    _code 'lv_value CP ''bb%*'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn036_003.
* Error - NP uses wrong wildcard (%)

    _code 'lv_value NP ''cc%'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '036'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn036_004.
* No error - NP uses correct wildcard (*) - It uses also the wrong one (%), but its literal value is considered

    _code 'lv_value NP ''dd%*'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn036_005.
* Error - LIKE uses wrong wildcard (*)

    _code 'lv_value LIKE ''ee*'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '036'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn036_006.
* No error - CP uses correct wildcard (%)

    _code 'lv_value LIKE ''ee*%'''.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn037_001.
* Error - CL_AUNIT_ASSERT is obsolete, shouldn't be used

    _code 'cl_aunit_assert=>assert'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '037'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn039_001.
*   Error - short form used
    _code 'ME->'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '039'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn040_001.
*   Error - short form used
    _code 'IF NOT variable IS INITIAL.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '040'
                                        act = ms_result-code ).

  ENDMETHOD.

  METHOD mn041_001.
*   Error - Use constants with Hardcode manager
    _code 'ZCL_PE_HM_COMPLEX=>GET_TABLE( EXPORTING IV_ID = ZCL_PE_CANO=>GC_DELIVERY_STO_BRFID IMPORTING ET_TABLE = LT_TABLE )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '041'
                                        act = ms_result-code ).
  ENDMETHOD.

  METHOD mn041_002.
*   Error - Use constants with Hardcode manager
    _code 'ZCL_PE_HM_COMPLEX=>GET_TABLE( EXPORTING IV_ID = ZCL_PE_CANO=>GC_DELIVERY_STO_BRFID IV_MAPPING_TYPE = ''N'' IMPORTING ET_TABLE = LT_TABLE )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '041'
                                        act = ms_result-code ).
  ENDMETHOD.

  METHOD mn041_003.
*   Error - Use constants with Hardcode manager
    _code 'ZCL_PE_HM_COMPLEX=>GET_TABLE( EXPORTING IV_ID = ZCL_PE_CANO=>GC_DELIVERY_STO_BRFID IV_MAPPING_TYPE = ZCL_PE_HM_COMPLEX=>GC_S_MAPPING_TYPE-NAMES IMPORTING ET_TABLE = LT_TABLE )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '041'
                                        act = ms_result-code ).
  ENDMETHOD.

  METHOD mn041_004.
*   Error - Use constants with Hardcode manager
    _code 'ZCL_PE_HM_COMPLEX=>GET_TABLE( EXPORTING IV_ID = ''10'' IV_MAPPING_TYPE = GC_S_MAPPING_TYPE-NAMES IMPORTING ET_TABLE = LT_TABLE )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn041_005.
*   Error - Use constants with Hardcode manager
    _code 'ZCL_PE_HM_COMPLEX=>GET_VALUE( EXPORTING IV_ID = ''10'' IV_MAPPING_TYPE = ''N'' IMPORTING ET_TABLE = LT_TABLE )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn041_006.
*   Error - Use constants with Hardcode manager
    _code 'DATA(lt_out_005) = zcl_pe_hm_basic=>get_range( iv_id = ''1'' iv_sequence = ''2'' )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn041_007.
*   Error - Use constants with Hardcode manager
    _code 'DATA(lt_out_007) = zcl_pe_hm_basic=>get_table( ''999666'' ).'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn041_008.
*   Error - Use constants with Hardcode manager
    _code 'DATA(LV_ACTIVE) = ZCL_PE_HM_COMPLEX=>IS_ACTIVE( IV_ID = ''F9431F5D8B571EDE8FB0723C5C01DF59'' IS_FILTER = VALUE LTYP_S_ACTIVE( ESART = IV_BSART ) )'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.

  METHOD mn095_001.
*   Don't use this data element
    _code 'DATA gv_flag TYPE BOOLEAN.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '095'
                                        act = ms_result-code ).

  ENDMETHOD.


  METHOD mn095_002.
*   Not an error, false positive
    _code 'DATA gv_flag TYPE ABAP_BOOLEAN.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn098_001.
*   Don't use LANGU data element
    _code 'DATA: lv_language  TYPE spras,'.
    _code '      lv_language2 TYPE langu,'.
    _code '      lv_temptext  TYPE /iwngw/notif_templ_sensitive.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '098'
                                        act = ms_result-code ).

  ENDMETHOD.


  METHOD mn098_002.
*   Not an error, false positive
    _code 'SET LANGUAGE lv_language'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_initial( act = ms_result-code ).

  ENDMETHOD.


  METHOD mn098_003.
*   Don't use LANGU data element
    _code 'DATA: lv_language  TYPE spras,'.
    _code '      lv_language2 TYPE langu, lv_temptext  TYPE /iwngw/notif_templ_sensitive.'.

    ms_result = zcl_aoc_unit_test=>check( mt_code ).
    cl_abap_unit_assert=>assert_equals( exp = '098'
                                        act = ms_result-code ).

  ENDMETHOD.

ENDCLASS.




CLASS ltc_remote_test IMPLEMENTATION.

  METHOD remote_mn032.

*   Error - Use functional writing style
    TRY.
        cl_ci_test_verify=>run( p_variant     = 'UT_ADIDAS_CHECKS_REMOTE'
                                p_obj_type    = 'CLAS'
                                p_obj_name    = 'ZCL_PE_ATC_UNIT_TEST'
                                p_destination = 'DM4CLNT003_TRUST' ).
        ms_result = result_list[ code = '032' ].
        cl_abap_unit_assert=>assert_not_initial( act = ms_result ).
      CATCH cx_ci_check_error.
        RETURN.
    ENDTRY.

  ENDMETHOD.


  METHOD remote_mn033_neg.
    TRY.
*   Error - Use functional writing style instead of RECEIVING
        cl_ci_test_verify=>run(
          EXPORTING
            p_variant     = 'UT_ADIDAS_CHECKS_REMOTE'
            p_obj_type    = 'CLAS'
            p_obj_name    = 'ZCL_PE_ATC_UNIT_TEST'
            p_destination = 'DM4CLNT003_TRUST' ).


        IF line_exists( result_list[ code = '033' ] ).
          cl_abap_unit_assert=>assert_false( abap_true ).
        ELSE.
          cl_abap_unit_assert=>assert_false( abap_false ).
        ENDIF.

      CATCH cx_ci_check_error.
        RETURN.
    ENDTRY.
  ENDMETHOD.

  METHOD remote_mn034.

    TRY.
*   Error - Avoid use of SELECT-ENDSELECT
        cl_ci_test_verify=>run(
          EXPORTING
            p_variant     = 'UT_ADIDAS_CHECKS_REMOTE'
            p_obj_type    = 'CLAS'
            p_obj_name    = 'ZCL_PE_ATC_UNIT_TEST'
            p_destination = 'DM4CLNT003_TRUST' ).

        ms_result = result_list[ code = '034' ].
        cl_abap_unit_assert=>assert_not_initial( act = ms_result ).
      CATCH cx_ci_check_error.
        RETURN.
    ENDTRY.

  ENDMETHOD.

ENDCLASS.