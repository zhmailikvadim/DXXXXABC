CLASS zcl_pe_atc_hardcode_detector DEFINITION
PUBLIC
  INHERITING FROM cl_ci_test_scan
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS scan .

    TYPES:
      BEGIN OF ty_num_range,
        sign   TYPE  char1,
        option TYPE  char2,
        low    TYPE  int4,
        high   TYPE  int4,
      END OF ty_num_range .
    TYPES:
      tty_num_range TYPE STANDARD TABLE OF ty_num_range WITH DEFAULT KEY .

    DATA _literal_min_lenght TYPE i VALUE 2 ##NO_TEXT.
    DATA _literal_max_lenght TYPE i VALUE 18 ##NO_TEXT.

    METHODS constructor .

    METHODS get_attributes
        REDEFINITION .
    METHODS if_ci_test~query_attributes
        REDEFINITION .
    METHODS put_attributes
        REDEFINITION .
    METHODS run
        REDEFINITION .

  PROTECTED SECTION.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
  PRIVATE SECTION.

    CONSTANTS c_my_name TYPE seoclsname VALUE 'ZCL_PE_ATC_HARDCODE_DETECTOR'. "#EC NOTEXT
    DATA _dict_of_related_operand TYPE scir_abapid .
    DATA _dict_of_literals TYPE scir_abapid .

    DATA: mv_destination TYPE rfcdest.

    METHODS _remove_apostrophes
      IMPORTING
        !im_input        TYPE string
      RETURNING
        VALUE(re_output) TYPE string .
    METHODS _init_dict_of_literals
      RETURNING
        VALUE(re_range) TYPE scir_abapid .
    METHODS _init_dict_of_related_operand
      RETURNING
        VALUE(re_range) TYPE scir_abapid .

ENDCLASS.



CLASS zcl_pe_atc_hardcode_detector IMPLEMENTATION.


  METHOD constructor .
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/

************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 21.02.2022 | 9784      : RFC Enabled                  *
*              |            | DS4K913083                               *
*----------------------------------------------------------------------*
    super->constructor( ).

    description       = 'Hardcode Detector (Dr. ZedGe by Techedge)'(001). "#EC NOTEXT
    category          = zcl_pe_atc_category_003=>gc_my_name. "#EC NOTEXT
    version           = '000'.                  "required
    has_attributes    = c_true.                "optional
    attributes_ok     = c_true.                "optional
    has_documentation = c_false.

    me->_dict_of_literals          = me->_init_dict_of_literals( ).
    me->_dict_of_related_operand   = me->_init_dict_of_related_operand( ).

    fill_message '0900' c_error 'Potential business value hardcoded - &1'(002)         ''. "#EC NOTEXT

*-- RFC Enabled
    mv_destination      = zcl_pe_atc_aoc_super=>get_rfc_destination( ).
    remote_rfc_enabled  = abap_true.

  ENDMETHOD.                    "CONSTRUCTOR


  METHOD get_attributes.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    EXPORT
     literal_min_lenght             = me->_literal_min_lenght
     literal_max_lenght             = me->_literal_max_lenght
     dictionary_of_literals         = me->_dict_of_literals
     dictionary_of_context          = me->_dict_of_related_operand
                                   TO DATA BUFFER p_attributes.
*
  ENDMETHOD.                    "get_attributes


  METHOD if_ci_test~query_attributes.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA:
      l_attributes TYPE sci_atttab,
      l_attribute  LIKE LINE OF l_attributes.

    DEFINE fill_att.
      GET REFERENCE OF &1 INTO l_attribute-ref.
      l_attribute-text = &2.
      l_attribute-kind = &3.
      APPEND l_attribute TO l_attributes.
    END-OF-DEFINITION.

    DATA l_message(72) TYPE c.

    CLASS cl_ci_query_attributes DEFINITION LOAD.

    fill_att sy-index                       'Literals'(010)                          'G'.
    fill_att me->_literal_min_lenght        'Min lenght'(020)                        'P'.
    fill_att me->_literal_max_lenght        'Max lenght'(021)                        'P'.
    fill_att me->_dict_of_literals          'Literal Dictionary'(012)                'S'.
    fill_att me->_dict_of_related_operand   'Context Dictionary'(013)                'S'.

    cl_ci_query_attributes=>generic(
      p_name       = 'ZCL_PE_ATC_HARDCODE_DETECTOR'
      p_title      = 'Hardcode Detector (Dr. ZedGe by Techedge)'(001)
      p_attributes = l_attributes
      p_message    = l_message
      p_display    = p_display ).

  ENDMETHOD.                    "if_ci_test~query_attributes


  METHOD put_attributes.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    IMPORT
       literal_min_lenght             = me->_literal_min_lenght
       literal_max_lenght             = me->_literal_max_lenght
       dictionary_of_literals         = me->_dict_of_literals
       dictionary_of_context          = me->_dict_of_related_operand
                                   FROM DATA BUFFER p_attributes.
*
  ENDMETHOD.                    "put_attributes


  METHOD run.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* Techedge     | 2014       |                                          *
*----------------------------------------------------------------------*
* CANOCAR      | 09.11.2023 | 26644     : Bug fixing                   *
*              |            | DS4K969968                               *
*----------------------------------------------------------------------*
    DATA: l_include        TYPE sobj_name.
    DATA: l_literal         TYPE string.
    DATA: l_related_operand TYPE string.

    DATA: l_line             TYPE token_row,
          l_column           TYPE token_col,
          l_tokens_tabix     LIKE statement_wa-from,
          l_errcnt           TYPE sci_errcnt,
          l_message_code     TYPE sci_errc,
          l_keyword          TYPE string,
          l_statements_tabix TYPE i,
          l_param_1          TYPE string,
          l_param_2          TYPE string.

    DATA: l_next_statement_index    TYPE sytabix.

    DATA: lo_abap_statement TYPE REF TO lcl_abap_statement.
    CREATE OBJECT lo_abap_statement.
    DATA: lo_abap_object    TYPE REF TO lcl_abap_object.
    CREATE OBJECT lo_abap_object.
    DATA: lo_hard_code     TYPE REF TO lcl_hard_code.
    CREATE OBJECT lo_hard_code.

* get a scan
    IF ref_scan IS INITIAL.
      IF get( ) = abap_false. RETURN. ENDIF.
    ENDIF.
    IF ref_scan->subrc <> 0. RETURN. ENDIF.

    l_errcnt = 0.

* loop at all tokens
    LOOP AT ref_scan->statements INTO statement_wa.
      l_statements_tabix = sy-tabix.
      l_keyword          = keyword( ).
      l_include          = get_include( ).
      CHECK statement_wa-from <= statement_wa-to.

*-- Filter by statement type
      CHECK lo_abap_statement->filter_by_statement_type( statement_wa ) = 0.

*-- Filter by keywords
      CHECK lo_abap_statement->filter_by_keyword( l_keyword ) = 0.

*-- Filter by ABAP object attributes (RFC enabled)
*     CHECK lo_abap_object->apply_filters( l_include ) = 0.
      CHECK lo_abap_object->apply_filters_rfc( iv_include = l_include iv_destination = mv_destination ) = 0.

*-- Analyze Tokens
      LOOP AT ref_scan->tokens INTO token_wa FROM  statement_wa-from TO statement_wa-to.
        l_tokens_tabix = sy-tabix.

        CHECK l_tokens_tabix >= l_next_statement_index.
        CHECK token_wa-type  =  scan_token_type-literal.
        CLEAR: l_literal.
        CLEAR: l_related_operand.

*--     remove Apostrophes
        l_literal = me->_remove_apostrophes( token_wa-str ).

*--     apply general filters
        CHECK     l_literal           CN space.
        CHECK     strlen( l_literal ) >= me->_literal_min_lenght.
        CHECK     strlen( l_literal ) <= me->_literal_max_lenght.
        CHECK NOT l_literal           CO '*+0 '.
        CHECK NOT l_literal           IN _dict_of_literals.

*--     Get related operand
        l_related_operand =
          lo_abap_statement->get_operand_related_to_literal(
          im_statement_wa = me->statement_wa
          im_ref_scan     = me->ref_scan
          im_tokennr      = l_tokens_tabix
          im_keyword      = l_keyword ).

*--     Skip if there is no related operand
        CHECK     l_related_operand IS NOT INITIAL.
        CHECK NOT l_related_operand IN me->_dict_of_related_operand.

*--     Get Hard code type
        lo_hard_code->get_type2( EXPORTING im_literal           = l_literal
                                           im_related_operand   = l_related_operand
                                           iv_destination       = mv_destination
                                 IMPORTING ev_field_description = DATA(lv_field_description)
                                           ev_message_code      = l_message_code ).

*--     Output only Business hard coding
        CHECK l_message_code IS NOT INITIAL.

*-      OUTPUT
        l_line    = token_wa-row.       "get_line_abs( token_wa-row ).
        l_column  = 1 .                 "get_column_abs( token_wa-col ).
        l_errcnt  = l_errcnt + 1.
        l_param_1 = l_line.
        DATA: l_token_wa  TYPE stokesx.
        DATA: l_token_out TYPE string.

        CLEAR: l_token_out.
        LOOP AT ref_scan->tokens INTO l_token_wa FROM statement_wa-from TO statement_wa-to.
          CONCATENATE l_token_out l_token_wa-str INTO l_token_out SEPARATED BY space.
        ENDLOOP.

        IF l_related_operand IS INITIAL.
          l_related_operand = '<none>'.
        ENDIF.
        l_param_1 = | { lv_field_description && cl_abap_char_utilities=>cr_lf } | &&
*                   | { 'Literal:' } { token_wa-str && cl_abap_char_utilities=>cr_lf } | &&
*                   | { 'Operand:' }{ l_related_operand && cl_abap_char_utilities=>cr_lf } | &&
                    | { 'Statement:' }{ l_token_out }|.     "#EC NOTEXT

        inform( p_sub_obj_type = c_type_include
                p_sub_obj_name = l_include
                p_position     = l_statements_tabix
                p_line         = l_line
                p_column       = l_column
                p_errcnt       = l_errcnt
                p_kind         = c_note
                p_test         = c_my_name
                p_code         = l_message_code
                p_suppress     = ' '
                p_param_1      = l_param_1
                ).

      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.                    "run


  METHOD _init_dict_of_literals.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_dictionary TYPE scis_abapid.
    DATA: t_dictionary TYPE scir_abapid.

    l_dictionary-sign    = 'I'.
    l_dictionary-high    = ''.

* Specific
    l_dictionary-option  = 'EQ'.
    l_dictionary-low = '0'.          APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = 'INTERN'.     APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '0123456789'. APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '$TEMP'.      APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = 'HTML'.       APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'TXT'.        APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'TEXT'.       APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'YES'.        APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'IEQ'.        APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'ICP'.        APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'ZCURR'.      APPEND l_dictionary TO t_dictionary. "APTAR
    l_dictionary-low = 'Not_Applicable'.  APPEND l_dictionary TO t_dictionary. "APTAR

* Patterns
    l_dictionary-option  = 'CP'.
    l_dictionary-low = '*?*'.       APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '*$*'.       APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '*(*'.       APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '*)*'.       APPEND l_dictionary TO t_dictionary.
    l_dictionary-low = '@*@'.       APPEND l_dictionary TO t_dictionary. "Icons

    re_range = t_dictionary.
*
  ENDMETHOD.                    "init_dictionary


  METHOD _init_dict_of_related_operand.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_dictionary TYPE scis_abapid.
    DATA: t_dictionary TYPE scir_abapid.

    l_dictionary-sign    = 'I'.
    l_dictionary-high    = ''.

* Specific
    l_dictionary-option  = 'EQ'.

* Patterns
    l_dictionary-option  = 'CP'.
    l_dictionary-low = '*-OPTION'.    APPEND l_dictionary TO t_dictionary. "Icons
    l_dictionary-low = '*-SIGN'.      APPEND l_dictionary TO t_dictionary. "Icons

    re_range = t_dictionary.
*
  ENDMETHOD.                    "init_dictionary


  METHOD _remove_apostrophes.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/

*- Escape apostrophes and backticks
    DATA: l_literal TYPE string.

    l_literal = im_input.
    REPLACE ALL OCCURRENCES OF `'` IN l_literal WITH ''.
    IF sy-subrc NE 0.
      REPLACE ALL OCCURRENCES OF '`' IN l_literal WITH ''.
    ENDIF.

    re_output = l_literal.
*
  ENDMETHOD.                    "remove_apostrophes
ENDCLASS.