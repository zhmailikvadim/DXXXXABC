*"* local class implementation for public class
*"* CL_CI_TEST_INCLUDE
*"* use this source file for the implementation part of
*"* local helper classes
CLASS lcl_abap_object DEFINITION FINAL.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
  PUBLIC SECTION.
    CLASS-METHODS apply_filters
      IMPORTING
        !im_include     TYPE sobj_name
      RETURNING
        VALUE(re_subrc) TYPE sysubrc .

    CLASS-METHODS apply_filters_rfc IMPORTING iv_include      TYPE sobj_name
                                              iv_destination  TYPE rfcdest
                                    RETURNING VALUE(rv_subrc) TYPE sysubrc .



  PRIVATE SECTION.
    CLASS-DATA _current_include TYPE trdir .
ENDCLASS.                    "lcl_abap_object DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_abap_object IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_abap_object IMPLEMENTATION.
  METHOD apply_filters.
*-  Buffer
    IF im_include NE _current_include-name.
      CLEAR: _current_include.
      SELECT SINGLE cnam INTO _current_include-cnam FROM trdir WHERE name = im_include.
      IF sy-subrc       = 0.
        _current_include-name = im_include.
      ENDIF.
    ENDIF.

**-  Validate Creator + last changed by
*    IF _current_include-cnam = 'SAP'.
*      IF _current_include-unam IS INITIAL
*        OR _current_include-unam = 'SAP'.
*        re_subrc = 8.
*        RETURN.
*      ENDIF.
*    ENDIF.

*-  Other validations can be inserted here
*   <<<<....>>>>
  ENDMETHOD.                    "apply_filters

  METHOD apply_filters_rfc.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 21.02.2022 | 9784: Adaptation to introduce BRF+       *
*              |            |       and make it RFC enabled            *
*              |            | DS4K913083                               *
*----------------------------------------------------------------------*

    DATA: ls_trdir TYPE trdir.

*   Buffer
    IF iv_include EQ _current_include-name.
      RETURN.
    ENDIF.

    CLEAR: _current_include.
    CALL FUNCTION 'RS_ABAP_GET_TRDIR_E' DESTINATION iv_destination
      EXPORTING
        p_program             = iv_include
      IMPORTING
        p_result              = ls_trdir
      EXCEPTIONS
        communication_failure = 1
        system_failure        = 2
        OTHERS                = 3.
    IF sy-subrc = 0.
      _current_include-name = iv_include.
      _current_include-cnam = ls_trdir-cnam.
    ENDIF.

  ENDMETHOD.                    "apply_filters_rfc

ENDCLASS.                    "lcl_abap_object IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_abap_statement DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_abap_statement DEFINITION FINAL.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
  PUBLIC SECTION.
    CLASS-METHODS filter_by_statement_type
      IMPORTING
        !im_stmnt       TYPE sstmnt
      RETURNING
        VALUE(re_subrc) TYPE sysubrc.
    CLASS-METHODS filter_by_keyword
      IMPORTING
        !im_keyword     TYPE string
      RETURNING
        VALUE(re_subrc) TYPE sysubrc .

    CLASS-METHODS get_operand_related_to_literal
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
  PRIVATE SECTION.
    CLASS-METHODS _get_operand_from_call
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_compute
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_data
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_if
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_move
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_write
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_select
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_delete
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_update
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_submit
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.
    CLASS-METHODS _get_operand_from_when
      IMPORTING
        !im_statement_wa          TYPE        sstmnt
        !im_ref_scan              TYPE REF TO cl_ci_scan
        !im_tokennr               TYPE        stmnt_from
        !im_keyword               TYPE        string
      RETURNING
        VALUE(re_related_operand) TYPE string.

ENDCLASS.                    "lcl_abap_statement DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_abap_statement IMPLEMENTATION
*----------------------------------------------------------------------*
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
CLASS lcl_abap_statement IMPLEMENTATION.
  METHOD  filter_by_statement_type.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    CASE im_stmnt-type.
      WHEN    "scan_stmnt_type-comment
              scan_stmnt_type-compute_direct
           OR scan_stmnt_type-method_direct
           OR scan_stmnt_type-standard.
        re_subrc = 0.
      WHEN OTHERS.
        re_subrc = 8.
    ENDCASE.
  ENDMETHOD.                    "filter_by_statement_type

  METHOD filter_by_keyword.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
*  Check out scan_struc_stmnt_type
    CASE im_keyword.
      WHEN    'CONSTANTS' OR 'DATA' OR 'STATICS' OR 'TYPES'
           OR 'COMPUTE'
           OR 'IF'     OR 'ELSEIF'  OR 'CHECK' OR 'WHEN'
           OR 'MOVE'   OR 'WRITE'                           "for WRITE xx to yy
           OR 'CALL'   OR 'PERFORM' OR 'SUBMIT'
           OR 'SELECT' OR 'INSERT'  OR 'UPDATE' OR 'DELETE'
*          OR 'LOOP' OR 'WHILE'                             "TODO
           .
        re_subrc = 0.
      WHEN OTHERS.
        re_subrc = 8.
    ENDCASE.
  ENDMETHOD.                    "filter_by_keyword

  METHOD get_operand_related_to_literal.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    CASE im_keyword. "l_statement.
      WHEN 'CALL'.
        re_related_operand = _get_operand_from_call( im_statement_wa = im_statement_wa
                                                     im_ref_scan     = im_ref_scan
                                                     im_tokennr      = im_tokennr
                                                     im_keyword      = im_keyword ).
      WHEN 'COMPUTE'.
        re_related_operand = _get_operand_from_compute( im_statement_wa = im_statement_wa
                                                        im_ref_scan     = im_ref_scan
                                                        im_tokennr      = im_tokennr
                                                        im_keyword      = im_keyword ).
      WHEN 'DATA' OR 'CONSTANTS'.
        re_related_operand = _get_operand_from_data( im_statement_wa = im_statement_wa
                                                     im_ref_scan     = im_ref_scan
                                                     im_tokennr      = im_tokennr
                                                     im_keyword      = im_keyword ).
      WHEN 'IF' OR 'ELSEIF' OR 'CHECK'.
        re_related_operand = _get_operand_from_if( im_statement_wa = im_statement_wa
                                                   im_ref_scan     = im_ref_scan
                                                   im_tokennr      = im_tokennr
                                                   im_keyword      = im_keyword ).
      WHEN 'MOVE'.
        re_related_operand = _get_operand_from_move( im_statement_wa = im_statement_wa
                                                     im_ref_scan     = im_ref_scan
                                                     im_tokennr      = im_tokennr
                                                     im_keyword      = im_keyword ).
      WHEN 'WRITE'.
        re_related_operand = _get_operand_from_write( im_statement_wa = im_statement_wa
                                                      im_ref_scan     = im_ref_scan
                                                      im_tokennr      = im_tokennr
                                                      im_keyword      = im_keyword ).
      WHEN 'SELECT'.
        re_related_operand = _get_operand_from_select( im_statement_wa = im_statement_wa
                                                       im_ref_scan     = im_ref_scan
                                                       im_tokennr      = im_tokennr
                                                       im_keyword      = im_keyword ).
      WHEN 'DELETE'.
        re_related_operand = _get_operand_from_delete( im_statement_wa = im_statement_wa
                                                       im_ref_scan     = im_ref_scan
                                                       im_tokennr      = im_tokennr
                                                       im_keyword      = im_keyword ).
      WHEN 'UPDATE'.
        re_related_operand = _get_operand_from_update( im_statement_wa = im_statement_wa
                                                       im_ref_scan     = im_ref_scan
                                                       im_tokennr      = im_tokennr
                                                       im_keyword      = im_keyword ).
      WHEN 'SUBMIT'.
        re_related_operand = _get_operand_from_submit( im_statement_wa = im_statement_wa
                                                       im_ref_scan     = im_ref_scan
                                                       im_tokennr      = im_tokennr
                                                       im_keyword      = im_keyword ).
      WHEN 'WHEN'.
        re_related_operand = _get_operand_from_when( im_statement_wa = im_statement_wa
                                                     im_ref_scan     = im_ref_scan
                                                     im_tokennr      = im_tokennr
                                                     im_keyword      = im_keyword ).
    ENDCASE.
  ENDMETHOD.                    "get_operand_related_to_literal
  METHOD _get_operand_from_call.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_related_operand         TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 1 ).
    CASE l_related_operand-str.
      WHEN 'FUNCTION'.
        RETURN.
      WHEN 'DESTINATION'. "#". "e.g. CALL FUNCTION 'Z_OSS_ORDER_GETLIST_BYMATERIAL_DUMP' DESTINATION 'DUMP'.
        RETURN.
      WHEN 'ID'.          "e.g. call 'ThUsrInfo' id 'OPCODE' field opcode_list id 'TABUSR' field usr_tabl-*sys*.
        RETURN.
      WHEN '='.           "e.g. CALL FUNCTION MODULE 'XYZ' im_field_name = 'UNAME'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.                    "_get_operand_from_call

  METHOD _get_operand_from_compute.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
*  e.g. l_bkpf-bukrs = 'IT01'.
*       l_bkpf-bukrs = me->set_company_code( 'IT01' ).
    DATA: l_related_operand         TYPE stokesx.
    DATA: l_related_token           TYPE stokesx.

*- Verify pre-req
    IF ( im_tokennr - 2 ) < im_statement_wa-from.
      RETURN.
    ENDIF.

    READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr - 1 ).
    IF l_related_token-str = '='.               "l_bkpf-bukrs = 'IT01'.
      READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr - 2 ).
      re_related_operand = l_related_token-str.
      RETURN.
    ELSEIF l_related_token-str CA '+-*/'.       "seems not a business hard code e.g. EKET-SLFDT = SY-DATUM + '14'
      RETURN.
    ELSE.                                       "e.g. l_bkpf-bukrs = me->set_company_code( 'IT01' ).
*-     Obfuscation yet to be managed -> SKIP
      RETURN.
    ENDIF.

  ENDMETHOD.                    "get_operand_from_compute

  METHOD _get_operand_from_data.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
* e.g. DATA: l_sales_area    TYPE vkorg VALUE 'SA21'.
* e.g. DATA: l_burks         TYPE bukrs VALUE '1001'.
* e.g. DATA: ca_program1(10) TYPE c VALUE 'SAPXF05A'.
* e.g. CONSTANTS: l_burks    TYPE bukrs VALUE '1001'.
*
    DATA: l_related_operand         TYPE stokesx.
    DATA: l_token_related_back_1    TYPE stokesx.
    DATA: l_token_related_back_2    TYPE stokesx.
    DATA: l_token_related_back_3    TYPE stokesx.
    DATA: l_token_related_back_4    TYPE stokesx.

*- Check CONTEXT
* e.g. DATA CA_DYNPRO_0108(10) TYPE C VALUE '0108'
    READ TABLE im_ref_scan->tokens INTO l_token_related_back_1 INDEX ( im_tokennr - 1 ).
    IF l_token_related_back_1-str = 'VALUE'.
      READ TABLE im_ref_scan->tokens INTO l_token_related_back_3 INDEX ( im_tokennr - 3 ).
      IF l_token_related_back_3-str = 'TYPE' OR
         l_token_related_back_3-str = 'LIKE'.           "#".
        READ TABLE im_ref_scan->tokens INTO l_token_related_back_2 INDEX ( im_tokennr - 2 ).
        IF   l_token_related_back_2-str = 'X'           "Hex
          OR l_token_related_back_2-str CP '*OBJECT'
          OR l_token_related_back_2-str =  'SY-MSGNO'
          OR l_token_related_back_2-str CP '*TCODE'
          .
          l_related_operand = l_token_related_back_2.
          RETURN.
        ELSEIF l_token_related_back_2-str = 'C'           "C
            OR l_token_related_back_2-str = 'I'           "I
            OR l_token_related_back_2-str = 'N'           "N
            OR l_token_related_back_2-str CS 'CHAR'.
*       Opt for variable name
          READ TABLE im_ref_scan->tokens INTO l_token_related_back_4 INDEX ( im_tokennr - 4 ).
          l_related_operand = l_token_related_back_4.
        ELSE.
*       Opt for variable name
          READ TABLE im_ref_scan->tokens INTO l_token_related_back_2 INDEX ( im_tokennr - 2 ).
          l_related_operand = l_token_related_back_2.
        ENDIF.
      ELSE. "Not TYPE
        IF l_token_related_back_3-str = 'LENGTH'.           "#".
* e.g.    CONSTANTS GC_ITALIAN TYPE C LENGTH 2 VALUE 'IT'
          READ TABLE im_ref_scan->tokens INTO l_token_related_back_2 INDEX ( im_tokennr - 6 ).
          l_related_operand = l_token_related_back_2.
        ELSE.
* e.g.    DATA CA_DYNPRO_0108(10) TYPE C VALUE '0108'
          READ TABLE im_ref_scan->tokens INTO l_token_related_back_2 INDEX ( im_tokennr - 2 ).
          l_related_operand = l_token_related_back_2.
        ENDIF.
      ENDIF.
    ENDIF.
* OK
    re_related_operand = l_related_operand-str.

  ENDMETHOD.                    "_get_operand_from_data

  METHOD _get_operand_from_if.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* Techedge     | 2014       |                                          *
*----------------------------------------------------------------------*
* CANOCAR      | 09.11.2023 | 26644     : Bug fixing                   *
*              |            | DS4K969968                               *
*----------------------------------------------------------------------*

* e.g. IF l_field_name = 'UNAME' // CHECK z_okcode(3) BETWEEN 'A01' AND 'A10'
    DATA: l_related_operand         TYPE stokesx.
    DATA: l_related_token           TYPE stokesx.


* Left vs. Right
*--------------------------------------------------------------------*
    DATA: l_literal_is_on_the_left TYPE abap_bool VALUE abap_false.
    READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr - 1 ).
    CASE l_related_token-str.
      WHEN 'IF' OR 'ELSEIF' OR 'CHECK'.
        l_literal_is_on_the_left = abap_true.
      WHEN '('.
        l_literal_is_on_the_left = abap_true.
      WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                           '>='         OR '=<'         OR
           'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
           'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
        l_literal_is_on_the_left = abap_false.
      WHEN 'OR'.                            "e.g. IF ( GC_D1 EQ 'IT21' OR 'IT33' EQ GC_D2 )
        l_literal_is_on_the_left = abap_true.
      WHEN  'BETWEEN'.                          "e.g. CHECK z_okcode(3) BETWEEN 'A01' AND 'A10'
        l_literal_is_on_the_left = abap_false.
      WHEN  'AND'.                              "e.g. CHECK z_okcode(3) BETWEEN 'A01' AND 'A10' / IF ( GC_D1 EQ 'IT21' AND 'IT33' EQ GC_D2 )
        l_literal_is_on_the_left = abap_false.
      WHEN OTHERS.
        l_literal_is_on_the_left = abap_true.
    ENDCASE.
*-
    READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr + 1 ).
    CASE l_related_token-str.
      WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                           '>='         OR '=<'         OR
           'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
           'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
        l_literal_is_on_the_left = abap_true.
      WHEN ')'.
        l_literal_is_on_the_left = abap_false.
      WHEN 'OR'.                            "e.g. IF ( GC_D1 EQ 'IT21' OR 'IT33' EQ GC_D2 )
        l_literal_is_on_the_left = abap_false.
      WHEN 'BETWEEN'.                       "e.g. CHECK 'IT21' BETWEEN l_bukrsl AND l_bukrsh
        l_literal_is_on_the_left = abap_true.
      WHEN 'AND'.                           "e.g. CHECK z_okcode(3) BETWEEN 'A01' AND 'A10'
        l_literal_is_on_the_left = abap_false.
      WHEN OTHERS.
        l_literal_is_on_the_left = abap_false.
    ENDCASE.



* Get the literal
*--------------------------------------------------------------------*
    IF l_literal_is_on_the_left = abap_true.
      "Left
      READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr + 1 ).
      CASE l_related_token-str.
        WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                             '>='         OR '=<'         OR
             'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
             'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
          READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 2 ).
        WHEN ')'.
          READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 2 ).
        WHEN 'BETWEEN'.                      "e.g. CHECK 'IT21' BETWEEN l_bukrsl AND l_bukrsh
          READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 2 ).
        WHEN 'AND'.                          "e.g. CHECK l_bukrs BETWEEN 'IT20' AND l_bukrsh
          READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 3 ).
        WHEN 'OR'.                          "e.g. IF ( GC_D1 EQ 'IT21' OR 'IT33' EQ GC_D2 )
          READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 4 ).
* TODO
        WHEN OTHERS.
*          re_related_operand = l_related_token.
      ENDCASE.

    ELSE.

      "Right
      DATA(lv_index) = 1.
      DO.
        READ TABLE im_ref_scan->tokens INTO l_related_token INDEX ( im_tokennr - lv_index ).
        CASE l_related_token-str.
          WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                               '>='         OR '=<'         OR
               'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
               'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
            READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - lv_index - 1 ).
            EXIT.
          WHEN '('.
            READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - lv_index - 1 ).
            EXIT.
          WHEN 'BETWEEN'.                      "e.g. CHECK z_okcode(3) BETWEEN 'A01' AND 'A10'
            READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - lv_index - 1 ).
            EXIT.
          WHEN 'AND'.                          "e.g. CHECK z_okcode(3) BETWEEN 'A01' AND 'A10'
            READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - lv_index - 3 ).
            EXIT.
          WHEN OTHERS.
            IF l_related_token-str CS '('.     "e.g. IF lv_order_type = CONV auart( 'ZRRE' ).
              lv_index = lv_index + 2.
            ELSE.
              EXIT.   "Nothing found
            ENDIF.
        ENDCASE.
      ENDDO.

    ENDIF.
* OK
    re_related_operand = l_related_operand-str.
  ENDMETHOD.                    "_get_operand_from_if

  METHOD _get_operand_from_move.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
*  MOVE 'IT01' TO BUKRS
    DATA: l_related_operand         TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 2 ).
    re_related_operand = l_related_operand-str.

  ENDMETHOD.                    "_get_operand_from_move

  METHOD _get_operand_from_write.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
*  WRITE 'IT01' TO BUKRS.
    DATA: l_related_operand         TYPE stokesx.

*- Verify pre-req
    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 1 ).
    IF l_related_operand-str <> 'TO'. "this is not a WRITE xx TO yy
      RETURN.
    ENDIF.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr + 2 ).
    re_related_operand = l_related_operand-str.

  ENDMETHOD.                    "_get_operand_from_write

  METHOD _get_operand_from_select.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_related_operand   TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 1 ).
    CASE l_related_operand-str.
      WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                           '>='         OR '=<'         OR
           'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
           'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL = SY-LANGU AND ARBGB = 'MG' AND MSGNR = MSGL-NO
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'BETWEEN'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'AND'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 4 ).
        re_related_operand = l_related_operand-str.
        RETURN.
    ENDCASE.
  ENDMETHOD.                    "_get_operand_from_select
  METHOD _get_operand_from_delete.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_related_operand   TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 1 ).
    CASE l_related_operand-str.
      WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                           '>='         OR '=<'         OR
           'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
           'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL = SY-LANGU AND ARBGB = 'MG' AND MSGNR = MSGL-NO
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'BETWEEN'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'AND'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 4 ).
        re_related_operand = l_related_operand-str.
        RETURN.
    ENDCASE.
  ENDMETHOD.                    "_get_operand_from_delete
  METHOD _get_operand_from_update.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_related_operand   TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 1 ).
    CASE l_related_operand-str.
      WHEN '='  OR '<>' OR '=>' OR '>'  OR '<=' OR '<'  OR
                           '>='         OR '=<'         OR
           'EQ' OR 'NE' OR 'GE' OR 'GT' OR 'LE' OR 'LT' OR  "e.g. IF l_field_name = 'UNAME'
           'CA' OR 'CS' OR 'NA' OR 'NS' OR 'CP' OR 'CO' OR 'CN'.
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL = SY-LANGU AND ARBGB = 'MG' AND MSGNR = MSGL-NO
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'BETWEEN'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN 'AND'.
        "e.g. SELECT SINGLE * FROM T100 WHERE SPRSL BETWEEN 'I' AND 'Z'
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 4 ).
        re_related_operand = l_related_operand-str.
        RETURN.
    ENDCASE.
  ENDMETHOD.                    "_get_operand_from_update
  METHOD _get_operand_from_submit.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_related_operand   TYPE stokesx.

    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 1 ).
    CASE l_related_operand-str.
      WHEN '='.
        READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( im_tokennr - 2 ).
        "e.g. SUBMIT report WITH a = 'ABC'
        re_related_operand = l_related_operand-str.
        RETURN.
      WHEN OTHERS.
*       TODO
    ENDCASE.

  ENDMETHOD.                    "_get_operand_from_submit

  METHOD _get_operand_from_when.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
* e.g. WHEN 'IT01. --> CASE l_bkpf-bukrs
    DATA: l_related_operand   TYPE stokesx.

    DATA: l_prev_statement_wa TYPE sstmnt.
    DATA: l_structure_wa      TYPE sstruc.

*-
    READ TABLE im_ref_scan->structures INTO l_structure_wa INDEX im_statement_wa-struc.

*- Up one level
    READ TABLE im_ref_scan->structures INTO l_structure_wa INDEX l_structure_wa-back.

*- Get upper Statement
    READ TABLE im_ref_scan->statements INTO l_prev_statement_wa INDEX l_structure_wa-stmnt_from.

*- Get Token
    READ TABLE im_ref_scan->tokens INTO l_related_operand INDEX ( l_prev_statement_wa-from + 1 ).

* OK
    re_related_operand = l_related_operand-str.

  ENDMETHOD.                    "_get_operand_from_when
ENDCLASS.                    "lcl_abap_statement IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_hard_code DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_hard_code DEFINITION FINAL.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
  PUBLIC SECTION.

    CLASS-DATA: mc_message TYPE sci_errc VALUE '0001'.

    CLASS-METHODS get_type
      IMPORTING
        !im_literal            TYPE string
        !im_related_operand    TYPE string
      RETURNING
        VALUE(re_message_code) TYPE string.

    CLASS-METHODS get_type2
      IMPORTING
        !im_literal          TYPE string
        !im_related_operand  TYPE string
        iv_destination       TYPE rfcdest
      EXPORTING
        ev_message_code      TYPE sci_errc
        ev_field_description TYPE string.

  PRIVATE SECTION.

    CLASS-METHODS _is_foreignkey
      IMPORTING
        !im_table         TYPE tabname
        !im_key_fieldname TYPE fieldname
        !im_key_value     TYPE any
      RETURNING
        VALUE(re_subrc)   TYPE sci_errc .

    CLASS-METHODS adjust_operand
      CHANGING
        VALUE(cv_related_operand) TYPE string.

    CLASS-METHODS get_field_description
      IMPORTING
        VALUE(iv_table) TYPE tabname
        VALUE(iv_field) TYPE fieldname
      EXPORTING
        ev_description  TYPE string.

ENDCLASS.                    "lcl_hard_code DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_hard_code IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_hard_code IMPLEMENTATION.
  METHOD get_type.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_tabname                   TYPE string.
    DATA: l_fieldname                 TYPE string.
    DATA: l_leading_string            TYPE string.
    DATA: l_trailing_string           TYPE string.
    DATA: l_related_operand_tab_field TYPE string.
    DATA: l_related_operand           TYPE string.

    l_related_operand = im_related_operand.

* for offset (e.g. NAME1+2(22) )
    SPLIT l_related_operand AT '+' INTO l_leading_string l_trailing_string.
    IF NOT l_trailing_string IS INITIAL.
      l_related_operand = l_leading_string.
    ENDIF.

* for substring (e.g. NAME1(22) )
    SPLIT l_related_operand AT '(' INTO l_leading_string l_trailing_string.
    IF NOT l_trailing_string IS INITIAL.
      l_related_operand = l_leading_string.
    ENDIF.

* for Joins
    SPLIT l_related_operand AT '~' INTO l_leading_string l_trailing_string.
    IF NOT l_trailing_string IS INITIAL.
      l_related_operand = l_trailing_string.
    ENDIF.

*- Table - Field
    SPLIT l_related_operand AT '-' INTO l_tabname l_fieldname.
    IF l_fieldname IS INITIAL.
      l_related_operand_tab_field = l_tabname.
      l_related_operand           = l_tabname.
    ELSE.
      IF   l_fieldname = 'LOW'
        OR l_fieldname = 'HIGH'
        OR l_fieldname = 'OPTION'
        OR l_fieldname = 'SIGN'
        .
        l_related_operand           = l_tabname.
      ELSE.
        SPLIT l_tabname AT '_' INTO l_leading_string l_trailing_string.
        IF NOT l_trailing_string IS INITIAL.
          l_tabname                   = l_trailing_string.
          l_related_operand_tab_field = l_trailing_string.
          l_related_operand           = l_fieldname.
        ELSE.
          l_related_operand_tab_field = l_tabname.
          l_related_operand           = l_fieldname.
        ENDIF.
      ENDIF.
    ENDIF.

*--------------------------------------------------------------------*
* Org. Structure
*--------------------------------------------------------------------*
*- BUKRS
    IF strlen( im_literal ) <= 4.
      IF   l_related_operand   CP '*BUKRS*'
        OR l_related_operand CP '*COMPANY_CODE*'.
        IF _is_foreignkey(
                     im_table         = 'T001'
                     im_key_fieldname = 'BUKRS'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0101'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0102'. "#".
          IF l_related_operand   CP '*BUKRS*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*- WERKS
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*WERKS*'
        OR l_related_operand CP '*PLANT*'
        OR l_related_operand CP '*DIVISION*'.
        IF _is_foreignkey(
                     im_table         = 'T001W'
                     im_key_fieldname = 'WERKS'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0103'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0104'. "#".
          IF l_related_operand   CP '*WERKS*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Purchase Org. EKORG in T024E
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*EKORG*'
        OR l_related_operand CP '*PURCH_ORG*'.
        IF _is_foreignkey(
                     im_table         = 'T024E'
                     im_key_fieldname = 'EKORG'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0105'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0106'. "#".
          IF l_related_operand   CP '*EKORG*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Sales Org. VKORG in TVKO
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*VKORG*'
        OR l_related_operand CP '*SALES_ORG*'.
        IF _is_foreignkey(
                     im_table         = 'TVKO'
                     im_key_fieldname = 'VKORG'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0107'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0108'. "#".
          IF l_related_operand   CP '*VKORG*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Distribution channel VTWEG in TVTW
    IF strlen( im_literal ) <= 2.
      IF l_related_operand   CP '*VTWEG*'
        OR l_related_operand CP '*DISTR_CHAN*'.
        IF _is_foreignkey(
                     im_table         = 'TVTW'
                     im_key_fieldname = 'VTWEG'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0111'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0112'. "#".
          IF l_related_operand   CP '*VTWEG*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Division SPART in TVTW
    IF strlen( im_literal ) <= 2.
      IF l_related_operand   CP '*SPART*'
        OR l_related_operand CP '*DIVISION*'.
        IF _is_foreignkey(
                     im_table         = 'TSPA'
                     im_key_fieldname = 'SPART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0113'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0114'. "#".
          IF l_related_operand   CP '*SPART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Storage Location LGORT in T001L
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*LGORT*'
        OR l_related_operand CP '*STGE_LOC*'.
        IF _is_foreignkey(
                      im_table         = 'T001L'
                      im_key_fieldname = 'LGORT'
                      im_key_value     = im_literal ) = 0.
          re_message_code        = '0109'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0110'. "#".
          IF l_related_operand   CP '*LGORT*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Business Area in TGSB
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*GSBER*'
        OR l_related_operand CP '*BUS_AREA*'.
        IF _is_foreignkey(
                     im_table         = 'TGSB'
                     im_key_fieldname = 'GSBER'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0115'. "#".
          RETURN.
        ELSE.

          re_message_code        = '0116'. "#".
          IF l_related_operand   CP '*GSBER*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*--------------------------------------------------------------------*
* Customizing
*--------------------------------------------------------------------*
*-   Check Currency in TCURC
    IF strlen( im_literal ) <= 5.
      IF l_related_operand   CP '*WAERS*'
        OR l_related_operand CP '*CURR*'.
        IF   NOT l_related_operand CP '*CURR*TYPE'.
          IF   NOT l_related_operand CP '*CURRENT*'.
            IF _is_foreignkey(
                         im_table         = 'TCURC'
                         im_key_fieldname = 'WAERS'
                         im_key_value     = im_literal ) = 0.
              re_message_code        = '0201'. "#".
              RETURN.
            ELSE.
              re_message_code        = '0202'. "#".
              IF l_related_operand   CP '*WAERS*'.
                RETURN.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Countries in T005
    IF strlen( im_literal ) <= 3.
      IF   l_related_operand   CP '*LAND*'
        OR l_related_operand   CP '*BANKS*'
        OR l_related_operand   CP '*COUNTRY*'.
        IF   NOT l_related_operand CP '*LANDA'.
          IF _is_foreignkey(
                       im_table         = 'T005'
                       im_key_fieldname = 'LAND1'
                       im_key_value     = im_literal ) = 0.
            re_message_code        = '0203'. "#".
            RETURN.
          ELSE.
            re_message_code        = '0204'. "#".
            IF   l_related_operand   CP '*LAND*'
              OR l_related_operand   CP '*BANKS*'.
              RETURN.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Unit of Measurements in T006
    IF strlen( im_literal ) <= 3.
      IF l_related_operand   CP '*MSEHI*'
        OR l_related_operand CP '*MEINS*'
        OR l_related_operand CP '*MEINH*'
        OR l_related_operand CP '*GEWEI*'
        OR l_related_operand CP '*KMEIN*'
        OR l_related_operand CP '*UOM*'
        OR l_related_operand CP '*UNIT*'.
        IF NOT l_related_operand CP '*ORG_UNIT*'.
          IF _is_foreignkey(
                       im_table         = 'T006'
                       im_key_fieldname = 'MSEHI'
                       im_key_value     = im_literal ) = 0.
            re_message_code        = '0205'. "#".
            RETURN.
          ELSE.
            re_message_code        = '0206'. "#".
            IF   l_related_operand   CP '*MSEHI*'
              OR l_related_operand   CP '*MEINS*'
                  OR l_related_operand CP '*MEINH*'
              OR l_related_operand   CP '*GEWEI*'.
              RETURN.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

**- Check Partner Function in TPAR
*    IF strlen( im_literal ) <= 2.
*      IF l_related_operand   CP '*PARVW*'
*        OR l_related_operand CP '*NRART*'
*        OR l_related_operand CP '*PARTN_ROLE*'
*        OR l_related_operand CP '*PARTNER_ROLE*'.
*        IF _is_foreignkey(
*                     im_table         = 'TPAR'
*                     im_key_fieldname = 'PARVW'
*                     im_key_value     = im_literal ) = 0.
*          re_message_code        = '0207'. "#".
*          RETURN.
*        ELSE.
*          DATA: l_parvw(2) TYPE c.
**         Conversion Exit
*          CALL FUNCTION 'CONVERSION_EXIT_PARVW_INPUT'
*            EXPORTING
*              input  = im_literal
*            IMPORTING
*              output = l_parvw.
*          IF _is_foreignkey(
*                       im_table         = 'TPAR'
*                       im_key_fieldname = 'PARVW'
*                       im_key_value     = l_parvw
*                       ) = 0.
*            re_message_code        = '0207'. "#".
*            RETURN.
*          ENDIF.
*
*          re_message_code        = '0208'. "#".
*          IF   l_related_operand   CP '*PARVW*'
*            OR l_related_operand   CP '*PARTN_ROLE*'.
*            RETURN.
*          ENDIF.
*        ENDIF.
*      ENDIF.
*    ENDIF.

*-   Check Customer account groups in T077D
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*KTOKD*'
         OR l_related_operand CP '*ACCNT_GRP*'.
        IF _is_foreignkey(
                       im_table         = 'T077D'
                       im_key_fieldname = 'KTOKD'
                       im_key_value     = im_literal ) = 0.
          re_message_code        = '0209'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0210'. "#".
          IF   l_related_operand   CP '*KTOKD*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Vendor account groups in T077K
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*KTOKK*'
         OR l_related_operand CP '*ACCNT_GRP*'.
        IF _is_foreignkey(
                     im_table         = 'T077K'
                     im_key_fieldname = 'KTOKK'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0211'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0212'. "#".
          IF   l_related_operand   CP '*KTOKK*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Material Type in DOMAIN BESKZ
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*MTART*'
        OR l_related_operand CP '*MATERIAL_TYPE*'
        OR l_related_operand CP '*MATL_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'T134'
                     im_key_fieldname = 'MTART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0213'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0214'. "#".
          IF   l_related_operand   CP '*MTART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.


*-   Check Sales Document Type in TVAK
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*AUART*'
        OR l_related_operand CP '*DOC_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'TVAK'
                     im_key_fieldname = 'AUART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0215'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0216'."#".
          IF   l_related_operand   CP '*AUART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Delivery Type in TVLK
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*LFART*'
        OR l_related_operand CP '*DLV_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'TVLK'
                     im_key_fieldname = 'LFART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0217'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0218'. "#".
          IF   l_related_operand   CP '*LFART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Billing Type in TVFK
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*FKART*'
        OR l_related_operand CP '*BILL_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'TVFK'
                     im_key_fieldname = 'FKART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0219'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0220'. "#".
          IF   l_related_operand   CP '*FKART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.


*-   Check Procurement Type in DOMAIN BESKZ
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*BESKZ*'
        OR l_related_operand CP '*PROC_TYPE*'.
        IF im_literal CA 'EF X'.
          re_message_code        = '0223'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0224'. "#".
          IF   l_related_operand   CP '*BESKZ*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Purchasing Document Types in T161
    IF strlen( im_literal ) <= 4.
      IF l_related_operand   CP '*BSTYP*'
        OR l_related_operand CP '*BSART*'
        OR l_related_operand CP '*PROC_TYPE'.
        IF _is_foreignkey(
                     im_table         = 'T161'
                     im_key_fieldname = 'BSART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0221'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0222'. "#".
          IF   l_related_operand CP '*BSTYP*'
            OR l_related_operand CP '*BSART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Movement Type (Inventory Management) in T156
    IF strlen( im_literal ) <= 3.
      IF l_related_operand   CP '*BWART*'
        OR l_related_operand CP '*MOVE_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'T156'
                     im_key_fieldname = 'BWART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0227'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0228'. "#".
          IF   l_related_operand CP '*BWART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Shipping conditions in TVSB
    IF strlen( im_literal ) <= 2.
      IF   l_related_operand  CP '*VSBED'
         OR l_related_operand CP '*SHIP_COND*'.
        IF _is_foreignkey(
                     im_table         = 'TVSB'
                     im_key_fieldname = 'VSBED'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0229'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0230'. "#".
          IF   l_related_operand CP '*VSBED*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Item Category in Purchasing Document in TVSB
    IF strlen( im_literal ) <= 1.
      IF   l_related_operand  CP '*PSTYP*'
         OR l_related_operand CP '*ITEM_CAT*'.
        IF _is_foreignkey(
                     im_table         = 'T163'
                     im_key_fieldname = 'PSTYP'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0231'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0232'. "#".
          IF   l_related_operand CP '*PSTYP*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Sales document item category in TVPT
    IF strlen( im_literal ) <= 4.
      IF   l_related_operand  CP '*PSTYV*'
         OR l_related_operand CP '*ITEM_CATEG*'.
        IF _is_foreignkey(
                     im_table         = 'TVPT'
                     im_key_fieldname = 'PSTYV'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0233'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0234'. "#".
          IF   l_related_operand CP '*PSTYV*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.


*-   Check Condition Type in T685
    IF strlen( im_literal ) <= 4.
      IF   l_related_operand  CP '*KSCHL*'
         OR l_related_operand CP '*COND_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'T685'
                     im_key_fieldname = 'KSCHL'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0235'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0236'. "#".
          IF   l_related_operand CP '*KSCHL*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Document Type in T003
    IF strlen( im_literal ) <= 2.
      IF   l_related_operand  CP '*BLART*'
         OR l_related_operand CP '*DOC_TYPE*'.
        IF _is_foreignkey(
                     im_table         = 'T003'
                     im_key_fieldname = 'BLART'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0237'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0238'. "#".
          IF   l_related_operand  CP '*BLART*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*-   Check Price list type in T189
    IF strlen( im_literal ) <= 2.
      IF   l_related_operand  CP '*PLTYP'
         OR l_related_operand CP '*PRICE_LIST*'.
        IF _is_foreignkey(
                     im_table         = 'T189'
                     im_key_fieldname = 'PLTYP'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0239'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0240'. "#".
          IF   l_related_operand CP '*PLTYP*'.
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*--------------------------------------------------------------------*
* MASTER DATA
*--------------------------------------------------------------------*
*--   Check MATNR in MARA
    CONSTANTS: c_matnr_len_max TYPE i VALUE 18.
    IF strlen( im_literal ) <= c_matnr_len_max.
      IF   l_related_operand   CP '*MATNR*'
        OR l_related_operand   CP '*ARTICLE'
        OR l_related_operand   CP '*MATERIAL'.
        IF _is_foreignkey(
                     im_table         = 'MARA'
                     im_key_fieldname = 'MATNR'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0301'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0302'. "#".
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.

*--   Check Batch Number in MCH1
    IF strlen( im_literal ) <= 10.
      IF   l_related_operand   CP '*CHARG'
        OR l_related_operand   CP '*BATCH'.
        re_message_code        = '0302'. "#".
      ENDIF.
    ENDIF.

*--   Check Customer Number in KNA1
    IF strlen( im_literal ) <= 10.
      IF   l_related_operand   CP '*KUNNR'
        OR l_related_operand   CP '*KUNAG'
        OR l_related_operand   CP '*KUNRG'
        OR l_related_operand   CP '*KUNN2'
        OR l_related_operand   CP '*CUSTID'
        OR l_related_operand   CP '*CUSTOMER*'.
        IF NOT l_related_operand CP '*CUSTOMER*GROUP*'.
          IF _is_foreignkey(
                       im_table         = 'KNA1'
                       im_key_fieldname = 'KUNNR'
                       im_key_value     = im_literal ) = 0.
            re_message_code        = '0305'. "#".
            RETURN.
          ELSE.
            re_message_code        = '0306'. "#".
            RETURN.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*--   Check Account Number of Vendor or Creditor in LFA1
    IF strlen( im_literal ) <= 10.
      IF   l_related_operand   CP '*LIFNR'
        OR l_related_operand   CP '*VENDOR_NO'.
        IF _is_foreignkey(
                     im_table         = 'LFA1'
                     im_key_fieldname = 'LIFNR'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0307'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0308'. "#".
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.

*--   Check Reconciliation Account in General Ledger AKONT in SKA1
    IF strlen( im_literal ) <= 10.
      IF   l_related_operand   CP '*AKONT'
        OR l_related_operand   CP '*HKONT'
        OR l_related_operand   CP '*SAKNR'
        OR l_related_operand   CP '*GL_ACCOUNT'
        OR l_related_operand   CP '*CONTROL_ACCOUNT'.
        IF _is_foreignkey(
                     im_table         = 'SKA1'
                     im_key_fieldname = 'SAKNR'
                     im_key_value     = im_literal ) = 0.
          re_message_code        = '0309'. "#".
          RETURN.
        ELSE.
          re_message_code        = '0310'. "#".
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.

*--------------------------------------------------------------------*
* TRANSACTIONS
*--------------------------------------------------------------------*
*--   Check Accounting Document Number BELNR
    IF strlen( im_literal ) <= 10.
      IF   l_related_operand   CP '*BELNR'
        OR l_related_operand   CP '*AC_DOC_NO'.
        re_message_code        = '0351'. "#".
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    "get_type

  METHOD _is_foreignkey.
*/---------------------------------------------------------------------}
*| This file is part of Doctor ZedGe                                   |
*|                                                                     |
*| © 2014 Copyright by Techedge S.p.A.                                 |
*| No copy, distribution or reuse of this code is allowed              |
*| Read more at www.techedgegroup.com/oursolutions/doctor-zedge        |
*|---------------------------------------------------------------------/
    DATA: l_where_clause     TYPE char128.
    DATA: t_where_clause     TYPE STANDARD TABLE OF char128.

    l_where_clause = |{ im_key_fieldname } =  '{ im_key_value }'|.
    APPEND l_where_clause TO t_where_clause.

    TRY.
        SELECT COUNT(*) UP TO 1 ROWS
                  FROM (im_table)
                        WHERE (t_where_clause).
        re_subrc = sy-subrc.
      CATCH cx_sy_dynamic_osql_semantics.
        re_subrc = 8.
    ENDTRY.

*
  ENDMETHOD.                    "IS_FOREIGNKEY

  METHOD get_type2.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 21.02.2022 | 9784: Adaptation to introduce BRF+       *
*              |            |       and make it RFC enabled            *
*              |            | DS4K913083                               *
*----------------------------------------------------------------------*

    TYPES: BEGIN OF ltyp_s_filter,
             literal TYPE zpe_hm_text,
             operand TYPE zpe_hm_text,
           END OF ltyp_s_filter.

    DATA lv_table_field TYPE zpe_hm_text.


*   Adjust operand
*------------------
    CLEAR ev_message_code.
    DATA(lv_related_operand) = im_related_operand.
    adjust_operand( CHANGING cv_related_operand = lv_related_operand ).

*   Check if business object can be considered hardcoding
*---------------------------------------------------------
    TRY.
        zcl_pe_hm_complex=>get_value( EXPORTING iv_id     = '024F85009E261EEC91DC70C0246840D2'
                                                is_filter = VALUE ltyp_s_filter( literal = im_literal operand = lv_related_operand )
                                      IMPORTING ev_value  = lv_table_field ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.


*-- Get field description for ATC error message
    IF lv_table_field CS '-'.
      DATA(lv_table) = CONV tabname( substring_before( val = lv_table_field sub = '-' ) ).
      DATA(lv_field) = CONV fieldname( substring_after( val = lv_table_field sub = '-' ) ).
      get_field_description( EXPORTING iv_table       = lv_table
                                       iv_field       = lv_field
                             IMPORTING ev_description = ev_field_description ).
    ENDIF.


*-- For Remote execution we cannot check if value exists
    IF iv_destination <> 'NONE' OR
       lv_table_field NS '-'    OR
     ( iv_destination = 'NONE' AND _is_foreignkey( im_table         = lv_table
                                                   im_key_fieldname = lv_field
                                                   im_key_value     = im_literal ) EQ 0 ).
      ev_message_code = '0900'.
    ENDIF.

  ENDMETHOD.

  METHOD adjust_operand.
************************************************************************
*  CREATION DATE:  02/2018                                             *
*  REFERENCE    :  GE-6527                                             *
*  TRANSPORT    :  DEUK9D1C1V                                          *
*----------------------------------------------------------------------*
*  DESCRIPTION                                                         *
*    Adjust operand - Method extraction, no new code                   *
*----------------------------------------------------------------------*
*  AUTHOR DETAILS                                                      *
*    NAME    :  Carlos Cano                                            *
*    COMPANY :  adidas PE&A                                            *
*----------------------------------------------------------------------*

    DATA lv_tabname TYPE string.
    DATA lv_fieldname TYPE string.
    DATA lv_leading_string TYPE string.
    DATA lv_trailing_string TYPE string.
    DATA lv_related_operand_tab_field TYPE string.



* for offset (e.g. NAME1+2(22) )
    SPLIT cv_related_operand AT '+' INTO lv_leading_string lv_trailing_string.
    IF NOT lv_trailing_string IS INITIAL.
      cv_related_operand = lv_leading_string.
    ENDIF.

* for substring (e.g. NAME1(22) )
    SPLIT cv_related_operand AT '(' INTO lv_leading_string lv_trailing_string.
    IF NOT lv_trailing_string IS INITIAL.
      cv_related_operand = lv_leading_string.
    ENDIF.

* for Joins
    SPLIT cv_related_operand AT '~' INTO lv_leading_string lv_trailing_string.
    IF NOT lv_trailing_string IS INITIAL.
      cv_related_operand = lv_trailing_string.
    ENDIF.

*- Table - Field
    SPLIT cv_related_operand AT '-' INTO lv_tabname lv_fieldname.
    IF lv_fieldname IS INITIAL.
      lv_related_operand_tab_field = lv_tabname.
      cv_related_operand           = lv_tabname.
    ELSE.
      IF   lv_fieldname = 'LOW'
        OR lv_fieldname = 'HIGH'
        OR lv_fieldname = 'OPTION'
        OR lv_fieldname = 'SIGN'
        .
        cv_related_operand           = lv_tabname.
      ELSE.
        SPLIT lv_tabname AT '_' INTO lv_leading_string lv_trailing_string.
        IF NOT lv_trailing_string IS INITIAL.
          lv_tabname                   = lv_trailing_string.
          lv_related_operand_tab_field = lv_trailing_string.
          cv_related_operand           = lv_fieldname.
        ELSE.
          lv_related_operand_tab_field = lv_tabname.
          cv_related_operand           = lv_fieldname.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_field_description.
************************************************************************
*  CREATION DATE:  02/2018                                             *
*  REFERENCE    :  GE-6527                                             *
*  TRANSPORT    :  DEUK9D1C1V                                          *
*----------------------------------------------------------------------*
*  DESCRIPTION                                                         *
*    Gets field description from table&field combination to display    *
*    message dinamically                                               *
*----------------------------------------------------------------------*
*  AUTHOR DETAILS                                                      *
*    NAME    :  Carlos Cano                                            *
*    COMPANY :  adidas PE&A                                            *
*----------------------------------------------------------------------*

    CLEAR ev_description.
    SELECT SINGLE dd04t~ddtext
      FROM dd03l AS dd03l INNER JOIN dd04t AS dd04t
        ON dd03l~rollname EQ dd04t~rollname
      INTO ev_description
     WHERE dd03l~tabname    = iv_table AND
           dd03l~fieldname  = iv_field AND
           dd04t~ddlanguage = sy-langu.
    IF sy-subrc NE 0.
      ev_description = iv_table && '-' && iv_field.
    ENDIF.

  ENDMETHOD.

ENDCLASS.                    "lcl_hard_code IMPLEMENTATION