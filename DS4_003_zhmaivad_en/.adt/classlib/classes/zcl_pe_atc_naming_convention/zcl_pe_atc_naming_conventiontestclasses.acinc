*"* use this source file for your ABAP unit test classes
CLASS ltc_data_provider DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.

    TYPES: BEGIN OF mtyp_s_table_category,
             tabname  TYPE dd02l-tabname,
             tabclass TYPE dd02l-tabclass,
           END OF mtyp_s_table_category.

    METHODS check_object_creation REDEFINITION.
    METHODS get_table_category REDEFINITION.
    METHODS set_table_category IMPORTING is_table_category TYPE mtyp_s_table_category.

  PRIVATE SECTION.

    DATA: mt_table_category TYPE STANDARD TABLE OF mtyp_s_table_category.

ENDCLASS.

CLASS ltc_data_provider IMPLEMENTATION.

  METHOD check_object_creation.
*   Always object creation
    RETURN.
  ENDMETHOD.

  METHOD get_table_category.

    CLEAR ev_tab_class.
    READ TABLE mt_table_category WITH KEY tabname = CONV #( iv_object_name ) ASSIGNING FIELD-SYMBOL(<ls_table_category>)
                                 BINARY SEARCH.
    IF sy-subrc = 0 AND <ls_table_category> IS ASSIGNED.
      ev_tab_class = <ls_table_category>-tabclass.
    ENDIF.

  ENDMETHOD.

  METHOD set_table_category.

    mt_table_category = VALUE #( ( is_table_category ) ).

  ENDMETHOD.

ENDCLASS.



CLASS lcl_check_new_object DEFINITION FINAL FOR TESTING
                           DURATION SHORT
                           RISK LEVEL HARMLESS.

* All objects are new objects.- This is simulated by a test double
* Table objects don't need to exist, must be added with the corresponding category into the test double
  PRIVATE SECTION.
    METHODS:
      setup,
      tear_down ##RELAX,
      right_table FOR TESTING RAISING cx_static_check,
      wrong_table FOR TESTING RAISING cx_static_check,
      right_structure FOR TESTING RAISING cx_static_check,
      right_structure_aif FOR TESTING RAISING cx_static_check,
      wrong_structure FOR TESTING RAISING cx_static_check,
      right_append FOR TESTING RAISING cx_static_check,
      wrong_append FOR TESTING RAISING cx_static_check,
      right_view FOR TESTING RAISING cx_static_check,
      wrong_view FOR TESTING RAISING cx_static_check,
      right_cds FOR TESTING RAISING cx_static_check,
      wrong_cds FOR TESTING RAISING cx_static_check,
      not_existing_cds FOR TESTING RAISING cx_static_check,
      right_message_class FOR TESTING RAISING cx_static_check,
      wrong_message_class FOR TESTING RAISING cx_static_check,
      right_adobe_form FOR TESTING RAISING cx_static_check,
      wrong_adobe_form FOR TESTING RAISING cx_static_check,
      wrong_table_type FOR TESTING RAISING cx_static_check,
      right_table_type FOR TESTING RAISING cx_static_check,
      right_table_type_aif FOR TESTING RAISING cx_static_check,
      right_domain FOR TESTING RAISING cx_static_check,
      right_data_element FOR TESTING RAISING cx_static_check.

    DATA: mo_cut         TYPE REF TO zcl_pe_atc_naming_convention,
          mo_test_double TYPE REF TO ltc_data_provider.

ENDCLASS.

CLASS zcl_pe_atc_naming_convention DEFINITION LOCAL FRIENDS lcl_check_new_object.

CLASS lcl_check_new_object IMPLEMENTATION.

  METHOD setup.

    "given
    mo_cut = NEW zcl_pe_atc_naming_convention( ).

    "given some SAP modules
    mo_cut->mt_sap_area = VALUE #( ( 'PE' ) ( 'FI' ) ).

    "given a fake data provider to simulate all objects are being created
    mo_test_double = NEW ltc_data_provider( ).
    mo_cut->get_data_provider( mo_test_double ).

  ENDMETHOD.

  METHOD tear_down.
    FREE: mo_cut,
          mo_test_double.
  ENDMETHOD.

  METHOD right_table.

    "given a naming convention
    mo_cut->mt_tabl_transp = VALUE #( ( 'Z<area>_T_*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZPE_T_HM' tabclass = 'TRANSP' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZPE_T_HM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_table.

    "given a naming convention
    mo_cut->mt_tabl_transp = VALUE #( ( 'Z<area>_T_*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZADI_M_EVENT_DET' tabclass = 'TRANSP' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZADI_M_EVENT_DET' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_structure.

    "given a naming convention
    mo_cut->mt_tabl_inttab = VALUE #( ( 'Z<area>_S_*' ) ( 'Z<area>_AIF_*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZPE_S_HM_MAIN' tabclass = 'INTTAB' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZPE_S_HM_MAIN' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_structure_aif.

    "given a naming convention
    mo_cut->mt_tabl_inttab = VALUE #( ( 'Z<area>_S_*' ) ( 'Z<area>_AIF_*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZPE_AIF_HM_MAIN' tabclass = 'INTTAB' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZPE_AIF_HM_MAIN' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_structure.

    "given a naming convention
    mo_cut->mt_tabl_inttab = VALUE #( ( 'Z<area>_S_*' ) ( 'Z<area>_AIF_*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZADI_GR_INTRANSIT' tabclass = 'INTTAB' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZADI_GR_INTRANSIT' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_append.

    "given a naming convention
    mo_cut->mt_tabl_append = VALUE #( ( 'ZZ*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZZ_APP_OK' tabclass = 'APPEND' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZZ_APP_OK' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_append.

    "given a naming convention
    mo_cut->mt_tabl_append = VALUE #( ( 'ZZ*' ) ).

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZSD_X_APP_ERROR' tabclass = 'APPEND' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TABL' iv_object_name = 'ZSD_X_APP_ERROR' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_view.

    "given a naming convention
    mo_cut->mv_view = 'Z<area>_V_*'.

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZFI_V_INV_ITEM_1' tabclass = 'VIEW' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'VIEW' iv_object_name = 'ZFI_V_INV_ITEM_1' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_view.

    "given a naming convention
    mo_cut->mv_view = 'Z<area>_V_*'.

    "given a fake object
    mo_test_double->set_table_category( is_table_category = VALUE #( tabname = 'ZSD_X_VIEW' tabclass = 'VIEW' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'VIEW' iv_object_name = 'ZSD_X_VIEW' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_table_type.

    "given a naming convention
    mo_cut->mt_ttyp = VALUE #( ( 'Z<area>_TT_*' ) ( 'Z<area>_AIF_*' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TTYP' iv_object_name = 'ZZSD_R_BLART' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_table_type.

    "given a naming convention
    mo_cut->mt_ttyp = VALUE #( ( 'Z<area>_TT_*' ) ( 'Z<area>_AIF_*' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TTYP' iv_object_name = 'ZFI_TT_SOMETHING' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_table_type_aif.

    "given a naming convention
    mo_cut->mt_ttyp = VALUE #( ( 'Z<area>_TT_*' ) ( 'Z<area>_AIF_*' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'TTYP' iv_object_name = 'ZFI_AIF_SOMETHING' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_cds.

    "given a naming convention
    mo_cut->mt_ddls = VALUE #( ( 'Z<AREA>_I_*' ) ( 'Z<AREA>_C_*' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'DDLS' iv_object_name = 'ZPE_I_HM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_cds.

    "given a naming convention
    mo_cut->mt_ddls = VALUE #( ( 'Z<AREA>_I_*' ) ( 'Z<AREA>_C_*' ) ).

    "valid abstract CDS but not valid for naming convention defined in this test method
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'DDLS' iv_object_name = 'ZSD_A_LABEL_PRINTING' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD not_existing_cds.

    "given a naming convention
    mo_cut->mt_ddls = VALUE #( ( 'Z<AREA>_I_*' ) ( 'Z<AREA>_C_*' ) ).

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'DDLS' iv_object_name = 'ZPE_HM' ).
      CATCH zcx_pe_atc_not_relevant.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_message_class.

    "given a naming convention
    mo_cut->mv_msag = 'Z<AREA>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'MSAG' iv_object_name = 'ZPE_HM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_message_class.

    "given a naming convention
    mo_cut->mv_msag = 'Z<AREA>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'MSAG' iv_object_name = 'YPE_HM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_adobe_form.

    "given a naming convention
    mo_cut->mv_sfpf = 'Z<AREA>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'SFPF' iv_object_name = 'ZPE_TEST_NC' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD wrong_adobe_form.

    "given a naming convention
    mo_cut->mv_sfpf = 'Z<AREA>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'SFPF' iv_object_name = 'ZTEST_NC' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_domain.

    "given a naming convention
    mo_cut->mv_doma = 'Z<area>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'DOMA' iv_object_name = 'ZPE_RECTYPE' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

  METHOD right_data_element.

    "given a naming convention
    mo_cut->mv_dtel = 'Z<area>_*'.

    "when
    TRY.
        mo_cut->is_object_correct( iv_object_type = 'DTEL' iv_object_name = 'ZFI_STATUS_NEW' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.

  ENDMETHOD.

ENDCLASS.