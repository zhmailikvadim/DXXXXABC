CLASS ltc_data_provider_standard DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.

    METHODS is_relevant_service REDEFINITION.
    METHODS get_service REDEFINITION.

ENDCLASS.

CLASS ltc_data_provider_standard IMPLEMENTATION.

  METHOD get_service.
    rv_service = 'SAP'.

  ENDMETHOD.

  METHOD is_relevant_service.
    "is SAP standard service
    rv_result = abap_false.

  ENDMETHOD.

ENDCLASS.
CLASS ltc_data_provider_custom DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.

    METHODS is_relevant_service REDEFINITION.
    METHODS get_service REDEFINITION.

ENDCLASS.

CLASS ltc_data_provider_custom IMPLEMENTATION.

  METHOD get_service.
    rv_service = 'Z'.

  ENDMETHOD.

  METHOD is_relevant_service.
    "is SAP standard service
    rv_result = abap_true.

  ENDMETHOD.

ENDCLASS.

CLASS ltc_check_objects DEFINITION
  FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA: mo_cut                  TYPE REF TO zcl_pe_atc_obsolete_objects,
          mo_test_double_standard TYPE REF TO ltc_data_provider_standard,
          mo_test_double_custom   TYPE REF TO ltc_data_provider_custom.
    METHODS:
      setup,
      check_positive FOR TESTING RAISING cx_static_check,
      check_negative FOR TESTING RAISING cx_static_check,
      check_standard_service FOR TESTING RAISING cx_static_check,
      check_custom_service FOR TESTING RAISING cx_static_check.
ENDCLASS.
CLASS zcl_pe_atc_obsolete_objects DEFINITION LOCAL FRIENDS ltc_check_objects.

CLASS ltc_check_objects IMPLEMENTATION.

  METHOD check_positive.
    TRY.
        mo_cut->is_object_obsolete( iv_object_type = 'SSFO' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
      CATCH zcx_pe_atc_not_relevant.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.
  ENDMETHOD.

  METHOD setup.
    mo_cut = NEW #( ).
    mo_cut->mt_obsoletes = VALUE #( ( 'SSFO' )
                                    ( 'IWOM' ) ).
  ENDMETHOD.

  METHOD check_negative.
    TRY.
        mo_cut->is_object_obsolete( iv_object_type = 'CLAS' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
      CATCH zcx_pe_atc_not_relevant.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.
  ENDMETHOD.

  METHOD check_standard_service.
    "given a fake data provider to simulate all objects are being created
    mo_test_double_standard = NEW ltc_data_provider_standard( ).
    mo_cut->get_data_provider( mo_test_double_standard ).
    TRY.
        mo_cut->is_object_obsolete( iv_object_type = 'IWOM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_false ).
      CATCH zcx_pe_atc_not_relevant.
        cl_abap_unit_assert=>assert_true( abap_true ).
    ENDTRY.
  ENDMETHOD.

  METHOD check_custom_service.
    "given a fake data provider to simulate all objects are being created
    mo_test_double_custom = NEW ltc_data_provider_custom( ).
    mo_cut->get_data_provider( mo_test_double_custom ).
    TRY.
        mo_cut->is_object_obsolete( iv_object_type = 'IWOM' ).
      CATCH zcx_pe_atc_error.
        cl_abap_unit_assert=>assert_true( abap_true ).
      CATCH zcx_pe_atc_not_relevant.
        cl_abap_unit_assert=>assert_true( abap_false ).
    ENDTRY.
  ENDMETHOD.

ENDCLASS.