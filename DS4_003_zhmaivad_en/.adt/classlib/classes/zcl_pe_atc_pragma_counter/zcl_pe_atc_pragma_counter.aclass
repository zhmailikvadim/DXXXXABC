CLASS zcl_pe_atc_pragma_counter DEFINITION
  PUBLIC
  INHERITING FROM zcl_pe_atc_aoc_super
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    METHODS check REDEFINITION.
    METHODS constructor.
    METHODS get_attributes              REDEFINITION.
    METHODS put_attributes              REDEFINITION.
    METHODS if_ci_test~query_attributes REDEFINITION.

  PROTECTED SECTION.

  PRIVATE SECTION.

    DATA mv_max_number TYPE i.

ENDCLASS.



CLASS ZCL_PE_ATC_PRAGMA_COUNTER IMPLEMENTATION.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.06.2023 | 22269: Creation                          *
*              |            | DS4K955411                               *
************************************************************************

    super->constructor( ).

    description        = 'Pragma & Pseudocomment overuse'(000).
    category           = zcl_pe_atc_category_005=>gc_my_name.
    position           = '100'.
    version            = '001'.
    has_attributes     = abap_true.
    has_documentation  = abap_true.
    remote_rfc_enabled = abap_true.
    uses_checksum      = abap_true.

    INSERT VALUE #( test = myname code = '0001' kind = 'E' text = 'Usage limit per code unit exceeded (&1 > &2)'(001) ) INTO TABLE scimessages.

  ENDMETHOD.


  METHOD get_attributes.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.06.2023 | 22269: Creation                          *
*              |            | DS4K955411                               *
************************************************************************

    EXPORT max_number = mv_max_number TO DATA BUFFER p_attributes.

  ENDMETHOD.


  METHOD put_attributes.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.06.2023 | 22269: Creation                          *
*              |            | DS4K955411                               *
************************************************************************

    IMPORT max_number = mv_max_number FROM DATA BUFFER p_attributes. "#EC CI_SUBRC

  ENDMETHOD.


  METHOD if_ci_test~query_attributes.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.06.2023 | 22269: Creation                          *
*              |            | DS4K955411                               *
************************************************************************

    DATA lt_attributes TYPE sci_atttab.

    INSERT VALUE #( ref = REF #( mv_max_number ) text = 'Usage limit'(002) kind = ' ' ) INTO TABLE lt_attributes.

    IF cl_ci_query_attributes=>generic( p_name       = myname
                                        p_title      = 'Settings'(003)
                                        p_attributes = lt_attributes
                                        p_display    = p_display ) = 'X'.
      RETURN.
    ENDIF.

    attributes_ok = 'X'.

  ENDMETHOD.


  METHOD check.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.06.2023 | 22269: Creation                          *
*              |            | DS4K955411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 12.2023    | 27103: Housekeeping SLG1                 *
*              |            | DS4K971853                               *
************************************************************************

    TYPES: BEGIN OF ltyp_s_counter,
             program TYPE level_name,
             counter TYPE i,
           END OF ltyp_s_counter.

    DATA lt_counter TYPE STANDARD TABLE OF ltyp_s_counter.


*-- Collecting Pragmas (##) and Pseudocomments (#EC)
    LOOP AT io_scan->tokens ASSIGNING FIELD-SYMBOL(<ls_token>) WHERE str CS `##` OR str CS `#EC`.
      DATA(lv_token_index) = sy-tabix.
*     Skip commented ones
      IF substring( val = <ls_token>-str len = 1 ) = `*` OR substring( val = <ls_token>-str len = 2 ) = `""`.
        CONTINUE.
      ENDIF.
      LOOP AT io_scan->statements ASSIGNING FIELD-SYMBOL(<ls_statement>) WHERE from <= lv_token_index AND to >= lv_token_index. "#EC CI_NESTED
        EXIT.
      ENDLOOP.
      READ TABLE io_scan->levels ASSIGNING FIELD-SYMBOL(<ls_level>) INDEX <ls_statement>-level.
      IF sy-subrc = 0 AND <ls_level>-type <> 'D'.                                                                               "Skip macros
        IF zcl_pe_atc_aoc_super=>is_relevant( iv_program = <ls_level>-name ).
          DATA(ls_counter) = VALUE ltyp_s_counter( program = <ls_level>-name counter = 1 ).
          COLLECT ls_counter INTO lt_counter.
        ENDIF.
      ENDIF.
    ENDLOOP.


*-- Error messages per code unit
    LOOP AT lt_counter ASSIGNING FIELD-SYMBOL(<ls_counter>) WHERE counter > mv_max_number.

*     Checksum with program name and number of pragmas: if you increase the number of pragmas, you would need to request a new exemption
*     Note: Baseline was generated for all numbers between limit and detected number at baseline population time
      DATA(lv_checksum) = zcl_pe_atc_aoc_super=>generate_checksum_from_string(
                              |{ <ls_counter>-program }_{ CONV char03( <ls_counter>-counter ) }|  ).

      inform( p_sub_obj_name = <ls_counter>-program
              p_sub_obj_type = 'PROG'
              p_line         = 0
              p_checksum_1   = lv_checksum
              p_kind         = c_error
              p_test         = myname
              p_code         = '0001'
              p_param_1      = CONV char03( <ls_counter>-counter )
              p_param_2      = CONV char01( mv_max_number ) ).

    ENDLOOP.

  ENDMETHOD.
ENDCLASS.