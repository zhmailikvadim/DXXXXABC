CLASS ltc_conversor_v2 DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS:
      first_test FOR TESTING RAISING cx_static_check,
      date_test FOR TESTING RAISING cx_static_check.
ENDCLASS.


CLASS ltc_conversor_v2 IMPLEMENTATION.

  METHOD first_test.
    DATA: lv_json_string TYPE string.
    DATA: BEGIN OF ls_filters,
            companycode       TYPE string,
            plant             TYPE zpe_s_selectall_fe_filters_v2,
            fiscalyear        TYPE string,
            currentperiod     TYPE string,
            producttypegradea TYPE zpe_s_selectall_fe_filters_v2,
          END OF ls_filters.
    lv_json_string = '{"CompanyCode":"CH01","Plant":{"value":null,"ranges":[{"exclude":true,"operation":"EQ","keyField":"Plant",'.
    lv_json_string = lv_json_string && '"value1":"0DE2","value2":null,"tokenText":"!(=0DE2)"},{"exclude":false,"operation":"BT","keyField":"Plant",'.
    lv_json_string = lv_json_string && '"value1":"0DE1","value2":"0DE3","tokenText":"0DE1...0DE3"}],"items":[{"key":"0CH9","text":"0CH9 - Template Virtual DC (0CH9)"}]},'.
    lv_json_string = lv_json_string && '"FiscalYear":"2022","CurrentPeriod":"12","ProductTypeGradeA":{"value":null,"ranges":[],"items":[{"key":"MODE","text":"Apparel (seasonal) (MODE)"}]}}'.

    DATA(lo_conversor) = zcl_pe_fe2be_conversor=>get_instance( ).
    lo_conversor->adjust_string_v2( CHANGING cv_fe_filter_string = lv_json_string ).
    /ui2/cl_json=>deserialize(
      EXPORTING
        json = lv_json_string
      CHANGING
        data = ls_filters ).
    DATA(lt_filters) = lo_conversor->get_be_range_v2( ls_filters ).

    IF lt_filters[ name = `COMPANYCODE` ]-range[ 1 ]-low <> 'CH01'.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
  ENDMETHOD.
  METHOD date_test.
    DATA: lv_json_string TYPE string.
    DATA: BEGIN OF ls_filters,
            date TYPE zpe_s_selectall_fe_filters_v2,
          END OF ls_filters.
    lv_json_string = '{"Date":{"value":null,"ranges":[{"exclude":false,"operation":"BT","keyField":"Date","value1":"2023-08-01T18:00:00.000Z","value2":"2023-08-02T18:00:00.000Z"}]}}'.

    DATA(lo_conversor) = zcl_pe_fe2be_conversor=>get_instance( ).
    lo_conversor->set_daterange_v2( 'DATE' ).
    lo_conversor->adjust_string_v2( CHANGING cv_fe_filter_string = lv_json_string ).
    /ui2/cl_json=>deserialize(
      EXPORTING
        json = lv_json_string
      CHANGING
        data = ls_filters ).
    DATA(lt_filters) = lo_conversor->get_be_range_v2( ls_filters ).

    IF lt_filters[ name = `DATE` ]-range[ 1 ]-low <> '20230801' OR
       lt_filters[ name = `DATE` ]-range[ 1 ]-high <> '20230802'.
      cl_abap_unit_assert=>fail( ).
    ENDIF.
  ENDMETHOD.

ENDCLASS.