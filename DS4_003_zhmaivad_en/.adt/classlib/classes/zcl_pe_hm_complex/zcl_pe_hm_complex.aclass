CLASS zcl_pe_hm_complex DEFINITION
  PUBLIC
  CREATE PRIVATE
  INHERITING FROM zcl_pe_hm.


  PUBLIC SECTION.

    INTERFACES if_amdp_marker_hdb.

    CONSTANTS: gc_class_name TYPE seoclsname  VALUE 'ZCL_PE_HM_COMPLEX',
               gc_tool       TYPE zpe_hm_tool VALUE icon_workflow,
               gc_type       TYPE zpe_hm_type VALUE '2'.

    CLASS-METHODS get_value
      IMPORTING VALUE(iv_id)           TYPE if_fdt_types=>id
                VALUE(is_filter)       TYPE any OPTIONAL
                VALUE(iv_mapping_type) TYPE zpe_hm_mapping_type DEFAULT 'N'
                iv_timestamp           TYPE timestamp OPTIONAL
      EXPORTING VALUE(ev_value)        TYPE any
      RAISING   zcx_pe_hm.

    CLASS-METHODS get_table
      IMPORTING iv_id           TYPE if_fdt_types=>id
                is_filter       TYPE any OPTIONAL
                iv_mapping_type TYPE zpe_hm_mapping_type DEFAULT 'N'
                iv_timestamp    TYPE timestamp OPTIONAL
      EXPORTING et_table        TYPE ANY TABLE
      RAISING   zcx_pe_hm .

    CLASS-METHODS is_active
      IMPORTING iv_id            TYPE if_fdt_types=>id
                is_filter        TYPE any OPTIONAL
                iv_mapping_type  TYPE zpe_hm_mapping_type DEFAULT 'N'
                iv_timestamp     TYPE timestamp OPTIONAL
      RETURNING VALUE(rv_active) TYPE boolean.

    CLASS-METHODS search
      IMPORTING VALUE(iv_filter_ids)      TYPE string
                VALUE(iv_filter_e070)     TYPE string
                VALUE(iv_filter_wi)       TYPE string
                VALUE(iv_filter_ids_used) TYPE string
                VALUE(iv_filter_metadata) TYPE string
                VALUE(iv_type)            TYPE zpe_hm_type
                VALUE(iv_cust_object)     TYPE string
                VALUE(iv_in_use_yes)      TYPE icon_d
                VALUE(iv_in_use_no)       TYPE icon_d
                VALUE(iv_active_yes)      TYPE icon_d
                VALUE(iv_active_no)       TYPE icon_d
                VALUE(iv_type_in)         TYPE icon_d
                VALUE(iv_type_out)        TYPE icon_d
                VALUE(iv_client)          TYPE mandt
      EXPORTING VALUE(et_main)            TYPE zpe_tt_hm_output_main
                VALUE(et_trs)             TYPE zpe_tt_hm_output_trs
                VALUE(et_cns)             TYPE zpe_tt_hm_output_cns
                VALUE(et_metadata)        TYPE zpe_tt_hm_output_metadata
      RAISING   cx_amdp_execution_failed.

    CLASS-METHODS get_application_name RETURNING VALUE(rv_name) TYPE fdt_application_name
                                       RAISING   zcx_pe_hm .

  PROTECTED SECTION.

  PRIVATE SECTION.

    TYPES: BEGIN OF mtyp_s_data_element,
             position     TYPE i,
             data_element TYPE rollname,
           END OF mtyp_s_data_element,
           mtyp_t_data_elements TYPE STANDARD TABLE OF mtyp_s_data_element WITH KEY position.

    TYPES: BEGIN OF mtyp_s_data_element_matrix,
             source_position TYPE i,
             target_position TYPE i,
           END OF mtyp_s_data_element_matrix,
           mtyp_t_data_element_matrix TYPE STANDARD TABLE OF mtyp_s_data_element_matrix WITH KEY source_position target_position.


    CLASS-METHODS get_data_elements_brf
      IMPORTING VALUE(iv_brf_id)      TYPE if_fdt_types=>id
                VALUE(iv_timestamp)   TYPE timestamp
                VALUE(iv_function_id) TYPE if_fdt_types=>id
                VALUE(iv_dobj_type)   TYPE if_fdt_types=>data_object_type
      RETURNING VALUE(rt_data)        TYPE mtyp_t_data_elements
      RAISING   zcx_pe_hm.

    CLASS-METHODS get_data_elements_abap
      IMPORTING VALUE(is_data) TYPE any
      RETURNING VALUE(rt_data) TYPE mtyp_t_data_elements
      RAISING   zcx_pe_hm.

    CLASS-METHODS get_data_element_matrix
      IMPORTING it_source      TYPE mtyp_t_data_elements
                it_target      TYPE mtyp_t_data_elements
      RETURNING VALUE(rt_data) TYPE mtyp_t_data_element_matrix.

    CLASS-METHODS get_timestamp IMPORTING iv_id               TYPE if_fdt_types=>id
                                          iv_timestamp        TYPE timestamp OPTIONAL
                                RETURNING VALUE(rv_timestamp) TYPE timestamp
                                RAISING   zcx_pe_hm.

    CLASS-METHODS map_filter
      IMPORTING VALUE(iv_id)           TYPE if_fdt_types=>id
                VALUE(is_filter)       TYPE any
                VALUE(iv_timestamp)    TYPE timestamp
                VALUE(iv_mapping_type) TYPE zpe_hm_mapping_type
      RETURNING VALUE(rth_result)      TYPE abap_parmbind_tab
      RAISING   zcx_pe_hm.

    CLASS-METHODS call_brf_function
      IMPORTING VALUE(iv_id)           TYPE if_fdt_types=>id
                VALUE(is_filter)       TYPE any
                VALUE(iv_mapping_type) TYPE zpe_hm_mapping_type
                VALUE(iv_timestamp)    TYPE timestamp
      EXPORTING VALUE(ev_result_id)    TYPE if_fdt_types=>id
                VALUE(eo_data)         TYPE REF TO data
      RAISING   zcx_pe_hm.

    CLASS-METHODS get_data_element_abap
      IMPORTING VALUE(iv_field) TYPE any
      RETURNING VALUE(rv_value) TYPE rollname.

    CLASS-METHODS get_data_element_brf
      IMPORTING VALUE(iv_id)          TYPE if_fdt_types=>id
                VALUE(iv_timestamp)   TYPE timestamp
                VALUE(iv_function_id) TYPE if_fdt_types=>id
      RETURNING VALUE(rv_value)       TYPE rollname
      RAISING   zcx_pe_hm.

ENDCLASS.



CLASS zcl_pe_hm_complex IMPLEMENTATION.


  METHOD get_value.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 07.04.2022 | 10527      : Error text correction       *
*              |            | DS4K916071                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*
* CANOCAR      | 07.09.2022 | 13496: Avoid non existing versions       *
*              |            | DS4K929504                               *
************************************************************************

*-- Versioning
    DATA(lv_timestamp) = get_timestamp( iv_id        = iv_id
                                        iv_timestamp = iv_timestamp ).

*-- Call BRF+ function
    call_brf_function( EXPORTING iv_id           = iv_id
                                 is_filter       = is_filter
                                 iv_mapping_type = iv_mapping_type
                                 iv_timestamp    = lv_timestamp
                       IMPORTING eo_data         = DATA(lo_data) ).

*-- Is it a single element?
    DATA(lo_desc) = cl_abap_typedescr=>describe_by_data_ref( lo_data ).
    IF lo_desc->kind <> cl_abap_typedescr=>kind_elem.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e042(zpe_hm) WITH iv_id.
    ENDIF.

*-- Ouput
    TRY.
        ev_value = lo_data->*.
      CATCH cx_root ##CATCH_ALL.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
    ENDTRY.

  ENDMETHOD.


  METHOD call_brf_function.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    FIELD-SYMBOLS: <lt_data> TYPE any.
    DATA: lv_mapping_type TYPE zpe_hm_type.


*-- Check BRF Function ID
    TRY.
        cl_fdt_factory=>get_instance( )->get_function( iv_id ).
      CATCH cx_fdt_input.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e011(zpe_hm) WITH iv_id.
    ENDTRY.


*-- For single value filters, mapping by data element
    lv_mapping_type     = iv_mapping_type.
    DATA(lo_desc_input) = cl_abap_typedescr=>describe_by_data( is_filter ).
    IF lo_desc_input->kind = cl_abap_typedescr=>kind_elem.
      lv_mapping_type = zcl_pe_hm=>gc_s_mapping_type-data_elements.
    ENDIF.


*-- Filter(optional)
    IF is_filter IS NOT INITIAL.
      DATA(lth_name_value) = map_filter( is_filter       = is_filter
                                         iv_id           = iv_id
                                         iv_timestamp    = iv_timestamp
                                         iv_mapping_type = lv_mapping_type ).
    ENDIF.


*-- Prepare BRF+ Output
    TRY.
        cl_fdt_function_process=>get_data_object_reference( EXPORTING iv_function_id      = iv_id
                                                                      iv_data_object      = '_V_RESULT'
                                                                      iv_timestamp        = iv_timestamp
                                                                      iv_trace_generation = abap_false
                                                            IMPORTING er_data             = eo_data
                                                                      ev_data_object_name = DATA(lv_do_name) ).
        ASSIGN eo_data->* TO <lt_data>.
        IF sy-subrc NE 0.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
        ENDIF.

      CATCH cx_fdt_input INTO DATA(lo_exc1).
        READ TABLE lo_exc1->mt_message INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_message>).
        IF sy-subrc = 0.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE ID <ls_message>-msgid TYPE <ls_message>-msgty NUMBER <ls_message>-msgno
            WITH <ls_message>-msgv1 <ls_message>-msgv2 <ls_message>-msgv3 <ls_message>-msgv4.
        ENDIF.
    ENDTRY.


*-- Call BRF+ Function
    TRY.
        cl_fdt_function_process=>process( EXPORTING iv_function_id = iv_id
                                                    iv_timestamp   = iv_timestamp
                                          IMPORTING ea_result      = <lt_data>
                                          CHANGING  ct_name_value  = lth_name_value ).
        IF <lt_data> IS INITIAL.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e012(zpe_hm).
        ENDIF.

      CATCH cx_fdt INTO DATA(lo_exc2).
        READ TABLE lo_exc2->mt_message INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_message2>).
        IF sy-subrc = 0.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE ID <ls_message2>-msgid TYPE <ls_message2>-msgty NUMBER <ls_message2>-msgno
            WITH <ls_message2>-msgv1 <ls_message2>-msgv2 <ls_message2>-msgv3 <ls_message2>-msgv4.
        ENDIF.
    ENDTRY.


*-- Return also return ID if needed
    IF lv_mapping_type = zcl_pe_hm=>gc_s_mapping_type-data_elements.
      cl_fdt_function_process=>get_data_object_structure( EXPORTING iv_function_id      = iv_id
                                                                    iv_timestamp        = iv_timestamp
                                                                    iv_trace_generation = abap_false
                                                          IMPORTING et_data_object_info = DATA(lt_do_info) ).
      READ TABLE lt_do_info ASSIGNING FIELD-SYMBOL(<ls_do_info>) WITH KEY dobj_name = lv_do_name.
      IF sy-subrc = 0.
        CASE <ls_do_info>-dobj_type.
          WHEN cl_abap_typedescr=>kind_table.
            READ TABLE lt_do_info ASSIGNING FIELD-SYMBOL(<ls_str_info>) WITH KEY parent_id = <ls_do_info>-id
                                                                                 dobj_type = cl_abap_typedescr=>kind_struct.
            IF sy-subrc = 0.
              ev_result_id = <ls_str_info>-id.
            ENDIF.
          WHEN cl_abap_typedescr=>kind_elem.
            ev_result_id = <ls_do_info>-id.
        ENDCASE.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_table.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*
* CANOCAR      | 07.09.2022 | 13496: Avoid non existing versions       *
*              |            | DS4K929504                               *
*----------------------------------------------------------------------*
* CANOCAR      | 20.04.2023 | 20248      : aHM ODATA Service           *
*              |            | DS4K949969                               *
*----------------------------------------------------------------------*

    DATA lo_target TYPE REF TO data.

    FIELD-SYMBOLS: <lt_brf>    TYPE ANY TABLE,
                   <ls_target> TYPE any.

    CLEAR et_table.


*-- Versioning
    DATA(lv_timestamp) = get_timestamp( iv_id        = iv_id
                                        iv_timestamp = iv_timestamp ).

*-- Call BRF+ function
    call_brf_function( EXPORTING iv_id           = iv_id
                                 is_filter       = is_filter
                                 iv_mapping_type = COND #( WHEN iv_mapping_type = zcl_pe_hm=>gc_s_mapping_type-position THEN zcl_pe_hm=>gc_s_mapping_type-data_elements ELSE iv_mapping_type )
                                 iv_timestamp    = lv_timestamp
                       IMPORTING eo_data         = DATA(lo_data)
                                 ev_result_id    = DATA(lv_result_id) ).
*-- Is it a table?
    DATA(lo_desc) = cl_abap_typedescr=>describe_by_data_ref( lo_data ).
    IF lo_desc->kind <> cl_abap_typedescr=>kind_table.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
    ENDIF.

    ASSIGN lo_data->* TO <lt_brf>.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
    ENDIF.


*-- Output
    TRY.
        CASE iv_mapping_type.

*         Map ABAP name -> BRF+ name
          WHEN zcl_pe_hm=>gc_s_mapping_type-names.
            et_table = CORRESPONDING #( <lt_brf> ).
            IF et_table IS INITIAL.
              RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
            ENDIF.

*         ABAP data element -> BRF data element
          WHEN zcl_pe_hm=>gc_s_mapping_type-data_elements.
            CREATE DATA lo_target LIKE LINE OF et_table.
            ASSIGN lo_target->* TO <ls_target>.

            DATA(lt_data_elements_abap) = get_data_elements_abap( <ls_target> ).
            DATA(lt_data_elements_brf) = get_data_elements_brf( iv_brf_id      = lv_result_id
                                                                iv_timestamp   = lv_timestamp
                                                                iv_function_id = iv_id
                                                                iv_dobj_type   = lo_desc->kind ).
            DATA(lt_matrix) = get_data_element_matrix( it_source = lt_data_elements_brf
                                                       it_target = lt_data_elements_abap ).
            IF lt_matrix IS INITIAL.
              RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
            ENDIF.

            LOOP AT <lt_brf> ASSIGNING FIELD-SYMBOL(<ls_brf>).
              CLEAR <ls_target>.
              LOOP AT lt_matrix ASSIGNING FIELD-SYMBOL(<ls_matrix>). "#EC CI_NESTED
                ASSIGN COMPONENT <ls_matrix>-source_position OF STRUCTURE <ls_brf> TO FIELD-SYMBOL(<lv_source>).
                IF sy-subrc = 0.
                  ASSIGN COMPONENT <ls_matrix>-target_position OF STRUCTURE <ls_target> TO FIELD-SYMBOL(<lv_target>).
                  IF sy-subrc = 0.
                    <lv_target> = CONV #( <lv_source> ).
                  ENDIF.
                ENDIF.
              ENDLOOP.
              INSERT <ls_target> INTO TABLE et_table.
            ENDLOOP.

*         Column to column, by position
          WHEN zcl_pe_hm=>gc_s_mapping_type-position.
            CREATE DATA lo_target LIKE LINE OF et_table.
            LOOP AT <lt_brf> ASSIGNING FIELD-SYMBOL(<ls_brf_pos>).
              CLEAR lo_target->*.
              DO.
                ASSIGN COMPONENT sy-index OF STRUCTURE <ls_brf_pos>  TO FIELD-SYMBOL(<lv_source_pos>).
                IF sy-subrc NE 0.
                  EXIT.
                ENDIF.
                ASSIGN COMPONENT sy-index + 1 OF STRUCTURE lo_target->*  TO FIELD-SYMBOL(<lv_target_pos>).
                IF sy-subrc NE 0.
                  RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
                ENDIF.
                <lv_target_pos> = CONV #( <lv_source_pos> ).
              ENDDO.
              ASSIGN COMPONENT 'SEQUENCE' OF STRUCTURE lo_target->* TO <lv_target_pos>.
              IF sy-subrc = 0.
                <lv_target_pos> = sy-tabix.
                INSERT lo_target->* INTO TABLE et_table         ##GEN_OK.
              ENDIF.
            ENDLOOP.
        ENDCASE.

      CATCH cx_root.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e040(zpe_hm) WITH iv_id.
    ENDTRY.

  ENDMETHOD.


  METHOD is_active.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 09.05.2022 | 11153     : Creation                     *
*              |            | DS4K918494                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*
* CANOCAR      | 07.09.2022 | 13496: Avoid non existing versions       *
*              |            | DS4K929504                               *
*----------------------------------------------------------------------*
* RIOSNAT      | 29.06.2023 | 22648: Is_active fix                     *
*              |            | T4MTEMP-56841 - DS4K956533               *
************************************************************************
    TYPES: BEGIN OF ltyp_s_active,
             zpe_hm_active TYPE zpe_hm_active,
           END OF ltyp_s_active,
           ltyp_tt_active TYPE STANDARD TABLE OF ltyp_s_active.

    FIELD-SYMBOLS: <lt_brf>    TYPE ltyp_tt_active.

    TRY.
*       Versioning
        DATA(lv_timestamp) = get_timestamp( iv_id        = iv_id
                                            iv_timestamp = iv_timestamp ).
*       Call BRF+ function
        call_brf_function( EXPORTING
                                    iv_id           = iv_id
                                    is_filter       = is_filter
                                    iv_mapping_type = iv_mapping_type
                                    iv_timestamp    = lv_timestamp
                           IMPORTING
                                    eo_data         = DATA(lo_data) ).
*-- Is it a table?
        DATA(lo_desc) = cl_abap_typedescr=>describe_by_data_ref( lo_data ).
        TRY.
            IF lo_desc->kind = cl_abap_typedescr=>kind_table.
              ASSIGN lo_data->* TO <lt_brf>.
              rv_active = <lt_brf>[ 1 ]-zpe_hm_active.
            ELSEIF lo_desc->kind = cl_abap_typedescr=>kind_elem.
              rv_active = lo_data->*.
            ELSE.
              RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e051(zpe_hm) WITH iv_id.
            ENDIF.
          CATCH cx_root ##CATCH_ALL.
            RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e051(zpe_hm) WITH iv_id.
        ENDTRY.

      CATCH zcx_pe_hm.
        rv_active = abap_false.
    ENDTRY.

  ENDMETHOD.


  METHOD search BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT USING e070
                                                                     e07t
                                                                     e071k
                                                                     fdt_admn_0000
                                                                     fdt_admn_0103
                                                                     fdt_appl_0000
                                                                     fdt_fnct_0100
                                                                     fdt_fnct_0110
                                                                     fdt_rlst_0000
                                                                     fdt_rlst_1000
                                                                     fdt_dobj_0010
                                                                     fdt_dobj_0001
                                                                     fdt_dobj_0200
                                                                     fdt_dobj_0300
                                                                     dd04t.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 25.03.2022 | 10527      : Table logging               *
*              |            | DS4K916071                               *
*----------------------------------------------------------------------*
* CANOCAR      | 09.05.2022 | 11153     : Change fields fix            *
*              |            | DS4K918494                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*
* CANOCAR      | 24.06.2022 | 11930: Feature pack 22-2-6 Def1          *
*              |            | DS4K923007                               *
*----------------------------------------------------------------------*
* CANOCAR      | 10.02.2023 | 17810: JIRA Links                        *
*              |            | DS4K943375                               *
*----------------------------------------------------------------------*
* CANOCAR      | 08.05.2023 | 20248: Incorrect data element causing    *
*              |            |        internal error                    *
*              |            | DS4K949969                               *
*----------------------------------------------------------------------*
* CANOCAR      | 06.11.2023 | 26417: CHARM Integration                 *
*              |            | DS4K968701                               *
************************************************************************

*   1. Main data for BRF+
*---------------------------
    lt_brf_app = select distinct id from fdt_appl_0000 where devel_package LIKE 'Z%' AND
                                                             client = SESSION_CONTEXT( 'CLIENT' );
    lt_brf_fun = select fun.id,
                        fun.version,
                        fun.id as tabkey,
                        COALESCE( NULLIF( txt.text, ''), NULLIF( txt.short_text, ''), fun.name ) as description,
                        left( to_nvarchar( fun.cr_timestamp ), 8 ) as created_on,
                        substring( to_nvarchar( fun.cr_timestamp ), 9, 6 ) as created_at,
                        fun.cr_user as created_by,
                        left( to_nvarchar( fun.ch_timestamp ), 8 ) as changed_on,
                        substring( to_nvarchar( fun.ch_timestamp ), 9, 6 ) as changed_at,
                        fun.ch_user as changed_by
                   from :lt_brf_app as app inner join fdt_admn_0000 as fun on fun.application_id = app.id                    AND
                                                                              fun.object_type    = 'FU'                      AND
                                                                              fun.client         = SESSION_CONTEXT( 'CLIENT' )
                                           left join  fdt_admn_0103 as txt on txt.id             = fun.id                    AND
                                                                              txt.client         = SESSION_CONTEXT( 'CLIENT' )
                  where fun.deleted <> 'X';

    lt_brf_key = apply_filter (:lt_brf_fun, :iv_filter_ids);


*   2. BRF+ Metadata
*----------------------------------
*   Function | Data objects
    lt_r00 = SELECT fun.id, fun.version, :iv_type_out as type, res.result_dobj_id as object_id, adm.version as object_version
               FROM :lt_brf_key AS fun INNER JOIN fdt_fnct_0100 as res ON res.id      = fun.id                      AND
                                                                          res.version = fun.version                 AND
                                                                          res.client  = SESSION_CONTEXT( 'CLIENT' )
                                       INNER JOIN fdt_admn_0000 as adm ON adm.id      = res.result_dobj_id          AND
                                                                          adm.client  = SESSION_CONTEXT( 'CLIENT' )
              UNION

             SELECT fun.id, fun.version, :iv_type_in as type, res.data_object_id as object_id, adm.version as object_version
               FROM :lt_brf_key AS fun INNER JOIN fdt_fnct_0110 as res ON res.id      = fun.id                      AND
                                                                          res.version = fun.version                 AND
                                                                          res.client  = :iv_client
                                       INNER JOIN fdt_admn_0000 as adm ON adm.id      = res.data_object_id          AND
                                                                          adm.client  = SESSION_CONTEXT( 'CLIENT' );

*   Structures from Tables
    lt_tab0 = SELECT DISTINCT r00.object_id, adm.version as object_version
                FROM :lt_r00 AS r00 INNER JOIN fdt_dobj_0001 AS tab ON tab.id               = r00.object_id             AND
                                                                       tab.data_object_type = 'T'                       AND
                                                                       tab.client           = :iv_client
                                    INNER JOIN fdt_admn_0000 as adm ON adm.id               = r00.object_id             AND
                                                                       adm.client           = SESSION_CONTEXT( 'CLIENT' );

    lt_tab1 = SELECT DISTINCT tab.object_id, tab.object_version, str.structure_id AS structure_id, adm.version as structure_version
                FROM :lt_tab0 AS tab INNER JOIN fdt_dobj_0300 AS str ON str.id      = tab.object_id                 AND
                                                                        str.version = tab.object_version            AND
                                                                        str.client  = SESSION_CONTEXT( 'CLIENT' )
                                     INNER JOIN fdt_admn_0000 as adm ON adm.id      = str.structure_id              AND
                                                                        adm.client  = SESSION_CONTEXT( 'CLIENT' );

*   Structures | Elements | Data Types
    lt_st0 = SELECT r00.object_id, r00.object_version, r00.object_id as structure_id, r00.object_version as structure_version
               FROM :lt_r00 AS r00 INNER JOIN fdt_dobj_0001 AS str ON str.id               = r00.object_id             AND
                                                                      str.client           = SESSION_CONTEXT( 'CLIENT' )                AND
                                                                      str.data_object_type = 'S'
             UNION

             SELECT * FROM :lt_tab1;

    lt_st1 = SELECT str.object_id, str.object_version, str.structure_id, ele.element_id, adm.version as element_version
               FROM :lt_st0 AS str INNER JOIN fdt_dobj_0200 AS ele ON ele.id      = str.structure_id            AND
                                                                      ele.version = str.structure_version       AND
                                                                      ele.client  = SESSION_CONTEXT( 'CLIENT' )
                                   INNER JOIN fdt_admn_0000 as adm ON adm.id      = ele.element_id              AND
                                                                      adm.client  = SESSION_CONTEXT( 'CLIENT' );


    lt_st2 = SELECT ele.object_id, ele.object_version, ele.structure_id, ele.element_id, dty.typename as typename
               FROM :lt_st1 AS ele INNER JOIN fdt_dobj_0010 as dty ON dty.id      = ele.element_id              AND
                                                                      dty.version = ele.element_version         AND
                                                                      dty.client  = SESSION_CONTEXT( 'CLIENT' ) AND
                                                                      dty.typename <> '';


*   Elements | Data Types
    lt_el0 = SELECT DISTINCT r00.object_id, r00.object_version
               FROM :lt_r00 AS r00 INNER JOIN fdt_dobj_0001 AS str ON str.id               = r00.object_id  AND
                                                                      str.data_object_type = 'E'            AND
                                                                      str.client           = SESSION_CONTEXT( 'CLIENT' );

    lt_el1 = SELECT ele.object_id, ele.object_version, dty.typename as typename
               FROM :lt_el0 AS ele INNER JOIN fdt_dobj_0010 as dty ON dty.id      = ele.object_id       AND
                                                                      dty.version = ele.object_version  AND
                                                                      dty.client  = SESSION_CONTEXT( 'CLIENT' );

*   Function | Data types
    lt_md0 = SELECT fun.id, fun.type, str.typename
               FROM :lt_r00 AS fun INNER JOIN :lt_st2 AS str ON fun.object_id = str.object_id;

    lt_md1 = SELECT fun.id, fun.type, ele.typename
                FROM :lt_r00 AS fun INNER JOIN :lt_el1 AS ele ON fun.object_id = ele.object_id;

    lt_md2 = SELECT * FROM :lt_md0 UNION ALL SELECT * FROM :lt_md1;

    lt_md2_fil   = APPLY_FILTER ( :lt_md2, :iv_filter_metadata );
    lt_ids_by_md = SELECT DISTINCT id FROM :lt_md2_fil;

    lt_metadata = SELECT md2.id, md2.type, md2.typename
                    FROM :lt_md2 as md2 INNER JOIN :lt_ids_by_md as fil ON md2.id = fil.id;

    lt_metadata_txt = SELECT md.id, md.type, md.typename, txt.scrtext_m as text_m, SUBSTRING( txt.ddtext, 1, 20 ) as text_l
                        FROM :lt_metadata AS md LEFT JOIN dd04t AS txt ON md.typename  = txt.rollname AND
                                                                   txt.as4local = 'A'          AND
                                                                   txt.as4vers  = '0000'       AND
                                                                   txt.ddlanguage = session_context('LOCALE_SAP');




*   3. BRF+ Relevant transportable objects & Change info
*---------------------------------------------------------
    lt_exp = SELECT fun.id, fun.version, exp.expression_id,
                    CONCAT( :iv_client, exp.expression_id ) as object_key,
                    LEFT( to_nvarchar( adm.ch_timestamp ), 8 ) as changed_on,
                    SUBSTRING( TO_NVARCHAR( adm.ch_timestamp ), 9, 6 ) as changed_at,
                    adm.ch_user as changed_by
               FROM :lt_brf_key AS fun INNER JOIN fdt_fnct_0100 as exp ON exp.client        = SESSION_CONTEXT( 'CLIENT' ) AND
                                                                          exp.id            = fun.id                      AND
                                                                          exp.version       = fun.version                 AND
                                                                          exp.function_mode = '1'
                                        LEFT JOIN fdt_admn_0000 as adm ON adm.client        = SESSION_CONTEXT( 'CLIENT' ) AND
                                                                          adm.id            = exp.expression_id;

    lt_rse = SELECT fun.id, fun.version, rse.id as rule_set, rse.version AS rule_set_version,
                    CONCAT( :iv_client, rse.id ) as object_key,
                    LEFT( to_nvarchar( adm.ch_timestamp ), 8 ) as changed_on,
                    SUBSTRING( TO_NVARCHAR( adm.ch_timestamp ), 9, 6 ) as changed_at,
                    adm.ch_user as changed_by
               FROM :lt_brf_key AS fun INNER JOIN fdt_rlst_0000 as rse ON rse.function_id = fun.id                      AND
                                                                          rse.client      = SESSION_CONTEXT( 'CLIENT' )
                                        LEFT JOIN fdt_admn_0000 as adm ON adm.client      = SESSION_CONTEXT( 'CLIENT' ) AND
                                                                          adm.id          = rse.id;

    lt_rul = SELECT fun.id, fun.version, rul.id as rule,
                    CONCAT( :iv_client, rul.id ) as object_key,
                    LEFT( to_nvarchar( adm.ch_timestamp ), 8 ) as changed_on,
                    SUBSTRING( TO_NVARCHAR( adm.ch_timestamp ), 9, 6 ) as changed_at,
                    adm.ch_user as changed_by
               FROM :lt_rse AS fun INNER JOIN fdt_rlst_1000 as rul ON rul.id      = fun.rule_set                AND
                                                                      rul.version = fun.rule_set_version        AND
                                                                      rul.client  = SESSION_CONTEXT( 'CLIENT' )
                                    LEFT JOIN fdt_admn_0000 as adm ON adm.client  = SESSION_CONTEXT( 'CLIENT' ) AND
                                                                      adm.id      = rul.id;


    lt_obj = SELECT id, object_key, changed_on, changed_at, changed_by FROM :lt_exp UNION ALL
             SELECT id, object_key, changed_on, changed_at, changed_by FROM :lt_rse UNION ALL
             SELECT id, object_key, changed_on, changed_at, changed_by FROM :lt_rul;

    lt_obj_chg = SELECT DISTINCT id,
                        FIRST_VALUE( changed_on ) OVER ( PARTITION BY id ORDER BY changed_on DESC, changed_at DESC nulls LAST ) as changed_on,
                        FIRST_VALUE( changed_at ) OVER ( PARTITION BY id ORDER BY changed_on DESC, changed_at DESC nulls LAST ) as changed_at,
                        FIRST_VALUE( changed_by ) OVER ( PARTITION BY id ORDER BY changed_on DESC, changed_at DESC nulls LAST ) as changed_by
                   FROM :lt_obj;



*   4. TRs by Change Number
*------------------------------
    lt_e070 = SELECT e070.trkorr, e070.trfunction, e07t.as4text
                from e070 as e070 inner join e07t on e070.trkorr = e07t.trkorr
               where e07t.langu      = session_context('LOCALE_SAP') AND
                     e070.trfunction IN ( 'W','K','T' );
    lt_trs_by_cn = apply_filter (:lt_e070, :iv_filter_e070);



*   5. TRs with BRF+
*------------------------
    lt_trs_and_tasks_brf = SELECT DISTINCT e071k.trkorr, e071k.tabkey, e070.strkorr
                            from e071k inner join e070 on e071k.trkorr = e070.trkorr
                           where mastername = :iv_cust_object;
    lt_trs_by_brf_dt = select CASE WHEN strkorr <> '' THEN strkorr
                                   ELSE trkorr
                              END as trkorr,
                              tabkey
                         FROM :lt_trs_and_tasks_brf
                         ORDER BY trkorr;

    lt_trs_by_brf = select DISTINCT trs.trkorr, obj.id as tabkey
                      FROM :lt_trs_by_brf_dt AS trs INNER JOIN :lt_obj AS obj ON trs.tabkey = obj.object_key;


*   6. Combine TRs
*------------------------
    lt_trs_brf = SELECT hm.trkorr, hm.tabkey, cn.trfunction, cn.as4text
                   from :lt_trs_by_brf as hm inner join :lt_trs_by_cn as cn on hm.trkorr = cn.trkorr;



*  7. Final preparation
*-------------------
*   Transport requests
    lt_transport_requests = SELECT DISTINCT key.id, tr.trkorr as transport_request, tr.trfunction as type,
                                            SUBSTRING(LTRIM( SUBSTR_AFTER(SUBSTR_REGEXPR('(CRM_|FB_|CH_)\d+' IN tr.as4text),'_'),'0' ),1,10) as work_item,
                                            tr.as4text as description
                              FROM :lt_brf_key as key INNER JOIN :lt_trs_brf as tr ON key.tabkey = tr.tabkey
                             order by id, transport_request, work_item;
    lt_transport_requests = APPLY_FILTER (:lt_transport_requests, :iv_filter_wi);


*   BRF+ Used and not used
    lt_used  = apply_filter ( :lt_brf_key, :iv_filter_ids_used );
    lt_brf   = SELECT :iv_type as type, fun.id, fun.description,
                      CASE WHEN IFNULL( used.description, 'X' ) = 'X' THEN :iv_in_use_no
                        ELSE :iv_in_use_yes
                      END AS in_use,
                      :iv_active_yes as active,
                      fun.created_on, fun.created_at, fun.created_by,
                      CASE
                        WHEN fun.changed_on = chg.changed_on AND fun.changed_at > chg.changed_at THEN fun.changed_on
                        WHEN fun.changed_on > chg.changed_on                                     THEN fun.changed_on
                        ELSE chg.changed_on
                      END AS changed_on,
                      CASE
                        WHEN fun.changed_on = chg.changed_on AND fun.changed_at > chg.changed_at THEN fun.changed_at
                        WHEN fun.changed_on > chg.changed_on                                     THEN fun.changed_at
                        ELSE chg.changed_at
                      END AS changed_at,
                      CASE
                        WHEN fun.changed_on = chg.changed_on AND fun.changed_at > chg.changed_at THEN fun.changed_by
                        WHEN fun.changed_on > chg.changed_on                                     THEN fun.changed_by
                        ELSE chg.changed_by
                      END AS changed_by
                 FROM :lt_brf_key AS fun LEFT JOIN :lt_used as used ON fun.id = used.id
                                         LEFT JOIN :lt_obj_chg as chg ON fun.id = chg.id;

    lt_cns  = SELECT id, work_item, '' as change_number, '' AS change_status FROM :lt_transport_requests ORDER BY id;



*   8. Output
*------------------
    et_trs  = SELECT id, transport_request, type, description FROM :lt_transport_requests ORDER BY id;
    et_cns  = SELECT DISTINCT * FROM :lt_cns;
    et_main = SELECT type, id, description, in_use, active, created_on, created_at, created_by, changed_on, changed_at, changed_by
               FROM :lt_brf
               ORDER BY id;


    et_metadata = SELECT id,
                         type,
                         CASE WHEN LENGTH( typename ) > 30 OR LENGTH( typename ) = 0 THEN 'Unknown' ELSE typename END AS metadata,
                         COALESCE( NULLIF( text_m, ''), NULLIF( text_l, '') ) as description
                    FROM :lt_metadata_txt;



*  9. Cross filtering
*--------------------------
    lt_cf_cns = SELECT distinct id FROM :et_cns;
    lt_cf_trs = SELECT distinct id FROM :et_trs;
    lt_cf_met = SELECT distinct id FROM :et_metadata;

    et_trs = SELECT trs.id, trs.transport_request, trs.type, trs.description
             FROM :et_trs AS trs INNER JOIN :lt_cf_cns AS cns ON trs.id = cns.id
                                 INNER JOIN :lt_cf_met AS met ON trs.id = met.id
                                 INNER JOIN :et_main   AS mai ON trs.id = mai.id;

    et_cns = SELECT cns.id, cns.work_item, cns.change_number, cns.change_status
             FROM :et_cns AS cns INNER JOIN :lt_cf_trs AS trs ON cns.id = trs.id
                                 INNER JOIN :lt_cf_met AS met ON cns.id = met.id
                                 INNER JOIN :et_main   AS mai ON cns.id = mai.id;

    et_main = SELECT mai.type, mai.id, mai.description, mai.in_use, mai.active,
                     mai.created_on, mai.created_at, mai.created_by, mai.changed_on, mai.changed_at, mai.changed_by
              FROM :et_main AS mai INNER JOIN :lt_cf_trs AS trs ON mai.id = trs.id
                                   INNER JOIN :lt_cf_met AS met ON mai.id = met.id
                                   INNER JOIN :lt_cf_cns AS cns ON mai.id = cns.id;

    et_metadata = SELECT met.id, met.type, met.metadata, met.description
                   FROM :et_metadata AS met INNER JOIN :lt_cf_trs AS trs ON met.id = trs.id
                                            INNER JOIN :et_main   AS mai ON met.id = mai.id
                                            INNER JOIN :lt_cf_cns AS cns ON met.id = cns.id
                   ORDER BY id, type, metadata;

  ENDMETHOD.


  METHOD map_filter.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    DATA: ls_name_value TYPE abap_parmbind,
          lo_filter     TYPE REF TO data.

    FIELD-SYMBOLS: <ls_filter> TYPE any,
                   <lv_source> TYPE any.



*-- Get ID and check if BRF+ filter is a structure
    cl_fdt_function_process=>get_context_list( EXPORTING iv_function_id      = iv_id
                                                         iv_timestamp        = iv_timestamp
                                                         iv_trace_generation = abap_false
                                               IMPORTING et_context_list     = DATA(lt_context) ).
    READ TABLE lt_context INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_context>).
    IF sy-subrc NE 0 OR <ls_context>-data_object_type = cl_abap_typedescr=>kind_table OR lines( lt_context ) > 1.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e019(zpe_hm) WITH iv_id.
    ENDIF.


*-- Get data reference
    ls_name_value-name = <ls_context>-name.
    cl_fdt_function_process=>get_data_object_reference( EXPORTING iv_function_id      = iv_id
                                                                  iv_data_object      = ls_name_value-name
                                                                  iv_timestamp        = iv_timestamp
                                                                  iv_trace_generation = abap_false
                                                        IMPORTING er_data             = lo_filter ).
    ASSIGN lo_filter->* TO <ls_filter>.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e019(zpe_hm).
    ENDIF.


*-- Mapping
    DATA(lo_desc_input) = cl_abap_typedescr=>describe_by_data( is_filter ).
    TRY.
        CASE iv_mapping_type.

*--       Map ABAP name = BRF+ name
          WHEN gc_s_mapping_type-names.

*           Structure to structure by name
            IF lo_desc_input->kind = cl_abap_typedescr=>kind_struct AND <ls_context>-data_object_type = cl_abap_typedescr=>kind_struct.
              <ls_filter> = CORRESPONDING #( is_filter ).
*           Field to field
            ELSEIF lo_desc_input->kind = cl_abap_typedescr=>kind_elem AND <ls_context>-data_object_type = cl_abap_typedescr=>kind_elem.
              <ls_filter> = CONV #( is_filter ).
            ELSE.
              RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e041(zpe_hm) WITH iv_id.
            ENDIF.

*--       ABAP data element = BRF data element
          WHEN gc_s_mapping_type-data_elements.

*           Get BRF+ data elements
            DATA(lt_brf_data_elements) = get_data_elements_brf( iv_brf_id      = <ls_context>-id
                                                                iv_timestamp   = iv_timestamp
                                                                iv_function_id = iv_id
                                                                iv_dobj_type   = <ls_context>-data_object_type ).
*           Get ABAP data elements
            DATA(lt_abap_data_elements) = get_data_elements_abap( is_filter ).

*           Build the mapping matrix
            DATA(lt_matrix) = get_data_element_matrix( it_source = lt_abap_data_elements
                                                       it_target = lt_brf_data_elements ).
            IF lt_matrix IS INITIAL.
              RETURN.
            ENDIF.

*           Do the mapping
            LOOP AT lt_matrix ASSIGNING FIELD-SYMBOL(<ls_matrix>).
              IF lo_desc_input->kind = cl_abap_typedescr=>kind_struct.
                ASSIGN COMPONENT <ls_matrix>-source_position OF STRUCTURE is_filter TO <lv_source>.
                CHECK sy-subrc = 0.
              ELSEIF lo_desc_input->kind = cl_abap_typedescr=>kind_elem.
                ASSIGN is_filter TO <lv_source>.
              ENDIF.
              CHECK <lv_source> IS ASSIGNED.
              IF <ls_context>-data_object_type = cl_abap_typedescr=>kind_struct.
                ASSIGN COMPONENT <ls_matrix>-target_position OF STRUCTURE <ls_filter> TO FIELD-SYMBOL(<lv_target>).
                CHECK sy-subrc = 0.
              ELSEIF <ls_context>-data_object_type = cl_abap_typedescr=>kind_elem.
                ASSIGN <ls_filter> TO <lv_target>.
              ENDIF.
              IF <lv_target> IS ASSIGNED.
                <lv_target> = CONV #( <lv_source> ).
              ENDIF.
            ENDLOOP.
        ENDCASE.
      CATCH cx_root.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e041(zpe_hm) WITH iv_id.
    ENDTRY.

*-- Return values
    IF lo_filter IS NOT INITIAL.
      ls_name_value-value = lo_filter.
      INSERT ls_name_value INTO TABLE rth_result.
    ELSE.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e019(zpe_hm).
    ENDIF.

  ENDMETHOD.


  METHOD get_application_name.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    rv_name = |Z{ zcl_pe_hm=>get_id( ) }|.

  ENDMETHOD.


  METHOD get_data_elements_brf.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    DATA: lif_structure   TYPE REF TO if_fdt_structure,
          ls_data_element TYPE mtyp_s_data_element.

    DATA(lif_factory) = cl_fdt_factory=>get_instance( ).

    CASE iv_dobj_type.
      WHEN cl_abap_typedescr=>kind_struct OR cl_abap_typedescr=>kind_table.
        lif_structure ?= lif_factory->get_data_object( iv_id = iv_brf_id ).
        DATA(lts_elements) = lif_structure->get_elements( iv_timestamp = iv_timestamp ).
        LOOP AT lts_elements ASSIGNING FIELD-SYMBOL(<ls_element>). "#EC CI_SEL_NESTED
          DATA(lv_ddic) = get_data_element_brf( iv_id          = <ls_element>-element_id
                                                iv_timestamp   = iv_timestamp
                                                iv_function_id = iv_function_id ).
          CLEAR ls_data_element.
          ls_data_element-position     = CONV #( <ls_element>-position ).
          ls_data_element-data_element = lv_ddic.
          INSERT ls_data_element INTO TABLE rt_data.
        ENDLOOP.
      WHEN cl_abap_typedescr=>kind_elem.
        DATA(lv_ddic_el) = get_data_element_brf( iv_id          = iv_brf_id
                                                 iv_timestamp   = iv_timestamp
                                                 iv_function_id = iv_function_id ).
        CLEAR ls_data_element.
        ls_data_element-position     = 1.
        ls_data_element-data_element = lv_ddic_el.
        INSERT ls_data_element INTO TABLE rt_data.
    ENDCASE.

  ENDMETHOD.


  METHOD get_data_elements_abap.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*

    DATA: ls_data_element TYPE mtyp_s_data_element.

    DATA(lo_desc) = cl_abap_typedescr=>describe_by_data( is_data ).
    CASE lo_desc->kind.
      WHEN cl_abap_typedescr=>kind_struct.
        DO.
          ASSIGN COMPONENT sy-index OF STRUCTURE is_data TO FIELD-SYMBOL(<lv_field>).
          IF sy-subrc NE 0.
            EXIT.
          ENDIF.
          DATA(lv_data_element) = get_data_element_abap( <lv_field> ).
          IF lv_data_element IS NOT INITIAL.
            ls_data_element-position     = sy-index.
            ls_data_element-data_element = lv_data_element.
            INSERT ls_data_element INTO TABLE rt_data.
          ENDIF.
        ENDDO.
      WHEN cl_abap_typedescr=>kind_elem.
        DATA(lv_data_element_el) = get_data_element_abap( is_data ).
        IF lv_data_element_el IS NOT INITIAL.
          ls_data_element-position     = 1.
          ls_data_element-data_element = lv_data_element_el.
          INSERT ls_data_element INTO TABLE rt_data.
        ENDIF.
    ENDCASE.

  ENDMETHOD.


  METHOD get_data_element_matrix.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    DATA: ls_matrix TYPE mtyp_s_data_element_matrix.

    LOOP AT it_source ASSIGNING FIELD-SYMBOL(<ls_source>).
      READ TABLE it_target ASSIGNING FIELD-SYMBOL(<ls_target>) WITH KEY data_element = <ls_source>-data_element.
      IF sy-subrc = 0.
        ls_matrix-source_position = <ls_source>-position.
        ls_matrix-target_position = <ls_target>-position.
        INSERT ls_matrix INTO TABLE rt_data.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD get_data_element_abap.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    DATA: lo_desc TYPE REF TO cl_abap_elemdescr.

    lo_desc ?= cl_abap_elemdescr=>describe_by_data( iv_field ).
    IF lo_desc->is_ddic_type( ).
      rv_value = lo_desc->get_ddic_field( ).
    ENDIF.

  ENDMETHOD.


  METHOD get_data_element_brf.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*

    DATA: lif_element TYPE REF TO if_fdt_data_object.

    TRY.
        DATA(lif_factory) = cl_fdt_factory=>get_instance( ).
        lif_element ?= lif_factory->get_data_object( iv_id = iv_id ).
        rv_value = lif_element->get_ddic_binding( iv_timestamp = iv_timestamp ).
      CATCH cx_fdt_input.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e019(zpe_hm) WITH iv_function_id.
    ENDTRY.

  ENDMETHOD.


  METHOD get_timestamp.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 07.09.2022 | 13496: Avoid non existing versions       *
*              |            | DS4K929504                               *
*----------------------------------------------------------------------*

    DATA lv_creation_timestamp TYPE timestamp.

*   Raise error if requested timestamp is before creation
    IF iv_timestamp IS NOT INITIAL.
      DATA(lif_factory)  = cl_fdt_factory=>if_fdt_factory~get_instance( ).
      DATA(lif_function) = lif_factory->get_function( iv_id ).
      lif_function->if_fdt_admin_data~get_change_info( IMPORTING ev_creation_timestamp = lv_creation_timestamp ).
      IF iv_timestamp < lv_creation_timestamp.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e046(zpe_hm).
      ENDIF.
    ENDIF.

*   Return current timestamp if empty
    rv_timestamp = iv_timestamp.
    IF rv_timestamp IS INITIAL.
      GET TIME STAMP FIELD rv_timestamp.
    ENDIF.

  ENDMETHOD.
ENDCLASS.