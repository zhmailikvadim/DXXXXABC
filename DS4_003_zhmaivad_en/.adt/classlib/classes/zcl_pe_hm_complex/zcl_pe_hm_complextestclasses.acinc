CLASS ltc_get_value DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS: free_wfilter_ele_mtn FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_ele_mtn2 FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_ele_mtd FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_ele_mtd_not_found FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_str_mtn FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_str_mtd FOR TESTING RAISING cx_static_check.
    METHODS: wizard_not_supported FOR TESTING RAISING cx_static_check.

ENDCLASS.

CLASS ltc_get_table DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS: wizard_wfilter_ele_mtn FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_ele_mtd FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtn FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtn_2 FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtd FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtd_2 FOR TESTING RAISING cx_static_check.
    METHODS: wizard_mtn FOR TESTING RAISING cx_static_check.
    METHODS: wizard_mtd FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_ele_mtn_v FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_ele_mtn_v2 FOR TESTING RAISING cx_static_check.

ENDCLASS.

CLASS ltc_is_active DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS: wizard_wfilter_str_mtn FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtn2 FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtn_nf FOR TESTING RAISING cx_static_check.
    METHODS: wizard_wfilter_str_mtn_inac FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_ele FOR TESTING RAISING cx_static_check.
    METHODS: free_wfilter_ele_inac FOR TESTING RAISING cx_static_check.

ENDCLASS.

CLASS ltc_get_value IMPLEMENTATION.

  METHOD free_wfilter_ele_mtn.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
* Filter using a data element. Mapping by Name (converted into by Data element)

    DATA: lv_out_001    TYPE string.

    zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                            is_filter       = CONV zpe_hm_type( '1' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                  IMPORTING ev_value        = lv_out_001 ).

    cl_abap_unit_assert=>assert_equals( act = lv_out_001
                                        exp = 'ZPE_I_HM' ).
  ENDMETHOD.

  METHOD free_wfilter_ele_mtn2.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
* Filter using a data element. Mapping by Name (converted into by Data element). No data found caused by old timestamp

    DATA: lv_out_001   TYPE string,
          lv_timestamp TYPE timestamp.

    CONVERT DATE '20200301' INTO TIME STAMP lv_timestamp TIME ZONE 'UTC'.

    TRY.
        zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                                is_filter       = CONV zpe_hm_type( '1' )
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                      IMPORTING ev_value        = lv_out_001 ).

      CATCH zcx_pe_hm.
        cl_abap_unit_assert=>assert_initial( act = lv_out_001 ).
    ENDTRY.

  ENDMETHOD.


  METHOD free_wfilter_ele_mtd.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
*  Filter using a data element. Mapping by data element

    DATA: lv_out_001    TYPE string.

    zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                            is_filter       = CONV zpe_hm_type( '1' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING ev_value        = lv_out_001 ).

    cl_abap_unit_assert=>assert_equals( act = lv_out_001
                                        exp = 'ZPE_I_HM' ).
  ENDMETHOD.


  METHOD free_wfilter_ele_mtd_not_found.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
*  Filter using a data element. Mapping by data element. Not found

    DATA lv_out_001 TYPE string.
    TRY.
        zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                                is_filter       = CONV zpe_hm_type( '4' )
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                      IMPORTING ev_value        = lv_out_001 ).
      CATCH zcx_pe_hm.
        cl_abap_unit_assert=>assert_initial( act = lv_out_001 ).
    ENDTRY.

  ENDMETHOD.


  METHOD free_wfilter_str_mtn.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
*  Filter using a structure. Mapping by Name --> NOT IMPLEMENTED
*    TYPES: BEGIN OF ltyp_s_filter,
*             zpe_hm_type TYPE zpe_hm_type,
*           END OF ltyp_s_filter.
*    DATA: lv_out_001 TYPE string.

    cl_abap_unit_assert=>assert_true( abap_true ).
    RETURN.

*    zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
*                                            is_filter       = VALUE ltyp_s_filter( zpe_hm_type = '1' )
*                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
*                                  IMPORTING ev_value        = lv_out_001 ).
*
*    cl_abap_unit_assert=>assert_equals( act = lv_out_001
*                                        exp = 'ZPE_I_HM' ).
  ENDMETHOD.


  METHOD free_wfilter_str_mtd.

*  Free style rule:
*    --> Element
*    <-- Element
*---------------------
*  Filter using a structure. Mapping by Data Element --> NOT IMPLEMENTED

    TYPES: BEGIN OF ltyp_s_filter,
             type TYPE zpe_hm_type,
           END OF ltyp_s_filter.
    DATA: lv_out_001 TYPE string.

    zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                            is_filter       = VALUE ltyp_s_filter( type = '1' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING ev_value        = lv_out_001 ).

    cl_abap_unit_assert=>assert_equals( act = lv_out_001
                                        exp = 'ZPE_I_HM' ).
  ENDMETHOD.


  METHOD wizard_not_supported.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a data element. Mapping by Name
    TYPES: BEGIN OF ltyp_s_data,
             class  TYPE seoclname,
             method TYPE seocpdname,
           END OF ltyp_s_data.
    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    TRY.
        zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                is_filter       = CONV zpe_hm_type( '3' )
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                      IMPORTING ev_value        = lt_data ).

      CATCH zcx_pe_hm.
        cl_abap_unit_assert=>assert_initial( lt_data ).
    ENDTRY.

  ENDMETHOD.

ENDCLASS.

CLASS ltc_get_table IMPLEMENTATION.

  METHOD wizard_wfilter_ele_mtn.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a data element. Mapping by Name
    TYPES: BEGIN OF ltyp_s_data,
             seoclname  TYPE seoclname,
             seocpdname TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = CONV zpe_hm_type( '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_TABLE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_VALUE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.


  METHOD wizard_wfilter_ele_mtn_v.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a data element. Mapping by Name
    TYPES: BEGIN OF ltyp_s_data,
             seoclname  TYPE seoclname,
             seocpdname TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data      TYPE STANDARD TABLE OF ltyp_s_data,
          lv_timestamp TYPE timestamp.

    CONVERT DATE '20220301' INTO TIME STAMP lv_timestamp TIME ZONE 'UTC'.


    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = CONV zpe_hm_type( '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                            iv_timestamp    = lv_timestamp
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_TABLE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_VALUE' ) ) ).

  ENDMETHOD.

  METHOD wizard_wfilter_ele_mtn_v2.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a data element. Mapping by Name.- No data found due to old timestamp
    TYPES: BEGIN OF ltyp_s_data,
             seoclname  TYPE seoclname,
             seocpdname TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data      TYPE STANDARD TABLE OF ltyp_s_data,
          lv_timestamp TYPE timestamp.

    CONVERT DATE '20210301' INTO TIME STAMP lv_timestamp TIME ZONE 'UTC'.


    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                is_filter       = CONV zpe_hm_type( '2' )
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                                iv_timestamp    = lv_timestamp
                                      IMPORTING et_table        = lt_data ).
      CATCH zcx_pe_hm.
        cl_abap_unit_assert=>assert_initial( act = lt_data ).
    ENDTRY.

  ENDMETHOD.

  METHOD wizard_wfilter_ele_mtd.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a data element. Mapping by Data element
    TYPES: BEGIN OF ltyp_s_data,
             class  TYPE seoclname,
             method TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = CONV zpe_hm_type( '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_TABLE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_VALUE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtn.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a structure. Mapping by Name
    TYPES: BEGIN OF ltyp_s_data,
             zpe_hm_type TYPE zpe_hm_type,
             seoclname   TYPE seoclname,
             seocpdname  TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = VALUE ltyp_s_data( zpe_hm_type = '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_TABLE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_VALUE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtn_2.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a structure. Mapping by Name. Different sorting, additional fields
    TYPES: BEGIN OF ltyp_s_data,
             seoclname   TYPE seoclname,
             zpe_hm_type TYPE zpe_hm_type,
             another     TYPE bukrs,
             seocpdname  TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = VALUE ltyp_s_data( zpe_hm_type = '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_TABLE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'GET_VALUE' )
                                                                 ( seoclname = 'ZCL_PE_HM_COMPLEX' seocpdname = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtd.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a structure. Mapping by data elements
    TYPES: BEGIN OF ltyp_s_data,
             type   TYPE zpe_hm_type,
             class  TYPE seoclname,
             method TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = VALUE ltyp_s_data( type = '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_TABLE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_VALUE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtd_2.

*  Wizard style rule:
*    --> ZPE_HM_TYPE
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* Filter using a structure. Mapping by data elements. Additional fields, different sorting
    TYPES: BEGIN OF ltyp_s_data,
             class   TYPE seoclname,
             another TYPE bukrs,
             method  TYPE seocpdname,
             type    TYPE zpe_hm_type,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                            is_filter       = VALUE ltyp_s_data( type = '2' )
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING et_table        = lt_data ).

    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_TABLE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'GET_VALUE' )
                                                                 ( class = 'ZCL_PE_HM_COMPLEX' method = 'IS_ACTIVE' ) ) ).

  ENDMETHOD.

  METHOD wizard_mtn.

*  Wizard style rule:
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* No filtering, mapping by Name

    TYPES: BEGIN OF ltyp_s_data,
             seoclname  TYPE seoclname,
             another    TYPE string,
             seocpdname TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id    = '0239FC3B8D041EDC8FC38F494CA5BF59'
                                  IMPORTING et_table = lt_data ).


    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( seoclname = 'ZCL_PE_HM_BASIC' seocpdname = 'GET_TABLE' )
                                                                 ( seoclname = 'ZCL_PE_HM_BASIC' seocpdname = 'GET_VALUE' ) ) ).

  ENDMETHOD.

  METHOD wizard_mtd.

*  Wizard style rule:
*    <-- SEOCLNAME
*    <-- SEOCPDNAME
*---------------------
* No filtering, mapping by data element

    TYPES: BEGIN OF ltyp_s_data,
             class   TYPE seoclname,
             another TYPE string,
             method  TYPE seocpdname,
           END OF ltyp_s_data,
           ltyp_t_data TYPE STANDARD TABLE OF ltyp_s_data WITH EMPTY KEY.

    DATA: lt_data TYPE STANDARD TABLE OF ltyp_s_data.

    zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8FC38F494CA5BF59'
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING et_table        = lt_data ).


    cl_abap_unit_assert=>assert_equals( act = lt_data
                                        exp = VALUE ltyp_t_data( ( class = 'ZCL_PE_HM_BASIC' method = 'GET_TABLE' )
                                                                 ( class = 'ZCL_PE_HM_BASIC' method = 'GET_VALUE' ) ) ).

  ENDMETHOD.

ENDCLASS.

CLASS ltc_is_active IMPLEMENTATION.

  METHOD wizard_wfilter_str_mtn.

*  Wizard style rule:
*    --> /AIF/IFNAME
*    --> /AIF/IFVERSION
*    --> /aif/ns
*    --> kunwe
*    --> vkorg
*    --> vstel
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using a structure. Mapping by Name

    TYPES: BEGIN OF ltyp_s_filter,
             /aif/ns        TYPE /aif/ns,
             /aif/ifname    TYPE /aif/ifname,
             /aif/ifversion TYPE /aif/ifversion,
             kunwe          TYPE kunwe,
             vkorg          TYPE vkorg,
             vstel          TYPE vstel,
           END OF ltyp_s_filter.

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '024F85009E261EECB3A6CC44B35E40D2'
                                      is_filter       = VALUE ltyp_s_filter( /aif/ns = 'ZSDSLS' /aif/ifname = 'DN3' /aif/ifversion = '1' kunwe = '1000000054' vkorg = '0DE1' )
                                      iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names ).
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ENDIF.

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtn2.

*  Wizard style rule:
*    --> /AIF/IFNAME
*    --> /AIF/IFVERSION
*    --> /aif/ns
*    --> kunwe
*    --> vkorg
*    --> vstel
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using a structure. Mapping by Name. Inactive caused by an old timestamp

    TYPES: BEGIN OF ltyp_s_filter,
             /aif/ns        TYPE /aif/ns,
             /aif/ifname    TYPE /aif/ifname,
             /aif/ifversion TYPE /aif/ifversion,
             kunwe          TYPE kunwe,
             vkorg          TYPE vkorg,
             vstel          TYPE vstel,
           END OF ltyp_s_filter.

    DATA: lv_timestamp TYPE timestamp.

    CONVERT DATE '20210801' INTO TIME STAMP lv_timestamp TIME ZONE 'UTC'.

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '024F85009E261EECB3A6CC44B35E40D2'
                                      iv_timestamp    = lv_timestamp
                                      is_filter       = VALUE ltyp_s_filter( /aif/ns = 'ZSDSLS' /aif/ifname = 'DN3' /aif/ifversion = '1' kunwe = '1000000054' vkorg = '0DE1' )
                                      iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names ).
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDIF.

  ENDMETHOD.


  METHOD wizard_wfilter_str_mtn_nf.

*  Wizard style rule:
*    --> /AIF/IFNAME
*    --> /AIF/IFVERSION
*    --> /aif/ns
*    --> kunwe
*    --> vkorg
*    --> vstel
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using a structure. Mapping by Name. Not found

    TYPES: BEGIN OF ltyp_s_filter,
             /aif/ns        TYPE /aif/ns,
             /aif/ifname    TYPE /aif/ifname,
             /aif/ifversion TYPE /aif/ifversion,
             kunwe          TYPE kunwe,
             vkorg          TYPE vkorg,
             vstel          TYPE vstel,
           END OF ltyp_s_filter.

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '024F85009E261EECB3A6CC44B35E40D2'
                                      is_filter       = VALUE ltyp_s_filter( /aif/ns = 'NOT_FOUND' /aif/ifname = 'DN3' /aif/ifversion = '1' kunwe = '1000000054' vkorg = '0DE1' )
                                      iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names ).
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDIF.

  ENDMETHOD.

  METHOD wizard_wfilter_str_mtn_inac.

*  Wizard style rule:
*    --> /AIF/IFNAME
*    --> /AIF/IFVERSION
*    --> /aif/ns
*    --> kunwe
*    --> vkorg
*    --> vstel
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using a structure. Mapping by Name. Not found

    TYPES: BEGIN OF ltyp_s_filter,
             /aif/ns        TYPE /aif/ns,
             /aif/ifname    TYPE /aif/ifname,
             /aif/ifversion TYPE /aif/ifversion,
             kunwe          TYPE kunwe,
             vkorg          TYPE vkorg,
             vstel          TYPE vstel,
           END OF ltyp_s_filter.

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '024F85009E261EECB3A6CC44B35E40D2'
                                      is_filter       = VALUE ltyp_s_filter( /aif/ns = 'ZSDSLS' /aif/ifname = 'DN3' /aif/ifversion = '2' kunwe = '1000000054' vkorg = '0DE1' )
                                      iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names ).
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDIF.

  ENDMETHOD.

  METHOD free_wfilter_ele.

*  fREE style rule:
*    --> BUKRS
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using an element. Mapping by Name

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '0239FC3B8D041EDCB79F1C4A292F3F59'
                                      is_filter       = CONV bukrs( '0DE1' ) ).
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ENDIF.

  ENDMETHOD.

  METHOD free_wfilter_ele_inac.

*  fREE style rule:
*    --> BUKRS
*    <-- ZPE_HM_ACTIVE
*---------------------
* Filter using an element. Mapping by Name

    IF zcl_pe_hm_complex=>is_active(  iv_id           = '0239FC3B8D041EDCB79F1C4A292F3F59'
                                      is_filter       = CONV bukrs( '0DE2' ) ).
      cl_abap_unit_assert=>assert_true( act = abap_false ).
    ELSE.
      cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDIF.

  ENDMETHOD.

ENDCLASS.