CLASS zcl_pe_hm_encrypted DEFINITION
  PUBLIC
  CREATE PRIVATE
  INHERITING FROM zcl_pe_hm.

  PUBLIC SECTION.

    INTERFACES if_amdp_marker_hdb.

    CONSTANTS gc_class_name TYPE seoclsname  VALUE 'ZCL_PE_HM_ENCRYPTED'.
    CONSTANTS gc_tool       TYPE zpe_hm_tool VALUE icon_fix_column.
    CONSTANTS gc_type       TYPE zpe_hm_type VALUE '4'.
    CONSTANTS: BEGIN OF gc_s_mode,
                 create      TYPE c LENGTH 1 VALUE '1',
                 update_all  TYPE c LENGTH 1 VALUE '2',
                 update_data TYPE c LENGTH 1 VALUE '3',
                 delete      TYPE c LENGTH 1 VALUE '4',
               END OF gc_s_mode.


    CLASS-METHODS delete IMPORTING iv_id TYPE zpe_hm_id
                         RAISING   zcx_pe_hm.

    CLASS-METHODS get_value
      IMPORTING iv_id           TYPE zpe_hm_id
      RETURNING VALUE(rv_value) TYPE string
      RAISING   zcx_pe_hm.

    CLASS-METHODS read IMPORTING iv_id          TYPE zpe_hm_id
                       RETURNING VALUE(rs_data) TYPE zpe_s_hm_e
                       RAISING   zcx_pe_hm.


    CLASS-METHODS save IMPORTING is_hc        TYPE zpe_s_hm_e
                                 iv_mode      TYPE c
                       RETURNING VALUE(rv_id) TYPE zpe_hm_id
                       RAISING   zcx_pe_hm.

    CLASS-METHODS search
      IMPORTING VALUE(iv_filter_ids)      TYPE string
                VALUE(iv_filter_e070)     TYPE string
                VALUE(iv_filter_wi)       TYPE string
                VALUE(iv_filter_ids_used) TYPE string
                VALUE(iv_type)            TYPE zpe_hm_type
                VALUE(iv_cust_object)     TYPE string
                VALUE(iv_in_use_yes)      TYPE icon_d
                VALUE(iv_in_use_no)       TYPE icon_d
                VALUE(iv_active_yes)      TYPE icon_d
                VALUE(iv_active_no)       TYPE icon_d
                VALUE(iv_type_in)         TYPE icon_d
                VALUE(iv_type_out)        TYPE icon_d
                VALUE(iv_client)          TYPE mandt
      EXPORTING VALUE(et_main)            TYPE zpe_tt_hm_output_main
                VALUE(et_trs)             TYPE zpe_tt_hm_output_trs
                VALUE(et_cns)             TYPE zpe_tt_hm_output_cns
      RAISING   cx_amdp_execution_failed.



  PROTECTED SECTION.
  PRIVATE SECTION.

    CONSTANTS mc_codepage TYPE abap_encod VALUE '1100'.

    CLASS-METHODS add_to_task IMPORTING iv_id   TYPE zpe_hm_id
                                        iv_task TYPE trkorr
                              RAISING   zcx_pe_hm.

    CLASS-METHODS decrypt
      IMPORTING iv_key         TYPE xstring
                iv_data        TYPE xstring
      RETURNING VALUE(rv_data) TYPE string
      RAISING   cx_bcs cx_sec_sxml_encrypt_error.

    CLASS-METHODS encrypt
      IMPORTING iv_data TYPE string
      EXPORTING ev_data TYPE xstring
                ev_key  TYPE xstring
      RAISING   cx_bcs cx_sec_sxml_encrypt_error.

    CLASS-METHODS get_transport_task RETURNING VALUE(rv_value) TYPE trkorr.

ENDCLASS.



CLASS zcl_pe_hm_encrypted IMPLEMENTATION.

  METHOD decrypt.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*
    cl_sec_sxml_writer=>decrypt( EXPORTING ciphertext = iv_data
                                           key        = iv_key
                                           algorithm  = cl_sec_sxml_writer=>co_aes128_algorithm
                                 IMPORTING plaintext  = DATA(lv_decrypted_x) ).

    rv_data = cl_bcs_convert=>xstring_to_string( iv_xstr = lv_decrypted_x iv_cp = CONV #( mc_codepage ) ).

  ENDMETHOD.


  METHOD encrypt.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    ev_key = cl_sec_sxml_writer=>generate_key( algorithm = cl_sec_sxml_writer=>co_aes128_algorithm  ).

    cl_sec_sxml_writer=>encrypt(
      EXPORTING plaintext  = cl_bcs_convert=>string_to_xstring( iv_string = iv_data iv_codepage = mc_codepage )
                key        = ev_key
                algorithm  = cl_sec_sxml_writer=>co_aes128_algorithm
      IMPORTING ciphertext = ev_data ).

  ENDMETHOD.


  METHOD get_value.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    DATA(lv_id) = |{ iv_id ALPHA = IN }|.

    SELECT SINGLE data, data_key INTO @DATA(ls_data) FROM zpe_t_hm_e02 WHERE id = @lv_id.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e011(zpe_hm) WITH lv_id.
    ENDIF.

    TRY.
        rv_value = decrypt( iv_key = ls_data-data_key iv_data = ls_data-data ).
      CATCH cx_bcs cx_sec_sxml_encrypt_error INTO DATA(lo_exc).
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e014(zpe_hm)
          EXPORTING previous = lo_exc.
    ENDTRY.

  ENDMETHOD.


  METHOD save.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

*-- Select Transport Request
    IF iv_mode = gc_s_mode-create OR iv_mode = gc_s_mode-update_all.
      DATA(lv_task) = get_transport_task( ).
      IF lv_task IS INITIAL.
        RETURN.
      ENDIF.
    ENDIF.


*-- Data preparation
    DATA(ls_e01) = CORRESPONDING zpe_t_hm_e01( is_hc ).
    DATA(ls_e02) = CORRESPONDING zpe_t_hm_e02( is_hc ).
    CASE iv_mode.
      WHEN gc_s_mode-create.
        ls_e01-id         = zcl_pe_hm=>get_id( ).
        ls_e01-created_on = sy-datum.
        ls_e01-created_at = sy-uzeit.
        ls_e01-created_by = sy-uname.
        ls_e02-id         = ls_e01-id.
        ls_e02-created_on = sy-datum.
        ls_e02-created_at = sy-uzeit.
        ls_e02-created_by = sy-uname.
      WHEN gc_s_mode-update_all.
        ls_e01-changed_on = sy-datum.
        ls_e01-changed_at = sy-uzeit.
        ls_e01-changed_by = sy-uname.
        ls_e02-changed_on = sy-datum.
        ls_e02-changed_at = sy-uzeit.
        ls_e02-changed_by = sy-uname.
      WHEN gc_s_mode-update_data.
        ls_e02-changed_on = sy-datum.
        ls_e02-changed_at = sy-uzeit.
        ls_e02-changed_by = sy-uname.
    ENDCASE.


*-- Encrypt data
    TRY.
        encrypt( EXPORTING iv_data = is_hc-data_s
                 IMPORTING ev_key  = ls_e02-data_key
                           ev_data = ls_e02-data ).

      CATCH cx_bcs cx_sec_sxml_encrypt_error INTO DATA(lo_exc).
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e014(zpe_hm)
          EXPORTING previous = lo_exc.
    ENDTRY.


*-- Save DB
    MODIFY zpe_t_hm_e02 FROM ls_e02.
    IF sy-subrc <> 0.
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e035(zpe_hm).
    ENDIF.
    IF iv_mode = gc_s_mode-create OR iv_mode = gc_s_mode-update_all.
      MODIFY zpe_t_hm_e01 FROM ls_e01.
      IF sy-subrc <> 0.
        ROLLBACK WORK.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e035(zpe_hm).
      ENDIF.
    ENDIF.

*-- Add entries to transport
    IF iv_mode = gc_s_mode-create OR iv_mode = gc_s_mode-update_all.
      TRY.
          add_to_task( iv_id   = ls_e01-id
                       iv_task = lv_task ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_task).
          ROLLBACK WORK.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e035(zpe_hm)
            EXPORTING previous = lo_exc_task.
      ENDTRY.
    ENDIF.

    rv_id = ls_e01-id.
    COMMIT WORK AND WAIT.

  ENDMETHOD.


  METHOD search BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT USING zpe_t_hm_e01
                                                                       zpe_t_hm_e02
                                                                       e070
                                                                       e07t
                                                                       e071k.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*
* CANOCAR      | 06.11.2023 | 26417: CHARM Integration                 *
*              |            | DS4K968701                               *
************************************************************************

*   1. TRs by Change Number
    lt_e070 = SELECT e070.trkorr, e070.trfunction, e07t.as4text
                from e070 as e070 inner join e07t on e070.trkorr = e07t.trkorr
               where e07t.langu      = session_context('LOCALE_SAP') AND
                     e070.trfunction IN ( 'W','K','T' );
    lt_trs_by_cn = apply_filter (:lt_e070, :iv_filter_e070);


*   2. TRs with HM entries or BRF+
    lt_trs_and_tasks_hm = SELECT DISTINCT e071k.trkorr,
                                          e071k.tabkey,
                                          NULLIF( e070.strkorr, '') as strkorr
                           from e071k inner join e070 on e071k.trkorr = e070.trkorr
                          where objname = :iv_cust_object;
    lt_trs_by_hm = select coalesce( strkorr, trkorr ) as trkorr, tabkey
                    FROM :lt_trs_and_tasks_hm;


*   3. Combine 1 & 2
    lt_trs_hm  = SELECT hm.trkorr, hm.tabkey, cn.trfunction, cn.as4text from :lt_trs_by_hm as hm inner join :lt_trs_by_cn as cn on hm.trkorr = cn.trkorr;


*   4. Main data (data dates have preference)
    lt_hc0 = SELECT e01.mandt, e01.id, e01.description, CONCAT( :iv_client, RPAD(e01.id, 10) ) as tabkey,
                    e01.created_on AS h_created_on, e01.created_at AS h_created_at, e01.created_by AS h_created_by,
                    e01.changed_on AS h_changed_on, e01.changed_at AS h_changed_at, e01.changed_by AS h_changed_by,
                    e02.created_on AS d_created_on, e02.created_at AS d_created_at, e02.created_by AS d_created_by,
                    e02.changed_on AS d_changed_on, e02.changed_at AS d_changed_at, e02.changed_by AS d_changed_by
               FROM zpe_t_hm_e01 AS e01 LEFT JOIN zpe_t_hm_e02 AS e02 ON e01.id    = e02.id AND
                                                                         e01.mandt = e02.mandt
              ORDER BY id;

    lt_hc = SELECT mandt, id, description, tabkey,
                   IFNULL( d_created_on, h_created_on ) AS created_on,
                   IFNULL( d_created_at, h_created_at ) AS created_at,
                   IFNULL( d_created_by, h_created_by ) AS created_by,
                   IFNULL( d_changed_on, h_changed_on ) AS changed_on,
                   IFNULL( d_changed_at, h_changed_at ) AS changed_at,
                   IFNULL( d_changed_by, h_changed_by ) AS changed_by
              FROM :lt_hc0;

    lt_hc = APPLY_FILTER (:lt_hc, :iv_filter_ids);


*   5. Transport requests
    lt_transport_requests = SELECT DISTINCT key.id, tr.trkorr as transport_request, tr.trfunction as type,
                                            SUBSTRING(LTRIM( SUBSTR_AFTER(SUBSTR_REGEXPR('(CRM_|FB_|CH_)\d+' IN tr.as4text),'_'),'0' ),1,10) as work_item,
                                            tr.as4text as description
                              FROM :lt_hc as key INNER JOIN :lt_trs_hm as tr ON key.tabkey = tr.tabkey
                              ORDER BY id, transport_request, work_item;
    lt_transport_requests = APPLY_FILTER (:lt_transport_requests, :iv_filter_wi);


*   6. Table Used and not used
    lt_hm_used  = APPLY_FILTER ( :lt_hc, :iv_filter_ids_used );
    lt_hm       = SELECT :iv_type as type, hm.id, hm.description,
                         CASE WHEN IFNULL( used.description, 'X' ) = 'X' THEN :iv_in_use_no
                            ELSE :iv_in_use_yes
                         END AS in_use,
                         hm.created_on, hm.created_at, hm.created_by, hm.changed_on, hm.changed_at, hm.changed_by
                    FROM :lt_hc AS hm LEFT JOIN :lt_hm_used as used ON hm.id = used.id;


*   7. Change numbers
    lt_cns  = SELECT id, work_item, '' as change_number, '' AS change_status FROM :lt_transport_requests ORDER BY id;


*   8. Output
    et_trs  = SELECT id, transport_request, type, description FROM :lt_transport_requests ORDER BY id;
    et_cns  = SELECT DISTINCT * FROM :lt_cns;
    et_main = SELECT key.type, key.id, key.description, key.in_use, :iv_active_yes as active, key.created_on, key.created_at, key.created_by, key.changed_on, key.changed_at, key.changed_by
                FROM :lt_hm as key;


*  9. Cross filtering
   lt_cf_cns = SELECT distinct id FROM :et_cns;
   lt_cf_trs = SELECT distinct id FROM :et_trs;

   et_trs = SELECT trs.id, trs.transport_request, trs.type, trs.description
             FROM :et_trs AS trs INNER JOIN :lt_cf_cns AS cns ON trs.id = cns.id
                                 INNER JOIN :et_main   AS mai ON trs.id = mai.id;

   et_cns = SELECT cns.id, cns.work_item, cns.change_number, cns.change_status
             FROM :et_cns AS cns INNER JOIN :lt_cf_trs AS trs ON cns.id = trs.id
                                 INNER JOIN :et_main   AS mai ON cns.id = mai.id;

   et_main = SELECT mai.type, mai.id, mai.description, mai.in_use, mai.active,
                    mai.created_on, mai.created_at, mai.created_by, mai.changed_on, mai.changed_at, mai.changed_by
              FROM :et_main AS mai INNER JOIN :lt_cf_trs AS trs ON mai.id = trs.id
                                   INNER JOIN :lt_cf_cns AS cns ON mai.id = cns.id
              ORDER BY id;

  ENDMETHOD.

  METHOD get_transport_task.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    DATA lt_e071  TYPE STANDARD TABLE OF e071.
    DATA lt_e071k TYPE STANDARD TABLE OF e071k.

    CALL FUNCTION 'TRINT_ORDER_CHOICE'
      EXPORTING
        wi_order_type          = 'W'
        wi_task_type           = 'Q'
        wi_category            = 'CUST'
      IMPORTING
        we_task                = rv_value
      TABLES
        wt_e071                = lt_e071
        wt_e071k               = lt_e071k
      EXCEPTIONS
        no_correction_selected = 1
        display_mode           = 2
        object_append_error    = 3
        recursive_call         = 4
        wrong_order_type       = 5
        OTHERS                 = 6.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

  ENDMETHOD.


  METHOD add_to_task.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    DATA lt_e071  TYPE STANDARD TABLE OF e071.
    DATA lt_e071k TYPE STANDARD TABLE OF e071k.

    INSERT VALUE #( pgmid    = 'R3TR'
                    object   = 'TABU'
                    obj_name = 'ZPE_T_HM_E01'
                    objfunc  = 'K' ) INTO TABLE lt_e071.

    INSERT VALUE #( pgmid      = 'R3TR'
                    object     = 'TABU'
                    mastertype = 'TABU'
                    objname    = 'ZPE_T_HM_E01'
                    mastername = 'ZPE_T_HM_E01'
                    objfunc    = 'K'
                    tabkey     = |{ sy-mandt }{ iv_id }| ) INTO TABLE lt_e071k.


    CALL FUNCTION 'TR_APPEND_TO_COMM_OBJS_KEYS'
      EXPORTING
        wi_trkorr                      = iv_task
      TABLES
        wt_e071                        = lt_e071
        wt_e071k                       = lt_e071k
      EXCEPTIONS
        key_char_in_non_char_field     = 1
        key_check_keysyntax_error      = 2
        key_inttab_table               = 3
        key_longer_field_but_no_generc = 4
        key_missing_key_master_fields  = 5
        key_missing_key_tablekey       = 6
        key_non_char_but_no_generic    = 7
        key_no_key_fields              = 8
        key_string_longer_char_key     = 9
        key_table_has_no_fields        = 10
        key_table_not_activ            = 11
        key_unallowed_key_function     = 12
        key_unallowed_key_object       = 13
        key_unallowed_key_objname      = 14
        key_unallowed_key_pgmid        = 15
        key_without_header             = 16
        ob_check_obj_error             = 17
        ob_devclass_no_exist           = 18
        ob_empty_key                   = 19
        ob_generic_objectname          = 20
        ob_ill_delivery_transport      = 21
        ob_ill_lock                    = 22
        ob_ill_parts_transport         = 23
        ob_ill_source_system           = 24
        ob_ill_system_object           = 25
        ob_ill_target                  = 26
        ob_inttab_table                = 27
        ob_local_object                = 28
        ob_locked_by_other             = 29
        ob_modif_only_in_modif_order   = 30
        ob_name_too_long               = 31
        ob_no_append_of_corr_entry     = 32
        ob_no_append_of_c_member       = 33
        ob_no_consolidation_transport  = 34
        ob_no_original                 = 35
        ob_no_shared_repairs           = 36
        ob_no_systemname               = 37
        ob_no_systemtype               = 38
        ob_no_tadir                    = 39
        ob_no_tadir_not_lockable       = 40
        ob_privat_object               = 41
        ob_repair_only_in_repair_order = 42
        ob_reserved_name               = 43
        ob_syntax_error                = 44
        ob_table_has_no_fields         = 45
        ob_table_not_activ             = 46
        tr_enqueue_failed              = 47
        tr_errors_in_error_table       = 48
        tr_ill_korrnum                 = 49
        tr_lockmod_failed              = 50
        tr_lock_enqueue_failed         = 51
        tr_not_owner                   = 52
        tr_no_systemname               = 53
        tr_no_systemtype               = 54
        tr_order_not_exist             = 55
        tr_order_released              = 56
        tr_order_update_error          = 57
        tr_wrong_order_type            = 58
        ob_invalid_target_system       = 59
        tr_no_authorization            = 60
        ob_wrong_tabletyp              = 61
        ob_wrong_category              = 62
        ob_system_error                = 63
        ob_unlocal_objekt_in_local_ord = 64
        tr_wrong_client                = 65
        ob_wrong_client                = 66
        key_wrong_client               = 67
        OTHERS                         = 68.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e035(zpe_hm).
    ENDIF.

  ENDMETHOD.

  METHOD read.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    DATA(lv_id) = |{ iv_id ALPHA = IN }|.

*   Definition
    SELECT SINGLE id, description, created_at, created_on, created_by, changed_at, changed_on, changed_by
        FROM zpe_t_hm_e01 INTO CORRESPONDING FIELDS OF @rs_data
       WHERE id = @lv_id.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e011(zpe_hm) WITH lv_id.
    ENDIF.

*   Data (If there is data, we overwrite logging fields)
    SELECT SINGLE created_at, created_on, created_by, changed_at, changed_on, changed_by
        FROM zpe_t_hm_e02
        INTO CORRESPONDING FIELDS OF @rs_data WHERE id = @lv_id.
    IF sy-subrc = 0.
      rs_data-data_s = get_value( iv_id ).
    ENDIF.

  ENDMETHOD.


  METHOD delete.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*

    DATA(lv_id) = |{ iv_id ALPHA = IN }|.

*-- Select Transport Request
    DATA(lv_task) = get_transport_task( ).
    IF lv_task IS INITIAL.
      RETURN.
    ENDIF.

*-- Delete DB
    DELETE FROM zpe_t_hm_e01 WHERE id = lv_id.
    IF sy-subrc <> 0.
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e052(zpe_hm).
    ENDIF.

    DELETE FROM zpe_t_hm_e02 WHERE id = lv_id.
    IF sy-subrc <> 0.
      ROLLBACK WORK.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e052(zpe_hm).
    ENDIF.

*-  Transport entries
    TRY.
        add_to_task( iv_id   = CONV #( lv_id )
                     iv_task = lv_task ).
      CATCH zcx_pe_hm INTO DATA(lo_exc_task).
        ROLLBACK WORK.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e035(zpe_hm)
          EXPORTING previous = lo_exc_task.
    ENDTRY.

    COMMIT WORK AND WAIT.

  ENDMETHOD.

ENDCLASS.