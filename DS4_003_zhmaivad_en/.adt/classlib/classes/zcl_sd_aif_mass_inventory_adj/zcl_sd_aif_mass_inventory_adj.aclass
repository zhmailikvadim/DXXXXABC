CLASS zcl_sd_aif_mass_inventory_adj DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF gtyp_material,
        material TYPE matnr,
      END OF gtyp_material .
    TYPES:
      gtyp_material_tab TYPE STANDARD TABLE OF gtyp_material .
    TYPES:
      BEGIN OF gtyp_plant,
        plant TYPE werks_d,
      END OF gtyp_plant .
    TYPES:
      gtyp_plant_tab TYPE STANDARD TABLE OF gtyp_plant .
    TYPES:
      BEGIN OF gtyp_storagelocation,
        stge_loc TYPE lgort_d,
      END OF gtyp_storagelocation .
    TYPES:
      gtyp_storagelocation_tab TYPE STANDARD TABLE OF gtyp_storagelocation .
    TYPES:
      BEGIN OF gtyp_goodsmovementtype,
        move_type TYPE bwart,
      END OF gtyp_goodsmovementtype .
    TYPES:
      gtyp_goodsmovementtype_tab TYPE STANDARD TABLE OF gtyp_goodsmovementtype .
    TYPES:
      BEGIN OF gtyp_goodsmovementcode,
        gm_code TYPE gm_code,
      END OF gtyp_goodsmovementcode .
    TYPES:
      gtyp_goodsmovementcode_tab   TYPE STANDARD TABLE OF gtyp_goodsmovementcode,
      gtyp_tt_goods_movement_items TYPE STANDARD TABLE OF bapi2017_gm_item_create.

    CLASS-METHODS set_raw_values
      CHANGING
        !cs_data           TYPE any
      RETURNING
        VALUE(rt_bapiret2) TYPE bapiret2_t .
    CLASS-METHODS create_goods_movements
      CHANGING
        !cs_data           TYPE any
      RETURNING
        VALUE(rt_bapiret2) TYPE bapiret2_t .
    CLASS-METHODS get_wrong_format_errors
      CHANGING
        !cs_data           TYPE any
      RETURNING
        VALUE(rt_bapiret2) TYPE bapiret2_t .
    CLASS-METHODS set_if_empty_and_convert
      IMPORTING
        !is_raw_data       TYPE any
      CHANGING
        !cs_data           TYPE any
      RETURNING
        VALUE(rt_bapiret2) TYPE bapiret2_t .
    CLASS-METHODS convert_days_to_date
      IMPORTING
        !iv_date_days  TYPE any
      RETURNING
        VALUE(rv_date) TYPE datum .
  PROTECTED SECTION.
private section.

  constants MC_ITEM type NAME_FELD value 'ITEM' ##NO_TEXT.
  constants MC_DOCUMENTDATE type NAME_FELD value 'DOC_DATE' ##NO_TEXT.
  constants MC_POSTINGDATE type NAME_FELD value 'PSTNG_DATE' ##NO_TEXT.
  constants MC_BAPIRET_ERR_A type CHAR01 value 'A' ##NO_TEXT.
  constants MC_BAPIRET_ERR_E type CHAR01 value 'E' ##NO_TEXT.
  constants MC_PLANT type NAME_FELD value 'PLANT' ##NO_TEXT.
  constants MC_ARTICLE type NAME_FELD value 'MATERIAL' ##NO_TEXT.
  constants MC_GOODSMOVEMENTCODE type NAME_FELD value 'GM_CODE' ##NO_TEXT.
  constants MC_STORAGELOCATION type NAME_FELD value 'STGE_LOC' ##NO_TEXT.
  constants MC_GOODSMOVEMENTTYPE type NAME_FELD value 'MOVE_TYPE' ##NO_TEXT.
  constants MC_KEY_FIELD type NAME_FELD value 'KEY_FIELD' ##NO_TEXT.
  constants MC_WRONG type NAME_FELD value 'WRONG' ##NO_TEXT.
  constants MC_LINE_NUMBER type NAME_FELD value 'LINE_NUMBER' ##NO_TEXT.
  constants MC_MATERIAL type NAME_FELD value 'MATERIAL' ##NO_TEXT.
  constants MC_ENTRYUNIT type NAME_FELD value 'ENTRY_UOM' ##NO_TEXT.

  class-methods FILL_BAPIRET2
    importing
      !IV_PARAM1 type ANY
      !IV_PARAM2 type ANY
      !IV_PARAM3 type ANY
      !IV_PARAM4 type ANY
    changing
      !CT_BAPIRET2 type BAPIRET2_T .
ENDCLASS.



CLASS ZCL_SD_AIF_MASS_INVENTORY_ADJ IMPLEMENTATION.


  METHOD set_if_empty_and_convert.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 10.11.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 26.12.2022 | 15633     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K936733                               *
*----------------------------------------------------------------------*

    DATA:
      lv_posting_date TYPE datum.

    lv_posting_date = sy-datum.

    ASSIGN COMPONENT  mc_documentdate OF STRUCTURE cs_data TO FIELD-SYMBOL(<ls_documentdate>).
    IF sy-subrc = 0.
      <ls_documentdate> = COND #( WHEN <ls_documentdate> IS INITIAL THEN sy-datum
                                  WHEN <ls_documentdate> IS NOT INITIAL THEN <ls_documentdate> ).
    ENDIF.

    ASSIGN COMPONENT  mc_postingdate OF STRUCTURE cs_data TO FIELD-SYMBOL(<ls_postingdate>).
    IF sy-subrc = 0.
      <ls_postingdate> = COND #( WHEN <ls_postingdate> IS INITIAL THEN lv_posting_date
                                 WHEN <ls_postingdate> IS NOT INITIAL THEN <ls_postingdate> ).
    ENDIF.
  ENDMETHOD.


  METHOD convert_days_to_date.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 29.12.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 26.12.2022 | 15633     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K936733                               *
*----------------------------------------------------------------------*
    DATA lv_days TYPE int4.

    IF iv_date_days CO '1234567890 '.
      lv_days = iv_date_days.

      IF lv_days IS NOT INITIAL.
        TRY.
            rv_date = cl_hrpt_date_tools=>add_date( date_in = '18991230'
                                                    unit    = cl_hrpt_date_tools=>unit_day
                                                    count   = lv_days ).
          CATCH cx_hrpt_blp_invalid_parameter.
            CLEAR rv_date.
        ENDTRY.
      ENDIF.
    ELSE.
      DATA:lv_date TYPE char10.
      lv_date = iv_date_days.

      REPLACE ALL OCCURRENCES OF '/' IN lv_date WITH '.'.
      REPLACE ALL OCCURRENCES OF '\' IN lv_date WITH '.'.

      CALL FUNCTION 'CONVERT_DATE_TO_INTERN_FORMAT'
        EXPORTING
          datum = lv_date
          dtype = 'DATS'
        IMPORTING
          idate = rv_date.
    ENDIF.
  ENDMETHOD.


  METHOD create_goods_movements.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 10.11.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 26.12.2022 | 15633     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K936733                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 20.04.2023 | 20462     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K950465                              *
*----------------------------------------------------------------------*
    DATA: lt_inventory_adjustment TYPE zsd_inventory_adj_item_upl_tab,
          ls_gmhead_ret           TYPE bapi2017_gm_head_ret,
          lt_return2              TYPE TABLE OF bapiret2, "#EC CI_STDSEQ
          ls_goodsmvt_code        TYPE bapi2017_gm_code,
          lts_goodsmvt_code       TYPE SORTED TABLE OF t158g WITH NON-UNIQUE KEY gmcode,
          ls_return2              TYPE bapiret2,
          lt_gm_items             TYPE gtyp_tt_goods_movement_items,
          lt_gm_items_test        TYPE gtyp_tt_goods_movement_items.

    FIELD-SYMBOLS:
               <lt_item> TYPE STANDARD TABLE.

    ASSIGN COMPONENT mc_item OF STRUCTURE cs_data TO <lt_item>.

    IF sy-subrc = 0.
      lt_inventory_adjustment = CORRESPONDING #( <lt_item> ).

      lts_goodsmvt_code = CORRESPONDING #( lt_inventory_adjustment MAPPING gmcode = gm_code ).
      DELETE ADJACENT DUPLICATES FROM lts_goodsmvt_code.

      LOOP AT lts_goodsmvt_code ASSIGNING FIELD-SYMBOL(<ls_goodsmvt_code>).
        LOOP AT lt_inventory_adjustment ASSIGNING FIELD-SYMBOL(<ls_inventory_adjustment>) WHERE gm_code = <ls_goodsmvt_code>-gmcode "#EC CI_NESTED
                                                                                            AND wrong IS INITIAL. "#EC CI_STDSEQ
          ls_goodsmvt_code-gm_code = <ls_inventory_adjustment>-gm_code.

          DATA(ls_header) = CORRESPONDING bapi2017_gm_head_01( <ls_inventory_adjustment> ).

          CLEAR lt_return2.

          lt_gm_items_test = VALUE #( ( CORRESPONDING #( <ls_inventory_adjustment> ) ) ).

          CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
            EXPORTING
              testrun          = 'X'
              goodsmvt_header  = ls_header
              goodsmvt_code    = ls_goodsmvt_code
            IMPORTING
              goodsmvt_headret = ls_gmhead_ret
            TABLES
              goodsmvt_item    = lt_gm_items_test
              return           = lt_return2.

          APPEND LINES OF lt_return2 TO rt_bapiret2.

          DELETE lt_return2 WHERE type <> mc_bapiret_err_a AND type <> mc_bapiret_err_e. "#EC CI_STDSEQ #EC CI_STDSEQ

          IF lt_return2 IS NOT INITIAL.
            MESSAGE e002(zcm_sd_aif_inv_adj) INTO DATA(lv_message) ##NEEDED ##MG_MISSING.

            APPEND INITIAL LINE TO rt_bapiret2 ASSIGNING FIELD-SYMBOL(<ls_bapiret2>).
            <ls_bapiret2>-id = 'ZCM_SD_AIF_INV_ADJ'.
            <ls_bapiret2>-number = '002'.
            <ls_bapiret2>-type = 'E'.
            <ls_bapiret2>-message_v1 = <ls_inventory_adjustment>-material.
            <ls_bapiret2>-message_v2 = <ls_inventory_adjustment>-plant.
            <ls_bapiret2>-message_v3 = <ls_inventory_adjustment>-move_type.

            <ls_inventory_adjustment>-wrong = abap_true.
          ELSE.
            MESSAGE s005(zcm_sd_aif_inv_adj) INTO lv_message ##NEEDED ##MG_MISSING.

            APPEND INITIAL LINE TO rt_bapiret2 ASSIGNING <ls_bapiret2>.
            <ls_bapiret2>-id = 'ZCM_SD_AIF_INV_ADJ'.
            <ls_bapiret2>-number = '005'.
            <ls_bapiret2>-type = 'S'.
            <ls_bapiret2>-message_v1 = <ls_inventory_adjustment>-material.
            <ls_bapiret2>-message_v2 = <ls_inventory_adjustment>-plant.
            <ls_bapiret2>-message_v3 = <ls_inventory_adjustment>-move_type.

            APPEND  CORRESPONDING #( <ls_inventory_adjustment> ) TO lt_gm_items. "#EC CI_STDSEQ
          ENDIF.

          <ls_bapiret2>-message_v4 = <ls_inventory_adjustment>-line_number.
        ENDLOOP.

        CLEAR lt_return2.

        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_gmhead_ret
          TABLES
            goodsmvt_item    = lt_gm_items
            return           = lt_return2.

        APPEND LINES OF lt_return2 TO rt_bapiret2.

        DELETE lt_return2 WHERE type <> mc_bapiret_err_a AND type <> mc_bapiret_err_e. "#EC CI_STDSEQ #EC CI_STDSEQ

        IF lt_return2 IS INITIAL.
          MESSAGE s001(zcm_sd_aif_inv_adj) INTO lv_message ##NEEDED ##MG_MISSING.

          APPEND INITIAL LINE TO rt_bapiret2 ASSIGNING <ls_bapiret2>.
          <ls_bapiret2>-id = 'ZCM_SD_AIF_INV_ADJ'.
          <ls_bapiret2>-number = '001'.
          <ls_bapiret2>-type = 'S'.
          <ls_bapiret2>-message_v1 = ls_gmhead_ret-mat_doc.
          <ls_bapiret2>-message_v2 = ls_goodsmvt_code-gm_code.

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            EXPORTING
              wait = 'X'.
        ENDIF.

        IF ls_return2 IS NOT INITIAL.
          APPEND ls_return2 TO rt_bapiret2.
        ENDIF.

        CLEAR: ls_header, ls_goodsmvt_code, ls_gmhead_ret, lt_gm_items, lt_return2.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD fill_bapiret2.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 20.11.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*

    MESSAGE e003(zcm_sd_aif_inv_adj) INTO DATA(lv_message) ##MG_MISSING ##NEEDED.

    APPEND INITIAL LINE TO ct_bapiret2 ASSIGNING FIELD-SYMBOL(<ls_bapiret2>).
    <ls_bapiret2>-id = 'ZCM_SD_AIF_INV_ADJ'.
    <ls_bapiret2>-number = '003'.
    <ls_bapiret2>-type = 'E'.
    <ls_bapiret2>-message_v1 = iv_param1.
    <ls_bapiret2>-message_v2 = iv_param2.
    <ls_bapiret2>-message_v3 = iv_param3.
    <ls_bapiret2>-message_v4 = iv_param4.
  ENDMETHOD.


  METHOD get_wrong_format_errors.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 10.11.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 26.12.2022 | 15633     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K936733                               *
*----------------------------------------------------------------------*
    DATA:
      lt_inventory_adjustment TYPE zsd_inventory_adj_item_upl_tab,
      lt_material             TYPE gtyp_material_tab,
      lt_plant                TYPE gtyp_plant_tab,
      lt_storagelocation      TYPE gtyp_storagelocation_tab,
      lt_goodsmovementcode    TYPE gtyp_goodsmovementcode_tab,
      lv_line_number          TYPE i,
      lt_goodsmovementtype    TYPE gtyp_goodsmovementtype_tab.

    FIELD-SYMBOLS:
      <lt_item>        TYPE STANDARD TABLE,
      <lt_check_table> TYPE STANDARD TABLE.

    ASSIGN COMPONENT mc_item OF STRUCTURE cs_data TO <lt_item>.

    IF sy-subrc = 0.
      lt_inventory_adjustment = CORRESPONDING #( <lt_item> ).

      lt_material = CORRESPONDING #( lt_inventory_adjustment ).
      IF lt_material IS NOT INITIAL.
        SELECT DISTINCT product AS key_field
          FROM i_product
            FOR ALL ENTRIES IN @lt_material
            WHERE product = @lt_material-material
          INTO TABLE @DATA(lt_product).
        IF sy-subrc = 0.
          SORT lt_product BY key_field.
        ENDIF.
      ENDIF.

      lt_plant = CORRESPONDING #( lt_inventory_adjustment ).
      IF lt_plant IS NOT INITIAL.
        SELECT DISTINCT plant AS key_field
          FROM i_plant
            FOR ALL ENTRIES IN @lt_plant
            WHERE plant = @lt_plant-plant
          INTO TABLE @DATA(lt_plant_db).
        IF sy-subrc = 0.
          SORT lt_plant_db BY key_field.
        ENDIF.
      ENDIF.

      lt_storagelocation = CORRESPONDING #( lt_inventory_adjustment ).
      IF lt_storagelocation IS NOT INITIAL.
        SELECT DISTINCT storagelocation AS key_field
          FROM i_storagelocation
            FOR ALL ENTRIES IN @lt_storagelocation
            WHERE storagelocation = @lt_storagelocation-stge_loc
          INTO TABLE @DATA(lt_storagelocation_db).
        IF sy-subrc = 0.
          SORT lt_storagelocation_db BY key_field.
        ENDIF.
      ENDIF.

      lt_goodsmovementcode  = CORRESPONDING #( lt_inventory_adjustment ).
      IF lt_goodsmovementcode IS NOT INITIAL.
        SELECT DISTINCT gmcode AS key_field
          FROM t158g                                     "#EC CI_BYPASS
            FOR ALL ENTRIES IN @lt_goodsmovementcode
            WHERE gmcode = @lt_goodsmovementcode-gm_code
          INTO TABLE @DATA(lt_gm_code).
        IF sy-subrc = 0.
          SORT lt_gm_code BY key_field.
        ENDIF.
      ENDIF.

      lt_goodsmovementtype  = CORRESPONDING #( lt_inventory_adjustment ).
      IF lt_goodsmovementtype IS NOT INITIAL.
        SELECT DISTINCT goodsmovementtype AS key_field
          FROM i_goodsmovementtype
            FOR ALL ENTRIES IN @lt_goodsmovementtype
            WHERE goodsmovementtype = @lt_goodsmovementtype-move_type
          INTO TABLE @DATA(lt_goodsmovementtype_db).
        IF sy-subrc = 0.
          SORT lt_goodsmovementtype_db BY key_field.
        ENDIF.
      ENDIF.

      LOOP AT <lt_item> ASSIGNING FIELD-SYMBOL(<ls_item>).
        DO 5 TIMES.                                      "#EC CI_NESTED
          CASE sy-index.
            WHEN 1.
              DATA(lv_component) =  mc_article.
              ASSIGN lt_product TO <lt_check_table>.
            WHEN 2.
              lv_component =  mc_plant.
              ASSIGN lt_plant_db TO <lt_check_table>.
            WHEN 3.
              lv_component =  mc_storagelocation.
              ASSIGN lt_storagelocation_db TO <lt_check_table>.
            WHEN 4.
              lv_component =  mc_goodsmovementcode.
              ASSIGN lt_gm_code TO <lt_check_table>.
            WHEN 5.
              lv_component =  mc_goodsmovementtype.
              ASSIGN lt_goodsmovementtype_db TO <lt_check_table>.
          ENDCASE.

          ASSIGN COMPONENT  lv_component OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<lv_component>).
          IF sy-subrc = 0.
            READ TABLE <lt_check_table> WITH KEY (mc_key_field) = <lv_component> TRANSPORTING NO FIELDS BINARY SEARCH.

            IF sy-subrc <> 0.
              ASSIGN COMPONENT mc_wrong OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_wrong>).
              IF sy-subrc = 0.
                <ls_wrong> = abap_true.
              ENDIF.

              ASSIGN COMPONENT mc_line_number OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<lv_line_number>).
              IF sy-subrc = 0.
                lv_line_number = <lv_line_number>.
              ENDIF.

              fill_bapiret2( EXPORTING iv_param1 = lv_component iv_param2 = <lv_component> iv_param3 = '' iv_param4 = lv_line_number CHANGING ct_bapiret2 = rt_bapiret2 ).
            ENDIF.
          ENDIF.
        ENDDO.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD set_raw_values.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ZHMAIVAD     | 10.11.2022 | 15093     : [Build] Mass inventory posti *
*              |            | DS4K934901                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 26.12.2022 | 15633     : [Build] Mass inventory posting –  Mass St *
*              |            | DS4K936733                               *
*----------------------------------------------------------------------*
    DATA:
      lt_product     TYPE  gtyp_material_tab,
      lts_move_codes TYPE SORTED TABLE OF zsd_s_move_codes WITH NON-UNIQUE KEY move_type move_code.

    FIELD-SYMBOLS:
               <lt_item> TYPE STANDARD TABLE.

    ASSIGN COMPONENT mc_item OF STRUCTURE cs_data TO <lt_item>.
    IF sy-subrc = 0.
      TRY.
          zcl_pe_hm_complex=>get_table(
            EXPORTING
              iv_id           = '0239FC3B8D041EDDA39DC05C40201F59'
              iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
            IMPORTING
              et_table        = lts_move_codes ).
        CATCH zcx_pe_hm.
          MESSAGE e004(zcm_sd_aif_inv_adj) INTO DATA(lv_message) ##MG_MISSING ##NEEDED.

          APPEND INITIAL LINE TO rt_bapiret2 ASSIGNING FIELD-SYMBOL(<ls_bapiret2>).
          <ls_bapiret2>-id = 'ZCM_SD_AIF_INV_ADJ'.
          <ls_bapiret2>-number = '004'.
          <ls_bapiret2>-type = 'E'.
      ENDTRY.

      IF sy-subrc = 0.
        LOOP AT <lt_item> ASSIGNING FIELD-SYMBOL(<ls_item>).
          ASSIGN COMPONENT  mc_material OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_material>).
          IF sy-subrc = 0.
            APPEND INITIAL LINE TO lt_product ASSIGNING FIELD-SYMBOL(<ls_product>).
            <ls_product>-material = <ls_material>.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF lines( lt_product ) > 0.
        SELECT product, baseunit                          "#EC CI_SUBRC
          FROM i_product
          FOR ALL ENTRIES IN @lt_product
          WHERE product = @lt_product-material
          ORDER BY PRIMARY KEY
          INTO TABLE @DATA(lt_product_unit).
      ENDIF.

      LOOP AT <lt_item> ASSIGNING <ls_item>.
        ASSIGN COMPONENT  mc_line_number OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_line_number>).
        IF sy-subrc = 0.
          <ls_line_number> = sy-tabix + 1.
        ENDIF.

        ASSIGN COMPONENT  mc_goodsmovementtype  OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_goodsmovementtype>).
        IF sy-subrc = 0.
          READ TABLE lts_move_codes ASSIGNING FIELD-SYMBOL(<ls_move_codes>) WITH KEY move_type = <ls_goodsmovementtype>.

          IF sy-subrc = 0.
            ASSIGN COMPONENT  mc_goodsmovementcode OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_goodsmovementcode>).
            IF sy-subrc = 0.
              <ls_goodsmovementcode> = <ls_move_codes>-move_code.
            ELSE.
              CLEAR <ls_goodsmovementcode>.
            ENDIF.
          ENDIF.
        ENDIF.

        ASSIGN COMPONENT  mc_entryunit OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_entryunit>).
        IF sy-subrc = 0.
          ASSIGN COMPONENT  mc_material OF STRUCTURE <ls_item> TO <ls_material>.
          IF sy-subrc = 0.
            READ TABLE lt_product_unit WITH KEY product = <ls_material> ASSIGNING FIELD-SYMBOL(<ls_baseunit>) BINARY SEARCH.
            IF sy-subrc = 0 AND <ls_entryunit> IS INITIAL.
              <ls_entryunit> = <ls_baseunit>-baseunit.
            ENDIF.
          ENDIF.
        ENDIF.

        ASSIGN COMPONENT  mc_documentdate OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_documentdate>).
        IF sy-subrc = 0.
          <ls_documentdate> = COND #( WHEN <ls_documentdate> IS INITIAL THEN sy-datum
                                      WHEN <ls_documentdate> IS NOT INITIAL THEN convert_days_to_date( <ls_documentdate> ) ).
        ENDIF.

        ASSIGN COMPONENT  mc_postingdate OF STRUCTURE <ls_item> TO FIELD-SYMBOL(<ls_postingdate>).
        IF sy-subrc = 0.
          <ls_postingdate> = COND #( WHEN <ls_postingdate> IS INITIAL THEN sy-datum
                                     WHEN <ls_postingdate> IS NOT INITIAL THEN convert_days_to_date( <ls_postingdate> ) ).
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
ENDCLASS.