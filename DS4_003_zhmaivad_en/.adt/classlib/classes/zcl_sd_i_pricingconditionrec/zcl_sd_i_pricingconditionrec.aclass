class ZCL_SD_I_PRICINGCONDITIONREC definition
  public
  inheriting from /BOBF/CL_LIB_DR_CLASSIC_APP
  final
  create public .

public section.

  types:
    BEGIN OF mtyp_fields_access,
        tabname                       TYPE dd03l-tabname,
        conditiontable                TYPE kotabnr,
        fieldname                     TYPE dd03l-fieldname,
        position                      TYPE dd03l-position,
        conditiontype                 TYPE kschl,
        accessnumber                  TYPE kolnr,
        conditioncount                TYPE dzaehk,
        action                        TYPE char20,
        fieldcontrol                  TYPE char20,
        prcgcndnvalueinitialisallowed TYPE kzini,
      END OF mtyp_fields_access .
  types:
    tt_fields_access TYPE TABLE OF mtyp_fields_access .
  types:
    BEGIN OF ty_access_internal,
        kappl   TYPE t685-kappl,
        kschl   TYPE t685-kschl,
        kozgf   TYPE t685-kozgf,
        kotabnr TYPE t682i-kotabnr,
        kolnr   TYPE t682i-kolnr,
        zaehk   TYPE t682z-zaehk,
        zifna   TYPE t682z-zifna,
        qufna   TYPE t682z-qufna,
        kzini   TYPE t682z-kzini,
        qudiw   TYPE t682z-qudiw,
        fstst   TYPE t682z-fstst,
      END OF ty_access_internal .
  types:
    tt_access_internal TYPE TABLE OF ty_access_internal .

  methods CONSTRUCTOR .

  methods /BOBF/IF_FRW_DRAFT~COPY_DRAFT_TO_ACTIVE_ENTITY
    redefinition .
  PROTECTED SECTION.
  PRIVATE SECTION.

    DATA mif_sls_api TYPE REF TO if_slsprcg_cndnrecd_api .
    DATA mif_prcg_util TYPE REF TO if_cndnrecord_public_utility .
    DATA mt_access TYPE tt_fields_access .
    DATA mt_message TYPE /bobf/t_frw_message_k .
    DATA mo_sadl_msg_handler TYPE REF TO /bobf/cl_sadl_message_handler .
    DATA mif_req_util TYPE REF TO if_cndnrecord_request_utility .
    DATA mif_ltd_db TYPE REF TO if_cnd_maint_ltd_db .

    METHODS check_combination
      IMPORTING
        !is_record     TYPE zsislspricingconditionrecordt
      EXPORTING
        !eif_message    TYPE REF TO /bobf/if_frw_message
        !et_failed_key TYPE /bobf/t_frw_key .
    METHODS get_access
      IMPORTING
        !iv_conditiontype TYPE kschl
      EXPORTING
        !et_access        TYPE tt_fields_access .
    METHODS convert_required_message
      CHANGING
        !cs_msg TYPE symsg .
    METHODS convert_exit_input
      IMPORTING
        !is_input      TYPE zsislspricingconditionrecordt
      EXPORTING
        !et_failed_key TYPE /bobf/t_frw_key
      CHANGING
        !cs_output     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_s
        !eif_message    TYPE REF TO /bobf/if_frw_message .
    METHODS overlap_message_date_format
      CHANGING
        !cs_msg TYPE symsg .
    METHODS calculate_condition_etag
      IMPORTING
        !ir_entity     TYPE REF TO data
      RETURNING
        VALUE(rv_etag) TYPE char40 .
    METHODS add_message
      IMPORTING
        !ix_cndn_failed TYPE REF TO cx_prcg_cndnrecord_exception
      EXPORTING
        !et_msg         TYPE symsg_tab .
    METHODS check_contract
      IMPORTING
        !is_cndn_cds         TYPE zsislspricingconditionrecordt
      EXPORTING
        !eif_message          TYPE REF TO /bobf/if_frw_message
        !et_failed_draft_key TYPE /bobf/t_frw_key .
    METHODS create_record
      IMPORTING
        !is_result           TYPE if_swf_flex_ifs_sim=>t_sim_result OPTIONAL
      EXPORTING
        !eif_message          TYPE REF TO /bobf/if_frw_message
        !et_key_link         TYPE /bobf/t_frw_key_link_act_draft
        !et_failed_draft_key TYPE /bobf/t_frw_key
        !et_api_message      TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t
      CHANGING
        !cs_cndn_cds         TYPE zsislspricingconditionrecordt .
    METHODS update_record
      IMPORTING
        !is_result           TYPE if_swf_flex_ifs_sim=>t_sim_result OPTIONAL
      EXPORTING
        !eif_message          TYPE REF TO /bobf/if_frw_message
        !et_key_link         TYPE /bobf/t_frw_key_link_act_draft
        !et_failed_draft_key TYPE /bobf/t_frw_key
      CHANGING
        !cs_cndn_cds         TYPE zsislspricingconditionrecordt .
    METHODS copy_draft_to_active_entity
      IMPORTING
        !is_ctx              TYPE /bobf/s_frw_ctx_draft
        !it_draft_key        TYPE /bobf/t_frw_key
        !io_read             TYPE REF TO /bobf/if_frw_read
        !io_modify           TYPE REF TO /bobf/if_frw_modify
      EXPORTING
        !eif_message          TYPE REF TO /bobf/if_frw_message
        !et_key_link         TYPE /bobf/t_frw_key_link_act_draft
        !et_failed_draft_key TYPE /bobf/t_frw_key .
    METHODS add_msg_failed_key
      IMPORTING
        !is_msg              TYPE symsg
        !is_cndn_cds         TYPE zsislspricingconditionrecordt
      EXPORTING
        !eif_message          TYPE REF TO /bobf/if_frw_message
        !et_failed_draft_key TYPE /bobf/t_frw_key .
ENDCLASS.



CLASS ZCL_SD_I_PRICINGCONDITIONREC IMPLEMENTATION.


  METHOD /BOBF/IF_FRW_DRAFT~COPY_DRAFT_TO_ACTIVE_ENTITY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    copy_draft_to_active_entity(
      EXPORTING
        is_ctx              = is_ctx
        it_draft_key        = it_draft_key
        io_read             = io_read
        io_modify           = io_modify
      IMPORTING
        eif_message          = eo_message
        et_key_link         = et_key_link
        et_failed_draft_key = et_failed_draft_key
    ).
  ENDMETHOD.


  METHOD ADD_MESSAGE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:ls_msg       TYPE symsg.

    ls_msg-msgty = ix_cndn_failed->if_t100_dyn_msg~msgty.
    ls_msg-msgid = ix_cndn_failed->if_t100_message~t100key-msgid.
    ls_msg-msgno = ix_cndn_failed->if_t100_message~t100key-msgno.
    ls_msg-msgv1 = ix_cndn_failed->if_t100_dyn_msg~msgv1.
    ls_msg-msgv2 = ix_cndn_failed->if_t100_dyn_msg~msgv2.
    ls_msg-msgv3 = ix_cndn_failed->if_t100_dyn_msg~msgv3.
    ls_msg-msgv4 = ix_cndn_failed->if_t100_dyn_msg~msgv4.

    convert_required_message( CHANGING cs_msg = ls_msg ).

    APPEND ls_msg TO et_msg.

  ENDMETHOD.


  METHOD ADD_MSG_FAILED_KEY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    eif_message->add_message(
        is_msg       = is_msg       " Message that is to be added to the message object
        iv_node      = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp  " Node to be used in the origin location
        iv_key       = is_cndn_cds-key       " Instance key to be used in the origin location
        iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition  " Lifetime of the message
    ).
    IF eif_message->check( ) = abap_true.
      APPEND VALUE #( key = is_cndn_cds-key ) TO et_failed_draft_key.
    ENDIF.
    eif_message->get_messages(
      IMPORTING
        et_message              = DATA(lt_message)
    ).
    APPEND LINES OF lt_message TO mt_message.
    mo_sadl_msg_handler->if_sadl_message_handler~clear( ).
  ENDMETHOD.


  METHOD CALCULATE_CONDITION_ETAG.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lv_xstring TYPE xstring.
    DATA:lv_string TYPE string.
    DATA:lv_field TYPE string.

    ASSIGN ir_entity->* TO FIELD-SYMBOL(<ls_entity>).
    IF <ls_entity> IS ASSIGNED.
      DO.
        ASSIGN COMPONENT sy-index OF STRUCTURE <ls_entity> TO FIELD-SYMBOL(<ls_field>).
        IF sy-subrc = 0 AND <ls_field> IS ASSIGNED.
          lv_field = <ls_field>.
          CONCATENATE lv_string lv_field INTO lv_string.
        ELSE.
          EXIT.
        ENDIF.
        UNASSIGN <ls_field>.
      ENDDO.
      EXPORT id = lv_string TO DATA BUFFER lv_xstring.
      TRY.
          TEST-SEAM calculate_db_etag.
            cl_abap_message_digest=>calculate_hash_for_raw(
              EXPORTING
                if_data          = lv_xstring
              IMPORTING
                ef_hashstring    = DATA(lv_string1)
            ).
          END-TEST-SEAM.
        CATCH cx_abap_message_digest. " Exception Class for Message Digest
          RETURN.
      ENDTRY.
      rv_etag = lv_string1.
    ENDIF.
  ENDMETHOD.


  METHOD CHECK_COMBINATION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    "refer to FM SD_CHECK_KEY_COMBINATION
    DATA:ls_msg       TYPE symsg,
         lo_ref_struct   TYPE REF TO cl_abap_structdescr,
         ls_struct    TYPE zcslsprcgcndnrtp, " ddic type
         lt_ddic_info TYPE ddfields.

    DATA(ls_record) = is_record.
    IF ls_record-conditiontype IS INITIAL
      OR ls_record-isactiveentity = abap_true
      OR ls_record-accessnumberofaccesssequence IS INITIAL.
      EXIT.
    ENDIF.

*    IF eif_message IS NOT BOUND.
*      eif_message = /bobf/cl_frw_message_factory=>create_container( ).
*    ENDIF.

    get_access(
      EXPORTING
        iv_conditiontype = ls_record-conditiontype
      IMPORTING
        et_access        = DATA(lt_access)
    ).

    IF ls_record-conditiontable IS NOT INITIAL.
      DELETE lt_access WHERE conditiontable <> ls_record-conditiontable.
    ENDIF.
    DELETE lt_access WHERE accessnumber <> ls_record-accessnumberofaccesssequence
                        OR accessnumber = ls_record-accessnumberofaccesssequence
                       AND prcgcndnvalueinitialisallowed = abap_true.

    SORT lt_access BY fieldname.
    DELETE ADJACENT DUPLICATES FROM lt_access COMPARING fieldname.

    lo_ref_struct ?= cl_abap_typedescr=>describe_by_data( ls_struct ).
    lt_ddic_info = lo_ref_struct->get_ddic_field_list( ).

    LOOP AT lt_access INTO DATA(ls_access).
      ASSIGN COMPONENT ls_access-fieldname OF STRUCTURE ls_record TO FIELD-SYMBOL(<fs_value>).
      IF <fs_value> IS ASSIGNED AND <fs_value> IS INITIAL.
        MESSAGE e020(prcg_cndnrecord_api) WITH ls_record-conditionrecord ls_access-fieldname INTO DATA(lv_message).
        CLEAR:ls_msg.
        MOVE-CORRESPONDING sy TO ls_msg.

        DATA(lv_property) = ls_msg-msgv2.
        TRANSLATE lv_property TO UPPER CASE.
        READ TABLE lt_ddic_info INTO DATA(ls_ddic_info) WITH KEY fieldname = CONV #( lv_property ).
        IF sy-subrc = 0.
          ls_msg-msgv2 = ls_ddic_info-scrtext_l.
          MESSAGE e020(prcg_cndnrecord_api) WITH ls_msg-msgv1 ls_msg-msgv2 INTO lv_message.
          CLEAR:ls_msg.
          MOVE-CORRESPONDING sy TO ls_msg.

          add_msg_failed_key(
            EXPORTING
              is_msg              = ls_msg
              is_cndn_cds         = is_record
            IMPORTING
              eif_message          = eif_message
              et_failed_draft_key = et_failed_key
          ).
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_CONTRACT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:ls_msg TYPE symsg.

    CLEAR:et_failed_draft_key.

*    IF eif_message IS NOT BOUND.
*      eif_message = /bobf/cl_frw_message_factory=>create_container( ).
*    ENDIF.

    TEST-SEAM contract_check.
      CALL METHOD cl_wlf_kotabnr_check=>check
        EXPORTING
          i_kotabnr = is_cndn_cds-conditiontable " Condition Table
          i_kappl   = if_ct_constants=>c_application_sales   " Application
          i_kvewe   = if_ct_constants=>c_usage_pricing   " Usage of the Condition Table
          i_aktyp   = ' '   " Activity Category in the Transaction
        EXCEPTIONS
          error     = 4.
    END-TEST-SEAM.
    IF sy-subrc <> 0.
      MESSAGE e682(ws) WITH is_cndn_cds-conditiontable INTO DATA(lv_message).
      CLEAR:ls_msg.
      MOVE-CORRESPONDING sy TO ls_msg.

      add_msg_failed_key(
        EXPORTING
          is_msg              = ls_msg
          is_cndn_cds         = is_cndn_cds
        IMPORTING
          eif_message          = eif_message
          et_failed_draft_key = et_failed_draft_key
      ).
    ENDIF.
  ENDMETHOD.


  METHOD CONSTRUCTOR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    super->constructor( ).
    mif_sls_api = NEW zcl_slsprcg_cndnrecord_api( ).
    mif_prcg_util = cl_cndnrecord_public_utility=>get_instance( ).
    mif_ltd_db = cl_cnd_maint_ltd_db=>get_instance( ).
    mo_sadl_msg_handler = /bobf/cl_sadl_message_handler=>get( iv_entity_type = cl_sadl_entity_factory=>co_type-cds ).
    mif_req_util = cl_cndnrecord_request_utility=>get_instance( ).
  ENDMETHOD.


  METHOD CONVERT_EXIT_INPUT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lo_data   TYPE REF TO data,
         lv_input  TYPE string,
         lv_output TYPE ps_posid,
         ls_msg    TYPE symsg.

    lo_data = REF #( cs_output ).

    TRY.
        TEST-SEAM convert_value_to_input.
          mif_prcg_util->convert_value_to_input(
            EXPORTING
              iv_tabname = 'ZCSLSPRCGCNDNRTP'   " Table Name
            CHANGING
              cr_data    = lo_data
          ).
        END-TEST-SEAM.
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        RETURN.
    ENDTRY.

    lv_input = CONV #( is_input-wbselementinternalid ).
    SHIFT lv_input LEFT DELETING LEADING '0'.
    IF lv_input IS INITIAL.
      CLEAR:cs_output-wbselementinternalid.
    ELSE.
      TEST-SEAM convert_wbselement.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
          EXPORTING
            input     = is_input-wbselementinternalid
          IMPORTING
            output    = lv_output
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.
      END-TEST-SEAM.
      IF sy-subrc = 0.
        cs_output-wbselementinternalid = lv_output.
      ELSE.
        APPEND VALUE #( key = is_input-key ) TO et_failed_key.
        MOVE-CORRESPONDING sy TO ls_msg.
        eif_message->add_message( is_msg      = ls_msg
                                 iv_node     = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp
                                 iv_key      = is_input-key
                                 iv_lifetime = /bobf/cm_frw=>co_lifetime_transition
                                 ).
      ENDIF.
    ENDIF.

    lv_input = CONV #( is_input-workpackage ).
    SHIFT lv_input LEFT DELETING LEADING '0'.
    IF lv_input IS INITIAL.
      CLEAR:cs_output-workpackage.
    ELSE.
      TEST-SEAM convert_workpackage.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
          EXPORTING
            input     = is_input-workpackage
          IMPORTING
            output    = lv_output
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.
      END-TEST-SEAM.
      IF sy-subrc = 0.
        cs_output-workpackage = lv_output.
      ELSE.
        APPEND VALUE #( key = is_input-key ) TO et_failed_key.
        MESSAGE e023(rsiwp) WITH is_input-workpackage INTO DATA(lv_msg).
        MOVE-CORRESPONDING sy TO ls_msg.
        eif_message->add_message( is_msg      = ls_msg
                                 iv_node     = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp
                                 iv_key      = is_input-key
                                 iv_lifetime = /bobf/cm_frw=>co_lifetime_transition
                                 ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD CONVERT_REQUIRED_MESSAGE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS:lc_api_msgid    TYPE msgid VALUE 'PRCG_CNDNRECORD_API'.
    DATA: lo_ref_struct   TYPE REF TO cl_abap_structdescr,
          ls_struct    TYPE zcslsprcgcndnrtp, " ddic type
          lt_ddic_info TYPE ddfields.

    IF cs_msg-msgid = lc_api_msgid.
      "if supplement is supported, comment it.   begin
      IF cs_msg-msgno = '066' OR cs_msg-msgno = '030'.
        MESSAGE e020(prcg_cndnrecord_api) WITH cs_msg-msgv1 cs_msg-msgv3 INTO DATA(lv_message).
        CLEAR:cs_msg.
        MOVE-CORRESPONDING sy TO cs_msg.
      ENDIF.

      IF cs_msg-msgno = '020'.
        lo_ref_struct ?= cl_abap_typedescr=>describe_by_data( ls_struct ).
        lt_ddic_info = lo_ref_struct->get_ddic_field_list( ).

        DATA(lv_property) = cs_msg-msgv2.
        TRANSLATE lv_property TO UPPER CASE.
        READ TABLE lt_ddic_info INTO DATA(ls_ddic_info) WITH KEY fieldname = CONV #( lv_property ).
        IF sy-subrc = 0.
          cs_msg-msgv2 = ls_ddic_info-scrtext_l.
          MESSAGE e020(prcg_cndnrecord_api) WITH cs_msg-msgv1 cs_msg-msgv2 INTO lv_message.
          CLEAR:cs_msg.
          MOVE-CORRESPONDING sy TO cs_msg.
        ENDIF.
      ENDIF.

      IF cs_msg-msgno = '021'.
        CALL METHOD cl_crms4_condition_tool=>get_cond_field_label
          EXPORTING
            iv_entityname  = 'ZC_SlsPricingConditionRecordTP'
            iv_elementname = 'CONDITIONRATEVALUE'
            iv_language    = sy-langu
          IMPORTING
            es_label       = DATA(ls_label).
        cs_msg-msgv3 = ls_label-value.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD COPY_DRAFT_TO_ACTIVE_ENTITY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lif_message    TYPE REF TO /bobf/if_frw_message,
          lt_failed_key TYPE /bobf/t_frw_key,
          lt_cndn_cds   TYPE ztislspricingconditionrecordt,
          ls_cndn_cds   LIKE LINE OF lt_cndn_cds,
          ls_result     TYPE if_swf_flex_ifs_sim=>t_sim_result,
          lv_sibfboriid TYPE sibfboriid.

    CONSTANTS: lc_temporaer    TYPE char2 VALUE '$$'.

    IF eif_message IS NOT BOUND.
      eif_message = /bobf/cl_frw_message_factory=>create_container( ).
      lif_message = eif_message .
    ENDIF.

    "retrieve the data of node instance
    TEST-SEAM retrieve.
      io_read->retrieve(
        EXPORTING
          iv_node                 = is_ctx-node_key         "uuid
          it_key                  = it_draft_key
        IMPORTING
          eo_message              = lif_message
          et_data                 = lt_cndn_cds
          et_failed_key           = lt_failed_key
      ).
    END-TEST-SEAM.
    IF lif_message IS BOUND.
      eif_message->add( io_message = lif_message ).
      CLEAR lif_message.
      eif_message->get_messages(
        IMPORTING
          et_message              = DATA(lt_message)
      ).
      APPEND LINES OF lt_message TO mt_message.
    ENDIF.

    APPEND LINES OF lt_failed_key TO et_failed_draft_key.

    IF et_failed_draft_key IS NOT INITIAL.
      mo_sadl_msg_handler->if_sadl_message_handler~clear( ).
      RETURN.
    ENDIF.


    mif_ltd_db->set_sls_cndn_app_flag( abap_true ).
    LOOP AT lt_cndn_cds INTO ls_cndn_cds.
** Check Workflow for new record or blocked draft
      CONSTANTS: lc_feature_toggle_id TYPE sftgl_ft_id VALUE 'SD_PRICE_APPROVAL_BASIC_FUNCTION'.

      TEST-SEAM feature_toggle_fine.
        IF cl_feature_toggle=>is_defined( lc_feature_toggle_id )
          AND cl_feature_toggle=>is_active( lc_feature_toggle_id ).
          DATA(lv_ft_fine) = abap_true.
        ENDIF.
      END-TEST-SEAM.
      IF lv_ft_fine EQ abap_true.
        CLEAR ls_result.
        lv_sibfboriid = ls_cndn_cds-conditionrecord.
        mif_req_util->simulate(
          EXPORTING
            iv_kappl      = 'V'
            iv_sibfboriid = lv_sibfboriid
          IMPORTING
            es_sim_result = ls_result
            et_sim_result = DATA(lt_result)
        ).
      ENDIF.

      IF ls_cndn_cds-conditionrecord IS NOT INITIAL AND
         ls_cndn_cds-conditionrecord(2) NE lc_temporaer.
        "Draft based on active
        update_record(
        EXPORTING
            is_result           = ls_result
          IMPORTING
            eif_message          = eif_message
            et_key_link         = et_key_link
            et_failed_draft_key = et_failed_draft_key
          CHANGING
            cs_cndn_cds         = ls_cndn_cds
        ).
      ELSE.
        IF ls_result-selected = abap_true.
          ls_cndn_cds-conditionreleasestatus = cl_cndnrecord_request_utility=>gcs_release_status-blocked.
        ELSE.
          ls_cndn_cds-conditionreleasestatus = cl_cndnrecord_request_utility=>gcs_release_status-released.
        ENDIF.
        "New draft not based on active
        create_record(
          EXPORTING
            is_result           = ls_result
          IMPORTING
            eif_message          = eif_message
            et_key_link         = et_key_link
            et_failed_draft_key = et_failed_draft_key
            et_api_message      = DATA(lt_api_message)
          CHANGING
            cs_cndn_cds         = ls_cndn_cds
        ).
      ENDIF.
    ENDLOOP.



  ENDMETHOD.


  METHOD CREATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_failed_key                 TYPE /bobf/t_frw_key,
          lt_message_c                  TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
          lt_condition_record_c         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          ls_condition_record           TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_record_text_c    TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_text_t,
          ls_condition_record_text_c    TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_condition_record_text_t,
          lt_condition_validity_c       TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
          ls_condition_validity         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_s,
          ls_cndnrecord_query_option    TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
          lt_condition_validity         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
          lt_condition_record           TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          ls_cndn_query_option_response TYPE if_slsprcg_cndnrecd_api_types=>ty_query_option_response_s,
          ls_link                       TYPE /bobf/s_frw_key_link_act_draft,
          ls_set                        TYPE zc_slspricingconditionrecordtp,
          ls_draft                      TYPE zc_slspricingconditionrecordtp,
          ls_msg                        TYPE symsg,
          ls_mess                       TYPE symsg,
          lv_temp_record                TYPE symsgv,
          lv_create_record              TYPE symsgv,
          ob_message                    TYPE REF TO /bobf/cm_frw_symsg.

    CONSTANTS: c_seqno_initial TYPE kopos VALUE '00',
               c_seqno_record  TYPE kopos VALUE '01'.

    CREATE OBJECT ob_message.

    DATA(lv_error) = abap_false.

    CLEAR:lt_failed_key.
    CLEAR: ls_condition_record, ls_condition_validity.
    CLEAR ls_condition_record_text_c.
    IF cs_cndn_cds-conditionsequentialnumber IS INITIAL OR
       cs_cndn_cds-conditionsequentialnumber = c_seqno_initial OR
       cs_cndn_cds-conditionsequentialnumber = c_seqno_record.
      MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_record.
      MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_validity.

      convert_exit_input(
        EXPORTING
          is_input  = cs_cndn_cds                 " #GENERATED#
        IMPORTING
          et_failed_key = lt_failed_key
        CHANGING
          cs_output = ls_condition_validity
          eif_message = eif_message
      ).
      APPEND LINES OF lt_failed_key TO et_failed_draft_key.
      IF lt_failed_key IS NOT INITIAL.
        RETURN. "CONTINUE.
      ENDIF.
      APPEND ls_condition_record TO lt_condition_record_c.
      APPEND ls_condition_validity TO lt_condition_validity_c.

      IF cs_cndn_cds-conditiontext IS NOT INITIAL.
        MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_record_text_c.
        ls_condition_record_text_c-language = sy-langu.
        APPEND ls_condition_record_text_c TO lt_condition_record_text_c.
      ENDIF.
    ENDIF.

    "Check condition type
    mif_prcg_util->excluded_sls_conditiontype(
      IMPORTING
        et_conditiontype = DATA(lt_contype)
    ).
    READ TABLE lt_contype WITH KEY conditiontype = cs_cndn_cds-conditiontype
                              TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      MESSAGE e083(prcg_cndnrecord_api) WITH cs_cndn_cds-conditiontype INTO DATA(lv_message).
      CLEAR:ls_msg.
      MOVE-CORRESPONDING sy TO ls_msg.
      add_msg_failed_key(
        EXPORTING
          is_msg              = ls_msg
          is_cndn_cds         = cs_cndn_cds
        IMPORTING
          eif_message          = eif_message
          et_failed_draft_key = et_failed_draft_key
      ).
      IF et_failed_draft_key IS NOT INITIAL.
        RETURN.
      ENDIF.
    ENDIF.

    " Add check for contract condition type
    IF cs_cndn_cds-conditiontable IS NOT INITIAL.
      check_contract(
        EXPORTING
          is_cndn_cds         = cs_cndn_cds
        IMPORTING
          eif_message          = eif_message
          et_failed_draft_key = et_failed_draft_key
      ).
      IF et_failed_draft_key IS NOT INITIAL.
        RETURN.
      ENDIF.
    ENDIF.

**New draft not based on active
    IF lt_condition_record_c IS NOT INITIAL.
      check_combination(
        EXPORTING
          is_record = cs_cndn_cds
        IMPORTING
          eif_message    = eif_message
          et_failed_key = et_failed_draft_key
      ).

      IF et_failed_draft_key IS NOT INITIAL.
        RETURN.
      ENDIF.

      TRY.
          mif_sls_api->create_condition_record(
            IMPORTING
              et_message                 = lt_message_c
            CHANGING
              ct_condition_record        = lt_condition_record_c
              ct_condition_validity_enh  = lt_condition_validity_c
              ct_condition_record_text   = lt_condition_record_text_c
           ).
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
          CALL METHOD add_message
            EXPORTING
              ix_cndn_failed = lx_ex
            IMPORTING
              et_msg         = DATA(lt_msg).
          IF lx_ex->if_t100_message~t100key-msgid <> 'VK' OR lx_ex->if_t100_message~t100key-msgno <> '085'.
            lv_error = abap_true.
          ENDIF.
      ENDTRY.

      et_api_message = lt_message_c.

**Handle message
      LOOP AT lt_message_c ASSIGNING FIELD-SYMBOL(<fs_msg>).
        ls_msg-msgty = <fs_msg>-systemmessagetype.
        ls_msg-msgid = <fs_msg>-systemmessageidentification.
        ls_msg-msgno = <fs_msg>-systemmessagenumber.
        ls_msg-msgv1 = <fs_msg>-systemmessagevariable1.
        ls_msg-msgv2 = <fs_msg>-systemmessagevariable2.
        ls_msg-msgv3 = <fs_msg>-systemmessagevariable3.
        ls_msg-msgv4 = <fs_msg>-systemmessagevariable4.
        IF ls_msg-msgid = 'PRCG_CNDNRECORD_API' AND ( ls_msg-msgno = '014' OR ls_msg-msgno = '016' OR ls_msg-msgno = '017' ).
          IF ( ls_msg-msgno = '014' ).
            DATA(lv_conditionnumber) = ls_msg-msgv2.
          ELSE.
            lv_conditionnumber = ls_msg-msgv1.
          ENDIF.
          SELECT SINGLE conditionisdeleted FROM i_slsprcgconditionrecord
            INTO @DATA(lv_is_deleted)
           WHERE conditionrecord = @lv_conditionnumber. "#EC CI_SEL_NESTED
          IF sy-subrc <> 0 OR lv_is_deleted = abap_true.
            CONTINUE.
          ENDIF.
        ENDIF.
        IF ls_msg-msgid = 'VK' AND ls_msg-msgno = '495'.
          MESSAGE e077(prcg_cndnrecord_api) WITH cs_cndn_cds-conditionrecord INTO lv_message.
          CLEAR:ls_msg.
          MOVE-CORRESPONDING sy TO ls_msg.
        ENDIF.
        "overlap date format
        overlap_message_date_format( CHANGING cs_msg = ls_msg ).

        convert_required_message( CHANGING cs_msg = ls_msg ).

        READ TABLE lt_msg WITH KEY msgid = ls_msg-msgid msgno = ls_msg-msgno
                         msgv1 = ls_msg-msgv1 msgv2 = ls_msg-msgv2
                         msgv3 = ls_msg-msgv3 msgv4 = ls_msg-msgv4 TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          APPEND ls_msg TO lt_msg.
        ENDIF.
      ENDLOOP.

      LOOP AT lt_msg INTO ls_msg.
        IF ( ls_msg-msgid = 'VK' AND ls_msg-msgno = '085' ).
          ls_msg-msgty = 'I'.
          ls_msg-msgid = '00'.
          ls_msg-msgno = '001'.
          ls_msg-msgv1 = 'No Authorization,'.
          ls_msg-msgv2 = cs_cndn_cds-conditionrecord.
        ENDIF.
        eif_message->add_message( is_msg = ls_msg
                                 iv_node = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp
                                 iv_key  = cs_cndn_cds-key
                                 iv_lifetime = /bobf/cm_frw=>co_lifetime_transition
                                  ).
        IF ls_msg-msgty = 'E'.
          lv_error = abap_true.
        ENDIF.
      ENDLOOP.

      IF eif_message IS BOUND AND eif_message->check( ) = abap_true.
        IF lv_error = abap_true.
          APPEND VALUE #( key = cs_cndn_cds-key ) TO et_failed_draft_key.
          mo_sadl_msg_handler->if_sadl_message_handler~clear( ).
        ENDIF.
      ELSE.
        IF lt_condition_record_c IS NOT INITIAL.
          LOOP AT lt_condition_record_c INTO ls_condition_record.
            ls_link-active = CONV #( ls_condition_record-conditionrecord &&
                                     ls_condition_record-conditionsequentialnumber &&
                                     ls_condition_record-conditionvalidityenddate ).
            ls_link-draft = cs_cndn_cds-key.
            READ TABLE et_key_link TRANSPORTING NO FIELDS WITH KEY active = ls_link-active draft = ls_link-draft.
            IF sy-subrc NE 0.
              INSERT ls_link INTO TABLE et_key_link.
            ENDIF.

            "send workflow related message to frontend
            IF is_result-selected = abap_true.
              MESSAGE i001(00) WITH 'SimulateWF:' ls_link-active '/' is_result-id  INTO DATA(lv_message_workflow). "Message without translation for parse in front-end .
              CLEAR:ls_msg.
              MOVE-CORRESPONDING sy TO ls_msg.
              eif_message->add_message(
              EXPORTING
                is_msg       = ls_msg       " Message that is to be added to the message object
                iv_node      = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp  " Node to be used in the origin location
                iv_key       = cs_cndn_cds-key       " Instance key to be used in the origin location
                iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition  " Lifetime of the message
            ).
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

    eif_message->get_messages(
      IMPORTING
        et_message              = DATA(lt_message)
    ).
    APPEND LINES OF lt_message TO mt_message.
  ENDMETHOD.


  METHOD GET_ACCESS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    READ TABLE mt_access WITH KEY conditiontype = iv_conditiontype TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      SELECT conditiontype,
             conditiontable,
             accessnumberofaccesssequence AS accessnumber,
             numberofconditions AS conditioncount,
             conditionfieldname AS fieldname,
             prcgcndnvalueinitialisallowed
        FROM zi_slsprcgkeycombinationfield
       WHERE conditiontype = @iv_conditiontype
        APPENDING CORRESPONDING FIELDS OF TABLE @mt_access."#EC CI_SEL_NESTED "#EC CI_SUBRC

      LOOP AT mt_access INTO DATA(ls_access) WHERE conditiontype = iv_conditiontype.
        TRANSLATE ls_access-fieldname TO UPPER CASE.
        MODIFY mt_access FROM ls_access.
      ENDLOOP.
    ENDIF.

    et_access = mt_access.
    DELETE et_access WHERE conditiontype <> iv_conditiontype.
  ENDMETHOD.


  METHOD OVERLAP_MESSAGE_DATE_FORMAT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lv_datab TYPE datab,
         lv_datbi TYPE datbi.
    CONSTANTS: lc_api_msgid TYPE msgid VALUE 'PRCG_CNDNRECORD_API'.

    IF cs_msg-msgid = lc_api_msgid AND cs_msg-msgno = '015'.
        lv_datab = cs_msg-msgv3.
        lv_datbi = cs_msg-msgv4.
        WRITE lv_datab DD/MM/YYYY TO cs_msg-msgv3.
        WRITE lv_datbi DD/MM/YYYY TO cs_msg-msgv4.
      ELSEIF cs_msg-msgid = lc_api_msgid AND cs_msg-msgno = '016'.
        lv_datab = cs_msg-msgv2.
        lv_datbi = cs_msg-msgv3.
        WRITE lv_datab DD/MM/YYYY TO cs_msg-msgv2.
        WRITE lv_datbi DD/MM/YYYY TO cs_msg-msgv3.
      ENDIF.
  ENDMETHOD.


  METHOD UPDATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lt_failed_key                 TYPE /bobf/t_frw_key,
          lt_message_u                  TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
          lt_condition_record_u         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          ls_condition_record           TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_record_text_u    TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_text_t,
          ls_condition_record_text      TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_condition_record_text_t,
          lt_condition_validity_u       TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
          ls_condition_validity         TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
          ls_cndnrecord_criteria_header TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_header_s,
          lt_cndnrecord_criteria_item   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
          ls_cndnrecord_criteria_item   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_s,
          ls_cndnrecord_query_option    TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
          lt_condition_record           TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_validity         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_validity_enh_t,
          ls_cndn_query_option_response TYPE if_slsprcg_cndnrecd_api_types=>ty_query_option_response_s,
          ls_link                       TYPE /bobf/s_frw_key_link_act_draft,
          ls_set                        TYPE zc_slspricingconditionrecordtp,
          ls_draft                      TYPE zc_slspricingconditionrecordtp,
          ls_msg                        TYPE symsg,
          ls_mess                       TYPE symsg,
          lv_temp_record                TYPE symsgv,
          lv_create_record              TYPE symsgv,
          ob_message                    TYPE REF TO /bobf/cm_frw_symsg.

    CONSTANTS: c_seqno_record  TYPE kopos VALUE '01'.

    CREATE OBJECT ob_message.

    DATA(lv_error) = abap_false.

    CLEAR:lt_failed_key.

    IF cs_cndn_cds-conditionsequentialnumber = c_seqno_record.
      CLEAR: ls_condition_record, ls_condition_validity.
      MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_record.
      MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_validity.

      CLEAR ls_condition_record_text.
      MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_record_text.
      ls_condition_record_text-language = sy-langu.
      APPEND ls_condition_record_text TO lt_condition_record_text_u.

      convert_exit_input(
        EXPORTING
          is_input  = cs_cndn_cds                " #GENERATED#
        IMPORTING
          et_failed_key = lt_failed_key
        CHANGING
          cs_output = ls_condition_validity
          eif_message = eif_message
      ).

      APPEND LINES OF lt_failed_key TO et_failed_draft_key.
      IF lt_failed_key IS NOT INITIAL.
        RETURN. "CONTINUE.
      ENDIF.
      APPEND ls_condition_record TO lt_condition_record_u.
      APPEND ls_condition_validity TO lt_condition_validity_u.

      APPEND VALUE #( sign   = 'I'
                      option = 'EQ'
                      low    = cs_cndn_cds-conditionrecord )
          TO ls_cndnrecord_criteria_item-conditionrecord.

      APPEND VALUE #( sign   = 'I'
                      option = 'EQ'
                      low    = cs_cndn_cds-conditiontable )
          TO ls_cndnrecord_criteria_item-conditiontable.

      APPEND ls_cndnrecord_criteria_item TO lt_cndnrecord_criteria_item.
    ENDIF.

    " Add check for contract condition type
    IF cs_cndn_cds-conditiontable IS NOT INITIAL.
      check_contract(
        EXPORTING
          is_cndn_cds         = cs_cndn_cds
        IMPORTING
          eif_message          = eif_message
          et_failed_draft_key = et_failed_draft_key
      ).
      IF et_failed_draft_key IS NOT INITIAL.
        RETURN.
      ENDIF.
    ENDIF.

**Draft based on active
    IF lt_condition_record_u IS NOT INITIAL.

**Check ETag: in case of updating via UI and via SAPGUI at the same time
      ls_cndnrecord_criteria_header-deltdconditionrecordisexcluded = abap_true.
      TRY.
          CALL METHOD mif_sls_api->get_condition_record
            EXPORTING
              is_cndnrecord_criteria_header = ls_cndnrecord_criteria_header
              it_cndnrecord_criteria_item   = lt_cndnrecord_criteria_item
              is_cndnrecord_query_option    = ls_cndnrecord_query_option
            IMPORTING
              et_condition_validity_enh     = lt_condition_validity
              et_condition_record           = lt_condition_record
              et_condition_record_text      = DATA(lt_record_text)
              es_cndn_query_option_response = ls_cndn_query_option_response.
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex).
          CALL METHOD add_message
            EXPORTING
              ix_cndn_failed = lx_ex
            IMPORTING
              et_msg         = DATA(lt_msg).
          lv_error = abap_true.
      ENDTRY.

      IF lt_condition_validity IS INITIAL. "The conditionrecord + conditionvalidityenddate is deleted
        DATA(lv_db_changed) = abap_true.
      ELSE.
        DATA(lv_val_lines) = lines( lt_condition_validity ).
        "If one record has more than one validity, update directly
        IF lv_val_lines > 1.
          lt_condition_validity_u = lt_condition_validity.
        ELSE.
          "If one record has only one validity, check the Etag of current validity
          "with same end date (ls_keys-conditionvalidityenddate)
          LOOP AT lt_condition_validity ASSIGNING FIELD-SYMBOL(<fs_validity>).
            READ TABLE lt_condition_record ASSIGNING FIELD-SYMBOL(<fs_record>)
                                           WITH KEY conditionrecord = <fs_validity>-conditionrecord.
            IF sy-subrc = 0.
              MOVE-CORRESPONDING <fs_validity> TO ls_set.
              MOVE-CORRESPONDING <fs_record> TO ls_set.
              READ TABLE lt_record_text INTO DATA(ls_record_text) WITH KEY conditionrecord = <fs_validity>-conditionrecord
                                                                           language = sy-langu
                                                                           BINARY SEARCH.
              IF sy-subrc = 0.
                ls_set-conditiontext = ls_record_text-conditiontext.
              ENDIF.
              ls_set-conditionvalidityenddate = <fs_validity>-conditionvalidityenddate.
              ls_set-conditionvaliditystartdate = <fs_validity>-conditionvaliditystartdate.

              GET REFERENCE OF ls_set INTO DATA(lr_set).
              ls_set-etag = calculate_condition_etag( lr_set ).
              ls_set-conditionrecorduuid = |{ <fs_validity>-conditionrecord }| &
                                           |{ <fs_record>-conditionsequentialnumber }| &
                                           |{ <fs_validity>-conditionvalidityenddate }| .
              "Check ETag stored in draft entity (before DB image) equals to ETag of currenct DB data,
              "in case of someone change or delete the data via VK12.
              IF cs_cndn_cds-etag <> ls_set-etag. "The conditionrecord + conditionvalidityenddate is changed
                lv_db_changed = abap_true.
              ELSE.
                "Check ETag stored in draft entity (before DB image) equals to the Etag calculated by currennt draft change,
                "if they equal, it means that no change on the record, so no need to touch DB update
                CLEAR:ls_condition_validity,ls_condition_record.
                MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_validity.
                MOVE-CORRESPONDING cs_cndn_cds TO ls_condition_record.
                MOVE-CORRESPONDING ls_condition_validity TO ls_draft.
                MOVE-CORRESPONDING ls_condition_record TO ls_draft.
                ls_draft-conditiontext = cs_cndn_cds-conditiontext.
                GET REFERENCE OF ls_draft INTO DATA(lr_draft).
                TEST-SEAM calculate_draft_etag.
                  ls_draft-etag = calculate_condition_etag( lr_draft ).
                END-TEST-SEAM.
                IF cs_cndn_cds-etag = ls_draft-etag.
                  DATA(lv_no_change) = abap_true.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.

      IF lv_db_changed = abap_true.
        DELETE lt_condition_record_u WHERE conditionrecord = cs_cndn_cds-conditionrecord
                                       AND conditionsequentialnumber = cs_cndn_cds-conditionsequentialnumber.
        DELETE lt_condition_validity_u WHERE conditionrecord = cs_cndn_cds-conditionrecord
                                         AND conditionvalidityenddate = cs_cndn_cds-conditionvalidityenddate.
        MESSAGE e075(prcg_cndnrecord_api) WITH cs_cndn_cds-conditionrecord INTO DATA(lv_message).
        CLEAR:ls_msg.
        MOVE-CORRESPONDING sy TO ls_msg.
        "handle message for creating data overlapped with existing draft.
        LOOP AT mt_message INTO DATA(ls_message_4_overlap).
          ob_message ?= ls_message_4_overlap-message.
          IF ls_message_4_overlap-message->if_t100_message~t100key-msgid = 'PRCG_CNDNRECORD_API' AND
            ls_message_4_overlap-message->if_t100_message~t100key-msgno = '015'.
            lv_temp_record = ob_message->mv_attr2.
            lv_create_record = ob_message->mv_attr1.
          ENDIF.
          IF ls_message_4_overlap-message->if_t100_message~t100key-msgid = 'PRCG_CNDNRECORD_API' AND
          ls_message_4_overlap-message->if_t100_message~t100key-msgno = '014' AND
          ob_message->mv_attr2 = cs_cndn_cds-conditionrecord AND lv_create_record = ob_message->mv_attr1 .
            MESSAGE e014(prcg_cndnrecord_api) WITH lv_temp_record ob_message->mv_attr2 INTO lv_message.
            CLEAR:ls_msg.
            MOVE-CORRESPONDING sy TO ls_msg.
          ELSEIF ls_message_4_overlap-message->if_t100_message~t100key-msgid = 'PRCG_CNDNRECORD_API'
             AND ls_message_4_overlap-message->if_t100_message~t100key-msgno = '014'
             AND ob_message->mv_attr2 = cs_cndn_cds-conditionrecord.
            MESSAGE e014(prcg_cndnrecord_api) WITH ob_message->mv_attr1 ob_message->mv_attr2 INTO lv_message.
            CLEAR:ls_msg.
            MOVE-CORRESPONDING sy TO ls_msg.
          ENDIF.
        ENDLOOP.

        APPEND ls_msg TO lt_msg.

        LOOP AT lt_msg INTO ls_msg.
          eif_message->add_message( is_msg = ls_msg
                                   iv_node = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp
                                   iv_key  = cs_cndn_cds-key
                                   iv_lifetime = /bobf/cm_frw=>co_lifetime_transition
                                   ).
          IF ls_msg-msgty = 'E'.
            lv_error = abap_true.
          ENDIF.
        ENDLOOP.
      ELSEIF lv_no_change = abap_false.
        TRY.
            mif_sls_api->update_condition_record(
              IMPORTING
                et_message                 = lt_message_u
              CHANGING
                ct_condition_record        = lt_condition_record_u
                ct_condition_validity_enh  = lt_condition_validity_u
                ct_condition_record_text   = lt_condition_record_text_u
             ).
          CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
            CALL METHOD add_message
              EXPORTING
                ix_cndn_failed = lx_ex
              IMPORTING
                et_msg         = lt_msg.
            lv_error = abap_true.
        ENDTRY.

        LOOP AT lt_message_u ASSIGNING FIELD-SYMBOL(<fs_msg>).
          ls_msg-msgty = <fs_msg>-systemmessagetype.
          ls_msg-msgid = <fs_msg>-systemmessageidentification.
          ls_msg-msgno = <fs_msg>-systemmessagenumber.
          ls_msg-msgv1 = <fs_msg>-systemmessagevariable1.
          ls_msg-msgv2 = <fs_msg>-systemmessagevariable2.
          ls_msg-msgv3 = <fs_msg>-systemmessagevariable3.
          ls_msg-msgv4 = <fs_msg>-systemmessagevariable4.
          IF ls_msg-msgid = 'PRCG_CNDNRECORD_API' AND ( ls_msg-msgno = '014' OR ls_msg-msgno = '016' OR ls_msg-msgno = '017' ).
            IF ( ls_msg-msgno = '014' ).
              DATA(lv_conditionnumber) = ls_msg-msgv2.
            ELSE.
              lv_conditionnumber = ls_msg-msgv1.
            ENDIF.
            SELECT SINGLE conditionisdeleted FROM i_slsprcgconditionrecord
              INTO @DATA(lv_is_deleted)
             WHERE conditionrecord = @lv_conditionnumber. "#EC CI_SEL_NESTED
            IF sy-subrc <> 0 OR lv_is_deleted = abap_true.
              CONTINUE.
            ENDIF.
          ENDIF.
          IF ls_msg-msgid = 'VK' AND ls_msg-msgno = '495'.
            MESSAGE e077(prcg_cndnrecord_api) WITH cs_cndn_cds-conditionrecord INTO lv_message.
            CLEAR:ls_msg.
            MOVE-CORRESPONDING sy TO ls_msg.
          ENDIF.
* Handle scale amount not in upper/lower limit.
          IF ls_msg-msgid = 'VK' AND ls_msg-msgno = '079'.
            DELETE lt_msg WHERE msgid = ls_msg-msgid AND msgno = ls_msg-msgno AND
                                msgv1 = ls_msg-msgv1 AND msgv2 = ls_msg-msgv2.
            CLEAR ls_msg.
            ls_msg-msgty = 'E'.
            ls_msg-msgid = 'PRCG_CNDNRECORD_API'.
            ls_msg-msgno = '121'.
            ls_msg-msgv1 = <fs_msg>-conditionrecord.
          ENDIF.
          IF ls_msg-msgid = 'VK' AND ls_msg-msgno = '080'.
            DELETE lt_msg WHERE msgid = ls_msg-msgid AND msgno = ls_msg-msgno AND
                                msgv1 = ls_msg-msgv1 AND msgv2 = ls_msg-msgv2.
            CLEAR ls_msg.
            ls_msg-msgty = 'E'.
            ls_msg-msgid = 'PRCG_CNDNRECORD_API'.
            ls_msg-msgno = '120'.
            ls_msg-msgv1 = <fs_msg>-conditionrecord.
          ENDIF.
          overlap_message_date_format( CHANGING cs_msg = ls_msg ).

          convert_required_message( CHANGING cs_msg = ls_msg ).

          READ TABLE lt_msg WITH KEY msgid = ls_msg-msgid msgno = ls_msg-msgno
                                     msgv1 = ls_msg-msgv1 msgv2 = ls_msg-msgv2
                                     msgv3 = ls_msg-msgv3 msgv4 = ls_msg-msgv4 TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            APPEND ls_msg TO lt_msg.
          ENDIF.
        ENDLOOP.

        LOOP AT lt_msg INTO ls_msg.
          eif_message->add_message( is_msg = ls_msg
                                   iv_node = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp
                                   iv_key  = cs_cndn_cds-key
                                   iv_lifetime = /bobf/cm_frw=>co_lifetime_transition
                                   ).
          IF ls_msg-msgty = 'E'.
            lv_error = abap_true.
          ENDIF.
        ENDLOOP.
      ENDIF.

      IF eif_message IS BOUND AND eif_message->check( ) = abap_true.
        IF lv_error = abap_true.
          APPEND VALUE #( key = cs_cndn_cds-key ) TO et_failed_draft_key.
          mo_sadl_msg_handler->if_sadl_message_handler~clear( ).
        ENDIF.
      ELSE.
        IF lt_condition_record_u IS NOT INITIAL.
          CHECK et_key_link IS INITIAL.
          LOOP AT lt_condition_record_u INTO ls_condition_record.
            ls_link-active = CONV #( ls_condition_record-conditionrecord &&
                                     ls_condition_record-conditionsequentialnumber ). " &&
*                                       ls_condition_record-conditionvalidityenddate ).
            ls_link-draft = cs_cndn_cds-key.
            READ TABLE et_key_link TRANSPORTING NO FIELDS WITH KEY active = ls_link-active draft = ls_link-draft.
            IF sy-subrc NE 0.
              INSERT ls_link INTO TABLE et_key_link.
            ENDIF.

            "send workflow relates message to frontend
            IF is_result-selected = abap_true.
              MESSAGE i001(00) WITH 'SimulateWF:' ls_link-active '/' is_result-id  INTO DATA(lv_message_workflow). "Message without translation for parse in front-end .
              CLEAR:ls_msg.
              MOVE-CORRESPONDING sy TO ls_msg.
              eif_message->add_message(
              EXPORTING
                is_msg       = ls_msg       " Message that is to be added to the message object
                iv_node      = zif_i_slspricingconditionrec_c=>sc_node-zi_slspricingconditionrecordtp  " Node to be used in the origin location
                iv_key       = cs_cndn_cds-key       " Instance key to be used in the origin location
                iv_lifetime  = /bobf/cm_frw=>co_lifetime_transition  " Lifetime of the message
            ).
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.

    eif_message->get_messages(
      IMPORTING
        et_message              = DATA(lt_message)
    ).
    APPEND LINES OF lt_message TO mt_message.
  ENDMETHOD.
ENDCLASS.