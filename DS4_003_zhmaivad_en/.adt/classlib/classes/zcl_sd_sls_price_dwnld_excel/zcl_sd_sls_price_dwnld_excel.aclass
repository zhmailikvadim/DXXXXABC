class ZCL_SD_SLS_PRICE_DWNLD_EXCEL definition
  public
  final
  create public .

public section.

  types:
    BEGIN OF ty_header_desc,
        field_kind    TYPE char20,
        position      TYPE i,
        fieldname_raw TYPE fieldname_raw,
        fieldname_int TYPE fieldname,
        fieldname_ext TYPE fieldname,
        label         TYPE string,
      END OF ty_header_desc .
  types:
    tt_header_desc TYPE STANDARD TABLE OF ty_header_desc .
  types:
    tt_msg_log     TYPE STANDARD TABLE OF cndn_upld_msg .
  types:
    tt_template    TYPE STANDARD TABLE OF zi_slsprcgcndnrecdtemplate .
  types:
    BEGIN OF ty_contab,
        conditiontable TYPE kotabnr,
      END OF ty_contab .
  types:
    BEGIN OF ty_contype,
        conditiontype TYPE kschl,
      END OF ty_contype .
  types:
    tt_contype TYPE TABLE OF ty_contype .
  types TS_DATA type ZI_SLSPRCGCNDNRECDTEMPLATE .
  types:
    tt_data TYPE TABLE OF zi_slsprcgcndnrecdtemplate .

  types:
    tt_dd03nd TYPE TABLE OF dd03nd_v .
  types:
    BEGIN OF ty_label,
        fieldname_raw TYPE fieldname_raw,
        label         TYPE ddannotation_val,
      END OF ty_label .
  types:
    ty_label_t TYPE TABLE OF ty_label .
  types:
    BEGIN OF ty_kschl_s,
        kschl TYPE RANGE OF kschl,
      END OF ty_kschl_s .
  types:
    ty_kschl_t TYPE RANGE OF kschl .

  methods CONSTRUCTOR .
  methods DOWNLOAD
    importing
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IV_WHERE type STRING optional
    returning
      value(EV_CONTENT) type XSTRING .
  methods DOWNLOAD_LOG
    importing
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
    returning
      value(EV_CONTENT) type XSTRING .
  methods DOWNLOAD_TEMPLATE
    importing
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IV_WHERE type STRING optional
    returning
      value(EV_CONTENT) type XSTRING .
  PROTECTED SECTION.
private section.

  constants CV_CONDITIONTYPE type CHAR20 value 'CONDITIONTYPE' ##NO_TEXT.
  data CV_ACCESSNUMBER type CHAR40 value 'ACCESSNUMBEROFACCESSSEQUENCE' ##NO_TEXT.
  data CV_CONDITIONTABLE type CHAR20 value 'CONDITIONTABLE' ##NO_TEXT.
  data GV_BG_ROW type I .
  constants CV_TX_SE61 type DOKHL-OBJECT value 'IMPORT_TEMPLATE_PRICING' ##NO_TEXT.
  data MO_ACC type ref to IF_CT_ACCSEQ .
  data MO_PRCG_UTIL type ref to IF_CNDNRECORD_PUBLIC_UTILITY .
  data MO_SLS_API type ref to IF_SLSPRCG_CNDNRECD_API .
  data MO_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MO_COND_DEP type ref to IF_CND_MAINT_LTD_DEP .
  data MT_ACCESS_FIELDS type T682Z_T .
  data MT_DD03ND type TT_DD03ND .
  data MT_FIELD_LIST type DDFIELDS .
  data MT_HEADER_LIST type IF_SALV_EXPORT_APPENDIX=>YTS_CELL .
  data MT_MAPPING type IF_CNDNRECORD_PUBLIC_UTILITY=>TT_MAPPING_FIELDS .
  data MT_PRICE_FIELD type TT_HEADER_DESC .
  data MT_COND_KEY type TT_HEADER_DESC .
  data MV_CDSNAME type CHAR100 value 'ZI_SLSPRCGCNDNRECDTEMPLATE' ##NO_TEXT.
  data MV_TEMPLATE_FLAG type ABAP_BOOL .
  data MV_LOG_FLAG type ABAP_BOOL .
  constants MV_BEGINROW type CHAR20 value 'ConditionType' ##NO_TEXT.
  constants MV_SHEETNAME type CHAR20 value '''Condition Data''!$A$' ##NO_TEXT.
  constants:
    BEGIN OF gcs_sales_condition,
      validity_ddic_name             TYPE tabname VALUE 'ASLSPRCGCNDNVA',
      conditionvalidityenddate       TYPE fieldname VALUE 'CONDITIONVALIDITYENDDATE',
      conditionvaliditystartdate     TYPE fieldname VALUE 'CONDITIONVALIDITYSTARTDATE',
      conditionrecord                TYPE fieldname VALUE 'CONDITIONRECORD',
      conditiontable                 TYPE fieldname VALUE 'CONDITIONTABLE',
      conditionrecord_raw            TYPE fieldname_raw VALUE 'ConditionRecord',
      conditiontype_raw              TYPE fieldname_raw VALUE 'ConditionType',
      conditiontable_raw             TYPE fieldname_raw VALUE 'ConditionTable',
      conditionsequentialnumber_raw  TYPE fieldname_raw VALUE 'ConditionSequentialNumber',
      conditionscaleline_raw         TYPE fieldname_raw VALUE 'ConditionScaleLine',
      conditionvalidityenddate_raw   TYPE fieldname_raw VALUE 'ConditionValidityEndDate',
      conditionvaliditystartdate_raw TYPE fieldname_raw VALUE 'ConditionValidityStartDate',
      conditionquantity_raw          TYPE fieldname_raw VALUE 'ConditionQuantity',
      conditionquantityunit_raw      TYPE fieldname_raw VALUE 'ConditionQuantityUnit',
      conditionscalequantity_raw     TYPE fieldname_raw VALUE 'ConditionScaleQuantity',
      conditionscalequantityunit_raw TYPE fieldname_raw VALUE 'ConditionScaleQuantityUnit',
      conditionscaleamount_raw       TYPE fieldname_raw VALUE 'ConditionScaleAmount',
      conditionscaleamountcurr_raw   TYPE fieldname_raw VALUE 'ConditionScaleAmountCurrency',
      conditionscaleratevalue_raw    TYPE fieldname_raw VALUE 'ConditionScaleRateValue',
      conditionratevalue_raw         TYPE fieldname_raw VALUE 'ConditionRateValue',
      conditionratevalueunit_raw     TYPE fieldname_raw VALUE 'ConditionRateValueUnit',
      conditionlowerlimit_raw        TYPE fieldname_raw VALUE 'ConditionLowerLimit',
      conditionupperlimit_raw        TYPE fieldname_raw VALUE 'ConditionUpperLimit',
      accessnumberofaccessseq_raw    TYPE fieldname_raw VALUE 'AccessNumberOfAccessSequence',
      conditionisscale_raw           TYPE fieldname_raw VALUE 'ConditionIsScale',
      wbselementexternalid_raw       TYPE fieldname_raw VALUE 'WBSElementExternalID',
      wbselementinternalid_raw       TYPE fieldname_raw VALUE 'WBSElementInternalID',
      workpackage_raw                TYPE fieldname_raw VALUE 'WorkPackage',
      wbselementinternalid           TYPE fieldname VALUE 'WBSELEMENTINTERNALID',
      wbselementexternalid           TYPE fieldname VALUE 'WBSELEMENTEXTERNALID',
      workpackage                    TYPE fieldname VALUE 'WORKPACKAGE',
      wbs_related_initial            TYPE ps_posnr  VALUE '00000000',
      personnel_raw                  TYPE fieldname_raw VALUE 'Personnel',
      filterstring                   TYPE string VALUE 'FilterString',
      sorterstring                   TYPE string VALUE 'SorterString',
      textflag                       TYPE string VALUE 'TextFlag',
      percentage                     TYPE string VALUE 'AHIKJW',
      fixedvaluedate_raw             TYPE fieldname_raw VALUE 'FixedValueDate',
      additionalvaluedays_raw        TYPE fieldname_raw VALUE 'AdditionalValueDays',
    END OF gcs_sales_condition .
  constants:
    BEGIN OF gcs_xml_element,
      item_ns_s                TYPE string VALUE 's',
      item_ns_r                TYPE string VALUE 'r',
      item_ns_activecell       TYPE string VALUE 'activeCell',
      item_ns_alignwithmargins TYPE string VALUE 'alignWithMargins',
      item_ns_defaultrowheight TYPE string VALUE 'defaultRowHeight',
    END OF gcs_xml_element .
  data MT_ITEM type IF_CNDNRECORD_PUBLIC_UTILITY=>TY_CNDNRECD_CRITERIA_ITEM_T .
  data MT_CONTYPE type TT_CONTYPE .
  data MT_LABEL type TY_LABEL_T .
  constants CV_FIELD_LIST type STRING value 'Field List' ##NO_TEXT.
  constants CV_CONDITION_DATA type STRING value 'Condition Data' ##NO_TEXT.
  constants CV_COMBINATION_LIST type STRING value 'Condition Type Key Combination List.' ##NO_TEXT.
  constants CV_CONDITION_DETAILS type STRING value 'Condition Details' ##NO_TEXT.
  constants CV_KEY type STRING value 'Key' ##NO_TEXT.
  constants CV_CONDITION_KEY type STRING value 'Condition Key' ##NO_TEXT.
  constants CV_CONDITION_SCALE type STRING value 'Condition Scale' ##NO_TEXT.
  data MT_HEADER_TMP_LIST type IF_SALV_EXPORT_APPENDIX=>YTS_CELL .
  data MT_ENTITYSET type TT_TEMPLATE .
  data MT_ANNO_ELEMENT type CL_DD_DDL_ANNOTATION_SERVICE=>TY_T_ELMNT_ANNO_VAL_SRC_DTEL .
  data MV_TEXT_FLAG type BOOLEAN value ABAP_FALSE ##NO_TEXT.
  data MT_FIELDS type CL_CND_MAINT_LTD_API=>TY_VKON_COND_RECORD_T .

  methods CONVERT_GFN_TO_LABEL
    importing
      !IV_SYMSGV type SYMSGV
    returning
      value(RV_LABEL) type DDANNOTATION_VAL .
  methods FILL_REMARKS
    importing
      !IV_FIELDNAME_RAW type FIELDNAME_RAW
    returning
      value(RV_REMARKS) type STRING .
  methods FORMAT_FIELD_VALUE
    importing
      !IS_HEADER type TY_HEADER_DESC
      !IS_LINEITEMS type TS_DATA
    changing
      !CV_FORMAT_VALUE type CHAR50 .
  methods MAP_FIELD_LIST_TYPE
    importing
      !IT_DFIES type DDFIELDS
      !IV_FIELDNAME_INT type FIELDNAME
      !IV_FIELDNAME_EXT type FIELDNAME .
  methods FILL_ATTRIBUTES_OF_FIELDS
    importing
      !IV_BEGIN_ROW type I
      !IT_HEADER type TT_HEADER_DESC
    returning
      value(RT_CELLS) type IF_SALV_EXPORT_APPENDIX=>YTS_CELL .
  methods FILL_HEADER_OF_FIELDS
    importing
      !IV_BEGIN_ROW type I
    returning
      value(RT_CELLS) type IF_SALV_EXPORT_APPENDIX=>YTS_CELL .
  methods GET_LABEL
    importing
      !IV_FIELDNAME_RAW type FIELDNAME_RAW
    returning
      value(RV_LABEL) type DDANNOTATION_VAL .
  methods GET_ITEM_OPTION
    importing
      !IV_FILTERSTRING type STRING optional
      !IV_WHERE type STRING optional
    exporting
      !ET_ITEM type IF_CNDNRECORD_PUBLIC_UTILITY=>TY_CNDNRECD_CRITERIA_ITEM_T
      !ET_CONTYPE type TT_CONTYPE .
  methods ADD_TEMPLATE_2_DOWNLOAD
    importing
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IV_WHERE type STRING optional
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
    exporting
      !ET_CELLS type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
      !ET_DATA_TEMP type TT_DATA
      !EV_BG_ROW type I .
  methods CONVERT_2_XSTRING_TEMPLATE
    importing
      !IT_DATA type TT_DATA optional
      !IR_DATA type DATA optional
      !IT_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
    exporting
      !EV_CONTENT type XSTRING .
  methods CONVERT_XSLX_TO_XSTRING
    importing
      !IT_DATA type TT_DATA optional
      !IT_DATA_TEMP type TT_DATA optional
      !IR_DATA type DATA optional
      !IT_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
    exporting
      !EV_CONTENT type XSTRING .
  methods CONVERT_INTERNAL_2_EXTERNAL
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T .
  methods FORMAT_SHEET_FIELD
    importing
      !IR_PARTS type ref to CL_OPENXML_PARTCOLLECTION
      !IR_XLSX_DOC type ref to CL_XLSX_DOCUMENT .
  methods FORMAT_TEMPLATE
    importing
      !IT_DATA type TT_DATA
      !IV_CELL_VALUE type STRING
    changing
      !IR_ROOT_ROW type ref to IF_IXML_NODE .
  methods FORMAT_CELLS_2_DATE
    importing
      !IR_NODE type ref to CL_XML_DOCUMENT
      !IR_NODE_DATA type ref to CL_XML_DOCUMENT
      !IT_DATA type TT_DATA
    changing
      !CR_SHEETPART type ref to CL_OPENXML_PART .
  methods GET_ALL_FIELDS_CDS
    exporting
      !ET_CONDITION_KEY type TT_HEADER_DESC .
  methods GET_CONDITION
    importing
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IV_WHERE type STRING optional
    exporting
      !ET_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T
      !ET_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !ET_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !ET_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !ES_CNDN_QUERY_OPTION_RESPONSE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_QUERY_OPTION_RESPONSE_S
      !ET_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T
      !ET_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T .
*      !ET_VALIDITY_MSG type TT_VALIDITY_MSG .
  methods GET_CONDITION_KEY
    importing
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
    exporting
      !ET_CONDITION_KEY type TT_HEADER_DESC .
  methods GET_COND_KEY_FOR_TEMPLATE
    importing
      !IV_KSCHL type KSCHL optional
      !IT_KSCHL type TY_KSCHL_T optional
    exporting
      !ET_CONDITION_KEY type TT_HEADER_DESC .
  methods GET_NTH_CHILD
    importing
      !IO_NODE type ref to IF_IXML_NODE
      !IV_N type INT4
    returning
      value(RO_NODE) type ref to IF_IXML_NODE .
  methods SET_HEADER
    importing
      !IV_ISLOG type ABAP_BOOL optional
      !IT_CONDITION_KEY type TT_HEADER_DESC
      !IV_RKEY type ABAP_BOOL optional
    exporting
      !ET_CELL type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
      !ET_HEADER type TT_HEADER_DESC .
  methods SET_HEADER_TEMPLATE
    importing
      !IT_CONDITION_KEY type TT_HEADER_DESC
    exporting
      !ET_CELL type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
      !ET_HEADER type TT_HEADER_DESC .
*      !IT_VALIDITY_MSG type TT_VALIDITY_MSG optional
  methods SET_VALUES
    importing
      !IT_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
      !IT_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !IT_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T optional
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_HEADER type TT_HEADER_DESC
      !IT_CELL_HEADER type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
      !IT_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T optional
      !IT_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T optional
    exporting
      !ET_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
      !ET_DATA type TT_DATA .
  methods SET_VALUES_TO_LOG
    importing
      !IT_HEADER type TT_HEADER_DESC
      !IT_CELL_HEADER type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
      !IT_UPLD_MSG type TT_MSG_LOG
    exporting
      !ET_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
      !ET_DATA type TT_DATA .
  methods SET_VALUES_TO_SHEET_FIELD
    importing
      !IT_HEADER type TT_HEADER_DESC
    returning
      value(RT_CELLS) type IF_SALV_EXPORT_APPENDIX=>YTS_CELL .
  methods SET_VALUES_TO_TEMPLATE
    importing
      !IT_CONDTYPE type IF_CNDNRECORD_PUBLIC_UTILITY=>TY_CNDNRECD_CRITERIA_ITEM_T optional
      !IT_HEADER type TT_HEADER_DESC
      !IT_CELL_HEADER type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
    exporting
      !ET_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
      !ET_DATA type TT_DATA .
  methods MERGE_CELLS
    importing
      !IT_BLOCKS type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK
      !IT_CELLS type IF_SALV_EXPORT_APPENDIX=>YTS_CELL
    returning
      value(ET_BLOCKS) type IF_SALV_EXPORT_APPENDIX=>YTS_BLOCK .
  methods GET_TEXT
    importing
      !IT_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
    exporting
      !ET_ANNO_ELEMENT type CL_DD_DDL_ANNOTATION_SERVICE=>TY_T_ELMNT_ANNO_VAL_SRC_DTEL .
  methods ADD_TEXT_TO_HEADER
    changing
      !CT_CONDITION_KEY type TT_HEADER_DESC .
  methods ADD_MAPPING_CUSTOM_FIELD
    changing
      !CT_MAPPING_FIELDS type IF_CNDNRECORD_PUBLIC_UTILITY=>TT_MAPPING_FIELDS .
ENDCLASS.



CLASS ZCL_SD_SLS_PRICE_DWNLD_EXCEL IMPLEMENTATION.


  METHOD SET_VALUES_TO_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_lineitems          TYPE ts_data,
          lt_lineitems          TYPE TABLE OF ts_data,
          ls_cell               TYPE if_salv_export_appendix=>ys_cell,
          ls_block              TYPE if_salv_export_appendix=>ys_block,
          lt_cell_all           TYPE if_salv_export_appendix=>yts_cell,
          lv_bgcolor_value_gray TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFD0CECE', "RGB: 208, 206, 206
          lv_column_index       TYPE i,
          lv_row_index          TYPE i VALUE 3,
          lr_condtype           TYPE RANGE OF kschl,
          lv_string             TYPE string.

    lt_cell_all = it_cell_header.
    "4th line more: Values
    lv_row_index =  3.

    LOOP AT it_condtype INTO DATA(ls_condtype).
      READ TABLE ls_condtype-conditiontype INTO DATA(ls_type) WITH KEY sign = 'E'.
      APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_type-low ) TO lr_condtype.
    ENDLOOP.

    "Get AccessNumberOfAccessSequences
    IF lr_condtype IS NOT INITIAL.
      SELECT t685~kschl, t682i~kvewe, t682i~kappl, t682i~kozgf, t682i~kotabnr, t682i~kolnr
            INTO TABLE @DATA(lt_t682i)
            FROM t682i
           INNER JOIN t685                             "#EC CI_BUFFJOIN
              ON t682i~kvewe = t685~kvewe
             AND t682i~kappl = t685~kappl
             AND t682i~kozgf = t685~kozgf
           WHERE t685~kvewe = @if_ct_constants=>c_usage_pricing
             AND t685~kappl = @if_ct_constants=>c_application_sales
             AND t685~kschl IN @lr_condtype.
    ENDIF.

    SORT lt_t682i BY kschl kolnr kotabnr.
    LOOP AT lt_t682i INTO DATA(ls_t682i).
      ls_lineitems-conditiontype = ls_t682i-kschl.
      ls_lineitems-conditiontable = ls_t682i-kotabnr.
      ls_lineitems-accessnumberofaccesssequence = ls_t682i-kolnr.

      lv_row_index = lv_row_index + 1.
      lv_column_index = 0.

      LOOP AT it_header INTO DATA(ls_hdr).
        ASSIGN COMPONENT ls_hdr-fieldname_raw OF STRUCTURE ls_lineitems TO FIELD-SYMBOL(<fs_field>).
        lv_column_index = ls_hdr-position.
        DATA(lv_bgcolor_value) = lv_bgcolor_value_gray.
        IF sy-subrc = 0 AND <fs_field> IS ASSIGNED.
          lv_string = <fs_field>.
          IF NOT ( ls_hdr-fieldname_raw = gcs_sales_condition-accessnumberofaccessseq_raw
                OR ls_hdr-fieldname_raw = gcs_sales_condition-conditiontype_raw
                OR ls_hdr-fieldname_raw = gcs_sales_condition-conditiontable_raw ).
            CLEAR:lv_string.
          ENDIF.
          ls_cell = VALUE #( row_index = lv_row_index
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color     = lv_bgcolor_value
                                                 is_bold              = abap_false
                                                 horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = lv_string ).

          APPEND ls_cell TO lt_cell_all.
        ELSE.
          ls_cell = VALUE #( row_index = lv_row_index
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color     = lv_bgcolor_value
                                                 is_bold              = abap_false
                                                 horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         ).

          APPEND ls_cell TO lt_cell_all.
        ENDIF.

      ENDLOOP .
      APPEND ls_lineitems TO lt_lineitems.

    ENDLOOP.

    ls_block = VALUE #( ordinal_number = 1
               location = if_salv_export_appendix=>cs_appendix_location-top
               cells = lt_cell_all ).
    APPEND ls_block TO et_blocks.

    et_data = lt_lineitems.

  ENDMETHOD.


  METHOD SET_VALUES_TO_SHEET_FIELD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA(lv_begin_row) = 7.
    APPEND LINES OF fill_header_of_fields( lv_begin_row ) TO rt_cells.

    "5st line: Fill Data
    SORT me->mt_field_list BY fieldname.
    DATA(lt_head) = it_header.
    DELETE lt_head WHERE fieldname_raw = TEXT-016 OR fieldname_raw = 'ETag'.
    fill_attributes_of_fields(
      EXPORTING
        iv_begin_row = lv_begin_row
        it_header    = lt_head
      RECEIVING
        rt_cells     = DATA(lt_cells_attr)
    ).
    APPEND LINES OF lt_cells_attr TO rt_cells.
  ENDMETHOD.


  METHOD SET_VALUES_TO_LOG.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_lineitems          TYPE ts_data,
          lt_lineitems          TYPE TABLE OF ts_data,
          ls_cell               TYPE if_salv_export_appendix=>ys_cell,
          ls_block              TYPE if_salv_export_appendix=>ys_block,
          lt_cell_all           TYPE if_salv_export_appendix=>yts_cell,
          lv_bgcolor_value_gray TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFD0CECE', "RGB: 208, 206, 206
          lv_column_index       TYPE i,
          lv_row_index          TYPE i VALUE 3,
          ls_filter_db          TYPE bal_s_lfil,
          ls_lognumber          TYPE bal_s_logn,
          lv_msg_result         TYPE string,
          lv_format_value       TYPE char50,
          lt_all_fields         TYPE if_cnd_maint_ltd_types=>ty_fnamevalue_t.

    "Set values
    lv_row_index =  lv_row_index + 1.
    lt_cell_all = it_cell_header.

    DATA(lr_log) = cl_condition_record_logger=>get_instance( ).

    "Rows
    LOOP AT it_upld_msg INTO DATA(ls_upld_msg).
      CLEAR ls_lineitems.
      ls_lineitems-conditiontype                = ls_upld_msg-kschl.
      ls_lineitems-conditiontable               = ls_upld_msg-kotabnr.
      ls_lineitems-accessnumberofaccesssequence = ls_upld_msg-kolnr.
      ls_lineitems-conditionsequentialnumber    = ls_upld_msg-kopos.
      ls_lineitems-conditionisscale             = ls_upld_msg-kostkz.
      ls_lineitems-conditionquantity            = ls_upld_msg-kpein.
      ls_lineitems-conditionquantityunit        = ls_upld_msg-kmein.

      IF ls_lineitems-conditionisscale = 'X'.

        data(ls_685a) = mo_cond_dep->get_t685a( EXPORTING iv_kappl = if_ct_constants=>c_application_sales
                                                       iv_kschl = ls_lineitems-conditiontype ).

        ls_lineitems-pricingscalebasis            = ls_685a-kzbzg.
        ls_lineitems-conditionscalequantity       = ls_upld_msg-kstbm.
        ls_lineitems-conditionscalequantityunit   = ls_upld_msg-konms.
        ls_lineitems-conditionscaleamount         = ls_upld_msg-kstbw.
        ls_lineitems-conditionscaleamountcurrency = ls_upld_msg-konws.
        ls_lineitems-conditionratevalue           = ls_upld_msg-kbetr.
        ls_lineitems-conditionratevalueunit       = ls_upld_msg-konwa.

      ELSE.
        ls_lineitems-conditionratevalue     = ls_upld_msg-kbetr.
        ls_lineitems-conditionratevalueunit = ls_upld_msg-konwa.
        ls_lineitems-conditionlowerlimit    = ls_upld_msg-mxwrt.
        ls_lineitems-conditionupperlimit    = ls_upld_msg-gkwrt.
        ls_lineitems-conditiontext          = ls_upld_msg-vtext.
        ls_lineitems-paymentterms           = ls_upld_msg-zterm.
        ls_lineitems-fixedvaluedate         = ls_upld_msg-valdt.
        ls_lineitems-additionalvaluedays    = ls_upld_msg-valtg.
      ENDIF.

      "Get Vakey
      DATA(lr_maint) = cl_cnd_maint_ltd_util=>get_instance( ).
      DATA(ls_a000)  = VALUE a000(  kappl = CONV kappl('V')
                                    kschl = ls_upld_msg-kschl
                                    vakey = ls_upld_msg-vakey
                                    datbi = ls_upld_msg-datbi
                                    datab = ls_upld_msg-datab
                                    vadat = ls_upld_msg-vadat
                                    knumh = ls_upld_msg-knumh ).
      "VAKEY to fields
      lr_maint->map_vakeydat_to_keydata_fields(
        EXPORTING
          iv_kvewe       = CONV kvewe('A')
          iv_kotabnr     = ls_upld_msg-kotabnr
          is_a000        = ls_a000
        IMPORTING
          et_key_fields  = DATA(et_key_fields)
          et_data_fields = DATA(et_data_fields)
      ).

      APPEND LINES OF et_key_fields  TO lt_all_fields.
      APPEND LINES OF et_data_fields TO lt_all_fields.

      "Columns
      LOOP AT it_header INTO DATA(ls_header).

        lv_column_index = ls_header-position.
        DATA(lv_bgcolor_value) = lv_bgcolor_value_gray.

        ASSIGN COMPONENT ls_header-fieldname_int OF STRUCTURE ls_upld_msg TO FIELD-SYMBOL(<fs_field>).
        IF sy-subrc = 0 AND <fs_field> IS ASSIGNED.

          lv_format_value = <fs_field>.
          format_field_value(
            EXPORTING
              is_header       = ls_header
              is_lineitems    = ls_lineitems
            CHANGING
              cv_format_value = lv_format_value
          ).

          ls_cell = VALUE #( row_index = lv_row_index
                             column_index = lv_column_index
                             row_span = 0
                             column_span = 0
                             content_type = if_salv_export_appendix=>cs_cell_content_type-text
                             formatting   = VALUE #( background_color     = lv_bgcolor_value
                                                     is_bold              = abap_false
                                                     horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                             value = lv_format_value ).

        ELSE.
          "Set VAKEY 2 field
          READ TABLE lt_all_fields INTO DATA(ls_all_fields) WITH KEY fieldname = ls_header-fieldname_int.
          lv_format_value = ls_all_fields-fieldvalue.
          IF ls_header-fieldname_raw = gcs_sales_condition-wbselementinternalid_raw
            OR ls_header-fieldname_raw = gcs_sales_condition-workpackage_raw.
            IF lv_format_value = '00000000'.
              CLEAR lv_format_value.
            ELSE.
              DATA:lv_ps_posid TYPE ps_posid,
                   lv_ps_posnr TYPE ps_posnr.
              lv_ps_posnr = lv_format_value.
              CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
                EXPORTING
                  input  = lv_ps_posnr
                IMPORTING
                  output = lv_ps_posid.
              lv_format_value = lv_ps_posid.
            ENDIF.
          ENDIF.

          IF ls_header-fieldname_raw = gcs_sales_condition-personnel_raw.
            IF lv_format_value = '00000000'.
              CLEAR lv_format_value.
            ENDIF.
          ENDIF.

          IF ls_header-fieldname_int = 'CONDITION_IS_SCALE'.
            lv_format_value = ls_lineitems-conditionisscale.
          ENDIF.

          IF ls_header-fieldname_int = 'KONPKONMS'.
            lv_format_value = ls_lineitems-conditionscalequantityunit.
          ENDIF.

          IF ls_header-fieldname_int = 'KSTBW'.
            lv_format_value = ls_lineitems-conditionscaleamount.
          ENDIF.

          IF ls_header-fieldname_int = 'KONPKONWS'.
            lv_format_value = ls_lineitems-conditionscaleamountcurrency.
          ENDIF.

          IF ls_header-fieldname_int = 'KBETR_SCALE'.
            lv_format_value = ls_lineitems-conditionscaleratevalue.
            format_field_value(
              EXPORTING
                is_header       = ls_header
                is_lineitems    = ls_lineitems
              CHANGING
                cv_format_value = lv_format_value
            ).
          ENDIF.

          IF ls_header-fieldname_int = 'KONPKPEIN'.
            lv_format_value = ls_lineitems-conditionquantity.
          ENDIF.

          IF ls_header-fieldname_int = 'KONPKMEIN'.
            lv_format_value = ls_lineitems-conditionquantityunit.
          ENDIF.

          ls_cell = VALUE #( row_index = lv_row_index
                             column_index = lv_column_index
                             row_span = 0
                             column_span = 0
                             content_type = if_salv_export_appendix=>cs_cell_content_type-text
                             formatting   = VALUE #( background_color     = lv_bgcolor_value
                                                     is_bold              = abap_false
                                                     horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                             value = lv_format_value ).
          CLEAR : ls_all_fields.
        ENDIF.

        "Get messages
        IF ls_header-fieldname_raw EQ 'Message'.

          lr_log->read_msg_fast(
            EXPORTING
              iv_lognumber = ls_upld_msg-log_no                 " Application Log: Log filter criteria
            IMPORTING
              et_message   = DATA(lt_ret_msg)                " Application Log: Message Data
          ).

          LOOP AT lt_ret_msg INTO DATA(ls_ret_msg) WHERE msgty <> 'S'.
            ls_ret_msg-msgv1 = convert_gfn_to_label( CONV #( ls_ret_msg-msgv1 ) ).
            ls_ret_msg-msgv2 = convert_gfn_to_label( CONV #( ls_ret_msg-msgv2 ) ).
            ls_ret_msg-msgv3 = convert_gfn_to_label( CONV #( ls_ret_msg-msgv3 ) ).
            ls_ret_msg-msgv4 = convert_gfn_to_label( CONV #( ls_ret_msg-msgv4 ) ).
            MESSAGE ID ls_ret_msg-msgid TYPE ls_ret_msg-msgty NUMBER ls_ret_msg-msgno
              INTO DATA(lv_msg)
              WITH ls_ret_msg-msgv1 ls_ret_msg-msgv2 ls_ret_msg-msgv3 ls_ret_msg-msgv4.
            lv_msg_result = COND #( WHEN lv_msg_result IS NOT INITIAL THEN lv_msg_result && '|' && lv_msg ELSE lv_msg ).
          ENDLOOP.

          ls_cell = VALUE #( row_index = lv_row_index
                             column_index = lv_column_index
                             row_span = 0
                             column_span = 0
                             content_type = if_salv_export_appendix=>cs_cell_content_type-text
                             formatting   = VALUE #( background_color     = lv_bgcolor_value
                                                     is_bold              = abap_false
                                                     horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                             value = lv_msg_result ).

          CLEAR : lt_ret_msg[],lv_msg_result.
        ENDIF.

        APPEND ls_cell TO lt_cell_all.
      ENDLOOP.

      APPEND ls_lineitems TO lt_lineitems.
      lv_row_index = lv_row_index + 1.

      CLEAR: et_key_fields[],et_data_fields[],lt_all_fields[].
    ENDLOOP.

    ls_block = VALUE #( ordinal_number = 1 "
                        location = if_salv_export_appendix=>cs_appendix_location-top
                        cells = lt_cell_all ).
    APPEND ls_block TO et_blocks.
    et_data = lt_lineitems.

    FREE: lr_log.

  ENDMETHOD.


  METHOD SET_VALUES.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_lineitems          TYPE TABLE OF ts_data,
          ls_lineitems          TYPE ts_data,
          ls_lines              TYPE ts_data,
          ls_block              TYPE if_salv_export_appendix=>ys_block,
          lt_cell_data          TYPE if_salv_export_appendix=>yts_cell,
          ls_cell               TYPE if_salv_export_appendix=>ys_cell,
          lv_bgcolor_value_gray TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFD0CECE', "RGB: 208, 206, 206
          lv_column_index       TYPE i,
          lv_row_index          TYPE i VALUE 3,
          lv_string             TYPE string,
          lv_format_value       TYPE char50.

    lt_cell_data = it_cell_header.
    "4th line more: Values

    lv_row_index =  REDUCE #( INIT x = 0 FOR ls_cell_header IN it_cell_header
                              NEXT x = nmax( val1 = x val2 = ls_cell_header-row_index ) ).

    LOOP AT it_validity INTO DATA(ls_validity).
      CLEAR:ls_lineitems.
      READ TABLE it_record INTO DATA(ls_record) WITH KEY conditionrecord = ls_validity-conditionrecord BINARY SEARCH.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.

      MOVE-CORRESPONDING ls_record TO ls_lineitems.
      MOVE-CORRESPONDING ls_validity TO ls_lineitems.

      READ TABLE it_record_text INTO DATA(ls_record_text) WITH KEY conditionrecord = ls_validity-conditionrecord language = sy-langu.
      IF sy-subrc = 0.
        ls_lineitems-conditiontext = ls_record_text-conditiontext.
      ENDIF.

      APPEND ls_lineitems TO lt_lineitems.
      "Scale
      LOOP AT it_scale INTO DATA(ls_scale) WHERE conditionrecord           = ls_lineitems-conditionrecord
                                             AND conditionsequentialnumber = ls_lineitems-conditionsequentialnumber.
        ls_lines = CORRESPONDING #( BASE ( ls_lineitems ) ls_scale ).
        ls_lines-conditionscaleratevalue = ls_lineitems-conditionratevalue.
        ls_lines-conditionisscale = abap_true.
        APPEND ls_lines TO lt_lineitems.
        CLEAR: ls_lines.
      ENDLOOP.

      "supplement
      LOOP AT it_supplement INTO DATA(ls_supplement) WHERE conditionrecord = ls_validity-conditionrecord.
        CLEAR: ls_lineitems.
        MOVE-CORRESPONDING ls_validity TO ls_lineitems.
        MOVE-CORRESPONDING ls_supplement TO ls_lineitems.

        ls_lineitems-conditionvaliditystartdate = ls_validity-conditionvaliditystartdate.
        ls_lineitems-conditionvalidityenddate = ls_validity-conditionvalidityenddate.
        READ TABLE it_supplement_text INTO DATA(ls_supplement_text) WITH KEY conditionrecord           = ls_lineitems-conditionrecord
                                                                             conditionsequentialnumber = ls_lineitems-conditionsequentialnumber
                                                                             language = sy-langu.
        IF sy-subrc = 0.
          ls_lineitems-conditiontext = ls_supplement_text-conditiontext.
        ENDIF.
        APPEND ls_lineitems TO lt_lineitems.
        "Scale
        LOOP AT it_scale INTO ls_scale WHERE conditionrecord           = ls_lineitems-conditionrecord
                                         AND conditionsequentialnumber = ls_lineitems-conditionsequentialnumber.
          ls_lines = CORRESPONDING #( BASE ( ls_lineitems ) ls_scale ).
          ls_lines-conditionscaleratevalue = ls_lineitems-conditionratevalue.
          ls_lines-conditionisscale = abap_true.
          APPEND ls_lines TO lt_lineitems.
          CLEAR: ls_lines.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.

    LOOP AT lt_lineitems INTO ls_lineitems.
      lv_row_index = lv_row_index + 1.
      lv_column_index = 0.

      READ TABLE mt_entityset WITH KEY conditionrecord = ls_lineitems-conditionrecord INTO DATA(ls_entityset).

      LOOP AT it_header INTO DATA(ls_hdr).
        ASSIGN COMPONENT ls_hdr-fieldname_raw OF STRUCTURE ls_lineitems TO FIELD-SYMBOL(<fs_field>).
        IF sy-subrc = 0 AND <fs_field> IS ASSIGNED AND <fs_field> IS NOT INITIAL.
          lv_format_value = <fs_field>.
          format_field_value(
            EXPORTING
              is_header       = ls_hdr
              is_lineitems    = ls_lineitems
            CHANGING
              cv_format_value = lv_format_value
          ).

          lv_column_index = ls_hdr-position.
          DATA(lv_bgcolor_value) = lv_bgcolor_value_gray.

          ls_cell = VALUE #( row_index = lv_row_index
                             column_index = lv_column_index
                             row_span = 0
                             column_span = 0
                             content_type = if_salv_export_appendix=>cs_cell_content_type-text
                             formatting   = VALUE #( background_color = lv_bgcolor_value
                                                     is_bold          = abap_false
                                                 horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                             value = lv_format_value ).
          APPEND ls_cell TO lt_cell_data.
        ELSE.
          ASSIGN COMPONENT ls_hdr-fieldname_raw OF STRUCTURE ls_entityset TO FIELD-SYMBOL(<fs_field_name>).
          IF sy-subrc = 0 AND <fs_field_name> IS ASSIGNED.
            lv_format_value = <fs_field_name>.
            format_field_value(
              EXPORTING
                  is_header       = ls_hdr
                  is_lineitems    = ls_lineitems
              CHANGING
                  cv_format_value = lv_format_value
            ).

            lv_column_index = ls_hdr-position.
            lv_bgcolor_value = lv_bgcolor_value_gray.

            ls_cell = VALUE #( row_index = lv_row_index
                               column_index = lv_column_index
                               row_span = 0
                               column_span = 0
                               content_type = if_salv_export_appendix=>cs_cell_content_type-text
                               formatting   = VALUE #( background_color = lv_bgcolor_value
                                                       is_bold          = abap_false
                                                   horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                               value = lv_format_value ).
            APPEND ls_cell TO lt_cell_data.
          ELSE.
            lv_column_index = lv_column_index + 1.
            ls_cell = VALUE #( row_index = lv_row_index
                   column_index = lv_column_index
                   row_span = 0
                   column_span = 0
                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                   formatting   = VALUE #( background_color = lv_bgcolor_value
                                           is_bold          = abap_false
                                       horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                    ).
            APPEND ls_cell TO lt_cell_data.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    "Sheet 1: Field Name


    DATA(lt_cell_field) = me->set_values_to_sheet_field( EXPORTING it_header = it_header ).
    ls_block = VALUE #( ordinal_number = 1
                        location =  if_salv_export_appendix=>cs_appendix_location-top

                        cells = lt_cell_field ).
    APPEND ls_block TO et_blocks.

    "Sheet 2: Condition Data

    ls_block = VALUE #( ordinal_number = 2
                   location = if_salv_export_appendix=>cs_appendix_location-new_sheet
                   name = cv_condition_data "Condition Data
                   cells = lt_cell_data ).
    APPEND ls_block TO et_blocks.

    et_data = lt_lineitems.

  ENDMETHOD.


  METHOD SET_HEADER_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lv_column_span_key     TYPE i,
          lv_column_span_details TYPE i,
          lv_column_span_scale   TYPE i,
          lv_row_category        TYPE i VALUE 1,
          lv_row_label           TYPE i VALUE 2,
          lv_row_gfn             TYPE i VALUE 3,
          lv_column_index_1      TYPE i VALUE 1,
          lv_column_span_con_key TYPE i,
          ls_cell                TYPE if_salv_export_appendix=>ys_cell,
          lt_cell_label          TYPE if_salv_export_appendix=>yts_cell,
          lt_cell_gfn            TYPE if_salv_export_appendix=>yts_cell,
          lt_cell_all            TYPE if_salv_export_appendix=>yts_cell,
          lt_hdr_field           TYPE TABLE OF ty_header_desc,
          lv_bgcolor_conkey      TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFF8CBAD', "RGB: 248, 203, 173
          lv_bgcolor_key         TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFF4B084', "RGB: 244, 176, 132
          lv_bgcolor_details     TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFCE4D6', "RGB: 252, 228, 214
          lv_bgcolor_scale       TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFD9E1F2', "RGB: 217, 225, 242
          lv_bgcolor_gfn         TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFE699',
          "first and second rows is header fields (label, structure_name)
          lv_column_index        TYPE i.

    lv_column_span_con_key = lines( it_condition_key ).

    LOOP AT me->mt_price_field INTO DATA(ls_price_field).
      IF ls_price_field-field_kind = TEXT-017 OR ls_price_field-field_kind = me->cv_key.
        lv_column_span_key = lv_column_span_key + 1.
      ELSEIF ls_price_field-field_kind = TEXT-019 OR ls_price_field-field_kind = me->cv_condition_details.
        lv_column_span_details = lv_column_span_details + 1.
      ELSEIF ls_price_field-field_kind = TEXT-020 OR ls_price_field-field_kind = me->cv_condition_scale.
        lv_column_span_scale = lv_column_span_scale + 1.
      ENDIF.
    ENDLOOP.

    "1st line: Condition Key, Key, Condition details, Condition Scale
    lv_column_index = lv_column_index_1.
    ls_cell = VALUE #(
                       row_index    = lv_row_category
                       column_index = lv_column_index
                       row_span     = 0
                       column_span  = lv_column_span_con_key
                       content_type = if_salv_export_appendix=>cs_cell_content_type-text
                       formatting   = VALUE #( background_color = lv_bgcolor_conkey
                                               is_bold          = abap_true
                                           horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                       value = COND #( WHEN TEXT-018 IS INITIAL THEN me->cv_condition_key ELSE TEXT-018 ) ).  "Condition key

    APPEND ls_cell TO lt_cell_all.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key.

      lv_column_index = lv_column_index_1 + lv_column_span_con_key.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_key
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_key
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value = COND #( WHEN TEXT-017 IS INITIAL THEN me->cv_key ELSE TEXT-017 ) ).  " key
      APPEND ls_cell TO lt_cell_all.

    ENDIF.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key + lv_column_span_key.

      lv_column_index = lv_column_index_1 + lv_column_span_con_key + lv_column_span_key.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_details
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_details
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value = COND #( WHEN TEXT-019 IS INITIAL THEN me->cv_condition_details ELSE TEXT-019 ) ).  "Condition details
      APPEND ls_cell TO lt_cell_all.

    ENDIF.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details.
      lv_column_index = lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_scale
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_scale
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value =  COND #( WHEN TEXT-020 IS INITIAL THEN me->cv_condition_scale ELSE TEXT-020 ) ). "Condition scale
      APPEND ls_cell TO lt_cell_all.
    ENDIF.

    "2nd line: Label
    "3rd line: Global Field Name
    "Condition Key fields
    SORT me->mt_dd03nd BY fieldname.
    LOOP AT me->mt_price_field INTO ls_price_field.
      DATA(lv_position) = sy-tabix.
      ls_price_field-fieldname_ext = ls_price_field-fieldname_raw.

      READ TABLE me->mt_dd03nd INTO DATA(ls_dd03) WITH KEY fieldname = ls_price_field-fieldname_raw BINARY SEARCH.
      ls_price_field-fieldname_raw = ls_dd03-fieldname_raw.
      ls_price_field-position = lv_position.
      ls_price_field-fieldname_ext = ls_price_field-fieldname_raw.
      TRANSLATE ls_price_field-fieldname_ext TO UPPER CASE.

      "get label
      cl_dd_ddl_annotation_service=>get_label_4_element_mde(
        EXPORTING
          entityname  = CONV #( mv_cdsname ) "
          elementname = CONV #( ls_price_field-fieldname_ext )
        RECEIVING
          label       = DATA(ls_label) ).
      ls_price_field-label = ls_label-value.
      APPEND ls_price_field TO lt_hdr_field.
      lv_column_index = lv_position.

      IF ls_price_field-field_kind = TEXT-017 OR ls_price_field-field_kind = me->cv_key.
        DATA(lv_bgcolor_price) = lv_bgcolor_key.
      ELSEIF ls_price_field-field_kind = TEXT-019 OR ls_price_field-field_kind = me->cv_condition_details.
        lv_bgcolor_price = lv_bgcolor_details.
      ELSEIF ls_price_field-field_kind = TEXT-020 OR ls_price_field-field_kind = me->cv_condition_scale.
        lv_bgcolor_price = lv_bgcolor_scale.
      ELSEIF ls_price_field-field_kind = TEXT-018 OR ls_price_field-field_kind = me->cv_condition_key.
        lv_bgcolor_price = lv_bgcolor_conkey.
      ENDIF.

      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_label
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_price
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_price_field-label ).

      APPEND ls_cell TO lt_cell_label.

      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_gfn
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_gfn
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_price_field-fieldname_raw ).

      APPEND ls_cell TO lt_cell_gfn.
      CLEAR: lv_bgcolor_price.

    ENDLOOP.

    APPEND LINES OF lt_cell_label TO lt_cell_all.
    APPEND LINES OF lt_cell_gfn TO lt_cell_all.

    et_cell = lt_cell_all.
    et_header = lt_hdr_field.

  ENDMETHOD.


  METHOD SET_HEADER.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS:cv_message TYPE string VALUE 'Message'.
    DATA: lt_condition_key       TYPE TABLE OF ty_header_desc,
          ls_condition_key       TYPE ty_header_desc,
          lt_price_field         TYPE TABLE OF ty_header_desc,
          lt_price_key           TYPE TABLE OF ty_header_desc,
          lt_price_details       TYPE TABLE OF ty_header_desc,
          lt_price_scale         TYPE TABLE OF ty_header_desc,
          lt_hdr_field           TYPE TABLE OF ty_header_desc,
          lt_cell_label          TYPE if_salv_export_appendix=>yts_cell,
          lt_cell_gfn            TYPE if_salv_export_appendix=>yts_cell,
          lt_cell_all            TYPE if_salv_export_appendix=>yts_cell,
          ls_cell                TYPE if_salv_export_appendix=>ys_cell,
          lv_bgcolor_conkey      TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFF8CBAD', "RGB: 248, 203, 173
          lv_bgcolor_key         TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFF4B084', "RGB: 244, 176, 132
          lv_bgcolor_details     TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFCE4D6', "RGB: 252, 228, 214
          lv_bgcolor_scale       TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFD9E1F2', "RGB: 217, 225, 242
          lv_bgcolor_gfn         TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFE699',
          "first and second rows is header fields (label, structure_name)
          lv_column_index        TYPE i,
          lv_column_span_key     TYPE i,
          lv_column_span_details TYPE i,
          lv_column_span_scale   TYPE i,
          lv_column_log          TYPE i,
          lv_row_category        TYPE i VALUE 1,
          lv_row_label           TYPE i VALUE 2,
          lv_row_gfn             TYPE i VALUE 3,
          lv_column_index_1      TYPE i VALUE 1.

    cl_dd_ddl_annotation_service=>get_annos_4_entity_elmnts(
      EXPORTING
        entityname         = CONV ddstrucobjname( mv_cdsname )
        language           = 'E'
      IMPORTING
        annos              =  DATA(lt_fields)
    ).

    DELETE lt_fields WHERE annoname <> 'UI.FIELDGROUP.GROUPLABEL' AND annoname <> 'UI.FIELDGROUP.POSITION'.
    DELETE lt_fields WHERE ( value EQ TEXT-018 OR value EQ me->cv_condition_key ) AND
                                 ( elementname <> me->cv_conditiontype AND elementname <> me->cv_conditiontable
                                AND elementname <> me->cv_accessnumber ) OR elementname = 'PHYSDOCFILENAME' OR elementname = 'CONDITIONSCALELINE'.

    SORT me->mt_mapping BY fieldname_ext.

    "Get condition key
    LOOP AT lt_fields INTO DATA(ls_field) WHERE value = TEXT-018 OR value = me->cv_condition_key.
      READ TABLE me->mt_mapping INTO DATA(ls_mapp) WITH KEY fieldname_ext = ls_field-elementname BINARY SEARCH.
      APPEND VALUE ty_header_desc( field_kind    = COND #( WHEN TEXT-018 IS INITIAL THEN me->cv_condition_key ELSE TEXT-018 )
                                   position      = sy-tabix
                                   fieldname_raw = ls_mapp-fieldname_raw
                                   fieldname_int = ls_mapp-fieldname_int
                                   fieldname_ext = ls_field-elementname
       ) TO lt_condition_key.
      CLEAR: ls_field.
    ENDLOOP.

    APPEND LINES OF it_condition_key TO lt_condition_key.

    IF iv_islog = abap_false AND mv_text_flag = abap_true.
      me->add_text_to_header(
        CHANGING
          ct_condition_key = lt_condition_key                 " table for name value pairs
      ).
    ENDIF.

    CHECK lt_condition_key IS NOT INITIAL.

    "Get Key for only.
    IF iv_rkey EQ abap_true.
      DELETE lt_fields WHERE value <> TEXT-018 OR value <> me->cv_condition_key.
    ENDIF.

    SORT me->mt_field_list BY fieldname.
    LOOP AT lt_fields INTO DATA(ls_fields).
      READ TABLE me->mt_field_list INTO DATA(lo_field_list) WITH KEY fieldname = ls_fields-sourceelement BINARY SEARCH.
      IF sy-subrc EQ 0.
        READ TABLE lt_fields INTO DATA(ls_position) WITH KEY elementname = ls_fields-elementname annoname = 'UI.FIELDGROUP.POSITION'.
        CASE ls_fields-value.
          WHEN TEXT-017 OR me->cv_key.  "Key
            APPEND VALUE #( field_kind = ls_fields-value position = ls_position-value
            fieldname_raw = lo_field_list-fieldname )   TO lt_price_key.
          WHEN TEXT-019 OR me->cv_condition_details.  "Condition details
            APPEND VALUE #( field_kind = ls_fields-value position = ls_position-value
              fieldname_raw = lo_field_list-fieldname ) TO lt_price_details.
          WHEN TEXT-020 OR me->cv_condition_scale.  "Condition scale
            APPEND VALUE #( field_kind = ls_fields-value position = ls_position-value
             fieldname_raw = lo_field_list-fieldname )  TO lt_price_scale.
        ENDCASE.
      ENDIF.
    ENDLOOP.

    APPEND LINES OF lt_price_key TO lt_price_field.

    SORT lt_price_details BY position.
    IF iv_islog = abap_false AND mv_text_flag = abap_true.
      me->add_text_to_header(
        CHANGING
          ct_condition_key = lt_price_details                 " table for name value pairs
      ).
    ENDIF.

    APPEND LINES OF lt_price_details TO lt_price_field.
    APPEND LINES OF lt_price_scale TO lt_price_field.
    me->mt_price_field = lt_price_field.

    DATA(lv_column_span_con_key) = lines( lt_condition_key ).

    IF me->gv_bg_row <> 0.
      lv_row_category = me->gv_bg_row + 2.
      lv_row_label    = me->gv_bg_row + 3.
      lv_row_gfn      = me->gv_bg_row + 4.
    ENDIF.

    LOOP AT lt_price_field INTO DATA(ls_price_field).
      IF ls_price_field-field_kind = TEXT-017 OR ls_price_field-field_kind = me->cv_key.  "Key
        lv_column_span_key = lv_column_span_key + 1.
      ELSEIF ls_price_field-field_kind = TEXT-019 OR ls_price_field-field_kind = me->cv_condition_details . "Condition details
        lv_column_span_details = lv_column_span_details + 1.
      ELSEIF ls_price_field-field_kind = TEXT-020 OR ls_price_field-field_kind = me->cv_condition_scale. "Condition scale
        lv_column_span_scale = lv_column_span_scale + 1.
      ENDIF.
    ENDLOOP.

    "1st line: Condition Key, Key, Condition details, Condition Scale
    lv_column_index = lv_column_index_1.
    ls_cell = VALUE #(
                       row_index    = lv_row_category
                       column_index = lv_column_index
                       row_span     = 0
                       column_span  = lv_column_span_con_key
                       content_type = if_salv_export_appendix=>cs_cell_content_type-text
                       formatting   = VALUE #( background_color = lv_bgcolor_conkey
                                               is_bold          = abap_true
                                           horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                       value = COND #( WHEN TEXT-018 IS INITIAL THEN me->cv_condition_key ELSE TEXT-018 ) ).

    APPEND ls_cell TO lt_cell_all.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key AND iv_rkey EQ abap_false.

      lv_column_index = lv_column_index_1 + lv_column_span_con_key.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_key
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_key
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value = COND #( WHEN TEXT-017 IS INITIAL THEN me->cv_key ELSE TEXT-017 )  ). "Key
      APPEND ls_cell TO lt_cell_all.

    ENDIF.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key + lv_column_span_key AND iv_rkey EQ abap_false.

      lv_column_index = lv_column_index_1 + lv_column_span_con_key + lv_column_span_key.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_details
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_details
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value = COND #( WHEN TEXT-019 IS INITIAL THEN me->cv_condition_details ELSE TEXT-019 ) ).  "Condition details
      APPEND ls_cell TO lt_cell_all.

    ENDIF.

    IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details AND iv_rkey EQ abap_false.
      lv_column_index = lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details.
      ls_cell = VALUE #( row_index    = lv_row_category
                         column_index = lv_column_index
                         row_span     = 0
                         column_span  = lv_column_span_scale
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_scale
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                         value =  COND #( WHEN TEXT-020 IS INITIAL THEN me->cv_condition_scale ELSE TEXT-020 ) ). "Condition scale
      APPEND ls_cell TO lt_cell_all.
    ENDIF.

    "Add column for message
    IF iv_islog = abap_true.
      IF lv_column_index <> lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details + lv_column_span_scale AND iv_rkey EQ abap_false.
        lv_column_index = lv_column_index_1 + lv_column_span_con_key + lv_column_span_key + lv_column_span_details + lv_column_span_scale.
        ls_cell = VALUE #( row_index    = lv_row_category
                           column_index = lv_column_index
                           row_span     = 0
                           column_span  = 0
                           content_type = if_salv_export_appendix=>cs_cell_content_type-text
                           formatting   = VALUE #( background_color = lv_bgcolor_scale
                                                   is_bold          = abap_true
                                               horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center )
                           value = TEXT-041 ). "Log
        APPEND ls_cell TO lt_cell_all.
      ENDIF.
    ENDIF.

    "2nd line: Label
    "3rd line: Global Field Name
    "Condition Key fields

    LOOP AT lt_condition_key INTO ls_condition_key.
      DATA(lv_position) = sy-tabix.
      ls_condition_key-position = lv_position.
      "get label
      DATA(lv_label) = get_label( ls_condition_key-fieldname_raw ).
      ls_condition_key-label = SWITCH #( lv_label WHEN '' THEN ls_condition_key-fieldname_ext ELSE lv_label ).
      APPEND ls_condition_key TO lt_hdr_field.

      READ TABLE lt_hdr_field INDEX lv_position - 1 INTO DATA(ls_hdr_field).
      IF sy-subrc = 0 AND ls_condition_key-fieldname_int = ls_hdr_field-fieldname_int.
        READ TABLE lt_cell_label WITH KEY column_index = lv_position - 1 ASSIGNING FIELD-SYMBOL(<fs_cell_label>).
        IF sy-subrc = 0.
          <fs_cell_label>-column_span = 2.
        ENDIF.
      ELSE.
      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_label
                         column_index = lv_position
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_conkey
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_condition_key-label ).
      APPEND ls_cell TO lt_cell_label.
      ENDIF.
      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_gfn
                         column_index = lv_position
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_gfn
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_condition_key-fieldname_raw ).
      APPEND ls_cell TO lt_cell_gfn.
    ENDLOOP.

    "Price fields
    SORT me->mt_dd03nd BY fieldname.
    LOOP AT lt_price_field ASSIGNING FIELD-SYMBOL(<fs_price_field>).
      TRANSLATE <fs_price_field>-fieldname_raw TO UPPER CASE.
      <fs_price_field>-fieldname_ext = <fs_price_field>-fieldname_raw.

      READ TABLE me->mt_dd03nd INTO DATA(ls_dd03) WITH KEY fieldname = <fs_price_field>-fieldname_raw.
      <fs_price_field>-fieldname_raw = ls_dd03-fieldname_raw.

      READ TABLE me->mt_mapping INTO DATA(ls_mapping) WITH KEY fieldname_ext = <fs_price_field>-fieldname_ext BINARY SEARCH.
      <fs_price_field>-fieldname_int = ls_mapping-fieldname_int.
    ENDLOOP.

    LOOP AT lt_price_field INTO ls_price_field.
      lv_position = lv_position + 1.
      ls_price_field-position = lv_position.
      ls_price_field-fieldname_ext = ls_price_field-fieldname_raw.
      TRANSLATE ls_price_field-fieldname_ext TO UPPER CASE.
      "get label
      ls_price_field-label = get_label( ls_price_field-fieldname_raw ).
      APPEND ls_price_field TO lt_hdr_field.
      lv_column_index = lv_position.

      IF ls_price_field-field_kind = TEXT-017 OR ls_price_field-field_kind = me->cv_key.  "Key
        DATA(lv_bgcolor_price) = lv_bgcolor_key.
      ELSEIF ls_price_field-field_kind = TEXT-019 OR ls_price_field-field_kind = me->cv_condition_details.  "Condition details
        lv_bgcolor_price = lv_bgcolor_details.
      ELSEIF ls_price_field-field_kind = TEXT-020 OR ls_price_field-field_kind = me->cv_condition_scale.  "Condition scale
        lv_bgcolor_price = lv_bgcolor_scale.
      ENDIF.

      READ TABLE lt_hdr_field INDEX lv_position - 1 INTO ls_hdr_field.
      IF sy-subrc = 0 AND ls_price_field-fieldname_int = ls_hdr_field-fieldname_int.
        READ TABLE lt_cell_label WITH KEY column_index = lv_position - 1 ASSIGNING <fs_cell_label>.
        IF sy-subrc = 0.
          <fs_cell_label>-column_span = 2.
        ENDIF.
      ELSE.

      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_label
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_price
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_price_field-label ).

      APPEND ls_cell TO lt_cell_label.
      ENDIF.

      CLEAR: ls_cell.
      ls_cell = VALUE #( row_index = lv_row_gfn
                         column_index = lv_column_index
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_gfn
                                                 is_bold          = abap_false
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = ls_price_field-fieldname_raw ).

      APPEND ls_cell TO lt_cell_gfn.
      CLEAR: lv_bgcolor_price.
    ENDLOOP.

    "Add column for message
    IF iv_islog = abap_true.
      DATA(lv_max) = REDUCE i( INIT x = 0 FOR ls_cell_label IN lt_cell_label
                               NEXT x = nmax( val1 = x val2 = ls_cell-column_index ) ).
      lv_max = lv_max + 1.
      ls_cell = VALUE #( row_index = lv_row_label
                         column_index = lv_max
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_scale
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = TEXT-009 ).
      APPEND ls_cell TO lt_cell_label.

      ls_cell = VALUE #( row_index = lv_row_gfn
                         column_index = lv_max
                         row_span = 0
                         column_span = 0
                         content_type = if_salv_export_appendix=>cs_cell_content_type-text
                         formatting   = VALUE #( background_color = lv_bgcolor_gfn
                                                 is_bold          = abap_true
                                             horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-auto )
                         value = cv_message ).
      APPEND ls_cell TO lt_cell_gfn.

      DATA(lv_message) = cv_message.
      TRANSLATE lv_message TO UPPER CASE.
      APPEND VALUE ty_header_desc( field_kind = TEXT-010 position = lv_max fieldname_raw = cv_message
                                   fieldname_ext = lv_message label = TEXT-009 ) TO lt_hdr_field.
    ENDIF.
    APPEND LINES OF lt_cell_label TO lt_cell_all.
    APPEND LINES OF lt_cell_gfn TO lt_cell_all.

*  Move Log Message to First Column
    IF iv_islog = abap_true.
      DATA lt_cell_help TYPE STANDARD TABLE OF if_salv_export_appendix=>ys_cell.
      lt_cell_help = lt_cell_all.
      LOOP AT lt_cell_help ASSIGNING FIELD-SYMBOL(<fs_cell>).
        IF <fs_cell>-column_index = lv_max.
          <fs_cell>-column_index = 1.
        ELSE.
          <fs_cell>-column_index = <fs_cell>-column_index + 1.
        ENDIF.
      ENDLOOP.
      SORT lt_cell_help BY row_index column_index ASCENDING.
      CLEAR lt_cell_all.
      APPEND LINES OF lt_cell_help TO lt_cell_all.
      LOOP AT lt_hdr_field ASSIGNING FIELD-SYMBOL(<fs_hdr>).
        IF <fs_hdr>-position = lv_max.
          <fs_hdr>-position = 1.
        ELSE.
          <fs_hdr>-position = <fs_hdr>-position + 1.
        ENDIF.
      ENDLOOP.
      SORT lt_hdr_field BY position ASCENDING.
    ENDIF.

    et_cell = lt_cell_all.
    et_header = lt_hdr_field.

    CLEAR: lt_price_key,lt_price_details,lt_price_scale.
  ENDMETHOD.


  METHOD MERGE_CELLS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    LOOP AT it_blocks INTO DATA(ls_block).
      IF ls_block-location = 'SHEET'.
        DATA(lt_tmp) = ls_block-cells.
        CLEAR: ls_block-cells.

        APPEND LINES OF it_cells TO ls_block-cells.
        APPEND LINES OF lt_tmp TO ls_block-cells.
      ENDIF.

      APPEND ls_block TO et_blocks.

      CLEAR: ls_block.
    ENDLOOP.

  ENDMETHOD.


  METHOD MAP_FIELD_LIST_TYPE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    READ TABLE it_dfies INTO DATA(ls_fies) WITH KEY fieldname = iv_fieldname_int.
    IF sy-subrc = 0.
      READ TABLE mt_field_list ASSIGNING FIELD-SYMBOL(<fs_field_list>)
                               WITH KEY fieldname = iv_fieldname_ext.
      IF sy-subrc = 0.
        <fs_field_list>-leng      = ls_fies-leng.
        <fs_field_list>-intlen    = ls_fies-intlen.
        <fs_field_list>-outputlen = ls_fies-intlen.
        <fs_field_list>-decimals  = ls_fies-decimals.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD GET_TEXT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_entityset TYPE TABLE OF zi_slsprcgcndnrecdtemplate,
          ls_entityset TYPE zi_slsprcgcndnrecdtemplate,
          lr_entityset TYPE REF TO data,
          lv_ps_posnr  TYPE ps_posnr.
    LOOP AT it_validity INTO DATA(ls_validity).
      CLEAR:ls_entityset.
      READ TABLE it_record INTO DATA(ls_record) WITH KEY conditionrecord = ls_validity-conditionrecord BINARY SEARCH.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING ls_record TO ls_entityset.
        MOVE-CORRESPONDING ls_validity TO ls_entityset.
        APPEND ls_entityset TO lt_entityset.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_entityset ASSIGNING FIELD-SYMBOL(<fs_set>).

        ASSIGN COMPONENT gcs_sales_condition-workpackage
            OF STRUCTURE <fs_set> TO FIELD-SYMBOL(<fs_workpackage>).
        IF <fs_workpackage> IS ASSIGNED AND NOT <fs_workpackage> IS INITIAL
          AND <fs_workpackage> NE gcs_sales_condition-wbs_related_initial.
          CLEAR:lv_ps_posnr.
          lv_ps_posnr = <fs_workpackage>.
          CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
            EXPORTING
              input  = lv_ps_posnr
            IMPORTING
              output = <fs_workpackage>.
        ENDIF.

    ENDLOOP.
    GET REFERENCE OF lt_entityset INTO lr_entityset.
    mo_prcg_util->get_text(
      EXPORTING
        iv_ddlname = 'ZI_SlsPrcgCndnRecdTemplate'
      CHANGING
        cr_data = lr_entityset
    ).
    me->mt_entityset = lt_entityset.
    DATA: lt_anno_element	TYPE cl_dd_ddl_annotation_service=>ty_t_elmnt_anno_val_src_dtel.

    SELECT ddlxname AS sourceobject
           element AS elementname
           name AS annoname
           value
      FROM ddlx_rt_data
      INTO CORRESPONDING FIELDS OF TABLE lt_anno_element
     WHERE ddlxname = 'ZI_SLSPRCGCNDNRECDTEMPLATE'.  "

    "DDL Source, e.g. C_SLSPRICINGCONDITIONRECORDTP
    SELECT strucobjn AS sourceobject
           lfieldname AS elementname
           name AS annoname
           value
      FROM ddfieldanno
      APPENDING CORRESPONDING FIELDS OF TABLE lt_anno_element
     WHERE strucobjn = 'ZI_SLSPRCGCNDNRECDTEMPLATE'.

    DELETE lt_anno_element WHERE NOT ( annoname CS 'CONSUMPTION.VALUEHELP'
                                    OR annoname CS 'SEMANTICS.TEXT'
                                    OR annoname CS 'OBJECTMODEL.TEXT.ASSOCIATION'
                                    OR annoname CS 'OBJECTMODEL.TEXT.ELEMENT' ).
    SORT lt_anno_element BY elementname annoname.
    et_anno_element = lt_anno_element.

  ENDMETHOD.


  METHOD GET_NTH_CHILD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    IF io_node IS BOUND.
      DATA(lo_child) = io_node->get_first_child( ).
      DATA lv_index TYPE int4 VALUE 1.

      WHILE lo_child IS BOUND AND lv_index < iv_n.
        lo_child = lo_child->get_next( ).
        lv_index = lv_index + 1.
      ENDWHILE.

      ro_node = lo_child.
    ENDIF.

  ENDMETHOD.


  METHOD GET_LABEL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    READ TABLE mt_label INTO DATA(ls_label) WITH KEY fieldname_raw = iv_fieldname_raw.
    IF sy-subrc <> 0.
      cl_dd_ddl_annotation_service=>get_label_4_element_mde(
        EXPORTING
          entityname  = CONV #( mv_cdsname )
          elementname = CONV #( iv_fieldname_raw )
        RECEIVING
          label       = DATA(ls_label_service)
      ).
      ls_label-fieldname_raw = iv_fieldname_raw.
      ls_label-label         = ls_label_service-value.
      APPEND ls_label TO mt_label.
    ENDIF.
    rv_label = ls_label-label.
  ENDMETHOD.


  METHOD GET_ITEM_OPTION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CLEAR et_item.
    IF mt_item IS INITIAL.
      IF iv_where IS INITIAL.
        TRY.
            mo_prcg_util->convert_filter_expr_to_where(
              EXPORTING
                iv_expression     = iv_filterstring " $filter query option expression "ConditionType eq 'PR00'
                iv_convert_needed = abap_true
              IMPORTING
                ev_where_clause   = DATA(lv_where) " Open SQL WHERE clause
            ).
          CATCH /iwcor/cx_ds_bad_request. " OData client error - bad request
        ENDTRY.
      ELSE.
        lv_where = iv_where.
      ENDIF.

      TRY.
          mo_prcg_util->convert_where_to_select_option(
            EXPORTING
              iv_where_clause = lv_where                " WHERE condition clause
            IMPORTING
              et_item         = mt_item         " Select option like
          ).
        CATCH cx_prcg_cndnrecord_exception. " Exception for Condition Public API
      ENDTRY.

      LOOP AT mt_item INTO DATA(ls_item).
        LOOP AT ls_item-conditiontype INTO DATA(ls_cntype).
          APPEND VALUE #( conditiontype = ls_cntype-low ) TO mt_contype.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
    et_item = mt_item.
    et_contype = mt_contype.
  ENDMETHOD.


  METHOD GET_COND_KEY_FOR_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
* BOBRULA      | 07.11.2023 | 26564 : Pricing Mass Upload Tool         *
*              |            | DS4K969470                               *
*----------------------------------------------------------------------*
    DATA: ls_condition_key TYPE ty_header_desc,
          lv_position      TYPE i.
    DATA ls_fields                   TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_s.
    "Get condition table by condition type
    IF iv_kschl IS NOT INITIAL.
      SELECT t682i~kvewe, t682i~kappl, t682i~kozgf, t682i~kotabnr
        INTO TABLE @DATA(lt_contab)
        FROM t682i
       INNER JOIN t685                                 "#EC CI_BUFFJOIN
          ON t682i~kvewe = t685~kvewe
         AND t682i~kappl = t685~kappl
         AND t682i~kozgf = t685~kozgf
       WHERE t685~kvewe = @if_ct_constants=>c_usage_pricing
         AND t685~kappl = @if_ct_constants=>c_application_sales
         AND t685~kschl = @iv_kschl.
    ELSEIF it_kschl IS NOT INITIAL.
      SELECT t682i~kvewe, t682i~kappl, t682i~kozgf, t682i~kotabnr
        INTO TABLE @lt_contab
        FROM t682i
       INNER JOIN t685                                       "#EC CI_BUFFJOIN
          ON t682i~kvewe = t685~kvewe
         AND t682i~kappl = t685~kappl
         AND t682i~kozgf = t685~kozgf
       WHERE t685~kvewe = @if_ct_constants=>c_usage_pricing
         AND t685~kappl = @if_ct_constants=>c_application_sales
         AND t685~kschl IN @it_kschl.
    ELSE.
      RETURN.
    ENDIF.

    TRY.
        TEST-SEAM get_access_fields.
          DATA(lt_kozgf) = lt_contab.
          SORT lt_kozgf BY kvewe kappl kozgf.
          DELETE ADJACENT DUPLICATES FROM lt_kozgf COMPARING kvewe kappl kozgf.
          LOOP AT lt_kozgf INTO DATA(ls_kozgf).
            TRY.
                mo_acc->get_access_fields(
                  EXPORTING
                    ir_kvewe         = VALUE #( ( sign = 'I' option = 'EQ' low = |{ ls_kozgf-kvewe }| ) )
                    ir_kappl         = VALUE #( ( sign = 'I' option = 'EQ' low = |{ ls_kozgf-kappl }| ) )
                    ir_kozgf         = VALUE #( ( sign = 'I' option = 'EQ' low = |{ ls_kozgf-kozgf }| ) )
                  IMPORTING
                    et_access_fields = DATA(lt_access_fields) ).
              CATCH cx_ct_customizing_exception.
            ENDTRY.
            APPEND LINES OF lt_access_fields TO me->mt_access_fields.
            CLEAR: lt_access_fields.
          ENDLOOP.
        END-TEST-SEAM.
      CATCH cx_ct_customizing_exception INTO DATA(lx_cus).

    ENDTRY.

    "Get condition table
    SORT lt_contab BY kotabnr.
    DELETE ADJACENT DUPLICATES FROM lt_contab COMPARING kotabnr.
    LOOP AT lt_contab INTO DATA(ls_contab).
      mo_util->get_key_fields(
        EXPORTING
          iv_kvewe      = 'A'
          iv_kotabnr    = ls_contab-kotabnr
        IMPORTING
          et_key_fields = DATA(lt_key)
      ).

      mo_util->get_data_fields(
        EXPORTING
          iv_kvewe       = 'A'
          iv_kotabnr     = ls_contab-kotabnr
        IMPORTING
          et_data_fields = DATA(lt_data_fields)
      ).

      IF NOT line_exists( mt_fields[ kotabnr = ls_contab-kotabnr ] ).
        ls_fields-kotabnr = ls_contab-kotabnr.
        ls_fields-key_fields = lt_key.
        ls_fields-data_fields = lt_data_fields.
        LOOP AT ls_fields-key_fields ASSIGNING FIELD-SYMBOL(<fs_key>).
          TRANSLATE <fs_key>-fieldname TO UPPER CASE.
          READ TABLE mt_mapping INTO DATA(ls_mapping) WITH KEY fieldname_int = <fs_key>-fieldname.
          IF sy-subrc = 0.
            IF ls_mapping-fieldname_raw IS INITIAL.
              <fs_key>-fieldname = ls_mapping-fieldname_ext.
            ELSE.
              <fs_key>-fieldname = ls_mapping-fieldname_raw.
            ENDIF.
          ELSE.
            READ TABLE mt_dd03nd INTO DATA(ls_dd03nd) WITH KEY fieldname = <fs_key>-fieldname.
            <fs_key>-fieldname = ls_dd03nd-fieldname_raw.
          ENDIF.
        ENDLOOP.
        LOOP AT ls_fields-data_fields ASSIGNING FIELD-SYMBOL(<fs_data_fields>).
          TRANSLATE <fs_data_fields>-fieldname TO UPPER CASE.
          READ TABLE mt_mapping INTO ls_mapping WITH KEY fieldname_int = <fs_data_fields>-fieldname.
          IF sy-subrc = 0.
            IF ls_mapping-fieldname_raw IS INITIAL.
              <fs_data_fields>-fieldname = ls_mapping-fieldname_ext.
            ELSE.
              <fs_data_fields>-fieldname = ls_mapping-fieldname_raw.
            ENDIF.
          ELSE.
            READ TABLE mt_dd03nd INTO ls_dd03nd WITH KEY fieldname = <fs_data_fields>-fieldname.
            <fs_data_fields>-fieldname = ls_dd03nd-fieldname_raw.
          ENDIF.
        ENDLOOP.
        APPEND ls_fields TO mt_fields.
        CLEAR ls_fields.
      ENDIF.

      LOOP AT lt_data_fields INTO  DATA(ls_data_field).
        IF ls_data_field-fieldname <>  'KBSTAT'.
          APPEND ls_data_field TO  lt_key.
        ENDIF .
      ENDLOOP .

      "Get condition key
      LOOP AT lt_key INTO DATA(ls_key).
        READ TABLE me->mt_cond_key WITH KEY fieldname_int = ls_key-fieldname TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          ls_condition_key-field_kind = TEXT-018.
          ls_condition_key-fieldname_int = ls_key-fieldname.
          TRANSLATE ls_condition_key-fieldname_int TO UPPER CASE.
          READ TABLE mt_mapping INTO ls_mapping WITH KEY fieldname_int = ls_key-fieldname.
          IF sy-subrc = 0.
            ls_condition_key-fieldname_ext = ls_mapping-fieldname_ext.
            ls_condition_key-fieldname_raw = ls_mapping-fieldname_raw.

            READ TABLE mt_field_list INTO DATA(ls_field_list) WITH KEY fieldname = ls_mapping-fieldname_ext.
            ls_condition_key-position = ls_field_list-position.
            APPEND ls_condition_key TO me->mt_cond_key.
            APPEND ls_condition_key TO et_condition_key.
          ELSE. "Extension
            READ TABLE mt_dd03nd INTO ls_dd03nd WITH KEY fieldname = ls_key-fieldname.
            IF sy-subrc = 0.
              ls_condition_key-fieldname_ext = ls_dd03nd-fieldname.
              ls_condition_key-fieldname_raw = ls_dd03nd-fieldname_raw.
              TRANSLATE ls_condition_key-fieldname_ext TO UPPER CASE.

              APPEND ls_condition_key TO me->mt_cond_key.
              APPEND ls_condition_key TO et_condition_key.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_CONDITION_KEY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA(lt_record) = it_record.
    IF lt_record IS INITIAL.
      MOVE-CORRESPONDING mt_contype TO lt_record.
    ENDIF.
    SORT lt_record BY conditiontype.
    DELETE ADJACENT DUPLICATES FROM lt_record COMPARING conditiontype.

    "Get condition table by condition type
    LOOP AT lt_record INTO DATA(ls_record).
      me->get_cond_key_for_template(
        EXPORTING
          iv_kschl         = ls_record-conditiontype
        IMPORTING
          et_condition_key = DATA(lt_cond_key)
      ).

      APPEND LINES OF lt_cond_key TO et_condition_key.
      CLEAR: lt_cond_key.
    ENDLOOP.

  ENDMETHOD.


  METHOD GET_CONDITION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_header       TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_header_s,
          ls_query_option TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
          sortfield       TYPE fieldname,
          sortsequence    TYPE orderby.

    LOOP AT it_key_tab INTO DATA(ls_key_tab).
      IF ls_key_tab-name = gcs_sales_condition-filterstring.
        DATA(filterstring) = ls_key_tab-value. "e.g. ConditionType EQ 'XXXX'
      ENDIF.
      IF ls_key_tab-name = gcs_sales_condition-sorterstring.
        DATA(sorterstring) = ls_key_tab-value. "e.g. ConditionType EQ 'XXXX'
      ENDIF.
    ENDLOOP.

    IF NOT filterstring IS INITIAL.
      get_item_option(
        EXPORTING
          iv_filterstring = filterstring
          iv_where        = iv_where
        IMPORTING
          et_item         = DATA(lt_item)
      ).

      LOOP AT lt_item ASSIGNING FIELD-SYMBOL(<fs_item>).
        DATA(lv_tabix) = sy-tabix.
        "For valid on
        LOOP AT <fs_item>-conditionfieldselectionoption ASSIGNING FIELD-SYMBOL(<fs_select>)
              WHERE prcgconditionfieldrangename = gcs_sales_condition-conditionvaliditystartdate "'CONDITIONVALIDITYSTARTDATE'.
                 OR prcgconditionfieldrangename = gcs_sales_condition-conditionvalidityenddate. "'CONDITIONVALIDITYENDDATE'.
          DATA(valid_on) = <fs_select>-prcgconditionfieldrangelow.
          DELETE <fs_item>-conditionfieldselectionoption INDEX sy-tabix.
        ENDLOOP.

        "If only has condition type and condition table is initial, remove it
        IF <fs_item>-conditionfieldselectionoption IS INITIAL
          AND <fs_item>-conditionrecord IS INITIAL
          AND <fs_item>-conditiontable IS NOT INITIAL
          AND <fs_item>-conditiontype IS NOT INITIAL.
          IF lines( <fs_item>-conditiontable ) = 1.
            READ TABLE <fs_item>-conditiontable WITH KEY low = '' TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE lt_item INDEX lv_tabix.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.

      TRY.
          mo_prcg_util->convert_value_to_input_sel(
            EXPORTING
              iv_tabname = gcs_sales_condition-validity_ddic_name "'ASLSPRCGCNDNVA'
            CHANGING
              ct_item    = lt_item
          ).

        CATCH cx_prcg_cndnrecord_exception." INTO lo_ex. " Exception for Condition Public API
      ENDTRY.

    ENDIF.

    IF NOT sorterstring IS INITIAL.
      SPLIT sorterstring AT ',' INTO TABLE DATA(lt_sort).
      LOOP AT lt_sort INTO DATA(ls_sort).
        SPLIT ls_sort AT space INTO sortfield sortsequence.
        TRANSLATE sortfield TO UPPER CASE.
        TRANSLATE sortsequence TO UPPER CASE.
        APPEND VALUE #( sortfield = sortfield sortsequence = sortsequence )
            TO ls_query_option-prcgqueryoptionorderby.
      ENDLOOP.
    ENDIF.
    IF ls_query_option-prcgqueryoptionorderby IS INITIAL.
      sortfield = gcs_sales_condition-conditionrecord. "'CONDITIONRECORD'.
      sortsequence = 'DESC'.
      TRANSLATE sortfield TO UPPER CASE.
      TRANSLATE sortsequence TO UPPER CASE.
      APPEND VALUE #( sortfield = sortfield sortsequence = sortsequence )
          TO ls_query_option-prcgqueryoptionorderby.
    ENDIF.

    TRY.
        IF lines( lt_item ) = 0.
          RETURN.
        ENDIF.

        ls_header-deltdconditionrecordisexcluded = 'X'.
        IF valid_on IS NOT INITIAL.
          ls_header-conditionvaliditystartdate = valid_on.
        ENDIF.

        mo_sls_api->get_condition_record(
          EXPORTING
            is_cndnrecord_criteria_header = ls_header
            it_cndnrecord_criteria_item   = lt_item
            is_cndnrecord_query_option    = ls_query_option
          IMPORTING
            et_condition_validity_enh     = et_condition_validity
            et_condition_record           = et_condition_record
            et_condition_supplement       = et_condition_supplement
            et_condition_scale            = et_condition_scale
            es_cndn_query_option_response = es_cndn_query_option_response
            et_condition_record_text      = et_condition_record_text
            et_condition_supplement_text  = et_condition_supplement_text
        ).

        "Delete data if no authorization and blocked
        DATA(lt_val) = et_condition_validity.
        DELETE lt_val WHERE conditionapplication IS NOT INITIAL.

        DELETE et_condition_validity WHERE conditionapplication IS INITIAL.
        LOOP AT lt_val INTO DATA(ls_val).
          DELETE et_condition_record     WHERE conditionrecord = ls_val-conditionrecord.
          DELETE et_condition_supplement WHERE conditionrecord = ls_val-conditionrecord.
          DELETE et_condition_scale      WHERE conditionrecord = ls_val-conditionrecord.
        ENDLOOP.
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
    ENDTRY.

  ENDMETHOD.


  METHOD GET_ALL_FIELDS_CDS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_price_field    TYPE TABLE OF ty_header_desc,
          lt_price_key      TYPE TABLE OF ty_header_desc,
          lt_price_details  TYPE TABLE OF ty_header_desc,
          lt_price_scale    TYPE TABLE OF ty_header_desc,
          lt_price_cond_key TYPE TABLE OF ty_header_desc.

    cl_dd_ddl_annotation_service=>get_annos_4_entity_elmnts(
      EXPORTING
        entityname         = CONV ddstrucobjname( mv_cdsname )
        language           = 'E'
      IMPORTING
        annos              =  DATA(lt_fields)  ).

    DELETE lt_fields WHERE annoname <> 'UI.FIELDGROUP.GROUPLABEL'.

    SORT lt_fields BY value.
    SORT me->mt_field_list BY fieldname.
    LOOP AT lt_fields INTO DATA(ls_fields).
      READ TABLE me->mt_field_list INTO DATA(lo_field_list) WITH KEY fieldname = ls_fields-sourceelement BINARY SEARCH.
      IF sy-subrc EQ 0.
        CASE ls_fields-value.
*          WHEN TEXT-018.
          WHEN TEXT-018 OR me->cv_condition_key.
            APPEND VALUE #( field_kind = ls_fields-value position = lo_field_list-position
              fieldname_raw = lo_field_list-fieldname )  TO lt_price_cond_key.
*          WHEN TEXT-017.
          WHEN TEXT-017 OR me->cv_key.
            APPEND VALUE #( field_kind = ls_fields-value position = lo_field_list-position
            fieldname_raw = lo_field_list-fieldname )   TO lt_price_key.
*          WHEN TEXT-019.
          WHEN TEXT-019 OR me->cv_condition_details.
            APPEND VALUE #( field_kind = ls_fields-value position = lo_field_list-position
              fieldname_raw = lo_field_list-fieldname ) TO lt_price_details.
*          WHEN TEXT-020.
          WHEN TEXT-020 OR me->cv_condition_scale.
            APPEND VALUE #( field_kind = ls_fields-value position = lo_field_list-position
             fieldname_raw = lo_field_list-fieldname )  TO lt_price_scale.
        ENDCASE.
      ENDIF.
    ENDLOOP.

    SORT lt_price_cond_key BY position.
    SORT lt_price_key BY position.
    SORT lt_price_details BY position.
    SORT lt_price_scale BY position.

    APPEND LINES OF lt_price_cond_key TO lt_price_field.
    APPEND LINES OF lt_price_key TO lt_price_field.
    APPEND LINES OF lt_price_details TO lt_price_field.
    APPEND LINES OF lt_price_scale TO lt_price_field.
    me->mt_price_field = lt_price_field.

    DELETE me->mt_price_field WHERE fieldname_raw = 'PHYSDOCFILENAME'.
    et_condition_key = lt_price_cond_key.

  ENDMETHOD.


  METHOD FORMAT_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lv_lines TYPE i.

    lv_lines = lines( it_data ).
    "Set Cells is edit
    SORT me->mt_mapping BY fieldname_int.
    "Rows
    LOOP AT it_data INTO DATA(ls_data).
      DATA(lo_node_hier_next) = ir_root_row->get_next( ).
      DATA(lo_node_rest_c) = ir_root_row->get_first_child( ).

      "Columns
      DATA(ls_t685) = mo_cond_dep->get_t685( EXPORTING iv_kappl = if_ct_constants=>c_application_sales
                                                       iv_kschl = ls_data-conditiontype ).

      LOOP AT me->mt_access_fields INTO DATA(ls_access) WHERE kozgf = ls_t685-kozgf
                                   AND kolnr = ls_data-accessnumberofaccesssequence AND qufna <> ''.
        "Fields mapping
        READ TABLE me->mt_mapping INTO DATA(ls_mapp) WITH KEY fieldname_int = ls_access-zifna BINARY SEARCH.
        IF sy-subrc EQ 0.
          DATA(lv_while_count) = 1.
*            READ TABLE me->mt_header_list INTO DATA(ls_col) WITH KEY value = ls_mapp-fieldname_raw.
          READ TABLE me->mt_header_tmp_list INTO DATA(ls_col) WITH KEY value = ls_mapp-fieldname_raw.
          IF sy-subrc EQ 0.
            DATA(lo_node_c) = lo_node_rest_c.
            WHILE ( lv_while_count < ls_col-column_index ).
              lo_node_c = lo_node_c->get_next( ).
              lv_while_count = lv_while_count + 1.
            ENDWHILE.
            lo_node_c->get_attributes( )->get_named_item_ns( 's' )->set_value( iv_cell_value ).
          ENDIF.
        ELSE. "Extension
          READ TABLE mt_dd03nd INTO DATA(ls_dd03nd) WITH KEY fieldname = ls_access-zifna.
          IF sy-subrc = 0.
            lv_while_count = 1.
            READ TABLE me->mt_header_tmp_list INTO ls_col WITH KEY value = ls_dd03nd-fieldname_raw.
            IF sy-subrc EQ 0.
              lo_node_c = lo_node_rest_c.
              WHILE ( lv_while_count < ls_col-column_index ).
                lo_node_c = lo_node_c->get_next( ).
                lv_while_count = lv_while_count + 1.
              ENDWHILE.
              lo_node_c->get_attributes( )->get_named_item_ns( 's' )->set_value( iv_cell_value ).
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      ir_root_row = lo_node_hier_next.
    ENDLOOP.
  ENDMETHOD.


  METHOD FORMAT_SHEET_FIELD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA : lo_xml_document TYPE REF TO cl_xml_document,
           lo_formarted    TYPE xstring.

    CHECK ir_parts IS BOUND.
    DATA(lo_wordsheetpart) = ir_parts->get_part( 0 ).
    CHECK lo_wordsheetpart IS BOUND.

    DATA(lo_sheet_content) = lo_wordsheetpart->get_data( ).
    CREATE OBJECT lo_xml_document.
    lo_xml_document->parse_xstring( lo_sheet_content ).
    lo_xml_document->render_2_xstring( IMPORTING stream = lo_formarted ).
    lo_wordsheetpart->feed_data( lo_formarted ).

    "Set height size to 240 for second 2 row.
    DATA(lo_node_sheetdata) = lo_xml_document->find_node( 'sheetData' ).
    DATA(lo_node_sheetviews) = lo_xml_document->find_node( 'sheetViews' ).

    IF lo_node_sheetviews IS BOUND.
      DATA(lo_node_sheetview) = lo_node_sheetviews->get_first_child( ).
      IF lo_node_sheetview IS BOUND.
        lo_node_sheetview->get_attributes( )->remove_named_item_ns( 'tabSelected' ).
      ENDIF.
    ENDIF.

    " set width size to N
    DATA(lo_wdth_node) = lo_xml_document->find_node( name = 'cols' ).

    IF lo_wdth_node IS BOUND.
      DATA(lo_node_cols) = lo_wdth_node->get_children( ).
      DATA(lv_cols_count) = 0 .DATA(lv_cols_len) = lo_node_cols->get_length( ).
      WHILE lv_cols_count < lv_cols_len .
        DATA(lo_node_first_element_wd) = lo_node_cols->get_item( lv_cols_count ).
        IF lo_node_first_element_wd IS BOUND.
          DATA(lo_attrs_map_wdth) = lo_node_first_element_wd->get_attributes( ).
          IF lo_attrs_map_wdth IS BOUND.
            CASE lv_cols_count.
              WHEN 0.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '30' ).
              WHEN 1.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '30' ).
              WHEN 2.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '10' ).
              WHEN 3.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '10' ).
              WHEN 4.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '10' ).
              WHEN 5.
                lo_attrs_map_wdth->get_named_item_ns( name = 'width' )->set_value( '60' ).
            ENDCASE.
          ENDIF.
          lv_cols_count = lv_cols_count + 1.
        ENDIF.
      ENDWHILE.

      CLEAR : lv_cols_count,lv_cols_len.
    ENDIF.

    lo_xml_document->render_2_xstring( IMPORTING stream = lo_formarted ).
    lo_wordsheetpart->feed_data( lo_formarted ).

    " set font size to 24
    DATA(lo_uri) = cl_openxml_parturi=>create_from_filename( iv_filename = 'xl/styles.xml').
    TRY.
        DATA(lo_stylepart) = ir_xlsx_doc->get_part_by_uri( ir_parturi = lo_uri ).
      CATCH cx_openxml_format.
      CATCH cx_openxml_not_found.
    ENDTRY.

    CHECK lo_stylepart IS BOUND.
    lo_xml_document->parse_xstring( lo_stylepart->get_data( ) ).

    DATA(lo_node) = lo_xml_document->find_node( name = 'fonts').
    CHECK lo_node IS  BOUND.
    DATA(lo_node_rows) = lo_node->get_children( ).

    CHECK lo_node_rows IS BOUND.

    DATA(lo_node_first_element) = lo_node_rows->get_item( 3 )->get_first_child( )->get_next( ).
    IF lo_node_first_element IS BOUND .
      DATA(lo_attrs_map) = lo_node_first_element->get_attributes( ).
      IF lo_attrs_map->get_named_item_ns( name = 'val' ) IS BOUND.
        lo_attrs_map->get_named_item_ns( name = 'val' )->set_value( '24' ).
      ENDIF.
    ENDIF.

    lo_xml_document->render_2_xstring( IMPORTING stream = lo_formarted ).
    lo_stylepart->feed_data( lo_formarted ).

  ENDMETHOD.


  METHOD FORMAT_FIELD_VALUE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CONSTANTS:lc_point TYPE string VALUE '.',
              lc_comma TYPE string VALUE ','.
    "Value housekeeping
    IF is_lineitems-conditionisscale = abap_false. "not scale entity
      IF is_header-fieldname_raw = gcs_sales_condition-conditionscaleline_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionscalequantity_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionscalequantityunit_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionscaleamount_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionscaleamountcurr_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionscaleratevalue_raw.
        CLEAR cv_format_value.
      ENDIF.

      "Currency conversion
      IF is_header-fieldname_raw = gcs_sales_condition-conditionratevalue_raw.
        IF is_lineitems-conditioncalculationtype CN gcs_sales_condition-percentage.
          CLEAR cv_format_value.
          WRITE is_lineitems-conditionratevalue TO cv_format_value
                CURRENCY is_lineitems-conditionratevalueunit NO-GROUPING.
        ENDIF.
        REPLACE ALL OCCURRENCES OF lc_comma IN cv_format_value WITH lc_point.
        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = cv_format_value.
      ENDIF.
      IF is_header-fieldname_raw = gcs_sales_condition-conditionlowerlimit_raw.
        IF is_lineitems-conditioncalculationtype CN gcs_sales_condition-percentage.
          CLEAR cv_format_value.
          WRITE is_lineitems-conditionlowerlimit TO cv_format_value
                CURRENCY is_lineitems-conditionratevalueunit NO-GROUPING.
        ENDIF.
        REPLACE ALL OCCURRENCES OF lc_comma IN cv_format_value WITH lc_point.
        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = cv_format_value.
      ENDIF.
      IF is_header-fieldname_raw = gcs_sales_condition-conditionupperlimit_raw.
        IF is_lineitems-conditioncalculationtype CN gcs_sales_condition-percentage.
          CLEAR cv_format_value.
          WRITE is_lineitems-conditionupperlimit TO cv_format_value
                CURRENCY is_lineitems-conditionratevalueunit NO-GROUPING.
        ENDIF.
        REPLACE ALL OCCURRENCES OF lc_comma IN cv_format_value WITH lc_point.
        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = cv_format_value.
      ENDIF.
    ELSE. "scale entity
      IF is_lineitems-pricingscalebasis = 'B'. "Value scale
        IF is_header-fieldname_raw = gcs_sales_condition-conditionscalequantity_raw
          OR is_header-fieldname_raw = gcs_sales_condition-conditionscalequantityunit_raw.
          CLEAR cv_format_value.
        ENDIF.

        IF is_header-fieldname_raw = gcs_sales_condition-conditionscaleamount_raw.
          CLEAR cv_format_value.
          WRITE is_lineitems-conditionscaleamount TO cv_format_value
                CURRENCY is_lineitems-conditionscaleamountcurrency NO-GROUPING.
          REPLACE ALL OCCURRENCES OF lc_comma IN cv_format_value WITH lc_point.
          CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
            CHANGING
              value = cv_format_value.
        ENDIF.
      ELSE.
        IF is_header-fieldname_raw = gcs_sales_condition-conditionscaleamount_raw
          OR is_header-fieldname_raw = gcs_sales_condition-conditionscaleamountcurr_raw.
          CLEAR cv_format_value.
        ENDIF.
      ENDIF.

      IF is_header-fieldname_raw = gcs_sales_condition-conditionratevalue_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionlowerlimit_raw
        OR is_header-fieldname_raw = gcs_sales_condition-conditionupperlimit_raw.
        CLEAR cv_format_value.
      ENDIF.

      "Currency conversion
      IF is_header-fieldname_raw = gcs_sales_condition-conditionscaleratevalue_raw.
        IF is_lineitems-conditioncalculationtype CN gcs_sales_condition-percentage.
          WRITE is_lineitems-conditionratevalue TO cv_format_value
                CURRENCY is_lineitems-conditionratevalueunit NO-GROUPING.
        ENDIF.
        REPLACE ALL OCCURRENCES OF lc_comma IN cv_format_value WITH lc_point.
        CALL FUNCTION 'CLOI_PUT_SIGN_IN_FRONT'
          CHANGING
            value = cv_format_value.
      ENDIF.
    ENDIF.

    IF is_header-fieldname_raw = gcs_sales_condition-conditionvalidityenddate_raw OR is_header-fieldname_raw = gcs_sales_condition-conditionvaliditystartdate_raw
      OR is_header-fieldname_raw = gcs_sales_condition-fixedvaluedate_raw.
      IF cv_format_value = '00000000'.
        CLEAR cv_format_value.
      ENDIF.
    ENDIF.
    IF is_header-fieldname_raw = gcs_sales_condition-accessnumberofaccessseq_raw.
      CLEAR cv_format_value.
    ENDIF.

    IF is_header-fieldname_raw = gcs_sales_condition-conditionsequentialnumber_raw.
      IF cv_format_value IS NOT INITIAL.
        IF strlen( cv_format_value ) > 2.
          cv_format_value = cv_format_value+1(2).
        ENDIF.
      ELSE.
        CLEAR cv_format_value.
      ENDIF.
    ENDIF.

    "WBS, Work Package, Personnel Number
    IF is_header-fieldname_raw = gcs_sales_condition-wbselementinternalid_raw
      OR is_header-fieldname_raw = gcs_sales_condition-workpackage_raw.
      IF cv_format_value = '00000000'.
        CLEAR cv_format_value.
      ELSEIF cv_format_value IS NOT INITIAL.
        DATA:lv_ps_posid TYPE ps_posid,
             lv_ps_posnr TYPE ps_posnr.
        lv_ps_posnr = cv_format_value.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
          EXPORTING
            input  = lv_ps_posnr
          IMPORTING
            output = lv_ps_posid.
        cv_format_value = lv_ps_posid.
      ENDIF.
    ENDIF.

    IF is_header-fieldname_raw = gcs_sales_condition-personnel_raw.
      IF cv_format_value = '00000000'.
        CLEAR cv_format_value.
      ENDIF.
    ENDIF.

    IF is_header-fieldname_raw = gcs_sales_condition-additionalvaluedays_raw.
      IF cv_format_value IS INITIAL OR cv_format_value = '00'.
        CLEAR cv_format_value.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD FORMAT_CELLS_2_DATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA : lv_date_style TYPE string,
           lv_style_all  TYPE string.

    DATA(lo_node_cols) = ir_node_data->find_node( name = 'cols'  ).
    DATA(lo_node_rows) = lo_node_cols->get_children( ).

    "add style Date format
    DATA(lo_node) = ir_node->find_node( name = 'cellXfs' ).
    DATA(lo_node_first_style) = lo_node->get_first_child( )->clone( ).
    DATA(lo_attrs_map) = lo_node_first_style->get_attributes( ).
    lo_attrs_map->get_named_item_ns( name = 'numFmtId' )->set_value( '19' ).
    lv_date_style = lo_node->num_children( ).
    CONDENSE lv_date_style.
    lo_node->append_child( lo_node_first_style ).
    lv_style_all = lo_node->num_children( ).
    CONDENSE lv_style_all.

    DATA(lo_attrs_map_count) = lo_node->get_attributes( ).
    lo_attrs_map_count->get_named_item_ns( name = 'count' )->set_value( lv_style_all ).

  ENDMETHOD.


  METHOD FILL_REMARKS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lv_sequen_a TYPE char200,
          lv_sequen_b TYPE char200,
          lv_sequen_c TYPE char200,
          lv_sequen_d TYPE char200.

    CLEAR rv_remarks.
    CASE iv_fieldname_raw.
      WHEN gcs_sales_condition-conditionrecord_raw.
        rv_remarks = TEXT-025.

      WHEN gcs_sales_condition-conditionsequentialnumber_raw.
        lv_sequen_a = TEXT-029.
        lv_sequen_b = TEXT-030.
        lv_sequen_c = TEXT-031.
        lv_sequen_d = TEXT-032.
        CONCATENATE lv_sequen_a lv_sequen_b lv_sequen_c lv_sequen_d INTO rv_remarks SEPARATED BY space.

      WHEN gcs_sales_condition-conditionisscale_raw.
        rv_remarks = TEXT-037.

      WHEN gcs_sales_condition-conditionvaliditystartdate_raw.
        rv_remarks = TEXT-027.

      WHEN gcs_sales_condition-conditionvalidityenddate_raw.
        rv_remarks = TEXT-027.

      WHEN gcs_sales_condition-conditionratevalue_raw.
        rv_remarks = TEXT-033.

      WHEN gcs_sales_condition-conditionratevalueunit_raw.
        rv_remarks = TEXT-034.

      WHEN gcs_sales_condition-conditionquantity_raw.
        rv_remarks = TEXT-035.

      WHEN gcs_sales_condition-conditionquantityunit_raw.
        rv_remarks = TEXT-036.

      WHEN gcs_sales_condition-conditionscalequantityunit_raw.
        rv_remarks = TEXT-036.

      WHEN gcs_sales_condition-conditionscalequantity_raw.
        rv_remarks = TEXT-038.

      WHEN gcs_sales_condition-conditionscaleamount_raw.
        rv_remarks = TEXT-039.

      WHEN gcs_sales_condition-conditionscaleratevalue_raw.
        rv_remarks = TEXT-039.

      WHEN gcs_sales_condition-conditionscaleamountcurr_raw.
        rv_remarks = TEXT-040.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.


  METHOD FILL_HEADER_OF_FIELDS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA : cv_row1_desc TYPE string, "'Condition Type Key Combination List.'
           cv_row2_desc TYPE string, "'This sheet should be read-only. It provides a list of  fields that are allow to maintain.'
           cv_row3_desc TYPE string. "'Field names are unique technical identifiers xxxxxxxxxxxxxxxxxxxx.'.

    DATA: ls_cell                 TYPE if_salv_export_appendix=>ys_cell,
          lv_bgcolor_conkey       TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FF344A60', "RGB: 52，74，96
          lv_bgcolor_condesc      TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FF333F4F', "RGB: 51，63，79
          lv_bgcolor_field        TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFE699', "RGB: 255，230，153
          lv_fcolor               TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFFFFF', "white
          lv_header_fcolor        TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFFFF1', "white
          lt_se61_lines           TYPE STANDARD TABLE OF tline,
          ls_head                 TYPE thead,
          lv_shared_string_line   TYPE string,
          lt_shared_string_header TYPE STANDARD TABLE OF string.

    "Get text lines.
    CALL FUNCTION 'DOCU_GET'
      EXPORTING
        id                = 'TX'
        langu             = sy-langu
        object            = me->cv_tx_se61
      IMPORTING
        head              = ls_head
      TABLES
        line              = lt_se61_lines
      EXCEPTIONS
        no_docu_on_screen = 1
        no_docu_self_def  = 2
        no_docu_temp      = 3
        ret_code          = 4
        OTHERS            = 5.

    IF sy-subrc <> 0.
      "do nothing
    ELSE.
      CALL FUNCTION 'TEXT_CONTROL_REPLACE'
        EXPORTING
          header = ls_head
        TABLES
          lines  = lt_se61_lines.
    ENDIF.

    LOOP AT lt_se61_lines INTO DATA(ls_line).
      IF ls_line-tdformat IS NOT INITIAL . " New Line
        IF ls_line-tdformat = 'B1'.
          ls_line-tdline = '  *' && ls_line-tdline.
        ENDIF.

        IF ls_line-tdformat = 'AL'.
          ls_line-tdline = '   -'  && ls_line-tdline.
          REPLACE '-' WITH ' ' INTO ls_line-tdline.
        ENDIF.

        IF ls_line-tdformat = 'B2'.
          ls_line-tdline = '    -' && ls_line-tdline.
        ENDIF.
        IF ls_line-tdformat = 'U2'.
          CONCATENATE lv_shared_string_line ls_line-tdline INTO lv_shared_string_line SEPARATED BY cl_abap_char_utilities=>cr_lf.
        ELSE.
          CONCATENATE lv_shared_string_line ls_line-tdline INTO lv_shared_string_line SEPARATED BY cl_abap_char_utilities=>newline.
        ENDIF.

      ELSE.
        CONCATENATE lv_shared_string_line ls_line-tdline INTO lv_shared_string_line SEPARATED BY space.
      ENDIF.

      IF ls_line-tdline CS 'for data import.'.
        CONCATENATE lv_shared_string_line '' INTO lv_shared_string_line SEPARATED BY cl_abap_char_utilities=>cr_lf.
      ENDIF.

      AT LAST.
        IF lv_shared_string_line IS NOT INITIAL.
          APPEND lv_shared_string_line TO lt_shared_string_header.
          CLEAR lv_shared_string_line.
        ENDIF.
      ENDAT.
    ENDLOOP.

    cv_row1_desc = cv_combination_list.

    READ TABLE lt_shared_string_header INTO DATA(ls_shared) INDEX 1.
    IF sy-subrc = 0.
      cv_row1_desc = ls_shared.
    ENDIF.

    READ TABLE lt_shared_string_header INTO ls_shared INDEX 2.
    IF sy-subrc = 0.
      cv_row3_desc = ls_shared.
    ENDIF.

    "1st line:
    ls_cell           = VALUE #( row_index    = 1
                                 column_index = 1
                                 row_span     = 3
                                 column_span  = 6
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #( background_color = lv_bgcolor_conkey
                                                         is_bold          = abap_true
                                                         foreground_color = lv_fcolor
                                                         vertical_alignment   = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         is_text_wrapping_enabled = abap_true )
                                 value = cv_row1_desc ).

    APPEND ls_cell TO rt_cells.

    CLEAR : ls_cell.
    "2st line:
    ls_cell           = VALUE #( row_index    = 4
                                 column_index = 1
                                 row_span     = 0
                                 column_span  = 6
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #( background_color = lv_bgcolor_condesc
                                                         is_bold          = abap_false
                                                         foreground_color = lv_fcolor
                                                   vertical_alignment   = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         is_text_wrapping_enabled = abap_true )
                                 value = cv_row2_desc ).

    APPEND ls_cell TO rt_cells.

    CLEAR : ls_cell.
*
    "3st line:
    ls_cell           = VALUE #( row_index    = 5
                                 column_index = 1
                                 row_span     = 0
                                 column_span  = 6
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #( background_color = lv_bgcolor_condesc
                                                         is_bold          = abap_false
                                                         foreground_color = lv_fcolor
                                                         vertical_alignment   = if_salv_export_appendix=>cs_horizontal_alignment-center
                                                         horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         is_text_wrapping_enabled = abap_true )
                                 value = cv_row3_desc ).

    APPEND ls_cell TO rt_cells.

    CLEAR : ls_cell.
    "4st line: Blank
    ls_cell           = VALUE #( row_index    = 6
                                 column_index = 1
                                 row_span     = 0
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                                         vertical_alignment   = if_salv_export_appendix=>cs_horizontal_alignment-forced_left
                                                         horizontal_alignment = if_salv_export_appendix=>cs_vertical_alignment-top )
                                  ).

    APPEND ls_cell TO rt_cells.

    "5st line: Header
    "Column 1: Field Name
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 1
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                   is_bold          = abap_true
                                   foreground_color = lv_header_fcolor
                                   background_color = lv_bgcolor_condesc
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_true )
                                 value = TEXT-004 ).  "Field
    APPEND ls_cell TO rt_cells.

    "Column 2: Field Description
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 2
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                   is_bold          = abap_true
                                   foreground_color = lv_header_fcolor
                                   background_color = lv_bgcolor_condesc
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_true )
                                 value = TEXT-007 ). "Description
    APPEND ls_cell TO rt_cells.

    "Column 3: Property
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 3
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                   is_bold          = abap_true
                                   foreground_color = lv_header_fcolor
                                   background_color = lv_bgcolor_condesc
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_true )
                                 value = TEXT-022 ).  "Property
    APPEND ls_cell TO rt_cells.

    "Column 4: Max. Length
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 4
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                   is_bold          = abap_true
                                   foreground_color = lv_header_fcolor
                                   background_color = lv_bgcolor_condesc
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_true )
                                 value = TEXT-006 ).  "Length
    APPEND ls_cell TO rt_cells.

    "Column 5: Decimals
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 5
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                   is_bold          = abap_true
                                   foreground_color = lv_header_fcolor
                                   background_color = lv_bgcolor_condesc
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_true )
                                 value = TEXT-028 ).  "Decimals
    APPEND ls_cell TO rt_cells.

    "Column 6: Remarks
    CLEAR : ls_cell.
    ls_cell = VALUE #(           row_index    = iv_begin_row
                                 column_index = 6
                                 row_span     = 2
                                 column_span  = 0
                                 content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                 formatting   = VALUE #(
                                 is_bold      = abap_true
                                 foreground_color = lv_header_fcolor
                                 background_color = lv_bgcolor_condesc
                                 vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                        horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-center
                                   is_text_wrapping_enabled = abap_false )
                                 value = TEXT-021 ). "Remarks
    APPEND ls_cell TO rt_cells.

  ENDMETHOD.


  METHOD FILL_ATTRIBUTES_OF_FIELDS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: ls_cell            TYPE if_salv_export_appendix=>ys_cell,
          lv_bgcolor_conkey  TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FF344A60', "RGB: 52，74，96
          lv_bgcolor_condesc TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FF333F4F', "RGB: 51，63，79
          lv_bgcolor_field   TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFE699', "RGB: 255，230，153
          lv_fcolor          TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFFFFF', "white
          lv_header_fcolor   TYPE if_salv_export_appendix=>y_hex_argb_color VALUE 'FFFFFFF1', "white
          lv_chartmp         TYPE char10,
          lt_dd07v_a         TYPE TABLE OF dd07v,
          lt_dd07v_n         TYPE TABLE OF dd07v,
          lt_dd01l           TYPE TABLE OF dd01l,
          lv_description     TYPE string,
          lv_property        TYPE string,
          lv_remarks         TYPE string,
          lv_decimals        TYPE string,
          lv_sequen_a        TYPE char200,
          lv_sequen_b        TYPE char200,
          lv_sequen_c        TYPE char200,
          lv_sequen_d        TYPE char200.

    LOOP AT it_header INTO DATA(ls_header).
      DATA(lv_index) = sy-tabix + 1.
      READ TABLE me->mt_field_list INTO DATA(ls_flist)
                                   WITH KEY fieldname = ls_header-fieldname_ext BINARY SEARCH.

      "Column 1: Field Name
      CLEAR ls_cell.
      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 1
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = ls_header-fieldname_raw ).  "Field
      APPEND ls_cell TO rt_cells.

      READ TABLE it_header INDEX lv_index - 2 INTO DATA(ls_last_header).
      IF sy-subrc = 0.
        IF ls_header-fieldname_int = ls_last_header-fieldname_int.
          READ TABLE rt_cells WITH KEY value = ls_last_header-fieldname_raw INTO DATA(ls_cell_header).
          IF sy-subrc = 0.
            LOOP AT rt_cells ASSIGNING FIELD-SYMBOL(<fs_cell>) WHERE row_index = ls_cell_header-row_index AND column_index <> 1.
              <fs_cell>-row_span = 2.
            ENDLOOP.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

      "Column 2: Field Description
      "Get labels
      DATA(lv_label) = get_label( ls_header-fieldname_raw  ).
      CLEAR ls_cell.
      CLEAR:lv_description,lv_property.
      IF ls_header-fieldname_raw = gcs_sales_condition-conditionrecord_raw
        OR ls_header-fieldname_raw = gcs_sales_condition-conditionsequentialnumber_raw
        OR ls_header-fieldname_raw = gcs_sales_condition-conditiontype_raw
        OR ls_header-fieldname_raw = gcs_sales_condition-conditiontable_raw
        OR ls_header-fieldname_raw = gcs_sales_condition-conditionratevalueunit_raw.
        CONCATENATE '*' lv_label INTO lv_description.
        lv_property = TEXT-023. "'Required'.
      ELSE.
        lv_description = lv_label.
        lv_property = TEXT-024. "'Optional'.
      ENDIF.

      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 2
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = lv_description ).  "Description
      APPEND ls_cell TO rt_cells.

      "Column 3: Property
      CLEAR ls_cell.
      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 3
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = lv_property ).  "Property
      APPEND ls_cell TO rt_cells.

      "Column 4: Max. Length
      CLEAR ls_cell.
      IF ls_header-fieldname_raw = gcs_sales_condition-conditionscaleratevalue_raw.
        DATA(lv_fieldname) = gcs_sales_condition-conditionratevalue_raw.
        TRANSLATE lv_fieldname TO UPPER CASE.
        READ TABLE me->mt_field_list INTO ls_flist
                                     WITH KEY fieldname = lv_fieldname BINARY SEARCH.
      ENDIF.
      CLEAR:lv_chartmp.
      lv_chartmp = ls_flist-leng.
      SHIFT lv_chartmp LEFT DELETING LEADING '0'.
      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 4
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = lv_chartmp ).  "Length
      APPEND ls_cell TO rt_cells.

      "Column 5: Decimals
      CLEAR ls_cell.
      CLEAR lv_decimals.
      IF ls_flist-inttype = 'P' OR ls_flist-inttype = 'F'.
        IF ls_flist-decimals = 0.
          lv_decimals = '0'.
        ELSE.
          lv_decimals = ls_flist-decimals.
          SHIFT lv_decimals LEFT DELETING LEADING '0'.
        ENDIF.
      ENDIF.
      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 5
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = lv_decimals ).  "Decimals
      APPEND ls_cell TO rt_cells.

      "Column 6: Remarks
      CLEAR ls_cell.
      lv_remarks = fill_remarks( ls_header-fieldname_raw ).

      ls_cell = VALUE #(           row_index    = iv_begin_row + lv_index
                                   column_index = 6
                                   row_span     = 0
                                   column_span  = 0
                                   content_type = if_salv_export_appendix=>cs_cell_content_type-text
                                   formatting   = VALUE #(
                                   is_bold      = abap_false
                                   is_text_wrapping_enabled = abap_true
                                   vertical_alignment   = if_salv_export_appendix=>cs_vertical_alignment-center
                                                          horizontal_alignment = if_salv_export_appendix=>cs_horizontal_alignment-forced_left )
                                   value = lv_remarks ).  "Remarks
      APPEND ls_cell TO rt_cells.
    ENDLOOP.
  ENDMETHOD.


  METHOD DOWNLOAD_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lt_cond_key TYPE tt_header_desc,
          ls_block    TYPE if_salv_export_appendix=>ys_block,
          lt_blocks   TYPE if_salv_export_appendix=>yts_block.

    "Set flag
    me->mv_template_flag = abap_true.
    READ TABLE it_key_tab INTO DATA(ls_key) WITH KEY name = gcs_sales_condition-filterstring.
    get_item_option(
      EXPORTING
        iv_filterstring = ls_key-value
      IMPORTING
        et_contype      = DATA(lt_contype)
    ).

    IF lt_contype IS NOT INITIAL.
      ev_content = me->download( it_key_tab = it_key_tab ).
    ELSE."Condition type is null
      me->get_all_fields_cds( IMPORTING et_condition_key = lt_cond_key ).  "
      me->set_header_template( EXPORTING it_condition_key = lt_cond_key
                               IMPORTING et_cell = me->mt_header_list et_header = DATA(lt_header) ).

      ls_block = VALUE #( ordinal_number = 1
                          location = if_salv_export_appendix=>cs_appendix_location-top
                          name = cv_condition_data "Condition Data
                          cells = me->mt_header_list
           ).
      APPEND ls_block TO lt_blocks.

      me->convert_2_xstring_template(
       EXPORTING
         it_blocks  = lt_blocks
       IMPORTING
         ev_content = ev_content ).
    ENDIF.

  ENDMETHOD.


  METHOD DOWNLOAD_LOG.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lv_is_error_log TYPE boolean.
    DATA: lt_kschl TYPE ty_kschl_t,
          ls_kschl TYPE LINE OF ty_kschl_t.
    me->mv_log_flag = 'X'.
    READ TABLE it_key_tab INTO DATA(ls_type_tab) WITH KEY name = 'TYPE'.
    CHECK sy-subrc = 0.
    READ TABLE it_key_tab INTO DATA(ls_key_tab) WITH KEY name = 'UUID'.
    IF sy-subrc EQ 0.
      "Get upload message
      IF ls_type_tab-value = 'E'.
        SELECT * FROM cndn_upld_msg WHERE uuid = @ls_key_tab-value AND log_no IS NOT INITIAL INTO TABLE @DATA(lt_db_msg) .
        lv_is_error_log = abap_true.
      ELSEIF ls_type_tab-value = 'S'.
        SELECT * FROM cndn_upld_msg WHERE uuid = @ls_key_tab-value AND log_no IS INITIAL INTO TABLE @lt_db_msg .
        lv_is_error_log = abap_false.
      ELSE.
        RETURN.
      ENDIF.

      IF lt_db_msg IS NOT INITIAL.
        LOOP AT lt_db_msg INTO DATA(ls_db_msg).
          CLEAR ls_kschl.
          ls_kschl-sign = 'I'.
          ls_kschl-option = 'EQ'.
          ls_kschl-low = ls_db_msg-kschl.
          APPEND ls_kschl TO lt_kschl.
        ENDLOOP.
        SORT lt_kschl BY low.
        DELETE ADJACENT DUPLICATES FROM lt_kschl.

        me->get_cond_key_for_template( EXPORTING it_kschl = lt_kschl IMPORTING et_condition_key = DATA(lt_condition_key) ).

        "Set header
        me->set_header(
          EXPORTING
            iv_islog         = lv_is_error_log
            it_condition_key = lt_condition_key
          IMPORTING
            et_cell          = me->mt_header_list
            et_header        = DATA(lt_header)
        ).

        me->set_values_to_log(
          EXPORTING
            it_header      = lt_header
            it_cell_header = me->mt_header_list
            it_upld_msg    = lt_db_msg
          IMPORTING
            et_blocks      = DATA(lt_blocks)
            et_data        = DATA(lt_data) ).

        "Xslx to xstring
        me->convert_xslx_to_xstring(
          EXPORTING
            it_data    = lt_data
            it_blocks  = lt_blocks
          IMPORTING
            ev_content = ev_content
        ).
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD DOWNLOAD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    "Get data
    IF me->mv_template_flag = abap_false.
      me->get_condition(
       EXPORTING
         it_key_tab                    = it_key_tab
         iv_where                      = iv_where
       IMPORTING
         et_condition_validity         = DATA(lt_validity)
         et_condition_record           = DATA(lt_record)
         et_condition_supplement       = DATA(lt_supplement)
         et_condition_scale            = DATA(lt_scale)
         es_cndn_query_option_response = DATA(ls_response)
         et_condition_record_text      = DATA(lt_record_text)
         et_condition_supplement_text  = DATA(lt_supplement_text)
     ).
      READ TABLE it_key_tab INTO DATA(ls_text_tab) WITH KEY name = gcs_sales_condition-textflag.
      IF sy-subrc <> 0.
        mv_text_flag = abap_false.
      ELSE.
        mv_text_flag = ls_text_tab-value.
      ENDIF.
      IF mv_text_flag = abap_true.
        me->get_text(
          EXPORTING
            it_validity     = lt_validity
            it_record       = lt_record
          IMPORTING
            et_anno_element = me->mt_anno_element                 " Name von Elementen und Annotationen mit Wert und Wertquelle
        ).
      ENDIF.

      "Conversion
      me->convert_internal_2_external(
        CHANGING
          ct_condition_validity   = lt_validity
          ct_condition_record     = lt_record
          ct_condition_scale      = lt_scale
          ct_condition_supplement = lt_supplement
      ).
    ENDIF.

    "Add data of template to download
    me->add_template_2_download(
      EXPORTING
        it_key_tab   = it_key_tab
        iv_where     = iv_where
        it_record    = lt_record
      IMPORTING
        et_data_temp = DATA(lt_data_temp)
        et_cells     = DATA(lt_cells)
        ev_bg_row    = me->gv_bg_row
    ).

    CLEAR: me->mt_cond_key.

    "Get condition key for data
    me->get_condition_key(
      EXPORTING
        it_record        = lt_record
      IMPORTING
        et_condition_key = DATA(lt_condition_key)
    ).

    "Set header for excel
    me->set_header(
      EXPORTING
        it_condition_key = lt_condition_key
      IMPORTING
        et_cell          = me->mt_header_list
        et_header        = DATA(lt_header)
    ).

    "Set values for cells
    me->set_values(
      EXPORTING
        it_scale            = lt_scale
        it_supplement       = lt_supplement
        it_validity         = lt_validity
        it_record           = lt_record
        it_header           = lt_header
        it_record_text      = lt_record_text
        it_supplement_text  = lt_supplement_text
        it_cell_header      = me->mt_header_list
      IMPORTING
        et_blocks           = DATA(lt_blocks)
        et_data             = DATA(lt_data)
    ).

    "Set style for sheet1 and sheet2 etc.
    me->convert_xslx_to_xstring(
      EXPORTING
        it_data_temp = lt_data_temp
        it_data      = lt_data
        it_blocks    = me->merge_cells(
                       it_blocks = lt_blocks
                       it_cells  = lt_cells )
      IMPORTING
        ev_content   = ev_content
    ).
  ENDMETHOD.


  METHOD CONVERT_XSLX_TO_XSTRING.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
* BOBRULA      | 07.11.2023 | 26564 : Pricing Mass Upload Tool         *
*              |            | DS4K969470                               *
*----------------------------------------------------------------------*
    DATA: lo_tool_xls             TYPE REF TO cl_salv_export_tool_ats,
          lr_appendix             TYPE REF TO if_salv_export_appendix=>yts_block,
          lo_table_row_descriptor TYPE REF TO cl_abap_structdescr,
          lo_source_table_descr   TYPE REF TO cl_abap_tabledescr,
          lr_data                 TYPE REF TO data,
          lo_xml_document_data    TYPE REF TO cl_xml_document,
          lo_formarted            TYPE xstring,
          lo_node                 TYPE REF TO if_ixml_node,
          lo_attrs_map            TYPE REF TO if_ixml_named_node_map,
          lv_topleftcell_value    TYPE string,
          lv_row_s                TYPE string,
          lv_header_row_index     TYPE i.

    GET REFERENCE OF it_data INTO lr_data.

    lo_source_table_descr ?= cl_abap_tabledescr=>describe_by_data_ref( lr_data ).
    lo_table_row_descriptor ?= lo_source_table_descr->get_table_line_type( ).

    DATA(lo_itab_services) = cl_salv_itab_services=>create_for_table_ref( lr_data ).

    lo_tool_xls = cl_salv_export_tool_ats_xls=>create_for_excel_from_ats(
                      io_itab_services       = lo_itab_services
                      io_source_struct_descr = lo_table_row_descriptor
                      it_aggregation_rules   = VALUE if_salv_service_types=>yt_aggregation_rule( )
                      it_grouping_rules      = VALUE if_salv_service_types=>yt_grouping_rule( ) ).

    DATA(lo_config) = lo_tool_xls->configuration( ).
    GET REFERENCE OF it_blocks INTO lr_appendix.

    lo_config->if_salv_export_appendix~set_blocks( lr_appendix ).

    TRY.
        TEST-SEAM read_result.
          lo_tool_xls->read_result( IMPORTING content = ev_content  ).
        end-test-seam.
      CATCH cx_salv_export_error INTO DATA(lr_export_error).
        RETURN.
    ENDTRY.

    TRY .
        DATA(lo_xlsx_doc) = cl_xlsx_document=>load_document( ev_content ).
        DATA(lo_workbookpart) = lo_xlsx_doc->get_workbookpart( ).
        DATA(lo_wordsheetparts) = lo_workbookpart->get_worksheetparts( ).
        IF me->mv_log_flag = 'X'.
          DATA(lo_wordsheetpart) = lo_wordsheetparts->get_part( 0 ).
        ELSE.
          lo_wordsheetpart = lo_wordsheetparts->get_part( 1 ).
        ENDIF.

        DATA(lo_sheet_content) = lo_wordsheetpart->get_data( ).

      CATCH cx_openxml_format cx_openxml_not_found INTO DATA(lx_openxml).
        "do something
    ENDTRY.

    CREATE OBJECT lo_xml_document_data.
    lo_xml_document_data->parse_xstring( lo_sheet_content ).
    lo_xml_document_data->render_2_xstring( IMPORTING stream = lo_formarted ).
    lo_wordsheetpart->feed_data( lo_formarted ).

    " remove frozen setting
    lv_header_row_index = 3.
    IF me->gv_bg_row <> 0.
      lv_header_row_index = me->gv_bg_row + 4.
    ENDIF.

    lv_topleftcell_value = |{ lv_header_row_index + 1 }|.
    lv_row_s = lv_header_row_index.
    CONCATENATE 'A' lv_topleftcell_value INTO lv_topleftcell_value.

    lo_node = lo_xml_document_data->find_node( 'pane' ).
    IF lo_node IS NOT INITIAL.
      lo_attrs_map = lo_node->get_attributes( ).
      lo_attrs_map->get_named_item_ns( 'ySplit' )->set_value( |{ lv_header_row_index }| ).
      lo_attrs_map->get_named_item_ns( 'topLeftCell' )->set_value( lv_topleftcell_value ).
    ELSE.
      DATA(lo_node_sheetview) = lo_xml_document_data->find_node( 'sheetView' ).
      DATA(lo_node_pane) = lo_node_sheetview->get_first_child( )->clone( ).
      lo_node_pane->set_name( 'pane' ).

      DATA(lo_attrs_pane) = lo_node_pane->get_attributes( ).
      DATA(lo_attr_stat) = lo_attrs_pane->get_named_item_ns( 'activeCell' )->clone( ).
      lo_attr_stat->set_name( 'state' ).
      lo_attr_stat->set_value( 'frozen' ).
      lo_attrs_pane->set_named_item_ns( lo_attr_stat ).
      DATA(lo_attr_activepane) = lo_attrs_pane->get_named_item_ns( 'activeCell' )->clone( ).
      lo_attr_activepane->set_name( 'activePane' ).
      lo_attr_activepane->set_value( 'bottomLeft' ).
      lo_attrs_pane->set_named_item_ns( lo_attr_activepane ).
      DATA(lo_attr_topleftcell) = lo_attrs_pane->get_named_item_ns( 'activeCell' )->clone( ).
      lo_attr_topleftcell->set_name( 'topLeftCell' ).
      lo_attr_topleftcell->set_value( lv_topleftcell_value ).
      lo_attrs_pane->set_named_item_ns( lo_attr_topleftcell ).
      DATA(lo_attr_ysplit) = lo_attrs_pane->get_named_item_ns( 'activeCell' )->clone( ).
      lo_attr_ysplit->set_name( 'ySplit' ).
      lo_attr_ysplit->set_value( |{ lv_header_row_index }|  ).
      lo_attrs_pane->set_named_item_ns( lo_attr_ysplit ).
      lo_attrs_pane->remove_named_item_ns( 'activeCell' ).
      lo_attrs_pane->remove_named_item_ns( 'sqref' ).
      lo_node_sheetview->insert_child(
        EXPORTING
          new_child = lo_node_pane                 " Reference to sub node to insert
          ref_child = lo_node_sheetview->get_first_child( )              " See Long Text
      ).
    ENDIF.

* for group function
    READ TABLE it_blocks INTO DATA(ls_block) INDEX 2.
    DATA(lt_cells) = ls_block-cells.
    DELETE lt_cells WHERE row_index <> me->gv_bg_row + 3.
    DELETE lt_cells WHERE column_span <> 2.

    DATA(lv_count) = 0.

    lo_node = lo_xml_document_data->find_node( 'cols' ).
    " Set Column Width
    DATA(lo_node_col_ht) = lo_node->get_first_child( ).
    WHILE lo_node_col_ht IS NOT INITIAL AND lo_node_col_ht IS BOUND.
      lv_count = lv_count + 1.
      DATA(lo_atrs_map_col_ht) = lo_node_col_ht->get_attributes( ).
      DATA(lo_node_atrr_col_ht) = lo_atrs_map_col_ht->get_named_item_ns( name = 'min')->clone( ).
      lo_node_atrr_col_ht->set_name( 'width' ).
      lo_node_atrr_col_ht->set_value( '15' ).
      lo_atrs_map_col_ht->set_named_item_ns( node = lo_node_atrr_col_ht ).

      READ TABLE lt_cells WITH KEY column_index = lv_count - 1 TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
      lo_node_atrr_col_ht = lo_atrs_map_col_ht->get_named_item_ns( name = 'min')->clone( ).
      lo_node_atrr_col_ht->set_name( 'outlineLevel' ).
      lo_node_atrr_col_ht->set_value( '1' ).
      lo_atrs_map_col_ht->set_named_item_ns( node = lo_node_atrr_col_ht ).
      ENDIF.

      lo_node_col_ht = lo_node_col_ht->get_next( ).

    ENDWHILE.

    " Get format settings of root node row
    DATA(lo_node_sheetdata) = lo_xml_document_data->find_node( 'sheetData' ).
    DATA(lv_root_row_index) = 4 + 1.
    IF me->gv_bg_row <> 0.
      lv_root_row_index = me->gv_bg_row + 5.
    ENDIF.
    DATA(lo_node_root_row) = me->get_nth_child( io_node = lo_node_sheetdata iv_n = lv_root_row_index - 1 ).
*
    DATA(lo_node_c_1) = me->get_nth_child( io_node = lo_node_root_row iv_n = 1 ).
    IF lo_node_c_1 IS BOUND.
      DATA(lv_style_c_1) = CONV int4( lo_node_c_1->get_attributes( )->get_named_item_ns( 's' )->get_value( ) ).
    ENDIF.

    DATA(lo_node_c_2) = me->get_nth_child( io_node = lo_node_root_row iv_n = 2 ).
    IF lo_node_c_2 IS BOUND.
      DATA(lv_style_c_2) = CONV int4( lo_node_c_2->get_attributes( )->get_named_item_ns( 's' )->get_value( ) ).
    ENDIF.

    "Set row of GFN with height to 2px for data
    DATA(lo_node_rows_ht) = lo_node_sheetdata->get_children( ).
    DATA(lo_node_sheetdata_ht) = lo_node_rows_ht->get_item( me->gv_bg_row + 2 ).
    IF lo_node_sheetdata_ht IS BOUND.
      DATA(lo_atrs_map_ht) = lo_node_sheetdata_ht->get_attributes( ).
      " reference node 'r'
      DATA(lo_node_atrr_ht) = lo_atrs_map_ht->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht->set_name( 'ht' ).
      lo_node_atrr_ht->set_value( '2' ).
      lo_atrs_map_ht->set_named_item_ns( node = lo_node_atrr_ht ).

      lo_node_atrr_ht = lo_atrs_map_ht->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht->set_name( 'customHeight' ).
      lo_node_atrr_ht->set_value( '1' ).
      lo_atrs_map_ht->set_named_item_ns( node = lo_node_atrr_ht ).
    ENDIF.

    "Set row of GFN with height to 2px for template
    DATA(lo_node_sheetdata_ht2) = lo_node_rows_ht->get_item( 2 ).
    IF lo_node_sheetdata_ht2 IS BOUND.
      " reference node 'r'
      DATA(lo_atrs_map_ht2) = lo_node_sheetdata_ht2->get_attributes( ).
      DATA(lo_node_atrr_ht2) = lo_atrs_map_ht2->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht2->set_name( 'ht' ).
      lo_node_atrr_ht2->set_value( '2' ).
      lo_atrs_map_ht2->set_named_item_ns( node = lo_node_atrr_ht2 ).

      lo_node_atrr_ht2 = lo_atrs_map_ht2->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht2->set_name( 'customHeight' ).
      lo_node_atrr_ht2->set_value( '1' ).
      lo_atrs_map_ht2->set_named_item_ns( node = lo_node_atrr_ht2 ).
    ENDIF.

    " row index start from 0, if input nothing, the row will be ignored from index|  hide ETAG
    READ TABLE me->mt_header_list INTO DATA(ls_header_list) WITH KEY value = 'ETag'.
    DATA(lo_node_sheet_cols) = lo_xml_document_data->find_node( 'cols' ).
    DATA(lo_node_rows) = lo_node_sheet_cols->get_children( ).
    IF lo_node_rows IS BOUND.
      DATA(lo_node_etag) = lo_node_rows->get_item( ls_header_list-column_index - 1 ).
      IF lo_node_etag IS BOUND.
        DATA(lo_attrs_map_etag) = lo_node_etag->get_attributes( ).
        IF lo_attrs_map_etag IS BOUND.
          " reference node 'r'
          DATA(lo_node_attr_tag) = lo_attrs_map_etag->get_named_item_ns( name = 'bestFit' )->clone( ).
          IF lo_node_attr_tag IS BOUND.
            lo_node_attr_tag->set_name( 'hidden' ).
            lo_node_attr_tag->set_value( '1' ).
            lo_attrs_map_etag->set_named_item_ns( node = lo_node_attr_tag ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    TRY .
        DATA(lo_uri) = cl_openxml_parturi=>create_from_filename( 'xl/styles.xml' ).
        DATA(lo_stylepart) = lo_xlsx_doc->get_part_by_uri( ir_parturi = lo_uri ).
      CATCH cx_openxml_format cx_openxml_not_found INTO DATA(lx_openxml_style).
    ENDTRY.

    " Get format settings of root node row
    DATA lo_xml_document_style TYPE REF TO cl_xml_document.
    CREATE OBJECT lo_xml_document_style.
    lo_xml_document_style->parse_xstring( lo_stylepart->get_data( ) ).

    " Get node <protection locked="0">
    DATA(lo_node_protection) = lo_xml_document_style->find_node( 'protection' )->clone( ).
*
    DATA(lo_node_cellxfs) = lo_xml_document_style->find_node( 'cellXfs' ).
    DATA(lv_xf_count) = CONV int4( lo_node_cellxfs->get_attributes( )->get_named_item_ns( 'count' )->get_value( ) ).
    lo_node_cellxfs->get_attributes( )->get_named_item_ns( 'count' )->set_value( CONV string( lv_xf_count + 2 ) ).

    " Copy and create the xf to be unlocked
    DATA lt_node_xf_selected LIKE TABLE OF lo_node_cellxfs.
    APPEND me->get_nth_child( io_node = lo_node_cellxfs iv_n = lv_style_c_1 + 1 ) TO lt_node_xf_selected.
    APPEND me->get_nth_child( io_node = lo_node_cellxfs iv_n = lv_style_c_2 + 1 ) TO lt_node_xf_selected.

    LOOP AT lt_node_xf_selected INTO DATA(lo_node_xf_selected).
      DATA(lv_index) = sy-tabix.
      IF lo_node_xf_selected IS BOUND.
        DATA(lo_node_xf_unlock) = lo_node_xf_selected->clone( ).
        DATA(lo_attr_xf_unlock) = lo_node_xf_unlock->get_attributes( ).

        IF lv_index = 1.
          " Clear the background color
          lo_attr_xf_unlock->get_named_item_ns( 'fillId' )->set_value( '0' ).
        ENDIF.

        " Set the numFmtId to 49 to format the cells into text
        lo_attr_xf_unlock->get_named_item_ns( 'numFmtId' )->set_value( '49' ).

        DATA(lo_attr_applyprotection) = lo_attr_xf_unlock->get_named_item_ns( 'applyAlignment' )->clone( ).
        lo_attr_applyprotection->set_name( 'applyProtection' ).
        lo_attr_applyprotection->set_value( '1' ).
        lo_attr_xf_unlock->set_named_item_ns( lo_attr_applyprotection ).

        lo_node_xf_unlock->append_child( lo_node_protection->clone( ) ).
        lo_node_cellxfs->append_child( lo_node_xf_unlock ).
      ENDIF.
    ENDLOOP.

    " Set the existing cells to be unlocked
    DATA(lo_node_hier_row) = lo_node_root_row.
    DATA lv_hier_index TYPE int4 VALUE 0.
    DATA(lv_hier_lines) = lines( it_data ).

    " Get field description of header.
    DELETE me->mt_header_list WHERE row_index <> lv_header_row_index.
    DATA(lv_svalue) = |{ lv_xf_count }|.

    DATA(lv_logflag) = me->mv_log_flag.

    IF me->mv_log_flag = 'X'.
      me->mv_log_flag = ''.
    ENDIF.

    "Set template is edit
    IF me->mv_log_flag = 'X'.
      me->format_template( EXPORTING iv_cell_value = lv_svalue it_data = it_data
                           CHANGING ir_root_row = lo_node_hier_row  ).
    ELSE.  "Set download is edit
      "format template cells for download
      me->mv_log_flag = lv_logflag.

      DATA(lo_node_hier_row_temp) = me->get_nth_child( io_node = lo_node_sheetdata iv_n = 4 ).
      me->format_template( EXPORTING iv_cell_value = lv_svalue it_data = it_data_temp
                           CHANGING ir_root_row = lo_node_hier_row_temp  ).

      DATA(lv_rows) = 0.
      WHILE lo_node_hier_row IS BOUND.
        lv_rows += 1.
        DATA(lo_node_hier_next) = lo_node_hier_row->get_next( ).

        IF lv_hier_index < lv_hier_lines.

          "Setting Text
          DATA(lv_while_count) = 1.
          DATA(lo_node_rest_c) = lo_node_hier_row->get_first_child( ).
          LOOP AT me->mt_header_list INTO DATA(ls_text)
                                     WHERE value = 'ConditionSequentialNumber'
                                        OR value = 'ConditionRecord'
                                        OR value = 'DistributionChannel'
                                        OR value = 'ConditionTable'
                                        OR value = 'SalesOrganization'.
            DATA(lo_node_text) = lo_node_rest_c->get_next( ).
            WHILE ( lv_while_count < ls_text-column_index - 1 ).
              lo_node_text = lo_node_text->get_next( ).
              lv_while_count = lv_while_count + 1.
            ENDWHILE.

            IF lo_node_text IS BOUND.
              lo_node_text->get_attributes( )->get_named_item_ns( 's' )->set_value( |{ lv_xf_count + 1 }| ).
            ENDIF.
            lv_while_count = 1.
          ENDLOOP.

          READ TABLE it_data INTO DATA(ls_data) INDEX lv_rows.
          IF ls_data-conditionisscale <> 'X'.

            "Setting ConditionRateValue is edit
            lv_while_count = 1.
            READ TABLE me->mt_header_list INTO DATA(ls_ratevalue) WITH KEY value = 'ConditionRateValue'.
            IF sy-subrc EQ 0.

              DATA(lo_node_ratevalue) = lo_node_rest_c->get_next( ).
              WHILE ( lv_while_count < ls_ratevalue-column_index - 1 ).
                lo_node_ratevalue = lo_node_ratevalue->get_next( ).
                lv_while_count = lv_while_count + 1.
              ENDWHILE.

              IF lo_node_ratevalue IS BOUND.
                lo_node_ratevalue->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
              ENDIF.
            ENDIF.

            "Setting ConditionLowerLimit editable
            lv_while_count = 1.
            READ TABLE me->mt_header_list INTO DATA(ls_conditionlowerlimit) WITH KEY value = 'ConditionLowerLimit'.
            IF sy-subrc EQ 0.
              DATA(lo_node_conditionlowerlimit) = lo_node_rest_c->get_next( ).
              WHILE ( lv_while_count < ls_conditionlowerlimit-column_index - 1 ).
                lo_node_conditionlowerlimit = lo_node_conditionlowerlimit->get_next( ).
                lv_while_count = lv_while_count + 1.
              ENDWHILE.

              IF lo_node_conditionlowerlimit IS BOUND.
                lo_node_conditionlowerlimit->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
              ENDIF.
            ENDIF.

            "Setting ConditionUpperLimit editable
            lv_while_count = 1.
            READ TABLE me->mt_header_list INTO DATA(ls_conditionupperlimit) WITH KEY value = 'ConditionUpperLimit'.
            IF sy-subrc EQ 0.
              DATA(lo_node_conditionupperlimit) = lo_node_rest_c->get_next( ).
              WHILE ( lv_while_count < ls_conditionupperlimit-column_index - 1 ).
                lo_node_conditionupperlimit = lo_node_conditionupperlimit->get_next( ).
                lv_while_count = lv_while_count + 1.
              ENDWHILE.

              IF lo_node_conditionupperlimit IS BOUND.
                lo_node_conditionupperlimit->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
              ENDIF.
            ENDIF.

            "Setting ConditionText is edit
            lv_while_count = 1.
            READ TABLE me->mt_header_list INTO DATA(ls_conditiontext) WITH KEY value = 'ConditionText'.
            IF sy-subrc EQ 0.
              DATA(lo_node_conditiontext) = lo_node_rest_c->get_next( ).
              WHILE ( lv_while_count < ls_conditiontext-column_index - 1 ).
                lo_node_conditiontext = lo_node_conditiontext->get_next( ).
                lv_while_count = lv_while_count + 1.
              ENDWHILE.

              IF lo_node_conditiontext IS BOUND.
                lo_node_conditiontext->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
              ENDIF.
            ENDIF.

            "Supplement
            IF ls_data-conditionsequentialnumber = '001'.
*            Setting ConditionValidityStartDate is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_startdate) WITH KEY value = 'ConditionValidityStartDate'.
              IF sy-subrc EQ 0.

                DATA(lo_node_startdate) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_startdate-column_index - 1 ).
                  lo_node_startdate = lo_node_startdate->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_startdate IS BOUND.
                  lo_node_startdate->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.

              "Setting ConditionValidityEndDate is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_enddate) WITH KEY value = 'ConditionValidityEndDate'.
              IF sy-subrc EQ 0.
                DATA(lo_node_enddate) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_enddate-column_index - 1 ).
                  lo_node_enddate = lo_node_enddate->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_enddate IS BOUND.
                  lo_node_enddate->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.

              "Setting ConditionExclusion is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_exclusion) WITH KEY value = 'ConditionExclusion'.
              IF sy-subrc EQ 0.
                DATA(lo_node_exclusion) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_exclusion-column_index - 1 ).
                  lo_node_exclusion = lo_node_exclusion->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_exclusion IS BOUND.
                  lo_node_exclusion->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.

              "Setting PaymentTerms is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_paymentterms) WITH KEY value = 'PaymentTerms'.
              IF sy-subrc EQ 0.
                DATA(lo_node_paymentterms) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_paymentterms-column_index - 1 ).
                  lo_node_paymentterms = lo_node_paymentterms->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_paymentterms IS BOUND.
                  lo_node_paymentterms->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.

              "Setting FixedValueDate is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_fixedvaluedate) WITH KEY value = 'FixedValueDate'.
              IF sy-subrc EQ 0.
                DATA(lo_node_fixedvaluedate) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_fixedvaluedate-column_index - 1 ).
                  lo_node_fixedvaluedate = lo_node_fixedvaluedate->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_fixedvaluedate IS BOUND.
                  lo_node_fixedvaluedate->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.

              "Setting AdditionalValueDays is edit
              lv_while_count = 1.
              READ TABLE me->mt_header_list INTO DATA(ls_additionalvaluedays) WITH KEY value = 'AdditionalValueDays'.
              IF sy-subrc EQ 0.
                DATA(lo_node_additionalvaluedays) = lo_node_rest_c->get_next( ).
                WHILE ( lv_while_count < ls_additionalvaluedays-column_index - 1 ).
                  lo_node_additionalvaluedays = lo_node_additionalvaluedays->get_next( ).
                  lv_while_count = lv_while_count + 1.
                ENDWHILE.

                IF lo_node_additionalvaluedays IS BOUND.
                  lo_node_additionalvaluedays->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                ENDIF.
              ENDIF.
*            Setting Data Fields is edit

              READ TABLE mt_fields WITH KEY kotabnr = ls_data-conditiontable INTO DATA(ls_fields).
              LOOP AT ls_fields-data_fields INTO DATA(ls_data_fields).
                lv_while_count = 1.
                READ TABLE me->mt_header_list INTO DATA(ls_data_field) WITH KEY value = ls_data_fields-fieldname."#EC CI_SORTSEQ
                IF sy-subrc EQ 0.

                  DATA(lo_node_data_field) = lo_node_rest_c->get_next( ).
                  WHILE ( lv_while_count < ls_data_field-column_index - 1 ).
                    lo_node_data_field = lo_node_data_field->get_next( ).
                    lv_while_count = lv_while_count + 1.
                  ENDWHILE.

                  IF lo_node_data_field IS BOUND.
                    lo_node_data_field->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                  ENDIF.
                  CLEAR lo_node_data_field.
                ENDIF.

              ENDLOOP.

            ENDIF.
          ELSE. " scale
            CASE ls_data-pricingscalebasis.
              WHEN 'B'. "Value scale
                lv_while_count = 1.
                LOOP AT me->mt_header_list INTO DATA(ls_quantity)
                                           WHERE value = 'ConditionScaleAmount'
                                              OR value = 'ConditionScaleAmountCurrency'
                                              OR value = 'ConditionScaleRateValue'.
                  DATA(lo_node_quantity) = lo_node_rest_c->get_next( ).
                  WHILE ( lv_while_count < ls_quantity-column_index - 1 ).
                    lo_node_quantity = lo_node_quantity->get_next( ).
                    lv_while_count = lv_while_count + 1.
                  ENDWHILE.

                  IF lo_node_quantity IS BOUND.
                    lo_node_quantity->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                  ENDIF.
                  lv_while_count = 1.
                ENDLOOP.
              WHEN OTHERS.
                lv_while_count = 1.
                LOOP AT me->mt_header_list INTO ls_quantity
                                           WHERE value = 'ConditionScaleQuantity'
*                                              OR value = 'ConditionScaleQuantityUnit'
                                              OR value = 'ConditionScaleRateValue'.
                  lo_node_quantity = lo_node_rest_c->get_next( ).
                  WHILE ( lv_while_count < ls_quantity-column_index - 1 ).
                    lo_node_quantity = lo_node_quantity->get_next( ).
                    lv_while_count = lv_while_count + 1.
                  ENDWHILE.

                  IF lo_node_quantity IS BOUND.
                    lo_node_quantity->get_attributes( )->get_named_item_ns( 's' )->set_value( lv_svalue ).
                  ENDIF.
                  lv_while_count = 1.
                ENDLOOP.
            ENDCASE.

          ENDIF.
        ELSE.
          lo_node_hier_row->remove_node( ).
        ENDIF.

        lo_node_hier_row = lo_node_hier_next.
        lv_hier_index += 1.

      ENDWHILE.
    ENDIF.

*    "Set cells to date.
    me->format_cells_2_date(
      EXPORTING
        it_data      = it_data
        ir_node      = lo_xml_document_style
        ir_node_data = lo_xml_document_data
      CHANGING
        cr_sheetpart = lo_wordsheetpart
    ).

*    "change sheet
    DATA lo_xml_document_wb TYPE REF TO cl_xml_document.
    CREATE OBJECT lo_xml_document_wb.
    lo_xml_document_wb->parse_xstring( lo_workbookpart->get_data( ) ).

    DATA(lo_node_sheets) = lo_xml_document_wb->find_node( 'sheets' ).
    IF me->mv_log_flag = 'X'.
      DATA(lo_node_sheet_val) = me->get_nth_child( io_node = lo_node_sheets iv_n = 1 ).
      DATA(lo_attr_name) = lo_node_sheet_val->get_attributes( )->get_named_item_ns( 'name' ).
      lo_attr_name->set_value( cv_condition_data ) .
    ELSE.
      lo_node_sheet_val = me->get_nth_child( io_node = lo_node_sheets iv_n = 1 ).
      lo_attr_name = lo_node_sheet_val->get_attributes( )->get_named_item_ns( 'name' ).
      lo_attr_name->set_value( cv_field_list ) .
    ENDIF.
*
*    "Add names
    DATA(lo_node_workbook) = lo_xml_document_wb->find_node( 'workbook' ).
    DATA(lo_node_names) = lo_xml_document_wb->find_node( 'sheets' )->clone( ).
    DATA(lo_attr_names) = lo_node_sheet_val->get_attributes( )->get_named_item_ns( 'name' )->clone( ).
    lo_attr_names->set_name( 'name' ).
    lo_attr_names->set_value( |{ me->mv_beginrow }| ).

    lo_node_names->remove_node( ).
    lo_node_names->set_name( name = 'definedNames' ).
*
    DATA(lo_node_name)  = lo_node_names->clone( ).
    lo_node_name->set_name( name = 'definedName' ).
    IF me->mv_log_flag = 'X'.
      lo_node_name->set_value( |{ me->mv_sheetname }{ me->gv_bg_row + 3 }| ).
    ELSE.
      lo_node_name->set_value( |{ me->mv_sheetname }{ me->gv_bg_row + 4 }| ).
    ENDIF.
    lo_node_name->get_attributes( )->set_named_item_ns( node = lo_attr_names ).

*    "Bookviews
    DATA(lo_node_views) = lo_xml_document_wb->find_node( 'bookViews' ).
    IF lo_node_views IS BOUND.
      DATA(lo_attr_views) = lo_node_sheet_val->get_attributes( )->get_named_item_ns( 'name' )->clone( ).

      IF lo_attr_views IS BOUND.
        lo_attr_views->set_name( 'activeTab' ).
        lo_attr_views->set_value( |1| ).
        lo_node_views->get_first_child( )->get_attributes( )->set_named_item_ns( node = lo_attr_views ).
      ENDIF.
    ENDIF.

    lo_node_names->append_child( lo_node_name ).
    lo_node_workbook->append_child( lo_node_names ).

    DATA(lo_wordsheetpart_val) = lo_wordsheetparts->get_part( 0 ).
    DATA lo_xml_document_val TYPE REF TO cl_xml_document.
    CREATE OBJECT lo_xml_document_val.

    IF lo_wordsheetpart_val IS BOUND.
      DATA(lo_node_sheetviews) = lo_xml_document_data->find_node( 'sheetViews' ).
      lo_node_sheetview = lo_node_sheetviews->get_first_child( ).

      IF lo_node_sheetview IS BOUND.
        lo_node_sheetview->get_attributes( )->remove_named_item_ns( 'tabSelected' ).
      ENDIF.

      lo_xml_document_val->parse_xstring( lo_wordsheetpart_val->get_data( ) ).

      " Feed the data back
      lo_xml_document_val->render_2_xstring( IMPORTING stream = DATA(lo_formatted_val) ).
      lo_wordsheetpart_val->feed_data( lo_formatted_val ).

      lo_xml_document_wb->render_2_xstring( IMPORTING stream = DATA(lo_formatted_wb) ).
      lo_workbookpart->feed_data( lo_formatted_wb ).

      lo_xml_document_data->render_2_xstring( IMPORTING stream = lo_formarted ).
      lo_wordsheetpart->feed_data( lo_formarted ).

      lo_xml_document_style->render_2_xstring( IMPORTING stream = DATA(lo_formatted_style) ).
      lo_stylepart->feed_data( lo_formatted_style ).
    ENDIF.

    IF me->mv_log_flag = ''.
      "format sheet2
      me->format_sheet_field(
        EXPORTING
          ir_parts    = lo_wordsheetparts
          ir_xlsx_doc = lo_xlsx_doc
      ).
    ENDIF.

    TRY.
        ev_content = lo_xlsx_doc->get_package_data( ).
      CATCH cx_openxml_format INTO DATA(lx_get_package_date).
    ENDTRY.

  ENDMETHOD.


  METHOD CONVERT_INTERNAL_2_EXTERNAL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    TRY.
        LOOP AT ct_condition_validity ASSIGNING FIELD-SYMBOL(<fs_validity>).
          DATA(lr_validity) = REF data( <fs_validity> ).
          mo_prcg_util->convert_value_to_output(
            EXPORTING
              iv_tabname = 'ZISLSPRCGRECDTMP'
            CHANGING
              cr_data    = lr_validity
          ).
        ENDLOOP.

        LOOP AT ct_condition_record ASSIGNING FIELD-SYMBOL(<fs_record>).
          DATA(lr_record) = REF data( <fs_record> ).
          mo_prcg_util->convert_value_to_output(
            EXPORTING
              iv_tabname = 'ZISLSPRCGRECDTMP'
            CHANGING
              cr_data    = lr_record
          ).
        ENDLOOP.

        LOOP AT ct_condition_supplement ASSIGNING FIELD-SYMBOL(<fs_supplement>).
          DATA(lr_supplment) = REF data( <fs_supplement> ).
          mo_prcg_util->convert_value_to_output(
            EXPORTING
              iv_tabname = 'ZISLSPRCGRECDTMP'
            CHANGING
              cr_data    = lr_supplment
          ).
        ENDLOOP.

        LOOP AT ct_condition_scale ASSIGNING FIELD-SYMBOL(<fs_scale>).
          DATA(lr_scale) = REF data( <fs_scale> ).
          mo_prcg_util->convert_value_to_output(
            EXPORTING
              iv_tabname = 'ZISLSPRCGRECDTMP'
            CHANGING
              cr_data    = lr_scale
          ).
        ENDLOOP.

      CATCH cx_prcg_cndnrecord_exception INTO DATA(lr_prcg).
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD CONVERT_GFN_TO_LABEL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    READ TABLE mt_dd03nd WITH KEY fieldname_raw = CONV #( iv_symsgv )
                                  TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      rv_label = get_label( CONV #( iv_symsgv ) ).
    ELSE.
      rv_label = iv_symsgv.
    ENDIF.
  ENDMETHOD.


  METHOD CONVERT_2_XSTRING_TEMPLATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lo_tool_xls             TYPE REF TO cl_salv_export_tool_ats,
          lr_appendix             TYPE REF TO if_salv_export_appendix=>yts_block,
          lo_table_row_descriptor TYPE REF TO cl_abap_structdescr,
          lo_source_table_descr   TYPE REF TO cl_abap_tabledescr,
          lr_data                 TYPE REF TO data,
          lo_xml_document_data    TYPE REF TO cl_xml_document,
          lo_formarted            TYPE xstring,
          lo_xml_document_wb      TYPE REF TO cl_xml_document.

    GET REFERENCE OF it_data INTO lr_data.

    lo_source_table_descr ?= cl_abap_tabledescr=>describe_by_data_ref( lr_data ).
    lo_table_row_descriptor ?= lo_source_table_descr->get_table_line_type( ).

    DATA(lo_itab_services) = cl_salv_itab_services=>create_for_table_ref( lr_data ).

    lo_tool_xls = cl_salv_export_tool_ats_xls=>create_for_excel_from_ats(
                      io_itab_services       = lo_itab_services
                      io_source_struct_descr = lo_table_row_descriptor
                      it_aggregation_rules   = VALUE if_salv_service_types=>yt_aggregation_rule( )
                      it_grouping_rules      = VALUE if_salv_service_types=>yt_grouping_rule( ) ).

    DATA(lo_config) = lo_tool_xls->configuration( ).
    GET REFERENCE OF it_blocks INTO lr_appendix.

    lo_config->if_salv_export_appendix~set_blocks( lr_appendix ).

    TRY.
        TEST-SEAM read_result2.
          lo_tool_xls->read_result( IMPORTING content = ev_content  ).
        end-test-seam.
      CATCH cx_salv_export_error INTO DATA(lr_export_error).
        RETURN.
    ENDTRY.

    TRY .
        TEST-SEAM openxml_format.
          DATA(lo_xlsx_doc) = cl_xlsx_document=>load_document( ev_content ).
          DATA(lo_workbookpart) = lo_xlsx_doc->get_workbookpart( ).
          DATA(lo_wordsheetparts) = lo_workbookpart->get_worksheetparts( ).
          DATA(lo_wordsheetpart) = lo_wordsheetparts->get_part( 0 ).
          DATA(lo_sheet_content) = lo_wordsheetpart->get_data( ).
        end-test-seam.
      CATCH cx_openxml_format cx_openxml_not_found INTO DATA(lx_openxml).
        RETURN.
    ENDTRY.

    CREATE OBJECT lo_xml_document_data.
    lo_xml_document_data->parse_xstring( lo_sheet_content ).
    lo_xml_document_data->render_2_xstring( IMPORTING stream = lo_formarted ).
    lo_wordsheetpart->feed_data( lo_formarted ).

    "Set row height to 2px
    DATA(lo_node_sheetdata) = lo_xml_document_data->find_node( 'sheetData' ).
    DATA(lo_node_rows_ht) = lo_node_sheetdata->get_children( ).
    DATA(lo_node_sheetdata_ht2) = lo_node_rows_ht->get_item( 2 ).
    IF lo_node_sheetdata_ht2 IS BOUND.
      " reference node 'r'
      DATA(lo_atrs_map_ht2) = lo_node_sheetdata_ht2->get_attributes( ).
      DATA(lo_node_atrr_ht2) = lo_atrs_map_ht2->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht2->set_name( 'ht' ).
      lo_node_atrr_ht2->set_value( '2' ).
      lo_atrs_map_ht2->set_named_item_ns( node = lo_node_atrr_ht2 ).

      lo_node_atrr_ht2 = lo_atrs_map_ht2->get_named_item_ns( name = 'r')->clone( ).
      lo_node_atrr_ht2->set_name( 'customHeight' ).
      lo_node_atrr_ht2->set_value( '1' ).
      lo_atrs_map_ht2->set_named_item_ns( node = lo_node_atrr_ht2 ).
    ENDIF.

    " row index start from 0, if input nothing, the row will be ignored from index|  hide Etag
    READ TABLE me->mt_header_list INTO DATA(ls_header_list) WITH KEY value = 'ETag'.
    DATA(lo_node_sheet_cols) = lo_xml_document_data->find_node( 'cols' ).
    DATA(lo_node_rows) = lo_node_sheet_cols->get_children( ).
    IF lo_node_rows IS BOUND.
      DATA(lo_node_etag) = lo_node_rows->get_item( ls_header_list-column_index - 1 ).
      IF lo_node_etag IS BOUND.
        DATA(lo_attrs_map_etag) = lo_node_etag->get_attributes( ).
        IF lo_attrs_map_etag IS BOUND.
          " reference node 'r'
          DATA(lo_node_attr_tag) = lo_attrs_map_etag->get_named_item_ns( name = 'bestFit' )->clone( ).
          IF lo_node_attr_tag IS BOUND.
            lo_node_attr_tag->set_name( 'hidden' ).
            lo_node_attr_tag->set_value( '1' ).
            lo_attrs_map_etag->set_named_item_ns( node = lo_node_attr_tag ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

*    "change sheet
    CREATE OBJECT lo_xml_document_wb.
    lo_xml_document_wb->parse_xstring( lo_workbookpart->get_data( ) ).

    DATA(lo_node_sheets) = lo_xml_document_wb->find_node( 'sheets' ).
    DATA(lo_node_sheet_val) = me->get_nth_child( io_node = lo_node_sheets iv_n = 1 ).
    DATA(lo_attr_name) = lo_node_sheet_val->get_attributes( )->get_named_item_ns( 'name' ).
    lo_attr_name->set_value( |{ COND #( WHEN TEXT-003 IS INITIAL THEN me->cv_condition_data ELSE TEXT-003 ) }| ) .

    DATA(lo_wordsheetpart_val) = lo_wordsheetparts->get_part( 0 ).
    DATA lo_xml_document_val TYPE REF TO cl_xml_document.
    CREATE OBJECT lo_xml_document_val.

    IF lo_wordsheetpart_val IS BOUND.
      lo_xml_document_val->parse_xstring( lo_wordsheetpart_val->get_data( ) ).

      " Feed the data back
      lo_xml_document_val->render_2_xstring( IMPORTING stream = DATA(lo_formatted_val) ).
      lo_wordsheetpart_val->feed_data( lo_formatted_val ).

      lo_xml_document_wb->render_2_xstring( IMPORTING stream = DATA(lo_formatted_wb) ).
      lo_workbookpart->feed_data( lo_formatted_wb ).

      lo_xml_document_data->render_2_xstring( IMPORTING stream = lo_formarted ).
      lo_wordsheetpart->feed_data( lo_formarted ).
    ENDIF.

    TRY.
        TEST-SEAM get_package_data.
          ev_content = lo_xlsx_doc->get_package_data( ).
        end-test-seam.
      CATCH cx_openxml_format INTO DATA(lx_get_package_date).
        RETURN.
    ENDTRY.

  ENDMETHOD.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lo_table_row_descriptor TYPE REF TO cl_abap_structdescr,
          lo_source_table_descr   TYPE REF TO cl_abap_tabledescr,
          lt_data                 TYPE TABLE OF zi_slsprcgcndnrecdtemplate,
          lt_dfies                TYPE TABLE OF dfies.

    mo_sls_api = NEW zcl_slsprcg_cndnrecord_api( ).
    CREATE OBJECT mo_prcg_util TYPE cl_cndnrecord_public_utility .
    mo_util = cl_cnd_maint_ltd_util=>get_instance( ).
    mo_cond_dep = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_acc = cl_ct_customizing_factory=>get_instance( )->get_accseq( ).

    "Get CDS fields
    GET REFERENCE OF lt_data INTO DATA(lr_data).
    lo_source_table_descr   ?= cl_abap_tabledescr=>describe_by_data_ref( lr_data ).
    lo_table_row_descriptor ?= lo_source_table_descr->get_table_line_type( ).
    lo_table_row_descriptor->get_ddic_field_list(
      EXPORTING
        p_langu                  = sy-langu
      RECEIVING
        p_field_list             = mt_field_list
      EXCEPTIONS
        not_found                = 1
        no_ddic_type             = 2
        OTHERS                   = 3
    ).
    "WBSElementInternalID, WBSElementExternalID
    DATA(lv_fieldname) = gcs_sales_condition-wbselementexternalid_raw.
    TRANSLATE lv_fieldname TO UPPER CASE.
    READ TABLE mt_field_list INTO DATA(ls_wbsext) WITH KEY fieldname = lv_fieldname.
    IF sy-subrc = 0.
      lv_fieldname = gcs_sales_condition-wbselementinternalid_raw.
      TRANSLATE lv_fieldname TO UPPER CASE.
      READ TABLE mt_field_list ASSIGNING FIELD-SYMBOL(<fs_wbsint>) WITH KEY fieldname = lv_fieldname.
      IF sy-subrc = 0.
        <fs_wbsint>-datatype = ls_wbsext-datatype.
        <fs_wbsint>-leng     = ls_wbsext-leng.
        <fs_wbsint>-decimals = ls_wbsext-decimals.
        <fs_wbsint>-sign     = ls_wbsext-sign.
      ENDIF.
    ENDIF.

    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = 'KONP'
        langu          = sy-langu
      TABLES
        dfies_tab      = lt_dfies
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      "do nothing
    ELSE.
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KOPOS' iv_fieldname_ext = 'CONDITIONSEQUENTIALNUMBER' ).
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KRECH' iv_fieldname_ext = 'CONDITIONCALCULATIONTYPE'  ).
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KZBZG' iv_fieldname_ext = 'PRICINGSCALEBASIS'         ).
    ENDIF.

    "Get: Fields of CDS Entity for RAW
    SELECT * INTO TABLE me->mt_dd03nd FROM dd03nd_v WHERE strucobjn = mv_cdsname.

    "Get Mapping INT,RAW.
    mo_prcg_util->get_mapping_fields(
      EXPORTING
        iv_incl_record   = abap_true
        it_entity_names   = VALUE #( ( CONV #( mv_cdsname ) ) )
      IMPORTING
        et_wlf_mp_fields = DATA(lt_mp)
        et_dd03nd        = DATA(lt_dd03nd)
        et_mapping_fields = me->mt_mapping ).

  ENDMETHOD.


  METHOD ADD_TEXT_TO_HEADER.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA(lt_condition_key_tmp) = ct_condition_key.
    CLEAR lt_condition_key_tmp.
    LOOP AT ct_condition_key INTO DATA(ls_condition_key).
      APPEND ls_condition_key TO lt_condition_key_tmp.
      READ TABLE mt_anno_element WITH KEY elementname = ls_condition_key-fieldname_ext annoname = 'OBJECTMODEL.TEXT.ELEMENT$1$' INTO DATA(ls_anno_element).
      IF sy-subrc <> 0.
        READ TABLE mt_anno_element WITH KEY elementname = ls_condition_key-fieldname_raw annoname = 'OBJECTMODEL.TEXT.ELEMENT$1$' INTO ls_anno_element.
      ENDIF.
      IF ls_anno_element IS NOT INITIAL.
        ls_condition_key-fieldname_raw = ls_anno_element-value.
        REPLACE ALL OCCURRENCES OF '''' IN ls_condition_key-fieldname_raw WITH space.
        ls_condition_key-position = ls_condition_key-position + 1.
        APPEND ls_condition_key TO lt_condition_key_tmp.
      ENDIF.
      CLEAR ls_anno_element.
    ENDLOOP.
    ct_condition_key = lt_condition_key_tmp.

  ENDMETHOD.


  METHOD ADD_TEMPLATE_2_DOWNLOAD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lt_items      TYPE if_cndnrecord_public_utility=>ty_cndnrecd_criteria_item_t,
          lt_cond_key_r TYPE tt_header_desc.

    "Get types
    DATA(lt_record) = it_record.
    IF lt_record IS INITIAL.
      READ TABLE it_key_tab INTO DATA(ls_key) WITH KEY name = gcs_sales_condition-filterstring.
      get_item_option(
        EXPORTING
          iv_filterstring = ls_key-value
          iv_where        = iv_where
        IMPORTING
          et_contype      = DATA(lt_contype)
      ).
      MOVE-CORRESPONDING lt_contype TO lt_record.
    ENDIF.

    SORT lt_record BY conditiontype.
    DELETE ADJACENT DUPLICATES FROM lt_record COMPARING conditiontype.
    LOOP AT lt_record INTO DATA(ls_record).
      APPEND VALUE if_cndnrecord_public_utility=>ty_cndnrecd_criteria_item_s(
        conditiontype = VALUE #( ( sign = 'E' option = 'NE' low = ls_record-conditiontype ) )
       ) TO lt_items.

      "Get Condition key
      me->get_cond_key_for_template( EXPORTING iv_kschl = ls_record-conditiontype
                                     IMPORTING et_condition_key = DATA(lt_condition_key) ).
      APPEND LINES OF lt_condition_key TO lt_cond_key_r.

      CLEAR: lt_condition_key.
    ENDLOOP.

    "Set header
    me->set_header(
      EXPORTING
        iv_rkey          = abap_true
        it_condition_key = lt_cond_key_r
      IMPORTING
        et_cell          = me->mt_header_list
        et_header        = DATA(lt_header)
    ).

    "Fill values
    me->set_values_to_template( EXPORTING
                                  it_condtype = lt_items
                                  it_header   = lt_header it_cell_header = me->mt_header_list
                                IMPORTING
                                  et_blocks   = DATA(lt_blocks)
                                  et_data     = et_data_temp ).
    "Get max row.
    ev_bg_row = REDUCE #( INIT x = 0 FOR ls_block IN lt_blocks[ 1 ]-cells
                                     NEXT x = nmax( val1 = x val2 = ls_block-row_index ) ).

    et_cells  = lt_blocks[ 1 ]-cells.

    me->mt_header_tmp_list = et_cells.
    DELETE me->mt_header_tmp_list WHERE row_index <> 3.

  ENDMETHOD.


  METHOD add_mapping_custom_field.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 07.11.2023 | 26564     :  Pricing Mass Upload Tool    *
*              |            | DS4K969470                               *
*----------------------------------------------------------------------*

    DATA:
      lt_map_custom_fields TYPE if_cnd_maint_ltd_dep=>wlf_mp_fields_t.
    lt_map_custom_fields = VALUE #(
      ( ext_fieldname = 'ZZ1_M3SEASON_PCI'
        int_fieldname = 'ZZ1_M3SEASON_PCI' ) ).

    LOOP AT lt_map_custom_fields INTO DATA(ls_mp).
      DATA(ls_dd03nd) = VALUE #( mt_dd03nd[ fieldname = ls_mp-ext_fieldname ] OPTIONAL ).
      APPEND VALUE #( fieldname_int = ls_mp-int_fieldname
                      fieldname_ext = ls_mp-ext_fieldname
                      fieldname_raw = ls_dd03nd-fieldname_raw )
          TO ct_mapping_fields.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.