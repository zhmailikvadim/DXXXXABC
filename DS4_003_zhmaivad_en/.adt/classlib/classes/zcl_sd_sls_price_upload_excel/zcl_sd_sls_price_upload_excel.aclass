class ZCL_SD_SLS_PRICE_UPLOAD_EXCEL definition
  public
  final
  create private .

public section.
  types TY_CONDITION_VALIDITY_S type ZI_SlsPrcgCndnRecdValidity.
  types:
  "! <p>Types of returning condition validity of condition record.</p>
    ty_condition_validity_t          TYPE STANDARD TABLE OF ty_condition_validity_s WITH NON-UNIQUE DEFAULT KEY .
  types:
    ty_record_t TYPE TABLE OF zi_slsprcgcndnrecdtemplate .       "C_SlsPricingConditionRecordTP .
  types:
    ty_dd01l_t TYPE TABLE OF dd01l .
  types:
    ty_tcurc_t TYPE TABLE OF tcurc .
  types:
    BEGIN OF ty_label,
        fieldname_raw TYPE fieldname_raw,
        label         TYPE ddannotation_val,
      END OF ty_label .
  types:
    BEGIN OF ty_knumh,
        knumh TYPE knumh,
      END OF ty_knumh .
  types:
    ty_knumh_t TYPE TABLE OF ty_knumh .
  types:
    BEGIN OF ty_knumh_kotabnr,
        knumh TYPE knumh,
        kotabnr TYPE kotabnr,
      END OF ty_knumh_kotabnr .
  types:
    ty_knumh_kotabnr_t TYPE TABLE OF ty_knumh_kotabnr .
  types:
    ty_label_t TYPE TABLE OF ty_label .
  types:
    ty_t685a_t TYPE TABLE OF t685a .
  types:
    BEGIN OF ty_xlsx_sheet_data,
        row_num  TYPE sy-tabix,
        row_xlsx TYPE REF TO if_ixml_node,
        values   TYPE REF TO if_ixml_node,
      END OF ty_xlsx_sheet_data .
  types:
    ty_xlsx_sheet_data_t TYPE TABLE OF ty_xlsx_sheet_data .
  types TY_RECORD_ITEM_S type CNDN_UPLD_MSG .
  types:
    ty_record_item_t TYPE TABLE OF cndn_upld_msg .

  class-methods GET_INT_FROM_EXCEL_COLUMN
    importing
      !IV_EXCEL_COLUMN type STRING
    returning
      value(RV_INT_COLUMN) type INT4 .
  methods PARSE_EXCEL
    importing
      !IV_FIELDNAME type STRING optional
      !IV_XSTRING type XSTRING optional
    exporting
      !ER_DATA type ref to DATA
      !ET_RECORD type TY_RECORD_T
      !ET_RECORD_INVALID type TY_RECORD_T
      !ET_RECORD_VALID type TY_RECORD_T
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !EV_INVALID_EXCEL type ABAP_BOOL .
  methods OPERATE_CONDITION
    importing
      !IT_RECORD type TY_RECORD_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !ET_SUCCESS_RECORD type TY_RECORD_ITEM_T .
  methods OPERATE_CONDITION_MASS
    importing
      !IT_RECORD type TY_RECORD_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !ET_SUCCESS_RECORD type TY_RECORD_ITEM_T .
  class-methods GET_INSTANCE
    returning
      value(RO_EXCEL) type ref to zCL_SD_SLS_PRICE_UPLOAD_EXCEL .
  methods GET_FIELD_LIST
    returning
      value(RT_FIELD_LIST) type STRING_TABLE .
  methods ADD_MESSAGE_TO_DB
    importing
      !IV_FILENAME type STRING
      !IV_TOTAL_LINES type INT4
      !IT_FIELD_LIST type STRING_TABLE
      !IT_RECORD type TY_RECORD_T
      !IT_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !IV_IMPRTID type UUID
      !IT_SUCCESS_RECORD type TY_RECORD_ITEM_T optional .
  methods SAVE_IMPORT_HISTORY
    importing
      !IV_FILENAME type STRING
      !IV_IMPRT_DATE type DATE
      !IV_IMPRT_TIME type TIMESTAMPL
    exporting
      !EV_IMPRTID type UUID .
  PROTECTED SECTION.
private section.

  data MO_DEP type ref to IF_CND_MAINT_LTD_DEP .
  data MO_SLS_API type ref to IF_SLSPRCG_CNDNRECD_API .
  data MO_PRCG_UTIL type ref to IF_CNDNRECORD_PUBLIC_UTILITY .
  data MO_LTD_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MT_SHARED_STR type STRING_TABLE .
  data MT_FIELD_LIST type STRING_TABLE .
  data MV_DECIMAL_SEPARATOR type CHAR1 .
  data MV_THOUSANDS_SEPARATOR type CHAR1 .
  data MT_DD01L type TY_DD01L_T .
  constants:
    BEGIN OF gcs_sales_condition,
      validity_ddic_name             TYPE tabname VALUE 'ASLSPRCGCNDNVA',
      conditionvalidityenddate       TYPE fieldname VALUE 'CONDITIONVALIDITYENDDATE',
      conditionvaliditystartdate     TYPE fieldname VALUE 'CONDITIONVALIDITYSTARTDATE',
      conditionrecord                TYPE fieldname VALUE 'CONDITIONRECORD',
      conditiontable                 TYPE fieldname VALUE 'CONDITIONTABLE',
      conditionrecord_raw            TYPE fieldname_raw VALUE 'ConditionRecord',
      conditiontype_raw              TYPE fieldname_raw VALUE 'ConditionType',
      conditiontable_raw             TYPE fieldname_raw VALUE 'ConditionTable',
      conditionsequentialnumber_raw  TYPE fieldname_raw VALUE 'ConditionSequentialNumber',
      conditionscaleline_raw         TYPE fieldname_raw VALUE 'ConditionScaleLine',
      conditionvalidityenddate_raw   TYPE fieldname_raw VALUE 'ConditionValidityEndDate',
      conditionvaliditystartdate_raw TYPE fieldname_raw VALUE 'ConditionValidityStartDate',
      conditionscalequantity_raw     TYPE fieldname_raw VALUE 'ConditionScaleQuantity',
      conditionscalequantityunit_raw TYPE fieldname_raw VALUE 'ConditionScaleQuantityUnit',
      conditionscaleamount_raw       TYPE fieldname_raw VALUE 'ConditionScaleAmount',
      conditionscaleamountcurr_raw   TYPE fieldname_raw VALUE 'ConditionScaleAmountCurrency',
      conditionscaleratevalue_raw    TYPE fieldname_raw VALUE 'ConditionScaleRateValue',
      conditionratevalue_raw         TYPE fieldname_raw VALUE 'ConditionRateValue',
      conditionratevalueunit_raw     TYPE fieldname_raw VALUE 'ConditionRateValueUnit',
      conditionlowerlimit_raw        TYPE fieldname_raw VALUE 'ConditionLowerLimit',
      conditionupperlimit_raw        TYPE fieldname_raw VALUE 'ConditionUpperLimit',
      accessnumberofaccessseq_raw    TYPE fieldname_raw VALUE 'AccessNumberOfAccessSequence',
      conditionquantity_raw          TYPE fieldname_raw VALUE 'ConditionQuantity',
      conditionisscale_raw           TYPE fieldname_raw VALUE 'ConditionIsScale',
      percentage                     TYPE string VALUE 'AHIKJW',
      comma                          TYPE string VALUE ',',
      dot                            TYPE string VALUE '.',
    END OF gcs_sales_condition .
  constants CV_CDSNAME type STRING value 'ZI_SLSPRCGCNDNRECDTEMPLATE' ##NO_TEXT.
  data MT_LABEL type TY_LABEL_T .
  data MT_DD03NDTAB type DD03NDTAB .
  data MT_TCURC type TY_TCURC_T .
  data MT_T685A type TY_T685A_T .
  constants CV_ROWS_LIMIT type I value 1000 ##NO_TEXT.
  data MO_SRV_FACADE type ref to IF_PRCG_CNDNRECD_SRV_FACADE .
  data MO_LTD_API type ref to IF_CND_MAINT_LTD_API .
  data MO_UTIL type ref to IF_CND_MAINT_LTD_UTIL .

  methods CHECK_ROWS_LIMIT
    returning
      value(RS_MESSAGE) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_S .
  methods CHECK_RATE_SCALE_REC_SUP
    importing
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !IS_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_S
    returning
      value(RT_MESSAGES) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods CHECK_SAME_SCALE_AMOUNT
    importing
      !IV_KSTPR type KSTPR optional
    changing
      !CT_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
    returning
      value(RT_MESSAGES) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods CHECK_DUPLICATE_RECORD_SUP
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_RECORD type TY_RECORD_T optional .
  methods UPDATE_CONDITION_CHECK
    importing
      !IS_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_S
      !IT_EXCEL_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_DB_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !IT_DB_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_EXCEL_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_EXCEL_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_EXCEL_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !CR_COND_RECORD_C type ref to DATA
      !CR_COND_RECORD_U type ref to DATA
      !CR_COND_SCALE_C type ref to DATA
      !CR_COND_SCALE_U type ref to DATA
      !CT_DELETION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SCALE_DELETION_T .
  methods UPDATE_CONDITION
    importing
      !IS_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_S
      !IT_EXCEL_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_DB_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !IT_DB_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_EXCEL_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_EXCEL_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_EXCEL_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T .
  methods CHECK_FOR_CONTRACT
    importing
      !IR_COND_RECORD type DATA
    exporting
      !ET_RECORD_TABLE type TY_KNUMH_KOTABNR_T .
  methods CHECK_FOR_OVERLAP
    importing
      !IR_COND_RECORD type DATA
    exporting
      !ET_RECORD type TY_KNUMH_T .
  methods CHECK_NEW_RECORD_WITH_HEADER
    importing
      !IT_RECORD_TEMPLATE type TY_RECORD_T
      !IT_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !IT_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
    returning
      value(RT_MESSAGES) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods CHECK_RECORD_SCALE_FOR_UPDATE
    importing
      !IT_DB_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !CT_DB_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t optional .
  methods COLLECT_MESSAGES
    importing
      !IO_EXCEPTION type ref to CX_PRCG_CNDNRECORD_EXCEPTION
      !IV_KNUMH type KNUMH
      !IV_KOPOS type KOPOS
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods CREATE_NEW_CONDITION
    importing
      !IS_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_S
    exporting
      !ET_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !ET_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !ET_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !ET_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T .
  methods CREATE_NEW_CONDITION_CHECK
    importing
      !IS_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_S
    exporting
      !ET_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !ET_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !ET_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !ET_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !CR_COND_RECORD type ref to DATA
      !CR_COND_SCALE type ref to DATA .
  methods RAISE_PRCG_CNDN_EXCEPTION
    importing
      !IX_EXCEPTION type ref to CX_PRCG_CNDNRECORD_EXCEPTION
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods PREPARE_SAME_RECORD
    importing
      !IS_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_S
      !IV_DB_RECORD_FLAG type ABAP_BOOL optional
    exporting
      !ET_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !ET_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !ET_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !ET_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T .
  methods INVALID_PROPERTY
    importing
      !IS_INVALID type /IWBEP/S_MGW_NAME_VALUE_PAIR
      !IS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
    returning
      value(RS_MESSAGE) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_S .
  methods CONSTRUCTOR .
  methods MAP_FIELD_LIST_TYPE
    importing
      !IT_DFIES type DDFIELDS
      !IV_FIELDNAME_INT type FIELDNAME
      !IV_FIELDNAME_EXT type FIELDNAME .
  methods CONVERT_WBSELEMENT_EXT2INT
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CHECK_REQUIRED_FIELD
    importing
      !IV_FIELDNAME_RAW type FIELDNAME_RAW
      !IS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods GET_LABEL
    importing
      !IV_FIELDNAME_RAW type FIELDNAME_RAW
    returning
      value(RV_LABEL) type DDANNOTATION_VAL .
  methods CHECK_RECORD
    importing
      !IT_DATE type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
      !IT_LATER type /IWBEP/T_MGW_NAME_VALUE_PAIR optional
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
      !CT_INVALID type /IWBEP/T_MGW_NAME_VALUE_PAIR .
  methods GET_DD0LL_VIA_DOMNAME
    importing
      !IV_DOMNAME type DOMNAME
    returning
      value(RV_SIGNFLAG) type SIGNFLAG .
  methods CONVERT_LTD_API_MESSAGE
    importing
      !IR_COND_RECORD type ref to DATA optional
      !IV_IS_CREATE type BOOLEAN default 'X'
    exporting
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_RETURN type BAPIRET2_T .
  methods GET_BEGIN_ROW_AND_SHEET_ID
    importing
      !IV_XSTRING type XSTRING optional
      !IV_SHEET_CONTENT_VAL type XSTRING optional
    exporting
      !EV_BEGIN_ROW type INT4
      !EV_SHEET_ID type INT4
      !EO_DATA_BEGIN_ROW type ref to IF_IXML_NODE
      !ET_XLSX_SHEET_DATA type TY_XLSX_SHEET_DATA_T .
  methods GET_XML_VALUE_STR
    importing
      !IO_NODE type ref to IF_IXML_NODE
    returning
      value(RV_VAL) type STRING .
  methods CHECK_FIELD
    importing
      !IV_VALUE type STRING
      !IV_COLUMN type STRING
      !IT_DD03NDTAB type DD03NDTAB
    exporting
      !ET_INVALID_NAME_VALUE type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !ET_LATER_NAME_VALUE type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !ET_DATE_NAME_VALUE type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !EV_VALUE type STRING .
  methods INVALID_DATE_FORMAT
    importing
      !IS_INVALID type /IWBEP/S_MGW_NAME_VALUE_PAIR
      !IS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
    returning
      value(RS_MESSAGE) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_S .
  methods CHECK_UPDATE_RECORD
    exporting
      !ER_COND_RECORD type ref to DATA
      !ER_COND_SCALE type ref to DATA
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !ET_CNDN_RECORD_MAPPING type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_MAPPING_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t optional
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CHECK_CREATE_RECORD
    importing
      !IR_COND_RECORD_EXCEL type ref to DATA optional
    exporting
      !ER_COND_RECORD type ref to DATA
      !ER_COND_SCALE type ref to DATA
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !ET_CNDN_RECORD_MAPPING type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_MAPPING_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t optional
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods SPLIT_RECORD_TO_ENTITIES
    importing
      !IS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !CT_CONDITION_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T optional .
  methods PERCENTAGE_PROPERTY
    importing
      !IS_INVALID type /IWBEP/S_MGW_NAME_VALUE_PAIR
      !IS_RECORD type ZI_SLSPRCGCNDNRECDTEMPLATE
      !IV_PERCENTAGE type STRING
    returning
      value(ES_MESSAGE) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_S .
  methods CHECK_SAME_SCALE_QUANTITY
    importing
      !IV_KSTPR type KSTPR optional
    changing
      !CT_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
    returning
      value(RT_MESSAGES) type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T .
  methods SAVE_RECORD
    exporting
      !ET_ADJ_CNDN_OVERLAP type PRCG_T_CONDITIONRECORD
      !ET_SUPPL_SEQNO_MAPPING type IF_CND_MAINT_LTD_TYPES=>TY_CNDN_SQNTL_MAPPING_T
    changing
      !CR_COND_RECORD type ref to DATA
      !CR_COND_SCALE type ref to DATA optional
      !CR_COND_TEXT type ref to DATA optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CHECK_AND_ENQUEUE
    changing
      !CR_COND_RECORD type ref to DATA
      !CR_COND_SCALE type ref to DATA
      !CT_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !CT_FAILED_RECORD type TY_KNUMH_T .
  methods ADD_SUCCESS_MESSAGE
    importing
      !IR_COND_RECORD type ref to DATA
      !IR_COND_SCALE type ref to DATA
      !IR_COND_TEXT type ref to DATA optional
      !IT_ADJ_CNDN_OVERLAP type PRCG_T_CONDITIONRECORD
      !IT_SUPPL_SEQNO_MAPPING type IF_CND_MAINT_LTD_TYPES=>TY_CNDN_SQNTL_MAPPING_T
      !IT_RECORD type TY_RECORD_T
    exporting
      !CT_SUCCESS_RECORD type TY_RECORD_ITEM_T .
  methods CHECK_EXCEL_AND_DB
    importing
      !IT_DB_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !IT_RECORD type TY_RECORD_T
      !IT_DB_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_DB_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T .
  methods CHECK_LOWER_UPPER_LIMIT
    importing
      !IT_DB_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
    exporting
      !ET_MESSAGES type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T .
ENDCLASS.



CLASS ZCL_SD_SLS_PRICE_UPLOAD_EXCEL IMPLEMENTATION.


  METHOD CREATE_NEW_CONDITION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR:et_condition_record, et_condition_validity,
          et_condition_supplement, et_condition_scale, et_messages.

    prepare_same_record(
      EXPORTING
        is_condition_record     = is_condition_record
      IMPORTING
        et_condition_record     = et_condition_record
        et_condition_validity   = et_condition_validity
        et_condition_supplement = et_condition_supplement
        et_condition_scale      = et_condition_scale
        et_messages             = et_messages
      CHANGING
        ct_condition_validity   = ct_condition_validity
        ct_condition_supplement = ct_condition_supplement
        ct_condition_scale      = ct_condition_scale
    ).

    IF et_messages IS INITIAL.
      TRY.
          mo_sls_api->create_condition_record(
            IMPORTING
              et_message              = et_messages
              et_cndn_record_mapping  = DATA(lt_cndn_record_mapping)
            CHANGING
              ct_condition_record     = et_condition_record
              ct_condition_validity_enh   = et_condition_validity
              ct_condition_supplement = et_condition_supplement
              ct_condition_scale      = et_condition_scale
          ).
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
          collect_messages(
            EXPORTING
              io_exception = lo_ex
              iv_knumh     = is_condition_record-conditionrecord
              iv_kopos     = is_condition_record-conditionsequentialnumber
            IMPORTING
              et_messages  = et_messages
          ).
      ENDTRY.
    ENDIF.
  ENDMETHOD.


  METHOD CREATE_NEW_CONDITION_CHECK.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA ls_message TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s.
    CLEAR:et_condition_record, et_condition_validity,
          et_condition_supplement, et_condition_scale, et_messages.

    prepare_same_record(
      EXPORTING
        is_condition_record     = is_condition_record
      IMPORTING
        et_condition_record     = et_condition_record
        et_condition_validity   = et_condition_validity
        et_condition_supplement = et_condition_supplement
        et_condition_scale      = et_condition_scale
        et_messages             = et_messages
      CHANGING
        ct_condition_validity   = ct_condition_validity
        ct_condition_supplement = ct_condition_supplement
        ct_condition_scale      = ct_condition_scale
    ).

    IF et_messages IS INITIAL.
      TRY.
        TEST-SEAM check_create_record.
          check_create_record(
            IMPORTING
              er_cond_record          = DATA(er_cond_record)
              er_cond_scale           = DATA(er_cond_scale)
              et_message              = et_messages
            CHANGING
              ct_condition_record     = et_condition_record
              ct_condition_validity   = et_condition_validity
              ct_condition_supplement = et_condition_supplement
              ct_condition_scale      = et_condition_scale
            ).
        END-TEST-SEAM.
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex). " Exception for Condition Public API
          collect_messages(
              EXPORTING
                io_exception = lo_ex
                iv_knumh     = is_condition_record-conditionrecord
                iv_kopos     = is_condition_record-conditionsequentialnumber
              IMPORTING
                et_messages  = et_messages
            ).
          RETURN.
      ENDTRY.
      FIELD-SYMBOLS: <ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                     <ft_cond_scale>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
      FIELD-SYMBOLS: <ct_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                     <ct_cond_scale>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
      ASSIGN er_cond_record->* TO <ft_cond_record>.
      ASSIGN er_cond_scale->* TO <ft_cond_scale>.
      ASSIGN cr_cond_record->* TO <ct_cond_record>.
      ASSIGN cr_cond_scale->* TO <ct_cond_scale>.
      APPEND LINES OF <ft_cond_record> TO <ct_cond_record>.
      INSERT LINES OF <ft_cond_scale> INTO TABLE <ct_cond_scale>.
    ENDIF.
  ENDMETHOD.


  METHOD GET_BEGIN_ROW_AND_SHEET_ID.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS:lc_conditiontype      TYPE string VALUE 'ConditionType',
              lc_sheetdata          TYPE string VALUE 'sheetData',
              lc_conditionratevalue TYPE string VALUE 'ConditionRateValue',
              lc_digital            TYPE string VALUE '1234567890'.

*         For manually created workbooks
*         Find sheet with data to upload . Find value in the first column = 'ConditionType' ).
*         lv_sheetfound = (0 - not found; 1 - found header table, 2 - found table to upload
*         Set focus on first row to upload for further processing

    DATA: lo_xml_document       TYPE REF TO cl_xml_document,
          lo_node_val_sheetdata TYPE REF TO if_ixml_node,
          lo_row                TYPE REF TO if_ixml_node,
          lo_row_det            TYPE REF TO if_ixml_node,
          lo_row_val            TYPE REF TO if_ixml_node,
          lv_addr               TYPE string,
          lv_sheetfound         TYPE i,
          lt_fields             TYPE string_table.

    CLEAR:ev_begin_row, ev_sheet_id.

    CREATE OBJECT lo_xml_document.
    lo_xml_document->parse_xstring( iv_sheet_content_val ).
    lo_node_val_sheetdata = lo_xml_document->find_node( name = lc_sheetdata ).
    IF lo_node_val_sheetdata IS BOUND.
      lo_row = lo_node_val_sheetdata->get_first_child( ).

      WHILE lo_row IS BOUND.
        CLEAR lv_sheetfound.

        DATA(lv_current_row) = lo_row->get_attributes( )->get_named_item_ns( 'r' )->get_value( ).
        lo_row_det = lo_row->get_first_child( ).
        IF lo_row_det IS BOUND.
          DATA(lv_cell)  = lo_row_det->get_attributes( )->get_named_item_ns( 'r' )->get_value( ).

          lo_row_val = lo_row_det->get_first_child( ).
          IF lo_row_val IS BOUND.
            lv_addr = lo_row_val->get_value( ).
            IF lv_addr CO lc_digital.
              lv_addr = lv_addr + 1.
            ELSE.
              EXIT.
            ENDIF.

            READ TABLE mt_shared_str INTO DATA(lv_control_value) INDEX lv_addr.
            "sheet to upload has been found.
            "fill mt_field_list in correct order
            CLEAR lt_fields[].
            APPEND lv_control_value TO lt_fields.

            IF lv_control_value = lc_conditionratevalue  OR lv_control_value = lc_conditiontype.
              lv_sheetfound = 1.
            ENDIF.

            lo_row_det = lo_row_det->get_next( ).
            WHILE lo_row_det IS BOUND.
              lo_row_val = lo_row_det->get_first_child( ).
              IF lo_row_val IS  BOUND.
                lv_addr = lo_row_val->get_value( ).
                IF lv_addr CO lc_digital.
                  lv_addr = lv_addr + 1.
                ELSE.
                  EXIT.
                ENDIF.
                READ TABLE mt_shared_str INTO lv_control_value INDEX lv_addr.
                IF lv_control_value = lc_conditionratevalue OR lv_control_value = lc_conditiontype.
                  lv_sheetfound = lv_sheetfound + 1.
                ENDIF.
                APPEND lv_control_value TO lt_fields.
              ELSE.
                APPEND '' TO lt_fields.
              ENDIF.

              lo_row_det = lo_row_det->get_next( ).
            ENDWHILE." by columns

            IF lv_sheetfound = 0.
              lv_sheetfound = 1.
            ELSEIF lv_sheetfound = 2 .
              "upload data found
              mt_field_list = lt_fields.
              ev_begin_row = lv_current_row + 1.
              eo_data_begin_row = lo_row->get_next( ). "This begin row can not get the last row
              EXIT.
            ENDIF.

          ENDIF.  " IF lo_row_val IS BOUND
        ENDIF.  "IF lo_row_det IS BOUND
        lo_row = lo_row->get_next( ).
      ENDWHILE. "WHILE lo_row IS BOUND
    ENDIF."IF lo_node_val_sheetdata IS BOUND.

  ENDMETHOD.


  METHOD GET_DD0LL_VIA_DOMNAME.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR rv_signflag.
    READ TABLE mt_dd01l WITH KEY domname = iv_domname TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      SELECT *
        FROM dd01l
        APPENDING TABLE mt_dd01l
       WHERE domname = iv_domname
         AND as4vers = 'A'.
    ENDIF.
    READ TABLE mt_dd01l INTO DATA(ls_dd01l) WITH KEY domname = iv_domname.
    rv_signflag = ls_dd01l-signflag.
  ENDMETHOD.


  METHOD GET_FIELD_LIST.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    rt_field_list = mt_field_list.
  ENDMETHOD.


  METHOD GET_INSTANCE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    ro_excel = NEW zcl_sd_sls_price_upload_excel( ).
  ENDMETHOD.


  METHOD GET_INT_FROM_EXCEL_COLUMN.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA(lv_column) = iv_excel_column.

    DO.
      IF lv_column IS INITIAL.
        RETURN.
      ENDIF.
      FIND lv_column(1) IN sy-abcde MATCH OFFSET DATA(lv_offset).
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
      rv_int_column = rv_int_column * 26 + lv_offset + 1.
      lv_column = lv_column+1.
    ENDDO.
  ENDMETHOD.


  METHOD GET_LABEL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    READ TABLE mt_label INTO DATA(ls_label) WITH KEY fieldname_raw = iv_fieldname_raw.
    IF sy-subrc <> 0.
      cl_dd_ddl_annotation_service=>get_label_4_element_mde(
        EXPORTING
          entityname  = CONV #( cv_cdsname )
          elementname = CONV #( iv_fieldname_raw )
        RECEIVING
          label       = DATA(ls_label_service)
      ).
      ls_label-fieldname_raw = iv_fieldname_raw.
      ls_label-label         = ls_label_service-value.
      APPEND ls_label TO mt_label.
    ENDIF.
    rv_label = ls_label-label.
  ENDMETHOD.


  METHOD GET_XML_VALUE_STR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR: rv_val.

    IF io_node IS NOT BOUND.
      RETURN.
    ENDIF.

    DATA(lo_child) = io_node->get_first_child( ).
    IF lo_child IS NOT BOUND.
      RETURN.
    ENDIF.

    DATA(lo_attr_t) = io_node->get_attributes( )->get_named_item_ns( 't' ).

    IF lo_attr_t IS BOUND AND lo_attr_t->get_value( ) = 's'.
      DATA(lv_str_index) = CONV int4( lo_child->get_value( ) ) + 1.
      DESCRIBE TABLE mt_shared_str LINES DATA(lv_size).
      IF lv_str_index >= 1 AND lv_str_index <= lv_size.
        rv_val = mt_shared_str[ lv_str_index ].
      ENDIF.
    ELSE.
      rv_val = lo_child->get_value( ).
      REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf IN rv_val WITH space.
      CONDENSE rv_val.
    ENDIF.

  ENDMETHOD.


  METHOD INVALID_DATE_FORMAT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA lv_date TYPE char10.
    data lv_datum type char8.
    CLEAR rs_message.

    CONCATENATE sy-datum+0(4) '-' sy-datum+4(2) '-' sy-datum+6(2) INTO lv_date.
    CONCATENATE sy-datum+0(4) sy-datum+4(2) sy-datum+6(2) INTO lv_datum.
    MESSAGE e095(prcg_cndnrecord_api) WITH lv_datum lv_date INTO DATA(ls_msg).
    rs_message = VALUE #( conditionrecord             = is_record-conditionrecord
                          conditionsequentialnumber   = is_record-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 ).
  ENDMETHOD.


  METHOD INVALID_PROPERTY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR rs_message.

    DATA(lv_label) = get_label( CONV #( is_invalid-name ) ).
    MESSAGE e058(prcg_cndnrecord_api) WITH is_invalid-value lv_label INTO DATA(ls_msg).
    rs_message = VALUE #( conditionrecord             = is_record-conditionrecord
                          conditionsequentialnumber   = is_record-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 ).
  ENDMETHOD.


  METHOD MAP_FIELD_LIST_TYPE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    READ TABLE it_dfies INTO DATA(ls_fies) WITH KEY fieldname = iv_fieldname_int.
    IF sy-subrc = 0.
      READ TABLE mt_dd03ndtab ASSIGNING FIELD-SYMBOL(<fs_field_list>)
                               WITH KEY fieldname = iv_fieldname_ext.
      IF sy-subrc = 0.
        <fs_field_list>-datatype  = ls_fies-datatype.
        <fs_field_list>-leng      = ls_fies-leng.
        <fs_field_list>-intlen    = ls_fies-intlen.
        <fs_field_list>-outputlen = ls_fies-intlen.
        <fs_field_list>-decimals  = ls_fies-decimals.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD OPERATE_CONDITION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_condition_record_c     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_excel_record_u         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_validity_c   TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_excel_validity_u       TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_condition_supplement_c TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_excel_supplement_u     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_condition_scale_c      TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_excel_scale_u          TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_condition_record       TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_validity     TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_condition_supplement   TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_condition_scale        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_messages               TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
          ls_item                   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_s,
          lt_item                   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
          ls_record_item            TYPE ty_record_item_s.

*About condition record number
*If one record number occurs any error in at least one entity (record, validity, supplement and scale),
*then move all the related entities to error log, and roll back the DB change if has

*About Scale import:
*1.	Based on the Excel input, if the ‘Is Scale’ is marked ‘X’, then replace all the DB scales with the Excel Scales (sort accordingly);
*2.	If the first scale (sorted) has different Scale Rate value from the related record/supplement (both (scale and record/supplement )in Excel),
*   pop up general message: condition record with sequential number has different condition amount with scale;
*3.	If the record or supplement have scales in DB, but the Excel has no scale input, then just keep the scales

    CLEAR et_messages.

    "Check duplicate record or supplement
    DATA(lt_record) = it_record.
    check_duplicate_record_sup(
      IMPORTING
        et_messages = et_messages
      CHANGING
        ct_record   = lt_record
    ).

    LOOP AT lt_record INTO DATA(ls_record).
      DATA(lv_len) = strlen( ls_record-conditionrecord ).

      IF ls_record-conditionrecord+0(2) = '$$'.
        split_record_to_entities(
          EXPORTING
            is_record               = ls_record
          CHANGING
            ct_condition_record     = lt_condition_record_c
            ct_condition_validity   = lt_condition_validity_c
            ct_condition_supplement = lt_condition_supplement_c
            ct_condition_scale      = lt_condition_scale_c
        ).
      ELSE.
        split_record_to_entities(
          EXPORTING
            is_record               = ls_record
          CHANGING
            ct_condition_record     = lt_excel_record_u
            ct_condition_validity   = lt_excel_validity_u
            ct_condition_supplement = lt_excel_supplement_u
            ct_condition_scale      = lt_excel_scale_u
        ).

        CLEAR ls_item.
        APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_record-conditionrecord ) TO ls_item-conditionrecord.
        APPEND ls_item TO lt_item.
      ENDIF.
    ENDLOOP.

    "Create new record
    IF lt_condition_record_c IS NOT INITIAL.
      "No record with sequential number '01'
      APPEND LINES OF check_new_record_with_header( it_record_template = it_record it_record = lt_condition_record_c )
          TO et_messages.

      LOOP AT lt_condition_record_c INTO DATA(ls_condition_record).
        create_new_condition(
          EXPORTING
            is_condition_record     = ls_condition_record
          IMPORTING
            et_condition_record     = lt_condition_record
            et_condition_validity   = lt_condition_validity
            et_condition_supplement = lt_condition_supplement
            et_condition_scale      = lt_condition_scale
            et_messages             = lt_messages
          CHANGING
            ct_condition_validity   = lt_condition_validity_c
            ct_condition_supplement = lt_condition_supplement_c
            ct_condition_scale      = lt_condition_scale_c
        ).
        READ TABLE lt_messages WITH KEY systemmessagetype = 'E' TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          LOOP AT lt_condition_record INTO DATA(ls_cndn_record).
            CLEAR ls_record_item.
            ls_record_item-knumh = ls_cndn_record-conditionrecord.
            ls_record_item-kschl = ls_cndn_record-conditiontype.
            ls_record_item-kotabnr = ls_cndn_record-conditiontable.
            APPEND ls_record_item TO et_success_record.
          ENDLOOP.
        ENDIF.
        APPEND LINES OF lt_messages TO et_messages.
        CLEAR lt_messages.
      ENDLOOP.
    ENDIF.

    "Update record
    IF lt_excel_record_u IS NOT INITIAL OR lt_excel_supplement_u IS NOT INITIAL OR lt_excel_scale_u IS NOT INITIAL.
      "Get existing record
      TRY.
          mo_sls_api->get_condition_record(
            EXPORTING
              is_cndnrecord_criteria_header = VALUE #( deltdconditionrecordisexcluded = abap_true )
              it_cndnrecord_criteria_item   = lt_item
            IMPORTING
              et_condition_validity_enh     = DATA(lt_db_validity)
              et_condition_record           = DATA(lt_db_record)
              et_condition_scale            = DATA(lt_db_scale)
              et_condition_supplement       = DATA(lt_db_supplement)
          ).
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
      ENDTRY.

      check_record_scale_for_update(
        EXPORTING
          it_db_supplement        = lt_db_supplement
        IMPORTING
          et_messages             = lt_messages
        CHANGING
          ct_db_record            = lt_db_record
          ct_condition_record     = lt_excel_record_u
          ct_condition_validity   = lt_excel_validity_u
          ct_condition_supplement = lt_excel_supplement_u
          ct_condition_scale      = lt_excel_scale_u
      ).
      APPEND LINES OF lt_messages TO et_messages.
      CLEAR lt_messages.

      SORT lt_excel_scale_u BY conditionrecord conditionsequentialnumber.

      "Operation based on existing record
      LOOP AT lt_db_record INTO DATA(ls_db_record).
        update_condition(
          EXPORTING
            is_db_record            = ls_db_record
            it_excel_record         = lt_excel_record_u
            it_db_record            = lt_db_record
            it_db_supplement        = lt_db_supplement
            it_db_scale             = lt_db_scale
          IMPORTING
            et_messages             = lt_messages
          CHANGING
            ct_excel_validity       = lt_excel_validity_u
            ct_excel_supplement     = lt_excel_supplement_u
            ct_excel_scale          = lt_excel_scale_u
        ).
        READ TABLE lt_messages WITH KEY systemmessagetype = 'E' TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          CLEAR ls_record_item.
          ls_record_item-knumh = ls_db_record-conditionrecord.
          ls_record_item-kschl = ls_db_record-conditiontype.
          ls_record_item-kotabnr = ls_db_record-conditiontable.
          APPEND ls_record_item TO et_success_record.
        ENDIF.
        APPEND LINES OF lt_messages TO et_messages.
        CLEAR lt_messages.
      ENDLOOP.
    ENDIF.

    SORT et_messages.
    DELETE ADJACENT DUPLICATES FROM et_messages COMPARING ALL FIELDS.
    DELETE et_messages WHERE systemmessagetype NE 'E' AND systemmessagetype NE 'A'.
  ENDMETHOD.


  METHOD OPERATE_CONDITION_MASS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_condition_record_c     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_excel_record_u         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_validity_c   TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_excel_validity_u       TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_condition_supplement_c TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_excel_supplement_u     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_condition_scale_c      TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_excel_scale_u          TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_condition_record       TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_t,
          lt_condition_validity     TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t,
          lt_condition_supplement   TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
          lt_condition_scale        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lt_messages               TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
          ls_messages               TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s,
          ls_item                   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_s,
          lt_item                   TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
          ls_record_item            TYPE ty_record_item_s,
          lt_deletion_scale         TYPE if_slsprcg_cndnrecd_api_types=>ty_cndn_scale_deletion_t,
          lt_failed_record          TYPE ty_knumh_t,
          ls_failed_record          TYPE LINE OF ty_knumh_t,
          lt_adj_cndn_overlap       TYPE prcg_t_conditionrecord,
          lt_suppl_seqno_mapping    TYPE if_cnd_maint_ltd_types=>ty_cndn_sqntl_mapping_t.

*About condition record number
*If one record number occurs any error in at least one entity (record, validity, supplement and scale),
*then move all the related entities to error log, and roll back the DB change if has

*About Scale import:
*1.	Based on the Excel input, if the ‘Is Scale’ is marked ‘X’, then replace all the DB scales with the Excel Scales (sort accordingly);
*2.	If the first scale (sorted) has different Scale Rate value from the related record/supplement (both (scale and record/supplement )in Excel),
*   pop up general message: condition record with sequential number has different condition amount with scale;
*3.	If the record or supplement have scales in DB, but the Excel has no scale input, then just keep the scales

    CLEAR et_messages.
    DATA:lr_cond_record             TYPE REF TO data,
         lr_cond_scale              TYPE REF TO data,
         lr_cond_record_c           TYPE REF TO data,
         lr_cond_scale_c            TYPE REF TO data,
         lr_cond_record_u           TYPE REF TO data,
         lr_cond_scale_u            TYPE REF TO data,
         lr_cond_record_for_overlap TYPE REF TO data.
    FIELD-SYMBOLS: <ft_cond_record>             TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ft_cond_record_for_overlap> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ft_cond_scale>              TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
    CREATE DATA lr_cond_record TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    CREATE DATA lr_cond_record_for_overlap TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    CREATE DATA lr_cond_scale TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.

    ASSIGN lr_cond_record->* TO <ft_cond_record>.
    ASSIGN lr_cond_record_for_overlap->* TO <ft_cond_record_for_overlap>.
    ASSIGN lr_cond_scale->* TO <ft_cond_scale>.
    FIELD-SYMBOLS: <ft_cond_record_c> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ft_cond_scale_c>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
    CREATE DATA lr_cond_record_c TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    CREATE DATA lr_cond_scale_c TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.

    ASSIGN lr_cond_record_c->* TO <ft_cond_record_c>.
    ASSIGN lr_cond_scale_c->* TO <ft_cond_scale_c>.
    FIELD-SYMBOLS: <ft_cond_record_u> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ft_cond_scale_u>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
    CREATE DATA lr_cond_record_u TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    CREATE DATA lr_cond_scale_u TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.

    ASSIGN lr_cond_record_u->* TO <ft_cond_record_u>.
    ASSIGN lr_cond_scale_u->* TO <ft_cond_scale_u>.

    "Check duplicate record or supplement
    DATA(lt_record) = it_record.
    check_duplicate_record_sup(
      IMPORTING
        et_messages = et_messages
      CHANGING
        ct_record   = lt_record
    ).

    LOOP AT lt_record INTO DATA(ls_record).
      DATA(lv_len) = strlen( ls_record-conditionrecord ).

      IF ls_record-conditionrecord+0(2) = '$$'.
        split_record_to_entities(
          EXPORTING
            is_record               = ls_record
          CHANGING
            ct_condition_record     = lt_condition_record_c
            ct_condition_validity   = lt_condition_validity_c
            ct_condition_supplement = lt_condition_supplement_c
            ct_condition_scale      = lt_condition_scale_c
        ).
      ELSE.
        split_record_to_entities(
          EXPORTING
            is_record                     = ls_record
          CHANGING
            ct_condition_record           = lt_excel_record_u
            ct_condition_validity         = lt_excel_validity_u
            ct_condition_supplement       = lt_excel_supplement_u
            ct_condition_scale            = lt_excel_scale_u
        ).

        CLEAR ls_item.
        APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_record-conditionrecord ) TO ls_item-conditionrecord.
        APPEND ls_item TO lt_item.
      ENDIF.
    ENDLOOP.

    "Update record
    IF lt_excel_record_u IS NOT INITIAL OR lt_excel_supplement_u IS NOT INITIAL OR lt_excel_scale_u IS NOT INITIAL.
      "Get existing record
      TRY.
          mo_sls_api->get_condition_record(
            EXPORTING
              is_cndnrecord_criteria_header = VALUE #( deltdconditionrecordisexcluded = abap_true )
              it_cndnrecord_criteria_item   = lt_item
            IMPORTING
              et_condition_validity_enh     = DATA(lt_db_validity)
              et_condition_record           = DATA(lt_db_record)
              et_condition_scale            = DATA(lt_db_scale)
              et_condition_supplement       = DATA(lt_db_supplement)
              et_condition_record_text      = DATA(lt_db_record_text)
              et_condition_supplement_text  = DATA(lt_db_supplement_text)
          ).
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
      ENDTRY.

      check_record_scale_for_update(
        EXPORTING
          it_db_supplement        = lt_db_supplement
        IMPORTING
          et_messages             = lt_messages
        CHANGING
          ct_db_record            = lt_db_record
          ct_db_validity          = lt_db_validity
          ct_condition_record     = lt_excel_record_u
          ct_condition_validity   = lt_excel_validity_u
          ct_condition_supplement = lt_excel_supplement_u
          ct_condition_scale      = lt_excel_scale_u
      ).
      APPEND LINES OF lt_messages TO et_messages.
      CLEAR lt_messages.

* check key fields unchanged comparing excel and DB
      check_excel_and_db(
        EXPORTING
          it_db_validity          = lt_db_validity
          it_record               = lt_record
          it_db_supplement        = lt_db_supplement
        IMPORTING
          et_messages             = lt_messages
        CHANGING
          ct_db_record            = lt_db_record
          ct_condition_record     = lt_excel_record_u
          ct_condition_validity   = lt_excel_validity_u
          ct_condition_supplement = lt_excel_supplement_u
          ct_condition_scale      = lt_excel_scale_u
      ).
      APPEND LINES OF lt_messages TO et_messages.
      CLEAR lt_messages.

* check condition amount between lower and upper limit. If the check pass, in future LTD check, we will ignore error message for lower and upper limit.
*      check_lower_upper_limit(
*        EXPORTING
*          it_db_scale               = lt_db_scale
*        IMPORTING
*          et_messages               = lt_messages
*        CHANGING
*          ct_condition_record     = lt_excel_record_u
*          ct_condition_validity   = lt_excel_validity_u
*          ct_condition_supplement = lt_excel_supplement_u
*          ct_condition_scale      = lt_excel_scale_u
*      ).
*      APPEND LINES OF lt_messages TO et_messages.
*      CLEAR lt_messages.

      SORT lt_excel_scale_u BY conditionrecord conditionsequentialnumber.

      "check and convert data to LTD required for existing record
      LOOP AT lt_db_record INTO DATA(ls_db_record).
        update_condition_check(
          EXPORTING
            is_db_record            = ls_db_record
            it_excel_record         = lt_excel_record_u
            it_db_record            = lt_db_record
            it_db_supplement        = lt_db_supplement
            it_db_scale             = lt_db_scale
          IMPORTING
            et_messages             = lt_messages
          CHANGING
            ct_excel_validity       = lt_excel_validity_u
            ct_excel_supplement     = lt_excel_supplement_u
            ct_excel_scale          = lt_excel_scale_u
            cr_cond_record_u        = lr_cond_record_u
            cr_cond_scale_u         = lr_cond_scale_u
            cr_cond_record_c        = lr_cond_record_c
            cr_cond_scale_c         = lr_cond_scale_c
            ct_deletion_scale       = lt_deletion_scale
        ).
        APPEND LINES OF lt_messages TO et_messages.
        CLEAR lt_messages.
      ENDLOOP.
    ENDIF.
    "Create new record
    IF lt_condition_record_c IS NOT INITIAL OR lt_condition_supplement_c IS NOT INITIAL OR lt_condition_scale_c IS NOT INITIAL..
      "No record with sequential number '01'
      APPEND LINES OF check_new_record_with_header( it_record_template = it_record it_record = lt_condition_record_c it_supplement = lt_condition_supplement_c )
          TO et_messages.

* check condition amount between lower and upper limit. If the check pass, in future LTD check, we will ignore error message for lower and upper limit.
*      check_lower_upper_limit(
*        IMPORTING
*          et_messages               = lt_messages
*        CHANGING
*          ct_condition_record     = lt_condition_record_c
*          ct_condition_validity   = lt_condition_validity_c
*          ct_condition_supplement = lt_condition_supplement_c
*          ct_condition_scale      = lt_condition_scale_c
*      ).
*      APPEND LINES OF lt_messages TO et_messages.
*      CLEAR lt_messages.

      LOOP AT lt_condition_record_c INTO DATA(ls_condition_record).
        "check and convert data to LTD required for $$ record
        create_new_condition_check(
          EXPORTING
            is_condition_record     = ls_condition_record
          IMPORTING
            et_condition_record     = lt_condition_record
            et_condition_validity   = lt_condition_validity
            et_condition_supplement = lt_condition_supplement
            et_condition_scale      = lt_condition_scale
            et_messages             = lt_messages
          CHANGING
            ct_condition_validity   = lt_condition_validity_c
            ct_condition_supplement = lt_condition_supplement_c
            ct_condition_scale      = lt_condition_scale_c
            cr_cond_record          = lr_cond_record
            cr_cond_scale           = lr_cond_scale

        ).
        APPEND LINES OF lt_messages TO et_messages.
        CLEAR lt_messages.
      ENDLOOP.
    ENDIF.
    APPEND LINES OF <ft_cond_record> TO <ft_cond_record_for_overlap>.
    APPEND LINES OF <ft_cond_record_u> TO <ft_cond_record_for_overlap>.
    APPEND LINES OF <ft_cond_record_c> TO <ft_cond_record_for_overlap>.
    SORT <ft_cond_record_for_overlap> BY knumh kopos.
    DELETE ADJACENT DUPLICATES FROM <ft_cond_record_for_overlap> COMPARING knumh kopos.
    CLEAR lt_failed_record.
    TEST-SEAM check_for_overlap.
      check_for_overlap(
        EXPORTING
          ir_cond_record = lr_cond_record_for_overlap
        IMPORTING
          et_record      = lt_failed_record                " Number of the Condition Record
      ).
    END-TEST-SEAM.
    LOOP AT lt_failed_record INTO ls_failed_record.
      CLEAR ls_messages.
      ls_messages-conditionrecord = ls_failed_record-knumh.
      ls_messages-conditionsequentialnumber = '01'.
      ls_messages-systemmessagetype = 'E'.
      ls_messages-systemmessageidentification = 'PRCG_CNDNRECORD_API'.
      ls_messages-systemmessagenumber = 101.
      APPEND ls_messages TO et_messages.
      DELETE lt_deletion_scale WHERE conditionrecord = ls_failed_record-knumh.
      DELETE <ft_cond_record_u> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_scale_u> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_record_c> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_scale_c> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_record> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_scale> WHERE knumh = ls_failed_record-knumh.
      DELETE <ft_cond_record_for_overlap> WHERE knumh = ls_failed_record-knumh.
    ENDLOOP.
    CLEAR lt_failed_record.
    TEST-SEAM check_for_contract.
      check_for_contract(
        EXPORTING
          ir_cond_record = lr_cond_record_for_overlap
        IMPORTING
          et_record_table = DATA(lt_failed_record_table)                " Number of the Condition Record
      ).
    END-TEST-SEAM.
    LOOP AT lt_failed_record_table INTO DATA(ls_failed_record_table).
      CLEAR ls_messages.
      ls_messages-conditionrecord = ls_failed_record_table-knumh.
      ls_messages-conditionsequentialnumber = '01'.
      ls_messages-systemmessagetype = 'E'.
      ls_messages-systemmessageidentification = 'WS'.
      ls_messages-systemmessagenumber = 682.
      ls_messages-systemmessagevariable1 = ls_failed_record_table-kotabnr.
      APPEND ls_messages TO et_messages.
      DELETE lt_deletion_scale WHERE conditionrecord = ls_failed_record_table-knumh.
      DELETE <ft_cond_record_u> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_scale_u> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_record_c> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_scale_c> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_record> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_scale> WHERE knumh = ls_failed_record_table-knumh.
      DELETE <ft_cond_record_for_overlap> WHERE knumh = ls_failed_record_table-knumh.
    ENDLOOP.

    FIELD-SYMBOLS <lt_cond_text_c> TYPE cond_konptdb_t.
    DATA lr_cond_text_c TYPE REF TO data.
    FIELD-SYMBOLS <lt_cond_text_u> TYPE cond_konptdb_t.
    DATA lr_cond_text_u TYPE REF TO data.
    DATA lv_updkz       TYPE updkz_d.

    CREATE DATA lr_cond_text_c TYPE cond_konptdb_t.
    ASSIGN lr_cond_text_c->* TO <lt_cond_text_c>.
    CREATE DATA lr_cond_text_u TYPE cond_konptdb_t.
    ASSIGN lr_cond_text_u->* TO <lt_cond_text_u>.

    LOOP AT lt_record INTO ls_record WHERE conditionisscale IS INITIAL.
      IF ls_record-conditionrecord+0(2) = '$$' AND ls_record-conditiontext IS NOT INITIAL.
        lv_updkz = if_cnd_maint_ltd_types=>c_updkz_insert.

        APPEND INITIAL LINE TO <lt_cond_text_c> ASSIGNING FIELD-SYMBOL(<ls_cond_text_c>).
        <ls_cond_text_c>-mandt = sy-mandt.
        <ls_cond_text_c>-knumh = ls_record-conditionrecord.
        <ls_cond_text_c>-kopos = ls_record-conditionsequentialnumber.
        <ls_cond_text_c>-spras = sy-langu.
        <ls_cond_text_c>-vtext = ls_record-conditiontext.
        <ls_cond_text_c>-updkz = lv_updkz.

      ELSE.
        IF ls_record-conditionsequentialnumber = '01'.
          READ TABLE lt_db_record_text INTO DATA(ls_db_record_text) WITH KEY conditionrecord = ls_record-conditionrecord
                                                                             language = sy-langu.
          IF sy-subrc = 0.
            lv_updkz = if_cnd_maint_ltd_types=>c_updkz_update.
          ELSE.
            lv_updkz = if_cnd_maint_ltd_types=>c_updkz_insert.
          ENDIF.
        ELSE.
          READ TABLE lt_db_supplement_text INTO DATA(ls_db_supplement_text) WITH KEY conditionrecord = ls_record-conditionrecord
                                                                                     conditionsequentialnumber = ls_record-conditionsequentialnumber
                                                                                     language = sy-langu.
          IF sy-subrc = 0.
            lv_updkz = if_cnd_maint_ltd_types=>c_updkz_update.
          ELSE.
            lv_updkz = if_cnd_maint_ltd_types=>c_updkz_insert.
          ENDIF.
        ENDIF.

        IF lv_updkz = if_cnd_maint_ltd_types=>c_updkz_insert AND ls_record-conditiontext IS INITIAL.
          CONTINUE.
        ENDIF.

        IF lv_updkz = if_cnd_maint_ltd_types=>c_updkz_update AND ls_record-conditiontext = ls_db_record_text-conditiontext.
          CONTINUE.
        ENDIF.

        APPEND INITIAL LINE TO <lt_cond_text_u> ASSIGNING FIELD-SYMBOL(<ls_cond_text_u>).
        <ls_cond_text_u>-mandt = sy-mandt.
        <ls_cond_text_u>-knumh = ls_record-conditionrecord.
        <ls_cond_text_u>-kopos = ls_record-conditionsequentialnumber.
        <ls_cond_text_u>-spras = sy-langu.
        <ls_cond_text_u>-vtext = ls_record-conditiontext.
        <ls_cond_text_u>-updkz = lv_updkz.
      ENDIF.
    ENDLOOP.

    GET REFERENCE OF <lt_cond_text_c> INTO lr_cond_text_c.
    GET REFERENCE OF <lt_cond_text_u> INTO lr_cond_text_u.

* Save exsiting condition record (delete scale -> save update exsiting record and supplement -> create new supplement and scale based exsting condition record)
    IF <ft_cond_record_u> IS NOT INITIAL OR <ft_cond_scale_u> IS NOT INITIAL OR <ft_cond_record_c> IS NOT INITIAL OR <ft_cond_scale_c> IS NOT INITIAL.
      CLEAR lt_failed_record.
      check_and_enqueue(
        CHANGING
          cr_cond_record   = lr_cond_record_u
          cr_cond_scale    = lr_cond_scale_u
          ct_message       = et_messages
          ct_failed_record = lt_failed_record
      ).
      check_and_enqueue(
        CHANGING
          cr_cond_record   = lr_cond_record_c
          cr_cond_scale    = lr_cond_scale_c
          ct_message       = et_messages
          ct_failed_record = lt_failed_record
      ).
      LOOP AT lt_failed_record INTO ls_failed_record.
        DELETE lt_deletion_scale WHERE conditionrecord = ls_failed_record-knumh.
      ENDLOOP.

      TRY.
* delete scale
          mo_sls_api->delete_condition_record(
            IMPORTING
              et_message              = DATA(lt_message_d)
            CHANGING
              ct_condition_scale      = lt_deletion_scale
          ).
          APPEND LINES OF lt_message_d TO et_messages.
        CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
      ENDTRY.

      DATA lv_tabix TYPE sy-tabix.
      LOOP AT <lt_cond_text_u> INTO DATA(ls_cond_text_u).
        lv_tabix = sy-tabix.
        READ TABLE <ft_cond_record_u> WITH KEY knumh = ls_cond_text_u-knumh
                                               kopos = ls_cond_text_u-kopos TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE <lt_cond_text_u> INDEX lv_tabix.
        ENDIF.
      ENDLOOP.

      CLEAR: lt_adj_cndn_overlap,lt_suppl_seqno_mapping.
      TRY.
* save update exsiting record and supplement
          save_record(
            IMPORTING
              et_adj_cndn_overlap = lt_adj_cndn_overlap
              et_suppl_seqno_mapping = lt_suppl_seqno_mapping
            CHANGING
              cr_cond_record = lr_cond_record_u
              cr_cond_scale  = lr_cond_scale_u
              cr_cond_text   = lr_cond_text_u
          ).
        CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
          RETURN.
      ENDTRY.

      add_success_message(
        EXPORTING
          ir_cond_record         = lr_cond_record_u
          ir_cond_scale          = lr_cond_scale_u
          it_adj_cndn_overlap    = lt_adj_cndn_overlap
          it_suppl_seqno_mapping = lt_suppl_seqno_mapping
          it_record              = it_record
        IMPORTING
          ct_success_record = et_success_record
      ).

      LOOP AT <lt_cond_text_u> INTO ls_cond_text_u.
        lv_tabix = sy-tabix.
        READ TABLE <ft_cond_record_c> WITH KEY knumh = ls_cond_text_u-knumh
                                               kopos = ls_cond_text_u-kopos TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE <lt_cond_text_u> INDEX lv_tabix.
        ENDIF.
      ENDLOOP.

      CLEAR: lt_adj_cndn_overlap,lt_suppl_seqno_mapping.
      TRY.
* create new supplement and scale based exsting condition record
          save_record(
            IMPORTING
              et_adj_cndn_overlap = lt_adj_cndn_overlap
              et_suppl_seqno_mapping = lt_suppl_seqno_mapping
            CHANGING
              cr_cond_record = lr_cond_record_c
              cr_cond_scale  = lr_cond_scale_c
*              cr_cond_text   = lr_cond_text_u
          ).
        CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
          CLEAR et_success_record.
          RETURN.
      ENDTRY.
      add_success_message(
        EXPORTING
          ir_cond_record         = lr_cond_record_c
          ir_cond_scale          = lr_cond_scale_c
          it_adj_cndn_overlap    = lt_adj_cndn_overlap
          it_suppl_seqno_mapping = lt_suppl_seqno_mapping
          it_record              = it_record
        IMPORTING
          ct_success_record = et_success_record
      ).
    ENDIF.
* Save new condition record with $$
    IF <ft_cond_record> IS NOT INITIAL OR <ft_cond_scale> IS NOT INITIAL.
      CLEAR lt_failed_record.
      check_and_enqueue(
        CHANGING
          cr_cond_record   = lr_cond_record
          cr_cond_scale    = lr_cond_scale
          ct_message       = et_messages
          ct_failed_record = lt_failed_record
      ).

      LOOP AT <lt_cond_text_c> INTO DATA(ls_cond_text_c).
        lv_tabix = sy-tabix.
        READ TABLE <ft_cond_record> WITH KEY knumh = ls_cond_text_c-knumh
                                             kopos = ls_cond_text_c-kopos TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          DELETE <lt_cond_text_c> INDEX lv_tabix.
        ENDIF.
      ENDLOOP.

      CLEAR: lt_adj_cndn_overlap, lt_suppl_seqno_mapping.
      TRY.
* Save new condition record with $$
          save_record(
            IMPORTING
              et_adj_cndn_overlap = lt_adj_cndn_overlap
              et_suppl_seqno_mapping = lt_suppl_seqno_mapping
            CHANGING
              cr_cond_record = lr_cond_record
              cr_cond_scale  = lr_cond_scale
              cr_cond_text   = lr_cond_text_c
          ).
        CATCH cx_prcg_cndnrecord_exception.
          RETURN.
      ENDTRY.
      add_success_message(
        EXPORTING
          ir_cond_record         = lr_cond_record
          ir_cond_scale          = lr_cond_scale
          it_adj_cndn_overlap    = lt_adj_cndn_overlap
          it_suppl_seqno_mapping = lt_suppl_seqno_mapping
          it_record              = it_record
        IMPORTING
          ct_success_record = et_success_record
      ).
    ENDIF.

*    SORT et_success_record BY knumh kopos kostkz.

    SORT et_messages.
    DELETE ADJACENT DUPLICATES FROM et_messages COMPARING ALL FIELDS.
    DELETE et_messages WHERE systemmessagetype NE 'E' AND systemmessagetype NE 'A'.
  ENDMETHOD.


  METHOD PARSE_EXCEL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS: lc_filename  TYPE string VALUE 'xl/worksheets/sheet1.xml',
               lc_sheetdata TYPE string VALUE 'sheetData',
               lc_row_sign  TYPE string VALUE 'r'.

    DATA: lo_xml_document_sst   TYPE REF TO cl_xml_document,
          lt_invalid_name_value TYPE /iwbep/t_mgw_name_value_pair,
          lt_later_name_value   TYPE /iwbep/t_mgw_name_value_pair,
          lt_date_name_value    TYPE /iwbep/t_mgw_name_value_pair,
          lo_part               TYPE REF TO cl_openxml_part,
          lv_sheet_content_val  TYPE xstring,
          lo_xml_document       TYPE REF TO cl_xml_document,
          lo_node_val_sheetdata TYPE REF TO if_ixml_node,
          lo_row                TYPE REF TO if_ixml_node,
          lo_node_val_row       TYPE REF TO if_ixml_node,
          lo_node_val_c         TYPE REF TO if_ixml_node.

    TEST-SEAM test_parse_excel.

      IF NOT iv_xstring IS INITIAL.
        TRY.
            DATA(lo_xlsx_doc) = cl_xlsx_document=>load_document( iv_xstring ).
          CATCH cx_openxml_format. " Not a valid OpenXML/OPC Package
            RETURN.
        ENDTRY.
      ELSEIF NOT iv_fieldname IS INITIAL.
        TRY.
            DATA(lv_file) = cl_openxml_helper=>load_local_file( iv_fieldname ).
          CATCH cx_openxml_not_found. " Part not found
            RETURN.
        ENDTRY.
        TRY.
            lo_xlsx_doc = cl_xlsx_document=>load_document( lv_file ).
          CATCH cx_openxml_format. " Not a valid OpenXML/OPC Package
            RETURN.
        ENDTRY.
      ENDIF.

      TRY.
          DATA(lo_workbookpart) = lo_xlsx_doc->get_workbookpart( ).
        CATCH cx_openxml_not_found. " Part not found
          RETURN.
        CATCH cx_openxml_format.    " Packaging Error - Invalid Content
          RETURN.
      ENDTRY.
      TRY.
          DATA(lo_worksheetparts) = lo_workbookpart->get_worksheetparts( ).
        CATCH cx_openxml_format. " Packaging Error - Invalid Content
          RETURN.
      ENDTRY.
      DATA(lv_count) = lo_worksheetparts->get_count( ).
      TRY.
          DATA(lo_shrdstr_content) = lo_workbookpart->get_sharedstringspart( )->get_data( ).
        CATCH cx_openxml_format.    " Packaging Error - Invalid Content
          RETURN.
        CATCH cx_openxml_not_found. " Part not found
          RETURN.
      ENDTRY.

    END-TEST-SEAM.

    " Get all the shared strings
    CREATE OBJECT lo_xml_document_sst.
    lo_xml_document_sst->parse_xstring( lo_shrdstr_content ).
    DATA(lo_node_sst) = lo_xml_document_sst->find_node( 'sst' ).

    DATA(lo_node_si) = lo_node_sst->get_first_child( ).
    CLEAR mt_shared_str.
    WHILE lo_node_si IS BOUND.
      DATA(lv_str) = lo_node_si->get_first_child( )->get_value( ).
**      CONDENSE lv_str. "material number can have space
      REPLACE ALL OCCURRENCES OF cl_abap_char_utilities=>cr_lf IN lv_str WITH space.
      APPEND lv_str TO mt_shared_str.
      lo_node_si = lo_node_si->get_next( ).
    ENDWHILE.

    DO lv_count TIMES.
      DATA(lv_index) = sy-index - 1.
      TEST-SEAM test_parse_excel1.

        lo_part = lo_worksheetparts->get_part( iv_index = lv_index ).
        IF lv_count = 1.
          lo_part = lo_workbookpart.
          DATA(lr_uri) = cl_openxml_parturi=>create_from_filename( lc_filename ).
          TRY.
              lv_sheet_content_val = lo_workbookpart->get_part_by_uri( ir_parturi = lr_uri )->get_data( ).
            CATCH cx_openxml_not_found. " Part not found
            CATCH cx_openxml_format.    " Packaging Error - Invalid Content
          ENDTRY.

        ELSE.
          IF lo_part IS BOUND.
            lv_sheet_content_val = lo_part->get_data( ).
          ENDIF.
        ENDIF.

      END-TEST-SEAM.
      get_begin_row_and_sheet_id(
        EXPORTING
          iv_sheet_content_val = lv_sheet_content_val
        IMPORTING
          ev_begin_row         = DATA(lv_begin_row)
    ).
      IF lv_begin_row IS NOT INITIAL.
        EXIT.
      ENDIF.
    ENDDO.

    IF lv_begin_row IS INITIAL.
      ev_invalid_excel = abap_true.
    ENDIF.
    CHECK ev_invalid_excel = abap_false.

*-<sheetData>
*  -<row r="1" x14ac:dyDescent="0.3" spans="1:25">
*    -<c r="A1" t="s" s="16">
*       <v>76</v>
*     </c>

    CREATE OBJECT lo_xml_document. "CL_XML_DOCUMENT
    lo_xml_document->parse_xstring( lv_sheet_content_val ).
    lo_node_val_sheetdata = lo_xml_document->find_node( name = lc_sheetdata ). "IF_IXML_ELEMENT
    IF lo_node_val_sheetdata IS BOUND.
      lo_row = lo_node_val_sheetdata->get_first_child( ).
      "Get field name row
      DATA(lv_fieldname_row_no) = lv_begin_row - 1.
      WHILE lo_row IS BOUND.
        DATA(lv_row_number) = lo_row->get_attributes( )->get_named_item( name = lc_row_sign )->get_value( ).
        IF lv_fieldname_row_no = lv_row_number.
          EXIT.
        ENDIF.
        lo_row = lo_row->get_next( ).
      ENDWHILE.

*       "Begin data row
      lo_node_val_row = lo_row->get_next( ).
    ENDIF.


    DATA:ls_record TYPE zi_slsprcgcndnrecdtemplate.
    DATA lv_row TYPE string.

    "ConditionRateValue and ConditionScaleRateValue cannot be removed from Excel
    READ TABLE mt_field_list WITH KEY table_line = gcs_sales_condition-conditionratevalue_raw
                             TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      check_required_field(
        EXPORTING
          iv_fieldname_raw = gcs_sales_condition-conditionratevalue_raw
          is_record        = VALUE #( )
        IMPORTING
          et_messages      = DATA(lt_msg)
      ).
      APPEND LINES OF lt_msg TO et_messages.
      ev_invalid_excel = abap_true.
    ENDIF.
    READ TABLE mt_field_list WITH KEY table_line = gcs_sales_condition-conditionscaleratevalue_raw
                             TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      check_required_field(
        EXPORTING
          iv_fieldname_raw = gcs_sales_condition-conditionscaleratevalue_raw
          is_record        = VALUE #( )
        IMPORTING
          et_messages      = lt_msg
      ).
      APPEND LINES OF lt_msg TO et_messages.
      ev_invalid_excel = abap_true.
    ENDIF.
    CHECK ev_invalid_excel = abap_false.

    WHILE lo_node_val_row IS BOUND.
      DATA(lv_name_tmp) = lo_node_val_row->get_attributes( )->get_named_item_ns( lc_row_sign )->get_name( ).

      lv_row = lo_node_val_row->get_attributes( )->get_named_item_ns( lc_row_sign )->get_value( ).
      lo_node_val_c = lo_node_val_row->get_first_child( ).
      DATA(lv_column_position) = 0.
      WHILE lo_node_val_c IS BOUND.
        DATA(lv_r) = lo_node_val_c->get_attributes( )->get_named_item_ns( lc_row_sign )->get_value( ).

        FIND FIRST OCCURRENCE OF lv_row IN lv_r MATCH OFFSET DATA(lv_pos).
        CHECK lv_pos > 0.
        DATA(lv_original_value) = me->get_xml_value_str( lo_node_val_c ).
        lv_r = lv_r+0(lv_pos).
        lv_column_position = get_int_from_excel_column( iv_excel_column = lv_r ).
        READ TABLE mt_field_list INTO DATA(ls_column) INDEX lv_column_position.
        IF sy-subrc = 0.
          READ TABLE mt_dd03ndtab WITH KEY fieldname_raw = ls_column TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            ASSIGN COMPONENT ls_column OF STRUCTURE ls_record TO FIELD-SYMBOL(<fs_col>).
            IF <fs_col> IS ASSIGNED AND <fs_col> IS INITIAL.
              check_field(
                EXPORTING
                  iv_value              = lv_original_value
                  iv_column             = ls_column
                  it_dd03ndtab          = mt_dd03ndtab
                IMPORTING
                  et_invalid_name_value = DATA(lt_invalid)
                  et_later_name_value   = DATA(lt_later)
                  et_date_name_value    = DATA(lt_date_format)
                  ev_value              = DATA(lv_converted_value)
              ).
              APPEND LINES OF lt_date_format TO lt_date_name_value.
              APPEND LINES OF lt_invalid TO lt_invalid_name_value.
              APPEND LINES OF lt_later TO lt_later_name_value.
              IF lt_invalid IS INITIAL.
                IF ls_column = 'WBSElementInternalID' OR ls_column = 'WorkPackage'.
                  DATA:lv_ps_posid TYPE ps_posid,
                       lv_ps_posnr TYPE ps_posnr.
                  lv_ps_posid = lv_converted_value.
                  CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
                    EXPORTING
                      input     = lv_ps_posid
                    IMPORTING
                      output    = lv_ps_posnr
                    EXCEPTIONS
                      not_found = 1
                      OTHERS    = 2.
                  IF sy-subrc <> 0.
                    APPEND VALUE #( name = ls_column value = lv_original_value ) TO lt_invalid_name_value.
                  ELSE.
                    <fs_col> = lv_ps_posnr.
                  ENDIF.
                ELSE.
                  <fs_col> = lv_converted_value.
                ENDIF.
              ENDIF.
              UNASSIGN <fs_col>.
            ENDIF.
          ENDIF.
        ENDIF.
        lo_node_val_c = lo_node_val_c->get_next( ).
        CLEAR ls_column.
      ENDWHILE.

      IF ls_record IS NOT INITIAL. "In case of empty row
        check_record(
          EXPORTING
            it_date     = lt_date_name_value
            it_later    = lt_later_name_value
          IMPORTING
            et_messages = lt_msg
          CHANGING
            cs_record   = ls_record
            ct_invalid  = lt_invalid_name_value
        ).
        APPEND LINES OF lt_msg TO et_messages.
        IF lt_msg IS INITIAL.
          APPEND ls_record TO et_record_valid.
        ELSE.
          APPEND ls_record TO et_record_invalid.
        ENDIF.
        APPEND ls_record TO et_record.
*        IF lines( et_record ) > cv_rows_limit.
*          CLEAR:et_record_invalid,et_record_valid,et_messages.
*          APPEND check_rows_limit( ) TO et_messages.
*          EXIT.
*        ENDIF.
      ENDIF.

      CLEAR:ls_record,lt_invalid_name_value,lt_later_name_value,lt_date_name_value.

      lo_node_val_row = lo_node_val_row->get_next( ).
    ENDWHILE.

    "If there is an invalid record, other lines of the same record are also added to it
    LOOP AT et_record_invalid INTO DATA(ls_invalid).
      LOOP AT et_record_valid INTO DATA(ls_valid)
                              WHERE conditionrecord = ls_invalid-conditionrecord.
        DELETE et_record_valid INDEX sy-tabix.
        APPEND ls_valid TO et_record_invalid.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


  METHOD PERCENTAGE_PROPERTY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR es_message.

    DATA(lv_label) = get_label( CONV #( is_invalid-name ) ).
    MESSAGE e025(prcg_cndnrecord_api)
       WITH is_record-conditionrecord is_record-conditionsequentialnumber lv_label iv_percentage INTO DATA(ls_msg).
    es_message = VALUE #( conditionrecord             = is_record-conditionrecord
                          conditionsequentialnumber   = is_record-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 ).
  ENDMETHOD.


  METHOD PREPARE_SAME_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    TYPES:BEGIN OF ty_con_t685a,
            conditionrecord           TYPE knumh,
            conditionsequentialnumber TYPE kopos.
            INCLUDE TYPE t685a.
    TYPES:END OF ty_con_t685a.
    DATA:lr_validity                  TYPE REF TO data,
         lr_record                    TYPE REF TO data,
         lr_supplement                TYPE REF TO data,
         lr_scale                     TYPE REF TO data,
         lv_conditionsequentialnumber TYPE a_slsprcgcndnrecordscale-conditionsequentialnumber,
         lv_conditionscaleamount      TYPE a_slsprcgcndnrecordscale-conditionscaleamount,
         lv_conditionscalequantity    TYPE a_slsprcgcndnrecordscale-conditionscalequantity,
         lt_con_t685a                 TYPE TABLE OF ty_con_t685a,
         ls_con_t685a                 TYPE ty_con_t685a,
         ls_t685a                     TYPE t685a,
         lt_scale                     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t.

    CLEAR: et_condition_record, et_condition_validity, et_condition_supplement, et_condition_scale.

    CLEAR ls_con_t685a.
    CLEAR ls_t685a.
    READ TABLE mt_t685a INTO ls_t685a WITH KEY kschl = is_condition_record-conditiontype.
    MOVE-CORRESPONDING ls_t685a TO ls_con_t685a.
    ls_con_t685a-conditionrecord = is_condition_record-conditionrecord.
    ls_con_t685a-conditionsequentialnumber = is_condition_record-conditionsequentialnumber.
    APPEND ls_con_t685a TO lt_con_t685a.

    APPEND is_condition_record TO et_condition_record.
    LOOP AT ct_condition_validity ASSIGNING FIELD-SYMBOL(<fs_validity>)
                                        WHERE conditionrecord = is_condition_record-conditionrecord.
      APPEND <fs_validity> TO et_condition_validity.
    ENDLOOP.
    DELETE ct_condition_validity WHERE conditionrecord = is_condition_record-conditionrecord.

    LOOP AT ct_condition_supplement ASSIGNING FIELD-SYMBOL(<fs_supplement>)
                                          WHERE conditionrecord = is_condition_record-conditionrecord.
      APPEND <fs_supplement> TO et_condition_supplement.

      READ TABLE lt_con_t685a WITH KEY conditionrecord = <fs_supplement>-conditionrecord
                                       conditionsequentialnumber = <fs_supplement>-conditionsequentialnumber
                                       TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        CLEAR ls_con_t685a.
        CLEAR ls_t685a.
        READ TABLE mt_t685a INTO ls_t685a WITH KEY kschl = <fs_supplement>-conditiontype.
        MOVE-CORRESPONDING ls_t685a TO ls_con_t685a.
        ls_con_t685a-conditionrecord = <fs_supplement>-conditionrecord.
        ls_con_t685a-conditionsequentialnumber = <fs_supplement>-conditionsequentialnumber.
        APPEND ls_con_t685a TO lt_con_t685a.
      ENDIF.
    ENDLOOP.
    DELETE ct_condition_supplement WHERE conditionrecord = is_condition_record-conditionrecord.

    "Handle scale based different sequential number
    LOOP AT lt_con_t685a INTO ls_con_t685a.
      LOOP AT ct_condition_scale ASSIGNING FIELD-SYMBOL(<fs_scale>)
                                 WHERE conditionrecord = ls_con_t685a-conditionrecord
                                   AND conditionsequentialnumber = ls_con_t685a-conditionsequentialnumber.
        APPEND <fs_scale> TO lt_scale.
      ENDLOOP.
      IF ls_con_t685a-kzbzg = 'B'. "Value scale
        APPEND LINES OF check_same_scale_amount( EXPORTING iv_kstpr = ls_con_t685a-kstpr CHANGING ct_scale = lt_scale ) TO et_messages.
      ELSE.
        APPEND LINES OF check_same_scale_quantity( EXPORTING iv_kstpr = ls_con_t685a-kstpr CHANGING ct_scale = lt_scale ) TO et_messages.
      ENDIF.
      APPEND LINES OF lt_scale TO et_condition_scale.
      CLEAR lt_scale.
    ENDLOOP.
    DELETE ct_condition_scale WHERE conditionrecord = is_condition_record-conditionrecord.

    LOOP AT et_condition_validity ASSIGNING <fs_validity>.
      GET REFERENCE OF <fs_validity> INTO lr_validity.
      mo_prcg_util->convert_value_to_input_msg(
        EXPORTING
          iv_tabname  = 'ZISLSPRCGRECDTMP'
        IMPORTING
          et_messages = DATA(lt_messages)
        CHANGING
          cr_data     = lr_validity
      ).
      APPEND LINES OF lt_messages TO et_messages.
    ENDLOOP.

    IF iv_db_record_flag = abap_false.
      LOOP AT et_condition_record ASSIGNING FIELD-SYMBOL(<fs_record>).
        GET REFERENCE OF <fs_record> INTO lr_record.
        mo_prcg_util->convert_value_to_input_msg(
          EXPORTING
            iv_tabname  = 'ZISLSPRCGRECDTMP'
          IMPORTING
            et_messages = lt_messages
          CHANGING
            cr_data     = lr_record
        ).
        APPEND LINES OF lt_messages TO et_messages.
      ENDLOOP.
    ENDIF.

    LOOP AT et_condition_supplement ASSIGNING <fs_supplement>.
      GET REFERENCE OF <fs_supplement> INTO lr_supplement.
      mo_prcg_util->convert_value_to_input_msg(
        EXPORTING
          iv_tabname  = 'ZISLSPRCGRECDTMP'
        IMPORTING
          et_messages = lt_messages
        CHANGING
          cr_data     = lr_supplement
      ).
      APPEND LINES OF lt_messages TO et_messages.
    ENDLOOP.

    DATA(lv_index) = 0.
    LOOP AT et_condition_scale ASSIGNING <fs_scale>.
      GET REFERENCE OF <fs_scale> INTO lr_scale.
      mo_prcg_util->convert_value_to_input_msg(
        EXPORTING
          iv_tabname  = 'ZISLSPRCGRECDTMP'
        IMPORTING
          et_messages = lt_messages
        CHANGING
          cr_data     = lr_scale
      ).
      APPEND LINES OF lt_messages TO et_messages.

      "First scale rate value should be the same as rate value in record or supplement
      IF <fs_scale>-conditionscaleline = '0001'.
        IF iv_db_record_flag = abap_false.
          APPEND LINES OF check_rate_scale_rec_sup( it_record = et_condition_record it_supplement = et_condition_supplement is_scale = <fs_scale> )
              TO et_messages.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD RAISE_PRCG_CNDN_EXCEPTION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
      MESSAGE ID ix_exception->if_t100_message~t100key-msgid
      TYPE ix_exception->if_t100_dyn_msg~msgty
      NUMBER ix_exception->if_t100_message~t100key-msgno
      WITH ix_exception->if_t100_dyn_msg~msgv1
      ix_exception->if_t100_dyn_msg~msgv2
      ix_exception->if_t100_dyn_msg~msgv3
      ix_exception->if_t100_dyn_msg~msgv4.
  ENDMETHOD.


  METHOD SAVE_IMPORT_HISTORY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_cndn_recd_imprt TYPE cndn_upld_hist,
          lt_cndn_recd_imprt TYPE STANDARD TABLE OF cndn_upld_hist.

    SELECT * FROM cndn_upld_hist WHERE cndnrecd_import_date IS INITIAL INTO TABLE @DATA(lt_hist).

    DELETE cndn_upld_hist FROM TABLE lt_hist.


    TRY.
        DATA(lv_uuid) =  cl_system_uuid=>if_system_uuid_static~create_uuid_x16( ).
      CATCH cx_uuid_error.
        "TO-DO : add technical error message(system level error)
    ENDTRY.


    "Import history
    ls_cndn_recd_imprt-filename = iv_filename.
    ls_cndn_recd_imprt-ernam = sy-uname.
    ls_cndn_recd_imprt-cndnrecd_import_date = iv_imprt_date.
    ls_cndn_recd_imprt-uuid = lv_uuid.
    ls_cndn_recd_imprt-cndnrecd_import_status = '0'.
    ls_cndn_recd_imprt-upload_time = iv_imprt_time.
    APPEND ls_cndn_recd_imprt TO lt_cndn_recd_imprt.
    INSERT cndn_upld_hist FROM TABLE lt_cndn_recd_imprt.

    ev_imprtid = lv_uuid.




  ENDMETHOD.


  METHOD SAVE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA lt_message TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t.
    mo_ltd_api->save(
      EXPORTING
        iv_sync                = abap_true
        iv_check_records       = abap_false
        iv_no_save             = abap_false
      IMPORTING
        et_return              = DATA(lt_ret)
        et_origl_cndn_overlap  = DATA(lt_origl_cndn_overlap)                 " Condition Record
        et_adj_cndn_overlap    = et_adj_cndn_overlap                 " Condition Record
        et_suppl_seqno_mapping = et_suppl_seqno_mapping
      CHANGING
        cr_cond_record         = cr_cond_record
        cr_cond_scale          = cr_cond_scale
        cr_cond_text           = cr_cond_text
    ).
    REFRESH lt_message.
    convert_ltd_api_message(
      EXPORTING
        ir_cond_record = cr_cond_record
      IMPORTING
        et_message     = lt_message
      CHANGING
        ct_return      = lt_ret   " Return parameter table
    ).

* LTD API returned error message handing
    LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                        OR type = if_xo_const_message=>error.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE ID ls_ret-id
        TYPE ls_ret-type
        NUMBER ls_ret-number
        WITH ls_ret-message_v1
        ls_ret-message_v2
        ls_ret-message_v3
        ls_ret-message_v4.
    ENDLOOP.

  ENDMETHOD.


  METHOD SPLIT_RECORD_TO_ENTITIES.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lv_kopos        TYPE konp-kopos,
          ls_scale_failed TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s.

    lv_kopos = is_record-conditionsequentialnumber.

    IF is_record-conditionisscale = abap_false.
      IF lv_kopos = '01'. "Record
        READ TABLE ct_condition_record
          WITH KEY conditionrecord = is_record-conditionrecord TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          APPEND INITIAL LINE TO ct_condition_record ASSIGNING FIELD-SYMBOL(<ls_condition_record>).
          MOVE-CORRESPONDING is_record TO <ls_condition_record>.

          APPEND INITIAL LINE TO ct_condition_text ASSIGNING FIELD-SYMBOL(<ls_condition_text>).
          MOVE-CORRESPONDING is_record TO <ls_condition_text>.
          <ls_condition_text>-language = sy-langu.

          "Validity: Only consider the date in record
          READ TABLE ct_condition_validity
            WITH KEY conditionrecord          = is_record-conditionrecord
                     conditionvalidityenddate = is_record-conditionvalidityenddate TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            APPEND INITIAL LINE TO ct_condition_validity ASSIGNING FIELD-SYMBOL(<ls_condition_validity>).
            MOVE-CORRESPONDING is_record TO <ls_condition_validity>.
          ENDIF.
        ENDIF.
      ELSE. "Supplement
        READ TABLE ct_condition_supplement
          WITH KEY conditionrecord = is_record-conditionrecord
                   conditionsequentialnumber = is_record-conditionsequentialnumber TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          APPEND INITIAL LINE TO ct_condition_supplement ASSIGNING FIELD-SYMBOL(<ls_condition_supplement>).
          MOVE-CORRESPONDING is_record TO <ls_condition_supplement>.

          APPEND INITIAL LINE TO ct_condition_text ASSIGNING <ls_condition_text>.
          MOVE-CORRESPONDING is_record TO <ls_condition_text>.
          <ls_condition_text>-language = sy-langu.
        ENDIF.
      ENDIF.
    ELSE. "Scale
      APPEND INITIAL LINE TO ct_condition_scale ASSIGNING FIELD-SYMBOL(<ls_condition_scale>).
      MOVE-CORRESPONDING is_record TO <ls_condition_scale>.
    ENDIF.

  ENDMETHOD.


  METHOD UPDATE_CONDITION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lt_new_supplement TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
         lt_deletion_scale TYPE if_slsprcg_cndnrecd_api_types=>ty_cndn_scale_deletion_t.

    CLEAR et_messages.

    READ TABLE it_excel_record INTO DATA(ls_condition_record)
                               WITH KEY conditionrecord = is_db_record-conditionrecord.
    IF sy-subrc NE 0.
      ls_condition_record = is_db_record.
      DATA(lv_db_record_flag) = abap_true. "not compare with scale
      READ TABLE ct_excel_supplement INTO DATA(ls_sup) INDEX 1.
      IF sy-subrc = 0.
        DATA(lv_conditionsequentialnumber) = ls_sup-conditionsequentialnumber.
      ELSE.
        READ TABLE ct_excel_scale INTO DATA(ls_scale) INDEX 1.
        IF sy-subrc = 0.
          lv_conditionsequentialnumber = ls_scale-conditionsequentialnumber.
        ENDIF.
      ENDIF.
    ELSE.
      lv_conditionsequentialnumber = ls_condition_record-conditionsequentialnumber.
      IF ls_condition_record-conditioncalculationtype IS INITIAL.
        ls_condition_record-conditioncalculationtype = is_db_record-conditioncalculationtype.
      ENDIF.
    ENDIF.

    prepare_same_record(
      EXPORTING
        is_condition_record     = ls_condition_record
        iv_db_record_flag       = lv_db_record_flag
      IMPORTING
        et_condition_record     = DATA(lt_condition_record)
        et_condition_validity   = DATA(lt_condition_validity)
        et_condition_supplement = DATA(lt_condition_supplement)
        et_condition_scale      = DATA(lt_condition_scale)
        et_messages             = et_messages
      CHANGING
        ct_condition_validity   = ct_excel_validity
        ct_condition_supplement = ct_excel_supplement
        ct_condition_scale      = ct_excel_scale
    ).

    IF et_messages IS INITIAL.
      "Prepare for creating new supplement
      CLEAR lt_new_supplement.
      LOOP AT lt_condition_supplement ASSIGNING FIELD-SYMBOL(<fs_supplement>).
        DATA(lv_index) = sy-tabix.
        READ TABLE it_db_supplement INTO DATA(ls_db_sup)
                                    WITH KEY conditionrecord           = <fs_supplement>-conditionrecord
                                             conditionsequentialnumber = <fs_supplement>-conditionsequentialnumber.
        IF sy-subrc NE 0.
          APPEND <fs_supplement> TO lt_new_supplement.
          DELETE lt_condition_supplement INDEX lv_index.
        ENDIF.
      ENDLOOP.

      IF lt_new_supplement IS NOT INITIAL OR lt_condition_scale IS NOT INITIAL OR lv_db_record_flag = abap_false.
        IF lt_condition_scale IS NOT INITIAL.
          "Delete scale for the related sequential number first, then create scale
          DATA(lt_scale) = lt_condition_scale.
          SORT lt_scale BY conditionrecord conditionsequentialnumber.
          DELETE ADJACENT DUPLICATES FROM lt_scale COMPARING conditionrecord conditionsequentialnumber.
          LOOP AT lt_scale INTO ls_scale.
            LOOP AT it_db_scale INTO DATA(ls_db_scale)
                                WHERE conditionrecord           = ls_scale-conditionrecord
                                  AND conditionsequentialnumber = ls_scale-conditionsequentialnumber.
              APPEND VALUE #( conditionrecord           = ls_db_scale-conditionrecord
                              conditionsequentialnumber = ls_db_scale-conditionsequentialnumber
                              conditionscaleline        = ls_db_scale-conditionscaleline )
                  TO lt_deletion_scale.
            ENDLOOP.
          ENDLOOP.
          IF lt_deletion_scale IS NOT INITIAL.
            TRY.
                mo_sls_api->delete_condition_record(
                  IMPORTING
                    et_message              = DATA(lt_message_d)
                  CHANGING
                    ct_condition_scale      = lt_deletion_scale
                ).
                APPEND LINES OF lt_message_d TO et_messages.
              CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
                collect_messages(
                  EXPORTING
                    io_exception = lo_ex
                    iv_knumh     = ls_condition_record-conditionrecord
                    iv_kopos     = lv_conditionsequentialnumber
                  IMPORTING
                    et_messages  = DATA(lt_msg_ex)
                ).
                APPEND LINES OF lt_msg_ex TO et_messages.
            ENDTRY.
          ENDIF.
        ENDIF.

        "Update existing entities
        IF lv_db_record_flag = abap_false OR lt_condition_supplement IS NOT INITIAL.
          TRY.
              mo_sls_api->update_condition_record(
                IMPORTING
                  et_message              = DATA(lt_message_u)
                CHANGING
                  ct_condition_record     = lt_condition_record
                  ct_condition_validity_enh   = lt_condition_validity
                  ct_condition_supplement = lt_condition_supplement
              ).
              APPEND LINES OF lt_message_u TO et_messages.
            CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
              collect_messages(
                EXPORTING
                  io_exception = lo_ex
                  iv_knumh     = ls_condition_record-conditionrecord
                  iv_kopos     = lv_conditionsequentialnumber
                IMPORTING
                  et_messages  = lt_msg_ex
              ).
              APPEND LINES OF lt_msg_ex TO et_messages.
          ENDTRY.
        ENDIF.

        TRY.
            mo_sls_api->create_condition_record(
              IMPORTING
                et_message              = DATA(lt_message_c)
              CHANGING
                ct_condition_supplement = lt_new_supplement
                ct_condition_scale      = lt_condition_scale
            ).
            APPEND LINES OF lt_message_c TO et_messages.
          CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
            collect_messages(
              EXPORTING
                io_exception = lo_ex
                iv_knumh     = ls_condition_record-conditionrecord
                iv_kopos     = lv_conditionsequentialnumber
              IMPORTING
                et_messages  = lt_msg_ex
            ).
            APPEND LINES OF lt_msg_ex TO et_messages.
        ENDTRY.
      ENDIF.

      LOOP AT et_messages INTO DATA(ls_message) WHERE systemmessagetype = if_xo_const_message=>abort
                                                   OR systemmessagetype = if_xo_const_message=>error.
        "The statement ROLLBACK WORK closes the current SAP LUW and opens a new one.
        "SAP LUWs are implemented by bundling techniques, in which programming units
        "such as update function modules or subroutines are registered
        "in different work processes but executed by a single work process.
        "Here the method update_condition is an SAP LUW
        ROLLBACK WORK. "In case of that one action of delete, update or create is ok, other actions are failed
        EXIT.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD UPDATE_CONDITION_CHECK.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lt_new_supplement TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_supplement_t,
         lt_deletion_scale TYPE if_slsprcg_cndnrecd_api_types=>ty_cndn_scale_deletion_t,
         ls_message        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s.

    CLEAR et_messages.

    READ TABLE it_excel_record INTO DATA(ls_condition_record)
                               WITH KEY conditionrecord = is_db_record-conditionrecord.
    IF sy-subrc NE 0.
      ls_condition_record = is_db_record.
      DATA(lv_db_record_flag) = abap_true. "not compare with scale
      READ TABLE ct_excel_supplement INTO DATA(ls_sup) INDEX 1.
      IF sy-subrc = 0.
        DATA(lv_conditionsequentialnumber) = ls_sup-conditionsequentialnumber.
      ELSE.
        READ TABLE ct_excel_scale INTO DATA(ls_scale) INDEX 1.
        IF sy-subrc = 0.
          lv_conditionsequentialnumber = ls_scale-conditionsequentialnumber.
        ENDIF.
      ENDIF.
    ELSE.
      lv_conditionsequentialnumber = ls_condition_record-conditionsequentialnumber.
      IF ls_condition_record-conditioncalculationtype IS INITIAL.
        ls_condition_record-conditioncalculationtype = is_db_record-conditioncalculationtype.
      ENDIF.
    ENDIF.

    prepare_same_record(
      EXPORTING
        is_condition_record     = ls_condition_record
        iv_db_record_flag       = lv_db_record_flag
      IMPORTING
        et_condition_record     = DATA(lt_condition_record)
        et_condition_validity   = DATA(lt_condition_validity)
        et_condition_supplement = DATA(lt_condition_supplement)
        et_condition_scale      = DATA(lt_condition_scale)
        et_messages             = et_messages
      CHANGING
        ct_condition_validity   = ct_excel_validity
        ct_condition_supplement = ct_excel_supplement
        ct_condition_scale      = ct_excel_scale
    ).

    IF et_messages IS INITIAL.
      "Prepare for creating new supplement
      CLEAR lt_new_supplement.
      LOOP AT lt_condition_supplement ASSIGNING FIELD-SYMBOL(<fs_supplement>).
        DATA(lv_index) = sy-tabix.
        READ TABLE it_db_supplement INTO DATA(ls_db_sup)
                                    WITH KEY conditionrecord           = <fs_supplement>-conditionrecord
                                             conditionsequentialnumber = <fs_supplement>-conditionsequentialnumber.
        IF sy-subrc NE 0.
          APPEND <fs_supplement> TO lt_new_supplement.
          DELETE lt_condition_supplement INDEX lv_index.
        ENDIF.
      ENDLOOP.

* check exsiting condition record (delete scale -> check update exsiting record and supplement -> check create new supplement and scale based exsting condition record)
      IF lt_new_supplement IS NOT INITIAL OR lt_condition_scale IS NOT INITIAL OR lv_db_record_flag = abap_false.
        IF lt_condition_scale IS NOT INITIAL.
          "Delete scale for the related sequential number first, then create scale
          DATA(lt_scale) = lt_condition_scale.
          SORT lt_scale BY conditionrecord conditionsequentialnumber.
          DELETE ADJACENT DUPLICATES FROM lt_scale COMPARING conditionrecord conditionsequentialnumber.
          LOOP AT lt_scale INTO ls_scale.
            LOOP AT it_db_scale INTO DATA(ls_db_scale)
                                WHERE conditionrecord           = ls_scale-conditionrecord
                                  AND conditionsequentialnumber = ls_scale-conditionsequentialnumber.
              APPEND VALUE #( conditionrecord           = ls_db_scale-conditionrecord
                              conditionsequentialnumber = ls_db_scale-conditionsequentialnumber
                              conditionscaleline        = ls_db_scale-conditionscaleline )
                  TO lt_deletion_scale.
            ENDLOOP.
          ENDLOOP.
          IF lt_deletion_scale IS NOT INITIAL.
            TRY.
* Delete old scale, whether check succeed or fail, rollback.
                mo_sls_api->delete_condition_record(
                  IMPORTING
                    et_message              = DATA(lt_message_d)
                  CHANGING
                    ct_condition_scale      = lt_deletion_scale
                ).
                APPEND LINES OF lt_message_d TO et_messages.
              CATCH cx_prcg_cndnrecord_exception INTO DATA(lo_ex).
                collect_messages(
                  EXPORTING
                    io_exception = lo_ex
                    iv_knumh     = ls_condition_record-conditionrecord
                    iv_kopos     = lv_conditionsequentialnumber
                  IMPORTING
                    et_messages  = DATA(lt_msg_ex)
                ).
                APPEND LINES OF lt_msg_ex TO et_messages.
                RETURN.
            ENDTRY.
          ENDIF.
        ENDIF.
        TEST-SEAM update_record.
          "Update existing entities
          IF lv_db_record_flag = abap_false OR lt_condition_supplement IS NOT INITIAL.
            TRY.
* check update exsiting record and supplement
                check_update_record(
                  IMPORTING
                  er_cond_record          = DATA(er_cond_record_u)
                  er_cond_scale           = DATA(er_cond_scale_u)
                  CHANGING
                  ct_condition_record     = lt_condition_record
                  ct_condition_validity   = lt_condition_validity
                  ct_condition_supplement = lt_condition_supplement
                ).
              CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
                collect_messages(
                  EXPORTING
                    io_exception = lo_ex
                    iv_knumh     = ls_condition_record-conditionrecord
                    iv_kopos     = lv_conditionsequentialnumber
                  IMPORTING
                    et_messages  = lt_msg_ex
                ).
                APPEND LINES OF lt_msg_ex TO et_messages.
                IF lt_deletion_scale IS NOT INITIAL.
                  ROLLBACK WORK.
                ENDIF.
                RETURN.
            ENDTRY.
          ENDIF.

          TRY.
* check create new supplement and scale based exsting condition record
              check_create_record(
                EXPORTING
                  ir_cond_record_excel    = er_cond_record_u
                IMPORTING
                  er_cond_record          = DATA(er_cond_record_c)
                  er_cond_scale           = DATA(er_cond_scale_c)
                CHANGING
                  ct_condition_supplement = lt_new_supplement
                  ct_condition_scale      = lt_condition_scale
              ).
            CATCH cx_prcg_cndnrecord_exception INTO lo_ex.
              collect_messages(
                EXPORTING
                  io_exception = lo_ex
                  iv_knumh     = ls_condition_record-conditionrecord
                  iv_kopos     = lv_conditionsequentialnumber
                IMPORTING
                  et_messages  = lt_msg_ex
              ).
              APPEND LINES OF lt_msg_ex TO et_messages.
              IF lt_deletion_scale IS NOT INITIAL.
                ROLLBACK WORK.
              ENDIF.
              RETURN.
          ENDTRY.
        END-TEST-SEAM.
        FIELD-SYMBOLS: <ft_cond_record_c> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                       <ft_cond_scale_c>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
        FIELD-SYMBOLS: <ct_cond_record_c> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                       <ct_cond_scale_c>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
        ASSIGN er_cond_record_c->* TO <ft_cond_record_c>.
        ASSIGN er_cond_scale_c->* TO <ft_cond_scale_c>.
        ASSIGN cr_cond_record_c->* TO <ct_cond_record_c>.
        ASSIGN cr_cond_scale_c->* TO <ct_cond_scale_c>.
        IF lv_db_record_flag = abap_false OR lt_condition_supplement IS NOT INITIAL.
          FIELD-SYMBOLS: <ft_cond_record_u> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                         <ft_cond_scale_u>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
          FIELD-SYMBOLS: <ct_cond_record_u> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                         <ct_cond_scale_u>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
          ASSIGN er_cond_record_u->* TO <ft_cond_record_u>.
          ASSIGN er_cond_scale_u->* TO <ft_cond_scale_u>.
          ASSIGN cr_cond_record_u->* TO <ct_cond_record_u>.
          ASSIGN cr_cond_scale_u->* TO <ct_cond_scale_u>.
          LOOP AT <ft_cond_record_c> ASSIGNING FIELD-SYMBOL(<fs_cond_record_c>).
            READ TABLE <ft_cond_record_u> WITH KEY knumh = <fs_cond_record_c>-knumh kopos = <fs_cond_record_c>-kopos INTO DATA(ls_cond_record_u).
            <fs_cond_record_c>-datab = ls_cond_record_u-datab.
            <fs_cond_record_c>-datbi = ls_cond_record_u-datbi.
            <fs_cond_record_c>-zterm = ls_cond_record_u-zterm.
            <fs_cond_record_c>-valdt = ls_cond_record_u-valdt.
            <fs_cond_record_c>-valtg = ls_cond_record_u-valtg.
            <fs_cond_record_c>-mxwrt = ls_cond_record_u-mxwrt.
            <fs_cond_record_c>-gkwrt = ls_cond_record_u-gkwrt.
          ENDLOOP.
          APPEND LINES OF <ft_cond_record_u> TO <ct_cond_record_u>.
          INSERT LINES OF <ft_cond_scale_u> INTO TABLE <ct_cond_scale_u>.
        ENDIF.
        APPEND LINES OF <ft_cond_record_c> TO <ct_cond_record_c>.
        INSERT LINES OF <ft_cond_scale_c> INTO TABLE <ct_cond_scale_c>.
        IF lt_deletion_scale IS NOT INITIAL.
          APPEND LINES OF lt_deletion_scale TO ct_deletion_scale.
          ROLLBACK WORK. "Rollback delete scale
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD ADD_MESSAGE_TO_DB.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lo_logger         TYPE REF TO if_condition_record_logger,
         lt_log_handle     TYPE bal_t_logh,
         ls_bal_msg        TYPE bal_s_msg,
         ls_cndn_upld_msg  TYPE cndn_upld_msg,
         lt_cndn_upld_msg  TYPE STANDARD TABLE OF cndn_upld_msg,
         ls_cndn_upld_hist TYPE cndn_upld_hist,
         ls_komg           TYPE komg,
         lv_upload_time    TYPE timestampl,
         lv_failed_lines   TYPE i,
         lv_success_lines  TYPE i.

    DATA(lt_record) = it_record.
    DATA(lt_message) = it_message.
    SORT lt_message BY conditionrecord.
    DELETE ADJACENT DUPLICATES FROM lt_message COMPARING conditionrecord.

    "Calculate lines for total, success, failed
    DATA(lv_total_lines) = iv_total_lines.
    lv_failed_lines = 0.
    lv_success_lines = 0.

    GET RUN TIME FIELD lv_upload_time.

    "overlap message is I type, just store in application log
    "Error message is E type, store in db and applicaiton log
    DATA(lv_counter) = 0.

    LOOP AT lt_message INTO DATA(ls_message).
      "Move message to application log
      lo_logger = cl_condition_record_logger=>get_instance( ).
      LOOP AT it_message INTO DATA(ls_msg) WHERE conditionrecord = ls_message-conditionrecord.
        ls_bal_msg-msgid = ls_msg-systemmessageidentification.
        ls_bal_msg-msgno = ls_msg-systemmessagenumber.
        ls_bal_msg-msgty = ls_msg-systemmessagetype.
        ls_bal_msg-msgv1 = ls_msg-systemmessagevariable1.
        ls_bal_msg-msgv2 = ls_msg-systemmessagevariable2.
        ls_bal_msg-msgv3 = ls_msg-systemmessagevariable3.
        ls_bal_msg-msgv4 = ls_msg-systemmessagevariable4.
        lo_logger->add_message( is_msg = ls_bal_msg ).
      ENDLOOP.
      lo_logger->close_log( IMPORTING et_new_lognumbers = DATA(lt_logno) ).

      READ TABLE lt_logno INTO DATA(ls_logno) INDEX 1.

      "Move data and message to db
      DATA(lv_rec) = ls_message-conditionrecord.
      READ TABLE lt_record WITH KEY conditionrecord = lv_rec TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        lv_rec = ls_message-systemmessagevariable2.
      ENDIF.
      LOOP AT lt_record INTO DATA(ls_record) WHERE conditionrecord = lv_rec.
        mo_prcg_util->get_mapping_fields(
          EXPORTING
            iv_incl_record    = abap_true
          IMPORTING
            et_wlf_mp_fields  = DATA(lt_mp)
            et_dd03nd         = DATA(lt_dd03nd)
            et_mapping_fields = DATA(lt_map)
        ).
        mo_ltd_util->get_key_fields(
          EXPORTING
            iv_kvewe      = 'A'
            iv_kotabnr    = ls_record-conditiontable
          IMPORTING
            et_key_fields = DATA(lt_key_fields)
        ).

        LOOP AT lt_key_fields ASSIGNING FIELD-SYMBOL(<fs_key_fields>).
          READ TABLE lt_mp INTO DATA(ls_mp) WITH KEY int_fieldname = CONV #( <fs_key_fields>-fieldname ).
          IF sy-subrc NE 0.
            ls_mp-ext_fieldname = <fs_key_fields>-fieldname.
          ENDIF.
          ASSIGN COMPONENT ls_mp-ext_fieldname OF STRUCTURE ls_record
          TO FIELD-SYMBOL(<fs_key>).
          IF <fs_key> IS ASSIGNED.
            <fs_key_fields>-fieldvalue = <fs_key>.
            UNASSIGN <fs_key>.
          ENDIF.
        ENDLOOP.

        mo_ltd_util->map_key_fields_to_vakey(
          EXPORTING
            iv_kvewe      = 'A'
            iv_kotabnr    = ls_record-conditiontable
            it_key_fields = lt_key_fields
          IMPORTING
            ev_vakey      = DATA(lv_vakey)
        ).

        CLEAR:lt_key_fields.
        CLEAR:ls_cndn_upld_msg.
        MOVE-CORRESPONDING ls_record TO ls_cndn_upld_msg.
        ls_cndn_upld_msg-vakey = lv_vakey.
        ls_cndn_upld_msg-kostkz = ls_record-conditionisscale. "is scale

        LOOP AT it_field_list INTO DATA(ls_list).
          TRANSLATE ls_list TO UPPER CASE.
          READ TABLE lt_map INTO DATA(ls_map) WITH KEY fieldname_ext = CONV #( ls_list ).
          IF sy-subrc = 0.
            ASSIGN COMPONENT ls_map-fieldname_int OF STRUCTURE ls_cndn_upld_msg
            TO FIELD-SYMBOL(<fs_info>).
            IF <fs_info> IS ASSIGNED.
              ASSIGN COMPONENT ls_map-fieldname_ext OF STRUCTURE ls_record
              TO FIELD-SYMBOL(<fs_nonkey>).
              IF <fs_nonkey> IS ASSIGNED AND NOT <fs_nonkey> IS INITIAL.
                <fs_info> = <fs_nonkey>.
                UNASSIGN <fs_nonkey>.
              ENDIF.
              UNASSIGN <fs_info>.
            ENDIF.
          ENDIF.
        ENDLOOP.

        lv_counter = lv_counter + 1.
        ls_cndn_upld_msg-counter = lv_counter.
        ls_cndn_upld_msg-log_no = ls_logno-lognumber.
        ls_cndn_upld_msg-uuid = iv_imprtid.
        APPEND ls_cndn_upld_msg TO lt_cndn_upld_msg.

        IF ls_message-systemmessagetype = 'E'.
          lv_failed_lines = lv_failed_lines + 1.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    lv_success_lines = lv_total_lines - lv_failed_lines.

    IF NOT lt_cndn_upld_msg IS INITIAL.
      MODIFY cndn_upld_msg FROM TABLE lt_cndn_upld_msg.
    ENDIF.

    SELECT SINGLE * FROM cndn_upld_hist INTO CORRESPONDING FIELDS OF @ls_cndn_upld_hist WHERE uuid = @iv_imprtid .

    IF lv_failed_lines = lv_total_lines.
      ls_cndn_upld_hist-cndnrecd_import_status = '1'.
    ELSEIF lv_success_lines = lv_total_lines.
      ls_cndn_upld_hist-cndnrecd_import_status = '3'.
    ELSE.
      ls_cndn_upld_hist-cndnrecd_import_status = '2'.
    ENDIF.
    ls_cndn_upld_hist-total_lines   = lv_total_lines.
    ls_cndn_upld_hist-error_lines = lv_failed_lines.
    ls_cndn_upld_hist-success_lines = lv_success_lines.
    MODIFY cndn_upld_hist FROM ls_cndn_upld_hist.

    IF it_success_record IS NOT INITIAL.
      DATA(lt_success_record) = it_success_record.
      LOOP AT lt_success_record ASSIGNING FIELD-SYMBOL(<fs_success_record>).
        lv_counter = lv_counter + 1.
        <fs_success_record>-counter = lv_counter.
        <fs_success_record>-uuid = iv_imprtid.
      ENDLOOP.
      MODIFY cndn_upld_msg FROM TABLE lt_success_record.
    ENDIF.

  ENDMETHOD.


  METHOD ADD_SUCCESS_MESSAGE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_record_item            TYPE ty_record_item_s.
    FIELD-SYMBOLS: <ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ft_cond_scale>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
*    FIELD-SYMBOLS: <ft_cond_text>   type cond_konptdb_t.
*    ASSIGN ir_cond_text->* TO <ft_cond_text>.
    ASSIGN ir_cond_record->* TO <ft_cond_record>.
    ASSIGN ir_cond_scale->* TO <ft_cond_scale>.
    LOOP AT <ft_cond_record> INTO DATA(ls_cond_record).
      READ TABLE ct_success_record WITH KEY knumh = ls_cond_record-knumh kopos = ls_cond_record-kopos TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        CLEAR ls_record_item.
        ls_record_item-knumh = ls_cond_record-knumh.
        ls_record_item-kopos = ls_cond_record-kopos.
        READ TABLE it_adj_cndn_overlap WITH KEY knumh = ls_cond_record-knumh INTO DATA(ls_adj_cndn_overlap).
        IF sy-subrc = 0.
          DATA(lv_org_knumh) = ls_adj_cndn_overlap-knumh_temp.
        ELSE.
          lv_org_knumh = ls_cond_record-knumh.
        ENDIF.
        READ TABLE it_suppl_seqno_mapping WITH KEY knumh = lv_org_knumh kopos = ls_cond_record-kopos INTO DATA(ls_suppl_seqno_mapping).
        IF sy-subrc = 0.
          DATA(lv_org_kopos) = ls_suppl_seqno_mapping-kopos_old.
        ELSE.
          lv_org_kopos = ls_cond_record-kopos.
        ENDIF.
        LOOP AT it_record INTO DATA(ls_record) WHERE conditionrecord = lv_org_knumh AND conditionsequentialnumber = lv_org_kopos.
          CLEAR ls_record_item.
          ls_record_item-knumh = ls_cond_record-knumh.
          ls_record_item-kopos = ls_cond_record-kopos.
          mo_prcg_util->get_mapping_fields(
            EXPORTING
              iv_incl_record    = abap_true
            IMPORTING
              et_wlf_mp_fields  = DATA(lt_mp)
              et_dd03nd         = DATA(lt_dd03nd)
              et_mapping_fields = DATA(lt_map)
          ).
          mo_ltd_util->get_key_fields(
            EXPORTING
              iv_kvewe      = 'A'
              iv_kotabnr    = ls_record-conditiontable
            IMPORTING
              et_key_fields = DATA(lt_key_fields)
          ).

          LOOP AT lt_key_fields ASSIGNING FIELD-SYMBOL(<fs_key_fields>).
            READ TABLE lt_mp INTO DATA(ls_mp) WITH KEY int_fieldname = CONV #( <fs_key_fields>-fieldname ).
            IF sy-subrc NE 0.
              ls_mp-ext_fieldname = <fs_key_fields>-fieldname.
            ENDIF.
            ASSIGN COMPONENT ls_mp-ext_fieldname OF STRUCTURE ls_record
            TO FIELD-SYMBOL(<fs_key>).
            IF <fs_key> IS ASSIGNED.
              <fs_key_fields>-fieldvalue = <fs_key>.
              UNASSIGN <fs_key>.
            ENDIF.
          ENDLOOP.

          mo_ltd_util->map_key_fields_to_vakey(
            EXPORTING
              iv_kvewe      = 'A'
              iv_kotabnr    = ls_record-conditiontable
              it_key_fields = lt_key_fields
            IMPORTING
              ev_vakey      = DATA(lv_vakey)
          ).
          CLEAR:lt_key_fields.
          ls_record_item-vakey = lv_vakey.
          ls_record_item-kostkz = ls_record-conditionisscale. "is scale

          LOOP AT mt_field_list INTO DATA(ls_list).
            TRANSLATE ls_list TO UPPER CASE.
            READ TABLE lt_map INTO DATA(ls_map) WITH KEY fieldname_ext = CONV #( ls_list ).
            IF sy-subrc = 0.
              ASSIGN COMPONENT ls_map-fieldname_int OF STRUCTURE ls_record_item
              TO FIELD-SYMBOL(<fs_info>).
              IF <fs_info> IS ASSIGNED.
                IF ls_map-fieldname_int <> 'KNUMH' AND ls_map-fieldname_int <> 'KOPOS'.
                  ASSIGN COMPONENT ls_map-fieldname_ext OF STRUCTURE ls_record
                  TO FIELD-SYMBOL(<fs_nonkey>).
                  IF <fs_nonkey> IS ASSIGNED AND NOT <fs_nonkey> IS INITIAL.
                    <fs_info> = <fs_nonkey>.
                    UNASSIGN <fs_nonkey>.
                  ENDIF.
                ENDIF.
                UNASSIGN <fs_info>.
              ENDIF.
            ENDIF.
          ENDLOOP.

          ls_record_item-vtext = ls_record-conditiontext.
          APPEND ls_record_item TO ct_success_record.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD CHECK_AND_ENQUEUE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_message        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s.
    FIELD-SYMBOLS: <ct_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <ct_cond_scale>  TYPE cl_cnd_maint_ltd_api=>ty_cond_scale_sorted_t.
    ASSIGN cr_cond_record->* TO <ct_cond_record>.
    ASSIGN cr_cond_scale->* TO <ct_cond_scale>.
    LOOP AT <ct_cond_record> INTO DATA(ls_cond_record).

      mo_ltd_api->enqueue(
        EXPORTING
          iv_knumh      = ls_cond_record-knumh                 " Number of the Condition Record
          iv_index      = 99
          iv_kvewe      = 'A'                 " Usage of the condition table
          iv_kotabnr    = ls_cond_record-kotabnr             " Number of the Condition Table
          iv_kappl      = 'V'                 " Application
          iv_kschl      = ls_cond_record-kschl                 " Condition Type
          it_key_fields = ls_cond_record-key_fields
        IMPORTING
*                  es_lock_key   =                  " Lock key for tables
          et_return     = DATA(lt_bapiret)                 " Return parameter table
      ).
      READ TABLE lt_bapiret INTO DATA(ls_bapiret) INDEX 1.
      IF sy-subrc = 0.
        CLEAR ls_message.
        ls_message-conditionrecord = ls_cond_record-knumh.
        ls_message-conditionsequentialnumber = ls_cond_record-kopos.
        ls_message-systemmessageidentification = ls_bapiret-id.
        ls_message-systemmessagenumber = ls_bapiret-number.
        ls_message-systemmessagetype = ls_bapiret-type.
        ls_message-systemmessagevariable1 = ls_bapiret-message_v1.
        ls_message-systemmessagevariable2 = ls_bapiret-message_v2.
        ls_message-systemmessagevariable3 = ls_bapiret-message_v3.
        ls_message-systemmessagevariable4 = ls_bapiret-message_v4.
        APPEND ls_message TO ct_message.
        DELETE <ct_cond_record> WHERE knumh = ls_cond_record-knumh.
        DELETE <ct_cond_scale> WHERE knumh = ls_cond_record-knumh.
        APPEND ls_cond_record-knumh TO ct_failed_record.
      ENDIF.
      CLEAR lt_bapiret.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_CREATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lr_record              TYPE REF TO data,
         lr_validity            TYPE REF TO data,
         lr_supplement          TYPE REF TO data,
         lr_scale               TYPE REF TO data,
         lv_kzbzg               TYPE kzbzg,
         lt_konp                TYPE STANDARD TABLE OF konp WITH DEFAULT KEY,
         ls_konp                TYPE konp,
         ls_exist_scale         TYPE a_slsprcgcndnrecordscale,
         lt_exist_scale         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
         lt_message             TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
         ls_cndn_record_mapping LIKE LINE OF et_cndn_record_mapping,
         lt_cndn_record_mapping LIKE et_cndn_record_mapping.
   FIELD-SYMBOLS: <ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                  <ft_cond_record_excel> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.


    CLEAR:er_cond_record,er_cond_scale,et_message.
    TRY.
        convert_wbselement_ext2int(
          CHANGING
            ct_condition_validity = ct_condition_validity
        ).
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

* Get the existing scale data
    lt_exist_scale = ct_condition_scale.
    LOOP AT ct_condition_scale INTO DATA(ls_scale)
                              WHERE conditionrecord+0(2) <> if_prcg_cndnrecd_service=>c_temporaer."'$$'.
      DATA(lv_exist_scale) = abap_true.
      CLEAR ls_konp.
      ls_konp-knumh = ls_scale-conditionrecord.
      ls_konp-kopos = ls_scale-conditionsequentialnumber.
      APPEND ls_konp TO lt_konp.
    ENDLOOP.
    SORT lt_konp BY knumh ASCENDING
                    kopos ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_konp COMPARING knumh kopos.
    IF lt_konp IS NOT INITIAL.
      SELECT * FROM a_slsprcgcndnrecordscale APPENDING TABLE @ct_condition_scale
         FOR ALL ENTRIES IN @lt_konp
       WHERE conditionrecord = @lt_konp-knumh
         AND conditionsequentialnumber = @lt_konp-kopos.
    ENDIF.
    FREE lt_konp.

    GET REFERENCE OF ct_condition_record INTO lr_record.
    GET REFERENCE OF ct_condition_validity INTO lr_validity.
    GET REFERENCE OF ct_condition_supplement INTO lr_supplement.
    GET REFERENCE OF ct_condition_scale INTO lr_scale.

* Creating data relevant validity check
    TRY .
        mo_srv_facade->check(
          EXPORTING
            iv_updkz      = if_prcg_cndnrecd_service=>c_updkz_i "'I'
            iv_kappl      = if_prcg_cndnrecd_service=>c_kappl_v "'V'
          CHANGING
            cr_record     = lr_record
            cr_validity   = lr_validity
            cr_supplement = lr_supplement
            cr_scale      = lr_scale
        ).
      CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

* Prepare importing data for LTD API save method
    TRY.
        mo_srv_facade->prepare_create_record(
          EXPORTING
            ir_condition_record     = lr_record
            ir_condition_validity   = lr_validity
            ir_condition_supplement = lr_supplement
            ir_condition_scale      = lr_scale
          IMPORTING
            er_cond_record          = er_cond_record
            er_cond_scale           = er_cond_scale
            er_internal_record      = DATA(lr_internal_record)
            er_internal_validity    = DATA(lr_internal_validity)
            er_internal_supplement  = DATA(lr_internal_supplement)
            er_internal_scale       = DATA(lr_internal_scale) ).
      CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

    IF ir_cond_record_excel IS NOT INITIAL AND ir_cond_record_excel IS BOUND
       AND er_cond_record IS NOT INITIAL AND er_cond_record IS BOUND.
      ASSIGN er_cond_record->* TO <ft_cond_record>.
      ASSIGN ir_cond_record_excel->* TO <ft_cond_record_excel>.
      LOOP AT <ft_cond_record> ASSIGNING FIELD-SYMBOL(<fs_cond_record>).
        READ TABLE <ft_cond_record_excel> WITH KEY knumh = <fs_cond_record>-knumh kopos = <fs_cond_record>-kopos INTO DATA(ls_cond_record).
        IF sy-subrc = 0.
          <fs_cond_record>-kbetr = ls_cond_record-kbetr.
          <fs_cond_record>-mxwrt = ls_cond_record-mxwrt.
          <fs_cond_record>-gkwrt = ls_cond_record-gkwrt.
        ENDIF.
      ENDLOOP.
    ENDIF.
* Call LTD API save method to create condition record
    mo_ltd_api->check(
          IMPORTING
            et_return      = DATA(lt_ret)
          CHANGING
            cr_cond_record = er_cond_record
            cr_cond_scale  = er_cond_scale ).

* Get LTD API returned messages
    REFRESH et_message.
    convert_ltd_api_message(
      EXPORTING
        ir_cond_record = er_cond_record
        iv_is_create   = 'X'
      IMPORTING
        et_message     = et_message
      CHANGING
        ct_return      = lt_ret   " Return parameter table
    ).
* LTD API returned error message handing
    LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                        OR type = if_xo_const_message=>error.
*      IF ls_ret-id = 'VK' AND ( ls_ret-number = 035 OR ls_ret-number = 036 OR ls_ret-number = 079 OR ls_ret-number = 080 ).
*        CONTINUE.
*      ENDIF.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE ID ls_ret-id
        TYPE ls_ret-type
        NUMBER ls_ret-number
        WITH ls_ret-message_v1
        ls_ret-message_v2
        ls_ret-message_v3
        ls_ret-message_v4.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_DUPLICATE_RECORD_SUP.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA ls_comp TYPE LINE OF ty_record_t.

    CLEAR et_messages.
    DATA(lt_record) = ct_record.
    DELETE lt_record WHERE conditionisscale = abap_true.
    SORT lt_record BY conditionrecord conditionsequentialnumber.

    LOOP AT lt_record INTO DATA(ls_record).
      IF ls_record-conditionrecord = ls_comp-conditionrecord
        AND ls_record-conditionsequentialnumber = ls_comp-conditionsequentialnumber.
        DELETE ct_record WHERE conditionrecord = ls_record-conditionrecord.
        DELETE lt_record WHERE conditionrecord = ls_record-conditionrecord
                           AND conditionsequentialnumber = ls_comp-conditionsequentialnumber.
        MESSAGE e099(prcg_cndnrecord_api) INTO DATA(ls_msg).
        APPEND VALUE #( conditionrecord             = ls_record-conditionrecord
                        conditionsequentialnumber   = ls_record-conditionsequentialnumber
                        systemmessagetype           = sy-msgty
                        systemmessageidentification = sy-msgid
                        systemmessagenumber         = sy-msgno
                        systemmessagevariable1      = sy-msgv1
                        systemmessagevariable2      = sy-msgv2
                        systemmessagevariable3      = sy-msgv3
                        systemmessagevariable4      = sy-msgv4 )
          TO et_messages.
      ELSE.
        ls_comp = ls_record.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_EXCEL_AND_DB.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_db_validity    TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_s,
          ls_excel_validity TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_s,
          lt_db_validity    TYPE IF_SLSPRCG_CNDNRECD_API_TYPES=>ty_condition_validity_enh_t.
    DATA: lv_is_valid TYPE boolean.
    lt_db_validity = it_db_validity.
    LOOP AT lt_db_validity ASSIGNING FIELD-SYMBOL(<fs_validity>).
      DATA(lr_validity) = REF data( <fs_validity> ).
      TRY.
          mo_prcg_util->convert_value_to_output(
            EXPORTING
              iv_tabname = 'ISLSPRCGRECDTMP'
            CHANGING
              cr_data    = lr_validity
          ).
        CATCH cx_prcg_cndnrecord_exception INTO DATA(lr_prcg).
          RETURN.
      ENDTRY.
    ENDLOOP.
    mo_prcg_util->get_mapping_fields(
            EXPORTING
              iv_incl_record    = abap_true
            IMPORTING
              et_wlf_mp_fields  = DATA(lt_mp)
              et_dd03nd         = DATA(lt_dd03nd)
              et_mapping_fields = DATA(lt_map)
          ).
    LOOP AT lt_db_validity INTO ls_db_validity.
      lv_is_valid = abap_true.
      READ TABLE ct_db_record INTO DATA(ls_db_record) WITH KEY conditionrecord = ls_db_validity-conditionrecord.
      LOOP AT it_record INTO DATA(ls_excel) WHERE conditionrecord = ls_db_validity-conditionrecord.
        DATA(lv_conditiontype) = ls_db_record-conditiontype.
        IF ls_excel-conditionsequentialnumber <> '01'.
          READ TABLE it_db_supplement INTO DATA(ls_supplement) WITH KEY conditionrecord = ls_excel-conditionrecord conditionsequentialnumber = ls_excel-conditionsequentialnumber.
          IF sy-subrc <> 0.
            lv_conditiontype = ls_excel-conditiontype.
          ELSE.
            lv_conditiontype = ls_supplement-conditiontype.
          ENDIF.
        ENDIF.
        IF lv_conditiontype <> ls_excel-conditiontype OR ls_db_record-conditiontable <> ls_excel-conditiontable.
          lv_is_valid = abap_false.
        ELSE.
          mo_ltd_util->get_key_fields(
              EXPORTING
                iv_kvewe      = 'A'
                iv_kotabnr    = ls_db_record-conditiontable
              IMPORTING
                et_key_fields = DATA(lt_key_fields)
            ).
          LOOP AT lt_key_fields ASSIGNING FIELD-SYMBOL(<fs_key_fields>).
            READ TABLE lt_mp INTO DATA(ls_mp) WITH KEY int_fieldname = CONV #( <fs_key_fields>-fieldname ).
            IF sy-subrc = 0.
              ASSIGN COMPONENT ls_mp-ext_fieldname OF STRUCTURE ls_excel TO FIELD-SYMBOL(<fs_key_excel>).
              ASSIGN COMPONENT ls_mp-ext_fieldname OF STRUCTURE ls_db_validity TO FIELD-SYMBOL(<fs_key_db>).
              IF <fs_key_excel> IS ASSIGNED AND <fs_key_db> IS ASSIGNED.
                IF <fs_key_excel> <> <fs_key_db>.
                  CONDENSE <fs_key_excel> NO-GAPS.
                  CONDENSE <fs_key_db> NO-GAPS.
                  IF <fs_key_excel> <> <fs_key_db>.
                    lv_is_valid = abap_false.
                    EXIT.
                  ENDIF.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF lv_is_valid = abap_false.
          MESSAGE e102(prcg_cndnrecord_api) INTO DATA(ls_msg).
          APPEND VALUE #( conditionrecord             = ls_excel-conditionrecord
                          conditionsequentialnumber   = ls_excel-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 )
            TO et_messages.
          DELETE ct_db_record WHERE conditionrecord = ls_db_validity-conditionrecord.
          DELETE ct_condition_record     WHERE conditionrecord = ls_db_validity-conditionrecord.
          DELETE ct_condition_validity   WHERE conditionrecord = ls_db_validity-conditionrecord.
          DELETE ct_condition_supplement WHERE conditionrecord = ls_db_validity-conditionrecord.
          DELETE ct_condition_scale      WHERE conditionrecord = ls_db_validity-conditionrecord.
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDLOOP.
* deal with processing status
    LOOP AT ct_condition_validity ASSIGNING FIELD-SYMBOL(<fs_excel_validity>).
      READ TABLE lt_db_validity WITH KEY conditionrecord = <fs_excel_validity>-conditionrecord INTO ls_db_validity.
      IF sy-subrc = 0.
        <fs_excel_validity>-conditionprocessingstatus = ls_db_validity-conditionprocessingstatus.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_FIELD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    " --------------------------------------------------------------------
    " Some explanations to the meaning of the used lv_regex symbols:
    "   ?              - Matches the preceding element zero or one time
    "   +              - Matches the preceding element one or more times
    "   *              - Matches the preceding element zero or more times
    "   |              - The choice operator matches either the expression
    "                    before or the expression after the operator
    "   \              - Escape sign
    "   \d             - Digit [0-9]
    "   (\-|\+)?       - An optional plus or minus sign is allowed
    "   \d{1,3}        - At least one digit, but not more than three digits
    "   (\,?\d{3})*    - An optional group with the contents:
    "                    ( An optional comma followed by exactly three digits )
    "   \.\d+          - A dot followed by at least one digit
    "   .\d+           - Any single character followed by at least one digit
    "                    (this example is given in order to show the different
    "                    meaning if the escape sign is missing)
    "  Example: Regular Expression : ^([0-9]\d{0,12})(\.[0-9]{0,2})?$
    "   ^ : Matches the starting position within the string
    "  () : The string matched within the parentheses can be recalled later.
    "  [] : Matches a character that is contained within the brackets.
    "   – : Specifies a range, or minus sign
    "  {} : Number of characters.
    "  \d : Digits.
    "  \. : Mandatory dot.
    "   $ : Matches the ending position of the string.
    "  [0-9]   : Digits only any number between 0 to 9.
    "  {0,12}  : Up to 13 characters allowed only before decimal.
    "  {0,2}   : up to 2 characters allowed only after decimal.
    " --------------------------------------------------------------------

    DATA: lc_dec_sign_regex  TYPE string VALUE '^(-?[1-9]\d*(\.\d*)?)|(-?0(\.\d*)?)$',
          lc_dec_regex       TYPE string VALUE '^([1-9]\d*(\.\d*)?)|(0(\.\d*)?)$',
          lc_digital         TYPE string VALUE '0123456789',
          lc_point           TYPE string VALUE '.',
          lc_startdate_excel TYPE sy-datum VALUE '19000101', "starting date(excel parameter)
          lv_date            TYPE datum,
          lv_regex           TYPE string,
          lv_knumh           TYPE knumh.

    CLEAR:ev_value,et_invalid_name_value,et_later_name_value,et_date_name_value.

    IF iv_value IS INITIAL.
      RETURN.
    ENDIF.

    DATA(lv_fieldname_raw) = iv_column.
    IF lv_fieldname_raw = 'WBSElementInternalID'.
      lv_fieldname_raw = 'WBSElementExternalID'.
    ENDIF.
    READ TABLE it_dd03ndtab INTO DATA(ls_dd03nd) WITH KEY fieldname_raw = CONV #( lv_fieldname_raw ).
    IF sy-subrc NE 0.
      TRANSLATE lv_fieldname_raw TO UPPER CASE.
      READ TABLE it_dd03ndtab INTO ls_dd03nd WITH KEY fieldname = CONV #( lv_fieldname_raw ).
      lv_fieldname_raw = ls_dd03nd-fieldname_raw.
    ENDIF.
    DATA(lv_signflag) = get_dd0ll_via_domname( ls_dd03nd-domname  ).
    IF lv_fieldname_raw = 'WBSElementExternalID'.
      lv_fieldname_raw = 'WBSElementInternalID'.
    ENDIF.

    DATA(lv_value) = iv_value.

    IF lv_fieldname_raw = gcs_sales_condition-conditionisscale_raw.
      IF lv_value EQ abap_true OR lv_value EQ abap_false.
        ev_value = lv_value.
      ELSE.
        APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
      ENDIF.
      RETURN.
    ENDIF.

    " Condition record temporary id should be $$ plus number or only number
    IF lv_fieldname_raw = gcs_sales_condition-conditionrecord_raw.
      lv_regex = ls_dd03nd-leng - 2.
      lv_regex = '^\$\$\d{1,' && lv_regex && '}$'.
      CONDENSE lv_regex NO-GAPS.
      IF cl_abap_matcher=>matches( pattern = lv_regex text = lv_value ) NE abap_true.
        lv_regex = ls_dd03nd-leng.
        SHIFT lv_regex LEFT DELETING LEADING '0'.
        lv_regex = '^\d{1,' && lv_regex && '}$'.
        CONDENSE lv_regex NO-GAPS.
        IF cl_abap_matcher=>matches( pattern = lv_regex text = lv_value ) NE abap_true.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
            EXPORTING
              input  = lv_value
            IMPORTING
              output = lv_knumh.
          lv_value = lv_knumh.
        ENDIF.
      ENDIF.
    ENDIF.

    CASE ls_dd03nd-datatype.
      WHEN 'UNIT' OR 'CHAR'.
        IF strlen( lv_value ) > ls_dd03nd-leng.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          ev_value = lv_value.
        ENDIF.

      WHEN 'DATS'.
        "support data in text formats: YYYYMMDD and YYYY-MM-DD
        IF strlen( lv_value ) <> ls_dd03nd-leng
           OR cl_abap_matcher=>matches( pattern = '^\d{8}$' text = lv_value ) NE abap_true
          AND cl_abap_matcher=>matches( pattern = '^\d{4}-\d{2}-\d{2}$' text = lv_value ) NE abap_true.
          "2020/02/02, invalid; 43931 (xml) is also invalid
          APPEND VALUE #( name = lv_fieldname_raw value = lv_value ) TO et_date_name_value.
        ELSE.
          REPLACE ALL OCCURRENCES OF '-' IN lv_value WITH space.
          lv_date = lv_value.
          CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
            EXPORTING
              date                      = lv_date
            EXCEPTIONS
              plausibility_check_failed = 1
              OTHERS                    = 2.
          IF sy-subrc <> 0.
            "20200230, invalid
            APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
          ELSE.
            ev_value = lv_value.
          ENDIF.
        ENDIF.

      WHEN 'NUMC'.
        IF strlen( lv_value ) > ls_dd03nd-leng.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSEIF lv_value CN lc_digital.
          "WEW999, invalid
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          ev_value = lv_value.
        ENDIF.

      WHEN 'QUAN' OR 'DEC'.
        CONDENSE lv_value NO-GAPS.
        IF lv_signflag = abap_true.
          lv_regex = lc_dec_sign_regex.
        ELSE.
          lv_regex = lc_dec_regex.
        ENDIF.

        " Check format
        IF cl_abap_matcher=>matches( pattern = lv_regex text = lv_value ) NE abap_true.
          "56.99.99, invalid
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          " Check length
          DATA(lv_int_len) = ls_dd03nd-leng - ls_dd03nd-decimals.
          DATA(lv_dec_len) = ls_dd03nd-decimals.
          SPLIT lv_value AT lc_point INTO DATA(lv_integer) DATA(lv_decimal).
          IF strlen( lv_integer ) > lv_int_len OR strlen( lv_decimal ) > lv_dec_len.
            APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
          ELSE.
            ev_value = lv_value.
          ENDIF.
        ENDIF.

      WHEN 'CURR'.
        IF lv_fieldname_raw = 'ConditionLowerLimit' OR lv_fieldname_raw = 'ConditionUpperLimit'.
          lv_signflag = abap_true.
        ENDIF.
        IF lv_signflag = abap_true.
          lv_regex = lc_dec_sign_regex.
        ELSE.
          lv_regex = lc_dec_regex.
        ENDIF.

        IF cl_abap_matcher=>matches( pattern = lv_regex text = lv_value ) NE abap_true.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          " Check length
          lv_int_len = ls_dd03nd-leng.
          IF lv_signflag = abap_true AND lv_value CA '-'.
            lv_int_len = lv_int_len + 1.
          ENDIF.
          lv_dec_len = ls_dd03nd-decimals.
          SPLIT lv_value AT lc_point INTO lv_integer lv_decimal.
          IF strlen( lv_integer ) > lv_int_len OR strlen( lv_decimal ) > lv_dec_len.
            APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
          ELSE.
            "consider the currency decimal (EUR, JPY, ...) and percentage
            APPEND VALUE #( name = lv_fieldname_raw value = lv_value ) TO et_later_name_value.
            APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
          ENDIF.
        ENDIF.

      WHEN 'CUKY'.
        IF strlen( lv_value ) > ls_dd03nd-leng.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          APPEND VALUE #( name = lv_fieldname_raw value = lv_value ) TO et_later_name_value.
          ev_value = lv_value.
        ENDIF.

      WHEN OTHERS.
        IF strlen( lv_value ) > ls_dd03nd-leng.
          APPEND VALUE #( name = lv_fieldname_raw value = iv_value ) TO et_invalid_name_value.
        ELSE.
          ev_value = lv_value.
        ENDIF.
    ENDCASE.
  ENDMETHOD.


  METHOD CHECK_FOR_CONTRACT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: ls_record_table TYPE ty_knumh_kotabnr.
    FIELD-SYMBOLS: <ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    ASSIGN ir_cond_record->* TO <ft_cond_record>.
    LOOP AT <ft_cond_record> INTO DATA(ls_cond_record).
      CALL METHOD cl_wlf_kotabnr_check=>check
        EXPORTING
          i_kotabnr = ls_cond_record-kotabnr " Condition Table
          i_kappl   = if_ct_constants=>c_application_sales   " Application
          i_kvewe   = if_ct_constants=>c_usage_pricing   " Usage of the Condition Table
          i_aktyp   = ' '   " Activity Category in the Transaction
        EXCEPTIONS
          error     = 4.
      IF sy-subrc <> 0.
        CLEAR ls_record_table.
        ls_record_table-knumh = ls_cond_record-knumh.
        ls_record_table-kotabnr = ls_cond_record-kotabnr.
        APPEND ls_record_table TO et_record_table.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_FOR_OVERLAP.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:
      lt_cond_record TYPE REF TO data,
      lt_xvake       TYPE if_cnd_maint_ltd_types=>ty_vakevb_plus_t,
      lt_xvake_group TYPE if_cnd_maint_ltd_types=>ty_vakevb_plus_t,
      lv_check_fail  TYPE boolean.

    FIELD-SYMBOLS: <fs_cond_record>    TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t,
                   <fs_xvake_line>     TYPE LINE OF if_cnd_maint_ltd_types=>ty_vakevb_plus_t,
                   <fs_xvake_gline>    TYPE LINE OF if_cnd_maint_ltd_types=>ty_vakevb_plus_t,
                   <fs_xvake_gline_vs> TYPE LINE OF if_cnd_maint_ltd_types=>ty_vakevb_plus_t.

    CREATE DATA lt_cond_record TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.
    ASSIGN ir_cond_record->* TO <fs_cond_record>.

    "Bulid LT_XVAKE
    IF <fs_cond_record> IS ASSIGNED.
      LOOP AT <fs_cond_record> ASSIGNING FIELD-SYMBOL(<fs_cond_record_line>) WHERE kopos = '01'.
        APPEND INITIAL LINE TO lt_xvake ASSIGNING FIELD-SYMBOL(<fs_xvake>).
        MOVE-CORRESPONDING <fs_cond_record_line> TO <fs_xvake>.
        mo_util->map_key_fields_to_vakey(
          EXPORTING
            iv_kvewe      = <fs_cond_record_line>-kvewe
            iv_kotabnr    = <fs_cond_record_line>-kotabnr
            it_key_fields = <fs_cond_record_line>-key_fields
          IMPORTING
            ev_vakey      = <fs_xvake>-vakey ).
      ENDLOOP.
    ENDIF.

    "Group data using kschl, kotabnr and vakey, check overlap.
    LOOP AT lt_xvake ASSIGNING <fs_xvake_line>
      GROUP BY ( kschl = <fs_xvake_line>-kschl
                 kotabnr = <fs_xvake_line>-kotabnr
                 vakey = <fs_xvake_line>-vakey )
      ASCENDING
      ASSIGNING FIELD-SYMBOL(<fs_xvake_group>).
      lv_check_fail = abap_false.
      LOOP AT GROUP <fs_xvake_group> ASSIGNING <fs_xvake_gline>.
        IF lv_check_fail = abap_true.
          EXIT.
        ENDIF.
        ASSIGN COMPONENT if_prcg_cndnrecd_service=>c_fieldname_datab OF STRUCTURE <fs_xvake_gline> TO FIELD-SYMBOL(<fs_datab>).
        ASSIGN COMPONENT if_prcg_cndnrecd_service=>c_fieldname_datbi OF STRUCTURE <fs_xvake_gline> TO FIELD-SYMBOL(<fs_datbi>).
        DATA(g_index) = sy-tabix.
        LOOP AT GROUP <fs_xvake_group> ASSIGNING <fs_xvake_gline_vs>.
          IF lv_check_fail = abap_true.
            EXIT.
          ENDIF.
          DATA(g_index_vs) = sy-tabix.
          IF g_index_vs GT g_index.
            ASSIGN COMPONENT if_prcg_cndnrecd_service=>c_fieldname_datab OF STRUCTURE <fs_xvake_gline_vs> TO FIELD-SYMBOL(<fs_datab_vs>).
            ASSIGN COMPONENT if_prcg_cndnrecd_service=>c_fieldname_datbi OF STRUCTURE <fs_xvake_gline_vs> TO FIELD-SYMBOL(<fs_datbi_vs>).
            IF ( <fs_datbi> LT <fs_datab_vs> ) OR ( <fs_datab> GT  <fs_datbi_vs> ).
              "not overlap, continue
            ELSE.
              "if kotabnr and vakey are the same, and overlap, then raise exception
*              RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
*              MESSAGE e060(prcg_cndnrecord_api).
              LOOP AT GROUP <fs_xvake_group> ASSIGNING FIELD-SYMBOL(<fs_xvake_gline_collect>).
                ASSIGN COMPONENT 'KNUMH' OF STRUCTURE <fs_xvake_gline_collect> TO FIELD-SYMBOL(<fs_datab_collect>).
                APPEND <fs_datab_collect> TO et_record.
              ENDLOOP.
              lv_check_fail = abap_true.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_LOWER_UPPER_LIMIT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA: lt_scales        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
          lv_check_success TYPE boolean.
    DATA:
*     Calculation types for %-Discounts and %o-Discounts
      percentage(6)       VALUE 'AHIJKW',
*     Calculation rule for quantity adjustment
      qty_adj(1)          VALUE if_prc_qty_adjustment_constant=>c_calculation_type,
*     currency for 3-decimals
      decimals_3(5)       VALUE '3    ',
*     currency for 6-decimals
      decimals_6(5)       VALUE '6    ',
*     currency for Quantity Adjustment decimals
      decimals_qty_adj(5) VALUE if_prc_qty_adjustment_constant=>c_decimals_qty_adj.
    DATA lv_amount_out1_c TYPE C LENGTH 20.
    DATA lv_amount_out2_c TYPE C LENGTH 20.
    DATA lv_amount_out1_s TYPE STRING.
    DATA lv_amount_out2_s TYPE STRING.

    LOOP AT ct_condition_record INTO DATA(ls_condition_record).
      lv_check_success = abap_true.
      IF ls_condition_record-conditionlowerlimit <> 0 OR ls_condition_record-conditionupperlimit <> 0.
        CLEAR lt_scales.
        LOOP AT ct_condition_scale INTO DATA(ls_scale) WHERE conditionrecord = ls_condition_record-conditionrecord AND conditionsequentialnumber = ls_condition_record-conditionsequentialnumber.
          APPEND ls_scale TO lt_scales.
        ENDLOOP.
        IF lt_scales IS INITIAL AND it_db_scale IS NOT INITIAL.
          LOOP AT it_db_scale INTO ls_scale WHERE conditionrecord = ls_condition_record-conditionrecord AND conditionsequentialnumber = ls_condition_record-conditionsequentialnumber.
            APPEND ls_scale TO lt_scales.
          ENDLOOP.
        ENDIF.
        IF ls_condition_record-conditionlowerlimit <> 0.
          IF ls_condition_record-conditionratevalue < ls_condition_record-conditionlowerlimit.

            IF ls_condition_record-conditionratevalueunit <> '%'.
            IF ls_condition_record-conditioncalculationtype CA percentage.
              IF ls_condition_record-conditioncalculationtype = 'W'.  "percental with 6 decimals
                WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
              ELSE.               "percental - others
                WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
              ENDIF.
            ELSEIF ls_condition_record-conditioncalculationtype = qty_adj.
              WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
              WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
            ELSE.
              WRITE ls_condition_record-conditionratevalue CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out1_c.
              WRITE ls_condition_record-conditionlowerlimit CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out2_c.
            ENDIF.
            lv_amount_out1_s = lv_amount_out1_c.
            lv_amount_out2_s = lv_amount_out2_c.
            SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
            SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

            MESSAGE e035(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO DATA(ls_msg).
            ELSE.
              MESSAGE e035(vk) WITH ls_condition_record-conditionratevalue ls_condition_record-conditionlowerlimit INTO ls_msg.
            ENDIF.
            APPEND VALUE #( conditionrecord             = ls_condition_record-conditionrecord
                            conditionsequentialnumber   = ls_condition_record-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO et_messages.
            DELETE ct_condition_record     WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_record-conditionrecord.
            CONTINUE.
          ENDIF.
          LOOP AT lt_scales INTO ls_scale.
            IF ls_scale-conditionratevalue < ls_condition_record-conditionlowerlimit.

              IF ls_condition_record-conditionratevalueunit <> '%'.
              IF ls_condition_record-conditioncalculationtype CA percentage.
                IF ls_condition_record-conditioncalculationtype = 'W'.  "percental with 6 decimals
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                  WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
                ELSE.               "percental - others
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                  WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
                ENDIF.
              ELSEIF ls_condition_record-conditioncalculationtype = qty_adj.
                WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionlowerlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
              ELSE.
                WRITE ls_scale-conditionratevalue CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionlowerlimit CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out2_c.
              ENDIF.
              lv_amount_out1_s = lv_amount_out1_c.
              lv_amount_out2_s = lv_amount_out2_c.
              SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
              SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

              MESSAGE e079(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
              ELSE.
                MESSAGE e079(vk) WITH ls_scale-conditionratevalue ls_condition_record-conditionlowerlimit INTO ls_msg.
              ENDIF.
              APPEND VALUE #( conditionrecord             = ls_condition_record-conditionrecord
                              conditionsequentialnumber   = ls_condition_record-conditionsequentialnumber
                              systemmessagetype           = sy-msgty
                              systemmessageidentification = sy-msgid
                              systemmessagenumber         = sy-msgno
                              systemmessagevariable1      = sy-msgv1
                              systemmessagevariable2      = sy-msgv2
                              systemmessagevariable3      = sy-msgv3
                              systemmessagevariable4      = sy-msgv4 )
                TO et_messages.
              DELETE ct_condition_record     WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_record-conditionrecord.
              lv_check_success = abap_false.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_check_success = abap_false.
            CONTINUE.
          ENDIF.
        ENDIF.
        IF ls_condition_record-conditionupperlimit <> 0.
          IF ls_condition_record-conditionratevalue > ls_condition_record-conditionupperlimit.

            IF ls_condition_record-conditionratevalueunit <> '%'.
            IF ls_condition_record-conditioncalculationtype CA percentage.
              IF ls_condition_record-conditioncalculationtype = 'W'.  "percental with 6 decimals
                WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
              ELSE.               "percental - others
                WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
              ENDIF.
            ELSEIF ls_condition_record-conditioncalculationtype = qty_adj.
              WRITE ls_condition_record-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
              WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
            ELSE.
              WRITE ls_condition_record-conditionratevalue CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out1_c.
              WRITE ls_condition_record-conditionupperlimit CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out2_c.
            ENDIF.
            lv_amount_out1_s = lv_amount_out1_c.
            lv_amount_out2_s = lv_amount_out2_c.
            SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
            SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

            MESSAGE e036(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
            ELSE.
              MESSAGE e036(vk) WITH ls_condition_record-conditionratevalue ls_condition_record-conditionupperlimit INTO ls_msg.
            ENDIF.
            APPEND VALUE #( conditionrecord             = ls_condition_record-conditionrecord
                            conditionsequentialnumber   = ls_condition_record-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO et_messages.
            DELETE ct_condition_record     WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_record-conditionrecord.
            DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_record-conditionrecord.
            CONTINUE.
          ENDIF.
          LOOP AT lt_scales INTO ls_scale.
            IF ls_scale-conditionratevalue > ls_condition_record-conditionupperlimit.

              IF ls_condition_record-conditionratevalueunit <> '%'.
              IF ls_condition_record-conditioncalculationtype CA percentage.
                IF ls_condition_record-conditioncalculationtype = 'W'.  "percental with 6 decimals
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                  WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
                ELSE.               "percental - others
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                  WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
                ENDIF.
              ELSEIF ls_condition_record-conditioncalculationtype = qty_adj.
                WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionupperlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
              ELSE.
                WRITE ls_scale-conditionratevalue CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out1_c.
                WRITE ls_condition_record-conditionupperlimit CURRENCY ls_condition_record-conditionratevalueunit TO lv_amount_out2_c.
              ENDIF.
              lv_amount_out1_s = lv_amount_out1_c.
              lv_amount_out2_s = lv_amount_out2_c.
              SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
              SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

              MESSAGE e080(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
              ELSE.
                MESSAGE e080(vk) WITH ls_scale-conditionratevalue ls_condition_record-conditionupperlimit INTO ls_msg.
              ENDIF.
              APPEND VALUE #( conditionrecord             = ls_condition_record-conditionrecord
                              conditionsequentialnumber   = ls_condition_record-conditionsequentialnumber
                              systemmessagetype           = sy-msgty
                              systemmessageidentification = sy-msgid
                              systemmessagenumber         = sy-msgno
                              systemmessagevariable1      = sy-msgv1
                              systemmessagevariable2      = sy-msgv2
                              systemmessagevariable3      = sy-msgv3
                              systemmessagevariable4      = sy-msgv4 )
                TO et_messages.
              DELETE ct_condition_record     WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_record-conditionrecord.
              DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_record-conditionrecord.
              lv_check_success = abap_false.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_check_success = abap_false.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.


    LOOP AT ct_condition_supplement INTO DATA(ls_condition_supplement).
      lv_check_success = abap_true.
      IF ls_condition_supplement-conditionlowerlimit <> 0 OR ls_condition_supplement-conditionupperlimit <> 0.
        CLEAR lt_scales.
        LOOP AT ct_condition_scale INTO ls_scale WHERE conditionrecord = ls_condition_supplement-conditionrecord AND conditionsequentialnumber = ls_condition_supplement-conditionsequentialnumber.
          APPEND ls_scale TO lt_scales.
        ENDLOOP.
        IF lt_scales IS INITIAL AND it_db_scale IS NOT INITIAL.
          LOOP AT it_db_scale INTO ls_scale WHERE conditionrecord = ls_condition_supplement-conditionrecord AND conditionsequentialnumber = ls_condition_supplement-conditionsequentialnumber.
            APPEND ls_scale TO lt_scales.
          ENDLOOP.
        ENDIF.
        IF ls_condition_supplement-conditionlowerlimit <> 0.
          IF ls_condition_supplement-conditionratevalue < ls_condition_supplement-conditionlowerlimit.

            IF ls_condition_supplement-conditionratevalueunit <> '%'.
            IF ls_condition_supplement-conditioncalculationtype CA percentage.
              IF ls_condition_supplement-conditioncalculationtype = 'W'.  "percental with 6 decimals
                WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
              ELSE.               "percental - others
                WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
              ENDIF.
            ELSEIF ls_condition_supplement-conditioncalculationtype = qty_adj.
              WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
              WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
            ELSE.
              WRITE ls_condition_supplement-conditionratevalue CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out1_c.
              WRITE ls_condition_supplement-conditionlowerlimit CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out2_c.
            ENDIF.
            lv_amount_out1_s = lv_amount_out1_c.
            lv_amount_out2_s = lv_amount_out2_c.
            SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
            SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

            MESSAGE e035(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
            ELSE.
              MESSAGE e035(vk) WITH ls_condition_supplement-conditionratevalue ls_condition_supplement-conditionlowerlimit INTO ls_msg.
            ENDIF.
            APPEND VALUE #( conditionrecord             = ls_condition_supplement-conditionrecord
                            conditionsequentialnumber   = ls_condition_supplement-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO et_messages.
            DELETE ct_condition_record     WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            CONTINUE.
          ENDIF.
          LOOP AT lt_scales INTO ls_scale.
            IF ls_scale-conditionratevalue < ls_condition_supplement-conditionlowerlimit.

              IF ls_condition_supplement-conditionratevalueunit <> '%'.
              IF ls_condition_supplement-conditioncalculationtype CA percentage.
                IF ls_condition_supplement-conditioncalculationtype = 'W'.  "percental with 6 decimals
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                  WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
                ELSE.               "percental - others
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                  WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
                ENDIF.
              ELSEIF ls_condition_supplement-conditioncalculationtype = qty_adj.
                WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionlowerlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
              ELSE.
                WRITE ls_scale-conditionratevalue CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionlowerlimit CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out2_c.
              ENDIF.
              lv_amount_out1_s = lv_amount_out1_c.
              lv_amount_out2_s = lv_amount_out2_c.
              SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
              SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

              MESSAGE e079(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
              ELSE.
                MESSAGE e079(vk) WITH ls_scale-conditionratevalue ls_condition_supplement-conditionlowerlimit INTO ls_msg.
              ENDIF.
              APPEND VALUE #( conditionrecord             = ls_condition_supplement-conditionrecord
                              conditionsequentialnumber   = ls_condition_supplement-conditionsequentialnumber
                              systemmessagetype           = sy-msgty
                              systemmessageidentification = sy-msgid
                              systemmessagenumber         = sy-msgno
                              systemmessagevariable1      = sy-msgv1
                              systemmessagevariable2      = sy-msgv2
                              systemmessagevariable3      = sy-msgv3
                              systemmessagevariable4      = sy-msgv4 )
                TO et_messages.
              DELETE ct_condition_record     WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              lv_check_success = abap_false.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_check_success = abap_false.
            CONTINUE.
          ENDIF.
        ENDIF.
        IF ls_condition_supplement-conditionupperlimit <> 0.
          IF ls_condition_supplement-conditionratevalue > ls_condition_supplement-conditionupperlimit.

            IF ls_condition_supplement-conditionratevalueunit <> '%'.
            IF ls_condition_supplement-conditioncalculationtype CA percentage.
              IF ls_condition_supplement-conditioncalculationtype = 'W'.  "percental with 6 decimals
                WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
              ELSE.               "percental - others
                WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
              ENDIF.
            ELSEIF ls_condition_supplement-conditioncalculationtype = qty_adj.
              WRITE ls_condition_supplement-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
              WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
            ELSE.
              WRITE ls_condition_supplement-conditionratevalue CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out1_c.
              WRITE ls_condition_supplement-conditionupperlimit CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out2_c.
            ENDIF.
            lv_amount_out1_s = lv_amount_out1_c.
            lv_amount_out2_s = lv_amount_out2_c.
            SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
            SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

            MESSAGE e036(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
            ELSE.
              MESSAGE e036(vk) WITH ls_condition_supplement-conditionratevalue ls_condition_supplement-conditionupperlimit INTO ls_msg.
            ENDIF.
            APPEND VALUE #( conditionrecord             = ls_condition_supplement-conditionrecord
                            conditionsequentialnumber   = ls_condition_supplement-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO et_messages.
            DELETE ct_condition_record     WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_supplement-conditionrecord.
            CONTINUE.
          ENDIF.
          LOOP AT lt_scales INTO ls_scale.
            IF ls_scale-conditionratevalue > ls_condition_supplement-conditionupperlimit.

              IF ls_condition_supplement-conditionratevalueunit <> '%'.
              IF ls_condition_supplement-conditioncalculationtype CA percentage.
                IF ls_condition_supplement-conditioncalculationtype = 'W'.  "percental with 6 decimals
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_6 TO lv_amount_out1_c.
                  WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_6 TO lv_amount_out2_c.
                ELSE.               "percental - others
                  WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_3 TO lv_amount_out1_c.
                  WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_3 TO lv_amount_out2_c.
                ENDIF.
              ELSEIF ls_condition_supplement-conditioncalculationtype = qty_adj.
                WRITE ls_scale-conditionratevalue CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionupperlimit CURRENCY DECIMALS_QTY_ADJ TO lv_amount_out2_c.
              ELSE.
                WRITE ls_scale-conditionratevalue CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out1_c.
                WRITE ls_condition_supplement-conditionupperlimit CURRENCY ls_condition_supplement-conditionratevalueunit TO lv_amount_out2_c.
              ENDIF.
              lv_amount_out1_s = lv_amount_out1_c.
              lv_amount_out2_s = lv_amount_out2_c.
              SHIFT lv_amount_out1_s LEFT DELETING LEADING ' '.
              SHIFT lv_amount_out2_s LEFT DELETING LEADING ' '.

              MESSAGE e080(vk) WITH lv_amount_out1_s lv_amount_out2_s INTO ls_msg.
              ELSE.
                MESSAGE e080(vk) WITH ls_scale-conditionratevalue ls_condition_supplement-conditionupperlimit INTO ls_msg.
              ENDIF.
              APPEND VALUE #( conditionrecord             = ls_condition_supplement-conditionrecord
                              conditionsequentialnumber   = ls_condition_supplement-conditionsequentialnumber
                              systemmessagetype           = sy-msgty
                              systemmessageidentification = sy-msgid
                              systemmessagenumber         = sy-msgno
                              systemmessagevariable1      = sy-msgv1
                              systemmessagevariable2      = sy-msgv2
                              systemmessagevariable3      = sy-msgv3
                              systemmessagevariable4      = sy-msgv4 )
                TO et_messages.
              DELETE ct_condition_record     WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_supplement-conditionrecord.
              lv_check_success = abap_false.
              EXIT.
            ENDIF.
          ENDLOOP.
          IF lv_check_success = abap_false.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_NEW_RECORD_WITH_HEADER.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR rt_messages.
    LOOP AT it_record_template INTO DATA(ls_record) WHERE conditionrecord+0(2) = '$$'.
      IF ls_record-conditionsequentialnumber NE '01' AND ls_record-conditionisscale = abap_true.
        READ TABLE it_supplement WITH KEY conditionrecord = ls_record-conditionrecord
                   conditionsequentialnumber = ls_record-conditionsequentialnumber TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          MESSAGE e123(prcg_cndnrecord_api) INTO DATA(ls_msg).
          APPEND VALUE #( conditionrecord             = ls_record-conditionrecord
                         conditionsequentialnumber   = ls_record-conditionsequentialnumber
                         systemmessagetype           = sy-msgty
                         systemmessageidentification = sy-msgid
                         systemmessagenumber         = sy-msgno
                         systemmessagevariable1      = sy-msgv1
                         systemmessagevariable2      = sy-msgv2
                         systemmessagevariable3      = sy-msgv3
                         systemmessagevariable4      = sy-msgv4 )
           TO rt_messages.
        ENDIF.
      ELSE.
        READ TABLE it_record WITH KEY conditionrecord = ls_record-conditionrecord TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          MESSAGE e122(prcg_cndnrecord_api) INTO ls_msg.
          APPEND VALUE #( conditionrecord             = ls_record-conditionrecord
                          conditionsequentialnumber   = ls_record-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 )
            TO rt_messages.
        ENDIF.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_RATE_SCALE_REC_SUP.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR rt_messages.
    IF is_scale-conditionsequentialnumber = '01'.
      READ TABLE it_record ASSIGNING FIELD-SYMBOL(<fs_record>)
                                     WITH KEY conditionsequentialnumber = is_scale-conditionsequentialnumber.
      IF sy-subrc = 0 AND is_scale-conditionratevalue NE <fs_record>-conditionratevalue.
        MESSAGE e093(prcg_cndnrecord_api) INTO DATA(ls_msg).
        APPEND VALUE #( conditionrecord             = is_scale-conditionrecord
                        conditionsequentialnumber   = is_scale-conditionsequentialnumber
                        systemmessagetype           = sy-msgty
                        systemmessageidentification = sy-msgid
                        systemmessagenumber         = sy-msgno
                        systemmessagevariable1      = sy-msgv1
                        systemmessagevariable2      = sy-msgv2
                        systemmessagevariable3      = sy-msgv3
                        systemmessagevariable4      = sy-msgv4 )
          TO rt_messages.
      ENDIF.
    ELSE.
      READ TABLE it_supplement ASSIGNING FIELD-SYMBOL(<fs_supplement>)
                                     WITH KEY conditionsequentialnumber = is_scale-conditionsequentialnumber.
      IF sy-subrc = 0 AND is_scale-conditionratevalue NE <fs_supplement>-conditionratevalue.
        MESSAGE e094(prcg_cndnrecord_api) INTO ls_msg.
        APPEND VALUE #( conditionrecord             = is_scale-conditionrecord
                        conditionsequentialnumber   = is_scale-conditionsequentialnumber
                        systemmessagetype           = sy-msgty
                        systemmessageidentification = sy-msgid
                        systemmessagenumber         = sy-msgno
                        systemmessagevariable1      = sy-msgv1
                        systemmessagevariable2      = sy-msgv2
                        systemmessagevariable3      = sy-msgv3
                        systemmessagevariable4      = sy-msgv4 )
          TO rt_messages.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD CHECK_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS:lc_dot TYPE c VALUE '.'.
    DATA:lv_conditionratevalue TYPE zi_slsprcgcndnrecdtemplate-conditionratevalue,
         ls_t685a              TYPE t685a.

    CLEAR et_messages.

    "ConditionRecord ConditionSequentialNumber invalid
    LOOP AT ct_invalid INTO DATA(ls_invalid)
                       WHERE name = gcs_sales_condition-conditionrecord_raw
                          OR name = gcs_sales_condition-conditionsequentialnumber_raw.
      IF sy-subrc = 0.
        IF ls_invalid-name = gcs_sales_condition-conditionrecord_raw.
          cs_record-conditionrecord = ls_invalid-value. "may be cut off
        ELSEIF ls_invalid-name = gcs_sales_condition-conditionsequentialnumber_raw.
          cs_record-conditionsequentialnumber = ls_invalid-value. "may be cut off
        ENDIF.
        APPEND invalid_property( is_invalid = ls_invalid is_record = cs_record ) TO et_messages.
      ENDIF.
    ENDLOOP.

    "Required:
    "ConditionRecord, ConditionSequentialNumber, ConditionType, ConditionTable, ConditionRateValueUnit
    "Required under some condition:
    "ConditionScaleAmountCurrency
    check_required_field(
      EXPORTING
        iv_fieldname_raw = gcs_sales_condition-conditionrecord_raw
        is_record        = cs_record
      IMPORTING
        et_messages      = DATA(lt_msg)
    ).
    APPEND LINES OF lt_msg TO et_messages.
    CHECK lt_msg IS INITIAL.

    check_required_field(
      EXPORTING
        iv_fieldname_raw = gcs_sales_condition-conditiontype_raw
        is_record        = cs_record
      IMPORTING
        et_messages      = lt_msg
    ).
    APPEND LINES OF lt_msg TO et_messages.
    CHECK lt_msg IS INITIAL.

    check_required_field(
      EXPORTING
        iv_fieldname_raw = gcs_sales_condition-conditionsequentialnumber_raw
        is_record        = cs_record
      IMPORTING
        et_messages      = lt_msg
    ).
    APPEND LINES OF lt_msg TO et_messages.

    check_required_field(
      EXPORTING
        iv_fieldname_raw = gcs_sales_condition-conditiontable_raw
        is_record        = cs_record
      IMPORTING
        et_messages      = lt_msg
    ).
    APPEND LINES OF lt_msg TO et_messages.

    check_required_field(
      EXPORTING
        iv_fieldname_raw = gcs_sales_condition-conditionratevalueunit_raw
        is_record        = cs_record
      IMPORTING
        et_messages      = lt_msg
    ).
    APPEND LINES OF lt_msg TO et_messages.

    mo_dep->get_t685a(
      EXPORTING
        iv_kappl = 'V'
        iv_kschl = cs_record-conditiontype
      RECEIVING
        rs_t685a = ls_t685a
    ).
    IF cs_record-conditioncalculationtype IS INITIAL AND cs_record-conditionrecord+0(2) = '$$'.
      cs_record-conditioncalculationtype = ls_t685a-krech.
    ENDIF.

    IF cs_record-conditionisscale = abap_true AND NOT cs_record-conditiontype IS INITIAL.
      IF ls_t685a-kzbzg = 'B'.
        IF cs_record-conditionscaleamountcurrency IS INITIAL
          AND cs_record-conditioncalculationtype NA gcs_sales_condition-percentage.
          cs_record-conditionscaleamountcurrency = cs_record-conditionratevalueunit.
        ENDIF.
      ENDIF.
    ENDIF.

    "Convert external amount to internal format, check amount and percentage
    LOOP AT it_later INTO DATA(ls_later).
      DATA(ls_tcurc) = mo_dep->get_tcurc( iv_waers = cs_record-conditionratevalueunit ).
      IF ls_later-name = gcs_sales_condition-conditionratevalue_raw.
        IF ls_tcurc IS INITIAL.
          TRY.
              cs_record-conditionratevalue = ls_later-value.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionratevalue_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ELSE.
          "Large currency should not contain dot '.' in Excel
          DATA(lv_decimals) = cl_abap_decfloat=>get_decimal_places_for_cuky( cs_record-conditionratevalueunit ).
          IF lv_decimals = 0 AND ls_later-value CA lc_dot. "'.'.
            TRY.
                cs_record-conditionratevalue = ls_later-value.
              CATCH cx_sy_conversion_overflow.
            ENDTRY.
            CONTINUE.
          ENDIF.

          TRY.
              cl_abap_decfloat=>convert_decfloat_to_curr(
                EXPORTING
                  amount_decfloat = CONV #( ls_later-value )
                  cuky            = cs_record-conditionratevalueunit
                IMPORTING
                  amount_curr     = cs_record-conditionratevalue
              ).
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionratevalue_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionlowerlimit_raw.
        IF ls_tcurc IS INITIAL.
          TRY.
              cs_record-conditionlowerlimit = ls_later-value.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionlowerlimit_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ELSE.
          "Large currency should not contain dot '.' in Excel
          lv_decimals = cl_abap_decfloat=>get_decimal_places_for_cuky( cs_record-conditionratevalueunit ).
          IF lv_decimals = 0 AND ls_later-value CA lc_dot. "'.'.
            TRY.
                cs_record-conditionlowerlimit = ls_later-value.
              CATCH cx_sy_conversion_overflow.
            ENDTRY.
            CONTINUE.
          ENDIF.

          TRY.
              cl_abap_decfloat=>convert_decfloat_to_curr(
                EXPORTING
                  amount_decfloat = CONV #( ls_later-value )
                  cuky            = cs_record-conditionratevalueunit
                IMPORTING
                  amount_curr     = cs_record-conditionlowerlimit
              ).
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionlowerlimit_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionupperlimit_raw.
        IF ls_tcurc IS INITIAL.
          TRY.
              cs_record-conditionupperlimit = ls_later-value.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionupperlimit_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ELSE.
          "Large currency should not contain dot '.' in Excel
          lv_decimals = cl_abap_decfloat=>get_decimal_places_for_cuky( cs_record-conditionratevalueunit ).
          IF lv_decimals = 0 AND ls_later-value CA lc_dot. "'.'.
            TRY.
                cs_record-conditionupperlimit = ls_later-value.
              CATCH cx_sy_conversion_overflow.
            ENDTRY.
            CONTINUE.
          ENDIF.

          TRY.
              cl_abap_decfloat=>convert_decfloat_to_curr(
                EXPORTING
                  amount_decfloat = CONV #( ls_later-value )
                  cuky            = cs_record-conditionratevalueunit
                IMPORTING
                  amount_curr     = cs_record-conditionupperlimit
              ).
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionupperlimit_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionscaleratevalue_raw.
        CLEAR lv_conditionratevalue.
        IF ls_tcurc IS INITIAL.
          TRY.
              lv_conditionratevalue = ls_later-value.
              cs_record-conditionscaleratevalue = lv_conditionratevalue.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionscaleratevalue_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ELSE.
          lv_decimals = cl_abap_decfloat=>get_decimal_places_for_cuky( cs_record-conditionratevalueunit ).
          IF lv_decimals = 0 AND ls_later-value CA lc_dot. "'.'.
            TRY.
                cs_record-conditionscaleratevalue = ls_later-value.
              CATCH cx_sy_conversion_overflow.
            ENDTRY.
            CONTINUE.
          ENDIF.

          TRY.
              cl_abap_decfloat=>convert_decfloat_to_curr(
                EXPORTING
                  amount_decfloat = CONV #( ls_later-value )
                  cuky            = cs_record-conditionratevalueunit
                IMPORTING
                  amount_curr     = lv_conditionratevalue
              ).
              cs_record-conditionscaleratevalue = lv_conditionratevalue.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionscaleratevalue_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionscaleamount_raw.
        DATA(ls_tcurc_scale) = mo_dep->get_tcurc( iv_waers = cs_record-conditionscaleamountcurrency ).
        IF ls_tcurc_scale IS INITIAL.
          TRY.
              cs_record-conditionscaleamount = ls_later-value.
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionscaleamount_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ELSE.
          lv_decimals = cl_abap_decfloat=>get_decimal_places_for_cuky( cs_record-conditionscaleamountcurrency ).
          IF lv_decimals = 0 AND ls_later-value CA lc_dot. "'.'.
            TRY.
                cs_record-conditionscaleamount = ls_later-value.
              CATCH cx_sy_conversion_overflow.
            ENDTRY.
            CONTINUE.
          ENDIF.

          TRY.
              cl_abap_decfloat=>convert_decfloat_to_curr(
                EXPORTING
                  amount_decfloat = CONV #( ls_later-value )
                  cuky            = cs_record-conditionscaleamountcurrency
                IMPORTING
                  amount_curr     = cs_record-conditionscaleamount
              ).
              DELETE ct_invalid WHERE name = gcs_sales_condition-conditionscaleamount_raw.
            CATCH cx_sy_conversion_overflow.
          ENDTRY.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionratevalueunit_raw
        AND cs_record-conditioncalculationtype IS NOT INITIAL.
        IF cs_record-conditioncalculationtype CA gcs_sales_condition-percentage.
          "Per mille %o; percentage %
          IF cs_record-conditioncalculationtype = if_pricing_calculation_types=>c_per_mille
            OR cs_record-conditioncalculationtype = if_pricing_calculation_types=>c_per_mille_in_thousands.
            IF ls_later-value NE '%o' OR ls_later-value NE '%O'.
              APPEND percentage_property( is_invalid = ls_later is_record = cs_record iv_percentage = '%o' ) TO et_messages.
            ENDIF.
          ELSE.
            IF ls_later-value NE '%'.
              APPEND percentage_property( is_invalid = ls_later is_record = cs_record iv_percentage = '%' ) TO et_messages.
            ENDIF.
          ENDIF.
        ELSE.
          "Currency must be ISO currency
          READ TABLE mt_tcurc WITH KEY isocd = CONV #( ls_later-value ) TRANSPORTING NO FIELDS.
          IF sy-subrc NE 0.
            APPEND ls_later TO ct_invalid.
          ENDIF.
        ENDIF.
      ENDIF.

      IF ls_later-name = gcs_sales_condition-conditionscaleamountcurr_raw AND ls_t685a-kzbzg = 'B'
        AND ls_later-value IS NOT INITIAL.
        "Currency must be ISO currency
        READ TABLE mt_tcurc WITH KEY isocd = CONV #( ls_later-value ) TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          APPEND ls_later TO ct_invalid.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF cs_record-conditionisscale = abap_true.
      cs_record-conditionratevalue = cs_record-conditionscaleratevalue.
    ENDIF.

    "Message
    LOOP AT ct_invalid INTO ls_invalid.
      IF ls_invalid-name = gcs_sales_condition-conditionisscale_raw.
        MESSAGE e105(prcg_cndnrecord_api) INTO DATA(ls_msg).
        APPEND VALUE #( conditionrecord             = cs_record-conditionrecord
                        conditionsequentialnumber   = cs_record-conditionsequentialnumber
                        systemmessagetype           = sy-msgty
                        systemmessageidentification = sy-msgid
                        systemmessagenumber         = sy-msgno
                        systemmessagevariable1      = sy-msgv1
                        systemmessagevariable2      = sy-msgv2
                        systemmessagevariable3      = sy-msgv3
                        systemmessagevariable4      = sy-msgv4 ) TO et_messages.
      ELSE.
        APPEND invalid_property( is_invalid = ls_invalid is_record = cs_record ) TO et_messages.
      ENDIF.
    ENDLOOP.

    LOOP AT it_date INTO DATA(ls_date).
      APPEND invalid_date_format( is_invalid = ls_date is_record = cs_record ) TO et_messages.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_RECORD_SCALE_FOR_UPDATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA ls_record TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_record_s.

    CLEAR et_messages.
    "Check if condition record exists
    DATA(lt_record_u) = ct_condition_record.
    LOOP AT ct_condition_validity INTO DATA(ls_val).
      MOVE-CORRESPONDING ls_val TO ls_record.
      APPEND ls_record TO lt_record_u.
    ENDLOOP.
    LOOP AT ct_condition_supplement INTO DATA(ls_sup).
      MOVE-CORRESPONDING ls_sup TO ls_record.
      APPEND ls_record TO lt_record_u.
    ENDLOOP.
    LOOP AT ct_condition_scale INTO DATA(ls_scale).
      MOVE-CORRESPONDING ls_scale TO ls_record.
      APPEND ls_record TO lt_record_u.
    ENDLOOP.

    SORT lt_record_u BY conditionrecord.
    DELETE ADJACENT DUPLICATES FROM lt_record_u COMPARING conditionrecord.
    LOOP AT lt_record_u INTO DATA(ls_condition_record_u).
      READ TABLE ct_db_record WITH KEY conditionrecord = ls_condition_record_u-conditionrecord TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        MESSAGE e053(prcg_cndnrecord_api) WITH ls_condition_record_u-conditionrecord INTO DATA(ls_msg).
        APPEND VALUE #( conditionrecord             = ls_condition_record_u-conditionrecord
                        conditionsequentialnumber   = ls_condition_record_u-conditionsequentialnumber
                        systemmessagetype           = sy-msgty
                        systemmessageidentification = sy-msgid
                        systemmessagenumber         = sy-msgno
                        systemmessagevariable1      = sy-msgv1
                        systemmessagevariable2      = sy-msgv2
                        systemmessagevariable3      = sy-msgv3
                        systemmessagevariable4      = sy-msgv4 )
          TO et_messages.
        DELETE ct_condition_record     WHERE conditionrecord = ls_condition_record_u-conditionrecord.
        DELETE ct_condition_validity   WHERE conditionrecord = ls_condition_record_u-conditionrecord.
        DELETE ct_condition_supplement WHERE conditionrecord = ls_condition_record_u-conditionrecord.
        DELETE ct_condition_scale      WHERE conditionrecord = ls_condition_record_u-conditionrecord.
      ENDIF.
    ENDLOOP.

    "Check if sequential number exist for scale
    DATA(lt_scale_u) = ct_condition_scale.
    SORT lt_scale_u BY conditionrecord conditionsequentialnumber.
    DELETE ADJACENT DUPLICATES FROM lt_scale_u COMPARING conditionrecord conditionsequentialnumber.
    LOOP AT lt_scale_u INTO DATA(ls_scale_u) WHERE conditionsequentialnumber NE '01'.
      "DB exist
      READ TABLE it_db_supplement WITH KEY conditionrecord           = ls_scale_u-conditionrecord
                                           conditionsequentialnumber = ls_scale_u-conditionsequentialnumber
                                           TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        "Excel input exist
        READ TABLE ct_condition_supplement WITH KEY conditionrecord           = ls_scale_u-conditionrecord
                                                    conditionsequentialnumber = ls_scale_u-conditionsequentialnumber
                                                    TRANSPORTING NO FIELDS.
        IF sy-subrc NE 0.
          MESSAGE e038(prcg_cndnrecord_api) WITH ls_scale_u-conditionrecord ls_scale_u-conditionsequentialnumber INTO ls_msg.
          APPEND VALUE #( conditionrecord             = ls_scale_u-conditionrecord
                          conditionsequentialnumber   = ls_scale_u-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 )
            TO et_messages.
          DELETE ct_condition_record     WHERE conditionrecord = ls_scale_u-conditionrecord.
          DELETE ct_condition_validity   WHERE conditionrecord = ls_scale_u-conditionrecord.
          DELETE ct_condition_supplement WHERE conditionrecord = ls_scale_u-conditionrecord.
          DELETE ct_condition_scale      WHERE conditionrecord = ls_scale_u-conditionrecord.

          DELETE ct_db_record WHERE conditionrecord = ls_scale_u-conditionrecord.
          DELETE ct_db_validity WHERE conditionrecord = ls_scale_u-conditionrecord.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_REQUIRED_FIELD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR et_messages.
    ASSIGN COMPONENT iv_fieldname_raw OF STRUCTURE is_record TO FIELD-SYMBOL(<fs_field>).
    IF <fs_field> IS NOT ASSIGNED OR <fs_field> IS INITIAL.
      IF iv_fieldname_raw = gcs_sales_condition-conditionrecord_raw.
        MESSAGE e018(prcg_cndnrecord_api) INTO DATA(ls_msg).
      ELSE.
        DATA(lv_label) = get_label( iv_fieldname_raw = iv_fieldname_raw ).

        MESSAGE e020(prcg_cndnrecord_api) WITH is_record-conditionrecord lv_label
                                          INTO ls_msg.
      ENDIF.
      APPEND VALUE #( conditionrecord             = is_record-conditionrecord
                      conditionsequentialnumber   = is_record-conditionsequentialnumber
                      systemmessagetype           = sy-msgty
                      systemmessageidentification = sy-msgid
                      systemmessagenumber         = sy-msgno
                      systemmessagevariable1      = sy-msgv1
                      systemmessagevariable2      = sy-msgv2
                      systemmessagevariable3      = sy-msgv3
                      systemmessagevariable4      = sy-msgv4 )
        TO et_messages.
    ENDIF.
  ENDMETHOD.


  METHOD CHECK_ROWS_LIMIT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR rs_message.
    MESSAGE e100(prcg_cndnrecord_api) WITH cv_rows_limit INTO DATA(ls_msg).
    rs_message = VALUE #( conditionrecord             = ''
                          conditionsequentialnumber   = ''
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 ).
  ENDMETHOD.


  METHOD CHECK_SAME_SCALE_AMOUNT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lv_previous_scaleamount        TYPE a_slsprcgcndnrecordscale-conditionscaleamount,
         lv_previous_scaleamountcurr    TYPE a_slsprcgcndnrecordscale-conditionscaleamountcurrency,
         lv_previous_conditionratevalue TYPE a_slsprcgcndnrecordscale-conditionratevalue.

    CLEAR rt_messages.
    SORT ct_scale BY conditionrecord conditionsequentialnumber conditionscaleamount.
    LOOP AT ct_scale ASSIGNING FIELD-SYMBOL(<fs_scale>).
      <fs_scale>-conditionscaleline = sy-tabix.

      IF sy-tabix > 1.
        IF lv_previous_scaleamountcurr NE <fs_scale>-conditionscaleamountcurrency.
          MESSAGE e052(prcg_cndnrecord_api)
             WITH <fs_scale>-conditionrecord <fs_scale>-conditionsequentialnumber 'ConditionScaleAmountCurrency'
             INTO DATA(ls_msg).
          APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                          conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 )
            TO rt_messages.
        ELSE.
          IF lv_previous_conditionratevalue LE <fs_scale>-conditionratevalue AND iv_kstpr = 'A'."Descending
            MESSAGE e047(vk) WITH <fs_scale>-conditionratevalue '' lv_previous_conditionratevalue '' INTO ls_msg.
            WRITE <fs_scale>-conditionratevalue  TO sy-msgv1 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            WRITE lv_previous_conditionratevalue TO sy-msgv3 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv1 WITH gcs_sales_condition-dot.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv3 WITH gcs_sales_condition-dot.
            CONDENSE: sy-msgv1, sy-msgv3 NO-GAPS.
            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ELSEIF lv_previous_conditionratevalue GE <fs_scale>-conditionratevalue AND iv_kstpr = 'B'."Ascending
            MESSAGE e048(vk) WITH <fs_scale>-conditionratevalue '' lv_previous_conditionratevalue '' INTO ls_msg.
            WRITE <fs_scale>-conditionratevalue  TO sy-msgv1 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            WRITE lv_previous_conditionratevalue TO sy-msgv3 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv1 WITH gcs_sales_condition-dot.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv3 WITH gcs_sales_condition-dot.
            CONDENSE: sy-msgv1, sy-msgv3 NO-GAPS.

            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ENDIF.

          IF lv_previous_scaleamount EQ <fs_scale>-conditionscaleamount.
            MESSAGE e098(prcg_cndnrecord_api) INTO ls_msg.
            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ENDIF.
        ENDIF.
      ENDIF.

      lv_previous_conditionratevalue = <fs_scale>-conditionratevalue.
      lv_previous_scaleamount        = <fs_scale>-conditionscaleamount.
      lv_previous_scaleamountcurr    = <fs_scale>-conditionscaleamountcurrency.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_SAME_SCALE_QUANTITY.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lv_prev_conditionscalequantity TYPE a_slsprcgcndnrecordscale-conditionscalequantity,
         lv_prev_conditionscaleqtyunit  TYPE a_slsprcgcndnrecordscale-conditionscalequantityunit,
         lv_previous_conditionratevalue TYPE a_slsprcgcndnrecordscale-conditionratevalue.

    CLEAR rt_messages.
    SORT ct_scale BY conditionrecord conditionsequentialnumber conditionscalequantity.
    LOOP AT ct_scale ASSIGNING FIELD-SYMBOL(<fs_scale>).
      <fs_scale>-conditionscaleline = sy-tabix.

      IF sy-tabix > 1.
        IF lv_prev_conditionscaleqtyunit NE <fs_scale>-conditionscalequantityunit.
          MESSAGE e052(prcg_cndnrecord_api)
             WITH <fs_scale>-conditionrecord <fs_scale>-conditionsequentialnumber 'ConditionScaleQuantityUnit'
             INTO DATA(ls_msg).
          APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                          conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                          systemmessagetype           = sy-msgty
                          systemmessageidentification = sy-msgid
                          systemmessagenumber         = sy-msgno
                          systemmessagevariable1      = sy-msgv1
                          systemmessagevariable2      = sy-msgv2
                          systemmessagevariable3      = sy-msgv3
                          systemmessagevariable4      = sy-msgv4 )
            TO rt_messages.
        ELSE.
          IF lv_previous_conditionratevalue <= <fs_scale>-conditionratevalue AND iv_kstpr = 'A'."Descending
            MESSAGE e047(vk) WITH <fs_scale>-conditionratevalue '' lv_previous_conditionratevalue '' INTO ls_msg.
            WRITE <fs_scale>-conditionratevalue  TO sy-msgv1 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            WRITE lv_previous_conditionratevalue TO sy-msgv3 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv1 WITH gcs_sales_condition-dot.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv3 WITH gcs_sales_condition-dot.
            CONDENSE: sy-msgv1, sy-msgv3 NO-GAPS.
            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ELSEIF lv_previous_conditionratevalue >= <fs_scale>-conditionratevalue AND iv_kstpr = 'B'."Ascending
            MESSAGE e048(vk) WITH <fs_scale>-conditionratevalue '' lv_previous_conditionratevalue '' INTO ls_msg.
            WRITE <fs_scale>-conditionratevalue  TO sy-msgv1 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            WRITE lv_previous_conditionratevalue TO sy-msgv3 CURRENCY <fs_scale>-conditionratevalueunit NO-GROUPING.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv1 WITH gcs_sales_condition-dot.
            REPLACE ALL OCCURRENCES OF gcs_sales_condition-comma IN sy-msgv3 WITH gcs_sales_condition-dot.
            CONDENSE: sy-msgv1, sy-msgv3 NO-GAPS.
            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ENDIF.

          IF lv_prev_conditionscalequantity = <fs_scale>-conditionscalequantity.
            MESSAGE e097(prcg_cndnrecord_api) INTO ls_msg.
            APPEND VALUE #( conditionrecord             = <fs_scale>-conditionrecord
                            conditionsequentialnumber   = <fs_scale>-conditionsequentialnumber
                            systemmessagetype           = sy-msgty
                            systemmessageidentification = sy-msgid
                            systemmessagenumber         = sy-msgno
                            systemmessagevariable1      = sy-msgv1
                            systemmessagevariable2      = sy-msgv2
                            systemmessagevariable3      = sy-msgv3
                            systemmessagevariable4      = sy-msgv4 )
              TO rt_messages.
          ENDIF.
        ENDIF.
      ENDIF.

      lv_prev_conditionscalequantity = <fs_scale>-conditionscalequantity.
      lv_prev_conditionscaleqtyunit  = <fs_scale>-conditionscalequantityunit.
      lv_previous_conditionratevalue = <fs_scale>-conditionratevalue.
    ENDLOOP.
  ENDMETHOD.


  METHOD CHECK_UPDATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lr_record              TYPE REF TO data,
         lr_validity            TYPE REF TO data,
         lr_supplement          TYPE REF TO data,
         lr_scale               TYPE REF TO data,
         lv_kzbzg               TYPE kzbzg,
         lt_konp                TYPE STANDARD TABLE OF konp WITH DEFAULT KEY,
         ls_konp                TYPE konp,
         ls_exist_scale         TYPE a_slsprcgcndnrecordscale,
         lt_exist_scale         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
         lt_message             TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
         ls_cndn_record_mapping LIKE LINE OF et_cndn_record_mapping,
         lt_cndn_record_mapping LIKE et_cndn_record_mapping,
         lt_original_scale      TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t.

    CLEAR:er_cond_record,er_cond_scale,et_message.
    TRY.
        convert_wbselement_ext2int(
          CHANGING
            ct_condition_validity = ct_condition_validity
        ).
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

*  Get the existing scale data
    APPEND LINES OF ct_condition_scale TO lt_original_scale.
    SORT lt_original_scale BY conditionrecord ASCENDING
                              conditionsequentialnumber ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_original_scale COMPARING conditionrecord conditionsequentialnumber.
    IF lt_original_scale IS NOT INITIAL.
      SELECT * FROM a_slsprcgcndnrecordscale INTO TABLE @DATA(lt_condition_scale)
         FOR ALL ENTRIES IN @lt_original_scale
       WHERE conditionrecord = @lt_original_scale-conditionrecord
         AND conditionsequentialnumber = @lt_original_scale-conditionsequentialnumber.

      SORT lt_condition_scale BY conditionrecord ASCENDING
                                 conditionsequentialnumber ASCENDING
                                 conditionscaleline ASCENDING.
      DATA(lt_scale_db) = lt_condition_scale.
      LOOP AT ct_condition_scale INTO DATA(ls_scale).
        READ TABLE lt_condition_scale WITH KEY conditionrecord           = ls_scale-conditionrecord
                                               conditionsequentialnumber = ls_scale-conditionsequentialnumber
                                               conditionscaleline        = ls_scale-conditionscaleline
                                      TRANSPORTING NO FIELDS BINARY SEARCH.
        IF sy-subrc = 0.
          DELETE lt_scale_db WHERE conditionrecord           = ls_scale-conditionrecord
                               AND conditionsequentialnumber = ls_scale-conditionsequentialnumber
                               AND conditionscaleline        = ls_scale-conditionscaleline.
        ELSE.
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
            MESSAGE e047(prcg_cndnrecord_api) WITH ls_scale-conditionrecord
                                                   ls_scale-conditionsequentialnumber
                                                   ls_scale-conditionscaleline.
        ENDIF.
      ENDLOOP.
      APPEND LINES OF lt_scale_db TO ct_condition_scale.
    ENDIF.
    FREE: lt_original_scale,lt_condition_scale,lt_scale_db.

    GET REFERENCE OF ct_condition_record INTO lr_record.
    GET REFERENCE OF ct_condition_validity INTO lr_validity.
    GET REFERENCE OF ct_condition_supplement INTO lr_supplement.
    GET REFERENCE OF ct_condition_scale INTO lr_scale.

*  Updating data relevant validity check
    TRY .
        mo_srv_facade->check(
          EXPORTING
            iv_updkz      = if_prcg_cndnrecd_service=>c_updkz_u "'U'
            iv_kappl      = if_prcg_cndnrecd_service=>c_kappl_v "'V'
          CHANGING
            cr_record     = lr_record
            cr_validity   = lr_validity
            cr_supplement = lr_supplement
            cr_scale      = lr_scale
        ).
      CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

*  Prepare importing data for LTD API save method
    TRY.
        mo_srv_facade->prepare_update_record(
          EXPORTING
            ir_condition_record     = lr_record
            ir_condition_validity   = lr_validity
            ir_condition_supplement = lr_supplement
            ir_condition_scale      = lr_scale
          IMPORTING
            er_cond_record          = er_cond_record
            er_cond_scale           = er_cond_scale
            er_internal_record      = DATA(lr_internal_record)
            er_internal_validity    = DATA(lr_internal_validity)
            er_internal_supplement  = DATA(lr_internal_supplement)
            er_internal_scale       = DATA(lr_internal_scale)
        ).
      CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

* Call LTD API save method to create condition record
    mo_ltd_api->check(
          IMPORTING
            et_return      = DATA(lt_ret)
          CHANGING
            cr_cond_record = er_cond_record
            cr_cond_scale  = er_cond_scale ).

* Get LTD API returned messages
    REFRESH et_message.
    convert_ltd_api_message(
      EXPORTING
        ir_cond_record = er_cond_record
        iv_is_create   = ' '
      IMPORTING
        et_message     = et_message
      CHANGING
        ct_return      = lt_ret   " Return parameter table
    ).
* LTD API returned error message handing
    LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                        OR type = if_xo_const_message=>error.
*      IF ls_ret-id = 'VK' AND ( ls_ret-number = 035 OR ls_ret-number = 036 OR ls_ret-number = 079 OR ls_ret-number = 080 ).
*        CONTINUE.
*      ENDIF.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE ID ls_ret-id
        TYPE ls_ret-type
        NUMBER ls_ret-number
        WITH ls_ret-message_v1
        ls_ret-message_v2
        ls_ret-message_v3
        ls_ret-message_v4.
    ENDLOOP.
  ENDMETHOD.


  METHOD COLLECT_MESSAGES.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CLEAR:et_messages.
    MESSAGE ID io_exception->if_t100_message~t100key-msgid
          TYPE io_exception->if_t100_dyn_msg~msgty
          NUMBER io_exception->if_t100_message~t100key-msgno
          INTO DATA(mtext)
          WITH io_exception->if_t100_dyn_msg~msgv1 io_exception->if_t100_dyn_msg~msgv2
          io_exception->if_t100_dyn_msg~msgv3 io_exception->if_t100_dyn_msg~msgv4.
    APPEND VALUE #( conditionrecord             = iv_knumh
                    conditionsequentialnumber   = iv_kopos
                    systemmessagetype           = sy-msgty
                    systemmessageidentification = sy-msgid
                    systemmessagenumber         = sy-msgno
                    systemmessagevariable1      = sy-msgv1
                    systemmessagevariable2      = sy-msgv2
                    systemmessagevariable3      = sy-msgv3
                    systemmessagevariable4      = sy-msgv4 )
      TO et_messages.
  ENDMETHOD.


  METHOD CONSTRUCTOR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    DATA:lt_dfies TYPE TABLE OF dfies.

    mo_dep = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_sls_api = NEW zcl_slsprcg_cndnrecord_api( ).
    " cl_prcg_cndnrecord_api_factory=>get_instance( )->get_sales_api_instance( ).
    mo_prcg_util = cl_cndnrecord_public_utility=>get_instance( ).
    mo_ltd_util = cl_cnd_maint_ltd_util=>get_instance( ).
    mo_ltd_api = cl_cnd_maint_ltd_api_factory=>get_instance( )->get_api_instance( ).
    mo_srv_facade ?= cl_prcg_cndnrecd_srv_facade=>get_instance( ).
    mo_util = cl_cnd_maint_ltd_util=>get_instance( ).

    SELECT *
      FROM t685a
      INTO TABLE mt_t685a
     WHERE kappl = 'V'.

    SELECT *
      FROM tcurc
      INTO TABLE mt_tcurc.

    SELECT *
      FROM dd03nd
     WHERE strucobjn = @cv_cdsname
      INTO CORRESPONDING FIELDS OF TABLE @mt_dd03ndtab.

    CALL FUNCTION 'DDIF_FIELDINFO_GET'
      EXPORTING
        tabname        = 'KONP'
        langu          = sy-langu
      TABLES
        dfies_tab      = lt_dfies
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc <> 0.
      "do nothing
    ELSE.
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KOPOS' iv_fieldname_ext = 'CONDITIONSEQUENTIALNUMBER' ).
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KRECH' iv_fieldname_ext = 'CONDITIONCALCULATIONTYPE'  ).
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KZBZG' iv_fieldname_ext = 'PRICINGSCALEBASIS'         ).
      map_field_list_type( it_dfies = lt_dfies iv_fieldname_int = 'KBETR' iv_fieldname_ext = 'CONDITIONSCALERATEVALUE'         ).
    ENDIF.
  ENDMETHOD.


  METHOD CONVERT_LTD_API_MESSAGE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    CONSTANTS:c_bor_obj_spec           TYPE oj_name VALUE 'BUS30110',
              c_map_data_cat           TYPE wlf_map_data_cat VALUE 'B',
              c_symsgid_00             TYPE symsgid VALUE '00',
              c_field_required_ltd     TYPE symsgno VALUE '055',
              c_field_required_api     TYPE symsgno VALUE '020',
              c_symsgid_ltd_api        TYPE symsgid VALUE 'CND_MAINT_LTD_API',
              c_cndn_amount_change_ltd TYPE symsgno VALUE '022',
              c_cndn_amount_change_api TYPE symsgno VALUE '062',
              c_field_required_recsup  TYPE symsgno VALUE '030',
              c_field_required_scale   TYPE symsgno VALUE '048',
              c_field_required_rec     TYPE symsgno VALUE '066',
              c_field_invalid_value    TYPE symsgno VALUE '067'.
    DATA:lt_map_fields TYPE if_prcg_cndnrecd_service=>ty_map_fields_t,
         ls_message    TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s,
         lv_sytabix    TYPE sytabix.
    FIELD-SYMBOLS:<ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.

    lt_map_fields = VALUE #(
      ( ext_fieldname = 'CONDITIONRATEVALUE'           int_fieldname = 'KBETR' )
      ( ext_fieldname = 'CONDITIONSEQUENTIALNUMBER'    int_fieldname = 'KOPOS' )
      ( ext_fieldname = 'CONDITIONTYPE'                int_fieldname = 'KSCHL' )
      ( ext_fieldname = 'CONDITIONTEXTID'              int_fieldname = 'KNUMT' )
      ( ext_fieldname = 'PRICINGSCALETYPE'             int_fieldname = 'STFKZ' )
      ( ext_fieldname = 'PRICINGSCALEBASIS'            int_fieldname = 'KZBZG' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITY'       int_fieldname = 'KSTBM' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITYUNIT'   int_fieldname = 'KONMS' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNT'         int_fieldname = 'KSTBW' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNTCURRENCY' int_fieldname = 'KONWS' )
      ( ext_fieldname = 'CONDITIONCALCULATIONTYPE'     int_fieldname = 'KRECH' )
      ( ext_fieldname = 'CONDITIONQUANTITY'            int_fieldname = 'KPEIN' )
      ( ext_fieldname = 'CONDITIONQUANTITYUNIT'        int_fieldname = 'KMEIN' )
      ( ext_fieldname = 'BASEUNIT'                     int_fieldname = 'MEINS' )
      ( ext_fieldname = 'ADDITIONALVALUEDAYS'          int_fieldname = 'VALTG' )
      ( ext_fieldname = 'FIXEDVALUEDATE'               int_fieldname = 'VALDT' )
      ( ext_fieldname = 'PAYMENTTERMS'                 int_fieldname = 'ZTERM' )
      ( ext_fieldname = 'MANDT'                        int_fieldname = 'MANDT' )
      ( ext_fieldname = 'CREATEDBYUSER'                int_fieldname = 'ERNAM' )
      ( ext_fieldname = 'CREATIONDATE'                 int_fieldname = 'ERDAT' )
      ( ext_fieldname = 'CONDITIONAPPLICATION'         int_fieldname = 'KAPPL' )
      ( ext_fieldname = 'CONDITIONRECORD'              int_fieldname = 'KNUMH' )
      ( ext_fieldname = 'CONDITIONVALIDITYENDDATE'     int_fieldname = 'DATBI' )
      ( ext_fieldname = 'CONDITIONVALIDITYSTARTDATE'   int_fieldname = 'DATAB' )
      ( ext_fieldname = 'CONDITIONTABLE'               int_fieldname = 'KOTABNR' )
      ( ext_fieldname = 'CONDITIONRATEVALUEUNIT'       int_fieldname = 'KONWA' )
      ( ext_fieldname = 'CONDITIONTOBASEQTYNMRTR'      int_fieldname = 'KUMZA' )
      ( ext_fieldname = 'CONDITIONTOBASEQTYDNMNTR'     int_fieldname = 'KUMNE' )
      ( ext_fieldname = 'CONDITIONLOWERLIMIT'          int_fieldname = 'MXWRT' )
      ( ext_fieldname = 'CONDITIONUPPERLIMIT'          int_fieldname = 'GKWRT' )
      ( ext_fieldname = 'CONDITIONALTERNATIVECURRENCY' int_fieldname = 'KWAEH' )
      ( ext_fieldname = 'CONDITIONEXCLUSION'           int_fieldname = 'KZNEP' )
      ( ext_fieldname = 'CONDITIONISDELETED'           int_fieldname = 'LOEVM_KO' )
      ( ext_fieldname = 'CNDNMAXNUMBEROFSALESORDERS'   int_fieldname = 'ANZAUF' )
      ( ext_fieldname = 'MINIMUMCONDITIONBASISVALUE'   int_fieldname = 'MIKBAS' )
      ( ext_fieldname = 'MAXIMUMCONDITIONBASISVALUE'   int_fieldname = 'MXKBAS' )
      ( ext_fieldname = 'MAXIMUMCONDITIONAMOUNT'       int_fieldname = 'KOMXWRT' )
      ( ext_fieldname = 'INCREMENTALSCALE'             int_fieldname = 'KLF_STG' )
      ( ext_fieldname = 'PRICINGSCALELINE'             int_fieldname = 'KLF_KAL' )
      ( ext_fieldname = 'CONDITIONRELEASESTATUS'       int_fieldname = 'KFRST' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNTCURRENCY' int_fieldname = 'KONPKONWS' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITYUNIT'   int_fieldname = 'KONPKONMS' )
      ( ext_fieldname = 'CONDITIONRATEVALUEUNIT'       int_fieldname = 'KONPKONWA' )
      ( ext_fieldname = 'CONDITIONQUANTITY'            int_fieldname = 'KONPKPEIN' )
      ( ext_fieldname = 'CONDITIONQUANTITYUNIT'        int_fieldname = 'KONPKMEIN' )
      ( ext_fieldname = 'CONDITIONSCALELINE'           int_fieldname = 'KLFN1' )
      ( ext_fieldname = 'CONDITIONSEQUENTIALNUMBER'    int_fieldname = 'KOPOS' )
    ).

    REFRESH et_message.

    ASSIGN ir_cond_record->* TO <ft_cond_record>.

**Get mapping of global name (external) and tech name (internal)
    mo_dep->get_wlf_mp_fields(
      EXPORTING
        iv_bor_obj_spec = c_bor_obj_spec                    "'BUS30110'
        iv_map_data_cat = c_map_data_cat "'B'
      IMPORTING
        et_wlf_mp_fields = DATA(lt_wlf_mp_fields)
    ).

    MOVE-CORRESPONDING lt_map_fields TO lt_wlf_mp_fields KEEPING TARGET LINES.

    LOOP AT ct_return INTO DATA(ls_ret).
      DATA(lv_tabix) = sy-tabix.
**Get the conditionrecord according the tabix of cond_record (match with the row of return message)
      IF <ft_cond_record> IS ASSIGNED.
        CLEAR:lv_sytabix.
        lv_sytabix = ls_ret-row.
        READ TABLE <ft_cond_record> ASSIGNING FIELD-SYMBOL(<fs_cond_record>) WITH KEY tabix = lv_sytabix.
        IF sy-subrc = 0 AND <fs_cond_record> IS ASSIGNED.
          ls_message-conditionrecord = <fs_cond_record>-knumh.
          ls_message-conditionsequentialnumber = <fs_cond_record>-kopos.
        ENDIF.
      ENDIF.

**Replace the message of message class 00
**with the message of message class PRCG_CNDNRECORD_API:
**Fill out all required entry fields --> Condition record &1: Entry property "&2" is required.
      IF ls_ret-id = c_symsgid_00.
        IF ( ls_ret-number = 058 ).
          IF ( ls_ret-field = 'WBS_BILL_ELEMENT' ).
            ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
            ls_ret-number = 081.
            CLEAR: ls_ret-message,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
            CONTINUE.
          ELSE.
            IF ls_ret-message_v2 IS INITIAL AND ls_ret-message_v3 IS INITIAL.
              ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
              READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields_gfn) WITH KEY int_fieldname = ls_ret-field.
              IF sy-subrc = 0.
                ls_ret-message_v2 = ls_fields_gfn-ext_fieldname.
              ELSE.
                ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
              ENDIF.

              CLEAR: ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
            ELSE. "If there are multiple message value should be return. Entry & & & does not exist in &4 (check entry)
              ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
              ls_ret-number = 130.
              MODIFY ct_return FROM ls_ret INDEX lv_tabix.
              CONTINUE.
            ENDIF.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
            CONTINUE.
          ENDIF.
        ENDIF.


        IF ( ls_ret-number = 002 AND ls_ret-field = 'KRECH' ).
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          ls_ret-number = 085.
          READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields_krech) WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v2 = ls_fields_krech-ext_fieldname.
          ELSE.
            ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
          ENDIF.
          ls_ret-message_v1 = ls_message-conditionrecord.
          CLEAR: ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
          CONTINUE.
        ENDIF.

        CLEAR:ls_ret-message,
              ls_ret-message_v1,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.

        CASE ls_ret-number.
          WHEN c_field_required_ltd."055
            ls_ret-number = c_field_required_api. "020
            ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
            READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields) WITH KEY int_fieldname = ls_ret-field.
            IF sy-subrc = 0.
              ls_ret-message_v2 = ls_fields-ext_fieldname.
            ELSE.
              ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
            ENDIF.
            ls_ret-message_v1 = ls_message-conditionrecord.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.

**Replace the message of message class CND_MAINT_LTD_API
**with the message of message class PRCG_CNDNRECORD_API:
**Condition amount is changed to the amount in the first line of the scale.
      IF ls_ret-id = c_symsgid_ltd_api.
        IF ls_ret-number = c_cndn_amount_change_ltd. "022
          CLEAR:ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
          ls_ret-number = c_cndn_amount_change_api. "062
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

      IF ls_ret-id = 'VK'.
        IF ls_ret-number = 085.
          IF iv_is_create = 'X'.
            ls_ret-number = 103.
          ELSE.
            ls_ret-number = 104.
          ENDIF.
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          ls_ret-message_v1 = ls_ret-message_v2.
          CLEAR:ls_ret-message,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

**Replace the message with global name for message class PRCG_CNDNRECORD_API:
      IF ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api.
**030: Condition record &1 with sequential no. &2: Property "&3" is required.
**066: Property “&3” is required for condition record &1 with sequential No. &2.
**067: “&1” is not a valid value for property “&3” in condition record &2.
        IF ( ls_ret-number = c_field_required_recsup OR ls_ret-number = c_field_required_rec OR ls_ret-number = c_field_invalid_value ).
          CLEAR:ls_ret-message,ls_ret-message_v4.
          READ TABLE lt_wlf_mp_fields INTO ls_fields WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v3 = ls_fields-ext_fieldname.
          ENDIF.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
**048: Condition record &1 (seq.no. &2, scaleline &3): Property "&4" is required
        IF ( ls_ret-number = c_field_required_scale ). "048
          CLEAR:ls_ret-message.
          READ TABLE lt_wlf_mp_fields INTO ls_fields WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v4 = ls_fields-ext_fieldname.
          ENDIF.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

      CONDENSE:ls_ret-message_v1,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
      ls_message-systemmessagetype           = ls_ret-type.
      ls_message-systemmessageidentification = ls_ret-id.
      ls_message-systemmessagenumber         = ls_ret-number.
      ls_message-systemmessagevariable1      = ls_ret-message_v1.
      ls_message-systemmessagevariable2      = ls_ret-message_v2.
      ls_message-systemmessagevariable3      = ls_ret-message_v3.
      ls_message-systemmessagevariable4      = ls_ret-message_v4.
      APPEND ls_message TO et_message.
      CLEAR ls_message.
      MODIFY ct_return FROM ls_ret TRANSPORTING message_v1 message_v2 message_v3 message_v4.
    ENDLOOP.
  ENDMETHOD.


  METHOD CONVERT_WBSELEMENT_EXT2INT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*

    IF ct_condition_validity IS NOT INITIAL.
      LOOP AT ct_condition_validity INTO DATA(ls_condition_validity).
        DATA(lv_tabix) = sy-tabix.
        IF ls_condition_validity-wbselementexternalid IS NOT INITIAL.
          TRY.
              CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
                EXPORTING
                  input  = ls_condition_validity-wbselementexternalid
                IMPORTING
                  output = ls_condition_validity-wbselementinternalid.
            CATCH cx_no_check INTO DATA(lr_ex).
              RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
                MESSAGE ID 'PRCG_CNDNRECORD_API'
                TYPE 'E'
                NUMBER 080
                WITH ls_condition_validity-wbselementexternalid.
          ENDTRY.
          MODIFY ct_condition_validity FROM ls_condition_validity INDEX lv_tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
ENDCLASS.