" -----------------------------------------------------------------------
"   R E V I S I O N   H I S T O R Y                                     -
" -----------------------------------------------------------------------
"  AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              -
"               |            | TRANSPORT REQUESTS                       -
" -----------------------------------------------------------------------
"  ZHMAIVAD     | 21.02.2023 | 18099     : Feature - Development - VAS  -
"               |            | DS4K944075                               -
" -----------------------------------------------------------------------
" ZHMAIVAD     | 24.05.2023 | 21652     : Feature - Development - VAS  -
"              |            | DS4K953535                               -
" -----------------------------------------------------------------------
" * use this source file for the definition and implementation of
" * local helper classes, interface definitions and type
" * declarations
CLASS lhc_sd_vas_upl_validations_mm DEFINITION INHERITING FROM zcl_sd_vas_upl_validations FINAL.
  PUBLIC SECTION.
    METHODS constructor IMPORTING is_vas_cond TYPE zsd_s_vas_cond.
    METHODS zif_sd_validation_methods~validate_plant REDEFINITION.
  PROTECTED SECTION.
    METHODS: set_configuration REDEFINITION.
ENDCLASS.


CLASS lhc_sd_vas_upl_validations_mm IMPLEMENTATION.
  METHOD set_configuration.
    DATA:
       lv_filter TYPE zsd_application VALUE 'MM'.

    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDDA8DE0767F5C01F59'
                                                is_filter       = lv_filter
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                      IMPORTING et_table        = mts_shas_config ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.
    IF sy-subrc <> 0.
      add_warning_message( 014 ) ##NUMBER_OK.
    ENDIF.
  ENDMETHOD.

  METHOD constructor.
    super->constructor( is_vas_cond = is_vas_cond ).
    set_configuration( ).
  ENDMETHOD.

  METHOD zif_sd_validation_methods~validate_plant.
    SELECT SINGLE plant  ##NEEDED
      FROM i_plantpurchasingorganization
      INTO @DATA(lv_plant)
      WHERE   purchasingorganization = @ms_vas_condition-purchase_organization
          AND plant = @ms_vas_condition-plant.
    IF sy-subrc <> 0.
      MESSAGE e023(zsd_aif_vas_cond_upl) INTO DATA(lv_message) ##NEEDED ##MG_MISSING.
      add_error_message( 023 ) ##NUMBER_OK.
    ENDIF.
  ENDMETHOD.
ENDCLASS.


CLASS lhc_sd_vas_upl_validations_sd DEFINITION INHERITING FROM zcl_sd_vas_upl_validations FINAL.
  PUBLIC SECTION.
    METHODS constructor IMPORTING is_vas_cond TYPE zsd_s_vas_cond.
    METHODS zif_sd_validation_methods~validate_plant REDEFINITION.
    METHODS zif_sd_validation_methods~validate_customer REDEFINITION.
    METHODS zif_sd_validation_methods~validate_product REDEFINITION.
  PROTECTED SECTION.
    METHODS: set_configuration REDEFINITION.
ENDCLASS.


CLASS lhc_sd_vas_upl_validations_sd IMPLEMENTATION.
  METHOD set_configuration.
    DATA:
     lv_filter TYPE zsd_application VALUE 'SD'.

    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDDA8DE0767F5C01F59'
                                                is_filter       = lv_filter
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-names
                                      IMPORTING et_table        = mts_shas_config ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    IF sy-subrc <> 0.
      add_warning_message( 014 ) ##NUMBER_OK.
    ENDIF.
  ENDMETHOD.

  METHOD constructor.
    super->constructor( is_vas_cond = is_vas_cond ).
    set_configuration( ).
  ENDMETHOD.

  METHOD zif_sd_validation_methods~validate_plant.
    DATA lt_sales_org_range TYPE RANGE OF vkorg.
    DATA lt_dist_channel_range TYPE RANGE OF vtweg.
    DATA lt_plant_range TYPE RANGE OF werks_d.

    IF ms_vas_condition-sales_organization IS NOT INITIAL.
      lt_sales_org_range = VALUE #( ( low = ms_vas_condition-sales_organization option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-dist_channel IS NOT INITIAL.
      lt_dist_channel_range = VALUE #( ( low = ms_vas_condition-dist_channel option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-plant IS NOT INITIAL.
      lt_plant_range = VALUE #( ( low = ms_vas_condition-plant option = 'EQ' sign = 'I' ) ).
    ENDIF.

    IF lt_sales_org_range IS NOT INITIAL AND lt_dist_channel_range IS NOT INITIAL AND lt_plant_range IS NOT INITIAL.
      SELECT SINGLE werks  ##NEEDED ##WARN_OK
        FROM tvkwz
        INTO @DATA(lv_plant)
        WHERE   vkorg IN @lt_sales_org_range
            AND vtweg IN @lt_dist_channel_range
            AND werks IN @lt_plant_range.
      IF sy-subrc <> 0.
        MESSAGE e022(zsd_aif_vas_cond_upl) INTO DATA(lv_message) ##NEEDED ##MG_MISSING.
        add_error_message( 022 ) ##NUMBER_OK.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD zif_sd_validation_methods~validate_customer.
    DATA lt_sales_org_range TYPE RANGE OF vkorg.
    DATA lt_dist_channel_range TYPE RANGE OF vtweg.
    DATA lt_kunnr_range TYPE RANGE OF  kunnr.

    IF ms_vas_condition-sales_organization IS NOT INITIAL.
      lt_sales_org_range = VALUE #( ( low = ms_vas_condition-sales_organization option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-dist_channel IS NOT INITIAL.
      lt_dist_channel_range = VALUE #( ( low = ms_vas_condition-dist_channel option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-customer IS NOT INITIAL.
      lt_kunnr_range = VALUE #( ( low = ms_vas_condition-customer option = 'EQ' sign = 'I' ) ).
    ENDIF.

    IF lt_sales_org_range IS NOT INITIAL AND lt_dist_channel_range IS NOT INITIAL AND lt_kunnr_range IS NOT INITIAL.

      SELECT SINGLE customer  ##NEEDED
        FROM i_customersalesarea
        INTO @DATA(lv_customer)
        WHERE   salesorganization   IN @lt_sales_org_range
            AND distributionchannel IN @lt_dist_channel_range
            AND customer            IN @lt_kunnr_range.
      IF sy-subrc <> 0.
        MESSAGE e024(zsd_aif_vas_cond_upl) INTO DATA(lv_message) ##NEEDED ##MG_MISSING.
        add_error_message( 024 ) ##NUMBER_OK.
      ENDIF.

    ENDIF.
  ENDMETHOD.

  METHOD zif_sd_validation_methods~validate_product.
    DATA lt_sales_org_range TYPE RANGE OF vkorg.
    DATA lt_dist_channel_range TYPE RANGE OF vtweg.
    DATA lt_matnr_range TYPE RANGE OF matnr.

    IF ms_vas_condition-sales_organization IS NOT INITIAL.
      lt_sales_org_range = VALUE #( ( low = ms_vas_condition-sales_organization option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-dist_channel IS NOT INITIAL.
      lt_dist_channel_range = VALUE #( ( low = ms_vas_condition-dist_channel option = 'EQ' sign = 'I' ) ).
    ENDIF.
    IF ms_vas_condition-material IS NOT INITIAL.
      lt_matnr_range = VALUE #( ( low = ms_vas_condition-material option = 'EQ' sign = 'I' ) ).
    ENDIF.

    IF lt_sales_org_range IS NOT INITIAL AND lt_dist_channel_range IS NOT INITIAL AND lt_matnr_range IS NOT INITIAL.
      SELECT SINGLE matnr  ##NEEDED ##WARN_OK
        FROM mvke
        INTO @DATA(lv_matnr)
        WHERE   vkorg IN @lt_sales_org_range
            AND vtweg IN @lt_dist_channel_range
            AND matnr IN @lt_matnr_range.
      IF sy-subrc <> 0.
        MESSAGE e025(zsd_aif_vas_cond_upl) INTO DATA(lv_message) ##NEEDED ##MG_MISSING.
        add_error_message( 025 ) ##NUMBER_OK.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.