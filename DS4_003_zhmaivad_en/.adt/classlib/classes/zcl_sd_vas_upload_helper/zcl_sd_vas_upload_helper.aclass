CLASS zcl_sd_vas_upload_helper DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPES:
      BEGIN OF gtyp_s_cond_header,
        col_index TYPE /aif/lfa_excel_row_e,
        col       TYPE /aif/lfa_excel_col_e,
        value     TYPE string,
      END OF gtyp_s_cond_header,
      gtyp_t_cond_header TYPE STANDARD TABLE OF gtyp_s_cond_header.
    TYPES: gtyp_t_vas_sub_services TYPE SORTED TABLE OF fsh_vas_subser WITH NON-UNIQUE KEY fsh_vas_sub_ser.

    CLASS-METHODS class_constructor.

    CLASS-METHODS convert_date_ext_to_int
      IMPORTING
        !iv_date         TYPE string
      RETURNING
        VALUE(rv_result) TYPE dats
      RAISING
        zcx_sd_vas_upload .

    CLASS-METHODS map_vas_cond_fields
      IMPORTING is_vas_cond          TYPE any
                it_cond_header       TYPE gtyp_t_cond_header
                its_vas_sub_services TYPE gtyp_t_vas_sub_services
      CHANGING  cs_vas_cond_upl      TYPE zsd_s_vas_cond
      RAISING
                zcx_sd_vas_upload.

  PROTECTED SECTION.
  PRIVATE SECTION.
    CLASS-METHODS get_condition_table_name_match
      IMPORTING it_dyn_fsh_fields TYPE zsd_s_vas_cond-dyn_fsh_fields
                iv_condition_type TYPE /sapcnd/cond_type
      RETURNING VALUE(rv_result)  TYPE /sapcnd/cond_table_id.

    CLASS-DATA gv_vas_zvas TYPE kschl.
    CLASS-DATA gv_vas_zvae TYPE kschl.
    CLASS-DATA gv_vas_zsha TYPE kschl.
    CLASS-DATA gv_vas_zret TYPE kschl.
ENDCLASS.



CLASS ZCL_SD_VAS_UPLOAD_HELPER IMPLEMENTATION.


  METHOD convert_date_ext_to_int.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 25.04.2023 | 19866  : Development - VAS condition re  *
*              |            | DS4K949378                               *
*----------------------------------------------------------------------*
    TRY.
        cl_abap_datfm=>conv_date_ext_to_int(
          EXPORTING
            im_datext = iv_date
          IMPORTING
            ex_datint = rv_result
        ).
      CATCH cx_abap_datfm_no_date cx_abap_datfm_invalid_date cx_abap_datfm_format_unknown cx_abap_datfm_ambiguous INTO DATA(lo_exception).
        RAISE EXCEPTION TYPE zcx_sd_vas_upload MESSAGE e018(zsd_aif_vas_cond_upl) WITH iv_date
                                               EXPORTING previous = lo_exception.
    ENDTRY.

  ENDMETHOD.


  METHOD map_vas_cond_fields.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 25.04.2023 | 19866  : Development - VAS condition re  *
*              |            | DS4K949378                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 24.05.2023 | 21652  :Defect] - Test -VAS condition    *
*              |            | DS4K953535                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 31.10.2023 | 24103  : VAS condition record mass upl   *
*              |            | DS4K960207                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 22.01.2024 | 28248  : Feature [CR] - VAS mass  upload *
*              |            | DS4K976852                               *
************************************************************************
* HURTSALE     | 18.03.2024 | 30084  : Feature [CR] - VAS mass  upload *
*              |            | DS4K983519                               *
*----------------------------------------------------------------------*
    DATA lv_fieldname TYPE fieldname.
    DATA lo_elem_descr TYPE REF TO cl_abap_elemdescr.

    FIELD-SYMBOLS: <lt_vas_sub_serv_fields> TYPE zsd_tt_vas_ser_fields.
    FIELD-SYMBOLS: <lt_vas_cond_fieldnames> TYPE zsd_tt_vas_cond_fsh_fields." ddfieldnames.
    CONSTANTS: lc_vas_sub_ser_max_len type i value 20.


    " Adjust the date formats
    ASSIGN COMPONENT 'DATE_FROM' OF STRUCTURE is_vas_cond TO FIELD-SYMBOL(<lv_date_from>). "#EC CI_SUBRC
    IF sy-subrc = 0.
      cs_vas_cond_upl-date_from = zcl_sd_vas_upload_helper=>convert_date_ext_to_int( <lv_date_from> ).
    ENDIF.

    ASSIGN COMPONENT 'DATE_TO' OF STRUCTURE is_vas_cond TO FIELD-SYMBOL(<lv_date_to>). "#EC CI_SUBRC
    IF sy-subrc = 0.
      cs_vas_cond_upl-date_to = zcl_sd_vas_upload_helper=>convert_date_ext_to_int( <lv_date_to> ).
    ENDIF.

    ASSIGN COMPONENT 'VAS_SUB_SERVICES'  OF STRUCTURE cs_vas_cond_upl TO <lt_vas_sub_serv_fields>. "#EC CI_SUBRC
    ASSIGN COMPONENT 'DYN_FSH_FIELDS'    OF STRUCTURE cs_vas_cond_upl TO <lt_vas_cond_fieldnames>.
    IF sy-subrc = 0.
      DO .
        IF sy-index > 4.
          ASSIGN COMPONENT sy-index  OF STRUCTURE is_vas_cond TO FIELD-SYMBOL(<lv_fsh_field>).
          IF sy-subrc = 0 .
            IF <lv_fsh_field> IS NOT INITIAL.
              READ TABLE it_cond_header ASSIGNING FIELD-SYMBOL(<ls_row_column>) INDEX sy-index.
              IF  sy-subrc = 0.
                lv_fieldname = <ls_row_column>-value.
                CASE <ls_row_column>-value.
                  WHEN 'FSH_VKORG'.
                    cs_vas_cond_upl-sales_organization    = <lv_fsh_field>.
                  WHEN 'FSH_VTWEG'.
                    cs_vas_cond_upl-dist_channel          = <lv_fsh_field>.
                  WHEN 'FSH_SPART'.
                    cs_vas_cond_upl-division              = <lv_fsh_field>.
                  WHEN 'FSH_KUNNR'.
                    cs_vas_cond_upl-customer              = <lv_fsh_field>.
                  WHEN 'FSH_KDGRP'.
                    cs_vas_cond_upl-customer_group        = <lv_fsh_field>.
                  WHEN 'FSH_EKORG'.
                    cs_vas_cond_upl-purchase_organization = <lv_fsh_field>.
                  WHEN 'FSH_EKGRP'.
                    cs_vas_cond_upl-purchase_group        = <lv_fsh_field>.
                  WHEN 'FSH_LIFNR'.
                    cs_vas_cond_upl-vendor                = <lv_fsh_field>.
                  WHEN 'FSH_VAS_CG_D'.
                    cs_vas_cond_upl-vas_customer_group    = <lv_fsh_field>.
                  WHEN 'FSH_MATNR'.
                    cs_vas_cond_upl-material              = <lv_fsh_field>.
                  WHEN 'FSH_WERKS'.
                    cs_vas_cond_upl-plant                 = <lv_fsh_field>.
                  WHEN 'FSH_MATKL'.
                    cs_vas_cond_upl-material_group        = <lv_fsh_field>.
                  WHEN 'FSH_SAISJ'.
                    cs_vas_cond_upl-season_year           = <lv_fsh_field>.
                  WHEN OTHERS.

                    " Map the not corresponding custom field names
                    IF <ls_row_column>-value = 'ZZFSH_ORDER_REAS'.
                      cs_vas_cond_upl-zzfsh_order_reas   = <lv_fsh_field>.
                    ENDIF.

                    " Collect VAS subservice information
                    IF <ls_row_column>-value NP 'FSH_*'    AND
                       <ls_row_column>-value NP 'ZZ+FSH_*' AND
                       <ls_row_column>-value NP 'ZZFSH_*'  AND
                       <ls_row_column>-value NP 'ZZ*'.

                      CLEAR: lv_fieldname.

                      APPEND INITIAL LINE TO <lt_vas_sub_serv_fields> ASSIGNING FIELD-SYMBOL(<ls_vas_sub_serv_field>).
                      <ls_vas_sub_serv_field>-condition_id = cs_vas_cond_upl-condition_id.
                      <ls_vas_sub_serv_field>-sub_service = <ls_row_column>-value.
                      READ TABLE its_vas_sub_services ASSIGNING FIELD-SYMBOL(<ls_vas_service>) WITH KEY fsh_vas_sub_ser = <ls_row_column>-value ##WARN_OK.
                      IF sy-subrc = 0.
                        <ls_vas_sub_serv_field>-service = <ls_vas_service>-fsh_vas_ser .
                      ENDIF.

                      IF strlen( <lv_fsh_field> ) > lc_vas_sub_ser_max_len.
                        <ls_vas_sub_serv_field>-text_line = CONV #( <lv_fsh_field> ).
                      ELSE.
                        <ls_vas_sub_serv_field>-field1 = CONV #( <lv_fsh_field> ).
                      ENDIF.
                    ENDIF.
                ENDCASE.
                " if the fieldname variable is still filled, then this should be FSH field
                IF lv_fieldname IS NOT INITIAL.
                  lo_elem_descr ?= cl_abap_elemdescr=>describe_by_data( <lv_fsh_field> ).
                  DATA(ls_ddic) = lo_elem_descr->get_ddic_field( ).
                  APPEND INITIAL LINE TO <lt_vas_cond_fieldnames> ASSIGNING FIELD-SYMBOL(<ls_vas_fsh_field>).
                  <ls_vas_fsh_field>-condition_id = cs_vas_cond_upl-condition_id.
                  <ls_vas_fsh_field>-field_name = lv_fieldname.
                  <ls_vas_fsh_field>-field_description = ls_ddic-scrtext_m.
                  <ls_vas_fsh_field>-field_value = <lv_fsh_field>.
                ENDIF.
                CLEAR: lv_fieldname.
              ENDIF.
            ENDIF.
          ELSE.
            EXIT.
          ENDIF.
        ENDIF.
      ENDDO.
    ENDIF.

    " Fill matching table name based on which FSH field are filled from upload row,
    cs_vas_cond_upl-matching_table_name = get_condition_table_name_match( iv_condition_type = cs_vas_cond_upl-kschl
                                                                          it_dyn_fsh_fields = cs_vas_cond_upl-dyn_fsh_fields ).

    LOOP AT cs_vas_cond_upl-dyn_fsh_fields ASSIGNING FIELD-SYMBOL(<ls_fsh_field>).
      <ls_fsh_field>-table_name = cs_vas_cond_upl-matching_table_name.
    ENDLOOP.
  ENDMETHOD.


  METHOD get_condition_table_name_match.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 25.04.2023 | 19866  : Development - VAS condition re  *
*              |            | DS4K949378                               *
*----------------------------------------------------------------------*
* GERTSVIK     | 18.03.2024 | 30191  : Feature - [Defect] - Test - VAS *
*              |            | DS4K983880                               *
*----------------------------------------------------------------------*
    " This method finds best match among the specified table ranges using the given fieldnames.
    " If all fieldnames are found from specific table, it means this table is a match

    DATA lt_sql_join_tables TYPE TABLE OF string.
    DATA lt_sql_where_condition_fields TYPE TABLE OF string.
    DATA lt_sql_table_fields TYPE TABLE OF string.
    DATA lt_table_range TYPE RANGE OF tabname.
    DATA lv_index TYPE i.

    DATA lv_fsh_components_count TYPE i.
    DATA lv_min_fields_difference TYPE i VALUE 10000.
    DATA lv_fields_difference TYPE i.

    DATA lo_struct_descr TYPE REF TO cl_abap_structdescr.
    DATA lo_table_descr TYPE REF TO cl_abap_tabledescr.
    DATA lt_components TYPE cl_abap_structdescr=>component_table.
    DATA lo_table_ref TYPE REF TO data.
    FIELD-SYMBOLS <lt_result_table> TYPE ANY TABLE.

    CASE iv_condition_type.
      WHEN gv_vas_zsha OR gv_vas_zret.
        lt_table_range = VALUE #( ( sign = 'I' option = 'BT' low = '/1CN/AVSCUSVS951' high = '/1CN/AVSCUSVS999' ) ).
      WHEN gv_vas_zvas OR gv_vas_zvae.
        lt_table_range = VALUE #( ( sign = 'I' option = 'BT' low = '/1CN/AVSCUSVS900' high = '/1CN/AVSCUSVS950' ) ).
      WHEN OTHERS.
    ENDCASE.

    " Prepare SQL Selection Components
*      DATA(lv_total_fields_count) = lines( it_dyn_fsh_fields ).

    DATA(lv_total_fields_count) = REDUCE #( INIT lv_quantity = 0
                                            FOR <ls_fsh_fieldnames> IN it_dyn_fsh_fields
                                            WHERE ( field_name <> 'ZZPROCUREMENT_FLAG' )
                                            NEXT lv_quantity += 1 ).

    APPEND `dd02l` TO lt_sql_join_tables.                   "#EC NOTEXT
    APPEND `dd02l~tabname,` TO lt_sql_table_fields.         "#EC NOTEXT

    lt_components = VALUE #( ( name = 'TABNAME'
                               type = CAST #( cl_abap_elemdescr=>describe_by_name( 'TABNAME' ) ) ) ).


    LOOP AT it_dyn_fsh_fields ASSIGNING FIELD-SYMBOL(<ls_fsh_fieldname>) WHERE field_name <> 'ZZPROCUREMENT_FLAG'.
      lv_index += 1.
      " Build SQL source tables code
      APPEND |INNER JOIN dd03l as f{ lv_index } on dd02l~tabname = f{ lv_index }~tabname|  TO lt_sql_join_tables. "#EC NOTEXT

      " Build SQL Where condition code
      IF lt_sql_where_condition_fields IS INITIAL.
        APPEND |f{ lv_index }~fieldname = '{ <ls_fsh_fieldname>-field_name }'|      TO lt_sql_where_condition_fields. "#EC NOTEXT
      ELSE.
        APPEND |AND f{ lv_index }~fieldname = '{ <ls_fsh_fieldname>-field_name }'|  TO lt_sql_where_condition_fields. "#EC NOTEXT
      ENDIF.

      " Build SQL Selection fields code
      IF lv_index = lv_total_fields_count.
        APPEND |f{ lv_index }~fieldname AS field_{ lv_index } |                   TO lt_sql_table_fields. "#EC NOTEXT
      ELSE.
        APPEND |f{ lv_index }~fieldname AS field_{ lv_index }, |                  TO lt_sql_table_fields. "#EC NOTEXT
      ENDIF.

      " Build Structure components for result table
      lt_components = VALUE #( BASE lt_components
                               ( name = |FIELD_{ lv_index }|
                                 type = CAST #( cl_abap_elemdescr=>describe_by_name( 'FIELDNAME' ) ) ) ).
    ENDLOOP.

    lo_struct_descr = cl_abap_structdescr=>create( lt_components ).

    " Dynamic line type from structure components , table type STANDARD TABLE
    lo_table_descr = cl_abap_tabledescr=>create(
      p_line_type  = lo_struct_descr
      p_table_kind = cl_abap_tabledescr=>tablekind_std ).

    " Create a RTTS table object using the table description class
    CREATE DATA lo_table_ref TYPE HANDLE lo_table_descr .
    ASSIGN lo_table_ref->* TO <lt_result_table>.

    SELECT DISTINCT (lt_sql_table_fields)
      FROM (lt_sql_join_tables)
      WHERE dd02l~tabname IN @lt_table_range         "#EC CI_SEL_NESTED
      AND (lt_sql_where_condition_fields)
      ORDER BY dd02l~tabname
      INTO CORRESPONDING FIELDS OF TABLE @<lt_result_table>.
    IF sy-subrc = 0.
      " Find the closest match which has minimum table fields difference starting with "FSH_*" fieldnames
      LOOP AT <lt_result_table> ASSIGNING FIELD-SYMBOL(<ls_result_table>).
        ASSIGN COMPONENT 'TABNAME' OF STRUCTURE <ls_result_table> TO FIELD-SYMBOL(<lv_tabname>).
        IF sy-subrc = 0.
          lo_struct_descr ?= cl_abap_structdescr=>describe_by_name( <lv_tabname> ).
          lt_components = lo_struct_descr->get_components( ).
          LOOP AT lt_components ASSIGNING FIELD-SYMBOL(<ls_component>) WHERE name CP 'FSH_*' "#EC CI_NESTED
                                                                          OR name CP 'ZZ+FSH_*'
                                                                          OR name CP 'ZZFSH_*'.
            lv_fsh_components_count = lv_fsh_components_count + 1.
          ENDLOOP.

          lv_fields_difference = lv_fsh_components_count - lv_total_fields_count.
          IF lv_fields_difference < lv_min_fields_difference .
            lv_min_fields_difference = lv_fields_difference.
            rv_result = substring( val = <lv_tabname>
                                   off = strlen( <lv_tabname> ) - 8
                                   len = 8 ).
          ENDIF.

        ENDIF.

        CLEAR: lv_fsh_components_count.
      ENDLOOP.

    ENDIF.
  ENDMETHOD.


  METHOD class_constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 25.04.2023 | 19866  : Development - VAS condition re  *
*              |            | DS4K949378                               *
*----------------------------------------------------------------------*
    TRY.

        DATA(lt_hm_1267_vas_types) = zcl_pe_hm_basic=>get_table( '1267' ).

        DATA(ls_hm_1267_seq_1) = VALUE zpe_s_hm_table( lt_hm_1267_vas_types[ sequence = '001' ] ).
        DATA(ls_hm_1267_seq_2) = VALUE zpe_s_hm_table( lt_hm_1267_vas_types[ sequence = '002' ] ).

        gv_vas_zvas = CONV #( ls_hm_1267_seq_1-field1 ).
        gv_vas_zvae = CONV #( ls_hm_1267_seq_2-field1 ).
        gv_vas_zsha = CONV #( ls_hm_1267_seq_1-field2 ).
        gv_vas_zret = CONV #( ls_hm_1267_seq_2-field2 ).

      CATCH zcx_pe_hm INTO DATA(lo_exception).
        MESSAGE lo_exception.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.