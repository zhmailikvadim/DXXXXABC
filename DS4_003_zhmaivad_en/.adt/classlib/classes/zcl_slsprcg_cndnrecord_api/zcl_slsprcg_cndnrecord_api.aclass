class ZCL_SLSPRCG_CNDNRECORD_API definition
  public
  create public

  global friends CL_PRCG_CNDNRECORD_API_FACTORY .

public section.

  interfaces IF_SLSPRCG_CNDNRECD_API .
  interfaces IF_SLSPRCG_CNDNRECD_API_TYPES .

  methods CONSTRUCTOR .
protected section.
private section.

  types:
    BEGIN OF ty_cndnrecd_critra_hdr_tech_s,
      datam_from      TYPE datab,
      datam_to        TYPE datbi,
      exclude_deleted TYPE loevm_ko,
    END OF ty_cndnrecd_critra_hdr_tech_s .
  types:
    BEGIN OF ty_cndnrecd_critra_item_s,
      conditiontable                TYPE kotabnr,
      conditionrecord               TYPE knumh,
      conditiontype                 TYPE RANGE OF kschl,
      conditionfieldselectionoption TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_selopt_t,
    END OF ty_cndnrecd_critra_item_s .
  types:
    ty_cndnrecd_critra_item_t   TYPE STANDARD TABLE OF ty_cndnrecd_critra_item_s WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF ty_cndnrecd_konh_s,
      kotabnr TYPE kotabnr,
      knumh   TYPE knumh,
    END OF ty_cndnrecd_konh_s .
  types:
    ty_cndnrecd_konh_t  TYPE STANDARD TABLE OF ty_cndnrecd_konh_s WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF ty_cndnrecd_mul_konh_s,
      knumh                TYPE knumh,
      kotabnr              TYPE kotabnr,
      kschl                TYPE kscha,
      priceapprovalrequest TYPE priceapprovalrequest,
    END OF ty_cndnrecd_mul_konh_s .
  types:
    ty_cndnrecd_mul_konh_t  TYPE STANDARD TABLE OF ty_cndnrecd_mul_konh_s WITH NON-UNIQUE DEFAULT KEY .
  types:
    BEGIN OF ty_records,
      tabix  TYPE i,
      rec_id TYPE /smb/de_cnt_rec_id,
    END OF ty_records .
  types:
    ty_records_t TYPE STANDARD TABLE OF ty_records .
  types:
    BEGIN OF ty_tables,
      kvewe   TYPE kvewe,
      kotabnr TYPE kotabnr,
    END OF ty_tables .
  types:
    ty_tables_t TYPE STANDARD TABLE OF ty_tables .
  types:
    BEGIN OF ty_customer_businesspartner_s,
      fieldname       TYPE fieldname,
      customer        TYPE kunnr,
      businesspartner TYPE bu_partner,
    END OF ty_customer_businesspartner_s .
  types:
    ty_customer_businesspartner_t TYPE STANDARD TABLE OF ty_customer_businesspartner_s .
  types:
    BEGIN OF ty_sls_cndn_validity_enh_s.
      INCLUDE TYPE ZP_SlsPrcgCndnRecdValidity .
  TYPES: kvewe   TYPE kvewe,
      kotabnr TYPE kotabnr.
  TYPES: END OF ty_sls_cndn_validity_enh_s .
  types:
    ty_sls_cndn_validity_enh_t TYPE STANDARD TABLE OF ty_sls_cndn_validity_enh_s WITH NON-UNIQUE DEFAULT KEY .

  constants C_PRICING_USAGE type KVEWE value 'A' ##NO_TEXT.
  data MO_UTIL type ref to IF_CND_MAINT_LTD_UTIL .
  data MO_COND_DB type ref to IF_CND_MAINT_LTD_DB .
  data MO_COND_CHECKS type ref to IF_CND_MAINT_LTD_CHECK .
  data MO_LTD_API type ref to IF_CND_MAINT_LTD_API .
  data MO_DEP type ref to IF_CND_MAINT_LTD_DEP .
  data MO_BLOCKED_PARTNERS type ref to IF_CND_MAINT_BLOCKED_PARTNERS .
  data MO_PRICING_CALC_TYPES type ref to IF_PRICING_CALCULATION_TYPES  ##NEEDED.
  data MO_SRV_FACADE type ref to IF_PRCG_CNDNRECD_SRV_FACADE .
  data MR_COND_RECORD type ref to DATA  ##NEEDED.
  data MR_COND_SCALE type ref to DATA  ##NEEDED.
  data MV_RECORD_COUNT_LIMIT type I value 1000 ##NO_TEXT.
  data MO_PRCG_UTIL type ref to IF_CNDNRECORD_PUBLIC_UTILITY .
  data MV_SUPPLIED_RECORD type ABAP_BOOL .
  data MV_SUPPLIED_RECORD_TEXT type ABAP_BOOL .
  data MV_SUPPLIED_SUPPLEMENT type ABAP_BOOL .
  data MV_SUPPLIED_SUPPLEMENT_TEXT type ABAP_BOOL .
  data MV_SUPPLIED_SCALE type ABAP_BOOL .
  data MT_CONTAB_DISTINCT type IF_CND_MAINT_LTD_DEP=>CONTAB_T .

  methods CONVERT_EXT_TO_INT_STRUCTURE
    importing
      !IS_CNDNRECORD_CRITERIA_HEADER type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_HEADER_S
      !IT_CNDNRECORD_CRITERIA_ITEM type TY_CNDNRECD_CRITRA_ITEM_T
    exporting
      !ES_CNDNRECORD_CRITERIA_HEADER type TY_CNDNRECD_CRITRA_HDR_TECH_S
      !ET_CNDNRECORD_CRITERIA_ITEM type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_ITM_TECH_T .
  methods CHECK
    importing
      !IS_CNDNRECORD_CRITERIA_HEADER type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_HEADER_S
      !IT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods GET_CONDITIONTABLE_NAME
    importing
      !IT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T
    exporting
      !ET_CNDNRECORD_CRITERIA_ITEM type TY_CNDNRECD_CRITRA_ITEM_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CONVERT_WHERE_FOR_CNDNRECD
    importing
      !IT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T
    exporting
      !EV_WHERE type STRING
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods GET_ORDERBY_FIELD
    importing
      !IT_CNDNRECORD_ITM_TECH_FIELD type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_ITM_TECH_T
      !IS_CNDNRECORD_QUERY_OPTION type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_QUERY_OPTION_S
    exporting
      !ET_CNDNRECORD_ORDERBY_FIELD type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_ORDERBY_FIELD_T
      !ET_ORDERBY_FIELD type IF_CND_MAINT_LTD_TYPES=>TY_CONDITION_ORDERBY_FIELD_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods FILTER_CONDITION_RECORDS
    importing
      !IS_CNDNRECORD_QUERY_OPTION type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_QUERY_OPTION_S
      !IS_CNDNRECORD_COUNT type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_COUNT_S
      !IT_CNDNRECORD_ORDERBY_FIELD type IF_CND_MAINT_LTD_TYPES=>TY_CONDITION_ORDERBY_FIELD_T
    exporting
      !ES_QUERY_OPTION_RESPONSE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_QUERY_OPTION_RESPONSE_S
    changing
      !CT_CNDN_VALDTY_TECH type STANDARD TABLE
      !CT_KNUMH type CNDT_KNUMH_SORTED .
  methods FILTER_CRITERIA_ITEM
    importing
      !IT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T
    exporting
      !ET_CNDNRECORD_CRITERIA_ITEM type TY_CNDNRECD_CRITRA_ITEM_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods DELETE_BLOCKED_PARTNERS
    changing
      !CT_CNDN_VALDTY type STANDARD TABLE
      !CT_KNUMH type CNDT_KNUMH_SORTED .
  methods VERIFY_PARTNERS
    importing
      !IV_FIELDNAME type CNDS_FIELD_NAME_VALUE-FIELDNAME
      !IV_FIELDVALUE type CNDS_FIELD_NAME_VALUE-FIELDVALUE
      !IV_KVEWE type KVEWE
      !IV_KOTABNR type KOTABNR
    exporting
      !EV_BLOCKED type XFELD
    changing
      !CT_BLOCKED_PARTNERS type CNDT_FIELD_NAME_VALUE
      !CT_PASSED_PARTNERS type CNDT_FIELD_NAME_VALUE .
  methods RAISE_PRCG_CNDN_EXCEPTION
    importing
      !IX_EXCEPTION type ref to CX_PRCG_CNDNRECORD_EXCEPTION
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods DELETE_RECORD
    importing
      !IV_SYNC type ABAP_BOOL
    exporting
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_DELETION_T optional
      !CT_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_TEXT_DELETION_T optional
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SUPPLEMENT_DELETION_T optional
      !CT_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SUPLMNT_TXT_DELETION_T optional
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SCALE_DELETION_T optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods UPDATE_RECORD
    importing
      !IV_SYNC type ABAP_BOOL
    exporting
      !ER_COND_RECORD type ref to DATA
      !ER_COND_SCALE type ref to DATA
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
      !CT_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T optional
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T optional
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !CT_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T optional
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CREATE_RECORD
    importing
      !IV_SYNC type ABAP_BOOL
    exporting
      !ER_COND_RECORD type ref to DATA
      !ER_COND_SCALE type ref to DATA
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
      !ET_CNDN_RECORD_MAPPING type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_MAPPING_T
    changing
      !CT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
      !CT_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T optional
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T optional
      !CT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !CT_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T optional
      !CT_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T optional
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods GET_RECORD
    importing
      !IS_CNDNRECORD_CRITERIA_HEADER type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_HEADER_S optional
      !IT_CNDNRECORD_CRITERIA_ITEM type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_CRITERIA_ITEM_T
      !IS_CNDNRECORD_QUERY_OPTION type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDNRECD_QUERY_OPTION_S optional
    exporting
      !ET_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T
      !ET_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T
      !ET_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T
      !ET_CONDITION_SCALE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SCALE_T
      !ET_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T
      !ET_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T
      !ES_CNDN_QUERY_OPTION_RESPONSE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_QUERY_OPTION_RESPONSE_S
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CONVERT_LTD_API_MESSAGE
    importing
      !IR_COND_RECORD type ref to DATA optional
    exporting
      !ET_MESSAGE type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_MESSAGE_T
    changing
      !CT_RETURN type BAPIRET2_T .
  methods CONVERT_BUSINESSPARTNER
    changing
      !CR_CNDN_VALIDITY type ref to DATA .
  methods CONVERT_WBSELEMENT_EXT2INT
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CONVERT_WBSELEMENT_INT2EXT
    changing
      !CT_CONDITION_VALIDITY type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_VALIDITY_ENH_T .
  methods CONVERT_TEXT_EXT2INT_UPDATE
    importing
      !IT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_T optional
      !IT_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_RECORD_TEXT_T optional
      !IT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_T optional
      !IT_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CONDITION_SUPPLEMENT_TEXT_T optional
    exporting
      !ET_CONDITION_TEXT type COND_KONPTDB_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods CONVERT_TEXT_EXT2INT_DELETE
    importing
      !IT_CONDITION_RECORD type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_DELETION_T optional
      !IT_CONDITION_RECORD_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_RECORD_TEXT_DELETION_T optional
      !IT_CONDITION_SUPPLEMENT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SUPPLEMENT_DELETION_T optional
      !IT_CONDITION_SUPPLEMENT_TEXT type IF_SLSPRCG_CNDNRECD_API_TYPES=>TY_CNDN_SUPLMNT_TXT_DELETION_T optional
    exporting
      !ET_CONDITION_TEXT type COND_KONPTDB_T
    raising
      CX_PRCG_CNDNRECORD_EXCEPTION .
  methods QUERY
    importing
      !IS_CNDN_CRITERIA_HEADER type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_HDR_TECH_S
      !IT_CNDN_CRITERIA_ITEM type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_CRITRA_ITM_TECH_T
      !IS_T681 type T681
      !IT_CNDN_ORDERBY type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_ORDERBY_FIELD_T
      !IS_CNDN_QUERY_OPTION type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_QUERY_OPTION_S
    exporting
      !ER_CNDN_VALIDITY type ref to DATA
      !ET_KNUMH type CNDT_KNUMH_SORTED
      !ES_CNDN_COUNT type IF_CND_MAINT_LTD_TYPES=>TY_CNDNRECD_COUNT_S .
ENDCLASS.



CLASS ZCL_SLSPRCG_CNDNRECORD_API IMPLEMENTATION.


  METHOD VERIFY_PARTNERS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA:ls_partner          TYPE cnds_field_name_value,
         lv_blocked          TYPE xfeld,
         lv_field            TYPE cnds_field_name_value-fieldname,
         lv_value            TYPE cnds_field_name_value-fieldvalue,
         ls_condition_record TYPE cnds_condition_record_usg_a.

    READ TABLE ct_passed_partners WITH KEY fieldname  = iv_fieldname
                                           fieldvalue = iv_fieldvalue TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      ls_condition_record = VALUE #( kvewe = iv_kvewe  kotabnr = iv_kotabnr
                                     key_fields = VALUE #( (  fieldname = iv_fieldname  fieldvalue = iv_fieldvalue ) )
                                   ).

      mo_blocked_partners->is_partner_blocked( EXPORTING
                                                 is_condition_record = ls_condition_record
                                               IMPORTING
                                                 ev_blocked          = lv_blocked
                                                 ev_field            = lv_field
                                                 ev_value            = lv_value  ).
      IF lv_blocked IS NOT INITIAL.
        ls_partner-fieldname  = lv_field.
        ls_partner-fieldvalue = lv_value.
        COLLECT ls_partner INTO ct_blocked_partners.
      ELSE.
        ls_partner-fieldname  = iv_fieldname.
        ls_partner-fieldvalue = iv_fieldvalue.
        COLLECT ls_partner INTO ct_passed_partners.
      ENDIF.

      ev_blocked = lv_blocked.
    ENDIF.
  ENDMETHOD.


 METHOD UPDATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
   DATA:lr_record         TYPE REF TO data,
        lr_validity       TYPE REF TO data,
        lr_supplement     TYPE REF TO data,
        lr_scale          TYPE REF TO data,
        lt_original_scale TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
        lt_message        TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t.

   CLEAR:er_cond_record,er_cond_scale,et_message.
   TRY.
       convert_wbselement_ext2int(
         CHANGING
           ct_condition_validity = ct_condition_validity
       ).
     CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.

*  Get the existing scale data
   APPEND LINES OF ct_condition_scale TO lt_original_scale.
   SORT lt_original_scale BY conditionrecord ASCENDING
                             conditionsequentialnumber ASCENDING.
   DELETE ADJACENT DUPLICATES FROM lt_original_scale COMPARING conditionrecord conditionsequentialnumber.
   IF lt_original_scale IS NOT INITIAL.
     SELECT * FROM a_slsprcgcndnrecordscale INTO TABLE @DATA(lt_condition_scale)
        FOR ALL ENTRIES IN @lt_original_scale
      WHERE conditionrecord = @lt_original_scale-conditionrecord
        AND conditionsequentialnumber = @lt_original_scale-conditionsequentialnumber.

     SORT lt_condition_scale BY conditionrecord ASCENDING
                                conditionsequentialnumber ASCENDING
                                conditionscaleline ASCENDING.
     DATA(lt_scale_db) = lt_condition_scale.
     LOOP AT ct_condition_scale INTO DATA(ls_scale).
       READ TABLE lt_condition_scale WITH KEY conditionrecord           = ls_scale-conditionrecord
                                              conditionsequentialnumber = ls_scale-conditionsequentialnumber
                                              conditionscaleline        = ls_scale-conditionscaleline
                                     TRANSPORTING NO FIELDS BINARY SEARCH.
       IF sy-subrc = 0.
         DELETE lt_scale_db WHERE conditionrecord           = ls_scale-conditionrecord
                              AND conditionsequentialnumber = ls_scale-conditionsequentialnumber
                              AND conditionscaleline        = ls_scale-conditionscaleline.
       ELSE.
         RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
           MESSAGE e047(prcg_cndnrecord_api) WITH ls_scale-conditionrecord
                                                  ls_scale-conditionsequentialnumber
                                                  ls_scale-conditionscaleline.
       ENDIF.
     ENDLOOP.
     APPEND LINES OF lt_scale_db TO ct_condition_scale.
   ENDIF.
   FREE: lt_original_scale,lt_condition_scale,lt_scale_db.

   GET REFERENCE OF ct_condition_record INTO lr_record.
   GET REFERENCE OF ct_condition_validity INTO lr_validity.
   GET REFERENCE OF ct_condition_supplement INTO lr_supplement.
   GET REFERENCE OF ct_condition_scale INTO lr_scale.

*  Updating data relevant validity check
   TRY .
       mo_srv_facade->check(
         EXPORTING
           iv_updkz      = if_prcg_cndnrecd_service=>c_updkz_u "'U'
           iv_kappl      = if_prcg_cndnrecd_service=>c_kappl_v "'V'
         CHANGING
           cr_record     = lr_record
           cr_validity   = lr_validity
           cr_supplement = lr_supplement
           cr_scale      = lr_scale
       ).
     CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.

*  Prepare importing data for LTD API save method
   TRY.
       mo_srv_facade->prepare_update_record(
         EXPORTING
           ir_condition_record     = lr_record
           ir_condition_validity   = lr_validity
           ir_condition_supplement = lr_supplement
           ir_condition_scale      = lr_scale
         IMPORTING
           er_cond_record          = er_cond_record
           er_cond_scale           = er_cond_scale
           er_internal_record      = DATA(lr_internal_record)
           er_internal_validity    = DATA(lr_internal_validity)
           er_internal_supplement  = DATA(lr_internal_supplement)
           er_internal_scale       = DATA(lr_internal_scale)
       ).
     CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.

   DATA lt_condition_text  TYPE cond_konptdb_t.
   DATA lr_condition_text  TYPE REF TO data.

   CALL METHOD me->convert_text_ext2int_update
     EXPORTING
       it_condition_record_text     = ct_condition_record_text
       it_condition_supplement_text = ct_condition_supplement_text
     IMPORTING
       et_condition_text            = lt_condition_text.

   IF lt_condition_text IS NOT INITIAL.
     GET REFERENCE OF lt_condition_text INTO lr_condition_text.
   ENDIF.

*  Only text update
   IF  ct_condition_record IS INITIAL
   AND ct_condition_supplement IS INITIAL
   AND lt_condition_text IS NOT INITIAL.
     TEST-SEAM save_cond_text_only2.
       mo_cond_db->save_condition_text_db(
         CHANGING
           ct_konpt = lt_condition_text
       ).
     END-TEST-SEAM.
     RETURN.
   ENDIF.

*  Call LTD API save method to create condition record
   mo_ltd_api->save(
     EXPORTING
       iv_sync                = iv_sync
       iv_check_records       = abap_true
     IMPORTING
       et_return              = DATA(lt_ret)
       et_adj_cndn_overlap    = DATA(lt_adj_cndn_overlap)
       et_origl_cndn_overlap  = DATA(lt_origl_cndn_overlap)
     CHANGING
       cr_cond_record         = er_cond_record
       cr_cond_scale          = er_cond_scale
       cr_cond_text           = lr_condition_text
       ).

*  Get LTD API returned messages
   REFRESH et_message.
   convert_ltd_api_message(
     EXPORTING
       ir_cond_record = er_cond_record
     IMPORTING
       et_message     = et_message
     CHANGING
       ct_return      = lt_ret   " Return parameter table
   ).

*  LTD API returned error message handing
   LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                       OR type = if_xo_const_message=>error.
     RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
       MESSAGE ID ls_ret-id
       TYPE ls_ret-type
       NUMBER ls_ret-number
       WITH ls_ret-message_v1
       ls_ret-message_v2
       ls_ret-message_v3
       ls_ret-message_v4.
   ENDLOOP.

*  Message handling
   REFRESH lt_message.
   mo_srv_facade->handle_message(
     EXPORTING
       it_origl_cndn_overlap = lt_origl_cndn_overlap
       it_adj_cndn_overlap   = lt_adj_cndn_overlap
     RECEIVING
       et_message            = lt_message
   ).
   APPEND LINES OF lt_message TO et_message.

*  Convert updated data from internal to external
   mo_srv_facade->convert_record(
     EXPORTING
       ir_cond_record          = er_cond_record
       ir_cond_scale           = er_cond_scale
     IMPORTING
       er_condition_record     = lr_record
       er_condition_validity   = lr_validity
       er_condition_supplement = lr_supplement
       er_condition_scale      = lr_scale
     CHANGING
       cr_internal_record      = lr_internal_record
       cr_internal_validity    = lr_internal_validity
       cr_internal_supplement  = lr_internal_supplement
       cr_internal_scale       = lr_internal_scale ).

   ASSIGN lr_record->* TO FIELD-SYMBOL(<ft_record>).
   ASSIGN lr_validity->* TO FIELD-SYMBOL(<ft_validity>).
   ASSIGN lr_supplement->* TO FIELD-SYMBOL(<ft_supplement>).
   ASSIGN lr_scale->* TO FIELD-SYMBOL(<ft_scale>).
   IF <ft_record> IS ASSIGNED.
     ct_condition_record     = <ft_record>.
   ENDIF.
   IF <ft_validity> IS ASSIGNED.
     ct_condition_validity   = <ft_validity>.
   ENDIF.
   IF <ft_supplement> IS ASSIGNED.
     ct_condition_supplement = <ft_supplement>.
   ENDIF.
   IF <ft_scale> IS ASSIGNED.
     ct_condition_scale      = <ft_scale>.
   ENDIF.

   convert_wbselement_int2ext(
       CHANGING
         ct_condition_validity = ct_condition_validity
     ).
 ENDMETHOD.


  METHOD RAISE_PRCG_CNDN_EXCEPTION.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
      MESSAGE ID ix_exception->if_t100_message~t100key-msgid
      TYPE ix_exception->if_t100_dyn_msg~msgty
      NUMBER ix_exception->if_t100_message~t100key-msgno
      WITH ix_exception->if_t100_dyn_msg~msgv1
      ix_exception->if_t100_dyn_msg~msgv2
      ix_exception->if_t100_dyn_msg~msgv3
      ix_exception->if_t100_dyn_msg~msgv4.
  ENDMETHOD.


  METHOD IF_SLSPRCG_CNDNRECD_API~UPDATE_CONDITION_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CLEAR:et_message.
    TRY.
        update_record(
          EXPORTING
            iv_sync                       = iv_sync
          IMPORTING
            er_cond_record                = mr_cond_record
            er_cond_scale                 = mr_cond_scale
            et_message                    = et_message
          CHANGING
            ct_condition_record           = ct_condition_record
            ct_condition_record_text      = ct_condition_record_text
            ct_condition_validity         = ct_condition_validity_enh
            ct_condition_supplement       = ct_condition_supplement
            ct_condition_supplement_text  = ct_condition_supplement_text
            ct_condition_scale            = ct_condition_scale
        ).
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.
  ENDMETHOD.


METHOD IF_SLSPRCG_CNDNRECD_API~GET_PRCG_VALIDITIES.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
  IF et_condition_record IS SUPPLIED.
    mv_supplied_record = abap_true.
  ELSE.
    mv_supplied_record = abap_false.
  ENDIF.

  IF et_condition_record_text IS SUPPLIED.
    mv_supplied_record_text = abap_true.
  ELSE.
    mv_supplied_record_text = abap_false.
  ENDIF.

  IF et_condition_supplement IS SUPPLIED.
    mv_supplied_supplement = abap_true.
  ELSE.
    mv_supplied_supplement = abap_false.
  ENDIF.

  IF et_condition_supplement_text IS SUPPLIED.
    mv_supplied_supplement_text = abap_true.
  ELSE.
    mv_supplied_supplement_text = abap_false.
  ENDIF.

  IF et_condition_scale IS SUPPLIED.
    mv_supplied_scale = abap_true.
  ELSE.
    mv_supplied_scale = abap_false.
  ENDIF.

  TRY.
      get_record(
        EXPORTING
          is_cndnrecord_criteria_header = is_cndnrecord_criteria_header
          it_cndnrecord_criteria_item   = it_cndnrecord_criteria_item
          is_cndnrecord_query_option    = is_cndnrecord_query_option
        IMPORTING
          et_condition_validity         = et_condition_validity_enh
          et_condition_record           = et_condition_record
          et_condition_record_text      = et_condition_record_text
          et_condition_scale            = et_condition_scale
          et_condition_supplement       = et_condition_supplement
          et_condition_supplement_text  = et_condition_supplement_text
          es_cndn_query_option_response = es_cndn_query_option_response
      ).
    CATCH cx_prcg_cndnrecord_exception INTO DATA(lr_ex).
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE ID lr_ex->if_t100_message~t100key-msgid
        TYPE lr_ex->if_t100_dyn_msg~msgty
        NUMBER lr_ex->if_t100_message~t100key-msgno
        WITH lr_ex->if_t100_dyn_msg~msgv1
        lr_ex->if_t100_dyn_msg~msgv2
        lr_ex->if_t100_dyn_msg~msgv3
        lr_ex->if_t100_dyn_msg~msgv4.
  ENDTRY.
ENDMETHOD.


METHOD IF_SLSPRCG_CNDNRECD_API~GET_CONDITION_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
  IF et_condition_record IS SUPPLIED.
    mv_supplied_record = abap_true.
  ELSE.
    mv_supplied_record = abap_false.
  ENDIF.

  IF et_condition_record_text IS SUPPLIED.
    mv_supplied_record_text = abap_true.
  ELSE.
    mv_supplied_record_text = abap_false.
  ENDIF.

  IF et_condition_supplement IS SUPPLIED.
    mv_supplied_supplement = abap_true.
  ELSE.
    mv_supplied_supplement = abap_false.
  ENDIF.

  IF et_condition_supplement_text IS SUPPLIED.
    mv_supplied_supplement_text = abap_true.
  ELSE.
    mv_supplied_supplement_text = abap_false.
  ENDIF.

  IF et_condition_scale IS SUPPLIED.
    mv_supplied_scale = abap_true.
  ELSE.
    mv_supplied_scale = abap_false.
  ENDIF.

  TRY.
      get_record(
        EXPORTING
          is_cndnrecord_criteria_header = is_cndnrecord_criteria_header
          it_cndnrecord_criteria_item   = it_cndnrecord_criteria_item
          is_cndnrecord_query_option    = is_cndnrecord_query_option
        IMPORTING
          et_condition_validity         = et_condition_validity_enh
          et_condition_record           = et_condition_record
          et_condition_record_text      = et_condition_record_text
          et_condition_scale            = et_condition_scale
          et_condition_supplement       = et_condition_supplement
          et_condition_supplement_text  = et_condition_supplement_text
          es_cndn_query_option_response = es_cndn_query_option_response
      ).
    CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex).
      raise_prcg_cndn_exception( lx_ex ).
  ENDTRY.
ENDMETHOD.


  METHOD IF_SLSPRCG_CNDNRECD_API~DELETE_CONDITION_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CLEAR: et_message.
    TRY.
        delete_record(
          EXPORTING
            iv_sync                       = iv_sync
          IMPORTING
            et_message                    = et_message
          CHANGING
            ct_condition_record           = ct_condition_record
            ct_condition_record_text      = ct_condition_record_text
            ct_condition_supplement       = ct_condition_supplement
            ct_condition_supplement_text  = ct_condition_supplement_text
            ct_condition_scale            = ct_condition_scale

          ).

      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

  ENDMETHOD.


  METHOD IF_SLSPRCG_CNDNRECD_API~CREATE_CONDITION_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CLEAR:et_message.
    TRY.
        create_record(
          EXPORTING
            iv_sync                       = iv_sync
          IMPORTING
            er_cond_record                = mr_cond_record
            er_cond_scale                 = mr_cond_scale
            et_message                    = et_message
            et_cndn_record_mapping        = et_cndn_record_mapping
          CHANGING
            ct_condition_record           = ct_condition_record
            ct_condition_record_text      = ct_condition_record_text
            ct_condition_validity         = ct_condition_validity_enh
            ct_condition_supplement       = ct_condition_supplement
            ct_condition_supplement_text  = ct_condition_supplement_text
            ct_condition_scale            = ct_condition_scale
        ).
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
        raise_prcg_cndn_exception( lx_ex ).
    ENDTRY.

  ENDMETHOD.


  METHOD GET_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
****************************************************************************************
* Public API provides functionality to search validity dynamically by search criterial
* and additional information scales/supplement/conditionrecord.
* Condition table is not mandatory field, and can be determined by search criterial
* Application is mandatory field to identify search area is from SD or Purchasing
* Process steps:
* 1. Convert GFN to technical fields for searching purpose
* 2. Identify A tabls via search criterial
* 3. Consolidate search criterial by A table to improve performance
* 4. QUERY method to search data(including deleted record/ authorization data)
* 5. Get additional data scales/supplement/conditionrecord
* 6. Convert technical fields to GFN as output
****************************************************************************************
    DATA:lt_knumh                     TYPE cndt_knumh_sorted,
         lt_knumh_partial             TYPE cndt_knumh_sorted,
         lt_cndn_itm_tech_field       TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_critra_itm_tech_t,
         lt_cndn_itm_tech_field_group TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_critra_itm_tech_t,
         ls_cndn_hdr_tech             TYPE ty_cndnrecd_critra_hdr_tech_s,
         ls_cndn_hdr_appl_tech        TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_critra_hdr_tech_s,  " with application field
         lt_cndn_valdty_tech          TYPE ty_sls_cndn_validity_enh_t,
         lr_cndn_valdty_tech          TYPE REF TO data,
         ls_cndn_count                TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_count_s,
         ls_cndn_count_total          TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_count_s,
         lt_t681                      TYPE TABLE OF t681,
         lv_tabix                     TYPE syst_tabix,
         lt_item                      TYPE ty_cndnrecd_critra_item_t,
         lt_item_fields               TYPE ty_cndnrecd_critra_item_t,
         ls_item                      TYPE LINE OF ty_cndnrecd_critra_item_t,
         ls_option                    TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
         ls_option_original           TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_query_option_s,
         lt_cndnrecord_orderby_ori    TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_orderby_field_t,
         lt_condition_record          TYPE if_cnd_maint_ltd_types=>ty_sales_record_t,
         lt_condition_record_text     TYPE if_cnd_maint_ltd_types=>ty_sales_record_text_t,
         lt_condition_supplement      TYPE if_cnd_maint_ltd_types=>ty_sales_suplmnt_t,
         lt_condition_supplement_text TYPE if_cnd_maint_ltd_types=>ty_sales_suplmnt_text_t,
         lT_CONDITION_SCALE           TYPE if_cnd_maint_ltd_types=>ty_sales_scales_t,
         lr_cndn_validity             TYPE REF TO data.

    FIELD-SYMBOLS:
      <fs_cndn_valdty_tech> TYPE STANDARD TABLE.


    " Importing mandatory fields check
    TRY.
        check(
          EXPORTING
            is_cndnrecord_criteria_header = is_cndnrecord_criteria_header
            it_cndnrecord_criteria_item   = it_cndnrecord_criteria_item
        ).
      CATCH cx_prcg_cndnrecord_exception INTO DATA(lr_ex). " Exception for Condition Public API
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE ID lr_ex->if_t100_message~t100key-msgid
          TYPE lr_ex->if_t100_dyn_msg~msgty
          NUMBER lr_ex->if_t100_message~t100key-msgno
          WITH lr_ex->if_t100_dyn_msg~msgv1
          lr_ex->if_t100_dyn_msg~msgv2
          lr_ex->if_t100_dyn_msg~msgv3
          lr_ex->if_t100_dyn_msg~msgv4.
    ENDTRY.

    LOOP AT it_cndnrecord_criteria_item INTO DATA(ls_nitem)
                                        WHERE NOT conditionfieldselectionoption IS INITIAL.
      ls_item-conditionfieldselectionoption = ls_nitem-conditionfieldselectionoption.
      APPEND ls_item TO lt_item.
    ENDLOOP.
    lt_item_fields = lt_item.

    " Check mapping and allow fields
    IF NOT lt_item IS INITIAL.
      TRY.
          mo_util->check_fields(
           EXPORTING
             is_cndnrecd_h            = VALUE #( kappl = if_cnd_maint_ltd_types=>c_kappl_v )
             it_cndnrecd_i            = lt_item
             is_cndnrecd_query_option = is_cndnrecord_query_option
          ).
        CATCH cx_cnd_maint_ltd_exception INTO DATA(lr_exc). " Exceptions for Condition Maintenance (limited)
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
            MESSAGE ID lr_exc->if_t100_message~t100key-msgid
            TYPE lr_exc->if_t100_dyn_msg~msgty
            NUMBER lr_exc->if_t100_message~t100key-msgno
            WITH lr_exc->if_t100_dyn_msg~msgv1
            lr_exc->if_t100_dyn_msg~msgv2
            lr_exc->if_t100_dyn_msg~msgv3
            lr_exc->if_t100_dyn_msg~msgv4.
      ENDTRY.
      FREE lt_item.
    ENDIF.

    " Filter importing item selection fields
    TRY.
        filter_criteria_item(
          EXPORTING
            it_cndnrecord_criteria_item = it_cndnrecord_criteria_item
          IMPORTING
            et_cndnrecord_criteria_item = lt_item
        ).
      CATCH cx_prcg_cndnrecord_exception INTO lr_ex. " Exception for Condition Public API
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE ID lr_ex->if_t100_message~t100key-msgid
          TYPE lr_ex->if_t100_dyn_msg~msgty
          NUMBER lr_ex->if_t100_message~t100key-msgno
          WITH lr_ex->if_t100_dyn_msg~msgv1
          lr_ex->if_t100_dyn_msg~msgv2
          lr_ex->if_t100_dyn_msg~msgv3
          lr_ex->if_t100_dyn_msg~msgv4.
    ENDTRY.


    " Convert GFN to technical fields in the structure
    convert_ext_to_int_structure(
      EXPORTING
        is_cndnrecord_criteria_header       = is_cndnrecord_criteria_header
        it_cndnrecord_criteria_item         = lt_item
      IMPORTING
        es_cndnrecord_criteria_header       = ls_cndn_hdr_tech            " Converted technical item query
        et_cndnrecord_criteria_item         = lt_cndn_itm_tech_field
        ).
    FREE lt_item.

    " Convert GFN in condition selection fields to technical fields for searching
    mo_util->map_glob_fld_to_komg(
       CHANGING
         ct_glob_komg_fld = lt_cndn_itm_tech_field
         ).

    " Identify condition table via condition selection fields
    MOVE-CORRESPONDING ls_cndn_hdr_tech TO ls_cndn_hdr_appl_tech.
    ls_cndn_hdr_appl_tech-kappl = if_cnd_maint_ltd_types=>c_kappl_v. "'V'.

    TRY.
        mo_util->get_cndntable_by_fields(
          EXPORTING
            is_cndnrecd_h = ls_cndn_hdr_appl_tech
          IMPORTING
            et_t681       = lt_t681
          CHANGING
            ct_cndnrecd_i = lt_cndn_itm_tech_field
        ).
      CATCH cx_cnd_maint_ltd_exception INTO lr_exc. " Exceptions for Condition Maintenance (limited)
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE ID lr_exc->if_t100_message~t100key-msgid
          TYPE lr_exc->if_t100_dyn_msg~msgty
          NUMBER lr_exc->if_t100_message~t100key-msgno
          WITH lr_exc->if_t100_dyn_msg~msgv1
          lr_exc->if_t100_dyn_msg~msgv2
          lr_exc->if_t100_dyn_msg~msgv3
          lr_exc->if_t100_dyn_msg~msgv4.
    ENDTRY.

    " Get Orderby fields according to identified condition tables
    IF is_cndnrecord_query_option-prcgqueryoptionorderby IS NOT INITIAL.
      get_orderby_field( EXPORTING
                           it_cndnrecord_itm_tech_field = lt_cndn_itm_tech_field
                           is_cndnrecord_query_option   = is_cndnrecord_query_option
                         IMPORTING
                           et_cndnrecord_orderby_field  = DATA(lt_cndnrecord_orderby_field)
                           et_orderby_field             = DATA(lt_orderby_field)
                       ).
    ENDIF.

    ls_option = is_cndnrecord_query_option.
    IF ls_option-prcgqueryoptiontop < 0.
      CLEAR ls_option-prcgqueryoptiontop.
    ENDIF.
    IF ls_option-prcgqueryoptionskip < 0.
      CLEAR ls_option-prcgqueryoptionskip.
    ENDIF.
    ls_option_original = ls_option.

    " Sort the filter condition table result
    SORT lt_cndn_itm_tech_field BY kotabnr.
    DESCRIBE TABLE lt_cndn_itm_tech_field LINES DATA(lv_lines).

    " Consider the BP fields as orderby:
    " get all the results without orderby and skip, top, after that, do the sort, top, skip
    mo_dep->get_bp_mapping(
      IMPORTING
        et_bp_mapping = DATA(lt_bp_mapping)
    ).

    LOOP AT lt_orderby_field INTO DATA(ls_orderby_field).
      READ TABLE lt_bp_mapping WITH KEY ext_fieldname = ls_orderby_field-sortfield TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        CLEAR:ls_option-prcgqueryoptionorderby,ls_option-prcgqueryoptiontop,ls_option-prcgqueryoptionskip.
        lt_cndnrecord_orderby_ori = lt_cndnrecord_orderby_field.
        CLEAR:lt_cndnrecord_orderby_field.
      ENDIF.
    ENDLOOP.

    mo_dep->get_wbs_mapping(
      IMPORTING
        et_wbs_mapping = DATA(lt_wbs_mapping)
    ).

    LOOP AT lt_orderby_field INTO ls_orderby_field.
      READ TABLE lt_wbs_mapping WITH KEY ext_fieldname = ls_orderby_field-sortfield TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        CLEAR:ls_option-prcgqueryoptionorderby,ls_option-prcgqueryoptiontop,ls_option-prcgqueryoptionskip.
        lt_cndnrecord_orderby_ori = lt_cndnrecord_orderby_field.
        CLEAR:lt_cndnrecord_orderby_field.
      ENDIF.
    ENDLOOP.


    " Call LTD API QUERY - Consolidate all the conditions from the SAME condition table
    LOOP AT lt_cndn_itm_tech_field ASSIGNING FIELD-SYMBOL(<fs_cndn_tech_field>).

      " Count current table index
      lv_tabix = sy-tabix.

      " Construct the group selection option
      IF lt_cndn_itm_tech_field_group IS INITIAL.
        APPEND <fs_cndn_tech_field> TO lt_cndn_itm_tech_field_group.

      ELSE.
        READ TABLE lt_cndn_itm_tech_field_group ASSIGNING FIELD-SYMBOL(<fs_field_group>)
                                                WITH KEY kotabnr = <fs_cndn_tech_field>-kotabnr.
        IF sy-subrc = 0.
          APPEND <fs_cndn_tech_field> TO lt_cndn_itm_tech_field_group.

        ELSE.

          " Find current condition table number
          READ TABLE lt_cndn_itm_tech_field_group ASSIGNING FIELD-SYMBOL(<fs_cndn_tech_field_group>) INDEX 1.    " One condition table one group with multiple records
          IF sy-subrc = 0.

            " Get A table name from T681
            READ TABLE lt_t681 ASSIGNING FIELD-SYMBOL(<fs_t681>)
                                WITH KEY kvewe = c_pricing_usage
                                         kotabnr = <fs_cndn_tech_field_group>-kotabnr.

            IF sy-subrc = 0.
              CLEAR ls_cndn_count.
              query(
                EXPORTING
                  is_cndn_criteria_header = ls_cndn_hdr_appl_tech
                  it_cndn_criteria_item   = lt_cndn_itm_tech_field_group
                  is_t681                 = <fs_t681>                 " Conditions: Structures
                  it_cndn_orderby         = lt_cndnrecord_orderby_field
                  is_cndn_query_option    = ls_option
                IMPORTING
                  er_cndn_validity        = lr_cndn_valdty_tech
                  et_knumh                = lt_knumh_partial                 " Condition Record Numbers
                  es_cndn_count           = ls_cndn_count
              ).
              FREE lt_cndn_itm_tech_field_group.
              APPEND <fs_cndn_tech_field> TO lt_cndn_itm_tech_field_group.

              " Instant the condition validity object
              IF lr_cndn_valdty_tech IS BOUND.
                ASSIGN lr_cndn_valdty_tech->* TO <fs_cndn_valdty_tech>.
              ENDIF.

              " Collect QUERY result
              IF NOT lt_knumh_partial IS INITIAL
              OR is_cndnrecord_query_option-queryoptioncountisset EQ abap_true.
                INSERT LINES OF lt_knumh_partial INTO TABLE lt_knumh.
                APPEND LINES OF <fs_cndn_valdty_tech> TO lt_cndn_valdty_tech.
                ls_cndn_count_total-count = ls_cndn_count_total-count + ls_cndn_count-count.
                ls_cndn_count_total-inlinecount = ls_cndn_count_total-inlinecount + ls_cndn_count-inlinecount.
                FREE:lt_knumh_partial,lr_cndn_valdty_tech.
                REFRESH:<fs_cndn_valdty_tech>.
              ENDIF.

            ELSE.
              FREE lt_cndn_itm_tech_field_group.
              APPEND <fs_cndn_tech_field> TO lt_cndn_itm_tech_field_group.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.

      IF lv_lines = lv_tabix. " Process the last record

        " Find current condition table number
        READ TABLE lt_cndn_itm_tech_field_group ASSIGNING <fs_cndn_tech_field_group> INDEX 1.
        IF sy-subrc = 0.

          " Get condition table name from T681
          READ TABLE lt_t681 ASSIGNING <fs_t681>
                              WITH KEY kvewe = c_pricing_usage
                                       kotabnr = <fs_cndn_tech_field_group>-kotabnr.
          IF sy-subrc = 0.
            CLEAR ls_cndn_count.
            query(
              EXPORTING
                is_cndn_criteria_header = ls_cndn_hdr_appl_tech
                it_cndn_criteria_item   = lt_cndn_itm_tech_field_group
                is_t681                 = <fs_t681>
                it_cndn_orderby         = lt_cndnrecord_orderby_field
                is_cndn_query_option    = ls_option
              IMPORTING
                er_cndn_validity        = lr_cndn_valdty_tech
                et_knumh                = lt_knumh_partial
                es_cndn_count           = ls_cndn_count
            ).
            FREE lt_cndn_itm_tech_field_group.

            IF lr_cndn_valdty_tech IS BOUND.
              ASSIGN lr_cndn_valdty_tech->* TO <fs_cndn_valdty_tech>.
            ENDIF.

            " Collect QUERY result
            IF NOT lt_knumh_partial IS INITIAL
            OR is_cndnrecord_query_option-queryoptioncountisset EQ abap_true.
              INSERT LINES OF lt_knumh_partial INTO TABLE lt_knumh.
              APPEND LINES OF <fs_cndn_valdty_tech> TO lt_cndn_valdty_tech.
              ls_cndn_count_total-count = ls_cndn_count_total-count + ls_cndn_count-count.
              ls_cndn_count_total-inlinecount = ls_cndn_count_total-inlinecount + ls_cndn_count-inlinecount.
              FREE:lt_knumh_partial,lr_cndn_valdty_tech.
              REFRESH:<fs_cndn_valdty_tech>.
            ENDIF.

          ELSE.
            FREE lt_cndn_itm_tech_field_group.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
    FREE lt_cndn_itm_tech_field.

    IF <fs_cndn_valdty_tech> IS ASSIGNED.
      <fs_cndn_valdty_tech> = lt_cndn_valdty_tech.
      FREE lt_cndn_valdty_tech.

      GET REFERENCE OF <fs_cndn_valdty_tech> INTO lr_cndn_validity.

**Mapping Customer to Business Partner
      convert_businesspartner(
        CHANGING
          cr_cndn_validity = lr_cndn_validity
      ).

      " Return count number and filter conditionrecords according to query option
      filter_condition_records( EXPORTING
                                  is_cndnrecord_query_option  = ls_option_original
                                  is_cndnrecord_count         = ls_cndn_count_total
                                  it_cndnrecord_orderby_field = lt_orderby_field
                                IMPORTING
                                  es_query_option_response    = es_cndn_query_option_response
                                CHANGING
                                  ct_cndn_valdty_tech         = <fs_cndn_valdty_tech>
                                  ct_knumh                    = lt_knumh
                              ).

      " Delete blocked customer/supplier
      delete_blocked_partners( CHANGING
                                 ct_cndn_valdty = <fs_cndn_valdty_tech>
                                 ct_knumh       = lt_knumh ).
    ENDIF.

    " Convert technical fields to GFN
    IF <fs_cndn_valdty_tech> IS ASSIGNED.
      et_condition_validity = <fs_cndn_valdty_tech>.
      FREE:<fs_cndn_valdty_tech>.
    ENDIF.

    convert_wbselement_int2ext(
      CHANGING
        ct_condition_validity = et_condition_validity
    ).

    " Additional call to get condition table from SCALES/SUPPLEMENT/CONDITIONRECORD
    IF lt_knumh IS NOT INITIAL.

      IF mv_supplied_record = abap_true. "et_condition_record IS SUPPLIED.
        mo_cond_db->get_sales_conditionrecord(
                      EXPORTING
                        it_knumh_sel        = lt_knumh
                      IMPORTING
                        et_condition_record = lt_condition_record ).
        MOVE-CORRESPONDING lt_condition_record to et_condition_record.
      ENDIF.

      IF mv_supplied_record_text = abap_true. "et_condition_record_text IS SUPPLIED.
        mo_cond_db->get_sales_conditionrecord_text(
                      EXPORTING
                        it_knumh_sel             = lt_knumh
                      IMPORTING
                        et_condition_record_text = lt_condition_record_text ).
        MOVE-CORRESPONDING lt_condition_record_text to et_condition_record_text.
      ENDIF.

      IF mv_supplied_supplement = abap_true. "et_condition_supplement IS SUPPLIED.
        mo_cond_db->get_sales_supplement(
                      EXPORTING
                        it_knumh_sel  = lt_knumh
                      IMPORTING
                        et_supplement = lt_condition_supplement ).
        MOVE-CORRESPONDING lt_condition_supplement to et_condition_supplement.
        IF is_cndnrecord_criteria_header-deltdconditionrecordisexcluded = abap_true.
          DELETE et_condition_supplement WHERE conditionisdeleted = abap_true.
        ENDIF.
      ENDIF.

      IF mv_supplied_supplement_text = abap_true. "et_condition_supplement_text IS SUPPLIED.
        mo_cond_db->get_sales_supplement_text(
                      EXPORTING
                        it_knumh_sel             = lt_knumh
                      IMPORTING
                        et_supplement_text = lt_condition_supplement_text ).
        MOVE-CORRESPONDING lt_condition_supplement_text to et_condition_supplement_text.
      ENDIF.

      IF mv_supplied_scale = abap_true. "et_condition_scale IS SUPPLIED.
        mo_cond_db->get_sales_scales(
                     EXPORTING
                       it_knumh_sel = lt_knumh
                     IMPORTING
                       et_scales    = lt_condition_scale ).
        MOVE-CORRESPONDING lt_condition_scale to et_condition_scale.
      ENDIF.
    ENDIF.
    FREE:lt_knumh.
  ENDMETHOD.


  METHOD GET_ORDERBY_FIELD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA:
      lt_sort_tab                  TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_selopt_t,
      ls_sort_tab                  TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_selopt_s,
      lt_glob_komg_fld             TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_critra_itm_tech_t,
      lt_fieldtab                  TYPE STANDARD TABLE OF dfies WITH NON-UNIQUE DEFAULT KEY,
      ls_cndn_query_option         TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_orderby_field_s,
      ls_orderby_field             TYPE if_cnd_maint_ltd_types=>ty_condition_orderby_field_s,
      lt_cndnrecord_itm_tech_field TYPE if_cnd_maint_ltd_types=>ty_cndnrecd_critra_itm_tech_t,
      ls_t681                      TYPE t681.

    LOOP AT is_cndnrecord_query_option-prcgqueryoptionorderby INTO DATA(ls_prcgqueryoptionorderby).
      CLEAR ls_sort_tab.
      ls_sort_tab-field_name = ls_prcgqueryoptionorderby-sortfield.
      ls_sort_tab-low        = ls_prcgqueryoptionorderby-sortsequence.
      APPEND ls_sort_tab TO lt_sort_tab.
    ENDLOOP.

    lt_glob_komg_fld = VALUE #( ( t_selopt = lt_sort_tab ) ).

*   Convert GFN to Techincal Name in query option orderby table
    mo_util->map_glob_fld_to_komg(
      CHANGING
        ct_glob_komg_fld = lt_glob_komg_fld
        ).
    REFRESH lt_sort_tab.
    lt_sort_tab = lt_glob_komg_fld[ 1 ]-t_selopt.

*   Returning orderby fields
    lt_cndnrecord_itm_tech_field = it_cndnrecord_itm_tech_field.
    SORT lt_cndnrecord_itm_tech_field BY kotabnr ASCENDING.
    DELETE ADJACENT DUPLICATES FROM lt_cndnrecord_itm_tech_field COMPARING kotabnr.
    LOOP AT lt_cndnrecord_itm_tech_field INTO DATA(ls_cndn_itm_tech_field).
      TRY.
          CLEAR ls_t681.
          ls_t681 = mo_dep->get_t681( EXPORTING
                                        iv_kvewe   = if_ct_types=>c_usage_pricing
                                        iv_kotabnr = ls_cndn_itm_tech_field-kotabnr
                                     ).
        CATCH cx_cnd_maint_ltd_exception ##NO_HANDLER.
      ENDTRY.

      TEST-SEAM get_table_field.
        REFRESH lt_fieldtab.
        CALL FUNCTION 'DDIF_NAMETAB_GET'
          EXPORTING
            tabname   = ls_t681-kotab
          TABLES
            dfies_tab = lt_fieldtab
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.
      END-TEST-SEAM.
      IF sy-subrc = 0.
        CLEAR ls_sort_tab.
        mo_dep->get_bp_mapping(
          IMPORTING
            et_bp_mapping = DATA(lt_bp_mapping)
        ).
        LOOP AT lt_sort_tab INTO ls_sort_tab.
          READ TABLE lt_fieldtab WITH KEY fieldname = ls_sort_tab-field_name TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            ls_cndn_query_option-sortfield      = ls_sort_tab-field_name.
            ls_cndn_query_option-sortsequence   = ls_sort_tab-low.
            ls_cndn_query_option-conditiontable = ls_t681-kotab.
            APPEND ls_cndn_query_option TO et_cndnrecord_orderby_field.
          ELSE.
            READ TABLE lt_bp_mapping INTO DATA(ls_bp_mapping) WITH KEY ext_fieldname = ls_sort_tab-field_name.
            IF sy-subrc = 0.
              ls_cndn_query_option-sortfield      = ls_sort_tab-field_name.
              ls_cndn_query_option-sortsequence   = ls_sort_tab-low.
              ls_cndn_query_option-conditiontable = ls_t681-kotab.
              APPEND ls_cndn_query_option TO et_cndnrecord_orderby_field.
            ENDIF.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_sort_tab INTO ls_sort_tab.
      CLEAR ls_orderby_field.
      ls_orderby_field-sortfield     = ls_sort_tab-field_name.
      ls_orderby_field-sortsequence  = ls_sort_tab-low.
      APPEND ls_orderby_field TO et_orderby_field.
    ENDLOOP.

*   Sort orderby fields
    SORT et_cndnrecord_orderby_field BY conditiontable.
  ENDMETHOD.


  METHOD GET_CONDITIONTABLE_NAME.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    " Split condition record
    CONSTANTS:c_conrec TYPE fieldname VALUE 'CONDITIONRECORD',
              c_contyp TYPE fieldname VALUE 'CONDITIONTYPE',
              c_e      TYPE sign VALUE 'E',
              c_i      TYPE sign VALUE 'I'.
    DATA:lt_konh       TYPE ty_cndnrecd_konh_t,
         lt_konh_tmp   TYPE ty_cndnrecd_konh_t,
         lt_contab     TYPE if_cnd_maint_ltd_dep=>contab_t,
         lt_contab_tmp TYPE if_cnd_maint_ltd_dep=>contab_t,
         ls_contab     TYPE LINE OF if_cnd_maint_ltd_dep=>contab_t,
         ls_item       TYPE LINE OF ty_cndnrecd_critra_item_t,
         lt_selopt     TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_selopt_t,
         ls_selopt     TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_selopt_t,
         lt_nitem      TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
         lt_nitem_tmp  TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
         ls_nitem      TYPE LINE OF if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t.

    DATA(lt_cndnrecord_criteria_item) = it_cndnrecord_criteria_item.

    LOOP AT lt_cndnrecord_criteria_item ASSIGNING FIELD-SYMBOL(<fs_item>).
      IF <fs_item>-conditionrecord IS NOT INITIAL.
        SELECT kotabnr, knumh
          FROM konh
          INTO TABLE @lt_konh_tmp
         WHERE knumh IN @<fs_item>-conditionrecord
           AND priceapprovalrequest IN @<fs_item>-priceapprovalrequest.
        APPEND LINES OF lt_konh_tmp TO lt_konh.

        IF <fs_item>-priceapprovalrequest IS NOT INITIAL.
          CLEAR: <fs_item>-conditionrecord.
          LOOP AT lt_konh_tmp INTO DATA(ls_konh_tmp).
            APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_konh_tmp-knumh ) TO <fs_item>-conditionrecord.
          ENDLOOP.
        ENDIF.

        CLEAR lt_konh_tmp.
      ENDIF.
    ENDLOOP.

    mo_dep->get_t685_t682i(
      EXPORTING
        iv_kvewe  = if_ct_types=>c_usage_pricing "'A'
        iv_kappl  = if_cnd_maint_ltd_types=>c_kappl_v "'V'
      IMPORTING
        et_contab = lt_contab
    ).
    SORT lt_contab.
    DELETE ADJACENT DUPLICATES FROM lt_contab COMPARING ALL FIELDS.

    IF mt_contab_distinct IS INITIAL.
      mt_contab_distinct = lt_contab.
      SORT mt_contab_distinct BY kotabnr.
      DELETE ADJACENT DUPLICATES FROM mt_contab_distinct COMPARING kotabnr.
    ENDIF.

**Append where condition of condition record and condition type to select option,
**consider the machenic of range table, especially sign 'E'
    LOOP AT lt_cndnrecord_criteria_item INTO ls_nitem.
      IF ls_nitem-conditionrecord IS INITIAL.
        APPEND ls_nitem TO lt_nitem.
      ELSE.
        DATA(ls_nitem_tmp) = ls_nitem.
        lt_selopt = ls_nitem_tmp-conditionfieldselectionoption.
        CLEAR ls_nitem_tmp-conditionfieldselectionoption.
        LOOP AT ls_nitem-conditionrecord INTO DATA(ls_conrec) WHERE sign = c_e.
          CLEAR ls_selopt.
          ls_selopt-prcgconditionfieldrangename   = c_conrec. "'CONDITIONRECORD'.
          ls_selopt-prcgconditionfieldrangesign   = ls_conrec-sign.
          ls_selopt-prcgconditionfieldrangeoption = ls_conrec-option.
          ls_selopt-prcgconditionfieldrangelow    = ls_conrec-low.
          ls_selopt-prcgconditionfieldrangehigh   = ls_conrec-high.
          APPEND ls_selopt TO ls_nitem_tmp-conditionfieldselectionoption.
        ENDLOOP.
        APPEND LINES OF lt_selopt TO ls_nitem_tmp-conditionfieldselectionoption.

        READ TABLE ls_nitem-conditionrecord WITH KEY sign = c_i TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          APPEND ls_nitem_tmp TO lt_nitem.
        ELSE.
          lt_selopt = ls_nitem_tmp-conditionfieldselectionoption.
          LOOP AT ls_nitem-conditionrecord INTO ls_conrec WHERE sign = c_i.
            CLEAR ls_selopt.
            ls_selopt-prcgconditionfieldrangename   = c_conrec. "'CONDITIONRECORD'.
            ls_selopt-prcgconditionfieldrangesign   = ls_conrec-sign.
            ls_selopt-prcgconditionfieldrangeoption = ls_conrec-option.
            ls_selopt-prcgconditionfieldrangelow    = ls_conrec-low.
            ls_selopt-prcgconditionfieldrangehigh   = ls_conrec-high.
            CLEAR ls_nitem_tmp-conditionfieldselectionoption.
            ls_nitem_tmp-conditionfieldselectionoption = lt_selopt.
            APPEND ls_selopt TO ls_nitem_tmp-conditionfieldselectionoption.
            APPEND ls_nitem_tmp TO lt_nitem.
          ENDLOOP.
        ENDIF.
      ENDIF.
      FREE:ls_nitem_tmp,ls_nitem,ls_selopt,lt_selopt.
    ENDLOOP.

    lt_nitem_tmp = lt_nitem.
    FREE:lt_nitem.
    LOOP AT lt_nitem_tmp INTO ls_nitem.
      IF ls_nitem-conditiontype IS INITIAL.
        APPEND ls_nitem TO lt_nitem.
      ELSE.
        ls_nitem_tmp = ls_nitem.
        lt_selopt = ls_nitem_tmp-conditionfieldselectionoption.
        CLEAR ls_nitem_tmp-conditionfieldselectionoption.
        LOOP AT ls_nitem-conditiontype INTO DATA(ls_contyp) WHERE sign = c_e.
          CLEAR ls_selopt.
          ls_selopt-prcgconditionfieldrangename   = c_contyp. "'CONDITIONTYPE'.
          ls_selopt-prcgconditionfieldrangesign   = ls_contyp-sign.
          ls_selopt-prcgconditionfieldrangeoption = ls_contyp-option.
          ls_selopt-prcgconditionfieldrangelow    = ls_contyp-low.
          ls_selopt-prcgconditionfieldrangehigh   = ls_contyp-high.
          APPEND ls_selopt TO ls_nitem_tmp-conditionfieldselectionoption.
        ENDLOOP.
        APPEND LINES OF lt_selopt TO ls_nitem_tmp-conditionfieldselectionoption.

        READ TABLE ls_nitem-conditiontype WITH KEY sign = c_i TRANSPORTING NO FIELDS.
        IF sy-subrc <> 0.
          APPEND ls_nitem_tmp TO lt_nitem.
        ELSE.
          lt_selopt = ls_nitem_tmp-conditionfieldselectionoption.
          LOOP AT ls_nitem-conditiontype INTO ls_contyp WHERE sign = c_i.
            CLEAR ls_selopt.
            ls_selopt-prcgconditionfieldrangename   = c_contyp. "'CONDITIONTYPE'.
            ls_selopt-prcgconditionfieldrangesign   = ls_contyp-sign.
            ls_selopt-prcgconditionfieldrangeoption = ls_contyp-option.
            ls_selopt-prcgconditionfieldrangelow    = ls_contyp-low.
            ls_selopt-prcgconditionfieldrangehigh   = ls_contyp-high.
            CLEAR ls_nitem_tmp-conditionfieldselectionoption.
            ls_nitem_tmp-conditionfieldselectionoption = lt_selopt.
            APPEND ls_selopt TO ls_nitem_tmp-conditionfieldselectionoption.
            APPEND ls_nitem_tmp TO lt_nitem.
          ENDLOOP.
        ENDIF.
      ENDIF.
      FREE:ls_nitem_tmp,ls_nitem,ls_selopt,lt_selopt.
    ENDLOOP.
    FREE:lt_nitem_tmp.

    LOOP AT lt_nitem INTO ls_nitem.
      CLEAR ls_item.
      IF ls_nitem-conditionrecord IS INITIAL AND ls_nitem-conditiontable IS INITIAL
        AND ls_nitem-conditiontype IS INITIAL.
        ls_item-conditionfieldselectionoption = ls_nitem-conditionfieldselectionoption.
        APPEND ls_item TO et_cndnrecord_criteria_item.
        CONTINUE.
      ENDIF.

      IF NOT ls_nitem-conditionrecord IS INITIAL.
        lt_konh_tmp = lt_konh.
        DELETE lt_konh_tmp WHERE NOT knumh IN ls_nitem-conditionrecord.
      ENDIF.
      IF NOT ls_nitem-conditiontable IS INITIAL OR NOT ls_nitem-conditiontype IS INITIAL.
        lt_contab_tmp = lt_contab.
        DELETE lt_contab_tmp WHERE NOT kotabnr IN ls_nitem-conditiontable.
        DELETE lt_contab_tmp WHERE NOT kschl IN ls_nitem-conditiontype.
      ENDIF.

      LOOP AT mt_contab_distinct INTO ls_contab.
        CLEAR ls_item.
        READ TABLE lt_konh_tmp WITH KEY kotabnr = ls_contab-kotabnr TRANSPORTING NO FIELDS.
        IF sy-subrc = 0 OR ls_nitem-conditionrecord IS INITIAL.
          READ TABLE lt_contab_tmp WITH KEY kotabnr = ls_contab-kotabnr TRANSPORTING NO FIELDS.
          IF sy-subrc = 0 OR ls_nitem-conditiontable IS INITIAL AND ls_nitem-conditiontype IS INITIAL.
            ls_item-conditiontable = ls_contab-kotabnr.
            ls_item-conditionfieldselectionoption = ls_nitem-conditionfieldselectionoption.
            APPEND ls_item TO et_cndnrecord_criteria_item.
          ENDIF.
        ENDIF.
      ENDLOOP.
      FREE:lt_konh_tmp,lt_contab_tmp,ls_item.
    ENDLOOP.
  ENDMETHOD.


  METHOD FILTER_CRITERIA_ITEM.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA:lt_fieldsopt                TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_selopt_t,
         ls_fieldsopt                LIKE LINE OF lt_fieldsopt,
         lt_criteria_item            TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
         lt_item_temp                TYPE ty_cndnrecd_critra_item_t,
         ls_item_temp                TYPE ty_cndnrecd_critra_item_s,
         lt_konh                     TYPE ty_cndnrecd_mul_konh_t,
         ls_konh                     TYPE ty_cndnrecd_mul_konh_s,
         lr_ex                       TYPE REF TO cx_prcg_cndnrecord_exception,
         lv_count                    TYPE i,
         lv_where                    TYPE string,
         lt_cndnrecord_criteria_item TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_t,
         ls_criteria_item            TYPE if_slsprcg_cndnrecd_api_types=>ty_cndnrecd_criteria_item_s,
         lv_is_all_sign_e            TYPE boolean,
         rt_req_cndn                 TYPE RANGE OF knumh.

    CONSTANTS: c_condrecord_count TYPE i VALUE 100,
               c_sign_i           TYPE tvarv_sign VALUE 'I',
               c_option_eq        TYPE tvarv_opti VALUE 'EQ',
               c_fieldname        TYPE field_name VALUE 'CONDITIONRECORD'.

    DATA:lv_defined TYPE abap_bool,
         lv_active  TYPE abap_bool.
    CONSTANTS: lc_feature_toggle_id TYPE sftgl_ft_id VALUE 'SD_PRICE_APPROVAL_BASIC_FUNCTION'.

    lv_defined = cl_feature_toggle=>is_defined( lc_feature_toggle_id ).
    lv_active  = cl_feature_toggle=>is_active( lc_feature_toggle_id ).

    TEST-SEAM feature_toggle_fine.
    END-TEST-SEAM.

* split condition record filter, ensure only one I sign in one filter
    LOOP AT it_cndnrecord_criteria_item INTO DATA(ls_cndnrecord_criteria_item).
      IF NOT ( lv_defined = abap_true AND lv_active = abap_true ).
        CLEAR ls_cndnrecord_criteria_item-priceapprovalrequest[].
      ENDIF.

      IF ls_cndnrecord_criteria_item-priceapprovalrequest[] IS NOT INITIAL.
        SELECT knumh
          FROM konh
          INTO TABLE @DATA(lt_req_cond)
         WHERE priceapprovalrequest IN @ls_cndnrecord_criteria_item-priceapprovalrequest.
        LOOP AT lt_req_cond INTO DATA(ls_req_cond).
          APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_req_cond-knumh ) TO rt_req_cndn.
        ENDLOOP.
        IF ls_cndnrecord_criteria_item-conditionrecord IS INITIAL.
          APPEND LINES OF rt_req_cndn TO ls_cndnrecord_criteria_item-conditionrecord.
          CLEAR rt_req_cndn.
        ENDIF.
      ENDIF.

      REFRESH lt_criteria_item.
      APPEND ls_cndnrecord_criteria_item TO lt_criteria_item.

      REFRESH lt_item_temp.
      CLEAR lv_count.
      DESCRIBE TABLE ls_cndnrecord_criteria_item-conditionrecord LINES lv_count.
      IF lv_count >= mv_record_count_limit. "c_condrecord_count. "CE1908 Manage Price - Sales app
        " Build where clause for condition record
        TRY.
            CLEAR lv_where.
            convert_where_for_cndnrecd(
              EXPORTING
                it_cndnrecord_criteria_item = lt_criteria_item
              IMPORTING
                ev_where                    = lv_where
                ).
          CATCH cx_prcg_cndnrecord_exception INTO lr_ex. " Exception for Condition Public API
            RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
              MESSAGE ID lr_ex->if_t100_message~t100key-msgid
              TYPE lr_ex->if_t100_dyn_msg~msgty
              NUMBER lr_ex->if_t100_message~t100key-msgno
              WITH lr_ex->if_t100_dyn_msg~msgv1
              lr_ex->if_t100_dyn_msg~msgv2
              lr_ex->if_t100_dyn_msg~msgv3
              lr_ex->if_t100_dyn_msg~msgv4.
        ENDTRY.
        IF NOT lv_where IS INITIAL.
          REFRESH lt_konh.
          SELECT knumh, kotabnr, kschl, priceapprovalrequest
            FROM konh
            INTO TABLE @lt_konh
           WHERE (lv_where).
          DELETE lt_konh WHERE NOT kotabnr IN ls_cndnrecord_criteria_item-conditiontable.
          DELETE lt_konh WHERE NOT kschl IN ls_cndnrecord_criteria_item-conditiontype.
          DELETE lt_konh WHERE NOT priceapprovalrequest IN ls_cndnrecord_criteria_item-priceapprovalrequest.

          LOOP AT lt_konh INTO ls_konh.
            CLEAR ls_item_temp.
            ls_item_temp-conditiontable = ls_konh-kotabnr.

            REFRESH lt_fieldsopt.
            lt_fieldsopt = ls_cndnrecord_criteria_item-conditionfieldselectionoption.
            CLEAR ls_fieldsopt.
            ls_fieldsopt-prcgconditionfieldrangename   = c_fieldname.
            ls_fieldsopt-prcgconditionfieldrangesign   = c_sign_i.
            ls_fieldsopt-prcgconditionfieldrangeoption = c_option_eq.
            ls_fieldsopt-prcgconditionfieldrangelow    = ls_konh-knumh.
            APPEND ls_fieldsopt TO lt_fieldsopt.

            ls_item_temp-conditionfieldselectionoption = lt_fieldsopt.
            APPEND ls_item_temp TO lt_item_temp.
          ENDLOOP.
        ENDIF.

      ELSE.
        " Get condition table name
        TRY.
            get_conditiontable_name(
              EXPORTING
                it_cndnrecord_criteria_item = lt_criteria_item
              IMPORTING
                et_cndnrecord_criteria_item = lt_item_temp
                ).
          CATCH cx_prcg_cndnrecord_exception INTO lr_ex. " Exception for Condition Public API
            RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
              MESSAGE ID lr_ex->if_t100_message~t100key-msgid
              TYPE lr_ex->if_t100_dyn_msg~msgty
              NUMBER lr_ex->if_t100_message~t100key-msgno
              WITH lr_ex->if_t100_dyn_msg~msgv1
              lr_ex->if_t100_dyn_msg~msgv2
              lr_ex->if_t100_dyn_msg~msgv3
              lr_ex->if_t100_dyn_msg~msgv4.
        ENDTRY.
      ENDIF.

      APPEND LINES OF lt_item_temp TO et_cndnrecord_criteria_item.
    ENDLOOP.

  ENDMETHOD.


  METHOD FILTER_CONDITION_RECORDS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA:lt_sort_tab  TYPE abap_sortorder_tab,
         ls_sort_tab  LIKE LINE OF lt_sort_tab,
         lv_tabix     TYPE sy-tabix,
         lt_knumh_val TYPE TABLE OF knumh_sty,
         ls_knumh_val TYPE knumh_sty.
    CONSTANTS:c_knumh TYPE field_name VALUE 'KNUMH'.
    FIELD-SYMBOLS <lv_knumh> TYPE knumh.

*   Set count number and inlinecount number
    IF is_cndnrecord_query_option-queryoptioncountisset = abap_true.
      IF is_cndnrecord_count-count <= is_cndnrecord_query_option-prcgqueryoptionskip.
        es_query_option_response-prcgconditionrecordcount = 0.
      ELSE.
        es_query_option_response-prcgconditionrecordcount = is_cndnrecord_count-count - is_cndnrecord_query_option-prcgqueryoptionskip.
        IF es_query_option_response-prcgconditionrecordcount > is_cndnrecord_query_option-prcgqueryoptiontop
        AND is_cndnrecord_query_option-prcgqueryoptiontop <> 0.
          es_query_option_response-prcgconditionrecordcount = is_cndnrecord_query_option-prcgqueryoptiontop.
        ENDIF.
      ENDIF.
    ELSEIF is_cndnrecord_query_option-queryoptioninlinecountisset = abap_true.
      es_query_option_response-prcgconditionrecordcount = is_cndnrecord_count-inlinecount.
    ENDIF.

    IF ct_cndn_valdty_tech IS NOT INITIAL.
*     Sort conditionrecords accortding to orderby fields
      IF it_cndnrecord_orderby_field IS NOT INITIAL.
        LOOP AT it_cndnrecord_orderby_field INTO DATA(ls_orderby_field).
          CLEAR ls_sort_tab.
          ls_sort_tab-name = ls_orderby_field-sortfield.
          IF ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_asc.
            ls_sort_tab-descending  = abap_false.
          ELSEIF ls_orderby_field-sortsequence = if_cnd_maint_ltd_types=>c_desc.
            ls_sort_tab-descending  = abap_true.
          ENDIF.
          APPEND ls_sort_tab TO lt_sort_tab.
        ENDLOOP.
        SORT ct_cndn_valdty_tech BY (lt_sort_tab).
      ENDIF.

*     $skip option
      IF is_cndnrecord_query_option-prcgqueryoptionskip > 0.
        CLEAR lv_tabix.
        LOOP AT ct_cndn_valdty_tech ASSIGNING FIELD-SYMBOL(<ls_cndn_valdty_tech>).
          lv_tabix = lv_tabix + 1.
          ASSIGN COMPONENT c_knumh OF STRUCTURE <ls_cndn_valdty_tech> TO <lv_knumh>.
          IF lv_tabix <= is_cndnrecord_query_option-prcgqueryoptionskip.
            DELETE ct_cndn_valdty_tech.
            CONTINUE.
          ENDIF.
          IF is_cndnrecord_query_option-prcgqueryoptiontop = 0.
            ls_knumh_val-knumh = <lv_knumh>.
            APPEND ls_knumh_val TO lt_knumh_val.
          ENDIF.
        ENDLOOP.
      ENDIF.

*     $top option
      IF is_cndnrecord_query_option-prcgqueryoptiontop > 0.
        UNASSIGN: <ls_cndn_valdty_tech>,<lv_knumh>.
        LOOP AT ct_cndn_valdty_tech ASSIGNING <ls_cndn_valdty_tech>.
          ASSIGN COMPONENT c_knumh OF STRUCTURE <ls_cndn_valdty_tech> TO <lv_knumh>.
          IF sy-tabix > is_cndnrecord_query_option-prcgqueryoptiontop.
            DELETE ct_cndn_valdty_tech.
            CONTINUE.
          ENDIF.
          ls_knumh_val-knumh = <lv_knumh>.
          APPEND ls_knumh_val TO lt_knumh_val.
        ENDLOOP.
      ENDIF.

      IF is_cndnrecord_query_option-prcgqueryoptionskip > 0 OR is_cndnrecord_query_option-prcgqueryoptiontop > 0.
        SORT lt_knumh_val BY knumh.
        DELETE ADJACENT DUPLICATES FROM lt_knumh_val COMPARING knumh.
        LOOP AT ct_knumh INTO DATA(ls_knumh).
          READ TABLE lt_knumh_val WITH KEY knumh = ls_knumh-knumh
                                  BINARY SEARCH TRANSPORTING NO FIELDS.
          IF sy-subrc <> 0.
            DELETE ct_knumh.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDMETHOD.


 METHOD DELETE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
   DATA:lr_record      TYPE REF TO data,
        lr_validity    TYPE REF TO data,
        lr_supplement  TYPE REF TO data,
        lr_scale       TYPE REF TO data,
        lr_cond_record TYPE REF TO data,
        lr_cond_scale  TYPE REF TO data,
        lt_message     TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t.

   CLEAR: et_message.

   GET REFERENCE OF ct_condition_record INTO lr_record.
   GET REFERENCE OF ct_condition_supplement INTO lr_supplement.
   GET REFERENCE OF ct_condition_scale INTO lr_scale.

*  Deletion data relevant validity check
   TRY .
       mo_srv_facade->check(
         EXPORTING
           iv_updkz      = if_prcg_cndnrecd_service=>c_updkz_d "'U'
           iv_kappl      = if_prcg_cndnrecd_service=>c_kappl_v "'V'
         CHANGING
           cr_record     = lr_record
           cr_validity   = lr_validity
           cr_supplement = lr_supplement
           cr_scale      = lr_scale
       ).
     CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.

*  Prepare importing data for LTD API save method
   TRY.
       mo_srv_facade->prepare_delete_record(
         EXPORTING
           ir_condition_record     = lr_record
           ir_condition_supplement = lr_supplement
           ir_condition_scale      = lr_scale
         IMPORTING
           er_cond_record          = lr_cond_record
           er_cond_scale           = lr_cond_scale
           er_internal_record      = DATA(lr_internal_record)
           er_internal_supplement  = DATA(lr_internal_supplement)
           er_internal_scale       = DATA(lr_internal_scale)
       ).
     CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.

   DATA lt_condition_text  TYPE cond_konptdb_t.
   DATA lr_condition_text  TYPE REF TO data.

   TEST-SEAM convert_delete_text.
   TRY.
       me->convert_text_ext2int_delete(
         EXPORTING
           it_condition_record          = ct_condition_record
           it_condition_record_text     = ct_condition_record_text
           it_condition_supplement      = ct_condition_supplement
           it_condition_supplement_text = ct_condition_supplement_text
         IMPORTING
           et_condition_text            = lt_condition_text ).
     CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
       raise_prcg_cndn_exception( lx_ex ).
   ENDTRY.
   END-TEST-SEAM.

   IF lt_condition_text IS NOT INITIAL.
     GET REFERENCE OF lt_condition_text INTO lr_condition_text.
   ENDIF.

*  Only text update
   IF  ct_condition_record IS INITIAL
   AND ct_condition_supplement IS INITIAL
   AND lt_condition_text IS NOT INITIAL.
     TEST-SEAM save_cond_text_only3.
       mo_cond_db->save_condition_text_db(
         CHANGING
           ct_konpt = lt_condition_text
       ).
     END-TEST-SEAM.
     RETURN.
   ENDIF.

*  Call LTD API save method to delete condition record
   mo_ltd_api->save(
     EXPORTING
       iv_sync          = iv_sync
       iv_check_records = abap_true
     IMPORTING
       et_return        = DATA(lt_ret)
     CHANGING
       cr_cond_record   = lr_cond_record
       cr_cond_scale    = lr_cond_scale
       cr_cond_text     = lr_condition_text
       ).

*  Get LTD API returned messages
   convert_ltd_api_message(
     EXPORTING
       ir_cond_record = lr_cond_record
     IMPORTING
       et_message     = et_message
     CHANGING
       ct_return      = lt_ret   " Return parameter table
   ).

*  LTD API returned error message handing
   LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                       OR type = if_xo_const_message=>error.
     RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
       MESSAGE ID ls_ret-id
       TYPE ls_ret-type
       NUMBER ls_ret-number
       WITH ls_ret-message_v1
       ls_ret-message_v2
       ls_ret-message_v3
       ls_ret-message_v4.
   ENDLOOP.

 ENDMETHOD.


  METHOD DELETE_BLOCKED_PARTNERS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA: lt_blocked_partners TYPE cndt_field_name_value,
          lt_passed_partners  TYPE cndt_field_name_value,
          lv_fieldname        TYPE cnds_field_name_value-fieldname,
          lv_fieldvalue       TYPE cnds_field_name_value-fieldvalue,
          lv_blocked          TYPE xfeld.
    CONSTANTS: c_kunag   TYPE cnds_field_name_value-fieldname VALUE 'KUNAG',
               c_kunnr   TYPE cnds_field_name_value-fieldname VALUE 'KUNNR',
               c_kunrg   TYPE cnds_field_name_value-fieldname VALUE 'KUNRG',
               c_kunwe   TYPE cnds_field_name_value-fieldname VALUE 'KUNWE',
               c_lifnr   TYPE cnds_field_name_value-fieldname VALUE 'LIFNR',
               c_kvewe   TYPE cnds_field_name_value-fieldname VALUE 'KVEWE',
               c_knumh   TYPE cnds_field_name_value-fieldname VALUE 'KNUMH',
               c_kotabnr TYPE cnds_field_name_value-fieldname VALUE 'KOTABNR',
               c_datbi   TYPE cnds_field_name_value-fieldname VALUE 'DATBI'.
    FIELD-SYMBOLS: <lv_kunnr>   TYPE kunnr,
                   <lv_lifnr>   TYPE lifnr,
                   <lv_kvewe>   TYPE kvewe,
                   <lv_knumh>   TYPE knumh,
                   <lv_kotabnr> TYPE kotabnr,
                   <lv_datbi>   TYPE datbi.

    DATA(lt_STACK) = cl_abap_get_call_stack=>get_call_stack( ). "CE1911 paging for APP Manage Prices - Sales
    LOOP AT lt_stack INTO DATA(ls_stack) WHERE program_info CS 'CL_SD_PRCG_CNDNRECORD_DPC'.
      DATA(lv_sls_price_app) = abap_true.
    ENDLOOP.

    LOOP AT ct_cndn_valdty ASSIGNING FIELD-SYMBOL(<ls_cndn_valdty>).
      ASSIGN COMPONENT c_knumh OF STRUCTURE <ls_cndn_valdty> TO <lv_knumh>.
      ASSIGN COMPONENT c_kvewe OF STRUCTURE <ls_cndn_valdty> TO <lv_kvewe>.
      ASSIGN COMPONENT c_kotabnr OF STRUCTURE <ls_cndn_valdty> TO <lv_kotabnr>.
      ASSIGN COMPONENT c_datbi OF STRUCTURE <ls_cndn_valdty> TO <lv_datbi>.
      DATA(lv_knumh) = <lv_knumh>.
      DATA(lv_datbi) = <lv_datbi>.

*     KUNAG
      ASSIGN COMPONENT c_kunag OF STRUCTURE <ls_cndn_valdty> TO <lv_kunnr>.
      IF <lv_kunnr> IS NOT INITIAL.
        READ TABLE lt_blocked_partners WITH KEY fieldname  = c_kunag
                                                fieldvalue = <lv_kunnr> TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          IF lv_sls_price_app = abap_true.
            CLEAR:<ls_cndn_valdty>.
            <lv_knumh> = lv_knumh.
            <lv_datbi> = lv_datbi.
          ELSE.
            DELETE ct_knumh WHERE knumh = <lv_knumh>.
            DELETE ct_cndn_valdty.
          ENDIF.
          CONTINUE.
        ELSE.
          lv_fieldname  = c_kunag.
          lv_fieldvalue = <lv_kunnr>.
          CLEAR lv_blocked.
          verify_partners( EXPORTING
                             iv_fieldname        = lv_fieldname
                             iv_fieldvalue       = lv_fieldvalue
                             iv_kvewe            = <lv_kvewe>
                             iv_kotabnr          = <lv_kotabnr>
                           IMPORTING
                             ev_blocked          = lv_blocked
                           CHANGING
                             ct_blocked_partners = lt_blocked_partners
                             ct_passed_partners  = lt_passed_partners ).
          IF lv_blocked IS NOT INITIAL.
            IF lv_sls_price_app = abap_true.
              CLEAR:<ls_cndn_valdty>.
              <lv_knumh> = lv_knumh.
              <lv_datbi> = lv_datbi.
            ELSE.
              DELETE ct_knumh WHERE knumh = <lv_knumh>.
              DELETE ct_cndn_valdty.
            ENDIF.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

*     KUNNR
      ASSIGN COMPONENT c_kunnr OF STRUCTURE <ls_cndn_valdty> TO <lv_kunnr>.
      IF <lv_kunnr> IS NOT INITIAL.
        READ TABLE lt_blocked_partners WITH KEY fieldname  = c_kunnr
                                                fieldvalue = <lv_kunnr> TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          IF lv_sls_price_app = abap_true.
            CLEAR:<ls_cndn_valdty>.
            <lv_knumh> = lv_knumh.
            <lv_datbi> = lv_datbi.
          ELSE.
            DELETE ct_knumh WHERE knumh = <lv_knumh>.
            DELETE ct_cndn_valdty.
          ENDIF.
          CONTINUE.
        ELSE.
          lv_fieldname  = c_kunnr.
          lv_fieldvalue = <lv_kunnr>.
          CLEAR lv_blocked.
          verify_partners( EXPORTING
                             iv_fieldname        = lv_fieldname
                             iv_fieldvalue       = lv_fieldvalue
                             iv_kvewe            = <lv_kvewe>
                             iv_kotabnr          = <lv_kotabnr>
                           IMPORTING
                             ev_blocked          = lv_blocked
                           CHANGING
                             ct_blocked_partners = lt_blocked_partners
                             ct_passed_partners  = lt_passed_partners ).
          IF lv_blocked IS NOT INITIAL.
            IF lv_sls_price_app = abap_true.
              CLEAR:<ls_cndn_valdty>.
              <lv_knumh> = lv_knumh.
              <lv_datbi> = lv_datbi.
            ELSE.
              DELETE ct_knumh WHERE knumh = <lv_knumh>.
              DELETE ct_cndn_valdty.
            ENDIF.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

*     KUNRG
      ASSIGN COMPONENT c_kunrg OF STRUCTURE <ls_cndn_valdty> TO <lv_kunnr>.
      IF <lv_kunnr> IS NOT INITIAL.
        READ TABLE lt_blocked_partners WITH KEY fieldname  = c_kunrg
                                                fieldvalue = <lv_kunnr> TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          IF lv_sls_price_app = abap_true.
            CLEAR:<ls_cndn_valdty>.
            <lv_knumh> = lv_knumh.
            <lv_datbi> = lv_datbi.
          ELSE.
            DELETE ct_knumh WHERE knumh = <lv_knumh>.
            DELETE ct_cndn_valdty.
          ENDIF.
          CONTINUE.
        ELSE.
          lv_fieldname  = c_kunrg.
          lv_fieldvalue = <lv_kunnr>.
          CLEAR lv_blocked.
          verify_partners( EXPORTING
                             iv_fieldname        = lv_fieldname
                             iv_fieldvalue       = lv_fieldvalue
                             iv_kvewe            = <lv_kvewe>
                             iv_kotabnr          = <lv_kotabnr>
                           IMPORTING
                             ev_blocked          = lv_blocked
                           CHANGING
                             ct_blocked_partners = lt_blocked_partners
                             ct_passed_partners  = lt_passed_partners ).
          IF lv_blocked IS NOT INITIAL.
            IF lv_sls_price_app = abap_true.
              CLEAR:<ls_cndn_valdty>.
              <lv_knumh> = lv_knumh.
              <lv_datbi> = lv_datbi.
            ELSE.
              DELETE ct_knumh WHERE knumh = <lv_knumh>.
              DELETE ct_cndn_valdty.
            ENDIF.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

*     KUNWE
      ASSIGN COMPONENT c_kunwe OF STRUCTURE <ls_cndn_valdty> TO <lv_kunnr>.
      IF <lv_kunnr> IS NOT INITIAL.
        READ TABLE lt_blocked_partners WITH KEY fieldname  = c_kunwe
                                                fieldvalue = <lv_kunnr> TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          IF lv_sls_price_app = abap_true.
            CLEAR:<ls_cndn_valdty>.
            <lv_knumh> = lv_knumh.
            <lv_datbi> = lv_datbi.
          ELSE.
            DELETE ct_knumh WHERE knumh = <lv_knumh>.
            DELETE ct_cndn_valdty.
          ENDIF.
          CONTINUE.
        ELSE.
          lv_fieldname  = c_kunwe.
          lv_fieldvalue = <lv_kunnr>.
          CLEAR lv_blocked.
          verify_partners( EXPORTING
                             iv_fieldname        = lv_fieldname
                             iv_fieldvalue       = lv_fieldvalue
                             iv_kvewe            = <lv_kvewe>
                             iv_kotabnr          = <lv_kotabnr>
                           IMPORTING
                             ev_blocked          = lv_blocked
                           CHANGING
                             ct_blocked_partners = lt_blocked_partners
                             ct_passed_partners  = lt_passed_partners ).
          IF lv_blocked IS NOT INITIAL.
            IF lv_sls_price_app = abap_true.
              CLEAR:<ls_cndn_valdty>.
              <lv_knumh> = lv_knumh.
              <lv_datbi> = lv_datbi.
            ELSE.
              DELETE ct_knumh WHERE knumh = <lv_knumh>.
              DELETE ct_cndn_valdty.
            ENDIF.
            CONTINUE.
          ENDIF.
        ENDIF.
      ENDIF.

*     LIFNR
      ASSIGN COMPONENT c_lifnr OF STRUCTURE <ls_cndn_valdty> TO <lv_lifnr>.
      IF <lv_lifnr> IS NOT INITIAL.
        READ TABLE lt_blocked_partners WITH KEY fieldname  = c_lifnr
                                                fieldvalue = <lv_lifnr> TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          IF lv_sls_price_app = abap_true.
            CLEAR:<ls_cndn_valdty>.
            <lv_knumh> = lv_knumh.
            <lv_datbi> = lv_datbi.
          ELSE.
            DELETE ct_knumh WHERE knumh = <lv_knumh>.
            DELETE ct_cndn_valdty.
          ENDIF.
        ELSE.
          lv_fieldname  = c_lifnr.
          lv_fieldvalue = <lv_lifnr>.
          CLEAR lv_blocked.
          verify_partners( EXPORTING
                             iv_fieldname        = lv_fieldname
                             iv_fieldvalue       = lv_fieldvalue
                             iv_kvewe            = <lv_kvewe>
                             iv_kotabnr          = <lv_kotabnr>
                           IMPORTING
                             ev_blocked          = lv_blocked
                           CHANGING
                             ct_blocked_partners = lt_blocked_partners
                             ct_passed_partners  = lt_passed_partners ).
          IF lv_blocked IS NOT INITIAL.
            IF lv_sls_price_app = abap_true.
              CLEAR:<ls_cndn_valdty>.
              <lv_knumh> = lv_knumh.
              <lv_datbi> = lv_datbi.
            ELSE.
              DELETE ct_knumh WHERE knumh = <lv_knumh>.
              DELETE ct_cndn_valdty.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


METHOD CREATE_RECORD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
  DATA:lr_record              TYPE REF TO data,
       lr_validity            TYPE REF TO data,
       lr_supplement          TYPE REF TO data,
       lr_scale               TYPE REF TO data,
       lv_kzbzg               TYPE kzbzg,
       lt_konp                TYPE STANDARD TABLE OF konp WITH DEFAULT KEY,
       ls_konp                TYPE konp,
       ls_exist_scale         TYPE a_slsprcgcndnrecordscale,
       lt_exist_scale         TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_scale_t,
       lt_message	            TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_t,
       ls_cndn_record_mapping LIKE LINE OF et_cndn_record_mapping,
       lt_cndn_record_mapping LIKE et_cndn_record_mapping.

  CLEAR:er_cond_record,er_cond_scale,et_message.
  TRY.
      convert_wbselement_ext2int(
        CHANGING
          ct_condition_validity = ct_condition_validity
      ).
    CATCH cx_prcg_cndnrecord_exception INTO DATA(lx_ex). " Exception for Condition Public API
      raise_prcg_cndn_exception( lx_ex ).
  ENDTRY.

* Get the existing scale data
  lt_exist_scale = ct_condition_scale.
  LOOP AT ct_condition_scale INTO DATA(ls_scale)
                            WHERE conditionrecord+0(2) <> if_prcg_cndnrecd_service=>c_temporaer."'$$'.
    DATA(lv_exist_scale) = abap_true.
    CLEAR ls_konp.
    ls_konp-knumh = ls_scale-conditionrecord.
    ls_konp-kopos = ls_scale-conditionsequentialnumber.
    APPEND ls_konp TO lt_konp.
  ENDLOOP.
  SORT lt_konp BY knumh ASCENDING
                  kopos ASCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_konp COMPARING knumh kopos.
  IF lt_konp IS NOT INITIAL.
    SELECT * FROM a_slsprcgcndnrecordscale APPENDING TABLE @ct_condition_scale
       FOR ALL ENTRIES IN @lt_konp
     WHERE conditionrecord = @lt_konp-knumh
       AND conditionsequentialnumber = @lt_konp-kopos.
  ENDIF.
  FREE lt_konp.

  GET REFERENCE OF ct_condition_record INTO lr_record.
  GET REFERENCE OF ct_condition_validity INTO lr_validity.
  GET REFERENCE OF ct_condition_supplement INTO lr_supplement.
  GET REFERENCE OF ct_condition_scale INTO lr_scale.

* Creating data relevant validity check
  TRY .
      mo_srv_facade->check(
        EXPORTING
          iv_updkz      = if_prcg_cndnrecd_service=>c_updkz_i "'I'
          iv_kappl      = if_prcg_cndnrecd_service=>c_kappl_v "'V'
        CHANGING
          cr_record     = lr_record
          cr_validity   = lr_validity
          cr_supplement = lr_supplement
          cr_scale      = lr_scale
      ).
    CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
      raise_prcg_cndn_exception( lx_ex ).
  ENDTRY.

* Prepare importing data for LTD API save method
  TRY.
      mo_srv_facade->prepare_create_record(
        EXPORTING
          ir_condition_record     = lr_record
          ir_condition_validity   = lr_validity
          ir_condition_supplement = lr_supplement
          ir_condition_scale      = lr_scale
        IMPORTING
          er_cond_record          = er_cond_record
          er_cond_scale           = er_cond_scale
          er_internal_record      = DATA(lr_internal_record)
          er_internal_validity    = DATA(lr_internal_validity)
          er_internal_supplement  = DATA(lr_internal_supplement)
          er_internal_scale       = DATA(lr_internal_scale) ).
    CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
      raise_prcg_cndn_exception( lx_ex ).
  ENDTRY.

  DATA lt_condition_text  TYPE cond_konptdb_t.
  DATA lr_condition_text  TYPE REF TO data.

  TRY.
      me->convert_text_ext2int_update(
      EXPORTING
        it_condition_record          = ct_condition_record
        it_condition_record_text     = ct_condition_record_text
        it_condition_supplement      = ct_condition_supplement
        it_condition_supplement_text = ct_condition_supplement_text
      IMPORTING
        et_condition_text            = lt_condition_text ).
    CATCH cx_prcg_cndnrecord_exception INTO lx_ex. " Exception for Condition Public API
      raise_prcg_cndn_exception( lx_ex ).
  ENDTRY.

  IF lt_condition_text IS NOT INITIAL.
    GET REFERENCE OF lt_condition_text INTO lr_condition_text.
  ENDIF.

*  Only text update
   IF  ct_condition_record IS INITIAL
   AND ct_condition_supplement IS INITIAL
   AND lt_condition_text IS NOT INITIAL.
     TEST-SEAM save_cond_text_only.
       mo_cond_db->save_condition_text_db(
         CHANGING
           ct_konpt = lt_condition_text
       ).
     END-TEST-SEAM.
     RETURN.
   ENDIF.

* Call LTD API save method to create condition record
  mo_ltd_api->save(
    EXPORTING
      iv_sync                 = iv_sync
      iv_check_records        = abap_true
    IMPORTING
      et_return               = DATA(lt_ret)
      et_adj_cndn_overlap     = DATA(lt_adj_cndn_overlap)
      et_origl_cndn_overlap   = DATA(lt_origl_cndn_overlap)
      et_suppl_seqno_mapping  = DATA(lt_suppl_seqno_mapping)
    CHANGING
      cr_cond_record          = er_cond_record
      cr_cond_scale           = er_cond_scale
      cr_cond_text            = lr_condition_text
    ).

* Get LTD API returned messages
  REFRESH et_message.
  convert_ltd_api_message(
    EXPORTING
      ir_cond_record = er_cond_record
    IMPORTING
      et_message     = et_message
    CHANGING
      ct_return      = lt_ret   " Return parameter table
  ).

* LTD API returned error message handing
  LOOP AT lt_ret INTO DATA(ls_ret) WHERE type = if_xo_const_message=>abort
                                      OR type = if_xo_const_message=>error.
    RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
      MESSAGE ID ls_ret-id
      TYPE ls_ret-type
      NUMBER ls_ret-number
      WITH ls_ret-message_v1
      ls_ret-message_v2
      ls_ret-message_v3
      ls_ret-message_v4.
  ENDLOOP.

* Message handling
  REFRESH lt_message.
  mo_srv_facade->handle_message(
    EXPORTING
      it_origl_cndn_overlap = lt_origl_cndn_overlap
      it_adj_cndn_overlap   = lt_adj_cndn_overlap
    RECEIVING
      et_message            = lt_message ).
  APPEND LINES OF lt_message TO et_message.

* Convert created data from internal to external
  mo_srv_facade->convert_record(
    EXPORTING
      ir_cond_record          = er_cond_record
      ir_cond_scale           = er_cond_scale
    IMPORTING
      er_condition_record     = lr_record
      er_condition_validity   = lr_validity
      er_condition_supplement = lr_supplement
      er_condition_scale      = lr_scale
    CHANGING
      cr_internal_record      = lr_internal_record
      cr_internal_validity    = lr_internal_validity
      cr_internal_supplement  = lr_internal_supplement
      cr_internal_scale       = lr_internal_scale ).

  ASSIGN lr_record->* TO FIELD-SYMBOL(<ft_record>).
  ASSIGN lr_validity->* TO FIELD-SYMBOL(<ft_validity>).
  ASSIGN lr_supplement->* TO FIELD-SYMBOL(<ft_supplement>).
  ASSIGN lr_scale->* TO FIELD-SYMBOL(<ft_scale>).
  IF <ft_record> IS ASSIGNED.
    ct_condition_record     = <ft_record>.
  ENDIF.
  IF <ft_validity> IS ASSIGNED.
    ct_condition_validity   = <ft_validity>.
  ENDIF.
  IF <ft_supplement> IS ASSIGNED.
    ct_condition_supplement = <ft_supplement>.
  ENDIF.
  IF <ft_scale> IS ASSIGNED.
    ct_condition_scale      = <ft_scale>.
  ENDIF.

  convert_wbselement_int2ext(
      CHANGING
        ct_condition_validity = ct_condition_validity
    ).

*  return map relationship between temporary record number and created record number
*  return map relationship between temporary record number and overlapped record number
  LOOP AT lt_adj_cndn_overlap INTO DATA(ls_adj_cndn_overlap).
    ls_cndn_record_mapping-temporaryconditionrecord = ls_adj_cndn_overlap-knumh_temp.
    ls_cndn_record_mapping-conditionrecord          = ls_adj_cndn_overlap-knumh.
    APPEND ls_cndn_record_mapping TO et_cndn_record_mapping.
    CLEAR ls_cndn_record_mapping.
  ENDLOOP.

*  return map relationship between temporary sequential number and created sequential number
  LOOP AT lt_suppl_seqno_mapping INTO DATA(ls_suppl_seqno_mapping).
    ls_cndn_record_mapping-conditionrecord                 = ls_suppl_seqno_mapping-knumh.
    ls_cndn_record_mapping-tmpconditionsequentialnumber    = ls_suppl_seqno_mapping-kopos_old.
    ls_cndn_record_mapping-conditionsequentialnumber       = ls_suppl_seqno_mapping-kopos.
    APPEND ls_cndn_record_mapping TO et_cndn_record_mapping.
    CLEAR ls_cndn_record_mapping.
  ENDLOOP.
* Convert Condition Record Number of Condition Text.
  LOOP AT ct_condition_record_text ASSIGNING FIELD-SYMBOL(<fs_record_text>).
    IF <fs_record_text>-conditionrecord+0(2) = '$$'.
      READ TABLE et_cndn_record_mapping WITH KEY temporaryconditionrecord = <fs_record_text>-conditionrecord INTO ls_cndn_record_mapping.
      IF sy-subrc = 0.
        <fs_record_text>-conditionrecord = ls_cndn_record_mapping-conditionrecord.
      ENDIF.
    ENDIF.
  ENDLOOP.
ENDMETHOD.


  METHOD CONVERT_WHERE_FOR_CNDNRECD.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CONSTANTS:c_konh  TYPE t681-kotab VALUE 'KONH',
              c_knumh TYPE fieldname VALUE 'KNUMH',
              c_kappl TYPE kappl VALUE 'V'.
    DATA:lt_sel_tab    TYPE STANDARD TABLE OF sel_table WITH NON-UNIQUE DEFAULT KEY,
         ls_sel_tab    TYPE sel_table,
         lt_where      TYPE STANDARD TABLE OF where_tab WITH NON-UNIQUE DEFAULT KEY,
         lt_where_temp TYPE STANDARD TABLE OF where_tab WITH NON-UNIQUE DEFAULT KEY.
    DATA lo_ltd_util      TYPE REF TO cl_cnd_maint_ltd_util.
**Build where clause for condition record
    LOOP AT it_cndnrecord_criteria_item ASSIGNING FIELD-SYMBOL(<fs_nitem>)
                                        WHERE NOT conditionrecord IS INITIAL.
      REFRESH lt_sel_tab.
      LOOP AT <fs_nitem>-conditionrecord ASSIGNING FIELD-SYMBOL(<fs_selopt>).
        CLEAR: ls_sel_tab.
        ls_sel_tab-field = c_knumh.
        ls_sel_tab-high  = <fs_selopt>-high.
        ls_sel_tab-low   = <fs_selopt>-low.
        ls_sel_tab-option = <fs_selopt>-option.
        ls_sel_tab-sign  = <fs_selopt>-sign.
        ls_sel_tab-table = c_konh.
        APPEND ls_sel_tab TO lt_sel_tab.
      ENDLOOP.

      " Call Function module to get WHERE table
      REFRESH lt_where_temp.
*      lo_ltd_util ?= cl_cnd_maint_ltd_util=>get_instance( ).
*      TRY .
*          TEST-SEAM convert_where.
*            lo_ltd_util->if_cnd_maint_ltd_util~convert_select_option_to_where(
*              EXPORTING
*                iv_kappl = c_kappl
*                iv_select_tablename = c_konh
*                it_select_fields = lt_sel_tab
*                IMPORTING
*                  et_where_cond = lt_where_temp
*            ).
*          END-TEST-SEAM.
*        CATCH cx_cnd_maint_ltd_exception.
*          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
*            MESSAGE e002(prcg_cndnrecord_api).
*      ENDTRY.
      TEST-SEAM convert_where.
        CALL FUNCTION 'CONVERT_SELECT_INTO_WHERE'
          EXPORTING
            select_tablename = c_konh
          TABLES
            in_select_fields = lt_sel_tab
            out_where_cond   = lt_where_temp
          EXCEPTIONS
            wrong_input_data = 1
            OTHERS           = 2.
      END-TEST-SEAM.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e002(prcg_cndnrecord_api).
      ENDIF.

      " Build OR expression for search fields
      IF lt_where_temp IS NOT INITIAL.
        IF lt_where IS NOT INITIAL.
          APPEND 'OR' TO lt_where.
        ENDIF.

        APPEND LINES OF lt_where_temp TO lt_where.
      ENDIF.
      FREE:lt_sel_tab,lt_where_temp.
    ENDLOOP.

    LOOP AT lt_where ASSIGNING FIELD-SYMBOL(<ls_where>).
      CONCATENATE ev_where  <ls_where> INTO ev_where SEPARATED BY space.
    ENDLOOP.
    FREE:lt_where.

    CONDENSE ev_where.

    ev_where = cl_abap_dyn_prg=>escape_quotes_str( val = ev_where ).
  ENDMETHOD.


  METHOD CONVERT_WBSELEMENT_INT2EXT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    LOOP AT ct_condition_validity INTO DATA(ls_condition_validity).
      DATA(lv_tabix) = sy-tabix.
      IF ls_condition_validity-wbselementinternalid IS NOT INITIAL.
        CALL FUNCTION 'CONVERSION_EXIT_ABPSP_OUTPUT'
          EXPORTING
            input  = ls_condition_validity-wbselementinternalid
          IMPORTING
            output = ls_condition_validity-wbselementexternalid.
        MODIFY ct_condition_validity FROM ls_condition_validity INDEX lv_tabix.
      ENDIF.
      CLEAR:ls_condition_validity.
    ENDLOOP.
  ENDMETHOD.


  METHOD CONVERT_WBSELEMENT_EXT2INT.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    IF ct_condition_validity IS NOT INITIAL.
      LOOP AT ct_condition_validity INTO DATA(ls_condition_validity).
        DATA(lv_tabix) = sy-tabix.
        IF ls_condition_validity-wbselementexternalid IS NOT INITIAL.
          TRY.
              CALL FUNCTION 'CONVERSION_EXIT_ABPSP_INPUT'
                EXPORTING
                  input  = ls_condition_validity-wbselementexternalid
                IMPORTING
                  output = ls_condition_validity-wbselementinternalid.
            CATCH cx_no_check INTO DATA(lr_ex).
              RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
                MESSAGE ID 'PRCG_CNDNRECORD_API'
                TYPE 'E'
                NUMBER 080
                WITH ls_condition_validity-wbselementexternalid.
          ENDTRY.
          MODIFY ct_condition_validity FROM ls_condition_validity INDEX lv_tabix.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD CONVERT_TEXT_EXT2INT_UPDATE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA ls_condition_text_int TYPE konptdb.

    LOOP AT it_condition_record_text INTO DATA(ls_record_text_ext).
      IF  ls_record_text_ext-conditionrecord(2) = if_prcg_cndnrecd_service=>c_temporaer
      AND ls_record_text_ext-conditiontext IS INITIAL.
        CONTINUE.
      ENDIF.

      IF it_condition_record IS NOT INITIAL OR it_condition_supplement IS NOT INITIAL.
        DATA(lv_exists) = xsdbool( line_exists( it_condition_record[ conditionrecord = ls_record_text_ext-conditionrecord ] ) ).
        if lv_exists is INITIAL.
*         Inconsistent keys between condition record &1/&2 and the description
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e113(prcg_cndnrecord_api)
             WITH ls_record_text_ext-conditionrecord
                  if_prcg_cndnrecd_service=>c_kopos_record.
        ENDIF.
        DATA(exists) = xsdbool( sy-subrc = 0 ).
      ENDIF.

      SELECT SINGLE spras into @data(lv_spras) FROM t002 BYPASSING BUFFER WHERE spras = @ls_record_text_ext-language.
      IF sy-subrc <> 0.
*       Language & not in system
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e080(tl)
           WITH ls_record_text_ext-language.
      ENDIF.

      CLEAR ls_condition_text_int.

      IF ls_record_text_ext-conditionrecord(2) = if_prcg_cndnrecd_service=>c_temporaer.
        ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_insert.

      ELSE.
        SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_condition_text_int
          FROM konpt
         WHERE knumh = ls_record_text_ext-conditionrecord
           AND kopos = if_prcg_cndnrecd_service=>c_kopos_record
           AND spras = ls_record_text_ext-language.
        IF sy-subrc = 0.
          IF ls_condition_text_int-vtext = ls_record_text_ext-conditiontext.
            CONTINUE.
          ELSE.
            ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_update.
          ENDIF.
        ELSE.
          IF ls_record_text_ext-conditiontext IS INITIAL.
            CONTINUE.
          ELSE.
            ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_insert.
          ENDIF.
        ENDIF.
      ENDIF.

      ls_condition_text_int-mandt = sy-mandt.
      ls_condition_text_int-knumh = ls_record_text_ext-conditionrecord.
      ls_condition_text_int-kopos = if_prcg_cndnrecd_service=>c_kopos_record.
      ls_condition_text_int-spras = ls_record_text_ext-language.
      ls_condition_text_int-vtext = ls_record_text_ext-conditiontext.
      APPEND ls_condition_text_int TO et_condition_text.
    ENDLOOP.

    LOOP AT it_condition_supplement_text INTO DATA(ls_supplement_text_ext).
      IF  ls_supplement_text_ext-conditionrecord(2) = if_prcg_cndnrecd_service=>c_temporaer
      AND ls_supplement_text_ext-conditiontext IS INITIAL.
        CONTINUE.
      ENDIF.

      IF it_condition_record IS NOT INITIAL OR it_condition_supplement IS NOT INITIAL.
        clear lv_exists.
        lv_exists = xsdbool( line_exists( it_condition_supplement[ conditionrecord = ls_supplement_text_ext-conditionrecord conditionsequentialnumber = ls_supplement_text_ext-conditionsequentialnumber ] ) ).
        if lv_exists is INITIAL.
*         Inconsistent keys between condition supplement &1/&2 and the description
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e114(prcg_cndnrecord_api)
             WITH ls_supplement_text_ext-conditionrecord
                  ls_supplement_text_ext-conditionsequentialnumber.
        ENDIF.
      ENDIF.

      SELECT SINGLE spras into @lv_spras FROM t002 BYPASSING BUFFER WHERE spras = @ls_supplement_text_ext-language.
      IF sy-subrc <> 0.
*       Language & not in system
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e080(tl)
           WITH ls_supplement_text_ext-language.
      ENDIF.

      CLEAR ls_condition_text_int.
      IF ls_supplement_text_ext-conditionrecord(2) = if_prcg_cndnrecd_service=>c_temporaer.
        ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_insert.

      ELSE.
        SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_condition_text_int
          FROM konpt
         WHERE knumh = ls_supplement_text_ext-conditionrecord
           AND kopos = ls_supplement_text_ext-conditionsequentialnumber
           AND spras = ls_supplement_text_ext-language.
        IF sy-subrc = 0.
          IF ls_condition_text_int-vtext = ls_supplement_text_ext-conditiontext.
            CONTINUE.
          ELSE.
            ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_update.
          ENDIF.
        ELSE.
          IF ls_supplement_text_ext-conditiontext IS INITIAL.
            CONTINUE.
          ELSE.
            ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_insert.
          ENDIF.
        ENDIF.
      ENDIF.

      ls_condition_text_int-mandt = sy-mandt.
      ls_condition_text_int-knumh = ls_supplement_text_ext-conditionrecord.
      ls_condition_text_int-kopos = ls_supplement_text_ext-conditionsequentialnumber.
      ls_condition_text_int-spras = ls_supplement_text_ext-language.
      ls_condition_text_int-vtext = ls_supplement_text_ext-conditiontext.

      APPEND ls_condition_text_int TO et_condition_text.
    ENDLOOP.
  ENDMETHOD.


  METHOD CONVERT_TEXT_EXT2INT_DELETE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    DATA ls_condition_text_int TYPE konptdb.

*   convert condition record text to internal
    LOOP AT it_condition_record_text INTO DATA(ls_record_text_ext).
      IF it_condition_record IS NOT INITIAL OR it_condition_supplement IS NOT INITIAL.
        DATA(lv_exists) = xsdbool( line_exists( it_condition_record[ conditionrecord = ls_record_text_ext-conditionrecord ] ) ).
        IF lv_exists IS INITIAL.
*         Inconsistent keys between condition record &1/&2 and the description
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e113(prcg_cndnrecord_api)
             WITH ls_record_text_ext-conditionrecord
                  if_prcg_cndnrecd_service=>c_kopos_record.
        ENDIF.
      ENDIF.

      SELECT SINGLE spras INTO @DATA(lv_spras) FROM t002 BYPASSING BUFFER WHERE spras = @ls_record_text_ext-language.
      IF sy-subrc <> 0.
*       Language & not in system
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e080(tl)
           WITH ls_record_text_ext-language.
      ENDIF.

      CLEAR ls_condition_text_int.
      SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_condition_text_int
        FROM konpt
       WHERE knumh = ls_record_text_ext-conditionrecord
         AND kopos = if_prcg_cndnrecd_service=>c_kopos_record
         AND spras = ls_record_text_ext-language.

      IF sy-subrc = 0.
        ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_delete.
        APPEND ls_condition_text_int TO et_condition_text.
      ELSE.
*       Description of record &1 &2, language "&3" not exist, process failed
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e111(prcg_cndnrecord_api)
           WITH ls_record_text_ext-conditionrecord
                if_prcg_cndnrecd_service=>c_kopos_record
                ls_record_text_ext-language.
      ENDIF.
    ENDLOOP.

*   convert condition supplement text to internal
    LOOP AT it_condition_supplement_text INTO DATA(ls_supplement_text_ext).
      IF it_condition_record IS NOT INITIAL OR it_condition_supplement IS NOT INITIAL.
        CLEAR lv_exists.
        lv_exists = xsdbool( line_exists( it_condition_supplement[ conditionrecord = ls_supplement_text_ext-conditionrecord conditionsequentialnumber = ls_supplement_text_ext-conditionsequentialnumber ] ) ).
        IF lv_exists IS INITIAL.
*         Inconsistent keys between condition supplement &1/&2 and the description
          RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e114(prcg_cndnrecord_api)
             WITH ls_supplement_text_ext-conditionrecord
                  ls_supplement_text_ext-conditionsequentialnumber.
        ENDIF.
      ENDIF.

      CLEAR lv_spras.
      SELECT SINGLE spras INTO @lv_spras FROM t002 BYPASSING BUFFER WHERE spras = @ls_supplement_text_ext-language.
      IF sy-subrc <> 0.
*       Language & not in system
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e080(tl)
           WITH ls_supplement_text_ext-language.
      ENDIF.

      CLEAR ls_condition_text_int.
      SELECT SINGLE * INTO CORRESPONDING FIELDS OF ls_condition_text_int
        FROM konpt
       WHERE knumh = ls_supplement_text_ext-conditionrecord
         AND kopos = ls_supplement_text_ext-conditionsequentialnumber
         AND spras = ls_supplement_text_ext-language.

      IF sy-subrc = 0.
        ls_condition_text_int-updkz = if_cnd_maint_ltd_types=>c_updkz_delete.
        APPEND ls_condition_text_int TO et_condition_text.
      ELSE.
*       Description of supplement &1 &2, language "&3" not exist, process failed
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e112(prcg_cndnrecord_api)
           WITH ls_supplement_text_ext-conditionrecord
                ls_supplement_text_ext-conditionsequentialnumber
                ls_supplement_text_ext-language.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD CONVERT_LTD_API_MESSAGE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CONSTANTS:c_bor_obj_spec           TYPE oj_name VALUE 'BUS30110',
              c_map_data_cat           TYPE wlf_map_data_cat VALUE 'B',
              c_symsgid_00             TYPE symsgid VALUE '00',
              c_field_required_ltd     TYPE symsgno VALUE '055',
              c_field_required_api     TYPE symsgno VALUE '020',
              c_symsgid_ltd_api        TYPE symsgid VALUE 'CND_MAINT_LTD_API',
              c_cndn_amount_change_ltd TYPE symsgno VALUE '022',
              c_cndn_amount_change_api TYPE symsgno VALUE '062',
              c_field_required_recsup  TYPE symsgno VALUE '030',
              c_field_required_scale   TYPE symsgno VALUE '048',
              c_field_required_rec     TYPE symsgno VALUE '066',
              c_field_invalid_value    TYPE symsgno VALUE '067'.
    DATA:lt_map_fields TYPE if_prcg_cndnrecd_service=>ty_map_fields_t,
         ls_message    TYPE if_slsprcg_cndnrecd_api_types=>ty_condition_message_s,
         lv_sytabix    TYPE sytabix.
    FIELD-SYMBOLS:<ft_cond_record> TYPE cl_cnd_maint_ltd_api=>ty_vkon_cond_record_t.

    lt_map_fields = VALUE #(
      ( ext_fieldname = 'CONDITIONRATEVALUE'           int_fieldname = 'KBETR' )
      ( ext_fieldname = 'CONDITIONSEQUENTIALNUMBER'    int_fieldname = 'KOPOS' )
      ( ext_fieldname = 'CONDITIONTYPE'                int_fieldname = 'KSCHL' )
      ( ext_fieldname = 'CONDITIONTEXTID'              int_fieldname = 'KNUMT' )
      ( ext_fieldname = 'PRICINGSCALETYPE'             int_fieldname = 'STFKZ' )
      ( ext_fieldname = 'PRICINGSCALEBASIS'            int_fieldname = 'KZBZG' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITY'       int_fieldname = 'KSTBM' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITYUNIT'   int_fieldname = 'KONMS' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNT'         int_fieldname = 'KSTBW' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNTCURRENCY' int_fieldname = 'KONWS' )
      ( ext_fieldname = 'CONDITIONCALCULATIONTYPE'     int_fieldname = 'KRECH' )
      ( ext_fieldname = 'CONDITIONQUANTITY'            int_fieldname = 'KPEIN' )
      ( ext_fieldname = 'CONDITIONQUANTITYUNIT'        int_fieldname = 'KMEIN' )
      ( ext_fieldname = 'BASEUNIT'                     int_fieldname = 'MEINS' )
      ( ext_fieldname = 'ADDITIONALVALUEDAYS'          int_fieldname = 'VALTG' )
      ( ext_fieldname = 'FIXEDVALUEDATE'               int_fieldname = 'VALDT' )
      ( ext_fieldname = 'PAYMENTTERMS'                 int_fieldname = 'ZTERM' )
      ( ext_fieldname = 'MANDT'                        int_fieldname = 'MANDT' )
      ( ext_fieldname = 'CREATEDBYUSER'                int_fieldname = 'ERNAM' )
      ( ext_fieldname = 'CREATIONDATE'                 int_fieldname = 'ERDAT' )
      ( ext_fieldname = 'CONDITIONAPPLICATION'         int_fieldname = 'KAPPL' )
      ( ext_fieldname = 'CONDITIONRECORD'              int_fieldname = 'KNUMH' )
      ( ext_fieldname = 'CONDITIONVALIDITYENDDATE'     int_fieldname = 'DATBI' )
      ( ext_fieldname = 'CONDITIONVALIDITYSTARTDATE'   int_fieldname = 'DATAB' )
      ( ext_fieldname = 'CONDITIONTABLE'               int_fieldname = 'KOTABNR' )
      ( ext_fieldname = 'CONDITIONRATEVALUEUNIT'       int_fieldname = 'KONWA' )
      ( ext_fieldname = 'CONDITIONTOBASEQTYNMRTR'      int_fieldname = 'KUMZA' )
      ( ext_fieldname = 'CONDITIONTOBASEQTYDNMNTR'     int_fieldname = 'KUMNE' )
      ( ext_fieldname = 'CONDITIONLOWERLIMIT'          int_fieldname = 'MXWRT' )
      ( ext_fieldname = 'CONDITIONUPPERLIMIT'          int_fieldname = 'GKWRT' )
      ( ext_fieldname = 'CONDITIONALTERNATIVECURRENCY' int_fieldname = 'KWAEH' )
      ( ext_fieldname = 'CONDITIONEXCLUSION'           int_fieldname = 'KZNEP' )
      ( ext_fieldname = 'CONDITIONISDELETED'           int_fieldname = 'LOEVM_KO' )
      ( ext_fieldname = 'CNDNMAXNUMBEROFSALESORDERS'   int_fieldname = 'ANZAUF' )
      ( ext_fieldname = 'MINIMUMCONDITIONBASISVALUE'   int_fieldname = 'MIKBAS' )
      ( ext_fieldname = 'MAXIMUMCONDITIONBASISVALUE'   int_fieldname = 'MXKBAS' )
      ( ext_fieldname = 'MAXIMUMCONDITIONAMOUNT'       int_fieldname = 'KOMXWRT' )
      ( ext_fieldname = 'INCREMENTALSCALE'             int_fieldname = 'KLF_STG' )
      ( ext_fieldname = 'PRICINGSCALELINE'             int_fieldname = 'KLF_KAL' )
      ( ext_fieldname = 'CONDITIONRELEASESTATUS'       int_fieldname = 'KFRST' )
      ( ext_fieldname = 'CONDITIONSCALEAMOUNTCURRENCY' int_fieldname = 'KONPKONWS' )
      ( ext_fieldname = 'CONDITIONSCALEQUANTITYUNIT'   int_fieldname = 'KONPKONMS' )
      ( ext_fieldname = 'CONDITIONRATEVALUEUNIT'       int_fieldname = 'KONPKONWA' )
      ( ext_fieldname = 'CONDITIONQUANTITY'            int_fieldname = 'KONPKPEIN' )
      ( ext_fieldname = 'CONDITIONQUANTITYUNIT'        int_fieldname = 'KONPKMEIN' )
      ( ext_fieldname = 'CONDITIONSCALELINE'           int_fieldname = 'KLFN1' )
      ( ext_fieldname = 'CONDITIONSEQUENTIALNUMBER'    int_fieldname = 'KOPOS' )
    ).

    REFRESH et_message.

    ASSIGN ir_cond_record->* TO <ft_cond_record>.

**Get mapping of global name (external) and tech name (internal)
    mo_dep->get_wlf_mp_fields(
      EXPORTING
        iv_bor_obj_spec = c_bor_obj_spec                    "'BUS30110'
        iv_map_data_cat = c_map_data_cat "'B'
      IMPORTING
        et_wlf_mp_fields = DATA(lt_wlf_mp_fields)
    ).

    MOVE-CORRESPONDING lt_map_fields TO lt_wlf_mp_fields KEEPING TARGET LINES.

    LOOP AT ct_return INTO DATA(ls_ret).
      DATA(lv_tabix) = sy-tabix.
**Get the conditionrecord according the tabix of cond_record (match with the row of return message)
      IF <ft_cond_record> IS ASSIGNED.
        CLEAR:lv_sytabix.
        lv_sytabix = ls_ret-row.
        READ TABLE <ft_cond_record> ASSIGNING FIELD-SYMBOL(<fs_cond_record>) WITH KEY tabix = lv_sytabix.
        IF sy-subrc = 0 AND <fs_cond_record> IS ASSIGNED.
          ls_message-conditionrecord = <fs_cond_record>-knumh.
          ls_message-conditionsequentialnumber = <fs_cond_record>-kopos.
        ENDIF.
      ENDIF.

**Replace the message of message class 00
**with the message of message class PRCG_CNDNRECORD_API:
**Fill out all required entry fields --> Condition record &1: Entry property "&2" is required.
      IF ls_ret-id = c_symsgid_00.
        IF ( ls_ret-number = 058 ).
          IF ( ls_ret-field = 'WBS_BILL_ELEMENT' ).
            ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
            ls_ret-number = 081.
            CLEAR: ls_ret-message,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
            CONTINUE.
          ELSE.
            IF ls_ret-message_v2 IS INITIAL AND ls_ret-message_v3 IS INITIAL.
              ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
              READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields_gfn) WITH KEY int_fieldname = ls_ret-field.
              IF sy-subrc = 0.
                ls_ret-message_v2 = ls_fields_gfn-ext_fieldname.
              ELSE.
                "check if app call this method, error msg property use field label for customizing field
                DATA(rv_flag) = mo_cond_db->get_sls_cndn_app_flag( ).
                IF rv_flag eq abap_true.
                  cl_dd_ddl_annotation_service=>get_label_4_element_mde(
                       EXPORTING
                         entityname  = CONV #( 'I_SLSPRCGCNDNRECDTEMPLATE' )
                         elementname = CONV #( ls_ret-field )
                       RECEIVING
                         label       = DATA(ls_label_service)
                     ).
                  ls_ret-message_v2 = ls_label_service-value.
                ELSE.
                  ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
                ENDIF.
              ENDIF.
              CLEAR: ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
            ELSE. "If there are multiple message value should be return. Entry & & & does not exist in &4 (check entry)
              ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
              ls_ret-number = 130.
              MODIFY ct_return FROM ls_ret INDEX lv_tabix.
              CONTINUE.
            ENDIF.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
            CONTINUE.
          ENDIF.
        ENDIF.


        IF ( ls_ret-number = 002 AND ls_ret-field = 'KRECH' ).
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          ls_ret-number = 085.
          READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields_KRECH) WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v2 = ls_fields_KRECH-ext_fieldname.
          ELSE.
            ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
          ENDIF.
          ls_ret-message_v1 = ls_message-conditionrecord.
          CLEAR: ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
          CONTINUE.
        ENDIF.

        CLEAR:ls_ret-message,
              ls_ret-message_v1,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.

        CASE ls_ret-number.
          WHEN c_field_required_ltd."055
            ls_ret-number = c_field_required_api. "020
            ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
            READ TABLE lt_wlf_mp_fields INTO DATA(ls_fields) WITH KEY int_fieldname = ls_ret-field.
            IF sy-subrc = 0.
              ls_ret-message_v2 = ls_fields-ext_fieldname.
            ELSE.
              ls_ret-message_v2 = ls_ret-field. "for customizing fields like Z*
            ENDIF.
            ls_ret-message_v1 = ls_message-conditionrecord.
            MODIFY ct_return FROM ls_ret INDEX lv_tabix.
          WHEN OTHERS.
        ENDCASE.
      ENDIF.

**Replace the message of message class CND_MAINT_LTD_API
**with the message of message class PRCG_CNDNRECORD_API:
**Condition amount is changed to the amount in the first line of the scale.
      IF ls_ret-id = c_symsgid_ltd_api.
        IF ls_ret-number = c_cndn_amount_change_ltd. "022
          CLEAR:ls_ret-message,ls_ret-message_v3,ls_ret-message_v4.
          ls_ret-number = c_cndn_amount_change_api. "062
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

      IF ls_ret-id = 'VK'.
        IF ls_ret-number = 085.
          ls_ret-number = 106.
          ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api."'PRCG_CNDNRECORD_API'.
          ls_ret-message_v1 = ls_ret-message_v2.
          CLEAR:ls_ret-message,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

**Replace the message with global name for message class PRCG_CNDNRECORD_API:
      IF ls_ret-id = cl_prcg_cndnrecd_srv_facade=>c_message_id_public_api.
**030: Condition record &1 with sequential no. &2: Property "&3" is required.
**066: Property “&3” is required for condition record &1 with sequential No. &2.
**067: “&1” is not a valid value for property “&3” in condition record &2.
        IF ( ls_ret-number = c_field_required_recsup OR ls_ret-number = c_field_required_rec OR ls_ret-number = c_field_invalid_value ).
          CLEAR:ls_ret-message,ls_ret-message_v4.
          READ TABLE lt_wlf_mp_fields INTO ls_fields WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v3 = ls_fields-ext_fieldname.
          ENDIF.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
**048: Condition record &1 (seq.no. &2, scaleline &3): Property "&4" is required
        IF ( ls_ret-number = c_field_required_scale ). "048
          CLEAR:ls_ret-message.
          READ TABLE lt_wlf_mp_fields INTO ls_fields WITH KEY int_fieldname = ls_ret-field.
          IF sy-subrc = 0.
            ls_ret-message_v4 = ls_fields-ext_fieldname.
          ENDIF.
          MODIFY ct_return FROM ls_ret INDEX lv_tabix.
        ENDIF.
      ENDIF.

      CONDENSE:ls_ret-message_v1,ls_ret-message_v2,ls_ret-message_v3,ls_ret-message_v4.
      ls_message-systemmessagetype           = ls_ret-type.
      ls_message-systemmessageidentification = ls_ret-id.
      ls_message-systemmessagenumber         = ls_ret-number.
      ls_message-systemmessagevariable1      = ls_ret-message_v1.
      ls_message-systemmessagevariable2      = ls_ret-message_v2.
      ls_message-systemmessagevariable3      = ls_ret-message_v3.
      ls_message-systemmessagevariable4      = ls_ret-message_v4.
      APPEND ls_message TO et_message.
      CLEAR ls_message.
      MODIFY ct_return FROM ls_ret TRANSPORTING message_v1 message_v2 message_v3 message_v4.
    ENDLOOP.
  ENDMETHOD.


  METHOD CONVERT_EXT_TO_INT_STRUCTURE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    " Convert external structure to internal structure with technical fields
    ES_CNDNRECORD_CRITERIA_HEADER = IS_CNDNRECORD_CRITERIA_HEADER.
    ET_CNDNRECORD_CRITERIA_ITEM = IT_CNDNRECORD_CRITERIA_ITEM.
  ENDMETHOD.


  METHOD CONVERT_BUSINESSPARTNER.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    TYPES:BEGIN OF ty_customer_bp_s,
            bpforsoldtoparty TYPE bu_partner,
            kunag            TYPE kunag,
            bpforcustomer    TYPE bu_partner,
            kunnr            TYPE kunnr_v,
            bpforpayerparty  TYPE bu_partner,
            kunrg            TYPE kunrg,
            bpforshiptoparty TYPE bu_partner,
            kunwe            TYPE kunwe,
            bpforsupplier    TYPE bu_partner,
            lifnr            TYPE elifn,
          END OF ty_customer_bp_s.
    TYPES:BEGIN OF ty_customer_s,
            customer TYPE i_customer_to_businesspartner-customer,
          END OF ty_customer_s.
    DATA: lt_convert_bp  TYPE ty_customer_businesspartner_t,
          ls_convert_bp  LIKE LINE OF lt_convert_bp,
          lt_customer_bp TYPE TABLE OF ty_customer_bp_s,
          lt_customer    TYPE TABLE OF ty_customer_s,
          ls_customer    TYPE ty_customer_s,
          lv_where       TYPE string.
    FIELD-SYMBOLS:<ft_validity_tech> TYPE STANDARD TABLE.

    CONCATENATE 'NOT ( kunag IS INITIAL AND kunnr IS INITIAL AND kunrg IS INITIAL'
                'AND kunwe IS INITIAL AND lifnr IS INITIAL )' INTO lv_where SEPARATED BY space.

    ASSIGN cr_cndn_validity->* TO <ft_validity_tech>.
    MOVE-CORRESPONDING <ft_validity_tech> TO lt_customer_bp.
    DELETE lt_customer_bp WHERE kunag IS INITIAL AND kunnr IS INITIAL AND kunrg IS INITIAL
                            AND kunwe IS INITIAL AND lifnr IS INITIAL.

    IF NOT lt_customer_bp IS INITIAL.
      LOOP AT lt_customer_bp INTO DATA(ls_customer_bp).
        IF NOT ls_customer_bp-kunag IS INITIAL.
          ls_customer-customer = ls_customer_bp-kunag.
          APPEND ls_customer TO lt_customer.
          CLEAR:ls_customer.
        ENDIF.

        IF NOT ls_customer_bp-kunnr IS INITIAL.
          ls_customer-customer = ls_customer_bp-kunnr.
          APPEND ls_customer TO lt_customer.
          CLEAR:ls_customer.
        ENDIF.

        IF NOT ls_customer_bp-kunrg IS INITIAL.
          ls_customer-customer = ls_customer_bp-kunrg.
          APPEND ls_customer TO lt_customer.
          CLEAR:ls_customer.
        ENDIF.

        IF NOT ls_customer_bp-kunwe IS INITIAL.
          ls_customer-customer = ls_customer_bp-kunwe.
          APPEND ls_customer TO lt_customer.
          CLEAR:ls_customer.
        ENDIF.

        IF NOT ls_customer_bp-lifnr IS INITIAL.
          ls_customer-customer = ls_customer_bp-lifnr.
          APPEND ls_customer TO lt_customer.
          CLEAR:ls_customer.
        ENDIF.
      ENDLOOP.

      SORT lt_customer.
      DELETE ADJACENT DUPLICATES FROM lt_customer COMPARING customer.

**Get customer businesspartner values
      IF NOT lt_customer IS INITIAL.
        SELECT a~customer, b~businesspartner
          FROM i_customer_to_businesspartner AS a INNER JOIN i_businesspartner  AS b
                                             ON a~businesspartneruuid = b~businesspartneruuid
          INTO CORRESPONDING FIELDS OF TABLE @lt_convert_bp
           FOR ALL ENTRIES IN @lt_customer
         WHERE a~customer = @lt_customer-customer.

        IF sy-subrc = 0.
**Get customer businesspartner fieldname mapping
          mo_dep->get_bp_mapping(
            IMPORTING
              et_bp_mapping = DATA(lt_bp_mapping)
          ).

          LOOP AT <ft_validity_tech> ASSIGNING FIELD-SYMBOL(<fs_validity_tech>) WHERE (lv_where).
            LOOP AT lt_bp_mapping INTO DATA(ls_bp_mapping).
              ASSIGN COMPONENT ls_bp_mapping-int_fieldname OF STRUCTURE <fs_validity_tech> TO FIELD-SYMBOL(<fs_customer>).
              IF <fs_customer> IS ASSIGNED AND NOT <fs_customer> IS INITIAL.
                ASSIGN COMPONENT ls_bp_mapping-ext_fieldname OF STRUCTURE <fs_validity_tech> TO FIELD-SYMBOL(<fs_bp>).
                READ TABLE lt_convert_bp INTO ls_convert_bp WITH KEY customer = <fs_customer>.
                IF sy-subrc = 0.
                  <fs_bp> = ls_convert_bp-businesspartner.
                ENDIF.
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD CONSTRUCTOR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    mo_cond_db = zcl_cnd_maint_ltd_db=>get_instance( ).
    mo_cond_checks = cl_cnd_maint_ltd_check_mgr=>get_instance( ).
    mo_util = cl_cnd_maint_ltd_util=>get_instance( ).
    mo_ltd_api = cl_cnd_maint_ltd_api_factory=>get_instance( )->get_api_instance( ).
    mo_dep = cl_cnd_maint_ltd_dep_mgr=>get_instance( ).
    mo_blocked_partners = cl_cnd_maint_blkd_part_factory=>get_instance( )->get_blkd_part_instance( ).
    mo_pricing_calc_types = cl_pricing_calculation_types=>get_instance( ).
    mo_srv_facade ?= cl_prcg_cndnrecd_srv_facade=>get_instance( ).
    mo_prcg_util = cl_CNDNRECORD_PUBLIC_UTILITY=>get_instance( ).
  ENDMETHOD.


  METHOD CHECK.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* DEREVOLE     | 21.10.2022 | T4MTEMP-846 [Build] BE -                 *
*              |            | Pricing Mass Upload Tool                 *
*              |            | DS4K929425, Change number 13489          *
*----------------------------------------------------------------------*
    CONSTANTS: c_ddsign   TYPE dd07l-domname VALUE 'DDSIGN',
               c_ddoption TYPE dd07l-domname VALUE 'DDOPTION'.
    TYPES:BEGIN OF ty_dom,
            sign   TYPE domvalue_l,
            option TYPE domvalue_l,
          END OF ty_dom.
    DATA:lt_ddsign   TYPE TABLE OF dd07v,
         lt_ddoption TYPE TABLE OF dd07v,
         lt_dom      TYPE TABLE OF ty_dom,
         ls_dom      TYPE ty_dom.

**Check date
    IF NOT is_cndnrecord_criteria_header-conditionvaliditystartdate IS INITIAL.
      TEST-SEAM start_date_check.
        CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
          EXPORTING
            date                      = is_cndnrecord_criteria_header-conditionvaliditystartdate
          EXCEPTIONS
            plausibility_check_failed = 1
            OTHERS                    = 2.
      END-TEST-SEAM.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e003(prcg_cndnrecord_api)
          WITH is_cndnrecord_criteria_header-conditionvaliditystartdate.
      ENDIF.
    ENDIF.

    IF NOT is_cndnrecord_criteria_header-conditionvalidityenddate IS INITIAL.
      TEST-SEAM end_date_check.
        CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
          EXPORTING
            date                      = is_cndnrecord_criteria_header-conditionvalidityenddate
          EXCEPTIONS
            plausibility_check_failed = 1
            OTHERS                    = 2.
      END-TEST-SEAM.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e004(prcg_cndnrecord_api)
          WITH is_cndnrecord_criteria_header-conditionvalidityenddate.
      ENDIF.
    ENDIF.

    " Start date shall be earlier than end date
    IF is_cndnrecord_criteria_header-conditionvaliditystartdate
      > is_cndnrecord_criteria_header-conditionvalidityenddate
      AND NOT is_cndnrecord_criteria_header-conditionvalidityenddate IS INITIAL.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
      MESSAGE e009(prcg_cndnrecord_api).
    ENDIF.

**Please input value for condition table/record/type or other field name
    IF it_cndnrecord_criteria_item[] IS INITIAL.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e002(prcg_cndnrecord_api).
    ENDIF.

**Check sign option to avoid runtime error SAPSQL_IN_ITAB_ILLEGAL_SIGN
    TEST-SEAM sign_check.
      CALL FUNCTION 'GET_DOMAIN_VALUES'
        EXPORTING
          domname         = c_ddsign
          text            = abap_true
        TABLES
          values_tab      = lt_ddsign
        EXCEPTIONS
          no_values_found = 1
          OTHERS          = 2.
    END-TEST-SEAM.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e007(prcg_cndnrecord_api).
    ENDIF.

    TEST-SEAM option_check.
      CALL FUNCTION 'GET_DOMAIN_VALUES'
        EXPORTING
          domname         = c_ddoption
          text            = abap_true
        TABLES
          values_tab      = lt_ddoption
        EXCEPTIONS
          no_values_found = 1
          OTHERS          = 2.
    END-TEST-SEAM.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
        MESSAGE e008(prcg_cndnrecord_api).
    ENDIF.

    LOOP AT it_cndnrecord_criteria_item ASSIGNING FIELD-SYMBOL(<fs_cndnrecord_criteria_item>).
      LOOP AT <fs_cndnrecord_criteria_item>-conditiontable ASSIGNING FIELD-SYMBOL(<fs_kotabnr>).
        CLEAR:ls_dom.
        ls_dom-sign   = <fs_kotabnr>-sign.
        ls_dom-option = <fs_kotabnr>-option.
        APPEND ls_dom TO lt_dom.
      ENDLOOP.

      LOOP AT <fs_cndnrecord_criteria_item>-conditionrecord ASSIGNING FIELD-SYMBOL(<fs_conrecd>).
        CLEAR:ls_dom.
        ls_dom-sign   = <fs_conrecd>-sign.
        ls_dom-option = <fs_conrecd>-option.
        APPEND ls_dom TO lt_dom.
      ENDLOOP.

      LOOP AT <fs_cndnrecord_criteria_item>-conditiontype ASSIGNING FIELD-SYMBOL(<fs_contype>).
        CLEAR:ls_dom.
        ls_dom-sign   = <fs_contype>-sign.
        ls_dom-option = <fs_contype>-option.
        APPEND ls_dom TO lt_dom.
      ENDLOOP.

      LOOP AT <fs_cndnrecord_criteria_item>-conditionfieldselectionoption ASSIGNING FIELD-SYMBOL(<fs_selopt>).
        CLEAR:ls_dom.
        ls_dom-sign   = <fs_selopt>-prcgconditionfieldrangesign.
        ls_dom-option = <fs_selopt>-prcgconditionfieldrangeoption.
        APPEND ls_dom TO lt_dom.
      ENDLOOP.
    ENDLOOP.

**Check sign option to avoid runtime error SAPSQL_IN_ITAB_ILLEGAL_SIGN
    LOOP AT lt_dom ASSIGNING FIELD-SYMBOL(<fs_dom>).
      IF <fs_dom>-sign IS INITIAL.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e005(prcg_cndnrecord_api).
      ENDIF.

      IF <fs_dom>-option IS INITIAL.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e006(prcg_cndnrecord_api).
      ENDIF.

      READ TABLE lt_ddsign WITH KEY domvalue_l = <fs_dom>-sign TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e007(prcg_cndnrecord_api)
          WITH <fs_dom>-sign.
      ENDIF.

      READ TABLE lt_ddoption WITH KEY domvalue_l = <fs_dom>-option TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_prcg_cndnrecord_exception
          MESSAGE e008(prcg_cndnrecord_api)
          WITH <fs_dom>-option.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD query.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* BOBRULA      | 20.02.2023 | 13489    : O2C  Pricing Mass Upload Tool *
*              |            | DS4K929425                               *
*----------------------------------------------------------------------*
 DATA:
      ls_cndn_record TYPE if_cnd_maint_ltd_types=>ty_cond_record_usage_a_s,
      ls_komg        TYPE komg,
      lv_kschl       TYPE kschl,
      lv_datbi       TYPE datbi.
    FIELD-SYMBOLS:
      <fs_t_cndn_validity> TYPE STANDARD TABLE,
      <fs_knumh>           TYPE knumh.

    CLEAR: er_cndn_validity, et_knumh.

    " Read condition data from DB
    mo_cond_db->get_cond_records_by_query(
      EXPORTING
        is_cndn_criteria_header       = is_cndn_criteria_header
        it_cndn_criteria_item         = it_cndn_criteria_item
        is_t681                       = is_t681
        is_cndn_query_option          = is_cndn_query_option
        it_cndn_orderby               = it_cndn_orderby
      IMPORTING
        er_cndn_valdty                = er_cndn_validity
        et_knumh                      = et_knumh
        es_cndn_count                 = es_cndn_count
    ).

    IF er_cndn_validity IS NOT BOUND.
      RETURN.
    ELSE.
      ASSIGN er_cndn_validity->* TO <fs_t_cndn_validity>.
    ENDIF.

    DATA(lv_sls_price_app) = mo_cond_db->get_sls_cndn_app_flag( ).

    " Filter final result for output
    LOOP AT <fs_t_cndn_validity> ASSIGNING FIELD-SYMBOL(<fs_cndn_valdty>).
      MOVE-CORRESPONDING <fs_cndn_valdty> TO ls_cndn_record.
      MOVE-CORRESPONDING <fs_cndn_valdty> TO ls_komg.

      ASSIGN COMPONENT if_cnd_maint_ltd_types=>c_fieldname_condition_key
          OF STRUCTURE <fs_cndn_valdty> TO <fs_knumh>.
      ASSIGN COMPONENT if_cnd_maint_ltd_types=>c_condition_type
          OF STRUCTURE <fs_cndn_valdty> TO FIELD-SYMBOL(<fs_kschl>).
      ASSIGN COMPONENT if_cnd_maint_ltd_types=>C_FIELDNAME_END_DATE
          OF STRUCTURE <fs_cndn_valdty> TO FIELD-SYMBOL(<fs_datbi>).
      lv_kschl = <fs_kschl>.
      lv_datbi = <fs_datbi>.

      " 1. Authorization check on each record
      TRY.
          mo_cond_checks->check_authority(
            EXPORTING
              is_cond_record = ls_cndn_record
              iv_aktyp       = if_cnd_maint_ltd_check=>c_aktyp_display
              iv_tabix       = sy-tabix
              is_komg        = ls_komg
              ).
        CATCH cx_cnd_maint_ltd_exception.
          " The user has no authority to display the condition record
          IF <fs_knumh> IS ASSIGNED.
            IF lv_sls_price_app = abap_true.
              CLEAR:<fs_cndn_valdty>.
              <fs_knumh> = ls_cndn_record-knumh.
              <fs_kschl> = lv_kschl.
              <fs_datbi> = lv_datbi.
            ELSE.
              DELETE et_knumh WHERE knumh = <fs_knumh>.
              DELETE <fs_t_cndn_validity>.
            ENDIF.
          ENDIF.
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.