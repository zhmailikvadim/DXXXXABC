CLASS zcl_sp_fps_perfect_pr DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF gtyp_s_log_data,
        pr_number      TYPE eban-banfn,
        pr_item_number TYPE eban-bnfpo,
        status         TYPE char10,
        status_message TYPE char60,
      END OF gtyp_s_log_data .
    TYPES:
      BEGIN OF gtyp_s_cor_match,
        planned_date   TYPE zsp_pr_planned_date,
        xfactory_date  TYPE zsp_pr_xfactory_date,
        ebeln          TYPE ebeln,
        ebelp          TYPE ebelp,
        matnr          TYPE zsp_article_gen_small,
        matnr_v        TYPE zsp_article_var_small,
        planned_qty    TYPE zsp_pr_planned_qty,
        werks          TYPE zsp_pr_plant_id,
        lifnr          TYPE zsp_pr_supplier_send,
        startprod_date TYPE zsp_pr_start_prod_date,
        mad_date       TYPE zsp_pr_mad_date,
        custid         TYPE zsp_pr_cust_id,
        motid          TYPE zsp_pr_mot_id,
        sourceid_lifnr TYPE zsp_product_version,
        erdat          TYPE erdat,
        erzet          TYPE erzet,

      END OF gtyp_s_cor_match .
    TYPES:
      gtyp_t_cor_match TYPE STANDARD TABLE OF gtyp_s_cor_match            WITH DEFAULT KEY .
    TYPES:
      gtyp_t_log_data       TYPE STANDARD TABLE OF gtyp_s_log_data            WITH DEFAULT KEY .
    TYPES:
      mtyp_t_dedicat  TYPE STANDARD TABLE OF zsp_t_pr_dedicat WITH DEFAULT KEY .
    TYPES:
      mtyp_t_mad_var  TYPE STANDARD TABLE OF zsp_t_pr_mad_var WITH DEFAULT KEY .
    TYPES:
      mtyp_t_match  TYPE STANDARD TABLE OF zsp_t_pr_match WITH DEFAULT KEY .
    TYPES:
      mtyp_t_mad_gen  TYPE STANDARD TABLE OF zsp_t_pr_mad_gen WITH DEFAULT KEY .
    TYPES:
      mtyp_t_xfactor  TYPE STANDARD TABLE OF zsp_t_pr_xfactor WITH DEFAULT KEY .
    TYPES:
      mtyp_t_plandat  TYPE STANDARD TABLE OF zsp_t_pr_plandat WITH DEFAULT KEY .
    TYPES:
      mtyp_t_strtdat  TYPE STANDARD TABLE OF zsp_t_pr_strtdat WITH DEFAULT KEY .
    TYPES:
      mtyp_t_err  TYPE STANDARD TABLE OF zsp_t_pr_err WITH DEFAULT KEY .

    CONSTANTS:
      BEGIN OF gc_staging_tables,
        drs        TYPE syst_msgv VALUE 'ZSP_T_PR_DEDICAT'  ##NO_TEXT,
        mad_gen    TYPE syst_msgv VALUE 'ZSP_T_PR_MAD_GEN'  ##NO_TEXT,
        mad_var    TYPE syst_msgv VALUE 'ZSP_T_PR_MAD_VAR'  ##NO_TEXT,
        xfactor    TYPE syst_msgv VALUE 'ZSP_T_PR_XFACTOR'  ##NO_TEXT,
        plan_date  TYPE syst_msgv VALUE 'ZSP_T_PR_PLANDAT'  ##NO_TEXT,
        start_date TYPE syst_msgv VALUE 'ZSP_T_PR_STARTDAT' ##NO_TEXT,
        match      TYPE syst_msgv VALUE 'ZSP_T_PR_MATCH'    ##NO_TEXT,
      END OF gc_staging_tables .
    CONSTANTS gc_log_object TYPE balobj_d VALUE 'ZSD_PR_MATCH' ##NO_TEXT.
    CONSTANTS:
      BEGIN OF gc_steps,
        step_1 TYPE zsp_step_number VALUE 'Step 1'  ##NO_TEXT,
        step_2 TYPE zsp_step_number VALUE 'Step 2'  ##NO_TEXT,
        step_3 TYPE zsp_step_number VALUE 'Step 3'  ##NO_TEXT,
        step_4 TYPE zsp_step_number VALUE 'Step 4'  ##NO_TEXT,
        step_5 TYPE zsp_step_number VALUE 'Step 5'  ##NO_TEXT,
        step_6 TYPE zsp_step_number VALUE 'Step 6' ##NO_TEXT,
      END OF gc_steps .

    CLASS-METHODS match_tables
      IMPORTING
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_err   TYPE mtyp_t_err
        !et_match TYPE mtyp_t_match .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-METHODS split_quantity
      IMPORTING
        !it_mad_gen TYPE mtyp_t_mad_gen OPTIONAL
      EXPORTING
        !et_mad_gen TYPE mtyp_t_mad_gen .
    CLASS-METHODS correct_drs
      IMPORTING
        !it_match TYPE mtyp_t_match OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match .
    CLASS-METHODS match_step_1
      IMPORTING
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match
        !et_err   TYPE mtyp_t_err .
    CLASS-METHODS match_step_2
      IMPORTING
        !it_match TYPE mtyp_t_match OPTIONAL
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match
        !et_err   TYPE mtyp_t_err .
    CLASS-METHODS match_step_3
      IMPORTING
        !it_match TYPE mtyp_t_match OPTIONAL
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match
        !et_err   TYPE mtyp_t_err .
    CLASS-METHODS match_step_4
      IMPORTING
        !it_match TYPE mtyp_t_match OPTIONAL
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match
        !et_err   TYPE mtyp_t_err .
    CLASS-METHODS match_step_5
      IMPORTING
        !it_match TYPE mtyp_t_match
        !iv_matnr TYPE zsp_article_gen_small OPTIONAL
      EXPORTING
        !et_match TYPE mtyp_t_match
        !et_err   TYPE mtyp_t_err .
ENDCLASS.



CLASS ZCL_SP_FPS_PERFECT_PR IMPLEMENTATION.


  METHOD correct_drs.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 12.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K932028                               *
*----------------------------------------------------------------------*

    DATA:
      lt_match     TYPE STANDARD TABLE OF zsp_t_pr_match,
      ls_match     TYPE  zsp_t_pr_match,
      lv_max       TYPE zsp_pr_xfactory_date,
      ls_cor_match TYPE gtyp_s_cor_match,
      lt_cor_match TYPE gtyp_t_cor_match.

    lt_match = it_match.


    LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match>).

      IF <ls_match>-custid IS NOT INITIAL.

        ls_cor_match-ebeln = <ls_match>-ebeln.
        ls_cor_match-custid = <ls_match>-custid.
        ls_cor_match-planned_date = <ls_match>-planned_date.
        ls_cor_match-xfactory_date = <ls_match>-xfactory_date.

        APPEND ls_cor_match TO lt_cor_match.

      ENDIF.

    ENDLOOP.

    SORT lt_cor_match BY planned_date xfactory_date.

    LOOP AT lt_cor_match ASSIGNING FIELD-SYMBOL(<ls_cor_match1>).

      IF lv_max < <ls_cor_match1>-xfactory_date.
        lv_max = <ls_cor_match1>-xfactory_date.
      ENDIF.

      AT END OF planned_date.
        LOOP AT lt_cor_match ASSIGNING FIELD-SYMBOL(<ls_match2>) WHERE planned_date = <ls_cor_match1>-planned_date. "#EC CI_NESTED
          <ls_match2>-xfactory_date = lv_max.            "#EC CI_STDSEQ
        ENDLOOP.
        CLEAR: lv_max.
      ENDAT.
    ENDLOOP.

    LOOP AT lt_cor_match ASSIGNING FIELD-SYMBOL(<ls_cor_match>).

      READ TABLE lt_match WITH KEY ebeln = <ls_cor_match>-ebeln "#EC CI_STDSEQ
                          INTO ls_match.

      IF sy-subrc = 0.

        ls_match-xfactory_date = <ls_cor_match>-xfactory_date.

        MODIFY lt_match FROM ls_match INDEX sy-tabix.

        CLEAR ls_match.
      ENDIF.

    ENDLOOP.

    et_match = lt_match.

  ENDMETHOD.


  METHOD match_step_1.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 29.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K932028                               *
*----------------------------------------------------------------------*
* ISAICSVI     | 26.03.2024 | 30477     : Start production and release *
*              |            | DS4K985140                               *
*----------------------------------------------------------------------*


    DATA: lt_dedicat         TYPE STANDARD TABLE OF zsp_t_pr_dedicat,
          lt_mad_var_drs     TYPE STANDARD TABLE OF zsp_t_pr_mad_var,
          lt_mad_var_regular TYPE STANDARD TABLE OF zsp_t_pr_mad_var,
          lt_match           TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_err_table       TYPE STANDARD TABLE OF zsp_t_pr_err,
          lt_err             TYPE STANDARD TABLE OF zsp_t_pr_err,
          lv_sum_mv          TYPE zsp_pr_planned_qty_mad_v,
          lv_sum_d           TYPE zsp_pr_planned_qty_mad_v,
          ls_dedicat         TYPE zsp_t_pr_dedicat,
          lv_matnr           TYPE zsp_article_gen_small,
          ls_mad_var_drs     TYPE zsp_t_pr_mad_var,
          ls_mad_var_regular TYPE zsp_t_pr_mad_var,
          ls_match           TYPE zsp_t_pr_match,
          lv_new_qty         TYPE zsp_pr_planned_qty,
          lv_tabix           TYPE sy-tabix,
          lv_tabix_d         TYPE sy-tabix.

    lv_matnr = iv_matnr.

    SELECT SUM( planned_qty )
      FROM zsp_t_pr_dedicat AS d
      WHERE matnr = @lv_matnr
      INTO @lv_sum_d.

    IF sy-subrc <> 0.
      CLEAR lv_sum_d.
    ENDIF.

    SELECT SUM( planned_qty )
      FROM zsp_t_pr_mad_var AS mv
      WHERE zibpwerks LIKE 'V%' AND
            matnr = @lv_matnr
      INTO @lv_sum_mv.

    IF sy-subrc <> 0.
      CLEAR lv_sum_mv.
    ENDIF.

    IF lv_sum_d IS NOT INITIAL AND lv_sum_d NE lv_sum_mv.

      MESSAGE e010(zsp_pr_match) WITH lv_sum_d
                                      lv_sum_mv INTO DATA(lv_msg).
      lt_err = VALUE #(           (         matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_1
                                            table_from = gc_staging_tables-drs
                                            table_to = gc_staging_tables-mad_var
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname ) ).

    ELSEIF lv_sum_d IS NOT INITIAL AND lv_sum_d = lv_sum_mv.

      SELECT
        mandt,
        matnr_v,
        zibpwerks,
        custid,
        mad_date,
        werks,
        zdivisionid,
        matnr,
        planned_qty,
        freeq
        FROM zsp_t_pr_dedicat
        WHERE matnr = @lv_matnr
        ORDER BY matnr_v ASCENDING,
                 zibpwerks ASCENDING,
                 mad_date ASCENDING,
                 planned_qty DESCENDING
       INTO TABLE @lt_dedicat.

      IF sy-subrc <> 0.
        CLEAR lt_dedicat.
      ENDIF.

      SELECT
        mandt,
        matnr_v,
        zibpwerks,
        sourceid_lifnr,
        mad_date,
        werks,
        zdivisionid,
        zloctype,
        matnr,
        planned_qty,
        freeq
         FROM zsp_t_pr_mad_var
        WHERE zibpwerks LIKE 'V%' AND
              matnr = @lv_matnr
        ORDER BY matnr_v ASCENDING,
                 zibpwerks ASCENDING,
                 mad_date ASCENDING,
                 planned_qty DESCENDING
        INTO TABLE @lt_mad_var_drs.

      IF sy-subrc <> 0.
        CLEAR lt_mad_var_drs.
      ENDIF.

      LOOP AT lt_mad_var_drs ASSIGNING FIELD-SYMBOL(<ls_mad_var_drs>).

        lv_tabix = sy-tabix.

        CLEAR ls_match.
        ls_match-mad_date = <ls_mad_var_drs>-mad_date.
        ls_match-matnr_v = <ls_mad_var_drs>-matnr_v.
        ls_match-planned_qty = <ls_mad_var_drs>-planned_qty.
        ls_match-freeq = <ls_mad_var_drs>-freeq.
        ls_match-matnr = <ls_mad_var_drs>-matnr.
        ls_match-werks = <ls_mad_var_drs>-werks.
        ls_match-zdivisionid = <ls_mad_var_drs>-zdivisionid.
        ls_match-zibpwerks = <ls_mad_var_drs>-zibpwerks.
        ls_match-sourceid_lifnr = <ls_mad_var_drs>-sourceid_lifnr.

        LOOP AT  lt_dedicat ASSIGNING FIELD-SYMBOL(<ls_dedicat>) WHERE "#EC CI_NESTED
           matnr_v = <ls_mad_var_drs>-matnr_v AND
           zibpwerks = <ls_mad_var_drs>-zibpwerks AND
           mad_date = <ls_mad_var_drs>-mad_date AND
           freeq > 0.

          lv_tabix_d = sy-tabix.

          CLEAR: ls_dedicat, ls_mad_var_drs.

          IF <ls_mad_var_drs>-freeq IS INITIAL.
            EXIT.
          ELSE.

            IF <ls_dedicat>-freeq > <ls_mad_var_drs>-freeq.
              lv_new_qty = <ls_mad_var_drs>-freeq.
            ELSE.
              lv_new_qty = <ls_dedicat>-freeq.
            ENDIF.

            ls_match-custid = <ls_dedicat>-custid.
            ls_match-planned_qty = lv_new_qty.
            ls_match-freeq = lv_new_qty.
            ls_match-erdat = sy-datum.
            ls_match-erzet = sy-uzeit.

            ls_dedicat-freeq = <ls_dedicat>-freeq - lv_new_qty.
            ls_mad_var_drs-freeq = <ls_mad_var_drs>-freeq - lv_new_qty.

            MODIFY lt_mad_var_drs INDEX lv_tabix FROM ls_mad_var_drs TRANSPORTING freeq.
            MODIFY lt_dedicat INDEX lv_tabix_d FROM ls_dedicat TRANSPORTING freeq.
            APPEND ls_match TO lt_match.

          ENDIF.

        ENDLOOP.

      ENDLOOP.

      LOOP AT lt_mad_var_drs ASSIGNING FIELD-SYMBOL(<ls_mad_var_drs_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e021(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #(           (       matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_1
                                            table_from = gc_staging_tables-drs
                                            table_to = gc_staging_tables-mad_var
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname ) ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      LOOP AT lt_dedicat ASSIGNING FIELD-SYMBOL(<ls_dedicat_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e009(zsp_pr_match) INTO lv_msg.
        lt_err = VALUE #(           (         matnr = lv_matnr
                                              message = lv_msg
                                              step = gc_steps-step_1
                                              table_from = gc_staging_tables-drs
                                              table_to = gc_staging_tables-mad_var
                                              erdat = sy-datum
                                              erzet = sy-uzeit
                                              ernam = sy-uname ) ).

        EXIT.

      ENDLOOP.

    ENDIF.

    IF lt_dedicat IS NOT INITIAL.

      SELECT
        mandt,
        matnr_v,
        zibpwerks,
        sourceid_lifnr,
        mad_date,
        werks,
        zdivisionid,
        zloctype,
        matnr,
        planned_qty,
        freeq
       FROM zsp_t_pr_mad_var
      WHERE zibpwerks NOT LIKE 'V%' AND
            matnr = @lv_matnr
      ORDER BY matnr_v ASCENDING,
               zibpwerks ASCENDING,
               mad_date ASCENDING,
               planned_qty DESCENDING
      INTO TABLE @lt_mad_var_regular.

    ELSE.

      SELECT
        mandt,
        matnr_v,
        zibpwerks,
        sourceid_lifnr,
        mad_date,
        werks,
        zdivisionid,
        zloctype,
        matnr,
        planned_qty,
        freeq
          FROM zsp_t_pr_mad_var
         WHERE matnr = @lv_matnr
         ORDER BY matnr_v ASCENDING,
                  zibpwerks ASCENDING,
                  mad_date ASCENDING,
                  planned_qty DESCENDING
         INTO TABLE @lt_mad_var_regular.

    ENDIF.

    IF sy-subrc <> 0.
      CLEAR lt_mad_var_regular.
    ENDIF.

    LOOP AT lt_mad_var_regular ASSIGNING FIELD-SYMBOL(<ls_mad_var_regular>).

      CLEAR: ls_match, ls_mad_var_regular.

      ls_match-mad_date = <ls_mad_var_regular>-mad_date.
      ls_match-matnr_v = <ls_mad_var_regular>-matnr_v.
      ls_match-planned_qty = <ls_mad_var_regular>-planned_qty.
      ls_match-freeq = <ls_mad_var_regular>-freeq.
      ls_match-matnr = <ls_mad_var_regular>-matnr.
      ls_match-werks = <ls_mad_var_regular>-werks.
      ls_match-zdivisionid = <ls_mad_var_regular>-zdivisionid.
      ls_match-zibpwerks = <ls_mad_var_regular>-zibpwerks.
      ls_match-sourceid_lifnr = <ls_mad_var_regular>-sourceid_lifnr.
      ls_match-erdat = sy-datum.
      ls_match-erzet = sy-uzeit.

      ls_mad_var_regular-freeq = <ls_mad_var_regular>-freeq - ls_match-planned_qty.
      MODIFY lt_mad_var_regular INDEX sy-tabix FROM ls_mad_var_regular TRANSPORTING freeq.
      APPEND ls_match TO lt_match.

    ENDLOOP.

    LOOP AT lt_mad_var_regular ASSIGNING FIELD-SYMBOL(<ls_mad_var_regular_check>) WHERE freeq IS NOT INITIAL.

      MESSAGE e011(zsp_pr_match) INTO lv_msg.
      lt_err_table = VALUE #(           (         matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_1
                                            table_from = gc_staging_tables-drs
                                            table_to = gc_staging_tables-mad_var
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname ) ).
      APPEND LINES OF lt_err_table TO lt_err.
      EXIT.

    ENDLOOP.

    et_err = lt_err.
    et_match = lt_match.

  ENDMETHOD.


  METHOD match_step_2.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 29.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K932028                               *
* ISAICSVI     | 07.04.2023 | 19817     : [CR]-FPS-WRICEF-010 - Perfec *
*              |            | DS4K949420                               *
* ISAICSVI     | 26.01.2024 | 28116 : Feature-[CR] Perfect PR Grouping *
*              |            | DS4K976266                               *
*----------------------------------------------------------------------*

    DATA: lt_mad_gen       TYPE STANDARD TABLE OF zsp_t_pr_mad_gen,
          lt_mad_gen_split TYPE STANDARD TABLE OF zsp_t_pr_mad_gen,
          lt_match         TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_new_match     TYPE STANDARD TABLE OF zsp_t_pr_match,
          lv_matnr         TYPE zsp_article_gen_small,
          ls_mad_gen       TYPE zsp_t_pr_mad_gen,
          ls_new_match     TYPE zsp_t_pr_match,
          ls_match         TYPE zsp_t_pr_match,
          lv_new_qty       TYPE zsp_pr_planned_qty,
          lv_sum_md        TYPE zsp_pr_planned_qty_mad_v,
          lv_sum_mt        TYPE zsp_pr_planned_qty_mad_v,
          lt_err_table     TYPE STANDARD TABLE OF zsp_t_pr_err,
          lt_err           TYPE STANDARD TABLE OF zsp_t_pr_err,
          lv_tabix         TYPE sy-tabix,
          lv_tabix_mg      TYPE sy-tabix.

    lt_match = it_match.
    lv_matnr = iv_matnr.

    SELECT SUM( planned_qty )
            FROM zsp_t_pr_mad_gen AS md
            WHERE matnr = @lv_matnr
            INTO @lv_sum_md.

    IF sy-subrc <> 0.
      CLEAR lv_sum_md.
    ENDIF.

    SELECT SUM( planned_qty )
           FROM @lt_match AS mt
           WHERE matnr = @lv_matnr
           INTO @lv_sum_mt.

    IF sy-subrc <> 0.
      CLEAR lv_sum_mt.
    ENDIF.

    IF lv_sum_mt NE lv_sum_md.

      MESSAGE e001(zsp_pr_match) WITH lv_sum_mt
                                      lv_sum_md INTO DATA(lv_msg).
      lt_err = VALUE #(                   ( matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_2
                                            table_from = gc_staging_tables-mad_gen
                                            table_to = gc_staging_tables-match
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname )  ).

    ELSE.

      SELECT *
       FROM zsp_t_pr_mad_gen
        WHERE matnr = @lv_matnr
        ORDER BY matnr ASCENDING,
                 zibpwerks ASCENDING,
                 mad_date ASCENDING ,
                 planned_qty DESCENDING
       INTO TABLE @lt_mad_gen.

      IF sy-subrc = 0.
        split_quantity( EXPORTING it_mad_gen = lt_mad_gen
        IMPORTING et_mad_gen = lt_mad_gen_split ).
      ENDIF.

      SORT lt_match BY matnr ASCENDING zibpwerks ASCENDING mad_date ASCENDING planned_qty DESCENDING.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match_step_2>).

        CLEAR: ls_match, lv_tabix.
        lv_tabix = sy-tabix.

        LOOP AT lt_mad_gen_split ASSIGNING FIELD-SYMBOL(<ls_mad_gen>) WHERE "#EC CI_NESTED
                      zibpwerks = <ls_match_step_2>-zibpwerks AND
                      mad_date = <ls_match_step_2>-mad_date AND
                      matnr = <ls_match_step_2>-matnr AND
                      freeq > 0.

          lv_tabix_mg = sy-tabix.

          IF <ls_match_step_2>-freeq IS INITIAL.
            EXIT.
          ENDIF.

          IF <ls_match_step_2>-freeq > <ls_mad_gen>-freeq.
            lv_new_qty = <ls_mad_gen>-freeq.
          ELSE.
            lv_new_qty = <ls_match_step_2>-freeq.
          ENDIF.

          ls_new_match = <ls_match_step_2>.
          ls_new_match-lifnr = <ls_mad_gen>-lifnr.
          ls_new_match-motid = <ls_mad_gen>-motid.
          ls_new_match-planned_qty = lv_new_qty.
          ls_new_match-freeq = lv_new_qty.
          ls_new_match-erdat = sy-datum.

          <ls_match_step_2>-freeq = <ls_match_step_2>-freeq - lv_new_qty.
          ls_mad_gen-freeq = <ls_mad_gen>-freeq - lv_new_qty.
          ls_match-freeq = <ls_match_step_2>-freeq.

          APPEND ls_new_match TO lt_new_match.
          MODIFY lt_mad_gen_split INDEX lv_tabix_mg FROM ls_mad_gen TRANSPORTING freeq.
          MODIFY lt_match INDEX lv_tabix FROM ls_match TRANSPORTING freeq.

        ENDLOOP.
      ENDLOOP.

      LOOP AT lt_mad_gen_split ASSIGNING FIELD-SYMBOL(<ls_mad_gen_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e012(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #(                (  matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_2
                                            table_from = gc_staging_tables-mad_gen
                                            table_to = gc_staging_tables-match
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match>) WHERE freeq IS NOT INITIAL.

        MESSAGE e013(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #(                (  matnr = lv_matnr
                                            message = lv_msg
                                            step = gc_steps-step_2
                                            table_from = gc_staging_tables-mad_gen
                                            table_to = gc_staging_tables-match
                                            erdat = sy-datum
                                            erzet = sy-uzeit
                                            ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

    ENDIF.

    et_match = lt_new_match.
    et_err = lt_err.

  ENDMETHOD.


  METHOD match_step_3.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 29.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K932028                               *
*----------------------------------------------------------------------*

    DATA: lt_match     TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_new_match TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_xfactor   TYPE STANDARD TABLE OF zsp_t_pr_xfactor,
          lv_matnr     TYPE zsp_article_gen_small,
          ls_xfactor   TYPE zsp_t_pr_xfactor,
          ls_match     TYPE zsp_t_pr_match,
          ls_new_match TYPE zsp_t_pr_match,
          lt_err_table TYPE STANDARD TABLE OF zsp_t_pr_err,
          lt_err       TYPE STANDARD TABLE OF zsp_t_pr_err,
          lv_sum_mt    TYPE zsp_pr_planned_qty_mad_v,
          lv_sum_xf    TYPE zsp_pr_planned_qty_mad_v,
          lv_new_qty   TYPE zsp_pr_planned_qty_mad_v,
          lv_tabix     TYPE sy-tabix,
          lv_tabix_xf  TYPE sy-tabix.

    lt_match = it_match.
    lv_matnr = iv_matnr.

    SELECT SUM( planned_qty )
    FROM zsp_t_pr_xfactor AS xf
    WHERE matnr = @lv_matnr
    INTO @lv_sum_xf.

    IF sy-subrc <> 0.
      CLEAR lv_sum_xf.
    ENDIF.

    SELECT SUM( planned_qty )
      FROM @lt_match AS mt
      WHERE matnr = @lv_matnr
      INTO @lv_sum_mt.

    IF sy-subrc <> 0.
      CLEAR lv_sum_mt.
    ENDIF.

    IF lv_sum_mt NE lv_sum_xf.

      MESSAGE e002(zsp_pr_match) WITH lv_sum_mt
                                      lv_sum_xf INTO DATA(lv_msg).
      lt_err = VALUE #(                    ( matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_3
                                             table_from = gc_staging_tables-xfactor
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uname )  ).
    ELSE.

      SELECT *
        FROM zsp_t_pr_xfactor
        WHERE matnr = @lv_matnr
        ORDER BY matnr ASCENDING,
                 zibpwerks ASCENDING,
                 lifnr ASCENDING,
                 motid ASCENDING,
                 xfactory_date ASCENDING,
                 planned_qty DESCENDING
        INTO TABLE @lt_xfactor.

      IF sy-subrc <> 0.
        CLEAR lt_xfactor.
      ENDIF.

      SORT lt_match BY matnr ASCENDING zibpwerks ASCENDING lifnr ASCENDING motid ASCENDING mad_date ASCENDING  planned_qty DESCENDING.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match_step_3>).

        CLEAR: ls_match, lv_tabix.

        lv_tabix = sy-tabix.

        LOOP AT lt_xfactor ASSIGNING FIELD-SYMBOL(<ls_xfactor>) WHERE "#EC CI_NESTED
           lifnr = <ls_match_step_3>-lifnr AND
           motid = <ls_match_step_3>-motid AND
           zibpwerks = <ls_match_step_3>-zibpwerks AND
           matnr = <ls_match_step_3>-matnr AND
           freeq > 0.

          lv_tabix_xf = sy-tabix.

          IF <ls_match_step_3>-freeq IS INITIAL.
            EXIT.
          ELSE.

            IF <ls_match_step_3>-freeq > <ls_xfactor>-freeq.
              lv_new_qty = <ls_xfactor>-freeq.
            ELSE.
              lv_new_qty = <ls_match_step_3>-freeq.
            ENDIF.

            ls_new_match = <ls_match_step_3>.
            ls_new_match-xfactory_date = <ls_xfactor>-xfactory_date.
            ls_new_match-planned_qty = lv_new_qty.
            ls_new_match-freeq = lv_new_qty.

            <ls_match_step_3>-freeq = <ls_match_step_3>-freeq - lv_new_qty.
            ls_xfactor-freeq = <ls_xfactor>-freeq - lv_new_qty.
            ls_match-freeq = <ls_match_step_3>-freeq.

            APPEND ls_new_match TO lt_new_match.
            MODIFY lt_match INDEX lv_tabix FROM ls_match TRANSPORTING freeq.
            MODIFY lt_xfactor INDEX lv_tabix_xf FROM ls_xfactor TRANSPORTING freeq.

          ENDIF.
        ENDLOOP.
      ENDLOOP.

      LOOP AT lt_xfactor ASSIGNING FIELD-SYMBOL(<ls_mad_gen_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e014(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #(                  ( matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_3
                                             table_from = gc_staging_tables-xfactor
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match>) WHERE freeq IS NOT INITIAL.

        MESSAGE e013(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #(                  ( matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_3
                                             table_from = gc_staging_tables-xfactor
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

    ENDIF.

    et_match = lt_new_match.
    et_err = lt_err.

  ENDMETHOD.


  METHOD match_step_4.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 29.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K932028                               *
*----------------------------------------------------------------------*

    DATA:
      lt_match     TYPE STANDARD TABLE OF zsp_t_pr_match,
      lt_plandat   TYPE STANDARD TABLE OF zsp_t_pr_plandat,
      lt_new_match TYPE STANDARD TABLE OF zsp_t_pr_match,
      lv_matnr     TYPE zsp_article_gen_small,
      ls_plandat   TYPE zsp_t_pr_plandat,
      lv_sum_p     TYPE zsp_pr_planned_qty_mad_v,
      lv_sum_mt    TYPE zsp_pr_planned_qty_mad_v,
      ls_match     TYPE zsp_t_pr_match,
      ls_new_match TYPE zsp_t_pr_match,
      lv_tabix     TYPE sy-tabix,
      lv_tabix_p   TYPE sy-tabix,
      lt_err_table TYPE STANDARD TABLE OF zsp_t_pr_err,
      lt_err       TYPE STANDARD TABLE OF zsp_t_pr_err,
      lv_new_qty   TYPE zsp_pr_planned_qty.

    lt_match = it_match.
    lv_matnr = iv_matnr.

    SELECT SUM( planned_qty )
      FROM @lt_match AS mt
      WHERE matnr = @lv_matnr
      INTO @lv_sum_mt.

    IF sy-subrc <> 0.
      CLEAR lv_sum_mt.
    ENDIF.

    SELECT SUM( planned_qty )
      FROM zsp_t_pr_plandat AS p
      WHERE matnr = @lv_matnr
      INTO @lv_sum_p.

    IF sy-subrc <> 0.
      CLEAR lv_sum_p.
    ENDIF.

    IF lv_sum_mt NE lv_sum_p.

      MESSAGE e006(zsp_pr_match) WITH lv_sum_mt
                                      lv_sum_p INTO DATA(lv_msg).
      lt_err = VALUE #( (                    matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_4
                                             table_from = gc_staging_tables-plan_date
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uname )  ).
    ELSE.

      SELECT *
             FROM zsp_t_pr_plandat
             WHERE matnr = @lv_matnr
        ORDER BY matnr ASCENDING,
                 lifnr ASCENDING,
                 planned_date ASCENDING,
                 planned_qty DESCENDING
             INTO TABLE @lt_plandat.

      IF sy-subrc <> 0.
        CLEAR lt_plandat.
      ENDIF.

      SORT lt_match BY matnr ASCENDING lifnr ASCENDING xfactory_date ASCENDING mad_date ASCENDING  planned_qty DESCENDING.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match_step_4>).

        CLEAR ls_match.

        lv_tabix = sy-tabix.

        LOOP AT lt_plandat ASSIGNING FIELD-SYMBOL(<ls_plandat>) WHERE lifnr = <ls_match_step_4>-lifnr AND "#EC CI_NESTED
                                                                      matnr = <ls_match_step_4>-matnr AND
                                                                      freeq > 0.

          lv_tabix_p = sy-tabix.

          IF <ls_match_step_4>-freeq IS INITIAL.

            EXIT.

          ELSE.

            IF <ls_match_step_4>-freeq > <ls_plandat>-freeq.
              lv_new_qty = <ls_plandat>-freeq.
            ELSE.
              lv_new_qty = <ls_match_step_4>-freeq.
            ENDIF.

            ls_new_match = <ls_match_step_4>.
            ls_new_match-sourceid_lifnr = <ls_plandat>-sourceid_lifnr.
            ls_new_match-planned_date = <ls_plandat>-planned_date.
            ls_new_match-planned_qty = lv_new_qty.
            ls_new_match-freeq = lv_new_qty.

            <ls_match_step_4>-freeq = <ls_match_step_4>-freeq - lv_new_qty.
            <ls_plandat>-freeq = <ls_plandat>-freeq - lv_new_qty.
            ls_match-freeq = <ls_match_step_4>-freeq.
            ls_plandat-freeq = <ls_plandat>-freeq.

            APPEND ls_new_match TO lt_new_match.
            MODIFY lt_plandat INDEX lv_tabix_p FROM ls_plandat TRANSPORTING freeq.
            MODIFY lt_match INDEX lv_tabix FROM ls_match TRANSPORTING freeq.

          ENDIF.

        ENDLOOP.

      ENDLOOP.

      LOOP AT lt_plandat ASSIGNING FIELD-SYMBOL(<ls_plandat_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e015(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #( (                          matnr = lv_matnr
                                                     message = lv_msg
                                                     step = gc_steps-step_4
                                                     table_from = gc_staging_tables-plan_date
                                                     table_to = gc_staging_tables-match
                                                     erdat = sy-datum
                                                     erzet = sy-uzeit
                                                     ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match>) WHERE freeq IS NOT INITIAL.

        MESSAGE e013(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #( (                          matnr = lv_matnr
                                                     message = lv_msg
                                                     step = gc_steps-step_4
                                                     table_from = gc_staging_tables-plan_date
                                                     table_to = gc_staging_tables-match
                                                     erdat = sy-datum
                                                     erzet = sy-uzeit
                                                     ernam = sy-uname )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

    ENDIF.

    et_match = lt_new_match.
    et_err = lt_err.

  ENDMETHOD.


  METHOD match_step_5.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 29.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K932028                               *
*----------------------------------------------------------------------*

    DATA: lt_match     TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_new_match TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_strtdat   TYPE STANDARD TABLE OF zsp_t_pr_strtdat,
          ls_strtdat   TYPE zsp_t_pr_strtdat,
          ls_match     TYPE zsp_t_pr_match,
          ls_new_match TYPE zsp_t_pr_match,
          lv_tabix     TYPE sy-tabix,
          lv_tabix_s   TYPE sy-tabix,
          lv_ebeln     TYPE ebeln,
          lv_matnr     TYPE zsp_article_gen_small,
          lt_err_table TYPE STANDARD TABLE OF zsp_t_pr_err,
          lt_err       TYPE STANDARD TABLE OF zsp_t_pr_err,
          lv_sum_mt    TYPE zsp_pr_planned_qty_mad_v,
          lv_sum_s     TYPE zsp_pr_planned_qty_mad_v,
          lv_new_qty   TYPE zsp_pr_planned_qty_mad_v.

    lt_match = it_match.
    lv_matnr = iv_matnr.

    SELECT SUM( planned_qty )
        FROM @lt_match AS mt
        WHERE matnr = @lv_matnr
        INTO @lv_sum_mt.

    IF sy-subrc <> 0.
      CLEAR lv_sum_mt.
    ENDIF.

    SELECT SUM( planned_qty )
       FROM zsp_t_pr_strtdat AS s
       WHERE matnr = @lv_matnr
       INTO @lv_sum_s.

    IF sy-subrc <> 0.
      CLEAR lv_sum_s.
    ENDIF.

    IF lv_sum_mt NE lv_sum_s.

      MESSAGE e007(zsp_pr_match) WITH lv_sum_mt
                                      lv_sum_s INTO DATA(lv_msg).
      lt_err = VALUE #( (                  matnr = lv_matnr
                                           message = lv_msg
                                           step = gc_steps-step_5
                                           table_from = gc_staging_tables-start_date
                                           table_to = gc_staging_tables-match
                                           erdat = sy-datum
                                           erzet = sy-uzeit
                                           ernam = sy-uzeit )  ).
    ELSE.

      SELECT *
       FROM zsp_t_pr_strtdat
       WHERE matnr = @lv_matnr
       ORDER BY matnr ASCENDING,
                 lifnr ASCENDING,
                 sourceid_lifnr ASCENDING,
                 startprod_date ASCENDING,
                 planned_qty DESCENDING
       INTO TABLE @lt_strtdat .

      IF sy-subrc <> 0.
        CLEAR lt_strtdat.
      ENDIF.

      SORT lt_match BY matnr ASCENDING lifnr ASCENDING sourceid_lifnr ASCENDING
                       planned_date ASCENDING xfactory_date ASCENDING
                       mad_date ASCENDING planned_qty DESCENDING.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match_step_5>).

        CLEAR: ls_match, lv_tabix.

        lv_tabix = sy-tabix.

        LOOP AT lt_strtdat ASSIGNING FIELD-SYMBOL(<ls_strtdat>) WHERE lifnr = <ls_match_step_5>-lifnr AND "#EC CI_NESTED
                                                                      matnr = <ls_match_step_5>-matnr AND
                                                                      freeq > 0 . "#EC CI_STDSEQ

          lv_tabix_s = sy-tabix.

          IF <ls_match_step_5>-freeq IS INITIAL.
            EXIT.
          ELSE.

            IF <ls_match_step_5>-freeq > <ls_strtdat>-freeq.
              lv_new_qty = <ls_strtdat>-freeq.
            ELSE.
              lv_new_qty = <ls_match_step_5>-freeq.
            ENDIF.

            ls_new_match = <ls_match_step_5>.
            ls_new_match-startprod_date = <ls_strtdat>-startprod_date.

            <ls_match_step_5>-freeq = <ls_match_step_5>-freeq - lv_new_qty.
            <ls_strtdat>-freeq = <ls_strtdat>-freeq - lv_new_qty.

            ls_strtdat-freeq = <ls_strtdat>-freeq.
            ls_match-freeq = <ls_match_step_5>-freeq.

            APPEND ls_new_match TO lt_new_match.
            MODIFY lt_strtdat INDEX lv_tabix_s FROM ls_strtdat TRANSPORTING freeq.
            MODIFY lt_match INDEX lv_tabix FROM ls_match TRANSPORTING freeq.

          ENDIF.
        ENDLOOP.
      ENDLOOP.

      LOOP AT lt_strtdat ASSIGNING FIELD-SYMBOL(<ls_strtdat_check>) WHERE freeq IS NOT INITIAL.

        MESSAGE e016(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #( (                  matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_5
                                             table_from = gc_staging_tables-start_date
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uzeit )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      LOOP AT lt_match ASSIGNING FIELD-SYMBOL(<ls_match>) WHERE freeq IS NOT INITIAL.

        MESSAGE e013(zsp_pr_match) INTO lv_msg.
        lt_err_table = VALUE #( (                  matnr = lv_matnr
                                             message = lv_msg
                                             step = gc_steps-step_5
                                             table_from = gc_staging_tables-start_date
                                             table_to = gc_staging_tables-match
                                             erdat = sy-datum
                                             erzet = sy-uzeit
                                             ernam = sy-uzeit )  ).
        APPEND LINES OF lt_err_table TO lt_err.
        EXIT.

      ENDLOOP.

      CLEAR lv_ebeln.

      LOOP AT lt_new_match ASSIGNING FIELD-SYMBOL(<ls_new_match>).

        CLEAR ls_match.

        lv_ebeln = lv_ebeln + 1.

        ls_match-ebeln = lv_ebeln.
        ls_match-ebelp = 10.

        MODIFY lt_new_match FROM ls_match TRANSPORTING ebeln ebelp.

      ENDLOOP.

    ENDIF.

    et_match = lt_new_match.
    et_err = lt_err.

  ENDMETHOD.


  METHOD match_tables.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 10.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K932028                               *
* ISAICSVI     | 07.04.2023 | 19817     : [CR]-FPS-WRICEF-010 - Perfect*
*              |            | DS4K949420                               *
*----------------------------------------------------------------------*

    DATA: lt_correct_match TYPE STANDARD TABLE OF zsp_t_pr_match,
          lv_matnr         TYPE zsp_article_gen_small,
          lt_err           TYPE STANDARD TABLE OF zsp_t_pr_err,
          lt_match_step_1  TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_match_step_2  TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_match_step_3  TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_match_step_4  TYPE STANDARD TABLE OF zsp_t_pr_match,
          lt_match_step_5  TYPE STANDARD TABLE OF zsp_t_pr_match.

    lv_matnr = iv_matnr.

    match_step_1(  EXPORTING iv_matnr = lv_matnr
                   IMPORTING et_match = lt_match_step_1
                             et_err = lt_err ).

    IF lt_err IS INITIAL.

      match_step_2( EXPORTING it_match = lt_match_step_1
                              iv_matnr = lv_matnr
                    IMPORTING et_match = lt_match_step_2
                              et_err = lt_err ).

      IF lt_err IS INITIAL.

        match_step_3( EXPORTING it_match = lt_match_step_2
                                iv_matnr = lv_matnr
                      IMPORTING et_match = lt_match_step_3
                                et_err = lt_err ).

        IF lt_err IS INITIAL.

          match_step_4( EXPORTING it_match = lt_match_step_3
                                  iv_matnr = lv_matnr
                        IMPORTING et_match = lt_match_step_4
                                  et_err = lt_err ).

          IF lt_err IS INITIAL.

            match_step_5( EXPORTING it_match = lt_match_step_4
                                    iv_matnr = lv_matnr
                          IMPORTING et_match = lt_match_step_5
                                    et_err = lt_err ).

            IF lt_err IS INITIAL.

              correct_drs( EXPORTING it_match = lt_match_step_5
                           IMPORTING et_match = lt_correct_match ).

              et_match = lt_correct_match.

            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    et_err = lt_err.

  ENDMETHOD.


  METHOD split_quantity.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 12.10.2022 | 14172     : [BUILD] - FPS-WRICEF-010     *
*              |            | DS4K932028                               *
* ISAICSVI     | 07.04.2023 | 19817     : [CR]-FPS-WRICEF-010          *
*              |            | DS4K949420                               *
* ISAICSVI     | 26.01.2024 | 28116 : Feature-[CR] Perfect PR Grouping *
*              |            | DS4K976266                               *
*----------------------------------------------------------------------*

    DATA:
      lt_mad_gen       TYPE STANDARD TABLE OF zsp_t_pr_mad_gen,
      lt_mad_gen_split TYPE STANDARD TABLE OF zsp_t_pr_mad_gen,
      ls_mad_gen       TYPE zsp_t_pr_mad_gen,
      lv_qty_max       TYPE zsp_pr_planned_qty_mad_v,
      lv_m             TYPE zsp_pr_planned_qty_mad_v,
      lv_n             TYPE i.

    lt_mad_gen = it_mad_gen.

    TRY .
        DATA(lv_po_max) = zcl_pe_hm_basic=>get_value( iv_id =  '650'  ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_div_id_01) = zcl_pe_hm_basic=>get_value( iv_id = '657' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_div_id_02) = zcl_pe_hm_basic=>get_value( iv_id = '659' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_div_id_03) = zcl_pe_hm_basic=>get_value( iv_id ='661' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    LOOP AT lt_mad_gen ASSIGNING FIELD-SYMBOL(<ls_mad_gen>).

      CLEAR: lv_qty_max, lv_n, lv_m.

      IF <ls_mad_gen>-zdivisionid = lv_div_id_01 OR  <ls_mad_gen>-zdivisionid = lv_div_id_02 OR <ls_mad_gen>-zdivisionid = lv_div_id_03.
        lv_qty_max = lv_po_max.
      ENDIF.

      IF <ls_mad_gen>-planned_qty > lv_qty_max AND lv_qty_max IS NOT INITIAL..

        lv_n = <ls_mad_gen>-planned_qty DIV lv_qty_max.
        lv_m = <ls_mad_gen>-planned_qty MOD lv_qty_max.

        ls_mad_gen = <ls_mad_gen>.

        WHILE lv_n > 0.

          ls_mad_gen-planned_qty = lv_qty_max.
          ls_mad_gen-freeq = lv_qty_max.
          lv_n = lv_n - 1.

          APPEND ls_mad_gen TO lt_mad_gen_split.
          CLEAR: ls_mad_gen-planned_qty, ls_mad_gen-freeq.

        ENDWHILE.

        IF lv_m IS NOT INITIAL.

          ls_mad_gen-planned_qty = lv_m.
          ls_mad_gen-freeq = lv_m.
          APPEND ls_mad_gen TO lt_mad_gen_split.
          CLEAR: ls_mad_gen-planned_qty, ls_mad_gen-freeq.

        ENDIF.

        DELETE lt_mad_gen WHERE matnr = <ls_mad_gen>-matnr AND
                zibpwerks = <ls_mad_gen>-zibpwerks AND
                lifnr = <ls_mad_gen>-lifnr AND
                mad_date = <ls_mad_gen>-mad_date AND
                motid = <ls_mad_gen>-motid AND
                planned_qty = <ls_mad_gen>-planned_qty.

      ENDIF.

    ENDLOOP.

    APPEND LINES OF lt_mad_gen_split TO lt_mad_gen.

    SORT lt_mad_gen BY matnr ASCENDING zibpwerks ASCENDING mad_date ASCENDING planned_qty DESCENDING.

    et_mad_gen = lt_mad_gen.

  ENDMETHOD.
ENDCLASS.