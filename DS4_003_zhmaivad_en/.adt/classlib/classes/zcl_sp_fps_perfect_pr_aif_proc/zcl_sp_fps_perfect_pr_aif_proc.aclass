class ZCL_SP_FPS_PERFECT_PR_AIF_PROC definition
  public
  final
  create public .

public section.

  constants:
    BEGIN OF gc_log_attributes,
        message_id_cust      TYPE symsgid VALUE 'ZSP_PR_MATCH',
        message_id_aif       TYPE symsgid VALUE 'BAPI',
        message_type_success TYPE symsgty VALUE 'S',
        message_type_error   TYPE symsgty VALUE 'E',
        message_no_0         TYPE symsgno VALUE '000',
        message_no_3         TYPE symsgno VALUE '3',
        message_no_4         TYPE symsgno VALUE '4',
        message_no_5         TYPE symsgno VALUE '5',
        message_no_8         TYPE symsgno VALUE '8',
      END OF gc_log_attributes .
  constants:
    BEGIN OF gc_pr_staging_tables,
        drs        TYPE syst_msgv VALUE 'for DRS'                                    ##NO_TEXT,
        mad_gen    TYPE syst_msgv VALUE 'for MAD at Article level'                   ##NO_TEXT,
        mad_var    TYPE syst_msgv VALUE 'for MAD at Variant level'                   ##NO_TEXT,
        xfactory   TYPE syst_msgv VALUE 'for X-FACTORY at Article level'             ##NO_TEXT,
        plan_date  TYPE syst_msgv VALUE 'for Planned date at Article level'          ##NO_TEXT,
        start_date TYPE syst_msgv VALUE 'for Start Production Date at Article level' ##NO_TEXT,
      END OF gc_pr_staging_tables .

  methods CONSTRUCTOR
    importing
      !IS_INPUT_DATA type ZSP_S_AIF_PR_MATCH .
  methods FILL_STAGE_TABLE .
  methods GET_LOG_MESS
    returning
      value(RT_LOG) type BAPIRET2_T .
protected section.
private section.

  data MS_PROCESS_DATA type ZSP_S_AIF_PR_MATCH .
  data MT_MESSAGES_LOG type BAPIRET2_T .
  constants:
    BEGIN OF gc_identifier,
      drs          TYPE zsp_pr_identifier VALUE 'CONSTRAINEDDEMANDDRS',
      mad_var      TYPE zsp_pr_identifier VALUE 'PRODUCTIONDC',
      mad_gen      TYPE zsp_pr_identifier VALUE 'TRANSPORT',
      ex_factory   TYPE zsp_pr_identifier VALUE 'TRANSPORTDS',
      planned_date TYPE zsp_pr_identifier VALUE 'PRODUCTION',
      start_date   TYPE zsp_pr_identifier VALUE 'PRODUCTIONCOMPONENT',
    END OF gc_identifier .

  methods ADD_LOG_MESS
    importing
      !IV_MESS_TYPE type SYMSGTY
      !IV_MESS_NO type SYMSGNO
      !IV_MESS_VAR type SYST_MSGV optional .
ENDCLASS.



CLASS ZCL_SP_FPS_PERFECT_PR_AIF_PROC IMPLEMENTATION.


  METHOD ADD_LOG_MESS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 12.10.2022 | 14100     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K931867                               *
*----------------------------------------------------------------------*

    /aif/cl_appl_log_writer=>convert_msg_to_bapiret(
      EXPORTING
        iv_msgty      = iv_mess_type
        iv_msgid      = gc_log_attributes-message_id_cust
        iv_msgno      = iv_mess_no
        iv_msgv1      = iv_mess_var
      IMPORTING
        et_return_tab = DATA(lt_return_tab_log_data) ).

    APPEND LINES OF lt_return_tab_log_data TO mt_messages_log.

  ENDMETHOD.


  METHOD CONSTRUCTOR.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 12.10.2022 | 14100     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K931867                               *
*----------------------------------------------------------------------*

    ms_process_data = is_input_data.

    fill_stage_table( ).

  ENDMETHOD.


  METHOD FILL_STAGE_TABLE.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 12.10.2022 | 14100     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K931867                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 24.11.2022 | 15549     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K936492                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 14.02.2023 | 15549     : [BUILD] - FPS-WRICEF-010 - P *
*              |            | DS4K936492                               *
*----------------------------------------------------------------------*


    DATA: lt_dedicat    TYPE TABLE OF zsp_t_pr_dedicat,
          lt_mad_gen    TYPE TABLE OF zsp_t_pr_mad_gen,
          lt_mad_var    TYPE TABLE OF zsp_t_pr_mad_var,
          lt_xfactor    TYPE TABLE OF zsp_t_pr_xfactor,
          lt_plan_date  TYPE TABLE OF zsp_t_pr_plandat,
          lt_start_date TYPE TABLE OF zsp_t_pr_strtdat.

    CASE ms_process_data-line_identifier-identifier.
      WHEN gc_identifier-drs.
        IF ms_process_data-lines_drs IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-drs ).

          MESSAGE i005(zsp_pr_match) WITH gc_pr_staging_tables-drs INTO DATA(lv_msg)    ##NEEDED.
        ELSE.
          lt_dedicat = VALUE #( FOR ls_process_drs
                                IN  ms_process_data-lines_drs
                                  ( matnr_v     = ls_process_drs-prdid_var
                                    werks       = ls_process_drs-locid
                                    zibpwerks   = ls_process_drs-locid_ibp
                                    custid      = ls_process_drs-custid
                                    mad_date    = ls_process_drs-periodid4
                                    zdivisionid = ls_process_drs-zdivisionid
                                    matnr       = ls_process_drs-prdid_gen
                                    planned_qty = ls_process_drs-zspconstraineddemanddprsto
                                    freeq       = ls_process_drs-zspconstraineddemanddprsto ) ).
          TRY .
              DELETE FROM zsp_t_pr_dedicat.                   "#EC CI_NOWHERE   "#EC CI_SUBRC
              INSERT zsp_t_pr_dedicat FROM TABLE lt_dedicat.
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-drs ).
                MESSAGE i003(zsp_pr_match) WITH gc_pr_staging_tables-drs INTO lv_msg         ##NEEDED.
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              MESSAGE i008(zsp_pr_match) INTO lv_msg   ##NEEDED.
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN gc_identifier-mad_gen.
        IF ms_process_data-lines_mad_gen IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-mad_gen ).
        ELSE.
          lt_mad_gen = VALUE #( FOR ls_process_mad_gen
                                IN  ms_process_data-lines_mad_gen
                                  ( matnr       = ls_process_mad_gen-prdid_gen
                                    werks       = ls_process_mad_gen-locid
                                    zibpwerks   = ls_process_mad_gen-locid_ibp
                                    lifnr       = ls_process_mad_gen-locfr
                                    mad_date    = ls_process_mad_gen-periodid4
                                    zdivisionid = ls_process_mad_gen-zdivisionid
                                    motid       = ls_process_mad_gen-motid
                                    planned_qty = ls_process_mad_gen-transport
                                    freeq       = ls_process_mad_gen-transport ) ).
          TRY .
              DELETE FROM zsp_t_pr_mad_gen.                   "#EC CI_NOWHERE   "#EC CI_SUBRC
              INSERT zsp_t_pr_mad_gen FROM TABLE lt_mad_gen .
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-mad_gen ).
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN gc_identifier-mad_var.
        IF ms_process_data-lines_mad_var IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-mad_var ).
        ELSE.
          lt_mad_var = VALUE #( FOR ls_process_mad_var
                                IN  ms_process_data-lines_mad_var
                                  ( matnr_v        = ls_process_mad_var-prdid_var
                                    werks          = ls_process_mad_var-locid
                                    zibpwerks      = ls_process_mad_var-locid_ibp
                                    sourceid_lifnr = ls_process_mad_var-sourceid
                                    mad_date       = ls_process_mad_var-periodid4
                                    zdivisionid    = ls_process_mad_var-zdivisionid
                                    zloctype       = ls_process_mad_var-zloctype
                                    matnr          = ls_process_mad_var-prdid_gen
                                    planned_qty    = ls_process_mad_var-production
                                    freeq          = ls_process_mad_var-production ) ).
          TRY .
              DELETE FROM zsp_t_pr_mad_var.                   "#EC CI_NOWHERE   "#EC CI_SUBRC
              INSERT zsp_t_pr_mad_var FROM TABLE lt_mad_var.
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-mad_var ).
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN gc_identifier-ex_factory.
        IF ms_process_data-lines_xfactory IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-xfactory ).
        ELSE.
          lt_xfactor = VALUE #( FOR ls_process_xfactory
                                IN  ms_process_data-lines_xfactory
                                  ( matnr         = ls_process_xfactory-prdid_gen
                                    lifnr         = ls_process_xfactory-locid
                                    werks         = ls_process_xfactory-locto
                                    zibpwerks     = ls_process_xfactory-locid_ibp
                                    xfactory_date = ls_process_xfactory-periodid4
                                    zdivisionid   = ls_process_xfactory-zdivisionid
                                    motid         = ls_process_xfactory-motid
                                    planned_qty   = ls_process_xfactory-transportds
                                    freeq         = ls_process_xfactory-transportds ) ).
          TRY .
              DELETE FROM zsp_t_pr_xfactor.                   "#EC CI_NOWHERE   "#EC CI_SUBRC
              INSERT zsp_t_pr_xfactor FROM TABLE lt_xfactor.
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-xfactory ).
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN gc_identifier-planned_date.
        IF ms_process_data-lines_plan_date IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-plan_date ).
        ELSE.
          lt_plan_date = VALUE #( FOR ls_process_plan_date
                                  IN  ms_process_data-lines_plan_date
                                    ( matnr          = ls_process_plan_date-prdid_gen
                                      lifnr          = ls_process_plan_date-locid
                                      sourceid_lifnr = ls_process_plan_date-sourceid
                                      planned_date   = ls_process_plan_date-periodid4
                                      zdivisionid    = ls_process_plan_date-zdivisionid
                                      planned_qty    = ls_process_plan_date-production
                                      freeq          = ls_process_plan_date-production ) ).
          TRY .
              DELETE FROM zsp_t_pr_plandat.                     "#EC CI_NOWHERE   "#EC CI_SUBRC
              INSERT zsp_t_pr_plandat FROM TABLE lt_plan_date.
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-plan_date ).
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN gc_identifier-start_date.
        IF ms_process_data-lines_start_date IS INITIAL.
          add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                        iv_mess_no   = gc_log_attributes-message_no_5
                        iv_mess_var  = gc_pr_staging_tables-start_date ).
        ELSE.
          lt_start_date = VALUE #( FOR ls_process_start_date
                                   IN  ms_process_data-lines_start_date
                                     ( matnr          = ls_process_start_date-prdid_gen
                                       lifnr          = ls_process_start_date-locid
                                       sourceid_lifnr = ls_process_start_date-sourceid
                                       startprod_date = ls_process_start_date-periodid4
                                       zdivisionid    = ls_process_start_date-zdivisionid
                                       planned_qty    = ls_process_start_date-productioncomponent
                                       freeq          = ls_process_start_date-productioncomponent ) ).
          TRY .
              DELETE FROM zsp_t_pr_strtdat.                       "#EC CI_NOWHERE  "#EC CI_SUBRC
              INSERT zsp_t_pr_strtdat FROM TABLE lt_start_date.
              IF sy-subrc = 0.
                add_log_mess( iv_mess_type = gc_log_attributes-message_type_success
                              iv_mess_no   = gc_log_attributes-message_no_3
                              iv_mess_var  = gc_pr_staging_tables-start_date ).
              ENDIF.
            CATCH cx_sy_open_sql_db.
              add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                            iv_mess_no   = gc_log_attributes-message_no_8 ).
              RETURN.
          ENDTRY.
        ENDIF.
      WHEN OTHERS.
        add_log_mess( iv_mess_type = gc_log_attributes-message_type_error
                      iv_mess_no   = gc_log_attributes-message_no_4 ).

        MESSAGE i004(zsp_pr_match) INTO lv_msg   ##NEEDED.
        RETURN.
    ENDCASE.

  ENDMETHOD.


  METHOD GET_LOG_MESS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 12.10.2022 | 14100     : [BUILD] - FPS-WRICEF-010 - Perfect PR Ma *
*              |            | DS4K931867                               *
*----------------------------------------------------------------------*

    rt_log = mt_messages_log.

  ENDMETHOD.
ENDCLASS.