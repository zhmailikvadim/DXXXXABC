CLASS zcl_sp_fps_perfect_pr_grouping DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      gtyp_t_err_gr TYPE STANDARD TABLE OF zsp_t_pr_err_gr .
    TYPES:
      BEGIN OF gtyp_s_division,
        werks       TYPE zsp_pr_plant_id,
        matnr       TYPE zsp_article_gen_small,
        division_id TYPE zsp_division_id,
      END OF gtyp_s_division .
    TYPES:
      gtyp_t_division TYPE STANDARD TABLE OF gtyp_s_division WITH DEFAULT KEY .
    TYPES:
      gtyp_t_err  TYPE STANDARD TABLE OF zsp_t_pr_err_gr WITH DEFAULT KEY .
    TYPES:
      BEGIN OF gtyp_s_ebelp,
        ebelp TYPE ebelp,
      END OF gtyp_s_ebelp .
    TYPES:
      gtyp_t_ebelp TYPE STANDARD TABLE OF gtyp_s_ebelp WITH DEFAULT KEY .
    TYPES:
      BEGIN OF gtyp_s_ebeln,
        ebeln TYPE ebeln,
        matnr TYPE zsp_article_gen_small,
      END OF gtyp_s_ebeln .
    TYPES:
      gtyp_t_ebeln TYPE STANDARD TABLE OF gtyp_s_ebeln WITH DEFAULT KEY .
    TYPES:
      BEGIN OF gtyp_s_pom_used,
        werks    TYPE werks_d,
        matnr    TYPE matnr,
        lifnr    TYPE lifnr,
        rel_date TYPE zsp_pr_rel_date,
        ebeln    TYPE ebeln,
      END OF gtyp_s_pom_used .
    TYPES:
      gtyp_t_pom_used TYPE SORTED TABLE OF gtyp_s_pom_used
                WITH UNIQUE KEY werks matnr lifnr rel_date .
    TYPES:
      BEGIN OF gtyp_s_drs_used,
        werks    TYPE werks_d,
        matnr    TYPE matnr,
        lifnr    TYPE lifnr,
        rel_date TYPE zsp_pr_rel_date,
        ebeln    TYPE ebeln,
        custid   TYPE zsp_pr_cust_id,
      END OF gtyp_s_drs_used .
    TYPES:
      gtyp_t_drs_used TYPE SORTED TABLE OF gtyp_s_drs_used WITH UNIQUE KEY werks matnr lifnr rel_date .

    METHODS processing
      IMPORTING
        !it_division TYPE gtyp_t_division
      CHANGING
        !ct_err      TYPE gtyp_t_err_gr
        !ct_pr_group TYPE zcl_sp_fps_perfect_pr_post_01=>gtyp_t_pr_group .
    METHODS constructor .
  PROTECTED SECTION.
private section.

  data GTS_POM_USED type GTYP_T_POM_USED .
  data GTS_DRS_USED type GTYP_T_DRS_USED .
  constants:
    BEGIN OF gc_group_type,
        pom TYPE char3 VALUE 'POM',
        drs TYPE char3 VALUE 'DRS',
      END OF gc_group_type .
  data GV_SPLIT type BOOL .

  methods NUMBER_ITEMS
    changing
      !CT_PR_GROUP type ZCL_SP_FPS_PERFECT_PR_POST_01=>GTYP_T_PR_GROUP .
  methods DEEP_FIRST_SEARCH
    importing
      !IV_GROUP_TYPE type CHAR3
      !IV_EBELN type EBELN
      !IS_PR_GROUP type ZSP_T_PR_GROUP
    changing
      !CT_PR_GROUP type ZCL_SP_FPS_PERFECT_PR_POST_01=>GTYP_T_PR_GROUP .
  methods SPLIT_QUANTITY
    importing
      !IT_DIVISION type GTYP_T_DIVISION
    changing
      !CT_ERR type GTYP_T_ERR_GR
      !CT_PR_GROUP type ZCL_SP_FPS_PERFECT_PR_POST_01=>GTYP_T_PR_GROUP .
  methods AGGREGATE_PR
    changing
      !CT_PR_GROUP type ZCL_SP_FPS_PERFECT_PR_POST_01=>GTYP_T_PR_GROUP .
ENDCLASS.



CLASS ZCL_SP_FPS_PERFECT_PR_GROUPING IMPLEMENTATION.


  METHOD deep_first_search.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* RAPANKON     | 08.12.2022 | 15688     : [Build] - FPS-WRICEF-011 - P *
*              |            | DS4K936867                               *
*----------------------------------------------------------------------*
* ISAICSVI     | 26.01.2024 | 28116 : Feature-[CR] Perfect PR Grouping *
*              |            | DS4K976266                               *
*----------------------------------------------------------------------*
* ISAICSVI     | 26.03.2024 | 30477     : Start production and release *
*              |            | DS4K985140                               *
*----------------------------------------------------------------------*

    IF iv_group_type = gc_group_type-pom.
      INSERT VALUE gtyp_s_pom_used(
          werks          = is_pr_group-werks
          matnr          = is_pr_group-matnr
          lifnr          = is_pr_group-lifnr
          rel_date       = is_pr_group-rel_date
          ebeln          = iv_ebeln
      ) INTO TABLE gts_pom_used.

      LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_pr_group>)
                          WHERE werks          = is_pr_group-werks
                            AND matnr          = is_pr_group-matnr
                            AND lifnr          = is_pr_group-lifnr
                            AND rel_date       = is_pr_group-rel_date
                            AND ebeln IS INITIAL
                            AND custid IS INITIAL.
        <ls_pr_group>-ebeln = iv_ebeln.

      ENDLOOP.

    ELSEIF iv_group_type = gc_group_type-drs.
      INSERT VALUE gtyp_s_drs_used(
          werks    = is_pr_group-werks
          matnr    = is_pr_group-matnr
          lifnr    = is_pr_group-lifnr
          rel_date = is_pr_group-rel_date
          ebeln    = iv_ebeln
          custid   = is_pr_group-custid
      ) INTO TABLE gts_drs_used.

      LOOP AT ct_pr_group ASSIGNING <ls_pr_group>
                          WHERE werks    = is_pr_group-werks
                            AND matnr    = is_pr_group-matnr
                            AND lifnr    = is_pr_group-lifnr
                            AND rel_date = is_pr_group-rel_date
                            AND custid   = is_pr_group-custid
                            AND ebeln IS INITIAL.

        <ls_pr_group>-ebeln = iv_ebeln.

      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD processing.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* RAPANKON     | 13.12.2022 | 15688     : [Build] - FPS-WRICEF-011 - P *
*              |            | DS4K936867                               *
* ISAICSVI     | 10.04.2023 | 19902     : [CR] - FPS-WRICEF-011-Perfec *
*              |            | DS4K949449                               *
* ISAICSVI     | 26.01.2024 | 28116 : Feature-[CR] Perfect PR Grouping *
*              |            | DS4K976266                               *
* ISAICSVI     | 26.03.2024 | 30477     : Start production and release *
*              |            | DS4K985140                               *
*----------------------------------------------------------------------*

    LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_pr_group>).
      IF <ls_pr_group>-ebeln IS INITIAL AND <ls_pr_group>-custid IS INITIAL.
        READ TABLE gts_pom_used ASSIGNING FIELD-SYMBOL(<ls_pom_used>)
                                WITH KEY werks          = <ls_pr_group>-werks
                                         matnr          = <ls_pr_group>-matnr
                                         lifnr          = <ls_pr_group>-lifnr
                                         rel_date       = <ls_pr_group>-rel_date.
        IF sy-subrc <> 0.
          DATA(lv_ebeln) = zcl_sp_fps_perfect_pr_util=>generate_doc_num( ).

          deep_first_search( EXPORTING iv_group_type = gc_group_type-pom
                                       iv_ebeln      = lv_ebeln
                                       is_pr_group   = <ls_pr_group>
                              CHANGING ct_pr_group   = ct_pr_group  ).
        ENDIF.

      ELSEIF <ls_pr_group>-ebeln IS INITIAL AND <ls_pr_group>-custid IS NOT INITIAL.

        READ TABLE gts_drs_used ASSIGNING FIELD-SYMBOL(<ls_drs_used>)
                           WITH KEY werks          = <ls_pr_group>-werks
                                    matnr          = <ls_pr_group>-matnr
                                    lifnr          = <ls_pr_group>-lifnr
                                    rel_date       = <ls_pr_group>-rel_date
                                    custid         = <ls_pr_group>-custid.
        IF sy-subrc <> 0.
          lv_ebeln = zcl_sp_fps_perfect_pr_util=>generate_doc_num( ).

          deep_first_search( EXPORTING iv_group_type = gc_group_type-drs
                                       iv_ebeln      = lv_ebeln
                                       is_pr_group   = <ls_pr_group>
                              CHANGING ct_pr_group   = ct_pr_group  ).
        ENDIF.

      ENDIF.
    ENDLOOP.

    number_items( CHANGING ct_pr_group = ct_pr_group ).

    split_quantity( EXPORTING it_division = it_division
                    CHANGING  ct_pr_group = ct_pr_group
                              ct_err      = ct_err  ).

    aggregate_pr( CHANGING ct_pr_group = ct_pr_group ).

    number_items( CHANGING ct_pr_group = ct_pr_group ).

  ENDMETHOD.


  METHOD number_items.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* RAPANKON     | 14.12.2022 | 15688     : [Build] - FPS-WRICEF-011 - P *
*              |            | DS4K936867                               *
*----------------------------------------------------------------------*

    DATA: lv_ebelp TYPE ebelp.

    LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_pr_group>)
                        GROUP BY ( ebeln = <ls_pr_group>-ebeln )
                        ASSIGNING FIELD-SYMBOL(<ls_table>).

      lv_ebelp = '000000'.

      LOOP AT GROUP <ls_table> ASSIGNING FIELD-SYMBOL(<ls_item>).
        lv_ebelp = lv_ebelp + 10.
        lv_ebelp = |{ lv_ebelp ALPHA = IN }|.
        <ls_item>-ebelp = lv_ebelp.
      ENDLOOP.

    ENDLOOP.

  ENDMETHOD.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* RAPANKON     | 13.12.2022 | 15688     : [Build] - FPS-WRICEF-011 - P *
*              |            | DS4K936867                               *
*----------------------------------------------------------------------*

    CLEAR: gts_drs_used, gts_pom_used.

  ENDMETHOD.


  METHOD split_quantity.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 10.04.2023 | 19902     : [CR] - FPS-WRICEF-011-Perfec *
*              |            | DS4K949449                               *
*----------------------------------------------------------------------*
    DATA:
      ls_pr_group  TYPE zsp_t_pr_group,
      ls_ebelp     TYPE gtyp_s_ebelp,
      lt_ebelp     TYPE gtyp_t_ebelp,
      lr_ebelp     TYPE RANGE OF ebelp,
      lv_qty_max   TYPE zsp_pr_planned_qty_mad_v,
      lv_q         TYPE zsp_pr_planned_qty_mad_v,
      lt_err_table TYPE STANDARD TABLE OF zsp_t_pr_err_gr,
      lt_err       TYPE STANDARD TABLE OF zsp_t_pr_err_gr,
      ls_error     TYPE zsp_t_pr_err_gr,
      lv_k         TYPE i.

    TRY .
        DATA(lv_po_max) = zcl_pe_hm_basic=>get_value( iv_id =  '650'  ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_footwear_id) = zcl_pe_hm_basic=>get_value( iv_id = '657' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_apparel_id) = zcl_pe_hm_basic=>get_value( iv_id = '659' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    TRY .
        DATA(lv_hardware_id) = zcl_pe_hm_basic=>get_value( iv_id = '661' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    SORT ct_pr_group BY ebeln ASCENDING mad_date ASCENDING planned_qty DESCENDING.

    LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_group>)
                        GROUP BY ( ebeln = <ls_group>-ebeln
                                   mad_date = <ls_group>-mad_date )
                        ASSIGNING FIELD-SYMBOL(<ls_table>).

      CLEAR: lt_ebelp, lv_k, lv_q.

      LOOP AT GROUP <ls_table> ASSIGNING FIELD-SYMBOL(<ls_item>).

        CLEAR gv_split.

        READ TABLE it_division ASSIGNING FIELD-SYMBOL(<ls_division>) WITH KEY matnr = <ls_item>-matnr
                                                                              werks = <ls_item>-werks.

        IF sy-subrc = 0 AND ( <ls_division>-division_id = lv_footwear_id OR
                              <ls_division>-division_id = lv_apparel_id  OR
                              <ls_division>-division_id = lv_hardware_id ).
          lv_qty_max = lv_po_max.
        ENDIF.

        lv_k = lv_k + 1.
        lv_q = lv_q + <ls_item>-planned_qty.

        IF lv_q > lv_qty_max AND lv_k > 1.

          gv_split = abap_true.

          DATA(lv_ebeln) = zcl_sp_fps_perfect_pr_util=>generate_doc_num( ).

          ls_pr_group-ebeln = lv_ebeln.


          lr_ebelp = VALUE #( FOR ls_val IN lt_ebelp ( sign   = 'I'
                                                       option = 'EQ'
                                                       low = ls_val-ebelp ) ) .

          MODIFY ct_pr_group FROM ls_pr_group TRANSPORTING ebeln WHERE ebeln EQ <ls_item>-ebeln AND
                                                                       ebelp IN lr_ebelp.

          CLEAR: lv_k, lv_q, ls_pr_group.

          IF <ls_item>-planned_qty > lv_qty_max.

            lv_ebeln = zcl_sp_fps_perfect_pr_util=>generate_doc_num( ).
            ls_pr_group-ebeln = lv_ebeln.

            MODIFY ct_pr_group FROM ls_pr_group TRANSPORTING ebeln WHERE ebeln EQ <ls_item>-ebeln AND
                                                                         ebelp EQ <ls_item>-ebelp.

            MESSAGE e022(zsp_pr_match) WITH <ls_item>-planned_qty INTO DATA(lv_msg).
            lt_err_table = VALUE #(        (      ebeln = lv_ebeln
                                                  matnr = <ls_item>-matnr
                                                  mad_date = <ls_item>-mad_date
                                                  message = lv_msg
                                                  erdat = sy-datum
                                                  erzet = sy-uzeit
                                                  ernam = sy-uname )  ).
            APPEND LINES OF lt_err_table TO lt_err.

          ELSE.

            CLEAR lt_ebelp.

            lv_k = 1.
            lv_q = <ls_item>-planned_qty.

            ls_ebelp-ebelp = <ls_item>-ebelp.
            APPEND ls_ebelp TO lt_ebelp.

          ENDIF.

        ELSEIF lv_q > lv_qty_max AND lv_k = 1.

          CLEAR: lv_k, lv_q, ls_pr_group.

          lv_ebeln = zcl_sp_fps_perfect_pr_util=>generate_doc_num( ).

          ls_pr_group-ebeln = lv_ebeln.

          MODIFY ct_pr_group FROM ls_pr_group TRANSPORTING ebeln WHERE ebeln EQ <ls_item>-ebeln AND
                                                                       ebelp EQ <ls_item>-ebelp.

          MESSAGE e022(zsp_pr_match) WITH <ls_item>-planned_qty INTO lv_msg.
          lt_err_table = VALUE #(        (      ebeln = lv_ebeln
                                                matnr = <ls_item>-matnr
                                                mad_date = <ls_item>-mad_date
                                                message = lv_msg
                                                erdat = sy-datum
                                                erzet = sy-uzeit
                                                ernam = sy-uname )  ).
          APPEND LINES OF lt_err_table TO lt_err.

        ELSEIF lv_q LE lv_qty_max AND gv_split IS INITIAL.

          ls_ebelp-ebelp = <ls_item>-ebelp.
          APPEND ls_ebelp TO lt_ebelp.

        ENDIF.

      ENDLOOP.

    ENDLOOP.

    number_items( CHANGING ct_pr_group = ct_pr_group ).

    SORT ct_pr_group BY ebeln ASCENDING mad_date ASCENDING planned_qty DESCENDING.

    LOOP AT lt_err ASSIGNING FIELD-SYMBOL(<ls_err>) WHERE mad_date IS NOT INITIAL AND
                                                          ebeln    IS NOT INITIAL.

      CLEAR ls_error.

      READ TABLE ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_gr_error>) WITH KEY ebeln = <ls_err>-ebeln.
      IF sy-subrc = 0.
        ls_error-ebelp = <ls_gr_error>-ebelp.
      ENDIF.

      MODIFY lt_err FROM ls_error TRANSPORTING ebelp.

    ENDLOOP.

    IF lt_err IS NOT INITIAL.
      APPEND LINES OF lt_err TO ct_err.
    ENDIF.

  ENDMETHOD.


  METHOD aggregate_pr.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ISAICSVI     | 26.01.2024 | 28116 : Feature-[CR] Perfect PR Grouping *
*              |            | DS4K976266                               *
*----------------------------------------------------------------------*

    LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_pr_group>).

      LOOP AT ct_pr_group ASSIGNING FIELD-SYMBOL(<ls_pr>) WHERE ebeln = <ls_pr_group>-ebeln AND
                                                                ebelp <> <ls_pr_group>-ebelp AND
                                                                matnr_v = <ls_pr_group>-matnr_v AND
                                                                planned_date = <ls_pr_group>-planned_date AND
                                                                xfactory_date = <ls_pr_group>-xfactory_date  AND
                                                                motid = <ls_pr_group>-motid. "#EC CI_NESTED

        <ls_pr_group>-planned_qty = <ls_pr_group>-planned_qty + <ls_pr>-planned_qty.

        IF <ls_pr_group>-startprod_date > <ls_pr>-startprod_date.
          <ls_pr_group>-startprod_date = <ls_pr>-startprod_date.
          <ls_pr_group>-rel_date = <ls_pr>-rel_date.
        ENDIF.

        IF <ls_pr_group>-mad_date > <ls_pr>-mad_date.
          <ls_pr_group>-mad_date = <ls_pr>-mad_date.
        ENDIF.

        DELETE ct_pr_group WHERE ebeln = <ls_pr>-ebeln AND ebelp = <ls_pr>-ebelp.

      ENDLOOP.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.