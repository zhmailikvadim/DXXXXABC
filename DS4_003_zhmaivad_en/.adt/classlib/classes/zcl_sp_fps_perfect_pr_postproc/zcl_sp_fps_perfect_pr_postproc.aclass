CLASS zcl_sp_fps_perfect_pr_postproc DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      gtyp_r_plant          TYPE RANGE OF zsp_t_pr_group-werks .
    TYPES:
      BEGIN OF gtyp_s_result,
        pr_ibp         TYPE zsp_t_pr_group-ebeln,
        pr_item        TYPE zsp_t_pr_group-ebelp,
        pr_s4          TYPE zsp_t_pr_group-zebeln,
        result_type    TYPE zsp_t_pr_group-proc_status,
        result_message TYPE zsp_t_pr_group-proc_message,
        create_on      TYPE zsp_t_pr_group-erdat,
        create_at      TYPE zsp_t_pr_group-erzet,
      END OF gtyp_s_result .
    TYPES:
      gtyp_t_pr_group       TYPE STANDARD TABLE OF zsp_t_pr_group   WITH DEFAULT KEY .
    TYPES:
      gtyp_t_pr_items       TYPE STANDARD TABLE OF bapimereqitemimp WITH DEFAULT KEY .
    TYPES:
      gtyp_t_pr_items_flags TYPE STANDARD TABLE OF bapimereqitemx   WITH DEFAULT KEY .
    TYPES:
      gtyp_t_pr_extensionin TYPE STANDARD TABLE OF bapiparex        WITH DEFAULT KEY .
    TYPES:
      gtyp_t_pr_result      TYPE STANDARD TABLE OF gtyp_s_result    WITH DEFAULT KEY .

    CONSTANTS:
      BEGIN OF gc_process_param,
        error           TYPE bapi_mtype VALUE 'E',
        warning         TYPE bapi_mtype VALUE 'W',
        success         TYPE bapi_mtype VALUE 'S',
        in_progress     TYPE bapi_mtype VALUE 'P',
        sel_not_all     TYPE bapi_mtype VALUE 'N',
        sel_empty       TYPE bapi_mtype VALUE 'M',
        sel_processed   TYPE bapi_mtype VALUE 'P',
        blank           TYPE char1      VALUE '-',
        bapi_param_item TYPE bapi_param VALUE 'PRITEM',
        proc_status_b   TYPE banst      VALUE 'B',
        proc_status_n   TYPE banst      VALUE 'N',
        block_type_1    TYPE blckd      VALUE '1',
        partner_fuction TYPE parvw      VALUE 'LO',
        custom_indic_y  TYPE zz1_custin VALUE 'Y',
        custom_indic_n  TYPE zz1_custin VALUE 'N',
      END OF gc_process_param .

    METHODS process_pr_creation
      IMPORTING
        !it_input_data TYPE gtyp_t_pr_group OPTIONAL
      EXPORTING
        !et_result     TYPE gtyp_t_pr_result .
    METHODS save_log
      IMPORTING
        !it_log_data TYPE gtyp_t_pr_result .
  PROTECTED SECTION.
private section.

  data MT_PROCESS_DATA type GTYP_T_PR_GROUP .
  constants:
    BEGIN OF gc_zhm_id,
        vas_cutoff TYPE zpe_hm_id VALUE '0000000411',
        doc_type   TYPE zpe_hm_id VALUE '0000000397',
      END OF gc_zhm_id .
  constants:
    BEGIN OF gc_log_constant,
        object                    TYPE balobj_d  VALUE 'ZSP_FPS'            ##NO_TEXT,
        subobject                 TYPE balsubobj VALUE 'PR_IBP_CREATION'    ##NO_TEXT,
        mess_class                TYPE symsgid   VALUE 'ZSP_PR_MATCH'       ##NO_TEXT,
        mess_number_common        TYPE symsgno   VALUE '019'                ##NO_TEXT,
        mess_number_sel_not_all   TYPE symsgno   VALUE '024'                ##NO_TEXT,
        mess_number_sel_processed TYPE symsgno   VALUE '025'                ##NO_TEXT,
        mess_number_sel_empty     TYPE symsgno   VALUE '026'                ##NO_TEXT,
        mess_type_success         TYPE symsgty   VALUE 'S'                  ##NO_TEXT,
        mess_type_error           TYPE symsgty   VALUE 'E'                  ##NO_TEXT,
        mess_type_warning         TYPE symsgty   VALUE 'W'                  ##NO_TEXT,
        mess_mask                 TYPE symsgv    VALUE 'PR (IBP)/PR Item:'  ##NO_TEXT,
      END OF gc_log_constant .

  methods DELETE_OPEN_PR .
  methods PREPARE_PROCESS_DATA
    importing
      !IV_PR_IBP type EBELN
    exporting
      !ES_PR_HEADER type BAPIMEREQHEADER
      !ES_PR_HEADERX type BAPIMEREQHEADERX
      !ET_PR_ITEM type GTYP_T_PR_ITEMS
      !ET_PR_ITEMX type GTYP_T_PR_ITEMS_FLAGS
      !ET_PR_ITEM_CUST type ZSP_TT_PR_BAPI_PRITEM_EXT
    changing
      !CT_RESULT_LOG type GTYP_T_PR_RESULT .
  methods CREATE_PR
    returning
      value(RT_RESULT) type GTYP_T_PR_RESULT .
  methods GET_DOC_TYPE
    importing
      !IV_PR_IBP type EBELN
    returning
      value(RV_DOC_TYPE) type BSART .
  methods GET_PURCH_ORG
    importing
      !IV_PLANT type ZSP_PR_PLANT_ID
      !IV_PR_DOC_TYPE type BSART
      !IV_TRADECO_MODEL type ZZ1_MM_TRADECOMODEL
    returning
      value(RV_PURCH_ORG) type EKORG .
  methods GET_PURCH_GROUP
    importing
      !IV_VAR_ARTICLE type ZSP_ARTICLE_VAR_SMALL
      !IV_PLANT type ZSP_PR_PLANT_ID
    returning
      value(RV_PURCH_GROUP) type EKGRP .
  methods GET_DELIVERY_DATE
    importing
      !IV_PLANT type ZSP_PR_PLANT_ID
      !IV_SUPPLIER type ZSP_PR_SUPPLIER_SEND
      !IV_EXFACTORY_DATE type ZSP_PR_XFACTORY_DATE
      !IV_EVERS type ZZ1_EVERSS optional
    returning
      value(RV_DELIVERY_DATE) type EINDT .
  methods GET_VAS_CUTOFF_DATE
    importing
      !IV_PLANNED_DATE type ZSP_PR_PLANNED_DATE
      !IV_EXFACTORY_DATE type ZSP_PR_XFACTORY_DATE
    returning
      value(RV_VAS_CUTOFF_DATE) type ZZ1_MM_VASCUTOFFDATE .
  methods GET_CUSTOM_INDICATOR
    importing
      !IV_VAR_ARTICLE type ZSP_ARTICLE_VAR_SMALL
      !IV_PR_DOC_TYPE type BSART
      !IV_PLANT type ZSP_PR_PLANT_ID
    returning
      value(RV_CUSTOM_INDICATOR) type ZZ1_CUSTIN .
  methods GET_SHIP_INSTRUCTION
    importing
      !IV_MOTID type ZSP_PR_MOT_ID
    returning
      value(RV_SHIP_INSTRUCTION) type ZZ1_EVERSS .
  methods PROCESS_PREPARED_DATA
    importing
      !IT_PR_ITEM type TY_BAPIMEREQITEMIMP
      !IT_PR_ITEMX type TY_BAPIMEREQITEMX
      !IT_PR_ITEM_CUST type ZSP_TT_PR_BAPI_PRITEM_EXT
      !IV_PR_IBP type EBELN
      !IS_PR_HEADER type BAPIMEREQHEADER
      !IS_PR_HEADERX type BAPIMEREQHEADERX
    exporting
      !ET_BAPIRET type BAPIRET2_T
    changing
      !CT_RESULT_LOG type GTYP_T_PR_RESULT .
  methods UPDATE_PR_GROUP
    importing
      !IT_RESULT type GTYP_T_PR_RESULT .
  methods GET_TRADECO_MODEL
    importing
      !IV_PR_IBP type EBELN
      !IV_PR_ITEM_IBP type EBELP
    returning
      value(RV_TRADECO_MODEL) type ZZ1_MM_TRADECOMODEL .
ENDCLASS.



CLASS ZCL_SP_FPS_PERFECT_PR_POSTPROC IMPLEMENTATION.


  METHOD create_pr.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 29.11.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 01.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 06.09.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*

    DATA: lt_pr_item      TYPE TABLE OF bapimereqitemimp,
          lt_pr_itemx     TYPE TABLE OF bapimereqitemx,
          lt_pr_item_cust TYPE TABLE OF mmpur_ppr_s_bapi_pritem_ext,
          ls_pr_header    TYPE bapimereqheader,
          ls_pr_headerx   TYPE bapimereqheaderx,
          lt_bapiret      TYPE TABLE OF bapiret2,
          lt_result       TYPE gtyp_t_pr_result.

    SORT mt_process_data BY ebeln ASCENDING.

    LOOP AT mt_process_data ASSIGNING FIELD-SYMBOL(<ls_process_data>).
      IF sy-tabix = lines( mt_process_data ) OR
         mt_process_data[ sy-tabix + 1 ]-ebeln <> <ls_process_data>-ebeln.
        prepare_process_data( EXPORTING iv_pr_ibp       = <ls_process_data>-ebeln
                              IMPORTING es_pr_header    = ls_pr_header
                                        es_pr_headerx   = ls_pr_headerx
                                        et_pr_item      = lt_pr_item
                                        et_pr_itemx     = lt_pr_itemx
                                        et_pr_item_cust = lt_pr_item_cust
                              CHANGING  ct_result_log   = lt_result ).

        process_prepared_data( EXPORTING it_pr_item      = lt_pr_item
                                         it_pr_itemx     = lt_pr_itemx
                                         it_pr_item_cust = lt_pr_item_cust
                                         iv_pr_ibp       = <ls_process_data>-ebeln
                                         is_pr_header    = ls_pr_header
                                         is_pr_headerx   = ls_pr_headerx
                               IMPORTING et_bapiret      = lt_bapiret
                               CHANGING  ct_result_log   = lt_result ).

        READ TABLE lt_bapiret ASSIGNING FIELD-SYMBOL(<ls_bapiret>) WITH KEY type = gc_process_param-error. "#EC CI_STDSEQ

        IF sy-subrc = 0.
          lt_result = VALUE #( BASE lt_result FOR ls_bapiret IN lt_bapiret
                                              WHERE ( parameter  = gc_process_param-bapi_param_item AND ( type = gc_process_param-warning OR
                                                                                                          type = gc_process_param-error ) )
                                                  ( pr_ibp         = <ls_process_data>-ebeln
                                                    pr_item        = lt_pr_item[ ls_bapiret-row ]-preq_item
                                                    result_type    = ls_bapiret-type
                                                    result_message = ls_bapiret-message ) ). "#EC CI_STDSEQ
        ENDIF.
      ENDIF.
    ENDLOOP.

    update_pr_group( lt_result ).

    save_log( lt_result ).

    READ TABLE lt_result TRANSPORTING NO FIELDS WITH KEY result_type = gc_process_param-error. "#EC CI_STDSEQ

    IF sy-subrc = 0.
      zcl_sp_fps_perfect_pr_notif=>send_notification( iv_type_key  = zcl_sp_fps_perfect_pr_notif=>gc_process_param-type_key_failed
                                                      it_recipient = VALUE #( ( id = sy-uname ) ) ).
    ELSE.
      zcl_sp_fps_perfect_pr_notif=>send_notification( iv_type_key  = zcl_sp_fps_perfect_pr_notif=>gc_process_param-type_key_success
                                                      it_recipient = VALUE #( ( id = sy-uname ) ) ).
    ENDIF.

    rt_result = lt_result.

  ENDMETHOD.


  METHOD get_doc_type.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 06.09.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*
    READ TABLE mt_process_data ASSIGNING FIELD-SYMBOL(<ls_process_data>) WITH KEY ebeln = iv_pr_ibp. "#EC CI_STDSEQ  "#EC CI_SUBRC

    SELECT FROM zpe_i_hm( iv_id = @gc_zhm_id-doc_type )
    FIELDS sequence, field1
    INTO TABLE @DATA(lt_doc_type).   "#EC CI_SEL_NESTED "#EC CI_NOWHERE

    IF sy-subrc = 0 AND <ls_process_data>-lifnr IS INITIAL.
      rv_doc_type = lt_doc_type[ sequence = '001' ]-field1. "#EC CI_STDSEQ
    ELSE.
      SELECT FROM wyt3
      FIELDS lifn2
      WHERE lifnr = @<ls_process_data>-lifnr AND parvw = @gc_process_param-partner_fuction
      INTO TABLE @DATA(lt_decision_data)    ##NEEDED. "#EC CI_SEL_NESTED

      IF sy-subrc = 0.
        rv_doc_type = lt_doc_type[ sequence = '001' ]-field1. "#EC CI_STDSEQ
      ELSE.
        rv_doc_type = lt_doc_type[ sequence = '002' ]-field1. "#EC CI_STDSEQ
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD update_pr_group.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 01.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 13.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*

    SELECT FROM zsp_i_pr_group
    FIELDS purchaserequisition,
           purchaserequisitionitem,
           purchaserequisitions4,
           createdon,
           createdat,
           processingstatus,
           processingmessage
    FOR ALL ENTRIES IN @mt_process_data
    WHERE purchaserequisition = @mt_process_data-ebeln
    ORDER BY PRIMARY KEY
    INTO TABLE @DATA(lt_pr_group_upd).          "#EC CI_FAE_NO_LINES_OK

    IF sy-subrc = 0.
      LOOP AT it_result ASSIGNING FIELD-SYMBOL(<ls_result>).
        IF line_exists( lt_pr_group_upd[ purchaserequisition     = <ls_result>-pr_ibp
                                         purchaserequisitionitem = <ls_result>-pr_item ] ) ##PRIMKEY[ENTITY]. "#EC CI_STDSEQ
          lt_pr_group_upd[ purchaserequisition     = <ls_result>-pr_ibp
                           purchaserequisitionitem = <ls_result>-pr_item ] = VALUE #( BASE lt_pr_group_upd[ purchaserequisition     = <ls_result>-pr_ibp
                                                                                                            purchaserequisitionitem = <ls_result>-pr_item ]
                                                                                                            purchaserequisitions4   = <ls_result>-pr_s4
                                                                                                            createdon               = <ls_result>-create_on
                                                                                                            createdat               = COND #( WHEN <ls_result>-create_at IS NOT INITIAL
                                                                                                                                              THEN <ls_result>-create_at )
                                                                                                            processingstatus        = COND #( WHEN <ls_result>-result_type = zcl_sp_fps_perfect_pr_postproc=>gc_process_param-success
                                                                                                                                              THEN <ls_result>-result_type
                                                                                                                                              ELSE zcl_sp_fps_perfect_pr_postproc=>gc_process_param-error )
                                                                                                            processingmessage       = COND #( WHEN <ls_result>-pr_s4 IS NOT INITIAL
                                                                                                                                              THEN <ls_result>-result_message
                                                                                                                                              ELSE TEXT-001 )  )  ##PRIMKEY[ENTITY]. "#EC CI_STDSEQ
        ENDIF.
      ENDLOOP.

      MODIFY ENTITIES OF zsp_i_pr_group
      ENTITY prgroup
      UPDATE
      FIELDS ( purchaserequisitions4 createdon createdat processingstatus processingmessage )
      WITH CORRESPONDING #( lt_pr_group_upd )
      FAILED DATA(ls_failed)
      REPORTED DATA(ls_reported).

      COMMIT ENTITIES.
    ENDIF.
  ENDMETHOD.


  METHOD save_log.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 14.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 07.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*


    DATA: ls_log          TYPE bal_s_log,
          lv_log_handle   TYPE balloghndl,
          lts_log_handles TYPE bal_t_logh,
          ls_msg          TYPE bal_s_msg.

    ls_log-object = gc_log_constant-object.
    ls_log-subobject = gc_log_constant-subobject.
    ls_log-aluser = sy-uname.
    ls_log-alprog = sy-repid.

    IF lines( it_log_data ) > 0.
      CALL FUNCTION 'BAL_LOG_CREATE'
        EXPORTING
          i_s_log                 = ls_log
        IMPORTING
          e_log_handle            = lv_log_handle
        EXCEPTIONS
          log_header_inconsistent = 1
          OTHERS                  = 2.

      IF sy-subrc = 0.
        LOOP AT it_log_data ASSIGNING FIELD-SYMBOL(<ls_log_data>).
          CASE <ls_log_data>-result_type.
            WHEN gc_process_param-success.
              ls_msg-msgty = gc_log_constant-mess_type_success.
            WHEN gc_process_param-warning.
              ls_msg-msgty = gc_log_constant-mess_type_warning.
            WHEN gc_process_param-error       OR
                 gc_process_param-sel_not_all OR
                 gc_process_param-sel_empty   OR
                 gc_process_param-sel_processed.
              ls_msg-msgty = gc_log_constant-mess_type_error.
          ENDCASE.

          CASE <ls_log_data>-result_type.
            WHEN gc_process_param-sel_not_all.
              ls_msg-msgno = gc_log_constant-mess_number_sel_not_all.
              ls_msg-msgv1 = <ls_log_data>-pr_ibp.
            WHEN gc_process_param-sel_empty.
              ls_msg-msgno = gc_log_constant-mess_number_sel_empty.
            WHEN gc_process_param-sel_processed.
              ls_msg-msgno = gc_log_constant-mess_number_sel_processed.
            WHEN OTHERS.
              ls_msg-msgno = gc_log_constant-mess_number_common.
              ls_msg-msgv1 = | { gc_log_constant-mess_mask } { <ls_log_data>-pr_ibp }/{ <ls_log_data>-pr_item } - |.
              ls_msg-msgv2 = <ls_log_data>-result_message.
          ENDCASE.

          ls_msg-msgid = gc_log_constant-mess_class.
          ls_msg-probclass = 3.

          CALL FUNCTION 'BAL_LOG_MSG_ADD'
            EXPORTING
              i_log_handle     = lv_log_handle
              i_s_msg          = ls_msg
            EXCEPTIONS
              log_not_found    = 1
              msg_inconsistent = 2
              log_is_full      = 3
              OTHERS           = 4.
          IF sy-subrc = 0.
            CLEAR ls_msg.
          ENDIF.
        ENDLOOP.

        INSERT lv_log_handle INTO TABLE lts_log_handles.

        CALL FUNCTION 'BAL_DB_SAVE'
          EXPORTING
            i_client         = sy-mandt
            i_save_all       = abap_true
            i_t_log_handle   = lts_log_handles
          EXCEPTIONS
            log_not_found    = 1
            save_not_allowed = 2
            numbering_error  = 3
            OTHERS           = 4.

        IF sy-subrc = 0 AND sy-batch = abap_true.
          CALL FUNCTION 'BP_ADD_APPL_LOG_HANDLE'
            EXPORTING
              loghandle                  = lv_log_handle
            EXCEPTIONS
              could_not_set_handle       = 1
              not_running_in_batch       = 2
              could_not_get_runtime_info = 3
              handle_already_exists      = 4
              locking_error              = 5
              OTHERS                     = 6 ##FM_SUBRC_OK. "#EC CI_SUBRC
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_purch_group.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    SELECT SINGLE FROM i_productplantbasic
    FIELDS purchasinggroup
    WHERE product = @iv_var_article AND
          plant   = @iv_plant
    INTO @DATA(lv_purch_group).                      "#EC CI_SEL_NESTED

    IF sy-subrc = 0 AND lv_purch_group IS NOT INITIAL.
      rv_purch_group = lv_purch_group.
    ENDIF.
  ENDMETHOD.


  METHOD get_custom_indicator.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_zhm_cust_indic,
             dc_type     TYPE bbsrt,
             plant       TYPE ewerk,
             product_div TYPE fsh_mg_attribute1,
           END OF ltyp_s_zhm_cust_indic.

    DATA: lt_out_zhm_cust_indic TYPE STANDARD TABLE OF ltyp_s_zhm_cust_indic.

    SELECT SINGLE FROM zsc_i_mara_cust_field_for_po
    FIELDS fsh_mg_at1
    WHERE matnr = @iv_var_article
    INTO @DATA(lv_product_div).       "#EC CI_SEL_NESTED  "#EC CI_SUBRC

    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDD96D3E8C30A34FF59'
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                      IMPORTING et_table        = lt_out_zhm_cust_indic ).

        IF line_exists( lt_out_zhm_cust_indic[ dc_type = iv_pr_doc_type plant = iv_plant product_div = lv_product_div ] ). "#EC CI_STDSEQ
          rv_custom_indicator = gc_process_param-custom_indic_y.
        ELSEIF line_exists( lt_out_zhm_cust_indic[ dc_type = iv_pr_doc_type plant = iv_plant product_div = '' ] ). "#EC CI_STDSEQ
          rv_custom_indicator = gc_process_param-custom_indic_y.
        ELSE.
          rv_custom_indicator = gc_process_param-custom_indic_n.
        ENDIF.
      CATCH zcx_pe_hm.
        rv_custom_indicator = gc_process_param-custom_indic_n.
    ENDTRY.
  ENDMETHOD.


  METHOD get_vas_cutoff_date.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    TRY.
        DATA(lv_days_amount) = zcl_pe_hm_basic=>get_value( '0000000411' ).

        IF iv_planned_date < iv_exfactory_date.
          rv_vas_cutoff_date = iv_planned_date - lv_days_amount.
        ELSE.
          rv_vas_cutoff_date = iv_exfactory_date - lv_days_amount.
        ENDIF.
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD get_delivery_date.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 06.09.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 12.10.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*

    DATA : lv_conf_cat  TYPE ebtyp,
           lo_zcx_pe_hm TYPE REF TO zcx_pe_hm.
    TRY.
        lv_conf_cat = zcl_pe_hm_basic=>get_value( iv_id = '2444' ).
      CATCH zcx_pe_hm INTO lo_zcx_pe_hm.
        DATA(lv_text) = lo_zcx_pe_hm->get_text( ).
        IF lv_text IS NOT INITIAL.
          CLEAR lv_text.
        ENDIF.
    ENDTRY.

    zcl_sc_tlt_calculation=>calculate_dd_for_cd_z2_z3_z4(
      EXPORTING
        iv_ebtyp = lv_conf_cat
        iv_evers = iv_evers
        iv_tltf  = iv_exfactory_date
        iv_werks = iv_plant
        iv_gparn = iv_supplier
      IMPORTING
        ev_eeind = rv_delivery_date
    ).

    IF rv_delivery_date IS INITIAL OR rv_delivery_date = '00000000'.
      rv_delivery_date = iv_exfactory_date.
    ENDIF.
  ENDMETHOD.


  METHOD process_prepared_data.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 09.01.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 13.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    DATA: lv_pr_number    TYPE banfn,
          lt_pr_item      TYPE TABLE OF bapimereqitemimp,
          lt_pr_itemx     TYPE TABLE OF bapimereqitemx,
          lt_pr_item_cust TYPE TABLE OF mmpur_ppr_s_bapi_pritem_ext.

    CLEAR: et_bapiret, lv_pr_number.

    IF lines( it_pr_item ) > 0 AND NOT line_exists( ct_result_log[ pr_ibp = iv_pr_ibp ] ). "#EC CI_STDSEQ
      lt_pr_item = it_pr_item.
      lt_pr_itemx = it_pr_itemx.
      lt_pr_item_cust = it_pr_item_cust.

      CALL FUNCTION 'BAPI_PR_CREATE'
        EXPORTING
          prheader  = is_pr_header
          prheaderx = is_pr_headerx
        IMPORTING
          number    = lv_pr_number
        TABLES
          return    = et_bapiret
          pritem    = lt_pr_item
          pritemx   = lt_pr_itemx.

      READ TABLE et_bapiret ASSIGNING FIELD-SYMBOL(<ls_bapiret>) WITH KEY type = gc_process_param-error. "#EC CI_STDSEQ

      IF sy-subrc <> 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = abap_true.

        CALL FUNCTION 'ZSP_FM_PR_UPDATE_CUST'
          EXPORTING
            iv_number     = lv_pr_number
          CHANGING
            ch_pritem     = lt_pr_item
            ch_pritemx    = lt_pr_itemx
            ch_pritemcust = lt_pr_item_cust.

        ct_result_log = VALUE #( BASE ct_result_log FOR ls_pr_item IN lt_pr_item
                                                        ( pr_ibp         = iv_pr_ibp
                                                          pr_item        = ls_pr_item-preq_item
                                                          pr_s4          = lv_pr_number
                                                          create_on      = sy-datum
                                                          create_at      = sy-uzeit
                                                          result_type    = gc_process_param-success
                                                          result_message = TEXT-002 ) ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_purch_org.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 06.09.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_zhm_filter,
             bsart               TYPE bsart,
             werks_d             TYPE werks_d,
             zz1_mm_tradecomodel TYPE zz1_mm_tradecomodel,
           END OF ltyp_s_zhm_filter,
           BEGIN OF ltyp_s_zhm_out,
             ekorg TYPE ekorg,
           END OF ltyp_s_zhm_out.

    DATA lt_zhm_out  TYPE STANDARD TABLE OF ltyp_s_zhm_out.

    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '024F85009E261EED9D901F5887B560D2'
                                                is_filter       = VALUE ltyp_s_zhm_filter( bsart               = iv_pr_doc_type
                                                                                           werks_d             = iv_plant
                                                                                           zz1_mm_tradecomodel = iv_tradeco_model )
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                      IMPORTING et_table        = lt_zhm_out ).
        IF lt_zhm_out IS NOT INITIAL.
          rv_purch_org = lt_zhm_out[ 1 ].
        ENDIF.
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD delete_open_pr.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 28.11.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    DATA: lt_pr_item_to_del TYPE TABLE OF bapieband.

    DATA(lr_plants) = VALUE gtyp_r_plant( FOR ls_process_data IN mt_process_data
                                               ( sign = 'I' option = 'EQ' low = ls_process_data-werks ) ).
    SELECT FROM zpe_i_hm( iv_id = @gc_zhm_id-doc_type )
    FIELDS field1
    INTO TABLE @DATA(lt_doc_type).       "#EC CI_NOWHERE  "#EC CI_SUBRC

    SELECT FROM zsp_i_pr_group
    FIELDS purchaserequisition
    WHERE plant IN @lr_plants AND
          purchaserequisitions4 <> @gc_process_param-blank
    INTO TABLE @DATA(lt_open_pr)    ##NEEDED.

    IF sy-subrc <> 0.
      SELECT purchaserequisition, purchaserequisitionitem
      FROM i_purchaserequisitionitemapi01
      INNER JOIN @lt_doc_type AS doc_type ON i_purchaserequisitionitemapi01~purchaserequisitiontype = doc_type~field1
      WHERE isdeleted                      = '' AND
            isclosed                       = '' AND
            accountassignmentcategory      = '' AND
            purchasingdocumentitemcategory = '' AND
            plant                          IN @lr_plants AND
            ( processingstatus             = @gc_process_param-proc_status_n OR ( processingstatus = @gc_process_param-proc_status_b AND
                                                                                  orderedquantity < i_purchaserequisitionitemapi01~requestedquantity ) )
      INTO TABLE @DATA(lt_pr_eban_to_del).                "#EC CI_SUBRC

      LOOP AT lt_pr_eban_to_del ASSIGNING FIELD-SYMBOL(<ls_pr_eban_to_del>).
        lt_pr_item_to_del = VALUE #( BASE lt_pr_item_to_del ( preq_item  = <ls_pr_eban_to_del>-purchaserequisitionitem
                                                              delete_ind = abap_true ) ).
        IF sy-tabix = lines( lt_pr_eban_to_del ) OR
           lt_pr_eban_to_del[ sy-tabix + 1 ]-purchaserequisition <> <ls_pr_eban_to_del>-purchaserequisition.
          CALL FUNCTION 'BAPI_REQUISITION_DELETE'
            EXPORTING
              number                      = <ls_pr_eban_to_del>-purchaserequisition
            TABLES
              requisition_items_to_delete = lt_pr_item_to_del.

          CLEAR lt_pr_item_to_del.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD get_ship_instruction.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 05.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_zhm_evers,
             evers TYPE evers,
             vktra TYPE vktra,
           END OF ltyp_s_zhm_evers.

    DATA: lt_out_zhm_evers TYPE STANDARD TABLE OF ltyp_s_zhm_evers,
          lv_motid_short   TYPE vktra.

    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id    = '0239FC3B8D041EDD85FF66BFA3A27F59'
                                      IMPORTING et_table = lt_out_zhm_evers ).
        IF strlen( iv_motid ) > 2.
          lv_motid_short = substring( val = iv_motid off = 0 len = 2 ).
        ELSE.
          lv_motid_short = iv_motid.
        ENDIF.

        IF line_exists( lt_out_zhm_evers[ vktra = lv_motid_short ] ). "#EC CI_STDSEQ
          rv_ship_instruction = lt_out_zhm_evers[ vktra = lv_motid_short ]-evers. "#EC CI_STDSEQ
        ENDIF.
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD prepare_process_data.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 01.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 13.02.2023 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KAWATHIM     | 06.09.2023 | 24838     : [BUILD] - TLT Design change - Impact on PR *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 05.10.2023 | 24838     : [ [Build] - [CR] - Add ship t*
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*
* LINGARAG     | 23.10.2023 | 24838     : [ [Build] - [CR] - Add ship t*
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*


    CLEAR: es_pr_header, es_pr_headerx, et_pr_item, et_pr_itemx, et_pr_item_cust.

    es_pr_header-pr_type = get_doc_type( iv_pr_ibp = iv_pr_ibp ).
    es_pr_headerx-pr_type = abap_true.

    TRY.
        DATA(lv_storage_loc) = zcl_pe_hm_basic=>get_value( '0000000894' ).
      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.

    LOOP AT mt_process_data ASSIGNING FIELD-SYMBOL(<ls_process_data>) WHERE ebeln = iv_pr_ibp. "#EC CI_STDSEQ
      et_pr_item_cust = VALUE #( BASE et_pr_item_cust ( key                              = <ls_process_data>-ebelp
                                                        data-zz1_adi_m_leadtimeplan_pri  = <ls_process_data>-pleadtime
                                                        data-zz1_adi_m_planned_pri       = <ls_process_data>-planned_date
                                                        data-zz1_adi_m_promoflag_pri     = <ls_process_data>-zz1_adi_m_promoflag
                                                        data-zz1_custin_pri              = get_custom_indicator( iv_var_article = <ls_process_data>-matnr_v
                                                                                                                 iv_plant       = <ls_process_data>-werks
                                                                                                                 iv_pr_doc_type = es_pr_header-pr_type )
                                                        data-zz1_everss_pri              = get_ship_instruction( iv_motid = <ls_process_data>-motid )
                                                        data-zz1_mm_exfactorydt_pri      = <ls_process_data>-xfactory_date
                                                        data-zz1_mm_scmsegment_pri       = <ls_process_data>-zz1_mm_scmsegment
                                                        data-zz1_mm_vascutoffdate_pri    = get_vas_cutoff_date( iv_planned_date   = <ls_process_data>-planned_date
                                                                                                                iv_exfactory_date = <ls_process_data>-xfactory_date )
                                                        data-zz1_ordprio_pri             = <ls_process_data>-zz1_ordprio
                                                        datax-zz1_adi_m_leadtimeplan_pri = abap_true
                                                        datax-zz1_adi_m_planned_pri      = abap_true
                                                        datax-zz1_adi_m_promoflag_pri    = abap_true
                                                        datax-zz1_custin_pri             = abap_true
                                                        datax-zz1_everss_pri             = abap_true
                                                        datax-zz1_mm_exfactorydt_pri     = abap_true
                                                        datax-zz1_mm_scmsegment_pri      = abap_true
                                                        datax-zz1_mm_tradecomodel_pri    = abap_true
                                                        datax-zz1_mm_vascutoffdate_pri   = abap_true
                                                        datax-zz1_ordprio_pri            = abap_true ) ).

      et_pr_item = VALUE #( BASE et_pr_item ( preq_item         = <ls_process_data>-ebelp
                                              purch_org         = get_purch_org( iv_plant         = <ls_process_data>-werks
                                                                                 iv_pr_doc_type   = es_pr_header-pr_type
                                                                                 iv_tradeco_model = get_tradeco_model( iv_pr_ibp      = iv_pr_ibp
                                                                                                                       iv_pr_item_ibp = <ls_process_data>-ebelp )  )
                                              pur_group         = get_purch_group( iv_var_article = <ls_process_data>-matnr_v
                                                                                   iv_plant       = <ls_process_data>-werks )
                                              fixed_vend        = <ls_process_data>-lifnr
                                              store_loc         = lv_storage_loc
                                              material_long     = <ls_process_data>-matnr_v
                                              material_external = <ls_process_data>-matnr_v
                                              material          = <ls_process_data>-matnr_v
                                              quantity          = <ls_process_data>-planned_qty
                                              plant             = <ls_process_data>-werks
                                              req_blocked       = gc_process_param-block_type_1
                                              reason_blocking   = TEXT-004
                                              trackingno        = <ls_process_data>-custid_t4m
                                              rel_date          = <ls_process_data>-rel_date
                                              deliv_date        = get_delivery_date( iv_plant          = <ls_process_data>-werks
                                                                                     iv_supplier       = <ls_process_data>-lifnr
                                                                                     iv_exfactory_date = <ls_process_data>-xfactory_date
                                                                                     iv_evers = get_ship_instruction( iv_motid = <ls_process_data>-motid ) ) ) ). "#EC CI_STDSEQ
      et_pr_itemx = VALUE #( BASE et_pr_itemx ( preq_item         = <ls_process_data>-ebelp
                                                preq_itemx        = abap_true
                                                purch_org         = abap_true
                                                pur_group         = abap_true
                                                fixed_vend        = abap_true
                                                store_loc         = abap_true
                                                material_long     = abap_true
                                                material_external = abap_true
                                                material          = abap_true
                                                quantity          = abap_true
                                                plant             = abap_true
                                                req_blocked       = abap_true
                                                reason_blocking   = abap_true
                                                trackingno        = abap_true
                                                rel_date          = abap_true
                                                deliv_date        = abap_true ) ).
    ENDLOOP.

    LOOP AT et_pr_item ASSIGNING FIELD-SYMBOL(<ls_pr_item>).
      IF sy-tabix < lines( et_pr_item ) AND
         et_pr_item[ sy-tabix + 1 ]-fixed_vend <> <ls_pr_item>-fixed_vend.
        DATA(lv_flag) = abap_true.
        EXIT.
      ENDIF.
    ENDLOOP.

    IF lv_flag = abap_true.
      LOOP AT et_pr_item ASSIGNING <ls_pr_item>.
        ct_result_log = VALUE #( BASE ct_result_log ( pr_ibp         = iv_pr_ibp
                                                      pr_item        = <ls_pr_item>-preq_item
                                                      result_type    = gc_process_param-error
                                                      result_message = TEXT-003 ) ).
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD process_pr_creation.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 28.11.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
    IF it_input_data IS NOT INITIAL.
      mt_process_data = CORRESPONDING #( it_input_data ).
      DELETE mt_process_data WHERE zebeln <> zcl_sp_fps_perfect_pr_postproc=>gc_process_param-blank. "#EC CI_STDSEQ
    ENDIF.

    delete_open_pr( ).

    et_result = create_pr( ).

  ENDMETHOD.


  METHOD get_tradeco_model.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KHRYSAND     | 02.12.2022 | 15601     : [BUILD] PR creation from pos *
*              |            | DS4K936641                               *
*----------------------------------------------------------------------*
* KHRYSAND     | 09.10.2023 | 24838     : [Build] - [CR] - Add ship to *
*              |            | DS4K962813                               *
*----------------------------------------------------------------------*

    TYPES: BEGIN OF ltyp_s_zhm_trade_co,
             crm_tm_country_from TYPE crm_tm_country_from,
             crm_tm_country_to   TYPE crm_tm_country_to,
             lifnr               TYPE lifnr,
             lifn2               TYPE lifn2,
             zz1_mm_tradecomodel TYPE zz1_mm_tradecomodel,
           END OF ltyp_s_zhm_trade_co.

    DATA: lt_out_zhm_trade_co TYPE STANDARD TABLE OF ltyp_s_zhm_trade_co.

    READ TABLE mt_process_data ASSIGNING FIELD-SYMBOL(<ls_process_data>) WITH KEY ebeln = iv_pr_ibp
                                                                                  ebelp = iv_pr_item_ibp. "#EC CI_STDSEQ  "#EC CI_SUBRC

    SELECT FROM i_supplier
    FIELDS supplier, country
    WHERE supplier = @<ls_process_data>-werks OR
          supplier = @<ls_process_data>-lifnr
    INTO TABLE @DATA(lt_country).                    "#EC CI_SEL_NESTED

    IF sy-subrc = 0.
      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id    = '0239FC3B8D041EDD85F77047DE0B7F59'
                                                  iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                        IMPORTING et_table = lt_out_zhm_trade_co ).
          IF line_exists( lt_out_zhm_trade_co[ crm_tm_country_from = lt_country[ supplier = <ls_process_data>-lifnr ]-country
                                               crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                               lifnr               = <ls_process_data>-lifnr ] ) .
            rv_tradeco_model = lt_out_zhm_trade_co[ crm_tm_country_from = lt_country[ supplier = <ls_process_data>-lifnr ]-country
                                                    crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                                    lifnr               = <ls_process_data>-lifnr ]-zz1_mm_tradecomodel .
          ELSEIF line_exists( lt_out_zhm_trade_co[ crm_tm_country_from = lt_country[ supplier = <ls_process_data>-lifnr ]-country
                                                   crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                                   lifnr               = '' ] ) .
            rv_tradeco_model = lt_out_zhm_trade_co[ crm_tm_country_from = lt_country[ supplier = <ls_process_data>-lifnr ]-country
                                                    crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                                    lifnr               = '' ]-zz1_mm_tradecomodel .
          ELSEIF line_exists( lt_out_zhm_trade_co[ crm_tm_country_from = ''
                                                   crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                                   lifnr               = '' ] ) .
            rv_tradeco_model = lt_out_zhm_trade_co[ crm_tm_country_from = ''
                                                    crm_tm_country_to   = lt_country[ supplier = <ls_process_data>-werks ]-country
                                                    lifnr               = '' ]-zz1_mm_tradecomodel .
          ELSE.
            rv_tradeco_model = ''.
          ENDIF.
        CATCH zcx_pe_hm
              cx_sy_itab_line_not_found.
          rv_tradeco_model = ''.
      ENDTRY.
    ENDIF.
  ENDMETHOD.
ENDCLASS.