INTERFACE if_rap_query_filter PUBLIC.

  TYPES:
    "! Range option with the semantics of selection table criteria (see ABAP Keyword Documentation on "<em>SELECT-OPTIONS</em>" for allowed values for each component)
    BEGIN OF ty_range_option,
      sign   TYPE c LENGTH 1,
      option TYPE c LENGTH 2,
      low    TYPE string,
      high   TYPE string,
    END OF ty_range_option,
    "! Ranges-table-compatible format (see ABAP Keyword Documentation for "TYPES - RANGE OF")
    tt_range_option TYPE STANDARD TABLE OF ty_range_option WITH EMPTY KEY,

    BEGIN OF ty_name_range_pairs,
      name  TYPE string,
      range TYPE tt_range_option,
    END OF ty_name_range_pairs,
    "! List of range tables along with the element that they refer to
    tt_name_range_pairs TYPE STANDARD TABLE OF ty_name_range_pairs WITH EMPTY KEY.


  "! Get filter as a list of simultaneously (logical AND) applicable ranges tables.<br>
  "! <strong>Attention:</strong> Not all filters can be expressed as ranges because a free-style logical filter expression is more flexible than the logical expression
  "! power of range tables (see ABAP Keyword Documentation on "<em>rel_exp - Tabular Relational Operator IN</em>" to get a general idea about this [non-]equivalence).
  "! If a filter cannot be expressed as ranges tables due to its complexity or ambiguities an exception is thrown. In these cases the query implementation is recommended
  "! to resort to using {@link .METH:get_as_tree} or abort processing entirely according to the exception signature of {@link IF_RAP_QUERY_PROVIDER.meth:SELECT}.
  "! @parameter rt_ranges                  | Name-range-table pairs containing the ranges table for each element (if any)
  "! @raising cx_rap_query_filter_no_range | Filter could not be converted to ranges tables
  METHODS get_as_ranges RETURNING VALUE(rt_ranges)         TYPE tt_name_range_pairs
                        RAISING   cx_rap_query_filter_no_range.


  "! Get filter as string for a SQL where condition.
  "!
  "! @parameter rv_string | Filter condition as ABAP SQL relational expression, initial if no filter shall be applied
  METHODS get_as_sql_string RETURNING VALUE(rv_string) TYPE string.

  "! Get filter as a traversable tree. <br>
  "! If no filter is provided the returned filter tree reference {@link .METH:get_as_tree.DATA:ro_tree} is unbound. <br>
  "! @parameter ro_tree | Tree with exactly one root, unbound if no filter restrictions exist
  METHODS get_as_tree RETURNING VALUE(ro_tree) TYPE REF TO if_rap_query_filter_tree.

ENDINTERFACE.