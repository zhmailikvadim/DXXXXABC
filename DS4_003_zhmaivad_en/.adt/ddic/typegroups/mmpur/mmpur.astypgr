TYPE-POOL mmpur.

*---------------------------------------------------------------------*
* CONSTANTS with type of DDIC
*---------------------------------------------------------------------*
CONSTANTS:

*general
  mmpur_yes                 TYPE c VALUE 'X',
  mmpur_no                  TYPE c VALUE ' ',
  mmpur_empty_dynpro_nr     TYPE sy-dynnr VALUE '1000',
  mmpur_tc_button_dynpro    TYPE sy-dynnr VALUE '2001',
  mmpur_tc_dynpro           TYPE sy-dynnr VALUE '2000',
  mmpur_empty_prog          TYPE sy-repid VALUE 'SAPLMEVIEWS',
  mmpur_plugin_active       TYPE i VALUE 1,
  mmpur_plugin_inactive     TYPE i VALUE 0,
  mmpur_custcat_po_docover  TYPE string40 VALUE 'PODocumentOverview',
  mmpur_custcat_po_general  TYPE string40 VALUE 'POGeneralSettings',
  mmpur_custcat_po_propose  TYPE string40 VALUE 'POProposals',
  mmpur_custcat_req_propose TYPE string40 VALUE 'ReqProposals',

* temporary item number for reference handling
  mmpur_default_number      TYPE ebeln VALUE '<INTERN>',

* processes
  mmpur_po_process          TYPE mepo_process VALUE 'PO_PROCESS',
  mmpur_req_process         TYPE mepo_process VALUE 'REQ_PROCESS',
  mmpur_apr_process         TYPE mepo_process VALUE 'APR_PROCESS',
  mmpur_out_process         TYPE mepo_process VALUE 'OUT_PROCESS',

* Initiators
  mmpur_initiator_call      TYPE char40 VALUE 'CALLED',
  mmpur_me58                TYPE char40 VALUE 'ME58',
  mmpur_me57                TYPE char40 VALUE 'ME57',
  mmpur_me56                TYPE char40 VALUE 'ME56',

*.SDP......DCM EXP
  mmpur_initiator_ba        TYPE char40 VALUE 'BUYER',
  mmpur_initiator_rel       TYPE char40 VALUE 'RELEASE',
  mmpur_initiator_xpd       TYPE char40 VALUE 'EXPEDITOR',
  mmpur_initiator_apo       TYPE char40 VALUE 'APO',
  mmpur_initiator_ui        TYPE char40 VALUE 'UserInterface',

* option properties SDP
  mmpur_requested_sched     TYPE char40 VALUE 'SCHEDULELINE',
  mmpur_requested_meta      TYPE char40 VALUE 'METAFIELD',

* option properties
  mmpur_requested_item      TYPE char40 VALUE 'ITEM',
  mmpur_bedat               TYPE char40 VALUE 'BEDAT',
  mmpur_ebeln               TYPE char40 VALUE 'EBELN',
  mmpur_bsart               TYPE char40 VALUE 'BSART',
  mmpur_ekgrp               TYPE char40 VALUE 'EKGRP',
  mmpur_ekorg               TYPE char40 VALUE 'EKORG',
  mmpur_lifnr               TYPE char40 VALUE 'LIFNR',
  mmpur_reswk               TYPE char40 VALUE 'RESWK',
  mmpur_beswk               TYPE char40 VALUE 'BESWK',

* authority
*           - purchase requisition
  mmpur_auth_banf_bsa       TYPE xuobject VALUE 'M_BANF_BSA',
  mmpur_auth_banf_eko       TYPE xuobject VALUE 'M_BANF_EKO',
  mmpur_auth_banf_ekg       TYPE xuobject VALUE 'M_BANF_EKG',
  mmpur_auth_banf_wrk       TYPE xuobject VALUE 'M_BANF_WRK',
  mmpur_auth_banf_bwk       TYPE xuobject VALUE 'M_BANF_BWK',
  mmpur_auth_banf_frg       TYPE xuobject VALUE 'M_BANF_FRG',
  mmpur_auth_eink_frg       TYPE xuobject VALUE 'M_EINK_FRG',
*           - outline agreements
  mmpur_auth_rahm_bsa       TYPE xuobject VALUE 'M_RAHM_BSA',
  mmpur_auth_rahm_eko       TYPE xuobject VALUE 'M_RAHM_EKO',
  mmpur_auth_rahm_ekg       TYPE xuobject VALUE 'M_RAHM_EKG',
  mmpur_auth_rahm_wrk       TYPE xuobject VALUE 'M_RAHM_WRK',
  mmpur_auth_rahm_lgo       TYPE xuobject VALUE 'M_RAHM_LGO',
*           - Central contracts
  mmpur_auth_cctr_bsa       TYPE xuobject VALUE 'M_CCTR_BSA',
  mmpur_auth_cctr_eko       TYPE xuobject VALUE 'M_CCTR_EKO',
  mmpur_auth_cctr_ekg       TYPE xuobject VALUE 'M_CCTR_EKG',
*           - scheduling agreement call offs
  mmpur_auth_lpet_bsa       TYPE xuobject VALUE 'M_LPET_BSA',
  mmpur_auth_lpet_eko       TYPE xuobject VALUE 'M_LPET_EKO',
  mmpur_auth_lpet_ekg       TYPE xuobject VALUE 'M_LPET_EKG',
  mmpur_auth_lpet_wrk       TYPE xuobject VALUE 'M_LPET_WRK',
  mmpur_auth_lpet_lgo       TYPE xuobject VALUE 'M_LPET_LGO',
*           - purchase order
  mmpur_auth_best_bsa       TYPE xuobject VALUE 'M_BEST_BSA',
  mmpur_auth_best_eko       TYPE xuobject VALUE 'M_BEST_EKO',
  mmpur_auth_best_ekg       TYPE xuobject VALUE 'M_BEST_EKG',
  mmpur_auth_best_wrk       TYPE xuobject VALUE 'M_BEST_WRK',
  mmpur_auth_best_lgo       TYPE xuobject VALUE 'M_BEST_LGO',
*           - request for quotation
  mmpur_auth_anfr_bsa       TYPE xuobject VALUE 'M_ANFR_BSA',
  mmpur_auth_anfr_eko       TYPE xuobject VALUE 'M_ANFR_EKO',
  mmpur_auth_anfr_ekg       TYPE xuobject VALUE 'M_ANFR_EKG',
  mmpur_auth_anfr_wrk       TYPE xuobject VALUE 'M_ANFR_WRK',
*           - quotation
  mmpur_auth_angb_bsa       TYPE xuobject VALUE 'M_ANGB_BSA',
  mmpur_auth_angb_eko       TYPE xuobject VALUE 'M_ANGB_EKO',
  mmpur_auth_angb_ekg       TYPE xuobject VALUE 'M_ANGB_EKG',
  mmpur_auth_angb_wrk       TYPE xuobject VALUE 'M_ANGB_WRK',
*           - new request for quotation
  mmpur_auth_rfq_bsa        TYPE xuobject VALUE 'M_RFQ_BSA',
  mmpur_auth_rfq_eko        TYPE xuobject VALUE 'M_RFQ_EKO',
  mmpur_auth_rfq_ekg        TYPE xuobject VALUE 'M_RFQ_EKG',
  mmpur_auth_rfq_wrk        TYPE xuobject VALUE 'M_RFQ_WRK',
  mmpur_auth_rfq_lgo        TYPE xuobject VALUE 'M_RFQ_LGO',
*           - new supplier quotation
  mmpur_auth_qtn_bsa        TYPE xuobject VALUE 'M_QTN_BSA',
  mmpur_auth_qtn_eko        TYPE xuobject VALUE 'M_QTN_EKO',
  mmpur_auth_qtn_ekg        TYPE xuobject VALUE 'M_QTN_EKG',
  mmpur_auth_qtn_wrk        TYPE xuobject VALUE 'M_QTN_WRK',
  mmpur_auth_qtn_lgo        TYPE xuobject VALUE 'M_QTN_LGO',
*           - purchase info record
  mmpur_auth_inf_wrk        TYPE xuobject VALUE 'M_EINF_WRK',
  mmpur_auth_inf_eko        TYPE xuobject VALUE 'M_EINF_EKO',
  mmpur_auth_inf_ekg        TYPE xuobject VALUE 'M_EINF_EKG',

  mmpur_auth_actvt_hin      TYPE activ_auth VALUE '01',
  mmpur_auth_actvt_ver      TYPE activ_auth VALUE '02',
  mmpur_auth_actvt_anz      TYPE activ_auth VALUE '03',
  mmpur_auth_actvt_del      TYPE activ_auth VALUE '06',

* events
  mmpur_event_s             TYPE i VALUE 10,
  mmpur_event_i             TYPE i VALUE 11,
  mmpur_event_w             TYPE i VALUE 12,
  mmpur_event_e             TYPE i VALUE 13,
  mmpur_event_a             TYPE i VALUE 14,
  mmpur_event_x             TYPE i VALUE 15,

* Class-IDs for saplmequery
  mmpur_dbl_po              TYPE mmpur_databl_classid VALUE 'PO_QUERY',
  mmpur_dbl_rfq             TYPE mmpur_databl_classid VALUE 'RFQ_QUERY',
  mmpur_dbl_agreemnt        TYPE mmpur_databl_classid VALUE 'AGREEMENT_QUERY',
  mmpur_dbl_contract        TYPE mmpur_databl_classid VALUE 'CONTRACT_QUERY',
  mmpur_dbl_schdlagrmnt     TYPE mmpur_databl_classid VALUE 'SCH_QUERY',
  mmpur_dbl_purchdocs       TYPE mmpur_databl_classid VALUE 'PURDOCS_QUERY',
  mmpur_dbl_req             TYPE mmpur_databl_classid VALUE 'REQ_QUERY',
  mmpur_dbl_po_usr          TYPE mmpur_databl_classid VALUE 'POS_BY_USER_QUERY',
  mmpur_dbl_parkedpo_usr
             TYPE mmpur_databl_classid VALUE 'PARKED_POS_BY_USER_QUERY',
  mmpur_dbl_heldpo_usr                                    "Park&Hold
             TYPE mmpur_databl_classid VALUE 'HELD_POS_BY_USER_QUERY',
  mmpur_dbl_req_usr         TYPE mmpur_databl_classid VALUE 'REQ_BY_USER_QUERY',
  mmpur_dbl_parkedreq_usr                                 "Park&Hold
             TYPE mmpur_databl_classid VALUE 'PARKED_REQ_BY_USER_QUERY',
  mmpur_dbl_heldreq_usr                                   "Park&Hold
             TYPE mmpur_databl_classid VALUE 'HELD_REQ_BY_USER_QUERY'.

*---------------------------------------------------------------------*
* TYPES
*---------------------------------------------------------------------*
TYPES:

* Fcode exclusion
  BEGIN OF mmpur_pf_exclusion_rec,
    function TYPE sy-ucomm,
  END OF mmpur_pf_exclusion_rec,

  mmpur_pf_excluding_tab TYPE SORTED TABLE OF mmpur_pf_exclusion_rec
                              WITH UNIQUE KEY function,

  mmpur_plugin_state     TYPE i,

* Metafields
  mmpur_fieldlist        TYPE mmpur_metafield OCCURS 0,

* Dynpro description
  BEGIN OF mmpur_dynpro_entry,
    screenname          TYPE scrfname,
    fieldname           TYPE fieldname,
    position            TYPE sy-index,
    metafield           TYPE mmpur_metafield,
    display_only        TYPE mmpur_bool,
    initial_no_disp     TYPE mmpur_bool,
    initial_is_inactive TYPE mmpur_bool,
  END OF mmpur_dynpro_entry,

  mmpur_dynpro_fields TYPE SORTED TABLE OF mmpur_dynpro_entry
                           WITH UNIQUE KEY screenname,
* Class registry
  BEGIN OF mmpur_class_registry_type,
    class_id_long TYPE seoclsname,
    class_id      TYPE i,
  END OF mmpur_class_registry_type,

  mmpur_class_registry TYPE SORTED TABLE OF mmpur_class_registry_type
                            WITH UNIQUE KEY class_id_long,

* Messages
  BEGIN OF mmpur_message_config_entry,
    msgty   TYPE symsgty,
    dialog,                                                 "#EC *
    collect,                                                "#EC *
  END OF mmpur_message_config_entry,

  mmpur_message_config TYPE STANDARD TABLE OF mmpur_message_config_entry
                            INITIAL SIZE 0,

  mmpur_acc_tab        TYPE STANDARD TABLE OF ueskn INITIAL SIZE 1,

  mmpur_tkomv          TYPE STANDARD TABLE OF komv INITIAL SIZE 1,
  mmpur_tkomk          TYPE STANDARD TABLE OF komk INITIAL SIZE 1,
  mmpur_tkomp          TYPE STANDARD TABLE OF komp INITIAL SIZE 1.

TYPES: BEGIN OF mmpur_konv_ext.                             "1012433
         INCLUDE STRUCTURE konv.
TYPES:   change_id TYPE cdchngind,
       END OF mmpur_konv_ext.

TYPES:
  mmpur_tkonv_ext TYPE STANDARD TABLE OF mmpur_konv_ext,
  mmpur_tkonv_x   TYPE STANDARD TABLE OF mepoconditionx,    "1012433

  BEGIN OF mmpur_inactive_entry,
    metafield TYPE mmpur_metafield,
    inactive  TYPE mmpur_bool,
  END OF mmpur_inactive_entry,

  mmpur_inactive TYPE STANDARD TABLE OF mmpur_inactive_entry
                     INITIAL SIZE 0,

  BEGIN OF mmpur_partner_all,
*   MODEL TYPE REF TO CL_PO_PARTNER_HANDLE_MM,
    data TYPE msgpa,
  END OF mmpur_partner_all,

  mmpur_partner_all_tab TYPE mmpur_partner_all OCCURS 0,

* types for Drag&Drop-Flavors
  mmpur_flavor(64)      TYPE c,

* types for GENERIC TREE
  BEGIN OF mmpur_gentree_record,
    col1    TYPE string40,
    col2    TYPE string40,
    col3    TYPE string40,
    col4    TYPE string40,
    col5    TYPE string40,
    col6    TYPE string40,
    col7    TYPE string40,
    col8    TYPE string40,
    col9    TYPE string40,
    col10   TYPE string40,
    nodekey TYPE lvc_nkey,
  END OF mmpur_gentree_record,

  mmpur_gentree_table      TYPE STANDARD TABLE OF mmpur_gentree_record
                           INITIAL SIZE 0,

* Text handling
  mmpur_texttypes_table    TYPE STANDARD TABLE OF mmpur_texttypes
                             INITIAL SIZE 0,
  mmpur_textlines_table    TYPE STANDARD TABLE OF mmpur_textlines
                             INITIAL SIZE 0,

* types for rulebase definitions
  mmpur_ty_rule_scope      TYPE i,
  mmpur_ty_rule_validation TYPE i,
  mmpur_ty_rule_dependency TYPE i.


*---------------------------------------------------------------------*
* CONSTANTS with type of this include
*---------------------------------------------------------------------*
CONSTANTS:

* constants for Drag&Drop-Flavors
  mmpur_flavor_pdocs          TYPE mmpur_flavor VALUE 'PDOCS',
  mmpur_flavor_req            TYPE mmpur_flavor VALUE 'PREQ',

* constants for rulebase definitions
  mmpur_scope_full            TYPE mmpur_ty_rule_scope VALUE 1,
  mmpur_scope_read            TYPE mmpur_ty_rule_scope VALUE 2,
  mmpur_scope_change          TYPE mmpur_ty_rule_scope VALUE 3,
  mmpur_scope_on_demand       TYPE mmpur_ty_rule_scope VALUE 4,
  mmpur_scope_late            TYPE mmpur_ty_rule_scope VALUE 5,
  mmpur_scope_check           TYPE mmpur_ty_rule_scope VALUE 6,
  mmpur_scope_exec_by_sys     TYPE mmpur_ty_rule_scope VALUE 7,

  mmpur_rule_valid            TYPE mmpur_ty_rule_validation VALUE 1,
  mmpur_rule_invalid          TYPE mmpur_ty_rule_validation VALUE 2,
  mmpur_rule_valid_no_upd     TYPE mmpur_ty_rule_validation VALUE 3,

  mmpur_rule_exec_imme        TYPE mmpur_rule_exec_mode VALUE 1,
  mmpur_rule_exec_late        TYPE mmpur_rule_exec_mode VALUE 2,

  mmpur_rule_dep_precondition TYPE mmpur_ty_rule_dependency VALUE 1,
  mmpur_rule_dep_observer     TYPE mmpur_ty_rule_dependency VALUE 2,
  mmpur_rule_dep_none         TYPE mmpur_ty_rule_dependency VALUE 3.

*---------------------------------------------------------------------*
* MACROS for syncing derivative data that might be altered from
* the first process (MEPO)
*---------------------------------------------------------------------*
* use: mmpur_sync_derivative_data reference_field (e.g. banfpo)
*      derivated by MEPO but still not changed in the current structure
* result:  We put in sync the current structure with the old one
*          might have been deviated by MEPO
DEFINE mmpur_sync_derivative_data.

*  ls_po_schedule_itemx-&1 = xsdbool( <my_schedule_item>-datax-&1 = abap_false
*                 AND <my_schedule_item>-data-&1 <> ls_po_schedule_item_old-&1 ).
*  IF ls_po_schedule_itemx-&1 = abap_true.
*    ls_po_schedule_item-&1 = ls_po_schedule_item_old-&1.
*  ENDIF.
  IF <my_schedule_item>-datax-&1 = abap_false AND
     <my_schedule_item>-data-&1 NE ls_po_schedule_item_old-&1.
     ls_po_schedule_item-&1 = ls_po_schedule_item_old-&1.
     ls_po_schedule_itemx-&1 = abap_true.
  ENDIF.

END-OF-DEFINITION.

*---------------------------------------------------------------------*
* MACROS for Dynamic Cast
*---------------------------------------------------------------------*
* use: dynamic_cast reference_target_type reference_source_type
* result:  a) cast works (reference_target_type assigned)
*          b) cast doesn't work (reference_target_type cleared)
*             sy-subrc = 1

DEFINE mmpur_dynamic_cast.
  CATCH SYSTEM-EXCEPTIONS move_cast_error = 1.
    &1 ?= &2.
  ENDCATCH.
  IF sy-subrc = 1.
    CLEAR: &1.
  ENDIF.
END-OF-DEFINITION.

DEFINE mmpur_dynamic_cast1.
  TRY.
      &1 ?= &2.
    CATCH cx_sy_move_cast_error.
      CLEAR &1.
  ENDTRY.
END-OF-DEFINITION.

*---------------------------------------------------------------------*
* MACROS for Mutual Exclusion
*---------------------------------------------------------------------*

* --------------------------------------------------------------------
* begin mutex
* --------------------------------------------------------------------
* starts a block of coding, which is protected from re-entrance
* use: mmpur_begin_mutex id
*    parameters: &1  id   An id (max. 40 char)
DEFINE mmpur_begin_mutex.
  CALL METHOD cl_mutex_mm=>p
    EXPORTING
      im_obj = me
      im_id  = '&1'
    EXCEPTIONS
      failed = 1.

  IF sy-subrc EQ 0.
END-OF-DEFINITION.
* --------------------------------------------------------------------
* end mutex
* --------------------------------------------------------------------
* ends a block of coding, which is protected from re-entrance
* use: mmpur_end_mutex id
*    parameters: &1  id   An id (max. 40 char) the same id as begin!!!
DEFINE mmpur_end_mutex.
  CALL METHOD cl_mutex_mm=>v
    EXPORTING
      im_obj = me
      im_id  = '&1'.
ENDIF.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
DEFINE mmpur_begin_mutex_2.
  CALL METHOD cl_mutex_mm=>p
    EXPORTING
      im_obj = &1
      im_id  = '&2'
    EXCEPTIONS
      failed = 1.
END-OF-DEFINITION.
*----------------------------------------------------------------------*
DEFINE mmpur_end_mutex_2.
  CALL METHOD cl_mutex_mm=>v
    EXPORTING
      im_obj = &1
      im_id  = '&2'
    EXCEPTIONS
      failed = 01.
END-OF-DEFINITION.

*---------------------------------------------------------------------*
* MACROS for transport fields
*---------------------------------------------------------------------*
DEFINE mmpur_transport_fields.

  DO.
    FIELD-SYMBOLS: <new> TYPE any,
                   <old> TYPE any,
                   <act> TYPE any.
    DATA: l_dynpro_entry LIKE LINE OF my_dynpro_fields.

    ASSIGN COMPONENT sy-index OF
           STRUCTURE &1 TO <new>.
    IF sy-subrc <> 0. EXIT. ENDIF.
    ASSIGN COMPONENT sy-index OF
           STRUCTURE &2 TO <old>.
    IF sy-subrc <> 0. EXIT. ENDIF.
    CHECK <new> NE <old>.
    READ TABLE my_dynpro_fields INTO l_dynpro_entry
                            WITH KEY position = sy-index.
    CHECK sy-subrc IS INITIAL.
    ASSIGN COMPONENT l_dynpro_entry-fieldname OF
           STRUCTURE &3 TO <act>.
    IF sy-subrc EQ 0.
      <act> = <new>.
    ENDIF.
  ENDDO.

END-OF-DEFINITION.

DEFINE mmpur_transport_fields_x.

  DO.
    FIELD-SYMBOLS: <new> TYPE any,
                   <old> TYPE any,
                   <act> TYPE any,
                   <x>   TYPE any.
    DATA: l_dynpro_entry LIKE LINE OF my_dynpro_fields.

    ASSIGN COMPONENT sy-index OF
           STRUCTURE &1 TO <new>.
    IF sy-subrc <> 0. EXIT. ENDIF.
    ASSIGN COMPONENT sy-index OF
           STRUCTURE &2 TO <old>.
    IF sy-subrc <> 0. EXIT. ENDIF.
    CHECK <new> NE <old>.
    READ TABLE my_dynpro_fields INTO l_dynpro_entry
                            WITH KEY position = sy-index.
    CHECK sy-subrc IS INITIAL.
    ASSIGN COMPONENT l_dynpro_entry-fieldname OF
           STRUCTURE &3 TO <act>.
    IF sy-subrc EQ 0.
      <act> = <new>.
    ENDIF.
    ASSIGN COMPONENT l_dynpro_entry-fieldname OF
           STRUCTURE &4 TO <x>.
    IF sy-subrc EQ 0.
      <x> = mmpur_yes.
    ENDIF.
  ENDDO.

END-OF-DEFINITION.

*---------------------------------------------------------------------*
* MACROS for build metafield
*---------------------------------------------------------------------*
DEFINE mmpur_build_metafield.
  READ TABLE my_dynpro_fields INTO l_dynpro_field
                              WITH KEY screenname = &1.
  IF sy-subrc IS INITIAL.
    l_dynpro_field-metafield = &2.
    MODIFY my_dynpro_fields FROM l_dynpro_field INDEX sy-tabix.
  ENDIF.
END-OF-DEFINITION.

*---------------------------------------------------------------------*
* MACROS for dynprofield set option
*---------------------------------------------------------------------*
DEFINE mmpur_dynprofield_set_option.
  READ TABLE my_dynpro_fields INTO l_dynpro_field
                              WITH KEY screenname = &1.
  IF sy-subrc IS INITIAL.
    l_dynpro_field-display_only = &2.
    l_dynpro_field-initial_no_disp = &3.
    l_dynpro_field-initial_is_inactive = &4.
    MODIFY my_dynpro_fields FROM l_dynpro_field INDEX sy-tabix.
  ENDIF.
END-OF-DEFINITION.