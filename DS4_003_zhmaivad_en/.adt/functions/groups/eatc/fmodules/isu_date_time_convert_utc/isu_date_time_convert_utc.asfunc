FUNCTION isu_date_time_convert_utc
  IMPORTING
    x_date TYPE e_edmdatefrom
    x_time TYPE e_edmtimefrom
    x_timezone TYPE timezone
    x_second TYPE kennzx OPTIONAL
  EXPORTING
    y_date_utc TYPE e_edmdatefrom
    y_time_utc TYPE e_edmtimefrom
  EXCEPTIONS
    general_fault.




  CONSTANTS  co_timezone_utc   TYPE  timezone   VALUE 'UTC'.
  DATA  itimestamp             TYPE  timestamp.
  DATA  s_dt                   TYPE  eedmdateto.
  DATA  subrc                  TYPE  sy-subrc.
  DATA: l_date TYPE profvalday,
        l_time   TYPE proftimefrom,
        l_ttzdf  TYPE ttzdf,
        l_second TYPE kennzx.

* Anything to do?
  IF x_timezone = co_timezone_utc.
    y_date_utc = x_date.
    y_time_utc = x_time.
    EXIT.
  ENDIF.

  IF NOT x_second IS INITIAL.
*   read DST data
    CALL FUNCTION 'ISU_EDM_DST_DETERMINE'
      EXPORTING
        x_keydate          = x_date
        x_time_zone        = x_timezone
      IMPORTING
        y_ttzdf            = l_ttzdf
*       Y_SOUTH            =
      EXCEPTIONS
        timezone_not_valid = 1
        OTHERS             = 2.
    IF sy-subrc <> 0.
*     timezone not valid
      mac_msg_putx co_msg_error '500' 'EPRO'
      x_timezone space space space general_fault.
      IF 1 = 2. MESSAGE e500(epro) WITH space space space space. ENDIF.
    ENDIF.
*   l_ttzdf-dateto/-timeto contain end of double hour -> calculate begin
    l_date = l_ttzdf-dateto.
    l_time = l_ttzdf-timeto - 3600.
    IF l_time GT l_ttzdf-timeto.
      SUBTRACT 1 FROM l_date.
    ENDIF.
*   check if x_date/x_time is in this hour
    IF l_date =  l_ttzdf-dateto AND
       x_date =  l_ttzdf-dateto AND
       x_time GE l_time         AND
       x_time LT l_ttzdf-timeto     OR
       l_date LT l_ttzdf-dateto AND
       x_date =  l_date         AND
       x_time GE l_time             OR
       l_date LT l_ttzdf-dateto AND
       x_date =  l_ttzdf-dateto AND
       x_time LT l_ttzdf-timeto.
      l_second = 'X'.
    ENDIF.
    CLEAR: l_date, l_time.
  ENDIF.

* Build internal time format depending on given time zone
  IF l_second IS INITIAL.
  CONVERT  DATE             x_date
           TIME             x_time
           INTO TIME STAMP  itimestamp
           TIME ZONE        x_timezone.
  ELSE.
    CONVERT  DATE             x_date
             TIME             x_time
             DAYLIGHT SAVING TIME ' '
             INTO TIME STAMP  itimestamp
             TIME ZONE        x_timezone.
  ENDIF.
  subrc = sy-subrc.
  IF subrc = 12.
*   date/time not valid
*   probably "missing" hour at change to DST
*   -> add one hour and try again
    l_time = x_time + 3600.
    IF l_time GT x_time.
      l_date = x_date.
    ELSE.
      l_date = x_date + 1.
    ENDIF.
    CONVERT  DATE             l_date
             TIME             l_time
             INTO TIME STAMP  itimestamp
             TIME ZONE        x_timezone.
    subrc = sy-subrc.
  ENDIF.

  IF subrc = 0.
* ------------------------------------------------------------------
*   Remark WWT 31.07.2000
*   =====================
*   If the following allocations unexpectedly are too time-consuming
*   one could alternatively work with a second conversion (see below)
    s_dt       = itimestamp.
    y_date_utc = s_dt-dateto.
    y_time_utc = s_dt-timeto.
*   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
*   CONVERT  TIME STAMP       ITIMESTAMP
*            TIME ZONE        CO_TIMEZONE_UTC
*            INTO DATE        Y_DATE_UTC
*            TIME             Y_TIME_UTC.
*   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
  ENDIF.
* -------------------------------------------------------------------
  IF subrc <> 0 OR sy-subrc <> 0.
*   Konvertierungsfehler Datum &1 Zeit &2 Zeitzone &3 nach Zeitzone &4
    mac_msg_putx co_msg_error '570' 'AJ'
      x_date x_time x_timezone co_timezone_utc general_fault.
    IF 1 = 2. MESSAGE e570(aj) WITH space space space space. ENDIF.
  ENDIF.


ENDFUNCTION.                           " ISU_DATE_TIME_CONVERT_UTC