
CLASS ltc_mmim_soa_matdoc_aifmap DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
.
*?ï»¿<asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
*?<asx:values>
*?<TESTCLASS_OPTIONS>
*?<TEST_CLASS>ltc_Mmim_Soa_Matdoc_Aifmap
*?</TEST_CLASS>
*?<TEST_MEMBER>-no-
*?</TEST_MEMBER>
*?<OBJECT_UNDER_TEST/>
*?<OBJECT_IS_LOCAL/>
*?<GENERATE_FIXTURE/>
*?<GENERATE_CLASS_FIXTURE/>
*?<GENERATE_INVOCATION/>
*?<GENERATE_ASSERT_EQUAL/>
*?</TESTCLASS_OPTIONS>
*?</asx:values>
*?</asx:abap>
  PRIVATE SECTION.

    METHODS: mmim_soa_xml_transfer_to_aif FOR TESTING.
    METHODS: mmim_soa_matdoc_notif_switch FOR TESTING.
    METHODS: mmim_soa_matdoc_conf_switch FOR TESTING.
    METHODS: mmim_soa_matdoc_handle_con_op FOR TESTING.
    METHODS: mmim_soa_matdoc_handle_not_op FOR TESTING.
    METHODS: mmim_soa_matdoc_handle_req  FOR TESTING.
    METHODS: mmim_soa_aifmap_con FOR TESTING.
    METHODS: mmim_soa_aifmap_req FOR TESTING.
    METHODS: mmim_soa_aifmap_not FOR TESTING.

ENDCLASS.       "ltc_Mmim_Soa_Matdoc_Aifmap


CLASS ltc_mmim_soa_matdoc_aifmap IMPLEMENTATION.

  METHOD mmim_soa_xml_transfer_to_aif.

    DATA:
      lv_exist        TYPE sy-index,
      lv_queue_name   TYPE  /aif/pers_rtcfgr_name VALUE 'MMI',
      lv_queue_ns     TYPE  /aif/pers_rtcfgr_ns VALUE '/MMIM',
      lt_notif        TYPE  tt_mmim_soa_aif_notif_data,
      ls_confirmation TYPE  mmim_soa_matdoc_aif_conf_data.

* result could not be checked, as this is an RFC FM for an AIF integration
    CALL FUNCTION 'MMIM_SOA_XML_TRANSFER_TO_AIF'
      EXPORTING
        iv_queue_name = lv_queue_name
        iv_queue_ns   = lv_queue_ns
        it_notif      = lt_notif.
*        is_confirmation = ls_confirmation.

* if there is not dump, test is ok
    CALL METHOD cl_aunit_assert=>assert_initial
      EXPORTING
        act   = sy-subrc
        msg   = 'Error with lt_notif'
        level = cl_aunit_assert=>critical.

*   Check if FM exists for AIF
    SELECT COUNT(*) FROM /aif/t_finf
      WHERE ddicstructureraw = 'MMIM_SOA_MATDOC_AIF_CONF_DATA'
      INTO @lv_exist.

    IF lv_exist GT 0.
* result could not be checked, as this is an RFC FM for an AIF integration
      CALL FUNCTION 'MMIM_SOA_XML_TRANSFER_TO_AIF'
        EXPORTING
          iv_queue_name   = lv_queue_name
          iv_queue_ns     = lv_queue_ns
*         it_notif        = lt_notif
          is_confirmation = ls_confirmation.

* if there is not dump, test is ok
      CALL METHOD cl_aunit_assert=>assert_initial
        EXPORTING
          act   = sy-subrc
          msg   = 'Error with ls_confirmation'
          level = cl_aunit_assert=>critical.
    ENDIF.

  ENDMETHOD.


  METHOD mmim_soa_matdoc_notif_switch.

    DATA:
      lv_type      TYPE  /aif/int_type_id,
      lv_cust_ns   TYPE  /aif/ns,
      lv_cust_type TYPE  /aif/cust_int_type_id,
      lv_name1     TYPE  /aif/lfieldname_infdet,
      lv_name2     TYPE  /aif/lfieldname_infdet,
      lv_input     TYPE  char1, "ANY,
      ev_ns        TYPE  /aif/ns,
      ev_ifname    TYPE  /aif/ifname,
      ev_ifversion TYPE  /aif/ifversion.


    CALL FUNCTION 'MMIM_SOA_MATDOC_NOTIF_SWITCH'
      EXPORTING
        iv_type              = lv_type
        iv_cust_ns           = lv_cust_ns
        iv_cust_type         = lv_cust_type
        iv_name1             = lv_name1
        iv_name2             = lv_name2
        iv_input             = lv_input
*     IMPORTING
*       EV_NS                =
*       EV_IFNAME            =
*       EV_IFVERSION         =
      EXCEPTIONS
        interface_det_failed = 1
        OTHERS               = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
  METHOD mmim_soa_matdoc_conf_switch.

    DATA:
      lv_type      TYPE  /aif/int_type_id,
      lv_cust_ns   TYPE  /aif/ns,
      lv_cust_type TYPE  /aif/cust_int_type_id,
      lv_name1     TYPE  /aif/lfieldname_infdet,
      lv_name2     TYPE  /aif/lfieldname_infdet,
      lv_input     TYPE  char1, "ANY,
      ev_ns        TYPE  /aif/ns,
      ev_ifname    TYPE  /aif/ifname,
      ev_ifversion TYPE  /aif/ifversion.

    CALL FUNCTION 'MMIM_SOA_MATDOC_CONF_SWITCH'
      EXPORTING
        iv_type              = lv_type
        iv_cust_ns           = lv_cust_ns
        iv_cust_type         = lv_cust_type
        iv_name1             = lv_name1
        iv_name2             = lv_name2
        iv_input             = lv_input
*     IMPORTING
*       EV_NS                =
*       EV_IFNAME            =
*       EV_IFVERSION         =
      EXCEPTIONS
        interface_det_failed = 1
        OTHERS               = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
  METHOD mmim_soa_matdoc_handle_con_op.

    DATA: lv_testrun      TYPE c,
          lt_return_tab   TYPE TABLE OF bapiret2,
          ev_data         TYPE mmim_soa_matdoc_aif_conf_data, "TYPE REF TO object,
          ev_curr_line    TYPE REF TO object,
          ev_success      TYPE  /aif/successflag,
          ev_old_messages TYPE  /aif/bal_t_msg.

    CALL FUNCTION 'MMIM_SOA_MATDOC_HANDLE_CON_OP'
      EXPORTING
        testrun      = lv_testrun
*       SENDING_SYSTEM       =
      TABLES
        return_tab   = lt_return_tab
      CHANGING
        data         = ev_data
        curr_line    = ev_curr_line
        success      = ev_success
        old_messages = ev_old_messages.

  ENDMETHOD.
  METHOD mmim_soa_matdoc_handle_not_op.
    DATA: lv_testrun      TYPE c,
          lt_return_tab   TYPE TABLE OF bapiret2,
          ev_data         TYPE mmim_soa_matdoc_aif_notif_data, "TYPE REF TO object,
          ev_curr_line    TYPE REF TO object,
          ev_success      TYPE  /aif/successflag,
          ev_old_messages TYPE  /aif/bal_t_msg.
    CALL FUNCTION 'MMIM_SOA_MATDOC_HANDLE_NOT_OP'
      EXPORTING
        testrun      = lv_testrun
*       SENDING_SYSTEM       =
      TABLES
        return_tab   = lt_return_tab
      CHANGING
        data         = ev_data
        curr_line    = ev_curr_line
        success      = ev_success
        old_messages = ev_old_messages.

  ENDMETHOD.
  METHOD mmim_soa_matdoc_handle_req.
    DATA: lv_testrun      TYPE c,
          lt_return_tab   TYPE TABLE OF bapiret2,
          ev_data         TYPE REF TO object,
          ev_curr_line    TYPE REF TO object,
          ev_success      TYPE  /aif/successflag,
          ev_old_messages TYPE  /aif/bal_t_msg.
    CALL FUNCTION 'MMIM_SOA_MATDOC_HANDLE_REQ'
      EXPORTING
        testrun      = lv_testrun
*       SENDING_SYSTEM       =
      TABLES
        return_tab   = lt_return_tab
      CHANGING
        data         = ev_data
        curr_line    = ev_curr_line
        success      = ev_success
        old_messages = ev_old_messages.

  ENDMETHOD.
  METHOD mmim_soa_aifmap_con.
    DATA:
      ls_finf       TYPE  /aif/t_finf,
      lt_return_tab TYPE TABLE OF bapiret2.
*"     REFERENCE(SENDING_SYSTEM) TYPE  /AIF/AIF_BUSINESS_SYSTEM_KEY
*"       OPTIONAL
*"  TABLES
*"      RETURN_TAB STRUCTURE  BAPIRET2

    CALL FUNCTION 'MMIM_SOA_MATDOC_AIFMAP_CON'
      EXPORTING
*       CONTEXT    =
        finf       = ls_finf
*       SENDING_SYSTEM       =
      TABLES
        return_tab = lt_return_tab
*     CHANGING
*       DATA       =
*       RAW_STRUCT =
      EXCEPTIONS
        cancel     = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
  METHOD mmim_soa_aifmap_req.
    DATA:
      ls_finf       TYPE  /aif/t_finf,
      lt_return_tab TYPE TABLE OF bapiret2.
    CALL FUNCTION 'MMIM_SOA_MATDOC_AIFMAP_REQ'
*     EXPORTING
*       CONTEXT              =
*       FINF                 =
*       SENDING_SYSTEM       =
      TABLES
        return_tab = lt_return_tab
*     CHANGING
*       DATA       =
*       RAW_STRUCT =
      EXCEPTIONS
        cancel     = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
  METHOD mmim_soa_aifmap_not.
    DATA:
      ls_finf       TYPE  /aif/t_finf,
      lt_return_tab TYPE TABLE OF bapiret2.
    CALL FUNCTION 'MMIM_SOA_MATDOC_AIFMAP_NOT'
      EXPORTING
*       CONTEXT    =
        finf       = ls_finf
*       SENDING_SYSTEM       =
      TABLES
        return_tab = lt_return_tab
* CHANGING
*       DATA       =
*       RAW_STRUCT =
      EXCEPTIONS
        cancel     = 1
        OTHERS     = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.
ENDCLASS.