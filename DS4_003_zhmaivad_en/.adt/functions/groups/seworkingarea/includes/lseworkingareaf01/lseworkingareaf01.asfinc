FORM convert_object_for_abap TABLES p_item_tab TYPE sewor_work_tab
                             CHANGING p_item LIKE work_items.

  DATA: l_length TYPE i,
        l_obj    LIKE e071-obj_name,
        l_flag   TYPE c,
        l_subrc  LIKE sy-subrc.

  CASE p_item-object.
    WHEN 'FUNC'.
      cl_wb_activation_work_area=>convert_func_to_reps( CHANGING p_item  = p_item
                                                                 p_subrc = l_subrc ).

      IF l_subrc = 0.
*       Der Baustein könnte noch nicht existieren, dann soll hier nichts
*       passieren
        p_item_tab = p_item.
        APPEND p_item_tab.
        l_length = strlen( p_item-obj_name ) - 3.
        p_item_tab-obj_name+l_length(1) = '$'.
***JR sehr inperformant
        l_obj = p_item_tab-obj_name.
        CALL FUNCTION 'RS_OBJECT_IN_WORKING_AREA'
          EXPORTING
            object              = 'REPS'
            obj_name            = l_obj
            global_check        = 'X'
          IMPORTING
            object_is_work_item = l_flag
          EXCEPTIONS
            OTHERS              = 0.

        IF NOT l_flag IS INITIAL.
          APPEND p_item_tab.
*       Wenns den $ gibt, dann könnte es auch den V geben
          p_item_tab-obj_name+l_length(1) = 'V'.
          APPEND p_item_tab.
        ENDIF.
      ENDIF.
    WHEN 'TYPE' OR 'TYPD'.
      p_item_tab-object   = 'REPS'.
      p_item_tab-obj_name = '%_C' && p_item-obj_name.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'CUAD' OR 'DYNP'.
*     Tue nichts, da nicht im ABAP
    WHEN 'CREP'.
      p_item_tab-object   = 'REPS'.
      p_item_tab-obj_name = p_item-obj_name.
      TRANSLATE p_item_tab-obj_name(30) USING ' ='.
      p_item_tab-obj_name+30(5) = 'CL'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'CINC'.
      p_item_tab-object = 'REPS'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'CLSD'.
    WHEN 'CPUB'.
*     Bei der Public Section auch die CLSD-Teile
      p_item_tab-object = 'REPS'.
      p_item_tab-obj_name = p_item-obj_name.
      TRANSLATE p_item_tab-obj_name(30) USING ' ='.
      p_item_tab-obj_name+30(5) = 'CP'.
      APPEND p_item_tab.
      p_item_tab-obj_name+30(5) = 'CT'.
      APPEND p_item_tab.
      p_item_tab-obj_name+30(5) = 'CU'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'CPRO'.
      p_item_tab-object = 'REPS'.
      p_item_tab-obj_name = p_item-obj_name.
      TRANSLATE p_item_tab-obj_name(30) USING ' ='.
      p_item_tab-obj_name+30(5) = 'CO'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'CPRI'.
      p_item_tab-object = 'REPS'.
      p_item_tab-obj_name = p_item-obj_name.
      TRANSLATE p_item_tab-obj_name(30) USING ' ='.
      p_item_tab-obj_name+30(5) = 'CI'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN 'INTF'.
      p_item_tab-object = 'REPS'.
      p_item_tab-obj_name = p_item-obj_name.
      TRANSLATE p_item_tab-obj_name(30) USING ' ='.
      p_item_tab-obj_name+30(5) = 'IU'.
      APPEND p_item_tab.
      p_item = p_item_tab.
      p_item_tab-obj_name+30(5) = 'IP'.
      APPEND p_item_tab.
    WHEN 'METH'.
      cl_wb_activation_work_area=>convert_tr_ab_data(
        EXPORTING
          objtype    = 'METH'
          objname    = p_item-obj_name
        IMPORTING
          objname_ab = DATA(l_objname_ab)
        EXCEPTIONS
          OTHERS     = 0 ).

      p_item-obj_name = l_objname_ab.

      p_item_tab = p_item.
      p_item_tab-object = 'REPS'.
      APPEND p_item_tab.
      p_item = p_item_tab.
    WHEN OTHERS.
      p_item_tab = p_item.
      APPEND p_item_tab.
  ENDCASE.

  SORT p_item_tab BY object obj_name.
  DELETE ADJACENT DUPLICATES FROM p_item_tab COMPARING object obj_name.

ENDFORM.

FORM frame_work_items_init TABLES   p_incl
                           USING    p_object
                                    p_obj_name
                           CHANGING p_frame.

  DATA: l_prog LIKE rsnewleng-programm,
        l_area LIKE rsnewleng-area.

  IF p_object = 'FUGR'.
    l_area = p_obj_name.

    CALL FUNCTION 'FUNCTION_INCLUDE_CONCATENATE'
      CHANGING
        program       = l_prog
        complete_area = l_area
      EXCEPTIONS
        OTHERS        = 0.

    CALL FUNCTION 'RS_GET_ALL_INCLUDES'
      EXPORTING
        program             = l_prog
        with_inactive_incls = abap_true "add Function Module Includes
      TABLES
        includetab          = p_incl
      EXCEPTIONS
        OTHERS              = 0.
  ELSE.
    l_prog = p_obj_name.

    CALL FUNCTION 'RS_GET_ALL_INCLUDES'
      EXPORTING
        program    = l_prog
      TABLES
        includetab = p_incl
      EXCEPTIONS
        OTHERS     = 0.
  ENDIF.

  p_frame = l_prog.
  p_incl  = p_frame.
  APPEND p_incl.

ENDFORM.

FORM get_main_programs USING p_with_popup TYPE abap_bool.
  DATA: l_progs       LIKE rsnewleng-programm,
        l_item        TYPE sewor_working_area,
        l_main        TYPE STANDARD TABLE OF syrepid WITH HEADER LINE,
        l_index       TYPE i,
        l_dummy_tab   TYPE STANDARD TABLE OF sewor_working_area WITH HEADER LINE,
        l_msg_catcher TYPE string ##NEEDED.

* Rahmenprogramme besorgen
  REFRESH g_main_progs.
  LOOP AT cp_w_items INTO l_item.
    CLEAR g_main_progs.

***JR ev. Probleme bei den nicht ABAP-Typen??? CUAD...
    CASE l_item-object.
      WHEN 'CPRI' OR 'CPRO' OR 'CPUB' OR 'CREP' OR 'METH' OR 'INTF' OR 'CINC' OR 'CLAS'.
*       Classes/Interfaces
        g_main_progs-include = l_item-obj_name.
        l_item-obj_name      = condense( val = l_item-obj_name(30) del = '=' ).
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'WAPD' OR 'WAPA'.
*       BSP-Applikation
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'WAPP'.
*       BSP-Seite
        g_main_progs-include = l_item-obj_name+30.
        g_main_progs-master  = l_item-obj_name(30).
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'WDYN'.
*       Web Dynpro-Applikation
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'WDYD' OR 'WDYV' OR 'WDYC'.
*       Web Dynpro
        g_main_progs-include = l_item-obj_name+30.
        g_main_progs-master  = l_item-obj_name(30).
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'ENHO' OR 'ENHC' OR 'ENHS' OR 'ENSC'.
*       Enhancement Objects
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'SFBF' OR 'SFSW' OR 'SFBS' OR 'SF01'.
*       Switch Framework
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'WEBI' OR 'WEBS'.
*       Webservices
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'SFPF' OR 'SFPI'.
*       Formulare
        g_main_progs-include = l_item-obj_name.
        g_main_progs-master  = l_item-obj_name.
        g_main_progs-object  = l_item-object.
        APPEND g_main_progs.
        CONTINUE.
      WHEN 'FUGR'.
*       Function Groups
        cl_wb_activation_work_area=>convert_tr_ab_data(
          EXPORTING
            objtype    = l_item-object
            objname    = l_item-obj_name
          IMPORTING
            objname_ab = DATA(l_objname_ab)
          EXCEPTIONS
            OTHERS     = 0 ).
        g_main_progs-include = l_objname_ab.
        g_main_progs-master  = l_objname_ab.
        g_main_progs-object  = 'REPS'.
        APPEND g_main_progs.
        CONTINUE.
      WHEN OTHERS.
        PERFORM convert_object_for_abap TABLES l_dummy_tab
                                        CHANGING l_item.
    ENDCASE.

    CHECK l_item-object = 'REPS'.
    CHECK l_item-obj_name(1) <> '<' AND l_item-obj_name(1) <> '>'.

*   Type-Pools
    IF l_item-obj_name(3) = '%_C'.
      g_main_progs-include = l_item-obj_name.
      g_main_progs-master = l_item-obj_name.
      g_main_progs-object = l_item-object.
      APPEND g_main_progs.
      CONTINUE.
    ENDIF.

*   PG030801 wenn Rahmenprogramm zu REPS schon bekannt, kein Dialog
    IF l_item-object = 'REPS'
      AND l_item-main_item_object = 'PROG'
      AND l_item-main_item NE space.

      g_main_progs-include = l_item-obj_name.
      g_main_progs-master = l_item-main_item.
      g_main_progs-object = l_item-object.
      APPEND g_main_progs.
      CONTINUE.

    ELSE.
      IF ( g_context IS NOT INITIAL ).
        "is the main program given with the context?
        DATA: ls_context TYPE sadt_object_activation_context.
        "get the name of the main program:
        g_main_progs-include = l_item-obj_name.
        READ TABLE g_context INTO ls_context
          WITH KEY objtype     = l_item-object objname = l_item-obj_name
                   context_key = 'MAINPROG_NAME'. "if_seu_adt_res_inactive_co=>co_act_context_mainprog_name
        IF sy-subrc = 0 AND ls_context-context_value IS NOT INITIAL.
          g_main_progs-master  = ls_context-context_value.
          "get the type of the main program:
          CLEAR ls_context.
          READ TABLE g_context INTO ls_context
            WITH KEY objtype     = l_item-object objname = l_item-obj_name
                     context_key = 'MAINPROG_TYPE'. "if_seu_adt_res_inactive_co=>co_act_context_mainprog_type
          IF sy-subrc = 0 AND ls_context-context_value IS NOT INITIAL.
            g_main_progs-object = ls_context-context_value.
            APPEND g_main_progs.
            CONTINUE.
          ENDIF.
        ENDIF.
        CLEAR g_main_progs.
      ENDIF.

      l_progs = l_item-obj_name.

*     Rahmenprogramme per Dialog bestimmen
      CALL FUNCTION 'RS_GET_MAINPROGRAMS'
        EXPORTING
          fulltab      = abap_true
          dialog       = p_with_popup
          name         = l_progs
        IMPORTING
          tindex       = l_index
        TABLES
          mainprograms = l_main
        EXCEPTIONS
          cancelled    = 1
          OTHERS       = 2.
      IF sy-subrc = 1.
        g_cancel_flag = abap_true.
        EXIT.
      ELSE.
        IF g_ui_decoupled EQ abap_true AND lines( l_main ) GT 1.
          MESSAGE e404(eu) WITH l_item-object l_item-obj_name INTO l_msg_catcher.
          lcl_message_processor=>process_message(
            EXPORTING
              p_object   = l_item-object
              p_obj_name = l_item-obj_name ).
          g_cancel_flag = abap_true.
          EXIT.
        ENDIF.
      ENDIF.

      IF l_index <> 0.
        READ TABLE l_main INDEX l_index.
        IF sy-subrc = 0.
          g_main_progs-include = l_item-obj_name.
          g_main_progs-master = l_main.
          g_main_progs-object = l_item-object.
          APPEND g_main_progs.
        ENDIF.
      ELSE.
        LOOP AT l_main.
          g_main_progs-include = l_item-obj_name.
          g_main_progs-master = l_main.
          g_main_progs-object = l_item-object.
          APPEND g_main_progs.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDLOOP.

  SORT g_main_progs BY master object include.
  DELETE ADJACENT DUPLICATES FROM g_main_progs.

ENDFORM.

FORM prepare_tabstrip.
  DATA:
    l_progs      LIKE rsnewleng-programm,
    l_item2      TYPE sewor_working_area,
    l_area       TYPE rsnewleng-area,
    l_object     TYPE e071-obj_name,
    l_namespace  TYPE rsnewleng-namespace,
    l_active_tab LIKE g_tabstrip_info-active_tab,
    l_tablindex  TYPE dcobjbez,
    dummy_tab    TYPE STANDARD TABLE OF sewor_working_area,
    l_top_index  TYPE i.

  FIELD-SYMBOLS:
    <work_item> LIKE LINE OF work_items,
    <item>      TYPE sewor_working_area.

  cl_wb_activation_work_area=>enable_itab_buffers( ).

  LOOP AT work_items ASSIGNING <item>.
    CLEAR l_item2.

    CASE <item>-object.

      WHEN 'CPRI' OR 'CPRO' OR 'CPUB' OR 'CREP' OR 'METH' OR 'INTF' OR 'CINC'.
        <item>-main_item = <item>-obj_name(30).
        TRANSLATE <item>-main_item USING '= '.
        PERFORM get_devclass CHANGING <item>.
        CONTINUE.

      WHEN 'CUAD' OR 'DYNP'.
        <item>-main_item = <item>-obj_name.
        PERFORM get_devclass CHANGING <item>.
        CONTINUE.

      WHEN 'DTEL' OR 'VIEW' OR 'DOMA' OR 'TTYP' OR 'XINX' OR
           'SHLP' OR 'ENQU' OR 'MCOB' OR 'TABL' "OR 'SQLT'
                  OR 'STRU'.
        <item>-main_item = <item>-obj_name.
        PERFORM get_devclass CHANGING <item>.
        CONTINUE.

      WHEN 'INDX'.
        l_object = <item>-obj_name.
        CALL FUNCTION 'DD_E071_TO_DD'
          EXPORTING
            object   = 'INDX'
            obj_name = l_object
          IMPORTING
            type     = l_tablindex-type
            name     = l_tablindex-name
            id       = l_tablindex-id
          EXCEPTIONS
            OTHERS   = 1.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.
        <item>-main_item = l_tablindex-name.
        <item>-object = 'TABL'. " -> get TADIR-entry and package
        PERFORM get_devclass CHANGING <item>.

        <item>-object = 'INDX'. " set it again
        CONTINUE.

      WHEN 'REPT'.
        IF strlen( <item>-obj_name ) > 30. "Classes or Interfaces
          <item>-main_item = <item>-obj_name(30).
          TRANSLATE <item>-main_item USING '= '.
          <item>-object = 'CLSD'.
          PERFORM get_devclass CHANGING <item>.
          <item>-object = 'REPT'.
          CONTINUE.
        ELSE.
          l_item2 = <item>.
          PERFORM convert_object_for_abap TABLES dummy_tab CHANGING l_item2.
        ENDIF.

      WHEN OTHERS.
        IF ( <item>-obj_name(1) = 'L' OR <item>-obj_name+1 CS '/L' )
          AND <item>-object = 'REPS'.
*         Funktionsgruppeninclude, mit falschen REPS Eintrag
          l_progs = <item>-obj_name.
          CLEAR l_area.
          CALL FUNCTION 'FUNCTION_INCLUDE_SPLIT'
            IMPORTING
              group     = l_area
              namespace = l_namespace
            CHANGING
              include   = l_progs
            EXCEPTIONS
              OTHERS    = 11.
          IF sy-subrc = 0.
            CONCATENATE l_namespace 'SAPL' l_area INTO <item>-main_item.
          ENDIF.
          PERFORM get_devclass CHANGING <item>.
          CONTINUE.

        ELSE.
          l_item2 = <item>.
          PERFORM convert_object_for_abap TABLES dummy_tab
                                          CHANGING l_item2.
          IF ( l_item2-obj_name(1) = 'L' OR l_item2-obj_name+1 CS '/L' )
            AND l_item2-object = 'REPS'.
*        Funktionsgruppeninclude mit richtigem FUNC und nun REPS Eintrag
            l_progs = l_item2-obj_name.
            CLEAR l_area.
            CALL FUNCTION 'FUNCTION_INCLUDE_SPLIT'
              IMPORTING
                group     = l_area
                namespace = l_namespace
              CHANGING
                include   = l_progs
              EXCEPTIONS
                OTHERS    = 11.
            IF sy-subrc = 0.
              CONCATENATE l_namespace 'SAPL' l_area INTO l_item2-main_item.
            ENDIF.

            PERFORM get_devclass CHANGING l_item2.
            <item>-devclass = l_item2-devclass.
            <item>-main_item = l_item2-main_item.
            <item>-main_item_object = l_item2-main_item_object.
            CONTINUE.
          ENDIF.
        ENDIF.

    ENDCASE.

    IF l_item2-obj_name(1) = '<' OR <item>-obj_name(1) = '>'.
      <item>-main_item = l_item2-obj_name.
      PERFORM get_devclass CHANGING <item>.
      CONTINUE.
    ENDIF.

*   Type-Pools
    IF l_item2-obj_name(3) = '%_C'.
      <item>-main_item = l_item2-obj_name.
      PERFORM get_devclass CHANGING <item>.
      CONTINUE.
    ENDIF.

    <item>-main_item = l_item2-obj_name.
    PERFORM get_devclass CHANGING <item>.
    CLEAR <item>-main_item.

  ENDLOOP.

  cl_wb_activation_work_area=>disable_itab_buffers( ).

  "reset topline
  t_local-top_line     = 1.
  t_transport-top_line = 1.

  SORT work_items BY devclass main_item object obj_name.
  DELETE ADJACENT DUPLICATES FROM work_items COMPARING object obj_name.
  l_active_tab = g_tabstrip_info-active_tab.
  CLEAR g_tabstrip_info.
  g_tabstrip_info-active_tab = l_active_tab.

  LOOP AT work_items ASSIGNING <item>.
    l_top_index = sy-tabix.
    IF <item>-devclass(1) = '$'.
      IF g_tabstrip_info-local_start IS INITIAL.
        g_tabstrip_info-local_start = sy-tabix.
      ENDIF.
      g_tabstrip_info-local_lines = g_tabstrip_info-local_lines + 1.
      READ TABLE cp_w_items WITH KEY object = <item>-object obj_name = <item>-obj_name.
      IF sy-subrc = 0.
        g_tabstrip_info-active_tab = c_local.
        act_tab_strip-activetab = 'LOCAL'.
        IF t_local-top_line <= 1 AND l_top_index - g_tabstrip_info-local_start - 5 > 0.
          t_local-top_line = l_top_index - g_tabstrip_info-local_start - 4.
        ENDIF.
      ENDIF.
    ELSE.
      IF g_tabstrip_info-transport_start IS INITIAL.
        g_tabstrip_info-transport_start = sy-tabix.
      ENDIF.
      g_tabstrip_info-transport_lines = g_tabstrip_info-transport_lines + 1.
      READ TABLE cp_w_items WITH KEY object = <item>-object obj_name = <item>-obj_name.
      IF sy-subrc = 0.
        g_tabstrip_info-active_tab = c_transport.
        act_tab_strip-activetab = 'TRANSPORT'.
        IF t_transport-top_line <= 1 AND l_top_index - g_tabstrip_info-transport_start - 5 > 0.
          t_transport-top_line = l_top_index - g_tabstrip_info-transport_start - 4.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  g_tabstrip_info-transport_end = g_tabstrip_info-transport_start + g_tabstrip_info-transport_lines.
  g_tabstrip_info-local_end = g_tabstrip_info-local_start + g_tabstrip_info-local_lines.
  LOOP AT cp_w_items ASSIGNING <item>.
    READ TABLE work_items ASSIGNING <work_item> WITH KEY object = cp_w_items-object obj_name = cp_w_items-obj_name.
    CHECK sy-subrc = 0.
    <item>-devclass  = <work_item>-devclass.
    <item>-main_item = <work_item>-main_item.
    <item>-main_item_object = <work_item>-main_item_object.
  ENDLOOP.

  IF g_tabstrip_info-active_tab IS INITIAL. "default tab
*   Sonst Laufzeitfehler
    g_tabstrip_info-active_tab = c_local.
    act_tab_strip-activetab = 'LOCAL'.
  ENDIF.

ENDFORM.

FORM get_devclass CHANGING p_item TYPE sewor_working_area.
  DATA:
    l_object             TYPE tadir-object,
    l_obj_name           TYPE tadir-obj_name,
    l_prog               TYPE rsnewleng-programm,
    l_area               TYPE rsnewleng-area,
    l_namespace          TYPE rsnewleng-namespace,
    main_object_devclass LIKE LINE OF g_main_object_devclass_buffer.

  FIELD-SYMBOLS:
    <main_object_devclass> LIKE LINE OF g_main_object_devclass_buffer.

  CASE p_item-object.
    WHEN 'CPRI' OR 'CPRO' OR 'CPUB' OR 'CREP' OR 'METH'
         OR 'CINC' OR 'CLSD' OR 'CLAS' OR 'MAPP'.
      l_object = 'CLAS'.
      l_obj_name = p_item-main_item.
    WHEN 'INTF'.
      l_object = 'INTF'.
      l_obj_name = p_item-main_item.
    WHEN 'TYPD'.
      l_object = 'TYPE'.
      l_obj_name = p_item-main_item.
      SHIFT l_obj_name LEFT BY 3 PLACES.
    WHEN 'TYPE'.
      l_object = 'TYPE'.
      l_obj_name = p_item-main_item.
      SHIFT l_obj_name LEFT BY 3 PLACES.
    WHEN 'DTEL' OR 'VIEW' OR 'DOMA' OR 'TTYP' OR 'INDX' OR 'XINX' OR
           'SHLP' OR 'ENQU' OR 'MCOB' OR 'TABL' "OR 'SQLT'
                  OR 'STRU'.
      l_object = p_item-object.
      l_obj_name = p_item-main_item.
    WHEN 'WAPD' OR 'WAPP'.
      l_object = 'WAPA'.
      l_obj_name = p_item-main_item(30).
    WHEN 'WDYN'.
*     Web Dynpro Application
      l_object = 'WDYN'.
      l_obj_name = p_item-main_item(30).
    WHEN 'WDYD' OR 'WDYV' OR 'WDYC'.
*     Web Dynpro
      l_object = 'WDYN'.
      l_obj_name = p_item-main_item(30).
    WHEN 'WEBI'.
*     Webservices
      l_object = 'WEBI'.
      l_obj_name = p_item-main_item(30).
    WHEN 'WEBS'.
*     Webservices
      l_object = 'WEBS'.
      l_obj_name = p_item-main_item(30).
    WHEN 'SFPF'.
*     Formulare
      l_object = 'SFPF'.
      l_obj_name = p_item-main_item(30).
    WHEN 'SFPI'.
*     Formulare
      l_object = 'SFPI'.
      l_obj_name = p_item-main_item(30).
    WHEN 'SFBF' OR 'SFSW' OR 'SFBS' OR 'SF01'.
*     Switch Framework Objects
      l_object = p_item-object.
      l_obj_name = p_item-main_item(30).
    WHEN 'ENHO' OR 'ENHS' OR 'ENHC' OR 'ENSC'.
*     Enhancement Objects
      l_object = p_item-object.
      l_obj_name = p_item-main_item(30).
    WHEN 'CASP' OR 'CCFG' OR 'CCRU'. " check aspect, check configuration
      l_object = p_item-object.
      l_obj_name = p_item-main_item.
    WHEN 'OTGR' OR 'CHAR' OR 'AVAS' OR 'RPDF'.
*     Classification Objects
      l_object = p_item-object.
      l_obj_name = p_item-main_item(30).
    WHEN 'XSLT'.
*     XSLT programs or simple transformations
      l_object = p_item-object.
      l_obj_name = p_item-main_item(30).
    WHEN 'REPS'.
    WHEN OTHERS.
      cl_wb_manager=>get_trobj_access_tool(
        EXPORTING
          p_objtype_tr      = p_item-object
        IMPORTING
          p_accesstool_data = DATA(l_accesstool_data)
        CHANGING
          p_wb_manager      = g_wb_manager ).

      IF l_accesstool_data-is_plugin_tool IS NOT INITIAL.
        l_object   = p_item-object.
        l_obj_name = p_item-main_item.
      ENDIF.
  ENDCASE.

  IF l_object IS INITIAL.
    IF p_item-main_item(4) = 'SAPL' OR
       p_item-main_item+1 CS '/SAPL'.
      IF p_item-main_item(5) = 'SAPLX' OR
       p_item-main_item+1 CS '/SAPLX'.
        l_object = 'FUGS'.
      ELSE.
        l_object = 'FUGR'.
      ENDIF.
      l_prog = p_item-main_item.
      CALL FUNCTION 'FUNCTION_INCLUDE_CONCATENATE'
        CHANGING
          program       = l_prog
          complete_area = l_area
        EXCEPTIONS
          OTHERS        = 0.

      l_obj_name = l_area.
    ELSEIF p_item-main_item(5) = 'SAPDB'.
*     Logische Datenbank
      l_obj_name = p_item-main_item.
      SHIFT l_obj_name LEFT BY 5 PLACES.
      l_object = 'LDBA'.
    ELSEIF p_item-main_item+1 CS '/SAPDB'.
      ADD 2 TO sy-fdpos.
      l_namespace = p_item-main_item(sy-fdpos).
      l_obj_name = p_item-main_item.
      SHIFT l_obj_name LEFT BY sy-fdpos PLACES.
      SHIFT l_obj_name LEFT BY 5 PLACES.
      CONCATENATE l_namespace l_obj_name INTO l_obj_name.
      l_object = 'LDBA'.
    ELSE.
      l_object = 'PROG'.
      l_obj_name = p_item-main_item.
    ENDIF.
  ENDIF.

  IF l_obj_name IS INITIAL.
    RETURN.
  ENDIF.

  READ TABLE g_main_object_devclass_buffer ASSIGNING <main_object_devclass> WITH TABLE KEY main_object_type = l_object main_object_name = p_item-main_item.
  IF sy-subrc = 0.
    p_item-main_item_object = l_object.
    p_item-devclass         = <main_object_devclass>-devclass.
  ELSE.
    p_item-main_item_object = l_object.

    SELECT SINGLE devclass FROM tadir INTO p_item-devclass
      WHERE pgmid    = 'R3TR'
        AND object   = l_object
        AND obj_name = l_obj_name.
    IF sy-subrc <> 0.
*     Kein TADIR-Eintrag oder nicht gefunden (Fehler)
*     wird wie Temp behandelt
      p_item-devclass = '$TMP'.
    ENDIF.

    main_object_devclass-main_object_type = l_object.
    main_object_devclass-main_object_name = l_obj_name.
    main_object_devclass-devclass         = p_item-devclass.
    INSERT main_object_devclass INTO TABLE g_main_object_devclass_buffer.
  ENDIF.

ENDFORM.

FORM show_all_objects.

  DATA: l_length TYPE i.

  DATA: l_work_items TYPE STANDARD TABLE OF sewor_working_area WITH HEADER LINE .
  l_work_items[] = work_items[].

  REFRESH work_items.
  CLEAR work_items.
  LOOP AT working_area ASSIGNING FIELD-SYMBOL(<wa>) WHERE object IS NOT INITIAL.
    APPEND <wa> TO work_items.
  ENDLOOP.
  PERFORM func_includes_delete_from_set.
  PERFORM foreign_items_check.
  PERFORM meth_includes_translate.
  PERFORM wdy_objects_delete_from_set.

  IF g_activate_ddic_objects IS INITIAL.
*   activate the non-dictionary objects
*   -> delete dictionary objects:
    PERFORM ddic_types_delete USING abap_false.
  ELSE.
*   activate only the dictionary objects
*   -> delete non-dictionary objects:
    PERFORM not_ddic_types_delete USING abap_false.
  ENDIF.

  PERFORM prepare_tabstrip.
  t_transport-lines = g_tabstrip_info-transport_lines.
  t_local-lines = g_tabstrip_info-local_lines.
  DESCRIBE TABLE work_items LINES l_length.
  IF l_length = 0.
*   working area is empty
    work_items[] = l_work_items[] .   " this is to avoid a possible dump
    MESSAGE s373(eu) .
  ENDIF.

ENDFORM.

FORM transfer_ddic_limu_to_r3tr CHANGING p_object.
  CASE p_object.
    WHEN 'STRD'.
      p_object = 'STRU'.
    WHEN 'TABD'.
      p_object = 'TABL'.
    WHEN 'DTED'.
      p_object = 'DTEL'.
    WHEN 'DOMD'.
      p_object = 'DOMA'.
    WHEN 'VIED'.
      p_object = 'VIEW'.
*    WHEN 'SQLD'.
*      p_object = 'SQLT'.
    WHEN 'TTYD'.
      p_object = 'TTYP'.
    WHEN 'ENQD'.
      p_object = 'ENQU'.
    WHEN 'SHLD'.
      p_object = 'SHLP'.
    WHEN 'INDD'.
      p_object = 'INDX'.
    WHEN 'XINX'.
      p_object = 'XINX'.
    WHEN 'TYPD'.
      p_object = 'TYPE'.
  ENDCASE.
ENDFORM.

FORM user_command_0205.
  DATA:
    l_checklist TYPE REF TO cl_wb_checklist ##NEEDED,
    l_req       TYPE REF TO cl_wb_request.

  xcode = ok_code.
  CLEAR ok_code.

  CASE xcode.
    WHEN 'WEIT'.

      "check phase
      IF wb_manager IS NOT INITIAL.
        PERFORM check_objects USING space abap_true g_no_dialog l_checklist.
      ELSE.
        PERFORM check_objects USING space space g_no_dialog l_checklist.
      ENDIF.

      IF g_navigate_flag IS INITIAL.
        IF g_cancel_flag IS INITIAL. "avoid that force popup is shown again

          "activation phase
          PERFORM activate_object.

          IF g_activate_ddic_objects IS NOT INITIAL.
            "generation might make sense for dictionary-like plugin-objects:
            PERFORM generate_access_d_objects USING cp_w_items[] .
            LEAVE TO SCREEN 0.
          ENDIF.

          IF g_cancel_flag IS INITIAL.
            "Fehler beim Sperren oder Korrektureintrag
            PERFORM generate_object.
          ENDIF.

        ENDIF.

        "force popup return code handling
        IF   g_cancel_flag IS INITIAL
          OR g_cancel_flag = co_cancel_state-leave_popup
          OR g_cancel_flag = co_cancel_state-generation_failed.
          LEAVE TO SCREEN 0.
        ELSE. "avoid that force popup is shown again
          CLEAR g_cancel_flag.
        ENDIF.

      ELSE.
        "Es wurde nach Syntaxfehler navigiert, aktivieren verlassen.
        LEAVE TO SCREEN 0.
      ENDIF.
    WHEN 'CHEC'.
      IF NOT wb_manager IS INITIAL.
        PERFORM check_objects USING 'X' 'X' space l_checklist .
      ELSE.
        PERFORM check_objects USING 'X' space space l_checklist .
      ENDIF.
      PERFORM dequeue_objects.
      IF g_cancel_flag = '1'.
        LEAVE TO SCREEN 0.
      ENDIF.
    WHEN 'MALL'.
      PERFORM mark_all_objects.
    WHEN 'DMAR'.
      PERFORM demark_all_objects.
    WHEN 'OVER'.
      IF NOT wb_manager IS INITIAL.
        CREATE OBJECT l_req
          EXPORTING
            p_object_type = 'WIA'
            p_object_name = space
            p_operation   = swbm_c_op_show_object_list.
        CALL METHOD wb_manager->request_tool_access
          EXPORTING
            p_wb_request = l_req
          EXCEPTIONS
            OTHERS       = 0.
      ELSE.
        CALL FUNCTION 'RS_INACTIVE_OBJECTS_LIST'.
      ENDIF.
      g_cancel_flag = '1'.
*     Ohne Message das Popup verlassen
      LEAVE TO SCREEN 0.
    WHEN 'ALL'.
      PERFORM show_all_objects.
    WHEN 'TRANSPORT'.
      g_tabstrip_info-active_tab = '0201'.
      act_tab_strip-activetab = xcode.
    WHEN 'LOCAL'.
      g_tabstrip_info-active_tab = '0202'.
      act_tab_strip-activetab = xcode.
    WHEN 'SORT_UP'.
      IF act_tab_strip-activetab = 'LOCAL'.
        READ TABLE t_local-cols REFERENCE INTO DATA(col) WITH KEY selected = abap_true.
      ELSE.
        READ TABLE t_transport-cols REFERENCE INTO col WITH KEY selected = abap_true.
      ENDIF.
      IF sy-subrc = 0.
        CASE col->screen-name.
          WHEN 'G_ICON_DELETE'.
            SORT work_items STABLE BY delet_flag ASCENDING.
          WHEN OTHERS.
            SORT work_items STABLE BY (col->screen-name+11) ASCENDING.
        ENDCASE.
        col->selected = abap_false.
      ENDIF.
    WHEN 'SORT_DOWN'.
      IF act_tab_strip-activetab = 'LOCAL'.
        READ TABLE t_local-cols REFERENCE INTO col WITH KEY selected = abap_true.
      ELSE.
        READ TABLE t_transport-cols REFERENCE INTO col WITH KEY selected = abap_true.
      ENDIF.
      IF sy-subrc = 0.
        CASE col->screen-name.
          WHEN 'G_ICON_DELETE'.
            SORT work_items STABLE BY delet_flag DESCENDING.
          WHEN OTHERS.
            SORT work_items STABLE BY (col->screen-name+11) DESCENDING.
        ENDCASE.
        col->selected = abap_false.
      ENDIF.
  ENDCASE.

ENDFORM.

FORM call_popup.

  SORT work_items BY object obj_name.

  "the 'enhancement' include must not be shown at the popup:
  DELETE work_items WHERE object = 'REPS' AND obj_name+30(1) = srext_ext_enhancement.  " rd (12/22/2004)

  IF work_items[] IS NOT INITIAL.

    PERFORM prepare_tabstrip.
    t_transport-lines = g_tabstrip_info-transport_lines.
    t_local-lines     = g_tabstrip_info-local_lines.

    "only one inactive object -> don't display the popup
    IF ( t_transport-lines = 1 AND act_tab_strip-activetab = 'TRANSPORT' ) OR
       ( t_local-lines = 1     AND act_tab_strip-activetab = 'LOCAL' ).
      ok_code = 'WEIT'.
      g_suppress_dialog = abap_true. "skip the dynpro but process all the modules
    ENDIF.

    CALL SCREEN 205 STARTING AT 5 1.

  ENDIF.

  CLEAR: g_suppress_dialog, g_suppress_popup, g_no_dialog.

ENDFORM.

FORM check_object_exists_and_log.

  DATA:
    l_wb_registry TYPE REF TO cl_wb_registry,
    l_tr_request  TYPE REF TO cl_wb_request,
    l_wb_request  TYPE REF TO cl_wb_request,
    l_wb_object   TYPE REF TO cl_wb_object,
    l_exists      TYPE c LENGTH 1,
    l_msg_catcher TYPE string ##NEEDED.

  cl_wb_registry=>get_instance( IMPORTING p_instance = l_wb_registry ).

  IF cp_w_items-object IS NOT INITIAL
    AND cp_w_items-objtype_wb IS INITIAL.
    "Translate Transport object type to WB object type
    cl_wb_object=>create_from_transport_key( EXPORTING  p_object    = cp_w_items-object
                                                        p_obj_name  = cp_w_items-obj_name
                                             RECEIVING  p_wb_object = l_wb_object
                                             EXCEPTIONS OTHERS      = 1 ).
    IF sy-subrc = 0 AND l_wb_object IS BOUND.
      cl_wb_request=>create_from_object_ref( EXPORTING  p_wb_object  = l_wb_object
                                             RECEIVING  p_wb_request = l_tr_request
                                             EXCEPTIONS OTHERS       = 1 ).
    ENDIF.
    IF sy-subrc = 0 AND l_tr_request IS BOUND.
      l_wb_registry->if_wb_tool_resolution~get_tool_for_request( EXPORTING  p_request           = l_tr_request
                                                                 IMPORTING  p_execution_request = l_wb_request
                                                                 EXCEPTIONS OTHERS              = 1 ).
      IF sy-subrc = 0 AND l_wb_request IS BOUND.
        cp_w_items-objtype_wb = l_wb_request->object_type.
        cp_w_items-objname_wb = l_wb_request->object_name.
      ENDIF.
    ENDIF.
  ENDIF.

  IF cp_w_items-objtype_wb IS NOT INITIAL.
    IF cp_w_items-objname_wb IS INITIAL.
      cp_w_items-objname_wb = cp_w_items-obj_name.
    ENDIF.
    CALL FUNCTION 'WB_CHECK_OBJECT_EXISTENCE'
      EXPORTING
        p_objtype     = cp_w_items-objtype_wb
        p_objname     = cp_w_items-objname_wb
      IMPORTING
        object_exists = l_exists.
  ENDIF.

  IF l_exists = abap_false.
    MESSAGE e898(eu) WITH cp_w_items-object cp_w_items-obj_name INTO l_msg_catcher.
    cl_wb_activation_protocol=>fill_checklist_from_message(
      p_object                 = cp_w_items-object
      p_obj_name               = cp_w_items-obj_name
      p_checklist              = g_checklist
      p_activation_environment = g_activation_environment ).
    g_cancel_flag = abap_true.
  ENDIF.

ENDFORM.

FORM increase_dwwasync_and_upd USING p_uname TYPE sy-uname.

* Damit die anderen Modi auch mitbekommen, daß sich was getan hat,
* muß der Arbeitsbereich invalidiert werden.
* Da vorher gelesen wurde kann jetzt der Puffer geändert werden.

  dwwasync-syncindex += 1.
  dwwasync-uname      = p_uname.
  TRY.
      "change and immediately commit DWWASYNC data in a service connection to the database (to avoid deadlocks):
      MODIFY dwwasync CONNECTION r/3*w_area.              "#EC CI_SUBRC
      COMMIT CONNECTION r/3*w_area.
    CATCH cx_sy_open_sql_db INTO DATA(exc).
      "Parallel processing (i.e. AUnit) may can result in deadlocks
      " -> in that case, the workarea sync idx can not be persisted but
      "    this only has a performance impact
      IF sy-batch = abap_true.
        MESSAGE exc TYPE 'S'.
      ENDIF.
  ENDTRY.

ENDFORM.

FORM increase_dwwasync_and_upd_own.

  PERFORM increase_dwwasync_and_upd USING sy-uname.

ENDFORM.

FORM increase_dwwasync_upd_other TABLES p_users STRUCTURE dwinactiv.

  DATA l_last_uname TYPE syuname.

  SORT p_users BY uname.
  LOOP AT p_users INTO DATA(l_uname).
    IF l_last_uname <> l_uname-uname.
      l_last_uname = l_uname-uname.
      UPDATE dwwasync SET syncindex = syncindex + 1 WHERE uname = l_uname-uname.
      IF sy-subrc <> 0.
        INSERT dwwasync FROM @( VALUE #( uname = l_uname-uname syncindex = 1 ) ).
      ENDIF.
    ENDIF.
  ENDLOOP.

ENDFORM.