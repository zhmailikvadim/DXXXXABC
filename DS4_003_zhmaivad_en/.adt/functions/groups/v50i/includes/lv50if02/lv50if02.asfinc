*----------------------------------------------------------------------*
*   INCLUDE LV50IF02                                                   *
*----------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  OBDLV_INTERFACE_FILL
*&---------------------------------------------------------------------*
*       Fills the interface data for the function module
*       GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
*   <-- CT_KOMDLGN              Interface table for GN_DELIVERY_CREATE
*   <-- CT_LIPSRF               Reference data order GN_DELIVERY_CREATE
*   <-- CT_PARTNER              Partner table for GN_DELIVERY_CREATE
*   <-- CT_TEXTH                Text header table for GN_DELIVERY_CREATE
*   <-- CT_VERKO                Handling unit header GN_DELIVERY_CREATE
*   <-- CT_VERPO                Handling unit item GN_DELIVERY_CREATE
*   --> IT_HEADER_PARTNER       Partner data
*   --> IT_HEADER_PARTNER_ADDR  Partner manual addresses
*   --> IT_HEADER_DEADLINES     Deadlines
*   --> IT_ITEM_DATA            Item data
*   --> IT_ITEM_ORG             Item organization data
*   --> IT_ITEM_STOCK_TRANS     Item stock transfer data
*   --> IT_ITEM_CODING_BLOCK    Item data coding block
*   --> IT_ITEM_REFERENCE_ORDER Item data reference document oder
*   --> IT_HANDLING_UNIT_HEADER Handling unit header data
*   --> IT_HANDLING_UNIT_ITEM   Handling unit item data
*   --> IS_HEADER_DATA          Header data
*   --> IT_TEXT_HEADER          Text header
*   --> IT_TEXT_LINES           Text lines
*   <-- CT_RETURN               Return parameters
*   --> IS_HEADER_ORG           Header data for organizations
*----------------------------------------------------------------------*
FORM obdlv_interface_fill
     TABLES ct_komdlgn                    STRUCTURE komdlgn
            ct_lipsrf                     STRUCTURE lipsrf_gn
            ct_lipspo                     STRUCTURE lipspo_gn
            ct_partner                    STRUCTURE partner_gn
            ct_texth                      STRUCTURE texth_gn
            ct_textl                      STRUCTURE textl_gn
            ct_verko                      STRUCTURE verko
            ct_verpo                      STRUCTURE verpo
            it_header_partner             STRUCTURE bapidlvpartner
            it_header_partner_addr        STRUCTURE bapiaddr1
            it_header_deadlines           STRUCTURE bapidlvdeadln
            it_item_data                  STRUCTURE bapiobdlvitem
            it_item_org                   STRUCTURE bapiobdlvitemorg
            it_item_stock_trans           STRUCTURE bapidlvitemsttr
            it_item_coding_block          STRUCTURE bapidlvcoblitem
            it_item_reference_order       STRUCTURE bapiobdlvitemrfo
            it_item_ref_purchase_order    STRUCTURE bapidlvitemrpo
            it_item_serial_no             STRUCTURE bapidlvitmserno
            it_handling_unit_header       STRUCTURE bapidlvhdunhdr
            it_handling_unit_header_cross STRUCTURE bapidlvhdunhdr
            it_handling_unit_item         STRUCTURE bapidlvhdunitm
            it_handling_unit_serno        STRUCTURE bapidlvhdunserno
            it_text_header                STRUCTURE bapidlvtxthdr
            it_text_lines                 STRUCTURE bapidlvtxtitem
            ct_return                     STRUCTURE bapiret2
      USING is_header_data                STRUCTURE bapiobdlvhdr
            is_header_org                 STRUCTURE bapiobdlvhdrorg
            ct_sernr                      TYPE      v50s_sern_t
            ct_husernr                    TYPE      vsep_t_husernr
            if_sender_system              LIKE      tbdls-logsys.

  DATA: lf_spe_le_scenario TYPE /spe/le_scenario.           "n_1014402

  LOOP AT it_item_data.
    CLEAR ct_komdlgn.
    ct_komdlgn-verursys = if_sender_system.
    PERFORM fill_komdlgn_obdlv_header_data USING    is_header_data
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_obdlv_header_org  USING    is_header_org
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_obdlv_item_data   TABLES   ct_return
                                                  it_item_data "n_616091
                                           USING    it_item_data
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_obdlv_item_kmpmg  TABLES   it_item_data
                                                    ct_return
                                           USING    it_item_data
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_obdlv_item_org    TABLES   it_item_org
                                           USING    it_item_data
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_stock_transfer
                               TABLES   it_item_stock_trans
                               USING    it_item_data-deliv_numb
                                        it_item_data-itm_number
                               CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_coding_block
                               TABLES   it_item_coding_block
                               USING    it_item_data-deliv_numb
                                        it_item_data-itm_number
                               CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_obdlv_itemrf_data
                               TABLES   it_item_reference_order
                               USING    it_item_data-deliv_numb
                                        it_item_data-itm_number
                               CHANGING ct_komdlgn
                                        ct_return[].
    PERFORM fill_komdlgn_ibdlv_itemrp_data
                               TABLES   it_item_ref_purchase_order
                               USING    it_item_data-deliv_numb
                                        it_item_data-itm_number
                               CHANGING ct_komdlgn
                                        ct_return[].
    PERFORM fill_komdlgn_dlv_partner_data  TABLES   it_header_partner
                                                    it_item_reference_order "n_1392531
                                           CHANGING ct_komdlgn.
    PERFORM fill_komdlgn_dlv_deadlines
            TABLES   it_header_deadlines
            USING    is_header_data-deliv_numb
            CHANGING ct_komdlgn.
    PERFORM convert_delivery_type USING    ct_komdlgn-verursys
                                  CHANGING ct_komdlgn-lfart.
* no ATP check in decentral system
    ct_komdlgn-noatp = 'X'.
    APPEND ct_komdlgn.
  ENDLOOP.
  SORT ct_komdlgn BY rfbel rfpos.
  PERFORM fill_partner_table TABLES ct_partner
                                    it_header_partner
                                    it_header_partner_addr
                             USING  lf_spe_le_scenario.     "n_101442

* fill reference data sales order
  PERFORM fill_reference_order TABLES ct_lipsrf
                                      ct_komdlgn
                                      it_item_reference_order.
* fill reference data purchase order
  PERFORM fill_ref_purchase_order TABLES ct_lipspo
                                         ct_komdlgn
                                         it_item_ref_purchase_order.
  PERFORM fill_item_serial_no TABLES   it_item_serial_no
                              CHANGING ct_sernr.
  PERFORM fill_text TABLES ct_texth
                           ct_textl
                           it_text_header
                           it_text_lines.
  PERFORM fill_handling_unit TABLES ct_verko
                                    ct_verpo
                                    ct_husernr
                                    it_handling_unit_header
                                    it_handling_unit_header_cross
                                    gt_hu_ident_dummy
                                    gt_hu_item_spl_dummy
                                    it_handling_unit_item
                                    it_handling_unit_serno.

ENDFORM.                    " OBDLV_INTERFACE_FILL
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_ITEM_DATA
*&---------------------------------------------------------------------*
*       Fills the interface structure KOMDLGN from the item data
*----------------------------------------------------------------------*
*      --> IT_ITEM_DATA Item data
*      <-- CS_KOMDLGN   Interface structure for GN_DELIVERY_CREATE
*      <-- CT_RETURN    Return parameters
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_item_data
     TABLES   ct_return    STRUCTURE bapiret2
              it_item_data STRUCTURE bapiobdlvitem          "n_616091
     USING    is_item_data STRUCTURE bapiobdlvitem
     CHANGING cs_komdlgn   STRUCTURE komdlgn.

  FIELD-SYMBOLS:  <ls_item_data>  TYPE bapiobdlvitem.       "n_616091

  CALL FUNCTION 'MAP2I_BAPIOBDLVITEM_TO_KOMDLGN'
    EXPORTING
      bapiobdlvitem             = is_item_data
    CHANGING
      komdlgn                   = cs_komdlgn
    EXCEPTIONS
      error_converting_iso_code = 1
      OTHERS                    = 2.
* lines replaced                                        v_n_638493
  CASE is_item_data-usehieritm.
    WHEN gc_hievw-btchsubitm.
      cs_komdlgn-uecha = is_item_data-hieraritem.
*   Read suitable main item
      READ TABLE it_item_data ASSIGNING <ls_item_data>
                      WITH KEY deliv_numb = is_item_data-deliv_numb
                               itm_number = is_item_data-hieraritem
                      BINARY SEARCH.
      IF sy-subrc IS INITIAL.
        cs_komdlgn-uepos = <ls_item_data>-hieraritem.
      ENDIF.
    WHEN gc_hievw-bomsubitem.
      cs_komdlgn-uepos = is_item_data-hieraritem.
    WHEN gc_hievw-prodselitm.
      cs_komdlgn-uepos = is_item_data-hieraritem.
      cs_komdlgn-uepvw = 'A'.
    WHEN OTHERS.
  ENDCASE.                                                  "^_n_638493

  CASE is_item_data-btchevaltyp.
    WHEN gc_xchbw-batch.
      cs_komdlgn-xchar = gc_true.
      cs_komdlgn-xchpf = gc_true.
    WHEN gc_xchbw-evatype.
      cs_komdlgn-xchar = gc_true.
      cs_komdlgn-xchpf = gc_false.
    WHEN OTHERS.
      cs_komdlgn-xchar = gc_false.
      cs_komdlgn-xchpf = gc_false.
  ENDCASE.
* Check the quantities
  PERFORM quantity_check TABLES ct_return
                         USING  cs_komdlgn-lfimg
                                cs_komdlgn-lgmng
                                cs_komdlgn-lfimg_flo
                                cs_komdlgn-lgmng_flo
                                cs_komdlgn-umvkz
                                cs_komdlgn-umvkn
                                cs_komdlgn-umrev
                                cs_komdlgn-rfbel
                                cs_komdlgn-rfpos.

ENDFORM.                    " FILL_KOMDLGN_OBDLV_ITEM_DATA
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_HEADER_DATA
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --> IS_HEADER_DATA  Header data
*      <-- CS_KOMDLGN      Interface structure for GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_header_data USING is_header_data
                                 CHANGING cs_komdlgn.

  CALL FUNCTION 'MAP2I_BAPIOBDLVHDR_TO_KOMDLGN'
    EXPORTING
      bapiobdlvhdr = is_header_data
    CHANGING
      komdlgn      = cs_komdlgn.

  ASSIGN COMPONENT 'INCOTERMS2'  OF STRUCTURE  is_header_data TO FIELD-SYMBOL(<fs_hdr_inco2>).
  ASSIGN COMPONENT 'INCOTERMS2L' OF STRUCTURE  is_header_data TO FIELD-SYMBOL(<fs_hdr_inco2l>).

  " Incoterms 2010
  IF  <fs_hdr_inco2>  IS ASSIGNED AND <fs_hdr_inco2>  IS NOT INITIAL AND
      <fs_hdr_inco2l> IS ASSIGNED AND <fs_hdr_inco2l> IS INITIAL.
    PERFORM assign_struc_inco2_to_inco2l CHANGING cs_komdlgn.
  ENDIF.

  IF  <fs_hdr_inco2l> IS ASSIGNED AND <fs_hdr_inco2l> IS NOT INITIAL AND
      <fs_hdr_inco2>  IS ASSIGNED AND <fs_hdr_inco2>  IS INITIAL.

    PERFORM assign_struc_inco2l_to_inco2 CHANGING cs_komdlgn.

  ENDIF.

ENDFORM.                    " FILL_KOMDLGN_OBDLV_HEADER_DATA
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_HEADER_ORG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --> IS_HEADER_ORG  Header organization data
*      <-- CS_KOMDLGN     Interface structure for GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_header_org USING is_header_org
                                CHANGING cs_komdlgn.

  CALL FUNCTION 'MAP2I_BAPIOBDLVHDRORG_TO_KOMDL'
    EXPORTING
      bapiobdlvhdrorg = is_header_org
    CHANGING
      komdlgn         = cs_komdlgn.

ENDFORM.                    " FILL_KOMDLGN_OBDLV_HEADER_ORG
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_ITEM_ORG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --> IT_ITEM_ORG  Item organization data
*      --> IS_ITEM_DATA Item organization data
*      <-- CS_KOMDLGN   Interface structure for GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_item_org
     TABLES   it_item_org  STRUCTURE bapiobdlvitemorg
     USING    is_item_data STRUCTURE bapiobdlvitem
     CHANGING cs_komdlgn   STRUCTURE komdlgn.

  READ TABLE it_item_org WITH KEY
             deliv_numb = is_item_data-deliv_numb
             itm_number = is_item_data-itm_number.
  CHECK sy-subrc = 0.
  CALL FUNCTION 'MAP2I_BAPIOBDLVITEMORG_TO_KOMD'
    EXPORTING
      bapiobdlvitemorg = it_item_org
    CHANGING
      komdlgn          = cs_komdlgn.

ENDFORM.                    " FILL_KOMDLGN_OBDLV_ITEM_ORG
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_CODING_BLOCK
*&---------------------------------------------------------------------*
*       Fills the coding block data into the structure KOMDLGN
*----------------------------------------------------------------------*
*      --> IT_ITEM_COBL  Item coding block
*      --> IF_DELIV_NUMB Delivery number
*      --> IF_ITM_NUMBER Item number
*      <-- CS_KOMDLGN    Interface structure for GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
FORM fill_komdlgn_coding_block
     TABLES   it_item_cobl  STRUCTURE bapidlvcoblitem
     USING    if_deliv_numb LIKE      bapiobdlvitem-deliv_numb
              if_itm_number LIKE      bapiobdlvitem-itm_number
     CHANGING cs_komdlgn    STRUCTURE komdlgn.

  READ TABLE it_item_cobl WITH KEY
             deliv_numb = if_deliv_numb
             itm_number = if_itm_number.
  CHECK sy-subrc = 0.
  CALL FUNCTION 'MAP2I_BAPIDLVCOBLITEM_TO_KOMDL'
    EXPORTING
      bapidlvcoblitem = it_item_cobl
    CHANGING
      komdlgn         = cs_komdlgn.
*----- Convert Long FM Fields and Grant-------------------------------*
  MOVE: it_item_cobl-grant_nbr TO cs_komdlgn-grant_nbr.
  MOVE: it_item_cobl-func_area_long TO cs_komdlgn-fkber.
  CALL FUNCTION 'CMMT_ITEM_CONVERSION_INBOUND'
    EXPORTING
      i_cmmt_item      = it_item_cobl-cmmt_item
      i_cmmt_item_long = it_item_cobl-cmmt_item_long
    IMPORTING
      e_cmmt_item      = cs_komdlgn-fipos
    EXCEPTIONS
      not_found        = 1
      OTHERS           = 2.
  IF sy-subrc <> 0.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = sy-msgty
        cl     = sy-msgid
        number = sy-msgno
        par1   = sy-msgv1
        par2   = sy-msgv2
        par3   = sy-msgv3
        par4   = sy-msgv4
      IMPORTING
        return = return.
  ENDIF.

ENDFORM.                    " FILL_KOMDLGN_CODING_BLOCK
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_STOCK_TRANSFER
*&---------------------------------------------------------------------*
*       Fills the stock transfer data into the structure KOMDLGN
*----------------------------------------------------------------------*
*     --> IT_ITEM_STOCK_TRANS Item stock transfer data
*     --> IF_DELIV_NUMB       Delivery number
*     --> IF_ITM_NUMBER       Item number
*     <-- CS_KOMDLGN          Interface structure for GN_DELIVERY_CREATE
*----------------------------------------------------------------------*
FORM fill_komdlgn_stock_transfer
     TABLES   it_item_stock_trans STRUCTURE bapidlvitemsttr
     USING    if_deliv_numb       LIKE      bapiobdlvitem-deliv_numb
              if_itm_number       LIKE      bapiobdlvitem-itm_number
     CHANGING cs_komdlgn          STRUCTURE komdlgn.

  READ TABLE it_item_stock_trans WITH KEY
             deliv_numb = if_deliv_numb
             itm_number = if_itm_number.
  CHECK sy-subrc = 0.
  CALL FUNCTION 'MAP2I_BAPIDLVITEMSTTRTOKOMDLGN'
    EXPORTING
      bapidlvitemsttr = it_item_stock_trans
    CHANGING
      komdlgn         = cs_komdlgn.

ENDFORM.                    " FILL_KOMDLGN_STOCK_TRANSFER

*&---------------------------------------------------------------------*
*&      Form  PARTNER_ADDRESS_CHG_FILL
*&---------------------------------------------------------------------*
*       Fills the address data in partner interface change structure
*----------------------------------------------------------------------*
*      --> IT_HEADER_PARTNER_ADDR         Partner addresses
*      <-- CS_PARTNER_UPDATE              Partner interface
*----------------------------------------------------------------------*
FORM partner_address_chg_fill
     TABLES   it_header_partner_addr STRUCTURE bapidlvpartnaddrchg
     USING    if_address_no          LIKE      bapidlvpartner-address_no
     CHANGING cs_partner             STRUCTURE shp_partner_update.
  DATA lf_msg.                                              "#EC NEEDED

  CHECK NOT if_address_no IS INITIAL.
  READ TABLE it_header_partner_addr
       WITH KEY addr_no = if_address_no BINARY SEARCH.
  CHECK sy-subrc = 0.
  cs_partner-adrnr = it_header_partner_addr-addr_no.
  cs_partner-anred = it_header_partner_addr-formofaddr.
  cs_partner-name1 = it_header_partner_addr-name.
  cs_partner-name2 = it_header_partner_addr-name_2.
  cs_partner-name3 = it_header_partner_addr-name_3.
  cs_partner-name4 = it_header_partner_addr-name_4.
  cs_partner-ort01 = it_header_partner_addr-city.
  cs_partner-ort02 = it_header_partner_addr-district.
  cs_partner-pstlz = it_header_partner_addr-postl_cod1.
  cs_partner-pstl2 = it_header_partner_addr-postl_cod2.
  cs_partner-pfach = it_header_partner_addr-po_box.
  cs_partner-pfort = it_header_partner_addr-po_box_cit.
  cs_partner-stras = it_header_partner_addr-street.
  cs_partner-hausn = it_header_partner_addr-house_no.
  cs_partner-regio = it_header_partner_addr-region.
  cs_partner-telf1 = it_header_partner_addr-tel1_numbr.
  cs_partner-telfx = it_header_partner_addr-fax_number.
  cs_partner-lzone = it_header_partner_addr-transpzone.
  cs_partner-txjcd = it_header_partner_addr-taxjurcode.

  IF NOT it_header_partner_addr-langu_iso IS INITIAL.
    CALL FUNCTION 'LANGUAGE_CODE_ISO_TO_SAP'
      EXPORTING
        iso_code  = it_header_partner_addr-langu_iso
      IMPORTING
        sap_code  = cs_partner-spras
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      MESSAGE a549(b1) WITH it_header_partner_addr-langu_iso
                            'LANGU_ISO'
                       INTO lf_msg.
      lcl_message=>add( if_param = 'HEADER_PARTNER_ADDR'
                        if_field = 'LANGU_ISO' ).
    ENDIF.
  ELSE.
    CLEAR cs_partner-spras.
  ENDIF.
  IF NOT it_header_partner_addr-country IS INITIAL.
    MOVE it_header_partner_addr-country TO cs_partner-land1.
  ELSEIF it_header_partner_addr-countryiso IS INITIAL.
    CLEAR cs_partner-land1.
  ELSE.
    CALL FUNCTION 'COUNTRY_CODE_ISO_TO_SAP'
      EXPORTING
        iso_code  = it_header_partner_addr-countryiso
      IMPORTING
        sap_code  = cs_partner-land1
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      MESSAGE a549(b1) WITH it_header_partner_addr-countryiso
                            'COUNTRYISO'
                       INTO lf_msg.
      lcl_message=>add( if_param = 'HEADER_PARTNER_ADDR'
                        if_field = 'COUNTRYISO' ).
    ENDIF.
  ENDIF.

  cs_partner-updkz_adr = it_header_partner_addr-upd_mode_adr.

  MOVE-CORRESPONDING it_header_partner_addr TO gt_bapiaddr1. "n_1031533
  APPEND gt_bapiaddr1.                                      "n_1031533

ENDFORM.                    " PARTNER_ADDRESS_CHG_FILL
*&---------------------------------------------------------------------*
*&      Form  PARTNER_ADDRESS_FILL
*&---------------------------------------------------------------------*
*       Fills the address data in partner interface structure
*----------------------------------------------------------------------*
*      --> IT_HEADER_PARTNER_ADDR  Partner addresses
*      <-- CS_PARTNER              Partner interface
*----------------------------------------------------------------------*
FORM partner_address_fill
     TABLES   it_header_partner_addr STRUCTURE bapiaddr1
     USING    if_address_no          LIKE      bapidlvpartner-address_no
     CHANGING ct_partner             STRUCTURE partner_gn.

  CHECK NOT if_address_no IS INITIAL.
  READ TABLE it_header_partner_addr
       WITH KEY addr_no = if_address_no BINARY SEARCH.
  CHECK sy-subrc = 0.
  ct_partner-adrnr = it_header_partner_addr-addr_no.
  ct_partner-anred = it_header_partner_addr-formofaddr.
  ct_partner-name1 = it_header_partner_addr-name.
  ct_partner-name2 = it_header_partner_addr-name_2.
  ct_partner-name3 = it_header_partner_addr-name_3.
  ct_partner-name4 = it_header_partner_addr-name_4.
  ct_partner-ort01 = it_header_partner_addr-city.
  ct_partner-ort02 = it_header_partner_addr-district.
  ct_partner-pstlz = it_header_partner_addr-postl_cod1.
  ct_partner-pstl2 = it_header_partner_addr-postl_cod2.
  ct_partner-pfach = it_header_partner_addr-po_box.
  ct_partner-pfort = it_header_partner_addr-po_box_cit.
  ct_partner-stras = it_header_partner_addr-street_lng.     "n_738884
  ct_partner-house_num1 = it_header_partner_addr-house_no.  "n_738884
  ct_partner-regio = it_header_partner_addr-region.
  ct_partner-telf1 = it_header_partner_addr-tel1_numbr.
  ct_partner-telfx = it_header_partner_addr-fax_number.
  ct_partner-lzone = it_header_partner_addr-transpzone.
  ct_partner-txjcd = it_header_partner_addr-taxjurcode.
  ct_partner-email = it_header_partner_addr-e_mail.         "n_668818
  ct_partner-strs2 = it_header_partner_addr-str_suppl1.     "n_819304
  ct_partner-c_o_name = it_header_partner_addr-c_o_name.    "n_900539
* More street details                                       v_n_1005942
  ct_partner-house_num2 = it_header_partner_addr-house_no2.
  ct_partner-str_suppl2 = it_header_partner_addr-str_suppl2.
  ct_partner-str_suppl3 = it_header_partner_addr-str_suppl3.
  ct_partner-location   = it_header_partner_addr-location.
  ct_partner-building   = it_header_partner_addr-build_long.
  ct_partner-floor      = it_header_partner_addr-floor.
  ct_partner-roomnumber = it_header_partner_addr-room_no.  "^_n_1005942

  IF NOT it_header_partner_addr-langu_iso IS INITIAL.
    CALL FUNCTION 'LANGUAGE_CODE_ISO_TO_SAP'
      EXPORTING
        iso_code  = it_header_partner_addr-langu_iso
      IMPORTING
        sap_code  = ct_partner-spras
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      MESSAGE a549(b1) WITH it_header_partner_addr-langu_iso
                            'LANGU_ISO'.
    ENDIF.
  ELSE.
    CLEAR ct_partner-spras.
  ENDIF.
  IF NOT it_header_partner_addr-country IS INITIAL.
    MOVE it_header_partner_addr-country TO ct_partner-land1.
  ELSEIF it_header_partner_addr-countryiso IS INITIAL.
    CLEAR ct_partner-land1.
  ELSE.
    CALL FUNCTION 'COUNTRY_CODE_ISO_TO_SAP'
      EXPORTING
        iso_code  = it_header_partner_addr-countryiso
      IMPORTING
        sap_code  = ct_partner-land1
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      MESSAGE a549(b1) WITH it_header_partner_addr-countryiso
                            'COUNTRYISO'.
    ENDIF.
  ENDIF.

* title (30 characters)                                       v_n_900551
  IF NOT it_header_partner_addr-title IS INITIAL.
    SELECT SINGLE title FROM tsad3t INTO ct_partner-title
      WHERE title_medi = it_header_partner_addr-title.
  ENDIF.                                                    "^_n_900551

ENDFORM.                    " PARTNER_ADDRESS_FILL
*&---------------------------------------------------------------------*
*&      Form  FILL_REFERENCE_ORDER
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --> CT_LIPSRF               Reference data structure GN_DELIVERY
*      <-- CS_KOMDLGN              Interface table for GN_DELIVERY_CREAT
*      --> IT_ITEM_REFERENCE_ORDER BAPI reference data order
*----------------------------------------------------------------------*
FORM fill_reference_order
     TABLES ct_lipsrf               STRUCTURE lipsrf_gn
            ct_komdlgn              STRUCTURE komdlgn
            it_item_reference_order STRUCTURE bapiobdlvitemrfo.

  LOOP AT it_item_reference_order.
    CALL FUNCTION 'MAP2I_BAPIOBDLVITEMRFO_TO_LIPS'
      EXPORTING
        bapiobdlvitemrfo = it_item_reference_order
      CHANGING
        lipsrf_gn        = ct_lipsrf.
    APPEND ct_lipsrf.
    READ TABLE ct_komdlgn TRANSPORTING NO FIELDS
         WITH KEY rfbel = it_item_reference_order-deliv_numb
                  rfpos = it_item_reference_order-itm_number.
    CHECK sy-subrc = 0.
*   CT_KOMDLGN-AESKD = IT_ITEM_REFERENCE_ORDER-CUSTCHNGSTATUS.
*   MODIFY CT_KOMDLGN TRANSPORTING AESKD.
  ENDLOOP.

ENDFORM.                    " FILL_REFERENCE_ORDER
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_ITEMRF_DATA
*&---------------------------------------------------------------------*
*       Fill delivery item reference order data
*----------------------------------------------------------------------*
*      -->IT_ITEM_REFERENCE_ORDER  reference data purchase order
*      -->IF_ITEM_DATA-DELIV_NUMB  Delivery number
*      -->IF_ITEM_DATA-ITM_NUMBER  Delivery item
*      <--CS_KOMDLGN               communication workarea
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_itemrf_data
     TABLES   it_item_reference_order STRUCTURE bapiobdlvitemrfo
     USING    if_item_data-deliv_numb
              if_item_data-itm_number
     CHANGING cs_komdlgn
              ct_return TYPE bapiret2_t.

  READ TABLE it_item_reference_order
       WITH KEY deliv_numb = if_item_data-deliv_numb
                itm_number = if_item_data-itm_number.
  CHECK sy-subrc = 0.
  CALL FUNCTION 'MAP2I_BAPIOBDLVITEMRFO_TO_KOMD'
    EXPORTING
      bapiobdlvitemrfo = it_item_reference_order
    CHANGING
      komdlgn          = cs_komdlgn
      ct_return        = ct_return.

ENDFORM.                    " FILL_KOMDLGN_OBDLV_ITEMRF_DATA
*&---------------------------------------------------------------------*
*&      Form  OBDLV_SAVEREPLICA_SORT
*&---------------------------------------------------------------------*
*       Sort of the interface tables
*----------------------------------------------------------------------*
*      --> IT _HEADER_PARTNER          Partner data
*      --> IT_HEADER_PARTNER_ADDR     Partner manual addresses
*      --> IT_HEADER_DEADLINES        Deadlines
*      --> IT_ITEM_DATA               Items
*      --> IT_ITEM_ORG                Item organisation data
*      --> IT_ITEM_STOCK_TRANS        Stock transfer data
*      --> IT_ITEM_CODING_BLOCK       Coding block
*      --> IT_ITEM_REFERENCE_ORDER    Reference sales order data
*      --> IT_ITEM_REF_PURCHASE_ORDER Reference purchase order data
*      --> IT_HANDLING_UNIT_HEADER    Handling unit header data
*      --> IT_HANDLING_UNIT_ITEM      Handling unit items
*      --> IT_TEXT_HEADER             Text header
*      --> IT_TEXT_LINES              Text lines
*----------------------------------------------------------------------*
FORM obdlv_savereplica_sort
     TABLES it_header_partner          STRUCTURE bapidlvpartner
            it_header_partner_addr     STRUCTURE bapiaddr1
            it_header_deadlines        STRUCTURE bapidlvdeadln
            it_item_data               STRUCTURE bapiobdlvitem
            it_item_org                STRUCTURE bapiobdlvitemorg
            it_item_stock_trans        STRUCTURE bapidlvitemsttr
            it_item_coding_block       STRUCTURE bapidlvcoblitem
            it_item_reference_order    STRUCTURE bapiobdlvitemrfo
            it_item_ref_purchase_order STRUCTURE bapidlvitemrpo
            it_item_serial_no          STRUCTURE bapidlvitmserno
            it_handling_unit_header    STRUCTURE bapidlvhdunhdr
            it_handling_unit_item      STRUCTURE bapidlvhdunitm
            it_handling_unit_serno     STRUCTURE bapidlvhdunserno
            it_text_header             STRUCTURE bapidlvtxthdr
            it_text_lines              STRUCTURE bapidlvtxtitem.

  SORT it_header_partner          BY deliv_numb.
  SORT it_header_partner_addr     BY addr_no.
  SORT it_header_deadlines        BY deliv_numb.
  SORT it_item_data               BY deliv_numb itm_number.
  SORT it_item_org                BY deliv_numb itm_number.
  SORT it_item_stock_trans        BY deliv_numb itm_number.
  SORT it_item_coding_block       BY deliv_numb itm_number.
  SORT it_item_reference_order    BY deliv_numb itm_number.
  SORT it_item_ref_purchase_order BY deliv_numb itm_number.
  SORT it_item_serial_no          BY deliv_numb itm_number.
  SORT it_handling_unit_header    BY deliv_numb hdl_unit_exid.
  SORT it_handling_unit_item      BY hdl_unit_exid_into hdl_unit_exid.
  SORT it_handling_unit_serno     BY hu_exid.
  SORT it_text_header             BY deliv_numb deliv_item text_id.
  SORT it_text_lines STABLE BY deliv_numb deliv_item text_id. "n_1647821

ENDFORM.                    " OBDLV_SAVEREPLICA_SORT
*&---------------------------------------------------------------------*
*&      Form  FILL_KOMDLGN_OBDLV_ITEM_KMPMG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_IT_ITEM_DATA  text
*      -->P_CT_RETURN  text
*      -->P_IT_ITEM_DATA  text
*      <--P_CT_KOMDLGN  text
*----------------------------------------------------------------------*
FORM fill_komdlgn_obdlv_item_kmpmg
                            TABLES it_item_data STRUCTURE bapiobdlvitem
                                   ct_return    STRUCTURE bapiret2
                             USING is_item_data TYPE      bapiobdlvitem
                          CHANGING ct_komdlgn   TYPE      komdlgn.

* old coding deleted                                          n_527400

* new coding                                                v_n_527400
  DATA:
    lf_kmpmg TYPE kmpmg.

  FIELD-SYMBOLS:
    <ls_item_data> TYPE bapiobdlvitem.

* kmpmg already known?
  CHECK     ct_komdlgn-kmpmg        IS INITIAL.

* calculation of kmpmg only for bills of material
  CHECK     is_item_data-usehieritm =  '2'.

* consistent data?
  CHECK NOT is_item_data-hieraritem IS INITIAL.

* get main item
  READ TABLE it_item_data ASSIGNING <ls_item_data>
                           WITH KEY deliv_numb = is_item_data-deliv_numb
                                   itm_number = is_item_data-hieraritem
                           BINARY SEARCH.

* should be there
  IF sy-subrc IS INITIAL.

*   avoid division by zero :-)
    CHECK NOT <ls_item_data>-dlv_qty IS INITIAL.

*   calculate amount of sub material per main material
    lf_kmpmg = is_item_data-dlv_qty / <ls_item_data>-dlv_qty.
    ct_komdlgn-kmpmg = lf_kmpmg.

  ENDIF.
*                                                           ^_n_527400

ENDFORM.                    " FILL_KOMDLGN_OBDLV_ITEM_KMPMG
*&---------------------------------------------------------------------*   "v_n_2677667
*& Form FILL_KOMDLGN_PO_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> CT_EKKO
*&      --> CT_EKPO
*&      --> CT_EKET
*&      <-- CT_KOMDLGN
*&---------------------------------------------------------------------*
FORM fill_komdlgn_po_data     TABLES   it_item_ref_purchase_order STRUCTURE bapidlvitemrpo
                                       ct_ekko TYPE ekko_tty
                                       ct_ekpo TYPE ekpo_tty
                                       ct_eket TYPE eket_tt
                              CHANGING ct_komdlgn TYPE komdlgn.


  FIELD-SYMBOLS: <fs_ekko> TYPE ekko,
                 <fs_ekpo> TYPE ekpo,
                 <fs_eket> TYPE eket.

  DATA:
    lv_bukrs      TYPE bukrs,
    ls_t001w      TYPE t001w,
    ls_t001k      TYPE t001k,
    ls_eket       TYPE eket.



*... Read Purchase Order Header
  READ TABLE ct_ekko ASSIGNING <fs_ekko> WITH KEY ebeln = ct_komdlgn-vgbel.

  IF  <fs_ekko> IS ASSIGNED.
*... Read Purchase Order Item
    READ TABLE ct_ekpo ASSIGNING <fs_ekpo> WITH KEY ebeln = ct_komdlgn-vgbel
                                                    ebelp = ct_komdlgn-vgpos.

    IF  <fs_ekpo> IS ASSIGNED.
*... Read Purchase Order Scheduling Line
*      READ TABLE ct_eket ASSIGNING <fs_eket> WITH KEY ebeln = ct_komdlgn-vgbel
*                                                      ebelp = ct_komdlgn-vgpos
*                                                      etenr = '1'.

*#############################################################################*
* Please use this routine for further data copy from purchase order
* to delivery -> komdlgn

*#############################################################################*


    ENDIF.
  ENDIF.

ENDFORM.                                                        "^_n_2677667