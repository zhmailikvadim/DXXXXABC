FUNCTION-POOL ZPE_FG_AIF_FILE_HANDLER MESSAGE-ID /AIF/MES.

TYPE-POOLS: abap.

INCLUDE /aif/upl_files_common_types.
INCLUDE /aif/excel_lfa_all.

TYPES:
  lty_target_struct_type        TYPE n LENGTH 2,

  BEGIN OF lty_target_info_s,
    ddobj                       TYPE ddobjname,
    data_descr                  TYPE REF TO cl_abap_datadescr,
    target_struct_type          TYPE lty_target_struct_type,
  END OF lty_target_info_s.


CONSTANTS:
  BEGIN OF lc_target_struct_type,
    unknown                     TYPE lty_target_struct_type VALUE '00',
    incl_flat_struct            TYPE lty_target_struct_type VALUE '01',
    member_flat_struct          TYPE lty_target_struct_type VALUE '02',
    table_flat_struct           TYPE lty_target_struct_type VALUE '03',
  END OF lc_target_struct_type.


CLASS lcl_lfa_helper DEFINITION DEFERRED.

*----------------------------------------------------------------------*
*       CLASS lcl_lfa_helper DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_lfa_helper DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      get_receive_type_val
        IMPORTING
          iv_text_line              TYPE string
          ir_appl                   TYPE REF TO /aif/cl_appl_engine_lfa
        RETURNING
          value(rv_rcv_type_val)    TYPE /aif/rectypevalue,
      get_text_line_comp
        IMPORTING
          iv_text_line              TYPE string
          ir_appl                   TYPE REF TO /aif/cl_appl_engine_lfa
        RETURNING
          value(rv_text_line)       TYPE string,
      get_field_length
        IMPORTING
          ir_ele_descr              TYPE REF TO cl_abap_elemdescr
        RETURNING
          value(rv_len)             TYPE i,
      convert_value
        IMPORTING
          iv_source             TYPE any
        EXPORTING
          ev_target             TYPE any,
      convert_value_str
        IMPORTING
          iv_source             TYPE string
          iv_off                TYPE i
          iv_len                TYPE i OPTIONAL
        EXPORTING
          ev_target             TYPE any,
      all_fields_element
        IMPORTING
          ir_structdescr        TYPE REF TO cl_abap_structdescr
        RETURNING
          value(rv_all)         TYPE abap_bool,
      get_flat_struct_type
        IMPORTING
          ir_appl               TYPE REF TO /aif/cl_appl_engine_lfa
        RETURNING
          value(rs_type)        TYPE lty_target_info_s,
      class_constructor.
ENDCLASS.                    "lcl_lfa_helper DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_lfa_helper IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_lfa_helper IMPLEMENTATION.

  METHOD class_constructor.

  ENDMETHOD.                    "class_constructor

  METHOD get_receive_type_val.
    "IMPORTING
    "  iv_text_line              TYPE string
    "  ir_appl                   TYPE REF TO /aif/cl_appl_engine_lfa
    "RETURNING
    "  value(rv_rcv_type_val)    TYPE /aif/rectypevalue,

    CLEAR rv_rcv_type_val.
    IF NOT ir_appl->gs_settings-offset_tdet IS INITIAL.
      rv_rcv_type_val = iv_text_line+ir_appl->gs_settings-offset_tdet(ir_appl->gs_settings-chars_tdet).
    ELSE.
      rv_rcv_type_val = iv_text_line(ir_appl->gs_settings-chars_tdet).
    ENDIF.

  ENDMETHOD.                    "get_receive_type_val

  METHOD get_text_line_comp.
    "IMPORTING
    "  iv_text_line              TYPE string
    "  ir_appl                   TYPE REF TO /aif/cl_appl_engine_lfa
    "RETURNING
    "  value(rv_text_line)       TYPE string,

    DATA:
      lv_total_len        TYPE i,
      lv_tmp_text         TYPE string.

    CLEAR rv_text_line.
    IF ir_appl->gs_settings-remove_det_value = abap_false.
      rv_text_line = iv_text_line.
      RETURN.
    ENDIF.

    IF NOT ir_appl->gs_settings-offset_tdet IS INITIAL.
      lv_total_len = STRLEN( iv_text_line ) - ir_appl->gs_settings-chars_tdet.
      lv_tmp_text = iv_text_line.
      rv_text_line = lv_tmp_text(ir_appl->gs_settings-offset_tdet).
      lv_total_len = ir_appl->gs_settings-offset_tdet + ir_appl->gs_settings-chars_tdet.
      CONCATENATE rv_text_line lv_tmp_text+lv_total_len INTO rv_text_line.
    ELSE.
      lv_total_len = STRLEN( iv_text_line ) - ir_appl->gs_settings-chars_tdet.
      rv_text_line = iv_text_line+ir_appl->gs_settings-chars_tdet(lv_total_len).
    ENDIF.

  ENDMETHOD.                    "get_text_line_comp

  METHOD get_field_length.
    "IMPORTING
    "  is_dd03p              TYPE dd03p
    "RETURNING
    "  value(rv_len)         TYPE i,

    DATA: ls_ddic_field TYPE dfies.

    rv_len = 0.
    IF ir_ele_descr IS INITIAL.
      RETURN.
    ENDIF.

    CASE ir_ele_descr->type_kind.
      WHEN cl_abap_typedescr=>typekind_hex
        OR cl_abap_typedescr=>typekind_decfloat
        OR cl_abap_typedescr=>typekind_decfloat16
        OR cl_abap_typedescr=>typekind_decfloat34
        OR cl_abap_typedescr=>typekind_float.
*       the length of these types is not characters' length, using output length anyway.
        rv_len = ir_ele_descr->output_length.
      WHEN OTHERS.
        ls_ddic_field = ir_ele_descr->get_ddic_field( ).
        rv_len = ls_ddic_field-leng.
        IF ls_ddic_field-sign = abap_true.
          rv_len = rv_len + 1.
        ENDIF.
        IF ls_ddic_field-decimals <> 0.
          rv_len = rv_len + ls_ddic_field-decimals + 1.
        ENDIF.
    ENDCASE.

  ENDMETHOD.                    "get_field_length

  METHOD convert_value_str.
    "IMPORTING
    "  iv_source             TYPE string
    "  iv_off                type i
    "  iv_len                type i optional
    "EXPORTING
    "  ev_target             TYPE any,
    TRY.
        IF iv_len IS SUPPLIED.
          ev_target = iv_source+iv_off(iv_len).
        ELSE.
          ev_target = iv_source+iv_off.
        ENDIF.
      CATCH cx_root.
        CLEAR ev_target.
    ENDTRY.

  ENDMETHOD.                    "convert_value_str

  METHOD convert_value.
    "IMPORTING
    "  iv_source             TYPE any
    "EXPORTING
    "  ev_target             TYPE any,

    TRY.
        ev_target = iv_source.
      CATCH cx_root.
        CLEAR ev_target.
    ENDTRY.

*    CALL FUNCTION 'RS_CONV_EX_2_IN_NO_DD'
*      EXPORTING
*        input_external              = lv_tmp
*      IMPORTING
*        output_internal             = <l_field>
*      EXCEPTIONS
*        input_not_numerical         = 1
*        too_many_decimals           = 2
*        more_than_one_sign          = 3
*        ill_thousand_separator_dist = 4
*        too_many_digits             = 5
*        sign_for_unsigned           = 6
*        too_large                   = 7
*        too_small                   = 8
*        invalid_date_format         = 9
*        invalid_date                = 10
*        invalid_time_format         = 11
*        invalid_time                = 12
*        invalid_hex_digit           = 13
*        unexpected_error            = 14
*        input_too_long              = 15
*        no_decimals                 = 16
*        invalid_float               = 17
*        illegal_type                = 18
*        conversion_exit_error       = 19
*        OTHERS                      = 20.
*    IF sy-subrc <> 0.
*      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 RAISING wrong_format.
*    ENDIF.

  ENDMETHOD.                    "convert_value

  METHOD all_fields_element.
    "IMPORTING
    "  ir_structdescr        TYPE REF TO cl_abap_structdescr
    "RETURNING
    "  value(rv_all)         TYPE abap_bool,

    DATA:
      lr_symbol           TYPE REF TO abap_simple_componentdescr,
      lt_symbols          TYPE cl_abap_structdescr=>symbol_table.

    rv_all = abap_false.
    IF ir_structdescr IS INITIAL.
      RETURN.
    ENDIF.

    CLEAR lt_symbols.
    lt_symbols = ir_structdescr->get_symbols( ).
    LOOP AT lt_symbols REFERENCE INTO lr_symbol.
      IF lr_symbol->type->kind <> cl_abap_typedescr=>kind_elem.
        RETURN.
      ENDIF.
    ENDLOOP.

    rv_all = abap_true.

  ENDMETHOD.                    "all_fields_element

  METHOD get_flat_struct_type.
    "IMPORTING
    "  ir_appl               TYPE REF TO /aif/cl_appl_engine_lfa
    "  is_data               TYPE any
    "RETURNING
    "  value(rs_type)        TYPE lty_target_info_s,

    FIELD-SYMBOLS:
      <fs_member>           TYPE ANY.

    DATA:
      lr_root               TYPE REF TO cx_root,
      lr_member_typedescr   TYPE REF TO cl_abap_typedescr,
      lr_datadescr          TYPE REF TO cl_abap_datadescr,
      lr_tabledescr         TYPE REF TO cl_abap_tabledescr,
      lr_structdescr        TYPE REF TO cl_abap_structdescr,
      lr_typedescr          TYPE REF TO cl_abap_typedescr,
      lt_components         TYPE cl_abap_structdescr=>component_table.

    CLEAR rs_type.
    rs_type-target_struct_type = lc_target_struct_type-unknown.

    TRY.
        CLEAR lr_typedescr.
        lr_typedescr = cl_abap_typedescr=>describe_by_name( ir_appl->gs_settings-structure ).

        IF ir_appl->gs_settings-fieldname IS INITIAL.

          rs_type-target_struct_type = lc_target_struct_type-incl_flat_struct.
          rs_type-ddobj = lr_typedescr->get_relative_name( ).
          rs_type-data_descr = CAST #( lr_typedescr ).
        ELSE.
          CLEAR lr_member_typedescr.
          lr_structdescr = CAST #( lr_typedescr ).
          lr_member_typedescr = lr_structdescr->get_component_type( ir_appl->gs_settings-fieldname ).
          IF lr_member_typedescr->kind = cl_abap_typedescr=>kind_table.
            CLEAR lr_tabledescr.
            lr_tabledescr ?= lr_member_typedescr.
            CLEAR lr_datadescr.
            lr_datadescr = lr_tabledescr->get_table_line_type( ).
            rs_type-target_struct_type = lc_target_struct_type-table_flat_struct.
            rs_type-ddobj = lr_datadescr->get_relative_name( ).
            rs_type-data_descr = lr_datadescr.
          ELSEIF lr_member_typedescr->kind = cl_abap_typedescr=>kind_struct.
            rs_type-target_struct_type = lc_target_struct_type-member_flat_struct.
            rs_type-ddobj = lr_member_typedescr->get_relative_name( ).
            rs_type-data_descr = CAST #( lr_member_typedescr ).
          ENDIF.

        ENDIF.
      CATCH cx_root INTO lr_root.
        RETURN.
    ENDTRY.

  ENDMETHOD.                    "get_flat_struct_type

ENDCLASS.                    "lcl_lfa_helper IMPLEMENTATION