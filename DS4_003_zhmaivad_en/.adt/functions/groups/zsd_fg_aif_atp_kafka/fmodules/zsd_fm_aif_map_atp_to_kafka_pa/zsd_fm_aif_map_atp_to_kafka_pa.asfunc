FUNCTION zsd_fm_aif_map_atp_to_kafka_pa
  IMPORTING
    VALUE(it_aif_atp_keys) TYPE zsd_tt_aif_atp_kafka_keys_t
    VALUE(iv_pers_rtcfgr_ns) TYPE /aif/pers_rtcfgr_ns
    VALUE(iv_pers_rtcfgr_name) TYPE /aif/pers_rtcfgr_name
    VALUE(iv_log_object) TYPE balobj_d
    VALUE(iv_log_sub_object) TYPE balsubobj
    VALUE(iv_program_name) TYPE cprog
  EXPORTING
    VALUE(et_aif_atp_keys) TYPE zsd_tt_aif_atp_kafka_keys.



  " -----------------------------------------------------------------------
  "  R E V I S I O N   H I S T O R Y                                     -
  " -----------------------------------------------------------------------
  " AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              -
  "              |            | TRANSPORT REQUESTS                       -
  " -----------------------------------------------------------------------
  " ZHMAIVAD     | 19.01.2024 | 27294     : Feature - ATP push from S/4  -
  "              |            | DS4K972552                               -
  " -----------------------------------------------------------------------
  " ZHMAIVAD     | 20.02.2024 | 28986     : Feature - ATP push from S/4  -
  "              |            | DS4K979378                                -
  " -----------------------------------------------------------------------

  FINAL(lif_log) = cf_reca_message_list=>create( id_object    = iv_log_object
                                                 id_subobject = iv_log_sub_object ).

  et_aif_atp_keys = VALUE #(  FOR ls_item_keys IN it_aif_atp_keys FOR ls_item_mess IN ls_item_keys-messages
                             ( ls_item_mess )  ).

  TRY.
      /aif/cl_enabler_xml=>transfer_to_aif_mult( it_any_structure = it_aif_atp_keys
                                                 iv_queue_ns      = iv_pers_rtcfgr_ns
                                                 iv_queue_name    = iv_pers_rtcfgr_name ).

    CATCH /aif/cx_enabler_base INTO FINAL(lo_cx).
      lif_log->add_from_exception( lo_cx ).
  ENDTRY.

  IF lif_log->has_messages_of_msgty( if_msg_output=>msgtype_error ).
    lif_log->store( EXPORTING  if_in_update_task = abap_false
                    EXCEPTIONS error             = 1
                               OTHERS            = 2 ) ##SUBRC_OK.
  ENDIF.
ENDFUNCTION.