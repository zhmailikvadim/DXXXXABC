*&---------------------------------------------------------------------*
*&  Include           /AIF/EXCEL_LFA_MAPPER
*&---------------------------------------------------------------------*

CLASS lcl_excel_mapper DEFINITION DEFERRED.
CLASS lcl_excel_mapper_base DEFINITION DEFERRED.
CLASS lcl_excel_mapper_auto_fld DEFINITION DEFERRED.
CLASS lcl_excel_mapper_fld_tab DEFINITION DEFERRED.
*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper DEFINITION ABSTRACT
                       CREATE PROTECTED.

  PUBLIC SECTION.
    CLASS-METHODS:
      class_constructor,
      create_mapper
        IMPORTING
          is_excel_h        TYPE /aif/lfa_excel_h
        RETURNING
          value(rr_mapper)  TYPE REF TO lcl_excel_mapper.

    METHODS:
      set_err_handler
        IMPORTING
          ir_err_handler    TYPE REF TO /aif/cl_lfa_error_collection,
      map_data ABSTRACT
        IMPORTING
          ir_workbook       TYPE REF TO lcl_workbook
        CHANGING
          cs_raw_struct     TYPE any
        RAISING
          /aif/cx_lfa_map_error.

  PROTECTED SECTION.
    METHODS:
      convert_str_to_val
        IMPORTING
          iv_str_val           TYPE lty_cell_value
        EXPORTING
          ev_val               TYPE any,
      constructor
        IMPORTING
          is_excel_h        TYPE /aif/lfa_excel_h.

    DATA:
      ms_excel_h            TYPE /aif/lfa_excel_h,
      mr_err_handler        TYPE REF TO /aif/cl_lfa_error_collection.

ENDCLASS.                    "lcl_excel_mapper DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_base DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_base DEFINITION ABSTRACT INHERITING FROM lcl_excel_mapper
                                CREATE PROTECTED
                                FRIENDS lcl_excel_mapper.

*  PUBLIC SECTION.
*    METHODS:
*      map_data REDEFINITION.

  PROTECTED SECTION.
    METHODS:
*      set_up
*        IMPORTING
*          ir_workbook       TYPE REF TO lcl_workbook
*        CHANGING
*          cr_worksheet      TYPE REF TO lcl_worksheet
*          ct_tab            TYPE ANY TABLE,
      get_data_from_excel_sheet
        IMPORTING
          ir_worksheet       TYPE REF TO lcl_worksheet
          ir_datadescr       TYPE REF TO cl_abap_datadescr
          it_field_list      TYPE lty_map_field_t
        EXPORTING
          ev_error           TYPE abap_bool
        CHANGING
          ct_tab             TYPE ANY TABLE
        RAISING
          /aif/cx_lfa_map_error,
      get_field_list_from_abap_type
        IMPORTING
          it_tab             TYPE ANY TABLE
        EXPORTING
          ev_error           TYPE abap_bool
          et_field_list      TYPE lty_map_field_t
          er_datadescr       TYPE REF TO cl_abap_datadescr
        RAISING
          /aif/cx_lfa_map_error,
      merge_field_list ABSTRACT
        IMPORTING
          ir_worksheet       TYPE REF TO lcl_worksheet
        EXPORTING
          ev_error           TYPE abap_bool
        CHANGING
          ct_field_list      TYPE lty_map_field_t,
      constructor
        IMPORTING
          is_excel_h        TYPE /aif/lfa_excel_h.

ENDCLASS.                    "lcl_excel_mapper_auto_fld DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_auto_fld DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_auto_fld DEFINITION INHERITING FROM lcl_excel_mapper_base
                                CREATE PROTECTED
                                FRIENDS lcl_excel_mapper.

  PUBLIC SECTION.
    METHODS:
      map_data REDEFINITION.

  PROTECTED SECTION.
    METHODS:
      merge_field_list REDEFINITION,
      constructor
        IMPORTING
          is_excel_h        TYPE /aif/lfa_excel_h.

ENDCLASS.                    "lcl_excel_mapper_auto_fld DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_fld_tab DEFINITION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_fld_tab DEFINITION INHERITING FROM lcl_excel_mapper_base
                               CREATE PROTECTED
                               FRIENDS lcl_excel_mapper.

  PUBLIC SECTION.
    METHODS:
      map_data REDEFINITION.

  PROTECTED SECTION.
    METHODS:
      merge_field_list REDEFINITION,
      constructor
        IMPORTING
          is_excel_h        TYPE /aif/lfa_excel_h.

ENDCLASS.                    "lcl_excel_mapper_fld_tab DEFINITION
*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper IMPLEMENTATION.

  METHOD class_constructor.

  ENDMETHOD.                    "class_constructor

  METHOD convert_str_to_val.
    "IMPORTING
    "  iv_str_val           TYPE lty_cell_value
    "EXPORTING
    "  ev_val               TYPE any,
    DATA:
      lv_xml              TYPE string.

    CLEAR ev_val.
    IF iv_str_val IS INITIAL.
      RETURN.
    ENDIF.
    ev_val = iv_str_val.
*    IF lv_conv_flag = mc_conv_flag-move.
*      ev_val = iv_str_val.
*    ELSEIF lv_conv_flag = mc_conv_flag-write.
*      ev_val = iv_str_val.
*    ELSEIF lv_conv_flag = mc_conv_flag-xml_trans.
*      CLEAR lv_xml.
*      CONCATENATE
*        '<asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0"><asx:values><VAL>'
*        iv_str_val
*        '</VAL></asx:values></asx:abap>' INTO lv_xml.
*      CONDENSE lv_xml.
*      CALL TRANSFORMATION id SOURCE XML lv_xml RESULT val = ev_val.
*    ENDIF.

  ENDMETHOD.                    "convert_str_to_val

  METHOD constructor.
    "IMPORTING
    "  is_excel_h        TYPE /aif/lfa_excel_h.

    CLEAR mr_err_handler.
    CLEAR ms_excel_h.
    ms_excel_h = is_excel_h.

  ENDMETHOD.                    "constructor

  METHOD set_err_handler.
    "IMPORTING
    "  ir_err_handler    TYPE REF TO /aif/cl_lfa_error_collection,

    CLEAR mr_err_handler.
    mr_err_handler = ir_err_handler.

  ENDMETHOD.                    "set_err_handler

  METHOD create_mapper.
    "IMPORTING
    "  is_excel_h        TYPE /aif/lfa_excel_h
    "RETURNING
    "  value(rr_mapper)  TYPE REF TO lcl_excel_mapper.

    CLEAR rr_mapper.
    IF is_excel_h-mapping_type = /aif/cl_lfa_constants=>mc_lfa_excel_map_type-auto_fldnames.
      CREATE OBJECT rr_mapper
        TYPE
          lcl_excel_mapper_auto_fld
        EXPORTING
          is_excel_h                = is_excel_h.
    ELSEIF is_excel_h-mapping_type = /aif/cl_lfa_constants=>mc_lfa_excel_map_type-mapping_tab.
      CREATE OBJECT rr_mapper
        TYPE
          lcl_excel_mapper_fld_tab
        EXPORTING
          is_excel_h               = is_excel_h.
    ENDIF.
  ENDMETHOD.                    "create_mapper

ENDCLASS.                    "lcl_excel_mapper IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_base IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_base IMPLEMENTATION.

  METHOD constructor.
    "IMPORTING
    "  is_excel_h        TYPE /aif/lfa_excel_h.

    super->constructor( is_excel_h = is_excel_h ).

  ENDMETHOD.                    "constructor

  METHOD get_field_list_from_abap_type.
    "IMPORTING
    "  it_tab             TYPE ANY TABLE
    "EXPORTING
    "  et_field_list      TYPE lty_map_field_t
    "  er_datadescr       TYPE REF TO cl_abap_datadescr,

    DATA:
      lr_root                TYPE REF TO cx_root,
      lr_field               TYPE REF TO lty_map_field_s,
      lt_symbols             TYPE abap_component_symbol_tab,
      lr_symbol              TYPE REF TO abap_simple_componentdescr,
      lr_structdescr         TYPE REF TO cl_abap_structdescr,
      lr_tabdescr            TYPE REF TO cl_abap_tabledescr.

    "get fieldnames from data.
    TRY.
        ev_error = abap_false.
        CLEAR et_field_list.
        CLEAR lr_tabdescr.
        lr_tabdescr ?= cl_abap_typedescr=>describe_by_data( p_data = it_tab ).
        er_datadescr = lr_tabdescr->get_table_line_type( ).

        IF er_datadescr->kind = cl_abap_typedescr=>kind_elem.

          APPEND INITIAL LINE TO et_field_list REFERENCE INTO lr_field.
          lr_field->name = 'TABLE_LINE'.
          lr_field->type_kind = er_datadescr->type_kind.

        ELSE.

          CLEAR lt_symbols.
          CLEAR lr_structdescr.
          lr_structdescr ?= er_datadescr.
          lt_symbols = lr_structdescr->get_symbols( ).
          LOOP AT lt_symbols REFERENCE INTO lr_symbol.
            APPEND INITIAL LINE TO et_field_list REFERENCE INTO lr_field.
            lr_field->name = lr_symbol->name.
            lr_field->type_kind = lr_symbol->type->type_kind.
          ENDLOOP.

        ENDIF.

      CATCH cx_root INTO lr_root.
        ev_error = abap_true.
        MESSAGE e073(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
        /aif/cx_lfa_map_error=>raise_message( iv_previous = lr_root ).
        RETURN.
    ENDTRY.

  ENDMETHOD.                    "get_field_list_from_abap_type

  METHOD get_data_from_excel_sheet.
    "IMPORTING
    "  ir_worksheet       TYPE REF TO lcl_worksheet
    "  ir_datadescr       TYPE REF TO cl_abap_datadescr
    "  it_field_list      TYPE lty_map_field_t
    "EXPORTING
    "  ev_error           TYPE abap_bool
    "CHANGING
    "  ct_tab             TYPE ANY TABLE,

    FIELD-SYMBOLS:
      <fs_field>             TYPE ANY,
      <fs_row>               TYPE ANY.

    DATA:
      lr_root            TYPE REF TO cx_root,
      lr_field           TYPE REF TO lty_map_field_s,
      lt_sheet_data      TYPE lty_sheet_data_t,
      lr_row_data        TYPE REF TO data,
      lr_cell            TYPE REF TO lty_sheet_data_cell_s,
      lr_row             TYPE REF TO lty_sheet_data_s.

    TRY.
        ev_error = abap_false.
        CLEAR lt_sheet_data.
        ir_worksheet->get_sheet_data( IMPORTING
                                        et_sheet_data  = lt_sheet_data ).

        LOOP AT lt_sheet_data REFERENCE INTO lr_row WHERE row_index >= ms_excel_h-row_from.

          CLEAR lr_row_data.
          CREATE DATA lr_row_data TYPE HANDLE ir_datadescr.
          UNASSIGN <fs_row>.
          ASSIGN lr_row_data->* TO <fs_row>.
          IF <fs_row> IS NOT ASSIGNED.
            RETURN.
          ENDIF.

          LOOP AT it_field_list REFERENCE INTO lr_field.

            UNASSIGN <fs_field>.
            ASSIGN COMPONENT lr_field->name OF STRUCTURE <fs_row> TO <fs_field>.
            IF <fs_field> IS NOT ASSIGNED.
              CONTINUE.
            ENDIF.
            READ TABLE lr_row->row_data WITH KEY col = lr_field->col REFERENCE INTO lr_cell.
            IF sy-subrc = 0.
              TRY.
                  IF lr_field->convexit IS NOT INITIAL.

                    DATA:
                      lv_func       TYPE funcname.
                    CLEAR lv_func.
                    CONCATENATE 'CONVERSION_EXIT_' lr_field->convexit '_INPUT' INTO lv_func.
                    CONDENSE lv_func.
                    CALL FUNCTION lv_func
                      EXPORTING
                        input  = lr_cell->value
                      IMPORTING
                        output = <fs_field>.

                  ELSE.
                    convert_str_to_val( EXPORTING
                                          iv_str_val = lr_cell->value
                                        IMPORTING
                                          ev_val     = <fs_field> ).
                  ENDIF.
                CATCH cx_root INTO lr_root.
                  mr_err_handler->add_exception( ir_exception = lr_root ).
                  MESSAGE w071(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet lr_field->name
                    INTO mr_err_handler->mv_text.
                  mr_err_handler->add_message( ).
              ENDTRY.
            ENDIF.

          ENDLOOP.

          IF ms_excel_h-fld_name_idx IS NOT INITIAL.
            ASSIGN COMPONENT ms_excel_h-fld_name_idx OF STRUCTURE <fs_row> TO <fs_field>.
            IF <fs_field> IS ASSIGNED.
              <fs_field> = lr_row->row_index.
            ENDIF.
          ENDIF.

          IF <fs_row> IS NOT INITIAL.
            INSERT <fs_row> INTO TABLE ct_tab.
          ENDIF.


          IF ms_excel_h-row_to IS NOT INITIAL.
            IF lr_row->row_index >= ms_excel_h-row_to.
              EXIT.
            ENDIF.
          ELSE.
            "exit when there is no more data.
            IF <fs_row> IS INITIAL.
              EXIT.
            ENDIF.
          ENDIF.
        ENDLOOP.

      CATCH cx_root INTO lr_root.

        ev_error = abap_true.
        MESSAGE e074(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
        /aif/cx_lfa_map_error=>raise_message( iv_previous = lr_root ).
        RETURN.

    ENDTRY.


  ENDMETHOD.                    "get_data_from_excel_sheet
*  METHOD set_up.
*    "IMPORTING
*    "  ir_workbook       TYPE REF TO lcl_workbook
*    "CHANGING
*    "  cr_worksheet      TYPE REF TO lcl_worksheet
*    "  ct_tab            TYPE ANY TABLE,
*
*  ENDMETHOD.                    "set_up

ENDCLASS.                    "lcl_excel_mapper_base IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_auto_fld IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_auto_fld IMPLEMENTATION.

  METHOD constructor.
    "IMPORTING
    "  is_excel_h        TYPE /aif/lfa_excel_h.

    super->constructor( is_excel_h = is_excel_h ).

  ENDMETHOD.                    "constructor

  METHOD map_data.
    "IMPORTING
    "  ir_workbook       TYPE REF TO lcl_workbook
    "CHANGING
    "  cs_raw_struct     TYPE any
    "RAISING
    "  /aif/cx_lfa_map_error.

    FIELD-SYMBOLS:
      <fs_raw_member>             TYPE ANY TABLE.

    DATA:
      lr_worksheet                TYPE REF TO lcl_worksheet.

    IF ms_excel_h-mapping_type <> /aif/cl_lfa_constants=>mc_lfa_excel_map_type-auto_fldnames.
      "should not happen, just double check. Should be handled in lcl_excel_mapper=>create_mapper
      RETURN.
    ENDIF.
    IF mr_err_handler IS NOT BOUND.
      RETURN.
    ENDIF.

    CLEAR lr_worksheet.
    lr_worksheet = ir_workbook->get_worksheet( iv_sheetname = ms_excel_h-excel_sheet ).
    IF lr_worksheet IS NOT BOUND.
      MESSAGE e040(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      RETURN.
    ENDIF.

    UNASSIGN <fs_raw_member>.
    ASSIGN COMPONENT ms_excel_h-fld_name_raw OF STRUCTURE cs_raw_struct TO <fs_raw_member>.
    IF <fs_raw_member> IS NOT ASSIGNED.
      MESSAGE e042(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-fld_name_raw INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      RETURN.
    ENDIF.

    DATA:
      lv_error               TYPE abap_bool,
      lr_root                TYPE REF TO cx_root,
      lt_field_list          TYPE lty_map_field_t,
      lr_datadescr           TYPE REF TO cl_abap_datadescr.

    TRY.
        lv_error = abap_false.
        get_field_list_from_abap_type( EXPORTING
                                         it_tab        = <fs_raw_member>
                                       IMPORTING
                                         ev_error      = lv_error
                                         et_field_list = lt_field_list
                                         er_datadescr  = lr_datadescr ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

        merge_field_list( EXPORTING
                            ir_worksheet  = lr_worksheet
                          IMPORTING
                            ev_error      = lv_error
                          CHANGING
                            ct_field_list = lt_field_list ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

        get_data_from_excel_sheet( EXPORTING
                                     ir_worksheet  = lr_worksheet
                                     ir_datadescr  = lr_datadescr
                                     it_field_list = lt_field_list
                                   IMPORTING
                                     ev_error      = lv_error
                                   CHANGING
                                     ct_tab        = <fs_raw_member> ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

      CATCH cx_root INTO lr_root.

        MESSAGE e048(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
        /aif/cx_lfa_map_error=>raise_message( iv_previous = lr_root ).
        RETURN.

    ENDTRY.


  ENDMETHOD.                    "map_data

  METHOD merge_field_list.
    "IMPORTING
    "  ir_worksheet       TYPE REF TO lcl_worksheet
    "EXPORTING
    "  ev_error           TYPE abap_bool
    "CHANGING
    "  ct_field_list      TYPE lty_map_field_t,

    DATA:
      lt_excel_f_a            TYPE /aif/lfa_exl_f_a_t,
      lr_excel_f_a            TYPE REF TO /aif/lfa_exl_f_a,
      lv_col_from             TYPE i,
      lv_col_to               TYPE i,
      lr_field                TYPE REF TO lty_map_field_s,
      lt_sheet_data           TYPE lty_sheet_data_t,
      lr_row_data             TYPE REF TO data,
      lr_cell                 TYPE REF TO lty_sheet_data_cell_s,
      lr_row                  TYPE REF TO lty_sheet_data_s.

    ev_error = abap_false.
    CLEAR lr_row.
    lr_row = ir_worksheet->get_row_data( iv_row = ms_excel_h-row_fld_names ).
    IF lr_row IS NOT BOUND.

      ev_error = abap_true.
      MESSAGE e070(/aif/lfa_mes)
        WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet ms_excel_h-row_fld_names INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      RETURN.

    ENDIF.

    lv_col_from = lcl_excel_helper=>excelcol_to_index( iv_col = ms_excel_h-col_from ).
    lv_col_to = lcl_excel_helper=>excelcol_to_index(  iv_col = ms_excel_h-col_to ).
    LOOP AT lr_row->row_data REFERENCE INTO lr_cell.
      READ TABLE ct_field_list REFERENCE INTO lr_field WITH KEY name = lr_cell->value.
      IF sy-subrc = 0.
        IF lr_cell->col_index >= lv_col_from AND
          lr_cell->col_index <= lv_col_to.
          lr_field->col  = lr_cell->col.
        ENDIF.
      ENDIF.
    ENDLOOP.

    DELETE ct_field_list WHERE col IS INITIAL.

    CLEAR lt_excel_f_a.
    SELECT * FROM /aif/lfa_exl_f_a INTO CORRESPONDING FIELDS OF TABLE lt_excel_f_a
    WHERE
      fileconfns  = ms_excel_h-fileconfns AND
      fileconf    = ms_excel_h-fileconf AND
      excel_sheet = ms_excel_h-excel_sheet.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    LOOP AT lt_excel_f_a REFERENCE INTO lr_excel_f_a.
      READ TABLE ct_field_list REFERENCE INTO lr_field WITH KEY name = lr_excel_f_a->fld_name.
      IF sy-subrc = 0.
        lr_field->convexit = lr_excel_f_a->convexit.
        lr_field->use_field_exit = lr_excel_f_a->use_field_exit.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.                    "merge_field_list

ENDCLASS.                    "lcl_excel_mapper_auto_fld IMPLEMENTATION

*----------------------------------------------------------------------*
*       CLASS lcl_excel_mapper_fld_tab IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_excel_mapper_fld_tab IMPLEMENTATION.

  METHOD constructor.
    "IMPORTING
    "  is_excel_h        TYPE /aif/lfa_excel_h.

    super->constructor( is_excel_h = is_excel_h ).

  ENDMETHOD.                    "constructor

  METHOD map_data.
    "IMPORTING
    "  ir_workbook       TYPE REF TO lcl_workbook
    "CHANGING
    "  cs_raw_struct     TYPE any
    "RAISING
    "  /aif/cx_lfa_map_error.

    FIELD-SYMBOLS:
      <fs_raw_member>             TYPE ANY TABLE.

    DATA:
      lr_worksheet                TYPE REF TO lcl_worksheet.

    IF ms_excel_h-mapping_type <> /aif/cl_lfa_constants=>mc_lfa_excel_map_type-mapping_tab.
      "should not happen, just double check. Should be handled in lcl_excel_mapper=>create_mapper
      RETURN.
    ENDIF.

    IF mr_err_handler IS NOT BOUND.
      RETURN.
    ENDIF.

    CLEAR lr_worksheet.
    lr_worksheet = ir_workbook->get_worksheet( iv_sheetname = ms_excel_h-excel_sheet ).
    IF lr_worksheet IS NOT BOUND.
      MESSAGE e040(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      RETURN.
    ENDIF.

    UNASSIGN <fs_raw_member>.
    ASSIGN COMPONENT ms_excel_h-fld_name_raw OF STRUCTURE cs_raw_struct TO <fs_raw_member>.
    IF <fs_raw_member> IS NOT ASSIGNED.
      MESSAGE e042(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-fld_name_raw INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      RETURN.
    ENDIF.

    DATA:
      lv_error               TYPE abap_bool,
      lr_root                TYPE REF TO cx_root,
      lt_field_list          TYPE lty_map_field_t,
      lr_datadescr           TYPE REF TO cl_abap_datadescr.

    TRY.
        lv_error = abap_false.
        get_field_list_from_abap_type( EXPORTING
                                         it_tab        = <fs_raw_member>
                                       IMPORTING
                                         ev_error      = lv_error
                                         et_field_list = lt_field_list
                                         er_datadescr  = lr_datadescr ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

        merge_field_list( EXPORTING
                            ir_worksheet  = lr_worksheet
                          IMPORTING
                            ev_error      = lv_error
                          CHANGING
                            ct_field_list = lt_field_list ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

        get_data_from_excel_sheet( EXPORTING
                                     ir_worksheet  = lr_worksheet
                                     ir_datadescr  = lr_datadescr
                                     it_field_list = lt_field_list
                                   IMPORTING
                                     ev_error      = lv_error
                                   CHANGING
                                     ct_tab        = <fs_raw_member> ).
        IF lv_error = abap_true.
          RETURN.
        ENDIF.

      CATCH cx_root INTO lr_root.

        MESSAGE e048(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
        /aif/cx_lfa_map_error=>raise_message( iv_previous = lr_root ).
        RETURN.

    ENDTRY.

  ENDMETHOD.                    "map_data

  METHOD merge_field_list.
    "IMPORTING
    "  ir_worksheet       TYPE REF TO lcl_worksheet
    "EXPORTING
    "  ev_error           TYPE abap_bool
    "CHANGING
    "  ct_field_list      TYPE lty_map_field_t,

    DATA:
      lr_field           TYPE REF TO lty_map_field_s,
      lt_excel_f         TYPE /aif/lfa_excel_f_t,
      lr_excel_f         TYPE REF TO /aif/lfa_excel_f.

    ev_error = abap_false.

    CLEAR lt_excel_f.
    SELECT * FROM /aif/lfa_excel_f INTO CORRESPONDING FIELDS OF TABLE lt_excel_f
    WHERE
      fileconfns  = ms_excel_h-fileconfns AND
      fileconf    = ms_excel_h-fileconf AND
      excel_sheet = ms_excel_h-excel_sheet.
    IF sy-subrc <> 0.
      MESSAGE e072(/aif/lfa_mes) WITH ms_excel_h-fileconfns ms_excel_h-fileconf ms_excel_h-excel_sheet INTO mr_err_handler->mv_text.
      mr_err_handler->add_message( ).
      ev_error = abap_true.
      RETURN.
    ENDIF.

    LOOP AT lt_excel_f REFERENCE INTO lr_excel_f.
      READ TABLE ct_field_list REFERENCE INTO lr_field WITH KEY name = lr_excel_f->fld_name.
      IF sy-subrc = 0.
        lr_field->col  = lr_excel_f->excel_col.
        lr_field->convexit = lr_excel_f->convexit.
        lr_field->use_field_exit = lr_excel_f->use_field_exit.
      ENDIF.
    ENDLOOP.

    DELETE ct_field_list WHERE col IS INITIAL.

  ENDMETHOD.                    "merge_field_list

ENDCLASS.                    "lcl_excel_mapper_fld_tab IMPLEMENTATION