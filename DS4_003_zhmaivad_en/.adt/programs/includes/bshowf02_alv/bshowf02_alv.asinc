*&---------------------------------------------------------------------*
*&  Include           BSHOWF02_ALV
*&---------------------------------------------------------------------*
*& This form is in charge to insert node into the tree                 *
*&---------------------------------------------------------------------*
*&      Form  INSERT_NODE
*&---------------------------------------------------------------------*
form insert_node using p_wbbh type wbbh
                       p_wbbl type wbbl
                       p_level type i
                       p_rel_key type salv_de_node_key
                       p_position type i
                 changing p_new_key.

  data: outtab_line type wbbh_wbbl,
        node_text   type lvc_value,
        is_folder   type c value space,
        node        type ref to cl_salv_node.

* Merge 2 structures (wbbh and wbbl) into structure uses to fill the
* tree
  perform fill_datarow using p_wbbh
                             p_wbbl
                             p_level
                       changing outtab_line
                                node_text.

  append outtab_line to g_t_wbbh_data.

  try.

      if p_level < 5.
        is_folder = abap_true.
      endif.

*    add a new node (but set as not visible)
      node = gr_nodes->add_node(
                             related_node = p_rel_key
                             data_row     = outtab_line
                             relationship = p_position
                             visible = space
                             text = node_text
                             expander = is_folder
                             folder  = is_folder ).

*     Retreive node key to return via parameter
      p_new_key = node->get_key( ).

      perform set_itemlayout using node p_level outtab_line.

*     Once layout set, set node as visible
      node->set_visible( x ).

    catch cx_salv_msg.                                  "#EC NO_HANDLER
  endtry.

endform.                    "INSERT_NODE

*&---------------------------------------------------------------------*
*&      Form  FILL_DATAROW
*&---------------------------------------------------------------------*
*       This form merges the 2 structures (WBBH, WBBL)
*----------------------------------------------------------------------*

form fill_datarow using  p_wbbh type wbbh
                         p_wbbl type wbbl
                         p_level type i
                  changing p_outtab_line type wbbh_wbbl
                           p_node_text type lvc_value.

  data: add_info   like wdl_flag-xflag value 'X'.

  if p_level >= 1.

    p_outtab_line-type   = store_node.
    p_outtab_line-locnr  = p_wbbh-locnr.
    p_outtab_line-name1  = p_wbbh-name1.

    p_node_text          = p_wbbh-locnr.

  endif.

  if p_level >= 2.

    p_outtab_line-type   = repl_type_node.
    p_outtab_line-bbtyp  = p_wbbh-bbtyp.
    p_outtab_line-bbtext = p_wbbh-bbtext.
    p_outtab_line-knzvv  = p_wbbh-knzvv.

    concatenate p_wbbh-bbtyp p_wbbh-bbtext into p_node_text
          separated by space.

  endif.

  if p_level >= 3.

    p_outtab_line-type   = version_node.
    p_outtab_line-versnr = p_wbbh-versnr.
    p_outtab_line-versab = p_wbbh-versab.
    p_outtab_line-versbi = p_wbbh-versbi.
    p_outtab_line-dldnr  = p_wbbh-dldnr.

    perform get_version_type using p_wbbh-knzvv
                             changing p_outtab_line-vertxt.

    p_node_text          = p_wbbh-versnr.

  endif.
  if p_level >= 4.

    p_outtab_line-type   = division_node.
    p_outtab_line-abttx  = p_wbbl-abttx.
    p_outtab_line-bsort  = p_wbbl-bsort.

    if p_wbbl-bsort = c_sort_by_department.

      p_outtab_line-lbtxt   = p_wbbl-lbtxt.

    elseif p_wbbl-bsort = c_sort_by_supplier or
           p_wbbl-bsort = c_sort_by_supplier_mgroup.
      select single cvp_xblck from lfa1 into @data(lv_blck) where lifnr = @p_wbbl-lifnr.
      if lv_blck is initial.
        p_outtab_line-lifnr   = p_wbbl-lifnr.
      else.
        p_outtab_line-lifnr = '###########'.
        message s220(wb).
      endif.

    elseif p_wbbl-bsort = c_sort_by_dep_mgroup.

      p_outtab_line-abtnr   = p_wbbl-abtnr.

    endif.

    p_node_text           = p_wbbl-abttx.

  endif.
  if p_level = 5.

    p_outtab_line-type = group_node.

    if p_wbbl-bsort = c_sort_by_supplier.

      p_outtab_line-ltsnr   = p_wbbl-ltsnr.

      concatenate p_wbbl-ltsnr p_wbbl-ltext into p_node_text
          separated by space.
    else.

      p_outtab_line-bbgno   = p_wbbl-bbgno.

      concatenate p_wbbl-bbgno p_wbbl-ltext into p_node_text
          separated by space.
    endif.

    p_outtab_line-ltext     = p_wbbl-ltext.

    p_outtab_line-pgnum     = p_wbbl-pgnum.

    if add_info = x.

      if p_wbbl-bsort = c_sort_by_layout_group or
           p_wbbl-bsort = c_sort_by_department.

        p_outtab_line-laygr     = p_wbbl-laygr.

      endif.

      if p_wbbl-bsort = c_sort_by_layout_group.

        p_outtab_line-layvr     = p_wbbl-layvr.
        p_outtab_line-lnglv     = p_wbbl-lnglv.

      endif.

    endif.
  endif.
endform.                    "FILL_DATAROW
*&---------------------------------------------------------------------*
*&      Form  set_itemlayout
*&---------------------------------------------------------------------*
*       This form set item's display settings
*----------------------------------------------------------------------*
form set_itemlayout using p_node   type ref to cl_salv_node
                          p_level  type i
                          p_line   type wbbh_wbbl.

  data: item        type ref to cl_salv_item.
  data: lt_textpool type table of textpool.
  data: ls_textpool type textpool.
  data: lv_text     type salv_de_tree_image.

  try.
      if p_level <> 1.

*       Enable hotspot
        item = p_node->get_hierarchy_item( ).
        item->set_type( if_salv_c_item_type=>link ).

      endif.

      if p_level = 2.

        if p_line-knzvv = c_version_type_change.
*         Read texts from textpool
          read textpool 'SAPLWBBE' into lt_textpool language sy-langu.

          if sy-subrc = 0.

*           Selecting a specific textpool
            read table lt_textpool into ls_textpool
              with key key = '040'.

            if sy-subrc = 0.


              concatenate '@39\Q' ls_textpool-entry ' @'
                into       lv_text.
              item = p_node->get_item( 'BBTYP' ).

*             Setting icon
              item->set_icon( lv_text ).
*             Enable hotspot
              item->set_type( if_salv_c_item_type=>link ).

            endif.

          endif.

        endif.


      endif.

*     Enable hotspot or setting item invisible for
*     three items: VERSNR, DLDNR, BBGNO
      item = p_node->get_item( 'VERSNR' ).

      if p_line-versnr is not initial.

        item->set_type( if_salv_c_item_type=>link ).

      else.

        item->set_visible( abap_false ).

      endif.

      item = p_node->get_item( 'DLDNR' ).

      if p_line-dldnr is not initial.

        item->set_type( if_salv_c_item_type=>link ).

      else.

        item->set_visible( abap_false ).

      endif.


      item = p_node->get_item( 'BBGNO' ).

      if p_line-bbgno is not initial.

        item->set_type( if_salv_c_item_type=>link ).

      else.

        item->set_visible( abap_false ).

      endif.
    catch cx_salv_msg.                                  "#EC NO_HANDLER
  endtry.
endform.                    " set_itemlayout

*&---------------------------------------------------------------------*
*&      Form register_events
*&---------------------------------------------------------------------*

form register_events using pg_alv_tree type ref to cl_salv_tree.

  data: lr_events        type ref to cl_salv_events_tree,
        l_event_receiver type ref to lcl_tree_event_receiver.

  lr_events = pg_alv_tree->get_event( ).

* Register events on backend (ABAP Objects event handling)
  create object l_event_receiver.
  set handler l_event_receiver->handle_double_click for lr_events.
  set handler l_event_receiver->handle_link_click for lr_events.
  set handler l_event_receiver->expand_node for lr_events.
  set handler l_event_receiver->on_user_command for lr_events.

endform.                    "register_events

*&---------------------------------------------------------------------*
*&      Form  fieldcat_alv_build
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_FIELDCAT  text
*----------------------------------------------------------------------*
form fieldcat_alv_build using pg_alv_tree type ref to cl_salv_tree.

  field-symbols: <col> type salv_s_column_ref.

  data: lt_columns type salv_t_column_ref,
        name       type lvc_fname,
        lr_columns type ref to cl_salv_columns.

  lr_columns = pg_alv_tree->get_columns( ).


* Set column position
  perform set_column_position using lr_columns.


  lt_columns = lr_columns->get( ).


  loop at lt_columns assigning <col>.
    name = <col>-r_column->get_columnname( ).

    if    name <> 'LOCNR' and
          name <> 'NAME1' and
          name <> 'BBTYP' and
          name <> 'BBTEXT' and
          name <> 'VERSNR' and
          name <> 'VERSAB' and
          name <> 'VERSBI' and
          name <> 'VERTXT' and
          name <> 'DLDNR' and

          name <> 'ABTTX' and
          name <> 'LBTXT' and
          name <> 'LIFNR' and
          name <> 'ABTNR' and

          name <> 'LTSNR' and
          name <> 'BBGNO' and

          name <> 'LTEXT' and

          name <> 'PGNUM' and

          name <> 'LNGLV' and
          name <> 'LAYVR' and
          name <> 'LAYGR'.

*     Disabling unwanted fields
      <col>-r_column->set_visible( abap_false ).
      <col>-r_column->set_technical( abap_true ).

    else.

*     display leading zeros for 3 fields
      if name  = 'VERSNR' or
         name  = 'DLDNR' or
         name  = 'BBGNO'.

        <col>-r_column->set_leading_zero( if_salv_c_bool_sap=>true ).

      endif.

*     Center data in this column
      if name  = 'BBTYP'.
        <col>-r_column->set_alignment( if_salv_c_alignment=>centered ).
      endif.

*     Set column width optimized
      <col>-r_column->set_optimized( abap_true ).
    endif.


  endloop.

endform.                    " fieldcat_alv_build

*&---------------------------------------------------------------------*
*&      Form  set_column_position
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
form set_column_position using p_lr_columns type ref to cl_salv_columns.

  p_lr_columns->set_column_position( columnname = 'LOCNR'
                                   position   = 1 ).
  p_lr_columns->set_column_position( columnname = 'NAME1'
                                   position   = 2 ).
  p_lr_columns->set_column_position( columnname = 'BBTYP'
                                   position   = 3 ).
  p_lr_columns->set_column_position( columnname = 'BBTEXT'
                                   position   = 4 ).
  p_lr_columns->set_column_position( columnname = 'VERSNR'
                                   position   = 5 ).
  p_lr_columns->set_column_position( columnname = 'VERSAB'
                                   position   = 6 ).
  p_lr_columns->set_column_position( columnname = 'VERSBI'
                                   position   = 7 ).
  p_lr_columns->set_column_position( columnname = 'VERTXT'
                                   position   = 8 ).
  p_lr_columns->set_column_position( columnname = 'DLDNR'
                                   position   = 9 ).
  p_lr_columns->set_column_position( columnname = 'ABTTX'
                                   position   = 10 ).
  p_lr_columns->set_column_position( columnname = 'LIFNR'
                                   position   = 11 ).
  p_lr_columns->set_column_position( columnname = 'LBTXT'
                                   position   = 12 ).
  p_lr_columns->set_column_position( columnname = 'ABTNR'
                                   position   = 13 ).
  p_lr_columns->set_column_position( columnname = 'BBGNO'
                                   position   = 14 ).
  p_lr_columns->set_column_position( columnname = 'LTSNR'
                                   position   = 15 ).
  p_lr_columns->set_column_position( columnname = 'LTEXT'
                                   position   = 16 ).
  p_lr_columns->set_column_position( columnname = 'PGNUM'
                                   position   = 17 ).
  p_lr_columns->set_column_position( columnname = 'LAYGR'
                                   position   = 18 ).
  p_lr_columns->set_column_position( columnname = 'LAYVR'
                                   position   = 19 ).
  p_lr_columns->set_column_position( columnname = 'LNGLV'
                                   position   = 20 ).

endform.                    "set_column_position

*&---------------------------------------------------------------------*
*&      Form  build_hierarchy_header
*&---------------------------------------------------------------------*
*       This form sets hierarchy settings
*----------------------------------------------------------------------*
form build_hierarchy_header using pg_alv_tree type ref to cl_salv_tree.

* build the hierarchy header
  data: settings type ref to cl_salv_tree_settings.
  data: title type salv_de_tree_text.


  settings = pg_alv_tree->get_tree_settings( ).
  settings->set_hierarchy_header( text-031 ).
  settings->set_hierarchy_tooltip( text-031 ).

  settings->set_hierarchy_size( 45 ).


  title = sy-title.
  settings->set_header( title ).


endform.                    " build_hierarchy_header


*&---------------------------------------------------------------------*
*&      Form  SET_STATUS
*&---------------------------------------------------------------------*
form set_status using pg_alv_tree type ref to cl_salv_tree..

  data: lr_functions type ref to cl_salv_functions_tree.

* activate ALV generic Functions
  pg_alv_tree->set_screen_status(
    pfstatus      =  'TREESHOW'
    report        =  sy-repid
    set_functions = g_alv_tree->c_functions_default ).

  lr_functions =   g_alv_tree->get_functions( ).
*   Activate expand custom function
  try.
      lr_functions->add_function(
        name     = '&EXPAND2'
        tooltip  = space
        position = if_salv_c_function_position=>right_of_salv_functions
         ).
    catch cx_salv_wrong_call cx_salv_existing.          "#EC NO_HANDLER
  endtry.
endform.                    " SET_STATUS

*&---------------------------------------------------------------------*
*&      Form  set_selections
*&---------------------------------------------------------------------*
*       This form return the key of the node selected. If a column is
*       also selected, the column's name is returned.
*----------------------------------------------------------------------*
form set_selections changing  node_key   type salv_de_node_key
                              columnname type lvc_fname.

* get the currently selected item
  data: lr_sel     type ref to cl_salv_selections_tree,
        lr_item    type ref to cl_salv_item,
        ls_node    type salv_s_nodes,
        lt_node    type salv_t_nodes,
        lv_nb_node type n.

* Get selection object
  lr_sel = g_alv_tree->get_selections( ).

* Try to get the item selected
  lr_item = lr_sel->get_selected_item( ).

* If there was a item selected
  if lr_item is not initial.
*   Return column name and node key
    columnname = lr_item->get_columnname( ).
    ls_node-node = lr_item->get_node( ).
    node_key  = ls_node-node->get_key( ).

  else. "If there was no items selected

*   Get nodes selected
    lt_node = lr_sel->get_selected_nodes( ).

*   Check how many nodes are selected
    describe table lt_node lines lv_nb_node.

*   When there's not exactly one node selected, raised messages
    if lv_nb_node = 0.

      message i000(0k) with text-033. "No nodes selected
      exit.

    elseif lv_nb_node > 1.

      message i000(0k) with text-034. "Select only one node
      exit.

    endif.

*   Return node key
    read table lt_node index 1 into ls_node.
    node_key   = ls_node-key.

  endif.

endform.                    " set_selections

*&---------------------------------------------------------------------
*
*&      Form  GET_NODE
*&---------------------------------------------------------------------
*
*       This form return the node object corresponding to the passed
*       node key.
*----------------------------------------------------------------------

form get_node using node_key type salv_de_node_key
              changing node type ref to cl_salv_node.

  data: lr_nodes type ref to cl_salv_nodes.

* Get all nodes object
  lr_nodes = g_alv_tree->get_nodes( ).

  try.
*   Get the node object
      node    = lr_nodes->get_node( node_key ).
    catch cx_salv_msg.                                  "#EC NO_HANDLER
  endtry.

endform. "GET_NODE

*&---------------------------------------------------------------------*
*&      Form  DELETE_SIBLING
*&---------------------------------------------------------------------*
*       This form deletes all sibling nodes of passed
*        node (PLR_CURRENT_NODE)
*----------------------------------------------------------------------*

form delete_sibling  using   plr_current_node type ref to cl_salv_node.

  data: lr_next_node type ref to cl_salv_node.

* Delete previous sibling nodes
  do.
    try.
        lr_next_node = plr_current_node->get_previous_sibling( )..
        lr_next_node->delete( ).
      catch cx_salv_msg cx_sy_ref_is_initial.
        exit.
    endtry.
  enddo.

* Delete next sibling nodes
  do.
    try.
        lr_next_node = plr_current_node->get_next_sibling( ).
        lr_next_node->delete( ).
      catch cx_salv_msg cx_sy_ref_is_initial.
        exit.
    endtry.
  enddo.

endform.                    " DELETE_SIBLING
*&---------------------------------------------------------------------*
*&      Form  DELETE_PARENT_NODES
*&---------------------------------------------------------------------*
*       This subroutine deletes all nodes at a higher level than node
*      PLR_CURRENT_NODE (Parent, parent's siblings, grandparent, ....)
*----------------------------------------------------------------------*
*      -->P_LR_CURRENT_NODE  text
*----------------------------------------------------------------------*
form delete_parent_nodes  using plr_current_node type ref to
                              cl_salv_node.

  data: lr_parent_node type ref to cl_salv_node.
  data: node_key       type salv_de_node_key.
  data: l_text         type string.
  data: l_old_path     type string.

* Retreive the direct parent
  try.
      lr_parent_node = plr_current_node->get_parent( ).
    catch cx_salv_msg cx_sy_ref_is_initial.             "#EC NO_HANDLER
      exit.
  endtry.

* Save focus path when it's already set
  if g_focus_path is not initial.
    l_old_path =  g_focus_path.
    clear g_focus_path.
  endif.

  g_focus_path = plr_current_node->get_text( ).

  do.


    l_text = lr_parent_node->get_text( ).
    if l_text is not initial.
      concatenate l_text g_focus_path
        into g_focus_path separated by '-'.
    endif.

*   delete the parent's sibling node
    perform delete_sibling using lr_parent_node.

    try.
        node_key = lr_parent_node->get_key( ).

*       Do not delete Virtual root
        if node_key = '&VIRTUALROOT'.
          exit.
        endif.

*       Move the parent node to the same level as current node to
*       allow to delete it
        plr_current_node->move( related_node = node_key
                 relationship = if_salv_c_node_relation=>last_sibling ).

*       delete the parent node
        lr_parent_node->delete( ).
      catch cx_salv_msg cx_sy_ref_is_initial.
        exit.
    endtry.

*   retreive the next parent node
    try.
        lr_parent_node  = plr_current_node->get_parent( ).
      catch cx_salv_msg cx_sy_ref_is_initial.
        exit.
    endtry.

  enddo.

* When focus path was already initiated
  if l_old_path is not initial.

*   Include old focus path
    search g_focus_path for '-'.
    add 1 to sy-fdpos.
    shift g_focus_path by sy-fdpos places.

    concatenate l_old_path g_focus_path
      into g_focus_path separated by '-'.

  else.

    concatenate text-031 g_focus_path
    into g_focus_path separated by '-'.

  endif.



endform.                    " DELETE_PARENT_NODES

*&---------------------------------------------------------------------*
*&      Form  SET_FOCUS_PATH
*&---------------------------------------------------------------------*
*       This form diplay focus path in top of the list using global
*        variable g_focus_path
*----------------------------------------------------------------------*

form set_focus_path .

  data: lr_content type ref to cl_salv_form_header_info.


  create object lr_content
    exporting
      text    = g_focus_path
      tooltip = g_focus_path.

  g_alv_tree->set_top_of_list( lr_content ).


endform.                    " SET_FOCUS_PATH

*&---------------------------------------------------------------------*
*&      Form  FILL_SUBTREE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TRIGGER_NODE  text
*----------------------------------------------------------------------*
form fill_subtree  using    p_trigger_node type wbbh_wbbl
                            p_parent_nodekey type salv_de_node_key.

* Tables and structures
  data: lt_subtreewbbh type standard table of wbbh,
*        lt_subtreeWBBL TYPE STANDARD TABLE OF WBBL,
        ls_wbbh        type wbbh.
*        ls_wbbl        TYPE WBBL.


  field-symbols:
*                <fs_wbbl>     TYPE WBBL,
*                 <fs_wbbl_old> TYPE WBBL,
    <fs_wbbh>     type wbbh,
    <fs_wbbh_old> type wbbh.


  data:   nbr         type i.
  data    no_subnodes type c value space.
  data:   lr_node     type ref to cl_salv_node.

* Which is the current node's level
  case p_trigger_node-type.

*   trigger by 1st level
    when 'STOR'.

      assign ls_wbbh to <fs_wbbh_old>.

      loop at g_t_wbbh assigning <fs_wbbh>
                    where locnr = p_trigger_node-locnr.
        if <fs_wbbh>-bbtyp <> <fs_wbbh_old>-bbtyp.

          append <fs_wbbh> to lt_subtreewbbh.
          <fs_wbbh_old> = <fs_wbbh>.

        endif.
      endloop.


      describe table lt_subtreewbbh lines nbr.
*     When no subnode has been found
      if nbr = 0.
        no_subnodes = x.
      else.
*       Add found nodes to tree
        perform add_nodes tables lt_subtreewbbh
        using p_parent_nodekey 2.
      endif.

*   trigger by 2nd level
    when 'REPL'.

      assign ls_wbbh to <fs_wbbh_old>.

      loop at g_t_wbbh assigning <fs_wbbh>
                    where locnr = p_trigger_node-locnr and
                          bbtyp = p_trigger_node-bbtyp.

        if <fs_wbbh>-versnr <> <fs_wbbh_old>-versnr.

          append <fs_wbbh> to lt_subtreewbbh.
          <fs_wbbh_old> = <fs_wbbh>.

        endif.

      endloop.

      describe table lt_subtreewbbh lines nbr.
*     When no subnode has been found
      if nbr = 0.
        no_subnodes = x.
      else.
*       Add found nodes to tree
        perform add_nodes tables lt_subtreewbbh
        using p_parent_nodekey 3.
      endif.

*   trigger by 3rd level
    when 'VERS'.

*     Insert 4th and 5th levels nodes
      perform insert_lastlevels_nodes using p_parent_nodekey
                                            p_trigger_node.


*     Check is there's any subnodes
      read table g_t_wbbl with key
                        locnr       = p_trigger_node-locnr
                        bbtyp       = p_trigger_node-bbtyp
                        versnr      = p_trigger_node-versnr
                       transporting no fields.
      if sy-subrc <> 0.
        no_subnodes = x.
      endif.

  endcase.

* When there's no subnodes
  if no_subnodes = x.

    try.
*       Remove expand symbol
        lr_node = gr_nodes->get_node( p_parent_nodekey ).
        lr_node->set_expander( abap_false ).
      catch cx_salv_msg.                                "#EC NO_HANDLER
    endtry.
  endif.

endform.                    " FILL_SUBTREE

*&---------------------------------------------------------------------*
*&      Form  ADD_NODES
*&---------------------------------------------------------------------*
*       This form calls form INSERT_NODE for each line of passed table
*        P_LT_SUBTREEWBBH.
*----------------------------------------------------------------------*

form add_nodes  tables   p_lt_subtreewbbh structure wbbh
                using    p_parent_nodekey type salv_de_node_key
                         p_level          type i.

  field-symbols: <fs_wbbh> type wbbh.

  data: ls_dummy type wbbl.

  data: new_node type salv_de_node_key.


  loop at p_lt_subtreewbbh assigning <fs_wbbh>.

    perform insert_node   using   <fs_wbbh>
                              ls_dummy
                              p_level
                              p_parent_nodekey
                              cl_gui_column_tree=>relat_last_child
                     changing new_node.

  endloop.


endform.                    " ADD_NODES