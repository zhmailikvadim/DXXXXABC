*&---------------------------------------------------------------------*
*&  Include           BSHOWF03_ALV
*&---------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  init_tree
*&---------------------------------------------------------------------*
*       This method initiates tree settings (header infos, events, field
*         catalog, screen status)
*----------------------------------------------------------------------*

FORM init_tree USING p_alv_tree TYPE REF TO CL_SALV_TREE.



  PERFORM build_hierarchy_header USING p_alv_tree .

  PERFORM register_events USING p_alv_tree .
  PERFORM fieldcat_alv_build USING p_alv_tree .
  PERFORM SET_STATUS USING p_alv_tree .

* retreive all nodes object
  gr_nodes = p_alv_tree->get_nodes( ).

ENDFORM.                    "init_tree

*&---------------------------------------------------------------------*
*&      Form  TREE_BUILD
*&---------------------------------------------------------------------*
*&      This form inserts first level nodes.
*&---------------------------------------------------------------------*
FORM TREE_BUILD .

  FIELD-SYMBOLS: <fs_wbbh> TYPE WBBH.

  DATA: dummy_wa_wbbl TYPE WBBL,
        lv_old_locnr  TYPE LOCNR,
        NEW_KEY       TYPE LVC_NKEY.


  LOOP AT G_T_WBBH ASSIGNING <fs_wbbh>.

    IF <fs_wbbh>-LOCNR <> lv_old_locnr.

      PERFORM INSERT_NODE USING <fs_wbbh>
                                dummy_wa_wbbl
                                1
                                ''
                                cl_gui_column_tree=>relat_last_child
                         CHANGING NEW_KEY.

      lv_old_locnr =  <fs_wbbh>-LOCNR.
    ENDIF.

  ENDLOOP.

ENDFORM.                    " TREE_BUILD


*&---------------------------------------------------------------------*
*&      Form  SET_FOCUS
*&---------------------------------------------------------------------*
*       This form transforms the tree in order to set the trigger node
*        as root.
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*      -->P_TRIGGER_NODE  text
*----------------------------------------------------------------------*
FORM SET_FOCUS  USING    P_TRIGGER_NODE.


  PERFORM DELETE_SIBLING USING P_TRIGGER_NODE.

  PERFORM DELETE_PARENT_NODES USING P_TRIGGER_NODE.

  PERFORM SET_FOCUS_PATH.

ENDFORM.                    " SET_FOCUS
*&---------------------------------------------------------------------*
*&      Form  RESET_FOCUS
*&---------------------------------------------------------------------*
*       This form sets the tree as at first display
*----------------------------------------------------------------------*

FORM RESET_FOCUS .

  TRY.
    gr_nodes->delete_all( ).
  CATCH CX_SALV_ERROR. "#EC NO_HANDLER
  ENDTRY.

* Set first level nodes
  PERFORM TREE_BUILD.

* Clear focus patch display
  clear g_focus_path.
  PERFORM SET_FOCUS_PATH.

ENDFORM.                    " RESET_FOCUS

*&---------------------------------------------------------------------*
*&      Form  SELECT_NEXT_NODE
*&---------------------------------------------------------------------*
*       This form sets selection to the next sibling node
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*      -->P_LR_CURRENT_NODE  text
*----------------------------------------------------------------------*
FORM SELECT_NEXT_NODE  USING
                        P_LR_CURRENT_NODE TYPE REF TO CL_SALV_NODE
                        P_LR_EVENTS       TYPE REF TO
                                              lcl_tree_event_receiver.

  DATA: lr_next_node TYPE REF TO CL_SALV_NODE.
  DATA: lr_sel       TYPE REF TO CL_SALV_SELECTIONS_TREE.
  DATA: lr_item      TYPE REF TO CL_SALV_ITEM.
  DATA: lv_next_node_key
                     TYPE SALV_DE_NODE_KEY.

  DATA: lv_expanded  TYPE C.

* Collapse current node
  p_lr_current_node->collapse( ).

* Get and expand next node
  TRY.
    lr_next_node = p_lr_current_node->GET_NEXT_SIBLING( ).

    PERFORM NODE_EXPANDED USING lr_next_node
                          CHANGING lv_expanded.

    IF lv_expanded = T_NO.

      lv_next_node_key = lr_next_node->get_key( ).

      CALL METHOD P_LR_EVENTS->EXPAND_NODE
              EXPORTING NODE_KEY = lv_next_node_key.
    ENDIF.

    lr_next_node->expand( LEVEL = 1 ).

*   Collapse next node's children
    PERFORM COLLAPSE_ALL_CHILDREN USING lr_next_node.

*   Get selection object
    lr_sel = g_alv_tree->get_selections( ).

*   Select next sibling node
    lr_item =  lr_next_node->GET_HIERARCHY_ITEM( ).
    lr_sel->set_selected_item( lr_item ).

  CATCH CX_SALV_MSG. "#EC NO_HANDLER
  ENDTRY.



ENDFORM.                    " SELECT_NEXT_NODE

*&---------------------------------------------------------------------*
*&      Form  SELECT_PREVIOUS_NODE
*&---------------------------------------------------------------------*
*       This form sets selection to the next sibling node
*----------------------------------------------------------------------*
*      -->P_NODE_KEY  text
*      -->P_LR_CURRENT_NODE  text
*----------------------------------------------------------------------*
FORM SELECT_PREVIOUS_NODE USING
                        P_LR_CURRENT_NODE TYPE REF TO CL_SALV_NODE
                        P_LR_EVENTS       TYPE REF TO
                                              lcl_tree_event_receiver.

  DATA: lr_next_node TYPE REF TO CL_SALV_NODE.
  DATA: lr_sel       TYPE REF TO CL_SALV_SELECTIONS_TREE.
  DATA: lr_item      TYPE REF TO CL_SALV_ITEM.
  DATA: lv_next_node_key
                     TYPE SALV_DE_NODE_KEY.

  DATA: lv_expanded  TYPE C.

  check p_lr_current_node is not initial.

* Collapse current node
  p_lr_current_node->collapse( ).

* Get and expand previous node
  TRY.
    lr_next_node = p_lr_current_node->GET_PREVIOUS_SIBLING( ).

    PERFORM NODE_EXPANDED USING lr_next_node
                          CHANGING lv_expanded.

    IF lv_expanded = T_NO.

      lv_next_node_key = lr_next_node->get_key( ).

      CALL METHOD P_LR_EVENTS->EXPAND_NODE
              EXPORTING NODE_KEY = lv_next_node_key.
    ENDIF.

    lr_next_node->expand( LEVEL = 1 ).

*   Collapse next node's children
    PERFORM COLLAPSE_ALL_CHILDREN USING lr_next_node.

*   Get selection object
    lr_sel = g_alv_tree->get_selections( ).

*   Select previous sibling node
    lr_item =  lr_next_node->GET_HIERARCHY_ITEM( ).
    lr_sel->set_selected_item( lr_item ).

  CATCH CX_SALV_MSG. "#EC NO_HANDLER
  ENDTRY.




ENDFORM.                    " SELECT_PREVIOUS_NODE

*&---------------------------------------------------------------------*
*&      Form  INSERT_LASTLEVELS_NODES
*&---------------------------------------------------------------------*
*       This form inserts 4th and 5th levels nodes related to 3rd level
*        node: P_PARENT_NODEKEY
*----------------------------------------------------------------------*
*      -->P_P_PARENT_NODEKEY  text
*      -->P_P_TRIGGER_NODE  text
*----------------------------------------------------------------------*
FORM INSERT_LASTLEVELS_NODES  USING    P_PARENT_NODEKEY
                                       P_TRIGGER_NODE TYPE WBBH_WBBL.

  DATA:  NEW_KEY_L3       TYPE LVC_NKEY,
         NEW_KEY_L4       TYPE LVC_NKEY,
         NEW_KEY_L5       TYPE LVC_NKEY.

  DATA: NEW_VERSION   LIKE WDL_FLAG-XFLAG.
  DATA: ls_wbbh        TYPE WBBH.
  DATA: ls_wbbl        TYPE WBBL.

  FIELD-SYMBOLS: <fs_wbbl> TYPE WBBL,
                 <fs_wbbl_old> TYPE WBBL.

  NEW_KEY_L3  = P_PARENT_NODEKEY.

  MOVE-CORRESPONDING P_TRIGGER_NODE TO ls_wbbh.
  ASSIGN ls_wbbl to <fs_wbbl_old>.

  LOOP AT G_T_WBBL ASSIGNING <fs_wbbl>
               WHERE  LOCNR       = P_TRIGGER_NODE-LOCNR
               AND    BBTYP       = P_TRIGGER_NODE-BBTYP
               AND    VERSNR      = P_TRIGGER_NODE-VERSNR.

*   sorted in two steps
    IF <fs_wbbl>-BSORT = C_SORT_BY_DEPARTMENT  OR
       <fs_wbbl>-BSORT = C_SORT_BY_DEP_MGROUP  OR
       <fs_wbbl>-BSORT = C_SORT_BY_SUPPLIER    OR
       <fs_wbbl>-BSORT = C_SORT_BY_SUPPLIER_MGROUP.

*       department nodes
        IF ( <fs_wbbl>-ABTNR <> <fs_wbbl_old>-ABTNR      AND
           ( <fs_wbbl>-BSORT = C_SORT_BY_DEPARTMENT OR
             <fs_wbbl>-BSORT = C_SORT_BY_DEP_MGROUP   )  ) OR
           ( <fs_wbbl>-LIFNR <> <fs_wbbl_old>-LIFNR  AND
             <fs_wbbl>-BSORT = C_SORT_BY_SUPPLIER           ) OR
           ( <fs_wbbl>-LIFNR <> <fs_wbbl_old>-LIFNR  AND
             <fs_wbbl>-BSORT = C_SORT_BY_SUPPLIER_MGROUP    ) OR
           NEW_VERSION = X.

           PERFORM INSERT_NODE USING   ls_wbbh
                                       <fs_wbbl>
                                        4
                                        NEW_KEY_L3
                                  cl_gui_column_tree=>relat_last_child
                         CHANGING       NEW_KEY_L4.

           CLEAR NEW_VERSION.
         ENDIF.

      ENDIF.

*     group nodes
      IF <fs_wbbl>-BBGNO <> <fs_wbbl_old>-BBGNO.

        IF NEW_KEY_L3 > NEW_KEY_L4.
          "There's no departement/vendor node

*       use version node as parent for groupe node
          NEW_KEY_L4 = NEW_KEY_L3.
        ENDIF.

        PERFORM INSERT_NODE USING   ls_wbbh
                                     <fs_wbbl>
                                      5
                                      NEW_KEY_L4
                                 cl_gui_column_tree=>relat_last_child
                    CHANGING       NEW_KEY_L5.
       ENDIF.


       ASSIGN <fs_wbbl> TO <fs_wbbl_old>.

      ENDLOOP.
ENDFORM.                    " INSERT_LASTLEVELS_NODES
*&---------------------------------------------------------------------*
*&      Form  NODE_HAS_CHILDREN
*&---------------------------------------------------------------------*
*       This method checks if the node passed in parameter (PR_NODE)
*        has already been expanded.
*----------------------------------------------------------------------*
*      -->PR_NODE        Node to check
*      <--P_LV_EXPANDED  Flag set if the node has already been expanded
*----------------------------------------------------------------------*
FORM NODE_EXPANDED  USING    PR_NODE TYPE REF TO CL_SALV_NODE
                    CHANGING P_LV_EXPANDED.

  DATA: LT_CHILDREN TYPE SALV_T_NODES.

  IF PR_NODE->HAS_EXPANDER( ) EQ T_YES.

  TRY.
    lt_children = PR_NODE->GET_CHILDREN( ).
    IF lt_children[] IS NOT INITIAL AND lt_children IS NOT INITIAL.
*   There is at least one child node for PR_NODE
      P_LV_EXPANDED = T_YES.
    ENDIF.
  CATCH CX_SALV_MSG.
*   There is no children for PR_NODE and it has a expander
    P_LV_EXPANDED = T_NO.
  ENDTRY.
  ELSE.
*   Node has no expander, means that we've already look for subnode and
*    we've found none. Thus, we shouldn't look for children again:
    P_LV_EXPANDED = T_YES.
  ENDIF.
ENDFORM.                    " NODE_HAS_CHILDREN

*&---------------------------------------------------------------------*
*&      Form COLLAPSE_ALL_CHILDREN
*&---------------------------------------------------------------------*
*       This form collapse all children of the node passed in parameter.
*----------------------------------------------------------------------*
*      -->PR_NODE        Node
*----------------------------------------------------------------------*
FORM COLLAPSE_ALL_CHILDREN USING PR_NODE TYPE REF TO CL_SALV_NODE.
  DATA:           lt_subtree   TYPE SALV_T_NODES.
  FIELD-SYMBOLS:  <fs_node> LIKE LINE OF lt_subtree.

  TRY.
    lt_subtree = PR_NODE->GET_CHILDREN( ).

    LOOP AT lt_subtree ASSIGNING <fs_node>.

*      IF <fs_node>-NODE->HAS_EXPANDER( ) = abap_true.
        <fs_node>-NODE->COLLAPSE( ).
*      ENDIF.

    ENDLOOP.
  CATCH CX_SALV_MSG.
  ENDTRY.
ENDFORM. "COLLAPSE_ALL_CHILDREN