*&---------------------------------------------------------------------*
*&  Include           FV50WF0W_ALV
*&---------------------------------------------------------------------*
*----------------------------------------------------------------------*
***INCLUDE FV50W_WAT_PROTOKOLL_ALVF01 .
*----------------------------------------------------------------------*

***********************************************************************
******************** FORMS ********************************************
***********************************************************************
*--------------------------------------------------------------------
* FORM log_init.
*--------------------------------------------------------------------
FORM LOG_INIT
      CHANGING  L_LOG_HANDLE TYPE BALLOGHNDL.
  DATA:    LS_LOG      TYPE BAL_S_LOG.

* create an initial log file
  LS_LOG-EXTNUMBER  = 'Warenbewegung Protokoll'(001).

  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      I_S_LOG      = LS_LOG
    IMPORTING
      E_LOG_HANDLE = L_LOG_HANDLE
    EXCEPTIONS
      OTHERS       = 1.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    "log_init

*--------------------------------------------------------------------
* FORM log_contxt_add.
*--------------------------------------------------------------------
FORM LOG_CONTXT_ADD
    USING WAT-MSGTY
          WAT-MSGID
          WAT-MSGNO
          WAT-POSNR
          WAT-MATNR
          WAT-ARKTX
          WAT-LFIMG
          WAT-VRKME
          WAT-CHARG.

  DATA:
*      l_log_handle    TYPE balloghndl,
      LS_MSG          TYPE BAL_S_MSG,
      LS_MSG_DEFAULTS TYPE BAL_S_MDEF.


  DATA: LS_ERRPROT TYPE LESHP_WAT_PROT.

  FIELD-SYMBOLS:
     <L_CONTEXT> TYPE C.

* read current defaults
  CALL FUNCTION 'BAL_GLB_MSG_DEFAULTS_GET'                  "#EC
    IMPORTING
      E_S_MSG_DEFAULTS = LS_MSG_DEFAULTS
    EXCEPTIONS
      OTHERS           = 0.

* add voucher data as context to message:
  LS_ERRPROT-MSGTY = WAT-MSGTY.
  LS_ERRPROT-MSGID = WAT-MSGID.
  LS_ERRPROT-MSGNO = WAT-MSGNO.

  LS_ERRPROT-POSNR = WAT-POSNR.
  LS_ERRPROT-MATNR = WAT-MATNR.
  LS_ERRPROT-ARKTX = WAT-ARKTX.
  LS_ERRPROT-LFIMG = WAT-LFIMG.
  LS_ERRPROT-VRKME = WAT-VRKME.
  LS_ERRPROT-CHARG = WAT-CHARG.

  LS_MSG_DEFAULTS-CONTEXT-TABNAME = 'LESHP_WAT_PROT'.
* ls_msg-context-value = ls_errprot.
  ASSIGN LS_ERRPROT TO <L_CONTEXT> CASTING.
  LS_MSG_DEFAULTS-CONTEXT-VALUE = <L_CONTEXT>.

* set current defaults
  CALL FUNCTION 'BAL_GLB_MSG_DEFAULTS_SET'
    EXPORTING
      I_S_MSG_DEFAULTS = LS_MSG_DEFAULTS
    EXCEPTIONS
      OTHERS           = 0.
  .
  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    "log_contxt_add

*--------------------------------------------------------------------
* FORM log_msg_add.
*--------------------------------------------------------------------
FORM LOG_MSG_ADD
    USING L_LOG_HANDLE
          LS_MSG.

  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      I_LOG_HANDLE = L_LOG_HANDLE
      I_S_MSG      = LS_MSG
    EXCEPTIONS
      OTHERS       = 1.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


ENDFORM.                    "log_msg_add

*--------------------------------------------------------------------
* FORM log_show
*--------------------------------------------------------------------
FORM LOG_SHOW
        USING L_LOG_HANDLE.

  DATA: LS_DISPLAY_PROFILE TYPE BAL_S_PROF,
        LT_LOG_HANDLE      TYPE BAL_T_LOGH.

* determine display profile
  PERFORM LOG_DISPLAY_PROFILE
            CHANGING
               LS_DISPLAY_PROFILE.

* use grid for display
  LS_DISPLAY_PROFILE-USE_GRID = 'X'.

* set report to allow saving of variants
  LS_DISPLAY_PROFILE-DISVARIANT-REPORT = SY-REPID.
* optimize column width
  LS_DISPLAY_PROFILE-CWIDTH_OPT = 'X'.

* display log file only with handle
  APPEND L_LOG_HANDLE TO LT_LOG_HANDLE.

* call display function module
  CALL FUNCTION 'BAL_DSP_LOG_DISPLAY'
    EXPORTING
      I_S_DISPLAY_PROFILE = LS_DISPLAY_PROFILE
      I_T_LOG_HANDLE      = LT_LOG_HANDLE
    EXCEPTIONS
      OTHERS              = 1.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
             WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    "log_show

*--------------------------------------------------------------------
* FORM log_display_profile
*--------------------------------------------------------------------
FORM LOG_DISPLAY_PROFILE
       CHANGING
         CS_DISPLAY_PROFILE     TYPE BAL_S_PROF.

  DATA:
    LS_FCAT  TYPE BAL_S_FCAT.

* get standard display profile no tree
  CALL FUNCTION 'BAL_DSP_PROFILE_NO_TREE_GET'
    IMPORTING
      E_S_DISPLAY_PROFILE = CS_DISPLAY_PROFILE
    EXCEPTIONS
      OTHERS              = 1.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.


* set title of dynpro
  CS_DISPLAY_PROFILE-TITLE     = TEXT-600.

* set report for display variants
  CS_DISPLAY_PROFILE-DISVARIANT-REPORT = SY-REPID.

* all messages should be displayed immediately
  CS_DISPLAY_PROFILE-SHOW_ALL = 'X'.

************* define structure of message table
* position number
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'POSNR'.
  LS_FCAT-OUTPUTLEN = 6.
  LS_FCAT-COL_POS   = 1.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* message number
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'MSGNO'.
  LS_FCAT-COL_POS   = 1.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* message id
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'MSGID'.
  LS_FCAT-COL_POS   = 1.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* message type
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'MSGTY'.
  LS_FCAT-COL_POS   = 1.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.

* material number
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'MATNR'.
  LS_FCAT-COL_POS   = 5.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* material description (not visible)
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'ARKTX'.
  LS_FCAT-COL_POS   = 6.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* delivered quantity in SQU (sales quantity unit)
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'LFIMG'.
  LS_FCAT-COL_POS   = 7.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* SQU (sales quantity unit)
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'VRKME'.
  LS_FCAT-COL_POS   = 8.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.
* charge number
  CLEAR LS_FCAT.
  LS_FCAT-REF_TABLE = 'LESHP_WAT_PROT'.
  LS_FCAT-REF_FIELD = 'CHARG'.
  LS_FCAT-COL_POS   = 9.
  APPEND LS_FCAT TO CS_DISPLAY_PROFILE-MESS_FCAT.


ENDFORM.                    "log_display_profile

*--------------------------------------------------------------------
* FORM log_delete
*--------------------------------------------------------------------
FORM LOG_DELETE
        USING L_LOG_HANDLE TYPE BALLOGHNDL.

  CALL FUNCTION 'BAL_LOG_REFRESH'
    EXPORTING
      I_LOG_HANDLE  = L_LOG_HANDLE
    EXCEPTIONS
      LOG_NOT_FOUND = 1
      OTHERS        = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID TYPE SY-MSGTY NUMBER SY-MSGNO
            WITH SY-MSGV1 SY-MSGV2 SY-MSGV3 SY-MSGV4.
  ENDIF.

ENDFORM.                    "log_delete