*&---------------------------------------------------------------------*
*&  Include           IEWABILLREV                                      *
*&---------------------------------------------------------------------*
TYPE-POOLS: isu01.                     "anlage

DATA: all_obj TYPE isuwa_all_objects,
      eanl_line TYPE eanl,
      eanl_tab  TYPE TABLE OF eanl,
      sdoc_tab  TYPE isuwa_ewaelocsdall,
      sdoc_line TYPE ewaelocsd_all,
      imsg      TYPE isu00_message,
      rev_dummy TYPE c.
*&--------------------------------------------------------------------*
*&      Form  check_beh_process
*&--------------------------------------------------------------------*
FORM check_beh_process USING x_process TYPE ewa_billing_process
                             x_date    TYPE abzeitsch
                       CHANGING xy_obj TYPE isuwa_order
                             xy_out    TYPE ewa_order_object
                             valid     TYPE ddbool_d.

  FIELD-SYMBOLS:
        <ls_ordertab> TYPE isuwa_order_lines,
        <ls_object> TYPE isuwa_order_object.
  DATA: leave TYPE kennzx.

  all_obj-orders = xy_obj.

  CLEAR: leave,
         eanl_tab,
         sdoc_tab.
  PERFORM check_process
              USING
                 x_process
                 xy_out
              CHANGING
                  leave.
  CHECK leave IS INITIAL.

  IF NOT cl_isu_wa_exithandler=>ref_exit_billing IS INITIAL.
    LOOP AT eanl_tab INTO eanl_line.
      CALL METHOD
        cl_isu_wa_exithandler=>ref_exit_billing->check_automatic_bill_rev
        EXPORTING
          i_date        = x_date
          i_process     = x_process
          i_anlage      = eanl_line-anlage
        IMPORTING
          e_rev_kz      = cl_isu_wa_exithandler=>rev_kz
        CHANGING
          c_obj         = all_obj
        EXCEPTIONS
          general_error = 1
          foreign_lock  = 2
          no_reversal   = 3
          no_process    = 4
          OTHERS        = 5.
      CASE sy-subrc.
        WHEN 4.
          EXIT.
        WHEN 1 OR 2 OR 3 OR 5.
          CLEAR valid.
          IF NOT sy-msgid IS INITIAL.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO rev_dummy.
          ENDIF.
          READ TABLE xy_obj-ordertab ASSIGNING <ls_ordertab>
          WITH KEY order_head-ordernr = xy_out-ordernr.
          IF sy-subrc = 0.
            READ TABLE <ls_ordertab>-order_object ASSIGNING <ls_object>
            WITH KEY pos-ordernr = xy_out-ordernr
                     pos-order_laufnr = xy_out-order_laufnr.
            IF sy-subrc = 0.
              <ls_object>-no_scat = 'X'.
              <ls_object>-rev_kz = space.
            ENDIF.
          ENDIF.
        WHEN 0.
          valid ='X'.
          READ TABLE xy_obj-ordertab ASSIGNING <ls_ordertab>
          WITH KEY order_head-ordernr = xy_out-ordernr.
          IF sy-subrc = 0.
            READ TABLE <ls_ordertab>-order_object ASSIGNING <ls_object>
            WITH KEY pos-ordernr = xy_out-ordernr
                     pos-order_laufnr = xy_out-order_laufnr.
            IF sy-subrc = 0.
              <ls_object>-no_scat = space.
              <ls_object>-rev_kz = 'X'.
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.
* allow same check for containers alocated to a sd document...
    LOOP AT sdoc_tab INTO sdoc_line.
      CALL METHOD
        cl_isu_wa_exithandler=>ref_exit_billing->check_automatic_bill_rev
        EXPORTING
          i_date        = x_date
          i_process     = x_process
          i_anlage      = eanl_line-anlage
          i_vbeln       = sdoc_line-vbeln
          i_posnr       = sdoc_line-posnr
        IMPORTING
          e_rev_kz      = cl_isu_wa_exithandler=>rev_kz
        CHANGING
          c_obj         = all_obj
        EXCEPTIONS
          general_error = 1
          foreign_lock  = 2
          no_reversal   = 3
          no_process    = 4
          OTHERS        = 5.
      CASE sy-subrc.
        WHEN 4.
          EXIT.
        WHEN 1 OR 2 OR 3 OR 5.
          CLEAR valid.
          IF NOT sy-msgid IS INITIAL.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO rev_dummy.
          ENDIF.
          READ TABLE xy_obj-ordertab ASSIGNING <ls_ordertab>
          WITH KEY order_head-ordernr = xy_out-ordernr.
          IF sy-subrc = 0.
            READ TABLE <ls_ordertab>-order_object ASSIGNING <ls_object>
            WITH KEY pos-ordernr = xy_out-ordernr
                     pos-order_laufnr = xy_out-order_laufnr.
            IF sy-subrc = 0.
              <ls_object>-no_scat = 'X'.
              <ls_object>-rev_kz = space.
            ENDIF.
          ENDIF.
        WHEN 0.
          valid ='X'.
          READ TABLE xy_obj-ordertab ASSIGNING <ls_ordertab>
          WITH KEY order_head-ordernr = xy_out-ordernr.
          IF sy-subrc = 0.
            READ TABLE <ls_ordertab>-order_object ASSIGNING <ls_object>
            WITH KEY pos-ordernr = xy_out-ordernr
                     pos-order_laufnr = xy_out-order_laufnr.
            IF sy-subrc = 0.
              <ls_object>-no_scat = space.
              <ls_object>-rev_kz = 'X'.
            ENDIF.
          ENDIF.
      ENDCASE.
    ENDLOOP.

  ENDIF.

ENDFORM.                    "check_beh_process

*&--------------------------------------------------------------------*
*&      Form  check_mass_confirm
*&--------------------------------------------------------------------*
*       text
*---------------------------------------------------------------------*
FORM check_mass_confirm CHANGING ls_out TYPE ewa_order_alv
                                 value(check_ok)
                                 xy_obj TYPE isuwa_order
                                 ls_object TYPE isuwa_order_object.
  .

  STATICS:  lt_resultfields TYPE TABLE OF tewaresultz .
  DATA:     ls_resultfields TYPE tewaresultz,
            ls_value        TYPE ewa_order_object,
            lf_process      TYPE ewa_billing_process,
            ls_container    TYPE ewacontainer,
            lv_max_dat      TYPE sydatum VALUE '99991231',
            ls_tdevloc      TYPE ewatdevloc.

  FIELD-SYMBOLS: " <ls_line> TYPE ANY,
                 <ls_field> TYPE ANY .

  check_ok = 'X'.

* read service category
  IF ls_out-service_cat IS INITIAL.
    SELECT SINGLE service_cat FROM teservicetype INTO ls_out-service_cat
                WHERE service_type =  ls_out-service_type .
  ENDIF.

  IF ( ls_out-service_cat NE   co_scat_transport  AND
       ls_out-service_cat NE   co_scat_remove AND
       ls_out-service_cat NE   co_scat_switch ).
    EXIT.
  ENDIF.

  IF lt_resultfields IS INITIAL.
    ls_resultfields-resfld = 'BEHTYP_RM'.
    APPEND ls_resultfields TO lt_resultfields.
    ls_resultfields-resfld =        'SERNR_RM_NEW'.
    APPEND ls_resultfields TO lt_resultfields.
    ls_resultfields-resfld =       'BEH_ANZAHL_RM'.
    APPEND ls_resultfields TO lt_resultfields.
  ENDIF.

* checks only have to be done if container relevant fields are changed
* and the service category is correct
  LOOP AT lt_resultfields INTO ls_resultfields.
    ASSIGN COMPONENT ls_resultfields-resfld
    OF STRUCTURE ls_out TO <ls_field>.
    IF sy-subrc = 0 AND
    NOT <ls_field> IS INITIAL.
      MOVE-CORRESPONDING ls_out TO ls_value.
      CASE ls_out-service_cat.
*&      Behälter stellen
        WHEN   co_scat_transport .
          SELECT SINGLE * FROM ewatdevloc INTO ls_tdevloc
          WHERE matnr_neu = ls_out-beh_type
          AND   geraet_neu = ls_out-sernr
          AND   devloc = ls_out-servloc.
          IF sy-subrc <> 0.
            lf_process = co_confirm_cont_count.
          ELSE.
            lf_process = co_confirm_delivery.
          ENDIF.
          PERFORM check_beh_process
                      USING
                         lf_process
                         ls_value-order_date
                      CHANGING
                         xy_obj
                         ls_value
                         check_ok.
          IF check_ok IS INITIAL.
            ls_object-no_scat = 'X'.
            CHECK sy-msgid IS NOT INITIAL.
            PERFORM add_message(sapleewa_order_result).
          ELSE.
            ls_object-rev_kz = 'X'.
          ENDIF.
*&      Behälter abholen
        WHEN      co_scat_remove  .
          PERFORM check_beh_process
                      USING
                         co_confirm_remove
                         ls_value-order_date
                      CHANGING
                         xy_obj
                         ls_value
                         check_ok.
          IF check_ok IS INITIAL.
            ls_object-no_scat = 'X'.
            CHECK sy-msgid IS NOT INITIAL.
            PERFORM add_message(sapleewa_order_result).
          ELSE.
            ls_object-rev_kz = 'X'.
          ENDIF.
*&      Behälter wechseln
        WHEN      co_scat_switch          .
          IF ls_out-sernr IS INITIAL.
            CALL METHOD cl_eewa_rci_common=>get_contgrp
              EXPORTING
                i_devgrp      = ls_out-behgrp
                i_ibase       = ls_out-ibase
                I_KEYDATE     = '00000000'
                i_from        = sy-datum
                i_to          = lv_max_dat
              IMPORTING
                e_container   = ls_container
              EXCEPTIONS
                not_found     = 0
                not_qualified = 0
                OTHERS        = 0.

            IF ls_container IS NOT INITIAL.
              ls_out-sernr =  ls_container-geraet.
            ENDIF.
*            SELECT SINGLE geraet FROM v_eger INTO ls_out-sernr WHERE
*                                 devgrp = ls_out-behgrp AND
*                                 bis    >  sy-datum .
          ENDIF.
          PERFORM check_beh_process
                      USING
                         co_confirm_swap
                         ls_value-order_date
                      CHANGING
                         xy_obj
                         ls_value
                         check_ok.
          IF check_ok IS INITIAL.
            ls_object-no_scat = 'X'.
            CHECK sy-msgid IS NOT INITIAL.
            PERFORM add_message(sapleewa_order_result).
          ELSE.
            ls_object-rev_kz = 'X'.
          ENDIF.
      ENDCASE.
    ENDIF.

  ENDLOOP.

ENDFORM.                    "check_mass_confirm

*&--------------------------------------------------------------------*
*&      Form  check_process
*&--------------------------------------------------------------------*
FORM check_process USING x_process TYPE ewa_billing_process
                         xy_out    TYPE ewa_order_object
                   CHANGING value(leave).

  DATA: lf_sernr  TYPE gernr.

* first read customer data.
  CASE x_process.
    WHEN co_confirm_remove.
      IF NOT xy_out-behgrp IS INITIAL or
         NOT xy_out-ibase IS INITIAL.
        PERFORM rev_read_customer_data
            USING
               xy_out-behgrp
               xy_out-beh_type
               xy_out-ibase
               xy_out-servloc
               space
               xy_out-order_date
            CHANGING
               eanl_tab
               sdoc_tab.
      ELSEIF ( NOT xy_out-beh_type IS INITIAL AND
               NOT xy_out-sernr_rm_new IS INITIAL ).
        lf_sernr = xy_out-sernr_rm_new.
        PERFORM rev_read_customer_data
                    USING
                       space
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       lf_sernr
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ELSE.
        leave = 'X'.
      ENDIF.
    WHEN co_confirm_swap.
*--- checks only have to be done, if container category has changed
      CHECK xy_out-behtyp_rm <> xy_out-beh_type.
      IF NOT xy_out-behgrp IS INITIAL  or
        NOT xy_out-ibase IS INITIAL.
        PERFORM rev_read_customer_data
                    USING
                       xy_out-behgrp
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       space
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ELSE.
        lf_sernr = xy_out-sernr.
        PERFORM rev_read_customer_data
                    USING
                       space
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       lf_sernr
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ENDIF.
    WHEN co_confirm_cont_count.
*--- checks only have to be done, if number of containers within a
*--- container group are changed
      IF NOT xy_out-behgrp IS INITIAL
        or NOT xy_out-ibase IS INITIAL.
        PERFORM rev_read_customer_data
                    USING
                       xy_out-behgrp
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       space
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ELSEIF ( NOT xy_out-beh_type IS INITIAL AND
               NOT xy_out-beh_type_new IS INITIAL AND
               NOT xy_out-sernr_new IS INITIAL AND
               NOT xy_out-sernr IS INITIAL ) AND
             ( xy_out-sernr_new <> xy_out-sernr ).
        lf_sernr = xy_out-sernr.
        PERFORM rev_read_customer_data
                    USING
                       space
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       lf_sernr
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ELSE.
        leave = 'X'.
      ENDIF.
    WHEN co_confirm_delivery.
      IF NOT xy_out-behgrp_new IS INITIAL
        or NOT xy_out-ibase IS INITIAL.
        PERFORM rev_read_customer_data
                    USING
                       xy_out-behgrp
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       space
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ELSEIF ( NOT xy_out-beh_type IS INITIAL AND
              NOT xy_out-sernr IS INITIAL ).
        lf_sernr = xy_out-sernr.
        PERFORM rev_read_customer_data
                    USING
                       space
                       xy_out-beh_type
                       xy_out-ibase
                       xy_out-servloc
                       lf_sernr
                       xy_out-order_date
                    CHANGING
                       eanl_tab
                       sdoc_tab.
      ENDIF.
    WHEN OTHERS.
      leave = 'X'.
  ENDCASE.

ENDFORM.                    "check_process

*&--------------------------------------------------------------------*
*&      Form  do_spcanc_during_confirmation
*&--------------------------------------------------------------------*
FORM do_spcanc_during_confirmation USING value(x_log_handle)
                                         x_pos TYPE ewa_order_object
                               CHANGING  valid TYPE kennzx.

  DATA: service_cat TYPE service_cat,
        leave       TYPE kennzx,
        lf_process  TYPE ewa_billing_process,
        ls_tdevloc  TYPE ewatdevloc.

  SELECT SINGLE service_cat FROM teservicetype INTO service_cat
              WHERE service_type =  x_pos-service_type .
  CHECK sy-subrc = 0.

  CASE service_cat.
    WHEN co_scat_transport.
      SELECT SINGLE * FROM ewatdevloc INTO ls_tdevloc
      WHERE matnr_neu = x_pos-beh_type
      AND   geraet_neu = x_pos-sernr
      AND   devloc = x_pos-servloc.
      IF sy-subrc <> 0.
        lf_process = co_confirm_cont_count.
      ELSE.
        lf_process = co_confirm_delivery.
      ENDIF.
    WHEN co_scat_remove  .
      lf_process = co_confirm_remove.
    WHEN co_scat_switch .
      lf_process = co_confirm_swap.
    WHEN OTHERS.
      EXIT.
  ENDCASE.

  PERFORM check_process
              USING
                 lf_process
                  x_pos
              CHANGING
                 leave.
  CHECK leave IS INITIAL.

  IF NOT cl_isu_wa_exithandler=>ref_exit_billing IS INITIAL.
    LOOP AT eanl_tab INTO eanl_line.
      CALL METHOD
        cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
        EXPORTING
          i_process     = lf_process
          i_date        = x_pos-order_date
          i_anlage      = eanl_line-anlage
          i_log_handle  = x_log_handle
        IMPORTING
          e_msg         = imsg
        CHANGING
          c_obj         = all_obj
        EXCEPTIONS
          general_error = 1
          foreign_lock  = 2
          no_reversal   = 3
          OTHERS        = 4.
      IF sy-subrc <> 0.
        CLEAR valid.
      ELSE.
        IF NOT imsg IS INITIAL.
          MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                  WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4 INTO rev_dummy.
        ENDIF.
      ENDIF.

    ENDLOOP.
    LOOP AT sdoc_tab INTO sdoc_line.
      CALL METHOD
        cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
        EXPORTING
          i_process     = lf_process
          i_date        = x_pos-order_date
          i_anlage      = eanl_line-anlage
          i_log_handle  = x_log_handle
          i_vbeln       = sdoc_line-vbeln
          i_posnr       = sdoc_line-posnr
        IMPORTING
          e_msg         = imsg
        CHANGING
          c_obj         = all_obj
        EXCEPTIONS
          general_error = 1
          foreign_lock  = 2
          no_reversal   = 3
          OTHERS        = 4.
      IF sy-subrc <> 0.
        CLEAR valid.
      ELSE.
        IF NOT imsg IS INITIAL.
          MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                  WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4 INTO rev_dummy.
        ENDIF.
      ENDIF.

    ENDLOOP.

  ENDIF.

ENDFORM.                    "do_spcanc_during_confirmation

*&--------------------------------------------------------------------*
*&      Form  read_customer_data
*&--------------------------------------------------------------------*
FORM rev_read_customer_data USING x_behgrp   TYPE behgrp
                              x_beh_type TYPE beh_type
                              x_ibase    TYPE ib_ibase
                              x_servloc  TYPE servloc
                              x_sernr    TYPE gernr
                              x_date     TYPE abzeitsch
                     CHANGING xy_ieanl   TYPE ieeanl
                              xy_ielocsd TYPE isuwa_ewaelocsdall.

  DATA: lf_equnr TYPE equnr.

  IF NOT x_behgrp IS INITIAL or
     NOT x_ibase IS INITIAL.
    if x_behgrp IS NOT INITIAL.
      SELECT anlage FROM ettifb INTO CORRESPONDING FIELDS OF TABLE xy_ieanl
                     WHERE beh_type = x_beh_type AND
                           behgrp = x_behgrp  AND
                           ab <= x_date AND
                           bis >= x_date.
    else.
      SELECT anlage FROM ettifb INTO CORRESPONDING FIELDS OF TABLE xy_ieanl
                WHERE beh_type = x_beh_type AND
                       ibase  = x_ibase  AND
                      ab <= x_date AND
                      bis >= x_date.
    endif.
    CALL METHOD cl_eewa_rci_eloc=>get_ewaelocsdall_sloc
      EXPORTING
        i_bis           = x_date
        i_ab            = x_date
        i_servloc       = x_servloc
        i_behgrp        = x_behgrp
        i_ibase         = x_ibase
      IMPORTING
        et_ewaelocsdall = xy_ielocsd
      EXCEPTIONS
        not_found       = 0
        OTHERS          = 0.

  ELSE.
* you need the equipment number to find
    SELECT SINGLE equnr FROM equi INTO lf_equnr
    WHERE matnr = x_beh_type
    AND   sernr = x_sernr.

    IF sy-subrc = 0.

      CALL METHOD cl_eewa_rci_eloc=>get_ewaelocsdall_sloc
        EXPORTING
          i_bis           = x_date
          i_ab            = x_date
          i_servloc       = x_servloc
          i_equnr         = lf_equnr
        IMPORTING
          et_ewaelocsdall = xy_ielocsd
        EXCEPTIONS
          not_found       = 1
          OTHERS          = 2.

    ENDIF.

    SELECT anlage FROM ettifb INTO CORRESPONDING FIELDS OF TABLE xy_ieanl
                   WHERE beh_type = x_beh_type AND
                         behaelter = x_sernr AND
                         ab <= x_date AND
                         bis >= x_date.

  ENDIF.

ENDFORM.                    "read_customer_data

*&--------------------------------------------------------------------*
*&      Form  do_spcanc_for_share
*&--------------------------------------------------------------------*
FORM do_spcanc_for_share USING value(x_log_handle)
                               share TYPE isuwa_alloc_share
                     CHANGING  valid TYPE kennzx
                               instln_auto_tab TYPE isu01_instln_auto_tab.

  DATA: instln_auto_new TYPE isu01_instln_auto,
        date  TYPE abzeitsch.
  FIELD-SYMBOLS: <instln_auto> TYPE isu01_instln_auto.
  DATA: lobj TYPE isu01_instln,
        weanlh  TYPE eanlh.

  date = cl_isu_wa_exithandler=>ref_exit_billing->rev_date.
  IF date IS INITIAL.
    date = sy-datum.
  ENDIF.

  IF NOT cl_isu_wa_exithandler=>ref_exit_billing IS INITIAL.
    CALL METHOD
      cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
      EXPORTING
        i_anlage         = share-installation
        i_log_handle     = x_log_handle
        i_vbeln          = share-vbeln
        i_posnr          = share-posnr
      IMPORTING
        e_msg            = imsg
*       e_new_endabrdate = date
      EXCEPTIONS
        general_error    = 1
        foreign_lock     = 2
        no_reversal      = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      CLEAR valid.
      mac_msg_repeat co_msg_error general_error.
    ELSE.
*      COMMIT WORK AND WAIT. -> Otherwise we have partian "removed" containers afterwasrds. containergroup has been adjusted, containers are in place
      IF NOT imsg IS INITIAL.
        MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4 INTO rev_dummy.
        READ TABLE instln_auto_tab ASSIGNING <instln_auto>
        WITH KEY key-anlage = share-installation.
        IF sy-subrc = 0.
          CALL FUNCTION 'ISU_S_INSTLN_PROVIDE'
            EXPORTING
              x_anlage        = share-installation
              x_keydate       = date
              x_wmode         = co_change
              x_prorate       = ' '
              x_no_dialog     = 'X'
            IMPORTING
              y_auto          = instln_auto_new
              y_obj           = lobj
            EXCEPTIONS
              not_found       = 1
              invalid_keydate = 2
              foreign_lock    = 3
              not_authorized  = 4
              invalid_wmode   = 5
              general_fault   = 6
              OTHERS          = 7.
          IF sy-subrc = 0.
            READ TABLE lobj-eanlh INTO weanlh
            WITH KEY anlage = share-installation
                     ab     = <instln_auto>-data-ab.
            IF sy-subrc = 0.
              <instln_auto>-key-bis = weanlh-bis.
            ELSE.
              <instln_auto>-key-bis = co_date_infinite. "'99991231'.
            ENDIF.
          ELSE.
            <instln_auto>-key-bis = co_date_infinite. "'99991231'.
          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.

  ENDIF.

ENDFORM.                    "do_spcanc_for_share

*&--------------------------------------------------------------------*
*&      Form  do_spcanc_for_rob
*&--------------------------------------------------------------------*
FORM do_spcanc_for_rob CHANGING  xy_obj TYPE isuwa_rob.

  DATA: date     TYPE abzeitsch.
  DATA: lt_share TYPE TABLE OF isuwa_alloc_share,
        wa_share TYPE isuwa_alloc_share,
        wa_prop  TYPE isuwa_prop_lines,
        lt_prop  TYPE TABLE OF isuwa_prop_lines,
        save_anlage TYPE anlage.

  lt_share = xy_obj-mdata-ishare.

  SORT lt_share BY installation.

*--- first select all relevant properties
  LOOP AT xy_obj-mdata-iprop INTO wa_prop.
    READ TABLE wa_prop-eewa_prop
    WITH KEY rob = xy_obj-erob-ls_rob-rob
    TRANSPORTING NO FIELDS.
    IF sy-subrc <> 0.
      APPEND wa_prop TO lt_prop.
    ENDIF.
  ENDLOOP.

  LOOP AT lt_prop INTO wa_prop.
    LOOP AT lt_share INTO wa_share
    WHERE prop = wa_prop-eewa_prop_h-prop
    AND NOT installation IS INITIAL.
      CHECK wa_share-installation <> save_anlage.
      save_anlage = wa_share-installation.
      IF NOT cl_isu_wa_exithandler=>ref_exit_billing IS INITIAL.
        CALL METHOD
          cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
          EXPORTING
            i_anlage         = wa_share-installation
          IMPORTING
            e_msg            = imsg
            e_new_endabrdate = date
          EXCEPTIONS
            general_error    = 1
            foreign_lock     = 2
            no_reversal      = 3
            OTHERS           = 4.
        IF sy-subrc <> 0.
          mac_msg_repeat co_msg_error general_error.
        ELSE.
          COMMIT WORK.
          IF NOT imsg IS INITIAL.
            MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                    WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4 INTO rev_dummy.
          ENDIF.
          xy_obj-erob-billdate = date.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDLOOP.

ENDFORM.                    "do_spcanc_for_rob

*&--------------------------------------------------------------------*
*&      Form  do_spcanc
*& obsolete - see cl_eewa_rfc_container_location=>adjustment_reversal
*&--------------------------------------------------------------------*
FORM do_spcanc USING xy_obj TYPE isuwa_servloc
               CHANGING instln_auto_tab TYPE isu01_instln_auto_tab.


  DATA: lt_share TYPE TABLE OF isuwa_alloc_share,
        wa_share TYPE isuwa_alloc_share,
        ra_share TYPE REF TO isuwa_alloc_share,
        save_anlage TYPE anlage.

* Selektion muss so erfolgen, dass auch mehrere
* geänderte Datensätze verarbeitet werden können
  DATA: lt_db_share TYPE TABLE OF isuwa_alloc_share,
        lo_share TYPE isuwa_alloc_share.

  lt_share = xy_obj-share.
  lt_db_share = xy_obj-db_share.

  LOOP AT lt_share reference into ra_share
    WHERE ( NOT installation IS INITIAL
             OR NOT vbeln IS INITIAL ).
    wa_share = ra_share->*.
    LOOP AT lt_db_share INTO lo_share
      WHERE behaelter = ra_share->behaelter
        AND beh_type  = ra_share->beh_type
        AND BEHGRP = ra_share->behgrp
        AND IBASE  = ra_share->IBASE
        AND ( installation  = ra_share->installation OR
                  vbeln     = ra_share->vbeln ).
      IF wa_share = lo_share.
        DELETE lt_db_share.
        DELETE lt_share.
      ENDIF.
    ENDLOOP.
    if SY-SUBRC is not initial. " no "old" record found -> record is new
      clear ra_share->rev_kz. " Changed C5095353: record is new -> we need to check bill ref from start.
    endif.
  ENDLOOP.
  LOOP AT lt_share REFERENCE INTO ra_share
    WHERE ( NOT installation IS INITIAL
             OR NOT vbeln IS INITIAL ).
    LOOP AT lt_db_share INTO lo_share
      WHERE behaelter = ra_share->behaelter
        AND BEHGRP = ra_share->behgrp
        AND IBASE  = ra_share->IBASE
        AND beh_type  = ra_share->beh_type
        AND ( installation  = ra_share->installation OR
                  vbeln     = ra_share->vbeln ).
      IF ( lo_share-contshare <> ra_share->contshare AND
          lo_share-bzg_bis = ra_share->bzg_bis AND
          lo_share-ab = ra_share->ab ).         " existing record with changed CONTSHARE. check Storno!
        CONTINUE.
      ENDIF.
      IF ( lo_share-bzg_bis NE ra_share->bzg_bis AND
               lo_share-ab = ra_share->ab ) or
         ( lo_share-CONTSHARE <> ra_share->CONTSHARE ).
        DELETE lt_db_share.
      endif.
      CLEAR: ra_share->rev_kz. " existing or new record with changed timeslice or new
    ENDLOOP.
  ENDLOOP.

* Stornodaten
  IF lt_db_share IS NOT INITIAL.
    LOOP AT lt_db_share INTO lo_share
      WHERE ( NOT installation IS INITIAL
               OR NOT vbeln IS INITIAL ).
      lo_share-rev_kz = 'X'. " Changed C5095353 we need to check the bill rev @cancel from start of assignment
      APPEND lo_share TO lt_share.
    ENDLOOP.
  ENDIF.
  SORT lt_share by installation oplfdnr bzg_bis.
  DELETE ADJACENT DUPLICATES FROM lt_share.

  LOOP AT lt_share REFERENCE INTO ra_share
    WHERE ( NOT installation IS INITIAL
    OR NOT vbeln IS INITIAL ).
    IF NOT ra_share->installation IS INITIAL.
      CHECK ra_share->installation <> save_anlage.
      IF ra_share->rev_kz IS NOT INITIAL.
        save_anlage = ra_share->installation.
      ENDIF.
    ENDIF.
    READ TABLE xy_obj-db_share WITH KEY
      behaelter = ra_share->behaelter
      behgrp    = ra_share->behgrp
      ibase     = ra_share->ibase
      beh_type  = ra_share->beh_type
      installation = ra_share->installation
      oplfdnr = ra_share->oplfdnr TRANSPORTING NO FIELDS.
    if sy-subrc is not initial              " new installation
       or ra_share->rev_kz is not initial.  " deleted installation (Storno)
      cl_isu_wa_exithandler=>ref_exit_billing->rev_date = ra_share->bzg_ab.
    else.
      IF ra_share->bzg_bis <> co_date_infinite. " '99991231'. This should be always true
        cl_isu_wa_exithandler=>ref_exit_billing->rev_date = ra_share->bzg_bis + 1.
      else.
        cl_isu_wa_exithandler=>ref_exit_billing->rev_date = ra_share->bzg_bis.
      endif.
    ENDIF.
    cl_isu_wa_exithandler=>ref_exit_billing->rev_anlage = ra_share->installation.
    PERFORM do_spcanc_for_share
                  USING
                     space
                     ra_share->*
                  CHANGING
                     rev_dummy
                     instln_auto_tab.

  ENDLOOP.
  CLEAR cl_isu_wa_exithandler=>rev_kz.


** Abfrage, ob Stornierung oder neue Zuordnung
*  IF instln_auto_tab IS INITIAL.             "Storno
*    lt_share = xy_obj-db_share.
*  ELSE.
*    lt_share = xy_obj-share.                 "neue Zuordnung
*  ENDIF.
*
*  SORT lt_share BY installation.
*
*  IF xy_obj-wa_v_eger-devgrp IS INITIAL AND
*     xy_obj-wa_v_eger-ibase IS INITIAL.
*    LOOP AT lt_share INTO wa_share
*    WHERE behaelter = xy_obj-wa_v_eger-geraet
*    AND beh_type = xy_obj-wa_v_eger-matnr
*    AND ( behgrp = space AND
*           ibase = space  )
*    AND ( NOT installation IS INITIAL
*    OR NOT vbeln IS INITIAL ).
*      IF NOT wa_share-installation IS INITIAL.
*        CHECK wa_share-installation <> save_anlage.
*        save_anlage = wa_share-installation.
*      ENDIF.
*      PERFORM do_spcanc_for_share
*                  USING
*                     space
*                     wa_share
*                  CHANGING
*                     rev_dummy
*                     instln_auto_tab.
*    ENDLOOP.
*  ELSE.
*    LOOP AT lt_share INTO wa_share
*    WHERE ( behgrp = xy_obj-wa_v_eger-devgrp OR
*          ibase = xy_obj-wa_v_eger-ibase )
*    AND ( NOT installation IS INITIAL
*    OR NOT vbeln IS INITIAL ).
*      IF NOT wa_share-installation IS INITIAL.
*        CHECK wa_share-installation <> save_anlage.
*        save_anlage = wa_share-installation.
*      ENDIF.
*      PERFORM do_spcanc_for_share
*                  USING
*                     space
*                     wa_share
*                  CHANGING
*                     rev_dummy
*                     instln_auto_tab.
*    ENDLOOP.
*  ENDIF.
*
*  CLEAR cl_isu_wa_exithandler=>rev_kz.

ENDFORM.                    "do_spcanc

*&--------------------------------------------------------------------*
*&      Form  rev_check_service
*&--------------------------------------------------------------------*
FORM do_spanc_service CHANGING xy_obj TYPE isuwa_obj
                               wa_tab TYPE isu_robj_tabc.

  DATA:   ishare          TYPE isuwa_t_alloc_share,
          wshare          TYPE isuwa_alloc_share,
          save_anlage     TYPE anlage,
          prop_lines      TYPE isuwa_prop_lines,
          all_obj         TYPE isuwa_all_objects.

  ishare = xy_obj-mdata-ishare.
  all_obj-services = xy_obj.

  IF NOT xy_obj-anlage IS INITIAL.
    CALL METHOD cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
      EXPORTING
        i_anlage         = wa_tab-anlage
        i_wa             = wa_tab
      IMPORTING
        e_msg            = imsg
        e_new_endabrdate = wa_tab-billdate
      CHANGING
        c_obj            = all_obj
      EXCEPTIONS
        general_error    = 1
        foreign_lock     = 2
        no_reversal      = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      mac_msg_repeat co_msg_error space.
    ENDIF.
  ELSEIF NOT xy_obj-servloc IS INITIAL.
* Anlagendaten wurden bereits eingelesen und stehen in
* xy_obj-mdata-ishare
    IF NOT xy_obj-wa_tab-devgrp IS INITIAL or
       NOT xy_obj-wa_tab-ibase  IS initial..
      LOOP AT ishare INTO wshare
      WHERE ( NOT installation IS INITIAL
      OR NOT vbeln IS INITIAL )
      AND beh_type = xy_obj-wa_tab-beh_type
      AND ( behgrp = xy_obj-wa_tab-devgrp or ibase = xy_obj-wa_tab-ibase  ) .

        IF NOT wshare-installation IS INITIAL.
          CHECK wshare-installation <> save_anlage.
          save_anlage = wshare-installation.
        ENDIF.
        CALL METHOD cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
          EXPORTING
            i_anlage         = wshare-installation
            i_wa             = wa_tab
            i_vbeln          = wshare-vbeln
            i_posnr          = wshare-posnr
          IMPORTING
            e_msg            = imsg
            e_new_endabrdate = wa_tab-billdate
          CHANGING
            c_obj            = all_obj
          EXCEPTIONS
            general_error    = 1
            foreign_lock     = 2
            no_reversal      = 3
            OTHERS           = 4.
        IF sy-subrc <> 0.
          mac_msg_repeat co_msg_error space.
        ENDIF.
        IF NOT imsg IS INITIAL.
          MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                  WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4.
        ENDIF.
      ENDLOOP.
    ELSE.
      LOOP AT ishare INTO wshare
      WHERE ( NOT installation IS INITIAL
      OR NOT vbeln IS INITIAL )
      AND beh_type = xy_obj-wa_tab-beh_type
      AND behaelter = xy_obj-wa_tab-geraet.
        IF NOT wshare-installation IS INITIAL.
          CHECK wshare-installation <> save_anlage.
          save_anlage = wshare-installation.
        ENDIF.
        CALL METHOD cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
          EXPORTING
            i_anlage         = wshare-installation
            i_wa             = wa_tab
            i_vbeln          = wshare-vbeln
            i_posnr          = wshare-posnr
          IMPORTING
            e_msg            = imsg
            e_new_endabrdate = wa_tab-billdate
          CHANGING
            c_obj            = all_obj
          EXCEPTIONS
            general_error    = 1
            foreign_lock     = 2
            no_reversal      = 3
            OTHERS           = 4.
        IF sy-subrc <> 0.
          mac_msg_repeat co_msg_error space.
        ENDIF.
        IF NOT imsg IS INITIAL.
          MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                  WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ELSEIF NOT xy_obj-rob IS INITIAL.
    LOOP AT ishare INTO wshare
      WHERE ( NOT installation IS INITIAL
      OR NOT vbeln IS INITIAL ).
      IF NOT wshare-installation IS INITIAL.
        CHECK wshare-installation <> save_anlage.
        save_anlage = wshare-installation.
      ENDIF.
      READ TABLE xy_obj-mdata-iprop INDEX 1 INTO prop_lines.
      CHECK sy-subrc = 0.
      READ TABLE prop_lines-eewa_prop TRANSPORTING NO FIELDS
      WITH KEY rob = xy_obj-wa_tab-rob.
      CALL METHOD cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
        EXPORTING
          i_anlage         = wshare-installation
          i_wa             = wa_tab
          i_vbeln          = wshare-vbeln
          i_posnr          = wshare-posnr
        IMPORTING
          e_msg            = imsg
          e_new_endabrdate = wa_tab-billdate
        CHANGING
          c_obj            = all_obj
        EXCEPTIONS
          general_error    = 1
          foreign_lock     = 2
          no_reversal      = 3
          OTHERS           = 4.
      IF sy-subrc <> 0.
        mac_msg_repeat co_msg_big_error space.
      ENDIF.
      IF NOT imsg IS INITIAL.
        MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
                WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4.
      ENDIF.
    ENDLOOP.
  ELSEIF NOT xy_obj-sdaufnr IS INITIAL.
    CALL METHOD cl_isu_wa_exithandler=>ref_exit_billing->do_automatic_bill_reversal
      EXPORTING
        i_anlage         = wshare-installation
        i_vbeln          = wa_tab-sdvertrag
        i_posnr          = wa_tab-posnr
      IMPORTING
        e_msg            = imsg
        e_new_endabrdate = wa_tab-billdate
      CHANGING
        c_obj            = all_obj
      EXCEPTIONS
        general_error    = 1
        foreign_lock     = 2
        no_reversal      = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      mac_msg_repeat co_msg_error space.
    ENDIF.
    IF NOT imsg IS INITIAL.
      MESSAGE ID imsg-msgid TYPE imsg-msgty NUMBER imsg-msgno
              WITH imsg-msgv1 imsg-msgv2 imsg-msgv3 imsg-msgv4.
    ENDIF.
  ENDIF.

ENDFORM.                    "rev_check_service