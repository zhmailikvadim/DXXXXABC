************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 25.03.2022 | 10527      : Table logging               *
*              |            | DS4K916071                               *
*----------------------------------------------------------------------*
* CANOCAR      | 29.04.2022 | 11015      : Search by Dev class issue   *
*              |            | DS4K917971                               *
*----------------------------------------------------------------------*
* CANOCAR      | 23.05.2022 | 11389 : Message when table is locked     *
*              |            | DS4K919430                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.06.2022 | 11751: Feature pack 22-2-6               *
*              |            | DS4K921477                               *
*----------------------------------------------------------------------*
* CANOCAR      | 24.06.2022 | 11930: Feature pack 22-2-6 Def1          *
*              |            | DS4K923007                               *
*----------------------------------------------------------------------*
* CANOCAR      | 28.09.2022 | 13964: SAP std enhancements not found    *
*              |            | DS4K931468                               *
*----------------------------------------------------------------------*
* CANOCAR      | 14.11.2022 | 15197: Sorting and record counter        *
*              |            | DS4K935222                               *
*----------------------------------------------------------------------*
* CANOCAR      | 10.02.2023 | 17810: JIRA Links                        *
*              |            | DS4K943375                               *
*----------------------------------------------------------------------*
* CANOCAR      | 22.02.2023 | 18318: Where used buffer                 *
*              |            | DS4K944636                               *
*----------------------------------------------------------------------*
* CANOCAR      | 04.04.2023 | 19651: Hide toolbar (UPG issue)          *
*              |            | DS4K949070                               *
*----------------------------------------------------------------------*
* CANOCAR      | 14.04.2023 | 20197: Row number missing for CDS        *
*              |            | DS4K949922                               *
*----------------------------------------------------------------------*
* CANOCAR      | 20.04.2023 | 20248      : Where used - ODATA Service  *
*              |            | DS4K949969                               *
*----------------------------------------------------------------------*
* CANOCAR      | 13.09.2023 | 24554: Encrypted hardcode                *
*              |            | DS4K961739                               *
*----------------------------------------------------------------------*
* CANOCAR      | 06.11.2023 | 26417: CHARM Integration                 *
*              |            | DS4K968701                               *
*----------------------------------------------------------------------*
* CANOCAR      | 14.02.2024 | 29048: Last buffer update                *
*              |            | DS4K979605                               *
************************************************************************

CLASS lcl_report DEFINITION FINAL.


  PUBLIC SECTION.

    METHODS at_selection_screen_output.
    METHODS at_selection_screen.
    METHODS at_selection_screen_exit.
    METHODS at_selection_screen_type.
    METHODS at_selection_screen_cnum.
    METHODS at_selection_screen_dc.
    METHODS at_selection_screen_metadata.

    METHODS initialization.
    METHODS init_2000 RAISING cx_salv_msg cx_salv_not_found cx_salv_existing cx_salv_data_error.
    METHODS init_2000_splitters.
    METHODS init_2000_co_main RAISING cx_salv_msg cx_salv_not_found cx_salv_existing cx_salv_data_error.
    METHODS init_2000_co_trs RAISING cx_salv_msg cx_salv_not_found cx_salv_existing.
    METHODS init_2000_co_md RAISING cx_salv_msg cx_salv_not_found cx_salv_existing.
    METHODS init_2000_co_cns RAISING cx_salv_msg cx_salv_not_found cx_salv_existing.
    METHODS init_2000_co_prog RAISING cx_salv_msg cx_salv_not_found cx_salv_existing.

    METHODS is_system_editable RETURNING VALUE(rv_result) TYPE abap_boolean.

    METHODS start_of_selection.

    METHODS status_1200.
    METHODS status_2000.


    METHODS user_command_1100 RAISING zcx_pe_hm.
    METHODS user_command_1200.
    METHODS user_command_2000 RAISING zcx_pe_hm.

  PRIVATE SECTION.
    TYPES BEGIN OF gtyp_s_main.
    INCLUDE TYPE zpe_s_hm_output_main.
    TYPES:
      color TYPE lvc_t_scol,
      END OF gtyp_s_main,
      gtyp_t_main TYPE STANDARD TABLE OF gtyp_s_main.

    TYPES: BEGIN OF mtyp_s_cns_ext,
             wi      TYPE zpe_hm_work_item,
             wi_url  TYPE string,
             key     TYPE zpe_hm_change_number,
             url     TYPE string,
             summary TYPE string,
             status  TYPE zpe_hm_change_status,
             team    TYPE string,
           END OF mtyp_s_cns_ext.
    TYPES: mtyp_tt_s_cns_ext TYPE SORTED TABLE OF mtyp_s_cns_ext WITH UNIQUE KEY wi.

*   Dynamic selection screen
    DATA: mv_selid  TYPE rsdynsel-selid,
          mt_ranges TYPE rsds_trange,
          mt_fields TYPE rsdsfields_t,
          mt_where  TYPE rsds_twhere,
          mv_md_old TYPE zpe_hm_metadata.

*   Output
    DATA: mt_main     TYPE gtyp_t_main, "zpe_tt_hm_output_main,
          mt_trs      TYPE zpe_tt_hm_output_trs,
          mt_cns      TYPE zpe_tt_hm_output_cns,
          mts_cns_ext TYPE mtyp_tt_s_cns_ext,
          mt_md       TYPE zpe_tt_hm_output_metadata,
          mt_prog     TYPE zpe_tt_hm_output_programs,
          mt_trs_sel  TYPE zpe_tt_hm_output_trs,
          mt_cns_sel  TYPE zpe_tt_hm_output_cns,
          mt_md_sel   TYPE zpe_tt_hm_output_metadata,
          mt_prog_sel TYPE zpe_tt_hm_output_programs,
          ms_main_sel TYPE gtyp_s_main,
          ms_color    TYPE lvc_s_colo,
          mo_co_main  TYPE REF TO cl_gui_container,
          mo_co_md    TYPE REF TO cl_gui_container,
          mo_co_trs   TYPE REF TO cl_gui_container,
          mo_co_cns   TYPE REF TO cl_gui_container,
          mo_co_prog  TYPE REF TO cl_gui_container,
          mo_alv_main TYPE REF TO cl_salv_table,
          mo_alv_md   TYPE REF TO cl_salv_table,
          mo_alv_trs  TYPE REF TO cl_salv_table,
          mo_alv_cns  TYPE REF TO cl_salv_table,
          mo_alv_prog TYPE REF TO cl_salv_table.

    DATA: mt_work_items TYPE RANGE OF zpe_s_hm_output_cns-work_item.

    METHODS build_filters_basic
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_e070     TYPE string
                ev_filter_wi       TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_mdv      TYPE string
      RAISING   zcx_pe_hm.

    METHODS build_filters_complex
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_e070     TYPE string
                ev_filter_wi       TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_metadata TYPE string
      RAISING   zcx_pe_hm.

    METHODS build_filters_encrypted
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_e070     TYPE string
                ev_filter_wi       TYPE string
                ev_filter_ids_used TYPE string
      RAISING   zcx_pe_hm.

    METHODS build_filters_switch
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_wi       TYPE string
                ev_filter_e070     TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_md       TYPE string
      RAISING   zcx_pe_hm.

    METHODS build_filter_ids_basic
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_mdv      TYPE string
      RAISING   cx_shdb_exception.

    METHODS build_filter_ids_complex
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_metadata TYPE string
      RAISING   cx_shdb_exception.

    METHODS build_filter_ids_encrypted
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_ids_used TYPE string
      RAISING   cx_shdb_exception.


    METHODS build_filter_ids_switch
      IMPORTING it_programs        TYPE zpe_tt_hm_output_programs
      EXPORTING ev_filter_ids      TYPE string
                ev_filter_ids_used TYPE string
                ev_filter_md       TYPE string
      RAISING   cx_shdb_exception.

    METHODS check_type IMPORTING VALUE(iv_type) TYPE zpe_hm_type
                       RAISING   zcx_pe_hm.
    METHODS check_development_class IMPORTING VALUE(iv_dc) TYPE tdevc-devclass
                                    RAISING   zcx_pe_hm.
    METHODS check_metadata RAISING zcx_pe_hm.

    METHODS dynamic_sscreen_init RAISING zcx_pe_hm.
    METHODS dynamic_sscreen_run RAISING zcx_pe_hm.

    METHODS get_change_numbers IMPORTING it_cns        TYPE zpe_tt_hm_output_cns
                               RETURNING VALUE(rts_cns) TYPE mtyp_tt_s_cns_ext.

    METHODS get_development_classes RETURNING VALUE(rt_data) TYPE zpe_tt_hm_range
                                    RAISING   zcx_pe_hm.

    METHODS get_development_class IMPORTING iv_program   TYPE program
                                  RETURNING VALUE(rv_dc) TYPE tadir-devclass.

    METHODS get_work_items RAISING zcx_pe_hm.

*   Events
    METHODS on_back.
    METHODS on_display_or_change IMPORTING iv_action TYPE string RAISING   zcx_pe_hm.
    METHODS on_create RAISING zcx_pe_hm.
    METHODS on_delete RAISING zcx_pe_hm.
    METHODS on_link_alv_main  FOR EVENT link_click OF cl_salv_events_table IMPORTING row column.
    METHODS on_link_alv_prog  FOR EVENT link_click OF cl_salv_events_table IMPORTING row column.
    METHODS on_link_alv_trs   FOR EVENT link_click OF cl_salv_events_table IMPORTING row column.
    METHODS on_link_alv_cns  FOR EVENT link_click OF cl_salv_events_table IMPORTING row column.
    METHODS on_metadata RAISING zcx_pe_hm.

    METHODS init_toolbar.
    METHODS init_selection_fields.

    METHODS is_amdp IMPORTING it_code_tokens   TYPE stokesx_tab
                    RETURNING VALUE(rv_result) TYPE abap_boolean.

    METHODS read_where_used_buffer IMPORTING iv_type          TYPE zpe_hm_type
                                             it_dev_classes   TYPE zpe_tt_hm_range
                                   RETURNING VALUE(rt_result) TYPE zpe_tt_hm_output_programs.

    METHODS refresh_alvs.
    METHODS refresh_alv_tables IMPORTING iv_index TYPE i.

    METHODS restrict_select_options RAISING zcx_pe_hm.

    METHODS save_where_used_buffer IMPORTING iv_type      TYPE zpe_hm_type
                                             it_wu_buffer TYPE zpe_tt_hm_output_programs.

    METHODS search_all RAISING zcx_pe_hm.

    METHODS search_basic
      IMPORTING it_dev_classes TYPE zpe_tt_hm_range
      EXPORTING et_programs    TYPE zpe_tt_hm_output_programs
                et_main        TYPE zpe_tt_hm_output_main
                et_trs         TYPE zpe_tt_hm_output_trs
                et_cns         TYPE zpe_tt_hm_output_cns
                et_metadata    TYPE zpe_tt_hm_output_metadata
      RAISING   zcx_pe_hm.

    METHODS search_complex
      IMPORTING it_dev_classes TYPE zpe_tt_hm_range
      EXPORTING et_programs    TYPE zpe_tt_hm_output_programs
                et_main        TYPE zpe_tt_hm_output_main
                et_trs         TYPE zpe_tt_hm_output_trs
                et_cns         TYPE zpe_tt_hm_output_cns
                et_metadata    TYPE zpe_tt_hm_output_metadata
      RAISING   zcx_pe_hm.

    METHODS search_encrypted
      IMPORTING it_dev_classes TYPE zpe_tt_hm_range
      EXPORTING et_programs    TYPE zpe_tt_hm_output_programs
                et_main        TYPE zpe_tt_hm_output_main
                et_trs         TYPE zpe_tt_hm_output_trs
                et_cns         TYPE zpe_tt_hm_output_cns
      RAISING   zcx_pe_hm.

    METHODS search_switch
      IMPORTING it_dev_classes TYPE zpe_tt_hm_range
      EXPORTING et_programs    TYPE zpe_tt_hm_output_programs
                et_main        TYPE zpe_tt_hm_output_main
                et_trs         TYPE zpe_tt_hm_output_trs
                et_cns         TYPE zpe_tt_hm_output_cns
                et_metadata    TYPE zpe_tt_hm_output_metadata
      RAISING   zcx_pe_hm.

    METHODS search_on_abap IMPORTING iv_type            TYPE zpe_hm_type
                           RETURNING VALUE(rt_programs) TYPE zpe_tt_hm_output_programs
                           RAISING   zcx_pe_hm.

    METHODS search_on_abap_class IMPORTING iv_type   TYPE zpe_hm_type
                                 CHANGING  ct_hits   TYPE sci_findlst
                                           ct_filter TYPE rstt_t_range_string.

    METHODS search_on_abap_cds IMPORTING iv_type   TYPE zpe_hm_type
                               CHANGING  ct_hits   TYPE sci_findlst
                                         ct_filter TYPE rstt_t_range_string.

    METHODS search_on_hana
      IMPORTING iv_type            TYPE zpe_hm_type
      RETURNING VALUE(rt_programs) TYPE zpe_tt_hm_output_programs
      RAISING   zcx_pe_hm.

    METHODS search_on_hana_cds
      IMPORTING iv_hm              TYPE string
                iv_type            TYPE zpe_hm_type
      RETURNING VALUE(rt_programs) TYPE zpe_tt_hm_output_programs
      RAISING   zcx_pe_hm.

    METHODS search_where_used IMPORTING iv_buffer        TYPE c
                                        iv_type          TYPE zpe_hm_type
                                        it_dev_classes   TYPE zpe_tt_hm_range
                              RETURNING VALUE(rt_result) TYPE zpe_tt_hm_output_programs
                              RAISING   zcx_pe_hm.
    METHODS get_last_buffer_update.

ENDCLASS.

CLASS lcl_report IMPLEMENTATION.

  METHOD initialization.

*-- Initialize fields from with previous selections (e.g. navigation back from result ALV)
    IMPORT lv_dummy TO mt_ranges FROM MEMORY ID 'IL1'.    "#EC CI_SUBRC
    IMPORT lv_dummy TO mt_where  FROM MEMORY ID 'IL3'.    "#EC CI_SUBRC

    TRY.
        restrict_select_options( ).
        init_toolbar( ).
        init_selection_fields( ).
        get_last_buffer_update( ).

      CATCH zcx_pe_hm INTO DATA(lo_exc_init).
        MESSAGE lo_exc_init.
    ENDTRY.

    ms_color = VALUE #( col = 5
                        int = 1
                        inv = 0 ).

  ENDMETHOD.

  METHOD at_selection_screen_output.

    IF mt_where IS INITIAL.
      sscrfields-functxt_01 = icon_enter_more && TEXT-s01.
    ELSE.
      sscrfields-functxt_01 = icon_display_more && TEXT-s01.
    ENDIF.

  ENDMETHOD.

  METHOD dynamic_sscreen_init.


    CHECK mv_selid IS INITIAL AND p_md IS NOT INITIAL.

*-- Search a relevant table
    SELECT tabname   AS tablename,
           fieldname AS fieldname
      FROM dd03l UP TO 1 ROWS
       INTO @DATA(ls_field)
     WHERE rollname = @p_md AND
           as4local = 'A'
      ORDER BY tabname.
      EXIT.
    ENDSELECT.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e038(zpe_hm) WITH p_md.
    ENDIF.


*-- Initialize screen
    DATA(lt_tables)      = VALUE rsdstabs_t( ( prim_tab = ls_field-tablename ) ).
    DATA(lt_events)      = VALUE zpe_tt_hm_rsdsevents( ( event = 'A' prog = 'ZPE_R_HM' form = 'DSS_EVENTS' ) ).
    DATA(lt_ass)         = VALUE sscr_ass_ds_tab( ( kind = 'S' sg_main = 'I' op_main = 'EQUAL' tablename = ls_field-tablename fieldname = ls_field-fieldname ) ).
    DATA(lt_opt_list)    = VALUE sscr_opt_list_tab( ( name = 'EQUAL' options-eq = 'X' ) ).
    DATA(ls_restriction) = VALUE sscr_restrict_ds( opt_list_tab = lt_opt_list ass_tab = lt_ass ).
    mt_fields            = VALUE #( ( tablename = ls_field-tablename fieldname = ls_field-fieldname ) ).

    CALL FUNCTION 'FREE_SELECTIONS_INIT'
      EXPORTING
        kind                     = 'F'
        field_ranges_int         = mt_ranges
        restriction              = ls_restriction
      IMPORTING
        selection_id             = mv_selid
        field_ranges             = mt_ranges
      TABLES
        tables_tab               = lt_tables
        fields_tab               = mt_fields
        events                   = lt_events
      EXCEPTIONS
        fields_incomplete        = 1
        fields_no_join           = 2
        field_not_found          = 3
        no_tables                = 4
        table_not_found          = 5
        expression_not_supported = 6
        incorrect_expression     = 7
        illegal_kind             = 8
        area_not_found           = 9
        inconsistent_area        = 10
        kind_f_no_fields_left    = 11
        kind_f_no_fields         = 12
        too_many_fields          = 13
        dup_field                = 14
        field_no_type            = 15
        field_ill_type           = 16
        dup_event_field          = 17
        node_not_in_ldb          = 18
        area_no_field            = 19
        OTHERS                   = 20.

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_pe_hm USING MESSAGE.
    ENDIF.

  ENDMETHOD.

  METHOD at_selection_screen.

    TRY.
        CASE sscrfields-ucomm.
          WHEN 'FC01'.
            dynamic_sscreen_run( ).
          WHEN 'FC02'.
            on_metadata( ).
          WHEN 'FC03'.
            on_create( ).
        ENDCASE.

      CATCH zcx_pe_hm INTO DATA(lo_exc_ass).
        MESSAGE lo_exc_ass.
    ENDTRY.

  ENDMETHOD.

  METHOD dynamic_sscreen_run.


*-- Metadata is required
    IF p_md IS INITIAL.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e037(zpe_hm).
    ENDIF.


*-- Initialize screen
    dynamic_sscreen_init( ).


*-- Run selection screen
    CALL FUNCTION 'FREE_SELECTIONS_DIALOG'
      EXPORTING
        selection_id  = mv_selid
        title         = TEXT-s01
        no_intervals  = abap_true
        tree_visible  = abap_false
      IMPORTING
        where_clauses = mt_where
        field_ranges  = mt_ranges
      TABLES
        fields_tab    = mt_fields
      EXCEPTIONS
        OTHERS        = 0.

  ENDMETHOD.


  METHOD search_basic.

    DATA: lt_cust TYPE RANGE OF e071k-objname.

*-- Search where-used in ABAP or HANA
    CLEAR et_programs.
    et_programs = search_where_used( iv_buffer      = p_buf
                                     iv_type        = zcl_pe_hm_basic=>gc_type
                                     it_dev_classes = it_dev_classes ).

*   No usage or nothing found in development class on selection screen
    IF et_programs IS INITIAL.
      RETURN.
    ENDIF.


*-- Build filters to run search on HANA DB
    build_filters_basic( EXPORTING it_programs        = et_programs
                         IMPORTING ev_filter_ids      = DATA(lv_filter_ids)
                                   ev_filter_e070     = DATA(lv_filter_e070)
                                   ev_filter_wi       = DATA(lv_filter_wi)
                                   ev_filter_ids_used = DATA(lv_filter_ids_used)
                                   ev_filter_mdv      = DATA(lv_filter_mdv) ).

*-- Customizing object for Basic
    lt_cust = zcl_pe_hm_basic=>get_range( '3' ).
    TRY.
        DATA(lv_filter_cust) = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'OBJNAME' dref = REF #( lt_cust[] ) ) ) ).
      CATCH cx_shdb_exception.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.


*-- Search
    TRY.
        zcl_pe_hm_basic=>search( EXPORTING iv_filter_ids      = lv_filter_ids
                                           iv_filter_e070     = lv_filter_e070
                                           iv_filter_wi       = lv_filter_wi
                                           iv_filter_ids_used = lv_filter_ids_used
                                           iv_filter_mdv      = lv_filter_mdv
                                           iv_type            = zcl_pe_hm_basic=>gc_type
                                           iv_cust_object     = lv_filter_cust
                                           iv_in_use_no       = zcl_pe_hm=>gc_s_in_use-no
                                           iv_in_use_yes      = zcl_pe_hm=>gc_s_in_use-yes
                                           iv_active_yes      = zcl_pe_hm=>gc_s_active-yes
                                           iv_active_no       = zcl_pe_hm=>gc_s_active-no
                                           iv_type_in         = zcl_pe_hm=>gc_s_md_type-in
                                           iv_type_out        = zcl_pe_hm=>gc_s_md_type-out
                                           iv_client          = CONV mandt( zcl_pe_hm_basic=>get_value( '44' ) )
                                 IMPORTING et_main            = et_main
                                           et_trs             = et_trs
                                           et_cns             = et_cns
                                           et_metadata        = et_metadata ).

      CATCH cx_amdp_execution_failed.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.

  METHOD search_complex.

*-- Search where-used in ABAP
    CLEAR et_programs.
    et_programs = search_where_used( iv_buffer      = p_buf
                                     iv_type        = zcl_pe_hm_complex=>gc_type
                                     it_dev_classes = it_dev_classes ).
    IF et_programs IS INITIAL.
      RETURN.
    ENDIF.


*-- Build filters to run search on HANA DB
    build_filters_complex( EXPORTING it_programs        = et_programs
                           IMPORTING ev_filter_ids      = DATA(lv_filter_ids)
                                     ev_filter_e070     = DATA(lv_filter_e070)
                                     ev_filter_wi       = DATA(lv_filter_wi)
                                     ev_filter_ids_used = DATA(lv_filter_ids_used)
                                     ev_filter_metadata = DATA(lv_filter_metadata) ).

*-- Search
    TRY.
        zcl_pe_hm_complex=>search( EXPORTING iv_filter_ids      = lv_filter_ids
                                             iv_filter_e070     = lv_filter_e070
                                             iv_filter_wi       = lv_filter_wi
                                             iv_filter_ids_used = lv_filter_ids_used
                                             iv_filter_metadata = lv_filter_metadata
                                             iv_type            = zcl_pe_hm_complex=>gc_type
                                             iv_cust_object     = zcl_pe_hm_basic=>get_value( iv_id = '8' iv_sequence = '2' )
                                             iv_in_use_no       = zcl_pe_hm=>gc_s_in_use-no
                                             iv_in_use_yes      = zcl_pe_hm=>gc_s_in_use-yes
                                             iv_active_yes      = zcl_pe_hm=>gc_s_active-yes
                                             iv_active_no       = zcl_pe_hm=>gc_s_active-no
                                             iv_type_in         = zcl_pe_hm=>gc_s_md_type-in
                                             iv_type_out        = zcl_pe_hm=>gc_s_md_type-out
                                             iv_client          = CONV mandt( zcl_pe_hm_basic=>get_value( '44' ) )
                                   IMPORTING et_main            = et_main
                                             et_trs             = et_trs
                                             et_cns             = et_cns
                                             et_metadata        = et_metadata ).


      CATCH cx_amdp_execution_failed.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.

  METHOD start_of_selection.

*-- Export selection just in case user goes back from ALV screen
    EXPORT lv_dummy FROM mt_ranges TO MEMORY ID 'IL1'.
    EXPORT lv_dummy FROM mt_where  TO MEMORY ID 'IL3'.

    TRY.
        search_all( ).
      CATCH zcx_pe_hm INTO DATA(lo_exc_sos).
        MESSAGE lo_exc_sos TYPE 'I' DISPLAY LIKE 'E'.
        LEAVE LIST-PROCESSING.
    ENDTRY.

    CALL SCREEN 2000.

  ENDMETHOD.

  METHOD search_on_abap.

    DATA: lt_usage_list TYPE TABLE OF rsfindlst,
          lt_r_str      TYPE RANGE OF string,
          lv_statement  TYPE string,
          ls_program    LIKE LINE OF rt_programs,
          lt_ids        TYPE match_result_tab,
          lt_constants  TYPE match_result_tab,
          lt_hc_ids     TYPE STANDARD TABLE OF zpe_hm_id_generic,
          lt_number     TYPE RANGE OF stmnt_nr.




*-- Search ABAP programs using HM ABAP API e.g. ZCL_PE_HM_BASIC
    search_on_abap_class( EXPORTING iv_type        = iv_type
                           CHANGING ct_hits        = lt_usage_list
                                    ct_filter      = lt_r_str ).


*-- Search ABAP programs using HM CDS View e.g. ZPE_I_HM
    search_on_abap_cds( EXPORTING iv_type        = iv_type
                         CHANGING ct_hits        = lt_usage_list
                                  ct_filter      = lt_r_str ).



*-- Scan source code to get IDs and Line numbers
    LOOP AT lt_usage_list ASSIGNING FIELD-SYMBOL(<ls_usage>).

      DATA(lo_include)        = cl_ci_source_include=>create( p_name = CONV #( <ls_usage>-object ) ).
      DATA(lo_code_scan)      = NEW cl_ci_scan( p_include = lo_include ).
      DATA(lt_code_tokens)    = lo_code_scan->tokens.

*     Is an AMDP?
      DATA(lv_amdp) = is_amdp( lt_code_tokens ).


      CLEAR lt_number.
      LOOP AT lo_code_scan->tokens ASSIGNING FIELD-SYMBOL(<ls_hc_line>) WHERE str IN lt_r_str AND type = 'I'. "#EC CI_NESTED

*       Rebuild statement
        CLEAR lv_statement.
        LOOP AT lo_code_scan->statements ASSIGNING FIELD-SYMBOL(<ls_hc_statement>) WHERE from     LE sy-tabix AND     "Avoid reprocessing chained statements
                                                                                         to       GE sy-tabix AND
                                                                                         number   IN lt_number. "#EC CI_NESTED
          lt_number = VALUE #( BASE lt_number ( sign = 'E' option = 'EQ' low = <ls_hc_statement>-number ) ).
          EXIT.
        ENDLOOP.
        IF sy-subrc = 0.
          LOOP AT lt_code_tokens ASSIGNING FIELD-SYMBOL(<ls_code_token>) FROM <ls_hc_statement>-from TO <ls_hc_statement>-to. "#EC CI_NESTED
            lv_statement = |{ lv_statement } { <ls_code_token>-str }|.
          ENDLOOP.
        ENDIF.
        IF lv_statement IS INITIAL.
          CONTINUE.
        ENDIF.

*       Find IDs
        CLEAR: lt_ids, lt_constants, lt_hc_ids.
        FIND ALL OCCURRENCES OF PCRE |\\(\\s?'(\\w*)'\\s?\\)| IN lv_statement RESULTS DATA(lt_ids1).
        IF sy-subrc = 0.
          APPEND LINES OF lt_ids1 TO lt_ids.
        ENDIF.
        FIND ALL OCCURRENCES OF PCRE |IV_ID\\s?=\\s?'(\\w*)'| IN lv_statement RESULTS DATA(lt_ids2).
        IF sy-subrc = 0.
          APPEND LINES OF lt_ids2 TO lt_ids.
        ENDIF.
        LOOP AT lt_ids ASSIGNING FIELD-SYMBOL(<ls_id>).  "#EC CI_NESTED
          READ TABLE <ls_id>-submatches INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_id_pos>).
          IF sy-subrc = 0.
            APPEND substring( val = lv_statement off = <ls_id_pos>-offset len = <ls_id_pos>-length ) TO lt_hc_ids.
          ENDIF.
        ENDLOOP.

*       Find constants
        FIND ALL OCCURRENCES OF PCRE |IV_ID\\s?=\\s?(\\w*)|   IN lv_statement RESULTS DATA(lt_constants1).
        IF sy-subrc = 0.
          APPEND LINES OF lt_constants1 TO lt_constants.
        ENDIF.
        FIND ALL OCCURRENCES OF PCRE |\\(\\s(\\w*)\\s\\)|     IN lv_statement RESULTS DATA(lt_constants2).
        IF sy-subrc = 0.
          APPEND LINES OF lt_constants2 TO lt_constants.
        ENDIF.
        LOOP AT lt_constants ASSIGNING FIELD-SYMBOL(<ls_constant>). "#EC CI_NESTED
          READ TABLE <ls_constant>-submatches INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_constant_pos>).
          IF sy-subrc = 0 AND <ls_constant_pos>-length > 0.
            DATA(lv_constant_name) = substring( val = lv_statement off = <ls_constant_pos>-offset len = <ls_constant_pos>-length ).
            READ TABLE lt_code_tokens WITH KEY str = lv_constant_name TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              LOOP AT lo_code_scan->statements ASSIGNING FIELD-SYMBOL(<ls_constant_statement>) WHERE from LE sy-tabix AND to GE sy-tabix. "#EC CI_NESTED
                EXIT.
              ENDLOOP.
              LOOP AT lt_code_tokens ASSIGNING FIELD-SYMBOL(<ls_constant_token>) FROM <ls_constant_statement>-from TO <ls_constant_statement>-to WHERE type = 'S'. "#EC CI_NESTED
                EXIT.
              ENDLOOP.
              IF sy-subrc = 0.
                APPEND substring_before( val = substring_after( val = <ls_constant_token>-str sub = '''' ) sub = '''' ) TO lt_hc_ids.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDLOOP.

        SORT lt_hc_ids.                                "#EC CI_SORTLOOP
        DELETE ADJACENT DUPLICATES FROM lt_hc_ids.

*       Save occurrences
        LOOP AT lt_hc_ids ASSIGNING FIELD-SYMBOL(<lv_hc_id>). "#EC CI_NESTED

          TRY.
              DATA(lv_type) = zcl_pe_hm=>get_type( <lv_hc_id> ).
              IF lv_type <> iv_type.    " Not what we are looking for
                CONTINUE.
              ENDIF.
            CATCH /iwbep/cx_mgw_busi_exception.
              CONTINUE.                 " Not a HM ID
          ENDTRY.

          CLEAR ls_program.
          ls_program-id         = COND zpe_hm_id_generic( WHEN lv_type = zcl_pe_hm_complex=>gc_type THEN <lv_hc_id> ELSE CONV zpe_hm_id( |{ <lv_hc_id> ALPHA = IN }| ) ).
          ls_program-type       = COND #( WHEN lv_amdp = abap_true THEN zcl_pe_hm=>gc_s_wu_type-amdp ELSE zcl_pe_hm=>gc_s_wu_type-abap ).
          ls_program-object     = <ls_usage>-object.
          ls_program-row        = <ls_hc_line>-row.
          ls_program-devclass   = get_development_class( CONV #( <ls_usage>-object ) ).
          INSERT ls_program INTO TABLE rt_programs.
        ENDLOOP.

      ENDLOOP.
    ENDLOOP.

    SORT rt_programs BY id.

  ENDMETHOD.

  METHOD build_filters_basic.

    TRY.
        ev_filter_e070 = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'TRKORR'     dref = REF #( s_tr[] ) )
                                                                                      ( name = 'TRFUNCTION' dref = REF #( s_trtype[] ) )
                                                                                      ( name = 'AS4TEXT'    dref = REF #( s_trd[] ) ) ) ).

        ev_filter_wi   = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'WORK_ITEM'  dref = REF #( mt_work_items[] ) ) ) ).

        build_filter_ids_basic( EXPORTING it_programs        = it_programs
                                IMPORTING ev_filter_ids      = ev_filter_ids
                                          ev_filter_ids_used = ev_filter_ids_used
                                          ev_filter_mdv      = ev_filter_mdv ).
      CATCH cx_shdb_exception.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.

  METHOD build_filters_switch.

    TRY.
        ev_filter_e070 = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'TRKORR'     dref = REF #( s_tr[] ) )
                                                                                      ( name = 'TRFUNCTION' dref = REF #( s_trtype[] ) )
                                                                                      ( name = 'AS4TEXT'    dref = REF #( s_trd[] ) ) ) ).

        ev_filter_wi   = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'WORK_ITEM'  dref = REF #( mt_work_items[] ) ) ) ).

        build_filter_ids_switch( EXPORTING it_programs        = it_programs
                                 IMPORTING ev_filter_ids      = ev_filter_ids
                                           ev_filter_ids_used = ev_filter_ids_used
                                           ev_filter_md       = ev_filter_md ).
      CATCH cx_shdb_exception.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.

  METHOD build_filters_complex.

    TRY.
        ev_filter_e070 = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'TRKORR'     dref = REF #( s_tr[] ) )
                                                                                      ( name = 'TRFUNCTION' dref = REF #( s_trtype[] ) )
                                                                                      ( name = 'AS4TEXT'    dref = REF #( s_trd[] ) ) ) ).

        ev_filter_wi   = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'WORK_ITEM'  dref = REF #( mt_work_items[] ) ) ) ).

        build_filter_ids_complex( EXPORTING it_programs        = it_programs
                                  IMPORTING ev_filter_ids      = ev_filter_ids
                                            ev_filter_ids_used = ev_filter_ids_used
                                            ev_filter_metadata = ev_filter_metadata ).
      CATCH cx_shdb_exception.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.

  METHOD restrict_select_options.


    DATA(lt_opt_list) = VALUE sscr_opt_list_tab( ( name = 'EQUAL' options-eq = 'X' ) ).
    DATA(lt_ass)      = VALUE sscr_ass_tab( ( kind = 'S' name = 'S_CN' sg_main = 'I' op_main = 'EQUAL' ) ).
    DATA(ls_restrict) = VALUE sscr_restrict( opt_list_tab = lt_opt_list ass_tab = lt_ass ).

    CALL FUNCTION 'SELECT_OPTIONS_RESTRICT'
      EXPORTING
        restriction            = ls_restrict
      EXCEPTIONS
        too_late               = 1
        repeated               = 2
        selopt_without_options = 3
        selopt_without_signs   = 4
        invalid_sign           = 5
        empty_option_list      = 6
        invalid_kind           = 7
        repeated_kind_a        = 8
        OTHERS                 = 9.

    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDIF.


  ENDMETHOD.


  METHOD build_filter_ids_basic.

    DATA: lv_where TYPE string,
          lt_ids   TYPE RANGE OF zpe_hm_id.


    CLEAR: ev_filter_ids, ev_filter_ids_used.

*   Convert data
    LOOP AT s_id ASSIGNING FIELD-SYMBOL(<ls_id_generic>).
      APPEND INITIAL LINE TO lt_ids ASSIGNING FIELD-SYMBOL(<ls_id>).
      <ls_id> = CORRESPONDING #( <ls_id_generic> ).
      <ls_id>-low = |{ <ls_id>-low ALPHA = IN }|.
    ENDLOOP.

*   Selection screen
    ev_filter_ids = cl_shdb_seltab=>combine_seltabs( iv_client_field  = 'MANDT'
                                                     it_named_seltabs = VALUE #( ( name = 'ID'            dref = REF #( lt_ids[] ) )
                                                                                 ( name = 'DESCRIPTION'   dref = REF #( s_desc[] ) )
                                                                                 ( name = 'CREATED_ON'    dref = REF #( s_cr_on[] ) )
                                                                                 ( name = 'CREATED_AT'    dref = REF #( s_cr_at[] ) )
                                                                                 ( name = 'CREATED_BY'    dref = REF #( s_cr_by[] ) )
                                                                                 ( name = 'CHANGED_ON'    dref = REF #( s_ch_on[] ) )
                                                                                 ( name = 'CHANGED_AT'    dref = REF #( s_ch_at[] ) )
                                                                                 ( name = 'CHANGED_BY'    dref = REF #( s_ch_by[] ) ) ) ).

*   Dynamic Selection screen
    IF p_md IS NOT INITIAL.
      CLEAR ev_filter_mdv.
      DO 5 TIMES.
        DATA(lv_index) = CONV char1( sy-index ).
        IF mt_ranges IS NOT INITIAL.
          LOOP AT mt_ranges[ 1 ]-frange_t[ 1 ]-selopt_t ASSIGNING FIELD-SYMBOL(<ls_sel_value>).
            IF ev_filter_mdv IS INITIAL.
              ev_filter_mdv = | FIELD{ lv_index } = '{ <ls_sel_value>-low }'|.
            ELSE.
              ev_filter_mdv = |{ ev_filter_mdv } OR FIELD{ lv_index } = '{ <ls_sel_value>-low }'|.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF lv_where IS INITIAL.
          lv_where = | ( METADATA{ lv_index } = '{ p_md }'|.
        ELSE.
          lv_where = |{ lv_where } OR METADATA{ lv_index } = '{ p_md }'|.
        ENDIF.
      ENDDO.

      IF lv_where IS NOT INITIAL.
        lv_where = |{ lv_where } )|.
        IF ev_filter_ids IS INITIAL.
          ev_filter_ids = lv_where.
        ELSE.
          ev_filter_ids = |{ ev_filter_ids } AND { lv_where }|.
        ENDIF.
      ENDIF.
    ENDIF.


*   Used IDs
    DATA(lt_programs) = it_programs[].
    SORT lt_programs BY id.
    DELETE ADJACENT DUPLICATES FROM lt_programs COMPARING id.
    LOOP AT lt_programs ASSIGNING FIELD-SYMBOL(<ls_program>).
      IF ev_filter_ids_used IS INITIAL.
        ev_filter_ids_used = |( ID = '{ <ls_program>-id }' )|.
      ELSE.
        ev_filter_ids_used = |{ ev_filter_ids_used } OR ( ID = '{ <ls_program>-id }' )|.
      ENDIF.
    ENDLOOP.

    IF s_dc[] IS NOT INITIAL.
      IF ev_filter_ids IS INITIAL.
        ev_filter_ids  = ev_filter_ids_used.
      ELSE.
        ev_filter_ids  = |( { ev_filter_ids } ) AND ( { ev_filter_ids_used } )|.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD build_filter_ids_complex.

    CLEAR: ev_filter_ids, ev_filter_ids_used, ev_filter_metadata.

*   Selection screen
    ev_filter_ids = cl_shdb_seltab=>combine_seltabs( it_named_seltabs    = VALUE #( ( name = 'ID'            dref = REF #( s_id[] ) )
                                                                                    ( name = 'DESCRIPTION'   dref = REF #( s_desc[] ) )
                                                                                    ( name = 'CREATED_ON'    dref = REF #( s_cr_on[] ) )
                                                                                    ( name = 'CREATED_AT'    dref = REF #( s_cr_at[] ) )
                                                                                    ( name = 'CREATED_BY'    dref = REF #( s_cr_by[] ) )
                                                                                    ( name = 'CHANGED_ON'    dref = REF #( s_ch_on[] ) )
                                                                                    ( name = 'CHANGED_AT'    dref = REF #( s_ch_at[] ) )
                                                                                    ( name = 'CHANGED_BY'    dref = REF #( s_ch_by[] ) ) ) ).


*   Dynamic Selection screen
    IF p_md IS NOT INITIAL.
      ev_filter_metadata = |TYPENAME = '{ p_md }'|.
    ENDIF.

*   Warning: Selection by metadata values not supported for complex hardcodes
    IF mt_where IS NOT INITIAL.
      MESSAGE i032(zpe_hm).
    ENDIF.

*   Used IDs
    DATA(lt_programs) = it_programs[].
    SORT lt_programs BY id.
    DELETE ADJACENT DUPLICATES FROM lt_programs COMPARING id.
    LOOP AT lt_programs ASSIGNING FIELD-SYMBOL(<ls_program>).
      IF ev_filter_ids_used IS INITIAL.
        ev_filter_ids_used = |( ID = '{ <ls_program>-id }' )|.
      ELSE.
        ev_filter_ids_used = |{ ev_filter_ids_used } OR ( ID = '{ <ls_program>-id }' )|.
      ENDIF.
    ENDLOOP.

    IF s_dc[] IS NOT INITIAL.
      IF ev_filter_ids IS INITIAL.
        ev_filter_ids  = ev_filter_ids_used.
      ELSE.
        ev_filter_ids  = |( { ev_filter_ids } ) AND ( { ev_filter_ids_used } )|.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD build_filter_ids_switch.

    DATA: lv_where   TYPE string,
          lv_where_f TYPE string,
          lt_ids     TYPE RANGE OF zpe_hm_id.


    CLEAR: ev_filter_ids, ev_filter_ids_used, ev_filter_md.

*   Convert data
    LOOP AT s_id ASSIGNING FIELD-SYMBOL(<ls_id_generic>).
      APPEND INITIAL LINE TO lt_ids ASSIGNING FIELD-SYMBOL(<ls_id>).
      <ls_id> = CORRESPONDING #( <ls_id_generic> ).
      <ls_id>-low = |{ <ls_id>-low ALPHA = IN }|.
    ENDLOOP.


*   Selection screen
    ev_filter_ids = cl_shdb_seltab=>combine_seltabs( it_named_seltabs    = VALUE #( ( name = 'ID'            dref = REF #( lt_ids[] ) )
                                                                                    ( name = 'DESCRIPTION'   dref = REF #( s_desc[] ) )
                                                                                    ( name = 'CREATED_ON'    dref = REF #( s_cr_on[] ) )
                                                                                    ( name = 'CREATED_AT'    dref = REF #( s_cr_at[] ) )
                                                                                    ( name = 'CREATED_BY'    dref = REF #( s_cr_by[] ) )
                                                                                    ( name = 'CHANGED_ON'    dref = REF #( s_ch_on[] ) )
                                                                                    ( name = 'CHANGED_AT'    dref = REF #( s_ch_at[] ) )
                                                                                    ( name = 'CHANGED_BY'    dref = REF #( s_ch_by[] ) ) ) ).

*   Dynamic Selection screen
    IF p_md IS NOT INITIAL.
      DO 5 TIMES.
        DATA(lv_index) = CONV char1( sy-index ).
        IF mt_ranges IS NOT INITIAL.
          CLEAR lv_where_f.
          LOOP AT mt_ranges[ 1 ]-frange_t[ 1 ]-selopt_t ASSIGNING FIELD-SYMBOL(<ls_sel_value>).
            IF lv_where_f IS INITIAL.
              lv_where_f = | AND ( FIELD{ lv_index } = '{ <ls_sel_value>-low }'|.
            ELSE.
              lv_where_f = |{ lv_where_f } OR FIELD{ lv_index } = '{ <ls_sel_value>-low }'|.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF lv_where_f IS NOT INITIAL.
          lv_where_f = |{ lv_where_f } )|.
        ENDIF.
        IF lv_where IS INITIAL.
          lv_where = |( METADATA{ lv_index } = '{ p_md }'{ lv_where_f } )|.
        ELSE.
          lv_where = |{ lv_where } OR ( METADATA{ lv_index } = '{ p_md }'{ lv_where_f } )|.
        ENDIF.
      ENDDO.

      IF lv_where IS NOT INITIAL.
        IF ev_filter_md IS INITIAL.
          ev_filter_md = lv_where.
        ELSE.
          ev_filter_md = |{ ev_filter_md } AND { lv_where }|.
        ENDIF.
      ENDIF.
    ENDIF.


*   Used IDs
    DATA(lt_programs) = it_programs[].
    SORT lt_programs BY id.
    DELETE ADJACENT DUPLICATES FROM lt_programs COMPARING id.
    LOOP AT lt_programs ASSIGNING FIELD-SYMBOL(<ls_program>).
      IF ev_filter_ids_used IS INITIAL.
        ev_filter_ids_used = |ID = '{ <ls_program>-id }'|.
      ELSE.
        ev_filter_ids_used = |{ ev_filter_ids_used } OR ID = '{ <ls_program>-id }'|.
      ENDIF.
    ENDLOOP.

    IF s_dc[] IS NOT INITIAL AND ev_filter_ids_used IS NOT INITIAL.
      IF ev_filter_ids IS INITIAL.
        ev_filter_ids  = ev_filter_ids_used.
      ELSE.
        ev_filter_ids  = |( { ev_filter_ids } ) AND ( { ev_filter_ids_used } )|.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD init_toolbar.

    sscrfields-functxt_02 = icon_table_settings && TEXT-s02.
    IF is_system_editable( ) = abap_true.
      sscrfields-functxt_03 = icon_create && TEXT-s03.
    ENDIF.

  ENDMETHOD.

  METHOD on_create.

    CALL SCREEN 1100 STARTING AT 25 2
                     ENDING AT 63 9.

  ENDMETHOD.


  METHOD on_metadata.

    CALL FUNCTION 'VIEW_MAINTENANCE_CALL'
      EXPORTING
        action                       = 'S'
        view_name                    = 'ZPE_V_HM_MD2'
      EXCEPTIONS
        client_reference             = 1
        foreign_lock                 = 2
        invalid_action               = 3
        no_clientindependent_auth    = 4
        no_database_function         = 5
        no_editor_function           = 6
        no_show_auth                 = 7
        no_tvdir_entry               = 8
        no_upd_auth                  = 9
        only_show_allowed            = 10
        system_failure               = 11
        unknown_field_in_dba_sellist = 12
        view_not_found               = 13
        maintenance_prohibited       = 14
        OTHERS                       = 15.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e017(zpe_hm).
    ENDIF.

  ENDMETHOD.

  METHOD init_2000_co_main.

    DATA: lo_col_tab TYPE REF TO cl_salv_column_table.


*   Create ALV Table
    cl_salv_table=>factory( EXPORTING r_container  = mo_co_main
                            IMPORTING r_salv_table = mo_alv_main
                            CHANGING  t_table      = mt_main ).

*   Display settings
    DATA(lo_display) = mo_alv_main->get_display_settings( ).
    lo_display->set_striped_pattern( abap_true ).
    lo_display->set_list_header( value = TEXT-o01 ).
    mo_alv_main->get_functions( )->set_all( abap_false ).


*   Selection
    DATA(lo_sel) = mo_alv_main->get_selections( ).
    lo_sel->set_selection_mode( if_salv_c_selection_mode=>none ).
    READ TABLE mt_main INDEX 1 ASSIGNING FIELD-SYMBOL(<ls_main_sel>).
    IF sy-subrc = 0.
      <ls_main_sel>-color = VALUE #( ( color = ms_color ) ).
      ms_main_sel = <ls_main_sel>.
      DATA(lv_id) = |{ <ls_main_sel>-id ALPHA = OUT }|.
      SET TITLEBAR '2000' WITH lv_id.
    ENDIF.

*   Hotspot
    DATA(lo_columns) = mo_alv_main->get_columns( ).
    lo_col_tab ?= lo_columns->get_column( 'ID' ).
    lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    lo_col_tab->set_edit_mask( value = '==ALPHA' ).
    lo_columns->set_optimize( abap_true ).
    lo_columns->set_color_column( 'COLOR' ).

*   Icon
    lo_col_tab ?= lo_columns->get_column( 'IN_USE' ).
    lo_col_tab->set_icon( abap_true ).
    lo_col_tab ?= lo_columns->get_column( 'ACTIVE' ).
    lo_col_tab->set_icon( abap_true ).


*   Tooltips
    DATA(lo_functional_settings) = mo_alv_main->get_functional_settings( ).
    DATA(lo_tooltips)            = lo_functional_settings->get_tooltips( ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( icon_green_light )
                              tooltip = CONV #( TEXT-t01 ) ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( icon_light_out )
                              tooltip = CONV #( TEXT-t02 ) ).

*   Events
    DATA(lo_events) = mo_alv_main->get_event( ).
    SET HANDLER on_link_alv_main FOR lo_events.

    mo_alv_main->display( ).

  ENDMETHOD.


  METHOD init_2000_co_cns.

    DATA: lo_col_tab TYPE REF TO cl_salv_column_table.


*   Create ALV Table
    cl_salv_table=>factory( EXPORTING r_container  = mo_co_cns
                            IMPORTING r_salv_table = mo_alv_cns
                            CHANGING  t_table      = mt_cns_sel ).

*   Display settings
    DATA(lo_display) = mo_alv_cns->get_display_settings( ).
    lo_display->set_striped_pattern( abap_true ).
    lo_display->set_list_header( value = TEXT-o02 ).
    mo_alv_cns->get_functions( )->set_all( abap_false ).


*   Hotspot
    DATA(lo_columns) = mo_alv_cns->get_columns( ).
    lo_columns->set_optimize( abap_true ).
    lo_col_tab ?= lo_columns->get_column( 'WORK_ITEM' ).
    lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    lo_col_tab ?= lo_columns->get_column( 'CHANGE_NUMBER' ).
    lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    lo_col_tab ?= lo_columns->get_column( 'ID' ).
    lo_col_tab->set_visible( abap_false ).

*   Events
    DATA(lo_events) = mo_alv_cns->get_event( ).
    SET HANDLER on_link_alv_cns FOR lo_events.

    mo_alv_cns->display( ).

  ENDMETHOD.

  METHOD init_2000_co_md.

    DATA: lo_col_tab TYPE REF TO cl_salv_column_table.


*   Create ALV Table
    cl_salv_table=>factory( EXPORTING r_container  = mo_co_md
                            IMPORTING r_salv_table = mo_alv_md
                            CHANGING  t_table      = mt_md_sel ).


*   Display settings
    DATA(lo_display) = mo_alv_md->get_display_settings( ).
    lo_display->set_striped_pattern( abap_true ).
    lo_display->set_list_header( value = TEXT-o05 ).
    mo_alv_md->get_functions( )->set_all( abap_false ).

*   Column properties
    DATA(lo_columns) = mo_alv_md->get_columns( ).
    lo_columns->set_optimize( abap_true ).
    lo_col_tab ?= lo_columns->get_column( 'ID' ).
    lo_col_tab->set_visible( abap_false ).

*   Icon
    lo_col_tab ?= lo_columns->get_column( 'TYPE' ).
    lo_col_tab->set_icon( abap_true ).

*   Tooltips
    DATA(lo_functional_settings) = mo_alv_md->get_functional_settings( ).
    DATA(lo_tooltips)            = lo_functional_settings->get_tooltips( ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( icon_wd_inbound_plug )
                              tooltip = CONV #( TEXT-t03 ) ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( icon_wd_outbound_plug )
                              tooltip = CONV #( TEXT-t04 ) ).

    mo_alv_md->display( ).

  ENDMETHOD.

  METHOD init_2000_co_prog.

    DATA: lo_col_tab TYPE REF TO cl_salv_column_table.


*   Create ALV Table
    cl_salv_table=>factory( EXPORTING r_container  = mo_co_prog
                            IMPORTING r_salv_table = mo_alv_prog
                            CHANGING  t_table      = mt_prog_sel ).


*   Display settings
    DATA(lo_display) = mo_alv_prog->get_display_settings( ).
    lo_display->set_striped_pattern( abap_true ).
    lo_display->set_list_header( value = TEXT-o04 ).
    mo_alv_prog->get_functions( )->set_all( abap_false ).


*   Column properties
    DATA(lo_columns) = mo_alv_prog->get_columns( ).
    lo_columns->set_optimize( abap_true ).
    lo_col_tab ?= lo_columns->get_column( 'OBJECT' ).
    lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    lo_col_tab ?= lo_columns->get_column( 'ID' ).
    lo_col_tab->set_visible( abap_false ).

*   Icon
    lo_col_tab ?= lo_columns->get_column( 'TYPE' ).
    lo_col_tab->set_icon( abap_true ).

*   Tooltips
    DATA(lo_functional_settings) = mo_alv_prog->get_functional_settings( ).
    DATA(lo_tooltips)            = lo_functional_settings->get_tooltips( ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( zcl_pe_hm=>gc_s_wu_type-abap )
                              tooltip = CONV #( TEXT-t05 ) ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( zcl_pe_hm=>gc_s_wu_type-amdp )
                              tooltip = CONV #( TEXT-t06 ) ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( zcl_pe_hm=>gc_s_wu_type-cds )
                              tooltip = CONV #( TEXT-t07 ) ).
    lo_tooltips->add_tooltip( type    = cl_salv_tooltip=>c_type_icon
                              value   = CONV #( zcl_pe_hm=>gc_s_wu_type-rest )
                              tooltip = CONV #( TEXT-t08 ) ).

*   Events
    DATA(lo_events) = mo_alv_prog->get_event( ).
    SET HANDLER on_link_alv_prog FOR lo_events.

    mo_alv_prog->display( ).

  ENDMETHOD.

  METHOD init_2000_co_trs.

    DATA: lo_col_tab TYPE REF TO cl_salv_column_table.


*   Create ALV Table
    cl_salv_table=>factory( EXPORTING r_container  = mo_co_trs
                            IMPORTING r_salv_table = mo_alv_trs
                            CHANGING  t_table      = mt_trs_sel ).


*   Display settings
    DATA(lo_display) = mo_alv_trs->get_display_settings( ).
    lo_display->set_striped_pattern( abap_true ).
    lo_display->set_list_header( value = TEXT-o03 ).
    mo_alv_trs->get_functions( )->set_all( abap_false ).


*   Column properties
    DATA(lo_columns) = mo_alv_trs->get_columns( ).
    lo_columns->set_optimize( abap_true ).
    lo_col_tab ?= lo_columns->get_column( 'TRANSPORT_REQUEST' ).
    lo_col_tab->set_cell_type( if_salv_c_cell_type=>hotspot ).
    lo_col_tab ?= lo_columns->get_column( 'ID' ).
    lo_col_tab->set_visible( abap_false ).

*   Events
    DATA(lo_events) = mo_alv_trs->get_event( ).
    SET HANDLER on_link_alv_trs FOR lo_events.

    mo_alv_trs->display( ).

  ENDMETHOD.

  METHOD user_command_2000.

    CASE sy-ucomm.
      WHEN 'BACK' OR '%EX' OR 'RW'.
        on_back( ).
      WHEN 'METADATA'.
        on_metadata( ).
      WHEN 'CREATE'.
        on_create( ).
      WHEN 'DISP'.
        on_display_or_change( 'S' ).
      WHEN 'CHAN'.
        on_display_or_change( 'U').
      WHEN 'DELE'.
        on_delete( ).
    ENDCASE.

  ENDMETHOD.

  METHOD user_command_1100.

    CASE sy-ucomm.

      WHEN 'PB04'.
        LEAVE TO SCREEN 0.

      WHEN 'PB01'.
        CALL FUNCTION 'VIEWCLUSTER_MAINTENANCE_CALL'
          EXPORTING
            viewcluster_name             = 'ZPE_VC_HM'
            maintenance_action           = 'U'
          EXCEPTIONS
            client_reference             = 1
            foreign_lock                 = 2
            viewcluster_not_found        = 3
            viewcluster_is_inconsistent  = 4
            missing_generated_function   = 5
            no_upd_auth                  = 6
            no_show_auth                 = 7
            object_not_found             = 8
            no_tvdir_entry               = 9
            no_clientindep_auth          = 10
            invalid_action               = 11
            saving_correction_failed     = 12
            system_failure               = 13
            unknown_field_in_dba_sellist = 14
            missing_corr_number          = 15
            OTHERS                       = 16.
        IF sy-subrc = 2.
          RETURN.
        ELSEIF sy-subrc NE 0.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e017(zpe_hm).
        ELSEIF mt_main[] IS NOT INITIAL.
          search_all( ).
          refresh_alvs( ).
        ENDIF.

      WHEN 'PB02'.
        CALL FUNCTION 'WZ_ZPE_FG_HM_BRF_WIZARD_START'.

      WHEN 'PB03'.

        CALL FUNCTION 'VIEWCLUSTER_MAINTENANCE_CALL'
          EXPORTING
            viewcluster_name             = 'ZPE_VC_HM_BS'
            maintenance_action           = 'U'
          EXCEPTIONS
            client_reference             = 1
            foreign_lock                 = 2
            viewcluster_not_found        = 3
            viewcluster_is_inconsistent  = 4
            missing_generated_function   = 5
            no_upd_auth                  = 6
            no_show_auth                 = 7
            object_not_found             = 8
            no_tvdir_entry               = 9
            no_clientindep_auth          = 10
            invalid_action               = 11
            saving_correction_failed     = 12
            system_failure               = 13
            unknown_field_in_dba_sellist = 14
            missing_corr_number          = 15
            OTHERS                       = 16.

        IF sy-subrc = 2.
          RETURN.
        ELSEIF sy-subrc NE 0.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e017(zpe_hm).
        ELSEIF mt_main[] IS NOT INITIAL.
          search_all( ).
          refresh_alvs( ).
        ENDIF.

      WHEN 'PB05'.
        CLEAR gs_screen_1200.
        gs_screen_1200-mode = 'C'.
        CALL SCREEN 1200 STARTING AT 25 2.

    ENDCASE.

  ENDMETHOD.



  METHOD on_back.

    mo_co_cns->free( ).
    mo_co_main->free( ).
    mo_co_md->free( ).
    mo_co_prog->free( ).
    mo_co_trs->free( ).

    FREE: mo_alv_cns, mo_alv_main, mo_alv_md, mo_alv_prog, mo_alv_trs.
    FREE: mt_cns, mt_main, mt_md, mt_prog, mt_trs.
    FREE: mts_cns_ext.
    LEAVE TO SCREEN 0.

  ENDMETHOD.


  METHOD refresh_alv_tables.

    READ TABLE mt_main INDEX iv_index ASSIGNING FIELD-SYMBOL(<ls_main>).
    IF sy-subrc = 0.
      mt_prog_sel[] = mt_prog[].
      mt_trs_sel[]  = mt_trs[].
      mt_cns_sel[]  = mt_cns[].
      mt_md_sel[]   = mt_md[].
      DELETE mt_prog_sel WHERE NOT ( id = <ls_main>-id ).
      DELETE mt_md_sel   WHERE NOT ( id = <ls_main>-id ).
      DELETE mt_cns_sel  WHERE NOT ( id = <ls_main>-id ).
      DELETE mt_trs_sel  WHERE NOT ( id = <ls_main>-id ).

*--   Get change numbers for selected work items
      mts_cns_ext = get_change_numbers( it_cns = mt_cns_sel ).
      LOOP AT mt_cns_sel ASSIGNING FIELD-SYMBOL(<ls_cns_sel2>).
        READ TABLE mts_cns_ext ASSIGNING FIELD-SYMBOL(<ls_cns_ext2>) WITH TABLE KEY wi = <ls_cns_sel2>-work_item.
        IF sy-subrc = 0.
          <ls_cns_sel2>-change_number    = <ls_cns_ext2>-key.
          <ls_cns_sel2>-change_status    = <ls_cns_ext2>-status.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.



  METHOD on_link_alv_main.

    CASE column.
      WHEN 'ID'.
        READ TABLE mt_main INDEX row ASSIGNING FIELD-SYMBOL(<ls_main_sel>).
        IF sy-subrc = 0 AND <ls_main_sel>-id <> ms_main_sel-id.
          <ls_main_sel>-color = VALUE #( ( color = ms_color ) ).
          DATA(lv_id)         = |{ <ls_main_sel>-id ALPHA = OUT }|.
          SET TITLEBAR '2000' WITH lv_id.
          IF ms_main_sel-id IS NOT INITIAL.
            READ TABLE mt_main ASSIGNING FIELD-SYMBOL(<ls_main_old>) WITH KEY id = ms_main_sel-id.
            IF sy-subrc = 0.
              CLEAR <ls_main_old>-color.
            ENDIF.
          ENDIF.
          ms_main_sel = <ls_main_sel>.
          refresh_alv_tables( row ).
          refresh_alvs( ).
        ENDIF.

    ENDCASE.

  ENDMETHOD.

  METHOD on_link_alv_prog.

    DATA: lv_apim_url TYPE icf_stringurl.

    CASE column.

      WHEN 'OBJECT'.

        READ TABLE mt_prog_sel ASSIGNING FIELD-SYMBOL(<ls_output>) INDEX row.
        IF sy-subrc NE 0.
          RETURN.
        ENDIF.

        CASE <ls_output>-type.

          WHEN zcl_pe_hm=>gc_s_wu_type-cds.
            MESSAGE s031(zpe_hm).
            RETURN.

          WHEN zcl_pe_hm=>gc_s_wu_type-rest.
            TRY.
                zcl_pe_hm_complex=>get_value( EXPORTING iv_id    = '024F85009E261EEDBAB21E665C1C80D2'
                                              IMPORTING ev_value = lv_apim_url ).
                ##SUBRC_OK
                cl_gui_frontend_services=>execute(
                  EXPORTING
                    document               = |{ lv_apim_url }{ <ls_output>-object }|
                  EXCEPTIONS
                    cntl_error             = 1
                    error_no_gui           = 2
                    bad_parameter          = 3
                    file_not_found         = 4
                    path_not_found         = 5
                    file_extension_unknown = 6
                    error_execute_failed   = 7
                    synchronous_failed     = 8
                    not_supported_by_gui   = 9
                    OTHERS                 = 10 ).
              CATCH zcx_pe_hm.
                MESSAGE e011(zpe_hm) WITH '024F85009E261EEDBAB21E665C1C80D2'.
            ENDTRY.

          WHEN OTHERS.
            CALL FUNCTION 'RS_TOOL_ACCESS'
              EXPORTING
                operation   = 'SHOW'
                object_name = <ls_output>-object
                position    = CONV string( <ls_output>-row )
                object_type = 'PROG'
              EXCEPTIONS
                OTHERS      = 0.
        ENDCASE.

    ENDCASE.

  ENDMETHOD.

  METHOD on_link_alv_trs.

    CASE column.
      WHEN 'TRANSPORT_REQUEST'.
        CALL FUNCTION 'TR_DISPLAY_REQUESTS'
          EXPORTING
            it_request_numbers = VALUE cts_trkorrs( ( mt_trs_sel[ row ]-transport_request ) ).
    ENDCASE.

  ENDMETHOD.


  METHOD on_display_or_change.

    DATA: lif_ui_exec     TYPE REF TO if_fdt_wd_ui_execution,
          lv_display_mode TYPE if_fdt_wd_types=>display_mode.

    CASE ms_main_sel-type.

      WHEN zcl_pe_hm_basic=>gc_type.

        DATA(lt_fields) = VALUE scprvimsellist( ( viewfield = 'ID' operator = 'EQ' value = ms_main_sel-id ) ).

        CALL FUNCTION 'VIEWCLUSTER_MAINTENANCE_CALL'
          EXPORTING
            viewcluster_name             = 'ZPE_VC_HM'
            maintenance_action           = iv_action
          TABLES
            dba_sellist                  = lt_fields
          EXCEPTIONS
            client_reference             = 1
            foreign_lock                 = 2
            viewcluster_not_found        = 3
            viewcluster_is_inconsistent  = 4
            missing_generated_function   = 5
            no_upd_auth                  = 6
            no_show_auth                 = 7
            object_not_found             = 8
            no_tvdir_entry               = 9
            no_clientindep_auth          = 10
            invalid_action               = 11
            saving_correction_failed     = 12
            system_failure               = 13
            unknown_field_in_dba_sellist = 14
            missing_corr_number          = 15
            OTHERS                       = 16.

        IF sy-subrc NE 0 AND sy-subrc NE 2.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e017(zpe_hm).
        ENDIF.

      WHEN zcl_pe_hm_complex=>gc_type.

        IF iv_action = 'S'.
          lv_display_mode = if_fdt_wd_constants=>gc_display_mode.
        ELSE.
          lv_display_mode = if_fdt_wd_constants=>gc_edit_mode.
        ENDIF.

        lif_ui_exec = cl_fdt_wd_factory=>if_fdt_wd_factory~get_instance( )->get_ui_execution( ).
        lif_ui_exec->execute_workbench( iv_id           = ms_main_sel-id
                                        iv_display_mode = lv_display_mode ).

      WHEN zcl_pe_hm_switch=>gc_type.

        DATA(lt_fields_switch) = VALUE scprvimsellist( ( viewfield = 'ID' operator = 'EQ' value = ms_main_sel-id ) ).

        CALL FUNCTION 'VIEWCLUSTER_MAINTENANCE_CALL'
          EXPORTING
            viewcluster_name             = 'ZPE_VC_HM_BS'
            maintenance_action           = iv_action
          TABLES
            dba_sellist                  = lt_fields_switch
          EXCEPTIONS
            client_reference             = 1
            foreign_lock                 = 2
            viewcluster_not_found        = 3
            viewcluster_is_inconsistent  = 4
            missing_generated_function   = 5
            no_upd_auth                  = 6
            no_show_auth                 = 7
            object_not_found             = 8
            no_tvdir_entry               = 9
            no_clientindep_auth          = 10
            invalid_action               = 11
            saving_correction_failed     = 12
            system_failure               = 13
            unknown_field_in_dba_sellist = 14
            missing_corr_number          = 15
            OTHERS                       = 16.

        IF sy-subrc NE 0 AND sy-subrc NE 2.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e017(zpe_hm).
        ENDIF.

      WHEN zcl_pe_hm_encrypted=>gc_type.
        gs_screen_1200      = zcl_pe_hm_encrypted=>read( CONV #( ms_main_sel-id ) ).
        gs_screen_1200-mode = COND #( WHEN iv_action = 'S' THEN 'D' ELSE 'U' ).
        CALL SCREEN 1200 STARTING AT 25 2.
    ENDCASE.

    IF sy-subrc = '0' AND iv_action = 'U'.
      search_all( ).
      refresh_alvs( ).
    ENDIF.


  ENDMETHOD.


  METHOD search_all.

    FREE: mt_prog, mt_main, mt_trs, mt_cns, mt_md.

*-- Get development classes
    DATA(lt_dev_classes) = get_development_classes( ).

*-- Get work items (from JIRA if necessary)
    get_work_items( ).

*-- Search Basic hardcodes
    IF zcl_pe_hm_basic=>gc_type IN s_type.
      search_basic( EXPORTING it_dev_classes = lt_dev_classes
                    IMPORTING et_programs    = DATA(lt_programs_hm)
                              et_main        = DATA(lt_main_hm)
                              et_trs         = DATA(lt_trs_hm)
                              et_cns         = DATA(lt_cns_hm)
                              et_metadata    = DATA(lt_md_hm) ).

      INSERT LINES OF lt_programs_hm  INTO TABLE mt_prog.
      INSERT LINES OF CORRESPONDING gtyp_t_main( lt_main_hm ) INTO TABLE mt_main    ##TYPE.
      INSERT LINES OF lt_trs_hm       INTO TABLE mt_trs.
      INSERT LINES OF lt_cns_hm       INTO TABLE mt_cns.
      INSERT LINES OF lt_md_hm        INTO TABLE mt_md.

    ENDIF.

*-- Search complex hardcodes
    IF zcl_pe_hm_complex=>gc_type IN s_type.
      search_complex( EXPORTING it_dev_classes = lt_dev_classes
                      IMPORTING et_programs    = DATA(lt_programs_brf)
                                et_main        = DATA(lt_main_brf)
                                et_trs         = DATA(lt_trs_brf)
                                et_cns         = DATA(lt_cns_brf)
                                et_metadata    = DATA(lt_md_brf) ).

      INSERT LINES OF lt_programs_brf INTO TABLE mt_prog.
      INSERT LINES OF CORRESPONDING gtyp_t_main( lt_main_brf ) INTO TABLE mt_main   ##TYPE.
      INSERT LINES OF lt_trs_brf      INTO TABLE mt_trs.
      INSERT LINES OF lt_cns_brf      INTO TABLE mt_cns.
      INSERT LINES OF lt_md_brf       INTO TABLE mt_md.
    ENDIF.


*-- Search Business Switches
    IF zcl_pe_hm_switch=>gc_type IN s_type.

      search_switch( EXPORTING it_dev_classes = lt_dev_classes
                     IMPORTING et_programs    = DATA(lt_programs_bs)
                               et_main        = DATA(lt_main_bs)
                               et_trs         = DATA(lt_trs_bs)
                               et_cns         = DATA(lt_cns_bs)
                               et_metadata    = DATA(lt_md_bs) ).

      INSERT LINES OF lt_programs_bs INTO TABLE mt_prog.
      INSERT LINES OF CORRESPONDING gtyp_t_main( lt_main_bs ) INTO TABLE mt_main    ##TYPE.
      INSERT LINES OF lt_trs_bs      INTO TABLE mt_trs.
      INSERT LINES OF lt_cns_bs      INTO TABLE mt_cns.
      INSERT LINES OF lt_md_bs       INTO TABLE mt_md.
    ENDIF.


*-- Search Encrypted hardcodes
    IF zcl_pe_hm_encrypted=>gc_type IN s_type AND p_md = abap_false.
      search_encrypted( EXPORTING it_dev_classes = lt_dev_classes
                        IMPORTING et_programs    = DATA(lt_programs_en)
                                  et_main        = DATA(lt_main_en)
                                  et_trs         = DATA(lt_trs_en)
                                  et_cns         = DATA(lt_cns_en) ).

      INSERT LINES OF lt_programs_en  INTO TABLE mt_prog.
      INSERT LINES OF CORRESPONDING gtyp_t_main( lt_main_en ) INTO TABLE mt_main    ##TYPE.
      INSERT LINES OF lt_trs_en       INTO TABLE mt_trs.
      INSERT LINES OF lt_cns_en       INTO TABLE mt_cns.
    ENDIF.


*-- Data found?
    IF mt_main[] IS INITIAL.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e012(zpe_hm).
    ELSE.
      SORT mt_main BY type id.
      MESSAGE s049(zpe_hm) WITH CONV string( lines( mt_main ) ).
    ENDIF.

*   Delete empty workitems
    DELETE mt_cns WHERE work_item IS INITIAL.


*-- Select first hardcode on output
    IF ms_main_sel IS NOT INITIAL.
      READ TABLE mt_main ASSIGNING FIELD-SYMBOL(<ls_main_sel>) WITH KEY id = ms_main_sel-id.
      IF sy-subrc <> 0.
        READ TABLE mt_main ASSIGNING <ls_main_sel> WITH KEY id = ms_main_sel-id.
      ENDIF.
      IF sy-subrc <> 0.
        DATA(lv_ind) = 1.
      ELSE.
        lv_ind = sy-tabix.
        <ls_main_sel>-color = VALUE #( ( color = ms_color ) ).
        ms_main_sel = <ls_main_sel>.
      ENDIF.
    ELSE.
      READ TABLE mt_main ASSIGNING <ls_main_sel> INDEX 1.
      IF sy-subrc = 0.
        <ls_main_sel>-color = VALUE #( ( color = ms_color ) ).
        ms_main_sel = <ls_main_sel>.
      ENDIF.
      lv_ind = 1.
    ENDIF.

    refresh_alv_tables( lv_ind ).

  ENDMETHOD.


  METHOD refresh_alvs.

    "not nice, but the only way to re-adjust column widths
    mo_alv_cns->get_columns( )->set_optimize( abap_false ).
    mo_alv_cns->get_columns( )->set_optimize( abap_true ).
    mo_alv_cns->refresh( refresh_mode = if_salv_c_refresh=>soft ).

    mo_alv_md->get_columns( )->set_optimize( abap_false ).
    mo_alv_md->get_columns( )->set_optimize( abap_true ).
    mo_alv_md->refresh( refresh_mode = if_salv_c_refresh=>soft ).

    mo_alv_prog->get_columns( )->set_optimize( abap_false ).
    mo_alv_prog->get_columns( )->set_optimize( abap_true ).
    mo_alv_prog->refresh( refresh_mode = if_salv_c_refresh=>soft ).

    mo_alv_trs->get_columns( )->set_optimize( abap_false ).
    mo_alv_trs->get_columns( )->set_optimize( abap_true ).
    mo_alv_trs->refresh( refresh_mode = if_salv_c_refresh=>soft ).

    mo_alv_main->refresh( s_stable = VALUE #( row = abap_true
                                              col = abap_true )
                          refresh_mode = if_salv_c_refresh=>full ).

  ENDMETHOD.

  METHOD search_on_hana.

    DATA: lv_cds_view TYPE string.


*-- Not needed for Complex type or Encrypted
    IF iv_type = zcl_pe_hm_complex=>gc_type OR iv_type = zcl_pe_hm_encrypted=>gc_type.
      RETURN.
    ENDIF.


*-- Get HM CDS View
    zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                            is_filter       = iv_type
                                            iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                  IMPORTING ev_value        = lv_cds_view ).

*-- Search on CDS Views
    DATA(lt_hana_cds) = search_on_hana_cds( iv_hm   = lv_cds_view
                                            iv_type = iv_type ).
    INSERT LINES OF lt_hana_cds INTO TABLE rt_programs.


*-- Sort results
    SORT rt_programs BY id.

  ENDMETHOD.



  METHOD search_on_hana_cds.

    DATA: ls_where_used_parameter TYPE ris_s_parameter_where_used_s,
          lt_repository           TYPE if_wb_ddls_ris_data_provider=>ty_t_df_repository,
          lv_id_generic           TYPE zpe_hm_id_generic,
          lv_id                   TYPE zpe_hm_id,
          lv_start                TYPE string,
          lv_pos                  TYPE i,
          lv_statement            TYPE string,
          ls_program              LIKE LINE OF rt_programs.


*-- Where used in CDS Views
    ls_where_used_parameter-find_objects = VALUE #( ( object = iv_hm ) ).
    ls_where_used_parameter-find_type-trobjtype    = 'STOB'.
    ls_where_used_parameter-find_type-legacy_type  = 'DO'.

    DATA(lif_data_provider) = cl_ddls_ris_factory=>create_ris_data_provider( ).
    lif_data_provider->get_where_used( EXPORTING i_where_used_parameter = ls_where_used_parameter
                                       CHANGING  c_results              = lt_repository ).


*-- Code analysis
    LOOP AT lt_repository ASSIGNING FIELD-SYMBOL(<ls_repository>).
      TRY.
          DATA(lt_snippets) = cl_ddls_where_used=>snippet_builder->get_code_snippets_for_usages( ddls_name = <ls_repository>-ddlsrc_name
                                                                                                 fullname  = CONV #( <ls_repository>-full_name ) ).
        CATCH cx_swb_object_does_not_exist cx_adt_uri_mapping.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
      ENDTRY.
      LOOP AT lt_snippets ASSIGNING FIELD-SYMBOL(<ls_snippet>). "#EC CI_NESTED
        CLEAR: lv_id, lv_start, lv_pos, lv_statement, lv_id_generic.
        FIND PCRE |start=\\d*,(\\w*)| IN <ls_snippet>-uri SUBMATCHES lv_start.
        IF lv_start IS INITIAL.
          CONTINUE.
        ENDIF.
        lv_pos       = CONV #( lv_start ).
        lv_statement = to_upper( <ls_snippet>-content+lv_pos ).
        FIND PCRE |{ iv_hm }\\s?\\(\\s?IV_ID\\s?:\\s?'\\s?(\\w*)\\s?'| IN lv_statement SUBMATCHES lv_id_generic.
        IF lv_id_generic IS INITIAL.
          FIND PCRE |{ iv_hm }\\s?\\(\\s?'\\s?(\\w*)\\s?'| IN lv_statement SUBMATCHES lv_id_generic.
        ENDIF.
        IF lv_id_generic IS NOT INITIAL.
          CLEAR ls_program.
          IF iv_type = zcl_pe_hm_complex=>gc_type.
            ls_program-id = lv_id_generic.
          ELSE.
            lv_id         = |{ lv_id_generic ALPHA = IN }|.
            ls_program-id = lv_id.
          ENDIF.

          ls_program-type       = zcl_pe_hm=>gc_s_wu_type-cds.
          ls_program-object     = <ls_repository>-ddlsrc_name.
          ls_program-devclass   = <ls_repository>-devclass.
          ls_program-row        = substring_before( val = substring_after( val = <ls_snippet>-uri sub = '#start=') sub = ',' ).
          INSERT ls_program INTO TABLE rt_programs.
        ENDIF.
      ENDLOOP.

    ENDLOOP.

  ENDMETHOD.

  METHOD get_development_classes.

    CHECK s_dc IS NOT INITIAL.

*   Get selected individual development classes
    SELECT devclass FROM tdevc INTO TABLE @DATA(lt_dc_sel)
      WHERE devclass IN @s_dc
      ORDER BY PRIMARY KEY.                             "#EC CI_GENBUFF
    IF sy-subrc EQ 0.
      DELETE ADJACENT DUPLICATES FROM lt_dc_sel COMPARING devclass.
      LOOP AT lt_dc_sel ASSIGNING FIELD-SYMBOL(<ls_devclass>).
        rt_data = VALUE #( BASE rt_data ( sign = 'I' option = 'EQ' low = <ls_devclass> ) ).
      ENDLOOP.
    ELSE.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e029(zpe_hm).
    ENDIF.

*   Include subpackages
    IF p_dch = abap_true.
      DATA(lt_data_sel) = rt_data.
      LOOP AT lt_data_sel ASSIGNING FIELD-SYMBOL(<ls_data>).
        DATA(lt_hierarchy) = cl_cts_devclass_api=>get_hierarchy( iv_root_devclass = <ls_data>-low ).
        LOOP AT lt_hierarchy ASSIGNING FIELD-SYMBOL(<ls_child>). "#EC CI_NESTED
          APPEND VALUE #( sign = 'I' option = 'EQ' low = <ls_child>-devclass ) TO rt_data.
        ENDLOOP.
      ENDLOOP.
      SORT rt_data.
      DELETE ADJACENT DUPLICATES FROM rt_data.
    ENDIF.

  ENDMETHOD.


  METHOD check_type.

    SELECT @abap_true INTO @DATA(lv_found)                      ##NEEDED
    FROM dd07l UP TO 1 ROWS
    WHERE domname    = 'ZPE_HM_TYPE' AND
          as4local   = 'A' AND
          as4vers    = '0000' AND
          domvalue_l = @iv_type.
      EXIT.
    ENDSELECT.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e033(zpe_hm) WITH iv_type.
    ENDIF.


  ENDMETHOD.

  METHOD check_development_class.

    SELECT SINGLE mainpack INTO @DATA(lv_mainpack)
        FROM tdevc
        WHERE devclass = @iv_dc.
    IF sy-subrc NE 0 OR ( sy-subrc = 0 AND lv_mainpack = abap_true AND p_dch = abap_false ).
      RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e034(zpe_hm) WITH iv_dc.
    ENDIF.

  ENDMETHOD.


  METHOD search_switch.

*-- Search where-used in ABAP or HANA
    CLEAR et_programs.
    et_programs = search_where_used( iv_buffer      = p_buf
                                     iv_type        = zcl_pe_hm_switch=>gc_type
                                     it_dev_classes = it_dev_classes ).

*    No usage or nothing found in development class on selection screen
    IF et_programs IS INITIAL.
      RETURN.
    ENDIF.


*-- Build filters to run search on HANA DB
    build_filters_switch( EXPORTING it_programs        = et_programs
                          IMPORTING ev_filter_ids      = DATA(lv_filter_ids)
                                    ev_filter_e070     = DATA(lv_filter_e070)
                                    ev_filter_wi       = DATA(lv_filter_wi)
                                    ev_filter_ids_used = DATA(lv_filter_ids_used)
                                    ev_filter_md       = DATA(lv_filter_md) ).

*-- Search
    TRY.
        zcl_pe_hm_switch=>search( EXPORTING iv_filter_ids      = lv_filter_ids
                                            iv_filter_e070     = lv_filter_e070
                                            iv_filter_wi       = lv_filter_wi
                                            iv_filter_ids_used = lv_filter_ids_used
                                            iv_filter_md       = lv_filter_md
                                            iv_type            = zcl_pe_hm_switch=>gc_type
                                            iv_cust_object     = zcl_pe_hm_basic=>get_value( iv_id = '8' iv_sequence = '3' )
                                            iv_in_use_no       = zcl_pe_hm=>gc_s_in_use-no
                                            iv_in_use_yes      = zcl_pe_hm=>gc_s_in_use-yes
                                            iv_active_yes      = zcl_pe_hm=>gc_s_active-yes
                                            iv_active_no       = zcl_pe_hm=>gc_s_active-no
                                            iv_type_in         = zcl_pe_hm=>gc_s_md_type-in
                                            iv_type_out        = zcl_pe_hm=>gc_s_md_type-out
                                            iv_client          = CONV mandt( zcl_pe_hm_basic=>get_value( '44' ) )
                                  IMPORTING et_main            = et_main
                                            et_trs             = et_trs
                                            et_cns             = et_cns
                                            et_metadata        = et_metadata ).

      CATCH cx_amdp_execution_failed.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.


  METHOD at_selection_screen_exit.

    FREE: mt_where, mt_fields, mv_selid, mt_ranges.
    EXPORT lv_dummy FROM mt_ranges TO MEMORY ID 'IL1'.
    EXPORT lv_dummy FROM mt_where  TO MEMORY ID 'IL3'.

  ENDMETHOD.


  METHOD check_metadata.

    CHECK mv_md_old NE p_md.

*-- Reset dynamic selection screen
    FREE: mt_where, mt_fields, mv_selid, mt_ranges.

*-- Check entered value
    IF p_md IS NOT INITIAL.
      SELECT SINGLE @abap_true INTO @DATA(lv_found)             ##NEEDED
        FROM zpe_t_hm_md
       WHERE metadata = @p_md.
      IF sy-subrc NE 0.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e013(zpe_hm).
      ENDIF.
    ENDIF.

    mv_md_old = p_md.

  ENDMETHOD.



  METHOD at_selection_screen_type.

    TRY.
        LOOP AT s_type ASSIGNING FIELD-SYMBOL(<ls_type>).
          IF <ls_type>-low IS NOT INITIAL.
            check_type( <ls_type>-low ).
          ENDIF.
          IF <ls_type>-high IS NOT INITIAL.
            check_type( <ls_type>-high ).
          ENDIF.
        ENDLOOP.
      CATCH zcx_pe_hm INTO DATA(lo_exc_ctype).
        MESSAGE lo_exc_ctype.
    ENDTRY.

  ENDMETHOD.

  METHOD at_selection_screen_dc.

    TRY.
        LOOP AT s_dc ASSIGNING FIELD-SYMBOL(<ls_dc>).
          IF <ls_dc>-low IS NOT INITIAL.
            check_development_class( <ls_dc>-low ).
          ENDIF.
          IF <ls_dc>-high IS NOT INITIAL.
            check_development_class( <ls_dc>-high ).
          ENDIF.
        ENDLOOP.
      CATCH zcx_pe_hm INTO DATA(lo_exc_ctype).
        MESSAGE lo_exc_ctype.
    ENDTRY.

  ENDMETHOD.


  METHOD at_selection_screen_metadata.

    TRY.
        check_metadata( ).
      CATCH zcx_pe_hm INTO DATA(lo_exc_ctype).
        MESSAGE lo_exc_ctype.
    ENDTRY.

  ENDMETHOD.

  METHOD init_2000.

    CHECK mo_co_main IS NOT BOUND.

    init_2000_splitters( ).

    init_2000_co_main( ).
    init_2000_co_trs( ).
    init_2000_co_md( ).
    init_2000_co_cns( ).
    init_2000_co_prog( ).

  ENDMETHOD.

  METHOD init_2000_splitters.
    DATA:
      lo_split_cont_main   TYPE REF TO cl_gui_splitter_container,
      lo_split_cont_top    TYPE REF TO cl_gui_splitter_container,
      lo_split_cont_bottom TYPE REF TO cl_gui_splitter_container.

    lo_split_cont_main = NEW #( parent  = NEW cl_gui_custom_container( container_name = 'CO_MAIN' )
                                rows    = 2
                                columns = 1 ).

    lo_split_cont_main->set_row_mode( EXPORTING  mode   = lo_split_cont_main->mode_absolute
                                      EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.


    lo_split_cont_main->set_row_height( EXPORTING  id     = 2
                                                   height = 150
                                        EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.

    lo_split_cont_top = NEW #( parent  = lo_split_cont_main->get_container( row = 1 column = 1 )
                               rows    = 1
                               columns = 2 ).
    lo_split_cont_top->set_column_mode( EXPORTING  mode   = lo_split_cont_top->mode_relative
                                        EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.
    lo_split_cont_top->set_column_width( EXPORTING  id     = 2
                                                    width  = 20
                                         EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.

    lo_split_cont_bottom = NEW #( parent  = lo_split_cont_main->get_container( row = 2 column = 1 )
                                  rows    = 1
                                  columns = 3 ).
    lo_split_cont_bottom->set_row_mode( EXPORTING  mode   = lo_split_cont_bottom->mode_relative
                                        EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.
    lo_split_cont_bottom->set_column_width( EXPORTING  id     = 1
                                                       width  = 45
                                            EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.
    lo_split_cont_bottom->set_column_width( EXPORTING  id     = 2
                                                       width  = 35
                                            EXCEPTIONS OTHERS = 1 ).
    IF sy-subrc <> 0.
      MESSAGE e362(00).
    ENDIF.

    mo_co_main = lo_split_cont_top->get_container( row = 1 column = 1 ).
    mo_co_md   = lo_split_cont_top->get_container( row = 1 column = 2 ).
    mo_co_trs  = lo_split_cont_bottom->get_container( row = 1 column = 2 ).
    mo_co_cns  = lo_split_cont_bottom->get_container( row = 1 column = 3 ).
    mo_co_prog = lo_split_cont_bottom->get_container( row = 1 column = 1 ).
  ENDMETHOD.


  METHOD init_selection_fields.

    s_trtype[] = VALUE #( ( sign = 'E' option = 'EQ' low = 'T' ) ).


  ENDMETHOD.

  METHOD get_development_class.

    DATA: ls_tadir_keys TYPE tadir.

    CALL FUNCTION 'TR_TRANSFORM_TRDIR_TO_TADIR'
      EXPORTING
        iv_trdir_name = iv_program
      IMPORTING
        es_tadir_keys = ls_tadir_keys.

    SELECT SINGLE devclass FROM tadir INTO rv_dc
      WHERE pgmid    = ls_tadir_keys-pgmid
        AND object   = ls_tadir_keys-object
        AND obj_name = ls_tadir_keys-obj_name.
    IF sy-subrc NE 0.
      CLEAR rv_dc.
    ENDIF.

  ENDMETHOD.


  METHOD on_link_alv_cns.

    DATA lv_url TYPE string.

*   Read URLs for Work item and Change number
    READ TABLE mts_cns_ext ASSIGNING FIELD-SYMBOL(<ls_cns_ext>) WITH TABLE KEY wi = mt_cns_sel[ row ]-work_item.
    IF sy-subrc NE 0.
      MESSAGE s017(zpe_hm).
      RETURN.
    ENDIF.

*   URL field depending on the field
    CASE column.
      WHEN 'WORK_ITEM'.
        lv_url = <ls_cns_ext>-wi_url.
      WHEN 'CHANGE_NUMBER'.
        lv_url = <ls_cns_ext>-url.
    ENDCASE.

*   Open URL
    cl_gui_frontend_services=>execute(
      EXPORTING
        document               = lv_url
      EXCEPTIONS
        cntl_error             = 1
        error_no_gui           = 2
        bad_parameter          = 3
        file_not_found         = 4
        path_not_found         = 5
        file_extension_unknown = 6
        error_execute_failed   = 7
        synchronous_failed     = 8
        not_supported_by_gui   = 9
        OTHERS                 = 10 ).
    IF sy-subrc NE 0.
      MESSAGE s017(zpe_hm).
      RETURN.
    ENDIF.

  ENDMETHOD.


  METHOD get_change_numbers.

    DATA: ls_cn_out LIKE LINE OF rts_cns.

    TRY.
        DATA(lo_solman) = NEW zcl_pe_solman_connector( ).

        lo_solman->read_orders( EXPORTING it_ids    = VALUE #( FOR ls_id IN it_cns ( ls_id-work_item ) )
                                IMPORTING ets_header = DATA(lts_header)
                                          ets_status = DATA(lts_status) ).

        LOOP AT it_cns ASSIGNING FIELD-SYMBOL(<ls_cn>).
          READ TABLE lts_header WITH KEY object_id = CONV crmt_object_id_db( |{ <ls_cn>-work_item ALPHA = IN }| ) ASSIGNING FIELD-SYMBOL(<ls_header>).
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.

          CLEAR ls_cn_out.
          ls_cn_out-wi      = |{ <ls_header>-object_id ALPHA = OUT }|.
          ls_cn_out-wi_url  = lo_solman->get_workitem_url( iv_work_item    = <ls_header>-object_id
                                                           iv_process_type = <ls_header>-process_type ).
          ls_cn_out-key     = COND #( WHEN <ls_header>-/salm/ext_id IS INITIAL THEN <ls_header>-/core/f0001
                                      ELSE <ls_header>-/salm/ext_id ).
          ls_cn_out-url     = zcl_pe_change_manager=>factory( CONV #( ls_cn_out-key ) )->get_issue_url( ).
          ls_cn_out-status  = lts_status[ guid = <ls_header>-guid ]-txt30.
          ls_cn_out-summary = <ls_header>-description.
          INSERT ls_cn_out INTO TABLE rts_cns.

        ENDLOOP.

      CATCH zcx_pe_solman_connector zcx_pe_jira_connector.
        RETURN.
    ENDTRY.

  ENDMETHOD.


  METHOD get_work_items.

    TYPES: BEGIN OF ltyp_s_project,
             project TYPE zpe_project,
           END OF ltyp_s_project.
    DATA: lt_projects TYPE STANDARD TABLE OF ltyp_s_project.


*   Initialize global range of work items
    IF s_cnum IS INITIAL.
      mt_work_items = s_cn[].
      RETURN.
    ENDIF.

*   Get relevant JIRA Projects
    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDD97E95051E5BC3F59'
                                                iv_mapping_type = zcl_pe_hm=>gc_s_mapping_type-data_elements
                                      IMPORTING et_table        = lt_projects ).
      CATCH zcx_pe_hm INTO DATA(lo_exc_hm).
        MESSAGE lo_exc_hm TYPE 'E'.
        RETURN.
    ENDTRY.


*   Get work items
    DATA(lt_issue_keys) = VALUE zpe_tt_issue_keys( FOR ls_change_number IN s_cnum ( CONV #( ls_change_number-low ) ) ).
    SORT lt_issue_keys.
    DELETE ADJACENT DUPLICATES FROM lt_issue_keys.


*   Get user stories
    TRY.
        DATA(lt_issues) = NEW zcl_pe_jira_connector( )->search_issues( it_issue_keys = lt_issue_keys
                                                                       it_projects   = CONV #( lt_projects ) ).
        LOOP AT lt_issues ASSIGNING FIELD-SYMBOL(<ls_issue>).
          DATA(lv_wi_ext) = CONV zpe_hm_work_item( |{ <ls_issue>-wi ALPHA = OUT }| ).
          IF lv_wi_ext IS NOT INITIAL AND lv_wi_ext IN s_cn.
            INSERT VALUE #( sign =  'I' option = 'EQ' low = lv_wi_ext ) INTO TABLE mt_work_items.
          ENDIF.
        ENDLOOP.
        IF mt_work_items IS INITIAL.
          RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e012(zpe_hm).
        ENDIF.

      CATCH zcx_pe_jira_connector INTO DATA(lo_exc_jira).
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm) EXPORTING previous = lo_exc_jira.
        RETURN.
    ENDTRY.

  ENDMETHOD.


  METHOD at_selection_screen_cnum.

    CHECK s_cnum IS NOT INITIAL AND ( sy-ucomm = 'ONLY' OR sy-ucomm = '' ).

*   Keep unique JIRA Projects
    DATA(lt_projects) = VALUE zpe_tt_projects( FOR ls_cnum IN s_cnum ( substring_before( val = ls_cnum-low sub = '-' ) ) ).
    SORT lt_projects.
    DELETE ADJACENT DUPLICATES FROM lt_projects.

*   Check project
    LOOP AT lt_projects ASSIGNING FIELD-SYMBOL(<lv_project>).
      IF <lv_project> IS INITIAL.
        MESSAGE e050(zpe_hm).
      ENDIF.
      TRY.
          NEW zcl_pe_jira_connector( )->check_project_access( <lv_project> ).
        CATCH zcx_pe_jira_connector.
          MESSAGE e007(zpe_jira_connector).
      ENDTRY.
    ENDLOOP.

  ENDMETHOD.


  METHOD search_where_used.

    DATA: lt_buffer TYPE zpe_tt_hm_output_programs.

*-- Search again where-used and update buffer
    IF iv_buffer IS INITIAL.

*     Where used in ABAP
      DATA(lt_abap) = search_on_abap( iv_type ).
      INSERT LINES OF lt_abap INTO TABLE lt_buffer.

*     Where used in HANA
      DATA(lt_cds) = search_on_hana( iv_type ).
      INSERT LINES OF lt_cds INTO TABLE lt_buffer.

*     Save where-used buffer
      save_where_used_buffer( iv_type       = iv_type
                              it_wu_buffer  = lt_buffer ).
    ENDIF.


*-- Read buffer
    rt_result = read_where_used_buffer( iv_type        = iv_type
                                        it_dev_classes = it_dev_classes ).

  ENDMETHOD.


  METHOD save_where_used_buffer.

    DATA lt_buffer TYPE STANDARD TABLE OF zpe_t_hm_wu.

*   Mapping
    lt_buffer = VALUE #( FOR ls_buffer IN it_wu_buffer ( id         = ls_buffer-id
                                                         type       = iv_type
                                                         wu_type    = ls_buffer-type
                                                         object     = ls_buffer-object
                                                         object_row = ls_buffer-row
                                                         devclass   = ls_buffer-devclass
                                                         changed_on = sy-datum
                                                         changed_at = sy-uzeit
                                                         changed_by = sy-uname ) ).

*   Delete WU calculated from ZHM
    DELETE FROM zpe_t_hm_wu WHERE type    = iv_type AND
                                ( wu_type = zcl_pe_hm=>gc_s_wu_type-abap OR
                                  wu_type = zcl_pe_hm=>gc_s_wu_type-amdp OR
                                  wu_type = zcl_pe_hm=>gc_s_wu_type-cds ). "#EC CI_SUBRC

*   Delete WU from REST calls older than a year
    DATA(lv_date) = CONV datum( sy-datum - 365 ).
    DELETE FROM zpe_t_hm_wu WHERE type       EQ iv_type AND
                                  wu_type    EQ zcl_pe_hm=>gc_s_wu_type-rest AND
                                  changed_on LT lv_date.  "#EC CI_SUBRC

    INSERT zpe_t_hm_wu FROM TABLE lt_buffer.
    IF sy-subrc = 0.
      COMMIT WORK.
    ENDIF.

  ENDMETHOD.


  METHOD read_where_used_buffer.

    SELECT id, wu_type AS type, object, object_row AS row, devclass
        FROM zpe_t_hm_wu INTO TABLE @rt_result
       WHERE type = @iv_type AND
             devclass IN @it_dev_classes
       ORDER BY PRIMARY KEY.                              "#EC CI_SUBRC

  ENDMETHOD.

  METHOD search_on_abap_class.

    TYPES: BEGIN OF ltyp_s_source_object,
             class  TYPE seoclname,
             method TYPE seocpdname,
           END OF ltyp_s_source_object.

    DATA: lt_source_objects TYPE TABLE OF rsfind,
          lt_hm_source_obj  TYPE STANDARD TABLE OF ltyp_s_source_object,
          lt_hits           TYPE sci_findlst.



*-- Get Class & Methods
    TRY.
        zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                is_filter       = iv_type
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                      IMPORTING et_table        = lt_hm_source_obj ).

        LOOP AT lt_hm_source_obj ASSIGNING FIELD-SYMBOL(<ls_method>).
          INSERT VALUE #( encl_obj = CONV #( <ls_method>-class )
                          object   = CONV #( <ls_method>-method ) ) INTO TABLE lt_source_objects.
          INSERT VALUE #( sign = 'I' option = 'EQ' low = |{ <ls_method>-class }=>{ <ls_method>-method }(| ) INTO TABLE ct_filter.
          INSERT VALUE #( sign = 'I' option = 'EQ' low = |{ <ls_method>-class }=>{ <ls_method>-method }| ) INTO TABLE ct_filter.
        ENDLOOP.

      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.


*-- Where used ABAP Class API in ABAP objects
    CALL FUNCTION 'RS_EU_CROSSREF'
      EXPORTING
        i_find_obj_cls           = 'OM'
        no_dialog                = abap_true
        without_text             = abap_true
        with_generated_objects   = abap_true
      TABLES
        i_findstrings            = lt_source_objects
        o_founds                 = lt_hits
      EXCEPTIONS
        not_executed             = 1
        not_found                = 2
        illegal_object           = 3
        no_cross_for_this_object = 4
        batch                    = 5
        batchjob_error           = 6
        wrong_type               = 7
        object_not_exist         = 8
        OTHERS                   = 9.
    IF sy-subrc = 0.
      INSERT LINES OF lt_hits INTO TABLE ct_hits.
    ENDIF.

  ENDMETHOD.

  METHOD search_on_abap_cds.

    DATA: lt_source_objects TYPE TABLE OF rsfind,
          lv_cds_view       TYPE string,
          lt_hits           TYPE sci_findlst.

*-- Get HM CDS View
    TRY.
        zcl_pe_hm_complex=>get_value( EXPORTING iv_id           = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                                is_filter       = iv_type
                                                iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                      IMPORTING ev_value        = lv_cds_view ).

        INSERT VALUE #( object = lv_cds_view  ) INTO TABLE lt_source_objects.
        INSERT VALUE #( sign = 'I' option = 'CP' low = |{ to_upper( lv_cds_view ) }*| ) INTO TABLE ct_filter.

      CATCH zcx_pe_hm.
        RETURN.
    ENDTRY.


*-- Search CDS view in ABAP objects
    CALL FUNCTION 'RS_EU_CROSSREF'
      EXPORTING
        i_find_obj_cls           = 'DO'
        i_scope_obj_cls          = 'OM'
        no_dialog                = abap_true
        without_text             = abap_true
        with_generated_objects   = abap_true
      TABLES
        i_findstrings            = lt_source_objects
        o_founds                 = lt_hits
      EXCEPTIONS
        not_executed             = 1
        not_found                = 2
        illegal_object           = 3
        no_cross_for_this_object = 4
        batch                    = 5
        batchjob_error           = 6
        wrong_type               = 7
        object_not_exist         = 8
        error_message            = 9
        OTHERS                   = 10.
    IF sy-subrc = 0.
      INSERT LINES OF lt_hits INTO TABLE ct_hits.
    ENDIF.

  ENDMETHOD.


  METHOD is_amdp.

    READ TABLE it_code_tokens TRANSPORTING NO FIELDS WITH KEY str = 'HDB'.
    IF sy-subrc = 0.
      rv_result = abap_true.
    ENDIF.

  ENDMETHOD.

  METHOD user_command_1200.

    CASE sy-ucomm.

*     Save
      WHEN 'PB01'.
        TRY.
            DATA(lv_mode) = COND #( WHEN gs_screen_1200-mode = 'C' THEN zcl_pe_hm_encrypted=>gc_s_mode-create
                                    WHEN gs_screen_1200-mode = 'U' AND is_system_editable( ) THEN zcl_pe_hm_encrypted=>gc_s_mode-update_all
                                    ELSE zcl_pe_hm_encrypted=>gc_s_mode-update_data ).
            DATA(lv_new_id) = zcl_pe_hm_encrypted=>save( is_hc   = gs_screen_1200
                                                         iv_mode = lv_mode ).
            MESSAGE s036(zpe_hm) WITH lv_new_id.
          CATCH zcx_pe_hm INTO DATA(lo_exc_save).
            MESSAGE lo_exc_save DISPLAY LIKE 'E'.
        ENDTRY.
        LEAVE TO SCREEN 0.

*     Cancel
      WHEN 'PB02'.
        LEAVE TO SCREEN 0.

    ENDCASE.

  ENDMETHOD.

  METHOD status_1200.

*   Exclude SAVE button
    DATA(lv_is_system_editable) = is_system_editable( ).
    IF gs_screen_1200-mode = 'C' OR gs_screen_1200-mode = 'U'.
      SET PF-STATUS '1200'.
    ELSE.
      SET PF-STATUS '1200' EXCLUDING 'PB01'.
    ENDIF.


*   Data masked in display mode
    IF gs_screen_1200-mode = 'D'.
      gs_screen_1200-data_s = '*******'.
    ENDIF.

*   Field properties
    LOOP AT SCREEN.
      IF screen-name = 'GS_SCREEN_1200-DESCRIPTION'.
        IF gs_screen_1200-mode = 'C' OR
           gs_screen_1200-mode = 'U' AND lv_is_system_editable = abap_true.
          screen-input = 1.
        ELSE.
          screen-input = 0.
        ENDIF.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
      IF screen-name = 'GS_SCREEN_1200-DATA_S'.
        IF gs_screen_1200-mode = 'C' OR gs_screen_1200-mode = 'U'.
          screen-invisible = 1.
          screen-input = 1.
        ELSE.
          screen-input = 0.
        ENDIF.
        MODIFY SCREEN.
        CONTINUE.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD search_encrypted.

*-- Search where-used in ABAP or HANA
    CLEAR et_programs.
    et_programs = search_where_used( iv_buffer      = p_buf
                                     iv_type        = zcl_pe_hm_encrypted=>gc_type
                                     it_dev_classes = it_dev_classes ).

*   No usage or nothing found in development class on selection screen
    IF et_programs IS INITIAL.
      RETURN.
    ENDIF.


*-- Build filters to run search on HANA DB
    build_filters_encrypted( EXPORTING it_programs        = et_programs
                             IMPORTING ev_filter_ids      = DATA(lv_filter_ids)
                                       ev_filter_e070     = DATA(lv_filter_e070)
                                       ev_filter_wi       = DATA(lv_filter_wi)
                                       ev_filter_ids_used = DATA(lv_filter_ids_used) ).

*-- Search
    TRY.
        zcl_pe_hm_encrypted=>search( EXPORTING iv_filter_ids      = lv_filter_ids
                                               iv_filter_e070     = lv_filter_e070
                                               iv_filter_wi       = lv_filter_wi
                                               iv_filter_ids_used = lv_filter_ids_used
                                               iv_type            = zcl_pe_hm_encrypted=>gc_type
                                               iv_cust_object     = zcl_pe_hm_basic=>get_value( iv_id = '8' iv_sequence = '4' )
                                               iv_in_use_no       = zcl_pe_hm=>gc_s_in_use-no
                                               iv_in_use_yes      = zcl_pe_hm=>gc_s_in_use-yes
                                               iv_active_yes      = zcl_pe_hm=>gc_s_active-yes
                                               iv_active_no       = zcl_pe_hm=>gc_s_active-no
                                               iv_type_in         = zcl_pe_hm=>gc_s_md_type-in
                                               iv_type_out        = zcl_pe_hm=>gc_s_md_type-out
                                               iv_client          = CONV mandt( zcl_pe_hm_basic=>get_value( '44' ) )
                                     IMPORTING et_main            = et_main
                                               et_trs             = et_trs
                                               et_cns             = et_cns ).

      CATCH cx_amdp_execution_failed.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.


  METHOD build_filters_encrypted.

    TRY.
        ev_filter_e070 = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'TRKORR'     dref = REF #( s_tr[] ) )
                                                                                      ( name = 'TRFUNCTION' dref = REF #( s_trtype[] ) )
                                                                                      ( name = 'AS4TEXT'    dref = REF #( s_trd[] ) ) ) ).

        ev_filter_wi   = cl_shdb_seltab=>combine_seltabs( it_named_seltabs = VALUE #( ( name = 'WORK_ITEM'  dref = REF #( mt_work_items[] ) ) ) ).

        build_filter_ids_encrypted( EXPORTING it_programs        = it_programs
                                    IMPORTING ev_filter_ids      = ev_filter_ids
                                              ev_filter_ids_used = ev_filter_ids_used ).
      CATCH cx_shdb_exception.
        RAISE EXCEPTION TYPE zcx_pe_hm MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.


  METHOD build_filter_ids_encrypted.

    DATA lt_ids   TYPE RANGE OF zpe_hm_id.


    CLEAR: ev_filter_ids, ev_filter_ids_used.

*   Convert data
    LOOP AT s_id ASSIGNING FIELD-SYMBOL(<ls_id_generic>).
      APPEND INITIAL LINE TO lt_ids ASSIGNING FIELD-SYMBOL(<ls_id>).
      <ls_id> = CORRESPONDING #( <ls_id_generic> ).
      <ls_id>-low = |{ <ls_id>-low ALPHA = IN }|.
    ENDLOOP.

*   Selection screen
    ev_filter_ids = cl_shdb_seltab=>combine_seltabs( iv_client_field  = 'MANDT'
                                                     it_named_seltabs = VALUE #( ( name = 'ID'            dref = REF #( lt_ids[] ) )
                                                                                 ( name = 'DESCRIPTION'   dref = REF #( s_desc[] ) )
                                                                                 ( name = 'CREATED_ON'    dref = REF #( s_cr_on[] ) )
                                                                                 ( name = 'CREATED_AT'    dref = REF #( s_cr_at[] ) )
                                                                                 ( name = 'CREATED_BY'    dref = REF #( s_cr_by[] ) )
                                                                                 ( name = 'CHANGED_ON'    dref = REF #( s_ch_on[] ) )
                                                                                 ( name = 'CHANGED_AT'    dref = REF #( s_ch_at[] ) )
                                                                                 ( name = 'CHANGED_BY'    dref = REF #( s_ch_by[] ) ) ) ).
*   Used IDs
    DATA(lt_programs) = it_programs[].
    SORT lt_programs BY id.
    DELETE ADJACENT DUPLICATES FROM lt_programs COMPARING id.
    LOOP AT lt_programs ASSIGNING FIELD-SYMBOL(<ls_program>).
      IF ev_filter_ids_used IS INITIAL.
        ev_filter_ids_used = |( ID = '{ <ls_program>-id }' )|.
      ELSE.
        ev_filter_ids_used = |{ ev_filter_ids_used } OR ( ID = '{ <ls_program>-id }' )|.
      ENDIF.
    ENDLOOP.

    IF s_dc[] IS NOT INITIAL.
      IF ev_filter_ids IS INITIAL.
        ev_filter_ids  = ev_filter_ids_used.
      ELSE.
        ev_filter_ids  = |( { ev_filter_ids } ) AND ( { ev_filter_ids_used } )|.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD is_system_editable.

    DATA lv_client_edit TYPE t000-cccoractiv.

    CALL FUNCTION 'TR_SYS_PARAMS'
      IMPORTING
        system_client_edit = lv_client_edit
      EXCEPTIONS
        no_systemname      = 1
        no_systemtype      = 2
        OTHERS             = 3.
    IF sy-subrc = 0 AND lv_client_edit = '1'.
      rv_result = abap_true.
    ENDIF.

  ENDMETHOD.

  METHOD on_delete.

    CASE ms_main_sel-type.

      WHEN zcl_pe_hm_encrypted=>gc_type.
        TRY.
            zcl_pe_hm_encrypted=>delete( CONV #( ms_main_sel-id )  ).
          CATCH zcx_pe_hm INTO DATA(lo_exc).
            MESSAGE lo_exc DISPLAY LIKE 'E'.
        ENDTRY.

        search_all( ).
        refresh_alvs( ).

      WHEN OTHERS.
        MESSAGE s043(zpe_hm).

    ENDCASE.

  ENDMETHOD.

  METHOD status_2000.

    DATA lt_fcode TYPE TABLE OF sy-ucomm.

    IF is_system_editable( ).
      SET PF-STATUS '2000'.
    ELSE.
      lt_fcode = VALUE #( ( 'CREATE' ) (  'DELE' ) ).
      SET PF-STATUS '2000' EXCLUDING lt_fcode.
    ENDIF.

    TRY.
        init_2000( ).
      CATCH cx_salv_msg cx_salv_not_found cx_salv_existing cx_salv_data_error.
        MESSAGE e001(zpe_hm).
    ENDTRY.

  ENDMETHOD.


  METHOD get_last_buffer_update.

    SELECT changed_on, changed_at INTO @DATA(ls_last_date)
      UP TO 1 ROWS
      FROM zpe_t_hm_wu
      WHERE changed_at IN ( SELECT MAX( changed_at ) FROM zpe_t_hm_wu
                              WHERE changed_on IN ( SELECT MAX( changed_on ) FROM zpe_t_hm_wu ) ).
    ENDSELECT.
    IF sy-subrc = 0.
      gv_buf = |{ TEXT-s04 } { ls_last_date-changed_on DATE = USER } { ls_last_date-changed_at TIME = USER } )|.
    ENDIF.
  ENDMETHOD.

ENDCLASS.