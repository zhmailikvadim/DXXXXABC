CLASS lcl_hm_demo_complex DEFINITION CREATE PRIVATE FINAL.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* CANOCAR      | 14.02.2022 | 9407      : Hardcode Manager             *
*              |            | DS4K900411                               *
*----------------------------------------------------------------------*
* CANOCAR      | 09.05.2022 | 11153     : IS_ACTIVE?                   *
*              |            | DS4K918494                               *
*----------------------------------------------------------------------*

  PUBLIC SECTION.
    CLASS-METHODS start_of_selection.
  PRIVATE SECTION.

ENDCLASS.

CLASS lcl_hm_demo_complex IMPLEMENTATION.

  METHOD start_of_selection.

    IF rb_001 = abap_true.

      DATA: lv_out_001    TYPE string,
            lv_filter_001 TYPE zpe_hm_type VALUE '1'.
      TRY.
          zcl_pe_hm_complex=>get_value( EXPORTING iv_id     = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                                  is_filter = lv_filter_001
                                        IMPORTING ev_value  = lv_out_001 ).
          cl_demo_output=>display( lv_out_001 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_001).
          MESSAGE lo_exc_001.
      ENDTRY.
    ENDIF.


    IF rb_002 = abap_true.

      DATA: lv_out_002    TYPE string,
            lv_filter_002 TYPE zpe_hm_type VALUE '1'.
      TRY.
          zcl_pe_hm_complex=>get_value( EXPORTING iv_id     = 'NOT_EXIST'
                                                  is_filter = lv_filter_002
                                        IMPORTING ev_value  = lv_out_002 ).
          cl_demo_output=>display( lv_out_002 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_002).
          MESSAGE lo_exc_002.
      ENDTRY.
    ENDIF.


    IF rb_003 = abap_true.

      DATA: lv_out_003    TYPE string,
            lv_filter_003 TYPE zpe_hm_type VALUE '9'.
      TRY.
          zcl_pe_hm_complex=>get_value( EXPORTING iv_id     = '024F85009E261EEC8FAE3D3B4D4CE0D2'
                                                  is_filter = lv_filter_003
                                        IMPORTING ev_value  = lv_out_003 ).
          cl_demo_output=>display( lv_out_003 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_003).
          MESSAGE lo_exc_003.
      ENDTRY.
    ENDIF.


    IF rb_004 = abap_true.

      TYPES: BEGIN OF ltyp_s_004,
               class  TYPE seoclname,
               method TYPE seocpdname,
             END OF ltyp_s_004.

      DATA: lv_filter_004 TYPE zpe_hm_type VALUE '1',
            lt_out_004    TYPE STANDARD TABLE OF ltyp_s_004.

      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                  is_filter       = lv_filter_004
                                                  iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                        IMPORTING et_table        = lt_out_004 ).

          cl_demo_output=>display( lt_out_004 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_004).
          MESSAGE lo_exc_004.
      ENDTRY.
    ENDIF.


    IF rb_005 = abap_true.

      TYPES: BEGIN OF ltyp_s_f005,
               zpe_hm_type TYPE zpe_hm_type,
               another     TYPE string,
             END OF ltyp_s_f005.

      TYPES: BEGIN OF ltyp_s_005,
               seoclname  TYPE seoclname,
               another    TYPE string,
               seocpdname TYPE seocpdname,
             END OF ltyp_s_005.

      DATA: lt_out_005    TYPE STANDARD TABLE OF ltyp_s_005.

      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id     = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                  is_filter = VALUE ltyp_s_f005( zpe_hm_type = '1' )
                                        IMPORTING et_table  = lt_out_005 ).

          cl_demo_output=>display( lt_out_005 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_005).
          MESSAGE lo_exc_005.
      ENDTRY.
    ENDIF.


    IF rb_006 = abap_true.

      TYPES: BEGIN OF ltyp_s_f006,
               type    TYPE zpe_hm_type,
               another TYPE string,
             END OF ltyp_s_f006.

      TYPES: BEGIN OF ltyp_s_006,
               class   TYPE seoclname,
               another TYPE string,
               method  TYPE seocpdname,
             END OF ltyp_s_006.

      DATA: lt_out_006 TYPE STANDARD TABLE OF ltyp_s_006.

      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id           = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                  is_filter       = VALUE ltyp_s_f006( type = '1' )
                                                  iv_mapping_type = zcl_pe_hm_complex=>gc_s_mapping_type-data_elements
                                        IMPORTING et_table        = lt_out_006 ).

          cl_demo_output=>display( lt_out_006 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_006).
          MESSAGE lo_exc_006.
      ENDTRY.
    ENDIF.


    IF rb_007 = abap_true.

      TYPES: BEGIN OF ltyp_s_f007,
               zpe_hm_type TYPE zpe_hm_type,
               another     TYPE string,
             END OF ltyp_s_f007.

      TYPES: BEGIN OF ltyp_s_007,
               seoclname  TYPE i,
               another    TYPE string,
               seocpdname TYPE seocpdname,
             END OF ltyp_s_007.

      DATA: lt_out_007 TYPE STANDARD TABLE OF ltyp_s_007.

      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id     = '0239FC3B8D041EDC8F9750BFEB90BF59'
                                                  is_filter = VALUE ltyp_s_f007( zpe_hm_type = '1' )
                                        IMPORTING et_table  = lt_out_007 ).

          cl_demo_output=>display( lt_out_007 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_007).
          MESSAGE lo_exc_007.
      ENDTRY.
    ENDIF.


    IF rb_008 = abap_true.

      TYPES: BEGIN OF ltyp_s_008,
               seoclname  TYPE seocpdname,
               another    TYPE string,
               seocpdname TYPE seocpdname,
             END OF ltyp_s_008.

      DATA: lt_out_008 TYPE STANDARD TABLE OF ltyp_s_008.

      TRY.
          zcl_pe_hm_complex=>get_table( EXPORTING iv_id    = '0239FC3B8D041EDC8FC38F494CA5BF59'
                                        IMPORTING et_table = lt_out_008 ).

          cl_demo_output=>display( lt_out_008 ).
        CATCH zcx_pe_hm INTO DATA(lo_exc_008).
          MESSAGE lo_exc_008.
      ENDTRY.
    ENDIF.


    IF rb_009 = abap_true.

      TYPES: BEGIN OF ltyp_s_009,
               /aif/ns        TYPE /aif/ns,
               /aif/ifname    TYPE /aif/ifname,
               /aif/ifversion TYPE /aif/ifversion,
               kunwe          TYPE kunwe,
               vkorg          TYPE vkorg,
               vstel          TYPE vstel,
             END OF ltyp_s_009.

      IF zcl_pe_hm_complex=>is_active(  iv_id     = '024F85009E261EECB3A6CC44B35E40D2'
                                        is_filter = VALUE ltyp_s_009( /aif/ns = 'ZSDSLS' /aif/ifname = 'DN3' /aif/ifversion = '1' kunwe = '1000000054' vkorg = '0DE1' ) ).
        cl_demo_output=>display( abap_true ).
      ENDIF.

    ENDIF.

  ENDMETHOD.

ENDCLASS.