*&---------------------------------------------------------------------*
*& Include          ZSD_R_FULFIL_MD_INTEGR_CLI
*&---------------------------------------------------------------------*
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* UAKASAZA    | 10.01.2023 | 16555     : [Feature] [PLATFORM] DC Capa *
*              |            | DS4K939401                               *
*----------------------------------------------------------------------*
* CHUTLGIO     | 03.02.2023 | 16268     : Factory Calendar Replication *
*              |            | DS4K938254                               *
*----------------------------------------------------------------------*
* ZHMAIVAD     | 28.04.2023 | 20812     : Factory Calendar Replication *
*              |            | DS4K951191                               *
*----------------------------------------------------------------------*
* BALUNYAN     | 11.05.2023 | 16555     : [Feature] [PLATFORM] DC Capa *
*              |            | DS4K939401                               *
*----------------------------------------------------------------------*
* DOCHIIGO     | 10.08.2023 | 24047     : Development - Activate delta *
*              |            | DS4K960050                               *
*----------------------------------------------------------------------*
* BATCHVIN     | 21.01.2024 | 27871     : Factory Calendar Replication *
*              |            | DS4K975156                               *
*----------------------------------------------------------------------*
CLASS lcl_product_alloc_pd IMPLEMENTATION.
  METHOD check.
    CHECK sy-ucomm = 'ONLI' AND rb_3 = abap_true.
    IF s_plant-low IS INITIAL AND s_store-low IS INITIAL AND s_vkorg-low IS INITIAL.
      MESSAGE e001.
    ENDIF.
  ENDMETHOD.
  METHOD get_data.
    DATA lv_cond TYPE string.

    IF s_plant IS NOT INITIAL.
      lv_cond = 'PRODALLOCCHARC01 IN @S_PLANT AND PRODALLOCCHARC02 IN @S_DISCH'.
      lv_cond = |{ lv_cond } AND PRODALLOCCHARC03 IN @S_PACKT AND PRODALLOCCHARC04 IN @S_MATDV|.
      mv_plant_comb = abap_true.
    ELSEIF s_store IS NOT INITIAL.
      lv_cond = 'PRODALLOCCHARC01 IN @S_STORE AND PRODALLOCCHARC02 IN @S_MATDV'.
      mv_store_comb = abap_true.
    ELSEIF s_vkorg IS NOT INITIAL.
      lv_cond = 'PRODALLOCCHARC01 IN @S_VKORG AND PRODALLOCCHARC02 IN @S_DISCH'.
      IF s_vkbur IS NOT INITIAL.
        lv_cond = |{ lv_cond } AND PRODALLOCCHARC03 IN @S_VKBUR|.
        IF s_kunnr IS NOT INITIAL.
          lv_cond = |{ lv_cond } AND PRODALLOCCHARC04 IN @S_KUNNR AND PRODALLOCCHARC05 IN @S_MATNR|.
        ELSE.
          lv_cond = |{ lv_cond } AND PRODALLOCCHARC04 IN @S_MATNR|.
        ENDIF.
      ELSEIF s_kunnr IS NOT INITIAL.
        lv_cond = |{ lv_cond } AND PRODALLOCCHARC03 IN @S_KUNNR|.
      ELSEIF s_matnr IS NOT INITIAL.
        lv_cond = |{ lv_cond } AND PRODALLOCCHARC03 IN @S_MATNR|.
      ENDIF.
      mv_sales_org_comb = abap_true.
    ENDIF.
    ##TOO_MANY_ITAB_FIELDS
    SELECT charcvaluecombinationuuid, productallocationobjectuuid, productallocationobject, prodalloccharc01, prodalloccharc02, prodalloccharc03, prodalloccharc04, prodalloccharc05,
           prodalloccharc06, prodalloccharc07, prodalloccharc08, prodalloccharc09, prodalloccharc10, prodallocationactivationstatus, charcvaluetextisrequested, charcvalcombnchangemode
      FROM c_prodallocobjplngdatacombnwd
      WHERE productallocationobjectuuid = @p_prall
        AND (lv_cond)
      INTO CORRESPONDING FIELDS OF TABLE @mt_combnwd.  "#EC CI_DYNWHERE
    IF sy-subrc NE 0.
      RETURN.
    ENDIF.
    IF mt_combnwd IS NOT INITIAL.
      SORT mt_combnwd BY charcvaluecombinationuuid productallocationobjectuuid.
      DATA(lt_combnwd) = mt_combnwd.
      DELETE ADJACENT DUPLICATES FROM lt_combnwd COMPARING charcvaluecombinationuuid.

      SELECT prodallocationtimeseriesuuid, productallocationobjectuuid, charcvaluecombinationuuid, prodallocationperiodstartdate, prodallocperiodstarttimezone,
             prodallocperdstartutcdatetime, prodallocperiodendtimezone, prodallocperiodendutcdatetime, productallocationquantity, productallocationquantityunit
      FROM c_prodallocobjplngdataserswd
      FOR ALL ENTRIES IN @lt_combnwd
      WHERE productallocationobjectuuid = @lt_combnwd-productallocationobjectuuid
        AND charcvaluecombinationuuid = @lt_combnwd-charcvaluecombinationuuid
        AND prodallocationperiodstartdate IN @s_datum
      INTO CORRESPONDING FIELDS OF TABLE @mt_serswd. "#EC CI_NO_TRANSFORM
      IF sy-subrc NE 0.
        RETURN.
      ENDIF.
      SORT mt_serswd BY productallocationobjectuuid charcvaluecombinationuuid prodallocationperiodstartdate.
      IF mt_serswd IS NOT INITIAL.
        DATA(lt_serswd) = mt_serswd.
        SORT lt_serswd BY charcvaluecombinationuuid prodallocationperiodstartdate.
        DELETE ADJACENT DUPLICATES FROM lt_serswd COMPARING charcvaluecombinationuuid prodallocationperiodstartdate.
        SELECT *
        FROM c_prodalloccnsmpnoverview
        INTO TABLE @mt_overview
        FOR ALL ENTRIES IN @lt_serswd
        WHERE charcvaluecombinationuuid = @lt_serswd-charcvaluecombinationuuid
          AND startdate = @lt_serswd-prodallocationperiodstartdate. "#EC CI_NO_TRANSFORM
        IF sy-subrc NE 0.
          RETURN.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.
  METHOD process_data.
    CASE abap_true.
      WHEN mv_plant_comb.
        DATA(lt_plant) = VALUE zsd_tt_prodallocacharact( FOR ls_combnwd IN mt_combnwd ( ls_combnwd-prodalloccharc01 ) ).
        SORT lt_plant.
        DELETE ADJACENT DUPLICATES FROM lt_plant.
        SORT mt_combnwd BY prodalloccharc01 prodalloccharc02 prodalloccharc03 prodalloccharc04.
        LOOP AT lt_plant ASSIGNING FIELD-SYMBOL(<lv_plant>).
          APPEND INITIAL LINE TO mt_prod_alloc ASSIGNING FIELD-SYMBOL(<ls_prod_alloc>).
          LOOP AT mt_combnwd ASSIGNING FIELD-SYMBOL(<ls_combnwd>) WHERE prodalloccharc01 = <lv_plant>. "#EC CI_STDSEQ "#EC CI_NESTED
            <ls_prod_alloc>-productallocationobject = condense( <ls_combnwd>-productallocationobject ).
            <ls_prod_alloc>-charcomb = <lv_plant>.
            ##WARN_OK
            IF line_exists( <ls_prod_alloc>-t_prod_allocation[ plant                = <ls_combnwd>-prodalloccharc01
                                                               distributionchannel  = <ls_combnwd>-prodalloccharc02
                                                               packingtype          = <ls_combnwd>-prodalloccharc03
                                                               materialdivision     = <ls_combnwd>-prodalloccharc04 ] ). "#EC CI_STDSEQ
              CONTINUE.
            ELSE.
              APPEND INITIAL LINE TO <ls_prod_alloc>-t_prod_allocation ASSIGNING FIELD-SYMBOL(<ls_prod_allocation>).
              <ls_prod_allocation>-plant = <ls_combnwd>-prodalloccharc01.
              <ls_prod_allocation>-distributionchannel = <ls_combnwd>-prodalloccharc02.
              <ls_prod_allocation>-packingtype = <ls_combnwd>-prodalloccharc03.
              <ls_prod_allocation>-materialdivision = <ls_combnwd>-prodalloccharc04.
              <ls_prod_allocation>-productallocobjectuuid = <ls_combnwd>-productallocationobjectuuid.
              <ls_prod_allocation>-productallocobject = condense( <ls_combnwd>-productallocationobject ).
              <ls_prod_allocation>-datefrom = s_datum-low.
              <ls_prod_allocation>-dateto = s_datum-high.
              LOOP AT mt_combnwd ASSIGNING FIELD-SYMBOL(<ls_combnwd_2>) WHERE prodalloccharc01 = <ls_combnwd>-prodalloccharc01
                AND prodalloccharc02 = <ls_combnwd>-prodalloccharc02 AND prodalloccharc03 = <ls_combnwd>-prodalloccharc03 AND prodalloccharc04 = <ls_combnwd>-prodalloccharc04. "#EC CI_STDSEQ "#EC CI_NESTED
                APPEND INITIAL LINE TO <ls_prod_allocation>-t_objectandcharvalcomb ASSIGNING FIELD-SYMBOL(<ls_objectandcharvalcomb>).
                <ls_objectandcharvalcomb> = CORRESPONDING #( <ls_combnwd_2> MAPPING productallocobjectuuid        = productallocationobjectuuid
                                                                                    productallocobject            = productallocationobject
                                                                                    charvaluecombuuid             = charcvaluecombinationuuid
                                                                                    productalloccharacteristic01  = prodalloccharc01
                                                                                    productalloccharacteristic02  = prodalloccharc02
                                                                                    productalloccharacteristic03  = prodalloccharc03
                                                                                    productalloccharacteristic04  = prodalloccharc04
                                                                                    productalloccharacteristic05  = prodalloccharc05
                                                                                    productalloccharacteristic06  = prodalloccharc06
                                                                                    productalloccharacteristic07  = prodalloccharc07
                                                                                    productalloccharacteristic08  = prodalloccharc08
                                                                                    productalloccharacteristic09  = prodalloccharc09
                                                                                    productalloccharacteristic10  = prodalloccharc10
                                                                                    productallocactivestatus      = prodallocationactivationstatus
                                                                                    activeindicator               = charcvaluetextisrequested
                                                                                    charvaluecombchangemode       = charcvalcombnchangemode ).
                LOOP AT mt_serswd ASSIGNING FIELD-SYMBOL(<ls_serswd>) WHERE productallocationobjectuuid = <ls_combnwd_2>-productallocationobjectuuid
                  AND charcvaluecombinationuuid = <ls_combnwd_2>-charcvaluecombinationuuid. "#EC CI_STDSEQ "#EC CI_NESTED
                  APPEND INITIAL LINE TO <ls_objectandcharvalcomb>-t_time_series_consumption ASSIGNING FIELD-SYMBOL(<ls_time_series_consumption>).
                  <ls_time_series_consumption> = CORRESPONDING #( <ls_serswd> MAPPING productalloctimeseriesuuid    = prodallocationtimeseriesuuid
                                                                                      productallocobjectuuid        = productallocationobjectuuid
                                                                                      charvaluecombuuid             = charcvaluecombinationuuid
                                                                                      startdateofproductallocperd   = prodallocationperiodstartdate
                                                                                      prodallocperdstarttimezone    = prodallocperiodstarttimezone
                                                                                      prodallocperdstartutcdatetime = prodallocperdstartutcdatetime
                                                                                      prodallocperdendtimezone      = prodallocperiodendtimezone
                                                                                      prodallocperdendutcdatetime   = prodallocperiodendutcdatetime
                                                                                      productallocquantity          = productallocationquantity
                                                                                      productallocquantityunit      = productallocationquantityunit ).
                  READ TABLE mt_overview ASSIGNING FIELD-SYMBOL(<ls_overview>) WITH KEY charcvaluecombinationuuid = <ls_serswd>-charcvaluecombinationuuid startdate = <ls_serswd>-prodallocationperiodstartdate. "#EC CI_STDSEQ
                  IF sy-subrc EQ 0.
                    <ls_time_series_consumption>-startdateofprodallocconsump = <ls_overview>-startdate.
                    <ls_time_series_consumption>-prodallocconsumpnegopenqty  = <ls_overview>-negativeopenquantity.
                    <ls_time_series_consumption>-prodallocconsumpopenqty     = <ls_overview>-openquantity.
                    <ls_time_series_consumption>-prodallocconsumpassigqty    = <ls_overview>-prodallocassignedquantity.
                    <ls_time_series_consumption>-prodallocconsumpqty         = <ls_overview>-productallocationquantity.
                    <ls_time_series_consumption>-prodallocconsumpqtyunit     = <ls_overview>-productallocationquantityunit.
                  ENDIF.
                ENDLOOP.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
      WHEN mv_store_comb.
        DATA(lt_store) = VALUE zsd_tt_prodallocacharact( FOR ls_combnwd IN mt_combnwd ( ls_combnwd-prodalloccharc01 ) ).
        SORT lt_store.
        DELETE ADJACENT DUPLICATES FROM lt_store.
        SORT mt_combnwd BY prodalloccharc01.
        LOOP AT lt_store ASSIGNING FIELD-SYMBOL(<lv_store>).
          APPEND INITIAL LINE TO mt_prod_alloc ASSIGNING <ls_prod_alloc>.
          LOOP AT mt_combnwd ASSIGNING <ls_combnwd> WHERE prodalloccharc01 = <lv_store>. "#EC CI_STDSEQ "#EC CI_NESTED
            <ls_prod_alloc>-productallocationobject = condense( <ls_combnwd>-productallocationobject ).
            <ls_prod_alloc>-charcomb = <lv_store>.
            ##WARN_OK
            IF line_exists( <ls_prod_alloc>-t_prod_allocation[ store = <ls_combnwd>-prodalloccharc01 ] ). "#EC CI_STDSEQ
              CONTINUE.
            ELSE.
              APPEND INITIAL LINE TO <ls_prod_alloc>-t_prod_allocation ASSIGNING <ls_prod_allocation>.
              <ls_prod_allocation>-store = <ls_combnwd>-prodalloccharc01.
              <ls_prod_allocation>-productallocobjectuuid = <ls_combnwd>-productallocationobjectuuid.
              <ls_prod_allocation>-productallocobject = condense( <ls_combnwd>-productallocationobject ).
              <ls_prod_allocation>-datefrom = s_datum-low.
              <ls_prod_allocation>-dateto = s_datum-high.
              LOOP AT mt_combnwd ASSIGNING <ls_combnwd_2> WHERE prodalloccharc01 = <ls_combnwd>-prodalloccharc01. "#EC CI_STDSEQ "#EC CI_NESTED
                APPEND INITIAL LINE TO <ls_prod_allocation>-t_objectandcharvalcomb ASSIGNING <ls_objectandcharvalcomb>.
                <ls_objectandcharvalcomb> = CORRESPONDING #( <ls_combnwd_2> MAPPING productallocobjectuuid        = productallocationobjectuuid
                                                                                    productallocobject            = productallocationobject
                                                                                    charvaluecombuuid             = charcvaluecombinationuuid
                                                                                    productalloccharacteristic01  = prodalloccharc01
                                                                                    productalloccharacteristic02  = prodalloccharc02
                                                                                    productalloccharacteristic03  = prodalloccharc03
                                                                                    productalloccharacteristic04  = prodalloccharc04
                                                                                    productalloccharacteristic05  = prodalloccharc05
                                                                                    productalloccharacteristic06  = prodalloccharc06
                                                                                    productalloccharacteristic07  = prodalloccharc07
                                                                                    productalloccharacteristic08  = prodalloccharc08
                                                                                    productalloccharacteristic09  = prodalloccharc09
                                                                                    productalloccharacteristic10  = prodalloccharc10
                                                                                    productallocactivestatus      = prodallocationactivationstatus
                                                                                    activeindicator               = charcvaluetextisrequested
                                                                                    charvaluecombchangemode       = charcvalcombnchangemode ).
                LOOP AT mt_serswd ASSIGNING <ls_serswd> WHERE productallocationobjectuuid = <ls_combnwd_2>-productallocationobjectuuid
                  AND charcvaluecombinationuuid = <ls_combnwd_2>-charcvaluecombinationuuid. "#EC CI_STDSEQ "#EC CI_NESTED
                  APPEND INITIAL LINE TO <ls_objectandcharvalcomb>-t_time_series_consumption ASSIGNING <ls_time_series_consumption>.
                  <ls_time_series_consumption> = CORRESPONDING #( <ls_serswd> MAPPING productalloctimeseriesuuid    = prodallocationtimeseriesuuid
                                                                                      productallocobjectuuid        = productallocationobjectuuid
                                                                                      charvaluecombuuid             = charcvaluecombinationuuid
                                                                                      startdateofproductallocperd   = prodallocationperiodstartdate
                                                                                      prodallocperdstarttimezone    = prodallocperiodstarttimezone
                                                                                      prodallocperdstartutcdatetime = prodallocperdstartutcdatetime
                                                                                      prodallocperdendtimezone      = prodallocperiodendtimezone
                                                                                      prodallocperdendutcdatetime   = prodallocperiodendutcdatetime
                                                                                      productallocquantity          = productallocationquantity
                                                                                      productallocquantityunit      = productallocationquantityunit ).
                  READ TABLE mt_overview ASSIGNING <ls_overview> WITH KEY charcvaluecombinationuuid = <ls_serswd>-charcvaluecombinationuuid startdate = <ls_serswd>-prodallocationperiodstartdate. "#EC CI_STDSEQ
                  IF sy-subrc EQ 0.
                    <ls_time_series_consumption>-startdateofprodallocconsump = <ls_overview>-startdate.
                    <ls_time_series_consumption>-prodallocconsumpnegopenqty  = <ls_overview>-negativeopenquantity.
                    <ls_time_series_consumption>-prodallocconsumpopenqty     = <ls_overview>-openquantity.
                    <ls_time_series_consumption>-prodallocconsumpassigqty    = <ls_overview>-prodallocassignedquantity.
                    <ls_time_series_consumption>-prodallocconsumpqty         = <ls_overview>-productallocationquantity.
                    <ls_time_series_consumption>-prodallocconsumpqtyunit     = <ls_overview>-productallocationquantityunit.
                  ENDIF.
                ENDLOOP.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
      WHEN mv_sales_org_comb.
        DATA(lt_sales_org) = VALUE zsd_tt_prodallocacharact( FOR ls_combnwd IN mt_combnwd ( ls_combnwd-prodalloccharc01 ) ).
        SORT lt_sales_org.
        DELETE ADJACENT DUPLICATES FROM lt_sales_org.
        SORT mt_combnwd BY prodalloccharc01 prodalloccharc02 prodalloccharc03 prodalloccharc04 prodalloccharc05.
        LOOP AT lt_sales_org ASSIGNING FIELD-SYMBOL(<lv_sales_org>).
          APPEND INITIAL LINE TO mt_prod_alloc ASSIGNING <ls_prod_alloc>.
          LOOP AT mt_combnwd ASSIGNING <ls_combnwd> WHERE prodalloccharc01 = <lv_sales_org>. "#EC CI_STDSEQ "#EC CI_NESTED
            <ls_prod_alloc>-productallocationobject = condense( <ls_combnwd>-productallocationobject ).
            <ls_prod_alloc>-charcomb = <lv_sales_org>.
            ##WARN_OK
            IF line_exists( <ls_prod_alloc>-t_prod_allocation[ salesorg             = <ls_combnwd>-prodalloccharc01
                                                               distributionchannel  = <ls_combnwd>-prodalloccharc02
                                                               salesoffice          = <ls_combnwd>-prodalloccharc03
                                                               customer             = <ls_combnwd>-prodalloccharc04
                                                               material             = <ls_combnwd>-prodalloccharc05 ] ) "#EC CI_STDSEQ

              OR line_exists( <ls_prod_alloc>-t_prod_allocation[  salesorg            = <ls_combnwd>-prodalloccharc01
                                                                  distributionchannel = <ls_combnwd>-prodalloccharc02
                                                                  salesoffice         = <ls_combnwd>-prodalloccharc03
                                                                  material            = <ls_combnwd>-prodalloccharc04 ] ) "#EC CI_STDSEQ

              OR line_exists( <ls_prod_alloc>-t_prod_allocation[  salesorg            = <ls_combnwd>-prodalloccharc01
                                                                  distributionchannel = <ls_combnwd>-prodalloccharc02
                                                                  customer            = <ls_combnwd>-prodalloccharc03
                                                                  material            = <ls_combnwd>-prodalloccharc04 ] ) "#EC CI_STDSEQ

              OR line_exists( <ls_prod_alloc>-t_prod_allocation[  salesorg            = <ls_combnwd>-prodalloccharc01
                                                                  distributionchannel = <ls_combnwd>-prodalloccharc02
                                                                  material            = <ls_combnwd>-prodalloccharc03 ] ). "#EC CI_STDSEQ

              CONTINUE.
            ELSE.
              APPEND INITIAL LINE TO <ls_prod_alloc>-t_prod_allocation ASSIGNING <ls_prod_allocation>.
              <ls_prod_allocation>-salesorg = <ls_combnwd>-prodalloccharc01.
              <ls_prod_allocation>-distributionchannel = <ls_combnwd>-prodalloccharc02.
              IF s_vkbur IS NOT INITIAL AND <ls_combnwd>-prodalloccharc03 IN s_vkbur.
                <ls_prod_allocation>-salesoffice = <ls_combnwd>-prodalloccharc03.
                IF s_kunnr IS NOT INITIAL AND <ls_combnwd>-prodalloccharc04 IN s_kunnr.
                  <ls_prod_allocation>-customer = <ls_combnwd>-prodalloccharc04.
                  <ls_prod_allocation>-material = <ls_combnwd>-prodalloccharc05.
                ELSEIF s_matnr IS NOT INITIAL AND <ls_combnwd>-prodalloccharc04 IN s_matnr.
                  <ls_prod_allocation>-material = <ls_combnwd>-prodalloccharc04.
                ENDIF.
              ELSEIF s_kunnr IS NOT INITIAL AND <ls_combnwd>-prodalloccharc03 IN s_kunnr.
                <ls_prod_allocation>-customer = <ls_combnwd>-prodalloccharc03.
                <ls_prod_allocation>-material = <ls_combnwd>-prodalloccharc04.
              ELSEIF s_matnr IS NOT INITIAL AND <ls_combnwd>-prodalloccharc03 IN s_matnr.
                <ls_prod_allocation>-material = <ls_combnwd>-prodalloccharc03.
              ENDIF.
              <ls_prod_allocation>-productallocobject = condense( <ls_combnwd>-productallocationobject ).
              <ls_prod_allocation>-productallocobjectuuid = <ls_combnwd>-productallocationobjectuuid.
              <ls_prod_allocation>-datefrom = s_datum-low.
              <ls_prod_allocation>-dateto = s_datum-high.
              LOOP AT mt_combnwd ASSIGNING <ls_combnwd_2> WHERE prodalloccharc01 = <ls_combnwd>-prodalloccharc01
                AND prodalloccharc02 = <ls_combnwd>-prodalloccharc02 AND prodalloccharc03 = <ls_combnwd>-prodalloccharc03
                AND prodalloccharc04 = <ls_combnwd>-prodalloccharc04 AND prodalloccharc05 = <ls_combnwd>-prodalloccharc05. "#EC CI_STDSEQ "#EC CI_NESTED
                APPEND INITIAL LINE TO <ls_prod_allocation>-t_objectandcharvalcomb ASSIGNING <ls_objectandcharvalcomb>.
                <ls_objectandcharvalcomb> = CORRESPONDING #( <ls_combnwd_2> MAPPING productallocobjectuuid        = productallocationobjectuuid
                                                                                    productallocobject            = productallocationobject
                                                                                    charvaluecombuuid             = charcvaluecombinationuuid
                                                                                    productalloccharacteristic01  = prodalloccharc01
                                                                                    productalloccharacteristic02  = prodalloccharc02
                                                                                    productalloccharacteristic03  = prodalloccharc03
                                                                                    productalloccharacteristic04  = prodalloccharc04
                                                                                    productalloccharacteristic05  = prodalloccharc05
                                                                                    productalloccharacteristic06  = prodalloccharc06
                                                                                    productalloccharacteristic07  = prodalloccharc07
                                                                                    productalloccharacteristic08  = prodalloccharc08
                                                                                    productalloccharacteristic09  = prodalloccharc09
                                                                                    productalloccharacteristic10  = prodalloccharc10
                                                                                    productallocactivestatus      = prodallocationactivationstatus
                                                                                    activeindicator               = charcvaluetextisrequested
                                                                                    charvaluecombchangemode       = charcvalcombnchangemode ).
                LOOP AT mt_serswd ASSIGNING <ls_serswd> WHERE productallocationobjectuuid = <ls_combnwd_2>-productallocationobjectuuid
                  AND charcvaluecombinationuuid = <ls_combnwd_2>-charcvaluecombinationuuid. "#EC CI_STDSEQ "#EC CI_NESTED
                  APPEND INITIAL LINE TO <ls_objectandcharvalcomb>-t_time_series_consumption ASSIGNING <ls_time_series_consumption>.
                  <ls_time_series_consumption> = CORRESPONDING #( <ls_serswd> MAPPING productalloctimeseriesuuid    = prodallocationtimeseriesuuid
                                                                                      productallocobjectuuid        = productallocationobjectuuid
                                                                                      charvaluecombuuid             = charcvaluecombinationuuid
                                                                                      startdateofproductallocperd   = prodallocationperiodstartdate
                                                                                      prodallocperdstarttimezone    = prodallocperiodstarttimezone
                                                                                      prodallocperdstartutcdatetime = prodallocperdstartutcdatetime
                                                                                      prodallocperdendtimezone      = prodallocperiodendtimezone
                                                                                      prodallocperdendutcdatetime   = prodallocperiodendutcdatetime
                                                                                      productallocquantity          = productallocationquantity
                                                                                      productallocquantityunit      = productallocationquantityunit ).
                  READ TABLE mt_overview ASSIGNING <ls_overview> WITH KEY charcvaluecombinationuuid = <ls_serswd>-charcvaluecombinationuuid startdate = <ls_serswd>-prodallocationperiodstartdate. "#EC CI_STDSEQ
                  IF sy-subrc EQ 0.
                    <ls_time_series_consumption>-startdateofprodallocconsump = <ls_overview>-startdate.
                    <ls_time_series_consumption>-prodallocconsumpnegopenqty  = <ls_overview>-negativeopenquantity.
                    <ls_time_series_consumption>-prodallocconsumpopenqty     = <ls_overview>-openquantity.
                    <ls_time_series_consumption>-prodallocconsumpassigqty    = <ls_overview>-prodallocassignedquantity.
                    <ls_time_series_consumption>-prodallocconsumpqty         = <ls_overview>-productallocationquantity.
                    <ls_time_series_consumption>-prodallocconsumpqtyunit     = <ls_overview>-productallocationquantityunit.
                  ENDIF.
                ENDLOOP.
              ENDLOOP.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.
  METHOD send_data.

    LOOP AT mt_prod_alloc ASSIGNING FIELD-SYMBOL(<ls_prod_alloc>).
      ms_kafka_key = VALUE zpe_s_kafka_key( event_name = mc_event_name
                                            event_key = |{ <ls_prod_alloc>-productallocationobject }_{ <ls_prod_alloc>-charcomb }| ).

      ms_kafka_data = VALUE zsd_s_aif_out_prodalloc_kafka( topic = mc_prod_alloc_topic
                                                        key = ms_kafka_key
                                                        value-metadata = CORRESPONDING #( ms_kafka_key )
                                                        value-payload  = <ls_prod_alloc>-t_prod_allocation ). "#EC CI_CONV_OK
      TRY.
          /aif/cl_enabler_xml=>transfer_to_aif( ms_kafka_data ).
          ##CATCH_ALL
        CATCH cx_root INTO DATA(lo_cx).

          MESSAGE lo_cx->get_longtext( ) TYPE 'I'.
      ENDTRY.

      MESSAGE s000.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.
CLASS lcl_outbound_scheduling_route IMPLEMENTATION.
  METHOD check.
    RETURN.
  ENDMETHOD.
  METHOD get_data.
    RETURN.
  ENDMETHOD.##NEEDED
  METHOD process_data.
    RETURN.
  ENDMETHOD.##NEEDED
  METHOD send_data.
    DATA:
      lt_depart TYPE RANGE OF i_plant-plant,
      lt_destin TYPE RANGE OF i_plant-plant,
      lt_shippo TYPE RANGE OF i_shippingpoint-shippingpoint,
      lt_shipco TYPE RANGE OF trolz-vsbed,
      lt_distrb TYPE RANGE OF zsd_t_os_lt-zvtweg,
      lt_lch_da TYPE zcl_sd_route_schedul_for_kafka=>gtyp_range_last_changed_date,
      lt_lch_ti TYPE zcl_sd_route_schedul_for_kafka=>gtyp_range_last_changed_time,
      lv_inctra TYPE abap_bool.

    APPEND VALUE #( low = p_depart sign = 'I' option = 'EQ' ) TO lt_depart.

    lt_destin[] = s_destin[].
    lt_shippo[] = s_shippo[].
    lt_shipco[] = s_shipco[].
    lt_distrb[] = s_distrb[].
    lt_lch_da[] = s_lch_da[].
    lt_lch_ti[] = s_lch_ti[].
    lv_inctra   = p_inctra.

    DATA(lo_send_to_kafka) = NEW zcl_sd_route_schedul_for_kafka( ).
    lo_send_to_kafka->get_data( it_departures           = lt_depart
                                it_destinations         = lt_destin
                                it_shipping_points      = lt_shippo
                                it_shipping_conditions  = lt_shipco
                                it_distribution_channel = lt_distrb
                                it_last_changed_date    = lt_lch_da
                                it_last_changed_time    = lt_lch_ti
                                iv_inc_transp_lt        = lv_inctra ).
    lo_send_to_kafka->send_to_kafka( ).
  ENDMETHOD.
ENDCLASS.
CLASS lcl_factory_calendar IMPLEMENTATION.
  METHOD check.
    RETURN.
  ENDMETHOD.
  METHOD get_data.
    RETURN.
  ENDMETHOD.##NEEDED
  METHOD process_data.
    RETURN.
  ENDMETHOD.##NEEDED
  METHOD send_data.
    DATA:
      lt_range_plant       TYPE RANGE OF i_plant-plant,
      lt_range_calendar_id TYPE RANGE OF tfacd-ident,
      lt_range_date        TYPE RANGE OF datum,
      lt_range_spras       TYPE RANGE OF spras.

* Begin of changes    3rd issue
    IF ( s_date-low IS INITIAL OR s_date-high IS INITIAL ) AND
         s_werks[] IS NOT INITIAL.
      SELECT i_plant~plant   AS plantname,
             I_FactoryCalendar~FactoryCalendar     AS Factorycal,
             I_FactoryCalendar~ValidityStartYear     AS fromyear,
             I_FactoryCalendar~ValidityEndYear     AS toyear
        FROM i_plant
        INNER JOIN I_FactoryCalendar ON i_plant~FactoryCalendar = I_FactoryCalendar~factorycalendar
       WHERE plant       IN @s_werks
        INTO TABLE @DATA(lt_from_to_years).
      IF sy-subrc EQ 0.
        LOOP AT lt_from_to_years ASSIGNING FIELD-SYMBOL(<ls_from_to>).
          DATA: lv_from_year TYPE d,
                lv_to_year   TYPE d.
          lv_from_year = <ls_from_to>-fromyear && '0101'.
          lv_to_year   = <ls_from_to>-toyear && 12 && 31.
          IF s_date-low IS INITIAL AND s_date-high IS NOT INITIAL.
            " Only From current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = lv_from_year
                            high   = s_date-high
                           ) TO s_date.
          ENDIF.

          IF s_date-high IS INITIAL AND s_date-low IS NOT INITIAL.
            " Only To current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = s_date-low
                            high   = lv_to_year
                           ) TO s_date.
          ENDIF.

          IF s_date-low IS INITIAL AND s_date-high IS INITIAL.
            " Both From and To current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = lv_from_year
                            high   = lv_to_year
                           ) TO s_date.
          ENDIF.
        ENDLOOP.
        IF ( s_date-low IS INITIAL AND s_date-high IS NOT INITIAL ) OR
           ( s_date-low IS NOT INITIAL AND s_date-high IS INITIAL ) .
          DELETE s_date[] INDEX 1.
        ENDIF.

      ENDIF.
    ENDIF.

    IF ( s_date-low IS INITIAL OR s_date-high IS INITIAL ) AND
            s_ident[] IS NOT INITIAL.
      SELECT i_plant~plant   AS plantname,
             I_FactoryCalendar~factorycalendar      AS Factorycal,
             I_FactoryCalendar~ValidityStartYear    AS fromyear,
             i_factorycalendar~ValidityEndYear      AS toyear
        FROM i_plant
        INNER JOIN i_factorycalendar ON i_plant~FactoryCalendar = I_FactoryCalendar~factorycalendar
       WHERE I_FactoryCalendar~factorycalendar IN @s_ident
        INTO TABLE @lt_from_to_years.
      IF sy-subrc EQ 0.
        LOOP AT lt_from_to_years ASSIGNING  <ls_from_to> .
          lv_from_year = <ls_from_to>-fromyear && '0101'.
          lv_to_year   = <ls_from_to>-toyear && 12 && 31.
          IF s_date-low IS INITIAL AND s_date-high IS NOT INITIAL.
            " Only From current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = lv_from_year
                            high   = s_date-high
                           ) TO s_date.
          ENDIF.

          IF s_date-high IS INITIAL AND s_date-low IS NOT INITIAL.
            " Only To current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = s_date-low
                            high   = lv_to_year
                           ) TO s_date.
          ENDIF.

          IF s_date-low IS INITIAL AND s_date-high IS INITIAL.
            " Both From and To current date is initial.
            APPEND VALUE #( sign   = 'I'
                            option = 'BT'
                            low    = lv_from_year
                            high   = lv_to_year
                           ) TO s_date.
          ENDIF.
        ENDLOOP.
        IF ( s_date-low IS INITIAL AND s_date-high IS NOT INITIAL ) OR
           ( s_date-low IS NOT INITIAL AND s_date-high IS INITIAL ) .
          DELETE s_date[] INDEX 1.
        ENDIF.

      ENDIF.
    ENDIF.

    IF s_date-low IS NOT INITIAL.
      DATA(lv_from) = s_date-low+0(4).
    ENDIF.

    IF  s_date-high IS NOT INITIAL.
      DATA(lv_to)   = s_date-high+0(4).
    ENDIF.

    IF s_ident[] IS NOT INITIAL.
      SELECT  fact~FactoryCalendar,
              fact~PublicHolidayCalendar,
              plan~plant AS plantname
        FROM i_factorycalendar AS fact
          LEFT OUTER JOIN i_plant AS plan ON fact~FactoryCalendar = plan~factorycalendar
        INTO TABLE @DATA(lt_factorycal_id)
       WHERE fact~FactoryCalendar IN @s_ident.
      IF sy-subrc EQ 0.
        LOOP AT lt_factorycal_id ASSIGNING FIELD-SYMBOL(<ls_faccal_id>).
          IF <ls_faccal_id>-plantname IS INITIAL.
            DATA(lo_fact) = NEW zcl_sd_factory_calendar_kafka( ).

            DATA : lv_err_msg TYPE char200.
            MESSAGE e005(zsd_fact_cal_replica) WITH <ls_faccal_id>-factorycalendar INTO lv_err_msg.
            lo_fact->create_log_message( iv_type    = 'E'
                                         iv_message = lv_err_msg ).
            lo_fact->save_log( ).
            CLEAR :  lv_err_msg.
          ELSE.
            DATA(lv_ret) = abap_true.
          ENDIF.
        ENDLOOP.
        IF lv_ret IS INITIAL.
          MESSAGE s003(zsd_fact_cal_replica).
          RETURN.
        ENDIF.
      ELSE.
        MESSAGE s003(zsd_fact_cal_replica).
        RETURN.
      ENDIF.
    ENDIF.

* End of changes

    lt_range_plant[] = s_werks[].
    lt_range_calendar_id[] = s_ident[].
    lt_range_date[] = s_date[].
    lt_range_spras[] = s_spras[].

    zcl_sd_factory_calendar_kafka=>validations( it_range_plant       = lt_range_plant
                                                it_range_calendar_id = lt_range_calendar_id ).

    DATA(lo_send_to_kafka) = NEW zcl_sd_factory_calendar_kafka( ).
    lo_send_to_kafka->send_to_kafka( it_range_plant       = lt_range_plant
                                     it_range_calendar_id = lt_range_calendar_id
                                     it_range_date        = lt_range_date
                                     it_range_spras       = lt_range_spras
                                     iv_from              = lv_from
                                     iv_to                = lv_to ).
  ENDMETHOD.
ENDCLASS.
CLASS lcl_process_factory IMPLEMENTATION.
  METHOD create.
    CASE abap_true.
      WHEN rb_1.
        ro_process = NEW lcl_outbound_scheduling_route( ).
      WHEN rb_2.
        ro_process = NEW lcl_factory_calendar( ).
      WHEN rb_3.
        ro_process = NEW lcl_product_alloc_pd( ).
      WHEN rb_4.
        ro_process = NEW lcl_gr_lead_time( ).
      WHEN OTHERS.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_gr_lead_time IMPLEMENTATION.
  METHOD check.
    CHECK sy-ucomm = 'ONLI' AND rb_4 = abap_true.
    IF p_ekorg IS INITIAL.
      MESSAGE e002.
    ENDIF.
  ENDMETHOD.
  METHOD get_data.
    DATA lv_cond TYPE string.

    IF p_ekorg IS NOT INITIAL.
      lv_cond = 'EKORG = @P_EKORG'.
    ENDIF.

    IF p_salech IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND ZZ1_ZSALES_CHANNEL_PDH = @P_SALECH|.
    ENDIF.

    IF s_vstel IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND BSART IN @S_VSTEL|.
    ENDIF.

    IF  p_ord_rs IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND ZZ1_ZORDERREASON_PDH = @P_ORD_RS|.
    ENDIF.

    IF s_recstr IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND WERKS IN @S_RECSTR|.
    ENDIF.
**BOC added by POLURISV
    IF s_chon IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND CHANGED_ON IN @S_CHON|.
    ENDIF.
    IF s_chat IS NOT INITIAL.
      lv_cond = |{ lv_cond } AND CHANGED_AT IN @S_CHAT|.
    ENDIF.
*    lv_cond = |{ lv_cond } AND ZDELETION_INDI = ' ' |.
**BOC added by POLURISV
    SELECT
*      'LT' as zlt_type,
           ekorg,
           zz1_zsales_channel_pdh,
           bsart,
           zz1_zorderreason_pdh,
           werks,
           zlead_time,
           zdeletion_indi
    FROM zsd_t_os_gr
    INTO CORRESPONDING FIELDS OF TABLE @mt_gr_ld    ##TOO_MANY_ITAB_FIELDS
    WHERE  (lv_cond).                                  "#EC CI_DYNWHERE

    IF sy-subrc <> 0.
      MESSAGE e003.
    ENDIF.

  ENDMETHOD.
  METHOD process_data.

    DATA: lt_gr_lt_condition TYPE zsd_tt_gr_lt_condition,
          lt_gr_lt           TYPE zsd_tt_gr_lead_time.

    LOOP AT mt_gr_ld ASSIGNING FIELD-SYMBOL(<ls_gr_ld>) GROUP BY ( ekorg = <ls_gr_ld>-ekorg
*                                                                   zlt_type = <ls_gr_ld>-zlt_type
       )  ASSIGNING FIELD-SYMBOL(<ls_group>).
      APPEND INITIAL LINE TO  lt_gr_lt ASSIGNING FIELD-SYMBOL(<ls_gr_lt>).
*      <ls_gr_lt>-lttype = <ls_group>-zlt_type.
      <ls_gr_lt>-purchasingorganisationid = <ls_group>-ekorg.

      CLEAR: lt_gr_lt_condition.

      LOOP AT GROUP <ls_group> ASSIGNING FIELD-SYMBOL(<ls_group_data>).
        APPEND INITIAL LINE TO lt_gr_lt_condition ASSIGNING FIELD-SYMBOL(<ls_gr_lt_condition>).
        <ls_gr_lt_condition>-saleschannel   = <ls_group_data>-zz1_zsales_channel_pdh.
        <ls_gr_lt_condition>-stotype        = <ls_group_data>-bsart.
        <ls_gr_lt_condition>-orderreason    = <ls_group_data>-zz1_zorderreason_pdh.
        <ls_gr_lt_condition>-receivingstore = <ls_group_data>-werks.
        <ls_gr_lt_condition>-grleadtime     = ceil( <ls_group_data>-zlead_time / 240000 ).
        <ls_gr_lt_condition>-deletionindi     = <ls_group_data>-zdeletion_indi.
      ENDLOOP.

      <ls_gr_lt>-conditions = lt_gr_lt_condition.
    ENDLOOP.

    ms_kafka_data-value-payload-grlt = lt_gr_lt.        "#EC CI_CONV_OK
  ENDMETHOD.
  METHOD send_data.

    ms_kafka_data-topic = mc_gr_lead_time_topic.
    ms_kafka_data-key = VALUE #( event_key = p_ekorg
                                 event_name = mc_event_name
                                 event_source = sy-sysid ).
    ms_kafka_data-value-metadata = CORRESPONDING #(  ms_kafka_data-key ).

    TRY.
        /aif/cl_enabler_xml=>transfer_to_aif( ms_kafka_data ).
        ##CATCH_ALL
      CATCH cx_root INTO DATA(lo_cx).

        MESSAGE lo_cx->get_longtext( ) TYPE 'I'.
    ENDTRY.

    MESSAGE s000.

  ENDMETHOD.
ENDCLASS.