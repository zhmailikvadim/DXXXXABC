*&---------------------------------------------------------------------*
*& Report ZAP_TEST_PERF
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zap_test_perf.

PARAMETERS:
  p_num   TYPE i     DEFAULT '1000',
  p_short TYPE xfeld DEFAULT 'X',
  p_out   TYPE xfeld.

CLASS zcl_stone DEFINITION CREATE PRIVATE.
  PUBLIC SECTION.
    CLASS-METHODS:
      get_instance RETURNING VALUE(obj) TYPE REF TO zcl_stone.
    METHODS:
      increment,
      get_count RETURNING VALUE(cnt) TYPE i.
  PRIVATE SECTION.
    CLASS-DATA mv_instance TYPE REF TO zcl_stone.
    DATA mv_count TYPE i.
ENDCLASS.



CLASS zcl_stone IMPLEMENTATION.
  METHOD get_instance.
    IF mv_instance IS INITIAL.
      CREATE OBJECT mv_instance.
    ENDIF.
    obj = mv_instance.
  ENDMETHOD.

  METHOD increment.
    ADD 1 TO mv_count.
  ENDMETHOD.

  METHOD get_count.
    cnt = mv_count.
  ENDMETHOD.

ENDCLASS.

FORM try.
  CONSTANTS: c_version_active   TYPE r3state VALUE 'A',
             c_version_inactive TYPE r3state VALUE 'I'.
  DATA(i_application) = 'BSC_OFFLINE'.
  DATA: et_nodes_inactive TYPE o2applnode_table,
        et_nodes_active   TYPE o2applnode_table.

  SELECT * FROM  o2appl INTO TABLE @DATA(lt_attributes) WHERE  applclas <> ''.

  SELECT * FROM  o2navmap INTO TABLE @DATA(lt_nodes) FOR ALL ENTRIES IN @lt_attributes WHERE  applname  = @lt_attributes-applname.

  LOOP AT lt_nodes ASSIGNING FIELD-SYMBOL(<ls_node>).
    CASE <ls_node>-version.
      WHEN c_version_inactive.
        INSERT <ls_node> INTO TABLE et_nodes_inactive[].
      WHEN c_version_active.
        INSERT <ls_node> INTO TABLE et_nodes_active[].
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

ENDFORM.

FORM try2.
  CONSTANTS: c_version_active   TYPE r3state VALUE 'A',
             c_version_inactive TYPE r3state VALUE 'I'.
  DATA(i_application) = 'BSC_OFFLINE'.
  DATA: et_nodes_inactive TYPE o2applnode_table,
        et_nodes_active   TYPE o2applnode_table.

  SELECT applname, version, applclas FROM  o2appl INTO TABLE @DATA(lt_attributes) WHERE  applclas <> ''.
  IF NOT lt_attributes IS INITIAL.
    SELECT o~applname, o~version, o~node, o~pagekey, o~pagename FROM  @lt_attributes AS l INNER JOIN o2navmap AS o ON l~applname = o~applname INTO TABLE @DATA(lt_nodes).

    LOOP AT lt_nodes ASSIGNING FIELD-SYMBOL(<ls_node>).
      CASE <ls_node>-version.
        WHEN c_version_inactive.
          INSERT <ls_node> INTO TABLE et_nodes_inactive[].
        WHEN c_version_active.
          INSERT <ls_node> INTO TABLE et_nodes_active[].
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.
*    or the same vith nw syntax
    et_nodes_inactive[] = VALUE #( FOR <ls_inact> IN lt_nodes WHERE ( version = c_version_inactive ) ( <ls_inact> ) ).
    et_nodes_active[] = VALUE #( FOR <ls_act> IN lt_nodes WHERE ( version = c_version_active ) ( <ls_act> ) ).

  ENDIF.

ENDFORM.
FORM try3.
  DATA(from_id) = 'AA'.
  DATA(to_id) = 'UA'.
  WITH
  +connections AS (
    SELECT spfli~carrid, carrname, connid, cityfrom, cityto
           FROM spfli
           INNER JOIN scarr
             ON scarr~carrid = spfli~carrid
           WHERE spfli~carrid BETWEEN @from_id AND @to_id ),
  +sum_seats AS (
    SELECT carrid, connid, SUM( seatsocc ) AS sum_seats
           FROM sflight
           WHERE carrid BETWEEN @from_id AND @to_id
           GROUP BY carrid, connid ),
  +result( name, connection, departure, arrival, occupied ) AS (
    SELECT carrname, c~connid, cityfrom, cityto, sum_seats
           FROM +connections AS c
             INNER JOIN +sum_seats AS s
               ON c~carrid = s~carrid AND
                  c~connid = s~connid )
  SELECT *
         FROM +result
         ORDER BY name, connection
         INTO TABLE @DATA(result).
ENDFORM.
form try4.

endform.



"DATA(ls_prod) = VALUE #( lt_prod[  productgroup = '123' ] ).


*ls_prod = VALUE #( lt_prod[  productgroup = '123' ] OPTIONAL ).
*ls_prod = VALUE #( lt_prod[  productgroup = '9999999' ] OPTIONAL ).
*
*IF sy-subrc = 0.
*ENDIF.
START-OF-SELECTION.
  PERFORM try3.
  DATA(lo_rtm2) = NEW cl_easy_rtm( iv_title = 'Mara' ).

  SELECT matnr, matkl FROM mara INTO TABLE @DATA(lt_mara) WHERE matkl = '9999999'.

  lo_rtm2->end( ).
  "DATA(lo_rtm) = NEW cl_easy_rtm( iv_title = 'I_Product' ).

  "SELECT product, productgroup FROM i_product INTO TABLE @DATA(lt_prod) WHERE ProductGroup = '9999999'.

  "lo_rtm->end( ).

CLASS zcl_utc DEFINITION
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS is_even_whole_number
      IMPORTING
        number        TYPE i
      RETURNING
        VALUE(result) TYPE abap_bool.
  PRIVATE SECTION.
    METHODS get_unit_of_integer_number
      IMPORTING
        number        TYPE i
      RETURNING
        VALUE(result) TYPE char1.

ENDCLASS.



CLASS zcl_utc IMPLEMENTATION.

  METHOD is_even_whole_number.
    result = SWITCH #( get_unit_of_integer_number( number )
                         WHEN 0 OR 2 OR 4 OR 6 OR 8
                           THEN abap_true
                           ELSE abap_false ).
  ENDMETHOD.


  METHOD get_unit_of_integer_number.
    DATA(string_number) = CONV string( number ).
    DATA(number_size)   = strlen( string_number ).
    DATA(unit_position) = number_size - 2.
    result = string_number+unit_position(1).
  ENDMETHOD.


ENDCLASS.

CLASS ltc_ca_abap_unit_test1 DEFINITION
      FOR TESTING
      RISK LEVEL HARMLESS
      DURATION SHORT
      FINAL.

  PRIVATE SECTION.

    DATA o_cut TYPE REF TO zcl_utc.

    METHODS it_finds_even_number_1    FOR TESTING.

ENDCLASS.


CLASS ltc_ca_abap_unit_test1 IMPLEMENTATION.


  METHOD it_finds_even_number_1.

    " Given I have a number
    DATA my_number TYPE i VALUE 132.

    " When I call my method.
    o_cut = NEW zcl_utc( ).
    DATA(result_of_test) = o_cut->is_even_whole_number( my_number ).

    " Then, it should give me positive result
    cl_abap_unit_assert=>assert_equals(
        act = result_of_test
        exp = abap_true ).

  ENDMETHOD.

ENDCLASS.



END-OF-SELECTION.
  cl_easy_rtm=>display( ).