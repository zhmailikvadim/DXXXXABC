"! <p class="shorttext synchronized" lang="en">OData V4 Request Processor</p>
CLASS /iwbep/cl_od_processor DEFINITION
  PUBLIC
  INHERITING FROM /iwcor/cl_od_proc_single
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS abap .

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Return type of an action/function</p>
      "! For constants see {@link /IWBEP/CL_OD_PROCESSOR.DATA:GCS_OPERATION_RETURN_TYPE_KIND}
      ty_operation_return_type_kind TYPE c LENGTH 2,
      "! <p class="shorttext synchronized" lang="en">Processing mode</p>
      "! For constants see {@link /IWBEP/CL_OD_PROCESSOR.DATA:GCS_PROCESSING_MODES}
      ty_processing_mode            TYPE c LENGTH 1.

    CONSTANTS:
      "! <p class="shorttext synchronized" lang="en">Operation return type kind</p>
      BEGIN OF gcs_operation_return_type_kind,
        void                 TYPE ty_operation_return_type_kind VALUE 'V',
        primitive_type       TYPE ty_operation_return_type_kind VALUE 'PT',
        primitive_collection TYPE ty_operation_return_type_kind VALUE 'PC',
        entity_type          TYPE ty_operation_return_type_kind VALUE 'ET',
        entity_collection    TYPE ty_operation_return_type_kind VALUE 'EC',
        complex_type         TYPE ty_operation_return_type_kind VALUE 'CT',
        complex_collection   TYPE ty_operation_return_type_kind VALUE 'CC',
      END OF gcs_operation_return_type_kind ,

      "! <p class="shorttext synchronized" lang="en">Processing modes</p>
      BEGIN OF gcs_processing_modes,
        complete             TYPE ty_processing_mode VALUE ' ',
        pre_processing_only  TYPE ty_processing_mode VALUE 'B',
        post_processing_only TYPE ty_processing_mode VALUE 'A',
      END OF gcs_processing_modes .


    METHODS /iwcor/if_od_proc_batch~execute                      REDEFINITION.
    METHODS /iwcor/if_od_proc_complex_coll~execute_action_import REDEFINITION.
    METHODS /iwcor/if_od_proc_complex_coll~execute_bound_action  REDEFINITION.
    METHODS /iwcor/if_od_proc_complex_coll~read                  REDEFINITION.
    METHODS /iwcor/if_od_proc_complex~execute_action_import      REDEFINITION.
    METHODS /iwcor/if_od_proc_complex~execute_bound_action       REDEFINITION.
    METHODS /iwcor/if_od_proc_complex~read                       REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~count                  REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~create_entity          REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~execute_action_import  REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~execute_bound_action   REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~read                   REDEFINITION.
    METHODS /iwcor/if_od_proc_entity_coll~update                 REDEFINITION.
    METHODS /iwcor/if_od_proc_entity~delete                      REDEFINITION.
    METHODS /iwcor/if_od_proc_entity~execute_action_import       REDEFINITION.
    METHODS /iwcor/if_od_proc_entity~execute_bound_action        REDEFINITION.
    METHODS /iwcor/if_od_proc_entity~read                        REDEFINITION.
    METHODS /iwcor/if_od_proc_entity~update                      REDEFINITION.
    METHODS /iwcor/if_od_proc_metadata~read                      REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_coll~execute_action_import    REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_coll~execute_bound_action     REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_coll~read                     REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_val~delete                    REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_val~read                      REDEFINITION.
    METHODS /iwcor/if_od_proc_prim_val~update                    REDEFINITION.
    METHODS /iwcor/if_od_proc_prim~execute_action_import         REDEFINITION.
    METHODS /iwcor/if_od_proc_prim~execute_bound_action          REDEFINITION.
    METHODS /iwcor/if_od_proc_prim~read                          REDEFINITION.
    METHODS /iwcor/if_od_proc_service_doc~read                   REDEFINITION.
    METHODS /iwcor/if_od_proc_void~execute_action_import         REDEFINITION.
    METHODS /iwcor/if_od_proc_void~execute_bound_action          REDEFINITION.
    METHODS set_context                                          REDEFINITION.

    "! <p class="shorttext synchronized" lang="en">Constructor</p>
    "!
    "! @parameter io_service_factory | <p class="shorttext synchronized" lang="en">Service factory this processor belongs to</p>
    METHODS constructor
      IMPORTING
        !io_service_factory TYPE REF TO /iwcor/if_od_svc_factory .


  PRIVATE SECTION.

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Individual read or change operation in a $batch request</p>
      BEGIN OF ty_s_operation,
        id                    TYPE /iwbep/if_v4_request_info=>ty_operation_id,
        lib_handler_parameter TYPE /iwcor/if_od_proc_batch=>handler_parameter_s,
        lib_context           TYPE REF TO /iwcor/if_od_cntxt,
        request               TYPE REF TO /iwbep/if_v4_request_info,
      END OF ty_s_operation .

    TYPES:
      BEGIN OF ty_s_change_set,
        change_set_id TYPE /iwbep/if_v4_request_info=>ty_change_set_id,
        operations    TYPE STANDARD TABLE OF ty_s_operation WITH KEY id,
      END OF ty_s_change_set .

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Changeset or read operation in a $batch request</p>
      BEGIN OF ty_s_batch_operation,
        operation TYPE ty_s_operation,
        changeset TYPE ty_s_change_set,
      END OF ty_s_batch_operation .

    TYPES:
      "! <p class="shorttext synchronized" lang="en">List of operations in a $batch request</p>
      ty_t_batch_operation TYPE STANDARD TABLE OF ty_s_batch_operation WITH DEFAULT KEY .


    DATA:
      "! <p class="shorttext synchronized" lang="en">V4 Framework Data Provider</p>
      mo_data_provider   TYPE REF TO /iwbep/if_v4_data_provider_fw,
      "! <p class="shorttext synchronized" lang="en">Request Information</p>
      mo_request_info    TYPE REF TO /iwbep/if_v4_request_info,
      "! <p class="shorttext synchronized" lang="en">Service Factory this processor belongs to</p>
      "! Needed when we create a new root handler ({@link /IWBEP/CL_OD_ROOT_HANDLER}) in method {@link /IWBEP/CL_OD_PROCESSOR.METH:/IWCOR/IF_OD_PROC_BATCH~EXECUTE}
      mo_service_factory TYPE REF TO /iwcor/if_od_svc_factory,
      "! <p class="shorttext synchronized" lang="en">Processing mode</p>
      mv_processing_mode TYPE ty_processing_mode.


    "! <p class="shorttext synchronized" lang="en">Adjust the paging</p>
    "! Injects the skip token for the default paging into the response context
    "!
    "! @parameter iv_paging_skiptoken  | <p class="shorttext synchronized" lang="en">Skiptoken determined by method ADJUST_PAGING_PRE_PROCESSING</p>
    "! @parameter iv_top               | <p class="shorttext synchronized" lang="en">$top from request</p>
    "! @parameter io_response_info     | <p class="shorttext synchronized" lang="en">Response object</p>
    "! @raising   /iwbep/cx_gateway    | <p class="shorttext synchronized" lang="en">Business Exception</p>
    METHODS adjust_paging_post_processing
      IMPORTING
        !iv_paging_skiptoken TYPE string
        !iv_top              TYPE i
        !io_response_info    TYPE REF TO /iwbep/if_v4_response_info
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Adjust the paging</p>
    "! Adjusts $top and $skip values for default paging
    "!
    "! @parameter is_default_paging_info    | <p class="shorttext synchronized" lang="en">Default paging information</p>
    "! @parameter ev_skiptoken              | <p class="shorttext synchronized" lang="en">$skiptoken provided by the framework</p>
    "! @parameter cs_system_query_options   | <p class="shorttext synchronized" lang="en">System query options</p>
    "! @raising   /iwbep/cx_gateway         | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS adjust_paging_pre_processing
      IMPORTING
        !is_default_paging_info  TYPE /iwbep/if_v4_med_model_fw=>ty_s_default_paging_info
      EXPORTING
        !ev_skiptoken            TYPE string
      CHANGING
        !cs_system_query_options TYPE /iwbep/if_v4_request_info=>ty_s_system_query_info
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Build path to value control property</p>
    "!
    "! Assume the original path is CP1-CP2-PP <br>
    "! The path to the vc property VCP1 of CP1 would be VCP1 <br>
    "! The path to the vc property VCP2 of CP2 would be CP1-VCP2 <br>
    "! Note: The vc property MUST always be on the same level as its complex property! <br>
    "! @parameter it_property | <p class="shorttext synchronized" lang="en">String table of path elements</p>
    "! @parameter iv_property_name | <p class="shorttext synchronized" lang="en">Name of current cplx property for which path is being build</p>
    "! @parameter iv_property_name_vc | <p class="shorttext synchronized" lang="en">Name of the vc property for the current cplx property</p>
    "! @parameter rv_property_path_vc | <p class="shorttext synchronized" lang="en">Path for the value control property</p>
    METHODS build_value_control_prop_path
      IMPORTING
        !it_property               TYPE string_table
        !iv_property_name          TYPE string
        !iv_property_name_vc       TYPE /iwbep/if_v4_med_types=>ty_property_path
      RETURNING
        VALUE(rv_property_path_vc) TYPE string .

    "! <p class="shorttext synchronized" lang="en">Check batch operation specific constraints</p>
    "!
    "! @parameter is_operation_info            | <p class="shorttext synchronized" lang="en">Request identification for hub/bep communication</p>
    "! @parameter iv_batch_origin_system_alias | <p class="shorttext synchronized" lang="en">Value of segment parameter o(Origin) of the batch request</p>
    "!
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS check_batch_operation
      IMPORTING
        is_operation_info            TYPE /iwbep/if_v4_request_info=>ty_s_child
        iv_batch_origin_system_alias TYPE /iwbep/if_v4_routing_types=>ty_e_system_alias
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Raises an exception when parameter is mandatory</p>
    "! Also checks if corresponding feature flag iv_do_flag_omitted_data_in_vc is enabled. Otherwise an exception is raised.
    "!
    "! @parameter io_parameter                  | <p class="shorttext synchronized" lang="en">Parameter</p>
    "! @parameter iv_do_flag_omitted_data_in_vc | <p class="shorttext synchronized" lang="en">Feature flag</p>
    "! @raising /iwbep/cx_od                    | <p class="shorttext synchronized" lang="en">Lib Exception</p>
    "! @raising /iwbep/cx_gateway               | <p class="shorttext synchronized" lang="en">Gateway Exception</p>
    "! @raising /iwcor/cx_od_edm_error          | <p class="shorttext synchronized" lang="en">EDM error</p>
    METHODS check_action_param_mandatory
      IMPORTING
        io_parameter                  TYPE REF TO /iwbep/if_v4_med_act_param_r
        iv_do_flag_omitted_data_in_vc TYPE abap_bool
      RAISING
        /iwbep/cx_od
        /iwbep/cx_gateway
        /iwcor/cx_od_edm_error.

    "! <p class="shorttext synchronized" lang="en">Check if combination of query options is supported</p>
    "!
    "! @parameter it_expand                    | <p class="shorttext synchronized" lang="en">Expand items for $expand</p>
    "! @parameter io_search                    | <p class="shorttext synchronized" lang="en">Search node</p>
    "! @parameter io_apply                     | <p class="shorttext synchronized" lang="en">$apply transformation</p>
    "! @raising   /iwbep/cx_v4_not_implemented | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS check_query_options_entityset
      IMPORTING
        !it_expand     TYPE /iwcor/if_od_uri=>expand_item_t
        !iv_skiptoken  TYPE string
        !iv_deltatoken TYPE string
        !io_search     TYPE REF TO /iwcor/if_od_search_node
        !io_apply      TYPE REF TO /iwcor/if_od_trafo_node
      RAISING
        /iwbep/cx_v4_not_implemented .

    "! <p class="shorttext synchronized" lang="en">Independent method for action processing</p>
    "!
    "! @parameter io_request_entity             | <p class="shorttext synchronized" lang="en">Request entity</p>
    "! @parameter iv_operation_return_type_kind | <p class="shorttext synchronized" lang="en">Operation return type kind</p>
    "! @parameter is_action_import_info         | <p class="shorttext synchronized" lang="en">Action import info structure</p>
    "! @parameter is_content_type               | <p class="shorttext synchronized" lang="en">Content type structure ($format or Accept header)</p>
    "! @parameter it_expand                     | <p class="shorttext synchronized" lang="en">Expand items for $expand</p>
    "! @parameter it_select                     | <p class="shorttext synchronized" lang="en">$select system query option</p>
    "! @parameter is_entity_set_info            | <p class="shorttext synchronized" lang="en">EntitySet info structure</p>
    "! @parameter is_singleton_info             | <p class="shorttext synchronized" lang="en">Singleton info structure</p>
    "! @parameter is_function_import_info       | <p class="shorttext synchronized" lang="en">Function import info structure</p>
    "! @parameter is_bound_action_info          | <p class="shorttext synchronized" lang="en">Bound action info structure</p>
    "! @parameter it_property_path              | <p class="shorttext synchronized" lang="en">Property path</p>
    "! @parameter it_bound_function_path        | <p class="shorttext synchronized" lang="en">Bound function path table with path</p>
    "! @parameter eo_provider                   | <p class="shorttext synchronized" lang="en">Response provider</p>
    "! @parameter et_key                        | <p class="shorttext synchronized" lang="en">Key of created entity</p>
    "! @parameter ev_created                    | <p class="shorttext synchronized" lang="en">Entity was created?</p>
    "! @raising   /iwcor/cx_od_error            | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS execute_action
      IMPORTING
        !io_request_entity             TYPE REF TO /iwcor/if_rest_entity
        !iv_operation_return_type_kind TYPE ty_operation_return_type_kind
        !is_action_import_info         TYPE /iwcor/if_od_uri=>action_import_info_s OPTIONAL
        !is_content_type               TYPE /iwcor/if_od_svc_proc=>content_type_s OPTIONAL
        !io_filter                     TYPE REF TO /iwcor/if_od_expr_node OPTIONAL
        !iv_count                      TYPE abap_bool OPTIONAL
        !io_orderby                    TYPE REF TO /iwcor/if_od_expr_orderby OPTIONAL
        !iv_skip                       TYPE i DEFAULT -1
        !iv_skiptoken                  TYPE string OPTIONAL
        !iv_top                        TYPE i DEFAULT -1
        !it_expand                     TYPE /iwcor/if_od_uri=>expand_item_t OPTIONAL
        !it_select                     TYPE /iwcor/if_od_uri=>select_item_t OPTIONAL
        !is_entity_set_info            TYPE /iwcor/if_od_uri=>entity_set_info_s OPTIONAL
        !is_singleton_info             TYPE /iwcor/if_od_uri=>singleton_info_s OPTIONAL
        !is_function_import_info       TYPE /iwcor/if_od_uri=>function_import_info_s OPTIONAL
        !is_bound_action_info          TYPE /iwcor/if_od_uri=>bound_action_info_s OPTIONAL
        !it_property_path              TYPE /iwcor/if_od_uri=>property_path_t OPTIONAL
        !it_bound_function_path        TYPE /iwcor/if_od_uri=>bound_function_path_t OPTIONAL
      EXPORTING
        !eo_provider                   TYPE REF TO /iwcor/if_od_response_provider
        !et_key                        TYPE string_table
        !ev_created                    TYPE abap_bool
      RAISING
        /iwcor/cx_od_error
        /iwbep/cx_v4_not_implemented .

    "! <p class="shorttext synchronized" lang="en">Get Content Type String from Content Type Header</p>
    "!
    "! @parameter is_lib_content_type | <p class="shorttext synchronized" lang="en">Content type header values</p>
    "! @parameter rv_content_type     | <p class="shorttext synchronized" lang="en">Content type in header value notation</p>
    METHODS get_content_type_string
      IMPORTING
        !is_lib_content_type   TYPE /iwcor/if_od_svc_proc=>content_type_s
      RETURNING
        VALUE(rv_content_type) TYPE string .

    "! <p class="shorttext synchronized" lang="en">Get default value for Value Controls</p>
    "!
    "! @parameter iv_is_patch_semantic | <p class="shorttext synchronized" lang="en">Request with PATCH semantic?</p>
    "! @parameter ev_do_init_as_omit | <p class="shorttext synchronized" lang="en">Initialize Value Controls with "omit"?</p>
    "! @parameter ev_do_init_nullable_as_null | <p class="shorttext synchronized" lang="en">Initialize Value Control of nullable props with "null"?</p>
    "! This flag overrules EV_DO_INIT_AS_OMIT for nullable properties
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS get_default_vc_values
      IMPORTING
        iv_is_patch_semantic        TYPE abap_bool
      EXPORTING
        ev_do_init_as_omit          TYPE abap_bool
        ev_do_init_nullable_as_null TYPE abap_bool
      RAISING
        /iwbep/cx_gateway.

    "! <p class="shorttext synchronized" lang="en">Get a lib 404 http (REST) response</p>
    "!
    "! @parameter io_request_info | <p class="shorttext synchronized" lang="en">Gateway Request Info</p>
    "! @parameter ro_lib_response | <p class="shorttext synchronized" lang="en">Lib http response</p>
    METHODS get_lib_resp_for_wrong_service
      IMPORTING
        io_request_info        TYPE REF TO /iwbep/if_v4_request_info
      RETURNING
        VALUE(ro_lib_response) TYPE  REF TO /iwcor/if_rest_response.


    "! <p class="shorttext synchronized" lang="en">Get the data provider</p>
    "!
    "! @parameter io_request_info | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS init_data_provider
      IMPORTING
        !io_request_info TYPE REF TO /iwbep/if_v4_request_info
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Write dynamic properties (e.g. for $apply) into the lib</p>
    "!
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS inject_dynamic_props_to_lib
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Check if busi data was supplied in payload</p>
    "!
    "! @parameter is_busi_data             | <p class="shorttext synchronized" lang="en">Business data of current structured type</p>
    "! @parameter it_lib_supplied_comp     | <p class="shorttext synchronized" lang="en">Supplied components (in payload)</p>
    "! @parameter rv_is_busi_data_supplied | <p class="shorttext synchronized" lang="en">true = busi data supplied</p>
    "! @raising   /iwbep/cx_gateway        | <p class="shorttext synchronized" lang="en">Gateway exception</p>
    "! @raising   /iwcor/cx_od_edm_error   | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS is_busi_data_supplied
      IMPORTING
        !is_busi_data                   TYPE data
        !it_lib_supplied_comp           TYPE /iwcor/if_od_ep_types=>component_t
      RETURNING
        VALUE(rv_is_busi_data_supplied) TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_edm_error .



    "! <p class="shorttext synchronized" lang="en">Check if only partial busi data was supplied in payload</p>
    "!
    "! @parameter io_struc_type           | <p class="shorttext synchronized" lang="en">Structured Type (i.e. Entity Type or Complex Type)</p>
    "! @parameter is_busi_data            | <p class="shorttext synchronized" lang="en">Business data of current structured type</p>
    "! @parameter is_entity_set_info      | <p class="shorttext synchronized" lang="en">EntitySet info structure</p>
    "! @parameter it_lib_supplied_comp    | <p class="shorttext synchronized" lang="en">Supplied components (in payload)</p>
    "! @parameter rv_is_partial_busi_data | <p class="shorttext synchronized" lang="en">true = busi data was not fully supplied</p>
    "! @raising /iwbep/cx_gateway         | <p class="shorttext synchronized" lang="en">Gateway exception</p>
    "! @raising /iwcor/cx_od_edm_error    | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS is_partial_busi_data
      IMPORTING
        !io_struc_type                 TYPE REF TO /iwbep/if_v4_med_struc_type_r
        !is_busi_data                  TYPE data
        !is_entity_set_info            TYPE /iwcor/if_od_uri=>entity_set_info_s OPTIONAL
        !it_lib_supplied_comp          TYPE /iwcor/if_od_ep_types=>component_t
      RETURNING
        VALUE(rv_is_partial_busi_data) TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_edm_error .

    "! <p class="shorttext synchronized" lang="en">Merge action parameters to request</p>
    "!
    "! @parameter io_lib_request_entity  | <p class="shorttext synchronized" lang="en">Request entity</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_action_parameter_data
      IMPORTING
        !io_lib_request_entity TYPE REF TO /iwcor/if_rest_entity
        !io_lib_action         TYPE REF TO /iwcor/if_od_edm_action
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge Lib Apply tree into MO_REQUEST_INFO</p>
    "!
    "! @parameter io_lib_apply_root_node | <p class="shorttext synchronized" lang="en">$apply transformation</p>
    "! @raising   /iwcor/cx_od_error     | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_apply
      IMPORTING
        !io_lib_apply_root_node TYPE REF TO /iwcor/if_od_trafo_node
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge Lib conditions into MO_REQUEST_INFO</p>
    "!
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_conditions
      IMPORTING
        !is_lib_condition TYPE /iwcor/rest_conditions
        !it_expand        TYPE /iwcor/if_od_uri=>expand_item_t OPTIONAL
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge Lib Expand/Select tree into MO_REQUEST_INFO</p>
    "!
    "! @parameter io_lib_expand_select          | <p class="shorttext synchronized" lang="en">Lib Combined and normalized expand and select options</p>
    "! @parameter iv_is_data_description        | <p class="shorttext synchronized" lang="en">Describes a request payload / busi data?</p>
    "! @raising   /iwcor/cx_od_error            | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_expand_select_info
      IMPORTING
        !io_lib_expand_select   TYPE REF TO /iwcor/if_od_expand_select
        !iv_is_data_description TYPE abap_bool DEFAULT abap_false
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    METHODS merge_content_type
      IMPORTING
        is_lib_content_type TYPE /iwcor/if_od_svc_proc=>content_type_s.

    "! <p class="shorttext synchronized" lang="en">Merge Lib Filter tree into MO_REQUEST_INFO</p>
    "!
    "! @parameter io_lib_filter_root_node | <p class="shorttext synchronized" lang="en">Root Node of the Filter Tree</p>
    "! @raising   /iwcor/cx_od_error      | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_filter_info
      IMPORTING
        !io_lib_filter_root_node TYPE REF TO /iwcor/if_od_expr_node
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge Lib nav info into MO_REQUEST &amp; calculate Lib target</p>
    "!
    "! @parameter it_lib_uri_property_path       | <p class="shorttext synchronized" lang="en">Navigation: Lib Property path</p>
    "! @parameter it_lib_uri_bound_function_path | <p class="shorttext synchronized" lang="en">Navigation: Lib Bound function path table with path</p>
    "! @parameter is_lib_entity_set_info         | <p class="shorttext synchronized" lang="en">Navigation Start: Lib EntitySet info structure</p>
    "! @parameter is_lib_singleton_info          | <p class="shorttext synchronized" lang="en">Navigation Start: Lib Singleton info structure</p>
    "! @parameter is_lib_function_import_info    | <p class="shorttext synchronized" lang="en">Navigation Start: Lib Function import info structure</p>
    "! @parameter is_lib_action_import_info      | <p class="shorttext synchronized" lang="en">Navigation Start: Lib Action import info structure</p>
    "! @parameter is_lib_bound_action_info       | <p class="shorttext synchronized" lang="en">Navigation Start: Lib Bound action info structure</p>
    "! @parameter es_lib_target                  | <p class="shorttext synchronized" lang="en">Lib target information for processor-internal handling</p>
    METHODS merge_navigation
      IMPORTING
        !it_lib_uri_property_path       TYPE /iwcor/if_od_uri=>property_path_t OPTIONAL
        !it_lib_uri_bound_function_path TYPE /iwcor/if_od_uri=>bound_function_path_t OPTIONAL
        !is_lib_entity_set_info         TYPE /iwcor/if_od_uri=>entity_set_info_s OPTIONAL
        !is_lib_singleton_info          TYPE /iwcor/if_od_uri=>singleton_info_s OPTIONAL
        !is_lib_function_import_info    TYPE /iwcor/if_od_uri=>function_import_info_s OPTIONAL
        !is_lib_action_import_info      TYPE /iwcor/if_od_uri=>action_import_info_s OPTIONAL
        !is_lib_bound_action_info       TYPE /iwcor/if_od_uri=>bound_action_info_s OPTIONAL
      EXPORTING
        !es_lib_target                  TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge prefer request headers MO_REQUEST_INFO</p>
    "!
    "! @parameter is_supported_preference | <p class="shorttext synchronized" lang="en">Preferences that are supported for the current operation</p>
    METHODS merge_prefer_headers
      IMPORTING
        !is_supported_preference TYPE /iwbep/if_v4_request_info=>ty_s_preference .

    "! <p class="shorttext synchronized" lang="en">Merge Lib SEARCH treee into MO_REQUEST_INFO</p>
    "!
    "! @parameter io_lib_search_root_node | <p class="shorttext synchronized" lang="en">$search node</p>
    "! @raising   /iwcor/cx_od_error      | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS merge_search
      IMPORTING
        !io_lib_search_root_node TYPE REF TO /iwcor/if_od_search_node
      RAISING
        /iwbep/cx_gateway
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Merge minimal select tree + select path into request info</p>
    "!
    "! @parameter iv_property_path   | <p class="shorttext synchronized" lang="en">Property path (internal names)</p>
    "! @raising   /iwbep/cx_gateway      | <p class="shorttext synchronized" lang="en">Gateway Exception</p>
    METHODS merge_select_info_from_path
      IMPORTING
        !iv_property_path TYPE string
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Merge a minimal SELECT tree into MO_REQUEST_INFO</p>
    "! <br/>The minimal select tree only contains the key fields and ETag
    "!
    "! @parameter io_entity_type         | <p class="shorttext synchronized" lang="en">Entity type</p>
    "! @raising   /iwbep/cx_gateway      | <p class="shorttext synchronized" lang="en">Gateway Exception</p>
    METHODS merge_select_info_minimal
      IMPORTING
        !io_entity_type TYPE REF TO /iwbep/if_v4_med_entity_type_r
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Merge the ST status information into MO_REQUEST_INFO</p>
    "!
    "! @raising /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en"></p>
    METHODS merge_st_info
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Read a complex (collection) property</p>
    "!
    "! @parameter is_entity_set_info      | <p class="shorttext synchronized" lang="en">EntitySet info structure</p>
    "! @parameter is_singleton_info       | <p class="shorttext synchronized" lang="en">Singleton info structure</p>
    "! @parameter is_function_import_info | <p class="shorttext synchronized" lang="en">Function import info structure</p>
    "! @parameter it_property_path        | <p class="shorttext synchronized" lang="en">Property path table</p>
    "! @parameter it_bound_function_path  | <p class="shorttext synchronized" lang="en">Bound function path table with path</p>
    "! @parameter io_filter               | <p class="shorttext synchronized" lang="en">Filter tree</p>
    "! @parameter iv_count                | <p class="shorttext synchronized" lang="en">$count</p>
    "! @parameter io_orderby              | <p class="shorttext synchronized" lang="en">Orderby tree</p>
    "! @parameter iv_skip                 | <p class="shorttext synchronized" lang="en">Skip</p>
    "! @parameter iv_skiptoken            | <p class="shorttext synchronized" lang="en">Skiptoken</p>
    "! @parameter iv_top                  | <p class="shorttext synchronized" lang="en">Top</p>
    "! @parameter it_expand               | <p class="shorttext synchronized" lang="en">Expand items for $expand</p>
    "! @parameter it_select               | <p class="shorttext synchronized" lang="en">Select items for $select</p>
    "! @parameter io_apply                | <p class="shorttext synchronized" lang="en">$apply transformation</p>
    "! @parameter is_content_type         | <p class="shorttext synchronized" lang="en">Content type structure ($format or Accept header)</p>
    "! @parameter iv_is_collection        | <p class="shorttext synchronized" lang="en">Is property a collection?</p>
    "! @parameter ro_provider             | <p class="shorttext synchronized" lang="en">Response provider</p>
    "! @raising   /iwcor/cx_od_error      | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS read_complex
      IMPORTING
        !is_entity_set_info      TYPE /iwcor/if_od_uri=>entity_set_info_s
        !is_singleton_info       TYPE /iwcor/if_od_uri=>singleton_info_s
        !is_function_import_info TYPE /iwcor/if_od_uri=>function_import_info_s
        !it_property_path        TYPE /iwcor/if_od_uri=>property_path_t
        !it_bound_function_path  TYPE /iwcor/if_od_uri=>bound_function_path_t
        !io_filter               TYPE REF TO /iwcor/if_od_expr_node OPTIONAL
        !iv_count                TYPE abap_bool OPTIONAL
        !io_orderby              TYPE REF TO /iwcor/if_od_expr_orderby OPTIONAL
        !iv_skip                 TYPE i DEFAULT -1
        !iv_skiptoken            TYPE string OPTIONAL
        !iv_top                  TYPE i DEFAULT -1
        !it_expand               TYPE /iwcor/if_od_uri=>expand_item_t
        !it_select               TYPE /iwcor/if_od_uri=>select_item_t
        !io_apply                TYPE REF TO /iwcor/if_od_trafo_node OPTIONAL
        !is_content_type         TYPE /iwcor/if_od_svc_proc=>content_type_s
        !iv_is_collection        TYPE abap_bool
      RETURNING
        VALUE(ro_provider)       TYPE REF TO /iwcor/if_od_response_provider
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Set applied preferences</p>
    "!
    "! @parameter io_response_info | <p class="shorttext synchronized" lang="en">V4 Response Information</p>
    METHODS set_applied_preferences
      IMPORTING
        !io_response_info TYPE REF TO /iwbep/if_v4_response_info .

    "! <p class="shorttext synchronized" lang="en">Validate response along property path</p>
    "! E.g. Check if along a property path (/cp/cp/pp) no null value is contained
    "!
    "! @parameter io_response_info | <p class="shorttext synchronized" lang="en">Response object</p>
    "! @parameter is_navigation_tail | <p class="shorttext synchronized" lang="en">Lib target information for processor-internal handling</p>
    "! @parameter io_entity_type | <p class="shorttext synchronized" lang="en">Entity type - READ</p>
    "! @raising /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS validate_respnse_property_path
      IMPORTING
        io_response_info   TYPE REF TO /iwbep/if_v4_response_info
        is_navigation_tail TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail
        io_entity_type     TYPE REF TO /iwbep/if_v4_med_entity_type_r
      RAISING
        /iwcor/cx_od_error .


ENDCLASS.



CLASS /IWBEP/CL_OD_PROCESSOR IMPLEMENTATION.


  METHOD /iwcor/if_od_proc_void~execute_bound_action.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-void        " Operation return type kind
            is_content_type               = is_content_type                            " Content type structure ($format or Accept header)
            is_entity_set_info            = is_entity_set_info                         " EntitySet info structure
            is_singleton_info             = is_singleton_info                          " Singleton info structure
            is_function_import_info       = is_function_import_info                    " Function import info structure
            is_bound_action_info          = is_bound_action_info                       " Bound action info structure
            it_property_path              = it_property_path                           " Property path
            it_bound_function_path        = it_bound_function_path ).                  " Bound function path table with path

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD adjust_paging_post_processing.

    DATA:
      lr_busi_data      TYPE REF TO data,
      lv_entityset_size TYPE i.

    FIELD-SYMBOLS: <ls_busi_data> TYPE ANY TABLE.


    lr_busi_data = io_response_info->get_busi_data( ).

    IF lr_busi_data IS BOUND.
      ASSIGN lr_busi_data->* TO <ls_busi_data>.
    ELSE.
      lr_busi_data = io_response_info->get_busi_data_pro( ).
      ASSIGN lr_busi_data->* TO <ls_busi_data>.
    ENDIF.

    " in case of navigation w/o target keys
    CHECK io_response_info->get_has_no_target( ) = abap_false.

    lv_entityset_size = lines( <ls_busi_data> ) .

    IF iv_top > lv_entityset_size.
      RETURN.
    ENDIF.

    io_response_info->set_skip_token( iv_paging_skiptoken ).


  ENDMETHOD.


  METHOD adjust_paging_pre_processing.

* Here we inject default paging values into the request context
*
* See also the unit tests
*
* Examples
*   Default = 2
*   Max     = 5
*   |        Original Request            |   Request info for the DPC  | Response
*   | Number | $top | $skip | $skiptoken |          $top | $skip       | $skiptoken
*   |     1  |      |       |            |             2 |   0         |    2
*   |     2  |      |       |          2 |             2 |   2         |    4
*   |        |      |       |            |               |             |
*   |     3  |   12 |     0 |            |             5 |   0         |    5
*   |     4  |   12 |     0 |          5 |             5 |   5         |   10
*   |     5  |   12 |     0 |         10 |             2 |  10         |
*   |     6  |    1 |     1 |            |             1 |   1         |
*   |        |      |       |            |               |             |
*   |     7  |   10 |     5 |          5 |             5 |  10         |


    DATA: lv_skip_from_token     TYPE i,
          lv_is_skiptoken_needed TYPE abap_bool.


    CLEAR ev_skiptoken.

    IF  is_default_paging_info-is_active    = abap_false
     OR cs_system_query_options-delta_token = abap_true
     OR cs_system_query_options-top         = 0.    " $top not provided by the request
      RETURN.
    ENDIF.

    lv_is_skiptoken_needed = abap_true.


*   Skip - Part I
    IF cs_system_query_options-skip_token IS NOT INITIAL.
      IF NOT cs_system_query_options-skip_token CO '0123456789'.
        " The client has manipulated the skiptoken / nextlink
        RAISE EXCEPTION TYPE /iwbep/cx_od
          EXPORTING
            textid           = /iwbep/cx_gateway=>invalid_skiptoken
            http_status_code = /iwbep/cx_od=>gcs_http_status_codes-forbidden.
      ELSE.
        lv_skip_from_token = cs_system_query_options-skip_token.
        CLEAR cs_system_query_options-skip_token.

      ENDIF.

    ELSE.
      lv_skip_from_token = 0.

    ENDIF.


*   Top
    IF cs_system_query_options-top > 0.
      IF cs_system_query_options-top > is_default_paging_info-maximum.
        "Sub-Paging within the interval defined by the client
        IF cs_system_query_options-top <= lv_skip_from_token + is_default_paging_info-maximum. "Example Request No. 5/7
          cs_system_query_options-top = cs_system_query_options-top - lv_skip_from_token.
          lv_is_skiptoken_needed = abap_false.
        ELSE.                                                  "Example Request No. 3/4
          cs_system_query_options-top = is_default_paging_info-maximum.
        ENDIF.

      ELSE.                                                    "Example Request No. 6
        lv_is_skiptoken_needed = abap_false.

      ENDIF.

    ELSE.  "Example Request No. 1/2
      cs_system_query_options-top = is_default_paging_info-default.

    ENDIF.


*   Skip - Part II
    IF lv_is_skiptoken_needed = abap_true.
      ev_skiptoken = |{ cs_system_query_options-top + lv_skip_from_token }|.
    ENDIF.

    IF cs_system_query_options-skip > 0.
      cs_system_query_options-skip = lv_skip_from_token + cs_system_query_options-skip.
    ELSE.
      cs_system_query_options-skip = lv_skip_from_token.
    ENDIF.

  ENDMETHOD.


  METHOD build_value_control_prop_path.

    DATA: lv_path_element TYPE string,
          lv_index        TYPE i.

    lv_index = 0.

    "Assume the complete response path is CP1-CP2-CP3-PP
    "And assume we want to build the path to the vc property of CP3 (->VCP3)
    "Step 1: Build path to (but not including!) the current complex property (->iv_property_name)
    "Expected result in our example: CP1-CP2
    DO.
      lv_index = lv_index + 1.
      lv_path_element = it_property[ lv_index ].

      IF lv_path_element = iv_property_name.
        EXIT. "Reached the end of current path
      ENDIF.

      IF rv_property_path_vc IS INITIAL.
        rv_property_path_vc = lv_path_element.

      ELSE.
        rv_property_path_vc = | { rv_property_path_vc }-{ lv_path_element  } |.

      ENDIF.
    ENDDO.

    "Step 2: Add the name of the vc property to the end of the path
    "Expected result in our example: CP1-CP2-VCP3
    IF rv_property_path_vc IS INITIAL.
      rv_property_path_vc = iv_property_name_vc.

    ELSE.
      rv_property_path_vc = | { rv_property_path_vc }-{ iv_property_name_vc }|.
    ENDIF.

  ENDMETHOD.


  METHOD check_query_options_entityset.

*    in case of $apply query options $expand, $search, and $skiptoken are not supported
*    (apply is only possible in )
    IF io_apply IS BOUND.
      IF iv_skiptoken IS NOT INITIAL OR
         it_expand IS NOT INITIAL OR
         io_search IS BOUND.
        "The combination of query options is currently not supported
        RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
          EXPORTING
            textid = /iwbep/cx_v4_not_implemented=>not_supported_query_options.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD constructor.

    super->constructor( ).

    mv_processing_mode = gcs_processing_modes-complete.
    mo_service_factory = io_service_factory.

  ENDMETHOD.


  METHOD execute_action.

    DATA:
      lo_lib_action        TYPE REF TO /iwcor/if_od_edm_action,
      lo_lib_expand_select TYPE REF TO /iwcor/if_od_expand_select,
      ls_lib_condition     TYPE /iwcor/rest_conditions,
      lo_response_info     TYPE REF TO /iwbep/if_v4_response_info,
      lx_gateway           TYPE REF TO /iwbep/cx_gateway.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action ).

      TRY.

* Check if system query options are supported
          IF iv_top <> -1
          OR iv_skip <> -1
          OR iv_skiptoken IS NOT INITIAL
          OR io_orderby IS BOUND
          OR iv_count IS NOT INITIAL
          OR io_filter IS BOUND.
            "System query options not yet supported
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
              EXPORTING
                textid = /iwbep/cx_v4_not_implemented=>sqo_not_implemented_for_action.
          ENDIF.

          IF it_expand IS NOT INITIAL.

            IF  mo_request_info->is_local( ) = abap_false
            AND mo_request_info->get_backend_version( )-gw_version < '020'.
              " Old backend (version < 020) doesn't support expand at all

              "Expand not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>expand_for_action_not_sup_bep.

            ELSEIF mo_request_info->is_local( ) = abap_false
               AND mo_request_info->get_backend_version( )-gw_version < '023'
               AND iv_operation_return_type_kind <> gcs_operation_return_type_kind-entity_type
               AND iv_operation_return_type_kind <> gcs_operation_return_type_kind-entity_collection.
              " Old backend (version < 023) supports expand
              " but only for actions returning entity (collection)

              "Expand not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>expand_for_action_restrict.

            ENDIF.
          ENDIF.

          ls_lib_condition = mo_context->get_conditions( ).
          " Action Import and ETag not supported
          IF  is_action_import_info IS NOT INITIAL
          AND ls_lib_condition IS NOT INITIAL.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
              EXPORTING
                textid = /iwbep/cx_v4_not_implemented=>etag_and_actionimport.
          ENDIF.


          IF is_action_import_info IS NOT INITIAL.
            " No bound action so set todo flag for action import
            mo_request_info->set_is_action_import_provided( ).
            lo_lib_action = is_action_import_info-action_import->get_action( ).

            merge_navigation( is_lib_action_import_info = is_action_import_info ).

          ELSE.
            " Bound action
            lo_lib_action = is_bound_action_info-action.
            merge_navigation(
                it_lib_uri_property_path       = it_property_path
                it_lib_uri_bound_function_path = it_bound_function_path
                is_lib_entity_set_info         = is_entity_set_info
                is_lib_function_import_info    = is_function_import_info
                is_lib_singleton_info          = is_singleton_info
                is_lib_bound_action_info       = is_bound_action_info ).
          ENDIF.


* What to return?
          IF iv_operation_return_type_kind <> gcs_operation_return_type_kind-void.
            mo_request_info->set_is_busi_data_requested( ).

            merge_prefer_headers( VALUE #( return_minimal        = abap_true
                                           return_representation = abap_true
                                           strict                = abap_true ) ).

            IF  mo_request_info->is_busi_data_requested( ).
              lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
                  is_entity_set_info      = is_entity_set_info
                  is_singleton_info       = is_singleton_info
                  it_property_path        = it_property_path
                  it_bound_function_path  = it_bound_function_path
                  is_action_import_info   = is_action_import_info
                  is_bound_action_info    = is_bound_action_info
                  it_expand               = it_expand
                  it_select               = it_select ).

              merge_expand_select_info( io_lib_expand_select = lo_lib_expand_select ).

            ELSEIF iv_operation_return_type_kind = gcs_operation_return_type_kind-entity_type.
              " The provider must return the business data, but we need only need the keys (and the ETag property if existing
              merge_select_info_minimal( mo_request_info->get_target_action( )->get_return( )->get_entity_type( ) ).

            ENDIF.

          ENDIF.


          " Define operation kind
          mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action ).

          " Fill business data with payload parameter from action
          merge_action_parameter_data( io_lib_request_entity = io_request_entity
                                       io_lib_action         = lo_lib_action ).


          merge_conditions( is_lib_condition = ls_lib_condition ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* execute action
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT eo_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).
            lo_response_info = mo_data_provider->execute_action( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    " Post processing not needed for void action
    " Prefer handling not required: void return does not allow a Prefer setting
    IF ( iv_operation_return_type_kind = gcs_operation_return_type_kind-void ).
      RETURN.
    ENDIF.

    TRY.
        IF mo_request_info->is_busi_data_requested( ).
          ASSERT lo_response_info IS BOUND.

          " Create operation return type specific response provider
          CASE iv_operation_return_type_kind.
            WHEN gcs_operation_return_type_kind-primitive_type.
              IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
                CREATE OBJECT eo_provider TYPE /iwcor/cl_od_response_provider.
                RETURN.
              ENDIF.

              eo_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_type(  io_request_info           = mo_request_info
                                                                                   io_response_info          = lo_response_info
                                                                                   is_lib_action_import_info = is_action_import_info
                                                                                   is_lib_bound_action_info  = is_bound_action_info
                                                                                   is_lib_content_type       = is_content_type
                                                                                   it_lib_property_path      = it_property_path ).

            WHEN gcs_operation_return_type_kind-primitive_collection.
              " Always generate a response payload because for collection return types the response status code will never be 204 No Content
              eo_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_type_coll(  io_request_info           = mo_request_info
                                                                                        io_response_info          = lo_response_info
                                                                                        is_lib_action_import_info = is_action_import_info
                                                                                        is_lib_bound_action_info  = is_bound_action_info
                                                                                        is_lib_content_type       = is_content_type
                                                                                        it_lib_property_path      = it_property_path
                                                                                        io_lib_context            = mo_context ).

            WHEN gcs_operation_return_type_kind-entity_type.
              IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
                CREATE OBJECT eo_provider TYPE /iwcor/cl_od_response_provider.
                RETURN.
              ENDIF.

              IF mo_request_info->is_busi_data_for_header_only( ).
                " prefer:return=minimal
                " We still need to return the location header (and ETag if the entity type has one)
                /iwbep/cl_od_resp_prov_factory=>create_for_entity_no_content(
                  EXPORTING
                    io_request_info          = mo_request_info
                    io_response_info         = lo_response_info
                    iv_do_add_keys           = abap_true
                  IMPORTING
                    eo_lib_response_provider = eo_provider
                    et_lib_key               = et_key ).

              ELSE.
                /iwbep/cl_od_resp_prov_factory=>create_for_entity(
                   EXPORTING
                     io_request_info           = mo_request_info
                     io_response_info          = lo_response_info
                     is_lib_bound_action_info  = is_bound_action_info
                     is_lib_action_import_info = is_action_import_info
                     is_lib_content_type       = is_content_type
                     it_lib_property_path      = it_property_path
                   IMPORTING
                     eo_lib_response_provider  = eo_provider ).

              ENDIF.

            WHEN gcs_operation_return_type_kind-entity_collection.
              " Always generate a response payload because for collection return types the response status code will never be 204 No Content
              eo_provider = /iwbep/cl_od_resp_prov_factory=>create_for_entity_collection(  io_request_info           = mo_request_info
                                                                                           io_response_info          = lo_response_info
                                                                                           is_lib_bound_action_info  = is_bound_action_info
                                                                                           is_lib_action_import_info = is_action_import_info
                                                                                           is_lib_content_type       = is_content_type
                                                                                           it_lib_property_path      = it_property_path
                                                                                           io_lib_context            = mo_context ).

            WHEN gcs_operation_return_type_kind-complex_type.
              IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
                CREATE OBJECT eo_provider TYPE /iwcor/cl_od_response_provider.
                RETURN.
              ENDIF.

              eo_provider = /iwbep/cl_od_resp_prov_factory=>create_for_complex(  io_request_info           = mo_request_info
                                                                                 io_response_info          = lo_response_info
                                                                                 is_lib_bound_action_info  = is_bound_action_info
                                                                                 is_lib_action_import_info = is_action_import_info
                                                                                 is_lib_content_type       = is_content_type
                                                                                 it_lib_property_path      = it_property_path ).

            WHEN gcs_operation_return_type_kind-complex_collection.
              eo_provider = /iwbep/cl_od_resp_prov_factory=>create_for_complex_collection(
                              io_request_info             = mo_request_info
                              io_response_info            = lo_response_info
                              is_lib_action_import_info   = is_action_import_info
                              is_lib_bound_action_info    = is_bound_action_info
                              it_lib_property_path        = it_property_path
                              is_lib_content_type         = is_content_type  ).

            WHEN OTHERS.
              " Save call stack for Error Log
              /iwbep/cl_v4_logger=>save_callstack( ).
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>complex_collection_not_impl.

          ENDCASE.

        ELSE.
          CREATE OBJECT eo_provider TYPE /iwcor/cl_od_response_provider.

        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

    set_applied_preferences( lo_response_info ).

  ENDMETHOD.


  METHOD get_content_type_string.

    rv_content_type = is_lib_content_type-type.

    IF is_lib_content_type-subtype IS NOT INITIAL.
      rv_content_type = rv_content_type && '/' && is_lib_content_type-subtype.
    ENDIF.

    IF is_lib_content_type-parameter IS NOT INITIAL.
      rv_content_type = rv_content_type && ';' && is_lib_content_type-parameter.
    ENDIF.

  ENDMETHOD.


  METHOD init_data_provider.
*    This method must not be called in the constructor (or method SET_CONTEXT)
*    as no data provider is needed for the service document
*    ( method /IWCOR/IF_OD_PROC_SERVICE_DOC~READ )

    IF ( mo_data_provider IS NOT BOUND ).
      mo_data_provider = /iwbep/cl_v4h_runtime_factory=>create_data_provider_fw( io_request_info ).

    ENDIF.

  ENDMETHOD.


  METHOD inject_dynamic_props_to_lib.

    DATA:
      lt_property        TYPE /iwbep/if_v4_med_element=>ty_t_med_prim_property_r,
      lo_property        TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
      lo_lib_entity_type TYPE REF TO /iwcor/if_od_edm_entity_type,
      lv_lib_prop_name   TYPE  string,
      lo_lib_prim_type   TYPE REF TO /iwcor/if_od_edm_type,
      ls_lib_mapping     TYPE  /iwcor/if_od_edm_mappable=>mapping_s,
      lx_gateway         TYPE REF TO /iwbep/cx_gateway.


    TRY.
        lo_lib_entity_type ?= CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->get_navigation_tail( )-lib_type.
        mo_request_info->get_target_entity_type( )->get_primitive_properties( IMPORTING et_property = lt_property ).

        LOOP AT lt_property INTO lo_property.
          IF  lo_property->is_dynamic_property( ) EQ abap_true.
            lo_lib_prim_type     = /iwcor/cl_od_edm_prim_type=>get_instance( lo_property->get_edm_type( ) ).
            lv_lib_prop_name     = lo_property->get_edm_name( ).
            ls_lib_mapping-value = lo_property->get_internal_name( ).

            lo_lib_entity_type->add_property(
              EXPORTING
                iv_name                = lv_lib_prop_name
                io_type                = lo_lib_prim_type
                iv_precision           = lo_property->get_precision( )
                iv_scale               = lo_property->get_scale( )
                is_mapping             = ls_lib_mapping ).
          ENDIF.
        ENDLOOP.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

  ENDMETHOD.


  METHOD is_busi_data_supplied.

    DATA: lo_lib_edm_type TYPE REF TO /iwcor/if_od_edm_type.

    FIELD-SYMBOLS: <ls_busi_data>      TYPE data,
                   <lt_busi_data>      TYPE table,
                   <lv_null_component> TYPE data,
                   <lt_lib_component>  TYPE /iwcor/if_od_ep_types=>component_t,
                   <lt_lib_components> TYPE /iwcor/if_od_ep_types=>component_table_t.


    LOOP AT it_lib_supplied_comp INTO DATA(ls_lib_supplied_comp).
      UNASSIGN: <ls_busi_data>,
                <lt_busi_data>,
                <lv_null_component>,
                <lt_lib_component>,
                <lt_lib_components>.

      IF ls_lib_supplied_comp-property IS INITIAL.
        " No primitive property => Something like content type of a stream property => business data was supplied
        rv_is_busi_data_supplied = abap_true.
        RETURN.
      ENDIF.

      lo_lib_edm_type = ls_lib_supplied_comp-property->get_type( ).

      IF lo_lib_edm_type->kind EQ /iwcor/if_od_edm_type=>kind_primitive.
        " Primitive property => business data was supplied
        rv_is_busi_data_supplied = abap_true.
        RETURN.

      ELSEIF lo_lib_edm_type->kind EQ /iwcor/if_od_edm_type=>kind_complex.
        " Complex property
        ASSERT ls_lib_supplied_comp-components IS BOUND.

        IF ls_lib_supplied_comp-property->is_collection( ).
          " Complex property collection
          ASSIGN ls_lib_supplied_comp-components->* TO <lt_lib_components>.                       " Complex properties in collection
          ASSIGN COMPONENT ls_lib_supplied_comp-name OF STRUCTURE is_busi_data TO <lt_busi_data>. " Table of complex properties

          LOOP AT <lt_lib_components> INTO DATA(lr_data). " Loop over all complex properties in collection
            ASSIGN lr_data->* TO <lt_lib_component>.      " Single complex property
            IF <lt_lib_component> IS INITIAL.
              " No components of complex property supplied. Can also not be
              " null in case of collection. Counts not as supplied busi data
              CONTINUE.

            ENDIF.

            READ TABLE <lt_busi_data> INDEX sy-tabix ASSIGNING <ls_busi_data>.  " Complex property data

            rv_is_busi_data_supplied =
              is_busi_data_supplied(
                EXPORTING
                  is_busi_data           = <ls_busi_data>
                  it_lib_supplied_comp   = <lt_lib_component> ).

            IF rv_is_busi_data_supplied EQ abap_true.
              RETURN.

            ENDIF.

          ENDLOOP.

        ELSE.
* Complex property
          ASSIGN ls_lib_supplied_comp-components->* TO <lt_lib_component>.
          IF <lt_lib_component> IS INITIAL.
            " No components of complex property supplied. Only in
            " case of null this property counts as supplied busi data
            IF ls_lib_supplied_comp-null_name IS INITIAL.
              " No null component - not a supplied property
              CONTINUE.

            ENDIF.

            ASSIGN COMPONENT ls_lib_supplied_comp-null_name OF STRUCTURE is_busi_data TO <lv_null_component>.
            IF <lv_null_component> EQ /iwcor/if_od_ep_types=>gc_indicate_null.
              rv_is_busi_data_supplied = abap_true.
              RETURN.

            ENDIF.

          ELSE.
            " Recursive call
            ASSIGN COMPONENT ls_lib_supplied_comp-name OF STRUCTURE is_busi_data TO <ls_busi_data>.

            rv_is_busi_data_supplied =
              is_busi_data_supplied(
                EXPORTING
                  is_busi_data           = <ls_busi_data>
                  it_lib_supplied_comp   = <lt_lib_component> ).

            IF rv_is_busi_data_supplied EQ abap_true.
              RETURN.

            ENDIF.

          ENDIF.

        ENDIF.

      ELSE.
* Kind not supported for busi data determination
        ASSERT 0 = 1.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD is_partial_busi_data.

    DATA: lt_primitive_property TYPE /iwbep/if_v4_med_element=>ty_t_med_prim_property_r,
          lo_primitive_property TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
          lo_complex_property   TYPE REF TO /iwbep/if_v4_med_cplx_prop_r,
          lv_internal_name      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
          lt_complex_property   TYPE /iwbep/if_v4_med_element=>ty_t_med_cplx_property_r,
          ls_lib_supplied_comps TYPE REF TO /iwcor/if_od_ep_types=>component_t,
          ls_lib_supplied_comp  TYPE /iwcor/if_od_ep_types=>component_s,
          lv_is_collection      TYPE abap_bool,
          lv_is_nullable        TYPE abap_bool,
          lv_internal_name_vc   TYPE /iwbep/if_v4_med_types=>ty_property_path,
          lv_does_exist         TYPE abap_bool.

    FIELD-SYMBOLS: <lt_lib_supplied_comps> TYPE /iwcor/if_od_ep_types=>component_table_t,
                   <lt_lib_supplied_comp>  TYPE /iwcor/if_od_ep_types=>component_t,
                   <lt_busi_data>          TYPE table,
                   <ls_busi_data>          TYPE data,
                   <lv_busi_data_vc>       TYPE data.


* Check primitive properties
    io_struc_type->get_primitive_properties( IMPORTING et_property = lt_primitive_property ).

    LOOP AT lt_primitive_property INTO lo_primitive_property.
      " Technical properties are not part of the supplied payload
      "E.g. value control property
      CHECK lo_primitive_property->is_technical( ) = abap_false.

      lv_internal_name = lo_primitive_property->get_internal_name( ).

      IF line_exists( it_lib_supplied_comp[ name = lv_internal_name ] ). "#EC CI_SORTSEQ
        " Primitive property found
        CONTINUE.
      ENDIF.

**********************************************************************
* Removed - The flag "Partial Business Data" described the payload / data container. It should not consider
*           that a key property is also somehwere else part of the request
*
*      " Check if property is part of e.g. key in navigation path (navigation property binding) or for patch
*      " This check must only be done for the first level as key properties (e.g. for patch) can only be in there
*      IF is_entity_set_info IS SUPPLIED.
*        LOOP AT is_entity_set_info-key_predicate INTO DATA(ls_key_predicate).
*          IF ls_key_predicate-property_ref->get_key_predicate_name( ) = lo_primitive_property->get_edm_name( ).
*            lv_does_exist = abap_true.
*            " Exit the loop
*            EXIT.
*          ENDIF.
*        ENDLOOP.
*      ENDIF.
**********************************************************************

      IF lv_does_exist = abap_true.
        lv_does_exist = abap_false.
        CONTINUE.
      ENDIF.

      " Primitive property was not supplied (neither directly nor as key in path)
      rv_is_partial_busi_data = abap_true.
      RETURN.

    ENDLOOP.


* Check complex properties
    io_struc_type->get_complex_properties( IMPORTING et_property = lt_complex_property ).

    LOOP AT lt_complex_property INTO lo_complex_property.
      " Technical properties are not part of the supplied payload
      " E.g. value control structure properties
      CHECK lo_complex_property->is_technical( ) = abap_false.

      lv_internal_name = lo_complex_property->get_internal_name( ).

      IF NOT line_exists( it_lib_supplied_comp[ name = lv_internal_name ] ). "#EC CI_SORTSEQ
        " Complex property not supplied at all
        rv_is_partial_busi_data = abap_true.
        RETURN.
      ENDIF.

      lv_is_collection = lo_complex_property->is_collection( ).

*  Check complex properties in collection
      IF lv_is_collection = abap_true.
        ls_lib_supplied_comp = it_lib_supplied_comp[ name = lv_internal_name ]. "#EC CI_SORTSEQ

        ASSIGN COMPONENT lv_internal_name OF STRUCTURE is_busi_data TO <lt_busi_data>.

*       "ComplexPropColl": [                                        --> ls_lib_supplied_comp-components->* / <lt_lib_supplied_comps>
*         {                                                         --> ls_lib_supplied_comps / <lt_lib_supplied_comp> / <ls_busi_data>
*           "StringWithValueControl": "If you see this it is OK.",
*           "DateTimeWithValueControl": null,
*           "DateTimeWoValueControl": null
*         },
*         {                                                         --> ls_lib_supplied_comps / <lt_lib_supplied_comp> / <ls_busi_data>
*           "StringWithValueControl": "If you see this it is OK.",
*           "DateTimeWithValueControl": null,
*           "DateTimeWoValueControl": null
*         }
*       ]

        "Complex properties in complex property collection
        ASSIGN ls_lib_supplied_comp-components->* TO <lt_lib_supplied_comps>.
        LOOP AT <lt_lib_supplied_comps> INTO ls_lib_supplied_comps.
          ASSIGN ls_lib_supplied_comps->* TO <lt_lib_supplied_comp>.

          READ TABLE <lt_busi_data> INDEX sy-tabix ASSIGNING <ls_busi_data>.

          " It's currently not possible to set complex properties to null
          " inside a collection, hence no need to check if busi data is null

          rv_is_partial_busi_data =
            is_partial_busi_data(
              EXPORTING
                io_struc_type        = lo_complex_property->get_complex_type( )
                is_busi_data         = <ls_busi_data>
                it_lib_supplied_comp = <lt_lib_supplied_comp> ).

          IF rv_is_partial_busi_data = abap_true.
            RETURN.
          ENDIF.

        ENDLOOP.

      ENDIF.

*  Check complex properties NOT in a collection
      lv_is_nullable = lo_complex_property->is_nullable( ).
      IF lv_is_nullable = abap_true.
        " Check if is currently null -> then no recursive call is needed
        lv_internal_name_vc = lo_complex_property->get_value_control_prop_path( ).
        IF lv_internal_name_vc IS NOT INITIAL. " Due to a bug, cplx prop without value control property was possible
          ASSIGN COMPONENT lv_internal_name_vc OF STRUCTURE is_busi_data TO <lv_busi_data_vc>.
          IF    sy-subrc = 0
            AND <lv_busi_data_vc> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null.
            " Null value indicated - complex property is not partial with this
            CONTINUE.

          ENDIF.

        ENDIF.

        ASSIGN COMPONENT lv_internal_name OF STRUCTURE is_busi_data TO <ls_busi_data>.
        ls_lib_supplied_comp = it_lib_supplied_comp[ name = lv_internal_name ]. "#EC CI_SORTSEQ
        ASSIGN ls_lib_supplied_comp-components->* TO <lt_lib_supplied_comp>.

        rv_is_partial_busi_data =
          is_partial_busi_data(
            EXPORTING
              io_struc_type        = lo_complex_property->get_complex_type( )
              is_busi_data         = <ls_busi_data>
              it_lib_supplied_comp = <lt_lib_supplied_comp> ).
        IF rv_is_partial_busi_data EQ abap_true.
          RETURN.

        ENDIF.

      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD merge_action_parameter_data.

    DATA:
      lo_action                     TYPE REF TO /iwbep/if_v4_med_action_r,
      lo_lib_parameter              TYPE REF TO /iwcor/if_od_edm_parameter,
      lo_parameter                  TYPE REF TO /iwbep/if_v4_med_act_param_r,
      lo_parameter_type             TYPE REF TO /iwbep/if_v4_med_struc_type_r,
      lr_data_parameters            TYPE REF TO data,
      lr_lib_component_t            TYPE REF TO /iwcor/if_od_ep_types=>component_t,
      ls_lib_parameter              TYPE /iwcor/if_od_ep_types=>action_s,
      ls_lib_parameter_info         TYPE /iwcor/if_od_ep_types=>action_parameter_info_s,
      lt_lib_parameter              TYPE /iwcor/if_od_ep_types=>action_t,
      lt_lib_parameter_name         TYPE string_table,
      lv_do_flag_omitted_data_in_vc TYPE abap_bool,
      lv_internal_name              TYPE /iwbep/if_v4_med_types=>ty_e_med_internal_name,
      lv_is_partial_busi_data       TYPE abap_bool,
      lv_lib_act_param_name         TYPE LINE OF string_table,
      lv_parameter_type_kind        TYPE /iwbep/if_v4_med_element=>ty_e_med_argument_type_kind,
      lv_tabix                      TYPE syst-tabix,
      lv_do_init_as_omit            TYPE abap_bool,
      lv_do_init_nullable_as_null   TYPE abap_bool,
      lv_vc_path                    TYPE /iwbep/if_v4_med_types=>ty_property_path,
      lo_complex_type               TYPE REF TO /iwbep/if_v4_med_cplx_type_r.

    FIELD-SYMBOLS:
      <lt_data_parameter>  TYPE STANDARD TABLE,
      <la_data_parameter>  TYPE data,
      <ls_data_parameter>  TYPE data,
      <ls_data_parameters> TYPE data,
      <lv_value_control>   TYPE data.


*   Prepare
    ls_lib_parameter_info-action = io_lib_action.
    lt_lib_parameter_name = ls_lib_parameter_info-action->get_parameter_names( ).

    IF io_lib_action->is_bound( ) = abap_true.
      "Delete bound action parameter (not needed)
      DELETE lt_lib_parameter_name INDEX 1.
    ENDIF.

    " No deserializing needed
    CHECK lt_lib_parameter_name IS NOT INITIAL.

    lo_action = mo_request_info->get_target_action( ).

    lv_do_flag_omitted_data_in_vc = mo_request_info->get_service_features( )-service_features_pro-use_vc_to_flag_omitted_data.

    get_default_vc_values(
      EXPORTING
        iv_is_patch_semantic        = abap_false
      IMPORTING
        ev_do_init_as_omit          = lv_do_init_as_omit
        ev_do_init_nullable_as_null = lv_do_init_nullable_as_null ).

*   Create data container
    mo_request_info->get_data_container( IMPORTING er_data_container = lr_data_parameters ).
    ASSIGN lr_data_parameters->* TO <ls_data_parameters>.

    LOOP AT lt_lib_parameter_name INTO lv_lib_act_param_name.
      lo_lib_parameter = io_lib_action->get_parameter( lv_lib_act_param_name ).

      ls_lib_parameter-name      = lv_lib_act_param_name.
      ls_lib_parameter-parameter = lo_lib_parameter.

      lv_internal_name = /iwbep/cl_od_utils=>get_abap_name_for_edm_instance( lo_lib_parameter ).
      ASSIGN COMPONENT lv_internal_name OF STRUCTURE <ls_data_parameters> TO <la_data_parameter>.
      ls_lib_parameter-data = REF #( <la_data_parameter> ).

      APPEND ls_lib_parameter TO lt_lib_parameter.

    ENDLOOP.


*   Read the action input parameters
    /iwcor/cl_od_ep_facade=>read_action(
      EXPORTING
        io_rest_entity           = io_lib_request_entity
        is_action_parameter_info = ls_lib_parameter_info
        iv_init_as_omit          = lv_do_init_as_omit
        iv_init_nullable_as_null = lv_do_init_nullable_as_null
        iv_fill_component_table  = xsdbool( lv_do_flag_omitted_data_in_vc = abap_false )
      CHANGING
        ct_parameter             = lt_lib_parameter ).


*   NULL / Omit handling + Media ETag ToDo-flag
    LOOP AT lt_lib_parameter INTO ls_lib_parameter.
      CLEAR lo_parameter_type.

      lv_internal_name = /iwbep/cl_od_utils=>get_abap_name_for_edm_instance( ls_lib_parameter-parameter ).
      lo_parameter = lo_action->get_parameter( lv_internal_name ).

*     Check for Media ETag ToDo-flag
      lo_parameter->get_parameter_type_kind( IMPORTING ev_parameter_type_kind = lv_parameter_type_kind ).

      IF lv_parameter_type_kind = /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-complex.
        "Stream property can only be part of a complex type for actions
        lo_parameter_type = lo_parameter->get_complex_type( ).

        IF lo_parameter_type->has_media_etag( ) = abap_true.
          "An Action payload must be interpreted like a PUT payload
          "I.e. omitting the stream-related properties from the complex non-binding parameter is equal to setting them explicitly as 'null'
          "and the request still has media etag related content
          mo_request_info->set_has_media_etag_related_con( ).
        ENDIF.

      ENDIF.

      IF ls_lib_parameter-null = abap_true.
        lv_vc_path = lo_parameter->get_value_control_path( ).
        ASSIGN COMPONENT lv_vc_path OF STRUCTURE <ls_data_parameters> TO <lv_value_control>.
        <lv_value_control> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null.

      ELSEIF ls_lib_parameter-provided = abap_false.

        check_action_param_mandatory(
          io_parameter                  = lo_parameter
          iv_do_flag_omitted_data_in_vc = lv_do_flag_omitted_data_in_vc ).

        lv_is_partial_busi_data = abap_true.
        lv_vc_path = lo_parameter->get_value_control_path( ).
        "If an application does not need to know they might not have a value control
        IF lv_vc_path IS NOT INITIAL.
          ASSIGN COMPONENT lv_vc_path OF STRUCTURE <ls_data_parameters> TO <lv_value_control>.
          <lv_value_control> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_omit.
        ENDIF.

      ELSE. "Provided
        " Checking if all properties for the current parameter have been provided as well
        CHECK lv_is_partial_busi_data = abap_false.
        CHECK ls_lib_parameter-components_table IS NOT INITIAL.
        CHECK lo_parameter_type IS BOUND.

        IF lo_parameter->is_collection( ).
          ASSIGN ls_lib_parameter-data->* TO <lt_data_parameter>.
        ELSE.
          ASSIGN ls_lib_parameter-data->* TO <ls_data_parameter>.
        ENDIF.

        " We have one entry (list of components) in table COMPONENTS_TABLE for each of the entity / complex type items
        LOOP AT ls_lib_parameter-components_table INTO lr_lib_component_t.
          lv_tabix = sy-tabix.
          IF lv_is_partial_busi_data = abap_true.
            EXIT.
          ENDIF.

          IF lo_parameter->is_collection( ).
            READ TABLE <lt_data_parameter> INDEX lv_tabix ASSIGNING <ls_data_parameter>.
            lv_is_partial_busi_data = is_partial_busi_data(
                                          is_busi_data         = <ls_data_parameter>
                                          io_struc_type        = lo_parameter_type
                                          it_lib_supplied_comp = lr_lib_component_t->* ).

          ELSE.
            lv_is_partial_busi_data = is_partial_busi_data(
                                          is_busi_data         = <ls_data_parameter>
                                          io_struc_type        = lo_parameter_type
                                          it_lib_supplied_comp = lr_lib_component_t->* ).

          ENDIF.

        ENDLOOP.

      ENDIF.

    ENDLOOP.


*   Virus scan
    IF mo_request_info->is_virus_scan_needed( ).
      /iwbep/cl_v4_virus_scanner=>scan_structure(
          ir_busi_data        = lr_data_parameters
          io_struct_type      = CAST /iwbep/if_v4_med_operation_fw( lo_action )->to_complex_type( ) ).
    ENDIF.


*   Set the result into the request
    mo_request_info->set_parameter_data( lr_data_parameters ).
    mo_request_info->set_is_partial_busi_data_prov( lv_is_partial_busi_data ).

  ENDMETHOD.


  METHOD merge_apply.

    DATA: lo_apply_root_node TYPE REF TO /iwbep/if_v4_apply_node.


    IF ( io_lib_apply_root_node IS BOUND ).
      lo_apply_root_node = /iwbep/cl_od_apply_builder=>build_from_lib_tree( io_lib_apply_root_node = io_lib_apply_root_node
                                                                            io_target_entity_type  = mo_request_info->get_target_entity_type( )
                                                                            is_target_service_key  = mo_request_info->get_target_service_key( ) ).
      mo_request_info->set_apply_tree( lo_apply_root_node ).
    ENDIF.

  ENDMETHOD.


  METHOD merge_conditions.

    DATA: ls_if_match       TYPE /iwcor/rest_etag_s,
          ls_lib_etag       TYPE /iwcor/rest_etag_s,
          lv_lines          TYPE sytabix,
          lv_operation_kind TYPE /iwbep/if_v4_request_info=>ty_operation_kind.


    IF is_lib_condition IS INITIAL.
      RETURN.
    ENDIF.

    "if-modified-since and if-unmodified-since are currently not supported at all
    IF is_lib_condition-if_modified_since IS NOT INITIAL OR
     is_lib_condition-if_unmodified_since IS NOT INITIAL.
      /iwbep/cl_v4_logger=>save_callstack( ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    " Conditional handling is not supported in combination with $expand
    IF it_expand IS NOT INITIAL AND
     is_lib_condition IS NOT INITIAL.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    lv_operation_kind = mo_request_info->get_operation_kind( ).

    IF lv_operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity
    OR lv_operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-load_metadata.
      IF is_lib_condition-if_match IS NOT INITIAL.
        /iwbep/cl_v4_logger=>save_callstack( ).
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
      ENDIF.

    ELSEIF lv_operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity
         OR lv_operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity
         OR lv_operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.
      IF is_lib_condition-if_none_match IS NOT INITIAL.
        /iwbep/cl_v4_logger=>save_callstack( ).
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
      ENDIF.

    ELSE.
      /iwbep/cl_v4_logger=>save_callstack( ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

    ENDIF.

    "If-match provided but NO ETAG property in entity type.
    IF is_lib_condition-if_match IS NOT INITIAL
     AND mo_context->is_etag_required( ) = abap_false.
      READ TABLE is_lib_condition-if_match INDEX 1 INTO ls_if_match.
      IF ls_if_match-tag <> '*'.
        " Save call stack for Error Log
        /iwbep/cl_v4_logger=>save_callstack( ).
        RAISE EXCEPTION TYPE /iwcor/cx_od_precond_failed.
      ENDIF.
    ENDIF.

    "If-non-match but NO ETAG property in entity type. Hence do it for metadata loading
    IF  is_lib_condition-if_none_match IS NOT INITIAL
    AND mo_context->is_etag_required( ) = abap_false
    AND lv_operation_kind <> /iwbep/if_v4_request_info=>gcs_operation_kinds-load_metadata .
      " Save call stack for Error Log
      /iwbep/cl_v4_logger=>save_callstack( ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_precond_failed.
    ENDIF.

    lv_lines = lines( is_lib_condition-if_match ).
    IF lv_lines > 1.
      " Save call stack for Error Log
      /iwbep/cl_v4_logger=>save_callstack( ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    IF is_lib_condition-if_match IS NOT INITIAL.
      READ TABLE is_lib_condition-if_match INDEX 1 INTO ls_lib_etag.

      "Initial tag may lead to assert dump in older backend systems in cross sp scenario -> apply SAP note 3125215
      mo_request_info->set_if_match_etag( ls_lib_etag-tag ).

    ENDIF.

    lv_lines = lines( is_lib_condition-if_none_match ).
    IF lv_lines > 1.
      " Save call stack for Error Log
      /iwbep/cl_v4_logger=>save_callstack( ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    CLEAR ls_lib_etag.
    IF is_lib_condition-if_none_match IS NOT INITIAL.
      READ TABLE is_lib_condition-if_none_match INDEX 1 INTO ls_lib_etag.

      "Initial tag may lead to assert dump in older backend systems in cross sp scenario -> apply SAP note 3125215
      mo_request_info->set_if_none_match_etag( ls_lib_etag-tag ).

    ENDIF.

  ENDMETHOD.


  METHOD merge_content_type.
    " Set ieee754 compatibility if requested
    " See /IWCOR/CL_OD_EP_FACADE -> CREATE_WRITER as example
    IF  is_lib_content_type-type = /iwcor/if_od_uri=>gc_format_type_application
    AND is_lib_content_type-subtype = /iwcor/if_od_uri=>gc_format_json
    AND is_lib_content_type-parameter CS /iwbep/if_od_types=>gcs_http_header_values-accept-ieee754_compatible.
      mo_request_info->set_is_ieee754_comp_requested( ).

    ENDIF.

  ENDMETHOD.


  METHOD merge_expand_select_info.

    DATA:
      lo_select_tree            TYPE REF TO /iwbep/if_v4_select_node,
      lt_expand_tree_list       TYPE /iwbep/cl_v4_expand_node=>ty_t_expand_node,
      lv_et_has_stream_property TYPE abap_bool,
      ls_response_type          TYPE /iwbep/if_v4_request_info=>tys_response_type,
      lo_response_type          TYPE REF TO /iwbep/if_v4_med_struc_type_r.


    ls_response_type = mo_request_info->get_response_type( ).

    ASSERT ls_response_type-type IS BOUND.
    "Do nothing for primitive types
    CHECK ls_response_type-type->get_kind(  ) <> /iwbep/if_v4_med_element=>kind_primitive_type.

    lo_response_type ?= ls_response_type-type .
    lv_et_has_stream_property = lo_response_type->has_stream(  ).

    IF io_lib_expand_select IS NOT BOUND. "Create select tree containing all primitive (excluding stream) and complex properties
      CHECK lv_et_has_stream_property = abap_true. "Only create select tree if entity type has stream property

      lo_select_tree = /iwbep/cl_od_exp_sel_builder=>build_select_maximal( lo_response_type ).

      ASSERT lo_select_tree IS BOUND.
      mo_request_info->set_select_tree( lo_select_tree ).

    ELSE. "Create select tree normally
      /iwbep/cl_od_exp_sel_builder=>build_from_lib_tree(
         EXPORTING
           io_lib_expand_select        = io_lib_expand_select
           io_request_info             = mo_request_info
           iv_is_for_data_description  = iv_is_data_description
         IMPORTING
           eo_select_tree              = lo_select_tree
           et_expand_tree              = lt_expand_tree_list ).

      IF ( iv_is_data_description = abap_false ). " Normal Expand / Select - used for data container creation
        CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->set_expand_select_tree( io_lib_expand_select ).

        IF lo_select_tree IS BOUND.
          mo_request_info->set_select_tree( lo_select_tree ).

        ELSEIF lv_et_has_stream_property = abap_true. "Create select tree containing all primitive (excluding stream) and complex properties
          lo_select_tree = /iwbep/cl_od_exp_sel_builder=>build_select_maximal( lo_response_type ).

          ASSERT lo_select_tree IS BOUND.
          mo_request_info->set_select_tree( lo_select_tree ).

        ENDIF.

        IF lt_expand_tree_list IS NOT INITIAL.
          mo_request_info->set_expand_tree_list( lt_expand_tree_list ).
        ENDIF.

      ELSE. " Deep Data Description - DEEP CREATE
        IF lo_select_tree IS BOUND.
          mo_request_info->set_patch_tree( lo_select_tree ).
        ENDIF.

        IF lt_expand_tree_list IS NOT INITIAL.
          mo_request_info->set_deep_data_description( lt_expand_tree_list ).
        ENDIF.

      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD merge_filter_info.

    DATA:
    lo_filter_root_node TYPE REF TO /iwbep/cl_v4_filter_node.

    IF ( io_lib_filter_root_node IS BOUND ).

      "@TODO - the determination of the service key of the target entity type should be done based on the
      "target entity type and hence inside the filter builder
      mo_request_info->get_navigation_path_raw( IMPORTING et_navigation_step = DATA(lt_navigation_step) ).
      ASSERT NOT lt_navigation_step IS INITIAL.
      DATA(ls_navigation_step) = lt_navigation_step[ lines( lt_navigation_step ) ].

      IF ls_navigation_step-type_kind EQ /iwbep/if_v4_med_element=>kind_entity_type.
        " Create filter tree only for read entity list requests
        " Note: Calling a function that returns an entity list is not (yet) supporting $filter and
        "       would even dump in mo_request_info->get_target_entity_type( ) because of the ASSERT
        lo_filter_root_node = /iwbep/cl_od_filter_builder=>build_from_lib_tree( io_target_entity        = mo_request_info->get_target_entity_type( )
                                                                                is_service_key          = ls_navigation_step-service_key
                                                                                io_lib_filter_root_node = io_lib_filter_root_node ).

        mo_request_info->set_filter_tree( lo_filter_root_node ).
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD merge_navigation.

    DATA: lt_navigation_step     TYPE /iwbep/if_v4_request_info=>ty_t_navigation_step,
          lv_resource_path       TYPE string,
          lv_resource_path_count TYPE i.

    IF is_lib_function_import_info IS NOT INITIAL.
      mo_request_info->set_is_funct_import_provided( ).
    ENDIF.

    /iwbep/cl_od_nav_builder=>build_from_lib_navigation(
    EXPORTING
      it_lib_uri_property_path       = it_lib_uri_property_path
      it_lib_uri_bound_function_path = it_lib_uri_bound_function_path
      is_lib_entity_set_info         = is_lib_entity_set_info
      is_lib_singleton_info          = is_lib_singleton_info
      is_lib_function_import_info    = is_lib_function_import_info
      is_lib_action_import_info      = is_lib_action_import_info
      is_lib_bound_action_info       = is_lib_bound_action_info
      io_request_info                = mo_request_info
    IMPORTING
      et_navigation_step             = lt_navigation_step
      es_navigation_tail             = es_lib_target ).

    lv_resource_path = mo_context->get_resource_path( ).
    FIND ALL OCCURRENCES OF '/' IN lv_resource_path MATCH COUNT lv_resource_path_count.
    mo_request_info->set_resource_path_count( lv_resource_path_count ).
    mo_request_info->set_navigation_path( lt_navigation_step ).

    CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->set_navigation_tail( es_lib_target ).

  ENDMETHOD.


  METHOD merge_prefer_headers.

    DATA: lo_lib_preference TYPE REF TO /iwcor/if_od_preference,
          ls_lib_preference TYPE /iwcor/if_od_preference=>preference_s,
          ls_preference     TYPE /iwbep/if_v4_request_info=>ty_s_preference.



    lo_lib_preference = mo_context->get_preference( ).


*   Prefer header 'odata.continue-on-error'
    IF is_supported_preference-continue_on_error = abap_true.
      CLEAR ls_lib_preference.
      lo_lib_preference->get_preference(
        EXPORTING
          iv_name       = /iwcor/if_od_preference=>gc_odata_continue_on_error
        IMPORTING
          es_preference = ls_lib_preference ).

      IF ls_lib_preference IS NOT INITIAL.
        ls_preference-continue_on_error = abap_true.
      ENDIF.

    ENDIF.


*   Prefer header "return"
    IF is_supported_preference-return_minimal = abap_true
    OR is_supported_preference-return_representation = abap_true.
      CLEAR ls_lib_preference.
      lo_lib_preference->get_preference(
        EXPORTING
          iv_name       = /iwcor/if_od_preference=>gc_return
        IMPORTING
          es_preference = ls_lib_preference ).

      IF  is_supported_preference-return_minimal = abap_true
      AND ls_lib_preference-value = /iwcor/if_od_preference=>gc_value_minimal.
        ls_preference-return_minimal = abap_true.

      ELSEIF is_supported_preference-return_representation = abap_true
      AND    ls_lib_preference-value = /iwcor/if_od_preference=>gc_value_representation.
        ls_preference-return_representation = abap_true.

      ENDIF.

    ENDIF.


*   Prefer header "strict"
    IF is_supported_preference-strict = abap_true.
      CLEAR ls_lib_preference.
      lo_lib_preference->get_preference(
        EXPORTING
          iv_name       =  /iwcor/if_od_preference=>gc_handling
        IMPORTING
          es_preference = ls_lib_preference ).

      IF ls_lib_preference-value = /iwcor/if_od_preference=>gc_value_strict.
        ls_preference-strict = abap_true.
      ENDIF.

    ENDIF.


*   Prefer header "odata.track-changes"
    IF is_supported_preference-track_changes = abap_true.
      CLEAR ls_lib_preference.
      lo_lib_preference->get_preference(
        EXPORTING
          iv_name       = /iwcor/if_od_preference=>gc_odata_track_changes
        IMPORTING
          es_preference = ls_lib_preference ).

      IF  ls_lib_preference IS NOT INITIAL.
        ls_preference-track_changes = abap_true.
      ENDIF.

    ENDIF.

*   Prefer header 'omit-values=nulls'
    IF is_supported_preference-omit_null_values = abap_true.
      CLEAR ls_lib_preference.
      lo_lib_preference->get_preference(
        EXPORTING
          iv_name       = /iwcor/if_od_preference=>gc_omit_values
        IMPORTING
          es_preference = ls_lib_preference ).

      IF    ls_lib_preference IS NOT INITIAL
        AND ls_lib_preference-value EQ /iwcor/if_od_preference=>gc_value_nulls.
        ls_preference-omit_null_values = abap_true.
      ENDIF.

    ENDIF.


    mo_request_info->set_preferences( ls_preference ).

  ENDMETHOD.


  METHOD merge_search.

    DATA lo_search_root_node TYPE REF TO /iwbep/if_v4_search_node.

    IF io_lib_search_root_node IS BOUND.
      lo_search_root_node = /iwbep/cl_od_search_builder=>build_from_lib_tree( io_lib_search_root_node ).
      mo_request_info->set_search_tree( lo_search_root_node ).
    ENDIF.

  ENDMETHOD.


  METHOD merge_select_info_from_path.

    DATA:
      lo_entity_type   TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_select_tree   TYPE REF TO /iwbep/if_v4_select_node,
      lt_property_name TYPE /iwbep/if_v4_med_types=>ty_t_med_internal_name.


    CHECK iv_property_path IS NOT INITIAL.

    lo_entity_type = mo_request_info->get_target_entity_type( ).
    ASSERT lo_entity_type IS BOUND.

    " Add key and Etag properties
    lo_select_tree = /iwbep/cl_od_exp_sel_builder=>build_select_minimal( lo_entity_type ).

    SPLIT iv_property_path AT '-' INTO TABLE lt_property_name.

    " Add path properties
    /iwbep/cl_od_exp_sel_builder=>add_path_to_select_node( io_structured_type         = lo_entity_type
                                                           it_property_name           = lt_property_name
                                                           io_select_node             = CAST #( lo_select_tree )
                                                           iv_is_for_data_description = abap_false ).

    mo_request_info->set_select_tree( lo_select_tree ).

  ENDMETHOD.


  METHOD merge_select_info_minimal.

    DATA: lo_select_tree TYPE REF TO /iwbep/if_v4_select_node.


    lo_select_tree = /iwbep/cl_od_exp_sel_builder=>build_select_minimal( io_entity_type ).
    mo_request_info->set_select_tree( lo_select_tree ).

    " The provider must return the business data, but we need only to return the ETag header and or location header (keys)
    " This method is only used if the client has not requested response data (prefer:return=representation), so currently the TODO-RETURN-BUSI_DATA is FALSE
    " So we have to change that here as well
    mo_request_info->set_is_busi_data_requested( ).
    mo_request_info->set_is_busi_data_for_header( ).

  ENDMETHOD.


  METHOD merge_st_info.

    DATA: lo_st                      TYPE REF TO /iwbep/cl_v4_st,
          lv_is_st_generation_needed TYPE abap_bool,
          ls_is_st_usable            TYPE abap_bool.

    CREATE OBJECT lo_st
      EXPORTING
        io_request_info = mo_request_info.

    lo_st->get_status(
      IMPORTING
        ev_is_st_generation_needed = lv_is_st_generation_needed    " TRUE if at least one ST needs to be generated
        ev_is_st_usable            = ls_is_st_usable ).            " TRUE if the response can be serialized via STs


    mo_request_info->set_st_status(
      iv_is_st_generation_needed = lv_is_st_generation_needed    " TRUE if at least one ST needs to be generated
      iv_is_st_usable            = ls_is_st_usable ).            " TRUE if the response can be serialized via STs

    CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->set_st( lo_st ).

  ENDMETHOD.


  METHOD read_complex.

    DATA: lo_response_info              TYPE REF TO /iwbep/if_v4_response_info,
          ls_navigation_tail            TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
          lo_entity_type                TYPE REF TO /iwbep/if_v4_med_entity_type_r,
          lo_cplx_property              TYPE REF TO /iwbep/if_v4_med_cplx_prop_r,
          lx_gateway                    TYPE REF TO /iwbep/cx_gateway,
          ls_lib_condition              TYPE /iwcor/rest_conditions,
          lo_lib_expand_select          TYPE REF TO /iwcor/if_od_expand_select,
          lv_omit_null_values_supported TYPE /iwbep/if_v4_request_info=>ty_s_preference-omit_null_values.

*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete OR
     mv_processing_mode = gcs_processing_modes-pre_processing_only.

      TRY.

          IF iv_is_collection = abap_true.
            IF io_orderby   IS NOT INITIAL
            OR io_filter    IS NOT INITIAL
            OR iv_count     IS NOT INITIAL
            OR io_apply     IS NOT INITIAL
            OR iv_skiptoken IS NOT INITIAL
            OR iv_skip      <> -1
            OR iv_top       <> -1.
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            " Not possible for complex property collections, but needed for properties inside
            lv_omit_null_values_supported = abap_true.

          ELSE.
            lv_omit_null_values_supported = abap_true.

          ENDIF.

          mo_request_info->set_is_busi_data_requested( ).


          merge_prefer_headers( is_supported_preference = VALUE #( omit_null_values      = lv_omit_null_values_supported
                                                                   return_representation = abap_true
                                                                   strict                = abap_true ) ).

          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( it_expand = it_expand
                            is_lib_condition = ls_lib_condition ).

          merge_navigation(
            EXPORTING
                it_lib_uri_property_path       = it_property_path
                it_lib_uri_bound_function_path = it_bound_function_path
                is_lib_entity_set_info         = is_entity_set_info
                is_lib_singleton_info          = is_singleton_info
                is_lib_function_import_info    = is_function_import_info
            IMPORTING
                es_lib_target                  = ls_navigation_tail ).


          IF ls_navigation_tail-is_function = abap_false.
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity ).

            " Get requested primitive property
            lo_entity_type = mo_request_info->get_target_entity_type( ).
            lo_cplx_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).

          ELSE.
            "Function (for complex property)
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function ).
            IF ls_navigation_tail-property_path IS NOT INITIAL.
              "Bound/composed functions are not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF ls_lib_condition IS NOT INITIAL.
              "Conditions are not yet supported for functions
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF it_expand IS NOT INITIAL.
              "Not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>expand_not_impl_for_func.
            ENDIF.

          ENDIF.

          lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
            is_entity_set_info      = is_entity_set_info
            is_singleton_info       = is_singleton_info
            is_function_import_info = is_function_import_info
            it_property_path        = it_property_path
            it_bound_function_path  = it_bound_function_path
            it_expand               = it_expand
            io_apply                = io_apply
            it_select               = it_select ).

          merge_expand_select_info( io_lib_expand_select = lo_lib_expand_select ).

          IF ls_navigation_tail-is_function = abap_false.
            " Convert requested property into $select information
            merge_select_info_from_path( ls_navigation_tail-property_path ).
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.

*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT ro_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.

            init_data_provider( mo_request_info ).

            IF ls_navigation_tail-is_function = abap_false.
              lo_response_info = mo_data_provider->read_entity( mo_request_info ).
            ELSE.
              lo_response_info = mo_data_provider->execute_function( mo_request_info ).
            ENDIF.

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    IF    iv_is_collection EQ abap_false  " null values are not supported in cp collections
      AND ls_navigation_tail-is_function EQ abap_false.
      " Validate response in property path
      " E.g. Check for null values in property path for response
      validate_respnse_property_path(
        EXPORTING
          io_response_info   = lo_response_info
          is_navigation_tail = ls_navigation_tail
          io_entity_type     = lo_entity_type ).

    ENDIF.

    TRY.
        IF iv_is_collection = abap_false.
          IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
            CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
            RETURN.
          ENDIF.

          "needed as ls_navigation_tail will be initial in batch processing
          IF ls_navigation_tail IS INITIAL.
            ls_navigation_tail = CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->get_navigation_tail(  ).

            IF ls_navigation_tail-is_function EQ abap_false.
              lo_entity_type = mo_request_info->get_target_entity_type( ).
              lo_cplx_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).
            ENDIF.
          ENDIF.

          ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_complex(  io_request_info             = mo_request_info
                                                                             io_response_info            = lo_response_info
                                                                             io_cplx_property            = lo_cplx_property
                                                                             is_lib_entity_set_info      = is_entity_set_info
                                                                             is_lib_singleton_info       = is_singleton_info
                                                                             is_lib_function_import_info = is_function_import_info
                                                                             it_lib_property_path        = it_property_path
                                                                             it_lib_bound_function_path  = it_bound_function_path
                                                                             is_lib_content_type         = is_content_type ).
        ELSE.
          ro_provider =
            /iwbep/cl_od_resp_prov_factory=>create_for_complex_collection(  io_request_info             = mo_request_info
                                                                            io_response_info            = lo_response_info
                                                                            is_lib_entity_set_info      = is_entity_set_info
                                                                            is_lib_singleton_info       = is_singleton_info
                                                                            is_lib_function_import_info = is_function_import_info
                                                                            it_lib_property_path        = it_property_path
                                                                            it_lib_bound_function_path  = it_bound_function_path
                                                                            is_lib_content_type         = is_content_type ).
        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

    ENDTRY.

  ENDMETHOD.


  METHOD set_applied_preferences.

    DATA:
      lo_lib_preference TYPE REF TO /iwcor/if_od_preference,
      ls_preference     TYPE /iwbep/if_v4_request_info=>ty_s_preference.



    CHECK io_response_info IS BOUND. "Can be initial if e.g. a batch request contained only operations that are rejected by the lib


    lo_lib_preference  = mo_context->get_preference( ).
    ls_preference      = mo_request_info->get_preferences( ).


    " Prefer:handling=strict
    IF  ls_preference-strict = abap_true
    AND io_response_info->is_strict_handling_applied( ) = abap_true.
      lo_lib_preference->set_preference_applied(
          iv_name  =  /iwcor/if_od_preference=>gc_handling
          iv_value = /iwcor/if_od_preference=>gc_value_strict ).
    ENDIF.


    " Prefer:return=minimal / Prefer:return=representation
    IF ls_preference-return_minimal = abap_true.
      lo_lib_preference->set_preference_applied(
        iv_name  = /iwcor/if_od_preference=>gc_return
        iv_value = /iwcor/if_od_preference=>gc_value_minimal ).

    ELSEIF ls_preference-return_representation = abap_true.
      lo_lib_preference->set_preference_applied(
        iv_name  = /iwcor/if_od_preference=>gc_return
        iv_value = /iwcor/if_od_preference=>gc_value_representation ).

    ENDIF.


    " Prefer:odata.track-changes
    IF ls_preference-track_changes = abap_true
    AND io_response_info->are_changes_tracked( ).
      lo_lib_preference->set_preference_applied( /iwcor/if_od_preference=>gc_odata_track_changes ).
    ENDIF.


    " Prefer:odata.continue-on-error
    IF  ls_preference-continue_on_error = abap_true
    AND io_response_info->is_continue_on_error_applied( ).
      lo_lib_preference->set_preference_applied( /iwcor/if_od_preference=>gc_odata_continue_on_error ).
    ENDIF.


    " Prefer:omit-values
    IF ls_preference-omit_null_values = abap_true.
      lo_lib_preference->set_preference_applied( iv_name  = /iwcor/if_od_preference=>gc_omit_values
                                                 iv_value = /iwcor/if_od_preference=>gc_value_nulls ).
    ENDIF.

  ENDMETHOD.


  METHOD set_context.
* This method must not call GET_DATA_PROVIDER
* as no data provider is needed for the service document
* ( method /IWCOR/IF_OD_PROC_SERVICE_DOC~READ )

    DATA: lo_od_uri TYPE REF TO /iwcor/if_od_uri.

    mo_context = io_context.

* Get Request Info back from IO_CONTEXT - It has been set in /IWBEP/CL_OD_ROOT_HANDLER - OData V4 Root Handler for OData Lib
    mo_request_info ?= io_context->get_object( /iwbep/if_od_types=>gc_od_cntx_object_identifier ).

    lo_od_uri ?= io_context->get_uri( ).

    IF lo_od_uri IS BOUND.
      mo_request_info->set_custom_query_options( it_custom_query_options = lo_od_uri->custom_query_options ).
    ENDIF.

  ENDMETHOD.


  METHOD validate_respnse_property_path.

    DATA: lx_gateway          TYPE REF TO /iwbep/cx_gateway,
          lv_property_name_vc TYPE /iwbep/if_v4_med_types=>ty_property_path,
          lv_property_path    TYPE string,
          lv_property_path_vc TYPE string,
          lr_busi_data        TYPE REF TO data,
          lo_property         TYPE REF TO /iwbep/if_v4_med_element,
          lv_property_name    TYPE string,
          lt_property         TYPE string_table,
          lv_root_property    TYPE string,
          lv_line             TYPE i.

    FIELD-SYMBOLS: <ls_busi_data>   TYPE any,
                   <lv_property_vc> TYPE any.

    " Property path with primitive property at it's end
    lv_property_path = is_navigation_tail-property_path.
    CHECK lv_property_path IS NOT INITIAL.

    " Bound/composed functions are not yet supported - should be caught in pre-processing
    ASSERT io_entity_type IS BOUND.

    "Prepare table of all properties contained in the path and save the root property
    SPLIT lv_property_path AT /iwbep/if_v4_med_types=>gcs_med_path_separators-internal INTO TABLE lt_property.
    lv_root_property = lt_property[ 1 ].

    "Delete the last entry of the path, as this entry does not need to be checked
    lv_line = lines( lt_property ).
    DELETE lt_property INDEX lv_line.

    LOOP AT lt_property INTO lv_property_name.
      CLEAR: lv_property_name_vc, lv_property_path_vc.

      TRY.
          lo_property = io_entity_type->get_property( CONV #( lv_property_name ) ).

          CHECK lo_property->get_kind( ) = /iwbep/if_v4_med_element=>kind_complex_property
          AND CAST /iwbep/if_v4_med_cplx_prop_r( lo_property )->is_nullable( ) = abap_true.

          lv_property_name_vc = CAST /iwbep/if_v4_med_cplx_prop_r( lo_property )->get_value_control_prop_path( ).
          CHECK lv_property_name_vc IS NOT INITIAL.

          "Build path to vc property
          lv_property_path_vc = build_value_control_prop_path(
                                  it_property         = lt_property
                                  iv_property_name    = lv_property_name
                                  iv_property_name_vc = lv_property_name_vc ).

          lr_busi_data = io_response_info->get_busi_data( ).
          ASSIGN lr_busi_data->* TO <ls_busi_data>.

          "Check value of vc property
          ASSIGN COMPONENT lv_property_path_vc OF STRUCTURE <ls_busi_data> TO <lv_property_vc>.
          IF <lv_property_vc> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null.
            " We have a path to a property that lies within a complex property which is null
            " Raise a 404 (Not Found)
            RAISE EXCEPTION TYPE /iwcor/cx_od_not_found.
          ENDIF.

        CATCH /iwbep/cx_v4_med INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

      ENDTRY.

    ENDLOOP.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_void~execute_action_import.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-void " Operation return type kind
            is_action_import_info         = is_action_import_info                      " Action import info structure
            is_content_type               = is_content_type ).                           " Content type structure ($format or Accept header)

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_batch~execute.

    DATA:
      lo_batch_request             TYPE REF TO /iwbep/if_v4_request_info,
      lo_lib_context               TYPE REF TO /iwcor/if_od_cntxt,
      lo_response_info             TYPE REF TO /iwbep/if_v4_response_info,
      lo_root_handler              TYPE REF TO /iwbep/cl_od_root_handler,
      "! batch operation is either a single read operation or a changeset (= list of change operations)
      ls_batch_operation           TYPE ty_s_batch_operation,
      ls_current_service_key       TYPE /iwbep/s_v4_med_service_key,
      ls_operation                 TYPE ty_s_operation,
      ls_request_child             TYPE /iwbep/if_v4_request_info=>ty_s_child,
      ls_response_child            TYPE /iwbep/if_v4_response_info=>ty_s_child,
      lt_batch_operation           TYPE ty_t_batch_operation,
      lt_operation                 TYPE STANDARD TABLE OF ty_s_operation WITH KEY id,
      lt_response_child            TYPE /iwbep/if_v4_response_info=>ty_t_child,
      lv_backend_version           TYPE /iwbep/v4_gw_version,
      lv_batch_origin_system_alias TYPE /iwbep/if_v4_routing_types=>ty_e_system_alias,
      lv_change_set_error          TYPE abap_bool,
      lv_change_set_id             TYPE /iwbep/if_v4_request_info=>ty_change_set_id,
      lv_do_continue_on_error      TYPE abap_bool,
      lv_has_post_proc_error       TYPE abap_bool,
      "! TRUE if the batch request contains operations for more than one service
      lv_is_cross_service_batch    TYPE abap_bool,
      lv_request_id                TYPE /iwbep/if_v4_request_info=>ty_operation_id,
      lv_status                    TYPE i,
      lx_gateway                   TYPE REF TO /iwbep/cx_gateway,
      lx_od_error                  TYPE REF TO /iwcor/cx_od_error,
      lx_od_http_error             TYPE REF TO /iwcor/cx_od_http_error.

    FIELD-SYMBOLS:
      <ls_lib_batch>             TYPE /iwcor/if_od_proc_batch=>batch_s,
      <ls_lib_handler_parameter> TYPE /iwcor/if_od_proc_batch=>handler_parameter_s,
      <ls_batch_operation>       TYPE ty_s_batch_operation.


*--------------------------------------------------------------------------------------
* preparation
*--------------------------------------------------------------------------------------
    " request information of the $batch request itself has been created in the root handler
    " transferred to the processor through SET_CONTEXT
    mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-process_batch ).

    " stored in local variable as the processor context changes when batch operations are processed
    lo_batch_request = mo_request_info.
    lo_lib_context   = mo_context.

    " set processing mode - subsequent processor calls only execute pre-processing
    " for the batch operations
    mv_processing_mode = gcs_processing_modes-pre_processing_only.

    " prepare specific root handler for delegation
    lo_root_handler = NEW /iwbep/cl_od_root_handler( mo_service_factory ).
    lo_root_handler->set_is_batch_handler( ).
    lo_root_handler->set_processing_mode( gcs_processing_modes-pre_processing_only ).


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    TRY.

        merge_prefer_headers( is_supported_preference = VALUE #( continue_on_error = abap_true ) ).

        lv_do_continue_on_error      = lo_batch_request->do_continue_on_error( ).
        ls_current_service_key       = lo_batch_request->get_service_key( ).
        lv_batch_origin_system_alias = lo_batch_request->get_origin_system_alias( ).

        LOOP AT it_batch ASSIGNING <ls_lib_batch>.

*   Single Operation
          IF <ls_lib_batch>-operation IS NOT INITIAL.
            CLEAR ls_batch_operation.
            lv_request_id = lv_request_id + 1.

            ls_batch_operation-operation-id                     = lv_request_id.
            ls_batch_operation-operation-lib_handler_parameter  = <ls_lib_batch>-operation->*.
            ls_batch_operation-operation-request                = /iwbep/cl_v4s_runtime_factory=>create_request_info( ).

            ls_batch_operation-operation-request->set_parent( lo_batch_request ).
            lo_root_handler->set_request_info( ls_batch_operation-operation-request ).

            " handle the current request in pre-processing mode with the request info
            " that has just been prepared and retrieve the created OData context afterwards
            lo_root_handler->/iwcor/if_rest_handler~handle(
              io_request  = <ls_lib_batch>-operation->*-request
              io_response = <ls_lib_batch>-operation->*-response
              io_context  = <ls_lib_batch>-operation->*-context ).

            lv_status = <ls_lib_batch>-operation->*-response->get_status( ).
            IF /iwcor/cl_rest_status_code=>is_error( lv_status ).
              IF lv_do_continue_on_error = abap_false.
                EXIT.
              ENDIF.

            ELSEIF /iwcor/cl_rest_status_code=>is_redirection( lv_status ).
              " The lib wants to create a re-direct response for service document requests missing the trailing /
              " Redirect /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/0001 -> /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/0001/
              " - But this is also done for any other (corrupt) resource URI which just has the right (wrong) number of segments
              "   E.g. /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/Teams('Team_01')
              " - Also, we (and most clients) cannot handle a re-direct for a single batch operations anyway
              " => Error
              <ls_lib_batch>-operation->*-response = get_lib_resp_for_wrong_service( ls_batch_operation-operation-request ).
              IF lv_do_continue_on_error = abap_false.
                EXIT.
              ENDIF.

            ELSE.
              ls_batch_operation-operation-lib_context = lo_root_handler->get_lib_context( ).

              CLEAR ls_request_child.
              ls_request_child-id             = ls_batch_operation-operation-id.
              ls_request_child-request        = ls_batch_operation-operation-request.
              ls_request_child-operation_kind = ls_batch_operation-operation-request->get_operation_kind( ).

              IF  lv_is_cross_service_batch = abap_false
              AND ls_current_service_key <> ls_request_child-request->get_service_key( ).
                lv_is_cross_service_batch = abap_true.
              ENDIF.

              check_batch_operation( is_operation_info            = ls_request_child
                                     iv_batch_origin_system_alias = lv_batch_origin_system_alias ).
              lo_batch_request->add_child( ls_request_child ).

              APPEND ls_batch_operation TO lt_batch_operation.
            ENDIF.


*   Changeset
          ELSEIF <ls_lib_batch>-change_set IS NOT INITIAL.
            CLEAR ls_batch_operation.
            lv_change_set_id = lv_change_set_id + 1.
            ls_batch_operation-changeset-change_set_id = lv_change_set_id.

            lv_change_set_error = abap_false.

            LOOP AT <ls_lib_batch>-change_set->* ASSIGNING <ls_lib_handler_parameter>.
              CLEAR ls_operation.
              lv_request_id = lv_request_id + 1.

              ls_operation-id                    = lv_request_id.
              ls_operation-lib_handler_parameter = <ls_lib_handler_parameter>.
              ls_operation-request               = /iwbep/cl_v4s_runtime_factory=>create_request_info( ).

              ls_operation-request->set_parent( io_parent = lo_batch_request ).
              lo_root_handler->set_request_info( ls_operation-request ).

              " handle the current request in pre-processing mode with the request info
              " that has just been prepared and retrieve the created OData context afterwards
              lo_root_handler->/iwcor/if_rest_handler~handle(
                io_request  = <ls_lib_handler_parameter>-request
                io_response = <ls_lib_handler_parameter>-response
                io_context  = <ls_lib_handler_parameter>-context ).

              lv_status = <ls_lib_handler_parameter>-response->get_status( ).

              IF /iwcor/cl_rest_status_code=>is_error( lv_status ).
                lv_change_set_error = abap_true.
                " change set processing stops on error (even with continue-on-error preference)
                EXIT.

              ELSEIF /iwcor/cl_rest_status_code=>is_redirection( lv_status ).
                " The lib wants to create a re-direct response for service document requests missing the trailing /
                " Redirect /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/0001 -> /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/0001/
                " - But this is also done for any other (corrupt) resource URI which just has the right (wrong) number of segments
                "   E.g. /sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/Teams('Team_01')
                " - Also, we (and most clients) cannot handle a re-direct for a single batch operations anyway
                " => Error
                lv_change_set_error = abap_true.
                <ls_lib_batch>-operation->*-response = get_lib_resp_for_wrong_service( ls_batch_operation-operation-request ).
                " change set processing stops on error (even with continue-on-error preference)
                EXIT.

              ENDIF.

              ls_operation-lib_context = lo_root_handler->get_lib_context( ).
              APPEND ls_operation TO ls_batch_operation-changeset-operations.

            ENDLOOP.

            IF lv_change_set_error EQ abap_false.

              "add children to request only if the changeset has no error
              LOOP AT ls_batch_operation-changeset-operations INTO ls_operation.
                CLEAR ls_request_child.
                ls_request_child-id             = ls_operation-id.
                ls_request_child-changeset_id   = lv_change_set_id.
                ls_request_child-request        = ls_operation-request.
                ls_request_child-operation_kind = ls_operation-request->get_operation_kind( ).
                ls_request_child-content_id     = ls_operation-request->get_content_id( ).

                IF  lv_is_cross_service_batch = abap_false
                AND ls_current_service_key <> ls_request_child-request->get_service_key( ).
                  lv_is_cross_service_batch = abap_true.
                ENDIF.

                check_batch_operation( is_operation_info            = ls_request_child
                                       iv_batch_origin_system_alias = lv_batch_origin_system_alias ).
                lo_batch_request->add_child( ls_request_child ).
              ENDLOOP.

              APPEND ls_batch_operation TO lt_batch_operation.

            ELSEIF  lv_do_continue_on_error EQ abap_false.
              EXIT.
            ENDIF.

          ENDIF.

        ENDLOOP.

        IF lv_is_cross_service_batch = abap_true.
          lv_backend_version = mo_request_info->get_backend_version( )-gw_version.

          IF lv_backend_version < '026'.
            " Old backend systems (version < 026) do not support cross-service batch
            RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>cross_service_btch_old_backend ).
          ENDIF.

          lo_batch_request->set_is_cross_service_batch( ).
        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_v4_logger=>save_callstack( ).
        RAISE EXCEPTION NEW /iwcor/cx_od_http_error( previous = lx_gateway ).
    ENDTRY.


*--------------------------------------------------------------------------------------
* data provisioning (process complete batch request)
*--------------------------------------------------------------------------------------
    IF lt_batch_operation IS NOT INITIAL.

      TRY.
          init_data_provider( lo_batch_request ).
          lo_response_info = mo_data_provider->process_batch( lo_batch_request ).

        CATCH /iwbep/cx_gateway INTO lx_gateway.
          " the complete batch failed - assign to the first response and return
          " ignoring continue-on-error (do not set preference applied)
          CREATE OBJECT lx_od_http_error
            EXPORTING
              previous = lx_gateway.

          CLEAR ls_operation.
          READ TABLE lt_batch_operation INTO ls_batch_operation INDEX 1.

          IF ls_batch_operation-operation IS NOT INITIAL.
            ls_operation = ls_batch_operation-operation.
          ELSEIF ls_batch_operation-changeset IS NOT INITIAL.
            READ TABLE ls_batch_operation-changeset-operations INTO ls_operation INDEX 1.
            ASSERT sy-subrc EQ 0.
          ENDIF.

          /iwbep/cl_od_error_handler=>create( )->handle_error(
              io_request_info = mo_request_info
              io_error        = lx_od_http_error
              io_response     = ls_operation-lib_handler_parameter-response
              io_context      = mo_context ).

          RETURN.
      ENDTRY.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
      " set processing mode - subsequent processor calls only execute post-processing
      " for the batch operations
      mv_processing_mode = gcs_processing_modes-post_processing_only.
      lo_root_handler->set_processing_mode( gcs_processing_modes-post_processing_only ).

      lo_response_info->get_children( IMPORTING et_child = lt_response_child ).

      LOOP AT lt_batch_operation ASSIGNING <ls_batch_operation>.

        CLEAR lt_operation.
        lv_has_post_proc_error = abap_false.

        IF <ls_batch_operation>-operation IS NOT INITIAL.
          APPEND <ls_batch_operation>-operation TO lt_operation.
        ELSEIF <ls_batch_operation>-changeset IS NOT INITIAL.
          lt_operation = <ls_batch_operation>-changeset-operations.
        ENDIF.

        LOOP AT lt_operation INTO ls_operation.

          TRY.

              TRY.
                  READ TABLE lt_response_child INTO ls_response_child
                    WITH TABLE KEY id = ls_operation-id.
                  " no response indicates implementation error in data
                  " provider
                  IF sy-subrc NE 0.
                    RAISE EXCEPTION TYPE /iwbep/cx_v4h_runtime
                      EXPORTING
                        textid      = /iwbep/cx_v4h_runtime=>missing_batch_oper_response
                        is_for_user = abap_true
                        sap_note_id = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-batch.
                  ENDIF.

                  " check for BEP exception
                  ls_response_child-response_info->check_and_raise_bep_exception( ).

                CATCH /iwbep/cx_gateway INTO lx_gateway.
                  " Save call stack for Error Log
                  /iwbep/cl_v4_logger=>save_callstack( ).
                  RAISE EXCEPTION TYPE /iwcor/cx_od_http_error
                    EXPORTING
                      previous = lx_gateway.
              ENDTRY.

              ls_operation-lib_context->set_object(
                EXPORTING
                  iv_name   = /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier
                  io_object = ls_response_child-response_info ).

              " set the current context (includes request info, response info, post processor) for
              " the post-processing call
              set_context( ls_operation-lib_context ).
              lo_root_handler->set_request_info( ls_operation-request ).

              lo_root_handler->handle_with_mode(
                EXPORTING
                  io_request         = ls_operation-lib_handler_parameter-request
                  io_response        = ls_operation-lib_handler_parameter-response
                  io_context         = ls_operation-lib_context
                  iv_mode            = lo_root_handler->gcs_handle_modes-repeat ).

            CATCH /iwcor/cx_od_error INTO lx_od_error.
              /iwbep/cl_od_error_handler=>create( )->handle_error(
                  io_request_info = ls_operation-request
                  io_error        = lx_od_error
                  io_response     = ls_operation-lib_handler_parameter-response
                  io_context      = mo_context ).

              " if the error is raised from the backend then the backend provider
              " should have observed transaction handling -> skip complete changeset
              " if the error is raised during post-processing then the changeset was processed -> issue documented in batch note

              lv_has_post_proc_error = abap_true.
              EXIT.
          ENDTRY.

        ENDLOOP.

        IF  lv_has_post_proc_error  = abap_true
        AND lv_do_continue_on_error = abap_false.
          " exit complete post-processing
          EXIT.
        ENDIF.

      ENDLOOP.

    ENDIF.

    mo_context      = lo_lib_context.
    mo_request_info = lo_batch_request.

    set_applied_preferences( lo_response_info  ).

    " reset processing mode
    mv_processing_mode = gcs_processing_modes-complete.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex_coll~execute_action_import.

    TRY.
        execute_action(
         EXPORTING
           io_request_entity             = io_request_entity
           iv_operation_return_type_kind = gcs_operation_return_type_kind-complex_collection
           is_action_import_info         = is_action_import_info
           is_content_type               = is_content_type
           it_expand                     = it_expand
           it_select                     = it_select
         IMPORTING
           eo_provider                   = ro_provider ).

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex_coll~execute_bound_action.

    TRY.
        execute_action(
         EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-complex_collection " Operation return type kind
            is_content_type               = is_content_type                            " Content type structure ($format or Accept header)
            it_expand                     = it_expand                                  " $expand system query option
            it_select                     = it_select                                  " $select system query option
            is_entity_set_info            = is_entity_set_info                         " EntitySet info structure
            is_singleton_info             = is_singleton_info                          " Singleton info structure
            is_function_import_info       = is_function_import_info                    " Function import info structure
            is_bound_action_info          = is_bound_action_info                       " Bound action info structure
            it_property_path              = it_property_path                           " Property path
            it_bound_function_path        = it_bound_function_path                     " Bound function path table with path
            io_filter                     = io_filter                                  " $filter system query option
            iv_count                      = iv_count                                   " $count system query option
            io_orderby                    = io_orderby                                 " $orderby system query option
            iv_skip                       = iv_skip                                    " $skip system query option
            iv_skiptoken                  = iv_skiptoken                               " $skiptoken system query option
            iv_top                        = iv_top                                     " $top system query option
         IMPORTING
           eo_provider                   = ro_provider ).                             " Response provider

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.
  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex_coll~read.

    me->read_complex(
      EXPORTING
        is_entity_set_info      = is_entity_set_info
        is_singleton_info       = is_singleton_info
        is_function_import_info = is_function_import_info
        it_property_path        = it_property_path
        it_bound_function_path  = it_bound_function_path
        io_filter               = io_filter
        iv_count                = iv_count
        io_orderby              = io_orderby
        iv_skip                 = iv_skip
        iv_skiptoken            = iv_skiptoken
        iv_top                  = iv_top
        it_expand               = it_expand
        it_select               = it_select
        io_apply                = io_apply
        is_content_type         = is_content_type
        iv_is_collection        = abap_true
      RECEIVING
        ro_provider             = ro_provider ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex~execute_action_import.

    DATA: lx_v4_not_impl TYPE REF TO /iwbep/cx_v4_not_implemented.


    TRY.
        execute_action(
         EXPORTING
           io_request_entity             = io_request_entity
           iv_operation_return_type_kind = gcs_operation_return_type_kind-complex_type
           is_action_import_info         = is_action_import_info
           is_content_type               = is_content_type
           it_expand                     = it_expand
           it_select                     = it_select
         IMPORTING
           eo_provider                   = ro_provider ).

      CATCH /iwbep/cx_v4_not_implemented INTO lx_v4_not_impl.
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex~execute_bound_action.

    DATA: lx_v4_not_impl TYPE REF TO /iwbep/cx_v4_not_implemented.


    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                           " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-complex_type " Operation return type kind
            is_content_type               = is_content_type                             " Content type structure ($format or Accept header)
            it_expand                     = it_expand                                   " $expand system query option
            it_select                     = it_select                                   " $select system query option
            is_entity_set_info            = is_entity_set_info                          " EntitySet info structure
            is_singleton_info             = is_singleton_info                           " Singleton info structure
            is_function_import_info       = is_function_import_info                     " Function import info structure
            is_bound_action_info          = is_bound_action_info                        " Bound action info structure
            it_property_path              = it_property_path                            " Property path
            it_bound_function_path        = it_bound_function_path                      " Bound function path table with path
          IMPORTING
            eo_provider                   = ro_provider ).                              " Response provider

      CATCH /iwbep/cx_v4_not_implemented INTO lx_v4_not_impl.
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_complex~read.

    ro_provider = read_complex(
        is_entity_set_info      = is_entity_set_info
        is_singleton_info       = is_singleton_info
        is_function_import_info = is_function_import_info
        it_property_path        = it_property_path
        it_bound_function_path  = it_bound_function_path
        it_expand               = it_expand
        it_select               = it_select
        is_content_type         = is_content_type
        iv_is_collection        = abap_false ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~count.

    DATA: lo_response_info        TYPE REF TO /iwbep/if_v4_response_info,
          lo_lib_expand_select    TYPE REF TO /iwcor/if_od_expand_select,
          ls_system_query_options TYPE /iwbep/if_v4_request_info=>ty_s_system_query_info,
          lx_gateway              TYPE REF TO /iwbep/cx_gateway.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode EQ gcs_processing_modes-complete
    OR mv_processing_mode EQ gcs_processing_modes-pre_processing_only.

      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list ).
      mo_request_info->set_is_count_requested( ).

      ls_system_query_options-top         = -1. "0 would be interpreted as "todo-process-top = abap_true" with top=0
      ls_system_query_options-skip        = -1. "0 would be interpreted as "todo-process-skip = abap_true" with skip=0
      ls_system_query_options-delta_token = iv_deltatoken.
      mo_request_info->set_system_query_options( ls_system_query_options ).

      lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
        is_entity_set_info      = is_entity_set_info
        is_singleton_info       = is_singleton_info
        is_function_import_info = is_function_import_info
        it_property_path        = it_property_path
        it_bound_function_path  = it_bound_function_path ).

      TRY.

          merge_navigation(
            EXPORTING
              it_lib_uri_property_path       = it_property_path
              it_lib_uri_bound_function_path = it_bound_function_path
              is_lib_entity_set_info         = is_entity_set_info
              is_lib_singleton_info          = is_singleton_info
              is_lib_function_import_info    = is_function_import_info ).

          merge_filter_info( io_filter ).
          merge_expand_select_info( lo_lib_expand_select ).
          IF ( io_apply IS BOUND ).
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
          ENDIF.
          merge_search( io_search ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        rv_count = 0.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info  ).

            lo_response_info = mo_data_provider->read_entity_set( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    rv_count = lo_response_info->get_count( ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~create_entity.

    DATA:
      lo_lib_entity_type        TYPE REF TO /iwcor/if_od_edm_entity_type,
      lo_lib_expand             TYPE REF TO /iwcor/if_od_expand_select,
      lo_lib_expand_select      TYPE REF TO /iwcor/if_od_expand_select,
      lo_lib_key_prop_ref       TYPE REF TO /iwcor/if_od_edm_key_prop_ref,
      ls_lib_entity_info        TYPE /iwcor/if_od_ep_types=>entity_info_s,
      ls_lib_meta_info          TYPE /iwcor/if_od_ep_types=>read_meta_info_s,
      lt_lib_callback           TYPE /iwcor/if_od_ep_callback=>callback_registration_t,
      lt_lib_component_name     TYPE /iwcor/if_od_ep_types=>component_name_t,
      lt_lib_expand             TYPE /iwcor/if_od_uri=>expand_item_t,
      lt_lib_expand_with_select TYPE /iwcor/if_od_uri=>expand_item_t,
      lt_lib_select             TYPE /iwcor/if_od_uri=>select_item_t,
      lt_lib_key_property_ref   TYPE /iwcor/if_od_edm_entity_type=>key_property_ref_t.

    DATA:
      lo_cb_link_reader              TYPE REF TO /iwbep/cl_od_cb_link_reader,
      lo_provided_property_tree_act  TYPE REF TO /iwbep/if_v4_select_node,
      lo_response_info               TYPE REF TO /iwbep/if_v4_response_info,
      lo_target_entity_type          TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lr_busi_data                   TYPE REF TO data,
      ls_navigation_tail             TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      lt_data_description_act        TYPE /iwbep/cl_v4_expand_node=>ty_t_expand_node,
      lt_data_description_complete   TYPE /iwbep/cl_v4_expand_node=>ty_t_expand_node,
      lt_reference_data              TYPE /iwbep/if_v4_request_info=>ty_t_reference_data,
      lv_backend_version             TYPE /iwbep/cl_v4_v2_util_facade=>ty_s_v4_gw_version-gw_version,
      lv_are_all_properties_provided TYPE abap_bool,
      lv_all_items_have_some_comps   TYPE abap_bool,
      lv_do_flag_omitted_data_in_vc  TYPE abap_bool,
      lv_do_init_as_omit             TYPE abap_bool,
      lv_do_init_nullable_as_null    TYPE abap_bool,
      lv_do_read_binding             TYPE abap_bool,
      lv_have_all_items_same_comps   TYPE abap_bool,
      lv_is_deep_create              TYPE abap_bool,
      lv_support_return_minimal      TYPE abap_bool,
      lx_gateway                     TYPE REF TO /iwbep/cx_gateway,

      lt_lib_supplied_component      TYPE /iwcor/if_od_ep_types=>component_t.

    FIELD-SYMBOLS: <ls_busi_data> TYPE data.



    CLEAR et_key.

*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity ).
      mo_request_info->set_is_busi_data_requested( ). "By default we return the response, can be overwritten by the preference below

      IF it_expand IS INITIAL.
        "For a POST request with $expand and prefer:return=minimal header, the preference shall be ignored
        "Instead, the whole response shall be returned
        lv_support_return_minimal = abap_true.
      ENDIF.

      TRY.
          merge_prefer_headers( is_supported_preference = VALUE #( return_minimal        = lv_support_return_minimal
                                                                   return_representation = abap_true
                                                                   strict                = abap_true ) ).

          merge_navigation(
            EXPORTING
              is_lib_entity_set_info   = is_entity_set_info
              it_lib_uri_property_path = it_property_path
            IMPORTING
              es_lib_target            = ls_navigation_tail ).

          lo_target_entity_type = mo_request_info->get_target_entity_type( ).

          lo_lib_entity_type        ?= ls_navigation_tail-lib_type.
          ls_lib_entity_info-type   ?= lo_lib_entity_type.
          ls_lib_entity_info-target ?= ls_navigation_tail-lib_target.

          lv_backend_version            = mo_request_info->get_backend_version( )-gw_version.
          lv_do_flag_omitted_data_in_vc = mo_request_info->get_service_features( )-service_features_pro-use_vc_to_flag_omitted_data.

          get_default_vc_values(
            EXPORTING
              iv_is_patch_semantic        = abap_false
            IMPORTING
              ev_do_init_as_omit          = lv_do_init_as_omit
              ev_do_init_nullable_as_null = lv_do_init_nullable_as_null ).


*   Pre-parser
          /iwcor/cl_od_ep_facade=>read_structure_components(
              EXPORTING
                io_rest_entity               = io_request_entity
                is_content_type              = is_content_type
                io_structured_type           = ls_lib_entity_info-type
              IMPORTING
                et_component                 = lt_lib_component_name
                ev_have_all_items_same_comps = lv_have_all_items_same_comps ).

          IF lv_have_all_items_same_comps = abap_false.
            mo_request_info->set_is_busi_data_heterogeneous( ).
          ENDIF.

          IF  lv_have_all_items_same_comps  = abap_false
          AND lv_do_flag_omitted_data_in_vc = abap_false.
            " Heterogeneous deep create cannot be processed if the provider application uses the "provided properties"
            RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid             = /iwbep/cx_v4_not_implemented=>create_heterogen
                                                              sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-deep_create
                                                              exception_category = /iwbep/cx_gateway=>gcs_excep_categories-provider ).
          ENDIF.


*   (Deep) data container with all properties

            /iwbep/cl_od_exp_sel_builder=>build_from_nav_component_names(
                EXPORTING
                  io_entity_type      = mo_request_info->get_target_entity_type( )
                  it_component        = lt_lib_component_name
                IMPORTING
                  et_data_description = lt_data_description_complete ).

            lr_busi_data = mo_request_info->create_data_container_struc( it_deep_data_description = lt_data_description_complete ).
            ASSIGN lr_busi_data->* TO <ls_busi_data>.


*   Description of the request payload
            /iwbep/cl_od_exp_sel_builder=>build_from_component_names(
                EXPORTING
                  io_structured_type             = mo_request_info->get_target_entity_type( )
                  it_component                   = lt_lib_component_name
                IMPORTING
                  eo_provided_property_tree      = lo_provided_property_tree_act
                  et_data_description            = lt_data_description_act
                  ev_are_all_properties_provided = lv_are_all_properties_provided ).

*          IF lv_are_all_properties_provided = abap_false.
            IF lo_provided_property_tree_act IS BOUND.
              mo_request_info->set_patch_tree( lo_provided_property_tree_act ).
            ENDIF.

            IF lt_data_description_act IS NOT INITIAL.
              lv_is_deep_create = abap_true.
              mo_request_info->set_deep_data_description( lt_data_description_act ).
            ENDIF.


*   Description of the response for the application and lib
            IF  mo_request_info->is_busi_data_requested( ).
              IF it_expand IS NOT INITIAL.
                "Expand from the request's $expand
                IF lv_is_deep_create = abap_true.
                  " Deep Create (POST with inlined entities) is not supported together with $expand
                  RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>create_entity_expand_deep_cre ).

                ELSEIF lv_backend_version < '023'.
                  " Old backends (version < 023) do not support POST with $expand
                  RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>exp_sel_cre_entity_not_sup_bep ).

                ELSE.
                  lt_lib_expand = it_expand.
                ENDIF.

              ELSEIF lv_is_deep_create = abap_true.
                "Expand from the request's payload
                /iwcor/cl_od_ep_facade=>read_entity_expand_and_select(
                    EXPORTING
                      io_rest_entity                = io_request_entity
                      is_content_type               = is_content_type
                      is_entity_info                = ls_lib_entity_info
                    IMPORTING
                      et_expand_item_without_select = lt_lib_expand ).

              ENDIF.

              IF lt_lib_expand IS NOT INITIAL.
                lo_lib_expand = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
                    is_entity_set_info      = is_entity_set_info
                    it_expand               = lt_lib_expand
                    it_property_path        = it_property_path ).
              ENDIF.

              " Always call this method
              merge_expand_select_info( io_lib_expand_select   = lo_lib_expand
                                        iv_is_data_description = abap_false ).

            ELSE. "Return=minimal
              " The provider must return the business data, but we only need the keys (and the ETag property if existing)
              merge_select_info_minimal( lo_target_entity_type ).

            ENDIF.


*   Deserialize the request payload
          lv_do_read_binding = xsdbool( lv_is_deep_create = abap_false ). "Not supported for Deep Insert - Will cause an exception in the callback

          /iwbep/cl_od_cb_link_reader=>get_instance_as_lib_cb_table(
            EXPORTING
                io_lib_context              = mo_context
                is_lib_content_type         = is_content_type
                iv_do_init_as_omit          = lv_do_init_as_omit
                iv_do_init_nullable_as_null = lv_do_init_nullable_as_null
                iv_do_read_binding          = lv_do_read_binding
                it_data_description_node    = lt_data_description_complete
            IMPORTING
                et_lib_callback             = lt_lib_callback
                eo_callback                 = lo_cb_link_reader ).

          /iwcor/cl_od_ep_facade=>read_entity(
            EXPORTING
                io_rest_entity                = io_request_entity
                is_entity_info                = ls_lib_entity_info
                iv_init_as_omit               = lv_do_init_as_omit
                iv_init_nullable_as_null      = lv_do_init_nullable_as_null
                it_callback                   = lt_lib_callback
            IMPORTING
                es_meta_info                  = ls_lib_meta_info
                et_component                  = lt_lib_supplied_component
            CHANGING
                cs_data                       = <ls_busi_data> ).


*   Store the business data in the request object
            mo_request_info->set_is_partial_busi_data_prov( xsdbool( lv_are_all_properties_provided = abap_false ) ).

            IF mo_request_info->is_virus_scan_needed( ) = abap_true.
              /iwbep/cl_v4_virus_scanner=>scan_structure(
                  ir_busi_data        = lr_busi_data
                  io_struct_type      = lo_target_entity_type
                  io_patch_tree       = lo_provided_property_tree_act
                  it_data_description = lt_data_description_act ).
            ENDIF.

            mo_request_info->set_is_partial_busi_data_prov( is_partial_busi_data( io_struc_type        = lo_target_entity_type
                                                                                  is_busi_data         = lr_busi_data->*
                                                                                  it_lib_supplied_comp = lt_lib_supplied_component ) ).

            mo_request_info->get_deep_data_description( IMPORTING et_expand_root_node = lt_data_description_act ).

            IF mo_request_info->is_virus_scan_needed( ) = abap_true.
              /iwbep/cl_v4_virus_scanner=>scan_structure(
                  ir_busi_data        = lr_busi_data
                  io_struct_type      = lo_target_entity_type
                  io_patch_tree       = mo_request_info->get_patch_tree( )
                  it_data_description = lt_data_description_act ).
            ENDIF.

          mo_request_info->set_business_data( lr_busi_data ).

          IF ls_lib_meta_info-has_media_etag_related_content = abap_true
          OR lo_cb_link_reader->has_media_etag_related_cont( ).
            mo_request_info->set_has_media_etag_related_con( ).
          ENDIF.


*   Store the references (BINDING, e.g.  "Manager_to_Team@odata.bind": "TEAMS('TEAM_01')"  ) in the Request object
          lo_cb_link_reader->get_reference_data( IMPORTING et_reference_data = lt_reference_data ).
          IF ( lt_reference_data IS NOT INITIAL ).
            mo_request_info->set_reference_data( lt_reference_data ).
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* entity creation
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        "Generate dummy keys to support batch with content ID referencing (work-around for LIB)
        "- pre-processing is used only in batch case
        lo_lib_entity_type->get_key_property_refs( IMPORTING et_key_property_ref = lt_lib_key_property_ref ).
        LOOP AT lt_lib_key_property_ref INTO lo_lib_key_prop_ref ##into_ok.
          INSERT /iwbep/cl_od_utils=>get_default_for_edm_instance( lo_lib_key_prop_ref->get_property( ) ) INTO TABLE et_key.
        ENDLOOP.

        CREATE OBJECT eo_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).
            lo_response_info = mo_data_provider->create_entity( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.
    ASSERT mo_request_info->is_busi_data_requested( ).

    TRY.
        IF mo_request_info->is_busi_data_for_header_only( ).
          " prefer:return=minimal
          " We still need to return the location header (and ETag if the entity type has one)
          /iwbep/cl_od_resp_prov_factory=>create_for_entity_no_content(
            EXPORTING
              io_request_info          = mo_request_info
              io_response_info         = lo_response_info
              iv_do_add_keys           = abap_true
            IMPORTING
              eo_lib_response_provider = eo_provider
              et_lib_key               = et_key ).

        ELSE.
          /iwbep/cl_od_resp_prov_factory=>create_for_entity(
              EXPORTING
                io_request_info          = mo_request_info
                io_response_info         = lo_response_info
                iv_do_add_keys           = abap_true
                is_lib_entity_set_info   = is_entity_set_info
                it_lib_property_path     = it_property_path
                is_lib_content_type      = is_content_type
              IMPORTING
                et_lib_key               = et_key
                eo_lib_response_provider = eo_provider ).

        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

    ENDTRY.

    set_applied_preferences( lo_response_info ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~execute_action_import.

    TRY.
        execute_action(
         EXPORTING
           io_request_entity             = io_request_entity                                " Request entity
           iv_operation_return_type_kind = gcs_operation_return_type_kind-entity_collection " Operation return type kind
           is_action_import_info         = is_action_import_info                            " Action import info structure
           is_content_type               = is_content_type                                  " Content type structure ($format or Accept header)
           io_filter                     = io_filter                                        " $filter system query option
           iv_count                      = iv_count                                         " $count system query option
           io_orderby                    = io_orderby                                       " $orderby system query option
           iv_skip                       = iv_skip                                          " $skip system query option
           iv_skiptoken                  = iv_skiptoken                                     " $skiptoken system query option
           iv_top                        = iv_top                                           " $top system query option
           it_expand                     = it_expand                                        " $expand system query option
           it_select                     = it_select                                        " $select system query option
         IMPORTING
           eo_provider                   = ro_provider ).                                   " Response provider

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~execute_bound_action.

    TRY.
        execute_action(
         EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-entity_collection " Operation return type kind
            is_content_type               = is_content_type                            " Content type structure ($format or Accept header)
            it_expand                     = it_expand                                  " $expand system query option
            it_select                     = it_select                                  " $select system query option
            is_entity_set_info            = is_entity_set_info                         " EntitySet info structure
            is_singleton_info             = is_singleton_info                          " Singleton info structure
            is_function_import_info       = is_function_import_info                    " Function import info structure
            is_bound_action_info          = is_bound_action_info                       " Bound action info structure
            it_property_path              = it_property_path                           " Property path
            it_bound_function_path        = it_bound_function_path                     " Bound function path table with path
            io_filter                     = io_filter                                  " $filter system query option
            iv_count                      = iv_count                                   " $count system query option
            io_orderby                    = io_orderby                                 " $orderby system query option
            iv_skip                       = iv_skip                                    " $skip system query option
            iv_skiptoken                  = iv_skiptoken                               " $skiptoken system query option
            iv_top                        = iv_top                                     " $top system query option
         IMPORTING
           eo_provider                   = ro_provider ).                             " Response provider

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~read.

    DATA:
      lo_lib_expand_select         TYPE REF TO /iwcor/if_od_expand_select,
      lo_response_info             TYPE REF TO /iwbep/if_v4_response_info,
      ls_default_paging_info       TYPE  /iwbep/if_v4_med_model_fw=>ty_s_default_paging_info,
      ls_lib_conditions            TYPE /iwcor/rest_conditions,
      ls_navigation_tail           TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      ls_supported_preference      TYPE /iwbep/if_v4_request_info=>ty_s_preference,
      ls_system_query_options      TYPE /iwbep/if_v4_request_info=>ty_s_system_query_info,
      lt_orderby                   TYPE abap_sortorder_tab,
      lx_gateway                   TYPE REF TO /iwbep/cx_gateway,
      lv_skiptoken                 TYPE string,
      lv_is_document_request       TYPE abap_bool,
      ls_calculated_default_paging TYPE /iwbep/if_v4_request_info=>ty_s_calculated_default_paging.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_is_busi_data_requested( ).

      IF  is_content_type-type    = /iwcor/if_od_uri=>gc_format_type_application
      AND is_content_type-subtype = /iwcor/if_od_uri=>gc_format_pdf.
        "Compare to /IWBEP/CL_OD_FORMAT_LSTNR->/IWCOR/IF_OD_PROC_FORMAT_LSTNR~MODIFY_SUPPORTED_CONTENT_TYPES
        mo_request_info->set_response_format( /iwbep/if_v4_request_info=>gcs_format-pdf ).
        lv_is_document_request = abap_true.
      ENDIF.

      TRY.

          merge_navigation(
               EXPORTING
                   it_lib_uri_property_path       = it_property_path
                   it_lib_uri_bound_function_path = it_bound_function_path
                   is_lib_entity_set_info         = is_entity_set_info
                   is_lib_singleton_info          = is_singleton_info
                   is_lib_function_import_info    = is_function_import_info
               IMPORTING
                   es_lib_target = ls_navigation_tail ).

          IF ls_navigation_tail-is_function = abap_false.
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list ).
            merge_content_type( is_content_type ).

          ELSE.
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function ).

            IF ls_navigation_tail-property_path IS NOT INITIAL.
              " composable functions are not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            ls_lib_conditions = mo_context->get_conditions( ).
            IF ls_lib_conditions IS NOT INITIAL.
              "Conditions are not yet supported for functions
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF it_expand IS NOT INITIAL.
              "Not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>expand_not_impl_for_func.
            ENDIF.

            IF    iv_top <> -1
               OR iv_skip <> -1
               OR lt_orderby IS NOT INITIAL
               OR iv_count IS NOT INITIAL
               OR io_filter IS NOT INITIAL
               OR io_search IS BOUND.
              "System query options not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>sqo_not_implemented_for_func.
            ENDIF.

          ENDIF.

          ls_supported_preference-strict = abap_true.
          IF  it_expand IS INITIAL
          AND iv_skiptoken IS INITIAL.
            ls_supported_preference-track_changes = abap_true.
          ENDIF.

          " Prefer: omit-values=nulls
          ls_supported_preference-omit_null_values = abap_true.
          merge_prefer_headers( is_supported_preference = ls_supported_preference ).

          check_query_options_entityset( iv_skiptoken  = iv_skiptoken
                                         iv_deltatoken = iv_deltatoken
                                         it_expand     = it_expand
                                         io_search     = io_search
                                         io_apply      = io_apply ).


          lt_orderby = /iwbep/cl_od_utils=>get_sort_order_table( io_orderby ).

          ls_system_query_options-top         = iv_top.
          ls_system_query_options-skip        = iv_skip.
          ls_system_query_options-count       = iv_count.
          ls_system_query_options-skip_token  = iv_skiptoken.
          ls_system_query_options-delta_token = iv_deltatoken.
          ls_system_query_options-orderby     = lt_orderby.

          IF is_function_import_info-function_import IS NOT BOUND.  " Currently we do not support paging for FI returning collection
            ls_default_paging_info = CAST /iwbep/if_v4_med_model_fw( mo_request_info->get_model_of_current_service( )
                                                                                   )->get_default_paging_info( lv_is_document_request ).

            adjust_paging_pre_processing(
              EXPORTING
                is_default_paging_info  = ls_default_paging_info
              IMPORTING
                ev_skiptoken            = lv_skiptoken
              CHANGING
                cs_system_query_options = ls_system_query_options ).

            mo_request_info->set_calculated_default_paging( VALUE #( skiptoken = lv_skiptoken
                                                                     top       = ls_system_query_options-top ) ).

          ENDIF.

          mo_request_info->set_system_query_options( ls_system_query_options ).

          " As delta token was sent new delta token is requested
          IF iv_deltatoken IS NOT INITIAL.
            mo_request_info->set_is_delta_token_requested( ).
          ENDIF.

          lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
                                is_entity_set_info      = is_entity_set_info
                                is_singleton_info       = is_singleton_info
                                is_function_import_info = is_function_import_info
                                it_property_path        = it_property_path
                                it_bound_function_path  = it_bound_function_path
                                it_expand               = it_expand
                                io_apply                = io_apply
                                it_select               = it_select ).

          merge_expand_select_info( lo_lib_expand_select ).

          merge_filter_info( io_filter ).
          merge_apply( io_apply ).
          merge_search( io_search ).

          IF ls_navigation_tail-is_function = abap_false.
            "Merge ST must be done after all other merge operations which enrich request info
            merge_st_info( ).
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
          RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
            EXPORTING
              previous = lx_v4_not_impl.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT ro_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            IF ls_navigation_tail-is_function = abap_false.
              lo_response_info = mo_data_provider->read_entity_set( mo_request_info ).
            ELSE.
              lo_response_info = mo_data_provider->execute_function( mo_request_info ).
            ENDIF.

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

      WHEN OTHERS.
        ASSERT 1 = 0.

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    IF ( mo_request_info->are_dynamic_props_requested( ) = abap_true ).
      inject_dynamic_props_to_lib( ).
    ENDIF.

    TRY.

        " Inject skiptoken value for default paging
        ls_calculated_default_paging = mo_request_info->get_calculated_default_paging( ).
        IF ls_calculated_default_paging-skiptoken IS NOT INITIAL.
          adjust_paging_post_processing( iv_paging_skiptoken = ls_calculated_default_paging-skiptoken
                                         iv_top              = ls_calculated_default_paging-top
                                         io_response_info    = lo_response_info ).

        ENDIF.

        ro_provider =
          /iwbep/cl_od_resp_prov_factory=>create_for_entity_collection( io_request_info             = mo_request_info
                                                                        io_response_info            = lo_response_info
                                                                        is_lib_entity_set_info      = is_entity_set_info
                                                                        is_lib_singleton_info       = is_singleton_info
                                                                        is_lib_function_import_info = is_function_import_info
                                                                        it_lib_property_path        = it_property_path
                                                                        it_lib_bound_function_path  = it_bound_function_path
                                                                        iv_is_count_requested       = iv_count
                                                                        is_lib_content_type         = is_content_type
                                                                        io_lib_context              = mo_context ).

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

    set_applied_preferences( lo_response_info ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity_coll~update.

    DATA:
      lo_cb_link_reader              TYPE REF TO /iwbep/cl_od_cb_link_reader,
      lo_lib_expand_without_select   TYPE REF TO /iwcor/if_od_expand_select,
      lo_response_info               TYPE REF TO /iwbep/if_v4_response_info,
      lr_busi_data                   TYPE REF TO data,
      ls_lib_entity_info             TYPE /iwcor/if_od_ep_types=>entity_info_s,
      ls_lib_meta_info               TYPE /iwcor/if_od_ep_types=>read_meta_info_s,
      ls_navigation_tail             TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      lt_deep_data_description       TYPE /iwbep/cl_v4_expand_node=>ty_t_expand_node,
      lt_lib_callback                TYPE /iwcor/if_od_ep_callback=>callback_registration_t,
      lt_lib_expand_item_without_sel TYPE /iwcor/if_od_uri=>expand_item_t,
      lt_lib_option                  TYPE tihttpnvp,
      lx_gateway                     TYPE REF TO /iwbep/cx_gateway,
      lx_v4_not_impl                 TYPE REF TO /iwbep/cx_v4_not_implemented.

    FIELD-SYMBOLS:
      <lt_busi_data> TYPE table.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      TRY.
          IF is_singleton_info IS NOT INITIAL
          OR iv_patch_semantics = abap_false.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
          ENDIF.

          mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity_list ).

          mo_request_info->set_is_busi_data_requested( ). "By default this is TRUE, might be overwritten via a preference
          merge_prefer_headers( is_supported_preference = VALUE #( continue_on_error     = abap_true
                                                                   return_minimal        = abap_true
                                                                   return_representation = abap_true ) ).

          merge_navigation(
            EXPORTING
                it_lib_uri_property_path = it_property_path
                is_lib_entity_set_info   = is_entity_set_info
                is_lib_singleton_info    = is_singleton_info
            IMPORTING
                es_lib_target            = ls_navigation_tail ).

          IF mo_request_info->is_busi_data_requested( ).
            merge_content_type( is_content_type ). "Merge the accept content type information (IEEE response format can be requested)
            "merge_st_info( ).
          ENDIF.



* Build a data container that can be used to de-serialize the potentially deep request payload
          " do a pre-parsing
          ls_lib_entity_info-type   ?= ls_navigation_tail-lib_type.
          ls_lib_entity_info-target ?= ls_navigation_tail-lib_target.

          /iwcor/cl_od_ep_facade=>read_entity_coll_expand(
            EXPORTING
              io_rest_entity                = io_request_entity
              is_content_type               = is_content_type
              is_entity_info                = ls_lib_entity_info
            IMPORTING
              et_expand_item_without_select = lt_lib_expand_item_without_sel ).

          IF lines( lt_lib_expand_item_without_sel ) > 0. " Deep payload
            lo_lib_expand_without_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
                is_entity_set_info      = is_entity_set_info
                it_expand               = lt_lib_expand_item_without_sel
                it_property_path        = it_property_path ).

            merge_expand_select_info(
              io_lib_expand_select    = lo_lib_expand_without_select
              iv_is_data_description  = abap_true ).

            IF mo_request_info->is_busi_data_requested( ).
              CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->set_expand_select_tree( lo_lib_expand_without_select ).

              mo_request_info->get_deep_data_description( IMPORTING et_expand_root_node = lt_deep_data_description ).
              mo_request_info->set_expand_tree_list( lt_deep_data_description ).
            ELSE.
              "Needed for json reader
              mo_request_info->get_deep_data_description( IMPORTING et_expand_root_node = lt_deep_data_description ).
            ENDIF.

          ENDIF.

          lr_busi_data = mo_request_info->create_data_container_table( ).
          ASSIGN lr_busi_data->* TO <lt_busi_data>.


* Read the request payload
          /iwbep/cl_od_cb_link_reader=>get_instance_as_lib_cb_table(
            EXPORTING
                io_lib_context               = mo_context
                is_lib_content_type          = is_content_type
                it_data_description_node     = lt_deep_data_description
                iv_do_check_for_partial_data = abap_false
                iv_do_init_as_omit           = abap_true
                iv_do_init_nullable_as_null  = abap_false
                iv_do_read_binding           = abap_false
                iv_do_fill_component_table   = abap_false
            IMPORTING
                et_lib_callback              = lt_lib_callback
                eo_callback                  = lo_cb_link_reader ).

          /iwcor/cl_od_ep_facade=>read_entity_coll(
            EXPORTING
              io_rest_entity           = io_request_entity
              is_entity_info           = ls_lib_entity_info
              it_callback              = lt_lib_callback
              it_options               = lt_lib_option
              iv_init_as_omit          = abap_true
              iv_init_nullable_as_null = abap_false
              iv_is_delta_payload      = abap_true
              iv_fill_component_table  = abap_false
            IMPORTING
              es_meta_info             = ls_lib_meta_info
              et_data                  = <lt_busi_data> ).

          IF mo_request_info->is_virus_scan_needed( ).
            /iwbep/cl_v4_virus_scanner=>scan_table(
                ir_busi_data        = lr_busi_data
                io_entity_type      = mo_request_info->get_target_entity_type( )
                it_data_description = lt_deep_data_description ).
          ENDIF.

          mo_request_info->set_business_data( lr_busi_data ).

          IF ls_lib_meta_info-has_media_etag_related_content = abap_true
          OR lo_cb_link_reader->has_media_etag_related_cont( ).
            mo_request_info->set_has_media_etag_related_con( ).
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_v4_not_implemented INTO lx_v4_not_impl.
          RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
            EXPORTING
              previous = lx_v4_not_impl.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

      ENDTRY.

    ENDIF.


* Calling the DPC
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT ro_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).
            lo_response_info = mo_data_provider->update_entity_list( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

      WHEN OTHERS.
        ASSERT 1 = 0.

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    IF mo_request_info->is_busi_data_requested( ) = abap_true.
      TRY.
          ro_provider =
            /iwbep/cl_od_resp_prov_factory=>create_for_entity_collection( io_request_info        = mo_request_info
                                                                          io_response_info       = lo_response_info
                                                                          is_lib_entity_set_info = is_entity_set_info
                                                                          it_lib_property_path   = it_property_path
                                                                          is_lib_content_type    = is_content_type
                                                                          io_lib_context         = mo_context
                                                                          iv_for_delta_payload   = abap_true ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ELSE.
      ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_no_content( io_response_info = lo_response_info ).

    ENDIF.

    set_applied_preferences( lo_response_info ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity~delete.

    DATA: lx_gateway       TYPE REF TO /iwbep/cx_gateway,
          ls_lib_condition TYPE /iwcor/rest_conditions,
          lo_response_info TYPE REF TO /iwbep/if_v4_response_info.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity ).
      ls_lib_condition = mo_context->get_conditions( ).
      merge_conditions( is_lib_condition = ls_lib_condition ).

      TRY.
          merge_prefer_headers( is_supported_preference = VALUE #( return_minimal        = abap_true
                                                                   strict                = abap_true ) ).

          merge_navigation(
           EXPORTING
             is_lib_entity_set_info   = is_entity_set_info
             it_lib_uri_property_path = it_property_path ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* deletion
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        RETURN.

      WHEN  gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).
            lo_response_info = mo_data_provider->delete_entity( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.

    "Set preference-applied response header if necessary
    ASSERT lo_response_info IS BOUND.

    set_applied_preferences(
    EXPORTING
      io_response_info       = lo_response_info  ).


  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity~execute_action_import.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-entity_type " Operation return type kind
            is_action_import_info         = is_action_import_info                      " Action import info structure
            is_content_type               = is_content_type                            " Content type structure ($format or Accept header)
            it_expand                     = it_expand                                  " $expand system query option
            it_select                     = it_select                                  " $select system query option
          IMPORTING
            eo_provider                   = eo_provider                                " Response provider
            et_key                        = et_key                                     " Key of created entity
            ev_created                    = ev_created ).                              " Entity was created?

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity~execute_bound_action.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                          " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-entity_type " Operation return type kind
            is_content_type               = is_content_type                            " Content type structure ($format or Accept header)
            it_expand                     = it_expand                                  " $expand system query option
            it_select                     = it_select                                  " $select system query option
            is_entity_set_info            = is_entity_set_info                         " EntitySet info structure
            is_singleton_info             = is_singleton_info                          " Singleton info structure
            is_function_import_info       = is_function_import_info                    " Function import info structure
            is_bound_action_info          = is_bound_action_info                       " Bound action info structure
            it_property_path              = it_property_path                           " Property path
            it_bound_function_path        = it_bound_function_path                     " Bound function path table with path
          IMPORTING
            eo_provider                   = eo_provider                                " Response provider
            et_key                        = et_key                                     " Key of created entity
            ev_created                    = ev_created ).                              " Entity was created?

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity~read.

    DATA: lo_response_info     TYPE REF TO /iwbep/if_v4_response_info,
          lo_lib_expand_select TYPE REF TO /iwcor/if_od_expand_select,
          ls_navigation_tail   TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
          ls_lib_condition     TYPE /iwcor/rest_conditions,
          lx_gateway           TYPE REF TO /iwbep/cx_gateway.

*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode EQ gcs_processing_modes-complete
    OR mv_processing_mode EQ gcs_processing_modes-pre_processing_only.

      mo_request_info->set_is_busi_data_requested( ).

      TRY.
          merge_prefer_headers( is_supported_preference = VALUE #( omit_null_values      = abap_true
                                                                   return_representation = abap_true
                                                                   strict                = abap_true ) ).

          merge_navigation(
            EXPORTING
              it_lib_uri_property_path       = it_property_path
              it_lib_uri_bound_function_path = it_bound_function_path
              is_lib_entity_set_info         = is_entity_set_info
              is_lib_singleton_info          = is_singleton_info
              is_lib_function_import_info    = is_function_import_info
            IMPORTING
              es_lib_target                  = ls_navigation_tail ).

          ls_lib_condition = mo_context->get_conditions( ).
          IF ls_navigation_tail-is_function EQ abap_false.
            IF ls_navigation_tail-multiplicity = /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one_optional.
              "Bypass read entity logic to read entity list due to multiplicity 0..1
              mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list ).
            ELSE.
              "Entity
              mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity ).
            ENDIF.
          ELSE.
            "Function
            IF ls_navigation_tail-property_path IS NOT INITIAL.
              "Bound/composed functions are not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF ls_lib_condition IS NOT INITIAL.
              "Conditions are not yet supported for functions
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF it_expand IS NOT INITIAL.
              "Not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
                EXPORTING
                  textid = /iwbep/cx_v4_not_implemented=>expand_not_impl_for_func.
            ENDIF.

            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function ).
          ENDIF.

          lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
             is_entity_set_info      = is_entity_set_info
             is_singleton_info       = is_singleton_info
             is_function_import_info = is_function_import_info
             it_property_path        = it_property_path
             it_bound_function_path  = it_bound_function_path
             it_expand               = it_expand
             it_select               = it_select ).

          merge_expand_select_info( lo_lib_expand_select ).

          " Depending on the operation conditions are not implemented
          merge_conditions( it_expand = it_expand
                            is_lib_condition = ls_lib_condition ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        " no dummy provider! simulate 204 response to avoid issues when entity
        " has an eTag
        CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            IF ls_navigation_tail-is_function EQ abap_false.
              IF ls_navigation_tail-multiplicity = /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one_optional.
                "Bypass read entity logic to read entity list due to multiplicity 0..1
                lo_response_info = mo_data_provider->read_entity_set( mo_request_info ).
              ELSE.
                lo_response_info = mo_data_provider->read_entity( mo_request_info ).
              ENDIF.
            ELSE.
              lo_response_info = mo_data_provider->execute_function( mo_request_info ).
            ENDIF.

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    IF lo_response_info->is_not_modified( ) = abap_true.
      "call stack for Error Log not needed - Error log should not be written for 304 Not modified response
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_modified.
    ENDIF.

    IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
      CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
      RETURN.
    ENDIF.

    TRY.
        /iwbep/cl_od_resp_prov_factory=>create_for_entity(
          EXPORTING
            io_request_info             = mo_request_info
            io_response_info            = lo_response_info
            is_lib_entity_set_info      = is_entity_set_info
            is_lib_singleton_info       = is_singleton_info
            is_lib_function_import_info = is_function_import_info
            it_lib_property_path        = it_property_path
            it_lib_bound_function_path  = it_bound_function_path
            is_lib_content_type         = is_content_type
          IMPORTING
            eo_lib_response_provider    = ro_provider ).

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

    set_applied_preferences( lo_response_info  ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_entity~update.

    DATA:
      lo_cb_link_reader              TYPE REF TO /iwbep/cl_od_cb_link_reader,
      lo_lib_expand_select           TYPE REF TO /iwcor/if_od_expand_select,
      lo_patch_tree                  TYPE REF TO /iwbep/if_v4_select_node,
      lo_response_info               TYPE REF TO /iwbep/if_v4_response_info,
      lo_target_entity_type          TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lr_busi_data                   TYPE REF TO data,
      ls_lib_condition               TYPE /iwcor/rest_conditions,
      ls_lib_entity_info             TYPE /iwcor/if_od_ep_types=>entity_info_s,
      ls_lib_meta_info               TYPE /iwcor/if_od_ep_types=>read_meta_info_s,
      ls_lib_option                  TYPE ihttpnvp,
      ls_navigation_tail             TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      lt_expand                      TYPE /iwbep/cl_v4_expand_node=>ty_t_expand_node,
      lt_lib_callback                TYPE /iwcor/if_od_ep_callback=>callback_registration_t,
      lt_lib_option                  TYPE tihttpnvp,
      lt_lib_supplied_component      TYPE /iwcor/if_od_ep_types=>component_t,
      lt_lib_supplied_component_name TYPE string_table,
      lt_reference_data              TYPE /iwbep/if_v4_request_info=>ty_t_reference_data,
      lv_do_init_as_omit             TYPE abap_bool,
      lv_do_init_nullable_as_null    TYPE abap_bool,
      lv_gw_backend_version          TYPE /iwbep/cl_v4_v2_util_facade=>ty_s_v4_gw_version-gw_version,
      lv_is_busi_data_supplied       TYPE abap_bool,
      lv_is_partial_busi_data        TYPE abap_bool,
      lv_is_return_minimal_supported TYPE abap_bool,
      lx_gateway                     TYPE REF TO /iwbep/cx_gateway.

    FIELD-SYMBOLS:
      <ls_busi_data> TYPE data.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF ( mv_processing_mode = gcs_processing_modes-complete )
    OR ( mv_processing_mode = gcs_processing_modes-pre_processing_only ).
      TRY.
          get_default_vc_values(
             EXPORTING
              iv_is_patch_semantic        = iv_patch_semantics
            IMPORTING
              ev_do_init_as_omit          = lv_do_init_as_omit
              ev_do_init_nullable_as_null = lv_do_init_nullable_as_null ).

          mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity ).
          IF iv_patch_semantics = abap_true.
            mo_request_info->set_is_patch_request( ).
          ENDIF.

          "For a PUT/PATCH request with $expand and/or $select and prefer:return=minimal header, the preference
          "Shall be ignored; instead, the whole response shall be returned
          IF  it_expand IS INITIAL
          AND it_select IS INITIAL.
            lv_is_return_minimal_supported = abap_true.

          ELSEIF mo_request_info->is_local( ) = abap_false.
            lv_gw_backend_version = mo_request_info->get_backend_version( )-gw_version.

            IF lv_gw_backend_version < '020'
            AND it_select IS NOT INITIAL.
              " Old backend (version < 020) does not support $select
              RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>sel_upd_entity_not_sup_bep ).
            ENDIF.

            IF lv_gw_backend_version < '023'
            AND it_expand IS NOT INITIAL.
              " Old backend (version < 023) does not support $expand
              RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>exp_upd_entity_not_sup_bep ).
            ENDIF.
          ENDIF.


          mo_request_info->set_is_busi_data_requested( ). "Can be overwritten by the prefer header return-representation=false
          merge_prefer_headers( is_supported_preference = VALUE #( return_minimal        = lv_is_return_minimal_supported
                                                                   return_representation = abap_true
                                                                   strict                = abap_true ) ).

          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( is_lib_condition = ls_lib_condition ).

          merge_navigation(
            EXPORTING
              is_lib_entity_set_info   = is_entity_set_info
              it_lib_uri_property_path = it_property_path
            IMPORTING
              es_lib_target            = ls_navigation_tail ).

          ls_lib_entity_info-type   ?= ls_navigation_tail-lib_type.
          ls_lib_entity_info-target ?= ls_navigation_tail-lib_target.

          lo_target_entity_type = mo_request_info->get_target_entity_type( ).


*       Return=minimal
          IF  mo_request_info->is_busi_data_requested( ) = abap_false.
            merge_select_info_minimal( lo_target_entity_type ).

            IF  iv_patch_semantics = abap_true
            AND lv_do_init_as_omit = abap_false.
              " PATCH w/o data request: reduced data container
              " build minimal container via "patch tree":
              /iwcor/cl_od_ep_facade=>read_entity_property_names(
                EXPORTING
                  io_rest_entity    = io_request_entity
                  is_entity_info    = ls_lib_entity_info
                IMPORTING
                  et_component_name = lt_lib_supplied_component_name ).

              lo_patch_tree = /iwbep/cl_od_exp_sel_builder=>build_select_from_prop_names(
                io_entity_type             = lo_target_entity_type
                it_property_name           = CONV #( lt_lib_supplied_component_name )
                iv_is_for_data_description = abap_true ).

              lr_busi_data = mo_request_info->create_data_container_struc( io_patch_tree = lo_patch_tree ).

            ELSE.
              " PUT request w/o data request: generate full data container
              mo_request_info->get_expand_tree_list( IMPORTING et_expand_tree = lt_expand ).
              lr_busi_data = mo_request_info->create_data_container_struc( it_deep_data_description = lt_expand ).

            ENDIF.


*       Return=representation
          ELSE.
            " PUT / PATCH w/ data request: generate full data container for inbound request data;
            " note: request = response data container
            lo_lib_expand_select = /iwcor/cl_od_uri_facade=>create_expand_select_tree(
              is_entity_set_info      = is_entity_set_info
              is_singleton_info       = is_singleton_info
              it_property_path        = it_property_path
              it_select               = it_select
              it_expand               = it_expand ).

            merge_expand_select_info(
              io_lib_expand_select   = lo_lib_expand_select
              iv_is_data_description = abap_false ).  " This is the expand/select information

            mo_request_info->get_expand_tree_list( IMPORTING et_expand_tree = lt_expand ).
            lr_busi_data = mo_request_info->create_data_container_struc( it_deep_data_description = lt_expand ).

          ENDIF.

          ASSIGN lr_busi_data->* TO <ls_busi_data>.


* Read the request payload
          " Tell the lib in which context the payload is parsed
          " Lib needs to know because inlined content is not allowed on patch/put update request
          " on server side
          ls_lib_option-name = /iwcor/if_od_ep_types=>gc_option_method.
          IF iv_patch_semantics = abap_true.
            ls_lib_option-value = /iwcor/if_rest_request=>gc_method_patch.
          ELSE.
            ls_lib_option-value = /iwcor/if_rest_request=>gc_method_put.
          ENDIF.
          APPEND ls_lib_option TO lt_lib_option.

          ls_lib_option-name  = /iwcor/if_od_ep_types=>gc_option_is_server.
          ls_lib_option-value = abap_true.
          APPEND ls_lib_option TO lt_lib_option.

          /iwbep/cl_od_cb_link_reader=>get_instance_as_lib_cb_table(
            EXPORTING
                io_lib_context              = mo_context
                is_lib_content_type         = is_content_type
                iv_do_init_as_omit          = lv_do_init_as_omit
                iv_do_init_nullable_as_null = lv_do_init_nullable_as_null
                iv_do_read_binding          = abap_true
            IMPORTING
                et_lib_callback             = lt_lib_callback
                eo_callback                 = lo_cb_link_reader ).

          /iwcor/cl_od_ep_facade=>read_entity(
            EXPORTING
              io_rest_entity           = io_request_entity
              is_entity_info           = ls_lib_entity_info
              iv_init_as_omit          = lv_do_init_as_omit
              iv_init_nullable_as_null = lv_do_init_nullable_as_null
              it_callback              = lt_lib_callback
              it_options               = lt_lib_option
            IMPORTING
              es_meta_info             = ls_lib_meta_info
              et_component             = lt_lib_supplied_component
            CHANGING
              cs_data                  = <ls_busi_data> ).


          " Get the real request payload description
          lo_patch_tree = /iwbep/cl_od_exp_sel_builder=>build_select_from_components(
                            io_entity_type = lo_target_entity_type
                            it_component   = lt_lib_supplied_component ).

          " Virus scan
          IF mo_request_info->is_virus_scan_needed( ) = abap_true.
            /iwbep/cl_v4_virus_scanner=>scan_structure(
                ir_busi_data            = lr_busi_data
                io_patch_tree           = lo_patch_tree
                io_struct_type          = lo_target_entity_type ).
          ENDIF.

          lv_is_busi_data_supplied = is_busi_data_supplied(
                                        is_busi_data         = <ls_busi_data>
                                        it_lib_supplied_comp = lt_lib_supplied_component ).

          IF lv_is_busi_data_supplied =  abap_true.  "Check that payload contains data (can be empty for e.g. PATCH requests with bind operation only)
            lv_is_partial_busi_data = is_partial_busi_data(
                                          is_busi_data         = <ls_busi_data>
                                          io_struc_type        = lo_target_entity_type
                                          "is_entity_set_info   = is_entity_set_info  " Do not check in key if data is complete
                                          it_lib_supplied_comp = lt_lib_supplied_component ).

            IF lv_is_partial_busi_data = abap_true.
              mo_request_info->set_patch_tree( lo_patch_tree ).
            ENDIF.

            " Set the data into the request
            mo_request_info->set_business_data( lr_busi_data ).

          ELSE. " Empty payload; initialize busi data container with empty data
            mo_request_info->set_business_data_container( lr_busi_data ).

          ENDIF.


          IF ls_lib_meta_info-has_media_etag_related_content = abap_true
          OR lo_cb_link_reader->has_media_etag_related_cont( ).
            mo_request_info->set_has_media_etag_related_con( ).
          ENDIF.


          " Store the references (BINDING, e.g.  "Manager_to_Team@odata.bind": "TEAMS('TEAM_01')"  ) in the Request object
          lo_cb_link_reader->get_reference_data( IMPORTING et_reference_data = lt_reference_data ).
          IF lt_reference_data IS NOT INITIAL.
            mo_request_info->set_reference_data( lt_reference_data ).

          ELSEIF lv_is_busi_data_supplied EQ abap_false
          AND    mo_request_info->get_http_method( ) = /iwcor/if_rest_request=>gc_method_patch.
            "PATCH request with no properties or reference in the request payload (i.e. empty payload) is not allowed
            RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>patch_request_empty_payload ).

          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* update
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT ro_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            lo_response_info = mo_data_provider->update_entity( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    TRY.
        IF mo_request_info->is_busi_data_requested( ) = abap_false
        OR mo_request_info->is_busi_data_for_header_only( ).
          " prefer:return=minimal
          " We still need to return the ETag if the entity type has one
          /iwbep/cl_od_resp_prov_factory=>create_for_entity_no_content(
            EXPORTING
              io_request_info          = mo_request_info
              io_response_info         = lo_response_info
              iv_do_add_keys           = abap_false
            IMPORTING
              eo_lib_response_provider = ro_provider ).

        ELSE.
          /iwbep/cl_od_resp_prov_factory=>create_for_entity(
            EXPORTING
              io_request_info          = mo_request_info
              io_response_info         = lo_response_info
              is_lib_entity_set_info   = is_entity_set_info
              is_lib_singleton_info    = is_singleton_info
              it_lib_property_path     = it_property_path
              is_lib_content_type      = is_content_type
              io_lib_context           = mo_context
            IMPORTING
              eo_lib_response_provider = ro_provider ).

        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

    ENDTRY.

    set_applied_preferences( lo_response_info ).

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_metadata~read.

    DATA:
      ls_condititons   TYPE /iwbep/if_v4_request_info=>ty_s_conditions,
      lv_last_modified TYPE timestamp,
      ls_lib_condition TYPE /iwcor/rest_conditions,
      lx_gateway       TYPE REF TO /iwbep/cx_gateway.


    ls_lib_condition = mo_context->get_conditions( ).
    merge_conditions( is_lib_condition = ls_lib_condition ).

    ls_condititons = mo_request_info->get_conditions( ).

    TRY.
        " Check etag condition
        lv_last_modified = CAST /iwbep/if_v4_med_model_fw( mo_request_info->get_model_of_current_service( ) )->get_last_modified( ).


        " Return processing with 304 - Not Modified
        IF condense( CONV string( lv_last_modified ) ) = ls_condititons-if_none_match_etag.
          RAISE EXCEPTION TYPE /iwcor/cx_od_not_modified.
        ENDIF.

        " Otherwise do normal processing
        ro_provider = super->/iwcor/if_od_proc_metadata~read( ).
        ro_provider->set_header(
          EXPORTING
            iv_name  = /iwbep/if_od_types=>gcs_http_headers-etag
            iv_value = /iwbep/cl_od_utils=>get_metadata_etag( lv_last_modified ) ).


      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_coll~execute_action_import.

    DATA: lx_v4_not_impl TYPE REF TO /iwbep/cx_v4_not_implemented.


    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-primitive_collection
            is_action_import_info         = is_action_import_info
            is_content_type               = is_content_type
            io_filter                     = io_filter                                        " $filter system query option
            iv_count                      = iv_count                                         " $count system query option
            io_orderby                    = io_orderby                                       " $orderby system query option
            iv_skip                       = iv_skip                                          " $skip system query option
            iv_skiptoken                  = iv_skiptoken                                     " $skiptoken system query option
            iv_top                        = iv_top                                           " $top system query option
          IMPORTING
            eo_provider                   = ro_provider ).

      CATCH /iwbep/cx_v4_not_implemented INTO lx_v4_not_impl.
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_coll~execute_bound_action.

    DATA: lx_v4_not_impl TYPE REF TO /iwbep/cx_v4_not_implemented.


    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-primitive_collection
            is_entity_set_info            = is_entity_set_info
            is_singleton_info             = is_singleton_info
            is_function_import_info       = is_function_import_info
            it_property_path              = it_property_path
            is_bound_action_info          = is_bound_action_info
            is_content_type               = is_content_type
            io_filter                     = io_filter                                        " $filter system query option
            iv_count                      = iv_count                                         " $count system query option
            io_orderby                    = io_orderby                                       " $orderby system query option
            iv_skip                       = iv_skip                                          " $skip system query option
            iv_skiptoken                  = iv_skiptoken                                     " $skiptoken system query option
            iv_top                        = iv_top                                           " $top system query option
          IMPORTING
            eo_provider                   = ro_provider ).

      CATCH /iwbep/cx_v4_not_implemented INTO lx_v4_not_impl.
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_coll~read.

    DATA:
      lo_response_info   TYPE REF TO /iwbep/if_v4_response_info,
      ls_navigation_tail TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      ls_lib_conditions  TYPE /iwcor/rest_conditions,
      lx_gateway         TYPE REF TO /iwbep/cx_gateway.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete OR
     mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_is_busi_data_requested( ).

      TRY.
          merge_prefer_headers( is_supported_preference = VALUE #( return_representation = abap_true
                                                                   strict                = abap_true ) ).

          IF  io_orderby    IS NOT INITIAL
            OR io_filter    IS NOT INITIAL
            OR iv_count     IS NOT INITIAL
            OR iv_skiptoken IS NOT INITIAL
            OR iv_skip      <> -1
            OR iv_top       <> -1.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
          ENDIF.


          merge_navigation(
            EXPORTING
                it_lib_uri_property_path       = it_property_path
                it_lib_uri_bound_function_path = it_bound_function_path
                is_lib_entity_set_info         = is_entity_set_info
                is_lib_singleton_info          = is_singleton_info
                is_lib_function_import_info    = is_function_import_info
            IMPORTING
                es_lib_target                  = ls_navigation_tail ).

          merge_filter_info( io_filter ).

          IF ls_navigation_tail-is_function = abap_true.
            "Function
            IF ls_navigation_tail-property_path IS NOT INITIAL.
              "Bound/composed functions are not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            ls_lib_conditions = mo_context->get_conditions( ).
            IF ls_lib_conditions IS NOT INITIAL.
              "Conditions are not yet supported for functions
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function ).

          ELSE.
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity ).

            " Convert requested property into $select information
            merge_select_info_from_path( ls_navigation_tail-property_path ).
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        CREATE OBJECT ro_provider TYPE /iwbep/cl_od_dummy_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            IF ls_navigation_tail-is_function = abap_true.
              lo_response_info = mo_data_provider->execute_function( mo_request_info ).
            ELSE.
              lo_response_info = mo_data_provider->read_entity( mo_request_info ).
            ENDIF.

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    TRY.
        ASSERT lo_response_info IS BOUND.

        ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_type_coll( io_request_info             = mo_request_info
                                                                                 io_response_info            = lo_response_info
                                                                                 is_lib_entity_set_info      = is_entity_set_info
                                                                                 is_lib_singleton_info       = is_singleton_info
                                                                                 is_lib_function_import_info = is_function_import_info
                                                                                 it_lib_property_path        = it_property_path
                                                                                 it_lib_bound_function_path  = it_bound_function_path
                                                                                 iv_is_count_requested       = iv_count
                                                                                 is_lib_content_type         = is_content_type
                                                                                 io_lib_context              = mo_context ).

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.


  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_val~delete.

    DATA lo_patch_tree            TYPE REF TO /iwbep/if_v4_select_node.
    DATA lr_busi_data             TYPE REF TO data.
    DATA lv_value_control_name    TYPE /iwbep/if_v4_med_types=>ty_property_path.
    DATA lv_value_control_path    TYPE /iwbep/if_v4_med_types=>ty_property_path.
    DATA ls_navigation_tail       TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail.
    DATA lo_entity_type           TYPE REF TO /iwbep/if_v4_med_entity_type_r.
    DATA lo_prim_property         TYPE REF TO /iwbep/if_v4_med_prim_prop_r.
    DATA lx_gateway               TYPE REF TO /iwbep/cx_gateway.
    DATA: ls_lib_condition TYPE /iwcor/rest_conditions.

    FIELD-SYMBOLS <ls_busi_data>           TYPE data.
    FIELD-SYMBOLS <lv_value_control_value> TYPE data.


    "delete does not require any post-processing
    CHECK mv_processing_mode <> gcs_processing_modes-post_processing_only.

*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode EQ gcs_processing_modes-complete OR
     mv_processing_mode EQ gcs_processing_modes-pre_processing_only.

      " update property value via update entity
      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity ).

      TRY.
          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( is_lib_condition = ls_lib_condition ).
          merge_navigation(
            EXPORTING
              is_lib_entity_set_info   = is_entity_set_info
              it_lib_uri_property_path = it_property_path
            IMPORTING
              es_lib_target            = ls_navigation_tail ).

          " Value provider only on stream property currently / $value is currently not supported
          lo_patch_tree = /iwbep/cl_od_exp_sel_builder=>build_select_from_path(
                  io_structured_type            = CAST /iwbep/if_v4_med_struc_type_r( mo_request_info->get_target_entity_type( ) )
                  iv_property_path              = ls_navigation_tail-property_path
                  iv_is_for_data_description    = abap_true
                  iv_do_include_stream_property = abap_true ).

          mo_request_info->set_is_patch_request( ).
          mo_request_info->set_patch_tree( io_patch_root_node = lo_patch_tree ).

          lo_entity_type = mo_request_info->get_target_entity_type( ).
          lo_prim_property ?= lo_entity_type->get_property_by_path( ls_navigation_tail-property_path ).


          IF lo_prim_property->get_edm_type( ) = /iwbep/if_v4_med_element=>gcs_edm_data_types-stream.
            "  we set the target property info to know later which stream was accessed
            mo_request_info->set_target_property_info( VALUE #( parent            = lo_prim_property->get_parent( )->get_internal_name( )
                                                                parent_kind       = lo_prim_property->get_parent( )->get_kind( )
                                                                property          = lo_prim_property->get_internal_name( )
                                                                property_edm_type = /iwbep/if_v4_med_element=>gcs_edm_data_types-stream
                                                                property_kind     = /iwbep/if_v4_med_element=>kind_primitive_property ) ).
          ELSE. " Read property / no support of $value reads i.e. currently only support of Edm.Stream property reading
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
              EXPORTING
                textid = /iwbep/cx_v4_not_implemented=>value_delete_not_supported.
          ENDIF.

          lv_value_control_name = lo_prim_property->get_value_control_prop_path( ).
          IF lv_value_control_name IS INITIAL.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_data_container
              EXPORTING
                textid   = /iwbep/cx_v4_data_container=>value_control_undef
                edm_name = lo_prim_property->get_edm_name( ).
          ENDIF.
          lv_value_control_path = /iwbep/cl_od_utils=>replace_last_nav_path_segment(
                                        iv_property_path = ls_navigation_tail-property_path
                                        iv_replacement   = lv_value_control_name ).

          mo_request_info->get_data_container(
            IMPORTING
              er_data_container  = lr_busi_data ).
          ASSIGN lr_busi_data->* TO <ls_busi_data>.

          " set value control property value indicator to null
          ASSIGN COMPONENT lv_value_control_path OF STRUCTURE <ls_busi_data> TO <lv_value_control_value>.
          ASSERT sy-subrc = 0.
          <lv_value_control_value> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null.

          mo_request_info->set_business_data( ir_busi_data = lr_busi_data ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* deletion
*--------------------------------------------------------------------------------------
    IF mv_processing_mode EQ gcs_processing_modes-complete.

      TRY.
          init_data_provider( mo_request_info ).
          mo_data_provider->update_entity( mo_request_info ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_val~read.

    DATA:
      lo_response_info   TYPE REF TO /iwbep/if_v4_response_info,
      lo_select_tree     TYPE REF TO /iwbep/if_v4_select_node,
      ls_navigation_tail TYPE /iwbep/cl_od_request_info=>ty_s_navigation_tail,
      lo_entity_type     TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_prim_property   TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
      lx_gateway         TYPE REF TO /iwbep/cx_gateway,
      ls_lib_condition   TYPE /iwcor/rest_conditions.

*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------

    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_is_busi_data_requested( ).

      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity ).

      TRY.

          merge_prefer_headers( is_supported_preference = VALUE #( return_representation = abap_true
                                                                   strict                = abap_true ) ).
          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( is_lib_condition = ls_lib_condition ).

          merge_navigation(
            EXPORTING
              it_lib_uri_property_path       = it_property_path
              it_lib_uri_bound_function_path = it_bound_function_path
              is_lib_entity_set_info         = is_entity_set_info
              is_lib_singleton_info          = is_singleton_info
              is_lib_function_import_info    = is_function_import_info
            IMPORTING
              es_lib_target                  = ls_navigation_tail ).

          lo_entity_type = mo_request_info->get_target_entity_type( ).
          lo_prim_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).

          IF lo_prim_property->get_edm_type( ) = /iwbep/if_v4_med_element=>gcs_edm_data_types-stream.
            " we set the target property info to know later which stream was accessed
            mo_request_info->set_target_property_info( VALUE #( parent            = lo_prim_property->get_parent( )->get_internal_name( )
                                                                parent_kind       = lo_prim_property->get_parent( )->get_kind( )
                                                                property          = lo_prim_property->get_internal_name( )
                                                                property_edm_type = /iwbep/if_v4_med_element=>gcs_edm_data_types-stream
                                                                property_kind     = /iwbep/if_v4_med_element=>kind_primitive_property ) ).
          ELSE. " Read property / no support of $value reads i.e. currently only support of Edm.Stream property reading
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
              EXPORTING
                textid = /iwbep/cx_v4_not_implemented=>value_read_not_supported.
          ENDIF.

          IF ls_navigation_tail-is_function = abap_false.

            " convert requested property into $select information;
            " - There could not be a $select SQO specified on this kind of URI
            " - Value provider only on stream property currently / $value is currently not supported
            lo_select_tree =
              /iwbep/cl_od_exp_sel_builder=>build_select_from_path( io_structured_type            = CAST /iwbep/if_v4_med_struc_type_r( mo_request_info->get_target_entity_type( ) )
                                                                    iv_property_path              = ls_navigation_tail-property_path
                                                                    iv_do_include_stream_property = abap_true ).

            mo_request_info->set_select_tree( lo_select_tree ).

          ELSE.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
              EXPORTING
                textid = /iwbep/cx_v4_not_implemented=>value_read_func_not_supported.
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.

*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        " no dummy provider! simulate 204 response to avoid issues when entity has an eTag
        CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            ASSERT ls_navigation_tail-is_function = abap_false.
            lo_response_info = mo_data_provider->read_entity( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    IF lo_response_info->is_not_modified( ) = abap_true.
      "call stack for Error Log not needed - Error log should not be written for 304 Not modified response
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_modified.
    ENDIF.

    TRY.
        "needed as ls_navigation_tail will be initial in batch processing
        IF ls_navigation_tail IS INITIAL.
          ls_navigation_tail = CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->get_navigation_tail(  ).
          lo_entity_type = mo_request_info->get_target_entity_type( ).
          lo_prim_property ?= lo_entity_type->get_property_by_path( ls_navigation_tail-property_path ).
        ENDIF.

        ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_value(
            io_request_info             = mo_request_info
            io_response_info            = lo_response_info
            io_prim_property            = lo_prim_property ).

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim_val~update.

    DATA:
      lo_entity_type             TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_parent_type             TYPE REF TO /iwbep/if_v4_med_struc_type_r,
      lo_patch_tree              TYPE REF TO /iwbep/if_v4_select_node,
      lo_prim_property           TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
      lo_response_info           TYPE REF TO /iwbep/if_v4_response_info,
      lo_target_etag_property    TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
      lr_busi_data               TYPE REF TO data,
      ls_lib_condition           TYPE /iwcor/rest_conditions,
      ls_navigation_tail         TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
      lt_file_name_path          TYPE /iwbep/if_v4_med_types=>ty_t_med_internal_name,
      lt_content_type_path       TYPE /iwbep/if_v4_med_types=>ty_t_med_internal_name,
      lv_busy_data_binary        TYPE xstring,
      lv_busy_data_binary_length TYPE i,
      lv_content_type_path       TYPE string,
      lv_content_type_property   TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      lv_etag_property_name      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      lv_file_name               TYPE string,
      lv_mime_type               TYPE char128,
      lv_file_name_path          TYPE string,
      lv_file_name_property      TYPE /iwbep/v4_med_internal_name,
      lv_max_length              TYPE i,
      lx_gateway                 TYPE REF TO /iwbep/cx_gateway.

    FIELD-SYMBOLS:
      <lv_busi_data> TYPE data,
      <ls_busi_data> TYPE data.


*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode EQ gcs_processing_modes-complete OR
     mv_processing_mode EQ gcs_processing_modes-pre_processing_only.

      " update property value via update entity
      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity ).

      TRY.
          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( is_lib_condition = ls_lib_condition ).

          merge_prefer_headers( is_supported_preference = VALUE #( return_minimal        = abap_true
                                                                   return_representation = abap_true ) ).

          merge_navigation(
            EXPORTING
              is_lib_entity_set_info   = is_entity_set_info
              it_lib_uri_property_path = it_property_path
            IMPORTING
              es_lib_target            = ls_navigation_tail ).

          lo_entity_type = mo_request_info->get_target_entity_type( ).
          " Value provider only on stream property currently / $value is currently not supported
          lo_patch_tree = /iwbep/cl_od_exp_sel_builder=>build_select_from_path(
                    io_structured_type            = CAST /iwbep/if_v4_med_struc_type_r( lo_entity_type )
                    iv_property_path              = ls_navigation_tail-property_path
                    iv_is_for_data_description    = abap_true
                    iv_do_include_stream_property = abap_true ).


          lo_prim_property ?= lo_entity_type->get_property_by_path( ls_navigation_tail-property_path ).

          IF lo_prim_property->get_edm_type( ) <> /iwbep/if_v4_med_element=>gcs_edm_data_types-stream.
            RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid = /iwbep/cx_v4_not_implemented=>value_update_not_supported ).
          ENDIF.

          " currently we only need the target property info if the stream has an ETag property to know later which stream was accessed
          " But we set it always
          mo_request_info->set_target_property_info( VALUE #( parent            = lo_prim_property->get_parent( )->get_internal_name( )
                                                              parent_kind       = lo_prim_property->get_parent( )->get_kind( )
                                                              property          = lo_prim_property->get_internal_name( )
                                                              property_edm_type = /iwbep/if_v4_med_element=>gcs_edm_data_types-stream
                                                              property_kind     = /iwbep/if_v4_med_element=>kind_primitive_property ) ).


*         ETag
          lv_etag_property_name = lo_prim_property->get_etag_property( ).
          IF lv_etag_property_name IS NOT INITIAL.
            lo_target_etag_property = mo_request_info->get_target_entity_type( )->get_primitive_property( lv_etag_property_name ).

            /iwbep/cl_od_exp_sel_builder=>add_prim_prop_to_select_node(
             EXPORTING
               io_prim_prop               = lo_target_etag_property
               it_property_path           = VALUE #( ( lo_target_etag_property->get_internal_name( ) ) )
               io_select_node             = lo_patch_tree
               iv_is_for_data_description = abap_true ).

          ENDIF.

          IF  mo_request_info->is_busi_data_requested( ) = abap_false
          AND ( lo_target_etag_property IS BOUND "If a stream with an ETag was accessed
             OR lo_entity_type->has_etag( ) ).     "Or the entity has an ETag
            mo_request_info->set_is_busi_data_requested( ).
            mo_request_info->set_is_busi_data_for_header( ).
          ENDIF.


*         Content Type
          lv_content_type_property = lo_prim_property->get_content_type_property( ).
          ASSERT lv_content_type_property IS NOT INITIAL.

          lv_content_type_path = /iwbep/cl_od_utils=>replace_last_nav_path_segment(
                                      iv_property_path = ls_navigation_tail-property_path
                                      iv_replacement   = CONV #( lv_content_type_property ) ).
          SPLIT lv_content_type_path AT '-' INTO TABLE lt_content_type_path.
          lo_parent_type ?= lo_prim_property->get_parent( ).

          /iwbep/cl_od_exp_sel_builder=>add_prim_prop_to_select_node(
              io_prim_prop               = lo_parent_type->get_primitive_property( lv_content_type_property )
              it_property_path           = lt_content_type_path
              io_select_node             = lo_patch_tree
              iv_is_for_data_description = abap_true ).


*         File Name Property
          lv_file_name_property = lo_prim_property->get_file_name_property( ).
          IF lv_file_name_property IS NOT INITIAL.

            lv_file_name_path = /iwbep/cl_od_utils=>replace_last_nav_path_segment(
                                        iv_property_path = ls_navigation_tail-property_path
                                        iv_replacement   = CONV #( lv_file_name_property ) ).
            SPLIT lv_file_name_path AT '-' INTO TABLE lt_file_name_path.

            /iwbep/cl_od_exp_sel_builder=>add_prim_prop_to_select_node(
                io_prim_prop               = lo_parent_type->get_primitive_property( lv_file_name_property )
                it_property_path           = lt_file_name_path
                io_select_node             = lo_patch_tree
                iv_is_for_data_description = abap_true ).

          ENDIF.


*         Set the Request Info
          CAST /iwbep/cl_v4_select_node( lo_patch_tree )->check_for_dependent_props( ).

          mo_request_info->set_is_patch_request( ).
          mo_request_info->set_patch_tree( io_patch_root_node = lo_patch_tree ).

          mo_request_info->get_data_container( IMPORTING er_data_container = lr_busi_data ).
          ASSIGN lr_busi_data->* TO <ls_busi_data>.
          ASSIGN COMPONENT ls_navigation_tail-property_path OF STRUCTURE <ls_busi_data> TO <lv_busi_data>.
*            Note: This is coding for non-stream / non-binary property values
*            lo_lib_property      ?= ls_navigation_tail-lib_property.
*            lo_lib_primitive_type = /iwcor/cl_od_edm_prim_type=>get_instance( lo_lib_property->get_type(
*                                                                                            )->/iwcor/if_od_edm_named~get_name( ) ).
*
*            lo_lib_primitive_type->value_of(
*              EXPORTING
*                iv_value      = io_request_entity->get_string_data( )
*                iv_nullable   = lo_lib_property->is_nullable( )
*                iv_max_length = lo_lib_property->get_max_length( )
*                iv_precision  = lo_lib_property->get_precision( )
*                iv_scale      = lo_lib_property->get_scale( )
*              IMPORTING
*                ev_value      = <lv_busi_data> ).

          lv_busy_data_binary = io_request_entity->get_binary_data( ).
          lv_max_length       = lo_prim_property->/iwbep/if_v4_med_prim_type_r~get_max_length( ).

          IF lv_max_length > 0.
            lv_busy_data_binary_length = xstrlen( lv_busy_data_binary ).
            IF lv_busy_data_binary_length > lv_max_length.
              RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>binary_value_too_long
                                                http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
                                                exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
                                                length_actual      = lv_busy_data_binary_length
                                                length_max         = lv_max_length ).
            ENDIF.
          ENDIF.

          <lv_busi_data> = lv_busy_data_binary.


          lv_mime_type = get_content_type_string( is_content_type ).

          /iwcor/cl_rest_http_utils=>parse_content_disposition(
            EXPORTING
              iv_content_disposition = io_request_entity->get_header_field( /iwbep/if_od_types=>gcs_http_headers-content_disposition )
            IMPORTING
              ev_file_name           = lv_file_name ).

          /iwbep/cl_v4_virus_scanner=>scan_file(
            ia_data      = <lv_busi_data>
            iv_mime_type = lv_mime_type
            iv_file_name = lv_file_name ).

          mo_request_info->set_business_data( lr_busi_data ).

          ASSIGN COMPONENT lv_content_type_path OF STRUCTURE <ls_busi_data> TO <lv_busi_data>.
          ASSERT sy-subrc = 0.
          <lv_busi_data> = get_content_type_string( is_content_type ).

          IF lv_file_name_path IS NOT INITIAL.
            ASSIGN COMPONENT lv_file_name_path OF STRUCTURE <ls_busi_data> TO <lv_busi_data>.
            ASSERT sy-subrc = 0.
            <lv_busi_data> = lv_file_name.
          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        " no dummy provider! simulate 204 response to avoid issues when entity has an eTag
        CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).
            lo_response_info = mo_data_provider->update_entity( mo_request_info ).

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.


*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------

    ASSERT lo_response_info IS BOUND.

    IF  mo_request_info->is_busi_data_requested( ) = abap_true
    AND mo_request_info->is_busi_data_for_header_only( ) = abap_false.

      TRY.
          IF ls_navigation_tail IS INITIAL.
            lo_entity_type = mo_request_info->get_target_entity_type( ).
            ls_navigation_tail = CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->get_navigation_tail(  ).
            lo_prim_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).
          ENDIF.

          ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_value( io_request_info  = mo_request_info
                                                                               io_response_info = lo_response_info
                                                                               io_prim_property = lo_prim_property ).

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ELSE. "If a stream with an ETag was accessed

      "add the stream property's ETag to the response provider
      ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_no_content( io_response_info = lo_response_info ).

    ENDIF.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim~execute_action_import.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity                             " Request entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-primitive_type " Operation return type kind
            is_action_import_info         = is_action_import_info                         " Action import info structure
            is_content_type               = is_content_type                               " Content type structure ($format or Accept header)
          IMPORTING
            eo_provider                   = ro_provider ).                                " Response provider

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim~execute_bound_action.

    TRY.
        execute_action(
          EXPORTING
            io_request_entity             = io_request_entity
            iv_operation_return_type_kind = gcs_operation_return_type_kind-primitive_type
            is_entity_set_info            = is_entity_set_info
            is_singleton_info             = is_singleton_info
            is_function_import_info       = is_function_import_info
            it_property_path              = it_property_path
            is_bound_action_info          = is_bound_action_info
            is_content_type               = is_content_type
          IMPORTING
            eo_provider                   = ro_provider ).

      CATCH /iwbep/cx_v4_not_implemented INTO DATA(lx_v4_not_impl).
        " Call stack already saved in EXECUTE_ACTION
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented
          EXPORTING
            previous = lx_v4_not_impl.
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_prim~read.

    DATA: lo_response_info   TYPE REF TO /iwbep/if_v4_response_info,
          ls_navigation_tail TYPE /iwbep/cl_od_nav_builder=>ty_s_navigation_tail,
          lo_entity_type     TYPE REF TO /iwbep/if_v4_med_entity_type_r,
          lo_prim_property   TYPE REF TO /iwbep/if_v4_med_prim_prop_r,
          lx_gateway         TYPE REF TO /iwbep/cx_gateway,
          ls_lib_condition   TYPE /iwcor/rest_conditions.



*--------------------------------------------------------------------------------------
* pre-processing
*--------------------------------------------------------------------------------------
    IF mv_processing_mode = gcs_processing_modes-complete
    OR mv_processing_mode = gcs_processing_modes-pre_processing_only.

      mo_request_info->set_is_busi_data_requested( ).

      TRY.
          merge_prefer_headers( is_supported_preference = VALUE #( return_representation = abap_true
                                                                   strict                = abap_true ) ).

          ls_lib_condition = mo_context->get_conditions( ).
          merge_conditions( ls_lib_condition ).

          merge_navigation(
            EXPORTING
              it_lib_uri_property_path       = it_property_path
              it_lib_uri_bound_function_path = it_bound_function_path
              is_lib_entity_set_info         = is_entity_set_info
              is_lib_singleton_info          = is_singleton_info
              is_lib_function_import_info    = is_function_import_info
            IMPORTING
              es_lib_target                  = ls_navigation_tail ).

          IF ls_navigation_tail-is_function = abap_false.
            "Entity type
            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity ).

            " Convert requested property into $select information
            merge_select_info_from_path( ls_navigation_tail-property_path ).

            " Get requested primitive property
            lo_entity_type = mo_request_info->get_target_entity_type( ).
            lo_prim_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).

          ELSE.
            "Function
            IF ls_navigation_tail-property_path IS NOT INITIAL.
              "Bound/composed functions are not yet supported
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            IF ls_lib_condition IS NOT INITIAL.
              "Conditions are not yet supported for functions
              RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented.
            ENDIF.

            mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function ).

          ENDIF.

        CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
          /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
      ENDTRY.

    ENDIF.


*--------------------------------------------------------------------------------------
* data provisioning
*--------------------------------------------------------------------------------------
    CASE mv_processing_mode.
      WHEN gcs_processing_modes-pre_processing_only.
        " no dummy provider! simulate 204 response to avoid issues when entity
        " has an eTag
        CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
        RETURN.

      WHEN gcs_processing_modes-complete.
        TRY.
            init_data_provider( mo_request_info ).

            IF ls_navigation_tail-is_function EQ abap_false.
              lo_response_info = mo_data_provider->read_entity( mo_request_info ).
            ELSE.
              lo_response_info = mo_data_provider->execute_function( mo_request_info ).
            ENDIF.

          CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
            /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
        ENDTRY.

      WHEN gcs_processing_modes-post_processing_only.
        lo_response_info  ?= mo_context->get_object( /iwbep/if_v4_response_info=>gc_od_cntx_object_identifier ).

    ENDCASE.

*--------------------------------------------------------------------------------------
* post-processing
*--------------------------------------------------------------------------------------
    ASSERT lo_response_info IS BOUND.

    IF ls_navigation_tail-is_function = abap_false.
      " Validate response in property path
      " E.g. Check for null values in property path for response
      validate_respnse_property_path(
        EXPORTING
          io_response_info   = lo_response_info
          is_navigation_tail = ls_navigation_tail
          io_entity_type     = lo_entity_type ).

    ENDIF.

    TRY.
        IF lo_response_info->get_has_no_target( ) = abap_true. " Response should be 204
          CREATE OBJECT ro_provider TYPE /iwcor/cl_od_response_provider.
          RETURN.
        ENDIF.

        "needed as ls_navigation_tail will be initial in batch processing
        IF ls_navigation_tail IS INITIAL.
          ls_navigation_tail = CAST /iwbep/cl_od_request_info( mo_request_info->get_lib_request_info( ) )->get_navigation_tail(  ).

          IF ls_navigation_tail-is_function = abap_false.
            lo_entity_type = mo_request_info->get_target_entity_type( ).
            lo_prim_property ?= lo_entity_type->get_property_by_path( iv_internal_path = ls_navigation_tail-property_path ).
          ENDIF.
        ENDIF.

        ro_provider = /iwbep/cl_od_resp_prov_factory=>create_for_prim_type(  io_request_info             = mo_request_info
                                                                             io_response_info            = lo_response_info
                                                                             io_prim_property            = lo_prim_property
                                                                             is_lib_entity_set_info      = is_entity_set_info
                                                                             is_lib_singleton_info       = is_singleton_info
                                                                             is_lib_function_import_info = is_function_import_info
                                                                             it_lib_property_path        = it_property_path
                                                                             it_lib_bound_function_path  = it_bound_function_path
                                                                             is_lib_content_type         = is_content_type ).

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

  ENDMETHOD.


  METHOD /iwcor/if_od_proc_service_doc~read.

    mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-load_service_document ).
    ro_provider = super->/iwcor/if_od_proc_service_doc~read( is_content_type ).

  ENDMETHOD.


  METHOD check_action_param_mandatory.

    IF  io_parameter->is_nullable( ) = abap_false
    AND io_parameter->is_optional( ) = abap_false.
      RAISE EXCEPTION NEW /iwbep/cx_od( textid                 = /iwbep/cx_od=>ac_nullable_param_not_provided
                                        http_status_code       = /iwbep/cx_od=>gcs_http_status_codes-bad_request
                                        property_name_internal = io_parameter->get_internal_name( )
                                        exception_category     = /iwbep/cx_gateway=>gcs_excep_categories-client ).
    ENDIF.

    IF iv_do_flag_omitted_data_in_vc = abap_false.
      RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-sv_not_implemented
                                                        textid             = /iwbep/cx_v4_not_implemented=>parameter_omitted
                                                        exception_category = /iwbep/cx_gateway=>gcs_excep_categories-provider
                                                        name               = io_parameter->get_edm_name( ) ).
    ENDIF.

  ENDMETHOD.


  METHOD check_batch_operation.

    IF is_operation_info-request->get_origin_system_alias( ) <> iv_batch_origin_system_alias.
      RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid             = /iwbep/cx_v4_not_implemented=>batch_operation_with_o
                                                        exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client ).
    ENDIF.


    IF is_operation_info-operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-load_metadata
    OR is_operation_info-operation_kind = /iwbep/if_v4_request_info=>gcs_operation_kinds-load_service_document.
      RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid               = /iwbep/cx_v4_not_implemented=>unsupported_batch_operation
                                                        batch_operation_kind = is_operation_info-operation_kind ).
    ENDIF.

  ENDMETHOD.


  METHOD get_default_vc_values.

    DATA: ls_service_feature_pro TYPE /iwbep/if_v4_med_types=>ty_s_med_service_feature_pro.


    ev_do_init_as_omit          = abap_false.
    ev_do_init_nullable_as_null = abap_false.

    ls_service_feature_pro = mo_request_info->get_service_features( )-service_features_pro.

    IF ls_service_feature_pro-use_omit_as_default_for_vc = abap_true.
      ev_do_init_as_omit = abap_true. "Initialize every vc as "omit"

    ELSE.
      IF ls_service_feature_pro-use_vc_to_flag_omitted_data = abap_true.
        ev_do_init_as_omit = abap_true.
      ENDIF.

      IF iv_is_patch_semantic = abap_false. "PUT/POST
        ev_do_init_nullable_as_null = abap_true. "Initialize vc of nullable prop as "null"
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD get_lib_resp_for_wrong_service.

    DATA:
      lo_lib_context_dummy      TYPE REF TO /iwcor/if_od_cntxt,
      /iwbep/cx_v4_access_check TYPE REF TO /iwbep/cx_gateway,
      lx_od_error               TYPE REF TO /iwcor/cx_od_error.


    /iwbep/cx_v4_access_check = NEW /iwbep/cx_v4_access_check( textid           = /iwbep/cx_v4_access_check=>wrong_service_path
                                                               http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-not_found ).
    /iwbep/cl_v4_logger=>save_callstack( ).

    lx_od_error     = NEW /iwcor/cx_od_not_found( previous = /iwbep/cx_v4_access_check ).
    ro_lib_response = NEW /iwcor/cl_rest_response( ).

    /iwbep/cl_od_error_handler=>create( )->handle_error(
       io_context      = lo_lib_context_dummy
       io_error        = lx_od_error
       io_request_info = io_request_info
       io_response     = ro_lib_response ).

  ENDMETHOD.
ENDCLASS.