"! <p class="shorttext synchronized" lang="en">OData V4 Root Handler for OData Lib</p>
CLASS /iwbep/cl_od_root_handler DEFINITION
  PUBLIC
  INHERITING FROM /iwcor/cl_od_hdlr_root
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    TYPE-POOLS abap .

    "! <p class="shorttext synchronized" lang="en">CONSTRUCTOR</p>
    "!
    "! @parameter io_svc_factory | <p class="shorttext synchronized" lang="en">Service loader</p>
    METHODS constructor
      IMPORTING
        !io_svc_factory TYPE REF TO /iwcor/if_od_svc_factory .

    "! <p class="shorttext synchronized" lang="en">Get lib context of the last execution of HANDLE</p>
    "!
    "! @parameter ro_lib_context | <p class="shorttext synchronized" lang="en">OData context</p>
    METHODS get_lib_context
      RETURNING
        VALUE(ro_lib_context) TYPE REF TO /iwcor/if_od_cntxt .

    "! <p class="shorttext synchronized" lang="en">Mark as root handler for batch operations</p>
    METHODS set_is_batch_handler .

    "! <p class="shorttext synchronized" lang="en">Set the processing mode</p>
    "! Only relevant for batch operations.<br/>
    "! The default for a root handler is "complete"
    METHODS set_processing_mode
      IMPORTING
        iv_processing_mode TYPE /iwbep/cl_od_processor=>ty_processing_mode.

    "! <p class="shorttext synchronized" lang="en">Provide request information to the root handler</p>
    METHODS set_request_info
      IMPORTING
        !io_request_info TYPE REF TO /iwbep/if_v4_request_info .


  PROTECTED SECTION.

    METHODS dispatch          REDEFINITION .
    METHODS handle_conditions REDEFINITION .
    METHODS handle_error      REDEFINITION .
    METHODS post_process      REDEFINITION .


  PRIVATE SECTION.

    "! <p class="shorttext synchronized" lang="en">Service Group ID Cache</p>
    "! This class variable stores the ID of the currently called service group
    "! <br/>If the current application session has been used for a previous OData V4 call (STATEFUL) it consequently contains the ID of the service group of the last call
    CLASS-DATA gv_service_group_id_cache TYPE /iwbep/v4_med_group_id .

    DATA:
      "! <p class="shorttext synchronized" lang="en">Root handler in $batch mode</p>
      mv_is_batch_handler TYPE abap_bool,
      "! <p class="shorttext synchronized" lang="en">Request info (for operations in $batch mode)</p>
      mo_request_info     TYPE REF TO /iwbep/if_v4_request_info,
      "! <p class="shorttext synchronized" lang="en">OData context</p>
      mo_lib_context      TYPE REF TO /iwcor/if_od_cntxt,
      "! <p class="shorttext synchronized" lang="en">Processing mode</p>
      mv_processing_mode  TYPE /iwbep/cl_od_processor=>ty_processing_mode VALUE /iwbep/cl_od_processor=>gcs_processing_modes-complete.


    "! <p class="shorttext synchronized" lang="en">Checks if the user is allowed to execute this service</p>
    "!
    "! @parameter iv_service_group   | <p class="shorttext synchronized" lang="en">OData V4 Group ID</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">Lib Exception</p>
    METHODS check_security
      IMPORTING
        !iv_service_group TYPE /iwbep/v4_med_group_id
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Process the GW specific none-OData URL query parameters</p>
    "!
    "! @parameter it_query_param      | <p class="shorttext synchronized" lang="en">List of URL query parameters</p>
    "! @parameter cs_base_info        | <p class="shorttext synchronized" lang="en">Basic information about the OData request</p>
    "! @raising   /iwcor/cx_od_error  | <p class="shorttext synchronized" lang="en">Lib Exception </p>
    METHODS process_query_params
      IMPORTING
        !it_query_param TYPE tihttpnvp
      CHANGING
        !cs_base_info   TYPE /iwbep/if_v4_request_info=>ty_s_base_info
      RAISING
        /iwcor/cx_od_error.

    "! <p class="shorttext synchronized" lang="en">Process the HTTP request header</p>
    "!
    "! @parameter it_http_header       | <p class="shorttext synchronized" lang="en">HTTP request header</p>
    "! @parameter cs_base_info         | <p class="shorttext synchronized" lang="en">Basic information about the OData request</p>
    METHODS process_request_headers
      IMPORTING
        !it_http_header TYPE tihttpnvp
      CHANGING
        !cs_base_info   TYPE /iwbep/if_v4_request_info=>ty_s_base_info
      RAISING
        /iwcor/cx_od_http_error.

    "! <p class="shorttext synchronized" lang="en">Process the segment parameters of the URI (e.g. ;mo or ;v=1)</p>
    "!
    "! @parameter it_lib_segment_param | <p class="shorttext synchronized" lang="en">Segment Parameters: Table of Name/Value Pairs</p>
    "! @parameter cs_base_info         | <p class="shorttext synchronized" lang="en">Basic information about the OData request</p>
    "! @raising   /iwcor/cx_od_error   | <p class="shorttext synchronized" lang="en">Lib Exception</p>
    METHODS process_segment_params
      IMPORTING
        !it_lib_segment_param TYPE tihttpnvp
      CHANGING
        !cs_base_info         TYPE /iwbep/if_v4_request_info=>ty_s_base_info
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Process the Service Group and Service information</p>
    "!
    "! @parameter iv_lib_service_name | <p class="shorttext synchronized" lang="en">Lib "Service Name" - made out of 5 segments</p>
    "! @parameter cs_base_info        | <p class="shorttext synchronized" lang="en">Basic information about the OData request</p>
    "! @raising   /iwcor/cx_od_error  | <p class="shorttext synchronized" lang="en">Lib Exception</p>
    METHODS process_service_info
      IMPORTING
        !iv_lib_service_name TYPE string
      CHANGING
        !cs_base_info        TYPE /iwbep/if_v4_request_info=>ty_s_base_info
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Process the Service Key and resolve the Service Alias</p>
    "!
    "! @parameter iv_service_group_id     | <p class="shorttext synchronized" lang="en">OData V4 Group ID</p>
    "! @parameter is_service_key          | <p class="shorttext synchronized" lang="en">OData V4 Service Key</p>
    "! @raising   /iwcor/cx_od_error      | <p class="shorttext synchronized" lang="en">Lib Exception</p>
    METHODS process_service_key_and_alias
      IMPORTING
        !iv_service_group_id TYPE /iwbep/v4_med_group_id
        !is_service_key      TYPE /iwbep/s_v4_med_service_key
      RAISING
        /iwcor/cx_od_error .

    "! <p class="shorttext synchronized" lang="en">Set common http response headers</p>
    "! Sets response headers which are not operation specific
    "!
    "! @parameter io_lib_response    | <p class="shorttext synchronized" lang="en">REST Response</p>
    METHODS set_common_response_headers
      IMPORTING
        !io_lib_response TYPE REF TO /iwcor/if_rest_response.

    "! <p class="shorttext synchronized" lang="en">Set the http response header for cache control</p>
    "!
    "! @parameter io_lib_response    | <p class="shorttext synchronized" lang="en">REST Response</p>
    METHODS set_response_hdr_cache_control
      IMPORTING
        !io_lib_response TYPE REF TO /iwcor/if_rest_response.

    "! <p class="shorttext synchronized" lang="en">Set the http response header 'sap-messages'</p>
    "!
    "! @parameter io_lib_response    | <p class="shorttext synchronized" lang="en">REST Response</p>
    METHODS set_response_hdr_sap_messages
      IMPORTING
        !io_lib_response TYPE REF TO /iwcor/if_rest_response.

    "! <p class="shorttext synchronized" lang="en">Validates an backend context token (BCT)</p>
    "! A BCT is provided via URL parameter <em>sap-context-token</em>
    "!
    "! @parameter iv_bct       | <p class="shorttext synchronized" lang="en">Backend Context Token</p>
    "! @raising   /iwbep/cx_od | <p class="shorttext synchronized" lang="en">Gateway Exception </p>
    METHODS validate_bct
      IMPORTING
        !iv_bct TYPE string
      RAISING
        /iwbep/cx_od.

    "! <p class="shorttext synchronized" lang="en">Set OData info to ST22, SM04 and other monitoring transacts.</p>
    "!
    "! @parameter IO_CONTEXT           | <p class="shorttext synchronized" lang="en">Context</p>
    "! @parameter IV_SERVICE_NAME      | <p class="shorttext synchronized" lang="en">Service name</p>
    METHODS write_monitoring_info
      IMPORTING
        !io_context      TYPE REF TO /iwcor/if_od_cntxt
        !iv_service_name TYPE string
      RAISING
        /iwcor/cx_od_error .

ENDCLASS.



CLASS /IWBEP/CL_OD_ROOT_HANDLER IMPLEMENTATION.


  METHOD check_security.

    TRY.
        " Check SAP Gateway is active and Service Group is published
        /iwbep/cl_v4_publishing=>get_instance( )->check_is_service_published( iv_service_group ).

      CATCH BEFORE UNWIND /iwbep/cx_v4_access_check INTO DATA(lx_access).
        " Save call stack for Error Log
        /iwbep/cl_v4_logger=>save_callstack( ).

        RAISE EXCEPTION TYPE /iwcor/cx_od_http_error
          EXPORTING
            previous = lx_access.
    ENDTRY.

  ENDMETHOD.


  METHOD constructor.

    super->constructor( io_svc_factory = io_svc_factory ).


*   Six segments are building the service name: More precisely
*     1: Service Group Namespace
*     2: Service Group Name
*     3: Repository (currently 'default', 'F4', 'SADL')
*     4: Service Namespace
*     5: Service Name
*     6: Version
*   URI sample: .../sap/opu/odata4/iwbep/tea/default/iwbep/tea_busi/0001/TEAMS...

    set_resolution_parameter(
      iv_svc_root           = /iwbep/if_od_types=>gcs_icf_node-odata_v4_path
      iv_svc_segments_limit = 4 "Allow that the BATCH payload contains a request like this "GET ../../../../default/iwbep/tea_tech/0001/TEAMS" going 4 segments back
      iv_svc_segments       = 6 ).

  ENDMETHOD.


  METHOD dispatch.

    DATA:
      lo_lib_entity        TYPE REF TO /iwcor/if_rest_entity,
      lo_svc_factory       TYPE REF TO /iwbep/cl_od_svc_factory,
      lr_context_refs      TYPE REF TO /iwcor/if_od_cntxt=>content_reference_t,
      ls_content_reference TYPE /iwcor/if_od_cntxt=>content_reference_s,
      ls_request_base_info TYPE /iwbep/if_v4_request_info=>ty_s_base_info,
      lt_http_header       TYPE tihttpnvp,
      lt_lib_segment_param TYPE tihttpnvp,
      lt_query_param       TYPE tihttpnvp,
      lv_resource_path     TYPE string,
      lx_gateway           TYPE REF TO /iwbep/cx_gateway.



    ls_request_base_info-http_method     = io_request->get_method( ).
    lv_resource_path                     = io_context->get_resource_path( ).
    ls_request_base_info-is_asynchronous = mo_request_info->is_asynchronous( ). "This has already been set and must not be overwritten when we set the base info


*   OData lib context
    mo_lib_context = io_context.


*   Get base information to create or to fill request information
    ls_request_base_info-uri_request = io_request->get_uri( iv_encoded = abap_true ).

    " ID of the current transaction ID - used for tracing / monitoring
    CALL FUNCTION 'TH_GET_CLIENT_ID' IMPORTING transid = ls_request_base_info-transaction_id.


    " Service Group and Service Name
    process_service_info(
      EXPORTING
        iv_lib_service_name = iv_service_name           " Lib "Service Name" - made out of 5 segments
      CHANGING
        cs_base_info        = ls_request_base_info ).   " REST request and OData context information

    IF mv_is_batch_handler = abap_false.
      " This call is only done for 'normal' requests and the first $batch request
      check_security( ls_request_base_info-service_group_id ).
    ENDIF.


    " Query Parameter
    IF mv_is_batch_handler = abap_false.
      lt_query_param = io_request->get_uri_query_parameters( ).
      process_query_params(
        EXPORTING
          it_query_param = lt_query_param
        CHANGING
          cs_base_info   = ls_request_base_info ).
    ENDIF.

    " Request Header
    lt_http_header = io_request->get_header_fields( ).
    process_request_headers(
      EXPORTING
        it_http_header = lt_http_header
      CHANGING
        cs_base_info   = ls_request_base_info ).

    " segment parameters (Multi Origin (mo), Origin (o), Variant (v)
    io_context->get_service_segment_parameter( IMPORTING et_parameter = lt_lib_segment_param ).
    process_segment_params(
      EXPORTING
        it_lib_segment_param = lt_lib_segment_param
      CHANGING
        cs_base_info         = ls_request_base_info ).


    " All information collected for Request base info
    mo_request_info->set_base_info( ls_request_base_info ).


*   Service key and Service Alias
    process_service_key_and_alias(
      iv_service_group_id = ls_request_base_info-service_group_id
      is_service_key      = ls_request_base_info-service_key ).


*   Metadata request or service document request
    IF ( lv_resource_path = /iwbep/cl_v4_url_util=>gcs_resource_path-metadata ).
      mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-load_metadata ).

    ELSEIF ( lv_resource_path = /iwbep/cl_v4_url_util=>gcs_resource_path-service_doc ).
      IF  ( ls_request_base_info-http_method = /iwbep/if_od_types=>gcs_http_methods-head ).
        " A HEAD request to the service document URI immediately results in a 200 OK response
        " (such a request is used to quickly fetch the CSRF token without retrieving the model data)
        io_response->set_status( iv_status        = 200
                                 iv_reason_phrase = if_http_status=>reason_200 ).
        io_response->set_header_field( iv_name  = /iwbep/if_od_types=>gcs_http_headers-odata_version
                                       iv_value = '4.0' ).
        RETURN.
      ELSE.
        mo_request_info->set_operation_kind( /iwbep/if_v4_request_info=>gcs_operation_kinds-load_service_document ).
      ENDIF.

    ENDIF.


*   Lib Request Info
    mo_request_info->set_lib_request_info( NEW /iwbep/cl_od_request_info( ) ).


*   Content ID References for BATCH
    IF mv_is_batch_handler EQ abap_true.
      " Handle Content ID and Content Reference ID in Batch
      lo_lib_entity = io_request->get_entity( ).
      lr_context_refs = io_context->get_content_references( ).
      IF lr_context_refs IS BOUND.
        READ TABLE lr_context_refs->* WITH TABLE KEY entity = lo_lib_entity INTO ls_content_reference.
        IF sy-subrc = 0.
          IF ls_content_reference-id IS NOT INITIAL.
            mo_request_info->set_content_id( ls_content_reference-id ).
          ENDIF.
          IF ls_content_reference-ref_id IS NOT INITIAL.
            mo_request_info->set_content_id_ref( ls_content_reference-ref_id ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.


*   write request info back into IO_CONTEXT - read again from the context in /IWBEP/CL_OD_PROCESSOR
    io_context->set_object(
      iv_name   = /iwbep/if_od_types=>gc_od_cntx_object_identifier
      io_object = mo_request_info ).


*   Actual dispatching
    TEST-SEAM super_dispatch.
      lo_svc_factory ?= mo_svc_factory.
      lo_svc_factory->set_lib_context( io_context ).

      write_monitoring_info(
        io_context      = io_context
        iv_service_name = iv_service_name ).

      super->dispatch(
        EXPORTING
          iv_service_name = iv_service_name
          io_request      = io_request
          io_response     = io_response
          io_context      = io_context ).

    END-TEST-SEAM.

    " any post-processing must be added to redefined method POST_PROCESS

  ENDMETHOD.


  METHOD get_lib_context.

    ro_lib_context = mo_lib_context.

  ENDMETHOD.


  METHOD handle_conditions.

    rv_processed = abap_false. "Leave the conditional handling to the processor

  ENDMETHOD.


  METHOD handle_error.

    DATA: lo_od_request_info TYPE REF TO /iwbep/cl_od_request_info.


    mo_request_info->cleanup_for_error( ).


    lo_od_request_info ?= mo_request_info->get_lib_request_info( ).
    IF lo_od_request_info IS BOUND.
      lo_od_request_info->cleanup_for_error( ).
    ENDIF.


    TEST-SEAM utils_handle_error.
      /iwbep/cl_od_error_handler=>create( )->handle_error(
         io_request_info = mo_request_info
         io_error        = io_error
         io_response     = io_response
         io_context      = mo_lib_context ).
    END-TEST-SEAM.

  ENDMETHOD.


  METHOD post_process.

    DATA:
      lo_response_info TYPE REF TO /iwbep/if_v4_response_info,
      lv_odata_version TYPE string.


    " BATCH operations are dispatched twice to the root handler, but we need
    " this post processing only for the second round, when the OData response is created
    IF mv_processing_mode = /iwbep/cl_od_processor=>gcs_processing_modes-pre_processing_only.
      RETURN.
    ENDIF.


    set_common_response_headers( io_response ).


    TEST-SEAM super_post_process.
      super->post_process(
        EXPORTING
          io_request  = io_request
          io_response = io_response
          io_context  = io_context ).
    END-TEST-SEAM.

  ENDMETHOD.


  METHOD process_query_params.

    DATA:
      ls_query_param      TYPE ihttpnvp,
      lv_client           TYPE string,
      lv_has_bct          TYPE abap_bool,
      lv_language         TYPE string,
      lv_language_current TYPE laiso,
      lx_gateway          TYPE REF TO /iwbep/cx_gateway.


    TRY.
        LOOP AT it_query_param INTO ls_query_param.

          " ignore empty custom query options
          CHECK ls_query_param IS NOT INITIAL.

          CASE ls_query_param-name.
            WHEN /iwbep/if_od_types=>gcs_url_parameter-sap_bct.
              validate_bct( ls_query_param-value ).
              lv_has_bct = abap_true.

            WHEN /iwbep/if_od_types=>gcs_url_parameter-sap_client.
              lv_client = ls_query_param-value.

            WHEN /iwbep/if_od_types=>gcs_url_parameter-sap_language.
              lv_language = ls_query_param-value.

            WHEN /iwbep/if_od_types=>gcs_url_parameter-sap_statistics.
              IF to_upper( ls_query_param-value ) = 'TRUE'.
                mo_request_info->set_is_sap_stats_requested( abap_true ).
              ENDIF.

          ENDCASE.

        ENDLOOP.


        IF lv_has_bct = abap_true.
          IF lv_client IS INITIAL. "Every resource is client dependent
            RAISE EXCEPTION TYPE /iwbep/cx_od EXPORTING textid = /iwbep/cx_od=>bct_needs_sap_client.
          ENDIF.

          CHECK lv_client = sy-mandt. "Not the caller's fault, but we cannot support the BCT

          IF lv_language IS INITIAL. "Currently we only support the BCT for $metadata, which is language dependent
            RAISE EXCEPTION TYPE /iwbep/cx_od EXPORTING textid = /iwbep/cx_od=>bct_needs_sap_language.
          ENDIF.

          CALL FUNCTION 'CONVERT_SAP_LANG_TO_ISO_LANG'
            EXPORTING
              input  = sy-langu
            IMPORTING
              output = lv_language_current
            EXCEPTIONS
              OTHERS = 1.

          ASSERT sy-subrc = 0.
          CHECK lv_language = lv_language_current. "Not the caller's fault, but we cannot support the BCT

          cs_base_info-has_bct = abap_true.
        ENDIF.

      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.

  ENDMETHOD.


  METHOD process_request_headers.

    DATA:
      lo_edm_guid    TYPE REF TO /iwcor/if_od_edm_prim_type,
      ls_http_header TYPE ihttpnvp,
      lv_accept      TYPE string,
      lx_guid        TYPE REF TO cx_root.


    TRY.
        LOOP AT it_http_header INTO ls_http_header
          WHERE name <> /iwbep/if_od_types=>gcs_http_headers-sap_dtrace
            AND name <> /iwbep/if_od_types=>gcs_http_headers-sap_passport
            AND name <> /iwbep/if_od_types=>gcs_http_headers-requested_with
            AND name <> space.

          IF ls_http_header-name(1) <> '~'
          OR ls_http_header-name = if_http_header_fields_sap=>remote_addr
          OR ls_http_header-name = if_http_header_fields_sap=>request_uri
          OR ls_http_header-name = if_http_header_fields_sap=>request_method.

            APPEND ls_http_header TO cs_base_info-http_headers.

            CASE ls_http_header-name.
              WHEN /iwbep/if_od_types=>gcs_http_headers-accept.
                " Only needed for validation below - content type negotiation is done by the lib
                lv_accept = ls_http_header-value.

              WHEN /iwbep/if_od_types=>gcs_http_headers-csrf_token.
                IF  ls_http_header-value IS NOT INITIAL
                AND to_lower( ls_http_header-value ) <> /iwbep/if_od_types=>gcs_http_header_values-csrf_token-fetch.
                  " If a CSRF token exists it MUST be a valid one due to the HANDLE_CSRF_TOKEN method of the rest handler class.
                  cs_base_info-is_csrf_token_protected = abap_true.
                ENDIF.

              WHEN /iwbep/if_od_types=>gcs_http_headers-host.
                cs_base_info-host_name = ls_http_header-value.

              WHEN /iwbep/if_od_types=>gcs_http_headers-repeat_first_sent.
                TRY.
                    cs_base_info-idempotency-first_sent = /iwbep/cl_od_utils=>parse_http_date( ls_http_header-value ).

                  CATCH /iwbep/cx_od INTO DATA(lx_http_date).
                    lx_http_date->exception_category = /iwbep/cx_gateway=>gcs_excep_categories-repeatability.
                    RAISE EXCEPTION lx_http_date.
                ENDTRY.

              WHEN /iwbep/if_od_types=>gcs_http_headers-repeat_request_id.
                IF ls_http_header-value IS INITIAL.
                  RAISE EXCEPTION TYPE /iwbep/cx_od
                    EXPORTING
                      textid             = /iwbep/cx_od=>idp_invalid_request_id
                      exception_category = /iwbep/cx_gateway=>gcs_excep_categories-repeatability.

                ELSEIF strlen( ls_http_header-value ) <= 32.
                  cs_base_info-idempotency-request_id = ls_http_header-value.

                ELSE. "It has to be a 36-character hexadecimal case-insensitive encoding of a UUID (GUID)
                  lo_edm_guid = /iwcor/cl_od_edm_prim_type=>guid( ).
                  TRY.
                      lo_edm_guid->value_of(
                        EXPORTING
                          iv_value = ls_http_header-value
                        IMPORTING
                          ev_value = cs_base_info-idempotency-request_id ).

                    CATCH cx_root INTO lx_guid.
                      RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>idp_invalid_request_id
                                                        previous           = lx_guid
                                                        http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
                                                        exception_category = /iwbep/cx_gateway=>gcs_excep_categories-repeatability ).
                  ENDTRY.
                ENDIF.

              WHEN /iwbep/if_od_types=>gcs_http_headers-sap_document_description_id.
                lo_edm_guid = /iwcor/cl_od_edm_prim_type=>guid( ).
                TRY.
                    lo_edm_guid->value_of(
                      EXPORTING
                        iv_value = ls_http_header-value
                      IMPORTING
                        ev_value = cs_base_info-document_description_id ).

                  CATCH cx_root INTO lx_guid.
                    RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>invalid_doc_descr_id_format
                                                      previous           = lx_guid
                                                      http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
                                                      exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client ).
                ENDTRY.

                IF cs_base_info-document_description_id IS INITIAL. "I.e. value 00000000-0000-0000-0000-000000000000 was provided
                  RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>invalid_doc_descr_id_value
                                                    http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
                                                    exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client ).
                ENDIF.

              WHEN /iwbep/if_od_types=>gcs_http_headers-sap_sid.
                cs_base_info-sap_sid = ls_http_header-value.

              WHEN /iwbep/if_od_types=>gcs_http_headers-sap_show_todos.
                mo_request_info->set_is_sap_todos_requested( ).

            ENDCASE.

          ENDIF.
        ENDLOOP.


        IF  cs_base_info-document_description_id IS NOT INITIAL
        AND to_lower( lv_accept ) <> 'application/pdf'.
          RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>invalid_doc_descr_wrong_accept
                                            exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
                                            http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request ).
        ENDIF.

        IF  cs_base_info-idempotency-first_sent IS NOT INITIAL
        AND cs_base_info-idempotency-request_id IS INITIAL.
          RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>idp_missing_request_id
                                            exception_category = /iwbep/cx_gateway=>gcs_excep_categories-repeatability ).

        ELSEIF cs_base_info-idempotency-request_id IS NOT INITIAL
        AND    cs_base_info-idempotency-first_sent IS INITIAL.
          RAISE EXCEPTION NEW /iwbep/cx_od( textid             = /iwbep/cx_od=>idp_missing_first_sent
                                            exception_category = /iwbep/cx_gateway=>gcs_excep_categories-repeatability ).

        ENDIF.


      CATCH /iwbep/cx_od INTO DATA(lx_od).
        RAISE EXCEPTION NEW /iwcor/cx_od_http_error( previous = lx_od ).
    ENDTRY.

  ENDMETHOD.


  METHOD process_segment_params.

    DATA: lx_not_supported      TYPE REF TO /iwbep/cx_v4h_runtime.

    FIELD-SYMBOLS: <ls_lib_segment_param> TYPE ihttpnvp.



    cs_base_info-is_multi_origin = abap_false.
    CLEAR cs_base_info-origin_system_alias.

    LOOP AT it_lib_segment_param ASSIGNING <ls_lib_segment_param>.
      CASE <ls_lib_segment_param>-name.
        WHEN /iwbep/cl_v4_url_util=>gcs_segment_parameters-multi_destin_comp.
          cs_base_info-is_multi_origin = abap_true.

        WHEN /iwbep/cl_v4_url_util=>gcs_segment_parameters-origin.
          cs_base_info-origin_system_alias = <ls_lib_segment_param>-value.

        WHEN /iwbep/cl_v4_url_util=>gcs_segment_parameters-parent_service_key.
          cs_base_info-parent_service_key = /iwbep/cl_v4_url_util=>parse_segment_param_val_ps( <ls_lib_segment_param>-value ).

        WHEN /iwbep/cl_v4_url_util=>gcs_segment_parameters-variant.
          cs_base_info-service_key-service_variant = /iwbep/cl_v4_url_util=>parse_segment_param_val_va( <ls_lib_segment_param>-value ).

        WHEN OTHERS.
          CREATE OBJECT lx_not_supported
            EXPORTING
              http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
              exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client
              textid             = /iwbep/cx_v4h_runtime=>segment_param_not_supported
              segment_parameter  = <ls_lib_segment_param>-name.

          RAISE EXCEPTION TYPE /iwcor/cx_od_http_error
            EXPORTING
              previous = lx_not_supported.

      ENDCASE.
    ENDLOOP.

  ENDMETHOD.


  METHOD process_service_info.

    TRY.
        /iwbep/cl_v4_url_util=>parse_service_info_segments(
          EXPORTING
            iv_service_info     = iv_lib_service_name
          IMPORTING
            es_service_key      = cs_base_info-service_key
            ev_service_group_id = cs_base_info-service_group_id ).


        IF  gv_service_group_id_cache IS NOT INITIAL
        AND gv_service_group_id_cache <> cs_base_info-service_group_id.
          " The current application session has been used for a previous OData V4 call (STATEFULL)
          " AND the previous call had addressed a different service group
          " Then we raise an exception. The application must not be shared between different service groups
          RAISE EXCEPTION TYPE /iwbep/cx_od
            EXPORTING
              textid             = /iwbep/cx_od=>stateful_only_for_same_group
              http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request
              exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client.

        ELSE.
          gv_service_group_id_cache = cs_base_info-service_group_id.

        ENDIF.


        cs_base_info-uri_service_name = '/' && iv_lib_service_name.

        " Set the service key the first time (before resolving a service alias),
        " so that we have the service info even in case of an exception
        mo_request_info->set_service_key( is_service_key       = cs_base_info-service_key
                                          iv_is_temporary_info = abap_true ).

        mo_request_info->set_service_group( cs_base_info-service_group_id ).


      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO DATA(lx_gateway).
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).

    ENDTRY.

  ENDMETHOD.


  METHOD set_is_batch_handler.

    mv_is_batch_handler = abap_true.

  ENDMETHOD.


  METHOD set_processing_mode.

    mv_processing_mode = iv_processing_mode.

  ENDMETHOD.


  METHOD set_request_info.

    mo_request_info = io_request_info.

  ENDMETHOD.


  METHOD set_response_hdr_cache_control.

    DATA:
      lo_response_info TYPE REF TO /iwbep/if_v4_response_info,
      ls_cache_control TYPE /iwbep/if_v4_response_info=>ty_s_cache_control_w_max_age,
      lv_header_value  TYPE string.


    lo_response_info = mo_request_info->get_response_info( ).

    IF mo_request_info->get_operation_kind( ) = /iwbep/if_v4_request_info=>gcs_operation_kinds-load_metadata.
      IF mo_request_info->has_bct( ).
        io_lib_response->set_header_field(
          iv_name  = /iwbep/if_od_types=>gcs_http_headers-cache_control
          iv_value = /iwbep/if_od_types=>gcs_http_header_values-cache_control-cache_1_year ).

        "With the following 2 header fields we inject the response also into the ICM cache (for 10 days)
        io_lib_response->set_header_field(
          iv_name  = /iwbep/if_od_types=>gcs_http_headers-sap_icm_cache_control
          iv_value = /iwbep/if_od_types=>gcs_http_header_values-icm_cache_control-cache_10_days ).
        io_lib_response->set_header_field(
          iv_name  = /iwbep/if_od_types=>gcs_http_headers-sap_icm_cache_agent
          iv_value = /iwbep/if_od_types=>gcs_http_header_values-icm_cache_agent ).

      ELSE.
        io_lib_response->set_header_field(
          iv_name  = /iwbep/if_od_types=>gcs_http_headers-cache_control
          iv_value = |{ /iwbep/if_od_types=>gcs_http_header_values-cache_control-max_age }{ 0 }| ).

      ENDIF.

    ELSEIF lo_response_info IS BOUND
    AND    lo_response_info->get_do_not_cache( ).
      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-cache_control
        iv_value = /iwbep/if_od_types=>gcs_http_header_values-cache_control-no_cache ).


    ELSEIF lo_response_info IS BOUND.
      ls_cache_control = lo_response_info->get_cache_control( ).
      CLEAR lv_header_value.

      lv_header_value = |{ /iwbep/if_od_types=>gcs_http_header_values-cache_control-max_age }{ ls_cache_control-max_age }|.

      IF ls_cache_control-is_public = abap_true.
        lv_header_value = |{ lv_header_value }, { /iwbep/if_od_types=>gcs_http_header_values-cache_control-public }|.
      ENDIF.

      IF ls_cache_control-is_immutable = abap_true.
        lv_header_value = |{ lv_header_value }, { /iwbep/if_od_types=>gcs_http_header_values-cache_control-immutable }|.
      ENDIF.

      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-cache_control
        iv_value = lv_header_value ).

    ELSE.
      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-cache_control
        iv_value = /iwbep/if_od_types=>gcs_http_header_values-cache_control-cache_and_revalidate ).


    ENDIF.

  ENDMETHOD.


  METHOD set_response_hdr_sap_messages.

    DATA: lt_message             TYPE /iwbep/if_v4_response_info=>ty_t_header_message,
          lv_sap_messages_string TYPE string.


    lt_message = mo_request_info->get_response_info( )->get_header_messages( ).
    CHECK lt_message IS NOT INITIAL.

    lv_sap_messages_string = /iwbep/cl_od_utils=>build_sap_messages_header( lt_message ).

    io_lib_response->set_header_field(
      iv_name  = /iwbep/if_od_types=>gcs_http_headers-sap_messages
      iv_value = lv_sap_messages_string ).

  ENDMETHOD.


  METHOD validate_bct.

    DATA: lv_now      TYPE tzntstmps,
          lv_bct_time TYPE tzntstmps.


    FIND REGEX '[0-9]{4}[0-1]{1}[0-9]{1}[0-3]{1}[0-9]{1}[0-2]{1}[0-9]{1}[0-5]{1}[0-9]{1}[0-5]{1}[0-9]{1}' IN iv_bct ##REGEX_POSIX.

    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE /iwbep/cx_od EXPORTING textid = /iwbep/cx_od=>bct_invalid.
    ENDIF.

    TRY.
        lv_bct_time = iv_bct.
      CATCH cx_sy_conversion_error.
        RAISE EXCEPTION TYPE /iwbep/cx_od EXPORTING textid = /iwbep/cx_od=>bct_invalid.
    ENDTRY.

    GET TIME STAMP FIELD lv_now.

    " Provided BCT must not be in the future
    IF lv_bct_time >= lv_now.
      RAISE EXCEPTION TYPE /iwbep/cx_od EXPORTING textid = /iwbep/cx_od=>bct_in_the_future.
    ENDIF.

  ENDMETHOD.


  METHOD write_monitoring_info.
*  Writes into ST22 & SM04 that the current application session is processing an OData request

    DATA: lv_application_component TYPE ufps_posid,
          lt_monitoring_attr       TYPE /iwbep/cl_v4_v2_support_facade=>ty_t_monitoring_attribute,
          lv_service_root          TYPE string,
          ls_service_key           TYPE /iwbep/s_v4_med_service_key,
          lo_model                 TYPE REF TO /iwbep/if_v4_med_model_fw.



    " Check if it is not a batch request
    IF mv_is_batch_handler = abap_false.
      ls_service_key = mo_request_info->get_service_key( ).
      lo_model ?= mo_request_info->get_model_if_instantiated( ls_service_key ).

      IF lo_model IS BOUND.
        lv_application_component = lo_model->get_appl_comp_id( ).
      ENDIF.

      lv_service_root = io_context->get_service_root_absolute( ).

      lt_monitoring_attr = VALUE #( ( name = /iwbep/cl_v4_v2_support_facade=>gcs_monitoring_attribute_key-appl_component   value = lv_application_component )
                                    ( name = /iwbep/cl_v4_v2_support_facade=>gcs_monitoring_attribute_key-base_url         value = lv_service_root )
                                    ( name = /iwbep/cl_v4_v2_support_facade=>gcs_monitoring_attribute_key-v4_service_group value = iv_service_name ) ).

      /iwbep/cl_v4_v2_support_facade=>add_to_monitoring_service_info( lt_monitoring_attr ).

    ENDIF.

  ENDMETHOD.


  METHOD process_service_key_and_alias.

    DATA:
      ls_routing_info              TYPE /iwbep/if_v4_request_info=>ty_s_routing_info,
      lo_service_alias             TYPE REF TO /iwbep/cl_v4_service_alias,
      ls_service_key               TYPE /iwbep/s_v4_med_service_key,
      lv_service_alias             TYPE /iwbep/v4_med_service_id,
      lv_service_alias_sub_version TYPE /iwbep/v4_med_serv_sub_version,
      lv_service_alias_version     TYPE /iwbep/v4_med_service_version,
      lv_last_modified             TYPE timestamp,
      lx_gateway                   TYPE REF TO /iwbep/cx_gateway.


    TRY.
        ls_routing_info = mo_request_info->get_routing_info( ).

        IF ls_routing_info-bep_version >= '021'.
          ls_service_key = is_service_key.

          lo_service_alias = NEW #( iv_service_group_id = iv_service_group_id
                                    is_routing_info     = ls_routing_info ).

          lo_service_alias->resolve_service_id(
            EXPORTING
              is_service_key           = is_service_key
            IMPORTING
              ev_service_id            = ls_service_key-service_id
              ev_service_version       = ls_service_key-service_version
              ev_service_alias         = lv_service_alias
              ev_service_sub_version   = lv_service_alias_sub_version
              ev_service_alias_version = lv_service_alias_version
              ev_last_modified         = lv_last_modified ).

          mo_request_info->set_service_key( is_service_key           = ls_service_key
                                            iv_service_alias         = lv_service_alias
                                            iv_service_sub_version   = lv_service_alias_sub_version
                                            iv_service_alias_version = lv_service_alias_version ).

          mo_request_info->set_srv_group_cache_timestamp( lv_last_modified ).

        ELSE.
          mo_request_info->set_service_key( is_service_key = is_service_key ).

        ENDIF.


      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_od_utils=>raise_lib_exception( lx_gateway ).
    ENDTRY.


  ENDMETHOD.


  METHOD set_common_response_headers.

    DATA:
      lo_response_info TYPE REF TO /iwbep/if_v4_response_info,
      ls_todos         TYPE /iwbep/if_v4_request_info=>ty_s_todo_list,
      lv_odata_version TYPE string,
      lv_todo_process  TYPE string,
      lv_todo_return   TYPE string.


    ls_todos = mo_request_info->get_todos( ).


*   Cache Control
    IF mo_request_info->get_operation_kind( ) <> /iwbep/if_v4_request_info=>gcs_operation_kinds-process_batch. "No cache control for the main batch request
      set_response_hdr_cache_control( io_lib_response ).
    ENDIF.


    lo_response_info = mo_request_info->get_response_info( ).
    CHECK lo_response_info IS BOUND.


*   OData Version
    lv_odata_version = lo_response_info->get_odata_version( ).
    IF lv_odata_version IS NOT INITIAL.
      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-odata_version
        iv_value = lv_odata_version ).
    ENDIF.


*   Repeatability-Result
    IF lo_response_info->is_idempotency_guaranteed( ).
      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-repeat_result
        iv_value = /iwbep/if_od_types=>gcs_http_header_values-repeatability-accepted ).
    ENDIF.


*   SAP-Messages
    set_response_hdr_sap_messages( io_lib_response ).


*   SAP ToDos
    IF ls_todos-return-sap_todos = abap_true.
      mo_request_info->get_todos_as_strings(
        IMPORTING
          ev_process = lv_todo_process
          ev_return  = lv_todo_return ).

      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-sap_todo_process
        iv_value = lv_todo_process ).

      io_lib_response->set_header_field(
        iv_name  = /iwbep/if_od_types=>gcs_http_headers-sap_todo_return
        iv_value = lv_todo_return ).

    ENDIF.

  ENDMETHOD.
ENDCLASS.