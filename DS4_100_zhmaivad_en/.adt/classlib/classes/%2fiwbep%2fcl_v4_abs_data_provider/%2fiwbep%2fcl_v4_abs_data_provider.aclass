"! <p class="shorttext synchronized" lang="en">V4 Abstract Data Provider</p>
CLASS /iwbep/cl_v4_abs_data_provider DEFINITION
  PUBLIC
  ABSTRACT
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES /iwbep/if_v4_data_provider .

  PRIVATE SECTION.

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Kind of a package of batch operations</p>
      ty_batch_package_kind TYPE c LENGTH 1.

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Package of batch operations</p>
      BEGIN OF ty_s_batch_package,
        kind                 TYPE ty_batch_package_kind,
        number_of_operations TYPE i,
        operations_info      TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      END OF ty_s_batch_package,
      "! <p class="shorttext synchronized" lang="en">Packages of batch operations</p>
      ty_t_batch_package TYPE STANDARD TABLE OF ty_s_batch_package WITH KEY kind.


    CONSTANTS:
      "! <p class="shorttext synchronized" lang="en"></p>
      BEGIN OF gcs_batch_package_kinds,
        read_operations   TYPE ty_batch_package_kind VALUE '1',
        change_operations TYPE ty_batch_package_kind VALUE '2',
        change_set        TYPE ty_batch_package_kind VALUE '3',
      END OF gcs_batch_package_kinds .


    "! <p class="shorttext synchronized" lang="en">Create new request and response info PRO classes</p>
    "!
    "! @parameter io_request  | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @parameter io_response | <p class="shorttext synchronized" lang="en">Class Response Info Pro</p>
    "! @parameter eo_request  | <p class="shorttext synchronized" lang="en">New instance of Class Request Info Pro</p>
    "! @parameter eo_response | <p class="shorttext synchronized" lang="en">New instance of Class Response Info Pro</p>
    CLASS-METHODS create_request_response_pro
      IMPORTING
        !io_request  TYPE REF TO object
        !io_response TYPE REF TO object
      EXPORTING
        !eo_request  TYPE REF TO /iwbep/cl_v4_request_info_pro
        !eo_response TYPE REF TO /iwbep/cl_v4_response_info_pro .

    "! <p class="shorttext synchronized" lang="en">Apply $skip and $top options</p>
    "!
    "! @parameter iv_skip | <p class="shorttext synchronized" lang="en">$skip value</p>
    "! @parameter iv_top  | <p class="shorttext synchronized" lang="en">$top value</p>
    "! @parameter ct_data | <p class="shorttext synchronized" lang="en">Data</p>
    METHODS apply_skip_top
      IMPORTING
        !iv_skip TYPE i DEFAULT -1
        !iv_top  TYPE i DEFAULT -1
      CHANGING
        !ct_data TYPE STANDARD TABLE .

    "! <p class="shorttext synchronized" lang="en">Check the conditions for modification requests if needed</p>
    "!
    "! @parameter IO_REQUEST   | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS check_modification_conditions
      IMPORTING
        !io_request  TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response TYPE REF TO /iwbep/cl_v4_response_info_pro
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Create batch packages from operations info</p>
    "!
    "! @parameter et_batch_package | <p class="shorttext synchronized" lang="en">Packages of batch operations</p>
    METHODS create_batch_packages
      IMPORTING
        !it_batch_operation_info TYPE /iwbep/if_v4_request_info=>ty_t_operation_info
      EXPORTING
        !et_batch_package        TYPE ty_t_batch_package
      RAISING
        /iwbep/cx_v4_runtime .

    "! <p class="shorttext synchronized" lang="en">Execute change operation of a batch request or changeset</p>
    "!
    "! @parameter io_batch_request     | <p class="shorttext synchronized" lang="en">Parent BATCH request</p>
    "! @parameter io_batch_response    | <p class="shorttext synchronized" lang="en">Parent BATCH response</p>
    "! @parameter is_changeset_package | <p class="shorttext synchronized" lang="en">Change operations</p>
    "! @parameter rv_is_successful     | <p class="shorttext synchronized" lang="en">TRUE if all operations were executed successfully</p>
    METHODS execute_batch_changeset
      IMPORTING
        io_batch_request        TYPE REF TO /iwbep/if_v4_requ_btc_proc
        io_batch_response       TYPE REF TO /iwbep/if_v4_resp_btc_proc
        is_changeset_package    TYPE ty_s_batch_package
      RETURNING
        VALUE(rv_is_successful) TYPE abap_bool.

    "! <p class="shorttext synchronized" lang="en">Execute change operation of a batch request or changeset</p>
    "!
    "! @parameter is_batch_operation | <p class="shorttext synchronized" lang="en">Change operation in a $batch request</p>
    "! @raising   /iwbep/cx_gateway  | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS execute_batch_operation
      IMPORTING
        !is_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Get detailed information from expand node</p>
    "!
    "! @parameter io_expand             | <p class="shorttext synchronized" lang="en">V4 Expand Tree Node</p>
    "! @parameter eo_navigation_property    | <p class="shorttext synchronized" lang="en">Navigation property - READ</p>
    "! @parameter ev_navigation_prop_name   | <p class="shorttext synchronized" lang="en">Internal name of the navigation property</p>
    "! @parameter ev_complex_property_path  | <p class="shorttext synchronized" lang="en">Complex property path to the navigation property</p>
    "! @parameter eo_source_entity_type | <p class="shorttext synchronized" lang="en">Entity type - READ</p>
    "! @parameter eo_target_entity_type | <p class="shorttext synchronized" lang="en">Entity type - READ</p>
    "! @parameter eo_target_data_provider | <p class="shorttext synchronized" lang="en">Data provider (me or x-service data provider)</p>
    "! @parameter eo_target_entity_set  | <p class="shorttext synchronized" lang="en">Entity set - READ</p>
    "! @raising   /iwbep/cx_gateway     | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS expand_get_expand_details
      IMPORTING
        !io_expand                   TYPE REF TO /iwbep/if_v4_expand_node
        !io_request                  TYPE REF TO /iwbep/cl_v4_request_info_pro
      EXPORTING
        !ev_has_children             TYPE abap_bool
        !eo_navigation_property      TYPE REF TO /iwbep/if_v4_med_nav_prop_r
        !ev_navigation_prop_name     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !ev_complex_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_property_path
        !eo_source_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r
        !eo_target_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r
        !eo_target_entity_set        TYPE REF TO /iwbep/if_v4_med_entity_set_r
        !eo_target_data_provider     TYPE REF TO /iwbep/if_v4_data_provider
        !ev_is_expanded              TYPE abap_bool
        !ev_is_expanded_completly    TYPE abap_bool
        !ev_is_cross_service_request TYPE abap_bool
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Get target key data for expand node</p>
    "!
    "! @parameter io_request            | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @parameter io_response           | <p class="shorttext synchronized" lang="en">Class Response Info Pro</p>
    "! @parameter io_nav_property       | <p class="shorttext synchronized" lang="en">Navigation property</p>
    "! @parameter iv_complex_property_path | <p class="shorttext synchronized" lang="en">Complex property path to the navigation property</p>
    "! @parameter io_source_entity_type | <p class="shorttext synchronized" lang="en">Entity type - READ</p>
    "! @parameter ir_current_entity     | <p class="shorttext synchronized" lang="en">Current entity data</p>
    "! @parameter er_target_key_data    | <p class="shorttext synchronized" lang="en">Target key data</p>
    "! @raising   /iwbep/cx_gateway     | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS expand_get_target_key_data
      IMPORTING
        !io_request               TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response              TYPE REF TO /iwbep/cl_v4_response_info_pro
        !io_nav_property          TYPE REF TO /iwbep/if_v4_med_nav_prop_r
        !iv_complex_property_path TYPE /iwbep/if_v4_runtime_types=>ty_property_path
        !io_source_entity_type    TYPE REF TO /iwbep/if_v4_med_entity_type_r
        !ir_current_entity        TYPE REF TO data
      EXPORTING
        !er_target_key_data       TYPE REF TO data
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Get target key data for expand node</p>
    "!
    "! @parameter io_request                | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @parameter io_response               | <p class="shorttext synchronized" lang="en">Class Response Info Pro</p>
    "! @parameter io_nav_property           | <p class="shorttext synchronized" lang="en">Navigation property</p>
    "! @parameter io_target_data_provider | <p class="shorttext synchronized" lang="en">Target Data Provider</p>
    "! @parameter ir_target_key_data    | <p class="shorttext synchronized" lang="en">Target key data</p>
    "! @raising   /iwbep/cx_gateway     | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS expand_next_nodes
      IMPORTING
        !io_request              TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response             TYPE REF TO /iwbep/cl_v4_response_info_pro
        !io_nav_property         TYPE REF TO /iwbep/if_v4_med_nav_prop_r
        !io_target_data_provider TYPE REF TO /iwbep/if_v4_data_provider
        !ir_target_key_data      TYPE REF TO data
        !iv_is_expanded          TYPE abap_bool
        !iv_has_children         TYPE abap_bool
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Create request / response and inject expand information</p>
    METHODS expand_prep_request_response
      IMPORTING
        !ir_current_data_point       TYPE REF TO data
        !io_expand                   TYPE REF TO /iwbep/if_v4_expand_node
        !io_current_entity_type      TYPE REF TO /iwbep/if_v4_med_entity_type_r
        !io_current_entity_set       TYPE REF TO /iwbep/if_v4_med_entity_set_r
        !iv_is_cross_service_request TYPE abap_bool
      CHANGING
        !co_response                 TYPE REF TO /iwbep/cl_v4_response_info_pro
        !co_request                  TYPE REF TO /iwbep/cl_v4_request_info_pro .

    "! <p class="shorttext synchronized" lang="en">Read an entity and its children (for $expand)</p>
    METHODS expand_read_entity_tree
      IMPORTING
        !io_request  TYPE REF TO /iwbep/if_v4_requ_intm_tree_r
        !io_response TYPE REF TO /iwbep/if_v4_resp_intm_tree_r
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Read a list of entities and their children (for $expand)</p>
    METHODS expand_read_entity_tree_list
      IMPORTING
        !io_request  TYPE REF TO /iwbep/if_v4_requ_intm_tree_l
        !io_response TYPE REF TO /iwbep/if_v4_resp_intm_tree_l
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Get DPC for potential Cross Service Navigation</p>
    "!
    "! @parameter is_source_service_key   | <p class="shorttext synchronized" lang="en">Navigation Source Service Key</p>
    "! @parameter is_target_service_key   | <p class="shorttext synchronized" lang="en">Navigation Target Service Key</p>
    "! @parameter io_target_request_info  | <p class="shorttext synchronized" lang="en">V4 Request - Process Step - Initialize</p>
    "! @parameter ro_target_data_provider | <p class="shorttext synchronized" lang="en">Target data provider (changes in case of x-service navi)</p>
    "! @raising   /iwbep/cx_gateway       | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS get_dpc_for_cross_service
      IMPORTING
        !is_source_service_key         TYPE /iwbep/s_v4_med_service_key
        !is_target_service_key         TYPE /iwbep/s_v4_med_service_key
        !io_target_request_info        TYPE REF TO /iwbep/cl_v4_request_info_pro
      RETURNING
        VALUE(ro_target_data_provider) TYPE REF TO /iwbep/if_v4_data_provider
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Get reference of navigation property field in entity</p>
    "!
    "! @parameter ir_entity                | <p class="shorttext synchronized" lang="en">Entity data</p>
    "! @parameter iv_nav_property_name     | <p class="shorttext synchronized" lang="en">Internal name of the navigation property</p>
    "! @parameter IV_COMPLEX_PROPERT_PATH  | <p class="shorttext synchronized" lang="en">Complex property path to the navigation property</p>
    "! @parameter er_nav_property_data_ref | <p class="shorttext synchronized" lang="en">Navigation property field reference in specified entity</p>
    METHODS get_nav_property_ref_in_entity
      IMPORTING
        !ir_entity                TYPE REF TO data
        !iv_nav_property_name     TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !iv_complex_propert_path  TYPE /iwbep/if_v4_runtime_types=>ty_property_path OPTIONAL
      EXPORTING
        !er_nav_property_data_ref TYPE REF TO data
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Handle generic conditional read (if-none-match)</p>
    "!
    "! @parameter io_request_info_pro  | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @parameter io_response_info_pro | <p class="shorttext synchronized" lang="en">Class Response Info Pro</p>
    "! @parameter io_request           | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @raising   /iwbep/cx_gateway    | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS handle_generic_cond_read
      IMPORTING
        !io_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro
        !io_request           TYPE REF TO /iwbep/if_v4_requ_adv_read
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Handle generic $skip / $top processing</p>
    "!
    "! @parameter io_request        | <p class="shorttext synchronized" lang="en">Class Request Info Pro</p>
    "! @parameter io_response       | <p class="shorttext synchronized" lang="en">Class Response Info Pro</p>
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS handle_generic_skip_top
      IMPORTING
        !io_request  TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response TYPE REF TO /iwbep/cl_v4_response_info_pro
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Key data is initial?</p>
    "!
    "! @parameter ir_data       | <p class="shorttext synchronized" lang="en">Key data</p>
    "! @parameter rv_is_initial | <p class="shorttext synchronized" lang="en">Is initial?</p>
    METHODS is_data_initial
      IMPORTING
        !ir_data             TYPE REF TO data
      RETURNING
        VALUE(rv_is_initial) TYPE abap_bool .

    METHODS raise_nav_exception_with_key
      IMPORTING
        !it_navigation_step_key TYPE /iwbep/if_v4_request_info=>ty_t_nvp
        !iv_entity_type_name    TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
      RAISING
        /iwbep/cx_v4_runtime .

    "! <p class="shorttext synchronized" lang="en">Resolve Navigation</p>
    "!
    "! @parameter eo_target_data_provider | <p class="shorttext synchronized" lang="en">Target data provider (changes in case of x-service navi)</p>
    "! @parameter ev_has_no_target        | <p class="shorttext synchronized" lang="en">TRUE If data provider has no target</p>
    "! @parameter co_request              | <p class="shorttext synchronized" lang="en">Intermediate Request Info Read Tree</p>
    "! @raising   /iwbep/cx_gateway       | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS resolve_navigation
      IMPORTING
        !io_response             TYPE REF TO /iwbep/cl_v4_response_info_pro
      EXPORTING
        !eo_target_data_provider TYPE REF TO /iwbep/if_v4_data_provider
        !ev_has_no_target        TYPE abap_bool
      CHANGING
        !co_response             TYPE REF TO /iwbep/cl_v4_response_info_pro
        !co_request              TYPE REF TO /iwbep/cl_v4_request_info_pro
      RAISING
        /iwbep/cx_gateway .

ENDCLASS.



CLASS /IWBEP/CL_V4_ABS_DATA_PROVIDER IMPLEMENTATION.


  METHOD /iwbep/if_v4_dp_process_steps~commit.
***************************************************************************************
* If your application needs e.g. a COMMIT WORK AND WAIT you can overwrite this method *
***************************************************************************************
    COMMIT WORK.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~finalize_request ##needed.
***************************************************************************************
* Empty implementation - Usually there is no need to overwrite this method either     *
***************************************************************************************
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~initialize ##needed.
***************************************************************************************
* Empty implementation - Usually there is no need to overwrite this method either     *
***************************************************************************************
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~rollback.

    ROLLBACK WORK.                                     "#EC CI_ROLLBACK

  ENDMETHOD.


  METHOD apply_skip_top.

    DATA lv_lines       TYPE i.
    DATA lv_start_index TYPE i.


    IF iv_top = 0.
      CLEAR ct_data.
      RETURN.
    ENDIF.

    IF iv_skip > 0.
      DELETE ct_data FROM 1 TO iv_skip.
    ENDIF.

    lv_lines = lines( ct_data ).
    IF lv_lines > 0 AND iv_top > 0 AND iv_top < lv_lines.
      lv_start_index = iv_top + 1.
      DELETE ct_data FROM lv_start_index TO lv_lines.
    ENDIF.

  ENDMETHOD.


  METHOD check_modification_conditions.

    DATA:
      lo_request_base TYPE REF TO /iwbep/if_v4_request_info,
      lo_request      TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response     TYPE REF TO /iwbep/cl_v4_response_info_pro,
      ls_conditions   TYPE /iwbep/if_v4_request_info=>ty_s_conditions.


    lo_request_base = io_request->get_base_request_info( ).
    ls_conditions   = lo_request_base->get_conditions( ).

*      ASSERT ls_conditions-if_match_etag IS NOT INITIAL.

    create_request_response_pro(
      EXPORTING
        io_request  = io_request
        io_response = io_response
      IMPORTING
        eo_request  = lo_request
        eo_response = lo_response ).

    "Inherit all ToDo flags.
    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-condition ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-condition ).

    /iwbep/if_v4_dp_intermediate~check_modification_conditions(
      io_request  = lo_request
      io_response = lo_response ).

    lo_response->validate( ).

  ENDMETHOD.


  METHOD create_batch_packages.

    DATA:
      ls_batch_operation_info   TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      lv_new_batch_package_kind TYPE ty_batch_package_kind,
      lv_last_change_set_id     TYPE /iwbep/if_v4_request_info=>ty_change_set_id,
      lv_tabix                  TYPE sytabix.

    FIELD-SYMBOLS:
      <ls_batch_package> TYPE ty_s_batch_package.


    CLEAR et_batch_package.

    APPEND INITIAL LINE TO et_batch_package ASSIGNING <ls_batch_package>.

    LOOP AT it_batch_operation_info INTO ls_batch_operation_info.
      lv_tabix = sy-tabix.

*     Package kind
      CASE ls_batch_operation_info-operation_kind.
        WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity
        OR   /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list
        OR   /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function.

          lv_new_batch_package_kind = gcs_batch_package_kinds-read_operations.

        WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity
        OR   /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity
        OR   /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity
        OR   /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.

          IF ls_batch_operation_info-changeset_id IS NOT INITIAL.
            lv_new_batch_package_kind = gcs_batch_package_kinds-change_set.
          ELSE.
            lv_new_batch_package_kind = gcs_batch_package_kinds-change_operations.
          ENDIF.

        WHEN OTHERS.
          ASSERT ls_batch_operation_info-operation_kind IS NOT INITIAL.

          " unsupported operation
          RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
            EXPORTING
              textid         = /iwbep/cx_v4_runtime=>batch_operation_not_supported
              operation_kind = ls_batch_operation_info-operation_kind.

      ENDCASE.


*     Package assignment
      IF lv_tabix = 1.
        " start the first package
        <ls_batch_package>-kind = lv_new_batch_package_kind.
        lv_last_change_set_id = ls_batch_operation_info-changeset_id.

      ELSEIF <ls_batch_package>-kind              <> lv_new_batch_package_kind
      OR     ls_batch_operation_info-changeset_id <> lv_last_change_set_id.
        " if the kind of package changes or another change set starts, start a new package
        APPEND INITIAL LINE TO et_batch_package ASSIGNING <ls_batch_package>.

        <ls_batch_package>-kind                 = lv_new_batch_package_kind.
        lv_last_change_set_id                   = ls_batch_operation_info-changeset_id.

      ENDIF.

      " append the current operation to the current package
      <ls_batch_package>-number_of_operations = <ls_batch_package>-number_of_operations + 1.
      APPEND ls_batch_operation_info TO <ls_batch_package>-operations_info.

    ENDLOOP.

  ENDMETHOD.


  METHOD create_request_response_pro.

    DATA: lo_request_base  TYPE REF TO /iwbep/if_v4_request_info,
          lo_response_base TYPE REF TO /iwbep/if_v4_response_info.

    lo_request_base  = CAST /iwbep/cl_v4_request_info_pro( io_request )->get_base_request_info( ).
    lo_response_base = CAST /iwbep/cl_v4_response_info_pro( io_response )->get_base_response_info( ).

    eo_request = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( lo_request_base ).
    eo_response = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
                    EXPORTING
                      io_request_info      = lo_request_base
                      io_request_info_pro  = eo_request
                      io_response_info     = lo_response_base ).

  ENDMETHOD.


  METHOD execute_batch_changeset.

    DATA:
      lo_request                    TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_request_of_first_operation TYPE REF TO /iwbep/if_v4_request_info,
      lo_response                   TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_idp_response_repository    TYPE REF TO /iwbep/cl_v4_idp_response_repo,
      ls_operation                  TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
      ls_operation_info             TYPE /iwbep/if_v4_runtime_types=>ty_s_operation_info,
      ls_todo_list                  TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_list,
      ls_todo_list_changeset        TYPE /iwbep/if_v4_request_info=>ty_s_todo_list,
      lx_gateway                    TYPE REF TO /iwbep/cx_gateway.


    TRY.
        io_batch_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
        MOVE-CORRESPONDING ls_todo_list TO ls_todo_list_changeset.

        create_request_response_pro(
          EXPORTING
            io_request  = io_batch_request
            io_response = io_batch_response
          IMPORTING
            eo_request  = lo_request
            eo_response = lo_response ).

        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-batch-process_cs ).

        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-batch-process_cs ).
        lo_request->set_batch_operation_info( is_changeset_package-operations_info ).
        lo_request->set_request_info_pro_parent( CAST #( io_batch_request ) ).


        IF ls_todo_list-process-idempotency = abap_true. "At least one batch operation needs to be idempotent
          " All operations in a change set must have the same repeatability header
          " This is ensured in /IWBEP/CL_V4_REQUEST_INFO->/IWBEP/IF_V4_REQUEST_INFO~FINALIZE
          " So here we just check with the first request
          io_batch_request->get_operation(
            EXPORTING
              iv_operation_id = is_changeset_package-operations_info[ 1 ]-id
            IMPORTING
              es_operation    = ls_operation ).

          lo_request_of_first_operation = CAST /iwbep/cl_v4_request_info_pro( ls_operation-request )->get_base_request_info( ).

          IF lo_request_of_first_operation->is_idempotency_requested( ).
            ls_todo_list_changeset-process-idempotency = abap_true.
            lo_idp_response_repository = NEW #( lo_request_of_first_operation->get_idempotency_info( ) ).
            lo_response->set_idp_response_repository( lo_idp_response_repository ).

            IF lo_idp_response_repository->has_response( ).
              CAST /iwbep/cl_v4_response_info_pro( lo_response )->set_from_idp_repo_changeset( ).
              rv_is_successful = abap_true.
              RETURN.
            ENDIF.

          ELSE.
            ls_todo_list_changeset-process-idempotency = abap_false.

          ENDIF.

        ENDIF.

        lo_request->set_todos( ls_todo_list_changeset ).


        /iwbep/if_v4_dp_batch~process_change_set(
          EXPORTING
            io_request  = lo_request
            io_response = lo_response ).

        rv_is_successful = abap_true.


      CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
        /iwbep/cl_v4_logger=>log_bep_exception(
            iv_exception_category = lx_gateway->exception_category
            io_exception          = lx_gateway ).

        LOOP AT is_changeset_package-operations_info INTO ls_operation_info.
          TRY.
              io_batch_request->get_operation(
                EXPORTING
                  iv_operation_id = ls_operation_info-id
                IMPORTING
                  es_operation    = ls_operation ).
              ls_operation-response->set_gateway_exception( lx_gateway ).

            CATCH /iwbep/cx_gateway INTO lx_gateway.
              ASSERT 1 = 0. "Must not happen
          ENDTRY.
        ENDLOOP.

        rv_is_successful = abap_false.
    ENDTRY.

  ENDMETHOD.


  METHOD execute_batch_operation.

    DATA:
      ls_todo_list_btc_oper TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_todo_list,
      lo_request            TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response           TYPE REF TO /iwbep/cl_v4_response_info_pro.


    "Content ID referencing must be handled by redefining method /IWBEP/IF_V4_DP_BATCH~PROCESS_CHANGE_SET
    is_batch_operation-request->get_todos( IMPORTING es_todo_list = ls_todo_list_btc_oper ).
    IF ls_todo_list_btc_oper-process-content_id_ref = abap_true.
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_content_id
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-batch
          method             = '/IWBEP/IF_V4_DP_BATCH~PROCESS_CHANGE_SET'.
    ENDIF.


    lo_request  ?= is_batch_operation-request.
    lo_response ?= is_batch_operation-response.

    CASE is_batch_operation-kind.
      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).

        /iwbep/if_v4_dp_advanced~read_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list ).

        /iwbep/if_v4_dp_advanced~read_entity_list(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).


      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-action ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-action ).

        /iwbep/if_v4_dp_advanced~execute_action(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-function ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-function ).

        /iwbep/if_v4_dp_advanced~execute_function(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-create ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-create ).

        /iwbep/if_v4_dp_advanced~create_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update ).

        /iwbep/if_v4_dp_advanced~update_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity.
        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-delete ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-delete ).

        /iwbep/if_v4_dp_advanced~delete_entity(
          EXPORTING
            io_request        = lo_request
            io_response       = lo_response ).

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
          EXPORTING
            exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider.

    ENDCASE.

    " We validate here so that a corresponding error is triggered closely to the operation execution
    lo_response->validate( ).

  ENDMETHOD.


  METHOD expand_get_expand_details.

    DATA: lo_expand             TYPE REF TO /iwbep/cl_v4_expand_node,
          ls_source_service_key TYPE /iwbep/s_v4_med_service_key,
          ls_target_service_key TYPE /iwbep/s_v4_med_service_key.


    lo_expand ?= io_expand.

    CLEAR ev_complex_property_path.
    CLEAR ev_navigation_prop_name.

    eo_navigation_property       = io_expand->get_navigation_property( ).

    lo_expand->/iwbep/if_v4_expand_node~get_navigation_property_name(
      IMPORTING
        ev_navigation_prop_name  = ev_navigation_prop_name
        ev_complex_property_path = ev_complex_property_path ).

    ev_navigation_prop_name  = eo_navigation_property->get_internal_name( ).
    eo_source_entity_type    = lo_expand->get_source_entity_type( ).
    io_expand->has_children( IMPORTING ev_has_children = ev_has_children ).
    lo_expand->is_expanded( IMPORTING ev_is_expanded = ev_is_expanded ).
    ev_is_expanded_completly = lo_expand->is_expanded_completly( ).
    eo_target_entity_type    = eo_navigation_property->get_target_entity_type( ).
    eo_target_entity_set     = lo_expand->get_target_entity_set( ).


    "Either the current data provider or XService data provider
    eo_navigation_property->get_source_service_key( IMPORTING es_service_key = ls_source_service_key ).
    eo_navigation_property->get_target_service_key( IMPORTING es_service_key = ls_target_service_key ).

    eo_target_data_provider = get_dpc_for_cross_service(
      io_target_request_info  = io_request
      is_source_service_key   = ls_source_service_key
      is_target_service_key   = ls_target_service_key ).

    IF ls_source_service_key <> ls_target_service_key.
      ev_is_cross_service_request = abap_true.
    ENDIF.

  ENDMETHOD.


  METHOD expand_get_target_key_data.

    DATA:
      lo_request             TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response            TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lv_target_multiplicity TYPE /iwbep/if_v4_med_types=>ty_e_med_nav_multiplicity.


    create_request_response_pro(
      EXPORTING
        io_request  = io_request
        io_response = io_response
      IMPORTING
        eo_request  = lo_request
        eo_response = lo_response ).

    " $expand does not support navigation properties in complex types at the moment
    lo_request->set_reference_nav_prop(
      io_navigation_prop       = io_nav_property
      iv_complex_property_path = iv_complex_property_path ).
    lo_request->set_entity_type( io_source_entity_type ).
    lo_request->set_key_data_pro( ir_current_entity ).


    lv_target_multiplicity = io_nav_property->get_target_multiplicity( ).

    IF ( lv_target_multiplicity EQ /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_many_optional )
    OR ( lv_target_multiplicity EQ /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one_optional ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_l ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_l ).

      /iwbep/if_v4_dp_basic~read_ref_target_key_data_list(
        io_request        = lo_request
        io_response       = lo_response ).

    ELSE.
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_r ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_r ).

      /iwbep/if_v4_dp_basic~read_ref_target_key_data(
        io_request        = lo_request
        io_response       = lo_response ).

    ENDIF.

    lo_response->validate( ).
    er_target_key_data = lo_response->get_target_key_data_pro( ).

  ENDMETHOD.


  METHOD expand_next_nodes.

    DATA: lv_target_multiplicity TYPE /iwbep/if_v4_med_element=>ty_e_med_nav_multiplicity.


    lv_target_multiplicity = io_nav_property->get_target_multiplicity( ).

    IF ( lv_target_multiplicity = /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_many_optional )
    OR ( lv_target_multiplicity = /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one_optional ).
      io_request->set_key_data_list_pro( ir_target_key_data ).

      " Is normal or advanced processing needed?
      IF io_request->is_cross_service_request( ).
        io_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list ).
        io_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list ).

        io_target_data_provider->/iwbep/if_v4_dp_advanced~read_entity_list(
          io_request        = io_request
          io_response       = io_response ).

      ELSE.
        IF ( iv_is_expanded = abap_false ) AND ( iv_has_children = abap_true ) .
          io_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_l ).
          io_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-tree_l ).

          io_target_data_provider->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
            io_request = io_request
            io_response = io_response ).
          "No validation here as the provider does not have to do any expand himself
        ENDIF.

        CAST /iwbep/cl_v4_abs_data_provider( io_target_data_provider )->expand_read_entity_tree_list(
          io_request = io_request
          io_response = io_response ).
      ENDIF.


    ELSE. "1:1
      io_request->set_key_data_pro( ir_target_key_data ).

      " Is normal or advanced processing needed?
      IF io_request->is_cross_service_request( ).
        io_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
        io_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).

        io_target_data_provider->/iwbep/if_v4_dp_advanced~read_entity(
          io_request        = io_request
          io_response       = io_response ).

      ELSE. " Normal expand processing
        IF ( iv_is_expanded = abap_false ) AND ( iv_has_children = abap_true ) .
          io_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_r ).
          io_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-tree_r ).

          io_target_data_provider->/iwbep/if_v4_dp_intermediate~read_entity_tree(
            io_request  = io_request
            io_response = io_response ).
          "No validation here as the provider does not have to do any expand himself
        ENDIF.

        CAST /iwbep/cl_v4_abs_data_provider( io_target_data_provider )->expand_read_entity_tree(
          io_request  = io_request
          io_response = io_response ).
      ENDIF.
    ENDIF.


  ENDMETHOD.


  METHOD expand_prep_request_response.

    ASSERT ir_current_data_point IS BOUND.

    create_request_response_pro(
       EXPORTING
         io_request  = co_request
         io_response = co_response
       IMPORTING
         eo_request  = co_request
         eo_response = co_response ).

    co_request->set_entity_type( io_current_entity_type ).
    co_request->set_source_expand_node( io_expand ).
    co_request->set_entity_set( io_current_entity_set ).

    co_response->set_busi_data_pointer( ir_current_data_point ).


    " Cross service specific settings
    IF iv_is_cross_service_request = abap_true.
      co_request->set_is_cross_service_request( abap_true ).

      " Navigation was already resolved hence skip resolving in next advance
      co_request->set_is_navigation_resolved( abap_true ).
    ENDIF.

  ENDMETHOD.


  METHOD expand_read_entity_tree.

    DATA:
      lo_expand                   TYPE REF TO /iwbep/if_v4_expand_node,
      lo_nav_property             TYPE REF TO /iwbep/if_v4_med_nav_prop_r,
      lo_request                  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response                 TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_source_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_target_data_provider     TYPE REF TO /iwbep/if_v4_data_provider, "me or x-service DPC
      lo_target_entity_set        TYPE REF TO /iwbep/if_v4_med_entity_set_r,
      lo_target_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lr_entity                   TYPE REF TO data,
      lr_nav_property_data        TYPE REF TO data,
      lr_target_key_data          TYPE REF TO data,
      lt_expand                   TYPE /iwbep/if_v4_expand_node=>ty_t_expand_node,
      lv_complex_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_property_path,
      lv_has_children             TYPE abap_bool,
      lv_is_cross_service_request TYPE abap_bool,
      lv_is_expanded              TYPE abap_bool,
      lv_is_expanded_completly    TYPE abap_bool,
      lv_nav_property_name        TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name.



    lo_request  ?= io_request.
    lo_response ?= io_response.

    IF ( lo_response->get_has_busi_data( ) = abap_false ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).

      /iwbep/if_v4_dp_basic~read_entity(
        io_request        = lo_request
        io_response       = lo_response ).

      lo_response->validate( ).
    ENDIF.

    " if there is no data for the current level then we are done
    IF ( lo_response->get_is_busi_data_initial( ) = abap_false ).
      RETURN.
    ENDIF.

    lr_entity = lo_response->get_busi_data_pro_sub_tree( ).


    " Next level - the expand node list of the current level
    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_r ).
    io_request->get_expand_tree_list( IMPORTING et_expand_root_node = lt_expand ).

    LOOP AT lt_expand INTO lo_expand.
      expand_get_expand_details(
        EXPORTING
          io_expand                   = lo_expand
          io_request                  = lo_request
        IMPORTING
          eo_navigation_property      = lo_nav_property
          ev_navigation_prop_name     = lv_nav_property_name
          ev_complex_property_path    = lv_complex_property_path
          eo_source_entity_type       = lo_source_entity_type
          eo_target_entity_type       = lo_target_entity_type
          eo_target_entity_set        = lo_target_entity_set
          eo_target_data_provider     = lo_target_data_provider
          ev_has_children             = lv_has_children
          ev_is_expanded              = lv_is_expanded
          ev_is_expanded_completly    = lv_is_expanded_completly
          ev_is_cross_service_request = lv_is_cross_service_request ).

      IF ( lv_is_expanded_completly = abap_true ).
        CAST /iwbep/cl_v4_expand_node( lo_expand )->validate( ).
        CONTINUE.
      ENDIF.


      " If the current expand node has not been expanded yet get the corresponding target key data
      " from the current provider (cross DPC is not yet relevant).
      IF ( lv_is_expanded = abap_false ).
        expand_get_target_key_data(
          EXPORTING
            io_request               = lo_request
            io_response              = lo_response
            io_nav_property          = lo_nav_property
            iv_complex_property_path = lv_complex_property_path
            io_source_entity_type    = lo_source_entity_type
            ir_current_entity        = lr_entity
          IMPORTING
            er_target_key_data       = lr_target_key_data ).

        IF is_data_initial( lr_target_key_data ) = abap_true.
          CONTINUE. " entity has no targets -> next expand
        ENDIF.
      ENDIF.


      " Set the current data pointer lr_nav_property_data
      get_nav_property_ref_in_entity(
        EXPORTING
          ir_entity                = lr_entity
          iv_nav_property_name     = lv_nav_property_name
          iv_complex_propert_path  = lv_complex_property_path
        IMPORTING
          er_nav_property_data_ref = lr_nav_property_data ).


      " If the current expand node has been expanded get the corresponding target key data from the current data pointer
      IF ( lv_is_expanded = abap_true ).
        IF ( is_data_initial( lr_nav_property_data ) = abap_true ).
          CONTINUE. " current entity has no data for current nav property -> next entity
        ELSE.
          lr_target_key_data = lr_nav_property_data.
        ENDIF.
      ENDIF.


      expand_prep_request_response(
        EXPORTING
            ir_current_data_point       = lr_nav_property_data
            io_current_entity_type      = lo_target_entity_type
            io_expand                   = lo_expand
            io_current_entity_set       = lo_target_entity_set
            iv_is_cross_service_request = lv_is_cross_service_request
        CHANGING
            co_request                  = lo_request
            co_response                 = lo_response ).

      IF ( lv_is_expanded = abap_true ).
        lo_response->set_has_busi_data( abap_true ).
      ENDIF.


      expand_next_nodes(
        EXPORTING
          io_request              = lo_request
          io_response             = lo_response
          io_nav_property         = lo_nav_property
          io_target_data_provider = lo_target_data_provider
          ir_target_key_data      = lr_target_key_data
          iv_is_expanded          = lv_is_expanded
          iv_has_children         = lv_has_children ).

    ENDLOOP. "LOOP AT lt_expand

  ENDMETHOD.


  METHOD expand_read_entity_tree_list.

    DATA:
      lt_expand                   TYPE /iwbep/if_v4_expand_node=>ty_t_expand_node,
      lo_request                  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response                 TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_nav_property             TYPE REF TO /iwbep/if_v4_med_nav_prop_r,
      lo_source_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_target_entity_type       TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_target_entity_set        TYPE REF TO /iwbep/if_v4_med_entity_set_r,
      lo_expand                   TYPE REF TO /iwbep/if_v4_expand_node,
      lr_entity_list              TYPE REF TO data,
      lr_entity                   TYPE REF TO data,
      lr_target_key_data          TYPE REF TO data,
      lr_nav_property_data        TYPE REF TO data,
      lv_nav_property_name        TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      lv_complex_property_path    TYPE /iwbep/if_v4_runtime_types=>ty_property_path,
      lo_target_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lv_is_expanded              TYPE abap_bool,
      lv_is_expanded_completly    TYPE abap_bool,
      lv_has_children             TYPE abap_bool,
      lv_is_cross_service_request TYPE abap_bool.

    FIELD-SYMBOLS:
      <lt_entity_list>         TYPE STANDARD TABLE.



    lo_request  ?= io_request.
    lo_response ?= io_response.


    IF ( lo_response->get_has_busi_data( ) = abap_false ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-list ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-list ).

      /iwbep/if_v4_dp_basic~read_entity_list(
        io_request  = lo_request
        io_response = lo_response ).

      lo_response->validate( ).
      handle_generic_skip_top(
        io_request = lo_request
        io_response = lo_response ).
    ENDIF.


    " if there is no data for the current level then we are done
    IF ( lo_response->get_is_busi_data_initial( ) = abap_false ).
      RETURN.
    ENDIF.

    lr_entity_list = lo_response->get_busi_data_pro_sub_tree( ).
    ASSIGN lr_entity_list->* TO <lt_entity_list>.  " current header data


*   Next level - the expand node list of the current level
    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_l ).
    io_request->get_expand_tree_list( IMPORTING et_expand_root_node = lt_expand ).

    LOOP AT lt_expand INTO lo_expand.
      expand_get_expand_details(
        EXPORTING
          io_expand                   = lo_expand
          io_request                  = lo_request
        IMPORTING
          eo_navigation_property      = lo_nav_property
          ev_navigation_prop_name     = lv_nav_property_name
          ev_complex_property_path    = lv_complex_property_path
          eo_source_entity_type       = lo_source_entity_type
          eo_target_entity_type       = lo_target_entity_type
          eo_target_entity_set        = lo_target_entity_set
          eo_target_data_provider     = lo_target_data_provider
          ev_has_children             = lv_has_children
          ev_is_expanded              = lv_is_expanded
          ev_is_expanded_completly    = lv_is_expanded_completly
          ev_is_cross_service_request = lv_is_cross_service_request ).

      IF ( lv_is_expanded_completly = abap_true ).
        CAST /iwbep/cl_v4_expand_node( lo_expand )->validate( ).
        CONTINUE.
      ENDIF.


      LOOP AT <lt_entity_list> REFERENCE INTO lr_entity.

        " If the current expand node has not been expanded yet get the corresponding target key data from the provider
        IF ( lv_is_expanded = abap_false ).
          expand_get_target_key_data(
             EXPORTING
               io_request               = lo_request
               io_response              = lo_response
               io_nav_property          = lo_nav_property
               iv_complex_property_path = lv_complex_property_path
               io_source_entity_type    = lo_source_entity_type
               ir_current_entity        = lr_entity
             IMPORTING
               er_target_key_data       = lr_target_key_data ).

          IF is_data_initial( lr_target_key_data ) = abap_true.
            CONTINUE. " current entity has no targets -> next entity
          ENDIF.
        ENDIF.


        " Set the current data pointer lr_nav_property_data
        get_nav_property_ref_in_entity(
          EXPORTING
            ir_entity                = lr_entity
            iv_nav_property_name     = lv_nav_property_name
            iv_complex_propert_path  = lv_complex_property_path
          IMPORTING
            er_nav_property_data_ref = lr_nav_property_data ).


        " If the current expand node has been expanded get the corresponding target key data from the current data pointer
        IF ( lv_is_expanded = abap_true ).
          IF ( is_data_initial( lr_nav_property_data ) = abap_true ).
            CONTINUE. " current entity has no data for current nav property -> next entity
          ELSE.
            lr_target_key_data = lr_nav_property_data.
          ENDIF.
        ENDIF.


        expand_prep_request_response(
          EXPORTING
              ir_current_data_point       = lr_nav_property_data
              io_current_entity_type      = lo_target_entity_type
              io_expand                   = lo_expand
              io_current_entity_set       = lo_target_entity_set
              iv_is_cross_service_request = lv_is_cross_service_request
          CHANGING
              co_request  = lo_request
              co_response = lo_response ).

        IF ( lv_is_expanded = abap_true ).
          lo_response->set_has_busi_data( abap_true ).
        ENDIF.

        expand_next_nodes(
          EXPORTING
            io_request              = lo_request
            io_response             = lo_response
            io_nav_property         = lo_nav_property
            io_target_data_provider = lo_target_data_provider
            ir_target_key_data      = lr_target_key_data
            iv_is_expanded          = lv_is_expanded
            iv_has_children         = lv_has_children ).


      ENDLOOP. "LOOP AT <lt_entity_list>


    ENDLOOP. "LOOP AT lt_expand

  ENDMETHOD.


  METHOD get_dpc_for_cross_service.

    DATA lo_service_registry TYPE REF TO /iwbep/cl_v4_registry.


    " note: on a CP call the service key information is not set!

    IF ( is_source_service_key = is_target_service_key ).
      ro_target_data_provider = me.

    ELSE.

      ASSERT is_source_service_key IS NOT INITIAL.
      ASSERT is_target_service_key IS NOT INITIAL.

      io_target_request_info->set_leading_service( is_target_service_key ).
      lo_service_registry     = /iwbep/cl_v4_registry=>get_instance( ).
      ro_target_data_provider = lo_service_registry->get_data_provider(
                                  is_service_key        = is_target_service_key
                                  io_request_info       = io_target_request_info ).

    ENDIF.

  ENDMETHOD.


  METHOD get_nav_property_ref_in_entity.

    DATA:
      lv_nav_property_path   TYPE string.

    FIELD-SYMBOLS:
      <ls_entity>            TYPE data,
      <la_nav_property_data> TYPE data. " table or structure

    ASSERT ir_entity IS BOUND.
    ASSIGN ir_entity->* TO <ls_entity>.

    IF iv_complex_propert_path IS INITIAL.
      lv_nav_property_path = iv_nav_property_name.
    ELSE.
      lv_nav_property_path = iv_complex_propert_path && /iwbep/if_v4_med_types=>gcs_med_path_separators-internal && iv_nav_property_name.
    ENDIF.

    ASSIGN COMPONENT lv_nav_property_path OF STRUCTURE <ls_entity> TO <la_nav_property_data>.
    ASSERT sy-subrc EQ 0.

    GET REFERENCE OF <la_nav_property_data> INTO er_nav_property_data_ref.

  ENDMETHOD.


  METHOD handle_generic_cond_read.

    DATA:
      ls_done_list  TYPE /iwbep/if_v4_request_info=>ty_s_todo_process_list,
      ls_conditions TYPE /iwbep/if_v4_runtime_types=>ty_s_read_conditions,
      lv_etag       TYPE string.


    io_response_info_pro->get_is_done( IMPORTING es_done_list = ls_done_list ).

*   The provider has not taken care of the ETag himself
    IF ( ls_done_list-if_none_match_etag EQ abap_false ).
      io_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
      io_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).
      io_request->get_conditions( IMPORTING es_conditions = ls_conditions ).

      io_response_info_pro->get_busi_data_property_pro(
          EXPORTING
            io_property    = io_response_info_pro->get_base_response_info( )->get_etag_property_pro( io_request_info_pro->get_source_entity_type( ) )
          IMPORTING
            ev_property_data = lv_etag ).

      IF ls_conditions-if_none_match_etag = lv_etag.
        io_response_info_pro->set_is_not_modified( ).
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD handle_generic_skip_top.

    DATA ls_done_list          TYPE /iwbep/if_v4_request_info=>ty_s_todo_process_list.
    DATA ls_todo_list          TYPE /iwbep/if_v4_request_info=>ty_s_todo_list.
    DATA lv_skip               TYPE i VALUE -1.
    DATA lv_top                TYPE i VALUE -1.
    DATA lr_entity_list        TYPE REF TO data.

    FIELD-SYMBOLS <lt_entity_list> TYPE STANDARD TABLE.


    io_response->get_is_done( IMPORTING es_done_list = ls_done_list ).
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    IF ( ls_done_list-skip = abap_false AND ls_todo_list-process-skip = abap_true ) OR
       ( ls_done_list-top = abap_false AND ls_todo_list-process-top = abap_true ).

      io_request->get_skip( IMPORTING ev_skip = lv_skip ).
      io_request->get_top( IMPORTING ev_top = lv_top ).

      lr_entity_list = io_response->get_busi_data_pro_sub_tree( ).
      ASSIGN lr_entity_list->* TO <lt_entity_list>.
      apply_skip_top(
        EXPORTING
          iv_skip = lv_skip
          iv_top  = lv_top
        CHANGING
          ct_data = <lt_entity_list> ).

    ENDIF.

  ENDMETHOD.


  METHOD is_data_initial.

    DATA lo_type_descr TYPE REF TO cl_abap_typedescr.
    DATA lv_lines      TYPE i.

    FIELD-SYMBOLS <lt_table> TYPE STANDARD TABLE.


    rv_is_initial = abap_true.

    IF ir_data IS BOUND.
      lo_type_descr = cl_abap_typedescr=>describe_by_data_ref( ir_data ).
      IF lo_type_descr->kind = cl_abap_typedescr=>kind_table.
        ASSIGN ir_data->* TO <lt_table>.
        lv_lines = lines( <lt_table> ).
        IF lv_lines > 0.
          rv_is_initial = abap_false.
        ENDIF.
      ELSE.
        rv_is_initial = abap_false.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD raise_nav_exception_with_key.
    DATA: lv_key TYPE string,
          ls_nvp TYPE /iwbep/if_v4_request_info=>ty_s_nvp.

    LOOP AT it_navigation_step_key INTO ls_nvp.
      IF sy-tabix <> 1.
        lv_key = lv_key && ',' .
      ENDIF.
      lv_key = lv_key  &&  ls_nvp-name  &&  '='  && ls_nvp-value .
    ENDLOOP.

    RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
      EXPORTING
        textid             = /iwbep/cx_v4_runtime=>entity_not_found
        exception_category = /iwbep/cx_v4_runtime=>gcs_excep_categories-client
        http_status_code   = /iwbep/cx_v4_runtime=>gcs_http_status_codes-not_found
        entity_type_name   = CONV #( iv_entity_type_name )
        navigation_key     = lv_key.

  ENDMETHOD.


  METHOD resolve_navigation.

    DATA:
      lo_entity_set              TYPE REF TO /iwbep/if_v4_med_entity_set_r,
      lo_entity_type             TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_model_group             TYPE REF TO /iwbep/if_v4_med_model_group,
      lo_nav_prop                TYPE REF TO /iwbep/if_v4_med_nav_prop_r,
      lo_request                 TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_request_base            TYPE REF TO /iwbep/if_v4_request_info,
      lo_response                TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_target_data_provider_cl TYPE REF TO /iwbep/cl_v4_abs_data_provider,
      lr_data                    TYPE REF TO data,
      ls_navigation_step         TYPE /iwbep/if_v4_request_info=>ty_s_navigation_step,
      ls_previous_step           TYPE /iwbep/if_v4_request_info=>ty_s_navigation_step,
      lt_navigation_step         TYPE /iwbep/if_v4_request_info=>ty_t_navigation_step,
      lv_complex_prop_path       TYPE /iwbep/if_v4_runtime_types=>ty_property_path,
      lv_entity_type_name        TYPE string,
      lv_has_no_target_keys      TYPE abap_bool,
      lv_navigation_step_count   TYPE i,
      lv_navigation_step_index   TYPE i.

    FIELD-SYMBOLS:
      <lt_data>                  TYPE STANDARD TABLE.



    CLEAR eo_target_data_provider.
    CLEAR ev_has_no_target.

    lo_request_base         = co_request->get_base_request_info( ).
    lo_model_group          = lo_request_base->get_model_group( ).

    co_request->get_navigation_path_raw( IMPORTING et_navigation_step = lt_navigation_step ).
    lv_navigation_step_count = lines( lt_navigation_step ).

    co_request->get_last_resolved_navi_step(
      IMPORTING
        es_navigation_step       = ls_previous_step
        ev_navigation_step_index = lv_navigation_step_index ).


    co_request->set_is_cross_service_request( abap_false ).
    eo_target_data_provider = lo_target_data_provider_cl = me.


    IF ( lv_navigation_step_count = 0 )                                     " Navigation Resolved in case of x-service
    OR ( lv_navigation_step_count = 1  AND  lv_navigation_step_index = 0 )  " A request without navigation
    OR ( co_request->is_navigation_resolved( ) ).                           " The navigation has been resolved and now we are here because of an x-service EXPAND
      RETURN.
    ENDIF.


    lo_entity_type  = co_request->get_source_entity_type( ).
    lo_request      = co_request.
    lo_response     = co_response.


    LOOP AT lt_navigation_step INTO ls_navigation_step.
      lv_navigation_step_index = lv_navigation_step_index + 1.

      IF lv_navigation_step_index = 1.
        ls_previous_step = ls_navigation_step.

      ELSE. "index > 1
        IF ls_navigation_step-type_kind EQ /iwbep/if_v4_med_element=>kind_action
        OR ls_navigation_step-type_kind EQ /iwbep/if_v4_med_element=>kind_function.
          " Composable functions are not supported - we must only get here if this function/action is the last navigation step
          ASSERT lv_navigation_step_count = sy-tabix.

          " Simple bound action without addtional navigation - e.g. TEAMS(1)/IncreaseBudget()
          IF lv_navigation_step_index EQ 2.
            " lo_entity_type is either filled with source or the current nav prop entity
            lo_request->set_entity_type( lo_entity_type ).

            " Bound operation on single entity (otherwise on entity list)
            IF ls_previous_step-key IS NOT INITIAL.
              "Get key data from the REQUEST navigation step - and not from the previous navigation RESPONSE
              lo_request->set_key_data_tab( ls_previous_step-key ).
            ENDIF.

            "ELSE. We have resolved the navigation and the information has already been copied over from the previous navigation RESPONSE
          ENDIF.


        ELSEIF ls_navigation_step-type_kind EQ /iwbep/if_v4_med_element=>kind_entity_type.
          lo_nav_prop ?= lo_entity_type->/iwbep/if_v4_med_struc_type_r~get_property_by_path( ls_navigation_step-nav_prop_path_from_prev_step ).

          " If it's not containment navigation, a container element of type entity set must be defined;
          " this is a requirement from the GW-RT (if not wanted you can implement "ADVANCED" API instead)
          " Compare to /IWBEP/IF_V4_MED_ENTITY_SET->ADD_NAVIGATION_PROP_BINDING
          IF  ls_navigation_step-container_element_kind NE /iwbep/if_v4_med_element=>kind_entity_set
          AND lo_nav_prop->is_containment_navigation( ) EQ abap_false.
            RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
              EXPORTING
                textid                   = /iwbep/cx_v4_runtime=>npb_for_np_missing
                navigation_property_name = lo_nav_prop->get_internal_name( ).
          ENDIF.

          lv_complex_prop_path = substring_before(
            val = ls_navigation_step-nav_prop_path_from_prev_step
            sub = /iwbep/if_v4_med_types=>gcs_med_path_separators-internal
            occ = -1 ).

          lo_request->set_reference_nav_prop(
            io_navigation_prop       = lo_nav_prop
            iv_complex_property_path = lv_complex_prop_path ).

          IF ls_navigation_step-key IS NOT INITIAL.
            lo_request->set_reference_target_key( it_key = ls_navigation_step-key ).
          ENDIF.

          IF ls_navigation_step-multiplicity EQ /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one.
            lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_r ).
            lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_r ).

            lo_target_data_provider_cl->/iwbep/if_v4_dp_basic~read_ref_target_key_data(
                        io_request        = lo_request
                        io_response       = lo_response ).

            lo_response->validate( ).

          ELSE. "0..1 or 0..N
            lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_l ).
            lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_l ).
            lo_target_data_provider_cl->/iwbep/if_v4_dp_basic~read_ref_target_key_data_list(
              io_request        = lo_request
              io_response       = lo_response ).

            lo_response->validate( ).

            "Check for target keys
            lo_response->get_has_no_target_keys( IMPORTING ev_has_no_target_keys = lv_has_no_target_keys ).
            IF lv_has_no_target_keys = abap_true.

              IF lv_navigation_step_count > lv_navigation_step_index.
                "Navigation steps left, so return 404
                lv_entity_type_name = ls_navigation_step-type_name.
                RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
                  EXPORTING
                    textid             = /iwbep/cx_v4_runtime=>entity_not_found
                    exception_category = /iwbep/cx_v4_runtime=>gcs_excep_categories-client
                    http_status_code   = /iwbep/cx_v4_runtime=>gcs_http_status_codes-not_found
                    entity_type_name   = lv_entity_type_name.

              ELSEIF ls_navigation_step-key IS NOT INITIAL.
                raise_nav_exception_with_key( it_navigation_step_key = ls_navigation_step-key
                                              iv_entity_type_name    = ls_navigation_step-type_name ).

              ELSE.
                "No target provided by data provider so stop further processing (will result in 204)
                "Explicitly no eo_target_data_provider is returned
                ev_has_no_target = abap_true.
                RETURN.
              ENDIF.

            ENDIF.
          ENDIF.


          lr_data = lo_response->get_target_key_data_pro( ).

          create_request_response_pro(
            EXPORTING
              io_request  = co_request
              io_response = co_response
            IMPORTING
              eo_request  = lo_request
              eo_response = lo_response ).


          IF ls_navigation_step-multiplicity EQ /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one.
            lo_request->set_key_data_pro( lr_data ).

          ELSE.
            ASSIGN lr_data->* TO <lt_data>.

            IF ls_navigation_step-key IS INITIAL.
              "no keys in navigation path
              lo_request->set_key_data_list_pro( lr_data ).

            ELSE.
              "Keys in navigation path, for example /TEAMS('TEAM_01')/TEAM_2_EMPLOYEES('0003')
              IF lines( <lt_data> ) NE 1.
                RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
                  EXPORTING
                    textid             = /iwbep/cx_v4_runtime=>more_then_one_tgt_key_provided
                    exception_category = /iwbep/cx_v4_runtime=>gcs_excep_categories-client.
              ENDIF.

              READ TABLE <lt_data> REFERENCE INTO lr_data INDEX 1.
              lo_request->set_key_data_pro( lr_data ).

            ENDIF.

          ENDIF.


          lo_entity_type = lo_nav_prop->get_target_entity_type( ).
          lo_request->set_entity_type( lo_entity_type ).

          IF ls_navigation_step-container_element_kind EQ /iwbep/if_v4_med_element=>kind_entity_set.
            ASSERT NOT ls_navigation_step-container_element_name IS INITIAL.
            lo_entity_set = lo_model_group->get_entity_set(
                    is_service_key     = ls_navigation_step-service_key
                    iv_entity_set_name = ls_navigation_step-container_element_name ).
            lo_request->set_entity_set( lo_entity_set ).
          ENDIF.


        ELSE. "ls_navigation_step-type_kind <> action/function/entity
          ASSERT 1 = 0. "Not supported navigation step

        ENDIF.


        " Next target provider needs to be executed as cross service
        IF ls_previous_step-service_key <> ls_navigation_step-service_key.
          lo_target_data_provider_cl ?= lo_target_data_provider_cl->get_dpc_for_cross_service(
              io_target_request_info  = lo_request
              is_source_service_key   = ls_previous_step-service_key
              is_target_service_key   = ls_navigation_step-service_key ).

          lo_request->set_is_cross_service_request( abap_true ).

          EXIT. "TENNIE
        ENDIF.


        " already processed navigation steps.
        ls_previous_step = ls_navigation_step.

      ENDIF.

    ENDLOOP.


    lo_request->set_navigation_step_index( lv_navigation_step_index ).

    ASSERT ev_has_no_target EQ abap_false.

    IF io_response <> lo_response. "Not always TRUE for actions
      io_response->set_response_info_pro_child( lo_response ).
    ENDIF.

    eo_target_data_provider = lo_target_data_provider_cl.
    co_request              = lo_request.
    co_response             = lo_response.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~read_entity_tree_list ##NEEDED.

*   method may be overwritten to implement application specific expand handling

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~create_entity.

    DATA:
      lo_request_base         TYPE REF TO /iwbep/if_v4_request_info,
      lo_request              TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response             TYPE REF TO /iwbep/cl_v4_response_info_pro,
      ls_todo_list_orig       TYPE /iwbep/if_v4_requ_adv_create=>ty_s_todo_list,
      ls_todo_list            TYPE /iwbep/if_v4_request_info=>ty_s_todo_list,
      lt_navigation_prop_path TYPE /iwbep/if_v4_runtime_types=>ty_t_navigation_prop_w_path,
      lo_src_entity_type      TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_nav_prop             TYPE REF TO /iwbep/if_v4_med_nav_prop_r,
      lt_ref_target_keys      TYPE /iwbep/if_v4_request_info=>ty_s_reference_data-entities_keys,
      lt_key                  TYPE /iwbep/if_v4_request_info=>ty_t_nvp,
      lr_data                 TYPE REF TO data.

    FIELD-SYMBOLS:
      <ls_navigation_prop_path>  TYPE /iwbep/if_v4_runtime_types=>ty_s_navigation_prop_w_path.



    lo_request      ?= io_request.
    lo_response     ?= io_response.
    lo_request_base  = lo_request->get_base_request_info( ).

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list_orig ).


*   Check
    IF ls_todo_list_orig-process-navigation     = abap_true
    OR ls_todo_list_orig-process-deep_busi_data = abap_true
    OR ls_todo_list_orig-process-expand         = abap_true.
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~CREATE_ENTITY'.
    ENDIF.


*   CREATE Business data
    ls_todo_list-process-busi_data         = ls_todo_list_orig-process-busi_data.
    ls_todo_list-process-partial_busi_data = ls_todo_list_orig-process-partial_busi_data.

    IF ( ls_todo_list_orig-return-busi_data = abap_true )
    OR ( ls_todo_list_orig-process-target_key_data = abap_true ).
      ls_todo_list-return-busi_data = abap_true.
    ENDIF.

    lo_request->set_todos( ls_todo_list ).


    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-create ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-create ).

    /iwbep/if_v4_dp_basic~create_entity(
        io_request  = lo_request
        io_response = lo_response ).


*   CREATE references
    IF ( ls_todo_list_orig-process-target_key_data = abap_true ).
      " The /IWBEP/IF_V4_DP_BASIC~CREATE_ENTITY was not the final request - so we have to validate it before we continue
      " Otherwise the validation is done in /IWBEP/CL_V4_LOCAL_DP_PROXY
      lo_response->validate( ).

      "Set the request / response back to ADVANCED~CREATE as we are accessing the interface now ourself
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-create ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-create ).

      lr_data = lo_response->get_busi_data_pro( ).
      io_request->get_ref_nav_props( IMPORTING et_navigation_prop_path = lt_navigation_prop_path ).
      lo_src_entity_type = lo_request_base->get_source_entity_type( ).

      create_request_response_pro(
          EXPORTING
            io_request  = io_request
            io_response = io_response
          IMPORTING
            eo_request  = lo_request
            eo_response = lo_response ).

      lo_request->set_key_data_pro( ir_key_data = lr_data ).

      CLEAR ls_todo_list.
      ls_todo_list-process-source_key_data = abap_true.
      ls_todo_list-process-target_key_data = abap_true.

      lo_request->set_todos( ls_todo_list ).

      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_c ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_c ).

      LOOP AT lt_navigation_prop_path ASSIGNING <ls_navigation_prop_path>.

        lo_nav_prop ?= lo_src_entity_type->/iwbep/if_v4_med_struc_type_r~get_property_by_path( <ls_navigation_prop_path>-navigation_property_path ).
        lo_request->set_reference_nav_prop(
          io_navigation_prop       = lo_nav_prop
          iv_complex_property_path = <ls_navigation_prop_path>-complex_property_path ).

        lo_request_base->get_ref_target_key_data_int(
          EXPORTING
            iv_navigation_prop_path = <ls_navigation_prop_path>-navigation_property_path
          IMPORTING
            et_ref_target_key_data  = lt_ref_target_keys ).

        LOOP AT lt_ref_target_keys INTO lt_key.
          lo_request->set_reference_target_key( lt_key ).

          /iwbep/if_v4_dp_basic~create_reference(
              io_request  = lo_request
              io_response = lo_response ).
          lo_response->validate( ).
        ENDLOOP.

      ENDLOOP.


*     Read entity again as the reference manipulation might have caused side effects on the created entity (foreign keys)
      IF ( ls_todo_list_orig-return-busi_data = abap_true ).
        create_request_response_pro(
            EXPORTING
              io_request  = io_request
              io_response = io_response
            IMPORTING
              eo_request  = lo_request
              eo_response = lo_response ).

        " This response is used as response of the CREATE request
        CAST /iwbep/cl_v4_response_info_pro( io_response )->set_response_info_pro_child( lo_response ).

        lo_request->set_key_data_pro( ir_key_data = lr_data ).

        CLEAR ls_todo_list.
        ls_todo_list-process-key_data = abap_true.
        ls_todo_list-return-busi_data = abap_true.
        lo_request->set_todos( ls_todo_list ).

        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).

        /iwbep/if_v4_dp_basic~read_entity(
            io_request  = lo_request
            io_response = lo_response ).
      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~delete_entity.

    DATA lo_request         TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response        TYPE REF TO /iwbep/cl_v4_response_info_pro.
    DATA ls_todo_list_orig  TYPE /iwbep/if_v4_requ_adv_delete=>ty_s_todo_list.



    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list_orig ).

    lo_request  ?= io_request.
    lo_response ?= io_response.

    IF ( ls_todo_list_orig-process-navigation = abap_true ).
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~DELETE_ENTITY'.
    ENDIF.

    IF ls_todo_list_orig-process-if_match_etag EQ abap_true.
      check_modification_conditions(
        io_request  = lo_request
        io_response = lo_response ).
    ENDIF.

    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-delete ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-delete ).

    /iwbep/if_v4_dp_basic~delete_entity(
        io_request  = lo_request
        io_response = lo_response ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~execute_action.

    DATA: lo_request              TYPE REF TO /iwbep/cl_v4_request_info_pro,
          lo_response             TYPE REF TO /iwbep/cl_v4_response_info_pro,
          ls_todo_list            TYPE /iwbep/if_v4_requ_adv_action=>ty_s_todo_list,
          lo_target_data_provider TYPE REF TO /iwbep/if_v4_data_provider,
          lt_navigation_step      TYPE /iwbep/if_v4_request_info=>ty_t_navigation_step.


    lo_request  ?= io_request.
    lo_response ?= io_response.

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " Navigation with ETag is not supported. BoundActions have two navigation steps.
    lo_request->get_navigation_path_raw( IMPORTING et_navigation_step = lt_navigation_step ).
    IF lines( lt_navigation_step ) > 2 AND ls_todo_list-process-if_match_etag = abap_true.
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~EXECUTE_ACTION'.
    ENDIF.

    resolve_navigation(
      EXPORTING
        io_response             = lo_response
      IMPORTING
        eo_target_data_provider = lo_target_data_provider
      CHANGING
        co_request              = lo_request
        co_response             = lo_response ).


    " Concurrency control.
    IF ls_todo_list-process-if_match_etag EQ abap_true.
      check_modification_conditions(
        io_request  = lo_request
        io_response = lo_response ).
    ENDIF.



    IF lo_request->is_cross_service_request( ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-action ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-action ).

      "Inherit all ToDo flags.
      lo_target_data_provider->/iwbep/if_v4_dp_advanced~execute_action(
        io_request  = lo_request
        io_response = lo_response ).

    ELSE.
      IF ( ls_todo_list-process-expand = abap_true ).
        RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
          EXPORTING
            textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
            exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
            http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
            method             = '/IWBEP/IF_V4_DP_ADVANCED~EXECUTE_ACTION'.
      ENDIF.

      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-action ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-action ).

      lo_target_data_provider->/iwbep/if_v4_dp_basic~execute_action(
        io_request  = lo_request
        io_response = lo_response ).

    ENDIF.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~execute_function.

    DATA lo_request               TYPE REF TO /iwbep/cl_v4_request_info_pro.
    DATA lo_response              TYPE REF TO /iwbep/cl_v4_response_info_pro.
    DATA lo_target_data_provider  TYPE REF TO /iwbep/if_v4_data_provider.


    lo_request  ?= io_request.
    lo_response ?= io_response.

    resolve_navigation(
      EXPORTING
        io_response             = lo_response
      IMPORTING
        eo_target_data_provider = lo_target_data_provider
      CHANGING
        co_request              = lo_request
        co_response             = lo_response ).

    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-function ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-function ).

    "Inherit all ToDo flags. The ToDo for the potentially added key-data is handled by /IWBEP/CL_V4_REQUEST_INFO_PRO
    lo_target_data_provider->/iwbep/if_v4_dp_basic~execute_function(
      io_request  = lo_request
      io_response = lo_response ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~read_entity.

    DATA: lo_request              TYPE REF TO /iwbep/cl_v4_request_info_pro,
          lo_response             TYPE REF TO /iwbep/cl_v4_response_info_pro,
          ls_todo_list_orig       TYPE /iwbep/if_v4_requ_adv_read=>ty_s_todo_list,
          lo_target_data_provider TYPE REF TO /iwbep/if_v4_data_provider.


    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list_orig ).

    lo_request  ?= io_request.
    lo_response ?= io_response.


    resolve_navigation(
      EXPORTING
        io_response             = lo_response
      IMPORTING
        eo_target_data_provider = lo_target_data_provider
      CHANGING
        co_request              = lo_request
        co_response             = lo_response ).


    " X-Service
    IF lo_request->is_cross_service_request( ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).

      lo_target_data_provider->/iwbep/if_v4_dp_advanced~read_entity(
         io_request  = lo_request
         io_response = lo_response ).

      RETURN.
    ENDIF.


    """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " Normal processing
    "Inherit all ToDo flags.
    IF ( ls_todo_list_orig-process-expand = abap_false ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).
      lo_target_data_provider->/iwbep/if_v4_dp_basic~read_entity(
         io_request  = lo_request
         io_response = lo_response ).

    ELSE. "Expand
      lo_response->prepare_for_expand( ).

*     Data for the current level
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_r ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-tree_r ).

      lo_target_data_provider->/iwbep/if_v4_dp_intermediate~read_entity_tree(
        io_request  = lo_request
        io_response = lo_response ).

      "No validation here, provider does not have to implement the expand himself
      CAST /iwbep/cl_v4_abs_data_provider( lo_target_data_provider )->expand_read_entity_tree(
        io_request  = lo_request
        io_response = lo_response ).
    ENDIF.


    "Check if conditional read is requested and still needs to be done (might have been done on BASIC READ already)
    IF ls_todo_list_orig-process-if_none_match_etag EQ abap_true. "eTag requested
      handle_generic_cond_read(  io_request           = io_request
                                 io_request_info_pro  = lo_request
                                 io_response_info_pro = lo_response ).
    ENDIF.


  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~read_entity_list.

    DATA: ls_todo_list            TYPE /iwbep/if_v4_requ_adv_list=>ty_s_todo_list,
          lo_request              TYPE REF TO /iwbep/cl_v4_request_info_pro,
          lo_response             TYPE REF TO /iwbep/cl_v4_response_info_pro,
          lo_target_data_provider TYPE REF TO /iwbep/if_v4_data_provider,
          lv_has_no_target        TYPE abap_bool.


    lo_request  ?= io_request.
    lo_response ?= io_response.
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    " $apply
    IF ( ls_todo_list-process-apply = abap_true ).
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~READ_ENTITY_LIST'.
    ENDIF.


    " Navigation with $deltatoken not implemented
    IF  ( ls_todo_list-process-navigation = abap_true )
    AND ( ( ls_todo_list-process-delta_token = abap_true )
    OR ( ls_todo_list-return-delta_token = abap_true ) ).
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~READ_ENTITY_LIST'.
    ENDIF.

    " Navigation with $skiptoken not implemented
    IF  ( ls_todo_list-process-navigation = abap_true )
    AND ( ls_todo_list-process-skip_token = abap_true ).
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-skiptoken_server_side_paging
          method             = '/IWBEP/IF_V4_DP_ADVANCED~READ_ENTITY_LIST'.
    ENDIF.


    " $deltatoken is not supported for $expand
    IF  ( ls_todo_list-process-expand = abap_true )
    AND ( ls_todo_list-process-delta_token = abap_true ).
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-skiptoken_server_side_paging
          method             = '/IWBEP/IF_V4_DP_ADVANCED~READ_ENTITY_LIST'.
    ENDIF.


    resolve_navigation(
      EXPORTING
        io_response             = lo_response
      IMPORTING
        eo_target_data_provider = lo_target_data_provider
        ev_has_no_target        = lv_has_no_target
      CHANGING
        co_request              = lo_request
        co_response             = lo_response ).


    IF lv_has_no_target = abap_true.
      " Target has 0..n / 0..1 multiplicity and no target keys were found by target data provider
      " So instead of calling the BASIC~READ_LIST we simply set "No Data" and are done
      lo_response->set_has_no_target( ).
      RETURN.
    ENDIF.

    IF lo_request->is_cross_service_request( ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list ).

      lo_target_data_provider->/iwbep/if_v4_dp_advanced~read_entity_list(
         io_request  = lo_request
         io_response = lo_response ).

      RETURN.
    ENDIF.

    "Inherit all ToDo flags. The ToDo for the potentially added key-data is handled by /IWBEP/CL_V4_REQUEST_INFO_PRO
    IF ( ls_todo_list-process-expand = abap_false ).
*      IF ( lo_request->is_cross_service_request( ) = abap_false ).
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-list ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-list ).

      lo_target_data_provider->/iwbep/if_v4_dp_basic~read_entity_list(
         io_request  = lo_request
         io_response = lo_response ).

      handle_generic_skip_top(
        io_request  = lo_request
        io_response = lo_response ).

    ELSE.
      lo_response->prepare_for_expand( ).

      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-tree_l ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-tree_l ).

      lo_target_data_provider->/iwbep/if_v4_dp_intermediate~read_entity_tree_list(
        io_request = lo_request
        io_response = lo_response ).

      CAST /iwbep/cl_v4_abs_data_provider( lo_target_data_provider )->expand_read_entity_tree_list(
        io_request  = lo_request
        io_response = lo_response ).

    ENDIF.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~update_entity.

    DATA:
      lo_request              TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response             TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_request_base         TYPE REF TO /iwbep/if_v4_request_info,
      lt_navigation_prop_path TYPE /iwbep/if_v4_runtime_types=>ty_t_navigation_prop_w_path,
      lt_ref_target_keys      TYPE /iwbep/if_v4_request_info=>ty_s_reference_data-entities_keys,
      lt_key_name_value       TYPE /iwbep/if_v4_request_info=>ty_t_nvp,
      lo_src_entity_type      TYPE REF TO /iwbep/if_v4_med_entity_type_r,
      lo_nav_prop             TYPE REF TO /iwbep/if_v4_med_nav_prop_r,
      lv_target_multiplicity  TYPE /iwbep/if_v4_med_element=>ty_e_med_nav_multiplicity,
      ls_todo_list_orig       TYPE /iwbep/if_v4_requ_adv_update=>ty_s_todo_list,
      ls_todo_list            TYPE /iwbep/if_v4_request_info=>ty_s_todo_list.

    FIELD-SYMBOLS:
      <ls_navigation_prop_path> TYPE /iwbep/if_v4_runtime_types=>ty_s_navigation_prop_w_path.



    lo_request        ?= io_request.
    lo_response       ?= io_response.
    lo_request_base    = lo_request->get_base_request_info( ).

    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list_orig ).


*   Check
    IF ls_todo_list_orig-process-navigation = abap_true
    OR ls_todo_list_orig-process-expand = abap_true.
      RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
        EXPORTING
          textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
          exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
          http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
          sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
          method             = '/IWBEP/IF_V4_DP_ADVANCED~UPDATE_ENTITY'.
    ENDIF.


*   Concurrency control.
    IF ls_todo_list_orig-process-if_match_etag EQ abap_true.
      check_modification_conditions(
        io_request  = lo_request
        io_response = lo_response ).
    ENDIF.


*   UPDATE Business data
    IF  ls_todo_list_orig-process-patch = abap_true
    AND ls_todo_list_orig-process-busi_data = abap_true.  "PATCH only if we have business data
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-intermediate-patch ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-intermediate-patch ).
      /iwbep/if_v4_dp_intermediate~patch_entity(
           io_request  = lo_request
           io_response = lo_response ).

    ELSEIF ls_todo_list_orig-process-patch = abap_false. "UPDATE (An update with no business data is still an update, setting all properties to their default value)
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-update ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-update ).
      /iwbep/if_v4_dp_basic~update_entity(
          io_request  = lo_request
          io_response = lo_response ).

    ENDIF.


*   UPDATE references
    IF ( ls_todo_list_orig-process-target_key_data = abap_true ).
      " The update/patch request above was not the final request - so we have to validate it before we continue
      " Otherwise the validation is done in /IWBEP/CL_V4_LOCAL_DP_PROXY
      IF  ls_todo_list_orig-process-patch = abap_false
      OR ls_todo_list_orig-process-busi_data = abap_true.
        lo_response->validate( ).
      ENDIF.

      "Set the request / response back to ADVANCED~CREATE as we are accessing the interface now ourself
      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update ).

      lo_src_entity_type = lo_request_base->get_source_entity_type( ).
      io_request->get_ref_nav_props( IMPORTING et_navigation_prop_path = lt_navigation_prop_path ).

      CLEAR ls_todo_list.
      ls_todo_list-process-source_key_data = abap_true.
      ls_todo_list-process-target_key_data = abap_true.


      LOOP AT lt_navigation_prop_path ASSIGNING <ls_navigation_prop_path>.
        create_request_response_pro(
            EXPORTING
              io_request  = io_request
              io_response = io_response
            IMPORTING
              eo_request  = lo_request
              eo_response = lo_response ).

        lo_request->set_todos( ls_todo_list ).
        "No need to set the key values, they are part of the base request

        lo_nav_prop ?= lo_src_entity_type->/iwbep/if_v4_med_struc_type_r~get_property_by_path( <ls_navigation_prop_path>-navigation_property_path ).
        lo_request->set_reference_nav_prop(
          io_navigation_prop       = lo_nav_prop
          iv_complex_property_path = <ls_navigation_prop_path>-complex_property_path ).

        lv_target_multiplicity = lo_nav_prop->get_target_multiplicity( ).

        lo_request_base->get_ref_target_key_data_int(
          EXPORTING
            iv_navigation_prop_path = <ls_navigation_prop_path>-navigation_property_path
          IMPORTING
            et_ref_target_key_data  = lt_ref_target_keys ).


        IF ( lv_target_multiplicity <> /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_many_optional )
        AND ( lt_ref_target_keys IS INITIAL ).
          " Actually, delete the to-one reference.
          CLEAR lt_key_name_value.
          lo_request->set_reference_target_key( lt_key_name_value ).

          lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_c ).
          lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_c ).

          /iwbep/if_v4_dp_basic~create_reference(
              io_request  = lo_request
              io_response = lo_response ).

        ELSE.
          LOOP AT lt_ref_target_keys INTO lt_key_name_value.
            lo_request->set_reference_target_key( lt_key_name_value ).

            lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-ref_c ).
            lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-ref_c ).

            /iwbep/if_v4_dp_basic~create_reference(
                io_request  = lo_request
                io_response = lo_response ).
          ENDLOOP.

        ENDIF.

        lo_response->validate( ).
      ENDLOOP.


*     Read entity again as the reference manipulation might have caused side effects on the created entity (foreign keys)
      IF ( ls_todo_list_orig-return-busi_data = abap_true ).
        create_request_response_pro(
            EXPORTING
              io_request  = io_request
              io_response = io_response
            IMPORTING
              eo_request  = lo_request
              eo_response = lo_response ).

        " This response is used as response of the CREATE request
        CAST /iwbep/cl_v4_response_info_pro( io_response )->set_response_info_pro_child( lo_response ).

        "No need to set the key values, they are part of the base request
        CLEAR ls_todo_list.
        ls_todo_list-process-key_data = abap_true.
        ls_todo_list-return-busi_data = abap_true.
        lo_request->set_todos( ls_todo_list ).

        lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
        lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).

        /iwbep/if_v4_dp_basic~read_entity(
            io_request  = lo_request
            io_response = lo_response ).

      ENDIF.

    ENDIF.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~update_entity_list.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_ADVANCED~UPDATE_ENTITY_LIST'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~create_entity.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~CREATE_ENTITY'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~create_reference.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~CREATE_REFERENCE'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~delete_entity.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~DELETE_ENTITY'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~execute_action.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~EXECUTE_ACTION'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~execute_function.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~EXECUTE_FUNCTION'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_entity.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~READ_ENTITY'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_entity_list.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~READ_ENTITY_LIST'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_ref_target_key_data.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~READ_REF_TARGET_KEY_DATA'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~read_ref_target_key_data_list.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~READ_REF_TARGET_KEY_DATA_LIST'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_basic~update_entity.
    RAISE EXCEPTION TYPE /iwbep/cx_v4_not_implemented
      EXPORTING
        textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
        method             = '/IWBEP/IF_V4_DP_BASIC~UPDATE_ENTITY'.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_batch.

    DATA:
      lo_base_request            TYPE REF TO /iwbep/if_v4_request_info,
      lo_idp_response_repo       TYPE REF TO /iwbep/cl_v4_idp_response_repo,
      ls_batch_operation         TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
      ls_batch_package           TYPE ty_s_batch_package,
      ls_done_list               TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_process_list,
      ls_operation_info          TYPE /iwbep/if_v4_runtime_types=>ty_s_operation_info,
      ls_todo_list               TYPE /iwbep/if_v4_requ_btc_proc=>ty_s_todo_list,
      lt_batch_package           TYPE ty_t_batch_package,
      lt_operation_info          TYPE /iwbep/if_v4_runtime_types=>ty_t_operation_info,
      lv_is_changeset_successful TYPE abap_bool,
      lx_gateway                 TYPE REF TO /iwbep/cx_gateway.


    " We register the COMMIT watch-dog once in case we do our generic BATCH handling.
    " We then set it per changeset
    CALL FUNCTION '/IWBEP/FM_V4_REGISTER_WATCHDOG'.


    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).

    "ToDo Flags we are handling in the coding
    ls_done_list-continue_on_error = ls_todo_list-process-continue_on_error.
    ls_done_list-idempotency       = ls_todo_list-process-idempotency.
    io_response->set_is_done( EXPORTING is_todo_list = ls_done_list ).

    io_request->get_operations_info( IMPORTING et_operation_info = lt_operation_info ).
    create_batch_packages(
      EXPORTING
        it_batch_operation_info = lt_operation_info
      IMPORTING
        et_batch_package        = lt_batch_package ).


    LOOP AT lt_batch_package INTO ls_batch_package.
      CASE ls_batch_package-kind.
        WHEN gcs_batch_package_kinds-read_operations.
          LOOP AT ls_batch_package-operations_info INTO ls_operation_info.
            TRY.
                io_request->get_operation(
                  EXPORTING
                    iv_operation_id = ls_operation_info-id
                  IMPORTING
                    es_operation    = ls_batch_operation ).

                execute_batch_operation( ls_batch_operation ).

              CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
                /iwbep/cl_v4_logger=>log_bep_exception(
                    iv_exception_category = lx_gateway->exception_category
                    io_exception          = lx_gateway ).

                ls_batch_operation-response->set_gateway_exception( lx_gateway ).
                IF ls_todo_list-process-continue_on_error EQ abap_false.
                  RETURN.
                ENDIF.
            ENDTRY.
          ENDLOOP.


        WHEN gcs_batch_package_kinds-change_operations.
          LOOP AT ls_batch_package-operations_info INTO ls_operation_info.
            TRY.
                io_request->get_operation(
                  EXPORTING
                    iv_operation_id = ls_operation_info-id
                  IMPORTING
                    es_operation    = ls_batch_operation ).

                IF ls_todo_list-process-idempotency = abap_true.
                  lo_base_request = CAST /iwbep/cl_v4_request_info_pro( ls_batch_operation-request )->get_base_request_info( ).
                  IF lo_base_request->is_idempotency_requested( ).
                    lo_idp_response_repo = NEW #( lo_base_request->get_idempotency_info( ) ).
                    CAST /iwbep/cl_v4_response_info_pro( ls_batch_operation-response )->set_idp_response_repository( lo_idp_response_repo ).

                    IF lo_idp_response_repo->has_response( ).
                      CAST /iwbep/cl_v4_response_info_pro( ls_batch_operation-response )->set_from_idp_repo( ).
                      CONTINUE.
                    ENDIF.
                  ENDIF.
                ENDIF.

                execute_batch_operation( ls_batch_operation ).

                IF lo_idp_response_repo IS BOUND.
                  CAST /iwbep/cl_v4_response_info_pro( ls_batch_operation-response )->save_for_idempotency( ).
                ENDIF.

                CAST /iwbep/cl_v4_request_info_pro( ls_batch_operation-request )->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
                /iwbep/if_v4_dp_process_steps~commit( CAST /iwbep/cl_v4_request_info_pro( ls_batch_operation-request ) ).

              CATCH BEFORE UNWIND /iwbep/cx_gateway INTO lx_gateway.
                /iwbep/cl_v4_logger=>log_bep_exception(
                    iv_exception_category = lx_gateway->exception_category
                    io_exception          = lx_gateway ).

                /iwbep/if_v4_dp_process_steps~rollback( ).
                ls_batch_operation-response->set_gateway_exception( lx_gateway ).
                IF ls_todo_list-process-continue_on_error = abap_false.
                  RETURN.
                ENDIF.
            ENDTRY.
          ENDLOOP.


        WHEN gcs_batch_package_kinds-change_set.
          lv_is_changeset_successful = execute_batch_changeset( io_batch_request     = io_request
                                                                io_batch_response    = io_response
                                                                is_changeset_package = ls_batch_package ).

          IF  lv_is_changeset_successful             = abap_false
          AND ls_todo_list-process-continue_on_error = abap_false.
            RETURN.
          ENDIF.


        WHEN OTHERS.
          ASSERT 1 = 0.

      ENDCASE.

    ENDLOOP.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_change_set.

    DATA:
      lt_operation_info  TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      ls_operation_info  TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      ls_batch_operation TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation,
      lx_gateway         TYPE REF TO /iwbep/cx_gateway,
      ls_todo_list       TYPE /iwbep/if_v4_requ_btc_proc_cs=>ty_s_todo_list,
      ls_done_list       TYPE /iwbep/if_v4_requ_btc_proc_cs=>ty_s_todo_process_list.


    CALL FUNCTION '/IWBEP/FM_V4_SET_WATCHDOG'.

    TRY.
        io_request->get_todos( IMPORTING es_todo_list = ls_todo_list ).
        io_request->get_operations_info( IMPORTING et_operation_info = lt_operation_info ).

        ls_done_list-idempotency = ls_todo_list-process-idempotency.
        io_response->set_is_done( ls_done_list ).

        LOOP AT lt_operation_info INTO ls_operation_info.
          io_request->get_operation(
            EXPORTING
              iv_operation_id = ls_operation_info-id
            IMPORTING
              es_operation    = ls_batch_operation ).

          execute_batch_operation( ls_batch_operation ).
        ENDLOOP.

        CALL FUNCTION '/IWBEP/FM_V4_RECALL_WATCHDOG'.

        IF ls_todo_list-process-idempotency = abap_true.
          io_response->save_for_idempotency( ).
        ENDIF.

        CAST /iwbep/cl_v4_request_info_pro( io_request )->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
        /iwbep/if_v4_dp_process_steps~commit( CAST /iwbep/cl_v4_request_info_pro( io_request ) ).

      CATCH /iwbep/cx_gateway INTO lx_gateway.
        CALL FUNCTION '/IWBEP/FM_V4_RECALL_WATCHDOG'.
        /iwbep/if_v4_dp_process_steps~rollback( ).

        lx_gateway->batch_content_id = ls_operation_info-content_id.
        RAISE EXCEPTION lx_gateway.

    ENDTRY.

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~check_modification_conditions.
    "**********************************************************************
    "* This method is only supported for create/update/delete
    "* and only if no navigation has to be done.
    "* If navigation has to resolved (e.g. also for containments) this method has to be redefined.
    "**********************************************************************

    DATA:
      lo_request             TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_request_base        TYPE REF TO /iwbep/if_v4_request_info,
      lo_response            TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_response_base       TYPE REF TO /iwbep/if_v4_response_info,
      ls_conditions          TYPE /iwbep/if_v4_runtime_types=>ty_s_write_conditions,
      ls_read_todo_list      TYPE /iwbep/if_v4_request_info=>ty_s_todo_list,
      ls_request_options     TYPE /iwbep/if_v4_requ_intm_cond=>ty_s_todo_process_list,
      lt_property_name_w_obj TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path_w_obj,
      lv_etag_pro            TYPE string,
      lv_etag_request        TYPE string,
      lv_etag_prop_name      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
      lv_has_met_conditions  TYPE abap_bool,
      lo_etag_prop           TYPE REF TO /iwbep/if_v4_med_prim_prop_r.


    io_request->get_conditions( IMPORTING es_conditions = ls_conditions ).

    create_request_response_pro(
      EXPORTING
        io_request  = io_request
        io_response = io_response
      IMPORTING
        eo_request  = lo_request
        eo_response = lo_response ).

    lo_request_base  = lo_request->get_base_request_info( ).
    lo_response_base = lo_response->get_base_response_info( ).

    lo_etag_prop = lo_response_base->get_etag_property_pro( lo_request_base->get_source_entity_type( ) ).
    lv_etag_prop_name = lo_etag_prop->get_internal_name( ).

    ASSERT lv_etag_prop_name IS NOT INITIAL..

    APPEND VALUE #( path     = lv_etag_prop_name
                    instance = lo_etag_prop       ) TO lt_property_name_w_obj.

    lo_request->set_selected_property_names( lt_property_name_w_obj ).


*   GET the eTag
    ls_read_todo_list-process-select   = abap_true.
    ls_read_todo_list-process-key_data = abap_true.
    ls_read_todo_list-return-busi_data = abap_true.
    lo_request->set_todos( ls_read_todo_list ).

    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).

    /iwbep/if_v4_dp_basic~read_entity(
        io_request  = lo_request
        io_response = lo_response ).

    lo_response->validate( ).

    lo_response->get_busi_data_property_pro(
      EXPORTING
        io_property    = lo_response_base->get_etag_property_pro( lo_request_base->get_source_entity_type( ) )
      IMPORTING
        ev_property_data = lv_etag_pro ).


*   Compare the eTag
    lv_has_met_conditions = abap_true.
    IF ls_conditions-if_match_etag <> '*'.
      lv_etag_request = ls_conditions-if_match_etag.
      CONDENSE lv_etag_request.
      CONDENSE lv_etag_pro.
      IF lv_etag_request <> lv_etag_pro.
        lv_has_met_conditions = abap_false.
      ENDIF.
    ENDIF.

    IF lv_has_met_conditions = abap_false.
      RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
        EXPORTING
          textid             = /iwbep/cx_v4_runtime=>precondition_failed
          exception_category = /iwbep/cx_v4_runtime=>gcs_excep_categories-client
          http_status_code   = /iwbep/cx_v4_runtime=>gcs_http_status_codes-precondition_failed.
    ENDIF.

    ls_request_options-if_match_etag = abap_true.
    ls_request_options-key_data      = abap_true.
    io_response->set_is_done( ls_request_options ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~patch_entity.

    DATA:
      lo_request_base           TYPE REF TO /iwbep/if_v4_request_info,
      lo_request                TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response               TYPE REF TO /iwbep/cl_v4_response_info_pro,
      ls_todo_list              TYPE /iwbep/if_v4_request_info=>ty_s_todo_list,
      ls_todo_list_orig         TYPE /iwbep/if_v4_requ_intm_patch=>ty_s_todo_list,
      lr_read_data              TYPE REF TO data,
      lr_patch_data             TYPE REF TO data,
      lt_provided_property_path TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path,
      lv_provided_property_path TYPE /iwbep/if_v4_runtime_types=>ty_property_path,
      lo_property               TYPE REF TO /iwbep/if_v4_med_element.

    FIELD-SYMBOLS:
      <lv_patch_data> TYPE data,
      <ls_patch_data> TYPE data,
      <lv_read_data>  TYPE data,
      <ls_read_data>  TYPE data.



    lo_request       ?= io_request.
    lo_response      ?= io_response.
    lo_request_base   = lo_request->get_base_request_info( ).
    io_request->get_todos( IMPORTING es_todo_list = ls_todo_list_orig ).

    ASSERT ls_todo_list_orig-process-busi_data = abap_true.
    ASSERT ls_todo_list_orig-process-key_data  = abap_true.

    IF lo_request_base->get_service_features( )-service_features_pro-use_vc_to_flag_omitted_data = abap_true .
      RAISE EXCEPTION NEW /iwbep/cx_v4_not_implemented( textid             = /iwbep/cx_v4_not_implemented=>not_implemented_method
                                                        exception_category = /iwbep/cx_v4_not_implemented=>gcs_excep_categories-provider
                                                        http_status_code   = /iwbep/cx_v4_not_implemented=>gcs_http_status_codes-sv_not_implemented
                                                        sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-not_implemented
                                                        method             = '/IWBEP/IF_V4_DP_INTERMEDIATE~PATCH_ENTITY' ).
    ENDIF.


    " Get business data from request (in provider format)
    lo_request_base->get_data_container_pro( IMPORTING er_data_container = lr_patch_data ).
    ASSIGN lr_patch_data->* TO <ls_patch_data>.
    io_request->get_busi_data( IMPORTING es_busi_data = <ls_patch_data> ).


**********************************************************************
*   READ the data from the entity that is being patched
**********************************************************************
    IF ( ls_todo_list_orig-process-partial_busi_data = abap_true ).
      create_request_response_pro(
          EXPORTING
            io_request  = io_request
            io_response = io_response
          IMPORTING
            eo_request  = lo_request
            eo_response = lo_response ).

      ls_todo_list-process-key_data = abap_true.
      ls_todo_list-return-busi_data = abap_true.
      lo_request->set_todos( is_todo_list = ls_todo_list  ).


      lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-read ).
      lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-read ).

      " No need to set the key values, they are part of the base request
      /iwbep/if_v4_dp_basic~read_entity(
          io_request  = lo_request
          io_response = lo_response ).

      lo_response->validate( ).

      lr_read_data = lo_response->get_busi_data_pro_sub_tree( ).


**********************************************************************
*   Merge the entity data with the patched data  (in provider format)
**********************************************************************
      ASSIGN lr_read_data->* TO <ls_read_data>.
      io_request->get_provided_properties( IMPORTING et_provided_property_path = lt_provided_property_path ).
      LOOP AT lt_provided_property_path INTO lv_provided_property_path.
        ASSIGN COMPONENT lv_provided_property_path OF STRUCTURE <ls_patch_data> TO <lv_patch_data> .
        ASSIGN COMPONENT lv_provided_property_path OF STRUCTURE <ls_read_data>  TO <lv_read_data>.

        lo_property = lo_request->get_source_entity_type( )->get_property_by_path( lv_provided_property_path ).
        "This condition is needed for collections as the assignment via component of structure does not work for collections
        IF <lv_patch_data> IS NOT ASSIGNED
        OR lo_property->get_kind( ) = /iwbep/if_v4_med_element=>kind_complex_property.
          MOVE-CORRESPONDING <ls_patch_data> TO <ls_read_data> EXPANDING NESTED TABLES.
        ELSE.
          <lv_read_data> = <lv_patch_data>.
        ENDIF.
      ENDLOOP.

    ELSE. " ls_todo_list_orig-process-partial_busi_data = abap_false
      lr_read_data = lr_patch_data.

    ENDIF.


**********************************************************************
*   UPDATE the merged data
**********************************************************************
    create_request_response_pro(
        EXPORTING
          io_request  = io_request
          io_response = io_response
        IMPORTING
          eo_request  = lo_request
          eo_response = lo_response ).

    CAST /iwbep/cl_v4_response_info_pro( io_response )->set_response_info_pro_child( lo_response ).

    " no need to set the key values since they are part of the base request
    lo_request->set_busi_data_pro( lr_read_data ).

    CLEAR ls_todo_list.
    MOVE-CORRESPONDING ls_todo_list_orig TO ls_todo_list.
    ls_todo_list-process-partial_busi_data = abap_false. "With the logic implemented here we always call the DPC with the complete data
    lo_request->set_todos( is_todo_list = ls_todo_list  ).


    lo_request->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-basic-update ).
    lo_response->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-basic-update ).

    /iwbep/if_v4_dp_basic~update_entity(
        io_request  = lo_request
        io_response = lo_response ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_intermediate~read_entity_tree  ##NEEDED.

*   method may be overwritten to implement application specific expand handling

  ENDMETHOD.
ENDCLASS.