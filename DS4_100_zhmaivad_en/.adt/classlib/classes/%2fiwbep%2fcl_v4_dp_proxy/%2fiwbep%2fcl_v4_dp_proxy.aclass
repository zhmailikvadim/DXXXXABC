"! <p class="shorttext synchronized" lang="en">V4 Data Provider Proxy</p>
"! This class delegates OData V4 requests to the corresponding registered DPC
CLASS /iwbep/cl_v4_dp_proxy DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES /iwbep/if_v4_data_provider_fw .


  PROTECTED SECTION.

    "! <p class="shorttext synchronized" lang="en">Do some checks and get the application's data provider</p>
    "!
    "! This method is only protected to support a unit test in class /IWBEP/CL_V4_LOCAL_DP_PROXY
    "! @parameter io_request_info     | <p class="shorttext synchronized" lang="en">Request Information</p>
    "! @parameter io_request_info_pro | <p class="shorttext synchronized" lang="en">Request Info wrapper for Provider Applications</p>
    "! @parameter ro_data_provider    | <p class="shorttext synchronized" lang="en">Data Provider</p>
    "! @raising   /iwbep/cx_gateway   | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS get_data_provider
      IMPORTING
        !io_request_info        TYPE REF TO /iwbep/if_v4_request_info
        !io_request_info_pro    TYPE REF TO /iwbep/cl_v4_request_info_pro
      RETURNING
        VALUE(ro_data_provider) TYPE REF TO /iwbep/if_v4_data_provider
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Cleanup method for errors in the CRUD calls</p>
    "!
    "! This method is called at the end of the /IWBEP/IF_V4_DATA_PROVIDER_FW in case they run into an exception (importing parameter IX_ERROR)
    "! <br/>(This method is not called in method /IWBEP/IF_V4_DATA_PROVIDER_FW~INITIALIZE)
    "!
    "! @parameter io_data_provider        | <p class="shorttext synchronized" lang="en">DPC</p>
    "! @parameter io_request_info         | <p class="shorttext synchronized" lang="en">Request</p>
    "! @parameter io_response_info_pro    | <p class="shorttext synchronized" lang="en">Response in the provider wrapper</p>
    "! @parameter iv_is_modifying_request | <p class="shorttext synchronized" lang="en">TRUE if the exception has occured in a modifying request</p>
    METHODS cleanup_error
      IMPORTING
        io_data_provider        TYPE REF TO /iwbep/if_v4_data_provider
        io_request_info         TYPE REF TO /iwbep/if_v4_request_info
        io_response_info_pro    TYPE REF TO /iwbep/cl_v4_response_info_pro
        iv_is_modifying_request TYPE abap_bool
        ix_error                TYPE REF TO cx_root.


  PRIVATE SECTION.

    TYPES:
      "! <p class="shorttext synchronized" lang="en">Key of a batch operation</p>
      BEGIN OF tys_batch_operation_group,
        service TYPE /iwbep/s_v4_med_service_key,
        ids     TYPE STANDARD TABLE OF /iwbep/if_v4_request_info=>ty_s_child-id WITH DEFAULT KEY,
      END OF tys_batch_operation_group,
      "! <p class="shorttext synchronized" lang="en">List of a batch operation keys</p>
      tyt_batch_operation_group TYPE STANDARD TABLE OF tys_batch_operation_group.


    "! <p class="shorttext synchronized" lang="en">Create the request / response pro objects</p>
    "!
    "! @parameter io_request_info      | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @parameter eo_request_info_pro  | <p class="shorttext synchronized" lang="en">V4 Request Info wrapper for Provider Applications</p>
    "! @parameter eo_response_info     | <p class="shorttext synchronized" lang="en">V4 Response Information</p>
    "! @parameter eo_response_info_pro | <p class="shorttext synchronized" lang="en">V4 Response Info wrapper for Provider Applications</p>
    "! @raising   /iwbep/cx_gateway    | <p class="shorttext synchronized" lang="en">SAP NetWeaver Gateway Exception</p>
    METHODS create_request_response
      IMPORTING
        !io_request_info      TYPE REF TO /iwbep/if_v4_request_info
      EXPORTING
        !eo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro
        !eo_response_info     TYPE REF TO /iwbep/if_v4_response_info
        !eo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro
      RAISING
        /iwbep/cx_gateway .


    "! <p class="shorttext synchronized" lang="en">Create the request / response pro objects for BATCH requests</p>
    "! This method also creates the request / response pro objects for the batch operations
    "!
    "! @parameter io_request_info      | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @parameter eo_request_info_pro  | <p class="shorttext synchronized" lang="en">V4 Request Info wrapper for Provider Applications</p>
    "! @parameter eo_response_info     | <p class="shorttext synchronized" lang="en">V4 Response Information</p>
    "! @parameter eo_response_info_pro | <p class="shorttext synchronized" lang="en">V4 Response Info wrapper for Provider Applications</p>
    "!
    "! @raising   /iwbep/cx_gateway    | <p class="shorttext synchronized" lang="en">SAP NetWeaver Gateway Exception</p>
    METHODS create_operation_pro_batch
      IMPORTING
        io_request_info           TYPE REF TO /iwbep/if_v4_request_info
        is_operation_group_filter TYPE tys_batch_operation_group
      EXPORTING
        eo_request_info_pro       TYPE REF TO /iwbep/cl_v4_request_info_pro
        eo_response_info          TYPE REF TO /iwbep/if_v4_response_info
        eo_response_info_pro      TYPE REF TO /iwbep/cl_v4_response_info_pro
      RAISING
        /iwbep/cx_gateway .

    "! <p class="shorttext synchronized" lang="en">Group the operations of a cross-service batch</p>
    "! The operations are grouped per service with the original order of the operations kept.
    "!
    "! @parameter it_operation       | <p class="shorttext synchronized" lang="en">List of batch operations</p>
    "! @parameter et_operation_group | <p class="shorttext synchronized" lang="en">Grouped list of batch operations</p>
    METHODS get_grouped_batch_operations
      IMPORTING
        it_operation       TYPE /iwbep/if_v4_request_info=>ty_t_child
      EXPORTING
        et_operation_group TYPE tyt_batch_operation_group
      RAISING
        /iwbep/cx_v4_runtime .

    "! <p class="shorttext synchronized" lang="en">Set allowed interface names for operation</p>
    "!
    "! @parameter IV_OPERATION_KIND | <p class="shorttext synchronized" lang="en">Operation kind</p>
    "! @parameter IO_REQUEST | <p class="shorttext synchronized" lang="en">Batch operation request info pro</p>
    "! @parameter IO_RESPONSE | <p class="shorttext synchronized" lang="en">Batch operation response info pro</p>
    "! @raising   /IWBEP/CX_V4_RUNTIME  | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS set_allowed_interface
      IMPORTING
        !iv_operation_kind TYPE /iwbep/if_v4_request_info=>ty_operation_kind
        !io_request        TYPE REF TO /iwbep/cl_v4_request_info_pro
        !io_response       TYPE REF TO /iwbep/cl_v4_response_info_pro
      RAISING
        /iwbep/cx_v4_runtime .

ENDCLASS.



CLASS /IWBEP/CL_V4_DP_PROXY IMPLEMENTATION.


  METHOD /iwbep/if_v4_data_provider_fw~create_entity.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_idp_response_repo TYPE REF TO /iwbep/cl_v4_idp_response_repo,
      lx_error             TYPE REF TO cx_root.


    IF io_request_info->is_idempotency_requested( ).
      lo_idp_response_repo = NEW #( io_request_info->get_idempotency_info( ) ).
      IF lo_idp_response_repo->has_response( ).
        ro_response_info = lo_idp_response_repo->get_response( io_request_info ).
        RETURN.
      ENDIF.
    ENDIF.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-create ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-create ).


    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~create_entity( io_request  = lo_request_info_pro
                                                                  io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

        IF lo_idp_response_repo IS BOUND.
          lo_idp_response_repo->set_response( ro_response_info ).
        ENDIF.


        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).

        lo_data_provider->/iwbep/if_v4_dp_process_steps~commit( lo_request_info_pro ).

      CLEANUP INTO lx_error.
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_true
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~delete_entity.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-delete ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-delete ).


    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~delete_entity(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
        lo_data_provider->/iwbep/if_v4_dp_process_steps~commit( lo_request_info_pro ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_true
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~execute_action.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_idp_response_repo TYPE REF TO /iwbep/cl_v4_idp_response_repo.


    IF io_request_info->is_idempotency_requested( ).
      lo_idp_response_repo = NEW #( io_request_info->get_idempotency_info( ) ).
      IF lo_idp_response_repo->has_response( ).
        ro_response_info = lo_idp_response_repo->get_response( io_request_info ).
        RETURN.
      ENDIF.
    ENDIF.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-action ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-action ).


    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~execute_action(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

        IF lo_idp_response_repo IS BOUND.
          lo_idp_response_repo->set_response( ro_response_info ).
        ENDIF.

        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
        lo_data_provider->/iwbep/if_v4_dp_process_steps~commit( lo_request_info_pro ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_true
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~execute_function.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-function ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-function ).

    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~execute_function(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_false
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~initialize.

    io_request_info->set_is_in_bep_layer( abap_true ).
    io_request_info->finalize( ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~process_batch.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_dpc_factory       TYPE REF TO /iwbep/cl_v4_registry,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro,
      ls_operation_group   TYPE tys_batch_operation_group,
      lt_operation         TYPE /iwbep/if_v4_request_info=>ty_t_child,
      lt_operation_group   TYPE tyt_batch_operation_group,
      lx_error             TYPE REF TO cx_root.


    IF io_request_info->is_cross_service_batch( ).
      io_request_info->get_children( IMPORTING et_child = lt_operation ).

      get_grouped_batch_operations(
        EXPORTING
          it_operation       = lt_operation
        IMPORTING
          et_operation_group = lt_operation_group ).

    ELSE.
      lt_operation_group = VALUE #( ( service = io_request_info->get_service_key( ) ) ).
    ENDIF.


    lo_dpc_factory = /iwbep/cl_v4_registry=>get_instance( ).


    LOOP AT lt_operation_group INTO ls_operation_group.
      TRY.
          create_operation_pro_batch(
            EXPORTING
              io_request_info           = io_request_info
              is_operation_group_filter = ls_operation_group
            IMPORTING
              eo_request_info_pro       = lo_request_info_pro
              eo_response_info          = ro_response_info
              eo_response_info_pro      = lo_response_info_pro ).

          lo_data_provider = lo_dpc_factory->get_data_provider( is_service_key  = ls_operation_group-service
                                                                io_request_info = lo_request_info_pro ).


          lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-batch-process_batch ).
          lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-batch-process_batch ).


          lo_data_provider->/iwbep/if_v4_dp_batch~process_batch(
            io_request  = lo_request_info_pro
            io_response = lo_response_info_pro ).

          lo_response_info_pro->validate( ).
          lo_response_info_pro->finalize( ).

        CLEANUP INTO lx_error.
          cleanup_error( io_data_provider        = lo_data_provider
                         io_request_info         = io_request_info
                         io_response_info_pro    = lo_response_info_pro
                         iv_is_modifying_request = abap_false
                         ix_error                = lx_error ).

      ENDTRY.

    ENDLOOP.


    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~read_entity.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read ).

    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~read_entity(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_false
                       ix_error                = lx_error ).
    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~read_entity_set.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list ).

    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~read_entity_list(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_false
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~update_entity.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro,
      lo_idp_response_repo TYPE REF TO /iwbep/cl_v4_idp_response_repo.


    IF io_request_info->is_idempotency_requested( ).
      lo_idp_response_repo = NEW #( io_request_info->get_idempotency_info( ) ).
      IF lo_idp_response_repo->has_response( ).
        ro_response_info = lo_idp_response_repo->get_response( io_request_info ).
        RETURN.
      ENDIF.
    ENDIF.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update ).

    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~update_entity(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

        IF lo_idp_response_repo IS BOUND.
          lo_idp_response_repo->set_response( ro_response_info ).
        ENDIF.


        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
        lo_data_provider->/iwbep/if_v4_dp_process_steps~commit( lo_request_info_pro ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_true
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~update_entity_list.

    DATA:
      lo_data_provider     TYPE REF TO /iwbep/if_v4_data_provider,
      lo_request_info_pro  TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_response_info_pro TYPE REF TO /iwbep/cl_v4_response_info_pro.


    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = lo_request_info_pro
        eo_response_info     = ro_response_info
        eo_response_info_pro = lo_response_info_pro ).

    lo_data_provider = get_data_provider( io_request_info     = io_request_info
                                          io_request_info_pro = lo_request_info_pro ).

    lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update_list ).
    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update_list ).

    TRY.
        lo_data_provider->/iwbep/if_v4_dp_advanced~update_entity_list(
          io_request  = lo_request_info_pro
          io_response = lo_response_info_pro ).

        lo_response_info_pro->validate( ).
        lo_response_info_pro->finalize( ).

        lo_request_info_pro->set_allowed_interface( /iwbep/if_v4_request_info=>gcs_request_interface_names-process_step-commit ).
        lo_data_provider->/iwbep/if_v4_dp_process_steps~commit( lo_request_info_pro ).

      CLEANUP INTO DATA(lx_error).
        cleanup_error( io_data_provider        = lo_data_provider
                       io_request_info         = io_request_info
                       io_response_info_pro    = lo_response_info_pro
                       iv_is_modifying_request = abap_true
                       ix_error                = lx_error ).

    ENDTRY.

    lo_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    lo_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( lo_response_info_pro ).

  ENDMETHOD.


  METHOD cleanup_error.

    CHECK io_data_provider IS BOUND.

    IF iv_is_modifying_request = abap_true.
      io_data_provider->/iwbep/if_v4_dp_process_steps~rollback( ).
    ENDIF.

    io_response_info_pro->set_allowed_interface( /iwbep/if_v4_response_info=>gcs_response_interface_names-process_step-finalize ).
    io_data_provider->/iwbep/if_v4_dp_process_steps~finalize_request( io_response_info_pro ).

  ENDMETHOD.


  METHOD create_operation_pro_batch.

    DATA:
      lt_batch_operation_info        TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      lt_batch_operation_info_subset TYPE /iwbep/if_v4_request_info=>ty_t_operation_info,
      ls_batch_operation_info        TYPE /iwbep/if_v4_request_info=>ty_s_operation_info,
      lo_child_request_info_pro      TYPE REF TO /iwbep/cl_v4_request_info_pro,
      lo_child_response_info_pro     TYPE REF TO /iwbep/cl_v4_response_info_pro,
      ls_batch_operation             TYPE /iwbep/if_v4_request_info=>ty_s_child,
      ls_batch_operation_pro         TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation.


*   Create the "main" BATCH request
    create_request_response(
      EXPORTING
        io_request_info      = io_request_info
      IMPORTING
        eo_request_info_pro  = eo_request_info_pro
        eo_response_info     = eo_response_info
        eo_response_info_pro = eo_response_info_pro ).

    io_request_info->get_batch_operations_info( IMPORTING et_batch_operation_info = lt_batch_operation_info ).


    IF io_request_info->is_cross_service_batch( ).
      eo_request_info_pro->set_leading_service( is_operation_group_filter-service ).

      LOOP AT lt_batch_operation_info INTO ls_batch_operation_info.
        IF line_exists( is_operation_group_filter-ids[ table_line = ls_batch_operation_info-id ] ).
          APPEND ls_batch_operation_info TO lt_batch_operation_info_subset.
        ENDIF.
      ENDLOOP.

      eo_request_info_pro->set_batch_operation_info( lt_batch_operation_info_subset ).
      lt_batch_operation_info = lt_batch_operation_info_subset.
    ENDIF.


*   Create the child BATCH operations
    LOOP AT lt_batch_operation_info INTO ls_batch_operation_info.

      io_request_info->get_batch_operation(
        EXPORTING
          iv_operation_id    = ls_batch_operation_info-id
        IMPORTING
          es_batch_operation = ls_batch_operation ).

      lo_child_request_info_pro  = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( ls_batch_operation-request ).
      lo_child_response_info_pro = /iwbep/cl_v4_runtime_factory=>create_response_info_pro( io_request_info      = ls_batch_operation-request
                                                                                           io_response_info     = ls_batch_operation-response
                                                                                           io_request_info_pro  = lo_child_request_info_pro ).

      set_allowed_interface(
          iv_operation_kind = ls_batch_operation-operation_kind
          io_request        = lo_child_request_info_pro
          io_response       = lo_child_response_info_pro ).


      ls_batch_operation_pro-id       = ls_batch_operation_info-id.
      ls_batch_operation_pro-kind     = ls_batch_operation_info-operation_kind.
      ls_batch_operation_pro-request  = lo_child_request_info_pro.
      ls_batch_operation_pro-response = lo_child_response_info_pro.

      eo_request_info_pro->add_batch_operation_pro( ls_batch_operation_pro ).

      eo_response_info_pro->add_response_info_pro_child( lo_child_response_info_pro ).

    ENDLOOP.

  ENDMETHOD.


  METHOD create_request_response.

    eo_response_info = io_request_info->get_response_info( ).
    IF eo_response_info IS INITIAL. "Default, only filled in cross-service batch scenarios
      eo_response_info = /iwbep/cl_v4s_runtime_factory=>create_response_info( io_request_info ).
    ENDIF.

    eo_request_info_pro  = /iwbep/cl_v4_runtime_factory=>create_request_info_pro( io_request_info ).
    eo_response_info_pro = /iwbep/cl_v4_runtime_factory=>create_response_info_pro(
                               io_request_info      = io_request_info
                               io_request_info_pro  = eo_request_info_pro
                               io_response_info     = eo_response_info ).

  ENDMETHOD.


  METHOD get_data_provider.

    DATA: ls_service_key TYPE /iwbep/s_v4_med_service_key.


    ls_service_key   = io_request_info->get_service_key( ).
    ro_data_provider = /iwbep/cl_v4_registry=>get_instance( )->get_data_provider(
                         is_service_key        = ls_service_key
                         io_request_info       = io_request_info_pro ).

  ENDMETHOD.


  METHOD set_allowed_interface.

    DATA: lv_request_interface_name  TYPE seoclsname,
          lv_response_interface_name TYPE seoclsname.


    CASE iv_operation_kind.
      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-create_entity.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-create.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-create.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-delete_entity.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-delete.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-delete.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_function.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-function.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-function.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-execute_action.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-action.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-action.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-read.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-read.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-get_entity_list.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-list.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-list.

      WHEN /iwbep/if_v4_request_info=>gcs_operation_kinds-update_entity.
        lv_request_interface_name  = /iwbep/if_v4_request_info=>gcs_request_interface_names-advanced-update.
        lv_response_interface_name =  /iwbep/if_v4_response_info=>gcs_response_interface_names-advanced-update.

      WHEN OTHERS.
        ASSERT iv_operation_kind IS NOT INITIAL.

        " unsupported operation
        RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
          EXPORTING
            textid         = /iwbep/cx_v4_runtime=>batch_operation_not_supported
            operation_kind = iv_operation_kind.

    ENDCASE.

    io_request->set_allowed_interface( lv_request_interface_name ).
    io_response->set_allowed_interface( lv_response_interface_name ).

  ENDMETHOD.


  METHOD get_grouped_batch_operations.

    DATA:
      ls_operation            TYPE /iwbep/if_v4_request_info=>ty_s_child,
      ls_operation_group      TYPE tys_batch_operation_group,
      ls_service_key_current  TYPE /iwbep/s_v4_med_service_key,
      ls_service_key_previous TYPE /iwbep/s_v4_med_service_key,
      lv_changeset_previous   TYPE /iwbep/if_v4_request_info=>ty_s_child-changeset_id.


    LOOP AT it_operation INTO ls_operation.
      ls_service_key_current = ls_operation-request->get_service_key( ).
      ASSERT ls_service_key_current IS NOT INITIAL.

      IF  ls_operation-changeset_id IS NOT INITIAL
      AND ls_operation-changeset_id = lv_changeset_previous
      AND ls_service_key_current   <> ls_service_key_previous.
        " Operations for different services are not supported within one changeset
        RAISE EXCEPTION NEW /iwbep/cx_v4_runtime( textid             = /iwbep/cx_v4_runtime=>cross_service_batch_changeset
                                                  http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-sv_not_implemented
                                                  exception_category = /iwbep/cx_gateway=>gcs_excep_categories-client ).
      ENDIF.


      IF sy-tabix = 1.
        ls_operation_group-service = ls_service_key_current.

      ELSEIF ls_service_key_current <> ls_service_key_previous.
        APPEND ls_operation_group TO et_operation_group.

        CLEAR ls_operation_group.
        ls_operation_group-service = ls_service_key_current.

      ENDIF.


      lv_changeset_previous   = ls_operation-changeset_id.
      ls_service_key_previous = ls_service_key_current.
      APPEND ls_operation-id TO ls_operation_group-ids.

    ENDLOOP.

    APPEND ls_operation_group TO et_operation_group.

  ENDMETHOD.
ENDCLASS.