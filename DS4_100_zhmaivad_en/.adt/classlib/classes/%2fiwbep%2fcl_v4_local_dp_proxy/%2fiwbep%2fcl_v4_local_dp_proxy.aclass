"! <p class="shorttext synchronized" lang="en">V4 Local Data Provider Proxy</p>
"!
"! This class adds the BEP specific logic that is needed in the GW V4 stack around the
"! actual DPC calls which are done in class /IWBEP/CL_V4_DP_PROXY.
"! <br/>Most important activities of this class are
"! <ul>
"! <li>Start authorization check</li>
"! <li>Validation of the service and service group</li>
"! <li>RAL</li>
"! </ul>
"!
CLASS /iwbep/cl_v4_local_dp_proxy DEFINITION
  PUBLIC
  FINAL
  INHERITING FROM /iwbep/cl_v4_dp_proxy
  CREATE PUBLIC .

  PUBLIC SECTION.
    METHODS:
      /iwbep/if_v4_data_provider_fw~create_entity      REDEFINITION,
      /iwbep/if_v4_data_provider_fw~delete_entity      REDEFINITION,
      /iwbep/if_v4_data_provider_fw~execute_action     REDEFINITION,
      /iwbep/if_v4_data_provider_fw~execute_function   REDEFINITION,
      /iwbep/if_v4_data_provider_fw~initialize         REDEFINITION,
      /iwbep/if_v4_data_provider_fw~process_batch      REDEFINITION,
      /iwbep/if_v4_data_provider_fw~read_entity        REDEFINITION,
      /iwbep/if_v4_data_provider_fw~read_entity_set    REDEFINITION,
      /iwbep/if_v4_data_provider_fw~update_entity      REDEFINITION,
      /iwbep/if_v4_data_provider_fw~update_entity_list REDEFINITION.


  PROTECTED SECTION.
    METHODS:
      cleanup_error     REDEFINITION,
      get_data_provider REDEFINITION.


  PRIVATE SECTION.

    "! <p class="shorttext synchronized" lang="en">Checks if RAL-relevant request is CSRF-protected</p>
    "!
    "! @parameter io_request_info | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @raising /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">When protection is required but missing</p>
    METHODS check_ral_protection
      IMPORTING
        io_request_info TYPE REF TO /iwbep/if_v4_request_info
      RAISING
        /iwbep/cx_gateway.



    "! <p class="shorttext synchronized" lang="en">Cleanup and finalize</p>
    "!
    "! @parameter io_request_info | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    METHODS finalize
      IMPORTING
        !io_request_info TYPE REF TO /iwbep/if_v4_request_info.

    "! <p class="shorttext synchronized" lang="en">Log RAL in case of an error (exception)</p>
    "!
    "! @parameter io_request_info | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @parameter ix_exception    | <p class="shorttext synchronized" lang="en">Exception from CLEANUP of calling method</p>
    METHODS log_ral_for_error
      IMPORTING
        !io_request_info TYPE REF TO /iwbep/if_v4_request_info
        !ix_exception    TYPE REF TO cx_root .

    "! <p class="shorttext synchronized" lang="en">Log RAL for an exception category</p>
    "!
    "! @parameter io_request_info       | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @parameter iv_exception_category | <p class="shorttext synchronized" lang="en">Exception Category: /IWBEP/CX_GATEWAY=&gt;GCS_EXCEP_CATEGORIES</p>
    METHODS log_ral_for_exception_category
      IMPORTING
        !io_request_info       TYPE REF TO /iwbep/if_v4_request_info
        !iv_exception_category TYPE /iwbep/cx_gateway=>ty_exception_category .

    "! <p class="shorttext synchronized" lang="en">Log RAL in case of success</p>
    "!
    "! @parameter io_request_info   | <p class="shorttext synchronized" lang="en">V4 Request Information</p>
    "! @parameter io_response_info  | <p class="shorttext synchronized" lang="en">V4 Response Information</p>
    "! @raising   /iwbep/cx_gateway | <p class="shorttext synchronized" lang="en">SAP Gateway Exception</p>
    METHODS log_ral_for_success
      IMPORTING
        io_request_info  TYPE REF TO /iwbep/if_v4_request_info
        io_response_info TYPE REF TO /iwbep/if_v4_response_info
      RAISING
        /iwbep/cx_gateway .




ENDCLASS.



CLASS /IWBEP/CL_V4_LOCAL_DP_PROXY IMPLEMENTATION.


  METHOD /iwbep/if_v4_data_provider_fw~create_entity.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~create_entity( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).


    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~delete_entity.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~delete_entity( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).

    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~execute_action.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~execute_action( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).


    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~execute_function.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~execute_function( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).

    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~initialize.

    DATA:
      lv_service_group_id   TYPE /iwbep/v4_med_group_id,
      lo_registry           TYPE REF TO /iwbep/cl_v4_registry,
      lo_parent_model       TYPE REF TO /iwbep/if_v4_med_model_fw,
      ls_service            TYPE /iwbep/if_v4_request_info=>ty_s_involved_service,
      lv_parent_service_key TYPE /iwbep/s_v4_med_service_key,
      ls_processed_object   TYPE /iwbep/if_v4_registry_types=>ty_s_tadir_key,
      lt_processed_object   TYPE /iwbep/if_v4_registry_types=>ty_t_tadir_key,
      lt_involved_service   TYPE /iwbep/if_v4_request_info=>ty_t_involved_service,
      lv_message            TYPE string.



    TRY.
        lv_service_group_id = io_request_info->get_service_group_id( ).

*       Start authorization
        /iwbep/cl_v4_service_access=>start_trust_mode( lv_service_group_id ).


*       Does the service Group exist?
        lo_registry = /iwbep/cl_v4_registry=>get_instance( ).
        lo_registry->check_does_group_exist( lv_service_group_id ).

        " Is the HUB service group cache time stamp still valid?
        IF  io_request_info->get_hub_version( )-gw_version >= '21'
        AND lo_registry->get_last_modified_of_group( lv_service_group_id ) <> io_request_info->get_hub_srv_grp_cache_timestmp( ).
          RAISE EXCEPTION TYPE /iwbep/cx_v4_runtime
            EXPORTING
              textid             = /iwbep/cx_v4_runtime=>service_alias_cache_outdated
              service_group      = lv_service_group_id
              exception_category = /iwbep/cx_gateway=>gcs_excep_categories-srv_alias_cache_outdated
              http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-sv_service_unavailable.

        ENDIF.


*       Is the service in the service group?
        lt_involved_service = io_request_info->get_involved_services( ).
        ASSERT lt_involved_service IS NOT INITIAL.

        lv_parent_service_key = io_request_info->get_parent_service_key( ).

        IF ( lv_parent_service_key IS INITIAL ).
          LOOP AT lt_involved_service INTO ls_service.
            lo_registry->check_is_service_in_group(
                is_service_key        = ls_service-service_key
                iv_service_group_id   = lv_service_group_id ).

          ENDLOOP.

        ELSE. "F4 Help service
          "Is the parent service in the service group?
          lo_registry->check_is_service_in_group(
              is_service_key        = lv_parent_service_key
              iv_service_group_id   = lv_service_group_id ).

          "Does the parent service contain the F4 help service?
          lo_parent_model ?= io_request_info->get_model_by_service_key( lv_parent_service_key ).
          LOOP AT lt_involved_service INTO ls_service.
            lo_parent_model->check_f4_help_service_exists( ls_service-service_key ).
          ENDLOOP.

        ENDIF.


*       X-Trace for the service group
        IF /iwbep/cl_v4_tracer=>is_xtrace_active( ).
          " Service Group
          lo_registry->get_group_tadir_key(
              EXPORTING
                iv_service_group_id = lv_service_group_id
              IMPORTING
                es_tadir_key        = ls_processed_object ).

          IF  ls_processed_object IS NOT INITIAL.
            APPEND ls_processed_object TO lt_processed_object.
          ENDIF.

          "Services
          LOOP AT lt_involved_service INTO ls_service.
            CLEAR ls_processed_object.
            lo_registry->get_service_tadir_key(
                EXPORTING
                  is_service_key    = ls_service-service_key
                IMPORTING
                  es_tadir_key      = ls_processed_object ).

            IF  ls_processed_object IS NOT INITIAL.
              APPEND ls_processed_object TO lt_processed_object.
            ENDIF.

          ENDLOOP.

          lv_message = |Service Group { lv_service_group_id }|.
          /iwbep/cl_v4_tracer=>write_xtrace_message( it_processed_object = lt_processed_object
                                                     iv_procedure        = 'Initialize Application'
                                                     iv_message          = lv_message ).

        ENDIF.


*       Initialization
        io_request_info->set_is_in_bep_layer( abap_true ).
        io_request_info->finalize( ).
        io_request_info->validate( ).

        check_ral_protection( io_request_info ).


      CLEANUP.
        finalize( io_request_info ).

    ENDTRY.


    SET UPDATE TASK LOCAL.

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~process_batch.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~process_batch( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).

    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~read_entity.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~read_entity( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).

    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~read_entity_set.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~read_entity_set( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).

    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~update_entity.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~update_entity( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).


    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_data_provider_fw~update_entity_list.

    /iwbep/cl_v4_tracer=>performance_start( /iwbep/cl_v4_tracer=>gcs_components-app ).

    ro_response_info = super->/iwbep/if_v4_data_provider_fw~update_entity_list( io_request_info ).

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    finalize( io_request_info ).


    log_ral_for_success(
      io_request_info  = io_request_info
      io_response_info = ro_response_info ).

  ENDMETHOD.


  METHOD cleanup_error.

    /iwbep/cl_v4_tracer=>performance_stop( /iwbep/cl_v4_tracer=>gcs_components-app ).

    " on a GW-exception, the callstack is already set in the processor by CATCH UNWIND;
    " this callstack handling is for non-GW-exceptions (e.g. CX_SY_MESSAGE_IN_PLUGIN_MODE)
    /iwbep/cl_v4_logger=>save_callstack( ).

    super->cleanup_error( io_data_provider        = io_data_provider
                          io_request_info         = io_request_info
                          io_response_info_pro    = io_response_info_pro
                          iv_is_modifying_request = iv_is_modifying_request
                          ix_error                = ix_error ).

    finalize( io_request_info ).

    log_ral_for_error(
      io_request_info = io_request_info
      ix_exception    = ix_error ).

  ENDMETHOD.


  METHOD finalize.

    /iwbep/cl_v4_service_access=>end_trust_mode( ).

    "After this there might still be the /IWBEP/CL_V4_REMOTE_HANDLER, but that one must not do any business logic.
    io_request_info->set_is_in_bep_layer( abap_false ).

  ENDMETHOD.


  METHOD get_data_provider.

    TEST-SEAM get_data_provider. " Test seam for unit test, enable redefinition of get_data_provider method
      ro_data_provider = super->get_data_provider( io_request_info     = io_request_info
                                                   io_request_info_pro = io_request_info_pro ).
    END-TEST-SEAM.

  ENDMETHOD.


  METHOD log_ral_for_error.

    DATA lv_exception_category TYPE /iwbep/cx_gateway=>ty_exception_category.


    IF ix_exception IS BOUND.
      IF io_request_info->has_children( ) = abap_false. "Single Request
        " An exception was raised and retrieved in CLEANUP of calling method (only CX_ROOT is possible in CLEANUP)
        IF ix_exception IS INSTANCE OF /iwbep/if_gateway_exception_fw.
          " Get exception category from Gateway exception
          lv_exception_category = CAST /iwbep/if_gateway_exception_fw( ix_exception )->get_exception_category( ).
        ELSE.
          " Default exception category for all other exceptions
          lv_exception_category = /iwbep/cx_gateway=>gcs_excep_categories-framework.
        ENDIF.

        log_ral_for_exception_category(
          io_request_info       = io_request_info
          iv_exception_category = lv_exception_category ).

      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD log_ral_for_exception_category.

    DATA lo_ral_logger TYPE REF TO /iwbep/cl_v4_ral_logger.


    TRY.
        " Here we don't need to go through the child requests because:
        " - This method only gets called for single requests from FINALIZE
        " - From LOG_RAL_FOR_SUCCESS this method is called for each child request in case it failed

        " RAL processing info is set in sap-statistics if a request is relevant for RAL
        /iwbep/cl_v4_tracer=>set_processing_option(
            iv_processing_option = /iwbep/cl_v4_tracer=>gcs_processing_option-ral
            iv_is_used           = abap_false ).

        IF io_request_info->is_ral_relevant( ) = abap_false.
          RETURN.
        ENDIF.

        lo_ral_logger = io_request_info->get_ral_logger( ).
        lo_ral_logger->log_exception( iv_exception_category ).

        /iwbep/cl_v4_tracer=>set_processing_option(
            iv_processing_option = /iwbep/cl_v4_tracer=>gcs_processing_option-ral
            iv_is_used           = abap_true ).

      CATCH /iwbep/cx_gateway.
        " We ignore any exception here because we are inside a CLEANUP block and must not raise an exception.
        " It was decided that if RAL logging an error fails we ignore this fact.
    ENDTRY.

  ENDMETHOD.


  METHOD log_ral_for_success.

    DATA: lt_child              TYPE /iwbep/if_v4_request_info=>ty_t_child,
          ls_child              TYPE /iwbep/if_v4_request_info=>ty_s_child,
          lv_exception_category TYPE /iwbep/cx_gateway=>ty_exception_category,
          lo_ral_logger         TYPE REF TO /iwbep/cl_v4_ral_logger,
          lx_gateway            TYPE REF TO /iwbep/cx_gateway.


    io_request_info->get_children( IMPORTING et_child = lt_child ).

    IF lt_child IS NOT INITIAL. "BATCH
      LOOP AT lt_child INTO ls_child.
        IF ls_child-response IS BOUND.
          lv_exception_category = ls_child-response->get_exception_category( ).

          IF lv_exception_category IS INITIAL.
            TRY.
                log_ral_for_success(
                  io_request_info  = ls_child-request
                  io_response_info = ls_child-response ).
              CATCH /iwbep/cx_gateway INTO lx_gateway.
                " Read access logging failed -> exchange child response with error response
                ls_child-response->set_gateway_exception( lx_gateway ).
            ENDTRY.

          ELSE.
            log_ral_for_exception_category(
              io_request_info       = ls_child-request
              iv_exception_category = lv_exception_category ).
          ENDIF.
        ENDIF.
      ENDLOOP.

    ELSE. "Single Request
      " RAL processing info is set in sap-statistics if a request is relevant for RAL
      /iwbep/cl_v4_tracer=>set_processing_option(
          iv_processing_option = /iwbep/cl_v4_tracer=>gcs_processing_option-ral
          iv_is_used           = abap_false ).

      IF io_request_info->is_ral_relevant( ) = abap_false.
        RETURN.
      ENDIF.

      lo_ral_logger = io_request_info->get_ral_logger( ).
      lo_ral_logger->log_read_access( io_response_info ).

      /iwbep/cl_v4_tracer=>set_processing_option(
          iv_processing_option = /iwbep/cl_v4_tracer=>gcs_processing_option-ral
          iv_is_used           = abap_true ).
    ENDIF.

  ENDMETHOD.


  METHOD check_ral_protection.

    IF      io_request_info->is_ral_relevant( )
    AND NOT io_request_info->is_csrf_token_protected( ).

      "All request except GET and HEAD must fail in class /IWBEP/CL_OD_HTTP_REQ_HANDLER if CSRF-token is missing.
      "Also, this class shouldn't be reached with a HEAD-request.
      ASSERT io_request_info->get_http_method( ) = 'GET'.

      IF  /iwbep/cl_v4_settings=>is_csrf_for_get_w_ral_needed( ).
        RAISE EXCEPTION NEW /iwbep/cx_v4s_runtime( textid             = /iwbep/cx_v4s_runtime=>csrf_protection_needed_for_ral
                                                   exception_category = /iwbep/cx_gateway=>gcs_excep_categories-csrf_token_missing
                                                   http_status_code   = /iwbep/cx_gateway=>gcs_http_status_codes-forbidden
                                                   sap_note_id        = /iwbep/if_gateway_exception_fw=>gcs_sap_notes_gateway-ral ).

      ENDIF.
    ENDIF.

  ENDMETHOD.
ENDCLASS.