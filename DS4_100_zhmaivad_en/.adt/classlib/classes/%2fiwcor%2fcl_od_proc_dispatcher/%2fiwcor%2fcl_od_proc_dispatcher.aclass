"! <p class="shorttext synchronized" lang="en">OData handler for processor dispatching</p>
CLASS /iwcor/cl_od_proc_dispatcher DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

*"* public components of class /IWCOR/CL_OD_PROC_DISPATCHER
*"* do not include other source files here!!!
    INTERFACES /iwcor/if_od_processor .

    "! <p class="shorttext synchronized" lang="en">Content-ID header</p>
    CONSTANTS gc_content_id TYPE string VALUE 'Content-ID'. "#EC NOTEXT
  PROTECTED SECTION.

*"* protected components of class /IWCOR/CL_OD_PROC_DISPATCHER
*"* do not include other source files here!!!
    "! <p class="shorttext synchronized" lang="en">Service</p>
    DATA mo_service TYPE REF TO /iwcor/if_od_svc_proc .
    "! <p class="shorttext synchronized" lang="en">OData context</p>
    DATA mo_context TYPE REF TO /iwcor/if_od_cntxt .
    "! <p class="shorttext synchronized" lang="en">Accept header</p>
    DATA mv_header_accept TYPE string .
    "! <p class="shorttext synchronized" lang="en">Class name for runtime measurement</p>
    DATA mv_classname TYPE string .

    "! <p class="shorttext synchronized" lang="en">Process service document request</p>
    "!
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS process_service_doc
      IMPORTING
        !io_uri      TYPE REF TO /iwcor/if_od_uri
        !io_response TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process metadata request</p>
    "!
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS process_metadata
      IMPORTING
        !io_uri      TYPE REF TO /iwcor/if_od_uri
        !io_response TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process batch request</p>
    "!
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Multipart Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_batch
      IMPORTING
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_mp_entity
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process entity collection request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS process_entity_coll
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process entity collection count request</p>
    "!
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">OData URI</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_entity_coll_count
      IMPORTING
        !io_uri      TYPE REF TO /iwcor/if_od_uri
        !io_response TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process entity media request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">OData URI</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_entity_media
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process entity request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS process_entity
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process primitive value request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_primitive_value
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process primitive collection request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_primitive_coll
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process primitive request</p>
    "!
    "! @parameter iv_http_method     | <p class="shorttext synchronized" lang="en">HTTP method</p>
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS process_primitive
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process complex collection request</p>
    METHODS process_complex_coll
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process complex request</p>
    METHODS process_complex
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Process void request</p>
    METHODS process_void
      IMPORTING
        !iv_http_method    TYPE string
        !io_uri            TYPE REF TO /iwcor/if_od_uri
        !io_request_entity TYPE REF TO /iwcor/if_rest_entity OPTIONAL
        !io_response       TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Write data to response</p>
    "!
    "! @parameter io_provider        | <p class="shorttext synchronized" lang="en">OData response provider</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @parameter is_content_type    | <p class="shorttext synchronized" lang="en">Content type structure</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    METHODS write_to
      IMPORTING
        !io_provider     TYPE REF TO /iwcor/if_od_response_provider
        !io_response     TYPE REF TO /iwcor/if_rest_response
        !is_content_type TYPE /iwcor/if_od_svc_proc=>content_type_s OPTIONAL
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Get class name of instance</p>
    "!
    "! @parameter io_object    | <p class="shorttext synchronized" lang="en">Object</p>
    "! @parameter rv_classname | <p class="shorttext synchronized" lang="en">Class name</p>
    CLASS-METHODS get_classname
      IMPORTING
        !io_object          TYPE REF TO object
      RETURNING
        VALUE(rv_classname) TYPE string .
    "! <p class="shorttext synchronized" lang="en">Negotiate content type</p>
    "!
    "! @parameter it_supported_content_type | <p class="shorttext synchronized" lang="en">Supported content types</p>
    "! @parameter iv_header_accept          | <p class="shorttext synchronized" lang="en">Accept header</p>
    "! @parameter iv_format                 | <p class="shorttext synchronized" lang="en">Format</p>
    "! @parameter rs_content_type           | <p class="shorttext synchronized" lang="en">Content type structure</p>
    "! @raising   /iwcor/cx_od_error        | <p class="shorttext synchronized" lang="en">OData Error</p>
    CLASS-METHODS negotiate_content_type
      IMPORTING
        !it_supported_content_type TYPE /iwcor/if_od_svc_proc=>content_type_t
        !iv_header_accept          TYPE string
        !iv_format                 TYPE string OPTIONAL
      RETURNING
        VALUE(rs_content_type)     TYPE /iwcor/if_od_svc_proc=>content_type_s
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Validate content type</p>
    "!
    "! @parameter it_supported_content_type | <p class="shorttext synchronized" lang="en">Content type table</p>
    "! @parameter iv_content_type           | <p class="shorttext synchronized" lang="en">Content type</p>
    "! @raising   /iwcor/cx_od_error        | <p class="shorttext synchronized" lang="en">OData Error</p>
    CLASS-METHODS validate_content_type
      IMPORTING
        !it_supported_content_type TYPE /iwcor/if_od_svc_proc=>content_type_t
        !iv_content_type           TYPE string
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Parse batch request</p>
    "!
    "! @parameter io_request_entity  | <p class="shorttext synchronized" lang="en">REST Multipart Entity</p>
    "! @parameter io_context         | <p class="shorttext synchronized" lang="en">OData context</p>
    "! @parameter et_batch           | <p class="shorttext synchronized" lang="en">Batch data</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData error</p>
    CLASS-METHODS parse_batch_request
      IMPORTING
        !io_request_entity TYPE REF TO /iwcor/if_rest_mp_entity
        !io_context        TYPE REF TO /iwcor/if_od_cntxt
      EXPORTING
        !et_batch          TYPE /iwcor/if_od_proc_batch=>batch_t
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Write batch response</p>
    "!
    "! @parameter it_batch             | <p class="shorttext synchronized" lang="en">Batch data</p>
    "! @parameter io_response          | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @parameter iv_continue_on_error | <p class="shorttext synchronized" lang="en">Preference odata.continue-on-error</p>
    "! @raising   /iwcor/cx_od_error   | <p class="shorttext synchronized" lang="en">OData error</p>
    CLASS-METHODS write_batch_response
      IMPORTING
        !it_batch             TYPE /iwcor/if_od_proc_batch=>batch_t
        !io_response          TYPE REF TO /iwcor/if_rest_response
        !iv_continue_on_error TYPE abap_bool DEFAULT abap_false
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Write Content-ID</p>
    "!
    "! @parameter io_http_response_provider | <p class="shorttext synchronized" lang="en">HTTP Response provider</p>
    CLASS-METHODS write_content_id
      IMPORTING
        !id_handler_parameter      TYPE REF TO /iwcor/if_od_proc_batch=>handler_parameter_s
        !io_http_response_provider TYPE REF TO /iwcor/cl_rest_http_resp_prov .
  PRIVATE SECTION.

*"* private components of class /IWCOR/CL_OD_PROC_DISPATCHER
*"* do not include other source files here!!!
    "! <p class="shorttext synchronized" lang="en">DELETE THIS METHOD AFTER THE TEST PHASE</p>
    "!
    "! @parameter io_uri             | <p class="shorttext synchronized" lang="en">URI information</p>
    "! @parameter io_response        | <p class="shorttext synchronized" lang="en">REST Response</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS temporary_helper_uri_to_xml
      IMPORTING
        !io_uri      TYPE REF TO /iwcor/if_od_uri
        !io_response TYPE REF TO /iwcor/if_rest_response
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Get entity canonical URI</p>
    "!
    "! @parameter iv_service_root      | <p class="shorttext synchronized" lang="en">Service root</p>
    "! @parameter is_entity_set_info   | <p class="shorttext synchronized" lang="en">Entity set info structure</p>
    "! @parameter is_bound_action_info | <p class="shorttext synchronized" lang="en">Bound action info structure</p>
    "! @parameter it_property_path     | <p class="shorttext synchronized" lang="en">Property path table</p>
    "! @parameter it_key               | <p class="shorttext synchronized" lang="en">Key literal values</p>
    "! @parameter rv_uri               | <p class="shorttext synchronized" lang="en">URI</p>
    "! @raising   /iwcor/cx_od_error   | <p class="shorttext synchronized" lang="en">OData Error</p>
    METHODS get_entity_canonical_uri
      IMPORTING
        !iv_service_root      TYPE string
        !is_entity_set_info   TYPE /iwcor/if_od_uri=>entity_set_info_s
        !is_bound_action_info TYPE /iwcor/if_od_uri=>bound_action_info_s OPTIONAL
        !it_property_path     TYPE /iwcor/if_od_uri=>property_path_t OPTIONAL
        !it_key               TYPE string_table
      RETURNING
        VALUE(rv_uri)         TYPE string
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Set virus scan profile</p>
    "!
    "! @parameter io_service         | <p class="shorttext synchronized" lang="en">Service</p>
    "! @parameter io_entity          | <p class="shorttext synchronized" lang="en">REST Entity</p>
    "! @raising   /iwcor/cx_od_error | <p class="shorttext synchronized" lang="en">OData Error</p>
    CLASS-METHODS set_virus_scan_profile
      IMPORTING
        !io_service TYPE REF TO /iwcor/if_od_svc
        !io_entity  TYPE REF TO /iwcor/if_rest_entity
      RAISING
        /iwcor/cx_od_error .
    "! <p class="shorttext synchronized" lang="en">Validate batch part URI</p>
    "!
    "! @parameter iv_service_root          | <p class="shorttext synchronized" lang="en">Service Root</p>
    "! @parameter iv_uri                   | <p class="shorttext synchronized" lang="en">Request URI</p>
    "! @raising   /iwcor/cx_od_bad_request | <p class="shorttext synchronized" lang="en">OData client error - bad request</p>
    CLASS-METHODS validate_batch_part_uri
      IMPORTING
        !iv_service_root TYPE string
        !iv_uri          TYPE string
      RAISING
        /iwcor/cx_od_bad_request .
ENDCLASS.



CLASS /IWCOR/CL_OD_PROC_DISPATCHER IMPLEMENTATION.


  METHOD write_to.
    DATA:
      lv_handle       TYPE i,
      lv_content_type TYPE string.

    IF is_content_type IS NOT INITIAL.
      lv_content_type = io_provider->get_header( iv_name = if_http_header_fields=>content_type ).
      IF lv_content_type IS INITIAL.
        CONCATENATE is_content_type-type '/' is_content_type-subtype INTO lv_content_type.
        IF is_content_type-parameter IS NOT INITIAL.
          CONCATENATE lv_content_type ';' is_content_type-parameter INTO lv_content_type.
        ENDIF.
        io_provider->set_header( iv_name = if_http_header_fields=>content_type iv_value = lv_content_type ).
      ELSE.
*        " This is very restrictive. And: It is allowed to return different content types than requested. So it is up
*        " to the processor to set the correct content type (including parameters) if it decides to set a content type.
*        TRY.
*            "Parse content type.
*            /iwcor/cl_rest_http_utils=>parse_content_type(
*              EXPORTING
*                iv_media_range = lv_content_type
*              IMPORTING
*                ev_type        = lv_type
*                ev_subtype     = lv_subtype
*                ev_parameter   = lv_parameter ).
*          CATCH /iwcor/cx_rest_parser_error INTO lx_rest_parser_exception.    " REST negotiation error
*            RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
*              EXPORTING
*                previous = lx_rest_parser_exception.
*        ENDTRY.
*        IF lv_type <> is_content_type-type OR lv_subtype <> is_content_type-subtype.
*          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
*        ENDIF.
      ENDIF.
    ENDIF.
    start_runtime_measurement mo_context lv_handle io_provider 'WRITE_TO'. "#EC NOTEXT
    io_provider->write_to( io_response ).
    stop_runtime_measurement mo_context lv_handle.
  ENDMETHOD.                    "WRITE_TO


  METHOD write_content_id.
    DATA: ls_content_references  TYPE /iwcor/if_od_cntxt=>content_reference_s,
          lo_http_request_entity TYPE REF TO /iwcor/if_rest_entity,
          ld_content_references  TYPE REF TO /iwcor/if_od_cntxt=>content_reference_t.

    lo_http_request_entity = id_handler_parameter->request->get_entity( ).
    ld_content_references ?= id_handler_parameter->context->get_parameter_reference( /iwcor/cl_od_cntxt=>gc_param_content_references ).

    IF ld_content_references IS BOUND.
      READ TABLE ld_content_references->* WITH TABLE KEY entity = lo_http_request_entity INTO ls_content_references.
      IF sy-subrc = 0.
        io_http_response_provider->set_entity_header( iv_name  = gc_content_id iv_value = ls_content_references-id ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD write_batch_response.
    DATA:
      lo_entity                 TYPE REF TO /iwcor/if_rest_mp_entity,
      lo_multipart_entity       TYPE REF TO /iwcor/if_rest_mp_entity,
      lo_single_entity          TYPE REF TO /iwcor/if_rest_entity,
      lo_error_response         TYPE REF TO /iwcor/if_rest_response,
      lo_http_response_provider TYPE REF TO /iwcor/cl_rest_http_resp_prov,
      ld_batch                  TYPE REF TO /iwcor/if_od_proc_batch=>batch_s,
      ld_handler_parameter      TYPE REF TO /iwcor/if_od_proc_batch=>handler_parameter_s,
      lv_status                 TYPE i.

    lo_entity ?= io_response->create_entity( iv_multipart = abap_true ).
    lo_entity->set_header_field( iv_name = if_http_header_fields=>content_type iv_value = /iwcor/if_rest_media_type=>gc_multipart_mixed  ).
    LOOP AT it_batch REFERENCE INTO ld_batch.
      IF ld_batch->change_set IS BOUND.
        LOOP AT ld_batch->change_set->* REFERENCE INTO ld_handler_parameter.
          lv_status = ld_handler_parameter->response->get_status( ).
          IF /iwcor/cl_rest_status_code=>is_error( lv_status ) = abap_true.
            lo_error_response = ld_handler_parameter->response.
            EXIT.
          ENDIF.
        ENDLOOP.
        IF lo_error_response IS BOUND.
          CREATE OBJECT lo_http_response_provider.

          lo_http_response_provider->set_response( lo_error_response ).
          lo_single_entity = lo_entity->create_entity( ).

          lo_http_response_provider->write_to( lo_single_entity ).

          IF iv_continue_on_error <> abap_true.
            EXIT.
          ELSE.
            CLEAR lo_error_response.
          ENDIF.
        ELSE.
          lo_multipart_entity ?= lo_entity->create_entity( iv_multipart = abap_true ).
          lo_multipart_entity->set_header_field( iv_name = if_http_header_fields=>content_type iv_value = /iwcor/if_rest_media_type=>gc_multipart_mixed  ).
          LOOP AT ld_batch->change_set->* REFERENCE INTO ld_handler_parameter.
            CREATE OBJECT lo_http_response_provider.

            "Set Content-ID header in response, if available in request
            write_content_id( id_handler_parameter      = ld_handler_parameter
                              io_http_response_provider = lo_http_response_provider ).

            lo_http_response_provider->set_response( ld_handler_parameter->response ).
            lo_single_entity = lo_multipart_entity->create_entity( ).

            lo_http_response_provider->write_to( lo_single_entity ).
          ENDLOOP.
        ENDIF.
      ELSEIF ld_batch->operation IS BOUND.
        CREATE OBJECT lo_http_response_provider.
        lo_http_response_provider->set_response( ld_batch->operation->response ).
        lo_single_entity = lo_entity->create_entity( ).

        "Set Content-ID header in response, if available in request
        write_content_id( id_handler_parameter      = ld_batch->operation
                          io_http_response_provider = lo_http_response_provider ).

        lo_http_response_provider->write_to( lo_single_entity ).

        lv_status = ld_batch->operation->response->get_status( ).
        IF iv_continue_on_error <> abap_true AND /iwcor/cl_rest_status_code=>is_error( lv_status ) = abap_true.
          EXIT.
        ENDIF.
      ENDIF.
    ENDLOOP.
    io_response->set_status( iv_status = /iwcor/cl_rest_status_code=>gc_success_ok iv_reason_phrase = if_http_status=>reason_200 ).
  ENDMETHOD.


  METHOD validate_content_type.
    DATA:
      lv_content_type          TYPE string,
      lv_type                  TYPE string,
      lv_subtype               TYPE string,
      lv_parameter             TYPE string,
      lx_rest_parser_exception TYPE REF TO /iwcor/cx_rest_parser_error.

    lv_content_type = iv_content_type.
    TRANSLATE lv_content_type TO LOWER CASE.
    CONDENSE lv_content_type NO-GAPS.

    IF lv_content_type CS ';charset='.
      REPLACE FIRST OCCURRENCE OF REGEX ';charset=[^;]+' IN lv_content_type WITH `` ##REGEX_POSIX.
    ENDIF.

    " remove parameters, that can be silently ignored [JSON/4.4];
    IF lv_content_type CS 'odata.streaming='.
      REPLACE FIRST OCCURRENCE OF REGEX ';odata.streaming=[^;]+' IN lv_content_type WITH `` ##REGEX_POSIX.
    ENDIF.

    IF lv_content_type IS INITIAL.
      RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
    ELSEIF it_supported_content_type IS NOT INITIAL.
      TRY.
          "Parse content type.
          /iwcor/cl_rest_http_utils=>parse_content_type(
            EXPORTING
              iv_media_range = lv_content_type
            IMPORTING
              ev_type        = lv_type
              ev_subtype     = lv_subtype
              ev_parameter   = lv_parameter ).
        CATCH /iwcor/cx_rest_parser_error INTO lx_rest_parser_exception.    " REST negotiation error
          RAISE EXCEPTION TYPE /iwcor/cx_od_unsupp_media_type
            EXPORTING
              previous = lx_rest_parser_exception.
      ENDTRY.
      READ TABLE it_supported_content_type WITH KEY type      = lv_type
                                                    subtype   = lv_subtype
                                                    parameter = lv_parameter
                                          TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE /iwcor/cx_od_unsupp_media_type.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD validate_batch_part_uri.
    DATA lv_uri TYPE string.

    lv_uri = cl_http_utility=>if_http_utility~normalize_url( iv_uri ).

    IF lv_uri CS iv_service_root.
      IF sy-fdpos = 0.
        RETURN.
      ENDIF.
    ENDIF.

    RAISE EXCEPTION NEW /iwcor/cx_od_uri_syntax_error( textid = /iwcor/cx_od_uri_syntax_error=>batch_operation_uri ).
  ENDMETHOD.


  METHOD temporary_helper_uri_to_xml.

    DATA: lv_uri TYPE xstring.
    DATA: lo_provider TYPE REF TO /iwcor/cl_od_ep_binary.
    DATA: lo_response_provider TYPE REF TO /iwcor/if_od_response_provider.


    TYPES:
      BEGIN OF cross_join_info,
        entity_set_1 TYPE string,
        entity_set_2 TYPE string,
      END OF cross_join_info.

    TYPES:
      BEGIN OF system_query_options_s,
        top       TYPE i,
        skip      TYPE i,
        format    TYPE string,
        count     TYPE string,
        skiptoken TYPE string,
      END OF system_query_options_s.


    TYPES:
      BEGIN OF singleton_info,
        singleton_name      TYPE string,
        singleton_type_cast TYPE string,
      END OF singleton_info.

    TYPES:
      BEGIN OF key_param_s,
        name  TYPE string,
        value TYPE string,
      END OF key_param_s.

    TYPES:
      key_t TYPE STANDARD TABLE OF key_param_s WITH DEFAULT KEY.

    TYPES:
      BEGIN OF property_s,
        name                     TYPE string,
        type                     TYPE /iwcor/if_od_edm_type=>type_kind,
        key_predicate            TYPE key_t,
        ref_constr_key_predicate TYPE key_t,
      END OF property_s.

    TYPES:
      param_t    TYPE STANDARD TABLE OF key_param_s WITH DEFAULT KEY,
      property_t TYPE STANDARD TABLE OF property_s WITH DEFAULT KEY.

    TYPES:
      BEGIN OF qname_s,
        namespace TYPE string,
        name      TYPE string,
      END OF qname_s.

    TYPES:
      BEGIN OF entity_set_info_s,
        entity_set_name              TYPE string,
        key                          TYPE key_t,
        entity_type_cast_entity_coll TYPE qname_s,
        key_predicate_on_type_cast   TYPE abap_bool,
        entity_type_cast_entity      TYPE qname_s,
      END OF entity_set_info_s.


    TYPES:
      BEGIN OF property_path_info_s,
        property_name1 TYPE string,
        property_name2 TYPE string,
        property_name3 TYPE string,
      END OF property_path_info_s.

    TYPES:
      BEGIN OF function_import_info_s,
        fi_name                        TYPE string,
        fi_para                        TYPE param_t,
        fi_key                         TYPE key_t,
        fi_entity_type_cast_entity_col TYPE qname_s,
        fi_entity_type_cast_entity     TYPE qname_s,
        fi_key_predicate_on_type_cast  TYPE abap_bool,
        fi_complex_type_cast           TYPE qname_s,
      END OF function_import_info_s.

    TYPES:
      BEGIN OF bound_function_info_s,
        bf_name                    TYPE qname_s,
        bf_key                     TYPE key_t,
        bf_param                   TYPE param_t,
        entity_type_cast_coll      TYPE qname_s,
        entity_type_cast           TYPE qname_s,
        key_predicate_on_type_cast TYPE abap_bool,
        complex_type_cast          TYPE qname_s,
        property_path              TYPE property_t,
      END OF bound_function_info_s.

    DATA:
      ls_key                  TYPE key_param_s,
      ls_qname                TYPE qname_s,
      ls_bound_function_info  TYPE bound_function_info_s,
      ls_system_query_options TYPE system_query_options_s.


    DATA:
      lv_uri_type             TYPE string,

      ls_entity_set_info      TYPE entity_set_info_s,
      lo_prop                 TYPE REF TO /iwcor/if_od_edm_property,
      ls_key_predicate_info   TYPE /iwcor/if_od_uri=>key_predicate_info_s,

      ls_singleton_info       TYPE singleton_info,

      ls_function_import_info TYPE function_import_info_s,
      lv_action_import_name   TYPE string,
      lo_crossjoin_entity_set TYPE REF TO /iwcor/if_od_edm_entity_set,
      lv_name                 TYPE string,

      lv_bound_action_name    TYPE string.

    DATA:
      ls_key_predicate TYPE /iwcor/if_od_uri=>key_predicate_info_s,
      lo_nav_prop      TYPE REF TO /iwcor/if_od_uri_prop_nav,
      ls_property_path TYPE property_s,
      lt_property_path TYPE property_t,
      lo_property      TYPE REF TO /iwcor/if_od_uri_prop.

    DATA:
      lt_crossjoin_names         TYPE string_table,
      ls_uri_bound_function_info TYPE REF TO /iwcor/if_od_uri=>bound_function_path_info_s,
      lt_bound_function_table    TYPE STANDARD TABLE OF bound_function_info_s WITH DEFAULT KEY.


    "EntitySet Info
    lv_uri_type = io_uri->uri_type.

    IF io_uri->entity_set_info-entity_set IS BOUND.
      ls_entity_set_info-entity_set_name = io_uri->entity_set_info-entity_set->get_name( ).

      IF io_uri->entity_set_info-entity_type_cast_entity_coll IS BOUND.
        ls_qname-namespace = io_uri->entity_set_info-entity_type_cast_entity_coll->get_namespace( ).
        ls_qname-name = io_uri->entity_set_info-entity_type_cast_entity_coll->get_name( ).
        ls_entity_set_info-entity_type_cast_entity_coll = ls_qname.
      ENDIF.

      LOOP AT io_uri->entity_set_info-key_predicate INTO ls_key_predicate_info.
        lo_prop = ls_key_predicate_info-property_ref->get_property( ).
        ls_key-name = lo_prop->get_name( ).
        ls_key-value = ls_key_predicate_info-value.
        APPEND ls_key TO ls_entity_set_info-key.
      ENDLOOP.

      ls_entity_set_info-key_predicate_on_type_cast = io_uri->entity_set_info-key_predicate_on_type_cast.

      IF io_uri->entity_set_info-entity_type_cast_entity IS BOUND.
        ls_qname-namespace = io_uri->entity_set_info-entity_type_cast_entity->get_namespace( ).
        ls_qname-name = io_uri->entity_set_info-entity_type_cast_entity->get_name( ).
        ls_entity_set_info-entity_type_cast_entity = ls_qname.
      ENDIF.

    ENDIF.

    "Singleton Info
    IF io_uri->singleton_info-singleton IS BOUND.
      ls_singleton_info-singleton_name = io_uri->singleton_info-singleton->get_name( ).

      IF io_uri->singleton_info-entity_type_cast IS BOUND.
        ls_singleton_info-singleton_type_cast = io_uri->singleton_info-entity_type_cast->get_name( ).
      ENDIF.
    ENDIF.

    "Action Import
    IF io_uri->action_import_info-action_import IS BOUND.
      lv_action_import_name = io_uri->action_import_info-action_import->get_name( ).
    ENDIF.

    "Crossjoin /iwcor/if_od_edm_entity_set
    IF io_uri->crossjoin_entity_set IS NOT INITIAL.
      CLEAR lo_crossjoin_entity_set.
      LOOP AT io_uri->crossjoin_entity_set INTO lo_crossjoin_entity_set.
        lv_name = lo_crossjoin_entity_set->get_name( ).
        APPEND lv_name TO lt_crossjoin_names.
      ENDLOOP.
    ENDIF.

    "Property Path
    IF io_uri->property_path IS NOT INITIAL.

      LOOP AT io_uri->property_path INTO lo_property.
        CLEAR ls_property_path.
        ls_property_path-name = lo_property->property->get_name( ).
        ls_property_path-type = lo_property->kind.
        CASE lo_property->kind.
          WHEN /iwcor/if_od_edm_type=>kind_primitive.
          WHEN /iwcor/if_od_edm_type=>kind_complex.
          WHEN /iwcor/if_od_edm_type=>kind_navigation.
            lo_nav_prop ?= lo_property.
            LOOP AT lo_nav_prop->key_predicate INTO ls_key_predicate.
              lo_prop = ls_key_predicate-property_ref->get_property( ).
              ls_key-name = lo_prop->get_name( ).
              ls_key-value = ls_key_predicate-value.
              APPEND ls_key TO ls_property_path-key_predicate.
            ENDLOOP.
            LOOP AT lo_nav_prop->ref_constr_key_predicate INTO ls_key_predicate.
              CLEAR ls_key.
              lo_prop = ls_key_predicate-property_ref->get_property( ).
              ls_key-name = lo_prop->get_name( ).
              ls_key-value = ls_key_predicate-value.
              APPEND ls_key TO ls_property_path-ref_constr_key_predicate.
            ENDLOOP.
        ENDCASE.
        APPEND ls_property_path TO lt_property_path.
      ENDLOOP.

    ENDIF.

    "bound Action
    IF io_uri->bound_action_info-action IS BOUND.
      lv_bound_action_name = io_uri->bound_action_info-action->get_name( ).
    ENDIF.


    "function import
    IF io_uri->function_import_info-function_import IS BOUND.
      ls_function_import_info-fi_name = io_uri->function_import_info-function_import->get_name( ).

      IF io_uri->function_import_info-entity_type_cast_entity_coll IS BOUND.
        ls_qname-namespace = io_uri->function_import_info-entity_type_cast_entity_coll->get_namespace( ).
        ls_qname-name = io_uri->function_import_info-entity_type_cast_entity_coll->get_name( ).
        ls_function_import_info-fi_entity_type_cast_entity_col = ls_qname.
      ENDIF.

      IF io_uri->function_import_info-entity_type_cast_entity IS BOUND.
        ls_qname-namespace = io_uri->function_import_info-entity_type_cast_entity->get_namespace( ).
        ls_qname-name = io_uri->function_import_info-entity_type_cast_entity->get_name( ).
        ls_function_import_info-fi_entity_type_cast_entity = ls_qname.
      ENDIF.

      ls_function_import_info-fi_key_predicate_on_type_cast = io_uri->function_import_info-key_predicate_on_type_cast.

      IF io_uri->function_import_info-complex_type_cast IS BOUND.
        ls_qname-namespace = io_uri->function_import_info-complex_type_cast->get_namespace( ).
        ls_qname-name = io_uri->function_import_info-complex_type_cast->get_name( ).
        ls_function_import_info-fi_complex_type_cast = ls_qname.
      ENDIF.



      LOOP AT io_uri->function_import_info-key_predicate INTO ls_key_predicate_info.
        lo_prop = ls_key_predicate_info-property_ref->get_property( ).
        ls_key-name = lo_prop->get_name( ).
        ls_key-value = ls_key_predicate_info-value.
        APPEND ls_key TO ls_function_import_info-fi_key.
      ENDLOOP.

      DATA:
        ls_parameter TYPE /iwcor/if_od_uri=>parameter_info_s.

      LOOP AT io_uri->function_import_info-parameters INTO ls_parameter.
        ls_key-name = ls_parameter-parameter->get_name( ).
        IF ls_parameter-null = abap_true.
          ls_key-value = 'null'.
        ELSE.
          ls_key-value = ls_parameter-value.
        ENDIF.
        APPEND ls_key TO ls_function_import_info-fi_para.
      ENDLOOP.

    ENDIF.


    "bound function
    IF io_uri->bound_functions_path IS NOT INITIAL.

      LOOP AT io_uri->bound_functions_path INTO ls_uri_bound_function_info.

        ls_bound_function_info-bf_name-namespace =  ls_uri_bound_function_info->function->get_namespace( ).
        ls_bound_function_info-bf_name-name =  ls_uri_bound_function_info->function->get_name( ).

        IF ls_uri_bound_function_info->entity_type_cast_entity_coll IS BOUND.
          ls_bound_function_info-entity_type_cast_coll-namespace = ls_uri_bound_function_info->entity_type_cast_entity_coll->get_namespace( ).
          ls_bound_function_info-entity_type_cast_coll-name = ls_uri_bound_function_info->entity_type_cast_entity_coll->get_name( ).
        ENDIF.

        IF ls_uri_bound_function_info->entity_type_cast_entity IS BOUND.
          ls_bound_function_info-entity_type_cast-namespace = ls_uri_bound_function_info->entity_type_cast_entity->get_namespace( ).
          ls_bound_function_info-entity_type_cast-name = ls_uri_bound_function_info->entity_type_cast_entity->get_name( ).
        ENDIF.

        ls_bound_function_info-key_predicate_on_type_cast = io_uri->function_import_info-key_predicate_on_type_cast.

        IF ls_uri_bound_function_info->complex_type_cast IS BOUND.
          ls_bound_function_info-complex_type_cast-namespace = ls_uri_bound_function_info->complex_type_cast->get_namespace( ).
          ls_bound_function_info-complex_type_cast-name = ls_uri_bound_function_info->complex_type_cast->get_name( ).
        ENDIF.

        LOOP AT ls_uri_bound_function_info->key_predicate INTO ls_key_predicate_info.
          lo_prop = ls_key_predicate_info-property_ref->get_property( ).
          ls_key-name = lo_prop->get_name( ).
          ls_key-value = ls_key_predicate_info-value.
          APPEND ls_key TO ls_bound_function_info-bf_key.
        ENDLOOP.


        LOOP AT ls_uri_bound_function_info->parameters INTO ls_parameter.
          ls_key-name = ls_parameter-parameter->get_name( ).
          IF ls_parameter-null = abap_true.
            ls_key-value = 'null'.
          ELSE.
            ls_key-value = ls_parameter-value.
          ENDIF.
          APPEND ls_key TO ls_bound_function_info-bf_param.
        ENDLOOP.

        "bf - Property Path
        IF ls_uri_bound_function_info->property_path IS NOT INITIAL.
          CLEAR lt_property_path.
          LOOP AT ls_uri_bound_function_info->property_path INTO lo_property.
            CLEAR ls_property_path.
            ls_property_path-name = lo_property->property->get_name( ).
            ls_property_path-type = lo_property->kind.
            CASE lo_property->kind.
              WHEN /iwcor/if_od_edm_type=>kind_primitive.
              WHEN /iwcor/if_od_edm_type=>kind_complex.
              WHEN /iwcor/if_od_edm_type=>kind_navigation.
                lo_nav_prop ?= lo_property.
                LOOP AT lo_nav_prop->key_predicate INTO ls_key_predicate.
                  lo_prop = ls_key_predicate_info-property_ref->get_property( ).
                  ls_key-name = lo_prop->get_name( ).
                  ls_key-value = ls_key_predicate-value.
                  APPEND ls_key TO ls_property_path-key_predicate.
                ENDLOOP.
                LOOP AT lo_nav_prop->ref_constr_key_predicate INTO ls_key_predicate.
                  CLEAR ls_key.
                  lo_prop = ls_key_predicate_info-property_ref->get_property( ).
                  ls_key-name = lo_prop->get_name( ).
                  ls_key-value = ls_key_predicate-value.
                  APPEND ls_key TO ls_property_path-ref_constr_key_predicate.
                ENDLOOP.
            ENDCASE.
            APPEND ls_property_path TO lt_property_path.
          ENDLOOP.
          ls_bound_function_info-property_path = lt_property_path.
        ENDIF.

        APPEND ls_bound_function_info TO lt_bound_function_table.

      ENDLOOP.

    ENDIF.

    "System query options
    ls_system_query_options-top         = io_uri->top.
    ls_system_query_options-skip        = io_uri->skip.
    ls_system_query_options-skiptoken   = io_uri->skiptoken.
    ls_system_query_options-format      = io_uri->format.
    ls_system_query_options-count       = io_uri->count_system_query_options.

    CALL TRANSFORMATION id
      SOURCE
        uri_type = lv_uri_type
        crossjoin_info = lt_crossjoin_names "ls_crossjoin
        entity_set_info = ls_entity_set_info
        system_query_options = ls_system_query_options
        singleton_info = ls_singleton_info
        function_import_info = ls_function_import_info
        action_import_name = lv_action_import_name
        property_path = lt_property_path
        bound_function_info_table = lt_bound_function_table
        bound_action_name = lv_bound_action_name

        count = io_uri->count
        value = io_uri->value
        ref   = io_uri->ref
        all   = io_uri->all
*        entity_id = io_uri->entity_id-entity_id
      RESULT XML lv_uri.

    CREATE OBJECT lo_provider.
    lo_provider->set_binary_data( lv_uri ).
    lo_provider->set_content_type( /iwcor/if_rest_media_type=>gc_appl_xml ).
    CREATE OBJECT lo_response_provider TYPE /iwcor/cl_od_response_provider
      EXPORTING
        io_entity_provider = lo_provider.
    lo_response_provider->write_to( io_response ).


  ENDMETHOD.                    "temporary_helper_uri_to_xml


  METHOD set_virus_scan_profile.
    DATA:
      lo_accessor TYPE REF TO /iwcor/if_od_edm_vsi_accessor,
      lo_vsi      TYPE REF TO /iwcor/if_od_vsi.

    TRY.
        lo_accessor ?= io_service->get_entity_data_model( ).
      CATCH cx_sy_move_cast_error.                      "#EC NO_HANDLER
    ENDTRY.
    ASSERT ID /iwcor/sodstd CONDITION lo_accessor IS BOUND.
    lo_vsi = lo_accessor->get_vsi( ).
    IF lo_vsi IS BOUND.
      io_entity->set_virus_scan_profile( lo_vsi->profile ).
    ENDIF.
  ENDMETHOD.


  METHOD process_void.

    DATA: lv_handle              TYPE i,
          lo_processor           TYPE REF TO /iwcor/if_od_proc_void,
          lv_header_content_type TYPE string.


*    "variables for key property check
*    lo_property TYPE REF TO /iwcor/if_od_edm_property,
*    lo_end_entity_set TYPE REF TO /iwcor/if_od_edm_entity_set,
*    lo_entity_type TYPE REF TO /iwcor/if_od_edm_entity_type,
*    lt_key TYPE string_table,
*    lv_name TYPE string,
*    lv_header_content_type TYPE string.

*  init_entity_set_func_import iv_http_method io_uri lo_entity_set ls_function_import_info.

    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_void_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

*    Aufruf der verschiedenen Prozessoren todo Bound action
        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_ba.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_VOID~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_processor->execute_bound_action(
                io_request_entity       = io_request_entity             " REST representation
                is_bound_action_info    = io_uri->bound_action_info     " Bound action info structure
                is_entity_set_info      = io_uri->entity_set_info       " EntitySet info structure
                is_singleton_info       = io_uri->singleton_info        " Singleton info structure
                is_function_import_info = io_uri->function_import_info  " Function import info structure
                it_property_path        = io_uri->property_path         " Property path
                it_bound_function_path  = io_uri->bound_functions_path  " Bound function path table with path
                is_content_type         = ls_content_type ).            " Content type structure: type, subtype, parameter
            stop_runtime_measurement mo_context lv_handle.

            " handle response
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).

          WHEN /iwcor/if_od_uri=>gc_type_ai.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_VOID~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_processor->execute_action_import(
              io_request_entity = io_request_entity
              is_action_import_info  = io_uri->action_import_info
              is_content_type   = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

            " handle response
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
        ENDCASE.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_service_doc.

    DATA:
      lv_handle    TYPE i,
      lo_provider  TYPE REF TO /iwcor/if_od_response_provider,
      lo_processor TYPE REF TO /iwcor/if_od_proc_service_doc.


    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    " negotiate content type
    ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                              iv_header_accept = mv_header_accept
                                              iv_format = io_uri->format ).

    lo_processor = mo_service->get_service_doc_processor( ).

    " call request processor
    start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_SERVICE_DOC~READ'. "#EC NOTEXT
    lo_provider       = lo_processor->read(
      is_content_type = ls_content_type ).
    stop_runtime_measurement mo_context lv_handle.

    " handle response
    IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
      write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
      io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
    ELSE.
      RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
    ENDIF.

  ENDMETHOD.                    "PROCESS_SERVICE


  METHOD process_primitive_value.

    DATA:
      lv_handle                 TYPE i,
      lv_lines                  TYPE i,
      lt_parameter_name         TYPE string_table,
      lo_function               TYPE REF TO /iwcor/if_od_edm_function,
      lo_return_type            TYPE REF TO /iwcor/if_od_edm_return_type,
      lo_property               TYPE REF TO /iwcor/if_od_uri_prop,
      lo_type                   TYPE REF TO /iwcor/if_od_edm_prim_type,
      lr_bound_function_path    TYPE REF TO /iwcor/if_od_uri=>bound_function_path_info_s,
      lo_provider               TYPE REF TO /iwcor/if_od_response_provider,
      lo_processor              TYPE REF TO /iwcor/if_od_proc_prim_val,
      lv_content_type           TYPE string,
      ls_content_type           TYPE /iwcor/if_od_svc_proc=>content_type_s,
      lt_supported_content_type TYPE /iwcor/if_od_svc_proc=>content_type_t,
*    lo_end_entity_set TYPE REF TO /iwcor/if_od_edm_entity_set,
*    lo_entity_type    TYPE REF TO /iwcor/if_od_edm_entity_type,
*    lt_key_properties TYPE /iwcor/if_od_edm_entity_type=>key_property_ref_t,
      lv_header_content_type    TYPE string,
      lo_service                TYPE REF TO /iwcor/if_od_svc.


*  init_entity_set_func_import iv_http_method io_uri lo_entity_set ls_function_import_info.
    " get property type
    IF io_uri->function_import_info IS NOT INITIAL AND io_uri->property_path IS INITIAL.
      lt_parameter_name = /iwcor/cl_od_uri_helper=>get_parameter_names( it_parameter = io_uri->function_import_info-parameters ).
      lo_function = io_uri->function_import_info-function_import->get_function( lt_parameter_name ).
      lo_return_type = lo_function->get_return_type( ).
      lo_type ?= lo_return_type->get_type( ).
    ELSE.
      IF io_uri->bound_functions_path IS NOT INITIAL.
        lv_lines = lines( io_uri->bound_functions_path ).
        READ TABLE io_uri->bound_functions_path INDEX lv_lines INTO lr_bound_function_path.
        IF lr_bound_function_path->property_path IS INITIAL.
          lo_return_type = lr_bound_function_path->function->get_return_type( ).
          lo_type ?= lo_return_type->get_type( ).
        ELSE.
          lv_lines = lines( lr_bound_function_path->property_path ).
          READ TABLE lr_bound_function_path->property_path INDEX lv_lines INTO lo_property.
          lo_type ?= lo_property->property->get_type( ).
        ENDIF.
      ELSE.
        lv_lines = lines( io_uri->property_path ).
        READ TABLE io_uri->property_path INDEX lv_lines INTO lo_property.
        lo_type ?= lo_property->property->get_type( ).
      ENDIF.
    ENDIF.

    IF lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_enum OR
       lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_definition.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_binary OR
       lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_stream.
      lt_supported_content_type = mo_service->get_supported_content_types( iv_uri_type = io_uri->uri_type ).
    ELSE.
      ls_content_type-type      = 'text'.                   "#EC NOTEXT
      ls_content_type-subtype   = 'plain'.                  "#EC NOTEXT
      ls_content_type-parameter = ' '.
      APPEND ls_content_type TO lt_supported_content_type.
    ENDIF.

    lo_processor = mo_service->get_primitive_value_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type(
          it_supported_content_type = lt_supported_content_type
          iv_header_accept          = mv_header_accept
          iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_VAL~READ'. "#EC NOTEXT
        IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_binary OR
           lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_stream.
          lo_provider = lo_processor->read(
            is_entity_set_info      = io_uri->entity_set_info
            is_singleton_info       = io_uri->singleton_info
            is_function_import_info = io_uri->function_import_info
            it_property_path        = io_uri->property_path
            it_bound_function_path  = io_uri->bound_functions_path
            is_content_type         = ls_content_type ).
        ELSE.
          lo_provider = lo_processor->read(
            is_entity_set_info      = io_uri->entity_set_info
            is_singleton_info       = io_uri->singleton_info
            is_function_import_info = io_uri->function_import_info
            it_property_path        = io_uri->property_path
            it_bound_function_path  = io_uri->bound_functions_path ).
        ENDIF.
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_binary.
              " set default content type for Edm.Binary only
              lv_content_type = io_response->get_header_field( iv_name = if_http_header_fields=>content_type ).
              IF lv_content_type IS INITIAL.
                io_response->set_header_field(
                  iv_name  =  if_http_header_fields=>content_type
                  iv_value =  /iwcor/if_rest_media_type=>gc_appl_octet_stream ).
              ENDIF.
            ENDIF.
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_put.

        " content type from request
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        validate_content_type(
          it_supported_content_type = lt_supported_content_type
          iv_content_type = lv_header_content_type ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_VAL~UPDATE'. "#EC NOTEXT
        IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_binary OR
           lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_stream.
          " virus scanning
          lo_service = mo_context->get_service( ).
          set_virus_scan_profile( io_service = lo_service io_entity = io_request_entity ).

          IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_stream.
            /iwcor/cl_rest_http_utils=>parse_content_type(
              EXPORTING
                iv_media_range = lv_header_content_type
              IMPORTING
                ev_type        = ls_content_type-type
                ev_subtype     = ls_content_type-subtype
                ev_parameter   = ls_content_type-parameter ).
          ENDIF.

          lo_provider = lo_processor->update(
            io_request_entity  = io_request_entity
            is_entity_set_info = io_uri->entity_set_info
            is_singleton_info  = io_uri->singleton_info
            it_property_path   = io_uri->property_path
            is_content_type    = ls_content_type ).

        ELSE.
          lo_provider = lo_processor->update(
            io_request_entity  = io_request_entity
            is_entity_set_info = io_uri->entity_set_info
            is_singleton_info  = io_uri->singleton_info
            it_property_path   = io_uri->property_path ).
        ENDIF.
        stop_runtime_measurement mo_context lv_handle.

        "handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            IF lo_type->id = /iwcor/if_od_edm_prim_type=>gc_type_id_edm_binary.
              " Set default content type, if needed
              lv_content_type = io_response->get_header_field( iv_name = if_http_header_fields=>content_type ).
              IF lv_content_type IS INITIAL.
                io_response->set_header_field(
                  iv_name  =  if_http_header_fields=>content_type
                  iv_value =  /iwcor/if_rest_media_type=>gc_appl_octet_stream ).
              ENDIF.
            ENDIF.
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_delete.

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_VAL~DELETE'. "#EC NOTEXT
        lo_processor->delete(
          is_entity_set_info = io_uri->entity_set_info
          is_singleton_info  = io_uri->singleton_info
          it_property_path   = io_uri->property_path ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_primitive_coll.

    DATA: lt_parameter_name      TYPE string_table,
          lo_function            TYPE REF TO /iwcor/if_od_edm_function,
          lo_action              TYPE REF TO /iwcor/if_od_edm_action,
          lo_return_type         TYPE REF TO /iwcor/if_od_edm_return_type,
          lv_lines               TYPE i,
          lo_property            TYPE REF TO /iwcor/if_od_uri_prop,
          lo_type                TYPE REF TO /iwcor/if_od_edm_prim_type,
          lr_bound_function_path TYPE REF TO /iwcor/if_od_uri=>bound_function_path_info_s,
          lv_handle              TYPE i,
          lo_provider            TYPE REF TO /iwcor/if_od_response_provider,
          lo_processor           TYPE REF TO /iwcor/if_od_proc_prim_coll,
          lv_header_content_type TYPE string.


    " get property type
    IF io_uri->function_import_info IS NOT INITIAL AND io_uri->property_path IS INITIAL.
      lt_parameter_name = /iwcor/cl_od_uri_helper=>get_parameter_names( it_parameter = io_uri->function_import_info-parameters ).
      lo_function = io_uri->function_import_info-function_import->get_function( lt_parameter_name ).
      lo_return_type = lo_function->get_return_type( ).
      lo_type ?= lo_return_type->get_type( ).
    ELSE.
      IF io_uri->action_import_info-action_import IS BOUND.
        lo_action = io_uri->action_import_info-action_import->get_action( ).
        lo_return_type = lo_action->get_return_type( ).
        lo_type ?= lo_return_type->get_type( ).
      ELSEIF io_uri->bound_action_info-action IS BOUND.
        lo_return_type = io_uri->bound_action_info-action->get_return_type( ).
        lo_type ?= lo_return_type->get_type( ).
      ELSEIF io_uri->bound_functions_path IS NOT INITIAL.
        lv_lines = lines( io_uri->bound_functions_path ).
        READ TABLE io_uri->bound_functions_path INDEX lv_lines INTO lr_bound_function_path.
        IF lr_bound_function_path->property_path IS INITIAL.
          lo_return_type = lr_bound_function_path->function->get_return_type( ).
          lo_type ?= lo_return_type->get_type( ).
        ELSE.
          lv_lines = lines( lr_bound_function_path->property_path ).
          READ TABLE lr_bound_function_path->property_path INDEX lv_lines INTO lo_property.
          lo_type ?= lo_property->property->get_type( ).
        ENDIF.
      ELSE.
        lv_lines = lines( io_uri->property_path ).
        READ TABLE io_uri->property_path INDEX lv_lines INTO lo_property.
        lo_type ?= lo_property->property->get_type( ).
      ENDIF.
    ENDIF.

    IF lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_enum OR
       lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_definition.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_primitive_coll_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_COLL~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
            is_entity_set_info       = io_uri->entity_set_info
            is_singleton_info        = io_uri->singleton_info
            is_function_import_info  = io_uri->function_import_info
            it_property_path         = io_uri->property_path
            it_bound_function_path   = io_uri->bound_functions_path
            io_filter                = io_uri->filter
            iv_count                 = io_uri->count_system_query_options
            io_orderby               = io_uri->orderby
            iv_skip                  = io_uri->skip
            iv_skiptoken             = io_uri->skiptoken
            iv_top                   = io_uri->top
            is_content_type          = ls_content_type "$format or Accept header
        ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
          write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_ba_prop_prim_coll.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_COLL~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_provider = lo_processor->execute_bound_action(
                io_request_entity        = io_request_entity  " REST representation
                is_bound_action_info     = io_uri->bound_action_info
                is_entity_set_info       = io_uri->entity_set_info
                is_singleton_info        = io_uri->singleton_info
                is_function_import_info  = io_uri->function_import_info
                it_property_path         = io_uri->property_path
                it_bound_function_path   = io_uri->bound_functions_path
                is_content_type          = ls_content_type ). "$format or Accept header)
            stop_runtime_measurement mo_context lv_handle.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_prim_coll.          " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM_COLL~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_provider = lo_processor->execute_action_import(
              io_request_entity = io_request_entity
              is_action_import_info  = io_uri->action_import_info
              io_filter         = io_uri->filter
              iv_count          = io_uri->count_system_query_options
              io_orderby        = io_uri->orderby
              iv_skip           = io_uri->skip
              iv_skiptoken      = io_uri->skiptoken
              iv_top            = io_uri->top
              is_content_type   = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

        ENDCASE.
        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_primitive.

    DATA: lt_parameter_name      TYPE string_table,
          lo_function            TYPE REF TO /iwcor/if_od_edm_function,
          lo_action              TYPE REF TO /iwcor/if_od_edm_action,
          lo_return_type         TYPE REF TO /iwcor/if_od_edm_return_type,
          lv_lines               TYPE i,
          lo_property            TYPE REF TO /iwcor/if_od_uri_prop,
          lo_type                TYPE REF TO /iwcor/if_od_edm_prim_type,
          lr_bound_function_path TYPE REF TO /iwcor/if_od_uri=>bound_function_path_info_s,
          lv_handle              TYPE i,
          lo_provider            TYPE REF TO /iwcor/if_od_response_provider,
          lo_processor           TYPE REF TO /iwcor/if_od_proc_prim,
          lv_header_content_type TYPE string.


*    "variables for key property check
*    lo_property TYPE REF TO /iwcor/if_od_edm_property,
*    lo_end_entity_set TYPE REF TO /iwcor/if_od_edm_entity_set,
*    lo_entity_type TYPE REF TO /iwcor/if_od_edm_entity_type,
*    lt_key TYPE string_table,
*    lv_name TYPE string,

*  init_entity_set_func_import iv_http_method io_uri lo_entity_set ls_function_import_info.
    " get property type
    IF io_uri->function_import_info IS NOT INITIAL AND io_uri->property_path IS INITIAL.
      lt_parameter_name = /iwcor/cl_od_uri_helper=>get_parameter_names( it_parameter = io_uri->function_import_info-parameters ).
      lo_function = io_uri->function_import_info-function_import->get_function( lt_parameter_name ).
      lo_return_type = lo_function->get_return_type( ).
      lo_type ?= lo_return_type->get_type( ).
    ELSE.
      IF io_uri->action_import_info-action_import IS BOUND.
        lo_action = io_uri->action_import_info-action_import->get_action( ).
        lo_return_type = lo_action->get_return_type( ).
        lo_type ?= lo_return_type->get_type( ).
      ELSEIF io_uri->bound_action_info-action IS BOUND.
        lo_return_type = io_uri->bound_action_info-action->get_return_type( ).
        lo_type ?= lo_return_type->get_type( ).
      ELSEIF io_uri->bound_functions_path IS NOT INITIAL.
        lv_lines = lines( io_uri->bound_functions_path ).
        READ TABLE io_uri->bound_functions_path INDEX lv_lines INTO lr_bound_function_path.
        IF lr_bound_function_path->property_path IS INITIAL.
          lo_return_type = lr_bound_function_path->function->get_return_type( ).
          lo_type ?= lo_return_type->get_type( ).
        ELSE.
          lv_lines = lines( lr_bound_function_path->property_path ).
          READ TABLE lr_bound_function_path->property_path INDEX lv_lines INTO lo_property.
          lo_type ?= lo_property->property->get_type( ).
        ENDIF.
      ELSE.
        lv_lines = lines( io_uri->property_path ).
        READ TABLE io_uri->property_path INDEX lv_lines INTO lo_property.
        lo_type ?= lo_property->property->get_type( ).
      ENDIF.
    ENDIF.

    IF lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_enum OR
       lo_type->/iwcor/if_od_edm_type~kind = /iwcor/if_od_edm_type=>kind_definition.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_primitive_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
          is_entity_set_info      = io_uri->entity_set_info
          is_singleton_info       = io_uri->singleton_info
          is_function_import_info = io_uri->function_import_info
          it_property_path        = io_uri->property_path
          it_bound_function_path  = io_uri->bound_functions_path
          is_content_type         = ls_content_type ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND .
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

*    WHEN /IWCOR/if_REST_request=>gc_method_put OR
*         /IWCOR/if_REST_request=>gc_method_patch.
*
*      IF io_uri->format IS NOT INITIAL.
*        RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
*          EXPORTING
*            textid = /iwcor/cx_od_proc_error=>invalid_system_query_option.
*      ENDIF.
*
*      " Check if property is key property.
*      lo_end_entity_set = /iwcor/cl_od_uri_facade=>get_end_entity_set(
*                              io_entity_set      = io_uri->entity_set
*                              it_navigation_path = io_uri->navigation_path ).
*      lo_entity_type = lo_end_entity_set->get_entity_type( ).
*      lo_entity_type->get_key_property_names( IMPORTING et_key = lt_key ).
*      READ TABLE io_uri->property_path INDEX 1 INTO lo_property.
*      IF lo_property IS BOUND.
*        lv_name = lo_property->get_name( ).
*        READ TABLE lt_key WITH TABLE KEY table_line = lv_name
*            TRANSPORTING NO FIELDS.
*        IF sy-subrc IS INITIAL.
*          RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed
*            EXPORTING
*              textid = /iwcor/cx_od_methd_not_allowed=>/iwcor/cx_od_methd_not_allowed.
*        ENDIF.
*      ENDIF.
*
*      " navigation path is not supported for this request type
*      IF io_uri->navigation_path IS NOT INITIAL.
*        RAISE EXCEPTION TYPE /iwcor/cx_od_proc_unsupported
*          EXPORTING
*            textid = /iwcor/cx_od_proc_unsupported=>nav_path_unsupported.
*      ENDIF.
*      " or
*      " perform check on navigation path
*      check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.
*
*      " validate content type
*      lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
*      validate_content_type(
*        it_supported_format = lt_supported_format
*        iv_content_type = lv_header_content_type ).
*
*      " call request processor
*      start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM~UPDATE'. "#EC NOTEXT
*      lo_processor->update(
*         io_request_entity  = io_request_entity
*         io_entity_set      = lo_entity_set
*         it_key             = io_uri->key_predicates
*         it_property_path   = io_uri->property_path ).
*      stop_runtime_measurement mo_context lv_handle.
*
*      " handle response
*      io_response->set_status( /IWCOR/cl_REST_status_code=>gc_success_no_content ).

      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).


        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_ba_prop_prim.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_provider = lo_processor->execute_bound_action(
                io_request_entity        = io_request_entity  " REST representation
                is_bound_action_info     = io_uri->bound_action_info
                is_entity_set_info       = io_uri->entity_set_info
                is_singleton_info        = io_uri->singleton_info
                is_function_import_info  = io_uri->function_import_info
                it_property_path         = io_uri->property_path
                it_bound_function_path   = io_uri->bound_functions_path
                is_content_type          = ls_content_type ). "$format or Accept header)
            stop_runtime_measurement mo_context lv_handle.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_prim.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_PRIM~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_provider = lo_processor->execute_action_import(
              io_request_entity = io_request_entity
              is_action_import_info  = io_uri->action_import_info
              is_content_type   = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

        ENDCASE.
        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_metadata.

    DATA:
      lv_handle    TYPE i,
      lo_provider  TYPE REF TO /iwcor/if_od_response_provider,
      lo_processor TYPE REF TO /iwcor/if_od_proc_metadata.


    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_metadata_processor( ).

    " negotiate content type
    ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                              iv_header_accept = mv_header_accept
                                              iv_format = io_uri->format ).


    " call request processor
    start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_METADATA~READ'. "#EC NOTEXT
    lo_provider = lo_processor->read( ).
    stop_runtime_measurement mo_context lv_handle.

    " handle response
    IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
      write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
      io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
    ELSE.
      RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
    ENDIF.

  ENDMETHOD.                    "PROCESS_METADATA


  METHOD process_entity_media.
    DATA:
      lv_handle                     TYPE i,
      lo_provider                   TYPE REF TO /iwcor/if_od_response_provider,
      lo_processor                  TYPE REF TO /iwcor/if_od_proc_entity_media,
      lo_service                    TYPE REF TO /iwcor/if_od_svc,
      lv_content_type               TYPE string,
      lt_supported_cont_type_entity TYPE /iwcor/if_od_svc_proc=>content_type_t,
      lv_header_content_type        TYPE string.


    " declare data for navigation path check
    check_navigation_path_data lo_uri_property lo_nav_property lv_contains_target lv_lines.

*    init_entity_set_func_import iv_http_method io_uri lo_entity_set ls_function_import_info.
    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_cont_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_media_link_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_MEDIA~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
            is_entity_set_info       = io_uri->entity_set_info
            is_singleton_info        = io_uri->singleton_info
            is_function_import_info  = io_uri->function_import_info
            it_property_path         = io_uri->property_path
            it_bound_function_path   = io_uri->bound_functions_path ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
          write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
          " Set default content type
          lv_content_type = io_response->get_header_field( iv_name = if_http_header_fields=>content_type ).
          IF lv_content_type IS INITIAL.
            io_response->set_header_field(
                    EXPORTING
                      iv_name  =  if_http_header_fields=>content_type                " Header Name
                      iv_value =  /iwcor/if_rest_media_type=>gc_appl_octet_stream ). " Header Value
          ENDIF.
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_put.

        " system query option are not allowed
        IF io_uri->filter IS BOUND OR
           io_uri->format IS NOT INITIAL.
          RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
            EXPORTING
              textid = /iwcor/cx_od_proc_error=>invalid_system_query_option.
        ENDIF.

        " perform check on navigation path
        check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.

        " validate content type
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        validate_content_type(
          it_supported_content_type = lt_supported_cont_type
          iv_content_type           = lv_header_content_type ).

        " init supported content types (for returned entity)
        lt_supported_cont_type_entity = mo_service->get_supported_content_types( iv_uri_type = io_uri->gc_type_entity ).

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type_entity
                                                  iv_header_accept          = mv_header_accept ).

        " virus scanning
        lo_service = mo_context->get_service( ).
        set_virus_scan_profile( io_service = lo_service io_entity = io_request_entity ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_MEDIA~UPDATE'. "#EC NOTEXT
        lo_provider = lo_processor->update(
            io_request_entity  = io_request_entity
            is_entity_set_info = io_uri->entity_set_info
            is_singleton_info  = io_uri->singleton_info
            it_property_path   = io_uri->property_path
            is_content_type    = ls_content_type ). "Accept header
        stop_runtime_measurement mo_context lv_handle.

        "handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            " Set default content type
            lv_content_type = io_response->get_header_field( iv_name = if_http_header_fields=>content_type ).
            IF lv_content_type IS INITIAL.
              io_response->set_header_field(
                      EXPORTING
                        iv_name  =  if_http_header_fields=>content_type                " Header Name
                        iv_value =  /iwcor/if_rest_media_type=>gc_appl_octet_stream ). " Header Value
            ENDIF.
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_delete.

        " system query option are not allowed
        IF io_uri->filter IS BOUND OR
           io_uri->format IS NOT INITIAL.
          RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
            EXPORTING
              textid = /iwcor/cx_od_proc_error=>invalid_system_query_option.
        ENDIF.

        " perform check on navigation path
        check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_MEDIA~DELETE'. "#EC NOTEXT
        lo_processor->delete(
          EXPORTING
            is_entity_set_info = io_uri->entity_set_info
            is_singleton_info  = io_uri->singleton_info
            it_property_path   = io_uri->property_path ).

        " handle response
        io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_entity_coll_count.

    DATA:
      lv_handle       TYPE i,
      lo_entity       TYPE REF TO /iwcor/if_rest_entity,
      lo_processor    TYPE REF TO /iwcor/if_od_proc_entity_coll,
      lv_count        TYPE int8,
      lv_count_string TYPE string.


    lo_processor = mo_service->get_entity_coll_processor( ).

    " call request processor
    start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_COLL~COUNT'. "#EC NOTEXT
    lv_count = lo_processor->count(
      is_entity_set_info       = io_uri->entity_set_info
      is_singleton_info        = io_uri->singleton_info
      is_function_import_info  = io_uri->function_import_info
      it_property_path         = io_uri->property_path
      it_bound_function_path   = io_uri->bound_functions_path
      io_filter                = io_uri->filter
      iv_deltatoken            = io_uri->deltatoken
      io_search                = io_uri->search
      io_apply                 = io_uri->apply ).
    stop_runtime_measurement mo_context lv_handle.

    " handle response
    lo_entity = io_response->create_entity( ).
    lv_count_string = lv_count.
    CONDENSE lv_count_string.

    lo_entity->set_string_data( lv_count_string ).
    lo_entity->set_content_type( /iwcor/if_rest_media_type=>gc_text_plain ).
    io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).

  ENDMETHOD.


  METHOD process_entity_coll.

    DATA:
      lv_handle                     TYPE i,
      lo_provider                   TYPE REF TO /iwcor/if_od_response_provider,
      lo_processor                  TYPE REF TO /iwcor/if_od_proc_entity_coll,
      lo_typed                      TYPE REF TO /iwcor/if_od_edm_typed,
      lt_key                        TYPE string_table,
      lv_service_root               TYPE string,
      lv_canonical_uri              TYPE string,
      ld_content_reference          TYPE REF TO /iwcor/if_od_cntxt=>content_reference_s,
      ld_content_references         TYPE REF TO /iwcor/if_od_cntxt=>content_reference_t,
      lo_entity_type                TYPE REF TO /iwcor/if_od_edm_entity_type,
      lv_media_stream               TYPE abap_bool,
      lo_service                    TYPE REF TO /iwcor/if_od_svc,
      ls_content_type               TYPE /iwcor/if_od_svc_proc=>content_type_s,
      lt_supported_cont_type        TYPE /iwcor/if_od_svc_proc=>content_type_t,
      lt_supported_cont_type_entity TYPE /iwcor/if_od_svc_proc=>content_type_t,
      lv_header_content_type        TYPE string.


    " declare data for navigation path check
    check_navigation_path_data lo_uri_property
                               lo_nav_property
                               lv_contains_target
                               lv_lines.

    lo_processor = mo_service->get_entity_coll_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " init supported content types for the uri type
        lt_supported_cont_type = mo_service->get_supported_content_types( io_uri->uri_type ).

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).
        " call request processor
        start_runtime_measurement mo_context
                                  lv_handle
                                  lo_processor
                                  '/IWCOR/IF_OD_PROC_ENTITY_COLL~READ'. "#EC NOTEXT

        lo_provider = lo_processor->read(
              is_entity_set_info       = io_uri->entity_set_info
              is_singleton_info        = io_uri->singleton_info
              is_function_import_info  = io_uri->function_import_info
              it_property_path         = io_uri->property_path
              it_bound_function_path   = io_uri->bound_functions_path
              io_filter                = io_uri->filter
              iv_count                 = io_uri->count_system_query_options
              io_orderby               = io_uri->orderby
              iv_skip                  = io_uri->skip
              iv_skiptoken             = io_uri->skiptoken
              iv_deltatoken            = io_uri->deltatoken
              iv_top                   = io_uri->top
              it_expand                = io_uri->expand
              it_select                = io_uri->select
              io_search                = io_uri->search
              io_apply                 = io_uri->apply
              is_content_type          = ls_content_type ). "$format or Accept header

        stop_runtime_measurement mo_context
                                 lv_handle.

        " handle response
        IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
          write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.


      WHEN /iwcor/if_rest_request=>gc_method_patch.
        ASSERT io_uri->uri_type = /iwcor/if_od_uri=>gc_type_entity_set.

        " check navigation path
        check_navig_path_entity_col io_uri->property_path
                                    lo_uri_property
                                    lo_nav_property
                                    lv_contains_target.

        " initialize supported content types
        lt_supported_cont_type = mo_service->get_supported_content_types( io_uri->gc_type_entity_set ).

        " get entity type
        IF io_uri->property_path IS INITIAL.
          lo_entity_type = io_uri->entity_set_info-entity_set->get_entity_type( ).

        ELSE.
          lo_typed ?= lo_nav_property->get_type( ).

          lo_entity_type ?= lo_typed->get_type( ).

        ENDIF.

        " validate content type
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        validate_content_type( it_supported_content_type = lt_supported_cont_type
                               iv_content_type           = lv_header_content_type ).

        " negotiate 'Content-Type' for response from 'Accept' header + '$format' value
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type_entity
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context
                                  lv_handle
                                  lo_processor
                                  '/IWCOR/IF_OD_PROC_ENTITY_COLL~UPDATE'. "#EC NOTEXT

        lo_provider = lo_processor->update(
            io_request_entity  = io_request_entity
            is_entity_set_info = io_uri->entity_set_info
            it_property_path   = io_uri->property_path
            is_content_type    = ls_content_type ).

        stop_runtime_measurement mo_context
                                 lv_handle.

        " handle response
        IF lo_provider IS BOUND
        AND lo_provider->entity_provider IS BOUND.
          write_to( io_provider     = lo_provider
                    io_response     = io_response
                    is_content_type = ls_content_type ).

          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).

        ELSE.
          write_to( io_provider = lo_provider io_response = io_response ).

          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).

        ENDIF.


      WHEN /iwcor/if_rest_request=>gc_method_post.

        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_entity_set.

            " perform check on navigation path
            check_navig_path_entity_col io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.

            " init supported content types
            lt_supported_cont_type_entity = mo_service->get_supported_content_types( iv_uri_type = io_uri->gc_type_entity ).

            " get correct entity type
            IF io_uri->property_path IS INITIAL.
              lo_entity_type = io_uri->entity_set_info-entity_set->get_entity_type( ).
            ELSE.
              lo_typed ?= lo_nav_property->get_type( ).
              lo_entity_type ?= lo_typed->get_type( ).
            ENDIF.

            " check for media stream
            lv_media_stream = lo_entity_type->has_stream( ).
            IF lv_media_stream = abap_true.
              lt_supported_cont_type = mo_service->get_supported_content_types( /iwcor/if_od_uri=>gc_type_media_stream ).
              " virus scanning only for media link entries
              lo_service = mo_context->get_service( ).
              set_virus_scan_profile( io_service = lo_service io_entity = io_request_entity ).
            ELSE.
              lt_supported_cont_type = lt_supported_cont_type_entity.
            ENDIF.

            " validate 'Content-Type' request header (different in case using media stream!)
            lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
            validate_content_type(
              it_supported_content_type = lt_supported_cont_type
              iv_content_type           = lv_header_content_type ).

            " negotiate 'Content-Type' for response from 'Accept' header + '$format' value
            ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type_entity
                                                      iv_header_accept          = mv_header_accept
                                                      iv_format                 = io_uri->format ).

            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_COLL~CREATE_ENTITY'. "#EC NOTEXT

            lo_processor->create_entity(
              EXPORTING
                io_request_entity  = io_request_entity
                is_entity_set_info = io_uri->entity_set_info
                it_property_path   = io_uri->property_path
                is_content_type    = ls_content_type
                it_expand          = io_uri->expand
              IMPORTING
                eo_provider        = lo_provider
                et_key             = lt_key   ).
            stop_runtime_measurement mo_context lv_handle.

            " handle response
            IF lo_provider IS BOUND.
              lv_service_root = mo_context->get_service_root( ).
              lv_canonical_uri = get_entity_canonical_uri( iv_service_root = lv_service_root is_entity_set_info = io_uri->entity_set_info it_property_path = io_uri->property_path it_key = lt_key ).
              io_response->set_header_field( iv_name  = if_http_header_fields=>location
                                             iv_value = lv_canonical_uri ).
              IF lo_provider->entity_provider IS BOUND.
                write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_created ).
              ELSE.
                write_to( io_provider = lo_provider io_response = io_response ).
                io_response->set_header_field( iv_name  = 'OData-EntityId' "#EC NOTEXT
                                               iv_value = lv_canonical_uri ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
              ENDIF.

              " update content references for batch processing
              ld_content_references = mo_context->get_content_references( ).
              IF ld_content_references IS BOUND.
                READ TABLE ld_content_references->* WITH TABLE KEY entity = io_request_entity REFERENCE INTO ld_content_reference.
                IF sy-subrc = 0.
                  ld_content_reference->uri = lv_canonical_uri.
                ENDIF.
              ENDIF.
            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
            ENDIF.

          WHEN /iwcor/if_od_uri=>gc_type_ai_entity_set.

            " init supported content types
            lt_supported_cont_type = mo_service->get_supported_content_types( iv_uri_type = io_uri->uri_type ).

            " validate 'Content-Type' request header
            lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
            " Content-Type is optional because action imports must not have parameters
            " (or can also have 'optional' parameters)
            IF lv_header_content_type IS NOT INITIAL.
              validate_content_type(
                it_supported_content_type = lt_supported_cont_type
                iv_content_type           = lv_header_content_type ).
            ENDIF.

            " negotiate content type
            ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type
                                                      iv_header_accept          = mv_header_accept
                                                      iv_format                 = io_uri->format ).

            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_COLL~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_provider = lo_processor->execute_action_import(
              io_request_entity     = io_request_entity
              is_action_import_info = io_uri->action_import_info
              io_filter             = io_uri->filter
              iv_count              = io_uri->count_system_query_options
              io_orderby            = io_uri->orderby
              iv_skip               = io_uri->skip
              iv_skiptoken          = io_uri->skiptoken
              iv_top                = io_uri->top
              it_expand             = io_uri->expand
              it_select             = io_uri->select
              is_content_type       = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

            " handle response
            IF lo_provider IS BOUND.
              IF lo_provider->entity_provider IS BOUND.
                write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
              ELSE.
                write_to( io_provider = lo_provider io_response = io_response ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
              ENDIF.
            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
            ENDIF.

          WHEN /iwcor/if_od_uri=>gc_type_ba_entity_set.

            " init supported content types
            lt_supported_cont_type = mo_service->get_supported_content_types( iv_uri_type = io_uri->uri_type ).

            " validate 'Content-Type' request header
            lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
            " Content-Type is optional because bound action must not have parameters
            " (or can also have 'optional' parameters)
            IF lv_header_content_type IS NOT INITIAL.
              validate_content_type(
                it_supported_content_type = lt_supported_cont_type
                iv_content_type           = lv_header_content_type ).
            ENDIF.

            " negotiate content type
            ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_cont_type
                                                      iv_header_accept          = mv_header_accept
                                                      iv_format                 = io_uri->format ).

            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY_COLL~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_provider = lo_processor->execute_bound_action(
                    io_request_entity       = io_request_entity
                    is_entity_set_info      = io_uri->entity_set_info
                    is_function_import_info = io_uri->function_import_info
                    is_bound_action_info    = io_uri->bound_action_info
                    it_property_path        = io_uri->property_path
                    it_bound_function_path  = io_uri->bound_functions_path
                    io_filter               = io_uri->filter
                    iv_count                = io_uri->count_system_query_options
                    io_orderby              = io_uri->orderby
                    iv_skip                 = io_uri->skip
                    iv_skiptoken            = io_uri->skiptoken
                    iv_top                  = io_uri->top
                    it_expand               = io_uri->expand
                    it_select               = io_uri->select
                    is_content_type         = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

            " handle response
            IF lo_provider IS BOUND.
              IF lo_provider->entity_provider IS BOUND.
                write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
              ELSE.
                write_to( io_provider = lo_provider io_response = io_response ).
                io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
              ENDIF.
            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
            ENDIF.

          WHEN OTHERS.
            RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
        ENDCASE.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.                    "PROCESS_ENTITY_SET


  METHOD process_entity.

    DATA:
      lv_handle              TYPE i,
      lv_patch_semantics     TYPE abap_bool,
      lo_provider            TYPE REF TO /iwcor/if_od_response_provider,
      lv_created             TYPE abap_bool,
      lt_key                 TYPE string_table,
      ls_entity_set_info     TYPE /iwcor/if_od_uri=>entity_set_info_s,
      lv_service_root        TYPE string,
      lv_canonical_uri       TYPE string,
      ld_content_reference   TYPE REF TO /iwcor/if_od_cntxt=>content_reference_s,
      ld_content_references  TYPE REF TO /iwcor/if_od_cntxt=>content_reference_t,
      lo_processor           TYPE REF TO /iwcor/if_od_proc_entity,
      lv_header_content_type TYPE string.

    " declare data for navigation path check
    check_navigation_path_data lo_uri_property lo_nav_property lv_contains_target lv_lines.

    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_entity_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
            is_entity_set_info       = io_uri->entity_set_info
            is_singleton_info        = io_uri->singleton_info
            is_function_import_info  = io_uri->function_import_info
            it_property_path         = io_uri->property_path
            it_bound_function_path   = io_uri->bound_functions_path
            it_expand                = io_uri->expand
            it_select                = io_uri->select
            is_content_type          = ls_content_type "$format or Accept header
        ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_patch OR
           /iwcor/if_rest_request=>gc_method_put.

        " perform check on navigation path
        check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.

        " patch semantics
        IF iv_http_method = /iwcor/if_rest_request=>gc_method_put.
          lv_patch_semantics = abap_false.
        ELSE.
          lv_patch_semantics = abap_true.
        ENDIF.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        validate_content_type(
          it_supported_content_type = lt_supported_content_type
          iv_content_type           = lv_header_content_type ).

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY~UPDATE'. "#EC NOTEXT
        lo_provider = lo_processor->update(
           io_request_entity  = io_request_entity
           is_entity_set_info = io_uri->entity_set_info
           is_singleton_info  = io_uri->singleton_info
           it_property_path   = io_uri->property_path
           iv_patch_semantics = lv_patch_semantics
           it_select          = io_uri->select
           it_expand          = io_uri->expand                        " added for put/path 4.01 handling
           is_content_type    = ls_content_type ). "Accept header
        stop_runtime_measurement mo_context lv_handle.

        "handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_delete.

        " not allowed to delete singletons
        IF io_uri->singleton_info IS NOT INITIAL.
          RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
        ENDIF.

        " perform check on navigation path
        check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY~DELETE'. "#EC NOTEXT
        lo_processor->delete(
          is_entity_set_info = io_uri->entity_set_info
          it_property_path   = io_uri->property_path ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).

      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        CASE io_uri->uri_type.

          WHEN /iwcor/if_od_uri=>gc_type_ba_entity .
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_processor->execute_bound_action(
              EXPORTING
                io_request_entity        = io_request_entity
                is_bound_action_info     = io_uri->bound_action_info
                is_entity_set_info       = io_uri->entity_set_info
                is_function_import_info  = io_uri->function_import_info
                it_property_path         = io_uri->property_path
                it_bound_function_path   = io_uri->bound_functions_path
                it_expand                = io_uri->expand
                it_select                = io_uri->select
                is_content_type          = ls_content_type "$format or Accept header
              IMPORTING
                eo_provider       = lo_provider
                ev_created        = lv_created
                et_key            = lt_key ).
            stop_runtime_measurement mo_context lv_handle.

          WHEN /iwcor/if_od_uri=>gc_type_ai_entity.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_ENTITY~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_processor->execute_action_import(
              EXPORTING
                io_request_entity     = io_request_entity
                is_action_import_info = io_uri->action_import_info
                it_expand             = io_uri->expand
                it_select             = io_uri->select
                is_content_type       = ls_content_type
              IMPORTING
                eo_provider           = lo_provider
                ev_created            = lv_created
                et_key                = lt_key ).
            stop_runtime_measurement mo_context lv_handle.

        ENDCASE.

        " handle response
        IF lo_provider IS BOUND.
          IF lv_created = abap_true.
            IF io_uri->target->kind <> /iwcor/if_od_edm_target=>kind_entity_set.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
            ENDIF.
            IF io_uri->action_import_info-action_import IS BOUND.
              ls_entity_set_info-entity_set ?= io_uri->action_import_info-target.
            ENDIF.
            IF io_uri->bound_action_info-action IS BOUND.
              ls_entity_set_info-entity_set ?= io_uri->bound_action_info-target.
            ENDIF.
            IF ls_entity_set_info-entity_set IS BOUND.
              lv_service_root = mo_context->get_service_root( ).
              lv_canonical_uri = get_entity_canonical_uri( iv_service_root = lv_service_root is_entity_set_info = ls_entity_set_info is_bound_action_info = io_uri->bound_action_info it_key = lt_key ).
              io_response->set_header_field(
                iv_name  = if_http_header_fields=>location
                iv_value = lv_canonical_uri ).
            ENDIF.
          ENDIF.

          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            IF lv_canonical_uri IS NOT INITIAL.
              io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_created ).
            ELSE.
              io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
            ENDIF.
          ELSE.
            IF lv_canonical_uri IS NOT INITIAL.
              io_response->set_header_field( iv_name  = 'OData-EntityId' "#EC NOTEXT
                                             iv_value = lv_canonical_uri ).
            ENDIF.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.

          IF lv_canonical_uri IS NOT INITIAL.
            " update content references for batch processing
            ld_content_references = mo_context->get_content_references( ).
            IF ld_content_references IS BOUND.
              READ TABLE ld_content_references->* WITH TABLE KEY entity = io_request_entity REFERENCE INTO ld_content_reference.
              IF sy-subrc = 0.
                ld_content_reference->uri = lv_canonical_uri.
              ENDIF.
            ENDIF.
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_complex_coll.

    DATA: lv_handle              TYPE i,
          lo_provider            TYPE REF TO /iwcor/if_od_response_provider,
          lo_processor           TYPE REF TO /iwcor/if_od_proc_complex_coll,
          lv_header_content_type TYPE string.


    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_complex_coll_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX_COLL~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
          is_entity_set_info      = io_uri->entity_set_info
          is_singleton_info       = io_uri->singleton_info
          is_function_import_info = io_uri->function_import_info
          it_property_path        = io_uri->property_path
          it_bound_function_path  = io_uri->bound_functions_path
          io_filter               = io_uri->filter
          iv_count                = io_uri->count_system_query_options
          io_orderby              = io_uri->orderby
          iv_skip                 = io_uri->skip
          iv_skiptoken            = io_uri->skiptoken
          iv_top                  = io_uri->top
          it_expand               = io_uri->expand
          it_select               = io_uri->select
          io_apply                = io_uri->apply
          is_content_type         = ls_content_type "$format or Accept header
        ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND AND lo_provider->entity_provider IS BOUND.
          write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
          io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_ba_prop_comp_coll.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX_COLL~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_provider = lo_processor->execute_bound_action(
                io_request_entity        = io_request_entity  " REST representation
                is_bound_action_info     = io_uri->bound_action_info
                is_entity_set_info       = io_uri->entity_set_info
                is_singleton_info        = io_uri->singleton_info
                is_function_import_info  = io_uri->function_import_info
                it_property_path         = io_uri->property_path
                it_bound_function_path   = io_uri->bound_functions_path
                io_filter                = io_uri->filter
                iv_count                 = io_uri->count_system_query_options
                io_orderby               = io_uri->orderby
                iv_skip                  = io_uri->skip
                iv_skiptoken             = io_uri->skiptoken
                iv_top                   = io_uri->top
                it_expand                = io_uri->expand
                it_select                = io_uri->select
                is_content_type          = ls_content_type ). "$format or Accept header)
            stop_runtime_measurement mo_context lv_handle.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_comp_coll.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX_COLL~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_provider = lo_processor->execute_action_import(
              io_request_entity = io_request_entity
              is_action_import_info = io_uri->action_import_info
              io_filter         = io_uri->filter
              iv_count          = io_uri->count_system_query_options
              io_orderby        = io_uri->orderby
              iv_skip           = io_uri->skip
              iv_skiptoken      = io_uri->skiptoken
              iv_top            = io_uri->top
              it_expand         = io_uri->expand
              it_select         = io_uri->select
              is_content_type   = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

        ENDCASE.
        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_complex.

    DATA: lv_handle              TYPE i,
          lo_provider            TYPE REF TO /iwcor/if_od_response_provider,
          lo_processor           TYPE REF TO /iwcor/if_od_proc_complex,
          lv_header_content_type TYPE string.


*    "variables for key property check
*    lo_property TYPE REF TO /iwcor/if_od_edm_property,
*    lo_end_entity_set TYPE REF TO /iwcor/if_od_edm_entity_set,
*    lo_entity_type TYPE REF TO /iwcor/if_od_edm_entity_type,
*    lt_key TYPE string_table,
*    lv_name TYPE string,
*    lv_header_content_type TYPE string.

*  init_entity_set_func_import iv_http_method io_uri lo_entity_set ls_function_import_info.

    " init supported content types for uri type
    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    lo_processor = mo_service->get_complex_processor( ).

    CASE iv_http_method.
      WHEN /iwcor/if_rest_request=>gc_method_get.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).
        " Content type is not used further, but within negoiate the accept header is checked

        " call request processor
        start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX~READ'. "#EC NOTEXT
        lo_provider = lo_processor->read(
          is_entity_set_info      = io_uri->entity_set_info
          is_singleton_info       = io_uri->singleton_info
          is_function_import_info = io_uri->function_import_info
          it_property_path        = io_uri->property_path
          it_bound_function_path  = io_uri->bound_functions_path
          it_expand               = io_uri->expand
          it_select               = io_uri->select
          is_content_type         = ls_content_type ).
        stop_runtime_measurement mo_context lv_handle.

        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

*    WHEN /IWCOR/if_REST_request=>gc_method_put OR
*         /IWCOR/if_REST_request=>gc_method_patch.
*
*      IF io_uri->format IS NOT INITIAL.
*        RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
*          EXPORTING
*            textid = /iwcor/cx_od_proc_error=>invalid_system_query_option.
*      ENDIF.
*
*      " Check if property is key property.
*      lo_end_entity_set = /iwcor/cl_od_uri_facade=>get_end_entity_set(
*                              io_entity_set      = io_uri->entity_set
*                              it_navigation_path = io_uri->navigation_path ).
*      lo_entity_type = lo_end_entity_set->get_entity_type( ).
*      lo_entity_type->get_key_property_names( IMPORTING et_key = lt_key ).
*      READ TABLE io_uri->property_path INDEX 1 INTO lo_property.
*      IF lo_property IS BOUND.
*        lv_name = lo_property->get_name( ).
*        READ TABLE lt_key WITH TABLE KEY table_line = lv_name
*            TRANSPORTING NO FIELDS.
*        IF sy-subrc IS INITIAL.
*          RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed
*            EXPORTING
*              textid = /iwcor/cx_od_methd_not_allowed=>/iwcor/cx_od_methd_not_allowed.
*        ENDIF.
*      ENDIF.
*
*      " navigation path is not supported for this request type
*      IF io_uri->navigation_path IS NOT INITIAL.
*        RAISE EXCEPTION TYPE /iwcor/cx_od_proc_unsupported
*          EXPORTING
*            textid = /iwcor/cx_od_proc_unsupported=>nav_path_unsupported.
*      ENDIF.
*      " or
*      " perform check on navigation path
*      check_navigation_path io_uri->property_path lo_uri_property lo_nav_property lv_contains_target.
*
*      " validate content type
*      lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
*      validate_content_type(
*        it_supported_format = lt_supported_format
*        iv_content_type = lv_header_content_type ).
*
*      " call request processor
*      start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX~UPDATE'. "#EC NOTEXT
*      lo_processor->update(
*         io_request_entity  = io_request_entity
*         io_entity_set      = lo_entity_set
*         it_key             = io_uri->key_predicates
*         it_property_path   = io_uri->property_path ).
*      stop_runtime_measurement mo_context lv_handle.
*
*      " handle response
*      io_response->set_status( /IWCOR/cl_REST_status_code=>gc_success_no_content ).

      WHEN /iwcor/if_rest_request=>gc_method_post.

        " validate 'Content-Type' request header
        lv_header_content_type = io_request_entity->get_header_field( if_http_header_fields=>content_type ).
        " Content-Type is optional because action imports must not have parameters
        " (or can also have 'optional' parameters)
        IF lv_header_content_type IS NOT INITIAL.
          validate_content_type(
            it_supported_content_type = lt_supported_content_type
            iv_content_type           = lv_header_content_type ).
        ENDIF.

        " negotiate content type
        ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                                  iv_header_accept          = mv_header_accept
                                                  iv_format                 = io_uri->format ).

        CASE io_uri->uri_type.
          WHEN /iwcor/if_od_uri=>gc_type_ba_prop_comp.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX~EXECUTE_BOUND_ACTION'. "#EC NOTEXT
            lo_provider = lo_processor->execute_bound_action(
                   io_request_entity       = io_request_entity
                   is_bound_action_info    = io_uri->bound_action_info
                   is_entity_set_info      = io_uri->entity_set_info
                   is_singleton_info       = io_uri->singleton_info
                   is_function_import_info = io_uri->function_import_info
                   it_property_path        = io_uri->property_path
                   it_bound_function_path  = io_uri->bound_functions_path
                   it_expand               = io_uri->expand
                   it_select               = io_uri->select
                   is_content_type         = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_comp.
            " call request processor
            start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_COMPLEX~EXECUTE_ACTION_IMPORT'. "#EC NOTEXT
            lo_provider = lo_processor->execute_action_import(
              io_request_entity     = io_request_entity
              is_action_import_info = io_uri->action_import_info
              it_expand             = io_uri->expand
              it_select             = io_uri->select
              is_content_type       = ls_content_type ).
            stop_runtime_measurement mo_context lv_handle.
        ENDCASE.

        " handle response
        IF lo_provider IS BOUND.
          IF lo_provider->entity_provider IS BOUND.
            write_to( io_provider = lo_provider io_response = io_response is_content_type = ls_content_type ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_ok ).
          ELSE.
            write_to( io_provider = lo_provider io_response = io_response ).
            io_response->set_status( /iwcor/cl_rest_status_code=>gc_success_no_content ).
          ENDIF.
        ELSE.
          RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
        ENDIF.

      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
    ENDCASE.

  ENDMETHOD.


  METHOD process_batch.

    DATA:
      lt_batch              TYPE /iwcor/if_od_proc_batch=>batch_t,
      lv_handle             TYPE i,
      lo_processor          TYPE REF TO /iwcor/if_od_proc_batch,
      lo_preference         TYPE REF TO /iwcor/if_od_preference,
      ls_preference_applied TYPE /iwcor/if_od_preference=>preference_applied_s,
      lv_continue_on_error  TYPE abap_bool.

    parse_batch_request(
      EXPORTING
        io_request_entity = io_request_entity
        io_context        = mo_context
      IMPORTING
        et_batch          = lt_batch ).

    init_supported_content_types ls_content_type lt_supported_content_type mo_service io_uri->uri_type.

    " negotiate content type
    ls_content_type = negotiate_content_type( it_supported_content_type = lt_supported_content_type
                                              iv_header_accept          = mv_header_accept
                                              iv_format                 = io_uri->format ).

    lo_processor = mo_service->get_batch_processor( ).

    " call request processor
    start_runtime_measurement mo_context lv_handle lo_processor '/IWCOR/IF_OD_PROC_BATCH~EXECUTE'. "#EC NOTEXT
    lo_processor->execute( lt_batch ).
    stop_runtime_measurement mo_context lv_handle.

    lo_preference = mo_context->get_preference( ).
    lo_preference->get_preference_applied(
      EXPORTING
        iv_name               = /iwcor/if_od_preference=>gc_odata_continue_on_error
      IMPORTING
        es_preference_applied = ls_preference_applied ).
    IF ls_preference_applied IS NOT INITIAL.
      lv_continue_on_error = abap_true.
    ENDIF.

    " handle response
    write_batch_response( it_batch = lt_batch io_response = io_response iv_continue_on_error = lv_continue_on_error ).

  ENDMETHOD.


  METHOD parse_batch_request.
    TYPES:
      BEGIN OF content_id_s,
        id   TYPE string,
        root TYPE string,
      END OF content_id_s.
    TYPES:
      content_id_t TYPE HASHED TABLE OF content_id_s WITH UNIQUE KEY id.

    DATA:
      lt_entity                  TYPE /iwcor/if_rest_mp_entity=>rest_entity_t,
      lo_entity                  TYPE REF TO /iwcor/if_rest_entity,
      lo_multipart_entity        TYPE REF TO /iwcor/if_rest_mp_entity,
      lt_changeset_entity        TYPE /iwcor/if_rest_mp_entity=>rest_entity_t,
      lo_changeset_entity        TYPE REF TO /iwcor/if_rest_entity,
      lo_http_request_provider   TYPE REF TO /iwcor/cl_rest_http_req_prov,
      lo_http_request            TYPE REF TO /iwcor/if_rest_request,
      lv_content_type            TYPE string,
      lv_service_authority       TYPE string,
      lv_service_scheme          TYPE string,
      lv_service_root            TYPE string,
      lv_service_segments_limit  TYPE i,
      lv_service_root_limit      TYPE string,
      lv_script_name             TYPE string,
      lv_authority               TYPE string,
      lv_scheme                  TYPE string,
      lv_method                  TYPE string,
      lv_uri                     TYPE string,
      lv_uri_root                TYPE string,
      lv_content_id              TYPE string,
      lv_uri_path                TYPE string,
      lv_length                  TYPE i,
      ls_content_id              TYPE content_id_s,
      lt_content_id              TYPE content_id_t,
      lt_path_segment            TYPE string_table,
      lv_path_segment            TYPE string,
      ls_content_reference       TYPE /iwcor/if_od_cntxt=>content_reference_s,
      lt_content_reference       TYPE /iwcor/if_od_cntxt=>content_reference_t,
      lt_content_reference_req   TYPE /iwcor/if_od_cntxt=>content_reference_t,
      lo_context                 TYPE REF TO /iwcor/if_rest_context,
      lo_changeset_context       TYPE REF TO /iwcor/if_rest_context,
      ls_batch                   TYPE /iwcor/if_od_proc_batch=>batch_s,
      ls_handler_parameter       TYPE /iwcor/if_od_proc_batch=>handler_parameter_s,
      lo_rest_handler_exception  TYPE REF TO /iwcor/cx_rest_handler_ex,
      lo_move_cast_error         TYPE REF TO cx_sy_move_cast_error,
      lv_batch_odata_max_version TYPE string.

    lv_authority = io_request_entity->get_header_field( iv_name = if_http_header_fields=>host ).
    lv_scheme = io_request_entity->get_header_field( iv_name = if_http_header_fields_sap=>uri_scheme ).
    lv_service_root = io_context->get_service_root( ).
    io_context->get_parameter( EXPORTING iv_name = /iwcor/cl_od_cntxt=>gc_param_svc_segments_limit IMPORTING ev_value = lv_service_segments_limit ).
    lv_batch_odata_max_version = io_context->get_odata_max_version( ).
    lv_service_root_limit = lv_service_root.
    DO lv_service_segments_limit TIMES.
      lv_service_root_limit = /iwcor/cl_rest_uri_utils=>relative_uri_resolution( iv_base_uri = lv_service_root_limit iv_relative_uri = '..' ).
    ENDDO.
    lo_context ?= io_context->get_object( '~parent' ).      "#EC NOTEXT
    lo_context->get_parameter( EXPORTING iv_name = 'script_name' IMPORTING ev_value = lv_script_name ). "#EC NOTEXT

    lt_entity = io_request_entity->get_entities( ).

    IF lines( lt_entity ) = 0.
      RAISE EXCEPTION TYPE /iwcor/cx_od_batch_payload
        EXPORTING
          textid = /iwcor/cx_od_batch_payload=>missing_operations.
    ENDIF.

    LOOP AT lt_entity INTO lo_entity.
      CLEAR ls_batch.

      IF lo_entity IS NOT BOUND.
        RAISE EXCEPTION TYPE /iwcor/cx_od_batch_payload
          EXPORTING
            textid = /iwcor/cx_od_batch_payload=>invalid_payload.
      ENDIF.

      lo_entity->get_content_type( IMPORTING ev_media_type = lv_content_type ).
      CASE lv_content_type.
        WHEN /iwcor/if_rest_media_type=>gc_multipart_mixed.
          TRY.
              lo_multipart_entity ?= lo_entity.
            CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
              RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request
                EXPORTING
                  previous = lo_move_cast_error.
          ENDTRY.
          CREATE DATA ls_batch-change_set.
          lt_changeset_entity = lo_multipart_entity->get_entities( ).
          lo_changeset_context = lo_context->clone( ).
          CLEAR lt_content_reference.
          LOOP AT lt_changeset_entity INTO lo_changeset_entity.
            IF lo_changeset_entity IS NOT BOUND.
              RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
            ENDIF.
            lo_changeset_entity->get_content_type( IMPORTING ev_media_type = lv_content_type ).
            IF lv_content_type = /iwcor/if_rest_media_type=>gc_appl_http.
              " Deserialize requests in a change set max. two times... (see below why)
              DO 2 TIMES.
                TRY.
                    CREATE OBJECT lo_http_request_provider
                      EXPORTING
                        io_entity      = lo_changeset_entity
                        iv_script_name = lv_script_name
                        iv_base_uri    = lv_service_root.
                  CATCH /iwcor/cx_rest_handler_ex INTO lo_rest_handler_exception.
                    RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request
                      EXPORTING
                        previous = lo_rest_handler_exception.
                ENDTRY.
                lo_http_request = lo_http_request_provider->get_request( ).
                lv_service_authority = lo_http_request->get_header_field( iv_name = if_http_header_fields=>host ).
                lv_service_scheme = lo_http_request->get_header_field( iv_name = if_http_header_fields_sap=>uri_scheme ).
                IF ( lv_service_authority IS NOT INITIAL AND lv_authority <> lv_service_authority ) OR
                   ( lv_service_scheme IS NOT INITIAL AND lv_scheme <> lv_service_scheme ).
                  RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
                    EXPORTING
                      textid = /iwcor/cx_od_proc_error=>invalid_authority_or_scheme.
                ENDIF.
                lv_uri = lo_http_request->get_uri( ).
                lv_method = lo_http_request->get_method( ).
                validate_batch_part_uri( iv_uri = lv_uri iv_service_root = lv_service_root_limit ).

                " Check for referenced content-id in request URI
                FIND REGEX '^(/[^$]*)?\$([^/]+)(/.*)?' IN lv_uri SUBMATCHES lv_uri_root lv_content_id lv_uri_path ##REGEX_POSIX.
                IF sy-subrc = 0.
                  IF lv_content_id <> 'batch' AND lv_content_id <> 'crossjoin' AND " If Content-Id equals to one of these top-level system resources then we
                     lv_content_id <> 'all'   AND lv_content_id <> 'entity' AND    " ignore it. This means that e.g. 'all' cannot be used for content
                     lv_content_id <> 'root'  AND lv_content_id <> 'id' AND        " referencing, because the reference for the newly created resource would
                     lv_content_id <> 'metadata'.                                  " be '$all', which is a valid top-level system resource.
                    READ TABLE lt_content_id WITH KEY id = lv_content_id INTO ls_content_id.
                    IF sy-subrc = 0.
                      IF lv_service_root <> ls_content_id-root.
                        " Replace the current service root with the one stored for the content-id and deserialize the request again with this new service root.
                        " This second deserialization is necessary because the URI (with the changed service root) cannot be changed in a request object.
                        lv_service_root = ls_content_id-root.
                        CONTINUE.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDIF.

                CASE lv_method.
                  WHEN /iwcor/if_rest_request=>gc_method_post OR
                       /iwcor/if_rest_request=>gc_method_put OR
                       /iwcor/if_rest_request=>gc_method_patch OR
                       /iwcor/if_rest_request=>gc_method_delete.

                    ls_content_id-id = lo_changeset_entity->get_header_field( gc_content_id ).
                    IF ls_content_id-id IS NOT INITIAL.
                      " For the current request a content-id is defined
                      ls_content_id-root = cl_http_utility=>if_http_utility~normalize_url( lv_uri ).
                      " Build service root for current request:
                      lv_length = strlen( lv_service_root_limit ).
                      " 1. Cut off the service root limit from the normalized URI
                      ls_content_id-root = ls_content_id-root+lv_length.
                      SPLIT ls_content_id-root AT '/' INTO TABLE lt_path_segment.
                      ls_content_id-root = lv_service_root_limit.
                      " 2. Prepend the missing path segments from the URI to the service root
                      DO lv_service_segments_limit TIMES.
                        READ TABLE lt_path_segment INDEX sy-index INTO lv_path_segment.
                        CONCATENATE ls_content_id-root lv_path_segment '/' INTO ls_content_id-root.
                      ENDDO.
                      " Let's store the service root for the current content-id for later references
                      INSERT ls_content_id INTO TABLE lt_content_id.
                      IF sy-subrc <> 0.
                        RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
                          EXPORTING
                            textid = /iwcor/cx_od_proc_error=>content_id_not_unique.
                      ENDIF.
                      CLEAR ls_content_reference.
                      ls_content_reference-id = ls_content_id-id.
                      ls_content_reference-entity = lo_http_request->get_entity( ).
                      INSERT ls_content_reference INTO TABLE lt_content_reference.
                    ELSE.
                      RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
                        EXPORTING
                          textid = /iwcor/cx_od_proc_error=>content_id_missing.
                    ENDIF.

                    ls_handler_parameter-request = lo_http_request.
                    ls_handler_parameter-response = /iwcor/cl_rest_message_builder=>create_response(
                        iv_status_code   = /iwcor/cl_rest_status_code=>gc_server_error_not_impl
                        iv_reason_phrase = if_http_status=>reason_501 ).
                    ls_handler_parameter-context = lo_changeset_context.
                    APPEND ls_handler_parameter TO ls_batch-change_set->*.
                  WHEN OTHERS.
                    RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
                ENDCASE.
                EXIT.
              ENDDO.
              " Reset service root (because we might have changed it
              lv_service_root = io_context->get_service_root( ).
            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
            ENDIF.
          ENDLOOP.
          IF sy-subrc = 4.
            RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
              EXPORTING
                textid = /iwcor/cx_od_proc_error=>empty_or_malformed_changeset.
          ENDIF.
          IF lt_content_reference IS NOT INITIAL.
            lo_changeset_context->set_parameter( iv_name = /iwcor/cl_od_cntxt=>gc_param_content_references iv_value = lt_content_reference ).
          ENDIF.
        WHEN /iwcor/if_rest_media_type=>gc_appl_http.
          TRY.
              CREATE OBJECT lo_http_request_provider
                EXPORTING
                  io_entity      = lo_entity
                  iv_script_name = lv_script_name
                  iv_base_uri    = lv_service_root.
            CATCH /iwcor/cx_rest_handler_ex INTO lo_rest_handler_exception.
              RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request
                EXPORTING
                  previous = lo_rest_handler_exception.
          ENDTRY.
          lo_http_request = lo_http_request_provider->get_request( ).

          ls_content_id-id = lo_entity->get_header_field( gc_content_id ).
          IF ls_content_id-id IS NOT INITIAL.
            INSERT ls_content_id INTO TABLE lt_content_id.
            IF sy-subrc <> 0.
              RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
                EXPORTING
                  textid = /iwcor/cx_od_proc_error=>content_id_not_unique.
            ENDIF.
            CLEAR ls_content_reference.
            ls_content_reference-id = ls_content_id-id.
            ls_content_reference-entity = lo_http_request->get_entity( ).
            INSERT ls_content_reference INTO TABLE lt_content_reference_req.
          ENDIF.

          IF lt_content_reference_req IS NOT INITIAL.
            lo_context->set_parameter( iv_name = /iwcor/cl_od_cntxt=>gc_param_content_references iv_value = lt_content_reference_req ).
          ENDIF.

          IF lv_batch_odata_max_version IS NOT INITIAL.
            lo_context->set_parameter( iv_name = /iwcor/cl_od_cntxt=>gc_param_odata_max_version iv_value = lv_batch_odata_max_version ).
          ENDIF.

          lv_service_authority = lo_http_request->get_header_field( iv_name = if_http_header_fields=>host ).
          lv_service_scheme = lo_http_request->get_header_field( iv_name = if_http_header_fields_sap=>uri_scheme ).
          IF ( lv_service_authority IS NOT INITIAL AND lv_authority <> lv_service_authority ) OR
             ( lv_service_scheme IS NOT INITIAL AND lv_scheme <> lv_service_scheme ).
            RAISE EXCEPTION TYPE /iwcor/cx_od_proc_error
              EXPORTING
                textid = /iwcor/cx_od_proc_error=>invalid_authority_or_scheme.
          ENDIF.
          lv_uri = lo_http_request->get_uri( ).
          lv_method = lo_http_request->get_method( ).
          validate_batch_part_uri( iv_uri = lv_uri iv_service_root = lv_service_root_limit ).
          CREATE DATA ls_batch-operation.
          CASE lv_method.
            WHEN /iwcor/if_rest_request=>gc_method_get OR
                 /iwcor/if_rest_request=>gc_method_post OR
                 /iwcor/if_rest_request=>gc_method_put OR
                 /iwcor/if_rest_request=>gc_method_patch OR
                 /iwcor/if_rest_request=>gc_method_delete.

              ls_batch-operation->request = lo_http_request.
              ls_batch-operation->response = /iwcor/cl_rest_message_builder=>create_response(
                  iv_status_code   = /iwcor/cl_rest_status_code=>gc_server_error_not_impl
                  iv_reason_phrase = if_http_status=>reason_501 ).
              ls_batch-operation->context = lo_context.
            WHEN OTHERS.
              RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
          ENDCASE.
        WHEN OTHERS.
          RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.
      ENDCASE.
      APPEND ls_batch TO et_batch.
    ENDLOOP.

  ENDMETHOD.


  METHOD negotiate_content_type.

    DATA:
      lt_accept                TYPE /iwcor/cl_rest_http_utils=>accept_t,
      ld_accept                TYPE REF TO /iwcor/cl_rest_http_utils=>accept_s,
      ld_content_type          TYPE REF TO /iwcor/if_od_svc_proc=>content_type_s,
      lv_content_type          TYPE string,
      lx_rest_parser_exception TYPE REF TO /iwcor/cx_rest_parser_error.


    IF it_supported_content_type IS INITIAL.
      RETURN.
    ENDIF.

    IF iv_format IS INITIAL AND iv_header_accept IS INITIAL.
      READ TABLE it_supported_content_type INDEX 1 REFERENCE INTO ld_content_type.
      IF ld_content_type IS NOT INITIAL.
        rs_content_type = ld_content_type->*.
        IF rs_content_type-type = 'application' AND rs_content_type-subtype = 'json'.
          "Set default 'minimal' for JSON
          "See http://docs.oasis-open.org/odata/odata-json-format/v4.0/os/odata-json-format-v4.0-os.html
          "4.1 Header Content-Type
          "Requests MAY add the charset parameter to the content type. Allowed values are UTF-8, UTF-16, and UTF-32.
          "If no charset parameter is present, UTF-8 MUST be assumed.
          rs_content_type-parameter = 'odata.metadata=minimal;charset=utf-8'. "#EC NOTEXT
        ENDIF.
        RETURN.
      ELSE.
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_acceptable.
      ENDIF.
    ENDIF.

    IF iv_format IS NOT INITIAL. "Replace format abbreviation with content type, e.g. 'XML' with application/xml
      IF iv_format = 'json'.
        lv_content_type = 'application/json'.               "#EC NOTEXT
      ELSEIF iv_format = 'xml'.
        lv_content_type = 'application/xml'.                "#EC NOTEXT
      ELSE.
        lv_content_type = iv_format.
      ENDIF.
    ENDIF.

    IF iv_format IS INITIAL AND iv_header_accept IS NOT INITIAL. "$format overrules value of accept header
      lv_content_type = iv_header_accept.
    ENDIF.

    TRY.
        "Parse System Query Option $format.
        /iwcor/cl_rest_http_utils=>parse_header_accept( EXPORTING iv_header_accept = lv_content_type IMPORTING et_accept = lt_accept ).
      CATCH /iwcor/cx_rest_parser_error INTO lx_rest_parser_exception.    " REST negotiation error
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_acceptable
          EXPORTING
            previous = lx_rest_parser_exception.
    ENDTRY.

    "Negotiate Content type - Support also */* and application/*
    IF lt_accept IS NOT INITIAL.
      LOOP AT lt_accept REFERENCE INTO ld_accept.
        IF ld_accept->type = '*' AND ld_accept->subtype = '*'.
          READ TABLE it_supported_content_type INDEX 1 REFERENCE INTO ld_content_type.
          rs_content_type = ld_content_type->*.
        ELSEIF ld_accept->subtype = '*'.
          READ TABLE it_supported_content_type REFERENCE INTO ld_content_type
            WITH KEY type = ld_accept->type parameter = ld_accept->parameter.
          IF sy-subrc = 0.
            rs_content_type = ld_content_type->*.
          ENDIF.
        ELSE.
          READ TABLE it_supported_content_type REFERENCE INTO ld_content_type
            WITH KEY type = ld_accept->type subtype = ld_accept->subtype parameter = ld_accept->parameter.
          IF sy-subrc = 0.
            rs_content_type = ld_content_type->*.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.

    "Raise Exception, if content type is not in supported content types table with HTTP status code 406
    IF rs_content_type IS INITIAL.
      IF iv_format IS NOT INITIAL.
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_acceptable
          EXPORTING
            textid = /iwcor/cx_od_not_acceptable=>/iwcor/cx_od_not_acceptableuri.
      ELSE.
        RAISE EXCEPTION TYPE /iwcor/cx_od_not_acceptable
          EXPORTING
            textid = /iwcor/cx_od_not_acceptable=>/iwcor/cx_od_not_acceptable.
      ENDIF.
    ENDIF.

    "Set odata.metadata=minimal as default for the JSON format
    IF rs_content_type-subtype = 'json'.
      IF rs_content_type-parameter IS INITIAL.
        rs_content_type-parameter = 'odata.metadata=minimal;charset=utf-8'. "#EC NOTEXT
      ELSEIF rs_content_type-parameter NS 'odata.metadata='. "#EC NOTEXT
        CONCATENATE rs_content_type-parameter ';odata.metadata=minimal;charset=utf-8' INTO rs_content_type-parameter. "#EC NOTEXT
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "negotiate_content_type


  METHOD get_entity_canonical_uri.

    DATA:
      lv_key_predicate          TYPE string,
      lv_key                    TYPE string,
      lo_uri_property           TYPE REF TO /iwcor/if_od_uri_prop,
      lo_uri_property_nav       TYPE REF TO /iwcor/if_od_uri_prop_nav,
      lo_nav_property           TYPE REF TO /iwcor/if_od_edm_nav_property,
      lo_typed                  TYPE REF TO /iwcor/if_od_edm_typed,
      lo_entity_type            TYPE REF TO /iwcor/if_od_edm_entity_type,
      lo_referenced             TYPE REF TO /iwcor/if_od_edm_referenced,
      lv_base_uri               TYPE string,
      lv_property_path_base_uri TYPE string,
      lo_property_ref           TYPE REF TO /iwcor/if_od_edm_key_prop_ref,
      lo_property               TYPE REF TO /iwcor/if_od_edm_property,
      lt_property_ref           TYPE /iwcor/if_od_edm_entity_type=>key_property_ref_t,
      lv_number_of_keys         TYPE i,
      lv_lines                  TYPE i,
      lo_primitive_type         TYPE REF TO /iwcor/if_od_edm_prim_type,
      lo_move_cast_error        TYPE REF TO cx_sy_move_cast_error,
      lv_name                   TYPE string,
      lv_path                   TYPE string,
      lv_contains_target        TYPE abap_bool,
      lo_target                 TYPE REF TO /iwcor/if_od_edm_target,
      lo_nav_target             TYPE REF TO /iwcor/if_od_edm_target,
      lv_literal                TYPE string,
      ls_key_predicate          TYPE /iwcor/if_od_uri=>key_predicate_info_s,
      lv_is_collection          TYPE abap_bool,
      lt_key_predicate          TYPE /iwcor/if_od_uri=>key_predicate_info_t.

    IF ( it_property_path IS INITIAL AND is_entity_set_info-key_predicate IS NOT INITIAL AND it_key IS NOT INITIAL ) OR
       ( it_property_path IS NOT INITIAL AND it_key IS INITIAL ).
      RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
    ENDIF.

    rv_uri = is_entity_set_info-entity_set->get_name( ).
    lo_entity_type = is_entity_set_info-entity_set->get_entity_type( ).
    TRY.
        lo_referenced ?= lo_entity_type.
        lv_base_uri = lo_referenced->get_reference_uri( ).
      CATCH cx_sy_move_cast_error.                      "#EC NO_HANDLER
    ENDTRY.

    IF is_entity_set_info-key_predicate IS NOT INITIAL.
      IF lines( is_entity_set_info-key_predicate ) = 1.
        READ TABLE is_entity_set_info-key_predicate INDEX 1 INTO ls_key_predicate.
        TRY.
            lo_property        = ls_key_predicate-property_ref->get_property( ).
            lo_primitive_type ?= lo_property->get_type( ).
          CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
            RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
              EXPORTING
                previous = lo_move_cast_error.
        ENDTRY.
        lv_key_predicate = lo_primitive_type->to_uri_literal( ls_key_predicate-value ).
      ELSE.
        LOOP AT is_entity_set_info-key_predicate INTO ls_key_predicate.
          lo_property = ls_key_predicate-property_ref->get_property( ).
          TRY.
              lo_primitive_type ?= lo_property->get_type( ).
            CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
                EXPORTING
                  previous = lo_move_cast_error.
          ENDTRY.
          lv_name = ls_key_predicate-property_ref->get_key_predicate_name( ).
          lv_literal = lo_primitive_type->to_uri_literal( ls_key_predicate-value ).
          IF lv_key_predicate IS INITIAL.
            CONCATENATE lv_name '=' lv_literal INTO lv_key_predicate.
          ELSE.
            CONCATENATE lv_key_predicate ',' lv_name '=' lv_literal INTO lv_key_predicate.
          ENDIF.
        ENDLOOP.
      ENDIF.
      lv_name = is_entity_set_info-entity_set->get_name( ).

      CONCATENATE rv_uri '(' lv_key_predicate ')' INTO rv_uri.
    ENDIF.

    lo_target = is_entity_set_info-entity_set.

    lv_lines = lines( it_property_path ).
    LOOP AT it_property_path INTO lo_uri_property.
      lv_name = lo_uri_property->property->get_name( ).
      CONCATENATE rv_uri '/' lv_name INTO rv_uri.
      CONCATENATE lv_property_path_base_uri '../' INTO lv_property_path_base_uri.

      IF lo_uri_property->kind = /iwcor/if_od_edm_type=>kind_complex.
        IF lv_path IS INITIAL.
          CONCATENATE lv_name '/' INTO lv_path.
        ELSE.
          CONCATENATE lv_path lv_name '/' INTO lv_path.
        ENDIF.
        CONTINUE.
      ENDIF.

      lo_nav_property ?= lo_uri_property->property.
      lv_contains_target = lo_nav_property->contains_target( ).
      CONCATENATE lv_path lv_name INTO lv_path.
      lo_nav_target = lo_target->get_related_target( lv_path ).

      IF lv_contains_target = abap_true OR lo_nav_target IS INITIAL.
        lv_is_collection = lo_nav_property->is_collection( ).
        IF lv_is_collection = abap_true.
          lo_uri_property_nav ?= lo_uri_property.
          IF lo_uri_property_nav->ref_constr_key_predicate IS NOT INITIAL.
            IF sy-tabix <> lv_lines.
              lt_key_predicate = lo_uri_property_nav->ref_constr_key_predicate.
            ELSE.
              CLEAR lt_key_predicate.
            ENDIF.
          ELSE.
            lt_key_predicate = lo_uri_property_nav->key_predicate.
          ENDIF.
          IF lt_key_predicate IS NOT INITIAL.
            CLEAR lv_key_predicate.
            IF lines( lt_key_predicate ) = 1.
              READ TABLE lt_key_predicate INDEX 1 INTO ls_key_predicate.
              TRY.
                  lo_property        = ls_key_predicate-property_ref->get_property( ).
                  lo_primitive_type ?= lo_property->get_type( ).
                CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
                    EXPORTING
                      previous = lo_move_cast_error.
              ENDTRY.
              lv_key_predicate = lo_primitive_type->to_uri_literal( ls_key_predicate-value ).
            ELSE.
              LOOP AT lt_key_predicate INTO ls_key_predicate.
                lo_property = ls_key_predicate-property_ref->get_property( ).
                TRY.
                    lo_primitive_type ?= lo_property->get_type( ).
                  CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
                    RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
                      EXPORTING
                        previous = lo_move_cast_error.
                ENDTRY.
                lv_name = ls_key_predicate-property_ref->get_key_predicate_name( ).
                lv_literal = lo_primitive_type->to_uri_literal( ls_key_predicate-value ).
                IF lv_key_predicate IS INITIAL.
                  CONCATENATE lv_name '=' lv_literal INTO lv_key_predicate.
                ELSE.
                  CONCATENATE lv_key_predicate ',' lv_name '=' lv_literal INTO lv_key_predicate.
                ENDIF.
              ENDLOOP.
            ENDIF.
            CONCATENATE rv_uri '(' lv_key_predicate ')' INTO rv_uri.
          ELSE.
            lo_typed ?= lo_nav_property->get_type( ).
            lo_entity_type ?= lo_typed->get_type( ).
          ENDIF.
        ENDIF.
      ELSE.
        lo_target = lo_nav_target.
        rv_uri = lo_target->get_name( ).

        lo_typed ?= lo_nav_property->get_type( ).
        lo_entity_type ?= lo_typed->get_type( ).
        TRY.
            lo_referenced ?= lo_entity_type.
            lv_base_uri = lo_referenced->get_reference_uri( ).
          CATCH cx_sy_move_cast_error.                  "#EC NO_HANDLER
        ENDTRY.
      ENDIF.

      CLEAR lv_path.
    ENDLOOP.

    IF it_key IS NOT INITIAL.
      lo_entity_type->get_key_property_refs( IMPORTING et_key_property_ref = lt_property_ref ).

      lv_number_of_keys = lines( lt_property_ref ).
      lv_lines = lines( it_key ).
      IF lv_lines <> lv_number_of_keys.
        RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.
      ENDIF.

      CLEAR lv_key_predicate.
      IF lines( lt_property_ref ) = 1.
        READ TABLE lt_property_ref INDEX 1 INTO lo_property_ref.
        TRY.
            lo_property        = lo_property_ref->get_property( ).
            lo_primitive_type ?= lo_property->get_type( ).
          CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
            RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
              EXPORTING
                previous = lo_move_cast_error.
        ENDTRY.
        READ TABLE it_key INDEX 1 INTO lv_key.
        lv_key_predicate = lo_primitive_type->to_uri_literal( lv_key ).
      ELSE.
        LOOP AT lt_property_ref INTO lo_property_ref.
          lo_property = lo_property_ref->get_property( ).
          TRY.
              lo_primitive_type ?= lo_property->get_type( ).
            CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
              RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
                EXPORTING
                  previous = lo_move_cast_error.
          ENDTRY.
          READ TABLE it_key INDEX sy-tabix INTO lv_key.
          lv_name = lo_property_ref->get_key_predicate_name( ).
          lv_literal = lo_primitive_type->to_uri_literal( lv_key ).
          IF lv_key_predicate IS INITIAL.
            CONCATENATE lv_name '=' lv_literal INTO lv_key_predicate.
          ELSE.
            CONCATENATE lv_key_predicate ',' lv_name '=' lv_literal INTO lv_key_predicate.
          ENDIF.
        ENDLOOP.
      ENDIF.
      CONCATENATE rv_uri '(' lv_key_predicate ')' INTO rv_uri.
    ENDIF.

    IF lv_base_uri IS NOT INITIAL.
      lv_base_uri = /iwcor/cl_rest_uri_utils=>relative_uri_resolution( iv_base_uri = iv_service_root iv_relative_uri = lv_base_uri ).
      rv_uri = /iwcor/cl_rest_uri_utils=>relative_uri_resolution( iv_base_uri = lv_base_uri iv_relative_uri = rv_uri ).
    ELSE.
      CONCATENATE lv_property_path_base_uri rv_uri INTO rv_uri.
      IF is_bound_action_info IS NOT INITIAL.
        CONCATENATE '../' rv_uri INTO rv_uri.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD get_classname.
    DATA:
      lv_classname TYPE string.
    lv_classname = cl_abap_classdescr=>get_class_name( io_object ).
    FIND REGEX '^\\[[:alpha:]]+=(.*)$' IN lv_classname SUBMATCHES rv_classname ##REGEX_POSIX.
    IF sy-subrc <> 0.
      rv_classname = lv_classname.
    ENDIF.
  ENDMETHOD.                    "get_classname


  METHOD /iwcor/if_od_processor~process.
    DATA:
      lo_uri              TYPE REF TO /iwcor/if_od_uri,
      lo_uri_class        TYPE REF TO /iwcor/cl_od_uri,
      lv_http_method      TYPE string,
      lv_content_type     TYPE string,
      lo_move_cast_error  TYPE REF TO cx_sy_move_cast_error,
      lo_multipart_entity TYPE REF TO /iwcor/if_rest_mp_entity,
      lo_entity           TYPE REF TO /iwcor/if_rest_entity,
      lo_od_exception     TYPE REF TO /iwcor/cx_od_exception.

    mo_context = io_context.

    TRY.
        mo_service ?= io_context->get_service( ).

      CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
        RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
          EXPORTING
            previous = lo_move_cast_error.

    ENDTRY.

    mv_header_accept = io_request->get_header_field( if_http_header_fields=>accept ).

    lv_http_method = io_request->get_method( ).
    TRANSLATE lv_http_method TO UPPER CASE.

    lo_uri = io_context->get_uri( ).

    lo_uri_class ?= lo_uri.

    IF lo_uri_class->mv_has_casts = abap_true. "TypeCasts are not supported in the library.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    IF lo_uri_class->mv_has_singleton = abap_true. "Singletons are not supported in the library.
      RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
    ENDIF.

    IF lo_uri_class->mv_has_expand_with_apply = abap_true. "$expand with $apply is not supported in the library.
      RAISE EXCEPTION TYPE /iwcor/cx_od_apply_not_impl
        EXPORTING
          textid = /iwcor/cx_od_apply_not_impl=>invalid_apply_in_expand.

    ENDIF.

    IF lo_uri_class->mv_has_expand_with_levels = abap_true. "$expand with $levels is not supported in the library
      RAISE EXCEPTION TYPE /iwcor/cx_od_expand_not_impl
        EXPORTING
          textid = /iwcor/cx_od_expand_not_impl=>invalid_levels_in_expand.

    ENDIF.

    TRY.
        CASE lo_uri->uri_type.

            "service
          WHEN /iwcor/if_od_uri=>gc_type_service.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_service_doc( io_uri = lo_uri io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " $all
          WHEN /iwcor/if_od_uri=>gc_type_service_all
          OR   /iwcor/if_od_uri=>gc_type_service_all_cast.

            IF io_context->debug = abap_true.
              temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

            ENDIF.

            "  $metadata
          WHEN /iwcor/if_od_uri=>gc_type_metadata.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_metadata(
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " $crossjoin
          WHEN /iwcor/if_od_uri=>gc_type_crossjoin.
            IF io_context->debug = abap_true.
              temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

            ENDIF.

            " $batch
          WHEN /iwcor/if_od_uri=>gc_type_batch.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lv_content_type = io_request->get_header_field( if_http_header_fields=>content_type ).

                TRANSLATE lv_content_type TO LOWER CASE.

                IF lv_content_type IS INITIAL.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_bad_request.

                ELSEIF strlen( lv_content_type ) < 15
                OR     lv_content_type(15) <> /iwcor/if_rest_media_type=>gc_multipart_mixed.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_unsupp_media_type.

                ENDIF.

                TRY.
                    lo_multipart_entity ?= io_request->get_entity( ).

                  CATCH cx_sy_move_cast_error INTO lo_move_cast_error.
                    RAISE EXCEPTION TYPE /iwcor/cx_od_unsupp_media_type
                      EXPORTING
                        previous = lo_move_cast_error.

                ENDTRY.

                process_batch(
                  io_uri            = lo_uri
                  io_request_entity = lo_multipart_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " entity set
          WHEN /iwcor/if_od_uri=>gc_type_entity_set.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_entity_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_post
                OR /iwcor/if_rest_request=>gc_method_patch.

                lo_entity = io_request->get_entity( ).

                process_entity_coll(
                    iv_http_method    = lv_http_method
                    io_uri            = lo_uri
                    io_request_entity = lo_entity
                    io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_entity_set
          OR   /iwcor/if_od_uri=>gc_type_bf_entity_set.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_entity_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_entity_set
          OR   /iwcor/if_od_uri=>gc_type_ba_entity_set.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).
                process_entity_coll(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " entity set count
          WHEN /iwcor/if_od_uri=>gc_type_entity_set_cnt
          OR   /iwcor/if_od_uri=>gc_type_fi_entity_set_cnt
          OR   /iwcor/if_od_uri=>gc_type_bf_entity_set_cnt.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_entity_coll_count(
                  EXPORTING
                    io_uri      = lo_uri
                    io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " entity e.g. EntitySet('1') or $entity_id
          WHEN /iwcor/if_od_uri=>gc_type_entity.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get
              OR   /iwcor/if_rest_request=>gc_method_delete.
                process_entity(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_put
              OR   /iwcor/if_rest_request=>gc_method_patch.
                lo_entity = io_request->get_entity( ).

                process_entity(
                    iv_http_method    = lv_http_method
                    io_uri            = lo_uri
                    io_request_entity = lo_entity
                    io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_entity OR
               /iwcor/if_od_uri=>gc_type_bf_entity.
            CASE lv_http_method.
              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_entity(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).
              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_entity
          OR     /iwcor/if_od_uri=>gc_type_ba_entity.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_entity(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_entity_id.
            IF io_context->debug = abap_true.
              temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

            ELSE.
              RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

            ENDIF.


            " entity media resource
          WHEN /iwcor/if_od_uri=>gc_type_media_stream.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get
              OR   /iwcor/if_rest_request=>gc_method_delete.
                process_entity_media(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_put.
                lo_entity = io_request->get_entity( ).

                process_entity_media(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_request_entity = lo_entity
                  io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_media_stream
          OR   /iwcor/if_od_uri=>gc_type_bf_media_stream.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_entity_media(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " entity reference collection
          WHEN /iwcor/if_od_uri=>gc_type_reference_coll
          OR   /iwcor/if_od_uri=>gc_type_fi_reference_coll
          OR   /iwcor/if_od_uri=>gc_type_bf_reference_coll.

            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_delete.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " entity reference
          WHEN /iwcor/if_od_uri=>gc_type_reference
          OR   /iwcor/if_od_uri=>gc_type_fi_reference
          OR   /iwcor/if_od_uri=>gc_type_bf_reference.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get
              OR   /iwcor/if_rest_request=>gc_method_delete.

                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_put
              OR   /iwcor/if_rest_request=>gc_method_patch.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " complex collection
          WHEN /iwcor/if_od_uri=>gc_type_prop_comp_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_complex_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_put.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_prop_comp_coll
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_comp_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_complex_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_comp_coll
          OR   /iwcor/if_od_uri=>gc_type_ba_prop_comp_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_complex_coll(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " complex collection count
          WHEN /iwcor/if_od_uri=>gc_type_prop_comp_coll_cnt
          OR   /iwcor/if_od_uri=>gc_type_fi_prop_comp_coll_cnt
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_comp_coll_cnt.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.


            " complex
          WHEN /iwcor/if_od_uri=>gc_type_prop_comp.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_complex(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_delete.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_put
              OR   /iwcor/if_rest_request=>gc_method_patch.

                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_prop_comp
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_comp.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_complex(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_comp
          OR   /iwcor/if_od_uri=>gc_type_ba_prop_comp.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_complex(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " primitive collection
          WHEN /iwcor/if_od_uri=>gc_type_prop_prim_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_put.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_prop_prim_coll
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_prim_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive_coll(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_prim_coll
          OR   /iwcor/if_od_uri=>gc_type_ba_prop_prim_coll.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_primitive_coll(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " primitive collection count
          WHEN /iwcor/if_od_uri=>gc_type_prop_prim_coll_cnt OR
               /iwcor/if_od_uri=>gc_type_fi_prop_prim_coll_cnt OR
               /iwcor/if_od_uri=>gc_type_bf_prop_prim_coll_cnt.
            CASE lv_http_method.
              WHEN /iwcor/if_rest_request=>gc_method_get.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).
                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.
                ENDIF.
              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
            ENDCASE.


            " primitive
          WHEN /iwcor/if_od_uri=>gc_type_prop_prim.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive(
                  iv_http_method = lv_http_method
                  io_uri = lo_uri
                  io_response = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_delete.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_put.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_prop_prim
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_prim.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_prim
          OR   /iwcor/if_od_uri=>gc_type_ba_prop_prim.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_primitive(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " primitive value
          WHEN /iwcor/if_od_uri=>gc_type_prop_prim_val.

            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive_value(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_delete.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN /iwcor/if_rest_request=>gc_method_put.
                IF io_context->debug = abap_true.
                  temporary_helper_uri_to_xml( io_uri = lo_uri io_response = io_response  ).

                ELSE.
                  RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented.

                ENDIF.

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

*              WHEN /iwcor/if_rest_request=>gc_method_delete.
*                lo_entity = io_request->get_entity( ).
*                process_primitive_value(
*                  io_request_entity = lo_entity
*                  iv_http_method = lv_http_method
*                  io_uri = lo_uri
*                  io_response = io_response ).
*              WHEN /iwcor/if_rest_request=>gc_method_put.
*                lo_entity = io_request->get_entity( ).
*                process_primitive_value(
*                  io_request_entity = lo_entity
*                  iv_http_method = lv_http_method
*                  io_uri = lo_uri
*                  io_response = io_response ).
*              WHEN OTHERS.
*                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.
*            ENDCASE.

            " primitive value - Edm.Stream
          WHEN /iwcor/if_od_uri=>gc_type_prop_prim_stream.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get
              OR   /iwcor/if_rest_request=>gc_method_delete.

                process_primitive_value(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN /iwcor/if_rest_request=>gc_method_put.
                lo_entity = io_request->get_entity( ).

                process_primitive_value(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_fi_prop_prim_val
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_prim_val.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_get.
                process_primitive_value(
                  iv_http_method = lv_http_method
                  io_uri         = lo_uri
                  io_response    = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

            " no return type
          WHEN /iwcor/if_od_uri=>gc_type_ai
          OR   /iwcor/if_od_uri=>gc_type_ba.
            CASE lv_http_method.

              WHEN /iwcor/if_rest_request=>gc_method_post.
                lo_entity = io_request->get_entity( ).

                process_void(
                  iv_http_method    = lv_http_method
                  io_uri            = lo_uri
                  io_request_entity = lo_entity
                  io_response       = io_response ).

              WHEN OTHERS.
                RAISE EXCEPTION TYPE /iwcor/cx_od_methd_not_allowed.

            ENDCASE.

          WHEN /iwcor/if_od_uri=>gc_type_ai_prop_prim_stream
          OR   /iwcor/if_od_uri=>gc_type_fi_prop_prim_stream
          OR   /iwcor/if_od_uri=>gc_type_ba_prop_prim_stream
          OR   /iwcor/if_od_uri=>gc_type_bf_prop_prim_stream.
            RAISE EXCEPTION TYPE /iwcor/cx_od_not_implemented. " temp. to avoid http 500

          WHEN OTHERS.
            RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error.

        ENDCASE.

      CATCH /iwcor/cx_od_exception INTO lo_od_exception.
        RAISE EXCEPTION TYPE /iwcor/cx_od_internal_error
          EXPORTING
            previous = lo_od_exception.

    ENDTRY.

  ENDMETHOD.                    "/iwcor/if_od_processor~process
ENDCLASS.