CLASS /iwngw/cl_demo_notif_pro_ext DEFINITION
  PUBLIC
  INHERITING FROM /iwngw/cl_notif_provider_abs
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS /iwngw/if_notif_provider_ext~get_notification_parameters
        REDEFINITION .
    METHODS /iwngw/if_notif_provider_ext~get_notification_type
        REDEFINITION .
    METHODS /iwngw/if_notif_provider_ext~get_notification_type_text
        REDEFINITION .
    METHODS /iwngw/if_notif_provider_ext~handle_action
        REDEFINITION .
    METHODS /iwngw/if_notif_provider_ext~handle_bulk_action
        REDEFINITION .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS /IWNGW/CL_DEMO_NOTIF_PRO_EXT IMPLEMENTATION.


  METHOD /iwngw/if_notif_provider_ext~get_notification_parameters.
    DATA: ls_parameter LIKE LINE OF et_parameter,
          ls_notif     LIKE LINE OF it_notif.

    DATA lv_rand_int TYPE i.
    DATA lv_rand_str TYPE string.
    DATA lv_quantity TYPE p DECIMALS 0.
    DATA lv_lang TYPE spras.

    CLEAR:et_parameter.
    lv_lang = sy-langu.

    LOOP AT it_notif INTO ls_notif.
      SET LANGUAGE ls_notif-language.

      ls_parameter-id = ls_notif-id .
      ls_parameter-type_key = ls_notif-type_key .
      ls_parameter-type_version = ls_notif-type_version .
      ls_parameter-language = ls_notif-language .

      " Don't specify a specific ID, since it will be generated, put all parameters in the "context"
      CALL FUNCTION 'GENERAL_GET_RANDOM_INT'
        EXPORTING
          range  = 5000
        IMPORTING
          random = lv_rand_int.
      lv_rand_str = lv_rand_int.
      CONDENSE lv_rand_str.

      ls_parameter-name         = 'po_number'.
      CONCATENATE '#' lv_rand_str INTO ls_parameter-value.
      ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
      ls_parameter-is_sensitive = abap_false.
      APPEND ls_parameter TO et_parameter.
      ls_parameter-name         = 'lr_number'.
      CONCATENATE '#' lv_rand_str INTO ls_parameter-value.
      ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
      ls_parameter-is_sensitive = abap_false.
      APPEND ls_parameter TO et_parameter.

      CALL FUNCTION 'GENERAL_GET_RANDOM_INT'
        EXPORTING
          range  = 10
        IMPORTING
          random = lv_rand_int.
      lv_rand_str = lv_rand_int.
      CONDENSE lv_rand_str.

      IF ls_notif-language = 'D'.
        ls_parameter-name         = 'cost'.
        CONCATENATE 'USD ' lv_rand_str '.000' INTO ls_parameter-value.
        ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
        ls_parameter-is_sensitive = abap_true.
        APPEND ls_parameter TO et_parameter.
      ELSE.
        ls_parameter-name         = 'cost'.
        CONCATENATE '$' lv_rand_str ',000' INTO ls_parameter-value.
        ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
        ls_parameter-is_sensitive = abap_true.
        APPEND ls_parameter TO et_parameter.
      ENDIF.
      IF ( ls_notif-type_key = 'PurchaseOrderTypeKey' OR ls_notif-type_key = 'PurchaseOrderType2Key' ).
        ls_parameter-name         = 'prio_txt'.
        ls_parameter-value        = TEXT-025.
        ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
        ls_parameter-is_sensitive = abap_true.
        APPEND ls_parameter TO et_parameter.

      ELSEIF ls_notif-type_key = 'LeaveRequestTypeKey'.
        ls_parameter-name         = 'prio_txt'.
        ls_parameter-value        = TEXT-026.
        ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
        ls_parameter-is_sensitive = abap_true.
        APPEND ls_parameter TO et_parameter.
      ENDIF.

      ls_parameter-name         = 'quantity'.
      ls_parameter-type         = 'Edm.Decimal'.
      lv_quantity               = 10000.
      ls_parameter-value        = lv_quantity.
      ls_parameter-is_sensitive = abap_true.
      APPEND ls_parameter TO et_parameter.

      ls_parameter-name         = 'requester_name'.
      ls_parameter-value        = 'Gavin Gradel'.
      ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
      ls_parameter-is_sensitive = abap_true.
      APPEND ls_parameter TO et_parameter.

      ls_parameter-name         = 'order_date'.
      ls_parameter-value        = sy-datum.
      ls_parameter-type         = 'Edm.DateTime'.
      ls_parameter-is_sensitive = abap_true.
      APPEND ls_parameter TO et_parameter.

      ls_parameter-name         = 'approver_name'.
      ls_parameter-value        = 'Approver_User' ##NO_TEXT.
      ls_parameter-type         = /iwngw/if_notif_provider=>gcs_parameter_types-type_string.
      ls_parameter-is_sensitive = abap_true.
      APPEND ls_parameter TO et_parameter.
*    endif.

      ls_parameter-name = 'NotificationDate'.
      ls_parameter-value = sy-datum.
      ls_parameter-type         = 'Edm.DateTime'.
      ls_parameter-is_sensitive = abap_false.
      APPEND ls_parameter TO et_parameter.

    ENDLOOP.

    SET LANGUAGE lv_lang.

  ENDMETHOD.


  METHOD /iwngw/if_notif_provider_ext~get_notification_type.

    DATA ls_naction LIKE LINE OF et_notification_action.

    CLEAR: es_notification_type,et_notification_action.

    IF ( iv_type_key = 'PurchaseOrderTypeKey' OR iv_type_key = 'PurchaseOrderType2Key' ).
      es_notification_type-version  = iv_type_version.
      es_notification_type-type_key = iv_type_key.
      es_notification_type-is_groupable = abap_true.
      es_notification_type-is_email_enbld = abap_true.

      ls_naction-action_key = 'AcceptPOActionKey'.
      ls_naction-nature = /iwngw/if_notif_provider=>gcs_action_natures-positive.
      APPEND ls_naction TO et_notification_action.

      ls_naction-action_key = 'RejectPOActionKey'.
      ls_naction-nature = /iwngw/if_notif_provider=>gcs_action_natures-negative.
      APPEND ls_naction TO et_notification_action.
    ELSEIF iv_type_key = 'LeaveRequestTypeKey'.
      es_notification_type-version  = iv_type_version.
      es_notification_type-type_key = iv_type_key.
      es_notification_type-is_groupable = abap_true.

      ls_naction-action_key = 'ApproveLRActionKey'.
      ls_naction-nature = /iwngw/if_notif_provider=>gcs_action_natures-positive.
      APPEND ls_naction TO et_notification_action.

      ls_naction-action_key = 'DenyLRActionKey'.
      ls_naction-nature = /iwngw/if_notif_provider=>gcs_action_natures-negative.
      APPEND ls_naction TO et_notification_action.
    ELSE.
      " TODO: raise error, unexpected notification type/version
    ENDIF.
  ENDMETHOD.


  METHOD /iwngw/if_notif_provider_ext~get_notification_type_text.
    DATA ls_naction_t LIKE LINE OF et_action_text.
    DATA lv_tmptext TYPE string.
    DATA lv_tmpattr TYPE string.
    DATA lv_st_text TYPE string.
    DATA lv_lang TYPE spras.
    DATA ls_type_text	TYPE /iwngw/if_notif_provider_ext=>ty_s_notification_type_text.

    CLEAR:et_type_text,et_action_text.

    lv_lang = sy-langu.
    SET LANGUAGE iv_language.

    IF ( iv_type_key = 'PurchaseOrderTypeKey' OR iv_type_key = 'PurchaseOrderType2Key' ).
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_public .
      ls_type_text-value = TEXT-001.
      APPEND ls_type_text TO et_type_text.

      lv_tmptext = TEXT-002.
      REPLACE '&1' WITH '{po_number}' INTO lv_tmptext.
      REPLACE '&2' WITH '{cost}' INTO lv_tmptext.
      REPLACE '&3' WITH '{requester_name}' INTO lv_tmptext.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_sensitive.
      ls_type_text-value = lv_tmptext.
      APPEND ls_type_text TO et_type_text.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-description .
      ls_type_text-value = TEXT-022.
      APPEND ls_type_text TO et_type_text.

      lv_st_text = TEXT-024. "'Purchase order &1 for &2 by &3 requires your permission for approval'.
      REPLACE '&1' WITH '{requester_name}' INTO lv_st_text.
      REPLACE '&2' WITH '{cost}' INTO lv_st_text.
      REPLACE '&3' WITH '{quantity}' INTO lv_st_text.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-subtitle.
      ls_type_text-value = lv_st_text.
      APPEND ls_type_text TO et_type_text.

      lv_tmptext   = TEXT-003." 'You have &1 Purchase orders requiring your approval'.
      CONCATENATE '{' /iwngw/if_notif_provider=>gcs_parameter_reserved_names-group_count '}' INTO lv_tmpattr.
      REPLACE '&1' WITH lv_tmpattr INTO lv_tmptext.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_grouped .
      ls_type_text-value = lv_tmptext.
      APPEND ls_type_text TO et_type_text.

      ls_naction_t-action_key = 'AcceptPOActionKey'.
      ls_naction_t-display_text = TEXT-004. "TEXT-004.
      ls_naction_t-display_text_grouped = TEXT-005. "TEXT-005.
      APPEND ls_naction_t TO et_action_text.

      ls_naction_t-action_key = 'RejectPOActionKey'.
      ls_naction_t-display_text = TEXT-006. "TEXT-006.
      ls_naction_t-display_text_grouped = TEXT-007. "TEXT-007.
      APPEND ls_naction_t TO et_action_text.

* Getting the texts from output management template
      TRY.
          get_email_template_data(
            EXPORTING
              iv_language    = iv_language
              iv_template_id = '/IWNGW/TEST_EMAIL_TEMPLATE'
            IMPORTING
             ev_subject     = DATA(lv_templ_email_sub)
             ev_body_html   = DATA(lv_templ_email_html)
             ev_body_text   = DATA(lv_templ_email_text) ).
        CATCH /iwngw/cx_notif_provider INTO DATA(lx_root).
          "Exception handling can be implemented here
      ENDTRY.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-templ_email_html .
      ls_type_text-value = lv_templ_email_html.
      APPEND ls_type_text TO et_type_text.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-templ_email_sub .
      ls_type_text-value = lv_templ_email_sub.
      APPEND ls_type_text TO et_type_text.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-templ_email_text .
      ls_type_text-value = lv_templ_email_text.
      APPEND ls_type_text TO et_type_text.

    ELSEIF iv_type_key = 'LeaveRequestTypeKey'.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_public .
      ls_type_text-value = TEXT-009.
      APPEND ls_type_text TO et_type_text.

      lv_tmptext = TEXT-010. "TEXT-010.
      REPLACE '&1' WITH '{lr_number}' INTO lv_tmptext.
      REPLACE '&2' WITH '{requester_name}' INTO lv_tmptext.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_sensitive.
      ls_type_text-value = lv_tmptext.
      APPEND ls_type_text TO et_type_text.

      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-description .
      ls_type_text-value = TEXT-023.
      APPEND ls_type_text TO et_type_text.

      lv_tmptext = TEXT-011. "TEXT-011.
      CONCATENATE '{' /iwngw/if_notif_provider=>gcs_parameter_reserved_names-group_count '}' INTO lv_tmpattr.
      REPLACE '&1' WITH lv_tmpattr INTO lv_tmptext.
      CLEAR ls_type_text.
      ls_type_text-name = /iwngw/if_notif_provider_ext=>gc_template_names-template_grouped .
      ls_type_text-value = lv_tmptext.
      APPEND ls_type_text TO et_type_text.

      ls_naction_t-action_key = 'ApproveLRActionKey'.
      ls_naction_t-display_text = TEXT-012. "TEXT-012.
      ls_naction_t-display_text_grouped = TEXT-013. "TEXT-013.
      APPEND ls_naction_t TO et_action_text.

      ls_naction_t-action_key = 'DenyLRActionKey'.
      ls_naction_t-display_text = TEXT-014. "TEXT-014.
      ls_naction_t-display_text_grouped = TEXT-015. "TEXT-015.
      APPEND ls_naction_t TO et_action_text.

    ELSE.
      " TODO: raise error, unexpected notification type/version
    ENDIF.

    SET LANGUAGE lv_lang.

  ENDMETHOD.


  METHOD /iwngw/if_notif_provider_ext~handle_action.
    CLEAR:es_result.

    " For now always return success if ids are set, since no persistence in this test provider
    IF iv_notification_id IS INITIAL.
      es_result-success = abap_false.
      es_result-action_msg_txt = TEXT-021.
    ELSEIF iv_action_key IS INITIAL.
      es_result-success = abap_false.
      es_result-action_msg_txt = TEXT-020.
    ELSE.
      CASE iv_action_key.
        WHEN 'ApproveLRActionKey'.
          es_result-action_msg_txt = TEXT-018.
        WHEN 'DenyLRActionKey'.
          es_result-action_msg_txt = TEXT-019.
        WHEN 'AcceptPOActionKey'.
          es_result-action_msg_txt = TEXT-016.
        WHEN 'RejectPOActionKey'.
          es_result-action_msg_txt = TEXT-017.
        WHEN OTHERS.
      ENDCASE.
      es_result-success = abap_true.
      es_result-delete_on_return = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD /iwngw/if_notif_provider_ext~handle_bulk_action.
    DATA: ls_bulk_notif   LIKE LINE OF it_bulk_notif,
          ls_notif_result LIKE LINE OF et_notif_result.

    CLEAR:et_notif_result.
    LOOP AT it_bulk_notif INTO ls_bulk_notif.
      IF ls_bulk_notif-id IS INITIAL.
        ls_notif_result-id = space.
        ls_notif_result-success = abap_false.
        ls_notif_result-delete_on_return = abap_false.
        APPEND ls_notif_result TO et_notif_result.
        CLEAR ls_notif_result.
        CONTINUE.
      ENDIF.
      CASE ls_bulk_notif-action_key.
        WHEN 'ApproveLRActionKey' OR 'DenyLRActionKey' OR 'AcceptPOActionKey' OR 'RejectPOActionKey'.
          ls_notif_result-id                = ls_bulk_notif-id .
          ls_notif_result-type_key          = ls_bulk_notif-type_key.
          ls_notif_result-type_version      = ls_bulk_notif-type_version.
          ls_notif_result-success           = abap_true.
          ls_notif_result-delete_on_return  = abap_true.
          APPEND ls_notif_result TO et_notif_result.
          CLEAR ls_notif_result.
        WHEN OTHERS.
          ls_notif_result-id                = ls_bulk_notif-id .
          ls_notif_result-type_key          = ls_bulk_notif-type_key.
          ls_notif_result-type_version      = ls_bulk_notif-type_version.
          ls_notif_result-success           = abap_false.
          ls_notif_result-delete_on_return  = abap_false.
          APPEND ls_notif_result TO et_notif_result.
          CLEAR ls_notif_result.
      ENDCASE.
    ENDLOOP.

  ENDMETHOD.
ENDCLASS.