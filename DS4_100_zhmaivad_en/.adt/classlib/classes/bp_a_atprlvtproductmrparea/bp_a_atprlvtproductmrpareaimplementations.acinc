CLASS ltbp_a_atprlvtproductmrparea DEFINITION DEFERRED FOR TESTING.

CLASS lhc_a_atprlvtproductmrparea DEFINITION INHERITING FROM cl_abap_behavior_handler
FRIENDS ltbp_a_atprlvtproductmrparea.

  PROTECTED SECTION.
    METHODS set_atp_info_api_get_availy IMPORTING io_atp_info_api_get_availy TYPE REF TO  if_atp_info_api_get_availy.

  PRIVATE SECTION.
    DATA atp_info_api_get_availy TYPE REF TO if_atp_info_api_get_availy.

    METHODS detmavailabilitytimeseries FOR MODIFY
      IMPORTING keys FOR ACTION productmrparea~detmavailabilitytimeseries RESULT result.

    METHODS determineavailabilityatdatetme FOR MODIFY
      IMPORTING keys FOR ACTION productmrparea~determineavailabilityatdatetme RESULT result.

    METHODS determineavailabilityofqty FOR MODIFY
      IMPORTING keys FOR ACTION productmrparea~determineavailabilityofqty RESULT result.

    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR productmrparea RESULT result.

    METHODS read FOR READ
      IMPORTING keys FOR READ productmrparea RESULT result.

    METHODS lock FOR LOCK
      IMPORTING keys FOR LOCK productmrparea.

ENDCLASS.



CLASS lhc_a_atprlvtproductmrparea IMPLEMENTATION.
  METHOD set_atp_info_api_get_availy.
    atp_info_api_get_availy = io_atp_info_api_get_availy.
  ENDMETHOD.


  METHOD detmavailabilitytimeseries.
    atp_info_api_get_availy = COND #( WHEN atp_info_api_get_availy IS BOUND THEN atp_info_api_get_availy
                                                                            ELSE NEW cl_atp_info_api_get_availy( ) ).

    atp_info_api_get_availy->get_time_series_by_mrparea( EXPORTING keys     = keys
                                                         CHANGING  result   = result
                                                                   failed   = failed
                                                                   reported = reported ).
  ENDMETHOD.


  METHOD determineavailabilityatdatetme.
    atp_info_api_get_availy = COND #( WHEN atp_info_api_get_availy IS BOUND THEN atp_info_api_get_availy
                                                                            ELSE NEW cl_atp_info_api_get_availy( ) ).

    atp_info_api_get_availy->get_avail_at_datim_by_mrparea( EXPORTING keys     = keys
                                                            CHANGING  result   = result
                                                                      failed   = failed
                                                                      reported = reported ).
  ENDMETHOD.


  METHOD determineavailabilityofqty.
    atp_info_api_get_availy = COND #( WHEN atp_info_api_get_availy IS BOUND THEN atp_info_api_get_availy
                                                                            ELSE NEW cl_atp_info_api_get_availy( ) ).

    atp_info_api_get_availy->get_avail_of_qty_by_mrparea( EXPORTING keys     = keys
                                                          CHANGING  result   = result
                                                                    failed   = failed
                                                                    reported = reported ).
  ENDMETHOD.


  METHOD get_global_authorizations.
    " Besides the start authorization for the service, there is no additional authorization object for calling ATP checks
  ENDMETHOD.


  METHOD read.
    atp_info_api_get_availy = COND #( WHEN atp_info_api_get_availy IS BOUND THEN atp_info_api_get_availy
                                                                            ELSE NEW cl_atp_info_api_get_availy( ) ).
    LOOP AT keys REFERENCE INTO DATA(key).
      DATA(productmrparea) = atp_info_api_get_availy->read_a_atprlvtproductmrparea( product = key->product mrparea = key->mrparea ).
      IF productmrparea IS NOT INITIAL.
        APPEND VALUE #( product = key->product mrparea = key->mrparea ) TO result.
      ELSE.
        MESSAGE ID 'ATP_INFO_API' TYPE 'E' NUMBER '116' WITH key->product key->mrparea INTO DATA(msg) ##NEEDED.
        APPEND VALUE #( product     = key->product
                        mrparea     = key->mrparea
                        %fail-cause = if_abap_behv=>cause-not_found )
               TO failed-productmrparea.
        APPEND VALUE #( product = key->product
                        mrparea = key->mrparea
                        %msg    = new_message( id       = sy-msgid
                                               number   = sy-msgno
                                               v1       = sy-msgv1
                                               v2       = sy-msgv2
                                               severity = if_abap_behv_message=>severity-error ) )
               TO reported-productmrparea.
      ENDIF.
    ENDLOOP.

    IF keys IS INITIAL.
      MESSAGE ID 'ATP_INFO_API' TYPE 'E' NUMBER '117' INTO msg.
      APPEND VALUE #( %fail-cause = if_abap_behv=>cause-unspecific )
             TO failed-productmrparea.
      APPEND VALUE #( %msg = new_message( id       = sy-msgid
                                          number   = sy-msgno
                                          severity = if_abap_behv_message=>severity-error ) )
             TO reported-productmrparea.
    ENDIF.
  ENDMETHOD.


  METHOD lock.
  ENDMETHOD.
ENDCLASS.

CLASS ltlsc_a_atprlvtproductmrparea DEFINITION DEFERRED FOR TESTING.
CLASS lsc_a_atprlvtproductmrparea DEFINITION INHERITING FROM cl_abap_behavior_saver
FRIENDS ltlsc_a_atprlvtproductmrparea.
  PROTECTED SECTION.

    METHODS finalize          REDEFINITION.

    METHODS check_before_save REDEFINITION.

    METHODS save              REDEFINITION.

    METHODS cleanup           REDEFINITION.

    METHODS cleanup_finalize  REDEFINITION.

ENDCLASS.



CLASS lsc_a_atprlvtproductmrparea IMPLEMENTATION.
  METHOD finalize.
  ENDMETHOD.


  METHOD check_before_save.
  ENDMETHOD.


  METHOD save.
  ENDMETHOD.


  METHOD cleanup.
  ENDMETHOD.


  METHOD cleanup_finalize.
  ENDMETHOD.
ENDCLASS.