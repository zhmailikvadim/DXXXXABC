CLASS tc_rap_eml_unit_test DEFINITION DEFERRED FOR TESTING.
CLASS lhc_root DEFINITION INHERITING FROM cl_abap_behavior_handler
FRIENDS tc_rap_eml_unit_test.

  PRIVATE SECTION.

    TYPES:
      tt_root_feature_key    TYPE TABLE FOR INSTANCE FEATURES KEY i_supplyprotectiontp\\root,
      tt_root_feature_result TYPE TABLE FOR INSTANCE FEATURES RESULT i_supplyprotectiontp\\root,
      ty_root_feature_result TYPE LINE OF tt_root_feature_result,
      ty_global_auth_result  TYPE STRUCTURE FOR GLOBAL AUTHORIZATION RESULT i_supplyprotectiontp\\root,
      ty_global_auth_request TYPE STRUCTURE FOR GLOBAL AUTHORIZATION REQUEST i_supplyprotectiontp\\root.

    CONSTANTS:
      status_in_planning TYPE sup_object_status VALUE '01',
      status_active      TYPE sup_object_status VALUE '02',
      status_deactivated TYPE sup_object_status VALUE '03',

      catalog_so         TYPE sup_charc_catalog_type VALUE '01',
      catalog_sto        TYPE sup_charc_catalog_type VALUE '02',
      catalog_so_sto     TYPE sup_charc_catalog_type VALUE '99',

      authority_create   TYPE activ_auth VALUE '01',
      authority_change   TYPE activ_auth VALUE '02',
      authority_delete   TYPE activ_auth VALUE '06'.

    " *** Features ***
    METHODS get_root_features FOR FEATURES
      IMPORTING keys REQUEST requested_features FOR root RESULT result.

    " *** Actions ***
    METHODS activate_object FOR MODIFY
      IMPORTING keys FOR ACTION root~setlifecyclestatustoactive RESULT result.

    METHODS deactivate_object FOR MODIFY
      IMPORTING keys FOR ACTION root~setlifecyclestatustoinactive RESULT result.

    METHODS generate_flex_time_buckets FOR MODIFY
      IMPORTING keys FOR ACTION root~generateflexibletimebuckets RESULT result.

    METHODS copy_object FOR MODIFY
      IMPORTING keys FOR ACTION root~copysupplyprotectionobject.

    METHODS move_planning_horizon FOR MODIFY
      IMPORTING keys FOR ACTION root~moveplanninghorizon RESULT result.

    METHODS change_planning_horizon_end FOR MODIFY
      IMPORTING keys FOR ACTION root~changeplanninghorizonend RESULT result.

    METHODS increase_file_upload_counter FOR MODIFY
      IMPORTING keys FOR ACTION root~increasefileuploadcounter.

    METHODS increase_file_download_counter FOR MODIFY
      IMPORTING keys FOR ACTION root~increasefiledownloadcounter.

    " *** Prechecks ***
    METHODS prechecks_for_object_creation FOR PRECHECK
      IMPORTING entities FOR CREATE root.

    METHODS prechecks_for_charc_creation FOR PRECHECK
      IMPORTING entities FOR CREATE root\_supprotcharacteristictp.

    METHODS prechecks_for_group_creation FOR PRECHECK
      IMPORTING entities FOR CREATE root\_supplyprotectiongrouptp.

    " *** Determinations ***
    METHODS set_object_authgroup FOR DETERMINE ON SAVE
      IMPORTING keys FOR root~setobjectauthgroup.

    METHODS set_group_by_core_charc_values FOR DETERMINE ON SAVE
      IMPORTING keys FOR root~setgroupbycorecharcvalues.

    METHODS set_object_initial_values FOR DETERMINE ON MODIFY
      IMPORTING keys FOR root~setobjectinitialstatus.

    METHODS convertcorecharcvalueids FOR DETERMINE ON MODIFY
      IMPORTING keys FOR root~convertcorecharcvalueids.

    METHODS set_object_catalogtype FOR DETERMINE ON MODIFY
      IMPORTING keys FOR root~setobjectcatalogtype.

    METHODS set_object_charcs_path_uuids FOR DETERMINE ON MODIFY
      IMPORTING keys FOR root~setobjectcatalogpathuuid.

    METHODS set_object_charcs_by_text FOR DETERMINE ON MODIFY
      IMPORTING keys FOR root~setobjectcatalogpathidsbytext.

    " *** Validations ***
    METHODS check_object_authority FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectauthority.

    METHODS check_object_mandatory_fields FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectmandatoryfields.

    METHODS check_object_next_status FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectnextstatus.

    METHODS check_object_autoactivation FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectautoactivation.

    METHODS check_object_numofcharcs FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectnumofcharcs.

    METHODS check_object_charcs_wildcards FOR VALIDATE ON SAVE
      IMPORTING keys FOR root~checkobjectwildcards.

    " *** Authorizations ***
    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR root RESULT result.

    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys REQUEST requested_authorizations FOR root RESULT result.

    " *** Helper ***
    METHODS is_draft_activation
      RETURNING
        VALUE(is_draft_activation) TYPE abap_boolean.

    METHODS copy_supobject
      IMPORTING
        source_supobject         TYPE if_supplyprotection_rap=>ty_read_result
      RETURNING
        VALUE(target_supobjects) TYPE if_supplyprotection_rap=>tt_root_create.

    METHODS copy_flex_timebuckets
      IMPORTING
        source_supobject               TYPE if_supplyprotection_rap=>ty_root_read_result
        source_flex_timebuckets        TYPE if_supplyprotection_rap=>tt_root_flextbs_read_result
      RETURNING
        VALUE(target_flex_timebuckets) TYPE if_supplyprotection_rap=>ty_root_flex_timebuckets.

    METHODS copy_characteristics
      IMPORTING
        source_supobject              TYPE if_supplyprotection_rap=>ty_read_result
        source_characteristics        TYPE if_supplyprotection_rap=>tt_charc_read_result
      RETURNING
        VALUE(target_characteristics) TYPE if_supplyprotection_rap=>tt_root_charc_create.

    METHODS copy_protectiongroups
      IMPORTING
        source_protectiongroups        TYPE if_supplyprotection_rap=>tt_group_read_result
        source_supobject               TYPE if_supplyprotection_rap=>ty_root_read_result
      RETURNING
        VALUE(target_protectiongroups) TYPE if_supplyprotection_rap=>tt_root_group_create.

    METHODS copy_timebuckets
      IMPORTING
        source_timebuckets        TYPE if_supplyprotection_rap=>tt_root_group_tbs_read_result
        source_protectiongroup    TYPE if_supplyprotection_rap=>ty_group_read_result
      RETURNING
        VALUE(target_timebuckets) TYPE if_supplyprotection_rap=>tt_root_group_timebuckets.

    METHODS get_behv_for_active
      IMPORTING
        supprotlifecyclestatus    TYPE i_supplyprotectiontp-supprotlifecyclestatus
        tky                       TYPE if_supplyprotection_rap=>ty_root_read_result-%tky
        supplyprotectionisblocked TYPE i_supplyprotectiontp-supplyprotectionisblocked
      CHANGING
        result                    TYPE tt_root_feature_result.

    METHODS get_behv_for_deactivated
      IMPORTING
        supprotlifecyclestatus TYPE i_supplyprotectiontp-supprotlifecyclestatus
        tky                    TYPE if_supplyprotection_rap=>ty_root_read_result-%tky
      CHANGING
        result                 TYPE tt_root_feature_result.

    METHODS get_behv_for_initial
      IMPORTING
        supprotlifecyclestatus TYPE i_supplyprotectiontp-supprotlifecyclestatus
        tky                    TYPE if_supplyprotection_rap=>ty_root_read_result-%tky
      CHANGING
        result                 TYPE tt_root_feature_result.

    METHODS get_behv_for_in_planning
      IMPORTING
        root_result      TYPE if_supplyprotection_rap=>tt_root_read_result
        in_planning_keys TYPE tt_root_feature_key
      CHANGING
        result           TYPE tt_root_feature_result.

    METHODS count_charcs_of_sup_object
      IMPORTING
        sup_object         TYPE if_supplyprotection_rap=>ty_root_read_result
      EXPORTING
        num_of_core_charcs TYPE i
        num_of_prio_charcs TYPE i.

    METHODS check_authorization_for_delete
      IMPORTING
        object                TYPE if_supplyprotection_rap=>ty_root_read_result
        delete_requested      TYPE abap_bool
      CHANGING
        reported              TYPE if_supplyprotection_rap=>tt_root_action_reported
      RETURNING
        VALUE(delete_granted) TYPE if_abap_behv=>t_xflag.

    METHODS check_authorization_for_update
      IMPORTING
        object                TYPE if_supplyprotection_rap=>ty_root_read_result
        update_requested      TYPE abap_bool
      CHANGING
        reported              TYPE if_supplyprotection_rap=>tt_root_action_reported
      RETURNING
        VALUE(update_granted) TYPE if_abap_behv=>t_xflag.

    METHODS get_authorization_check_value
      IMPORTING
        activity             TYPE activ_auth
        authgroup            TYPE sup_charcvalauthzngrp OPTIONAL
      RETURNING
        VALUE(authorization) TYPE if_abap_behv=>t_xflag.

    METHODS check_global_auth_for_create
      IMPORTING
        requested_authorizations_cre TYPE if_abap_behv=>t_xflag
      CHANGING
        reported                     TYPE if_supplyprotection_rap=>tt_root_action_reported
      RETURNING
        VALUE(result_create)         TYPE if_abap_behv=>t_xflag.

    METHODS check_global_auth_for_update
      IMPORTING
                requested_authorizations TYPE ty_global_auth_request
      CHANGING
                reported                 TYPE if_supplyprotection_rap=>tt_root_action_reported
      RETURNING VALUE(result)            TYPE ty_global_auth_result.

    METHODS check_global_auth_for_delete
      IMPORTING
        requested_authorizations_del TYPE if_abap_behv=>t_xflag
      CHANGING
        reported                     TYPE if_supplyprotection_rap=>tt_root_action_reported
      RETURNING
        VALUE(result_delete)         TYPE if_abap_behv=>t_xflag.

    METHODS get_new_timebuckets
      IMPORTING
        period_type            TYPE sup_planning_period_type
        period_startdate       TYPE sup_planning_period_start_date
        period_enddate         TYPE sup_planning_period_end_date
        groups                 TYPE if_supplyprotectiongroup_rap=>tt_group_read_result
      RETURNING
        VALUE(new_timebuckets) TYPE if_supplyprotectiontime_rap=>tt_timebucket_create.

    METHODS delete_obsolete_groups_tbs
      IMPORTING
        new_planning_period_enddate TYPE sup_planning_period_end_date
        groups_timebuckets          TYPE if_supplyprotectiontime_rap=>tt_timebucket_read_result
      CHANGING
        failed                      TYPE if_supplyprotection_rap=>tt_root_action_failed
        reported                    TYPE if_supplyprotection_rap=>tt_root_action_reported.

    METHODS delete_obsolete_flex_tbs
      IMPORTING
        new_planning_period_enddate TYPE sup_planning_period_end_date
        flex_timebuckets            TYPE if_supplyprotectionflextb_rap=>tt_flex_timebucket_read_result
      CHANGING
        failed                      TYPE if_supplyprotection_rap=>tt_root_action_failed
        reported                    TYPE if_supplyprotection_rap=>tt_root_action_reported.

    METHODS update_timebuckets_end
      IMPORTING
        new_planning_period_enddate TYPE sup_planning_period_end_date
        flex_timebuckets            TYPE if_supplyprotectionflextb_rap=>tt_flex_timebucket_read_result
        groups_timebuckets          TYPE if_supplyprotectiontime_rap=>tt_timebucket_read_result
      CHANGING
        failed                      TYPE if_supplyprotection_rap=>tt_root_action_failed
        reported                    TYPE if_supplyprotection_rap=>tt_root_action_reported.

    METHODS create_group_timebuckets
      IMPORTING
        new_planning_period_enddate TYPE sup_planning_period_end_date
        object                      TYPE if_supplyprotection_rap=>ty_root_read_result
        groups                      TYPE if_supplyprotectiongroup_rap=>tt_group_read_result
        groups_timebuckets          TYPE if_supplyprotectiontime_rap=>tt_timebucket_read_result
      CHANGING
        failed                      TYPE if_supplyprotection_rap=>tt_root_action_failed
        reported                    TYPE if_supplyprotection_rap=>tt_root_action_reported.

ENDCLASS.

CLASS lhc_root IMPLEMENTATION.

  " *** Features ***
  METHOD get_root_features.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        FIELDS ( supprotlifecyclestatus corecharc01ctlgpathintid corecharc02ctlgpathintid supplyprotectionisblocked supprotautomactivationisactive )
          WITH CORRESPONDING #( keys )
      RESULT DATA(objects_result)
      FAILED failed.
    DATA in_planning_keys TYPE TABLE FOR INSTANCE FEATURES KEY i_supplyprotectiontp\\root.
    LOOP AT objects_result REFERENCE INTO DATA(object).
      IF object->supprotlifecyclestatus = status_in_planning.
        APPEND VALUE #( %is_draft = object->%tky-%is_draft supplyprotectionuuid = object->supplyprotectionuuid ) TO in_planning_keys.
        CONTINUE.
      ENDIF.

      get_behv_for_active( EXPORTING tky                       = object->%tky
                                     supprotlifecyclestatus    = object->supprotlifecyclestatus
                                     supplyprotectionisblocked = object->supplyprotectionisblocked
                           CHANGING  result                    = result ).

      get_behv_for_deactivated( EXPORTING tky                    = object->%tky
                                          supprotlifecyclestatus = object->supprotlifecyclestatus
                                CHANGING  result                 = result ).

      get_behv_for_initial( EXPORTING tky                    = object->%tky
                                      supprotlifecyclestatus = object->supprotlifecyclestatus
                            CHANGING  result                 = result ).
    ENDLOOP.
    get_behv_for_in_planning( EXPORTING in_planning_keys = in_planning_keys
                                        root_result      = objects_result
                              CHANGING  result           = result ).
  ENDMETHOD.

  METHOD get_behv_for_active.
    CHECK supprotlifecyclestatus = status_active.
    INSERT VALUE #( %tky                                            = tky
                    %features-%update                               = if_abap_behv=>fc-o-enabled
                    %features-%delete                               = COND #( WHEN supplyprotectionisblocked = abap_true THEN if_abap_behv=>fc-o-enabled
                                                                                                                         ELSE if_abap_behv=>fc-o-disabled )
                    %features-%assoc-_supplyprotectiongrouptp       = if_abap_behv=>fc-o-disabled
                    %features-%assoc-_supprotcharacteristictp       = if_abap_behv=>fc-o-disabled
                    %features-%assoc-_supprotflexibletimebuckettp   = if_abap_behv=>fc-o-disabled
                    %features-%action-setlifecyclestatustoactive    = if_abap_behv=>fc-o-disabled
                    %features-%action-setlifecyclestatustoinactive  = COND #( WHEN tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-disabled
                                                                                                                       ELSE if_abap_behv=>fc-o-enabled )
                    %features-%action-generateflexibletimebuckets   = if_abap_behv=>fc-o-disabled
                    %features-%action-moveplanninghorizon           = if_abap_behv=>fc-o-disabled
                    %features-%action-changeplanninghorizonend      = if_abap_behv=>fc-o-disabled
                    %features-%field-material                       = if_abap_behv=>fc-f-read_only
                    %features-%field-plant                          = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-read_only
                    %features-%field-supplyprotectionname           = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotisplanningcontextsto    = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotisplanningcontextslsord = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01ctlgpathuuid = if_abap_behv=>fc-f-read_only
                    %features-%field-corecharc01ctlgpathintid       = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01text         = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01valueid      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02ctlgpathuuid = if_abap_behv=>fc-f-read_only
                    %features-%field-corecharc02ctlgpathintid       = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02text         = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02valueid      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotautomactivationisactive = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotautomactivationdate     = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcnsmpndatetimetype      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotselfrestrictiontype     = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotlifecyclestatus         = if_abap_behv=>fc-f-unrestricted ) INTO TABLE result.
  ENDMETHOD.

  METHOD get_behv_for_deactivated.
    CHECK supprotlifecyclestatus = status_deactivated.
    INSERT VALUE #( %tky                                            = tky
                    %features-%delete                               = if_abap_behv=>fc-o-enabled
                    %features-%update                               = if_abap_behv=>fc-o-disabled
                    %features-%assoc-_supplyprotectiongrouptp       = if_abap_behv=>fc-o-disabled
                    %features-%assoc-_supprotcharacteristictp       = if_abap_behv=>fc-o-disabled
                    %features-%assoc-_supprotflexibletimebuckettp   = if_abap_behv=>fc-o-disabled
                    %features-%action-setlifecyclestatustoactive    = if_abap_behv=>fc-o-disabled
                    %features-%action-setlifecyclestatustoinactive  = if_abap_behv=>fc-o-disabled
                    %features-%action-generateflexibletimebuckets   = if_abap_behv=>fc-o-disabled
                    %features-%action-moveplanninghorizon           = if_abap_behv=>fc-o-disabled
                    %features-%action-changeplanninghorizonend      = if_abap_behv=>fc-o-disabled
                    %features-%field-material                       = if_abap_behv=>fc-f-read_only
                    %features-%field-plant                          = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-read_only
                    %features-%field-supplyprotectionname           = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotisplanningcontextsto    = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotisplanningcontextslsord = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01ctlgpathuuid = if_abap_behv=>fc-f-read_only
                    %features-%field-corecharc01ctlgpathintid       = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01text         = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc01valueid      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02ctlgpathuuid = if_abap_behv=>fc-f-read_only
                    %features-%field-corecharc02ctlgpathintid       = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02text         = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcorecharc02valueid      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotautomactivationisactive = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotautomactivationdate     = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotcnsmpndatetimetype      = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotselfrestrictiontype     = if_abap_behv=>fc-f-read_only
                    %features-%field-supprotlifecyclestatus         = if_abap_behv=>fc-f-read_only ) INTO TABLE result.
  ENDMETHOD.

  METHOD get_behv_for_initial.
    CHECK supprotlifecyclestatus IS INITIAL.
    INSERT VALUE #( %tky                                            = tky
                    %features-%update                               = if_abap_behv=>fc-o-enabled
                    %features-%delete                               = if_abap_behv=>fc-o-enabled
                    %features-%assoc-_supplyprotectiongrouptp       = if_abap_behv=>fc-o-enabled
                    %features-%assoc-_supprotcharacteristictp       = if_abap_behv=>fc-o-enabled
                    %features-%assoc-_supprotflexibletimebuckettp   = if_abap_behv=>fc-o-enabled
                    %features-%action-setlifecyclestatustoactive    = COND #( WHEN tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-disabled
                                                                                                                       ELSE if_abap_behv=>fc-o-enabled )
                    %features-%action-setlifecyclestatustoinactive  = if_abap_behv=>fc-o-disabled
                    %features-%action-generateflexibletimebuckets   = if_abap_behv=>fc-o-disabled
                    %features-%action-moveplanninghorizon           = if_abap_behv=>fc-o-disabled
                    %features-%action-changeplanninghorizonend      = if_abap_behv=>fc-o-disabled
                    %features-%field-material                       = if_abap_behv=>fc-f-mandatory
                    %features-%field-plant                          = if_abap_behv=>fc-f-mandatory
                    %features-%field-supprotlifecyclestatus         = if_abap_behv=>fc-f-mandatory
                    %features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-mandatory
                    %features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-mandatory
                    %features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-mandatory
                    %features-%field-supplyprotectionname           = if_abap_behv=>fc-f-mandatory
                    %features-%field-supprotisplanningcontextsto    = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotisplanningcontextslsord = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcnsmpndatetimetype      = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotselfrestrictiontype     = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc01ctlgpathuuid = if_abap_behv=>fc-f-unrestricted
                    %features-%field-corecharc01ctlgpathintid       = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc01text         = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc01valueid      = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc02ctlgpathuuid = if_abap_behv=>fc-f-unrestricted
                    %features-%field-corecharc02ctlgpathintid       = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc02text         = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotcorecharc02valueid      = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotautomactivationisactive = if_abap_behv=>fc-f-unrestricted
                    %features-%field-supprotautomactivationdate     = if_abap_behv=>fc-f-unrestricted ) INTO TABLE result.
  ENDMETHOD.

  METHOD get_behv_for_in_planning.
    CHECK lines( in_planning_keys ) GT 0.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root BY \_supprotflexibletimebuckettp
        FIELDS ( supprotflexibletimebucketuuid )
          WITH CORRESPONDING #( in_planning_keys )
      RESULT DATA(flex_timebuckets)
      ENTITY root BY \_supprotcharacteristictp
        FIELDS ( supprotcharacteristicuuid )
          WITH CORRESPONDING #( in_planning_keys )
      RESULT DATA(characteristics)
      ENTITY root BY \_supplyprotectiongrouptp
        FIELDS ( supplyprotectiongroupuuid )
          WITH CORRESPONDING #( in_planning_keys )
      RESULT DATA(groups).
    DATA result_line TYPE ty_root_feature_result.
    LOOP AT in_planning_keys REFERENCE INTO DATA(modified_keys_line).
      READ TABLE root_result REFERENCE INTO DATA(root_result_line) WITH KEY supplyprotectionuuid = modified_keys_line->supplyprotectionuuid.
      CHECK sy-subrc EQ 0.
      result_line = VALUE #( %tky                                            = root_result_line->%tky
                             %features-%update                               = if_abap_behv=>fc-o-enabled
                             %features-%delete                               = if_abap_behv=>fc-o-enabled
                             %features-%assoc-_supplyprotectiongrouptp       = if_abap_behv=>fc-o-enabled
                             %features-%assoc-_supprotcharacteristictp       = if_abap_behv=>fc-o-enabled
                             %features-%assoc-_supprotflexibletimebuckettp   = if_abap_behv=>fc-o-enabled
                             %features-%action-setlifecyclestatustoactive    = COND #( WHEN root_result_line->%tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-disabled
                                                                                                                                                   ELSE if_abap_behv=>fc-o-enabled )
                             %features-%action-setlifecyclestatustoinactive  = if_abap_behv=>fc-o-disabled
                             %features-%action-generateflexibletimebuckets   = COND #( WHEN root_result_line->%tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-enabled
                                                                                                                                                   ELSE if_abap_behv=>fc-o-disabled )
                             %features-%action-moveplanninghorizon           = COND #( WHEN root_result_line->%tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-enabled
                                                                                                                                                   ELSE if_abap_behv=>fc-o-disabled )
                             %features-%action-changeplanninghorizonend      = COND #( WHEN root_result_line->%tky-%is_draft = if_abap_behv=>mk-on THEN if_abap_behv=>fc-o-enabled
                                                                                                                                                   ELSE if_abap_behv=>fc-o-disabled )
                             %features-%field-material                       = if_abap_behv=>fc-f-mandatory
                             %features-%field-plant                          = if_abap_behv=>fc-f-mandatory
                             %features-%field-supprotlifecyclestatus         = if_abap_behv=>fc-f-mandatory
                             %features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-mandatory
                             %features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-mandatory
                             %features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-mandatory
                             %features-%field-supplyprotectionname           = if_abap_behv=>fc-f-mandatory
                             %features-%field-supprotisplanningcontextsto    = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotisplanningcontextslsord = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcnsmpndatetimetype      = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotselfrestrictiontype     = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc01ctlgpathuuid = if_abap_behv=>fc-f-unrestricted
                             %features-%field-corecharc01ctlgpathintid       = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc01text         = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc01valueid      = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc02ctlgpathuuid = if_abap_behv=>fc-f-unrestricted
                             %features-%field-corecharc02ctlgpathintid       = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc02text         = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotcorecharc02valueid      = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotautomactivationisactive = if_abap_behv=>fc-f-unrestricted
                             %features-%field-supprotautomactivationdate     = if_abap_behv=>fc-f-unrestricted ).
      IF lines( flex_timebuckets ) GT 0.
        result_line-%features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-read_only.
        result_line-%features-%action-generateflexibletimebuckets   = if_abap_behv=>fc-o-disabled.
      ENDIF.
      IF root_result_line->corecharc01ctlgpathintid IS NOT INITIAL OR line_exists( characteristics[ supplyprotectionuuid = root_result_line->supplyprotectionuuid ] ).
        result_line-%features-%field-supprotisplanningcontextsto    = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotisplanningcontextslsord = if_abap_behv=>fc-f-read_only.
      ENDIF.
      IF NOT line_exists( groups[ supplyprotectionuuid = root_result_line->supplyprotectionuuid ] ).
        DATA(groups_dba)     = NEW cl_atp_sup_cvc_dba( ).
        DATA(blocked_groups) = groups_dba->read_by_object_uuids_blocked( VALUE #( ( uuid = root_result_line->supplyprotectionuuid ) ) ).
      ENDIF.
      IF line_exists( groups[ supplyprotectionuuid = root_result_line->supplyprotectionuuid ] ) OR blocked_groups IS NOT INITIAL.
        result_line-%features-%field-supprotplanningperiodenddate   = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotplanningperiodstartdate = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotplanningperiodtype      = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotcorecharc01ctlgpathuuid = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-corecharc01ctlgpathintid       = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotcorecharc01text         = if_abap_behv=>fc-f-read_only.
        IF root_result_line->corecharc01ctlgpathintid IS INITIAL.
          result_line-%features-%field-supprotcorecharc01valueid    = if_abap_behv=>fc-f-read_only.
        ELSE.
          result_line-%features-%field-supprotcorecharc01valueid    = if_abap_behv=>fc-f-unrestricted.
        ENDIF.
        result_line-%features-%field-supprotcorecharc02ctlgpathuuid = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-corecharc02ctlgpathintid       = if_abap_behv=>fc-f-read_only.
        result_line-%features-%field-supprotcorecharc02text         = if_abap_behv=>fc-f-read_only.
        IF root_result_line->corecharc02ctlgpathintid IS INITIAL.
          result_line-%features-%field-supprotcorecharc02valueid    = if_abap_behv=>fc-f-read_only.
        ELSE.
          result_line-%features-%field-supprotcorecharc02valueid    = if_abap_behv=>fc-f-unrestricted.
        ENDIF.
        result_line-%features-%assoc-_supprotcharacteristictp       = if_abap_behv=>fc-o-disabled.
        result_line-%features-%assoc-_supprotflexibletimebuckettp   = if_abap_behv=>fc-o-disabled.
        result_line-%features-%action-generateflexibletimebuckets   = if_abap_behv=>fc-o-disabled.
      ENDIF.
      IF ( NOT line_exists( groups[ supplyprotectionuuid = root_result_line->supplyprotectionuuid ] ) AND blocked_groups IS INITIAL ).
        result_line-%features-%action-moveplanninghorizon           = if_abap_behv=>fc-o-disabled.
        result_line-%features-%action-changeplanninghorizonend      = if_abap_behv=>fc-o-disabled.
      ENDIF.

      INSERT result_line INTO TABLE result.
    ENDLOOP.
  ENDMETHOD.

  " *** Actions ***
  METHOD activate_object.
    DATA(adjacent_duplicates_keys) = keys.
    SORT adjacent_duplicates_keys BY supplyprotectionuuid.
    DELETE ADJACENT DUPLICATES FROM adjacent_duplicates_keys COMPARING supplyprotectionuuid %cid_ref %is_draft.

    DATA(lines_of_keys) = lines( keys ).
    DATA(lines_adjacent_duplicates_keys) = lines( adjacent_duplicates_keys ).
    IF lines_of_keys <> lines_adjacent_duplicates_keys.
      DO.
        DATA(sy_index) = sy-index.
        IF sy_index > lines_adjacent_duplicates_keys. " in case that only the last two lines of the keys table has the same key
          EXIT.
        ENDIF.
        IF keys[ sy_index ] <> adjacent_duplicates_keys[ sy_index ]. " if line keys are not equal
          EXIT.
        ENDIF.
      ENDDO.
      APPEND VALUE #( %tky        = keys[ sy_index ]-%tky
                      %fail-cause = if_abap_behv=>cause-unspecific )
             TO failed-root.
      RETURN.
    ENDIF.
    MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
           UPDATE FIELDS ( supprotlifecyclestatus supprotactivationdate )
           WITH VALUE #( FOR i_supplyprotectiontp IN keys
                         ( %tky                   = i_supplyprotectiontp-%tky
                           supprotlifecyclestatus = status_active
                           supprotactivationdate  = sy-datlo ) )
           FAILED failed
           REPORTED reported.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
         ALL FIELDS
           WITH VALUE #( FOR i_supplyprotectiontp IN keys
                         ( %tky = i_supplyprotectiontp-%tky ) )
         RESULT DATA(read_created_result)
         FAILED failed.
    result = VALUE #( FOR sup_object IN read_created_result
                      ( %tky   = sup_object-%tky
                        %param = CORRESPONDING #( sup_object ) ) ).
  ENDMETHOD.

  METHOD deactivate_object.
    MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
      UPDATE FIELDS ( supprotlifecyclestatus )
        WITH VALUE #( FOR i_supplyprotectiontp IN keys ( %tky                   = i_supplyprotectiontp-%tky
                                                         supprotlifecyclestatus = status_deactivated ) )
      FAILED failed
      REPORTED reported.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( material plant supprotlifecyclestatus )
        WITH VALUE #( FOR i_supplyprotectiontp IN keys ( %tky = i_supplyprotectiontp-%tky ) )
      RESULT DATA(supobjects)
      FAILED failed.
    CHECK failed IS INITIAL.
    result = VALUE #( FOR supobject IN supobjects ( %tky   = supobject-%tky
                                                    %param = CORRESPONDING #( supobject ) ) ).
  ENDMETHOD.

  METHOD generate_flex_time_buckets.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supplyprotectionuuid supprotplanningperiodtype supprotplanningperiodstartdate supprotplanningperiodenddate )
        WITH CORRESPONDING #( keys )
      RESULT DATA(objects_result).
    CHECK objects_result IS NOT INITIAL.
    LOOP AT objects_result REFERENCE INTO DATA(object).
      IF ( object->supprotplanningperiodtype IS INITIAL OR object->supprotplanningperiodstartdate IS INITIAL OR object->supprotplanningperiodenddate IS INITIAL ).
        MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '077' INTO DATA(msg).
        APPEND VALUE #( %tky = object->%tky ) TO failed-root.
        APPEND VALUE #( %tky = object->%tky
                        %msg        = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
      ELSE.
        IF ( object->supprotplanningperiodtype EQ cl_atp_sup_timebucket_helper=>planning_period_type_flexible ).
          object->supprotplanningperiodtype = cl_atp_sup_timebucket_helper=>planning_period_type_one.
        ENDIF.
        DATA(new_flex_timebuckets) = NEW cl_atp_sup_rap_generator( )->get_generated_flex_timebuckets( EXPORTING object = object->* ).
        IF new_flex_timebuckets[ 1 ]-%target IS NOT INITIAL.
          DATA(num_of_flex_tbs) = lines( new_flex_timebuckets[ 1 ]-%target ).
          IF num_of_flex_tbs GT 55.
            MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '057' INTO DATA(msg1) WITH num_of_flex_tbs.
            APPEND VALUE #( %tky = object->%tky ) TO failed-root.
            APPEND VALUE #( %tky = object->%tky
                            %msg        = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
          ELSE.
            MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
              ENTITY root UPDATE
                FIELDS ( supprotplanningperiodtype )
                  WITH VALUE #( FOR i_supplyprotectiontp IN keys ( %tky                      = i_supplyprotectiontp-%tky
                                                                   supprotplanningperiodtype = cl_atp_sup_timebucket_helper=>planning_period_type_flexible ) )
              ENTITY root CREATE BY \_supprotflexibletimebuckettp
                FIELDS ( supprotperiodstartutcdatetime supprotperiodendutcdatetime startdate enddate )
                  WITH new_flex_timebuckets
            FAILED failed
            REPORTED reported.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supprotplanningperiodtype )
        WITH VALUE #( FOR i_supplyprotectiontp IN keys ( %tky = i_supplyprotectiontp-%tky ) )
      RESULT DATA(supobjects).
    CHECK failed IS INITIAL.
    result = VALUE #( FOR supobject IN supobjects ( %tky   = supobject-%tky
                                                    %param = CORRESPONDING #( supobject ) ) ).
  ENDMETHOD.

  METHOD move_planning_horizon.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        FIELDS ( supplyprotectionuuid supprotplanningperiodtype supprotplanningperiodstartdate supprotplanningperiodenddate )
          WITH CORRESPONDING #( keys )
      RESULT DATA(sup_objects)
      ENTITY root BY \_supplyprotectiongrouptp
        FIELDS ( supplyprotectiongroupuuid )
          WITH CORRESPONDING #( keys )
      RESULT DATA(object_groups)
      ENTITY root BY \_supprotflexibletimebuckettp
        FIELDS ( supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate numberofdays )
          WITH CORRESPONDING #( keys )
      RESULT DATA(object_flex_timebuckets).
    CHECK sup_objects IS NOT INITIAL.
    DATA(sup_object) = sup_objects[ 1 ].
    DATA(new_planning_period_startdate) = keys[ 1 ]-%param-supprotplanningperiodstartdate.
    IF new_planning_period_startdate EQ sup_object-supprotplanningperiodstartdate.
      result = VALUE #( FOR supobject IN sup_objects ( %tky   = supobject-%tky
                                                       %param = CORRESPONDING #( supobject ) ) ).
      RETURN.
    ENDIF.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY protectiongroups BY \_supplyprotectiontimebuckettp
        FIELDS ( supplyprotectionuuid supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate )
          WITH VALUE #( FOR grp IN object_groups ( %tky                      = grp-%tky
                                                   supplyprotectiongroupuuid = grp-supplyprotectiongroupuuid ) )
      RESULT DATA(object_timebuckets).
    DATA new_planning_period_enddate TYPE sup_planning_period_end_date.
    IF object_flex_timebuckets IS NOT INITIAL.
      " move flexible time buckets
      NEW cl_atp_sup_rap_generator( )->get_moved_flex_timebuckets( EXPORTING new_planning_startdate = new_planning_period_startdate
                                                                             old_planning_enddate   = sup_object-supprotplanningperiodenddate
                                                                   CHANGING  flex_timebuckets       = object_flex_timebuckets ).
      new_planning_period_enddate = object_flex_timebuckets[ lines( object_flex_timebuckets ) ]-enddate.
      IF new_planning_period_enddate LE sy-datum.
        MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '011' INTO DATA(msg1).
        APPEND VALUE #( %tky = sup_object-%tky ) TO failed-root.
        APPEND VALUE #( %tky = sup_object-%tky
                        %msg = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
        RETURN.
      ENDIF.
      MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
        ENTITY flextimebuckets
          UPDATE FIELDS ( supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate numberofdays )
            WITH VALUE #( FOR flex_tb IN object_flex_timebuckets ( %tky                          = flex_tb-%tky
                                                                   supprotperiodstartutcdatetime = flex_tb-supprotperiodstartutcdatetime
                                                                   startdate                     = flex_tb-startdate
                                                                   supprotperiodendutcdatetime   = flex_tb-supprotperiodendutcdatetime
                                                                   enddate                       = flex_tb-enddate
                                                                   numberofdays                  = flex_tb-numberofdays ) )
        REPORTED reported
        FAILED failed.
    ENDIF.
    IF object_timebuckets IS NOT INITIAL.
      " move group time buckets
      NEW cl_atp_sup_rap_generator( )->get_moved_timebuckets( EXPORTING planning_type          = sup_object-supprotplanningperiodtype
                                                                        new_planning_startdate = new_planning_period_startdate
                                                                        flex_timebuckets       = object_flex_timebuckets
                                                              CHANGING  timebuckets            = object_timebuckets ).
      new_planning_period_enddate = object_timebuckets[ lines( object_timebuckets ) ]-enddate.
      IF new_planning_period_enddate LE sy-datum.
        MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '011' INTO DATA(msg2).
        APPEND VALUE #( %tky = sup_object-%tky ) TO failed-root.
        APPEND VALUE #( %tky = sup_object-%tky
                        %msg = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
        RETURN.
      ENDIF.
      MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
        ENTITY timebuckets
          UPDATE FIELDS ( supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate )
            WITH VALUE #( FOR tb IN object_timebuckets ( %tky                          = tb-%tky
                                                         supprotperiodstartutcdatetime = tb-supprotperiodstartutcdatetime
                                                         startdate                     = tb-startdate
                                                         supprotperiodendutcdatetime   = tb-supprotperiodendutcdatetime
                                                         enddate                       = tb-enddate ) )
        REPORTED reported
        FAILED failed.
    ENDIF.
    CHECK failed IS INITIAL.
    " change planning horizon start and end date
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        UPDATE FIELDS ( supprotplanningperiodstartdate supprotplanningperiodenddate )
          WITH VALUE #( ( %tky                           = sup_object-%tky
                          supprotplanningperiodstartdate = new_planning_period_startdate
                          supprotplanningperiodenddate   = new_planning_period_enddate ) )
    FAILED failed
    REPORTED reported.
    CHECK failed IS INITIAL.
    result = VALUE #( FOR supobject IN sup_objects ( %tky   = supobject-%tky
                                                     %param = CORRESPONDING #( supobject ) ) ).
  ENDMETHOD.

  METHOD change_planning_horizon_end.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        FIELDS ( supplyprotectionuuid supprotplanningperiodtype supprotplanningperiodstartdate supprotplanningperiodenddate )
          WITH CORRESPONDING #( keys )
      RESULT DATA(sup_objects)
      ENTITY root BY \_supplyprotectiongrouptp
        FIELDS ( supplyprotectiongroupuuid unitofmeasure )
          WITH CORRESPONDING #( keys )
      RESULT DATA(groups)
      ENTITY root BY \_supprotflexibletimebuckettp
        FIELDS ( supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate numberofdays )
          WITH CORRESPONDING #( keys )
      RESULT DATA(flex_timebuckets).
    CHECK sup_objects IS NOT INITIAL.
    DATA(sup_object) = sup_objects[ 1 ].
    DATA(new_planning_period_enddate) = keys[ 1 ]-%param-supprotplanningperiodenddate.
    IF new_planning_period_enddate LE sy-datum.
      MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '011' INTO DATA(msg3).
      APPEND VALUE #( %tky = sup_object-%tky ) TO failed-root.
      APPEND VALUE #( %tky = sup_object-%tky
                      %msg = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
      RETURN.
    ELSEIF new_planning_period_enddate LT sup_object-supprotplanningperiodstartdate.
      MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '078' INTO DATA(msg2).
      APPEND VALUE #( %tky = sup_object-%tky ) TO failed-root.
      APPEND VALUE #( %tky = sup_object-%tky
                      %msg = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
      RETURN.
    ELSEIF new_planning_period_enddate EQ sup_object-supprotplanningperiodenddate.
      result = VALUE #( FOR supobject IN sup_objects ( %tky   = supobject-%tky
                                                       %param = CORRESPONDING #( supobject ) ) ).
      RETURN.
    ENDIF.
    SORT flex_timebuckets BY startdate.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY protectiongroups BY \_supplyprotectiontimebuckettp
        FIELDS ( supplyprotectionuuid supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate )
          WITH VALUE #( FOR grp IN groups ( %tky                      = grp-%tky
                                                   supplyprotectiongroupuuid = grp-supplyprotectiongroupuuid ) )
      RESULT DATA(groups_timebuckets).
    SORT groups_timebuckets BY startdate.
    IF flex_timebuckets IS NOT INITIAL.
      IF new_planning_period_enddate LT sup_object-supprotplanningperiodenddate.
        " delete all flexible time buckets with start date greater than new planning end date
        delete_obsolete_flex_tbs( EXPORTING new_planning_period_enddate = new_planning_period_enddate
                                            flex_timebuckets            = flex_timebuckets
                                  CHANGING  failed                      = failed
                                            reported                    = reported ).
        DELETE flex_timebuckets WHERE startdate GT new_planning_period_enddate.
        " delete all group(s) time buckets with start date greater than new planning end date
        delete_obsolete_groups_tbs( EXPORTING new_planning_period_enddate = new_planning_period_enddate
                                              groups_timebuckets          = groups_timebuckets
                                    CHANGING  failed                      = failed
                                              reported                    = reported ).
      ENDIF.
      " update end date of all last flexible and last group(s) time buckets with new planning end date
      update_timebuckets_end( EXPORTING new_planning_period_enddate = new_planning_period_enddate
                                        flex_timebuckets            = flex_timebuckets
                                        groups_timebuckets          = groups_timebuckets
                              CHANGING  failed                      = failed
                                        reported                    = reported ).
    ELSEIF groups_timebuckets IS NOT INITIAL.
      IF sup_object-supprotplanningperiodtype EQ cl_atp_sup_timebucket_helper=>planning_period_type_one.
        " PERIOD-TYPE = ONE: no deletion of obsolete or creation of new group time buckets; only update end date of all group(s) time buckets with the new planning end date
        DATA(new_plng_period_end_timestamp) = cl_atp_sup_timebucket_helper=>get_end_timestamp( new_planning_period_enddate ).
        MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
          ENTITY timebuckets
            UPDATE FIELDS ( supprotperiodendutcdatetime enddate )
              WITH VALUE #( FOR obj_tb IN groups_timebuckets ( %tky                       = obj_tb-%tky
                                                              supprotperiodendutcdatetime = new_plng_period_end_timestamp
                                                              enddate                     = new_planning_period_enddate ) )
          REPORTED reported
          FAILED failed.
      ELSE.
        IF new_planning_period_enddate LT sup_object-supprotplanningperiodenddate.
          " delete all group(s) time buckets with start date greater than new planning end date
          delete_obsolete_groups_tbs( EXPORTING new_planning_period_enddate = new_planning_period_enddate
                                                groups_timebuckets          = groups_timebuckets
                                      CHANGING  failed                      = failed
                                                reported                    = reported ).
        ELSEIF new_planning_period_enddate GT sup_object-supprotplanningperiodenddate.
          create_group_timebuckets( EXPORTING new_planning_period_enddate = new_planning_period_enddate
                                              object                      = sup_object
                                              groups                      = groups
                                              groups_timebuckets          = groups_timebuckets
                                    CHANGING  failed                      = failed
                                              reported                    = reported ).
        ENDIF.
      ENDIF.
    ENDIF.
    CHECK failed IS INITIAL.
    " change planning horizon end date
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        UPDATE FIELDS ( supprotplanningperiodenddate )
          WITH VALUE #( ( %tky                           = sup_object-%tky
                          supprotplanningperiodenddate   = new_planning_period_enddate ) )
    FAILED failed
    REPORTED reported.
    CHECK failed IS INITIAL.
    result = VALUE #( FOR supobject IN sup_objects ( %tky   = supobject-%tky
                                                     %param = CORRESPONDING #( supobject ) ) ).
  ENDMETHOD.

  " *** Determinations ***
  METHOD set_object_authgroup.
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        UPDATE FIELDS ( charcvalauthzngroup )
          WITH VALUE #( FOR object IN keys ( %tky                = object-%tky
                                             charcvalauthzngroup = NEW cl_atp_sup_bp_i_supprottp( )->determine_auth_grp_for_object( object-%tky ) ) )
      REPORTED DATA(modify_reported).
    reported-root = CORRESPONDING #( modify_reported-root ).
  ENDMETHOD.

  METHOD set_object_initial_values.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supprotisplanningcontextslsord supprotisplanningcontextsto supprotlifecyclestatus
               supprotcorecharc01name corecharc01ctlgpathintid supprotcorecharc01ctlgpathuuid
               supprotcorecharc02name corecharc02ctlgpathintid supprotcorecharc02ctlgpathuuid
               supprotcnsmpndatetimetype )
        WITH CORRESPONDING #( keys )
      RESULT DATA(objects_result).
    CHECK objects_result IS NOT INITIAL.
    CHECK is_draft_activation( ) EQ abap_false.
    DATA reported_initial_values TYPE if_supplyprotection_rap=>tt_root_action_reported.
    LOOP AT objects_result REFERENCE INTO DATA(object).
      DATA(new_status) = COND #( WHEN object->supprotlifecyclestatus = status_active THEN status_active
                                                                                     ELSE status_in_planning ).
      DATA(new_self_restriciton) = COND #( WHEN object->supprotselfrestrictiontype IS INITIAL THEN if_supplyprotection_rap=>self_restriction_type-off
                                                                                              ELSE object->supprotselfrestrictiontype ).

      DATA(activation_date) = COND #( WHEN new_status = status_active THEN sy-datlo ).
      DATA(new_plancontext_so) = object->supprotisplanningcontextslsord.
      IF ( object->supprotisplanningcontextslsord IS INITIAL AND object->supprotisplanningcontextsto IS INITIAL ).
        new_plancontext_so = abap_true.
      ENDIF.
      DATA(new_catalogtype) = COND #( WHEN object->supprotisplanningcontextslsord EQ abap_true
                                       AND object->supprotisplanningcontextsto    EQ abap_true THEN catalog_so_sto
                                      WHEN object->supprotisplanningcontextslsord EQ abap_true THEN catalog_so
                                      WHEN object->supprotisplanningcontextsto    EQ abap_true THEN catalog_sto
                                      ELSE catalog_so ).
      object->supprotcnsmpndatetimetype = COND #( WHEN object->supprotcnsmpndatetimetype IS INITIAL THEN if_supplyprotection_rap=>consumption_on-requested_delivery_date ).
      NEW cl_atp_sup_rap_determination( )->get_corecharcs_by_name( EXPORTING sup_object        = object->*
                                                                   IMPORTING core01_path_intid = DATA(new_core01_path_intid)
                                                                             core01_path_uuid  = DATA(new_core01_path_uuid)
                                                                             core02_path_intid = DATA(new_core02_path_intid)
                                                                             core02_path_uuid  = DATA(new_core02_path_uuid) ).
      IF ( ( new_core01_path_intid IS NOT INITIAL AND new_core01_path_uuid IS INITIAL ) OR ( new_core02_path_intid IS NOT INITIAL AND new_core02_path_uuid IS INITIAL ) ).
        DATA reported_object TYPE if_supplyprotection_rap=>tt_root_action_reported.
        CLEAR reported_object.
        NEW cl_atp_sup_rap_determination( )->get_corecharcs_pathuuid( EXPORTING sup_object           = object->*
                                                                      IMPORTING corecharc01_pathuuid = new_core01_path_uuid
                                                                                corecharc02_pathuuid = new_core02_path_uuid
                                                                      CHANGING  reported             = reported_object ).
        CHECK reported_object IS INITIAL.
      ENDIF.
      MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
        UPDATE SET FIELDS
          WITH VALUE #( ( %tky                           = object->%tky
                          supprotlifecyclestatus         = new_status
                          supprotisplanningcontextslsord = new_plancontext_so
                          supprotcharccatalogtype        = new_catalogtype
                          corecharc01ctlgpathintid       = new_core01_path_intid
                          supprotcorecharc01ctlgpathuuid = new_core01_path_uuid
                          corecharc02ctlgpathintid       = new_core02_path_intid
                          supprotcorecharc02ctlgpathuuid = new_core02_path_uuid
                          supprotcnsmpndatetimetype      = object->supprotcnsmpndatetimetype
                          supprotactivationdate          = activation_date
                          supprotselfrestrictiontype     = new_self_restriciton ) )
        REPORTED DATA(reported_modify).
      INSERT LINES OF reported_modify-root INTO TABLE reported_initial_values-root.
    ENDLOOP.
    reported = CORRESPONDING #( DEEP reported_initial_values ).
  ENDMETHOD.

  METHOD set_object_catalogtype.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supprotisplanningcontextslsord supprotisplanningcontextsto supprotcharccatalogtype )
        WITH CORRESPONDING #( keys )
      RESULT DATA(sup_objects).
    CHECK sup_objects IS NOT INITIAL.
    CHECK is_draft_activation( ) EQ abap_false.
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      DATA(new_catalog_type) = COND #( WHEN sup_object->supprotisplanningcontextslsord EQ abap_true AND sup_object->supprotisplanningcontextsto EQ abap_true THEN catalog_so_sto
                                       WHEN sup_object->supprotisplanningcontextslsord EQ abap_true THEN catalog_so
                                       WHEN sup_object->supprotisplanningcontextsto    EQ abap_true THEN catalog_sto ).
      IF ( sup_object->supprotcharccatalogtype NE new_catalog_type ).
        MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
            UPDATE FIELDS ( supprotcharccatalogtype )
              WITH VALUE #( ( %tky                    = sup_object->%tky
                              supprotcharccatalogtype = new_catalog_type ) )
            REPORTED DATA(reported_modify).
        reported = CORRESPONDING #( DEEP reported_modify ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD set_object_charcs_path_uuids.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( corecharc01ctlgpathintid supprotcorecharc01ctlgpathuuid
               corecharc02ctlgpathintid supprotcorecharc02ctlgpathuuid )
        WITH CORRESPONDING #( keys )
      RESULT DATA(sup_objects).
    CHECK sup_objects IS NOT INITIAL.
    CHECK is_draft_activation( ) EQ abap_false.
    DATA reported_charcs_path_uuids TYPE if_supplyprotection_rap=>tt_root_action_reported.
    DATA reported_object TYPE if_supplyprotection_rap=>tt_root_action_reported.
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      CLEAR reported_charcs_path_uuids.
      NEW cl_atp_sup_rap_determination( )->get_corecharcs_pathuuid( EXPORTING sup_object           = sup_object->*
                                                                    IMPORTING corecharc01_pathuuid = DATA(core1_pathuuid)
                                                                              corecharc02_pathuuid = DATA(core2_pathuuid)
                                                                    CHANGING  reported             = reported_object ).
      INSERT LINES OF reported_object-root INTO TABLE reported_charcs_path_uuids-root.
      CHECK reported_object IS INITIAL.
      IF ( sup_object->supprotcorecharc01ctlgpathuuid NE core1_pathuuid OR sup_object->supprotcorecharc02ctlgpathuuid NE core2_pathuuid ).
        MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
          UPDATE SET FIELDS
            WITH VALUE #( ( %tky                           = sup_object->%tky
                            supprotcorecharc01ctlgpathuuid = core1_pathuuid
                            supprotcorecharc02ctlgpathuuid = core2_pathuuid ) )
          REPORTED DATA(reported_modify).
        INSERT LINES OF reported_modify-root INTO TABLE reported_charcs_path_uuids-root.
      ENDIF.
    ENDLOOP.
    reported = CORRESPONDING #( DEEP reported_charcs_path_uuids ).
  ENDMETHOD.

  METHOD set_object_charcs_by_text.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
    FIELDS ( supprotcharccatalogtype
             supprotcorecharc01text corecharc01ctlgpathintid supprotcorecharc01ctlgpathuuid
             supprotcorecharc02text corecharc02ctlgpathintid supprotcorecharc02ctlgpathuuid )
      WITH CORRESPONDING #( keys )
    RESULT DATA(sup_objects).
    CHECK sup_objects IS NOT INITIAL.
    CHECK is_draft_activation( ) EQ abap_false.
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      NEW cl_atp_sup_rap_determination( )->get_corecharcs_by_text( EXPORTING sup_object        = sup_object->*
                                                                   IMPORTING core01_path_intid = DATA(new_core01_path_intid)
                                                                             core01_path_uuid  = DATA(new_core01_path_uuid)
                                                                             core02_path_intid = DATA(new_core02_path_intid)
                                                                             core02_path_uuid  = DATA(new_core02_path_uuid) ).
      IF ( new_core01_path_intid NE sup_object->corecharc01ctlgpathintid OR new_core01_path_uuid NE sup_object->supprotcorecharc01ctlgpathuuid ) OR
         ( new_core02_path_intid NE sup_object->corecharc02ctlgpathintid OR new_core02_path_uuid NE sup_object->supprotcorecharc02ctlgpathuuid ).
        MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
          UPDATE FIELDS ( corecharc01ctlgpathintid supprotcorecharc01ctlgpathuuid corecharc02ctlgpathintid supprotcorecharc02ctlgpathuuid )
            WITH VALUE #( ( %tky                           = sup_object->%tky
                            corecharc01ctlgpathintid       = new_core01_path_intid
                            supprotcorecharc01ctlgpathuuid = new_core01_path_uuid
                            corecharc02ctlgpathintid       = new_core02_path_intid
                            supprotcorecharc02ctlgpathuuid = new_core02_path_uuid ) )
          REPORTED DATA(reported_modify).
        reported = CORRESPONDING #( DEEP reported_modify ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  " *** Validations ***
  METHOD check_object_authority.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        FROM VALUE #( FOR object IN keys ( %tky = object-%tky ) )
    RESULT DATA(objects)
    FAILED  DATA(failed_root).
    CHECK objects IS NOT INITIAL.
    LOOP AT objects REFERENCE INTO DATA(sup_object).
      APPEND VALUE #( %tky        = sup_object->%tky
                      %state_area = if_supplyprotection_rap=>state_area-checkobjectauthority ) TO reported-root.
      IF if_abap_behv=>auth-unauthorized = get_authorization_check_value( activity  = authority_change
                                                                          authgroup = sup_object->charcvalauthzngroup ).
        IF sup_object->corecharc02ctlgpathintid IS INITIAL.
          DATA(value_ids) = | { sup_object->supprotcorecharc01text } = { sup_object->supprotcorecharc01valueid } |.
        ELSE.
          value_ids = | { sup_object->supprotcorecharc01text } = { sup_object->supprotcorecharc01valueid }, { sup_object->supprotcorecharc02text } = { sup_object->supprotcorecharc02valueid } |.
        ENDIF.
        APPEND VALUE #( %tky = sup_object->%tky ) TO failed-root.
        MESSAGE ID  'ATP_SUP_LOGIC' TYPE 'E' NUMBER '040' INTO DATA(msg) WITH sup_object->supplyprotectionname value_ids.
        APPEND VALUE #( %tky        = sup_object->%tky
                        %state_area = if_supplyprotection_rap=>state_area-checkobjectauthority
                        %msg        = cl_atp_sup_rap_message=>new_message( id       = sy-msgid
                                                                           number   = sy-msgno
                                                                           v1       = sy-msgv1
                                                                           v2       = sy-msgv2
                                                                           severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_object_mandatory_fields.
    DATA:
      sup_objects      TYPE if_supplyprotection_rap=>tt_root_read_result,
      flex_timebuckets TYPE if_supplyprotectionflextb_rap=>tt_flex_timebucket_read_result,
      prio_charcs      TYPE if_supplyprotection_rap=>tt_charc_read_result,
      read_failed      TYPE if_supplyprotection_rap=>tt_root_action_failed.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT sup_objects
      ENTITY root BY \_supprotflexibletimebuckettp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT flex_timebuckets
      ENTITY root BY \_supprotcharacteristictp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT prio_charcs
      FAILED read_failed.
    failed = CORRESPONDING #( DEEP read_failed ).
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      DATA(sup_object_flex_timebuckets) = flex_timebuckets.
      DELETE sup_object_flex_timebuckets WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      DATA(sup_object_prio_charcs) = prio_charcs.
      DELETE sup_object_prio_charcs WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      NEW cl_atp_sup_rap_validation( )->check_object_fields( EXPORTING sup_object       = sup_object->*
                                                                       flex_timebuckets = sup_object_flex_timebuckets
                                                                       prio_charcs      = sup_object_prio_charcs
                                                             CHANGING  failed           = failed-root
                                                                       reported         = reported-root ).
    ENDLOOP.
  ENDMETHOD.

  METHOD check_object_next_status.
    DATA:
      sup_objects      TYPE if_supplyprotection_rap=>tt_root_read_result,
      flex_timebuckets TYPE if_supplyprotectionflextb_rap=>tt_flex_timebucket_read_result,
      prio_charcs      TYPE if_supplyprotection_rap=>tt_charc_read_result,
      read_failed      TYPE if_supplyprotection_rap=>tt_root_action_failed.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT sup_objects
      ENTITY root BY \_supprotflexibletimebuckettp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT flex_timebuckets
      ENTITY root BY \_supprotcharacteristictp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT prio_charcs
      FAILED read_failed.
    failed = CORRESPONDING #( DEEP read_failed ).
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      DATA(sup_object_flex_timebuckets) = flex_timebuckets.
      DELETE sup_object_flex_timebuckets WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      DATA(sup_object_prio_charcs) = prio_charcs.
      DELETE sup_object_prio_charcs WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      NEW cl_atp_sup_rap_validation( )->check_next_status( EXPORTING sup_object       = sup_object->*
                                                                     flex_timebuckets = sup_object_flex_timebuckets
                                                                     prio_charcs      = sup_object_prio_charcs
                                                           CHANGING  failed           = failed-root
                                                                     reported         = reported-root ).
    ENDLOOP.
  ENDMETHOD.

  METHOD check_object_autoactivation.
    DATA:
      sup_objects TYPE if_supplyprotection_rap=>tt_root_read_result,
      prio_charcs TYPE if_supplyprotection_rap=>tt_charc_read_result,
      read_failed TYPE if_supplyprotection_rap=>tt_root_action_failed.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT sup_objects
      ENTITY root BY \_supprotcharacteristictp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
        RESULT prio_charcs
      FAILED read_failed.
    failed = CORRESPONDING #( DEEP read_failed ).
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object) WHERE supprotautomactivationisactive = abap_true.
      DATA(sup_object_prio_charcs) = prio_charcs.
      DELETE sup_object_prio_charcs WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      NEW cl_atp_sup_rap_validation( )->check_auto_activation( EXPORTING sup_object  = sup_object->*
                                                                         prio_charcs = sup_object_prio_charcs
                                                               CHANGING  failed      = failed-root
                                                                         reported    = reported-root ).
    ENDLOOP.
  ENDMETHOD.

  METHOD check_object_numofcharcs.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supprotcorecharc01ctlgpathuuid supprotcorecharc01valueid supprotcorecharc02ctlgpathuuid supprotcorecharc02valueid )
        WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
      RESULT DATA(objects).
    LOOP AT objects REFERENCE INTO DATA(object).
      APPEND VALUE #( %tky        = object->%tky
                      %state_area = if_supplyprotection_rap=>state_area-checkobjectnumofcharcs ) TO reported-root.
      count_charcs_of_sup_object( EXPORTING sup_object         = object->*
                                  IMPORTING num_of_core_charcs = DATA(numofcorecharcs)
                                            num_of_prio_charcs = DATA(numofpriocharcs) ).
      IF numofcorecharcs + numofpriocharcs GT 10.
        APPEND VALUE #( %tky = object->%tky ) TO failed-root.
        MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '004' INTO DATA(msg) WITH numofcorecharcs numofpriocharcs.
        APPEND VALUE #( %tky        = object->%tky
                        %state_area = if_supplyprotection_rap=>state_area-checkobjectnumofcharcs
                        %msg        = new_message( id       = sy-msgid
                                                   number   = sy-msgno
                                                   v1       = sy-msgv1
                                                   v2       = sy-msgv2
                                                   severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_object_charcs_wildcards.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      ALL FIELDS WITH CORRESPONDING #( keys )
      RESULT DATA(sup_objects)
            FAILED DATA(read_failed).
    failed = CORRESPONDING #( DEEP read_failed ).
    NEW cl_atp_sup_rap_validation( )->check_wildcards( EXPORTING sup_objects = sup_objects
                                                       CHANGING  failed      = failed-root
                                                                 reported    = reported-root ).
  ENDMETHOD.

  METHOD count_charcs_of_sup_object.
    DATA numofcorecharcs TYPE i VALUE 0.
    IF NOT sup_object-supprotcorecharc01ctlgpathuuid IS INITIAL AND
       NOT sup_object-supprotcorecharc01valueid      IS INITIAL.
      numofcorecharcs += 1.
    ENDIF.
    IF NOT sup_object-supprotcorecharc02ctlgpathuuid IS INITIAL AND
       NOT sup_object-supprotcorecharc02valueid      IS INITIAL.
      numofcorecharcs += 1.
    ENDIF.
    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      BY \_supprotcharacteristictp
        FIELDS ( supprotcharacteristicuuid )
          WITH VALUE #( ( %tky = sup_object-%tky ) )
      RESULT DATA(priocharcs).
    num_of_prio_charcs = lines( priocharcs ).
    num_of_core_charcs = numofcorecharcs.
  ENDMETHOD.

  METHOD get_authorization_check_value.
    IF authgroup IS NOT INITIAL.
      AUTHORITY-CHECK OBJECT 'M_SUP_CVC'
        ID 'ACTVT' FIELD activity
        ID 'SUPAUTHGRP' FIELD authgroup.
    ELSE.
      AUTHORITY-CHECK OBJECT 'M_SUP_CVC'
        ID 'ACTVT' FIELD activity
        ID 'SUPAUTHGRP' DUMMY.
    ENDIF.
    IF sy-subrc =  0.
      authorization = if_abap_behv=>auth-allowed.
    ELSE.
      authorization = if_abap_behv=>auth-unauthorized.
    ENDIF.
  ENDMETHOD.

  METHOD get_global_authorizations.
    result = check_global_auth_for_update( EXPORTING requested_authorizations = requested_authorizations
                                           CHANGING  reported                 = reported ).
    result-%create = check_global_auth_for_create( EXPORTING requested_authorizations_cre = requested_authorizations-%create
                                                   CHANGING  reported                     = reported ).
    result-%delete = check_global_auth_for_delete( EXPORTING requested_authorizations_del = requested_authorizations-%delete
                                                   CHANGING  reported                     = reported ).
  ENDMETHOD.

  METHOD check_global_auth_for_update.
    " Actions are treated like update
    CHECK    requested_authorizations-%update                              = if_abap_behv=>mk-on
          OR requested_authorizations-%action-edit                         = if_abap_behv=>mk-on
          OR requested_authorizations-%action-setlifecyclestatustoactive   = if_abap_behv=>mk-on
          OR requested_authorizations-%action-setlifecyclestatustoinactive = if_abap_behv=>mk-on
          OR requested_authorizations-%action-copysupplyprotectionobject   = if_abap_behv=>mk-on
          OR requested_authorizations-%action-generateflexibletimebuckets  = if_abap_behv=>mk-on.
    DATA(authorization_update) = get_authorization_check_value( activity = authority_change ).
    result-%update                              = authorization_update.
    result-%action-edit                         = authorization_update.
    result-%action-setlifecyclestatustoactive   = authorization_update.
    result-%action-copysupplyprotectionobject   = authorization_update.
    result-%action-setlifecyclestatustoinactive = authorization_update.
    result-%action-generateflexibletimebuckets  = authorization_update.
    CHECK authorization_update = if_abap_behv=>auth-unauthorized.
    MESSAGE i066(atp_sup_logic) INTO DATA(message).
    APPEND VALUE #( %msg    = new_message( id       = sy-msgid
                                           number   = sy-msgno
                                           severity = if_abap_behv_message=>severity-error )
                    %global = if_abap_behv=>mk-on ) TO reported-root.
  ENDMETHOD.

  METHOD check_global_auth_for_create.
    CHECK requested_authorizations_cre = if_abap_behv=>mk-on.
    result_create = get_authorization_check_value( activity = authority_create ).
    CHECK result_create = if_abap_behv=>auth-unauthorized.
    MESSAGE i065(atp_sup_logic) INTO DATA(message).
    APPEND VALUE #( %msg    = new_message( id       = sy-msgid
                                           number   = sy-msgno
                                           severity = if_abap_behv_message=>severity-error )
                    %global = if_abap_behv=>mk-on ) TO reported-root.
  ENDMETHOD.

  METHOD check_global_auth_for_delete.
    CHECK requested_authorizations_del = if_abap_behv=>mk-on.
    result_delete = get_authorization_check_value( activity = authority_delete ).
    CHECK result_delete = if_abap_behv=>auth-unauthorized.
    MESSAGE i067(atp_sup_logic) INTO DATA(message).
    APPEND VALUE #( %msg    = new_message( id       = sy-msgid
                                           number   = sy-msgno
                                           severity = if_abap_behv_message=>severity-error )
                    %global = if_abap_behv=>mk-on ) TO reported-root.
  ENDMETHOD.

  METHOD get_instance_authorizations.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        FIELDS ( supplyprotectionname material plant charcvalauthzngroup )
          WITH VALUE #( FOR key IN keys ( %tky = key-%tky ) )
      RESULT DATA(objects)
      FAILED failed.
    "all actions are treated like update
    DATA(update_requested) = COND abap_bool( WHEN    requested_authorizations-%update                              = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%assoc-_supprotcharacteristictp      = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%assoc-_supprotflexibletimebuckettp  = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%assoc-_supplyprotectiongrouptp      = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%action-edit                         = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%action-setlifecyclestatustoactive   = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%action-setlifecyclestatustoinactive = if_abap_behv=>mk-on
                                                  OR requested_authorizations-%action-generateflexibletimebuckets  = if_abap_behv=>mk-on
                                            THEN abap_true ELSE abap_false ).
    DATA(delete_requested) = COND abap_bool( WHEN requested_authorizations-%delete = if_abap_behv=>mk-on
                                             THEN abap_true ELSE abap_false ).
    LOOP AT objects REFERENCE INTO DATA(object).
      DATA(update_granted) = check_authorization_for_update( EXPORTING object           = object->*
                                                                       update_requested = update_requested
                                                             CHANGING  reported         = reported ).
      DATA(delete_granted) = check_authorization_for_delete( EXPORTING object           = object->*
                                                                       delete_requested = delete_requested
                                                             CHANGING  reported         = reported ).
      APPEND VALUE #( %tky                                 = object->%tky
                      %update                              = update_granted
                      %assoc-_supprotcharacteristictp      = update_granted
                      %assoc-_supprotflexibletimebuckettp  = update_granted
                      %assoc-_supplyprotectiongrouptp      = update_granted
                      %action-setlifecyclestatustoactive   = update_granted
                      %action-setlifecyclestatustoinactive = update_granted
                      %action-generateflexibletimebuckets  = update_granted
                      %action-edit                         = update_granted
                      %delete                              = delete_granted ) TO result.
    ENDLOOP.
  ENDMETHOD.

  METHOD check_authorization_for_delete.
    CHECK delete_requested = abap_true.
    delete_granted = get_authorization_check_value( activity  = authority_delete
                                                    authgroup = object-charcvalauthzngroup ).
    CHECK delete_granted = if_abap_behv=>auth-unauthorized.
    MESSAGE i002(atp_sup_logic) INTO DATA(msg) WITH object-supplyprotectionname object-material object-plant.
    APPEND VALUE #( %tky = object-%tky
                    %msg = cl_atp_sup_rap_message=>new_message( id       = sy-msgid
                                                                number   = sy-msgno
                                                                v1       = sy-msgv1
                                                                v2       = sy-msgv2
                                                                v3       = sy-msgv3
                                                                severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
  ENDMETHOD.

  METHOD check_authorization_for_update.
    CHECK update_requested = abap_true.
    update_granted = get_authorization_check_value( activity  = authority_change
                                                    authgroup = object-charcvalauthzngroup ).
    CHECK update_granted = if_abap_behv=>auth-unauthorized.
    MESSAGE i002(atp_sup_logic) INTO DATA(msg) WITH object-supplyprotectionname object-material object-plant.
    APPEND VALUE #( %tky = object-%tky
                    %msg = cl_atp_sup_rap_message=>new_message( id       = sy-msgid
                                                                number   = sy-msgno
                                                                v1       = sy-msgv1
                                                                v2       = sy-msgv2
                                                                v3       = sy-msgv3
                                                                severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
  ENDMETHOD.

  " *** Prechecks ***
  METHOD prechecks_for_object_creation.
    NEW cl_atp_sup_rap_validation( )->prechecks_for_object_creation( EXPORTING sup_objects = entities
                                                                     CHANGING  failed      = failed
                                                                               reported    = reported ).
  ENDMETHOD.

  METHOD prechecks_for_charc_creation.
    NEW cl_atp_sup_rap_validation( )->prechecks_for_charc_creation( EXPORTING sup_objects = entities
                                                                    CHANGING  failed      = failed
                                                                              reported    = reported ).
  ENDMETHOD.

  METHOD prechecks_for_group_creation.

    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        ALL FIELDS WITH VALUE #( FOR key IN entities ( %tky = key-%tky ) )
      RESULT DATA(sup_objects)
      ENTITY root BY \_supprotflexibletimebuckettp
        ALL FIELDS WITH VALUE #( FOR key IN entities ( %tky = key-%tky ) )
      RESULT DATA(flex_timebuckets)
      ENTITY root BY \_supprotcharacteristictp
        ALL FIELDS WITH VALUE #( FOR key IN entities ( %tky = key-%tky ) )
      RESULT DATA(prio_charcs)
      ENTITY root BY \_supplyprotectiongrouptp
        ALL FIELDS WITH VALUE #( FOR key IN entities ( %tky = key-%tky ) )
      RESULT DATA(groups).
    LOOP AT sup_objects REFERENCE INTO DATA(sup_object).
      APPEND VALUE #( %tky        = sup_object->%tky
                      %state_area = if_abap_behv=>state_area_all ) TO reported-root.
      DATA(sup_object_flex_timebuckets) = flex_timebuckets.
      DELETE sup_object_flex_timebuckets WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      DATA(sup_object_prio_charcs) = prio_charcs.
      DELETE sup_object_prio_charcs WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      DATA(sup_object_groups) = groups.
      DELETE sup_object_groups WHERE supplyprotectionuuid NE sup_object->supplyprotectionuuid.
      IF sup_object_groups IS INITIAL.
        NEW cl_atp_sup_rap_validation( )->prechecks_for_group_creation( EXPORTING sup_object       = sup_object->*
                                                                                  flex_timebuckets = sup_object_flex_timebuckets
                                                                                  prio_charcs      = sup_object_prio_charcs
                                                                        CHANGING  failed           = failed
                                                                                  reported         = reported ).

        NEW cl_atp_sup_rap_validation_char( )->prechecks_for_group_creation( EXPORTING sup_object  = sup_object->*
                                                                                       prio_charcs = sup_object_prio_charcs
                                                                             CHANGING  failed      = failed
                                                                                       reported    = reported ).

        NEW cl_atp_sup_rap_validation_flex( )->prechecks_for_group_creation( EXPORTING sup_object       = sup_object->*
                                                                                       flex_timebuckets = sup_object_flex_timebuckets
                                                                             CHANGING  failed           = failed
                                                                                       reported         = reported ).
      ELSE.
        IF sup_object_prio_charcs IS INITIAL.
          MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '060' INTO DATA(msg).
          APPEND VALUE #( %tky = sup_object->%tky ) TO failed-root.
          APPEND VALUE #( %tky = sup_object->%tky
                          %msg        = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 v2 = sy-msgv2 v3 = sy-msgv3 v4 = sy-msgv4 severity = if_abap_behv_message=>severity-error )
                          %element    = VALUE #( corecharc01ctlgpathintid = if_abap_behv=>mk-on ) ) TO reported-root.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  " *** Helper ***
  METHOD is_draft_activation.
    cl_abap_behv_aux=>get_current_context( IMPORTING draft_activate = is_draft_activation ).
  ENDMETHOD.


  METHOD copy_object.
    DATA target_supobjects       TYPE TABLE FOR CREATE i_supplyprotectiontp\\root.
    DATA target_characteristics  TYPE TABLE FOR CREATE i_supplyprotectiontp\\root\_supprotcharacteristictp.
    DATA target_protectiongroups TYPE TABLE FOR CREATE i_supplyprotectiontp\\root\_supplyprotectiongrouptp.
    DATA target_timebuckets      TYPE TABLE FOR CREATE i_supplyprotectiontp\\protectiongroups\_supplyprotectiontimebuckettp.
    DATA target_flex_timebuckets TYPE TABLE FOR CREATE i_supplyprotectiontp\\root\_supprotflexibletimebuckettp.
    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky-%is_draft            = COND #( WHEN key-%param-isactiveentity = abap_true THEN if_abap_behv=>mk-off
                                                                                                                                  ELSE if_abap_behv=>mk-on )
                                                   %tky-supplyprotectionuuid = key-%param-supplyprotectionuuid  )  )
      RESULT DATA(source_supobjects)
      ENTITY root BY \_supprotcharacteristictp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky-%is_draft            = COND #( WHEN key-%param-isactiveentity = abap_true THEN if_abap_behv=>mk-off
                                                                                                                                  ELSE if_abap_behv=>mk-on )
                                                   %tky-supplyprotectionuuid = key-%param-supplyprotectionuuid  )  )
      RESULT DATA(source_characteristics)
      ENTITY root BY \_supplyprotectiongrouptp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky-%is_draft            = COND #( WHEN key-%param-isactiveentity = abap_true THEN if_abap_behv=>mk-off
                                                                                                                                  ELSE if_abap_behv=>mk-on )
                                                   %tky-supplyprotectionuuid = key-%param-supplyprotectionuuid  )  )
      RESULT DATA(source_protectiongroups)
      ENTITY root BY \_supprotflexibletimebuckettp
        ALL FIELDS WITH VALUE #( FOR key IN keys ( %tky-%is_draft            = COND #( WHEN key-%param-isactiveentity = abap_true THEN if_abap_behv=>mk-off
                                                                                                                                  ELSE if_abap_behv=>mk-on )
                                                   %tky-supplyprotectionuuid = key-%param-supplyprotectionuuid  )  )
      RESULT DATA(source_flex_timebuckets).

    CHECK lines( source_supobjects ) = lines( keys ).

    LOOP AT source_supobjects ASSIGNING FIELD-SYMBOL(<source_supobject>).
      APPEND LINES OF copy_supobject( <source_supobject> )
          TO target_supobjects.
      APPEND LINES OF copy_characteristics( source_supobject       = <source_supobject>
                                            source_characteristics = source_characteristics )
          TO target_characteristics.
      APPEND LINES OF copy_flex_timebuckets( source_supobject        = <source_supobject>
                                             source_flex_timebuckets = source_flex_timebuckets )
          TO target_flex_timebuckets.
      APPEND LINES OF copy_protectiongroups( source_supobject        = <source_supobject>
                                             source_protectiongroups = source_protectiongroups )
          TO target_protectiongroups.
      LOOP AT source_protectiongroups ASSIGNING FIELD-SYMBOL(<source_protectiongroup>) WHERE supplyprotectionuuid = <source_supobject>-supplyprotectionuuid.
        READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
          ENTITY protectiongroups BY \_supplyprotectiontimebuckettp
            ALL FIELDS WITH VALUE #( ( supplyprotectiongroupuuid = <source_protectiongroup>-supplyprotectiongroupuuid ) )
          RESULT DATA(source_timebuckets).
        APPEND LINES OF copy_timebuckets( source_protectiongroup = <source_protectiongroup>
                                          source_timebuckets     = source_timebuckets )
            TO target_timebuckets.
      ENDLOOP.
    ENDLOOP.
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY root CREATE
        FIELDS ( supplyprotectionname material plant
                 supprotisplanningcontextslsord supprotisplanningcontextsto supprotcharccatalogtype
                 supprotplanningperiodtype supprotplanningperiodstartdate supprotplanningperiodenddate
                 supprotselfrestrictiontype supprotcnsmpndatetimetype
                 supprotautomactivationisactive supprotautomactivationdate
                 supprotcorecharc01ctlgpathuuid corecharc01ctlgpathintid supprotcorecharc01valueid supprotcorecharc01text
                 supprotcorecharc02ctlgpathuuid corecharc02ctlgpathintid supprotcorecharc02valueid supprotcorecharc02text
                 charcvalauthzngroup supplyprotectionisblocked unitofmeasure )
           WITH target_supobjects
        ENTITY root CREATE BY \_supprotcharacteristictp
          FIELDS ( supprotordinalnumbervalue supprotcharccolumnname characteristic supprotcharcctlgpathuuid supprotcharcctlgpathintid )
            WITH target_characteristics
        ENTITY root CREATE BY \_supplyprotectiongrouptp
          FIELDS ( supprotcharc01ctlgpathintid supprotcharc01ctlgpathuuid supprotcharc01valueid
                   supprotcharc02ctlgpathintid supprotcharc02ctlgpathuuid supprotcharc02valueid
                   supprotcharc03ctlgpathintid supprotcharc03ctlgpathuuid supprotcharc03valueid
                   supprotcharc04ctlgpathintid supprotcharc04ctlgpathuuid supprotcharc04valueid
                   supprotcharc05ctlgpathintid supprotcharc05ctlgpathuuid supprotcharc05valueid
                   supprotcharc06ctlgpathintid supprotcharc06ctlgpathuuid supprotcharc06valueid
                   supprotcharc07ctlgpathintid supprotcharc07ctlgpathuuid supprotcharc07valueid
                   supprotcharc08ctlgpathintid supprotcharc08ctlgpathuuid supprotcharc08valueid
                   supprotcharc09ctlgpathintid supprotcharc09ctlgpathuuid supprotcharc09valueid
                   supprotcharc10ctlgpathintid supprotcharc10ctlgpathuuid supprotcharc10valueid
                   supprotgrouppriorityvalue )
           WITH target_protectiongroups
        ENTITY protectiongroups CREATE BY \_supplyprotectiontimebuckettp
           FIELDS ( supprotprotectedquantity unitofmeasure startdate enddate supprotperiodstartutcdatetime supprotperiodendutcdatetime )
           WITH target_timebuckets
        ENTITY root CREATE BY \_supprotflexibletimebuckettp
           FIELDS ( startdate enddate numberofdays supprotperiodstartutcdatetime supprotperiodendutcdatetime )
           WITH target_flex_timebuckets
        MAPPED   DATA(created_mapped)
        FAILED   failed
        REPORTED reported.

    mapped-root = CORRESPONDING #( created_mapped-root ).

    LOOP AT mapped-root REFERENCE INTO DATA(root).
      READ TABLE keys REFERENCE INTO DATA(entry) WITH KEY %param-supplyprotectionuuid = root->%cid.
      root->%cid = entry->%cid.
    ENDLOOP.

    NEW cl_atp_sup_usage_copy_001( )->if_atp_sup_usage_copy_001~usage_insert( ).

  ENDMETHOD.

  METHOD copy_characteristics.
    CHECK  source_characteristics IS NOT INITIAL.
    APPEND VALUE #( %cid_ref = source_supobject-supplyprotectionuuid )
                TO target_characteristics ASSIGNING FIELD-SYMBOL(<target_characteristic>).
    <target_characteristic>-%is_draft = if_abap_behv=>mk-on.
    LOOP AT source_characteristics ASSIGNING FIELD-SYMBOL(<source_characteristic>) WHERE supplyprotectionuuid = source_supobject-supplyprotectionuuid.
      APPEND VALUE #( %cid  = <source_characteristic>-supprotcharacteristicuuid
                      %data = CORRESPONDING #( <source_characteristic> EXCEPT supprotcharacteristicuuid ) )
          TO <target_characteristic>-%target ASSIGNING FIELD-SYMBOL(<characteristic_target>).
      <characteristic_target>-%is_draft = if_abap_behv=>mk-on.
    ENDLOOP.
  ENDMETHOD.

  METHOD copy_protectiongroups.
    CHECK source_protectiongroups IS NOT INITIAL.
    APPEND VALUE #( %cid_ref = source_supobject-supplyprotectionuuid ) TO target_protectiongroups ASSIGNING FIELD-SYMBOL(<target_protectiongroup>).
    <target_protectiongroup>-%is_draft = if_abap_behv=>mk-on.
    LOOP AT source_protectiongroups ASSIGNING FIELD-SYMBOL(<source_protectiongroup>) WHERE supplyprotectionuuid = source_supobject-supplyprotectionuuid.
      APPEND VALUE #( %cid  = <source_protectiongroup>-supplyprotectiongroupuuid
                      %data = CORRESPONDING #( <source_protectiongroup> EXCEPT supplyprotectiongroupuuid ) )
          TO <target_protectiongroup>-%target ASSIGNING FIELD-SYMBOL(<group_target>).
      <group_target>-%is_draft = if_abap_behv=>mk-on.
    ENDLOOP.
  ENDMETHOD.

  METHOD copy_timebuckets.
    CHECK source_timebuckets IS NOT INITIAL.
    APPEND VALUE #( %cid_ref = source_protectiongroup-supplyprotectiongroupuuid ) TO target_timebuckets ASSIGNING FIELD-SYMBOL(<target_timebucket>).
    <target_timebucket>-%is_draft = if_abap_behv=>mk-on.
    LOOP AT source_timebuckets ASSIGNING FIELD-SYMBOL(<source_timebucket>) WHERE supplyprotectiongroupuuid = source_protectiongroup-supplyprotectiongroupuuid.
      APPEND VALUE #( %cid  = <source_timebucket>-supprottimebucketuuid
                      %data = CORRESPONDING #( <source_timebucket> EXCEPT supprottimebucketuuid ) )
          TO <target_timebucket>-%target ASSIGNING FIELD-SYMBOL(<timebucket_target>).
      <timebucket_target>-%is_draft = if_abap_behv=>mk-on.
    ENDLOOP.
  ENDMETHOD.

  METHOD copy_supobject.
    CHECK source_supobject-supplyprotectionuuid IS NOT INITIAL.
    APPEND VALUE #( %cid     = source_supobject-supplyprotectionuuid
                    %data    = CORRESPONDING #( source_supobject EXCEPT supplyprotectionuuid ) )
        TO target_supobjects ASSIGNING FIELD-SYMBOL(<target_supobject>).
    <target_supobject>-supplyprotectionname = |{ TEXT-001 } { <target_supobject>-supplyprotectionname }|.
    <target_supobject>-%is_draft            = if_abap_behv=>mk-on.
  ENDMETHOD.

  METHOD copy_flex_timebuckets.
    CHECK source_flex_timebuckets IS NOT INITIAL.
    APPEND VALUE #( %cid_ref = source_supobject-supplyprotectionuuid ) TO target_flex_timebuckets ASSIGNING FIELD-SYMBOL(<target_flex_timebucket>).
    <target_flex_timebucket>-%is_draft = if_abap_behv=>mk-on.
    LOOP AT source_flex_timebuckets ASSIGNING FIELD-SYMBOL(<source_flex_timebuckets>) WHERE supplyprotectionuuid = source_supobject-supplyprotectionuuid.
      APPEND VALUE #( %cid  = <source_flex_timebuckets>-supprotflexibletimebucketuuid
                      %data = CORRESPONDING #( <source_flex_timebuckets> EXCEPT supprotflexibletimebucketuuid ) )
          TO <target_flex_timebucket>-%target ASSIGNING FIELD-SYMBOL(<flex_timebucket_target>).
      <flex_timebucket_target>-%is_draft = if_abap_behv=>mk-on.
    ENDLOOP.
  ENDMETHOD.


  METHOD convertcorecharcvalueids.

    DATA reported_converted_values TYPE if_supplyprotection_rap=>tt_root_action_reported.
    DATA reported_object TYPE if_supplyprotection_rap=>tt_root_action_reported.
    DATA(char_ctlg_utility) = NEW cl_charc_ctlg_utility( ).

    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
      FIELDS ( supprotisplanningcontextslsord supprotisplanningcontextsto
               supprotcorecharc01name corecharc01ctlgpathintid supprotcorecharc01ctlgpathuuid supprotcorecharc01valueid
               supprotcorecharc02name corecharc02ctlgpathintid supprotcorecharc02ctlgpathuuid supprotcorecharc02valueid
              )
      WITH CORRESPONDING #( keys )
    RESULT DATA(objects_result).

    LOOP AT objects_result REFERENCE INTO DATA(object).

      IF object->corecharc01ctlgpathintid IS NOT INITIAL.
        DATA(new_corecharc01valueid) = char_ctlg_utility->if_charc_ctlg_utility~convert_charc_value_in( iv_path_intid = object->corecharc01ctlgpathintid iv_value = object->supprotcorecharc01valueid ).
      ENDIF.

      IF object->corecharc02ctlgpathintid IS NOT INITIAL.
        DATA(new_corecharc02valueid) = char_ctlg_utility->if_charc_ctlg_utility~convert_charc_value_in( iv_path_intid = object->corecharc02ctlgpathintid iv_value = object->supprotcorecharc02valueid ).
      ENDIF.

      CHECK ( new_corecharc01valueid IS NOT INITIAL AND new_corecharc01valueid NE object->supprotcorecharc01valueid )
         OR ( new_corecharc02valueid IS NOT INITIAL AND new_corecharc02valueid NE object->supprotcorecharc02valueid ).

      MODIFY ENTITY IN LOCAL MODE i_supplyprotectiontp
        UPDATE SET FIELDS
          WITH VALUE #( ( %tky                           = object->%tky
                          supprotcorecharc01valueid      = new_corecharc01valueid
                          supprotcorecharc02valueid      = new_corecharc02valueid
                      ) )
        REPORTED DATA(reported_modify).
      INSERT LINES OF reported_modify-root INTO TABLE reported_converted_values-root.
    ENDLOOP.
    reported = CORRESPONDING #( DEEP reported_converted_values ).
  ENDMETHOD.

  METHOD set_group_by_core_charc_values.
    DATA groups TYPE TABLE FOR UPDATE i_supplyprotectiontp\\protectiongroups.

    READ ENTITY IN LOCAL MODE i_supplyprotectiontp
         FIELDS ( supprotcorecharc01ctlgpathuuid supprotcorecharc01valueid supprotcorecharc02ctlgpathuuid supprotcorecharc02valueid )
         WITH CORRESPONDING #( keys )
         RESULT DATA(objects_result).

    LOOP AT objects_result REFERENCE INTO DATA(object).
      READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
           ENTITY root BY \_supplyprotectiongrouptp
           ALL FIELDS WITH VALUE #( ( %tky = VALUE #( %is_draft            = object->%is_draft
                                                      supplyprotectionuuid = object->supplyprotectionuuid ) ) )
           RESULT DATA(group_objects_result).

      LOOP AT group_objects_result REFERENCE INTO DATA(group).
        DATA(characteristic01valueid) = group->supprotcharc01valueid.
        DATA(characteristic02valueid) = group->supprotcharc02valueid.

        IF     object->supprotcorecharc01ctlgpathuuid IS NOT INITIAL
           AND object->supprotcorecharc01valueid      <> group->supprotcharc01valueid.
          characteristic01valueid = object->supprotcorecharc01valueid.
        ENDIF.
        IF     object->supprotcorecharc02ctlgpathuuid IS NOT INITIAL
           AND object->supprotcorecharc02valueid      <> group->supprotcharc02valueid.
          characteristic02valueid = object->supprotcorecharc02valueid.
        ENDIF.

        IF    group->supprotcharc01valueid <> characteristic01valueid
           OR group->supprotcharc02valueid <> characteristic02valueid.

          APPEND VALUE #( %tky                  = group->%tky
                          supprotcharc01valueid = characteristic01valueid
                          supprotcharc02valueid = characteristic02valueid ) TO groups.

        ENDIF.
      ENDLOOP.
    ENDLOOP.

    CHECK groups IS NOT INITIAL.
    MODIFY ENTITY IN LOCAL MODE i_supplyprotectiongrouptp
           UPDATE FIELDS ( supprotcharc01valueid supprotcharc02valueid )
           WITH groups
           FAILED DATA(modify_failed)
           REPORTED DATA(modify_reported).

  ENDMETHOD.

  METHOD increase_file_download_counter.

    NEW cl_atp_sup_usage_001( )->if_atp_sup_usage_001~count_usage( function_name = if_atp_sup_usage_001=>function_name
                                                                   feature_name  = if_atp_sup_usage_001=>feature_updownload
                                                                   feature_type  = if_atp_sup_usage_001=>type_feature_download ).
  ENDMETHOD.

  METHOD increase_file_upload_counter.

    NEW cl_atp_sup_usage_001( )->if_atp_sup_usage_001~count_usage( function_name = if_atp_sup_usage_001=>function_name
                                                                   feature_name  = if_atp_sup_usage_001=>feature_updownload
                                                                   feature_type  = if_atp_sup_usage_001=>type_feature_upload ).
  ENDMETHOD.

  METHOD get_new_timebuckets.
    DATA(atp_sup_period_handler) = NEW cl_atp_sup_timebucket_helper( planning_period_type       = period_type
                                                                     planning_period_start_date = period_startdate
                                                                     planning_period_end_date   = period_enddate ).
    DATA(number_of_periods) = atp_sup_period_handler->get_num_of_timebuckets( ).
    DATA:
      timebucket TYPE if_supplyprotectiontime_rap=>ty_timebucket_create.
    TRY.
        LOOP AT groups REFERENCE INTO DATA(group).
          DO number_of_periods TIMES.
            DATA(period) = atp_sup_period_handler->get_timebucket( sy-index ).
            CONVERT TIME STAMP period-start TIME ZONE 'UTC' INTO DATE DATA(tb_period_start).
            CONVERT TIME STAMP period-end TIME ZONE 'UTC' INTO DATE DATA(tb_period_end).
            INSERT VALUE #( %cid                          = |{ CONV string( group->supplyprotectiongroupuuid ) }_{ sy-index }|
                            %is_draft                     = group->%is_draft
                            supplyprotectiongroupuuid     = group->supplyprotectiongroupuuid
                            startdate                     = tb_period_start
                            supprotperiodstartutcdatetime = period-start
                            enddate                       = tb_period_end
                            unitofmeasure                 = group->unitofmeasure
                            supprotperiodendutcdatetime   = period-end ) INTO TABLE timebucket-%target.
          ENDDO.
          timebucket-%tky = group->%tky.
          INSERT timebucket INTO TABLE new_timebuckets.
          CLEAR timebucket.
        ENDLOOP.
      CATCH cx_uuid_error.
    ENDTRY.
  ENDMETHOD.

  METHOD delete_obsolete_groups_tbs.
    CHECK groups_timebuckets IS NOT INITIAL.
    DATA(obsolete_timebuckets) = groups_timebuckets.
    DELETE obsolete_timebuckets WHERE startdate LE new_planning_period_enddate.
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY timebuckets
          DELETE FROM VALUE #( FOR tb IN obsolete_timebuckets ( %tky = tb-%tky ) )
      FAILED failed
      REPORTED reported.
  ENDMETHOD.

  METHOD delete_obsolete_flex_tbs.
    CHECK flex_timebuckets IS NOT INITIAL.
    DATA(obsolete_flex_timebuckets) = flex_timebuckets.
    DELETE obsolete_flex_timebuckets WHERE startdate LE new_planning_period_enddate.
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY flextimebuckets
          DELETE FROM VALUE #( FOR flex_tb IN obsolete_flex_timebuckets ( %tky = flex_tb-%tky ) )
      FAILED failed
      REPORTED reported.
  ENDMETHOD.

  METHOD update_timebuckets_end.
    CHECK flex_timebuckets IS NOT INITIAL.
    DATA(new_plng_period_end_timestamp) = cl_atp_sup_timebucket_helper=>get_end_timestamp( new_planning_period_enddate ).
    " set new end date of last flexible time bucket
    DATA(last_flex_tb) = flex_timebuckets[ lines( flex_timebuckets ) ].
    DATA(last_flextb_num_of_days) = cl_atp_sup_timebucket_helper=>get_num_of_days( start_date = last_flex_tb-startdate
                                                                                   end_date   = new_planning_period_enddate ).
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY flextimebuckets
        UPDATE FIELDS ( supprotperiodendutcdatetime enddate numberofdays )
          WITH VALUE #( (  %tky                          = last_flex_tb-%tky
                           supprotperiodendutcdatetime   = new_plng_period_end_timestamp
                           enddate                       = new_planning_period_enddate
                           numberofdays                  = last_flextb_num_of_days ) )
      REPORTED reported
      FAILED failed.
    CHECK groups_timebuckets IS NOT INITIAL.
    " set new end date of all last group time buckets
    DATA(last_timebuckets) = groups_timebuckets.
    DELETE last_timebuckets WHERE startdate NE last_flex_tb-startdate.
    MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
      ENTITY timebuckets
        UPDATE FIELDS ( supprotperiodendutcdatetime enddate )
          WITH VALUE #( FOR last_tb IN last_timebuckets ( %tky                        = last_tb-%tky
                                                          supprotperiodendutcdatetime = new_plng_period_end_timestamp
                                                          enddate                     = new_planning_period_enddate ) )
      REPORTED reported
      FAILED failed.
  ENDMETHOD.

  METHOD create_group_timebuckets.
    CHECK groups IS NOT INITIAL AND groups_timebuckets IS NOT INITIAL.
    DATA(num_of_timebuckets) = lines( groups_timebuckets ).
    DATA(last_tb) = groups_timebuckets[ num_of_timebuckets ].
    DATA(last_tb_period_end) = cl_atp_sup_timebucket_helper=>get_lastday_of_period( planning_type    = object-supprotplanningperiodtype
                                                                                    planning_enddate = object-supprotplanningperiodstartdate
                                                                                    period_startdate = last_tb-startdate ).
    IF new_planning_period_enddate GT last_tb_period_end.
      " add new time buckets
      DATA(first_new_tb_startdate) = cl_atp_sup_timebucket_helper=>add_days( date = last_tb_period_end num_of_days = 1 ).
      DATA(new_timebuckets) = get_new_timebuckets( period_type      = object-supprotplanningperiodtype
                                                   period_startdate = first_new_tb_startdate
                                                   period_enddate   = new_planning_period_enddate
                                                   groups           = groups ).
      IF new_timebuckets IS NOT INITIAL.
        DATA(num_of_new_timebuckets) = lines( new_timebuckets[ 1 ]-%target ).
        DATA(num_of_timebuckets_all) = num_of_timebuckets + num_of_new_timebuckets.
        IF num_of_timebuckets_all GT 55.
          MESSAGE ID 'ATP_SUP_LOGIC' TYPE 'E' NUMBER '057' INTO DATA(msg1) WITH num_of_timebuckets_all.
          APPEND VALUE #( %tky = object-%tky ) TO failed-root.
          APPEND VALUE #( %tky = object-%tky
                          %msg = cl_atp_sup_rap_message=>new_message( id = sy-msgid number = sy-msgno v1 = sy-msgv1 severity = if_abap_behv_message=>severity-error ) ) TO reported-root.
        ELSE.
          MODIFY ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
            ENTITY protectiongroups
              CREATE BY \_supplyprotectiontimebuckettp
                FIELDS ( supplyprotectiongroupuuid supprotperiodstartutcdatetime startdate supprotperiodendutcdatetime enddate unitofmeasure )
                WITH new_timebuckets
          FAILED failed
          REPORTED reported.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.

CLASS lcl_saver   DEFINITION INHERITING FROM cl_abap_behavior_saver
FRIENDS tc_rap_eml_unit_test.
  PROTECTED SECTION.
    METHODS save_modified REDEFINITION.

  PRIVATE SECTION.
    CONSTANTS:
      status_active      TYPE sup_object_status VALUE '02'.
    TYPES:
      tt_root_change        TYPE TABLE FOR CHANGE i_supplyprotectiontp\\root,
      tt_root_delete        TYPE TABLE FOR KEY OF i_supplyprotectiontp\\root,
      tt_timebuckets_change TYPE TABLE FOR CHANGE i_supplyprotectiontp\\timebuckets.

    METHODS:
      prepare_root_update
        IMPORTING update_root       TYPE tt_root_change
        CHANGING  supobject_changes TYPE tbl_atp_sup_change
                  sup_objects_new   TYPE tbl_atp_sup_object
                  sup_objects_old   TYPE tbl_atp_sup_object,

      prepare_tb_change_document
        IMPORTING update_tb               TYPE tt_timebuckets_change
        CHANGING  supobject_changes       TYPE tbl_atp_sup_change
                  sup_timebuckets_updated TYPE tbl_atp_sup_timebucket
                  sup_timebuckets_old     TYPE tbl_atp_sup_timebucket
                  sup_objects_changed     TYPE tbl_atp_sup_object.

    METHODS set_atp_netchange_fltr_create
      IMPORTING atp_netchange_fltr_create TYPE REF TO cl_atp_netchange_fltr_create.

    METHODS prepare_root_create
      IMPORTING
        create_root       TYPE tt_root_change
      CHANGING
        supobject_changes TYPE tbl_atp_sup_change
        sup_objects_new   TYPE tbl_atp_sup_object.

    METHODS prepare_root_delete
      IMPORTING
        delete_root       TYPE tt_root_delete
      CHANGING
        supobject_changes TYPE tbl_atp_sup_change
        sup_objects_old   TYPE tbl_atp_sup_object.

    DATA atp_netchange_fltr_create TYPE REF TO cl_atp_netchange_fltr_create.

ENDCLASS.

CLASS lcl_saver IMPLEMENTATION.

  METHOD set_atp_netchange_fltr_create.
    me->atp_netchange_fltr_create = atp_netchange_fltr_create.
  ENDMETHOD.

  METHOD save_modified.

    DATA supobject_changes TYPE tbl_atp_sup_change.
    DATA sup_objects_new   TYPE tbl_atp_sup_object.

    IF create-root IS NOT INITIAL.
      prepare_root_create( EXPORTING create_root       = create-root
                           CHANGING  supobject_changes = supobject_changes
                                     sup_objects_new   = sup_objects_new ).
    ENDIF.

    IF delete-root IS NOT INITIAL.
      DATA(sup_objects_old) = CORRESPONDING tbl_atp_sup_object( delete-root MAPPING FROM ENTITY ).
      prepare_root_delete( EXPORTING delete_root       = delete-root
                           CHANGING  supobject_changes = supobject_changes
                                     sup_objects_old   = sup_objects_old ).
    ENDIF.

    IF update-root IS NOT INITIAL.
      DATA supobject_for_netchangeupdate TYPE tbl_atp_sup_object.
      prepare_root_update( EXPORTING update_root       = update-root
                                    CHANGING  supobject_changes = supobject_changes
                                              sup_objects_new   = sup_objects_new
                                              sup_objects_old   = supobject_for_netchangeupdate ).
      INSERT LINES OF supobject_for_netchangeupdate INTO TABLE sup_objects_old.
    ENDIF.

    IF update-timebuckets IS NOT INITIAL.
      DATA sup_timebuckets_updated TYPE tbl_atp_sup_timebucket.
      DATA sup_timebuckets_old     TYPE tbl_atp_sup_timebucket.

      prepare_tb_change_document( EXPORTING update_tb               = update-timebuckets
                                  CHANGING  supobject_changes       = supobject_changes
                                            sup_timebuckets_updated = sup_timebuckets_updated
                                            sup_timebuckets_old     = sup_timebuckets_old
                                            sup_objects_changed     = supobject_for_netchangeupdate ).
    ENDIF.

    IF supobject_for_netchangeupdate IS NOT INITIAL.
      atp_netchange_fltr_create = COND #( WHEN atp_netchange_fltr_create IS BOUND
                                          THEN atp_netchange_fltr_create
                                          ELSE NEW #( ) ).
      DELETE ADJACENT DUPLICATES FROM supobject_for_netchangeupdate.
      atp_netchange_fltr_create->create_netchanges(
          object        = if_atp_ncf_constants=>gc_object_atp_sup
          document_data = CORRESPONDING cl_atp_sup_object_dba=>material_plants( supobject_for_netchangeupdate ) ).
    ENDIF.

    LOOP AT supobject_changes REFERENCE INTO DATA(sup_object_change)
             WHERE uuid IS NOT INITIAL.
      TRY.
          cl_atpsupobj_chdo=>write(
            EXPORTING
              objectid                = CONV #( sup_object_change->uuid )
              tcode                   = sy-tcode
              utime                   = sy-uzeit
              udate                   = sy-datum
              username                = sy-uname
              object_change_indicator = sup_object_change->change_indicator
              xsup_object             = VALUE #( FOR <upd> IN sup_objects_new WHERE ( uuid = sup_object_change->uuid )
                                                       ( CORRESPONDING #( <upd> ) ) )
              ysup_object             = VALUE #( FOR <old_upd> IN sup_objects_old WHERE ( uuid = sup_object_change->uuid )
                                                       ( CORRESPONDING #( <old_upd> ) ) )
              upd_sup_object          = sup_object_change->change_indicator
              xsup_timebucket         = VALUE #( FOR <tb_upd> IN sup_timebuckets_updated WHERE ( uuid = sup_object_change->uuid )
                                                       ( CORRESPONDING #( <tb_upd> ) ) )
              ysup_timebucket         = VALUE #( FOR <tb_old_upd> IN sup_timebuckets_old WHERE ( uuid = sup_object_change->uuid )
                                                       ( CORRESPONDING #( <tb_old_upd> ) ) )
              upd_sup_timebucket      = sup_object_change->change_indicator
            IMPORTING
              changenumber            = DATA(lognumber_update) ).
        CATCH cx_chdo_write_error.
          " There are DB inconsistencies when the change log cannot be written
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.


  METHOD prepare_root_update.
    DATA old_objects_to_read TYPE tbl_atp_sup_object_uuid.

      DATA(sup_objects_changed) = CORRESPONDING tbl_atp_sup_object( update_root MAPPING FROM ENTITY ).
      LOOP AT sup_objects_changed INTO DATA(sup_object_changed).
        IF update_root[ supplyprotectionuuid = sup_object_changed-uuid ]-%control-supprotlifecyclestatus <> if_abap_behv=>mk-on.
          CONTINUE.
        ENDIF.
        sup_object_changed-client = sy-mandt.
        APPEND sup_object_changed TO sup_objects_new.
        APPEND VALUE #( uuid = sup_object_changed-uuid change_indicator = 'U' ) TO supobject_changes.
        APPEND sup_object_changed-uuid TO old_objects_to_read.
      ENDLOOP.

      IF old_objects_to_read IS NOT INITIAL.
        DATA(atp_sup_object_dba) = NEW cl_atp_sup_object_dba( ).
        DATA(sup_objects_update_old) = atp_sup_object_dba->read_by_uuids( old_objects_to_read ).
        APPEND LINES OF sup_objects_update_old TO sup_objects_old.
    ENDIF.
  ENDMETHOD.

  METHOD prepare_tb_change_document.
    DATA sup_timebucket_updated LIKE LINE OF sup_timebuckets_updated.
    DATA current_object         TYPE sup_object_uuid.
    DATA old_timebuckets_to_read TYPE tbl_atp_sup_timebucket_uuid.

    READ ENTITIES OF i_supplyprotectiontp IN LOCAL MODE
         ENTITY root FIELDS ( supplyprotectionuuid supprotlifecyclestatus material plant )
         WITH VALUE #( FOR timebucket IN update_tb ( %tky = VALUE #( supplyprotectionuuid = timebucket-supplyprotectionuuid ) ) )
         RESULT DATA(root_result).

    LOOP AT update_tb INTO DATA(update_timebucket) WHERE %control-supprotprotectedquantity = if_abap_behv=>mk-on.
      IF current_object <> update_timebucket-supplyprotectionuuid.
        READ TABLE root_result REFERENCE INTO DATA(root_result_line) WITH KEY supplyprotectionuuid = update_timebucket-supplyprotectionuuid.
        current_object = update_timebucket-supplyprotectionuuid.
      ENDIF.
      IF root_result_line->supprotlifecyclestatus <> status_active.
        CONTINUE.
      ENDIF.
      APPEND VALUE #( uuid = update_timebucket-supprottimebucketuuid change_indicator = 'U' ) TO supobject_changes.
      MOVE-CORRESPONDING update_timebucket TO sup_timebucket_updated.
      sup_timebucket_updated-client            = sy-mandt.
      sup_timebucket_updated-uuid              = update_timebucket-%key-supprottimebucketuuid.
      sup_timebucket_updated-protectedquantity = update_timebucket-supprotprotectedquantity.
      sup_timebucket_updated-protectedquantityunit = update_timebucket-unitofmeasure.
      INSERT sup_timebucket_updated INTO TABLE sup_timebuckets_updated.
      APPEND sup_timebucket_updated-uuid TO old_timebuckets_to_read.
      INSERT VALUE #( material = root_result_line->Material
                      plant    = root_result_line->Plant ) INTO TABLE sup_objects_changed.
    ENDLOOP.

    IF old_timebuckets_to_read IS NOT INITIAL.
      DATA(atp_sup_timebuckets_dba) = NEW cl_atp_sup_timebucket_dba( ).
      sup_timebuckets_old = atp_sup_timebuckets_dba->read_by_uuids( old_timebuckets_to_read ).
    ENDIF.
  ENDMETHOD.


  METHOD prepare_root_create.
    sup_objects_new  = CORRESPONDING tbl_atp_sup_object( create_root MAPPING FROM ENTITY ).
    LOOP AT sup_objects_new REFERENCE INTO DATA(sup_object_new).
      sup_object_new->client = sy-mandt.
      APPEND VALUE #( uuid             = sup_object_new->uuid
                      change_indicator = 'I' ) TO supobject_changes.
    ENDLOOP.
  ENDMETHOD.


  METHOD prepare_root_delete.
    LOOP AT sup_objects_old REFERENCE INTO DATA(sup_object_old).
      sup_object_old->client = sy-mandt.
      APPEND VALUE #( uuid             = sup_object_old->uuid
                      change_indicator = 'D' ) TO supobject_changes.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.