class CL_ABAP_BEHV_LOAD definition
  public
  abstract
  final
  create public

  global friends CL_ABAP_BEHV_CTRL
                 CL_ABAP_BEHV_HANDLER_PROJ
                 CL_ABAP_BEHV_JOB
                 CL_ABAP_BEHV_PJOB
                 CL_ABAP_BEHV_SAVER_PROJ .

public section.

  types:
    t_enab_prov_cons type c length 1 .
  types:
    t_enab_cons type c length 1 .
  types:
    t_impltype type c length 1 .
  types:
    t_draftkind type c length 1 .
  types:
    t_mngdkind type c length 1 .
  types:
    t_bdef_with_draft type c length 1 .
  types:
    t_assoc_with_draft type c length 1 .
  types:
    t_savekind type c length 1 .
  types:
    t_strict_mode type c length 1 .
  types:
    t_with_privileged_mode type c length 1 .
  types T_CARD type RBDEF_ACTION-RES_CARD .
  types T_RELATION_KIND type RBDEF_RELAT-KIND .
  types T_ACTION_KIND type RBDEF_ACTION-KIND .
  types T_LATENUMBERING type RBDEF_ENTITY-IS_LATE_NUMBERING .
  types:
    begin of enum t_result,
        ok,
        root_entity_not_found,
        no_load_after_generation,
        syntax_error,
        not_authorized,
        transmission_error,
        root_without_bdef,
      end of enum t_result .
  types:
    t_timestamp type c length 14 .
  types:
    begin of t_head,
        impltype    type t_impltype,
        hasdraft    type t_bdef_with_draft,
        draftkind   type t_draftkind,
        has_save    type t_enab_cons,
        strict_mode type t_strict_mode,
        with_privileged_mode type t_with_privileged_mode,
        extensible  type t_enab_cons,
        ext_with_dets_on_modify type t_enab_cons,
        ext_with_dets_on_save   type t_enab_cons,
        ext_with_vals_on_save   type t_enab_cons,
        with_managed_checks type t_enab_cons,
        mngdkind   type t_mngdkind,
      end of t_head .
  types:
    begin of t_entity_props,
        has_create        type t_enab_prov_cons,
        has_update        type t_enab_prov_cons,
        has_delete        type t_enab_prov_cons,
        is_late_numbering type rbdef_entity-is_late_numbering,
        is_lock_master    type rbdef_entity-is_lock_master,
      end of t_entity_props .
  types:
    begin of t_entity,
        name                      type abp_entity_name,
        alias                     type rbdef_entity-raw_alias,
        properties                type t_entity_props,
        draft_name                type rbdef_entity-draft_name,
        etag_field                type rbdef_entity-etag_field,
        persist_name              type rbdef_entity-persist_name,
        has_instanceauthorization type c length 1, " ' ' none, 'M' Master, 'D' dependent
        savekind                  type t_savekind,
        total_etag_field          type rbdef_entity-total_etag_field,
        extensible                type rbdef_entity-extensible,
        additional_resume_impl    type rbdef_entity-additional_resume_impl,
        query_view                type rbdef_entity-query_view,
        ext_name                  type rbdef_entity-ext_name,
      end of t_entity .
  types:
    tt_entity type sorted table of t_entity with unique key name .
  types:
    begin of t_assoc_props,
        enabled    type t_enab_cons,       " rbdef_assoc-enabled,
        has_create type t_enab_prov_cons,  " rbdef_assoc-has_create,
        with_draft type t_assoc_with_draft,
      end of t_assoc_props .
  types:
    begin of t_assoc,
        source_entity type abp_entity_name,
        name          type rbdef_assoc-name,
        alias         type rbdef_assoc-raw_alias,
        target_entity type abp_entity_name,
        properties    type t_assoc_props,
      end of t_assoc .
  types:
    tt_assoc type sorted table of t_assoc with unique key source_entity name .
  types:
    begin of t_action_props,
        kind             type rbdef_action-kind,
        res_card         type t_card,  " rbdef_action-res_card,
        is_read_only     type rbdef_action-is_read_only,
        is_static        type rbdef_action-is_static,
        enabled          type t_enab_cons,  " rbdef_action-enabled,
        par_is_self      type rbdef_action-par_is_self,
        res_is_self      type rbdef_action-res_is_self,
        par_is_selective type rbdef_action-par_is_selective,
        res_is_selective type rbdef_action-res_is_selective,
        is_lock_none     type rbdef_action-is_lock_none,
        par_is_deep      type rbdef_action-par_is_deep,
        res_is_deep      type rbdef_action-res_is_deep,
        only_for_save    type rbdef_action-only_for_save,
      end of t_action_props .
  types:
    begin of t_action,
        owner_entity   type abp_entity_name,
        name           type abp_action_name,
        raw_name       type rbdef_action-raw_name,
        parameter_type type rbdef_action-par_type_name,
        result_type    type rbdef_action-res_type_name,
        properties     type t_action_props,
        ext_name       type rbdef_action-ext_name,
        res_ext_name   type rbdef_action-res_ext_name,
      end of t_action .
  types:
    tt_action type sorted table of t_action with unique key owner_entity name .
  types:
    begin of t_fk_pair,
        local_name type rbdef_fkey-local_name,
        other_name type rbdef_fkey-other_name,
      end of t_fk_pair .
  types:
    tt_fk_pair type standard table of t_fk_pair with empty key .
  types:
    begin of t_relat,
        source_entity type abp_entity_name,
        kind          type t_relation_kind,  " rbdef_relat-kind,
        target_entity type abp_entity_name,
        assoc_name    type rbdef_relat-assoc_name,
        foreignkeys   type tt_fk_pair,
      end of t_relat .
  types:
    tt_relat type sorted table of t_relat with non-unique key source_entity kind .
  types:
    begin of t_relat_ext.
        include type t_relat.
    types: original_root type abp_root_entity_name,
           source_root   type abp_root_entity_name,
           base_actions  type sorted table of t_fk_pair with unique key local_name,
           base_assocs   type sorted table of t_fk_pair with unique key local_name,
      end of t_relat_ext .
  types:
    begin of t_bd_info,
        root_name     type abp_root_entity_name,
        impltype      type c length 1,
        utc_timestamp type t_timestamp,
      end of t_bd_info .
  types:
    tt_bd_info type sorted table of t_bd_info with unique key root_name .
  types:
    t_feature_elem_kind type c length 1 .
  types:
    t_feature_features type x length 1 .
  types:
    begin of t_feature,
        owner_entity           type abp_entity_name,
        element_kind           type t_feature_elem_kind,
        element                type abp_element_name,
        static_features        type t_feature_features,
        dynamic_features       type t_feature_features,
        authorization_features type t_feature_features,
      end of t_feature .
  types:
    tt_feature type sorted table of t_feature with unique key owner_entity element_kind element .
  types:
*    types:
*      begin of t_feats_and_auth_col,
*        element  type abp_element_name,
*        auth_dep type c length 1,
*      end of t_feats_and_auth_col .
*    types:
*      tt_feats_and_auth_col type standard table of t_feats_and_auth_col with empty key .
    begin of t_feats_and_auth,
        name            type abp_entity_name,
        aliased_name    type abp_entity_name,
        root_entity     type abp_entity_name,
        extensible      type rbdef_entity-extensible,
        begin of instances,
          has_ic   type c length 1 , " ' ' 'X'
          has_auth type c length 1 , " ' ' 'X'
        end of instances,
        begin of dependent_auth,
          update       type c length 1 , " ' ' 'X'
          delete       type c length 1 , " ' ' 'X'
          assocs       type c length 1 , " ' ' 'X'
          actions      type c length 1 , " ' ' 'X'
          fk           type c length 1 , " 'F' 'A'
          has_plain_fk type c length 1 , " ' ' 'X'
          to_root      type rbdef_assoc-name, "only by fk 'F'
        end of dependent_auth,
        draft_idx       type abp_behv_flag , " 0 (none), 1 (column)
        pid_idx         type abp_behv_flag , " 0 (none), 1/2 (column)
        sec_key_name    type string,      " DRAFT|PID|ENTITY
        auth_condition  type i,          "0, 1(draft) 2(pid) 3(both)
*        create          type abp_behv_flag, " 0/1
*        update          type abp_behv_flag, " 0/1   2 (IC)  4 (Auth)
*        delete          type abp_behv_flag, " 0/1   2 (IC)  4 (Auth)
*        assoc           type abp_behv_flag, " 0/1   2 (IC)  4 (Auth)
*        action          type abp_behv_flag, " 0/1   2 (IC)  4 (Auth)
*        actions         type tt_feats_and_auth_col,
*        assocs          type tt_feats_and_auth_col,
        static_features type tt_feature,  " all members with static features
        dep_inst        type ref to data, " constants for all instance dependent members
        dep_glbl        type ref to data, " constants for all global dependent members
        dep_master      type abp_entity_name,
        dep_kind        type c length 1, " space - nothing, M - master, D - Dependent
      end of t_feats_and_auth .
  types:
    t_trigger_kind type c length 1 .
  types:
    begin of t_detval_trigger,
        entity  type abp_entity_name,
        op      type t_trigger_kind,
        element type abp_element_name,
      end of t_detval_trigger .
  types:
    tt_detval_trigger type standard table of t_detval_trigger with empty key .
  types:
    begin of t_detval,
        owner_entity type abp_entity_name,
        name         type c length 30,
        raw_name     type c length 30,
        kind         type c length 1,
        exec_type    type c length 1,
        triggers     type tt_detval_trigger,
      end of t_detval .
  types:
    tt_detval type sorted table of t_detval with unique key owner_entity name .
  types:
    begin of t_detval_dvm_trigger,
        op      type t_trigger_kind,
        element type abp_element_name,
        "      element_idx type i,
      end of t_detval_dvm_trigger .
  types:
    tt_detval_dvm_trigger type standard table of t_detval_dvm_trigger with empty key .
  types:
    t_detval_dvm_flags type x length 1 .
  types:
    begin of t_detval_dvm,
        owner_entity type abp_entity_name,
        name         type c length 30,
        raw_name     type c length 30,
        kind         type c length 1,
        exec_type    type c length 1,
        flags        type t_detval_dvm_flags,
        triggers     type tt_detval_dvm_trigger,
      end of t_detval_dvm .
  types:
    tt_detval_dvm type sorted table of t_detval_dvm with unique key owner_entity name .
  types:
    begin of t_detval_for_action,
        owner_entity type abp_entity_name,
        name         type c length 30,
        kind         type c length 1,
        flags        type x length 1,
      end of t_detval_for_action .
  types:
    tt_detval_for_action type sorted table of t_detval_for_action with non-unique key kind .
  types:
    begin of t_determine_action,
        owner_entity type abp_entity_name,
        name         type abp_action_name,
        detvals      type tt_detval_for_action,
        extensible   type c length 1,
      end of t_determine_action .
  types:
    tt_determine_action type sorted table of t_determine_action with unique key owner_entity name .
  types:
    t_extension_elem_kind type c length 1.
  types:
    begin of t_extension_element,
        owner_entity type abp_entity_name,
        element_kind type t_extension_elem_kind,
        element      type abp_element_name,
        extension    type c length 30,
      end of t_extension_element .
  types:
    tt_extension_element type sorted table of t_extension_element with unique key owner_entity element_kind element .

  constants C_IMPLTYPE_UNMANAGED type T_IMPLTYPE value 'U' ##NO_TEXT.
  constants C_IMPLTYPE_MANAGED type T_IMPLTYPE value 'M' ##NO_TEXT.
  constants C_IMPLTYPE_ABSTRACT type T_IMPLTYPE value 'A' ##NO_TEXT.
  constants C_IMPLTYPE_PROJECTION type T_IMPLTYPE value 'P' ##NO_TEXT.
  constants C_IMPLTYPE_INTERFACE type T_IMPLTYPE value 'I' ##NO_TEXT.
  constants C_DRAFTKIND_STD type T_DRAFTKIND value 'C' ##NO_TEXT.
  constants C_DRAFTKIND_BOPF type T_DRAFTKIND value 'B' ##NO_TEXT.
  constants C_MNGDKIND_STD type T_MNGDKIND value 'C' ##NO_TEXT.
  constants C_MNGDKIND_BOPF type T_MNGDKIND value 'B' ##NO_TEXT.
  constants C_SAVEKIND_UNMNG type T_SAVEKIND value 'U' ##NO_TEXT.
  constants C_SAVEKIND_ADDTL type T_SAVEKIND value 'A' ##NO_TEXT.
  constants C_STRICT type T_STRICT_MODE value 'X' ##NO_TEXT.
  constants C_NONSTRICT type T_STRICT_MODE value ' ' ##NO_TEXT.
  constants C_DISABLED_BOTH type T_ENAB_PROV_CONS value ' ' ##NO_TEXT.
  constants C_DISABLED_CONS type T_ENAB_PROV_CONS value 'D' ##NO_TEXT.
  constants C_ENABLED_BOTH type T_ENAB_PROV_CONS value 'E' ##NO_TEXT.
  constants C_DISABLED type T_ENAB_CONS value ' ' ##NO_TEXT.
  constants C_ENABLED type T_ENAB_CONS value 'X' ##NO_TEXT.
  constants C_BWD_DISABLED type T_BDEF_WITH_DRAFT value ' ' ##NO_TEXT.
"   constants c_bwd_dis_cons  type t_bdef_with_draft value 'D'.  " currently not supported
  constants C_BWD_ENABLED type T_BDEF_WITH_DRAFT value 'E' ##NO_TEXT.
  constants C_BWD_DEPENDENT type T_BDEF_WITH_DRAFT value 'P' ##NO_TEXT.
  constants C_AWD_DISABLED type T_ASSOC_WITH_DRAFT value ' ' ##NO_TEXT.
  constants C_AWD_ENABLED type T_ASSOC_WITH_DRAFT value 'X' ##NO_TEXT.
  constants C_AWD_DEPENDENT type T_ASSOC_WITH_DRAFT value 'P' ##NO_TEXT.
  constants C_CARD_0 type T_CARD value '0   ' ##NO_TEXT.
  constants C_CARD_0_1 type T_CARD value '0..1' ##NO_TEXT.
  constants C_CARD_1 type T_CARD value '1   ' ##NO_TEXT.
  constants C_CARD_0_N type T_CARD value '0..*' ##NO_TEXT.
  constants C_CARD_1_N type T_CARD value '1..*' ##NO_TEXT.
  constants C_RELATION_LOCK type T_RELATION_KIND value 'L' ##NO_TEXT.
  constants C_RELATION_LOCK_ASSOC type T_RELATION_KIND value 'l' ##NO_TEXT.
  constants C_RELATION_ETAG type T_RELATION_KIND value 'E' ##NO_TEXT.
  constants C_RELATION_ETAG_ASSOC type T_RELATION_KIND value 'e' ##NO_TEXT.
  constants C_RELATION_AUTHORIZATION type T_RELATION_KIND value 'A' ##NO_TEXT.
  constants C_RELATION_AUTHORIZATION_ASSOC type T_RELATION_KIND value 'a' ##NO_TEXT.
  constants C_RELATION_BASE type T_RELATION_KIND value 'B' ##NO_TEXT.
  constants C_RELATION__IS_ASSOC_BASED type STRING value 'ael' ##NO_TEXT.
  constants C_ACTION_FACTORY type T_ACTION_KIND value 'F' ##NO_TEXT.
  constants C_ACTION_DETERMINE type T_ACTION_KIND value 'D' ##NO_TEXT.
  constants C_ACTION_ACTIVATE type T_ACTION_KIND value 'A' ##NO_TEXT.
  constants C_ACTION_EDIT type T_ACTION_KIND value 'E' ##NO_TEXT.
  constants C_ACTION_DISCARD type T_ACTION_KIND value 'I' ##NO_TEXT.
  constants C_ACTION_RESUME type T_ACTION_KIND value 'R' ##NO_TEXT.
  constants C_ACTION_SAVE type T_ACTION_KIND value 'S' ##NO_TEXT.
  constants:
    c_actions_ddraft type c length 4 value 'AEIR' ##NO_TEXT.
  constants C_LATENUMBERING_SELF type T_LATENUMBERING value 'S' ##NO_TEXT.
  constants C_LATENUMBERING_INHERIT type T_LATENUMBERING value 'I' ##NO_TEXT.
  constants C_LATENUMBERING_INPLACE_SELF type T_LATENUMBERING value 's' ##NO_TEXT.
  constants C_LATENUMBERING_INPLACE_INH type T_LATENUMBERING value 'i' ##NO_TEXT.
  constants C_LATENUMBERING_EARLY type T_LATENUMBERING value 'E' ##NO_TEXT.
  constants C_FEATURE_ELEM_CREATE type T_FEATURE_ELEM_KIND value 'C' ##NO_TEXT.
  constants C_FEATURE_ELEM_UPDATE type T_FEATURE_ELEM_KIND value 'U' ##NO_TEXT.
  constants C_FEATURE_ELEM_DELETE type T_FEATURE_ELEM_KIND value 'D' ##NO_TEXT.
  constants C_FEATURE_ELEM_ACTION type T_FEATURE_ELEM_KIND value 'A' ##NO_TEXT.
  constants C_FEATURE_ELEM_ASSOC type T_FEATURE_ELEM_KIND value 'a' ##NO_TEXT.
  constants C_FEATURE_ELEM_FIELD type T_FEATURE_ELEM_KIND value 'F' ##NO_TEXT.
  constants C_FEATURE_SF_MANDATORY type T_FEATURE_FEATURES value '01' ##NO_TEXT.
  constants C_FEATURE_SF_READ_ONLY type T_FEATURE_FEATURES value '02' ##NO_TEXT.
  constants C_FEATURE_SF_READ_ONLY_UPDATE type T_FEATURE_FEATURES value '20' ##NO_TEXT.
  constants C_FEATURE_SF_NUMBERING_MNGD type T_FEATURE_FEATURES value '04' ##NO_TEXT.
  constants C_FEATURE_SF_VIRTUAL_MODIFY type T_FEATURE_FEATURES value '08' ##NO_TEXT.
  constants C_FEATURE_SF_MANDATORY_CREATE type T_FEATURE_FEATURES value '10' ##NO_TEXT.
  constants C_FEATURE_SF_SUPPRESS type T_FEATURE_FEATURES value '40' ##NO_TEXT.
  constants C_FEATURE_DF_INSTANCE type T_FEATURE_FEATURES value '01' ##NO_TEXT.
  constants C_FEATURE_DF_GLOBAL type T_FEATURE_FEATURES value '02' ##NO_TEXT.
  constants C_FEATURE_AUTHORITY_INSTANCE type T_FEATURE_FEATURES value '01' ##NO_TEXT.
  constants C_FEATURE_AUTHORITY_GLOBAL type T_FEATURE_FEATURES value '02' ##NO_TEXT.
  constants C_FEATURE_AUTHORITY_LIKE_UPDT type T_FEATURE_FEATURES value '08' ##NO_TEXT.
  constants C_TRIGGER_CREATE type T_TRIGGER_KIND value 'C' ##NO_TEXT.
  constants C_TRIGGER_UPDATE type T_TRIGGER_KIND value 'U' ##NO_TEXT.
  constants C_TRIGGER_DELETE type T_TRIGGER_KIND value 'D' ##NO_TEXT.
  constants C_TRIGGER_FIELD type T_TRIGGER_KIND value 'F' ##NO_TEXT.
  constants C_EXTENSION_ELEM_ENTITY type T_EXTENSION_ELEM_KIND value 'E' ##NO_TEXT.
  constants C_EXTENSION_ELEM_ACTION type T_EXTENSION_ELEM_KIND value 'A' ##NO_TEXT.
  constants C_EXTENSION_ELEM_ASSOC type T_EXTENSION_ELEM_KIND value 'a' ##NO_TEXT.
  constants C_EXTENSION_ELEM_DETVAL type T_EXTENSION_ELEM_KIND value 'd' ##NO_TEXT.
  constants C_EXTENSION_ELEM_FIELD type T_EXTENSION_ELEM_KIND value 'F' ##NO_TEXT.

  class-methods GET_LOAD
    importing
      !ENTITY type ABP_ENTITY_NAME
      !ALL type RFCCHAR1 optional
      !RFC_DESTINATION type RFCDEST optional
      !CHECK_SYNTAX type SYCHAR01 optional
      !IGNORE_DYNAMIC_SWITCHSTATES type SYCHAR01 optional
    exporting
      !HEAD type T_HEAD
      !ENTITIES type TT_ENTITY
      !ASSOCIATIONS type TT_ASSOC
      !ACTIONS type TT_ACTION
      !RELATIONS type TT_RELAT
      !UTC_TIMESTAMP type T_TIMESTAMP
      !FEATURES type TT_FEATURE
      !DETVALS type TT_DETVAL
      !DETVALS_DVM type TT_DETVAL_DVM
      !DETERMINE_ACTIONS type TT_DETERMINE_ACTION
      !EXTENSION_ELEMENTS type TT_EXTENSION_ELEMENT
    changing
      !ROOT_ENTITY type ABP_ROOT_ENTITY_NAME optional
    returning
      value(RESULT) type T_RESULT .
  class-methods GET_RELATION
    importing
      !SOURCE_ENTITY type ABP_ENTITY_NAME
      !KIND type T_RELATION_KIND
      value(ORIGINAL_ROOT) type ABP_ROOT_ENTITY_NAME optional
    returning
      value(REF) type ref to T_RELAT_EXT .
  class-methods GET_BD_INFO_FOR_ENTITIES
    importing
      !ENTITIES type ABP_ENTITY_NAME_TAB
      !CHECK_SYNTAX type SYCHAR01 optional
    exporting
      !BD_INFO type TT_BD_INFO
      !ENTITY_ROOTS type ABP_ENTITY_ROOT_TAB .
  class-methods CHECK_EXISTENCE
    importing
      !ENTITY type ABP_ENTITY_NAME optional
    changing
      !ROOT_ENTITY type ABP_ROOT_ENTITY_NAME optional
    returning
      value(RESULT) type T_RESULT .
protected section.

  class-data:
  " cache for projection/base relations (entities, actions)
    g_relations type sorted table of t_relat_ext
     with     unique        key                source_entity kind original_root
     with non-unique sorted key trg components target_entity kind original_root .
  constants C_FEATS_AUTH_EXIST type ABP_BEHV_FLAG value 1 ##NO_TEXT.
  constants C_FEATS_AUTH_IC_FEAT type ABP_BEHV_FLAG value 2 ##NO_TEXT.
  constants C_FEATS_AUTH_IC_AUTH type ABP_BEHV_FLAG value 4 ##NO_TEXT.
  constants C_FEATS_AUTH_IC_AUTH_DERIVED type ABP_BEHV_FLAG value 8 ##NO_TEXT.

  class-methods GET_INFO_FROM_CACHE
    importing
      !ENTITY type ABP_ENTITY_NAME
    returning
      value(REF_INFOS) type ref to T_FEATS_AND_AUTH .
private section.

  types:
    begin of t_loadstate,
      rc        type i,
      timestamp type t_timestamp,
      utctstamp type t_timestamp,
    end of t_loadstate .
  types:
    tt_info_cache type sorted table of T_FEATS_AND_AUTH with unique key name .

  class-data G_INFO_CACHE type TT_info_cache.

  class-methods GET_LOAD_KRN
    importing
      !REQUEST type I
      !ROOT_ENTITY type ABP_ENTITY_NAME
      !ENTITY type ABP_ENTITY_NAME optional
    exporting
      !HEAD type T_HEAD
      !ENTITIES type TT_ENTITY
      !ASSOCIATIONS type TT_ASSOC
      !ACTIONS type TT_ACTION
      !RELATIONS type TT_RELAT
      !FEATURES type TT_FEATURE
      !DETVALS type TT_DETVAL
      !DETVALS_DVM type TT_DETVAL_DVM
      !DETERMINE_ACTIONS type TT_DETERMINE_ACTION
      !EXTENSION_ELEMENTS type TT_EXTENSION_ELEMENT
    returning
      value(LOADSTATE) type T_LOADSTATE .
  class-methods COLLECT_LOAD_INFO
    importing
      !HEAD type T_HEAD
      !ENTITY type T_ENTITY
      !FEATURES type TT_FEATURE
      !ROOT_ENTITY type ABP_ENTITY_NAME
      !RELATIONS type TT_RELAT
      !ASSOCIATIONS type TT_ASSOC .
  class-methods CHECK_SYNTAX
    importing
      !ROOT_ENTITY type ABP_ROOT_ENTITY_NAME
    returning
      value(RESULT) type T_RESULT .
ENDCLASS.



CLASS CL_ABAP_BEHV_LOAD IMPLEMENTATION.


method CHECK_EXISTENCE.

if root_entity is initial.
  assert entity is not initial.
  get_root entity root_entity.
  if root_entity is initial.
    result = root_entity_not_found.
    return.
  endif.
endif.

get_bd_inc root_entity bd_inc_name.

if bd_inc_name is initial.
  result = root_without_bdef.
  return.
endif.

result = OK.

endmethod.


method CHECK_SYNTAX.

data: sych_message type c length 255,
      sych_word type c length 30,
      sych_line type i.
data wset type sabap_inact_obj_tab.

" includes existence check to protect against background dump due to non-existing BDEF:
get_bd_inc root_entity bd_inc_name.

if bd_inc_name is initial.
  result = root_entity_not_found.  " (root_without_bdef)
  return.
endif.

" Working set must be temporarily emptied so that SC sees the same objects as generation
call 'AB_WORKINGSET' id 'FCODE' field 'READ'  id 'OBJECTS' field wset.  "#EC CI_CCALL
call 'AB_WORKINGSET' id 'FCODE' field 'DELETE'.  "#EC CI_CCALL

syntax-check for program bd_inc_name
 message sych_message line sych_line word sych_word.

result = cond #( when sy-subrc <> 0 then syntax_error else OK ).

if wset is not initial.
  call 'AB_WORKINGSET' id 'FCODE' field 'INSERT'  id 'OBJECTS' field wset.  "#EC CI_CCALL  " restore
endif.

endmethod.


method collect_load_info.

  data(info) = value t_feats_and_auth( name = entity-name aliased_name = entity-alias root_entity = root_entity ).
  if info-aliased_name is initial.
    info-aliased_name = info-name.
  else.
    translate info-aliased_name to upper case.
  endif.

  if head-hasdraft is not initial.
    info-draft_idx = 1.
    info-sec_key_name = 'DRAFT'.
    if entity-properties-is_late_numbering na ' E'.
      info-pid_idx = 2.
      info-auth_condition = 3.
    else.
      info-auth_condition = 1.
    endif.
  elseif entity-properties-is_late_numbering na ' E'.
    info-pid_idx = 1.
    info-sec_key_name = 'PID'.
    info-auth_condition = 2.
  else.
    info-sec_key_name = 'ENTITY'.
  endif.


  loop at features assigning field-symbol(<g>)
      where owner_entity = entity-name "and element_kind ne 'F'
      group by <g>-element_kind.
    "at new element_kind.
    loop at group <g> assigning field-symbol(<f>).

      if <f>-static_features is not initial and <f>-static_features z c_feature_sf_suppress.
        insert <f> into table info-static_features.
      endif.

      data bit type x.
      data bit_lu type x.
      bit = <f>-dynamic_features bit-and cl_abap_behv_load=>c_feature_df_instance.
      if bit is not initial.
        info-instances-has_ic = abap_true.
      endif.

      bit = <f>-authorization_features bit-and cl_abap_behv_load=>c_feature_authority_instance.
      bit_lu = <f>-authorization_features bit-and cl_abap_behv_load=>c_feature_authority_like_updt.
      if bit is not initial.
        case <f>-element_kind.
          when cl_abap_behv_load=>c_feature_elem_update.
            if entity-has_instanceauthorization ne 'D'.
              info-instances-has_auth = abap_true.
            else.
              info-dependent_auth-update = abap_true.
            endif.
          when cl_abap_behv_load=>c_feature_elem_delete.
            if entity-has_instanceauthorization ne 'D' and bit_lu is initial.
              info-instances-has_auth = abap_true.
            else.
              info-dependent_auth-delete = 'X'.
            endif.
          when cl_abap_behv_load=>c_feature_elem_action.
            if bit_lu is initial.
              info-instances-has_auth = abap_true.
            else.
              info-dependent_auth-actions = abap_true.
            endif.
          when cl_abap_behv_load=>c_feature_elem_assoc.
            if bit_lu is initial.
              info-instances-has_auth = abap_true.
            else.
              info-dependent_auth-assocs = abap_true.
            endif.
        endcase.
      endif.

    endloop.
  endloop.

  if info-dependent_auth is not initial and entity-has_instanceauthorization eq 'D'.
    " Check how to find master
    assert lines( relations ) ne 0.
    read table relations assigning field-symbol(<rela>) with key source_entity = entity-name kind = 'A' .
    if sy-subrc = 0.
      "with relation table
      assert <rela>-foreignkeys is not initial.
      info-dependent_auth-fk = 'F'.
      info-dependent_auth-has_plain_fk = 'X'.
      loop at <rela>-foreignkeys assigning field-symbol(<rel>).
        if <rel>-local_name ne <rel>-other_name.
          clear info-dependent_auth-has_plain_fk.
          exit.
        endif.
      endloop.
      loop at associations assigning field-symbol(<a>)
                where source_entity = entity-name and
                      target_entity = root_entity .
        if <a>-properties-enabled ne ' '.
          info-dependent_auth-to_root = <a>-name.
          exit.
        endif.
        info-dependent_auth-to_root = <a>-name.
      endloop.
      if info-dependent_auth-to_root is initial.
        info-dependent_auth-fk = 'f'.
      endif.
    else.
      read table relations assigning <rela> with key source_entity = entity-name kind = 'a' .
      assert sy-subrc eq 0. " relation to master should exist...
      assert <rela>-assoc_name is not initial.
      info-dependent_auth-fk = 'A'.
    endif.

  endif.

  " prepare dependent members wa
  " check bd loaded
  data(load) = |{ info-root_entity width = 30 pad = '=' }BD| ##NUMBER_OK.
  perform nottobefound in program (load) if found.
  " get constants %DEPAUTH-entity-subcomp
  data(depauths) = |({ info-root_entity width = 30 pad = '=' }BD)%DEPAUTH-{ info-name }| ##NUMBER_OK.
  assign (depauths) to field-symbol(<depauths>).
  if sy-subrc is initial.
    assign component 'MASTER' of structure <depauths> to field-symbol(<deps_master>).
    assert sy-subrc is initial.
    info-dep_master = <deps_master>.
    if <deps_master> = info-name.
      info-dep_kind = 'M'. " master with update dependent members
      if info-dependent_auth is not initial. " "authorization:update" for own "update":
        info-instances-has_auth = abap_true. " => this is relevant for instance authorization
      endif.
    else.
      info-dep_kind = 'D'. " dependent with update dependent members
    endif.
    assign component 'GLOBAL' of structure <depauths> to field-symbol(<deps_glbl>).
    if sy-subrc is initial.
      info-dep_glbl = ref #( <deps_glbl> ).
    endif.
    assign component 'INSTANCES' of structure <depauths> to field-symbol(<deps_inst>).
    if sy-subrc is initial.
      info-dep_inst = ref #( <deps_inst> ).
    endif.
  endif.

  " collect general infos
  info-extensible = entity-extensible.

  " insert in chache
  insert info into table g_info_cache.

endmethod.


method GET_BD_INFO_FOR_ENTITIES.

data roots type cl_abap_behvdescr=>tt_entity_uniq.
data result type t_result.

clear: bd_info, entity_roots.

if entity_roots is supplied.
  cl_abap_behvdescr=>get_roots_of_entities( exporting entities     = entities
                                            importing entity_roots = entity_roots
                                            changing  roots        = roots ).
else.
  cl_abap_behvdescr=>get_roots_of_entities( exporting entities = entities
                                            changing  roots    = roots ).
endif.

if roots is initial.
  return.  " ?
endif.

loop at roots assigning field-symbol(<root>).

  data(inc_name) = conv program( <root> ).
  overlay inc_name with '==============================BD'.

  if check_syntax is not initial.
    if check_syntax = 'C'.
      result = check_syntax( root_entity = <root> ).
    else.
      check_load inc_name result.
    endif.
    if result <> ok.
      continue.
    endif.
  endif.

  insert value #( root_name = <root> ) into table bd_info assigning field-symbol(<info>).

  do 2 times.
    get_load_krn(
      exporting request      = 0
                root_entity  = <root>
      importing head         = data(head)
      receiving loadstate    = data(loadstate) ).
    if loadstate-rc = 0.
     "<info>-has_bdef = 'X'.
      <info>-impltype = head-impltype.
      <info>-utc_timestamp = loadstate-utctstamp.
      exit.
    endif.
    if sy-index > 1.
      exit.
    endif.
    perform nottobefound in program (inc_name) if found.  " load BD into PXA
    " If BDEF exists: SY-SUBRC = 0, load in PXA
    " If BDEF doesn't exist: SY_SUBRC = 0, no load in PXA
    " If BDEF contains error: DUMP (SYNTAX_ERROR)
  enddo.

endloop.

endmethod.


method GET_INFO_FROM_CACHE.

  ref_infos = ref #( g_info_cache[ name = entity ] optional ).

  if ref_infos is bound.
    return.
  endif.

  data root_entity type abp_entity_name.
  data head type t_head.
  data entities type tt_entity.
  data features type tt_feature.
  data relations type tt_relat.
  data associations type tt_assoc.
  data(lv_result) = cl_abap_behv_load=>get_load(
    exporting entity = entity
              all = 'e'
    importing head = head
              entities = entities
              features = features
              relations = relations
              associations = associations
    changing  root_entity = root_entity ).

  "check if could retrieve a load for entity
  assert fields entity root_entity
    condition lv_result = cl_abap_behv_load=>ok
          and entities is not initial.

  loop at entities assigning field-symbol(<e>).
    check not line_exists( g_info_cache[ name = <e>-name ] ).
    collect_load_info( entity = <e>
                       head = head
                       features = features
                       relations = relations
                       root_entity = root_entity
                       associations = associations ).
  endloop.

  ref_infos = ref #( g_info_cache[ name = entity ] optional ).

  assert fields entity root_entity condition ref_infos is bound.

endmethod.


method get_load.

  clear: head, utc_timestamp, entities, associations, actions, relations, features,
         detvals, detvals_dvm, determine_actions.

* RFC_DESTINATION supplied: read data from remote system
  if rfc_destination is not initial.
    data:
      xml        type xstring,
      compressed type xstring.

    call transformation id source entity = entity all = all root_entity = root_entity result xml xml.
    export xml = xml to data buffer compressed.
    call function 'SABP_BEHV_RFC_EXTRACTOR' destination rfc_destination
      exporting
        function       = 'BDEF_LOAD'
        input_data     = compressed
        ignore_dynamic_switchstates = ignore_dynamic_switchstates
      importing
        output_data    = compressed
      exceptions
        not_authorized      = 1
        unknown_function    = 2
        not_found           = 3
        syntax_error        = 4
        serialization_error = 5
        others              = 6.
    case sy-subrc.
      when 0.
        try.
            import xml = xml from data buffer compressed.
            clear compressed.
            call transformation id source xml xml
              result
                head = head
                entities = entities
                associations = associations
                actions = actions
                relations = relations
                utc_timestamp = utc_timestamp
                features = features
                detvals = detvals
                detvals_dvm = detvals_dvm
                determine_actions = determine_actions
                extension_elements = extension_elements
                root_entity = root_entity.
             " SABP_BEHV_RFC_EXTRACTOR needs to be adapted when something is added here!
          catch cx_transformation_error cx_sy_import_format_error.
            result = transmission_error.
        endtry.
      when 1.
        result = not_authorized.
      when 3.
        result = root_entity_not_found.
      when 4.
        result = no_load_after_generation.
      when others.
        result = transmission_error.
    endcase.
    return.
  endif.

* ---------------------------------------------------------------------
  if root_entity is initial.
    get_root entity root_entity.
    if root_entity is initial.
      result = root_entity_not_found.
      return.
    endif.
  endif.

  data(inc_name) = conv program( root_entity ).
  overlay inc_name with '==============================BD'.

  if check_syntax is not initial.
    if check_syntax = 'C'.
      result = check_syntax( root_entity = root_entity ).
    else.
      check_load inc_name result.
    endif.
    if result <> ok.
      return.
    endif.
  endif.

  " 'X':  All entities,  basic information (SADL)
  " ' ':  Single entity, basic information
  " 'E':  All entities,  extended information (CL_ABAP_BEHV_CTRL)
  " 'e':  Single entity, extended information
  data(entity1) = cond #( when all na 'XE' then entity ).

  data(request) = cond #( when all                         na 'XE'     then    1 )
                + cond #( when entities                    is supplied then    2 )
                + cond #( when associations                is supplied then    4 )
                + cond #( when actions                     is supplied then    8 )
                + cond #( when relations                   is supplied then   16 )
                + cond #( when features                    is supplied then   32 )
                + cond #( when detvals                     is supplied then   64 )
                + cond #( when all                         ca 'Ee'     then  128 )
                + cond #( when detvals_dvm                 is supplied then  256 )
                + cond #( when determine_actions           is supplied then  512 )
                + cond #( when ignore_dynamic_switchstates eq 'X'      then 1024 )
                + cond #( when extension_elements          is supplied then 2048 )
  .

  do 2 times.

    get_load_krn(
      exporting request            = request
                root_entity        = root_entity
                entity             = entity1
      importing head               = head
                entities           = entities
                associations       = associations
                actions            = actions
                relations          = relations
                features           = features
                detvals            = detvals
                detvals_dvm        = detvals_dvm
                determine_actions  = determine_actions
                extension_elements = extension_elements
      receiving loadstate    = data(loadstate) ).

    if loadstate-rc = 0.
      result = ok.
      utc_timestamp = loadstate-utctstamp.
      return.
    elseif sy-index = 2.
      result = no_load_after_generation.
      return.
    endif.

    perform nottobefound in program (inc_name) if found.  " load BD into PXA
    " If BDEF exists: SY-SUBRC = 0, load in PXA
    " If BDEF doesn't exist: SY_SUBRC = 0, no load in PXA
    " If BDEF contains error: DUMP (SYNTAX_ERROR)

  enddo.

endmethod.


method GET_LOAD_KRN by kernel module ab_km_behv_get_load_785 ab_km_behv_get_load fail.
endmethod.


method GET_RELATION.

data trg_entities   type cl_abap_behvdescr=>tt_entity_uniq.
data trg_roots      type cl_abap_behvdescr=>tt_entity_uniq.
data done_roots     type cl_abap_behvdescr=>tt_entity_uniq.
data grel           type t_relat_ext.
data n_actions      type i.
field-symbols <rel> type t_relat.
field-symbols <fk>  type t_fk_pair.
field-symbols <asc> type cl_abap_behv_load=>t_assoc.

define return_if_loaded.
  " Note: ORIGINAL_ROOT must be part of the (primary) cache key, because later access
  " by GET_RELA_FOR_TRG relies on all TARGET relations w.r.t. ORIGINAL_ROOT as source
  " to be loaded (and the set of targets can differ between different sources)!
  loop at g_relations using key primary_key reference into ref where
   source_entity = &1 and kind = kind and original_root = &2.
    return.
  endloop.
end-of-definition.

define add_relations.
  loop at relations_tmp assigning <rel>.
    grel = corresponding #( <rel> ).
    " Role of ORIGINAL_ROOT: see GET_RELA_FOR_TRG, GET_RELA_FOR_SRC in CL_ABAP_BEHV_HANDLER_PROJ
    grel-original_root = original_root.
    " Role of SOURCE_ROOT: see PREPARE in CL_ABAP_BEHV_HANDLER_PROJ
    grel-source_root = root_entity.
    if grel-kind = c_relation_base.
      " ASSOC_NAME contains: <numberOfActions> <numberOfAssocs>
      n_actions = cond #( when <rel>-assoc_name is initial then lines( grel-foreignkeys )
                          else substring_before( val = <rel>-assoc_name sub = ` ` ) ).
      loop at grel-foreignkeys assigning <fk>.
        if sy-tabix <= n_actions.
          insert <fk> into table grel-base_actions.
        else.
          insert <fk> into table grel-base_assocs.
        endif.
      endloop.
    endif.
    insert grel into table g_relations.
  endloop.
end-of-definition.

define get_targets.
  loop at associations assigning <asc>.
    insert <asc>-TARGET_ENTITY into table trg_entities.
  endloop.
  clear associations.
end-of-definition.


data(root_entity) = original_root.

return_if_loaded  source_entity root_entity.

get_load( exporting entity = source_entity
                    all = 'E'  " extended, all entities in tree
          importing relations    = data(relations_tmp)
                    associations = data(associations)
          changing  root_entity  = root_entity ).

if original_root is initial.
  original_root = root_entity.
else.
  assert original_root = root_entity.
endif.

add_relations.
get_targets.
insert original_root into table done_roots.

while trg_entities is not initial.

  cl_abap_behvdescr=>get_roots_of_entities( exporting entities = trg_entities
                                            changing  roots    = trg_roots ).
  clear trg_entities.
  data(todo_roots) = filter #( trg_roots except in done_roots where table_line = table_line ).

  loop at todo_roots assigning field-symbol(<trg_root>).

    root_entity = <trg_root>.
    clear relations_tmp.

    get_load( exporting entity = root_entity
                        all = 'E'  " extended, all entities in tree
              importing relations    = relations_tmp
                        associations = associations
              changing  root_entity  = root_entity
            ).

    add_relations.
    get_targets.
    insert root_entity into table done_roots.

  endloop.

endwhile.

return_if_loaded  source_entity original_root.

endmethod.
ENDCLASS.