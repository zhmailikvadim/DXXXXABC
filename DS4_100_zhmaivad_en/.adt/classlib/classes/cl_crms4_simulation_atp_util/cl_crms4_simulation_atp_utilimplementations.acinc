*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations
CLASS lcl_oneorder_utility IMPLEMENTATION.

  METHOD get_instance.

    IF mo_simulation_utility IS   NOT BOUND.
      mo_simulation_utility = NEW lcl_oneorder_utility(  ).
    ENDIF.

    ro_oneorder_utility = mo_simulation_utility.

  ENDMETHOD.

  METHOD lif_simulation_utility~one_order_read.
    INCLUDE  crm_object_names_con.
    DATA: lv_log_handle        TYPE balloghndl,
          lt_requested_objects TYPE crmt_object_name_tab.
    CLEAR:  lt_requested_objects.
    INSERT  gc_object_name-partner INTO TABLE lt_requested_objects.
    INSERT gc_object_name-orgman INTO TABLE lt_requested_objects.
    INSERT gc_object_name-appointment INTO TABLE lt_requested_objects.
    INSERT gc_object_name-orderadm_i INTO TABLE lt_requested_objects.

    CALL FUNCTION 'CRM_ORDER_READ_OW'
      EXPORTING
        it_header_guid       = it_header_guid
        it_requested_objects = lt_requested_objects
*       it_item_guid         = it_item_guid
      IMPORTING
        et_orderadm_i        = et_orderadm_i
        et_partner           = et_partner
        et_orgman            = et_orgman
        et_appointment       = et_appointment
      CHANGING
        cv_log_handle        = lv_log_handle
      EXCEPTIONS
        document_not_found   = 1
        error_occurred       = 2
        document_locked      = 3
        no_change_authority  = 4
        no_display_authority = 5
        no_change_allowed    = 6
        OTHERS               = 7.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

  ENDMETHOD.

  METHOD lif_simulation_utility~get_sales_atp_check.
    CALL FUNCTION 'CRM_ORDER_SALES_ITEM_SELECT_CB'
      EXPORTING
        iv_item_type    = iv_item_type
      IMPORTING
        es_sales_item   = es_sales_item
      EXCEPTIONS
        entry_not_found = 1
        OTHERS          = 2.

    IF sy-subrc <> 0.
      RAISE entry_not_found.
    ENDIF.
  ENDMETHOD.

  METHOD lif_simulation_utility~material_order_check.
    CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
      EXPORTING
        input        = iv_order
      IMPORTING
        output       = ev_material
      EXCEPTIONS
        length_error = 1
        OTHERS       = 2.
    IF sy-subrc <> 0.
      RAISE length_error.
    ENDIF.
  ENDMETHOD.
  METHOD lif_simulation_utility~mb_unit_conversion.
    CALL FUNCTION 'MB_UNIT_CONVERSION'
      EXPORTING
        erfme                = iv_uom               "To Uom
        matnr                = iv_material
        meins                = lv_uom_from_atp          "from UoM
        menge                = lv_quantity_menge                     "ls_availability-availablequantityinbaseuni
        werks                = iv_plant
      IMPORTING
        o_erfmg              = ev_quantity_erfmg
      EXCEPTIONS
        conversion_not_found = 1
        OTHERS               = 2.

    IF sy-subrc <> 0.
      RAISE conversion_not_found.
    ENDIF.

  ENDMETHOD.
  METHOD lif_simulation_utility~get_storage_location_plant.
    cl_crms4_srv_order_util=>get_storage_location_plant(
      EXPORTING
        is_orderadm_i = is_orderadm_i
        it_orgman     = it_orgman
        it_partners   = it_partners
      IMPORTING
        ev_plant      = ev_plant
        et_return     = et_return ).
  ENDMETHOD.

  METHOD lif_simulation_utility~determine_availability_at.
    DATA :  lo_controller          TYPE REF TO cl_atp_info_controller.
    CREATE OBJECT lo_controller.
    CHECK lo_controller IS BOUND.
    lo_controller->determine_availability_at(
      EXPORTING
        io_raw_request         = io_raw_request
        iv_requested_date      = iv_requested_date
      IMPORTING
        es_availability_record = es_availability_record
        et_message             = et_message
    ).
  ENDMETHOD.

    METHOD lif_simulation_utility~determine_availability_of.
    DATA :  lo_controller          TYPE REF TO cl_atp_info_controller.
    CREATE OBJECT lo_controller.
    CHECK lo_controller IS BOUND.
*    lo_controller->determine_availability_of(
*      EXPORTING
*        io_raw_request         = io_raw_request
*        iv_requested_quantity  = iv_requested_quantity
*      IMPORTING
*        es_availability_record = es_availability_record
*        et_message             = et_message
*    ).
 DATA: lt_availability_timeseries TYPE tbl_atp_info_res_availy_record.

  lo_controller->calculate_availy_timeseries(
    EXPORTING
      io_raw_request             = io_raw_request
    IMPORTING
      et_availability_timeseries = lt_availability_timeseries
      et_message                 = et_message
  ).

  CHECK et_message IS INITIAL.
  DELETE lt_availability_timeseries WHERE availablequantityinbaseunit < iv_requested_quantity.
  DELETE lt_availability_timeseries WHERE periodstartutcdatetime < iv_requested_date.
  IF lt_availability_timeseries is not initial.
    READ TABLE lt_availability_timeseries INDEX 1 INTO es_availability_record.
  ENDIF.
*  IF sy-subrc <> 0.
*    MESSAGE ID 'AG' TYPE 'E' NUMBER 150 INTO DATA(lv_dummy).
*    INSERT CORRESPONDING #( sy ) INTO TABLE et_message.
*  ENDIF.
  ENDMETHOD.

  METHOD lif_simulation_utility~create_for_material_plant.
    DATA : lo_raw_request_factory TYPE REF TO cl_atp_info_raw_req_factory.
    CREATE OBJECT lo_raw_request_factory.
    CHECK lo_raw_request_factory IS BOUND.
    lo_raw_request_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = it_material_plant
        iv_checking_rule  = iv_checking_rule
      RECEIVING
        ro_raw_req        = lo_raw_request
    ).
  ENDMETHOD.




ENDCLASS.