*"* use this source file for your ABAP unit test classes

CLASS ltd_oneorder_utility DEFINITION
 FINAL .

  PUBLIC SECTION.
    INTERFACES lif_simulation_utility.

    METHODS constructor.

  PRIVATE SECTION.
    CLASS-DATA mo_simulation_utility  TYPE REF TO lif_simulation_utility .
    CLASS-DATA mo_atp_contoller TYPE REF TO cl_atp_info_controller.

ENDCLASS.

CLASS ltd_oneorder_utility IMPLEMENTATION.

  METHOD constructor.

  ENDMETHOD.

  METHOD lif_simulation_utility~one_order_read.

    et_orderadm_i = VALUE #( (  guid = '0894EF4587211ED8B682832B992D9129' number_int = '010' header = '0894EF4587211ED8B682832B992D9131'    ) ).
    et_partner = VALUE #( (  guid =  '0894EF4587211ED8B682832B992D9131'  partner_guid = 'A894EF4587211ED8B682832B992D9131' partner_no = 'AA'  ) ).
    et_orgman = VALUE #( (   ) ).
    GET TIME STAMP FIELD DATA(timestamp).
    et_appointment = VALUE #( (  ref_guid = '0894EF4587211ED8B682832B992D9129' ref_kind = 'B' appt_type = 'SRV_CUST_BEG' timestamp_from = timestamp ) ).

  ENDMETHOD.

  METHOD lif_simulation_utility~get_sales_atp_check.
    IF iv_item_type = 'ABCD'.
      es_sales_item  =  VALUE #( itm_type =  'ABCD' is_atp_relevant = 'X'   ).
    ELSEIF iv_item_type = 'IJKL'.
      "ls-sales_item-is_atp_relevant is INITIAL
      es_sales_item  =  VALUE #( itm_type =  'IJKL' is_atp_relevant = ''   ).
    ENDIF.
  ENDMETHOD.

  METHOD lif_simulation_utility~material_order_check.
    ev_material = 'srv_023'.

  ENDMETHOD.

  METHOD lif_simulation_utility~mb_unit_conversion.
    ev_quantity_erfmg = 100.


  ENDMETHOD.
  METHOD lif_simulation_utility~determine_availability_at.
    es_availability_record = VALUE #(  baseunit = 'CM'  availablequantityinbaseunit = 23789  ).

  ENDMETHOD.

    METHOD lif_simulation_utility~determine_availability_of.
    es_availability_record = VALUE #(  baseunit = 'CM'  availablequantityinbaseunit = 23789  ).

  ENDMETHOD.

  METHOD lif_simulation_utility~get_storage_location_plant.
    ev_plant = '1710'.
  ENDMETHOD.

  METHOD lif_simulation_utility~create_for_material_plant.
    DATA : lo_raw_request_factory TYPE REF TO cl_atp_info_raw_req_factory.
    CREATE OBJECT lo_raw_request_factory.
    CHECK lo_raw_request_factory IS BOUND.
    lo_raw_request_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = it_material_plant
        iv_checking_rule  = iv_checking_rule
      RECEIVING
        ro_raw_req        = lo_raw_request
    ).

  ENDMETHOD.
ENDCLASS.

CLASS ltd_crms4_atp_utility DEFINITION
 FINAL .

  PUBLIC SECTION.
    INTERFACES lif_simulation_utility.

    METHODS constructor.

  PRIVATE SECTION.
    CLASS-DATA mo_simulation_utility  TYPE REF TO lif_simulation_utility .

ENDCLASS.

CLASS ltd_crms4_atp_utility IMPLEMENTATION.

  METHOD constructor.

  ENDMETHOD.

  METHOD lif_simulation_utility~one_order_read.
    et_orderadm_i = VALUE #( (  guid = '0894EF4587211ED8B682832B992D9129' number_int = '010' header = '0894EF4587211ED8B682832B992D9131'    ) ).
    et_partner = VALUE #( (  guid =  '0894EF4587211ED8B682832B992D9131'  partner_guid = 'A894EF4587211ED8B682832B992D9131' partner_no = 'AA'  ) ).
    et_orgman = VALUE #( (   ) ).
    et_appointment = VALUE #( (  ref_guid = '0894EF4587211ED8B682832B992D9129' ref_kind = 'B' appt_type = 'SRV_CUST_BEG' timestamp_from = 20200302123456 ) ).

  ENDMETHOD.

  METHOD lif_simulation_utility~get_sales_atp_check.
    es_sales_item  =  VALUE #( itm_type =  'ABCD' is_atp_relevant = 'X'   ).
  ENDMETHOD.

  METHOD lif_simulation_utility~material_order_check.
    ev_material = 'srv_056'.
  ENDMETHOD.
  METHOD lif_simulation_utility~mb_unit_conversion.
    ev_quantity_erfmg = 1090909090878.
  ENDMETHOD.
  METHOD lif_simulation_utility~get_storage_location_plant.
    ev_plant = '1010'.
  ENDMETHOD.
  METHOD lif_simulation_utility~determine_availability_at.
    es_availability_record = VALUE #(  baseunit = 'BUN'  availablequantityinbaseunit = 67873467891234  ).
  ENDMETHOD.
  METHOD lif_simulation_utility~determine_availability_of.
    es_availability_record = VALUE #(  baseunit = 'BUN'  availablequantityinbaseunit = 67873467891234  ).
  ENDMETHOD.
  METHOD lif_simulation_utility~create_for_material_plant.
    DATA : lo_raw_request_factory TYPE REF TO cl_atp_info_raw_req_factory.
    CREATE OBJECT lo_raw_request_factory.
    CHECK lo_raw_request_factory IS BOUND.
    lo_raw_request_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = it_material_plant
        iv_checking_rule  = iv_checking_rule
      RECEIVING
        ro_raw_req        = lo_raw_request
    ).
  ENDMETHOD.

ENDCLASS.


CLASS ltc_base DEFINITION FOR TESTING
RISK LEVEL HARMLESS.

  PROTECTED SECTION.
    DATA oneorder_utility_double TYPE REF TO ltd_oneorder_utility.
    DATA cut TYPE REF TO if_crms4_simulation_atp_util.  "class under test

  PRIVATE SECTION.
    METHODS setup.
    METHODS inject_oneorder_utility_double.
    METHODS setup_cut.
    METHODS teardown.

ENDCLASS.
CLASS cl_crms4_simulation_atp_util DEFINITION LOCAL FRIENDS ltc_base.

CLASS ltc_base IMPLEMENTATION.

  METHOD setup.
    setup_cut(  ).
    inject_oneorder_utility_double(  ).
  ENDMETHOD.

  METHOD setup_cut.
    cut = cl_crms4_simulation_atp_util=>get_instance(  ).
  ENDMETHOD.

  METHOD teardown.

  ENDMETHOD.

  METHOD inject_oneorder_utility_double.
    oneorder_utility_double = NEW ltd_oneorder_utility(  ).
    CAST cl_crms4_simulation_atp_util( cut )->mo_simulation_utility = oneorder_utility_double.
  ENDMETHOD.
ENDCLASS.


CLASS ltcl_crms4_simulation_stp_util DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
  INHERITING FROM ltc_base.

  PRIVATE SECTION.
    METHODS:
      test_prepare FOR TESTING ,
      item_relevant_atp_neg_scenerio FOR TESTING,
      item_relevant_atp_pos_scenerio FOR TESTING,
      material_order FOR TESTING,
      exception_helper FOR TESTING,
      run_simulation_atp FOR TESTING.


ENDCLASS.


CLASS ltcl_crms4_simulation_stp_util IMPLEMENTATION.


  METHOD test_prepare.

    cut->prepare_for_simulative_atp( EXPORTING iv_header_guid          = '0894EF4587211ED8B682832B992D9131'
                                               iv_item_guid            = '0894EF4587211ED8B682832B992D9129'
                                               iv_status =               'I1004'
                                               iv_ordered_prod         = 'SRV_02'
                                     IMPORTING ev_plant                = DATA(lv_plant)
                                               ev_requested_start_date = DATA(start_date)
                                               ev_checking_rule         = DATA(check_rule)
                                               ev_material              = DATA(lv_material)  ).

    cl_abap_unit_assert=>assert_equals(     EXPORTING  act = check_rule    exp =  'S2' ).
    cl_abap_unit_assert=>assert_equals(    EXPORTING  act = lv_plant      exp =  '1710' ).
    cl_abap_unit_assert=>assert_equals(   EXPORTING  act = lv_material   exp =   'srv_023' ).


  ENDMETHOD.

  METHOD exception_helper.
    DATA : t_cut      TYPE REF TO cl_crms4_simulation_atp_util,
           lv_exp_msg TYPE if_atp_info_raw_req=>tt_message.
    t_cut = NEW #(  ).
    t_cut->mo_simulation_utility = NEW ltd_crms4_atp_utility(  ).

    t_cut->prepare_for_simulative_atp( EXPORTING iv_header_guid          = '0894EF4587211ED8B682832B992D9132'   "timestamp is LE current timestamp
                                               iv_item_guid            = '0894EF4587211ED8B682832B992D9129'
                                               iv_status =               'I1001'
                                               iv_ordered_prod         = 'SRV_05'
                                       IMPORTING
                                               ev_requested_start_date = DATA(start_date)
                                               ev_checking_rule         = DATA(check_rule)

                                               ).
    cl_abap_unit_assert=>assert_initial( check_rule ).

    t_cut->run_simln_atp_check(     EXPORTING
                                       iv_material           =   'sr23'               " Material Number
                                       iv_plant              =    'abd'              " Plant
                                       iv_checking_rule      =     'S2'             " Checking rule for the availability check
                                       iv_requested_date     =      '20210723123446'            " UTC Time Stamp in Short Form (YYYYMMDDhhmmss)
                                       iv_requested_quantity =      '10'
                                       iv_uom                =     'CM'             " Base Unit of Measure
                                    IMPORTING
                                       ev_available_quantity =   DATA(ls_quantity)   " Available Quantity"
                                        et_message            =   DATA(lv_msg)
                                        ).
    lv_exp_msg = VALUE #( ( msgty = 'I' msgno = 000 ) ).

    cl_abap_unit_assert=>assert_equals(  EXPORTING  act = lv_msg  exp =  lv_exp_msg ).

  ENDMETHOD.

  METHOD  item_relevant_atp_neg_scenerio.

    cut->is_item_eligible_for_simln( EXPORTING iv_itm_type =  'IJKL'
                                              iv_requested_quantity = ' '      "quantity initial
                                              iv_status = 'I1003'
                                              RECEIVING rv_eligible =  DATA(lv_eligible)  ).

    cl_abap_unit_assert=>assert_initial( lv_eligible ).


    cut->is_item_eligible_for_simln( EXPORTING iv_itm_type =  ' '              "item type initial
                                               iv_requested_quantity =  '6'
                                               iv_status = 'I1004'
                                     RECEIVING rv_eligible = lv_eligible  ).

    cl_abap_unit_assert=>assert_initial( lv_eligible ).

    cut->is_item_eligible_for_simln( EXPORTING iv_itm_type =  'ABCD'
                                               iv_requested_quantity = '4'
                                               iv_status = 'I1005'                  "status is none of them.
                                               RECEIVING rv_eligible =  lv_eligible  ).

    cl_abap_unit_assert=>assert_initial( lv_eligible ).

  ENDMETHOD.

  METHOD item_relevant_atp_pos_scenerio.

"Status released and is-atp_relevant is not initial
    cut->is_item_eligible_for_simln( EXPORTING iv_itm_type =  'ABCD'
                                               iv_requested_quantity =  '6'
                                               iv_status = 'I1004'
                                     RECEIVING rv_eligible =  DATA(lv_eligible)  ).


    cl_abap_unit_assert=>assert_equals( EXPORTING   act = lv_eligible   exp =  abap_true ).


 "status in process and is_atp-relavant is initial
    cut->is_item_eligible_for_simln( EXPORTING iv_itm_type =  'IJKL'
                                               iv_requested_quantity = '4'
                                               iv_status = 'I1003'
                                               RECEIVING rv_eligible =  lv_eligible  ).


   cl_abap_unit_assert=>assert_equals( EXPORTING   act = lv_eligible   exp =  abap_false ).


  ENDMETHOD.

  METHOD material_order.

    cut->prepare_for_simulative_atp(
                                    EXPORTING
                                          iv_ordered_prod         = 'SRV_02'
                                          iv_item_guid            = '0894EF4587211ED8B682832B992D9129'
                                          iv_header_guid          = '0894EF4587211ED8B682832B992D9131'
                                          iv_status =               'I1003'
                                    IMPORTING
                                          ev_material = DATA(ev_material)
                                          ev_checking_rule = DATA(check_rule)
                                          ).
    cl_abap_unit_assert=>assert_not_initial( ev_material   ).

    cl_abap_unit_assert=>assert_equals( EXPORTING  act = check_rule    exp =  'S1' ).

    cut->prepare_for_simulative_atp(
                                     EXPORTING
                                            iv_ordered_prod         = 'SRV_08'
                                            iv_item_guid            = '0894EF4587211ED8B682832B992D9129'
                                            iv_header_guid          = '0894EF4587211ED8B682832B992D9131'
                                            iv_status =               'I1004'
                                     IMPORTING
                                            ev_material = ev_material
                                            ev_checking_rule = check_rule
                                             ).
    cl_abap_unit_assert=>assert_equals( EXPORTING  act = check_rule    exp =  'S2' ).

  ENDMETHOD.

  METHOD run_simulation_atp.
    cut->run_simln_atp_check(    EXPORTING
                                    iv_material           =   ''               " Material Number
                                    iv_plant              =    'abcd'              " Plant
                                    iv_checking_rule      =     'S1'             " Checking rule for the availability check
                                    iv_requested_date     =      '20210723123445'            " UTC Time Stamp in Short Form (YYYYMMDDhhmmss)
                                    iv_requested_quantity =    '10'
                                    iv_uom                =     'BUN'             " Base Unit of Measure
                                 IMPORTING
                                    ev_available_quantity =   DATA(ls_quantity)               " Available Quantity"
                                     ).

    cut->run_simln_atp_check(    EXPORTING
                                        iv_material           =   'sr23'               " Material Number
                                        iv_plant              =    'abd'              " Plant
                                        iv_checking_rule      =     'S2'             " Checking rule for the availability check
                                        iv_requested_date     =      '20210723123446'            " UTC Time Stamp in Short Form (YYYYMMDDhhmmss)
                                        iv_requested_quantity =      '10'
                                        iv_uom                =     'CM'             " Base Unit of Measure
                                     IMPORTING
                                        ev_available_quantity =   ls_quantity               " Available Quantity"
                                         ).

  ENDMETHOD.


ENDCLASS.

CLASS ltc_sanity_test DEFINITION FOR TESTING
  RISK LEVEL HARMLESS DURATION SHORT
  FINAL.
  PUBLIC SECTION.

    METHODS one_order_read FOR TESTING.
    METHODS sales_atp_check FOR TESTING.
    METHODS material_order_check FOR TESTING.
    METHODS mb_unit_conv FOR TESTING.
    METHODS get_storage_loc FOR TESTING.
    METHODS create_for_material FOR TESTING.
  PRIVATE SECTION.
    DATA : f_cut TYPE REF TO lif_simulation_utility.
    METHODS setup.
ENDCLASS.


CLASS ltc_sanity_test IMPLEMENTATION.


  METHOD setup.
    f_cut = lcl_oneorder_utility=>get_instance(  ).
  ENDMETHOD.



  METHOD one_order_read.
    DATA: lt_item_guid TYPE crmt_object_guid_tab .
    DATA: lt_header_guid TYPE crmt_object_guid_tab .

    APPEND '0894EF4587211ED8B682832B992D9127' TO lt_item_guid.
    APPEND '0894EF4587211ED8B682832B992D9128' TO lt_header_guid.

    f_cut = lcl_oneorder_utility=>get_instance(  )." Calling once again , so that if constuctor condition can be covered
    f_cut->one_order_read(
      EXPORTING
        it_header_guid = lt_header_guid
*        it_item_guid   = lt_item_guid
      IMPORTING
        et_appointment = DATA(lt_appointment)
      EXCEPTIONS
        OTHERS         = 1 ).

    cl_abap_unit_assert=>assert_initial( act   = lt_appointment ).

  ENDMETHOD.

  METHOD sales_atp_check.

    DATA: lt_item_type TYPE crmt_item_type .
    f_cut = lcl_oneorder_utility=>get_instance(  ).
    f_cut->get_sales_atp_check(
      EXPORTING
        iv_item_type  = lt_item_type
      IMPORTING
        es_sales_item =  DATA(ls_sale_item)
        EXCEPTIONS
          OTHERS = 1 ).


  ENDMETHOD.
  METHOD material_order_check.
    DATA: iv_ordered_prod TYPE crmt_ordered_prod_db.
    f_cut = lcl_oneorder_utility=>get_instance(  ).
    f_cut->material_order_check(
      EXPORTING
        iv_order     = iv_ordered_prod

    ).

  ENDMETHOD.
  METHOD mb_unit_conv.
    f_cut = lcl_oneorder_utility=>get_instance(  ).
    f_cut->mb_unit_conversion(
      EXPORTING
        iv_uom               = 'BUN'
        lv_uom_from_atp      = 'com'
        iv_material          = 'ww'
        lv_quantity_menge    = 678
        iv_plant             =   '1760'

      EXCEPTIONS
        conversion_not_found = 1
        OTHERS               = 2

    ).


  ENDMETHOD.

  METHOD get_storage_loc.
    f_cut = lcl_oneorder_utility=>get_instance(  ).
    f_cut->get_storage_location_plant(
      EXPORTING
        is_orderadm_i = VALUE #( )
        it_orgman     = VALUE #( )
        it_partners   = VALUE #( )
    ).
    cl_abap_unit_assert=>assert_equals( act = sy-subrc exp = 0 ).
  ENDMETHOD.


  METHOD create_for_material.
    f_cut = lcl_oneorder_utility=>get_instance(  ).
    f_cut->create_for_material_plant(
      EXPORTING
        it_material_plant = VALUE #( )
        iv_checking_rule  = 'S1'

    ).
  ENDMETHOD.
ENDCLASS.