
*" type-pools
TYPE-POOLS:
  MMPUR .

CLASS CL_HANDLE_MANAGER_MM DEFINITION
  PUBLIC
  CREATE PUBLIC .

*" public components of class CL_HANDLE_MANAGER_MM
*" do not include other source files here!!!
PUBLIC SECTION.


*" class methods
CLASS-METHODS:
  ADD
      IMPORTING
        IM_HANDLE TYPE REF TO CL_HANDLE_MM
      EXPORTING
        EX_ID TYPE I ,
  REMOVE
      IMPORTING
        IM_ID TYPE I
      EXCEPTIONS
        FAILURE ,
  GET
      IMPORTING
        IM_ID TYPE I
      EXPORTING
        EX_HANDLE TYPE REF TO CL_HANDLE_MM
      EXCEPTIONS
        FAILURE ,
  REFRESH . .
PROTECTED SECTION.
*" protected components of class CL_HANDLE_MANAGER_MM
*" do not include other source files here!!!

private section.
*" private components of class CL_HANDLE_MANAGER_MM
*" do not include other source files here!!!


*" types
types:
  BEGIN OF a_handle_entry,
         id        TYPE i,
         handle    TYPE REF TO if_model_mm,
       END OF a_handle_entry ,
  handle_items TYPE hashed TABLE OF mmpur_handle_entry
                          WITH UNIQUE KEY id initial size 1000 .

*" class attributes
class-data:
  CURRENT_ID type I ,
  MY_MANAGER type ref to CL_HANDLE_MANAGER_MM .

*" instance attributes
data:
  MY_ITEMS type HANDLE_ITEMS .

*" class methods
class-methods:
  GET_MANAGER .

*" methods
methods:
  SEARCH
      importing
        !IM_ID type I
      exporting
        !EX_HANDLE type ref to CL_HANDLE_MM
      exceptions
        FAILURE ,
  INSERT
      importing
        !IM_HANDLE type ref to CL_HANDLE_MM
      exporting
        !EX_ID type I ,
  DELETE
      importing
        !IM_ID type I
      exceptions
        FAILURE .
ENDCLASS.



CLASS CL_HANDLE_MANAGER_MM IMPLEMENTATION.


METHOD ADD.


  if my_manager is initial.
    call method get_manager.
  endif.

  call method my_manager->insert exporting im_handle = im_handle
                                 importing ex_id     = ex_id.

ENDMETHOD.


METHOD DELETE.


  delete table my_items with table key id = im_id.

  if sy-subrc ne 0.
    raise FAILURE.
  endif.

ENDMETHOD.


METHOD get.


  IF my_manager is initial.
    CALL METHOD get_manager.
  ENDIF.

  CALL METHOD my_manager->search EXPORTING im_id = im_id
                                 IMPORTING ex_handle = ex_handle
                                 EXCEPTIONS failure  = 01.

  IF sy-subrc ne 0.
    RAISE failure.
  ENDIF.

ENDMETHOD.


METHOD GET_MANAGER.


IF MY_MANAGER IS INITIAL.
   CREATE OBJECT MY_MANAGER.
ENDIF.

ENDMETHOD.


METHOD INSERT.


  data: line type line of mmpur_handle_items.

  add 1 to current_id.
  line-id = current_id.
  line-handle = im_handle.
  insert line into table my_items.

  ex_id = current_id.

ENDMETHOD.


METHOD refresh.


  IF my_manager is initial.
    CALL METHOD get_manager.
  ENDIF.

  REFRESH my_manager->my_items.

ENDMETHOD.


METHOD remove.


  IF my_manager is initial.
    CALL METHOD get_manager.
  ENDIF.

  CALL METHOD my_manager->delete EXPORTING im_id = im_id
                                 EXCEPTIONS failure = 01.

  IF sy-subrc ne 0.
    RAISE failure.
  ENDIF.

ENDMETHOD.


METHOD SEARCH.


  data: line type line of mmpur_handle_items.


  read table my_items into line with table key id = im_id.

  if sy-subrc is initial.
    ex_handle ?= line-handle.
  else.
    raise failure.
  endif.

ENDMETHOD.
ENDCLASS.