CLASS cl_sadl_gw_v4_dpc_adapter DEFINITION PUBLIC INHERITING FROM /iwbep/cl_v4_abs_data_provider
 ABSTRACT CREATE PUBLIC GLOBAL FRIENDS tc_sadl_gw_v4_dpc_adapter_base.

  PUBLIC SECTION.
    METHODS constructor.

    METHODS /iwbep/if_v4_dp_process_steps~initialize       REDEFINITION.
    METHODS /iwbep/if_v4_dp_process_steps~finalize_request REDEFINITION.

    METHODS /iwbep/if_v4_dp_advanced~create_entity    REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~read_entity_list REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~read_entity      REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~update_entity    REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~delete_entity    REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~execute_action   REDEFINITION.
    METHODS /iwbep/if_v4_dp_advanced~execute_function REDEFINITION.

    METHODS /iwbep/if_v4_dp_batch~process_change_set  REDEFINITION.
    METHODS /iwbep/if_v4_dp_batch~process_batch       REDEFINITION.

    METHODS /iwbep/if_v4_dp_process_steps~commit      REDEFINITION.
    METHODS /iwbep/if_v4_dp_process_steps~rollback    REDEFINITION.

    CONSTANTS co_sadl_servd_rep_id     TYPE /iwbep/v4_med_repository_id VALUE /iwbep/if_v4_registry_types=>gcs_repository_id-sadl.
    CONSTANTS co_sadl_f4_servd_rep_id  TYPE /iwbep/v4_med_repository_id VALUE /iwbep/if_v4_registry_types=>gcs_repository_id-sadl_f4.
    CONSTANTS co_sadl_a2x_servd_rep_id TYPE /iwbep/v4_med_repository_id VALUE /iwbep/if_v4_registry_types=>gcs_repository_id-sadl_a2x.
    CONSTANTS lc_30 TYPE i VALUE 30.
  PROTECTED SECTION.
    DATA ms_service_key TYPE /iwbep/s_v4_med_service_key.
    METHODS initialize FINAL IMPORTING io_mdp TYPE REF TO if_sadl_metadata_provider
                             RAISING   /iwbep/cx_gateway.
    METHODS convert_to_gw_exc_or_handle FINAL IMPORTING !ix_sadl TYPE REF TO cx_root
                                              RAISING   /iwbep/cx_gateway.
    METHODS register_services IMPORTING !it_service_key TYPE /iwbep/t_v4_med_service_key
                              RAISING   /iwbep/cx_gateway.

  PRIVATE SECTION.

    TYPES:
      BEGIN OF ty_operation_info, " operation means 'action or function' here, not 'one line of a change set'
        name                        TYPE string,
        return_entity_name          TYPE string,
        returns_collection          TYPE abap_bool,
        binding_parameter_name      TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name,
        binding_param_is_collection TYPE abap_bool,
      END OF ty_operation_info .
    TYPES:
      tt_operation_info TYPE STANDARD TABLE OF ty_operation_info .
    TYPES ty_operation_parameter TYPE REF TO /iwbep/if_v4_med_element .
    TYPES:
      tt_operation_parameters TYPE STANDARD TABLE OF ty_operation_parameter WITH EMPTY KEY .
    TYPES:
      BEGIN OF ty_deep_data_description,
        id                  TYPE string,
        parent_id           TYPE string,
        entity_name         TYPE string,
        nav_prop            TYPE fieldname,
        is_table            TYPE abap_bool,
        has_children        TYPE abap_bool,
        provided_elements   TYPE if_sadl_entity_transactional=>tt_element_names,
        selected_properties TYPE if_sadl_entity_transactional=>tt_element_names,
*             has_value_control   TYPE abap_bool,
      END OF ty_deep_data_description .
    TYPES:
      tt_deep_data_description TYPE STANDARD TABLE OF ty_deep_data_description WITH EMPTY KEY
                WITH NON-UNIQUE SORTED KEY parent COMPONENTS parent_id .
    TYPES:
      BEGIN OF ty_create_content_id,
        content_id TYPE string,
        tabix      TYPE i,
      END OF ty_create_content_id .
    TYPES:
      tt_create_content_id TYPE SORTED TABLE OF ty_create_content_id WITH UNIQUE KEY content_id .
    TYPES:
      BEGIN OF ty_deep_create_data,
        index   TYPE i,
        rs_data TYPE REF TO data,
        length  TYPE i,
      END OF ty_deep_create_data .
    TYPES:
      tt_deep_create_data TYPE SORTED TABLE OF ty_deep_create_data WITH UNIQUE KEY index .
    TYPES:
      tt_update_done_list TYPE STANDARD TABLE OF /iwbep/if_v4_requ_adv_update=>ty_s_todo_process_list WITH DEFAULT KEY .
    TYPES:
      tt_create_done_list TYPE STANDARD TABLE OF /iwbep/if_v4_requ_adv_create=>ty_s_todo_process_list WITH DEFAULT KEY .
    TYPES:
      tt_delete_done_list TYPE STANDARD TABLE OF /iwbep/if_v4_requ_adv_delete=>ty_s_todo_process_list WITH DEFAULT KEY .
    TYPES:
      tt_action_done_list TYPE STANDARD TABLE OF /iwbep/if_v4_requ_adv_action=>ty_s_todo_process_list WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_change_set_data,
        create                    TYPE if_sadl_gw_v4_generic_dpc=>tt_create,
        deep_create_data          TYPE tt_deep_create_data,
        create_done_list          TYPE tt_create_done_list,
        update                    TYPE if_sadl_gw_v4_generic_dpc=>tt_update,
        update_done_list          TYPE tt_update_done_list,
        delete                    TYPE if_sadl_changeset=>tt_delete,
        delete_done_list          TYPE tt_delete_done_list,
        action                    TYPE if_sadl_gw_v4_generic_dpc=>tt_action,
        action_done_list          TYPE tt_action_done_list,
*        action_metadata           TYPE if_sadl_gw_v4_generic_dpc=>tt_action_metadata,
        strict_handling_requested TYPE abap_bool,
      END OF ty_change_set_data .
    TYPES:
      BEGIN OF ty_instance_operation,
        operation_id   TYPE /iwbep/if_v4_runtime_types=>ty_operation_id,
        instance_index TYPE i,
      END OF ty_instance_operation .
    TYPES:
      tt_instance_operation TYPE STANDARD TABLE OF ty_instance_operation WITH DEFAULT KEY .
    TYPES:
      BEGIN OF ty_parameter_name_mapping,
        gw_name   TYPE /iwbep/if_v4_med_types=>ty_e_med_internal_name,
        sadl_name TYPE string,
      END OF ty_parameter_name_mapping .
    TYPES:
      tt_parameter_name_mapping TYPE STANDARD TABLE OF ty_parameter_name_mapping WITH KEY sadl_name .

    CONSTANTS co_include_name TYPE fieldname VALUE '_SADL_INCL_RESERVED_NAME_2021_' ##NO_TEXT.
    CONSTANTS co_max_header_messages TYPE i VALUE 20 ##NO_TEXT.
    CONSTANTS co_extern_intern_cid_delimiter TYPE string VALUE cl_sadl_gw_dpc_deep_create=>co_extern_intern_cid_delimiter ##NO_TEXT.
    DATA mo_dpc TYPE REF TO if_sadl_gw_v4_generic_dpc .
    DATA mo_mdp TYPE REF TO if_sadl_metadata_provider .
    DATA mo_model_access TYPE REF TO /iwbep/if_v4_med_model_access .
    DATA mo_exception_converter TYPE REF TO cl_sadl_gw_v4_dpc_adp_exc_conv .
    DATA ms_service_features TYPE /iwbep/if_v4_med_types=>ty_s_med_service_feature_pro .
    DATA ms_hub_features TYPE /iwbep/if_v4_med_types=>tys_hub_features .
    DATA:
      " sticky session
      BEGIN OF ms_sticky_session,
        allowed   TYPE abap_bool VALUE abap_undefined,
        effect    TYPE if_sadl_entity=>ty_action_sticky_sess_effect,
        success   TYPE abap_bool,
        is_active TYPE abap_bool,
      END OF ms_sticky_session .

    METHODS _get_sticky_session_effect
      IMPORTING
        !iv_action_name          TYPE string
        !iv_entity_name          TYPE string
      RETURNING
        VALUE(rv_session_effect) TYPE if_sadl_entity=>ty_action_sticky_sess_effect .
    METHODS _set_sticky_session_effect
      IMPORTING
        !iv_session_effect TYPE if_sadl_entity=>ty_action_sticky_sess_effect .
    METHODS _get_model
      IMPORTING
        !is_service_key TYPE /iwbep/s_v4_med_service_key
      RETURNING
        VALUE(ro_model) TYPE REF TO /iwbep/if_v4_med_model_r
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_function_info
      IMPORTING
        !io_function_nav_node TYPE REF TO /iwbep/if_v4_navigation_node
        !is_service_key       TYPE /iwbep/s_v4_med_service_key OPTIONAL
      EXPORTING
        !es_function_info     TYPE ty_operation_info
        !eo_function          TYPE REF TO /iwbep/if_v4_med_function_r
      RAISING
        /iwbep/cx_gateway .
*                                      !io_request         TYPE REF TO /iwbep/if_v4_requ_adv_action
*                                      !iv_action_import   TYPE abap_bool
    METHODS _get_action_info
      IMPORTING
        !io_action_nav_node TYPE REF TO /iwbep/if_v4_navigation_node
        !is_service_key     TYPE /iwbep/s_v4_med_service_key OPTIONAL
      EXPORTING
        !es_action_info     TYPE ty_operation_info
        !eo_action          TYPE REF TO /iwbep/if_v4_med_action_r
      RAISING
        /iwbep/cx_gateway .
    METHODS _convert_entity_set_i2e
      IMPORTING
        !iv_internal_name       TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !is_service_key         TYPE /iwbep/s_v4_med_service_key OPTIONAL
      RETURNING
        VALUE(rv_external_name) TYPE string
      RAISING
        /iwbep/cx_gateway .
    METHODS _convert_entity_type_i2e
      IMPORTING
        !iv_internal_name       TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !is_service_key         TYPE /iwbep/s_v4_med_service_key OPTIONAL
      RETURNING
        VALUE(rv_external_name) TYPE string
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_all_elements
      IMPORTING
        !iv_entity_type           TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !iv_exclude_keys          TYPE abap_bool DEFAULT abap_false
      RETURNING
        VALUE(rt_non_key_element) TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_req_detail_read_elist
      IMPORTING
        !io_request                     TYPE REF TO /iwbep/if_v4_requ_adv_list
      EXPORTING
        !ev_entity_name                 TYPE string
        !es_requested                   TYPE if_sadl_query_engine_types=>ty_requested
        !es_paging                      TYPE if_sadl_gw_v4_generic_dpc=>ty_paging
        !et_sort_element                TYPE if_sadl_query_engine_types=>tt_sort_elements
        !eo_filter_provider             TYPE REF TO if_sadl_condition_provider
        !eo_aggregation_filter_provider TYPE REF TO if_sadl_condition_provider
        !et_navigation_step             TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !et_expand_step                 TYPE if_sadl_gw_v4_generic_dpc=>tt_expand_step
        !es_aggregation                 TYPE if_sadl_query_engine_types=>ty_aggregation
        !es_done_list                   TYPE /iwbep/if_v4_requ_adv_list=>ty_s_todo_process_list
        !et_dynamic_property            TYPE if_sadl_gw_v4_generic_dpc=>tt_dynamic_property
        !es_text_search                 TYPE if_sadl_gw_v4_generic_dpc=>ty_text_search
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _get_requested_elems_per_deflt
      IMPORTING
        !iv_entity_type    TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !is_service_key    TYPE /iwbep/s_v4_med_service_key
      RETURNING
        VALUE(rt_elements) TYPE if_sadl_query_engine_types=>tt_requested_elements
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_req_detail_read_entity
      IMPORTING
        !io_request         TYPE REF TO /iwbep/if_v4_requ_adv_read
      EXPORTING
        !ev_entity_name     TYPE string
        !es_requested       TYPE if_sadl_query_engine_types=>ty_requested
        !er_key             TYPE REF TO data
        !et_navigation_step TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !et_expand_step     TYPE if_sadl_gw_v4_generic_dpc=>tt_expand_step
        !es_done_list       TYPE /iwbep/if_v4_requ_adv_read=>ty_s_todo_process_list
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_req_detail_create_entity
      IMPORTING
        !io_request                   TYPE REF TO /iwbep/if_v4_requ_adv_create
      EXPORTING
        !er_busi_data                 TYPE REF TO data
        !ev_entity_name               TYPE string
        !et_provided_elements         TYPE if_sadl_changeset=>ty_create-provided_elements                                                                 " TODO
        !ev_fill_data                 TYPE abap_bool
        !et_requested_elements        TYPE if_sadl_entity_transactional=>tt_element_names
        !et_navigation_steps          TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !et_deep_create               TYPE if_sadl_gw_v4_generic_dpc=>tt_create
        !es_done_list                 TYPE /iwbep/if_v4_requ_adv_create=>ty_s_todo_process_list
        !ev_strict_handling_requested TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _get_req_detail_delete_entity
      IMPORTING
        !io_request                   TYPE REF TO /iwbep/if_v4_requ_adv_delete
      EXPORTING
        !ev_entity_name               TYPE string
        !er_key                       TYPE REF TO data
        !es_done_list                 TYPE /iwbep/if_v4_requ_adv_delete=>ty_s_todo_process_list
        !es_precondition              TYPE if_sadl_changeset=>ty_precondition_on_instance
        !ev_strict_handling_requested TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _get_req_detail_update_entity
      IMPORTING
        !io_request                   TYPE REF TO /iwbep/if_v4_requ_adv_update
      EXPORTING
        !er_data                      TYPE REF TO data
        !ev_entity_name               TYPE string
        !et_update_element            TYPE if_sadl_entity_transactional=>tt_element_names
        !es_done_list                 TYPE /iwbep/if_v4_requ_adv_update=>ty_s_todo_process_list
        !es_precondition              TYPE if_sadl_changeset=>ty_precondition_on_instance
        !ev_fill_data                 TYPE abap_bool
        !et_requested_element         TYPE if_sadl_entity_transactional=>tt_element_names
        !ev_strict_handling_requested TYPE abap_bool
        !et_expand_step               TYPE if_sadl_gw_v4_generic_dpc=>tt_expand_step
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _get_requested_elements2
      IMPORTING
        !it_selected_property        TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path
      RETURNING
        VALUE(rt_requested_elements) TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        cx_sadl_gw_v4_not_implemented .
    METHODS _get_req_detail_execute_action
      IMPORTING
        !io_request                   TYPE REF TO /iwbep/if_v4_requ_adv_action
      EXPORTING
        !es_action_metadata           TYPE ty_operation_info
        !ev_entity_name               TYPE string
        !er_key                       TYPE REF TO data
        !et_navigation_steps          TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !er_params                    TYPE REF TO data
        !es_done_list                 TYPE /iwbep/if_v4_requ_adv_action=>ty_s_todo_process_list
        !et_requested_element         TYPE if_sadl_entity_transactional=>tt_element_names
        !ev_sticky_sess_effect        TYPE if_sadl_entity=>ty_action_sticky_sess_effect
        !es_precondition              TYPE if_sadl_changeset=>ty_precondition_on_instance
        !ev_strict_handling_requested TYPE abap_bool
        !et_expand_step               TYPE if_sadl_gw_v4_generic_dpc=>tt_expand_step
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_req_detail_exec_function
      IMPORTING
        !io_request           TYPE REF TO /iwbep/if_v4_requ_adv_func
      EXPORTING
        !es_function_metadata TYPE ty_operation_info
        !ev_entity_name       TYPE string
        !er_key               TYPE REF TO data
        !et_navigation_steps  TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !er_params            TYPE REF TO data
        !es_done_list         TYPE /iwbep/if_v4_requ_adv_func=>ty_s_todo_process_list
        !et_requested_element TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        /iwbep/cx_gateway .
*    METHODS _aggregation_alias_exists IMPORTING !is_aggregation                    TYPE if_sadl_query_engine_types=>ty_aggregation
*                                      RETURNING VALUE(rv_aggregation_alias_exists) TYPE abap_bool.
    METHODS _set_dpc
      IMPORTING
        !io_dpc TYPE REF TO if_sadl_gw_v4_generic_dpc .
    METHODS _get_expand_steps
      IMPORTING
        !it_expand_node TYPE /iwbep/if_v4_expand_node=>ty_t_expand_node
        !iv_parent_id   TYPE string OPTIONAL
      CHANGING
        !ct_expand_step TYPE if_sadl_gw_v4_generic_dpc=>tt_expand_step
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_requested_elements
      IMPORTING
        !it_selected_property       TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path
      RETURNING
        VALUE(rt_requested_element) TYPE if_sadl_query_engine_types=>ty_requested-elements
      RAISING
        /iwbep/cx_gateway .
    METHODS _finalize_request
      IMPORTING
        !io_response TYPE REF TO /iwbep/if_v4_resp_step_final .
    METHODS _write_msg_into_msg_container
      IMPORTING
        !it_message              TYPE if_sadl_message_handler=>tt_messages
        !io_v4_message_container TYPE REF TO /iwbep/if_v4_message_container
      EXPORTING
        !et_targets              TYPE /iwbep/cx_gateway=>ty_t_message_target
        !ev_leading_content_id   TYPE string
      CHANGING
        !cv_http_status_code     TYPE /iwbep/cx_gateway=>ty_http_status_code
        !ct_touched_instances    TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances
      RAISING
        /iwbep/cx_gateway .
    METHODS _write_msg_into_table
      IMPORTING
        !it_message             TYPE if_sadl_message_handler=>tt_messages
      EXPORTING
        !et_unbound_gw_messages TYPE /iwbep/if_v4_runtime_types=>ty_t_message
      RAISING
        /iwbep/cx_gateway .
    METHODS _add_not_requested_msgs
      IMPORTING
        !io_operation_messages TYPE REF TO cl_sadl_v4_operation_messages
      CHANGING
        !ct_gw_messages        TYPE /iwbep/if_v4_runtime_types=>ty_t_message .
    CLASS-METHODS _read_data_from_message                                                           "Extracted for separate testability w/o message container
      IMPORTING
        !io_t100_message TYPE REF TO if_t100_message
      EXPORTING
        !ev_msg_id       TYPE symsgid
        !ev_msg_number   TYPE symsgno
        !ev_msg_text     TYPE string
        !ev_msg_v1       TYPE symsgv
        !ev_msg_v2       TYPE symsgv
        !ev_msg_v3       TYPE symsgv
        !ev_msg_v4       TYPE symsgv .
    METHODS _get_provided_elements
      IMPORTING
        !from_create_request      TYPE REF TO /iwbep/if_v4_requ_adv_create OPTIONAL
        !from_update_request      TYPE REF TO /iwbep/if_v4_requ_adv_update OPTIONAL
        !from_deep_data_desc_node TYPE REF TO /iwbep/if_v4_data_desc_node OPTIONAL
        !iv_entity_name           TYPE string OPTIONAL
      RETURNING
        VALUE(provided_elements)  TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_selected_properties
      IMPORTING
        !from_create_request          TYPE REF TO /iwbep/if_v4_requ_adv_create OPTIONAL
        !from_update_request          TYPE REF TO /iwbep/if_v4_requ_adv_update OPTIONAL
        !from_action_request          TYPE REF TO /iwbep/if_v4_requ_adv_action OPTIONAL
        !from_function_request        TYPE REF TO /iwbep/if_v4_requ_adv_func OPTIONAL
        !from_elist_request           TYPE REF TO /iwbep/if_v4_requ_adv_list OPTIONAL
        !from_entity_request          TYPE REF TO /iwbep/if_v4_requ_adv_read OPTIONAL
        !from_expand_node             TYPE REF TO /iwbep/if_v4_expand_node OPTIONAL
        !iv_entity_name               TYPE string
      RETURNING
        VALUE(rt_selected_properties) TYPE /iwbep/if_v4_runtime_types=>ty_t_property_path
      RAISING
        /iwbep/cx_gateway .
    METHODS _add_crea_and_resolve_children
      IMPORTING
        !it_deep_data_description TYPE cl_sadl_gw_v4_dpc_adapter=>tt_deep_data_description
        !iv_parent_entity_name    TYPE string
        !iv_source_tabix          TYPE i
        !is_deep_data_description TYPE cl_sadl_gw_v4_dpc_adapter=>ty_deep_data_description
      CHANGING
        !ct_deep_create           TYPE if_sadl_gw_v4_generic_dpc=>tt_create
        !cs_busi_data             TYPE data                                                                          " must be CHANGING
      RAISING
        cx_sadl_contract_violation
        cx_sadl_static .
    METHODS _set_response_update_entity
      IMPORTING
        !ir_busi_data_out TYPE REF TO data
        !io_response      TYPE REF TO /iwbep/if_v4_resp_adv_update
      RAISING
        /iwbep/cx_gateway .
    METHODS _set_response_create_entity
      IMPORTING
        !ir_busi_data_out TYPE REF TO data
        !io_response      TYPE REF TO /iwbep/if_v4_resp_adv_create
      RAISING
        /iwbep/cx_gateway .
    METHODS _set_response_action
      IMPORTING
        !ir_busi_data_out TYPE REF TO data
        !io_response      TYPE REF TO /iwbep/if_v4_resp_adv_action
      RAISING
        /iwbep/cx_gateway .
    METHODS _raise
      IMPORTING
        !iv_failure_reason    TYPE if_sadl_changeset=>ty_failure_reason DEFAULT if_sadl_changeset=>co_failure_reason-non_specific
        !it_sadl_messages     TYPE if_sadl_message_handler=>tt_messages
      CHANGING
        !ct_touched_instances TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances OPTIONAL
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_navigation_source_key_ref
      IMPORTING
        !iv_entity_name      TYPE string
        !io_navigation_node  TYPE REF TO /iwbep/if_v4_navigation_node
      RETURNING
        VALUE(rr_source_key) TYPE REF TO data
      RAISING
        /iwbep/cx_gateway .
    METHODS _overlay_upd_data_with_key
      IMPORTING
        !is_key         TYPE data
        !is_data        TYPE data
        !iv_entity_type TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
      RETURNING
        VALUE(rr_data)  TYPE REF TO data
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_navigation_details
      IMPORTING
        !io_navi_node                TYPE REF TO /iwbep/if_v4_navigation_node
      EXPORTING
        !et_navigation_steps         TYPE if_sadl_gw_v4_generic_dpc=>tt_navigation_step
        !ev_entity_name              TYPE string
        !ev_entity_type              TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
        !er_key                      TYPE REF TO data
        !es_service_key              TYPE /iwbep/s_v4_med_service_key
        !eo_action_function_nav_node TYPE REF TO /iwbep/if_v4_navigation_node
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_deep_data_description
      IMPORTING
        !it_data_desc_node        TYPE /iwbep/if_v4_data_desc_node=>ty_t_data_desc_node
        !io_parent_descr          TYPE REF TO cl_abap_complexdescr
        !iv_parent_id             TYPE string OPTIONAL
      EXPORTING
        !eo_deep_data_rtti        TYPE REF TO cl_abap_complexdescr
        !et_deep_data_description TYPE tt_deep_data_description
      RAISING
        /iwbep/cx_gateway .
    METHODS _resolve_deep_create
      IMPORTING
        !it_deep_data_description TYPE tt_deep_data_description
        !ir_busi_data             TYPE REF TO data
        !iv_parent_entity_name    TYPE string
        !iv_parent_id             TYPE string OPTIONAL
        VALUE(iv_source_tabix)    TYPE i DEFAULT 1
      CHANGING
        !ct_deep_create           TYPE if_sadl_gw_v4_generic_dpc=>tt_create
      RAISING
        cx_sadl_static
        cx_sadl_contract_violation .
    METHODS _get_key_elements
      IMPORTING
        !iv_entity_type       TYPE /iwbep/if_v4_med_element=>ty_e_med_internal_name
      RETURNING
        VALUE(rt_key_element) TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_text_search
      IMPORTING
        !io_search_node       TYPE REF TO /iwbep/if_v4_search_node
      RETURNING
        VALUE(rs_text_search) TYPE if_sadl_gw_v4_generic_dpc=>ty_text_search
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_action_parameters
      IMPORTING
        !iv_entity_name      TYPE string
        !iv_sadl_action_name TYPE string
        !io_navigation_node  TYPE REF TO /iwbep/if_v4_navigation_node
        !io_action           TYPE REF TO /iwbep/if_v4_med_action_r
      EXPORTING
        !er_params           TYPE REF TO data
        !ev_params_done      TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        cx_sy_struct_creation .
    METHODS _get_function_parameters
      IMPORTING
        !iv_entity_name        TYPE string
        !iv_sadl_function_name TYPE string
        !io_function           TYPE REF TO /iwbep/if_v4_med_function_r
        !io_function_request   TYPE REF TO /iwbep/if_v4_requ_adv_func OPTIONAL
        !io_navigation_node    TYPE REF TO /iwbep/if_v4_navigation_node OPTIONAL
      EXPORTING
        !er_params             TYPE REF TO data
        !ev_params_done        TYPE abap_bool
      RAISING
        /iwbep/cx_gateway
        cx_sy_struct_creation .
    METHODS _get_function_return_entity
      IMPORTING
        !io_function                 TYPE REF TO /iwbep/if_v4_med_function_r
      RETURNING
        VALUE(rv_return_entity_name) TYPE ty_operation_info-return_entity_name
      RAISING
        /iwbep/cx_v4_med .
    METHODS _get_action_return_entity
      IMPORTING
        !io_action                   TYPE REF TO /iwbep/if_v4_med_action_r
      RETURNING
        VALUE(rv_return_entity_name) TYPE ty_operation_info-return_entity_name
      RAISING
        /iwbep/cx_v4_med .
    METHODS _does_action_return_collection
      IMPORTING
        !io_action              TYPE REF TO /iwbep/if_v4_med_action_r
      RETURNING
        VALUE(rv_is_collection) TYPE abap_bool
      RAISING
        /iwbep/cx_v4_med .
    METHODS _map_operation_parameters
      IMPORTING
        !it_operation_parameters TYPE tt_operation_parameters
        !iv_entity_name          TYPE string
        !iv_sadl_action_name     TYPE string
        !io_function_request     TYPE REF TO /iwbep/if_v4_requ_adv_func OPTIONAL
        !io_navigation_node      TYPE REF TO /iwbep/if_v4_navigation_node OPTIONAL
      EXPORTING
        !er_params               TYPE REF TO data
      RAISING
        /iwbep/cx_gateway
        cx_parameter_invalid_range
        cx_sy_struct_creation .
    METHODS _get_corresponding_structdescr
      IMPORTING
        !io_complexdescr      TYPE REF TO cl_abap_complexdescr
      RETURNING
        VALUE(ro_structdescr) TYPE REF TO cl_abap_structdescr .
    METHODS _generate_child_id
      IMPORTING
        !iv_parent_id          TYPE string
        VALUE(iv_child_number) TYPE i
      RETURNING
        VALUE(rv_child_id)     TYPE string .
*    METHODS get_hash IMPORTING iv_value        TYPE string
*                     RETURNING VALUE(rv_hash)  TYPE string.
    METHODS _get_filter_apply_details
      IMPORTING
        !iv_entity_name                 TYPE string
        !io_request                     TYPE REF TO /iwbep/if_v4_requ_adv_list
        !is_todo_list                   TYPE /iwbep/if_v4_requ_adv_list=>ty_s_todo_list
        !io_entity_type                 TYPE REF TO /iwbep/if_v4_med_entity_type_r
      EXPORTING
        !es_aggregation                 TYPE if_sadl_query_engine_types=>ty_aggregation
        !eo_aggregation_filter_provider TYPE REF TO if_sadl_condition_provider
        !eo_filter_provider             TYPE REF TO if_sadl_condition_provider
        !et_dynamic_property            TYPE if_sadl_gw_v4_generic_dpc=>tt_dynamic_property
        !et_apply_result_elements       TYPE if_sadl_query_engine_types=>tt_requested_elements
      CHANGING
        !ct_requested                   TYPE if_sadl_query_engine_types=>tt_requested_elements
        !cs_done_list                   TYPE /iwbep/if_v4_requ_adv_list=>ty_s_todo_process_list
      RAISING
        /iwbep/cx_gateway .
    METHODS _post_process_change_set
      IMPORTING
        !iv_failed          TYPE abap_bool
        !iv_failure_reason  TYPE if_sadl_changeset=>ty_failure_reason
        !it_messages        TYPE if_sadl_message_handler=>tt_messages
        !io_request         TYPE REF TO /iwbep/if_v4_requ_btc_proc_cs
        !it_action_metadata TYPE tt_operation_info
      CHANGING
        !cs_change_set      TYPE ty_change_set_data
      RAISING
        /iwbep/cx_gateway .
    METHODS _post_process_succ_change_set
      IMPORTING
        !is_change_set TYPE ty_change_set_data
        !it_messages   TYPE if_sadl_message_handler=>tt_messages
        !io_request    TYPE REF TO /iwbep/if_v4_requ_btc_proc_cs
      RAISING
        /iwbep/cx_gateway .
    METHODS _post_process_failed_changeset
      IMPORTING
        !is_change_set      TYPE ty_change_set_data
        !iv_failure_reason  TYPE if_sadl_changeset=>ty_failure_reason
        !it_messages        TYPE if_sadl_message_handler=>tt_messages
        !io_request         TYPE REF TO /iwbep/if_v4_requ_btc_proc_cs
        !it_action_metadata TYPE tt_operation_info
      RAISING
        /iwbep/cx_gateway .
    METHODS _prepare_change_set
      IMPORTING
        !io_request         TYPE REF TO /iwbep/if_v4_requ_btc_proc_cs
      EXPORTING
        !es_change_set      TYPE cl_sadl_gw_v4_dpc_adapter=>ty_change_set_data
        !et_action_metadata TYPE tt_operation_info
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _prepare_change_set_create
      IMPORTING
        !is_operation                 TYPE /iwbep/if_v4_requ_btc_oper=>ty_s_batch_operation
        !iv_index                     TYPE i
        !iv_content_id                TYPE string
        !iv_content_id_ref            TYPE string
      EXPORTING
        !es_deep_create_data          TYPE ty_deep_create_data
        !es_create_done_list          TYPE /iwbep/if_v4_requ_adv_create=>ty_s_todo_process_list
        !ev_strict_handling_requested TYPE abap_bool
      CHANGING
        !ct_create                    TYPE if_sadl_gw_v4_generic_dpc=>tt_create
        !ct_create_content_id         TYPE tt_create_content_id
      RAISING
        /iwbep/cx_gateway
        cx_sadl_static .
    METHODS _get_succ_action_msg_target
      IMPORTING
        !io_response             TYPE REF TO /iwbep/if_v4_resp_adv_action
        !is_action_metadata      TYPE ty_operation_info
        !iv_messages_requested   TYPE abap_bool
      RETURNING
        VALUE(ro_message_target) TYPE REF TO if_sadl_gw_dpc_message_target
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_succ_function_msg_target
      IMPORTING
        !io_response             TYPE REF TO /iwbep/if_v4_resp_adv_func
        !is_function_metadata    TYPE ty_operation_info
        !iv_messages_requested   TYPE abap_bool
      RETURNING
        VALUE(ro_message_target) TYPE REF TO if_sadl_gw_dpc_message_target
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_failed_action_msg_target
      IMPORTING
        !io_response             TYPE REF TO /iwbep/if_v4_resp_adv_action
        !is_action_metadata      TYPE ty_operation_info
        !iv_entity_name          TYPE string
      RETURNING
        VALUE(ro_message_target) TYPE REF TO if_sadl_gw_dpc_message_target
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_failed_func_msg_target
      IMPORTING
        !io_response             TYPE REF TO /iwbep/if_v4_resp_adv_func
        !is_function_metadata    TYPE ty_operation_info
        !iv_entity_name          TYPE string
      RETURNING
        VALUE(ro_message_target) TYPE REF TO if_sadl_gw_dpc_message_target
      RAISING
        /iwbep/cx_gateway .
    METHODS _check_sticky_actions_in_batch
      IMPORTING
        !io_batch_request TYPE REF TO /iwbep/if_v4_requ_btc_proc
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_message_target
      IMPORTING
        !io_sadl_entity_api   TYPE REF TO if_sadl_entity_api
        !it_touched_instances TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances
        !is_message           TYPE if_sadl_message_handler=>ty_message
      EXPORTING
        !ev_touched_key_tabix TYPE i
        !et_targets           TYPE /iwbep/cx_gateway=>ty_t_message_target
        !ev_content_id        TYPE string
      RAISING
        cx_sadl_contract_violation .
    METHODS _get_touched_inst_of_deep_cr
      IMPORTING
        !it_deep_create_changeset TYPE if_sadl_gw_v4_generic_dpc=>tt_create
        !io_response              TYPE REF TO /iwbep/if_v4_resp_adv_create
      CHANGING
        !ct_touched_instances     TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances
      RAISING
        /iwbep/cx_gateway .
    METHODS _create_key_structure_ref
      IMPORTING
        !iv_entity_name TYPE string
      RETURNING
        VALUE(rr_key)   TYPE REF TO data
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_touched_instances
      IMPORTING
        !is_change_set              TYPE cl_sadl_gw_v4_dpc_adapter=>ty_change_set_data
        !io_request                 TYPE REF TO /iwbep/if_v4_requ_btc_proc_cs
        !it_action_metadata         TYPE cl_sadl_gw_v4_dpc_adapter=>tt_operation_info
      EXPORTING
        !et_instance_operation      TYPE tt_instance_operation
      RETURNING
        VALUE(rt_touched_instances) TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances
      RAISING
        /iwbep/cx_gateway .
    METHODS map_message_to_gw_message
      IMPORTING
        !is_msg          TYPE if_sadl_message_handler=>ty_message
      RETURNING
        VALUE(rs_gw_msg) TYPE /iwbep/if_v4_runtime_types=>ty_s_message .
    METHODS _remove_filter_elems_aggr_away
      IMPORTING
        !it_apply_result_elements TYPE if_sadl_query_engine_types=>tt_requested_elements
      CHANGING
        !condition                TYPE if_sadl_public_types=>tt_complex_condition
      RAISING
        cx_sadl_gw_v4_not_implemented .
    METHODS _replace_aggregated_away_elem
      IMPORTING
        !analyzer TYPE REF TO cl_sadl_condition_analyzer
        !index    TYPE syst_tabix
      CHANGING
        !replace  TYPE cl_sadl_condition_analyzer=>tt_token_replace .
    METHODS _evaluate_idp_in_sticky_sess
      IMPORTING
        !iv_idp_flag TYPE abap_bool
      RAISING
        /iwbep/cx_gateway .
    METHODS _get_orderby_elements
      IMPORTING
        !it_orderby               TYPE abap_sortorder_tab
        !it_apply_result_elements TYPE if_sadl_query_engine_types=>tt_requested_elements
      RETURNING
        VALUE(rt_sort_elements)   TYPE if_sadl_query_engine_types=>tt_sort_elements .
    METHODS _is_grouped_by_all_key_elems
      IMPORTING
        !it_apply_result_elements TYPE if_sadl_query_engine_types=>tt_requested_elements
        !is_aggregation           TYPE if_sadl_query_engine_types=>ty_aggregation
        !io_entity_type           TYPE REF TO /iwbep/if_v4_med_entity_type_r
      RETURNING
        VALUE(rv_group_by_keys)   TYPE xsdboolean
      RAISING
        /iwbep/cx_v4_med .
    METHODS _get_http_status_for_failure
      IMPORTING
        !iv_failure_reason         TYPE if_sadl_changeset=>ty_failure_reason
      RETURNING
        VALUE(rv_http_status_code) TYPE /iwbep/cx_gateway=>ty_http_status_code .
    METHODS process_preconditions
      IMPORTING
        !todo_flag                  TYPE abap_bool
        !gateway_conditions         TYPE /iwbep/if_v4_runtime_types=>ty_s_write_conditions
      EXPORTING
        !sadl_instance_precondition TYPE if_sadl_changeset=>ty_precondition_on_instance
      CHANGING
        !done_flag                  TYPE abap_bool .
    METHODS _get_value_controlled_elem
      IMPORTING
        !is_deep_data_description   TYPE cl_sadl_gw_v4_dpc_adapter=>ty_deep_data_description
        !is_node_busi_data          TYPE data
      RETURNING
        VALUE(rt_provided_elements) TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        cx_sadl_contract_violation .
*    METHODS _check_and_add_null_value_ind IMPORTING is_property_path TYPE /iwbep/if_v4_runtime_types=>ty_s_property_path_w_obj-path
*                                                    ir_entity_load   TYPE REF TO if_sadl_load=>ty_entity_load
*                                          CHANGING  ct_indicators    TYPE stringtab.
    METHODS _refuse_get_4_param_entity
      IMPORTING
        !iv_entity_name TYPE string .
    METHODS _get_entity_load_if_vcs_used
      IMPORTING
        !iv_entity_name       TYPE string
      RETURNING
        VALUE(rr_entity_load) TYPE REF TO if_sadl_load=>ty_entity_load
      RAISING
        cx_sadl_contract_violation .
    METHODS _sticky_call_badi_for_discard .
    "! Recursively extend the structure descriptor for fetching action / function input parameters from GW by suitable VCS substructures
    "!
    "! @parameter io_abap_structdescr_gw | Initial structure descriptor for fetching data from GW
    "! @parameter io_abap_structdescr_param | Structure descriptor for data transfer to action implementation
    "! @parameter it_parameter_name_map | 1st level mapping for GW name vs. SADL name (= ABAP name = action implementation name)
    "! @parameter ro_abap_structdescr_gw | Extended structure descriptor for fetching data from GW
    METHODS _ext_pa_structdescr_w_vcs_deep
      IMPORTING
        !io_abap_structdescr_gw       TYPE REF TO cl_abap_structdescr
        !io_abap_structdescr_param    TYPE REF TO cl_abap_structdescr
        !it_parameter_name_map        TYPE tt_parameter_name_mapping OPTIONAL
      RETURNING
        VALUE(ro_abap_structdescr_gw) TYPE REF TO cl_abap_structdescr .
    "! Recursively map VCS substructure to %CONTROL substructure.
    "! Check for all levels that all mandatory parameters are provided
    "!
    "! @parameter is_source | Structure filled with data fetched from GW containing VCS substructures
    "! @parameter it_parameter_name_map | 1st level mapping for GW name vs. SADL name (= ABAP name = action implementation name)
    "! @parameter iv_action_import_ddic | DDIC name of action import structure (i.e. w/o '\BDEF=') or a substructure thereof
    "! @parameter iv_entity_name | Entity name
    "! @parameter iv_sadl_action_name | SADL / ABAP name of the action
    "! @parameter cs_target | Structure containing %CONTROL substructures, to be transfered to the action implementation
    METHODS _map_check_vcs_to_control_deep
      IMPORTING
        !is_source             TYPE data
        !it_parameter_name_map TYPE tt_parameter_name_mapping OPTIONAL
        !iv_action_import_ddic TYPE abp_entity_name
        !iv_entity_name        TYPE string
        !iv_sadl_action_name   TYPE string
      CHANGING
        !cs_target             TYPE data .
    METHODS _clear_vcs
      CHANGING
        !cs_data TYPE data .
ENDCLASS.



CLASS CL_SADL_GW_V4_DPC_ADAPTER IMPLEMENTATION.


  METHOD _get_key_elements.
    mo_model_access->get_model( EXPORTING is_service_key = ms_service_key IMPORTING eo_model = DATA(lo_model) ).
    lo_model->get_entity_type( iv_entity_type )->get_key_property_names( IMPORTING et_internal_name = DATA(lt_key_property) ).
    LOOP AT lt_key_property INTO DATA(lv_property).
      INSERT CONV #( lv_property ) INTO TABLE rt_key_element.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_message_target.
    DATA lo_message_target TYPE REF TO if_sadl_gw_dpc_message_target.
    CLEAR: ev_touched_key_tabix, et_targets, ev_content_id.

    " implemented like V2: CL_SADL_GW_DPC_MESSAGES->ADD_MESSAGES_TO_EXCEPTION
    cl_sadl_gw_dpc_msg_loc_chooser=>pick_touched_key_and_msg_loc( EXPORTING it_touched_instances = it_touched_instances
                                                                            it_message_locations = is_message-locations
                                                                  IMPORTING et_sadl_elements     = DATA(lt_sadl_elements)
                                                                            et_sadl_associations = DATA(lt_sadl_associations)
                                                                            et_path              = DATA(lt_location_path)
                                                                            ev_touched_key_tabix = ev_touched_key_tabix
                                                                            ev_content_id        = ev_content_id
                                                                            eo_message_target    = lo_message_target ).
    CHECK lt_location_path IS NOT INITIAL OR ev_touched_key_tabix IS NOT INITIAL. " path must exist or can be created

    IF lo_message_target IS BOUND.
      et_targets = lo_message_target->calculate( io_sadl_api      = io_sadl_entity_api
                                                 it_location_path = lt_location_path
                                                 it_elements      = lt_sadl_elements
                                                 it_associations  = lt_sadl_associations ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_model.
    mo_model_access->get_model( EXPORTING is_service_key = is_service_key IMPORTING eo_model = ro_model ).
  ENDMETHOD.


  METHOD _get_navigation_details.
    CLEAR: et_navigation_steps, ev_entity_name, ev_entity_type, er_key, es_service_key, eo_action_function_nav_node.

    es_service_key = ms_service_key.

    DATA(lo_navi_node) = io_navi_node.
    WHILE lo_navi_node IS BOUND.

      lo_navi_node->get_type_kind( IMPORTING ev_type_kind = DATA(lv_type_kind) ).
      CASE lv_type_kind.
        WHEN /iwbep/if_v4_med_element=>kind_entity_type.   " entity / navigation node
          IF lo_navi_node <> io_navi_node. " second or subsequent node => append navigation step from previous node
            lo_navi_node->get_nav_property_to_this_node( IMPORTING ev_nav_property_name = DATA(lv_nav_property) ).
            APPEND VALUE #( source_entity_name = ev_entity_name
                            source_key         = er_key
                            nav_prop           = lv_nav_property ) TO et_navigation_steps.
            _get_model( es_service_key )->get_entity_type( ev_entity_type )->get_navigation_property( lv_nav_property
                )->get_target_service_key( IMPORTING es_service_key = es_service_key ). " target service key
          ENDIF.

          " get (target) entity and key of current node
          lo_navi_node->get_entity_type_name( IMPORTING ev_entity_type_name = ev_entity_type ).
          lo_navi_node->get_entity_set_name( IMPORTING ev_entity_set_name = DATA(lv_entity_set_name) ).
          IF lv_entity_set_name IS INITIAL. " containment: if there is no entity set, take entity type (same name)
            ev_entity_name = _convert_entity_type_i2e( iv_internal_name = ev_entity_type is_service_key = es_service_key ).
          ELSE.
            ev_entity_name = _convert_entity_set_i2e( iv_internal_name = lv_entity_set_name is_service_key = es_service_key ).
          ENDIF.
          er_key = _get_navigation_source_key_ref( io_navigation_node = lo_navi_node iv_entity_name = ev_entity_name ).

        WHEN   /iwbep/if_v4_med_element=>kind_action     " action node
            OR /iwbep/if_v4_med_element=>kind_function.  " function node
          eo_action_function_nav_node = lo_navi_node.
          cl_sadl_assert=>not_bound( lo_navi_node->get_next_navigation_node( ) ). " last node

        WHEN OTHERS.  " not supported
          cl_sadl_assert=>fail( ).
      ENDCASE.

      lo_navi_node = lo_navi_node->get_next_navigation_node( ).
    ENDWHILE.

  ENDMETHOD.


  METHOD _get_navigation_source_key_ref.

    CHECK io_navigation_node->has_key_data( ) = abap_true.
    TRY.
        rr_source_key = mo_dpc->create_key_structure_ref( iv_entity_name ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.
    ASSIGN rr_source_key->* TO FIELD-SYMBOL(<ls_key>).
    io_navigation_node->get_key_data( IMPORTING es_key_data = <ls_key> ).

  ENDMETHOD.


  METHOD _get_orderby_elements.
*    IF it_apply_result_elements IS INITIAL.
*      rt_sort_elements = CORRESPONDING #( it_orderby  MAPPING element_name = name  descending = descending ).
*    ELSE.
*      LOOP AT it_orderby ASSIGNING FIELD-SYMBOL(<s_orderby>).
*        IF line_exists( it_apply_result_elements[ table_line = <s_orderby>-name ] ).
*          APPEND VALUE #( element_name = <s_orderby>-name
*                          descending   = <s_orderby>-descending ) TO rt_sort_elements.
*        ENDIF.
*      ENDLOOP.
*    ENDIF.

    LOOP AT it_orderby ASSIGNING FIELD-SYMBOL(<s_orderby>).
      IF it_apply_result_elements IS INITIAL OR line_exists( it_apply_result_elements[ table_line = <s_orderby>-name ] ).
        DATA(lv_name) = <s_orderby>-name.
        REPLACE ALL OCCURRENCES OF '-' IN lv_name WITH '.'.
        APPEND VALUE #( element_name = lv_name
                        descending   = <s_orderby>-descending ) TO rt_sort_elements.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_provided_elements.
    ASSERT ( from_create_request IS     SUPPLIED AND from_update_request IS NOT SUPPLIED AND from_deep_data_desc_node IS NOT SUPPLIED )
        OR ( from_create_request IS NOT SUPPLIED AND from_update_request IS     SUPPLIED AND from_deep_data_desc_node IS NOT SUPPLIED
        OR ( from_create_request IS NOT SUPPLIED AND from_update_request IS NOT SUPPLIED AND from_deep_data_desc_node IS     SUPPLIED ) ).

    IF from_create_request IS SUPPLIED.
      from_create_request->get_provided_properties( IMPORTING et_provided_prop_path_w_obj = DATA(lt_prop_path_w_obj) ).
    ELSEIF from_update_request IS SUPPLIED.
      from_update_request->get_provided_properties( IMPORTING et_provided_prop_path_w_obj = lt_prop_path_w_obj ).
    ELSEIF from_deep_data_desc_node IS SUPPLIED.
      from_deep_data_desc_node->get_provided_properties( IMPORTING et_provided_prop_path_w_obj = lt_prop_path_w_obj ).
    ENDIF.
    IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ) = abap_false.
      DATA(lr_entity_load) = _get_entity_load_if_vcs_used( iv_entity_name ).
    ENDIF.
    DATA lt_indicators TYPE stringtab.
    LOOP AT lt_prop_path_w_obj ASSIGNING FIELD-SYMBOL(<s_prop_path_w_obj>).
      IF ms_service_features-use_vc_to_flag_omitted_data = abap_true.
        IF <s_prop_path_w_obj>-instance->is_value_control( ).
          IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ) = abap_false.
            cl_sadl_gw_v4_null_val_ind_map=>append_nvi_to_indicator_list( EXPORTING iv_value_control_property = <s_prop_path_w_obj>-path
                                                                                    ir_entity_load            = lr_entity_load
                                                                          CHANGING  ct_indicators             = lt_indicators ).
          ENDIF.
          CONTINUE.
        ELSEIF <s_prop_path_w_obj>-instance->get_kind( ) = /iwbep/if_v4_med_element=>kind_complex_property AND
           CAST /iwbep/if_v4_med_cplx_prop_r( <s_prop_path_w_obj>-instance )->is_vcs_container( ).
          IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ) = abap_false.
            cl_sadl_gw_v4_null_val_ind_map=>append_nvi_to_indicator_list( EXPORTING ir_entity_load = lr_entity_load
                                                                          CHANGING  ct_indicators  = lt_indicators ).
          ENDIF.
          CONTINUE.
        ENDIF.
      ENDIF.
      IF cl_sadl_naming_validator=>is_cds_name( <s_prop_path_w_obj>-path ).
        INSERT <s_prop_path_w_obj>-path INTO TABLE provided_elements.
      ENDIF.
    ENDLOOP.

    LOOP AT lt_indicators ASSIGNING FIELD-SYMBOL(<s_null_ind_name>).
      IF NOT line_exists( provided_elements[ table_line = <s_null_ind_name> ] ).
        INSERT <s_null_ind_name> INTO TABLE provided_elements.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD _get_requested_elements.
    LOOP AT it_selected_property INTO DATA(lv_selected_property) ##INTO_OK.
      APPEND lv_selected_property TO rt_requested_element.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_requested_elements2.
    DATA(lv_field_control_pattern)     = if_sadl_special_struct_names=>co_internal_names-field_control-complex_property_name     && '-*'.
    DATA(lv_entity_control_pattern)    = if_sadl_special_struct_names=>co_internal_names-entity_control-complex_property_name    && '-*'.
    DATA(lv_operation_control_pattern) = if_sadl_special_struct_names=>co_internal_names-operation_control-complex_property_name && '-*'.
    DATA(lv_cba_control_pattern)       = if_sadl_special_struct_names=>co_internal_names-create_by_association_control-complex_property_name && '-*'.

    LOOP AT it_selected_property ASSIGNING FIELD-SYMBOL(<v_sel_prop>).
      IF <v_sel_prop> <> if_sadl_special_field_names=>sap__messages.
        IF    <v_sel_prop> NP lv_field_control_pattern
          AND <v_sel_prop> NP lv_entity_control_pattern
          AND <v_sel_prop> NP lv_operation_control_pattern
          AND <v_sel_prop> NP lv_cba_control_pattern
          AND NOT cl_sadl_naming_validator=>is_cds_name( <v_sel_prop> ).
          RAISE EXCEPTION TYPE cx_sadl_gw_v4_not_implemented
            EXPORTING
              name   = <v_sel_prop>
              textid = cx_sadl_gw_v4_not_implemented=>request_complex_elem_not_impl.
        ENDIF.
      ENDIF.
      INSERT <v_sel_prop> INTO TABLE rt_requested_elements.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_req_detail_create_entity.
    CLEAR: er_busi_data, ev_entity_name, et_provided_elements, ev_fill_data, et_requested_elements,
      et_navigation_steps, et_deep_create, es_done_list, ev_strict_handling_requested.

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    " Check for idempotency in Sticky session case.
    _evaluate_idp_in_sticky_sess( iv_idp_flag = ls_todo_list-process-idempotency ).

    " refer to https://support.wdf.sap.corp/sap/support/message/2180352716: also with child data only and without parent data:
    " all TRUE: BUSI_DATA, DEEP_BUSI_DATA, PARTIAL DATA
    IF ls_todo_list-process-deep_busi_data = abap_true.
      ASSERT ls_todo_list-process-busi_data = abap_true.
      IF ls_todo_list-process-heterogeneous_busi_data = abap_true.
        IF ms_hub_features-vcs_value_control = abap_true
        AND ms_hub_features-omit_as_default_for_vc = abap_true.
          es_done_list-heterogeneous_busi_data = abap_true.
        ELSE.
          RAISE EXCEPTION TYPE cx_sadl_gw_v4_not_implemented
            EXPORTING
              textid = cx_sadl_gw_v4_not_implemented=>heterogeneous_deep_create.
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_todo_list-process-navigation = abap_true.
      _get_navigation_details( EXPORTING io_navi_node        = io_request->get_navigation_path( )
                               IMPORTING et_navigation_steps = et_navigation_steps
                                         ev_entity_name      = ev_entity_name
                                         ev_entity_type      = DATA(lv_entity_type_name) ).
      DATA(ls_last_navi_step) = et_navigation_steps[ lines( et_navigation_steps ) ].
      es_done_list-navigation = abap_true.
    ELSE.
      io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_internal_entity_set_name) ).
      io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
      ev_entity_name = _convert_entity_set_i2e( lv_internal_entity_set_name ).
    ENDIF.

    er_busi_data = mo_dpc->create_data_structure_ref( ev_entity_name ).

    IF ls_todo_list-process-deep_busi_data = abap_true.
      DATA(lo_root_rtti) = cl_abap_typedescr=>describe_by_data_ref( er_busi_data ).
      io_request->get_data_description_tree_list( IMPORTING et_data_desc_root_node = DATA(lt_data_desc_root_node) ).

      _get_deep_data_description( EXPORTING it_data_desc_node        = lt_data_desc_root_node
                                            io_parent_descr          = CAST #( lo_root_rtti )
                                  IMPORTING eo_deep_data_rtti        = DATA(lo_deep_create_rtti)
                                            et_deep_data_description = DATA(lt_deep_data_description) ).

      ASSERT ls_todo_list-process-busi_data = abap_true.

      CREATE DATA er_busi_data TYPE HANDLE lo_deep_create_rtti.
    ENDIF.

    IF ls_todo_list-process-busi_data = abap_true.
      ASSIGN er_busi_data->* TO FIELD-SYMBOL(<s_busi_data>).
      io_request->get_busi_data( IMPORTING es_busi_data = <s_busi_data> ).
      es_done_list-busi_data = abap_true.
    ENDIF.

    IF ls_todo_list-return-busi_data = abap_true.
      ev_fill_data = abap_true.
      IF ls_todo_list-process-select = abap_true.
        DATA(lt_selected_property) = _get_selected_properties( from_create_request = io_request
                                                               iv_entity_name      = ev_entity_name ).
        et_requested_elements = _get_requested_elements2( it_selected_property = lt_selected_property ).
        es_done_list-select = abap_true.
      ENDIF.
    ENDIF.

    IF ls_todo_list-process-deep_busi_data = abap_true.
      ASSIGN COMPONENT co_include_name OF STRUCTURE <s_busi_data> TO FIELD-SYMBOL(<s_root_busi_data>).
      ASSERT sy-subrc = 0.

      IF ls_todo_list-process-partial_busi_data = abap_true.
        DATA(lt_provided_elements) = _get_provided_elements( from_create_request = io_request
                                                             iv_entity_name      = ev_entity_name ).
      ELSE.
        lt_provided_elements = _get_all_elements( lv_entity_type_name ).
      ENDIF.
      "map and append to lt_provided_elements the null value indicator for root
      IF ms_service_features-use_vc_to_flag_omitted_data = abap_true AND mo_dpc->has_value_control( ev_entity_name ).
        IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
          NEW cl_sadl_gw_v4_stream_prop_map( mo_mdp )->handle_stream_prop_map_inbound( EXPORTING iv_entity_name       = ev_entity_name
                                                                                       CHANGING  cs_busi_data         = <s_root_busi_data>
                                                                                                 ct_provided_elements = lt_provided_elements ).
        ELSE.
          NEW cl_sadl_gw_v4_null_val_ind_map( mo_mdp )->map_inbound_vcp_to_nvi( EXPORTING iv_entity_name       = ev_entity_name
                                                                                          it_provided_elements = lt_provided_elements
                                                                                CHANGING  cs_busi_data         = <s_root_busi_data> ).
        ENDIF.
        _clear_vcs( CHANGING cs_data = <s_root_busi_data> ).
      ENDIF.
      APPEND VALUE #( entity_id          = ev_entity_name
                      rs_entity_data     = REF #( <s_root_busi_data> )
                      provided_elements  = lt_provided_elements
                      fill_data          = abap_true
                      requested_elements = et_requested_elements
                      source             = VALUE #( association_name = ls_last_navi_step-nav_prop
                                                    entity_id        = ls_last_navi_step-source_entity_name
                                                    rs_key_values    = ls_last_navi_step-source_key ) )
          TO et_deep_create.
      _resolve_deep_create( EXPORTING it_deep_data_description = lt_deep_data_description
                                      ir_busi_data             = REF #( <s_busi_data> )
                                      iv_parent_entity_name    = ev_entity_name
                            CHANGING  ct_deep_create           = et_deep_create ).
      es_done_list-deep_busi_data = abap_true.
    ELSE.
      IF ls_todo_list-process-busi_data = abap_true.
        IF ls_todo_list-process-partial_busi_data = abap_true.
          et_provided_elements = _get_provided_elements( from_create_request = io_request
                                                         iv_entity_name      = ev_entity_name ).
          _get_key_elements( iv_entity_type = lv_entity_type_name ).
        ELSE.
          et_provided_elements = _get_all_elements( lv_entity_type_name ).
        ENDIF.
        "map and append to lt_provided_elements the null value indicator for root
        IF ms_service_features-use_vc_to_flag_omitted_data = abap_true AND mo_dpc->has_value_control( ev_entity_name ).
          IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
            NEW cl_sadl_gw_v4_stream_prop_map( mo_mdp )->handle_stream_prop_map_inbound( EXPORTING iv_entity_name       = ev_entity_name
                                                                                         CHANGING  cs_busi_data         = <s_busi_data>
                                                                                                   ct_provided_elements = et_provided_elements ).
          ELSE.
            NEW cl_sadl_gw_v4_null_val_ind_map( mo_mdp )->map_inbound_vcp_to_nvi( EXPORTING iv_entity_name       = ev_entity_name
                                                                                            it_provided_elements = et_provided_elements
                                                                                  CHANGING  cs_busi_data         = <s_busi_data> ).
          ENDIF.
          _clear_vcs( CHANGING cs_data = <s_busi_data> ).
        ENDIF.
      ENDIF.
    ENDIF.

    IF ls_todo_list-process-partial_busi_data = abap_true.
      es_done_list-partial_busi_data = abap_true.
    ENDIF.

    IF ls_todo_list-process-expand = abap_true.
      " For a deep create the expand flag is usually set too by GW.
      " Other kinds of expand after a create are currently not supported.
      IF ls_todo_list-process-deep_busi_data = abap_false.
        RAISE EXCEPTION TYPE cx_sadl_gw_v4_not_implemented
          EXPORTING
            textid = cx_sadl_gw_v4_not_implemented=>post_with_expand.
      ELSE.
        es_done_list-expand = abap_true.
      ENDIF.
    ENDIF.

    ev_strict_handling_requested = ls_todo_list-process-strict.
    es_done_list-strict = ls_todo_list-process-strict.
  ENDMETHOD.


  METHOD _get_req_detail_delete_entity.
    CLEAR: ev_entity_name, er_key, es_done_list, ev_strict_handling_requested.

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_internal_entity_set_name) ).
    ev_entity_name = _convert_entity_set_i2e( lv_internal_entity_set_name ).

    io_request->get_conditions( IMPORTING es_conditions = DATA(ls_conditions) ).
    process_preconditions( EXPORTING todo_flag                  = ls_todo_list-process-if_match_etag
                                     gateway_conditions         = ls_conditions
                           IMPORTING sadl_instance_precondition = es_precondition
                           CHANGING  done_flag                  = es_done_list-if_match_etag ).

    er_key = mo_dpc->create_key_structure_ref( ev_entity_name ).

    IF ls_todo_list-process-key_data = abap_true.
      ASSIGN er_key->* TO FIELD-SYMBOL(<s_key_data>).
      io_request->get_key_data( IMPORTING es_key_data = <s_key_data> ).
      es_done_list-key_data = abap_true.
    ENDIF.

    ev_strict_handling_requested = ls_todo_list-process-strict.
    es_done_list-strict = ls_todo_list-process-strict.
  ENDMETHOD.


  METHOD _get_req_detail_execute_action.
    CLEAR: es_action_metadata, ev_entity_name, er_key, er_params, es_done_list, et_requested_element, ev_sticky_sess_effect,
           et_navigation_steps, ev_strict_handling_requested,
           et_expand_step.
    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    IF ls_todo_list-process-expand = abap_true.
      io_request->get_expand_tree_list( IMPORTING et_expand_root_node = DATA(lt_expand_node) ).
      _get_expand_steps( EXPORTING it_expand_node = lt_expand_node
                         CHANGING  ct_expand_step = et_expand_step ).
      es_done_list-expand = abap_true.
    ENDIF.

    " Supported actions come always with a navigation path, even if there is no real navigation
    DATA(lo_source_navigation_node) = io_request->get_navigation_path( ).
    ASSERT lo_source_navigation_node IS BOUND.
    _get_navigation_details( EXPORTING io_navi_node                = lo_source_navigation_node
                             IMPORTING et_navigation_steps         = et_navigation_steps
                                       ev_entity_name              = ev_entity_name
                                       er_key                      = er_key
                                       eo_action_function_nav_node = DATA(lo_action_nav_node) ).
    ASSERT lo_action_nav_node IS BOUND.

    IF ls_todo_list-process-navigation = abap_true.
      es_done_list-navigation = abap_true.
    ENDIF.

    IF ls_todo_list-process-action_import = abap_true.
      es_done_list-action_import = abap_true.
    ENDIF.

    io_request->get_conditions( IMPORTING es_conditions = DATA(ls_conditions) ).
    process_preconditions( EXPORTING todo_flag                  = ls_todo_list-process-if_match_etag
                                     gateway_conditions         = ls_conditions
                           IMPORTING sadl_instance_precondition = es_precondition
                           CHANGING  done_flag                  = es_done_list-if_match_etag ).

    _get_action_info( EXPORTING io_action_nav_node = lo_action_nav_node
                                is_service_key     = ms_service_key
                      IMPORTING es_action_info     = es_action_metadata
                                eo_action          = DATA(lo_action) ).
    IF es_done_list-expand = abap_true AND es_action_metadata-return_entity_name IS INITIAL.
      RAISE EXCEPTION TYPE cx_sadl_gw_v4_not_implemented
        EXPORTING
          textid = cx_sadl_gw_v4_not_implemented=>action_w_exp_only_4_ret_entity
          name   = es_action_metadata-name
          entity = ev_entity_name.
    ENDIF.

    IF ls_todo_list-process-parameter_data = abap_true.
      _get_action_parameters( EXPORTING iv_entity_name      = ev_entity_name
                                        iv_sadl_action_name = es_action_metadata-name
                                        io_action           = lo_action
                                        io_navigation_node  = lo_action_nav_node
                              IMPORTING er_params           = er_params
                                        ev_params_done      = es_done_list-parameter_data ).
    ENDIF.

    IF ls_todo_list-process-select = abap_true AND ls_todo_list-return-busi_data = abap_true. " GW only provides selected properties, if business data should be returned
      DATA(lt_selected_property) = _get_selected_properties( from_action_request = io_request
                                                             iv_entity_name      = ev_entity_name ).
      et_requested_element = _get_requested_elements2( lt_selected_property ).
      es_done_list-select = abap_true.
    ENDIF.

    ev_sticky_sess_effect = _get_sticky_session_effect( iv_action_name = es_action_metadata-name
                                                        iv_entity_name = ev_entity_name ).

    ev_strict_handling_requested = ls_todo_list-process-strict.
    es_done_list-strict          = ls_todo_list-process-strict.

    IF cl_sadl_dev_prototypes=>v4_actfct_parameter_ctrl_flds( ).
      es_done_list-partial_busi_data = ls_todo_list-process-partial_busi_data.
    ENDIF.
  ENDMETHOD.


  METHOD _get_req_detail_exec_function.
    CLEAR:
      es_function_metadata,
      ev_entity_name,
      er_key,
      et_navigation_steps,
      er_params,
      es_done_list,
      et_requested_element.

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    IF ls_todo_list-process-function_import = abap_true.
      RAISE EXCEPTION NEW lcx_function_import_not_supp( ).
    ENDIF.

    " Supported functions come always with a navigation path, even if there is no real navigation
    DATA(lo_source_navigation_node) = io_request->get_navigation_path( ).
    cl_sadl_assert=>bound( lo_source_navigation_node ).
    _get_navigation_details( EXPORTING io_navi_node                = lo_source_navigation_node
                             IMPORTING et_navigation_steps         = et_navigation_steps
                                       ev_entity_name              = ev_entity_name
                                       er_key                      = er_key
                                       eo_action_function_nav_node = DATA(lo_function_nav_node) ).
    cl_sadl_assert=>bound( lo_function_nav_node ).

    _get_function_info( EXPORTING io_function_nav_node = lo_function_nav_node
*                                   io_request           = io_request
                                  is_service_key       = ms_service_key
                        IMPORTING es_function_info     = es_function_metadata
                                  eo_function          = DATA(lo_function) ).

    IF ls_todo_list-process-parameter_data = abap_true.
      _get_function_parameters( EXPORTING iv_entity_name        = ev_entity_name
                                          iv_sadl_function_name = es_function_metadata-name
                                          io_function           = lo_function
*                                           io_function_request   = io_request
                                          io_navigation_node    = lo_function_nav_node
                                IMPORTING er_params             = er_params
                                          ev_params_done        = es_done_list-parameter_data ).
    ENDIF.

    es_done_list-navigation = ls_todo_list-process-navigation.

    IF ls_todo_list-process-select = abap_true AND ls_todo_list-return-busi_data = abap_true. " GW only provides selected properties, if business data should be returned
*      IF cl_sadl_dev_prototypes=>v4_compl_coll_add_val_ctrl_str( ).
      DATA(lt_selected_property) = _get_selected_properties( from_function_request = io_request
                                                             iv_entity_name        = ev_entity_name ).
*      ELSE.
*        io_request->get_selected_properties( IMPORTING et_selected_property = lt_selected_property ).
*      ENDIF.
      et_requested_element = _get_requested_elements2( lt_selected_property ).
      es_done_list-select = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD  _get_req_detail_read_elist.
    CLEAR: et_navigation_step, et_dynamic_property, et_expand_step, et_sort_element,
           eo_aggregation_filter_provider, eo_filter_provider, ev_entity_name,
           es_aggregation, es_done_list, es_paging, es_requested, es_text_search.

    cl_sadl_run_time_util=>start( cl_sadl_run_time_util=>cs_component-ext ).

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    IF ls_todo_list-process-top = abap_true.
      io_request->get_top( IMPORTING ev_top = es_paging-top ).
      es_done_list-top = abap_true.
    ELSE.
      es_paging-top = -1.
    ENDIF.
    IF ls_todo_list-process-skip = abap_true.
      io_request->get_skip( IMPORTING ev_skip = es_paging-skip ).
      es_done_list-skip = abap_true.
    ELSE.
      es_paging-skip = 0.
    ENDIF.

    IF ls_todo_list-process-navigation = abap_true.
      DATA(lo_navi_node) = io_request->get_navigation_path( ).
      cl_sadl_run_time_util=>stop( cl_sadl_run_time_util=>cs_component-ext ). " the following time is mainly consumed by SADL and not by GW
      _get_navigation_details( EXPORTING io_navi_node        = lo_navi_node
                               IMPORTING et_navigation_steps = et_navigation_step
                                         ev_entity_name      = ev_entity_name
                                         ev_entity_type      = DATA(lv_entity_type)
                                         es_service_key      = DATA(ls_target_service_key) ).
      es_done_list-navigation = abap_true.
      cl_sadl_run_time_util=>start( cl_sadl_run_time_util=>cs_component-ext ).
    ELSE.
      io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_entity_set) ).
      ev_entity_name = _convert_entity_set_i2e( lv_entity_set ).
      ls_target_service_key = ms_service_key.
      io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type ).
    ENDIF.

    _refuse_get_4_param_entity( ev_entity_name ). " TGPMBSA-6222 -before prototype v4_appl_def_null_val_ind_to_vc the check is done in DPC

    IF ls_todo_list-process-expand = abap_true.
      io_request->get_expand_tree_list( IMPORTING et_expand_root_node = DATA(lt_expand_node) ).
      _get_expand_steps( EXPORTING it_expand_node = lt_expand_node
                         CHANGING  ct_expand_step = et_expand_step ).
      es_done_list-expand = abap_true.
    ENDIF.

    IF ls_todo_list-process-search = abap_true.
      es_text_search = _get_text_search( io_request->get_search_tree( ) ).
      es_done_list-search = abap_true.
    ENDIF.

    DATA(lo_target_entity_type) = _get_model( ls_target_service_key )->get_entity_type( lv_entity_type ).
    _get_filter_apply_details( EXPORTING iv_entity_name                 = ev_entity_name
                                         io_request                     = io_request
                                         is_todo_list                   = ls_todo_list
                                         io_entity_type                 = lo_target_entity_type
                               IMPORTING es_aggregation                 = es_aggregation
                                         eo_aggregation_filter_provider = eo_aggregation_filter_provider
                                         eo_filter_provider             = eo_filter_provider
                                         et_dynamic_property            = et_dynamic_property
                                         et_apply_result_elements       = DATA(lt_apply_result_elements)
                               CHANGING  ct_requested                   = es_requested-elements
                                         cs_done_list                   = es_done_list ).

    IF ls_todo_list-process-select = abap_true.
      IF es_requested-elements IS INITIAL. " (OPTIMIZATION: if the request contains $apply, $select may be ignored, because $apply defines result properties)
        DATA(lt_selected_property) = _get_selected_properties( from_elist_request = io_request
                                                               iv_entity_name     = ev_entity_name ).
        es_requested-elements = _get_requested_elements( lt_selected_property ).
      ENDIF.
      es_done_list-select = abap_true.
    ENDIF.
    IF es_requested-elements IS INITIAL AND cl_sadl_dev_prototypes=>v4_list_of_selected_properties( ). " several SADL tests set process-select = abap_true without providing selected properties
      es_requested-elements = _get_requested_elems_per_deflt( iv_entity_type = lv_entity_type
                                                              is_service_key = ls_target_service_key ).
    ENDIF.

    IF ls_todo_list-process-orderby = abap_true.
      io_request->get_orderby( IMPORTING et_orderby_property = DATA(lt_orderby_property) ).
      et_sort_element = _get_orderby_elements( it_orderby               = lt_orderby_property
                                               it_apply_result_elements = lt_apply_result_elements ).
      es_done_list-orderby = abap_true.
    ENDIF.

    cl_sadl_run_time_util=>stop( cl_sadl_run_time_util=>cs_component-ext ).

    es_requested-fill_number_all_hits = ls_todo_list-return-count.
    es_requested-fill_data = ls_todo_list-return-busi_data.
  ENDMETHOD.


  METHOD _get_req_detail_read_entity.
    CLEAR: ev_entity_name, es_requested, es_done_list,
           er_key, et_navigation_step, et_expand_step.

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

    IF ls_todo_list-process-navigation = abap_true.
      _get_navigation_details(
        EXPORTING
          io_navi_node        = io_request->get_navigation_path( )
        IMPORTING
          et_navigation_steps = et_navigation_step
          ev_entity_name      = ev_entity_name
          ev_entity_type      = DATA(lv_entity_type_name)
          es_service_key      = DATA(ls_service_key)
          er_key              = er_key ).
      es_done_list-navigation = abap_true.
    ELSE.
      io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_entity_set) ).
      ev_entity_name = _convert_entity_set_i2e( lv_entity_set ).
      io_request->get_entity_type( IMPORTING ev_entity_type_name = lv_entity_type_name ).
    ENDIF.

    _refuse_get_4_param_entity( ev_entity_name ). " TGPMBSA-6222 - before prototype v4_appl_def_null_val_ind_to_vc the check is done in DPC

    IF ls_todo_list-process-key_data = abap_true.
      TRY.
          er_key = mo_dpc->create_key_structure_ref( ev_entity_name ).
        CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
          convert_to_gw_exc_or_handle( lx_sadl ).
      ENDTRY.
      ASSIGN er_key->* TO FIELD-SYMBOL(<ls_key>).
      io_request->get_key_data( IMPORTING es_key_data = <ls_key> ).
      es_done_list-key_data = abap_true.
    ENDIF.
*   es_requested-fill_number_all_hits = abap_true. Read_entity does not return number of all hits, because it should return 1 entity
    es_requested-fill_data = ls_todo_list-return-busi_data.
    IF ls_todo_list-process-select = abap_true.
      DATA(lt_selected_property) = _get_selected_properties( from_entity_request = io_request
                                                             iv_entity_name      = ev_entity_name ).
      es_requested-elements = _get_requested_elements( lt_selected_property ).
      es_done_list-select = abap_true.
    ENDIF.
*    ELSEIF es_requested-elements IS INITIAL AND cl_sadl_dev_prototypes=>v4_list_of_selected_properties( ).
    IF es_requested-elements IS INITIAL AND cl_sadl_dev_prototypes=>v4_list_of_selected_properties( ). " several SADL tests set process-select = abap_true without providing selected properties
      es_requested-elements = _get_requested_elems_per_deflt( iv_entity_type = lv_entity_type_name
                                                              is_service_key = ls_service_key ).
    ENDIF.

    IF ls_todo_list-process-expand = abap_true.
      io_request->get_expand_tree_list( IMPORTING et_expand_root_node = DATA(lt_expand_node) ).
      _get_expand_steps( EXPORTING it_expand_node = lt_expand_node
                         CHANGING  ct_expand_step = et_expand_step ).
      es_done_list-expand = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD _get_req_detail_update_entity.
    CLEAR:
      er_data, es_done_list, et_update_element, ev_entity_name,
      ev_fill_data, et_requested_element, ev_strict_handling_requested, et_expand_step.

    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).
    io_request->get_entity_set( IMPORTING ev_entity_set_name = DATA(lv_internal_entity_set_name) ).
    ev_entity_name = _convert_entity_set_i2e( lv_internal_entity_set_name ).
    io_request->get_entity_type( IMPORTING ev_entity_type_name = DATA(lv_entity_type_name) ).

    " Check for idempotency in Sticky session case.
    _evaluate_idp_in_sticky_sess( iv_idp_flag = ls_todo_list-process-idempotency ).

    io_request->get_conditions( IMPORTING es_conditions = DATA(ls_conditions) ).
    process_preconditions( EXPORTING todo_flag                  = ls_todo_list-process-if_match_etag
                                     gateway_conditions         = ls_conditions
                           IMPORTING sadl_instance_precondition = es_precondition
                           CHANGING  done_flag                  = es_done_list-if_match_etag ).

    IF ls_todo_list-process-expand = abap_true.
      io_request->get_expand_tree_list( IMPORTING et_expand_root_node = DATA(lt_expand_node) ).
      _get_expand_steps( EXPORTING it_expand_node = lt_expand_node
                         CHANGING  ct_expand_step = et_expand_step ).
      es_done_list-expand = abap_true.
    ENDIF.

    IF ls_todo_list-process-key_data = abap_true.
      DATA(lr_key) = mo_dpc->create_key_structure_ref( iv_entity_name = ev_entity_name ).
      ASSIGN lr_key->* TO FIELD-SYMBOL(<s_key>).
      io_request->get_key_data( IMPORTING es_key_data = <s_key> ).
      es_done_list-key_data = abap_true.
    ENDIF.

    er_data = mo_dpc->create_data_structure_ref( ev_entity_name ).
    IF et_expand_step IS NOT INITIAL.
      er_data = NEW cl_sadl_gw_v4_dpc_expand_cont( mo_dpc )->extend_container_for_expand( ir_data_container = er_data  it_expand_step = et_expand_step ).
    ENDIF.
    ASSIGN er_data->* TO FIELD-SYMBOL(<s_data>).
    IF ls_todo_list-process-busi_data = abap_true.
      io_request->get_busi_data( IMPORTING es_busi_data = <s_data> ).
      es_done_list-busi_data = abap_true.
    ENDIF.

    IF ls_todo_list-process-patch = abap_true
    AND ls_todo_list-process-partial_busi_data = abap_true.
      et_update_element = _get_provided_elements( from_update_request = io_request
                                                  iv_entity_name      = ev_entity_name ).
    ELSE.
      et_update_element = _get_all_elements( iv_entity_type = lv_entity_type_name  iv_exclude_keys = abap_true ).
    ENDIF.
    "map and append to lt_provided_elements the null value indicator for root
    IF ms_service_features-use_vc_to_flag_omitted_data = abap_true AND mo_dpc->has_value_control( ev_entity_name ).
      IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
        NEW cl_sadl_gw_v4_stream_prop_map( mo_mdp )->handle_stream_prop_map_inbound( EXPORTING iv_entity_name       = ev_entity_name
                                                                                     CHANGING  cs_busi_data         = <s_data>
                                                                                               ct_provided_elements = et_update_element ).
      ELSE.
        NEW cl_sadl_gw_v4_null_val_ind_map( mo_mdp )->map_inbound_vcp_to_nvi( EXPORTING iv_entity_name       = ev_entity_name
                                                                                        it_provided_elements = et_update_element
                                                                              CHANGING  cs_busi_data         = <s_data> ).
      ENDIF.
      _clear_vcs( CHANGING cs_data = <s_data> ).
    ENDIF.
    es_done_list-patch = ls_todo_list-process-patch.
    es_done_list-partial_busi_data = ls_todo_list-process-partial_busi_data.


    IF ls_todo_list-process-key_data = abap_true AND ls_todo_list-process-busi_data = abap_true.
      er_data = _overlay_upd_data_with_key( is_data        = <s_data>
                                            is_key         = <s_key>
                                            iv_entity_type = lv_entity_type_name ).
      es_done_list-key_data = abap_true.
    ENDIF.

    ev_fill_data = ls_todo_list-return-busi_data. " request header: Prefer return=minimal        => false, (this has been changed by Gateway: /IWBEP/CL_OD_PROCESSOR->merge_select_info_minimal)
    "                        return=representation => true

    IF ls_todo_list-process-select = abap_true AND ls_todo_list-return-busi_data = abap_true. " GW only provides selected properties, if business data should be returned
      DATA(lt_selected_property) = _get_selected_properties( from_update_request = io_request
                                                             iv_entity_name      = ev_entity_name ).
      et_requested_element = _get_requested_elements2( it_selected_property = lt_selected_property ).
      es_done_list-select = abap_true.
    ENDIF.

    ev_strict_handling_requested = ls_todo_list-process-strict.
    es_done_list-strict = ls_todo_list-process-strict.

  ENDMETHOD.


  METHOD _get_sticky_session_effect.
    IF ms_sticky_session-allowed = abap_true.
      IF iv_entity_name IS INITIAL AND iv_action_name = if_sadl_entity=>co_action_names_sticky_session-discard.
        rv_session_effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard.
      ELSE.
        DATA(lv_entity_name) = cl_sadl_gw_v4_provider_info=>get_entity_name( iv_entity_name ).
        DATA(lr_entity_load) = mo_mdp->get_entity_load( lv_entity_name ).
        rv_session_effect = lr_entity_load->sadl_entity-actions[ name = iv_action_name ]-sticky_session_effect.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD _get_succ_action_msg_target.
    IF is_action_metadata-return_entity_name IS NOT INITIAL.
      IF is_action_metadata-returns_collection = abap_true
      AND iv_messages_requested = abap_false.
        ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory  = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_action_result(
                                                                                                io_response = io_response )
                                                              io_msg_target_ent_col_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_action_result_coll(
                                                                                                io_response = io_response )
                                                              iv_target_entity_id           = CONV #( is_action_metadata-return_entity_name ) ).
      ELSE.
        ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_action_result(
                                                                                               io_response = io_response )
                                                              iv_target_entity_id          = CONV #( is_action_metadata-return_entity_name ) ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD _get_succ_function_msg_target.
    IF is_function_metadata-return_entity_name IS NOT INITIAL.
      IF is_function_metadata-returns_collection = abap_true
      AND iv_messages_requested = abap_false.
        ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory  = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_function_result(
                                                                                                io_response = io_response )
                                                              io_msg_target_ent_col_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_funct_result_coll(
                                                                                                io_response = io_response )
                                                              iv_target_entity_id           = CONV #( is_function_metadata-return_entity_name ) ).
      ELSE.
        ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_function_result(
                                                                                               io_response = io_response )
                                                              iv_target_entity_id          = CONV #( is_function_metadata-return_entity_name ) ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD _get_text_search.
    CASE io_search_node->get_kind( ).
      WHEN io_search_node->gcs_node_kinds-binary.
        io_search_node->get_operator( IMPORTING ev_operator = DATA(lv_operator) ).
        DATA(ls_search_1) = _get_text_search( io_search_node->get_child( 1 ) ).
        DATA(ls_search_2) = _get_text_search( io_search_node->get_child( 2 ) ).
        CASE lv_operator.
          WHEN io_search_node->gcs_binary_operator-and.
            rs_text_search-search_term = ls_search_1-search_term && | | && ls_search_2-search_term.
          WHEN io_search_node->gcs_binary_operator-or.
            rs_text_search-search_term = ls_search_1-search_term && | OR | && ls_search_2-search_term.
          WHEN OTHERS.
            RAISE EXCEPTION TYPE /iwbep/cx_gateway
              EXPORTING
                is_for_user      = abap_false
                http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-sv_not_implemented.
        ENDCASE.
      WHEN io_search_node->gcs_node_kinds-not.
        DATA(lo_child) = io_search_node->get_child( 1 ).
        DATA(lv_kind) = lo_child->get_kind( ).
        IF lv_kind NE lo_child->gcs_node_kinds-phrase
        AND lv_kind NE lo_child->gcs_node_kinds-word.
          RAISE EXCEPTION TYPE /iwbep/cx_gateway
            EXPORTING
              is_for_user      = abap_false
              http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-sv_not_implemented.
        ENDIF.
        ls_search_1 = _get_text_search( lo_child ).
        rs_text_search-search_term = |-| && ls_search_1-search_term.
      WHEN io_search_node->gcs_node_kinds-phrase OR io_search_node->gcs_node_kinds-word.
        io_search_node->get_term( IMPORTING ev_term = rs_text_search-search_term ).
        rs_text_search-search_term = |"| && rs_text_search-search_term && |"|.
      WHEN OTHERS.
        RAISE EXCEPTION TYPE /iwbep/cx_gateway
          EXPORTING
            is_for_user      = abap_false
            http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-sv_not_implemented.
    ENDCASE.
  ENDMETHOD.


  METHOD _get_touched_instances.
    CLEAR et_instance_operation.

    DATA(lt_create) = is_change_set-create.
    io_request->get_operations_info( IMPORTING et_operation_info = DATA(lt_operation_info) ).
    LOOP AT lt_operation_info ASSIGNING FIELD-SYMBOL(<s_operation_info>).
      io_request->get_operation( EXPORTING iv_operation_id = <s_operation_info>-id
                                 IMPORTING es_operation    = DATA(ls_changeset_operation) ).

      CASE ls_changeset_operation-kind.
        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-update_entity.
          DATA lv_update_index TYPE i.
          ADD 1 TO lv_update_index.
          DATA(ls_update) = is_change_set-update[ lv_update_index ].
          APPEND VALUE #( entity_name    = ls_update-entity_id
                          ir_key_data    = ls_update-rs_entity_data
                          content_id     = <s_operation_info>-content_id
                          message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
                                             io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_update( CAST /iwbep/if_v4_resp_adv_update( ls_changeset_operation-response ) )
                                             iv_target_entity_id          = ls_update-entity_id ) )
                       TO rt_touched_instances.
          APPEND VALUE #( operation_id = <s_operation_info>-id   instance_index = lines( rt_touched_instances ) ) TO et_instance_operation.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-create_entity.
          DATA lv_create_index TYPE i.
          ADD 1 TO lv_create_index.
          DATA(ls_create) = lt_create[ lv_create_index ].
          ASSIGN is_change_set-deep_create_data[ index = lv_create_index ] TO FIELD-SYMBOL(<s_deep_create_data>).
          IF sy-subrc = 0.
            DATA(lt_deep_create_changeset) = VALUE if_sadl_gw_v4_generic_dpc=>tt_create( ).
            DATA(lv_to_index) = lv_create_index + <s_deep_create_data>-length - 1.
            APPEND LINES OF lt_create FROM lv_create_index TO lv_to_index TO lt_deep_create_changeset.

            _get_touched_inst_of_deep_cr( EXPORTING it_deep_create_changeset = lt_deep_create_changeset
                                                    io_response              = CAST #( ls_changeset_operation-response )
                                          CHANGING  ct_touched_instances     = rt_touched_instances ).
            ls_create-rs_entity_data = <s_deep_create_data>-rs_data.
            DELETE lt_create FROM lv_create_index + 1 TO lv_to_index. " so that for the next Deep Create, indexes of deep_create_data and lt_create again agree
          ELSE.
            APPEND VALUE #( entity_name    = ls_create-entity_id
                            content_id     = ls_create-content_id
                            message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
                                               io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( CAST /iwbep/if_v4_resp_adv_create( ls_changeset_operation-response ) )
                                               iv_target_entity_id         = ls_create-entity_id )
                            ir_key_data    = ls_create-rs_entity_data ) TO rt_touched_instances.
            APPEND VALUE #( operation_id = <s_operation_info>-id   instance_index = lines( rt_touched_instances ) ) TO et_instance_operation.
          ENDIF.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-delete_entity.
          DATA lv_delete_index TYPE i.
          ADD 1 TO lv_delete_index.
          DATA(ls_delete) = is_change_set-delete[ lv_delete_index ].

          APPEND VALUE #( entity_name    = ls_delete-entity_id
                          content_id     = <s_operation_info>-content_id
                          message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
                                             io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_delete( CAST /iwbep/if_v4_resp_adv_delete( ls_changeset_operation-response ) )
                                             iv_target_entity_id         = ls_delete-entity_id ) " G1YK024004
                          ir_key_data    = ls_delete-rs_key_values ) TO rt_touched_instances.
          APPEND VALUE #( operation_id = <s_operation_info>-id   instance_index = lines( rt_touched_instances ) ) TO et_instance_operation.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-execute_action.
          DATA lv_action_index TYPE i.
          ADD 1 TO lv_action_index.
          DATA(ls_action) = is_change_set-action[ lv_action_index ].

          FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
          DATA lr_key TYPE REF TO data.
          ASSIGN ls_action-rt_key_values->* TO <t_key_values>.
          IF sy-subrc = 0.
            LOOP AT <t_key_values> REFERENCE INTO lr_key.
              APPEND VALUE #( entity_name    = ls_action-entity_id
                              content_id     = COND #( WHEN NOT ls_action-content_ids IS INITIAL THEN ls_action-content_ids[ 1 ] ) " at most one key -> at most one content id
                              message_target = _get_failed_action_msg_target( io_response        = CAST /iwbep/if_v4_resp_adv_action( ls_changeset_operation-response )
                                                                              is_action_metadata = it_action_metadata[ lv_action_index ]
                                                                              iv_entity_name     = CONV #( ls_action-entity_id ) )
                              ir_key_data    = lr_key ) TO rt_touched_instances.
              APPEND VALUE #( operation_id = <s_operation_info>-id   instance_index = lines( rt_touched_instances ) ) TO et_instance_operation.
            ENDLOOP.
          ELSE.
            LOOP AT ls_action-content_ids ASSIGNING FIELD-SYMBOL(<cid>).
              APPEND VALUE #( entity_name    = ls_action-entity_id
                              content_id     = <cid>
                              message_target = _get_failed_action_msg_target( io_response        = CAST /iwbep/if_v4_resp_adv_action( ls_changeset_operation-response )
                                                                              is_action_metadata = it_action_metadata[ lv_action_index ]
                                                                              iv_entity_name     = CONV #( ls_action-entity_id ) ) ) TO rt_touched_instances.
            ENDLOOP.
          ENDIF.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_touched_inst_of_deep_cr.
    ASSERT it_deep_create_changeset IS NOT INITIAL.

    IF lines( it_deep_create_changeset ) > 1.
      DATA(index_of_anchor_in_create_tab) = it_deep_create_changeset[ 2 ]-source-tabix. " source of second deep create line must be first line
      DATA(source_index_shift) = lines( ct_touched_instances ) + 1 - index_of_anchor_in_create_tab.
    ENDIF.

    LOOP AT it_deep_create_changeset ASSIGNING FIELD-SYMBOL(<s_deep_create_chngeset>).
      IF sy-tabix = 1.
        DATA(lv_deep_create_anchor_name) = <s_deep_create_chngeset>-entity_id.
      ENDIF.
      APPEND VALUE #( entity_name                    = <s_deep_create_chngeset>-entity_id
                      ir_key_data                    = <s_deep_create_chngeset>-rs_entity_data
                      message_target                 = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( io_response )
                                                                                         iv_target_entity_id          = <s_deep_create_chngeset>-entity_id )
                      deep_create_anchor_entity_name = lv_deep_create_anchor_name
                      source                         = <s_deep_create_chngeset>-source
                      content_id                     = <s_deep_create_chngeset>-content_id ) TO ct_touched_instances ASSIGNING FIELD-SYMBOL(<s_touched_instance>).
      IF source_index_shift IS NOT INITIAL AND <s_touched_instance>-source-tabix IS NOT INITIAL.
        <s_touched_instance>-source-tabix = <s_touched_instance>-source-tabix + source_index_shift.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _is_grouped_by_all_key_elems.
    io_entity_type->get_key_property_names( IMPORTING et_internal_name = DATA(lt_key_property_names) ).
    rv_group_by_keys  = xsdbool( lt_key_property_names IS NOT INITIAL ).
    LOOP AT lt_key_property_names INTO DATA(lv_key_property_name).
      IF NOT ( line_exists( it_apply_result_elements[ table_line = EXACT #( lv_key_property_name ) ] )  " group-by element
               AND NOT line_exists( is_aggregation-elements[ alias = EXACT #( lv_key_property_name ) ] ) ).
        rv_group_by_keys = abap_false.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _map_operation_parameters.
    DATA lr_params_int         TYPE REF TO data.
    DATA lt_component          TYPE cl_abap_structdescr=>component_table.
    DATA ls_component          TYPE abap_componentdescr.
    DATA lt_parameter_name_map TYPE tt_parameter_name_mapping.

    TRY.
        er_params = mo_dpc->create_action_param_struct_ref( iv_entity_name = iv_entity_name
                                                            iv_action      = iv_sadl_action_name ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation. "Action w/o params
        CLEAR er_params.
        RETURN.
      CATCH BEFORE UNWIND cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
        RETURN.
    ENDTRY.
    ASSIGN er_params->* TO FIELD-SYMBOL(<s_sadl_action_param>).
    ASSERT sy-subrc = 0.

    LOOP AT it_operation_parameters ASSIGNING FIELD-SYMBOL(<s_gw_parameter>).
      ls_component-name = <s_gw_parameter>->get_internal_name( ).
      <s_gw_parameter>->get_provider_info( IMPORTING ev_provider_info = DATA(lv_sadl_param_name) ).
      INSERT VALUE #( gw_name   = ls_component-name
                      sadl_name = lv_sadl_param_name ) INTO TABLE lt_parameter_name_map.

      ASSIGN COMPONENT lv_sadl_param_name OF STRUCTURE <s_sadl_action_param> TO FIELD-SYMBOL(<single_sadl_action_param>).
      ls_component-type ?= cl_abap_typedescr=>describe_by_data( <single_sadl_action_param> ).
      APPEND ls_component TO lt_component.
    ENDLOOP.
    DATA(lo_abap_structdescr) = cl_abap_structdescr=>get( p_components = lt_component ).

    IF cl_sadl_dev_prototypes=>v4_actfct_parameter_ctrl_flds( ).
      IF mo_mdp IS BOUND."GO: Initial in some unit tests!
        DATA(lr_entity_load) = mo_mdp->get_entity_load( iv_entity_name ).
        DATA(lv_action_import_name) = lr_entity_load->sadl_entity-actions[ name = iv_sadl_action_name ]-data_type.
        IF CONV char6( lv_action_import_name ) = '\BDEF='.
          IF ms_service_features-use_vc_to_flag_omitted_data = abap_true.
            lo_abap_structdescr = _ext_pa_structdescr_w_vcs_deep(
              io_abap_structdescr_gw    = lo_abap_structdescr
              io_abap_structdescr_param = CAST cl_abap_structdescr( cl_abap_datadescr=>describe_by_data_ref( er_params ) )
              it_parameter_name_map     = lt_parameter_name_map ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.

    CREATE DATA lr_params_int TYPE HANDLE lo_abap_structdescr.
    ASSIGN lr_params_int->* TO FIELD-SYMBOL(<s_gw_params>).

    IF io_navigation_node IS BOUND.
      io_navigation_node->get_parameter_data( IMPORTING es_parameter_data = <s_gw_params> ).
    ELSE.
      io_function_request->get_parameter_data( IMPORTING es_parameter_data = <s_gw_params> ).
    ENDIF.

    LOOP AT lt_parameter_name_map ASSIGNING FIELD-SYMBOL(<s_param_info>).
      ASSIGN COMPONENT <s_param_info>-sadl_name OF STRUCTURE <s_sadl_action_param> TO FIELD-SYMBOL(<single_sadl_param>).
      IF sy-subrc EQ 0.
        " get GW action parameter value provided by GW request
        ASSIGN COMPONENT <s_param_info>-gw_name OF STRUCTURE <s_gw_params> TO FIELD-SYMBOL(<single_gw_param>).
        IF sy-subrc EQ 0.
          IF cl_sadl_dev_prototypes=>v4_actfct_parameter_ctrl_flds( ) AND cl_abap_datadescr=>describe_by_data( <single_gw_param> ) IS NOT INSTANCE OF cl_abap_elemdescr.
            <single_sadl_param> = CORRESPONDING #( DEEP <single_gw_param> ).
          ELSE.
            <single_sadl_param> = <single_gw_param>.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF cl_sadl_dev_prototypes=>v4_actfct_parameter_ctrl_flds( ).
      IF CONV char6( lv_action_import_name ) = '\BDEF='.
        cl_abap_behv_load=>get_load( EXPORTING entity = EXACT #( iv_entity_name ) IMPORTING actions = DATA(lt_action) ).
        _map_check_vcs_to_control_deep( EXPORTING is_source             = <s_gw_params>
                                                  it_parameter_name_map = lt_parameter_name_map
                                                  iv_action_import_ddic = lt_action[ name = EXACT #( iv_sadl_action_name ) ]-parameter_type
                                                  iv_entity_name        = iv_entity_name
                                                  iv_sadl_action_name   = iv_sadl_action_name
                                        CHANGING  cs_target             = <s_sadl_action_param> ).
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD _overlay_upd_data_with_key .
    CREATE DATA rr_data LIKE is_data.
    ASSIGN rr_data->* TO FIELD-SYMBOL(<s_data>).
    MOVE-CORRESPONDING is_data TO <s_data>.
    DATA(lt_key_element) = _get_key_elements( iv_entity_type = iv_entity_type ).

    LOOP AT lt_key_element INTO DATA(lv_key_element) ##INTO_OK.
      ASSIGN COMPONENT lv_key_element OF STRUCTURE is_key TO FIELD-SYMBOL(<lv_value_key>).
      CHECK sy-subrc = 0.
      ASSIGN COMPONENT lv_key_element OF STRUCTURE <s_data> TO FIELD-SYMBOL(<lv_value_data>).
      <lv_value_data> = <lv_value_key>.
    ENDLOOP.
  ENDMETHOD.


  METHOD _post_process_change_set.
    IF iv_failed = abap_true.
      _post_process_failed_changeset( is_change_set      = cs_change_set
                                      iv_failure_reason  = iv_failure_reason
                                      it_messages        = it_messages
                                      io_request         = io_request
                                      it_action_metadata = it_action_metadata ).

    ELSE.
      " collect messages and pack it with data into the response
      _post_process_succ_change_set( is_change_set      = cs_change_set
                                     it_messages        = it_messages
*                                     it_action_metadata = it_action_metadata
                                     io_request         = io_request  ).
    ENDIF.
  ENDMETHOD.


  METHOD _post_process_failed_changeset.
    DATA(lt_touched_instances) = _get_touched_instances( is_change_set      = is_change_set
                                                         io_request         = io_request
                                                         it_action_metadata = it_action_metadata ).
    _raise( EXPORTING it_sadl_messages     = it_messages
                      iv_failure_reason    = iv_failure_reason
            CHANGING  ct_touched_instances = lt_touched_instances ).
  ENDMETHOD.


  METHOD _post_process_succ_change_set.
    DATA(lt_create) = is_change_set-create.

    _write_msg_into_table( EXPORTING it_message             = it_messages
                           IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).

    io_request->get_operations_info( IMPORTING et_operation_info = DATA(lt_operation_info) ).
    LOOP AT lt_operation_info ASSIGNING FIELD-SYMBOL(<s_operation_info>).
      io_request->get_operation( EXPORTING iv_operation_id = <s_operation_info>-id
                                 IMPORTING es_operation    = DATA(ls_changeset_operation) ).

      CASE ls_changeset_operation-kind.
        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-update_entity.
          DATA lv_update_index TYPE i.
          ADD 1 TO lv_update_index.
          DATA(ls_update) = is_change_set-update[ lv_update_index ].

          IF lines( lt_gw_messages ) < co_max_header_messages.
            _add_not_requested_msgs( EXPORTING io_operation_messages = CAST cl_sadl_v4_operation_messages( ls_update-operation_messages )
                                     CHANGING  ct_gw_messages        = lt_gw_messages ).
          ENDIF.

          CAST /iwbep/if_v4_resp_adv_update( ls_changeset_operation-response )->set_header_messages( lt_gw_messages ).

          _set_response_update_entity( ir_busi_data_out = ls_update-rs_entity_data
                                       io_response      = CAST #( ls_changeset_operation-response ) ).

          CAST /iwbep/if_v4_resp_adv_update( ls_changeset_operation-response )->set_is_done(
            VALUE #( is_change_set-update_done_list[ lv_update_index ] ) ).
          IF NOT ls_update-content_id_ref IS INITIAL.
            ls_changeset_operation-response->set_is_done( VALUE #( content_id_ref = abap_true ) ).
          ENDIF.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-create_entity.
          DATA lv_create_index TYPE i.
          ADD 1 TO lv_create_index.
          DATA(ls_create) = lt_create[ lv_create_index ].
          ASSIGN is_change_set-deep_create_data[ index = lv_create_index ] TO FIELD-SYMBOL(<s_deep_create_data>).
          IF sy-subrc = 0.
            ls_create-rs_entity_data = <s_deep_create_data>-rs_data.
            DATA(lv_from_index) = lv_create_index + 1.
            DATA(lv_to_index) = lv_create_index + <s_deep_create_data>-length - 1.
            DELETE lt_create FROM lv_from_index TO lv_to_index.
          ENDIF.

          IF lines( lt_gw_messages ) < co_max_header_messages.
            _add_not_requested_msgs( EXPORTING io_operation_messages = CAST cl_sadl_v4_operation_messages( ls_create-operation_messages )
                                     CHANGING  ct_gw_messages        = lt_gw_messages ).
          ENDIF.

          CAST /iwbep/if_v4_resp_adv_create( ls_changeset_operation-response )->set_header_messages( lt_gw_messages ).

          _set_response_create_entity( ir_busi_data_out = ls_create-rs_entity_data
                                       io_response      = CAST #( ls_changeset_operation-response ) ).

          CAST /iwbep/if_v4_resp_adv_create( ls_changeset_operation-response )->set_is_done(
              VALUE #( is_change_set-create_done_list[ lv_create_index ] ) ).
          IF NOT ls_create-source-content_id_ref IS INITIAL.
            ls_changeset_operation-response->set_is_done( VALUE #( content_id_ref = abap_true ) ).
          ENDIF.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-delete_entity.
          DATA lv_delete_index TYPE i.
          ADD 1 TO lv_delete_index.
          DATA(ls_delete) = is_change_set-delete[ lv_delete_index ].

          CAST /iwbep/if_v4_resp_adv_delete( ls_changeset_operation-response )->set_header_messages( lt_gw_messages ).

          CAST /iwbep/if_v4_resp_adv_delete( ls_changeset_operation-response )->set_is_done(
            VALUE #( is_change_set-delete_done_list[ lv_delete_index ] ) ).
          IF NOT ls_delete-content_id_ref IS INITIAL.
            ls_changeset_operation-response->set_is_done( VALUE #( content_id_ref = abap_true ) ).
          ENDIF.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-execute_action.
          DATA lv_action_index TYPE i.
          ADD 1 TO lv_action_index.
          DATA(ls_action) = is_change_set-action[ lv_action_index ].

          IF  lines( lt_gw_messages ) < co_max_header_messages.
            _add_not_requested_msgs( EXPORTING io_operation_messages = CAST cl_sadl_v4_operation_messages( ls_action-operation_messages )
                                     CHANGING  ct_gw_messages        = lt_gw_messages ).
          ENDIF.
          CAST /iwbep/if_v4_resp_adv_action( ls_changeset_operation-response )->set_header_messages( lt_gw_messages ).

          _set_response_action( ir_busi_data_out = ls_action-r_returning_parameters
                                io_response      = CAST #( ls_changeset_operation-response ) ).

          CAST /iwbep/if_v4_resp_adv_action( ls_changeset_operation-response )->set_is_done(
            VALUE #( is_change_set-action_done_list[ lv_action_index ] ) ).
          IF NOT ls_action-content_id_refs IS INITIAL.
            ls_changeset_operation-response->set_is_done( VALUE #( content_id_ref = abap_true ) ).
          ENDIF.

      ENDCASE.

      CLEAR lt_gw_messages. " assign unbound messages only to first header.
    ENDLOOP.

  ENDMETHOD.


  METHOD _prepare_change_set.
    DATA lv_entity_name TYPE string.
    DATA lt_create_content_id TYPE SORTED TABLE OF ty_create_content_id WITH UNIQUE KEY content_id.
    DATA lv_create_index TYPE i.

    CLEAR es_change_set.
    CLEAR et_action_metadata.

    DATA lv_strict_handling_requested TYPE abap_bool.
    DATA lv_first TYPE abap_bool.
    lv_first = abap_true.
    io_request->get_operations_info( IMPORTING et_operation_info = DATA(lt_operation_info) ).

    LOOP AT lt_operation_info ASSIGNING FIELD-SYMBOL(<s_operation_info>).
      io_request->get_operation( EXPORTING iv_operation_id = <s_operation_info>-id
                                 IMPORTING es_operation    = DATA(ls_changeset_operation) ).

      ls_changeset_operation-request->get_todos( IMPORTING es_todo_list = DATA(ls_operation_todo_list) ).
      IF ls_operation_todo_list-process-content_id_ref = abap_true.
        ls_changeset_operation-request->get_content_id_ref( IMPORTING ev_content_id_ref = DATA(lv_content_id_ref) ).
      ELSE.
        CLEAR lv_content_id_ref.
      ENDIF.

      CASE ls_changeset_operation-kind.
        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-update_entity.
*          OR /iwbep/if_v4_request_info=>gcs_operation_kinds-patch_entity." obsolete

          DATA ls_update LIKE LINE OF es_change_set-update.
          _get_req_detail_update_entity( EXPORTING io_request                   = CAST #( ls_changeset_operation-request )
                                         IMPORTING er_data                      = ls_update-rs_entity_data
                                                   ev_entity_name               = lv_entity_name
                                                   et_update_element            = ls_update-updated_elements
                                                   et_requested_element         = ls_update-requested_elements
                                                   es_done_list                 = DATA(ls_update_done_list)
                                                   es_precondition              = ls_update-precondition
                                                   ev_fill_data                 = ls_update-fill_data
                                                   ev_strict_handling_requested = lv_strict_handling_requested
                                                   et_expand_step               = ls_update-expand_steps ).

          ls_update-entity_id      = lv_entity_name.
          ls_update-content_id_ref = lv_content_id_ref.
          ls_update-message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
            io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_update( CAST /iwbep/if_v4_resp_adv_update( ls_changeset_operation-response ) )
            iv_target_entity_id          = CONV #( lv_entity_name ) ).
          IF xsdbool( line_exists( ls_update-requested_elements[ table_line = if_sadl_special_field_names=>sap__messages ] ) ) = abap_false.
            ls_update-operation_messages = NEW cl_sadl_v4_operation_messages( ).
          ENDIF.
          APPEND ls_update TO es_change_set-update.
          APPEND ls_update_done_list TO es_change_set-update_done_list.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-create_entity.
          ADD 1 TO lv_create_index.
          _prepare_change_set_create( EXPORTING is_operation                 = ls_changeset_operation
                                                iv_index                     = lv_create_index
                                                iv_content_id                = <s_operation_info>-content_id
                                                iv_content_id_ref            = lv_content_id_ref
                                      IMPORTING es_deep_create_data          = DATA(ls_deep_create_data)
                                                es_create_done_list          = DATA(ls_create_done_list)
                                                ev_strict_handling_requested = lv_strict_handling_requested
                                      CHANGING  ct_create                    = es_change_set-create
                                                ct_create_content_id         = lt_create_content_id ).

          INSERT ls_deep_create_data INTO TABLE es_change_set-deep_create_data.
          APPEND ls_create_done_list TO es_change_set-create_done_list.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-delete_entity.
          DATA ls_delete LIKE LINE OF es_change_set-delete.

          _get_req_detail_delete_entity( EXPORTING io_request                   = CAST #( ls_changeset_operation-request )
                                         IMPORTING ev_entity_name               = lv_entity_name
                                                   er_key                       = ls_delete-rs_key_values
                                                   es_done_list                 = DATA(ls_delete_done_list)
                                                   es_precondition              = ls_delete-precondition
                                                   ev_strict_handling_requested = lv_strict_handling_requested ).

          ls_delete-entity_id = lv_entity_name.
          ls_delete-content_id_ref = lv_content_id_ref.
          APPEND ls_delete TO es_change_set-delete.
          APPEND ls_delete_done_list TO es_change_set-delete_done_list.

        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-execute_action.
          DATA ls_action TYPE LINE OF if_sadl_gw_v4_generic_dpc=>tt_action.

          _get_req_detail_execute_action( EXPORTING io_request                   = CAST #( ls_changeset_operation-request )
                                          IMPORTING es_action_metadata           = DATA(ls_action_metadata)
                                                    ev_entity_name               = lv_entity_name
                                                    er_key                       = DATA(lr_key)
                                                    er_params                    = ls_action-rs_importing_parameters
                                                    et_navigation_steps          = ls_action-navigation_steps
                                                    es_done_list                 = DATA(ls_action_done_list)
                                                    es_precondition              = DATA(ls_precondition)
                                                    et_requested_element         = DATA(lt_requested_element)
                                                    ev_sticky_sess_effect        = DATA(lv_act_sticky_sess_effect)
                                                    ev_strict_handling_requested = lv_strict_handling_requested
                                                    et_expand_step               = DATA(lt_expand_steps) ).

          IF lv_content_id_ref IS NOT INITIAL AND lr_key IS INITIAL.
            lr_key = _create_key_structure_ref( lv_entity_name ).
          ENDIF.

          _set_sticky_session_effect( lv_act_sticky_sess_effect ).
          ls_action-entity_id = lv_entity_name.
          ls_action-name = ls_action_metadata-name.
          ls_action-rt_key_values = cl_sadl_gw_dpc_util=>create_table_with_one_key( lr_key ).
          ls_action-requested_elements = lt_requested_element.
          DATA(lv_messages_are_requested) = xsdbool( line_exists( lt_requested_element[  table_line = if_sadl_special_field_names=>sap__messages ]  ) ).
          ls_action-message_target = _get_succ_action_msg_target( io_response           = CAST /iwbep/if_v4_resp_adv_action( ls_changeset_operation-response )
                                                                  iv_messages_requested = lv_messages_are_requested
                                                                  is_action_metadata    = ls_action_metadata ).
          IF lv_messages_are_requested = abap_false.
            ls_action-operation_messages = NEW cl_sadl_v4_operation_messages( ).
          ENDIF.

          ls_action-expand_steps = lt_expand_steps.
          ls_action-content_ids = COND #( WHEN NOT <s_operation_info>-content_id IS INITIAL THEN VALUE #( ( <s_operation_info>-content_id ) ) ). " at most one key -> at most one content id
          ls_action-content_id_refs = COND #( WHEN NOT lv_content_id_ref IS INITIAL THEN VALUE #( ( lv_content_id_ref ) ) ).
          ls_action-preconditions = VALUE #( ( ls_precondition ) ).

          APPEND ls_action TO es_change_set-action.
          APPEND ls_action_done_list TO es_change_set-action_done_list.
          APPEND ls_action_metadata TO et_action_metadata.

*        WHEN /iwbep/if_v4_runtime_types=>gcs_operation_kinds-execute_function. " not relevant for change sets (GET request)
      ENDCASE.

      CLEAR ls_changeset_operation.

      IF lv_first = abap_false AND es_change_set-strict_handling_requested <> lv_strict_handling_requested." All operations of the same changeset must have the same strict mode
        RAISE EXCEPTION NEW cx_sadl_gw_diff_strict_hndl_rq( ).
      ENDIF.
      es_change_set-strict_handling_requested = lv_strict_handling_requested.
      lv_first = abap_false.
    ENDLOOP.

    " Check for idempotency in Sticky session case.
    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_process_list) ).
    _evaluate_idp_in_sticky_sess( iv_idp_flag = ls_todo_process_list-process-idempotency ).

  ENDMETHOD.


  METHOD _prepare_change_set_create.
    DATA ls_create LIKE LINE OF ct_create.
    CLEAR: es_deep_create_data, es_create_done_list, ev_strict_handling_requested.

    _get_req_detail_create_entity( EXPORTING io_request                   = CAST #( is_operation-request )
                                   IMPORTING er_busi_data                 = ls_create-rs_entity_data
                                             et_provided_elements         = ls_create-provided_elements
                                             et_requested_elements        = ls_create-requested_elements
                                             ev_fill_data                 = ls_create-fill_data
                                             ev_entity_name               = DATA(lv_entity_name)
                                             et_navigation_steps          = ls_create-navigation_steps
                                             et_deep_create               = DATA(lt_deep_create)
                                             es_done_list                 = es_create_done_list
                                             ev_strict_handling_requested = ev_strict_handling_requested ).
    DATA(lv_index_shift) = lines( ct_create ).
    DATA(lv_messages_are_requested) = xsdbool( line_exists( ls_create-requested_elements[ table_line = if_sadl_special_field_names=>sap__messages ] ) ).
    IF lt_deep_create IS INITIAL.
      ls_create-entity_id    = lv_entity_name.
      ls_create-content_id   = iv_content_id.
      IF NOT iv_content_id_ref IS INITIAL.
        ls_create-source-content_id_ref = iv_content_id_ref.
        ls_create-source-tabix = ct_create_content_id[ content_id = iv_content_id_ref ]-tabix.
      ENDIF.
      ls_create-message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
        io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( CAST /iwbep/if_v4_resp_adv_create( is_operation-response ) )
        iv_target_entity_id          = CONV #( lv_entity_name ) ).
      IF lv_messages_are_requested = abap_false.
        ls_create-operation_messages = NEW cl_sadl_v4_operation_messages( ).
      ENDIF.
      APPEND ls_create TO ct_create.
    ELSE.
      es_deep_create_data = VALUE #( index = iv_index length = lines( lt_deep_create ) rs_data = ls_create-rs_entity_data ).

      ASSIGN lt_deep_create[ 1 ] TO FIELD-SYMBOL(<s_deep_create>).
      ASSERT sy-subrc = 0.
      <s_deep_create>-message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
        io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( CAST /iwbep/if_v4_resp_adv_create( is_operation-response ) )
        iv_target_entity_id          = <s_deep_create>-entity_id ).
      IF lv_messages_are_requested = abap_false.
        <s_deep_create>-operation_messages = NEW cl_sadl_v4_operation_messages( ).
      ENDIF.
      <s_deep_create>-content_id = iv_content_id.
      IF NOT iv_content_id_ref IS INITIAL.
        <s_deep_create>-source-content_id_ref = iv_content_id_ref.
        <s_deep_create>-source-tabix = ct_create_content_id[ content_id = iv_content_id_ref ]-tabix.
      ENDIF.
      LOOP AT lt_deep_create FROM 2 ASSIGNING <s_deep_create>.
        DATA(lv_tabix) = sy-tabix.
        <s_deep_create>-content_id = iv_content_id && co_extern_intern_cid_delimiter && CONV string( lv_tabix ).
        <s_deep_create>-message_target = NEW cl_sadl_gw_v4_dpc_msg_target(
          io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( CAST /iwbep/if_v4_resp_adv_create( is_operation-response ) )
          iv_target_entity_id          = <s_deep_create>-entity_id ).
        CHECK NOT <s_deep_create>-source-tabix IS INITIAL.
        <s_deep_create>-source-tabix = <s_deep_create>-source-tabix + lv_index_shift.
      ENDLOOP.
      APPEND LINES OF lt_deep_create TO ct_create.
    ENDIF.

    INSERT VALUE #( content_id = iv_content_id  tabix = lv_index_shift + 1 ) INTO TABLE ct_create_content_id.
    IF sy-subrc <> 0 AND NOT iv_content_id IS INITIAL.
      RAISE EXCEPTION TYPE cx_sadl_gw_v4_ambiguous_cid EXPORTING content_id = iv_content_id.
    ENDIF.
  ENDMETHOD.


  METHOD _raise.
    DATA(lv_http_status_code) = _get_http_status_for_failure( iv_failure_reason ).
    " avoid initial http status code => default value of constructor is used
    DATA(lx) = NEW /iwbep/cx_gateway( is_for_user = abap_false ).
    DATA(lo_msg_container) = lx->get_message_container( ).

    _write_msg_into_msg_container( EXPORTING io_v4_message_container = lo_msg_container
                                             it_message              = it_sadl_messages
                                   IMPORTING et_targets              = lx->message_targets
                                   CHANGING  cv_http_status_code     = lv_http_status_code
                                             ct_touched_instances    = ct_touched_instances ).
    IF lv_http_status_code IS INITIAL.
      lx->http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-bad_request.
    ELSE.
      lx->http_status_code = lv_http_status_code.
    ENDIF.
    cl_sadl_gw_dpc_util=>set_exception_category4failure( EXPORTING iv_failure_reason     = iv_failure_reason
                                                         CHANGING  cv_exception_category = lx->exception_category ).
    RAISE EXCEPTION lx.
  ENDMETHOD.


  METHOD _read_data_from_message.
    ev_msg_id     = io_t100_message->t100key-msgid.
    ev_msg_number = io_t100_message->t100key-msgno.
    ev_msg_text   = io_t100_message->if_message~get_text( ).
    cl_sadl_entity_util=>extract_converted_t100_msgvs( EXPORTING io_t100_message = io_t100_message
                                                       IMPORTING ev_msgv1        = ev_msg_v1
                                                                 ev_msgv2        = ev_msg_v2
                                                                 ev_msgv3        = ev_msg_v3
                                                                 ev_msgv4        = ev_msg_v4 ).
  ENDMETHOD.


  METHOD _remove_filter_elems_aggr_away.
    DATA replace TYPE cl_sadl_condition_analyzer=>tt_token_replace.
    DATA(analyzer) = cl_sadl_condition_analyzer=>create( condition ).
    DATA(condition_tokens) = analyzer->get_tokens( ).

    LOOP AT condition_tokens ASSIGNING FIELD-SYMBOL(<attribute_token>) WHERE attribute IS NOT INITIAL.
      IF NOT line_exists( it_apply_result_elements[ table_line = <attribute_token>-attribute ] ).
        _replace_aggregated_away_elem( EXPORTING analyzer = analyzer
                                                 index    = sy-tabix
                                       CHANGING  replace  = replace ).
      ENDIF.
    ENDLOOP.

    analyzer->get_replaced_expressions( EXPORTING it_replace    = replace
                                        IMPORTING et_conditions = DATA(remaining_filter_conditions) ).

    DATA(invariant_analyzer) = cl_sadl_condition_analyzer=>create( remaining_filter_conditions ).
    invariant_analyzer->get_tokens_eliminating_invarnt( IMPORTING et_condition              = remaining_filter_conditions
                                                                  ev_condition_is_invariant = DATA(is_invariant)
                                                                  ev_invariant              = DATA(invariant) ).
    IF is_invariant = abap_true AND invariant = abap_true.
      CLEAR condition.
    ELSE.
      condition = remaining_filter_conditions.
    ENDIF.
  ENDMETHOD.


  METHOD _replace_aggregated_away_elem.

    analyzer->get_parent_expression( EXPORTING iv_token_index    = index
                                     IMPORTING ev_operator_index = DATA(operator_index)
                                               et_condition      = DATA(atom_condition) ).

    INSERT VALUE #( token_index = operator_index ) INTO TABLE replace ASSIGNING FIELD-SYMBOL(<replace_line>).
    READ TABLE atom_condition INDEX lines( atom_condition ) ASSIGNING FIELD-SYMBOL(<operator>).
    IF <operator>-type = if_sadl_query_engine_types=>co_condition_types-is_null.
      <replace_line>-replacement = cl_sadl_condition_util=>true_condition( ).
    ELSE.
      <replace_line>-replacement = cl_sadl_condition_util=>false_condition( ).
    ENDIF.

  ENDMETHOD.


  METHOD _resolve_deep_create.
    FIELD-SYMBOLS: <s_deep_data> TYPE data.
    FIELD-SYMBOLS: <s_busi_data> TYPE data.
    FIELD-SYMBOLS: <t_busi_data> TYPE INDEX TABLE.

    ASSIGN ir_busi_data->* TO <s_deep_data>.

    LOOP AT it_deep_data_description USING KEY parent ASSIGNING FIELD-SYMBOL(<s_deep_data_description>)
      WHERE parent_id = iv_parent_id.
      IF <s_deep_data_description>-is_table = abap_true.
        ASSIGN COMPONENT <s_deep_data_description>-nav_prop OF STRUCTURE <s_deep_data> TO <t_busi_data>.
        ASSERT sy-subrc = 0.
        LOOP AT <t_busi_data> ASSIGNING <s_busi_data>.
          _add_crea_and_resolve_children( EXPORTING it_deep_data_description = it_deep_data_description
                                                    iv_parent_entity_name    = iv_parent_entity_name
                                                    iv_source_tabix          = iv_source_tabix
                                                    is_deep_data_description = <s_deep_data_description>
                                          CHANGING  ct_deep_create           = ct_deep_create
                                                    cs_busi_data             = <s_busi_data> ). " must be changing => data will be modified
        ENDLOOP.
      ELSE.
        ASSIGN COMPONENT <s_deep_data_description>-nav_prop OF STRUCTURE <s_deep_data> TO <s_busi_data>.
        ASSERT sy-subrc = 0.
        _add_crea_and_resolve_children( EXPORTING it_deep_data_description = it_deep_data_description
                                                  iv_parent_entity_name    = iv_parent_entity_name
                                                  iv_source_tabix          = iv_source_tabix
                                                  is_deep_data_description = <s_deep_data_description>
                                        CHANGING  ct_deep_create           = ct_deep_create
                                                  cs_busi_data             = <s_busi_data> ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD _set_dpc.
    IF cl_sadl_trace_factory=>is_any_trace_active( ).
      mo_dpc = NEW cl_sadl_gw_v4_generic_dpc_tr( io_dpc ).
    ELSE.
      mo_dpc = io_dpc.
    ENDIF.
    mo_exception_converter = NEW #( mo_dpc ).
  ENDMETHOD.


  METHOD _set_response_action.
    ASSIGN ir_busi_data_out->* TO FIELD-SYMBOL(<s_data>).
    IF <s_data> IS ASSIGNED.
      io_response->set_busi_data( EXPORTING ia_busi_data = <s_data> ).
    ENDIF.
  ENDMETHOD.


  METHOD _set_response_create_entity.
    FIELD-SYMBOLS <s_data> TYPE data.

    ASSIGN ir_busi_data_out->* TO <s_data>.
    io_response->set_busi_data( EXPORTING is_busi_data = <s_data> ).
  ENDMETHOD.


  METHOD _set_response_update_entity.
    FIELD-SYMBOLS <s_data> TYPE data.

    ASSIGN ir_busi_data_out->* TO <s_data>.
    io_response->set_busi_data( EXPORTING is_busi_data = <s_data> ).
  ENDMETHOD.


  METHOD _set_sticky_session_effect.
    IF ms_sticky_session-allowed = abap_true.
      CASE iv_session_effect.
        WHEN if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session
          OR if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard
          OR if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_save.
          ms_sticky_session-effect = iv_session_effect.
      ENDCASE.
    ENDIF.
  ENDMETHOD.


  METHOD _write_msg_into_msg_container.
    DATA lv_is_first_severe_message TYPE abap_bool.
    DATA lv_content_id TYPE string.
    DATA lt_targets LIKE et_targets.

    CLEAR: et_targets, ev_leading_content_id.
*    CLEAR: ev_target, et_targets, ev_leading_content_id.
    DATA(lt_messages_semantic_order) = cl_sadl_gw_dpc_util=>sort_messages_by_severity( EXPORTING it_messages = it_message ).

    LOOP AT lt_messages_semantic_order ASSIGNING FIELD-SYMBOL(<s_message>).
      CLEAR: lv_content_id, lt_targets.
      lv_is_first_severe_message = xsdbool( sy-tabix = 1 AND ( <s_message>-severity = if_sadl_message_handler=>co_severity-error
                                                               OR <s_message>-severity = if_sadl_message_handler=>co_severity-warning ) ).

      _read_data_from_message( EXPORTING io_t100_message = <s_message>-message
                               IMPORTING ev_msg_id       = DATA(lv_msg_id)
                                         ev_msg_number   = DATA(lv_msg_number)
                                         ev_msg_text     = DATA(lv_msg_text)
                                         ev_msg_v1       = DATA(lv_msg_v1)
                                         ev_msg_v2       = DATA(lv_msg_v2)
                                         ev_msg_v3       = DATA(lv_msg_v3)
                                         ev_msg_v4       = DATA(lv_msg_v4) ).
      IF ct_touched_instances IS NOT INITIAL AND <s_message>-locations IS NOT INITIAL.
        DATA lo_sadl_entity_api TYPE REF TO if_sadl_entity_api.
        IF lo_sadl_entity_api IS NOT BOUND.
          lo_sadl_entity_api = cl_sadl_entity_int_api_factory=>create( mo_mdp ).
        ENDIF.

        DATA lv_touched_inst_prepared TYPE abap_bool.
        IF lv_touched_inst_prepared IS INITIAL.
          lv_touched_inst_prepared = abap_true.
          LOOP AT ct_touched_instances ASSIGNING FIELD-SYMBOL(<s_touched_instance>).
            ASSIGN <s_touched_instance>-ir_key_data->* TO FIELD-SYMBOL(<s_key>).
            IF sy-subrc = 0.
              <s_touched_instance>-key_name_value_pairs = cl_sadl_gw_dpc_helper=>get_key_values(
                iv_entity_name = <s_touched_instance>-entity_name
                is_data_in     = <s_key>
                io_sadl_api    = lo_sadl_entity_api ).
            ENDIF.
            IF <s_touched_instance>-message_target IS NOT BOUND.
              <s_touched_instance>-omit_target = abap_true.
            ENDIF.
          ENDLOOP.
        ENDIF.
        _get_message_target( EXPORTING io_sadl_entity_api   = lo_sadl_entity_api
                                       it_touched_instances = ct_touched_instances
                                       is_message           = <s_message>
                             IMPORTING ev_content_id        = lv_content_id
                                       et_targets           = lt_targets ).

        IF lv_is_first_severe_message = abap_true.
          et_targets = lt_targets.
        ENDIF.
      ENDIF.

      io_v4_message_container->add_t100( iv_is_for_user              = abap_true
*                                         iv_target                   = lv_target
                                         it_target                   = lt_targets
                                         iv_leading_message_for_user = lv_is_first_severe_message
                                         iv_msg_type                 = SWITCH #( <s_message>-severity
                                                                         WHEN if_sadl_message_handler=>co_severity-error THEN 'E'
                                                                         WHEN if_sadl_message_handler=>co_severity-warning THEN 'W'
                                                                         WHEN if_sadl_message_handler=>co_severity-information THEN 'I'
                                                                         WHEN if_sadl_message_handler=>co_severity-success THEN 'S'
                                                                         ELSE THROW /iwbep/cx_gateway( is_for_user = abap_false ) )
                                         iv_batch_content_id         = lv_content_id
                                         iv_msg_id                   = lv_msg_id
                                         iv_msg_number               = lv_msg_number
                                         iv_msg_text                 = lv_msg_text
                                         iv_msg_v1                   = lv_msg_v1
                                         iv_msg_v2                   = lv_msg_v2
                                         iv_msg_v3                   = lv_msg_v3
                                         iv_msg_v4                   = lv_msg_v4 ).

      IF cv_http_status_code IS INITIAL.
        CASE <s_message>-symptom.
          WHEN if_sadl_message_handler=>co_symptom-failed_lock.
            cv_http_status_code = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-locked.
          WHEN if_sadl_message_handler=>co_symptom-conflict.
            cv_http_status_code = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-conflict.
          WHEN if_sadl_message_handler=>co_symptom-missing_authorization.
            cv_http_status_code = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-forbidden.
          WHEN if_sadl_message_handler=>co_symptom-not_found.
            cv_http_status_code = /iwbep/cx_mgw_busi_exception=>gcs_http_status_codes-not_found.
        ENDCASE.
      ENDIF.
      IF lv_is_first_severe_message = abap_true.
        ev_leading_content_id = lv_content_id.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _write_msg_into_table.
    DATA ls_gw_msg TYPE /iwbep/if_v4_runtime_types=>ty_s_message.
    DATA lv_count_unbound_messages TYPE i VALUE 0.

    CLEAR et_unbound_gw_messages.

    " return also transition messages with locations that could not be mapped to touched instance
    LOOP AT it_message ASSIGNING FIELD-SYMBOL(<s_msg>) WHERE locations IS INITIAL
                                                          OR lifetime = if_sadl_message_handler=>co_lifetime-transition.
      IF lv_count_unbound_messages = co_max_header_messages.
        RETURN.
      ENDIF.
      ls_gw_msg = map_message_to_gw_message( <s_msg> ).
      ls_gw_msg-target_value_control = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null. "Internal Incident: 2070120680: Initial location -> target should be set to NULL

      APPEND ls_gw_msg TO et_unbound_gw_messages.
      lv_count_unbound_messages += 1.
    ENDLOOP.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~create_entity.
    TRY.
        ms_sticky_session-success = abap_false.
        _get_req_detail_create_entity( EXPORTING io_request                   = io_request
                                       IMPORTING er_busi_data                 = DATA(lr_busi_data)
                                                 ev_entity_name               = DATA(lv_entity_name)
                                                 et_provided_elements         = DATA(lt_provided_elements)
                                                 et_navigation_steps          = DATA(lt_navigation_steps)
                                                 es_done_list                 = DATA(ls_done_list)
                                                 et_deep_create               = DATA(lt_deep_create_changeset)
                                                 ev_fill_data                 = DATA(lv_fill_data)
                                                 et_requested_elements        = DATA(lt_requested_elements)
                                                 ev_strict_handling_requested = DATA(lv_strict_handling_requested) ).
        IF  xsdbool( line_exists( lt_requested_elements[ table_line = if_sadl_special_field_names=>sap__messages ] ) ) = abap_false.
          DATA(lo_operation_messages)  = NEW cl_sadl_v4_operation_messages( ).
        ENDIF.
        IF lt_deep_create_changeset IS INITIAL.
          mo_dpc->create_entity( EXPORTING ir_data                      = lr_busi_data
                                           iv_entity_name               = lv_entity_name
                                           it_provided_elements         = lt_provided_elements
                                           iv_fill_data                 = lv_fill_data
                                           it_requested_elements        = lt_requested_elements
                                           it_navigation_steps          = lt_navigation_steps
                                           iv_is_sticky_session         = ms_sticky_session-is_active
                                           iv_strict_handling_requested = lv_strict_handling_requested
                                           io_message_target            = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( io_response )
                                                                                                            iv_target_entity_id          = CONV #( lv_entity_name ) )
                                           io_operation_messages        = lo_operation_messages
                                 IMPORTING et_message                   = DATA(lt_messages)
                                           ev_failure_reason            = DATA(lv_failure_reason)
                                           ev_failed                    = DATA(lv_failed) ).
        ELSE.
          LOOP AT lt_deep_create_changeset ASSIGNING FIELD-SYMBOL(<s_deep_create_changeset>).
            IF sy-tabix = 1.
              <s_deep_create_changeset>-operation_messages = lo_operation_messages.
            ENDIF.
            <s_deep_create_changeset>-message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( io_response )
                                                                                         iv_target_entity_id          = <s_deep_create_changeset>-entity_id ).
          ENDLOOP.
          mo_dpc->process_change_set( EXPORTING it_create                      = lt_deep_create_changeset
                                                iv_is_sticky_session           = ms_sticky_session-is_active
                                                iv_success_ends_sticky_session = abap_false
                                                iv_strict_handling_requested   = lv_strict_handling_requested
                                      IMPORTING et_message                     = lt_messages
                                                ev_failure_reason              = lv_failure_reason
                                                ev_failed                      = lv_failed ).
        ENDIF.
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    IF lv_failed = abap_true.
      DATA lt_touched_instances TYPE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances.
      IF lt_deep_create_changeset IS INITIAL.
        lt_touched_instances = VALUE #( ( entity_name    = lv_entity_name
                                          ir_key_data    = lr_busi_data
                                          message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_create( io_response )
                                                                                             iv_target_entity_id          = CONV #( lv_entity_name ) ) ) ).
      ELSE.
        _get_touched_inst_of_deep_cr( EXPORTING it_deep_create_changeset = lt_deep_create_changeset
                                                io_response              = io_response
                                      CHANGING  ct_touched_instances     = lt_touched_instances ).
      ENDIF.

      _raise( EXPORTING it_sadl_messages     = lt_messages
                        iv_failure_reason    = lv_failure_reason
              CHANGING  ct_touched_instances = lt_touched_instances ).
    ELSE.
      _write_msg_into_table( EXPORTING it_message             = lt_messages
                             IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).
      IF lines( lt_gw_messages ) < co_max_header_messages.  " cl_sadl_dev_prototypes=>v4_trans_message_target_in_hd( )
        _add_not_requested_msgs( EXPORTING io_operation_messages = lo_operation_messages
                                 CHANGING  ct_gw_messages        = lt_gw_messages ).
      ENDIF.
      io_response->set_header_messages( lt_gw_messages ).
      ASSIGN lr_busi_data->* TO FIELD-SYMBOL(<s_data>).
      io_response->set_busi_data( EXPORTING is_busi_data = <s_data> ).
      io_response->set_is_done( ls_done_list ).
      ms_sticky_session-success = boolc( lv_failed = abap_false ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~delete_entity.
    TRY.
        ms_sticky_session-success = abap_false.
        _get_req_detail_delete_entity( EXPORTING io_request                   = io_request
                                       IMPORTING er_key                       = DATA(lr_key)
                                                 ev_entity_name               = DATA(lv_entity_name)
                                                 es_done_list                 = DATA(ls_done_list)
                                                 es_precondition              = DATA(ls_precondition)
                                                 ev_strict_handling_requested = DATA(lv_strict_handling_requested) ).

        mo_dpc->delete_entity( EXPORTING ir_key                       = lr_key
                                         iv_entity_name               = lv_entity_name
                                         is_precondition              = ls_precondition
                                         iv_is_sticky_session         = ms_sticky_session-is_active
                                         iv_strict_handling_requested = lv_strict_handling_requested
                                         io_message_target            = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_delete( io_response )
                                                                                                          iv_target_entity_id          = CONV #( lv_entity_name ) )
                               IMPORTING et_message                   = DATA(lt_messages)
                                         ev_failure_reason            = DATA(lv_failure_reason)
                                         ev_failed                    = DATA(lv_failed) ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    IF lv_failed = abap_true.
      DATA(lo_msg_target_builder) = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_delete( io_response )
                                                                      iv_target_entity_id          = CONV #( lv_entity_name ) ).
      DATA(lt_touched_instances) = VALUE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances( ( entity_name    = lv_entity_name
                                                                                                 ir_key_data    = lr_key
                                                                                                 message_target = lo_msg_target_builder ) ). " G1YK024004

      _raise( EXPORTING it_sadl_messages     = lt_messages
                        iv_failure_reason    = lv_failure_reason
              CHANGING  ct_touched_instances = lt_touched_instances ).
    ELSE.
      _write_msg_into_table( EXPORTING it_message             = lt_messages
                             IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).
      io_response->set_header_messages( lt_gw_messages ).

      io_response->set_is_done( ls_done_list ).
      ms_sticky_session-success = boolc( lv_failed = abap_false ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~execute_action.
    TRY.
        ms_sticky_session-success = abap_false.
        _get_req_detail_execute_action( EXPORTING io_request                   = io_request
                                        IMPORTING es_action_metadata           = DATA(ls_action_metadata)
                                                  ev_entity_name               = DATA(lv_entity_name)
                                                  er_key                       = DATA(lr_key)
                                                  er_params                    = DATA(lr_params)
                                                  es_done_list                 = DATA(ls_done_list)
                                                  et_requested_element         = DATA(lt_requested_elements)
                                                  et_navigation_steps          = DATA(lt_navigation_steps)
                                                  ev_sticky_sess_effect        = DATA(lv_act_sticky_sess_effect)
                                                  ev_strict_handling_requested = DATA(lv_strict_handling_requested)
                                                  et_expand_step               = DATA(lt_expand_step)
                                                  es_precondition              = DATA(ls_precondition) ).

        _set_sticky_session_effect( lv_act_sticky_sess_effect ).
        IF ms_sticky_session-is_active = abap_false
          AND (    ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard
                OR ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_save ).
          RAISE EXCEPTION cx_sadl_gw_v4_bad_sticky_req=>session_end_while_session_off( ).
        ENDIF.

        " Check for idempotency in Sticky session case.
        io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).
        _evaluate_idp_in_sticky_sess( iv_idp_flag = ls_todo_list-process-idempotency ).

        " skip modify in case of sticky discard
        IF ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard.
          _sticky_call_badi_for_discard( ).
        ELSE.
          DATA(lv_messages_are_requested) = xsdbool( line_exists( lt_requested_elements[ table_line = if_sadl_special_field_names=>sap__messages ] ) ).
          DATA(lo_message_target) = _get_succ_action_msg_target( io_response           = io_response
                                                                 iv_messages_requested = lv_messages_are_requested
                                                                 is_action_metadata    = ls_action_metadata ).
          IF lv_messages_are_requested = abap_false.
            DATA(lo_operation_messages)  = NEW cl_sadl_v4_operation_messages( ).
          ENDIF.
          DATA(lt_changeset_action) = VALUE if_sadl_gw_v4_generic_dpc=>tt_action( ( entity_id               = lv_entity_name
                                                                                    name                    = ls_action_metadata-name
                                                                                    rs_importing_parameters = lr_params
                                                                                    navigation_steps        = lt_navigation_steps
                                                                                    expand_steps            = lt_expand_step
                                                                                    rt_key_values           = cl_sadl_gw_dpc_util=>create_table_with_one_key( lr_key )
                                                                                    requested_elements      = lt_requested_elements
                                                                                    message_target          = lo_message_target
                                                                                    operation_messages      = lo_operation_messages
                                                                                    preconditions           = VALUE #( ( ls_precondition ) ) ) ).
          mo_dpc->process_change_set( EXPORTING iv_is_sticky_session           = COND #( WHEN ms_sticky_session-is_active = abap_true
                                                                                         OR   ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session
                                                                                         THEN abap_true ELSE abap_false )
                                                iv_success_ends_sticky_session = COND #( WHEN ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_save
                                                                                         OR   ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard
                                                                                         THEN abap_true ELSE abap_false )
                                                iv_strict_handling_requested   = lv_strict_handling_requested
                                               " change states for actions are not yet implemented by GW
                                      IMPORTING et_message                     = DATA(lt_messages)
                                                ev_failed                      = DATA(lv_failed)
                                                ev_failure_reason              = DATA(lv_failure_reason)
                                      CHANGING  ct_action                      = lt_changeset_action ).
        ENDIF.
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    IF lv_failed = abap_true.
      lr_key =  cl_sadl_gw_dpc_util=>extract_from_table_with_1_key( lt_changeset_action[ 1 ]-rt_key_values ). " key may be filled by DPC in case of navigation + action
      IF lr_key IS BOUND." no target for failed static actions
        lo_message_target = _get_failed_action_msg_target( io_response        = io_response
                                                           is_action_metadata = ls_action_metadata
                                                           iv_entity_name     = lv_entity_name ).
        DATA(lt_touched_instances) = VALUE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances( ( entity_name    = lv_entity_name  " TODO: test RBA + action
                                                                                                   message_target = lo_message_target
                                                                                                   ir_key_data    = lr_key ) ).
      ENDIF.
      _raise( EXPORTING it_sadl_messages     = lt_messages
                        iv_failure_reason    = lv_failure_reason
              CHANGING  ct_touched_instances = lt_touched_instances ).
    ELSE.
      _write_msg_into_table( EXPORTING it_message             = lt_messages
                             IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).
      IF lines( lt_gw_messages ) < co_max_header_messages. " cl_sadl_dev_prototypes=>v4_trans_message_target_in_hd( )
        _add_not_requested_msgs( EXPORTING io_operation_messages = lo_operation_messages
                                 CHANGING  ct_gw_messages        = lt_gw_messages ).
      ENDIF.
      io_response->set_header_messages( lt_gw_messages ).

      IF lines( lt_changeset_action ) = 1.
        DATA(lr_data) = lt_changeset_action[ 1 ]-r_returning_parameters.
        ASSIGN lr_data->* TO FIELD-SYMBOL(<data>).
        IF <data> IS ASSIGNED.
          io_response->set_busi_data( <data> ).
        ENDIF.
      ENDIF.
      io_response->set_is_done( ls_done_list ).
      ms_sticky_session-success = boolc( lv_failed = abap_false ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~execute_function.
    TRY.
        _get_req_detail_exec_function( EXPORTING io_request           = io_request
                                       IMPORTING es_function_metadata = DATA(ls_function_metadata)
                                                 ev_entity_name       = DATA(lv_entity_name)
                                                 er_key               = DATA(lr_key)
                                                 et_navigation_steps  = DATA(lt_navigation_steps)
                                                 er_params            = DATA(lr_params)
                                                 es_done_list         = DATA(ls_done_list)
                                                 et_requested_element = DATA(lt_requested_elements) ).
        DATA(lv_messages_are_requested) = xsdbool( line_exists( lt_requested_elements[ table_line = if_sadl_special_field_names=>sap__messages ] ) ).
        DATA(lo_message_target) = _get_succ_function_msg_target( io_response           = io_response
                                                                 iv_messages_requested = lv_messages_are_requested
                                                                 is_function_metadata  = ls_function_metadata ).
        IF lv_messages_are_requested = abap_false.
          DATA(lo_operation_messages) = NEW cl_sadl_v4_operation_messages( ).
        ENDIF.
        mo_dpc->execute_function( EXPORTING iv_entity_name        = lv_entity_name
                                            iv_function           = ls_function_metadata-name
                                            ir_key                = lr_key
                                            ir_params             = lr_params
*                                           iv_return_data_type   = ls_function_ret_info-return_data_type_name
*                                           iv_is_structure       = ls_function_ret_info-is_structure
                                            it_requested_element  = lt_requested_elements
                                            it_navigation_steps   = lt_navigation_steps
                                            iv_is_sticky_session  = ms_sticky_session-is_active
                                            io_message_target     = lo_message_target
                                            io_operation_messages = lo_operation_messages
                                  IMPORTING er_data               = DATA(lr_ret_data)
                                            et_message            = DATA(lt_messages)
                                            ev_failure_reason     = DATA(lv_failure_reason)
                                            ev_failed             = DATA(lv_failed) ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    IF lv_failed = abap_true.
      IF lr_key IS BOUND. " no target for failed static functions
        lo_message_target = _get_failed_func_msg_target( io_response          = io_response
                                                         is_function_metadata = ls_function_metadata
                                                         iv_entity_name       = lv_entity_name ).
        DATA(lt_touched_instances) = VALUE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances( ( entity_name    = lv_entity_name
                                                                                                   message_target = lo_message_target
                                                                                                   ir_key_data    = lr_key ) ).
      ENDIF.
      _raise( EXPORTING it_sadl_messages     = lt_messages
                        iv_failure_reason    = lv_failure_reason
              CHANGING  ct_touched_instances = lt_touched_instances ).
    ELSE.
      _write_msg_into_table( EXPORTING it_message             = lt_messages
                             IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).
      IF lines( lt_gw_messages ) < co_max_header_messages.
        _add_not_requested_msgs( EXPORTING io_operation_messages = lo_operation_messages
                                 CHANGING  ct_gw_messages        = lt_gw_messages ).
      ENDIF.
      io_response->set_header_messages( lt_gw_messages ).

      ASSIGN lr_ret_data->* TO FIELD-SYMBOL(<ret_data>).
      io_response->set_busi_data( ia_busi_data = <ret_data> ).
      io_response->set_is_done( ls_done_list ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~read_entity.
    TRY.
        _get_req_detail_read_entity( EXPORTING io_request         = io_request
                                     IMPORTING ev_entity_name     = DATA(lv_entity_name)
                                               es_requested       = DATA(ls_requested)
                                               er_key             = DATA(lr_key)
                                               et_expand_step     = DATA(lt_expand_step)
                                               et_navigation_step = DATA(lt_navigation_step)
                                               es_done_list       = DATA(ls_done_list) ).

        cl_sadl_gw_v4_custom_options=>push_odata_read_entity( io_request ).
        TRY.
            mo_dpc->read_entity( EXPORTING iv_entity_name       = lv_entity_name
                                           ir_key               = lr_key
                                           is_requested         = ls_requested
                                           it_navigation_step   = lt_navigation_step
                                           it_expand_step       = lt_expand_step
                                           iv_is_sticky_session = ms_sticky_session-is_active
                                           io_message_target    = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_read( io_response )
                                                                                                    iv_target_entity_id          = CONV #( lv_entity_name ) )
                                 IMPORTING er_data              = DATA(lr_data) ).
          CLEANUP.
            cl_sadl_gw_v4_custom_options=>pop_odata_stack( ).
        ENDTRY.
        cl_sadl_gw_v4_custom_options=>pop_odata_stack( ).

      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    ASSIGN lr_data->* TO FIELD-SYMBOL(<s_data>).

    io_response->set_busi_data( <s_data> ).
    io_response->set_is_done( ls_done_list ).

  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~read_entity_list.
    cl_sadl_run_time_util=>start( cl_sadl_run_time_util=>cs_component-sadl ).
    FIELD-SYMBOLS <t_data> TYPE INDEX TABLE.
    TRY.

        _get_req_detail_read_elist( EXPORTING io_request                     = io_request
                                    IMPORTING ev_entity_name                 = DATA(lv_entity_name)
                                              es_paging                      = DATA(ls_paging)
                                              es_requested                   = DATA(ls_requested)
                                              eo_filter_provider             = DATA(lo_filter_provider)
                                              eo_aggregation_filter_provider = DATA(lo_having_filter_provider)
                                              et_sort_element                = DATA(lt_sort_element)
                                              et_navigation_step             = DATA(lt_navigation_step)
                                              et_expand_step                 = DATA(lt_expand_step)
                                              es_aggregation                 = DATA(ls_aggregation)
                                              es_done_list                   = DATA(ls_done_list)
                                              et_dynamic_property            = DATA(lt_dynamic_property)
                                              es_text_search                 = DATA(ls_text_search) ).

        cl_sadl_gw_v4_custom_options=>push_odata_read_entity_list( io_request ).
        TRY.
            mo_dpc->read_entity_list( EXPORTING iv_entity_name                 = lv_entity_name
                                                is_requested                   = ls_requested
                                                is_paging                      = ls_paging
                                                it_sort_element                = lt_sort_element
                                                io_filter_provider             = lo_filter_provider
                                                io_aggregation_filter_provider = lo_having_filter_provider
                                                it_navigation_step             = lt_navigation_step
                                                it_expand_step                 = lt_expand_step
                                                is_aggregation                 = ls_aggregation
                                                it_dynamic_property            = lt_dynamic_property
                                                is_text_search                 = ls_text_search
                                                iv_is_sticky_session           = ms_sticky_session-is_active
                                                io_message_target              = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_list( io_response )
                                                                                                                   iv_target_entity_id          = CONV #( lv_entity_name ) )
                                      IMPORTING er_data                        = DATA(lr_data)
                                                ev_count                       = DATA(lv_count) ).
          CLEANUP.
            cl_sadl_gw_v4_custom_options=>pop_odata_stack( ).
        ENDTRY.
        cl_sadl_gw_v4_custom_options=>pop_odata_stack( ).

      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.
    cl_sadl_run_time_util=>start( cl_sadl_run_time_util=>cs_component-ext ).
    IF ls_requested-fill_data = abap_true.
      ASSIGN lr_data->* TO <t_data>.
*      IF ls_done_list-navigation = abap_true AND <t_data> IS INITIAL.
*        " https://support.wdf.sap.corp/sap/support/message/1770538966
*        " if navigation does not return any data, SET_BUSI_DATA must not be used, but method SET_HAS_NO_TARGET_KEYS must be used instead.
*      But /IWBEP/IF_V4_RESP_ADV_LIST does not have method SET_HAS_NO_TARGET_KEYS, /IWBEP/IF_V4_RESPONSE_INFO~SET_BUSI_DATA (/IWBEP/CL_V4_RESPONSE_INFO)
*      ELSE.
      io_response->set_busi_data( <t_data> ).
*      ENDIF.
    ENDIF.
    IF ls_requested-fill_number_all_hits = abap_true.
      io_response->set_count( lv_count ).
    ENDIF.
    io_response->set_is_done( ls_done_list ).
    cl_sadl_run_time_util=>stop( cl_sadl_run_time_util=>cs_component-ext ).
    cl_sadl_run_time_util=>stop( cl_sadl_run_time_util=>cs_component-sadl ).

    cl_sadl_run_time_util=>get_times( IMPORTING ev_ext = DATA(lv_ext) ev_db = DATA(lv_db) ev_sadl = DATA(lv_sadl) ). " app cannot be set with add_runtime_statistics( )
    io_response->add_runtime_statistics( EXPORTING iv_framework_time = lv_sadl iv_database_time = lv_db iv_external_time = lv_ext ).
    cl_sadl_run_time_util=>reset( ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_advanced~update_entity.
    TRY.
        ms_sticky_session-success = abap_false.
        _get_req_detail_update_entity( EXPORTING io_request                   = io_request
                                       IMPORTING er_data                      = DATA(lr_data)
                                                 et_update_element            = DATA(lt_update_element)
                                                 ev_entity_name               = DATA(lv_entity_name)
                                                 es_done_list                 = DATA(ls_done_list)
                                                 es_precondition              = DATA(ls_precondition)
                                                 ev_fill_data                 = DATA(lv_fill_data)
                                                 et_requested_element         = DATA(lt_requested_element)
                                                 et_expand_step               = DATA(lt_expand_step)
                                                 ev_strict_handling_requested = DATA(lv_strict_handling_requested) ).
* TODO: Provide additional params
        IF xsdbool( line_exists( lt_requested_element[ table_line = if_sadl_special_field_names=>sap__messages ] ) ) = abap_false.
          DATA(lo_operation_messages)  = NEW cl_sadl_v4_operation_messages( ).
        ENDIF.
        mo_dpc->update_entity( EXPORTING ir_data                      = lr_data
                                         iv_fill_data                 = lv_fill_data
                                         it_requested_element         = lt_requested_element
                                         it_updated_element           = lt_update_element
                                         iv_entity_name               = lv_entity_name
                                         is_precondition              = ls_precondition
                                         iv_is_sticky_session         = ms_sticky_session-is_active
                                         iv_strict_handling_requested = lv_strict_handling_requested
                                         io_message_target            = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_update( io_response )
                                                                                                          iv_target_entity_id          = CONV #( lv_entity_name ) )
                                         io_operation_messages        = lo_operation_messages
                                         it_expand_step               = lt_expand_step
                               IMPORTING et_message                   = DATA(lt_messages)
                                         ev_failure_reason            = DATA(lv_failure_reason)
                                         ev_failed                    = DATA(lv_failed) ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    IF lv_failed = abap_true.
      DATA(lt_touched_instances) = VALUE cl_sadl_gw_dpc_msg_loc_chooser=>tt_touched_instances( ( entity_name    = lv_entity_name
                                                                                                 message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_update( io_response )
                                                                                                                                                    iv_target_entity_id         = CONV #( lv_entity_name ) )
                                                                                                 ir_key_data    = lr_data ) ).
      _raise( EXPORTING it_sadl_messages     = lt_messages
                        iv_failure_reason    = lv_failure_reason
              CHANGING  ct_touched_instances = lt_touched_instances ).
    ELSE.
      _write_msg_into_table( EXPORTING it_message             = lt_messages
                             IMPORTING et_unbound_gw_messages = DATA(lt_gw_messages) ).
      IF lines( lt_gw_messages ) < co_max_header_messages. " cl_sadl_dev_prototypes=>v4_trans_message_target_in_hd( )
        _add_not_requested_msgs( EXPORTING io_operation_messages = lo_operation_messages
                                 CHANGING  ct_gw_messages        = lt_gw_messages ).
      ENDIF.
      io_response->set_header_messages( lt_gw_messages ).

      _set_response_update_entity( ir_busi_data_out = lr_data
                                   io_response      = io_response ).
      io_response->set_is_done( ls_done_list ).
      ms_sticky_session-success = boolc( lv_failed = abap_false ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_batch.
    _check_sticky_actions_in_batch( io_request ).

    super->/iwbep/if_v4_dp_batch~process_batch( io_request  = io_request
                                                io_response = io_response ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_batch~process_change_set.
    ms_sticky_session-success = abap_false.

    TRY.
        " split all operations within this change set by their type and extract details
        _prepare_change_set( EXPORTING io_request         = io_request
                             IMPORTING es_change_set      = DATA(ls_change_set)
                                       et_action_metadata = DATA(lt_action_metadata) ).

        " in case of sticky discard skip modify
        IF ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard.
          _sticky_call_badi_for_discard( ).
        ELSE.
          " delegate execution to DPC and receive success/error messages of processing in return
          mo_dpc->process_change_set( EXPORTING it_update                      = ls_change_set-update
                                                it_create                      = ls_change_set-create
                                                it_delete                      = ls_change_set-delete
*                                               it_action_metadata             = ls_change_set-action_metadata
                                                iv_is_sticky_session           = COND #( WHEN ms_sticky_session-is_active = abap_true
                                                                                           OR ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session
                                                                                         THEN abap_true ELSE abap_false )
                                                iv_success_ends_sticky_session = COND #( WHEN ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_save
                                                                                         OR   ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard
                                                                                         THEN abap_true ELSE abap_false )
                                                iv_strict_handling_requested   = ls_change_set-strict_handling_requested
                                      IMPORTING et_message                     = DATA(lt_messages)
                                                ev_failure_reason              = DATA(lv_failure_reason)
                                                ev_failed                      = DATA(lv_failed)
                                      CHANGING  ct_action                      = ls_change_set-action ).
        ENDIF.
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    _post_process_change_set( EXPORTING iv_failed          = lv_failed
                                        iv_failure_reason  = lv_failure_reason
                                        it_messages        = lt_messages
                                        io_request         = io_request
                                        it_action_metadata = lt_action_metadata
                              CHANGING  cs_change_set      = ls_change_set ).

*----- additional save for idempotent requests
    IF lv_failed = abap_false.
      io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_process_list) ).
      IF ls_todo_process_list-process-idempotency = abap_true.
        io_response->save_for_idempotency( ).
        COMMIT WORK.
        io_response->set_is_done( EXPORTING is_todo_list = VALUE #( idempotency = abap_true ) ).
      ENDIF.
    ENDIF.

    ms_sticky_session-success = boolc( lv_failed = abap_false ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~commit.
    " Redefine method to avoid COMMIT. Commit is done by transaction manager: BOPF, RAP
    io_request->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).
    IF ls_todo_list-process-additional_data = abap_true. "idempotency case
      TRY.
          _evaluate_idp_in_sticky_sess( abap_true ).
        CATCH cx_sadl_gw_v4_not_implemented INTO DATA(lx_not_implemented).

*----- unexpected: idempotent request in sticky session must be rejected earlier: no intermediate COMMIT WORK allowed (locks!)
          RAISE SHORTDUMP lx_not_implemented.
      ENDTRY.
      super->/iwbep/if_v4_dp_process_steps~commit( io_request ).
    ENDIF.
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~finalize_request.
    super->/iwbep/if_v4_dp_process_steps~finalize_request( io_response ).
    _finalize_request( io_response ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~initialize.
    super->/iwbep/if_v4_dp_process_steps~initialize( io_request ).
    io_request->get_service_keys( IMPORTING et_involved_service_key = DATA(lt_service_key) es_leading_service_key = ms_service_key ).
    io_request->get_model_access( IMPORTING eo_model_access = mo_model_access ).
    io_request->get_hub_features( IMPORTING es_hub_features = ms_hub_features ).
    ms_service_features = _get_model( ms_service_key )->get_service_features( ).
    register_services( lt_service_key ).
  ENDMETHOD.


  METHOD /iwbep/if_v4_dp_process_steps~rollback.
    IF ms_sticky_session-is_active = abap_false AND
      ms_sticky_session-effect <> if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session.
      super->/iwbep/if_v4_dp_process_steps~rollback( ).
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
    super->constructor( ).
    DATA(lo_dpc) = NEW cl_sadl_gw_v4_generic_dpc( ).
    _set_dpc( lo_dpc ).
*    mo_exception_converter = NEW #( lo_dpc ).
  ENDMETHOD.


  METHOD convert_to_gw_exc_or_handle.
    mo_exception_converter->convert_to_gw_exc_or_handle( ix_sadl ).
  ENDMETHOD.


  METHOD initialize.
    cl_sadl_run_time_util=>start( cl_sadl_run_time_util=>cs_component-sadl ).
    TRY.
        mo_dpc->initialize( io_mdp = io_mdp iv_use_vcs = ms_service_features-use_vc_to_flag_omitted_data ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.

    ms_sticky_session-allowed = io_mdp->srvc_supports_sticky_session( ).

    mo_mdp = io_mdp.
    cl_sadl_run_time_util=>stop( cl_sadl_run_time_util=>cs_component-sadl ).
  ENDMETHOD.


  METHOD map_message_to_gw_message.

    _read_data_from_message( EXPORTING io_t100_message = is_msg-message
                             IMPORTING ev_msg_id       = rs_gw_msg-class
                                       ev_msg_number   = rs_gw_msg-number
                                       ev_msg_v1       = rs_gw_msg-variable_1
                                       ev_msg_v2       = rs_gw_msg-variable_2
                                       ev_msg_v3       = rs_gw_msg-variable_3
                                       ev_msg_v4       = rs_gw_msg-variable_4 ).
    rs_gw_msg-severity = SWITCH #( is_msg-severity
                                    WHEN if_sadl_message_handler=>co_severity-error       THEN CONV #( if_rap_message_handler=>error )
                                    WHEN if_sadl_message_handler=>co_severity-warning     THEN CONV #( if_rap_message_handler=>warning )
                                    WHEN if_sadl_message_handler=>co_severity-information THEN CONV #( if_rap_message_handler=>info )
                                    WHEN if_sadl_message_handler=>co_severity-success     THEN CONV #( if_rap_message_handler=>success ) ).

  ENDMETHOD.


  METHOD register_services.
    RETURN." intended to be overwritten
  ENDMETHOD.


  METHOD _add_crea_and_resolve_children.
    IF is_deep_data_description-has_children = abap_true.
      ASSIGN COMPONENT co_include_name OF STRUCTURE cs_busi_data TO FIELD-SYMBOL(<s_node_busi_data>).
      ASSERT sy-subrc = 0.
    ELSE.
      ASSIGN cs_busi_data TO <s_node_busi_data>.
    ENDIF.
    IF ms_service_features-use_vc_to_flag_omitted_data = abap_true.
      DATA(lt_provided_elements) = _get_value_controlled_elem( is_deep_data_description = is_deep_data_description
                                                               is_node_busi_data        = <s_node_busi_data> ).
      IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
        NEW cl_sadl_gw_v4_stream_prop_map( mo_mdp )->handle_stream_prop_map_inbound( EXPORTING iv_entity_name       = is_deep_data_description-entity_name
                                                                                     CHANGING  cs_busi_data         = <s_node_busi_data>
                                                                                               ct_provided_elements = lt_provided_elements ).
      ELSE.
        NEW cl_sadl_gw_v4_null_val_ind_map( mo_mdp )->map_inbound_vcp_to_nvi( EXPORTING iv_entity_name       = is_deep_data_description-entity_name
                                                                                        it_provided_elements = lt_provided_elements
                                                                              CHANGING  cs_busi_data         = <s_node_busi_data> ).
      ENDIF.
      _clear_vcs( CHANGING cs_data = <s_node_busi_data> ).
    ELSE.
      lt_provided_elements = is_deep_data_description-provided_elements.
    ENDIF.
    APPEND VALUE #( entity_id         = is_deep_data_description-entity_name
                    rs_entity_data    = REF #( <s_node_busi_data> )
                    provided_elements = lt_provided_elements
                    fill_data         = abap_true
                    source            = VALUE #( association_name = is_deep_data_description-nav_prop
                                                 entity_id        = iv_parent_entity_name
                                                 tabix            = iv_source_tabix ) ) TO ct_deep_create.
    IF is_deep_data_description-has_children = abap_true.
      _resolve_deep_create( EXPORTING it_deep_data_description = it_deep_data_description
                                      ir_busi_data             = REF #( cs_busi_data )
                                      iv_parent_entity_name    = is_deep_data_description-entity_name
                                      iv_parent_id             = is_deep_data_description-id
                                      iv_source_tabix          = sy-tabix
                            CHANGING  ct_deep_create           = ct_deep_create ).
    ENDIF.
*  ENDMETHOD.
*
*
*  METHOD _aggregation_alias_exists.
*    LOOP AT is_aggregation-elements ASSIGNING FIELD-SYMBOL(<s_element>).
*      IF <s_element>-element <> <s_element>-alias.
*        rv_aggregation_alias_exists = abap_true.
*        EXIT.
*      ENDIF.
*    ENDLOOP.
  ENDMETHOD.


  METHOD _add_not_requested_msgs.
    CHECK io_operation_messages IS BOUND. " could be not bound in case of sticky session with ends_session_with_discard.
    DATA(lv_count_messages) = lines( ct_gw_messages ).
    LOOP AT io_operation_messages->get_messages( ) ASSIGNING FIELD-SYMBOL(<s_msg>).
      IF lv_count_messages = co_max_header_messages.
        RETURN.
      ENDIF.
      APPEND <s_msg> TO ct_gw_messages.
      lv_count_messages += 1.
    ENDLOOP.
  ENDMETHOD.


  METHOD _check_sticky_actions_in_batch.
    DATA lt_sticky_actions TYPE cl_sadl_gw_v4_sticky_session=>tt_sticky_session_actions.

*----- check only required for services supporting sticky session
    CHECK ms_sticky_session-allowed = abap_true.

    " Collect all actions with a special sticky session effect from the given batch request...
    io_batch_request->get_operations_info( IMPORTING et_operation_info = DATA(lt_operation_info) ).
    DATA(lv_max_changeset_id) = 0.

    LOOP AT lt_operation_info ASSIGNING FIELD-SYMBOL(<s_operation_info>)
     WHERE changeset_id IS NOT INITIAL. "only CUDE operations matter, for queries the changeset_id is initial

      lv_max_changeset_id = nmax( val1 = lv_max_changeset_id
                                  val2 = <s_operation_info>-changeset_id ).

      io_batch_request->get_operation( EXPORTING iv_operation_id = <s_operation_info>-id
                                       IMPORTING es_operation    = DATA(ls_operation) ).

      IF ls_operation-kind = /iwbep/if_v4_runtime_types=>gcs_operation_kinds-execute_action.

        DATA ls_sticky_action LIKE LINE OF lt_sticky_actions.
        ls_sticky_action-changeset = <s_operation_info>-changeset_id. "== changeset number
        _get_req_detail_execute_action( EXPORTING io_request            = CAST #( ls_operation-request )
                                        IMPORTING es_action_metadata    = DATA(ls_action_metadata)
                                                  ev_entity_name        = ls_sticky_action-entity
                                                  ev_sticky_sess_effect = ls_sticky_action-effect ).
        ls_sticky_action-name = ls_action_metadata-name.

        IF ls_sticky_action-effect <> if_sadl_entity=>co_action_sticky_sess_effect-neutral.
          LOOP AT lt_operation_info TRANSPORTING NO FIELDS WHERE changeset_id = <s_operation_info>-changeset_id AND id <> <s_operation_info>-id ##NEEDED.
          ENDLOOP.
          ls_sticky_action-alone_in_changeset = xsdbool( sy-subrc <> 0 ).
          INSERT ls_sticky_action INTO TABLE lt_sticky_actions.
        ENDIF.

      ENDIF.
    ENDLOOP.

    " ...then execute checks:
    cl_sadl_gw_v4_sticky_session=>check_batch_req_consistency( it_sticky_actions    = lt_sticky_actions
                                                               iv_last_changeset    = lv_max_changeset_id
                                                               iv_is_session_active = ms_sticky_session-is_active ).

  ENDMETHOD.


  METHOD _convert_entity_set_i2e.
    IF is_service_key IS INITIAL.
      DATA(ls_service_key) = ms_service_key.
    ELSE.
      ls_service_key = is_service_key.
    ENDIF.
    _get_model( ls_service_key )->get_entity_set( iv_internal_name )->get_provider_info( IMPORTING ev_provider_info = rv_external_name ).
  ENDMETHOD.


  METHOD _convert_entity_type_i2e.
    IF is_service_key IS INITIAL.
      DATA(ls_service_key) = ms_service_key.
    ELSE.
      ls_service_key = is_service_key.
    ENDIF.
    _get_model( ls_service_key )->get_entity_type( iv_internal_name )->get_provider_info( IMPORTING ev_provider_info = rv_external_name ).
  ENDMETHOD.


  METHOD _create_key_structure_ref.
    TRY.
        rr_key = mo_dpc->create_key_structure_ref( iv_entity_name ).
      CATCH BEFORE UNWIND cx_sadl_static cx_sadl_contract_violation cx_sadl_no_check INTO DATA(lx_sadl).
        convert_to_gw_exc_or_handle( lx_sadl ).
    ENDTRY.
  ENDMETHOD.


  METHOD _does_action_return_collection.
    DATA(lo_return) = io_action->get_return( ).
    IF lo_return IS BOUND.
      rv_is_collection = lo_return->is_collection( ).
    ENDIF.
  ENDMETHOD.


  METHOD _evaluate_idp_in_sticky_sess.
    CHECK iv_idp_flag = abap_true.
    IF ms_sticky_session-is_active = abap_true OR
       ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session.
      RAISE EXCEPTION TYPE cx_sadl_gw_v4_not_implemented
        EXPORTING
          textid = cx_sadl_gw_v4_not_implemented=>idempotency_in_sticky_session.
    ENDIF.
  ENDMETHOD.


  METHOD _finalize_request.
    CHECK ms_sticky_session-allowed = abap_true.
    CASE ms_sticky_session-effect.
      WHEN if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_discard
      OR if_sadl_entity=>co_action_sticky_sess_effect-ends_session_with_save.
        IF ms_sticky_session-success = abap_true.
          io_response->end_stateful_session( ).
          ms_sticky_session-is_active = abap_false.
        ENDIF.
      WHEN if_sadl_entity=>co_action_sticky_sess_effect-starts_or_continues_session.
        IF ms_sticky_session-is_active <> abap_true AND ms_sticky_session-success = abap_true.
          io_response->start_stateful_session( ).
          ms_sticky_session-is_active = abap_true.
        ENDIF.
    ENDCASE.
    ms_sticky_session-effect = if_sadl_entity=>co_action_sticky_sess_effect-neutral.
  ENDMETHOD.


  METHOD _generate_child_id.
    rv_child_id = iv_child_number.
    CONDENSE rv_child_id.
    IF NOT iv_parent_id IS INITIAL.
      rv_child_id = iv_parent_id && '_' && rv_child_id.
    ENDIF.
    DATA(compare) = COND #( WHEN iv_parent_id IS NOT INITIAL THEN iv_parent_id && '_' ) && iv_child_number.
    ASSERT compare = rv_child_id.

*    IF strlen( co_include_name && rv_child_id ) > lc_30. "Hash-Crop
*      DATA(lv_hashed_child_id) = get_hash( rv_child_id ).
*      DATA(lv_max_len) = lc_30 - strlen( co_include_name ).
*      rv_child_id = lv_hashed_child_id(lv_max_len).
*    ENDIF.
*  ENDMETHOD.
*
*  METHOD get_hash.
*    TRY.
*        cl_abap_message_digest=>calculate_hash_for_char( EXPORTING if_data       = iv_value
*                                                         IMPORTING ef_hashstring = DATA(lv_hashstring) ).
*      CATCH cx_abap_message_digest.
*        ASSERT 1 = 0.
*    ENDTRY.
*    rv_hash = lv_hashstring.
  ENDMETHOD.


  METHOD _get_action_info.
    CLEAR: es_action_info, eo_action.
    DATA(lo_model) = _get_model( is_service_key ).
    io_action_nav_node->get_action_name( IMPORTING ev_action_name = DATA(lv_int_action_name) ).
    eo_action = lo_model->get_action( lv_int_action_name ).
    ASSERT eo_action IS BOUND OR cx_sadl_unexpected_state=>raise_because( |Action { lv_int_action_name } not in model| ) ##NO_TEXT.
    eo_action->get_provider_info( IMPORTING ev_provider_info = es_action_info-name ).
    es_action_info-return_entity_name = _get_action_return_entity( eo_action ).
    es_action_info-returns_collection = _does_action_return_collection( eo_action ).

    IF eo_action->is_bound( ).
      eo_action->get_parameters( IMPORTING et_parameter = DATA(lt_parameter) ).
      LOOP AT lt_parameter INTO DATA(lo_parameter) ##INTO_OK.
        IF lo_parameter->is_binding_parameter( ) = abap_true.
          es_action_info-binding_parameter_name = lo_parameter->get_internal_name( ).
          es_action_info-binding_param_is_collection = lo_parameter->is_collection( ).
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD _get_action_parameters.
    DATA lt_operation_params TYPE tt_operation_parameters.

    CLEAR: er_params, ev_params_done.
    io_action->get_parameters( IMPORTING et_parameter = DATA(lt_parameter) ).
    LOOP AT lt_parameter INTO DATA(lo_parameter) ##INTO_OK.
      IF lo_parameter->is_binding_parameter( ) = abap_true. " if action is a bound action, it contains the entity set as binding parameter CL_SADL_GW_V4_ACTION_BUILDER->_add_as_action
        DELETE lt_parameter.
        CONTINUE.
      ENDIF.

      APPEND lo_parameter TO lt_operation_params.
    ENDLOOP.

    IF lt_operation_params IS NOT INITIAL.
      _map_operation_parameters( EXPORTING it_operation_parameters = lt_operation_params
                                           iv_entity_name          = iv_entity_name
                                           iv_sadl_action_name     = iv_sadl_action_name
                                           io_navigation_node      = io_navigation_node
                                 IMPORTING er_params               = er_params ).
    ENDIF.
    ev_params_done = abap_true.
  ENDMETHOD.


  METHOD _get_action_return_entity.
    DATA(lo_return) = io_action->get_return( ).
    IF lo_return IS BOUND.
      lo_return->get_return_type_kind( IMPORTING ev_return_type_kind = DATA(lv_return_type_kind) ).
      CASE lv_return_type_kind.
        WHEN /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-primitive
          OR /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-complex.
        WHEN /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-entity.
          lo_return->get_entity_type( )->get_provider_info( IMPORTING ev_provider_info = rv_return_entity_name ).
        WHEN OTHERS.
          IF NOT lv_return_type_kind IS INITIAL.
            RAISE EXCEPTION TYPE lcx_unknown_return_kind.
          ENDIF.
      ENDCASE.
    ENDIF.
  ENDMETHOD.


  METHOD _get_corresponding_structdescr.
    CASE TYPE OF io_complexdescr.
      WHEN TYPE cl_abap_structdescr INTO ro_structdescr .
      WHEN TYPE cl_abap_tabledescr.
        ro_structdescr ?= CAST cl_abap_tabledescr( io_complexdescr )->get_table_line_type( ).
    ENDCASE.
    ASSERT ro_structdescr IS BOUND.
  ENDMETHOD.


  METHOD _get_deep_data_description.
    DATA lt_components TYPE cl_abap_structdescr=>component_table.

    CLEAR: et_deep_data_description.

    INSERT VALUE #( name       = co_include_name
                    type       = _get_corresponding_structdescr( io_parent_descr )
                    as_include = abap_true ) INTO TABLE lt_components.

    LOOP AT it_data_desc_node ASSIGNING FIELD-SYMBOL(<o_data_desc_node>).
      DATA(lv_id) = _generate_child_id( EXPORTING iv_parent_id    = iv_parent_id
                                                  iv_child_number = sy-tabix ).

      <o_data_desc_node>->get_todos( IMPORTING es_todo_list = DATA(ls_todo_list) ).

      <o_data_desc_node>->get_navigation_property_name( IMPORTING ev_navigation_prop_name = DATA(lv_nav_pro_name) ).
      DATA(lo_nav_prop) = <o_data_desc_node>->get_navigation_property( ).
      lo_nav_prop->get_target_service_key( IMPORTING es_service_key = DATA(ls_service_key) ).
      DATA(lv_entity_type_name) = lo_nav_prop->get_target_entity_type( )->get_internal_name( ).
      DATA(lv_entity_name) = _convert_entity_type_i2e( iv_internal_name = lv_entity_type_name
                                                       is_service_key   = ls_service_key ). " rely on internal entity type name = entity set name

      DATA(lv_is_table) = xsdbool( cl_sadl_cardinality=>get_for_gw_v4_multiplicity( lo_nav_prop->get_target_multiplicity( ) ) <> if_sadl_entity=>co_cardinality-one ).

      TRY.
          IF ms_service_features-use_vc_to_flag_omitted_data = abap_true
          AND mo_dpc->has_value_control( lv_entity_name ).
            DATA(lr_busi_data) = COND #( WHEN lv_is_table = abap_true THEN mo_dpc->create_data_table_ref_with_vc( lv_entity_name )
                                                                      ELSE mo_dpc->create_data_struct_ref_with_vc( lv_entity_name ) ).
          ELSE.
            lr_busi_data = COND #( WHEN lv_is_table = abap_true THEN mo_dpc->create_data_table_ref( lv_entity_name )
                                                                ELSE mo_dpc->create_data_structure_ref( lv_entity_name ) ).
*             when VCS not supported, no null value indicator mapping needed, so no entity_name required in _get_provided_elements
            IF ls_todo_list-partial_busi_data = abap_true.
              DATA(lt_provided_property_path) = _get_provided_elements( from_deep_data_desc_node = <o_data_desc_node> ).
            ELSE.
              lt_provided_property_path = _get_all_elements( lv_entity_type_name ).
            ENDIF.
          ENDIF.
        CATCH BEFORE UNWIND cx_sadl_static cx_sadl_no_check INTO DATA(lx_sadl).
          convert_to_gw_exc_or_handle( lx_sadl ).
      ENDTRY.
      DATA(lo_rtti) = cl_abap_typedescr=>describe_by_data_ref( lr_busi_data ).

      <o_data_desc_node>->has_children( IMPORTING ev_has_children = DATA(lv_has_children) ).
      IF lv_has_children = abap_true.
        <o_data_desc_node>->get_children( IMPORTING et_child = DATA(lt_data_desc_node) ).
        _get_deep_data_description( EXPORTING it_data_desc_node        = lt_data_desc_node
                                              io_parent_descr          = CAST #( lo_rtti )
                                              iv_parent_id             = lv_id
                                    IMPORTING eo_deep_data_rtti        = DATA(lo_deep_rtti)
                                              et_deep_data_description = DATA(lt_deep_data_description) ).
        lo_rtti = lo_deep_rtti.
      ENDIF.
      <o_data_desc_node>->set_is_done( is_done_list = VALUE #( has_child         = lv_has_children
                                                               partial_busi_data = ls_todo_list-partial_busi_data ) ).
      INSERT VALUE #( name = lv_nav_pro_name
                      type = CAST #( lo_rtti ) ) INTO TABLE lt_components.
      INSERT VALUE #( id                = lv_id
                      parent_id         = iv_parent_id
                      nav_prop          = lv_nav_pro_name
                      entity_name       = lv_entity_name
                      provided_elements = lt_provided_property_path
                      is_table          = lv_is_table
                      has_children      = lv_has_children
                    ) INTO TABLE et_deep_data_description.
      IF lv_has_children = abap_true.
        INSERT LINES OF lt_deep_data_description INTO TABLE et_deep_data_description.
        CLEAR: lt_deep_data_description, lv_has_children.
      ENDIF.
    ENDLOOP.

    DATA(lo_struct_rtti) = cl_abap_structdescr=>get( lt_components ).
    eo_deep_data_rtti = COND #( WHEN io_parent_descr->kind = io_parent_descr->kind_table THEN cl_abap_tabledescr=>get( lo_struct_rtti )
                                                                                         ELSE lo_struct_rtti ).
  ENDMETHOD.


  METHOD _get_expand_steps.
    DATA lv_id    TYPE string.
    LOOP AT it_expand_node INTO DATA(lo_expand_node) ##INTO_OK.
      lv_id = sy-tabix.
      CONDENSE lv_id.
      IF NOT iv_parent_id IS INITIAL.
        lv_id = iv_parent_id && '.' && lv_id.
      ENDIF.
      DATA(lo_nav_prop) = lo_expand_node->get_navigation_property( ).
      lo_expand_node->get_todos( IMPORTING es_todo_list = DATA(ls_exp_todo_list) ).
      lo_expand_node->get_top( IMPORTING ev_top = DATA(lv_top) ).
      lo_expand_node->get_skip( IMPORTING ev_skip = DATA(lv_skip) ).
      DATA(lv_entity_type) = lo_nav_prop->get_target_entity_type( )->get_internal_name( ).
      lo_nav_prop->get_target_service_key( IMPORTING es_service_key = DATA(ls_service_key) ).
      DATA(lo_filter_tree) = lo_expand_node->get_filter_tree( ).
      DATA(lv_entity_name) = _convert_entity_type_i2e( iv_internal_name = lv_entity_type is_service_key = ls_service_key ).  " rely on internal entity type name = entity set name
      APPEND VALUE #( id                 = lv_id
                      parent_id          = iv_parent_id
                      nav_prop_name      = lo_nav_prop->get_internal_name( )
                      association_name   = lo_nav_prop->get_internal_name( )
                      cardinality        = SWITCH #( lo_nav_prop->get_target_multiplicity( )
                                             WHEN /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one_optional  THEN if_sadl_entity=>co_cardinality-zero_to_one
                                             WHEN /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_one           THEN if_sadl_entity=>co_cardinality-one
                                             WHEN /iwbep/if_v4_med_element=>gcs_med_nav_multiplicity-to_many_optional THEN if_sadl_entity=>co_cardinality-zero_to_many )
                      entity_name        = lv_entity_name
                      expand_is_needed   = abap_true "ls_exp_todo_list-expand
                      top                = COND #( WHEN ls_exp_todo_list-top = abap_true                   THEN lv_top ELSE -1 )
                      skip               = COND #( WHEN ls_exp_todo_list-skip = abap_true AND lv_skip >= 0 THEN lv_skip ELSE 0 )
                      text_search        = COND #( WHEN ls_exp_todo_list-search = abap_true THEN _get_text_search( lo_expand_node->get_search_tree( ) ) )
                      o_filter_condition = COND #( WHEN lo_filter_tree IS BOUND THEN cl_sadl_condition_provdr_fctry=>create_for_table(
                                                          NEW cl_sadl_gw_v4_dpc_adapt_filter( )->get_filter_condition_provider( lo_filter_tree ) ) ) )
      TO ct_expand_step ASSIGNING FIELD-SYMBOL(<s_expand_step>).
      lo_expand_node->get_orderby( IMPORTING et_orderby_property = DATA(lt_orderby_property) ).
      LOOP AT lt_orderby_property INTO DATA(ls_orderby_property) ##INTO_OK.
        APPEND VALUE #( element_name = ls_orderby_property-name
                        descending   = ls_orderby_property-descending ) TO <s_expand_step>-t_sort_element.
      ENDLOOP.
      CLEAR lt_orderby_property.

      IF ls_exp_todo_list-select = abap_true.
        DATA(lt_selected_property) = _get_selected_properties( from_expand_node = lo_expand_node
                                                               iv_entity_name   = lv_entity_name ).
        <s_expand_step>-requested_fields = _get_requested_elements( lt_selected_property ).
      ENDIF.
      IF cl_sadl_dev_prototypes=>v4_list_of_selected_properties( )
      AND <s_expand_step>-requested_fields IS INITIAL. " several SADL tests set process-select = abap_true without providing selected properties
        <s_expand_step>-requested_fields = _get_requested_elems_per_deflt( iv_entity_type = lv_entity_type
                                                                           is_service_key = ls_service_key ).
      ENDIF.
      CLEAR lt_selected_property.

      IF ls_exp_todo_list-expand = abap_true.
        lo_expand_node->get_children( IMPORTING et_child = DATA(lt_child) ).
        _get_expand_steps( EXPORTING it_expand_node = lt_child
                                     iv_parent_id   = lv_id
                           CHANGING  ct_expand_step = ct_expand_step ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_failed_action_msg_target.
    IF is_action_metadata-binding_parameter_name IS NOT INITIAL AND is_action_metadata-binding_param_is_collection = abap_false.
      ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_action_param(
                                                                                             io_response = io_response
                                                                                             iv_parameter_name = is_action_metadata-binding_parameter_name )
                                                            iv_target_entity_id          = CONV #( iv_entity_name ) ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_failed_func_msg_target.
    IF is_function_metadata-binding_parameter_name IS NOT INITIAL AND is_function_metadata-binding_param_is_collection = abap_false.
      ro_message_target = NEW cl_sadl_gw_v4_dpc_msg_target( io_msg_target_entity_factory = cl_sadl_gw_v4_msg_trgt_facade=>factory_for_function_param(
                                                                                             io_response = io_response
                                                                                             iv_parameter_name = is_function_metadata-binding_parameter_name )
                                                            iv_target_entity_id         = CONV #( iv_entity_name ) ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_filter_apply_details.
    CLEAR: es_aggregation, eo_aggregation_filter_provider, eo_filter_provider, et_apply_result_elements, et_dynamic_property.

    IF is_todo_list-process-apply = abap_true.
      DATA(lo_apply_root_node) = io_request->get_apply_tree( ).
      NEW cl_sadl_gw_v4_dpc_adapt_apply( )->get_apply_details( EXPORTING io_entity_type           = io_entity_type
                                                                         io_apply_node            = lo_apply_root_node
                                                                         iv_entity_id             = CONV #( iv_entity_name )
                                                               IMPORTING es_aggregation           = es_aggregation
                                                                         et_result_elements       = et_apply_result_elements " grouped elements + aggregate result elements
                                                                         et_filter_condition      = DATA(lt_filter_condition)
                                                                         et_aggr_filter_condition = DATA(lt_aggregation_condition)
                                                                         et_dynamic_properties    = et_dynamic_property ).
      cs_done_list-apply = abap_true.
    ENDIF.

    IF is_todo_list-process-filter = abap_true.
      DATA(lo_filter_tree) = io_request->get_filter_tree( ).
      DATA(lt_dollar_filter_condition) = NEW cl_sadl_gw_v4_dpc_adapt_filter( )->get_filter_condition_provider( lo_filter_tree ).
      IF es_aggregation IS INITIAL.
        cl_sadl_condition_util=>add_condition( EXPORTING it_condition = lt_dollar_filter_condition
                                               CHANGING  ct_condition = lt_filter_condition ).
      ELSE.
        cl_sadl_condition_util=>add_condition( EXPORTING it_condition = lt_dollar_filter_condition
                                               CHANGING  ct_condition = lt_aggregation_condition ).
      ENDIF.
      cs_done_list-filter = abap_true.
    ENDIF.

    IF et_apply_result_elements IS NOT INITIAL.
      ct_requested = et_apply_result_elements. " grouped elements + aggregate result elements

      IF lt_aggregation_condition IS NOT INITIAL.
        _remove_filter_elems_aggr_away( EXPORTING it_apply_result_elements = et_apply_result_elements
                                        CHANGING  condition                = lt_aggregation_condition ).
      ENDIF.

      " Remove aggregation if grouped by all key elements
      IF _is_grouped_by_all_key_elems( it_apply_result_elements = et_apply_result_elements
                                       is_aggregation = es_aggregation
                                       io_entity_type = io_entity_type ).
        cl_sadl_condition_util=>add_condition( EXPORTING it_condition = lt_aggregation_condition
                                               CHANGING  ct_condition = lt_filter_condition ).
        CLEAR lt_aggregation_condition.
        CLEAR es_aggregation.
      ENDIF.
    ENDIF.

    IF lt_filter_condition IS NOT INITIAL.
      eo_filter_provider = cl_sadl_condition_provdr_fctry=>create_for_table( lt_filter_condition ).
    ENDIF.

    IF lt_aggregation_condition IS NOT INITIAL.
      eo_aggregation_filter_provider = cl_sadl_condition_provdr_fctry=>create_for_aggregation_filter( lt_aggregation_condition ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_function_info.
    CLEAR: es_function_info, eo_function.
    DATA(lo_model) = _get_model( is_service_key ).
    io_function_nav_node->get_function_name( IMPORTING ev_function_name = DATA(lv_int_function_name) ).
    eo_function = lo_model->get_function( lv_int_function_name ).
    ASSERT eo_function IS BOUND OR cx_sadl_unexpected_state=>raise_because( |Function { lv_int_function_name } not in model| ) ##NO_TEXT.
    eo_function->get_provider_info( IMPORTING ev_provider_info = es_function_info-name ).
    es_function_info-return_entity_name = _get_function_return_entity( eo_function ).
    IF eo_function->is_bound( ).
      eo_function->get_parameters( IMPORTING et_parameter = DATA(lt_parameter) ).
      LOOP AT lt_parameter INTO DATA(lo_parameter) ##INTO_OK.
        IF lo_parameter->is_binding_parameter( ) = abap_true.
          es_function_info-binding_parameter_name = lo_parameter->get_internal_name( ).
          es_function_info-binding_param_is_collection = lo_parameter->is_collection( ).
          EXIT.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD _get_function_parameters.
*    DATA lt_field_meta TYPE tt_field_meta.
    DATA lt_operation_params TYPE tt_operation_parameters.

    CLEAR: er_params, ev_params_done.
    io_function->get_parameters( IMPORTING et_parameter = DATA(lt_parameter) ).
    LOOP AT lt_parameter INTO DATA(lo_parameter) ##INTO_OK.
      IF lo_parameter->is_binding_parameter( ) = abap_true. " if function is a bound action, it contains the entity set as binding parameter
        DELETE lt_parameter.
        CONTINUE.
      ENDIF.

*      IF cl_sadl_dev_prototypes=>v4_action_parameter_container( ).
      APPEND lo_parameter TO lt_operation_params.
*      ELSE.
*        APPEND _get_function_param_field_info( io_parameter = lo_parameter ) TO lt_field_meta.
*      ENDIF.
    ENDLOOP.

*    IF cl_sadl_dev_prototypes=>v4_action_parameter_container( ).
    IF lt_operation_params IS NOT INITIAL.
      _map_operation_parameters( EXPORTING it_operation_parameters = lt_operation_params
                                           iv_entity_name          = iv_entity_name
                                           iv_sadl_action_name     = iv_sadl_function_name
                                           io_function_request     = io_function_request
                                           io_navigation_node      = io_navigation_node
                                 IMPORTING er_params               = er_params ).
    ENDIF.
*    ELSE.
*      IF lt_field_meta IS NOT INITIAL.
*        _map_action_parameter( EXPORTING iv_entity_name      = iv_entity_name
*                                         iv_sadl_action_name = iv_sadl_function_name
*                                         io_function_request = io_function_request
*                                         io_navigation_node  = io_navigation_node
*                                         it_field_meta       = lt_field_meta
*                               IMPORTING er_params           = er_params ).
*      ENDIF.
*    ENDIF.
    ev_params_done = abap_true.
  ENDMETHOD.


  METHOD _get_function_return_entity.
    DATA(lo_return) = io_function->get_return( ).
    IF lo_return IS BOUND.
      lo_return->get_return_type_kind( IMPORTING ev_return_type_kind = DATA(lv_return_type_kind) ).
      CASE lv_return_type_kind.
        WHEN /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-primitive
         OR /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-complex.
        WHEN /iwbep/if_v4_med_element=>gcs_med_argument_type_kind-entity.
          lo_return->get_entity_type( )->get_provider_info( IMPORTING ev_provider_info = rv_return_entity_name ).
        WHEN OTHERS.
          IF NOT lv_return_type_kind IS INITIAL.
            RAISE EXCEPTION TYPE lcx_unknown_return_kind.
          ENDIF.
      ENDCASE.
    ENDIF.
  ENDMETHOD.


  METHOD _get_http_status_for_failure.
    CASE iv_failure_reason.
      WHEN if_sadl_changeset=>co_failure_reason-conflict.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-conflict.
      WHEN if_sadl_changeset=>co_failure_reason-forbidden.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-forbidden.
      WHEN if_sadl_changeset=>co_failure_reason-locked.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-locked.
      WHEN if_sadl_changeset=>co_failure_reason-not_found.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-not_found.
      WHEN if_sadl_changeset=>co_failure_reason-precondition_failed
        OR if_sadl_changeset=>co_failure_reason-message_in_strict_mode.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-precondition_failed.
      WHEN if_sadl_changeset=>co_failure_reason-precondition_required.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-precondition_required.
      WHEN if_sadl_changeset=>co_failure_reason-operation_disabled.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-unprocessable_entity.
      WHEN if_sadl_changeset=>co_failure_reason-field_readonly.
        rv_http_status_code = /iwbep/cx_gateway=>gcs_http_status_codes-unprocessable_entity.
    ENDCASE.
  ENDMETHOD.


  METHOD process_preconditions.
    IF todo_flag = abap_true.
      IF gateway_conditions-if_match_etag = /iwbep/if_v4_runtime_types=>gc_etag_any_value.
        sadl_instance_precondition = VALUE #( type = if_sadl_changeset=>co_instance_precondition_type-any_exists ).
      ELSE.
        sadl_instance_precondition = VALUE #( type         = if_sadl_changeset=>co_instance_precondition_type-is_matching_change_state
                                              change_state = gateway_conditions-if_match_etag ).
      ENDIF.
      done_flag = abap_true. "Signals precondition extraction. TX providers/adapters reject preconditions if not supported.
    ELSE.
      sadl_instance_precondition = VALUE #( type = if_sadl_changeset=>co_instance_precondition_type-none ).
    ENDIF.
  ENDMETHOD.


  METHOD _clear_vcs.
    ASSIGN COMPONENT if_sadl_special_struct_names=>co_internal_names-value_control_vcs-complex_property_name OF STRUCTURE cs_data
        TO FIELD-SYMBOL(<s_value_control_properties>).
    IF sy-subrc = 0.
      CLEAR <s_value_control_properties>.
    ENDIF.
  ENDMETHOD.


  METHOD _ext_pa_structdescr_w_vcs_deep.
    CLEAR ro_abap_structdescr_gw.

    DATA lt_vcs TYPE cl_abap_structdescr=>component_table.
    DATA(lv_vcs_dtel) = cl_sadl_entity_util=>get_v4_dynamic_ctrl_data_type( if_sadl_load=>co_dynamic_control_type-element_create_value_provided ).
    DATA(lo_vcs_elem) = CAST cl_abap_datadescr( cl_abap_elemdescr=>describe_by_name( lv_vcs_dtel ) ).

    DATA(lt_component_param) = io_abap_structdescr_param->get_components( ).
    IF line_exists( lt_component_param[ name = cl_abap_behv=>co_techfield_name-control ] )."Identical field sequence VCS - %CONTROL
      LOOP AT CAST cl_abap_structdescr( lt_component_param[ name = cl_abap_behv=>co_techfield_name-control ]-type )->get_components( ) ASSIGNING FIELD-SYMBOL(<s_component>).
        APPEND VALUE #( name = COND #( WHEN it_parameter_name_map IS INITIAL THEN <s_component>-name ELSE it_parameter_name_map[ sadl_name = <s_component>-name ]-gw_name )  type = lo_vcs_elem ) TO lt_vcs.
      ENDLOOP.
    ENDIF.

    DATA(lt_component_gw) = io_abap_structdescr_gw->get_components( ).
    LOOP AT lt_component_gw ASSIGNING <s_component>
      WHERE name <> cl_abap_behv=>co_techfield_name-control AND ( type->kind = cl_abap_typedescr=>kind_struct OR type->kind = cl_abap_typedescr=>kind_table ).
      DATA(lv_component_name) = COND #( WHEN it_parameter_name_map IS INITIAL THEN <s_component>-name ELSE it_parameter_name_map[ gw_name = EXACT #( <s_component>-name ) ]-sadl_name ).
      IF <s_component>-type->kind = cl_abap_typedescr=>kind_struct.
        <s_component>-type          = _ext_pa_structdescr_w_vcs_deep(
          io_abap_structdescr_gw    = CAST cl_abap_structdescr( <s_component>-type )
          io_abap_structdescr_param = CAST cl_abap_structdescr( lt_component_param[ name = lv_component_name ]-type ) ).
      ELSEIF <s_component>-type->kind = cl_abap_typedescr=>kind_table.
        <s_component>-type          = cl_abap_tabledescr=>create( _ext_pa_structdescr_w_vcs_deep(
          io_abap_structdescr_gw    = CAST cl_abap_structdescr( CAST cl_abap_tabledescr( <s_component>-type )->get_table_line_type( ) )
          io_abap_structdescr_param = CAST cl_abap_structdescr( CAST cl_abap_tabledescr( lt_component_param[ name = lv_component_name ]-type )->get_table_line_type( ) ) ) ).
      ENDIF.
    ENDLOOP.

    ro_abap_structdescr_gw = COND #( WHEN sy-subrc = 0 THEN cl_abap_structdescr=>get( lt_component_gw ) ELSE io_abap_structdescr_gw ).

    IF lt_vcs IS NOT INITIAL.
      ro_abap_structdescr_gw = cl_abap_structdescr=>get( VALUE #( ( type       = ro_abap_structdescr_gw
                                                                    as_include = abap_true )
                                                                  ( type       = cl_abap_structdescr=>get( lt_vcs )
                                                                    name       = cl_sadl_entity_util=>co_names-value_control_vcs-complex_property_name ) ) ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_all_elements.
    mo_model_access->get_model( EXPORTING is_service_key = ms_service_key IMPORTING eo_model = DATA(lo_model) ).
    DATA(lo_entity_type) = lo_model->get_entity_type( iv_entity_type ).
    lo_entity_type->get_prim_props_and_names( IMPORTING et_prim_prop = DATA(lt_primitive_properties) ).
    IF iv_exclude_keys = abap_true.
      DATA(lt_key_element) = _get_key_elements( iv_entity_type = iv_entity_type ).
    ENDIF.

    LOOP AT lt_primitive_properties ASSIGNING FIELD-SYMBOL(<s_property>).
      IF iv_exclude_keys = abap_true.
        CHECK NOT line_exists( lt_key_element[ table_line = <s_property>-internal_name ] ).
      ENDIF.
      IF NOT <s_property>-prim_prop->is_technical( ).  " SAP__etag is technical
        INSERT CONV #( <s_property>-internal_name ) INTO TABLE rt_non_key_element.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _get_entity_load_if_vcs_used.
    IF ms_service_features-use_vc_to_flag_omitted_data = abap_true
       AND iv_entity_name IS NOT INITIAL
       AND mo_mdp IS BOUND.
      rr_entity_load  = mo_mdp->get_entity_load( iv_entity_name ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_requested_elems_per_deflt.
    " Returns default list of selectable properties, which is when $select is not provided.
    " Result is all exposed entity properties + etag + dynamic control properties + null value indicator of stream property.
    " It does not contain value control properties and messages.

    cl_sadl_assert=>true( cl_sadl_dev_prototypes=>v4_list_of_selected_properties( ) ).

    cl_sadl_assert=>not_initial( iv_entity_type ).

    DATA(lo_model) = _get_model( COND #( WHEN is_service_key IS NOT INITIAL
                                         THEN is_service_key
                                         ELSE ms_service_key ) ).
    cl_sadl_assert=>bound( lo_model ).
    DATA(lo_entity_type) = lo_model->get_entity_type( iv_entity_type ).
    cl_sadl_assert=>bound( lo_entity_type ).

    " eTag property name
    DATA(lo_etag_property) = lo_entity_type->get_etag_property( ).
    IF lo_etag_property IS BOUND.
      DATA(lv_etag_internal_name) = lo_etag_property->get_internal_name( ).
    ENDIF.

    " primitive properties
    lo_entity_type->get_prim_props_and_names( IMPORTING et_prim_prop = DATA(lt_primitive_properties) ).
    LOOP AT lt_primitive_properties ASSIGNING FIELD-SYMBOL(<s_property>).
      IF NOT <s_property>-prim_prop->is_technical( )
          OR lo_etag_property IS BOUND AND <s_property>-prim_prop->get_internal_name( ) = lv_etag_internal_name.  " SAP__etag is technical, but eTag is needed
        INSERT EXACT #( <s_property>-internal_name ) INTO TABLE rt_elements.
      ENDIF.
    ENDLOOP.

    " complex properties
    ASSIGN if_sadl_special_struct_names=>co_internal_names TO FIELD-SYMBOL(<c_internal_names>).
    lo_entity_type->get_complex_properties( IMPORTING et_property = DATA(lt_complex_properties) ).
    LOOP AT lt_complex_properties ASSIGNING FIELD-SYMBOL(<o_complex_prop>).
      DATA(lv_internal_name) = <o_complex_prop>->get_internal_name( ).
      CASE lv_internal_name.
        WHEN   <c_internal_names>-field_control-complex_property_name
            OR <c_internal_names>-entity_control-complex_property_name
            OR <c_internal_names>-operation_control-complex_property_name
            OR <c_internal_names>-create_by_association_control-complex_property_name.
          <o_complex_prop>->get_complex_type( )->get_prim_props_and_names( IMPORTING et_prim_prop = DATA(lt_prim_prop) ).
          LOOP AT lt_prim_prop ASSIGNING FIELD-SYMBOL(<prim_popr>).
            INSERT lv_internal_name && '-' && <prim_popr>-internal_name INTO TABLE rt_elements.
          ENDLOOP.
        WHEN <c_internal_names>-value_control_vcs-complex_property_name
            OR if_sadl_special_field_names=>sap__messages.
          " Do not add Message table and Value Control Properties
        WHEN OTHERS.
          cl_sadl_assert=>fail( ).
      ENDCASE.
    ENDLOOP.

    " handle null value indicators of stream properties and mime type property, if mime type is a technical property (in case of @Consumption.hidden: true !)
    " null value indicators are requested even if they are consumption hidden (refer to CL_SADL_GW_V4_GENERIC_DPC->_get_all_elems_except_sap_msgs)
    DATA(lv_entity_name) = _convert_entity_type_i2e( iv_internal_name = iv_entity_type
                                                     is_service_key   = is_service_key ).
    DATA(lr_entity_load) = _get_entity_load_if_vcs_used( lv_entity_name ).
    IF lr_entity_load IS BOUND.
      LOOP AT lr_entity_load->stream_properties ASSIGNING FIELD-SYMBOL(<s_stream_properties>) WHERE null_value_ind_element IS NOT INITIAL.
        IF NOT line_exists( rt_elements[ table_line = <s_stream_properties>-null_value_ind_element ] ).
          INSERT <s_stream_properties>-null_value_ind_element INTO TABLE rt_elements.
        ENDIF.
      ENDLOOP.
      LOOP AT lr_entity_load->stream_properties ASSIGNING <s_stream_properties> WHERE mimetype_element IS NOT INITIAL.
        IF NOT line_exists( rt_elements[ table_line = <s_stream_properties>-mimetype_element ] ).
          INSERT <s_stream_properties>-mimetype_element INTO TABLE rt_elements.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD _get_selected_properties.
    IF from_action_request IS SUPPLIED.
      from_action_request->get_selected_properties( IMPORTING et_selected_property_w_obj = DATA(lt_selected_property_w_obj) ).
    ELSEIF from_create_request IS SUPPLIED.
      from_create_request->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
    ELSEIF from_elist_request IS SUPPLIED.
      from_elist_request->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
    ELSEIF from_entity_request IS SUPPLIED.
      from_entity_request->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
    ELSEIF from_expand_node IS SUPPLIED.
      from_expand_node->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
      " Remove SAP__MESSAGES for expand ?!
    ELSEIF from_function_request IS SUPPLIED.
      from_function_request->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
    ELSEIF from_update_request IS SUPPLIED.
      from_update_request->get_selected_properties( IMPORTING et_selected_property_w_obj = lt_selected_property_w_obj ).
    ENDIF.

    DATA(lr_entity_load) = _get_entity_load_if_vcs_used( iv_entity_name ).

    DATA lt_indicators TYPE stringtab.
    DATA lt_nvi_or_mimetype TYPE stringtab.

    LOOP AT lt_selected_property_w_obj ASSIGNING FIELD-SYMBOL(<s_sel_path_w_obj>).
*    check bound instance due to virtual properties possibly occurring in $apply, e.g.
*    $apply=groupby((currency),aggregate(average_net_price with sum as MyTotal))
      IF ms_service_features-use_vc_to_flag_omitted_data = abap_true AND <s_sel_path_w_obj>-instance IS BOUND.
        IF <s_sel_path_w_obj>-instance->is_value_control( ).
          IF cl_sadl_dev_prototypes=>mimetype_nvi_v4( ).
            cl_sadl_gw_v4_stream_prop_map=>add_nvi_or_mimetype_4_outbound( EXPORTING iv_value_control_property = <s_sel_path_w_obj>-path
                                                                                     ir_entity_load            = lr_entity_load
                                                                           CHANGING  ct_nvi_or_mimetype        = lt_nvi_or_mimetype ).
          ELSE.
            cl_sadl_gw_v4_null_val_ind_map=>append_nvi_to_indicator_list( EXPORTING iv_value_control_property = <s_sel_path_w_obj>-path
                                                                                    ir_entity_load            = lr_entity_load
                                                                          CHANGING  ct_indicators             = lt_indicators ).
          ENDIF.
          CONTINUE.
        ELSEIF <s_sel_path_w_obj>-instance->get_kind( ) = /iwbep/if_v4_med_element=>kind_complex_property AND
          CAST /iwbep/if_v4_med_cplx_prop_r( <s_sel_path_w_obj>-instance )->is_vcs_container( ).
          IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
            cl_sadl_gw_v4_stream_prop_map=>add_nvi_or_mimetype_4_outbound( EXPORTING ir_entity_load     = lr_entity_load
                                                                           CHANGING  ct_nvi_or_mimetype = lt_nvi_or_mimetype ).
          ELSE.
            cl_sadl_gw_v4_null_val_ind_map=>append_nvi_to_indicator_list( EXPORTING ir_entity_load = lr_entity_load
                                                                          CHANGING  ct_indicators  = lt_indicators ).
          ENDIF.
          CONTINUE.
        ENDIF.
      ENDIF.
      INSERT <s_sel_path_w_obj>-path INTO TABLE rt_selected_properties.
    ENDLOOP.

    IF cl_sadl_dev_prototypes=>mimetype_nvi_v4(  ).
      LOOP AT lt_nvi_or_mimetype ASSIGNING FIELD-SYMBOL(<s_nvi_or_mimetype>).
        IF NOT line_exists( rt_selected_properties[ table_line = <s_nvi_or_mimetype> ] ).
          INSERT <s_nvi_or_mimetype> INTO TABLE rt_selected_properties.
        ENDIF.
      ENDLOOP.
    ELSE.
      LOOP AT lt_indicators ASSIGNING FIELD-SYMBOL(<s_null_ind_name>).
        IF NOT line_exists( rt_selected_properties[ table_line = <s_null_ind_name> ] ).
          INSERT <s_null_ind_name> INTO TABLE rt_selected_properties.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD _get_value_controlled_elem.
    ASSIGN COMPONENT if_sadl_special_struct_names=>co_internal_names-value_control_vcs-complex_property_name OF STRUCTURE is_node_busi_data
      TO FIELD-SYMBOL(<s_value_control_properties>).
    IF sy-subrc = 0. "VC structure is generated only if entity supports provided elements (BDEF but not BOPF)
      DATA(lr_sadl_entity) = mo_mdp->get_entity_load( is_deep_data_description-entity_name ).
      LOOP AT lr_sadl_entity->dynamic_controls USING KEY subject_sadl_name ASSIGNING FIELD-SYMBOL(<s_element_control>)
                              WHERE dynamic_control_type = if_sadl_load=>co_dynamic_control_type-element_create_value_provided.
        ASSIGN COMPONENT <s_element_control>-controlled_subject_sadl_name OF STRUCTURE <s_value_control_properties> TO FIELD-SYMBOL(<s_vcp_value>).
        IF sy-subrc = 0 AND ( <s_vcp_value> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_value OR
                              <s_vcp_value> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_null ). "relevant for DATE, DATETIME and GUID -> initial value in back end
          INSERT <s_element_control>-controlled_subject_sadl_name INTO TABLE rt_provided_elements.
          IF line_exists( lr_sadl_entity->null_value_indicators[ element_name = <s_element_control>-controlled_subject_sadl_name ] ).
            INSERT lr_sadl_entity->null_value_indicators[ element_name = <s_element_control>-controlled_subject_sadl_name ]-indicator_name
                    INTO TABLE rt_provided_elements.
          ELSEIF cl_sadl_dev_prototypes=>mimetype_nvi_v4( ) = abap_true AND line_exists( lr_sadl_entity->stream_properties[ stream_element = <s_element_control>-controlled_subject_sadl_name ] ).
            INSERT lr_sadl_entity->stream_properties[ stream_element = <s_element_control>-controlled_subject_sadl_name ]-mimetype_element
            INTO TABLE rt_provided_elements.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ELSE. "provided elements not supported: GW provides superset of provided properties - this is sufficient to pass data through mapping layer
      rt_provided_elements = is_deep_data_description-provided_elements.
    ENDIF.
  ENDMETHOD.


  METHOD _map_check_vcs_to_control_deep.

    IF NOT iv_action_import_ddic IS INITIAL. "compositions may not be included in the BDEF load so no target can be derive - then IV_ACTION_IMPORT_DDIC is empty (see recursion below)
      cl_abap_behv_load=>get_load( EXPORTING entity       = iv_action_import_ddic
                                             all          = 'E'
                                   IMPORTING associations = DATA(lt_association)
                                             features     = DATA(lt_feature) ).
    ENDIF. "initial should no longer occur due to fallback logic below

    ASSIGN COMPONENT cl_abap_behv=>co_techfield_name-control                               OF STRUCTURE cs_target TO FIELD-SYMBOL(<s_control_target>).
    ASSIGN COMPONENT cl_sadl_entity_util=>co_names-value_control_vcs-complex_property_name OF STRUCTURE is_source TO FIELD-SYMBOL(<s_vcs_source>).

    IF <s_control_target> IS ASSIGNED.
      DO.
        DATA(lv_component_index) = sy-index. "Mapping VCS -> %CONTROL - Assume identical field sequence in each substructure!
        ASSIGN COMPONENT lv_component_index OF STRUCTURE <s_control_target> TO FIELD-SYMBOL(<v_control_target>).
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.
        <v_control_target> = if_abap_behv=>mk-on."Default
        IF <s_vcs_source> IS ASSIGNED.
          ASSIGN COMPONENT lv_component_index OF STRUCTURE <s_vcs_source> TO FIELD-SYMBOL(<v_vcs_source>).
          ASSERT sy-subrc = 0.
          IF <v_vcs_source> = /iwbep/if_v4_runtime_types=>gcs_value_control-indicate_omit.
            <v_control_target> = if_abap_behv=>mk-off.
          ENDIF.
        ENDIF.
      ENDDO.

      LOOP AT lt_feature ASSIGNING FIELD-SYMBOL(<s_feature>)
        WHERE owner_entity = iv_action_import_ddic AND static_features = cl_abap_behv_load=>c_feature_sf_mandatory_execute.
        ASSIGN COMPONENT <s_feature>-element OF STRUCTURE <s_control_target> TO <v_control_target>.
        ASSERT sy-subrc = 0.
        IF <v_control_target> = if_abap_behv=>mk-off.
          RAISE EXCEPTION cx_sadl_gw_v4_mand_pa_not_prov=>field_not_provided( entity = iv_entity_name action = iv_sadl_action_name field = EXACT #( <s_feature>-element ) ).
        ENDIF.
      ENDLOOP.
    ENDIF.

    LOOP AT CAST cl_abap_structdescr( cl_abap_structdescr=>describe_by_data( cs_target ) )->get_components( ) ASSIGNING FIELD-SYMBOL(<s_component>)
      WHERE name <> cl_abap_behv=>co_techfield_name-control AND ( type->kind = cl_abap_typedescr=>kind_struct OR type->kind = cl_abap_typedescr=>kind_table ).
      DATA(lv_gw_name) = COND #( WHEN it_parameter_name_map IS INITIAL THEN <s_component>-name ELSE it_parameter_name_map[ sadl_name = <s_component>-name ]-gw_name )."Name mapping only on highest level

      ASSIGN COMPONENT <s_component>-name OF STRUCTURE cs_target TO FIELD-SYMBOL(<target>)."Structure OR Table
      ASSERT sy-subrc = 0.

      ASSIGN COMPONENT lv_gw_name OF STRUCTURE is_source TO FIELD-SYMBOL(<source>)."Structure OR Table
      ASSERT sy-subrc = 0.

     DATA(lv_action_import_ddic) = VALUE #( lt_association[ name = EXACT #( <s_component>-name ) ]-target_entity OPTIONAL ).
     IF lv_action_import_ddic IS INITIAL. "fallback logic: derive target entity from type
       DATA(lv_type) = <s_component>-type->absolute_name.
       IF CONV char6( lv_type ) = '\BDEF='.
         SPLIT lv_type AT '\ENTITY=' INTO lv_type DATA(lv_entity).
         SPLIT lv_entity AT '\TYPE=' INTO lv_entity lv_type.
         IF lv_type CP 'HIERARCHY*'.
           lv_action_import_ddic = lv_entity.
         ENDIF.
       ENDIF.
     ENDIF.

      IF <s_component>-type->kind = cl_abap_typedescr=>kind_struct.
        UNASSIGN <v_control_target>.
        IF <s_control_target> IS ASSIGNED.
          ASSIGN COMPONENT <s_component>-name OF STRUCTURE <s_control_target> TO <v_control_target>.
        ENDIF.
        IF <v_control_target> IS ASSIGNED AND <v_control_target> = if_abap_behv=>mk-off."Has the complete substructure been omitted?
          cl_sadl_gw_dpc_util=>set_control_structure_deep( EXPORTING iv_value = if_abap_behv=>mk-off CHANGING c_data = <target> ).
        ELSE.
          _map_check_vcs_to_control_deep( EXPORTING is_source             = <source>
                                                    iv_action_import_ddic = lv_action_import_ddic
                                                    iv_entity_name        = iv_entity_name
                                                    iv_sadl_action_name   = iv_sadl_action_name
                                          CHANGING  cs_target             = <target> ).
        ENDIF.
      ELSEIF <s_component>-type->kind = cl_abap_typedescr=>kind_table.
        FIELD-SYMBOLS <t_target> TYPE STANDARD TABLE.
        ASSIGN <target> TO <t_target>.
        LOOP AT <source> ASSIGNING FIELD-SYMBOL(<s_source>).
          DATA(lv_tabix) = sy-tabix.
          "GO: This results in potentially slow ASSIGN COMPONENT statements which have to be repeated for each record.
          "This cannot be inverted as the "inner" field symbol does not change when the "outer" field symbol refers to a different table record.
          "A LOOP INTO (preserving the inner field symbol) would require a dynamic work array creation and copying back and forth of the data, that would also be a performance loss.
          "CL_ABAP_BEHVDESCR=>SET_CONTROL_FLAG() cannot be used as we may need to set different flags in different records
          _map_check_vcs_to_control_deep( EXPORTING is_source             = <s_source>
                                                    iv_action_import_ddic = lv_action_import_ddic
                                                    iv_entity_name        = iv_entity_name
                                                    iv_sadl_action_name   = iv_sadl_action_name
                                          CHANGING  cs_target             = <t_target>[ lv_tabix ] ).
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD _refuse_get_4_param_entity.
    IF cl_sadl_gw_v4_provider_info=>is_parameter_entity( iv_entity_name ).
      RAISE EXCEPTION cx_sadl_gw_parameter_entity=>cannot_be_used_to_read_from( iv_entity_id           = CONV #( cl_sadl_gw_v4_provider_info=>get_entity_name( iv_entity_name ) )
                                                                                iv_parameter_entity_id = CONV #( iv_entity_name ) ).
    ENDIF.
  ENDMETHOD.


  METHOD _sticky_call_badi_for_discard.
    DATA lr_badi TYPE REF TO sadl_sticky_session_discard.
    TRY.
        GET BADI lr_badi
          FILTERS
            repository_id   = ms_service_key-repository_id
            service_id      = ms_service_key-service_id
            service_version = ms_service_key-service_version
            service_variant = ms_service_key-service_variant.
        CALL BADI lr_badi->discard EXPORTING is_service_key = ms_service_key.
      CATCH cx_badi_not_implemented ##NO_HANDLER.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.