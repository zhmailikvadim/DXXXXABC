class TCL_ATP_INFO_SCENARIO definition
  public
  abstract
  create public
  for testing
  duration long
  risk level harmless .

public section.

  methods TA01_SINGLE_MATERIAL_PLANT
  for testing .
  METHODS: ta02_1matplant_no_chkng_rule FOR TESTING.
  methods TA11_SINGLE_MATERIAL_PLANT
  for testing .
  methods TA12_1MATPLANT_NEVER_AVAILABLE
  for testing .
  methods TA21_SINGLE_MATERIAL_PLANT
  for testing .
  methods TA22_1MATPLANT_REQ_IN_PAST
  for testing .

  METHODS:
    tx01_advanced_atp_off_single FOR TESTING.

  METHODS:
    ty01_plant_date_bfr_sys_date FOR TESTING.

  METHODS: tz01_pac_switched_off_single FOR TESTING.

protected section.
private section.

  methods CONVERT_DATE_TO_TIMESTAMP
    importing
      !IV_DATE type DATS
      !IV_TIME type TIMS default '000000'
      !IV_TIMEZONE type TIMEZONE default SY-ZONLO
    returning
      value(RV_TIMESTAMP) type TIMESTAMP .
  methods BUILD_SCENARIO_A
    importing
      !IV_SCENARIO_DATE type DATS.

  METHODS:
    build_scenario_x
      IMPORTING
        iv_scenario_date TYPE dats,

    build_scenario_y
      IMPORTING
        iv_scenario_date TYPE timestamp,

    build_scenario_z
      IMPORTING
        iv_scenario_date TYPE dats.

ENDCLASS.



CLASS TCL_ATP_INFO_SCENARIO IMPLEMENTATION.


METHOD build_scenario_a.

  DATA: lo_mock_pac_db               TYPE REF TO td_atp_pac_db_mock_select,
        lt_mock_atpmat               TYPE tbl_atpmat,
        lt_mock_atpplant             TYPE tbl_atpplant,
        lt_mock_stock                TYPE if_atp_pac_db_td=>tt_mtdcsa,
        lt_mock_purchase_requisition TYPE if_atp_pac_db_td=>tt_eban,
        lt_mock_sales_order          TYPE if_atp_pac_db_td=>tt_vbbe,
        lt_mock_production_order     TYPE if_atp_pac_db_td=>tt_afpo,
        lt_mock_checking_group       TYPE tbl_tmvf,
        lt_mock_checking_control     TYPE if_atp_pac_db_td=>tt_t441v,
        lv_test_date                 TYPE dats,
        lv_test_timestamp            TYPE timestamp.

  lt_mock_atpmat = VALUE #( (
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    berid = 'DB03'
    meins = 'EA'
    mtvfp = 'DB'
  ) ).

  lt_mock_atpplant = VALUE #( (
    werks = 'DB03'
    tzone = 'CET'
  ) ).

  lt_mock_checking_group = VALUE #( (
    mtvfp   = 'DB'
    onvba   = '3'
    adv_atp = cl_atp_customizing_c=>check_s4
  ) ).

  lt_mock_checking_control = VALUE #( (
    mtvfp = 'DB'
    prreg = 'A'
    owbzp = abap_true
    banfp = abap_true " Purchase Requisition
    vbbdp = abap_true " Sales Order
    vbblp = abap_true " Delivery
    fertp = abap_true " Production Order
  ) ).

  " b) transactional data
  lt_mock_stock = VALUE #( (
    key1      = 1
    matbf     = 'DB_INFO_MAIN'
    werks     = 'DB03'
    lgort_sid = 'D001'
    lbbsa_sid = cl_atp_s4_c=>stock_type_unrestricted
    stock_qty = 90
  ) ).

  lt_mock_purchase_requisition = VALUE #( (
    banfn = '1'
    bnfpo = '1'
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    lgort = 'D001'
    statu = 'N'
    lfdat = '20170210'
    menge = 10
    bsmng = 0
  ) (
    banfn = '2'
    bnfpo = '1'
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    lgort = 'D001'
    statu = 'N'
    lfdat = '20170301'
    menge = 120
    bsmng = 0
  ) ).

  lt_mock_production_order = VALUE #( (
    aufnr = '4'
    matnr = 'DB_INFO_MAIN'
    pwerk = 'DB03'
    lgort = 'D001'
    dauty = '10'
    wepos = abap_true
    dfrei = abap_true
    dgltp = '20170401'
    psmng = 200
    amein = 'EA'
  ) ).

  lt_mock_sales_order = VALUE #( (
    vbeln = '2'
    posnr = '000010'
    etenr = '0001'
    vbtyp = 'C'
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    mbdat = '20170225'
    omeng = 125
    vmeng = 25
  ) (
    vbeln = '2'
    posnr = '000010'
    etenr = '0002'
    vbtyp = 'C'
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    mbdat = '20170301'
    omeng = 0
    vmeng = 100
  ) (
    vbeln = '3'
    posnr = '000010'
    etenr = '0001'
    vbtyp = 'J'
    matnr = 'DB_INFO_MAIN'
    werks = 'DB03'
    lgort = 'D001'
    mbdat = '20170224'
    omeng = 75
    vmeng = 75
  ) ).

  lv_test_timestamp = me->convert_date_to_timestamp( iv_date = iv_scenario_date ).


  CREATE OBJECT lo_mock_pac_db.

  td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
  lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
    EXPORTING
      it_atpmat   = lt_mock_atpmat
      it_atpplant = lt_mock_atpplant
      it_tmvf     = lt_mock_checking_group
      it_t441v    = lt_mock_checking_control
      is_param    = VALUE #( time_now = lv_test_timestamp )
  ).

  lo_mock_pac_db->if_atp_pac_db_td~set_transactional_data(
    EXPORTING
      it_mtdcsa    = lt_mock_stock
      it_afpo      = lt_mock_production_order
      it_eban      = lt_mock_purchase_requisition
      it_vbbe      = lt_mock_sales_order
  ).

  cl_atp_db_controller=>get_instance( )->fill_param( ).

ENDMETHOD.


  METHOD build_scenario_x.

    DATA: lo_mock_pac_db           TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat           TYPE tbl_atpmat,
          lt_mock_atpplant         TYPE tbl_atpplant,
          lt_mock_stock            TYPE if_atp_pac_db_td=>tt_mtdcsa,
          lt_mock_checking_group   TYPE tbl_tmvf,
          lt_mock_checking_control TYPE if_atp_pac_db_td=>tt_t441v,
          lv_test_timestamp        TYPE timestamp.


    lt_mock_atpmat = VALUE #( (
      matnr = 'DB_INFO_MAIN'
      werks = 'DB03'
      berid = 'DB03'
      meins = 'EA'
      mtvfp = 'DB'
    ) ).

    lt_mock_atpplant = VALUE #( (
      werks = 'DB03'
      tzone = 'CET'
    ) ).

    lt_mock_checking_group = VALUE #( (
      mtvfp   = 'DB'
      onvba   = '3'
      adv_atp = cl_atp_customizing_c=>check_r3
    ) ).

    lt_mock_checking_control = VALUE #( (
      mtvfp = 'DB'
      prreg = cl_atp_s4_c=>checking_rule_sales_order
      owbzp = abap_true
      banfp = abap_true " Purchase Requisition
      vbbdp = abap_true " Sales Order
      vbblp = abap_true " Delivery
      fertp = abap_true " Production Order
    ) ).

    " b) transactional data
    lt_mock_stock = VALUE #( (
      key1      = 1
      matbf     = 'DB_INFO_MAIN'
      werks     = 'DB03'
      lgort_sid = 'D001'
      lbbsa_sid = cl_atp_s4_c=>stock_type_unrestricted
      stock_qty = 90
    ) ).

    lv_test_timestamp = me->convert_date_to_timestamp( iv_date = iv_scenario_date ).


    lo_mock_pac_db = NEW #( ).

    td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
    lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
      EXPORTING
        it_atpmat   = lt_mock_atpmat
        it_atpplant = lt_mock_atpplant
        it_tmvf     = lt_mock_checking_group
        it_t441v    = lt_mock_checking_control
        is_param    = VALUE #( time_now = lv_test_timestamp )
    ).

    lo_mock_pac_db->if_atp_pac_db_td~set_transactional_data(
      EXPORTING
        it_mtdcsa = lt_mock_stock
    ).

    cl_atp_db_controller=>get_instance( )->fill_param( ).

  ENDMETHOD.


  METHOD build_scenario_y.

    DATA: lo_mock_pac_db           TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat           TYPE tbl_atpmat,
          lt_mock_atpplant         TYPE tbl_atpplant,
          lt_mock_stock            TYPE if_atp_pac_db_td=>tt_mtdcsa,
          lt_mock_checking_group   TYPE tbl_tmvf,
          lt_mock_checking_control TYPE if_atp_pac_db_td=>tt_t441v,
          lv_test_timestamp        TYPE timestamp.


    lt_mock_atpmat = VALUE #( (
      matnr = 'DB_INFO_MAIN'
      werks = 'DB03'
      berid = 'DB03'
      meins = 'EA'
      mtvfp = 'DB'
    ) ).

    lt_mock_atpplant = VALUE #( (
      werks = 'DB03'
      tzone = 'PST'
    ) ).

    lt_mock_checking_group = VALUE #( (
      mtvfp   = 'DB'
      onvba   = '3'
      adv_atp = cl_atp_customizing_c=>check_s4
    ) ).

    lt_mock_checking_control = VALUE #( (
      mtvfp = 'DB'
      prreg = cl_atp_s4_c=>checking_rule_sales_order
      owbzp = abap_true
    ) ).

    " b) transactional data
    lt_mock_stock = VALUE #( (
      key1      = 1
      matbf     = 'DB_INFO_MAIN'
      werks     = 'DB03'
      lgort_sid = 'D001'
      lbbsa_sid = cl_atp_s4_c=>stock_type_unrestricted
      stock_qty = 90
    ) ).


    lo_mock_pac_db = NEW #( ).

    td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
    lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
      EXPORTING
        it_atpmat   = lt_mock_atpmat
        it_atpplant = lt_mock_atpplant
        it_tmvf     = lt_mock_checking_group
        it_t441v    = lt_mock_checking_control
        is_param    = VALUE #( time_now = iv_scenario_date )
    ).

    lo_mock_pac_db->if_atp_pac_db_td~set_transactional_data(
      EXPORTING
        it_mtdcsa = lt_mock_stock
    ).

    cl_atp_db_controller=>get_instance( )->fill_param( ).

  ENDMETHOD.


  METHOD build_scenario_z.

    DATA: lo_mock_pac_db               TYPE REF TO td_atp_pac_db_mock_select,
          lt_mock_atpmat               TYPE tbl_atpmat,
          lt_mock_atpplant             TYPE tbl_atpplant,
          lt_mock_stock                TYPE if_atp_pac_db_td=>tt_mtdcsa,
          lt_mock_checking_group       TYPE tbl_tmvf,
          lv_test_date                 TYPE dats,
          lv_test_timestamp            TYPE timestamp.

    lt_mock_atpmat = VALUE #( (
      matnr = 'DB_INFO_MAIN'
      werks = 'DB03'
      berid = 'DB03'
      meins = 'EA'
      mtvfp = 'DB'
    ) ).

    lt_mock_atpplant = VALUE #( (
      werks = 'DB03'
      tzone = 'CET'
    ) ).

    lt_mock_checking_group = VALUE #( (
      mtvfp   = 'DB'
      onvba   = '3'
      verpn   = abap_true
      adv_atp = cl_atp_customizing_c=>check_s4
    ) ).

    " b) transactional data
    lt_mock_stock = VALUE #( (
      key1      = 1
      matbf     = 'DB_INFO_MAIN'
      werks     = 'DB03'
      lgort_sid = 'D001'
      lbbsa_sid = cl_atp_s4_c=>stock_type_unrestricted
      stock_qty = 90
    ) ).

    lv_test_timestamp = me->convert_date_to_timestamp( iv_date = iv_scenario_date ).


    CREATE OBJECT lo_mock_pac_db.

    td_atp_db_controller=>create_test_instance( lo_mock_pac_db ).
    lo_mock_pac_db->if_atp_pac_db_td~set_master_data(
      EXPORTING
        it_atpmat   = lt_mock_atpmat
        it_atpplant = lt_mock_atpplant
        it_tmvf     = lt_mock_checking_group
        is_param    = VALUE #( time_now = lv_test_timestamp )
    ).

    lo_mock_pac_db->if_atp_pac_db_td~set_transactional_data(
      EXPORTING
        it_mtdcsa = lt_mock_stock
    ).

    cl_atp_db_controller=>get_instance( )->fill_param( ).

  ENDMETHOD.


METHOD convert_date_to_timestamp.

  CONVERT DATE iv_date TIME iv_time INTO TIME STAMP rv_timestamp TIME ZONE iv_timezone.

ENDMETHOD.


METHOD TA01_SINGLE_MATERIAL_PLANT.

  DATA: f_cut              TYPE REF TO cl_atp_info_controller,
        lo_raw_req_factory TYPE REF TO cl_atp_info_raw_req_factory.

  DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
        lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
        lv_in_checking_rule  TYPE prreg.

  DATA: lo_mock_pac_db               TYPE REF TO td_atp_pac_db_mock_select,
        lt_mock_atpmat               TYPE tbl_atpmat,
        lt_mock_atpplant             TYPE tbl_atpplant,
        lt_mock_stock                TYPE if_atp_pac_db_td=>tt_mtdcsa,
        lt_mock_purchase_requisition TYPE if_atp_pac_db_td=>tt_eban,
        lt_mock_sales_order          TYPE if_atp_pac_db_td=>tt_vbbe,
        lt_mock_production_order     TYPE if_atp_pac_db_td=>tt_afpo,
        lt_mock_checking_group       TYPE tbl_tmvf,
        lt_mock_checking_control     TYPE if_atp_pac_db_td=>tt_t441v,
        lv_test_date                 TYPE dats,
        lv_test_timestamp            TYPE timestamp.

  DATA: lt_tr_availy_timeseries_act TYPE tbl_atp_info_res_availy_record,
        lt_tr_availy_timeseries_exp TYPE tbl_atp_info_res_availy_record.


  " 1. Build test input data
  lt_in_material_plant = VALUE #( (
    material        = 'DB_INFO_MAIN'
    supplying_plant = 'DB03'
  ) ).

  lv_in_checking_rule = 'A'.

  CREATE OBJECT lo_raw_req_factory.
  lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
    EXPORTING
      it_material_plant = lt_in_material_plant
      iv_checking_rule  = lv_in_checking_rule
  ).




  " 2. Setup mock
  me->build_scenario_a( iv_scenario_date = '20170220' ).




  " 3. Get test object
  CREATE OBJECT f_cut.
  f_cut->calculate_availy_timeseries(
    EXPORTING
      io_raw_request             = lo_in_raw_request
    IMPORTING
      et_availability_timeseries = lt_tr_availy_timeseries_act
  ).




  " 4. Build expected result
  lt_tr_availy_timeseries_exp = VALUE #( baseunit = 'EA' periodstarttimezone = 'CET' periodendtimezone = 'CET' (
    periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20170220' iv_time = '000000' iv_timezone = 'CET' )
    periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20170220' iv_time = '235959' iv_timezone = 'CET' )
    availablequantityinbaseunit = 0
  ) (
    periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20170301' iv_time = '000000' iv_timezone = 'CET' )
    periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20170301' iv_time = '235959' iv_timezone = 'CET' )
    availablequantityinbaseunit = 20
  ) (
    periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20170401' iv_time = '000000' iv_timezone = 'CET' )
    periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20170401' iv_time = '235959' iv_timezone = 'CET' )
    availablequantityinbaseunit = 220
  ) ).



  " 5. Perform the assertions
  cl_aunit_assert=>assert_equals(
    EXPORTING
      act = lt_tr_availy_timeseries_act
      exp = lt_tr_availy_timeseries_exp
      msg = 'The calculated availability timeseries is not correct.'
  ).

ENDMETHOD.


  METHOD ta02_1matplant_no_chkng_rule.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination.

    DATA: lt_tr_availy_timeseries_act TYPE tbl_atp_info_res_availy_record,
          lt_tr_message_act           TYPE if_atp_info_raw_req=>tt_message,
          lt_tr_message_exp           TYPE if_atp_info_raw_req=>tt_message.


    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_a( iv_scenario_date = '20170220' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = VALUE #( )
    ).


    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->calculate_availy_timeseries(
      EXPORTING
        io_raw_request             = lo_in_raw_request
      IMPORTING
        et_availability_timeseries = lt_tr_availy_timeseries_act
        et_message                 = lt_tr_message_act
    ).




  " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_message_exp = VALUE #( (
      msgid = 'CO'
      msgty = 'E'
      msgno = 143
    ) ).



    " b) Compare the results
    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = lt_tr_availy_timeseries_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_tr_message_act
        it_exp          = lt_tr_message_exp
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.


METHOD ta11_single_material_plant.

  DATA: f_cut              TYPE REF TO cl_atp_info_controller,
        lo_raw_req_factory TYPE REF TO cl_atp_info_raw_req_factory.

  DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
        lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
        lv_in_checking_rule  TYPE prreg.

  DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
        ls_tr_availability_exp TYPE atp_info_res_availy_record.


  " 1. Build test input data
  lt_in_material_plant = VALUE #( (
    material        = 'DB_INFO_MAIN'
    supplying_plant = 'DB03'
  ) ).

  lv_in_checking_rule = 'A'.

  CREATE OBJECT lo_raw_req_factory.
  lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
    EXPORTING
      it_material_plant = lt_in_material_plant
      iv_checking_rule  = lv_in_checking_rule
  ).




  " 2. Setup mock
  me->build_scenario_a( iv_scenario_date = '20170220' ).




  " 3. Get test object
  CREATE OBJECT f_cut.
  f_cut->determine_availability_of(
    EXPORTING
      io_raw_request         = lo_in_raw_request
      iv_requested_quantity  = 150
    IMPORTING
      es_availability_record = ls_tr_availability_act
  ).




  " 4. Build expected result
  ls_tr_availability_exp = VALUE #(
    periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20170401' iv_time = '000000' iv_timezone = 'CET' )
    periodstarttimezone         = 'CET'
    periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20170401' iv_time = '235959' iv_timezone = 'CET' )
    periodendtimezone           = 'CET'
    availablequantityinbaseunit = 220
    baseunit                    = 'EA'
  ).



  " 5. Perform the assertions
  cl_aunit_assert=>assert_equals(
    EXPORTING
      act = ls_tr_availability_act
      exp = ls_tr_availability_exp
      msg = 'The calculated availability record is not correct.'
  ).

ENDMETHOD.


  METHOD ta12_1matplant_never_available.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_in_checking_rule  TYPE prreg.

    DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
          lt_tr_message_act      TYPE if_atp_info_raw_req=>tt_message,
          lt_tr_message_exp      TYPE if_atp_info_raw_req=>tt_message.



    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_a( iv_scenario_date = '20170220' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_in_checking_rule = 'A'.

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = lv_in_checking_rule
    ).


    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->determine_availability_of(
      EXPORTING
        io_raw_request         = lo_in_raw_request
        iv_requested_quantity  = 1500000
      IMPORTING
        es_availability_record = ls_tr_availability_act
        et_message             = lt_tr_message_act
    ).



    " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_message_exp = VALUE #( (
      msgid = 'AG'
      msgty = 'E'
      msgno = 150
    ) ).



    " b) Compare the results
    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = ls_tr_availability_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_tr_message_act
        it_exp          = lt_tr_message_exp
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.


METHOD ta21_single_material_plant.

  DATA: f_cut              TYPE REF TO cl_atp_info_controller,
        lo_raw_req_factory TYPE REF TO cl_atp_info_raw_req_factory.

  DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
        lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
        lv_in_checking_rule  TYPE prreg.

  DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
        ls_tr_availability_exp TYPE atp_info_res_availy_record.


  " 1. Build test input data
  lt_in_material_plant = VALUE #( (
    material        = 'DB_INFO_MAIN'
    supplying_plant = 'DB03'
  ) ).

  lv_in_checking_rule = 'A'.

  CREATE OBJECT lo_raw_req_factory.
  lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
    EXPORTING
      it_material_plant = lt_in_material_plant
      iv_checking_rule  = lv_in_checking_rule
  ).




  " 2. Setup mock
  me->build_scenario_a( iv_scenario_date = '20170220' ).




  " 3. Get test object
  CREATE OBJECT f_cut.
  f_cut->determine_availability_at(
    EXPORTING
      io_raw_request         = lo_in_raw_request
      iv_requested_date      = '20170224000000'
    IMPORTING
      es_availability_record = ls_tr_availability_act
  ).




  " 4. Build expected result
  ls_tr_availability_exp = VALUE #(
    periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20170220' iv_time = '000000' iv_timezone = 'CET' )
    periodstarttimezone         = 'CET'
    periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20170220' iv_time = '235959' iv_timezone = 'CET' )
    periodendtimezone           = 'CET'
    availablequantityinbaseunit = 0
    baseunit                    = 'EA'
  ).



  " 5. Perform the assertions
  cl_aunit_assert=>assert_equals(
    EXPORTING
      act = ls_tr_availability_act
      exp = ls_tr_availability_exp
      msg = 'The calculated availability record is not correct.'
  ).

ENDMETHOD.


  METHOD ta22_1matplant_req_in_past.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_in_checking_rule  TYPE prreg.

    DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
          lt_tr_message_act      TYPE if_atp_info_raw_req=>tt_message,
          lt_tr_message_exp      TYPE if_atp_info_raw_req=>tt_message.



    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_a( iv_scenario_date = '20170220' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_in_checking_rule = 'A'.

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = lv_in_checking_rule
    ).



    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->determine_availability_at(
      EXPORTING
        io_raw_request         = lo_in_raw_request
        iv_requested_date      = '20170101000000'
      IMPORTING
        es_availability_record = ls_tr_availability_act
        et_message             = lt_tr_message_act
    ).



    " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_message_exp = VALUE #( (
      msgid = 'AG'
      msgty = 'E'
      msgno = 153
    ) ).



    " b) Compare the results
    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = ls_tr_availability_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_tr_message_act
        it_exp          = lt_tr_message_exp
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.


  METHOD tx01_advanced_atp_off_single.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_in_checking_rule  TYPE prreg.

    DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
          lt_tr_message_act      TYPE if_atp_info_raw_req=>tt_message,
          lt_tr_message_exp      TYPE if_atp_info_raw_req=>tt_message.



    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_x( iv_scenario_date = '20220323' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_in_checking_rule = 'A'.

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = lv_in_checking_rule
    ).


    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->determine_availability_of(
      EXPORTING
        io_raw_request         = lo_in_raw_request
        iv_requested_quantity  = 100
      IMPORTING
        es_availability_record = ls_tr_availability_act
        et_message             = lt_tr_message_act
    ).



    " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_message_exp = VALUE #( (
      msgid = 'AG'
      msgty = 'E'
      msgno = 040
      msgv1 = 'DB_INFO_MAIN'
      msgv2 = 'DB03'
      msgv3 = 'DB'
    ) ).



    " b) Compare the results
    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = ls_tr_availability_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_tr_message_act
        it_exp          = lt_tr_message_exp
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.


  METHOD ty01_plant_date_bfr_sys_date.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_in_checking_rule  TYPE prreg.

    DATA: lt_tr_availy_timeseries_act TYPE tbl_atp_info_res_availy_record,
          lt_tr_availy_timeseries_exp TYPE tbl_atp_info_res_availy_record,
          lt_tr_message_act           TYPE if_atp_info_raw_req=>tt_message.


    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_y( iv_scenario_date = '20210623000000' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_in_checking_rule = cl_atp_s4_c=>checking_rule_sales_order.

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = lv_in_checking_rule
    ).


    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->calculate_availy_timeseries(
      EXPORTING
        io_raw_request             = lo_in_raw_request
      IMPORTING
        et_availability_timeseries = lt_tr_availy_timeseries_act
        et_message                 = lt_tr_message_act
    ).




  " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_availy_timeseries_exp = VALUE #( (
      periodstartutcdatetime      = me->convert_date_to_timestamp( iv_date = '20210622' iv_time = '000000' iv_timezone = 'PST' )
      periodstarttimezone         = 'PST'
      periodendutcdatetime        = me->convert_date_to_timestamp( iv_date = '20210622' iv_time = '235959' iv_timezone = 'PST' )
      periodendtimezone           = 'PST'
      availablequantityinbaseunit = 90
      baseunit                    = 'EA'
    ) ).



    " b) Compare the results
    th_atp_table_assert=>equals(
      EXPORTING
        it_act          = lt_tr_availy_timeseries_act
        it_exp          = lt_tr_availy_timeseries_exp
        iv_ignore_order = abap_true
    ).

    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = lt_tr_message_act
    ).

  ENDMETHOD.


  METHOD tz01_pac_switched_off_single.

    DATA: lo_cut_info_controller TYPE REF TO cl_atp_info_controller,
          lo_raw_req_factory     TYPE REF TO cl_atp_info_raw_req_factory.

    DATA: lo_in_raw_request    TYPE REF TO if_atp_info_raw_req,
          lt_in_material_plant TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination,
          lv_in_checking_rule  TYPE prreg.

    DATA: ls_tr_availability_act TYPE atp_info_res_availy_record,
          lt_tr_message_act      TYPE if_atp_info_raw_req=>tt_message,
          lt_tr_message_exp      TYPE if_atp_info_raw_req=>tt_message.



    " ====================================================
    " =
    " = 1. Arrange!
    " =
    " ====================================================

    " a) Setup scenario
    me->build_scenario_z( iv_scenario_date = '20190627' ).


    " b) Instance class to test and inject mock data
    lo_cut_info_controller = NEW #( ).


    " c) Prepare input data
    lt_in_material_plant = VALUE #( (
      material        = 'DB_INFO_MAIN'
      supplying_plant = 'DB03'
    ) ).

    lv_in_checking_rule = 'A'.

    lo_raw_req_factory = NEW #( ).
    lo_in_raw_request = lo_raw_req_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_in_material_plant
        iv_checking_rule  = lv_in_checking_rule
    ).


    " ====================================================
    " =
    " = 2. Act!
    " =
    " ====================================================

    lo_cut_info_controller->determine_availability_of(
      EXPORTING
        io_raw_request         = lo_in_raw_request
        iv_requested_quantity  = 100
      IMPORTING
        es_availability_record = ls_tr_availability_act
        et_message             = lt_tr_message_act
    ).



    " ====================================================
    " =
    " = 3. Assert!
    " =
    " ====================================================

    " a) Build the expected results
    lt_tr_message_exp = VALUE #( (
      msgid = 'AG'
      msgty = 'E'
      msgno = 028
      msgv1 = 'DB_INFO_MAIN'
      msgv2 = 'DB03'
    ) ).



    " b) Compare the results
    cl_abap_unit_assert=>assert_initial(
      EXPORTING
        act = ls_tr_availability_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_tr_message_act
        it_exp          = lt_tr_message_exp
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.
ENDCLASS.