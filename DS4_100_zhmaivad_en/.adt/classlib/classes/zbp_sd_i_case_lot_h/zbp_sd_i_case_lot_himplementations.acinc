************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* SRIKAVEN     | 12.01.2023 | 15094     : BE: Case Lot -Enhancement *
*              |            | DS4K934909                               *
* SRIKAVEN     | 28.04.2023 | 20611     : BE: Case Lot -Enhancement *
*              |            | DS4K950721                               *
* NAGARSOW     | 19.09.2023 | 23489     : BE: Case Lot -Enhancement *
*              |            | DS4K963105                               *
* NAGARSOW     | 06.12.2023 | 27069     : Development - Case lot app enhancem *
*              |            | DS4K971200                               *
* BATCHVIN     | 28.02.2024 | 27069 : Development - Case lot app enhancem*
*              |            | DS4K971200                               *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
CLASS lsc_zsd_i_case_lot_h DEFINITION INHERITING FROM cl_abap_behavior_saver.


  PROTECTED SECTION.

    METHODS save_modified REDEFINITION.

  PRIVATE SECTION.

ENDCLASS.

CLASS lhc_caselotitem DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.
    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys
        REQUEST requested_features ##NEEDED
        FOR caselotitem RESULT result.

ENDCLASS.

CLASS lhc_caselotheader DEFINITION INHERITING FROM cl_abap_behavior_handler.
  PRIVATE SECTION.

    CONSTANTS:
      BEGIN OF mc_packing_mode,
        ssp  TYPE c LENGTH 4 VALUE 'SSP',
        msp  TYPE c LENGTH 4 VALUE 'MSP',
        sssp TYPE c LENGTH 4 VALUE 'SSSP',
        mssp TYPE c LENGTH 4 VALUE 'MSSP',
      END OF mc_packing_mode,
      mc_col_msp    TYPE c LENGTH 25 VALUE 'Size split per Caselot',
      mc_col_mssp   TYPE c LENGTH 25 VALUE 'Size split per Polybag',
      mc_draft_mode TYPE c LENGTH 2 VALUE '01'.


    METHODS get_instance_authorizations FOR INSTANCE AUTHORIZATION
      IMPORTING keys
                  REQUEST it_requested_authorizations  ##NEEDED
                  FOR caselotheader
      RESULT    result.

    METHODS get_global_authorizations FOR GLOBAL AUTHORIZATION
      IMPORTING REQUEST requested_authorizations FOR caselotheader RESULT result.

    METHODS get_instance_features FOR INSTANCE FEATURES
      IMPORTING keys
        REQUEST it_requested_features ##NEEDED
         FOR caselotheader RESULT result.

    METHODS caselotnumber FOR DETERMINE ON SAVE
      IMPORTING keys FOR caselotheader~caselotnumber.

    METHODS calculatenoofunits FOR DETERMINE ON MODIFY
      IMPORTING keys FOR caselotheader~calculatenoofunits.

    METHODS manualplanning FOR MODIFY
      IMPORTING keys FOR ACTION caselotheader~manualplanning RESULT result.
    METHODS validatemandatory FOR VALIDATE ON SAVE
      IMPORTING keys FOR caselotheader~validatemandatory.
    METHODS changepackingmode FOR DETERMINE ON MODIFY
      IMPORTING keys FOR caselotheader~changepackingmode.
    METHODS calculatenoofpolybags FOR DETERMINE ON MODIFY
      IMPORTING keys FOR caselotheader~calculatenoofpolybags.
    METHODS edit FOR MODIFY
      IMPORTING keys FOR ACTION caselotheader~edit.
    METHODS is_create_granted
      RETURNING VALUE(rv_create_granted) TYPE abap_bool.
    METHODS is_update_granted
      IMPORTING iv_salesorg              TYPE vkorg
                iv_distchan              TYPE vtweg
                iv_division              TYPE spart
                iv_salesdoctype          TYPE auart
      RETURNING VALUE(rv_update_granted) TYPE abap_bool.
    METHODS is_delete_granted
      IMPORTING iv_salesorg              TYPE vkorg
                iv_distchan              TYPE vtweg
                iv_division              TYPE spart
                iv_salesdoctype          TYPE auart
      RETURNING VALUE(rv_delete_granted) TYPE abap_bool.
ENDCLASS.

CLASS lhc_caselotheader IMPLEMENTATION.

  METHOD get_instance_authorizations.
    DATA: lv_update_granted TYPE abap_bool,
          lv_delete_granted TYPE abap_bool.

    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
        FIELDS ( caselotno salesdocumenttype salesorganization distributionchannel division )
        WITH CORRESPONDING #( keys )
        RESULT DATA(lt_caselots)
      FAILED failed.

    CHECK lt_caselots IS NOT INITIAL.

    LOOP AT lt_caselots INTO DATA(ls_caselot).
      lv_update_granted = is_update_granted( iv_salesorg = ls_caselot-salesorganization
                                             iv_distchan = ls_caselot-distributionchannel
                                             iv_division = ls_caselot-division
                                             iv_salesdoctype = ls_caselot-salesdocumenttype ).
      lv_delete_granted = is_delete_granted( iv_salesorg = ls_caselot-salesorganization
                                             iv_distchan = ls_caselot-distributionchannel
                                             iv_division = ls_caselot-division
                                             iv_salesdoctype = ls_caselot-salesdocumenttype ).
      APPEND VALUE #( LET lv_upd_auth = COND #( WHEN lv_update_granted = abap_true
                                             THEN if_abap_behv=>auth-allowed
                                             ELSE if_abap_behv=>auth-unauthorized )
                          lv_del_auth = COND #( WHEN lv_delete_granted = abap_true
                                             THEN if_abap_behv=>auth-allowed
                                             ELSE if_abap_behv=>auth-unauthorized )
                      IN
                       %tky = ls_caselot-%tky
                       %update                = lv_upd_auth
                       %action-edit           = lv_upd_auth

                       %delete                = lv_del_auth
                    ) TO result.
    ENDLOOP.

  ENDMETHOD.

  METHOD get_global_authorizations.
    IF requested_authorizations-%create EQ if_abap_behv=>mk-on.
      IF is_create_granted( ) = abap_true.
        result-%create = if_abap_behv=>auth-allowed.
      ELSE.
        result-%create = if_abap_behv=>auth-unauthorized.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD caselotnumber.
    "This method is used to create the early number for the caselot object
    "using the ZV_CASLOT number range object

    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
        FIELDS ( caselotno )
        WITH CORRESPONDING #( keys )
      RESULT DATA(lt_caselots).

    DELETE lt_caselots WHERE caselotno IS NOT INITIAL.
    CHECK lt_caselots IS NOT INITIAL.


    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot>).

      TRY.
          cl_numberrange_runtime=>number_get( EXPORTING
              nr_range_nr       = '0'
              object            = 'ZV_CASLOT'
            IMPORTING
                  number            = DATA(lv_number) ).
        CATCH cx_nr_object_not_found  cx_number_ranges INTO DATA(lo_cx).
          DATA(lv_text) = lo_cx->get_text( ).
          "handle exception
          APPEND VALUE #(  %msg = new_message_with_text( text = lv_text
                                         severity = if_abap_behv_message=>severity-error
                                       ) )
                       TO reported-caselotheader.
      ENDTRY.
      <ls_caselot>-caselotno = lv_number+10(10).
    ENDLOOP.

    MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
     ENTITY caselotheader
       UPDATE FIELDS ( caselotno )
       WITH CORRESPONDING #( lt_caselots )

   REPORTED DATA(ls_update_reported).

    "fill reported
    reported = CORRESPONDING #( DEEP ls_update_reported ).


  ENDMETHOD.

  METHOD is_create_granted.
    rv_create_granted = abap_true.
    "setting the create authorization
  ENDMETHOD.

  METHOD is_update_granted.
    AUTHORITY-CHECK OBJECT
                    zif_sd_caselot_const=>gc_authority_object_setting-object
                 ID zif_sd_caselot_const=>gc_authority_object_setting-id_salesorg FIELD iv_salesorg
                 ID zif_sd_caselot_const=>gc_authority_object_setting-id_distchan FIELD iv_distchan
                 ID zif_sd_caselot_const=>gc_authority_object_setting-id_division FIELD iv_division
                 ID zif_sd_caselot_const=>gc_authority_object_setting-id_actvt FIELD '02'.
    IF sy-subrc = 0.
      AUTHORITY-CHECK OBJECT
                      zif_sd_caselot_const=>gc_authority_object_fortype-object
                   ID zif_sd_caselot_const=>gc_authority_object_fortype-id_salesdoctype FIELD iv_salesdoctype
                   ID zif_sd_caselot_const=>gc_authority_object_fortype-id_actvt FIELD '02'.
      IF  sy-subrc = 0.
        rv_update_granted = abap_true.
      ENDIF.
    ENDIF.
    "setting the update authorization
  ENDMETHOD.

  METHOD is_delete_granted.
    AUTHORITY-CHECK OBJECT
                  zif_sd_caselot_const=>gc_authority_object_setting-object
               ID zif_sd_caselot_const=>gc_authority_object_setting-id_salesorg FIELD iv_salesorg
               ID zif_sd_caselot_const=>gc_authority_object_setting-id_distchan FIELD iv_distchan
               ID zif_sd_caselot_const=>gc_authority_object_setting-id_division FIELD iv_division
               ID zif_sd_caselot_const=>gc_authority_object_setting-id_actvt FIELD '06'.
    IF sy-subrc = 0.
      AUTHORITY-CHECK OBJECT
                zif_sd_caselot_const=>gc_authority_object_fortype-object
             ID zif_sd_caselot_const=>gc_authority_object_fortype-id_salesdoctype FIELD iv_salesdoctype
             ID zif_sd_caselot_const=>gc_authority_object_fortype-id_actvt FIELD '06'.
      IF  sy-subrc = 0.
        rv_delete_granted = abap_true.
      ENDIF.
    ENDIF.
    "setting the delete authorization

  ENDMETHOD.

  METHOD get_instance_features.
    "setting the instance features based on packing mode
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
        FIELDS ( packingmode vascutoffflag deliverystatus caselotstatus )
        WITH CORRESPONDING #( keys )
      RESULT DATA(lt_caselots)
      FAILED failed.

    result = VALUE #( FOR ls_caselotheader IN lt_caselots
                          ( %tky                   = ls_caselotheader-%tky
                            %field-numberofmpbpercnt = COND #( WHEN ls_caselotheader-packingmode = mc_packing_mode-ssp
                                                                 OR ls_caselotheader-packingmode = mc_packing_mode-msp
                                                               THEN if_abap_behv=>fc-f-read_only
                                                                WHEN ls_caselotheader-packingmode = mc_packing_mode-mssp
                                                                  OR ls_caselotheader-packingmode = mc_packing_mode-sssp
                                                             THEN if_abap_behv=>fc-f-mandatory )

                            %assoc-_caselotitem        =  if_abap_behv=>fc-o-enabled
                            %update = COND #(  WHEN ls_caselotheader-vascutoffflag IS NOT INITIAL
                                                 OR (  ls_caselotheader-deliverystatus = 'X' AND ls_caselotheader-caselotstatus = 'S' )
                                               THEN if_abap_behv=>fc-o-disabled
                                               ELSE if_abap_behv=>fc-o-enabled )
                            %delete = COND #(  WHEN ls_caselotheader-vascutoffflag IS NOT INITIAL
                                                 OR ( ls_caselotheader-deliverystatus = 'X' AND ls_caselotheader-caselotstatus = 'S' )
                                               THEN if_abap_behv=>fc-o-disabled
                                               ELSE if_abap_behv=>fc-o-enabled )
                            %action-manualplanning = COND #(  WHEN ls_caselotheader-vascutoffflag IS NOT INITIAL
                                                 OR ( ls_caselotheader-deliverystatus = 'X' AND ls_caselotheader-caselotstatus = 'S' )
                                               THEN if_abap_behv=>fc-o-disabled
                                               ELSE if_abap_behv=>fc-o-enabled ) ) ).

  ENDMETHOD.

  METHOD calculatenoofunits.
    DATA: lv_total TYPE kwmeng.
    "this method is used to calculate the number of units based on the total confirmed quantity from SO and Number of MPB entered by user
    " Read all relevant caselot instances.
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
         ENTITY caselotheader
            FIELDS ( totalactualqty totalconfirmedqty numberofmpbpercnt numberofunits manualflag )
            WITH CORRESPONDING #( keys )
         RESULT DATA(lt_caselots).


    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot>).
      IF <ls_caselot>-manualflag EQ ' '.
        "Need to keep manual flag check and packing mode checks separate
        IF <ls_caselot>-packingmode IS NOT INITIAL.
          IF  <ls_caselot>-packingmode NE mc_packing_mode-ssp AND <ls_caselot>-packingmode NE mc_packing_mode-msp.
            "SSSP & MSSP
            DATA(lv_flag) = 'X'.
          ENDIF.

          READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotheader BY  \_caselotitem
            FIELDS ( orderquantity caselotquantity confdquantity material )
          WITH VALUE #( ( %tky = <ls_caselot>-%tky ) )
          RESULT DATA(lt_caselotitems).

          IF lv_flag IS NOT INITIAL.
            IF <ls_caselot>-totalqtyperctn IS NOT INITIAL.
              <ls_caselot>-totalqtyperctn = <ls_caselot>-numberofmpbpercnt * <ls_caselot>-numberofunits.
              IF <ls_caselot>-totalconfirmedqty MOD <ls_caselot>-totalqtyperctn = 0.
                <ls_caselot>-numberofmpb = trunc( <ls_caselot>-totalconfirmedqty / <ls_caselot>-totalqtyperctn ).
                <ls_caselot>-totalquantity = <ls_caselot>-totalqtyperctn * <ls_caselot>-numberofmpb.
              ELSE.
                CLEAR: <ls_caselot>-numberofmpb, <ls_caselot>-totalquantity, <ls_caselot>-totalqtyperctn.
                APPEND VALUE #( %tky = <ls_caselot>-%tky
                                %msg = NEW zcx_sd_caselot(
                                severity   = if_abap_behv_message=>severity-error
                                textid = zcx_sd_caselot=>caselot_pack_error )
                                             ) TO reported-caselotheader.
                <ls_caselot>-caselotstatus = 'E'.
              ENDIF.
            ELSE.
              CLEAR: <ls_caselot>-numberofmpb, <ls_caselot>-totalquantity, <ls_caselot>-totalqtyperctn.
              APPEND VALUE #( %tky = <ls_caselot>-%tky
                              %msg = NEW zcx_sd_caselot(
                              severity   = if_abap_behv_message=>severity-error
                              textid = zcx_sd_caselot=>caselot_pack_error )
                                           ) TO reported-caselotheader.
              <ls_caselot>-caselotstatus = 'E'.
            ENDIF.
          ELSE.
            IF  <ls_caselot>-numberofunits IS NOT INITIAL.
              IF <ls_caselot>-totalconfirmedqty MOD <ls_caselot>-numberofunits = 0.
                <ls_caselot>-numberofmpb = trunc( <ls_caselot>-totalconfirmedqty / <ls_caselot>-numberofunits ).
                <ls_caselot>-totalquantity = <ls_caselot>-numberofunits * <ls_caselot>-numberofmpb.
                <ls_caselot>-totalqtyperctn = <ls_caselot>-numberofunits.
              ELSE.
                CLEAR: <ls_caselot>-numberofmpb, <ls_caselot>-totalquantity.
                APPEND VALUE #( %tky = <ls_caselot>-%tky
                                %msg = NEW zcx_sd_caselot(
                                severity   = if_abap_behv_message=>severity-error
                                textid = zcx_sd_caselot=>caselot_pack_error )
                                             ) TO reported-caselotheader.
                <ls_caselot>-caselotstatus = 'E'.
              ENDIF.
            ELSE.
              CLEAR: <ls_caselot>-numberofmpb, <ls_caselot>-totalquantity.
              APPEND VALUE #( %tky = <ls_caselot>-%tky
                              %msg = NEW zcx_sd_caselot(
                              severity   = if_abap_behv_message=>severity-error
                              textid = zcx_sd_caselot=>caselot_pack_error )
                                           ) TO reported-caselotheader.
              <ls_caselot>-caselotstatus = 'E'.
            ENDIF.
          ENDIF.
        ENDIF.
        LOOP AT lt_caselotitems ASSIGNING FIELD-SYMBOL(<ls_caselotitem>). "#EC CI_NESTED
          IF <ls_caselot>-numberofunits IS NOT INITIAL.
            IF <ls_caselot>-packingmode = mc_packing_mode-ssp.
              CLEAR <ls_caselotitem>-cltotalqty.
              IF <ls_caselotitem>-confdquantity MOD <ls_caselot>-numberofunits = 0.
                <ls_caselotitem>-caselotquantity = <ls_caselotitem>-confdquantity / <ls_caselot>-numberofunits.
                <ls_caselotitem>-criticality = 3.
              ELSE.
                <ls_caselotitem>-criticality = 1.
                <ls_caselotitem>-caselotquantity = 0.
                APPEND VALUE #( %tky = <ls_caselot>-%tky
                                %msg = NEW zcx_sd_caselot(
                                severity   = if_abap_behv_message=>severity-error
                                textid = zcx_sd_caselot=>caselot_pack_error )
                             ) TO reported-caselotheader.
              ENDIF.
            ELSEIF <ls_caselot>-packingmode = mc_packing_mode-sssp.
              CLEAR <ls_caselotitem>-cltotalqty.
              IF <ls_caselot>-totalqtyperctn IS NOT INITIAL.
                IF <ls_caselotitem>-confdquantity MOD <ls_caselot>-totalqtyperctn = 0.
                  <ls_caselotitem>-caselotquantity = <ls_caselotitem>-confdquantity / <ls_caselot>-totalqtyperctn.
                  <ls_caselotitem>-criticality = 3.
                ELSE.
                  <ls_caselotitem>-criticality = 1.
                  <ls_caselotitem>-caselotquantity = 0.
                  APPEND VALUE #( %tky = <ls_caselot>-%tky
                                  %msg = NEW zcx_sd_caselot(
                                  severity   = if_abap_behv_message=>severity-error
                                  textid = zcx_sd_caselot=>caselot_pack_error )
                                 ) TO reported-caselotheader.
                ENDIF.
              ELSE.
                <ls_caselotitem>-criticality = 1.
                CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
              ENDIF.
            ELSEIF <ls_caselot>-packingmode = mc_packing_mode-msp.
              lv_total =  <ls_caselot>-numberofunits * <ls_caselotitem>-confdquantity.
              IF <ls_caselot>-totalquantity IS NOT INITIAL.
                IF lv_total IS NOT INITIAL AND lv_total MOD <ls_caselot>-totalquantity = 0.
                  <ls_caselotitem>-caselotquantity = lv_total / <ls_caselot>-totalquantity.
                  <ls_caselotitem>-cltotalqty = <ls_caselotitem>-caselotquantity * <ls_caselot>-numberofmpb.
                  <ls_caselotitem>-criticality = 3.
                ELSE.
                  <ls_caselotitem>-criticality = 1.
                  CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
                  APPEND VALUE #( %tky = <ls_caselot>-%tky
                                  %msg = NEW zcx_sd_caselot(
                                  severity   = if_abap_behv_message=>severity-error
                                  textid = zcx_sd_caselot=>caselot_pack_error )
                                ) TO reported-caselotheader.
                ENDIF.
              ELSE.
                <ls_caselotitem>-criticality = 1.
                CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
              ENDIF.
            ELSEIF <ls_caselot>-packingmode = mc_packing_mode-mssp.
              lv_total =  <ls_caselot>-numberofunits * <ls_caselotitem>-confdquantity.
              IF <ls_caselot>-totalquantity IS NOT INITIAL.
                IF lv_total IS NOT INITIAL AND lv_total MOD <ls_caselot>-totalquantity = 0.
                  <ls_caselotitem>-caselotquantity = lv_total / <ls_caselot>-totalquantity.
                  <ls_caselotitem>-cltotalqty = <ls_caselotitem>-caselotquantity * <ls_caselot>-numberofmpb.
                  <ls_caselotitem>-criticality = 3.
                ELSE.
                  <ls_caselotitem>-criticality = 1.
                  CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
                  APPEND VALUE #( %tky = <ls_caselot>-%tky
                                  %msg = NEW zcx_sd_caselot(
                                  severity   = if_abap_behv_message=>severity-error
                                  textid = zcx_sd_caselot=>caselot_pack_error )
                                ) TO reported-caselotheader.
                ENDIF.
              ELSE.
                <ls_caselotitem>-criticality = 1.
                CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
              ENDIF.
            ENDIF.
          ELSE.
            <ls_caselotitem>-criticality = 0.
            CLEAR: <ls_caselotitem>-caselotquantity, <ls_caselotitem>-cltotalqty.
          ENDIF.
          CLEAR lv_total.
        ENDLOOP.
        " write back the modified caselotitems
        MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotitem
            UPDATE FIELDS ( criticality caselotquantity cltotalqty )
            WITH CORRESPONDING #( lt_caselotitems ).
        IF <ls_caselot>-numberofmpb IS NOT INITIAL.
          IF  reported-caselotheader IS NOT INITIAL.
            <ls_caselot>-caselotstatus = 'E'.
          ELSE.
            <ls_caselot>-caselotstatus = 'S'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.

    " write back the modified No Of Units of caselots
    MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
      UPDATE FIELDS ( numberofmpb totalquantity totalqtyperctn caselotstatus totalactualqty )
      WITH CORRESPONDING #( lt_caselots ).

  ENDMETHOD.

  METHOD manualplanning.
    "method to do manual planning when caselot quantity is changed manually by the user at the item level

    DATA: lv_ratio_sum       TYPE int1.
    " Read all parent UUIDs
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
        FIELDS ( totalactualqty caselothuuid numberofunits numberofmpbpercnt totalconfirmedqty packingmode numberofmpb )
        WITH CORRESPONDING #( keys )
      RESULT DATA(lt_caselots).


    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot>).
      IF <ls_caselot>-packingmode EQ mc_packing_mode-msp OR <ls_caselot>-packingmode EQ mc_packing_mode-mssp.

        READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotheader BY \_caselotitem
            FIELDS ( material caselotitem caselotquantity confdquantity )
            WITH VALUE #( ( %tky = <ls_caselot>-%tky ) )
          RESULT DATA(lt_caselotitems).

        " find total quantity
        LOOP AT lt_caselotitems INTO DATA(ls_caselotitem). "#EC CI_NESTED
          IF  ls_caselotitem-caselotquantity IS INITIAL.
            APPEND VALUE #( %tky = <ls_caselot>-%tky ) TO failed-caselotheader.
            APPEND VALUE #( %tky = ls_caselotitem-%tky
                            %msg = NEW zcx_sd_caselot(
                                           textid   = zcx_sd_caselot=>caselot_mpitem_mandatory
                                           attr1 = COND #( WHEN <ls_caselot>-packingmode = mc_packing_mode-msp THEN  mc_col_msp
                                                           WHEN <ls_caselot>-packingmode = mc_packing_mode-mssp THEN  mc_col_mssp )
                                           attr2  = CONV #( ls_caselotitem-material )
                                           severity = if_abap_behv_message=>severity-error ) ) TO reported-caselotitem.
            DATA(lv_error) = 'X'.
          ELSE.
            lv_ratio_sum = ls_caselotitem-caselotquantity + lv_ratio_sum.
          ENDIF.
        ENDLOOP.
        CHECK lv_error IS INITIAL.
        IF <ls_caselot>-packingmode = mc_packing_mode-mssp.
          DATA(lv_mssp) = 'X'.
          IF  <ls_caselot>-numberofmpbpercnt IS INITIAL.
            APPEND VALUE #( %tky = ls_caselotitem-%tky
                            %msg = NEW zcx_sd_caselot(
                                           textid   = zcx_sd_caselot=>caselot_mp_mandatory
                                           severity = if_abap_behv_message=>severity-error ) ) TO reported-caselotitem.
            lv_error = 'X'.
          ELSE.
            <ls_caselot>-numberofunits = lv_ratio_sum.
            lv_ratio_sum = lv_ratio_sum * <ls_caselot>-numberofmpbpercnt.
            IF <ls_caselot>-totalconfirmedqty MOD lv_ratio_sum = 0.
              <ls_caselot>-totalqtyperctn = <ls_caselot>-numberofmpbpercnt * <ls_caselot>-numberofunits.
            ELSE.
              APPEND VALUE #( %tky = <ls_caselot>-%tky
                              %msg = NEW zcx_sd_caselot(
                              severity   = if_abap_behv_message=>severity-error
                              textid = zcx_sd_caselot=>caselot_pack_error )
                            ) TO  reported-caselotheader.
              CLEAR <ls_caselot>-numberofunits.
              EXIT.
            ENDIF.
          ENDIF.
        ELSEIF <ls_caselot>-packingmode = mc_packing_mode-msp.
          IF <ls_caselot>-totalconfirmedqty MOD lv_ratio_sum = 0.
            <ls_caselot>-numberofunits = lv_ratio_sum.
          ELSE.
            APPEND VALUE #( %tky = <ls_caselot>-%tky
                            %msg = NEW zcx_sd_caselot(
                            severity   = if_abap_behv_message=>severity-error
                            textid = zcx_sd_caselot=>caselot_pack_error )
                          ) TO  reported-caselotheader.
            CLEAR <ls_caselot>-numberofunits.
            EXIT.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF lv_error IS INITIAL.
      IF  lv_mssp IS INITIAL.
        " Trigger Re-Calculation on Root Node
        MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotheader
            UPDATE FIELDS ( numberofunits )
            WITH CORRESPONDING #( lt_caselots ).
      ELSE.
        " Trigger Re-Calculation on Root Node
        MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotheader
            UPDATE FIELDS ( numberofunits numberofmpbpercnt )
            WITH CORRESPONDING #( lt_caselots ).
      ENDIF.
    ENDIF.

    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
    ENTITY caselotheader
    ALL FIELDS WITH CORRESPONDING #( keys )
    RESULT DATA(lt_caselot).

    result = VALUE #( FOR ls_caselot IN lt_caselot
                       ( %tky   = ls_caselot-%tky
                         %param = ls_caselot ) ).


  ENDMETHOD.

  METHOD validatemandatory.
    "method to validate mandatory fields during create

    CLEAR: failed, reported.
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
        ENTITY caselotheader
          FIELDS (  caselottext packingmode numberofunits caselotstatus )
          WITH CORRESPONDING #( keys )
        RESULT DATA(lt_caselots)
        FAILED DATA(ls_failed).

    failed = CORRESPONDING #( DEEP ls_failed ).

    LOOP AT lt_caselots INTO DATA(ls_caselot).

      APPEND VALUE #( %tky = ls_caselot-%tky
                      %state_area = 'VALIDATE_CASELOT' ) TO
                      reported-caselotheader.
      IF  ls_caselot-packingmode IS INITIAL.
        APPEND VALUE #( %tky = ls_caselot-%tky ) TO failed-caselotheader.
        APPEND VALUE #( %tky = ls_caselot-%tky
                        %state_area = 'VALIDATE_CASELOT'
                        %msg = NEW zcx_sd_caselot(
                                 severity   = if_abap_behv_message=>severity-error
                                 textid = zcx_sd_caselot=>caselot_failed )
                        %element-packingmode = if_abap_behv=>mk-on ) TO
                        reported-caselotheader.

      ENDIF.

      IF ls_caselot-numberofunits IS INITIAL.
        APPEND VALUE #( %tky = ls_caselot-%tky ) TO failed-caselotheader.
        APPEND VALUE #( %tky = ls_caselot-%tky
                        %state_area = 'VALIDATE_CASELOT'
                        %msg = NEW zcx_sd_caselot(
                                 severity   = if_abap_behv_message=>severity-error
                                 textid = zcx_sd_caselot=>caselot_failed )
                        %element-numberofunits = if_abap_behv=>mk-on ) TO
                        reported-caselotheader.

      ENDIF.
      IF ls_caselot-caselotstatus = 'E'.
        APPEND VALUE #( %tky = ls_caselot-%tky ) TO failed-caselotheader.
        APPEND VALUE #( %tky = ls_caselot-%tky
                        %state_area = 'VALIDATE_CASELOT'
                        %msg = NEW zcx_sd_caselot(
                                 severity   = if_abap_behv_message=>severity-error
                                 textid = zcx_sd_caselot=>caselot_error )
                        %element-numberofunits = if_abap_behv=>mk-on ) TO
                        reported-caselotheader.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD changepackingmode.
    "Determination used to set the field control on change of packing modes
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
       ENTITY caselotheader
          FIELDS ( packingmode totalactualqty )
          WITH CORRESPONDING #( keys )
       RESULT DATA(lt_caselots).

    DELETE lt_caselots WHERE packingmode IS INITIAL.

    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot>).
      IF <ls_caselot>-%is_draft = mc_draft_mode.
        CLEAR: <ls_caselot>-numberofmpb ,
               <ls_caselot>-numberofmpbpercnt,
               <ls_caselot>-numberofunits,
               <ls_caselot>-totalqtyperctn ,
               <ls_caselot>-caselotstatus,
               <ls_caselot>-totalquantity .
      ENDIF.
      IF  <ls_caselot>-packingmode EQ mc_packing_mode-ssp OR <ls_caselot>-packingmode EQ mc_packing_mode-msp.
        <ls_caselot>-pbfieldcontrol = 'X'.
      ELSE.
        <ls_caselot>-pbfieldcontrol = ' '.
      ENDIF.
    ENDLOOP.
    " write back the modified No Of Units of caselots
    MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
        UPDATE FIELDS ( pbfieldcontrol numberofmpbpercnt numberofmpb totalquantity numberofunits totalqtyperctn )
        WITH CORRESPONDING #( lt_caselots ).

  ENDMETHOD.

  METHOD calculatenoofpolybags.
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
      ENTITY caselotheader
          FIELDS ( totalactualqty totalconfirmedqty numberofmpbpercnt numberofunits manualflag )
          WITH CORRESPONDING #( keys )
       RESULT DATA(lt_caselots).


    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot>).
      IF <ls_caselot>-packingmode = mc_packing_mode-sssp OR <ls_caselot>-packingmode = mc_packing_mode-mssp.
        IF <ls_caselot>-numberofmpbpercnt IS NOT INITIAL AND <ls_caselot>-numberofunits IS NOT INITIAL.
          <ls_caselot>-totalqtyperctn = <ls_caselot>-numberofmpbpercnt * <ls_caselot>-numberofunits.
          DATA(lv_flag) = 'X'.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF lv_flag = 'X'.
      MODIFY ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
       ENTITY caselotheader
         UPDATE FIELDS ( numberofunits totalqtyperctn  )
         WITH CORRESPONDING #( lt_caselots )
         REPORTED DATA(ls_reported).
      reported-caselotheader = CORRESPONDING #( ls_reported-caselotheader ).
    ENDIF.
  ENDMETHOD.

  METHOD edit.
    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
    ENTITY caselotheader
      FIELDS ( packingmode vascutoffflag deliverystatus caselotstatus )
      WITH CORRESPONDING #( keys )
    RESULT DATA(lt_caselots)
    FAILED failed.
    LOOP AT lt_caselots ASSIGNING FIELD-SYMBOL(<ls_caselot_tmp>).
      IF <ls_caselot_tmp>-vascutoffflag IS NOT INITIAL OR
         <ls_caselot_tmp>-deliverystatus = 'X' AND <ls_caselot_tmp>-caselotstatus = 'S'.
        APPEND VALUE #( %tky = <ls_caselot_tmp>-%tky
                        %msg = NEW zcx_sd_caselot(
                                severity   = if_abap_behv_message=>severity-error
                                textid = zcx_sd_caselot=>caselot_auth_error )
                                             ) TO reported-caselotheader.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

CLASS lhc_caselotitem IMPLEMENTATION.

  METHOD get_instance_features.
    "Setting the instance features for caselot items

    READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
          ENTITY caselotitem BY \_caselotheader
            FIELDS ( caselothuuid packingmode vascutoffflag deliverystatus caselotstatus )
            WITH CORRESPONDING #(  keys  )
          RESULT DATA(lt_caselots).

    LOOP AT lt_caselots INTO DATA(ls_caselot).

      READ ENTITIES OF zsd_i_case_lot_h IN LOCAL MODE
        ENTITY caselotheader BY \_caselotitem
          FIELDS ( caselotitem )
          WITH VALUE #( ( %tky = ls_caselot-%tky ) )
        RESULT DATA(lt_caselotitems).

      result = VALUE #( FOR ls_caselotitem IN lt_caselotitems
                            ( %tky                          = ls_caselotitem-%tky
                              %field-higherlevelitem        = if_abap_behv=>fc-f-read_only
                              %field-salesorderitem         = if_abap_behv=>fc-f-read_only
                              %field-scheduleline           = if_abap_behv=>fc-f-read_only
                              %field-confirmeddeliverydate  = if_abap_behv=>fc-f-read_only
                              %field-material               = if_abap_behv=>fc-f-read_only
                              %field-caselotitem            = if_abap_behv=>fc-f-read_only
                              %update = COND #(  WHEN ls_caselot-vascutoffflag IS NOT INITIAL
                                                 OR (  ls_caselot-deliverystatus = 'X' AND  ls_caselot-caselotstatus = 'S' )
                                               THEN if_abap_behv=>fc-o-disabled
                                               ELSE if_abap_behv=>fc-o-enabled )
     ) ).
    ENDLOOP.
  ENDMETHOD.

ENDCLASS.

CLASS lsc_zsd_i_case_lot_h IMPLEMENTATION.

  METHOD save_modified.
    DATA: lt_return         TYPE TABLE OF bapiret2.
    DATA: lt_case_lot_i  TYPE TABLE OF zsd_t_case_lot_i,
          ls_case_lot_i  TYPE zsd_t_case_lot_i,
          ls_caselotitem TYPE zsd_i_case_lot_i.


    IF update-caselotitem IS NOT INITIAL.

      LOOP AT update-caselotitem ASSIGNING FIELD-SYMBOL(<ls_caselot_item>).
        ls_caselotitem = CORRESPONDING #( <ls_caselot_item>  ).
        ls_case_lot_i = CORRESPONDING #(  ls_caselotitem
                         MAPPING  caseloth_uuid = caselothuuid
                                  caseloti_uuid = caselotiuuid
                                  caselot_item  = caselotitem
                                  matnr         = material
                                  uepos         = higherlevelitem
                                  posnr         = salesorderitem
                                  kwmeng        = orderquantity
                                  kbmeng        = confdquantity
                                  caselot_cl_pb = caselotquantity
                                  caselot_tt_qty = cltotalqty
                                  created_at    = createdat
                                  created_by    = createdby
                                  changed_at    = changedat
                                  changed_by    = changedby
                                  etenr         = scheduleline
                                  edatu         = confirmeddeliverydate
                                  sounit        = totalorderquantityunit
                                ).
        APPEND ls_case_lot_i  TO lt_case_lot_i.
        CLEAR : ls_case_lot_i, ls_caselotitem.
      ENDLOOP.
      MODIFY zsd_t_case_lot_i FROM TABLE lt_case_lot_i.
      IF sy-subrc EQ 0.
        CLEAR: lt_case_lot_i.
      ENDIF.
    ENDIF.


    IF create-caselotheader IS NOT INITIAL.
      SELECT salesorder,
             material,
             packingmode
      FROM @create-caselotheader AS caselotheader
      INTO TABLE @DATA(lt_sales_order).

      IF sy-subrc = 0.
        DATA(ls_sales_order) = lt_sales_order[ 1 ].
        CALL FUNCTION 'ZSD_FM_SALESORD_CHANGE'
          IN BACKGROUND TASK
          EXPORTING
            iv_salesorder = ls_sales_order-salesorder
            iv_material   = ls_sales_order-material
          TABLES
            lt_return     = lt_return.
      ENDIF.

      IF create-caselotitem IS NOT INITIAL.
        SELECT higherlevelitem,
               scheduleline
          FROM @create-caselotitem AS caselotitem
          INTO TABLE @DATA(lt_case_lot_item).
        IF sy-subrc EQ 0 AND lt_case_lot_item IS NOT INITIAL.
          SELECT salesdocument,
                 salesdocumentitem,
                 scheduleline,
                 deliverydate
            FROM i_salesdocumentscheduleline       "#EC CI_NO_TRANSFORM
            INTO TABLE @DATA(lt_sales_order_item)
           WHERE salesdocument      = @ls_sales_order-salesorder.
          IF sy-subrc EQ 0.
            UNASSIGN <ls_caselot_item>.
            LOOP AT create-caselotitem ASSIGNING <ls_caselot_item>.
              READ TABLE lt_sales_order_item ASSIGNING FIELD-SYMBOL(<ls_sales_item>)
                      WITH KEY salesdocument     = ls_sales_order-salesorder
                               salesdocumentitem = <ls_caselot_item>-salesorderitem
                               scheduleline      = <ls_caselot_item>-scheduleline.
              IF sy-subrc EQ 0.
                ls_caselotitem = CORRESPONDING #( <ls_caselot_item>  ).
                ls_caselotitem-confirmeddeliverydate = <ls_sales_item>-deliverydate.
                ls_case_lot_i = CORRESPONDING #(  ls_caselotitem
                                MAPPING  caseloth_uuid = caselothuuid
                                         caseloti_uuid = caselotiuuid
                                         caselot_item  = caselotitem
                                         matnr         = material
                                         uepos         = higherlevelitem
                                         posnr         = salesorderitem
                                         kwmeng        = orderquantity
                                         kbmeng        = confdquantity
                                         caselot_cl_pb = caselotquantity
                                         caselot_tt_qty = cltotalqty
                                         created_at    = createdat
                                         created_by    = createdby
                                         changed_at    = changedat
                                         changed_by    = changedby
                                         etenr         = scheduleline
                                         edatu         = confirmeddeliverydate
                                         sounit        = totalorderquantityunit
                                       ).
                APPEND ls_case_lot_i  TO lt_case_lot_i.
                CLEAR : ls_case_lot_i, ls_caselotitem.
              ENDIF.
            ENDLOOP.

            MODIFY zsd_t_case_lot_i FROM TABLE lt_case_lot_i.
            IF sy-subrc EQ 0.
              CLEAR lt_case_lot_i.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

ENDCLASS.