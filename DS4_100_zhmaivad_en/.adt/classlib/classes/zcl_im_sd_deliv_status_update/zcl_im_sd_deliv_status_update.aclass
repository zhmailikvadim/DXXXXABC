CLASS zcl_im_sd_deliv_status_update DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.

    INTERFACES if_badi_interface.
    INTERFACES if_ex_le_shp_delivery_proc.
  PROTECTED SECTION.
  PRIVATE SECTION.
    DATA mth_messages TYPE finchdel_t.
    TYPES:
      BEGIN OF mtyp_s_sto_item_to_update,
        ebeln TYPE ebeln,
        ebelp TYPE ebelp,
        bsart TYPE bsart,
        lfimg TYPE lfimg,
        menge TYPE etmen,
        meins TYPE bstme,
      END OF mtyp_s_sto_item_to_update.
    TYPES: mtyp_tt_sto_items_to_update TYPE STANDARD TABLE OF mtyp_s_sto_item_to_update.

    METHODS add_message
      IMPORTING
        iv_vbeln TYPE vbeln_vl.
ENDCLASS.


CLASS zcl_im_sd_deliv_status_update IMPLEMENTATION.
  METHOD if_ex_le_shp_delivery_proc~delivery_final_check.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~change_delivery_header.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~change_delivery_item.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~change_fcode_attributes.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~change_field_attributes.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~check_item_deletion.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~delivery_deletion.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~document_number_publish.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~fill_delivery_header.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~fill_delivery_item.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~initialize_delivery.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~item_deletion.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~publish_delivery_item.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~read_delivery.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~save_and_publish_before_output.
    " -----------------------------------------------------------------------
    "  R E V I S I O N   H I S T O R Y                                     -
    " -----------------------------------------------------------------------
    " AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              -
    "              |            | TRANSPORT REQUESTS                       -
    " -----------------------------------------------------------------------

    CONSTANTS lc_outbound_delivery TYPE vbtyp VALUE 'J'.
    CONSTANTS lc_inbound_delivery  TYPE vbtyp VALUE '7'.
    CONSTANTS lc_purchase_order    TYPE vgtyp VALUE 'V'.
    CONSTANTS lc_create            TYPE trtyp VALUE 'H'.
    CONSTANTS lc_update            TYPE trtyp VALUE 'V'.
    CONSTANTS lc_goods_movement_vbfa_next TYPE vbtypl VALUE 'R'.
    CONSTANTS:
      BEGIN OF lc_multiship_idoc,
        blank    TYPE zsd_multiship_flag_wms VALUE '',
        multiple TYPE zsd_multiship_flag_wms VALUE 'M',
        final    TYPE zsd_multiship_flag_wms VALUE 'F',
      END OF lc_multiship_idoc.
    DATA lt_sto_items_to_update TYPE mtyp_tt_sto_items_to_update.
    DATA lv_shipping_status     TYPE abap_boolean.

    CHECK if_trtyp = lc_create OR if_trtyp = lc_update.
    BREAK zhmaivad.
    DATA(lt_multiship_pgi_params) = zcl_sd_sto_status_update=>get_buffer_data_shared( ).

    LOOP AT it_xlikp ASSIGNING FIELD-SYMBOL(<ls_xlikp>).
      LOOP AT it_xlips ASSIGNING FIELD-SYMBOL(<ls_lips>) WHERE vbeln = <ls_xlikp>-vbeln.
        CASE <ls_xlikp>-vbtyp.
          WHEN lc_outbound_delivery.
            TRY.
                DATA(lv_picked_quantity) = it_xvbfa[ vbelv = <ls_lips>-vbeln posnv = <ls_lips>-posnr vbtyp_n = lc_goods_movement_vbfa_next ]-rfmng.
                DATA(lv_multiship_flag_wms) = VALUE #( lt_multiship_pgi_params[
                                                           vbeln = <ls_xlikp>-vbeln ]-multiship_flag_wms DEFAULT lc_multiship_idoc-blank ).
                IF lv_multiship_flag_wms = lc_multiship_idoc-blank OR lv_multiship_flag_wms = lc_multiship_idoc-final.
                  DELETE lt_multiship_pgi_params WHERE vbeln = <ls_xlikp>-vbeln.
                  APPEND VALUE #( vbeln  = <ls_lips>-vbeln
                                  posnr  = <ls_lips>-posnr
                                  vgbel  = <ls_lips>-vgbel
                                  vgpos  = <ls_lips>-vgpos
                                  status = zcl_sd_sto_status_update=>gc_sto_status-shipped ) TO lt_multiship_pgi_params.
                  zcl_sd_sto_status_update=>set_buffer_data_shared( lt_multiship_pgi_params  ).
                  zcl_sd_sto_status_update=>set_text_po_item(
                      iv_po_number = <ls_lips>-vgbel
                      iv_po_item   = <ls_lips>-vgpos+1(5)
                      iv_status    = zcl_sd_sto_status_update=>gc_sto_status-shipped ).
                ENDIF.
              CATCH cx_sy_itab_line_not_found.
                RETURN.
            ENDTRY.
          WHEN lc_inbound_delivery.
            TRY.
                DATA(lv_received_quantity) = it_xvbfa[ vbelv = <ls_lips>-vbeln posnv = <ls_lips>-posnr vbtyp_n = lc_goods_movement_vbfa_next ]-rfmng.
                SELECT SINGLE zz1_zorderreason_pdh INTO @DATA(lv_zorderreason_pdh) FROM ekko WHERE ebeln = @<ls_lips>-vgbel.
                IF sy-subrc = 0 AND lv_zorderreason_pdh IN zcl_sd_sto_status_update=>gs_hm_data-order_reason_range.
                  DELETE lt_multiship_pgi_params WHERE vbeln = <ls_xlikp>-vbeln.
                  APPEND VALUE #( vbeln  = <ls_lips>-vbeln
                                  posnr  = <ls_lips>-posnr
                                  vgbel  = <ls_lips>-vgbel
                                  vgpos  = <ls_lips>-vgpos
                                  status = zcl_sd_sto_status_update=>gc_sto_status-received ) TO lt_multiship_pgi_params.
                  zcl_sd_sto_status_update=>set_buffer_data_shared( lt_multiship_pgi_params  ).
                  zcl_sd_sto_status_update=>set_text_po_item(
                      iv_po_number = <ls_lips>-vgbel
                      iv_po_item   = <ls_lips>-vgpos+1(5)
                      iv_status    = zcl_sd_sto_status_update=>gc_sto_status-received ).
                ENDIF.
              CATCH cx_sy_itab_line_not_found.
                RETURN.
            ENDTRY.
        ENDCASE.
      ENDLOOP.
    ENDLOOP.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~save_and_publish_document.
  ENDMETHOD.

  METHOD if_ex_le_shp_delivery_proc~save_document_prepare.
  ENDMETHOD.

  METHOD add_message.
    " -----------------------------------------------------------------------
    "  R E V I S I O N   H I S T O R Y                                     -
    " -----------------------------------------------------------------------
    " AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              -
    "              |            | TRANSPORT REQUESTS                       -
    " -----------------------------------------------------------------------
    " SHNIPALI     | 22.06.2023 | 21909     : STO Rejection                -
    "              |            | DS4K954453                               -
    " -----------------------------------------------------------------------

    INSERT VALUE #( vbeln = iv_vbeln
                    msgty = sy-msgty
                    msgno = sy-msgno
                    msgid = sy-msgid
                    msgv1 = sy-msgv1
                    msgv2 = sy-msgv2
                    msgv3 = sy-msgv3
                    msgv4 = sy-msgv4 ) INTO TABLE mth_messages.
  ENDMETHOD.
ENDCLASS.