CLASS ltc_data_provider DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.
    METHODS get_kafka_configuration_value REDEFINITION.
    METHODS get_namespace_value REDEFINITION.
    METHODS create_http_client REDEFINITION.
    METHODS post REDEFINITION.

ENDCLASS.

CLASS ltc_data_provider IMPLEMENTATION.

  METHOD get_kafka_configuration_value.
    CASE iv_key.
      WHEN 'SCHEMA_KEY' OR 'SCHEMA_VALUE'.
        rt_value = VALUE #( ( '1' ) ).
      WHEN 'OPTIONAL_FIELD'.
        IF iv_topic = 'demo'.
          rt_value = VALUE #( ( 'optionalrecord/com.adidas.afs_o2c.avro.model.demo.optionalRecord' )
                              ( 'optionalarray/array' ) ).
        ELSEIF iv_topic = 'demo2'.
          rt_value = VALUE #( ( 'bo-optional/string' )
                              ( 'optionalrecord-optional/string' ) ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.

  METHOD get_namespace_value.
    rt_value = VALUE #( ( 'demo_rfc' ) ).
  ENDMETHOD.

  METHOD create_http_client.
    cl_http_client=>create_internal( IMPORTING  client = eif_http_client ).
  ENDMETHOD.

  METHOD post.
    ev_status = 200.
    CLEAR es_response.
  ENDMETHOD.

ENDCLASS.


CLASS ltc_optionalfields DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS:
      setup,
      tear_down ##RELAX,
      check_optional_record_array FOR TESTING RAISING cx_static_check,
      check_same_name FOR TESTING RAISING cx_static_check.
    DATA: mo_cut         TYPE REF TO zcl_pe_kafka_producer,
          mo_test_double TYPE REF TO ltc_data_provider.
ENDCLASS.
CLASS zcl_pe_kafka_producer DEFINITION LOCAL FRIENDS ltc_optionalfields.

CLASS ltc_optionalfields IMPLEMENTATION.
  METHOD setup.



    "given a fake data provider to simulate all objects are being created
    mo_test_double = NEW ltc_data_provider( ).


  ENDMETHOD.

  METHOD tear_down.
    FREE: mo_cut,
          mo_test_double.
  ENDMETHOD.

  METHOD check_optional_record_array.
    "given
    mo_cut = NEW zcl_pe_kafka_producer( 'demo' ).
    mo_cut->get_data_provider( mo_test_double ).
    "given key & value structures
    DATA: ls_key   TYPE zpe_s_kafka_demo_key,
          ls_value TYPE ZPE_S_KAFKA_DEMO_value1,
          lv_json  TYPE string.
    ls_key = VALUE #( event = 'demo' object_key = '1' ).
    ls_value = VALUE #( change_id = '1' optionalrecord = VALUE #( optional = 'opt' )  optionalarray = VALUE #( ( optional1 = 'optarray' optional2 = 'optarray2' ) ) ).
    mo_cut->add_record( is_data_key = ls_key is_data_value = ls_value ).

    "when
    mo_cut->send_kafka_message( IMPORTING es_response = DATA(ls_response) ).

    "then
    lv_json = '{"key_schema":"","key_schema_id":1,"value_schema":"","value_schema_id":1,"records":[{"key":{"event":"demo","object_key":"1"},"value":{"change_id":"1",'.
    lv_json = lv_json &&
    '"optionalrecord" : { "com.adidas.afs_o2c.avro.model.demo.optionalRecord": {"optional":"opt"}},"optionalarray" : { "array": [{"optional1":"optarray","optional2":"optarray2"}]}}}]}'.


    DATA(ls_expected_response) = VALUE zpe_s_kafka_producer_response( status = '200'
                                                                      error_code = ''
                                                                      error_message = ''
                                                                      json_message = VALUE #( pathprefix = '/topics/demo'
                                                                                             header = VALUE #( ( name = 'Content-Type'
                                                                                                               value = 'application/vnd.kafka.avro.v2+json' ) )
                                                                                             body = lv_json ) ).
    cl_abap_unit_assert=>assert_equals( act = ls_response
                                        exp = ls_expected_response ).
  ENDMETHOD.

  METHOD check_same_name.
    "given
    mo_cut = NEW zcl_pe_kafka_producer( 'demo2' ).
    mo_cut->get_data_provider( mo_test_double ).
    "given key & value structures
    DATA: ls_key   TYPE zpe_s_kafka_demo_key,
          ls_value TYPE ZPE_S_KAFKA_DEMO_value2,
          lv_json  TYPE string.
    ls_key = VALUE #( event = 'demo' object_key = '1' ).
    ls_value = VALUE #( change_id = '1'
                        optionalrecord = VALUE #( optional = 'opt' )
                        bo = VALUE #( optional = 'opt' ) ).
    mo_cut->add_record( is_data_key = ls_key is_data_value = ls_value ).

    "when
    mo_cut->send_kafka_message( IMPORTING es_response = DATA(ls_response) ).

    "then
    lv_json = '{"key_schema":"","key_schema_id":1,"value_schema":"","value_schema_id":1,"records":[{"key":{"event":"demo","object_key":"1"},"value":{"change_id":"1",'.
    lv_json = lv_json &&
    '"optionalrecord":{"optional" : { "string": "opt"}},"bo":{"optional" : { "string": "opt"}}}}]}'.

    DATA(ls_expected_response) = VALUE zpe_s_kafka_producer_response( status = '200'
                                                                      error_code = ''
                                                                      error_message = ''
                                                                      json_message = VALUE #( pathprefix = '/topics/demo2'
                                                                                             header = VALUE #( ( name = 'Content-Type'
                                                                                                               value = 'application/vnd.kafka.avro.v2+json' ) )
                                                                                             body = lv_json ) ).
    cl_abap_unit_assert=>assert_equals( act = ls_response
                                        exp = ls_expected_response ).
  ENDMETHOD.

ENDCLASS.

CLASS ltc_data_provider2 DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.

    METHODS get_kafka_configuration_value REDEFINITION.
    METHODS get_namespace_value REDEFINITION.
    METHODS create_http_client REDEFINITION.
    METHODS post REDEFINITION.

  PRIVATE SECTION.

ENDCLASS.

CLASS ltc_data_provider2 IMPLEMENTATION.

  METHOD get_kafka_configuration_value.
    CASE iv_key.
      WHEN 'SCHEMA_KEY' OR 'SCHEMA_VALUE'.
        rt_value = VALUE #( ( '1' ) ).
    ENDCASE.
  ENDMETHOD.

  METHOD get_namespace_value.
    rt_value = VALUE #( ( 'demo_rfc' ) ).
  ENDMETHOD.

  METHOD create_http_client.
    cl_http_client=>create_internal( IMPORTING  client = eif_http_client ).
  ENDMETHOD.

  METHOD post.
    ev_status = 404.
    es_response = VALUE #(  offsets = VALUE #( ( partition = 0 offset = '' error_code = '404' message = 'Http 404 Not Found' ) ) ).
  ENDMETHOD.

ENDCLASS.
CLASS ltc_error_call DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS:
      setup,
      tear_down ##RELAX,
      error_400 FOR TESTING RAISING cx_static_check.
    DATA: mo_cut         TYPE REF TO zcl_pe_kafka_producer,
          mo_test_double TYPE REF TO ltc_data_provider2.
ENDCLASS.

CLASS zcl_pe_kafka_producer DEFINITION LOCAL FRIENDS ltc_error_call.
CLASS ltc_error_call IMPLEMENTATION.
  METHOD setup.
    "given a fake data provider to simulate all objects are being created
    mo_test_double = NEW ltc_data_provider2( ).
  ENDMETHOD.

  METHOD tear_down.
    FREE: mo_cut,
          mo_test_double.
  ENDMETHOD.

  METHOD error_400.
    "given
    mo_cut = NEW zcl_pe_kafka_producer( 'demo2' ).
    mo_cut->get_data_provider( mo_test_double ).
    "given key & value structures
    DATA: ls_key   TYPE zpe_s_kafka_demo_key,
          ls_value TYPE ZPE_S_KAFKA_DEMO_value2,
          lv_json  TYPE string.
    ls_key = VALUE #( event = 'demo' object_key = '1' ).
    ls_value = VALUE #( change_id = '1'
                        optionalrecord = VALUE #( optional = 'opt' )
                        bo = VALUE #( optional = 'opt' ) ).
    mo_cut->add_record( is_data_key = ls_key is_data_value = ls_value ).

    "when
    mo_cut->send_kafka_message( IMPORTING es_response = DATA(ls_response) ).
    "then
    lv_json = '{"key_schema":"","key_schema_id":1,"value_schema":"","value_schema_id":1,"records":[{"key":{"event":"demo","object_key":"1"},"value":{"change_id":"1","optionalrecord":{"optional":"opt"},"bo":{"optional":"opt"}}}]}'.
    DATA(ls_expected_response) = VALUE zpe_s_kafka_producer_response( status = '404'
                                                                      error_code = '404'
                                                                      error_message = 'Http 404 Not Found'
                                                                      json_message = VALUE #( pathprefix = '/topics/demo2'
                                                                                             header = VALUE #( ( name = 'Content-Type'
                                                                                                               value = 'application/vnd.kafka.avro.v2+json' ) )
                                                                                             body = lv_json ) ).
    cl_abap_unit_assert=>assert_equals( act = ls_response
                                        exp = ls_expected_response ).
  ENDMETHOD.

ENDCLASS.

CLASS ltc_data_provider3 DEFINITION FINAL FOR TESTING
                        INHERITING FROM lcl_data_provider.

  PUBLIC SECTION.

    METHODS get_kafka_configuration_value REDEFINITION.
    METHODS get_namespace_value REDEFINITION.
    METHODS create_http_client REDEFINITION.
    METHODS post REDEFINITION.

  PRIVATE SECTION.


ENDCLASS.

CLASS ltc_data_provider3 IMPLEMENTATION.

  METHOD get_kafka_configuration_value.
    CASE iv_key.
      WHEN 'SCHEMA_KEY' OR 'SCHEMA_VALUE'.
        rt_value = VALUE #( ( '1' ) ).
      WHEN 'HIDDEN_FIELD'.
        rt_value = VALUE #( ( 'optionalrecord-optional' ) ).
    ENDCASE.
  ENDMETHOD.

  METHOD get_namespace_value.
    rt_value = VALUE #( ( 'demo_rfc' ) ).
  ENDMETHOD.

  METHOD create_http_client.
    cl_http_client=>create_internal( IMPORTING  client = eif_http_client ).
  ENDMETHOD.

  METHOD post.
    ev_status = 200.
    CLEAR es_response.
  ENDMETHOD.

ENDCLASS.


CLASS ltc_hiddenfields DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS:
      setup,
      tear_down ##RELAX,
      check_hidden FOR TESTING RAISING cx_static_check.
    DATA: mo_cut         TYPE REF TO zcl_pe_kafka_producer,
          mo_test_double TYPE REF TO ltc_data_provider3.
ENDCLASS.
CLASS zcl_pe_kafka_producer DEFINITION LOCAL FRIENDS ltc_hiddenfields.

CLASS ltc_hiddenfields IMPLEMENTATION.
  METHOD setup.
    "given a fake data provider to simulate all objects are being created
    mo_test_double = NEW #( ).
  ENDMETHOD.

  METHOD tear_down.
    FREE: mo_cut,
          mo_test_double.
  ENDMETHOD.

  METHOD check_hidden.
    "given
    mo_cut = NEW zcl_pe_kafka_producer( 'demo2' ).
    mo_cut->get_data_provider( mo_test_double ).
    "given key & value structures
    DATA: ls_key   TYPE zpe_s_kafka_demo_key,
          ls_value TYPE ZPE_S_KAFKA_DEMO_value2,
          lv_json  TYPE string.
    ls_key = VALUE #( event = 'demo' object_key = '1' ).
    ls_value = VALUE #( change_id = '1'
                        optionalrecord = VALUE #( optional = 'opt' )
                        bo = VALUE #( optional = 'opt' ) ).
    mo_cut->add_record( is_data_key = ls_key is_data_value = ls_value ).

    "when
    mo_cut->send_kafka_message( IMPORTING es_response = DATA(ls_response) ).

    "then
    lv_json = '{"key_schema":"","key_schema_id":1,"value_schema":"","value_schema_id":1,"records":[{"key":{"event":"demo","object_key":"1"},"value":{"change_id":"1",'.
    lv_json = lv_json &&
    '"optionalrecord":{},"bo":{"optional":"opt"}}}]}'.

    DATA(ls_expected_response) = VALUE zpe_s_kafka_producer_response( status = '200'
                                                                      error_code = ''
                                                                      error_message = ''
                                                                      json_message = VALUE #( pathprefix = '/topics/demo2'
                                                                                             header = VALUE #( ( name = 'Content-Type'
                                                                                                               value = 'application/vnd.kafka.avro.v2+json' ) )
                                                                                             body = lv_json ) ).
    cl_abap_unit_assert=>assert_equals( act = ls_response
                                        exp = ls_expected_response ).
  ENDMETHOD.

ENDCLASS.