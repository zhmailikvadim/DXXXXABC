CLASS zcl_sd_delta_atp DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    CLASS-METHODS: create_for_material_plant
      IMPORTING
        iv_checking_rule      TYPE prreg
        iv_material           TYPE matnr
        iv_plant              TYPE werks_d
      RETURNING
        VALUE(lo_raw_request) TYPE REF TO if_atp_info_raw_req,
      determine_availability_at
        IMPORTING
          iv_checking_rule  TYPE prreg
          iv_material       TYPE matnr
          iv_plant          TYPE werks_d
          iv_requested_date TYPE timestamp
        EXPORTING
          es_availability   TYPE atp_info_res_availy_record
          es_message        TYPE if_atp_info_raw_req=>tt_message.
    INTERFACES:
      if_sadl_exit_calc_element_read.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_sd_delta_atp IMPLEMENTATION.
  METHOD create_for_material_plant.
    DATA : lo_raw_request_factory        TYPE REF TO cl_atp_info_raw_req_factory,
           lt_material_plant_combination TYPE cl_atp_info_raw_req_factory=>tt_material_plant_combination.

    APPEND VALUE #( material = iv_material  supplying_plant = iv_plant  ) TO lt_material_plant_combination.

    CREATE OBJECT lo_raw_request_factory.
    CHECK lo_raw_request_factory IS BOUND.
    lo_raw_request_factory->create_for_material_plant(
      EXPORTING
        it_material_plant = lt_material_plant_combination
        iv_checking_rule  = iv_checking_rule
      RECEIVING
        ro_raw_req        = lo_raw_request
    ).
  ENDMETHOD.

  METHOD determine_availability_at.
    DATA :  lo_controller          TYPE REF TO cl_atp_info_controller.
    CREATE OBJECT lo_controller.
    CHECK lo_controller IS BOUND.

    lo_controller->determine_availability_at(
      EXPORTING
        io_raw_request         = create_for_material_plant( iv_checking_rule = iv_checking_rule
                                                            iv_material = iv_material
                                                            iv_plant = iv_plant )
        iv_requested_date      = iv_requested_date
      IMPORTING
        es_availability_record = es_availability
        et_message             = es_message ).
  ENDMETHOD.

  METHOD if_sadl_exit_calc_element_read~calculate.
    CHECK NOT it_original_data IS INITIAL.

    DATA lt_calculated_data TYPE STANDARD TABLE OF zsd_i_atp_relevantnetchange WITH DEFAULT KEY.
    MOVE-CORRESPONDING it_original_data TO lt_calculated_data.

    LOOP AT lt_calculated_data ASSIGNING FIELD-SYMBOL(<ls_calculated_data>).
      <ls_calculated_data>-atpqty = 999.
    ENDLOOP.
    MOVE-CORRESPONDING lt_calculated_data TO ct_calculated_data.
  ENDMETHOD.

  METHOD if_sadl_exit_calc_element_read~get_calculation_info.
    IF line_exists( it_requested_calc_elements[ table_line = 'ATPQTY' ] ).
      APPEND 'ATPQTY' TO et_requested_orig_elements.
    ENDIF.
  ENDMETHOD.
ENDCLASS.