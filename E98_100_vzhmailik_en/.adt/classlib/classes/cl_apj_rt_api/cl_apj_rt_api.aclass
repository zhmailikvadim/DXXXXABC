"! The class CL_APJ_RT_API provides methods to <br>
"! - schedule an application job <br>
"! - read the status of an application job <br>
"! - delete / cancel an application job <br>
"! <br>
"! please see the following example program and read also the comments <br>
"! <br>
"! CLASS z_cl_api_test_27022020 DEFINITION <br>
"!   PUBLIC <br>
"!   FINAL <br>
"!   CREATE PUBLIC . <br>
"! <br>
"!  PUBLIC SECTION. <br>
"!     INTERFACES if_oo_adt_classrun. <br>
"!  PROTECTED SECTION. <br>
"!  PRIVATE SECTION. <br>
"! ENDCLASS. <br>
"! <br>
"! CLASS Z_CL_API_TEST_27022020 IMPLEMENTATION. <br>
"! <br>
"! METHOD if_oo_adt_classrun~main. <br>
"! <br>
"! data: job_text type CL_APJ_RT_API=>TY_JOB_TEXT value 'Job_Demo'. <br>
"! <br>
"! data template_name   type CL_APJ_RT_API=>TY_TEMPLATE_NAME. <br>
"! <br>
"! data ls_start_info      type CL_APJ_RT_API=>ty_start_info. <br>
"! data ls_scheduling_info type CL_APJ_RT_API=>ty_scheduling_info. <br>
"! data ls_end_info        type CL_APJ_RT_API=>ty_end_info. <br>
"! <br>
"! data: lt_job_parameters type CL_APJ_RT_API=>TT_JOB_PARAMETER_VALUE. <br>
"! data: wa_job_parameters type CL_APJ_RT_API=>TY_JOB_PARAMETER_VALUE. <br>
"! data: wa_value       type CL_APJ_RT_API=>TY_VALUE_RANGE. <br>
"! <br>
"! DATA jobname         TYPE CL_APJ_RT_API=>ty_jobname. <br>
"! data jobcount        TYPE CL_APJ_RT_API=>ty_jobcount. <br>
"! <br>
"! data status          type CL_APJ_RT_API=>TY_JOB_STATUS. <br>
"! data statustext      type CL_APJ_RT_API=>TY_JOB_STATUS_TEXT. <br>
"! <br>
"! data: txt type string. <br>
"! data: ret type bapiret2. <br>
"! <br>
"! * choose name of existing job template !!!! <br>
"! template_name = 'Z_HGK_TEMPLATE_1'. <br>
"! <br>
"! * immediate start <br>
"! *ls_start_info-start_immediately = 'X'. <br>
"! <br>
"! * alternatively with timestamp: <br>
"! get time stamp field data(ts1). <br>
"! * add 1 hour <br>
"! data(ts2) = cl_abap_tstmp=>add( tstmp = ts1 <br>
"!                                 secs  = 3600 ). <br>
"! <br>
"! ls_start_info-timestamp = ts2. <br>
"! <br>
"! ********** periodicity ****************************** <br>
"! <br>
"! ls_scheduling_info-periodic_granularity = 'D'. <br>
"! ls_scheduling_info-periodic_value       = 1. <br>
"! ls_scheduling_info-test_mode            = abap_false. <br>
"! ls_scheduling_info-timezone             = 'CET'. <br>
"! <br>
"! ls_end_info-type = 'NUM'. <br>
"! ls_end_info-max_iterations = 3. <br>
"! <br>
"! * fill parameter table ****************************** <br>
"! * fill the table only, if you want to overrule the parameter values, <br>
"! * which are stored in the template <br>
"! * the field names in this program must match the field names of the template <br>
"! <br>
"! wa_job_parameters-name = 'P_TEST1'. <br>
"! <br>
"! wa_value-sign   = 'I'. <br>
"! wa_value-option = 'EQ'. <br>
"! wa_value-low    = 'Blabla 1'. <br>
"! append wa_value to wa_job_parameters-t_value. <br>
"! <br>
"! append wa_job_parameters to lt_job_parameters. <br>
"! clear wa_job_parameters. <br>
"! *+++++++++++++++++++++++++ <br>
"! <br>
"! wa_job_parameters-name = 'P_TEST2'. <br>
"! <br>
"! wa_value-sign   = 'I'. <br>
"! wa_value-option = 'BT'. <br>
"! wa_value-low    = 'ATEST'. <br>
"! wa_value-high   = 'ZTEST'. <br>
"! append wa_value to wa_job_parameters-t_value. <br>
"! <br>
"! wa_job_parameters-name = 'P_TEST2'. <br>
"! <br>
"! wa_value-sign   = 'I'. <br>
"! wa_value-option = 'BT'. <br>
"! wa_value-low    = '11111'. <br>
"! wa_value-high   = '99999'. <br>
"! append wa_value to wa_job_parameters-t_value. <br>
"! <br>
"! append wa_job_parameters to lt_job_parameters. <br>
"! clear wa_job_parameters. <br>
"! *+++++++++++++++++++++++++ <br>
"! <br>
"! wa_job_parameters-name = 'P_TEST3'. <br>
"! <br>
"! wa_value-sign   = 'I'. <br>
"! wa_value-option = 'EQ'. <br>
"! wa_value-low    = '220'. <br>
"! append wa_value to wa_job_parameters-t_value. <br>
"! <br>
"! append wa_job_parameters to lt_job_parameters. <br>
"! clear wa_job_parameters. <br>
"! <br>
"! ***************************************************** <br>
"! <br>
"! try. <br>
"! <br>
"! * If you pass the table  lt_job_parameters  , then the parameters <br>
"! * contained in this table are used. <br>
"! * If you don't pass the table, the parameters contained in the <br>
"! * job template are used. <br>
"! <br>
"! cl_apj_rt_api=>schedule_job( <br>
"!    EXPORTING <br>
"!       iv_job_template_name   = template_name <br>
"!       iv_job_text            = job_text <br>
"!       is_start_info          = ls_start_info <br>
"! *      is_scheduling_info     = ls_scheduling_info <br>
"! *      is_end_info            = ls_end_info <br>
"!       it_job_parameter_value = lt_job_parameters <br>
"!    IMPORTING <br>
"!       ev_jobname             = jobname <br>
"!       ev_jobcount            = jobcount <br>
"!               ). <br>
"! <br>
"! out->write( jobname ). <br>
"! out->write( jobcount ). <br>
"! <br>
"! cl_apj_rt_api=>get_job_status( <br>
"!           EXPORTING <br>
"!              iv_jobname         = jobname <br>
"!              iv_jobcount        = jobcount <br>
"!           IMPORTING <br>
"!              ev_job_status      = status <br>
"!              ev_job_status_text = statustext <br>
"!               ). <br>
"! <br>
"! out->write( status ). <br>
"! out->write( statustext ). <br>
"! <br>
"! * via the following method you can cancel the job <br>
"! * in the application job context 'cancel' means (as in the Fiori app): <br>
"! * 1. if the job is running, it will be cancelled <br>
"! * 2. if the job has not yet started, it will be deleted. <br>
"! *    In case the job is periodic, the whole periodicity chain is deleted. <br>
"! <br>
"! * cl_apj_rt_api=>cancel_job( <br>
"! *         EXPORTING <br>
"! *            iv_jobname         = jobname <br>
"! *            iv_jobcount        = jobcount <br>
"! *                   ). <br>
"!
"! CATCH CX_APJ_RT INTO DATA(exc). <br>
"!       txt = exc->get_longtext( ). <br>
"!       ret = exc->get_bapiret2( ). <br>
"!       out->write( 'ERROR:' ). out->write( txt ). <br>
"!       out->write( 'msg type =' ). out->write( ret-type ). <br>
"!       out->write( 'msg id =' ). out->write( ret-id ). <br>
"!      out->write( 'msg number =' ). out->write( ret-number ). <br>
"!       out->write( 'msg message =' ). out->write( ret-message ). <br>
"! ENDTRY. <br>
"! <br>
"! ENDMETHOD. <br>
"! ENDCLASS. <br>
class CL_APJ_RT_API definition
  public
  final
  create private .

public section.

  types TY_JOBCOUNT type BTCJOBCNT .
  types TY_JOBNAME type BTCJOB .
  types TY_JOB_STATUS type BTCSTATUS .
  types TY_JOB_STATUS_TEXT type CHAR30 .
  types TY_USER_ERROR type ABAP_BOOL .
  types TY_BAPIRET2 type BAPIRET2 .
  types:
    TT_BAPIRET2 TYPE STANDARD TABLE OF TY_BAPIRET2 .
  types:
    BEGIN OF ty_start_info,
          start_immediately TYPE boolean,
          timestamp         TYPE timestamp,
        END OF ty_start_info .
  types:
    BEGIN OF ty_value_range,
           sign   TYPE tvarv_sign,
           option TYPE tvarv_opti,
           low    TYPE rvari_val_255,
           high   TYPE rvari_val_255,
         END OF ty_value_range .
  types:
    tt_value_range TYPE STANDARD TABLE OF ty_value_range WITH EMPTY KEY .
  types:
    BEGIN OF ty_job_exception,
        calender_id            TYPE btccalid,
        start_restriction_code TYPE btc_start_restriction,
      END OF ty_job_exception .
  types:
    BEGIN OF ty_job_parameter_value,
           name       TYPE apj_job_parameter_name,
           t_value    TYPE tt_value_range,
         END OF ty_job_parameter_value .
  types:
    BEGIN OF ty_weekday_info,
        on_monday    TYPE boolean,
        on_tuesday   TYPE boolean,
        on_wednesday TYPE boolean,
        on_thursday  TYPE boolean,
        on_friday    TYPE boolean,
        on_saturday  TYPE boolean,
        on_sunday    TYPE boolean,
      END OF ty_weekday_info .
  types:
    BEGIN OF ty_month_info,
        day                  TYPE int2,
        use_working_days_ind TYPE boolean,
        shift_direction      TYPE btcwdcdir,
        week_number          TYPE btcpweek,
      END OF ty_month_info .
  types:
    BEGIN OF ty_scheduling_info,
        test_mode            TYPE boolean,
        periodic_granularity TYPE apj_job_periodic_granularity,
        periodic_value       TYPE apj_job_periodic_value,
        timezone             TYPE timezone,
        exception            TYPE ty_job_exception,
        weekday_info         TYPE ty_weekday_info,
        month_info           TYPE ty_month_info,
      END OF ty_scheduling_info .
  types:
    BEGIN OF ty_job_details,
        job_name  TYPE btcjob,
        job_count TYPE btcjobcnt,
      END OF ty_job_details .
  types:
    BEGIN OF ty_end_info,
          type           TYPE apj_job_end_type_c,
          timestamp      TYPE timestamp,
          max_iterations TYPE btc_counter,
        END OF ty_end_info .
  types TY_JOB_TEXT type APJ_JOB_TEXT .
  types TY_TEMPLATE_NAME type APJ_JOB_TEMPLATE_NAME .
  types:
    tt_job_parameter_value TYPE STANDARD TABLE OF ty_job_parameter_value WITH NON-UNIQUE KEY name
            WITH NON-UNIQUE SORTED KEY name COMPONENTS name .

"! Schedule an application job
"! @parameter IV_JOB_TEMPLATE_NAME | name of the job template to be scheduled
"! @parameter IV_JOB_TEXT | the name, under which the job is shown in the application jobs app
"! @parameter IS_START_INFO | start condition of the job (immediate or date+time)
"! @parameter IS_END_INFO | optional: end info, if job is periodic, e.g. number of executions
"! @parameter IS_SCHEDULING_INFO | optional: info about periodicity
"! @parameter IT_JOB_PARAMETER_VALUE | optional: table with parameter values. If empty, the values stored in the template are used
"! @parameter EV_JOBNAME | the technical name of the job. The pair (jobname, job_count) is the key of the job
"! @parameter EV_JOBCOUNT | the jobcount of the job
  class-methods SCHEDULE_JOB
    importing
      !IV_JOB_TEMPLATE_NAME type TY_TEMPLATE_NAME
      !IV_JOB_TEXT type TY_JOB_TEXT
      !IS_START_INFO type TY_START_INFO
      !IS_END_INFO type TY_END_INFO optional
      !IS_SCHEDULING_INFO type TY_SCHEDULING_INFO optional
      !IT_JOB_PARAMETER_VALUE type TT_JOB_PARAMETER_VALUE optional
    exporting
      !EV_JOBNAME type TY_JOBNAME
      !EV_JOBCOUNT type TY_JOBCOUNT
    raising
      CX_APJ_RT .
"! Read the status of an application job
"! @parameter IV_JOBNAME | the technical jobname
"! @parameter IV_JOBCOUNT | the technical jobcount
"! @parameter EV_JOB_STATUS | the job status in one-character representation
"! @parameter EV_JOB_STATUS_TEXT | the job status text,as shown in the application jobs app
  class-methods GET_JOB_STATUS
    importing
      !IV_JOBNAME type TY_JOBNAME
      !IV_JOBCOUNT type TY_JOBCOUNT
    exporting
      !EV_JOB_STATUS type TY_JOB_STATUS
      !EV_JOB_STATUS_TEXT type TY_JOB_STATUS_TEXT
    raising
      CX_APJ_RT .
"! Delete or cancel an application job (depending on the status)
"! @parameter IV_JOBNAME | the technical jobname
"! @parameter IV_JOBCOUNT | the jobcount
  class-methods CANCEL_JOB
    importing
      !IV_JOBNAME type TY_JOBNAME
      !IV_JOBCOUNT type TY_JOBCOUNT
    raising
      CX_APJ_RT .
protected section.
private section.
ENDCLASS.



CLASS CL_APJ_RT_API IMPLEMENTATION.


method CANCEL_JOB.

data: job_details   type CL_APJ_RT_JOB_SCHEDULING_API=>TY_JOB_DETAILS.
data: ev_successful type abap_boolean.

try.

   job_details-job_name  = iv_jobname.
   job_details-job_count = iv_jobcount.

* check existence and ownership
   select single status, created_by from APJ_V_JOB_STATUS
       into @data(jobinfo)
        where jobname  = @iv_jobname
          and jobcount = @iv_jobcount.

   if sy-subrc ne 0.
      RAISE EXCEPTION TYPE CX_APJ_RT
        EXPORTING
          textid      = CX_APJ_RT=>CX_JOB_DOESNT_EXIST.
   endif.

* The authorization, if the user may cancel an other user's
* job, is checked within the called methods

*   if jobinfo-created_by ne sy-uname.
*      RAISE EXCEPTION TYPE CX_APJ_RT
*        EXPORTING
*          textid      = CX_APJ_RT=>CX_NO_AUTH_TO_DELETE
*          object      = conv char40( iv_jobname )
*          uname       = sy-uname.
*   endif.

   cl_apj_rt_job_scheduling_api=>cancel_job(
          EXPORTING
            is_job_details = job_details
          IMPORTING
            ev_successful  = ev_successful ).

   if ev_successful ne abap_true.
      RAISE EXCEPTION TYPE CX_APJ_RT
         EXPORTING
            textid      = CX_APJ_RT=>CX_JOB_CANCEL_FAILED.
   endif.

   CATCH cm_apj_base INTO DATA(exc).
      RAISE EXCEPTION TYPE CX_APJ_RT
        EXPORTING
          textid      = exc->IF_T100_MESSAGE~T100KEY.

endtry.

endmethod.


method GET_JOB_STATUS.

* formerly I called here:  cl_apj_rt_job_scheduling_api=>get_job_status
* but I think that method should also use the CDS view APJ_V_JOB_STATUS

select single status, statustext, created_by from APJ_V_JOB_STATUS
       into @data(s_data)
       where jobname  = @iv_jobname
         and jobcount = @iv_jobcount.

if sy-subrc = 0.
* check ownership
   if s_data-created_by ne sy-uname.
* check, if sy-uname has the authorization to start the underlying catalog.
* if yes, he may display the status
      try.

         data(jcename) = CL_BATCH_AUTHORIZATIONS=>_GET_JCENAME_FROM_JOBNAME( iv_jobname = iv_jobname ).
         CATCH cm_apj_rt INTO DATA(exc).
            RAISE EXCEPTION TYPE CX_APJ_RT
               EXPORTING
                  textid      = exc->IF_T100_MESSAGE~T100KEY.
      endtry.

      if CL_BATCH_AUTHORIZATIONS=>CAN_EXECUTE_JCE( iv_user              = sy-uname
                                                   iv_job_catalog_entry = jcename ) = abap_false.

         RAISE EXCEPTION TYPE CX_APJ_RT
            EXPORTING
              textid      = CX_APJ_RT=>CX_NO_AUTH_TO_READ_DETAILS
              uname       = sy-uname.

      endif.
   endif.

   ev_job_status      = s_data-status.
   ev_job_status_text = s_data-statustext.
else.
   RAISE EXCEPTION TYPE CX_APJ_RT
        EXPORTING
          textid      = CX_APJ_RT=>CX_JOB_DOESNT_EXIST.
endif.

* the CDS view can now deliver the English text, if no
* text in sy-langu is available.

*if sy-langu ne 'E'.
*   if ev_job_status_text is initial or ev_job_status_text co ' '.
*      select single ddtext from dd07t where domname    = 'APJ_STATUS'
*                                  and domvalue_l = @ev_job_status
*                                  and ddlanguage = 'E'
*                                  into @ev_job_status_text.
*   endif.
*endif.

endmethod.


method SCHEDULE_JOB.

data: et_message   type BAPIRETTAB.
data: t100_key     type SCX_T100KEY.
data: job_details  type TY_JOB_DETAILS.

try.

   cl_apj_rt_job_scheduling_api=>schedule_job(
          EXPORTING
             iv_job_template_name   = iv_job_template_name
             iv_job_text            = iv_job_text
             is_start_info          = is_start_info
             is_scheduling_info     = is_scheduling_info
             is_end_info            = is_end_info
             it_job_parameter_value = it_job_parameter_value
          IMPORTING
             et_message             = et_message
             es_job_details         = job_details
              ).

          ev_jobname  = job_details-job_name.
          ev_jobcount = job_details-job_count.

   loop at et_message into data(msg).
      if msg-type = 'E'.
         RAISE EXCEPTION TYPE CX_APJ_RT
            EXPORTING
               bapimsg = msg.
      endif.
   endloop.

   CATCH cm_apj_base INTO DATA(exc).
      RAISE EXCEPTION TYPE CX_APJ_RT
        EXPORTING
          textid      = exc->IF_T100_MESSAGE~T100KEY.

endtry.

endmethod.
ENDCLASS.