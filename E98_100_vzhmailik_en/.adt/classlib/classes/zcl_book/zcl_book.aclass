CLASS zcl_book DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_cud .

    DATA ms_book TYPE zabc_d_book .

    METHODS constructor
      IMPORTING
        !im_book_name TYPE zabc_book_name OPTIONAL
        !im_author_id TYPE zabc_author_id OPTIONAL
        !im_pages_num TYPE zabc_pages OPTIONAL
        !im_copy_qty  TYPE zabc_copy_qty OPTIONAL
        !im_id        TYPE zabc_book_id OPTIONAL .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS zcl_book IMPLEMENTATION.


  METHOD constructor.
    ms_book-book_id = COND #( WHEN im_id IS NOT SUPPLIED THEN zcl_library=>get_next_number( ir_object = me )
                              WHEN im_id IS SUPPLIED THEN im_id ).

    ms_book-book_name = im_book_name.
    ms_book-author_id = im_author_id.
    ms_book-pages_num = im_pages_num.
    ms_book-copy_qty = im_copy_qty.
  ENDMETHOD.


  METHOD zif_cud~add_to_library.
    DATA(lo_library) = zcl_library=>get_instance( ).

    IF ms_book-book_id IS NOT INITIAL.
      TRY.
          lo_library->check_id_exist( EXPORTING im_id = ms_book-book_id ir_object = me ).
        CATCH zcx_library INTO DATA(r_exception).
          MESSAGE r_exception->get_text( ) TYPE 'W'.
          EXIT.
      ENDTRY.
    ENDIF.

    ms_book-book_id = zcl_library=>get_next_number( ir_object = me ).

    RAISE EVENT zif_cud~change_entity EXPORTING ex_entity = ms_book
                                                ex_insert = 'X'.
  ENDMETHOD.


  METHOD zif_cud~delete_from_library.
    RAISE EVENT zif_cud~change_entity EXPORTING ex_entity = ms_book
                                                ex_delete = 'X'.
  ENDMETHOD.


  METHOD zif_cud~update_in_library.
    RAISE EVENT zif_cud~change_entity EXPORTING ex_entity = ms_book
                                                ex_update = 'X'.
  ENDMETHOD.
ENDCLASS.