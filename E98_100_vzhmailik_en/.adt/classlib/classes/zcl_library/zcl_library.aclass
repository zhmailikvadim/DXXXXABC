CLASS zcl_library DEFINITION
  PUBLIC
  CREATE PRIVATE .

  PUBLIC SECTION.

    TYPES:
      BEGIN OF ty_booking_full,
        person_first_name TYPE  zabc_first_name,
        person_last_name  TYPE zabc_last_name,
        book_name         TYPE zabc_book_name.
        INCLUDE TYPE zabc_d_booking.
    TYPES: END OF ty_booking_full .
    TYPES:
      BEGIN OF ty_book_full,
        author_first_name TYPE  zabc_first_name,
        author_last_name  TYPE zabc_last_name.
        INCLUDE           TYPE zabc_d_book.
    TYPES: END OF ty_book_full .
    TYPES:
      tt_book TYPE TABLE OF zabc_d_book .
    TYPES:
      tt_author TYPE TABLE OF zabc_s_author .
    TYPES:
      tt_booking TYPE TABLE OF zabc_d_booking .
    TYPES:
      tt_reader TYPE  TABLE OF zabc_s_reader .

    DATA book_list TYPE tt_book .
    DATA author_list TYPE tt_author .
    DATA booking_list TYPE tt_booking .
    DATA reader_list TYPE tt_reader .
    DATA mo_book TYPE REF TO zcl_book .
    DATA mo_author TYPE REF TO zcl_author .
    DATA mo_reader TYPE REF TO zcl_reader .
    DATA mo_booking TYPE REF TO zcl_booking .
    DATA mo_author_for_book TYPE REF TO zcl_author .
    DATA mo_book_for_booking TYPE REF TO zcl_book .
    DATA mo_reader_for_booking TYPE REF TO zcl_reader .

    METHODS constructor .
    METHODS change_book_list
      FOR EVENT zif_cud~change_entity OF zcl_book
      IMPORTING
        !ex_insert
        !ex_update
        !ex_delete
        !ex_entity .
    METHODS change_author_list
      FOR EVENT zif_cud~change_entity OF zcl_author
      IMPORTING
        !ex_entity
        !ex_insert
        !ex_update
        !ex_delete .
    METHODS change_reader_list
      FOR EVENT zif_cud~change_entity OF zcl_reader
      IMPORTING
        !ex_entity
        !ex_insert
        !ex_update
        !ex_delete .
    METHODS change_booking_list
      FOR EVENT zif_cud~change_entity OF zcl_booking
      IMPORTING
        !ex_insert
        !ex_update
        !ex_delete
        !ex_entity .
    CLASS-METHODS get_next_number
      IMPORTING
        !ir_object       TYPE REF TO object
      RETURNING
        VALUE(ex_number) TYPE zabc_person_id .
    CLASS-METHODS display_popup_table
      IMPORTING
        !iv_title TYPE text70
      CHANGING
        !it_table TYPE STANDARD TABLE .
    METHODS display_list
      IMPORTING
        !iv_book    TYPE selflag OPTIONAL
        !iv_author  TYPE selflag OPTIONAL
        !iv_booking TYPE selflag OPTIONAL
        !iv_reader  TYPE selflag OPTIONAL .
    METHODS get_obj_author_via_id
      IMPORTING
        !im_id           TYPE zabc_person_id
      RETURNING
        VALUE(ro_author) TYPE REF TO zcl_author .
    METHODS get_obj_reader_via_id
      IMPORTING
        !im_id           TYPE zabc_person_id
      RETURNING
        VALUE(ro_reader) TYPE REF TO zcl_reader .
    METHODS get_obj_booking_via_id
      IMPORTING
        !im_id            TYPE zabc_booking_id
      RETURNING
        VALUE(ro_booking) TYPE REF TO zcl_booking .
    METHODS get_obj_book_via_id
      IMPORTING
        !im_id         TYPE zabc_person_id
      RETURNING
        VALUE(ro_book) TYPE REF TO zcl_book .
    METHODS check_id_exist
      IMPORTING
        !ir_object        TYPE REF TO object
        !im_id            TYPE zabc_person_id
        !im_expected_true TYPE selflag OPTIONAL
      RAISING
        zcx_library .
    CLASS-METHODS get_instance
      RETURNING
        VALUE(ro_library) TYPE REF TO zcl_library .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CLASS-DATA mo_instance TYPE REF TO zcl_library .

    METHODS retrieve_from_db
      IMPORTING
        !iv_booking TYPE selflag OPTIONAL
        !iv_author  TYPE selflag OPTIONAL
        !iv_reader  TYPE selflag OPTIONAL
        !iv_book    TYPE selflag OPTIONAL .
    METHODS update_database
      IMPORTING
        !is_entity        TYPE any
        !iv_booking       TYPE selflag OPTIONAL
        !iv_reader        TYPE selflag OPTIONAL
        !iv_author        TYPE selflag OPTIONAL
        !iv_book          TYPE selflag OPTIONAL
        !iv_update        TYPE selflag OPTIONAL
        !iv_insert        TYPE selflag OPTIONAL
        !iv_delete        TYPE selflag OPTIONAL
      RETURNING
        VALUE(ex_success) TYPE selflag .
    METHODS lock_entity
      IMPORTING
        !im_id            TYPE any
        !iv_booking       TYPE selflag OPTIONAL
        !iv_author        TYPE selflag OPTIONAL
        !iv_reader        TYPE selflag OPTIONAL
        !iv_book          TYPE selflag OPTIONAL
      RETURNING
        VALUE(ex_success) TYPE selflag
      RAISING
        zcx_library .
    METHODS unlock_entity
      IMPORTING
        !im_id            TYPE any
        !iv_booking       TYPE selflag OPTIONAL
        !iv_author        TYPE selflag OPTIONAL
        !iv_reader        TYPE selflag OPTIONAL
        !iv_book          TYPE selflag OPTIONAL
      RETURNING
        VALUE(ex_success) TYPE selflag .
ENDCLASS.



CLASS zcl_library IMPLEMENTATION.


  METHOD get_next_number.
    DATA:
          lv_nrnr TYPE nrnr.

    lv_nrnr = COND #( WHEN ir_object IS INSTANCE OF zcl_booking THEN '01'
                      WHEN ir_object IS INSTANCE OF zcl_author THEN '02'
                      WHEN ir_object IS INSTANCE OF zcl_book THEN '03'
                      WHEN ir_object IS INSTANCE OF zcl_reader THEN '04').

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = lv_nrnr
        object                  = 'ZABC_RANGE'
      IMPORTING
        number                  = ex_number
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
      WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.


  METHOD constructor.
    retrieve_from_db( iv_author  = 'X'
                      iv_book    = 'X'
                      iv_reader  = 'X'
                      iv_booking = 'X' ).

    mo_book = NEW #( im_id = '0' ).
    mo_author = NEW #( im_id = '0' ).
    mo_reader = NEW #( im_id = '0' ).
    mo_booking = NEW #( im_id = '0' ).
  ENDMETHOD.


  METHOD retrieve_from_db.
    IF iv_booking = 'X'.
      SELECT *
        FROM zabc_d_booking
        INTO CORRESPONDING FIELDS OF TABLE booking_list.
    ENDIF.

    IF iv_reader = 'X'.
      SELECT *
        FROM zabc_d_reader AS a
        INNER JOIN zabc_d_reader_t AS t
          ON a~person_id = t~person_id AND
             langu = sy-langu
        INTO CORRESPONDING FIELDS OF TABLE reader_list.
    ENDIF.

    IF iv_author = 'X'.
      SELECT *
        FROM zabc_d_author AS a
        INNER JOIN zabc_d_author_t AS t
          ON a~author_id = t~author_id AND
             langu = sy-langu
        INTO CORRESPONDING FIELDS OF TABLE author_list.
    ENDIF.

    IF iv_book = 'X'.
      SELECT *
        FROM zabc_d_book
        INTO CORRESPONDING FIELDS OF TABLE book_list.
    ENDIF.
  ENDMETHOD.


  METHOD change_book_list.
    DATA:
          ls_book LIKE LINE OF book_list.

    ls_book = ex_entity.

    IF ex_insert = 'X'.
      IF update_database( iv_book = 'X' iv_insert = 'X' is_entity = ls_book ) IS NOT INITIAL.
        MESSAGE s000(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_update = 'X'.
      IF update_database( iv_book = 'X' iv_update = 'X' is_entity = ls_book ) IS NOT INITIAL.
        MESSAGE s001(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_delete = 'X'.
      IF update_database( iv_book = 'X' iv_delete = 'X' is_entity = ls_book ) IS NOT INITIAL.
        MESSAGE s002(zmc_abc_oop).
      ENDIF.
    ENDIF.

    unlock_entity( iv_book = 'X' im_id = ls_book-book_id ).
    retrieve_from_db( iv_book = 'X' ).
  ENDMETHOD.


  METHOD change_author_list.
    DATA:
          ls_author LIKE LINE OF author_list.

    ls_author = ex_entity.

    IF ex_insert = 'X'.
      IF update_database( iv_author = 'X' iv_insert = 'X' is_entity = ls_author ) IS NOT INITIAL.
        MESSAGE s000(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_update = 'X'.
      IF update_database( iv_author = 'X' iv_update = 'X' is_entity = ls_author ) IS NOT INITIAL.
        MESSAGE s001(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_delete = 'X'.
      IF update_database( iv_author = 'X' iv_delete = 'X' is_entity = ls_author ) IS NOT INITIAL.
        MESSAGE s002(zmc_abc_oop).
      ENDIF.
    ENDIF.

    unlock_entity( iv_author = 'X' im_id = ls_author-author_id ).
    retrieve_from_db( iv_author = 'X' ).
  ENDMETHOD.


  METHOD change_booking_list.
    DATA:
          ls_booking LIKE LINE OF booking_list.

    ls_booking = ex_entity.

    IF ex_insert = 'X'.
      IF update_database( iv_booking = 'X' iv_insert = 'X' is_entity = ls_booking ) IS NOT INITIAL.
        MESSAGE s000(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_update = 'X'.
      IF update_database( iv_booking = 'X' iv_update = 'X' is_entity = ls_booking ) IS NOT INITIAL.
        MESSAGE s001(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_delete = 'X'.
      IF update_database( iv_booking = 'X' iv_delete = 'X' is_entity = ls_booking ) IS NOT INITIAL.
        MESSAGE s002(zmc_abc_oop).
      ENDIF.
    ENDIF.

    unlock_entity( iv_booking = 'X' im_id = ls_booking-booking_id ).
    retrieve_from_db( iv_booking = 'X' ).
  ENDMETHOD.


  METHOD change_reader_list.
    DATA:
          ls_reader LIKE LINE OF reader_list.

    ls_reader = ex_entity.

    IF ex_insert = 'X'.
      IF update_database( iv_reader = 'X' iv_insert = 'X' is_entity = ls_reader ) IS NOT INITIAL.
        MESSAGE s000(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_update = 'X'.
      IF update_database( iv_reader = 'X' iv_update = 'X' is_entity = ls_reader ) IS NOT INITIAL.
        MESSAGE s001(zmc_abc_oop).
      ENDIF.
    ENDIF.

    IF ex_delete = 'X'.
      IF update_database( iv_reader = 'X' iv_delete = 'X' is_entity = ls_reader ) IS NOT INITIAL.
        MESSAGE s002(zmc_abc_oop).
      ENDIF.
    ENDIF.

    retrieve_from_db( iv_reader = 'X' ).
    unlock_entity( iv_reader = 'X' im_id = ls_reader-person_id ).
  ENDMETHOD.


  METHOD display_list.
    IF iv_book = 'X'.
      retrieve_from_db( iv_book = 'X' ).

      DATA lt_book_full TYPE TABLE OF ty_book_full.

      LOOP AT book_list ASSIGNING FIELD-SYMBOL(<fs_book>).
        APPEND INITIAL LINE TO lt_book_full ASSIGNING FIELD-SYMBOL(<fs_book_full>).
        TRY.
            <fs_book_full> = CORRESPONDING #( BASE ( <fs_book_full> ) <fs_book> ).
            <fs_book_full> = CORRESPONDING #( BASE ( <fs_book_full> ) book_list[ book_id = <fs_book>-book_id ] ).
            <fs_book_full> = CORRESPONDING #( BASE ( <fs_book_full> ) author_list[ author_id = <fs_book>-author_id ] ).
          CATCH cx_sy_itab_line_not_found.
        ENDTRY.
      ENDLOOP.

      display_popup_table( EXPORTING iv_title = 'Books'
                           CHANGING  it_table = lt_book_full ).
    ENDIF.

    IF iv_author = 'X'.
      retrieve_from_db( iv_author = 'X' ).

      display_popup_table( EXPORTING iv_title = 'Authors'
                           CHANGING  it_table = author_list ).
    ENDIF.

    IF iv_reader = 'X'.
      retrieve_from_db( iv_reader = 'X' ).

      display_popup_table( EXPORTING iv_title = 'Readers'
                           CHANGING  it_table = reader_list ).
    ENDIF.

    IF iv_booking = 'X'.
      retrieve_from_db( iv_booking = 'X' ).

      DATA lt_booking_full TYPE TABLE OF ty_booking_full.

      LOOP AT booking_list ASSIGNING FIELD-SYMBOL(<fs_booking>).
        APPEND INITIAL LINE TO lt_booking_full ASSIGNING FIELD-SYMBOL(<fs_booking_full>).
        TRY.
            <fs_booking_full> = CORRESPONDING #( BASE ( <fs_booking_full> ) <fs_booking> ).
            <fs_booking_full> = CORRESPONDING #( BASE ( <fs_booking_full> ) book_list[ book_id = <fs_booking>-book_id ] ).
            <fs_booking_full> = CORRESPONDING #( BASE ( <fs_booking_full> ) reader_list[ person_id = <fs_booking>-person_id ] ).
          CATCH cx_sy_itab_line_not_found.
        ENDTRY.
      ENDLOOP.

      display_popup_table( EXPORTING iv_title = 'Bookings'
                           CHANGING  it_table = lt_booking_full ).
    ENDIF.
  ENDMETHOD.


  METHOD display_popup_table.
    DATA: lr_content   TYPE REF TO cl_salv_form_element,
          gc_functions TYPE REF TO cl_salv_functions,
          gr_table     TYPE REF TO cl_salv_table,
          lr_display   TYPE REF TO cl_salv_display_settings,
          lr_columns   TYPE REF TO cl_salv_columns,
          gr_container TYPE REF TO cl_gui_custom_container.

    TRY.
        cl_salv_table=>factory(
          EXPORTING
            list_display = ''
          IMPORTING
            r_salv_table = gr_table
          CHANGING
            t_table      = it_table ).
      CATCH cx_salv_msg.
    ENDTRY.

    gr_table->set_screen_popup( start_column = 1
                                end_column   = 130
                                start_line   = 1
                                end_line     = 30 ).

    lr_display = gr_table->get_display_settings( ).
    lr_display->set_list_header( iv_title ).
    lr_display->set_striped_pattern( abap_true ).

    lr_columns = gr_table->get_columns( ).
    lr_columns->set_optimize( abap_true ).

    gc_functions = gr_table->get_functions( ).
    gc_functions->set_all( 'X' ).

    gr_table->display( ).
  ENDMETHOD.


  METHOD get_obj_author_via_id.
    ASSIGN author_list[ author_id = im_id ] TO FIELD-SYMBOL(<fs_author>).
    IF <fs_author> IS NOT ASSIGNED.
      ro_author = NEW zcl_author( im_id = '0').
      EXIT.
    ENDIF.

    ro_author = NEW zcl_author(
      im_id         = <fs_author>-author_id
      im_first_name = <fs_author>-author_first_name
      im_last_name  = <fs_author>-author_last_name
      im_birth_date = <fs_author>-birth_date
      im_country    = <fs_author>-country ).
  ENDMETHOD.


  METHOD get_obj_booking_via_id.
    ASSIGN booking_list[ booking_id = im_id ] TO FIELD-SYMBOL(<fs_booking>).
    IF <fs_booking> IS NOT ASSIGNED.
      ro_booking = NEW zcl_booking( im_id = '0' ).
      EXIT.
    ENDIF.

    ro_booking = NEW zcl_booking(
      im_id               = <fs_booking>-booking_id
      im_book_id          = <fs_booking>-book_id
      im_booking_beg_date = <fs_booking>-booking_beg_date
      im_booking_beg_time = <fs_booking>-booking_beg_time
      im_booking_end_date = <fs_booking>-booking_end_date
      im_booking_end_time = <fs_booking>-booking_end_time
      im_booking_status   = <fs_booking>-booking_status
      im_person_id        = <fs_booking>-person_id ).
  ENDMETHOD.


  METHOD get_obj_book_via_id.
    ASSIGN book_list[ book_id = im_id ] TO FIELD-SYMBOL(<fs_book>).
    IF <fs_book> IS NOT ASSIGNED.
      ro_book = NEW zcl_book( im_id = '0' ).
      EXIT.
    ENDIF.

    ro_book = NEW zcl_book(
      im_id        = <fs_book>-book_id
      im_author_id = <fs_book>-author_id
      im_book_name = <fs_book>-book_name
      im_copy_qty  = <fs_book>-copy_qty
      im_pages_num = <fs_book>-pages_num ).
  ENDMETHOD.


  METHOD get_obj_reader_via_id.
    ASSIGN reader_list[ person_id = im_id ] TO FIELD-SYMBOL(<fs_reader>).
    IF <fs_reader> IS NOT ASSIGNED.
      ro_reader = NEW zcl_reader( im_id = '0' ).
      EXIT.
    ENDIF.

    ro_reader = NEW zcl_reader(
      im_id           = <fs_reader>-person_id
      im_first_name   = <fs_reader>-person_first_name
      im_last_name    = <fs_reader>-person_last_name
      im_birth_date   = <fs_reader>-birth_date
      im_phone_number = <fs_reader>-phone_number ).
  ENDMETHOD.


  METHOD lock_entity.
    IF iv_reader = 'X'.
      CALL FUNCTION 'ENQUEUE_EZ_READER'
        EXPORTING
          mode_zabc_d_reader   = 'E'
          mode_zabc_d_reader_t = 'E'
          mandt                = sy-mandt
          person_id            = im_id
          langu                = sy-langu
          x_person_id          = ' '
          x_langu              = ' '
          _scope               = '2'
          _wait                = ' '
          _collect             = ' '
        EXCEPTIONS
          foreign_lock         = 1
          system_failure       = 2
          OTHERS               = 3.
    ENDIF.

    IF iv_author = 'X'.
      CALL FUNCTION 'ENQUEUE_EZ_AUTHOR'
        EXPORTING
          mode_zabc_d_author   = 'E'
          mode_zabc_d_author_t = 'E'
          mandt                = sy-mandt
          author_id            = im_id
          langu                = sy-langu
          x_author_id          = ' '
          x_langu              = ' '
          _scope               = '2'
          _wait                = ' '
          _collect             = ' '
        EXCEPTIONS
          foreign_lock         = 1
          system_failure       = 2
          OTHERS               = 3.
    ENDIF.

    IF iv_book = 'X'.
      CALL FUNCTION 'ENQUEUE_EZ_BOOK'
        EXPORTING
          mode_zabc_d_book = 'E'
          mandt            = sy-mandt
          book_id          = im_id
          x_book_id        = ' '
          _scope           = '2'
          _wait            = ' '
          _collect         = ' '
        EXCEPTIONS
          foreign_lock     = 1
          system_failure   = 2
          OTHERS           = 3.
    ENDIF.

    IF iv_booking = 'X'.
      CALL FUNCTION 'ENQUEUE_EZ_BOOKING'
        EXPORTING
          mode_zabc_d_booking = 'E'
          mandt               = sy-mandt
          booking_id          = im_id
          x_booking_id        = ' '
          _scope              = '2'
          _wait               = ' '
          _collect            = ' '
        EXCEPTIONS
          foreign_lock        = 1
          system_failure      = 2
          OTHERS              = 3.
    ENDIF.

    IF sy-subrc = 0.
      ex_success = 'X'.
    ELSE.
      RAISE EXCEPTION TYPE zcx_library EXPORTING textid = zcx_library=>entity_locked.
    ENDIF.
  ENDMETHOD.


  METHOD unlock_entity.
    IF iv_reader = 'X'.
      CALL FUNCTION 'DEQUEUE_EZ_READER'
        EXPORTING
          mode_zabc_d_reader   = 'E'
          mode_zabc_d_reader_t = 'E'
          mandt                = sy-mandt
          person_id            = im_id
          langu                = sy-langu
          x_person_id          = ' '
          x_langu              = ' '
          _scope               = '3'
          _synchron            = ' '
          _collect             = ' '.
    ENDIF.

    IF iv_author = 'X'.
      CALL FUNCTION 'DEQUEUE_EZ_AUTHOR'
        EXPORTING
          mode_zabc_d_author   = 'E'
          mode_zabc_d_author_t = 'E'
          mandt                = sy-mandt
          author_id            = im_id
          langu                = sy-langu
          x_author_id          = ' '
          x_langu              = ' '
          _scope               = '3'
          _synchron            = ' '
          _collect             = ' '.
    ENDIF.

    IF iv_book = 'X'.
      CALL FUNCTION 'DEQUEUE_EZ_BOOK'
        EXPORTING
          mode_zabc_d_book = 'E'
          mandt            = sy-mandt
          book_id          = im_id
          x_book_id        = ' '
          _scope           = '3'
          _synchron        = ' '
          _collect         = ' '.
    ENDIF.

    IF iv_booking = 'X'.
      CALL FUNCTION 'DEQUEUE_EZ_BOOKING'
        EXPORTING
          mode_zabc_d_booking = 'E'
          mandt               = sy-mandt
          booking_id          = im_id
          x_booking_id        = ' '
          _scope              = '3'
          _synchron           = ' '
          _collect            = ' '.
    ENDIF.

    IF sy-subrc = 0.
      ex_success = 'X'.
    ENDIF.
  ENDMETHOD.


  METHOD update_database.
    DATA:
      ls_author   TYPE zabc_d_author,
      ls_author_t TYPE zabc_d_author_t,
      ls_book     TYPE zabc_d_book,
      ls_reader   TYPE zabc_d_reader,
      ls_reader_t TYPE zabc_d_reader_t,
      ls_booking  TYPE zabc_d_booking.

    ex_success = 'X'.
    TRY.
        IF iv_author = 'X'.
          ls_author = CORRESPONDING #( BASE ( ls_author ) is_entity ).
          ls_author_t = CORRESPONDING #( BASE ( ls_author_t ) is_entity ).

          IF iv_insert = 'X'.
            IF lock_entity( iv_author = 'X'  im_id = ls_author-author_id ) = 'X'.
              INSERT zabc_d_author FROM ls_author.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              INSERT zabc_d_author_t FROM ls_author_t.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_update = 'X'.
            IF lock_entity( iv_author = 'X'  im_id = ls_author-author_id ) = 'X'.
              UPDATE zabc_d_author FROM ls_author.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              UPDATE zabc_d_author_t FROM ls_author_t.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_delete = 'X'.
            IF lock_entity( iv_author = 'X'  im_id = ls_author-author_id ) = 'X'.
              DELETE  FROM zabc_d_author WHERE author_id =  ls_author-author_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              DELETE  FROM zabc_d_author_t WHERE author_id =  ls_author-author_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF iv_reader = 'X'.
          ls_reader = CORRESPONDING #( BASE ( ls_reader ) is_entity ).
          ls_reader_t = CORRESPONDING #( BASE ( ls_reader_t ) is_entity ).

          IF iv_insert = 'X'.
            IF lock_entity( iv_reader = 'X'  im_id = ls_reader-person_id ) = 'X'.
              INSERT zabc_d_reader FROM ls_reader.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              INSERT zabc_d_reader_t FROM ls_reader_t.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_update = 'X'.
            IF lock_entity( iv_reader = 'X'  im_id = ls_reader-person_id ) = 'X'.
              UPDATE zabc_d_reader FROM ls_reader.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              UPDATE zabc_d_reader_t FROM ls_reader_t.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_delete = 'X'.
            IF lock_entity( iv_reader = 'X'  im_id = ls_reader-person_id ) = 'X'.
              DELETE  FROM zabc_d_reader WHERE person_id =  ls_reader-person_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.

              DELETE  FROM zabc_d_reader_t WHERE person_id =  ls_reader-person_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF iv_book = 'X'.
          ls_book = CORRESPONDING #( BASE ( ls_book ) is_entity ).

          IF iv_insert = 'X'.
            IF lock_entity( iv_book = 'X'  im_id = ls_book-book_id ) = 'X'.
              INSERT zabc_d_book FROM ls_book.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_update = 'X'.
            IF lock_entity( iv_book = 'X'  im_id = ls_book-book_id ) = 'X'.
              UPDATE zabc_d_book FROM ls_book.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_delete = 'X'.
            IF lock_entity( iv_book = 'X'  im_id = ls_book-book_id ) = 'X'.
              DELETE  FROM zabc_d_book WHERE book_id =  ls_book-book_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

        IF iv_booking = 'X'.
          ls_booking = CORRESPONDING #( BASE ( ls_booking ) is_entity ).

          IF iv_insert = 'X'.
            IF lock_entity( iv_booking = 'X'  im_id = ls_booking-booking_id ) = 'X'.
              INSERT zabc_d_booking FROM ls_booking.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_update = 'X'.
            IF lock_entity( iv_booking = 'X'  im_id = ls_booking-booking_id ) = 'X'.
              UPDATE zabc_d_booking FROM ls_booking.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.

          IF iv_delete = 'X'.
            IF lock_entity( iv_booking = 'X'  im_id = ls_booking-booking_id ) = 'X'.
              DELETE  FROM zabc_d_booking WHERE booking_id =  ls_booking-booking_id.
              IF sy-subrc <> 0.
                CLEAR ex_success.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.

      CATCH zcx_library INTO DATA(r_exception).
        MESSAGE r_exception->get_text( ) TYPE 'I'.
    ENDTRY.
    COMMIT WORK.
  ENDMETHOD.


  METHOD check_id_exist.
    DATA:
      lv_tablename TYPE tabname,
      lv_exist     TYPE abap_bool.

    FIELD-SYMBOLS:
                   <fs_table> TYPE any.

    IF ir_object IS INSTANCE OF zcl_booking.
      ASSIGN booking_list[ booking_id = im_id ] TO <fs_table>.
      IF <fs_table> IS ASSIGNED.
        lv_exist = 'X'.
      ENDIF.
    ENDIF.

    IF ir_object IS INSTANCE OF zcl_author.
      ASSIGN author_list[ author_id = im_id ] TO  <fs_table>.
      IF <fs_table> IS ASSIGNED.
        lv_exist = 'X'.
      ENDIF.
    ENDIF.

    IF ir_object IS INSTANCE OF zcl_book.
      ASSIGN book_list[ book_id = im_id ] TO  <fs_table>.
      IF <fs_table> IS ASSIGNED.
        lv_exist = 'X'.
      ELSEIF im_expected_true = 'X'.
        RAISE EXCEPTION TYPE zcx_library EXPORTING textid = zcx_library=>book_not_found.
      ENDIF.
    ENDIF.

    IF ir_object IS INSTANCE OF zcl_reader.
      ASSIGN reader_list[ person_id = im_id ] TO  <fs_table>.
      IF <fs_table> IS ASSIGNED.
        lv_exist = 'X'.
      ELSEIF im_expected_true = 'X'.
        RAISE EXCEPTION TYPE zcx_library EXPORTING textid = zcx_library=>person_not_found.
      ENDIF.
    ENDIF.

    IF lv_exist = 'X' AND im_expected_true IS INITIAL.
      RAISE EXCEPTION TYPE zcx_library EXPORTING textid = zcx_library=>entity_exist.
    ENDIF.
  ENDMETHOD.


  METHOD get_instance.
    IF mo_instance IS NOT BOUND.
      CREATE OBJECT mo_instance.
    ENDIF.

    ro_library = mo_instance.
  ENDMETHOD.
ENDCLASS.