class CL_HRPA_INFOTYPE_0290_99RU definition
  public
  inheriting from CL_HRPA_INFOTYPE_NNNN
  create public .

*"* public components of class CL_HRPA_INFOTYPE_0290_99RU
*"* do not include other source files here!!!
public section.

  methods CHECK_FIO
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
protected section.
*"* protected components of class CL_HRPA_INFOTYPE_0290_99RU
*"* do not include other source files here!!!

  methods SPECIFIC_COMPUTATIONS
    importing
      !TCLAS type TCLAS
      !IOPER type IOPER default 'INS'
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D
    changing
      !P0290 type P0290
      !PNNNN2 type ANY .
  methods CHECK_LEGAL_01
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_02
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_03
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_21
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_28
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_INN
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_LEGAL_PFR
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_ALF
    importing
      !STRING type STRING
      !TYPE type CHAR1
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_MILITARY
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_BIRTHPLACE
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_ISSUE_DATE
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_SPECIAL_GBDAT
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_DRCAT
    importing
      !I_TCLAS type TCLAS
      !I_P0290 type P0290
      !I_MOLGA type MOLGA
      !I_MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
      !I_FIELDNAME type SCRRPRFD default 'DRCAT'
      !I_IOPER type IOPER
    changing
      !CF_OK type BOOLE_D .
  methods P0290_TAB
    importing
      !TCLAS type TCLAS
      !PERNR type PERNR_D
      !SUBTY type SUBTY default '*'
      !BEGDA type BEGDATUM default LOW_DATE
      !ENDDA type ENDDATUM default HIGH_DATE
      !OBJPS type OBJPS default SPACE
    exporting
      !P0290_TAB type P0290_TAB .
  methods GENERIC_LOG_MESSAGE
    importing
      !I_MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
      !IS_MSG type SYMSG
      !IT_FIELD_LIST type HRPAD_FIELD_TAB
    changing
      !CF_OK type BOOLE_D .
  methods SET_OK_WITH_SEVERITY
    importing
      !IV_SEVERITY_IN type SYMSGTY
    returning
      value(RESULT) type BOOLE_D .
  methods P0290
    importing
      !TCLAS type TCLAS
      !PERNR type PERNR_D
      !SUBTY type SUBTY default '*'
      !BEGDA type BEGDATUM
      !ENDDA type ENDDATUM default HIGH_DATE
    returning
      value(P0290) type P0290 .
  methods EXPIRY_CALC_10
    importing
      value(P0290) type P0290 .
  methods EXPIRY_CALC_5
    importing
      value(P0290) type P0290 .
  methods P0002
    importing
      !TCLAS type TCLAS
      !PERNR type PERNR_D
      !BEGDA type BEGDATUM
      !ENDDA type ENDDATUM default HIGH_DATE
    returning
      value(P0002) type P0002 .
  methods P0006
    importing
      !TCLAS type TCLAS
      !PERNR type PERNR_D
      !BEGDA type BEGDATUM
      !ENDDA type ENDDATUM default HIGH_DATE
    returning
      value(P0006) type P0006 .
  methods CHECK_AWARDS
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
    exporting
      !IS_OK type BOOLE_D .
  methods CHECK_FIELD_LENGTH
    importing
      !P0290 type P0290
      !MOLGA type MOLGA
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
      !IV_SCREEN type STRING
    exporting
      !IS_OK type BOOLE_D .
  methods ADD_MSG_LENGTH
    importing
      !IV_FIELD type STRING
      !IV_VALUE type ANY
      !MESSAGE_HANDLER type ref to IF_HRPA_MESSAGE_HANDLER
      !IV_SYMBOLS type INT4
      !IV_DATA_ELEMENT type ROLLNAME optional
    changing
      !CF_OK type BOOLE_D .

  methods SPECIFIC_INITIAL_COMPUTATIONS
    redefinition .
  methods SPECIFIC_INSERT_COMPUTATIONS
    redefinition .
  methods SPECIFIC_MODIFY_COMPUTATIONS
    redefinition .
private section.
*"* private components of class CL_HRPA_INFOTYPE_0290_99RU
*"* do not include other source files here!!!

  data G_ALF_ENG type STRING value 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'. "#EC NOTEXT .
  data G_ALF_ILG type STRING value '~`@#$%^&*()_+\|/;:.>,<?[]{}'''. "#EC NOTEXT .
  data G_ALF_RIM type STRING value 'IVXLCMivxlcm'. "#EC NOTEXT .
  data G_ALF_NUM type STRING value '0123456789'. "#EC NOTEXT .
ENDCLASS.



CLASS CL_HRPA_INFOTYPE_0290_99RU IMPLEMENTATION.


method add_msg_length.
  data: lv_dummy type c.
  data: ls_msg type symsg.
  data: lt_field_list type hrpad_field_tab.
  data: ls_dd04v_wa type dd04v.
  data: iv_ftext type string.

  if iv_data_element is not initial.
    call function 'DDIF_DTEL_GET'
      exporting
        name          = iv_data_element
        langu         = sy-langu
      importing
        dd04v_wa      = ls_dd04v_wa
      exceptions
        illegal_input = 1
        others        = 2.
    if sy-subrc = 0.
      iv_ftext = ls_dd04v_wa-scrtext_l.
    endif.
  endif.

  if iv_ftext is initial.
    iv_ftext = iv_field.
  endif.

  message e030(hrpadruinfotypes) with iv_symbols iv_ftext into lv_dummy.
  move-corresponding sy to ls_msg.
  append iv_field to lt_field_list.

  generic_log_message( exporting is_msg             = ls_msg
                                 it_field_list      = lt_field_list[]
                                 i_message_handler  = message_handler
                        changing cf_ok              = cf_ok ).
endmethod.


METHOD CHECK_ALF.
  DATA l_alf(66).
  DATA l_n TYPE i.
  DATA l_i TYPE i.
  DATA l_c TYPE c.
  DATA l_string TYPE string.

  is_ok = true.
  CASE type.
* Cyrilic 'ABC'
    WHEN 'R'.
      l_alf = text-001.
* Latin 'ABC'
    WHEN 'E'.
      l_alf = g_alf_eng.
* Roman 'ABC'
    WHEN 'L'.
      l_alf = g_alf_rim.
* Numeric '0-9'
    WHEN 'N'.
      l_alf = g_alf_num.
* Illegal symbols
    WHEN 'I'.
      l_alf = g_alf_ilg.
  ENDCASE.
  l_string = string.
  CONDENSE l_string.
  IF l_string IS INITIAL.
    EXIT.
  ENDIF.
  l_i = 0.
  l_n = STRLEN( l_string ).
  DO l_n TIMES.
    l_c = l_string+l_i(1).
    IF NOT ( l_alf CS l_c ).
      is_ok = false.
      EXIT.
    ENDIF.
    l_i = l_i + 1.
  ENDDO.

ENDMETHOD.


method CHECK_AWARDS.
  constants: lc_sa_doc_domain type domname value 'P33_AWDOC'.
  data: lv_dummy type c.
  data: lv_msg type symsg.
  data: lt_field_list type hrpad_field_tab.
  data: lv_sa_doc_value type domvalue_l,
        lv_sa_doc_name  type ddtext.
  data: ls_t7ruawardsg type t7ruawardsg,
        ls_t7ruawards  type t7ruawards.
**********************************************************************
  is_ok = true.

  lv_sa_doc_value = p0290-spcpf.
* award document
  call function 'DOMAIN_VALUE_GET'
    exporting
      i_domname  = lc_sa_doc_domain
      i_domvalue = lv_sa_doc_value
    importing
      e_ddtext   = lv_sa_doc_name
    exceptions
      not_exist  = 1
      others     = 2.
  if sy-subrc <> 0.
    message w024(hrpadruinfotypes) with p0290-spcpf into lv_dummy.
    move-corresponding sy to lv_msg.
    clear lt_field_list.
    append 'P0290-SPCPF' to lt_field_list.
    call method message_handler->add_message
      exporting
        message    = lv_msg
        field_list = lt_field_list
        cause      = message_handler->infotype_specific.
  endif.
* award group
  call method cl_hr_t7ruawardsg=>read
    exporting
      molga       = molga
      awadg       = p0290-awadg
    receiving
      t7ruawardsg = ls_t7ruawardsg.
  if ls_t7ruawardsg-awadg is initial.
    message w025(hrpadruinfotypes) with p0290-awadg into lv_dummy.
    move-corresponding sy to lv_msg.
    clear lt_field_list.
    append 'P0290-AWADG' to lt_field_list.
    call method message_handler->add_message
      exporting
        message    = lv_msg
        field_list = lt_field_list
        cause      = message_handler->infotype_specific.
  endif.
* state awards
  call method cl_hr_t7ruawards=>read
    exporting
      molga      = molga
      awadg      = p0290-awadg
      awadt      = p0290-awadt
      endda      = p0290-endda
    receiving
      t7ruawards = ls_t7ruawards.
  if ls_t7ruawards-awadt is initial.
    message w026(hrpadruinfotypes) with p0290-awadg into lv_dummy.
    move-corresponding sy to lv_msg.
    clear lt_field_list.
    append 'P0290-AWADT' to lt_field_list.
    call method message_handler->add_message
      exporting
        message    = lv_msg
        field_list = lt_field_list
        cause      = message_handler->infotype_specific.
  endif.

endmethod.


METHOD CHECK_BIRTHPLACE.
  DATA l_if_ex_hrpadru_0290 TYPE REF TO if_ex_hrpadru_0290.
  DATA l_return TYPE i.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_field_list TYPE hrpad_field_tab.

  is_ok = true.

** BADI
  CALL METHOD cl_exithandler=>get_instance
    EXPORTING
      exit_name = 'HRPADRU_0290'
      null_instance_accepted = 'X'
    CHANGING
      instance = l_if_ex_hrpadru_0290
    EXCEPTIONS
      OTHERS   = 0.
  IF NOT l_if_ex_hrpadru_0290 IS INITIAL.
    CALL METHOD l_if_ex_hrpadru_0290->check_birthplace
      EXPORTING
        p_strana = p0290-mstrana
        p_region = p0290-mregion
        p_raion  = p0290-mraion
        p_place  = p0290-mplace
      IMPORTING
        p_return = l_return.
  ENDIF.
  IF l_return EQ 0.
** 4 values
    IF  ( NOT p0290-mstrana IS INITIAL ) AND ( NOT p0290-mregion IS INITIAL ) AND
        ( NOT p0290-mraion IS INITIAL ) AND ( NOT p0290-mplace IS INITIAL ).
      MESSAGE e021(hrpadruinfotypes) INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      APPEND 'P0290-MSTRANA' TO l_field_list.
      APPEND 'P0290-MREGION' TO l_field_list.
      APPEND 'P0290-MRAION' TO l_field_list.
      APPEND 'P0290-MPLACE' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
      is_ok = false.
      EXIT.
    ENDIF.
  ENDIF.

ENDMETHOD.


  METHOD CHECK_DRCAT.
    DATA: lt_drcat TYPE t7ru0290drcat_tab.
    DATA: ls_drcat TYPE t7ru0290drcat.
    DATA: ls_drcat_by_p0290 TYPE t7ru0290drcat.
    DATA: lt_field_list TYPE hrpad_field_tab.
    DATA: ls_msg        TYPE symsg.
    DATA: lt_p0290      TYPE p0290_tab.
    DATA: lv_dummy      TYPE char1.

    FIELD-SYMBOLS: <l_wa_p0290> TYPE p0290.

   lt_drcat = cl_hr_t7ru0290drcat=>read_tab_at_date( molga    = i_molga
                                                     datum    = i_p0290-endda ).

*Check if Driving categories are not defined for country grouping &
    IF lt_drcat[] IS INITIAL.

      IF i_fieldname IS SUPPLIED.
        INSERT: i_fieldname INTO TABLE lt_field_list[].
      ENDIF.

      MESSAGE e027(hrpadruinfotypes) WITH i_molga INTO lv_dummy.
      MOVE-CORRESPONDING sy TO ls_msg.
      generic_log_message( EXPORTING is_msg             = ls_msg
                                     it_field_list      = lt_field_list[]
                                     i_message_handler  = i_message_handler
                            CHANGING cf_ok              = cf_ok ).
      RETURN.
    ENDIF.

*Check if Driving category & is not supported for country grouping &
    ls_drcat = cl_hr_t7ru0290drcat=>read_at_date( molga    = i_molga
                                                  subdrcat = i_p0290-drcat
                                                  datum    = i_p0290-endda ).
    IF ls_drcat IS INITIAL.
      IF i_fieldname IS SUPPLIED.
        INSERT: i_fieldname INTO TABLE lt_field_list[].
      ENDIF.
      MESSAGE e029(hrpadruinfotypes) WITH i_p0290-drcat i_molga INTO lv_dummy.
      MOVE-CORRESPONDING sy TO ls_msg.
      generic_log_message( EXPORTING is_msg             = ls_msg
                                     it_field_list      = lt_field_list[]
                                     i_message_handler  = i_message_handler
                            CHANGING cf_ok              = cf_ok ).
      RETURN.
    ENDIF.

*Check if Driving category & is already used for the driving license
    p0290_tab( EXPORTING  tclas = i_tclas
                          pernr = i_p0290-pernr
                          subty = i_p0290-subty
                          begda = i_p0290-begda
                          endda = i_p0290-endda
           IMPORTING  p0290_tab = lt_p0290 ).

    IF i_ioper EQ 'MOD'. " deleting current record by primary key
      DELETE lt_p0290 WHERE subty = i_p0290-subty
                      AND   endda = i_p0290-endda
                      AND   begda = i_p0290-begda
                      AND   seqnr = i_p0290-seqnr.
    ENDIF.

    LOOP AT lt_p0290[] ASSIGNING <l_wa_p0290> WHERE seria = i_p0290-seria
                                                AND seri0 = i_p0290-seri0
                                                AND nomer = i_p0290-nomer.

      ls_drcat_by_p0290 = cl_hr_t7ru0290drcat=>read_at_date( molga    = i_molga
                                                             subdrcat = <l_wa_p0290>-drcat
                                                             datum    = <l_wa_p0290>-endda ).
      DELETE lt_drcat WHERE drcat = ls_drcat_by_p0290-drcat.
    ENDLOOP.

    READ TABLE lt_drcat WITH KEY subdrcat = i_p0290-drcat TRANSPORTING NO FIELDS.
    IF sy-subrc NE 0.
      IF i_fieldname IS SUPPLIED.
        INSERT: i_fieldname INTO TABLE lt_field_list[].
      ENDIF.
      MESSAGE e028(hrpadruinfotypes) WITH i_p0290-drcat INTO lv_dummy.
      MOVE-CORRESPONDING sy TO ls_msg.
      generic_log_message( EXPORTING is_msg             = ls_msg
                                     it_field_list      = lt_field_list[]
                                     i_message_handler  = i_message_handler
                            CHANGING cf_ok              = cf_ok ).
      RETURN.
    ENDIF.

  ENDMETHOD.


  method check_field_length.

    data: lv_dummy type c.
    data: lv_msg type symsg.
    data: lt_field_list type hrpad_field_tab.

    data: lv_length type i.
    data: lv_field type string.
    data: lv_data_element type rollname.
    data: lv_value type string.

    data: lo_remapper type ref to if_hrpa_message_handler.
    data: lo_remapper_local type ref to lcl_field_name_remapper.
**********************************************************************
    create object lo_remapper type lcl_field_name_remapper
      exporting
        i_message_handler = message_handler
        i_infty           = a_infty.

    if lo_remapper is not bound.
      lo_remapper = message_handler. " In this case default message handler will be used.
    else.
      lo_remapper_local ?= lo_remapper.
    endif.

* SERIA
    lv_length = strlen( p0290-seria ).
    lv_field = 'P0290-SERIA'.
    lv_data_element = 'P33_SERIE'.
    if lv_length <> 0.
      case iv_screen.
        when '07' or '27'         " 2004
          or '04' or '06' or '26' " 2005
          or '21'                 " 2006
          or '02' or '09' or '22' " 2012
          or '28' or '29'.        " 2028, 2029
          if lv_length > 2.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = p0290-seria
                                          message_handler = message_handler
                                          iv_symbols      = 2
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when '03'.
          if lv_length > 3.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = p0290-seria
                                          message_handler = message_handler
                                          iv_symbols      = 3
                                          iv_data_element = 'P33_SERIE'
                                changing  cf_ok = is_ok ).
          endif.
        when others.
      endcase.
    endif.
    check is_ok <> abap_false.
* NO
    if iv_screen = '801'.
      lv_length = strlen( p0290-text2 ).
      lv_field = 'P0290-TEXT2'.
      lv_value = p0290-text2.
    else.
      lv_length = strlen( p0290-nomer ).
      lv_field = 'P0290-NOMER'.
      lv_value = p0290-nomer.
    endif.

    lv_data_element = 'P33_NUMER'.

    if lv_length <> 0.
      case iv_screen.
        when '801'. " 2001
          if lv_length > 9.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = lv_value
                                          message_handler = message_handler
                                          iv_symbols      = 9
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when '03'          " 2003
          or '01'          " 2011
          or '28' or '29'. " 2028, 2029
          if lv_length > 6.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = lv_value
                                          message_handler = message_handler
                                          iv_symbols      = 6
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when '07' or '27'          " 2004
          or '04' or '06' or '26'  " 2005
          or '21'                  " 2006
          or '02' or '09' or '22'. " 2012
          if lv_length > 7.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = lv_value
                                          message_handler = message_handler
                                          iv_symbols      = 7
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when others.
      endcase.
    endif.
    check is_ok <> abap_false.
* Subunit
    lv_length = strlen( p0290-pcode ).
    lv_field = 'P0290-PCODE'.
    lv_data_element = 'P33_PCODE'.
    if lv_length <> 0.
      case iv_screen.
        when '21'. " 2006
          if lv_length > 7.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = p0290-pcode
                                          message_handler = message_handler
                                          iv_symbols      = 7
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when '803'. " 2007
          if lv_length > 4.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = p0290-pcode
                                          message_handler = message_handler
                                          iv_symbols      = 4
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when others.
      endcase.
    endif.
    check is_ok <> abap_false.
* Issued by
    lv_length = strlen( p0290-text3 ).
    lv_field = 'P0290-TEXT3'.
    lv_data_element = 'P33_ADDIN'.
    if lv_length <> 0.
      case iv_screen.
        when '801'. " 2001
          if lv_length > 4.
            me->add_msg_length( exporting iv_field = lv_field
                                          iv_value = p0290-text3
                                          message_handler = message_handler
                                          iv_symbols      = 4
                                          iv_data_element = lv_data_element
                                changing  cf_ok = is_ok ).
          endif.
        when others.
      endcase.
    endif.

  endmethod.


METHOD CHECK_FIO.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.

  is_ok = true.
** last name
  l_string = p0290-nachn.
  IF p0290-nachn CA g_alf_ilg.
    MESSAGE e017(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-NACHN' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    EXIT.
  ENDIF.
** name
  IF p0290-vorna CA g_alf_ilg.
    MESSAGE e018(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-VORNA' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    EXIT.
  ENDIF.
** middle name
  IF p0290-midnm CA g_alf_ilg.
    MESSAGE e019(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-MIDNM' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    EXIT.
  ENDIF.
** eng & rus mix are not allowed:
  CONCATENATE p0290-nachn p0290-vorna p0290-midnm INTO l_string SEPARATED BY space.
  IF ( l_string CA g_alf_eng ) AND ( l_string CA text-001 ).
    MESSAGE e020(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-MIDNM' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    EXIT.
  ENDIF.

ENDMETHOD.


METHOD CHECK_ISSUE_DATE.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_field_list TYPE hrpad_field_tab.

  is_ok = true.

  IF p0290-datbg NE p0290-begda.
    MESSAGE w023(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-DATBG' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    RETURN.
  ENDIF.

ENDMETHOD.


METHOD CHECK_LEGAL_01.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.
  DATA l_is_ok TYPE boole_d.

  is_ok = true.

  l_string = p0290-seria.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'L'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w001(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERIA' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-seri0.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'R'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w002(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERI0' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-nomer.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w003(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-NOMER' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

ENDMETHOD.


METHOD CHECK_LEGAL_02.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.
  DATA l_is_ok TYPE boole_d.

  is_ok = true.

  l_string = p0290-seria.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w004(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERIA' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-nomer.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w003(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-NOMER' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

ENDMETHOD.


METHOD CHECK_LEGAL_03.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.
  DATA l_is_ok TYPE boole_d.

  is_ok = true.

  l_string = p0290-seria.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'R'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w005(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERIA' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-nomer.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w003(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-NOMER' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

ENDMETHOD.


METHOD CHECK_LEGAL_21.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.
  DATA l_is_ok TYPE boole_d.

  is_ok = true.

  l_string = p0290-seria.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w004(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERIA' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-seri0.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w006(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-SERI0' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

  l_string = p0290-nomer.
  CALL METHOD me->check_alf
    EXPORTING
      string = l_string
      type   = 'N'
    IMPORTING
      is_ok  = l_is_ok.
  IF l_is_ok EQ false.
    MESSAGE w003(hrpadruinfotypes) INTO l_dummy.
    MOVE-CORRESPONDING sy TO l_msg.
    REFRESH l_field_list.
    APPEND 'P0290-NOMER' TO l_field_list.
    CALL METHOD message_handler->add_message
      EXPORTING
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  ENDIF.

ENDMETHOD.


method CHECK_LEGAL_28.
  data l_dummy type c.
  data l_msg type symsg.
  data l_string type string.
  data l_field_list type hrpad_field_tab.
  data l_is_ok type boole_d.

  is_ok = true.

  l_string = p0290-seria.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false.
    message w004(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-SERIA' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  endif.

  l_string = p0290-seri0.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'R'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false.
    message w002(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-SERI0' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  endif.

  l_string = p0290-nomer.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false.
    message w003(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-NOMER' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  endif.

endmethod.


method CHECK_LEGAL_INN.

  data l_dummy type c.
  data l_msg type symsg.
  data l_string type string.
  data l_field_list type hrpad_field_tab.
  data l_is_ok type boole_d.

  is_ok = true.

  l_string = p0290-nomer.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false.
    message w007(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-NOMER' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
*    is_ok = false.
*    RETURN.
  endif.

endmethod.


method CHECK_LEGAL_PFR.
  data: l_dummy type c.
  data: l_msg type symsg.
  data: l_string type string.
  data: l_field_list type hrpad_field_tab.
  data: begin of pfrstruc,
          n1(3)   type c,
          del1(1) type c,
          n2(3)   type c,
          del2(1) type c,
          n3(3)   type c,
          del3(1) type c,
          n4(200) type c,
        end of pfrstruc.
  data: l_is_ok type boole_d.

** numbers string
  constants: numstr(10)      value '0123456789'.
** control number
  data: cn type i.
** control sum
  data: cs type i.
** control float
  data: cf type x.
** digits
  data: d1 type i.
  data: d2 type i.
  data: d3 type i.
  data: d4 type i.
  data: d5 type i.
  data: d6 type i.
  data: d7 type i.
  data: d8 type i.
  data: d9 type i.
** positions
  data: i1 type i.
  data: i2 type i.
  data: i3 type i.
  data: i4 type i.
  data: i5 type i.
  data: i6 type i.
  data: i7 type i.
  data: i8 type i.
  data: i9 type i.
** symbol
  data: c type c.
  data: c2(2) type c.
** error flag
  data: er type i.

  is_ok = true.

  move p0290-nomer to pfrstruc.

  l_string = pfrstruc-n1.
  condense l_string no-gaps.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false or strlen( l_string ) ne 3.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD1' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  if not pfrstruc-del1 eq '-'.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD1' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  l_string = pfrstruc-n2.
  condense l_string no-gaps.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false or strlen( l_string ) ne 3.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD2' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  if not pfrstruc-del2 eq '-'.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD2' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  l_string = pfrstruc-n3.
  condense l_string no-gaps.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false or strlen( l_string ) ne 3.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD3' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  if not pfrstruc-del3 eq ' '.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD3' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

  l_string = pfrstruc-n4.
  condense l_string no-gaps.
  call method me->check_alf
    exporting
      string = l_string
      type   = 'N'
    importing
      is_ok  = l_is_ok.
  if l_is_ok eq false or strlen( l_string ) ne 2.
    message e009(hrpadruinfotypes) into l_dummy.
    move-corresponding sy to l_msg.
    refresh l_field_list.
    append 'P0290-ICCD4' to l_field_list.
    call method message_handler->add_message
      exporting
        message    = l_msg
        field_list = l_field_list
        cause      = message_handler->infotype_specific.
    is_ok = false.
    return.
  endif.

** check control key
** down error flag
  er = 0.
** get control number
  c2 = p0290-nomer+12(2).
  condense c2.
** if not empty and digit...
  if not ( c2 is initial ).
    c  = p0290-nomer+12(1).
    c2 = p0290-nomer+13(1).
    condense c.
    condense c2.
    if ( numstr cs c ) and ( numstr cs c2 ).
      c2 = p0290-nomer+12(2).
      condense c2.
** set control number
      cn = c2.
    else.
** up error flag!
      er = 1.
    endif.
  else.
** up error flag!
    er = 1.
  endif.

** get positions macro
  define checkmacro.
    c = p0290-nomer+&2(1).
    condense c.
** if not empty and digit...
    if ( not ( c is initial ) ) and ( numstr cs c ).
** set digit
      d&1 = c.
** set position
      i&1 = 10 - &1.
    else.
** up error flag!
      er = 1.
    endif.
  end-of-definition.

** get positions
  checkmacro 1 0.
  checkmacro 2 1.
  checkmacro 3 2.
  checkmacro 4 4.
  checkmacro 5 5.
  checkmacro 6 6.
  checkmacro 7 8.
  checkmacro 8 9.
  checkmacro 9 10.

** comare control sum with control number
  cs = i1 * d1 + i2 * d2 + i3 * d3 +
       i4 * d4 + i5 * d5 + i6 * d6 +
       i7 * d7 + i8 * d8 + i9 * d9.
  case cs.
    when 99.
      cs = 99.
    when 100.
      cs = 0.
    when 101.
      cs = 0.
    when 102.
      cs = 1.
    when others.
      cs = cs mod 101.
      cs = cs mod 100.
  endcase.
  if cs ne cn.
    er = 1.
  endif.

** if error then message
  check er eq 1.
  message w010(hrpadruinfotypes) into l_dummy.
  move-corresponding sy to l_msg.
  refresh l_field_list.
  append 'P0290-ICCD1' to l_field_list.
  append 'P0290-ICCD2' to l_field_list.
  append 'P0290-ICCD3' to l_field_list.
  append 'P0290-ICCD4' to l_field_list.
  call method message_handler->add_message
    exporting
      message    = l_msg
      field_list = l_field_list
      cause      = message_handler->infotype_specific.

endmethod.


METHOD CHECK_MILITARY.
  DATA t7rum0 TYPE t7rum0.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_string TYPE string.
  DATA l_field_list TYPE hrpad_field_tab.

  is_ok = true.

  IF p0290-wdpfl <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '01' AND cdpfl EQ p0290-wdpfl.
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '01'  p0290-wdpfl INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '01'.
      l_msg-MSGV2 = p0290-wdpfl.
      APPEND 'P0290-WDPFL' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdbhd <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '02' AND cdpfl EQ p0290-cdbhd .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '02' p0290-cdbhd INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '02'.
      l_msg-MSGV2 = p0290-cdbhd.
      APPEND 'P0290-CDBHD' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdgrp <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '03' AND cdpfl EQ p0290-cdgrp .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '03' p0290-cdgrp INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '03'.
      l_msg-MSGV2 = p0290-cdgrp.
      APPEND 'P0290-CDGRP' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdkat <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '04' AND cdpfl EQ p0290-cdkat .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '04' p0290-cdkat INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '04'.
      l_msg-MSGV2 = p0290-cdkat.
      APPEND 'P0290-CDKAT' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdstv <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '05' AND cdpfl EQ p0290-cdstv .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '05' p0290-cdstv INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '05'.
      l_msg-MSGV2 = p0290-cdstv.
      APPEND 'P0290-CDSTV' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdstf <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '06' AND cdpfl EQ p0290-cdstf .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '06' p0290-cdstf INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '05'.
      l_msg-MSGV2 = p0290-cdstf.
      APPEND 'P0290-CDSTF' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdusp <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '07' AND cdpfl EQ p0290-cdusp .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '07' p0290-cdusp INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '07'.
      l_msg-MSGV2 = p0290-cdusp.
      APPEND 'P0290-CDUSP' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdspu <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '08' AND cdpfl EQ p0290-cdspu .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '08' p0290-cdspu INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '08'.
      l_msg-MSGV2 = p0290-cdspu.
      APPEND 'P0290-CDSPU' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdpfl <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '09' AND cdpfl EQ p0290-cdpfl .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '09' p0290-cdpfl INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-MSGV1 = '09'.
      l_msg-MSGV2 = p0290-cdpfl.
      APPEND 'P0290-CDPFL' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.
  IF p0290-cdspo <> space.
    SELECT * FROM t7rum0 INTO t7rum0 WHERE partn EQ '10' AND cdpfl EQ p0290-cdspo .
    ENDSELECT .
    IF sy-subrc NE 0.
      MESSAGE w007(hrpadruit) WITH '10' p0290-cdspo INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      l_msg-msgv1 = '10'.
      l_msg-msgv2 = p0290-cdspo.
      APPEND 'P0290-CDSPO' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD CHECK_SPECIAL_GBDAT.
  DATA l_dummy TYPE c.
  DATA l_msg TYPE symsg.
  DATA l_field_list TYPE hrpad_field_tab.
  DATA l_date LIKE sy-datum.

  is_ok = true.

  CHECK p0290-sbpdt EQ 'X'.
** check for speciality
  IF p0290-sbpdy GT 1800.
    l_date+0(4) = p0290-sbpdy.
    l_date+4(2) = p0290-sbpdm.
    l_date+6(2) = p0290-sbpdd.
    CALL FUNCTION 'DATE_CHECK_PLAUSIBILITY'
      EXPORTING
        date                      = l_date
      EXCEPTIONS
        plausibility_check_failed = 1
        OTHERS                    = 2.
    IF sy-subrc EQ 0.
      MESSAGE e022(hrpadruinfotypes) INTO l_dummy.
      MOVE-CORRESPONDING sy TO l_msg.
      REFRESH l_field_list.
      APPEND 'P0290-SBPDY' TO l_field_list.
      APPEND 'P0290-SBPDM' TO l_field_list.
      APPEND 'P0290-SBPDD' TO l_field_list.
      CALL METHOD message_handler->add_message
        EXPORTING
          message    = l_msg
          field_list = l_field_list
          cause      = message_handler->infotype_specific.
      is_ok = false.
      EXIT.
    ENDIF.
  ENDIF.

ENDMETHOD.


  method EXPIRY_CALC_10.
    check not p0290-datbg is initial.
    check p0290-daten is initial.
    p0290-daten = p0290-datbg.
    p0290-daten(4) = p0290-datbg(4) + 10.
  endmethod.


  method EXPIRY_CALC_5.
    check not p0290-datbg is initial.
    check p0290-daten is initial.
    p0290-daten = p0290-datbg.
    p0290-daten(4) = p0290-datbg(4) + 5.
  endmethod.


  METHOD GENERIC_LOG_MESSAGE.
    DATA: lv_final_severity  TYPE symsg-msgty.
    DATA: lo_message_handler TYPE REF TO lcl_field_name_remapper.
    TRY.
        lo_message_handler ?= i_message_handler.
        IF lo_message_handler IS BOUND.
          lv_final_severity = lo_message_handler->add_cust_message( message     = is_msg
                                                                    field_list  = it_field_list[]
                                                                    cause       = if_hrpa_message_handler=>infotype_specific ).
        ENDIF.

      CATCH cx_sy_move_cast_error .
        lv_final_severity = is_msg-msgty.
        i_message_handler->add_message( message     = is_msg
                                        field_list  = it_field_list[]
                                        cause       = if_hrpa_message_handler=>infotype_specific ).
    ENDTRY.

    IF cf_ok NE abap_false.
      cf_ok = set_ok_with_severity( lv_final_severity ).
    ENDIF.
  ENDMETHOD.


method P0002.

  data: lv_data_exists type boole_d.
  data: ls_p0002 type p0002.

  call method a_read_infotype->read_single
    exporting
      tclas         = tclas
      pernr         = pernr
      infty         = '0002'
      subty         = space
      objps         = space
      sprps         = if_hrpa_read_infotype=>unlocked
      begda         = begda
      endda         = endda
      mode          = if_hrpa_read_infotype=>last_intersecting_record
      no_auth_check = true
    importing
      pnnnn         = ls_p0002
      data_exists   = lv_data_exists.

  if lv_data_exists eq true.
    p0002 = ls_p0002.
  endif.

endmethod.


method P0006.

  data: lv_data_exists type boole_d.
  data: ls_p0006 type p0006.
  data: lc_bp_subtype type subty_591a.
  data: ls_t7rurptcst00 type t7rurptcst00.

* birthplace subtype
  call method cl_hr_t7rurptcst00=>read
    exporting
      progr        = 'MP000600'
      param        = 'BP_SUBTY'
    receiving
      t7rurptcst00 = ls_t7rurptcst00.
  lc_bp_subtype = ls_t7rurptcst00-contn.

  call method a_read_infotype->read_single
    exporting
      tclas         = tclas
      pernr         = pernr
      infty         = '0006'
      subty         = lc_bp_subtype
      objps         = space
      sprps         = if_hrpa_read_infotype=>unlocked
      begda         = begda
      endda         = endda
      mode          = if_hrpa_read_infotype=>last_intersecting_record
      no_auth_check = true
    importing
      pnnnn         = ls_p0006
      data_exists   = lv_data_exists.

  if lv_data_exists eq true.
    p0006 = ls_p0006.
  endif.

endmethod.


METHOD P0290.
  DATA: lv_data_exists         TYPE boole_d.
  DATA: ls_p0290               TYPE p0290.

  call method a_read_infotype->read_single
        exporting
          tclas         = tclas
          pernr         = pernr
          infty         = '0290'
          subty         = subty
          objps         = space
          sprps         = if_hrpa_read_infotype=>unlocked
          begda         = begda
          endda         = endda
          mode          = if_hrpa_read_infotype=>last_intersecting_record
          no_auth_check = true
        importing
          pnnnn         = ls_p0290
          data_exists   = lv_data_exists.

    IF lv_data_exists EQ true.
       p0290 = ls_p0290.
    ENDIF.

ENDMETHOD.


  METHOD P0290_TAB.

    DATA: lt_container_tab       TYPE hrpad_prelp_tab.
    DATA: lv_data_exists         TYPE boole_d.
    DATA: lt_p0290               TYPE p0290_tab.

    a_read_infotype->read(
      EXPORTING
        tclas           = tclas
        pernr           = pernr
        infty           = a_infty
        subty           = subty
        objps           = objps
        sprps           = if_hrpa_read_infotype=>unlocked
        begda           = begda
        endda           = endda
        no_auth_check   = space
      IMPORTING
        infotype_tab   = lt_container_tab[]
        data_exists    = lv_data_exists ).

    IF lv_data_exists EQ true.
      cl_hr_pnnnn_type_cast=>prelp_to_pnnnn_tab(
        EXPORTING
          prelp_tab = lt_container_tab[]
        IMPORTING
          pnnnn_tab = lt_p0290 ).
        IF lt_p0290[] IS NOT INITIAL.
           p0290_tab = lt_p0290.
        ENDIF.
    ENDIF.

  ENDMETHOD.


METHOD SET_OK_WITH_SEVERITY.
  CASE: iv_severity_in.
    WHEN: 'A' OR 'E'.
      result = abap_false.
    WHEN: OTHERS.
      result = abap_true.
   ENDCASE.
ENDMETHOD.


method SPECIFIC_COMPUTATIONS.
  data: l_molga type molga.
  data: l_screen type string.
  data: pme04 type pme04.
  data: lv_dummy type c.
  data: lv_msg type symsg.
  data: lv_ioper type ioper.
  data: lt_field_list type hrpad_field_tab.
  data: lo_remapper type ref to if_hrpa_message_handler.
  data: lo_remapper_local type ref to lcl_field_name_remapper.
  data: l_is_ok type boole_d.

  is_ok = true.
  call method me->molga
    exporting
      tclas = a_tclas
      pernr = p0290-pernr
      begda = p0290-begda
    receiving
      molga = l_molga.
  if l_molga is initial.
    l_molga = '33'.
  endif.

* get variable key (subty)
  move-corresponding p0290 to pme04.
  pme04-molga = l_molga.
  call method cl_hrpa_feature=>get_value
    exporting
      feature       = 'P0290'
      struc_content = pme04
    importing
      return_value  = l_screen.
  condense l_screen.
  case l_screen.
    when '861'.
* check switch EHP5e
      if cl_hrpayru_switch_check=>hrlocru_sfws_ui_09( ) = abap_true.
* state awards
        call method me->check_awards
          exporting
            p0290           = p0290
            molga           = l_molga
            message_handler = message_handler
          importing
            is_ok           = is_ok.
      else.
        is_ok = false.
        message e666(hrpadru_common_reps) into lv_dummy.
        move-corresponding sy to lv_msg.
        refresh lt_field_list.
        call method message_handler->add_message
          exporting
            message    = lv_msg
            field_list = lt_field_list
            cause      = message_handler->infotype_specific.
      endif.
    when '801'.
      call method me->check_legal_inn
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
    when '802'.
** PIC iD
      call method me->check_legal_pfr
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
** issue date
      call method me->check_issue_date
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
** FIO
      call method me->check_fio
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
** special birth-date
      call method me->check_special_gbdat
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
** birthplace
      call method me->check_birthplace
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
    when '01' or '03'.
      call method me->check_legal_01
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
    when '02' or '09' or '22'.
      call method me->check_legal_02
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
      me->expiry_calc_5( p0290 ).
    when '04' or '07' or '26' or '27'.
      call method me->check_legal_03
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = l_is_ok.
      if l_is_ok = false.
        is_ok = false.
        return.
      endif.
      if is_ok eq true.
        call method me->check_military
          exporting
            p0290           = p0290
            molga           = l_molga
            message_handler = message_handler
          importing
            is_ok           = is_ok.
      endif.
    when '06'.
      call method me->check_legal_03
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
    when '21' or '803'.
      call method me->check_legal_21
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
    when '28'.
      call method me->check_legal_28
        exporting
          p0290           = p0290
          molga           = l_molga
          message_handler = message_handler
        importing
          is_ok           = is_ok.
      me->expiry_calc_10( p0290 ).
    when '29'.
      if ioper is supplied.
        lv_ioper = ioper.
      else.
        lv_ioper = 'INS'.
      endif.

      condense p0290-drcat.

      create object lo_remapper type lcl_field_name_remapper
        exporting
          i_message_handler = message_handler
          i_infty           = a_infty.
      if lo_remapper is not bound.
        lo_remapper = message_handler. " In this case default message handler will be used.
      else.
        lo_remapper_local ?= lo_remapper.
      endif.
      is_ok = abap_true.

      check_legal_21( exporting p0290           = p0290
                                molga           = l_molga
                                message_handler = lo_remapper
                      importing is_ok = is_ok ).

      if is_ok = false.
        return.
      endif.

      check_drcat( exporting i_tclas           = tclas
                             i_p0290           = p0290
                             i_molga           = l_molga
                             i_message_handler = lo_remapper
                             i_fieldname       = 'DRCAT'
                             i_ioper           = lv_ioper
                   changing  cf_ok = is_ok ).

      me->expiry_calc_10( p0290 ).
  endcase.

  if is_ok = abap_true.
    check_field_length( exporting p0290 = p0290
                                  iv_screen = l_screen
                                  message_handler = message_handler
                                  molga = l_molga
                        importing is_ok = is_ok ).
  endif.

endmethod.


 method SPECIFIC_INITIAL_COMPUTATIONS.

   data: ls_p0290 type p0290.
   data: p0290 type p0290.
   data: l_molga type molga.

   data: ls_p0002 type p0002,
         ls_p0006 type p0006.

* KLADR birthplace data
   data: l_adr type string.
   data: l_region_naming type string.

   data: lt_looks type table of pru_char255,
         ls_looks type          pru_char255.

   data: lt_addrs type table of pru_char255,
         ls_addrs type          pru_char255.

   data: l_screen type string.
   data: pme04 type pme04.
**********************************************************************

   move pnnnn to p0290.
   is_ok = true.

   call method me->molga
     exporting
       tclas = a_tclas
       pernr = p0290-pernr
       begda = p0290-begda
     receiving
       molga = l_molga.

* get variable key (subty)
   move-corresponding p0290 to pme04.
   pme04-molga = l_molga.
   call method cl_hrpa_feature=>get_value
     exporting
       feature       = 'P0290'
       struc_content = pme04
     importing
       return_value  = l_screen.
   condense l_screen.

   case l_screen.
     when '29'.
       ls_p0290 = p0290( tclas = tclas
                     pernr =  p0290-pernr
                     subty = p0290-subty
                     begda =  p0290-begda ).
       if ls_p0290 is not initial.
         p0290-seria = ls_p0290-seria.
         p0290-seri0 = ls_p0290-seri0.
         p0290-nomer = ls_p0290-nomer.
         p0290-passl = ls_p0290-passl.
         p0290-datbg = ls_p0290-datbg.
         p0290-daten = ls_p0290-daten.
         p0290-text1 = ls_p0290-text1.
         p0290-text2 = ls_p0290-text2.
         p0290-text3 = ls_p0290-text3.
       endif.

     when '802'.
* read personal data
       ls_p0002 = p0002( tclas = tclas
                         pernr = p0290-pernr
                         begda = p0290-begda
                         endda = p0290-endda ).
       if ls_p0002 is not initial.
         p0290-nachn = ls_p0002-nachn.
         p0290-vorna = ls_p0002-vorna.
         p0290-midnm = ls_p0002-midnm.
         p0290-gbdat = ls_p0002-gbdat.
         p0290-gesch = ls_p0002-gesch.
* obligatory uppercase
         translate p0290-nachn to upper case.            "#EC TRANSLANG
         translate p0290-vorna to upper case.            "#EC TRANSLANG
         translate p0290-midnm to upper case.            "#EC TRANSLANG
       endif.
* read adresses infotype
       ls_p0006 = p0006( tclas = tclas
                         pernr = p0290-pernr
                         begda = p0290-begda
                         endda = p0290-endda ).

       if ls_p0006 is not initial.
** read non-KLADR data
         p0290-spcpf     = ls_p0006-strds(1).
         p0290-mstrana   = ls_p0006-adr03.
         p0290-mregion   = ls_p0006-adr04.
         p0290-mraion    = ls_p0006-or2kk.
         p0290-mplace+00 = ls_p0006-num04.
         p0290-mplace+20 = ls_p0006-num05.
         concatenate p0290-mstrana p0290-mregion p0290-mraion p0290-mplace into l_adr.
         condense l_adr no-gaps.
** read KLADR data
         if l_adr is initial.
** prepare necessary data
           refresh lt_looks.
           refresh lt_addrs.
           ls_looks = '<C>'.
           append ls_looks to lt_looks.
           ls_looks = '<N>'.
           append ls_looks to lt_looks.
           ls_looks = '<R>'.
           append ls_looks to lt_looks.
           ls_looks = '<S>'.
           append ls_looks to lt_looks.
           ls_looks = '{S}'.
           append ls_looks to lt_looks.
** get data
           call function 'HR_RU_GET_ADDRESS'
             exporting
               sprsl     = sy-langu
               p0006     = ls_p0006
               think     = 'X'
               separator = ''
               withspace = 'X'
             importing
               address   = l_adr
             tables
               looks     = lt_looks
               addrs     = lt_addrs.
** city?
           read table lt_addrs index 1 into ls_addrs.
           if sy-subrc eq 0.
             p0290-mplace = ls_addrs.
           endif.
           condense p0290-mplace.
           if p0290-mplace is initial.
** village?
             read table lt_addrs index 2 into ls_addrs.
             if sy-subrc eq 0.
               p0290-mplace = ls_addrs.
             endif.
           endif.
           read table lt_addrs index 3 into ls_addrs.
           if sy-subrc eq 0.
             p0290-mraion = ls_addrs.
           endif.
           read table lt_addrs index 4 into ls_addrs.
           if sy-subrc eq 0.
             p0290-mregion = ls_addrs.
           endif.
           read table lt_addrs index 5 into ls_addrs.
           if sy-subrc eq 0.
             l_region_naming = ls_addrs.
           endif.
           concatenate p0290-mregion l_region_naming into p0290-mregion separated by space.
         endif.
       endif.
* init issue date
       if p0290-datbg is initial.
         p0290-datbg = p0290-begda.
       endif.

     when '861'.
* read personal data
       ls_p0002 = p0002( tclas = tclas
                         pernr = p0290-pernr
                         begda = p0290-begda
                         endda = p0290-endda ).
       if ls_p0002 is not initial.
         p0290-nachn = ls_p0002-nachn.
         p0290-vorna = ls_p0002-vorna.
         p0290-midnm = ls_p0002-midnm.
       endif.
     when others.
   endcase.

   pnnnn = p0290.

 endmethod.


METHOD SPECIFIC_INSERT_COMPUTATIONS.

  DATA ls_p0290 TYPE p0290.

  ls_p0290 = pnnnn.
  CALL METHOD me->specific_computations
    EXPORTING
      tclas           = tclas
      ioper           = 'COP'
      message_handler = message_handler
    IMPORTING
      is_ok           = is_ok
    CHANGING
      p0290           = ls_p0290
      pnnnn2          = pnnnn2.

  pnnnn = ls_p0290.

ENDMETHOD.


METHOD SPECIFIC_MODIFY_COMPUTATIONS.

  DATA ls_p0290 TYPE p0290.

  ls_p0290 = pnnnn.

  CALL METHOD me->specific_computations
    EXPORTING
      tclas           = tclas
      ioper           = 'MOD'
      message_handler = message_handler
    IMPORTING
      is_ok           = is_ok
    CHANGING
      p0290           = ls_p0290
      pnnnn2          = pnnnn2.

  pnnnn = ls_p0290.

ENDMETHOD.
ENDCLASS.