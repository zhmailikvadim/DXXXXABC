class CL_HRRCF_ADDRESS_SERVICE definition
  public
  final
  create private .

public section.

*"* public components of class CL_HRRCF_ADDRESS_SERVICE
*"* do not include other source files here!!!
  interfaces IF_HRRCF_CONSTANTS .

  aliases DELETE_OPERATION
    for IF_HRRCF_CONSTANTS~DELETE_OPERATION .
  aliases FALSE
    for IF_HRRCF_CONSTANTS~FALSE .
  aliases HIGH_DATE
    for IF_HRRCF_CONSTANTS~HIGH_DATE .
  aliases INSERT_OPERATION
    for IF_HRRCF_CONSTANTS~INSERT_OPERATION .
  aliases LOW_DATE
    for IF_HRRCF_CONSTANTS~LOW_DATE .
  aliases MODIFY_OPERATION
    for IF_HRRCF_CONSTANTS~MODIFY_OPERATION .
  aliases MSGCL_ADMIN
    for IF_HRRCF_CONSTANTS~MSGCL_ADMIN .
  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS~MSGCL_USER .

  data ADDRESSDATA type RCF_T_ADDRESSDATA_BP read-only .
  data TELEFONDATA type RCF_T_TELEFONDATA_BP read-only .
  data FAXDATA type RCF_T_FAXDATA_BP read-only .
  data E_MAILDATA type RCF_T_EMAILDATA_BP read-only .
  data INFOTYPE_RECORD type RCF_T_CONTACT_RULES read-only .
  data PERSONNUMBER type AD_PERSNUM read-only .
  data EMAILDATA_ALL type RCF_T_BAPIADSMTP .

  methods ADD_CONTACT_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP optional
      !TELEFONDATA type RCF_S_TELEFONDATA_BP optional
      !FAXDATA type RCF_S_FAXDATA_BP optional
      !EMAILDATA type RCF_S_EMAILDATA_BP optional
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods CONSTRUCTOR
    importing
      !CANDIDATE type ref to CL_HRRCF_CANDIDATE
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods DELETE_CONTACT_DATA
    importing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP optional
      !TELEFONDATA type RCF_S_TELEFONDATA_BP optional
      !FAXDATA type RCF_S_FAXDATA_BP optional
      !EMAILDATA type RCF_S_EMAILDATA_BP optional
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods DELETE_CONTACT_DATA_FROM_INFTY
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  class-methods GET_BUPA_BY_EMAIL
    importing
      !E_MAIL type BAPIBUS1006_COMM-E_MAIL
    returning
      value(BUSINESSPARTNER) type RCF_T_BU_PARTNER
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods GET_FREE_COMM_CHANNEL
    importing
      !P_COMM_TYPE type RCF_COMM_TYPE default '0000'
    exporting
      !P_COMM_CHANNEL type RCF_COMM_CHANNEL
    raising
      CX_HRRCF .
  class-methods GET_INSTANCE
    importing
      !BUSINESSPARTNER type BU_PARTNER
    exporting
      !INSTANCE type ref to CL_HRRCF_ADDRESS_SERVICE
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods GET_BUSINESS_EMAIL
    importing
      !IM_V_PERNR type PERSONID
    exporting
      !EMAILDATA type RCF_S_EMAILDATA_BP .
  methods GET_PREFERRED_CONTACT_DATA
    exporting
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP
      !TELEFONDATA type RCF_S_TELEFONDATA_BP
      !FAXDATA type RCF_S_FAXDATA_BP
      !EMAILDATA type RCF_S_EMAILDATA_BP .
  class-methods IS_EMAIL_UNIQUE
    importing
      !E_MAIL type BAPIBUS1006_COMM-E_MAIL
    returning
      value(RESULT) type BOOLE_D
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods UPDATE_CONTACT_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP optional
      !TELEFONDATA type RCF_S_TELEFONDATA_BP optional
      !FAXDATA type RCF_S_FAXDATA_BP optional
      !EMAILDATA type RCF_S_EMAILDATA_BP optional
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods UPDATE_ADDRESS_FROM_BUPA
    importing
      !IV_EXT_COMMIT type BOOLE_D default ''
    exporting
      !ET_RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods GET_PRIVATE_EMAIL
    importing
      !IM_S_HROBJECT type HROBJECT optional
    exporting
      !EX_S_EMAILDATA type RCF_S_EMAILDATA_BP
    raising
      CX_HRRCF_ADDRESS_SERVICE .
protected section.
*"* protected components of class CL_HRRCF_BAS_1
*"* do not include other source files here!!!
private section.

  aliases TRUE
    for IF_HRRCF_CONSTANTS~TRUE .

  class-data INSTANCE_DIRECTORY type INSTANCE_DIRECTORY .
  data BUSINESSPARTNER type BU_PARTNER .
  constants ADDRESS type SUBTY value '0000'. "#EC NOTEXT
  constants TELEFON type SUBTY value '0001'. "#EC NOTEXT
  constants FAX type SUBTY value '0002'. "#EC NOTEXT
  constants EMAIL type SUBTY value '0003'. "#EC NOTEXT
  data HRRCF_CONTACT_RULES type ref to CL_HRRCF_CONTACT_RULES .

  methods ADD_ADDRESS_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods ADD_COMMUNICATION_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !TELEFONDATA type RCF_S_TELEFONDATA_BP optional
      !FAXDATA type RCF_S_FAXDATA_BP optional
      !EMAILDATA type RCF_S_EMAILDATA_BP optional
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods DELETE_ADDRESS_DATA
    importing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods DELETE_COMMUNICATION_DATA
    importing
      !TELEFONDATA type RCF_S_TELEFONDATA_BP optional
      !FAXDATA type RCF_S_FAXDATA_BP optional
      !EMAILDATA type RCF_S_EMAILDATA_BP optional
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  class-methods GET_INSTANCE_FROM_DIRECTORY
    importing
      !BUSINESSPARTNER type BU_PARTNER
    exporting
      value(INSTANCE) type ref to CL_HRRCF_ADDRESS_SERVICE .
  methods GET_RECORDS_FROM_INFOTYPE
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  class-methods ON_BUFFER_REFRESH
    for event RCF_BUFFER_REFRESH of CL_HRRCF_SIMPLE_MAIN_OBJECT .
  methods PUT_DATA_TO_INFTY_STRUCTURE
    importing
      !IS_ADDRESS type BOOLE_D optional
      !IS_TELEFON type BOOLE_D optional
      !IS_FAX type BOOLE_D optional
      !IS_EMAIL type BOOLE_D optional
      !EXTERNAL_COMMIT type BOOLE_D default 'X'
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  class-methods REGISTER_INSTANCE
    importing
      !BUSINESSPARTNER type BU_PARTNER
      !INSTANCE type ref to CL_HRRCF_ADDRESS_SERVICE .
  methods SET_ADDRESS_ATTRIBUTES_INT
    importing
      !PT_5110 type RCF_T_CONTACT_RULES
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods SET_ATTRIBUTES_INTERNAL
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods SET_COMM_ATTRIBUTES_INT
    importing
      !PT_5110 type RCF_T_CONTACT_RULES
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods SET_PERSON_NUMBER_INT
    exporting
      !PERSON_NUMBER type BAPIBUS1006_CENTRAL_INFO-PERS_NO
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods UPDATE_ADDRESS_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !ADDRESSDATA type RCF_S_ADDRESSDATA_BP
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods UPDATE_COMMUNICATION_DATA
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    changing
      !TELEFONDATA type RCF_S_TELEFONDATA_BP
      !FAXDATA type RCF_S_FAXDATA_BP
      !EMAILDATA type RCF_S_EMAILDATA_BP
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods UPDATE_DATA_TO_INFOTYPE
    importing
      !SUBTYPE type SUBTY
      !OPERATION type RCF_OPERA
      !EXTERNAL_COMMIT type BOOLE_D default 'X'
    exporting
      !RETURN type BAPIRETTAB
    changing
      !INFTY_RECORD type ANY
    raising
      CX_HRRCF_ADDRESS_SERVICE .
  methods PROCESS_ADDRNUM
    importing
      !PS_ADDRNUM type BAPIBUS1006_ADDRESSES_INT
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods UPDATE_COMM_DATA_INT
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    changing
      !PT_TELEFONDATA type BAPIADTEL_T
      !PT_FAXDATA type BAPIADFAX_T
      !PT_EMAILDATA type BAPIADSMTP_T
      !PT_TELEFONDATA_X type BAPIADTELX_T
      !PT_FAXDATA_X type BAPIADFAXX_T
      !PT_EMAILDATA_X type BAPIADSMTX_T
      !PT_RETURN type BAPIRETTAB .
ENDCLASS.



CLASS CL_HRRCF_ADDRESS_SERVICE IMPLEMENTATION.


METHOD add_address_data .

  DATA ls_return         TYPE          bapiret2 .
  DATA lt_return         TYPE TABLE OF bapiret2 .
  DATA ls_addressdata    TYPE          bapibus1006_address .
  DATA lv_addressguid    TYPE          but020-guid .
  DATA lv_addrnr         TYPE          ad_addrnum .
  DATA lo_exception      TYPE REF TO   cx_hrrcf .
  DATA lv_addr_guid      TYPE          bu_address_guid .

  MOVE-CORRESPONDING addressdata TO ls_addressdata .
* Put address into BP
  CALL FUNCTION 'ADDR_ACCEPT_REG_DATA_ERROR'         "PESK005282
    EXPORTING                                        "PESK005282
      accept_error = 'X'.                            "PESK005282

  IF cl_hrrcf_simple_main_object=>luw_mode EQ true.        "MELN1825353
    CALL FUNCTION 'BUPA_ADDRESS_ADD'
      EXPORTING
        iv_partner                = me->businesspartner
        is_address                = ls_addressdata
        iv_duplicate_message_type = '-'
        iv_accept_error           = 'X'
        iv_x_save                 = space
      IMPORTING
        ev_addrguid               = lv_addr_guid
      TABLES
        et_return                 = return.

      lv_addressguid = lv_addr_guid.

  ELSE.
    CALL FUNCTION 'BAPI_BUPA_ADDRESS_ADD'
    EXPORTING
      businesspartner = me->businesspartner
      addressdata     = ls_addressdata
      duplicate_message_type = '-'               "WAR1540502
      accept_error    = 'X'
    IMPORTING
      addressguid     = lv_addressguid
    TABLES
      return          = return.
  ENDIF.

*--- do not care on any business partner lock -------------------------
  IF NOT me->businesspartner IS INITIAL.
    CALL FUNCTION 'BUPA_DEQUEUE'
      EXPORTING
        iv_partner = me->businesspartner
      TABLES
        et_return  = lt_return.
    CLEAR lt_return.
  ENDIF.

  DELETE return WHERE type NE 'E' AND type NE 'A'.   "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_address_add_failure
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
*  Special handling required for error messages from TAX component: as per note 1150603
      READ TABLE return WITH KEY id = 'TAX_TXJCD' number = 100 INTO ls_return.
      IF sy-subrc = 0.
        CLEAR: ls_return-id, ls_return-number, ls_return-message.
*  Use E-Rec Application specific Error message for the scenario
        ls_return-id = 'HRRCF0002'.
        ls_return-number = 211.
        MODIFY return INDEX sy-tabix FROM ls_return TRANSPORTING id number message.
      ENDIF.

      READ TABLE return WITH KEY id = 'TAX_TXJCD' number = 101 INTO ls_return.
      IF sy-subrc = 0.
        CLEAR: ls_return-id, ls_return-number, ls_return-message.
*  Use E-Rec Application specific Error message for the scenario
        ls_return-id = 'HRRCF0002'.
        ls_return-number = 210.
        MODIFY return INDEX sy-tabix FROM ls_return TRANSPORTING id number message.
      ENDIF.

      EXIT.  "change control flow

    ENDIF.
  ENDIF .

  IF NOT external_commit = true.
*XDP
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
*XDP
  ENDIF.

* Now get the address number of the address added
  CALL FUNCTION 'BAPI_BUPA_ADDRESS_GETDETAIL'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
    IMPORTING
      addressdata     = ls_addressdata
    TABLES
      return          = return.

  CALL FUNCTION 'BAPI_BUPA_ADDRESS_GET_NUMBERS'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
    IMPORTING
      addr_no_out     = lv_addrnr
    TABLES
      return          = return.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

* Push the data into the attribute and also into the Infotype
  MOVE lv_addrnr TO addressdata-addrnr .
  MOVE-CORRESPONDING ls_addressdata TO addressdata .
  APPEND addressdata TO me->addressdata .
  TRY.
      CALL METHOD me->put_data_to_infty_structure
        EXPORTING
          is_address      = true
          external_commit = external_commit      "WAR1540502
        IMPORTING
          return          = return.
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
         EXPORTING
          textid   = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.


METHOD add_communication_data .

  DATA lt_telefondata    TYPE  TABLE OF bapiadtel .
  DATA ls_telefondata_bp TYPE           bapiadtel .
  DATA ls_telefondata    TYPE           rcf_s_telefondata_bp .

  DATA lt_faxdata        TYPE  TABLE OF bapiadfax .
  DATA ls_faxdata_bp     TYPE           bapiadfax .
  DATA ls_faxdata        TYPE           rcf_s_faxdata_bp .

  DATA lt_emaildata      TYPE  TABLE OF bapiadsmtp .
  DATA ls_emaildata_bp   TYPE           bapiadsmtp .
  DATA ls_emaildata      TYPE           rcf_s_emaildata_bp .

  DATA lt_telefondata_x TYPE TABLE OF bapiadtelx.
  DATA lt_faxdata_x     TYPE TABLE OF bapiadfaxx.
  DATA lt_emaildata_x  TYPE TABLE OF bapiadsmtx.

  DATA ls_telefondata_x TYPE bapiadtelx.
  DATA ls_faxdata_x     TYPE bapiadfaxx.
  DATA ls_e_maildata_x  TYPE bapiadsmtx.

  DATA ls_return TYPE          bapiret2 .
  DATA lt_return TYPE TABLE OF bapiret2 .

  DATA lo_exception TYPE REF TO cx_hrrcf .
  DATA ls_return_warning TYPE bapiret2 .
  DATA lv_message TYPE temsg-emtext.

  TRY.
*     Add Telefondata
      IF NOT telefondata IS INITIAL .
        MOVE-CORRESPONDING telefondata TO ls_telefondata_bp .
        MOVE '001' TO ls_telefondata_bp-consnumber .
        APPEND ls_telefondata_bp TO lt_telefondata .
        ls_telefondata_x-country                        = true .
        ls_telefondata_x-countryiso                     = true .
        ls_telefondata_x-std_no                         = true.
        ls_telefondata_x-telephone                      = true.
        ls_telefondata_x-extension                      = true.
        ls_telefondata_x-tel_no                         = true.
        ls_telefondata_x-caller_no                      = true.
        ls_telefondata_x-std_recip                      = true.
        ls_telefondata_x-r_3_user                       = true.
        ls_telefondata_x-home_flag                      = true.
        ls_telefondata_x-consnumber                     = true.
        ls_telefondata_x-flg_nouse                      = true.
        ls_telefondata_x-updateflag                     = 'I'.  "Insert
        APPEND ls_telefondata_x TO lt_telefondata_x .
      ENDIF .

*     Add Faxdata
      IF NOT faxdata IS INITIAL .
        MOVE-CORRESPONDING faxdata TO ls_faxdata_bp .
        APPEND ls_faxdata_bp TO lt_faxdata .
        ls_faxdata_x-country                        = true.
        ls_faxdata_x-countryiso                     = true.
        ls_faxdata_x-std_no                         = true.
        ls_faxdata_x-fax                            = true.
        ls_faxdata_x-extension                      = true.
        ls_faxdata_x-fax_no                         = true.
        ls_faxdata_x-updateflag                     = 'I'. "Insert
        APPEND ls_faxdata_x TO lt_faxdata_x.
      ENDIF .

*     Add emaildata
      IF NOT emaildata IS INITIAL .
        MOVE-CORRESPONDING emaildata TO ls_emaildata_bp .
        APPEND ls_emaildata_bp TO lt_emaildata .
        ls_e_maildata_x-std_no                         = true.
        ls_e_maildata_x-e_mail                         = true.
        ls_e_maildata_x-email_srch                     = true .
        ls_e_maildata_x-std_recip                      = true .
        ls_e_maildata_x-r_3_user                       = true .
        ls_e_maildata_x-encode                         = true .
        ls_e_maildata_x-tnef                           = true .
        ls_e_maildata_x-home_flag                      = true .
        ls_e_maildata_x-consnumber                     = true .
        ls_e_maildata_x-flg_nouse                      = true.
        ls_e_maildata_x-updateflag                     = 'I'.   "Insert
        APPEND ls_e_maildata_x TO lt_emaildata_x.
      ENDIF .

*     Put all communication types into BP
      CALL METHOD me->update_comm_data_int
        EXPORTING                                "WAR1540502
          external_commit  = external_commit     "WAR1540502
        CHANGING
          pt_telefondata   = lt_telefondata
          pt_faxdata       = lt_faxdata
          pt_emaildata     = lt_emaildata
          pt_telefondata_x = lt_telefondata_x
          pt_faxdata_x     = lt_faxdata_x
          pt_emaildata_x   = lt_emaildata_x
          pt_return        = return.

      IF NOT external_commit = true.
*XDP
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
*XDP
      ENDIF.

*--- do not care on any business partner lock -------------------------
      IF NOT me->businesspartner IS INITIAL.
        CALL FUNCTION 'BUPA_DEQUEUE'
          EXPORTING
            iv_partner = me->businesspartner
          TABLES
            et_return  = lt_return.
        CLEAR lt_return.
      ENDIF.
*Filter out the warning message before delete
      IF 1 = 2.
        MESSAGE w073(am).                                   "#EC *
      ENDIF.

      READ TABLE return INTO ls_return_warning WITH KEY                     "N2017744
              id = 'AM' number = '156'.
      IF sy-subrc EQ 0.
       lv_message = ls_return_warning-message.

       CALL FUNCTION 'SM02_ADD_MESSAGE'
         EXPORTING
           message                    = lv_message
           client                     = sy-mandt
        EXCEPTIONS
           empty_message              = 1
           server_not_available       = 2
           client_not_available       = 3
           not_authorized             = 4
           langu_not_available        = 5
           others                     = 6 .
       IF sy-subrc <> 0.
* Implement suitable error handling here
       ENDIF.

       CLEAR ls_return_warning.
      ENDIF.                                                                "N2017744

      READ TABLE return INTO ls_return_warning WITH KEY
             type = 'W' id = 'AM' number = '073'.

      DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
      IF NOT return IS INITIAL.
*       fatal error
        READ TABLE return WITH KEY type = 'A'
                                  INTO ls_return.
        IF sy-subrc EQ 0 .
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid =
             cx_hrrcf_address_service=>cx_comm_data_add_failure
              message_type   = ls_return-type
              message_class  = ls_return-id
              message_number = ls_return-number
              message_par1   = ls_return-message_v1
              message_par2   = ls_return-message_v2
              message_par3   = ls_return-message_v3
              message_par4   = ls_return-message_v4.
        ENDIF .
*       User error
        READ TABLE return WITH KEY type = 'E'
                              TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          EXIT.  "change control flow
        ENDIF.
      ENDIF .

      CLEAR : lt_telefondata,
              lt_faxdata ,
              lt_emaildata,
              ls_telefondata_bp ,
              ls_faxdata_bp ,
              ls_emaildata_bp .
      REFRESH : lt_telefondata,
                lt_faxdata ,
                lt_emaildata .

*     Now get data from BP for getting the correct CONSNUMBERS
      CALL FUNCTION 'BAPI_BUPA_CENTRAL_GETDETAIL'
        EXPORTING
          businesspartner       = me->businesspartner
        TABLES
          telefondatanonaddress = lt_telefondata
          faxdatanonaddress     = lt_faxdata
          e_maildatanonaddress  = lt_emaildata
          return                = return.

      DELETE return WHERE type NE 'E' AND type NE 'A'.
      IF NOT return IS INITIAL.
*       fatal error
        READ TABLE return WITH KEY type = 'A'
                                  INTO ls_return.
        IF sy-subrc EQ 0 .
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid =
                 cx_hrrcf_address_service=>cx_hrrcf_address_service
              message_type = ls_return-type
              message_class = ls_return-id
              message_number = ls_return-number
              message_par1 = ls_return-message_v1
              message_par2 = ls_return-message_v2
              message_par3 = ls_return-message_v3
              message_par4 = ls_return-message_v4.
        ENDIF .
*       User error
        READ TABLE return WITH KEY type = 'E'
                              TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          EXIT.  "change control flow
        ENDIF.
      ENDIF .

*     Add telefondata to Infotype
      LOOP AT me->telefondata INTO ls_telefondata .
        DELETE lt_telefondata WHERE consnumber EQ
                                    ls_telefondata-consnumber.
      ENDLOOP .

      LOOP AT lt_telefondata INTO ls_telefondata_bp .
        MOVE ls_telefondata_bp-consnumber TO
                                telefondata-consnumber .
        APPEND telefondata TO me->telefondata .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_telefon      = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDLOOP .

*Append the warning message to the return message
      IF NOT ls_return_warning IS INITIAL.
        APPEND ls_return_warning TO return.
      ENDIF.

*     Add faxdata to Infotype
      LOOP AT me->faxdata INTO ls_faxdata .
        DELETE lt_faxdata WHERE consnumber EQ
                                  ls_faxdata-consnumber.
      ENDLOOP .

      LOOP AT lt_faxdata INTO ls_faxdata_bp .
        MOVE ls_faxdata_bp-consnumber TO faxdata-consnumber .
        APPEND faxdata TO me->faxdata .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_fax          = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDLOOP .

*     Add E-maildata to Infotype
      LOOP AT  me->e_maildata INTO ls_emaildata .
        DELETE lt_emaildata WHERE consnumber EQ
                             ls_emaildata-consnumber.
      ENDLOOP .

      LOOP AT lt_emaildata INTO ls_emaildata_bp .
        MOVE ls_emaildata_bp-consnumber TO emaildata-consnumber .
        APPEND emaildata TO me->e_maildata .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_email        = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDLOOP .
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.


METHOD add_contact_data .

  DATA: lo_exception TYPE REF TO cx_hrrcf,
        lt_return TYPE bapirettab.

  CLEAR return .

  TRY .
*     Add addressdata
      IF NOT addressdata IS INITIAL .
        CALL METHOD me->add_address_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return      = lt_return
          CHANGING
            addressdata = addressdata.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .

*     Add other communication data
      IF ( telefondata IS SUPPLIED ) OR
         ( faxdata     IS SUPPLIED ) OR
         ( emaildata   IS SUPPLIED ) .
        CALL METHOD me->add_communication_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = lt_return
          CHANGING
            telefondata     = telefondata
            faxdata         = faxdata
            emaildata       = emaildata.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

* Commit BAPI transactions
  IF NOT external_commit = true.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

* Set internal attributes
  CALL METHOD me->set_attributes_internal
    IMPORTING
      return = lt_return.
  APPEND LINES OF lt_return TO return.

ENDMETHOD.                    "ADD_CONTACT_DATA


METHOD constructor .

  DATA lo_exception TYPE REF TO cx_hrrcf .

  SET HANDLER on_buffer_refresh.

  me->businesspartner = candidate->partner .

* Instantiate Contact rules(5110) Infotype
  CALL METHOD cl_hrrcf_contact_rules=>get_instance
    EXPORTING
      hrobject = candidate->hrobject
    IMPORTING
      instance = me->hrrcf_contact_rules.

  TRY.
*     Set person number
      CALL METHOD me->set_person_number_int
        IMPORTING
          person_number = me->personnumber.

    CATCH cx_hrrcf INTO lo_exception .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
      EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.                    "CONSTRUCTOR


METHOD delete_address_data .

  DATA lt_addresses TYPE TABLE OF bapibus1006_addresses_int .
  DATA ls_addresses TYPE          bapibus1006_addresses_int .
  DATA ls_addressdata   TYPE rcf_s_addressdata_bp .
  DATA lv_addressguid TYPE but020-guid .
  DATA lv_addr_guid   TYPE bu_address_guid .

  DATA lo_exception TYPE REF TO cx_hrrcf .

  DATA ls_return TYPE          bapiret2 .
  DATA lt_return TYPE TABLE OF bapiret2 .

  CALL FUNCTION 'BUPA_ADDRESSES_GET'
    EXPORTING
      iv_partner   = me->businesspartner
    TABLES
      et_addresses = lt_addresses
      et_return    = return.

  DELETE return WHERE type NE 'E' AND type NE 'A'.    "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .
*********************
  IF addressdata-standardaddress = 'X' .
    CLEAR ls_addressdata .
    LOOP AT me->addressdata INTO ls_addressdata WHERE
      addrnr NE addressdata-addrnr .
      IF ls_addressdata-standardaddress = 'X' .
        EXIT .
      ENDIF .
      MOVE 'X' TO ls_addressdata-standardaddress .
      CALL METHOD me->update_contact_data
        IMPORTING
          return      = return
        CHANGING
          addressdata = ls_addressdata.
      CHECK return IS INITIAL .
      EXIT .
    ENDLOOP .
  ENDIF .
  CLEAR ls_addressdata .
***********************
*    DELETE lt_addresses WHERE addrnumber NE addressdata-addrnr .
*    READ TABLE lt_addresses INDEX 1 INTO ls_addresses .
  READ TABLE lt_addresses WITH KEY addrnumber = addressdata-addrnr
                                   INTO ls_addresses .
  MOVE ls_addresses-addrguid TO lv_addressguid .

  CALL FUNCTION 'ADDR_ACCEPT_REG_DATA_ERROR'         "PESK005282
    EXPORTING                                        "PESK005282
      accept_error = 'X'.                            "PESK005282

  IF cl_hrrcf_simple_main_object=>luw_mode EQ true.        "MELN1825353

    lv_addr_guid = lv_addressguid.                         "MELN1726370
    CALL FUNCTION 'BUPA_ADDRESS_REMOVE'
      EXPORTING
        iv_partner  = me->businesspartner
        iv_addrguid = lv_addr_guid
        iv_x_save   = space
      TABLES
        et_return   = return.

    lv_addressguid = lv_addr_guid.

  ELSE.
    CALL FUNCTION 'BAPI_BUPA_ADDRESS_REMOVE'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
    TABLES
      return          = return.
  ENDIF.

*--- do not care on any business partner lock -------------------------
  IF NOT me->businesspartner IS INITIAL.
    CALL FUNCTION 'BUPA_DEQUEUE'
      EXPORTING
        iv_partner = me->businesspartner
      TABLES
        et_return  = lt_return.
    CLEAR lt_return.
  ENDIF.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_address_delete_failure
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

*XDP
  IF NOT external_commit EQ true.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.
*XDP

  DELETE me->addressdata WHERE addrnr EQ addressdata-addrnr .
  TRY.
      CALL METHOD me->put_data_to_infty_structure
        EXPORTING
          is_address      = true
          external_commit = external_commit      "WAR1540502
        IMPORTING
          return          = return.
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
         EXPORTING
          textid   = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.


METHOD delete_communication_data .

  DATA ls_return TYPE          bapiret2 .
  DATA lt_return TYPE TABLE OF bapiret2 .

  DATA lt_telefondata    TYPE  TABLE OF bapiadtel .
  DATA ls_telefondata_bp TYPE           bapiadtel .
  DATA ls_telefondata    TYPE           rcf_s_telefondata_bp .

  DATA lt_faxdata        TYPE  TABLE OF bapiadfax .
  DATA ls_faxdata_bp     TYPE           bapiadfax .
  DATA ls_faxdata        TYPE           rcf_s_faxdata_bp .

  DATA lt_emaildata      TYPE  TABLE OF bapiadsmtp .
  DATA ls_emaildata_bp   TYPE           bapiadsmtp .
  DATA ls_emaildata      TYPE           rcf_s_emaildata_bp .

  DATA lt_telefondata_x TYPE TABLE OF bapiadtelx.
  DATA lt_faxdata_x     TYPE TABLE OF bapiadfaxx.
  DATA lt_emaildata_x   TYPE TABLE OF bapiadsmtx.

  DATA ls_telefondata_x TYPE bapiadtelx.
  DATA ls_faxdata_x     TYPE bapiadfaxx.
  DATA ls_e_maildata_x  TYPE bapiadsmtx.

* Delete Telefondata
  IF NOT telefondata IS INITIAL .
    IF telefondata-std_no = 'X' .
      LOOP AT me->telefondata INTO ls_telefondata WHERE
                consnumber NE telefondata-consnumber .
        MOVE 'X' TO ls_telefondata-std_no .
        CALL METHOD me->update_contact_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = return
          CHANGING
            telefondata     = ls_telefondata.
        CHECK return IS INITIAL .
        EXIT .
      ENDLOOP .
    ENDIF .
    DELETE me->telefondata WHERE consnumber
                               EQ telefondata-consnumber .
    MOVE-CORRESPONDING telefondata TO ls_telefondata_bp .
    APPEND ls_telefondata_bp TO lt_telefondata .

    ls_telefondata_x-country                        = true .
    ls_telefondata_x-countryiso                     = true .
    ls_telefondata_x-std_no                         = true.
    ls_telefondata_x-telephone                      = true.
    ls_telefondata_x-extension                      = true.
    ls_telefondata_x-tel_no                         = true.
    ls_telefondata_x-updateflag                     = 'D'. "Delete

    APPEND ls_telefondata_x TO lt_telefondata_x .
  ENDIF .

* Delete Faxdata
  IF NOT faxdata IS INITIAL .
    IF faxdata-std_no = 'X' .
      LOOP AT me->faxdata INTO ls_faxdata WHERE consnumber NE
                                              faxdata-consnumber .
        MOVE 'X' TO ls_faxdata-std_no .
        CALL METHOD me->update_contact_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = return
          CHANGING
            faxdata         = ls_faxdata.
        CHECK return IS INITIAL .
        EXIT .
      ENDLOOP .
    ENDIF .
    DELETE me->faxdata WHERE consnumber EQ faxdata-consnumber .
    MOVE-CORRESPONDING faxdata TO ls_faxdata_bp .
    APPEND ls_faxdata_bp TO lt_faxdata .

    ls_faxdata_x-country                        = true.
    ls_faxdata_x-countryiso                     = true.
    ls_faxdata_x-std_no                         = true.
    ls_faxdata_x-fax                            = true.
    ls_faxdata_x-extension                      = true.
    ls_faxdata_x-fax_no                         = true.
    ls_faxdata_x-updateflag                     = 'D'. "Delete

    APPEND ls_faxdata_x TO lt_faxdata_x.
  ENDIF .

* Delete Emaildata
  IF NOT emaildata IS INITIAL .
    IF emaildata-std_no = 'X' .
      LOOP AT me->e_maildata INTO ls_emaildata WHERE consnumber NE
                                             emaildata-consnumber .
        MOVE 'X' TO ls_emaildata-std_no .
        CALL METHOD me->update_contact_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = return
          CHANGING
            emaildata       = ls_emaildata.
        CHECK return IS INITIAL .
        EXIT .
      ENDLOOP .
    ENDIF .
    DELETE me->e_maildata WHERE consnumber EQ
                                        emaildata-consnumber .
    MOVE-CORRESPONDING emaildata TO ls_emaildata_bp .
    APPEND ls_emaildata_bp TO lt_emaildata .

    ls_e_maildata_x-std_no                         = true.
    ls_e_maildata_x-e_mail                         = true.
    ls_e_maildata_x-email_srch                     = true .
    ls_e_maildata_x-std_recip                      = true .
    ls_e_maildata_x-r_3_user                       = true .
    ls_e_maildata_x-encode                         = true .
    ls_e_maildata_x-tnef                           = true .
    ls_e_maildata_x-home_flag                      = true .
    ls_e_maildata_x-consnumber                     = true .
    ls_e_maildata_x-flg_nouse                      = true.
    ls_e_maildata_x-updateflag                     = 'D'. "Update

    APPEND ls_e_maildata_x TO lt_emaildata_x.
  ENDIF .

* Update data to BP
  CALL METHOD me->update_comm_data_int
    EXPORTING                                    "WAR1540502
      external_commit  = external_commit         "WAR1540502
    CHANGING
      pt_telefondata   = lt_telefondata
      pt_faxdata       = lt_faxdata
      pt_emaildata     = lt_emaildata
      pt_telefondata_x = lt_telefondata_x
      pt_faxdata_x     = lt_faxdata_x
      pt_emaildata_x   = lt_emaildata_x
      pt_return        = return.

*  CALL FUNCTION 'BAPI_BUPA_CENTRAL_CHANGE'
*    EXPORTING
*      businesspartner        = me->businesspartner
*    TABLES
*      telefondatanonaddress  = lt_telefondata
*      faxdatanonaddress      = lt_faxdata
*      e_maildatanonaddress   = lt_emaildata
*      telefondatanonaddressx = lt_telefondata_x
*      faxdatanonaddressx     = lt_faxdata_x
*      e_maildatanonaddressx  = lt_emaildata_x
*      return                 = return.

  IF NOT external_commit EQ true.
*XDP
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
*XDP
  ENDIF.

*--- do not care on any business partner lock -------------------------
  IF NOT me->businesspartner IS INITIAL.
    CALL FUNCTION 'BUPA_DEQUEUE'
      EXPORTING
        iv_partner = me->businesspartner
      TABLES
        et_return  = lt_return.
    CLEAR lt_return.
  ENDIF.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid =
             cx_hrrcf_address_service=>cx_comm_data_delete_failure
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

* Update telefondata to Infotype
  IF NOT telefondata IS INITIAL .
    CALL METHOD me->put_data_to_infty_structure
      EXPORTING
        is_telefon      = true
        external_commit = external_commit        "WAR1540502
      IMPORTING
        return          = return.
  ENDIF .

* Update Faxdata to Infotype
  IF NOT faxdata IS INITIAL .
    CALL METHOD me->put_data_to_infty_structure
      EXPORTING
        is_fax          = true
        external_commit = external_commit        "WAR1540502
      IMPORTING
        return          = return.
  ENDIF .

* Update Emaildata to Infotype
  IF NOT emaildata IS INITIAL .
    CALL METHOD me->put_data_to_infty_structure
      EXPORTING
        is_email        = true
        external_commit = external_commit        "WAR1540502
      IMPORTING
        return          = return.
  ENDIF .

ENDMETHOD.


METHOD delete_contact_data .

  DATA: lo_exception TYPE REF TO cx_hrrcf,
        lt_return TYPE bapirettab.

  CLEAR return .

  TRY .
*     Delete addressdata
      IF NOT addressdata IS INITIAL .
        CALL METHOD me->delete_address_data
          EXPORTING
            addressdata     = addressdata
            external_commit = external_commit
          IMPORTING
            return          = lt_return.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .

*     Delete other communication types
      IF ( telefondata IS SUPPLIED ) OR ( faxdata IS SUPPLIED )
                                     OR ( emaildata IS SUPPLIED ) .
        CALL METHOD me->delete_communication_data
          EXPORTING
            telefondata     = telefondata
            faxdata         = faxdata
            emaildata       = emaildata
            external_commit = external_commit
          IMPORTING
            return          = lt_return.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.


* Commit data into BP
  IF NOT external_commit = true.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

* Set object attributes
  CALL METHOD me->set_attributes_internal
    IMPORTING
      return = lt_return.
  APPEND LINES OF lt_return TO return.

ENDMETHOD.                    "DELETE_CONTACT_DATA


METHOD delete_contact_data_from_infty .

* This method is for removing the e-mail from the Infotype record 5110.
*In that sense we delink the e-mail from the business partner so that
*when a candidate is deleted or deregistered the data in the business
*partner remains. This method should be used when a candidate
*deregisters and we want to delink the e-mail from the business partner
*so that the same e-mail could be reused.

  DATA : lo_exception TYPE REF TO cx_hrrcf ,
         lt_return TYPE bapirettab .

  DELETE me->e_maildata WHERE std_no = 'X' .

  TRY.

      CALL METHOD me->put_data_to_infty_structure
        EXPORTING
          is_email = true
        IMPORTING
          return   = lt_return.
      APPEND LINES OF lt_return TO return.

    CATCH cx_hrrcf INTO lo_exception.

      RAISE EXCEPTION TYPE cx_hrrcf_address_service
         EXPORTING
        textid   = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .

  ENDTRY.

* Set object attributes
  CALL METHOD me->set_attributes_internal
    IMPORTING
      return = lt_return.
  APPEND LINES OF lt_return TO return.

ENDMETHOD.


METHOD get_bupa_by_email .

  DATA lt_result TYPE TABLE OF bapibus1006_bp_addr .
  DATA ls_result TYPE bapibus1006_bp_addr .
  DATA lt_return TYPE TABLE OF bapiret2 .
  DATA ls_return TYPE bapiret2 .
  DATA lo_bas TYPE REF TO cl_hrrcf_address_service .

  CHECK e_mail IS NOT INITIAL.

  CALL FUNCTION 'BAPI_BUPA_SEARCH'
    EXPORTING
      email        = e_mail
    TABLES
      searchresult = lt_result
      return       = lt_return.

*  IF 0 = 1.
*    MESSAGE e095(am) WITH 'INT' e_mail .
**   Zur Kommunikationsart &1 wurde keine Adresse gefunden (&2)
*  ENDIF.
*
** skip this message, because it's not needed in here
*  DELETE lt_return WHERE type EQ 'E'
*                     AND number EQ '095'
*                     AND id EQ 'AM'.

  DELETE lt_return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT lt_return IS INITIAL.
*    READ TABLE lt_return INTO ls_return INDEX 1 .
    READ TABLE lt_return WITH KEY type = 'A' INTO ls_return.
    IF sy-subrc = 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid =
              cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
  ENDIF .

*  READ TABLE lt_result INTO ls_result INDEX 1.
*
*  IF sy-subrc EQ 0.
*    businesspartner = ls_result-partner.
*  ENDIF.

  LOOP AT lt_result INTO ls_result .

    TRY.
        CALL METHOD cl_hrrcf_address_service=>get_instance
          EXPORTING
            businesspartner = ls_result-partner
          IMPORTING
            instance        = lo_bas.
      CATCH cx_hrrcf_address_service .
*    nothing happens
    ENDTRY.

    IF lo_bas IS NOT INITIAL .
      IF lo_bas->e_maildata IS NOT INITIAL .
        APPEND ls_result-partner TO businesspartner .
      ENDIF .
    ENDIF .

  ENDLOOP .
DELETE ADJACENT DUPLICATES FROM businesspartner COMPARING ALL FIELDS.

ENDMETHOD.


METHOD get_business_email.

************** Local Object (lo_*) declaration *****************
  DATA: lo_candidate   TYPE REF TO   cl_hrrcf_candidate,
        lo_cand_info   TYPE REF TO   cl_hrrcf_candidate_info,

************** Local Structure (ls_*) declaration *****************
        ls_emaildata   TYPE rcf_s_emaildata_bp,
        ls_email_tmp   TYPE bapiadsmtp,
        ls_return      TYPE bapireturn1,
        ls_records     TYPE p1000,
        ls_hrobject    TYPE hrobject,

************** Local Variable (lv_*) declaration *****************
        lv_pvt_email   TYPE ad_smtpadr.

* Get Business emaildata
  IF emaildata IS SUPPLIED.
    CLEAR emaildata.
    IF me->emaildata_all IS NOT INITIAL.
**->> Changes to determine business email by compairing BP(ADR6) email IDs with HR (PA0105) email IDs

      TRY.
          CALL METHOD cl_hrrcf_candidate=>get
            EXPORTING
              employeeid = im_v_pernr
            IMPORTING
              candidate  = lo_candidate.
        CATCH cx_hrrcf_maintain_object .
          RETURN.
        CATCH cx_hrrcf_infotype_operation .
          RETURN.
        CATCH cx_hrrcf .
          RETURN.
      ENDTRY.

      READ TABLE lo_candidate->records INTO ls_records INDEX 1.
      IF sy-subrc EQ 0.
        ls_hrobject-plvar = ls_records-plvar.
        ls_hrobject-otype = ls_records-otype.
        ls_hrobject-objid = ls_records-objid.
      ENDIF.
**->>  Get the generic email stored in HRP5102
      CALL METHOD cl_hrrcf_candidate_info=>get_instance
        EXPORTING
          hrobject = ls_hrobject
        IMPORTING
          instance = lo_cand_info.

      CALL METHOD lo_cand_info->read_private_email
        IMPORTING
          ps_email = lv_pvt_email.

* Business Email: Mail in BP but not in HRP5102.
      LOOP AT me->emaildata_all INTO ls_email_tmp.
          IF ls_email_tmp-e_mail NE lv_pvt_email.
            MOVE-CORRESPONDING ls_email_tmp TO ls_emaildata.
            MOVE ls_emaildata TO emaildata.
            RETURN.
          ENDIF.
      ENDLOOP.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD get_free_comm_channel.

* Authors: PEV, HGB

  DATA: lt_channel_list TYPE rcf_t_channel_list,
        ls_channel      TYPE rcf_s_channel_list.

  CALL METHOD cl_hrrcf_general_bl=>get_comm_channel_list
    EXPORTING
      p_comm_type     = p_comm_type
    IMPORTING
      pt_channel_list = lt_channel_list.

  CASE p_comm_type.
    WHEN address.
      LOOP AT lt_channel_list INTO ls_channel.
        READ TABLE me->addressdata WITH KEY
          channel = ls_channel-channel TRANSPORTING NO FIELDS.
        IF sy-subrc GE '4'.
          EXIT.
        ENDIF.
      ENDLOOP.

    WHEN telefon.
      LOOP AT lt_channel_list INTO ls_channel.
        READ TABLE me->telefondata WITH KEY
          channel = ls_channel-channel TRANSPORTING NO FIELDS.
        IF sy-subrc GE '4'.
          EXIT.
        ENDIF.
      ENDLOOP.

    WHEN fax.
      LOOP AT lt_channel_list INTO ls_channel.
        READ TABLE me->faxdata WITH KEY
          channel = ls_channel-channel TRANSPORTING NO FIELDS.
        IF sy-subrc GE '4'.
          EXIT.
        ENDIF.
      ENDLOOP.

    WHEN email.
      LOOP AT lt_channel_list INTO ls_channel.
        READ TABLE me->e_maildata WITH KEY
          channel = ls_channel-channel TRANSPORTING NO FIELDS.
        IF sy-subrc GE '4'.
          EXIT.
        ENDIF.
      ENDLOOP.
  ENDCASE.

  IF sy-subrc EQ '0'.
*   get first free channel or overwrite the last one
    p_comm_channel = ls_channel-channel.
  ELSE.
    RAISE EXCEPTION TYPE cx_hrrcf_address_service
      EXPORTING
        textid = cx_hrrcf_address_service=>cx_hrrcf_address_service.
  ENDIF.

ENDMETHOD.


METHOD get_instance .

  DATA lo_exception  TYPE REF TO cx_hrrcf .
  DATA lo_candidate TYPE REF TO cl_hrrcf_candidate .

  CHECK businesspartner IS NOT INITIAL .

* Check if Instance already exists
  CALL METHOD cl_hrrcf_address_service=>get_instance_from_directory
    EXPORTING
      businesspartner = businesspartner
    IMPORTING
      instance        = instance.

* If first time instantiation
  IF instance IS INITIAL .
    TRY .
*       Instantiate candidate object
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            partner   = businesspartner
          IMPORTING
            candidate = lo_candidate.

        IF lo_candidate IS NOT INITIAL .

          CREATE OBJECT instance
               EXPORTING candidate = lo_candidate .

          CALL METHOD cl_hrrcf_address_service=>register_instance
            EXPORTING
              businesspartner = businesspartner
              instance        = instance.

*         Set Attributes of the Bussiness Address service
          CALL METHOD instance->set_attributes_internal
            IMPORTING
              return = return.
        ENDIF .
      CATCH cx_hrrcf INTO lo_exception .
        RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
            textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
            previous = lo_exception .
    ENDTRY.
  ENDIF .

ENDMETHOD.                    "GET_INSTANCE


METHOD get_instance_from_directory .

  DATA instance_directory_line TYPE instance_directory_line.

  READ TABLE instance_directory INTO instance_directory_line
    WITH TABLE KEY businesspartner = businesspartner.

  IF sy-subrc IS INITIAL.
    instance = instance_directory_line-instance.
  ELSE.
    CLEAR instance.
  ENDIF.

ENDMETHOD.                    "GET_INSTANCE_FROM_DIRECTORY


METHOD get_preferred_contact_data .

  DATA : ls_addressdata TYPE rcf_s_addressdata_bp,
         ls_telefondata TYPE rcf_s_telefondata_bp,
         ls_faxdata TYPE rcf_s_faxdata_bp,
         ls_emaildata TYPE rcf_s_emaildata_bp,
         ls_emaildata_all type BAPIADSMTP.

* Get preferred addressdata
  IF addressdata IS SUPPLIED .
    clear addressdata .
    IF me->addressdata IS NOT INITIAL .
      READ TABLE me->addressdata WITH KEY standardaddress = 'X'
                                      INTO ls_addressdata .
      IF sy-subrc EQ 0 .
        MOVE ls_addressdata TO addressdata .
      ENDIF .
    ENDIF .
  ENDIF .

* Get preferred telefondata
  IF telefondata IS SUPPLIED .
    clear telefondata .
    IF me->telefondata IS NOT INITIAL .
      READ TABLE me->telefondata WITH KEY std_no = 'X'
                                      INTO ls_telefondata .
      IF sy-subrc EQ 0 .
        MOVE ls_telefondata TO telefondata .
      ENDIF .
    ENDIF .
  ENDIF .

* Get preferred faxdata
  IF faxdata IS SUPPLIED .
    clear faxdata .
    IF me->faxdata IS NOT INITIAL .
      READ TABLE me->faxdata WITH KEY std_no = 'X'
                                      INTO ls_faxdata .
      IF sy-subrc EQ 0 .
        MOVE ls_faxdata TO faxdata .
      ENDIF .
    ENDIF .
  ENDIF .

* Get preferred emaildata
  IF emaildata IS SUPPLIED .
    clear emaildata .
    IF me->e_maildata IS NOT INITIAL .
      READ TABLE me->e_maildata WITH KEY std_no = 'X'
                                      INTO ls_emaildata .
      IF sy-subrc EQ 0 .
        MOVE ls_emaildata TO emaildata .
      ENDIF .
      ELSEIF me->emaildata_all IS NOT INITIAL.                      "N2602863 these changes cover's the scenario where employees don't have business email
        READ TABLE me->emaildata_all WITH KEY std_no = 'X'           " and no entry in 5110 with subtype 0003
                                      INTO ls_emaildata_all.
      IF sy-subrc EQ 0 .
        MOVE-CORRESPONDING ls_emaildata_all TO emaildata .
      ENDIF .
    ENDIF .
  ENDIF .

ENDMETHOD.


METHOD get_private_email.

************** Local Structure (lo_*) declaration *****************
  DATA:   lo_candidate   TYPE REF TO cl_hrrcf_candidate,
          lo_cand_info   TYPE REF TO cl_hrrcf_candidate_info,
          lo_exception   TYPE REF TO cx_hrrcf,

************** Local Structure (ls_*) declaration *****************
          ls_emaildata   TYPE rcf_s_emaildata_bp,
          ls_email_tmp   TYPE bapiadsmtp,
          ls_return      TYPE bapireturn1,
          ls_hrobject    TYPE hrobject,

************** Local Structure (lv_*) declaration *****************
          lv_pvt_email   TYPE ad_smtpadr.

* Get Private emaildata
  CLEAR ex_s_emaildata.

  IF me->emaildata_all IS NOT INITIAL.
    IF im_s_hrobject IS INITIAL.
      TRY.
          CALL METHOD cl_hrrcf_candidate=>get
            EXPORTING
              user      = sy-uname
            IMPORTING
              candidate = lo_candidate.
        CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
      ENDTRY.
      ls_hrobject = lo_candidate->hrobject.
    ELSE.
      ls_hrobject = im_s_hrobject.
    ENDIF.

* Get the generic email stored in HRP5102
    CHECK ls_hrobject IS NOT INITIAL.

    CALL METHOD cl_hrrcf_candidate_info=>get_instance
      EXPORTING
        hrobject = ls_hrobject
      IMPORTING
        instance = lo_cand_info.

    CALL METHOD lo_cand_info->read_private_email
      IMPORTING
        ps_email = lv_pvt_email.

** Private email: common emaid ID in BP and 5102
    READ TABLE me->emaildata_all INTO ls_email_tmp WITH KEY e_mail = lv_pvt_email.
    IF sy-subrc EQ 0.
      MOVE-CORRESPONDING ls_email_tmp TO ls_emaildata.
      MOVE ls_emaildata TO ex_s_emaildata.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD get_records_from_infotype .

  DATA lo_exception TYPE REF TO cx_hrrcf.
  DATA lt_infty_record TYPE wplog_tab .

  clear lt_infty_record .

*  TRY.
*      CALL METHOD hrrcf_contact_rules->get_records
*        IMPORTING
*          infotype_records = lt_infty_record.
*
**      MOVE lt_infty_record TO me->infotype_record .
*
*  CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn_tab
*    EXPORTING
*      wplog_tab = lt_infty_record
*    IMPORTING
*      pnnnn_tab = me->infotype_record.

    TRY.
        CALL METHOD hrrcf_contact_rules->get_records_by_date
          EXPORTING
            date             = sy-datum
          IMPORTING
            infotype_records = lt_infty_record.

        CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn_tab
          EXPORTING
            wplog_tab = lt_infty_record
          IMPORTING
            pnnnn_tab = me->infotype_record.

      CATCH cx_hrrcf INTO lo_exception .
        RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
            textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
            previous = lo_exception.
    ENDTRY.

ENDMETHOD.                    "GET_RECORDS_FROM_INFOTYPE


METHOD is_email_unique .

  DATA : lt_partner TYPE rcf_t_bu_partner .

*  IF cl_hrrcf_address_service=>get_bupa_by_email( e_mail )
*                               IS NOT INITIAL .
*    result = false .
*  ELSE .
*    result = true .
*  ENDIF .

  lt_partner[] = cl_hrrcf_address_service=>get_bupa_by_email( e_mail ).

  READ TABLE lt_partner INDEX 1 TRANSPORTING NO FIELDS .

  IF sy-subrc = 0 .
    result = false .
  ELSE .
    result = true .
  ENDIF .

ENDMETHOD.


METHOD on_buffer_refresh .

  CLEAR instance_directory.

ENDMETHOD.


METHOD process_addrnum.
  DATA:
    lv_addressguid TYPE          sysuuid_c, "but020-guid ,
    ls_address     TYPE          bapibus1006_address,
    ls_addressdata TYPE          rcf_s_addressdata_bp,
    lt_return      TYPE          bapirettab.
*
  lv_addressguid = ps_addrnum-addrguid. "RAW16 into CHAR32...
*
  CALL FUNCTION 'BAPI_BUPA_ADDRESS_GETDETAIL'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
    IMPORTING
      addressdata     = ls_address
    TABLES
      return          = lt_return.
*
  DELETE lt_return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT lt_return IS INITIAL.
    pt_return = lt_return.
    RETURN.
  ENDIF.
*
  MOVE-CORRESPONDING ls_address TO ls_addressdata.
*
* The address of a candidate itself is stored in the central address
* service, which can be accessed via the business partner.
* Although the address exist in BP it is not available in
* E-Recruiting as long as no IT5110-record with the appropriate
* subtype exists.
* In table T77RCF_COM_CHN for all communication types
* (postal address, telephone number, e-mail) so-called
* communication channels are defined.
* We can store in IT5110 as many addresses as communication channels
* are defined (maximum 10).
* Unfortunatly we don't know how to map the address subtypes of in
* IT0006, which are somehow transferred to BP. So we use the first
* communication channel for the standard address. For all other
* addresses we use the following not-used channels, but do not
* overwrite the previuos records
  CALL METHOD me->get_free_comm_channel
    EXPORTING
      p_comm_type    = '0000'
    IMPORTING
      p_comm_channel = ls_addressdata-channel.
*
  READ TABLE me->addressdata WITH KEY
    channel = ls_addressdata-channel TRANSPORTING NO FIELDS.
  IF NOT sy-subrc IS INITIAL.
*
* ls_addressdata-channel      = "see above
* ls_addressdata-availability =
    ls_addressdata-addrnr       = ps_addrnum-addrnumber.
    APPEND ls_addressdata TO me->addressdata.
  ENDIF.
*
ENDMETHOD.


METHOD put_data_to_infty_structure .

  FIELD-SYMBOLS  <ls_p5110_channelnn>     TYPE rcf_comm_channel .
  FIELD-SYMBOLS  <ls_p5110_addrnrnn>      TYPE ad_addrnum .
  FIELD-SYMBOLS  <ls_p5110_cons_numbernn> TYPE ad_consnum .
  FIELD-SYMBOLS  <ls_p5110_availablenn>   TYPE rcf_comm_available .

  DATA          ls_addressdata_bp TYPE            rcf_s_addressdata_bp .
  DATA          ls_telefondata_bp TYPE            rcf_s_telefondata_bp .
  DATA          ls_faxdata_bp     TYPE            rcf_s_faxdata_bp .
  DATA          ls_emaildata_bp   TYPE            rcf_s_emaildata_bp .
  DATA          ls_p5110          TYPE            p5110 .
  DATA          lv_update_needed  TYPE            boole_d .
  DATA          fname             TYPE            fieldname .
  DATA          number(2)         TYPE            n.
  DATA          lv_number         TYPE            i .
  DATA          operation         TYPE            rcf_opera .
  DATA ls_return TYPE bapiret2.
  DATA l_message_par1 TYPE symsgv .


  IF is_address EQ true .
    DESCRIBE TABLE me->addressdata LINES lv_number .
    READ TABLE me->infotype_record WITH KEY subty = me->address
                          INTO ls_p5110 .
    IF NOT ( lv_number >  10 ) .
*     Record to be inserted in infotype
      CLEAR number.
      lv_update_needed = false.
      DO 10 TIMES .
        number = number + 1 .
        READ TABLE me->addressdata INDEX number INTO
                                           ls_addressdata_bp.
        IF sy-subrc NE 0 .
          CLEAR ls_addressdata_bp .
        ENDIF .

        CONCATENATE 'ls_p5110-CHANNEL' number INTO fname .  "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_channelnn> .
        IF <ls_p5110_channelnn> <> ls_addressdata_bp-channel.
          <ls_p5110_channelnn> = ls_addressdata_bp-channel .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-ADDRNUMBER' number INTO fname . "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_addrnrnn> .
        IF <ls_p5110_addrnrnn> <> ls_addressdata_bp-addrnr.
          <ls_p5110_addrnrnn> = ls_addressdata_bp-addrnr .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-AVAILABLE' number INTO fname . "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_availablenn> .
        IF <ls_p5110_availablenn> <> ls_addressdata_bp-availability .
          <ls_p5110_availablenn> = ls_addressdata_bp-availability .
          lv_update_needed = true.
        ENDIF.
      ENDDO .

      IF lv_update_needed = true.                          "MELN1791915
        READ TABLE me->infotype_record WITH KEY subty = me->address
                            TRANSPORTING NO FIELDS .
        IF sy-subrc NE 0 .
          operation = insert_operation .
        ELSEIF lv_number = 0 .
          operation = delete_operation  .
        ELSE .
          operation = modify_operation .
        ENDIF .
        CALL METHOD me->update_data_to_infotype
          EXPORTING
            subtype         = me->address
            operation       = operation
            external_commit = external_commit               "WAR1540502
          IMPORTING
            return          = return
          CHANGING
            infty_record    = ls_p5110.
      ENDIF.
    ELSE .
*     Raise exception for record overflow in the infotype
      l_message_par1 = 'ADDRESS' .
      IF 1 = 2.
        MESSAGE e015(hrrcf0002) WITH l_message_par1.
*     You cannot add more than 10 &1 data
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = 015
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.
    ENDIF .
  ENDIF .

* Update other communication types to Infotype
* Update Telefondata
  CLEAR lv_number .
  IF is_telefon EQ true .
    DESCRIBE TABLE me->telefondata LINES lv_number .
    READ TABLE me->infotype_record WITH KEY subty = me->telefon
                          INTO ls_p5110 .
    IF NOT ( lv_number >  10 ) .
*     Record to be inserted in infotype
      CLEAR number .
      lv_update_needed = false.
      DO 10 TIMES .
        number = number + 1 .
        READ TABLE me->telefondata INDEX number INTO
                                           ls_telefondata_bp.
        IF sy-subrc NE 0 .
          CLEAR ls_telefondata_bp .
        ENDIF .

        CONCATENATE 'ls_p5110-CHANNEL' number INTO fname .  "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_channelnn> .
        IF <ls_p5110_channelnn> <> ls_telefondata_bp-channel .
          <ls_p5110_channelnn> = ls_telefondata_bp-channel .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-CONSNUMBER' number INTO fname . "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_cons_numbernn> .
        IF <ls_p5110_cons_numbernn> <> ls_telefondata_bp-consnumber .
          <ls_p5110_cons_numbernn> = ls_telefondata_bp-consnumber .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-AVAILABLE' number INTO fname. "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_availablenn> .
        IF <ls_p5110_availablenn> = ls_telefondata_bp-availability .
          <ls_p5110_availablenn> = ls_telefondata_bp-availability .
          lv_update_needed = true.
        ENDIF.
      ENDDO .

      IF lv_update_needed = true.                          "MELN1791915
        READ TABLE me->infotype_record WITH KEY subty = me->telefon
                            TRANSPORTING NO FIELDS .
        IF sy-subrc NE 0 .
          operation = insert_operation .
        ELSEIF lv_number = 0 .
          operation = delete_operation  .
        ELSE .
          operation = modify_operation .
        ENDIF .

        CALL METHOD me->update_data_to_infotype
          EXPORTING
            subtype         = me->telefon
            operation       = operation
            external_commit = external_commit               "WAR1540502
          IMPORTING
            return          = return
          CHANGING
            infty_record    = ls_p5110.
      ENDIF.
    ELSE .
*     Raise exception for record overflow in the infotype
      l_message_par1 = 'TELEPHONE' .
      IF 1 = 2.
        MESSAGE e015(hrrcf0002) WITH l_message_par1.
*     You cannot add more than 10 &1 data
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = 015
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.

    ENDIF .
  ENDIF .

* Update Faxdata to Infotype
  CLEAR lv_number .
  IF is_fax EQ true .
    DESCRIBE TABLE me->faxdata LINES lv_number .
    READ TABLE me->infotype_record WITH KEY subty = me->fax
                          INTO ls_p5110 .
    IF NOT ( lv_number >  10 ) .
*     Record to be inserted in infotype
      CLEAR number .
      lv_update_needed = false.
      DO 10 TIMES .
        number = number + 1 .
        READ TABLE me->faxdata INDEX number INTO
                                           ls_faxdata_bp.
        IF sy-subrc NE 0 .
          CLEAR ls_faxdata_bp .
        ENDIF .

        CONCATENATE 'ls_p5110-CHANNEL' number INTO fname.   "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_channelnn> .
        IF <ls_p5110_channelnn> <> ls_faxdata_bp-channel .
          <ls_p5110_channelnn> = ls_faxdata_bp-channel .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-CONSNUMBER' number INTO fname. "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_cons_numbernn> .
        IF <ls_p5110_cons_numbernn> <> ls_faxdata_bp-consnumber .
          <ls_p5110_cons_numbernn> = ls_faxdata_bp-consnumber .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-AVAILABLE' number INTO fname . "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_availablenn> .
        IF <ls_p5110_availablenn> <> ls_faxdata_bp-availability .
          <ls_p5110_availablenn> = ls_faxdata_bp-availability .
          lv_update_needed = true.
        ENDIF.
      ENDDO .

      IF lv_update_needed = true.                          "MELN1791915
        READ TABLE me->infotype_record WITH KEY subty = me->fax
                            TRANSPORTING NO FIELDS .
        IF sy-subrc NE 0 .
          operation = insert_operation .
        ELSEIF lv_number = 0 .
          operation = delete_operation  .
        ELSE .
          operation = modify_operation .
        ENDIF .

        CALL METHOD me->update_data_to_infotype
          EXPORTING
            subtype         = me->fax
            operation       = operation
            external_commit = external_commit               "WAR1540502
          IMPORTING
            return          = return
          CHANGING
            infty_record    = ls_p5110.
      ENDIF.
    ELSE .
*     Raise exception for record overflow in the infotype
      l_message_par1 = 'FAX' .
      IF 1 = 2.
        MESSAGE e015(hrrcf0002) WITH l_message_par1.
*     You cannot add more than 10 &1 data
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = 015
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.

    ENDIF .
  ENDIF .

* Update Emaildata to Infotype
  CLEAR lv_number .
  IF is_email EQ true .
    DESCRIBE TABLE me->e_maildata LINES lv_number .
    READ TABLE me->infotype_record WITH KEY subty = me->email
                          INTO ls_p5110 .
    IF NOT ( lv_number >  10 ) .
*     Record to be inserted in infotype
      CLEAR number .
      lv_update_needed = false.
      DO 10 TIMES .
        number = number + 1 .
        READ TABLE me->e_maildata INDEX number INTO
                                           ls_emaildata_bp.
        IF sy-subrc NE 0 .
          CLEAR ls_emaildata_bp .
        ENDIF .

        CONCATENATE 'ls_p5110-CHANNEL' number INTO fname .  "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_channelnn> .
        IF <ls_p5110_channelnn> = ls_emaildata_bp-channel .
          <ls_p5110_channelnn> = ls_emaildata_bp-channel .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-CONSNUMBER' number INTO fname. "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_cons_numbernn> .
        IF <ls_p5110_cons_numbernn> <> ls_emaildata_bp-consnumber .
          <ls_p5110_cons_numbernn> = ls_emaildata_bp-consnumber .
          lv_update_needed = true.
        ENDIF.

        CONCATENATE 'ls_p5110-AVAILABLE' number INTO fname . "#EC NOTEXT
        ASSIGN (fname) TO <ls_p5110_availablenn> .
        IF <ls_p5110_availablenn> <> ls_emaildata_bp-availability .
          <ls_p5110_availablenn> = ls_emaildata_bp-availability .
          lv_update_needed = true.
        ENDIF.
      ENDDO .

      IF lv_update_needed = true.                          "MELN1791915
        READ TABLE me->infotype_record WITH KEY subty = me->email
                            TRANSPORTING NO FIELDS .
        IF sy-subrc NE 0 .
          operation = insert_operation .
        ELSEIF lv_number = 0 .
          operation = delete_operation  .
        ELSE .
          operation = modify_operation .
        ENDIF .

        CALL METHOD me->update_data_to_infotype
          EXPORTING
            subtype         = me->email
            operation       = operation
            external_commit = external_commit               "WAR1540502
          IMPORTING
            return          = return
          CHANGING
            infty_record    = ls_p5110.
      ENDIF.
    ELSE .
*     Raise exception for record overflow in the infotype
      l_message_par1 = 'E-MAIL' .
      IF 1 = 2.
        MESSAGE e015(hrrcf0002) WITH l_message_par1.
*     You cannot add more than 10 &1 data
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = 015
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.

    ENDIF .
  ENDIF .

ENDMETHOD.                    "PUT_DATA_TO_INFTY_STRUCTURE


METHOD register_instance .

  DATA instance_directory_line TYPE instance_directory_line.

  instance_directory_line-businesspartner = businesspartner .
  instance_directory_line-instance  = instance.

  INSERT instance_directory_line INTO TABLE instance_directory.

ENDMETHOD.                    "REGISTER_INSTANCE


METHOD set_address_attributes_int .

  DATA lo_exception   TYPE REF TO   cx_hrrcf .

  DATA lt_addrnum     TYPE TABLE OF bapibus1006_addresses_int .
  DATA lt_addressdata TYPE TABLE OF rcf_s_addressdata_bp .

  DATA ls_p5110       TYPE          p5110 .
  DATA ls_addrnum     TYPE          bapibus1006_addresses_int .
  DATA ls_addressdata TYPE          rcf_s_addressdata_bp .
  DATA ls_address     TYPE          bapibus1006_address .
  DATA infty_struc    TYPE          address_struc .
  DATA ls_return      TYPE          bapiret2.

  DATA addressguid    TYPE          but020-guid .

  CHECK pt_5110 IS NOT INITIAL .

  READ TABLE pt_5110 WITH KEY subty = me->address
                           TRANSPORTING NO FIELDS .
  IF sy-subrc EQ 0 .
*   Get all the address numbers from the Businesspartner
    CALL FUNCTION 'BUPA_ADDRESSES_GET'
      EXPORTING
        iv_partner   = me->businesspartner
      TABLES
        et_addresses = lt_addrnum
        et_return    = return.
    DELETE return WHERE type NE 'E' AND type NE 'A'.     "No W or S
    IF NOT return IS INITIAL .
*     fatal error
      READ TABLE return WITH KEY type = 'A'
                                INTO ls_return.
      IF sy-subrc EQ 0 .
        RAISE EXCEPTION TYPE cx_hrrcf_address_service
          EXPORTING
            textid =
               cx_hrrcf_address_service=>cx_hrrcf_address_service
            message_type = ls_return-type
            message_class = ls_return-id
            message_number = ls_return-number
            message_par1 = ls_return-message_v1
            message_par2 = ls_return-message_v2
            message_par3 = ls_return-message_v3
            message_par4 = ls_return-message_v4.
      ENDIF .
*     User error
      READ TABLE return WITH KEY type = 'E'
                            TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        EXIT.  "change control flow
      ENDIF.
    ENDIF .

    LOOP AT lt_addrnum INTO ls_addrnum .
      CLEAR ls_address .
*     For every address number get the addressdata
      MOVE ls_addrnum-addrguid TO addressguid .
      CALL FUNCTION 'BAPI_BUPA_ADDRESS_GETDETAIL'
        EXPORTING
          businesspartner = me->businesspartner
          addressguid     = addressguid
        IMPORTING
          addressdata     = ls_address
        TABLES
          return          = return.
      DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
      IF NOT return IS INITIAL .
*       fatal error
        READ TABLE return WITH KEY type = 'A'
                                          INTO ls_return.
        IF sy-subrc EQ 0 .
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid =
               cx_hrrcf_address_service=>cx_hrrcf_address_service
              message_type = ls_return-type
              message_class = ls_return-id
              message_number = ls_return-number
              message_par1 = ls_return-message_v1
              message_par2 = ls_return-message_v2
              message_par3 = ls_return-message_v3
              message_par4 = ls_return-message_v4.
        ENDIF .
*       User error
        READ TABLE return WITH KEY type = 'E'
                             TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          EXIT.  "change control flow
        ENDIF.
      ENDIF .
      READ TABLE pt_5110 INTO ls_p5110 WITH KEY subty =
                                            me->address .
      MOVE ls_addrnum-addrnumber TO ls_addressdata-addrnr .
      MOVE-CORRESPONDING ls_address TO ls_addressdata .
      CLEAR infty_struc .
      DO 10 TIMES : VARYING infty_struc-addrnr
                    FROM ls_p5110-addrnumber01 NEXT
                    ls_p5110-addrnumber02
                    VARYING infty_struc-channel
                    FROM ls_p5110-channel01 NEXT
                    ls_p5110-channel02
                    VARYING infty_struc-cons_number
                    FROM ls_p5110-consnumber01 NEXT
                    ls_p5110-consnumber02
                    VARYING infty_struc-available
                    FROM ls_p5110-available01 NEXT
                    ls_p5110-available02 .
        IF ls_addrnum-addrnumber EQ infty_struc-addrnr .
          MOVE infty_struc-channel TO ls_addressdata-channel .
          MOVE infty_struc-available TO
                    ls_addressdata-availability .
          APPEND ls_addressdata TO lt_addressdata .
          EXIT .
        ENDIF .
      ENDDO .
    ENDLOOP .
*   move data to the attributes
    MOVE lt_addressdata TO me->addressdata .
  ENDIF .

ENDMETHOD.


METHOD set_attributes_internal .

  DATA lo_exception TYPE REF TO cx_hrrcf .

*  CLEAR return .

* Get existing records from Infotype
  TRY.
      CALL METHOD me->get_records_from_infotype .

*     Check if attributes have to be set
      CHECK me->infotype_record IS NOT INITIAL.

*     Set address attributes
      CALL METHOD me->set_address_attributes_int
        EXPORTING
          pt_5110 = me->infotype_record
        IMPORTING
          return  = return.

*      CHECK return IS INITIAL .

*     Set attributes for other communication types
      CALL METHOD me->set_comm_attributes_int
        EXPORTING
          pt_5110 = me->infotype_record
        IMPORTING
          return  = return.
    CATCH cx_hrrcf INTO lo_exception .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.                    "SET_ATTRIBUTES


METHOD set_comm_attributes_int .

  DATA lt_telefondata TYPE TABLE OF rcf_s_telefondata_bp .
  DATA ls_telefondata TYPE          rcf_s_telefondata_bp .
  DATA lt_telefon     TYPE TABLE OF bapiadtel .
  DATA ls_telefon     TYPE          bapiadtel .

  DATA lt_faxdata     TYPE TABLE OF rcf_s_faxdata_bp .
  DATA ls_faxdata     TYPE          rcf_s_faxdata_bp .
  DATA lt_fax         TYPE TABLE OF bapiadfax .
  DATA ls_fax         TYPE          bapiadfax .

  DATA lt_emaildata   TYPE TABLE OF rcf_s_emaildata_bp .
  DATA ls_emaildata   TYPE          rcf_s_emaildata_bp .
  DATA lt_email       TYPE TABLE OF bapiadsmtp .
  DATA ls_email       TYPE          bapiadsmtp .
  DATA lt_comrem      TYPE TABLE OF bapicomrem .
  DATA ls_comrem      TYPE          bapicomrem .
  DATA ls_p5110       TYPE          p5110 .

  DATA ls_return      TYPE          bapiret2.
  DATA lt_return      TYPE          bapirettab .

  DATA infty_struc    TYPE          address_struc .
  DATA lo_exception   TYPE REF TO   cx_hrrcf .

* Process other communication types
  CHECK pt_5110 IS NOT INITIAL .

  CALL FUNCTION 'BAPI_BUPA_CENTRAL_GETDETAIL'
    EXPORTING
      businesspartner              = me->businesspartner
    TABLES
      telefondatanonaddress        = lt_telefon
      faxdatanonaddress            = lt_fax
      e_maildatanonaddress         = lt_email
      communicationnotesnonaddress = lt_comrem
      return                       = lt_return.

  APPEND LINES OF lt_return TO return .
  MOVE lt_email TO me->emaildata_all.   "All Email IDs associated with the BP are stored in this new attribute: Needed for Private Email/Business Email differentiation

  DELETE lt_return WHERE type NE 'E' AND type NE 'A'.     "No W or S
  IF NOT lt_return IS INITIAL.
*   fatal error
    READ TABLE lt_return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type   = ls_return-type
          message_class  = ls_return-id
          message_number = ls_return-number
          message_par1   = ls_return-message_v1
          message_par2   = ls_return-message_v2
          message_par3   = ls_return-message_v3
          message_par4   = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE lt_return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

* Process telefon data
  READ TABLE pt_5110 INTO ls_p5110 WITH KEY subty = me->telefon .
  IF sy-subrc EQ 0 .
    LOOP AT lt_telefon INTO ls_telefon .
      MOVE-CORRESPONDING ls_telefon TO ls_telefondata .
      CLEAR infty_struc .
      DO 10 TIMES : VARYING infty_struc-addrnr
                    FROM ls_p5110-addrnumber01 NEXT
                    ls_p5110-addrnumber02
                    VARYING infty_struc-channel
                    FROM ls_p5110-channel01 NEXT
                    ls_p5110-channel02
                    VARYING infty_struc-cons_number
                    FROM ls_p5110-consnumber01 NEXT
                    ls_p5110-consnumber02
                    VARYING infty_struc-available
                    FROM ls_p5110-available01 NEXT
                    ls_p5110-available02 .
        IF ls_telefon-consnumber EQ infty_struc-cons_number .
          MOVE infty_struc-channel TO ls_telefondata-channel .
          MOVE infty_struc-available TO ls_telefondata-availability .
          APPEND ls_telefondata TO lt_telefondata .
          EXIT .
        ENDIF .
      ENDDO .
    ENDLOOP .
    MOVE lt_telefondata TO me->telefondata .
  ENDIF .

* Process Fax data
  READ TABLE pt_5110 INTO ls_p5110 WITH KEY subty = me->fax .
  IF sy-subrc EQ  0 .
    LOOP AT lt_fax INTO ls_fax .
      MOVE-CORRESPONDING ls_fax TO ls_faxdata .
      CLEAR infty_struc .
      DO 10 TIMES : VARYING infty_struc-addrnr
                    FROM ls_p5110-addrnumber01 NEXT
                    ls_p5110-addrnumber02
                    VARYING infty_struc-channel
                    FROM ls_p5110-channel01 NEXT
                    ls_p5110-channel02
                    VARYING infty_struc-cons_number
                    FROM ls_p5110-consnumber01 NEXT
                    ls_p5110-consnumber02
                    VARYING infty_struc-available
                    FROM ls_p5110-available01 NEXT
                    ls_p5110-available02 .
        IF ls_fax-consnumber EQ infty_struc-cons_number .
          MOVE infty_struc-channel TO ls_faxdata-channel .
          MOVE infty_struc-available TO ls_faxdata-availability .
          APPEND ls_faxdata TO lt_faxdata .
          EXIT .
        ENDIF .
      ENDDO .
    ENDLOOP .
    MOVE lt_faxdata TO me->faxdata .
  ENDIF .

* Process e-mail data
  READ TABLE pt_5110 INTO ls_p5110 WITH KEY subty = me->email .
  IF sy-subrc EQ 0 .
    LOOP AT lt_email INTO ls_email .
      MOVE-CORRESPONDING ls_email TO ls_emaildata .
      CLEAR infty_struc .
*     Communication notes addition to be implimented
      DO 10 TIMES : VARYING infty_struc-addrnr
                    FROM ls_p5110-addrnumber01 NEXT
                    ls_p5110-addrnumber02
                    VARYING infty_struc-channel
                    FROM ls_p5110-channel01 NEXT
                    ls_p5110-channel02
                    VARYING infty_struc-cons_number
                    FROM ls_p5110-consnumber01 NEXT
                    ls_p5110-consnumber02
                    VARYING infty_struc-available
                    FROM ls_p5110-available01 NEXT
                    ls_p5110-available02 .

        IF infty_struc-cons_number IS NOT INITIAL.
          IF ls_email-consnumber EQ infty_struc-cons_number  AND ls_email-std_no = 'X'.
            MOVE infty_struc-channel TO ls_emaildata-channel .
            MOVE infty_struc-available TO ls_emaildata-availability .
            APPEND ls_emaildata TO lt_emaildata .
            EXIT .
            "check if the email in the business partner has been changed/updated/default changed
          ELSEIF ls_email-consnumber NE infty_struc-cons_number AND ls_email-std_no = 'X'.
            MOVE infty_struc-channel TO ls_emaildata-channel .                                        "note 1334279
            MOVE infty_struc-available TO ls_emaildata-availability .
             APPEND ls_emaildata TO lt_emaildata .
          ENDIF .
       ENDIF.

      ENDDO .
    ENDLOOP .
    MOVE lt_emaildata TO me->e_maildata .
  ENDIF .

ENDMETHOD.


METHOD set_person_number_int .

  DATA ls_data_info TYPE bapibus1006_central_info .
  DATA ls_return TYPE bapiret2 .
  DATA lo_exception TYPE REF TO cx_hrrcf.

  CALL FUNCTION 'BUPA_CENTRAL_GET_DETAIL'
    EXPORTING
      iv_partner   = me->businesspartner
    IMPORTING
      es_data_info = ls_data_info
    TABLES
      et_return    = return.

  DELETE return WHERE type NE 'E' AND type NE 'A'.   "No W or S
  IF NOT return IS INITIAL.
*     fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid =
             cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*     User error
    READ TABLE return WITH KEY type = 'E'
                          TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

  person_number = ls_data_info-pers_no .

ENDMETHOD.


METHOD update_address_data .

  DATA ls_return         TYPE           bapiret2 .
  DATA lt_return         TYPE TABLE OF  bapiret2 .

  DATA lv_addressguid       TYPE        but020-guid .
  DATA lv_addr_guid      TYPE           bu_address_guid .
  DATA lo_exception      TYPE REF TO    cx_hrrcf .

  DATA lt_addresses      TYPE TABLE OF  bapibus1006_addresses_int .
  DATA ls_addresses      TYPE           bapibus1006_addresses_int .
  DATA ls_addressdata    TYPE           bapibus1006_address .
  DATA ls_address_x      TYPE           bapibus1006_address_x.

  DATA l_message_par1    TYPE symsgv.

  CALL FUNCTION 'BUPA_ADDRESSES_GET'
    EXPORTING
      iv_partner   = me->businesspartner
    TABLES
      et_addresses = lt_addresses
      et_return    = return.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                      TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

  DELETE lt_addresses WHERE addrnumber NE addressdata-addrnr .
  READ TABLE lt_addresses INDEX 1 INTO ls_addresses  .
  ls_address_x-standardaddress                = true .
  ls_address_x-c_o_name                       = true.
  ls_address_x-city                           = true.
  ls_address_x-district                       = true.
  ls_address_x-regiogroup                     = true.
  ls_address_x-postl_cod1                     = true.
  ls_address_x-postl_cod2                     = true.
  ls_address_x-postl_cod3                     = true.
  ls_address_x-pcode1_ext                     = true.
  ls_address_x-pcode2_ext                     = true.
  ls_address_x-pcode3_ext                     = true.
  ls_address_x-po_box                         = true.
  ls_address_x-po_w_o_no                      = true.
  ls_address_x-po_box_cit                     = true.
  ls_address_x-po_box_reg                     = true.
  ls_address_x-pobox_ctry                     = true.
  ls_address_x-po_ctryiso                     = true.
  ls_address_x-street                         = true.
  ls_address_x-str_abbr                       = true.
  ls_address_x-house_no                       = true.
  ls_address_x-house_no2                      = true.
  ls_address_x-house_no3                      = true.
  ls_address_x-str_suppl1                     = true.
  ls_address_x-str_suppl2                     = true.
  ls_address_x-str_suppl3                     = true.
  ls_address_x-location                       = true.
  ls_address_x-building                       = true.
  ls_address_x-floor                          = true.
  ls_address_x-room_no                        = true.
  ls_address_x-country                        = true.
  ls_address_x-countryiso                     = true.
  ls_address_x-region                         = true.
  ls_address_x-time_zone                      = true.
  ls_address_x-taxjurcode                     = true.
  ls_address_x-home_city                      = true.
  ls_address_x-transpzone                     = true.
  ls_address_x-langu                          = true.
  ls_address_x-langu_iso                      = true.
  ls_address_x-comm_type                      = true.
  ls_address_x-extaddressnumber               = true.

  MOVE-CORRESPONDING addressdata TO ls_addressdata .
  MOVE ls_addresses-addrguid TO lv_addressguid .

  CALL FUNCTION 'ADDR_ACCEPT_REG_DATA_ERROR'         "PESK005282
    EXPORTING                                        "PESK005282
      accept_error = 'X'.                            "PESK005282

  IF cl_hrrcf_simple_main_object=>luw_mode EQ true.        "MELN1825353

    lv_addr_guid = lv_addressguid.                         "MELN1726370
    CALL FUNCTION 'BUPA_ADDRESS_CHANGE'
      EXPORTING
        iv_partner                = me->businesspartner
        iv_addrguid               = lv_addr_guid
        is_address                = ls_addressdata
        is_address_x              = ls_address_x
        iv_duplicate_message_type = '-'
        iv_accept_error           = 'X'
        iv_x_save                 = space
      TABLES
        et_return                 = return.

    lv_addressguid = lv_addr_guid.

  ELSE.
    CALL FUNCTION 'BAPI_BUPA_ADDRESS_CHANGE'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
      addressdata     = ls_addressdata
      addressdata_x   = ls_address_x
      duplicate_message_type = '-'               "WAR1540502
      accept_error    = 'X'
    TABLES
      return          = return.
  ENDIF.

*--- do not care on any business partner lock -------------------------
  IF NOT me->businesspartner IS INITIAL.
    CALL FUNCTION 'BUPA_DEQUEUE'
      EXPORTING
        iv_partner = me->businesspartner
      TABLES
        et_return  = lt_return.
    CLEAR lt_return.
  ENDIF.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_address_update_failure
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                      TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
*  Special handling required for error messages from tax component: as per note 1150603
      READ TABLE return WITH KEY id = 'TAX_TXJCD' number = 100 INTO ls_return.
      IF sy-subrc = 0.
        CLEAR: ls_return-id, ls_return-number, ls_return-message.
*  Use E-Rec Application specific Error message for the scenario
        ls_return-id = 'HRRCF0002'.
        ls_return-number = 211.
        MODIFY return INDEX sy-tabix FROM ls_return TRANSPORTING id number message.
      ENDIF.

      READ TABLE return WITH KEY id = 'TAX_TXJCD' number = 101 INTO ls_return.
      IF sy-subrc = 0.
        CLEAR: ls_return-id, ls_return-number, ls_return-message.
*  Use E-Rec Application specific Error message for the scenario
        ls_return-id = 'HRRCF0002'.
        ls_return-number = 210.
        MODIFY return INDEX sy-tabix FROM ls_return TRANSPORTING id number message.
      ENDIF.

      EXIT.  "change control flow
    ENDIF.
  ENDIF .

  IF NOT external_commit EQ true.
*  XDP
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
*  XDP
  ENDIF.

  CLEAR ls_addressdata .
  MOVE ls_addresses-addrguid TO lv_addressguid .
  CALL FUNCTION 'BAPI_BUPA_ADDRESS_GETDETAIL'
    EXPORTING
      businesspartner = me->businesspartner
      addressguid     = lv_addressguid
    IMPORTING
      addressdata     = ls_addressdata
    TABLES
      return          = return.

  DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
  IF NOT return IS INITIAL.
*   fatal error
    READ TABLE return WITH KEY type = 'A'
                              INTO ls_return.
    IF sy-subrc EQ 0 .
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid         = cx_hrrcf_address_service=>cx_hrrcf_address_service
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF .
*   User error
    READ TABLE return WITH KEY type = 'E'
                      TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      EXIT.  "change control flow
    ENDIF.
  ENDIF .

  MOVE-CORRESPONDING ls_addressdata TO addressdata .
  READ TABLE me->addressdata WITH KEY addrnr = addressdata-addrnr
                             TRANSPORTING NO FIELDS.
  IF sy-subrc EQ 0 .
    MODIFY me->addressdata INDEX sy-tabix FROM addressdata .
  ELSE .
*   Raise exception
    l_message_par1 = addressdata-addrnr .
    IF 1 = 2.
      MESSAGE e100(hrrcf0001) WITH l_message_par1.
*     No entry exists in the businesspartner with address number &1
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_address_service
      EXPORTING
        textid = cx_hrrcf_address_service=>cx_wrong_address_number
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '100'
        message_par1   = l_message_par1 .
  ENDIF .
  TRY.
      CALL METHOD me->put_data_to_infty_structure
        EXPORTING
          is_address      = true
          external_commit = external_commit      "WAR1540502
        IMPORTING
          return          = return.
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
         EXPORTING
          textid   = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.


METHOD update_address_from_bupa.
  DATA:
    lv_sync        TYPE          boole_d,
    lv_del_indx    TYPE          sytabix,
    ls_addrnum     TYPE          bapibus1006_addresses_int,
    lt_addrnum     TYPE TABLE OF bapibus1006_addresses_int,
    lt_return      TYPE          bapirettab,
    lo_exception   TYPE REF TO   cx_hrrcf,
    ls_addressdata TYPE          rcf_s_addressdata_bp.                         "N_2537685
*
  CALL FUNCTION 'BUPA_ADDRESSES_GET'
   EXPORTING
     iv_partner                     = me->businesspartner
*     IV_PARTNER_GUID                =
*     IV_ADDRESS_TYPE                =
*     IV_OPERATION                   =
*     IV_VALID_DATE                  = SY-DATLO
*   IMPORTING
*     EV_STANDARD_ADDRNUMBER         =
*     EV_STANDARD_ADDRGUID           =
*     EV_STANDARD_USED_INSTEAD       =
   TABLES
     et_addresses                   = lt_addrnum
*     ET_ADDRESSES_ALL               =
     et_return                      = lt_return.
*
* Filter E-message regarding non-existing address
  DELETE lt_return WHERE
    type   EQ 'E'  AND
    id     EQ 'R1' AND
    number EQ '612'.
*
  DELETE lt_return WHERE type NE 'E' AND type NE 'A'.     "No W or S
  IF NOT lt_return IS INITIAL.
    et_return = lt_return.
    RETURN.
  ENDIF.
*
  lv_sync = false.
*
  IF lt_addrnum IS INITIAL.
    IF NOT me->addressdata IS INITIAL.
      CLEAR me->addressdata.
      lv_sync = true.
    ENDIF.
  ELSE.
*
* Fill attribute table new
    CLEAR me->addressdata.
    lv_sync = true.
*
* Get standard address
    READ TABLE lt_addrnum INTO ls_addrnum
      WITH KEY standardaddress = 'X'.
    IF sy-subrc IS INITIAL.
      lv_del_indx    = sy-tabix.
*
      TRY.
          CALL METHOD me->process_addrnum
            EXPORTING
              ps_addrnum = ls_addrnum
            IMPORTING
              pt_return  = et_return.
          IF NOT et_return IS INITIAL.
            EXIT.
          ENDIF.
*
        CATCH cx_hrrcf INTO lo_exception.
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
             EXPORTING
               textid   =
                    cx_hrrcf_address_service=>cx_hrrcf_address_service
               previous = lo_exception .
      ENDTRY.
*
* Standard address already processed --> remove from table.
      DELETE lt_addrnum INDEX lv_del_indx.
*
    ENDIF.
*
* Process additional addresses
    LOOP AT lt_addrnum INTO ls_addrnum.
*
      TRY.
          CALL METHOD me->process_addrnum
            EXPORTING
              ps_addrnum = ls_addrnum
            IMPORTING
              pt_return  = et_return.
          IF NOT et_return IS INITIAL.
            EXIT.
          ENDIF.
*
        CATCH cx_hrrcf INTO lo_exception.
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
             EXPORTING
               textid   =
                     cx_hrrcf_address_service=>cx_hrrcf_address_service
               previous = lo_exception .
      ENDTRY.
*
    ENDLOOP.
*
  ENDIF.
* Start N_2537685
* Map Location field to str_suppl3 field in E-rec
  LOOP AT me->addressdata INTO ls_addressdata.
    ls_addressdata-str_suppl3 = ls_addressdata-location.

*    CLEAR ls_addressdata-location.              N 2749505

    me->update_address_data(
      EXPORTING
        external_commit = iv_ext_commit
      IMPORTING
        return          = et_return
      CHANGING
        addressdata     = ls_addressdata
    ).

   IF NOT et_return IS INITIAL.
       EXIT.
   ENDIF.

  ENDLOOP.
* End N_2537685
*
* Syncronize buffer (me->addressdata) and DB-table HRP5110
  IF lv_sync = true.
    TRY.
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_address = true
          IMPORTING
            return     = lt_return.
*
        DELETE lt_return WHERE type NE 'E' AND type NE 'A'. "No W or S
        IF NOT lt_return IS INITIAL.
          et_return = lt_return.
          RETURN.
        ENDIF.
*
      CATCH cx_hrrcf INTO lo_exception.
        RAISE EXCEPTION TYPE cx_hrrcf_address_service
           EXPORTING
            textid   =
cx_hrrcf_address_service=>cx_hrrcf_address_service
            previous = lo_exception .
    ENDTRY.
  ENDIF.
*
ENDMETHOD.


METHOD update_communication_data .

  DATA lt_telefondata    TYPE  TABLE OF bapiadtel .
  DATA ls_telefondata    TYPE           rcf_s_telefondata_bp .
  DATA ls_telefondata_bp TYPE           bapiadtel .

  DATA lt_faxdata        TYPE  TABLE OF bapiadfax .
  DATA ls_faxdata_bp     TYPE           bapiadfax .
  DATA ls_faxdata        TYPE           rcf_s_faxdata_bp .

  DATA lt_emaildata      TYPE  TABLE OF bapiadsmtp .
  DATA ls_emaildata_bp   TYPE           bapiadsmtp .
  DATA ls_emaildata      TYPE           rcf_s_emaildata_bp .

  DATA lt_telefondata_x  TYPE TABLE OF  bapiadtelx.
  DATA lt_faxdata_x      TYPE TABLE OF  bapiadfaxx.
  DATA lt_emaildata_x    TYPE TABLE OF  bapiadsmtx.

  DATA ls_telefondata_x  TYPE           bapiadtelx.
  DATA ls_faxdata_x      TYPE           bapiadfaxx.
  DATA ls_e_maildata_x   TYPE           bapiadsmtx.

  DATA ls_return         TYPE           bapiret2 .
  DATA lt_return         TYPE TABLE OF  bapiret2 .

  DATA lo_exception      TYPE REF TO    cx_hrrcf .

  DATA l_message_par2    TYPE           symsgv .
  DATA l_message_par1    TYPE           symsgv .

  DATA ls_address        TYPE           bapiaddr3 .
  DATA ls_address_x      TYPE           bapiaddr3x .

  DATA ls_return_warning TYPE bapiret2 .

  TRY .
*     Update Telefondata
      IF NOT telefondata IS INITIAL .
        READ TABLE me->telefondata WITH KEY consnumber =
                                        telefondata-consnumber
                                        TRANSPORTING NO FIELDS.
        IF sy-subrc EQ 0 .
          MODIFY me->telefondata INDEX sy-tabix FROM telefondata .
        ELSEIF me->telefondata IS INITIAL .
          APPEND telefondata TO me->telefondata .
        ELSE .
*         Raise exception
          l_message_par1 = 'TELEPHONE' .
          l_message_par2 = telefondata-consnumber .
          IF 1 = 2.
            MESSAGE e101(hrrcf0001) WITH l_message_par1 l_message_par2.
*           No entry exists communication data &1 with consnumber &2
          ENDIF.
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid = cx_hrrcf_address_service=>cx_wrong_consnumber
              message_type   = 'E'
              message_class  = msgcl_admin
              message_number = '101'
              message_par1   = l_message_par1
              message_par2   = l_message_par2 .
        ENDIF .

        LOOP AT me->telefondata INTO ls_telefondata WHERE
                             consnumber = telefondata-consnumber .
          MOVE-CORRESPONDING ls_telefondata TO ls_telefondata_bp .
          APPEND ls_telefondata_bp TO lt_telefondata .
        ENDLOOP .

        ls_telefondata_x-country                        = true .
        ls_telefondata_x-countryiso                     = true .
        ls_telefondata_x-std_no                         = true.
        ls_telefondata_x-telephone                      = true.
        ls_telefondata_x-extension                      = true.
        ls_telefondata_x-tel_no                         = true.
        ls_telefondata_x-updateflag                     = 'U'. "Update
        "take phone type into update consideration "1492532
        ls_telefondata_x-r_3_user                       = true.

        APPEND ls_telefondata_x TO lt_telefondata_x .
      ENDIF .

*     Update Faxdata
      IF NOT faxdata IS INITIAL .
        READ TABLE me->faxdata WITH KEY consnumber =
                                        faxdata-consnumber
                                        TRANSPORTING NO FIELDS.
        IF sy-subrc EQ 0 .
          MODIFY me->faxdata INDEX sy-tabix FROM faxdata .
        ELSEIF me->faxdata IS INITIAL .
          APPEND faxdata TO me->faxdata .
        ELSE .
*         Raise exception
          l_message_par1 = 'FAX' .
          l_message_par2 = faxdata-consnumber .
          IF 1 = 2.
            MESSAGE e101(hrrcf0001) WITH l_message_par1 l_message_par2.
*           No entry exists communication data &1 with consnumber &2
          ENDIF.
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid = cx_hrrcf_address_service=>cx_wrong_consnumber
              message_type   = 'E'
              message_class  = msgcl_admin
              message_number = '101'
              message_par1   = l_message_par1
              message_par2   = l_message_par2 .
        ENDIF .
        LOOP AT me->faxdata INTO ls_faxdata WHERE consnumber =
                                             faxdata-consnumber .
          MOVE-CORRESPONDING ls_faxdata TO ls_faxdata_bp .
          APPEND ls_faxdata_bp TO lt_faxdata .
        ENDLOOP .

        ls_faxdata_x-country                        = true.
        ls_faxdata_x-countryiso                     = true.
        ls_faxdata_x-std_no                         = true.
        ls_faxdata_x-fax                            = true.
        ls_faxdata_x-extension                      = true.
        ls_faxdata_x-fax_no                         = true.
        ls_faxdata_x-updateflag                     = 'U'.     "Update

        APPEND ls_faxdata_x TO lt_faxdata_x.
      ENDIF .

*     Update Emaildata
      IF NOT emaildata IS INITIAL .
        READ TABLE me->e_maildata WITH KEY consnumber =
                                        emaildata-consnumber
                                        TRANSPORTING NO FIELDS.
        IF sy-subrc EQ 0 .
          MODIFY me->e_maildata INDEX sy-tabix FROM emaildata .
        ELSE.                        "IF me->e_maildata IS INITIAL .
          APPEND emaildata TO me->e_maildata .
*****        ELSE .
******         Raise exception
*****          l_message_par1 = 'E-MAIL' .
*****          l_message_par2 = emaildata-consnumber .
*****          IF 1 = 2.
*****            MESSAGE e101(hrrcf0001) WITH l_message_par1 l_message_par2.
******           No entry exists communication data &1 with consnumber &2
*****          ENDIF.
*****          RAISE EXCEPTION TYPE cx_hrrcf_address_service
*****            EXPORTING
*****              textid = cx_hrrcf_address_service=>cx_wrong_consnumber
*****              message_type   = 'E'
*****              message_class  = msgcl_admin
*****              message_number = '101'
*****              message_par1   = l_message_par1
*****              message_par2   = l_message_par2 .
        ENDIF .

        CLEAR ls_emaildata .
        LOOP AT me->e_maildata INTO ls_emaildata WHERE consnumber =
                                              emaildata-consnumber.
          MOVE-CORRESPONDING ls_emaildata TO ls_emaildata_bp .
          APPEND ls_emaildata_bp TO lt_emaildata .
        ENDLOOP .

        ls_e_maildata_x-std_no                         = true.
        ls_e_maildata_x-e_mail                         = true.
        ls_e_maildata_x-updateflag                     = 'U'. "Update

        APPEND ls_e_maildata_x TO lt_emaildata_x.
      ENDIF .

*     Update to Business partner
      CALL METHOD me->update_comm_data_int
        EXPORTING                                "WAR1540502
          external_commit  = external_commit     "WAR1540502
        CHANGING
          pt_telefondata   = lt_telefondata
          pt_faxdata       = lt_faxdata
          pt_emaildata     = lt_emaildata
          pt_telefondata_x = lt_telefondata_x
          pt_faxdata_x     = lt_faxdata_x
          pt_emaildata_x   = lt_emaildata_x
          pt_return        = return.

      IF NOT external_commit EQ true.
*XDP
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
*XDP
      ENDIF.

*--- do not care on any business partner lock -------------------------
      IF NOT me->businesspartner IS INITIAL.
        CALL FUNCTION 'BUPA_DEQUEUE'
          EXPORTING
            iv_partner = me->businesspartner
          TABLES
            et_return  = lt_return.
        CLEAR lt_return.
      ENDIF.

*Filter out the warning message before delete
      IF 1 = 2.
        MESSAGE w073(am).                                   "#EC *
      ENDIF.

      READ TABLE return INTO ls_return_warning WITH KEY
             type = 'W' id = 'AM' number = '073'.

      DELETE return WHERE type NE 'E' AND type NE 'A'. "No W or S
      IF NOT return IS INITIAL.
*       fatal error
        READ TABLE return WITH KEY type = 'A'
                                  INTO ls_return.
        IF sy-subrc EQ 0 .
          RAISE EXCEPTION TYPE cx_hrrcf_address_service
            EXPORTING
              textid         = cx_hrrcf_address_service=>cx_comm_data_update_failure
              message_type = ls_return-type
              message_class = ls_return-id
              message_number = ls_return-number
              message_par1 = ls_return-message_v1
              message_par2 = ls_return-message_v2
              message_par3 = ls_return-message_v3
              message_par4 = ls_return-message_v4.
        ENDIF .
*       User error
        READ TABLE return WITH KEY type = 'E'
                              TRANSPORTING NO FIELDS.
        IF sy-subrc = 0.
          EXIT.  "change control flow
        ENDIF.
      ENDIF .

*     Put data into Infotype 5110
      IF NOT telefondata IS INITIAL .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_telefon      = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDIF .
*Append the warning message to the return message
      IF NOT ls_return_warning IS INITIAL.
        APPEND ls_return_warning TO return.
      ENDIF.

      IF NOT faxdata IS INITIAL .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_fax          = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDIF .

      IF NOT emaildata IS INITIAL .
        CALL METHOD me->put_data_to_infty_structure
          EXPORTING
            is_email        = true
            external_commit = external_commit    "WAR1540502
          IMPORTING
            return          = return.
      ENDIF .

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY.

ENDMETHOD.


METHOD update_comm_data_int.
** When FM BAPI_BUPA_CENTRAL_CHANGE is called within BAdI of PA30
** BP-change isn't written to DB. So we try to do the same as
** HR-BuPa-synchronization does.

  DATA:
    lt_return TYPE bapirettab.

  IF cl_hrrcf_simple_main_object=>luw_mode EQ true.        "MELN1825353
      CALL FUNCTION 'BUPA_CENTRAL_CHANGE'
       EXPORTING
         iv_partner                      = me->businesspartner
         iv_x_save                       = space
       TABLES
         it_adtel_addr_ind               = pt_telefondata
         it_adfax_addr_ind               = pt_faxdata
         it_adsmtp_addr_ind              = pt_emaildata
         it_adtel_addr_ind_x             = pt_telefondata_x
         it_adfax_addr_ind_x             = pt_faxdata_x
         it_adsmtp_addr_ind_x            = pt_emaildata_x
         et_return                       = lt_return.

  ELSE.  "cl_hrrcf_simple_main_object=>luw_mode = false
    CALL FUNCTION 'BAPI_BUPA_CENTRAL_CHANGE'
      EXPORTING
        businesspartner        = me->businesspartner
      TABLES
        telefondatanonaddress  = pt_telefondata
        faxdatanonaddress      = pt_faxdata
        e_maildatanonaddress   = pt_emaildata
        telefondatanonaddressx = pt_telefondata_x
        faxdatanonaddressx     = pt_faxdata_x
        e_maildatanonaddressx  = pt_emaildata_x
        return                 = lt_return.
  ENDIF.

*  DELETE lt_return WHERE type NE 'E' AND type NE 'A'.    "N2017744

  APPEND LINES OF lt_return TO pt_return.
*
ENDMETHOD.


METHOD update_contact_data .

  DATA: lo_exception      TYPE REF TO    cx_hrrcf,
        lt_return TYPE bapirettab.

  CLEAR return .

  TRY .
*     Update addressdata
      IF NOT addressdata IS INITIAL .
        CALL METHOD me->update_address_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = lt_return
          CHANGING
            addressdata     = addressdata.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .

*     Check for updation of other communication types
      IF ( telefondata IS SUPPLIED ) OR ( faxdata IS SUPPLIED )
                                   OR ( emaildata IS SUPPLIED ) .
        CALL METHOD me->update_communication_data
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = lt_return
          CHANGING
            telefondata     = telefondata
            faxdata         = faxdata
            emaildata       = emaildata.
        APPEND LINES OF lt_return TO return.
        CLEAR lt_return.
      ENDIF .
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_address_service
        EXPORTING
          textid = cx_hrrcf_address_service=>cx_hrrcf_address_service
          previous = lo_exception .
  ENDTRY .


* Update data to businesspartner
  IF NOT external_commit = true.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
  ENDIF.

* Set object attributes
  CALL METHOD me->set_attributes_internal
    IMPORTING
      return = lt_return.
  APPEND LINES OF lt_return TO return.

ENDMETHOD.                    "UPDATE_CONTACT_DATA


METHOD update_data_to_infotype .

  DATA lo_exception TYPE REF TO cx_hrrcf .
  DATA ls_p5110 TYPE p5110 .

  MOVE infty_record TO ls_p5110 .

    TRY.
        IF operation = insert_operation .
          MOVE subtype TO ls_p5110-subty .
          MOVE sy-datum TO ls_p5110-begda .
          MOVE high_date TO ls_p5110-endda .
          CALL METHOD hrrcf_contact_rules->insert_record
            EXPORTING
              check_only      = space
              external_commit = external_commit  "WAR1540502
            IMPORTING
              return          = return
            CHANGING
              infotype_record = ls_p5110.
        ELSEIF operation = modify_operation .
          CALL METHOD hrrcf_contact_rules->update_record
            EXPORTING
              check_only      = space
              external_commit = external_commit  "WAR1540502
            IMPORTING
              return          = return
            CHANGING
              infotype_record = ls_p5110.
        ELSEIF operation = delete_operation .
          CALL METHOD hrrcf_contact_rules->delete_record
            EXPORTING
              check_only      = space
              external_commit = external_commit  "WAR1540502
            IMPORTING
              return          = return
            CHANGING
              infotype_record = ls_p5110.
        ENDIF .
      CATCH cx_hrrcf INTO lo_exception.
        RAISE EXCEPTION TYPE cx_hrrcf_address_service
          EXPORTING
            textid =
               cx_hrrcf_address_service=>cx_hrrcf_address_service
            previous = lo_exception .
    ENDTRY.

  MOVE ls_p5110 TO infty_record .

ENDMETHOD.                    "UPDATE_DATA_TO_INFOTYPE
ENDCLASS.