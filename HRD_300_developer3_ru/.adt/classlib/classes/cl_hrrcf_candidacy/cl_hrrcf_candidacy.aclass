class CL_HRRCF_CANDIDACY definition
  public
  inheriting from CL_HRRCF_SIMPLE_MAIN_OBJECT
  final
  create private

  global friends CL_HRRCF_DELETE_MANAGER
                 CL_HRRCF_SIMPLE_MAIN_OBJECT .

public section.
*"* public components of class CL_HRRCF_CANDIDACY
*"* do not include other source files here!!!

  constants MY_OTYPE type OTYPE value 'NE'. "#EC NOTEXT
  constants MY_CLASSNAME type SEOCLSNAME value 'CL_HRRCF_CANDIDACY'. "#EC NOTEXT

  methods ADD_CANDIDATE_PROFILE
    importing
      !PV_ILANGUAGE type SPRAS default SY-LANGU
    returning
      value(PV_ENEW_VERSION) type HRKWF_VERSION
    raising
      CX_HRRCF .
  methods ADD_CAND_RESUME_TO_AUDIT_TRAIL
    importing
      !P_LANGUAGE type SPRAS default SY-LANGU
    preferred parameter P_LANGUAGE
    returning
      value(P_NEW_VERSION) type HRKWF_VERSION
    raising
      CX_HRRCF .
  methods ASSIGN_APPLICATION
    importing
      !APPLICATION type ref to CL_HRRCF_CANDIDATE_APPLICATION
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods ASSIGN_CANDIDATE
    importing
      !CANDIDATE type ref to CL_HRRCF_CANDIDATE
    raising
      CX_HRRCF .
  methods ASSIGN_REQUISITION
    importing
      !REQUISITION type ref to CL_HRRCF_REQUISITION
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  class-methods CREATE
    importing
      !NAME type STEXT optional
    exporting
      !CANDIDACY type ref to CL_HRRCF_CANDIDACY
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods DELIMIT_APPLICATION
    importing
      !APPLICATION type ref to CL_HRRCF_CANDIDATE_APPLICATION
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods DELIMIT_REQUISITION
    importing
      !REQUISITION type ref to CL_HRRCF_REQUISITION
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  class-methods GET
    importing
      !ID type HROBJID optional
    exporting
      !CANDIDACY type ref to CL_HRRCF_CANDIDACY
    raising
      CX_HRRCF .
  methods GET_APPLICATIONS
    exporting
      !APPLICATION_LIST type RCF_T_APPLICATION
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods GET_CANDIDACY_STATUS
    importing
      !P_DATE type DATS default SY-DATUM
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !P_STATUS type RCF_CANDIDACY_STATUS
      !P_STATUS_TXT type DDTEXT
      !P_REASON_CODE type RCF_REASON_CODE
      !P_REASON_CODE_TXT type RCF_REASON_CODE_TXT
    raising
      CX_HRRCF .
  methods GET_CANDIDATE
    exporting
      !CANDIDATE_LIST type RCF_T_CANDIDATE
    raising
      CX_HRRCF .
  methods GET_CANDIDATE_PROFILE
    importing
      !P_VERSION type HRKWF_VERSION
    exporting
      !PS_CAND_RESUME type RCF_S_CAND_RESUME_AUDIT
      !PS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
  methods GET_CANDIDATE_PROFILES
    exporting
      !PT_EAUDIT_TRAIL type RCF_T_AUDIT_TRAIL
      !PT_EVERSION_INFO type RCF_T_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
  class-methods GET_CDCY_NUMBERS
    importing
      !PT_REQUISITIONS type RCF_T_HROBJECT
      !P_READFLAG_NOT_REQUESTED type BOOLE_D optional
    exporting
      !PT_REQUISITIONS_NO_CDCY type RCF_T_REQUISITION_NO_CDCY .
  class-methods GET_CDCY_NUMBERS2
    importing
      !PT_REQUISITIONS type RCF_T_HROBJECT
      !P_READFLAG_NOT_REQUESTED type BOOLE_D optional
    exporting
      !PT_REQUISITIONS_NO_CDCY type RCF_T_REQUISITION_NO_CDCY .
  class-methods GET_CDCY_NUMBERS3
    importing
      !PT_REQUISITIONS type RCF_T_HROBJECT
      !P_READFLAG_NOT_REQUESTED type BOOLE_D optional
    exporting
      !PT_REQUISITIONS_NO_CDCY type RCF_T_REQUISITION_NO_CDCY .
  class-methods GET_CREATOR
    importing
      !IS_CANDIDACY_HROBJECT type HROBJECT
    exporting
      !EV_CREATOR type SYUNAME .
  methods GET_REQUISITIONS
    exporting
      !REQUISITION_LIST type RCF_T_REQUISITION
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods GET_STATUS_REASON_HISTORY
    exporting
      !FIELD_LOG type RCF_T_FIELDLOG .

  methods DELETE
    redefinition .
protected section.
*"* protected components of class CL_HRRCF_CANDIDACY
*"* do not include other source files here!!!

  methods CHECK_BEFORE_DELETE
    redefinition .
private section.
*"* private components of class CL_HRRCF_CANDIDACY
*"* do not include other source files here!!!

  methods CONVERT_HRKWF_AUDIT_TRAIL
    importing
      !PS_HRKWF_AUDIT_TRAIL type RCF_S_HRKWF_AUDIT_TRAIL
    exporting
      !PS_AUDIT_TRAIL type RCF_S_AUDIT_TRAIL
    raising
      CX_HRRCF .
  methods GET_AUDIT_TRAIL_VERSION_INFO
    importing
      !PS_AUDIT_TRAIL type RCF_S_AUDIT_TRAIL
      !P_LANGUAGE type SPRAS default SY-LANGU
    exporting
      !PS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
ENDCLASS.



CLASS CL_HRRCF_CANDIDACY IMPLEMENTATION.


METHOD add_candidate_profile.
  DATA:
    lo_exception   TYPE REF TO cx_root,
    lo_candidate   TYPE REF TO cl_hrrcf_candidate,
    lt_candidates  TYPE rcf_t_candidate,
    ls_cand_resume TYPE rcf_s_cand_resume_audit,
    l_xml_document TYPE string.

  CLEAR pv_enew_version.

  TRY.
*     Get candidate
      CALL METHOD me->get_candidate
        IMPORTING
          candidate_list = lt_candidates.

      READ TABLE lt_candidates INTO lo_candidate INDEX 1.
      IF sy-subrc NE 0.
        IF 1 EQ 2.
          MESSAGE e194(hrrcf0001).
*         There is no candidate for this candidacy
        ENDIF.
        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            hrobject       = me->hrobject
            message_type   = 'E'
            message_class  = 'HRRCF0001'
            message_number = '194'.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.
  TRY.
*     Get candidate's résumé for audit trail
      CALL METHOD lo_candidate->get_cand_resume_for_audit
        EXPORTING
          p_date         = sy-datum
          p_language     = pv_ilanguage
        IMPORTING
          ps_cand_resume = ls_cand_resume.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = lo_candidate->hrobject.
  ENDTRY.

  TRY.
*     Create XML document from candidate's résumé
      CALL TRANSFORMATION id_indent
        SOURCE cand_resume = ls_cand_resume
        RESULT XML l_xml_document.

    CATCH cx_root INTO lo_exception.
      IF 1 EQ 2.
        MESSAGE e093(hrrcf0001).
*       Error when reading/writing an XML document
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous       = lo_exception
          hrobject       = me->hrobject
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '093'.
  ENDTRY.

  TRY.
*     Add XML document to audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>update_audit_trail
        EXPORTING
          ps_appl_hrobject = me->hrobject  "candidacy possible now
          p_language       = pv_ilanguage
          p_xml_document   = l_xml_document
        IMPORTING
          p_new_version    = pv_enew_version.

    CATCH cx_hrrcf_hrkwf_storage INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD add_cand_resume_to_audit_trail.

* Author: HGB

  DATA: lo_exception    TYPE REF TO cx_hrrcf,
        lo_application  TYPE REF TO cl_hrrcf_candidate_application,
        lt_applications TYPE rcf_t_application.

  CLEAR p_new_version.

  TRY.
*     Get application for candidacy
      CALL METHOD me->get_applications
        IMPORTING
          application_list = lt_applications.

      CHECK lt_applications IS NOT INITIAL.

*     If an application exists, add candidate's resumé to audit trail
      READ TABLE lt_applications INDEX 1 INTO lo_application.

      CALL METHOD lo_application->add_cand_resume_to_audit_trail
        EXPORTING
          p_language    = p_language
        RECEIVING
          p_new_version = p_new_version.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD ASSIGN_APPLICATION .
  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'B'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

  IF NOT application IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = l_plvar.
    ls_relation-otype = me->my_otype.
    ls_relation-objid = me->id.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
    ls_relation-sclas = application->my_otype.
    ls_relation-sobid = application->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '1' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_insert
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .

  ENDIF.
  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


method ASSIGN_CANDIDATE .

  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'B'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '656'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

  IF NOT candidate IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = me->hrobject-plvar.
    ls_relation-otype = me->hrobject-otype.
    ls_relation-objid = me->hrobject-objid.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
    ls_relation-sclas = candidate->hrobject-otype.
    ls_relation-sobid = candidate->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
        authy               = space
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 0
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    IF sy-subrc NE 0.
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_insert
          hrobject = me->hrobject
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

  ENDIF.
  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

endmethod.


METHOD assign_requisition .
* XDP Copy Object: Interface

* XDP Copy Object
  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'A'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '654'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

* XDP Copy Object
  IF NOT requisition IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = l_plvar.
    ls_relation-otype = me->my_otype.
    ls_relation-objid = me->id.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
* XDP Copy Object
    ls_relation-sclas = requisition->my_otype.
* XDP Copy Object
    ls_relation-sobid = requisition->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '1' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_insert
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .

  ENDIF.

  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


method CHECK_BEFORE_DELETE .


endmethod.


METHOD CONVERT_HRKWF_AUDIT_TRAIL.

* Author: HGB

  DATA: lo_exception   TYPE REF TO cx_root,
        ls_cand_resume TYPE rcf_s_cand_resume_audit.

  CLEAR ps_audit_trail.

  MOVE ps_hrkwf_audit_trail-version    TO ps_audit_trail-version.
  MOVE ps_hrkwf_audit_trail-language   TO ps_audit_trail-language.
  MOVE ps_hrkwf_audit_trail-created_by TO ps_audit_trail-created_by.

  TRY.
*     Convert UTC time stamp into local date and time
      CONVERT TIME STAMP ps_hrkwf_audit_trail-created_at
         TIME ZONE sy-zonlo
         INTO DATE ps_audit_trail-created_at_date
              TIME ps_audit_trail-created_at_time.

*     Convert XML document back into version of candidate's résumé
      CALL TRANSFORMATION id_indent
        SOURCE XML ps_hrkwf_audit_trail-content
        RESULT cand_resume = ls_cand_resume.

      MOVE-CORRESPONDING ls_cand_resume TO ps_audit_trail.

    CATCH cx_root INTO lo_exception.
      IF 1 EQ 2.
        MESSAGE e093(hrrcf0001).
*       Error when reading/writing an XML document
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous       = lo_exception
          hrobject       = me->hrobject
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '093'.
  ENDTRY.

ENDMETHOD.


METHOD create .
  DATA lo_instance TYPE REF TO cl_hrrcf_simple_main_object.
  DATA lo_exception TYPE REF TO cx_hrrcf.

  TRY.
      CALL METHOD cl_hrrcf_simple_main_object=>create_internal
        EXPORTING
          name      = name
          otype     = my_otype
          classname = my_classname
        IMPORTING
          instance  = lo_instance
          return    = return.

    CATCH cx_hrrcf INTO lo_exception.

      CLEAR candidacy.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
           previous = lo_exception.

  ENDTRY.

  candidacy ?= lo_instance.

** Insert into change pointer table for SP
*  TRY.
*      CALL METHOD cl_hrrcf_spt_change_pointer=>insert_change_pointer
*        EXPORTING
*          hrobject = candidacy->hrobject.
*
*    CATCH cx_hrrcf INTO lo_exception.
** we write the log and continue the program logic
*      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
*        EXPORTING
*          ex = lo_exception.
*  ENDTRY.

* Insert an entry in t77rcf_wl_object for new candidacy
  TRY.
      CALL METHOD cl_hrrcf_t77rcf_wl_object=>insert_cdcy
        EXPORTING
          ps_candidacy = candidacy->hrobject.

    CATCH cx_hrrcf INTO lo_exception.

      RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
              previous = lo_exception.
  ENDTRY.

ENDMETHOD.                    "


METHOD delete .

  DATA : lo_exception       TYPE REF TO cx_hrrcf ,
         lt_return          TYPE bapirettab.

* Delete all the forms belonging to this object from the MBO clusters


  TRY.
*--   Delete redundant data storage
      CALL METHOD cl_hrrcf_t77rcf_rd_at=>delete
        EXPORTING
          is_hrobject = me->hrobject.

      CALL METHOD super->delete
        IMPORTING
          return = lt_return.
      APPEND LINES OF lt_return TO return .
    CATCH cx_hrrcf_maintain_object INTO lo_exception.

      RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
        EXPORTING
          previous = lo_exception.

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.

      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          previous = lo_exception.

  ENDTRY.

* Delete the corresponding entry in t77rcf_wl_object
  TRY.
      CALL METHOD cl_hrrcf_t77rcf_wl_object=>delete_cdcy
        EXPORTING
          ps_candidacy = me->hrobject.


    CATCH cx_hrrcf INTO lo_exception.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception.
  ENDTRY.

ENDMETHOD.


METHOD delimit_application .
* XDP Copy Object: Interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'B655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA lt_object TYPE TABLE OF hrobject.
  DATA l_objid TYPE plog-objid.

  DATA delimitdate TYPE  sydatum.
  DATA lt_delimt_record TYPE TABLE OF p1001.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  delimitdate = sy-datum - 1.
  APPEND me->hrobject TO lt_object.

  CALL FUNCTION 'RH_READ_INFTY'
    EXPORTING
      infty                = '1001'
      istat                = '1'
      subty                = c_subty
      begda                = delimitdate
    TABLES
      innnn                = lt_relation
      OBJECTS              = lt_object
    EXCEPTIONS
      all_infty_with_subty = 1
      nothing_found        = 0
      no_objects           = 3
      wrong_condition      = 4
      OTHERS               = 5.
  IF sy-subrc NE 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
        hrobject = me->hrobject
*       INFOTYPE =
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ENDIF.

* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda LT delimitdate
               AND sobid = application->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_CUT_INFTY'
      EXPORTING
        vtask              = 'D'
        gdate              = delimitdate
        histo              = space
      TABLES
        innnn              = lt_delimt_record
      EXCEPTIONS
        error_during_cut   = 1
        no_authorization   = 2
        gdate_before_begda = 3
        cut_of_timco_one   = 4
        corr_exit          = 5
        OTHERS             = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.


  REFRESH lt_delimt_record.
* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda GE delimitdate
               AND sobid = application->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_DELETE_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_delimt_record
      EXCEPTIONS
        error_during_delete = 1
        no_authorization    = 2
        delete_first_record = 3
        corr_exit           = 4
        OTHERS              = 5.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.
  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD delimit_requisition .
* XDP Copy Object: interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'A654'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA lt_object TYPE TABLE OF hrobject.
  DATA l_objid TYPE plog-objid.

  DATA delimitdate TYPE  sydatum.
  DATA lt_delimt_record TYPE TABLE OF p1001.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  delimitdate = sy-datum - 1.
  APPEND me->hrobject TO lt_object.

  CALL FUNCTION 'RH_READ_INFTY'
    EXPORTING
      infty                = '1001'
      istat                = '1'
      subty                = c_subty
      begda                = delimitdate
    TABLES
      innnn                = lt_relation
      OBJECTS              = lt_object
    EXCEPTIONS
      all_infty_with_subty = 1
      nothing_found        = 0
      no_objects           = 3
      wrong_condition      = 4
      OTHERS               = 5.
  IF sy-subrc NE 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
        hrobject = me->hrobject
*       INFOTYPE =
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ENDIF.

* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda LT delimitdate
               AND sobid = requisition->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_CUT_INFTY'
      EXPORTING
        vtask              = 'D'
        gdate              = delimitdate
        histo              = space
      TABLES
        innnn              = lt_delimt_record
      EXCEPTIONS
        error_during_cut   = 1
        no_authorization   = 2
        gdate_before_begda = 3
        cut_of_timco_one   = 4
        corr_exit          = 5
        OTHERS             = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.


  REFRESH lt_delimt_record.
* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda GE delimitdate
               AND sobid = requisition->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_DELETE_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_delimt_record
      EXCEPTIONS
        error_during_delete = 1
        no_authorization    = 2
        delete_first_record = 3
        corr_exit           = 4
        OTHERS              = 5.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.
  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD GET .
  DATA lo_instance TYPE REF TO cl_hrrcf_simple_main_object.
  DATA lo_exception TYPE REF TO cx_hrrcf.

  TRY.
      CALL METHOD cl_hrrcf_simple_main_object=>get_internal
        EXPORTING
          otype = my_otype
          id = id
          classname = my_classname
        IMPORTING
          instance  = lo_instance.

    CATCH cx_hrrcf INTO lo_exception.

      CLEAR candidacy.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
           previous = lo_exception.

  ENDTRY.

  candidacy ?= lo_instance.

ENDMETHOD.                    "


METHOD get_applications .
* XDP Copy Object:interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'B655'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object TYPE REF TO object.
* XDP Copy Object
  DATA lo_application TYPE REF TO cl_hrrcf_candidate_application.
  DATA:
    lv_subrc TYPE sysubrc.


* XDP Copy Object
  CLEAR application_list.

*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = application_list.



* if no recprds exist, read from database

  IF application_list IS INITIAL.

    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

* XDP Copy Object
          CALL METHOD cl_hrrcf_candidate_application=>get
            EXPORTING
              id          = l_objid
            IMPORTING
              application = lo_application.

* XDP Copy Object
          APPEND lo_application TO application_list.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = application_list.




  ENDIF.

ENDMETHOD.                    "


METHOD GET_AUDIT_TRAIL_VERSION_INFO.

* Author: HGB

  DATA: lo_candidate TYPE REF TO cl_hrrcf_candidate,
        lo_exception TYPE REF TO cx_hrrcf.

  CLEAR ps_version_info.

* Move administrative data
  MOVE-CORRESPONDING ps_audit_trail TO ps_version_info.

* Get language text
  SELECT SINGLE sptxt FROM t002t
    INTO ps_version_info-language_txt
   WHERE spras EQ p_language
     AND sprsl EQ ps_version_info-language.

  IF ps_version_info-language_txt IS INITIAL.
    MOVE ps_version_info-language TO ps_version_info-language_txt.
  ENDIF.

* Get full name of user who created the version
  TRY.
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          user      = ps_version_info-created_by
        IMPORTING
          candidate = lo_candidate.

      MOVE lo_candidate->centraldataperson-fullname TO ps_version_info-created_by_fullname.

      IF ps_version_info-created_by_fullname IS INITIAL.
        MOVE ps_version_info-created_by TO ps_version_info-created_by_fullname.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


method get_candidacy_status .
* Author: Joachim Gross
* SGS 08022002
* Additions: AS
  data: lo_ci type ref to cl_hrrcf_candidacy_information.
  data: lt_ci type table of p5133, ls_ci type p5133.
  data: lo_exception type ref to cx_hrrcf.

  data lt_candi_txt type rcf_t_candidacy_info_txt .
  data ls_candi_txt type rcf_s_candidacy_info_txt .

  try.
      call method cl_hrrcf_candidacy_information=>get_instance
        exporting
          hrobject = me->hrobject
        importing
          instance = lo_ci.

      if p_status_txt is supplied or p_reason_code_txt is supplied.

        call method lo_ci->get_records_by_date_with_text
          exporting
            date                = p_date
            language            = p_langu
          importing
            pt_candidacy_info_t = lt_candi_txt.

        read table lt_candi_txt index 1 into ls_candi_txt.
        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'CANDIDACY'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'CANDIDACY' .

        endif.

        p_status = ls_candi_txt-candidacy_status.
        p_status_txt = ls_candi_txt-status_txt .
        p_reason_code = ls_candi_txt-reason_code.
        p_reason_code_txt = ls_candi_txt-reason_code_txt.

      else .

        call method lo_ci->get_records_by_date
          exporting
            date             = p_date
          importing
            infotype_records = lt_ci.

        read table lt_ci index 1 into ls_ci.
        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'CANDIDACY'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'CANDIDACY' .

        endif.

        p_status = ls_ci-candidacy_status.
        p_reason_code = ls_ci-reason_code.

      endif .

    catch cx_hrrcf into lo_exception.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exception
          hrobject = me->hrobject.
  endtry.

endmethod.                    "get_candidacy_status


METHOD get_candidate .

  CONSTANTS c_subty TYPE plog-subty VALUE 'B656'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '656'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object TYPE REF TO object.
  DATA lo_candidate TYPE REF TO cl_hrrcf_candidate.
  DATA:
    lv_subrc TYPE sysubrc.


  CLEAR candidate_list.
*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = candidate_list.



* if no recprds exist, read from database

  IF candidate_list IS INITIAL.

    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

          CALL METHOD cl_hrrcf_candidate=>get
            EXPORTING
              id        = l_objid
            IMPORTING
              candidate = lo_candidate.

          APPEND lo_candidate TO candidate_list.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.
* register records in the buffer

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = candidate_list.

  ENDIF.

  DATA lt_application TYPE rcf_t_application.
  DATA lo_application TYPE REF TO cl_hrrcf_candidate_application.
  TRY.
      CALL METHOD me->get_applications
        IMPORTING
          application_list = lt_application.

      LOOP AT lt_application INTO lo_application.
        IF lo_application IS BOUND.

          DATA lt_candidate TYPE rcf_t_candidate.
          CALL METHOD lo_application->get_candidates
            IMPORTING
              candidate_list = lt_candidate.

          LOOP AT lt_candidate INTO lo_candidate.
            IF lo_candidate IS BOUND.

              READ TABLE candidate_list TRANSPORTING NO FIELDS
                WITH KEY table_line->hrobject-objid = lo_candidate->hrobject-objid.
              IF sy-subrc NE 0.

                APPEND lo_candidate TO candidate_list.

              ENDIF.

            ENDIF.
          ENDLOOP.

        ENDIF.
      ENDLOOP.

    CATCH cx_hrrcf .
* no reaction
  ENDTRY.

ENDMETHOD.


METHOD GET_CANDIDATE_PROFILE.
  DATA:
   lo_exception   TYPE REF TO cx_hrrcf,
   ls_hrkwf_trail TYPE rcf_s_hrkwf_audit_trail,
   ls_audit_trail TYPE rcf_s_audit_trail.
*
  CLEAR: ps_cand_resume,
         ps_version_info.

  TRY.
*     Get requested KW document from audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>get_audit_trail_by_version
        EXPORTING
          ps_appl_hrobject = me->hrobject
          p_version        = p_version
        IMPORTING
          ps_audit_trail   = ls_hrkwf_trail.

*     Convert KW document back into candidate's résumé
      CALL METHOD me->convert_hrkwf_audit_trail
        EXPORTING
          ps_hrkwf_audit_trail = ls_hrkwf_trail
        IMPORTING
          ps_audit_trail       = ls_audit_trail.

      MOVE-CORRESPONDING ls_audit_trail TO ps_cand_resume.

*     Get information on version of audit trail
      CALL METHOD me->get_audit_trail_version_info
        EXPORTING
          ps_audit_trail  = ls_audit_trail
          p_language      = sy-langu
        IMPORTING
          ps_version_info = ps_version_info.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD get_candidate_profiles.
  DATA:
    lo_exception    TYPE REF TO cx_hrrcf,
    lt_audit_trail  TYPE rcf_t_hrkwf_audit_trail,
    ls_audit_trail  TYPE rcf_s_audit_trail,
    ls_version_info TYPE rcf_s_version_audit_trail.

  FIELD-SYMBOLS:
    <ls_audit_trail> TYPE rcf_s_hrkwf_audit_trail.
*
  CLEAR: pt_eaudit_trail,
         pt_eversion_info.

  TRY.
*     Get all KW documents from audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>get_all_audit_trail
        EXPORTING
          ps_appl_hrobject = me->hrobject
        IMPORTING
          pt_audit_trail   = lt_audit_trail.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

  LOOP AT        lt_audit_trail
       ASSIGNING <ls_audit_trail>.
    TRY.
*       Convert KW document back into candidate's résumé
        CALL METHOD me->convert_hrkwf_audit_trail
          EXPORTING
            ps_hrkwf_audit_trail = <ls_audit_trail>
          IMPORTING
            ps_audit_trail       = ls_audit_trail.

*       Get information on version of audit trail
        CALL METHOD me->get_audit_trail_version_info
          EXPORTING
            ps_audit_trail  = ls_audit_trail
            p_language      = sy-langu
          IMPORTING
            ps_version_info = ls_version_info.

        APPEND ls_audit_trail
            TO pt_eaudit_trail.
        APPEND ls_version_info
            TO pt_eversion_info.

      CATCH cx_hrrcf INTO lo_exception.
        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
          EXPORTING
            ex = lo_exception.
        CONTINUE.
    ENDTRY.
  ENDLOOP.

ENDMETHOD.


METHOD get_cdcy_numbers.

* Author: VESPER
* Additions: PEV

* This method reads key figures about assigned candidacies in a mass fetch
*  Example: total number of cdcy assigned, "in process" etc.
*  Draft candidacies are never considered!

  TYPES: BEGIN OF ty_req_cdcy_struc,
           plvar            TYPE plvar,
           otype            TYPE otype,
           objid            TYPE hrobjid,
           sobid            TYPE sobid,
           candidacy_status TYPE rcf_candidacy_status,
         END OF ty_req_cdcy_struc.

  TYPES: BEGIN OF ty_s_hrotjid,
           plvar            TYPE plvar,
           otjid            TYPE otjid,
         END OF ty_s_hrotjid.

  CONSTANTS:
    lc_status_draft         TYPE n      VALUE '4',
    lc_status_in_process    TYPE n      VALUE '0',
    lc_status_withdrawn     TYPE n      VALUE '1',
    lc_status_rejected      TYPE n      VALUE '2',
    lc_status_to_be_hired   TYPE n      VALUE '3',
    lc_status_int_as_succ   TYPE n      VALUE '5',
    lc_subty                TYPE subtyp VALUE 'B654',
    lc_status               TYPE c      VALUE '1',
    lc_otype_cdcy           TYPE otype  VALUE 'NE'.

  DATA:
    lv_tabix                TYPE sy-tabix,
    lv_count                TYPE i,
    lv_num_total            TYPE int4,
    lv_num_in_process       TYPE int4,
    lv_num_withdrawn        TYPE int4,
    lv_num_rejected         TYPE int4,
    lv_num_to_be_hired      TYPE int4,
    lv_num_int_as_succ      TYPE int4,
    lv_num_unread           TYPE int4,
    lt_requisitions_no_cdcy TYPE rcf_t_requisition_no_cdcy,
    lt_req_cdcy             TYPE TABLE OF ty_req_cdcy_struc,
    ls_requisitions_no_cdcy TYPE rcf_s_requisition_no_cdcy,
    ls_cdcy_to_be_checked   TYPE hrobject,
    lt_cdcy_unread          TYPE rcf_t_hrobject,
    lt_cdcy_to_be_checked   TYPE rcf_t_hrobject,
    ls_hrotjid              TYPE ty_s_hrotjid,
    lt_hrotjid              TYPE TABLE OF ty_s_hrotjid.

  FIELD-SYMBOLS:
    <ls_requisitions>       TYPE hrobject,
    <ls_req_cdcy>           TYPE ty_req_cdcy_struc,
    <ls_req_cdcy_next>      TYPE ty_req_cdcy_struc.


  IF pt_requisitions IS INITIAL.
    CLEAR pt_requisitions_no_cdcy.
    RETURN.
  ENDIF.

  LOOP AT        pt_requisitions
       ASSIGNING <ls_requisitions>.

    ls_hrotjid-plvar = <ls_requisitions>-plvar.
    CONCATENATE <ls_requisitions>-otype
                <ls_requisitions>-objid
           INTO ls_hrotjid-otjid.
    APPEND ls_hrotjid
        TO lt_hrotjid.

  ENDLOOP.

* inner join HRP1001 and HRP5133
  SELECT
    hrp1001~plvar
    hrp1001~otype
    hrp1001~objid
    hrp1001~sobid
    hrp5133~candidacy_status

    INTO CORRESPONDING FIELDS OF TABLE lt_req_cdcy

    FROM hrp1001 INNER JOIN hrp5133 ON
         hrp1001~plvar = hrp5133~plvar  AND
         hrp1001~varyf = hrp5133~otjid

    FOR ALL entries IN lt_hrotjid WHERE
         hrp1001~plvar  = lt_hrotjid-plvar AND
         hrp1001~otjid  = lt_hrotjid-otjid AND
         hrp1001~subty  = lc_subty         AND
         hrp1001~sclas  = lc_otype_cdcy    AND
         hrp1001~istat  = lc_status        AND

         hrp5133~candidacy_status NE lc_status_draft AND
         hrp1001~begda <= sy-datum       AND
         hrp1001~endda >= sy-datum       AND
         hrp5133~begda <= sy-datum       AND
         hrp5133~endda >= sy-datum.

* sort table
  SORT lt_req_cdcy
    BY objid candidacy_status.

  IF p_readflag_not_requested EQ false.
* determine which candidacies in table lt_req_cdcy are in table
* t77rcf_wl_object (i.e. are unread)
    LOOP AT        lt_req_cdcy
         ASSIGNING <ls_req_cdcy>.
      ls_cdcy_to_be_checked-plvar = <ls_req_cdcy>-plvar.
      ls_cdcy_to_be_checked-otype = lc_otype_cdcy.
      ls_cdcy_to_be_checked-objid = <ls_req_cdcy>-sobid.
      APPEND ls_cdcy_to_be_checked
          TO lt_cdcy_to_be_checked.
    ENDLOOP.

    lt_cdcy_unread =
              cl_hrrcf_t77rcf_wl_object=>check_cdcies_existence(
              lt_cdcy_to_be_checked ).

    SORT lt_cdcy_unread.
  ENDIF.

* build up numbers for candidacies (total, in process, unread)
  LOOP AT        lt_req_cdcy
       ASSIGNING <ls_req_cdcy>.
    lv_tabix = sy-tabix + 1.

* determine total number of candidacies per requisition
    lv_num_total = lv_num_total + 1.

    CASE <ls_req_cdcy>-candidacy_status.
      WHEN lc_status_in_process.
*       determine number of candidacies 'in process' per requisition
        lv_num_in_process = lv_num_in_process + 1.
      WHEN lc_status_withdrawn.
*       determine number of candidacies 'withdrawn' per requisition
        lv_num_withdrawn = lv_num_withdrawn + 1.
      WHEN lc_status_rejected.
*       determine number of candidacies 'rejected' per requisition
        lv_num_rejected = lv_num_rejected + 1.
      WHEN lc_status_to_be_hired.
*       determine number of candidacies 'to be hired' per requisition
        lv_num_to_be_hired = lv_num_to_be_hired + 1.
      WHEN lc_status_int_as_succ.
*       determine number of candidacies 'intended as successor' per requisition
        lv_num_int_as_succ = lv_num_int_as_succ + 1.

      WHEN OTHERS.
*       not supported
    ENDCASE.

    IF p_readflag_not_requested EQ false.
* determine number of candidacies 'unread' per requisition
      READ TABLE    lt_cdcy_unread
           WITH KEY plvar = <ls_req_cdcy>-plvar
                    otype = lc_otype_cdcy
                    objid = <ls_req_cdcy>-sobid
           BINARY SEARCH
           TRANSPORTING NO FIELDS.
      IF sy-subrc = 0.
        lv_num_unread = lv_num_unread + 1.
      ENDIF.

    ENDIF.

* check whether in sorted table next entry still belongs to the same
* requisition
* if yes, continue process
* if no, append line in requisition table with numbers
    READ TABLE     lt_req_cdcy
         INDEX     lv_tabix
         ASSIGNING <ls_req_cdcy_next>.

    IF ( sy-subrc = 0 AND
         <ls_req_cdcy>-objid NE <ls_req_cdcy_next>-objid ) OR
         sy-subrc <> 0.
      ls_requisitions_no_cdcy-plvar          = <ls_req_cdcy>-plvar.
      ls_requisitions_no_cdcy-otype          = <ls_req_cdcy>-otype.
      ls_requisitions_no_cdcy-objid          = <ls_req_cdcy>-objid.
      ls_requisitions_no_cdcy-no_total       = lv_num_total.
      ls_requisitions_no_cdcy-no_in_process  = lv_num_in_process.
      ls_requisitions_no_cdcy-no_withdrawn   = lv_num_withdrawn.
      ls_requisitions_no_cdcy-no_rejected    = lv_num_rejected.
      ls_requisitions_no_cdcy-no_to_be_hired = lv_num_to_be_hired.
      ls_requisitions_no_cdcy-no_int_as_succ = lv_num_int_as_succ.
      ls_requisitions_no_cdcy-no_unread      = lv_num_unread.
      APPEND ls_requisitions_no_cdcy
          TO lt_requisitions_no_cdcy.

      CLEAR: lv_num_total,
             lv_num_in_process,
             lv_num_unread,
             lv_num_withdrawn,
             lv_num_rejected,
             lv_num_to_be_hired,
             lv_num_int_as_succ.
    ENDIF.
  ENDLOOP.

  pt_requisitions_no_cdcy = lt_requisitions_no_cdcy.

ENDMETHOD.


METHOD GET_CDCY_NUMBERS2.

* Author: VESPER
* Additions: PEV

* This method reads key figures about assigned candidacies in a mass fetch
*  Example: total number of cdcy assigned, "in process" etc.
*  Draft candidacies are never considered!

  TYPES: BEGIN OF ty_req_cdcy_struc,
           plvar            TYPE plvar,
           otype            TYPE otype,
           objid            TYPE hrobjid,
           sobid            TYPE sobid,
           candidacy_status TYPE rcf_candidacy_status,
         END OF ty_req_cdcy_struc.

  TYPES: BEGIN OF ty_s_hrotjid,
           plvar            TYPE plvar,
           otjid            TYPE otjid,
         END OF ty_s_hrotjid.

  TYPES: BEGIN OF rangetype,
           sign(1)   TYPE c,
           option(2) TYPE c,
           low       TYPE otjid,
           high      TYPE otjid,
         END OF rangetype.
  TYPES: BEGIN OF sobid_cdcy_type,
     sobid TYPE sobid,
     status TYPE RCF_CANDIDACY_STATUS,
     OBJID  TYPE OBJEKTID,
      NO_TOTAL TYPE I,
      NO_IN_PROCESS TYPE I,
      NO_WITHDRAWN  TYPE I,
      NO_REJECTED TYPE I,
      NO_TO_BE_HIRED TYPE I,
      NO_INT_AS_SUCC TYPE I,
      NO_UNREAD TYPE I,
     END OF sobid_cdcy_type.



  CONSTANTS:
    lc_status_draft         TYPE n      VALUE '4',
    lc_status_in_process    TYPE n      VALUE '0',
    lc_status_withdrawn     TYPE n      VALUE '1',
    lc_status_rejected      TYPE n      VALUE '2',
    lc_status_to_be_hired   TYPE n      VALUE '3',
    lc_status_int_as_succ   TYPE n      VALUE '5',
    lc_subty                TYPE subtyp VALUE 'B654',
    lc_status               TYPE c      VALUE '1',
    lc_otype_cdcy           TYPE otype  VALUE 'NE'.
Data  l_max_range             TYPE I      VALUE '200'.

  DATA:
*    lv_tabix                TYPE sy-tabix,
*    lv_count                TYPE i,
*    lv_num_total            TYPE int4,
*    lv_num_in_process       TYPE int4,
*    lv_num_withdrawn        TYPE int4,
*    lv_num_rejected         TYPE int4,
*    lv_num_to_be_hired      TYPE int4,
*    lv_num_int_as_succ      TYPE int4,
*    lv_num_unread           TYPE int4,
    lt_requisitions_no_cdcy TYPE rcf_t_requisition_no_cdcy,
*    lt_req_cdcy             TYPE TABLE OF ty_req_cdcy_struc,
    ls_requisitions_no_cdcy TYPE rcf_s_requisition_no_cdcy.
*    ls_cdcy_to_be_checked   TYPE hrobject,
*    lt_cdcy_unread          TYPE rcf_t_hrobject,
*    lt_cdcy_to_be_checked   TYPE rcf_t_hrobject,
*    ls_hrotjid              TYPE ty_s_hrotjid,
*    lt_hrotjid              TYPE TABLE OF ty_s_hrotjid.

  DATA: lt_req_range type table of rangetype,
        ls_req_range type rangetype,
        loop_index type I,
        do_index type I.

  data: lt_status_All type table of sobid_cdcy_type,
        ls_status_All type sobid_cdcy_type,
        lt_unread type table of sobid_cdcy_type,
        ls_unread type sobid_cdcy_type,
        objid_save type objektid.


  FIELD-SYMBOLS:
    <ls_requisitions>       TYPE hrobject,
    <ls_req_cdcy>           TYPE ty_req_cdcy_struc,
    <ls_req_cdcy_next>      TYPE ty_req_cdcy_struc.


  IF pt_requisitions IS INITIAL.
    CLEAR pt_requisitions_no_cdcy.
    RETURN.
  ENDIF.
  ls_req_range-sign = 'I'.
  ls_req_range-option = 'EQ'.
  do_index = 1.
  DO.
    loop_index = 1.
    CLEAR lt_req_range.
    LOOP AT        pt_requisitions
         ASSIGNING <ls_requisitions> from do_index.
      CONCATENATE <ls_requisitions>-otype
                  <ls_requisitions>-objid
             INTO ls_req_range-low.
      APPEND ls_req_range TO lt_req_range.
      IF loop_index = l_max_range.
        EXIT.
      ENDIF.
      loop_index = loop_index + 1.
    ENDLOOP.
    IF sy-subrc <> 0.
      exit.
    ENDIF.
    do_index = do_index + l_max_range.
    SELECT HRP1001~objid
       hrp5133~candidacy_status AS status
       COUNT( DISTINCT hrp5133~otjid ) AS no_total
       APPENDING CORRESPONDING FIELDS OF TABLE lt_status_All
FROM   hrp5133 INNER JOIN hrp1001
       ON hrp1001~varyf = hrp5133~otjid  AND
          hrp1001~PLVAR  = hrp5133~PLVAR
WHERE  hrp1001~otjid  IN lt_req_range AND
       hrp1001~subty  = 'B654'        AND
       hrp1001~istat  = '1'           AND     "lc_status  AND
       hrp1001~plvar  = <ls_requisitions>-plvar AND
       hrp5133~begda <= sy-datum      AND
       hrp5133~endda >= sy-datum      AND
       hrp1001~begda <= sy-datum      AND
       hrp1001~endda >= sy-datum
       GROUP BY HRP1001~objid hrp5133~candidacy_status.

    IF p_readflag_not_requested EQ false.

        SELECT hrp1001~objid COUNT( DISTINCT hrp1001~sobid ) as no_unread
               appending corresponding fields of table lt_unread
        FROM   hrp1001  inner join  t77rcf_wl_object
               on hrp1001~sobid = t77rcf_wl_object~objid
        where  hrp1001~mandt = sy-mandt AND
               hrp1001~otjid  in lt_req_range      AND
               hrp1001~subty  = 'B654'              AND
               hrp1001~plvar  = <ls_requisitions>-plvar  AND
               t77rcf_wl_object~mandt = sy-mandt AND
               t77rcf_wl_object~plvar = <ls_requisitions>-plvar and
               t77rcf_wl_object~otype = 'NE' AND
               hrp1001~endda >= sy-datum
               GROUP BY HRP1001~objid.
    ENDIF.
    IF loop_index < l_max_range.
      EXIT.
    ENDIF.
  ENDDO.
*  IF p_readflag_not_requested EQ false.
*        LOOP AT lt_unread INTO ls_unread.
*        ls_unread-objid = ls_unread-sobid+0(8).
*        modify lt_unread from ls_unread.
*      endloop.
*  ENDIF.
  sort lt_unread by objid.
  CHECK NOT lt_status_all IS INITIAL.
  SORT lt_status_all BY objid.
  Read table lt_status_all index 1 into ls_status_all.
  objid_save = ls_status_all-objid.
  ls_requisitions_no_cdcy-objid = ls_status_all-objid.

* build up numbers for candidacies (total, in process, unread, etc)
  Loop at lt_status_all into ls_status_all.
    if ls_status_all-objid = objid_save.
      if ls_status_all-status <> lc_status_draft.
        ls_requisitions_no_cdcy-no_total =
          ls_requisitions_no_cdcy-no_total +  ls_status_all-no_total.
        case ls_status_all-status. " In process?
          when lc_status_in_process.
            ls_requisitions_no_cdcy-no_in_process =  ls_status_all-no_total.
          when lc_status_withdrawn.
            ls_requisitions_no_cdcy-no_withdrawn =  ls_status_all-no_total.
          when lc_status_rejected.
            ls_requisitions_no_cdcy-no_rejected =  ls_status_all-no_total.
          when lc_status_to_be_hired.
            ls_requisitions_no_cdcy-no_to_be_hired =  ls_status_all-no_total.
          when lc_status_int_as_succ.
            ls_requisitions_no_cdcy-no_int_as_succ =  ls_status_all-no_total.
        endcase.
      else.            "candidacy_status = lc_status_draft
        ls_requisitions_no_cdcy-no_unread =  0 - ls_status_all-no_total.
      endif.
    else.
      IF p_readflag_not_requested EQ false.
        read table lt_unread into ls_unread with key objid = objid_save binary search.
        if sy-subrc = 0.
          ls_requisitions_no_cdcy-no_unread =
            ls_requisitions_no_cdcy-no_unread + ls_unread-no_unread.
        endif.
      else.
        ls_requisitions_no_cdcy-no_unread = 0.
      endif.
      objid_save = ls_status_all-objid.
      Append ls_requisitions_no_cdcy to lt_requisitions_no_cdcy.
      clear ls_requisitions_no_cdcy.
      ls_requisitions_no_cdcy-objid = ls_status_all-objid.
      if ls_status_all-status <> lc_status_draft.
        ls_requisitions_no_cdcy-no_total =
          ls_requisitions_no_cdcy-no_total +  ls_status_all-no_total.
        case ls_status_all-status. " In process?
          when lc_status_in_process.
            ls_requisitions_no_cdcy-no_in_process =  ls_status_all-no_total.
          when lc_status_withdrawn.
            ls_requisitions_no_cdcy-no_withdrawn =  ls_status_all-no_total.
          when lc_status_rejected.
            ls_requisitions_no_cdcy-no_rejected =  ls_status_all-no_total.
          when lc_status_to_be_hired.
            ls_requisitions_no_cdcy-no_to_be_hired =  ls_status_all-no_total.
          when lc_status_int_as_succ.
            ls_requisitions_no_cdcy-no_int_as_succ =  ls_status_all-no_total.
        endcase.
      else.            "candidacy_status = lc_status_draft
        ls_requisitions_no_cdcy-no_unread =  0 - ls_status_all-no_total.
      endif.
    endif.
  endloop.
  if sy-subrc = 0.
    IF p_readflag_not_requested EQ false.
      read table lt_unread into ls_unread with key objid = objid_save binary search.
      if sy-subrc = 0.
        ls_requisitions_no_cdcy-no_unread =
          ls_requisitions_no_cdcy-no_unread + ls_unread-no_unread.
      endif.
    else.
      ls_requisitions_no_cdcy-no_unread = 0.
    endif.
    Append ls_requisitions_no_cdcy to lt_requisitions_no_cdcy.
  endif.

  pt_requisitions_no_cdcy = lt_requisitions_no_cdcy.

ENDMETHOD.


METHOD GET_CDCY_NUMBERS3.

* This method reads key figures about assigned candidacies in a mass fetch
*  Example: total number of cdcy assigned, "in process" etc.
*  Draft candidacies are never considered!
  TYPES: BEGIN OF ty_req_cdcy_struc,
           plvar            TYPE plvar,
           otype            TYPE otype,
           objid            TYPE hrobjid,
           sobid            TYPE sobid,
           candidacy_status TYPE rcf_candidacy_status,
         END OF ty_req_cdcy_struc.

  TYPES: BEGIN OF ty_s_hrotjid,
           plvar            TYPE plvar,
           otjid            TYPE otjid,
         END OF ty_s_hrotjid.

  TYPES: BEGIN OF rangetype,
           sign(1)   TYPE c,
           option(2) TYPE c,
           low       TYPE otjid,
           high      TYPE otjid,
         END OF rangetype.
  TYPES: BEGIN OF sobid_cdcy_type,
     sobid TYPE sobid,
     status TYPE RCF_CANDIDACY_STATUS,
     OBJID  TYPE OBJEKTID,
      NO_TOTAL TYPE I,
      NO_IN_PROCESS TYPE I,
      NO_WITHDRAWN  TYPE I,
      NO_REJECTED TYPE I,
      NO_TO_BE_HIRED TYPE I,
      NO_INT_AS_SUCC TYPE I,
      NO_UNREAD TYPE I,
     END OF sobid_cdcy_type.



  CONSTANTS:
    lc_status_draft         TYPE n      VALUE '4',
    lc_status_in_process    TYPE n      VALUE '0',
    lc_status_withdrawn     TYPE n      VALUE '1',
    lc_status_rejected      TYPE n      VALUE '2',
    lc_status_to_be_hired   TYPE n      VALUE '3',
    lc_status_int_as_succ   TYPE n      VALUE '5',
    lc_subty                TYPE subtyp VALUE 'B654',
    lc_status               TYPE c      VALUE '1',
    lc_otype_cdcy           TYPE otype  VALUE 'NE'.
Data  l_max_range             TYPE I      VALUE '200'.

  DATA:
    lt_requisitions_no_cdcy TYPE rcf_t_requisition_no_cdcy,
    ls_requisitions_no_cdcy TYPE rcf_s_requisition_no_cdcy.

  DATA: lt_req_range type table of rangetype,
        ls_req_range type rangetype,
        loop_index type I,
        do_index type I.

  data: lt_status_All type table of sobid_cdcy_type,
        ls_status_All type sobid_cdcy_type,
        lt_unread type table of sobid_cdcy_type,
        ls_unread type sobid_cdcy_type,
        objid_save type objektid.


  FIELD-SYMBOLS:
    <ls_requisitions>       TYPE hrobject,
    <ls_req_cdcy>           TYPE ty_req_cdcy_struc,
    <ls_req_cdcy_next>      TYPE ty_req_cdcy_struc.


  IF pt_requisitions IS INITIAL.
    CLEAR pt_requisitions_no_cdcy.
    RETURN.
  ENDIF.
  ls_req_range-sign = 'I'.
  ls_req_range-option = 'EQ'.
  do_index = 1.
  DO.
    loop_index = 1.
    CLEAR lt_req_range.
    LOOP AT        pt_requisitions
         ASSIGNING <ls_requisitions> from do_index.
      CONCATENATE <ls_requisitions>-otype
                  <ls_requisitions>-objid
             INTO ls_req_range-low.
      APPEND ls_req_range TO lt_req_range.
      IF loop_index = l_max_range.
        EXIT.
      ENDIF.
      loop_index = loop_index + 1.
    ENDLOOP.
    IF sy-subrc <> 0.
      exit.
    ENDIF.
    do_index = do_index + l_max_range.

    SELECT reqid as objid
           candidacy_status AS status
           COUNT( DISTINCT otjid ) AS no_total
           APPENDING CORRESPONDING FIELDS OF TABLE lt_status_All
    FROM   hrp5133
    WHERE reqid  IN lt_req_range           AND
          plvar  = <ls_requisitions>-plvar AND
          endda >= sy-datum
    GROUP BY reqid candidacy_status.

    IF p_readflag_not_requested EQ false.

        SELECT reqid as objid COUNT( DISTINCT objid ) as no_unread
               appending corresponding fields of table lt_unread
        FROM   hrp5133
        where  reqid  in lt_req_range            AND
               cread  = ' '                      AND
               plvar  = <ls_requisitions>-plvar  AND
               endda >= sy-datum
               GROUP BY reqid.
    ENDIF.
    IF loop_index < l_max_range.
      EXIT.
    ENDIF.
  ENDDO.

  sort lt_unread by objid.
  CHECK NOT lt_status_all IS INITIAL.
  SORT lt_status_all BY objid.
  Read table lt_status_all index 1 into ls_status_all.
  objid_save = ls_status_all-objid.
  ls_requisitions_no_cdcy-objid = ls_status_all-objid.

* build up numbers for candidacies (total, in process, unread, etc)
  Loop at lt_status_all into ls_status_all.
    if ls_status_all-objid = objid_save.
      if ls_status_all-status <> lc_status_draft.
        ls_requisitions_no_cdcy-no_total =
          ls_requisitions_no_cdcy-no_total +  ls_status_all-no_total.
        case ls_status_all-status. " In process?
          when lc_status_in_process.
            ls_requisitions_no_cdcy-no_in_process =  ls_status_all-no_total.
          when lc_status_withdrawn.
            ls_requisitions_no_cdcy-no_withdrawn =  ls_status_all-no_total.
          when lc_status_rejected.
            ls_requisitions_no_cdcy-no_rejected =  ls_status_all-no_total.
          when lc_status_to_be_hired.
            ls_requisitions_no_cdcy-no_to_be_hired =  ls_status_all-no_total.
          when lc_status_int_as_succ.
            ls_requisitions_no_cdcy-no_int_as_succ =  ls_status_all-no_total.
        endcase.
      else.            "candidacy_status = lc_status_draft
        ls_requisitions_no_cdcy-no_unread =  0 - ls_status_all-no_total.
      endif.
    else.
      IF p_readflag_not_requested EQ false.
        read table lt_unread into ls_unread with key objid = objid_save binary search.
        if sy-subrc = 0.
          ls_requisitions_no_cdcy-no_unread =
            ls_requisitions_no_cdcy-no_unread + ls_unread-no_unread.
        endif.
      else.
        ls_requisitions_no_cdcy-no_unread = 0.
      endif.
      objid_save = ls_status_all-objid.
      Append ls_requisitions_no_cdcy to lt_requisitions_no_cdcy.
      clear ls_requisitions_no_cdcy.
      ls_requisitions_no_cdcy-objid = ls_status_all-objid.
      if ls_status_all-status <> lc_status_draft.
        ls_requisitions_no_cdcy-no_total =
          ls_requisitions_no_cdcy-no_total +  ls_status_all-no_total.
        case ls_status_all-status. " In process?
          when lc_status_in_process.
            ls_requisitions_no_cdcy-no_in_process =  ls_status_all-no_total.
          when lc_status_withdrawn.
            ls_requisitions_no_cdcy-no_withdrawn =  ls_status_all-no_total.
          when lc_status_rejected.
            ls_requisitions_no_cdcy-no_rejected =  ls_status_all-no_total.
          when lc_status_to_be_hired.
            ls_requisitions_no_cdcy-no_to_be_hired =  ls_status_all-no_total.
          when lc_status_int_as_succ.
            ls_requisitions_no_cdcy-no_int_as_succ =  ls_status_all-no_total.
        endcase.
      else.            "candidacy_status = lc_status_draft
        ls_requisitions_no_cdcy-no_unread =  0 - ls_status_all-no_total.
      endif.
    endif.
  endloop.
  if sy-subrc = 0.
    IF p_readflag_not_requested EQ false.
      read table lt_unread into ls_unread with key objid = objid_save binary search.
      if sy-subrc = 0.
        ls_requisitions_no_cdcy-no_unread =
          ls_requisitions_no_cdcy-no_unread + ls_unread-no_unread.
      endif.
    else.
      ls_requisitions_no_cdcy-no_unread = 0.
    endif.
    Append ls_requisitions_no_cdcy to lt_requisitions_no_cdcy.
  endif.

  pt_requisitions_no_cdcy = lt_requisitions_no_cdcy.

ENDMETHOD.


METHOD get_creator.

  DATA: lt_candidacy TYPE wplog_tab,
        ls_candidacy TYPE wplog,
        lo_ex        TYPE REF TO cx_hrrcf_infotype_operation.

  CALL FUNCTION 'RH_READ_INFTY'
    EXPORTING
      plvar                = is_candidacy_hrobject-plvar
      otype                = is_candidacy_hrobject-otype
      objid                = is_candidacy_hrobject-objid
      infty                = '1000'
      istat                = '1'
    TABLES
      innnn                = lt_candidacy
    EXCEPTIONS
      all_infty_with_subty = 1
      nothing_found        = 2
      no_objects           = 3
      wrong_condition      = 4
      wrong_parameters     = 5
      OTHERS               = 6.

  IF sy-subrc NE 0.

    TRY.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_read
            hrobject = is_candidacy_hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

      CATCH cx_hrrcf_infotype_operation INTO lo_ex.
        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
          EXPORTING
            ex = lo_ex.
    ENDTRY.

  ELSE.

    READ TABLE lt_candidacy
    INTO ls_candidacy
    WITH KEY plvar = is_candidacy_hrobject-plvar
             otype = is_candidacy_hrobject-otype
             objid = is_candidacy_hrobject-objid.

    IF sy-subrc EQ 0.
      ev_creator = ls_candidacy-uname.
    ENDIF.

  ENDIF.

ENDMETHOD.


METHOD get_requisitions .
* XDP Copy Object: interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'A654'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '654'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object TYPE REF TO object.
* XDP Copy Object
  DATA lo_requisition TYPE REF TO cl_hrrcf_requisition.
  DATA:
    lv_subrc TYPE sysubrc.


* XDP Copy Object
  CLEAR requisition_list.
*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = requisition_list.


* if no recprds exist, read from database

  IF requisition_list IS INITIAL.
    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

* XDP Copy Object
          CALL METHOD cl_hrrcf_requisition=>get
            EXPORTING
              id          = l_objid
            IMPORTING
              requisition = lo_requisition.

* XDP Copy Object
          APPEND lo_requisition TO requisition_list.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.

*register records in the buffer

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = requisition_list.
  ENDIF.

ENDMETHOD.                    "


method get_status_reason_history .
*
* Author: AS
*
  data lo_cdcy_info type ref to cl_hrrcf_candidacy_information.
  data lt_field_set type rcf_t_fieldname.
*
  call method cl_hrrcf_candidacy_information=>get_instance
    exporting
      hrobject = me->hrobject
    importing
      instance = lo_cdcy_info.
*
  if lo_cdcy_info is bound.
*
    append 'CANDIDACY_STATUS' to lt_field_set.
    append 'REASON_CODE' to lt_field_set.
*
    call method lo_cdcy_info->get_field_set_history_tc12
      exporting
        field_set = lt_field_set
      importing
        field_log = field_log.
*
  endif.
*
endmethod.
ENDCLASS.