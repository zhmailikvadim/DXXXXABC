class CL_HRRCF_CANDIDATE_APPLICATION definition
  public
  inheriting from CL_HRRCF_SIMPLE_MAIN_OBJECT
  final
  create private

  global friends CL_HRRCF_DELETE_MANAGER
                 CL_HRRCF_SIMPLE_MAIN_OBJECT .

public section.
*"* public components of class CL_HRRCF_CANDIDATE_APPLICATION
*"* do not include other source files here!!!

  constants MY_OTYPE type OTYPE value 'ND'. "#EC NOTEXT
  constants MY_CLASSNAME type SEOCLSNAME value 'CL_HRRCF_CANDIDATE_APPLICATION'. "#EC NOTEXT
  constants CO_IN_PROCESS type RCF_APPLICATION_STATUS value '1'. "#EC NOTEXT

  methods ADD_CAND_RESUME_TO_AUDIT_TRAIL
    importing
      !P_LANGUAGE type SPRAS default SY-LANGU
    preferred parameter P_LANGUAGE
    returning
      value(P_NEW_VERSION) type HRKWF_VERSION
    raising
      CX_HRRCF .
  methods ASSIGN_CANDIDACY
    importing
      !CANDIDACY type ref to CL_HRRCF_CANDIDACY
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods ASSIGN_CANDIDATE
    importing
      !CANDIDATE type ref to CL_HRRCF_CANDIDATE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods ASSIGN_POSTING
    importing
      !POSTING type ref to CL_HRRCF_POSTING
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  class-methods CREATE
    importing
      !NAME type STEXT optional
    exporting
      !APPLICATION type ref to CL_HRRCF_CANDIDATE_APPLICATION
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods DELIMIT_CANDIDACY
    importing
      !CANDIDACY type ref to CL_HRRCF_CANDIDACY
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods DELIMIT_CANDIDATE
    importing
      !CANDIDATE type ref to CL_HRRCF_CANDIDATE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  class-methods GET
    importing
      !ID type HROBJID optional
    exporting
      !APPLICATION type ref to CL_HRRCF_CANDIDATE_APPLICATION
    raising
      CX_HRRCF .
  methods GET_APPLICATION_SOURCE
    importing
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !P_APPL_SOURCE type RCF_TECH_APPL_SOURCE
      !P_APPL_SOURCE_TXT type RCF_TECH_APPL_SOURCE_TXT
    raising
      CX_HRRCF .
  methods GET_APPLICATION_SOURCE_INFO
    importing
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !P_APPL_SOURCE type RCF_TECH_APPL_SOURCE
      !P_APPL_SOURCE_TXT type RCF_TECH_APPL_SOURCE_TXT
    raising
      CX_HRRCF .
  methods GET_APPLICATION_STATUS
    importing
      !P_DATE type DATS default SY-DATUM
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !P_REASON_CODE type RCF_REASON_CODE
      !P_STATUS type RCF_APPLICATION_STATUS
      !P_STATUS_TXT type DDTEXT
      !P_REASON_CODE_TXT type RCF_REASON_CODE_TXT
    raising
      CX_HRRCF .
  methods GET_AUDIT_TRAIL
    exporting
      !PT_AUDIT_TRAIL type RCF_T_AUDIT_TRAIL
      !PT_VERSION_INFO type RCF_T_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
  methods GET_CANDIDACIES
    exporting
      !CANDIDACY_LIST type RCF_T_CANDIDACY
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods GET_CANDIDATES
    exporting
      !CANDIDATE_LIST type RCF_T_CANDIDATE
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods GET_CAND_RESUME_FR_AUDIT_TRAIL
    importing
      !P_VERSION type HRKWF_VERSION
    exporting
      !PS_CAND_RESUME type RCF_S_CAND_RESUME_AUDIT
      !PS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
  methods GET_PINST_GUID
    importing
      !P_DATE type DATS default SY-DATUM
    exporting
      !P_PINST_GUID type RCF_PINST_GUID
    raising
      CX_HRRCF .
  methods GET_POSTINGS
    exporting
      !POSTING_LIST type RCF_T_POSTING
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods GET_STATUS_REASON_HISTORY
    exporting
      !FIELD_LOG type RCF_T_FIELDLOG .
  class-methods GET_EXPIRING_APPLICATIONS
    importing
      !P_DATE_FROM type HRP5132-EXPIRATION_DATE
      !P_DATE_TO type HRP5132-EXPIRATION_DATE
    exporting
      !P_APPLICATION_ID_LIST type RCF_T_APPLICATION_ID_LIST .
  methods LEGAL_CHECK_BEFORE_DELETE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .

  methods DELETE
    redefinition .
protected section.
*"* protected components of class CL_HRRCF_CANDIDATE_APPLICATION
*"* do not include other source files here!!!

  methods CHECK_BEFORE_DELETE
    redefinition .
private section.
*"* private components of class CL_HRRCF_CANDIDATE_APPLICATION
*"* do not include other source files here!!!

  constants C_DOC_ID_AUDIT_TRAIL type HRKWF_DOC_ID value 'CAND_RESUME_AUDIT'. "#EC NOTEXT
  constants C_DOC_INITIAL_VERSION type HRKWF_VERSION value '000000'. "#EC NOTEXT

  methods CONVERT_HRKWF_AUDIT_TRAIL
    importing
      !PS_HRKWF_AUDIT_TRAIL type RCF_S_HRKWF_AUDIT_TRAIL
    exporting
      !PS_AUDIT_TRAIL type RCF_S_AUDIT_TRAIL
    raising
      CX_HRRCF .
  methods GET_AUDIT_TRAIL_VERSION_INFO
    importing
      !PS_AUDIT_TRAIL type RCF_S_AUDIT_TRAIL
      !P_LANGUAGE type SPRAS default SY-LANGU
    exporting
      !PS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    raising
      CX_HRRCF .
ENDCLASS.



CLASS CL_HRRCF_CANDIDATE_APPLICATION IMPLEMENTATION.


METHOD add_cand_resume_to_audit_trail.

* Author: HGB

  DATA: lo_exception   TYPE REF TO cx_root,
        lo_candidate   TYPE REF TO cl_hrrcf_candidate,
        lt_candidates  TYPE rcf_t_candidate,
        ls_cand_resume TYPE rcf_s_cand_resume_audit,
        l_msg_par      TYPE symsgv,
        l_xml_document TYPE string.

  CLEAR p_new_version.

  TRY.
*     Get candidate for application
      CALL METHOD me->get_candidates
        IMPORTING
          candidate_list = lt_candidates.

      READ TABLE lt_candidates INTO lo_candidate INDEX 1.
      IF sy-subrc NE 0.
        IF 1 EQ 2.
          MESSAGE e067(hrrcf0001) WITH me->hrobject-objid.
*         There is no candidate assigned to the application &1
        ENDIF.
        l_msg_par = me->hrobject-objid.
        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            hrobject       = me->hrobject
            message_type   = 'E'
            message_class  = 'HRRCF0001'
            message_number = '067'
            message_par1   = l_msg_par.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

  TRY.
*     Get candidate's résumé for audit trail
      CALL METHOD lo_candidate->get_cand_resume_for_audit
        EXPORTING
          p_date         = sy-datum
          p_language     = p_language
        IMPORTING
          ps_cand_resume = ls_cand_resume.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = lo_candidate->hrobject.
  ENDTRY.

  TRY.
*     Create XML document from candidate's résumé
      CALL TRANSFORMATION id_indent
        SOURCE cand_resume = ls_cand_resume
        RESULT XML l_xml_document.

    CATCH cx_root INTO lo_exception.
      IF 1 EQ 2.
        MESSAGE e093(hrrcf0001).
*       Error when reading/writing an XML document
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous       = lo_exception
          hrobject       = me->hrobject
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '093'.
  ENDTRY.

  TRY.
*     Add XML document to audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>update_audit_trail
        EXPORTING
          ps_appl_hrobject = me->hrobject
          p_language       = p_language
          p_xml_document   = l_xml_document
        IMPORTING
          p_new_version    = p_new_version.

    CATCH cx_hrrcf_hrkwf_storage INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD ASSIGN_CANDIDACY .

  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'A'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

  IF NOT candidacy IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = l_plvar.
    ls_relation-otype = me->my_otype.
    ls_relation-objid = me->id.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
* XDP Copy Object
    ls_relation-sclas = candidacy->my_otype.
* XDP Copy Object
    ls_relation-sobid = candidacy->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '1' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_insert
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .

  ENDIF.
  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD ASSIGN_CANDIDATE .

  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'B'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '651'.
  CONSTANTS c_sclas TYPE p1001-sclas VALUE 'NA'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

  IF NOT candidate IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = l_plvar.
    ls_relation-otype = me->my_otype.
    ls_relation-objid = me->id.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
    ls_relation-sclas = c_sclas.
    ls_relation-sobid = candidate->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '1' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_insert
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .

  ENDIF.

  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD ASSIGN_POSTING .

  CONSTANTS c_rsign TYPE p1001-rsign VALUE 'A'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '653'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.

  DATA l_plvar TYPE plvar.

  DATA ls_return TYPE bapiret2.

  IF NOT posting IS INITIAL.

    CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
      EXPORTING
        set_default_plvar = 'X'
      IMPORTING
        act_plvar         = l_plvar
      EXCEPTIONS
        no_active_plvar   = 0
        OTHERS            = 0.

    ls_relation-mandt = sy-mandt.
    ls_relation-plvar = l_plvar.
    ls_relation-otype = me->my_otype.
    ls_relation-objid = me->id.
    ls_relation-infty = '1001'.
    ls_relation-istat = '1'.
    ls_relation-rsign = c_rsign.
    ls_relation-relat = c_relat.
    ls_relation-begda = sy-datum.
    ls_relation-endda = '99991231'.
    ls_relation-sclas = posting->hrobject-otype.
    ls_relation-sobid = posting->id.
    APPEND ls_relation TO lt_relation.

    CALL FUNCTION 'RH_INSERT_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_relation
      EXCEPTIONS
        no_authorization    = 1
        error_during_insert = 2
        repid_form_initial  = 3
        corr_exit           = 4
        begda_greater_endda = 5
        OTHERS              = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '1' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_insert
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .

  ENDIF.

  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


method CHECK_BEFORE_DELETE .


endmethod.


METHOD convert_hrkwf_audit_trail.

* Author: HGB

  DATA: lo_exception   TYPE REF TO cx_root,
        ls_cand_resume TYPE rcf_s_cand_resume_audit.

  CLEAR ps_audit_trail.

  MOVE ps_hrkwf_audit_trail-version    TO ps_audit_trail-version.
  MOVE ps_hrkwf_audit_trail-language   TO ps_audit_trail-language.
  MOVE ps_hrkwf_audit_trail-created_by TO ps_audit_trail-created_by.

  TRY.
*     Convert UTC time stamp into local date and time
      CONVERT TIME STAMP ps_hrkwf_audit_trail-created_at
         TIME ZONE sy-zonlo
         INTO DATE ps_audit_trail-created_at_date
              TIME ps_audit_trail-created_at_time.

*     Convert XML document back into version of candidate's résumé
      CALL TRANSFORMATION id_indent
        SOURCE XML ps_hrkwf_audit_trail-content
        RESULT cand_resume = ls_cand_resume.

      MOVE-CORRESPONDING ls_cand_resume TO ps_audit_trail.

    CATCH cx_root INTO lo_exception.
      IF 1 EQ 2.
        MESSAGE e093(hrrcf0001).
*       Error when reading/writing an XML document
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous       = lo_exception
          hrobject       = me->hrobject
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '093'.
  ENDTRY.

ENDMETHOD.


METHOD create .
  DATA lo_instance TYPE REF TO cl_hrrcf_simple_main_object.
  DATA lo_exception TYPE REF TO cx_hrrcf.

  TRY.
      CALL METHOD cl_hrrcf_simple_main_object=>create_internal
        EXPORTING
          name      = name
          otype     = my_otype
          classname = my_classname
        IMPORTING
          instance  = lo_instance
          return    = return.

    CATCH cx_hrrcf INTO lo_exception.

      CLEAR application.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
           previous = lo_exception.

  ENDTRY.

  application ?= lo_instance.

ENDMETHOD.                    "


METHOD delete.

* Author: HGB

*--  Delete redundant data storage
  CALL METHOD cl_hrrcf_t77rcf_rd_at=>delete
    EXPORTING
      is_hrobject = me->hrobject.

* Delete application object and all related infotypes
  CALL METHOD super->delete
    IMPORTING
      return = return.

  CHECK return IS INITIAL.

* Delete audit trail for application in HRKWF
  CALL METHOD cl_hrrcf_hrkwf_storage=>delete_all_audit_trail
    EXPORTING
      ps_appl_hrobject = me->hrobject.

ENDMETHOD.


METHOD DELIMIT_CANDIDACY .
* XDP Copy Object: Interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'A655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA lt_object TYPE TABLE OF hrobject.
  DATA l_objid TYPE plog-objid.

  DATA delimitdate TYPE  sydatum.
  DATA lt_delimt_record TYPE TABLE OF p1001.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  delimitdate = sy-datum - 1.
  APPEND me->hrobject TO lt_object.

  CALL FUNCTION 'RH_READ_INFTY'
    EXPORTING
      infty                = '1001'
      istat                = '1'
      subty                = c_subty
      begda                = delimitdate
    TABLES
      innnn                = lt_relation
      OBJECTS              = lt_object
    EXCEPTIONS
      all_infty_with_subty = 1
      nothing_found        = 0
      no_objects           = 3
      wrong_condition      = 4
      OTHERS               = 5.
  IF sy-subrc NE 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
        hrobject = me->hrobject
*       INFOTYPE =
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ENDIF.

* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda LT delimitdate
               AND sobid = candidacy->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_CUT_INFTY'
      EXPORTING
        vtask               = 'D'
        gdate              = delimitdate
        histo              = space
      TABLES
        innnn              = lt_delimt_record
      EXCEPTIONS
        error_during_cut   = 1
        no_authorization   = 2
        gdate_before_begda = 3
        cut_of_timco_one   = 4
        corr_exit          = 5
        OTHERS             = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.


  REFRESH lt_delimt_record.
* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda gE delimitdate
               AND sobid = candidacy->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_DELETE_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_delimt_record
      EXCEPTIONS
        error_during_delete = 1
        no_authorization    = 2
        delete_first_record = 3
        corr_exit           = 4
        OTHERS              = 5.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.

  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD DELIMIT_CANDIDATE .
* XDP Copy Object: Interface

* XDP Copy Object
  CONSTANTS c_subty TYPE plog-subty VALUE 'B651'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA lt_object TYPE TABLE OF hrobject.
  DATA l_objid TYPE plog-objid.

  DATA delimitdate TYPE  sydatum.
  DATA lt_delimt_record TYPE TABLE OF p1001.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  delimitdate = sy-datum - 1.
  APPEND me->hrobject TO lt_object.

  CALL FUNCTION 'RH_READ_INFTY'
    EXPORTING
      infty                = '1001'
      istat                = '1'
      subty                = c_subty
      begda                = delimitdate
    TABLES
      innnn                = lt_relation
      OBJECTS              = lt_object
    EXCEPTIONS
      all_infty_with_subty = 1
      nothing_found        = 0
      no_objects           = 3
      wrong_condition      = 4
      OTHERS               = 5.
  IF sy-subrc NE 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
        hrobject = me->hrobject
*       INFOTYPE =
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ENDIF.

* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda LT delimitdate
               AND sobid = candidate->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_CUT_INFTY'
      EXPORTING
        vtask               = 'D'
        gdate              = delimitdate
        histo              = space
      TABLES
        innnn              = lt_delimt_record
      EXCEPTIONS
        error_during_cut   = 1
        no_authorization   = 2
        gdate_before_begda = 3
        cut_of_timco_one   = 4
        corr_exit          = 5
        OTHERS             = 6.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.


  REFRESH lt_delimt_record.
* XDP Copy Object
  LOOP AT    lt_relation
       INTO  ls_relation
             WHERE begda gE delimitdate
               AND sobid = candidate->hrobject-objid.
    APPEND ls_relation TO lt_delimt_record.
  ENDLOOP.
  IF sy-subrc = 0.
    CALL FUNCTION 'RH_DELETE_INFTY'
      EXPORTING
        vtask               = 'D'
      TABLES
        innnn               = lt_delimt_record
      EXCEPTIONS
        error_during_delete = 1
        no_authorization    = 2
        delete_first_record = 3
        corr_exit           = 4
        OTHERS              = 5.
    CASE sy-subrc .

      WHEN '0' .                "Success

      WHEN '2' .

        IF 1 EQ 0.
          MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum Ausführen dieser Funktion
        ENDIF.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = '5A'
            number = 278
          IMPORTING
            return = ls_return.
        APPEND ls_return TO return.

      WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>error_during_update
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.

    ENDCASE .
  ENDIF.

  RAISE EVENT rcf_relationship_changed
    EXPORTING
      hrobject = me->hrobject.

ENDMETHOD.                    "


METHOD get .
  DATA lo_instance TYPE REF TO cl_hrrcf_simple_main_object.
  DATA lo_exception TYPE REF TO cx_hrrcf.

  TRY.
      CALL METHOD cl_hrrcf_simple_main_object=>get_internal
        EXPORTING
          otype     = my_otype
          id        = id
          classname = my_classname
        IMPORTING
          instance  = lo_instance.

    CATCH cx_hrrcf INTO lo_exception.

      CLEAR application.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
           previous = lo_exception.

  ENDTRY.

  application ?= lo_instance.

ENDMETHOD.                    "


method GET_APPLICATION_SOURCE .
* Author: VSD

  data: lo_ai type ref to cl_hrrcf_appl_information,
        lt_ai type table of p5132, ls_ai type p5132,
        lt_appl_txt type rcf_t_appl_information_txt,
        ls_appl_txt type rcf_s_appl_information_txt,
        lo_exc type ref to cx_hrrcf.

  try.
      call method cl_hrrcf_appl_information=>get_instance
        EXPORTING
          hrobject = me->hrobject
        IMPORTING
          instance = lo_ai.

      if p_appl_source_txt is supplied.

        call method lo_ai->get_records_by_date_with_text
          EXPORTING
            language       = p_langu
          IMPORTING
            pt_appl_info_t = lt_appl_txt.

        read table lt_appl_txt index 1 into ls_appl_txt.

        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_appl_source = ls_appl_txt-tech_appl_source.
        p_appl_source_txt = ls_appl_txt-tech_appl_source_txt.
      else .

        call method lo_ai->get_records_by_date
          IMPORTING
            infotype_records = lt_ai.

        read table lt_ai index 1 into ls_ai.
        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_appl_source = ls_ai-tech_appl_source.

      endif .
*- Raise exception
    catch cx_hrrcf into lo_exc.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exc
          hrobject = me->hrobject.
  endtry.
endmethod.


method GET_APPLICATION_SOURCE_INFO .

  data: lo_ai type ref to cl_hrrcf_appl_information,
        lt_ai type table of p5132, ls_ai type p5132,
        lt_appl_txt type rcf_t_appl_information_txt,
        ls_appl_txt type rcf_s_appl_information_txt,
        lo_exc type ref to cx_hrrcf.

  try.
      call method cl_hrrcf_appl_information=>get_instance
        EXPORTING
          hrobject = me->hrobject
        IMPORTING
          instance = lo_ai.

      if p_appl_source_txt is supplied.

        call method lo_ai->get_records_by_date_with_text
          EXPORTING
            language       = p_langu
          IMPORTING
            pt_appl_info_t = lt_appl_txt.

        read table lt_appl_txt index 1 into ls_appl_txt.

        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_appl_source = ls_appl_txt-tech_appl_source.
        p_appl_source_txt = ls_appl_txt-tech_appl_source_txt.
      else .

        call method lo_ai->get_records_by_date
          IMPORTING
            infotype_records = lt_ai.

        read table lt_ai index 1 into ls_ai.
        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_appl_source = ls_ai-tech_appl_source.

      endif .
*- Raise exception
    catch cx_hrrcf into lo_exc.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exc
          hrobject = me->hrobject.
  endtry.
endmethod.


method get_application_status .
* Author: Joachim Gross
* SGS 08022002
* Additions: AS

  data: lo_ai type ref to cl_hrrcf_appl_information.
  data: lt_ai type table of p5132, ls_ai type p5132.
  data: lo_exception type ref to cx_hrrcf.

  data lt_appl_txt type rcf_t_appl_information_txt .
  data ls_appl_txt type rcf_s_appl_information_txt .

  try.
      call method cl_hrrcf_appl_information=>get_instance
        exporting
          hrobject = me->hrobject
        importing
          instance = lo_ai.

      if p_status_txt is supplied or p_reason_code_txt is supplied.

        call method lo_ai->get_records_by_date_with_text
          exporting
            date           = p_date
            language       = p_langu
          importing
            pt_appl_info_t = lt_appl_txt.

        read table lt_appl_txt index 1 into ls_appl_txt.

        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_status = ls_appl_txt-appl_status.
        p_status_txt = ls_appl_txt-status_txt .
        p_reason_code = ls_appl_txt-reason_code.
        p_reason_code_txt = ls_appl_txt-reason_code_txt.

      else .

        call method lo_ai->get_records_by_date
          exporting
            date             = p_date
          importing
            infotype_records = lt_ai.

        read table lt_ai index 1 into ls_ai.
        if sy-subrc is not initial.
          if 1 = 2.                      "Only for where used list
            message e073(hrrcf0001) with 'APPLICATION'.
          endif.

          raise exception type cx_hrrcf
            exporting
              message_type = 'E'
              message_class = 'HRRCF0001'
              message_number = 073
              message_par1   = 'APPLICATION' .

        endif.

        p_status = ls_ai-appl_status.
        p_reason_code = ls_ai-reason_code.

      endif .

    catch cx_hrrcf into lo_exception.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exception
          hrobject = me->hrobject.
  endtry.

endmethod.                    "get_candidacy_status


METHOD get_audit_trail.

* Author: HGB

  FIELD-SYMBOLS: <ls_audit_trail> TYPE rcf_s_hrkwf_audit_trail.

  DATA: lo_exception    TYPE REF TO cx_hrrcf,
        lt_audit_trail  TYPE rcf_t_hrkwf_audit_trail,
        ls_audit_trail  TYPE rcf_s_audit_trail,
        ls_version_info TYPE rcf_s_version_audit_trail.

  CLEAR: pt_audit_trail,
         pt_version_info.

  TRY.
*     Get all KW documents from audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>get_all_audit_trail
        EXPORTING
          ps_appl_hrobject = me->hrobject
        IMPORTING
          pt_audit_trail   = lt_audit_trail.

      LOOP AT lt_audit_trail ASSIGNING <ls_audit_trail>.
*       Convert KW document back into candidate's résumé
        CALL METHOD me->convert_hrkwf_audit_trail
          EXPORTING
            ps_hrkwf_audit_trail = <ls_audit_trail>
          IMPORTING
            ps_audit_trail       = ls_audit_trail.

*       Get information on version of audit trail
        CALL METHOD me->get_audit_trail_version_info
          EXPORTING
            ps_audit_trail  = ls_audit_trail
            p_language      = sy-langu
          IMPORTING
            ps_version_info = ls_version_info.

        APPEND ls_audit_trail  TO pt_audit_trail.
        APPEND ls_version_info TO pt_version_info.
      ENDLOOP.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD get_audit_trail_version_info.

* Author: HGB

  DATA: lo_candidate TYPE REF TO cl_hrrcf_candidate,
        lo_exception TYPE REF TO cx_hrrcf.

  CLEAR ps_version_info.

* Move administrative data
  MOVE-CORRESPONDING ps_audit_trail TO ps_version_info.

* Get language text
  SELECT SINGLE sptxt FROM t002t
    INTO ps_version_info-language_txt
   WHERE spras EQ p_language
     AND sprsl EQ ps_version_info-language.

  IF ps_version_info-language_txt IS INITIAL.
    MOVE ps_version_info-language TO ps_version_info-language_txt.
  ENDIF.

* Get full name of user who created the version
  TRY.
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          user      = ps_version_info-created_by
        IMPORTING
          candidate = lo_candidate.

      MOVE lo_candidate->centraldataperson-fullname TO ps_version_info-created_by_fullname.

      IF ps_version_info-created_by_fullname IS INITIAL.
        MOVE ps_version_info-created_by TO ps_version_info-created_by_fullname.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      MOVE ps_version_info-created_by
        TO ps_version_info-created_by_fullname.
  ENDTRY.

ENDMETHOD.


METHOD get_candidacies .

  CONSTANTS c_subty TYPE plog-subty VALUE 'A655'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '655'.

  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object TYPE REF TO object.
  DATA lo_candidacy TYPE REF TO cl_hrrcf_candidacy.
  DATA:
    lv_subrc TYPE sysubrc.


  CLEAR candidacy_list.

*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = candidacy_list.


* if no recprds exist, read from database

  IF candidacy_list IS INITIAL.

    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

          CALL METHOD cl_hrrcf_candidacy=>get
            EXPORTING
              id        = l_objid
            IMPORTING
              candidacy = lo_candidacy.

          APPEND lo_candidacy TO candidacy_list.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.

* register records in the buffer

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = candidacy_list.


  ENDIF.

ENDMETHOD.                    "


METHOD get_candidates .

  CONSTANTS c_subty TYPE plog-subty VALUE 'B651'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '651'.


  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object TYPE REF TO object.
  DATA lo_candidate TYPE REF TO cl_hrrcf_candidate.
  DATA:
    lv_subrc TYPE sysubrc.
*

  CLEAR candidate_list.

*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = candidate_list.


* if no recprds exist, read from database

  IF candidate_list IS INITIAL.

    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

          CALL METHOD cl_hrrcf_candidate=>get
            EXPORTING
              id        = l_objid
            IMPORTING
              candidate = lo_candidate.

          IF NOT lo_candidate IS INITIAL.
            APPEND lo_candidate TO candidate_list.
          ELSE.
            IF 1 = 2.
              MESSAGE e090(hrrcf0001) WITH '&'.
*           Das Objekt &1 konnte nicht instanziiert werden
            ENDIF.
            RAISE EXCEPTION TYPE cx_hrrcf
              EXPORTING
*              HROBJECT =
                message_type    = 'E'
                message_class   = 'HRRCF0001'
                message_number  = '090'
                message_par1    = 'CL_HRRCF_CANDIDATE'.
          ENDIF.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.

* register records in the buffer

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = candidate_list.


  ENDIF.

ENDMETHOD.                    "


METHOD get_cand_resume_fr_audit_trail.

* Author: HGB

  DATA: lo_exception   TYPE REF TO cx_hrrcf,
        ls_hrkwf_trail TYPE rcf_s_hrkwf_audit_trail,
        ls_audit_trail TYPE rcf_s_audit_trail.

  CLEAR: ps_cand_resume,
         ps_version_info.

  TRY.
*     Get requested KW document from audit trail
      CALL METHOD cl_hrrcf_hrkwf_storage=>get_audit_trail_by_version
        EXPORTING
          ps_appl_hrobject = me->hrobject
          p_version        = p_version
        IMPORTING
          ps_audit_trail   = ls_hrkwf_trail.

*     Convert KW document back into candidate's résumé
      CALL METHOD me->convert_hrkwf_audit_trail
        EXPORTING
          ps_hrkwf_audit_trail = ls_hrkwf_trail
        IMPORTING
          ps_audit_trail       = ls_audit_trail.

      MOVE-CORRESPONDING ls_audit_trail TO ps_cand_resume.

*     Get information on version of audit trail
      CALL METHOD me->get_audit_trail_version_info
        EXPORTING
          ps_audit_trail  = ls_audit_trail
          p_language      = sy-langu
        IMPORTING
          ps_version_info = ps_version_info.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD get_expiring_applications.

  SELECT objid FROM hrp5132 INTO TABLE p_application_id_list  "#EC CI_NOFIELD
     WHERE expiration_date BETWEEN p_date_from AND p_date_to.

ENDMETHOD.


METHOD get_pinst_guid .

  DATA : lo_appl_info TYPE REF TO cl_hrrcf_appl_information,
         lt_appl_info TYPE TABLE OF p5132,
         ls_appl_info TYPE          p5132,
         lo_exception TYPE REF TO cx_hrrcf .

  TRY.
      CALL METHOD cl_hrrcf_appl_information=>get_instance
        EXPORTING
          hrobject = me->hrobject
        IMPORTING
          instance = lo_appl_info.

      CALL METHOD lo_appl_info->get_records_by_date
        EXPORTING
          date             = p_date
        IMPORTING
          infotype_records = lt_appl_info.

      READ TABLE lt_appl_info INDEX 1 INTO ls_appl_info.
      IF sy-subrc IS NOT INITIAL.
        IF 1 = 2.                      "Only for where used list
          MESSAGE e073(hrrcf0001) WITH 'APPLICATION'.
        ENDIF.

        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            message_type = 'E'
            message_class = 'HRRCF0001'
            message_number = 073
            message_par1   = 'APPLICATION' .
      ENDIF .

      p_pinst_guid = ls_appl_info-pinst_guid .

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD get_postings .

  CONSTANTS c_subty TYPE plog-subty VALUE 'A653'.
  CONSTANTS c_relat TYPE p1001-relat VALUE '653'.


  DATA lt_relation TYPE TABLE OF p1001.
  DATA ls_relation TYPE          p1001.
  DATA l_objid     TYPE plog-objid.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA lo_object    TYPE REF TO object.
  DATA lo_posting   TYPE REF TO cl_hrrcf_posting.
  DATA:
    lv_subrc TYPE sysubrc.
*
  CLEAR posting_list.

*Check whether records for the  relationshiptype exists in buffer


  CALL METHOD me->get_relationship
    EXPORTING
      relat              = c_relat
    IMPORTING
      relationship_table = posting_list.


* if no recprds exist, read from database

  IF posting_list IS INITIAL.

    CALL METHOD cl_hrrcf_object_buffer=>read_relationship
      EXPORTING
        pv_isubty    = c_subty
        ps_ihrobject = me->hrobject
      IMPORTING
        pt_erelation = lt_relation
        pv_esubrc    = lv_subrc.

    IF lv_subrc <> 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
          hrobject = me->hrobject
*       INFOTYPE =
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.
    ENDIF.

    LOOP AT    lt_relation
         INTO  ls_relation
               WHERE begda LE sy-datum
                 AND endda GE sy-datum.
      TRY.

          l_objid = ls_relation-sobid.

          CALL METHOD cl_hrrcf_posting=>get
            EXPORTING
              id      = l_objid
            IMPORTING
              posting = lo_posting.

          APPEND lo_posting TO posting_list.

        CATCH cx_hrrcf INTO lo_exception.

          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
               previous = lo_exception.

      ENDTRY.
    ENDLOOP.
* register records in the buffer

    CALL METHOD me->register_relationship
      EXPORTING
        relat              = c_relat
        relationship_table = posting_list.


  ENDIF.

ENDMETHOD.                    "


method get_status_reason_history .
*
* Author: AS
*
  data lo_appl_info type ref to cl_hrrcf_appl_information.
  data lt_field_set type rcf_t_fieldname.
*
  call method cl_hrrcf_appl_information=>get_instance
    exporting
      hrobject = me->hrobject
    importing
      instance = lo_appl_info.
*
  if lo_appl_info is bound.
*
    append 'APPL_STATUS' to lt_field_set.
    append 'REASON_CODE' to lt_field_set.
*
    call method lo_appl_info->get_field_set_history_tc12
      exporting
        field_set = lt_field_set
      importing
        field_log = field_log.
*
  endif.
*
endmethod.


METHOD legal_check_before_delete.
  DATA: lt_cdcy_list    TYPE rcf_t_candidacy.
  DATA: lo_candidacy    TYPE REF TO cl_hrrcf_candidacy.
  DATA: lo_cdcy_bl      TYPE REF TO cl_hrrcf_candidacy_bl.
  DATA: ls_return       TYPE bapiret2.
  DATA: lv_ret_date     TYPE dats.

  CALL METHOD me->get_candidacies
    IMPORTING
      candidacy_list = lt_cdcy_list.

  CALL METHOD cl_hrrcf_candidacy_bl=>get_instance
    RECEIVING
      return = lo_cdcy_bl.

  LOOP AT lt_cdcy_list INTO lo_candidacy.
    CALL METHOD lo_cdcy_bl->get_requi_retention_date
      EXPORTING
        ps_cdcy_hrobject = lo_candidacy->hrobject
      IMPORTING
        p_ret_date       = lv_ret_date.

    IF lv_ret_date GE sy-datum.
      CLEAR ls_return.
      IF 1 EQ 0.
        MESSAGE e111(hrrcf0002).
*     End of retention period not yet reached
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = '111'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
ENDCLASS.