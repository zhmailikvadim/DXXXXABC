class CL_HRRCF_CANDIDATE_BUPA_BL definition
  public
  final
  create private .

public section.
*"* public components of class CL_HRRCF_CANDIDATE_BUPA_BL
*"* do not include other source files here!!!

  interfaces IF_HRRCF_CONSTANTS .

  aliases DELETE
    for IF_HRRCF_CONSTANTS~DELETE_OPERATION .
  aliases FALSE
    for IF_HRRCF_CONSTANTS~FALSE .
  aliases HIGH_DATE
    for IF_HRRCF_CONSTANTS~HIGH_DATE .
  aliases INSERT
    for IF_HRRCF_CONSTANTS~INSERT_OPERATION .
  aliases LOW_DATE
    for IF_HRRCF_CONSTANTS~LOW_DATE .
  aliases MODIFY
    for IF_HRRCF_CONSTANTS~MODIFY_OPERATION .
  aliases MSGCL_ADMIN
    for IF_HRRCF_CONSTANTS~MSGCL_ADMIN .
  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS~MSGCL_USER .
  aliases TRUE
    for IF_HRRCF_CONSTANTS~TRUE .

  class-methods CHECK_ADDRESS
    importing
      !IV_ADDR_OBJ_TYPE type SZAD_FIELD-ADDR_TYPE
      !IS_ADDR_DATA type ADDR2_DATA
    exporting
      !EV_RETCODE type AD_RCERROR
      !ET_ADDR_ERROR type ADDR_ERROR_TAB .
  class-methods CHECK_EMAIL_FORMAT
    importing
      !P_EMAIL type AD_SMTPADR
    exporting
      !RETURN type BAPIRETTAB .
  methods CHECK_EMAIL_UNIQUENESS
    importing
      !P_EMAIL type AD_SMTPADR
    returning
      value(P_RESULT) type BOOLE_D
    raising
      CX_HRRCF .
  methods CHECK_TITLE_SEX
    importing
      !P_TITLE type AD_TITLE
    exporting
      !P_SET type BOOLE_D
    changing
      !P_SEX type BU_SEXID .
  methods CONSTRUCTOR
    importing
      value(USER) type SYUNAME default SY-UNAME .
  class-methods GET_CANDIDATE_SEX
    importing
      !IT_HROBJECT type RCF_T_HROBJECT optional
      !IT_OTJID type RCF_T_OTJID optional
    exporting
      !ET_SEX type RCF_T_CANDIDATE_WITH_SEX .
  methods GET_CONTACT_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PT_ADDRESSDATA type RCF_T_ADDRESSDATA_BP
      !PT_TELEFONDATA type RCF_T_TELEFONDATA_BP
      !PT_FAXDATA type RCF_T_FAXDATA_BP
      !PT_EMAILDATA type RCF_T_EMAILDATA_BP
    raising
      CX_HRRCF .
  methods GET_FREE_COMM_CHANNEL
    importing
      !PS_CAND_HROBJECT type HROBJECT
      !P_COMM_TYPE type RCF_COMM_TYPE default '0000'
    exporting
      !P_COMM_CHANNEL type RCF_COMM_CHANNEL
    raising
      CX_HRRCF .
  class-methods GET_INSTANCE
    returning
      value(RETURN) type ref to CL_HRRCF_CANDIDATE_BUPA_BL .
  methods GET_PERS_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PS_CENTRALDATAPERSON type BAPIBUS1006_CENTRAL_PERSON
      !PS_CENTRALDATA type BAPIBUS1006_CENTRAL
    raising
      CX_HRRCF .
  methods GET_PREFERRED_CONTACT_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PS_ADDRESSDATA type RCF_S_ADDRESSDATA_BP
      !PS_TELEFONDATA type RCF_S_TELEFONDATA_BP
      !PS_FAXDATA type RCF_S_FAXDATA_BP
      !PS_EMAILDATA type RCF_S_EMAILDATA_BP
    raising
      CX_HRRCF .
  methods MAINTAIN_ADDRESS_DATA
    importing
      !PS_ADDRESSDATA type RCF_S_ADDRESSDATA_BP
      !P_OPERATION type RCF_OPERA
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CONTACT_DATA_MDE
    importing
      !PS_CAND_HROBJECT type HROBJECT
    exporting
      !PT_RETURN type BAPIRETTAB
    changing
      !PS_TELEFONDATA type RCF_S_TELEFONDATA_BP
      !PS_EMAILDATA type RCF_S_EMAILDATA_BP
      !PS_ADDRESSDATA type RCF_S_ADDRESSDATA_BP
    raising
      CX_HRRCF .
  methods MAINTAIN_EMAIL_DATA
    importing
      !PS_EMAILDATA type RCF_S_EMAILDATA_BP
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_OPERATION type RCF_OPERA optional
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_PERS_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_CENTRALDATA type BAPIBUS1006_CENTRAL
      !PS_CENTRALDATAPERSON type BAPIBUS1006_CENTRAL_PERSON
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_TELEFON_DATA
    importing
      !PS_TELEFONDATA type RCF_S_TELEFONDATA_BP
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_OPERATION type RCF_OPERA
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
protected section.
*"* protected components of class CL_HRRCF_CONTACT_DATA_BL
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_CANDIDATE_BUPA_BL
*"* do not include other source files here!!!

  class-data INSTANCE type ref to CL_HRRCF_CANDIDATE_BUPA_BL .
ENDCLASS.



CLASS CL_HRRCF_CANDIDATE_BUPA_BL IMPLEMENTATION.


METHOD check_address.

* author: CG

  DATA ls_addr_data TYPE addr2_data.

  ls_addr_data = is_addr_data.

  CALL FUNCTION 'ADDR_ACCEPT_REG_DATA_ERROR'
    EXPORTING
      accept_error = true.

  CALL FUNCTION 'ADDR_CHECK'
    EXPORTING
      address_object_type = iv_addr_obj_type
    IMPORTING
      returncode          = ev_retcode
    TABLES
      error_table         = et_addr_error
    CHANGING
      address_data_2      = ls_addr_data.

ENDMETHOD.


METHOD check_email_format .

* need for function modul
  TYPE-POOLS sx.

  CONSTANTS c_addr_type TYPE sx_addrtyp VALUE 'INT'.

  DATA  ls_return     TYPE bapiret2.
  DATA  lv_email_addr TYPE sx_address.

  lv_email_addr-type    = c_addr_type.
  lv_email_addr-address = p_email.

  CALL FUNCTION 'SX_INTERNET_ADDRESS_TO_NORMAL'
    EXPORTING
      address_unstruct    = lv_email_addr
    EXCEPTIONS
      error_address_type  = 1
      error_address       = 2
      error_group_address = 3
      OTHERS              = 4.

  IF sy-subrc <> 0.
    IF 1 = 0.                     "for where-used list
* -- address not valid
      MESSAGE e033(hrrcf0002).
*   E-Mail-Adresse ist ungÃ¼ltig. Bitte korrigieren Sie Ihre Eingabe
    ENDIF.

    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'HRRCF0002'
        number = '033'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO return.
  ENDIF.

ENDMETHOD.


method check_email_uniqueness .
*
* Additions: AS
*
* This method checks if the e-mail-address is unique.
*
  data lo_exception type ref to cx_hrrcf .
*
  try.
*
      call method cl_hrrcf_address_service=>is_email_unique
        exporting
          e_mail = p_email
        receiving
          result = p_result.
*
    catch cx_hrrcf into lo_exception .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method check_title_sex .
*
* Additions: AS
*
* This method finds the right sex regarding to the title.
*
  data ls_tsad3       type  tsad3.
  data : ls_return type bapiret2.
*
  call function 'ADDR_TSAD3_READ'
    exporting
      title_key           = p_title
    importing
      tsad3_out           = ls_tsad3
    exceptions
      title_key_not_found = 1
      others              = 2.
  if sy-subrc <> 0.
*      nothing happens
  endif.
*
  if not ls_tsad3-sex is initial.
    p_set = true .
    if ls_tsad3-sex = '1'.
      p_sex ='2'.
    else.
      p_sex = '1'.
    endif.
  endif.
*
endmethod.


METHOD CONSTRUCTOR .
ENDMETHOD.


METHOD get_candidate_sex.
* This method returns the gender information for a given list of candidates

  TYPES:
  BEGIN OF lty_s_objid_varyf,
    objid TYPE hrobjid,
    varyf TYPE varyf,
  END OF lty_s_objid_varyf.

  TYPES:
  BEGIN OF lty_s_rel_object_1001_sex,
    plvar TYPE plvar,
    otype TYPE otype,
    objid TYPE objektid,
    sobid TYPE sobid,
    xsexm TYPE bu_xsexm,
    xsexf TYPE bu_xsexf,
    xsexu TYPE bu_xsexu,
  END OF lty_s_rel_object_1001_sex.

  DATA:
    lt_otjid       TYPE          rcf_t_otjid,
    lt_objid_varyf TYPE TABLE OF lty_s_objid_varyf,
    lt_cp_bpsex    TYPE TABLE OF lty_s_rel_object_1001_sex,
    ls_objid_varyf TYPE          lty_s_objid_varyf,
    ls_cp_bpsex    TYPE          lty_s_rel_object_1001_sex,
    ls_hrobject    TYPE          hrobject,
    ls_otjid       TYPE          otjid,
    ls_sex         TYPE          rcf_s_candidate_with_sex,
    lv_plvar       TYPE          plvar.

  IF it_hrobject IS NOT INITIAL.

    READ TABLE it_hrobject INTO ls_hrobject INDEX 1.

    IF sy-subrc NE 0 OR ls_hrobject-otype NE 'NA'.
      RETURN.
    ENDIF.

    lv_plvar = ls_hrobject-plvar.
    CLEAR ls_hrobject.

    LOOP AT it_hrobject INTO ls_hrobject.
      CONCATENATE ls_hrobject-otype ls_hrobject-objid INTO ls_otjid.
      APPEND ls_otjid TO lt_otjid.
    ENDLOOP.

  ELSEIF it_otjid IS NOT INITIAL.

    lv_plvar = cl_hrrcf_general_bl=>get_plvar( ).
    lt_otjid = it_otjid.

  ENDIF.

* Get the NAs CPs
  IF lt_otjid[] IS NOT INITIAL.
  SELECT objid varyf
  FROM hrp1001
  INTO TABLE lt_objid_varyf
  FOR ALL ENTRIES IN lt_otjid
  WHERE otjid EQ lt_otjid-otjid
    AND subty EQ 'A650'
    AND sclas EQ 'CP'
    AND plvar EQ lv_plvar
    AND endda GE sy-datum.
  ENDIF.

  IF lt_objid_varyf[] IS NOT INITIAL.
  SELECT a~plvar a~otype a~objid a~sobid b~xsexm b~xsexf b~xsexu
    FROM hrp1001 AS a
    INNER JOIN but000 AS b ON b~partner = a~sobid
    INTO CORRESPONDING FIELDS OF TABLE lt_cp_bpsex
    FOR ALL ENTRIES IN lt_objid_varyf
    WHERE a~plvar EQ lv_plvar
      AND a~otjid EQ lt_objid_varyf-varyf
      AND a~subty EQ 'B207'
      AND a~sclas EQ 'BP'
      AND a~begda LE sy-datum
      AND a~endda GE sy-datum.
  ENDIF.

  LOOP AT lt_objid_varyf INTO ls_objid_varyf.

    READ TABLE lt_cp_bpsex
    INTO ls_cp_bpsex
    WITH KEY objid = ls_objid_varyf-varyf+2(8).

    IF sy-subrc EQ 0.
      ls_sex-candidate-plvar = lv_plvar.
      ls_sex-candidate-otype = 'NA'.
      ls_sex-candidate-objid = ls_objid_varyf-objid.

      IF ls_cp_bpsex-xsexm EQ abap_true.
        ls_sex-sex = '2'.
      ELSEIF ls_cp_bpsex-xsexf EQ abap_true.
        ls_sex-sex = '1'.
      ELSEIF ls_cp_bpsex-xsexu EQ abap_true.
        ls_sex-sex = '0'.
      ENDIF.

    APPEND ls_sex TO et_sex.

  ENDIF.

  ENDLOOP.

ENDMETHOD.


method get_contact_data .
*
* Additions: AS
*
* This method reads the complete contact data.
*
  data lo_bas type ref to cl_hrrcf_address_service.
  data lo_exception type ref to cx_hrrcf.
  data lo_candidate type ref to cl_hrrcf_candidate.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get address service
      call method cl_hrrcf_address_service=>get_instance
        exporting
          businesspartner = lo_candidate->partner
        importing
          instance        = lo_bas.

*
      pt_addressdata = lo_bas->addressdata.
      pt_telefondata = lo_bas->telefondata.
      pt_emaildata = lo_bas->e_maildata.
      pt_faxdata = lo_bas->faxdata.
*
    catch cx_hrrcf into lo_exception.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exception .
  endtry.
*
endmethod.                    "get_preferred_contact_data


METHOD get_free_comm_channel.

* Authors: PEV, HGB

* This method determines the first free communication channel
* for the given communication type (default '0000' = address).

  DATA: lo_candidate TYPE REF TO cl_hrrcf_candidate,
        lo_bas       TYPE REF TO cl_hrrcf_address_service,
        lo_exception TYPE REF TO cx_hrrcf.

  TRY.
*     get candidate
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          id        = ps_cand_hrobject-objid
        IMPORTING
          candidate = lo_candidate.

*     get address service
      CALL METHOD cl_hrrcf_address_service=>get_instance
        EXPORTING
          businesspartner = lo_candidate->partner
        IMPORTING
          instance        = lo_bas.

*     get first free communication channel
      CALL METHOD lo_bas->get_free_comm_channel
        EXPORTING
          p_comm_type    = p_comm_type
        IMPORTING
          p_comm_channel = p_comm_channel.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception.
  ENDTRY.

ENDMETHOD.


method get_instance .
*
* Author: AS
*
  if not instance is bound.
    create object instance.
  endif.
*
  return = instance.
*
endmethod.


method get_pers_data .
*
* Additions: AS
*
* This method reads candidate's personal data.
*
  data lo_exception type ref to cx_hrrcf.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      ps_centraldataperson = lo_candidate->centraldataperson.
      ps_centraldata = lo_candidate->centraldata.
*
    catch cx_hrrcf into lo_exception .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method get_preferred_contact_data .
*
* Additions: AS
*
* This method reads the preferred contact data.
*
  data lo_bas type ref to cl_hrrcf_address_service.
  data: lo_exception type ref to cx_hrrcf.
  data lo_candidate type ref to cl_hrrcf_candidate.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get address service
      call method cl_hrrcf_address_service=>get_instance
        exporting
          businesspartner = lo_candidate->partner
        importing
          instance        = lo_bas.

*
      call method lo_bas->get_preferred_contact_data
        importing
          addressdata = ps_addressdata
          telefondata = ps_telefondata
          faxdata     = ps_faxdata
          emaildata   = ps_emaildata.
*
    catch cx_hrrcf into lo_exception.
      raise exception type cx_hrrcf
        exporting
          previous = lo_exception .
  endtry.
*
endmethod.                    "get_preferred_contact_data


method maintain_address_data .
*
* Additions: AS
*
* This method maintains the address data:
*
  data : ls_addressdata type rcf_s_addressdata_bp ,
         lo_exception type ref to cx_hrrcf,
         lo_bas type ref to cl_hrrcf_address_service,
         lo_candidate       TYPE REF TO cl_hrrcf_candidate,
         lo_cand_info       TYPE REF TO cl_hrrcf_candidate_info,
         lv_external_commit TYPE boole_d.
*
  move ps_addressdata to ls_addressdata .
*
  lv_external_commit = cl_hrrcf_simple_main_object=>luw_mode.
  TRY.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get address service
      call method cl_hrrcf_address_service=>get_instance
        exporting
          businesspartner = lo_candidate->partner
        importing
          instance        = lo_bas.

*
      case p_operation .
        when insert .
          call method lo_bas->add_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return
            changing
              addressdata = ls_addressdata.
        when modify .
          call method lo_bas->update_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return
            changing
              addressdata = ls_addressdata.
        when delete .
          call method lo_bas->delete_contact_data
            exporting
              addressdata = ls_addressdata
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return.
      endcase .

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.

    catch cx_hrrcf into lo_exception .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


METHOD maintain_contact_data_mde.
*
* Author   : PC
* Additions: AS, HGB
*
* This method maintains the contact data for the Minimal Data Entry.
*
  DATA lo_exception TYPE REF TO cx_hrrcf_address_service.
  DATA lo_bas TYPE REF TO cl_hrrcf_address_service.
  DATA lo_candidate TYPE REF TO cl_hrrcf_candidate.
  DATA lv_external_commit TYPE boole_d.
*
  CHECK NOT ps_emaildata IS INITIAL OR
        NOT ps_telefondata IS INITIAL OR
        NOT ps_addressdata IS INITIAL.
*
  lv_external_commit = cl_hrrcf_simple_main_object=>luw_mode.
  TRY.
*
*     get candidate
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          id        = ps_cand_hrobject-objid
        IMPORTING
          candidate = lo_candidate.
*
*     get address service
      CALL METHOD cl_hrrcf_address_service=>get_instance
        EXPORTING
          businesspartner = lo_candidate->partner
        IMPORTING
          instance        = lo_bas.
*
*     maintain contact data
      CALL METHOD lo_bas->add_contact_data
        EXPORTING
          external_commit = lv_external_commit             "MELN1690866
        IMPORTING
          return      = pt_return
        CHANGING
          addressdata = ps_addressdata
          telefondata = ps_telefondata
          emaildata   = ps_emaildata.
*
      DELETE pt_return WHERE type NE 'E' AND type NE 'A'.
*
    CATCH cx_hrrcf_address_service INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf.
  ENDTRY.
*
ENDMETHOD.


method maintain_email_data.
*
* Additions: AS, HGB
*
* This method maintains email data. By default, i.e. if P_OPERATION is
* not supplied, the maintenance mode is determined automatically and
* the uniqueness of the email address is checked. Else, the maintenance
* mode is set according to P_OPERATION and the email address is updated
* without any further check => this is relevant in the context of
* Application Entry (MDE).
*
  data ls_emaildata type rcf_s_emaildata_bp.
  data ls_email     type rcf_s_emaildata_bp.
  data lv_operation type rcf_opera.
  data lo_exception type ref to cx_hrrcf.
  data lv_result    type boole_d.
  data ls_return    type bapiret2.
  data lo_bas       type ref to cl_hrrcf_address_service.
  data lo_candidate type ref to cl_hrrcf_candidate.
  DATA lo_cand_info TYPE REF TO cl_hrrcf_candidate_info.
  DATA lv_external_commit TYPE boole_d.
*
  check not ps_emaildata is initial.
*
  move ps_emaildata to ls_email.
*
  lv_external_commit = cl_hrrcf_simple_main_object=>luw_mode.
  TRY.
*
*     get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
*     get address service
      call method cl_hrrcf_address_service=>get_instance
        exporting
          businesspartner = lo_candidate->partner
        importing
          instance        = lo_bas.
*
      if p_operation is supplied.
*     set operation and do not check email uniqueness
        lv_operation = p_operation.
      else.
*
*     get operation
        read table lo_bas->e_maildata index 1 into ls_emaildata.
*
        if ls_emaildata-e_mail is initial.
          lv_operation = insert.
        elseif ps_emaildata-e_mail eq ls_emaildata-e_mail.
          lv_operation = space.
        else.
          lv_operation = modify.
        endif.
*
*     check email uniqueness
        if ( lv_operation ne delete ) and ( lv_operation ne space ).
          lv_result = check_email_uniqueness( ps_emaildata-e_mail ).
          if lv_result eq false.
            if 1 = 2.
              message e014(hrrcf0002).
* Die E-Mail-Adresse ist bereits reserviert. Geben Sie eine andere an.
            endif .
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF0002'
                number = '014'
              importing
                return = ls_return.
            append ls_return to pt_return.
          endif.
        endif.
*
        check pt_return is initial.
      endif.
*
*     maintain business partner
      case lv_operation.
        when insert.
          call method lo_bas->add_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return    = pt_return
            changing
              emaildata = ls_email.
*
        when modify.
          call method lo_bas->update_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return    = pt_return
            changing
              emaildata = ls_email.
*
        when delete.
          call method lo_bas->delete_contact_data
            exporting
              emaildata = ls_email
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return    = pt_return.
      endcase.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.

    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method maintain_pers_data .
*
* Additions: AS
*
* This method maintains candidate's personal data.
*
  DATA: lo_exception       TYPE REF TO cx_hrrcf,
        lo_candidate       TYPE REF TO cl_hrrcf_candidate,
        lv_external_commit TYPE boole_d.
*
  lv_external_commit = cl_hrrcf_simple_main_object=>luw_mode.
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      call method lo_candidate->change_personal_data
        exporting
          centraldataperson = ps_centraldataperson
          centraldata       = ps_centraldata
          external_commit   = lv_external_commit           "MELN1690866
        IMPORTING
          return            = pt_return.
*
      delete pt_return where type ne 'A' and type ne 'E'.
*
    catch cx_hrrcf into lo_exception .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method maintain_telefon_data .
*
* Additions: AS
*
* This method maintains the telephone data.
*
  data : ls_telefondata type rcf_s_telefondata_bp ,
         lo_exception type ref to cx_hrrcf,
         lo_bas type ref to cl_hrrcf_address_service,
         lo_candidate       TYPE REF TO cl_hrrcf_candidate,
         lo_cand_info       TYPE REF TO cl_hrrcf_candidate_info,
         lv_external_commit TYPE boole_d.
*
  move ps_telefondata to ls_telefondata .
*
  lv_external_commit = cl_hrrcf_simple_main_object=>luw_mode.
  TRY.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get address service
      call method cl_hrrcf_address_service=>get_instance
        exporting
          businesspartner = lo_candidate->partner
        importing
          instance        = lo_bas.

*
      case p_operation .
        when insert .
          call method lo_bas->add_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return
            changing
              telefondata = ls_telefondata.
        when modify .
          call method lo_bas->update_contact_data
            EXPORTING
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return
            changing
              telefondata = ls_telefondata.
        when delete .
          call method lo_bas->delete_contact_data
            exporting
              telefondata = ls_telefondata
              external_commit = lv_external_commit         "MELN1690866
            IMPORTING
              return      = pt_return.
      endcase .

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.

    catch cx_hrrcf into lo_exception .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.
ENDCLASS.