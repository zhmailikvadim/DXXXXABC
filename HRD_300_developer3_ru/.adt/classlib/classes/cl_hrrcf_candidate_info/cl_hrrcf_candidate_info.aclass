class CL_HRRCF_CANDIDATE_INFO definition
  public
  inheriting from CL_HRRCF_INFOTYPE
  create private .

public section.

  methods CHANGE_STATUS
    importing
      !P_NEW_STATUS type RCF_CAND_STATUS
      !CHECK_ONLY type BOOLE_D optional
      !IM_V_DEREGISTER type BOOLE_D optional
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods CONSTRUCTOR
    importing
      !HROBJECT type HROBJECT .
  class-methods GET_ALL_CANDIDATE_DETAILS
    exporting
      !RETURN type BAPIRETTAB
      !PT_5102 type RCF_T_CAND_INFO .
  class-methods GET_CANDIDATE_DETAILS
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !PT_5102 type RCF_T_CAND_INFO
      !RETURN type BAPIRETTAB .
  class-methods GET_DEREG_CAND_LIST
    exporting
      !PT_5102 type RCF_T_CAND_INFO
      !RETURN type BAPIRETTAB .
  class-methods GET_INSTANCE
    importing
      !HROBJECT type HROBJECT
    exporting
      !INSTANCE type ref to CL_HRRCF_CANDIDATE_INFO .
  methods GET_RECORDS_BY_DATE_WITH_TEXT
    importing
      !P_DATE type DATS default SY-DATUM
      !P_LANGUAGE type SPRAS default SY-LANGU
      !P_5102 type P5102 optional
    exporting
      !PT_CAND_INFO_T type RCF_T_CAND_INFO_TEXT
    raising
      CX_HRRCF .
  class-methods GET_UNVERIFIED_CAND_LIST
    importing
      !IV_VERIFICATION_STATUS type CHAR1
      !IV_BEGDA_REGISTRATION_PERIOD type BEGDATUM optional
      !IV_ENDDA_REGISTRATION_PERIOD type ENDDATUM optional
    exporting
      !ET_UNVERIFIED_CANDIDATES type RCF_T_UNVERIFIED_CANDIDATE
      !ET_UNVERIFIED_CAND_HROBJECTS type RCF_T_HROBJECT
      !ET_RETURN type BAPIRETTAB .
  methods SET_CLASSIFICATION
    importing
      !P_CLASSIFICATION type RCF_CAND_CLASSIFICATION
      !P_IS_PROCESSED type RCF_CAND_IS_CLASSIFIED
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods SET_DEREGISTER_FLAG
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods SET_IS_INACTIVE_FLAG
    importing
      !IS_INACTIVE type RCF_EMPLOYEE_INACTIVE
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
      !IM_V_CLR_EMAIL_UPD type BOOLE_D optional
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods SET_PRIVACY_STATUS
    importing
      !P_PRIVACY_STATUS type RCF_PRIVACY_STATEMENT
      !CHECK_ONLY type BOOLE_D optional
      !P_PRIVACY_VERSION type RCF_PRIVACY_VER optional
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods UPDATE_OF_PROFILE
    importing
      !CHECK_ONLY type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods UPDATE_PRIVATE_EMAIL
    importing
      !PS_EMAIL type AD_SMTPADR
      !PV_EXTERNAL_COMMIT type BOOLE_D default SPACE
      !IM_V_PVT_MAIL_UPD type BOOLE_D optional
      !IV_BUPA_UPD type BOOLE_D default ABAP_FALSE
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods READ_PRIVATE_EMAIL
    exporting
      !PS_EMAIL type AD_SMTPADR .
  methods RESET_DEREGISTER_FLAG
    importing
      !EXTERNAL_COMMIT type BOOLE_D default SPACE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods READ_BUSINESS_EMAIL
    importing
      !IM_V_USERID type SYUNAME default SY-UNAME
    exporting
      !EX_S_EMAIL_DETAILS type RCF_S_EMAILDATA_BP .
  methods UPDATE_PRIVATE_EMAIL_BP
    importing
      !IV_EMAIL type AD_SMTPADR
      !IV_EMAIL_OLD type AD_SMTPADR
    exporting
      !ET_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  class-methods GET_CONSENT_PENDING_CAND_LIST
    exporting
      !EX_T_5102 type RCF_T_CAND_INFO
      !RETURN type BAPIRETTAB
      !EX_T_HROBJECT type RCF_T_HROBJECT .
protected section.

  methods CHECK_BUSINESS_RULES
    redefinition .
  methods READ_RECORDS
    redefinition .
private section.

  constants MY_CLASSNAME type RCF_CLASSNAME value 'CL_HRRCF_CANDIDATE_INFO'. "#EC NOTEXT

  methods ASSIGN_TEXT_TO_ENTRIES
    importing
      !PT_INFO type RCF_T_CAND_INFO
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PT_CAND_INFO_T type RCF_T_CAND_INFO_TEXT .
  methods CHECK_STATUS_CHANGE
    importing
      !P_CANDIDATE_INFORMATION type WPLOG
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods GET_POSSIBLE_STATUS_LIST
    importing
      !PREVIOUS_RECORD type P5102
    exporting
      !STATUS_LIST type RCF_T_CAND_STATUS_LIST
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  methods ON_CHANGE_OF_STATUS
    for event RCF_INFOTYPE_RECORD_CHANGED of CL_HRRCF_CANDIDATE_INFO
    importing
      !HRRCF_INFOTYPE_OBJECT
      !BEFORE_IMAGE
      !EXTERNAL_COMMIT .
ENDCLASS.



CLASS CL_HRRCF_CANDIDATE_INFO IMPLEMENTATION.


METHOD assign_text_to_entries .
***************************************************************
* This method has been redirected to the mass access class.****
***************************************************************
  DATA:
    lo_candidate_mass_access    TYPE REF TO if_hrrcf_candidate_mass_access.

  CALL METHOD cl_hrrcf_mass_access=>get_instance
    IMPORTING
      eo_candidate_mass_access = lo_candidate_mass_access.

  CALL METHOD lo_candidate_mass_access->assign_text_to_it5102
    EXPORTING
      it_info        = pt_info
      iv_langu       = p_langu
    IMPORTING
      et_cand_info_t = pt_cand_info_t.

***** Author: Joachim Gross
*****         Detlef
****  DATA: lo_exception TYPE REF TO cx_hrrcf.
****  DATA: ls_info TYPE p5102,
****        ls_info_t TYPE rcf_s_cand_info_text,
****        lt_info_t TYPE rcf_t_cand_info_text.
****  DATA: lt_stat_t TYPE ddfixvalues,
****        ls_stat_t TYPE ddfixvalue.
****  DATA ls_77rcf_tgroup_t TYPE t77rcf_tgroup_t.
****  DATA lv_prof TYPE rating .
****
****
***** some preparations
****  TRY.
****      CALL METHOD cl_hrrcf_services_general=>get_domain_value_list
****        EXPORTING
****          p_domain_name = 'RCF_CAND_STATUS'
****          p_language    = p_langu
****        IMPORTING
****          pt_valuelist  = lt_stat_t.
****
****    CATCH cx_hrrcf INTO lo_exception.
****      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
****        EXPORTING
****          ex = lo_exception.
****  ENDTRY.
****
***** Get relevant texts
****  LOOP AT pt_info INTO ls_info.
****    CLEAR: ls_info_t.
****    MOVE-CORRESPONDING ls_info TO ls_info_t.
***** get status
****    LOOP AT lt_stat_t INTO ls_stat_t WHERE low = ls_info-status.
****      MOVE ls_stat_t-ddtext TO ls_info_t-status_txt.
****      EXIT.
****    ENDLOOP.
****    TRY.
****        IF ls_info-tgroup IS NOT INITIAL .
****          CALL METHOD cl_hrrcf_t77rcf_tgroup=>read_description
****            EXPORTING
****              langu           = p_langu
****              tgroup          = ls_info-tgroup
****            IMPORTING
****              t77rcf_tgroup_t = ls_77rcf_tgroup_t.
****          ls_info_t-tgroup_txt = ls_77rcf_tgroup_t-tgroup_txt.
****        ENDIF .
****
****        IF ls_info-is_classified IS NOT INITIAL .
****          CALL METHOD
****            cl_hrrcf_t77rcf_scales=>get_prof_for_cand_classif_val
****            EXPORTING
****              p_classification = ls_info-classification
****            IMPORTING
****              p_prof           = lv_prof.
****          CALL METHOD cl_hrrcf_t77rcf_scales=>read_cand_classif_prof_text
****            EXPORTING
****              p_proficiency = lv_prof
****              p_langu       = p_langu
****            IMPORTING
****              p_prof_text   = ls_info_t-classification_txt.
****        ENDIF .
****
****      CATCH cx_hrrcf INTO lo_exception.
****        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
****          EXPORTING
****            ex = lo_exception.
****    ENDTRY.
****    APPEND ls_info_t TO lt_info_t.
****  ENDLOOP.
****  pt_cand_info_t[] = lt_info_t[].
ENDMETHOD.                    "ASSIGN_TEXT_TO_ENTRIES


METHOD change_status .
* Author: Joachim Gross
  DATA: ls_ci TYPE p5102, lt_ci TYPE TABLE OF p5102.
  DATA: lo_exception_all TYPE REF TO cx_hrrcf.
  CLEAR: pt_return. REFRESH pt_return.

" N2525558
IF im_v_deregister IS NOT INITIAL.
CALL METHOD me->reset_records_buffer( ).
ENDIF.

  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_ci.

      READ TABLE lt_ci INTO ls_ci INDEX 1.
      IF sy-subrc IS NOT INITIAL.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid =
              cx_hrrcf_infotype_operation=>no_change_status_on_initial
            hrobject = me->hrobject.
      ELSE.
        MOVE p_new_status TO ls_ci-status.
        MOVE sy-datum TO ls_ci-begda.

        CALL METHOD me->insert_record
          EXPORTING
            check_only      = check_only
          IMPORTING
            return          = pt_return
          CHANGING
            infotype_record = ls_ci.
      ENDIF.
    CATCH cx_hrrcf INTO lo_exception_all.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception_all
          hrobject = me->hrobject.
  ENDTRY.
ENDMETHOD.                    "CHANGE_STATUS


method CHECK_BUSINESS_RULES .
* Author: XDP

  IF operation NE delete_operation .

    CALL METHOD ME->CHECK_STATUS_CHANGE
      EXPORTING
        P_CANDIDATE_INFORMATION = infotype_record
      IMPORTING
        PT_RETURN               = return.

  endif.

endmethod.


METHOD check_status_change .
* Author: Joachim Gross
*         XDP -> Authorisation
  DATA: ls_ci TYPE p5102, lt_ci TYPE TABLE OF p5102.
  DATA: ls_new_ci TYPE p5102.
  DATA: lt_status_list TYPE rcf_t_cand_status_list.
  DATA: ls_return TYPE bapiret2.
  DATA: fielddata TYPE dfies, msg1 TYPE sy-msgv1.
  DATA: lo_exception TYPE REF TO cx_hrrcf.

  DATA has_authority TYPE boole_d.

* get before_image
  CALL METHOD me->get_records_by_date
    EXPORTING
      date             = sy-datum
    IMPORTING
      infotype_records = lt_ci.

  READ TABLE lt_ci INDEX 1 INTO ls_ci.
* in case of real insert no before image exists => OK

* get allowed new statuses
  CALL METHOD me->get_possible_status_list
    EXPORTING
      previous_record = ls_ci
    IMPORTING
      status_list     = lt_status_list.

* get after_image
  CALL METHOD me->wplog_to_pnnnn
    EXPORTING
      wplog = p_candidate_information
    IMPORTING
      pnnnn = ls_new_ci.

* proceed only if the status changes
  CHECK ls_new_ci-status NE ls_ci-status.

* authorisation check first
  CALL METHOD me->authority_check_status_change
    EXPORTING
      status = ls_new_ci-status
    RECEIVING
      return = has_authority.
  IF has_authority EQ false.
    IF 1 = 0.                              "where-used list
      MESSAGE e006(hrrcf0002) WITH msg1.
*   Sie sind nicht berechtigt, den Status auf zu setzen
    ENDIF.
    TRY.
        CALL METHOD cl_hrrcf_services_general=>get_domain_attributes
          EXPORTING
            p_domain_name       = 'RCF_CAND_STATUS'
            p_language          = sy-langu
          IMPORTING
            p_domain_attributes = fielddata.
      CATCH cx_hrrcf INTO lo_exception.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            previous = lo_exception.
    ENDTRY.
    msg1 = fielddata-fieldtext.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = msgcl_user
        number = '006'
        par1   = msg1
      IMPORTING
        return = ls_return.
    APPEND ls_return TO pt_return.
    RETURN.
  ENDIF.

* Now do the check
  READ TABLE lt_status_list
    WITH KEY cand_status = ls_new_ci-status
    TRANSPORTING NO FIELDS.
  IF sy-subrc NE 0.
    IF 1 = 0.                              "where-used list
      MESSAGE e039(hrrcf0002) WITH msg1.
    ENDIF.
    TRY.
        CALL METHOD cl_hrrcf_services_general=>get_domain_attributes
          EXPORTING
            p_domain_name       = 'RCF_CAND_STATUS'
            p_language          = sy-langu
          IMPORTING
            p_domain_attributes = fielddata.
      CATCH cx_hrrcf INTO lo_exception.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            previous = lo_exception.
    ENDTRY.
    msg1 = fielddata-fieldtext.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = msgcl_user
        number = '039'
        par1   = msg1
      IMPORTING
        return = ls_return.
    APPEND ls_return TO pt_return.

  ENDIF.

ENDMETHOD.                    "CHECK_STATUS_CHANGE


method CONSTRUCTOR .

  CALL METHOD super->constructor.

  me->my_infty = '5102'.
  me->hrobject = hrobject.

  CALL METHOD cl_hr_t777d=>read
    EXPORTING
      infty = me->my_infty
    RECEIVING
      t777d = me->my_777d.

  SET HANDLER on_change_of_status FOR me.

endmethod.                              "CONSTRUCTOR


method GET_ALL_CANDIDATE_DETAILS.

DATA : ls_return TYPE bapiret2,
         lt_p5102 TYPE TABLE OF hrp5102,
         ls_p5102 TYPE          hrp5102,
         ls_5102_struc     TYPE p5102 .

  CLEAR: pt_5102,
         return.

  SELECT * FROM hrp5102 INTO TABLE lt_p5102
    WHERE deregistered = SPACE .

  IF sy-subrc = 0.
    LOOP AT lt_p5102 INTO ls_p5102 .
      MOVE-CORRESPONDING ls_p5102 TO ls_5102_struc .
      APPEND ls_5102_struc TO pt_5102 .
    ENDLOOP .
  ELSE.
    IF 1 = 0.
      MESSAGE e066(hrrcf0002) .
*     There are no candidates
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'HRRCF0002'
        number = '066'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO return.
  ENDIF.

endmethod.


METHOD get_candidate_details.

  DATA :   ls_return       TYPE bapiret2,
           lv_par1         TYPE sy-msgv1,
           ls_p5102        TYPE hrp5102,
           ls_5102_struc   TYPE p5102,
           lt_p5102        TYPE TABLE OF hrp5102,
           lv_plvar        TYPE plvar,
           lv_otjid        TYPE otjid.

  CONSTANTS: c_msgcl_user   TYPE symsgid  VALUE 'HRRCF0002'.

  CLEAR: pt_5102, return.

* get current record set
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = lv_plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.
  CONCATENATE is_cand_hrobject-otype is_cand_hrobject-objid INTO lv_otjid.

  SELECT * FROM hrp5102 INTO TABLE lt_p5102
    WHERE plvar      = lv_plvar
    AND begda        LE sy-datum
    AND endda        GE sy-datum
    AND otjid        = lv_otjid
    AND deregistered = space.

  IF sy-subrc = 0.     " Records found for Candidate:
    LOOP AT lt_p5102 INTO ls_p5102 .
      MOVE-CORRESPONDING ls_p5102 TO ls_5102_struc.
      APPEND ls_5102_struc TO pt_5102 .
    ENDLOOP.

  ELSE.              " No Records found for Candidate:
    IF 1 = 0.      " For where-used list
      MESSAGE e054(hrrcf0002) WITH is_cand_hrobject-objid.
* --- Candidate number &1 does not exist
    ENDIF.
    lv_par1 = is_cand_hrobject-objid.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = c_msgcl_user
        number = '054'
        par1   = lv_par1
      IMPORTING
        return = ls_return.
    APPEND ls_return TO return.
  ENDIF.

ENDMETHOD.


METHOD get_consent_pending_cand_list.

********************Local structure(ls_*) declaration*****************************
  DATA :   ls_return      TYPE          bapiret2,
           ls_p5102       TYPE          hrp5102,
           ls_hrobject    TYPE          hrobject,
           ls_5102_struc  TYPE          p5102 ,

********************Local table(lt_*) declaration*****************************
           lt_p5102       TYPE TABLE OF hrp5102.

  CLEAR: ex_t_5102,
         return.

  SELECT * FROM hrp5102 INTO TABLE lt_p5102
    WHERE verification = '3'
      AND deregistered = ''
      AND begda        LE sy-datum
      AND endda        GE sy-datum.

  IF sy-subrc = 0.
    LOOP AT lt_p5102 INTO ls_p5102 .
      MOVE-CORRESPONDING ls_p5102 TO ls_5102_struc .
      MOVE-CORRESPONDING ls_p5102 TO ls_hrobject.
      APPEND ls_5102_struc TO ex_t_5102 .
      APPEND ls_hrobject TO ex_t_hrobject.
    ENDLOOP .
  ELSE.
    IF 1 = 0.
      MESSAGE e066(hrrcf0002) .
*     There are no deregistered candidates
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'HRRCF0002'
        number = '066'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO return.
  ENDIF.

ENDMETHOD.


METHOD get_dereg_cand_list .

  DATA : ls_return TYPE bapiret2,
         lt_p5102 TYPE TABLE OF hrp5102,
         ls_p5102 TYPE          hrp5102,
         ls_5102_struc     TYPE p5102 .

  CLEAR: pt_5102,
         return.

  SELECT * FROM hrp5102 INTO TABLE lt_p5102
    WHERE deregistered = true .

  IF sy-subrc = 0.
    LOOP AT lt_p5102 INTO ls_p5102 .
      MOVE-CORRESPONDING ls_p5102 TO ls_5102_struc .
      APPEND ls_5102_struc TO pt_5102 .
    ENDLOOP .
  ELSE.
    IF 1 = 0.
      MESSAGE e066(hrrcf0002) .
*     There are no deregistered candidates
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'HRRCF0002'
        number = '066'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO return.
  ENDIF.

ENDMETHOD.


METHOD get_instance .

*  DATA my_classname TYPE classname VALUE 'CL_HRRCF_CANDIDATE_INFO'.
  DATA lo_hrrcf_infotype TYPE REF TO cl_hrrcf_infotype.
  DATA ls_hrobject TYPE hrobject.

  ls_hrobject = hrobject.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = ls_hrobject-plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

  CALL METHOD cl_hrrcf_infotype=>get_instance_from_directory
    EXPORTING
      hrobject  = ls_hrobject
      classname = my_classname
    IMPORTING
      instance  = lo_hrrcf_infotype.

  IF NOT lo_hrrcf_infotype IS INITIAL.

    instance ?= lo_hrrcf_infotype.

  ELSE.

    CREATE OBJECT instance
         EXPORTING hrobject = ls_hrobject.

    CALL METHOD cl_hrrcf_infotype=>register_instance
      EXPORTING
        hrobject  = ls_hrobject
        classname = my_classname
        instance  = instance.

  ENDIF.


ENDMETHOD.                    "GET_INSTANCE


METHOD get_possible_status_list .

*Author : Subramanian, Ganapathy

  DATA: lt_status_list TYPE         ddfixvalues,
        ls_status_list TYPE         ddfixvalue.

  DATA: wa_statuslist  TYPE         rcf_s_cand_status_list.
  data: lo_exception   type  ref to cx_hrrcf.

*Get list of all possible statuses for this domain
  TRY.
      CALL METHOD cl_hrrcf_services_general=>get_domain_value_list
        EXPORTING
          p_domain_name = 'RCF_CAND_STATUS'
          p_language    = sy-langu
        IMPORTING
          pt_valuelist  = lt_status_list.
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          previous = lo_exception.
  ENDTRY.

  LOOP AT lt_status_list INTO ls_status_list .
    MOVE ls_status_list-low TO wa_statuslist-cand_status .
    APPEND wa_statuslist TO status_list .
  ENDLOOP .

ENDMETHOD.                    "get_possible_status_list


METHOD get_records_by_date_with_text .
* Author: Joachim Gross
  DATA: lo_exception TYPE REF TO cx_hrrcf.
  DATA: lt_info TYPE rcf_t_cand_info.

* Get infotype data
  TRY.
      IF p_5102 IS SUPPLIED.                      "INS SPC_1386380
        append p_5102 to lt_info.                 "INS SPC_1386380
      ELSE.                                       "INS SPC_1386380
        CALL METHOD me->get_records_by_date
        EXPORTING
          date             = p_date
        IMPORTING
          infotype_records = lt_info.
      ENDIF.                                      "INS SPC_1386380
      CALL METHOD me->assign_text_to_entries
        EXPORTING
          pt_info        = lt_info
          p_langu        = p_language
        IMPORTING
          pt_cand_info_t = pt_cand_info_t.
    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.

  ENDTRY.
ENDMETHOD.                    "GET_RECORDS_BY_DATE_WITH_TEXT


method get_unverified_cand_list.

  types: begin of lrcf_s_unverif_candidate,
          plvar        type plvar,
          otype        type otype,
          objid        type hrobjid,
          begda        type begdatum,
          verification type rcf_verification_status,
         end of lrcf_s_unverif_candidate.

  data: lt_unverif_candidates   type standard table of lrcf_s_unverif_candidate,
        ls_unverif_candidate    type lrcf_s_unverif_candidate,
        ls_unverified_candidate type rcf_s_unverified_candidate,
        ls_return               type bapiret2,
        ls_hrobject             type hrobject,
        lv_plvar                type plvar,
        lv_message              type string.

  constants: lc_status_1        type rcf_verification_status value 1,
             lc_status_2        type rcf_verification_status value 2,
             lc_otype_na        type otype                   value 'NA'.

  clear: et_unverified_candidates,
         et_unverified_cand_hrobjects,
         et_return.

  lv_plvar = cl_hrrcf_general_bl=>get_plvar( ).

  if sy-subrc eq 0.

    case iv_verification_status.

      when '1'.

        if iv_begda_registration_period is not initial and
           iv_endda_registration_period is not initial.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                  and otype        eq lc_otype_na
                  and begda        ge iv_begda_registration_period
                  and begda        le iv_endda_registration_period
                  and verification eq lc_status_1.
        else.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                  and otype        eq lc_otype_na
                  and begda        le sy-datum
                  and endda        ge sy-datum
                  and verification eq lc_status_1.
        endif.

      when '2'.

        if iv_begda_registration_period is not initial and
           iv_endda_registration_period is not initial.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                  and otype        eq lc_otype_na
                  and begda        ge iv_begda_registration_period
                  and begda        le iv_endda_registration_period
                  and verification eq lc_status_2.
        else.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                  and otype        eq lc_otype_na
                  and begda        le sy-datum
                  and endda        ge sy-datum
                  and verification eq lc_status_2.
        endif.

      when 'B'.

        if iv_begda_registration_period is not initial and
           iv_endda_registration_period is not initial.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                and   otype        eq lc_otype_na
                and   begda        ge iv_begda_registration_period
                and   begda        le iv_endda_registration_period
                and ( verification eq lc_status_1
                 or   verification eq lc_status_2 ).
        else.
          select plvar otype objid begda verification
                from hrp5102
                into corresponding fields of table lt_unverif_candidates
                where plvar        eq lv_plvar
                and   otype        eq lc_otype_na
                and   begda        le sy-datum
                and   endda        ge sy-datum
                and ( verification eq lc_status_1
                 or   verification eq lc_status_2 ).
        endif.

    endcase.

    if lt_unverif_candidates is initial.

      message i171(hrrcf0002) into lv_message.
*     Es sind keine unverifizierten Kandidaten vorhanden

      call function 'BALW_BAPIRETURN_GET2'
        exporting
          type   = 'I'
          cl     = 'HRRCF0002'
          number = '171'
        importing
          return = ls_return.
      append ls_return to et_return.

    else.

      sort lt_unverif_candidates by plvar otype objid begda ascending.
      delete adjacent duplicates from lt_unverif_candidates comparing plvar otype objid.

      loop at lt_unverif_candidates into ls_unverif_candidate.

        clear: ls_unverified_candidate,
               ls_hrobject.

        ls_unverified_candidate-cand_hrobject-plvar = ls_unverif_candidate-plvar.
        ls_unverified_candidate-cand_hrobject-otype = ls_unverif_candidate-otype.
        ls_unverified_candidate-cand_hrobject-objid = ls_unverif_candidate-objid.
        ls_unverified_candidate-registration_date = ls_unverif_candidate-begda.
        ls_unverified_candidate-verification_status = ls_unverif_candidate-verification.

        append ls_unverified_candidate to et_unverified_candidates.

        ls_hrobject-plvar = ls_unverif_candidate-plvar.
        ls_hrobject-otype = ls_unverif_candidate-otype.
        ls_hrobject-objid = ls_unverif_candidate-objid.

        append ls_hrobject to et_unverified_cand_hrobjects.

      endloop.

    endif.

  endif.

endmethod.


METHOD on_change_of_status .

  CONSTANTS candidate_information_infty TYPE infty VALUE '5102'.

  DATA lt_after_image TYPE TABLE OF p5102.
  DATA ls_after TYPE p5102.
  DATA ls_before TYPE p5102.
  DATA ls_record_wplog TYPE wplog.

  DATA lv_new_status TYPE rcf_cand_status.

  DATA is_status_changed TYPE boole_d VALUE false.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA: lv_objkey TYPE sweinstcou-objkey, "Object key
        l_event TYPE swedumevid-evtid.  "Event id

* react on own changes only
    CHECK hrrcf_infotype_object->hrobject EQ me->hrobject.

  TRY.
* get current record from after_image
      CALL METHOD hrrcf_infotype_object->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_after_image.
    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
*         RAISE EXCEPTION TYPE cx_hrrcf. "exceptions not possible
*                                        "for event handler
  ENDTRY.
  READ TABLE lt_after_image
       INTO ls_after
       INDEX 1.
  IF sy-subrc = 0. "status available
    lv_new_status = ls_after-status.
  ENDIF.

* check if profile change is not due to a status change
* or an initial record of candidate_information
  IF hrrcf_infotype_object->my_infty = candidate_information_infty.

    LOOP AT before_image INTO  ls_record_wplog
                         WHERE begda LE sy-datum
                           AND endda GE sy-datum.
* get current record from before_image
      CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn
        EXPORTING
          wplog = ls_record_wplog
        IMPORTING
          pnnnn = ls_before.
      EXIT. "from loop
    ENDLOOP.

    IF sy-subrc = 0. "previous record available
      READ TABLE lt_after_image
           INTO ls_after
           INDEX 1.
      IF sy-subrc = 0. "status available
* compare status before and after
        IF ls_after-status NE ls_before-status.
          is_status_changed = true.
        ENDIF.
      ENDIF.
    ELSE. "IF sy-subrc = 0. "previous record available
      is_status_changed = true.
    ENDIF.

  ENDIF.

  CHECK is_status_changed EQ true.

*Declare WF container

  swc_container lt_evt_container.

*Initialize WF container

  swc_create_container lt_evt_container.

*Fill the HR object key

  MOVE me->hrobject TO lv_objkey.

*Fill the Event container with the event parameters

  swc_set_element lt_evt_container 'STATUS' lv_new_status.

  CALL FUNCTION 'SWE_EVENT_CREATE'
    EXPORTING
      objtype                      = 'ERC_OBJECT'
      objkey                       = lv_objkey
      event                        = 'StatusChanged'
*   CREATOR                      =
*   TAKE_WORKITEM_REQUESTER      = ' '
*   START_WITH_DELAY             = ' '
*   START_RECFB_SYNCHRON         = ' '
*   NO_COMMIT_FOR_QUEUE          = ' '
*   DEBUG_FLAG                   = ' '
*   NO_LOGGING                   = ' '
*   IDENT                        =
   IMPORTING
     event_id                      = l_event
   TABLES
     event_container               = lt_evt_container
   EXCEPTIONS
     objtype_not_found             = 1
     OTHERS                        = 2
            .
  IF sy-subrc <> 0.
    TRY.
        DATA lox_hrrcf_maintain_object TYPE REF TO cx_hrrcf_maintain_object.
        RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
          EXPORTING
            textid =
              cx_hrrcf_maintain_object=>business_object_repository
            hrobject = me->hrobject
            message_type = sy-msgty
            message_class = sy-msgid
            message_number = sy-msgno
            message_par1 = sy-msgv1
            message_par2 = sy-msgv2
            message_par3 = sy-msgv3
            message_par4 = sy-msgv4.
      CATCH cx_hrrcf_maintain_object INTO lox_hrrcf_maintain_object.
        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
          EXPORTING
            ex = lox_hrrcf_maintain_object.
    ENDTRY.
  ENDIF.

  IF cl_hrrcf_simple_main_object=>luw_mode = false.
    IF external_commit EQ false.                 "{WAR1540502
      COMMIT WORK.
    ENDIF.                                       "}WAR1540502
  ENDIF.

ENDMETHOD.


METHOD read_business_email.

*********** Local object(lo_*) declaration *******************
  DATA: lo_candidate   TYPE REF TO cl_hrrcf_candidate,
        lo_address     TYPE REF TO cl_hrrcf_address_service,
        lo_cx_hrrcf    TYPE REF TO cx_hrrcf,

*********** Local structure(ls_*) declaration *******************
        ls_email_bp    TYPE rcf_s_emaildata_bp,

*********** Local variable(lv_*) declaration *******************
        lv_gsval       TYPE gsval.

  TRY.
* get candidate object (if available)
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          user      = im_v_userid
        IMPORTING
          candidate = lo_candidate.

      IF lo_candidate IS BOUND.

        IF lo_candidate->partner IS NOT INITIAL.

* get address (if available)
          CALL METHOD cl_hrrcf_address_service=>get_instance
            EXPORTING
              businesspartner = lo_candidate->partner
            IMPORTING
              instance        = lo_address.

          IF lo_address IS BOUND.
            IF lo_candidate->employeeid IS NOT INITIAL.
              CALL METHOD lo_address->get_business_email
                EXPORTING
                  im_v_pernr = lo_candidate->employeeid
                IMPORTING
                  emaildata  = ex_s_email_details.
              RETURN.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    CATCH cx_hrrcf INTO lo_cx_hrrcf.
* no change for program flow
* -> application log
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_cx_hrrcf.
  ENDTRY.

ENDMETHOD.


METHOD read_private_email.
* Method added with Note 1783912
* This method reads field E_mail

  DATA : ls_5102       TYPE p5102,
         lt_5102       TYPE TABLE OF p5102.

* Fetch the latest record
  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_5102.
    CATCH cx_hrrcf_infotype_operation .
      RETURN.
  ENDTRY.

* Read e-mail
  READ TABLE lt_5102 INTO ls_5102 INDEX 1.
  IF sy-subrc EQ 0.
    ps_email = ls_5102-e_mail.
  ENDIF.

ENDMETHOD.


METHOD read_records .

* author xdp
* Additions: PEV

* Past:    ensure that infotype record always exists
* Present: not needed anymore and misleading since we
*          introduced the buffer mechanism

  DATA: ls_msgtext TYPE natxt,
        lv_param   TYPE symsgv,
        our_return TYPE bapiret2.


  CALL METHOD super->read_records
    IMPORTING
      infotype_records = infotype_records
      return           = return.

  IF infotype_records IS INITIAL AND me->records_already_read = true.
* Return information

    lv_param = me->hrobject.

    MESSAGE i272(hrrcf0001) WITH lv_param INTO ls_msgtext.
*   Fehlender Statusinfotyp zum HR-Objekt &1

    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'I'
        cl     = me->msgcl_admin
        number = sy-msgno
        par1   = lv_param
      IMPORTING
        return = our_return.
    APPEND our_return TO return.

  ENDIF.

ENDMETHOD.


METHOD reset_deregister_flag.
* Method introduced with note 2273031

  DATA : lt_p5102 TYPE rcf_t_cand_info,
         ls_p5102 TYPE p5102,
         lt_return TYPE bapirettab ,
         ls_return TYPE bapiret2,
         lo_exception TYPE REF TO cx_hrrcf .

  TRY.

      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_p5102.

      READ TABLE lt_p5102 INDEX 1 INTO ls_p5102 .

      IF sy-subrc EQ 0 .

        MOVE ' ' TO ls_p5102-deregistered .
        try.

        CALL METHOD me->update_record
          EXPORTING
            external_commit = external_commit
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_p5102.
        CATCH cx_hrrcf INTO lo_exception.
          CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
            EXPORTING
              ex = lo_exception.
      ENDTRY.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO return .

      ENDIF .

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      ls_return-id = lo_exception->message_class.
      ls_return-number = lo_exception->message_number.
      ls_return-message_v1 = lo_exception->message_par1.
      ls_return-type = lo_exception->message_type.
      APPEND ls_return TO return .
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.

  ENDTRY.

ENDMETHOD.


METHOD set_classification .

  DATA : lt_p5102 TYPE rcf_t_cand_info,
         ls_p5102 TYPE p5102,
         lt_return TYPE bapirettab ,
         lo_exception TYPE REF TO cx_hrrcf .

  TRY.

      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_p5102.

      READ TABLE lt_p5102 INDEX 1 INTO ls_p5102 .

      IF sy-subrc EQ 0 .

        MOVE p_classification TO ls_p5102-classification .
        move p_is_processed to ls_p5102-is_classified .

        CALL METHOD me->update_record
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_p5102.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO return .

      ENDIF .

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.

  ENDTRY.

ENDMETHOD.


METHOD set_deregister_flag .

  DATA : lt_p5102 TYPE rcf_t_cand_info,
         ls_p5102 TYPE p5102,
         lt_return TYPE bapirettab ,
         lo_exception TYPE REF TO cx_hrrcf .

  TRY.

      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_p5102.

      READ TABLE lt_p5102 INDEX 1 INTO ls_p5102 .

      IF sy-subrc EQ 0 .

        MOVE 'X' TO ls_p5102-deregistered .

        CALL METHOD me->update_record
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_p5102.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO return .

      ENDIF .

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.

  ENDTRY.

ENDMETHOD.


METHOD set_is_inactive_flag.
*Author:BM

  DATA : lt_p5102 TYPE rcf_t_cand_info,
           ls_p5102 TYPE p5102,
           lt_return TYPE bapirettab ,
           lo_exception TYPE REF TO cx_hrrcf .

  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_p5102.

      READ TABLE lt_p5102 INDEX 1 INTO ls_p5102 .

      IF sy-subrc EQ 0 AND
         ls_p5102-is_inactive <> is_inactive.
*       set the flag
        MOVE is_inactive TO ls_p5102-is_inactive .

        IF im_v_clr_email_upd = abap_true.
          CLEAR ls_p5102-email_cand_upd.
        ENDIF.

        CALL METHOD me->update_record
          EXPORTING
            external_commit = external_commit               "WAR1540502
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_p5102.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO return .

      ENDIF .

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD SET_PRIVACY_STATUS .
* Author: CS
  DATA: ls_ci TYPE p5102, lt_ci TYPE TABLE OF p5102.
  DATA: lo_exception_all TYPE REF TO cx_hrrcf.
  CLEAR: pt_return. REFRESH pt_return.

  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_ci.

      READ TABLE lt_ci INTO ls_ci INDEX 1.
      IF sy-subrc IS NOT INITIAL.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid =
              cx_hrrcf_infotype_operation=>no_change_status_on_initial
            hrobject = me->hrobject.
      ELSE.
        MOVE p_privacy_status TO ls_ci-privacy_status.
        MOVE p_privacy_version TO ls_ci-privacy_version.
        MOVE sy-datum TO ls_ci-begda.

        CALL METHOD me->insert_record
          EXPORTING
            check_only      = check_only
          IMPORTING
            return          = pt_return
          CHANGING
            infotype_record = ls_ci.
      ENDIF.
    CATCH cx_hrrcf INTO lo_exception_all.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception_all
          hrobject = me->hrobject.
  ENDTRY.
ENDMETHOD.                    "SET PRIVACY STATUS


METHOD update_of_profile.

  DATA : lt_p5102     TYPE rcf_t_cand_info,
         ls_p5102     TYPE p5102,
         lt_return    TYPE bapirettab ,
         lo_exception TYPE REF TO cx_hrrcf .

  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_p5102.

      READ TABLE lt_p5102 INDEX 1 INTO ls_p5102 .

      IF sy-subrc EQ 0 .

        MOVE sy-uname TO ls_p5102-last_updated_by.
        MOVE sy-datum TO ls_p5102-last_updated_on.

        CALL METHOD me->update_record
          EXPORTING
            check_only      = check_only
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_p5102.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO return .

      ENDIF.

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.

  ENDTRY.

ENDMETHOD.


METHOD update_private_email.
* Method added with Note 1783912
* This method updates field E_mail

  DATA : ls_5102       TYPE p5102,
         lt_5102       TYPE TABLE OF p5102,
         lt_return     TYPE bapirettab,
         lo_exception  TYPE REF TO cx_hrrcf,
         lv_gsval      TYPE gsval.

**->> Check Switch HRRCF PMAIL and set private email properties accordingly
  cl_hr_t77s0=>read_gsval(
        EXPORTING
          grpid       = 'RECFA'    " Group Name
          semid       = 'PMAIL'   " Semantic abbreviation
        IMPORTING
          returnvalue =  lv_gsval ).

  IF lv_gsval IS NOT INITIAL AND ps_email IS INITIAL.
    RETURN.
  ENDIF.

* Fetch the latest record
  TRY.
      CALL METHOD me->get_records_by_date
        EXPORTING
          date             = sy-datum
        IMPORTING
          infotype_records = lt_5102.

* Fill the HRP5102 structure with e-mail
      READ TABLE lt_5102 INTO ls_5102 INDEX 1.
      IF sy-subrc EQ 0 AND
         ls_5102-e_mail <> ps_email.
* Update DB
        ls_5102-e_mail = ps_email.
        ls_5102-email_cand_upd = im_v_pvt_mail_upd.
        CALL METHOD me->update_record
          EXPORTING
            check_only      = space
            external_commit = pv_external_commit
          IMPORTING
            return          = lt_return
          CHANGING
            infotype_record = ls_5102.

        DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
        APPEND LINES OF lt_return TO pt_return .

      ENDIF.

      IF iv_bupa_upd = abap_true.                   "Start N_2374452
        ""Update same in BP as well
        CLEAR ls_5102.
        CLEAR lt_return.
        READ TABLE lt_5102 INTO ls_5102 INDEX 1.
        CALL METHOD me->update_private_email_bp
          EXPORTING
            iv_email     = ps_email
            iv_email_old = ls_5102-e_mail
          IMPORTING
            et_return    = lt_return.
        APPEND LINES OF lt_return TO pt_return .
      ENDIF.                                        "end N_2374452

    CATCH cx_hrrcf_infotype_operation INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.


METHOD update_private_email_bp.
"N_2374452

  DATA :   lo_bupa_ins   TYPE REF TO cl_hrrcf_candidate_bupa_bl,
           lv_operation  TYPE rcf_opera,
           ls_email_data TYPE rcf_s_emaildata_bp,
           lt_email_data TYPE TABLE OF rcf_s_emaildata_bp,
           lo_exception  TYPE REF TO cx_hrrcf,
           lt_return     TYPE bapirettab,
           lt_email      TYPE TABLE OF bapiadsmtp,
           ls_email      TYPE bapiadsmtp,
           lo_candidate  TYPE REF TO cl_hrrcf_candidate.

  CLEAR et_return.

  CHECK me->hrobject IS NOT INITIAL.

  TRY.

* Read BP of candidate
      cl_hrrcf_candidate=>get(
        EXPORTING
          id         = me->hrobject-objid
        IMPORTING
          candidate  = lo_candidate
      ).

* Read Email ID from BP
      CALL FUNCTION 'BAPI_BUPA_CENTRAL_GETDETAIL'
        EXPORTING
          businesspartner              = lo_candidate->partner
        TABLES
*         telefondatanonaddress        = lt_telefon
*         faxdatanonaddress            = lt_fax
          e_maildatanonaddress         = lt_email
*         communicationnotesnonaddress = lt_comrem
          return                       = lt_return.

      DELETE et_return WHERE type NE 'A' AND type NE 'E'.
      APPEND LINES OF lt_return TO et_return.

      IF lt_return IS NOT INITIAL.
        RETURN.
      ENDIF.

* Determine the operation(Insert/update)
      IF iv_email_old IS INITIAL.
        lv_operation = if_hrrcf_constants=>insert_operation.
        ls_email_data-e_mail = iv_email.
      ELSE.
        READ TABLE lt_email INTO ls_email
          WITH KEY e_mail = iv_email_old.
        IF sy-subrc = 0.
          lv_operation = if_hrrcf_constants=>modify_operation.
          MOVE-CORRESPONDING ls_email TO ls_email_data.
          ls_email_data-e_mail = iv_email.
        ELSE.
          lv_operation = if_hrrcf_constants=>insert_operation.
          ls_email_data-e_mail = iv_email.
        ENDIF.
      ENDIF.

* Update email in BP
      CLEAR lt_return.

      lo_bupa_ins = cl_hrrcf_candidate_bupa_bl=>get_instance( ).

      CHECK lo_bupa_ins IS BOUND.

      CALL METHOD lo_bupa_ins->maintain_email_data
        EXPORTING
          ps_emaildata     = ls_email_data
          ps_cand_hrobject = me->hrobject
          p_operation      = lv_operation
        IMPORTING
          pt_return        = lt_return.

      DELETE lt_return WHERE type NE 'A' AND type NE 'E'.
      APPEND LINES OF lt_return TO et_return.

    CATCH cx_hrrcf INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          previous = lo_exception
          hrobject = me->hrobject.
  ENDTRY.

ENDMETHOD.
ENDCLASS.