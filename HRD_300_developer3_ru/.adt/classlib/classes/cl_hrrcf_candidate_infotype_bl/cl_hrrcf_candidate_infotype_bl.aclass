class CL_HRRCF_CANDIDATE_INFOTYPE_BL definition
  public
  final
  create private .

public section.
*"* public components of class CL_HRRCF_CANDIDATE_INFOTYPE_BL
*"* do not include other source files here!!!

  interfaces IF_HRRCF_CONSTANTS .

  aliases DELETE
    for IF_HRRCF_CONSTANTS~DELETE_OPERATION .
  aliases FALSE
    for IF_HRRCF_CONSTANTS~FALSE .
  aliases HIGH_DATE
    for IF_HRRCF_CONSTANTS~HIGH_DATE .
  aliases INSERT
    for IF_HRRCF_CONSTANTS~INSERT_OPERATION .
  aliases LOW_DATE
    for IF_HRRCF_CONSTANTS~LOW_DATE .
  aliases MODIFY
    for IF_HRRCF_CONSTANTS~MODIFY_OPERATION .
  aliases MSGCL_ADMIN
    for IF_HRRCF_CONSTANTS~MSGCL_ADMIN .
  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS~MSGCL_USER .
  aliases TRUE
    for IF_HRRCF_CONSTANTS~TRUE .

  methods CHECK_CAND_DESIRED_JOB_LOC
    importing
      value(PS_CAND_HROBJECT) type HROBJECT optional
      !PS_DESIRED_JOB_LOCATION type P5107
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION optional
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !P_IS_OK_LOCATION_IN_SOURCE type BOOLE_D
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods CONSTRUCTOR .
  methods GET_ADDITIONAL_QUALIS
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_CAND_QUALIFICATION type P5105
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_BO_DESIRED_JOB
    importing
      !PS_HROBJECT type HROBJECT optional
    preferred parameter PS_HROBJECT
    returning
      value(PO_DESIRED_JOB) type ref to CL_HRRCF_DESIRED_JOB
    raising
      CX_HRRCF .
  methods GET_BO_DESIRED_LOC
    importing
      !PS_HROBJECT type HROBJECT optional
    preferred parameter PS_HROBJECT
    returning
      value(PO_DESIRED_LOC) type ref to CL_HRRCF_DESIRED_JOB_LOCATION
    raising
      CX_HRRCF .
  methods GET_BO_EDUCATION
    importing
      !PS_HROBJECT type HROBJECT optional
    preferred parameter PS_HROBJECT
    returning
      value(PO_EDUCATION) type ref to CL_HRRCF_EDUCATION
    raising
      CX_HRRCF .
  methods GET_BO_WORKEXPERIENCE
    importing
      !PS_HROBJECT type HROBJECT optional
    preferred parameter PS_HROBJECT
    returning
      value(PO_WORKEXPERIENCE) type ref to CL_HRRCF_WORK_EXPERIENCE
    raising
      CX_HRRCF .
  methods GET_CAND_DESIRED_JOB_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PT_DESIRED_JOB type RCF_T_DESIRED_JOB_TEXT
    raising
      CX_HRRCF .
  methods GET_CAND_DESIRED_JOB_DESC
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_DESIRED_JOB type P5106
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_CAND_DESIRED_JOB_LOC_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PT_DESIRED_JOB_LOCATION type RCF_T_DESIRED_JOB_LOC_TEXT
    raising
      CX_HRRCF .
  methods GET_CAND_DES_LOC_DESC
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_DESIRED_LOCATION type P5107
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_CAND_EDUCATION_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_LANGU type RCF_SE_LANGU default SY-LANGU
    exporting
      !PT_EDUCATION type RCF_T_EDUCATION_TEXT
    raising
      CX_HRRCF .
  methods GET_CAND_EDUCATION_DESC
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_LANGU type SPRAS default SY-LANGU
      !PS_EDUCATION type P5104
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_CAND_INTERNET_REF_DATA
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IV_LANGUAGE type SPRAS default SY-LANGU
    exporting
      !ET_INTERNET_REFERENCES type RCF_T_INTERNET_REFERENCE_TEXT
      !ET_INTERNET_REFERENCES_WO_TXT type RCF_T_INTERNET_REFERENCE
    raising
      CX_HRRCF .
  methods GET_CAND_INTERNET_REF_DESC
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type P5113
      !IV_LANGU type SPRAS default SY-LANGU
    exporting
      !ES_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_CAND_INTERNET_REF_URL
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type P5113
      !IV_LANGU type SPRAS default SY-LANGU
    exporting
      !ES_INTERNET_REF_URL type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_CAND_QUALIFICATION_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_MATCH_EREC_VIEW type BOOLE_D default SPACE
    exporting
      !PT_QUALIFICATIONS type RCF_T_CAND_QUALIFICATION
      !PT_QUALIFICATIONS_TXT type RCF_T_CAND_QUALIFICATION_TEXT
    raising
      CX_HRRCF .
  methods GET_CAND_WORK_EXPERIENCE_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !PT_WORK_EXPERIENCE type RCF_T_WORK_EXPERIENCE_TEXT
      !PT_WORK_EXPERIENCE_WO_TXT type RCF_T_WORK_EXPERIENCE
    raising
      CX_HRRCF .
  methods GET_CAND_WORK_EXPERIENCE_DESC
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_WORK_EXPERIENCE type P5103
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  class-methods GET_INSTANCE
    returning
      value(RETURN) type ref to CL_HRRCF_CANDIDATE_INFOTYPE_BL .
  methods GET_LAST_EMPLOYER_DATA
    importing
      !PS_CAND_HROBJECT type HROBJECT
    exporting
      !PS_5103 type P5103
    raising
      CX_HRRCF .
  class-methods GET_LAST_PROFILE_UPDATE_DATA
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !EV_LAST_UPDATED_BY type USRNAME
      !EV_LAST_UPDATED_BY_NAME type BU_DESCRIP
      !EV_LAST_UPDATED_ON type DATUM
    raising
      CX_HRRCF .
  methods MAINTAIN_ADDITIONAL_QUALIS
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_CAND_QUALIFICATION type P5105
      !P_OPERATION type RCF_OPERA
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PT_RETURN type BAPIRETTAB
      !PS_RESULT type P5105
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_DESIRED_JOB
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PT_DESIRED_JOB_UI type RCF_T_DESIRED_JOB_TEXT
      !PT_DESIRED_JOB_DB type RCF_T_DESIRED_JOB_TEXT
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_DESIRED_JOB_LOC
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_DESIRED_JOB_LOCATION type P5107
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !P_LANGU type SPRAS default SY-LANGU
      !P_OPERATION type RCF_OPERA
      !P_CHECK_ONLY type BOOLE_D optional
    exporting
      !PS_RESULT type P5107
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_DJOB
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_DESIRED_JOB type P5106
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !P_LANGU type SPRAS default SY-LANGU
      !P_OPERATION type RCF_OPERA
      !P_CHECK_ONLY type BOOLE_D optional
    exporting
      !PS_RESULT type P5106
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_EDUCATION
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_EDUCATION type P5104
      !P_OPERATION type RCF_OPERA
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !P_LANGU type SPRAS default SY-LANGU
      !P_CHECK_ONLY type BOOLE_D optional
    exporting
      !PS_RESULT type P5104
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_INTERNET_REF
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type P5113
      !IV_OPERATION type RCF_OPERA
      !IV_DESCRIPTION type RCF_ITF_DESCRIPTION
      !IV_INTERNET_REF_URL type RCF_ITF_DESCRIPTION
      !IV_LANGU type SPRAS default SY-LANGU
      !IV_CHECK_ONLY type BOOLE_D optional
    exporting
      !ES_RESULT type P5113
      !ET_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_QUALIFICATION
    importing
      !P_OPERATION type RCF_OPERA
      !PS_QUALIFICATION type P5105
      !PS_CAND_HROBJECT type HROBJECT optional
      !P_CHECK_ONLY type BOOLE_D optional
    exporting
      !PS_RESULT type P5105
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_CAND_WORK_EXPERIENCE
    importing
      !PS_CAND_HROBJECT type HROBJECT optional
      !PS_WORK_EXPERIENCE type P5103
      !P_OPERATION type RCF_OPERA
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !P_LANGU type SPRAS default SY-LANGU
      !P_CHECK_ONLY type BOOLE_D optional
    exporting
      !PS_RESULT type P5103
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods UPDATE_DESIRED_JOB_DESC
    importing
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
      !PS_DESIRED_JOB type P5106
      !PS_CAND_HROBJECT type HROBJECT optional
    exporting
      !P_NEW_VERSION type RCF_DESIRED_JOB_DESC
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
protected section.
*"* protected components of class CL_HRRCF_CONTACT_DATA_BL
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_CANDIDATE_INFOTYPE_BL
*"* do not include other source files here!!!

  class-data INSTANCE type ref to CL_HRRCF_CANDIDATE_INFOTYPE_BL .

  class-methods IS_MSGBAPIRET
    importing
      !IS_MSG type BAPIRET2
      !IV_COMPARE_LEVEL type CHAR2 default 'NO'
      !IS_MSG_COMP type BAPIRET2
    returning
      value(EV_IS) type BOOLE_D .
  class-methods IS_MSGBAPIRET_IN_TAB
    importing
      !IS_MSG type BAPIRET2
      !IV_COMPARE_LEVEL type CHAR2 default 'NO'
      !IT_MSG type BAPIRETTAB
    returning
      value(EV_IS) type SYTABIX .
  methods ON_PROFILE_UPDATE
    for event RCF_INFOTYPE_RECORD_CHANGED of CL_HRRCF_INFOTYPE
    importing
      !HRRCF_INFOTYPE_OBJECT
      !BEFORE_IMAGE .
ENDCLASS.



CLASS CL_HRRCF_CANDIDATE_INFOTYPE_BL IMPLEMENTATION.


METHOD check_cand_desired_job_loc .
*--------------------------------------------------------
* Specification
* S1. Check of the whole P5107
* S2. This comment is obsolete
*     P_IS_OK
*     PS_DESIRED_JOB_LOCATION is not in location source
*   &
*   -> P_IS_OK = TRUE & P_IS_LOCATION_IN_SOURCE = FALSE
*      is NOT violated POSTCONDITION
* S3. Check of description according to parameter
* S4. PS_CAND_HROBJECT same "IS_SUPPLIED" logic as
*     ME->MAINTAIN_CAND_DESIRED_JOB_LOC
*--------------------------------------------------------
  DATA ls_message TYPE bapiret2.
  DATA ls_msgtext TYPE natxt.
  DATA lv_tabix   TYPE sytabix.
*-- Read...
  DATA lo_candidate TYPE REF TO cl_hrrcf_candidate.

  CLEAR pt_return.
  p_is_ok_location_in_source = false.

  IF ps_cand_hrobject IS SUPPLIED.
    CALL METHOD cl_hrrcf_candidate=>get
      EXPORTING
        user      = sy-uname
      IMPORTING
        candidate = lo_candidate.
    ps_cand_hrobject = lo_candidate->hrobject.
  ENDIF.

*  TRY.
  CALL METHOD maintain_cand_desired_job_loc
    EXPORTING
      ps_cand_hrobject        = ps_cand_hrobject
      ps_desired_job_location = ps_desired_job_location
      p_description           = p_description
      p_langu                 = p_langu
      p_operation             = modify
      p_check_only            = true
    IMPORTING
*     ps_result               =
      pt_return               = pt_return.
*   CATCH CX_HRRCF.

*-- Check e216(hrrcf0001) is PT_RETURN
*     and DELETE it from PT_RETURN.
  MESSAGE e216(hrrcf0001)
          WITH space space space
*         WITH ps_desired_job_location-country
*              ps_desired_job_location-region
*              ps_desired_job_location-city
          INTO ls_msgtext.
  CALL FUNCTION 'BALW_BAPIRETURN_GET2'
    EXPORTING
      type   = sy-msgty
      cl     = sy-msgid
      number = sy-msgno
      par1   = sy-msgv1
      par2   = sy-msgv2
      par3   = sy-msgv3
      par4   = sy-msgv4
*     row    =
    IMPORTING
      return = ls_message.

  lv_tabix = is_msgbapiret_in_tab(
      is_msg           = ls_message
*     IV_COMPARE_LEVEL =
      it_msg           = pt_return ).

  IF lv_tabix = 0.
    p_is_ok_location_in_source = true.
  ELSE.
    DELETE pt_return INDEX lv_tabix.
  ENDIF.
*-- End check & delete
ENDMETHOD.


method constructor .
endmethod.


method get_additional_qualis .
*
* Author:BM
* Additions: AS
*
* This method reads additional qualis of 5105.
*
  data: lo_qualification type ref to cl_hrrcf_cand_qualification,
        lo_exception     type ref to cx_hrrcf,
        lo_candidate     type ref to cl_hrrcf_candidate.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      check not ps_cand_qualification-add_quali is initial.
*
*get instance of qualification
      call method cl_hrrcf_cand_qualification=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_qualification.
*
* read the text
      call method lo_qualification->read_text
        exporting
          fieldname       = 'ADD_QUALI'
          infotype_record = ps_cand_qualification
          langu           = p_langu
          use_fallback    = true
        importing
          text            = ps_description-description
          langu_tab       = ps_description-langu_tab
          doc_langu       = ps_description-doc_langu.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_BO_DESIRED_JOB .
*
* Author: AS
*
  data lo_candidate type ref to cl_hrrcf_candidate.
  data ls_hrobject type hrobject.
  data lo_exception type ref to cx_hrrcf.
*
  try.
*
* get hrobject
      if ps_hrobject is initial.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
        ls_hrobject = lo_candidate->hrobject.
      else.
        ls_hrobject = ps_hrobject.
      endif.
*
* get instance of infotype class
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = ls_hrobject
        importing
          instance = po_desired_job.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_BO_DESIRED_LOC .
*
* Author: AS
*
  data lo_candidate type ref to cl_hrrcf_candidate.
  data ls_hrobject type hrobject.
  data lo_exception type ref to cx_hrrcf.
*
  try.
*
* get hrobject
      if ps_hrobject is initial.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
        ls_hrobject = lo_candidate->hrobject.
      else.
        ls_hrobject = ps_hrobject.
      endif.
*
* get instance of infotype class
      call method cl_hrrcf_desired_job_location=>get_instance
        exporting
          hrobject = ls_hrobject
        importing
          instance = po_desired_loc.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_BO_EDUCATION .
*
* Author: AS
*
  data lo_candidate type ref to cl_hrrcf_candidate.
  data ls_hrobject type hrobject.
  data lo_exception type ref to cx_hrrcf.
*
  try.
*
* get hrobject
      if ps_hrobject is initial.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
        ls_hrobject = lo_candidate->hrobject.
      else.
        ls_hrobject = ps_hrobject.
      endif.
*
* get instance of infotype class
      call method cl_hrrcf_education=>get_instance
        exporting
          hrobject = ls_hrobject
        importing
          instance = po_education.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method get_bo_workexperience .
*
* Author: AS
*
  data lo_candidate type ref to cl_hrrcf_candidate.
  data ls_hrobject type hrobject.
  data lo_exception type ref to cx_hrrcf.
*
  try.
*
* get hrobject
      if ps_hrobject is initial.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
        ls_hrobject = lo_candidate->hrobject.
      else.
        ls_hrobject = ps_hrobject.
      endif.
*
* get instance of infotype class
      call method cl_hrrcf_work_experience=>get_instance
        exporting
          hrobject = ls_hrobject
        importing
          instance = po_workexperience.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method get_cand_desired_job_data .
*
* Author: BM
* Additions: AS
*
* This method reads infotype 5106.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_dj type ref to cl_hrrcf_desired_job.
  data: lt_dj type rcf_t_desired_job_text.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  clear pt_desired_job. refresh pt_desired_job.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get BO
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dj.
*
* get records
      call method lo_dj->get_records_by_date_with_text
        exporting
          p_date           = sy-datum
          p_language       = sy-langu
        importing
          pt_desired_job_t = lt_dj.
*
      pt_desired_job[] = lt_dj[].
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method get_cand_desired_job_desc .
*
* Author:BM
* Additions: AS
*
* This method reads the description regarding the desired job.
*
  data: lo_dj type ref to cl_hrrcf_desired_job.
  data: lo_exception type ref to cx_hrrcf.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  clear ps_description.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
*get BO
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dj.
*
*get description
      if not ps_desired_job-description is initial.
        call method lo_dj->read_text
          exporting
            fieldname       = 'DESCRIPTION'
            infotype_record = ps_desired_job
            langu           = p_langu
            use_fallback    = true
          importing
            text            = ps_description-description
            langu_tab       = ps_description-langu_tab
            doc_langu       = ps_description-doc_langu.
      endif.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_CAND_DESIRED_JOB_LOC_DATA .
*
* Author: BM
* Additions: AS
*
* This method reads infotype 5106.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_djl type ref to cl_hrrcf_desired_job_location.
  data: lt_djl type rcf_t_desired_job_loc_text.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  clear pt_desired_job_location. refresh pt_desired_job_location.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get BO
      call method cl_hrrcf_desired_job_location=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_djl.
*
* get records
      call method lo_djl->get_records_by_date_with_text
        exporting
          p_date           = sy-datum
          p_language       = sy-langu
        importing
          pt_desired_job_loc_t = lt_djl.
*
      pt_desired_job_location[] = lt_djl[].
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_CAND_DES_LOC_DESC .
*
* Author: AS
*
* This method reads the description regarding the desired job location.
*
  data: lo_dl type ref to cl_hrrcf_desired_job_location.
  data: lo_exception type ref to cx_hrrcf.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  clear ps_description.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
*get BO
      call method cl_hrrcf_desired_job_location=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dl.
*
*get description
      if not ps_desired_location-description is initial.
        call method lo_dl->read_text
          exporting
            fieldname       = 'DESCRIPTION'
            infotype_record = ps_desired_location
            langu           = p_langu
            use_fallback    = true
          importing
            text            = ps_description-description
            langu_tab       = ps_description-langu_tab
            doc_langu       = ps_description-doc_langu.
      endif.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


METHOD get_cand_education_data .
*
* Author:BM
* Additions: AS
*
* This method reads 5104.
*
  DATA: lo_exception TYPE REF TO cx_hrrcf.
  DATA: lo_edu TYPE REF TO cl_hrrcf_education.
  DATA: lt_education TYPE rcf_t_education_text.
  DATA: lo_candidate TYPE REF TO cl_hrrcf_candidate.
  DATA: ls_candidate TYPE hrobject.
*
  CLEAR pt_education. REFRESH pt_education.
*
  TRY.
*
* get candidate
      IF ps_cand_hrobject IS SUPPLIED.

        ls_candidate = ps_cand_hrobject.

      ELSE.
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            user      = sy-uname
          IMPORTING
            candidate = lo_candidate.

        ls_candidate = lo_candidate->hrobject.

      ENDIF.
*
* get instance of education
      CALL METHOD cl_hrrcf_education=>get_instance
        EXPORTING
          hrobject = ls_candidate
        IMPORTING
          instance = lo_edu.
*
*get education records
      CALL METHOD lo_edu->get_records_by_date_with_text
        EXPORTING
          p_date       = sy-datum
          p_language   = p_langu
        IMPORTING
          pt_education = lt_education.
*
      pt_education[] = lt_education[].
*
    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf.
  ENDTRY.
*
ENDMETHOD.


METHOD get_cand_education_desc .
*
* Author:BM
* Additions: AS
*
* This method reads description of 5104.
*
  DATA: lo_edu TYPE REF TO cl_hrrcf_education.
  DATA: lo_exception TYPE REF TO cx_hrrcf.
  DATA: lo_candidate TYPE REF TO cl_hrrcf_candidate.
*
  CLEAR ps_description.
*
  TRY.
*
* get candidate
      IF ps_cand_hrobject IS SUPPLIED.
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            id        = ps_cand_hrobject-objid
          IMPORTING
            candidate = lo_candidate.
      ELSE.
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            user      = sy-uname
          IMPORTING
            candidate = lo_candidate.
      ENDIF.
*
* get instance of education
      CALL METHOD cl_hrrcf_education=>get_instance
        EXPORTING
          hrobject = lo_candidate->hrobject
        IMPORTING
          instance = lo_edu.
*
* get education description
      IF NOT ps_education-description IS INITIAL.
        CALL METHOD lo_edu->read_text
          EXPORTING
            fieldname       = 'DESCRIPTION'
            infotype_record = ps_education
            langu           = p_langu
            use_fallback    = 'X'
          IMPORTING
            text            = ps_description-description
            langu_tab       = ps_description-langu_tab
            doc_langu       = ps_description-doc_langu.
      ENDIF.
*
    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf.

  ENDTRY.
*
ENDMETHOD.


method get_cand_internet_ref_data.

  data: lo_exception              type ref to cx_hrrcf,
        lo_candidate              type ref to cl_hrrcf_candidate,
        lo_internet_ref           type ref to cl_hrrcf_internet_reference,
        ls_cand_hrobject          type hrobject.

  try.

      clear: et_internet_references,
             et_internet_references_wo_txt.

      if is_cand_hrobject is initial.
        cl_hrrcf_candidate=>get(
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate ).
        ls_cand_hrobject = lo_candidate->hrobject.
      else.
        ls_cand_hrobject = is_cand_hrobject.
      endif.

      cl_hrrcf_internet_reference=>get_instance(
        exporting
          is_hrobject = ls_cand_hrobject
        importing
          eo_instance = lo_internet_ref ).

      if et_internet_references is supplied.
        lo_internet_ref->get_records_by_date_with_text(
          exporting
            iv_date                = sy-datum
            iv_language            = iv_language
          importing
            et_internet_references = et_internet_references ).
      else.
        lo_internet_ref->get_records_by_date(
          exporting
            date             = sy-datum
          importing
            infotype_records = et_internet_references_wo_txt ).
      endif.

    catch cx_hrrcf into lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method get_cand_internet_ref_desc.

  data: lo_exception              type ref to cx_hrrcf,
        lo_candidate              type ref to cl_hrrcf_candidate,
        lo_internet_ref           type ref to cl_hrrcf_internet_reference,
        ls_cand_hrobject          type hrobject.

  try.

      clear: es_description.

      if is_internet_reference-description is not initial.

        if is_cand_hrobject is initial.
          cl_hrrcf_candidate=>get(
            exporting
              user      = sy-uname
            importing
              candidate = lo_candidate ).
          ls_cand_hrobject = lo_candidate->hrobject.
        else.
          ls_cand_hrobject = is_cand_hrobject.
        endif.

        cl_hrrcf_internet_reference=>get_instance(
          exporting
            is_hrobject = ls_cand_hrobject
          importing
            eo_instance = lo_internet_ref ).

        lo_internet_ref->read_text(
          exporting
            fieldname       = 'DESCRIPTION'
            infotype_record = is_internet_reference
            langu           = iv_langu
            use_fallback    = true
          importing
            text            = es_description-description
            langu_tab       = es_description-langu_tab
            doc_langu       = es_description-doc_langu ).

      endif.

    catch cx_hrrcf into lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method get_cand_internet_ref_url.

  data: lo_exception              type ref to cx_hrrcf,
        lo_candidate              type ref to cl_hrrcf_candidate,
        lo_internet_ref           type ref to cl_hrrcf_internet_reference,
        ls_cand_hrobject          type hrobject.

  try.

      clear: es_internet_ref_url.

      if is_internet_reference-internet_ref_url is not initial.

        if is_cand_hrobject is initial.
          cl_hrrcf_candidate=>get(
            exporting
              user      = sy-uname
            importing
              candidate = lo_candidate ).
          ls_cand_hrobject = lo_candidate->hrobject.
        else.
          ls_cand_hrobject = is_cand_hrobject.
        endif.

        cl_hrrcf_internet_reference=>get_instance(
          exporting
            is_hrobject = ls_cand_hrobject
          importing
            eo_instance = lo_internet_ref ).

        lo_internet_ref->read_text(
          exporting
            fieldname       = 'INTERNET_REF_URL'
            infotype_record = is_internet_reference
            langu           = iv_langu
            use_fallback    = true
          importing
            text            = es_internet_ref_url-description
            langu_tab       = es_internet_ref_url-langu_tab
            doc_langu       = es_internet_ref_url-doc_langu ).

      endif.

    catch cx_hrrcf into lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      raise exception type cx_hrrcf.
  endtry.

endmethod.


METHOD get_cand_qualification_data.
*
* Author   : BM
* Additions: AS, HGB
*
  DATA: lo_exception TYPE REF TO cx_hrrcf,
        lo_candidate TYPE REF TO cl_hrrcf_candidate,
        lo_quali     TYPE REF TO cl_hrrcf_cand_qualification.

  DATA: pt_quali_group_list   TYPE rcf_t_q_object_with_name.
  DATA: ls_quali_group_list   TYPE rcf_s_q_object_with_name.
  DATA: ls_qualifications_txt TYPE rcf_s_cand_qualification_text.
  DATA: ls_qualifications     TYPE p5105.

  DATA: l_hrqua TYPE gsval.
*
  CLEAR: pt_qualifications,
         pt_qualifications_txt.
*
  TRY.
*
*     get candidate
      IF ps_cand_hrobject IS SUPPLIED.
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            id        = ps_cand_hrobject-objid
          IMPORTING
            candidate = lo_candidate.
      ELSE.
        CALL METHOD cl_hrrcf_candidate=>get
          EXPORTING
            user      = sy-uname
          IMPORTING
            candidate = lo_candidate.
      ENDIF.
*
*     get instance
      CALL METHOD cl_hrrcf_cand_qualification=>get_instance
        EXPORTING
          hrobject = lo_candidate->hrobject
        IMPORTING
          instance = lo_quali.
*
*     get qualification lists from IT 5105
      IF pt_qualifications IS SUPPLIED.
        CALL METHOD lo_quali->get_records_by_date
          EXPORTING
            date             = sy-datum
          IMPORTING
            infotype_records = pt_qualifications.
      ENDIF.
*
      IF pt_qualifications_txt IS SUPPLIED.
        CALL METHOD lo_quali->get_records_by_date_with_text
          EXPORTING
            date            = sy-datum
            language        = sy-langu
          IMPORTING
            pt_cand_quali_t = pt_qualifications_txt.
      ENDIF.

      IF p_match_erec_view = true.

        CALL METHOD cl_hr_t77s0=>read_gsval
          EXPORTING
            grpid       = 'RECFA'
            semid       = 'HRQUA'
          IMPORTING
            returnvalue = l_hrqua
*         SUBRC       =
            .

*     match IT 5105 records against e-Recruiting view on qualifications
*      IF p_match_erec_view EQ true.
        IF l_hrqua = 'EREC_VIEW'.
*       delete IT5105 records which are not in e-Recruiting view
*       of qualifications catalog
          pt_quali_group_list
            = cl_hrrcf_general_bl=>get_quali_cat_complete( ).

          LOOP AT pt_qualifications_txt INTO ls_qualifications_txt.
            READ TABLE pt_quali_group_list INTO ls_quali_group_list
                 WITH KEY q_otype = ls_qualifications_txt-q_object_type
                          q_objid = ls_qualifications_txt-q_object_id.
            IF sy-subrc <> 0.
              DELETE pt_qualifications_txt.
            ENDIF.
          ENDLOOP.

          LOOP AT pt_qualifications INTO ls_qualifications.
            READ TABLE pt_quali_group_list INTO ls_quali_group_list
                 WITH KEY q_otype = ls_qualifications-q_object_type
                          q_objid = ls_qualifications-q_object_id.
            IF sy-subrc <> 0.
              DELETE pt_qualifications.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDIF.
*
*   exception handling
    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf.
  ENDTRY.
*
ENDMETHOD.


method get_cand_work_experience_data .
*
* Author:BM
* This method reads 5103.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_we        type ref to cl_hrrcf_work_experience.
  data: lo_candidate type ref to cl_hrrcf_candidate.
  data: ls_candidate type hrobject.
*
  clear pt_work_experience. refresh pt_work_experience.
*
  try.
*
*     get candidate
      if ps_cand_hrobject is supplied.

        ls_candidate = ps_cand_hrobject.

      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.

        ls_candidate = lo_candidate->hrobject.

      endif.
*
*     Get work experience instance
      call method cl_hrrcf_work_experience=>get_instance
        exporting
          hrobject = ls_candidate
        importing
          instance = lo_we.
*
*     get records for the work experience
      if pt_work_experience_wo_txt is supplied.

        call method lo_we->get_records_by_date
          exporting
            date             = sy-datum
          importing
            infotype_records = pt_work_experience_wo_txt.

        sort pt_work_experience_wo_txt descending by end_date.

      else.

        call method lo_we->get_records_by_date_with_text
          exporting
            p_date               = sy-datum
            p_language           = sy-langu
          importing
            pt_work_experience_t = pt_work_experience.
*
        sort pt_work_experience descending by end_date.

      endif.
*
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method get_cand_work_experience_desc .
*
* Author:BM
* Additions:MB
*
* This method reads description of IT 5103.
*
  data: lo_we type ref to cl_hrrcf_work_experience.
  data: lo_exception type ref to cx_hrrcf.
  data: lo_candidate type ref to cl_hrrcf_candidate.
*
  clear ps_description.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get work experience instance
      call method cl_hrrcf_work_experience=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_we.
*
* read description
      if not ps_work_experience-description is initial.
        call method lo_we->read_text
          exporting
            fieldname       = 'DESCRIPTION'
            infotype_record = ps_work_experience
            langu           = p_langu
            use_fallback    = true
          importing
            text            = ps_description-description
            doc_langu       = ps_description-doc_langu
            langu_tab       = ps_description-langu_tab.
      endif.
*
* exception handling
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method GET_INSTANCE .
*
* Author: AS
*
  if not instance is bound.
    create object instance.
  endif.
*
  return = instance.
*
endmethod.


METHOD get_last_employer_data.

  DATA: lt_we        TYPE rcf_t_work_experience,
        ls_candidate TYPE hrobject.

  DATA: lo_we        TYPE REF TO cl_hrrcf_work_experience,
        lo_candidate TYPE REF TO cl_hrrcf_candidate.

  DATA: lo_exception TYPE REF TO cx_hrrcf.


  TRY.
      IF ps_cand_hrobject IS NOT INITIAL.
* Get work experience instance
        CALL METHOD cl_hrrcf_work_experience=>get_instance
          EXPORTING
            hrobject = ps_cand_hrobject
          IMPORTING
            instance = lo_we.

* get records for the work experience
        CALL METHOD lo_we->get_records_by_date
          IMPORTING
            infotype_records = lt_we.

        SORT lt_we BY end_date DESCENDING start_date DESCENDING.
        READ TABLE lt_we INDEX 1 INTO ps_5103.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf.
  ENDTRY.

ENDMETHOD.


method get_last_profile_update_data.

  data: lo_exception type ref to cx_hrrcf,
        lo_candidate type ref to cl_hrrcf_candidate,
        ls_record    type p5102.

  clear: ev_last_updated_by,
         ev_last_updated_on.

  try.

      select single * from hrp5102 into corresponding fields of ls_record
        where plvar =  is_cand_hrobject-plvar and
              otype =  is_cand_hrobject-otype and
              objid =  is_cand_hrobject-objid and
              begda <= sy-datum               and
              endda >= sy-datum.

      if ls_record is not initial.

        ev_last_updated_by = ls_record-last_updated_by.
        ev_last_updated_on = ls_record-last_updated_on.

        if ( ev_last_updated_by_name is supplied ) and
           ( ls_record-last_updated_by is not initial ).

          cl_hrrcf_candidate=>get(
            exporting
              user       = ls_record-last_updated_by
            importing
              candidate  = lo_candidate ).

          lo_candidate->get_cand_description(
            importing
              cand_description = ev_last_updated_by_name ).

        endif.

      endif.

    catch cx_hrrcf into lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      raise exception type cx_hrrcf.
  endtry.

endmethod.


METHOD IS_MSGBAPIRET.
*-----------------------------------------------------------------
* S1 values of IV_COMPARE_LEVEL
*    two end characters of sy-msg parameters. See docu of abap statement
*    MESSAGE.
*-----------------------------------------------------------------

  ev_is = false.
  IF   is_msg-id <> is_msg_comp-id
    OR is_msg-number <> is_msg_comp-number.
    RETURN.
  ENDIF.

  IF iv_compare_level = 'NO'.
    ev_is = true.
    RETURN.
  ENDIF.

  IF is_msg-type <> is_msg_comp-type.
    RETURN.
  ENDIF.

  IF iv_compare_level = 'TY'.
    ev_is = true.
  ENDIF.

  IF   is_msg-message_v1 <> is_msg_comp-message_v1
    OR is_msg-message_v2 <> is_msg_comp-message_v2
    OR is_msg-message_v3 <> is_msg_comp-message_v3
    OR is_msg-message_v4 <> is_msg_comp-message_v4.
    RETURN.
  ENDIF.

  IF iv_compare_level(1) = 'V'.
    ev_is = true.
  ENDIF.
ENDMETHOD.


METHOD is_msgbapiret_in_tab.
*-----------------------------------------------------------------
* S1 values of IV_COMPARE_LEVEL
*    two end characters of sy-msg parameters. See docu of abap statement
*    MESSAGE.
*-----------------------------------------------------------------
  DATA lv_dbcnt TYPE sydbcnt.
  DATA ls_msg   TYPE bapiret2.

  CLEAR ev_is.
  LOOP AT it_msg INTO ls_msg.
    ev_is = ev_is + 1.
    IF is_msgbapiret( is_msg    = is_msg
               iv_compare_level = iv_compare_level
               is_msg_comp      = ls_msg )
       = true.
      RETURN.
    ENDIF.
  ENDLOOP.
ENDMETHOD.


method maintain_additional_qualis .
*
* Author:BM
* Additions: AS
*
* This method maintains additional qualifications (5105).
*
  data: l_p5105 type p5105,
        lo_qualification type ref to cl_hrrcf_cand_qualification,
        lo_exception type ref to cx_hrrcf,
        lo_candidate type ref to cl_hrrcf_candidate,
        ls_return    type bapiret2.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      check not ps_cand_qualification is initial.
*
      l_p5105 = ps_cand_qualification.
*
* get qualification instance
      call method cl_hrrcf_cand_qualification=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_qualification.
*
* update qualification text if operation not delete
      if p_operation ne delete.
        if l_p5105-q_object_type = 'QK'.
          try.
              call method lo_qualification->update_text
                exporting
                  text            = p_description
                  langu           = p_langu
                  fieldname       = 'ADD_QUALI'
                changing
                  infotype_record = l_p5105.
            catch cx_hrrcf into lo_exception.
*-            Write to the log
              call method cl_hrrcf_exception_handler=>write_exception_log
                exporting
                  ex = lo_exception.
              if 1 eq 2.
                message e200(hrrcf0002).
*               At the moment server is busy, data is not saved. Please try again later.
              endif.
              call function 'BALW_BAPIRETURN_GET2'
                exporting
                  type   = 'E'
                  cl     = 'HRRCF0002'
                  number = '200'
                importing
                  return = ls_return.
              append ls_return to pt_return.
              return.
          endtry.
        endif.
      endif.
*
* update record
      case p_operation.
        when insert.
          l_p5105-begda = sy-datum.
          l_p5105-endda = high_date.
          call method lo_qualification->insert_record
            importing
              return          = pt_return
            changing
              infotype_record = l_p5105.
        when modify.
          call method lo_qualification->update_record
            importing
              return          = pt_return
            changing
              infotype_record = l_p5105.
        when delete.
          call method lo_qualification->delete_record
            importing
              return          = pt_return
            changing
              infotype_record = l_p5105.
      endcase.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.

      ps_result = l_p5105.

    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method maintain_cand_desired_job .
*
* Additions: AS
*
* This method maintains infotype 5106. Therefore it compares BB and UI image.
*
  data ls_ui_image type hri5106.
*
  data ls_desired_job type rcf_s_desired_job_text.
  data ls_db_image type hri5106.
  data l_subrc_uiimage like sy-subrc.
  data l_subrc_dbimage like sy-subrc.
  data lo_dj type ref to cl_hrrcf_desired_job.
  data lo_exception type ref to cx_hrrcf.
  data lo_candidate type ref to cl_hrrcf_candidate.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
  data: lv_description type rcf_desired_job_desc.                                   "N 1631382
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
* get BO
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dj.
*
*compare ui and database images
      do.
        cl_hrrcf_dbcdcy_list_admin=>gv_no_cdcylist_update = abap_true.  "no need to update the T77RCF_CDCYLIST for each record, can be done during profile update
        read table pt_desired_job_ui into ls_desired_job index sy-index.
        move sy-subrc to l_subrc_uiimage.
        if l_subrc_uiimage eq 0.                                                    "N 1631382
        lv_description = ls_desired_job-p5106-description.                          "N 1631382
        ENDIF.                                                                      "N 1631382
        move-corresponding ls_desired_job to ls_ui_image.
        clear ls_desired_job.
        read table pt_desired_job_db into ls_desired_job index sy-index.
        move sy-subrc to l_subrc_dbimage.
        if l_subrc_uiimage eq 0 and l_subrc_dbimage eq 0.
          move-corresponding ls_desired_job to ls_db_image.
          check ls_db_image <> ls_ui_image.   "update required only in case of any change
          move-corresponding ls_ui_image to ls_desired_job.
*             update.
          call method lo_dj->update_record
            importing
              return          = pt_return
            changing
              infotype_record = ls_desired_job-p5106.
        elseif l_subrc_uiimage ne 0 and l_subrc_dbimage eq 0.
*             delete.
* check if any description is available on the UI.
* if yes, initialize before deleting to prevent deletion of text
* from KPRO                                                                         "N 2124513
          if not lv_description is initial.                                         "N 2124513
            clear ls_desired_job-p5106-description.                                 "N 2124513
          endif.                                                                    "N 2124513
          call method lo_dj->delete_record
            importing
              return          = pt_return
            changing
              infotype_record = ls_desired_job-p5106.
        elseif l_subrc_uiimage eq 0 and l_subrc_dbimage ne 0.
          ls_desired_job-begda = sy-datum.
          ls_desired_job-endda = high_date.
          move-corresponding ls_ui_image to ls_desired_job.
*             insert.
          call method lo_dj->insert_record
            importing
              return          = pt_return
            changing
              infotype_record = ls_desired_job-p5106.
        else.
          exit.
        endif.
*
        clear: ls_ui_image, ls_desired_job,
               l_subrc_uiimage, l_subrc_dbimage.
*
      enddo.
      clear cl_hrrcf_dbcdcy_list_admin=>gv_no_cdcylist_update.
*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.


*   exception handling
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method maintain_cand_desired_job_loc .
*
*Author:BM
* Additions; AS
*
* This method maintains infotype 5107 desired job location.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_djl type ref to cl_hrrcf_desired_job_location.
  data: ls_p5107 type p5107.
  data: lo_candidate type ref to cl_hrrcf_candidate,
        ls_return    type bapiret2.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  clear: ps_result, pt_return. refresh pt_return.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      ls_p5107 = ps_desired_job_location.
*
* get BO
      call method cl_hrrcf_desired_job_location=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_djl.
*
* update text
      if p_operation ne delete and p_check_only eq false.
        try.
            call method lo_djl->update_text
              exporting
                text            = p_description
                fieldname       = 'DESCRIPTION'
                langu           = p_langu
              changing
                infotype_record = ls_p5107.
          catch cx_hrrcf into lo_exception.
*-          Write to the log
            call method cl_hrrcf_exception_handler=>write_exception_log
              exporting
                ex = lo_exception.
            if 1 eq 2.
              message e200(hrrcf0002).
*             At the moment server is busy, data is not saved. Please try again later.
            endif.
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF0002'
                number = '200'
              importing
                return = ls_return.
            append ls_return to pt_return.
            return.
        endtry.
      endif.
*
      case p_operation.
        when insert.
          ls_p5107-begda = sy-datum.
          ls_p5107-endda = high_date.
          call method lo_djl->insert_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5107.
        when modify.
          call method lo_djl->update_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5107.
        when delete.
          call method lo_djl->delete_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5107.
      endcase.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = lo_candidate->hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          exporting
            check_only = p_check_only
          importing
            return     = pt_return.

      endif.

      ps_result = ls_p5107.

*   exception handling
    catch cx_hrrcf into lo_exception.
      call method
        cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method maintain_cand_djob.
  data: lo_exception type ref to cx_hrrcf.
  data: lo_dj type ref to cl_hrrcf_desired_job.
  data: ls_p5106 type p5106.
  data: lo_candidate type ref to cl_hrrcf_candidate.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  clear: ps_result, pt_return. refresh pt_return.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.

      ls_p5106 = ps_desired_job.

* get BO
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dj.

* update text
      if p_operation ne delete and p_check_only eq false.
        call method lo_dj->update_text
          exporting
            text            = p_description
            fieldname       = 'DESCRIPTION'
            langu           = p_langu
          changing
            infotype_record = ls_p5106.
      endif.

      case p_operation.
        when insert.
          ls_p5106-begda = sy-datum.
          ls_p5106-endda = high_date.
          call method lo_dj->insert_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5106.
        when modify.
          call method lo_dj->update_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5106.
        when delete.
          call method lo_dj->delete_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5106.
      endcase.

      ps_result = ls_p5106.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          exporting
            check_only = p_check_only
          importing
            return     = pt_return.

      endif.

*   exception handling
    catch cx_hrrcf into lo_exception.
      call method
        cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method maintain_cand_education .
*
* Author:BM
* Additions: AS
*
* This method maintains infotype 5104.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_edu type ref to cl_hrrcf_education.
  data: ls_p5104 type p5104.
  data: lo_candidate type ref to cl_hrrcf_candidate.
  data: ls_return    type bapiret2.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  clear: ps_result, pt_return. refresh pt_return.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      ls_p5104 = ps_education.
*
* get education instance
      call method cl_hrrcf_education=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_edu.
*
* update description
      if p_operation ne delete and p_check_only eq false.
        try.
            call method lo_edu->update_text
              exporting
                text            = p_description
                fieldname       = 'DESCRIPTION'
                langu           = p_langu
              changing
                infotype_record = ls_p5104.
          catch cx_hrrcf into lo_exception.
*-          Write to the log
            call method cl_hrrcf_exception_handler=>write_exception_log
              exporting
                ex = lo_exception.
            if 1 eq 2.
              message e200(hrrcf0002).
*             At the moment server is busy, data is not saved. Please try again later.
            endif.
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF0002'
                number = '200'
              importing
                return = ls_return.
            append ls_return to pt_return.
            return.
        endtry.
      endif.
*
* update record
      case p_operation.
        when insert.
          ls_p5104-begda = low_date.
          ls_p5104-endda = high_date.
          call method lo_edu->insert_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5104.
        when modify.
          call method lo_edu->update_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5104.
        when delete.
          call method lo_edu->delete_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5104.
      endcase.
*
      ps_result = ls_p5104.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          exporting
            check_only = p_check_only
          importing
            return     = pt_return.

      endif.

*   exception handling
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.

  endtry.

endmethod.


method maintain_cand_internet_ref.

  data: lo_exception              type ref to cx_hrrcf,
        lo_internet_ref           type ref to cl_hrrcf_internet_reference,
        lo_candidate              type ref to cl_hrrcf_candidate,
        lo_cand_info              type ref to cl_hrrcf_candidate_info,
        ls_cand_hrobject          type hrobject,
        ls_internet_reference     type p5113,
        ls_return                 type bapiret2,
        lv_message                type string.

  try.

      clear: es_result,
             et_return.

      if is_cand_hrobject is initial.
        cl_hrrcf_candidate=>get(
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate ).
        ls_cand_hrobject = lo_candidate->hrobject.
      else.
        ls_cand_hrobject = is_cand_hrobject.
      endif.

      ls_internet_reference = is_internet_reference.

      cl_hrrcf_internet_reference=>get_instance(
        exporting
          is_hrobject = ls_cand_hrobject
        importing
          eo_instance = lo_internet_ref ).

*     update the description and the URL of the internet reference record
      if iv_operation  ne delete and
         iv_check_only eq false.

        try.

            lo_internet_ref->update_text(
              exporting
                text            = iv_description
                fieldname       = 'DESCRIPTION'
                langu           = iv_langu
              changing
                infotype_record = ls_internet_reference ).

            lo_internet_ref->update_text(
               exporting
                 text            = iv_internet_ref_url
                 fieldname       = 'INTERNET_REF_URL'
                 langu           = iv_langu
               changing
                 infotype_record = ls_internet_reference ).

          catch cx_hrrcf into lo_exception.
            cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
            message e200(hrrcf0002) into lv_message.
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF0002'
                number = '200'
              importing
                return = ls_return.
            append ls_return to et_return.
            return.
        endtry.

      endif.

*     update the internet reference record
      case iv_operation.

        when insert.

          ls_internet_reference-begda = low_date.
          ls_internet_reference-endda = high_date.

          lo_internet_ref->insert_record(
            exporting
              check_only      = iv_check_only
            importing
              return          = et_return
            changing
              infotype_record = ls_internet_reference ).

        when modify.

          lo_internet_ref->update_record(
            exporting
              check_only      = iv_check_only
            importing
              return          = et_return
            changing
              infotype_record = ls_internet_reference ).

        when delete.

          lo_internet_ref->delete_record(
            exporting
              check_only      = iv_check_only
            importing
              return          = et_return
            changing
              infotype_record = ls_internet_reference ).

      endcase.

      es_result = ls_internet_reference.

*     if SWITCH is turned on, so update the HRP5102's LAST_UPDATED_BY and LAST_UPDATED_ON fields
      if ( et_return is initial                                        ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        cl_hrrcf_candidate_info=>get_instance(
          exporting
            hrobject = ls_cand_hrobject
          importing
            instance = lo_cand_info ).

        lo_cand_info->update_of_profile(
          exporting
            check_only = iv_check_only
          importing
            return     = et_return ).

      endif.

    catch cx_hrrcf into lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exception ).
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method maintain_cand_qualification .
*
* Author:BM
* Additions: AS
*
* This method maintains 5105.
*
  data: lo_exception type ref to cx_hrrcf,
        lo_quali     type ref to cl_hrrcf_cand_qualification,
        ls_p5105     type p5105,
        lo_candidate type ref to cl_hrrcf_candidate.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  clear: ps_result,
         pt_return.
  refresh pt_return.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      ls_p5105 = ps_qualification.
*
* get instance of qualification
      call method cl_hrrcf_cand_qualification=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_quali.
*
* update record
      case p_operation.
        when insert.
          ls_p5105-begda = low_date.
          ls_p5105-endda = high_date.
          call method lo_quali->insert_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5105.
        when modify.
          call method lo_quali->update_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5105.
        when delete.
          call method lo_quali->delete_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5105.
      endcase.
*
      ps_result = ls_p5105.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          exporting
            check_only = p_check_only
          importing
            return     = pt_return.

      endif.

    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.
*
endmethod.


method maintain_cand_work_experience .
*
* Author:BM
* Additions: AS
*
* This method maintains infotype 5103.
*
  data: lo_exception type ref to cx_hrrcf.
  data: lo_work_exp type ref to cl_hrrcf_work_experience.
  data: ls_p5103 type p5103.
  data: lo_candidate type ref to cl_hrrcf_candidate,
        ls_return    type bapiret2.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.
*
  clear: ps_result, pt_return. refresh pt_return.
*
  try.
*
* get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.
*
      ls_p5103 = ps_work_experience.
*
* get education instance
      call method cl_hrrcf_work_experience=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_work_exp.
*
* update description
      if p_operation ne delete and p_check_only eq false.
        try.
            call method lo_work_exp->update_text
              exporting
                text            = p_description
                fieldname       = 'DESCRIPTION'
                langu           = p_langu
              changing
                infotype_record = ls_p5103.
          catch cx_hrrcf into lo_exception.
*-          Write to the log
            call method cl_hrrcf_exception_handler=>write_exception_log
              exporting
                ex = lo_exception.
            if 1 eq 2.
              message e200(hrrcf0002).
*             At the moment server is busy, data is not saved. Please try again later.
            endif.
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF0002'
                number = '200'
              importing
                return = ls_return.
            append ls_return to pt_return.
            return.
        endtry.
      endif.
*
* update record
      case p_operation.
        when insert.
          ls_p5103-begda = low_date.
          ls_p5103-endda = high_date.
          call method lo_work_exp->insert_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5103.
        when modify.
          call method lo_work_exp->update_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5103.
        when delete.
          call method lo_work_exp->delete_record
            exporting
              check_only      = p_check_only
            importing
              return          = pt_return
            changing
              infotype_record = ls_p5103.
      endcase.
*
      ps_result = ls_p5103.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if ( pt_return is initial ) and
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true ).

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          exporting
            check_only = p_check_only
          importing
            return     = pt_return.

      endif.

* exception handling
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
      raise exception type cx_hrrcf.
  endtry.

endmethod.


method on_profile_update .
*
* Additions: AS
*
  constants candidate_information_infty type infty value '5102'.
*
  data lt_after_image_p5102 type table of p5102.
  data ls_p5102_after type p5102.
  data ls_p5102_before type p5102.
  data ls_record_wplog type wplog.
  data is_status_change_neccessary type boole_d value true.
  data lo_exception type ref to cx_hrrcf.
  data lo_ci type ref to cl_hrrcf_candidate_info.
*
* check if profile change is not due to a status change
* or an initial record of candidate_information
  if hrrcf_infotype_object->my_infty = candidate_information_infty.

    loop at before_image into  ls_record_wplog
                         where begda le sy-datum
                           and endda ge sy-datum.
* get current record from before_image
      call method cl_hrrcf_infotype=>wplog_to_pnnnn
        exporting
          wplog = ls_record_wplog
        importing
          pnnnn = ls_p5102_before.
      exit. "from loop
    endloop.
    if sy-subrc = 0. "previous record available
      try.
* get current record from after_image
          call method hrrcf_infotype_object->get_records_by_date
            exporting
              date             = sy-datum
            importing
              infotype_records = lt_after_image_p5102.
        catch cx_hrrcf into lo_exception.
          call method cl_hrrcf_exception_handler=>write_exception_log
            exporting
              ex = lo_exception.
      endtry.
      read table lt_after_image_p5102
           into ls_p5102_after
           index 1.
      if sy-subrc = 0. "status available
* compare status before and after
        if ls_p5102_after-status ne ls_p5102_before-status
           or ls_p5102_after-status eq '0'.
          is_status_change_neccessary = false.
        endif.
      endif.
    endif.

  endif.
*
  check is_status_change_neccessary eq true.
*
  try.
      call method cl_hrrcf_candidate_info=>get_instance
        exporting
          hrobject = hrrcf_infotype_object->hrobject
        importing
          instance = lo_ci.
      call method lo_ci->change_status
        exporting
          p_new_status = '0'.
    catch cx_hrrcf into lo_exception.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_exception.
  endtry.
*
endmethod.


method update_desired_job_desc .
*
* Additions: AS
*
* This method only updates the desired job description and then gives back the new pointer to the KW.

  data lo_dj type ref to cl_hrrcf_desired_job.
  data lo_ex_hrrcf type ref to cx_hrrcf.
  data ls_p5106 type p5106.
  data lo_candidate type ref to cl_hrrcf_candidate.
  data ls_return    type bapiret2.

  data: lo_cand_info type ref to cl_hrrcf_candidate_info.

  ls_p5106 = ps_desired_job.

  try.

*     get candidate
      if ps_cand_hrobject is supplied.
        call method cl_hrrcf_candidate=>get
          exporting
            id        = ps_cand_hrobject-objid
          importing
            candidate = lo_candidate.
      else.
        call method cl_hrrcf_candidate=>get
          exporting
            user      = sy-uname
          importing
            candidate = lo_candidate.
      endif.

*     get BO
      call method cl_hrrcf_desired_job=>get_instance
        exporting
          hrobject = lo_candidate->hrobject
        importing
          instance = lo_dj.

*   exception handling
    catch cx_hrrcf into lo_ex_hrrcf .
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_ex_hrrcf.
      raise exception type cx_hrrcf.
  endtry.

  check not lo_dj is initial.

* update description
  try.

      call method lo_dj->update_text
        exporting
          text            = p_description
          fieldname       = 'DESCRIPTION'
          langu           = sy-langu
        changing
          infotype_record = ls_p5106.

      p_new_version = ls_p5106-description.

*     if SWITCH is turned on update the HRP5102's Last_updated_by and Last_updated_on fields
      if cl_hrrcf_switch_check=>hrerc_sfws_ui_ses_01( ) eq abap_true.

        call method cl_hrrcf_candidate_info=>get_instance
          exporting
            hrobject = ps_cand_hrobject
          importing
            instance = lo_cand_info.

        call method lo_cand_info->update_of_profile
          importing
            return = pt_return.

      endif.

    catch cx_hrrcf into lo_ex_hrrcf.
*-    Write to the log
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_ex_hrrcf.
      if 1 eq 2.
        message e200(hrrcf0002).
*       At the moment server is busy, data is not saved. Please try again later.
      endif.
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          type   = 'E'
          cl     = 'HRRCF0002'
          number = '200'
        importing
          return = ls_return.
      append ls_return to pt_return.
  endtry.

endmethod.
ENDCLASS.