class CL_HRRCF_DATAOVERVIEW_PL definition
  public
  final
  create public .

public section.

*"* public components of class CL_HRRCF_DATAOVERVIEW_PL
*"* do not include other source files here!!!
  interfaces IF_HRRCF_CONSTANTS_PL .

  class-methods GET_REQ_DOVR
    importing
      !IS_REQ_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !EV_REQ_TYPE type RCF_REQUISITION_TYPE
      !EV_REQ_HEADER type RCF_REQUISITION_HEADER
      !ET_ATTACHMENTS type RCF_T_ATTACH_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_FM_NAME
    importing
      !IV_USE_ADOBE type WDY_BOOLEAN
      !IV_DOVR_TYPE type STRING
      !IV_FALLBACK_FORM type TDSFNAME
    exporting
      !EV_FM_NAME type RS38L_FNAM
    raising
      CX_HRRCF .
  class-methods GET_CAND_DOVR
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !EV_CAND_NAME type BU_NAME1TX
      !ET_ATTACHMENT type RCF_T_ATTACH_PL
      !ET_QUESTIONNAIRE type RCF_T_QUESTIONNR_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_AUDT_DOVR
    importing
      !IS_APPL_HROBJECT type HROBJECT
      !IV_VERSION type HRKWF_VERSION
    exporting
      !EV_CONTENT type XSTRING
      !ET_ATTACHMENT type RCF_T_ATTACH_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_APPL_DOVR
    importing
      !IS_APPL_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !ET_ATTACHMENT type RCF_T_ATTACH_PL
      !ET_QUESTIONNAIRE type RCF_T_QUESTIONNR_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_TG_DOVR
    importing
      !IS_TG_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !EV_TITLE type RCF_ITF_DESCRIPTION
      !ET_ATTACHMENTS type RCF_T_ATTACH_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_SG_DOVR
    importing
      !IS_SG_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !EV_TITLE type RCF_ITF_DESCRIPTION
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_RPACT_DOVR
    importing
      !IV_RP_ACT_GUID type RCF_RP_ACT_GUID
    exporting
      !EV_CONTENT type XSTRING
      !EV_DESCRIPTION type RCF_RP_ACT_DESC
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_CDCY_DOVR
    importing
      !IS_CDCY_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !ET_QUESTIONNAIRE type RCF_T_QUESTIONNR_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_PUBL_DOVR
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
      !IV_DOC_VERSION type HRKWF_VERSION optional
    exporting
      !EV_CONTENT type XSTRING
      !EV_TITLE type RCF_ITF_DESCRIPTION
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_POST_DOVR
    importing
      !IS_POST_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !EV_POSTING_TEXT type RCF_POSTING_TEXT
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_ACT_DOVR
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !EV_CONTENT type XSTRING
      !ES_ACTIVITY_DATA type RCF_S_ACT_DATAOVERVIEW_PL
      !ET_ATTACHMENTS type RCF_T_ATTACH_PL
      !ET_QUESTIONNAIRE type RCF_T_QUESTIONNR_PL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_POS_DOVR
    importing
      !IS_POS_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_JOB_DOVR
    importing
      !IS_JOB_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_ORGUNIT_DOVR
    importing
      !IS_ORG_U_HROBJECT type HROBJECT
    exporting
      !EV_CONTENT type XSTRING
      !ET_MESSAGE type BAPIRETTAB .
protected section.
*"* protected components of class CL_HRRCF_DATAOVERVIEW_PL
*"* do not include other source files here!!!
private section.

  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS_PL~MSGCL_USER .
  aliases MSGTY_ERROR
    for IF_HRRCF_CONSTANTS_PL~MSGTY_ERROR .

  constants GC_URLCALLBACK type STRING value 'HR_RCF_SF_URL_CALLBACK'. "#EC NOTEXT

  class-methods GET_REQ_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_VACANCY type RCF_S_VACANCY_LIST
      !IT_POSITION type RCF_T_POS_OF_REQ_DS
      !IT_REQ_REQUIRED_EDU_WT type RCF_T_REQ_REQUIRED_EDU_TXT
      !IT_REQ_QUALI_GROUP type RCF_T_Q_OBJECT_WITH_NAME
      !IT_REQ_QUALIFICATION type RCF_T_REQ_QUALIFICATION
      !IT_REQ_ROLE_NAME type RCF_T_REC_TEAM_TXT
      !IV_REQ_NOTE type RCF_ITF_DESCRIPTION
      !IS_REQ_JOB_INFO_TEXT type RCF_S_ITF_REQ_JOB_INFO_TEXTS
      !IT_REQ_ATTACHMENT type RCF_T_CP_ATTCH_T
      !IT_STATUS_HISTORY type RCF_T_STATUS_HISTORY_ENH
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_REQ_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_VACANCY type RCF_S_VACANCY_LIST
      !IT_POSITION type RCF_T_POS_OF_REQ_DS
      !IT_REQ_REQUIRED_EDU_WT type RCF_T_REQ_REQUIRED_EDU_TXT
      !IT_REQ_QUALIFICATION type RCF_T_REQ_QUALIFICATION
      !IT_REQ_ROLE_NAME type RCF_T_REC_TEAM_TXT
      !IV_REQ_NOTE type RCF_ITF_DESCRIPTION
      !IS_REQ_JOB_INFO_TEXT type RCF_S_ITF_REQ_JOB_INFO_TEXTS
      !IT_REQ_ATTACHMENT type RCF_T_CP_ATTCH_T
      !IT_STATUS_HISTORY type RCF_T_STATUS_HISTORY_ENH
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_CAND_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERS_DATA type RCF_S_CP_PERSONAL_DATA_T
      !IT_ADDR_DATA type RCF_T_CP_CAND_ADDRESS_T
      !IT_TELE_DATA type RCF_T_CP_CAND_TELEFON_T
      !IS_MAIL_DATA type RCF_S_CP_CAND_EMAIL_T
      !IS_JOB_DATA type RCF_S_CP_CAND_JOBPREF_T
      !IT_JOBLOC_DATA type RCF_T_CP_DESIRED_JOB_LOC_T
      !IT_WORKEXP_DATA type RCF_T_CP_WORK_EXPERIENCE_T
      !IT_EDUC_DATA type RCF_T_CP_CAND_EDUCATION_T
      !IT_QUAL_DATA type RCF_T_CP_CAND_QUAL_T
      !IT_ATTCH_DATA type RCF_T_CP_ATTCH_T
      !IT_APPL_DATA type RCF_T_CP_APPLICATIONS_T
      !IV_CAND_PREVIEW type BOOLE_D
      !IT_TALENT_GROUP type RCF_T_CAND_TG
      !IT_CAND_DOC type RCF_T_QA_ACTIVITY_TXT
      !IT_CDCY_ACTIVITIES_DATA type RCF_T_CP_CDCY_ACTIVITIES_T
      !IT_INTERNET_REFS type RCF_T_CP_INTERNET_REF_T
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_CAND_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERS_DATA type RCF_S_CP_PERSONAL_DATA_T
      !IT_ADDR_DATA type RCF_T_CP_CAND_ADDRESS_T
      !IT_TELE_DATA type RCF_T_CP_CAND_TELEFON_T
      !IS_MAIL_DATA type RCF_S_CP_CAND_EMAIL_T
      !IS_JOB_DATA type RCF_S_CP_CAND_JOBPREF_T
      !IT_JOBLOC_DATA type RCF_T_CP_DESIRED_JOB_LOC_T
      !IT_WORKEXP_DATA type RCF_T_CP_WORK_EXPERIENCE_T
      !IT_EDUC_DATA type RCF_T_CP_CAND_EDUCATION_T
      !IT_QUAL_DATA type RCF_T_CP_CAND_QUAL_T
      !IT_ATTCH_DATA type RCF_T_CP_ATTCH_T
      !IT_APPL_DATA type RCF_T_CP_APPLICATIONS_T
      !IV_CAND_PREVIEW type BOOLE_D
      !IT_TALENT_GROUP type RCF_T_CAND_TG
      !IT_CDCY_ACTIVITIES_DATA type RCF_T_CP_CDCY_ACTIVITIES_T
      !IT_QUESTIONNAIRE type RCF_T_QA_ACTIVITY_TXT
      !IT_INTERNET_REFS type RCF_T_CP_INTERNET_REF_T
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods PREPARE_ADDITIONAL_DATA
    importing
      !IS_HROBJECT type HROBJECT optional
      !IV_PINST_GUID type RCF_PINST_GUID optional
      !IV_ACT_GUID type RCF_ACT_GUID optional
      !IV_FORM_NAME type CHAR30 .
  class-methods GET_AUDT_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERSONAL_DATA type RCF_S_CP_PERSONAL_DATA_T
      !IT_ADDRESS_DATA type RCF_T_CP_CAND_ADDRESS_T
      !IT_TELEPHONE_DATA type RCF_T_CP_CAND_TELEFON_T
      !IS_MAIL_DATA type RCF_S_CP_CAND_EMAIL_T
      !IT_WORKEXPERIENCE type RCF_T_CP_WORK_EXPERIENCE_T
      !IT_EDUCATION type RCF_T_CP_CAND_EDUCATION_T
      !IT_QUALIFICATION type RCF_T_CP_CAND_QUAL_T
      !IT_ATTACHMENTS type RCF_T_CP_ATTCH_T
      !IS_APPL_INFORMATION type RCF_S_LIST_APPLICATIONS_X
      !IS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_AUDT_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERSONAL_DATA type RCF_S_CP_PERSONAL_DATA_T
      !IT_ADDRESS_DATA type RCF_T_CP_CAND_ADDRESS_T
      !IT_TELEPHONE_DATA type RCF_T_CP_CAND_TELEFON_T
      !IS_MAIL_DATA type RCF_S_CP_CAND_EMAIL_T
      !IT_WORKEXPERIENCE type RCF_T_CP_WORK_EXPERIENCE_T
      !IT_EDUCATION type RCF_T_CP_CAND_EDUCATION_T
      !IT_QUALIFICATION type RCF_T_CP_CAND_QUAL_T
      !IS_APPL_INFORMATION type RCF_S_LIST_APPLICATIONS_X
      !IT_ATTACHMENTS type RCF_T_CP_ATTCH_T
      !IS_VERSION_INFO type RCF_S_VERSION_AUDIT_TRAIL
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_APPL_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_APPL_HROBJECT type HROBJECT
      !IV_APPL_DATE type DATS
      !IV_APPL_DESCRIPTION type RCF_ITF_DESCRIPTION
      !IV_APPL_STATUS_TXT type DDTEXT
      !IS_CAND_HROBJECT type HROBJECT
      !IV_CAND_FULLNAME type BU_NAME1TX
      !IS_POST_HROBJECT type HROBJECT
      !IV_POST_HEADER type RCF_ITF_DESCRIPTION
      !IS_REQ_HROBJECT type HROBJECT
      !IV_REQ_HEADER type RCF_REQUISITION_HEADER
      !IT_APPL_REC_TEAM type RCF_T_APPL_ROLES_TEXT
      !IT_APPL_ACTIVITIES type RCF_T_LIST_ACTIVITIES_X
      !IT_CDCY_ACTIVITIES type RCF_T_CP_CDCY_ACTIVITIES_T
      !IS_APPL_INFORMATION type RCF_S_CS_DI_APPLICATION
      !IT_APPL_DOCUMENTS type RCF_T_QA_ACTIVITY_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_APPL_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_APPL_HROBJECT type HROBJECT
      !IV_APPL_DATE type DATS
      !IV_APPL_DESCRIPTION type RCF_ITF_DESCRIPTION
      !IV_APPL_STATUS_TXT type DDTEXT
      !IS_CAND_HROBJECT type HROBJECT
      !IV_CAND_FULLNAME type BU_NAME1TX
      !IS_POST_HROBJECT type HROBJECT
      !IV_POST_HEADER type RCF_ITF_DESCRIPTION
      !IS_REQ_HROBJECT type HROBJECT
      !IV_REQ_HEADER type RCF_REQUISITION_HEADER
      !IT_APPL_REC_TEAM type RCF_T_APPL_ROLES_TEXT
      !IT_APPL_ACTIVITIES type RCF_T_LIST_ACTIVITIES_X
      !IT_CDCY_ACTIVITIES type RCF_T_CP_CDCY_ACTIVITIES_T
      !IS_APPL_INFORMATION type RCF_S_CS_DI_APPLICATION
      !IT_QUESTIONNAIRES type RCF_T_QA_ACTIVITY_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_TG_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_TG_HEADER_TEXT type RCF_S_TG_HEADER_TEXT
      !IT_SUPPORT_TEAM type RCF_T_REC_TEAM_TXT
      !IT_ATTACH type RCF_T_CP_ATTCH_T
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_TG_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_TG_HEADER_TEXT type RCF_S_TG_HEADER_TEXT
      !IT_TG_SUPPORT_TEAM type RCF_T_REC_TEAM_TXT
      !IT_TG_ATTACHMENT type RCF_T_CP_ATTCH_T
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_SG_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_SG_HEADER_TEXT type RCF_S_SGR_HEADER_TEXT
      !IT_SUPPORT_TEAM type RCF_T_REC_TEAM_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_SG_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_SG_HEADER_TEXT type RCF_S_SGR_HEADER_TEXT
      !IT_SG_SUPPORT_TEAM type RCF_T_REC_TEAM_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_RPACT_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_HEADER_DATA type RCF_S_REC_PLAN_ACT
      !IT_ACTIVITY_TYPES type RCF_T_ACTTY_2_RP_ACT_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_RPACT_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_HEADER_DATA type RCF_S_REC_PLAN_ACT
      !IT_ACTIVITY_TYPES type RCF_T_ACTTY_2_RP_ACT_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_CDCY_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_CDCY_HROBJECT type HROBJECT
      !IV_CDCY_CREATE_DATE type DATS
      !IV_CDCY_STATUS_TXT type DDTEXT
      !IS_CAND_HROBJECT type HROBJECT
      !IV_CAND_FULLNAME type BU_NAME1TX
      !IS_REQ_HROBJECT type HROBJECT
      !IV_REQ_HEADER type RCF_REQUISITION_HEADER
      !IT_CDCY_ACTIVITIES type RCF_T_LIST_ACTIVITIES_X
      !IT_QUESTIONNAIRES type RCF_T_QA_ACTIVITY_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_CDCY_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_CDCY_HROBJECT type HROBJECT
      !IV_CDCY_CREATE_DATE type DATS
      !IV_CDCY_STATUS_TXT type DDTEXT
      !IS_CAND_HROBJECT type HROBJECT
      !IV_CAND_FULLNAME type BU_NAME1TX
      !IS_REQ_HROBJECT type HROBJECT
      !IV_REQ_HEADER type RCF_REQUISITION_HEADER
      !IT_CDCY_ACTIVITIES type RCF_T_LIST_ACTIVITIES_X
      !IT_QUESTIONNAIRES type RCF_T_QA_ACTIVITY_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_PUBL_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_REQ_BRANCH_ADDRESS type RCF_S_BUPA_ADDRESSDATA_TEXT
      !IT_REQ_ROLES_NAMES type RCF_T_REC_TEAM_TXT
      !IS_POST_INFO_WT type RCF_S_POSTING_INFO_TEXT
      !IS_POST_INFO_TEXTS type RCF_S_ITF_POST_INFO_TEXTS
      !IS_POST_INST_REC type P5122
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_PUBL_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_REQ_BRANCH_ADDRESS type RCF_S_BUPA_ADDRESSDATA_TEXT
      !IT_REQ_ROLES_NAMES type RCF_T_REC_TEAM_TXT
      !IS_POST_INFO_WT type RCF_S_POSTING_INFO_TEXT
      !IS_POST_INFO_TEXTS type RCF_S_ITF_POST_INFO_TEXTS
      !IS_POST_INST_REC type P5122
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_POST_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_REQ_VACANCY type RCF_S_VACANCY_LIST
      !IT_REQ_POSITION type RCF_T_POS_OF_REQ_DS
      !IT_REQ_REQUIRED_EDU_WT type RCF_T_REQ_REQUIRED_EDU_TXT
      !IT_REQ_QUALI_GROUP type RCF_T_Q_OBJECT_WITH_NAME
      !IT_REQ_QUALIFICATION type RCF_T_REQ_QUALIFICATION
      !IT_REQ_ROLE_NAME type RCF_T_REC_TEAM_TXT
      !IV_REQ_NOTE_TEXT type RCF_ITF_DESCRIPTION
      !IT_REQ_ATTACHMENT type RCF_T_CP_ATTCH_T
      !IS_POST_INFO_WT type RCF_S_POSTING_INFO_TEXT
      !IS_POST_INFO_TEXT type RCF_S_ITF_POST_INFO_TEXTS
      !IT_POST_INFO_TEXT_W_LANG type RCF_T_ITF_LANG_POST_INFO_TEXTS
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_POST_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_REQ_INFO_WT type RCF_S_REQUISITION_INFO_TEXT
      !IS_REQ_JOB_INFO_WT type RCF_S_REQ_JOB_INFO_TEXT
      !IS_REQ_VACANCY type RCF_S_VACANCY_LIST
      !IT_POSITION type RCF_T_POS_OF_REQ_DS
      !IT_REQ_REQUIRED_EDU_WT type RCF_T_REQ_REQUIRED_EDU_TXT
      !IT_REQ_QUALI_GROUP type RCF_T_Q_OBJECT_WITH_NAME
      !IT_REQ_QUALIFICATION type RCF_T_REQ_QUALIFICATION
      !IT_REQ_ROLE_NAME type RCF_T_REC_TEAM_TXT
      !IV_REQ_NOTE type RCF_ITF_DESCRIPTION
      !IS_POST_INFO_WT type RCF_S_POSTING_INFO_TEXT
      !IT_REQ_ATTACHMENT type RCF_T_CP_ATTCH_T
      !IS_POST_INFO_TEXT type RCF_S_ITF_POST_INFO_TEXTS
      !IT_POST_INFO_TEXT_W_LANG type RCF_T_ITF_LANG_POST_INFO_TEXTS
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_ACT_PDF_ADOBEFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERSONAL_DATA type RCF_S_CP_PERSONAL_DATA_T optional
      !IS_GENERAL_DATA type RCF_S_ACTFORM_GENERAL optional
      !IS_SIMPLE_ACT type RCF_S_SIMPLE_ACTIVITY_TEXT optional
      !IS_CORRESPOND_ACT type RCF_S_ACTFORM_CORRESPONDENCE optional
      !IS_QUAL_EVENT_ACT type RCF_S_QUAL_EVENT_ACTIVITY_TXT optional
      !IS_INVITATION_ACT type RCF_S_ACTFORM_INVITATION optional
      !IS_STATUS_ACT type RCF_S_STATUS_ACTIVITY_TXT optional
      !IS_TRANSFER_ACT type RCF_S_DATA_TRANSFER_ACT_TXT optional
      !IS_QUESTIONNAIRE_ACT type RCF_S_ACTFORM_QUESTIONNAIRE optional
      !IS_CLASSIF_ACT type RCF_S_CLASSIF_ACTIVITY_TXT optional
      !IS_BGR_CHECK_ACT type RCF_S_ACTFORM_BACKGROUNDCHECK optional
      !IV_NOTE type STRING optional
      !IT_ATTACHMENT type RCF_T_ATTACHMENTS_TEXT_URL optional
      !IT_EMAIL_ATTACHMENT type RCF_T_ATTACHMENTS_TEXT_URL optional
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_ACT_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IS_PERSONAL_DATA type RCF_S_CP_PERSONAL_DATA_T optional
      !IS_GENERAL_DATA type RCF_S_ACTFORM_GENERAL optional
      !IS_SIMPLE_ACT type RCF_S_SIMPLE_ACTIVITY_TEXT optional
      !IS_CORRESPOND_ACT type RCF_S_ACTFORM_CORRESPONDENCE optional
      !IS_QUAL_EVENT_ACT type RCF_S_QUAL_EVENT_ACTIVITY_TXT optional
      !IS_INVITATION_ACT type RCF_S_ACTFORM_INVITATION optional
      !IS_STATUS_ACT type RCF_S_STATUS_ACTIVITY_TXT optional
      !IS_TRANSFER_ACT type RCF_S_DATA_TRANSFER_ACT_TXT optional
      !IS_QUESTIONNAIRE_ACT type RCF_S_ACTFORM_QUESTIONNAIRE optional
      !IS_CLASSIF_ACT type RCF_S_CLASSIF_ACTIVITY_TXT optional
      !IS_BGR_CHECK_ACT type RCF_S_ACTFORM_BACKGROUNDCHECK optional
      !IS_CONF_ACT type RCF_S_ACT_CNF_ACTIVITY_TXT optional
      !IS_INDIV_CONF type RCF_T_ACTFORM_CNF_INDIVIDUAL optional
      !IV_NOTE type STRING optional
      !IT_ATTACHMENT type RCF_T_ATTACHMENTS_TEXT_URL optional
      !IT_EMAIL_ATTACHMENT type RCF_T_ATTACHMENTS_TEXT_URL optional
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_ORG_PDF_ADOBEFORMS
    importing
      !IV_ORG_XML_DATA type RCF_T_OI_XML
      !IT_ORG_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_ORG_TXT type RCF_S_HROBJECT_TXT
      !IV_FM_NAME type RS38L_FNAM
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_ORG_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IV_ORG_XML_DATA type RCF_T_OI_XML
      !IT_ORG_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_ORG_TXT type RCF_S_HROBJECT_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_POS_PDF_ADOBEFORMS
    importing
      !IV_POS_XML_DATA type RCF_T_OI_XML
      !IT_POS_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_POS_TXT type RCF_S_POS_TXT
      !IV_FM_NAME type RS38L_FNAM
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_POS_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IV_POS_XML_DATA type RCF_T_OI_XML
      !IT_POS_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_POS_TXT type RCF_S_POS_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_JOB_PDF_ADOBEFORMS
    importing
      !IV_JOB_XML_DATA type RCF_T_OI_XML
      !IT_JOB_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_JOB_TXT type RCF_S_HROBJECT_TXT
      !IV_FM_NAME type RS38L_FNAM
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods GET_JOB_PDF_SMARTFORMS
    importing
      !IV_FM_NAME type RS38L_FNAM
      !IV_JOB_XML_DATA type RCF_T_OI_XML
      !IT_JOB_UNIT_TXT type RCF_T_OI_UNIT_TXT
      !IS_JOB_TXT type RCF_S_HROBJECT_TXT
    exporting
      !EV_CONTENT type XSTRING
    raising
      CX_HRRCF .
  class-methods READ_GENERAL_ACT_DATA
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_GENERAL_DATA type RCF_S_ACTFORM_GENERAL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_PERSONAL_DATA
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_PERSONAL_DATA type RCF_S_CP_PERSONAL_DATA_T
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_SIMPLE_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_SIMPLE_ACT type RCF_S_SIMPLE_ACTIVITY_TEXT
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_SIMPLE_CORR_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_SIMPLE_CORR_ACT type RCF_S_ACTFORM_CORRESPONDENCE
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_QUAL_EVENT_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_QUAL_EVENT_ACT type RCF_S_QUAL_EVENT_ACTIVITY_TXT
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_INV_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_INV_ACT type RCF_S_ACTFORM_INVITATION
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_STATCHG_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_STATCHG_ACT type RCF_S_STATUS_ACTIVITY_TXT
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_DATA_TRANS_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_DATA_TRANS_ACT type RCF_S_DATA_TRANSFER_ACT_TXT
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_BGR_CHECK_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_BGR_CHECK_ACT type RCF_S_ACTFORM_BACKGROUNDCHECK
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_CONF_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_CONF_ACT type RCF_S_ACT_CNF_ACTIVITY_TXT
      !ET_INDIV_CONF type RCF_T_ACTFORM_CNF_INDIVIDUAL
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_QUESTIONNAIRE_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_QUESTIONNAIRE_ACT type RCF_S_ACTFORM_QUESTIONNAIRE
      !ET_MESSAGE type BAPIRETTAB .
  class-methods READ_CLASSIF_ACT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_CLASSIF_ACT type RCF_S_CLASSIF_ACTIVITY_TXT
      !ET_MESSAGE type BAPIRETTAB .
ENDCLASS.



CLASS CL_HRRCF_DATAOVERVIEW_PL IMPLEMENTATION.


METHOD get_act_dovr.

  DATA: lo_activity            TYPE REF TO cl_hrrcf_abstract_activity_rec,
        lv_act_cat             TYPE        rcf_act_cat,
        lv_act_ref_guid        TYPE        rcf_act_guid,
        lv_act_ref_cat         TYPE        rcf_act_cat,
        lv_act_guid_attach     TYPE        rcf_act_guid,
        lt_message             TYPE        bapirettab,
        ls_simple_act          TYPE        rcf_s_simple_activity_text,
        ls_general_data        TYPE        rcf_s_actform_general,
        ls_personal_data       TYPE        rcf_s_cp_personal_data_t,
        ls_corresp_act         TYPE        rcf_s_actform_correspondence,
        ls_qual_event_act      TYPE        rcf_s_qual_event_activity_txt,
        ls_inv_act             TYPE        rcf_s_actform_invitation,
        ls_statchg_act         TYPE        rcf_s_status_activity_txt,
        ls_dtrans_act          TYPE        rcf_s_data_transfer_act_txt,
        ls_questionnaire_act   TYPE        rcf_s_actform_questionnaire,
        ls_classif_act         TYPE        rcf_s_classif_activity_txt,
        ls_bgr_check_act       TYPE        rcf_s_actform_backgroundcheck,
        ls_conf_act            TYPE        rcf_s_act_cnf_activity_txt,                   "HEGDEPR 2115638
        lt_indiv_conf          TYPE        rcf_t_actform_cnf_individual,                 "HEGDEPR 2115638
        lv_note                TYPE        string,
        ls_act_attach          TYPE        rcf_s_attach_pl,
        lt_act_attach          TYPE        rcf_t_attach_pl,
        ls_attachment          TYPE        rcf_s_attachments_text_url,
        lt_attachment          TYPE        rcf_t_attachments_text_url,
        ls_email_attachment    TYPE        rcf_s_attachments_text_url,
        lt_email_attachment    TYPE        rcf_t_attachments_text_url,
        ls_questionnr_pl       TYPE        rcf_s_questionnr_pl,
        lv_form_type           TYPE        gsval,
        lv_use_adobe           TYPE        wdy_boolean,
        ls_prm                 TYPE        t77rcf_prm_pl,
        lv_act_dovr_form       TYPE        tdsfname,
        lv_fm_name             TYPE        rs38l_fnam,
        ls_return              TYPE        bapiret2,
        lo_ex                  TYPE REF TO cx_root,
        lv_ical_att_type       TYPE        rcf_attachment_type.                         "N_2390456

  CLEAR: ev_content, es_activity_data, et_attachments[], et_questionnaire[], et_message[].

  cl_hrrcf_activity_factory=>authority_check_dovr(
        IMPORTING
          ps_return = ls_return ).
  IF ls_return IS NOT INITIAL.
    APPEND ls_return TO et_message.
    RETURN.
  ENDIF.

  cl_hrrcf_dataoverview_pl=>read_general_act_data(
    EXPORTING
      iv_act_guid     = iv_act_guid
    IMPORTING
      es_general_data = ls_general_data
      et_message       = lt_message ).
  es_activity_data-act_type_txt = ls_general_data-act_type_txt.
  IF lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    CLEAR lt_message.
  ENDIF.

* personal data of the candidate
  cl_hrrcf_dataoverview_pl=>read_personal_data(
    EXPORTING
      iv_act_guid      = iv_act_guid
    IMPORTING
      es_personal_data = ls_personal_data
      et_message       = lt_message ).
  IF lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    CLEAR lt_message.
  ENDIF.

  cl_hrrcf_activity_mgmt_pl=>get_act_cat(
    EXPORTING
      iv_act_guid = iv_act_guid
    IMPORTING
      ev_act_cat  = lv_act_cat
      et_message  = lt_message ).
  es_activity_data-act_cat = lv_act_cat.
  IF lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    CLEAR lt_message.
  ENDIF.

  CASE lv_act_cat.
    WHEN '01'.  "simple activity
      cl_hrrcf_dataoverview_pl=>read_simple_act(
        EXPORTING
          iv_act_guid   = iv_act_guid
        IMPORTING
          es_simple_act = ls_simple_act
          et_message    = lt_message ).

    WHEN '02'.  "simple correspondence
      cl_hrrcf_dataoverview_pl=>read_simple_corr_act(
        EXPORTING
          iv_act_guid        = iv_act_guid
        IMPORTING
          es_simple_corr_act = ls_corresp_act
          et_message         = lt_message ).

      es_activity_data-letter_template = ls_corresp_act-formname_txt.
* determine if BTF mode or not
      IF ( ls_corresp_act-indiv_letter IS NOT INITIAL ) AND ( ls_corresp_act-indiv_lettersect IS INITIAL ).
        es_activity_data-btf_mode = abap_true.
      ELSE.
        es_activity_data-btf_mode = abap_false.
      ENDIF.

    WHEN '03'. "qualifying event
      cl_hrrcf_dataoverview_pl=>read_qual_event_act(
        EXPORTING
          iv_act_guid       = iv_act_guid
        IMPORTING
          es_qual_event_act = ls_qual_event_act
          et_message        = lt_message ).

    WHEN '04'. "invitation
      cl_hrrcf_dataoverview_pl=>read_inv_act(
        EXPORTING
          iv_act_guid = iv_act_guid
        IMPORTING
          es_inv_act  = ls_inv_act
          et_message  = lt_message ).

      es_activity_data-letter_template = ls_inv_act-formname_txt.
* determine if BTF mode or not
      IF ( ls_corresp_act-indiv_letter IS NOT INITIAL ) AND ( ls_corresp_act-indiv_lettersect IS INITIAL ).
        es_activity_data-btf_mode = abap_true.
      ELSE.
        es_activity_data-btf_mode = abap_false.
      ENDIF.

    WHEN '05'.  "status change
      cl_hrrcf_dataoverview_pl=>read_statchg_act(
        EXPORTING
          iv_act_guid    = iv_act_guid
         IMPORTING
          es_statchg_act = ls_statchg_act
          et_message     = lt_message ).

    WHEN '06'.  "data transfer
      cl_hrrcf_dataoverview_pl=>read_data_trans_act(
        EXPORTING
          iv_act_guid       = iv_act_guid
        IMPORTING
          es_data_trans_act = ls_dtrans_act
          et_message        = lt_message ).

    WHEN '07'.  "questionnaires
      cl_hrrcf_dataoverview_pl=>read_questionnaire_act(
        EXPORTING
          iv_act_guid          = iv_act_guid
        IMPORTING
          es_questionnaire_act = ls_questionnaire_act
          et_message           = lt_message ).

      ls_questionnr_pl-qa_doc_guid = ls_questionnaire_act-qa_doc_guid.
      ls_questionnr_pl-qa_tpl_title = ls_questionnaire_act-qa_tpl_title.
      ls_questionnr_pl-qa_tpl_objid = ls_questionnaire_act-qa_tpl_objid.
      ls_questionnr_pl-qa_tpl_otype = 'VA'.
      ls_questionnr_pl-qa_tpl_plvar = ls_questionnaire_act-plvar.
      ls_questionnr_pl-act_guid = iv_act_guid.
      ls_questionnr_pl-act_type = ls_questionnaire_act-act_type.
      ls_questionnr_pl-act_type_txt = ls_questionnaire_act-act_type_txt.
      ls_questionnr_pl-last_changed_by = ls_questionnaire_act-last_changed_by_name.
      APPEND ls_questionnr_pl TO et_questionnaire.

    WHEN '08'.  "classification
      cl_hrrcf_dataoverview_pl=>read_classif_act(
        EXPORTING
          iv_act_guid    = iv_act_guid
        IMPORTING
          es_classif_act = ls_classif_act
          et_message     = lt_message ).

* Begin of changes: HEGDEPR 2115638
WHEN '09'.  "Confirmation activity
      cl_hrrcf_dataoverview_pl=>read_conf_act(
        EXPORTING
          iv_act_guid   = iv_act_guid
        IMPORTING
          es_conf_act   = ls_conf_act
          et_indiv_conf = lt_indiv_conf
          et_message    = lt_message ).
* End of changes: HEGDEPR 2115638

    WHEN '10'.  "background check
      cl_hrrcf_dataoverview_pl=>read_bgr_check_act(
        EXPORTING
          iv_act_guid      = iv_act_guid
        IMPORTING
          es_bgr_check_act = ls_bgr_check_act
          et_message       = lt_message ).
  ENDCASE.
  IF lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    CLEAR lt_message.
  ENDIF.

  TRY.
      cl_hrrcf_activity_factory=>get_activity_by_guid(
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity ).
      lo_activity->read_text(
       EXPORTING
         use_fallback = abap_true
       IMPORTING
         text         = lv_note ).
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

  cl_hrrcf_activity_mgmt_pl=>get_last_act_ref_guid(
   EXPORTING
     iv_act_guid     = iv_act_guid
   IMPORTING
     ev_act_ref_guid = lv_act_ref_guid
     ev_act_ref_cat  = lv_act_ref_cat ).

  es_activity_data-bundle_act_guid = lv_act_ref_guid.
  es_activity_data-bundle_act_cat  = lv_act_ref_cat.

  IF lv_act_ref_cat = '04' AND lv_act_ref_guid IS NOT INITIAL.
* set the act guid of the reference activity to get the attachments
    lv_act_guid_attach = lv_act_ref_guid.

    cl_hrrcf_dataoverview_pl=>read_inv_act(
        EXPORTING
          iv_act_guid = lv_act_ref_guid
        IMPORTING
          es_inv_act  = ls_inv_act ).

    es_activity_data-letter_template = ls_inv_act-formname_txt.
* determine if BTF mode or not
    IF ( ls_corresp_act-indiv_letter IS NOT INITIAL ) AND ( ls_corresp_act-indiv_lettersect IS INITIAL ).
      es_activity_data-btf_mode = abap_true.
    ELSE.
      es_activity_data-btf_mode = abap_false.
    ENDIF.

  ELSE.
    lv_act_guid_attach = iv_act_guid.
  ENDIF.

  cl_hrrcf_attachment_pl=>read_act_attachments(
     EXPORTING
       iv_act_guid    = lv_act_guid_attach
       iv_subtype     = '0006'
     IMPORTING
       et_attachments = lt_act_attach
       et_message     = lt_message ).

  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.

  APPEND LINES OF lt_act_attach TO et_attachments.
* for the form, we need to separate email attachments and normal attachments
  LOOP AT lt_act_attach INTO ls_act_attach.
    IF ls_act_attach-act_subtype = abap_true.  " email attachment
      MOVE-CORRESPONDING ls_act_attach TO ls_email_attachment. "#EC ENHOK
      APPEND ls_email_attachment TO lt_email_attachment.
    ELSE.
      MOVE-CORRESPONDING ls_act_attach TO ls_attachment.    "#EC ENHOK
      APPEND ls_attachment TO lt_attachment.
    ENDIF.
  ENDLOOP.
""" Start   "N_2390456
""" remove icalendar from the list
    cl_hrrcf_activity_mgmt_pl=>get_ical_att_type(
      IMPORTING
        ev_ical_att_type = lv_ical_att_type
    ).
    IF lv_ical_att_type IS NOT INITIAL.
      DELETE lt_email_attachment WHERE att_type = lv_ical_att_type.
    ENDIF.
""" End     "N_2390456
* determine whether adobeforms or smartforms are supposed to be used
  cl_hr_t77s0=>read_gsval(
   EXPORTING
     grpid       = 'RECFA'
     semid       = 'DATAO'
   IMPORTING
     returnvalue = lv_form_type ).
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_ACT_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_act_dovr_form = ls_prm-value.

      cl_hrrcf_dataoverview_pl=>get_fm_name(
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_act_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name ).

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          iv_act_guid  = iv_act_guid
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        cl_hrrcf_dataoverview_pl=>get_act_pdf_adobeforms(
          EXPORTING
            iv_fm_name           = lv_fm_name
            is_personal_data     = ls_personal_data
            is_general_data      = ls_general_data
            is_simple_act        = ls_simple_act
            is_correspond_act    = ls_corresp_act
            is_qual_event_act    = ls_qual_event_act
            is_invitation_act    = ls_inv_act
            is_status_act        = ls_statchg_act
            is_transfer_act      = ls_dtrans_act
            is_questionnaire_act = ls_questionnaire_act
            is_classif_act       = ls_classif_act
            is_bgr_check_act     = ls_bgr_check_act
            iv_note              = lv_note
            it_attachment        = lt_attachment
            it_email_attachment  = lt_email_attachment
          IMPORTING
            ev_content           = ev_content ).
      ELSE.
        cl_hrrcf_dataoverview_pl=>get_act_pdf_smartforms(
          EXPORTING
            iv_fm_name           = lv_fm_name
            is_personal_data     = ls_personal_data
            is_general_data      = ls_general_data
            is_simple_act        = ls_simple_act
            is_correspond_act    = ls_corresp_act
            is_qual_event_act    = ls_qual_event_act
            is_invitation_act    = ls_inv_act
            is_status_act        = ls_statchg_act
            is_transfer_act      = ls_dtrans_act
            is_questionnaire_act = ls_questionnaire_act
            is_classif_act       = ls_classif_act
            is_bgr_check_act     = ls_bgr_check_act
            is_conf_act          = ls_conf_act                                           "HEGDEPR 2115638
            is_indiv_conf        = lt_indiv_conf                                         "HEGDEPR 2115638
            iv_note              = lv_note
            it_attachment        = lt_attachment
            it_email_attachment  = lt_email_attachment
          IMPORTING
            ev_content           = ev_content ).
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_act_pdf_adobeforms.

  DATA: ls_fp_outputparams      TYPE sfpoutputparams,
        ls_fp_docparams         TYPE sfpdocparams,
        ls_formoutput           TYPE fpformoutput,
        ls_personal_data_af     TYPE rcf_s_af_personal_data,
        ls_simple_act_af        TYPE rcf_s_af_simple_activity_text,
        ls_correspond_act_af    TYPE rcf_s_af_actform_corr,
        ls_qual_event_act_af    TYPE rcf_s_af_qual_event_act_txt,
        ls_invitation_act_af    TYPE rcf_s_af_actform_invitation,
        ls_status_act_af        TYPE rcf_s_af_status_activity_txt,
        ls_transfer_act_af      TYPE rcf_s_af_data_transfer_act_txt,
        ls_questionnaire_act_af TYPE rcf_s_af_actform_questionnaire,
        ls_classif_act_af       TYPE rcf_s_af_classif_activity_txt,
        ls_general_data_af      TYPE rcf_s_af_actform_general.

  CLEAR: ev_content.

  ls_personal_data_af = cl_hrrcf_af_services=>get_personal_data_af( is_personal_data ).
  ls_simple_act_af = cl_hrrcf_af_services=>get_simple_activity_af( is_simple_act ).
  ls_correspond_act_af = cl_hrrcf_af_services=>get_correspond_activity_af( is_correspond_act ).
  ls_qual_event_act_af = cl_hrrcf_af_services=>get_qual_event_activity_af( is_qual_event_act ).
  ls_invitation_act_af = cl_hrrcf_af_services=>get_invitation_activity_af( is_invitation_act ).
  ls_status_act_af = cl_hrrcf_af_services=>get_status_activity_af( is_status_act ).
  ls_transfer_act_af = cl_hrrcf_af_services=>get_transfer_activity_af( is_transfer_act ).
  ls_questionnaire_act_af = cl_hrrcf_af_services=>get_questionnaire_activity_af( is_questionnaire_act ).
  ls_classif_act_af = cl_hrrcf_af_services=>get_classif_activity_af( is_classif_act ).
  ls_general_data_af = cl_hrrcf_af_services=>get_general_activity_af( is_general_data ).

  ls_fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_fp_docparams
      personal_data      = ls_personal_data_af
      general            = ls_general_data_af
      simple             = ls_simple_act_af
      correspondence     = ls_correspond_act_af
      qualifying_event   = ls_qual_event_act_af
      invitation         = ls_invitation_act_af
      status_change      = ls_status_act_af
      data_transfer      = ls_transfer_act_af
      questionnaire      = ls_questionnaire_act_af
      classification     = ls_classif_act_af
      backgroundcheck    = is_bgr_check_act
      note               = iv_note
      attachments        = it_attachment
      email_attachments  = it_email_attachment
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_act_pdf_smartforms.

  DATA: ls_control_parameters TYPE ssfctrlop,
        ls_output_options     TYPE ssfcompop,
        ls_job_output_info    TYPE ssfcrescl,
        lt_lines              TYPE TABLE OF tline,
        l_devtype             TYPE rspoptype,
        l_sam_hawkins         TYPE int4.                    "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.
*
    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = l_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF l_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = l_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = l_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      personal_data      = is_personal_data
      general            = is_general_data
      simple             = is_simple_act
      correspondence     = is_correspond_act
      qualifying_event   = is_qual_event_act
      invitation         = is_invitation_act
      status_change      = is_status_act
      data_transfer      = is_transfer_act
      questionnaire      = is_questionnaire_act
      classification     = is_classif_act
      backgroundcheck    = is_bgr_check_act
      confirmation        = is_conf_act                                                   "HEDGEPR 2115638
      indiv_confirmations = is_indiv_conf                                                 "HEGDEPR 2115638
      note               = iv_note
      attachments        = it_attachment
      email_attachments  = it_email_attachment
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = l_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.


ENDMETHOD.


METHOD get_appl_dovr.

  DATA: lo_appl_bl          TYPE REF TO   cl_hrrcf_application_bl,
        ls_appl_info        TYPE          rcf_s_list_applications_x,
        ls_appl_description TYPE          rcf_s_itf_description,
        ls_appl_information TYPE          rcf_s_cs_di_application,
        lv_employeeid       TYPE          pernr_d,
        lo_employee         TYPE REF TO   cl_hrrcf_employee,
        lv_appl_date        TYPE          dats,
        lv_appl_status_txt  TYPE          ddtext,
        ls_cand_hrobject    TYPE          hrobject,
        lv_cand_fullname    TYPE          bu_name1tx,
        ls_post_hrobject    TYPE          hrobject,
        lv_post_header      TYPE          rcf_itf_description,
        ls_req_hrobject     TYPE          hrobject,
        lv_req_header       TYPE          rcf_requisition_header,
        lv_appl_description TYPE          rcf_itf_description,
        ls_appl_doc         TYPE          rcf_s_qa_activity_txt,
        lt_appl_doc         TYPE          rcf_t_qa_activity_txt,
        ls_questionnr_pl    TYPE          rcf_s_questionnr_pl,
        lo_rec_team_bl      TYPE REF TO   cl_hrrcf_rec_team_bl,
        ls_appl_rec_team    TYPE          rcf_s_appl_roles_text,
        lt_appl_rec_team    TYPE          rcf_t_appl_roles_text,
        lt_rec_team         TYPE          rcf_t_rec_team_txt,
        ls_rec_team         TYPE          rcf_s_rec_team_txt,
        lt_appl_activities  TYPE          rcf_t_list_activities_x,
        lo_candidacy_bl     TYPE REF TO   cl_hrrcf_candidacy_bl,
        lt_cdcy_info        TYPE          rcf_t_list_candidacies_x,
        ls_cdcy_info        TYPE          rcf_s_list_candidacies_x,
        ls_cdcy_activities  TYPE          rcf_s_cp_cdcy_activities_t,
        lt_cdcy_activities  TYPE          rcf_t_cp_cdcy_activities_t,
        ls_prm              TYPE          t77rcf_prm_pl,
        lv_appl_dovr_form   TYPE          tdsfname,
        lv_fm_name          TYPE          rs38l_fnam,
        lv_form_type        TYPE          gsval,
        lv_use_adobe        TYPE          wdy_boolean,
        ls_return           TYPE          bapiret2,
        lt_message          TYPE          bapirettab,
        lo_ex               TYPE REF TO   cx_root.

  CLEAR: ev_content, et_attachment, et_questionnaire, et_message.

  TRY.
      lo_appl_bl = cl_hrrcf_application_bl=>get_instance( ).
      lo_rec_team_bl = cl_hrrcf_rec_team_bl=>get_instance( ).
      lo_candidacy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).

      CALL METHOD lo_appl_bl->check_authorisation_dovr( is_appl_hrobject ).

      CALL METHOD lo_appl_bl->get_application_info_x
        EXPORTING
          ps_appl_hrobject = is_appl_hrobject
        IMPORTING
          ps_appl_info_x   = ls_appl_info.

      lv_appl_date       = ls_appl_info-appl_date.
      lv_appl_status_txt = ls_appl_info-appl_status_txt.
      ls_cand_hrobject   = ls_appl_info-cand_hrobject.
      lv_cand_fullname   = ls_appl_info-cand_name.
      ls_post_hrobject   = ls_appl_info-posting_hrobject.
      lv_post_header     = ls_appl_info-posting_header.
      ls_req_hrobject    = ls_appl_info-req_hrobject.
      lv_req_header      = ls_appl_info-req_header.

      ls_appl_information-applicationid        = ls_appl_info-appl_hrobject-objid.
      ls_appl_information-status               = ls_appl_info-appl_status.
      ls_appl_information-status_txt           = ls_appl_info-appl_status_txt.
      ls_appl_information-application_date     = ls_appl_info-appl_date.
      ls_appl_information-reason_code          = ls_appl_info-reason_code.
      ls_appl_information-reason_code_txt      = ls_appl_info-reason_code_txt.
      ls_appl_information-tech_appl_source     = ls_appl_info-tech_appl_source.
      ls_appl_information-tech_appl_source_txt = ls_appl_info-tech_appl_source_txt.

*     Source of application
      ls_appl_information-appl_source           = ls_appl_info-appl_source.
      ls_appl_information-appl_source_txt       = ls_appl_info-appl_source_txt.
      ls_appl_information-appl_source_type      = ls_appl_info-appl_source_type.
      ls_appl_information-appl_source_type_txt  = ls_appl_info-appl_source_type_txt.
      ls_appl_information-appl_source_info      = ls_appl_info-appl_source_info.

      IF ls_appl_information-appl_source_type EQ '1'.
*     Get the fullname of employee(for employee referral)
        IF NOT ls_appl_info-sobid CO ' 0'.
          lv_employeeid = ls_appl_info-sobid.
          CALL METHOD cl_hrrcf_employee=>get
            EXPORTING
              employeeid = lv_employeeid
            IMPORTING
              employee   = lo_employee.

          IF lo_employee IS BOUND.
            ls_appl_information-ref_name = lo_employee->centraldataperson-fullname.
          ENDIF.
        ENDIF.
      ENDIF.
      CALL METHOD lo_appl_bl->get_appl_cover_letter
        EXPORTING
          ps_appl_hrobject    = is_appl_hrobject
          p_langu             = sy-langu
        IMPORTING
          ps_appl_description = ls_appl_description.
      lv_appl_description = ls_appl_description-description.

*     get questionnaires
      CALL METHOD cl_hrrcf_qa_bl=>get_documents_appl_ovr
        EXPORTING
          ps_appl_hrobject   = is_appl_hrobject
        IMPORTING
          pt_qa_activity_txt = lt_appl_doc.

      CALL METHOD lo_rec_team_bl->get_exp_rec_team
        EXPORTING
          ps_hrobject = is_appl_hrobject
        IMPORTING
          pt_rec_team = lt_rec_team.
      LOOP AT lt_rec_team INTO ls_rec_team.
        MOVE-CORRESPONDING ls_rec_team TO ls_appl_rec_team. "#EC ENHOK
        APPEND ls_appl_rec_team TO lt_appl_rec_team.
      ENDLOOP.

      CALL METHOD cl_hrrcf_activity_factory=>get_combined_activity_list
        EXPORTING
          ps_hrobject      = is_appl_hrobject
        IMPORTING
          pt_activity_list = lt_appl_activities.
      SORT lt_appl_activities BY due_date.

      CALL METHOD lo_candidacy_bl->get_candidacy_list_x
        EXPORTING
          ps_appl_hrobject = is_appl_hrobject
        IMPORTING
          pt_candidacies_x = lt_cdcy_info.

      LOOP AT lt_cdcy_info INTO ls_cdcy_info.
        CLEAR ls_cdcy_activities.
        MOVE-CORRESPONDING ls_cdcy_info TO ls_cdcy_activities.
        IF ls_cdcy_info-is_orig_cdcy EQ abap_true.
          CALL METHOD
            cl_hrrcf_activity_factory=>get_combined_activity_list
            EXPORTING
              ps_hrobject      = ls_cdcy_info-cdcy_hrobject
            IMPORTING
              pt_activity_list = ls_cdcy_activities-activity_list.
        ELSE.
          CALL METHOD cl_hrrcf_activity_factory=>get_activity_list
            EXPORTING
              in_hrobject      = ls_cdcy_info-cdcy_hrobject
            IMPORTING
              pt_activity_list = ls_cdcy_activities-activity_list.
        ENDIF.

        IF ls_cdcy_activities-activity_list IS NOT INITIAL.
          ls_cdcy_activities-activities_exist = abap_true.
        ENDIF.
        APPEND ls_cdcy_activities TO lt_cdcy_activities.
      ENDLOOP.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_APPL_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_appl_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_appl_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_appl_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_appl_pdf_adobeforms
          EXPORTING
            iv_fm_name          = lv_fm_name
            is_appl_hrobject    = is_appl_hrobject
            iv_appl_date        = lv_appl_date
            iv_appl_description = lv_appl_description
            iv_appl_status_txt  = lv_appl_status_txt
            is_cand_hrobject    = ls_cand_hrobject
            iv_cand_fullname    = lv_cand_fullname
            is_post_hrobject    = ls_post_hrobject
            iv_post_header      = lv_post_header
            is_req_hrobject     = ls_req_hrobject
            iv_req_header       = lv_req_header
            it_appl_rec_team    = lt_appl_rec_team
            it_appl_activities  = lt_appl_activities
            it_cdcy_activities  = lt_cdcy_activities
            is_appl_information = ls_appl_information
            it_questionnaires   = lt_appl_doc
          IMPORTING
            ev_content          = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_appl_pdf_smartforms
          EXPORTING
            iv_fm_name          = lv_fm_name
            is_appl_hrobject    = is_appl_hrobject
            iv_appl_date        = lv_appl_date
            iv_appl_description = lv_appl_description
            iv_appl_status_txt  = lv_appl_status_txt
            is_cand_hrobject    = ls_cand_hrobject
            iv_cand_fullname    = lv_cand_fullname
            is_post_hrobject    = ls_post_hrobject
            iv_post_header      = lv_post_header
            is_req_hrobject     = ls_req_hrobject
            iv_req_header       = lv_req_header
            it_appl_rec_team    = lt_appl_rec_team
            it_appl_activities  = lt_appl_activities
            it_cdcy_activities  = lt_cdcy_activities
            is_appl_information = ls_appl_information
            it_appl_documents   = lt_appl_doc
          IMPORTING
            ev_content          = ev_content.
      ENDIF.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

  CALL METHOD cl_hrrcf_attachment_pl=>read_attachments
    EXPORTING
      is_hrobject    = is_appl_hrobject
      iv_subtype     = '0005'
    IMPORTING
      et_attachments = et_attachment
      et_message     = lt_message.

  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.

  IF lt_appl_doc IS NOT INITIAL.
    LOOP AT lt_appl_doc INTO ls_appl_doc.
      ls_questionnr_pl-qa_doc_guid = ls_appl_doc-qa_doc_guid.
      ls_questionnr_pl-qa_tpl_title = ls_appl_doc-qa_tpl_title.
      ls_questionnr_pl-qa_tpl_objid = ls_appl_doc-qa_tpl_objid.
      ls_questionnr_pl-qa_tpl_otype = 'VA'.
      ls_questionnr_pl-qa_tpl_plvar = ls_appl_doc-plvar.
      ls_questionnr_pl-act_guid = ls_appl_doc-act_guid.
      ls_questionnr_pl-act_type = ls_appl_doc-act_type.
      ls_questionnr_pl-act_type_txt = ls_appl_doc-act_type_txt.
      ls_questionnr_pl-last_changed_by = ls_appl_doc-last_changed_by_name.
      APPEND ls_questionnr_pl TO et_questionnaire.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


METHOD get_appl_pdf_adobeforms.

  DATA: lt_appl_activities_af   TYPE        rcf_t_af_list_activities_x,
        lt_cdcy_activities_af   TYPE        rcf_t_af_cdcy_activities,
        ls_appl_information_af  TYPE        rcf_s_af_di_application,
        lt_questionnaires_af    TYPE        rcf_t_af_actform_questionnaire,
        lv_appl_date_af         TYPE        char10,
        fp_outputparams         TYPE        sfpoutputparams,
        fp_docparams            TYPE        sfpdocparams,
        ls_formoutput           TYPE        fpformoutput.

  CLEAR ev_content.

  lt_appl_activities_af = cl_hrrcf_af_services=>get_activities_af( it_appl_activities ).

  cl_hrrcf_af_services=>get_cdcy_activities_af(
    EXPORTING
      pt_cdcy_activities    = it_cdcy_activities
    IMPORTING
      pt_cdcy_activities_af = lt_cdcy_activities_af ).

  ls_appl_information_af = cl_hrrcf_af_services=>get_application_af( is_appl_information ).

  WRITE iv_appl_date TO lv_appl_date_af.

  cl_hrrcf_af_services=>get_questionnaires_af(
    EXPORTING
      it_questionnaire    = it_questionnaires
    IMPORTING
      et_questionnaire_af = lt_questionnaires_af ).

  fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = fp_docparams
      appl_hrobject      = is_appl_hrobject
      appl_date          = iv_appl_date
      appl_date_af       = lv_appl_date_af
      appl_description   = iv_appl_description
      appl_status_txt    = iv_appl_status_txt
      cand_hrobject      = is_cand_hrobject
      cand_fullname      = iv_cand_fullname
      post_hrobject      = is_post_hrobject
      post_header        = iv_post_header
      req_hrobject       = is_req_hrobject
      req_header         = iv_req_header
      appl_rec_team      = it_appl_rec_team
      appl_activities    = lt_appl_activities_af
      cdcy_activities    = lt_cdcy_activities_af
      questionnaires     = lt_questionnaires_af
      appl_information   = ls_appl_information_af
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_appl_pdf_smartforms.

  DATA: ls_control_parameters      TYPE          ssfctrlop,
        ls_output_options          TYPE          ssfcompop,
        ls_job_output_info         TYPE          ssfcrescl,
        lv_devtype                 TYPE          rspoptype,
        lt_lines                   TYPE TABLE OF tline,
        lv_sam_hawkins             TYPE          int4,      "#EC NEEDED
        ls_appl_info_ui_labels     TYPE          rcf_s_appl_info_ui_labels,
        ls_appl_rec_team_ui_labels TYPE          rcf_s_appl_rec_team_ui_labels,
        ls_appl_activity_ui_labels TYPE          rcf_s_activity_x_ui_labels.

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_appl_info_ui_labels
    EXPORTING
      iv_language            = sy-langu
    RECEIVING
      rs_appl_info_ui_labels = ls_appl_info_ui_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_appl_rec_team_ui_labels
    EXPORTING
      iv_language                = sy-langu
    RECEIVING
      rs_appl_rec_team_ui_labels = ls_appl_rec_team_ui_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_activity_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_activity_ui_labels = ls_appl_activity_ui_labels.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.
  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters      = ls_control_parameters
      output_options          = ls_output_options
      user_settings           = space
      appl_hrobject           = is_appl_hrobject
      appl_date               = iv_appl_date
      appl_description        = iv_appl_description
      appl_status_txt         = iv_appl_status_txt
      cand_hrobject           = is_cand_hrobject
      cand_fullname           = iv_cand_fullname
      post_hrobject           = is_post_hrobject
      post_header             = iv_post_header
      req_hrobject            = is_req_hrobject
      req_header              = iv_req_header
      appl_info_ui_labels     = ls_appl_info_ui_labels
      appl_rec_team           = it_appl_rec_team
      appl_rec_team_ui_labels = ls_appl_rec_team_ui_labels
      appl_activities         = it_appl_activities
      appl_activity_ui_labels = ls_appl_activity_ui_labels
      cdcy_activities         = it_cdcy_activities
      appl_information        = is_appl_information
      appl_documents          = it_appl_documents
    IMPORTING
      job_output_info         = ls_job_output_info
    EXCEPTIONS
      formatting_error        = 1
      internal_error          = 2
      send_error              = 3
      user_canceled           = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_audt_dovr.

  DATA: lo_cp_bl          TYPE REF TO cl_hrrcf_candidate_preview_bl,
        lo_appl_bl        TYPE REF TO cl_hrrcf_application_bl,
        ls_cand_hrobject  TYPE        hrobject,
        ls_pers_data      TYPE        rcf_s_cp_personal_data_t,
        lt_addr_data      TYPE        rcf_t_cp_cand_address_t,
        lt_tele_data      TYPE        rcf_t_cp_cand_telefon_t,
        ls_email_data     TYPE        rcf_s_cp_cand_email_t,
        lt_workexp_data   TYPE        rcf_t_cp_work_experience_t,
        lt_educ_data      TYPE        rcf_t_cp_cand_education_t,
        lt_attch_data     TYPE        rcf_t_cp_attch_t,
        lt_qual_data      TYPE        rcf_t_cp_cand_qual_t,
        ls_vers_info      TYPE        rcf_s_version_audit_trail,
        ls_appl_info      TYPE        rcf_s_list_applications_x,
        ls_prm            TYPE        t77rcf_prm_pl,
        lv_audt_dovr_form TYPE        tdsfname,
        lv_fm_name        TYPE        rs38l_fnam,
        lv_form_type      TYPE        gsval,
        lv_use_adobe      TYPE        wdy_boolean,
        lt_message        TYPE        bapirettab,
        ls_return         TYPE        bapiret2,
        lo_ex                TYPE REF TO cx_root.

  CLEAR: ev_content, et_message[].
  TRY.
      CALL METHOD cl_hrrcf_candidate_preview_bl=>get_instance
        IMPORTING
          result = lo_cp_bl.
      lo_appl_bl = cl_hrrcf_application_bl=>get_instance( ).

      CALL METHOD lo_cp_bl->get_cand_resume
        EXPORTING
          ps_hrobject        = is_appl_hrobject
          p_version          = iv_version
        IMPORTING
          ps_cand_hrobject   = ls_cand_hrobject
          ps_personal_data   = ls_pers_data
          pt_address_data    = lt_addr_data
          pt_telephone_data  = lt_tele_data
          ps_email_data      = ls_email_data
          pt_work_experience = lt_workexp_data
          pt_education       = lt_educ_data
          pt_qualifications  = lt_qual_data
          pt_attachments     = lt_attch_data
          ps_version_info    = ls_vers_info.

      CHECK ls_cand_hrobject IS NOT INITIAL.
      CALL METHOD lo_cp_bl->check_authorisation
        EXPORTING
          cand_object = ls_cand_hrobject.
      IF is_appl_hrobject-otype = 'ND'.
        CALL METHOD lo_appl_bl->get_application_info_x
          EXPORTING
            ps_appl_hrobject   = is_appl_hrobject
            x_pi_info_required = ''
          IMPORTING
            ps_appl_info_x     = ls_appl_info.
      ENDIF.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_AUDT_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.
      lv_audt_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_audt_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_appl_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_audt_pdf_adobeforms
          EXPORTING
            iv_fm_name          = lv_fm_name
            is_personal_data    = ls_pers_data
            it_address_data     = lt_addr_data
            it_telephone_data   = lt_tele_data
            is_mail_data        = ls_email_data
            it_workexperience   = lt_workexp_data
            it_education        = lt_educ_data
            it_qualification    = lt_qual_data
            it_attachments      = lt_attch_data
            is_appl_information = ls_appl_info
            is_version_info     = ls_vers_info
          IMPORTING
            ev_content          = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_audt_pdf_smartforms
          EXPORTING
            iv_fm_name           = lv_fm_name
            is_personal_data     = ls_pers_data
            it_address_data      = lt_addr_data
            it_telephone_data    = lt_tele_data
            is_mail_data         = ls_email_data
            it_workexperience    = lt_workexp_data
            it_education         = lt_educ_data
            it_qualification     = lt_qual_data
            it_attachments       = lt_attch_data
            is_appl_information  = ls_appl_info
            is_version_info      = ls_vers_info
          IMPORTING
            ev_content           = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

  CALL METHOD cl_hrrcf_attachment_pl=>read_audt_trail_attachments
    EXPORTING
      is_appl_hrobject = is_appl_hrobject
      iv_version       = iv_version
    IMPORTING
      et_attachments   = et_attachment
      et_message       = lt_message.
  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.

ENDMETHOD.


METHOD get_audt_pdf_adobeforms.

  DATA: ls_standard_address_af TYPE        rcf_s_cp_cand_address_t,
        lt_further_address_af  TYPE        rcf_t_cp_cand_address_t,
        ls_personal_data_af    TYPE        rcf_s_af_personal_data,
        lt_workexperience_af   TYPE        rcf_t_af_work_experience,
        lt_education_af        TYPE        rcf_t_af_education,
        lt_qualifications_af   TYPE        rcf_t_af_qualgr_qual,
        ls_application_info_af TYPE        rcf_s_af_list_applications_x,
        ls_version_info_af     TYPE        rcf_s_af_version_audit_trail,
        fp_outputparams        TYPE        sfpoutputparams,
        fp_docparams           TYPE        sfpdocparams,
        ls_formoutput          TYPE        fpformoutput.

  CLEAR: ev_content.

  ls_standard_address_af = cl_hrrcf_af_services=>get_standard_address_af( it_address_data ).

  lt_further_address_af = cl_hrrcf_af_services=>get_further_addresses_af( it_address_data ).

  ls_personal_data_af = cl_hrrcf_af_services=>get_personal_data_af( is_personal_data ).

  lt_workexperience_af = cl_hrrcf_af_services=>get_workexperience_af( it_workexperience ).

  lt_education_af = cl_hrrcf_af_services=>get_education_data_af( it_education ).

  CALL METHOD cl_hrrcf_af_services=>get_qualific_cand_af
    EXPORTING
      pt_qualification    = it_qualification
    IMPORTING
      pt_qualification_af = lt_qualifications_af.

  ls_application_info_af = cl_hrrcf_af_services=>get_application_info_af( is_appl_information ).

  ls_version_info_af = cl_hrrcf_af_services=>get_version_info_af( is_version_info ).

  fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams   = fp_docparams
      personaldata        = ls_personal_data_af
      standard_address    = ls_standard_address_af
      further_addressdata = lt_further_address_af
      telephonedata       = it_telephone_data
      maildata            = is_mail_data
      workexperience      = lt_workexperience_af
      education           = lt_education_af
      qualifications      = lt_qualifications_af
      attachments         = it_attachments
      application_info    = ls_application_info_af
      version_info        = ls_version_info_af
    IMPORTING
      /1bcdwb/formoutput  = ls_formoutput
    EXCEPTIONS
      usage_error         = 1
      system_error        = 2
      internal_error      = 3
      OTHERS              = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_audt_pdf_smartforms.

  DATA: ls_control_parameters      TYPE          ssfctrlop,
        ls_output_options          TYPE          ssfcompop,
        ls_job_output_info         TYPE          ssfcrescl,
        lv_devtype                 TYPE          rspoptype,
        lt_lines                   TYPE TABLE OF tline,
        lv_sam_hawkins             TYPE          int4.      "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      personaldata       = is_personal_data
      addressdata        = it_address_data
      telephondata       = it_telephone_data
      maildata           = is_mail_data
      workexperience     = it_workexperience
      education          = it_education
      qualifications     = it_qualification
      attachments        = it_attachments
      application_info   = is_appl_information
      version_info       = is_version_info
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_cand_dovr.

  DATA: lo_cp_bl            TYPE REF TO   cl_hrrcf_candidate_preview_bl,
        ls_personal_data    TYPE          rcf_s_cp_personal_data_t,
        lt_address_data     TYPE          rcf_t_cp_cand_address_t,
        lt_telephone_data   TYPE          rcf_t_cp_cand_telefon_t,
        ls_mail_data        TYPE          rcf_s_cp_cand_email_t,
        ls_desired_job      TYPE          rcf_s_cp_cand_jobpref_t,
        lt_desired_job_loc  TYPE          rcf_t_cp_desired_job_loc_t,
        lt_work_experience  TYPE          rcf_t_cp_work_experience_t,
        lt_education        TYPE          rcf_t_cp_cand_education_t,
        lt_qualification    TYPE          rcf_t_cp_cand_qual_t,
        lt_applications     TYPE          rcf_t_cp_applications_t,
        lt_cdcy_activities  TYPE          rcf_t_cp_cdcy_activities_t,
        lt_attch_data       TYPE          rcf_t_cp_attch_t,
        lt_cand_doc         TYPE          rcf_t_qa_activity_txt,
        ls_cand_doc         TYPE          rcf_s_qa_activity_txt,
        ls_questionnr_pl    TYPE          rcf_s_questionnr_pl,
        lt_internet_refs    TYPE          rcf_t_cand_internet_ref_pl,
        ls_internet_refs    TYPE          rcf_s_cand_internet_ref_pl,
        ls_internet_refs_cp TYPE          rcf_s_cp_internet_ref_t,
        lt_internet_refs_cp TYPE          rcf_t_cp_internet_ref_t,
        ls_prm              TYPE          t77rcf_prm_pl,
        lv_cand_dovr_form   TYPE          tdsfname,
        lv_form_type        TYPE          gsval,
        lv_use_adobe        TYPE          wdy_boolean,
        lv_fm_name          TYPE          rs38l_fnam,
        lv_cand_preview     TYPE          boole_d,
        lv_cand_tg          TYPE          rcf_t_cand_tg,
        ls_return           TYPE          bapiret2,
        lt_message          TYPE          bapirettab,
        lo_ex               TYPE REF TO   cx_root.

  CLEAR: ev_content, ev_cand_name, et_attachment[], et_questionnaire[], et_message[].

  TRY.
      CALL METHOD cl_hrrcf_candidate_preview_bl=>get_instance
        IMPORTING
          result = lo_cp_bl.

      CALL METHOD lo_cp_bl->check_authorisation
        EXPORTING
          cand_object = is_cand_hrobject.

      CALL METHOD lo_cp_bl->is_viewed_by_candidate
        EXPORTING
          username     = sy-uname
          cand_object  = is_cand_hrobject
        RECEIVING
          cand_preview = lv_cand_preview.

      CALL METHOD lo_cp_bl->get_personal_data
        EXPORTING
          cand_obj      = is_cand_hrobject
        IMPORTING
          personal_data = ls_personal_data.

      ev_cand_name = ls_personal_data-fullname.

      CALL METHOD lo_cp_bl->get_contact_data
        EXPORTING
          bus_partner   = ls_personal_data-bupa_number
        IMPORTING
          addressdata   = lt_address_data
          telephonedata = lt_telephone_data
          maildata      = ls_mail_data.

      CALL METHOD lo_cp_bl->get_desired_job
        EXPORTING
          cand_obj   = is_cand_hrobject
        IMPORTING
          desiredjob = ls_desired_job.
      SORT ls_desired_job-hierarchy_level_list.
      DELETE ADJACENT DUPLICATES FROM ls_desired_job-hierarchy_level_list.
      SORT ls_desired_job-functional_area_list.
      DELETE ADJACENT DUPLICATES FROM ls_desired_job-functional_area_list.
      SORT ls_desired_job-industry_list.
      DELETE ADJACENT DUPLICATES FROM ls_desired_job-industry_list.

      CALL METHOD lo_cp_bl->get_desired_job_loc
        EXPORTING
          cand_obj      = is_cand_hrobject
        IMPORTING
          desiredjobloc = lt_desired_job_loc.

      CALL METHOD lo_cp_bl->get_workexperience
        EXPORTING
          cand_obj       = is_cand_hrobject
        IMPORTING
          workexperience = lt_work_experience.

      CALL METHOD lo_cp_bl->get_education
        EXPORTING
          cand_obj  = is_cand_hrobject
        IMPORTING
          education = lt_education.

      CALL METHOD lo_cp_bl->get_qualification
        EXPORTING
          cand_obj      = is_cand_hrobject
        IMPORTING
          qualification = lt_qualification.

      CALL METHOD lo_cp_bl->get_applications
        EXPORTING
          cand_obj    = is_cand_hrobject
        IMPORTING
          application = lt_applications.

      CALL METHOD lo_cp_bl->get_attachments
        EXPORTING
          cand_obj    = is_cand_hrobject
        IMPORTING
          attachments = lt_attch_data.

      CALL METHOD lo_cp_bl->get_cand_documents
        EXPORTING
          cand_obj       = is_cand_hrobject
          cand_view      = lv_cand_preview
        IMPORTING
          cand_documents = lt_cand_doc.

      CALL METHOD lo_cp_bl->get_cdcy_activities
        EXPORTING
          ps_cand_hrobject   = is_cand_hrobject
        IMPORTING
          pt_cdcy_activities = lt_cdcy_activities.

      IF lv_cand_preview EQ abap_false.
        CALL METHOD lo_cp_bl->get_cand_tg_for_preview
          EXPORTING
            cand_obj           = is_cand_hrobject
          IMPORTING
            cand_talent_groups = lv_cand_tg.
      ENDIF.

      IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
        CALL METHOD cl_hrrcf_co_candidate_pl=>read_cand_internet_references
          EXPORTING
            is_cand_hrobject       = is_cand_hrobject
          IMPORTING
            et_internet_references = lt_internet_refs.

        LOOP AT lt_internet_refs INTO ls_internet_refs.
          CLEAR ls_internet_refs_cp.
          MOVE-CORRESPONDING ls_internet_refs TO ls_internet_refs_cp. "#EC ENHOK
          APPEND ls_internet_refs_cp TO lt_internet_refs_cp.
        ENDLOOP.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_CAND_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.
      lv_cand_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_cand_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_cand_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_cand_pdf_adobeforms
          EXPORTING
            iv_fm_name              = lv_fm_name
            is_pers_data            = ls_personal_data
            it_addr_data            = lt_address_data
            it_tele_data            = lt_telephone_data
            is_mail_data            = ls_mail_data
            is_job_data             = ls_desired_job
            it_jobloc_data          = lt_desired_job_loc
            it_workexp_data         = lt_work_experience
            it_educ_data            = lt_education
            it_qual_data            = lt_qualification
            it_attch_data           = lt_attch_data
            it_appl_data            = lt_applications
            iv_cand_preview         = lv_cand_preview
            it_talent_group         = lv_cand_tg
            it_questionnaire        = lt_cand_doc
            it_cdcy_activities_data = lt_cdcy_activities
            it_internet_refs        = lt_internet_refs_cp
          IMPORTING
            ev_content              = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_cand_pdf_smartforms
          EXPORTING
            iv_fm_name              = lv_fm_name
            is_pers_data            = ls_personal_data
            it_addr_data            = lt_address_data
            it_tele_data            = lt_telephone_data
            is_mail_data            = ls_mail_data
            is_job_data             = ls_desired_job
            it_jobloc_data          = lt_desired_job_loc
            it_workexp_data         = lt_work_experience
            it_educ_data            = lt_education
            it_qual_data            = lt_qualification
            it_attch_data           = lt_attch_data
            it_appl_data            = lt_applications
            iv_cand_preview         = lv_cand_preview
            it_talent_group         = lv_cand_tg
            it_cand_doc             = lt_cand_doc
            it_cdcy_activities_data = lt_cdcy_activities
            it_internet_refs        = lt_internet_refs_cp
          IMPORTING
            ev_content              = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

  CALL METHOD cl_hrrcf_attachment_pl=>read_attachments
    EXPORTING
      is_hrobject    = is_cand_hrobject
      iv_subtype     = '0001'
    IMPORTING
      et_attachments = et_attachment
      et_message     = lt_message.
  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.

  IF lt_cand_doc IS NOT INITIAL.
    LOOP AT lt_cand_doc INTO ls_cand_doc.
      ls_questionnr_pl-qa_doc_guid = ls_cand_doc-qa_doc_guid.
      ls_questionnr_pl-qa_tpl_title = ls_cand_doc-qa_tpl_title.
      ls_questionnr_pl-qa_tpl_objid = ls_cand_doc-qa_tpl_objid.
      ls_questionnr_pl-qa_tpl_otype = 'VA'.
      ls_questionnr_pl-qa_tpl_plvar = ls_cand_doc-plvar.
      ls_questionnr_pl-act_guid = ls_cand_doc-act_guid.
      ls_questionnr_pl-act_type = ls_cand_doc-act_type.
      ls_questionnr_pl-act_type_txt = ls_cand_doc-act_type_txt.
      ls_questionnr_pl-last_changed_by = ls_cand_doc-last_changed_by_name.
      APPEND ls_questionnr_pl TO et_questionnaire.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


METHOD get_cand_pdf_adobeforms.

  DATA: fp_outputparams     TYPE        sfpoutputparams,
        fp_docparams        TYPE        sfpdocparams,
        ls_formoutput       TYPE        fpformoutput,
        ls_personal_data    TYPE        rcf_s_af_personal_data,
        ls_standard_address TYPE        rcf_s_cp_cand_address_t,
        lt_further_address  TYPE        rcf_t_cp_cand_address_t,
        lt_workexperience   TYPE        rcf_t_af_work_experience,
        lt_education        TYPE        rcf_t_af_education,
        lt_qualifications   TYPE        rcf_t_af_qualgr_qual,
        lt_application      TYPE        rcf_t_af_applications,
        lt_cdcy_activities  TYPE        rcf_t_af_cdcy_activities,
        lt_questionnaire    TYPE        rcf_t_af_actform_questionnaire.

  CLEAR: ev_content.

  ls_personal_data = cl_hrrcf_af_services=>get_personal_data_af( is_pers_data ).

  ls_standard_address = cl_hrrcf_af_services=>get_standard_address_af( it_addr_data ).

  lt_further_address = cl_hrrcf_af_services=>get_further_addresses_af( it_addr_data ).

  lt_workexperience = cl_hrrcf_af_services=>get_workexperience_af( it_workexp_data ).

  lt_education = cl_hrrcf_af_services=>get_education_data_af( it_educ_data ).

  cl_hrrcf_af_services=>get_qualific_cand_af(
    EXPORTING
      pt_qualification    = it_qual_data
    IMPORTING
     pt_qualification_af = lt_qualifications ).

  lt_application = cl_hrrcf_af_services=>get_applications_af( it_appl_data ).

  cl_hrrcf_af_services=>get_cdcy_activities_af(
    EXPORTING
      pt_cdcy_activities    = it_cdcy_activities_data
    IMPORTING
      pt_cdcy_activities_af = lt_cdcy_activities ).

  cl_hrrcf_af_services=>get_questionnaires_af(
    EXPORTING
      it_questionnaire    = it_questionnaire
    IMPORTING
      et_questionnaire_af = lt_questionnaire ).

  fp_docparams-langu  = sy-langu.

* Set output parameters and open spool job
  fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams   = fp_docparams
      cand_preview        = iv_cand_preview
      personaldata        = ls_personal_data
      standard_address    = ls_standard_address
      further_addressdata = lt_further_address
      telephonedata       = it_tele_data
      maildata            = is_mail_data
      desiredjob          = is_job_data
      desiredjobloc       = it_jobloc_data
      workexperience      = lt_workexperience
      education           = lt_education
      qualifications      = lt_qualifications
      applications        = lt_application
      attachments         = it_attch_data
      questionnaires      = lt_questionnaire
      cdcy_activities     = lt_cdcy_activities
      cand_talent_group   = it_talent_group
      internet_references = it_internet_refs
    IMPORTING
      /1bcdwb/formoutput  = ls_formoutput
    EXCEPTIONS
      usage_error         = 1
      system_error        = 2
      internal_error      = 3
      OTHERS              = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_cand_pdf_smartforms.

  DATA: ls_internet_ref_labels TYPE rcf_s_cp_internet_ref_labels,
        ls_control_parameters  TYPE          ssfctrlop,
        ls_output_options      TYPE          ssfcompop,
        ls_job_output_info     TYPE          ssfcrescl,
        lv_devtype             TYPE          rspoptype,
        lt_lines               TYPE TABLE OF tline,
        lv_sam_hawkins         TYPE          int4.          "#EC NEEDED

  CLEAR: ev_content.

  IF NOT it_internet_refs IS INITIAL.
    CALL METHOD cl_hrrcf_dovr_labels_pl=>get_internet_ref_labels
      RECEIVING
        rs_internet_ref_labels = ls_internet_ref_labels.
  ENDIF.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.
  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters  = ls_control_parameters
      output_options      = ls_output_options
      user_settings       = space
      personaldata        = is_pers_data
      addressdata         = it_addr_data
      telephondata        = it_tele_data
      maildata            = is_mail_data
      desiredjob          = is_job_data
      desiredjobloc       = it_jobloc_data
      workexperience      = it_workexp_data
      education           = it_educ_data
      qualifications      = it_qual_data
      attachments         = it_attch_data
      applications        = it_appl_data
      cdcy_activities     = it_cdcy_activities_data
      cand_preview        = iv_cand_preview
      cand_documents      = it_cand_doc
      cand_talent_group   = it_talent_group
      internet_references = it_internet_refs
      internet_ref_labels = ls_internet_ref_labels
    IMPORTING
      job_output_info     = ls_job_output_info
    EXCEPTIONS
      formatting_error    = 1
      internal_error      = 2
      send_error          = 3
      user_canceled       = 4
      OTHERS              = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_cdcy_dovr.

  DATA: ls_cand_hrobject      TYPE          hrobject,
        lo_candidacy_bl       TYPE REF TO   cl_hrrcf_candidacy_bl,
        ls_cdcy_info          TYPE          rcf_s_list_candidacies_x,
        lv_cdcy_create_date   TYPE          dats,
        lv_cdcy_status_txt    TYPE          ddtext,
        lv_cand_fullname      TYPE          bu_name1tx,
        ls_req_hrobject       TYPE          hrobject,
        lv_req_header         TYPE          rcf_requisition_header,
        lt_cdcy_activities    TYPE          rcf_t_list_activities_x,
        lt_cdcy_documents     TYPE          rcf_t_qa_activity_txt,
        ls_cdcy_documents     TYPE          rcf_s_qa_activity_txt,
        ls_questionnr_pl      TYPE          rcf_s_questionnr_pl,
        lv_use_adobe          TYPE          wdy_boolean,
        lv_fm_name            TYPE          rs38l_fnam,
        lv_form_type          TYPE          gsval,
        ls_prm                TYPE          t77rcf_prm_pl,
        lv_cdcy_dovr_form     TYPE          tdsfname,
        ls_return             TYPE          bapiret2,
        lo_ex                 TYPE REF TO   cx_root.

  CLEAR: ev_content, et_questionnaire, et_message.
  TRY.
      lo_candidacy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).

      CALL METHOD lo_candidacy_bl->check_authorisation_dovr( is_cdcy_hrobject ).

      CALL METHOD lo_candidacy_bl->get_candidacy_info_x
        EXPORTING
          ps_cdcy_hrobject = is_cdcy_hrobject
        IMPORTING
          ps_cdcy_info_x   = ls_cdcy_info.

      lv_cdcy_create_date = ls_cdcy_info-cdcy_create_date.
      lv_cdcy_status_txt = ls_cdcy_info-cdcy_status_txt.
      ls_cand_hrobject = ls_cdcy_info-cand_hrobject.
      lv_cand_fullname = ls_cdcy_info-cand_name.
      ls_req_hrobject = ls_cdcy_info-req_hrobject.
      lv_req_header = ls_cdcy_info-req_header.

      CALL METHOD cl_hrrcf_activity_factory=>get_activity_list
        EXPORTING
          in_hrobject      = is_cdcy_hrobject
        IMPORTING
          pt_activity_list = lt_cdcy_activities.

      SORT lt_cdcy_activities BY due_date.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

TRY.
      CALL METHOD cl_hrrcf_qa_bl=>get_activities_txt
        EXPORTING
          ps_hrobject        = is_cdcy_hrobject
        IMPORTING
          pt_qa_activity_txt = lt_cdcy_documents.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e053(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '053'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_CDCY_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_cdcy_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_cdcy_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_cdcy_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        cl_hrrcf_dataoverview_pl=>get_cdcy_pdf_adobeforms(
          EXPORTING
            iv_fm_name          = lv_fm_name
            is_cdcy_hrobject    = is_cdcy_hrobject
            iv_cdcy_create_date = lv_cdcy_create_date
            iv_cdcy_status_txt  = lv_cdcy_status_txt
            is_cand_hrobject    = ls_cand_hrobject
            iv_cand_fullname    = lv_cand_fullname
            is_req_hrobject     = ls_req_hrobject
            iv_req_header       = lv_req_header
            it_questionnaires   = lt_cdcy_documents
            it_cdcy_activities  = lt_cdcy_activities
          IMPORTING
            ev_content          = ev_content ).
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_cdcy_pdf_smartforms
          EXPORTING
            iv_fm_name          = lv_fm_name
            is_cdcy_hrobject    = is_cdcy_hrobject
            iv_cdcy_create_date = lv_cdcy_create_date
            iv_cdcy_status_txt  = lv_cdcy_status_txt
            is_cand_hrobject    = ls_cand_hrobject
            iv_cand_fullname    = lv_cand_fullname
            is_req_hrobject     = ls_req_hrobject
            iv_req_header       = lv_req_header
            it_questionnaires   = lt_cdcy_documents
            it_cdcy_activities  = lt_cdcy_activities
          IMPORTING
            ev_content          = ev_content.
      ENDIF.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

  IF lt_cdcy_documents IS NOT INITIAL.
    LOOP AT lt_cdcy_documents INTO ls_cdcy_documents.
      ls_questionnr_pl-qa_doc_guid = ls_cdcy_documents-qa_doc_guid.
      ls_questionnr_pl-qa_tpl_title = ls_cdcy_documents-qa_tpl_title.
      ls_questionnr_pl-qa_tpl_objid = ls_cdcy_documents-qa_tpl_objid.
      ls_questionnr_pl-qa_tpl_otype = 'VA'.
      ls_questionnr_pl-qa_tpl_plvar = ls_cdcy_documents-plvar.
      ls_questionnr_pl-act_guid = ls_cdcy_documents-act_guid.
      ls_questionnr_pl-act_type = ls_cdcy_documents-act_type.
      ls_questionnr_pl-act_type_txt = ls_cdcy_documents-act_type_txt.
      ls_questionnr_pl-last_changed_by = ls_cdcy_documents-last_changed_by_name.
      APPEND ls_questionnr_pl TO et_questionnaire.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


METHOD get_cdcy_pdf_adobeforms.

  DATA: ls_fp_outputparams     TYPE        sfpoutputparams,
        ls_fp_docparams        TYPE        sfpdocparams,
        ls_formoutput          TYPE        fpformoutput,
        lv_cdcy_create_date_af TYPE        char10,
        lt_cdcy_activities_af  TYPE        rcf_t_af_list_activities_x,
        lt_questionnaires      TYPE        rcf_t_af_actform_questionnaire.

  CLEAR ev_content.

  lt_cdcy_activities_af = cl_hrrcf_af_services=>get_activities_af( it_cdcy_activities ).

  WRITE iv_cdcy_create_date TO lv_cdcy_create_date_af.

  cl_hrrcf_af_services=>get_questionnaires_af(
     EXPORTING
       it_questionnaire    = it_questionnaires
     IMPORTING
       et_questionnaire_af = lt_questionnaires ).

  ls_fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams   = ls_fp_docparams
      cdcy_hrobject       = is_cdcy_hrobject
      cdcy_create_date    = iv_cdcy_create_date
      cdcy_create_date_af = lv_cdcy_create_date_af
      cdcy_status_txt     = iv_cdcy_status_txt
      cand_hrobject       = is_cand_hrobject
      cand_fullname       = iv_cand_fullname
      req_hrobject        = is_req_hrobject
      req_header          = iv_req_header
      questionnaires      = lt_questionnaires
      cdcy_activities     = lt_cdcy_activities_af
    IMPORTING
      /1bcdwb/formoutput  = ls_formoutput
    EXCEPTIONS
      usage_error         = 1
      system_error        = 2
      internal_error      = 3
      OTHERS              = 4.
  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_cdcy_pdf_smartforms.

  DATA:   ls_control_parameters  TYPE          ssfctrlop,
          ls_output_options      TYPE          ssfcompop,
          ls_job_output_info     TYPE          ssfcrescl,
          lv_devtype             TYPE          rspoptype,
          lt_lines               TYPE TABLE OF tline,
          lv_sam_hawkins         TYPE          int4,        "#EC NEEDED
          ls_cdcy_act_ui_labels  TYPE          rcf_s_activity_x_ui_labels,
          ls_cdcy_info_ui_labels TYPE          rcf_s_cdcy_info_ui_labels,
          lt_questionnaires_sf   TYPE          rcf_t_actform_questionnaire,
          ls_questionnaire_sf    TYPE          rcf_s_actform_questionnaire,
          ls_questionnaire       TYPE          rcf_s_qa_activity_txt.

  CLEAR ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_cdcy_info_ui_labels
    EXPORTING
      iv_language            = sy-langu
    RECEIVING
      rs_cdcy_info_ui_labels = ls_cdcy_info_ui_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_activity_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_activity_ui_labels = ls_cdcy_act_ui_labels.

  LOOP AT it_questionnaires INTO ls_questionnaire.
    MOVE-CORRESPONDING ls_questionnaire TO ls_questionnaire_sf.
    APPEND ls_questionnaire_sf TO lt_questionnaires_sf.
  ENDLOOP.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.
*
    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters      = ls_control_parameters
      output_options          = ls_output_options
      user_settings           = space
      cdcy_hrobject           = is_cdcy_hrobject
      cdcy_create_date        = iv_cdcy_create_date
      cdcy_status_txt         = iv_cdcy_status_txt
      cand_hrobject           = is_cand_hrobject
      cand_fullname           = iv_cand_fullname
      req_hrobject            = is_req_hrobject
      req_header              = iv_req_header
      cdcy_info_ui_labels     = ls_cdcy_info_ui_labels
      cdcy_activities         = it_cdcy_activities
      cdcy_activity_ui_labels = ls_cdcy_act_ui_labels
      questionnaires          = lt_questionnaires_sf
    IMPORTING
      job_output_info         = ls_job_output_info
    EXCEPTIONS
      formatting_error        = 1
      internal_error          = 2
      send_error              = 3
      user_canceled           = 4
      OTHERS                  = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_fm_name.

  DATA: lv_formname TYPE tdsfname.

  CLEAR ev_fm_name.

  lv_formname = iv_fallback_form.

  IF iv_use_adobe IS NOT INITIAL.
*   adobeforms
    TRY.
        CALL FUNCTION 'FP_FUNCTION_MODULE_NAME'
          EXPORTING
            i_name     = lv_formname
          IMPORTING
            e_funcname = ev_fm_name.

      CATCH cx_fp_api_repository cx_fp_api_usage cx_fp_api_internal.
        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            message_type   = sy-msgty
            message_class  = sy-msgid
            message_number = sy-msgno
            message_par1   = sy-msgv1
            message_par2   = sy-msgv2
            message_par3   = sy-msgv3
            message_par4   = sy-msgv4.
    ENDTRY.
  ELSE.
*   smartforms
    CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
      EXPORTING
        formname           = lv_formname
      IMPORTING
        fm_name            = ev_fm_name
      EXCEPTIONS
        no_form            = 1
        no_function_module = 2
        OTHERS             = 3.
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          message_type   = sy-msgty
          message_class  = sy-msgid
          message_number = sy-msgno
          message_par1   = sy-msgv1
          message_par2   = sy-msgv2
          message_par3   = sy-msgv3
          message_par4   = sy-msgv4.
    ENDIF.
  ENDIF.
ENDMETHOD.


METHOD get_job_dovr.
* Author: JDH

  DATA: ls_job_txt       TYPE        rcf_s_hrobject_txt,
        lt_job_xml_data  TYPE        rcf_t_oi_xml,
        lt_job_unit_txt  TYPE        rcf_t_oi_unit_txt,
        lv_form_type     TYPE        gsval,
        lv_use_adobe     TYPE        wdy_boolean,
        ls_prm           TYPE        t77rcf_prm_pl,
        lv_job_dovr_form TYPE        tdsfname,
        lv_fm_name       TYPE        rs38l_fnam,
        ls_return        TYPE        bapiret2,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: et_message[], ev_content.

  TRY.
      CALL METHOD cl_hrrcf_oi_bl=>get_job_data
        EXPORTING
          p_job_objid = is_job_hrobject-objid
        IMPORTING
          ps_job_txt  = ls_job_txt
          pt_job_xml  = lt_job_xml_data.

      CALL METHOD cl_hrrcf_oi_bl=>get_unit_txt_list
        EXPORTING
          p_otype     = is_job_hrobject-otype
        IMPORTING
          pt_unit_txt = lt_job_unit_txt.

* Determine whether Adobe Forms or Smartforms are to be used
      CALL METHOD cl_hr_t77s0=>read_gsval
        EXPORTING
          grpid       = 'RECFA'
          semid       = 'DATAO'
        IMPORTING
          returnvalue = lv_form_type.

      IF lv_form_type IS NOT INITIAL.
        lv_use_adobe = abap_true.
      ELSE.
        lv_use_adobe = abap_false.
      ENDIF.

      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_JOB_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.

      lv_job_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_job_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_job_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_job_pdf_adobeforms
          EXPORTING
            iv_job_xml_data = lt_job_xml_data
            it_job_unit_txt = lt_job_unit_txt
            is_job_txt      = ls_job_txt
            iv_fm_name      = lv_fm_name
          IMPORTING
            ev_content      = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_job_pdf_smartforms
          EXPORTING
            iv_fm_name      = lv_fm_name
            iv_job_xml_data = lt_job_xml_data
            it_job_unit_txt = lt_job_unit_txt
            is_job_txt      = ls_job_txt
          IMPORTING
            ev_content      = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.  "For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_job_pdf_adobeforms.
* Author: JDH

  DATA: lt_job_descriptions TYPE rcf_t_oi_description,
        lt_job_requirements TYPE rcf_t_oi_requirement,
        lt_job_tasks        TYPE rcf_t_oi_task,
        ls_job_unit_lbls_af TYPE rcf_s_af_oi_job_unit_texts,
        ls_doc_params       TYPE sfpdocparams,
        ls_output_params    TYPE sfpoutputparams,
        ls_form_output      TYPE fpformoutput.

  CONSTANTS: lc_job_desc TYPE rcf_oi_unit VALUE '300',
             lc_job_req  TYPE rcf_oi_unit VALUE '301',
             lc_job_task TYPE rcf_oi_unit VALUE '302'.

  CLEAR: ev_content.

* Convert XML data to structured tables
  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_job_desc
      pt_xml_data = iv_job_xml_data
    IMPORTING
      pt_table    = lt_job_descriptions.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_job_req
      pt_xml_data = iv_job_xml_data
    IMPORTING
      pt_table    = lt_job_requirements.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_job_task
      pt_xml_data = iv_job_xml_data
    IMPORTING
      pt_table    = lt_job_tasks.

* Prepare labels to be used in the form
  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_job_unit_txt
      p_unit      = lc_job_desc
    RECEIVING
      p_unit_txt  = ls_job_unit_lbls_af-description_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_job_unit_txt
      p_unit      = lc_job_req
    RECEIVING
      p_unit_txt  = ls_job_unit_lbls_af-requi_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_job_unit_txt
      p_unit      = lc_job_task
    RECEIVING
      p_unit_txt  = ls_job_unit_lbls_af-task_lbl.

  ls_doc_params-langu  = sy-langu.
* Set output parameters and open spool job
  ls_output_params-nodialog = 'X'.    " suppress printer dialog popup
  ls_output_params-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_output_params
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_doc_params
      job_object         = is_job_txt
      job_descriptions   = lt_job_descriptions
      job_requirements   = lt_job_requirements
      job_tasks          = lt_job_tasks
      job_unit_labels    = ls_job_unit_lbls_af
      job_xml_tab        = iv_job_xml_data
      job_unit_tab       = it_job_unit_txt
    IMPORTING
      /1bcdwb/formoutput = ls_form_output
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_form_output-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_job_pdf_smartforms.
* Author: JDH

  DATA: ls_control_parameters TYPE ssfctrlop,
        ls_output_options     TYPE ssfcompop,
        ls_job_output_info    TYPE ssfcrescl,
        lt_lines              TYPE TABLE OF tline,
        lv_filesize           TYPE int4.                    "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get OTF output
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = ls_output_options-tdprinter
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF ls_output_options-tdprinter IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = ls_output_options-tdprinter
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      job_xml_tab        = iv_job_xml_data
      job_unit_tab       = it_job_unit_txt
      job_object         = is_job_txt
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_filesize
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_orgunit_dovr.
* Author: JDH

  DATA: ls_org_txt       TYPE        rcf_s_hrobject_txt,
        lt_org_xml_data  TYPE        rcf_t_oi_xml,
        lt_org_unit_txt  TYPE        rcf_t_oi_unit_txt,
        lv_form_type     TYPE        gsval,
        lv_use_adobe     TYPE        wdy_boolean,
        ls_prm           TYPE        t77rcf_prm_pl,
        lv_org_dovr_form TYPE        tdsfname,
        lv_fm_name       TYPE        rs38l_fnam,
        ls_return        TYPE        bapiret2,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: et_message[], ev_content.

  TRY.
      CALL METHOD cl_hrrcf_oi_bl=>get_orgunit_data
        EXPORTING
          p_org_objid = is_org_u_hrobject-objid
        IMPORTING
          ps_org_txt  = ls_org_txt
          pt_org_xml  = lt_org_xml_data.

      CALL METHOD cl_hrrcf_oi_bl=>get_unit_txt_list
        EXPORTING
          p_otype     = is_org_u_hrobject-otype
        IMPORTING
          pt_unit_txt = lt_org_unit_txt.

* Determine whether Adobe Forms or Smartforms are to be used
      CALL METHOD cl_hr_t77s0=>read_gsval
        EXPORTING
          grpid       = 'RECFA'
          semid       = 'DATAO'
        IMPORTING
          returnvalue = lv_form_type.

      IF lv_form_type IS NOT INITIAL.
        lv_use_adobe = abap_true.
      ELSE.
        lv_use_adobe = abap_false.
      ENDIF.

      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_ORGUNIT_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.

      lv_org_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_org_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_org_u_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_org_pdf_adobeforms
          EXPORTING
            iv_org_xml_data = lt_org_xml_data
            it_org_unit_txt = lt_org_unit_txt
            is_org_txt      = ls_org_txt
            iv_fm_name      = lv_fm_name
          IMPORTING
            ev_content      = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_org_pdf_smartforms
          EXPORTING
            iv_fm_name      = lv_fm_name
            iv_org_xml_data = lt_org_xml_data
            it_org_unit_txt = lt_org_unit_txt
            is_org_txt      = ls_org_txt
          IMPORTING
            ev_content      = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.  "For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_org_pdf_adobeforms.
* Author: JDH

  DATA: lt_org_descriptions TYPE rcf_t_oi_description,
        lt_org_accounting   TYPE rcf_t_oi_accounting,
        lt_org_tasks        TYPE rcf_t_oi_task,
        lt_org_wtime        TYPE rcf_t_oi_wtime,
        ls_org_unit_lbls_af TYPE rcf_s_af_oi_org_unit_texts,
        ls_doc_params       TYPE sfpdocparams,
        ls_output_params    TYPE sfpoutputparams,
        ls_form_output      TYPE fpformoutput.

  CONSTANTS: lc_org_desc  TYPE rcf_oi_unit VALUE '100',
             lc_org_acc   TYPE rcf_oi_unit VALUE '101',
             lc_org_task  TYPE rcf_oi_unit VALUE '102',
             lc_org_wtime TYPE rcf_oi_unit VALUE '103'.

  CLEAR: ev_content.

* Convert XML data to structured tables
  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_org_desc
      pt_xml_data = iv_org_xml_data
    IMPORTING
      pt_table    = lt_org_descriptions.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_org_acc
      pt_xml_data = iv_org_xml_data
    IMPORTING
      pt_table    = lt_org_accounting.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_org_task
      pt_xml_data = iv_org_xml_data
    IMPORTING
      pt_table    = lt_org_tasks.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_org_wtime
      pt_xml_data = iv_org_xml_data
    IMPORTING
      pt_table    = lt_org_wtime.

* Prepare labels to be used in the form
  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_org_unit_txt
      p_unit      = lc_org_desc
    RECEIVING
      p_unit_txt  = ls_org_unit_lbls_af-description_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_org_unit_txt
      p_unit      = lc_org_acc
    RECEIVING
      p_unit_txt  = ls_org_unit_lbls_af-accounting_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_org_unit_txt
      p_unit      = lc_org_task
    RECEIVING
      p_unit_txt  = ls_org_unit_lbls_af-task_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_org_unit_txt
      p_unit      = lc_org_wtime
    RECEIVING
      p_unit_txt  = ls_org_unit_lbls_af-wtime_lbl.

  ls_doc_params-langu  = sy-langu.
* Set output parameters and open spool job
  ls_output_params-nodialog = 'X'.    " suppress printer dialog popup
  ls_output_params-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_output_params
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_doc_params
      orgunit_object     = is_org_txt
      org_descriptions   = lt_org_descriptions
      org_accounting     = lt_org_accounting
      org_tasks          = lt_org_tasks
      org_wtime          = lt_org_wtime
      org_unit_labels    = ls_org_unit_lbls_af
      orgunit_xml_tab    = iv_org_xml_data
      orgunit_unit_tab   = it_org_unit_txt
    IMPORTING
      /1bcdwb/formoutput = ls_form_output
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_form_output-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_org_pdf_smartforms.
* Author: JDH

  DATA: ls_control_parameters TYPE ssfctrlop,
        ls_output_options     TYPE ssfcompop,
        ls_job_output_info    TYPE ssfcrescl,
        lt_lines              TYPE TABLE OF tline,
        lv_filesize           TYPE int4.                    "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get OTF output
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = ls_output_options-tdprinter
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF ls_output_options-tdprinter IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = ls_output_options-tdprinter
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      orgunit_xml_tab    = iv_org_xml_data
      orgunit_unit_tab   = it_org_unit_txt
      orgunit_object     = is_org_txt
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_filesize
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_post_dovr.

  DATA: ls_req_object             TYPE        hrobject,
        lo_posting_bl             TYPE REF TO cl_hrrcf_posting_bl,
        lo_requi_bl               TYPE REF TO cl_hrrcf_requi_bl,
        ls_req_info_wt            TYPE        rcf_s_requisition_info_text,
        ls_req_job_info_wt        TYPE        rcf_s_req_job_info_text,
        ls_req_vacancy            TYPE        rcf_s_vacancy_list,
        lt_req_position           TYPE        rcf_t_pos_of_req_ds,
        lv_req_note_text          TYPE        rcf_itf_description,
        lt_req_required_edu_wt    TYPE        rcf_t_req_required_edu_txt,
        lt_req_quali_group        TYPE        rcf_t_q_object_with_name,
        lt_req_qualification      TYPE        rcf_t_req_qualification,
        lt_req_role_name          TYPE        rcf_t_rec_team_txt,
        lt_req_attachment         TYPE        rcf_t_cp_attch_t,
        ls_post_info_wt           TYPE        rcf_s_posting_info_text,
        ls_post_info_text         TYPE        rcf_s_itf_post_info_texts,
        lt_post_info_text_w_lang  TYPE        rcf_t_itf_lang_post_info_texts,
        ls_prm                    TYPE        t77rcf_prm_pl,
        lv_post_dovr_form         TYPE        tdsfname,
        lv_fm_name                TYPE        rs38l_fnam,
        lv_form_type              TYPE        gsval,
        lv_use_adobe              TYPE        wdy_boolean,
        ls_return                 TYPE        bapiret2,
        lo_ex                     TYPE REF TO cx_root.

  CLEAR: ev_content, ev_posting_text, et_message[].

  TRY.
      lo_posting_bl = cl_hrrcf_posting_bl=>get_instance( ).
      lo_requi_bl = cl_hrrcf_requi_bl=>get_instance( ).

      ls_req_object = lo_posting_bl->get_req_object( is_post_hrobject ).

      CALL METHOD lo_requi_bl->check_authorisation_req_dovr
        EXPORTING
          requi_object = ls_req_object.

      CALL METHOD lo_requi_bl->get_data_summary
        EXPORTING
          ps_req_hrobject        = ls_req_object
          p_langu                = sy-langu
        IMPORTING
          ps_req_info_wt         = ls_req_info_wt
          ps_req_job_info_wt     = ls_req_job_info_wt
          ps_vacancy             = ls_req_vacancy
          pt_positions           = lt_req_position
          p_req_note             = lv_req_note_text
          pt_req_required_edu_wt = lt_req_required_edu_wt
          pt_req_quali_groups    = lt_req_quali_group
          pt_req_qualifications  = lt_req_qualification
          pt_req_role_name       = lt_req_role_name
          pt_req_attachments     = lt_req_attachment.

      CALL METHOD lo_posting_bl->get_data_summary
        EXPORTING
          ps_post_hrobject          = is_post_hrobject
          p_langu                   = sy-langu
        IMPORTING
          ps_post_info_wt           = ls_post_info_wt
          ps_post_info_texts        = ls_post_info_text
          pt_post_info_texts_w_lang = lt_post_info_text_w_lang.

      ev_posting_text = ls_post_info_wt-text.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_POST_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_post_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_post_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      IF lv_use_adobe = abap_true.
        cl_hrrcf_dataoverview_pl=>get_post_pdf_adobeforms(
          EXPORTING
            iv_fm_name               = lv_fm_name
            is_req_info_wt           = ls_req_info_wt
            is_req_job_info_wt       = ls_req_job_info_wt
            is_req_vacancy           = ls_req_vacancy
            it_position              = lt_req_position
            it_req_required_edu_wt   = lt_req_required_edu_wt
            it_req_quali_group       = lt_req_quali_group
            it_req_qualification     = lt_req_qualification
            it_req_role_name         = lt_req_role_name
            iv_req_note              = lv_req_note_text
            it_req_attachment        = lt_req_attachment
            is_post_info_wt          = ls_post_info_wt
            is_post_info_text        = ls_post_info_text
            it_post_info_text_w_lang = lt_post_info_text_w_lang
          IMPORTING
            ev_content               = ev_content ).
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_post_pdf_smartforms(
          EXPORTING
            iv_fm_name               = lv_fm_name
            is_req_info_wt           = ls_req_info_wt
            is_req_job_info_wt       = ls_req_job_info_wt
            is_req_vacancy           = ls_req_vacancy
            it_req_position          = lt_req_position
            it_req_required_edu_wt   = lt_req_required_edu_wt
            it_req_quali_group       = lt_req_quali_group
            it_req_qualification     = lt_req_qualification
            it_req_role_name         = lt_req_role_name
            iv_req_note_text         = lv_req_note_text
            it_req_attachment        = lt_req_attachment
            is_post_info_wt          = ls_post_info_wt
            is_post_info_text        = ls_post_info_text
            it_post_info_text_w_lang = lt_post_info_text_w_lang
          IMPORTING
            ev_content               = ev_content ).
      ENDIF.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_post_pdf_adobeforms.

  DATA: ls_fp_outputparams      TYPE        sfpoutputparams,
        ls_fp_docparams         TYPE        sfpdocparams,
        ls_formoutput           TYPE        fpformoutput,
        ls_req_info_wt_af       TYPE        rcf_s_af_requisition_info_text,
        ls_req_job_info_wt_af   TYPE        rcf_s_af_req_job_info_text,
        lt_req_qualification_af TYPE        rcf_t_af_qualgr_qual,
        lt_req_position_af      TYPE        rcf_t_af_pos_of_req_ds.

  CLEAR: ev_content.

  ls_req_info_wt_af = cl_hrrcf_af_services=>get_requisition_info_af( is_req_info_wt ).

  ls_req_job_info_wt_af = cl_hrrcf_af_services=>get_req_job_info_af( is_req_job_info_wt ).

  CALL METHOD cl_hrrcf_af_services=>get_req_qualifications_af
    EXPORTING
      pt_req_qualifications    = it_req_qualification
    IMPORTING
      pt_req_qualifications_af = lt_req_qualification_af.

  lt_req_position_af = cl_hrrcf_af_services=>get_req_positions_af( it_position ).

  ls_fp_docparams-langu  = sy-langu.

* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams      = ls_fp_docparams
      req_info_wt            = ls_req_info_wt_af
      req_vacancy            = is_req_vacancy
      req_positions          = lt_req_position_af
      req_note_text          = iv_req_note
      req_job_info_wt        = ls_req_job_info_wt_af
      req_required_edu_wt    = it_req_required_edu_wt
      req_qualifications     = lt_req_qualification_af
      req_roles_names        = it_req_role_name
      post_info_wt           = is_post_info_wt
      post_info_texts        = is_post_info_text
      post_info_texts_w_lang = it_post_info_text_w_lang
      req_attachments        = it_req_attachment
    IMPORTING
      /1bcdwb/formoutput     = ls_formoutput
    EXCEPTIONS
      usage_error            = 1
      system_error           = 2
      internal_error         = 3
      OTHERS                 = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_post_pdf_smartforms.

  DATA:  ls_control_parameters    TYPE          ssfctrlop,
         ls_output_options        TYPE          ssfcompop,
         ls_job_output_info       TYPE          ssfcrescl,
         lv_devtype               TYPE          rspoptype,
         lt_lines                 TYPE TABLE OF tline,
         lv_sam_hawkins           TYPE          int4,       "#EC NEEDED
         ls_req_info_labels       TYPE          rcf_s_req_info_ui_labels,
         ls_req_job_info_labels   TYPE          rcf_s_req_job_info_ui_labels,
         ls_req_edu_labels        TYPE          rcf_s_req_edu_ui_labels,
         ls_req_quali_labels      TYPE          rcf_s_req_quali_ui_labels,
         ls_req_role_labels       TYPE          rcf_s_req_role_ui_labels,
         ls_post_info_labels      TYPE          rcf_s_post_info_ui_labels.

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_basic_info_ui_labels
    EXPORTING
      iv_req_type           = is_req_info_wt-req_type
      iv_language           = sy-langu
    RECEIVING
      rs_req_info_ui_labels = ls_req_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_job_info_ui_labels
    EXPORTING
      iv_language               = sy-langu
    RECEIVING
      rs_req_job_info_ui_labels = ls_req_job_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_edu_ui_labels
    EXPORTING
      iv_language          = sy-langu
    RECEIVING
      rs_req_edu_ui_labels = ls_req_edu_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_quali_ui_labels
    EXPORTING
      iv_language            = sy-langu
    RECEIVING
      rs_req_quali_ui_labels = ls_req_quali_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_role_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_req_role_ui_labels = ls_req_role_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_post_info_ui_labels
    EXPORTING
      iv_language            = sy-langu
    RECEIVING
      rs_post_info_ui_labels = ls_post_info_labels.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters     = ls_control_parameters
      output_options         = ls_output_options
      user_settings          = space
      req_info_wt            = is_req_info_wt
      req_vacancy            = is_req_vacancy
      req_positions          = it_req_position
      req_note_text          = iv_req_note_text
      req_info_ui_labels     = ls_req_info_labels
      req_job_info_wt        = is_req_job_info_wt
      req_job_info_ui_labels = ls_req_job_info_labels
      req_required_edu_wt    = it_req_required_edu_wt
      req_edu_ui_labels      = ls_req_edu_labels
      req_quali_groups       = it_req_quali_group
      req_qualifications     = it_req_qualification
      req_quali_ui_labels    = ls_req_quali_labels
      req_roles_names        = it_req_role_name
      req_role_ui_labels     = ls_req_role_labels
      req_attachments        = it_req_attachment
      post_info_wt           = is_post_info_wt
      post_info_texts        = is_post_info_text
      post_info_ui_labels    = ls_post_info_labels
      post_info_texts_w_lang = it_post_info_text_w_lang
    IMPORTING
      job_output_info        = ls_job_output_info
    EXCEPTIONS
      formatting_error       = 1
      internal_error         = 2
      send_error             = 3
      user_canceled          = 4
      OTHERS                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_pos_dovr.
* Author: JDH

  DATA: ls_pos_txt       TYPE        rcf_s_pos_txt,
        lt_pos_xml_data  TYPE        rcf_t_oi_xml,
        lt_pos_unit_txt  TYPE        rcf_t_oi_unit_txt,
        lv_form_type     TYPE        gsval,
        lv_use_adobe     TYPE        wdy_boolean,
        ls_prm           TYPE        t77rcf_prm_pl,
        lv_pos_dovr_form TYPE        tdsfname,
        lv_fm_name       TYPE        rs38l_fnam,
        ls_return        TYPE        bapiret2,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: et_message[], ev_content.

  TRY.
      CALL METHOD cl_hrrcf_oi_bl=>get_position_data
        EXPORTING
          p_pos_objid = is_pos_hrobject-objid
        IMPORTING
          ps_pos_txt  = ls_pos_txt
          pt_pos_xml  = lt_pos_xml_data.

      CALL METHOD cl_hrrcf_oi_bl=>get_unit_txt_list
        EXPORTING
          p_otype     = is_pos_hrobject-otype
        IMPORTING
          pt_unit_txt = lt_pos_unit_txt.

* Determine whether Adobe Forms or Smartforms are to be used
      CALL METHOD cl_hr_t77s0=>read_gsval
        EXPORTING
          grpid       = 'RECFA'
          semid       = 'DATAO'
        IMPORTING
          returnvalue = lv_form_type.

      IF lv_form_type IS NOT INITIAL.
        lv_use_adobe = abap_true.
      ELSE.
        lv_use_adobe = abap_false.
      ENDIF.

      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_POS_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.

      lv_pos_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_pos_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_pos_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_pos_pdf_adobeforms
          EXPORTING
            iv_pos_xml_data = lt_pos_xml_data
            it_pos_unit_txt = lt_pos_unit_txt
            is_pos_txt      = ls_pos_txt
            iv_fm_name      = lv_fm_name
          IMPORTING
            ev_content      = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_pos_pdf_smartforms
          EXPORTING
            iv_fm_name      = lv_fm_name
            iv_pos_xml_data = lt_pos_xml_data
            it_pos_unit_txt = lt_pos_unit_txt
            is_pos_txt      = ls_pos_txt
          IMPORTING
            ev_content      = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.  "For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_pos_pdf_adobeforms.
* Author: JDH

  DATA: lt_pos_descriptions TYPE rcf_t_oi_description,
        lt_pos_holder       TYPE rcf_t_oi_holder,
        lt_pos_accounting   TYPE rcf_t_oi_accounting,
        lt_pos_eegrp        TYPE rcf_t_oi_eegroup,
        lt_pos_requirements TYPE rcf_t_oi_requirement,
        lt_pos_tasks        TYPE rcf_t_oi_task,
        lt_pos_wtime        TYPE rcf_t_oi_wtime,
        ls_pos_unit_lbls_af TYPE rcf_s_af_oi_pos_unit_texts,
        ls_doc_params       TYPE sfpdocparams,
        ls_output_params    TYPE sfpoutputparams,
        ls_form_output      TYPE fpformoutput.

  CONSTANTS: lc_pos_desc   TYPE rcf_oi_unit VALUE '200',
             lc_pos_acc    TYPE rcf_oi_unit VALUE '201',
             lc_pos_eegrp  TYPE rcf_oi_unit VALUE '202',
             lc_pos_req    TYPE rcf_oi_unit VALUE '203',
             lc_pos_task   TYPE rcf_oi_unit VALUE '204',
             lc_pos_wtime  TYPE rcf_oi_unit VALUE '205',
             lc_pos_holder TYPE rcf_oi_unit VALUE '206'.

  CLEAR: ev_content.

* Convert XML data to structured tables
  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_desc
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_descriptions.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_holder
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_holder.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_acc
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_accounting.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_eegrp
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_eegrp.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_req
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_requirements.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_task
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_tasks.

  CALL METHOD cl_hrrcf_oi_bl=>transform_to_table
    EXPORTING
      p_unit      = lc_pos_wtime
      pt_xml_data = iv_pos_xml_data
    IMPORTING
      pt_table    = lt_pos_wtime.

* Prepare labels to be used in the form
  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_desc
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-description_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_holder
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-holder_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_acc
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-accounting_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_eegrp
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-ee_group_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_req
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-requi_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_task
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-task_lbl.

  CALL METHOD cl_hrrcf_af_services=>get_unit_text
    EXPORTING
      pt_unit_txt = it_pos_unit_txt
      p_unit      = lc_pos_wtime
    RECEIVING
      p_unit_txt  = ls_pos_unit_lbls_af-wtime_lbl.

  ls_doc_params-langu  = sy-langu.
* Set output parameters and open spool job
  ls_output_params-nodialog = 'X'.    " suppress printer dialog popup
  ls_output_params-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_output_params
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams     = ls_doc_params
      position_object       = is_pos_txt
      position_descriptions = lt_pos_descriptions
      position_holder       = lt_pos_holder
      position_accounting   = lt_pos_accounting
      position_eegroup      = lt_pos_eegrp
      position_requirements = lt_pos_requirements
      position_tasks        = lt_pos_tasks
      position_wtime        = lt_pos_wtime
      position_unit_labels  = ls_pos_unit_lbls_af
      position_xml_tab      = iv_pos_xml_data
      position_unit_tab     = it_pos_unit_txt
    IMPORTING
      /1bcdwb/formoutput    = ls_form_output
    EXCEPTIONS
      usage_error           = 1
      system_error          = 2
      internal_error        = 3
      OTHERS                = 4.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_form_output-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_pos_pdf_smartforms.
* Author: JDH

  DATA: ls_control_parameters TYPE ssfctrlop,
        ls_output_options     TYPE ssfcompop,
        ls_job_output_info    TYPE ssfcrescl,
        lt_lines              TYPE TABLE OF tline,
        lv_filesize           TYPE int4.                    "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get OTF output
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.
*
  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = ls_output_options-tdprinter
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF ls_output_options-tdprinter IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = ls_output_options-tdprinter
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      position_xml_tab   = iv_pos_xml_data
      position_unit_tab  = it_pos_unit_txt
      position_object    = is_pos_txt
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_filesize
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.

  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_publ_dovr.
* Additions: JDH (doc_version; note 1502261)

  CONSTANTS lc_candidate_class_int TYPE rcf_candidate_class VALUE 'I'.

  DATA: lo_pinst_bl           TYPE REF TO cl_hrrcf_posting_inst_bl,
        ls_p5122              TYPE        p5122,
        ls_post_info_texts    TYPE        rcf_s_itf_post_info_texts,
        ls_req_info_wt        TYPE        rcf_s_requisition_info_text,
        ls_req_job_info_wt    TYPE        rcf_s_req_job_info_text,
        ls_req_branch_address TYPE        rcf_s_bupa_addressdata_text,
        lt_req_roles_names    TYPE        rcf_t_rec_team_txt,
        ls_post_info_wt       TYPE        rcf_s_posting_info_text,
        ls_post_inst_rec      TYPE        p5122,
        ls_prm                TYPE        t77rcf_prm_pl,
        lv_prm_publ_form      TYPE        rcf_prm_pl,
        lv_publ_dovr_form     TYPE        tdsfname,
        lv_form_type          TYPE        gsval,
        lv_fm_name            TYPE        rs38l_fnam,
        lv_use_adobe          TYPE        wdy_boolean,
        ls_return             TYPE        bapiret2,
        lo_ex                 TYPE REF TO cx_root.

  CLEAR: ev_content, ev_title, et_message[].

  TRY.
      lo_pinst_bl = cl_hrrcf_posting_inst_bl=>get_instance( ).

      CALL METHOD lo_pinst_bl->get_posting_instance
        EXPORTING
          p_pinst_guid = iv_pinst_guid
        IMPORTING
          ps_p5122     = ls_p5122.

      lo_pinst_bl->check_authorisation( ps_p5122 = ls_p5122   ).

      IF iv_doc_version IS INITIAL.
        IF ls_p5122-published_doc IS INITIAL.
          CALL METHOD lo_pinst_bl->get_data_summary
            EXPORTING
              p_pinst_guid                 = iv_pinst_guid
            IMPORTING
              p_post_header                = ls_post_info_texts-header_itf
              p_post_company_desc          = ls_post_info_texts-company_desc_itf
              p_post_department_desc       = ls_post_info_texts-department_desc_itf
              p_post_project_desc          = ls_post_info_texts-project_desc_itf
              p_post_task_desc             = ls_post_info_texts-task_desc_itf
              p_post_requirement_desc      = ls_post_info_texts-requirement_desc_itf
              ps_requisition_info_text     = ls_req_info_wt
              ps_requisition_job_info_text = ls_req_job_info_wt
              ps_requi_branch_address      = ls_req_branch_address
              pt_requi_roles               = lt_req_roles_names
              ps_posting_information_text  = ls_post_info_wt
              ps_posting_instance_record   = ls_post_inst_rec.
        ELSE.
          CALL METHOD lo_pinst_bl->get_frozen_post_inst_data
            EXPORTING
              p_pinst_guid                 = iv_pinst_guid
            IMPORTING
              p_post_header                = ls_post_info_texts-header_itf
              p_post_company_desc          = ls_post_info_texts-company_desc_itf
              p_post_department_desc       = ls_post_info_texts-department_desc_itf
              p_post_project_desc          = ls_post_info_texts-project_desc_itf
              p_post_task_desc             = ls_post_info_texts-task_desc_itf
              p_post_requirement_desc      = ls_post_info_texts-requirement_desc_itf
              ps_requisition_info_text     = ls_req_info_wt
              ps_requisition_job_info_text = ls_req_job_info_wt
              ps_requi_branch_address      = ls_req_branch_address
              pt_requi_roles               = lt_req_roles_names
              ps_posting_information_text  = ls_post_info_wt
              ps_posting_instance_record   = ls_post_inst_rec.
        ENDIF.
      ELSE.
        CALL METHOD lo_pinst_bl->get_frozen_post_inst_data
          EXPORTING
            p_pinst_guid                 = iv_pinst_guid
            iv_doc_version               = iv_doc_version
          IMPORTING
            p_post_header                = ls_post_info_texts-header_itf
            p_post_company_desc          = ls_post_info_texts-company_desc_itf
            p_post_department_desc       = ls_post_info_texts-department_desc_itf
            p_post_project_desc          = ls_post_info_texts-project_desc_itf
            p_post_task_desc             = ls_post_info_texts-task_desc_itf
            p_post_requirement_desc      = ls_post_info_texts-requirement_desc_itf
            ps_requisition_info_text     = ls_req_info_wt
            ps_requisition_job_info_text = ls_req_job_info_wt
            ps_requi_branch_address      = ls_req_branch_address
            pt_requi_roles               = lt_req_roles_names
            ps_posting_information_text  = ls_post_info_wt
            ps_posting_instance_record   = ls_post_inst_rec.
      ENDIF.
      ev_title = ls_post_info_texts-header_itf.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      IF cl_hrrcf_t77rcf_postchn=>get_candidate_class( ls_post_inst_rec-posting_channel )
              = lc_candidate_class_int.
        lv_prm_publ_form = 'FORM_PUBL_INT_DOVR'.
      ELSE.
        lv_prm_publ_form = 'FORM_PUBL_EXT_DOVR'.
      ENDIF.

      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = lv_prm_publ_form
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).

      lv_publ_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_publ_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          iv_pinst_guid = iv_pinst_guid
          iv_form_name  = lv_fm_name.

      IF lv_use_adobe = abap_true.
        cl_hrrcf_dataoverview_pl=>get_publ_pdf_adobeforms(
          EXPORTING
            iv_fm_name            = lv_fm_name
            is_req_info_wt        = ls_req_info_wt
            is_req_job_info_wt    = ls_req_job_info_wt
            is_req_branch_address = ls_req_branch_address
            it_req_roles_names    = lt_req_roles_names
            is_post_info_wt       = ls_post_info_wt
            is_post_info_texts    = ls_post_info_texts
            is_post_inst_rec      = ls_post_inst_rec
          IMPORTING
            ev_content            = ev_content ).
      ELSE.
        cl_hrrcf_dataoverview_pl=>get_publ_pdf_smartforms(
          EXPORTING
            iv_fm_name            = lv_fm_name
            is_req_info_wt        = ls_req_info_wt
            is_req_job_info_wt    = ls_req_job_info_wt
            is_req_branch_address = ls_req_branch_address
            it_req_roles_names    = lt_req_roles_names
            is_post_info_wt       = ls_post_info_wt
            is_post_info_texts    = ls_post_info_texts
            is_post_inst_rec      = ls_post_inst_rec
          IMPORTING
            ev_content            = ev_content ).
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_publ_pdf_adobeforms.

  DATA: ls_fp_outputparams    TYPE        sfpoutputparams,
        ls_fp_docparams       TYPE        sfpdocparams,
        ls_formoutput         TYPE        fpformoutput,
        ls_req_info_wt        TYPE        rcf_s_af_requisition_info_text,
        ls_req_job_info_wt    TYPE        rcf_s_af_req_job_info_text,
        ls_post_inst_rec      TYPE        rcf_s_af_p5122.

  CLEAR: ev_content.

  ls_req_info_wt = cl_hrrcf_af_services=>get_requisition_info_af( is_req_info_wt ).

  ls_req_job_info_wt = cl_hrrcf_af_services=>get_req_job_info_af( is_req_job_info_wt ).
  ls_post_inst_rec = cl_hrrcf_af_services=>get_posting_instance_af( is_post_inst_rec ).
** FA 2414481<<
* FA 2104756<<
  ls_fp_docparams-langu  = ls_post_inst_rec-language.
*   ls_fp_docparams-langu  = sy-langu.
* FA 2104756>>
* FA 2414481>>
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
*   Error handling
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_fp_docparams
      req_info_wt        = ls_req_info_wt
      req_job_info_wt    = ls_req_job_info_wt
      req_branch_address = is_req_branch_address
      req_roles_names    = it_req_roles_names
      post_info_wt       = is_post_info_wt
      post_info_texts    = is_post_info_texts
      post_inst_rec      = ls_post_inst_rec
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc NE 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_publ_pdf_smartforms.

  DATA: ls_req_info_labels     TYPE          rcf_s_req_info_ui_labels,
        ls_req_job_info_labels TYPE          rcf_s_req_job_info_ui_labels,
        ls_req_role_labels     TYPE          rcf_s_req_role_ui_labels,
        ls_post_info_labels    TYPE          rcf_s_post_info_ui_labels,
        ls_post_inst_labels    TYPE          rcf_s_post_inst_ui_labels,
        ls_control_parameters  TYPE          ssfctrlop,
        ls_output_options      TYPE          ssfcompop,
        ls_job_output_info     TYPE          ssfcrescl,
        lv_devtype             TYPE          rspoptype,
        lt_lines               TYPE TABLE OF tline,
        lv_sam_hawkins         TYPE          int4.          "#EC NEEDED

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_basic_info_ui_labels
    EXPORTING
      iv_req_type           = is_req_info_wt-req_type
      iv_language           = is_post_inst_rec-language
    RECEIVING
      rs_req_info_ui_labels = ls_req_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_job_info_ui_labels
    EXPORTING
      iv_language               = is_post_inst_rec-language
    RECEIVING
      rs_req_job_info_ui_labels = ls_req_job_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_role_ui_labels
    EXPORTING
      iv_language           = is_post_inst_rec-language
    RECEIVING
      rs_req_role_ui_labels = ls_req_role_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_post_info_ui_labels
    EXPORTING
      iv_language            = is_post_inst_rec-language
    RECEIVING
      rs_post_info_ui_labels = ls_post_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_post_inst_ui_labels
    EXPORTING
      iv_language            = is_post_inst_rec-language
    RECEIVING
      rs_post_inst_ui_labels = ls_post_inst_labels.
**FA 2414481<<
* FA 2104756<<
  ls_control_parameters-langu  = is_post_inst_rec-language.
*   ls_control_parameters-langu  = sy-langu.
* FA 2104756>>
**FA 2414481>>
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters     = ls_control_parameters
      output_options         = ls_output_options
      user_settings          = space
      req_info_wt            = is_req_info_wt
      req_info_ui_labels     = ls_req_info_labels
      req_job_info_wt        = is_req_job_info_wt
      req_branch_address     = is_req_branch_address
      req_job_info_ui_labels = ls_req_job_info_labels
      req_roles_names        = it_req_roles_names
      req_role_ui_labels     = ls_req_role_labels
      post_info_wt           = is_post_info_wt
      post_info_texts        = is_post_info_texts
      post_info_ui_labels    = ls_post_info_labels
      post_inst_rec          = is_post_inst_rec
      post_inst_ui_labels    = ls_post_inst_labels
    IMPORTING
      job_output_info        = ls_job_output_info
    EXCEPTIONS
      formatting_error       = 1
      internal_error         = 2
      send_error             = 3
      user_canceled          = 4
      OTHERS                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_req_dovr.
* Additions: JDH (Status History)

  DATA: lo_req_bl             TYPE REF TO cl_hrrcf_requi_bl,
        ls_req_info           TYPE        rcf_s_requisition_info_text,
        ls_req_job_info       TYPE        rcf_s_req_job_info_text,
        ls_vacancy            TYPE        rcf_s_vacancy_list,
        lt_position           TYPE        rcf_t_pos_of_req_ds,
        lt_req_education      TYPE        rcf_t_req_required_edu_txt,
        lt_req_quali_group    TYPE        rcf_t_q_object_with_name,
        lt_req_qualification  TYPE        rcf_t_req_qualification,
        lt_req_role_name      TYPE        rcf_t_rec_team_txt,
        lv_req_note           TYPE        rcf_itf_description,
        ls_req_job_info_text  TYPE        rcf_s_itf_req_job_info_texts,
        lt_req_attachment     TYPE        rcf_t_cp_attch_t,
        ls_status_history     TYPE        rcf_s_status_history,
        lt_status_history     TYPE        rcf_t_status_history,
        ls_status_history_enh TYPE        rcf_s_status_history_enh,
        lt_status_history_enh TYPE        rcf_t_status_history_enh,
        ls_p5125              TYPE        p5125,
        lv_no_of_lines        TYPE        i,
        ls_prm                TYPE        t77rcf_prm_pl,
        lv_req_dovr_form      TYPE        tdsfname,
        lv_fm_name            TYPE        rs38l_fnam,
        lv_form_type          TYPE        gsval,
        lv_use_adobe          TYPE        wdy_boolean,
        ls_return             TYPE        bapiret2,
        lt_message            TYPE        bapirettab,
        lo_ex                 TYPE REF TO cx_root.

  CLEAR: ev_content, ev_req_type, ev_req_header, et_attachments[], et_message[].

  TRY.
      lo_req_bl = cl_hrrcf_requi_bl=>get_instance( ).

      CALL METHOD lo_req_bl->check_authorisation_req_dovr
        EXPORTING
          requi_object = is_req_hrobject.

      CALL METHOD lo_req_bl->get_data_summary
        EXPORTING
          ps_req_hrobject        = is_req_hrobject
        IMPORTING
          ps_req_info_wt         = ls_req_info
          ps_req_job_info_wt     = ls_req_job_info
          ps_vacancy             = ls_vacancy
          pt_positions           = lt_position
          pt_req_required_edu_wt = lt_req_education
          pt_req_quali_groups    = lt_req_quali_group
          pt_req_qualifications  = lt_req_qualification
          pt_req_role_name       = lt_req_role_name
          p_req_note             = lv_req_note
          ps_req_job_info_texts  = ls_req_job_info_text
          pt_req_attachments     = lt_req_attachment.

      IF ls_req_info-req_type NE '1' AND cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_03( ) EQ abap_true. "No history for application groups
        CALL METHOD lo_req_bl->get_status_history
          EXPORTING
            ps_req_hrobject   = is_req_hrobject
          IMPORTING
            pt_status_history = lt_status_history.

        CALL METHOD lo_req_bl->get_req_basic_info
          EXPORTING
            ps_req_hrobject   = is_req_hrobject
          IMPORTING
            ps_req_basic_info = ls_p5125.

        DESCRIBE TABLE lt_status_history LINES lv_no_of_lines.

        LOOP AT lt_status_history INTO ls_status_history.
          MOVE-CORRESPONDING ls_status_history TO ls_status_history_enh.

          IF NOT ls_p5125-requested_status IS INITIAL.
            IF sy-tabix EQ lv_no_of_lines.
              ls_status_history_enh-pending_approval = 'X'.
            ENDIF.
          ENDIF.

          APPEND ls_status_history_enh TO lt_status_history_enh.
        ENDLOOP.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

  ev_req_header = ls_req_info-header.
  ev_req_type = ls_req_info-req_type.

* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      CALL METHOD cl_hrrcf_t77rcf_prm_pl=>read_record
        EXPORTING
          iv_prm           = 'FORM_REQ_DOVR'
        IMPORTING
          es_t77rcf_prm_pl = ls_prm.
      lv_req_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_req_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_req_pdf_adobeforms
          EXPORTING
            iv_fm_name             = lv_fm_name
            is_req_info_wt         = ls_req_info
            is_req_job_info_wt     = ls_req_job_info
            is_vacancy             = ls_vacancy
            it_position            = lt_position
            it_req_required_edu_wt = lt_req_education
            it_req_qualification   = lt_req_qualification
            it_req_role_name       = lt_req_role_name
            iv_req_note            = lv_req_note
            is_req_job_info_text   = ls_req_job_info_text
            it_req_attachment      = lt_req_attachment
            it_status_history      = lt_status_history_enh
          IMPORTING
            ev_content             = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_req_pdf_smartforms
          EXPORTING
            iv_fm_name             = lv_fm_name
            is_req_info_wt         = ls_req_info
            is_req_job_info_wt     = ls_req_job_info
            is_vacancy             = ls_vacancy
            it_position            = lt_position
            it_req_required_edu_wt = lt_req_education
            it_req_quali_group     = lt_req_quali_group
            it_req_qualification   = lt_req_qualification
            it_req_role_name       = lt_req_role_name
            iv_req_note            = lv_req_note
            is_req_job_info_text   = ls_req_job_info_text
            it_req_attachment      = lt_req_attachment
            it_status_history      = lt_status_history_enh
          IMPORTING
            ev_content             = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

  CALL METHOD cl_hrrcf_attachment_pl=>read_attachments
    EXPORTING
      is_hrobject    = is_req_hrobject
      iv_subtype     = '0003'
    IMPORTING
      et_attachments = et_attachments
      et_message     = lt_message.

  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.

ENDMETHOD.


METHOD get_req_pdf_adobeforms.

  DATA: ls_fp_outputparams    TYPE        sfpoutputparams,
        ls_fp_docparams       TYPE        sfpdocparams,
        ls_formoutput         TYPE        fpformoutput,
        ls_req_info_wt        TYPE        rcf_s_af_requisition_info_text,
        ls_req_job_info_wt    TYPE        rcf_s_af_req_job_info_text,
        lt_req_qualification  TYPE        rcf_t_af_qualgr_qual,
        lt_req_position       TYPE        rcf_t_af_pos_of_req_ds,
        lt_status_history_af  TYPE        rcf_t_af_status_history.

  CLEAR: ev_content.

  ls_req_info_wt = cl_hrrcf_af_services=>get_requisition_info_af( is_req_info_wt ).

  ls_req_job_info_wt = cl_hrrcf_af_services=>get_req_job_info_af( is_req_job_info_wt ).

  CALL METHOD cl_hrrcf_af_services=>get_req_qualifications_af
    EXPORTING
      pt_req_qualifications    = it_req_qualification
    IMPORTING
      pt_req_qualifications_af = lt_req_qualification.

  lt_req_position = cl_hrrcf_af_services=>get_req_positions_af( it_position ).

  IF NOT it_status_history IS INITIAL.
    CALL METHOD cl_hrrcf_af_services=>get_status_history_af
      EXPORTING
        it_status_history    = it_status_history
      IMPORTING
        et_status_history_af = lt_status_history_af.
  ENDIF.

  ls_fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams   = ls_fp_docparams
      req_info_wt         = ls_req_info_wt
      req_vacancy         = is_vacancy
      req_positions       = lt_req_position
      req_note_text       = iv_req_note
      req_job_info_wt     = ls_req_job_info_wt
      req_required_edu_wt = it_req_required_edu_wt
      req_qualifications  = lt_req_qualification
      req_roles_names     = it_req_role_name
      req_attachments     = it_req_attachment
      req_status_history  = lt_status_history_af
    IMPORTING
      /1bcdwb/formoutput  = ls_formoutput
    EXCEPTIONS
      usage_error         = 1
      system_error        = 2
      internal_error      = 3
      OTHERS              = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_req_pdf_smartforms.

  DATA:  ls_control_parameters    TYPE          ssfctrlop,
         ls_output_options        TYPE          ssfcompop,
         ls_job_output_info       TYPE          ssfcrescl,
         lv_devtype               TYPE          rspoptype,
         lt_lines                 TYPE TABLE OF tline,
         lv_sam_hawkins           TYPE          int4,       "#EC NEEDED
         ls_req_info_labels       TYPE          rcf_s_req_info_ui_labels,
         ls_req_job_info_labels   TYPE          rcf_s_req_job_info_ui_labels,
         ls_req_edu_labels        TYPE          rcf_s_req_edu_ui_labels,
         ls_req_quali_labels      TYPE          rcf_s_req_quali_ui_labels,
         ls_req_role_labels       TYPE          rcf_s_req_role_ui_labels,
         ls_status_history_labels TYPE          rcf_s_status_history_ui_labels.

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_basic_info_ui_labels
    EXPORTING
      iv_req_type           = is_req_info_wt-req_type
      iv_language           = sy-langu
    RECEIVING
      rs_req_info_ui_labels = ls_req_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_job_info_ui_labels
    EXPORTING
      iv_language               = sy-langu
    RECEIVING
      rs_req_job_info_ui_labels = ls_req_job_info_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_edu_ui_labels
    EXPORTING
      iv_language          = sy-langu
    RECEIVING
      rs_req_edu_ui_labels = ls_req_edu_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_quali_ui_labels
    EXPORTING
      iv_language            = sy-langu
    RECEIVING
      rs_req_quali_ui_labels = ls_req_quali_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_role_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_req_role_ui_labels = ls_req_role_labels.

  IF NOT it_status_history IS INITIAL.
    CALL METHOD cl_hrrcf_dovr_labels_pl=>get_status_history_ui_labels
      EXPORTING
        iv_language              = sy-langu
      IMPORTING
        es_status_history_labels = ls_status_history_labels.
  ENDIF.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

  call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
      IF sy-subrc <> 0.
        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            message_type   = sy-msgty
            message_class  = sy-msgid
            message_number = sy-msgno
            message_par1   = sy-msgv1
            message_par2   = sy-msgv2
            message_par3   = sy-msgv3
            message_par4   = sy-msgv4.
      ENDIF.
    ENDIF.
  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters     = ls_control_parameters
      output_options         = ls_output_options
      user_settings          = space
      req_info_wt            = is_req_info_wt
      req_vacancy            = is_vacancy
      req_positions          = it_position
      req_note_text          = iv_req_note
      req_info_ui_labels     = ls_req_info_labels
      req_job_info_wt        = is_req_job_info_wt
      req_job_info_ui_labels = ls_req_job_info_labels
      req_required_edu_wt    = it_req_required_edu_wt
      req_edu_ui_labels      = ls_req_edu_labels
      req_quali_groups       = it_req_quali_group
      req_qualifications     = it_req_qualification
      req_quali_ui_labels    = ls_req_quali_labels
      req_roles_names        = it_req_role_name
      req_role_ui_labels     = ls_req_role_labels
      req_attachments        = it_req_attachment
      req_status_history     = it_status_history
      req_stat_hist_ui_lbls  = ls_status_history_labels
    IMPORTING
      job_output_info        = ls_job_output_info
    EXCEPTIONS
      formatting_error       = 1
      internal_error         = 2
      send_error             = 3
      user_canceled          = 4
      OTHERS                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_rpact_dovr.

  DATA: lo_ref_bl              TYPE REF TO cl_hrrcf_rec_plan_act_bl,
        lo_rp_act              TYPE REF TO cl_hrrcf_rec_plan_act,
        ls_header_data         TYPE        rcf_s_rec_plan_act,
        lt_activity_types      TYPE        rcf_t_actty_2_rp_act_txt,
        lv_form_type           TYPE        gsval,
        lv_use_adobe           TYPE        wdy_boolean,
        ls_prm                 TYPE        t77rcf_prm_pl,
        lv_rpact_dovr_form     TYPE        tdsfname,
        lv_fm_name             TYPE        rs38l_fnam,
        ls_return              TYPE        bapiret2,
        lo_ex                  TYPE REF TO cx_root.

  CLEAR: ev_content, ev_description, et_message[].

  TRY.
      lo_ref_bl = cl_hrrcf_rec_plan_act_bl=>get_instance( ).
      lo_rp_act = lo_ref_bl->get_rec_plan_by_guid( iv_rp_act_guid ).
      CALL METHOD lo_rp_act->get_header_data
        IMPORTING
          ps_header_data_txt = ls_header_data.

      ev_description = ls_header_data-description.
      CALL METHOD lo_rp_act->get_activity_types
        IMPORTING
          pt_act_type_txt = lt_activity_types.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.
* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_RPACT_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_rpact_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_rpact_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          iv_act_guid  = iv_rp_act_guid
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_rpact_pdf_adobeforms
          EXPORTING
            iv_fm_name        = lv_fm_name
            is_header_data    = ls_header_data
            it_activity_types = lt_activity_types
          IMPORTING
            ev_content        = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_rpact_pdf_smartforms
          EXPORTING
            iv_fm_name        = lv_fm_name
            is_header_data    = ls_header_data
            it_activity_types = lt_activity_types
          IMPORTING
            ev_content        = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_rpact_pdf_adobeforms.

  DATA:   ls_fp_outputparams    TYPE        sfpoutputparams,
          ls_fp_docparams       TYPE        sfpdocparams,
          ls_formoutput         TYPE        fpformoutput,
          ls_header_data_af     TYPE        rcf_s_af_rec_plan_act,
          lt_proc_act_type_af   TYPE        rcf_t_af_rp_proc_act.

  CLEAR: ev_content.

  ls_header_data_af = cl_hrrcf_af_services=>get_rp_header_data_af( is_header_data ).

  CALL METHOD cl_hrrcf_af_services=>get_rp_proc_act_af
    EXPORTING
      pt_rp_act_type         = it_activity_types
    IMPORTING
      pt_rp_proc_act_type_af = lt_proc_act_type_af.

  ls_fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_fp_docparams
      rec_plan_header    = ls_header_data_af
      rec_plan_act_types = lt_proc_act_type_af
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
*     close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_rpact_pdf_smartforms.

  DATA: ls_control_parameters TYPE          ssfctrlop,
        ls_output_options     TYPE          ssfcompop,
        ls_job_output_info    TYPE          ssfcrescl,
        lv_devtype            TYPE          rspoptype,
        lt_lines              TYPE TABLE OF tline,
        lv_sam_hawkins        TYPE          int4.           "#EC NEEDED

  CLEAR: ev_content.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      rec_plan_header    = is_header_data
      rec_plan_act_types = it_activity_types
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_sg_dovr.

  DATA: lo_sgr_bl        TYPE REF TO cl_hrrcf_supp_group_bl,
        ls_header_text   TYPE        rcf_s_sgr_header_text,
        lt_support_team  TYPE        rcf_t_rec_team_txt,
        lv_form_type     TYPE        gsval,
        lv_use_adobe     TYPE        wdy_boolean,
        ls_prm           TYPE        t77rcf_prm_pl,
        lv_sg_dovr_form  TYPE        tdsfname,
        lv_fm_name       TYPE        rs38l_fnam,
        ls_return        TYPE        bapiret2,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: ev_content, ev_title, et_message[].
  TRY.
      CALL METHOD cl_hrrcf_supp_group_bl=>get_instance
        RECEIVING
          return = lo_sgr_bl.

      CALL METHOD lo_sgr_bl->check_authorisation_sgr_dovr(
        IMPORTING
          es_message = ls_return ).
      IF ls_return IS NOT INITIAL.
        APPEND ls_return TO et_message.
        RETURN.
      ENDIF.

      CALL METHOD lo_sgr_bl->get_data_for_preview
        EXPORTING
          ps_hrobject     = is_sg_hrobject
        IMPORTING
          ps_header_text  = ls_header_text
          pt_support_team = lt_support_team.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.
  ev_title = ls_header_text-title.
* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_SG_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_sg_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_sg_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_sg_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_sg_pdf_adobeforms
          EXPORTING
            iv_fm_name         = lv_fm_name
            is_sg_header_text  = ls_header_text
            it_sg_support_team = lt_support_team
          IMPORTING
            ev_content         = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_sg_pdf_smartforms
          EXPORTING
            iv_fm_name        = lv_fm_name
            is_sg_header_text = ls_header_text
            it_support_team   = lt_support_team
          IMPORTING
            ev_content        = ev_content.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_sg_pdf_adobeforms.

  DATA: ls_fp_outputparams    TYPE        sfpoutputparams,
        ls_fp_docparams       TYPE        sfpdocparams,
        ls_formoutput         TYPE        fpformoutput,
        ls_sg_header_text_af  TYPE        rcf_s_af_sgr_header_text.

  CLEAR: ev_content.

  ls_sg_header_text_af = cl_hrrcf_af_services=>get_sgr_header_text_af( is_sg_header_text ).

  ls_fp_docparams-langu  = sy-langu.

  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_fp_docparams
      sgr_header_text    = ls_sg_header_text_af
      sgr_support_team   = it_sg_support_team
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_sg_pdf_smartforms.

  DATA: ls_control_parameters TYPE          ssfctrlop,
        ls_output_options     TYPE          ssfcompop,
        ls_job_output_info    TYPE          ssfcrescl,
        lv_devtype            TYPE          rspoptype,
        lt_lines              TYPE TABLE OF tline,
        lv_sam_hawkins        TYPE          int4,           "#EC NEEDED
        ls_supp_team_labels   TYPE          rcf_s_req_role_ui_labels,
        ls_sg_header_labels   TYPE          rcf_s_sgr_header_ui_labels.

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_role_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_req_role_ui_labels = ls_supp_team_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_sg_header_ui_labels
    EXPORTING
      iv_language      = sy-langu
    RECEIVING
      rs_header_labels = ls_sg_header_labels.

  ls_control_parameters-langu  = sy-langu.
* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      sgr_header_labels  = ls_sg_header_labels
      sgr_header_text    = is_sg_header_text
      sgr_role_ui_labels = ls_supp_team_labels
      sgr_support_team   = it_support_team
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_tg_dovr.

  DATA: lo_tg_bl         TYPE REF TO cl_hrrcf_tg_bl,
        ls_header_text   TYPE        rcf_s_tg_header_text,
        lt_support_team  TYPE        rcf_t_rec_team_txt,
        lt_attach        TYPE        rcf_t_cp_attch_t,
        lv_form_type     TYPE        gsval,
        lv_use_adobe     TYPE        wdy_boolean,
        ls_prm           TYPE        t77rcf_prm_pl,
        lv_tg_dovr_form  TYPE        tdsfname,
        lv_fm_name       TYPE        rs38l_fnam,
        ls_return        TYPE        bapiret2,
        lt_message       TYPE        bapirettab,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: ev_content, ev_title, et_attachments[], et_message[].
  TRY.
      CALL METHOD cl_hrrcf_tg_bl=>get_instance
        RECEIVING
          return = lo_tg_bl.

      CALL METHOD lo_tg_bl->check_authorisation_tg_dovr(
        IMPORTING
          es_message = ls_return ).
      IF ls_return IS NOT INITIAL.
        APPEND ls_return TO et_message.
        RETURN.
      ENDIF.

      CALL METHOD lo_tg_bl->get_data_for_preview
        EXPORTING
          ps_hrobject     = is_tg_hrobject
        IMPORTING
          ps_header_text  = ls_header_text
          pt_support_team = lt_support_team
          pt_attachments  = lt_attach.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

      IF 1 = 0.
*        For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

  ev_title = ls_header_text-title.
* determine whether adobeforms or smartforms are supposed to be used
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'DATAO'
    IMPORTING
      returnvalue = lv_form_type.
  IF lv_form_type IS NOT INITIAL.
    lv_use_adobe = abap_true.
  ELSE.
    lv_use_adobe = abap_false.
  ENDIF.

  TRY.
      cl_hrrcf_t77rcf_prm_pl=>read_record(
       EXPORTING
         iv_prm           = 'FORM_TG_DOVR'
       IMPORTING
         es_t77rcf_prm_pl = ls_prm ).
      lv_tg_dovr_form = ls_prm-value.

      CALL METHOD cl_hrrcf_dataoverview_pl=>get_fm_name
        EXPORTING
          iv_use_adobe     = lv_use_adobe
          iv_dovr_type     = ''
          iv_fallback_form = lv_tg_dovr_form
        IMPORTING
          ev_fm_name       = lv_fm_name.

      CALL METHOD cl_hrrcf_dataoverview_pl=>prepare_additional_data
        EXPORTING
          is_hrobject  = is_tg_hrobject
          iv_form_name = lv_fm_name.

      IF lv_use_adobe = abap_true.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_tg_pdf_adobeforms
          EXPORTING
            iv_fm_name         = lv_fm_name
            is_tg_header_text  = ls_header_text
            it_tg_support_team = lt_support_team
            it_tg_attachment   = lt_attach
          IMPORTING
            ev_content         = ev_content.
      ELSE.
        CALL METHOD cl_hrrcf_dataoverview_pl=>get_tg_pdf_smartforms
          EXPORTING
            iv_fm_name        = lv_fm_name
            is_tg_header_text = ls_header_text
            it_support_team   = lt_support_team
            it_attach         = lt_attach
          IMPORTING
            ev_content        = ev_content.
      ENDIF.
    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*        For 'where used' list
        MESSAGE e051(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '051'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
      RETURN.
  ENDTRY.

  CALL METHOD cl_hrrcf_attachment_pl=>read_attachments
    EXPORTING
      is_hrobject    = is_tg_hrobject
      iv_subtype     = '0007'
    IMPORTING
      et_attachments = et_attachments
      et_message     = lt_message.

  IF lt_message IS NOT INITIAL.
    IF 1 = 0.
*        For 'where used' list
      MESSAGE e052(hrrcf0005).
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = msgty_error
        cl     = msgcl_user
        number = '052'
      IMPORTING
        return = ls_return.
    APPEND ls_return TO et_message.
  ENDIF.
ENDMETHOD.


METHOD get_tg_pdf_adobeforms.

  DATA: ls_fp_outputparams    TYPE        sfpoutputparams,
        ls_fp_docparams       TYPE        sfpdocparams,
        ls_formoutput         TYPE        fpformoutput,
        ls_tg_header_text_af  TYPE        rcf_s_af_tg_header_text.

  CLEAR: ev_content.

  ls_tg_header_text_af = cl_hrrcf_af_services=>get_tg_header_text_af( is_tg_header_text ).

  ls_fp_docparams-langu  = sy-langu.
* Set output parameters and open spool job
  ls_fp_outputparams-nodialog = 'X'.    " suppress printer dialog popup
  ls_fp_outputparams-getpdf   = 'X'.

  CALL FUNCTION 'FP_JOB_OPEN'
    CHANGING
      ie_outputparams = ls_fp_outputparams
    EXCEPTIONS
      cancel          = 1
      usage_error     = 2
      system_error    = 3
      internal_error  = 4
      OTHERS          = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION iv_fm_name
    EXPORTING
      /1bcdwb/docparams  = ls_fp_docparams
      tg_header_text     = ls_tg_header_text_af
      tg_support_team    = it_tg_support_team
      tg_attachments     = it_tg_attachment
    IMPORTING
      /1bcdwb/formoutput = ls_formoutput
    EXCEPTIONS
      usage_error        = 1
      system_error       = 2
      internal_error     = 3
      OTHERS             = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ELSE.
    ev_content = ls_formoutput-pdf.
  ENDIF.
* close spool job
  CALL FUNCTION 'FP_JOB_CLOSE'
    EXCEPTIONS
      usage_error    = 1
      system_error   = 2
      internal_error = 3
      OTHERS         = 4.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD get_tg_pdf_smartforms.

  DATA: ls_control_parameters TYPE          ssfctrlop,
        ls_output_options     TYPE          ssfcompop,
        ls_job_output_info    TYPE          ssfcrescl,
        lv_devtype            TYPE          rspoptype,
        lt_lines              TYPE TABLE OF tline,
        lv_sam_hawkins        TYPE          int4,           "#EC NEEDED
        ls_supp_team_labels   TYPE          rcf_s_tg_role_labels_pl,
        ls_tg_header_labels   TYPE          rcf_s_tg_header_ui_labels.

  CLEAR: ev_content.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_req_role_ui_labels
    EXPORTING
      iv_language           = sy-langu
    RECEIVING
      rs_req_role_ui_labels = ls_supp_team_labels.

  CALL METHOD cl_hrrcf_dovr_labels_pl=>get_tg_header_ui_labels
    EXPORTING
      iv_language      = sy-langu
    RECEIVING
      rs_header_labels = ls_tg_header_labels.

  ls_control_parameters-langu  = sy-langu.

* Set control parameters to get the output format (OTF) from Smart Forms
  ls_control_parameters-no_dialog = 'X'.
  ls_control_parameters-getotf    = 'X'.

  ls_output_options-urlcall = gc_urlcallback.

    call function 'SSF_GET_DEVICE_TYPE'
      exporting
        i_language             = '*'
      importing
        e_devtype              = lv_devtype
      exceptions
        no_language            = 1
        language_not_installed = 2
        no_devtype_found       = 3
        system_error           = 4
        others                 = 5.
    IF lv_devtype IS INITIAL.
       call function 'SSF_GET_DEVICE_TYPE'
         exporting
           i_language             = ls_control_parameters-langu
         importing
           e_devtype              = lv_devtype
         exceptions
           no_language            = 1
           language_not_installed = 2
           no_devtype_found       = 3
           system_error           = 4
           others                 = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.
  ENDIF.

  ls_output_options-tdprinter = lv_devtype.

  CALL FUNCTION iv_fm_name
    EXPORTING
      control_parameters = ls_control_parameters
      output_options     = ls_output_options
      user_settings      = space
      tg_header_labels   = ls_tg_header_labels
      tg_header_text     = is_tg_header_text
      tg_role_ui_labels  = ls_supp_team_labels
      tg_support_team    = it_support_team
      tg_attachments     = it_attach
    IMPORTING
      job_output_info    = ls_job_output_info
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
      pdf_username          = 'SAP E-Recruiting'            "#EC NOTEXT
    IMPORTING
      bin_filesize          = lv_sam_hawkins
      bin_file              = ev_content
    TABLES
      otf                   = ls_job_output_info-otfdata
      lines                 = lt_lines
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.


METHOD prepare_additional_data.

  DATA lo_badi   TYPE REF TO hrrcf00_pre_dataoverview.
  TRY.
      GET BADI lo_badi.
      IF lo_badi IS BOUND.
        CALL BADI lo_badi->prefill_additional_data
          EXPORTING
            is_hrobject   = is_hrobject
            iv_pinst_guid = iv_pinst_guid
            iv_act_guid   = iv_act_guid
            iv_form_name  = iv_form_name.
      ENDIF.
    CATCH cx_badi_not_implemented.                      "#EC NO_HANDLER
*        No BADI implementation found
  ENDTRY.

ENDMETHOD.


METHOD read_bgr_check_act.

  DATA: lo_activity      TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_bgr_check_act TYPE        rcf_s_act_bgc_activity_txt,
        ls_return        TYPE        bapiret2,
        lo_ex            TYPE REF TO cx_root.

  CLEAR: es_bgr_check_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_bgr_check_act.

      MOVE-CORRESPONDING ls_bgr_check_act TO es_bgr_check_act.

      IF NOT ls_bgr_check_act-order_status_on IS INITIAL.
        WRITE ls_bgr_check_act-order_status_on TIME ZONE sy-zonlo TO es_bgr_check_act-order_status_on_txt.
      ENDIF.

      IF NOT ls_bgr_check_act-requested_on IS INITIAL.
        WRITE ls_bgr_check_act-requested_on TIME ZONE sy-zonlo TO es_bgr_check_act-requested_on_txt.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.


ENDMETHOD.


METHOD read_classif_act.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_classif_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_classif_act.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


method READ_CONF_ACT.
* Begin of method: HEGDEPR 2115638
  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        lt_indiv_cnf_wt TYPE rcf_t_act_cnf_activity_txt,
        ls_actform      TYPE rcf_s_actform_cnf_individual,
        lo_abstract_rec TYPE REF TO cl_hrrcf_abstract_activity_rec,
        l_user          TYPE syuname,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  FIELD-SYMBOLS:
    <ls_indiv_cnf_wt> TYPE rcf_s_act_cnf_activity_txt.

  CLEAR: es_conf_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_conf_act.

      CALL METHOD cl_hrrcf_activity_bl=>get_indiv_cnf_list
        EXPORTING
          p_overall_activity         = iv_act_guid
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          pt_indiv_cnf_wt            = lt_indiv_cnf_wt.

      LOOP AT lt_indiv_cnf_wt ASSIGNING <ls_indiv_cnf_wt>.

        CLEAR ls_actform.
        MOVE-CORRESPONDING <ls_indiv_cnf_wt> TO ls_actform.

        CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
          EXPORTING
            act_guid = <ls_indiv_cnf_wt>-act_guid
          IMPORTING
            activity = lo_abstract_rec.

        CHECK lo_abstract_rec IS BOUND.

        CALL METHOD lo_abstract_rec->read_text
          EXPORTING
            use_fallback = abap_true
          IMPORTING
            text         = ls_actform-note_txt.

        IF <ls_indiv_cnf_wt>-res_sclas = 'US'.
          l_user = <ls_indiv_cnf_wt>-res_sobid.
          CALL METHOD cl_hrrcf_candidate_admin_bl=>get_candidate
            EXPORTING
              p_user        = l_user
            IMPORTING
              p_is_employee = ls_actform-is_employee
              p_employeeid  = ls_actform-employeeid.
        ENDIF.

        IF NOT <ls_indiv_cnf_wt>-requested_on IS INITIAL.
          CONVERT TIME STAMP <ls_indiv_cnf_wt>-requested_on
              TIME ZONE sy-zonlo INTO DATE ls_actform-requested_on_date.

        ENDIF.

        APPEND ls_actform TO et_indiv_conf.

      ENDLOOP.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.
* End of method: HEGDEPR 2115638
endmethod.


METHOD read_data_trans_act.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_data_trans_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_data_trans_act.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_general_act_data.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_general_data TYPE        rcf_s_act_infotype_general_txt,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_general_data, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_general_data.

      MOVE-CORRESPONDING ls_general_data TO es_general_data.

      CONVERT TIME STAMP ls_general_data-last_changed TIME ZONE sy-zonlo
               INTO DATE es_general_data-last_changed_date.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_inv_act.

  DATA: lo_activity        TYPE REF TO cl_hrrcf_abstract_activity_rec,
        lo_activity_object TYPE REF TO cl_hrrcf_act_invitation_record,
        ls_inv_act         TYPE        rcf_s_invitation_activity_text,
        lv_indiv_corr_sol  TYPE        boole_d,
        ls_return          TYPE        bapiret2,
        lo_ex              TYPE REF TO cx_root.

  CLEAR: es_inv_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_inv_act.

      MOVE-CORRESPONDING ls_inv_act TO es_inv_act.

* handling new indiv corr and btf editor
* btf editor
      IF NOT ls_inv_act-indiv_letter IS INITIAL.
        es_inv_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/ACTFORM_LETTER_CHANGED' ).
      ELSE.

        lo_activity_object ?= lo_activity.

        CALL METHOD lo_activity_object->read_indiv_corr_solution
          RECEIVING
            p_indiv_corr_sol = lv_indiv_corr_sol.

        IF lv_indiv_corr_sol IS INITIAL.
* btf with no changed letter
          es_inv_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/ACTFORM_LETTER_NOT_CHANGED' ).
        ELSE.
* new activities in new fnctionality
          IF NOT ls_inv_act-indiv_lettersect IS INITIAL.
            es_inv_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/ACTFORM_LETTER_CHANGED' ).
          ELSE.
            es_inv_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/ACTFORM_LETTER_NOT_CHANGED' ).
          ENDIF.
        ENDIF.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_personal_data.

  DATA: lo_activity       TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_cand_hrobject  TYPE        hrobject,
        lo_ex             TYPE REF TO cx_root,
        ls_return         TYPE        bapiret2,
        lo_cdcy_bl        TYPE REF TO cl_hrrcf_candidacy_bl,
        lo_appl_bl        TYPE REF TO cl_hrrcf_application_bl,
        lo_prev_bl        TYPE REF TO cl_hrrcf_candidate_preview_bl.

  CLEAR: et_message[], es_personal_data.

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CASE lo_activity->hrobject-otype.

        WHEN 'NA'.
          ls_cand_hrobject = lo_activity->hrobject.

        WHEN 'ND'.
          CALL METHOD cl_hrrcf_application_bl=>get_instance
            RECEIVING
              return = lo_appl_bl.

          CALL METHOD lo_appl_bl->get_candidate
            EXPORTING
              ps_appl_hrobject = lo_activity->hrobject
            IMPORTING
              p_cand_hrobject  = ls_cand_hrobject.

        WHEN 'NE'.
          CALL METHOD cl_hrrcf_candidacy_bl=>get_instance
            RECEIVING
              return = lo_cdcy_bl.

          CALL METHOD lo_cdcy_bl->get_candidate
            EXPORTING
              ps_cdcy_hrobject = lo_activity->hrobject
            IMPORTING
              ps_cand_hrobject = ls_cand_hrobject.

      ENDCASE.

      CHECK NOT ls_cand_hrobject IS INITIAL.

      CALL METHOD cl_hrrcf_candidate_preview_bl=>get_instance
        IMPORTING
          result = lo_prev_bl.

      CALL METHOD lo_prev_bl->get_personal_data
        EXPORTING
          cand_obj      = ls_cand_hrobject
        IMPORTING
          personal_data = es_personal_data.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_qual_event_act.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_qual_event_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_qual_event_act.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_questionnaire_act.


  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_qa_act       TYPE        rcf_s_qa_activity_txt,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_questionnaire_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_qa_act.

      MOVE-CORRESPONDING ls_qa_act TO es_questionnaire_act.
      MOVE ls_qa_act-qa_tpl_title TO es_questionnaire_act-url_alias_doc_filled.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_simple_act.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_return       TYPE        bapiret2,
        lo_ex           TYPE REF TO cx_root.

  CLEAR: es_simple_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_simple_act.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_simple_corr_act.
* copied from GET_CORRESPONDENCE_ACT of CL_HRRCF_ACT_DOVR_A and adjusted

  DATA: lo_activity        TYPE REF TO cl_hrrcf_abstract_activity_rec,
        ls_corr_act        TYPE        rcf_s_correspond_activity_text,
        lo_activity_object TYPE REF TO cl_hrrcf_act_correspond_record,
        lv_indiv_corr_sol  TYPE        boole_d,
        ls_return          TYPE        bapiret2,
        lo_ex              TYPE REF TO cx_root.

  CLEAR: es_simple_corr_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_corr_act.

      MOVE-CORRESPONDING ls_corr_act TO es_simple_corr_act.

**handling new indiv corr and btf editor
**btf editor
      IF NOT ls_corr_act-indiv_letter IS INITIAL.
        es_simple_corr_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias(
                      'PAOC_RCF_UI/ACTFORM_LETTER_CHANGED' ).
      ELSE.
        lo_activity_object ?= lo_activity.

        CALL METHOD lo_activity_object->read_indiv_corr_solution
          RECEIVING
            p_indiv_corr_sol = lv_indiv_corr_sol.

        IF lv_indiv_corr_sol IS INITIAL.
* btf with no changed letter
          es_simple_corr_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias(
                        'PAOC_RCF_UI/ACTFORM_LETTER_NOT_CHANGED' ).
        ELSE.
*new activities in new fnctionality
          IF NOT ls_corr_act-indiv_lettersect IS INITIAL.
            es_simple_corr_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias(
                          'PAOC_RCF_UI/ACTFORM_LETTER_CHANGED' ).
          ELSE.
            es_simple_corr_act-url_alias = cl_wd_utilities=>get_otr_text_by_alias(
                          'PAOC_RCF_UI/ACTFORM_LETTER_NOT_CHANGED' ).
          ENDIF.
        ENDIF.
      ENDIF.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD read_statchg_act.

  DATA: lo_activity     TYPE REF TO cl_hrrcf_abstract_activity_rec,
         ls_return       TYPE        bapiret2,
         lo_ex           TYPE REF TO cx_root.

  CLEAR: es_statchg_act, et_message[].

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = es_statchg_act.

    CATCH cx_root INTO lo_ex.                            "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      IF 1 = 0.
*         For 'where used' list
        MESSAGE e050(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = msgty_error
          cl     = msgcl_user
          number = '050'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.
ENDCLASS.