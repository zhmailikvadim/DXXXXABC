class CL_HRRCF_M_ACT_DOVR definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  final
  create public .

public section.
*"* public components of class CL_HRRCF_M_ACT_DOVR
*"* do not include other source files here!!!

  methods GET_ACTIVITY_ELEMENTS
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_URL type RCF_S_MDL_URL
      !EV_ACT_TYPE_TXT type RCF_ACT_TYPE_TXT .
  methods GET_HROBJECT_FOR_ACT_GUID
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ES_APPL_HROBJECT type HROBJECT
    raising
      CX_HRRCF .
  methods GET_ACT_ATTACHMENTS
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ET_ATTACHMENTS type RCF_T_ATTACHMENTS_TEXT_URL
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_ACT_DOVR
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_ACT_DOVR
*"* do not include other source files here!!!

  methods CORRESPONDENCE_ACT
    importing
      !IO_ABSTRACT_ACTIVITY type ref to CL_HRRCF_ABSTRACT_ACTIVITY_REC
    exporting
      !ES_URL type RCF_S_MDL_URL
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods INVITATION_ACT
    importing
      !IO_ABSTRACT_ACTIVITY type ref to CL_HRRCF_ABSTRACT_ACTIVITY_REC
    exporting
      !ES_URL type RCF_S_MDL_URL
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
ENDCLASS.



CLASS CL_HRRCF_M_ACT_DOVR IMPLEMENTATION.


METHOD correspondence_act.
  DATA:         ls_corr            TYPE rcf_s_correspond_activity_text,
        lv_indiv_corr_sol          TYPE boole_d,
             lo_activity           TYPE REF TO cl_hrrcf_act_correspond_record.

**********************************************************************
  io_abstract_activity->get_record_with_text(
    EXPORTING
      p_changed_by_not_requested = ' '
    IMPORTING
      record                     = ls_corr ).


  IF ls_corr-indiv_letter IS NOT INITIAL.

    es_url-name =
        cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_CHANGED' ).

  ELSE.

    lo_activity ?= io_abstract_activity.

    lo_activity->read_indiv_corr_solution(
      RECEIVING
        p_indiv_corr_sol = lv_indiv_corr_sol ).

    IF lv_indiv_corr_sol IS INITIAL.

      es_url-name =
          cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_NOT_CHANGED' ).

    ELSE.

      IF ls_corr-indiv_lettersect IS NOT INITIAL.
        es_url-name =
            cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_CHANGED' ).
      ELSE.
        es_url-name =
            cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_NOT_CHANGED' ).
      ENDIF.

    ENDIF.

  ENDIF.


* create URL
  cl_hrrcf_mdl_wd_services=>get_url_cs_dovr(
    exporting
      iv_cs_act_guid = ls_corr-act_guid
    receiving
      rv_url         = es_url-url ).
ENDMETHOD.


METHOD get_activity_elements.
  DATA: lo_abstract_activity            TYPE REF TO cl_hrrcf_abstract_activity_rec.
  DATA: ls_general_act_info             TYPE rcf_s_act_infotype_general_txt,
        ls_general_info                 TYPE rcf_s_actform_general.

  TRY.
*     get activity
      cl_hrrcf_activity_factory=>get_activity_by_guid(
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_abstract_activity ).

*     get general activity data
      lo_abstract_activity->get_record_with_text(
        EXPORTING
          p_changed_by_not_requested = ' '
        IMPORTING
          record                     = ls_general_act_info ).


      CASE ls_general_act_info-act_cat.
        WHEN '02'.
          "correspondense activity
          correspondence_act(
            EXPORTING
              io_abstract_activity = lo_abstract_activity
            IMPORTING
              es_url               = es_url ).

          ev_act_type_txt = ls_general_act_info-act_type_txt.

        WHEN  '04'.
          "invitation activity
          invitation_act(
            EXPORTING
              io_abstract_activity = lo_abstract_activity
            IMPORTING
              es_url               = es_url ).

          ev_act_type_txt = ls_general_act_info-act_type_txt.

      ENDCASE.

    CATCH cx_hrrcf_infotype_operation .
    CATCH cx_hrrcf .
  ENDTRY.

ENDMETHOD.


method GET_ACT_ATTACHMENTS.

  DATA: lv_dest        TYPE rfcdest,
        lv_https       TYPE boole_d.

  DATA: lv_protocol    TYPE string,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* determine protocol for url generation
  CALL METHOD cl_wd_utilities=>construct_wd_url
    EXPORTING
      application_name = 'abc'
    IMPORTING
      out_protocol     = lv_protocol.

  IF lv_protocol = 'https'.
    lv_https = abap_true.
  ENDIF.

* reset rfc connection for destroying buffer
  cl_hrrcf_m_rfc_services=>reset_rfc_connection( lv_dest ).

  CALL FUNCTION 'HRRRCF_MDL_CAND_ACT_ATT_RTREVE'
    DESTINATION lv_dest
    EXPORTING
      act_guid              = iv_act_guid
      https                 = lv_https
      mandt                 = sy-mandt
    IMPORTING
      records               = et_attachments
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
endmethod.


method GET_HROBJECT_FOR_ACT_GUID.

  CALL METHOD cl_hrrcf_activity_bl=>get_application
    EXPORTING
      p_act_guid       = iv_act_guid
    IMPORTING
      ps_appl_hrobject = es_appl_hrobject
      .

endmethod.


method INVITATION_ACT.
  data: lo_activity        type ref to cl_hrrcf_act_invitation_record,
        ls_url             type rcf_s_mdl_url,
        ls_inv             type rcf_s_invitation_activity_text,
        lv_indiv_corr_sol  type boole_d.

**********************************************************************

  io_abstract_activity->get_record_with_text(
    exporting
      p_changed_by_not_requested = ' '
    importing
      record                     = ls_inv ).


  if ls_inv-indiv_letter is not initial.

    es_url-name =
        cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_CHANGED' ).

  else.

    lo_activity ?= io_abstract_activity.

    lo_activity->read_indiv_corr_solution(
      receiving
        p_indiv_corr_sol = lv_indiv_corr_sol ).

    if lv_indiv_corr_sol is initial.

      es_url-name =
          cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_NOT_CHANGED' ).

    else.

      if ls_inv-indiv_lettersect is not initial.
        es_url-name =
            cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_CHANGED' ).
      else.
        es_url-name =
            cl_hrrcf_services_general=>get_otr_text( 'PAOC_RCF_RFC_MODEL/ACTFORM_LETTER_NOT_CHANGED' ).
      endif.

    endif.

  endif.

* create URL
  cl_hrrcf_mdl_wd_services=>get_url_cs_dovr(
    exporting
      iv_cs_act_guid = ls_inv-act_guid
    receiving
      rv_url         = es_url-url ).
endmethod.
ENDCLASS.