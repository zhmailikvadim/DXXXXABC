class CL_HRRCF_M_APPLICATIONS definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

*"* public components of class CL_HRRCF_M_APPLICATIONS
*"* do not include other source files here!!!
  methods RETRIEVE_RFC_DESTINATION .
  methods SC_APPL_POLICY_URL_RETRIEVE
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !EV_URL type RCF_MDL_URL
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_VERIFICATION_STATUS
    importing
      !IV_CANDIDATE_HROBJECT type HROBJECT optional
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_IS_PUBLICATION_VALID
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
    returning
      value(RV_IS_VALID) type WDY_BOOLEAN
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_JOBS_APPL_RETRIEVE
    importing
      value(IV_CAND_HROBJECT) type HROBJECT optional
      value(IV_FOR_VERIF) type BOOLE_D optional
    exporting
      !ET_JOBS_APPLICATIONS type RCF_T_MDL_JOBS_APPLICATIONS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_JOBS_APPL_WITHDW_DEL
    importing
      value(IV_APPL_HROBJECT) type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SEND_APPLICATION
    importing
      !IS_APPLICATION_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_JOB_FAVO
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_APPLICATIONS
*"* do not include other source files here!!!

  data GV_RFC_DEST type RFCDEST .

  methods GET_RFC_DESTINATION
    returning
      value(RV_RFC_DEST) type RFCDEST .
  methods SET_RFC_DESTINATION
    importing
      value(IV_RFC_DEST) type RFCDEST .
ENDCLASS.



CLASS CL_HRRCF_M_APPLICATIONS IMPLEMENTATION.


METHOD GET_RFC_DESTINATION.

  rv_rfc_dest = me->gv_rfc_dest.

ENDMETHOD.


METHOD RETRIEVE_RFC_DESTINATION.

  DATA: lv_rfc_dest TYPE rfcdest.

* retrieve the RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* set the RFC destination
  me->set_rfc_destination( lv_rfc_dest ).

ENDMETHOD.


METHOD sc_appl_policy_url_retrieve.

* Author: ALIV.

  DATA: lv_rfc_dest     TYPE rfcdest,
        lv_message(80)  TYPE c.

  CLEAR: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  CALL FUNCTION 'HRRCF_MDL_UIS_APL_LNK_RETRIEVE' DESTINATION lv_rfc_dest
    IMPORTING
      appl_policy_url       = ev_url
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method sc_get_verification_status.

* NOTE: This is a copy from class CL_HRRCF_M_REGISTER.

  data: lv_dest                type rfcdest,
        lv_verification_status type rcf_verification_status,
        lv_message(80)         type c.

  clear: ev_verification_status,
         et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    destination lv_dest
    exporting
      is_candidate_hrobject  = iv_candidate_hrobject
    importing
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_is_publication_valid.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: rv_is_valid.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  call function 'HRRCF_MDL_JOBS_IS_PINST_VALID'
    destination lv_rfc_dest
    exporting
      iv_pinst_guid                  = iv_pinst_guid
      iv_check_publ_period_and_state = abap_true
      iv_check_req_state             = abap_true
    importing
      ev_is_valid                    = rv_is_valid
    exceptions
      system_failure                 = 1  message lv_message
      communication_failure          = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_jobs_appl_retrieve.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages,
         et_jobs_applications.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ). "N1307776

  cl_hrrcf_m_rfc_services=>refresh_buffer( iv_rfc_dest = lv_rfc_dest ).

  call function 'HRRCF_MDL_JOBS_APPL_RETRIEVE'
    destination lv_rfc_dest
    exporting
      for_verif             = iv_for_verif
    importing
      applications          = et_jobs_applications
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_jobs_appl_withdw_del.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* withdraw or delete application
  call function 'HRRCF_MDL_JOBS_APPL_WITHDW_DEL' destination lv_rfc_dest
    exporting
      appl_hrobject         = iv_appl_hrobject
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

* save changes to database and refresh the buffer
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_rfc_dest ).

endmethod.


METHOD sc_send_application.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c,
        lt_messages    TYPE bapirettab.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* Set the technical application source correctly
  CALL FUNCTION 'HRRCF_MDL_AWZD_TASRC_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      is_appl_hrobject      = is_application_hrobject
      iv_tech_appl_source   = ' '
    IMPORTING
      et_messages           = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  APPEND LINES OF lt_messages to et_messages.

  CALL FUNCTION 'HRRCF_MDL_AWZD_APPL_SUBMIT'
    DESTINATION lv_dest
    EXPORTING
      appl_hrobject         = is_application_hrobject
    IMPORTING
      messages              = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  APPEND LINES OF lt_messages TO et_messages.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD SET_RFC_DESTINATION.

  me->gv_rfc_dest = iv_rfc_dest.

ENDMETHOD.
ENDCLASS.