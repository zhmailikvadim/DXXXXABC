class CL_HRRCF_M_APPLWIZARD definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

*"* public components of class CL_HRRCF_M_APPLWIZARD
*"* do not include other source files here!!!
  methods BUILD_TITLE
    importing
      !IV_FULLNAME type BU_NAME1TX
    returning
      value(RV_TITLE) type STRING .
  methods SC_CREATE_APPLICATION
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IV_PINST_GUID type RCF_PINST_GUID
      !IV_TECH_APPL_SOURCE type RCF_TECH_APPL_SOURCE
    exporting
      !EV_APPL_HROBJECT type HROBJECT
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_CAND_FULLNAME
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !EV_CAND_FULLNAME type BU_NAME1TX
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_VERIFICATION_STATUS
    importing
      !IV_CANDIDATE_HROBJECT type HROBJECT
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_HAS_ALREADY_APPLIED
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IV_PINST_GUID type RCF_PINST_GUID
    exporting
      !EV_ALREADY_APPLIED type WDY_BOOLEAN
      !EV_APPL_STATUS type RCF_APPLICATION_STATUS_SEL
      !ES_APPL_HROBJECT type HROBJECT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_IS_PINST_VALID
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
      !IV_CAND_CHECK type BOOLE_D default 'X'
    exporting
      !EV_IS_PINST_VALID type WDY_BOOLEAN
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_APPL_DATE_STATUS
    importing
      !IS_APPL_HROBJECT type HROBJECT
    exporting
      !EV_STATUS_TXT type DDTEXT
      !EV_STATUS type RCF_APPLICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
      !EV_APPLICATION_DATE type RCF_APPLICATION_DATE
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_RETRIEVE_POSTING_HEADER
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !EV_POSTING_HEADER type STRING
      !EV_IS_APPL_GROUP type WDY_BOOLEAN
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_PROFILE_STATUS
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ES_PROFILE type RCF_S_MDL_CAND_PROFRL
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_QA
    importing
      !IS_APPL_HROBJECT type HROBJECT
    exporting
      !ET_QA_ACTIVITIES type RCF_T_MDL_AWZD_QA_ACTIVITIES
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_APPLWIZARD
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_APPLWIZARD
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_APPLWIZARD IMPLEMENTATION.


METHOD build_title.

  DATA: lv_param1 TYPE string.

  lv_param1 = iv_fullname.

  CALL METHOD me->if_wd_component_assistance~get_text
    EXPORTING
      key   = '001'
      para1 = lv_param1
    RECEIVING
      text  = rv_title.


ENDMETHOD.


METHOD sc_create_application.

  DATA: lv_dest        TYPE rfcdest,
        lt_messages    TYPE bapirettab,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AWZD_APPL_CREATE'
    DESTINATION lv_dest
    EXPORTING
      cand_hrobject         = is_cand_hrobject
      pinst_guid            = iv_pinst_guid
      application_status    = '0'   "draft
      tech_appl_source      = iv_tech_appl_source
    IMPORTING
      appl_hrobject         = ev_appl_hrobject
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_get_cand_fullname.

  DATA: lv_dest          TYPE rfcdest,
        ls_personal_data TYPE rcf_s_mdl_cand_personal_data,
        lv_message(80)   type c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.


  CALL FUNCTION 'HRRCF_MDL_CAND_PERS_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      cand_hrobject         = is_cand_hrobject
    IMPORTING
      personal_data         = ls_personal_data
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  ev_cand_fullname = ls_personal_data-fullname.

ENDMETHOD.


method sc_get_verification_status.

* NOTE: This is a copy from class CL_HRRCF_M_REGISTER.

  data: lv_dest                type rfcdest,
        lv_verification_status type rcf_verification_status,
        lv_message(80)         type c.

  clear: ev_verification_status,
         et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    destination lv_dest
    exporting
      is_candidate_hrobject  = iv_candidate_hrobject
    importing
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_has_already_applied.

  DATA: lv_dest         TYPE rfcdest,
        lv_message(80)  TYPE c,
        lt_messages     TYPE bapirettab.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AWZD_APPL_CHECK'
    DESTINATION lv_dest
    EXPORTING
      cand_hrobject         = is_cand_hrobject
      pinst_guid            = iv_pinst_guid
    IMPORTING
      es_appl_hrobject      = es_appl_hrobject
      ev_appl_status        = ev_appl_status
      messages              = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  READ TABLE lt_messages TRANSPORTING NO FIELDS WITH KEY number = 15.
  IF sy-subrc = 0.
    ev_already_applied = abap_false.
  ELSE.
    ev_already_applied = abap_true.
  ENDIF.

ENDMETHOD.


METHOD sc_is_pinst_valid.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c,
        lt_messages    TYPE bapirettab.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_JOBS_IS_PINST_VALID'
    DESTINATION lv_dest
    EXPORTING
      iv_pinst_guid                  = iv_pinst_guid
      iv_check_publ_period_and_state = abap_true
      iv_check_req_state             = abap_true
*      iv_check_cand_posting          = abap_true             "N_2624733
      iv_check_cand_posting          = iv_cand_check          "N_2624733
    IMPORTING
      ev_is_valid                    = ev_is_pinst_valid
    EXCEPTIONS
      system_failure                 = 1  MESSAGE lv_message
      communication_failure          = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD sc_retrieve_appl_date_status.

  DATA: lv_dest        TYPE rfcdest,
        lt_messages    TYPE bapirettab,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AWZD_ADATE_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      is_appl_hrobject      = is_appl_hrobject
    IMPORTING
      et_messages           = et_messages
      ev_application_date   = ev_application_date
      ev_status_txt         = ev_status_txt
      ev_status             = ev_status
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.


ENDMETHOD.


METHOD sc_retrieve_posting_header.

  DATA: lv_dest     TYPE rfcdest,
        lt_messages TYPE bapirettab,
        lv_message(80) type c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  IF ev_posting_header IS SUPPLIED.
    CALL FUNCTION 'HRRCF_MDL_AWZD_POSTHEADER_GET'
    DESTINATION lv_dest
    EXPORTING
      iv_pinst_guid         = iv_pinst_guid
    IMPORTING
      ev_post_header        = ev_posting_header
        et_messages           = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
    ENDIF.

    APPEND LINES OF lt_messages TO et_messages.
  ENDIF.

  IF ev_is_appl_group IS SUPPLIED.
    CALL FUNCTION 'HRRCF_MDL_AWZD_IS_APPL_GROUP'
      DESTINATION lv_dest
      EXPORTING
        iv_pinst_guid         = iv_pinst_guid
      IMPORTING
        ev_is_appl_group      = ev_is_appl_group
        et_message            = lt_messages
      EXCEPTIONS
        system_failure        = 1  MESSAGE lv_message
        communication_failure = 2  MESSAGE lv_message.

    IF sy-subrc <> 0.
*   problem with rfc connection
      CASE sy-subrc.
        WHEN 1.
          RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
            EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
        WHEN 2.
          RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
            EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
      ENDCASE.
    ENDIF.

    APPEND LINES OF lt_messages TO et_messages.
  ENDIF.

ENDMETHOD.


method sc_retrieve_profile_status.

* NOTE: This is a copy from class CL_HRRCF_M_RELEASE_PROF.

  data: lv_dest        type rfcdest,
        lv_message(80) type c.

* get rfc destination
  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_CAND_PROFRL_RETRIEVE'
    destination lv_dest
    exporting
      cand_hrobject         = is_cand_hrobject
    importing
      record                = es_profile
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with rfc connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_retrieve_qa.

  DATA: lv_dest        TYPE rfcdest,
        lt_messages    TYPE bapirettab,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AWZD_QA_ACT_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      appl_hrobject         = is_appl_hrobject
      is_appl_history       = abap_true
    IMPORTING
      qa_activities         = et_qa_activities
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.


ENDMETHOD.
ENDCLASS.