class CL_HRRCF_M_CAND_ASSESSMENT definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

*"* public components of class CL_HRRCF_M_CAND_ASSESSMENT
*"* do not include other source files here!!!
public section.

  methods GET_REQUISITION_INFO
    importing
      !IS_CDCY_HROBJECT type HROBJECT
    exporting
      !ES_REQ_HROBJECT type HROBJECT
      !ES_REQ_HEADER type RCF_REQUISITION_HEADER
    raising
      CX_HRRCF .
  methods GET_CAND_INFO
    importing
      !IS_CDCY_HROBJECT type HROBJECT optional
      !IS_CAND_HROBJECT type HROBJECT optional
    exporting
      !ES_CAND_HROBJECT type HROBJECT
      !EV_CAND_NAME type BU_NAME1TX
    raising
      CX_HRRCF .
  methods GET_CDCY_STATUS
    importing
      !IS_CDCY_HROBJECT type HROBJECT
    exporting
      !EV_CANDIDACY_STATUS type RCF_CANDIDACY_STATUS
    raising
      CX_HRRCF .
  class-methods GET_CDCY_URL
    importing
      !IV_USER type XUBNAME default SY-UNAME
      !IT_CDCY_HROBJECT type RCF_T_HROBJECT
    returning
      value(RV_URL) type STRING .
  class-methods GET_CAND_URL
    importing
      !IV_USER type XUBNAME default SY-UNAME
      !IT_CDCY_HROBJECT type RCF_T_HROBJECT
    returning
      value(RV_URL) type STRING .
  methods GET_CDCY_ASSESSMENT
    importing
      !IS_CDCY_HROBJECT type HROBJECT
      !IV_USER type XUBNAME default SY-UNAME
    exporting
      !EV_RATING type RATING
      !EV_NOTE type RCF_ITF_DESCRIPTION
      !ET_MESSAGE type BAPIRETTAB .
  methods GET_CDCY_RATING_VALUESET
    returning
      value(RT_RATING) type RCF_T_PROFICIENCY .
  methods GET_CAND_RATING_VALUESET
    returning
      value(RT_RATING) type RCF_T_PROFICIENCY .
  class-methods GET_CAND_ASSESSMENT
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IV_USER type XUBNAME default SY-UNAME
    exporting
      !EV_RATING_TXT type STEXT
      !EV_RATING type RATING
      !EV_NOTE type RCF_ITF_DESCRIPTION
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF .
  methods APPLY_CDCY_ASSESSMENT
    importing
      !IV_USER type XUBNAME default SY-UNAME
      !IS_CDCY_HROBJECT type HROBJECT
      !IV_RATING type RATING
      !IV_NOTE type RCF_ITF_DESCRIPTION
    exporting
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF .
  methods APPLY_CAND_ASSESSMENT
    importing
      !IV_USER type XUBNAME default SY-UNAME
      !IS_CAND_HROBJECT type HROBJECT
      !IV_RATING type RATING
      !IV_NOTE type RCF_ITF_DESCRIPTION
    exporting
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF .
protected section.
*"* protected components of class CL_HRRCF_M_CAND_ASSESSMENT
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_CAND_ASSESSMENT
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_CAND_ASSESSMENT IMPLEMENTATION.


METHOD apply_cand_assessment.

  DATA:  lo_exception     TYPE REF TO cx_root,
         lv_act_guid      TYPE rcf_act_guid,
         ls_cand_hrobject TYPE hrobject,
         ls_hrobject      TYPE hrobject,
         lt_hrobject      TYPE rcf_t_hrobject,
         lv_proc_type     TYPE rcf_act_proc,
         lv_act_type      TYPE rcf_act_type,
         lt_message       TYPE bapirettab,
         ls_message       TYPE bapiret2,
         lv_subrc         TYPE sysubrc,
         lv_lines         TYPE i,
         lv_classif_value TYPE rcf_cdcy_rating,
         lo_activity      TYPE REF TO cl_hrrcf_abstract_activity_rec,
         lv_subarea       TYPE rcf_subarea,
         lv_proc_group    TYPE rcf_act_proc_group,
         lv_sobid         TYPE sobid.


  lv_proc_group = 'TRM'.

*     determine activity type
  CALL METHOD cl_hrrcf_activity_bl=>get_ranking_activity
    EXPORTING
      p_otype      = is_cand_hrobject-otype
      p_subarea    = lv_subarea
      p_proc_group = lv_proc_group
    IMPORTING
      p_act_type   = lv_act_type
      pt_messages  = lt_message.

  IF lv_act_type IS INITIAL OR
     lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    RETURN.
  ENDIF.

*     determine process type
  CALL METHOD cl_hrrcf_activity_factory=>get_proc_by_act_hrobject
    EXPORTING
      p_proc_group   = 'TRM'
      p_activity     = lv_act_type
      p_hrobject     = is_cand_hrobject
    IMPORTING
      p_process_code = lv_proc_type.

*     check creation authority
  CALL METHOD cl_hrrcf_activity_factory=>authority_check
    EXPORTING
      p_user       = iv_user
      p_auth_activ = '01'          "create
      p_act_proc   = lv_proc_type
      p_act_type   = lv_act_type
    IMPORTING
      p_subrc      = lv_subrc.

  IF lv_subrc <> 0.
*       not authorized
    RETURN.
  ENDIF.

* Convert rating into classification value
  CALL METHOD cl_hrrcf_t77rcf_scales=>get_cand_classif_val_for_prof
    EXPORTING
      p_proficiency   = iv_rating
    IMPORTING
      p_classif_value = lv_classif_value.

  lv_sobid = iv_user.
  CALL METHOD cl_hrrcf_activity_factory=>create_class_activity_by_type
    EXPORTING
      ps_hrobject      = is_cand_hrobject
      p_act_type       = lv_act_type
      p_act_proc       = lv_proc_type
      p_note_txt       = iv_note
      p_responsible    = lv_sobid
      p_classification = lv_classif_value
    IMPORTING
      pt_return        = lt_message.

  APPEND LINES OF lt_message TO et_message.

ENDMETHOD.


METHOD apply_cdcy_assessment.

  DATA:  lo_exception     TYPE REF TO cx_root,
          lv_act_guid      TYPE rcf_act_guid,
          ls_cand_hrobject TYPE hrobject,
          ls_hrobject      TYPE hrobject,
          lt_hrobject      TYPE rcf_t_hrobject,
          lv_proc_type     TYPE rcf_act_proc,
          lv_act_type      TYPE rcf_act_type,
          lt_message       TYPE bapirettab,
          ls_message       TYPE bapiret2,
          lv_subrc         TYPE sysubrc,
          lv_lines         TYPE i,
          lv_classif_value TYPE rcf_cdcy_rating,
          lo_activity      TYPE REF TO cl_hrrcf_abstract_activity_rec,
          lv_subarea       TYPE rcf_subarea,
          lv_proc_group    TYPE rcf_act_proc_group,
          lv_sobid         TYPE sobid.


* determine activity type
  CALL METHOD cl_hrrcf_activity_bl=>get_ranking_activity
    EXPORTING
      p_otype      = is_cdcy_hrobject-otype
      p_subarea    = lv_subarea
      p_proc_group = lv_proc_group
    IMPORTING
      p_act_type   = lv_act_type
      pt_messages  = lt_message.

  IF lv_act_type IS INITIAL OR
     lt_message IS NOT INITIAL.
    APPEND LINES OF lt_message TO et_message.
    RETURN.
  ENDIF.

* determine process type
  CALL METHOD cl_hrrcf_activity_factory=>get_proc_by_act_hrobject
    EXPORTING
      p_proc_group   = 'TRM'
      p_activity     = lv_act_type
      p_hrobject     = is_cdcy_hrobject
    IMPORTING
      p_process_code = lv_proc_type.

* check creation authority
  CALL METHOD cl_hrrcf_activity_factory=>authority_check
    EXPORTING
      p_user       = iv_user
      p_auth_activ = '01'          "create
      p_act_proc   = lv_proc_type
      p_act_type   = lv_act_type
    IMPORTING
      p_subrc      = lv_subrc.

  IF lv_subrc <> 0.
*       not authorized
    RETURN.
  ENDIF.

* Convert rating into classification value
  CALL METHOD cl_hrrcf_t77rcf_scales=>get_cdcy_classif_val_for_prof
    EXPORTING
      p_proficiency   = iv_rating
    IMPORTING
      p_classif_value = lv_classif_value.

  lv_sobid = iv_user.
  CALL METHOD cl_hrrcf_activity_factory=>create_class_activity_by_type
    EXPORTING
      ps_hrobject      = is_cdcy_hrobject
      p_act_type       = lv_act_type
      p_act_proc       = lv_proc_type
      p_note_txt       = iv_note
      p_responsible    = lv_sobid
      p_classification = lv_classif_value
    IMPORTING
      pt_return        = lt_message.

  APPEND LINES OF lt_message TO et_message.

ENDMETHOD.


METHOD get_cand_assessment.


  DATA: lt_message       TYPE bapirettab,
        lt_cdcy_objid    TYPE rcf_t_candidacy_id,
        lt_ranking       TYPE rcf_t_esa_cdcy_ranking_act_wt,
        ls_ranking       TYPE rcf_s_esa_cdcy_ranking_act_wt.
  DATA: lo_ranking       TYPE REF TO cl_hrrcf_act_classif_record,
        ls_record        TYPE rcf_s_classif_activity_txt,
        lv_user          TYPE sobid.


* retrieve activity record of classification
  lv_user = iv_user.
  CALL METHOD cl_hrrcf_activity_factory=>get_already_classif_record
    EXPORTING
      ps_hrobject     = is_cand_hrobject
      p_responsible   = lv_user
    IMPORTING
      po_existing_rec = lo_ranking.

  IF NOT lo_ranking IS BOUND.
    RETURN.
  ENDIF.

  CALL METHOD lo_ranking->get_record_with_text
    EXPORTING
      p_language                 = sy-langu
      p_resp_not_requested       = abap_true
      p_exec_not_requested       = abap_true
      p_changed_by_not_requested = abap_true
    IMPORTING
      record                     = ls_record.

  ev_rating_txt = ls_record-classification_txt.

  CALL METHOD cl_hrrcf_t77rcf_scales=>get_prof_for_cand_classif_val
    EXPORTING
      p_classification = ls_record-classification
    IMPORTING
      p_prof           = ev_rating.

  CALL METHOD lo_ranking->read_text
    EXPORTING
      use_fallback = abap_true
    IMPORTING
      text         = ev_note.

ENDMETHOD.


METHOD get_cand_info.

  DATA: lo_cdcy_bl          TYPE REF TO cl_hrrcf_candidacy_bl.

  IF is_cdcy_hrobject IS NOT INITIAL.

    lo_cdcy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).
    CALL METHOD lo_cdcy_bl->get_candidate
      EXPORTING
        ps_cdcy_hrobject = is_cdcy_hrobject
      IMPORTING
        ps_cand_hrobject = es_cand_hrobject
        p_cand_name      = ev_cand_name.

  ELSEIF is_cand_hrobject IS NOT INITIAL.

    CALL METHOD cl_hrrcf_candidate_admin_bl=>get_candidate
      EXPORTING
        ps_cand_hrobject = is_cand_hrobject
      IMPORTING
        p_cand_name      = ev_cand_name
        p_cand_hrobject  = es_cand_hrobject.

  ENDIF.

ENDMETHOD.


METHOD get_cand_rating_valueset.

  rt_rating = cl_hrrcf_t77rcf_scales=>cand_classif_prof_list.

ENDMETHOD.


METHOD GET_CAND_URL.

  DATA: ls_cdcy_hrobject TYPE hrobject,
        lv_cdcy_string   TYPE string,
        lt_param         TYPE tihttpnvp,
        ls_param         TYPE ihttpnvp,
        lv_url           TYPE string.

  CONSTANTS: lc_application TYPE string VALUE 'hrrcf_a_tp_assess'.


  LOOP AT it_cdcy_hrobject INTO ls_cdcy_hrobject.
    IF sy-tabix = 1.
      lv_cdcy_string = ls_cdcy_hrobject.
    ELSE.
      CONCATENATE lv_cdcy_string '_' ls_cdcy_hrobject INTO lv_cdcy_string.
    ENDIF.
  ENDLOOP.

  ls_param-name = 'cdcy_hrobject'.
  ls_param-value = lv_cdcy_string.
  APPEND ls_param TO lt_param.

  ls_param-name = 'substitute'.
  ls_param-value = iv_user.
  APPEND ls_param TO lt_param.

  CALL METHOD cl_hrrcf_wd_services=>construct_wd_url
    EXPORTING
      iv_application_name = lc_application
      it_parameters       = lt_param
    RECEIVING
      rv_url              = lv_url.

  rv_url = lv_url.


ENDMETHOD.


METHOD get_cdcy_assessment.


  DATA: lt_message       TYPE bapirettab,
        lt_cdcy_objid    TYPE rcf_t_candidacy_id,
        lt_ranking       TYPE rcf_t_esa_cdcy_ranking_act_wt,
        ls_ranking       TYPE rcf_s_esa_cdcy_ranking_act_wt.

  APPEND is_cdcy_hrobject-objid TO lt_cdcy_objid.

* get assessment data
  CALL FUNCTION 'ERC_ESA_CDCYS_RANKING_BY_USER'
    EXPORTING
      it_candidacy = lt_cdcy_objid
      iv_user      = iv_user
    IMPORTING
      et_ranking   = lt_ranking
      et_message   = lt_message.

  APPEND LINES OF lt_message TO et_message.

  IF lt_ranking IS NOT INITIAL.
    READ TABLE lt_ranking INTO ls_ranking INDEX 1.
    IF sy-subrc = 0.
      CALL METHOD cl_hrrcf_t77rcf_scales=>get_prof_for_cdcy_classif_val
        EXPORTING
          p_classification = ls_ranking-rating
        IMPORTING
          p_prof           = ev_rating.

      ev_note = ls_ranking-note.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD GET_CDCY_RATING_VALUESET.

  CALL FUNCTION 'ERC_ESA_CDCY_CLSSF_VALUES_GET'
    IMPORTING
      et_value = rt_rating.

ENDMETHOD.


METHOD GET_CDCY_STATUS.

  DATA: lo_cdcy_bl  TYPE REF TO cl_hrrcf_candidacy_bl.

  lo_cdcy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).
  CALL METHOD lo_cdcy_bl->get_candidacy_status
    EXPORTING
      ps_cdcy_hrobject = is_cdcy_hrobject
    IMPORTING
      p_status         = ev_candidacy_status.

ENDMETHOD.


METHOD get_cdcy_url.

  DATA: ls_cdcy_hrobject TYPE hrobject,
        lv_cdcy_string   TYPE string,
        lt_param         TYPE tihttpnvp,
        ls_param         TYPE ihttpnvp,
        lv_url           TYPE string.

  CONSTANTS: lc_application TYPE string VALUE 'hrrcf_a_req_assess'.


  LOOP AT it_cdcy_hrobject INTO ls_cdcy_hrobject.
    IF sy-tabix = 1.
      lv_cdcy_string = ls_cdcy_hrobject.
    ELSE.
      CONCATENATE lv_cdcy_string '_' ls_cdcy_hrobject INTO lv_cdcy_string.
    ENDIF.
  ENDLOOP.

  ls_param-name = 'cdcy_hrobject'.
  ls_param-value = lv_cdcy_string.
  APPEND ls_param TO lt_param.

  ls_param-name = 'substitute'.
  ls_param-value = iv_user.
  APPEND ls_param TO lt_param.

  CALL METHOD cl_hrrcf_wd_services=>construct_wd_url
    EXPORTING
      iv_application_name = lc_application
      it_parameters       = lt_param
    RECEIVING
      rv_url              = lv_url.

  rv_url = lv_url.


ENDMETHOD.


METHOD get_requisition_info.

  DATA: lo_cdcy_bl          TYPE REF TO cl_hrrcf_candidacy_bl,
        ls_requisition_info TYPE p5125.

  lo_cdcy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).

  CALL METHOD lo_cdcy_bl->get_requisition_info
    EXPORTING
      ps_cdcy_hrobject    = is_cdcy_hrobject
    IMPORTING
      ps_requisition_info = ls_requisition_info.

  es_req_header = ls_requisition_info-header.
  es_req_hrobject-plvar = ls_requisition_info-plvar.
  es_req_hrobject-otype = ls_requisition_info-otype.
  es_req_hrobject-objid = ls_requisition_info-objid.

ENDMETHOD.
ENDCLASS.