class CL_HRRCF_M_CAND_INTV_BOOK definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  final
  create public .

public section.

  constants GC_BOOK type CHAR2 value '0'. "#EC NOTEXT
  constants GC_CANCELBOOK type CHAR2 value '1'. "#EC NOTEXT

  methods GET_CAND_JOBS_APPLICATIONS
    exporting
      !ET_APPLICATIONS type RCF_T_CAND_APPL_LIST
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods GET_CAND_INTV_SCHDL_ACTVITIES
    exporting
      !ET_ACTIVITY type RCF_T_ACT_QEVNT_INFO_TEXT_PL
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods UPDATE_QUALIFY_EVENT_ACTIVITY
    importing
      !IS_ACTIVITY type RCF_S_ACT_QEVNT_UPD_PL
    exporting
      !ES_ACTIVITY type RCF_S_ACT_QEVNT_INFO_TEXT_PL
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods GET_AVAILABLE_TIME_SLOTS
    importing
      !IV_SCHDL_ID type HRRCF_D_INTVSCDL-SCHDL_ID
      !IV_REQ_OBJ type HROBJECT
    exporting
      !ET_TIME_SLOT type RCF_T_INTV_TIMSLOT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods CHECK_TIMESLOT_BOOKED
    importing
      !IV_SCHLD_ID type HRRCF_D_INTVSCDL-SCHDL_ID
      !IV_REQU_OBJ type HROBJECT optional
      !IS_ACTIVITY type RCF_S_ACT_QEVNT_UPD_PL
    exporting
      !ET_CANDIATES type RCF_T_HROBJECT
      !EV_EXISTS type BOOLE_D
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods GET_TIMEZONE_TEXT
    importing
      !IV_TIMEZONE type HRRCF_D_INTVSCDL-TIME_ZONE
    returning
      value(EV_TIMEZONE_TXT) type STRING .
  methods GET_CAND_INTV_BOOKING_DETAILS
    importing
      !IT_ACTIVITY type RCF_T_ACT_QEVNT_INFO_TEXT_PL
    exporting
      !ET_INTV_SCHDL type RCF_T_INTV_SCHDL
      !ET_INTV_BOOK_INFO type RCF_T_CAND_INTV_BOOK_INFO
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
private section.
ENDCLASS.



CLASS CL_HRRCF_M_CAND_INTV_BOOK IMPLEMENTATION.


METHOD check_timeslot_booked.

  DATA: lv_dest         TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CHK_TIMESLOT_BOOKED' DESTINATION lv_dest
    EXPORTING
      iv_schld_id           = iv_schld_id
      iv_requ_obj           = iv_requ_obj
      is_activity           = is_activity  "#EC ENHOK
    IMPORTING
      et_candiates          = et_candiates
      ev_exists             = ev_exists
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2 .

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
ENDMETHOD.


METHOD get_available_time_slots.

  DATA: lv_dest          TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AVAILABLE_TIME_SLOTS' DESTINATION lv_dest
    EXPORTING
     iv_schdl_id           = iv_schdl_id
     iv_req_obj            = iv_req_obj
    IMPORTING
     et_time_slot          = et_time_slot
    EXCEPTIONS
     system_failure        = 1
     communication_failure = 2 .

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  ENDMETHOD.


METHOD get_cand_intv_booking_details.

  DATA: lv_dest          TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_INTV_BOOK_INFO' DESTINATION lv_dest
    EXPORTING
      it_activity           = it_activity
    IMPORTING
      et_intv_schdl         = et_intv_schdl
      et_intv_book_info     = et_intv_book_info
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD get_cand_intv_schdl_actvities.

 DATA: lv_dest         TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_INTV_SCHDL_ACT' DESTINATION lv_dest
    IMPORTING
      et_activity           = et_activity
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
ENDMETHOD.


METHOD get_cand_jobs_applications.

  DATA: lv_dest          TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_JOBS_APPLS'  DESTINATION lv_dest
    IMPORTING
      et_applications       = et_applications
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  ENDMETHOD.


METHOD get_timezone_text.

  DATA ls_timzonetext TYPE tzndesctzn.
  DATA lv_dd04v       TYPE dd04v.
  DATA lv_ttzvttzz    TYPE ttzvttzz.
  CLEAR ev_timezone_txt.

  IF iv_timezone IS NOT INITIAL.
    CALL FUNCTION 'TZON_GET_TIMEZONE_TEXT'
      EXPORTING
        if_timezone       = iv_timezone
      IMPORTING
        ef_timezone_text  = ls_timzonetext
      EXCEPTIONS
        no_text_available = 1
        OTHERS            = 2.
    IF sy-subrc NE 0.
      CLEAR ev_timezone_txt.
    ELSE.
      CONCATENATE iv_timezone '( ' ls_timzonetext ' )' INTO ev_timezone_txt RESPECTING BLANKS.
    ENDIF.
  ENDIF.

  CALL FUNCTION 'DDIF_DTEL_GET'
    EXPORTING
      name          = 'TZNUTCDIFF'
      langu         = sy-langu
    IMPORTING
      dd04v_wa      = lv_dd04v
    EXCEPTIONS
      illegal_input = 1
      OTHERS        = 2.

  IF sy-subrc <> 0.
* Implement suitable error handling here
  ELSE.
    CONCATENATE ev_timezone_txt ' ' lv_dd04v-scrtext_m INTO ev_timezone_txt RESPECTING BLANKS.
  ENDIF.

  CALL FUNCTION 'TZON_GET_DATA'
    EXPORTING
      if_timezone              = iv_timezone
    IMPORTING
      es_svttzz                = lv_ttzvttzz
    EXCEPTIONS
      time_zone_not_found      = 1
      time_zone_rule_not_found = 2
      dst_rule_not_found       = 3
      OTHERS                   = 4.
  IF sy-subrc <> 0.
    IF lv_ttzvttzz-zonedesc IS NOT INITIAL.
      CONCATENATE ev_timezone_txt lv_ttzvttzz-zonedesc INTO ev_timezone_txt RESPECTING BLANKS.
    ENDIF.
  ELSE.
    CONCATENATE ev_timezone_txt lv_ttzvttzz-zonedesc INTO ev_timezone_txt RESPECTING BLANKS.
  ENDIF.

ENDMETHOD.


METHOD update_qualify_event_activity.

  DATA: lv_dest         TYPE rfcdest.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

 CALL FUNCTION 'HRRCF_MDL_UPD_QUALIFY_EVNT_ACT' DESTINATION lv_dest
   EXPORTING
     is_activity           = is_activity
  IMPORTING
     es_activity           = es_activity  "#EC ENHOK
     et_message            = et_message
  EXCEPTIONS
     system_failure        = 1
     communication_failure = 2.

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  ENDMETHOD.
ENDCLASS.