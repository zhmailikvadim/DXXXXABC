class CL_HRRCF_M_INBOX_MAIL definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

  methods SC_GET_VERIFICATION_STATUS
    importing
      !IV_CANDIDATE_HROBJECT type HROBJECT optional
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods RETRIEVE_RFC_DESTINATION
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INBOX_MAILS_RETRIEVE
    importing
      value(IV_CAND_HROBJECT) type HROBJECT optional
    exporting
      !ET_INBOX_MAILS type RCF_T_WD_INBOX_MAILS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INBOX_MAIL_MARK_AS_READ
    importing
      !IS_HROBJECT type HROBJECT optional
      !IV_MAIL_GUID type RCF_MAIL_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INBOX_MAILS_DELETE
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IT_INBOX_MAILS_DELETE type RCF_T_WD_INBOX_MAILS
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_INBOX_CUSTOMIZING
    exporting
      !EV_INBOX_MAIL_CUST type RCF_INBOX_MAIL_CUST
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INBOX_POLICY_URL_RETRIEVE
    returning
      value(RV_URL) type STRING
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INBOX_MAIL_CONTENT_RETRIEVE
    importing
      !IS_HROBJECT type HROBJECT optional
      !IV_MAIL_GUID type RCF_MAIL_GUID
    exporting
      !ES_INBOX_MAIL_CONTENT type RCF_S_MDL_INBOX_MAIL_CONTENT
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_ATTACHMENTS
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_HROBJECT type HROBJECT
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ET_ATTACHMENTS type RCF_T_MDL_CAND_ATTACHMENT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
private section.

  data GV_RFC_DEST type RFCDEST .

  methods GET_RFC_DESTINATION
    returning
      value(RV_RFC_DEST) type RFCDEST .
  methods SET_RFC_DESTINATION
    importing
      value(IV_RFC_DEST) type RFCDEST
    raising
      CX_HRRCF_RFC_COMMUNICATION .
ENDCLASS.



CLASS CL_HRRCF_M_INBOX_MAIL IMPLEMENTATION.


METHOD get_rfc_destination.

  rv_rfc_dest = me->gv_rfc_dest.

ENDMETHOD.


METHOD retrieve_rfc_destination.

  DATA: lv_rfc_dest TYPE rfcdest.

* retrieve the RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* set the RFC destination
  me->set_rfc_destination( lv_rfc_dest ).

ENDMETHOD.


METHOD sc_get_inbox_customizing.

  DATA: lv_dest                TYPE rfcdest,
        lv_inbox_mail_cust     TYPE rcf_inbox_mail_cust,
        lv_message(80)         TYPE c.

  CLEAR: ev_inbox_mail_cust.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_INBOX_CUST_RETRIEVE'
    DESTINATION lv_dest
    IMPORTING
      ev_inbox_mail_cust    = ev_inbox_mail_cust
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method SC_GET_VERIFICATION_STATUS.

* NOTE: This is a copy from class CL_HRRCF_M_APPLICATIONS.

  data: lv_dest                type rfcdest,
        lv_verification_status type rcf_verification_status,
        lv_message(80)         type c.

  clear: ev_verification_status,
         et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    destination lv_dest
    exporting
      is_candidate_hrobject  = iv_candidate_hrobject
    importing
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_inbox_mails_delete.

  DATA ls_wd_inbox_mails_delete TYPE rcf_s_wd_inbox_mail.
  DATA ls_mdl_inbox_mail        TYPE rcf_s_mdl_inbox_mail.
  DATA lt_mdl_inbox_mails       TYPE rcf_t_mdl_inbox_mails.
  DATA lv_rfc_dest              TYPE rfcdest.
  DATA lv_message(80)           TYPE c.

  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  cl_hrrcf_m_rfc_services=>refresh_buffer( iv_rfc_dest = lv_rfc_dest ).

  LOOP AT it_inbox_mails_delete INTO ls_wd_inbox_mails_delete.

    MOVE-CORRESPONDING ls_wd_inbox_mails_delete TO ls_mdl_inbox_mail.
    APPEND ls_mdl_inbox_mail TO lt_mdl_inbox_mails.

  ENDLOOP.

  CALL FUNCTION 'HRRCF_MDL_INBOX_MAILS_DELETE'
    DESTINATION lv_rfc_dest
    EXPORTING
*     IS_CAND_HROBJECT      =
      it_records            = lt_mdl_inbox_mails
    IMPORTING
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

* save changes to database and refresh the buffer
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_rfc_dest ).


ENDMETHOD.


METHOD sc_inbox_mails_retrieve.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.
  DATA  lt_mdl_inbox_mails      TYPE rcf_t_mdl_inbox_mails.
  DATA  ls_mdl_inbox_mail       TYPE rcf_s_mdl_inbox_mail.
  DATA  ls_wd_inbox_mail        TYPE rcf_s_wd_inbox_mail.

  CLEAR: et_messages,
         et_inbox_mails.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  cl_hrrcf_m_rfc_services=>refresh_buffer( iv_rfc_dest = lv_rfc_dest ).


  CALL FUNCTION 'HRRCF_MDL_INBOX_MAILS_RETRIEVE'
    DESTINATION lv_rfc_dest
    IMPORTING
      et_inbox_mails        = lt_mdl_inbox_mails
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
  .

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
    RETURN.
  ENDIF.

  LOOP AT lt_mdl_inbox_mails INTO ls_mdl_inbox_mail.

    MOVE-CORRESPONDING  ls_mdl_inbox_mail TO ls_wd_inbox_mail.

    IF ls_wd_inbox_mail-sender_email IS NOT INITIAL.
      CONCATENATE 'mailto:' ls_wd_inbox_mail-sender_email INTO ls_wd_inbox_mail-sender_email.
      IF ls_wd_inbox_mail-flag_read EQ 'X'.
        ls_wd_inbox_mail-sender_email_exist = 'X'.
      ELSE.
        ls_wd_inbox_mail-sender_email_exist = 'Y'.
      ENDIF.
    ELSE.
      IF ls_wd_inbox_mail-flag_read EQ 'X'.
        ls_wd_inbox_mail-sender_email_exist = 'N'.
      ELSE.
        ls_wd_inbox_mail-sender_email_exist = 'O'.
      ENDIF.
    ENDIF.

    IF ls_wd_inbox_mail-flag_read EQ abap_true.
      ls_wd_inbox_mail-flag_read_icon = '~Icon/Done'.
    ELSE.
      ls_wd_inbox_mail-flag_read_icon = ' '.
    ENDIF.
    IF ls_wd_inbox_mail-attach_count > 0.
      ls_wd_inbox_mail-attach_icon = '~Icon/Attachment'.
    ELSE.
      ls_wd_inbox_mail-attach_icon = ' '.
    ENDIF.

    APPEND ls_wd_inbox_mail TO et_inbox_mails.

  ENDLOOP.


ENDMETHOD.


METHOD sc_inbox_mail_content_retrieve.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.


  CLEAR: et_messages,
         es_inbox_mail_content.

* get RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  cl_hrrcf_m_rfc_services=>refresh_buffer( iv_rfc_dest = lv_rfc_dest ).

  CALL FUNCTION 'HRRCF_MDL_INBOX_CONT_RETRIEVE'
    DESTINATION lv_rfc_dest
    EXPORTING
      is_hrobject           = is_hrobject
      iv_mail_guid          = iv_mail_guid
    IMPORTING
      es_inbox_mail_content = es_inbox_mail_content
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
  .

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
    RETURN.
  ENDIF.


ENDMETHOD.


METHOD sc_inbox_mail_mark_as_read.

  DATA ls_wd_inbox_mails_delete TYPE rcf_s_wd_inbox_mail.
  DATA ls_mdl_inbox_mail        TYPE rcf_s_mdl_inbox_mail.
  DATA lt_mdl_inbox_mails       TYPE rcf_t_mdl_inbox_mails.
  DATA lv_rfc_dest              TYPE rfcdest.
  DATA lv_message(80)           TYPE c.

  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  cl_hrrcf_m_rfc_services=>refresh_buffer( iv_rfc_dest = lv_rfc_dest ).

  CALL FUNCTION 'HRRCF_MDL_INBOX_MAIL_READ'
    DESTINATION lv_rfc_dest
    EXPORTING
      is_hrobject           = is_hrobject
      iv_mail_guid          = iv_mail_guid
    IMPORTING
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

* save changes to database and refresh the buffer
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_rfc_dest ).


ENDMETHOD.


METHOD sc_inbox_policy_url_retrieve.

  DATA: lv_rfc_dest     TYPE rfcdest,
        lv_url          TYPE rcf_mdl_url,
        lv_message(80)  TYPE c.

  CLEAR: rv_url.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_rfc_dest.

  CALL FUNCTION 'HRRCF_MDL_UIS_INB_LNK_RETRIEVE'
    DESTINATION lv_rfc_dest
    IMPORTING
      appl_policy_url       = lv_url
*      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  rv_url = lv_url.

ENDMETHOD.


METHOD sc_retrieve_attachments.

  DATA lv_dest        TYPE rfcdest.
  DATA lv_message(80) TYPE c.
  DATA ls_cand_hrobject TYPE hrobject.
  DATA lo_ex            TYPE REF TO cx_hrrcf.
  DATA lv_msg1          TYPE sy-msgv1.
  DATA ls_message       Type bapiret2.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.
* Commented via note - 2135419
*  TRY.
*      IF is_cand_hrobject IS INITIAL.
*        CALL METHOD cl_hrrcf_candidate_admin_bl=>get_candidate
*          EXPORTING
*            p_user          = sy-uname
*          IMPORTING
*            p_cand_hrobject = ls_cand_hrobject.
*      ELSE.
*        ls_cand_hrobject = is_cand_hrobject.
*      ENDIF.
*    CATCH cx_hrrcf INTO lo_ex .
**     write exception to slg1
*      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).
**--   Convert exception into BAPI return parameter
*      lv_msg1 = sy-uname.
*      IF 1 = 0.
*        MESSAGE e131(hrrcf0002) WITH lv_msg1.
*      ENDIF.
*      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
*        EXPORTING
*          type   = 'E'
*          cl     = 'HRRCF0002'
*          number = '131'
*          par1   = lv_msg1
*        IMPORTING
*          return = ls_message.
*      APPEND ls_message TO et_messages.
*      RETURN.
*  ENDTRY.
* End of changes - note 2135419

* reset rfc connection for destroying buffer
  cl_hrrcf_m_rfc_services=>reset_rfc_connection( lv_dest ).
  CALL FUNCTION 'HRRCF_MDL_INBOX_ATT_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
*      is_cand_hrobject      = ls_cand_hrobject                 "N 2135419
      is_hrobject           = is_hrobject
      iv_act_guid           = iv_act_guid
      mandt                 = sy-mandt
    IMPORTING
      et_inbox_attachments  = et_attachments
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD set_rfc_destination.

  me->gv_rfc_dest = iv_rfc_dest.

ENDMETHOD.
ENDCLASS.