class CL_HRRCF_M_JOB_FAVO definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.
*"* public components of class CL_HRRCF_M_JOB_FAVO
*"* do not include other source files here!!!

  methods CHECK_FOR_EXT_USER
    returning
      value(IS_EXT_USER) type WDY_BOOLEAN .
  methods RETRIEVE_RFC_DESTINATION .
  methods SC_ADD_FAVORITE
    importing
      value(IV_PINT_GUID) type RCF_PINST_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_VERIFICATION_STATUS
    importing
      !IV_CANDIDATE_HROBJECT type HROBJECT optional
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_HAS_ALREADY_APPLIED
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IV_PINST_GUID type RCF_PINST_GUID
    exporting
      !EV_ALREADY_APPLIED type WDY_BOOLEAN
      !EV_APPL_STATUS type RCF_APPLICATION_STATUS_SEL
      !ES_APPL_HROBJECT type HROBJECT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_IS_PUBLICATION_VALID
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
    returning
      value(RV_IS_VALID) type WDY_BOOLEAN
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_JOBS_FAVO_REMOVE
    importing
      value(IV_PINST_GUID) type RCF_PINST_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_JOBS_FAVO_RETRIEVE
    exporting
      !ET_JOBS_FAVO_LIST type RCF_T_MDL_JOBS_FAVORITES
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SEND_TO_A_FRIEND
    importing
      !PINST_GUID type RCF_PINST_GUID
      !RECIPIENT_FULL_NAME type STRING
      !RECIPIENT_MAIL type AD_SMTPADR
      !SENDER_FULL_NAME type STRING
      !SENDER_MESSAGE type STRING
    exporting
      !IS_MAIL_SENT type WDY_BOOLEAN
      !MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_JOB_FAVO
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_JOB_FAVO
*"* do not include other source files here!!!

  data GV_RFC_DEST type RFCDEST .

  methods GET_RFC_DESTINATION
    returning
      value(RV_RFC_DEST) type RFCDEST .
  methods SET_RFC_DESTINATION
    importing
      value(IV_RFC_DEST) type RFCDEST .
ENDCLASS.



CLASS CL_HRRCF_M_JOB_FAVO IMPLEMENTATION.


METHOD check_for_ext_user.


  CALL FUNCTION 'SUSR_USER_IS_SERVICETYPE'
    EXPORTING
      user_name               = sy-uname
    EXCEPTIONS
      user_name_not_exists    = 1
      user_is_not_servicetype = 2
      OTHERS                  = 3.
  IF sy-subrc = 2. " Registered Candidate
    IF cl_hrrcf_wd_services=>is_external_candidate( ) = abap_true.
*     external candidate
      is_ext_user = abap_true.
    ELSE.
*     internal candidate
      is_ext_user = abap_false.
    ENDIF.
  ELSE.
*   unregistered application wizard
    is_ext_user = abap_true.
  ENDIF.


ENDMETHOD.


METHOD get_rfc_destination.

  rv_rfc_dest = me->gv_rfc_dest.

ENDMETHOD.


METHOD retrieve_rfc_destination.

  DATA: lv_rfc_dest TYPE rfcdest.

* retrieve the RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* set the RFC destination
  me->set_rfc_destination( lv_rfc_dest ).

ENDMETHOD.


METHOD sc_add_favorite.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.

  CLEAR: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* add job favorite
  CALL FUNCTION 'HRRCF_MDL_JOBS_FAVO_ADD'
    DESTINATION lv_rfc_dest
    EXPORTING
      pinst_guid            = iv_pint_guid
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method sc_get_verification_status.

* NOTE: This is a copy from class CL_HRRCF_M_REGISTER.

  data: lv_dest                type rfcdest,
        lv_verification_status type rcf_verification_status,
        lv_message(80)         type c.

  clear: ev_verification_status,
         et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    destination lv_dest
    exporting
      is_candidate_hrobject  = iv_candidate_hrobject
    importing
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_has_already_applied.

  data: lv_rfc_dest     type rfcdest,
        lv_message(80)  type c,
        lt_messages     type bapirettab.

  clear: es_appl_hrobject,
         ev_already_applied,
         ev_appl_status.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  call function 'HRRCF_MDL_AWZD_APPL_CHECK'
    destination lv_rfc_dest
    exporting
      cand_hrobject         = is_cand_hrobject
      pinst_guid            = iv_pinst_guid
    importing
      es_appl_hrobject      = es_appl_hrobject
      ev_appl_status        = ev_appl_status
      messages              = lt_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with rfc connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

  if ( es_appl_hrobject is not initial ) and
     ( ( ev_appl_status eq 1 ) or               " in process
       ( ev_appl_status eq 4 )         ).       " to be hired
    ev_already_applied = abap_true.
  endif.

endmethod.


method sc_is_publication_valid.

  data: lv_rfc_dest             type rfcdest,
       lv_message(80)          type c.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  call function 'HRRCF_MDL_JOBS_IS_PINST_VALID'
    destination lv_rfc_dest
    exporting
      iv_pinst_guid                  = iv_pinst_guid
      iv_check_publ_period_and_state = abap_true
      iv_check_req_state             = abap_true
    importing
      ev_is_valid                    = rv_is_valid
    exceptions
      system_failure                 = 1  message lv_message
      communication_failure          = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_jobs_favo_remove.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.

  CLEAR: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  CALL FUNCTION 'HRRCF_MDL_JOBS_FAVO_REMOVE' DESTINATION lv_rfc_dest
    EXPORTING
      pinst_guid            = iv_pinst_guid
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  CALL METHOD cl_hrrcf_m_rfc_services=>commit_and_refresh
    EXPORTING
      iv_rfc_dest = lv_rfc_dest.

ENDMETHOD.


METHOD sc_jobs_favo_retrieve.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.

  CLEAR: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  CALL FUNCTION 'HRRCF_MDL_JOBS_FAVO_RETRIEVE' DESTINATION lv_rfc_dest
    IMPORTING
      favorites             = et_jobs_favo_list
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
        EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method sc_send_to_a_friend.

  data lt_messages                 type bapirettab.
  data ls_t77rcf_mdl_prm           type t77rcf_mdl_prm.
  data lv_sender_mail              type ad_smtpadr.
  data lv_smart_form_name          type tdsfname.
  data lv_doc_type                 type so_obj_tp.
  data lv_user_id                  type bapibname-bapibname.
  data lv_rfc_dest                 type rfcdest.
  data lv_message(80)              type c.

  clear: is_mail_sent,
         messages.

**********************************************************************
* Retrieve customizing settings (mail format, sender mail address
* and smart form name
**********************************************************************

  try.
      cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch(
        exporting
          iv_param_name  = 'TF_SMARTFORM_NAME'
        importing
          et_messages    = lt_messages
          ev_param_value = ls_t77rcf_mdl_prm-value ).
      if ls_t77rcf_mdl_prm-value is not initial.
        lv_smart_form_name = ls_t77rcf_mdl_prm-value.
      else.
        lv_smart_form_name = 'HRRCF_TELL_A_FRIEND_RAW'.
      endif.
      append lines of lt_messages to messages.
    catch cx_hrrcf_customizing.
      lv_smart_form_name = 'HRRCF_TELL_A_FRIEND_RAW'.
  endtry.

  clear: lt_messages,
         ls_t77rcf_mdl_prm.

  try.
      cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch(
        exporting
          iv_param_name  = 'TF_IS_RAW_FORMAT'
        importing
          et_messages    = lt_messages
          ev_param_value = ls_t77rcf_mdl_prm-value ).
      if ls_t77rcf_mdl_prm-value is not initial.
        lv_doc_type = 'RAW'.
      else.
        lv_doc_type = 'HTM'.
      endif.
      append lines of lt_messages to messages.
    catch cx_hrrcf_customizing.
      lv_doc_type = 'RAW'.
  endtry.

  clear: lt_messages,
         ls_t77rcf_mdl_prm.

  try.
      cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch(
        exporting
          iv_param_name  = 'CAND_SERVICE_USER'
        importing
          et_messages    = lt_messages
          ev_param_value = ls_t77rcf_mdl_prm-value ).
      if ls_t77rcf_mdl_prm-value is not initial.
        lv_user_id = ls_t77rcf_mdl_prm-value.
        cl_hrrcf_services_mail=>get_mail_of_user(
          exporting
            im_user    = lv_user_id
          importing
            ex_smtpadr = lv_sender_mail ).
      endif.
      append lines of lt_messages to messages.
    catch cx_hrrcf_customizing.
*     ignore and do nothing
  endtry.

**********************************************************************
* Call function module to send mail
**********************************************************************

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

  call function 'HRRCF_MDL_JOBS_TELL_A_FRIEND'
    destination lv_rfc_dest
    exporting
      sender_full_name      = sender_full_name
      recipient_full_name   = recipient_full_name
      sender_message        = sender_message
      pinst_guid            = pinst_guid
      recipient_mail        = recipient_mail
      sender_mail           = lv_sender_mail
      doc_type              = lv_doc_type
      smart_form_name       = lv_smart_form_name
*     POSTING_HEADER        =
    importing
      is_sent               = is_mail_sent
      messages              = messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc ne 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD set_rfc_destination.

  me->gv_rfc_dest = iv_rfc_dest.

ENDMETHOD.
ENDCLASS.