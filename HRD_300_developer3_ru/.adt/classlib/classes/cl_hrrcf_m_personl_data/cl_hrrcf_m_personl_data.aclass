class CL_HRRCF_M_PERSONL_DATA definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.
*"* public components of class CL_HRRCF_M_PERSONL_DATA
*"* do not include other source files here!!!

  constants GC_DEFAULT_LINK type STRING value 'http://'. "#EC NOTEXT

  methods SC_CREATE_INTERNET_REFERENCE
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type RCF_S_MDL_CAND_INTERNET_REF
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_DELETE_INTERNET_REFERENCE
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type RCF_S_MDL_CAND_INTERNET_REF
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_CAND_DATA
    importing
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ES_PERSONAL_DATA type RCF_S_MDL_CAND_PERSONAL_DATA
      !ET_ADDRESS_DATA type RCF_T_MDL_CAND_COMMN_ADDRESS
      !ET_PHONE_DATA type RCF_T_MDL_CAND_COMMN_TELEPHONE
      !EV_PREFERRED_PHONE type RCF_COMM_CHANNEL
      !EV_PREFERRED_ADDRESS type RCF_COMM_CHANNEL
      !EV_EMAIL type AD_SMTPADR
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_FOA_SEX
    importing
      !IV_FORMOFADDRESS type AD_TITLE
    exporting
      !ET_MESSAGES type BAPIRETTAB
    changing
      !CV_SEX type BU_SEXID
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_INTERNET_REFERENCE
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
    exporting
      !ET_INTERNET_REFERENCES type RCF_T_MDL_CAND_INTERNET_REF
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_RETRIEVE_PERS_CAND_DATA
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ES_PERSONAL_DATA type RCF_S_MDL_CAND_PERSONAL_DATA
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_RETRIEVE_REGIONS
    importing
      !IV_LOCATION_SOURCE type RCF_LOC_DESIRED_SOURCE
      !IV_COUNTRY type LAND1
    exporting
      !ET_REGION type RCF_T_MDL_VH
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SAVE_CAND_DATA
    importing
      !IS_PERSONAL_DATA type RCF_S_MDL_CAND_PERSONAL_DATA
      !IS_CAND_HROBJECT type HROBJECT
      !IV_PREFERRED_PHONE_CHANNEL type RCF_COMM_CHANNEL
      !IV_PREFERRED_ADDRESS_CHANNEL type RCF_COMM_CHANNEL
      !IV_EMAIL type AD_SMTPADR
      !IT_PHONE_DATA type RCF_T_MDL_CAND_COMMN_TELEPHONE
      !IT_ADDRESS_DATA type RCF_T_MDL_CAND_COMMN_ADDRESS
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_UPDATE_INTERNET_REFERENCE
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
      !IS_INTERNET_REFERENCE type RCF_S_MDL_CAND_INTERNET_REF
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_PERSONL_DATA
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_PERSONL_DATA
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_PERSONL_DATA IMPLEMENTATION.


method sc_create_internet_reference.

  data: lv_dest           type rfcdest,
        lv_message(80)    type c.

  clear: et_messages.

  lv_dest = cl_hrrcf_wd_services=>get_bl_destination( ).
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_true
      is_hrobject                 = is_cand_hrobject
          .
  call function 'HRRCF_MDL_CAND_IREF_CREATE'
    destination lv_dest
    exporting
      is_cand_hrobject      = is_cand_hrobject
      is_record             = is_internet_reference
    importing
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_false
      is_hrobject                 = is_cand_hrobject
          .
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

endmethod.


method sc_delete_internet_reference.

  data: lv_dest           type rfcdest,
        lv_message(80)    type c.

  clear: et_messages.

  lv_dest = cl_hrrcf_wd_services=>get_bl_destination( ).
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_true
      is_hrobject                 = is_cand_hrobject
          .
  call function 'HRRCF_MDL_CAND_IREF_DELETE'
    destination lv_dest
    exporting
      is_cand_hrobject      = is_cand_hrobject
      is_record             = is_internet_reference
    importing
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_false
      is_hrobject                 = is_cand_hrobject
          .
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

endmethod.


METHOD sc_retrieve_cand_data.

  DATA: lv_dest           TYPE rfcdest,
        ls_personal_data  TYPE rcf_s_mdl_cand_personal_data,
        lt_phone_data     TYPE rcf_t_mdl_cand_commn_telephone,
        lt_address_data   TYPE rcf_t_mdl_cand_commn_address,
        lt_messages       TYPE bapirettab,
        lv_message(80)    TYPE c.

  CLEAR: et_messages, es_personal_data, et_address_data, et_phone_data,
         ev_preferred_address, ev_preferred_phone, ev_email.

  CHECK is_cand_hrobject IS NOT INITIAL.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* get personal data
  CALL FUNCTION 'HRRCF_MDL_CAND_PERS_RETRIEVE'
   DESTINATION lv_dest
   EXPORTING
*   LANGU               = SY-LANGU
     cand_hrobject       = is_cand_hrobject
   IMPORTING
     personal_data       = ls_personal_data
     messages            = lt_messages
   EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  APPEND LINES OF lt_messages TO et_messages.

* get communcation and address data
  CALL FUNCTION 'HRRCF_MDL_CAND_COMMN_RETRIEVE'
   DESTINATION lv_dest
   EXPORTING
*   LANGU                           = SY-LANGU
     cand_hrobject                   = is_cand_hrobject
   IMPORTING
     phone_data                      = et_phone_data
     address_data                    = et_address_data
     messages                        = lt_messages
     preferred_phone_channel         = ev_preferred_phone
     preferred_address_channel       = ev_preferred_address
     email                           = ev_email
   EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  APPEND LINES OF lt_messages TO et_messages.

  es_personal_data = ls_personal_data.


ENDMETHOD.


method sc_retrieve_foa_sex.

  data: lv_dest           type rfcdest,
        lv_message(80)    type c.

  clear: et_messages.

* get RFC destination
  cl_hrrcf_wd_services=>get_bl_destination(
    receiving
      rfc_dest = lv_dest ).

* retrieve the sex for the form of address
  call function 'HRRCF_MDL_CAND_PERS_CHECK'
    destination lv_dest
    exporting
      iv_formofaddress      = iv_formofaddress
    importing
      et_messages           = et_messages
    changing
      cv_sex                = cv_sex
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_internet_reference.

  data: lv_dest           type rfcdest,
        lv_message(80)    type c.

  clear: et_messages,
         et_internet_references.

  lv_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  cl_hrrcf_m_rfc_services=>reset_rfc_connection( lv_dest ).

  call function 'HRRCF_MDL_CAND_IREF_RETRIEVE'
    destination lv_dest
    exporting
*      iv_langu              = sy-langu
      is_cand_hrobject      = is_cand_hrobject
    importing
      et_records            = et_internet_references
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_retrieve_pers_cand_data.
  DATA: lv_dest           TYPE rfcdest,
        ls_personal_data  TYPE rcf_s_mdl_cand_personal_data,
        lt_messages       TYPE bapirettab,
        lv_message(80)    TYPE c.

  CLEAR: et_messages, es_personal_data.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* get personal data
  CALL FUNCTION 'HRRCF_MDL_CAND_PERS_RETRIEVE'
    DESTINATION lv_dest
    IMPORTING
      personal_data         = ls_personal_data
      messages              = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  es_personal_data = ls_personal_data.
  APPEND LINES OF lt_messages TO et_messages.

ENDMETHOD.


METHOD sc_retrieve_regions.

  DATA: lv_dest        TYPE rfcdest,
        lv_init_region TYPE rcf_mdl_vh_key,
        ls_region      TYPE rcf_s_mdl_vh,
        lv_empty_region_text TYPE string,
        lv_message(80) TYPE c.

  CLEAR: et_messages[], et_region[].

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  IF iv_location_source IS NOT INITIAL.
*   get regions of country -> restricted on branch locations
    CALL FUNCTION 'HRRCF_MDL_VH_REGION_DES_JOB'
      DESTINATION lv_dest
      EXPORTING
        country               = iv_country
      IMPORTING
        vh_region             = et_region
        messages              = et_messages
        init_region           = lv_init_region
      EXCEPTIONS
        system_failure        = 1  MESSAGE lv_message
        communication_failure = 2  MESSAGE lv_message.
  ELSE.
*   get regions of country
    CALL FUNCTION 'HRRCF_MDL_VH_REGION'
      DESTINATION lv_dest
      EXPORTING
        country               = iv_country
      IMPORTING
        vh_region             = et_region
        messages              = et_messages
        init_region           = lv_init_region
      EXCEPTIONS
        system_failure        = 1  MESSAGE lv_message
        communication_failure = 2  MESSAGE lv_message.
  ENDIF.
  IF sy-subrc NE 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

* add initial value
  SORT et_region BY value AS TEXT.

  IF et_region IS NOT INITIAL.
    IF iv_country IS NOT INITIAL.
      CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
        EXPORTING
          alias      = 'PAOC_RCF_UI_SELF_SERVICES/PLEASE_SELECT'
        RECEIVING
          alias_text = lv_empty_region_text.
      ls_region-value = lv_empty_region_text.
    ENDIF.
    ls_region-key = lv_init_region.
    INSERT ls_region INTO et_region INDEX 1.
  ENDIF.

ENDMETHOD.


METHOD sc_save_cand_data.

  DATA: lv_dest        TYPE rfcdest,
        lt_messages    TYPE bapirettab,
        ls_message     TYPE bapiret2,
        lv_message(80) TYPE c.

  CLEAR et_messages.

* retrieve rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

*  IF is_personal_data-birthdate IS NOT INITIAL.                    "N_2426414
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_true
      is_hrobject                 = is_cand_hrobject
          .

* update personal data
  CALL FUNCTION 'HRRCF_MDL_CAND_PERS_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      personal_data         = is_personal_data
      cand_hrobject         = is_cand_hrobject
    IMPORTING
      messages              = lt_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  APPEND LINES OF lt_messages TO et_messages.

* update address and communication data
  CALL FUNCTION 'HRRCF_MDL_CAND_COMMN_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      cand_hrobject             = is_cand_hrobject
      phone_data                = it_phone_data
      address_data              = it_address_data
      preferred_phone_channel   = iv_preferred_phone_channel
      preferred_address_channel = iv_preferred_address_channel
      email                     = iv_email
    IMPORTING
      messages                  = lt_messages
    EXCEPTIONS
      system_failure            = 1  MESSAGE lv_message
      communication_failure     = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  READ TABLE lt_messages TRANSPORTING NO FIELDS WITH KEY number = '219'
                                                         id = 'AM'.
  IF sy-subrc = 0.
    ls_message-id = 'HRRCF_WD_UI'.
    ls_message-number = '030'.
    ls_message-type = 'E'.
    MODIFY lt_messages FROM ls_message INDEX sy-tabix.
  ENDIF.

  APPEND LINES OF lt_messages TO et_messages.
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_false
      is_hrobject                 = is_cand_hrobject
          .
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

*  ENDIF.                                                           "N_2426414

ENDMETHOD.


method sc_update_internet_reference.

  data: lv_dest           type rfcdest,
        lv_message(80)    type c.

  clear: et_messages.

  lv_dest = cl_hrrcf_wd_services=>get_bl_destination( ).
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_true
      is_hrobject                 = is_cand_hrobject
          .
  call function 'HRRCF_MDL_CAND_IREF_UPDATE'
    destination lv_dest
    exporting
      is_cand_hrobject      = is_cand_hrobject
      is_record             = is_internet_reference
    importing
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.
  CALL FUNCTION 'HRRCF_MDL_CDCYLIST_UPDATE_SET'
   DESTINATION lv_dest
    EXPORTING
      iv_no_cdcylist_update       = abap_false
      is_hrobject                 = is_cand_hrobject
          .
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

endmethod.
ENDCLASS.