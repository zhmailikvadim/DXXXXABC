class CL_HRRCF_M_QUALIS definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

*"* public components of class CL_HRRCF_M_QUALIS
*"* do not include other source files here!!!
public section.

  methods RETRIEVE_RFC_DESTINATION .
  methods SC_CHECK_CANDIDATE_QUALI
    importing
      !IS_QUALIFICATION type RCF_S_MDL_CAND_QUALIFICATION
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_COMMIT_AND_REFRESH
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_CREATE_CANDIDATE_QUALI
    importing
      !IS_QUALIFICATION type RCF_S_MDL_CAND_QUALIFICATION
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_DELETE_CANDIDATE_QUALI
    importing
      !IS_QUALIFICATION type RCF_S_MDL_CAND_QUALIFICATION
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_CANDIDATE_QUALIS
    importing
      !IV_LANGU type SPRAS default SY-LANGU
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_CAND_QUALIFICATIONS type RCF_T_MDL_CAND_QUALIFICATION
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_PROFICIENCIES
    importing
      !IV_QUALI_GROUP_ID type RCF_Q_ID
      !IV_READ_STRING type BOOLE_D optional
      !IV_READ_DESC_BE type BOOLE_D optional
      !IV_LANGU type SPRAS default SY-LANGU
    exporting
      !ET_PROFICIENCIES type RCF_T_MDL_PROFICIENCY_VH
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_QUALIFICATIONS
    importing
      !IV_QUALI_GROUP_ID type RCF_Q_ID
      !IV_READ_STRING type BOOLE_D optional
      !IV_READ_DESC_BE type BOOLE_D optional
      !IV_LANGU type SPRAS default SY-LANGU
    exporting
      !ET_QUALIFICATIONS type RCF_T_MDL_QUALIFICATION_VH
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_QUALI_GROUPS
    importing
      !IV_READ_STRING type BOOLE_D optional
      !IV_READ_DESC_BE type BOOLE_D optional
      !IV_LANGU type SPRAS default SY-LANGU
    exporting
      !ET_QUALIFICATION_GROUPS type RCF_T_MDL_QUALIFICATION_VH
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_UPDATE_CANDIDATE_QUALI
    importing
      !IS_QUALIFICATION type RCF_S_MDL_CAND_QUALIFICATION
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_QUALIS
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_QUALIS
*"* do not include other source files here!!!

  data GV_RFC_DEST type RFCDEST .

  methods GET_RFC_DESTINATION
    returning
      value(RV_RFC_DEST) type RFCDEST .
  methods SET_RFC_DESTINATION
    importing
      !IV_RFC_DEST type RFCDEST .
ENDCLASS.



CLASS CL_HRRCF_M_QUALIS IMPLEMENTATION.


method get_rfc_destination.

  rv_rfc_dest = me->gv_rfc_dest.

endmethod.


method retrieve_rfc_destination.

  data: lv_rfc_dest type rfcdest.

* retrieve the RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* set the RFC destination
  me->set_rfc_destination( lv_rfc_dest ).

endmethod.


method sc_check_candidate_quali.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* check a qualification of the candidate
  call function 'HRRCF_MDL_CAND_QUALI_CHECK'
    destination lv_rfc_dest
    exporting
      record                = is_qualification
      cand_hrobject         = is_cand_hrobject
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_commit_and_refresh.

  data: lv_rfc_dest             type rfcdest.

  lv_rfc_dest = me->get_rfc_destination( ).
  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_rfc_dest ).

endmethod.


method sc_create_candidate_quali.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* create a new qualification for the candidate
  call function 'HRRCF_MDL_CAND_QUALI_CREATE'
    destination lv_rfc_dest
    exporting
      record                = is_qualification
      cand_hrobject         = is_cand_hrobject
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_delete_candidate_quali.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* delete a qualification of the candidate
  call function 'HRRCF_MDL_CAND_QUALI_DELETE'
    destination lv_rfc_dest
    exporting
      record                = is_qualification
      cand_hrobject         = is_cand_hrobject
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_candidate_qualis.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_cand_qualifications,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* close rfc connection for destroying buffer
  cl_hrrcf_m_rfc_services=>reset_rfc_connection( lv_rfc_dest ).

* get the candidate's qualifications
  CALL FUNCTION 'HRRCF_MDL_CAND_QUALI_RETRIEVE'
    destination lv_rfc_dest
    exporting
      langu                 = iv_langu
      cand_hrobject         = is_cand_hrobject
    importing
      records               = et_cand_qualifications
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_proficiencies.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_proficiencies,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* get the proficiencies of the specified qualification group
  call function 'HRRCF_MDL_VH_PROFICIENCY'
    destination lv_rfc_dest
    exporting
      langu                 = iv_langu
      quali_group           = iv_quali_group_id
      read_desc_be          = iv_read_desc_be
      read_string           = iv_read_string
    importing
      vh_proficiency        = et_proficiencies
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_qualifications.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_qualifications,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* get the qualifications of the specified qualification group
  call function 'HRRCF_MDL_VH_QUALIFICATION'
    destination lv_rfc_dest
    exporting
      langu                 = iv_langu
      quali_group           = iv_quali_group_id
      read_desc_be          = iv_read_desc_be
      read_string           = iv_read_string
    importing
      vh_qualification      = et_qualifications
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_quali_groups.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_qualification_groups,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* get all qualification groups
  call function 'HRRCF_MDL_VH_QUALI_GROUP'
    destination lv_rfc_dest
    exporting
      langu                 = iv_langu
      read_desc_be          = iv_read_desc_be
      read_string           = iv_read_string
    importing
      vh_quali_group        = et_qualification_groups
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_update_candidate_quali.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* update an existing qualification of the candidate
  call function 'HRRCF_MDL_CAND_QUALI_UPDATE'
    destination lv_rfc_dest
    exporting
      record                = is_qualification
      cand_hrobject         = is_cand_hrobject
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method set_rfc_destination.

  me->gv_rfc_dest = iv_rfc_dest.

endmethod.
ENDCLASS.