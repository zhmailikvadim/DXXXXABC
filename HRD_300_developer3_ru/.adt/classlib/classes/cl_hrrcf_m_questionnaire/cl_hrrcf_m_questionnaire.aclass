class CL_HRRCF_M_QUESTIONNAIRE definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

*"* public components of class CL_HRRCF_M_QUESTIONNAIRE
*"* do not include other source files here!!!
public section.

  data GO_TABLE_HANDLER type ref to IF_WD_TABLE_METHOD_HNDL .

  class-methods GET_QUESTIONNAIRES
    importing
      !IS_CDCY_HROBJECT type HROBJECT
      !IV_USER type XUBNAME default SY-UNAME
    exporting
      !ET_MESSAGE type BAPIRETTAB
      !ET_QUESTIONNAIRE type RCF_T_WD_QUESTIONNAIRE
    raising
      CX_HRRCF .
  class-methods GET_ADMIN_CONTEXT
    importing
      !IS_CDCY_HROBJECT type HROBJECT
    exporting
      !EV_CAND_NAME type BU_NAME1TX
      !ES_REQ_HROBJECT type HROBJECT
      !EV_REQ_TITLE type RCF_REQUISITION_HEADER
    raising
      CX_HRRCF .
  class-methods GET_NOTE
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ET_MESSAGE type BAPIRETTAB
      !EV_NOTE_TXT type RCF_ITF_DESCRIPTION .
  class-methods GET_ATTACHMENTS
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
      !IV_SUBTYPE type SUBTYP
    exporting
      !ET_ATTACHMENTS type RCF_T_ATTACHMENTS_COPY
      !ET_MESSAGE type BAPIRETTAB .
  class-methods GET_ATTACHMENT_CONTENT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
      !IV_SUBTYPE type SUBTY
      !IS_ATTACHMENT_DETAILS type RCF_S_ATTACHMENTS_COPY
    exporting
      !EV_DOCUMENT type XSTRING
      !ET_MESSAGE type BAPIRETTAB
      !EV_ATTACH_DESCRIPTION type SDOK_TITEL .
  class-methods IS_RIGHT_CANDIDATE
    importing
      !IV_UNAME type SYUNAME default SY-UNAME
      !IV_ACTGUID type RCF_QA_DOC_GUID
    exporting
      !EV_IS_RIGHT_CAND type BOOLE_D
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods CONVERT_STRING_TO_255
    importing
      !IV_STRING type STRING
    exporting
      !ET_STRING_255 type RCF_T_ANSWER_BL .
protected section.
*"* protected components of class CL_HRRCF_M_QA_MSS
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_QUESTIONNAIRE
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_QUESTIONNAIRE IMPLEMENTATION.


method CONVERT_STRING_TO_255.
"N_2523423

  DATA: lt_txt_tab TYPE TABLE OF char255,
        ls_txt     TYPE char255,
        ls_str_255 LIKE LINE OF et_string_255.

""" convert to text table of 255 chars; keeping the words
CALL METHOD cl_hrrcf_cs_sf=>convert_string_to_texttable
  EXPORTING
    p_string    = iv_string
  CHANGING
    p_texttable = lt_txt_tab
  .

  LOOP AT lt_txt_tab INTO ls_txt.
    IF sy-tabix = 1.
      ls_str_255-raw_type = ''.         "New paragraph
    ELSE.
      ls_str_255-raw_type = 'L'.        "Line only
    ENDIF.
    ls_str_255-answer = ls_txt.
    APPEND ls_str_255 TO et_string_255.
    CLEAR ls_str_255.
  ENDLOOP.

endmethod.


METHOD get_admin_context.

  DATA: lo_cdcy_bl          TYPE REF TO cl_hrrcf_candidacy_bl,
        ls_requisition_info TYPE p5125.


  lo_cdcy_bl = cl_hrrcf_candidacy_bl=>get_instance( ).

  IF ev_cand_name IS SUPPLIED.
    CALL METHOD lo_cdcy_bl->get_candidate
      EXPORTING
        ps_cdcy_hrobject = is_cdcy_hrobject
      IMPORTING
        p_cand_name      = ev_cand_name.
  ENDIF.

  IF es_req_hrobject IS SUPPLIED OR
     ev_req_title IS SUPPLIED.
    CALL METHOD lo_cdcy_bl->get_requisition_info
      EXPORTING
        ps_cdcy_hrobject    = is_cdcy_hrobject
      IMPORTING
        ps_requisition_info = ls_requisition_info.

    ev_req_title = ls_requisition_info-header.
    es_req_hrobject-plvar = ls_requisition_info-plvar.
    es_req_hrobject-otype = ls_requisition_info-otype.
    es_req_hrobject-objid = ls_requisition_info-objid.

  ENDIF.

ENDMETHOD.


METHOD get_attachments.

  DATA:  lo_activity        TYPE REF TO cl_hrrcf_abstract_activity_rec,
         lo_att             TYPE REF TO cl_hrrcf_attachments,
         lo_ex              TYPE REF TO cx_hrrcf,
         lt_attachments     TYPE        rcf_t_attachments_text_url,
         ls_attachments     TYPE        rcf_s_attachments_text_url,
         ls_attachemnt_copy TYPE        rcf_s_attachments_copy,
         ls_message         TYPE        bapiret2.

  CLEAR: lt_attachments,
         et_attachments.

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      IF lo_activity IS BOUND.

        CALL METHOD lo_activity->get_attachments
          EXPORTING
            attachment_subtype   = iv_subtype
          IMPORTING
            attachments_text_url = lt_attachments.

        IF iv_subtype = '0006'.

          CALL METHOD lo_activity->get_attachments
            EXPORTING
              attachment_subtype   = '0005'
            IMPORTING
              attachments_text_url = lt_attachments.

        ENDIF.

        CALL METHOD cl_hrrcf_attachments=>get_instance
          EXPORTING
            hrobject = lo_activity->hrobject
          IMPORTING
            instance = lo_att.

        LOOP AT lt_attachments INTO ls_attachments.

          CLEAR : ls_attachemnt_copy.

          CALL METHOD lo_att->read_attachment
            EXPORTING
              attachment_record = ls_attachments-p5134
            IMPORTING
              attachment_mime   = ls_attachemnt_copy-mimetype.

          MOVE-CORRESPONDING ls_attachments TO ls_attachemnt_copy.
          APPEND ls_attachemnt_copy TO et_attachments.

        ENDLOOP.

      ENDIF.

    CATCH cx_hrrcf INTO lo_ex.

*     write exception to slg1
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

*--   Convert exception into BAPI return parameter
      IF 1 = 0.
        MESSAGE e001(hrrcf0005).
      ENDIF.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0005'
          number = '001'
        IMPORTING
          return = ls_message.

      REFRESH et_message.
      APPEND ls_message TO et_message.

  ENDTRY.

ENDMETHOD.


METHOD get_attachment_content.

  DATA: lo_activity    TYPE REF TO cl_hrrcf_abstract_activity_rec,
        lo_att         TYPE REF TO cl_hrrcf_attachments,
        lo_ex          TYPE REF TO cx_hrrcf,
        lo_ex_i        TYPE REF TO cx_hrrcf_infotype_operation,
        lt_attachments TYPE        rcf_t_attachments_text_url,
        ls_attachments TYPE        rcf_s_attachments_text_url,
        ls_message     TYPE        bapiret2.

  TRY.

      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
        IMPORTING
          activity = lo_activity.

      CALL METHOD cl_hrrcf_attachments=>get_instance
        EXPORTING
          hrobject = lo_activity->hrobject
        IMPORTING
          instance = lo_att.

      CALL METHOD lo_activity->get_attachments
        EXPORTING
          attachment_subtype   = iv_subtype
        IMPORTING
          attachments_text_url = lt_attachments.

* Replace only the changed details
      READ TABLE lt_attachments INTO ls_attachments WITH KEY attachment = is_attachment_details-attachment.
      MOVE-CORRESPONDING is_attachment_details TO ls_attachments.

      CALL METHOD lo_att->read_attachment
        EXPORTING
          attachment_record      = ls_attachments-p5134
        IMPORTING
          attachment_content     = ev_document
          attachment_description = ev_attach_description.

    CATCH cx_hrrcf_infotype_operation INTO lo_ex_i.

*     write exception to slg1
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex_i ).

*--   Convert exception into BAPI return parameter
      IF 1 = 0.
        MESSAGE e001(hrrcf0005).
      ENDIF.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0005'
          number = '001'
        IMPORTING
          return = ls_message.

      REFRESH et_message.
      APPEND ls_message TO et_message.

    CATCH cx_hrrcf INTO lo_ex.

*     write exception to slg1
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

*--   Convert exception into BAPI return parameter
      IF 1 = 0.
        MESSAGE e001(hrrcf0005).
      ENDIF.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0005'
          number = '001'
        IMPORTING
          return = ls_message.

      REFRESH et_message.
      APPEND ls_message TO et_message.

  ENDTRY.

ENDMETHOD.


METHOD get_note.

  DATA: lo_activity  TYPE REF TO cl_hrrcf_abstract_activity_rec,
        lo_ex        TYPE REF TO cx_root,
        ls_record    TYPE        rcf_s_qa_activity_txt,
        ls_return    TYPE        bapiret2.

  CLEAR : ev_note_txt.

  TRY.
      CALL METHOD cl_hrrcf_activity_factory=>get_activity_by_guid
        EXPORTING
          act_guid = iv_act_guid
          act_cat  = '07'
        IMPORTING
          activity = lo_activity.

      CALL METHOD lo_activity->get_record_with_text
        EXPORTING
          p_changed_by_not_requested = abap_false
          p_creator_not_requested    = abap_false
        IMPORTING
          record                     = ls_record.

      IF NOT ls_record-note IS INITIAL.
        CALL METHOD lo_activity->read_text
          IMPORTING
            text = ev_note_txt.
      ENDIF.

    CATCH cx_root INTO lo_ex. "#EC CATCH_ALL
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).
      IF 1 = 0.
        MESSAGE e100(hrrcf0005).
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0005'
          number = '100'
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_message.
  ENDTRY.

ENDMETHOD.


METHOD get_questionnaires.

  DATA: lt_qa_activity TYPE rcf_t_qa_activity_txt,
        ls_qa_activity TYPE rcf_s_qa_activity_txt,
        ls_questionnaire TYPE rcf_s_wd_questionnaire,
        lv_name          TYPE bu_name1tx.

* get questionnaires for candidacy
  CALL METHOD cl_hrrcf_qa_bl=>get_activities_txt
    EXPORTING
      ps_hrobject        = is_cdcy_hrobject
      p_res_user         = iv_user
      p_qa_type          = 'J'
      p_check_status     = 'X'
    IMPORTING
      pt_qa_activity_txt = lt_qa_activity.

  LOOP AT lt_qa_activity INTO ls_qa_activity.
    MOVE-CORRESPONDING ls_qa_activity TO ls_questionnaire.
    ls_questionnaire-cdcy_hrobject = is_cdcy_hrobject.

    TRY.
        CALL METHOD cl_hrrcf_m_questionnaire=>get_admin_context
          EXPORTING
            is_cdcy_hrobject = is_cdcy_hrobject
          IMPORTING
            ev_cand_name     = lv_name.
      CATCH cx_hrrcf .
        CLEAR lv_name.
    ENDTRY.

    ls_questionnaire-cand_name = lv_name.
    APPEND ls_questionnaire TO et_questionnaire.
  ENDLOOP.

ENDMETHOD.


METHOD is_right_candidate.

  DATA: lv_dest        TYPE rfcdest.


* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.


  CALL FUNCTION 'HRRCF_MDL_ACT_IS_RIGHT_CAND'
    DESTINATION lv_dest
    EXPORTING
      iv_uname              = iv_uname
      iv_actguid            = iv_actguid
    IMPORTING
      ev_is_right_cand      = ev_is_right_cand
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.


  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.
ENDCLASS.