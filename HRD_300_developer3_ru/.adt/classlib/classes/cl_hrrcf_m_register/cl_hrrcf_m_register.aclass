class CL_HRRCF_M_REGISTER definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

*"* public components of class CL_HRRCF_M_REGISTER
*"* do not include other source files here!!!
  class-methods CREATE_LOCAL_USER
    importing
      !IV_DEST type RFCDEST
      !IV_USER type XUBNAME
      !IS_REGISTER_RECORD type RCF_S_MDL_REG_REGISTER_USER
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_REGISTRATION
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_ANOTHER_REQUEST_ALLOWED
    importing
      !IS_CANDIDATE_HROBJECT type HROBJECT
    exporting
      !EV_REQUEST_ALLOWED type BOOLE_D
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_CHECK_VERIF_LINK_VALID
    importing
      !IV_CORR_ACT_GUID type RCF_ACT_GUID
    exporting
      !EV_LINK_IS_VALID type WDY_BOOLEAN
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_GET_NO_OF_DRAFT_APPLS
    importing
      !IS_CANDIDATE_HROBJECT type HROBJECT
    exporting
      !EV_NO_OF_APPLICATIONS type I
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_GET_PRIVACY_URL
    returning
      value(RV_URL) type STRING
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_VERIFICATION_STATUS
    importing
      !IS_CANDIDATE_HROBJECT type HROBJECT
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_REGISTER
    importing
      !IS_REGISTER_RECORD type RCF_S_MDL_REG_REGISTER_USER
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION
      CX_HRRCF_REGISTRATION .
  methods SC_SEND_APPLICATION
    importing
      !IS_APPLICATION_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SEND_NEW_VERIFICATION_LINK
    importing
      !IS_CANDIDATE_HROBJECT type HROBJECT
      !IV_APPL_EXISTS type BOOLE_D
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SET_VERIFICATION_STATUS
    importing
      !IS_CANDIDATE_HROBJECT type HROBJECT
      !IV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_CHECK_AUTHENTICATION
    importing
      !IS_CAND_OBJECT type HROBJECT
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !EV_AUTHORIZED type BOOLE_D
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_SEND_VERIFICATION_CODE
    importing
      !IV_EMAIL_ADDRESS type AD_SMTPADR
      !IV_FULLNAME type BU_NAME1TX
      !IV_VERIF_CODE type HRRCF_EMAIL_VERIF_CODE optional
    exporting
      !ET_MESSAGE type BAPIRETTAB
      !EV_VERIF_DETAILS type RCF_S_EMAIL_VERIF_CODE
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_CHECK_VERIFICATION_CODE
    importing
      !IV_EMAIL_ADDRESS type AD_SMTPADR
      !IV_VERIF_CODE type HRRCF_EMAIL_VERIF_CODE optional
    exporting
      !ET_MESSAGE type BAPIRETTAB
      !EV_VERIFIED type WDY_BOOLEAN
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_CHECK_BEFORE_VERIF_CODE
    importing
      !IV_EMAIL_ADDRESS type AD_SMTPADR
    exporting
      !ET_MESSAGE type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_DEL_VERIFICATION_CODE
    importing
      !IV_VERIF_CODE type HRRCF_EMAIL_VERIF_CODE
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_CREATE_ATTACHMENT
    importing
      !IS_ATTACHMENT type RCF_S_MDL_CAND_ATTACHMENT
      !IS_CONTENT type RCF_ATTACHMENT_CONTENT
      !IV_FILENAME type STRING
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ES_RESULT type P5134
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_GET_CANDIDATE
    importing
      !IV_USER type XUBNAME
    exporting
      !ES_CANDIDATE type HROBJECT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_GET_PRIVACY_VERSION
    returning
      value(P_VERSION) type RCF_PRIVACY_VER .
protected section.
*"* protected components of class CL_HRRCF_M_REGISTER
*"* do not include other source files here!!!
private section.

  class-data PRIVACY_VERSION type RCF_PRIVACY_VER .
*"* private components of class CL_HRRCF_M_REGISTER
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_REGISTER IMPLEMENTATION.


METHOD create_local_user.

  DATA: ls_t77rcf_role TYPE t77rcf_role,
        lv_ref_user    TYPE xubname,
        ls_ref_user    TYPE bapirefus,
        ls_logondata   TYPE bapilogond,
        ls_logondatax  TYPE bapilogonx,
        ls_passwordx   TYPE bapipwdx,
        ls_defaults    TYPE bapidefaul,
        ls_defaultsx   TYPE bapidefax,
        ls_address     TYPE bapiaddr3,
        lt_return      TYPE bapirettab,
        ls_refuserx    TYPE bapirefusx,
        ls_aliasx      TYPE bapialiasx,
        ls_addressx    TYPE bapiaddr3x.
  DATA: lo_exception   TYPE REF TO cx_hrrcf_customizing.

  TRY.
      CALL METHOD cl_hrrcf_t77rcf_role=>get_role
        EXPORTING
          role        = cl_hrrcf_wd_ui_constants=>gc_role_external_cand
        IMPORTING
          t77rcf_role = ls_t77rcf_role.

      lv_ref_user = ls_t77rcf_role-refus.

    CATCH cx_hrrcf_customizing INTO lo_exception.
      RAISE EXCEPTION TYPE cx_hrrcf_registration
        EXPORTING previous = lo_exception.
  ENDTRY.

  IF lv_ref_user IS INITIAL.
*   error handling: no ref user maintained


  ENDIF.
  ls_ref_user-ref_user = lv_ref_user.

* retrieve defaults from bl server
  CALL FUNCTION 'BAPI_USER_GET_DETAIL'
    DESTINATION iv_dest
    EXPORTING
      username              = iv_user
    IMPORTING
      logondata             = ls_logondata
      defaults              = ls_defaults
      address               = ls_address
    TABLES
      return                = lt_return
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.

  IF sy-subrc NE 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  APPEND LINES OF lt_return TO et_messages.

* check existence of user in UI system
  CALL FUNCTION 'SUSR_USER_CHECK_EXISTENCE'
    EXPORTING
      user_name            = iv_user
    EXCEPTIONS
      user_name_not_exists = 1
      OTHERS               = 2.
  CASE sy-subrc.
    WHEN 0.
*     update local user
      ls_refuserx-ref_user = abap_true.
      ls_aliasx-bapialias = abap_true.
      ls_passwordx-bapipwd = abap_true.

*     logon data
      ls_logondatax-gltgv = abap_true.
      ls_logondatax-gltgb = abap_true.
      ls_logondatax-ustyp = abap_true.
      ls_logondatax-class = abap_true.
      ls_logondatax-accnt = abap_true.
      ls_logondatax-tzone = abap_true.
      ls_logondatax-ltime = abap_true.
      ls_logondatax-bcode = abap_true.
      ls_logondatax-codvn = abap_true.
      ls_logondatax-passcode = abap_true.
      ls_logondatax-codvc = abap_true.

*     address
      ls_address-firstname = is_register_record-firstname.
      ls_addressx-firstname = abap_true.
      ls_address-lastname = is_register_record-lastname.
      ls_addressx-lastname = abap_true.
      ls_address-middlename = is_register_record-middlename.
      ls_addressx-middlename = abap_true.
      ls_address-e_mail = is_register_record-e_mail.
      ls_addressx-e_mail = abap_true.

*     default values
      ls_defaultsx-datfm = abap_true.
      ls_defaultsx-dcpfm = abap_true.
      ls_defaultsx-langu = abap_true.

      CALL FUNCTION 'SUSR_BAPI_USER_CHANGE'
        EXPORTING
          username   = iv_user
          logondata  = ls_logondata
          logondatax = ls_logondatax
          password   = is_register_record-password
          passwordx  = ls_passwordx
          defaults   = ls_defaults
          defaultsx  = ls_defaultsx
          address    = ls_address
          addressx   = ls_addressx
          ref_user   = ls_ref_user
          ref_userx  = ls_refuserx
          alias      = is_register_record-alias
          aliasx     = ls_aliasx
        TABLES
          return     = lt_return.
      APPEND LINES OF lt_return TO et_messages.

    WHEN 1.
* create local user
      CALL FUNCTION 'SUSR_BAPI_USER_CREATE'
        EXPORTING
          username      = iv_user
          logondata     = ls_logondata
          password      = is_register_record-password
          alias         = is_register_record-alias
          defaults      = ls_defaults
          address       = ls_address
          ref_user      = ls_ref_user
          self_register = abap_true
        TABLES
          return        = lt_return.
      APPEND LINES OF lt_return TO et_messages.

    WHEN OTHERS.
*     unexpected situation: raise dump
      RAISE EXCEPTION TYPE cx_hrrcf_registration.
  ENDCASE.

ENDMETHOD.


METHOD sc_another_request_allowed.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

  CLEAR: ev_request_allowed, et_messages.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_VERIF_REQUEST_ALLOWD'
    DESTINATION lv_dest
    EXPORTING
      is_candidate_hrobject = is_candidate_hrobject
      iv_no_user_check      = abap_true
    IMPORTING
      ev_request_allowed    = ev_request_allowed
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method SC_CHECK_AUTHENTICATION.
"N_2507798
  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c,
        lv_user        TYPE syuname.

  CLEAR: ev_authorized.

  IF is_cand_object IS INITIAL
  OR iv_act_guid IS INITIAL.
      RETURN.
  ENDIF.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  """ Get user name from the candidate object ID
  CALL FUNCTION 'HRRCF_MDL_CANDT_USER_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      is_cand_hrobject      = is_cand_object
    IMPORTING
      ev_user               = lv_user
    EXCEPTIONS
      failed                = 1
      system_failure        = 2  MESSAGE lv_message
      communication_failure = 3  MESSAGE lv_message.
  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1.
        RETURN.
      WHEN 2.
        """   problem with rfc connection
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        """   problem with rfc connection
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  IF lv_user IS INITIAL.
    RETURN.
  ENDIF.

  """ ACT GUID should match with the requested user ID
  CALL FUNCTION 'HRRCF_MDL_ACT_IS_RIGHT_CAND'
    DESTINATION lv_dest
    EXPORTING
      iv_uname         = lv_user
      iv_actguid       = iv_act_guid
    IMPORTING
      ev_is_right_cand = ev_authorized
     EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1.
        """   problem with rfc connection
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        """   problem with rfc connection
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


method SC_CHECK_BEFORE_VERIF_CODE.
"N_2532943

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CLEAR et_message.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CHECK_BEFORE_V_CODE'
    DESTINATION lv_dest
    EXPORTING
      iv_email_address      = iv_email_address
    IMPORTING
      et_messages           = et_message
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


method SC_CHECK_VERIFICATION_CODE.
"N_2532943

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CLEAR et_message.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CHECK_VERIF_CODE'
    DESTINATION lv_dest
    EXPORTING
      iv_email_address      = iv_email_address
      iv_verif_code         = iv_verif_code
    IMPORTING
      et_messages           = et_message
      ev_verified           = ev_verified
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


METHOD sc_check_verif_link_valid.

  DATA: lv_dest                 TYPE        rfcdest,
        lv_message(80)          TYPE        c.

  CLEAR: ev_link_is_valid, et_messages.

* Get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* Determine whether the verification link is still valid by comparing the activity's BEGDA + the validity period (in days) with today
  CALL FUNCTION 'HRRCF_MDL_VERIF_LINK_VALID'
    DESTINATION lv_dest
    EXPORTING
      iv_corr_act_guid      = iv_corr_act_guid
    IMPORTING
      ev_verif_link_valid   = ev_link_is_valid
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_create_attachment.

  DATA: lv_dest        TYPE rfcdest,
         lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_ATT_CREATE'
    DESTINATION lv_dest
    EXPORTING
      record                = is_attachment
      cand_hrobject         = is_cand_hrobject
      content               = is_content
      filename              = iv_filename
    IMPORTING
      messages              = et_messages
      result                = es_result
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


method SC_DEL_VERIFICATION_CODE.
"N_2532943

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CHECK_VERIF_CODE'
    DESTINATION lv_dest
    EXPORTING
      iv_verif_code         = iv_verif_code
      iv_verif_code_del     = 'X'
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


method SC_GET_CANDIDATE.
"N_2532943

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_ADMN_CAND_RETRIEVE'
  DESTINATION lv_dest
    EXPORTING
      iv_user          = iv_user
    IMPORTING
      ev_cand_hrobject = es_candidate
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
    .

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


METHOD sc_get_no_of_draft_appls.

  DATA: lv_rfc_dest     TYPE rfcdest,
        lv_message(80)  TYPE c,
        lt_applications TYPE rcf_t_mdl_jobs_applications.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_rfc_dest.

  CALL FUNCTION 'HRRCF_MDL_JOBS_APPL_RET_NO_CHK'
    DESTINATION lv_rfc_dest
    EXPORTING
      is_candidate_hrobject = is_candidate_hrobject
    IMPORTING
      et_applications       = lt_applications
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

* Usually only one application should exist but it might happen that an unverified candidate
* creates more applications before verifying his/her email address
* There should only be applications in status "Draft" but to be on the save side...
  DELETE lt_applications WHERE application_status NE 0.

  DESCRIBE TABLE lt_applications LINES ev_no_of_applications.
ENDMETHOD.


METHOD sc_get_privacy_url.

  DATA: lv_dest        TYPE rfcdest,
        lv_url         TYPE rcf_mdl_url,
        lv_message(80) TYPE c.

  CLEAR rv_url.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_UIS_PRV_LNK_RETRIEVE'
    DESTINATION lv_dest
    IMPORTING
      privacy_url           = lv_url
      privacy_version       = privacy_version
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.
  rv_url = lv_url.

ENDMETHOD.


METHOD sc_get_privacy_version.
  p_version = privacy_version.
ENDMETHOD.


METHOD sc_get_verification_status.

  DATA: lv_dest                TYPE rfcdest,
        lv_verification_status TYPE rcf_verification_status,
        lv_message(80)         TYPE c.

  CLEAR: ev_verification_status,
         et_messages.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      is_candidate_hrobject  = is_candidate_hrobject
    IMPORTING
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    EXCEPTIONS
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD sc_register.

  CALL METHOD cl_hrrcf_m_user=>register
    EXPORTING
      is_register_record = is_register_record
    IMPORTING
      et_messages        = et_messages.

ENDMETHOD.


METHOD sc_send_application.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_AWZD_APPL_SUBMIT'
    DESTINATION lv_dest
    EXPORTING
      appl_hrobject         = is_application_hrobject
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_send_new_verification_link.
* This method calls the RFC function module

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CLEAR et_messages.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_VERIF_MAIL_SEND'
    DESTINATION lv_dest
    EXPORTING
      is_candidate_hrobject = is_candidate_hrobject
      iv_appl_exists        = iv_appl_exists
      iv_no_user_check      = abap_true
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method SC_SEND_VERIFICATION_CODE.
"N_2532943

  DATA: lv_dest                TYPE rfcdest,
        lv_message(80)         TYPE c.

  CLEAR et_message.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_VERIF_CODE_SEND'
    DESTINATION lv_dest
    EXPORTING
      iv_email_address      = iv_email_address
      iv_fullname           = iv_fullname
      iv_verif_code         = iv_verif_code
    IMPORTING
      et_messages           = et_message
      ev_verif_details      = ev_verif_details
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

endmethod.


METHOD sc_set_verification_status.

  DATA: lv_dest                TYPE rfcdest,
        lv_verification_status TYPE rcf_verification_status,
        lv_message(80)         TYPE c.

  CLEAR et_messages.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_VERIF_STAT_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      is_candidate_hrobject  = is_candidate_hrobject
      iv_verification_status = iv_verification_status
    IMPORTING
      et_messages            = et_messages
    EXCEPTIONS
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.
ENDCLASS.