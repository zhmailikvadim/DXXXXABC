class CL_HRRCF_M_RESUMES definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

*"* public components of class CL_HRRCF_M_RESUMES
*"* do not include other source files here!!!
public section.

  data ATTACHMENT type ref to CL_HRRCF_M_ATTACHMENTS .

  methods CONSTRUCTOR .
  methods SC_RETRIEVE_RESUMES
    importing
      !IS_CAND_HROBJECT type HROBJECT optional
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ET_RESUMES type RCF_T_MDL_CAND_RSM_ATTACHMENT
    raising
      CX_HRRCF_RFC_COMMUNICATION
      CX_HRRCF_CUSTOMIZING .
  methods SC_CREATE_RESUME
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IS_RESUME type RCF_S_MDL_CAND_ATTACHMENT
      !IS_CONTENT type RCF_ATTACHMENT_CONTENT
      !IV_FILENAME type STRING
    exporting
      !ES_RESUME type P5134
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_DELETE_RESUME
    importing
      !IS_RESUME type RCF_S_MDL_CAND_ATTACHMENT
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_UPDATE_RESUME
    importing
      !IS_CAND_HROBJECT type HROBJECT
      !IS_RESUME type RCF_S_MDL_CAND_ATTACHMENT
      !IS_CONTENT type RCF_ATTACHMENT_CONTENT
      !IV_FILENAME type STRING
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_PARSE_RESUME
    importing
      !IS_RESUME type RCF_S_MDL_CAND_ATTACHMENT
    exporting
      !EV_ACT_GUID type RCF_ACT_GUID
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_PROFILE_UPDATE
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_UPDATE_CANCEL
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_PDF_CONTENT
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    exporting
      !EV_PDF_CONTENT type XSTRING
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_GET_CAND_HROBJECT
    importing
      !IV_USER type XUBNAME
    returning
      value(RS_HROBJECT) type HROBJECT
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_ATTACHMENTS
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_RESUMES
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_RESUMES IMPLEMENTATION.


method CONSTRUCTOR.
  super->constructor( ).
  create object attachment.
endmethod.


METHOD sc_create_resume.
  CALL METHOD attachment->sc_create_attachment
    EXPORTING
      is_cand_hrobject = is_cand_hrobject
      is_attachment    = is_resume
      is_content       = is_content
      iv_filename      = iv_filename
    IMPORTING
      es_result        = es_resume
      et_messages      = et_messages.
ENDMETHOD.


METHOD sc_delete_resume.

  DATA: lv_dest        TYPE rfcdest,
        ls_resume      TYPE p5134,
        lv_message(80) TYPE c.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* call RFC to delete resume
  CALL FUNCTION 'HRRCF_MDL_ACT_PARS_DELETE'
    DESTINATION lv_dest
    EXPORTING
      is_resume_record      = is_resume
    IMPORTING
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


method SC_GET_CAND_HROBJECT.

  DATA: lv_dest          TYPE rfcdest,
        ls_cand_hrobject TYPE hrobject,
        lv_message(80)   TYPE c.

* get rfc connection
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* determine candidate object for user
  CALL FUNCTION 'HRRCF_MDL_ADMN_CAND_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      iv_user               = iv_user
    IMPORTING
      ev_cand_hrobject      = ls_cand_hrobject
    EXCEPTIONS
      failed                = 1
      system_failure        = 2  MESSAGE lv_message
      communication_failure = 3  MESSAGE lv_message
      others                = 4.

  IF sy-subrc <> 0.
    CASE sy-subrc.
      WHEN 1 OR 4.
*      todo: error handling
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 3.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  rs_hrobject = ls_cand_hrobject.

endmethod.


METHOD sc_parse_resume.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* call RFC for parsing service
  CALL FUNCTION 'HRRCF_MDL_ACT_PARS_RESUME'
    DESTINATION lv_dest
    EXPORTING
      is_resume_record      = is_resume
    IMPORTING
      ev_act_guid           = ev_act_guid
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.


  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_profile_update.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* call RFC for profile update
  CALL FUNCTION 'HRRCF_MDL_ACT_PARS_PROF_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      iv_act_guid           = iv_act_guid
    IMPORTING
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.


  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_retrieve_pdf_content.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* call RFC to get form content of either PDF or Smartform
  CALL FUNCTION 'HRRCF_MDL_ACT_PARS_SHOW_DATA'
    DESTINATION lv_dest
    EXPORTING
      iv_act_guid           = iv_act_guid
    IMPORTING
      ev_content            = ev_pdf_content
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD sc_retrieve_resumes.

  DATA: lv_dest        TYPE rfcdest,
        lv_https       TYPE boole_d.
  DATA: lv_protocol    TYPE string,
        lv_message(80) TYPE c.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* determine protocol for url generation
  CALL METHOD cl_wd_utilities=>construct_wd_url
    EXPORTING
      application_name = 'abc'
    IMPORTING
      out_protocol     = lv_protocol.

  IF lv_protocol = 'https'.
    lv_https = abap_true.
  ENDIF.

  CALL FUNCTION 'HRRCF_MDL_CAND_RSM_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      cand_hrobject         = is_cand_hrobject
      https                 = lv_https
      mandt                 = sy-mandt                            "N 1686126
    IMPORTING
      records               = et_resumes
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


METHOD sc_update_cancel.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get RFC destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

* call RFC for canceling profile update
  CALL FUNCTION 'HRRCF_MDL_ACT_PARS_UPD_CANCEL'
    DESTINATION lv_dest
    EXPORTING
      iv_act_guid           = iv_act_guid
    IMPORTING
      et_messages           = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.


  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.


METHOD sc_update_resume.

  DATA: lv_dest        TYPE rfcdest,
        lv_message(80) TYPE c.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_ATT_UPDATE'
    DESTINATION lv_dest
    EXPORTING
      record                = is_resume
      cand_hrobject         = is_cand_hrobject
      content               = is_content
      filename              = iv_filename
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

ENDMETHOD.
ENDCLASS.