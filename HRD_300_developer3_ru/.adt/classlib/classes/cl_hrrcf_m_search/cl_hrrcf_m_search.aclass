class CL_HRRCF_M_SEARCH definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

*"* public components of class CL_HRRCF_M_SEARCH
*"* do not include other source files here!!!
  data GV_IS_EMPLOYEE_SCENARIO type WDY_BOOLEAN .

  methods GET_SWITCH_STATUS
    returning
      value(SWITCH_STATUS) type BOOLE_D .
  methods IS_NON_SERVICE_USER
    returning
      value(IS_NON_SERVICE_USER) type BOOLE_D .
  methods RETRIEVE_RFC_DESTINATION .
  methods SC_CREATE_VARIANT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IV_VARIANT_NAME type RCF_SMGV_NAME
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_DELETE_VARIANT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IS_QUERY type RCF_S_MDL_SMG_VARIANTS
      !IT_SME_QUERY_TAB type RCF_T_MDL_SME_QUERY_TAB
      !IT_SM_ELEMENT_TAB type RCF_T_MDL_SMASK_ELEMENT_TAB
      !IT_SMASK_TAB type RCF_T_MDL_SMGV_SMASK
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_FILL_SM_ELEMENT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IV_SMASK_ID type RCF_SMASK_ID
      !IV_SM_ELEMENT_ID type RCF_SM_ELEMENT
      !IT_QUERY_TAB type RCF_T_SME_QUERY_TAB
      !IS_VALUEHELP_LINE type RCF_S_UI_VALUEHELP optional
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_VERIFICATION_STATUS
    importing
      !IV_CANDIDATE_HROBJECT type HROBJECT optional
    exporting
      !EV_VERIFICATION_STATUS type RCF_VERIFICATION_STATUS
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_INIT_SEARCH_MASK_GROUP
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !EV_SMG_ID type RCF_SM_GROUP_ID
      !ET_MESSAGES type BAPIRETTAB
      !ET_SEARCH_LANGUAGES type RCF_T_LANGU_LIST
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_LOAD_VARIANT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IV_VARIANT_NAME type RCF_SMGV_NAME
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RESET_SEARCH_MASK_GROUP
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_HITLIST
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !ET_GENERIC_HITLIST type RCF_T_HITLIST_WITH_RANKV
      !ET_CRITERIA_DISPLAY_TAB type RCF_T_SQ_DISPLAY
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_JOB_HITLIST
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IV_SEARCH_LANGU type SPRAS
      !IT_GENERIC_HITLIST type RCF_T_HITLIST_WITH_RANKV
    exporting
      !ET_JOB_HITLIST type RCF_T_MDL_JOBS_SRCH_HITLIST
      !ET_MESSAGES type BAPIRETTAB
      !EV_NUMBER_OF_HITS type RCF_MDL_SRCH_NR_OF_HITS
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_SEARCH_ATTRIBUTES
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !EV_ALL_LANGUAGES_POSSIBLE type BOOLE_D
      !ET_SEARCH_ATTRIBUTES type T77RCF_SRCH_ATTR
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_SEARCH_MASKS
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ET_SMASK_TAB type RCF_T_MDL_SMASK_TAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_SM_ELEMENTS
    importing
      !IV_SMASK_ID type RCF_SMASK_ID
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !ET_SMASK_ELEMENT_TAB type RCF_T_MDL_SMASK_ELEMENT_TAB
      !ET_SME_VALUEHELP_TAB type RCF_T_MDL_SME_VALUEHELP
      !ET_SME_QUERY_TAB type RCF_T_MDL_SME_QUERY_TAB
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_VARIANT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IV_VARIANT_NAME type RCF_SMGV_NAME
    exporting
      !ES_QUERY type RCF_S_MDL_SMG_VARIANTS
      !ET_MESSAGES type BAPIRETTAB
      !ET_SME_QUERY_TAB type RCF_T_MDL_SME_QUERY_TAB
      !ET_SM_ELEMENT_TAB type RCF_T_MDL_SMASK_ELEMENT_TAB
      !ET_SMASK_TAB type RCF_T_MDL_SMGV_SMASK
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_RETRIEVE_VARIANT_NAMES
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !ET_SEARCH_VARIANTS type RCF_T_MDL_SMG_VARIANTS
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods SC_RETRIEV_CAND_DATA
    exporting
      !ES_PERSONAL_DATA type RCF_S_MDL_CAND_PERSONAL_DATA
      !ET_MESSAGES type BAPIRETTAB
      !ES_SENDER_EMAIL type AD_SMTPADR
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SEARCH
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IT_HIDDEN_INFO_TAB type RCF_T_NAME_VALUE optional
      !IV_SEARCH_LANGUAGE type SPRAS optional
      !IV_MAX_HITS type RCF_HL_MAX_NUMBER optional
      !IV_LOG_OP_FULLTEXT type RCF_MDL_LOG_OPERATOR_FTS optional
      !IV_LOG_OP type RCF_SQ_LOG_OP optional
      !IV_THRESHOLD type RCF_THRESHOLD optional
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_UPDATE_VARIANT
    importing
      !IV_SEARCH_TASK type RCF_PARENT_COMP_ID
      !IS_QUERY type RCF_S_MDL_SMG_VARIANTS
      !IT_SME_QUERY_TAB type RCF_T_MDL_SME_QUERY_TAB
      !IT_SM_ELEMENT_TAB type RCF_T_MDL_SMASK_ELEMENT_TAB
      !IT_SMASK_TAB type RCF_T_MDL_SMGV_SMASK
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods VALIDATE_QUESTIONNAIRE
    importing
      !IM_PINST_GUID type RCF_PINST_GUID
    returning
      value(RE_VALID) type BOOLE_D .
protected section.
*"* protected components of class CL_HRRCF_M_SEARCH
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_SEARCH
*"* do not include other source files here!!!

  data GV_RFC_DEST type RFCDEST .

  methods GET_RFC_DESTINATION
    returning
      value(RV_RFC_DEST) type RFCDEST .
  methods SET_RFC_DESTINATION
    importing
      !IV_RFC_DEST type RFCDEST .
ENDCLASS.



CLASS CL_HRRCF_M_SEARCH IMPLEMENTATION.


method get_rfc_destination.

  rv_rfc_dest = me->gv_rfc_dest.

endmethod.


METHOD get_switch_status.

* status of EhP3 UI switch
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_01( ) EQ abap_true.
    switch_status = abap_true.
  ELSE.
    switch_status = abap_false.
  ENDIF.

ENDMETHOD.


METHOD is_non_service_user.

  DATA: ls_uslogond TYPE uslogond.

* Get user logon data of the current user.
  CALL FUNCTION 'SUSR_USER_LOGONDATA_GET'
    EXPORTING
      user_name           = sy-uname
    IMPORTING
      user_logondata      = ls_uslogond
    EXCEPTIONS
      user_name_not_exist = 1
      OTHERS              = 2.

  IF sy-subrc = 0.
*   Check the user type and set the value of returning parameter:
    CASE ls_uslogond-ustyp.
      WHEN 'S'.               " Service user
        is_non_service_user = abap_false.
      WHEN OTHERS.            "Non-Service user(Registered or Internal candidate)
        is_non_service_user = abap_true.
    ENDCASE.

  ENDIF.

ENDMETHOD.


method retrieve_rfc_destination.

  data: lv_rfc_dest type rfcdest.

* retrieve the RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* set the RFC destination
  me->set_rfc_destination( lv_rfc_dest ).

endmethod.


method sc_create_variant.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* create a search variant
  call function 'HRRCF_MDL_SRCH_QUERY_CREATE'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      query_name            = iv_variant_name
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_delete_variant.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* delete specified search variant
  call function 'HRRCF_MDL_SRCH_QUERY_DELETE'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      query                 = is_query
      sme_query_tab         = it_sme_query_tab
      sm_element_tab        = it_sm_element_tab
      smask_tab             = it_smask_tab
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_fill_sm_element.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* set query for the specified search mask element
  call function 'HRRCF_MDL_SRCH_SM_ELEM_SET'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      smask_id              = iv_smask_id
      sm_element_id         = iv_sm_element_id
      query_tab             = it_query_tab
      valuehelp_line        = is_valuehelp_line
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_get_verification_status.

* NOTE: This is a copy from class CL_HRRCF_M_REGISTER.

  data: lv_dest                type rfcdest,
        lv_verification_status type rcf_verification_status,
        lv_message(80)         type c.

  clear: ev_verification_status,
         et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_STAT_RETRIEVE'
    destination lv_dest
    exporting
      is_candidate_hrobject  = iv_candidate_hrobject
    importing
      ev_verification_status = ev_verification_status
      et_messages            = et_messages
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_init_search_mask_group.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: ev_smg_id,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* initialize search mask group
  call function 'HRRCF_MDL_SRCH_SMG_INIT'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
    importing
      messages              = et_messages
      smg_id                = ev_smg_id
      search_languages      = et_search_languages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_load_variant.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.

  CLEAR: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* load specified search variant
  CALL FUNCTION 'HRRCF_MDL_SRCH_QUERY_LOAD'
    DESTINATION lv_rfc_dest
    EXPORTING
      search_task           = iv_search_task
      query_name            = iv_variant_name
    IMPORTING
      messages              = et_messages
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method sc_reset_search_mask_group.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* reset the search mask group
  call function 'HRRCF_MDL_SRCH_RESET'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_hitlist.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_generic_hitlist,
         et_criteria_display_tab,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* retrieve generic hit list
  call function 'HRRCF_MDL_SRCH_HITLIST_GET'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
    importing
      hitlist               = et_generic_hitlist
      messages              = et_messages
      search_criteria_tab   = et_criteria_display_tab
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_job_hitlist.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: ev_number_of_hits,
         et_job_hitlist,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* retrieve job hit list
  call function 'HRRCF_MDL_JOBS_SRCH_HLIST_CONV'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      search_language       = iv_search_langu
      key_hitlist           = it_generic_hitlist
    importing
      hitlist               = et_job_hitlist
      messages              = et_messages
      number_of_hits        = ev_number_of_hits
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_search_attributes.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: ev_all_languages_possible,
         et_search_attributes,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* retrieve attributes of the search scenario
  call function 'HRRCF_MDL_SRCH_ATTRIBUTES_GET'
    destination lv_rfc_dest
    exporting
      search_task            = iv_search_task
    importing
      search_attributes      = et_search_attributes
      messages               = et_messages
      all_languages_possible = ev_all_languages_possible
    exceptions
      system_failure         = 1  message lv_message
      communication_failure  = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_search_masks.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_smask_tab,
         et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* get table of search masks of a specified search mask group
  call function 'HRRCF_MDL_SRCH_SMASK_TAB_GET'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
    importing
      smask_tab             = et_smask_tab
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_sm_elements.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages,
         et_smask_element_tab,
         et_sme_valuehelp_tab,
         et_sme_query_tab.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* get table of search mask elements of a specified search mask
  call function 'HRRCF_MDL_SRCH_SM_ELEM_TAB_GET'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      smask_id              = iv_smask_id
    importing
      smask_element_tab     = et_smask_element_tab
      messages              = et_messages
      sme_valuehelp_tab     = et_sme_valuehelp_tab
      sme_query_tab         = et_sme_query_tab
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_variant.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: es_query,
         et_messages,
         et_sme_query_tab,
         et_sm_element_tab,
         et_smask_tab.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* retrieve information about the specified search variant
  call function 'HRRCF_MDL_SRCH_QUERY_READ'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      query_name            = iv_variant_name
    importing
      query                 = es_query
      messages              = et_messages
      sme_query_tab         = et_sme_query_tab
      sm_element_tab        = et_sm_element_tab
      smask_tab             = et_smask_tab
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_retrieve_variant_names.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages,
         et_search_variants.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* retrieve search variant names
  call function 'HRRCF_MDL_SRCH_QUERY_RETRIEVE'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
    importing
      query_list            = et_search_variants
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD sc_retriev_cand_data.
  DATA: lv_dest           TYPE rfcdest,
        ls_personal_data  TYPE rcf_s_mdl_cand_personal_data,
        lt_messages       TYPE bapirettab,
        lv_message(80)    TYPE c,
        lv_user           TYPE xubname,
        lv_cand_hrobject  TYPE hrobject,
        lv_sender_mail    TYPE ad_smtpadr.

* get rfc destination
  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.
  lv_user = sy-uname.
  CALL FUNCTION 'HRRCF_MDL_ADMN_CAND_RETRIEVE'
    DESTINATION lv_dest
    EXPORTING
      iv_user               = lv_user
    IMPORTING
      ev_cand_hrobject      = lv_cand_hrobject
    EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
*  FAILED                 = 1
*  OTHERS                 = 2
*            .
  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  CALL FUNCTION 'HRRCF_MDL_CAND_PERS_RETRIEVE'
  DESTINATION lv_dest
   EXPORTING
*   LANGU               = SY-LANGU
     cand_hrobject       = lv_cand_hrobject
   IMPORTING
     personal_data       = ls_personal_data
     messages            = lt_messages
   EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.
  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

  APPEND LINES OF lt_messages TO et_messages.

* get communcation and address data
  CALL FUNCTION 'HRRCF_MDL_CAND_COMMN_RETRIEVE'
   DESTINATION lv_dest
   EXPORTING
*   LANGU                           = SY-LANGU
     cand_hrobject                   = lv_cand_hrobject
   IMPORTING
     email                           = lv_sender_mail
   EXCEPTIONS
      system_failure        = 1  MESSAGE lv_message
      communication_failure = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with rfc connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.




  APPEND LINES OF lt_messages TO et_messages.
  es_personal_data = ls_personal_data.
  es_sender_email  = lv_sender_mail.
ENDMETHOD.


method sc_search.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* refresh RFC destination and buffer
  cl_hrrcf_m_rfc_services=>refresh_buffer( lv_rfc_dest ).

* start the search
  call function 'HRRCF_MDL_SRCH_SEARCH'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      hidden_info_tab       = it_hidden_info_tab
      search_language       = iv_search_language
      max_hits              = iv_max_hits
      log_op_fulltext       = iv_log_op_fulltext
      log_op                = iv_log_op
      threshold             = iv_threshold
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method sc_update_variant.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.

  clear: et_messages.

* get RFC destination
  lv_rfc_dest = me->get_rfc_destination( ).

* update an existing search variant
  call function 'HRRCF_MDL_SRCH_QUERY_UPDATE'
    destination lv_rfc_dest
    exporting
      search_task           = iv_search_task
      query                 = is_query
      sme_query_tab         = it_sme_query_tab
      sm_element_tab        = it_sm_element_tab
      smask_tab             = it_smask_tab
    importing
      messages              = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


method set_rfc_destination.

  me->gv_rfc_dest = iv_rfc_dest.

endmethod.


METHOD validate_questionnaire.

****************** Local Tables(lt_*) declaration***************
  DATA: lt_questionnaires TYPE rcf_t_questionnaire_pl,
        lt_message        TYPE bapirettab,

****************** Local Structure(ls_*) declaration***************
        ls_req            TYPE hrobject,

****************** Local Object(lo_*) declaration***************
        lo_pinst_bl       TYPE REF TO cl_hrrcf_posting_inst_bl,
        lo_ex             TYPE REF TO cx_hrrcf.

**->> Get instances of business logic facades
  lo_pinst_bl = cl_hrrcf_posting_inst_bl=>get_instance( ).

**->> Get requisition object
  TRY.
      CALL METHOD lo_pinst_bl->get_req_object
        EXPORTING
          p_pinst_guid    = im_pinst_guid
        RECEIVING
          ps_req_hrobject = ls_req.
    CATCH cx_hrrcf INTO lo_ex.
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
  ENDTRY.

**->> Read questionnaire details
  CALL METHOD cl_hrrcf_req_mgmt_pl=>get_questionaire
    EXPORTING
      iv_requi          = ls_req-objid
    IMPORTING
      et_questionnaires = lt_questionnaires
      et_message        = lt_message.

**->> Check questionnaire status
  CALL METHOD cl_hrrcf_pinst_mnt_pl=>validate_questionnaire
    EXPORTING
      im_quesnr = lt_questionnaires
    IMPORTING
      ex_valid  = re_valid.

ENDMETHOD.
ENDCLASS.