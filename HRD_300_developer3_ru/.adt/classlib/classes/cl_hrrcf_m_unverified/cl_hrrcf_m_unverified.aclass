class CL_HRRCF_M_UNVERIFIED definition
  public
  inheriting from CL_WD_COMPONENT_ASSISTANCE
  create public .

public section.

*"* public components of class CL_HRRCF_M_UNVERIFIED
*"* do not include other source files here!!!
  methods SC_CHECK_VERIF_REQUEST_ALLOWED
    exporting
      !EV_REQUEST_ALLOWED type BOOLE_D
      !EV_MAX_REQUESTS type I
      !EV_CAND_REQUESTS type I
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_SEND_NEW_VERIFICATION_LINK
    exporting
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  methods SC_GET_CAND_VERIF_STATUS
    importing
      !IV_USER type SYUNAME
    exporting
      !EX_VERIF type RCF_VERIFICATION_STATUS
    raising
      CX_HRRCF_RFC_COMMUNICATION .
protected section.
*"* protected components of class CL_HRRCF_M_UNVERIFIED
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_M_UNVERIFIED
*"* do not include other source files here!!!
ENDCLASS.



CLASS CL_HRRCF_M_UNVERIFIED IMPLEMENTATION.


method sc_check_verif_request_allowed.

  data: lv_dest        type rfcdest,
        lv_message(80) type c.

  clear: et_messages,
         ev_cand_requests,
         ev_max_requests,
         ev_request_allowed.

  lv_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

  call function 'HRRCF_MDL_VERIF_REQUEST_ALLOWD'
    destination lv_dest
    importing
      ev_request_allowed    = ev_request_allowed
      ev_cand_requests      = ev_cand_requests
      ev_max_requests       = ev_max_requests
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with rfc connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

endmethod.


METHOD SC_GET_CAND_VERIF_STATUS.

  DATA: lv_dest                TYPE rfcdest,
         lv_message(80)         TYPE c.

  CALL METHOD cl_hrrcf_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = lv_dest.

  CALL FUNCTION 'HRRCF_MDL_CAND_VERIF_STATUS'
    DESTINATION lv_dest
    EXPORTING
      iv_user     = sy-uname
    IMPORTING
      ex_verif    = ex_verif
*     ET_MESSAGES =
    EXCEPTIONS
      failed      = 1
      OTHERS      =  2 .
  IF sy-subrc <> 0.
* Implement suitable error handling here
    RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication.
  ENDIF.


ENDMETHOD.


method sc_send_new_verification_link.

  data: lv_dest                type rfcdest,
        lv_message(80)         type c.

  clear et_messages.

  call method cl_hrrcf_wd_services=>get_bl_destination
    receiving
      rfc_dest = lv_dest.

  call function 'HRRCF_MDL_VERIF_MAIL_SEND'
    destination lv_dest
    exporting
      iv_check_appl_exists  = abap_true
    importing
      et_messages           = et_messages
    exceptions
      system_failure        = 1  message lv_message
      communication_failure = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting
            textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

  cl_hrrcf_m_rfc_services=>commit_and_refresh( lv_dest ).

endmethod.
ENDCLASS.