class CL_HRRCF_QUALIFICATION definition
  public
  inheriting from CL_HRRCF_INFOTYPE
  abstract
  create public .

public section.

*"* public components of class CL_HRRCF_QUALIFICATION
*"* do not include other source files here!!!
  class-methods GET_QUALIFICATION_DETAILS
    importing
      !QUALIFICATION type RCF_QUALIFICATION
      !OTYPE type OTYPE optional
      !LANGU type SYLANGU optional
    exporting
      !STEXT type BAPIPDOTYPE_Q_TAB-STEXT
      !BEGDA type BAPIPDOTYPE_Q_TAB-BEGDA
      !ENDDA type BAPIPDOTYPE_Q_TAB-ENDDA
      !SCALE_ID type BAPIQUALIFIC_TAB-SCALE_ID
      !SCALETXT type BAPIQUALIFIC_TAB-SCALETXT
      !QGROUP_ID type BAPIQUALIFIC_TAB-QGROUP_ID
      !QGROUPTXT type BAPIQUALIFIC_TAB-QGROUPTXT
      !DEPRECIATIONVALIDITY type BAPIPDOTYPE_Q_1025
      !DESCRIPTION type RCF_T_QUALIDESCRIPTION
      !PROFICENCIES type RCF_T_PROFICENCIES
      !PROFCYDESCRIPTIONS type RCF_T_PROFCYDESCRIPTIONS
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_PDOTYPE_OPERATION
      CX_HRRCF_QUALIFICATION .
  class-methods GET_GROUP_QUALIFICATIONS
    importing
      !QUALIFICATION_GROUP type RCF_Q_ID
      !LANGU type SYLANGU optional
    exporting
      !QUALIFICATION_LIST type RCF_T_Q_DIRECTORY
    raising
      CX_HRRCF_QUALIFICATION .
  class-methods GET_QUALI_GROUPS
    importing
      !LANGU type SYLANGU optional
      !NO_VIEW type BOOLE_D optional
    exporting
      !QUALI_GROUP_LIST type RCF_T_Q_DIRECTORY
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_QUALIFICATION .
  class-methods GET_GROUP_PROFICIENCIES
    importing
      !QUALIFICATION_GROUP type RCF_Q_ID
      !LANGU type SYLANGU optional
    exporting
      !PROFICIENCY type RCF_T_PROFICIENCY
    raising
      CX_HRRCF_QUALIFICATION .
  class-methods GET_GROUP_SCALE
    importing
      !QUALIFICATION_GROUP type RCF_Q_ID
    exporting
      !SCALE_INFO type SCALE_STRU
    raising
      CX_HRRCF_QUALIFICATION .
  class-methods GET_QUALI_CAT_COMPLETE
    importing
      !LANGU type SYLANGU optional
    exporting
      !QUALI_CATALOG_LIST type RCF_T_Q_DIRECTORY
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_QUALIFICATION .
protected section.
*"* protected components of class CL_HRRCF_QUALIFICATION
*"* do not include other source files here!!!

  methods CHECK_BUSINESS_RULES
    redefinition .
private section.
*"* private components of class CL_HRRCF_QUALIFICATION
*"* do not include other source files here!!!

  class-data GT_QUALI_CATALOG_LIST type RCF_T_Q_DIRECTORY .
ENDCLASS.



CLASS CL_HRRCF_QUALIFICATION IMPLEMENTATION.


METHOD check_business_rules .

  TYPES: BEGIN OF quali_type,
          plvar TYPE plvar,
          begda TYPE begdatum,
          q_object_type TYPE rcf_q_type,
          q_object_id TYPE rcf_q_id,
          proficiency TYPE rating,
         END OF quali_type.

  DATA: quali_structure TYPE quali_type,
        ls_return TYPE bapireturn1,
        our_return TYPE bapiret2,
        msgv1 TYPE sy-msgv1.
  DATA: lt_proficiencies TYPE TABLE OF bapipdotypeq_profcies.
  DATA: wa_ref TYPE REF TO data.

  FIELD-SYMBOLS <quali> TYPE ANY.

  CREATE DATA wa_ref TYPE (me->my_777d-ppnnn).

  ASSIGN wa_ref->* TO <quali>.

* -- load info type record
  CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn
    EXPORTING
      wplog = infotype_record
    IMPORTING
      pnnnn = <quali>.

  MOVE-CORRESPONDING <quali> TO quali_structure.

  IF ( quali_structure-q_object_type NE 'Q' ) AND
  ( quali_structure-q_object_type NE 'QK' ).
* -- raise exception
    IF 1 EQ 2.
      MESSAGE e132(hrrcf0001) WITH '&'.
*   Otype doesn't exist
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_qualification=>wrong_otype
        hrobject = me->hrobject
        infotype = infotype_record
        message_type = 'E'
        message_class = msgcl_admin
        message_number = '132'
        message_par1 = msgv1.
  ENDIF.

* -- only checks for qualification
  IF quali_structure-q_object_type EQ 'Q'.

* -- existence check of the qualification
    CALL FUNCTION 'RH_EXIST_OBJECT'
      EXPORTING
        plvar     = quali_structure-plvar
        otype     = 'Q'
        objid     = quali_structure-q_object_id
      EXCEPTIONS
        not_found = 1
        OTHERS    = 2.
    IF sy-subrc <> 0.
      IF 1 EQ 2.
        MESSAGE e007(hrrcf0001) WITH '&'.
*   Qualification &1 doesn't exist
      ENDIF.
      msgv1 = quali_structure-q_object_id.
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>foreign_key_missmatch
          hrobject = me->hrobject
          infotype = infotype_record
          message_type = 'E'
          message_class = msgcl_admin
          message_number = '007'
          message_par1 = msgv1.
    ENDIF.

* -- consistence check of proficiency
    CHECK NOT quali_structure-proficiency CO ' 0'.

    CALL FUNCTION 'BAPI_PDOTYPE_Q_GETDETAIL'
      EXPORTING
        plvar        = quali_structure-plvar
        objid        = quali_structure-q_object_id
*        keyday       =
      IMPORTING
        return       = ls_return
      TABLES
        proficencies = lt_proficiencies.
    IF ls_return-type NE 'E'.
      READ TABLE lt_proficiencies
        WITH KEY rating = quali_structure-proficiency
        TRANSPORTING NO FIELDS.
      IF sy-subrc NE 0.
        IF 1 EQ 2.
          MESSAGE e008(hrrcf0001) WITH '&'.
*   Proficiency &1 doesn't exist
        ENDIF.
        msgv1 = quali_structure-proficiency.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>foreign_key_missmatch
            hrobject = me->hrobject
            infotype = infotype_record
            message_type = 'E'
            message_class = msgcl_admin
            message_number = '008'
            message_par1 = msgv1.
      ENDIF.
    ELSE.
      IF   ls_return-number = '603'
        OR ls_return-number = '619'.
        IF ls_return-number = '603'.
          ls_return-id = 'PQ'.
        ELSE.                 "619
          ls_return-id = msgcl_admin.
          ls_return-number = '007'.
          ls_return-message_v1 = quali_structure-q_object_id.
        ENDIF.
        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = ls_return-id
            number = ls_return-number
            par1   = ls_return-message_v1
          IMPORTING
            return = our_return.
        APPEND our_return TO return.
        CLEAR ls_return.
      ELSE.
        RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
          EXPORTING
            textid = cx_hrrcf_infotype_operation=>foreign_key_missmatch
            hrobject = me->hrobject
            infotype = infotype_record
            message_type = ls_return-type
            message_class = ls_return-id
            message_number = ls_return-number
            message_par1 = ls_return-message_v1
            message_par2 = ls_return-message_v2
            message_par3 = ls_return-message_v3
            message_par4 = ls_return-message_v4.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD get_group_proficiencies .

  TYPES: scale_type TYPE TABLE OF scale_stru.

  DATA:   l_plvar TYPE plvar,
          ls_return TYPE bapireturn1,
          v_msg_1 TYPE sy-msgv1,
          lt_scale TYPE scale_type,
          wa_scale TYPE scale_stru.

  DATA:   ls_proficiency TYPE hrpe_profc.

* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  CALL FUNCTION 'RHPE_Q_SCALE_READ_DIRECT_INFTY'
    EXPORTING
      plvar             = l_plvar
*   OTYPE             = 'QK'
      objid             = qualification_group
*   BEGDA             = SY-DATUM
*   ENDDA             = '99991231'
*   WITH_TEXT         = 'X'
   TABLES
     q_scale_tab       = lt_scale
   EXCEPTIONS
     no_value          = 1
            .

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e127(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>problem_with_scale
        message_type = 'E'
        message_class = if_hrrcf_constants~msgcl_admin
        message_number = '127'.
  ENDIF.

  READ TABLE lt_scale INDEX 1 INTO wa_scale.

  CALL FUNCTION 'RHPG_SCALE_READ'
    EXPORTING
*   LANGU                 = SY-LANGU
      scale_id              = wa_scale-scale
*   ADD_DATA              = 'X'
*   ONLY_QUALI            = 'X'
* IMPORTING
*   STEXT                 =
*   COUNT                 =
*   MIN_VALUE             =
*   MAX_VALUE             =
*   CHANGED_LANGU         =
   TABLES
     proficiency           = proficiency
*   PROFCY_RANGE          =
 EXCEPTIONS
   scale_not_found       = 1
   no_authority          = 2
            .
  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e127(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>problem_with_scale
        message_type = 'E'
        message_class = if_hrrcf_constants~msgcl_admin
        message_number = '127'.

  ELSE. "proficiencies found: add proficiency "0000: not rated if it's
    "not a license scale".
    READ TABLE proficiency INDEX 2 TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      READ TABLE proficiency WITH KEY rating = '0000' TRANSPORTING NO FIELDS.
      IF sy-subrc <> 0.
        ls_proficiency-rating = '0000'.
      ls_proficiency-pstext = cl_hrrcf_services_general=>get_otr_text(
                               'paoc_rcf_ui/q_not_rated' ).
      APPEND ls_proficiency TO proficiency.
      ENDIF.
    ENDIF.
    SORT proficiency BY rating.
  ENDIF.

ENDMETHOD.


METHOD get_group_qualifications .

* This method returns all qualifications related to a given
*  qualification group. Hierarchy level 1 is only allowed!

  DATA:   wa_qualifications TYPE LINE OF rcf_t_q_directory.
  DATA:   l_plvar TYPE plvar,
          ls_return TYPE bapireturn1,
          l_dbtab TYPE string,
          lo_ex   TYPE REF TO cx_root,
          v_msg_1 TYPE sy-msgv1.

* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  TRY.
*      clear sy-dbcnt.
      l_dbtab = 'T77QC_VIEW_ID'.
      SELECT COUNT( * ) FROM (l_dbtab).
    CATCH cx_root INTO lo_ex.
  ENDTRY.

  IF lo_ex IS BOUND or sy-dbcnt = 0.

    CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
      EXPORTING
        plvar                        = l_plvar
        otype                        = 'QK'
        objid                        = qualification_group
*   FROM_DATE                    = SY-DATUM
*   TO_DATE                      = SY-DATUM
       depth                        = 1
     IMPORTING
        return                       = ls_return
      TABLES
        qualificationdirectory       = qualification_list
              .
  ELSE.
    TRY.
        CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
          EXPORTING
            plvar                        = l_plvar
            otype                        = 'QK'
            objid                        = qualification_group
*   FROM_DATE                    = SY-DATUM
*   TO_DATE                      = SY-DATUM
           depth                        = 1
           view_id                       = 'SAP_ERECRUITING'
         IMPORTING
            return                       = ls_return
          TABLES
            qualificationdirectory       = qualification_list
                  .
      CATCH cx_sy_dyn_call_param_not_found.
    ENDTRY.

  ENDIF.
  IF ls_return-type = 'E'.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e072(hrrcf0001).
    ENDIF.

    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_qualifications
        message_type = 'E'
        message_class = if_hrrcf_constants~msgcl_admin
        message_number = '072'
        .
  ENDIF.

  LOOP AT qualification_list INTO wa_qualifications.
    IF NOT ( wa_qualifications-otype = 'Q' ).
      DELETE qualification_list.
*    ELSEIF NOT ( wa_qualifications-level = '1' ).
*      DELETE qualification_list.
    ENDIF.
  ENDLOOP.


ENDMETHOD.


METHOD get_group_scale.

  TYPES: scale_type TYPE TABLE OF scale_stru.

  DATA:  l_plvar TYPE plvar,
         lt_scale TYPE scale_type,
         wa_scale TYPE scale_stru.


* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  CALL FUNCTION 'RHPE_Q_SCALE_READ_DIRECT_INFTY'
    EXPORTING
      plvar             = l_plvar
*   OTYPE             = 'QK'
      objid             = qualification_group
*   BEGDA             = SY-DATUM
*   ENDDA             = '99991231'
*   WITH_TEXT         = 'X'
   TABLES
     q_scale_tab       = lt_scale
   EXCEPTIONS
     no_value          = 1
     OTHERS            = 2
            .
  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e127(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>problem_with_scale
        message_type = 'E'
        message_class = if_hrrcf_constants~msgcl_admin
        message_number = '127'.
  ENDIF.

  READ TABLE lt_scale INDEX 1 INTO wa_scale.

  scale_info = wa_scale.

ENDMETHOD.


METHOD get_qualification_details .

  DATA: ls_return        TYPE bapireturn1,
        our_return       TYPE bapiret2.
  DATA: ls_hrobject TYPE hrobject,
        l_plvar TYPE plvar.

  DATA: ls_proficencies TYPE bapipdotypeq_profcies.

* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  CALL FUNCTION 'BAPI_PDOTYPE_Q_GETDETAIL'
    EXPORTING
      plvar                      = l_plvar
      objid                      = qualification
*   KEYDAY                     = SY-DATUM
   IMPORTING
     stext                      = stext
     begda                      = begda
     endda                      = endda
     scale_id                   = scale_id
     scaletxt                   = scaletxt
     qgroup_id                  = qgroup_id
     qgrouptxt                  = qgrouptxt
     depreciationvalidity       = depreciationvalidity
     return                     = ls_return
   TABLES
     description                = description
*   ALTERNATIVES               =
     proficencies               = proficencies
     profcydescriptions         = profcydescriptions
            .

* -- Error/Exception handling

  ls_hrobject-plvar = l_plvar.
  ls_hrobject-otype = otype.
  ls_hrobject-objid = qualification.

  IF ls_return-type EQ 'E'.

    IF   ls_return-number = '603' OR ls_return-number = '619'.
      IF ls_return-number = '603'.
        ls_return-id = 'PQ'.
      ELSE.                 "619
        ls_return-id = msgcl_admin.
        ls_return-number = '007'.
        ls_return-message_v1 = ls_hrobject-objid.
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = ls_return-id
          number = ls_return-number
          par1   = ls_return-message_v1
        IMPORTING
          return = our_return.
      APPEND our_return TO return.
      CLEAR ls_return.
    ELSE.
      RAISE EXCEPTION TYPE cx_hrrcf_pdotype_operation
        EXPORTING
          hrobject = ls_hrobject
          message_type = ls_return-type
          message_class = ls_return-id
          message_number = ls_return-number
          message_par1 = ls_return-message_v1
          message_par2 = ls_return-message_v2
          message_par3 = ls_return-message_v3
          message_par4 = ls_return-message_v4.
    ENDIF.
  ENDIF.

  READ TABLE proficencies WITH KEY rating = '0000' TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    ls_proficencies-rating_text = cl_hrrcf_services_general=>get_otr_text(
                               'paoc_rcf_ui/q_not_rated' ).
    MODIFY proficencies INDEX 1 FROM ls_proficencies
           TRANSPORTING rating_text.
  ENDIF.

ENDMETHOD.


method GET_QUALI_CAT_COMPLETE.
* This method returns all relevant information from the catalog assigned
* to the active plan variant. Also multi level!

  DATA: ls_return TYPE bapireturn1,
        ls_return_exp TYPE bapiret2,
        l_dbtab TYPE string,
        lo_ex TYPE REF TO cx_root,
        l_plvar TYPE plvar.

* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  TRY.
*      clear sy-dbcnt.
      l_dbtab = 'T77QC_VIEW_ID'.
      SELECT COUNT( * ) FROM (l_dbtab).
    CATCH cx_root INTO lo_ex.
  ENDTRY.

  IF gt_quali_catalog_list is initial.                                 "N_1442494
   IF lo_ex IS BOUND  or sy-dbcnt = 0.

* -- get the whole qualification catalogue (multi level!)
    CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
      EXPORTING
        plvar                  = l_plvar
*   OTYPE                    =
*   OBJID                    =
*   FROM_DATE                = SY-DATUM
*   TO_DATE                  = SY-DATUM
*   DEPTH                    =
     IMPORTING
        return                 = ls_return
      TABLES
        qualificationdirectory = quali_catalog_list .
  ELSE.
    TRY.
        CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
          EXPORTING
            plvar                  = l_plvar
            view_id                = 'SAP_ERECRUITING'
*   OTYPE                    =
*   OBJID                    =
*   FROM_DATE                = SY-DATUM
*   TO_DATE                  = SY-DATUM
*   DEPTH                    =
         IMPORTING
            return                 = ls_return
          TABLES
            qualificationdirectory = quali_catalog_list .

      CATCH cx_sy_dyn_call_param_not_found.
    ENDTRY.
  ENDIF.
    gt_quali_catalog_list = quali_catalog_list .                             "N_1442494
  ELSE.                                                                      "N_1442494
    quali_catalog_list = gt_quali_catalog_list .                             "N_1442494
    RETURN.                                                                  "N_1442494
  ENDIF.                                                                     "N_1442494

  IF ls_return-type IS NOT INITIAL.
    MOVE-CORRESPONDING ls_return TO ls_return_exp.
    APPEND ls_return_exp TO return.

    IF ls_return-type = 'E'.
*-- only needed for where-used list and navigation
      IF 1 = 2.
        MESSAGE e071(hrrcf0001).
      ENDIF.

      RAISE EXCEPTION TYPE cx_hrrcf_qualification
          EXPORTING
          message_type = 'E'
          message_class = if_hrrcf_constants~msgcl_admin
          message_number = '071'
          .
    ENDIF.
  ENDIF.

endmethod.


METHOD get_quali_groups.

* This method returns all relevant information to all qualification
*  groups assigned to the active plan variant. Also multi level!

  DATA: wa_quali_groups TYPE LINE OF rcf_t_q_directory,
        ls_return TYPE bapireturn1,
        ls_return_exp TYPE bapiret2,
        lt_return     TYPE bapirettab,
        l_dbtab TYPE string,
        lo_ex TYPE REF TO cx_root,
        l_plvar TYPE plvar,
        l_hrqua TYPE gsval.

* -- get active plan variant
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 1
      OTHERS            = 2.

  IF sy-subrc NE 0.
*-- only needed for where-used list and navigation
    IF 1 = 2.
      MESSAGE e300(5w).  "no active plan variant
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf_qualification
        EXPORTING
        textid = cx_hrrcf_qualification=>no_active_plvar
        message_type = 'E'
        message_class = '5W'
        message_number = '300'.
  ENDIF.

  TRY.
*      clear sy-dbcnt.
      l_dbtab = 'T77QC_VIEW_ID'.
      SELECT COUNT( * ) FROM (l_dbtab).
    CATCH cx_root INTO lo_ex.
  ENDTRY.

  IF no_view = 'X'.

    CALL METHOD cl_hr_t77s0=>read_gsval
      EXPORTING
        grpid       = 'RECFA'
        semid       = 'HRQUA'
      IMPORTING
        returnvalue = l_hrqua
*         SUBRC       =
        .
  ENDIF.

  IF lo_ex IS BOUND  OR sy-dbcnt = 0 OR l_hrqua = 'X'.

* -- get the whole qualification catalogue (multi level!)
    CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
      EXPORTING
        plvar                  = l_plvar
*   OTYPE                    =
*   OBJID                    =
*   FROM_DATE                = SY-DATUM
*   TO_DATE                  = SY-DATUM
*   DEPTH                    =
     IMPORTING
        return                 = ls_return
      TABLES
        qualificationdirectory = quali_group_list .
  ELSE.
    TRY.
        CALL FUNCTION 'BAPI_QUALIDIRECTORY_LIST'
          EXPORTING
            plvar                  = l_plvar
            view_id                = 'SAP_ERECRUITING'
*   OTYPE                    =
*   OBJID                    =
*   FROM_DATE                = SY-DATUM
*   TO_DATE                  = SY-DATUM
*   DEPTH                    =
         IMPORTING
            return                 = ls_return
          TABLES
            qualificationdirectory = quali_group_list .

      CATCH cx_sy_dyn_call_param_not_found.
    ENDTRY.
  ENDIF.

  IF ls_return-type IS NOT INITIAL.
    MOVE-CORRESPONDING ls_return TO ls_return_exp.
* Initial aim: DELETE E600(PQ) FROM TAB RETURN
*   APPEND ls_return_exp TO return.
    APPEND ls_return_exp TO lt_return.

* Don't raise error message if no qualification group is found
    IF ( ls_return_exp-id EQ 'PQ' ) AND       "N_1559679
       ( ls_return_exp-number EQ '620' ).
      CLEAR lt_return.
    ENDIF.                                    "N_1559679

    CALL METHOD cl_hrrcf_services_general=>get_error_messages
      EXPORTING
        pt_message = lt_return
      IMPORTING
        pt_error   = return.

*   IF ls_return-type = 'E'.
    IF NOT return IS INITIAL.
*-- only needed for where-used list and navigation
      IF 1 = 2.
        MESSAGE e071(hrrcf0001).
      ENDIF.

      RAISE EXCEPTION TYPE cx_hrrcf_qualification
          EXPORTING
          message_type = 'E'
          message_class = if_hrrcf_constants~msgcl_admin
          message_number = '071'
          .
    ENDIF.
  ENDIF.

  LOOP AT quali_group_list INTO wa_quali_groups.
    IF NOT ( wa_quali_groups-otype = 'QK' ).
      DELETE quali_group_list.
    ENDIF.
  ENDLOOP.

ENDMETHOD.
ENDCLASS.