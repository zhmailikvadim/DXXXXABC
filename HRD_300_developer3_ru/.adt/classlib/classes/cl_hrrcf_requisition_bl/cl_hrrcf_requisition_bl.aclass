class CL_HRRCF_REQUISITION_BL definition
  public
  final
  create public .

*"* public components of class CL_HRRCF_REQUISITION_BL
*"* do not include other source files here!!!
public section.

  interfaces IF_HRRCF_CONSTANTS .

  methods CONSTRUCTOR .
  methods CHANGE_REQ_STATUS
    importing
      !PS_REQUISITION type HROBJECT
      !P_NEW_STATUS type RCF_REQUISITION_STATUS
    exporting
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods CHECK_EXISTENCE_OF_REQUISITION
    importing
      !HROBJECT type HROBJECT
    returning
      value(PS_DATA_EXISTENCE) type RCF_S_REQUI_DATA_EXISTENCE
    raising
      CX_HRRCF .
  methods COPY_REQUISITION
    importing
      !USER type SYUNAME default SY-UNAME
      !ORIG_HROBJECT type HROBJECT
    returning
      value(NEW_HROBJECT) type HROBJECT
    raising
      CX_HRRCF .
  methods GET_REQ_BASIC_INFO_TEXT
    importing
      !HROBJECT type HROBJECT
      !LANGUAGE type SPRAS default SY-LANGU
    returning
      value(PS_REQ_BASIC_INFO_WT) type RCF_S_REQUISITION_INFO_TEXT
    raising
      CX_HRRCF .
  methods GET_REQ_JOB_INFO
    importing
      !HROBJECT type HROBJECT
    exporting
      !PS_REQ_JOB_INFO type RCF_S_REQ_JOB_INFO_TEXT
      !PS_VACANCY type OBJEKTID
    raising
      CX_HRRCF .
  methods GET_REQ_QUALIFICATION
    importing
      !HROBJECT type HROBJECT
    exporting
      !PT_SELECTED_QUALIFICATION type RCF_T_REQ_REQUIREMENTS
    raising
      CX_HRRCF .
  methods CREATE_REQUISITION
    importing
      !USER type SYUNAME default SY-UNAME
    exporting
      !HROBJECT type HROBJECT
      !REQ_INFO_REC type P5125
      !POSTING_INFO_REC type P5121
    raising
      CX_HRRCF .
  methods MAINTAIN_REQ_QUALIFICATION
    importing
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
      !PS_SELECTED_QUALIFICATION type P5129
    exporting
      !PS_RESULT type P5129
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods GET_ADD_QUALI
    importing
      !HROBJECT type HROBJECT
      !PS_REQUI_QUALIFICATION type P5129
      !P_LANGU type SPRAS default SY-LANGU
    exporting
      !PS_DESCRIPTION type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_REQUISITIONS
    importing
      !REQ_STATUS type RCF_REQUISITION_STATUS optional
      !USER type SYUNAME default SY-UNAME
    exporting
      !PT_REQUISITION_INFO type RCF_T_REQUISITION_INFO_TEXT
    raising
      CX_HRRCF .
  methods GET_CONTRACT_TYPE_LIST
    importing
      !LANGUAGE type SYLANGU
    returning
      value(CONTRACT_TYPE_LIST) type RCF_T_CONTRACT_TYPE_LIST
    raising
      CX_HRRCF_CUSTOMIZING
      CX_HRRCF .
  methods GET_FUNCTIONAL_AREA_LIST
    importing
      !LANGUAGE type SYLANGU optional
    returning
      value(FUNCTIONAL_AREA_LIST) type RCF_T_FUNCTIONAL_AREA_LIST
    raising
      CX_HRRCF_CUSTOMIZING
      CX_HRRCF .
  methods GET_HIERARCHY_LEVEL_LIST
    importing
      !LANGUAGE type SYLANGU default SY-LANGU
    returning
      value(HIERARCHY_LEVEL_LIST) type RCF_T_HIERARCHY_LEVEL_LIST
    raising
      CX_HRRCF_CUSTOMIZING
      CX_HRRCF .
  methods GET_NAME_OF_BRANCH
    importing
      !BRANCH_ID type BU_PARTNER
    returning
      value(BRANCH_NAME) type STRING
    raising
      CX_HRRCF .
  methods GET_ORGUNIT_LIST
    importing
      !MGR_USER type SYUNAME default SY-UNAME
    returning
      value(ORGUNIT_LIST) type RCF_T_ORGUNIT_LIST
    raising
      CX_HRRCF .
  methods GET_QUALI_GROUP_LIST
    returning
      value(QUALI_GROUP_LIST) type RCF_T_Q_OBJECT_WITH_NAME
    raising
      CX_HRRCF_QUALIFICATION
      CX_HRRCF .
  methods GET_QUALI_LEVEL_LIST
    importing
      !QUALI_GROUP type RCF_Q_ID
    returning
      value(QUALI_LEVEL_LIST) type RCF_T_PROFICIENCY
    raising
      CX_HRRCF .
  methods GET_QUALI_PER_QUALIGROUP
    importing
      !QUALI_GROUP type RCF_Q_ID
    returning
      value(QUALIFICATION_LIST) type RCF_T_Q_OBJECT_WITH_NAME
    raising
      CX_HRRCF_QUALIFICATION
      CX_HRRCF .
  methods GET_REQ_TASK_DESC
    importing
      !HROBJECT type HROBJECT
      !P_LANGU type SPRAS default SY-LANGU
    returning
      value(PS_DEPARTMENT_DESC) type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_REQ_REQUIREMENT_DESC
    importing
      !HROBJECT type HROBJECT
      !P_LANGU type SPRAS default SY-LANGU
    returning
      value(PS_DEPARTMENT_DESC) type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_REQ_HEADER_DESC
    importing
      !HROBJECT type HROBJECT
      !P_LANGU type SPRAS default SY-LANGU
    returning
      value(PS_DEPARTMENT_DESC) type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_REQ_DEPARTMENT_DESC
    importing
      !HROBJECT type HROBJECT
      !P_LANGU type SPRAS default SY-LANGU
    returning
      value(PS_DEPARTMENT_DESC) type RCF_S_ITF_DESCRIPTION
    raising
      CX_HRRCF .
  methods GET_REQ_POSTING_INFO_TEXT
    importing
      !HROBJECT type HROBJECT
    returning
      value(POSTING_INFO_WITH_TEXT) type RCF_S_POSTING_INFO_TEXT
    raising
      CX_HRRCF .
  methods GET_REQ_STATUS_LIST
    importing
      !LANGUAGE type SYLANGU optional
    returning
      value(REQ_STATUS_LIST) type RCF_T_REQ_STATUS_LIST
    raising
      CX_HRRCF_CUSTOMIZING
      CX_HRRCF .
  methods GET_VACANCY_OF_MGR_LIST
    importing
      !MGR_USER type SYUNAME default SY-UNAME
    returning
      value(VACANCY_LIST) type RCF_T_VACANCY_LIST
    raising
      CX_HRRCF .
  methods MAINTAIN_ADD_QUALI_TEXT
    importing
      !P_LANGU type SPRAS default SY-LANGU
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
      !PS_SELECTED_QUALIFICATION type P5129
      !P_DESCRIPTION type RCF_ITF_DESCRIPTION
    exporting
      !PS_RESULT type P5129
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_REQUISITION_DESC
    importing
      !P_LANGU type SPRAS default SY-LANGU
      !P_HEADER_DESC type RCF_ITF_DESCRIPTION
      !P_DEPARTMENT_DESC type RCF_ITF_DESCRIPTION
      !P_TASK_DESC type RCF_ITF_DESCRIPTION
      !P_REQUIREMENT_DESC type RCF_ITF_DESCRIPTION
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
    exporting
      !RETURN type BAPIRETTAB
      !PS_RESULT type P5121
    raising
      CX_HRRCF .
  methods MAINTAIN_REQUISITION_POSTING
    importing
      !REQ_OBJECT type HROBJECT
      !PS_REQ_BASIC_INFO type P5125
      !PS_REQ_JOB_INFO type P5126
      value(P_VACANCY) type OBJEKTID
    exporting
      !PS_RESULT_P5125 type P5125
      !RETURN type BAPIRETTAB
      !PS_RESULT_P5126 type P5126
    raising
      CX_HRRCF .
  methods ENQUEUE_REQUISITION
    importing
      !HROBJECT type HROBJECT
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods DEQUEUE_REQUISITION
    importing
      !HROBJECT type HROBJECT
    raising
      CX_HRRCF .
  methods DEQUEUE_ALL .
  methods ON_REQUISITION_UPDATE
    for event RCF_INFOTYPE_RECORD_CHANGED of CL_HRRCF_INFOTYPE
    importing
      !HRRCF_INFOTYPE_OBJECT
      !BEFORE_IMAGE .
protected section.
*"* protected components of class CL_HRRCF_REQUISITION_BL
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_REQUISITION_BL
*"* do not include other source files here!!!

  aliases DELETE
    for IF_HRRCF_CONSTANTS~DELETE_OPERATION .
  aliases FALSE
    for IF_HRRCF_CONSTANTS~FALSE .
  aliases HIGH_DATE
    for IF_HRRCF_CONSTANTS~HIGH_DATE .
  aliases INSERT
    for IF_HRRCF_CONSTANTS~INSERT_OPERATION .
  aliases LOW_DATE
    for IF_HRRCF_CONSTANTS~LOW_DATE .
  aliases MODIFY
    for IF_HRRCF_CONSTANTS~MODIFY_OPERATION .
  aliases MSGCL_ADMIN
    for IF_HRRCF_CONSTANTS~MSGCL_ADMIN .
  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS~MSGCL_USER .
  aliases TRUE
    for IF_HRRCF_CONSTANTS~TRUE .

  methods CREATE_INT_POSTING_INSTANCES
    importing
      !POSTING_INFORMATION type ref to CL_HRRCF_POSTING_INFORMATION
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods DELIMT_INT_POSTING_INSTANCES
    importing
      !POSTING_INFORMATION type ref to CL_HRRCF_POSTING_INFORMATION
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods DELIMT_INT_PUBLICATIONS
    importing
      !POSTING type ref to CL_HRRCF_POSTING
    raising
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF .
  methods HANDLE_RETURN_TAB
    changing
      !PT_RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods ASSIGN_VACANCY
    importing
      !P_VACANCY type OBJEKTID
      !REQ_ID type RCF_REQUISITION
    exporting
      !RETURN type BAPIRETTAB
      !ASSIGNED_POSITION type BOOLE_D
    raising
      CX_HRRCF .
  methods CHECK_EXISTENCE_REQ_INFO
    importing
      !HROBJECT type HROBJECT
    returning
      value(RETURN) type BOOLE_D
    raising
      CX_HRRCF .
  methods CHECK_EXISTENCE_REQUIREMENTS
    importing
      !HROBJECT type HROBJECT
    returning
      value(RETURN) type BOOLE_D
    raising
      CX_HRRCF .
  methods CHECK_EXISTENCE_VERBAL_DESC
    importing
      !HROBJECT type HROBJECT
    returning
      value(RETURN) type BOOLE_D
    raising
      CX_HRRCF .
  methods COPY_POST_INFO_TEXT
    importing
      !PO_OLD_POSTING_INFO type ref to CL_HRRCF_POSTING_INFORMATION
      !PS_OLD_POSTING_INFO type P5121
      !PV_FIELDNAME type FIELDNAME
      !PO_NEW_POSTING_INFO type ref to CL_HRRCF_POSTING_INFORMATION
    changing
      !PS_NEW_POSTING_INFO type P5121
    raising
      CX_HRRCF .
  methods GET_REQ_POSTING_INFO
    importing
      !HROBJECT type HROBJECT
    exporting
      !PS_POST_INFO_RECORD type P5121
      !PO_POSTING_INFO type ref to CL_HRRCF_POSTING_INFORMATION
    raising
      CX_HRRCF .
  methods GET_REQ_BASIC_INFO
    importing
      !HROBJECT type HROBJECT
    returning
      value(PS_REQ_BASIC_INFO) type P5125
    raising
      CX_HRRCF .
  class-methods GET_OTR_TEXT
    importing
      value(ALIAS) type STRING
    returning
      value(TEXT) type STRING .
  methods MAINTAIN_REQ_BASIC_INFO
    importing
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
      !PS_REQ_BASIC_INFO type P5125
    returning
      value(PS_RESULT) type P5125
    raising
      CX_HRRCF .
  methods COPY_POST_INFO_TEXTS
    importing
      !PO_OLD_POSTING_INFO type ref to CL_HRRCF_POSTING_INFORMATION
      !PS_OLD_POSTING_INFO type P5121
      !PO_NEW_POSTING_INFO type ref to CL_HRRCF_POSTING_INFORMATION
    changing
      !PS_NEW_POSTING_INFO type P5121
    raising
      CX_HRRCF .
  methods COPY_QUALI_TEXT
    importing
      !PS_OLD_HROBJECT type HROBJECT
      !PS_NEW_HROBJECT type HROBJECT
      !PS_OLD_QUALIFICATION type P5129
    changing
      !PS_NEW_QUALIFICATION type P5129
    raising
      CX_HRRCF .
  methods GET_BRANCH_ADDRESS
    importing
      !BRANCH_ID type BU_PARTNER
    returning
      value(ADDRESS) type RCF_S_BUPA_ADDRESSDATA_TEXT
    raising
      CX_HRRCF .
  methods GET_REQ_JOB_INFO_INTERN
    importing
      !HROBJECT type HROBJECT
    returning
      value(PS_REQ_JOB_INFO) type P5126
    raising
      CX_HRRCF .
  methods MAINTAIN_POSTING_INFO
    importing
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
      !PS_POST_INFO type P5121
    exporting
      !PS_RESULT type P5121
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods MAINTAIN_REQ_JOB_INFORMATION
    importing
      !OPERATION type RCF_OPERA
      !HROBJECT type HROBJECT
      !PS_REQ_JOB_INFO type P5126
    exporting
      !PS_RESULT type P5126
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods DELIMIT_VACANCY_ASSIGNMENT
    importing
      !REQUI_ID type RCF_REQUISITION
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
ENDCLASS.



CLASS CL_HRRCF_REQUISITION_BL IMPLEMENTATION.


METHOD assign_vacancy .
* Author: Claudia Staps / Andrea Sadreameli
*         XLV
* This method assigns a vacancy to a requisition
  DATA:
    l_plvar        TYPE        plvar,
    lo_requisition TYPE REF TO cl_hrrcf_requisition.
*
  CLEAR return.
  assigned_position = false.
*
* 1. check if the position is existing
  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.
*
  CALL FUNCTION 'RH_EXIST_OBJECT'
    EXPORTING
      plvar     = l_plvar
      otype     = 'S'
      objid     = p_vacancy
    EXCEPTIONS
      not_found = 1
      OTHERS    = 2.
*
* 2. No -> give the answer back to PC-Class
  IF NOT sy-subrc IS INITIAL.
    assigned_position = false.
    RETURN.
  ENDIF.
*
* 3. Yes -> create the relationship
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = req_id
    IMPORTING
      requisition = lo_requisition.
*
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION'.
  ENDIF.
*
  CALL METHOD lo_requisition->assign_vacancy
    EXPORTING
      position = p_vacancy
    IMPORTING
      return   = return.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
  assigned_position = true.
*
ENDMETHOD.


METHOD change_req_status .
* Author: Joachim Gross
* only valid for SAP Career Portal !!!!!
* XLV: Additional coding since the change of the status of the
*      requisition affects also the Posting Instances
* This method is not directy called from the UI-class, but from
* the associated BL-class, so we need not write any message to the LOG
* but simply raise exceptions
  CONSTANTS:
    c_draft          TYPE        rcf_posting_status VALUE '0',
    c_released       TYPE        rcf_posting_status VALUE '1',
    c_closed         TYPE        rcf_posting_status VALUE '2',
    c_to_be_deleted  TYPE        rcf_posting_status VALUE '3'.

  DATA:
    lo_ex            TYPE REF TO cx_hrrcf,
    lo_req           TYPE REF TO cl_hrrcf_requisition,
    lo_pos           TYPE REF TO cl_hrrcf_posting,
    lo_req_i         TYPE REF TO cl_hrrcf_requisition_info,
    lo_pos_i         TYPE REF TO cl_hrrcf_posting_information,
    l_req_status     TYPE        rcf_requisition_status,
    l_pos_status     TYPE        rcf_posting_status,
    lt_pos_list      TYPE        rcf_t_posting,
    l_mes_par1       TYPE        sy-msgv1,
    l_mes_par2       TYPE        sy-msgv2,
    lt_return        TYPE        bapirettab.

  CLEAR pt_return. REFRESH pt_return.

  CHECK ps_requisition IS NOT INITIAL.

***********************************************************************
* collect data
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = ps_requisition-objid
    IMPORTING
      requisition = lo_req.

  IF lo_req IS INITIAL.
    IF 1 = 0.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = ps_requisition
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION' .
  ENDIF.

  CALL METHOD lo_req->get_requisition_status
    IMPORTING
      p_status = l_req_status.

  CALL METHOD lo_req->get_postings
    IMPORTING
      posting_list = lt_pos_list.

* In CP table lt_pos must have exactly one entry
  READ TABLE lt_pos_list INDEX 1 INTO lo_pos.
  IF sy-subrc IS NOT INITIAL.
    IF 1 = 0.
      MESSAGE e060(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = lo_req->hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '060'.
  ENDIF.

  CALL METHOD lo_pos->get_posting_status
    IMPORTING
      p_status = l_pos_status.

* verify situation
  IF l_pos_status NE l_req_status.
* raise exception on inconsistency
* No, simply write message to LOG
    TRY.
        l_mes_par1 = lo_req->hrobject.
        l_mes_par2 = lo_pos->hrobject.
        IF 1 = 0.
          MESSAGE e068(hrrcf0001) WITH l_mes_par1 l_mes_par2.
        ENDIF.
        RAISE EXCEPTION TYPE cx_hrrcf
         EXPORTING
           hrobject       = lo_req->hrobject
           message_type   = 'E'
           message_class  = msgcl_admin
           message_number = '068'
           message_par1   = l_mes_par1
           message_par2   = l_mes_par2.
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
    ENDTRY.
  ENDIF.

***********************************************************************
* If the old status and the new status is the same
* no further processing is required
  IF p_new_status EQ l_req_status.
    RETURN.
  ENDIF.

***********************************************************************
* Now check the relevant insert with check_only

* get the instances as preparation
  CALL METHOD cl_hrrcf_requisition_info=>get_instance
    EXPORTING
      hrobject = lo_req->hrobject
    IMPORTING
      instance = lo_req_i.
  CALL METHOD cl_hrrcf_posting_information=>get_instance
    EXPORTING
      hrobject = lo_pos->hrobject
    IMPORTING
      instance = lo_pos_i.

* checks
* first check: req_info
  CALL METHOD lo_req_i->change_status
    EXPORTING
      p_new_status = p_new_status
      p_check_only = true
    IMPORTING
      pt_return    = lt_return.

  CALL METHOD me->handle_return_tab
    CHANGING
      pt_return = lt_return.

  IF NOT lt_return IS INITIAL.
    pt_return = lt_return.
    RETURN.
  ENDIF.

* second check: posting_info
* As of e-recruiting 1.0 the possible status of the
* posting depends on the status of the requisition. Since
* the requisition status on the data base is still the old
* one, the check would give a wrong result ==>
* deactivate the check (XLV, 26.8.2002)
*  CALL METHOD lo_pos_i->change_status
*    EXPORTING
*      p_new_status = p_new_status
*      p_check_only = true
*    IMPORTING
*      pt_return    = lt_return.
*
*  CALL METHOD me->handle_return_tab
*    CHANGING
*      pt_return = lt_return.
*
*  IF NOT lt_return IS INITIAL.
*    pt_return = lt_return.
*    RETURN.
*  ENDIF.

***********************************************************************
* checks are done, so do the change now
  CALL METHOD lo_req_i->change_status
    EXPORTING
      p_new_status = p_new_status
      p_check_only = false
    IMPORTING
      pt_return    = lt_return.
  pt_return = lt_return.

  CALL METHOD lo_pos_i->change_status
    EXPORTING
      p_new_status = p_new_status
      p_check_only = false
    IMPORTING
      pt_return    = lt_return.
  IF NOT lt_return IS INITIAL.
    APPEND LINES OF lt_return TO pt_return.
  ENDIF.

  DELETE pt_return WHERE type NE 'E' AND type NE 'A' .

* XLV:
* After the Posting information is released, the Posting Instances
* the internal Posting Channel and for all languages must be created
* and released.
* If the previous status was 'released' the publication period in the
* publication table and the IT-records should be delimited.
  IF  l_req_status = c_released.         "record was released
    delimt_int_publications( lo_pos ).
  ELSEIF p_new_status = c_released.      "record will be released
    create_int_posting_instances( lo_pos_i ).
  ENDIF.

ENDMETHOD.


METHOD check_existence_of_requisition .
* Author: Claudia Staps
*         XLV
* This method is not directy called from the UI-class, but from
* the associated BL-class, so we need not write any message to the LOG
* but simply raise exceptions
  DATA:
    ls_exist TYPE rcf_s_requi_data_existence.
*
  CHECK hrobject IS NOT INITIAL.
*
* check existence of IT 5125/5126
  ls_exist-basic_info = check_existence_req_info( hrobject ).
*
* check existence of IT 5129
  ls_exist-requirements = check_existence_requirements( hrobject ).
*
* check existence of IT 5121
  ls_exist-descriptions = CHECK_EXISTENCE_VERBAL_DESC( hrobject ).
*
  MOVE ls_exist TO ps_data_existence.
*
ENDMETHOD.


METHOD check_existence_requirements .
* Author Claudia Staps
*        XLV
  DATA:
    lo_req_requirements TYPE REF TO cl_hrrcf_req_qualification,
    lt_req_requirements TYPE        rcf_t_req_requirements,
    lineno              TYPE        i.
*
  return = false.
*
* get a data record from IT 5129
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_requirements.

  IF lo_req_requirements IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQ_QUALIFICATION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQ_QUALIFICATION'.
*
  ELSE.
    CALL METHOD lo_req_requirements->get_records_by_date
      EXPORTING
        date             = sy-datum
      IMPORTING
        infotype_records = lt_req_requirements.
*
    DESCRIBE TABLE lt_req_requirements LINES lineno.
    IF lineno <> 0.
      return = true.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD check_existence_req_info .
* Author: Irantzu Mendizabal
*         XLV
  DATA:
    lo_requisition    TYPE REF TO cl_hrrcf_requisition,
    lo_req_job_info   TYPE REF TO cl_hrrcf_job_information,
    lo_req_basic_info TYPE REF TO cl_hrrcf_requisition_info,
    ls_req_basic_info TYPE        p5125,
    ls_req_job_info   TYPE        p5126,
    lt_req_vacancy    TYPE        rcf_t_requisition_vacancy,
    lt_req_basic_info TYPE        rcf_t_requisition_info,
    lt_req_job_info   TYPE        rcf_t_req_job_info.
*
  return = false.
*
* HRP5125 - Basic Information
  CALL METHOD cl_hrrcf_requisition_info=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_basic_info.
  IF lo_req_basic_info IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION_INFO'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION_INFO'.
  ENDIF.
*
  CALL METHOD lo_req_basic_info->get_records_by_date
    EXPORTING
      date             = sy-datum
    IMPORTING
      infotype_records = lt_req_basic_info.
*
* The tables should only contain one record for the Career Portal
* We read the record and look at the fields we need to see if they are
* INITIAL. As soon as one of them has content, return = true.
*
  READ TABLE lt_req_basic_info INTO ls_req_basic_info INDEX 1.
  IF sy-subrc NE '0'.
* Preliminary; we need a special message since this record
* must exist.
    RAISE EXCEPTION TYPE cx_hrrcf.
  ELSE.
    IF NOT ls_req_basic_info-header     IS INITIAL OR
       NOT ls_req_basic_info-req_alias  IS INITIAL OR
       NOT ls_req_basic_info-orgid      IS INITIAL.
      return = true.
      RETURN.
    ENDIF.
  ENDIF.
*
* HRP5126 - Job Information
  CALL METHOD cl_hrrcf_job_information=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_job_info.
  IF lo_req_job_info IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_JOB_INFORMATION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_JOB_INFORMATION' .
  ENDIF.
*
  CALL METHOD lo_req_job_info->get_records_by_date
    EXPORTING
      date             = sy-datum
    IMPORTING
      infotype_records = lt_req_job_info.
*
  READ TABLE lt_req_job_info INTO ls_req_job_info INDEX 1.
* This record need not exist .
  IF sy-subrc IS INITIAL.
    IF NOT ls_req_job_info-jobtitle        IS INITIAL OR
       NOT ls_req_job_info-hierarchy_level IS INITIAL OR
       NOT ls_req_job_info-functional_area IS INITIAL OR
       NOT ls_req_job_info-contract_type   IS INITIAL OR
       NOT ls_req_job_info-branch          IS INITIAL OR
       NOT ls_req_job_info-payment_info    IS INITIAL OR
       NOT ls_req_job_info-empl_start_date IS INITIAL .
      return = true.
      RETURN.
    ENDIF.
  ENDIF.
*
* Vacancies are assigned to the requisition object, not to an infotype
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = hrobject-objid
    IMPORTING
      requisition = lo_requisition.
*
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION' .
  ENDIF.
*
  CALL METHOD lo_requisition->get_vacancy_of_requisition
    IMPORTING
      vacancy_list = lt_req_vacancy.
*
  IF NOT lt_req_vacancy IS INITIAL.
    return = true.
    RETURN.
  ENDIF.
*
ENDMETHOD.


METHOD check_existence_verbal_desc .
* Author Claudia Staps
*        XLV
  DATA:
    lo_requisition         TYPE REF TO cl_hrrcf_requisition,
    lt_pos_list            TYPE        rcf_t_posting,
    lo_pos                 TYPE REF TO cl_hrrcf_posting,
    lo_pos_i               TYPE REF TO cl_hrrcf_posting_information,
    lt_posting_info        TYPE        rcf_t_posting_information,
    ls_posting_information TYPE        rcf_s_posting_info_text.
*
  return = false.
*
*get posting/posting information
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = hrobject-objid
    IMPORTING
      requisition = lo_requisition.
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION'.
  ENDIF.
*
  CALL METHOD lo_requisition->get_postings
    IMPORTING
      posting_list = lt_pos_list.
*
  READ TABLE lt_pos_list INDEX 1 INTO lo_pos.
  IF NOT sy-subrc IS INITIAL.
    IF 1 = 2.
      MESSAGE e060(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '060' .
  ENDIF.
*
  CALL METHOD cl_hrrcf_posting_information=>get_instance
    EXPORTING
      hrobject = lo_pos->hrobject
    IMPORTING
      instance = lo_pos_i.
  IF lo_pos_i IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_POSTING_INFORMATION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_POSTING_INFORMATION'.
  ENDIF.
*
  CALL METHOD lo_pos_i->get_records_by_date
    EXPORTING
      date             = sy-datum
    IMPORTING
      infotype_records = lt_posting_info.
*
* check if descriptions fields are filled
  READ TABLE lt_posting_info INDEX 1 INTO ls_posting_information.
  IF sy-subrc IS INITIAL.
    IF NOT ls_posting_information-department_desc  IS INITIAL OR
       NOT ls_posting_information-task_desc        IS INITIAL OR
       NOT ls_posting_information-requirement_desc IS INITIAL OR
       NOT ls_posting_information-header           IS INITIAL.
      return = true.
    ENDIF.
  ENDIF.
*
ENDMETHOD.


METHOD constructor .
*
* Register listener for changes of the requisition/posting
  SET HANDLER on_requisition_update FOR ALL INSTANCES.
*
ENDMETHOD.


METHOD copy_post_info_text .
  DATA:
    lt_langu            TYPE          rcf_t_langu,
    ls_langu            TYPE          rcf_s_langu,
    lv_doc_langu        TYPE          spras,
    lv_read_langu       TYPE          spras,
    lv_text             TYPE          rcf_itf_description.

  CALL METHOD po_old_posting_info->read_text
    EXPORTING
      fieldname                   = pv_fieldname
      infotype_record             = ps_old_posting_info
    IMPORTING
      langu_tab                   = lt_langu .
*
  LOOP AT lt_langu INTO ls_langu.
    CLEAR:
      lv_text,
      lv_doc_langu.
    lv_read_langu = ls_langu.
    CALL METHOD po_old_posting_info->read_text
      EXPORTING
        fieldname       = pv_fieldname
        infotype_record = ps_old_posting_info
        langu           = lv_read_langu
      IMPORTING
        text            = lv_text
        doc_langu       = lv_doc_langu.
    IF lv_doc_langu = ls_langu.
      CALL METHOD po_new_posting_info->update_text
        EXPORTING
          text            = lv_text
          fieldname       = pv_fieldname
          langu           = lv_doc_langu
        CHANGING
          infotype_record = ps_new_posting_info.
    ENDIF.
  ENDLOOP.
*
ENDMETHOD.


METHOD copy_post_info_texts .
*
  IF NOT ps_old_posting_info-header IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'HEADER'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-org_name IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'ORG_NAME'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-company_desc IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'COMPANY_DESC'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-department_desc IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'DEPARTMENT_DESC'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-project_desc IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'PROJECT_DESC'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-task_desc IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'TASK_DESC'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
  IF NOT ps_old_posting_info-requirement_desc IS INITIAL.
    CALL METHOD me->copy_post_info_text
      EXPORTING
        po_old_posting_info = po_old_posting_info
        ps_old_posting_info = ps_old_posting_info
        pv_fieldname        = 'REQUIREMENT_DESC'
        po_new_posting_info = po_new_posting_info
      CHANGING
        ps_new_posting_info = ps_new_posting_info.
  ENDIF.
*
ENDMETHOD.


METHOD copy_quali_text .
  CONSTANTS:
    c_fieldname         TYPE          fieldname VALUE 'ADD_QUALI'.
*
  DATA:
    lt_langu            TYPE          rcf_t_langu,
    ls_langu            TYPE          rcf_s_langu,
    lv_doc_langu        TYPE          spras,
    lv_read_langu       TYPE          spras,
    lv_text             TYPE          rcf_itf_description,
    lo_old_requi_quali  TYPE REF TO   cl_hrrcf_req_qualification,
    lo_new_requi_quali  TYPE REF TO   cl_hrrcf_req_qualification.
*
*  1.- Get the old instance.
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = ps_old_hrobject
    IMPORTING
      instance = lo_old_requi_quali.
  IF lo_old_requi_quali IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = ps_old_hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ENDIF.
*
*  2.- Get the new instance.
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = ps_new_hrobject
    IMPORTING
      instance = lo_new_requi_quali.
  IF lo_new_requi_quali IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = ps_new_hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ENDIF.
*
*  3.- Read all languages in which a KW-document is available.
  CALL METHOD lo_old_requi_quali->read_text
    EXPORTING
      fieldname       = c_fieldname
      infotype_record = ps_old_qualification
    IMPORTING
      langu_tab       = lt_langu.
*
*  4.- Read old text ina certain language and store it
  LOOP AT lt_langu INTO ls_langu.
    CLEAR:
      lv_text,
      lv_doc_langu.
    lv_read_langu = ls_langu.
    CALL METHOD lo_old_requi_quali->read_text
      EXPORTING
        fieldname       = c_fieldname
        infotype_record = ps_old_qualification
        langu           = lv_read_langu
      IMPORTING
        text            = lv_text
        doc_langu       = lv_doc_langu.
    IF lv_doc_langu = ls_langu.
      CALL METHOD lo_new_requi_quali->update_text
        EXPORTING
          text            = lv_text
          fieldname       = c_fieldname
          langu           = lv_doc_langu
        CHANGING
          infotype_record = ps_new_qualification.
    ENDIF.
  ENDLOOP.
*
ENDMETHOD.


METHOD copy_requisition .
* Author: Claudia Staps
*         Andrea Sadreameli
*         XLV
  DATA:
    ls_req_info          TYPE          p5125,
    ls_req_job_info      TYPE          p5126,
    lt_qualification     TYPE          rcf_t_req_requirements,
    ls_qualification     TYPE          p5129,
    ls_posting_info      TYPE          p5121,
    text_copy            TYPE          string,
    ls_new_requisition   TYPE          p5125,
    ls_new_req_job_info  TYPE          p5126,
    ls_new_qualification TYPE          p5129,
    ls_new_posting_info  TYPE          p5121,
    lo_new_req_job_info  TYPE REF TO   cl_hrrcf_job_information,
    lo_new_posting_info  TYPE REF TO   cl_hrrcf_posting_information,
    lo_posting_info      TYPE REF TO   cl_hrrcf_posting_information.

***********************************************************************
* get all Information of IT 5121
  CALL METHOD get_req_posting_info
    EXPORTING
      hrobject            = orig_hrobject
    IMPORTING
      ps_post_info_record = ls_posting_info
      po_posting_info     = lo_posting_info.

***********************************************************************
* get all Information of IT 5125
  ls_req_info = me->get_req_basic_info( orig_hrobject ).

***********************************************************************
* get all Information of IT 5126
  ls_req_job_info = get_req_job_info_intern( orig_hrobject ).

***********************************************************************
* get all information of IT 5129
  CALL METHOD get_req_qualification
    EXPORTING
      hrobject                  = orig_hrobject
    IMPORTING
      pt_selected_qualification = lt_qualification.

***********************************************************************
* get the OTR text of the first part of the header of the new
* requisition
  text_copy = get_otr_text( 'paoc_rcf_ui/copy_req' ).
*
***********************************************************************
* create a new requisition, posting, ...
  CALL METHOD create_requisition
    EXPORTING
      user             = user
    IMPORTING
      hrobject         = new_hrobject
      req_info_rec     = ls_new_requisition
      posting_info_rec = ls_new_posting_info.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject        = new_hrobject
    IMPORTING
      po_posting_info = lo_new_posting_info.

***********************************************************************
* update requisition information
  CONCATENATE text_copy ls_req_info-header INTO
    ls_new_requisition-header.
*
  ls_new_requisition = maintain_req_basic_info(
       operation         = modify
       hrobject          = new_hrobject
       ps_req_basic_info = ls_new_requisition ).
* This should be enough since in CP IT5125 carries no KW-pointer
*
***********************************************************************
* update posting information
  MOVE ls_posting_info-org_website TO ls_new_posting_info-org_website.
  MOVE ls_posting_info-region   TO ls_new_posting_info-region  .
  MOVE ls_posting_info-country TO ls_new_posting_info-country.
  MOVE ls_posting_info-functional_area TO
       ls_new_posting_info-functional_area.
  MOVE ls_posting_info-industry TO ls_new_posting_info-industry.
  MOVE ls_posting_info-working_time TO
       ls_new_posting_info-working_time  .
  MOVE ls_posting_info-contract_type TO
       ls_new_posting_info-contract_type.

  CALL METHOD me->copy_post_info_texts
    EXPORTING
      po_old_posting_info = lo_posting_info
      ps_old_posting_info = ls_posting_info
      po_new_posting_info = lo_new_posting_info
    CHANGING
      ps_new_posting_info = ls_new_posting_info.

* Finally the IT-record with all pointer must be updated
  CALL METHOD lo_new_posting_info->update_record
*  IMPORTING
*    RETURN                      =
    CHANGING
      infotype_record             = ls_new_posting_info.

***********************************************************************
* insert job information (IT5126)
  IF NOT ls_req_job_info-hri5126 IS INITIAL.
    ls_new_req_job_info-hri5126 = ls_req_job_info-hri5126.
    ls_new_req_job_info-begda   = sy-datum.
    ls_new_req_job_info-endda   = high_date.
    CALL METHOD cl_hrrcf_job_information=>get_instance
      EXPORTING
        hrobject = new_hrobject
      IMPORTING
        instance = lo_new_req_job_info.
    IF lo_new_req_job_info IS INITIAL.
      IF 1 = 2. "Only for where used list
        MESSAGE e090(hrrcf0001) WITH '&'.
*       Das Objekt &1 konnte nicht instanziiert werden
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = new_hrobject
          message_type   = 'E'
          message_class  = msgcl_admin
          message_number = '090'.
    ENDIF.
    CALL METHOD lo_new_req_job_info->insert_record
*  IMPORTING
*    RETURN                      =
      CHANGING
        infotype_record             = ls_new_req_job_info .
* For CP this should be enough since no KW-pointer are maintained
  ENDIF.

***********************************************************************
* insert required qualification (IT5129)
  IF NOT lt_qualification IS INITIAL.
    LOOP AT lt_qualification INTO ls_qualification.
      ls_new_qualification-hri5129 = ls_qualification-hri5129.
      CLEAR ls_new_qualification-add_quali.
      IF NOT ls_qualification-add_quali IS INITIAL.
        CALL METHOD me->copy_quali_text
          EXPORTING
            ps_old_hrobject      = orig_hrobject
            ps_new_hrobject      = new_hrobject
            ps_old_qualification = ls_qualification
          CHANGING
            ps_new_qualification = ls_new_qualification.
      ENDIF.
      CALL METHOD me->maintain_req_qualification
        EXPORTING
          operation                 = insert
          hrobject                  = new_hrobject
          ps_selected_qualification = ls_new_qualification
*     IMPORTING
*       PS_RESULT                 =
*       RETURN                    =
          .
    ENDLOOP.
  ENDIF.
*
ENDMETHOD.


METHOD create_int_posting_instances .
* Author: XLV
  DATA:
    lt_return          TYPE          bapirettab,
    ls_return          TYPE          bapiret2,
    lt_p5122           TYPE TABLE OF p5122,
    ls_p5122           TYPE          p5122,
    ls_p5122_pattern   TYPE          p5122,
    lo_post_inst       TYPE REF TO   cl_hrrcf_posting_instance,
    lo_ex              TYPE REF TO   cx_hrrcf,
    lv_langu           TYPE          rcf_s_langu,
    lt_languages       TYPE          rcf_t_langu,
    lt_all_langu       TYPE          rcf_t_langu,
    lt_p5121           TYPE TABLE OF p5121,
    ls_p5121           TYPE          p5121,
    lv_lines           TYPE          i.
*
  CALL METHOD posting_information->get_records_by_date
    IMPORTING
      infotype_records = lt_p5121.
*
  DESCRIBE TABLE lt_p5121 LINES lv_lines.
*
  IF lv_lines = 1.
    READ TABLE lt_p5121 INTO ls_p5121 INDEX 1.
*
    IF NOT ls_p5121-header IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'HEADER'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*
    IF NOT ls_p5121-company_desc IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'COMPANY_DESC'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*
    IF NOT ls_p5121-department_desc IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'DEPARTMENT_DESC'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*
    IF NOT ls_p5121-project_desc IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'PROJECT_DESC'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*
    IF NOT ls_p5121-task_desc IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'TASK_DESC'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*
    IF NOT ls_p5121-requirement_desc IS INITIAL.
      CALL METHOD posting_information->read_text
        EXPORTING
          fieldname       = 'REQUIREMENT_DESC'
          infotype_record = ls_p5121
        IMPORTING
          langu_tab       = lt_languages.
      APPEND LINES OF lt_languages TO lt_all_langu.
    ENDIF.
*

*-- lt_all_langu may contain the same languge key several times =>
*   Delete some entries
    SORT lt_all_langu.
    DELETE ADJACENT DUPLICATES FROM lt_all_langu.
*
***********************************************************************
*-- Create one record of posting instance for each language
*   for the internal posting channel
***********************************************************************
    CALL METHOD cl_hrrcf_posting_instance=>get_instance
      EXPORTING
        hrobject = posting_information->hrobject
      IMPORTING
        instance = lo_post_inst.
    IF lo_post_inst IS INITIAL.
      IF 1 = 2.
        MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_POSTING_INSTANCE'.
*           Das Objekt &1 konnte nicht instanziiert werden
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = posting_information->hrobject
          message_class  = msgcl_admin "'HRRCF0001'
          message_number = '090'
          message_par1   = 'CL_HRRCF_POSTING_INSTANCE'.
    ENDIF.
*
* Fill Infotype record pattern
    MOVE-CORRESPONDING posting_information->hrobject
      TO ls_p5122_pattern.
    ls_p5122_pattern-begda           = sy-datum.
    ls_p5122_pattern-endda           = high_date.
    ls_p5122_pattern-start_date      = sy-datum.
    ls_p5122_pattern-end_date        = high_date.
    ls_p5122_pattern-posting_channel = '0001'.     "internal publication
*
    LOOP AT lt_all_langu INTO lv_langu.
      ls_p5122          = ls_p5122_pattern.
      ls_p5122-language = lv_langu-langu.
      TRY.
          CALL METHOD lo_post_inst->insert_record
            CHANGING
              infotype_record = ls_p5122.
        CATCH cx_hrrcf INTO lo_ex.
          cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
          CONTINUE.
      ENDTRY.
      APPEND ls_p5122 TO lt_p5122.
    ENDLOOP.
*
    LOOP AT lt_p5122 INTO ls_p5122.
      CLEAR lt_return.
      TRY.
          CALL METHOD lo_post_inst->change_status
            EXPORTING
              new_status     = '1'
              current_record = ls_p5122
            IMPORTING
              return         = lt_return.
          DELETE lt_return WHERE type NE 'E' AND type NE 'A'.
          IF NOT lt_return IS INITIAL.
            READ TABLE lt_return INTO ls_return INDEX 1.
            RAISE EXCEPTION TYPE cx_hrrcf
              EXPORTING
                hrobject       = lo_post_inst->hrobject
                message_type   = ls_return-type
                message_class  = ls_return-id
                message_number = ls_return-number
                message_par1   = ls_return-message_v1
                message_par2   = ls_return-message_v2
                message_par3   = ls_return-message_v3
                message_par4   = ls_return-message_v4.
          ENDIF.
        CATCH cx_hrrcf INTO lo_ex.
          cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
          CONTINUE.
      ENDTRY.
    ENDLOOP.
*
  ELSE.
*   Preliminary
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = posting_information->hrobject.
  ENDIF.
*
ENDMETHOD.


METHOD create_requisition .
*Author : Subramanian, Ganapathy
*         XLV
*This method creates a requisition object, also a posting object and
*establishes the relation between the two
  CONSTANTS:
    c_manager_role         TYPE        rcf_role VALUE '0002' .

  DATA:
    lo_requisition         TYPE REF TO cl_hrrcf_requisition ,
    lo_posting             TYPE REF TO cl_hrrcf_posting ,
    lo_req_role            TYPE REF TO cl_hrrcf_requisition_role ,
    lo_exception           TYPE REF TO cx_hrrcf.
*
  DATA:
    ls_p5125               TYPE        p5125 ,
    ls_p5131               TYPE        p5131 ,
    ls_p5121               TYPE        p5121 ,
    lt_return              TYPE        bapirettab,
    lt_return_all          TYPE        bapirettab.
*
  TRY.
*    Create a requisition object
      CALL METHOD cl_hrrcf_requisition=>create
        IMPORTING
          requisition = lo_requisition
          return      = lt_return.
      DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
      lt_return_all = lt_return.
*
*    Create Posting for requisition. For Career portal
*    every requisition has a posting along with it
      IF NOT lo_requisition IS INITIAL AND
             lt_return      IS INITIAL.
        CALL METHOD cl_hrrcf_posting=>create
          IMPORTING
            posting = lo_posting
            return  = lt_return.
        DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
        APPEND LINES OF lt_return TO lt_return_all.
      ENDIF.
    CATCH cx_hrrcf INTO lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log(
                                        lo_exception ).
  ENDTRY.
*
  IF NOT lo_exception  IS INITIAL OR
     NOT lt_return_all IS INITIAL OR
     lo_requisition    IS INITIAL OR
     lo_posting        IS INITIAL.
    CLEAR:
      lt_return_all,
      lo_exception.
*   Delete objects as the create has failed and exception is raised
    IF NOT lo_requisition IS INITIAL .         "requisition is created
*     Delete Requistion object
      TRY.
          CALL METHOD lo_requisition->delete.
        CATCH cx_hrrcf INTO lo_exception.
          cl_hrrcf_exception_handler=>write_exception_log(
                                            lo_exception ).
      ENDTRY.
    ENDIF .
*
    IF NOT lo_posting IS INITIAL .               "Posting is created
*     Delete Posting object
      TRY.
          CALL METHOD lo_posting->delete.
        CATCH cx_hrrcf INTO lo_exception.
          cl_hrrcf_exception_handler=>write_exception_log(
                                            lo_exception ).
      ENDTRY.
    ENDIF .
    RAISE EXCEPTION TYPE cx_hrrcf .
  ENDIF.

* Objects created successfully ==> Create all necessary ITs
*   Assign this posting to the requisition
  TRY.
      CALL METHOD lo_requisition->assign_posting
        EXPORTING
          posting = lo_posting
        IMPORTING
          return  = lt_return.
      DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
      APPEND LINES OF lt_return TO lt_return_all.
*
*     Assign Requisition to status '0' ---> Draft
      MOVE '0'                  TO ls_p5125-status.
      CONCATENATE lo_requisition->my_otext lo_requisition->name
        INTO ls_p5125-header SEPARATED BY space.  "default header
*
        ls_p5125 =  me->maintain_req_basic_info(
            operation         = insert
            hrobject          = lo_requisition->hrobject
            ps_req_basic_info = ls_p5125 ).
*
*     Assign the role manager to this requisition and make an entry in
*     Infotype 5131
      CALL METHOD cl_hrrcf_requisition_role=>get_instance
        EXPORTING
          hrobject = lo_requisition->hrobject
        IMPORTING
          instance = lo_req_role.

      MOVE sy-datum        TO ls_p5131-begda .
      MOVE high_date       TO ls_p5131-endda .
      MOVE c_manager_role  TO ls_p5131-role .
      MOVE 'US'            TO ls_p5131-sclas .
      MOVE user            TO ls_p5131-sobid .

      CALL METHOD lo_req_role->insert_record
        EXPORTING
          check_only      = space
        IMPORTING
          return          = lt_return
        CHANGING
          infotype_record = ls_p5131.
      DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
      APPEND LINES OF lt_return TO lt_return_all.
*
* Create Posting Information
      MOVE '0'        TO ls_p5121-status .
*
      CALL METHOD me->maintain_posting_info
        EXPORTING
          operation    = insert
          hrobject     = lo_requisition->hrobject
          ps_post_info = ls_p5121
        IMPORTING
          PS_RESULT    = ls_p5121
          RETURN       = lt_return.
      DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
      APPEND LINES OF lt_return TO lt_return_all.
    CATCH cx_hrrcf INTO lo_exception.
      cl_hrrcf_exception_handler=>write_exception_log(
                                        lo_exception ).
  ENDTRY.


  IF NOT lo_exception  IS INITIAL OR
     NOT lt_return_all IS INITIAL.
*     Delete objects
    TRY.
*       Delete Requistion object
        CALL METHOD lo_requisition->delete.
*       Delete Posting object
        CALL METHOD lo_posting->delete.
      CATCH cx_hrrcf INTO lo_exception.
        cl_hrrcf_exception_handler=>write_exception_log(
                                          lo_exception ).
    ENDTRY.
    RAISE EXCEPTION TYPE cx_hrrcf .
  ELSE .
*     Pass the HROBJECT to the Interface
    MOVE lo_requisition->hrobject TO hrobject .
    MOVE ls_p5125                 TO req_info_rec.
    MOVE ls_p5121                 TO posting_info_rec.
  ENDIF .
*
ENDMETHOD.


METHOD delimit_vacancy_assignment .
  DATA:
    lt_return       TYPE        bapirettab,
    l_vacancy_objid TYPE        objektid,
    lt_vacancy_list TYPE        rcf_t_requisition_vacancy,
    ls_vacancy      TYPE        rcf_s_requisition_vacancy,
    lo_requisition  TYPE REF TO cl_hrrcf_requisition.
*
  CLEAR: return.
*
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = requi_id
    IMPORTING
      requisition = lo_requisition.
*
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION'.
  ENDIF.
*
  CALL METHOD lo_requisition->get_vacancy_of_requisition
    IMPORTING
      vacancy_list = lt_vacancy_list.
*
  LOOP AT lt_vacancy_list INTO ls_vacancy.
    REFRESH lt_return.
    l_vacancy_objid = ls_vacancy-sobid.
    CALL METHOD lo_requisition->delimit_vacancy
      EXPORTING
        position = l_vacancy_objid
      IMPORTING
        return   = lt_return.
    APPEND LINES OF lt_return TO return.
  ENDLOOP.
*
ENDMETHOD.


METHOD delimt_int_posting_instances .
* Author: XLV
  DATA:
    ls_key               TYPE          hrikey,
    lt_p5122             TYPE TABLE OF p5122,
    ls_p5122             TYPE          p5122,
    lo_ex                TYPE REF TO   cx_hrrcf,
    lo_posting_instance  TYPE REF TO   cl_hrrcf_posting_instance.

  CALL METHOD cl_hrrcf_posting_instance=>get_instance
    EXPORTING
      hrobject = posting_information->hrobject
    IMPORTING
      instance = lo_posting_instance.
  IF lo_posting_instance IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_POSTING_INSTANCE'.
*         Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = posting_information->hrobject
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_POSTING_INSTANCE'.
  ENDIF.
*
  CALL METHOD lo_posting_instance->get_records_by_date
    IMPORTING
      infotype_records = lt_p5122.
*
  DELETE lt_p5122 WHERE status          NE '1'     "released
                  AND   posting_channel NE '0001'. "internal
*
  CHECK NOT lt_p5122 IS INITIAL.
*
  LOOP AT lt_p5122 INTO ls_p5122 WHERE
     start_date LE sy-datum AND
     end_date   GE sy-datum.
    TRY.
        IF ls_p5122-start_date = sy-datum.
*   Publications of the same day will be deleted.
          CALL METHOD lo_posting_instance->delete_record
            CHANGING
              infotype_record = ls_p5122.
        ELSE.
*   At the moment the publication is delimited it should not be
*   available. To achieve this the end of the publication period
*   is set to the previous day.
          ls_p5122-end_date   = sy-datum - 1.
          ls_p5122-status     = '2'.          "closed
          CALL METHOD lo_posting_instance->update_record
            CHANGING
              infotype_record = ls_p5122.
          CLEAR ls_key.
          MOVE-CORRESPONDING ls_p5122 TO ls_key.
        ENDIF.
        cl_hrrcf_t77rcf_int_pub=>delimit_record( ls_key ).
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
        CONTINUE.
    ENDTRY.
  ENDLOOP.
*
ENDMETHOD.


METHOD delimt_int_publications .
* Author: XLV
  CONSTANTS:
    c_post_ch_int TYPE          rcf_posting_channel VALUE '0001',
    c_released    TYPE          rcf_post_doc_stat   VALUE '1',
    c_closed      TYPE          rcf_post_doc_stat   VALUE '2'.
  DATA:
    ls_key        TYPE          hrikey,
    lt_p5122      TYPE TABLE OF p5122,
    ls_p5122      TYPE          p5122,
    lo_ex         TYPE REF TO   cx_hrrcf,
    lo_post_inst  TYPE REF TO   cl_hrrcf_posting_instance.

  CALL METHOD cl_hrrcf_posting_instance=>get_instance
    EXPORTING
      hrobject = posting->hrobject
    IMPORTING
      instance = lo_post_inst.
  IF lo_post_inst IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_POSTING_INSTANCE'.
*         Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = posting->hrobject
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_POSTING_INSTANCE'.
  ENDIF.
*
  CALL METHOD lo_post_inst->get_records_by_date
    IMPORTING
      infotype_records = lt_p5122.
*
  DELETE lt_p5122 WHERE status          NE c_released
                  OR    posting_channel NE c_post_ch_int.
*
  LOOP AT lt_p5122 INTO ls_p5122.
*  WHERE
*     start_date LE sy-datum AND
*     end_date   GE sy-datum.
    TRY.
        CLEAR ls_key.
        MOVE-CORRESPONDING ls_p5122 TO ls_key.
*
        IF ls_p5122-start_date GE sy-datum.
*       records which are published today or in the future
*       will be deleted
          CALL METHOD lo_post_inst->delete_record
            CHANGING
              infotype_record = ls_p5122.
        ELSE.
*   At the moment the publication is delimited it should not be
*   available. To achieve this the end of the publication period
*   is set to the previous day.
          ls_p5122-end_date   = sy-datum - 1.
          ls_p5122-status     = c_closed.
          CALL METHOD lo_post_inst->update_record
            CHANGING
              infotype_record = ls_p5122.
        ENDIF.
*
        cl_hrrcf_t77rcf_int_pub=>delimit_record( ls_key ).
*
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
        CONTINUE.
    ENDTRY.
  ENDLOOP.
*
ENDMETHOD.


METHOD dequeue_all .
*
  CALL FUNCTION 'HR_DEQUEUE_OBJECT_ALL'.
*
ENDMETHOD.


METHOD dequeue_requisition .
  DATA:
    lo_requisition TYPE REF TO cl_hrrcf_requisition.
*
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = hrobject-objid
    IMPORTING
      requisition = lo_requisition.
*
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION' .
  ELSE.
    CALL METHOD lo_requisition->dequeue.
  ENDIF.
*
ENDMETHOD.


METHOD enqueue_requisition .
  DATA:
    lo_requisition TYPE REF TO cl_hrrcf_requisition.
*
  REFRESH return.
*
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = hrobject-objid
    IMPORTING
      requisition = lo_requisition.
*
*
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION' .
  ELSE.
    CALL METHOD lo_requisition->enqueue
      IMPORTING
        return = return.
  ENDIF.
*
ENDMETHOD.


METHOD get_add_quali .
* Author: Claudia Staps
*         XLV
  CONSTANTS:
    c_fieldname          TYPE        fieldname VALUE 'ADD_QUALI'.
*
  DATA:
    lo_requisition_quali TYPE REF TO cl_hrrcf_req_qualification.
*
  CLEAR ps_description.
*
  CHECK NOT ps_requi_qualification-add_quali IS INITIAL.
*
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_requisition_quali.
*
  IF lo_requisition_quali IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQ_QUALIFICATION'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQ_QUALIFICATION'.
  ENDIF.
*
  CALL METHOD lo_requisition_quali->read_text
    EXPORTING
      fieldname       = c_fieldname
      infotype_record = ps_requi_qualification
      langu           = p_langu
      use_fallback    = true
    IMPORTING
      text            = ps_description-description
      langu_tab       = ps_description-langu_tab
      doc_langu       = ps_description-doc_langu.
*
ENDMETHOD.


METHOD get_branch_address .
* Author: Andrea Sadreameli
*         XLV
* This method reads the address of a branch
*
  DATA:
    lo_branch    TYPE REF TO cl_hrrcf_branch.
*
*
  CALL METHOD cl_hrrcf_branch=>get
    EXPORTING
      id     = branch_id
    IMPORTING
      branch = lo_branch.
*
  IF lo_branch IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_BRANCH'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type = 'E'
        message_class = msgcl_admin
        message_number = '090'
        message_par1 = 'CL_HRRCF_BRANCH'    .
  ENDIF.
*
  CALL METHOD lo_branch->get_address_text
    IMPORTING
      branch_address_text = address.
*
ENDMETHOD.


METHOD get_contract_type_list .
  DATA:
    ls_contract_list TYPE LINE OF t77rcf_contty_t_tab,
    lt_contract_list TYPE         t77rcf_contty_t_tab,
    wa_contract_list TYPE         rcf_s_contract_type_list.
*
  CALL METHOD cl_hrrcf_t77rcf_contty=>read_all_descriptions
    EXPORTING
      langu           = language
    IMPORTING
      t77rcf_contty_t = lt_contract_list.
*
  LOOP AT lt_contract_list INTO ls_contract_list.
    MOVE ls_contract_list-work_contract TO
      wa_contract_list-contract_type.
    MOVE ls_contract_list-description TO wa_contract_list-text.
    APPEND wa_contract_list TO contract_type_list.
  ENDLOOP.
*
ENDMETHOD.


METHOD get_functional_area_list .
  DATA:
    ls_functional_area TYPE LINE OF t77rcf_func_t_tab,
    lt_functional_area TYPE         t77rcf_func_t_tab,
    wa_functional_area TYPE         rcf_s_functional_area_list.
*
  CALL METHOD cl_hrrcf_t77rcf_func=>read_all_descriptions
    EXPORTING
      langu         = language
    IMPORTING
      t77rcf_func_t = lt_functional_area.
*
  LOOP AT lt_functional_area INTO ls_functional_area.
    MOVE ls_functional_area-functional_area TO
      wa_functional_area-functional_area.
    MOVE ls_functional_area-description TO wa_functional_area-text.
    APPEND wa_functional_area TO functional_area_list.
  ENDLOOP.
*
ENDMETHOD.                    "GET_FUNCTIONAL_AREA_LIST


METHOD get_hierarchy_level_list .
  DATA:
    ls_hierarchy_level TYPE LINE OF t77rcf_hier_t_tab,
    lt_hierarchy_level TYPE t77rcf_hier_t_tab,
    wa_hierarchy_level TYPE rcf_s_hierarchy_level_list.
*
  CALL METHOD cl_hrrcf_t77rcf_hier=>read_all_descriptions
    EXPORTING
      langu         = language
    IMPORTING
      t77rcf_hier_t = lt_hierarchy_level.
*
  LOOP AT lt_hierarchy_level INTO ls_hierarchy_level.
    MOVE ls_hierarchy_level-hierarchy_level TO
      wa_hierarchy_level-hierarchy_level.
    MOVE ls_hierarchy_level-description TO wa_hierarchy_level-text.
    APPEND wa_hierarchy_level TO hierarchy_level_list.
  ENDLOOP.
*
ENDMETHOD.                    "GET_HIERARCHY_LEVEL_LIST


METHOD get_name_of_branch .
* Author: Andrea Sadreameli
*         XLV
* This methods reads the name of a branch
*
  DATA:
    lo_branch     TYPE REF TO cl_hrrcf_branch,
    l_branch      TYPE        bu_nameor1.
*
  CALL METHOD cl_hrrcf_branch=>get
    EXPORTING
      id     = branch_id
    IMPORTING
      branch = lo_branch.
*
  IF lo_branch IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_BRANCH'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_BRANCH'.
  ENDIF.
*
  CALL METHOD lo_branch->get_name
    IMPORTING
      branch_name = l_branch.
*
  branch_name = l_branch.
*
ENDMETHOD.


METHOD get_orgunit_list .
  DATA:
    lo_vacancy TYPE REF TO cl_hrrcf_vacancy.
*
  CREATE OBJECT lo_vacancy
    EXPORTING
      user                     = mgr_user.
*
  IF lo_vacancy IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_VACANCY'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_VACANCY'.
  ENDIF.
*
  CALL METHOD lo_vacancy->get_orgunit_of_manager
    IMPORTING
      orgunit_list = orgunit_list.
*
ENDMETHOD.                    "GET_ORGUNIT_LIST


METHOD get_otr_text .
* Author: Andrea Sadreameli
*
  CALL METHOD cl_bsp_runtime=>get_otr_text
    EXPORTING
      alias = alias
    RECEIVING
      text  = text.
*
ENDMETHOD.


METHOD get_quali_group_list .
* Author: Claudia Staps
*         XLV
  DATA:
    return         TYPE bapirettab,
    ls_ret         TYPE bapiret2,
    ls_quali_group TYPE bapiquali_dir,
    lt_quali_group TYPE rcf_t_q_directory,
    wa_quali_group TYPE rcf_s_q_object_with_name.
*
  CALL METHOD cl_hrrcf_qualification=>get_quali_groups
    IMPORTING
      quali_group_list = lt_quali_group
      return           = return.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
* Open: What should happen if there is any 'E' or 'A'-message
  IF NOT return IS INITIAL.
    READ TABLE return INTO ls_ret INDEX 1.
    RAISE EXCEPTION TYPE cx_hrrcf
       EXPORTING
         message_type   = ls_ret-type
         message_class  = ls_ret-id
         message_number = ls_ret-number
         message_par1   = ls_ret-message_v1
         message_par2   = ls_ret-message_v2
         message_par3   = ls_ret-message_v3
         message_par4   = ls_ret-message_v4.
  ENDIF.
*
* give only two fields (objid, stext) to the UI
  LOOP AT lt_quali_group INTO ls_quali_group.
    MOVE ls_quali_group-objid TO wa_quali_group-q_objid.
    MOVE ls_quali_group-stext TO wa_quali_group-stext.
    APPEND wa_quali_group     TO quali_group_list.
  ENDLOOP.
*
ENDMETHOD.


METHOD get_quali_level_list .
* Author: Claudia Staps
*
  CALL METHOD cl_hrrcf_qualification=>get_group_proficiencies
    EXPORTING
      qualification_group = quali_group
    IMPORTING
      proficiency         = quali_level_list.
*
ENDMETHOD.


METHOD get_quali_per_qualigroup .
* Author: Claudia Staps
*         XLV
  DATA:
    ls_qualification_list TYPE bapiquali_dir,
    lt_qualification_list TYPE rcf_t_q_directory,
    wa_qualification_list TYPE rcf_s_q_object_with_name.
*
  CALL METHOD cl_hrrcf_qualification=>get_group_qualifications
    EXPORTING
      qualification_group = quali_group
    IMPORTING
      qualification_list  = lt_qualification_list.
*
* give only two fields (objid, stext) to the UI
  LOOP AT lt_qualification_list INTO ls_qualification_list.
    MOVE ls_qualification_list-otype TO wa_qualification_list-q_otype.
    MOVE ls_qualification_list-objid TO wa_qualification_list-q_objid.
    MOVE ls_qualification_list-stext TO wa_qualification_list-stext.
    APPEND wa_qualification_list     TO qualification_list.
  ENDLOOP.
*
ENDMETHOD.


METHOD get_requisitions .
* Author : Subramanian, Ganapathy
*          XLV
* This method gets the list of requisitions for a user based on their
* statuses
  CONSTANTS:
    c_manager_role      TYPE          rcf_role VALUE '0002'.
*
  DATA:
    ls_hrobject         TYPE          hrobject,
    lo_requisition      TYPE REF TO   cl_hrrcf_requisition ,
    lo_requisition_info TYPE REF TO   cl_hrrcf_requisition_info ,
    lt_req_list         TYPE TABLE OF rcf_requisition ,
    lt_req_info_t       TYPE          rcf_t_requisition_info_text ,
    ls_req_list         TYPE          rcf_requisition ,
    ls_resp_person      TYPE          rcf_s_req_responsible.
*
  MOVE 'US' TO ls_resp_person-sclas .
  MOVE user TO ls_resp_person-sobid .

  CLEAR pt_requisition_info.

* Get the list of requisitions handeled by imported user
* in the role of a manager
  CALL METHOD cl_hrrcf_rec_team=>get_req_for_resp_person
    EXPORTING
      p_role            = c_manager_role
      ps_req_responsible = ls_resp_person
    IMPORTING
      pt_req_list        = lt_req_list.

* For each requisition get the basic information with text
  LOOP AT lt_req_list INTO ls_req_list .
    CALL METHOD cl_hrrcf_requisition=>get
      EXPORTING
        id          = ls_req_list
      IMPORTING
        requisition = lo_requisition.
    IF lo_requisition IS INITIAL.
      IF 1 = 2.
        MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*       Das Objekt &1 konnte nicht instanziiert werden
      ENDIF.
      ls_hrobject-otype = 'NB'.
      ls_hrobject-objid = ls_req_list.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = ls_hrobject
          message_class  = 'HRRCF0001'
          message_number = '090'
          message_par1   = 'CL_HRRCF_REQUISITION'.
    ENDIF.
*
    CALL METHOD cl_hrrcf_requisition_info=>get_instance
      EXPORTING
        hrobject = lo_requisition->hrobject
      IMPORTING
        instance = lo_requisition_info.
    IF lo_requisition_info IS INITIAL.
      IF 1 = 2.
        MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION_INFO'.
*       Das Objekt &1 konnte nicht instanziiert werden
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = lo_requisition->hrobject
          message_class  = 'HRRCF0001'
          message_number = '090'
          message_par1   = 'CL_HRRCF_REQUISITION_INFO'.
    ENDIF.
*
    CALL METHOD lo_requisition_info->get_records_by_date_with_text
      EXPORTING
        date                  = sy-datum
        language              = sy-langu
      IMPORTING
        pt_requisition_info_t = lt_req_info_t.
*
    IF req_status IS SUPPLIED .
*     Return only those requisitions which have the specified status
      DELETE lt_req_info_t WHERE status NE req_status .
    ENDIF .
*
    APPEND LINES OF lt_req_info_t TO pt_requisition_info.
*
  ENDLOOP .
*
ENDMETHOD.


METHOD get_req_basic_info .
  DATA:
    ls_requisition_info TYPE        p5125,
    lt_requisition_info TYPE        rcf_t_requisition_info,
    lo_req_basic_info   TYPE REF TO cl_hrrcf_requisition_info.
*
* Get information from infotype HRP5125 (Basic Information)
* 1.- Get the instance.
  CALL METHOD cl_hrrcf_requisition_info=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_basic_info.
*
  IF lo_req_basic_info IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ELSE.
*
* 2.- Read the records with the information.
    CALL METHOD lo_req_basic_info->get_records_by_date
      EXPORTING
        date             = sy-datum
      IMPORTING
        infotype_records = lt_requisition_info.
*
* 3.- As the relationship in t777i is 1 (only one record allowed),
* check if there is one or more and give it back as result.
    READ TABLE lt_requisition_info INTO ls_requisition_info INDEX 1.
    IF sy-subrc <> 0.
      IF 1 = 2. "Only for where used list
        MESSAGE e060(hrrcf0001).
*     Check message number
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '060'.
    ELSE.
      ps_req_basic_info = ls_requisition_info.
    ENDIF.
  ENDIF.

**********************************************
* NOTE : For the information of the Vacancy,
* use method GET_VACANCY_OF_MGR_LIST
**********************************************

ENDMETHOD.


METHOD get_req_basic_info_text .
  DATA:
    ls_requisition_info_wt TYPE        rcf_s_requisition_info_text,
    lt_requisition_info_wt TYPE        rcf_t_requisition_info_text,
    lo_req_basic_info      TYPE REF TO cl_hrrcf_requisition_info.
*
* Get information from infotype HRP5125 (Basic Information)
* 1.- Get the instance.
  CALL METHOD cl_hrrcf_requisition_info=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_basic_info.
*
  IF lo_req_basic_info IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ELSE.
*
* 2.- Read the records with the information.
    CALL METHOD lo_req_basic_info->get_records_by_date_with_text
      EXPORTING
        date                  = sy-datum
        language              = language
      IMPORTING
        pt_requisition_info_t = lt_requisition_info_wt.
*
* 3.- As the relationship in t777i is 1 (only one record allowed),
* check if there is one or more and give it back as result.
    READ TABLE lt_requisition_info_wt
          INTO ls_requisition_info_wt INDEX 1.
    IF sy-subrc <> 0.
      IF 1 = 2. "Only for where used list
        MESSAGE e060(hrrcf0001).
*     Check message number
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '060'.
    ELSE.
      ps_req_basic_info_wt = ls_requisition_info_wt.
    ENDIF.
  ENDIF.

**********************************************
* NOTE : For the information of the Vacancy,
* use method GET_VACANCY_OF_MGR_LIST
**********************************************

ENDMETHOD.


METHOD get_req_department_desc .
* Author: XLV, copied from GET_REQ_HEADER_DESC
  CONSTANTS:
    c_fieldname  TYPE        fieldname VALUE 'DEPARTMENT_DESC'.
  DATA:
    ls_p5121     TYPE        p5121,
    lo_post_info TYPE REF TO cl_hrrcf_posting_information.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = hrobject
    IMPORTING
      po_posting_info     = lo_post_info
      ps_post_info_record = ls_p5121.
*
  IF NOT ls_p5121 IS INITIAL.
    CALL METHOD lo_post_info->read_text
      EXPORTING
        fieldname       = c_fieldname
        infotype_record = ls_p5121
        langu           = p_langu
      IMPORTING
        text            = ps_department_desc-description
        langu_tab       = ps_department_desc-langu_tab
        doc_langu       = ps_department_desc-doc_langu.
  ENDIF.
*
ENDMETHOD.                    "GET_REQ_DEPARTMENT_DESC


METHOD GET_REQ_HEADER_DESC .
* Author: Irantzu Mendizabal
* Additions: XLV 141201
* In Career Portal a bijection exists between requisition and
* posting. Since the UI only knows the HROBJECT of the
* requisition this is the relevant import parameter
* XLV
  CONSTANTS:
    c_fieldname  TYPE        fieldname VALUE 'HEADER'.
  DATA:
    ls_p5121     TYPE        p5121,
    lo_post_info TYPE REF TO cl_hrrcf_posting_information.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = hrobject
    IMPORTING
      po_posting_info     = lo_post_info
      ps_post_info_record = ls_p5121.
*
  IF ls_p5121 IS NOT INITIAL.
    CALL METHOD lo_post_info->read_text
      EXPORTING
        fieldname       = c_fieldname
        infotype_record = ls_p5121
        langu           = p_langu
      IMPORTING
        text            = ps_department_desc-description
        langu_tab       = ps_department_desc-langu_tab
        doc_langu       = ps_department_desc-doc_langu.
  ENDIF.
*
ENDMETHOD.                    "GET_REQ_HEADER_DESC


METHOD get_req_job_info .
  DATA:
    lt_vacancy_list     TYPE        rcf_t_requisition_vacancy,
    ls_vacancy_list     TYPE        rcf_s_requisition_vacancy,
    ls_req_job_info_t   TYPE        rcf_s_req_job_info_text,
    lt_req_job_info_t   TYPE        rcf_t_req_job_info_text,
    lo_req_job_info     TYPE REF TO cl_hrrcf_job_information,
    lo_requisition      TYPE REF TO cl_hrrcf_requisition.
*
  CLEAR:
    ps_req_job_info,
    ps_vacancy.
*
* Get information from infotype HRP5126 (Job Information)
* 1.- Get the instance.
  CALL METHOD cl_hrrcf_job_information=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_job_info.
*
  IF lo_req_job_info IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ENDIF.
*
* 2.- Read the records with the information.
  CALL METHOD lo_req_job_info->get_records_by_date_with_text
    EXPORTING
      date              = sy-datum
      language          = sy-langu
    IMPORTING
      pt_req_job_info_t = lt_req_job_info_t.
*
* 3.- As the relationship in t777i is 1 (only one record allowed),
*      check if there is one or more and give it back as result.
  READ TABLE lt_req_job_info_t INTO ls_req_job_info_t INDEX 1.
  IF sy-subrc IS INITIAL.
    ps_req_job_info = ls_req_job_info_t.
  ENDIF.
*
**********************************************
* NOTE : For the information of the Vacancy,
* use method GET_VACANCY_OF_MGR_LIST
**********************************************
  IF ps_vacancy IS SUPPLIED.
*
* get the assigned positions of the requisition
*
    CALL METHOD cl_hrrcf_requisition=>get
      EXPORTING
        id          = hrobject-objid
      IMPORTING
        requisition = lo_requisition.

    IF lo_requisition IS INITIAL.
      IF 1 = 2.
        MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*   Das Objekt &1 konnte nicht instanziiert werden
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = hrobject
          message_type   = 'E'
          message_class  = msgcl_admin
          message_number = '090'
          message_par1   = 'CL_HRRCF_REQUISITION'.
    ENDIF.
*
    CALL METHOD lo_requisition->get_vacancy_of_requisition
      IMPORTING
        vacancy_list = lt_vacancy_list.
*
*   In case of SAP Career Portal we will have only 1 vacancy
*   per requisition
    READ TABLE lt_vacancy_list INTO ls_vacancy_list INDEX 1.
    IF sy-subrc = 0.
      ps_vacancy = ls_vacancy_list-sobid.
    ENDIF.
*
  ENDIF.
*
ENDMETHOD.


METHOD GET_REQ_JOB_INFO_INTERN .
  DATA:
    ls_req_job_info     TYPE        p5126,
    lt_req_job_info     TYPE        rcf_t_req_job_info,
    lo_req_job_info     TYPE REF TO cl_hrrcf_job_information.
*
* Get information from infotype HRP5126 (Job Information)
* 1.- Get the instance.
  CALL METHOD cl_hrrcf_job_information=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_job_info.
*
  IF lo_req_job_info IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ENDIF.
*
* 2.- Read the records with the information.
  CALL METHOD lo_req_job_info->get_records_by_date
    EXPORTING
      date             = sy-datum
    IMPORTING
      infotype_records = lt_req_job_info.
*
* 3.- As the relationship in t777i is 1 (only one record allowed),
*      check if there is one or more and give it back as result.
  READ TABLE lt_req_job_info INTO ls_req_job_info INDEX 1.
  IF sy-subrc IS INITIAL.
    ps_req_job_info = ls_req_job_info.
  ENDIF.
*
ENDMETHOD.


METHOD get_req_posting_info .
* Author: Irantzu Mendizabal
*         XLV
  DATA:
    lt_p5121        TYPE TABLE OF p5121,
    ls_p5121        TYPE          p5121,
    lo_post_info    TYPE REF TO   cl_hrrcf_posting_information,
    lt_posting_list TYPE          rcf_t_posting,
    lo_posting      TYPE REF TO   cl_hrrcf_posting,
    lo_requisition  TYPE REF TO   cl_hrrcf_requisition.
*
  CLEAR:
    ps_post_info_record,
    po_posting_info.
*
* Get requisition instance with the given HROBJECT
  CALL METHOD cl_hrrcf_requisition=>get
    EXPORTING
      id          = hrobject-objid
    IMPORTING
      requisition = lo_requisition.
  IF lo_requisition IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQUISITION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQUISITION'.
  ENDIF.
*
* Get postings assigned to the requisition.
  CALL METHOD lo_requisition->get_postings
    IMPORTING
      posting_list = lt_posting_list.
*
* In career portal there is exactly one entry in the table:
  READ TABLE lt_posting_list INTO lo_posting INDEX 1.
  IF sy-subrc <> 0.
    IF 1 = 2. "Only for where used list
      MESSAGE e060(hrrcf0001).
*     Zum Suchauftrag existiert keine Ausschreibung
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '060'.
  ENDIF.
*
  CALL METHOD cl_hrrcf_posting_information=>get_instance
    EXPORTING
      hrobject = lo_posting->hrobject
    IMPORTING
      instance = lo_post_info.
  IF lo_post_info IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_POSTING_INFORMATION'.
*     Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = lo_posting->hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '090'
        message_par1   = 'CL_HRRCF_POSTING_INFORMATION'.
  ENDIF.
*
  po_posting_info = lo_post_info.

  IF ps_post_info_record IS SUPPLIED.
    CALL METHOD lo_post_info->get_records_by_date
      EXPORTING
        date             = sy-datum
      IMPORTING
        infotype_records = lt_p5121.
*
    READ TABLE lt_p5121 INTO ls_p5121 INDEX 1.
    IF sy-subrc <> 0.
      IF 1 = 2. "Only for where used list
        MESSAGE e062(hrrcf0001).
*       Zur Ausschreibungsinformation existieren keine Sätze des IT5121
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          hrobject       = lo_posting->hrobject
          message_type   = 'E'
          message_class  = 'HRRCF0001'
          message_number = '062'.
    ENDIF.
*
    ps_post_info_record = ls_p5121.
*
  ENDIF.
*
ENDMETHOD.


METHOD get_req_posting_info_text .
  DATA:
    lo_posting_info TYPE REF TO cl_hrrcf_posting_information,
    lt_posting_info TYPE        rcf_t_posting_info_text,
    ls_posting_info TYPE        rcf_s_posting_info_text.
*
* get posting_info
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject        = hrobject
    IMPORTING
      po_posting_info = lo_posting_info.
*
* get infotype-record with texts for entities
  IF NOT lo_posting_info IS INITIAL.
    CALL METHOD lo_posting_info->get_records_by_date_with_text
      EXPORTING
        date                   = sy-datum
        language               = sy-langu
      IMPORTING
        posting_info_with_text = lt_posting_info.
*
    READ TABLE lt_posting_info INTO ls_posting_info INDEX 1.
    IF sy-subrc IS INITIAL.
      posting_info_with_text = ls_posting_info.
    ELSE.
      IF 1 = 2.
        MESSAGE e062(hrrcf0001).
*       Zur Ausschreibungsinformation existieren keine Sätze des IT5121
      ENDIF.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          message_type   = 'E'
          message_class  = msgcl_admin
          message_number = '062' .

    ENDIF.                     "sy-subrc
*
  ENDIF.                     "lo_posting_info
*
ENDMETHOD.


METHOD get_req_qualification .
* Author: Claudia Staps
*         XLV
  DATA:
    lo_requi_qualification TYPE REF TO cl_hrrcf_req_qualification.

* Get information from infotype HRP5129 (Requirements)
*  1.- Get the instance.
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_requi_qualification.

  IF lo_requi_qualification IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = 'HRRCF0001'
        message_number = '061'.
  ELSE.
*  2.- Read the records with the information.
    CALL METHOD lo_requi_qualification->get_records_by_date
      EXPORTING
        date             = sy-datum
      IMPORTING
        infotype_records = pt_selected_qualification.
  ENDIF.
*
ENDMETHOD.


METHOD get_req_requirement_desc .
* Author: XLV, copied from GET_REQ_HEADER_DESC
  CONSTANTS:
    c_fieldname  TYPE        fieldname VALUE 'REQUIREMENT_DESC'.
  DATA:
    ls_p5121     TYPE        p5121,
    lo_post_info TYPE REF TO cl_hrrcf_posting_information.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = hrobject
    IMPORTING
      po_posting_info     = lo_post_info
      ps_post_info_record = ls_p5121.
*
  IF ls_p5121 IS NOT INITIAL.
    CALL METHOD lo_post_info->read_text
      EXPORTING
        fieldname       = c_fieldname
        infotype_record = ls_p5121
        langu           = p_langu
      IMPORTING
        text            = ps_department_desc-description
        langu_tab       = ps_department_desc-langu_tab
        doc_langu       = ps_department_desc-doc_langu.
  ENDIF.
*
ENDMETHOD.                    "GET_REQ_REQUIREMENT_DESC


METHOD get_req_status_list .
  DATA:
    ls_status_list TYPE ddfixvalue,
    lt_status_list TYPE ddfixvalues,
    wa_statuslist  TYPE rcf_s_req_status_list.
*
  CALL METHOD cl_hrrcf_services_general=>get_domain_value_list
    EXPORTING
      p_domain_name = 'RCF_REQUISITION_STATUS'
      p_language    = language
    IMPORTING
      pt_valuelist  = lt_status_list.
*
  LOOP AT lt_status_list INTO ls_status_list.
    MOVE   ls_status_list-low    TO wa_statuslist-req_status.
    MOVE   ls_status_list-ddtext TO wa_statuslist-text.
    APPEND wa_statuslist         TO req_status_list.
  ENDLOOP.
*
ENDMETHOD.                    "GET_REQ_STATUS_LIST


METHOD get_req_task_desc .
* Author: XLV, copied from GET_REQ_HEADER_DESC
  CONSTANTS:
    c_fieldname  TYPE        fieldname VALUE 'TASK_DESC'.
  DATA:
    ls_p5121     TYPE        p5121,
    lo_post_info TYPE REF TO cl_hrrcf_posting_information.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = hrobject
    IMPORTING
      po_posting_info     = lo_post_info
      ps_post_info_record = ls_p5121.
*
  IF ls_p5121 IS NOT INITIAL.
    CALL METHOD lo_post_info->read_text
      EXPORTING
        fieldname       = c_fieldname
        infotype_record = ls_p5121
        langu           = p_langu
      IMPORTING
        text            = ps_department_desc-description
        langu_tab       = ps_department_desc-langu_tab
        doc_langu       = ps_department_desc-doc_langu.
  ENDIF.
*
ENDMETHOD.                    "GET_REQ_TASK_DESC


METHOD get_vacancy_of_mgr_list .
  DATA:
    lo_vacancy TYPE REF TO cl_hrrcf_vacancy.
*
  CREATE OBJECT lo_vacancy
    EXPORTING
      user         = mgr_user.
*
  IF lo_vacancy IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_VACANCY'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        message_type = 'E'
        message_class = msgcl_admin
        message_number = '090'
        message_par1 = 'CL_HRRCF_VACANCY'.

  ENDIF.
*
  CALL METHOD lo_vacancy->get_vacancy_for_manager
    IMPORTING
      vacancy_list = vacancy_list.
*
ENDMETHOD.                    "GET_VACANCY_LIST


METHOD handle_return_tab .
* In some situations a method returns a message table and
* we want a special reaction at the UI. In this cases we make
* sure that exactly this message is in the return table; further
* processing must be stopped.
  DATA:
    ls_return TYPE bapiret2.
*
  DELETE pt_return WHERE type NE 'E' AND type NE 'A' .
*
  IF NOT pt_return IS INITIAL.
*   Special reaction in case of authorization problems
    READ TABLE pt_return WITH KEY type   = 'E'
                                  number = '006'
                                  id     = 'HRRCF0002'
      INTO ls_return.
    IF sy-subrc = '0'.
      REFRESH pt_return.
      APPEND ls_return TO pt_return.
      RETURN.                       " bail out
    ELSE.
*     General reaction on entries in message table
      READ TABLE pt_return INDEX 1 INTO ls_return.
      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
          message_type   = ls_return-type
          message_class  = ls_return-id
          message_number = ls_return-number
          message_par1   = ls_return-message_v1
          message_par2   = ls_return-message_v2
          message_par3   = ls_return-message_v3
          message_par4   = ls_return-message_v4.
    ENDIF.
*
  ENDIF.
*
ENDMETHOD.


METHOD maintain_add_quali_text .
  DATA:
    lo_req_qualification TYPE REF TO cl_hrrcf_req_qualification,
    ls_p5129             TYPE        p5129.
*
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_qualification.
*
  IF lo_req_qualification IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_REQ_QUALIFICATION'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_REQ_QUALIFICATION' .
  ENDIF.
*
  ls_p5129 = ps_selected_qualification.
*
* update text in KW when additional qualification was entered
  IF operation              NE delete AND
     ls_p5129-q_object_type EQ 'QK'.
    CALL METHOD lo_req_qualification->update_text
      EXPORTING
        text            = p_description
        fieldname       = 'ADD_QUALI'
        langu           = p_langu
      CHANGING
        infotype_record = ls_p5129.
  ENDIF.
*
* Check to see the type of operation and perform function accordingly
  CASE operation.
    WHEN insert.
*     insert record
      ls_p5129-begda = sy-datum.
      ls_p5129-endda = high_date.
      CALL METHOD lo_req_qualification->insert_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
*
    WHEN modify.
*     modify record in question
      CALL METHOD lo_req_qualification->update_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
*
    WHEN delete.
*     delete record in question
      CALL METHOD lo_req_qualification->delete_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
  ENDCASE.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
  ps_result = ls_p5129.
*
ENDMETHOD.


METHOD maintain_posting_info .
* Author : Irantzu Mendizabal
*          XLV
  DATA:
    lo_post_info TYPE REF TO cl_hrrcf_posting_information,
    ls_p5121     TYPE        p5121.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject        = hrobject
    IMPORTING
      po_posting_info = lo_post_info.
*          ps_post_info_record = .
* The previous method throws an exception if lo_post_info is initial
*
  ls_p5121 = ps_post_info.
*
  CASE operation.
    WHEN insert.
      ls_p5121-begda = sy-datum.
      ls_p5121-endda = high_date.
      CALL METHOD lo_post_info->insert_record
        IMPORTING
          return                      = return
        CHANGING
          infotype_record             = ls_p5121.
*
    WHEN modify.
      CALL METHOD lo_post_info->update_record
        IMPORTING
          return                      = return
        CHANGING
          infotype_record             = ls_p5121.
*
    WHEN delete.
      CALL METHOD lo_post_info->delete_record
        IMPORTING
          return                      = return
        CHANGING
          infotype_record             = ls_p5121.
*
  ENDCASE.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
  ps_result = ls_p5121.
*
ENDMETHOD.


METHOD maintain_requisition_desc .
* Author: Irantzu Mendizabal
* Additions: XLV
  DATA:
    lo_post_info   TYPE REF TO cl_hrrcf_posting_information,
    ls_p5121       TYPE        p5121.
*
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = hrobject
    IMPORTING
      po_posting_info     = lo_post_info
      ps_post_info_record = ls_p5121.
*
  IF operation NE delete.
    CALL METHOD lo_post_info->update_text
      EXPORTING
        text            = p_header_desc
        fieldname       = 'HEADER'
        langu           = p_langu
      CHANGING
        infotype_record = ls_p5121.
*
    CALL METHOD lo_post_info->update_text
      EXPORTING
        text            = p_department_desc
        fieldname       = 'DEPARTMENT_DESC'
        langu           = p_langu
      CHANGING
        infotype_record = ls_p5121.
*
    CALL METHOD lo_post_info->update_text
      EXPORTING
        text            = p_task_desc
        fieldname       = 'TASK_DESC'
        langu           = p_langu
      CHANGING
        infotype_record = ls_p5121.
*
    CALL METHOD lo_post_info->update_text
      EXPORTING
        text            = p_requirement_desc
        fieldname       = 'REQUIREMENT_DESC'
        langu           = p_langu
      CHANGING
        infotype_record = ls_p5121.
  ENDIF.
*
  CASE operation.
    WHEN insert.
      ls_p5121-begda = sy-datum.
      ls_p5121-endda = high_date.
      CALL METHOD lo_post_info->insert_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5121.
*
    WHEN modify.
      CALL METHOD lo_post_info->update_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5121.
*
    WHEN delete.
* Irantzu Mendizabal (15.01.2002)
* We have decided to delete the pointer of the description fields,
* setting them to 00000 and make and update of the infotype in order to
* delete the descriptions (instead of using delete_record)
      CLEAR:
        ls_p5121-header,
        ls_p5121-department_desc,
        ls_p5121-requirement_desc,
        ls_p5121-task_desc.
*
      CALL METHOD lo_post_info->update_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5121.
*
  ENDCASE.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
  ps_result = ls_p5121.
*
ENDMETHOD.                    "MAINTAIN_REQUISITION_DESC


METHOD maintain_requisition_posting .
* Author: Andrea Sadreameli
*         XLV
* This methods updates infotypes 5125, 5126 and 5121.
  DATA:
    return_table TYPE bapirettab,
    address      TYPE rcf_s_bupa_addressdata_text,
    ls_p5126_old TYPE rcf_s_req_job_info_text,
    ls_p5126_new TYPE p5126,
    ls_p5121_old TYPE p5121,
    ls_p5121_new TYPE p5121,
    l_operation  TYPE rcf_opera.
*
* maintain infotype 5125
  ps_result_p5125 = me->maintain_req_basic_info(
         operation         = modify
         hrobject          = req_object
         ps_req_basic_info = ps_req_basic_info ).
*
  MOVE ps_req_job_info TO ls_p5126_new.
*
* set branch attributes
  IF NOT ps_req_job_info-branch IS INITIAL.
    address = me->get_branch_address( ps_req_job_info-branch ).
    IF NOT address IS INITIAL.
      ls_p5126_new-country  = address-country.
      ls_p5126_new-region   = address-region.
      ls_p5126_new-city     = address-city.
    ENDIF.
  ENDIF.
*
* get current infotype 5126 record
  CALL METHOD me->get_req_job_info
    EXPORTING
      hrobject        = req_object
    IMPORTING
      ps_req_job_info = ls_p5126_old.
*
* maintain infotype 5126
  IF ls_p5126_old IS INITIAL.
    l_operation = insert.
  ELSE.
    l_operation = modify.
  ENDIF.
  REFRESH return_table.
  CALL METHOD me->maintain_req_job_information
    EXPORTING
      operation       = l_operation
      hrobject        = req_object
      ps_req_job_info = ls_p5126_new
    IMPORTING
      ps_result       = ps_result_p5126
      return          = return_table.
  APPEND LINES OF return_table TO return.
*
* get current infotype 5121 record
  REFRESH return_table.
  CALL METHOD me->get_req_posting_info
    EXPORTING
      hrobject            = req_object
    IMPORTING
      ps_post_info_record = ls_p5121_old.
  APPEND LINES OF return_table TO return.
*
* prepare new 5121 record
  MOVE-CORRESPONDING ls_p5121_old TO ls_p5121_new.
  ls_p5121_new-country         = ls_p5126_new-country.
  ls_p5121_new-region          = ls_p5126_new-region.
  ls_p5121_new-functional_area = ls_p5126_new-functional_area.
  ls_p5121_new-industry        = ls_p5126_new-industry.
  ls_p5121_new-postal_code     = ls_p5126_new-postalcode.
  ls_p5121_new-industry        = ls_p5126_new-working_time.
  ls_p5121_new-contract_type   = ls_p5126_new-contract_type.
*
* maintain infotype p5121
  REFRESH return_table.
  CALL METHOD me->maintain_posting_info
    EXPORTING
      operation    = modify
      hrobject     = req_object
      ps_post_info = ls_p5121_new
    IMPORTING
      return       = return_table.
  APPEND LINES OF return_table TO return.
*
* before the current vacancy will be assigned all
* existing assignments should be deleted since in CP
* we have only one...
  CALL METHOD me->delimit_vacancy_assignment
    EXPORTING
      requi_id = req_object-objid
    IMPORTING
      return   = return_table.
  APPEND LINES OF return_table TO return.
*
* assign vacancy
  IF NOT p_vacancy IS INITIAL.
    REFRESH return_table.
    CALL METHOD me->assign_vacancy
      EXPORTING
        p_vacancy = p_vacancy
        req_id    = req_object-objid
      IMPORTING
        return    = return_table.
    APPEND LINES OF return_table TO return.
  ENDIF.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
*
ENDMETHOD.


METHOD maintain_req_basic_info .
* The operation is always 'modify', since the IT is created
* with the requisition and the record will never be deleted
  DATA:
    lt_return         TYPE        bapirettab,
    ls_return         TYPE        bapiret2,
    ls_p5125          TYPE        p5125,
    lo_req_basic_info TYPE REF TO cl_hrrcf_requisition_info.
*
  CALL METHOD cl_hrrcf_requisition_info=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_basic_info.
*
  IF lo_req_basic_info IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*     Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '061'.
  ENDIF.
*
  ls_p5125 = ps_req_basic_info.
*
  CASE operation.
    WHEN insert.
      ls_p5125-begda  = sy-datum.
      ls_p5125-endda  = high_date.
      IF ls_p5125-header IS INITIAL.
        ls_p5125-header = lo_req_basic_info->hrobject.
      ENDIF.
      CALL METHOD lo_req_basic_info->insert_record
        IMPORTING
          return          = lt_return
        CHANGING
          infotype_record = ls_p5125.
*
    WHEN modify.
      CALL METHOD lo_req_basic_info->update_record
        IMPORTING
          return          = lt_return
        CHANGING
          infotype_record = ls_p5125.
*
    WHEN delete.
      CALL METHOD lo_req_basic_info->delete_record
        IMPORTING
          return          = lt_return
        CHANGING
          infotype_record = ls_p5125.
*
  ENDCASE.
*
  DELETE lt_return WHERE type NE 'E' AND type NE 'A' .
  IF NOT lt_return IS INITIAL.
    READ TABLE lt_return INTO ls_return INDEX 1.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
*    TEXTID =
*    PREVIOUS =
        hrobject       = hrobject
*    INFOTYPE       = ls_p5125
        message_type   = ls_return-type
        message_class  = ls_return-id
        message_number = ls_return-number
        message_par1   = ls_return-message_v1
        message_par2   = ls_return-message_v2
        message_par3   = ls_return-message_v3
        message_par4   = ls_return-message_v4 .

  ENDIF.
*
  ps_result = ls_p5125.
*
ENDMETHOD.


METHOD maintain_req_job_information .
* Author: Irantzu Mendizabal

* NOTE: For the Career Portal, we are not going to maintain the infotype
* P5126 (req_job_info), we will work with P5121 (posting_info) due to
* the one to one relationship (ZIM 14.02.2002)
*
  DATA:
    lo_req_job_info TYPE REF TO cl_hrrcf_job_information,
    ls_p5126        TYPE        p5126.
*
  CLEAR:
    ps_result,
    return.
*
  CALL METHOD cl_hrrcf_job_information=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_job_info.
*
  IF lo_req_job_info IS INITIAL.
    IF 1 = 2.
      MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_JOB_INFORMATION'.
*   Das Objekt &1 konnte nicht instanziiert werden
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '090'
        message_par1   = 'CL_HRRCF_JOB_INFORMATION' .
  ENDIF.
*
  ls_p5126 = ps_req_job_info.
*
  CASE operation.
    WHEN insert.
      ls_p5126-begda = sy-datum.
      ls_p5126-endda = high_date.
* --    Keep the dates consistent
      IF ( ls_p5126-empl_start_date IS NOT INITIAL ) AND
         ( ls_p5126-empl_end_date IS INITIAL ).
        ls_p5126-empl_end_date = high_date.
      ENDIF.
      CALL METHOD lo_req_job_info->insert_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5126.
*
    WHEN modify.
* --    Keep the dates consistent
      IF ls_p5126-empl_start_date IS INITIAL.
        CLEAR ls_p5126-empl_end_date.
      ELSEIF ls_p5126-empl_end_date IS INITIAL.
        ls_p5126-empl_end_date = high_date.
      ENDIF.
      CALL METHOD lo_req_job_info->update_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5126.
*
    WHEN delete.
      CALL METHOD lo_req_job_info->delete_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5126.
*
  ENDCASE.
*
  DELETE return WHERE type NE 'E' AND type NE 'A' .
  ps_result = ls_p5126.
*
ENDMETHOD.


METHOD maintain_req_qualification .
* Author: Biraj Mandavilli
*         XLV
  DATA:
    lo_req_qualification TYPE REF TO cl_hrrcf_req_qualification,
    ls_p5129             TYPE        p5129.
*
  CLEAR:
    ps_result,
    return.
*
  CALL METHOD cl_hrrcf_req_qualification=>get_instance
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = lo_req_qualification.
  IF lo_req_qualification IS INITIAL.
    IF 1 = 2. "Only for where used list
      MESSAGE e061(hrrcf0001).
*   Zur Ausschreibung exitieren keine Ausschreibungsinformationen
    ENDIF.
    RAISE EXCEPTION TYPE cx_hrrcf
      EXPORTING
        hrobject       = hrobject
        message_type   = 'E'
        message_class  = msgcl_admin
        message_number = '061'.
  ENDIF.
*
  ls_p5129 = ps_selected_qualification.

*   Check to see the type of operation and perform function accordingly
  CASE operation.
    WHEN insert.
*     insert record
      ls_p5129-begda = sy-datum.
      ls_p5129-endda = high_date.
      CALL METHOD lo_req_qualification->insert_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
      DELETE return WHERE type NE 'E' AND type NE 'A' .
*
    WHEN modify.
*     modify record in question
      CALL METHOD lo_req_qualification->update_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
      DELETE return WHERE type NE 'E' AND type NE 'A' .
*
    WHEN delete.
*     delete record in question
      CALL METHOD lo_req_qualification->delete_record
        IMPORTING
          return          = return
        CHANGING
          infotype_record = ls_p5129.
      DELETE return WHERE type NE 'E' AND type NE 'A' .
*
  ENDCASE.
*
  ps_result = ls_p5129.
*
ENDMETHOD.


METHOD on_requisition_update .
* Author: 20020408 XLV
* Listener for infotype changes
* It may happen that someone changes the requisition or posting
* although the status is not draft. In this case the status should
* be set to draft and the associated internal publication must
* be 'delimited'.
* Relevant objects are NB (requisition) and NC (posting) with its
* infotypes 5121, 5125, 5126, and 5129.
* Every change, which concerns only the status should not result
* in a reset, otherwise a requisition can never be released, ...
  CONSTANTS:
    c_req_draft        TYPE         rcf_requisition_status VALUE '0',
    c_post_draft       TYPE         rcf_posting_status     VALUE '0',
    otype_requi        TYPE         otype                  VALUE 'NB',
    otype_post         TYPE         otype                  VALUE 'NC'.
  DATA:
    lt_return          TYPE         bapirettab,
    ls_return          TYPE         bapiret2,
    ls_p5125           TYPE         p5125,
    lt_p5125           TYPE         rcf_t_requisition_info,
    ls_p5121           TYPE         p5121,
    lt_p5121           TYPE         rcf_t_posting_information,
    lv_change_status   TYPE         boole_d VALUE false,
    lv_req_status      TYPE         rcf_requisition_status,
    lv_post_status     TYPE         rcf_posting_status,
    lo_ex              TYPE REF TO  cx_hrrcf,
    lo_requisition     TYPE REF TO  cl_hrrcf_requisition,
    lo_posting         TYPE REF TO  cl_hrrcf_posting,
    ls_requi_object    TYPE         hrobject,
    lt_requi_objects   TYPE         rcf_t_requisition.
*
***********************************************************************
* 1. Check if a status change is necessary
***********************************************************************
*
* Leave method if the change does not concern a requisition or posting
  IF NOT hrrcf_infotype_object->hrobject-otype = otype_requi AND
     NOT hrrcf_infotype_object->hrobject-otype = otype_post.
    RETURN.
  ENDIF.
*
  IF hrrcf_infotype_object->hrobject-otype = otype_requi.
    TRY.
        CALL METHOD cl_hrrcf_requisition=>get
          EXPORTING
            id          = hrrcf_infotype_object->hrobject-objid
          IMPORTING
            requisition = lo_requisition.
*
        CALL METHOD lo_requisition->get_requisition_status
*          EXPORTING
*            P_DATE       = SY-DATUM
*            P_LANGU      = SY-LANGU
          IMPORTING
            p_status     = lv_req_status.
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
        RETURN.
    ENDTRY.
    IF NOT lv_req_status = c_req_draft.         "new status
*     Check if the change affects only the status of the requisition
      IF hrrcf_infotype_object->my_infty = '5125'.
        CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn_tab
          EXPORTING
            wplog_tab = before_image
          IMPORTING
            pnnnn_tab = lt_p5125.
        LOOP AT lt_p5125 INTO ls_p5125 WHERE
          begda LE sy-datum AND
          endda GE sy-datum.
          IF ls_p5125-status EQ lv_req_status.
*           This point was reached not due to a status change,
*           but the status is not draft so we have to set the status to
*           draft and do all the additional stuff
            lv_change_status = true.
          ENDIF.
          EXIT. " Should be only one entry
        ENDLOOP.
      ELSEIF hrrcf_infotype_object->my_infty = '5131'.
*     The change of the recruiting team should not change the status
        lv_change_status = false.
      ELSE.
*       Any change of the other infotypes should result in status change
        lv_change_status = true.
      ENDIF.
    ENDIF.
  ELSEIF hrrcf_infotype_object->hrobject-otype = otype_post.
    TRY.
        CALL METHOD cl_hrrcf_posting=>get
          EXPORTING
            id      = hrrcf_infotype_object->hrobject-objid
          IMPORTING
            posting = lo_posting.
*
        CALL METHOD lo_posting->get_posting_status
*          EXPORTING
*            P_DATE       = SY-DATUM
*            P_LANGU      = SY-LANGU
          IMPORTING
            p_status     = lv_post_status.
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
        RETURN.
    ENDTRY.
*
    IF lv_post_status NE c_post_draft.
      IF hrrcf_infotype_object->my_infty = '5121'.
*       Check if the change affects only the status of the posting
        CALL METHOD cl_hrrcf_infotype=>wplog_to_pnnnn_tab
          EXPORTING
            wplog_tab = before_image
          IMPORTING
            pnnnn_tab = lt_p5121.
        LOOP AT lt_p5121 INTO ls_p5121 WHERE
          begda LE sy-datum AND
          endda GE sy-datum.
          IF ls_p5121-status EQ lv_post_status.
*           This point was reached not due to a status change,
*           but the status is not draft so we have to set the status to
*           draft and do all the additional stuff
            lv_change_status = true.
          ENDIF.
          EXIT. " Should be only one entry
        ENDLOOP.
      ELSEIF NOT hrrcf_infotype_object->my_infty = '5122'.
*       In CP Posting Instances are created and changed automatically so
*       any change must not be handled in this method
*       Any change of the other infotypes should result in status change
        lv_change_status = true.
      ENDIF.
    ENDIF.
  ENDIF.
*
***********************************************************************
* 2. Do the status change if necessary and all additional stuff
***********************************************************************
  IF lv_change_status EQ true.
*   2a Change Status
    IF hrrcf_infotype_object->hrobject-otype = otype_requi.
      ls_requi_object = hrrcf_infotype_object->hrobject.
    ELSEIF hrrcf_infotype_object->hrobject-otype = otype_post.
      TRY.
          CALL METHOD lo_posting->get_requisitions
            IMPORTING
              requisition_list = lt_requi_objects.
*        CATCH CX_HRRCF_INFOTYPE_OPERATION .
        CATCH cx_hrrcf INTO lo_ex.
          cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      ENDTRY.
      READ TABLE lt_requi_objects INTO lo_requisition INDEX 1.
      IF lo_requisition IS INITIAL.
*     In CP there is a 1:1 relation between Requisition and Posting
        IF 1 = 2.
          MESSAGE e059(hrrcf0001).
*         Zu dieser Ausschreibung ist kein Suchauftrag vorhanden
        ENDIF.
        TRY.
            RAISE EXCEPTION TYPE cx_hrrcf_mgr_self_service_bl
              EXPORTING
*                TEXTID         =
*                PREVIOUS       =
                hrobject       = lo_posting->hrobject
*                INFOTYPE       =
*                MESSAGE_TYPE   =
                message_class  = 'HRRCF0001'
                message_number = '059'
*                MESSAGE_PAR1   =
*                MESSAGE_PAR2   =
*                MESSAGE_PAR3   =
*                MESSAGE_PAR4   =
                .
          CATCH cx_hrrcf_mgr_self_service_bl INTO lo_ex.
            cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
        ENDTRY.
      ELSE.
        ls_requi_object = lo_requisition->hrobject.
      ENDIF.
    ENDIF. "hrrcf_infotype_object->hrobject-otype
    TRY.
        CALL METHOD me->change_req_status
          EXPORTING
            ps_requisition = ls_requi_object
            p_new_status   = c_req_draft
          IMPORTING
            pt_return      = lt_return.
        DELETE lt_return WHERE type NE 'E' AND type NE 'A'.
        IF NOT lt_return IS INITIAL.
          READ TABLE lt_return INTO ls_return INDEX 1.
          RAISE EXCEPTION TYPE cx_hrrcf
            EXPORTING
              hrobject       = ls_requi_object
              message_type   = ls_return-type
              message_class  = ls_return-id
              message_number = ls_return-number
              message_par1   = ls_return-message_v1
              message_par2   = ls_return-message_v2
              message_par3   = ls_return-message_v3
              message_par4   = ls_return-message_v4.
        ENDIF.
      CATCH cx_hrrcf INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
    ENDTRY.
*
  ENDIF.      "lv_change_status EQ true.
*
ENDMETHOD.
ENDCLASS.