class ZCL_IM_HR_INTEGRAT_TO_EREC definition
  public
  final
  create public .

public section.

  interfaces IF_EX_HRPAD00INFTY .
protected section.
private section.
ENDCLASS.



CLASS ZCL_IM_HR_INTEGRAT_TO_EREC IMPLEMENTATION.


  method IF_EX_HRPAD00INFTY~AFTER_INPUT.
  endmethod.


  method IF_EX_HRPAD00INFTY~BEFORE_OUTPUT.
  endmethod.


  method IF_EX_HRPAD00INFTY~IN_UPDATE.
* FM's don't exist in ABA --> therefore use 'tricky programming'
* since this method is only called in an integrated system
  DATA: lv_func TYPE rs38l_fnam VALUE 'HR_RCF_TRANSFER_HRPA30_CHANGES'.

  DATA: lt_new_image              TYPE psoper_tab,
        ls_new_image              TYPE psoper,
        lv_infty                  TYPE infty,
        lv_pernr                  TYPE pernr_d.

  DATA: lt_error                  TYPE STANDARD TABLE OF  hrale_err,
        ls_prelp                  TYPE prelp,
        ls_p0000                  TYPE p0000,
        ls_p0006                  TYPE p0006,
        ls_p0105                  TYPE p0105,
        ls_e1p0000                TYPE e1p0000,
        ls_e1p0006                TYPE e1p0006,
        ls_e1p0105                TYPE e1p0105,
        lv_dest                   TYPE string VALUE 'NONE'.


* EREC-integration is only called if data is available and for employees
  IF new_image IS INITIAL OR ipspar-tclas <> 'A'.          "MELN1556918
    RETURN.
  ENDIF.

  lt_new_image = new_image.

* check function module exists
  CALL FUNCTION 'FUNCTION_EXISTS'                  "ERP
    EXPORTING
      funcname                 = lv_func
    EXCEPTIONS
      function_not_exist       = 1
      OTHERS                   = 2.

  IF sy-subrc = 0.
* ERECRUIT available in ERP-system (possible I1-scenario)

*   table lt_new_image has the relevant PA-Infotype information
    LOOP AT lt_new_image INTO ls_new_image
                         WHERE ( infty = '0000'
                              OR infty = '0006'
                              OR infty = '0105' ).
      IF ls_new_image-pernr IS INITIAL.
        CONTINUE.
      ENDIF.
      MOVE-CORRESPONDING ls_new_image TO ls_prelp.

*     Set parameter
      lv_pernr = ls_new_image-pernr.
      lv_infty = ls_new_image-infty.

      CASE lv_infty.
        WHEN '0000'.
          CALL METHOD cl_hr_pnnnn_type_cast=>prelp_to_pnnnn
            EXPORTING
              prelp = ls_prelp
            IMPORTING
              pnnnn = ls_p0000.

          IF ls_p0000 IS NOT INITIAL.
            CALL FUNCTION 'CONVERT_P0000_TO_E1P0000'
              EXPORTING
                pnnnn_data = ls_p0000
              TABLES
                error_tab  = lt_error
              CHANGING
                sdata_data = ls_e1p0000.

            IF lt_error IS INITIAL.
*             call EREC-integration in new LUW in order to ensure
*             correct BP-integration and BP-updates
              CALL FUNCTION 'HCM_P_NA_INTEGRATION'           "MELN1556918
                DESTINATION lv_dest
                EXPORTING
                  iv_pernr              = lv_pernr
                  iv_infty              = lv_infty
                  is_e1p0000            = ls_e1p0000
                EXCEPTIONS                                 "MELN1638812
                  system_failure        = 1
                  communication_failure = 2
                  OTHERS                = 3.
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.
            ENDIF.
          ENDIF.


        WHEN '0006'.
          CALL METHOD cl_hr_pnnnn_type_cast=>prelp_to_pnnnn
            EXPORTING
              prelp = ls_prelp
            IMPORTING
              pnnnn = ls_p0006.

          IF ls_p0006 IS NOT INITIAL.
            CALL FUNCTION 'CONVERT_P0006_TO_E1P0006'
              EXPORTING
                pnnnn_data = ls_p0006
              TABLES
                error_tab  = lt_error
              CHANGING
                sdata_data = ls_e1p0006.

            IF lt_error IS INITIAL.
*             call EREC-integration in new LUW in order to ensure
*             correct BP-integration and BP-updates
              CALL FUNCTION 'HCM_P_NA_INTEGRATION'           "MELN1556918
                DESTINATION lv_dest
                EXPORTING
                  iv_pernr              = lv_pernr
                  iv_infty              = lv_infty
                  is_e1p0006            = ls_e1p0006
                EXCEPTIONS                                 "MELN1638812
                  system_failure        = 1
                  communication_failure = 2
                  OTHERS                = 3.
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.
            ENDIF.
          ENDIF.


        WHEN '0105'.
          CALL METHOD cl_hr_pnnnn_type_cast=>prelp_to_pnnnn
            EXPORTING
              prelp = ls_prelp
            IMPORTING
              pnnnn = ls_p0105.

          IF ls_p0105 IS NOT INITIAL.
            CALL FUNCTION 'CONVERT_P0105_TO_E1P0105'
              EXPORTING
                pnnnn_data = ls_p0105
              TABLES
                error_tab  = lt_error
              CHANGING
                sdata_data = ls_e1p0105.

            IF ls_new_image-opera EQ 'D'.
              CLEAR:
                ls_e1p0105-usrid,
                ls_e1p0105-usrid_long.
            ENDIF.

            IF lt_error IS INITIAL.
*             call EREC-integration in new LUW in order to ensure
*             correct BP-integration and BP-updates
              CALL FUNCTION 'HCM_P_NA_INTEGRATION'           "MELN1556918
                DESTINATION lv_dest
                EXPORTING
                  iv_pernr              = lv_pernr
                  iv_infty              = lv_infty
                  is_e1p0105            = ls_e1p0105
                EXCEPTIONS                                 "MELN1638812
                  system_failure        = 1
                  communication_failure = 2
                  OTHERS                = 3.
              IF sy-subrc <> 0.
                CONTINUE.
              ENDIF.
            ENDIF.
          ENDIF.
      ENDCASE.

    ENDLOOP.
  ENDIF. "IF sy-subrc = 0.

  endmethod.
ENDCLASS.