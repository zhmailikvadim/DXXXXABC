FUNCTION BUPA_CENTRAL_CHANGE
  IMPORTING
    VALUE(IV_PARTNER) TYPE BU_PARTNER OPTIONAL
    VALUE(IV_PARTNER_GUID) TYPE BU_PARTNER_GUID OPTIONAL
    VALUE(IS_DATA) TYPE BAPIBUS1006_CENTRAL OPTIONAL
    VALUE(IS_DATA_PERSON) TYPE BAPIBUS1006_CENTRAL_PERSON OPTIONAL
    VALUE(IS_DATA_ORGAN) TYPE BAPIBUS1006_CENTRAL_ORGAN OPTIONAL
    VALUE(IS_DATA_GROUP) TYPE BAPIBUS1006_CENTRAL_GROUP OPTIONAL
    VALUE(IS_DATA_X) TYPE BAPIBUS1006_CENTRAL_X OPTIONAL
    VALUE(IS_DATA_PERSON_X) TYPE BAPIBUS1006_CENTRAL_PERSON_X OPTIONAL
    VALUE(IS_DATA_ORGAN_X) TYPE BAPIBUS1006_CENTRAL_ORGAN_X OPTIONAL
    VALUE(IS_DATA_GROUP_X) TYPE BAPIBUS1006_CENTRAL_GROUP_X OPTIONAL
    VALUE(IS_CENTRAL_CUSTOMER_EXT) TYPE BUPA_CENTR_CUST_EXT OPTIONAL
    VALUE(IS_CENTRAL_CUSTOMER_EXT_X) TYPE BUPA_CENTR_CUST_EXT_X OPTIONAL
    VALUE(IV_X_SAVE) TYPE BAPI4001_1-SAVE_ADDR DEFAULT 'X'
    VALUE(IV_CHANGE_BAS) TYPE SZAD_FIELD-FLAG DEFAULT 'X'
    VALUE(IV_DUPLICATE_MESSAGE_TYPE) TYPE BAPIBUS1006_HEAD-CONTROLDUPLICATEMESSAGE OPTIONAL
    VALUE(IV_VALID_DATE) TYPE BAPIBUS1006_VALIDITY-VALID_DATE DEFAULT SY-DATLO
    VALUE(IV_CHECK_ADDRESS) TYPE SZAD_FIELD-FLAG DEFAULT 'X'
    VALUE(IS_DUPLICATE_CHECK_ADDRESS) TYPE BAPIBUS1006_ADDRESS OPTIONAL
  TABLES
    IT_ADTEL_ADDR_IND LIKE BAPIADTEL OPTIONAL
    IT_ADFAX_ADDR_IND LIKE BAPIADFAX OPTIONAL
    IT_ADTTX_ADDR_IND LIKE BAPIADTTX OPTIONAL
    IT_ADTLX_ADDR_IND LIKE BAPIADTLX OPTIONAL
    IT_ADSMTP_ADDR_IND LIKE BAPIADSMTP OPTIONAL
    IT_ADRML_ADDR_IND LIKE BAPIADRML OPTIONAL
    IT_ADX400_ADDR_IND LIKE BAPIADX400 OPTIONAL
    IT_ADRFC_ADDR_IND LIKE BAPIADRFC OPTIONAL
    IT_ADPRT_ADDR_IND LIKE BAPIADPRT OPTIONAL
    IT_ADSSF_ADDR_IND LIKE BAPIADSSF OPTIONAL
    IT_ADURI_ADDR_IND LIKE BAPIADURI OPTIONAL
    IT_ADPAG_ADDR_IND LIKE BAPIADPAG OPTIONAL
    IT_ADCOMREM_ADDR_IND LIKE BAPICOMREM OPTIONAL
    IT_ADCOMUSE_ADDR_IND LIKE BAPIADUSE OPTIONAL
    IT_ADTEL_ADDR_IND_X LIKE BAPIADTELX OPTIONAL
    IT_ADFAX_ADDR_IND_X LIKE BAPIADFAXX OPTIONAL
    IT_ADTTX_ADDR_IND_X LIKE BAPIADTTXX OPTIONAL
    IT_ADTLX_ADDR_IND_X LIKE BAPIADTLXX OPTIONAL
    IT_ADSMTP_ADDR_IND_X LIKE BAPIADSMTX OPTIONAL
    IT_ADRML_ADDR_IND_X LIKE BAPIADRMLX OPTIONAL
    IT_ADX400_ADDR_IND_X LIKE BAPIADX40X OPTIONAL
    IT_ADRFC_ADDR_IND_X LIKE BAPIADRFCX OPTIONAL
    IT_ADPRT_ADDR_IND_X LIKE BAPIADPRTX OPTIONAL
    IT_ADSSF_ADDR_IND_X LIKE BAPIADSSFX OPTIONAL
    IT_ADURI_ADDR_IND_X LIKE BAPIADURIX OPTIONAL
    IT_ADPAG_ADDR_IND_X LIKE BAPIADPAGX OPTIONAL
    IT_ADCOMREM_ADDR_IND_X LIKE BAPICOMREX OPTIONAL
    IT_ADCOMUSE_ADDR_IND_X LIKE BAPIADUSEX OPTIONAL
    ET_ADDR_DUPLICATES LIKE BAPIBUS1006_ADDRESS_DUPLICATES OPTIONAL
    ET_RETURN LIKE BAPIRET2 OPTIONAL.













*------ Data declaration----------------------------------------
  DATA:
      ls_but000_old     LIKE bus000___i,
      ls_but000         LIKE bus000___i,
      ls_but000_db      LIKE but000,
      ls_data           LIKE bapibus1006_central,
      ls_data_person    LIKE bapibus1006_central_person,

      lt_but020_mem     LIKE bus020___i OCCURS 0 WITH HEADER LINE,
      lt_but000_ext     TYPE bus000___i,
      lt_return         TYPE bus_bapiret2_t,
      lt_return_badi    TYPE bus_bapiret2_t,

      lv_address_change LIKE boole-boole,
      lv_indi_com_upd   LIKE boole-boole,
      lv_indx           LIKE sy-tabix,
      lv_memory_data    LIKE boole-boole,
      lv_lines          TYPE i,
      lv_msgv1          LIKE sy-msgv1,
      lv_msgv2          LIKE sy-msgv2,
      lv_title_key      LIKE but000-title,
      ls_return         LIKE et_return,
      ls_data_misc      LIKE bussdi3-data,
      lv_com_handle     LIKE szad_field-handle,
      lv_check_only_external_data
                        TYPE  boole-boole,
      lv_corr_1191_status(10),
      lv_addrnumber     LIKE but020-addrnumber,
      lv_found          TYPE xfeld,
      lv_ind_com_change LIKE boole-boole,
      lv_date_from_ini  LIKE  but000-valid_from,
      lv_date_to_ini    LIKE  but000-valid_from,
      lv_tstmp_sydatlo  LIKE  but000-valid_from,
      lv_addrind_err    LIKE  boole-boole,
      lc_ref           TYPE REF TO cx_badi_not_implemented,
      lv_cd_suppressed  LIKE boole-boole,
      lv_aktyp          LIKE tbz0k-aktyp VALUE '02',
*---> local contants
      lc_bus1006_central TYPE bu_dbtab
                       VALUE 'BAPIBUS1006_CENTRAL',
      lc_bus1006_person TYPE bu_dbtab
                        VALUE 'BAPIBUS1006_CENTRAL_PERSON',
      lc_bus1006_organ  TYPE bu_dbtab
                        VALUE 'BAPIBUS1006_CENTRAL_ORGAN',
      lc_bus1006_group TYPE bu_dbtab
                        VALUE 'BAPIBUS1006_CENTRAL_GROUP',
      lc_fm_bup_memory_but000_fill TYPE rs38l-name
                        VALUE 'BUP_MEMORY_BUT000_FILL'.
  DATA: BEGIN OF ls_searchfields,
          sort1         TYPE ad_sort1,
          sort2         TYPE ad_sort2,
          name_first    TYPE name_first,
          name_last     TYPE name_last,
          birthdate     TYPE bu_birthdt,
          name1         TYPE ad_name1,
          name2         TYPE ad_name2,
          name3         TYPE ad_name3,
          name4         TYPE ad_name4,
          building      TYPE ad_bldng_p,
          department    TYPE ad_dprtmnt,
          floor         TYPE ad_floor,
          function      TYPE ad_fnctn,
          id_code       TYPE ad_id_code,
          ih_mail       TYPE ad_ih_mail,
          roomnumber    TYPE ad_roomnum,
          city1         TYPE ad_city1,
          city2         TYPE ad_city2,
          country       TYPE land1,
          house_num1    TYPE ad_hsnm1,
          house_num2    TYPE ad_hsnm2,
          location      TYPE ad_lctn,
          name_co       TYPE ad_name_co,
          post_code1    TYPE ad_pstcd1,
          post_code2    TYPE ad_pstcd2,
          post_code3    TYPE ad_pstcd3,
          po_box        TYPE ad_pobx,
          po_box_loc    TYPE ad_pobxloc,
          region        TYPE regio,
          street        TYPE ad_street,
          str_suppl1    TYPE ad_strspp1,
          str_suppl2    TYPE ad_strspp2,
          str_suppl3    TYPE ad_strspp3,
          county        TYPE ad_county,
          township      TYPE ad_township,
        END OF ls_searchfields.

  DATA:   gv_icomm_ind type xfeld,
          ls_tb056     type tb056,
          gc_dev_icomm like tb056-object   value 'ADDR_ICOMM'.

  STATICS:
       sv_corr_1191_status(10).

* Begin of change BPDP implementation 23/02/2012 C5167396
  DATA: lt_partner      TYPE STANDARD TABLE OF bupa_partner,
        lt_partner_guid TYPE STANDARD TABLE OF bup_partnerguid_s,
        ls_partner      TYPE bupa_partner,
        ls_partner_guid TYPE bup_partnerguid_s,
        lv_check_actvt  TYPE boole_d.
* End of change BPDP implementation 23/02/2012 C5167366

*------ Initialisation ------------------------------------------------
  CLEAR:
         lv_ind_com_change,
         ls_data,
         ls_data_person,
         et_return,
         lt_return,
         lt_but020_mem,
         lv_address_change,
         ls_but000,
         ls_but000_old,
         lv_memory_data,
         lv_lines,
         et_addr_duplicates,
         lv_addrind_err.

  REFRESH:
         et_return,
         lt_return,
         lt_but020_mem,
         et_addr_duplicates.

*Begin of change BPDP implementation 23/02/2012 C5167396
*Prepare Export Parameter for BPDP Function Call
  ls_partner-partner = iv_partner.
  APPEND ls_partner TO lt_partner.
  CLEAR ls_partner.

  ls_partner_guid-partner_guid = iv_partner_guid.
  APPEND ls_partner_guid TO lt_partner_guid.
  CLEAR ls_partner_guid.

*Set Activity parameter 'X' for Add operation
  lv_check_actvt = 'X'.

  CALL FUNCTION 'BUPA_DP_AUTHCHECK_API'
    EXPORTING
      iv_partner      = lt_partner
      iv_partner_guid = lt_partner_guid
      iv_check_chng_actvt = lv_check_actvt
    TABLES
      et_return       = et_return.
  IF et_return[] IS NOT INITIAL.
* If Partner is not authorized then Exit.
    LOOP AT et_return WHERE type = gc_msgty_error
                      OR    type = gc_msgty_abort.
      EXIT.
    ENDLOOP.
    IF sy-subrc IS INITIAL.
      EXIT.
    ENDIF.
  ENDIF.
*End of change BPDP implementation 23/02/2012 C5167396

  CONVERT DATE gc_emplo_date_from   INTO TIME STAMP   lv_date_from_ini
          TIME ZONE gc_tzone_utc.

  CONVERT DATE gc_emplo_date_to     TIME gc_time_to
          INTO TIME STAMP           lv_date_to_ini
          TIME ZONE gc_tzone_utc.

  CONVERT DATE sy-datlo                    "valid from today, 00:00:00
          INTO TIME STAMP           lv_tstmp_sydatlo
          TIME ZONE gc_tzone_utc.


  PERFORM check_set_x_save  TABLES et_return
                            USING  iv_x_save
                                   'BUPA_CENTRAL_CHANGE'.

  LOOP AT et_return WHERE type = gc_msgty_abort
                    OR    type = gc_msgty_error.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    EXIT.
  ENDIF.

  IF iv_x_save IS INITIAL.
    IF gv_badi_called_save_control IS INITIAL.
      gv_badi_called_save_control = gc_x.
      CALL METHOD cl_exithandler=>get_instance
        EXPORTING
          exit_name              = 'BUPA_SAVE_CONTROL'
          null_instance_accepted = gc_x
        CHANGING
          instance               = gv_exit_class_save_control
        EXCEPTIONS
          OTHERS                 = 1.
      IF sy-subrc <> 0.
        CLEAR gv_exit_class_save_control.
      ENDIF.
    ENDIF.
* Process only, if BADI is active
    IF gv_exit_class_save_control IS NOT INITIAL.
      CALL METHOD gv_exit_class_save_control->save_later.
    ENDIF.
  ENDIF.

*  get BADI gv_exit_class_default.
*  if gv_exit_class_default is not initial.
*  CALL badi gv_exit_class_default->set_default changing
*                     is_data_group   = is_data_group
*                     is_data_person  = is_data_person
*                     is_data_organ   = is_data_organ
*                     is_data         = is_data
*                     is_data_x       = is_data_x
*                     is_data_person_x = is_data_person_x
*                     is_data_organ_x  = is_data_organ_x
*                     is_data_group_x  = is_data_group_x.
*  endif.

  IF NOT iv_partner IS INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = iv_partner
      IMPORTING
        output = iv_partner.
  ENDIF.
* Register the function module for the initialisation of the global variables
* and tables with the call of FM BAPI_TRANSACTION_ROLLBACK and BAPI_TRANSACTION_COMMIT.
  CALL FUNCTION 'BUFFER_SUBSCRIBE_FOR_REFRESH'
    EXPORTING
      name_of_deletefunc = 'BUP_MEMORY_CENTRAL_INIT'.

*----- FS --------------------------------------------------------------
  CALL FUNCTION 'BUPA_GET_FLAG_EXTERN_DATACHECK'
    IMPORTING
      ev_check_only_external_data = lv_check_only_external_data.

  IF NOT lv_check_only_external_data IS INITIAL.

    TRY.
        GET BADI gv_exit_class_general_imp.
      CATCH cx_badi_not_implemented INTO lc_ref.
    ENDTRY.
***In check only external data mode (used by FS to import
***data in to our memory for checks), the partner number
***need not exist in table BUT000. Following chks are obsolete
    IF 1 = 2.
      IF NOT iv_partner IS INITIAL.
        CALL FUNCTION 'BUP_BUT000_SELECT_SINGLE'
          EXPORTING
            i_partner    = iv_partner
            i_valdt_sel  = iv_valid_date
            i_cp_exclude = gc_x
          EXCEPTIONS
            not_found    = 1
            OTHERS       = 2.
        IF sy-subrc <> 0.
          PERFORM exception_message_store TABLES et_return.
        ENDIF.
      ELSEIF NOT iv_partner_guid IS INITIAL.
        CALL FUNCTION 'BUP_BUT000_SELECT_WITH_GUID'
          EXPORTING
            i_partner_guid    = iv_partner_guid
            i_valdt_sel       = iv_valid_date
          EXCEPTIONS
            not_found         = 1
            bpext_not_entered = 2
            OTHERS            = 3.
        IF sy-subrc <> 0.
          PERFORM exception_message_store TABLES et_return.
        ENDIF.
      ELSE.
        IF 1 = 2. MESSAGE e123. ENDIF.
        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = gc_msgty_error
            cl     = gc_msgid_r11
            number = 123
          IMPORTING
            return = ls_return.
        APPEND ls_return TO et_return.
      ENDIF.

      LOOP AT et_return WHERE type = gc_msgty_error
                        OR    type = gc_msgty_abort.
        EXIT.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        EXIT.
      ENDIF.
    ENDIF.

    CLEAR:   lt_return_badi.
    REFRESH: lt_return_badi.

* Process only, if BADI is active
    IF gv_exit_class_general_imp IS NOT INITIAL.

      CALL BADI gv_exit_class_general_imp->general_data_import
        EXPORTING
          iv_partner       = iv_partner
*         IV_TIMESTAMP_BUS =
        IMPORTING
          es_but000        = ls_but000
          et_return        = lt_return_badi.

      APPEND LINES OF lt_return_badi TO et_return.
      LOOP AT et_return WHERE type = gc_msgty_abort
                        OR    type = gc_msgty_error.
        EXIT.
      ENDLOOP.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.

*------ in the case of both numbers are entered ----------------------------
    IF NOT iv_partner IS INITIAL AND NOT iv_partner_guid IS INITIAL.
      IF ls_but000-partner_guid <> iv_partner_guid.
        IF 1 = 2.
          MESSAGE e120 WITH ls_but000-partner iv_partner_guid.
        ENDIF.
        lv_msgv1 = ls_but000-partner.
        lv_msgv2 = iv_partner_guid.
        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = gc_msgty_error
            cl     = gc_msgid_r11
            number = 120
            par1   = lv_msgv1
            par2   = lv_msgv2
          IMPORTING
            return = ls_return.
        APPEND ls_return TO et_return.
      ENDIF.
    ENDIF.
  ELSE.
*------ Check, if the partner is in the memory ---------------------
    IF NOT iv_partner IS INITIAL.
      CALL FUNCTION 'BUP_MEMORY_BUT000_GET'
        EXPORTING
          iv_partner      = iv_partner
          iv_valdt_sel    = iv_valid_date
        IMPORTING
          es_but000       = ls_but000
          es_but000_old   = ls_but000_old
        EXCEPTIONS
          not_found       = 1
          parameter_error = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
      ENDIF.
    ELSEIF NOT iv_partner_guid IS INITIAL.

      CALL FUNCTION 'BUP_MEMORY_BUT000_GET'
        EXPORTING
          iv_partner_guid = iv_partner_guid
          iv_valdt_sel    = iv_valid_date
        IMPORTING
          es_but000       = ls_but000
          es_but000_old   = ls_but000_old
        EXCEPTIONS
          not_found       = 1
          parameter_error = 2
          OTHERS          = 3.
      IF sy-subrc <> 0.
      ENDIF.
      IF iv_partner IS INITIAL AND
         NOT ls_but000-partner IS INITIAL.
        iv_partner = ls_but000-partner.
      ENDIF.
    ENDIF.

*------ Set the parameter: data stand in the memory  ------------------------
    IF sy-subrc = 0.
      lv_memory_data = gc_x.
    ENDIF.

    IF ls_but000 IS INITIAL.
      IF NOT iv_partner IS INITIAL.
        CALL FUNCTION 'BUP_BUT000_SELECT_SINGLE'
          EXPORTING
            i_partner    = iv_partner
            i_valdt_sel  = iv_valid_date
            i_cp_exclude = gc_x
          IMPORTING
            e_but000     = ls_but000_db
          EXCEPTIONS
            not_found    = 1
            OTHERS       = 2.
        IF sy-subrc <> 0.
          PERFORM exception_message_store TABLES et_return.
        ELSE.
          MOVE-CORRESPONDING ls_but000_db TO ls_but000.
          MOVE-CORRESPONDING ls_but000_db TO ls_but000_old.
        ENDIF.
      ELSEIF NOT iv_partner_guid IS INITIAL.
        CALL FUNCTION 'BUP_BUT000_SELECT_WITH_GUID'
          EXPORTING
            i_partner_guid    = iv_partner_guid
            i_valdt_sel       = iv_valid_date
          IMPORTING
            e_but000          = ls_but000_db
          EXCEPTIONS
            not_found         = 1
            bpext_not_entered = 2
            OTHERS            = 3.
        IF sy-subrc <> 0.
          PERFORM exception_message_store TABLES et_return.
        ELSE.
          MOVE-CORRESPONDING ls_but000_db TO ls_but000.
          MOVE-CORRESPONDING ls_but000_db TO ls_but000_old.
          IF iv_partner IS INITIAL AND
             NOT ls_but000-partner IS INITIAL.
            iv_partner = ls_but000-partner.
          ENDIF.
        ENDIF.
      ELSE.
        IF 1 = 2. MESSAGE e123. ENDIF.
        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = gc_msgty_error
            cl     = gc_msgid_r11
            number = 123
          IMPORTING
            return = ls_return.
        APPEND ls_return TO et_return.
      ENDIF.

      IF   ls_but000-valid_from  IS   INITIAL
      OR   ls_but000-valid_from  <    lv_date_from_ini.
        ls_but000-valid_from  =    lv_date_from_ini.
      ENDIF.
      IF   ls_but000-valid_to    IS   INITIAL
      OR   ls_but000-valid_to    <    lv_date_from_ini.
        ls_but000-valid_to    =    lv_date_to_ini.
      ENDIF.


*------ In the case, that the number and the GUID are entered---------------
      IF NOT iv_partner IS INITIAL AND NOT iv_partner_guid IS INITIAL.
        IF ls_but000-partner_guid <> iv_partner_guid.
          IF 1 = 2.
            MESSAGE e120 WITH ls_but000-partner iv_partner_guid.
          ENDIF.
          lv_msgv1 = ls_but000-partner.
          lv_msgv2 = iv_partner_guid.
          CALL FUNCTION 'BALW_BAPIRETURN_GET2'
            EXPORTING
              type   = gc_msgty_error
              cl     = gc_msgid_r11
              number = 120
              par1   = lv_msgv1
              par2   = lv_msgv2
            IMPORTING
              return = ls_return.
          APPEND ls_return TO et_return.
        ENDIF.
      ENDIF.

      LOOP AT et_return WHERE type = gc_msgty_error
                        OR    type = gc_msgty_abort.
        EXIT.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        EXIT.
      ENDIF.

    ENDIF.

    GET BADI gv_exit_class_default.
    IF gv_exit_class_default IS NOT INITIAL.
      CALL BADI gv_exit_class_default->set_default
        EXPORTING
          iv_category      = ls_but000-type
        CHANGING
          is_data_group    = is_data_group
          is_data_person   = is_data_person
          is_data_organ    = is_data_organ
          is_data          = is_data
          is_data_x        = is_data_x
          is_data_person_x = is_data_person_x
          is_data_organ_x  = is_data_organ_x
          is_data_group_x  = is_data_group_x.
    ENDIF.

  ENDIF.
* Now the BP-type is know, call of the field attribute check
  CALL FUNCTION 'BUS_FMOD_BAPI'
    EXPORTING
      i_objap = gc_objap_bupa
      i_aktyp = gc_aktyp_change.

* if there is change to correspondence lang, and this change is not a deletion, map it to ISO
  IF is_data_person_x-correspondlanguage IS NOT INITIAL.
    IF is_data_person-correspondlanguage IS NOT INITIAL.
      CALL FUNCTION 'LANGUAGE_CODE_SAP_TO_ISO'
        EXPORTING
          sap_code  = is_data_person-correspondlanguage
        IMPORTING
          iso_code  = is_data_person-correspondlanguageiso
        EXCEPTIONS
          not_found = 1
          OTHERS    = 2.
      IF sy-subrc <> 0.
        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = gc_msgty_error
            cl     = sy-msgid
            number = sy-msgno
            par1   = sy-msgv1
          IMPORTING
            return = ls_return.
        APPEND ls_return TO et_return.
      ENDIF.
    ENDIF.
  ENDIF.

*----- Decide the activity for the authorization check for this process---
  IF NOT iv_partner IS INITIAL."if partner is supplied
    CALL FUNCTION 'BUP_BUT000_SELECT_SINGLE'
      EXPORTING
        i_partner      = iv_partner
      EXCEPTIONS
        not_found      = 1
        internal_error = 2
        OTHERS         = 3.
    IF sy-subrc = 0. "if partner found on DB
      lv_aktyp = gc_aktyp_change.
    ELSE.
      lv_aktyp = gc_aktyp_create.
    ENDIF.

  ELSE.   "if guid is supplied
    CALL FUNCTION 'BUP_BUT000_SELECT_WITH_GUID'
      EXPORTING
        i_partner_guid    = iv_partner_guid
      EXCEPTIONS
        not_found         = 1
        bpext_not_entered = 2
        OTHERS            = 3.
    IF sy-subrc = 0. "if partner found on DB
      lv_aktyp = gc_aktyp_change.
    ELSE.
      lv_aktyp = gc_aktyp_create.
    ENDIF.

  ENDIF.

*------- Authority-check ------------------------------------------
  PERFORM partner_authority_check TABLES lt_return
                                  USING lv_aktyp
                                        ls_but000-augrp
                                        space.

  IF lt_return IS INITIAL AND is_data-authorizationgroup IS NOT INITIAL.
    PERFORM partner_authority_check TABLES lt_return
                                    USING lv_aktyp
                                          is_data-authorizationgroup
                                          space.
  ENDIF.

  APPEND LINES OF lt_return TO et_return.
  LOOP AT et_return WHERE type = gc_msgty_error
                      OR    type = gc_msgty_abort.
    EXIT.
  ENDLOOP.
  IF sy-subrc = 0.
    EXIT.
  ENDIF.

*---> Check the field attributes of the cenrtal part
  gv_cat_fmod = ls_but000-type. " Fill category to be used by the FMOD routine
  PERFORM get_fmod_status TABLES lt_return
                          USING lc_bus1006_central
                                is_data
                                is_data_x
                                gc_aktyp_change.

*---> Check the field attriutes of the person data
  IF ls_but000-type = gc_type_person.
    PERFORM get_fmod_status TABLES lt_return
                            USING lc_bus1006_person
                                  is_data_person
                                  is_data_person_x
                                  gc_aktyp_change.

*---> Check the field attributes of the organisation data
  ELSEIF ls_but000-type = gc_type_organ.
    PERFORM get_fmod_status TABLES lt_return
                            USING lc_bus1006_organ
                            is_data_organ
                            is_data_organ_x
                            gc_aktyp_change.

*--->  Check the field attributes of the group data
  ELSEIF ls_but000-type = gc_type_group.
    PERFORM get_fmod_status TABLES lt_return
                            USING lc_bus1006_group
                                  is_data_group
                                  is_data_group_x
                                  gc_aktyp_change.
  ENDIF.

  APPEND LINES OF lt_return TO et_return.
  LOOP AT et_return WHERE type = gc_msgty_error
                    OR    type = gc_msgty_abort.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL.
    EXIT.
  ENDIF.

*------ Set the activity type -------------------------------------------
  IF lv_memory_data IS INITIAL.        "Data are coming from the data base
    ls_but000-aktdb = gc_aktyp_change.
  ENDIF.

*-------- BP enqueue ---------------------------------------------------
***In CHECK_MODE, partner need not exist in BUT000
  IF lv_check_only_external_data IS INITIAL.
    CALL FUNCTION 'BUPA_ENQUEUE'
      EXPORTING
        iv_partner = ls_but000-partner
      TABLES
        et_return  = lt_return.
  ELSE.
    CALL FUNCTION 'BUPA_ENQUEUE'
      EXPORTING
        iv_partner          = ls_but000-partner
        iv_check_not_number = 'X'
      TABLES
        et_return           = lt_return.
  ENDIF.

  APPEND LINES OF lt_return TO et_return.
  LOOP AT et_return WHERE type = gc_msgty_error
                    OR    type = gc_msgty_abort.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL.
    EXIT.
  ENDIF.

*------ Check the Central Data part --------------------------------
  PERFORM check_data_central
         TABLES
             et_return
         USING
             ls_but000-partner
             ls_but000-type
             is_data_x
             is_data
         CHANGING
             ls_data.
* Check if the External BP-Number already exists in the system if it
* is enterd
  IF NOT is_data-partnerexternal   IS INITIAL AND
     NOT is_data_x-partnerexternal IS INITIAL AND
         lv_check_only_external_data IS INITIAL.
    CALL FUNCTION 'BUP_CHECK_EXT_PARTNER_NO'
      EXPORTING
        iv_bpext      = is_data-partnerexternal
        iv_partner    = ls_but000-partner
      EXCEPTIONS
        partner_found = 1
        OTHERS        = 2.

    IF sy-subrc <> 0.
      PERFORM exception_message_store TABLES et_return.
    ENDIF.
  ENDIF.

*------ Differences between organisation, person and group------
  IF NOT is_data_person IS INITIAL
     AND ls_but000-type = gc_type_person.
*------ Check person data ---------------------
*------ Read from DB only if DOD is changed, DOB   ---------------------
*------ not changed in current session & a value exists in DB for DOB---
    IF is_data_person_x-deathdate IS NOT INITIAL AND
       is_data_person-deathdate IS NOT INITIAL AND
       is_data_person_x-birthdate IS INITIAL AND
       is_data_person-birthdate IS INITIAL  AND
       ls_but000-birthdt IS NOT INITIAL.

      is_data_person-birthdate = ls_but000-birthdt.
      is_data_person-birthdt_status = ls_but000-birthdt_status.
      TRANSLATE is_data_person-birthdt_status TO UPPER CASE.
    ENDIF.

    PERFORM check_data_central_person
           TABLES
               et_return
           USING
               is_data_person_x
               is_data_person
           CHANGING
               ls_data_person.

  ELSEIF NOT is_data_person IS INITIAL
         AND ls_but000-type NE gc_type_person.
* check if the BP-type is in line with the data record
    CALL FUNCTION 'BUP_CHECK_CATEGORY_DATA'
      EXPORTING
        iv_category             = ls_but000-type
        iv_data_category        = gc_type_person
      EXCEPTIONS
        category_data_not_match = 1
        OTHERS                  = 2.

    IF sy-subrc <> 0.
      PERFORM exception_message_store TABLES et_return.
    ENDIF.
  ENDIF.

* Check if the title is in line with the sex (person)
  IF ls_but000-type = gc_type_person.
    IF is_data_x-title_key IS NOT INITIAL.                              "2403779
      lv_title_key = is_data-title_key.
    else.                                     "1930760
      lv_title_key = ls_but000_db-title.
    ENDIF.

    PERFORM check_title_sex TABLES   et_return
                            USING    lv_title_key
                                     is_data_x-title_key
                            CHANGING ls_data_person-sex
                                     is_data_person_x-sex.

    LOOP AT et_return WHERE type = gc_msgty_error
                      OR    type = gc_msgty_abort.
      EXIT.
    ENDLOOP.
    IF sy-subrc IS INITIAL.
      EXIT.
    ENDIF.
  ENDIF.

*------ Check the organsisation data ------------------------------
  IF NOT is_data_organ IS INITIAL AND ls_but000-type = gc_type_organ.

* pass both the foundation date and liquidation date for appropriate check.
* clear these after check
    IF is_data_organ_x-foundationdate is INITIAL.
      is_data_organ-foundationdate = ls_but000-found_dat.
    ENDIF.
    IF is_data_organ_x-liquidationdate is INITIAL.
      is_data_organ-liquidationdate = ls_but000-liquid_dat.
    ENDIF.

*------ positve Überprüfung: Organisationsdaten checken ----------------
      PERFORM check_data_central_organ
             TABLES
               et_return
             USING
               ls_but000-partner
               is_data_organ_x
               is_data_organ.

* clear the check only values, foundation date and liquidation date
    IF is_data_organ_x-foundationdate is INITIAL.
      CLEAR is_data_organ-foundationdate.
    ENDIF.
    IF is_data_organ_x-liquidationdate is INITIAL.
      CLEAR is_data_organ-liquidationdate.
    ENDIF.

  ELSEIF NOT is_data_organ IS INITIAL
     AND ls_but000-type NE gc_type_organ.
* check if the BP-type is in line with the data record
    CALL FUNCTION 'BUP_CHECK_CATEGORY_DATA'
      EXPORTING
        iv_category             = ls_but000-type
        iv_data_category        = gc_type_organ
      EXCEPTIONS
        category_data_not_match = 1
        OTHERS                  = 2.

    IF sy-subrc <> 0.
      PERFORM exception_message_store TABLES et_return.
    ENDIF.
  ENDIF.

*------ Check the group data ------------------------------------
  IF NOT is_data_group IS INITIAL AND ls_but000-type = gc_type_group.
    PERFORM check_data_central_group
           TABLES
               et_return
           USING
               is_data_group_x
               is_data_group.

  ELSEIF NOT is_data_group IS INITIAL
      AND ls_but000-type NE gc_type_group.
* check if the BP-type is in line with the data record
    CALL FUNCTION 'BUP_CHECK_CATEGORY_DATA'
      EXPORTING
        iv_category             = ls_but000-type
        iv_data_category        = gc_type_group
      EXCEPTIONS
        category_data_not_match = 1
        OTHERS                  = 2.

    IF sy-subrc <> 0.
      PERFORM exception_message_store TABLES et_return.
    ENDIF.
  ENDIF.

  LOOP AT et_return WHERE type = gc_msgty_error
                    OR    type = gc_msgty_abort.
    EXIT.
  ENDLOOP.
  IF sy-subrc IS INITIAL.
    EXIT.
  ENDIF.

* Mapping of the changed data in the new structure
*------ general Data -----------------------------------------------
  IF NOT is_data_x IS INITIAL.
* The lanuage (BUT000-BU_LANGU) may only be enterd for person and group.
    IF  ls_but000-type EQ gc_type_organ AND
      ( NOT ls_data-partnerlanguage    IS INITIAL OR
        NOT ls_data-partnerlanguageiso IS INITIAL ).
      CLEAR:  ls_data-partnerlanguage,
              ls_data-partnerlanguageiso.
      IF 1 = 2. MESSAGE w336. ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = gc_msgty_warn
          cl     = gc_msgid_r11
          number = 336
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_return.
    ENDIF.
    PERFORM map_change_data
            USING
                is_data_x
                ls_data
                lv_tstmp_sydatlo
            CHANGING
                lv_address_change
                ls_but000.
  ENDIF.

*------ person data --------------------------------------------------
  IF NOT is_data_person_x IS INITIAL.
    IF ls_but000-type = gc_type_person.
      PERFORM map_change_data_person
              USING
                  is_data_person_x
                  ls_data_person
                  lv_tstmp_sydatlo
              CHANGING
                  lv_address_change
                  ls_but000.
    ELSE.
      IF 1 = 2. MESSAGE e126(r11) WITH ls_but000-type gc_type_person. ENDIF.
      lv_msgv1 = ls_but000-type.
      lv_msgv2 =  gc_type_person.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = gc_msgty_error
          cl     = gc_msgid_r11
          number = 126
          par1   = lv_msgv1
          par2   = lv_msgv2
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_return.
      EXIT.
    ENDIF.
  ENDIF.

*------ organisation data ---------------------------------------------
  IF NOT is_data_organ_x IS INITIAL.
    IF ls_but000-type = gc_type_organ.
      PERFORM map_change_data_organ
              USING
                  is_data_organ_x
                  is_data_organ
                  lv_tstmp_sydatlo
              CHANGING
                  lv_address_change
                  ls_but000.
    ELSE.
      IF 1 = 2. MESSAGE e126(r11) WITH ls_but000-type gc_type_organ. ENDIF.
      lv_msgv1 = ls_but000-type.
      lv_msgv2 =  gc_type_organ.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = gc_msgty_error
          cl     = gc_msgid_r11
          number = 126
          par1   = lv_msgv1
          par2   = lv_msgv2
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_return.
      EXIT.
    ENDIF.
  ENDIF.

*------ group data ---------------------------------------------------
  IF NOT is_data_group_x IS INITIAL.
    IF ls_but000-type = gc_type_group.
      PERFORM map_change_data_group
              USING
                  is_data_group_x
                  is_data_group
                  lv_tstmp_sydatlo
              CHANGING
                  lv_address_change
                  ls_but000.
    ELSE.
      IF 1 = 2. MESSAGE e126(r11) WITH ls_but000-type gc_type_group. ENDIF.
      lv_msgv1 = ls_but000-type.
      lv_msgv2 =  gc_type_group.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = gc_msgty_error
          cl     = gc_msgid_r11
          number = 126
          par1   = lv_msgv1
          par2   = lv_msgv2
        IMPORTING
          return = ls_return.
      APPEND ls_return TO et_return.
      EXIT.
    ENDIF.
  ENDIF.

*-------- Call BAdI for Userchecks ------------------------------

  PERFORM map_but000_back
            USING      ls_but000-type
                       ls_but000-bu_group
                       ls_but000
            CHANGING   ls_data
                       ls_data_person
                       is_data_organ
                       is_data_group.

  PERFORM check_badi_call
              USING
                 '02'                  "change this partner
                 iv_partner
                 ls_but000-type
                 ls_but000-bu_group
                 ls_data
                 ls_data_person
                 is_data_organ
                 is_data_group
                 ls_but000
                 is_data_x
                 is_data_person_x
                 is_data_organ_x
                 is_data_group_x
                 ' '                      "iv_testrun
                 iv_x_save
                 lv_check_only_external_data
              CHANGING
                 et_return[].

  LOOP AT et_return WHERE type = gc_msgty_error
                    OR    type = gc_msgty_abort.
  ENDLOOP.
  IF sy-subrc IS INITIAL.
    EXIT.
  ENDIF.

* addressindedentent communication data
* call only if the data shall be changed
  IF lv_check_only_external_data IS INITIAL.

    IF NOT it_adtel_addr_ind[]        IS INITIAL
    OR NOT it_adfax_addr_ind[]    IS INITIAL
    OR NOT it_adttx_addr_ind[]    IS INITIAL
    OR NOT it_adtlx_addr_ind[]    IS INITIAL
    OR NOT it_adsmtp_addr_ind[]   IS INITIAL
    OR NOT it_adrml_addr_ind[]    IS INITIAL
    OR NOT it_adx400_addr_ind[]   IS INITIAL
    OR NOT it_adrfc_addr_ind[]    IS INITIAL
    OR NOT it_adprt_addr_ind[]    IS INITIAL
    OR NOT it_adssf_addr_ind[]    IS INITIAL
    OR NOT it_aduri_addr_ind[]    IS INITIAL
    OR NOT it_adpag_addr_ind[]    IS INITIAL
    OR NOT it_adcomrem_addr_ind[] IS INITIAL
    OR NOT it_adcomuse_addr_ind[] IS INITIAL
    OR NOT is_data_x-comm_type    IS INITIAL.

    PERFORM call_badi_addrind_check TABLES  et_return
                                            it_adtel_addr_ind
                                            it_adfax_addr_ind
                                            it_adttx_addr_ind
                                            it_adtlx_addr_ind
                                            it_adsmtp_addr_ind
                                            it_adrml_addr_ind
                                            it_adx400_addr_ind
                                            it_adrfc_addr_ind
                                            it_adprt_addr_ind
                                            it_adssf_addr_ind
                                            it_aduri_addr_ind
                                            it_adpag_addr_ind
                                            it_adcomrem_addr_ind
                                            it_adcomuse_addr_ind
                                            it_adtel_addr_ind_x
                                            it_adfax_addr_ind_x
                                            it_adttx_addr_ind_x
                                            it_adtlx_addr_ind_x
                                            it_adsmtp_addr_ind_x
                                            it_adrml_addr_ind_x
                                            it_adx400_addr_ind_x
                                            it_adrfc_addr_ind_x
                                            it_adprt_addr_ind_x
                                            it_adssf_addr_ind_x
                                            it_aduri_addr_ind_x
                                            it_adpag_addr_ind_x
                                            it_adcomrem_addr_ind_x
                                            it_adcomuse_addr_ind_x
                                            USING ls_but000.

          LOOP AT et_return WHERE type = gc_msgty_error
                            OR    type = gc_msgty_abort.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            EXIT.
          ENDIF.


***For BAS the suppressing of change documents should be
***done for every call. After every call of ADDR_MEMORY_SAVE
***or ADDR_SINGLE_SAVE the flags are initialized
      CALL FUNCTION 'BUPA_CHECK_CD_SUPPRESSED'
        IMPORTING
          ev_cd_suppressed = lv_cd_suppressed.
      IF NOT lv_cd_suppressed IS INITIAL.
        CALL FUNCTION 'ADDR_SUPPRESS_CHANGE_DOCUMENTS'
          EXPORTING
            suppress_cd_type_1 = gc_x
            suppress_cd_type_2 = gc_x
            suppress_cd_type_3 = gc_x.
      ENDIF.

***Code to check Addr Independent Comm data
 define addr_icomm_check.

  loop at it_ad&1_addr_ind where ( valid_from is not initial or valid_to is not initial )
          AND ( valid_from NE '00010101000000' OR valid_to NE '99991231235959' )
          AND ( valid_from NE '00010101' OR valid_to NE '99991231' ).

    if 1 = 2. message e349   with gc_dev_icomm  iv_partner. endif.
    lv_msgv1  =  gc_dev_icomm.
    lv_msgv2  =  iv_partner.
    call function  'BALW_BAPIRETURN_GET2'
      exporting
        type   = gc_msgty_error
        cl     = gc_msgid_r11
        number = 349
        par1   = lv_msgv1
        par2   = '&1'
      importing
        return = ls_return.

    append ls_return to et_return.

***Message R11 349   &1
   endloop.
*    ENDIF.
 end-of-definition.

 call function 'BUP_TB056_SELECT_SINGLE'
    exporting
      i_object  = 'BUPA'
      i_develop = gc_dev_icomm
    importing
      e_tb056   = ls_tb056
    exceptions
      not_found = 1
      others    = 2.

    gv_icomm_ind = ls_tb056-dev_isactive.

   if gv_icomm_ind is initial.
      addr_icomm_check tel.
      addr_icomm_check fax.
      addr_icomm_check ttx.
      addr_icomm_check tlx.
      addr_icomm_check smtp.
      addr_icomm_check rml.
      addr_icomm_check x400.
      addr_icomm_check rfc.
      addr_icomm_check prt.
      addr_icomm_check ssf.
      addr_icomm_check uri.
      addr_icomm_check pag.
   endif.

  loop at et_return where type = gc_msgty_abort
                    or    type = gc_msgty_error.
        lv_addrind_err = 'X'.
    exit.
  endloop.

     IF lv_addrind_err is initial.
      IF NOT ls_but000-addrcomm IS INITIAL.
        IF NOT  iv_change_bas  IS INITIAL.
          PERFORM change_addr_indi_com  TABLES
                                           et_return
                                           it_adtel_addr_ind
                                           it_adfax_addr_ind
                                           it_adttx_addr_ind
                                           it_adtlx_addr_ind
                                           it_adsmtp_addr_ind
                                           it_adrml_addr_ind
                                           it_adx400_addr_ind
                                           it_adrfc_addr_ind
                                           it_adprt_addr_ind
                                           it_adssf_addr_ind
                                           it_aduri_addr_ind
                                           it_adpag_addr_ind
                                           it_adcomrem_addr_ind
                                           it_adcomuse_addr_ind
                                           it_adtel_addr_ind_x
                                           it_adfax_addr_ind_x
                                           it_adttx_addr_ind_x
                                           it_adtlx_addr_ind_x
                                           it_adsmtp_addr_ind_x
                                           it_adrml_addr_ind_x
                                           it_adx400_addr_ind_x
                                           it_adrfc_addr_ind_x
                                           it_adprt_addr_ind_x
                                           it_adssf_addr_ind_x
                                           it_aduri_addr_ind_x
                                           it_adpag_addr_ind_x
                                           it_adcomrem_addr_ind_x
                                           it_adcomuse_addr_ind_x
                                   USING   iv_partner
                                           ls_but000-addrcomm
                                           iv_x_save
                                           is_data-comm_type
                                           is_data_x-comm_type
                                           iv_check_address.


          LOOP AT et_return WHERE type = gc_msgty_error
                            OR    type = gc_msgty_abort.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            EXIT.
          ELSE.
            lv_indi_com_upd = gc_x.
            lv_ind_com_change = gc_x.

* Register the function module for the initialisation of the global variables
* and tables with the call of FM BAPI_TRANSACTION_ROLLBACK and BAPI_TRANSACTION_COMMIT.
            CALL FUNCTION 'BUFFER_SUBSCRIBE_FOR_REFRESH'
              EXPORTING
                name_of_deletefunc = 'BUP_MEMORY_ADDRESS_INIT'.
          ENDIF.
        ENDIF.
      ELSE.
        PERFORM create_addr_indi_com
                    TABLES
                      et_return
                      it_adtel_addr_ind
                      it_adfax_addr_ind
                      it_adttx_addr_ind
                      it_adtlx_addr_ind
                      it_adsmtp_addr_ind
                      it_adrml_addr_ind
                      it_adx400_addr_ind
                      it_adrfc_addr_ind
                      it_adprt_addr_ind
                      it_adssf_addr_ind
                      it_aduri_addr_ind
                      it_adpag_addr_ind
                      it_adcomrem_addr_ind
                      it_adcomuse_addr_ind
                    USING
                       iv_x_save
                       space
                       iv_check_address
                    CHANGING
                       lv_com_handle
                       is_data-comm_type.


        LOOP AT et_return WHERE type = gc_msgty_error
                          OR    type = gc_msgty_abort.
          lv_addrind_err = 'X'. "error in addr independent commn data
          EXIT.
        ENDLOOP.

        IF sy-subrc IS INITIAL.
*            CALL FUNCTION 'BUP_MEM_BUT000_DELETE_SINGLE'
*              EXPORTING
*                iv_partner = ls_but000-partner.
          IF lv_addrind_err IS INITIAL.
            CALL FUNCTION 'ADDR_SINGLE_RESET'
              EXPORTING
                address_handle   = lv_com_handle
              EXCEPTIONS
                number_not_found = 1
                handle_not_found = 2
                parameter_error  = 3
                internal_error   = 4
                OTHERS           = 5.
          ENDIF.
          IF sy-subrc <> 0.
            PERFORM exception_message_store TABLES et_return.
          ENDIF.
          EXIT.
        ELSE.
* Register the function module for the initialisation of the global variables
* and tables with the call of FM BAPI_TRANSACTION_ROLLBACK and BAPI_TRANSACTION_COMMIT.
          CALL FUNCTION 'BUFFER_SUBSCRIBE_FOR_REFRESH'
            EXPORTING
              name_of_deletefunc = 'BUP_MEMORY_ADDRESS_INIT'.

          PERFORM get_com_number TABLES et_return
                                 USING lv_com_handle
                                 CHANGING ls_but000.

          LOOP AT et_return WHERE type = gc_msgty_error
                            OR    type = gc_msgty_abort.
            EXIT.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            EXIT.
          ENDIF.
          lv_ind_com_change = gc_x.
        ENDIF.
      ENDIF.                              "Komm.-daten schon in Puffer/Datenbank
    ENDIF.
   ENDIF.                               "Komm.-daten an Schnittstelle
  ELSE.                                  "lv_check_only_external_data

      IF NOT ls_but000-addrcomm IS INITIAL.
                  PERFORM change_addr_indi_com  TABLES
                                           et_return
                                           it_adtel_addr_ind
                                           it_adfax_addr_ind
                                           it_adttx_addr_ind
                                           it_adtlx_addr_ind
                                           it_adsmtp_addr_ind
                                           it_adrml_addr_ind
                                           it_adx400_addr_ind
                                           it_adrfc_addr_ind
                                           it_adprt_addr_ind
                                           it_adssf_addr_ind
                                           it_aduri_addr_ind
                                           it_adpag_addr_ind
                                           it_adcomrem_addr_ind
                                           it_adcomuse_addr_ind
                                           it_adtel_addr_ind_x
                                           it_adfax_addr_ind_x
                                           it_adttx_addr_ind_x
                                           it_adtlx_addr_ind_x
                                           it_adsmtp_addr_ind_x
                                           it_adrml_addr_ind_x
                                           it_adx400_addr_ind_x
                                           it_adrfc_addr_ind_x
                                           it_adprt_addr_ind_x
                                           it_adssf_addr_ind_x
                                           it_aduri_addr_ind_x
                                           it_adpag_addr_ind_x
                                           it_adcomrem_addr_ind_x
                                           it_adcomuse_addr_ind_x
                                   USING   iv_partner
                                           ls_but000-addrcomm
                                           iv_x_save
                                           is_data-comm_type
                                           is_data_x-comm_type
                                           IV_CHECK_ADDRESS.


          LOOP AT et_return WHERE type = gc_msgty_error
                            OR    type = gc_msgty_abort.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            EXIT.
          ENDIF.

          CALL FUNCTION 'ADDR_SINGLE_RESET'
           EXPORTING
             ADDRESS_NUMBER            = ls_but000-addrcomm
             IV_UNDO_CHANGES           = 'X'
           EXCEPTIONS
             NUMBER_NOT_FOUND          = 1
             HANDLE_NOT_FOUND          = 2
             PARAMETER_ERROR           = 3
             INTERNAL_ERROR            = 4
             UNSAVED_DATA_EXISTS       = 5
             OTHERS                    = 6
                    .

          IF sy-subrc <> 0.
            PERFORM exception_message_store TABLES et_return.
          ENDIF.
       ELSE.
              PERFORM create_addr_indi_com
                    TABLES
                      et_return
                      it_adtel_addr_ind
                      it_adfax_addr_ind
                      it_adttx_addr_ind
                      it_adtlx_addr_ind
                      it_adsmtp_addr_ind
                      it_adrml_addr_ind
                      it_adx400_addr_ind
                      it_adrfc_addr_ind
                      it_adprt_addr_ind
                      it_adssf_addr_ind
                      it_aduri_addr_ind
                      it_adpag_addr_ind
                      it_adcomrem_addr_ind
                      it_adcomuse_addr_ind
                    USING
                       iv_x_save
                       space
                       IV_CHECK_ADDRESS
                    CHANGING
                       lv_com_handle
                       is_data-comm_type.


       LOOP AT et_return WHERE type = gc_msgty_error
                            OR    type = gc_msgty_abort.
          ENDLOOP.
          IF sy-subrc IS INITIAL.
            EXIT.
          ENDIF.

          CALL FUNCTION 'ADDR_SINGLE_RESET'
              EXPORTING
                address_handle   = lv_com_handle
              EXCEPTIONS
                number_not_found = 1
                handle_not_found = 2
                parameter_error  = 3
                internal_error   = 4
                OTHERS           = 5.

          IF sy-subrc <> 0.
            PERFORM exception_message_store TABLES et_return.
          ENDIF.
    ENDIF.

  ENDIF.
* duplicate check
* Only if sombody is looking for duplicates, then search for it
  IF et_addr_duplicates IS REQUESTED.
    IF  NOT lv_address_change IS INITIAL.
      PERFORM but020_get
              TABLES
                 lt_but020_mem
                 et_return
              USING
                  ls_but000.

      LOOP AT et_return WHERE type = gc_msgty_error
                        OR    type = gc_msgty_abort.
        EXIT.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        EXIT.
      ENDIF.
* There are no addresses
      IF lt_but020_mem[] IS INITIAL.
        IF ls_but000-type = gc_type_person.
          IF is_data_x-searchterm1      = gc_x OR
             is_data_x-searchterm2      = gc_x OR
             is_data_person_x-firstname = gc_x OR
             is_data_person_x-lastname  = gc_x.
            IF sv_corr_1191_status IS INITIAL.
              lv_found = space.
* By default, the correction is inactive
* It is active only if TSADCORR exists and the entry fits
              lv_corr_1191_status = 'NO'.

              PERFORM read_correction_status(saplsadr) IF FOUND
                USING 'NOTE_805563'
                CHANGING lv_corr_1191_status
                         lv_found.
              IF lv_found = 'X' AND lv_corr_1191_status = 'YES'.
                sv_corr_1191_status = 'YES'.
              ELSE.
                sv_corr_1191_status = 'NO'.
              ENDIF.
            ENDIF.
            IF sv_corr_1191_status = 'YES' AND
              iv_duplicate_message_type <> '-'.
              ls_searchfields-sort1      = ls_data-searchterm1.
              ls_searchfields-sort2      = ls_data-searchterm2.
              ls_searchfields-name_first = ls_data_person-firstname.
              ls_searchfields-name_last  = ls_data_person-lastname.
              ls_searchfields-birthdate  = ls_data_person-birthdate.

              PERFORM check_duplicates TABLES et_return
                                              et_addr_duplicates
                                       USING  ls_searchfields
                                              iv_partner
                                              iv_duplicate_message_type
                                              gc_action_update
                                              ls_but000-type
                                              space
                                              ls_but000-persnumber.

              LOOP AT et_return WHERE type = gc_msgty_error
                                OR    type = gc_msgty_abort.
              ENDLOOP.
              IF sy-subrc IS INITIAL.
                EXIT.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      ELSE.    " IF lt_but020_mem[] IS INITIAL.
        LOOP AT lt_but020_mem.
          lv_addrnumber = lt_but020_mem-addrnumber.
          EXIT.
        ENDLOOP.
*        Duplicate check must also consider address fields.
*        If calling application has provided an address to be checked,use that.
*        If calling application does not send address, use standard address.

*   Since we already know that the BP has an address, just fetch the std address if not supplied
        IF is_duplicate_check_address IS INITIAL.
          CALL FUNCTION 'BUPA_ADDRESS_GET_DETAIL'
            EXPORTING
              iv_partner = iv_partner
            IMPORTING
              es_address = is_duplicate_check_address.
        ENDIF.
        ls_searchfields-city1      = is_duplicate_check_address-city.
        ls_searchfields-city2      = is_duplicate_check_address-district.
        ls_searchfields-post_code1 = is_duplicate_check_address-postl_cod1.
        ls_searchfields-post_code2 = is_duplicate_check_address-postl_cod2.
        ls_searchfields-post_code3 = is_duplicate_check_address-postl_cod3.
        ls_searchfields-po_box     = is_duplicate_check_address-po_box.
        ls_searchfields-po_box_loc = is_duplicate_check_address-po_box_cit.
        ls_searchfields-house_num1 = is_duplicate_check_address-house_no.
        ls_searchfields-house_num2 = is_duplicate_check_address-house_no2.
        ls_searchfields-street     = is_duplicate_check_address-street.
        ls_searchfields-country    = is_duplicate_check_address-country.
        ls_searchfields-str_suppl1 = is_duplicate_check_address-str_suppl1.
        ls_searchfields-str_suppl2 = is_duplicate_check_address-str_suppl2.
        ls_searchfields-str_suppl3 = is_duplicate_check_address-str_suppl3.
        ls_searchfields-region     = is_duplicate_check_address-region.
        ls_searchfields-location   = is_duplicate_check_address-location.
        ls_searchfields-building   = is_duplicate_check_address-building.
        ls_searchfields-floor      = is_duplicate_check_address-floor.
        ls_searchfields-roomnumber = is_duplicate_check_address-room_no.
        ls_searchfields-county     = is_duplicate_check_address-county.
        ls_searchfields-township   = is_duplicate_check_address-township.

* addresses exist
        IF is_data_organ_x-name1      = gc_x OR
           is_data_organ_x-name2      = gc_x OR
           is_data_organ_x-name3      = gc_x OR
           is_data_organ_x-name4      = gc_x OR
           is_data_person_x-firstname = gc_x OR
           is_data_person_x-lastname  = gc_x OR
           is_data_group_x-namegroup1 = gc_x OR
           is_data_group_x-namegroup2 = gc_x OR
           is_data_x-searchterm1      = gc_x OR
           is_data_x-searchterm1      = gc_x.
          IF  iv_duplicate_message_type <> '-'.
            ls_searchfields-sort1      = ls_data-searchterm1.
            ls_searchfields-sort2      = ls_data-searchterm2.
            CASE ls_but000-type.
              WHEN gc_type_person.
                ls_searchfields-name_first = ls_data_person-firstname.
                ls_searchfields-name_last  = ls_data_person-lastname.
                ls_searchfields-birthdate  = ls_data_person-birthdate.
              WHEN gc_type_organ.
                ls_searchfields-name1      = is_data_organ-name1.
                ls_searchfields-name2      = is_data_organ-name2.
                ls_searchfields-name3      = is_data_organ-name3.
                ls_searchfields-name4      = is_data_organ-name4.
              WHEN gc_type_group.
                ls_searchfields-name1      = is_data_group-namegroup1.
                ls_searchfields-name2      = is_data_group-namegroup2.
            ENDCASE.
            PERFORM check_duplicates TABLES et_return
                                            et_addr_duplicates
                                     USING  ls_searchfields
                                            iv_partner
                                            iv_duplicate_message_type
                                            gc_action_update
                                            ls_but000-type
                                            lv_addrnumber
                                            ls_but000-persnumber.

            LOOP AT et_return WHERE type = gc_msgty_error
                              OR    type = gc_msgty_abort.
            ENDLOOP.
            IF sy-subrc IS INITIAL.
              EXIT.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.         " IF  NOT lv_address_change IS INITIAL.
  ENDIF.           " t_addr_duplicates IS REQUESTED.

***Call to new BAdI
  TRY.
      GET BADI gv_exit_class_general_exp.
    CATCH cx_badi_not_implemented INTO lc_ref.
  ENDTRY.

  CLEAR:   lt_return_badi.
  REFRESH: lt_return_badi.

  IF NOT gv_exit_class_general_exp IS INITIAL.
    CALL BADI gv_exit_class_general_exp->general_data_export
      EXPORTING
        iv_check_mode = lv_check_only_external_data
        is_but000     = ls_but000
      CHANGING
        ct_return     = lt_return_badi.
    APPEND LINES OF lt_return_badi TO et_return.
    LOOP AT et_return WHERE type = gc_msgty_abort
                      OR    type = gc_msgty_error.
      EXIT.
    ENDLOOP.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.
  ENDIF.

* If the foreign data are checked, then nothing must be written in the
* BAPI-memory
  IF lv_check_only_external_data IS INITIAL.

*------ BP-Memory is filled -----------------------------------------------
    CALL FUNCTION lc_fm_bup_memory_but000_fill
      EXPORTING
        is_but000              = ls_but000
        is_but000_old          = ls_but000_old
        iv_change_ind_com_data = lv_ind_com_change
      EXCEPTIONS
        parameter_error        = 1
        OTHERS                 = 2.
    IF sy-subrc <> 0.
      PERFORM exception_message_store TABLES et_return.
    ENDIF.

*------ change the addressd ata  if it is necessary ----------------------------------
    IF  NOT lv_address_change IS INITIAL
    AND NOT iv_change_bas     IS INITIAL.

*------ get the address number, if they are used
      IF lt_but020_mem[] IS INITIAL.

        PERFORM but020_get
                TABLES
                   lt_but020_mem
                   et_return
                USING
                    ls_but000.

        LOOP AT et_return WHERE type = gc_msgty_error
                          OR    type = gc_msgty_abort.
          EXIT.
        ENDLOOP.
        IF sy-subrc IS INITIAL.
          EXIT.
        ENDIF.
      ENDIF.
*------ change the address data ---------------------------------------------
      PERFORM zav_memory_comp
              TABLES
                   lt_but020_mem
                   et_return
              USING
                   ls_but000.

      LOOP AT et_return WHERE type = gc_msgty_error
                        OR    type = gc_msgty_abort.
        EXIT.
      ENDLOOP.
      IF sy-subrc IS INITIAL.
        EXIT.
      ENDIF.

    ENDIF.
*------ write the change-info (User/time of the last change)----------------------------
    CALL FUNCTION 'BUPA_SET_CHANGE_INFO'
      EXPORTING
        iv_partner    = ls_but000-partner
        iv_valid_date = iv_valid_date
      TABLES
        et_return     = et_return.

    LOOP AT et_return WHERE type = gc_msgty_error
                    OR    type = gc_msgty_abort.
      EXIT.
    ENDLOOP.
    IF sy-subrc IS INITIAL.
      EXIT.
    ENDIF.
  ENDIF.

*** This is just for updating 0BP_DEF_ADDRESS_ATTR when changes are made to
*** central data which is also a part of address like title, name etc.
IF NOT lv_address_change IS INITIAL AND
lv_indi_com_upd IS INITIAL.
CALL FUNCTION 'BUP_CENTRAL_CHECK'
exporting
lv_partner = iv_partner.
ENDIF.

  IF NOT iv_x_save IS INITIAL AND
         lv_check_only_external_data IS INITIAL.
*------ create BAdI for the general part -------------------------
    PERFORM general_badi_call ON COMMIT.

*----- BADI for te addressindependent comuniaktion data, if it is necessary --------------
    IF NOT lv_indi_com_upd IS INITIAL OR
      NOT lv_address_change IS INITIAL.
      PERFORM address_badi_call ON COMMIT.
    ENDIF.

*------ save the data ------------------------------------------------
    PERFORM data_save ON COMMIT.
*----- save the address independent communiaction data, if it is necessary
    IF NOT lv_indi_com_upd IS INITIAL.
      PERFORM address_data_save ON COMMIT.
    ENDIF.
*------ call the BADI and create the BDOC --------------------------------
    CALL FUNCTION 'BUPA_BADI_CALL'.
  ENDIF.

ENDFUNCTION.
