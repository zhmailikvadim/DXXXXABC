FUNCTION HR_ERC_CHANGE_APPLICATION
  IMPORTING
    VALUE(APPLICATION) LIKE HROBJECT
    VALUE(APPLICATIONDATE) TYPE RCF_APPLICATION_DATE
    VALUE(APPL_STATUS) TYPE RCF_APPLICATION_STATUS OPTIONAL
    VALUE(REASON_CODE) TYPE RCF_REASON_CODE OPTIONAL
    VALUE(SCLAS) TYPE SCLAS OPTIONAL
    VALUE(SOBID) TYPE SOBID OPTIONAL
    VALUE(APPL_SOURCE) TYPE RCF_APPL_SOURCE OPTIONAL
    VALUE(APPL_SOURCE_INFO) TYPE RCF_APPL_SOURCE_INFO OPTIONAL
  TABLES
    RETURN LIKE BAPIRET2 OPTIONAL.




* Author: HGB

  DATA: lo_exception TYPE REF TO cx_hrrcf,
        lo_appl_bl   TYPE REF TO cl_hrrcf_application_bl.

  CLEAR: return,
         return[].

  TRY.
      lo_appl_bl = cl_hrrcf_application_bl=>get_instance( ).

      IF lo_appl_bl IS NOT BOUND.
        IF 1 EQ 2.
          MESSAGE e090(hrrcf0001) WITH 'CL_HRRCF_APPLICATION_BL'.
*         Object &1 cannot be instantiated
        ENDIF.
        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
            message_type   = c_error
            message_class  = c_msgcl_admin
            message_number = '090'
            message_par1   = 'CL_HRRCF_APPLICATION_BL'.
      ENDIF.

      IF appl_status IS SUPPLIED.
        IF reason_code IS SUPPLIED.
          CALL METHOD lo_appl_bl->change_application_info
            EXPORTING
              ps_appl_hrobject   = application
              p_appl_date        = applicationdate
              p_appl_status      = appl_status
              p_reason_code      = reason_code
              p_sclas            = sclas
              p_sobid            = sobid
              p_appl_source      = appl_source
              p_appl_source_info = appl_source_info
            IMPORTING
              pt_return          = return[].
        ELSE.
          CALL METHOD lo_appl_bl->change_application_info
            EXPORTING
              ps_appl_hrobject   = application
              p_appl_date        = applicationdate
              p_appl_status      = appl_status
              p_sclas            = sclas
              p_sobid            = sobid
              p_appl_source      = appl_source
              p_appl_source_info = appl_source_info
            IMPORTING
              pt_return          = return[].
        ENDIF.
      ELSE.
        IF reason_code IS SUPPLIED.
          CALL METHOD lo_appl_bl->change_application_info
            EXPORTING
              ps_appl_hrobject   = application
              p_appl_date        = applicationdate
              p_reason_code      = reason_code
              p_sclas            = sclas
              p_sobid            = sobid
              p_appl_source      = appl_source
              p_appl_source_info = appl_source_info
            IMPORTING
              pt_return          = return[].
        ELSE.
          CALL METHOD lo_appl_bl->change_application_info
            EXPORTING
              ps_appl_hrobject   = application
              p_appl_date        = applicationdate
              p_sclas            = sclas
              p_sobid            = sobid
              p_appl_source      = appl_source
              p_appl_source_info = appl_source_info
            IMPORTING
              pt_return          = return[].
        ENDIF.
      ENDIF.

    CATCH cx_hrrcf INTO lo_exception.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_exception.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = lo_exception->message_type
          cl     = lo_exception->message_class
          number = lo_exception->message_number
          par1   = lo_exception->message_par1
          par2   = lo_exception->message_par2
          par3   = lo_exception->message_par3
          par4   = lo_exception->message_par4
        IMPORTING
          return = return.
      APPEND return TO return.
  ENDTRY.

  DELETE return WHERE type NE c_error AND type NE c_abort.

ENDFUNCTION.
