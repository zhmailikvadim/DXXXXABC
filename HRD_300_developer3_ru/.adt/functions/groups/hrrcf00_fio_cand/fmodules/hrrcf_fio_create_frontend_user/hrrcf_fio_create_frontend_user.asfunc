FUNCTION HRRCF_FIO_CREATE_FRONTEND_USER
  IMPORTING
    IV_USER TYPE XUBNAME
    IV_ALIAS TYPE BAPIALIAS
    IV_FIRSTNAME TYPE BU_NAMEP_F
    IV_LASTNAME TYPE BU_NAMEP_L
    IV_MIDDLENAME TYPE BU_NAMEMID
    IV_EMAIL TYPE AD_SMTPADR
    IV_PASSWORD TYPE BAPIPWD
    IV_CANDIDATE_CLASS TYPE RCF_CANDIDATE_CLASS DEFAULT 'E'
  EXPORTING
    ET_MESSAGES TYPE BAPIRETTAB
  EXCEPTIONS
    REGISTRATION_ERROR
    OTHERS.





  DATA: ls_t77rcf_role TYPE t77rcf_role,
        lv_ref_user    TYPE xubname,
        ls_ref_user    TYPE bapirefus,
        lv_dest        TYPE rfcdest,
        ls_logondata   TYPE bapilogond,
        ls_alias       TYPE bapialias,
        ls_uclass      TYPE bapiuclass,
        ls_password    TYPE bapipwd,
        ls_logondatax  TYPE bapilogonx,
        ls_passwordx   TYPE bapipwdx,
        ls_defaults    TYPE bapidefaul,
        ls_defaultsx   TYPE bapidefax,
        ls_address     TYPE bapiaddr3,
        ls_message     TYPE bapiret2,
        lt_return      TYPE bapirettab,
        ls_refuserx    TYPE bapirefusx,
        ls_aliasx      TYPE bapialiasx,
        ls_addressx    TYPE bapiaddr3x,
        lo_ex_root     TYPE REF TO cx_root,
        lo_exception   TYPE REF TO cx_hrrcf_customizing.

  CONSTANTS:
        lc_int_cand    TYPE rcf_role VALUE '0021',
        lc_ext_cand    TYPE rcf_role VALUE '0022'.

  TRY .

* determine rfc destination to gateway system

      CALL FUNCTION 'HRRCF_FIO_GET_FRONTEND_DEST'
        IMPORTING
          ev_destination = lv_dest.

      IF iv_candidate_class = 'E'.
        TRY.
            CALL METHOD cl_hrrcf_t77rcf_role=>get_role
              EXPORTING
                role        = lc_ext_cand
              IMPORTING
                t77rcf_role = ls_t77rcf_role.

            lv_ref_user = ls_t77rcf_role-refus.

          CATCH cx_hrrcf_customizing INTO lo_exception.
            RAISE registration_error.
        ENDTRY.
      ELSE.
        TRY.
            CALL METHOD cl_hrrcf_t77rcf_role=>get_role
              EXPORTING
                role        = lc_int_cand
              IMPORTING
                t77rcf_role = ls_t77rcf_role.

            lv_ref_user = ls_t77rcf_role-refus.

          CATCH cx_hrrcf_customizing INTO lo_exception.
            RAISE registration_error.
        ENDTRY.
      ENDIF.

      IF lv_ref_user IS INITIAL.
*   error handling: no ref user maintained
      ENDIF.

      ls_ref_user-ref_user = lv_ref_user.

* retrieve defaults for the user
      CALL FUNCTION 'BAPI_USER_GET_DETAIL'
        EXPORTING
          username  = iv_user
        IMPORTING
          logondata = ls_logondata
          defaults  = ls_defaults
          address   = ls_address
          alias     = ls_alias
          uclass    = ls_uclass
        TABLES
          return    = lt_return.

      APPEND LINES OF lt_return TO et_messages.

      IF NOT iv_alias IS INITIAL.
        ls_alias = iv_alias.
      ENDIF.

*     Password
      ls_password-bapipwd = iv_password.
*     address
      ls_address-firstname = iv_firstname.
      ls_address-lastname = iv_lastname.
      ls_address-middlename = iv_middlename.
      ls_address-e_mail = iv_email.

* check existence of user in gate way system
      CLEAR ls_message.
      CALL FUNCTION 'BAPI_USER_EXISTENCE_CHECK'
        DESTINATION lv_dest
        EXPORTING
          username = iv_user
        IMPORTING
          return   = ls_message.

      CASE ls_message-number.
        WHEN 088.
*     update user
          ls_refuserx-ref_user = abap_true.
          ls_aliasx-bapialias = abap_true.

          IF iv_password IS NOT INITIAL.
            ls_passwordx-bapipwd = abap_true.
          ENDIF.
*     logon data
          ls_logondatax-gltgv = abap_true.
          ls_logondatax-gltgb = abap_true.
          ls_logondatax-ustyp = abap_true.
          ls_logondatax-class = abap_true.
          ls_logondatax-accnt = abap_true.
          ls_logondatax-tzone = abap_true.
          ls_logondatax-ltime = abap_true.
          ls_logondatax-bcode = abap_true.
          ls_logondatax-codvn = abap_true.
          ls_logondatax-passcode = abap_true.
          ls_logondatax-codvc = abap_true.
          ls_logondatax-pwdsaltedhash   = abap_true.
          ls_logondatax-codvs           = abap_true.
          ls_logondatax-security_policy = abap_true.

*     address
          ls_addressx-firstname = abap_true.
          ls_addressx-lastname = abap_true.
          ls_addressx-middlename = abap_true.
          ls_addressx-e_mail = abap_true.

*     default values
          ls_defaultsx-datfm = abap_true.
          ls_defaultsx-dcpfm = abap_true.
          ls_defaultsx-langu = abap_true.

          CALL FUNCTION 'BAPI_USER_CHANGE'
            DESTINATION lv_dest
            EXPORTING
              username              = iv_user
              logondata             = ls_logondata
              logondatax            = ls_logondatax
              defaults              = ls_defaults
              defaultsx             = ls_defaultsx
              address               = ls_address
              addressx              = ls_addressx
              password              = ls_password
              passwordx             = ls_passwordx
              ref_user              = ls_ref_user
              ref_userx             = ls_refuserx
              alias                 = ls_alias
              aliasx                = ls_aliasx
            TABLES
              return                = lt_return
            EXCEPTIONS
              system_failure        = 1
              communication_failure = 2.

          IF sy-subrc NE 0.
*   problem with rfc connection
            CASE sy-subrc.
              WHEN 1.
                RAISE others.
              WHEN 2.
                RAISE others.
            ENDCASE.
          ENDIF.

          APPEND LINES OF lt_return TO et_messages.

        WHEN 124.
* create user

          CALL FUNCTION 'BAPI_USER_CREATE1'
            DESTINATION lv_dest
            EXPORTING
              username              = iv_user
              logondata             = ls_logondata
              password              = ls_password
              address               = ls_address
              alias                 = ls_alias
              ref_user              = ls_ref_user
              self_register         = 'X'
            TABLES
              return                = lt_return
            EXCEPTIONS
              system_failure        = 1
              communication_failure = 2.

          IF sy-subrc NE 0.
*   problem with rfc connection
            CASE sy-subrc.
              WHEN 1.
                RAISE others.
              WHEN 2.
                RAISE others.
            ENDCASE.
          ENDIF.
          APPEND LINES OF lt_return TO et_messages.

        WHEN OTHERS.
*     unexpected situation: raise dump
          RAISE registration_error.
      ENDCASE.

    CATCH cx_root INTO lo_ex_root.

*     write exception to slg1
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex_root ).

*--   Convert exception into BAPI return parameter
      IF 1 = 0.
        MESSAGE a802(hrrcf0002) WITH 'HRRCF_FIO_CREATE_FRONTEND_USER'.
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'A'
          cl     = 'HRRCF0002'
          number = '802'
          par1   = 'HRRCF_FIO_CREATE_FRONTEND_USER'
        IMPORTING
          return = ls_message.
      APPEND ls_message TO et_messages.

  ENDTRY.

ENDFUNCTION.
