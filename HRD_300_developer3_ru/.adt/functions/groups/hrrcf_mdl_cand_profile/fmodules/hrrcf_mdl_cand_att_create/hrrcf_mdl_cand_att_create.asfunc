FUNCTION HRRCF_MDL_CAND_ATT_CREATE
  IMPORTING
    VALUE(RECORD) TYPE RCF_S_MDL_CAND_ATTACHMENT
    VALUE(CAND_HROBJECT) TYPE HROBJECT OPTIONAL
    VALUE(CONTENT) TYPE RCF_ATTACHMENT_CONTENT
    VALUE(FILENAME) TYPE STRING
  EXPORTING
    VALUE(MESSAGES) TYPE BAPIRETTAB
    VALUE(RESULT) TYPE P5134.




  DATA ls_cand_hrobject TYPE hrobject.
  DATA lo_bl TYPE REF TO cl_hrrcf_attachment_bl.
  DATA lo_ex TYPE REF TO cx_root.
  DATA ls_message TYPE bapiret2.

* clear returning parameters
  CLEAR: messages[], result.

  TRY.

*     get candidate hrobject for user, if necessary
      IF NOT cand_hrobject IS SUPPLIED.
        CALL METHOD cl_hrrcf_candidate_admin_bl=>get_candidate
          EXPORTING
            p_user          = sy-uname
          IMPORTING
            p_cand_hrobject = ls_cand_hrobject.
      ELSE.
*     Check whether imported candidate object belongs to user
        IF cl_hrrcf_candidate_admin_bl=>is_cand_of_current_user( is_cand = cand_hrobject ) = abap_true.
          ls_cand_hrobject = cand_hrobject.
        ELSE.
          RAISE EXCEPTION TYPE cx_hrrcf_authority
            EXPORTING
              message_class  = 'HRRCF0002'
              message_number = '300'
              message_type   = 'A'.
        ENDIF.
      ENDIF.

*     get instance of business logic facade
      CALL METHOD cl_hrrcf_attachment_bl=>get_instance
        RECEIVING
          return = lo_bl.

      CHECK lo_bl IS BOUND.

*     set LUW mode
      cl_hrrcf_simple_main_object=>set_luw_mode( ).
      SET UPDATE TASK LOCAL.

*     insert infotype data
      CALL METHOD lo_bl->maintain_attachment
        EXPORTING
          ps_hrobject          = ls_cand_hrobject
          p_operation          = 'I'
          ps_attachment        = record-p5134
          p_attachment_content = content
          p_filename           = filename
          p_subtype            = '0001'
          p_mimetype           = record-content_type
        IMPORTING
          ps_result            = result
          pt_return            = messages.

    CATCH cx_root INTO lo_ex.
*     write exception to slg1
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).

*--   Convert exception into BAPI return parameter
      IF 1 = 0.
        MESSAGE a802(hrrcf0002) WITH 'HRRCF_MDL_CAND_ATT_CREATE'.
      ENDIF.
      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'A'
          cl     = 'HRRCF0002'
          number = '802'
          par1   = 'HRRCF_MDL_CAND_ATT_CREATE'
        IMPORTING
          return = ls_message.
      APPEND ls_message TO messages.
  ENDTRY.

ENDFUNCTION.
