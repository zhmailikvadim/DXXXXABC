*---------------------------------------------------------------------*
*       FORM INSERT1                                                  *
*---------------------------------------------------------------------*
* Einfuegen von Saetzen;aktueller Satz in PPLOG                       *
*---------------------------------------------------------------------*
* <--   INSERT1_SUBRC                                                 *
*---------------------------------------------------------------------*
FORM insert1 USING insert1_subrc LIKE sy-subrc.
  DATA: i1_pplog LIKE pplog.                                 "VWMDELINV
  DATA: save_upd_low_varyf LIKE upd_low_varyf,               "VWMACTREL
        save_upd_high_varyf LIKE upd_high_varyf.             "VWMACTREL
  invert = off.
  turn   = off.
  insert1_subrc = 0.
  CLEAR ppkey.
  ppkey = pplog.
  IF ppkey-infty EQ rela_infty.
    CLEAR x_p1001.
*    x_p1001 = pplog.                                       "ANDUNI
    perform fill_wplog_lengths.                             "ANDUNI
    assign pplog-vdata to <p1001_vdata> casting.            "ANDUNI
    x_p1001(pkeyadmin_len) = pplog(pkeyadmin_len).          "ANDUNI
    x_p1001-hrip1001 = <p1001_vdata>.                       "ANDUNI

    PERFORM turn_relation USING x_p1001-sclas subrc.
    IF subrc EQ 0.
      turn = on.
    ENDIF.
    x_p1001-varyf = x_p1001-sclas.
    IF turn EQ on.
      x_p1001-varyf+2 = x_p1001-sobid.
    ELSE.                                                   "VWMA303406
      x_p1001-varyf+2(8) = x_p1001-sobid(8).                "VWMA303406
    ENDIF.
    ppkey-varyf = x_p1001-varyf.
    pplog-varyf = x_p1001-varyf.
  ENDIF.
  upd_low_varyf  = ppkey-varyf.
  upd_high_varyf = ppkey-varyf.
  IF pppar-langu EQ on.
*    upd_low_varyf(1)  = hex00.                             "ANDUNI
*    upd_high_varyf(1) = hexff.                             "ANDUNI
    upd_low_varyf(1)  = CL_HR_MINMAXCHAR_FIELDS=>minfield.  "ANDUNI
    upd_high_varyf(1) = CL_HR_MINMAXCHAR_FIELDS=>maxfield.  "ANDUNI
  ENDIF.
  upd_low_subty  = ppkey-subty.
  upd_high_subty = ppkey-subty.
  IF ppkey-subty NE space.
    PERFORM re777z_ra(mstt777z) USING                      "VWMZB3A
            ppkey-otype ppkey-infty ppkey-subty pplog-vdata(2)
            pppar-timco pppar-addco pppar-sclas subrc.
    IF subrc GT 0.
      insert1_subrc = 99.
      EXIT.
    ENDIF.
  ENDIF.
  IF ppkey-infty EQ rela_infty.
    IF pppar-timco EQ '3' AND turn EQ on.
      PERFORM invert_rela_infty USING pplog.
      invert = on.
      ppkey = pplog.
      orig_addco = pppar-addco.                            "VWMZB3A
      PERFORM re777z_ra(mstt777z) USING                    "VWMZB3A
              ppkey-otype ppkey-infty ppkey-subty pplog-vdata(2)
              pppar-timco pppar-addco pppar-sclas subrc.
      IF subrc GT 0.
        insert1_subrc = 99.
        EXIT.
      ELSE.                                                "VWMZB3A
        IF pppar-timco EQ '3' AND                          "VWMZB3A
           pppar-addco NE orig_addco.                      "VWMZB3A
*         Umkehrung muß auch gleiche Zusatzbedingung haben "VWMZB3A
          insert1_subrc = 99.                              "VWMZB3A
          EXIT.                                            "VWMZB3A
        ENDIF.                                             "VWMZB3A
      ENDIF.
      IF pppar-fcode NE cuti OR pppar-timco NE '3'.
        CLEAR fill_varyf.
        IF pppar-timco EQ '3'                              "VWMZB3A
         AND ( pppar-addco EQ space                        "VWMZB3AD
            OR pppar-addco EQ addco_relatimco3 ).          "VWMZB3AD
*       Zusatzbedingung wird unabhängig vom VARYF geprüft  "VWMZB3A
*       nicht jedoch bei Verknüpfungen mit "echter ZB3"    "VWMZB3AD
*       vgl. entspr. Bem. beim INSERT_INFTY                "VWMZB3AD
          fill_varyf = ppkey-varyf.
        ENDIF.
        PERFORM fuelle_buffer_with_data USING ppkey-plvar
                                              ppkey-otype
                                              ppkey-objid
                                              ppkey-infty
                                              ppkey-subty
                                              ppkey-istat
                                              ppkey-begda
                                              ppkey-endda
                                              fill_varyf
                                              subrc.
        CLEAR fill_varyf.
      ENDIF.
    ENDIF.
*    upd_low_varyf       = hex00.                           "ANDUNI
*    upd_high_varyf      = hexff.                           "ANDUNI
    upd_low_varyf       = CL_HR_MINMAXCHAR_FIELDS=>minfield."ANDUNI
    upd_high_varyf      = CL_HR_MINMAXCHAR_FIELDS=>maxfield."ANDUNI
  ENDIF.
* Saetze im Vorgaengerstatus loeschen
  IF pppar-fcode EQ bean OR pppar-fcode EQ gene OR
     pppar-fcode EQ akti OR pppar-fcode EQ abln OR
     pppar-fcode EQ plvo.              "Bei PLVO nur zum BUFFER-Füllen
    test_first_set = off.  "Kein Test auf Existenz erster Satz
    ppkey-istat = original_istat.
    CLEAR : fill_varyf, fill_begda.
    fill_begda = ppkey-begda.
    CASE pppar-timco.
      WHEN '3'.
        IF ppkey-infty EQ rela_infty.
*         IF TURN EQ ON.                                   "VWMA303406
          IF turn EQ on                                    "VWMZB3A
             AND ( pppar-addco EQ space                    "VWMZB3AD
                OR pppar-addco EQ addco_relatimco3 ).      "VWMZB3AD
*         Zusatzbedingung wird unabhängig vom VARYF geprüft"VWMZB3A
*         nicht für TURN = OFF, da evtl. alternative       "VWMA303406
*         VARYF-Variante auf DB ist                        "VWMA303406
*         nicht jedoch bei Verknüpfungen mit "echter ZB3"  "VWMZB3AD
*         vgl. entspr. Bem. beim INSERT_INFTY              "VWMZB3AD
            fill_varyf = ppkey-varyf.
          ENDIF.                                            "VWMA303406
        ENDIF.
      WHEN '1'.
        fill_begda = fill_begda - 1.
    ENDCASE.
    PERFORM fuelle_buffer_with_data USING ppkey-plvar
                                          ppkey-otype
                                          ppkey-objid
                                          ppkey-infty
                                          ppkey-subty
                                          ppkey-istat
                                          fill_begda
                                          ppkey-endda
                                          fill_varyf
                                          subrc.

*   IF PPKEY-INFTY = RELA_INFTY AND TURN = OFF.             "VWMA303406
    CLEAR subrc.                                            "VWMDELINV
    IF ppkey-infty = rela_infty.                            "VWMDELINV
*     EXIST_SET_FULL zur Ermittlung richtiges VARYF auf DB  "VWMA303406
*     => gleichzeitig Umsetzen PKKEY-VARYF/PPLOG-VARYF      "VWMA303406
      save_upd_low_varyf = upd_low_varyf.                   "VWMACTREL
      save_upd_high_varyf = upd_high_varyf.                 "VWMACTREL
      PERFORM exist_set_full USING subrc.                   "VWMA303406
      upd_low_varyf = save_upd_low_varyf.                   "VWMACTREL
      upd_high_varyf = save_upd_high_varyf.                 "VWMACTREL
      IF subrc = 4.                                         "VWMDELINV
        subrc = 8.                                          "VWMDELINV
        IF pppar-vtask = 'B' AND                            "VWMDELINV
        turn = on.                                          "VWMDELINV
*       Wurde Vorgängersatz schon mit Umkehrung gelöscht?   "VWMDELINV
          i1_pplog = pplog.                                 "VWMDELINV
          i1_pplog-istat = original_istat.                  "VWMDELINV
          PERFORM inv_p1001_already_deleted USING i1_pplog  "VWMDELINV
                                                  subrc.    "VWMDELINV
*         reset the 'right' values for upd_low/high_subty   "note784258
          upd_low_subty  = ppkey-subty.                     "note784258
          upd_high_subty = ppkey-subty.                     "note784258
          IF subrc = 0.                                     "VWMDELINV
            subrc = 3.                                      "VWMDELINV
          ELSE.                                             "VWMDELINV
            subrc = 8.                                      "VWMDELINV
          ENDIF.                                            "VWMDELINV
        ENDIF.                                              "VWMDELINV
      ENDIF.                                                "VWMDELINV
    ENDIF.                                                  "VWMA303406

    IF pppar-fcode NE 'PLVO'.
*     Beim Planvorschlagen wird Vorgänger nicht gelöscht
      IF subrc = 0.                                         "VWMDELINV
        PERFORM delete_set USING subrc.
      ENDIF.                                                "VWMDELINV
      IF subrc = 8.
*       Satz im Vorgängerstatus existiert nicht
*       => kann nicht gelöscht werden
        insert1_subrc = 99.
        EXIT.
      ENDIF.
    ENDIF.
    CLEAR subrc.                                            "VWMDELINV
    test_first_set = on.
    ppkey = pplog.
  ENDIF.
  PERFORM insert_set USING insert1_subrc.
  IF ppkey-infty EQ rela_infty AND turn EQ on.
    PERFORM invert_rela_infty USING pplog.
    ppkey = pplog.
    PERFORM re777z_ra(mstt777z) USING                      "VWMZB3A
            ppkey-otype ppkey-infty ppkey-subty pplog-vdata(2)
            pppar-timco pppar-addco pppar-sclas subrc.
    IF subrc GT 0.
      insert1_subrc = 19.
      EXIT.
    ENDIF.
    IF pppar-timco NE '3'.
      CLEAR fill_varyf.
      PERFORM fuelle_buffer_with_data USING ppkey-plvar
                                            ppkey-otype
                                            ppkey-objid
                                            ppkey-infty
                                            ppkey-subty
                                            ppkey-istat
                                            ppkey-begda
                                            ppkey-endda
                                            fill_varyf
                                            subrc.
      PERFORM insert_set USING subrc.
    ENDIF.
    IF invert EQ off.                  "nur einmal Invertiert
      PERFORM invert_rela_infty USING pplog.
    ENDIF.
  ENDIF.
ENDFORM.

*---------------------------------------------------------------------*
*       FORM CHECK_TIMCO_EXT                                          *
*---------------------------------------------------------------------*
*       Durchfuehren ZB-abhaengige Aktionen vom externen Objekt aus.  *
*       Diese Aktionen werden nur durchgeführt, wenn die Zeitbindung  *
*       zum externen Objekt und vom externen zum internen Objekt 2    *
*       ist. Dabei muß die Richtung extern zu intern explizit in      *
*       T777Z/T777ZR eingetragen sein, nicht voll spezifierte Ein-    *
*       träge (wie z.B. 1001 B* 2) werden nicht berücksichtigt.       *
*                                                                     *
*---------------------------------------------------------------------*
* <--   CTE_SUBRC                                                     *
*---------------------------------------------------------------------*
FORM check_timco_1001_ext USING cte_subrc type HRRHAP-SUBRC.   "ANDUNI

  DATA: cte_p1001 LIKE p1001,
        cte_inv_rsign LIKE p1001-rsign,
        cte_subrc1 LIKE sy-subrc.
  DATA: cte_t77eo       LIKE t77eo,
        cte_invsubty    LIKE wplog-subty,
        cte_subty       LIKE wplog-subty,
        cte_timco       LIKE pppar-timco,
        cte_addco       LIKE pppar-addco,
        cte_sclas_t77zr LIKE wplog-otype.

* hinzuzufuegende Satz steht in PPLOG
* Aktion steht in PPPAR-FCODE (generell INSERT)
* Bei Statuswechseln (AKTI, PLVO, BEAN, GENE, ABLN)
* interessiert nur noch die Aktion im Zielstatus,
* im Vorgaengerstatus sind alle Aktionen bereits erfolgt (DELETE)
*  cte_p1001 = pplog.                                   "ANDUNI
  perform fill_wplog_lengths.                           "ANDUNI
  assign pplog-vdata to <p1001_vdata> casting.          "ANDUNI
  cte_p1001(pkeyadmin_len) = pplog(pkeyadmin_len).      "ANDUNI
  cte_p1001-hrip1001 = <p1001_vdata>.                   "ANDUNI

* Prüfung, dass Satz ueberhaupt bearbeitet werden muss
  CHECK cte_p1001-infty = rela_infty.

* Infotyp 1001, Zielobjekt muss extern ohne Umkehrung sein
  CALL FUNCTION 'RH_GET_EXTERNAL_OBJECT_INFO'
       EXPORTING
            otype              = cte_p1001-sclas
       IMPORTING
            i77eo              = cte_t77eo
       EXCEPTIONS
            no_external_object = 1
            OTHERS             = 2.

  CHECK sy-subrc = 0.
  CHECK cte_t77eo-inrel IS INITIAL.

  cte_subty(1) = cte_p1001-rsign.
  cte_subty+1(3) = cte_p1001-relat.

* Die Zeitbindung vom internen Objekt zum externen Objekt
* muß 2 sein.
  PERFORM re777z_ra(mstt777z) USING cte_p1001-otype
                                    cte_p1001-infty
                                    cte_subty
                                    cte_p1001-sclas
                                    cte_timco
                                    cte_addco
                                    cte_sclas_t77zr
                                    cte_subrc1.

  CHECK cte_subrc1 EQ 0.

* Nur Zeitbindung 2 ist hier relevant.
  CHECK cte_timco = 2.

* falls zielobjekttypabh. Zeitbindung vorliegt und Zielobjekttyp
* nicht passt (d.h. cte_sclas_t77zr ne cte_p1001-SCLAS), ganz raus
  IF NOT cte_sclas_t77zr IS INITIAL AND
     cte_sclas_t77zr NE cte_p1001-sclas.
*   ziel-OT-abh. Zeitbindung und Ziel-OT ist nicht identisch
    EXIT.
  ENDIF.


  CASE cte_p1001-rsign.
  WHEN 'A'.
    cte_invsubty(1) = 'B'.
  WHEN 'B'.
    cte_invsubty(1) = 'A'.
  ENDCASE.
  cte_invsubty+1(3) = cte_p1001-relat.

* Lesen Zeitbindung aus den Tabellen T777Z und T777ZR, wobei nicht
* voll spezifierte Einträge (z.B. 1001 B* 2) nicht beachtet werden.
* Dies ist notwendig, da Zeitbindungsprüfung vom externen Objekt aus
* erst zu 4.6a realisiert ist. Schon vorhandene generische Einträge
* in der Tabelle T777Z werden nicht beachtet, da diese nicht mit der
* Absicht, für externe Objekte zu gelten, angelegt wurden.
  CLEAR cte_sclas_t77zr.
  PERFORM re777z_ra_no_generic(mstt777z)
                              USING cte_p1001-sclas
                                    cte_p1001-infty
                                    cte_invsubty
                                    cte_p1001-otype
                                    cte_timco
                                    cte_addco
                                    cte_sclas_t77zr
                                    cte_subrc1.

* Falls kein genau spezifierter Eintrag gefunden wurde, ist cte_subrc
* ungleich 0.
  CHECK cte_subrc1 EQ 0.

* Nur Zeitbindung 2 ist hier relevant.
  CHECK cte_timco = 2.

* falls zielobjekttypabh. Zeitbindung vorliegt und Zielobjekttyp
* nicht passt (d.h. PPPAR-SCLAS <> PPLOG-OTYPE), ganz raus
  IF NOT cte_sclas_t77zr IS INITIAL AND
     cte_sclas_t77zr NE cte_p1001-otype.
*   ziel-OT-abh. Zeitbindung und Ziel-OT ist nicht identisch
    EXIT.
  ENDIF.

* Fuellen Puffer fuer externes Objekt. Dabei werden alle den
* Selektionsbedingungen entsprechenden Verknüpfungen von internen
* Objekten zu dem externen Objekt in den Buffer geschrieben.
* Externe Verknüpfungen werden nicht berücksichtigt.
  PERFORM fill_buffer_1001_ext USING cte_p1001-plvar
                                     cte_p1001-sclas
                                     cte_p1001-sobid
                                     cte_invsubty(1)
                                     cte_p1001-relat
                                     cte_p1001-istat
                                     cte_p1001-begda
                                     cte_p1001-endda
                                     cte_p1001-otype
                                     cte_subrc1.

* Die zuvor in Buffer gestellten Verknüpfungen werden nun bearbeitet.
* Ausgehend vom hinzuzufügenden Satz werden
*  - überlagerte Sätze gelöscht
*  - umfassende Sätze aufgespalten
*  - nachfolgende Sätze bei Überschneidungen am Begin begrenzt
*  - Vorgängersatz bei Überschneidungen am Ende begrenzt.

* falls cte_subrc1 nicht abgefragt wird muß hier cte_subrc1 hier
* wohl zumindest gecleart werden.
  CLEAR cte_subrc1.
  PERFORM check_tco2_ext USING cte_sclas_t77zr cte_subrc1.
  PERFORM check_tco1_ext USING cte_sclas_t77zr cte_subrc1.
  IF cte_subrc = 0.
    ADD cte_subrc1 TO cte_subrc.
  ENDIF.
ENDFORM.
