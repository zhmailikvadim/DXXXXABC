report  rcf_periodical_services                 .

constants false type boole_d value if_hrrcf_constants=>false .
constants true  type boole_d value if_hrrcf_constants=>true .

data ls_service      type t77rcf_ps_seract.
data lt_active_serv  type t77rcf_ps_seract_tab.
data ls_service_info type t77rcf_ps_serv.

data lo_ex           type ref to cx_root.
data lo_service      type ref to if_hrrcf_periodical_service.
data lo_object       type ref to object.

data lv_ps_active    type boole_d.
data lv_rsp_active   type boole_d.
data lv_ja_active    type boole_d.

data lv_is_ok        type boole_d.

* check if another search service (periodical service or update of search
* profiles) is still running; if this is the case then exit program
call function 'HR_RCF_CHECK_SEARCH_JOB_STATUS'
  importing
    ev_is_ok                    = lv_is_ok
    ev_period_service_is_active = lv_ps_active
    ev_recrate_sp_job_is_active = lv_rsp_active
    EV_JOB_AGENT_IS_ACTIVE      = lv_ja_active.

if lv_is_ok = false.
*-- FM HR_RCF_CHECK_SEARCH_JOB_STATUS write errors in SLG1.
  return.
endif.

if ( lv_ps_active <> false )  or
   ( lv_rsp_active <> false ) or
   ( lv_ja_active  <> false ).
  try.
      if 1 = 0.
        message w218(hrrcf0001).
      endif.
      raise exception type cx_hrrcf
        exporting
          message_type   = 'W'
          message_class  = 'HRRCF0001'
          message_number = '218'.
    catch cx_hrrcf into lo_ex.
      cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).
  endtry.
  return.
endif.

* pick up all active services
call method cl_hrrcf_t77rcf_ps_seract=>read_all_records
  importing
    t77rcf_ps_seract = lt_active_serv.

loop at lt_active_serv into ls_service.

  clear lo_service.

  try.

*     get the assigned service class
      call method cl_hrrcf_t77rcf_ps_serv=>read_record
        exporting
          service            = ls_service-service
        importing
          t77rcf_ps_serv_rec = ls_service_info.

      check ls_service_info-classname is not initial.

*     get an object of the service class and cast it to the interface
      create object lo_object
        type
          (ls_service_info-classname).
      lo_service ?= lo_object.

    catch cx_root into lo_ex.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_ex.
  endtry.

  check lo_service is not initial.
* run the service
  call method lo_service->run
    exporting
      service = ls_service_info-service.

endloop.
