*&---------------------------------------------------------------------*
*& Report  RCF_CREATE_USER                                             *
*&                                                                     *
*&---------------------------------------------------------------------*
*&                                                                     *
*&                                                                     *
*&---------------------------------------------------------------------*

REPORT  zrcf_create_user .

CONSTANTS:
  true  TYPE boole_d VALUE 'X'   ,
  false TYPE boole_d VALUE space .

TABLES:
  t77rcf_role.

PARAMETERS:
  p_first  LIKE bapibus1006_central_person-firstname   OBLIGATORY ,
  p_last   LIKE bapibus1006_central_person-lastname    OBLIGATORY ,
  p_user   TYPE syuname                                OBLIGATORY ,
  p_pernr  TYPE pernr_d                                OBLIGATORY ,
  p_plans  TYPE plans                                  OBLIGATORY ,
  p_email  TYPE ad_smtpadr                             OBLIGATORY .

*
* xdp deactivate roles
* begin
*
*select-options:
*  p_role   for  t77rcf_role-role.
*
* xdp deactivate roles
* end
*

DATA:
  lt_77rcf_role TYPE TABLE OF t77rcf_role,
  ls_77rcf_role TYPE          t77rcf_role,
  p_is_mgr      TYPE          boole_d VALUE false,
  p_is_ass      TYPE          boole_d VALUE false,
  p_is_tc       TYPE          boole_d VALUE false.

DATA:
  ls_plogi TYPE hrplogi,
  ls_pnnnn TYPE hrobjsdata,
  lt_pnnnn TYPE hrobjsdata_tab,
  ls_e1p0000             TYPE e1p0000,
  ls_e1p0001             TYPE e1p0001,
  ls_e1p0002             TYPE e1p0002,
  ls_e1p0105             TYPE e1p0105,
  ls_errors TYPE hrale_err,
  lt_errors TYPE hrale_err_tab,
  ls_return TYPE bapiret2,
  lt_return TYPE TABLE OF bapiret2,
  lo_candidate TYPE REF TO cl_hrrcf_candidate,
  lo_employee  TYPE REF TO cl_hrrcf_employee,
  ls_ref_user     TYPE bapirefus,
  ls_ref_userx    TYPE bapirefusx.

INITIALIZATION.

  DATA l_semid                TYPE objektid.
  DATA l_subrc                TYPE sysubrc.

  PERFORM re77s0 IN PROGRAM
                    mstt77s0
                 USING
                    'PLOGI'
                    'PRELI'
                    l_semid
                    l_subrc.

  IF l_subrc NE 0.
    l_semid = '99999999'.
  ENDIF.

  p_plans = l_semid.

START-OF-SELECTION.

* xdp deactivate roles
* begin
*
*  if not p_role is initial.
*
*    select * from t77rcf_role
*             into table lt_77rcf_role
*             where role in p_role.
*
*    if sy-subrc = 0.
*
*      read table lt_77rcf_role
*           into  ls_77rcf_role
*           with key role = '0002'. "Manager
*      if sy-subrc = 0.
*        delete lt_77rcf_role index sy-tabix.
*        p_is_mgr = true.
*      endif.
*
*      read table lt_77rcf_role
*         into  ls_77rcf_role
*         with key role = '0003'. "TC
*      if sy-subrc = 0.
*        delete lt_77rcf_role index sy-tabix.
*        p_is_tc = true.
*      endif.
*
*      read table lt_77rcf_role
*           into  ls_77rcf_role
*           with key role = '0004'. "Assistant
*      if sy-subrc = 0.
*        delete lt_77rcf_role index sy-tabix.
*        p_is_ass = true.
*      endif.
*
*    endif.
*
*  endif.
*
* xdp deactivate roles
* end
*

*   Check if this user already exists in e-Recruiting
  CALL FUNCTION 'BAPI_USER_EXISTENCE_CHECK'
    EXPORTING
      username = p_user
    IMPORTING
      return   = ls_return.

*  if ls_return-number ne '124'.    "User does exist
*    write:/ 'User existiert bereits'(001).
**   STOP.
*  endif.

  TRY.
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          user      = p_user
        IMPORTING
          candidate = lo_candidate.
    CATCH cx_hrrcf.
* no reaction, existence check only (xdp)
  ENDTRY.
  IF NOT lo_candidate IS INITIAL.
*    WRITE:/ 'Zu dem User existiert bereits ein Kandidat'(002).
*    STOP.
  ENDIF.

  TRY.
      CALL METHOD cl_hrrcf_candidate=>get
        EXPORTING
          employeeid = p_pernr
        IMPORTING
          candidate  = lo_candidate.
    CATCH cx_hrrcf.
* no reaction, existence check only (xdp)
  ENDTRY.
  IF NOT lo_candidate IS INITIAL.
*    WRITE:/
*      'Zu der Mitarbeiternummer existiert bereits ein Kandidat'(003).
*    STOP.
  ENDIF.

  TRY.
      DATA lv_is_email_unique TYPE boole_d.
      CALL METHOD cl_hrrcf_address_service=>is_email_unique
        EXPORTING
          e_mail = p_email
        RECEIVING
          result = lv_is_email_unique.
      .
    CATCH cx_hrrcf_address_service .
* no reaction, existence check only (xdp)
  ENDTRY.
  IF lv_is_email_unique IS INITIAL.
*    WRITE:/
*      'Zu der e-Mailadresse existiert bereits ein Kandidat'(004).
*    STOP.
  ENDIF.


  ls_plogi-otype     =  'P'        .
  ls_plogi-objid     =  p_pernr    .

* -----------------------------------------------------  0000
  ls_e1p0000-pernr      =  p_pernr    .
  ls_e1p0000-begda      =  sy-datum   .
  ls_e1p0000-endda      =  '99991231' .
  ls_e1p0000-stat2      =  '3'        .

  ls_pnnnn-segnam       =  'E1P0000'  .
  ls_pnnnn-sdata        = ls_e1p0000  .

  APPEND ls_pnnnn TO lt_pnnnn.
* -----------------------------------------------------  0000

* -----------------------------------------------------  0001
  IF p_plans CN '0 '.
    ls_e1p0001-pernr      =  p_pernr    .
    ls_e1p0001-begda      =  sy-datum   .
    ls_e1p0001-endda      =  '99991231' .
    ls_e1p0001-plans      =  p_plans    .

    ls_pnnnn-segnam       =  'E1P0001'  .
    ls_pnnnn-sdata        = ls_e1p0001  .

    APPEND ls_pnnnn TO lt_pnnnn.
  ENDIF.
* -----------------------------------------------------  0001

* -----------------------------------------------------  0002
  ls_e1p0002-pernr      =  p_pernr    .
  ls_e1p0002-begda      =  sy-datum   .
  ls_e1p0002-endda      =  '99991231' .
  ls_e1p0002-vorna_40   =  p_first    .
  ls_e1p0002-nachn_40   =  p_last     .

  ls_pnnnn-segnam       =  'E1P0002'  .
  ls_pnnnn-sdata        = ls_e1p0002  .

  APPEND ls_pnnnn TO lt_pnnnn.
* -----------------------------------------------------  0002

* -----------------------------------------------------  0105
* User
  ls_e1p0105-pernr      =  p_pernr    .
  ls_e1p0105-begda      =  sy-datum   .
  ls_e1p0105-endda      =  '99991231' .
  ls_e1p0105-subty      =  '0001'     .
  ls_e1p0105-usrid      =  p_user     .

  ls_pnnnn-segnam       =  'E1P0105'  .
  ls_pnnnn-sdata        = ls_e1p0105  .

  APPEND ls_pnnnn TO lt_pnnnn.
* -----------------------------------------------------  0105

* -----------------------------------------------------  0105
* e-mail address
  IF NOT p_email IS INITIAL.
    ls_e1p0105-pernr      =  p_pernr    .
    ls_e1p0105-begda      =  sy-datum   .
    ls_e1p0105-endda      =  '99991231' .
    ls_e1p0105-subty      =  '0010'     .
    ls_e1p0105-usrid_long =  p_email    .

    ls_pnnnn-segnam       =  'E1P0105'  .
    ls_pnnnn-sdata        = ls_e1p0105  .

    APPEND ls_pnnnn TO lt_pnnnn.
  ENDIF.
* -----------------------------------------------------  0105

  TRY.

      CALL METHOD cl_hrrcf_employee_inbound=>hrrcf_cand_from_ee_ale
        EXPORTING
          ls_plogi = ls_plogi
          lt_pnnnn = lt_pnnnn
          external_commit = space
        IMPORTING
          t_errors = lt_errors.

      IF lt_errors IS INITIAL.

        TRY.
            CALL METHOD cl_hrrcf_employee=>get
              EXPORTING
                user     = p_user
              IMPORTING
                employee = lo_employee.
          CATCH cx_hrrcf.
* no reaction, existence check only (xdp)
        ENDTRY.

        IF NOT lo_employee IS INITIAL.

*
* xdp deactivate roles
* begin
*
*          IF NOT p_is_ass IS INITIAL.
*            CALL METHOD lo_employee->register_as_assistant.
*          ENDIF.
*
*          loop at    lt_77rcf_role
*               into  ls_77rcf_role
*               where refus ne space.
*
*            ls_ref_user-ref_user = ls_77rcf_role-refus.
*            ls_ref_userx-ref_user = 'X' .
*
*            call function 'BAPI_USER_CHANGE'
*              exporting
*                username  = p_user
*                ref_user  = ls_ref_user
*                ref_userx = ls_ref_userx
*              tables
*                return    = lt_return.
*            clear lt_return.
** no reactions on error
*          endloop.
*
*          if not p_is_mgr is initial.
*            call method lo_employee->register_as_manager.
*          endif.
*
*          if not p_is_tc is initial.
*            call method lo_employee->register_as_talent_consultant.
*          endif.
*
*
* xdp deactivate roles
* end
*
*          WRITE:/
*'Der User für die Anwendung e-Recruiting wurde erfolgreich angel' &
*'egt.'(010)
*          .
*          SKIP.
*          WRITE:/ 'Username:'(020), lo_employee->user.
*          WRITE:/ 'Mitarbeiternummer:'(021), lo_employee->employeeid.
*          WRITE:/ 'KandidatenID:'(022), lo_employee->candidate->id.
*          SKIP.
*          WRITE:/
*'Bitte ordnen Sie dem User noch entsprechende Berechtigungen zu.'(011).
*          WRITE:/
*          'Bitte ändern Sie gegebenenfalls noch das Passwort.'(012).
        ENDIF.

      ELSE.

        LOOP AT lt_errors INTO ls_errors.

          CALL FUNCTION 'BALW_BAPIRETURN_GET2'
            EXPORTING
              type   = ls_errors-msgty
              cl     = ls_errors-msgid
              number = ls_errors-msgno
              par1   = ls_errors-msgv1
              par2   = ls_errors-msgv2
              par3   = ls_errors-msgv3
              par4   = ls_errors-msgv4
            IMPORTING
              return = ls_return.
          WRITE:/ ls_return-message.

        ENDLOOP.

        STOP.

      ENDIF.

    CATCH cx_hrrcf .
  ENDTRY.