*=====================================================================*
* Intf.: ig_componentcontroller  
* Purp.: programming interface for access of this controller within
*        other controllers of the same component
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <erc_c_cand_overview_ui>
* UDate: 20240715 110015
*=====================================================================*
interface ig_componentcontroller.
 
  interfaces: iwci_if_fpm_oif_conf_exit .
  interfaces: iwci_if_fpm_transaction .
  interfaces: iwci_if_fpm_ui_building_block .
  interfaces: iwci_if_fpm_work_protection .
  interfaces: iwci_erc_c_cand_overview_ui .
  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_rcf_communication type string value `RCF_COMMUNICATION`.
  types:
    begin of Element_rcf_communication,
      CHANNEL  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL,
      CHANNEL_DESCRIPTION  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL_DESCRIPTION,
      STREET  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET,
      STREET2  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET2,
      COUNTRY  type RCF_S_CAND_COMMN_ADDRESS_PL-COUNTRY,
      REGION  type RCF_S_CAND_COMMN_ADDRESS_PL-REGION,
      CITY  type RCF_S_CAND_COMMN_ADDRESS_PL-CITY,
      POSTCODE  type RCF_S_CAND_COMMN_ADDRESS_PL-POSTCODE,
      COUNTRY_TXT  type RCF_VH_VALUE_PL,
      POSTCODE_REQUIRED  type WDUI_STATE,
    end of Element_rcf_communication,  "#EC NEEDED
    Elements_rcf_communication type 
       standard table of Element_rcf_communication
       with default key. "#EC NEEDED
  constants:
    wdctx_region_attributes type string value `REGION_ATTRIBUTES`.
  types:
    begin of Element_region_attributes,
      REGION_ENABLE  type WDY_BOOLEAN,
    end of Element_region_attributes,  "#EC NEEDED
    Elements_region_attributes type 
       standard table of Element_region_attributes
       with default key. "#EC NEEDED
  constants:
    wdctx_region_values type string value `REGION_VALUES`.
  types:
    begin of Element_region_values,
      REGION  type REGIO,
      REGION_TXT  type STRING,
    end of Element_region_values,  "#EC NEEDED
    Elements_region_values type 
       standard table of Element_region_values
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_contact_no type string value `RCF_CONTACT_NO`.
  types:
    Element_rcf_contact_no type RCF_S_CAND_COMMN_TELE_PL,
    Elements_rcf_contact_no type 
       standard table of Element_rcf_contact_no
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_des_work_loc type string value `RCF_DES_WORK_LOC`.
  types:
    begin of Element_rcf_des_work_loc,
      COUNTRY  type RCF_S_CAND_LOCATION_PL-COUNTRY,
      CITY  type RCF_S_CAND_LOCATION_PL-CITY,
      COUNTRY_TXT  type RCF_S_CAND_LOCATION_PL-COUNTRY_TXT,
      OLD_COUNTRY  type LAND1,
      REGION  type REGIO,
      OPERATION  type CHAR1,
      MANDT  type MANDT,
      PLVAR  type PLVAR,
      OTYPE  type OTYPE,
      OBJID  type OBJEKTID,
      INFTY  type INFOTYP,
      SUBTY  type SUBTYP,
      ISTAT  type ISTAT_D,
      PRIOX  type PRIOX,
      BEGDA  type BEGDATUM,
      ENDDA  type ENDDATUM,
      VARYF  type VARYF,
      SEQNR  type SEQNR,
      AEDTM  type AEDTM,
      UNAME  type USRNAME,
      REASN  type REASN,
      HISTO  type HISTO,
      ITXNR  type ITXNR,
      BRANCH  type RCF_DESIRED_BRANCH,
      WORK_PERMIT  type RCF_WORK_PERMIT,
      DESCRIPTION  type RCF_DESIRED_LOC_DESC,
      BRANCH_TXT  type RCF_BRANCH_NAME,
      WORK_PERMIT_TXT  type DDTEXT,
      DESCRIPTION_TXT  type RCF_ITF_DESCRIPTION,
      DOC_LANGU  type SPRAS,
    end of Element_rcf_des_work_loc,  "#EC NEEDED
    Elements_rcf_des_work_loc type 
       standard table of Element_rcf_des_work_loc
       with default key. "#EC NEEDED
  constants:
    wdctx_cities type string value `CITIES`.
  types:
    begin of Element_cities,
      CITY_NAME  type STRING,
      CITY_KEY  type AD_CITY1,
    end of Element_cities,  "#EC NEEDED
    Elements_cities type 
       standard table of Element_cities
       with default key. "#EC NEEDED
  constants:
    wdctx_enable type string value `ENABLE`.
  types:
    begin of Element_enable,
      REGION_ENABLE  type WDY_BOOLEAN,
      CITY_ENABLE  type WDY_BOOLEAN,
    end of Element_enable,  "#EC NEEDED
    Elements_enable type 
       standard table of Element_enable
       with default key. "#EC NEEDED
  constants:
    wdctx_regions type string value `REGIONS`.
  types:
    Element_regions type RCF_S_CAND_LOCATION_PL,
    Elements_regions type 
       standard table of Element_regions
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_display_commn type string value `RCF_DISPLAY_COMMN`.
  types:
    begin of Element_rcf_display_commn,
      FORMOFADDRESS_TXT  type TEXT10,
      SEX_TXT  type TEXT10,
      TITLE_SPPL_TXT  type TEXT40,
      TITLE_TXT  type TEXT40,
      TITLE_ACA2_TXT  type TEXT40,
      PREFIX_TXT  type TEXT40,
    end of Element_rcf_display_commn,  "#EC NEEDED
    Elements_rcf_display_commn type 
       standard table of Element_rcf_display_commn
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_email_visible type string value `RCF_EMAIL_VISIBLE`.
  types:
    begin of Element_rcf_email_visible,
      EMAIL_VISIBILITY  type WDUI_VISIBILITY,
      OLD_EMAIL_VISIBILITY  type WDUI_VISIBILITY,
    end of Element_rcf_email_visible,  "#EC NEEDED
    Elements_rcf_email_visible type 
       standard table of Element_rcf_email_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_empl_pref type string value `RCF_EMPL_PREF`.
  constants:
    wdctx_rcf_functional_area type string value `RCF_FUNCTIONAL_AREA`.
  types:
    begin of Element_rcf_functional_area,
      FUNCTIONAL_AREA  type RCF_S_CAND_DESIRED_JOB_PL-FUNCTIONAL_AREA,
      FUNCTIONAL_AREA_TXT  type RCF_S_CAND_DESIRED_JOB_PL-FUNCTIONAL_AREA_TXT,
    end of Element_rcf_functional_area,  "#EC NEEDED
    Elements_rcf_functional_area type 
       standard table of Element_rcf_functional_area
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_hierarchy_level type string value `RCF_HIERARCHY_LEVEL`.
  types:
    begin of Element_rcf_hierarchy_level,
      HIERARCHY_LEVEL  type RCF_S_CAND_DESIRED_JOB_PL-HIERARCHY_LEVEL,
      HIERARCHY_LEVEL_TXT  type RCF_S_CAND_DESIRED_JOB_PL-HIERARCHY_LEVEL_TXT,
    end of Element_rcf_hierarchy_level,  "#EC NEEDED
    Elements_rcf_hierarchy_level type 
       standard table of Element_rcf_hierarchy_level
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_industry type string value `RCF_INDUSTRY`.
  types:
    begin of Element_rcf_industry,
      INDUSTRY  type RCF_S_CAND_DESIRED_JOB_PL-INDUSTRY,
      INDUSTRY_TXT  type RCF_S_CAND_DESIRED_JOB_PL-INDUSTRY_TXT,
    end of Element_rcf_industry,  "#EC NEEDED
    Elements_rcf_industry type 
       standard table of Element_rcf_industry
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_intrest_grp type string value `RCF_INTREST_GRP`.
  types:
    Element_rcf_intrest_grp type RCF_S_TARGET_GROUP_LIST,
    Elements_rcf_intrest_grp type 
       standard table of Element_rcf_intrest_grp
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_ireferences type string value `RCF_IREFERENCES`.
  types:
    begin of Element_rcf_ireferences,
      URL_CATEGORY  type RCF_S_CAND_INTERNET_REF_PL-URL_CATEGORY,
      INTERNET_REF_URL  type RCF_S_CAND_INTERNET_REF_PL-INTERNET_REF_URL,
      DESCRIPTION  type RCF_S_CAND_INTERNET_REF_PL-DESCRIPTION,
      URL_CATEGORY_TXT  type RCF_S_CAND_INTERNET_REF_PL-URL_CATEGORY_TXT,
      DESCRIPTION_TXT  type RCF_S_CAND_INTERNET_REF_PL-DESCRIPTION_TXT,
      INTERNET_REF_URL_TXT  type RCF_S_CAND_INTERNET_REF_PL-INTERNET_REF_URL_TXT,
      DOC_LANGU  type RCF_S_CAND_INTERNET_REF_PL-DOC_LANGU,
      TEST_LINK_VISIBLE  type WDUI_VISIBILITY,
    end of Element_rcf_ireferences,  "#EC NEEDED
    Elements_rcf_ireferences type 
       standard table of Element_rcf_ireferences
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail type string value `RCF_MAIL`.
  types:
    begin of Element_rcf_mail,
      E_MAIL  type AD_SMTPADR,
    end of Element_rcf_mail,  "#EC NEEDED
    Elements_rcf_mail type 
       standard table of Element_rcf_mail
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_bus_pvt type string value `RCF_MAIL_BUS_PVT`.
  types:
    begin of Element_rcf_mail_bus_pvt,
      BUS_EMAIL  type AD_SMTPADR,
      PVT_EMAIL  type AD_SMTPADR,
      EMAIL_DROP_DOWN  type STRING,
    end of Element_rcf_mail_bus_pvt,  "#EC NEEDED
    Elements_rcf_mail_bus_pvt type 
       standard table of Element_rcf_mail_bus_pvt
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_personel_data type string value `RCF_PERSONEL_DATA`.
  types:
    Element_rcf_personel_data type RCF_S_CAND_PERSONAL_DATA_PL,
    Elements_rcf_personel_data type 
       standard table of Element_rcf_personel_data
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref type string value `RCF_PREF`.
  types:
    begin of Element_rcf_pref,
      PREF_LANG  type STRING,
    end of Element_rcf_pref,  "#EC NEEDED
    Elements_rcf_pref type 
       standard table of Element_rcf_pref
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_prefernces type string value `RCF_PREFERNCES`.
  types:
    begin of Element_rcf_prefernces,
      CONTRACT_TYPE  type RCF_S_CAND_DESIRED_JOB_PL-CONTRACT_TYPE,
      TRAVELWILLING  type RCF_S_CAND_DESIRED_JOB_PL-TRAVELWILLING,
      WILL_TO_RELOCATE  type RCF_S_CAND_DESIRED_JOB_PL-WILL_TO_RELOCATE,
      CURRENCY  type RCF_S_CAND_DESIRED_JOB_PL-CURRENCY,
      CONTRACT_TXT  type RCF_S_CAND_DESIRED_JOB_PL-CONTRACT_TXT,
      EMPLOYMENT_FRACT_TXT  type RCF_S_CAND_DESIRED_JOB_PL-EMPLOYMENT_FRACT_TXT,
      EMPLOYMENT_FRACT  type RCF_S_CAND_DESIRED_JOB_PL-EMPLOYMENT_FRACT,
      WILL_TO_RELOCATE_TXT  type RCF_S_CAND_DESIRED_JOB_PL-WILL_TO_RELOCATE_TXT,
      SAL_RANGE_TXT  type RCF_S_CAND_DESIRED_JOB_PL-SAL_RANGE_TXT,
      RANGE_ID  type RCF_S_CAND_DESIRED_JOB_PL-RANGE_ID,
      CURRENCY_TXT  type TEXT40,
      DESCRIPTION_TXT  type RCF_S_CAND_DESIRED_JOB_PL-DESCRIPTION_TXT,
    end of Element_rcf_prefernces,  "#EC NEEDED
    Elements_rcf_prefernces type 
       standard table of Element_rcf_prefernces
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref_contact type string value `RCF_PREF_CONTACT`.
  types:
    begin of Element_rcf_pref_contact,
      PRFD_CNT_ADD  type RCF_COMM_CHANNEL,
      PRFD_CNT_ADD_TXT  type RCF_COMM_CHANNEL_TXT,
      PRFD_CNT_TEL  type RCF_COMM_CHANNEL,
      PRFD_CNT_TEL_TXT  type RCF_COMM_CHANNEL_TXT,
    end of Element_rcf_pref_contact,  "#EC NEEDED
    Elements_rcf_pref_contact type 
       standard table of Element_rcf_pref_contact
       with default key. "#EC NEEDED
  constants:
    wdctx_shared_context type string value `SHARED_CONTEXT`.
  types:
    begin of Element_shared_context,
      HROBJECT  type HROBJECT,
      TEMPLATE_HROBJECT  type HROBJECT,
      ACT_GUID  type RCF_ACT_GUID,
      SUBTYPE  type SUBTYP,
      APPLICATION  type CHAR10,
      OPERATION  type RCF_OPERATION_PL,
      IS_DIRTY  type WDY_BOOLEAN,
      SEQUENCE_NR  type INT4,
      REQUI_SUPP_TEAM  type RCF_T_SUPP_TEAM_PL,
      DATA_CHANGED  type WDY_BOOLEAN,
      DISPLAY_MODE  type WDY_BOOLEAN,
      USE_HR_QUALIFICATIONS  type WDY_BOOLEAN,
      SAVE_CREATE_NEXT  type WDY_BOOLEAN,
      NO_OF_UIBB  type INT4,
      IS_APPL_MGMT  type WDY_BOOLEAN,
      EDIT_ALLOWED  type WDY_BOOLEAN,
      IS_INTERNAL_APPLICATION  type WDY_BOOLEAN,
      IS_QUALI_USER_SELECTED  type WDY_BOOLEAN,
      IS_LOCKED  type WDY_BOOLEAN,
      IS_RSM_PARSING  type WDY_BOOLEAN,
      IS_QUAL_FIRST_TIME  type WDY_BOOLEAN,
      SCENARIO  type STRING,
    end of Element_shared_context,  "#EC NEEDED
    Elements_shared_context type 
       standard table of Element_shared_context
       with default key. "#EC NEEDED
  aliases:  after_commit   for iwci_if_fpm_transaction~after_commit.
  aliases:  after_failed_event   for iwci_if_fpm_ui_building_block~after_failed_event.
  aliases:  after_rejected_save   for iwci_if_fpm_transaction~after_rejected_save.
  aliases:  check_before_save   for iwci_if_fpm_transaction~check_before_save.
  aliases:  flush   for iwci_if_fpm_ui_building_block~flush.
  aliases:  is_dirty   for iwci_if_fpm_work_protection~is_dirty.
  aliases:  needs_confirmation   for iwci_if_fpm_ui_building_block~needs_confirmation.
  aliases:  override_event_oif   for iwci_if_fpm_oif_conf_exit~override_event_oif.
  aliases:  process_before_output   for iwci_if_fpm_ui_building_block~process_before_output.
  aliases:  process_event   for iwci_if_fpm_ui_building_block~process_event.
  aliases:  save   for iwci_if_fpm_transaction~save.
  methods BUILD_APP_TITLE  ."#EC NEEDED
  methods BUILD_HEADER  ."#EC NEEDED
  methods ENQUEUE_CANDIDATE  ."#EC NEEDED
  methods GET_LANG_TXT  ."#EC NEEDED
  methods LOAD_DROPDOWN_LIST  ."#EC NEEDED
  methods READ_CAND_INTERNET_REFERENCES  ."#EC NEEDED
  methods TRIGGER_POWL_REFRESH
    importing
      IV_EVENT  type Fpm_Event_Id optional  ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_COMPONENT. "#EC NEEDED
 
 
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    BRANCH_POPUP  type Ref to if_Wd_Window.
  data: 
    GO_FPM  type Ref to if_Fpm.
  data: 
    GO_FPM_EVENT  type Ref to cl_Fpm_Event.
  data: 
    GO_FPM_IDR  type Ref to if_Fpm_Idr.
  data: 
    GO_FPM_PARAMETER  type Ref to if_Fpm_Parameter.
  data: 
    GO_MESSAGE_MANAGER  type Ref to if_Fpm_Message_Manager.
  data: 
    GS_APPL_HROBJECT  type Hrobject.
  data: 
    GS_CDCY_HROBJECT  type Hrobject.
  data: 
    GS_ELEMENT  type Ref to if_Wd_Context_Element.
  data: 
    GS_HROBJECT  type Hrobject.
  data: 
    GS_REQ_HROBJECT  type Hrobject.
  data: 
    GT_ASSIGNMENTS  type Rcf_T_Cand_Assignments_List_Pl.
  data: 
    GT_ATTACHMENTS  type Rcf_T_Cand_Attachment_Pl.
  data: 
    GT_PREF_CNT_ADD  type Tihttpnvp.
  data: 
    GT_PREF_NUM  type Tihttpnvp.
  data: 
    GT_USER_REQ_LIST  type Rcf_T_Hrobject.
  data: 
    GT_WORK_LOC  type Elements_Rcf_Des_Work_Loc.
  data: 
    GV_ASSIGNMENTS_COUNT  type I.
  data: 
    GV_BRANCH_LOCATION  type Wdy_Boolean.
  data: 
    GV_CANDIDATE  type Boolean.
  data: 
    GV_COMM_EDIT  type Wdy_Boolean.
  data: 
    GV_DATA_CHANGE  type Wdy_Boolean.
  data: 
    GV_DATA_CHANGED  type Wdy_Boolean.
  data: 
    GV_DEL_REC  type String.
  data: 
    GV_DISPLAY_REGION  type Wdy_Boolean.
  data: 
    GV_FIRST_TIME  type Wdy_Boolean.
  data: 
    GV_INTERNAL  type Wdy_Boolean.
  data: 
    GV_IS_ACCESSIBLE  type String.
  data: 
    GV_LOCKED  type Wdy_Boolean.
  data: 
    GV_OTHER_COMP_DATA_CHANGED  type Wdy_Boolean.
  data: 
    GV_PERNR  type Pernr_D.
  data: 
    GV_PREF_EDIT  type Wdy_Boolean.
  data: 
    GV_PRINT_PREVIEW_CALLED  type Wdy_Boolean.
  data: 
    GV_RANKING_CHANGED  type Wdy_Boolean.
  data: 
    GV_REGION_ENABLE  type Boolean.
  data: 
    GV_SAVE_OK  type Wdy_Boolean.
  data: 
    GV_START_TIME  type String.
  data: 
    MT_INTERFACE_VIEWS  type String_Table.
  data: 
    MV_BUS_EMAIL  type Ad_Smtpadr.
  data: 
    MV_CHOICE  type String.
  data: 
    MV_EMAIL_CHANGED  type Boole_D.
  data: 
    MV_PMAIL  type Gsval.
  data: 
    MV_PVT_EMAIL  type Ad_Smtpadr.
endinterface.
*=====================================================================*
* Intf.: if_componentcontroller  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <erc_c_cand_overview_ui>
* UDate: 20240715 110015
*=====================================================================*
interface if_componentcontroller.
 
  interfaces:
     IG_COMPONENTCONTROLLER.
 
  aliases:
    wdctx_context  for   IG_COMPONENTCONTROLLER~wdctx_context.
  aliases:
    wdctx_rcf_communication  for   IG_COMPONENTCONTROLLER~wdctx_rcf_communication.
  aliases:
    Element_rcf_communication   for   IG_COMPONENTCONTROLLER~Element_rcf_communication,
    Elements_rcf_communication  for   IG_COMPONENTCONTROLLER~Elements_rcf_communication.
  aliases:
    wdctx_region_attributes  for   IG_COMPONENTCONTROLLER~wdctx_region_attributes.
  aliases:
    Element_region_attributes   for   IG_COMPONENTCONTROLLER~Element_region_attributes,
    Elements_region_attributes  for   IG_COMPONENTCONTROLLER~Elements_region_attributes.
  aliases:
    wdctx_region_values  for   IG_COMPONENTCONTROLLER~wdctx_region_values.
  aliases:
    Element_region_values   for   IG_COMPONENTCONTROLLER~Element_region_values,
    Elements_region_values  for   IG_COMPONENTCONTROLLER~Elements_region_values.
  aliases:
    wdctx_rcf_contact_no  for   IG_COMPONENTCONTROLLER~wdctx_rcf_contact_no.
  aliases:
    Element_rcf_contact_no   for   IG_COMPONENTCONTROLLER~Element_rcf_contact_no,
    Elements_rcf_contact_no  for   IG_COMPONENTCONTROLLER~Elements_rcf_contact_no.
  aliases:
    wdctx_rcf_des_work_loc  for   IG_COMPONENTCONTROLLER~wdctx_rcf_des_work_loc.
  aliases:
    Element_rcf_des_work_loc   for   IG_COMPONENTCONTROLLER~Element_rcf_des_work_loc,
    Elements_rcf_des_work_loc  for   IG_COMPONENTCONTROLLER~Elements_rcf_des_work_loc.
  aliases:
    wdctx_cities  for   IG_COMPONENTCONTROLLER~wdctx_cities.
  aliases:
    Element_cities   for   IG_COMPONENTCONTROLLER~Element_cities,
    Elements_cities  for   IG_COMPONENTCONTROLLER~Elements_cities.
  aliases:
    wdctx_enable  for   IG_COMPONENTCONTROLLER~wdctx_enable.
  aliases:
    Element_enable   for   IG_COMPONENTCONTROLLER~Element_enable,
    Elements_enable  for   IG_COMPONENTCONTROLLER~Elements_enable.
  aliases:
    wdctx_regions  for   IG_COMPONENTCONTROLLER~wdctx_regions.
  aliases:
    Element_regions   for   IG_COMPONENTCONTROLLER~Element_regions,
    Elements_regions  for   IG_COMPONENTCONTROLLER~Elements_regions.
  aliases:
    wdctx_rcf_display_commn  for   IG_COMPONENTCONTROLLER~wdctx_rcf_display_commn.
  aliases:
    Element_rcf_display_commn   for   IG_COMPONENTCONTROLLER~Element_rcf_display_commn,
    Elements_rcf_display_commn  for   IG_COMPONENTCONTROLLER~Elements_rcf_display_commn.
  aliases:
    wdctx_rcf_email_visible  for   IG_COMPONENTCONTROLLER~wdctx_rcf_email_visible.
  aliases:
    Element_rcf_email_visible   for   IG_COMPONENTCONTROLLER~Element_rcf_email_visible,
    Elements_rcf_email_visible  for   IG_COMPONENTCONTROLLER~Elements_rcf_email_visible.
  aliases:
    wdctx_rcf_empl_pref  for   IG_COMPONENTCONTROLLER~wdctx_rcf_empl_pref.
  aliases:
    wdctx_rcf_functional_area  for   IG_COMPONENTCONTROLLER~wdctx_rcf_functional_area.
  aliases:
    Element_rcf_functional_area   for   IG_COMPONENTCONTROLLER~Element_rcf_functional_area,
    Elements_rcf_functional_area  for   IG_COMPONENTCONTROLLER~Elements_rcf_functional_area.
  aliases:
    wdctx_rcf_hierarchy_level  for   IG_COMPONENTCONTROLLER~wdctx_rcf_hierarchy_level.
  aliases:
    Element_rcf_hierarchy_level   for   IG_COMPONENTCONTROLLER~Element_rcf_hierarchy_level,
    Elements_rcf_hierarchy_level  for   IG_COMPONENTCONTROLLER~Elements_rcf_hierarchy_level.
  aliases:
    wdctx_rcf_industry  for   IG_COMPONENTCONTROLLER~wdctx_rcf_industry.
  aliases:
    Element_rcf_industry   for   IG_COMPONENTCONTROLLER~Element_rcf_industry,
    Elements_rcf_industry  for   IG_COMPONENTCONTROLLER~Elements_rcf_industry.
  aliases:
    wdctx_rcf_intrest_grp  for   IG_COMPONENTCONTROLLER~wdctx_rcf_intrest_grp.
  aliases:
    Element_rcf_intrest_grp   for   IG_COMPONENTCONTROLLER~Element_rcf_intrest_grp,
    Elements_rcf_intrest_grp  for   IG_COMPONENTCONTROLLER~Elements_rcf_intrest_grp.
  aliases:
    wdctx_rcf_ireferences  for   IG_COMPONENTCONTROLLER~wdctx_rcf_ireferences.
  aliases:
    Element_rcf_ireferences   for   IG_COMPONENTCONTROLLER~Element_rcf_ireferences,
    Elements_rcf_ireferences  for   IG_COMPONENTCONTROLLER~Elements_rcf_ireferences.
  aliases:
    wdctx_rcf_mail  for   IG_COMPONENTCONTROLLER~wdctx_rcf_mail.
  aliases:
    Element_rcf_mail   for   IG_COMPONENTCONTROLLER~Element_rcf_mail,
    Elements_rcf_mail  for   IG_COMPONENTCONTROLLER~Elements_rcf_mail.
  aliases:
    wdctx_rcf_mail_bus_pvt  for   IG_COMPONENTCONTROLLER~wdctx_rcf_mail_bus_pvt.
  aliases:
    Element_rcf_mail_bus_pvt   for   IG_COMPONENTCONTROLLER~Element_rcf_mail_bus_pvt,
    Elements_rcf_mail_bus_pvt  for   IG_COMPONENTCONTROLLER~Elements_rcf_mail_bus_pvt.
  aliases:
    wdctx_rcf_personel_data  for   IG_COMPONENTCONTROLLER~wdctx_rcf_personel_data.
  aliases:
    Element_rcf_personel_data   for   IG_COMPONENTCONTROLLER~Element_rcf_personel_data,
    Elements_rcf_personel_data  for   IG_COMPONENTCONTROLLER~Elements_rcf_personel_data.
  aliases:
    wdctx_rcf_pref  for   IG_COMPONENTCONTROLLER~wdctx_rcf_pref.
  aliases:
    Element_rcf_pref   for   IG_COMPONENTCONTROLLER~Element_rcf_pref,
    Elements_rcf_pref  for   IG_COMPONENTCONTROLLER~Elements_rcf_pref.
  aliases:
    wdctx_rcf_prefernces  for   IG_COMPONENTCONTROLLER~wdctx_rcf_prefernces.
  aliases:
    Element_rcf_prefernces   for   IG_COMPONENTCONTROLLER~Element_rcf_prefernces,
    Elements_rcf_prefernces  for   IG_COMPONENTCONTROLLER~Elements_rcf_prefernces.
  aliases:
    wdctx_rcf_pref_contact  for   IG_COMPONENTCONTROLLER~wdctx_rcf_pref_contact.
  aliases:
    Element_rcf_pref_contact   for   IG_COMPONENTCONTROLLER~Element_rcf_pref_contact,
    Elements_rcf_pref_contact  for   IG_COMPONENTCONTROLLER~Elements_rcf_pref_contact.
  aliases:
    wdctx_shared_context  for   IG_COMPONENTCONTROLLER~wdctx_shared_context.
  aliases:
    Element_shared_context   for   IG_COMPONENTCONTROLLER~Element_shared_context,
    Elements_shared_context  for   IG_COMPONENTCONTROLLER~Elements_shared_context.
  aliases:  after_commit   for iwci_if_fpm_transaction~after_commit.
  aliases:  after_failed_event   for iwci_if_fpm_ui_building_block~after_failed_event.
  aliases:  after_rejected_save   for iwci_if_fpm_transaction~after_rejected_save.
  aliases:  check_before_save   for iwci_if_fpm_transaction~check_before_save.
  aliases:  flush   for iwci_if_fpm_ui_building_block~flush.
  aliases:  is_dirty   for iwci_if_fpm_work_protection~is_dirty.
  aliases:  needs_confirmation   for iwci_if_fpm_ui_building_block~needs_confirmation.
  aliases:  override_event_oif   for iwci_if_fpm_oif_conf_exit~override_event_oif.
  aliases:  process_before_output   for iwci_if_fpm_ui_building_block~process_before_output.
  aliases:  process_event   for iwci_if_fpm_ui_building_block~process_event.
  aliases:  save   for iwci_if_fpm_transaction~save.
  aliases: BUILD_APP_TITLE for IG_COMPONENTCONTROLLER~BUILD_APP_TITLE.
  aliases: BUILD_HEADER for IG_COMPONENTCONTROLLER~BUILD_HEADER.
  aliases: ENQUEUE_CANDIDATE for IG_COMPONENTCONTROLLER~ENQUEUE_CANDIDATE.
  aliases: GET_LANG_TXT for IG_COMPONENTCONTROLLER~GET_LANG_TXT.
  aliases: LOAD_DROPDOWN_LIST for IG_COMPONENTCONTROLLER~LOAD_DROPDOWN_LIST.
  aliases: READ_CAND_INTERNET_REFERENCES for IG_COMPONENTCONTROLLER~READ_CAND_INTERNET_REFERENCES.
  aliases: TRIGGER_POWL_REFRESH for IG_COMPONENTCONTROLLER~TRIGGER_POWL_REFRESH.
    aliases: wd_get_api for IG_COMPONENTCONTROLLER~wd_get_api.
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  <interface> controller of component <componentinterface>
*            of usage <shared_context_u>
**********
  methods  wd_cpifc_shared_context_u
    returning
      value(Result) type ref to iwci_erc_c_shared_context_sd.      "#EC NEEDED
**********
* @Returns:  component <COMPONENTINTERFACE>
*            of usage  <shared_context_u>
**********
  methods  wd_cpuse_shared_context_u
    returning
      value(Result) type ref to If_Wd_Component_Usage.  "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ON_DATA_CHANGED
    importing
      IV_SOURCE  type String optional
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  global application properties                                    |
* +-------------------------------------------------------------------+

  aliases: 
    BRANCH_POPUP  for  IG_COMPONENTCONTROLLER~BRANCH_POPUP.
  aliases: 
    GO_FPM  for  IG_COMPONENTCONTROLLER~GO_FPM.
  aliases: 
    GO_FPM_EVENT  for  IG_COMPONENTCONTROLLER~GO_FPM_EVENT.
  aliases: 
    GO_FPM_IDR  for  IG_COMPONENTCONTROLLER~GO_FPM_IDR.
  aliases: 
    GO_FPM_PARAMETER  for  IG_COMPONENTCONTROLLER~GO_FPM_PARAMETER.
  aliases: 
    GO_MESSAGE_MANAGER  for  IG_COMPONENTCONTROLLER~GO_MESSAGE_MANAGER.
  aliases: 
    GS_APPL_HROBJECT  for  IG_COMPONENTCONTROLLER~GS_APPL_HROBJECT.
  aliases: 
    GS_CDCY_HROBJECT  for  IG_COMPONENTCONTROLLER~GS_CDCY_HROBJECT.
  aliases: 
    GS_ELEMENT  for  IG_COMPONENTCONTROLLER~GS_ELEMENT.
  aliases: 
    GS_HROBJECT  for  IG_COMPONENTCONTROLLER~GS_HROBJECT.
  aliases: 
    GS_REQ_HROBJECT  for  IG_COMPONENTCONTROLLER~GS_REQ_HROBJECT.
  aliases: 
    GT_ASSIGNMENTS  for  IG_COMPONENTCONTROLLER~GT_ASSIGNMENTS.
  aliases: 
    GT_ATTACHMENTS  for  IG_COMPONENTCONTROLLER~GT_ATTACHMENTS.
  aliases: 
    GT_PREF_CNT_ADD  for  IG_COMPONENTCONTROLLER~GT_PREF_CNT_ADD.
  aliases: 
    GT_PREF_NUM  for  IG_COMPONENTCONTROLLER~GT_PREF_NUM.
  aliases: 
    GT_USER_REQ_LIST  for  IG_COMPONENTCONTROLLER~GT_USER_REQ_LIST.
  aliases: 
    GT_WORK_LOC  for  IG_COMPONENTCONTROLLER~GT_WORK_LOC.
  aliases: 
    GV_ASSIGNMENTS_COUNT  for  IG_COMPONENTCONTROLLER~GV_ASSIGNMENTS_COUNT.
  aliases: 
    GV_BRANCH_LOCATION  for  IG_COMPONENTCONTROLLER~GV_BRANCH_LOCATION.
  aliases: 
    GV_CANDIDATE  for  IG_COMPONENTCONTROLLER~GV_CANDIDATE.
  aliases: 
    GV_COMM_EDIT  for  IG_COMPONENTCONTROLLER~GV_COMM_EDIT.
  aliases: 
    GV_DATA_CHANGE  for  IG_COMPONENTCONTROLLER~GV_DATA_CHANGE.
  aliases: 
    GV_DATA_CHANGED  for  IG_COMPONENTCONTROLLER~GV_DATA_CHANGED.
  aliases: 
    GV_DEL_REC  for  IG_COMPONENTCONTROLLER~GV_DEL_REC.
  aliases: 
    GV_DISPLAY_REGION  for  IG_COMPONENTCONTROLLER~GV_DISPLAY_REGION.
  aliases: 
    GV_FIRST_TIME  for  IG_COMPONENTCONTROLLER~GV_FIRST_TIME.
  aliases: 
    GV_INTERNAL  for  IG_COMPONENTCONTROLLER~GV_INTERNAL.
  aliases: 
    GV_IS_ACCESSIBLE  for  IG_COMPONENTCONTROLLER~GV_IS_ACCESSIBLE.
  aliases: 
    GV_LOCKED  for  IG_COMPONENTCONTROLLER~GV_LOCKED.
  aliases: 
    GV_OTHER_COMP_DATA_CHANGED  for  IG_COMPONENTCONTROLLER~GV_OTHER_COMP_DATA_CHANGED.
  aliases: 
    GV_PERNR  for  IG_COMPONENTCONTROLLER~GV_PERNR.
  aliases: 
    GV_PREF_EDIT  for  IG_COMPONENTCONTROLLER~GV_PREF_EDIT.
  aliases: 
    GV_PRINT_PREVIEW_CALLED  for  IG_COMPONENTCONTROLLER~GV_PRINT_PREVIEW_CALLED.
  aliases: 
    GV_RANKING_CHANGED  for  IG_COMPONENTCONTROLLER~GV_RANKING_CHANGED.
  aliases: 
    GV_REGION_ENABLE  for  IG_COMPONENTCONTROLLER~GV_REGION_ENABLE.
  aliases: 
    GV_SAVE_OK  for  IG_COMPONENTCONTROLLER~GV_SAVE_OK.
  aliases: 
    GV_START_TIME  for  IG_COMPONENTCONTROLLER~GV_START_TIME.
  aliases: 
    MT_INTERFACE_VIEWS  for  IG_COMPONENTCONTROLLER~MT_INTERFACE_VIEWS.
  aliases: 
    MV_BUS_EMAIL  for  IG_COMPONENTCONTROLLER~MV_BUS_EMAIL.
  aliases: 
    MV_CHOICE  for  IG_COMPONENTCONTROLLER~MV_CHOICE.
  aliases: 
    MV_EMAIL_CHANGED  for  IG_COMPONENTCONTROLLER~MV_EMAIL_CHANGED.
  aliases: 
    MV_PMAIL  for  IG_COMPONENTCONTROLLER~MV_PMAIL.
  aliases: 
    MV_PVT_EMAIL  for  IG_COMPONENTCONTROLLER~MV_PVT_EMAIL.
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Cand_Overview_Ui.
endinterface.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr
* Purp.: definitions for application defined methods of controller
*        COMPONENTCONTROLLER (COMPONENT)
* UDate: 20240715 110015
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_COMPONENTCONTROLLER
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_cand_overview_ui.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAPPLICATIONSTATECHANGE
    importing
      STATE_CHANGE  type ref to If_Wd_Application_State_Change   ."#EC NEEDED
  methods WDDOBEFORENAVIGATION
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods WDDOEXIT
    importing
      REASON  type Wdr_Appl_Exit_Reason   ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOPOSTPROCESSING
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods AFTER_COMMIT
    importing
      IO_EVENT  type ref to Cl_Fpm_Event   ."#EC NEEDED
  methods AFTER_FAILED_EVENT
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
      IT_INTERFACE_VIEWS  type String_Table 
      IV_REVERT  type Boole_D   ."#EC NEEDED
  methods AFTER_REJECTED_SAVE
    importing
      IO_EVENT  type ref to Cl_Fpm_Event   ."#EC NEEDED
  methods BUILD_APP_TITLE  ."#EC NEEDED
  methods BUILD_HEADER  ."#EC NEEDED
  methods CHECK_BEFORE_SAVE
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
    exporting
      EV_REJECTED  type Boole_D  ."#EC NEEDED
  methods ENQUEUE_CANDIDATE  ."#EC NEEDED
  methods FLUSH
    importing
      IT_INTERFACE_VIEWS  type String_Table   ."#EC NEEDED
  methods GET_LANG_TXT  ."#EC NEEDED
  methods IS_DIRTY
    exporting
      EV_DIRTY  type Boole_D  ."#EC NEEDED
  methods LOAD_DROPDOWN_LIST  ."#EC NEEDED
  methods NEEDS_CONFIRMATION
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
      IT_INTERFACE_VIEWS  type String_Table 
    exporting
      EO_CONFIRMATION_REQUEST  type ref to Cl_Fpm_Confirmation_Request  ."#EC NEEDED
  methods OVERRIDE_EVENT_OIF
    importing
      IO_OIF  type ref to If_Fpm_Oif   ."#EC NEEDED
  methods PROCESS_BEFORE_OUTPUT
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
      IT_INTERFACE_VIEWS  type String_Table   ."#EC NEEDED
  methods PROCESS_EVENT
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
      IT_INTERFACE_VIEWS  type String_Table 
    exporting
      EV_RESULT  type Fpm_Event_Result  ."#EC NEEDED
  methods READ_CAND_INTERNET_REFERENCES  ."#EC NEEDED
  methods SAVE
    importing
      IO_EVENT  type ref to Cl_Fpm_Event 
    exporting
      EV_REJECTED  type Boole_D  ."#EC NEEDED
  methods TRIGGER_POWL_REFRESH
    importing
      IV_EVENT  type Fpm_Event_Id optional  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ON_DATA_CHANGED
    importing
      IV_SOURCE  type String optional
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_COMPONENTCONTROLLER,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node.     "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_cand_overview_ui. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr 
* Purp.: explicit definitions derived from application coding
*        <COMPONENTCONTROLLER> (COMPONENT)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240715 110015
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAPPLICATIONSTATECHANGE . "#EC NEEDED
endmethod.

method WDDOBEFORENAVIGATION . "#EC NEEDED
endmethod.

METHOD wddoexit .

  wd_this->trigger_powl_refresh( ).

* Unlock candidate when exiting
  wd_assist->dequeue_candidate( wd_this->gs_hrobject ).

ENDMETHOD.

METHOD wddoinit .

  DATA lo_cmp    TYPE REF TO if_wd_component.
  DATA lo_app    TYPE REF TO if_wd_application.
  DATA ls_user TYPE RCF_S_REQ_RESPONSIBLE.
  DATA lt_user_req_list       TYPE rcf_t_requisition_id_list.
  DATA ls_requisition         TYPE rcf_requisition.
  DATA ls_hrobject            TYPE hrobject.
  DATA l_plvar                TYPE plvar.
  CONSTANTS: lc_sclas(2)  VALUE 'US',
             lc_req_otype(2) VALUE 'NB'.

  ls_user-sclas = lc_sclas.
  ls_user-sobid = sy-uname.

  l_plvar = cl_hrrcf_general_bl=>get_plvar( ).

* Get the list of requisitions handeled by user
  CALL METHOD cl_hrrcf_rec_team=>get_req_for_resp_person
    EXPORTING
      ps_req_responsible = ls_user
    IMPORTING
      pt_req_list        = lt_user_req_list.

  LOOP AT lt_user_req_list INTO ls_requisition.
    ls_hrobject-plvar = l_plvar.
    ls_hrobject-otype = lc_req_otype.
    ls_hrobject-objid = ls_requisition.
    APPEND ls_hrobject TO wd_this->gt_user_req_list.
  ENDLOOP.

  wd_this->go_fpm = cl_fpm_factory=>get_instance( ).
  wd_this->go_fpm_idr ?= wd_this->go_fpm->get_service( cl_fpm_service_manager=>gc_key_idr ).
  wd_this->go_message_manager = wd_this->go_fpm->mo_message_manager.

* accessibility
  lo_cmp = wd_this->wd_get_api( ).
  lo_app = lo_cmp->get_application( ).

* Setting global variable in the component controller
  wd_this->gv_is_accessible = lo_app->get_is_accessible( ).

ENDMETHOD.

method WDDOPOSTPROCESSING . "#EC NEEDED
endmethod.

METHOD after_commit .

*** Raise a message after save

  DATA lv_msg                    TYPE string.

* check if data in other WD components have been changed
  IF ( wd_this->gv_data_changed = abap_true AND wd_this->gv_save_ok = abap_true ) OR
     ( wd_this->mv_email_changed = abap_true AND wd_this->gv_save_ok = abap_true ) OR
     wd_this->gv_other_comp_data_changed = abap_true.
* report info message: data saved successfully
    lv_msg = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/SAVED_OK' ).
    CALL METHOD wd_this->go_message_manager->report_message
      EXPORTING
        iv_severity     = wd_this->go_message_manager->gc_severity_success
        iv_message_text = lv_msg
        io_component    = wd_this.

    CLEAR: wd_this->gv_data_changed, wd_this->gv_other_comp_data_changed.

  ELSEIF wd_this->gv_data_changed = abap_false AND wd_this->gv_other_comp_data_changed = abap_false.
* report info message: no changes found
    CALL METHOD wd_this->go_message_manager->report_t100_message
      EXPORTING
        iv_msgid     = 'HRRCF0007'
        iv_msgno     = '002'
        io_component = wd_this
        iv_severity  = if_fpm_message_manager=>gc_severity_success.
*    IF wd_this->mv_pmail = 'X'.
*      IF  wd_this->mv_email_changed = space.
*        CALL METHOD wd_this->go_message_manager->report_t100_message
*          EXPORTING
*            iv_msgid     = 'HRRCF0007'
*            iv_msgno     = '002'
*            io_component = wd_this
*            iv_severity  = if_fpm_message_manager=>gc_severity_success.
*      ELSE.
*        IF wd_this->gv_save_ok = abap_true.
** report info message: data saved successfully
*          lv_msg = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/SAVED_OK' ).
*          CALL METHOD wd_this->go_message_manager->report_message
*            EXPORTING
*              iv_severity     = wd_this->go_message_manager->gc_severity_success
*              iv_message_text = lv_msg
*              io_component    = wd_this.
*        ENDIF.
*      ENDIF.
*    ELSE.
*      CALL METHOD wd_this->go_message_manager->report_t100_message
*        EXPORTING
*          iv_msgid     = 'HRRCF0007'
*          iv_msgno     = '002'
*          io_component = wd_this
*          iv_severity  = if_fpm_message_manager=>gc_severity_success.
*    ENDIF.

  ENDIF.

ENDMETHOD.

method AFTER_FAILED_EVENT . "#EC NEEDED
endmethod.

method AFTER_REJECTED_SAVE . "#EC NEEDED
endmethod.

METHOD build_app_title .

  DATA lo_controller            TYPE REF TO if_wd_controller.
  DATA lt_messages              TYPE bapirettab.
  DATA lv_string                TYPE string.
  DATA lv_name                  TYPE bu_name1tx.
  DATA lv_status                TYPE rcf_cand_status.
  DATA lv_status_string         TYPE string.
  DATA lv_title                 TYPE string.

  lv_string =  cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CANDIDATE_PROFILE' ).

* read the personal details to get the name of the candidate.
  CALL METHOD wd_assist->get_candidate_info
    EXPORTING
      is_cand_hrobject = wd_this->gs_hrobject
    IMPORTING
      ev_cand_name     = lv_name
      et_message       = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* get the candidate status
  CLEAR lt_messages.
  CALL METHOD wd_assist->get_candidate_status
    EXPORTING
      is_cand_hrobject = wd_this->gs_hrobject
    IMPORTING
      ev_status        = lv_status
      et_message       = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* set title of application
  IF lt_messages IS INITIAL .
    IF lv_status = 0.
      lv_status_string = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_PROFILE_LOCKED' ).
    ELSEIF lv_status = 1 OR lv_status = 2.
      lv_status_string = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_PROFILE_RELEASED' ).
    ENDIF.

    CONCATENATE '(' lv_status_string ')' INTO lv_status_string.
    CONCATENATE lv_string lv_name lv_status_string  INTO lv_title SEPARATED BY space.

    CALL METHOD wd_this->go_fpm_idr->set_application_title
      EXPORTING
        iv_title         = lv_title
        iv_title_tooltip = lv_title.
  ENDIF.

ENDMETHOD.

METHOD build_header .

  DATA lo_nav_object    TYPE REF TO if_fpm_navigation.
  DATA lo_exception     TYPE REF TO cx_fpm_idr.        "#EC NEEDED
  DATA lo_api_component TYPE REF TO if_wd_component.
  DATA lo_wd_appl       TYPE REF TO if_wd_application.
  DATA lo_controller    TYPE REF TO if_wd_controller.
  DATA lt_items_val     TYPE if_fpm_idr=>t_items_val.
  DATA ls_items_val     TYPE if_fpm_idr=>s_items_val.
  DATA lt_param         TYPE tihttpnvp.
  DATA ls_param         TYPE ihttpnvp.
  DATA lt_launchpad     TYPE apb_lpd_t_params.
  DATA ls_launchpad     TYPE apb_lpd_s_params.
  DATA ls_header_data   TYPE rcf_s_req_header_data_pl.
  DATA lv_nav_key       TYPE fpm_s_navigation_key.
  DATA lv_nav_label     TYPE string.
  DATA lv_alias         TYPE string.
  DATA lt_messages       TYPE bapirettab.
  DATA lv_string1       TYPE string.
  DATA lv_string2       TYPE string.
  DATA lv_req_lbl          TYPE string.
  DATA lv_param         TYPE string.
  DATA lv_target_key    TYPE string.
  DATA lv_lpd_instance  TYPE apb_lpd_instance.
  DATA lv_cl_environm   TYPE        i.
  DATA   lv_date(10)       TYPE c.

  CALL METHOD wd_assist->get_header_data
    EXPORTING
      is_req_hrobject    = wd_this->gs_req_hrobject
    IMPORTING
      es_req_header_data = ls_header_data
  et_message       = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.


  lv_req_lbl = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/REQUISITION' ).

* get application environment: portal or non-portal environment and set the navigation link
  lo_api_component = wd_this->wd_get_api( ).
  lo_wd_appl = lo_api_component->get_application( ).
  lv_cl_environm = lo_wd_appl->get_client_environment( ).

  IF lv_cl_environm = if_wd_application=>co_client_environment-portal.
    lv_lpd_instance = cl_hrrcf_navigation_ui=>gc_erc_obn_lpd_instance.
    lv_alias = cl_hrrcf_navigation_ui=>gc_erc_obn_lpd_alias-req_dovr.
  ELSE.
    lv_lpd_instance = cl_hrrcf_navigation_ui=>gc_erc_wd_lpd_instance.
    lv_alias = cl_hrrcf_navigation_ui=>gc_erc_wd_lpd_alias-req_dovr.
  ENDIF.

* add link to IDR for Requisition
  lv_nav_key-key1 = cl_hrrcf_navigation_ui=>gc_erc_lpd_role.   "launchpad Role
  lv_nav_key-key2 = lv_lpd_instance.   "launchpad Instance
  lo_nav_object = wd_this->go_fpm->get_navigation(
     is_key = lv_nav_key
     iv_instance_sharing = abap_false ).

  CALL METHOD lo_nav_object->get_key_from_alias
    EXPORTING
      iv_alias = lv_alias
    RECEIVING
      rv_key   = lv_target_key.

* pass the parameters
  ls_param-name = 'dovrtype'.
  ls_param-value = cl_hrrcf_navigation_ui=>gc_requisition.
  APPEND ls_param TO lt_param.
  ls_param-name = 'req_hrobject'.
  ls_param-value = wd_this->gs_req_hrobject.
  APPEND ls_param TO lt_param.

* encode the url
  CALL METHOD cl_http_utility=>if_http_utility~fields_to_string
    EXPORTING
      fields = lt_param
      encode = 1
    RECEIVING
      string = lv_param.

  ls_launchpad-key = 'PARAM'.
  ls_launchpad-value = lv_param.
  APPEND ls_launchpad TO lt_launchpad.

  CALL METHOD lo_nav_object->modify_parameters
    EXPORTING
      id_target_key            = lv_target_key
      it_business_parameter    = lt_launchpad.

  lv_string1 = lv_req_lbl.
  lv_string2 = ls_header_data-header.

* set labels and alias
  lv_nav_label = lv_string1.

* add link to the idr
  TRY.
      wd_this->go_fpm_idr->add_navigation_item(
        EXPORTING io_navigation        = lo_nav_object
                                                   iv_application_alias = lv_alias
                                                   iv_label_text        = lv_nav_label
                                                   iv_label_tooltip     = lv_nav_label
                                                   iv_link_text         = lv_string2
                                                   iv_link_tooltip      = lv_string2 ).
    CATCH cx_fpm_idr INTO lo_exception.                 "#EC NO_HANDLER
  ENDTRY.

* add static data to IDR only
  CLEAR: lv_string1, lv_string2.

* status
  lv_string1 = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/STATUS' ).
  lv_string2 = ls_header_data-status_txt.

  ls_items_val-label_name = lv_string1.
  ls_items_val-value = lv_string2.
  ls_items_val-value_tooltip = lv_string2.
  APPEND ls_items_val TO lt_items_val.

  CLEAR: lv_string1, lv_string2.

* hiring manager
  lv_string1 = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/HIRING_MANAGER_SH' ).
  lv_string2 = ls_header_data-hiring_manager_fullname.

  ls_items_val-label_name = lv_string1.
  ls_items_val-value = lv_string2.
  ls_items_val-value_tooltip = lv_string2.
  APPEND ls_items_val TO lt_items_val.

  CLEAR: lv_string1, lv_string2.

* manager's org unit
  lv_string1 = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/MANAGER_ORG_SH' ).
  lv_string2 = ls_header_data-hiring_manager_org_unit_txt.

  ls_items_val-label_name = lv_string1.
  ls_items_val-value = lv_string2.
  ls_items_val-value_tooltip = lv_string2.
  APPEND ls_items_val TO lt_items_val.

  CLEAR: lv_string1, lv_string2.

* lead recruiter
  lv_string1 = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/LEAD_RECRUITER_SH' ).
  lv_string2 = ls_header_data-lead_recruiter_fullname.

  ls_items_val-label_name = lv_string1.
  ls_items_val-value = lv_string2.
  ls_items_val-value_tooltip = lv_string2.
  APPEND ls_items_val TO lt_items_val.

  CLEAR: lv_string1, lv_string2.

* release date
  lv_string1 = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/RELEASE_DATE' ).
  WRITE ls_header_data-first_opened_date TO lv_date.

  ls_items_val-label_name = lv_string1.
  ls_items_val-value = lv_date.
  ls_items_val-value_tooltip = lv_date.
  APPEND ls_items_val TO lt_items_val.

* add items to IDR
  CALL METHOD wd_this->go_fpm_idr->add_item_group_by_val
    EXPORTING
      it_items = lt_items_val.

ENDMETHOD.

METHOD check_before_save . "#EC NEEDED
ENDMETHOD.

METHOD enqueue_candidate .

  DATA: lo_candidate           TYPE REF TO cl_hrrcf_candidate,
        lo_controller          TYPE REF TO if_wd_controller,
        lo_fpm_cnr_oif         TYPE REF TO if_fpm_cnr_oif,
        lo_nd_shared_context   TYPE REF TO if_wd_context_node,
        lt_message             TYPE bapirettab,
        ls_message             TYPE bapiret2,
        lv_display_mode        TYPE wdy_boolean,
        lv_cand_already_locked TYPE boole_d.


* Lock of candidate profile maintenance
  CHECK wd_this->gv_locked IS INITIAL.

  CALL METHOD wd_assist->enqueue_candidate
    EXPORTING
      is_cand_hrobject  = wd_this->gs_hrobject
    IMPORTING
      ev_already_locked = lv_cand_already_locked
      et_message        = lt_message.

* Profile maintenance already locked: Disable SAVE button when edit mode
  IF lv_cand_already_locked EQ abap_true.

    lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
    lo_nd_shared_context->get_attribute(
            EXPORTING
              name =  `DISPLAY_MODE`
            IMPORTING
              value = lv_display_mode ).

    IF lv_display_mode EQ abap_false.
      lo_fpm_cnr_oif ?= cl_fpm_service_manager=>get_service( cl_fpm_service_manager=>gc_key_cnr_oif ).
      lo_fpm_cnr_oif->define_button(
        EXPORTING
                                       iv_function    = if_fpm_constants=>gc_button-activation_function
                                       iv_element_id  = 'FPM_SAVE'
                                       iv_enabled     = ''
                                       iv_visibility  = '02' ).
    ENDIF.
    wd_this->gv_locked = abap_true.
  ENDIF.

* output message
  IF lt_message IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    READ TABLE lt_message INTO ls_message WITH KEY type = 'E'.

    wd_this->go_message_manager->report_bapiret2_message(
      is_bapiret2    = ls_message
      iv_lifetime    = wd_this->go_message_manager->gc_life_visibility_manu_cont
      io_component  = wd_this->go_fpm
      io_controller = lo_controller ).
  ENDIF.

ENDMETHOD.

method FLUSH . "#EC NEEDED
endmethod.

method GET_LANG_TXT .

  DATA lo_nd_rcf_personel_data TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_personel_data TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_pref          TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_pref          TYPE REF TO if_wd_context_element.

  DATA ls_rcf_pref             TYPE wd_this->element_rcf_pref.
  DATA lv_pref_lang            TYPE wd_this->element_rcf_pref-pref_lang.
  DATA ls_rcf_personel_data    TYPE wd_this->element_rcf_personel_data.
  DATA lv_correspondlanguage   TYPE wd_this->element_rcf_personel_data-correspondlanguage.
  DATA lv_sptxt                TYPE sptxt.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_el_rcf_personel_data = lo_nd_rcf_personel_data->get_element( ).

*  get single attribute
  lo_el_rcf_personel_data->get_attribute(
    EXPORTING
      name =  `CORRESPONDLANGUAGE`
    IMPORTING
      value = lv_correspondlanguage ).

  wd_assist->get_lang_text( EXPORTING iv_spras = lv_correspondlanguage
                            IMPORTING ev_sptxt = lv_sptxt ).

  lv_pref_lang = lv_sptxt .

  lo_nd_rcf_pref = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref ).
  lo_el_rcf_pref = lo_nd_rcf_pref->get_element( ).

* set single attribute
  lo_el_rcf_pref->set_attribute(
    name =  `PREF_LANG`
    value = lv_pref_lang ).

endmethod.

method IS_DIRTY .

  IF wd_this->gv_data_changed = abap_true.
    ev_dirty = abap_true.
  ENDIF.

endmethod.

METHOD load_dropdown_list .

  DATA: lo_node_pers_data           TYPE REF TO if_wd_context_node,
        lt_preference               TYPE rcf_t_mdl_uis_fieldname,
        ls_preference               TYPE  rcf_s_mdl_uis_fieldname,
        lv_otr_please_select_txt    TYPE string.

  CONSTANTS: lc_please_select       TYPE string VALUE 'PAOC_RCF_UI_SELF_SERVICES/PLEASE_SELECT'.

  lo_node_pers_data = wd_context->get_child_node( name = if_componentcontroller=>wdctx_rcf_personel_data ).

  CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
    EXPORTING
      alias      = lc_please_select
    RECEIVING
      alias_text = lv_otr_please_select_txt.

  CLEAR ls_preference.
  ls_preference-fieldname = 'LANGUAGE'.
  ls_preference-init_key_included = abap_true.
  ls_preference-init_value = lv_otr_please_select_txt.
  ls_preference-attribute_name = 'CORRESPONDLANGUAGE'.
  APPEND ls_preference TO lt_preference.

  CALL METHOD cl_hrrcf_wd_services=>retrieve_value_helps
    EXPORTING
      it_field_names  = lt_preference
      io_context_node = lo_node_pers_data.

ENDMETHOD.

METHOD needs_confirmation .

  DATA lo_confirm_request            TYPE REF TO cl_fpm_confirmation_request.
  DATA lt_conf_text                  TYPE string_table.
  DATA lv_text                       TYPE string.

  IF io_event->mv_event_id = 'PRINT'.
    IF wd_this->gv_data_changed = 'X'.
      lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/PRINT_CONFIRM' ).
      APPEND lv_text TO lt_conf_text.
*     Create an instance passing the string table which contains the texts to be displayed on the popup
      CREATE OBJECT lo_confirm_request
        EXPORTING
          it_confirmation_text = lt_conf_text.

      eo_confirmation_request = lo_confirm_request.
    ENDIF.
  ENDIF.

ENDMETHOD.

METHOD override_event_oif.

  DATA lo_fpm_parameter            TYPE REF TO   if_fpm_parameter.
  DATA lo_fpm_event                TYPE REF TO   cl_fpm_event.
  DATA lo_cnr                      TYPE REF TO   if_fpm_cnr_oif.
  DATA lo_nd_shared_context        TYPE REF TO   if_wd_context_node.
  DATA lo_controller               TYPE REF TO   if_wd_controller.
  DATA lt_parameter                TYPE          apb_lpd_t_params.
  DATA ls_parameter                LIKE LINE OF  lt_parameter.
  DATA lt_field                    TYPE          tihttpnvp.
  DATA ls_field                    TYPE          ihttpnvp.
  DATA lt_messages                 TYPE          bapirettab.
  DATA ls_current_state            TYPE          if_fpm_oif=>ty_s_state.
  DATA lv_hrqua_supported          TYPE          wdy_boolean.
  DATA lv_value                    TYPE          objektid.
  DATA lv_detail_link              TYPE          string.
  DATA lv_tabno                    TYPE          i.
  DATA lv_req_hrobject_id          TYPE          string.
  DATA lv_cdcy_hrobject_id         TYPE          string.
  DATA lv_subname                  TYPE          string.
  DATA lv_lines                    TYPE          string.
  DATA lv_rename                   TYPE          string.
  DATA lt_educations               TYPE          rcf_t_cand_education_pl.
  DATA lt_work_exp                 TYPE          rcf_t_cand_work_exp_pl.
  DATA lt_attachments              TYPE          rcf_t_cand_attachment_pl.
  DATA lt_assignments              TYPE          rcf_t_cand_assignments_list_pl.
  DATA ls_assignments              TYPE          rcf_s_cand_assignments_list_pl.
  DATA lt_menu_action_items        TYPE          if_fpm_cnr_oif=>t_menu_action_items.
  DATA ls_menu_action_items        TYPE          if_fpm_cnr_oif=>s_menu_action_items.
  DATA lt_notes                    TYPE          rcf_t_cand_notes.
  DATA lt_qualifications           TYPE          rcf_t_selected_quali_detail_pl.
  DATA lt_keys                     TYPE          if_fpm_parameter=>t_keys.
  DATA lv_param_value              TYPE          string.
  DATA lv_authorization_failed     TYPE          wdy_boolean.
  DATA lv_display_mode             TYPE          wdy_boolean.
  DATA lv_fpm_value                TYPE          string.
  DATA lv_plvar                    TYPE          plvar.
  DATA lv_variant_id               TYPE          string.
  DATA lv_num_edu                  TYPE          i.
  DATA lv_num_work_exp             TYPE          i.
  DATA lv_num_attachments          TYPE          i.
  DATA lv_num_notes                TYPE          i.
  DATA lv_num_quali                TYPE          i.
  DATA ls_qualifications           TYPE          rcf_s_selected_quali_detail_pl.
  DATA lt_qualifications_1         TYPE          rcf_t_selected_quali_detail_pl.
  DATA lt_candidates               TYPE        rcf_t_hrobject.
  DATA lt_excl_cand                TYPE        rcf_t_hrobject.
  DATA ls_excl_cand                TYPE        hrobject.
  DATA lv_edit_allowed             TYPE        wdy_boolean.
  DATA ls_cand_hrobject            TYPE        hrobject.


* Declaration of constants
  CONSTANTS: lc_data_overview       TYPE string VALUE 'MAIN_1',                 "N 1817296
             lc_edu_exp             TYPE string VALUE 'MAIN_2',                 "N 1817296
             lc_qualification       TYPE string VALUE 'MAIN_3',                 "N 1817296
             lc_assign              TYPE string VALUE 'MAIN_4',                 "N 1817296
             lc_activity            TYPE string VALUE 'MAIN_5',                 "N 1817296
             lc_notes               TYPE string VALUE 'MAIN_6',                 "N 1817296
             lc_add_det             TYPE string VALUE 'MAIN_7'.                 "N 1817296
  CONSTANTS: lc_param_candid        TYPE string VALUE 'CAND_HROBJECTID',
             lc_param_tabnr         TYPE string VALUE 'TABNR',
             lc_param_reqid         TYPE string VALUE 'REQ_HROBJECTID',
             lc_param_cdcy          TYPE string VALUE 'CDCY_HROBJECTID',
             lc_param_display_mode  TYPE string VALUE 'DISPLAY_MODE',
             lc_application_maint   TYPE rcf_wdui_name VALUE 'ERC_A_CAND_OVERVIEW',
             lc_application_display TYPE rcf_wdui_name VALUE 'ERC_A_CAND_OVERVIEW_DISPLAY'.

  lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
  lo_cnr ?= wd_this->go_fpm->get_service( cl_fpm_service_manager=>gc_key_cnr_oif ).
  wd_this->go_fpm_parameter = wd_this->go_fpm->mo_app_parameter.

* lock of candidate profile maintenance -> display mode (via application configuration)
  IF wd_this->gs_hrobject IS NOT INITIAL.
    wd_this->enqueue_candidate( ).
  ENDIF.

* get the current state of web dynpro configuration
  io_oif->get_current_state( IMPORTING es_current_state = ls_current_state ).

* with FPM_START event Read the Parameters, Check authorizations, and Set Values in Shared Context.
  IF io_oif->mo_event->mv_event_id = 'FPM_START'.
*   Read parameters
    CALL METHOD wd_this->go_fpm_parameter->get_value
      EXPORTING
        iv_key   = 'PARAM'
      IMPORTING
        ev_value = lv_param_value.

    IF lv_param_value IS NOT INITIAL. " Cand Overview - Search/Cand_Selection Integration
*     Decode the parameters
      CALL METHOD cl_http_utility=>if_http_utility~string_to_fields
        EXPORTING
          string = lv_param_value
          encode = 1
        RECEIVING
          fields = lt_field.

      READ TABLE lt_field INTO ls_field WITH KEY name = lc_param_candid.
      IF sy-subrc EQ 0.
        lv_value = ls_field-value.
        ls_cand_hrobject-otype = 'NA'.
        ls_cand_hrobject-objid = ls_field-value.
      ENDIF.

      READ TABLE lt_field INTO ls_field WITH KEY name = lc_param_tabnr.
      IF sy-subrc EQ 0.
        lv_tabno = ls_field-value.
      ENDIF.

      READ TABLE lt_field INTO ls_field WITH KEY name = lc_param_reqid.
      IF sy-subrc EQ 0.
        lv_req_hrobject_id = ls_field-value.
      ENDIF.

      READ TABLE lt_field INTO ls_field WITH KEY name = lc_param_cdcy.
      IF sy-subrc EQ 0.
        lv_cdcy_hrobject_id = ls_field-value.
      ENDIF.

      READ TABLE lt_field INTO ls_field WITH KEY name = lc_param_display_mode.
      IF sy-subrc EQ 0.
        lv_display_mode = ls_field-value.
      ENDIF.

      APPEND ls_cand_hrobject TO lt_candidates.

      CALL METHOD wd_assist->is_blocked
       EXPORTING
         pt_candidates = lt_candidates
       IMPORTING
         pt_excl_candidates = lt_excl_cand.

      READ TABLE lt_excl_cand INDEX 1 INTO ls_excl_cand.
      IF ( sy-subrc EQ 0 ) AND
        ( ls_cand_hrobject-objid EQ ls_excl_cand-objid ).
       lv_edit_allowed = abap_false.
      ELSE.
       lv_edit_allowed = abap_true.
      ENDIF.

    ELSE. " SAP test setup -- Test tool: WD application 'zstart_component_new' in Dev. System.

      CALL METHOD wd_this->go_fpm_parameter->get_value
        EXPORTING
          iv_key   = lc_param_tabnr
        IMPORTING
          ev_value = lv_tabno.

      CALL METHOD wd_this->go_fpm_parameter->get_value
        EXPORTING
          iv_key   = lc_param_candid
        IMPORTING
          ev_value = lv_value.
      CALL METHOD wd_this->go_fpm_parameter->get_value
        EXPORTING
          iv_key   = lc_param_reqid
        IMPORTING
          ev_value = lv_req_hrobject_id.
      CALL METHOD wd_this->go_fpm_parameter->get_value
        EXPORTING
          iv_key   = lc_param_cdcy
        IMPORTING
          ev_value = lv_cdcy_hrobject_id.
      CALL METHOD wd_this->go_fpm_parameter->get_value
        EXPORTING
          iv_key   = lc_param_display_mode
        IMPORTING
          ev_value = lv_display_mode.

    ENDIF. " Param_Value is not initial.

    IF lv_display_mode EQ abap_true.
*     Check if user has authorization to run the application
      CALL METHOD cl_hrrcf_wdui_authorization=>check_authorization
        EXPORTING
          iv_wdui_name  = lc_application_display
          iv_variant_id = ls_current_state-variant
          io_fpm_oif    = io_oif
        RECEIVING
          rv_failed     = lv_authorization_failed.

      IF lv_authorization_failed EQ abap_true.
        RETURN.
      ENDIF.
    ELSE.  " Maintenance Mode:
*     Check if user has authorization to run the application
      CALL METHOD cl_hrrcf_wdui_authorization=>check_authorization
        EXPORTING
          iv_wdui_name  = lc_application_maint
          iv_variant_id = ls_current_state-variant
          io_fpm_oif    = io_oif
        RECEIVING
          rv_failed     = lv_authorization_failed.

      IF lv_authorization_failed EQ abap_true.
        RETURN.
      ENDIF.

*     Check if user has Authorization to Maintain Candidate Profile:
      CALL METHOD cl_hrrcf_wdui_authorization=>check_auth_candprofile_maint
        RECEIVING
          rv_failed = lv_authorization_failed.

      IF lv_authorization_failed EQ abap_true.
        CALL METHOD cl_hrrcf_error_ui=>raise_not_authorized
          EXPORTING
            iv_variant_id = ls_current_state-variant
            io_fpm_oif    = io_oif.
        RETURN.
      ENDIF.  "lv_authorization_failed
    ENDIF.   "display_Mode EQ true.

*   Get plan variant
    lv_plvar = wd_assist->get_plvar( ).

*   Set Requisition HRObject in a Global Attribute
    wd_this->gs_req_hrobject-plvar = lv_plvar.
    wd_this->gs_req_hrobject-otype = 'NB'.
    wd_this->gs_req_hrobject-objid = lv_req_hrobject_id.
*   Candidate HR Object:
    wd_this->gs_hrobject-plvar = lv_plvar.
    wd_this->gs_hrobject-otype = 'NA'.
    wd_this->gs_hrobject-objid = lv_value.
*   Set Candidacy HRObject in a Global Attribute
    wd_this->gs_cdcy_hrobject-plvar = lv_plvar.
    wd_this->gs_cdcy_hrobject-otype = 'NE'.
    wd_this->gs_cdcy_hrobject-objid = lv_cdcy_hrobject_id.

*   Set Values in Shared Context:
    lo_nd_shared_context->set_attribute(
       EXPORTING
         name =  `HROBJECT`
         value = wd_this->gs_hrobject ). "set the HRobject to global attribute to use in other methods
    lo_nd_shared_context->set_attribute(
        EXPORTING
          name =  `TEMPLATE_HROBJECT`
          value = wd_this->gs_req_hrobject ).
    lo_nd_shared_context->set_attribute(
        EXPORTING
           name =  `APPLICATION`
           value = wd_this->gs_cdcy_hrobject-objid ).
    lo_nd_shared_context->set_attribute(
        EXPORTING
          name =  `SUBTYPE`
          value = '0001' ).
    lo_nd_shared_context->set_attribute(
        EXPORTING
          name =  `DISPLAY_MODE`
          value = lv_display_mode ).

    lo_nd_shared_context->set_attribute(
        EXPORTING
          name =  `EDIT_ALLOWED`
          value =  lv_edit_allowed ).

*   In Candidate Scenarios we need to check for HRQUA Switch.
    CALL METHOD wd_assist->is_hr_qualification_supported
      IMPORTING
        ev_supported = lv_hrqua_supported.
*   This shared context attribute will be used in Qualifications(Re-Usable) Component
    lo_nd_shared_context->set_attribute(
       EXPORTING
         name =  `USE_HR_QUALIFICATIONS`
         value = lv_hrqua_supported ).

* Lock of candidate profile maintenance -> Display mode (via application configuration)
  ENDIF.   "Event_id EQ 'FPM_START'.

  IF wd_this->gv_first_time = ' '. "execute this only if it is for the first time.

    CASE lv_tabno.  "check the tab number passed and pass the value for parameter from the constants declared
      WHEN 1.
        ls_parameter-value = lc_data_overview.
      WHEN 2.
        ls_parameter-value = lc_edu_exp.
      WHEN 3.
        ls_parameter-value = lc_qualification.
      WHEN 4.
        ls_parameter-value = lc_assign.
      WHEN 5.
        ls_parameter-value = lc_activity.
      WHEN 6.
        ls_parameter-value = lc_notes.
      WHEN 7.
        IF lv_req_hrobject_id IS NOT INITIAL. "if its in requisition context
          ls_parameter-value = lc_add_det.
        ELSEIF lv_req_hrobject_id IS INITIAL. "if its in search context
          ls_parameter-value = lc_data_overview.
        ENDIF.
      WHEN OTHERS. "by default the first tab is selected
        ls_parameter-value = lc_data_overview.
    ENDCASE.

    ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
    APPEND ls_parameter TO lt_parameter.
*   Raise an event View switch
    lo_fpm_parameter = cl_fpm_parameter=>create_by_lpparam( lt_parameter ).
    CREATE OBJECT lo_fpm_event
      EXPORTING
        iv_event_id      = if_fpm_constants=>gc_event-view_switch
        iv_is_validating = abap_false
        io_event_data    = lo_fpm_parameter.
    io_oif->mo_event = lo_fpm_event.

*   Rename assignments and notes tab when page loads
    CALL METHOD wd_assist->get_cand_assignments
      EXPORTING
        is_cand_hrobject = wd_this->gs_hrobject
        is_req_hrobject  = wd_this->gs_req_hrobject
        iv_overview      = 'X'
      IMPORTING
        et_assignments   = lt_assignments
        ev_assignments_count  = wd_this->gv_assignments_count
        es_appl_hrobject      = wd_this->gs_appl_hrobject
        et_message            = lt_messages.

    wd_this->gt_assignments = lt_assignments.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

**   get application hrobject    "this is already set above
*    READ TABLE lt_assignments INTO ls_assignments WITH KEY req_hrobject = wd_this->gs_req_hrobject.
*    IF sy-subrc = 0 AND ls_assignments-appl_hrobject IS NOT INITIAL.
*      wd_this->gs_appl_hrobject = ls_assignments-appl_hrobject.
*    ENDIF.

*   distinguish between button or button choice, depending on the context (search or requisition context)
*   if it's in requisition context, set variant 1 and show button choice with the following data overviews
*   1. candidate profile, 2. candidate assignments, 3. application (in case there is one)
    IF lv_req_hrobject_id IS NOT INITIAL.
      TRY.
          lv_variant_id = 'VARIANT_1'.
          CALL METHOD io_oif->set_variant
            EXPORTING
              iv_variant_id = lv_variant_id.
          wd_this->build_header( ). "add data to idr
          wd_this->build_app_title( ). "add title to application
        CATCH  cx_fpm_floorplan.                        "#EC NO_HANDLER
*       No Handler required.
      ENDTRY.

*     fill table with entries for button choice with different data overviews
      ls_menu_action_items-text        = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/DATAOVERVIEW_CAND' ).
      ls_menu_action_items-on_action   = 'PRINT_CAND'.
      ls_menu_action_items-enabled     = abap_true.
      APPEND ls_menu_action_items TO lt_menu_action_items.

      ls_menu_action_items-text        = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/DATAOVERVIEW_CDCY' ).
      ls_menu_action_items-on_action   = 'PRINT_CDCY'.
      ls_menu_action_items-enabled     = abap_true.
      APPEND ls_menu_action_items TO lt_menu_action_items.

*     Display button-choice entry for application data overview only in case an application is available
      IF wd_this->gs_appl_hrobject IS NOT INITIAL.
        ls_menu_action_items-text      = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/DATAOVERVIEW_APPL' ).
        ls_menu_action_items-on_action = 'PRINT_APPL'.
        ls_menu_action_items-enabled   = abap_true.
        APPEND ls_menu_action_items TO lt_menu_action_items.
      ENDIF.

*     set button choice to visible; don't display button
      CALL METHOD lo_cnr->define_button_choice
        EXPORTING
          iv_function          = if_fpm_constants=>gc_button_choice-other_function
          iv_element_id        = 'PRINT_CAND_CDCY'
          iv_enabled           = abap_true
          iv_visibility        = cl_wd_uielement=>e_visible-visible
          it_menu_action_items = lt_menu_action_items.
*     set button 'Print' to invisible
      CALL METHOD lo_cnr->define_button
        EXPORTING
          iv_function   = if_fpm_constants=>gc_button-other_function
          iv_element_id = 'PRINT_CAND'
          iv_enabled    = abap_false
          iv_visibility = cl_wd_uielement=>e_visible-none.

*   if it's in search context, set variant 2 and display button with "print candidate overview" only (no button choice)
    ELSEIF lv_req_hrobject_id IS INITIAL.
      TRY.
          lv_variant_id = 'VARIANT_2'.
          CALL METHOD io_oif->set_variant
            EXPORTING
              iv_variant_id = lv_variant_id.
          TRY.
              wd_this->go_fpm_idr->set_ticket_visibility( ' ' ). "hide the idr data
            CATCH cx_fpm_idr.                           "#EC NO_HANDLER
*           No Handler required.
          ENDTRY.
          wd_this->build_app_title( ). "add title to application
        CATCH  cx_fpm_floorplan.                        "#EC NO_HANDLER
*       No Handler required.
      ENDTRY.
    ENDIF.

    CALL METHOD wd_assist->get_candidate_notes
      EXPORTING
        is_cand_hrobject = wd_this->gs_hrobject
      IMPORTING
        et_notes         = lt_notes
        et_message       = lt_messages.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

*    DESCRIBE TABLE lt_assignments LINES lv_lines.
    lv_lines = wd_this->gv_assignments_count.
    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/ASSIGNMENT' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
    TRY.
*       Rename Assignments main view
        CALL METHOD io_oif->rename_mainview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_4'                                           "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

    CLEAR lv_lines.
    DESCRIBE TABLE lt_notes LINES lv_lines.
    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NOTE_SH' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
    TRY.
*       Rename Notes main view
        CALL METHOD io_oif->rename_mainview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_6'                                           "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

  ENDIF.  "gv_first_time = ' '

* when the 2nd and 5th tab are clicked by default then the first sub view is selected
  IF io_oif->mo_event->mv_event_id EQ 'FPM_VIEW_SWITCH' AND cl_hrrcf_m_cand_overview_ui=>gv_detail_link = ' '.
    TRY.
        wd_this->go_fpm_parameter = io_oif->mo_event->mo_event_data.
        CALL METHOD wd_this->go_fpm_parameter->get_value
          EXPORTING
            iv_key   = 'OIF_VIEW_ID'
          IMPORTING
            ev_value = lv_fpm_value.
      CATCH cx_fpm_floorplan.                           "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

    wd_this->build_app_title( ).                                                          "N 1747764

*   if the current state of the main view is not the 2nd or 5th then set first subview as default
    IF ls_current_state-mainview NE 'MAIN_2'.                                   "N 1817296
      IF lv_fpm_value = 'MAIN_2'.                                               "N 1817296
        TRY.
            CALL METHOD io_oif->set_selected_subview
              EXPORTING
                iv_subview_id = 'SUB_1'.                                        "N 1817296
          CATCH  cx_fpm_floorplan.                      "#EC NO_HANDLER
*       No Handler required.
        ENDTRY.
      ENDIF.
    ENDIF.
    IF ls_current_state-mainview NE 'MAIN_5'.                                   "N 1817296
      IF lv_fpm_value = 'MAIN_5'.                                               "N 1817296
        TRY.
            CALL METHOD io_oif->set_selected_subview
              EXPORTING
                iv_subview_id = 'SUB_1'.                                        "N 1817296
          CATCH  cx_fpm_floorplan.                      "#EC NO_HANDLER
*       No Handler required.
        ENDTRY.
      ENDIF.
    ENDIF.
  ENDIF.

* navigate to different tabs
  IF wd_assist->gv_detail_link = 'X'. "if any of the details link is clicked in the overview tab.
    CASE io_oif->mo_event->mv_event_id. "check the event id and navigate to that particular tab.
      WHEN 'EDU'.
        lv_detail_link = 'edu'. "set the value which will be used to check to go to subviews
        ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
        ls_parameter-value = lc_edu_exp.
        APPEND ls_parameter TO lt_parameter.

      WHEN 'QUAL'.
        ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
        ls_parameter-value = lc_qualification.
        APPEND ls_parameter TO lt_parameter.

      WHEN 'ATTACH'.
        lv_detail_link = 'attach'."set the value which will be used to check to go to subviews
        ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
        ls_parameter-value = lc_edu_exp.
        APPEND ls_parameter TO lt_parameter.

      WHEN 'ASSIGN'.
        ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
        ls_parameter-value = lc_assign.
        APPEND ls_parameter TO lt_parameter.

      WHEN 'EXP'.
        lv_detail_link = 'exp'. "set the value which will be used to check to go to subviews
        ls_parameter-key = if_fpm_constants=>gc_event_param-view_id.
        ls_parameter-value = lc_edu_exp.
        APPEND ls_parameter TO lt_parameter.
    ENDCASE.

    lo_fpm_parameter = cl_fpm_parameter=>create_by_lpparam( lt_parameter ).
    CREATE OBJECT lo_fpm_event
      EXPORTING
        iv_event_id      = if_fpm_constants=>gc_event-view_switch
        iv_is_validating = abap_false
        io_event_data    = lo_fpm_parameter.

    io_oif->mo_event = lo_fpm_event.

    IF ls_parameter-value = 'MAIN_2'.                                           "N 1817296
      TRY.
          IF lv_detail_link = 'edu'. "check the value and go to that particular subview in edu main tab
            CALL METHOD io_oif->set_selected_subview
              EXPORTING
                iv_subview_id = 'SUB_1'.                                        "N 1817296

          ELSEIF lv_detail_link = 'exp'.
            CALL METHOD io_oif->set_selected_subview
              EXPORTING
                iv_subview_id = 'SUB_2'.                                        "N 1817296

          ELSEIF lv_detail_link = 'attach'.
            CALL METHOD io_oif->set_selected_subview
              EXPORTING
                iv_subview_id = 'SUB_3'.                                        "N 1817296
          ENDIF.
        CATCH cx_fpm_floorplan.                         "#EC NO_HANDLER
*       No Handler required.
      ENDTRY.
    ENDIF.

    wd_assist->gv_detail_link = ' '.
  ENDIF.

* rename tab headers when first_time = ' '
* first time = ' ' means here: first time (!)
  IF wd_this->gv_first_time = ' '.
* rename tab headers for education
    CALL METHOD wd_assist->read_cand_education
      EXPORTING
        is_cand_hrobject     = wd_this->gs_hrobject
      IMPORTING
        et_education_records = lt_educations
        et_messages          = lt_messages.
    DESCRIBE TABLE lt_educations LINES lv_lines.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    CLEAR: lv_subname, lv_rename.

    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_EDUCATION' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

    TRY.
        CALL METHOD io_oif->rename_subview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_2'                                           "N 1817296
            iv_subview_id  = 'SUB_1'                                            "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

* rename tab header for work experience
    CALL METHOD wd_assist->read_cand_work_exp
      EXPORTING
        is_cand_hrobject    = wd_this->gs_hrobject
      IMPORTING
        et_work_exp_records = lt_work_exp
        et_messages         = lt_messages.
    DESCRIBE TABLE lt_work_exp LINES lv_lines.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    CLEAR: lv_subname, lv_rename.
    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/WORK_EXP' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

    TRY.
        CALL METHOD io_oif->rename_subview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_2'                                           "N 1817296
            iv_subview_id  = 'SUB_2'                                            "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

* tab header for attachments
    CALL METHOD wd_assist->read_cand_attachments
      EXPORTING
        is_cand_hrobject = wd_this->gs_hrobject
      IMPORTING
        et_attachments   = lt_attachments
        et_messages      = lt_messages.
    DESCRIBE TABLE lt_attachments LINES lv_lines.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    CLEAR: lv_subname, lv_rename.

    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/ATTACHMENTS' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

    TRY.
        CALL METHOD io_oif->rename_subview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_2'                                           "N 1817296
            iv_subview_id  = 'SUB_3'                                            "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

* tab header for notes
    CLEAR lt_messages.
    CALL METHOD wd_assist->get_candidate_notes
      EXPORTING
        is_cand_hrobject = wd_this->gs_hrobject
      IMPORTING
        et_notes         = lt_notes
        et_message       = lt_messages.
    DESCRIBE TABLE lt_notes LINES lv_lines.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NOTE_SH' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
    TRY.
*       Rename Notes main view
        CALL METHOD io_oif->rename_mainview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_6'                                           "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.

*   tab header for qualifications
    CLEAR lt_messages.
    CALL METHOD wd_assist->read_qualifications
      EXPORTING
        is_hrobject       = wd_this->gs_hrobject
      IMPORTING
        et_qualifications = lt_qualifications
        et_messages       = lt_messages.
    lt_qualifications_1 = lt_qualifications.
    LOOP AT lt_qualifications_1 INTO ls_qualifications.  "PVA1860755 Start
      IF ( ls_qualifications-group_text IS INITIAL ) AND
                ( ls_qualifications-quali_text IS INITIAL ).
*     don't show qualifications that don't exist anymore
      DELETE lt_qualifications WHERE quali_type = ls_qualifications-quali_type AND
                                        quali_id   = ls_qualifications-quali_id.
      ENDIF.
    ENDLOOP.                                             "PVA1860755 End
    DESCRIBE TABLE lt_qualifications LINES lv_lines.
    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    CLEAR lt_messages.

    lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_QUALIFICATIONS' ).
    CONCATENATE '(' lv_lines ')' INTO lv_lines.
    CONDENSE lv_lines NO-GAPS.
    CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
    TRY.
*       Rename Notes main view
        CALL METHOD io_oif->rename_mainview
          EXPORTING
            iv_variant_id  = lv_variant_id
            iv_mainview_id = 'MAIN_3'                                           "N 1817296
            iv_new_name    = lv_rename.
      CATCH cx_fpm_floorplan .                          "#EC NO_HANDLER
*     No Handler required.
    ENDTRY.
    wd_this->gv_first_time = 'X'.
  ENDIF.

*   rename tab header when data have been changed on UI (but not yet saved into DB)
  IF io_oif->mo_event->mv_event_id = 'ERC_UPDATE_NUMBER'.
    io_oif->mo_event->mo_event_data->get_keys( RECEIVING rt_keys = lt_keys ).
* tab header for education
    READ TABLE lt_keys WITH KEY table_line = 'NUM_EDUCATION' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      io_oif->mo_event->mo_event_data->get_value(
          EXPORTING iv_key = 'NUM_EDUCATION'
          IMPORTING ev_value = lv_num_edu ).
      lv_lines = lv_num_edu.
      lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_EDUCATION' ).
      CONCATENATE '(' lv_lines ')' INTO lv_lines.
      CONDENSE lv_lines NO-GAPS.
      CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

      TRY.
          CALL METHOD io_oif->rename_subview
            EXPORTING
              iv_variant_id  = lv_variant_id
              iv_mainview_id = 'MAIN_2'                                         "N 1817296
              iv_subview_id  = 'SUB_1'                                          "N 1817296
              iv_new_name    = lv_rename.
        CATCH cx_fpm_floorplan .                        "#EC NO_HANDLER
*     No Handler required.
      ENDTRY.

    ENDIF.

* tab header for work experience
    READ TABLE lt_keys WITH KEY table_line = 'NUM_WORK_EXP' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      io_oif->mo_event->mo_event_data->get_value(
          EXPORTING iv_key = 'NUM_WORK_EXP'
          IMPORTING ev_value = lv_num_work_exp ).
      lv_lines = lv_num_work_exp.
      lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/WORK_EXP' ).
      CONCATENATE '(' lv_lines ')' INTO lv_lines.
      CONDENSE lv_lines NO-GAPS.
      CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

      TRY.
          CALL METHOD io_oif->rename_subview
            EXPORTING
              iv_variant_id  = lv_variant_id
              iv_mainview_id = 'MAIN_2'                                         "N 1817296
              iv_subview_id  = 'SUB_2'                                          "N 1817296
              iv_new_name    = lv_rename.
        CATCH cx_fpm_floorplan .                        "#EC NO_HANDLER
*     No Handler required.
      ENDTRY.
    ENDIF.

* tab header for attachments
    READ TABLE lt_keys WITH KEY table_line = 'NUM_ATTACHMENTS' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      io_oif->mo_event->mo_event_data->get_value(
          EXPORTING iv_key = 'NUM_ATTACHMENTS'
          IMPORTING ev_value = lv_num_attachments ).
      lv_lines = lv_num_attachments.
      lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/ATTACHMENTS' ).
      CONCATENATE '(' lv_lines ')' INTO lv_lines.
      CONDENSE lv_lines NO-GAPS.
      CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.

      TRY.
          CALL METHOD io_oif->rename_subview
            EXPORTING
              iv_variant_id  = lv_variant_id
              iv_mainview_id = 'MAIN_2'                                         "N 1817296
              iv_subview_id  = 'SUB_3'                                          "N 1817296
              iv_new_name    = lv_rename.
        CATCH cx_fpm_floorplan .                        "#EC NO_HANDLER
*     No Handler required.
      ENDTRY.
    ENDIF.
* tab header for notes
    READ TABLE lt_keys WITH KEY table_line = 'NUM_NOTES' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      io_oif->mo_event->mo_event_data->get_value(
          EXPORTING iv_key = 'NUM_NOTES'
          IMPORTING ev_value = lv_num_notes ).
      lv_lines = lv_num_notes.
      lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NOTE_SH' ).
      CONCATENATE '(' lv_lines ')' INTO lv_lines.
      CONDENSE lv_lines NO-GAPS.
      CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
      TRY.
*       Rename Notes main view
          CALL METHOD io_oif->rename_mainview
            EXPORTING
              iv_variant_id  = lv_variant_id
              iv_mainview_id = 'MAIN_6'                                         "N 1817296
              iv_new_name    = lv_rename.
        CATCH cx_fpm_floorplan .                        "#EC NO_HANDLER
*     No Handler required.
      ENDTRY.
    ENDIF.
* tab header for qualifications
    READ TABLE lt_keys WITH KEY table_line = 'NUM_QUALI' TRANSPORTING NO FIELDS.
    IF sy-subrc = 0.
      io_oif->mo_event->mo_event_data->get_value(
          EXPORTING iv_key = 'NUM_QUALI'
          IMPORTING ev_value = lv_num_quali ).
      lv_lines = lv_num_quali.
      lv_subname = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CAND_QUALIFICATIONS' ).
      CONCATENATE '(' lv_lines ')' INTO lv_lines.
      CONDENSE lv_lines NO-GAPS.
      CONCATENATE lv_subname lv_lines INTO lv_rename SEPARATED BY space.
      TRY.
*       Rename Notes main view
          CALL METHOD io_oif->rename_mainview
            EXPORTING
              iv_variant_id  = lv_variant_id
              iv_mainview_id = 'MAIN_3'                                         "N 1817296
              iv_new_name    = lv_rename.
        CATCH cx_fpm_floorplan .                        "#EC NO_HANDLER
*     No Handler required.
      ENDTRY.
    ENDIF.
  ENDIF.

ENDMETHOD.

METHOD process_before_output .
  DATA lo_nd_shared_context TYPE REF TO if_wd_context_node.
  DATA lo_el_shared_context TYPE REF TO if_wd_context_element.
  DATA ls_shared_context TYPE wd_this->element_shared_context.
  DATA lv_scenario TYPE wd_this->element_shared_context-scenario.

  IF ( wd_assist->read_switch_attie( ) EQ 'X' ).
   lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
   lo_el_shared_context = lo_nd_shared_context->get_element( ).

   lv_scenario = 'CAND_PROFILE'.

* set single attribute
   lo_el_shared_context->set_attribute(
    name =  `SCENARIO`
    value = lv_scenario ).
  ENDIF.

 CLEAR wd_assist->GV_PRINT_PREVIEW_CALLED.
ENDMETHOD.

METHOD process_event.

* handles the display of candidate data overview and candidacy data overview

  DATA lo_api_component TYPE REF TO if_wd_component.

* call BADI which evaluates on which event a POWL refresh shall be triggered
  wd_this->trigger_powl_refresh( io_event->mv_event_id ).

* get reference to the controller of the current component
  lo_api_component = wd_this->wd_get_api( ).

  CASE io_event->mv_event_id.
    WHEN 'PRINT_CAND' OR 'PRINT'.
      IF wd_assist->gv_print_preview_called IS INITIAL AND wd_this->gs_hrobject IS NOT INITIAL.  "PVA
*     display candidate data overview in PDF(Print View).
        CALL METHOD cl_hrrcf_navigation_ui=>navigate_to_cand_dovr
          EXPORTING
            is_cand_object  = wd_this->gs_hrobject
            io_wd_component = lo_api_component.
        wd_assist->gv_print_preview_called = 'X'.
      ENDIF.

    WHEN 'PRINT_CDCY'.
      IF wd_assist->gv_print_preview_called IS INITIAL.  "PVA1846093
*     display candidacy data overview in PDF(Print View).
        CALL METHOD cl_hrrcf_navigation_ui=>navigate_to_cdcy_dovr
          EXPORTING
            is_cdcy_object  = wd_this->gs_cdcy_hrobject
            io_wd_component = lo_api_component.
        wd_assist->gv_print_preview_called = 'X'.
      ENDIF.

    WHEN 'PRINT_APPL'.
      IF wd_assist->gv_print_preview_called IS INITIAL. "PVA1846093
*     display application data overview in PDF (Print View).
        CALL METHOD cl_hrrcf_navigation_ui=>navigate_to_appl_dovr
          EXPORTING
            is_appl_object  = wd_this->gs_appl_hrobject
            io_wd_component = lo_api_component.
        wd_assist->gv_print_preview_called = 'X'.
      ENDIF.

  ENDCASE.

ENDMETHOD.

method read_cand_internet_references .

  data: lo_controller                 type ref to if_wd_controller,
        lo_nd_shared_context          type ref to if_wd_context_node,
        lo_nd_rcf_ireferences         type ref to if_wd_context_node,
        lt_internet_references        type rcf_t_cand_internet_ref_pl,
        lt_ireferences                type wd_this->elements_rcf_ireferences,
        lt_messages                   type bapirettab,
        ls_internet_reference         type rcf_s_cand_internet_ref_pl,
        ls_ireference                 type  wd_this->element_rcf_ireferences,
        ls_hrobject                   type wd_this->element_shared_context-hrobject.

  lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
  lo_nd_shared_context->get_attribute(
    exporting
      name =  `HROBJECT`
    importing
      value = ls_hrobject ).

  wd_assist->read_cand_internet_references(
    exporting
      is_cand_hrobject       = ls_hrobject
    importing
      et_internet_references = lt_internet_references
      et_messages            = lt_messages ).

  if lt_messages is not initial.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
    return.
  endif.

* convert the list of internet references for UI representation
  loop at lt_internet_references into ls_internet_reference.
    clear ls_ireference.
    move-corresponding ls_internet_reference to ls_ireference.
    if ls_ireference-internet_ref_url_txt is not initial.
      ls_ireference-test_link_visible = cl_wd_uielement=>e_visible-visible.
    else.
      ls_ireference-test_link_visible = cl_wd_uielement=>e_visible-none.
      ls_ireference-internet_ref_url_txt = wd_assist->gc_default_link.
    endif.
    append ls_ireference to lt_ireferences.
  endloop.

* add a default entry if internet references do not exist yet
  if lt_ireferences is initial.
    ls_ireference-url_category = 0.
    ls_ireference-test_link_visible = cl_wd_uielement=>e_visible-none.
    ls_ireference-internet_ref_url_txt = wd_assist->gc_default_link.
    append ls_ireference to lt_ireferences.
  endif.

  lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
  lo_nd_rcf_ireferences->bind_table(
    exporting
      new_items            = lt_ireferences
      set_initial_elements = abap_true ).

endmethod.

METHOD save.

  DATA lo_nd_rcf_intrest_grp     TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_intrest_grp     TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_prefernces      TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_industry        TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_functional_area TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_hierarchy_level TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_personel_data   TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_pref_contact    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail            TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_contact_no      TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_contact_no      TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_communication   TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication   TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_des_work_loc    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_ireferences     TYPE REF TO if_wd_context_node.
  DATA lo_controller             TYPE REF TO if_wd_controller.

  DATA lt_desired_job            TYPE rcf_t_cand_desired_job_pl.
  DATA ls_desired_job            TYPE rcf_s_cand_desired_job_pl.
  DATA lt_industry               TYPE wd_this->elements_rcf_industry.
  DATA ls_industry               TYPE wd_this->element_rcf_industry.
  DATA lt_functional_area        TYPE wd_this->elements_rcf_functional_area.
  DATA ls_functional_area        TYPE wd_this->element_rcf_functional_area.
  DATA lt_hierarchy_level        TYPE wd_this->elements_rcf_hierarchy_level.
  DATA ls_hierarchy_level        TYPE wd_this->element_rcf_hierarchy_level.
  DATA lt_messages               TYPE bapirettab.
  DATA lt_elem_contact_no        TYPE wdr_context_element_set.
  DATA ls_rcf_contact_no         TYPE wd_this->element_rcf_contact_no.
  DATA lt_phone_data             TYPE rcf_t_cand_commn_tele_pl.
  DATA ls_phone_data             TYPE rcf_s_cand_commn_tele_pl.
  DATA lt_elem_address           TYPE wdr_context_element_set.
  DATA ls_rcf_communication      TYPE wd_this->element_rcf_communication.
  DATA lt_address_data           TYPE rcf_t_cand_commn_address_pl.
  DATA ls_address_data           TYPE rcf_s_cand_commn_address_pl.
  DATA lt_rcf_des_work_loc       TYPE wd_this->elements_rcf_des_work_loc.
  DATA ls_rcf_des_work_loc       TYPE wd_this->element_rcf_des_work_loc.
  DATA lt_work_loc               TYPE rcf_t_cand_location_pl.
  DATA ls_work_loc               TYPE rcf_s_cand_location_pl.
  DATA ls_rcf_prefernces         TYPE wd_this->element_rcf_prefernces.
  DATA ls_rcf_personel_data      TYPE wd_this->element_rcf_personel_data.
  DATA lt_rcf_ireferences        TYPE wd_this->elements_rcf_ireferences.
  DATA ls_rcf_ireference         TYPE wd_this->element_rcf_ireferences.
  DATA lt_internet_references    TYPE rcf_t_cand_internet_ref_pl.
  DATA ls_internet_reference     TYPE rcf_s_cand_internet_ref_pl.

  DATA lv_subrc_industry         TYPE sysubrc.
  DATA lv_subrc_functional_area  TYPE sysubrc.
  DATA lv_subrc_hierarchy_level  TYPE sysubrc.
  DATA lv_target_grp             TYPE rcf_target_grp.
  DATA lv_tgroup                 TYPE wd_this->element_rcf_intrest_grp-tgroup.
  DATA lv_prfd_cnt_add           TYPE wd_this->element_rcf_pref_contact-prfd_cnt_add.
  DATA lv_prfd_cnt_tel           TYPE wd_this->element_rcf_pref_contact-prfd_cnt_tel.
  DATA lv_e_mail                 TYPE wd_this->element_rcf_mail-e_mail.
  DATA lv_cand_name              TYPE bu_name1tx.

  DATA lt_table                  TYPE rcf_t_vh_pl.          "N 1842092
  DATA ls_table                  TYPE rcf_s_vh_pl.          "N 1842092
  DATA lo_nd_rcf_mail_bus_pvt    TYPE REF TO if_wd_context_node.

  DATA lo_el_rcf_mail_bus_pvt    TYPE REF TO if_wd_context_element.
  DATA ls_rcf_mail_bus_pvt       TYPE wd_this->element_rcf_mail_bus_pvt.
  DATA lv_pvt_email              TYPE AD_SMTPADR.
  DATA lv_choice                 TYPE string.
  DATA lo_message_manager        TYPE REF TO if_wd_message_manager.
  DATA lo_current_controller     TYPE REF TO if_wd_controller.
*  DATA lv_text                   TYPE string.
*  DATA lv_delete_flag            TYPE boole_d.

* Check whether profile maintenance is locked
  CHECK wd_this->gv_locked EQ abap_false.

* Check whether communication data or preferences in profile were changed
  IF wd_this->gv_data_changed EQ abap_true.

* Read Interest Group
    lo_nd_rcf_intrest_grp = wd_context->get_child_node( name = wd_this->wdctx_rcf_intrest_grp ).
    lo_el_rcf_intrest_grp = lo_nd_rcf_intrest_grp->get_element( ).
    lo_el_rcf_intrest_grp->get_attribute(
      EXPORTING
        name =  `TGROUP`
      IMPORTING
        value = lv_tgroup ).

    lv_target_grp = lv_tgroup.

* Read Desired Job:
    lo_nd_rcf_prefernces = wd_context->get_child_node( name = wd_this->wdctx_rcf_prefernces ).
    lo_nd_rcf_prefernces->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_prefernces ).

* get desired industry, functional area, and hierarchy level
    lo_nd_rcf_industry = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_INDUSTRY` ).
    lo_nd_rcf_industry->get_static_attributes_table(
      IMPORTING
        table = lt_industry ).

    lo_nd_rcf_functional_area = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_FUNCTIONAL_AREA` ).
    lo_nd_rcf_functional_area->get_static_attributes_table(
      IMPORTING
       table  = lt_functional_area ).

    lo_nd_rcf_hierarchy_level = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_HIERARCHY_LEVEL` ).
    lo_nd_rcf_hierarchy_level->get_static_attributes_table(
      IMPORTING
        table = lt_hierarchy_level ).

    DO.
      CLEAR: ls_desired_job , ls_industry , ls_functional_area , ls_hierarchy_level.

      ls_desired_job-contract_type = ls_rcf_prefernces-contract_type.
      ls_desired_job-will_to_relocate = ls_rcf_prefernces-will_to_relocate.
      ls_desired_job-travelwilling = ls_rcf_prefernces-travelwilling.
      ls_desired_job-employment_fract = ls_rcf_prefernces-employment_fract.
      ls_desired_job-employment_fract_txt = ls_rcf_prefernces-employment_fract_txt.
      ls_desired_job-contract_txt = ls_rcf_prefernces-contract_txt.
      ls_desired_job-currency = ls_rcf_prefernces-currency.
      ls_desired_job-range_id = ls_rcf_prefernces-range_id.
      ls_desired_job-sal_range_txt = ls_rcf_prefernces-sal_range_txt.
      ls_desired_job-description_txt = ls_rcf_prefernces-description_txt.

      READ TABLE lt_industry INDEX sy-index INTO ls_industry.
      MOVE-CORRESPONDING ls_industry TO ls_desired_job.     "#EC ENHOK
      lv_subrc_industry = sy-subrc.

      READ TABLE lt_functional_area INDEX sy-index INTO ls_functional_area.
      MOVE-CORRESPONDING ls_functional_area TO ls_desired_job. "#EC ENHOK
      lv_subrc_functional_area = sy-subrc.

      READ TABLE lt_hierarchy_level INDEX sy-index INTO ls_hierarchy_level.
      MOVE-CORRESPONDING ls_hierarchy_level TO ls_desired_job. "#EC ENHOK
      lv_subrc_hierarchy_level = sy-subrc.

      IF lv_subrc_industry NE 0 AND
         lv_subrc_functional_area NE 0 AND
         lv_subrc_hierarchy_level NE 0.

        IF lt_desired_job IS INITIAL.
          APPEND ls_desired_job TO lt_desired_job.
        ENDIF.

        EXIT.
      ENDIF.
      APPEND ls_desired_job TO lt_desired_job.

    ENDDO.

* read personal data
    lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
    lo_nd_rcf_personel_data->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_personel_data ).

* Read preferred address and telephone
    lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
    lo_nd_rcf_pref_contact->get_attribute(
      EXPORTING
        name =  `PRFD_CNT_ADD`
      IMPORTING
        value = lv_prfd_cnt_add ).
    lo_nd_rcf_pref_contact->get_attribute(
      EXPORTING
        name =  `PRFD_CNT_TEL`
      IMPORTING
        value = lv_prfd_cnt_tel ).

* Read e-mail:
    lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
    lo_nd_rcf_mail->get_attribute(
      EXPORTING
        name =  `E_MAIL`
      IMPORTING
        value = lv_e_mail ).

* Read Phone Data:
    lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).
    lt_elem_contact_no = lo_nd_rcf_contact_no->get_elements( ).
    LOOP AT lt_elem_contact_no INTO lo_el_rcf_contact_no.
      lo_el_rcf_contact_no->get_static_attributes( IMPORTING static_attributes = ls_rcf_contact_no ).
      MOVE-CORRESPONDING ls_rcf_contact_no TO ls_phone_data. "#EC ENHOK
      APPEND ls_phone_data TO lt_phone_data.
    ENDLOOP.

* Read address data
    lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
    lt_elem_address = lo_nd_rcf_communication->get_elements( ).
    LOOP AT lt_elem_address INTO lo_el_rcf_communication.
      lo_el_rcf_communication->get_static_attributes( IMPORTING static_attributes = ls_rcf_communication ).
      MOVE-CORRESPONDING ls_rcf_communication TO ls_address_data. "#EC ENHOK
      APPEND ls_address_data TO lt_address_data.
    ENDLOOP.

* Read desired work location
    lo_nd_rcf_des_work_loc = wd_context->get_child_node( name = wd_this->wdctx_rcf_des_work_loc ).
    lo_nd_rcf_des_work_loc->get_static_attributes_table( IMPORTING table = lt_rcf_des_work_loc ).
    LOOP AT lt_rcf_des_work_loc INTO ls_rcf_des_work_loc.
      IF ls_rcf_des_work_loc-operation NE ' '.
        MOVE-CORRESPONDING ls_rcf_des_work_loc TO ls_work_loc. "#EC ENHOK
        APPEND ls_work_loc TO lt_work_loc.
      ENDIF.
    ENDLOOP.

    CLEAR ls_rcf_des_work_loc.

    LOOP AT wd_this->gt_work_loc INTO ls_rcf_des_work_loc.
      MOVE-CORRESPONDING ls_rcf_des_work_loc TO ls_work_loc. "#EC ENHOK
      APPEND ls_work_loc TO lt_work_loc.
    ENDLOOP.

* read the internet references
    IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.

      lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
      lo_nd_rcf_ireferences->get_static_attributes_table(
        IMPORTING
          table = lt_rcf_ireferences ).

      LOOP AT lt_rcf_ireferences INTO ls_rcf_ireference.
        CLEAR: ls_internet_reference.
        CONDENSE: ls_rcf_ireference-description_txt,
                  ls_rcf_ireference-internet_ref_url_txt.
        IF ls_rcf_ireference-url_category         IS NOT INITIAL                AND
           ls_rcf_ireference-internet_ref_url_txt IS NOT INITIAL                AND
           ls_rcf_ireference-internet_ref_url_txt NE wd_assist->gc_default_link.
          MOVE-CORRESPONDING ls_rcf_ireference TO ls_internet_reference.
          APPEND ls_internet_reference TO lt_internet_references.
        ENDIF.
      ENDLOOP.

    ENDIF.

* save profile data
    IF ls_rcf_personel_data IS NOT INITIAL.
      CALL METHOD wd_assist->save_profile_data
        EXPORTING
          is_cand_hrobject             = wd_this->gs_hrobject
          iv_interest_group            = lv_target_grp
          it_desired_job               = lt_desired_job
          is_personal_data             = ls_rcf_personel_data
          iv_preferred_phone_channel   = lv_prfd_cnt_tel
          iv_preferred_address_channel = lv_prfd_cnt_add
          iv_email                     = lv_e_mail
          it_phone_data                = lt_phone_data
          it_address_data              = lt_address_data
          it_desired_location          = lt_work_loc
          it_internet_references       = lt_internet_references
        IMPORTING
          et_messages                  = lt_messages.
    ENDIF.



    IF lt_messages IS NOT INITIAL.

      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).

      CLEAR lt_messages.
      wd_this->gv_save_ok = abap_false.
      RETURN.
    ELSE.
      wd_this->gv_save_ok = abap_true.
    ENDIF.

    CLEAR lt_work_loc.

    CALL METHOD cl_hrrcf_cand_overview_pl=>read_cand_preferences
      EXPORTING
        is_cand_hrobject    = wd_this->gs_hrobject
      IMPORTING
        et_desired_location = lt_work_loc.

*   get entries for desired job location
    CALL METHOD wd_assist->get_country_for_des_job_loc      "N 1842092
      IMPORTING                                             "N 1842092
        et_country = lt_table                               "N 1842092
        et_message = lt_messages.                           "N 1842092

    CLEAR: lt_rcf_des_work_loc, ls_rcf_des_work_loc, lt_messages. "N 1842092

    LOOP AT lt_work_loc INTO ls_work_loc.                   "N 1842092
      READ TABLE lt_table INTO ls_table WITH KEY key = ls_work_loc-country. "N 1842092
      IF sy-subrc = 0.                                      "N 1842092
        MOVE-CORRESPONDING ls_work_loc TO ls_rcf_des_work_loc. "#EC ENHOK                    "N 1842092
        APPEND ls_rcf_des_work_loc TO lt_rcf_des_work_loc.  "N 1842092
      ENDIF.                                                "N 1842092
    ENDLOOP.                                                "N 1842092

    lo_nd_rcf_des_work_loc->bind_table( lt_rcf_des_work_loc ). "N 1842092
    wd_this->build_app_title( ).

    CALL METHOD wd_assist->get_candidate_info
      EXPORTING
        is_cand_hrobject = wd_this->gs_hrobject
      IMPORTING
        ev_cand_name     = lv_cand_name
        et_message       = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    CALL METHOD lo_nd_rcf_personel_data->set_attribute
      EXPORTING
        value = lv_cand_name
        name  = 'FULLNAME'.

* read the candidate's internet preferences again
    IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
      wd_this->read_cand_internet_references( ).
    ENDIF.

  ENDIF.

  CALL METHOD cl_hrrcf_simple_main_object=>reset_luw_mode.   "N1805018

* Customer Connect Enhancement to save Private Email & Email Preference of Candidate:
  IF wd_this->mv_pmail = 'X' AND wd_this->mv_email_changed = abap_true.

    lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
    lo_el_rcf_mail_bus_pvt = lo_nd_rcf_mail_bus_pvt->get_element( ).

    lo_el_rcf_mail_bus_pvt->get_attribute(
      EXPORTING
        name =  `PVT_EMAIL`
      IMPORTING
        value = lv_pvt_email ).

    lo_el_rcf_mail_bus_pvt->get_attribute(
      EXPORTING
        name =  `EMAIL_DROP_DOWN`
      IMPORTING
        value = lv_choice ).

    CALL METHOD wd_assist->save_email_data
      EXPORTING
        is_cand_hrobject   = wd_this->gs_hrobject
        iv_pvt_email       = lv_pvt_email
      IMPORTING
        et_messages        = lt_messages
      CHANGING
        cv_selected_choice = lv_choice.

    IF lt_messages IS NOT INITIAL.

      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).

      CLEAR lt_messages.
      wd_this->gv_save_ok = abap_false.
      RETURN.
    ELSE.
      wd_this->gv_save_ok = abap_true.
    ENDIF.

  ENDIF.

ENDMETHOD.

METHOD trigger_powl_refresh .

* This method calls the BAdI HRRCF_POWL_REFRESH from Enhancement Spot
* ES_HRRCF_POWL to get the list of POWL queries to refresh.
* Then we call the portal event manager to trigger the POWL refresh.
*
* We route all FPM events to the BAdI to allow POWL refresh for all possible
* events. Usually a refresh makes only sense for FPM_CLOSE or FPM_SAVE, though.

  DATA lo_powl_badi        TYPE REF TO hrrcf_powl_refresh.
  DATA lo_api_component    TYPE REF TO if_wd_component.
  DATA lo_portal_manager   TYPE REF TO if_wd_portal_integration.
  DATA lt_queries          TYPE        rcf_t_string.
  DATA lv_refresh_current  TYPE        boole_d.
  DATA lv_application      TYPE        string.
  DATA lv_query_string     TYPE        string.

  lv_application = if_ex_hrrcf_powl_refresh=>co_app_candidate_profile.

* Call the BAdI to get the list of queries to refresh and the marker whether to
* refresh the current query.
  GET BADI lo_powl_badi.
  CALL BADI lo_powl_badi->get_queries_to_refresh
    EXPORTING
      iv_application     = lv_application
      iv_event           = iv_event
    CHANGING
      rt_query_names     = lt_queries
      rv_refresh_current = lv_refresh_current.

* Trigger the POWL refresh depending on BAdI return values. First we trigger
* the refresh for the current query (if requested), then we trigger the queries
* from the list returned by the BAdI.
  lo_api_component = wd_this->wd_get_api( ).
  lo_portal_manager = lo_api_component->get_portal_manager( ).

* check whether we run in a portal environment
  IF lo_portal_manager IS NOT BOUND.
    RETURN.
  ENDIF.

* trigger refresh of current query
  IF lv_refresh_current = abap_true.
    CALL METHOD lo_portal_manager->fire
      EXPORTING
        portal_event_namespace = 'com.sap.powl'
        portal_event_name      = 'REFRESH_CURRENT'
        portal_event_parameter = ''
        portal_event_scope     = if_wd_portal_integration=>co_event_scope-current_window_and_parents.
  ENDIF.

* trigger refresh of queries returned by the BAdI
  IF lt_queries IS NOT INITIAL.
    CONCATENATE LINES OF lt_queries INTO lv_query_string SEPARATED BY '&'.
    CALL METHOD lo_portal_manager->fire
      EXPORTING
        portal_event_namespace = 'com.sap.powl'
        portal_event_name      = 'REFRESH_TYPE_BASED'
        portal_event_parameter = lv_query_string
        portal_event_scope     = if_wd_portal_integration=>co_event_scope-current_window_and_parents.
  ENDIF.


ENDMETHOD.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

METHOD on_data_changed .

  wd_this->gv_other_comp_data_changed = abap_true.

ENDMETHOD.

endclass.
 