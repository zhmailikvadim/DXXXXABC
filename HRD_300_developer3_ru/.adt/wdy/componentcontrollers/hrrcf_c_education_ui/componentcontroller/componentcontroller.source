*=====================================================================*
* Intf.: ig_componentcontroller  
* Purp.: programming interface for access of this controller within
*        other controllers of the same component
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <hrrcf_c_education_ui>
* UDate: 20240723 142644
*=====================================================================*
interface ig_componentcontroller.
 
  interfaces: iwci_hrrcf_ci_subcomponent .
  interfaces: iwci_hrrcf_c_education_ui .
  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_buttons type string value `BUTTONS`.
  types:
    begin of Element_buttons,
      ADD_ENABLED  type WDY_BOOLEAN,
      EDIT_ENABLED  type WDY_BOOLEAN,
      DELETE_ENABLED  type WDY_BOOLEAN,
      MODE  type CHAR1,
    end of Element_buttons,  "#EC NEEDED
    Elements_buttons type 
       standard table of Element_buttons
       with default key. "#EC NEEDED
  constants:
    wdctx_candidate type string value `CANDIDATE`.
  types:
    begin of Element_candidate,
      HROBJECT  type HROBJECT,
    end of Element_candidate,  "#EC NEEDED
    Elements_candidate type 
       standard table of Element_candidate
       with default key. "#EC NEEDED
  constants:
    wdctx_education type string value `EDUCATION`.
  types:
    begin of Element_education,
      PLVAR  type RCF_S_MDL_CAND_EDUCATION-PLVAR,
      OTYPE  type RCF_S_MDL_CAND_EDUCATION-OTYPE,
      OBJID  type RCF_S_MDL_CAND_EDUCATION-OBJID,
      INFTY  type RCF_S_MDL_CAND_EDUCATION-INFTY,
      SUBTY  type RCF_S_MDL_CAND_EDUCATION-SUBTY,
      BEGDA  type RCF_S_MDL_CAND_EDUCATION-BEGDA,
      ENDDA  type RCF_S_MDL_CAND_EDUCATION-ENDDA,
      EDUCATION_TYPE  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_TYPE,
      EDUCATION_FIELD  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_FIELD,
      INSTITUTE  type RCF_S_MDL_CAND_EDUCATION-INSTITUTE,
      CITY  type RCF_S_MDL_CAND_EDUCATION-CITY,
      REGION  type RCF_S_MDL_CAND_EDUCATION-REGION,
      COUNTRY  type RCF_S_MDL_CAND_EDUCATION-COUNTRY,
      FIELD_OF_STUDY1  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY1,
      FIELD_OF_STUDY2  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY2,
      FIELD_OF_STUDY3  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY3,
      DEGREE  type RCF_S_MDL_CAND_EDUCATION-DEGREE,
      GRADE  type RCF_S_MDL_CAND_EDUCATION-GRADE,
      START_DATE  type RCF_S_MDL_CAND_EDUCATION-START_DATE,
      END_DATE  type RCF_S_MDL_CAND_EDUCATION-END_DATE,
      DESCRIPTION  type RCF_S_MDL_CAND_EDUCATION-DESCRIPTION,
      HIGHEST_DEGREE  type RCF_S_MDL_CAND_EDUCATION-HIGHEST_DEGREE,
      DEGREE_LEVEL  type RCF_S_MDL_CAND_EDUCATION-DEGREE_LEVEL,
      COUNTRY_TXT  type RCF_S_MDL_CAND_EDUCATION-COUNTRY_TXT,
      REGION_TXT  type RCF_S_MDL_CAND_EDUCATION-REGION_TXT,
      DEGREE_LEVEL_TXT  type RCF_S_MDL_CAND_EDUCATION-DEGREE_LEVEL_TXT,
      EDUCATION_TYPE_TXT  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_TYPE_TXT,
      EDUCATION_FIELD_TXT  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_FIELD_TXT,
      DESCRIPTION_TXT  type RCF_S_MDL_CAND_EDUCATION-DESCRIPTION_TXT,
      DOC_LANGU  type RCF_S_MDL_CAND_EDUCATION-DOC_LANGU,
      ID  type I,
      ISTAT  type RCF_S_MDL_CAND_EDUCATION-ISTAT,
      SEQNR  type RCF_S_MDL_CAND_EDUCATION-SEQNR,
    end of Element_education,  "#EC NEEDED
    Elements_education type 
       standard table of Element_education
       with default key. "#EC NEEDED
  constants:
    wdctx_education_details type string value `EDUCATION_DETAILS`.
  types:
    begin of Element_education_details,
      MANDT  type RCF_S_MDL_CAND_EDUCATION-MANDT,
      PLVAR  type RCF_S_MDL_CAND_EDUCATION-PLVAR,
      OTYPE  type RCF_S_MDL_CAND_EDUCATION-OTYPE,
      OBJID  type RCF_S_MDL_CAND_EDUCATION-OBJID,
      INFTY  type RCF_S_MDL_CAND_EDUCATION-INFTY,
      SUBTY  type RCF_S_MDL_CAND_EDUCATION-SUBTY,
      ISTAT  type RCF_S_MDL_CAND_EDUCATION-ISTAT,
      PRIOX  type RCF_S_MDL_CAND_EDUCATION-PRIOX,
      BEGDA  type RCF_S_MDL_CAND_EDUCATION-BEGDA,
      ENDDA  type RCF_S_MDL_CAND_EDUCATION-ENDDA,
      VARYF  type RCF_S_MDL_CAND_EDUCATION-VARYF,
      SEQNR  type RCF_S_MDL_CAND_EDUCATION-SEQNR,
      AEDTM  type RCF_S_MDL_CAND_EDUCATION-AEDTM,
      UNAME  type RCF_S_MDL_CAND_EDUCATION-UNAME,
      REASN  type RCF_S_MDL_CAND_EDUCATION-REASN,
      HISTO  type RCF_S_MDL_CAND_EDUCATION-HISTO,
      ITXNR  type RCF_S_MDL_CAND_EDUCATION-ITXNR,
      EDUCATION_TYPE  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_TYPE,
      EDUCATION_FIELD  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_FIELD,
      INSTITUTE  type RCF_S_MDL_CAND_EDUCATION-INSTITUTE,
      CITY  type RCF_S_MDL_CAND_EDUCATION-CITY,
      REGION  type RCF_S_MDL_CAND_EDUCATION-REGION,
      COUNTRY  type RCF_S_MDL_CAND_EDUCATION-COUNTRY,
      FIELD_OF_STUDY1  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY1,
      FIELD_OF_STUDY2  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY2,
      FIELD_OF_STUDY3  type RCF_S_MDL_CAND_EDUCATION-FIELD_OF_STUDY3,
      DEGREE  type RCF_S_MDL_CAND_EDUCATION-DEGREE,
      GRADE  type RCF_S_MDL_CAND_EDUCATION-GRADE,
      START_DATE  type RCF_S_MDL_CAND_EDUCATION-START_DATE,
      END_DATE  type RCF_S_MDL_CAND_EDUCATION-END_DATE,
      DESCRIPTION  type RCF_S_MDL_CAND_EDUCATION-DESCRIPTION,
      HIGHEST_DEGREE  type RCF_S_MDL_CAND_EDUCATION-HIGHEST_DEGREE,
      DEGREE_LEVEL  type RCF_S_MDL_CAND_EDUCATION-DEGREE_LEVEL,
      COUNTRY_TXT  type RCF_S_MDL_CAND_EDUCATION-COUNTRY_TXT,
      REGION_TXT  type RCF_S_MDL_CAND_EDUCATION-REGION_TXT,
      DEGREE_LEVEL_TXT  type RCF_S_MDL_CAND_EDUCATION-DEGREE_LEVEL_TXT,
      EDUCATION_TYPE_TXT  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_TYPE_TXT,
      EDUCATION_FIELD_TXT  type RCF_S_MDL_CAND_EDUCATION-EDUCATION_FIELD_TXT,
      DESCRIPTION_TXT  type RCF_S_MDL_CAND_EDUCATION-DESCRIPTION_TXT,
      DOC_LANGU  type RCF_S_MDL_CAND_EDUCATION-DOC_LANGU,
      OLD_COUNTRY  type RCF_S_MDL_CAND_EDUCATION-COUNTRY,
    end of Element_education_details,  "#EC NEEDED
    Elements_education_details type 
       standard table of Element_education_details
       with default key. "#EC NEEDED
  constants:
    wdctx_technical_attributes type string value `TECHNICAL_ATTRIBUTES`.
  types:
    begin of Element_technical_attributes,
      NO_OF_CHAR_IN_FIELDS  type I,
    end of Element_technical_attributes,  "#EC NEEDED
    Elements_technical_attributes type 
       standard table of Element_technical_attributes
       with default key. "#EC NEEDED
  aliases:  check_consistency   for iwci_hrrcf_ci_subcomponent~check_consistency.
  aliases:  is_navigation_forbidden   for iwci_hrrcf_c_education_ui~is_navigation_forbidden.
  aliases:  is_subcomponent_not_visible   for iwci_hrrcf_ci_subcomponent~is_subcomponent_not_visible.
  aliases:  save   for iwci_hrrcf_c_education_ui~save.
  aliases:  set_hrobject   for iwci_hrrcf_c_education_ui~set_hrobject.
  methods DELETE_EDUCATION
    importing
      IT_EDUCATION  type Wdr_Context_Element_Set 
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods LOAD_EDUCATION_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SHOW_DETAIL_POPUP
    importing
      IV_NEW_MODE  type Char1   ."#EC NEEDED
  methods SWITCH_MODE
    importing
      IV_NEW_MODE  type Char1   ."#EC NEEDED
  methods UPDATE_EDUCATION
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  raise events                                                     |
* +-------------------------------------------------------------------+

  methods Fire_internal_error_Evt  ."#EC NEEDED
 
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_COMPONENT. "#EC NEEDED
 
 
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    GO_ADD_DETAILS_POPUP  type Ref to if_Wd_Window.
  data: 
    GO_MESSAGE_MANAGER  type Ref to if_Wd_Message_Manager.
  data: 
    GV_FOCUS_SET  type Wdy_Boolean.
endinterface.
*=====================================================================*
* Intf.: if_componentcontroller  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <hrrcf_c_education_ui>
* UDate: 20240723 142644
*=====================================================================*
interface if_componentcontroller.
 
  interfaces:
     IG_COMPONENTCONTROLLER.
 
  aliases:
    wdctx_context  for   IG_COMPONENTCONTROLLER~wdctx_context.
  aliases:
    wdctx_buttons  for   IG_COMPONENTCONTROLLER~wdctx_buttons.
  aliases:
    Element_buttons   for   IG_COMPONENTCONTROLLER~Element_buttons,
    Elements_buttons  for   IG_COMPONENTCONTROLLER~Elements_buttons.
  aliases:
    wdctx_candidate  for   IG_COMPONENTCONTROLLER~wdctx_candidate.
  aliases:
    Element_candidate   for   IG_COMPONENTCONTROLLER~Element_candidate,
    Elements_candidate  for   IG_COMPONENTCONTROLLER~Elements_candidate.
  aliases:
    wdctx_education  for   IG_COMPONENTCONTROLLER~wdctx_education.
  aliases:
    Element_education   for   IG_COMPONENTCONTROLLER~Element_education,
    Elements_education  for   IG_COMPONENTCONTROLLER~Elements_education.
  aliases:
    wdctx_education_details  for   IG_COMPONENTCONTROLLER~wdctx_education_details.
  aliases:
    Element_education_details   for   IG_COMPONENTCONTROLLER~Element_education_details,
    Elements_education_details  for   IG_COMPONENTCONTROLLER~Elements_education_details.
  aliases:
    wdctx_technical_attributes  for   IG_COMPONENTCONTROLLER~wdctx_technical_attributes.
  aliases:
    Element_technical_attributes   for   IG_COMPONENTCONTROLLER~Element_technical_attributes,
    Elements_technical_attributes  for   IG_COMPONENTCONTROLLER~Elements_technical_attributes.
  aliases:  check_consistency   for iwci_hrrcf_ci_subcomponent~check_consistency.
  aliases:  is_navigation_forbidden   for iwci_hrrcf_c_education_ui~is_navigation_forbidden.
  aliases:  is_subcomponent_not_visible   for iwci_hrrcf_ci_subcomponent~is_subcomponent_not_visible.
  aliases:  save   for iwci_hrrcf_c_education_ui~save.
  aliases:  set_hrobject   for iwci_hrrcf_c_education_ui~set_hrobject.
  aliases: DELETE_EDUCATION for IG_COMPONENTCONTROLLER~DELETE_EDUCATION.
  aliases: LOAD_EDUCATION_DATA for IG_COMPONENTCONTROLLER~LOAD_EDUCATION_DATA.
  aliases: SHOW_DETAIL_POPUP for IG_COMPONENTCONTROLLER~SHOW_DETAIL_POPUP.
  aliases: SWITCH_MODE for IG_COMPONENTCONTROLLER~SWITCH_MODE.
  aliases: UPDATE_EDUCATION for IG_COMPONENTCONTROLLER~UPDATE_EDUCATION.
  aliases Fire_internal_error_Evt for IG_COMPONENTCONTROLLER~Fire_internal_error_Evt.
 
    aliases: wd_get_api for IG_COMPONENTCONTROLLER~wd_get_api.
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  global application properties                                    |
* +-------------------------------------------------------------------+

  aliases: 
    GO_ADD_DETAILS_POPUP  for  IG_COMPONENTCONTROLLER~GO_ADD_DETAILS_POPUP.
  aliases: 
    GO_MESSAGE_MANAGER  for  IG_COMPONENTCONTROLLER~GO_MESSAGE_MANAGER.
  aliases: 
    GV_FOCUS_SET  for  IG_COMPONENTCONTROLLER~GV_FOCUS_SET.
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Education.
endinterface.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr
* Purp.: definitions for application defined methods of controller
*        COMPONENTCONTROLLER (COMPONENT)
* UDate: 20240723 142644
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_COMPONENTCONTROLLER
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_education.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAPPLICATIONSTATECHANGE
    importing
      STATE_CHANGE  type ref to If_Wd_Application_State_Change   ."#EC NEEDED
  methods WDDOBEFORENAVIGATION
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods WDDOEXIT
    importing
      REASON  type Wdr_Appl_Exit_Reason   ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOPOSTPROCESSING
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods CHECK_CONSISTENCY
    exporting
      ET_MESSAGES  type Bapirettab
      EV_IS_NOT_CONSISTENT  type Wdy_Boolean
      EV_MAIL_MISSING_FLAG  type Boole_D  ."#EC NEEDED
  methods DELETE_EDUCATION
    importing
      IT_EDUCATION  type Wdr_Context_Element_Set 
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods IS_NAVIGATION_FORBIDDEN
    exporting
      ET_MESSAGES  type Bapirettab
      EV_NAVIGATION_FORBIDDEN  type Wdy_Boolean  ."#EC NEEDED
  methods IS_SUBCOMPONENT_NOT_VISIBLE
    returning
      value(RV_NOT_VISIBLE)  type Wdy_Boolean  ."#EC NEEDED
  methods LOAD_EDUCATION_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SAVE
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SET_HROBJECT
    importing
      IS_APPL_HROBJECT  type Hrobject 
      IS_CAND_HROBJECT  type Hrobject   ."#EC NEEDED
  methods SHOW_DETAIL_POPUP
    importing
      IV_NEW_MODE  type Char1   ."#EC NEEDED
  methods SWITCH_MODE
    importing
      IV_NEW_MODE  type Char1   ."#EC NEEDED
  methods UPDATE_EDUCATION
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_COMPONENTCONTROLLER,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node.     "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_education. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr 
* Purp.: explicit definitions derived from application coding
*        <COMPONENTCONTROLLER> (COMPONENT)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240723 142644
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAPPLICATIONSTATECHANGE . "#EC NEEDED
endmethod.

method WDDOBEFORENAVIGATION . "#EC NEEDED
endmethod.

method wddoexit . "#EC NEEDED
endmethod.

method wddoinit.

  data: lo_current_controller                type ref to if_wd_controller,
        lo_nd_technical_attributes           type ref to if_wd_context_node,
        lv_no_of_char_in_fields              type wd_this->element_technical_attributes-no_of_char_in_fields,
        lv_param_value                       type rcf_mdl_prm_value.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  wd_this->go_message_manager = lo_current_controller->get_message_manager( ).

  try.

*     get the max. number of characters for description fields
      cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch(
        exporting
          iv_param_name  = 'NO_OF_CHAR_IN_FIELDS'
        importing
          ev_param_value = lv_param_value ).

      lv_no_of_char_in_fields = lv_param_value.

      lo_nd_technical_attributes = wd_context->get_child_node( name = wd_this->wdctx_technical_attributes ).
      lo_nd_technical_attributes->set_attribute(
        name  = `NO_OF_CHAR_IN_FIELDS`
        value = lv_no_of_char_in_fields ).

    catch cx_hrrcf_rfc_communication .
      wd_this->go_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).
  endtry.

endmethod.

method WDDOPOSTPROCESSING . "#EC NEEDED
endmethod.

method CHECK_CONSISTENCY . "#EC NEEDED
endmethod.

METHOD delete_education .

  DATA: lo_elem_education TYPE REF TO if_wd_context_element,
        lo_node_education TYPE REF TO if_wd_context_node,
        ls_hrobject       TYPE hrobject,
        lt_messages       TYPE bapirettab,
        ls_education2     TYPE rcf_s_mdl_cand_education,
        ls_education      TYPE if_componentcontroller=>element_education,
        lo_node_candidate TYPE REF TO if_wd_context_node.

  DATA: lo_current_controller TYPE REF TO if_wd_controller,
        lo_message_manager    TYPE REF TO if_wd_message_manager,
        lo_ex                 TYPE REF TO cx_root.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  CALL METHOD lo_current_controller->get_message_manager
    RECEIVING
      message_manager = lo_message_manager.

  TRY.
      lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
      lo_node_candidate->get_attribute( EXPORTING name =  `HROBJECT`
                                        IMPORTING value = ls_hrobject ).

      LOOP AT it_education INTO lo_elem_education.

        CALL METHOD lo_elem_education->get_static_attributes
          IMPORTING
            static_attributes = ls_education.

        MOVE-CORRESPONDING ls_education TO ls_education2.
        CALL METHOD wd_assist->sc_delete_education
          EXPORTING
            is_cand_hrobject = ls_hrobject
            is_education     = ls_education2
          IMPORTING
            et_messages      = lt_messages.

        APPEND LINES OF lt_messages TO et_messages.

        lo_node_education = lo_elem_education->get_node( ).
        IF lt_messages IS INITIAL.
          lo_node_education->remove_element( lo_elem_education ).
        ENDIF.
      ENDLOOP.

      lo_node_education->clear_selection( ).
      lo_node_education->set_lead_selection_index( index = -1 ).

    CATCH cx_root INTO lo_ex.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_ex.

      CALL METHOD lo_message_manager->report_t100_message
        EXPORTING
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E'.
  ENDTRY.

ENDMETHOD.

method IS_NAVIGATION_FORBIDDEN . "#EC NEEDED
endmethod.

method IS_SUBCOMPONENT_NOT_VISIBLE . "#EC NEEDED
endmethod.

METHOD load_education_data .

  DATA: ls_hrobject TYPE hrobject,
        lt_messages TYPE bapirettab,
        lt_education TYPE rcf_t_mdl_cand_education,
        ls_education TYPE rcf_s_mdl_cand_education,
        ls_education2 TYPE if_componentcontroller=>element_education,
        lt_education2 TYPE if_componentcontroller=>elements_education,
        lo_node_education TYPE REF TO if_wd_context_node,
        lo_node_candidate TYPE REF TO if_wd_context_node.

  DATA: lo_current_controller TYPE REF TO if_wd_controller,
         lo_message_manager    TYPE REF TO if_wd_message_manager,
         lo_ex                 TYPE REF TO cx_root.
  DATA:  es_result             TYPE bapiret2.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  CALL METHOD lo_current_controller->get_message_manager
    RECEIVING
      message_manager = lo_message_manager.

  TRY.

      lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
      lo_node_candidate->get_attribute( EXPORTING name =  `HROBJECT`
                                        IMPORTING value = ls_hrobject ).

      CALL METHOD wd_assist->sc_retrieve_educationdata
        EXPORTING
          is_cand_hrobject = ls_hrobject
        IMPORTING
          et_messages      = lt_messages
          et_education     = lt_education.

      SORT lt_education BY start_date DESCENDING.

      LOOP AT lt_education INTO ls_education.
        MOVE-CORRESPONDING ls_education TO ls_education2.
*   id necessary for sort algorithm
        ls_education2-id = sy-tabix.
        APPEND ls_education2 TO  lt_education2.
      ENDLOOP.

      lo_node_education = wd_context->get_child_node( name = if_componentcontroller=>wdctx_education ).
      lo_node_education->bind_table( lt_education2 ).
      lo_node_education->clear_selection( ).
      lo_node_education->set_lead_selection_index( index = -1 ).

      et_messages = lt_messages.

    CATCH cx_root INTO lo_ex.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_ex.

            CALL FUNCTION 'BALW_BAPIRETURN_GET2'
              EXPORTING
                type   = 'E'
                cl     = 'HRRCF_WD_UI'
                number = '038'
              IMPORTING
                return = es_result.
            APPEND es_result TO et_messages.
*      CALL METHOD lo_message_manager->report_t100_message
*        EXPORTING
*          msgid = 'HRRCF0002'
*          msgno = '800'
*          msgty = 'A'.

  ENDTRY.

ENDMETHOD.

METHOD save .
* ensure that we are in overview mode when coming back to education step
  switch_mode( 'O' ).

ENDMETHOD.

METHOD set_hrobject .

  DATA: lo_node_candidate TYPE REF TO if_wd_context_node,
        lo_node_buttons   TYPE REF TO if_wd_context_node,
        ls_hrobject       TYPE hrobject.

  lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
  lo_node_candidate->get_attribute( EXPORTING name = 'HROBJECT'
                                    IMPORTING value = ls_hrobject ).
*  IF ls_hrobject <> is_cand_hrobject.                       "N_1511915
    lo_node_candidate->set_attribute( EXPORTING name =  `HROBJECT`
                                                value = is_cand_hrobject ).
    wd_this->load_education_data( ).

    lo_node_buttons = wd_context->get_child_node( name = if_componentcontroller=>wdctx_buttons ).
    wd_this->switch_mode( 'O' ).
*  ENDIF.
ENDMETHOD.

method show_detail_popup .

  data: lo_cmp_api               type ref to if_wd_component,
        lo_window_manager        type ref to if_wd_window_manager,
        lv_popup_title           type string.

  constants: lc_wdw_edu_details  type string value 'WDW_DETAILS',
             lc_otr_title_i      type string value 'PAOC_RCF_UI_SELF_SERVICES/ADD_EDUCATION',
             lc_otr_title_u      type string value 'PAOC_RCF_UI_SELF_SERVICES/EDIT_EDUCATION'.


* get window manager
  lo_cmp_api = wd_this->wd_get_api( ).
  lo_window_manager = lo_cmp_api->get_window_manager( ).

* get pop-up title
  if iv_new_mode eq 'I'.
    cl_wd_utilities=>get_otr_text_by_alias(
      exporting
        alias      = lc_otr_title_i
      receiving
        alias_text = lv_popup_title ).
  else.
    cl_wd_utilities=>get_otr_text_by_alias(
      exporting
        alias      = lc_otr_title_u
      receiving
        alias_text = lv_popup_title ).
  endif.

  if wd_this->go_add_details_popup is initial.
    wd_this->go_add_details_popup = lo_window_manager->create_window(
                                      window_name          = lc_wdw_edu_details
                                      title                = lv_popup_title
                                      close_in_any_case    = abap_false
                                      message_display_mode = if_wd_window=>co_msg_display_mode_selected
                                      close_button         = abap_false
                                      button_kind          = if_wd_window=>co_buttons_okcancel
                                      message_type         = if_wd_window=>co_msg_type_none ).
  endif.

* open pop-up
  wd_this->go_add_details_popup->open( ).

endmethod.

METHOD switch_mode.

  DATA:
    lo_node_buttons     TYPE REF TO if_wd_context_node,
    lo_node_education_details TYPE REF TO if_wd_context_node,
    lo_node_education   TYPE REF TO if_wd_context_node,
    lo_elem_education   TYPE REF TO if_wd_context_element,
    lo_elem_education_details TYPE REF TO if_wd_context_element,
    lt_selected_element TYPE wdr_context_element_set,
    ls_education2       TYPE if_componentcontroller=>element_education_details,
    ls_education        TYPE rcf_s_mdl_cand_education,
    lt_messages         TYPE bapirettab,
    ls_field_name       TYPE rcf_s_mdl_uis_fieldname,
    lt_field_name       TYPE rcf_t_mdl_uis_fieldname,
    lv_mode             TYPE char1,
    lv_empty_text       TYPE string.

  CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
    EXPORTING
      alias      = 'PAOC_RCF_UI_SELF_SERVICES/PLEASE_SELECT'
    RECEIVING
      alias_text = lv_empty_text.

  lo_node_buttons = wd_context->get_child_node( name = if_componentcontroller=>wdctx_buttons ).

  CASE iv_new_mode.
    WHEN 'O'.    "Overview

    WHEN 'I' OR 'U'.    "I: add new entry     U: update existing entry

      IF iv_new_mode = 'U'.
        lo_node_education = wd_context->get_child_node( name = if_componentcontroller=>wdctx_education ).
        lt_selected_element = lo_node_education->get_selected_elements( ).
        IF lt_selected_element IS NOT INITIAL.
          READ TABLE lt_selected_element INTO lo_elem_education INDEX 1.
          lo_elem_education->get_static_attributes( IMPORTING static_attributes = ls_education ).
          MOVE-CORRESPONDING ls_education TO ls_education2.
          ls_education2-old_country = ls_education2-country.
        ELSE.
          RETURN.
        ENDIF.
      ENDIF.

      lo_node_education_details = wd_context->get_child_node( name = if_componentcontroller=>wdctx_education_details ).
      lo_node_education_details->invalidate( ).
      lo_elem_education_details = lo_node_education_details->create_element( ).
      lo_elem_education_details->set_static_attributes( static_attributes = ls_education2 ).
      lo_node_education_details->bind_element( lo_elem_education_details ).

*     fill value help for country
      ls_field_name-fieldname = 'COUNTRY'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_empty_text.
      APPEND ls_field_name TO lt_field_name.

*     fill value help for region
      CLEAR ls_field_name.
      ls_field_name-fieldname = 'REGION'.
      ls_field_name-by = ls_education-country.
      ls_field_name-init_key_included = abap_true.
      IF ls_education-country IS NOT INITIAL.
        ls_field_name-init_value = lv_empty_text.
      ENDIF.
      APPEND ls_field_name TO lt_field_name.

*     fill value help for degree level
      CLEAR ls_field_name.
      ls_field_name-fieldname = 'DEGREE_LEVEL'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_empty_text.
      APPEND ls_field_name TO lt_field_name.

*     fill value help for education type
      CLEAR ls_field_name.
      ls_field_name-fieldname = 'EDUCATION_TYPE'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_empty_text.
      APPEND ls_field_name TO lt_field_name.

*     fill value help for education field
      CLEAR ls_field_name.
      ls_field_name-fieldname = 'EDUCATION_FIELD'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_empty_text.
      APPEND ls_field_name TO lt_field_name.

      CALL METHOD cl_hrrcf_wd_services=>retrieve_value_helps
        EXPORTING
          it_field_names  = lt_field_name
          io_context_node = lo_node_education_details
        IMPORTING
          et_messages     = lt_messages.

*     check ddlb keys for existence in value set
      CALL METHOD cl_hrrcf_wd_services=>check_ddlb_value_set
        EXPORTING
          io_node           = lo_node_education_details
          iv_attribute_name = 'DEGREE_LEVEL'.

      CALL METHOD cl_hrrcf_wd_services=>check_ddlb_value_set
        EXPORTING
          io_node           = lo_node_education_details
          iv_attribute_name = 'EDUCATION_TYPE'.

      CALL METHOD cl_hrrcf_wd_services=>check_ddlb_value_set
        EXPORTING
          io_node           = lo_node_education_details
          iv_attribute_name = 'EDUCATION_FIELD'.
  ENDCASE.


  lo_node_buttons->set_attribute( EXPORTING name =  `MODE`
                                            value = iv_new_mode ).

ENDMETHOD.

method update_education .

  data: lo_ex                         type ref to cx_root,
        lo_node_buttons               type ref to if_wd_context_node,
        lo_node_candidate             type ref to if_wd_context_node,
        lo_node_education_details     type ref to if_wd_context_node,
        lo_elem_education_details     type ref to if_wd_context_element,
        lt_education_detl             type rcf_t_mdl_cand_education,
        ls_education_detl             type rcf_s_mdl_cand_education,
        ls_education_details          type if_componentcontroller=>element_education_details,
        ls_education                  type rcf_s_mdl_cand_education,
        ls_education_basic_data       type hri5104,
        ls_hrobject                   type hrobject,
        ls_result                     type bapiret2,
        lv_mode                       type char1.

  try.

      lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
      lo_node_candidate->get_attribute( exporting name  = 'HROBJECT'
                                        importing value = ls_hrobject ).

      lo_node_education_details = wd_context->get_child_node( name = if_componentcontroller=>wdctx_education_details ).
      lo_elem_education_details = lo_node_education_details->get_element(  ).
      lo_elem_education_details->get_static_attributes(
        importing
          static_attributes = ls_education_details ).

      condense: ls_education_details-institute,
                ls_education_details-city,
                ls_education_details-field_of_study1,
                ls_education_details-field_of_study2,
                ls_education_details-field_of_study3,
                ls_education_details-grade,
                ls_education_details-degree.

      if ls_education_details-description_txt co space.
        condense ls_education_details-description_txt.
      endif.

      move-corresponding ls_education_details to ls_education.
      move-corresponding ls_education_details to ls_education_basic_data.

      lo_node_buttons = wd_context->get_child_node( name = if_componentcontroller=>wdctx_buttons ).
      lo_node_buttons->get_attribute( exporting name  = 'MODE'
                                      importing value = lv_mode ).

*     restrict creation of a blank entry
      if ( ls_education_basic_data      is initial                     ) and "only these basic fields and the
         ( ls_education-description_txt is initial                     ) and "description can be filled via the UI
         ( cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true ).

        call function 'BALW_BAPIRETURN_GET2'
          exporting
            type   = 'E'
            cl     = 'HRRCF_WD_UI'
            number = '039'
          importing
            return = ls_result.
        append ls_result to et_messages.
        return.

*     restrict creation of two blank entries
      elseif ( ls_education is initial ).

        call method wd_assist->sc_retrieve_educationdata
          exporting
            is_cand_hrobject = ls_hrobject
          importing
            et_messages      = et_messages
            et_education     = lt_education_detl.

        sort lt_education_detl by start_date descending.

        types: begin of ls_education_detl_record,
                       education_type    type     rcf_education_type,
                       education_field   type     rcf_education_field,
                       institute         type     rcf_education_institute,
                       city              type     ad_city1,
                       region            type     regio,
                       country           type     land1,
                       field_of_study1   type     rcf_field_of_study,
                       grade             type     rcf_grade,
                       start_date        type     rcf_education_start_date,
                       end_date          type     rcf_education_end_date,
                       description       type     rcf_education_desc,
                       highest_degree    type     rcf_highest_degree,
                       degree_level      type     rcf_degree_level,
               end of ls_education_detl_record.

        data ls_existing_education_detl type ls_education_detl_record.

        loop at lt_education_detl into ls_education_detl.
          move-corresponding ls_education_detl to ls_existing_education_detl.
          if ls_existing_education_detl is initial.
            call function 'BALW_BAPIRETURN_GET2'
              exporting
                type   = 'E'
                cl     = 'HRRCF_WD_UI'
                number = '038'
              importing
                return = ls_result.
            append ls_result to et_messages.
            return.
          endif.
        endloop.

      endif.

      case lv_mode.
        when 'I'.
          call method wd_assist->sc_create_education
            exporting
              is_cand_hrobject = ls_hrobject
              is_education     = ls_education
            importing
              et_messages      = et_messages.
        when 'U'.
          call method wd_assist->sc_update_education
            exporting
              is_cand_hrobject = ls_hrobject
              is_education     = ls_education
            importing
              et_messages      = et_messages.
      endcase.

    catch cx_root into lo_ex.
      cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
      call function 'BALW_BAPIRETURN_GET2'
        exporting
          type   = 'E'
          cl     = 'HRRCF0002'
          number = '800'
        importing
          return = ls_result.
      append ls_result to et_messages.
  endtry.

endmethod.

endclass.
 