*=====================================================================*
* Intf.: ig_componentcontroller  
* Purp.: programming interface for access of this controller within
*        other controllers of the same component
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <hrrcf_c_personl_data_ui>
* UDate: 20240715 110316
*=====================================================================*
interface ig_componentcontroller.
 
  interfaces: iwci_hrrcf_ci_subcomponent .
  interfaces: iwci_hrrcf_c_personl_data_ui .
  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_address type string value `ADDRESS`.
  types:
    begin of Element_address,
      CHANNEL  type RCF_S_MDL_CAND_COMMN_ADDRESS-CHANNEL,
      CHANNEL_DESCRIPTION  type RCF_S_MDL_CAND_COMMN_ADDRESS-CHANNEL_DESCRIPTION,
      STREET  type RCF_S_MDL_CAND_COMMN_ADDRESS-STREET,
      STREET2  type RCF_S_MDL_CAND_COMMN_ADDRESS-STREET2,
      COUNTRY  type RCF_S_MDL_CAND_COMMN_ADDRESS-COUNTRY,
      CITY  type RCF_S_MDL_CAND_COMMN_ADDRESS-CITY,
      POSTCODE  type RCF_S_MDL_CAND_COMMN_ADDRESS-POSTCODE,
      REGION  type RCF_S_MDL_CAND_COMMN_ADDRESS-REGION,
      OLD_COUNTRY  type RCF_S_MDL_CAND_COMMN_ADDRESS-COUNTRY,
    end of Element_address,  "#EC NEEDED
    Elements_address type 
       standard table of Element_address
       with default key. "#EC NEEDED
  constants:
    wdctx_region_attributes type string value `REGION_ATTRIBUTES`.
  types:
    begin of Element_region_attributes,
      REGION_ENABLED  type WDY_BOOLEAN,
    end of Element_region_attributes,  "#EC NEEDED
    Elements_region_attributes type 
       standard table of Element_region_attributes
       with default key. "#EC NEEDED
  constants:
    wdctx_region_values type string value `REGION_VALUES`.
  types:
    begin of Element_region_values,
      REGION_NAME  type STRING,
      REGION_KEY  type REGIO,
    end of Element_region_values,  "#EC NEEDED
    Elements_region_values type 
       standard table of Element_region_values
       with default key. "#EC NEEDED
  constants:
    wdctx_candidate type string value `CANDIDATE`.
  types:
    begin of Element_candidate,
      HROBJECT  type HROBJECT,
    end of Element_candidate,  "#EC NEEDED
    Elements_candidate type 
       standard table of Element_candidate
       with default key. "#EC NEEDED
  constants:
    wdctx_personaldata type string value `PERSONALDATA`.
  types:
    Element_personaldata type RCF_S_MDL_CAND_PERSONAL_DATA,
    Elements_personaldata type 
       standard table of Element_personaldata
       with default key. "#EC NEEDED
  constants:
    wdctx_communicationdata type string value `COMMUNICATIONDATA`.
  types:
    begin of Element_communicationdata,
      EMAIL  type AD_SMTPADR,
    end of Element_communicationdata,  "#EC NEEDED
    Elements_communicationdata type 
       standard table of Element_communicationdata
       with default key. "#EC NEEDED
  constants:
    wdctx_ireferences type string value `IREFERENCES`.
  types:
    begin of Element_ireferences,
      URL_CATEGORY  type RCF_S_MDL_CAND_INTERNET_REF-URL_CATEGORY,
      URL_CATEGORY_TXT  type RCF_S_MDL_CAND_INTERNET_REF-URL_CATEGORY_TXT,
      INTERNET_REF_URL  type RCF_S_MDL_CAND_INTERNET_REF-INTERNET_REF_URL,
      INTERNET_REF_URL_TXT  type RCF_S_MDL_CAND_INTERNET_REF-INTERNET_REF_URL_TXT,
      DESCRIPTION  type RCF_S_MDL_CAND_INTERNET_REF-DESCRIPTION,
      DESCRIPTION_TXT  type RCF_S_MDL_CAND_INTERNET_REF-DESCRIPTION_TXT,
      DOC_LANGU  type RCF_S_MDL_CAND_INTERNET_REF-DOC_LANGU,
      TEST_LINK_VISIBLE  type WDY_BOOLEAN,
    end of Element_ireferences,  "#EC NEEDED
    Elements_ireferences type 
       standard table of Element_ireferences
       with default key. "#EC NEEDED
  constants:
    wdctx_phone type string value `PHONE`.
  types:
    Element_phone type RCF_S_MDL_CAND_COMMN_TELEPHONE,
    Elements_phone type 
       standard table of Element_phone
       with default key. "#EC NEEDED
  constants:
    wdctx_preferred_channel type string value `PREFERRED_CHANNEL`.
  types:
    begin of Element_preferred_channel,
      ADDRESS_CHANNEL  type RCF_COMM_CHANNEL,
      PHONE_CHANNEL  type RCF_COMM_CHANNEL,
      ADDRESS_CHANNEL_VISIBLE  type WDY_BOOLEAN,
      PHONE_CHANNEL_VISIBLE  type WDY_BOOLEAN,
    end of Element_preferred_channel,  "#EC NEEDED
    Elements_preferred_channel type 
       standard table of Element_preferred_channel
       with default key. "#EC NEEDED
  constants:
    wdctx_ui type string value `UI`.
  types:
    begin of Element_ui,
      COMM_DATA_VISIBLE  type WDY_BOOLEAN,
      NEW_ELEMENTS_VISIBLE  type WDY_BOOLEAN,
      NEW_COMM_DATA_VISIBLE  type WDY_BOOLEAN,
      NO_OF_CHAR_IN_FIELDS  type I,
    end of Element_ui,  "#EC NEEDED
    Elements_ui type 
       standard table of Element_ui
       with default key. "#EC NEEDED
  aliases:  check_consistency   for iwci_hrrcf_ci_subcomponent~check_consistency.
  aliases:  is_navigation_forbidden   for iwci_hrrcf_ci_subcomponent~is_navigation_forbidden.
  aliases:  is_subcomponent_not_visible   for iwci_hrrcf_ci_subcomponent~is_subcomponent_not_visible.
  aliases:  load_regions   for iwci_hrrcf_c_personl_data_ui~load_regions.
  aliases:  save   for iwci_hrrcf_ci_subcomponent~save.
  aliases:  set_hrobject   for iwci_hrrcf_c_personl_data_ui~set_hrobject.
  aliases:  set_navigation_forbidden   for iwci_hrrcf_c_personl_data_ui~set_navigation_forbidden.
  aliases:  set_region_attributes   for iwci_hrrcf_c_personl_data_ui~set_region_attributes.
  methods BUILD_ADDRESS_TABLE
    returning
      value(RT_ADDRESS_DATA)  type Rcf_T_Mdl_Cand_Commn_Address  ."#EC NEEDED
  methods BUILD_PHONE_TABLE
    returning
      value(RT_PHONE_DATA)  type Rcf_T_Mdl_Cand_Commn_Telephone  ."#EC NEEDED
  methods GET_CANDIDATE_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods RETRIEVE_FOA_SEX
    importing
      IV_FORMOFADDRESS  type Ad_Title 
    changing
      CV_SEX  type Bu_Sexid   ."#EC NEEDED
  methods RETRIEVE_INTERNET_REFERENCE
    importing
      IV_NO_CONTEXT_BINDING  type Wdy_Boolean optional
    exporting
      ET_DB_INTERNET_REFERENCES  type Rcf_T_Mdl_Cand_Internet_Ref  ."#EC NEEDED
  methods SAVE_INTERNET_REFERENCES
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SET_CANDIDATE_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SET_CHANNEL_VH
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IT_CHANNEL  type Rcf_T_Channel_List 
      IV_ATTRIBUTE_NAME  type String   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  raise events                                                     |
* +-------------------------------------------------------------------+

  methods Fire_internal_error_Evt  ."#EC NEEDED
 
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_COMPONENT. "#EC NEEDED
 
 
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    GO_MESSAGE_MANAGER  type Ref to if_Wd_Message_Manager.
endinterface.
*=====================================================================*
* Intf.: if_componentcontroller  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <COMPONENTCONTROLLER> of
*        component:   <hrrcf_c_personl_data_ui>
* UDate: 20240715 110316
*=====================================================================*
interface if_componentcontroller.
 
  interfaces:
     IG_COMPONENTCONTROLLER.
 
  aliases:
    wdctx_context  for   IG_COMPONENTCONTROLLER~wdctx_context.
  aliases:
    wdctx_address  for   IG_COMPONENTCONTROLLER~wdctx_address.
  aliases:
    Element_address   for   IG_COMPONENTCONTROLLER~Element_address,
    Elements_address  for   IG_COMPONENTCONTROLLER~Elements_address.
  aliases:
    wdctx_region_attributes  for   IG_COMPONENTCONTROLLER~wdctx_region_attributes.
  aliases:
    Element_region_attributes   for   IG_COMPONENTCONTROLLER~Element_region_attributes,
    Elements_region_attributes  for   IG_COMPONENTCONTROLLER~Elements_region_attributes.
  aliases:
    wdctx_region_values  for   IG_COMPONENTCONTROLLER~wdctx_region_values.
  aliases:
    Element_region_values   for   IG_COMPONENTCONTROLLER~Element_region_values,
    Elements_region_values  for   IG_COMPONENTCONTROLLER~Elements_region_values.
  aliases:
    wdctx_candidate  for   IG_COMPONENTCONTROLLER~wdctx_candidate.
  aliases:
    Element_candidate   for   IG_COMPONENTCONTROLLER~Element_candidate,
    Elements_candidate  for   IG_COMPONENTCONTROLLER~Elements_candidate.
  aliases:
    wdctx_personaldata  for   IG_COMPONENTCONTROLLER~wdctx_personaldata.
  aliases:
    Element_personaldata   for   IG_COMPONENTCONTROLLER~Element_personaldata,
    Elements_personaldata  for   IG_COMPONENTCONTROLLER~Elements_personaldata.
  aliases:
    wdctx_communicationdata  for   IG_COMPONENTCONTROLLER~wdctx_communicationdata.
  aliases:
    Element_communicationdata   for   IG_COMPONENTCONTROLLER~Element_communicationdata,
    Elements_communicationdata  for   IG_COMPONENTCONTROLLER~Elements_communicationdata.
  aliases:
    wdctx_ireferences  for   IG_COMPONENTCONTROLLER~wdctx_ireferences.
  aliases:
    Element_ireferences   for   IG_COMPONENTCONTROLLER~Element_ireferences,
    Elements_ireferences  for   IG_COMPONENTCONTROLLER~Elements_ireferences.
  aliases:
    wdctx_phone  for   IG_COMPONENTCONTROLLER~wdctx_phone.
  aliases:
    Element_phone   for   IG_COMPONENTCONTROLLER~Element_phone,
    Elements_phone  for   IG_COMPONENTCONTROLLER~Elements_phone.
  aliases:
    wdctx_preferred_channel  for   IG_COMPONENTCONTROLLER~wdctx_preferred_channel.
  aliases:
    Element_preferred_channel   for   IG_COMPONENTCONTROLLER~Element_preferred_channel,
    Elements_preferred_channel  for   IG_COMPONENTCONTROLLER~Elements_preferred_channel.
  aliases:
    wdctx_ui  for   IG_COMPONENTCONTROLLER~wdctx_ui.
  aliases:
    Element_ui   for   IG_COMPONENTCONTROLLER~Element_ui,
    Elements_ui  for   IG_COMPONENTCONTROLLER~Elements_ui.
  aliases:  check_consistency   for iwci_hrrcf_ci_subcomponent~check_consistency.
  aliases:  is_navigation_forbidden   for iwci_hrrcf_ci_subcomponent~is_navigation_forbidden.
  aliases:  is_subcomponent_not_visible   for iwci_hrrcf_ci_subcomponent~is_subcomponent_not_visible.
  aliases:  load_regions   for iwci_hrrcf_c_personl_data_ui~load_regions.
  aliases:  save   for iwci_hrrcf_ci_subcomponent~save.
  aliases:  set_hrobject   for iwci_hrrcf_c_personl_data_ui~set_hrobject.
  aliases:  set_navigation_forbidden   for iwci_hrrcf_c_personl_data_ui~set_navigation_forbidden.
  aliases:  set_region_attributes   for iwci_hrrcf_c_personl_data_ui~set_region_attributes.
  aliases: BUILD_ADDRESS_TABLE for IG_COMPONENTCONTROLLER~BUILD_ADDRESS_TABLE.
  aliases: BUILD_PHONE_TABLE for IG_COMPONENTCONTROLLER~BUILD_PHONE_TABLE.
  aliases: GET_CANDIDATE_DATA for IG_COMPONENTCONTROLLER~GET_CANDIDATE_DATA.
  aliases: RETRIEVE_FOA_SEX for IG_COMPONENTCONTROLLER~RETRIEVE_FOA_SEX.
  aliases: RETRIEVE_INTERNET_REFERENCE for IG_COMPONENTCONTROLLER~RETRIEVE_INTERNET_REFERENCE.
  aliases: SAVE_INTERNET_REFERENCES for IG_COMPONENTCONTROLLER~SAVE_INTERNET_REFERENCES.
  aliases: SET_CANDIDATE_DATA for IG_COMPONENTCONTROLLER~SET_CANDIDATE_DATA.
  aliases: SET_CHANNEL_VH for IG_COMPONENTCONTROLLER~SET_CHANNEL_VH.
  aliases Fire_internal_error_Evt for IG_COMPONENTCONTROLLER~Fire_internal_error_Evt.
 
    aliases: wd_get_api for IG_COMPONENTCONTROLLER~wd_get_api.
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  global application properties                                    |
* +-------------------------------------------------------------------+

  aliases: 
    GO_MESSAGE_MANAGER  for  IG_COMPONENTCONTROLLER~GO_MESSAGE_MANAGER.
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    GV_NAV_FORBIDDEN  type Wdy_Boolean.
  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Personl_Data.
endinterface.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr
* Purp.: definitions for application defined methods of controller
*        COMPONENTCONTROLLER (COMPONENT)
* UDate: 20240715 110316
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_COMPONENTCONTROLLER
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_personl_data.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAPPLICATIONSTATECHANGE
    importing
      STATE_CHANGE  type ref to If_Wd_Application_State_Change   ."#EC NEEDED
  methods WDDOBEFORENAVIGATION
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods WDDOEXIT
    importing
      REASON  type Wdr_Appl_Exit_Reason   ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOPOSTPROCESSING
    importing
      IS_CURRENT_ROOT  type Wdy_Boolean   ."#EC NEEDED
  methods BUILD_ADDRESS_TABLE
    returning
      value(RT_ADDRESS_DATA)  type Rcf_T_Mdl_Cand_Commn_Address  ."#EC NEEDED
  methods BUILD_PHONE_TABLE
    returning
      value(RT_PHONE_DATA)  type Rcf_T_Mdl_Cand_Commn_Telephone  ."#EC NEEDED
  methods CHECK_CONSISTENCY
    exporting
      ET_MESSAGES  type Bapirettab
      EV_IS_NOT_CONSISTENT  type Wdy_Boolean
      EV_MAIL_MISSING_FLAG  type Boole_D  ."#EC NEEDED
  methods GET_CANDIDATE_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods IS_NAVIGATION_FORBIDDEN
    exporting
      ET_MESSAGES  type Bapirettab
      EV_NAVIGATION_FORBIDDEN  type Wdy_Boolean  ."#EC NEEDED
  methods IS_SUBCOMPONENT_NOT_VISIBLE
    returning
      value(RV_NOT_VISIBLE)  type Wdy_Boolean  ."#EC NEEDED
  methods LOAD_REGIONS
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IO_PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
  methods RETRIEVE_FOA_SEX
    importing
      IV_FORMOFADDRESS  type Ad_Title 
    changing
      CV_SEX  type Bu_Sexid   ."#EC NEEDED
  methods RETRIEVE_INTERNET_REFERENCE
    importing
      IV_NO_CONTEXT_BINDING  type Wdy_Boolean optional
    exporting
      ET_DB_INTERNET_REFERENCES  type Rcf_T_Mdl_Cand_Internet_Ref  ."#EC NEEDED
  methods SAVE
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SAVE_INTERNET_REFERENCES
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SET_CANDIDATE_DATA
    exporting
      ET_MESSAGES  type Bapirettab  ."#EC NEEDED
  methods SET_CHANNEL_VH
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IT_CHANNEL  type Rcf_T_Channel_List 
      IV_ATTRIBUTE_NAME  type String   ."#EC NEEDED
  methods SET_HROBJECT
    importing
      IS_APPL_HROBJECT  type Hrobject 
      IS_CAND_HROBJECT  type Hrobject   ."#EC NEEDED
  methods SET_NAVIGATION_FORBIDDEN
    importing
      IV_NAV_FORBIDDEN  type Wdy_Boolean   ."#EC NEEDED
  methods SET_REGION_ATTRIBUTES
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IO_PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  supply methods                                                   |
* +-------------------------------------------------------------------+

  methods SUPPLY_ATTRIBUTES
    importing
      NODE  type ref to If_Wd_Context_Node 
      PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
  methods SUPPLY_REGION
    importing
      NODE  type ref to If_Wd_Context_Node 
      PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_COMPONENTCONTROLLER,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node.     "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_personl_data. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_COMPONENTCONTROLLER_Ctr 
* Purp.: explicit definitions derived from application coding
*        <COMPONENTCONTROLLER> (COMPONENT)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240715 110316
*=====================================================================*
class CL_COMPONENTCONTROLLER_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAPPLICATIONSTATECHANGE . "#EC NEEDED
endmethod.

method WDDOBEFORENAVIGATION . "#EC NEEDED
endmethod.

method WDDOEXIT . "#EC NEEDED
endmethod.

method wddoinit .

  data: lo_current_controller                type ref to if_wd_controller,
        lo_nd_ui                             type ref to if_wd_context_node,
        lv_no_of_char_in_fields              type wd_this->element_ui-no_of_char_in_fields,
        lv_param_value                       type rcf_mdl_prm_value.

* instantiate message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  wd_this->go_message_manager = lo_current_controller->get_message_manager( ).

  try.

*     get the max. number of characters for description fields
      cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch(
        exporting
          iv_param_name  = 'NO_OF_CHAR_IN_FIELDS'
        importing
          ev_param_value = lv_param_value ).

      lv_no_of_char_in_fields = lv_param_value.

      lo_nd_ui = wd_context->get_child_node( name = wd_this->wdctx_ui ).
      lo_nd_ui->set_attribute(
        name =  `NO_OF_CHAR_IN_FIELDS`
        value = lv_no_of_char_in_fields ).

    catch cx_hrrcf_rfc_communication .
      wd_this->go_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).
  endtry.

endmethod.

method WDDOPOSTPROCESSING . "#EC NEEDED
endmethod.

METHOD build_address_table .

  DATA: lo_node         TYPE REF TO if_wd_context_node,
        lo_node_region  TYPE REF TO if_wd_context_node,
        lo_elem_region  TYPE REF TO if_wd_context_element,
        lt_address_data TYPE rcf_t_mdl_cand_commn_address,
        ls_address_data TYPE rcf_s_mdl_cand_commn_address,
        ls_address_data_new TYPE if_componentcontroller=>element_address,
        lt_elements   TYPE wdr_context_element_set,
        lo_element    TYPE REF TO if_wd_context_element.

  lo_node = wd_context->get_child_node( name = if_componentcontroller=>wdctx_address ).
  lt_elements = lo_node->get_elements( ).

  LOOP AT lt_elements INTO lo_element.
    CLEAR: ls_address_data_new, ls_address_data.
    CALL METHOD lo_element->get_static_attributes
      IMPORTING
        static_attributes = ls_address_data_new.

    MOVE-CORRESPONDING ls_address_data_new TO ls_address_data.

*   read region
    lo_node_region = lo_element->get_child_node( name = if_componentcontroller=>wdctx_region_values ).
    lo_elem_region = lo_node_region->get_lead_selection( ).
    IF lo_elem_region IS BOUND.
      lo_elem_region->get_attribute( EXPORTING name = 'REGION_KEY'
                                     IMPORTING value = ls_address_data-region ).
    ELSE.
      CLEAR ls_address_data-region.
    ENDIF.
    APPEND ls_address_data TO lt_address_data.
  ENDLOOP.
  rt_address_data = lt_address_data.

ENDMETHOD.

METHOD build_phone_table .

  DATA: lt_phone_data TYPE rcf_t_mdl_cand_commn_telephone,
        ls_phone_data TYPE rcf_s_mdl_cand_commn_telephone,
        lo_node       TYPE REF TO if_wd_context_node,
        lt_elements   TYPE wdr_context_element_set,
        lo_element    TYPE REF TO if_wd_context_element.

  lo_node = wd_context->get_child_node( name = if_componentcontroller=>wdctx_phone ).

  lt_elements = lo_node->get_elements( ).

  LOOP AT lt_elements INTO lo_element.
    CLEAR ls_phone_data.
    CALL METHOD lo_element->get_static_attributes
      IMPORTING
        static_attributes = ls_phone_data.
    APPEND ls_phone_data TO lt_phone_data.
  ENDLOOP.

  rt_phone_data = lt_phone_data.

ENDMETHOD.

METHOD check_consistency .

  DATA:
    lo_node_candidate                 TYPE REF TO if_wd_context_node,
    lo_node_personaldata              TYPE REF TO if_wd_context_node,
    ls_personaldata                   TYPE if_componentcontroller=>element_personaldata,
    lv_lastname                       LIKE ls_personaldata-lastname,
    lo_node_communicationdata         TYPE REF TO if_wd_context_node,
    ls_communicationdata              TYPE if_componentcontroller=>element_communicationdata ,
    lv_email                          LIKE ls_communicationdata-email.

  lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
  lo_node_personaldata = lo_node_candidate->get_child_node( name = if_componentcontroller=>wdctx_personaldata ).

  lo_node_personaldata->get_attribute( EXPORTING name =  `LASTNAME`
                                       IMPORTING value = lv_lastname ).

  IF lv_lastname IS INITIAL.
    ev_is_not_consistent = abap_true.
  ENDIF.

  lo_node_communicationdata = wd_context->get_child_node( name = if_componentcontroller=>wdctx_communicationdata ).
  lo_node_communicationdata->get_attribute( EXPORTING name =  `EMAIL`
                                            IMPORTING value = lv_email ).

  IF lv_email IS INITIAL.
    ev_is_not_consistent = abap_true.
    EV_MAIL_MISSING_FLAG = abap_true.
  ENDIF.

ENDMETHOD.

method get_candidate_data .

  data:
    lo_node_candidate                 type ref to if_wd_context_node,
    lo_elem_candidate                 type ref to if_wd_context_element,
    lo_node_address                   type ref to if_wd_context_node,
    lo_node_phone                     type ref to if_wd_context_node,
    lo_node_preferred_channel         type ref to if_wd_context_node,
    lo_node_communication             type ref to if_wd_context_node,
    lo_node_ireferences               type ref to if_wd_context_node,
    ls_candidate                      type if_componentcontroller=>element_candidate ,
    ls_hrobject                       type hrobject,
    lt_messages                       type bapirettab,
    ls_personal_data                  type rcf_s_mdl_cand_personal_data,
    lt_phone_data                     type rcf_t_mdl_cand_commn_telephone,
    ls_phone_data                     type rcf_s_mdl_cand_commn_telephone,
    lt_address_data                   type rcf_t_mdl_cand_commn_address,
    ls_address_data                   type rcf_s_mdl_cand_commn_address,
    lt_address_data_new               type if_componentcontroller=>elements_address,
    ls_address_data_new               type if_componentcontroller=>element_address,
    lv_preferred_phone                type rcf_comm_channel,
    lv_preferred_address              type rcf_comm_channel,
    lv_email                          type ad_smtpadr,
    lo_node_personaldata              type ref to if_wd_context_node,
    lo_elem_personaldata              type ref to if_wd_context_element,
    ls_personaldata                   type if_componentcontroller=>element_personaldata,
    ls_field_name                     type rcf_s_mdl_uis_fieldname,
    lt_field_name                     type rcf_t_mdl_uis_fieldname,
    lt_channel                        type rcf_t_channel_list,
    ls_channel                        type rcf_s_channel_list,
    lv_please_select_text             type string,
    lv_phone_lines                    type i,
    lv_address_lines                  type i.


  data: lo_current_controller type ref to if_wd_controller,
         lo_message_manager    type ref to if_wd_message_manager,
         lo_ex                 type ref to cx_root.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  call method lo_current_controller->get_message_manager
    receiving
      message_manager = lo_message_manager.

  try.

*     load some text for initial key in ddlb
      call method cl_wd_utilities=>get_otr_text_by_alias
        exporting
          alias      = 'PAOC_RCF_UI_SELF_SERVICES/PLEASE_SELECT'
        receiving
          alias_text = lv_please_select_text.

      lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
      lo_elem_candidate = lo_node_candidate->get_element(  ).
      lo_elem_candidate->get_attribute( exporting name =  `HROBJECT`
                                        importing value = ls_hrobject ).

      call method wd_assist->sc_retrieve_cand_data
        exporting
          is_cand_hrobject     = ls_hrobject
        importing
          et_messages          = lt_messages
          es_personal_data     = ls_personal_data
          et_address_data      = lt_address_data
          et_phone_data        = lt_phone_data
          ev_preferred_phone   = lv_preferred_phone
          ev_preferred_address = lv_preferred_address
          ev_email             = lv_email.

      append lines of lt_messages to et_messages.

      if ls_personal_data-sex = 0.
        clear ls_personal_data-sex.
      endif.

      lo_node_personaldata = lo_node_candidate->get_child_node( name = if_componentcontroller=>wdctx_personaldata ).
      lo_elem_personaldata = lo_node_personaldata->get_element( ).

*     set personal data to context
      move-corresponding ls_personal_data to ls_personaldata.
      lo_elem_personaldata->set_static_attributes( exporting static_attributes = ls_personaldata ).

*     set address data to context
      lo_node_address = wd_context->get_child_node( name = if_componentcontroller=>wdctx_address ).
      loop at lt_address_data into ls_address_data.
        move-corresponding ls_address_data to ls_address_data_new.
        ls_address_data_new-old_country = ls_address_data_new-country.
        append ls_address_data_new to lt_address_data_new.
      endloop.
      call method lo_node_address->bind_table
        exporting
          new_items = lt_address_data_new.

*     set phone data
      lo_node_phone = wd_context->get_child_node( name = if_componentcontroller=>wdctx_phone ).
      lo_node_phone->bind_table( lt_phone_data ).

*     set email
      lo_node_communication = wd_context->get_child_node( name = if_componentcontroller=>wdctx_communicationdata ).
      lo_node_communication->set_attribute( name = 'EMAIL' value = lv_email ).

      describe table lt_phone_data lines lv_phone_lines.
      describe table lt_address_data lines lv_address_lines.

      lo_node_preferred_channel = wd_context->get_child_node( name = if_componentcontroller=>wdctx_preferred_channel ).
      IF lv_phone_lines > 1.                                                              "N 1736938
        lo_node_preferred_channel->set_attribute( name = 'PHONE_CHANNEL_VISIBLE'
                                                  value = abap_true ).
      endif.
      IF lv_address_lines > 1.                                                            "N 1736938
        lo_node_preferred_channel->set_attribute( name = 'ADDRESS_CHANNEL_VISIBLE'
                                                  value = abap_true ).
      endif.

      lo_node_preferred_channel->set_attribute( name = 'PHONE_CHANNEL'
                                                value = lv_preferred_phone ).
      lo_node_preferred_channel->set_attribute( name = 'ADDRESS_CHANNEL'
                                                value = lv_preferred_address ).

*     load internet references
      if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.
        wd_this->retrieve_internet_reference(
          exporting
            iv_no_context_binding = abap_false ).
      endif.

********************************************************
* fill value helps
********************************************************

*     preferred phone number
      clear lt_channel.
      loop at lt_phone_data into ls_phone_data.
        ls_channel-channel = ls_phone_data-channel.
        ls_channel-description = ls_phone_data-channel_description.
        append ls_channel to lt_channel.
      endloop.
      set_channel_vh( io_node = lo_node_preferred_channel
                      iv_attribute_name = 'PHONE_CHANNEL'
                      it_channel = lt_channel ).

*     preferred address
      clear lt_channel.
      loop at lt_address_data into ls_address_data.
        ls_channel-channel = ls_address_data-channel.
        ls_channel-description = ls_address_data-channel_description.
        append ls_channel to lt_channel.
      endloop.
      set_channel_vh( io_node = lo_node_preferred_channel
                      iv_attribute_name = 'ADDRESS_CHANNEL'
                      it_channel = lt_channel ).

*     country
      ls_field_name-fieldname = 'COUNTRY'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      append ls_field_name to lt_field_name.

      call method cl_hrrcf_wd_services=>retrieve_value_helps
        exporting
          it_field_names  = lt_field_name
          io_context_node = lo_node_address
        importing
          et_messages     = lt_messages.

      append lines of lt_messages to et_messages.

*     title, gender, form of address, prefix, second title, other title
      clear: ls_field_name, lt_field_name.
      ls_field_name-fieldname = 'PREFIX1'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      append ls_field_name to lt_field_name.

      clear ls_field_name.
      ls_field_name-fieldname = 'TITLE'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      append ls_field_name to lt_field_name.

      call method cl_hrrcf_wd_services=>retrieve_value_helps
        exporting
          it_field_names  = lt_field_name
          io_context_node = lo_node_personaldata
        importing
          et_messages     = lt_messages.

      append lines of lt_messages to et_messages.

      clear: ls_field_name, lt_field_name.
      ls_field_name-fieldname = 'OTHERTITLE'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      ls_field_name-attribute_name = 'TITLE_SPPL'.
      append ls_field_name to lt_field_name.

      call method cl_hrrcf_wd_services=>retrieve_value_helps
        exporting
          it_field_names  = lt_field_name
          io_context_node = lo_node_personaldata
        importing
          et_messages     = lt_messages.

      append lines of lt_messages to et_messages.

      clear: ls_field_name, lt_field_name.
      ls_field_name-fieldname = 'TITLE'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      ls_field_name-attribute_name = 'TITLE_ACA2'.
      append ls_field_name to lt_field_name.

      clear ls_field_name.
      ls_field_name-fieldname = 'FORMOFADDRESS'.
      ls_field_name-init_key_included = abap_true.
      ls_field_name-init_value = lv_please_select_text.
      append ls_field_name to lt_field_name.

      call method cl_hrrcf_wd_services=>retrieve_value_helps
        exporting
          it_field_names  = lt_field_name
          io_context_node = lo_node_personaldata
        importing
          et_messages     = lt_messages.

      append lines of lt_messages to et_messages.

*     internet reference category
      if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.

        lo_node_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).

        clear: ls_field_name, lt_field_name.
        ls_field_name-fieldname = 'URL_CATEGORY'.
        ls_field_name-init_key_included = abap_true.
        ls_field_name-init_value = lv_please_select_text.
        ls_field_name-do_not_sort = abap_true.
        append ls_field_name to lt_field_name.

        call method cl_hrrcf_wd_services=>retrieve_value_helps
          exporting
            it_field_names  = lt_field_name
            io_context_node = lo_node_ireferences
          importing
            et_messages     = lt_messages.

        append lines of lt_messages to et_messages.

      endif.

**********************************
*     check validity of ddlb keys
**********************************

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'SEX'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'PREFIX1'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'FORMOFADDRESS'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'TITLE'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'TITLE_SPPL'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_personaldata
          iv_attribute_name = 'TITLE_ACA2'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_preferred_channel
          iv_attribute_name = 'ADDRESS_CHANNEL'.

      call method cl_hrrcf_wd_services=>check_ddlb_value_set
        exporting
          io_node           = lo_node_preferred_channel
          iv_attribute_name = 'PHONE_CHANNEL'.

      if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.
        call method cl_hrrcf_wd_services=>check_ddlb_value_set
          exporting
            io_node           = lo_node_ireferences
            iv_attribute_name = 'URL_CATEGORY'.
      endif.

    catch cx_root into lo_ex.

      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_ex.

      call method lo_message_manager->report_t100_message
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E'.

  endtry.

endmethod.

method IS_NAVIGATION_FORBIDDEN .
  ev_navigation_forbidden = wd_this->gv_nav_forbidden.
endmethod.

method IS_SUBCOMPONENT_NOT_VISIBLE . "#EC NEEDED
endmethod.

METHOD load_regions .

  DATA:
    lv_country                        TYPE land1,
    lv_region                         TYPE string,
    lv_index                          TYPE i,
    lt_messages                       TYPE bapirettab,
    lv_enabled                        TYPE wdy_boolean.

  DATA: lt_region                     TYPE rcf_t_mdl_vh,
        ls_region                     TYPE rcf_s_mdl_vh,
        lv_empty_region_text          TYPE string.

  DATA:
    lt_region_values                  TYPE TABLE OF if_componentcontroller=>element_region_values,
    ls_region_values                  TYPE if_componentcontroller=>element_region_values.


  DATA: lo_current_controller TYPE REF TO if_wd_controller,
        lo_message_manager    TYPE REF TO if_wd_message_manager,
        lo_ex                 TYPE REF TO cx_root.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  CALL METHOD lo_current_controller->get_message_manager
    RECEIVING
      message_manager = lo_message_manager.

  TRY.

      io_parent_element->get_attribute( EXPORTING name = 'COUNTRY'
                                        IMPORTING value = lv_country ).

      io_parent_element->get_attribute( EXPORTING name = 'REGION'
                                        IMPORTING value = lv_region ).

* load regions for country
      CALL METHOD wd_assist->sc_retrieve_regions
        EXPORTING
          iv_country         = lv_country
          iv_location_source = space
        IMPORTING
          et_region          = lt_region
          et_messages        = lt_messages.

      LOOP AT lt_region INTO ls_region.
        ls_region_values-region_key = ls_region-key.
        ls_region_values-region_name = ls_region-value.
        APPEND ls_region_values TO lt_region_values.
        IF lv_region = ls_region-key.
          lv_index = sy-tabix.
        ENDIF.
      ENDLOOP.

      io_node->bind_table( lt_region_values ).
      IF lv_index > 0.
        io_node->set_lead_selection_index( lv_index ).
      ELSE.
        CLEAR lv_region.
        io_parent_element->set_attribute( EXPORTING name = 'REGION'
                                                    value = lv_region ).
      ENDIF.

    CATCH cx_root INTO lo_ex.
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = lo_ex.

      CALL METHOD lo_message_manager->report_t100_message
        EXPORTING
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E'.

  ENDTRY.

ENDMETHOD.

method retrieve_foa_sex .

  data: lo_ex                 type ref to cx_root,
        lt_messages           type bapirettab.

  try.

*     retrieve sex for form of address
      wd_assist->sc_retrieve_foa_sex(
        exporting
          iv_formofaddress = iv_formofaddress
        importing
          et_messages      = lt_messages
        changing
          cv_sex           = cv_sex ).

*     check return messages
      cl_hrrcf_wd_services=>check_return_messages(
        exporting
          it_messages        = lt_messages
          io_message_manager = wd_this->go_message_manager ).

    catch cx_root into lo_ex.
      cl_hrrcf_exception_handler=>write_exception_log(
        exporting
          ex = lo_ex ).
      wd_this->go_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).
  endtry.

endmethod.

method retrieve_internet_reference .


  data: lo_nd_candidate         type ref to if_wd_context_node,
        lo_nd_ireferences       type ref to if_wd_context_node,
        lt_messages             type bapirettab,
        lt_ireferences          type wd_this->elements_ireferences,
        ls_internet_reference   type rcf_s_mdl_cand_internet_ref,
        ls_ireference           type wd_this->element_ireferences,
        ls_hrobject             type wd_this->element_candidate-hrobject,
        lv_error                type wdy_boolean.

  try.

      clear: et_db_internet_references.

      lo_nd_candidate = wd_context->get_child_node( name = wd_this->wdctx_candidate ).
      lo_nd_candidate->get_attribute(
        exporting
          name  =  `HROBJECT`
        importing
          value = ls_hrobject ).

      wd_assist->sc_retrieve_internet_reference(
        exporting
          is_cand_hrobject       = ls_hrobject
        importing
          et_internet_references = et_db_internet_references
          et_messages            = lt_messages ).

      cl_hrrcf_wd_services=>check_return_messages(
        exporting
          it_messages        = lt_messages
          io_message_manager = wd_this->go_message_manager
        receiving
          rv_error_indicator = lv_error ).

      if lv_error              eq abap_false and
         iv_no_context_binding eq abap_false.

*       convert the list of internet references for UI representation
        loop at et_db_internet_references into ls_internet_reference.
          clear ls_ireference.
          move-corresponding ls_internet_reference to ls_ireference.
          if ls_ireference-internet_ref_url_txt is not initial.
            ls_ireference-test_link_visible = abap_true.
          else.
            ls_ireference-internet_ref_url_txt = wd_assist->gc_default_link.
          endif.
          condense ls_ireference-internet_ref_url_txt no-gaps.                       "N1730864
          append ls_ireference to lt_ireferences.
        endloop.

*       add a default entry if internet references do not exist yet
        if lt_ireferences is initial.
          ls_ireference-url_category = 0.
          ls_ireference-internet_ref_url_txt = wd_assist->gc_default_link.
          append ls_ireference to lt_ireferences.
        endif.

        lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
        lo_nd_ireferences->bind_table(
          exporting
            new_items            = lt_ireferences
            set_initial_elements = abap_true ).

      endif.

    catch cx_root.
      wd_this->go_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).
  endtry.

endmethod.

method save .

  data: lt_messages       type bapirettab.

  wd_this->set_candidate_data(
    importing
      et_messages = et_messages ).

  if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.
    wd_this->save_internet_references(
      importing
        et_messages = lt_messages ).
    append lines of lt_messages to et_messages.
  endif.

endmethod.

method save_internet_references .

  data: lo_nd_candidate             type ref to if_wd_context_node,
        lo_nd_ireferences           type ref to if_wd_context_node,
        lt_internet_references      type rcf_t_mdl_cand_internet_ref,
        lt_ireferences              type wd_this->elements_ireferences,
        lt_messages                 type bapirettab,
        ls_internet_reference       type rcf_s_mdl_cand_internet_ref,
        ls_ireference               type wd_this->element_ireferences,
        ls_ireference_5113          type p5113,
        ls_hrobject                 type wd_this->element_candidate-hrobject,
        lv_index                    type i.

  try.

      clear: et_messages.

      lo_nd_candidate = wd_context->get_child_node( name = wd_this->wdctx_candidate ).
      lo_nd_candidate->get_attribute(
        exporting
          name  = `HROBJECT`
        importing
          value = ls_hrobject ).

*     get internet references from DB
      wd_this->retrieve_internet_reference(
        exporting
          iv_no_context_binding     = abap_true
        importing
          et_db_internet_references = lt_internet_references ).

*     get internet references from UI
      lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
      lo_nd_ireferences->get_static_attributes_table(
        importing
          table = lt_ireferences ).

*     check if a DB entry has been changed or deleted
      loop at lt_internet_references into ls_internet_reference.

        clear: lt_messages,
               ls_ireference.

        read table lt_ireferences
          into ls_ireference
          with key internet_ref_url = ls_internet_reference-internet_ref_url. "the URL pointer is always filled, unique and can't be changed via UI

        lv_index = sy-tabix.

*       update the DB entry if it is not initial; otherwise delete it
        if sy-subrc eq 0.

          condense ls_ireference-internet_ref_url_txt.

          if ls_internet_reference-description_txt co space.
            condense ls_internet_reference-description_txt.
          endif.

          if ls_ireference-internet_ref_url_txt is not initial                and
             ls_ireference-internet_ref_url_txt ne wd_assist->gc_default_link and
             ls_ireference-url_category is not initial.

*           update the DB entry only if something has been changed, because every update means that new KPRO documents are created
            if ls_internet_reference-url_category ne ls_ireference-url_category                 or
               ls_internet_reference-internet_ref_url_txt ne ls_ireference-internet_ref_url_txt or
               ls_internet_reference-description_txt ne ls_ireference-description_txt.

              ls_internet_reference-url_category = ls_ireference-url_category.
              ls_internet_reference-internet_ref_url_txt = ls_ireference-internet_ref_url_txt.
              ls_internet_reference-description_txt = ls_ireference-description_txt.

              wd_assist->sc_update_internet_reference(
                exporting
                  is_cand_hrobject           = ls_hrobject
                  is_internet_reference      = ls_internet_reference
                importing
                  et_messages                = lt_messages ).
              append lines of lt_messages to et_messages.

            endif.

          else.

            wd_assist->sc_delete_internet_reference(
              exporting
                is_cand_hrobject      = ls_hrobject
                is_internet_reference = ls_internet_reference
              importing
                et_messages           = lt_messages ).
            append lines of lt_messages to et_messages.

          endif.

          delete lt_ireferences index lv_index.

*       delete the DB entry
        else.

          wd_assist->sc_delete_internet_reference(
            exporting
              is_cand_hrobject      = ls_hrobject
              is_internet_reference = ls_internet_reference
            importing
              et_messages           = lt_messages ).
          append lines of lt_messages to et_messages.

        endif.

      endloop.

*     save the new internet reference entries
      loop at lt_ireferences into ls_ireference.

        clear: lt_messages,
               ls_internet_reference.

        condense ls_ireference-internet_ref_url_txt.

        if ls_internet_reference-description_txt co space.
          condense ls_internet_reference-description_txt.
        endif.

        if ls_ireference-internet_ref_url_txt is not initial                and
           ls_ireference-internet_ref_url_txt ne wd_assist->gc_default_link and
           ls_ireference-url_category is not initial.

          ls_internet_reference-url_category = ls_ireference-url_category.
          ls_internet_reference-internet_ref_url_txt = ls_ireference-internet_ref_url_txt.
          ls_internet_reference-description_txt = ls_ireference-description_txt.

          wd_assist->sc_create_internet_reference(
            exporting
              is_cand_hrobject      = ls_hrobject
              is_internet_reference = ls_internet_reference
            importing
              et_messages           = lt_messages ).
          append lines of lt_messages to et_messages.

        endif.

      endloop.

*     it's necessary to keep the field INTERNET_REF_URL up to date in the context; otherwise it won't be possible to determine the
*     DB entries the next time
      wd_this->retrieve_internet_reference(
        exporting
          iv_no_context_binding  = abap_false ).

    catch cx_root.
      wd_this->go_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).
  endtry.

endmethod.

method set_candidate_data .

  data: ls_personal_data                  type rcf_s_mdl_cand_personal_data,
        lv_email                          type ad_smtpadr,
        lt_phone_data                     type rcf_t_mdl_cand_commn_telephone,
        ls_phone_data                     type rcf_s_mdl_cand_commn_telephone,
        lt_address_data                   type rcf_t_mdl_cand_commn_address,
        ls_address_data                   type rcf_s_mdl_cand_commn_address,
        lv_preferred_phone_channel        type rcf_comm_channel,
        lv_preferred_address_channel      type rcf_comm_channel,
        ls_cand_hrobject                  type hrobject.

  data: lo_node_candidate                 type ref to if_wd_context_node,
        lo_elem_candidate                 type ref to if_wd_context_element,
        lo_node_pref_channel              type ref to if_wd_context_node,
        lo_node_communication             type ref to if_wd_context_node,
        lo_node_personaldata              type ref to if_wd_context_node,
        lo_elem_personaldata              type ref to if_wd_context_element,
        ls_personaldata                   type if_componentcontroller=>element_personaldata .

  data: ls_message                        type bapiret2.

  data: lo_current_controller             type ref to if_wd_controller,
        lo_message_manager                type ref to if_wd_message_manager,
        lo_ex                             type ref to cx_root.

* get message manager
  lo_current_controller ?= wd_this->wd_get_api( ).
  call method lo_current_controller->get_message_manager
    receiving
      message_manager = lo_message_manager.

  try.

      lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
      lo_node_personaldata = lo_node_candidate->get_child_node( name = if_componentcontroller=>wdctx_personaldata ).
      lo_elem_personaldata = lo_node_personaldata->get_element(  ).

* read personal data
      lo_elem_personaldata->get_static_attributes( importing static_attributes = ls_personaldata ).
      move-corresponding ls_personaldata to ls_personal_data.

* read candidate object
      lo_elem_candidate = lo_node_candidate->get_element(  ).
      lo_elem_candidate->get_attribute( exporting name =  `HROBJECT`
                                        importing value = ls_cand_hrobject ).

* read email
      lo_node_communication = wd_context->get_child_node( name = if_componentcontroller=>wdctx_communicationdata ).
      lo_node_communication->get_attribute( exporting name = 'EMAIL'
                                            importing value = lv_email ).

* read preferred channels
      lo_node_pref_channel = wd_context->get_child_node( name = if_componentcontroller=>wdctx_preferred_channel ).
      lo_node_pref_channel->get_attribute( exporting name = 'ADDRESS_CHANNEL'
                                           importing value = lv_preferred_address_channel ).
      lo_node_pref_channel->get_attribute( exporting name = 'PHONE_CHANNEL'
                                           importing value = lv_preferred_phone_channel ).

* phone number list
      lt_phone_data = wd_this->build_phone_table( ).

* build address list
      lt_address_data = wd_this->build_address_table( ).

* save data
      call method wd_assist->sc_save_cand_data
        exporting
          is_personal_data             = ls_personal_data
          is_cand_hrobject             = ls_cand_hrobject
          iv_preferred_phone_channel   = lv_preferred_phone_channel
          iv_preferred_address_channel = lv_preferred_address_channel
          iv_email                     = lv_email
          it_phone_data                = lt_phone_data
          it_address_data              = lt_address_data
        importing
          et_messages                  = et_messages.

    catch cx_root into lo_ex.
      call method cl_hrrcf_exception_handler=>write_exception_log
        exporting
          ex = lo_ex.

      call method lo_message_manager->report_t100_message
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E'.

  endtry.

endmethod.

METHOD set_channel_vh .

  DATA: lo_node_info        TYPE REF TO if_wd_context_node_info,
        lt_value_set        TYPE tihttpnvp,
        ls_value_set        TYPE ihttpnvp,
        lv_empty_value_text TYPE string,
        ls_channel          TYPE rcf_s_channel_list.

  lo_node_info = io_node->get_node_info( ).

  CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
    EXPORTING
      alias      = 'PAOC_RCF_UI_SELF_SERVICES/PLEASE_SELECT'
    RECEIVING
      alias_text = lv_empty_value_text.

* add empty line for initial selection
  ls_value_set-name  = '00'.
  ls_value_set-value = lv_empty_value_text.
  APPEND ls_value_set TO lt_value_set.
  LOOP AT it_channel INTO ls_channel.
    CLEAR ls_value_set.
    ls_value_set-name = ls_channel-channel.
    ls_value_set-value = ls_channel-description.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  SORT lt_value_set BY value.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = iv_attribute_name
      value_set = lt_value_set.

ENDMETHOD.

METHOD set_hrobject .

  DATA:
    lo_node_candidate                 TYPE REF TO if_wd_context_node,
    lo_elem_candidate                 TYPE REF TO if_wd_context_element,
    ls_candidate                      TYPE if_componentcontroller=>element_candidate,
    ls_hrobject                       TYPE hrobject.

  lo_node_candidate = wd_context->get_child_node( name = if_componentcontroller=>wdctx_candidate ).
  lo_elem_candidate = lo_node_candidate->get_element(  ).
  lo_elem_candidate->get_attribute( EXPORTING name =  `HROBJECT`
                                    IMPORTING value = ls_hrobject ).

*  IF ls_hrobject <> is_cand_hrobject.           "N_1511915
    lo_elem_candidate->set_attribute( EXPORTING name =  `HROBJECT`
                                                value = is_cand_hrobject ).
    wd_this->get_candidate_data( ).
*  ENDIF.

ENDMETHOD.

METHOD set_navigation_forbidden .

  wd_this->gv_nav_forbidden = iv_nav_forbidden.

ENDMETHOD.

METHOD set_region_attributes .

  DATA: lv_country TYPE land1,
        lv_enabled TYPE wdy_boolean,
        lo_element TYPE REF TO if_wd_context_element,
        lo_node_regions TYPE REF TO if_wd_context_node.

  lo_node_regions = io_parent_element->get_child_node( name = if_componentcontroller=>wdctx_region_values ).


*  io_parent_element->get_attribute( EXPORTING name = 'COUNTRY'
*                                    IMPORTING value = lv_country ).

*  IF lv_country IS NOT INITIAL.
  IF lo_node_regions->get_element_count( ) > 0.
    lv_enabled = abap_true.
  ELSE.
    lv_enabled = abap_false.
  ENDIF.

  lo_element = io_node->create_element( ).
  lo_element->set_attribute( name = 'REGION_ENABLED' value = lv_enabled ).
  io_node->bind_element( lo_element ).

ENDMETHOD.

* +-------------------------------------------------------------------+
* |  supply methods                                                   |
* +-------------------------------------------------------------------+

METHOD supply_attributes .

  wd_this->set_region_attributes( io_node = node io_parent_element = parent_element ).

ENDMETHOD.

METHOD supply_region .

  wd_this->load_regions( io_node = node
                io_parent_element = parent_element ).

ENDMETHOD.

endclass.
 