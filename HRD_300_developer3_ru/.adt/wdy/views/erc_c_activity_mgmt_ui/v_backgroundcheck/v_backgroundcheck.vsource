*=====================================================================*
* Intf.: if_v_backgroundcheck  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <V_BACKGROUNDCHECK> of
*        component:   <erc_c_activity_mgmt_ui>
* UDate: 20240723 161439
*=====================================================================*
interface if_v_backgroundcheck.
 
* +-------------------------------------------------------------------+
* |  context type definitions                                         |
* +-------------------------------------------------------------------+

  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_bgc_activity type string value `BGC_ACTIVITY`.
  types:
    Element_bgc_activity type RCF_S_ACT_BGC_DETAILS_PL,
    Elements_bgc_activity type 
       standard table of Element_bgc_activity
       with default key. "#EC NEEDED
  constants:
    wdctx_bgc_duplicates type string value `BGC_DUPLICATES`.
  types:
    Element_bgc_duplicates type RCF_S_BGC_DUPL_ORDER_UI,
    Elements_bgc_duplicates type 
       standard table of Element_bgc_duplicates
       with default key. "#EC NEEDED
  constants:
    wdctx_bgc_scrn_status type string value `BGC_SCRN_STATUS`.
  types:
    Element_bgc_scrn_status type T77RCF_BGCSSD,
    Elements_bgc_scrn_status type 
       standard table of Element_bgc_scrn_status
       with default key. "#EC NEEDED
  constants:
    wdctx_ui type string value `UI`.
  types:
    begin of Element_ui,
      TOGGLE_ORDER  type WDY_BOOLEAN,
      TOGGLE_VENDOR  type WDY_BOOLEAN,
      TOGGLE_RESULT  type WDY_BOOLEAN,
      TOGGLE_SCRN  type WDY_BOOLEAN,
      PACKAGE_ACTIVE  type WDY_BOOLEAN,
      ORDER_BUTTON_ACTIVE  type WDY_BOOLEAN,
      VENDOR_ACTIVE  type WDY_BOOLEAN,
      FINAL_RESULT  type WDY_BOOLEAN,
      NOTE  type WDY_BOOLEAN,
    end of Element_ui,  "#EC NEEDED
    Elements_ui type 
       standard table of Element_ui
       with default key. "#EC NEEDED
  constants:
    wdctx_visibility type string value `VISIBILITY`.
  types:
    begin of Element_visibility,
      VENDOR_PACKAGE  type WDY_BOOLEAN,
      ORDER_DETAIL  type WDY_BOOLEAN,
      RESULT_DETAIL  type WDY_BOOLEAN,
      SCREENING_STATUS  type WDY_BOOLEAN,
      TOGGLE_AND_SPACER  type WDY_BOOLEAN,
      VENDOR_HOMEPAGE  type WDY_BOOLEAN,
      REQUEST_UPDATE  type WDY_BOOLEAN,
      NOTE  type WDY_BOOLEAN,
      VIEW_REPORT  type WDY_BOOLEAN,
      ORDER_STATUS_ON  type WDY_BOOLEAN,
    end of Element_visibility,  "#EC NEEDED
    Elements_visibility type 
       standard table of Element_visibility
       with default key. "#EC NEEDED
  methods INITIALIZE  ."#EC NEEDED
  methods PROCESS_MESSAGES  ."#EC NEEDED
  methods READ_DUPLICATES_DETAILS
    importing
      IT_DUPLICATES  type Rcf_T_Bgc_Dupl_Order 
      IV_PACKAGE  type String 
    returning
      value(ET_DUPLICATES_UI)  type Rcf_T_Bgc_Dupl_Order_Ui  ."#EC NEEDED
  methods SET_DISPLAY_FIELDS
    importing
      MODE  type Char1   ."#EC NEEDED
  methods SET_PACKAGE_FIELD
    importing
      DISPLAY_MODE  type Wdy_Boolean optional  ."#EC NEEDED
  methods UPDATE_SCREENING_STATUS
    importing
      IV_SSD_GUID  type Rcf_Act_Bgc_Ssd_Guid   ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_VIEW_CONTROLLER. "#EC NEEDED
 
 
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  action getters                                                   |
* +-------------------------------------------------------------------+

  methods Get_init_order_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_package_selected_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_request_update_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_set_final_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_toggle_order_detail_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_toggle_result_detail_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_toggle_scrn_detail_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_toggle_vendor_pack_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_vendor_selected_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_view_report_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  controller <componentcontroller>
*            of usage   <49zrgyyhcwvijoabb574d3q6c>
**********
  methods  get_componentcontroller_ctr
    returning
      value(Result) type ref to ig_componentcontroller. "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONINIT_ORDER
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONPACKAGE_SELECTED
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONREQUEST_UPDATE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_FINAL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_ORDER_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_RESULT_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_SCRN_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_VENDOR_PACK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONVENDOR_SELECTED
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONVIEW_REPORT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    GT_FINAL_RESULT  type T77rcf_Bgcrslt_T_Tab.
  data: 
    GT_MSG  type Bapirettab.
  data: 
    GT_ORDER_STATUS  type T77rcf_Bgcords_T_Tab.
  data: 
    GT_ORD_LIST  type Rcf_T_Mass_Proc_Activities.
  data: 
    GT_PACKAGES  type Rcf_T_Ui_Valuehelp.
  data: 
    GT_VENDORS  type Rcf_T_Ui_Valuehelp.
  data: 
    GT_VENDOR_RESULT  type T77rcf_Bgcvres_T_Tab.
  data: 
    GV_PACKAGE_ID  type Rcf_Vnd_Package_Id.
  data: 
    GV_VENDOR  type Rcf_Vendor.
  data: 
    GV_VENDOR_HOMEPAGE  type Url.
  data: 
    GV_VENDOR_URI  type Rcf_Act_Vendor_Uri.
  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Activity_Mgmt_Ui.
endinterface.
*=====================================================================*
* Class: CL_V_BACKGROUNDCHECK_Ctr
* Purp.: definitions for application defined methods of controller
*        V_BACKGROUNDCHECK (VIEW)
* UDate: 20240723 161439
*=====================================================================*
class CL_V_BACKGROUNDCHECK_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_V_BACKGROUNDCHECK
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_activity_mgmt_ui.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAFTERACTION  ."#EC NEEDED
  methods WDDOBEFOREACTION  ."#EC NEEDED
  methods WDDOEXIT  ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOMODIFYVIEW
    importing
      FIRST_TIME  type Wdy_Boolean 
      VIEW  type ref to If_Wd_View   ."#EC NEEDED
  methods WDDOONCONTEXTMENU
    importing
      CONTEXT_MENU_EVENT  type ref to If_Wd_Context_Menu_Event 
      CONTEXT_MENU_MANAGER  type ref to If_Wd_Context_Menu_Manager 
    returning
      value(MENU)  type ref to Cl_Wd_Menu  ."#EC NEEDED
  methods INITIALIZE  ."#EC NEEDED
  methods PROCESS_MESSAGES  ."#EC NEEDED
  methods READ_DUPLICATES_DETAILS
    importing
      IT_DUPLICATES  type Rcf_T_Bgc_Dupl_Order 
      IV_PACKAGE  type String 
    returning
      value(ET_DUPLICATES_UI)  type Rcf_T_Bgc_Dupl_Order_Ui  ."#EC NEEDED
  methods SET_DISPLAY_FIELDS
    importing
      MODE  type Char1   ."#EC NEEDED
  methods SET_PACKAGE_FIELD
    importing
      DISPLAY_MODE  type Wdy_Boolean optional  ."#EC NEEDED
  methods UPDATE_SCREENING_STATUS
    importing
      IV_SSD_GUID  type Rcf_Act_Bgc_Ssd_Guid   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONINIT_ORDER
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONPACKAGE_SELECTED
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONREQUEST_UPDATE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_FINAL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_ORDER_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_RESULT_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_SCRN_DETAIL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONTOGGLE_VENDOR_PACK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONVENDOR_SELECTED
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONVIEW_REPORT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_V_BACKGROUNDCHECK,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node,     "#EC NEEDED
    wd_Comp_Controller  type ref to Ig_ComponentController. "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_activity_mgmt_ui. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_V_BACKGROUNDCHECK_Ctr 
* Purp.: explicit definitions derived from application coding
*        <V_BACKGROUNDCHECK> (VIEW)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240723 161439
*=====================================================================*
class CL_V_BACKGROUNDCHECK_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Comp_Controller = Wd_This->get_ComponentController_Ctr( ).
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

METHOD wddoafteraction .

  CHECK wd_comp_controller->gv_bgc_refresh NE abap_false.

  DATA: lo_nd_bgc_duplicates  TYPE REF TO if_wd_context_node,
        lt_dup                TYPE rcf_t_bgc_dupl_order_ui,
        ls_dup                TYPE rcf_s_bgc_dupl_order_ui,
        cand                  TYPE rcf_s_mass_proc_activities,
        it_msg                TYPE bapirettab,
        iv_failed             TYPE wdy_boolean,   "#EC NEEDED
        lt_act_guid           TYPE rcf_t_act_guid.

  DATA: lo_window_manager TYPE REF TO if_wd_window_manager,
        lo_api_component  TYPE REF TO if_wd_component,
        lo_window         TYPE REF TO if_wd_window,
        lv_url            TYPE string.

  lo_nd_bgc_duplicates = wd_context->get_child_node( name = wd_this->wdctx_bgc_duplicates ).
  CALL METHOD lo_nd_bgc_duplicates->get_static_attributes_table
    IMPORTING
      table = lt_dup.

  LOOP AT lt_dup INTO ls_dup.
    MOVE-CORRESPONDING ls_dup TO cand.   "#EC ENHOK
    APPEND cand-hrobject TO wd_comp_controller->gt_hrobject.
  ENDLOOP.

  SORT wd_comp_controller->gt_hrobject.
  DELETE ADJACENT DUPLICATES FROM wd_comp_controller->gt_hrobject.
  wd_comp_controller->save_bgc_activity( IMPORTING et_message =  it_msg
                                                   et_act_guid = lt_act_guid
                                                   ev_failed   = iv_failed ).
  LOOP AT wd_comp_controller->gt_hrobject INTO cand-hrobject.
    READ TABLE lt_act_guid INTO cand-act_guid INDEX sy-tabix.
    APPEND cand TO wd_this->gt_ord_list.
    wd_comp_controller->gv_act_guid = cand-act_guid.
  ENDLOOP.

  CHECK wd_this->gt_ord_list IS NOT INITIAL.

  CLEAR wd_this->gv_vendor_uri.                                "N_1741122

* submit orders
  CALL METHOD wd_assist->bgc_order_submit
    EXPORTING
      iv_vendor           = wd_this->gv_vendor
      iv_package          = wd_this->gv_package_id
      it_hrobject_act_tab = wd_this->gt_ord_list
    IMPORTING
      iv_vendor_uri       = wd_this->gv_vendor_uri             "N_1741122
      et_message          = it_msg.

  APPEND LINES OF it_msg TO wd_this->gt_msg.

  IF NOT wd_this->gv_vendor_uri IS INITIAL.                    "N_1741122
* Launch the vendor URL if the field 'Launch Web' is enabled in
* view V77RCF_BGCVNDINF
   lv_url  = wd_this->gv_vendor_uri.
   lo_api_component  = wd_comp_controller->wd_get_api( ).
   lo_window_manager = lo_api_component->get_window_manager( ).

   CALL METHOD lo_window_manager->create_external_window
    EXPORTING
      url            = lv_url
      modal          = abap_false
      has_menubar    = abap_true
      is_resizable   = abap_true
      has_scrollbars = abap_true
      has_statusbar  = abap_true
      has_toolbar    = abap_true
      has_location   = abap_true
    RECEIVING
      window         = lo_window.

   lo_window->open( ).

  ENDIF.                                                       "N_1741122

ENDMETHOD.

method WDDOBEFOREACTION .
  data lo_api_controller type ref to if_wd_view_controller.
  data lo_action         type ref to if_wd_action.

  lo_api_controller = wd_this->wd_get_api( ).
  lo_action = lo_api_controller->get_current_action( ).

  if lo_action is bound.
    case lo_action->name.
      when '...'.

    endcase.
  endif.
endmethod.

METHOD wddoexit .

  CHECK wd_comp_controller->gv_bgc_mode = '5'.

*  IF wd_comp_controller->gt_hrobject IS NOT INITIAL.
*  ENDIF.
*  DATA lo_componentcontroller TYPE REF TO ig_componentcontroller .
*  DATA lt_message             TYPE bapirettab.
*  DATA lo_api                 TYPE REF TO if_wd_controller.
*  DATA lv_failed              TYPE wdy_boolean.
*
*  lo_componentcontroller =   wd_this->get_componentcontroller_ctr( ).
*  lo_api ?= wd_this->wd_get_api( ).
*
*  lo_componentcontroller->save( IMPORTING et_message = lt_message
*                                          ev_failed = lv_failed ).
*
*  data lo_api_controller type ref to if_wd_view_controller.
*  data lo_action         type ref to if_wd_action.
*
*  lo_api_controller = wd_this->wd_get_api( ).
*  lo_action = lo_api_controller->get_current_action( ).
*
*  if lo_action is bound.
*    case lo_action->name.
*      when '...'.
*
*    endcase.
*    endif.
ENDMETHOD.

METHOD wddoinit .

  DATA lo_nd_bgc       TYPE REF TO if_wd_context_node.
  DATA ls_bgc          TYPE wd_this->element_bgc_activity.
  DATA lo_controller   TYPE REF TO if_wd_controller.

  lo_controller ?= wd_comp_controller->wd_get_api( ).
  CALL METHOD lo_controller->get_message_manager
    RECEIVING
      message_manager = wd_comp_controller->go_message_manager.

  lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_nd_bgc->get_static_attributes( IMPORTING static_attributes = ls_bgc ).

* initialization
  wd_this->gv_vendor = ls_bgc-vendor_id.
  wd_this->gv_package_id = ls_bgc-package_id.

  wd_this->initialize( ).
  wd_this->process_messages( ).

  IF ls_bgc-vendor_id IS NOT INITIAL.
    wd_this->set_package_field( abap_true ).
    wd_this->gv_vendor_homepage = cl_hrrcf_co_bgc_pl=>get_vendor_homepage( wd_this->gv_vendor ).
  ENDIF.

  IF wd_comp_controller->gv_bgc_mode = '5'. "set final result, lauched from POWL
    wd_this->set_display_fields( '5' ).
  ELSEIF ls_bgc-ordered_on IS NOT INITIAL.
    wd_this->set_display_fields( '1' ).     "display all fields only
    wd_this->update_screening_status( ls_bgc-ssd_guid ).
  ELSEIF ls_bgc-vendor_id IS INITIAL.
    wd_this->set_display_fields( '2' ).     "enable vendor selection
  ELSEIF ls_bgc-package_id IS INITIAL.
    wd_this->set_display_fields( '3' ).     "enable package selection
  ELSE.
    wd_this->set_display_fields( '4' ).     "enable order button
  ENDIF.

ENDMETHOD.

METHOD wddomodifyview .

  IF wd_comp_controller->gv_bgc_mode = '5' AND first_time IS NOT INITIAL.

    DATA lv_view TYPE REF TO if_wd_view_controller.

    lv_view = wd_this->wd_get_api( ).
*   Subscribe Actions to buttons
    wd_comp_controller->go_activity_window->subscribe_to_button_event( button = if_wd_window=>co_button_ok
                                                                      action_name = 'SET_FINAL'
                                                                      action_view = lv_view ).
*    wd_comp_controller->go_activity_window->subscribe_to_button_event( button = if_wd_window=>co_button_cancel
*                                                                      action_name = 'CANCEL'
*                                                                      action_view = lv_view ).
*
  ENDIF.

  CHECK wd_comp_controller->gv_bgc_refresh NE abap_false.

  DATA: it_msg TYPE bapirettab.                             "#EC NEEDED

  IF wd_this->gt_msg IS NOT INITIAL.
    wd_this->process_messages( ).
  ENDIF.

  wd_comp_controller->gv_bgc_refresh = abap_false.

  DATA line TYPE i.
  DESCRIBE TABLE wd_this->gt_ord_list LINES line.
*  CHECK line > 0.
*  IF wd_comp_controller->gv_act_guid IS NOT INITIAL.
  IF line = 1.
    DATA: lv_cand         TYPE rcf_s_mass_proc_activities,
          lo_nd_bgc       TYPE REF TO if_wd_context_node,
          ls_bgc          TYPE wd_this->element_bgc_activity.

    READ TABLE wd_this->gt_ord_list INTO lv_cand INDEX 1.
    wd_comp_controller->gv_act_guid = lv_cand-act_guid.
    wd_comp_controller->read_bgc_activity( IMPORTING et_message = it_msg ).
    lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
    lo_nd_bgc->get_static_attributes( IMPORTING static_attributes = ls_bgc ).
    REFRESH wd_this->gt_ord_list.

    IF ls_bgc-ordered_on IS NOT INITIAL.
      wd_this->set_display_fields( '1' ).     "display all fields only
      wd_this->update_screening_status( ls_bgc-ssd_guid ).
    ELSEIF ls_bgc-vendor_id IS INITIAL.
      wd_this->set_display_fields( '2' ).     "enable vendor selection
    ELSEIF ls_bgc-package_id IS INITIAL.
      wd_this->set_display_fields( '3' ).     "enable package selection
    ELSE.
      wd_this->set_display_fields( '4' ).     "enable order button
    ENDIF.
  ELSEIF line = 0.
    wd_this->set_display_fields( '4' ).
  ELSE.
    REFRESH wd_this->gt_ord_list.
    wd_this->set_display_fields( '1' ).
  ENDIF.

ENDMETHOD.

method WDDOONCONTEXTMENU . "#EC NEEDED
endmethod.

METHOD initialize .

  DATA: lo_bgc_info         TYPE REF TO if_wd_context_node_info,
        lo_bgc              TYPE REF TO if_wd_context_node,
        le_bgc              TYPE REF TO if_wd_context_element,
        lt_vendors          TYPE rcf_t_ui_valuehelp,
        ls_vendor           TYPE rcf_s_ui_valuehelp,
        ls_final_result     TYPE t77rcf_bgcrslt_t,
        lt_value            TYPE wdr_context_attr_value_list,
        ls_value            TYPE wdr_context_attr_value,
        lv_lines            TYPE i,
        lv_text             TYPE string.

  CONSTANTS: lc_empty_note     TYPE string               VALUE '',
             lc_order_servtype TYPE rcf_act_bgc_servtype VALUE '01',
             lc_bgc_powl       TYPE char1                VALUE '5'.

* read BGC config tables
* vendor list
  TRY.
      lt_vendors  = cl_hrrcf_co_bgc_pl=>get_vendor_list_by_act_type( wd_comp_controller->gv_act_type ).
* if more than one objects selected, then only vendors supporting async services will be selected
      DATA: lv_vendor        TYPE rcf_vendor,
            vnd_support_sync TYPE boole_d.
      DESCRIBE TABLE wd_comp_controller->gt_hrobject LINES lv_lines.
      IF lv_lines > 1.
        LOOP AT lt_vendors INTO ls_vendor.
          lv_vendor = ls_vendor-key_id.
          cl_hrrcf_co_bgc_pl=>check_vendor_sync( EXPORTING  iv_vendor       = lv_vendor
                                                            iv_servtype     = lc_order_servtype
                                                 RECEIVING  rv_support_sync = vnd_support_sync ).
          IF vnd_support_sync = abap_false.
            APPEND ls_vendor TO wd_this->gt_vendors.
          ENDIF.
        ENDLOOP.
        CLEAR ls_vendor.
      ELSE.
        wd_this->gt_vendors[] = lt_vendors[].
      ENDIF.
    CATCH cx_hrrcf.
      CLEAR wd_this->gt_vendors.
  ENDTRY.

* order status
  CALL METHOD cl_hrrcf_co_bgc_pl=>read_all_order_status
    IMPORTING
      et_t77rcf_bgcords_t = wd_this->gt_order_status.

* final result
  CALL METHOD cl_hrrcf_co_bgc_pl=>read_all_final_results
    IMPORTING
      et_t77rcf_bgcrslt_t = wd_this->gt_final_result.


  lo_bgc_info = wd_context->get_node_info( ).
  lo_bgc_info = lo_bgc_info->get_child_node( name = wd_this->wdctx_bgc_activity ).

* set possible drop down values for vendor
  lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
  ls_value-text  = lv_text.
  ls_value-value = ''.
  APPEND ls_value TO lt_value.
  LOOP AT wd_this->gt_vendors INTO ls_vendor.
    ls_value-value = ls_vendor-key_id.
    ls_value-text  = ls_vendor-value.
    APPEND ls_value TO lt_value.
  ENDLOOP.
  lo_bgc_info->set_attribute_value_set( name      = 'VENDOR_ID'
                                        value_set = lt_value ).

* set possible drop down values for final result
  CLEAR:   ls_value, lt_value[].
  ls_value-text  = lv_text.
  ls_value-value = '000'.
  APPEND ls_value TO lt_value.
  LOOP AT wd_this->gt_final_result INTO ls_final_result.
    ls_value-value = ls_final_result-result_status.
    ls_value-text  = ls_final_result-result_status_t.
    APPEND ls_value TO lt_value.
  ENDLOOP.
  lo_bgc_info->set_attribute_value_set( name      = 'FINAL_RESULT'
                                        value_set = lt_value ).

* set note to empty if multiple objects are selected
  IF wd_comp_controller->gv_bgc_mode = lc_bgc_powl.
    IF lv_lines > 1.
      lo_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
      le_bgc = lo_bgc->get_element( ).
      le_bgc->set_attribute( name  = 'NOTE_TEXT'
                             value = lc_empty_note ).
    ENDIF.
  ENDIF.

ENDMETHOD.

METHOD process_messages .

  DATA: lo_controller        TYPE REF TO if_wd_controller,
        lo_message_manager   TYPE REF TO if_wd_message_manager,
        ls_msg               TYPE bapiret2.

*   report message
  lo_controller ?= wd_comp_controller->wd_get_api( ).

  CALL METHOD lo_controller->get_message_manager
    RECEIVING
      message_manager = lo_message_manager.

  CALL METHOD lo_message_manager->clear_messages( including_permanent_msg = abap_true ).

  LOOP AT wd_this->gt_msg INTO ls_msg.
    CALL METHOD lo_message_manager->report_t100_message
      EXPORTING
        msgid                    = ls_msg-id
        msgno                    = ls_msg-number
        msgty                    = ls_msg-type
        p1                       = ls_msg-message_v1
        p2                       = ls_msg-message_v2
        p3                       = ls_msg-message_v3
        p4                       = ls_msg-message_v4
        is_permanent             = abap_true
        scope_permanent_msg      = 0
        controller_permanent_msg = lo_controller
        view                     = 'V_BACKGROUNDCHECK'.
  ENDLOOP.

*  REFRESH wd_this->gt_msg.

ENDMETHOD.

METHOD read_duplicates_details .

  DATA: ls_dup_obj    TYPE rcf_s_bgc_dupl_order,
        ls_dup_ui_obj TYPE rcf_s_bgc_dupl_order_ui.

  DATA: order_status  TYPE t77rcf_bgcords_t,
        vendor_result TYPE t77rcf_bgcvres_t,
        final_result  TYPE t77rcf_bgcrslt_t.

  DATA: lo_candidate  TYPE REF TO cl_hrrcf_candidate_bupa_bl,
        lo_candidacy  TYPE REF TO cl_hrrcf_candidacy_bl,
        user_detail   TYPE rcf_s_mnt_user_pl,
        centraldatap  TYPE bapibus1006_central_person,
        centraldata   TYPE bapibus1006_central.             "#EC NEEDED

* loop through the duplicate records to get the display texts
  LOOP AT it_duplicates INTO ls_dup_obj.
    MOVE-CORRESPONDING ls_dup_obj TO ls_dup_ui_obj.

*   Ordered On Dates
    DATA: lv_timestamp TYPE char15.
    lv_timestamp = ls_dup_obj-requested_on.
    ls_dup_ui_obj-requested_on_dat = lv_timestamp(8).

*   Order Status
    IF ls_dup_obj-order_status IS NOT INITIAL.
      READ TABLE wd_this->gt_order_status INTO order_status WITH KEY order_status = ls_dup_obj-order_status.
      ls_dup_ui_obj-order_status_txt = order_status-order_status_txt.
    ENDIF.

*   Vendor Result
    IF ls_dup_obj-vendor_result IS NOT INITIAL.
      READ TABLE wd_this->gt_vendor_result INTO vendor_result WITH KEY vendor_result = ls_dup_obj-vendor_result.
      ls_dup_ui_obj-vendor_result_txt = vendor_result-vendor_result_t.
    ENDIF.

*   Final Result
    IF ls_dup_obj-result_status IS NOT INITIAL.
      READ TABLE wd_this->gt_final_result INTO final_result WITH KEY result_status = ls_dup_obj-result_status.
      ls_dup_ui_obj-final_result_txt = final_result-result_status_t.
    ENDIF.

*   Note
    IF ls_dup_obj-note IS NOT INITIAL.
      ls_dup_ui_obj-has_note  = 'X'.
    ELSE.
      ls_dup_ui_obj-has_note  = space.
    ENDIF.

*   Candidate Name
    TRY.
        IF ls_dup_obj-hrobject-otype = 'NE'.
          lo_candidacy = cl_hrrcf_candidacy_bl=>get_instance( ).
          CALL METHOD lo_candidacy->get_candidate
            EXPORTING
              ps_cdcy_hrobject = ls_dup_obj-hrobject
            IMPORTING
              p_cand_name      = ls_dup_ui_obj-cand_fullname.
        ELSEIF ls_dup_obj-hrobject-otype = 'NA'.
          lo_candidate = cl_hrrcf_candidate_bupa_bl=>get_instance( ).
          CALL METHOD lo_candidate->get_pers_data
            EXPORTING
              ps_cand_hrobject     = ls_dup_obj-hrobject
            IMPORTING
              ps_centraldataperson = centraldatap
              ps_centraldata       = centraldata.
          ls_dup_ui_obj-cand_fullname = centraldatap-fullname.
        ENDIF.
      CATCH cx_hrrcf .                                  "#EC NO_HANDLER
    ENDTRY.

*   User Name
    CALL METHOD cl_hrrcf_mnt_user_pl=>read_user
      EXPORTING
        iv_user        = ls_dup_obj-ordered_by
      IMPORTING
        es_usr_details = user_detail.
    ls_dup_ui_obj-user_fullname = user_detail-fullname.

    MOVE iv_package TO ls_dup_ui_obj-package_name.

    APPEND ls_dup_ui_obj TO et_duplicates_ui.

  ENDLOOP.

ENDMETHOD.

METHOD set_display_fields .

  DATA: lo_nd_visibility    TYPE REF TO if_wd_context_node,
        ls_visibility       TYPE wd_this->element_visibility,
        lo_nd_ui_properties TYPE REF TO if_wd_context_node,
        ls_ui               TYPE wd_this->element_ui,
        lo_nd_bgc           TYPE REF TO if_wd_context_node,
        lo_el_bgc           TYPE REF TO if_wd_context_element,
        ls_bgc              TYPE wd_this->element_bgc_activity,
        lv_lines            TYPE i.

  CONSTANTS: lc_upd_servtype   TYPE rcf_act_bgc_servtype VALUE '02',
             lc_view_report    TYPE rcf_act_bgc_servtype VALUE '03',
             lc_bgc_powl       TYPE char1                VALUE '5'.

* get Visibilities
  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_visibility->get_static_attributes(
    IMPORTING
      static_attributes = ls_visibility ).

* get UI properties
  lo_nd_ui_properties = wd_context->get_child_node( name = wd_this->wdctx_ui ).
  lo_nd_ui_properties->get_static_attributes(
    IMPORTING
      static_attributes = ls_ui ).

* get BGC activity
  lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_nd_bgc->get_static_attributes(
    IMPORTING
      static_attributes = ls_bgc ).

  CASE mode.
    WHEN '1'. "display only mode
      ls_visibility-vendor_package = abap_true.
      DATA line TYPE i.
      DESCRIBE TABLE wd_comp_controller->gt_hrobject LINES lv_lines.
      IF wd_comp_controller->gv_act_guid IS NOT INITIAL AND lv_lines = 1.
        ls_visibility-order_detail      = abap_true.
        ls_visibility-result_detail     = abap_true.
        ls_visibility-screening_status  = abap_true.
        ls_visibility-toggle_and_spacer = abap_true.
        ls_visibility-note              = abap_true.
*       request update
        DATA vnd_support_sync TYPE boole_d.
        cl_hrrcf_co_bgc_pl=>check_vendor_sync( EXPORTING  iv_vendor       = wd_this->gv_vendor
                                                          iv_servtype     = lc_upd_servtype
                                               RECEIVING  rv_support_sync = vnd_support_sync ).
        IF vnd_support_sync = abap_true.
          ls_visibility-request_update  = abap_true.
        ELSE.
          ls_visibility-request_update  = abap_false.
        ENDIF.
*       view report
        CLEAR vnd_support_sync.
        cl_hrrcf_co_bgc_pl=>check_vendor_sync( EXPORTING  iv_vendor       = wd_this->gv_vendor
                                                          iv_servtype     = lc_view_report
                                               RECEIVING  rv_support_sync = vnd_support_sync ).
        IF vnd_support_sync = abap_true.
          ls_visibility-view_report     = abap_true.
        ELSE.
          ls_visibility-view_report     = abap_false.
        ENDIF.
*       vendor homepage
        IF wd_this->gv_vendor_homepage IS INITIAL.
          ls_visibility-vendor_homepage = abap_false.
        ELSE.
          lo_el_bgc = lo_nd_bgc->get_element( ).
          lo_el_bgc->set_attribute( name  = `VENDOR_URL`
                                    value = wd_this->gv_vendor_homepage ).
          ls_visibility-vendor_homepage = abap_true.
        ENDIF.
*       order status on
        IF ls_bgc-order_status_on IS INITIAL.
          ls_visibility-order_status_on  = abap_false.
        ELSE.
          ls_visibility-order_status_on  = abap_true.
        ENDIF.
*       result details
        IF ls_bgc-final_result IS NOT INITIAL OR
           ls_bgc-note_text    IS NOT INITIAL.
          ls_ui-toggle_result           = abap_true.
          ls_visibility-result_detail   = abap_true.
        ELSE.
          ls_ui-toggle_result           = abap_false.
          ls_visibility-result_detail   = abap_false.
        ENDIF.
*       screening status details
        DATA: lt_scrn_status      TYPE t77rcf_bgcssd_tab.
        TRY.
            CALL METHOD cl_hrrcf_t77rcf_bgcssd=>read_records_by_ssdguid
              EXPORTING
                iv_ssd_guid      = ls_bgc-ssd_guid
              IMPORTING
                et_t77rcf_bgcssd = lt_scrn_status.
          CATCH cx_hrrcf .                              "#EC NO_HANDLER
        ENDTRY.
        IF lt_scrn_status IS NOT INITIAL.
          ls_ui-toggle_scrn               = abap_true.
          ls_visibility-screening_status  = abap_true.
        ELSE.
          ls_ui-toggle_scrn               = abap_false.
          ls_visibility-screening_status  = abap_false.
        ENDIF.
      ELSE.
        ls_visibility-order_detail      = abap_false.
        ls_visibility-result_detail     = abap_false.
        ls_visibility-screening_status  = abap_false.
        ls_visibility-toggle_and_spacer = abap_false.
        ls_visibility-request_update    = abap_false.
        ls_visibility-view_report       = abap_false.
        ls_visibility-note              = abap_false.
**       disable the OK button
*        CALL METHOD wd_comp_controller->go_activity_window->set_button_enabled
*          EXPORTING
*            button     = if_wd_window=>co_button_ok
*            is_enabled = abap_false.
*       set the window button to Close, and enable the window close button on upper right
        CALL METHOD wd_comp_controller->go_activity_window->set_button_kind
          EXPORTING
            button_kind = if_wd_window=>co_buttons_close.
        CALL METHOD wd_comp_controller->go_activity_window->set_close_in_any_case
          EXPORTING
            close_in_any_case = abap_true.
        CALL METHOD wd_comp_controller->go_activity_window->set_close_button
          EXPORTING
            close_button = abap_true.

      ENDIF.
      ls_ui-toggle_order                = abap_true.
      ls_ui-toggle_vendor               = abap_true.
      ls_ui-vendor_active               = abap_false.
      ls_ui-package_active              = abap_false.
      ls_ui-order_button_active         = abap_false.
      ls_ui-final_result                = abap_true.
      ls_ui-note                        = abap_true.

    WHEN '2'. "only vendor package visible, vendor ID enabled for input
      ls_visibility-vendor_package      = abap_true.
      ls_visibility-order_detail        = abap_false.
      ls_visibility-result_detail       = abap_false.
      ls_visibility-screening_status    = abap_false.
      ls_visibility-toggle_and_spacer   = abap_false.
      ls_visibility-request_update      = abap_false.
      ls_visibility-view_report         = abap_false.
      ls_visibility-note                = abap_false.
      ls_ui-vendor_active               = abap_true.
      ls_ui-package_active              = abap_false.
      ls_ui-order_button_active         = abap_false.

    WHEN '3'. "package id enabled for input
      ls_visibility-vendor_package      = abap_true.
      ls_visibility-order_detail        = abap_false.
      ls_visibility-result_detail       = abap_false.
      ls_visibility-screening_status    = abap_false.
      ls_visibility-toggle_and_spacer   = abap_false.
      ls_visibility-request_update      = abap_false.
      ls_visibility-view_report         = abap_false.
      ls_visibility-note                = abap_false.
      ls_ui-vendor_active               = abap_true.
      ls_ui-package_active              = abap_true.
      ls_ui-order_button_active         = abap_false.

    WHEN '4'. "order button enabled for click
      ls_visibility-vendor_package      = abap_true.
      ls_visibility-order_detail        = abap_false.
      ls_visibility-result_detail       = abap_false.
      ls_visibility-screening_status    = abap_false.
      ls_visibility-toggle_and_spacer   = abap_false.
      ls_visibility-request_update      = abap_false.
      ls_visibility-view_report         = abap_false.
      ls_visibility-note                = abap_false.
      ls_ui-vendor_active               = abap_true.
      ls_ui-package_active              = abap_true.
      ls_ui-order_button_active         = abap_true.

    WHEN '5'. "only final status visible
      ls_visibility-vendor_package      = abap_false.
      ls_visibility-order_detail        = abap_false.
      ls_visibility-request_update      = abap_false.
      ls_visibility-view_report         = abap_false.
      ls_visibility-result_detail       = abap_true.
      ls_visibility-note                = abap_true.
      ls_visibility-screening_status    = abap_false.
      ls_visibility-toggle_and_spacer   = abap_false.
      IF wd_comp_controller->gv_bgc_mode = lc_bgc_powl.   "5
        ls_ui-final_result              = abap_true.
        ls_ui-note                      = abap_true.
      ENDIF.

  ENDCASE.

  lo_nd_visibility->set_static_attributes(
        EXPORTING
          static_attributes = ls_visibility ).

  lo_nd_ui_properties->set_static_attributes(
        EXPORTING
          static_attributes = ls_ui ).

ENDMETHOD.

METHOD set_package_field .

  DATA lo_package_info     TYPE REF TO if_wd_context_node_info.
  DATA ls_package          TYPE rcf_s_ui_valuehelp.
  DATA lt_value            TYPE wdr_context_attr_value_list.
  DATA ls_value            TYPE wdr_context_attr_value.

* the following information is based on the vendor
* read vendor status
  REFRESH wd_this->gt_vendor_result.
  CALL METHOD cl_hrrcf_co_bgc_pl=>read_all_results_by_vendor
    EXPORTING
      iv_vendor           = wd_this->gv_vendor
    IMPORTING
      et_t77rcf_bgcvres_t = wd_this->gt_vendor_result.

* read vendor packages
  TRY.
      CLEAR wd_this->gt_packages[].
      CALL METHOD cl_hrrcf_co_bgc_pl=>get_bgc_package_list
        EXPORTING
          iv_vendor       = wd_this->gv_vendor
          iv_req_hrobject = wd_comp_controller->gs_req_hrobject
        RECEIVING
          et_valuehelp    = wd_this->gt_packages[].
    CATCH cx_hrrcf.                                     "#EC NO_HANDLER
  ENDTRY.

  IF display_mode NE abap_true.
    ls_value-text  = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
    ls_value-value = '000000'.
    APPEND ls_value TO lt_value.
  ENDIF.

  LOOP AT wd_this->gt_packages INTO ls_package.
    ls_value-value = ls_package-key_id.
    ls_value-text  = ls_package-value.
    APPEND ls_value TO lt_value.
  ENDLOOP.

  lo_package_info = wd_context->get_node_info( ).
  lo_package_info = lo_package_info->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_package_info->set_attribute_value_set( name      = 'PACKAGE_ID'
                                            value_set = lt_value ).

ENDMETHOD.

METHOD update_screening_status .

  CHECK iv_ssd_guid IS NOT INITIAL.

  DATA: lo_bgc_scrn_status  TYPE REF TO if_wd_context_node,
        lt_scrn_status      TYPE t77rcf_bgcssd_tab.

* read available screening status
  TRY.
      CALL METHOD cl_hrrcf_t77rcf_bgcssd=>read_records_by_ssdguid
        EXPORTING
          iv_ssd_guid      = iv_ssd_guid
        IMPORTING
          et_t77rcf_bgcssd = lt_scrn_status.
    CATCH cx_hrrcf .   "#EC NO_HANDLER
  ENDTRY.

  IF lt_scrn_status IS NOT INITIAL.
    lo_bgc_scrn_status = wd_context->get_child_node( name = wd_this->wdctx_bgc_scrn_status ).
    lo_bgc_scrn_status->bind_table( lt_scrn_status ).
  ENDIF.

ENDMETHOD.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

METHOD onactioninit_order .

  DATA: dup_list                TYPE rcf_t_bgc_dupl_order,
        cand                    TYPE rcf_s_mass_proc_activities,
        it_msg                  TYPE bapirettab,
        lv_package              TYPE rcf_s_ui_valuehelp,
        lv_title                TYPE string,
        lo_window_manager       TYPE REF TO if_wd_window_manager,
        lo_api_component        TYPE REF TO if_wd_component,
        lo_window               TYPE REF TO if_wd_window,
        lo_nd_bgc_duplicates    TYPE REF TO if_wd_context_node.

  wd_comp_controller->gv_bgc_refresh = abap_false.

  IF wd_comp_controller->gt_act_wiz_hrobject IS NOT INITIAL.
    SORT wd_comp_controller->gt_act_wiz_hrobject.
    LOOP AT wd_comp_controller->gt_act_wiz_hrobject INTO cand-hrobject.
      APPEND cand TO wd_this->gt_ord_list.
    ENDLOOP.
  ELSE.
    IF wd_comp_controller->gt_hrobject IS NOT INITIAL.
      SORT wd_comp_controller->gt_hrobject.
      LOOP AT wd_comp_controller->gt_hrobject INTO cand-hrobject.
        APPEND cand TO wd_this->gt_ord_list.
      ENDLOOP.
    ENDIF.
  ENDIF.

* call duplicate check
*  IF wd_comp_controller->gv_act_guid IS NOT INITIAL .
  CALL METHOD wd_assist->bgc_duplicate_check
    EXPORTING
      iv_vendor             = wd_this->gv_vendor
      iv_package_id         = wd_this->gv_package_id
      it_cdcy_list          = wd_comp_controller->gt_hrobject
    IMPORTING
      et_dupl_order_list    = dup_list
      et_message            = it_msg
    CHANGING
      ct_current_order_list = wd_this->gt_ord_list.
*  ENDIF.
  APPEND LINES OF it_msg TO wd_this->gt_msg.

  CLEAR cand.
  REFRESH wd_comp_controller->gt_hrobject.
  LOOP AT wd_this->gt_ord_list INTO cand.
    APPEND cand-hrobject TO wd_comp_controller->gt_hrobject.
  ENDLOOP.
  REFRESH wd_this->gt_ord_list.

* if there are duplicates
  IF dup_list[] IS NOT INITIAL.
    SORT dup_list BY hrobject.
    DATA: it_dup_ui TYPE rcf_t_bgc_dupl_order_ui.

    READ TABLE wd_this->gt_packages INTO lv_package WITH KEY key_id = wd_this->gv_package_id.

    it_dup_ui = wd_this->read_duplicates_details( it_duplicates = dup_list
                                                  iv_package    = lv_package-value ).

    lo_nd_bgc_duplicates = wd_context->get_child_node( name = wd_this->wdctx_bgc_duplicates ).
    lo_nd_bgc_duplicates->bind_table( it_dup_ui ).

*   The Background Check for &1 already exists for the following Candidate(s)
    lv_title = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/BGC_DUPLICATES' ).
*    MESSAGE i101(hrrcf0007) WITH lv_package-value INTO lv_title.
    lo_api_component = wd_comp_controller->wd_get_api( ).
    lo_window_manager = lo_api_component->get_window_manager( ).
    lo_window = lo_window_manager->create_window( window_name            = 'W_BGC_DUPLICATES'
                                                  title                  = lv_title
                                                  message_display_mode   = if_wd_window=>co_msg_display_mode_selected
                                                  button_kind            = if_wd_window=>co_buttons_close
                                                  message_type           = if_wd_window=>co_msg_type_none ).
    lo_window->open( ).

  ELSE.

    wd_comp_controller->gv_bgc_refresh = abap_true.

  ENDIF.

ENDMETHOD.

METHOD onactionpackage_selected .

  DATA lo_nd_bgc_activity  TYPE REF TO if_wd_context_node.
  DATA ls_bgc              TYPE wd_this->element_bgc_activity.

  lo_nd_bgc_activity = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_nd_bgc_activity->get_static_attributes(
    IMPORTING
      static_attributes = ls_bgc ).

  CLEAR: wd_this->gv_package_id.

  IF ls_bgc-package_id IS NOT INITIAL.
    wd_this->gv_package_id = ls_bgc-package_id.
    wd_this->set_display_fields( '4' ).
  ELSE.
    wd_this->set_display_fields( '3' ).
  ENDIF.

ENDMETHOD.

METHOD onactionrequest_update .

  CALL METHOD cl_hrrcf_co_bgc_pl=>bgc_request_orderstatus
    EXPORTING
      iv_act_guid = wd_comp_controller->gv_act_guid
    IMPORTING
      et_message  = wd_this->gt_msg.

  IF wd_this->gt_msg IS NOT INITIAL.
    wd_this->process_messages( ).
  ELSE.
    DATA it_msg TYPE bapirettab.   "#EC NEEDED
    wd_comp_controller->read_bgc_activity( IMPORTING et_message = it_msg ).
  ENDIF.

  wd_this->set_display_fields( '1' ).

* read the new ssd guid
  DATA lo_nd_bgc       TYPE REF TO if_wd_context_node.
  DATA ls_bgc          TYPE wd_this->element_bgc_activity.
  lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_nd_bgc->get_static_attributes( IMPORTING static_attributes = ls_bgc ).
  wd_this->update_screening_status( ls_bgc-ssd_guid ).

ENDMETHOD.

METHOD onactionset_final .

  CHECK wd_comp_controller->gv_bgc_mode = '5'.

  DATA: lo_nd_bgc           TYPE REF TO if_wd_context_node,
        lo_el_bgc           TYPE REF TO if_wd_context_element,
        lv_result           TYPE rcf_act_bgc_vnd_result,
        lv_note_txt         TYPE string,
        it_msg              TYPE bapirettab,       "#EC NEEDED
        ls_bgc_order        TYPE rcf_s_bgc_current_order,
        ls_bgc              TYPE rcf_s_act_bgc_details_pl,
        lv_failed           TYPE wdy_boolean,      "#EC NEEDED
        lt_act_guid         TYPE rcf_t_act_guid.   "#EC NEEDED

  lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_el_bgc = lo_nd_bgc->get_element( ).

* read the final result
  CALL METHOD lo_el_bgc->get_attribute
    EXPORTING
      name  = 'FINAL_RESULT'
    IMPORTING
      value = lv_result.

* read the note text
  CALL METHOD lo_el_bgc->get_attribute
    EXPORTING
      name  = 'NOTE_TEXT'
    IMPORTING
      value = lv_note_txt.

  IF lv_result IS NOT INITIAL OR lv_note_txt IS NOT INITIAL.
    LOOP AT wd_comp_controller->gt_bgc_orders INTO ls_bgc_order.
      wd_comp_controller->gv_act_guid = ls_bgc_order-act_guid.
      wd_comp_controller->read_bgc_activity( IMPORTING et_message  = it_msg ).
      lo_nd_bgc = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
      lo_nd_bgc->get_static_attributes( IMPORTING static_attributes = ls_bgc ).

      IF lv_result IS NOT INITIAL.
        ls_bgc-final_result = lv_result.
      ENDIF.

      IF lv_note_txt IS NOT INITIAL.
*       CONCATENATE ls_bgc-note_text lv_note_txt INTO ls_bgc-note_text SEPARATED BY space.
        ls_bgc-note_text = lv_note_txt.
      ENDIF.

      lo_nd_bgc->set_static_attributes( static_attributes = ls_bgc ).

      wd_comp_controller->save_bgc_activity( IMPORTING et_message  = it_msg
                                                       et_act_guid = lt_act_guid
                                                       ev_failed   = lv_failed ).
    ENDLOOP.
  ENDIF.

  wd_comp_controller->go_activity_window->close( ).

ENDMETHOD.

METHOD onactiontoggle_order_detail .

  DATA lo_nd_visibility TYPE REF TO if_wd_context_node.
  DATA ls_visibility TYPE wd_this->element_visibility.

  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_visibility->get_static_attributes(
    IMPORTING
      static_attributes = ls_visibility ).

  IF ls_visibility-order_detail = 'X'.
    CLEAR ls_visibility-order_detail.
  ELSE.
    ls_visibility-order_detail = 'X'.
  ENDIF.

  lo_nd_visibility->set_static_attributes(
        EXPORTING
          static_attributes = ls_visibility ).

ENDMETHOD.

METHOD onactiontoggle_result_detail .

  DATA lo_nd_visibility TYPE REF TO if_wd_context_node.
  DATA ls_visibility TYPE wd_this->element_visibility.

  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_visibility->get_static_attributes(
    IMPORTING
      static_attributes = ls_visibility ).

  IF ls_visibility-result_detail = 'X'.
    CLEAR ls_visibility-result_detail.
  ELSE.
    ls_visibility-result_detail = 'X'.
  ENDIF.

  lo_nd_visibility->set_static_attributes(
        EXPORTING
          static_attributes = ls_visibility ).

ENDMETHOD.

METHOD onactiontoggle_scrn_detail .

  DATA lo_nd_visibility TYPE REF TO if_wd_context_node.
  DATA ls_visibility TYPE wd_this->element_visibility.

  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_visibility->get_static_attributes(
    IMPORTING
      static_attributes = ls_visibility ).

  IF ls_visibility-screening_status = 'X'.
    CLEAR ls_visibility-screening_status.
  ELSE.
    ls_visibility-screening_status = 'X'.
  ENDIF.

  lo_nd_visibility->set_static_attributes(
        EXPORTING
          static_attributes = ls_visibility ).

ENDMETHOD.

METHOD onactiontoggle_vendor_pack .

  DATA lo_nd_visibility TYPE REF TO if_wd_context_node.
  DATA ls_visibility TYPE wd_this->element_visibility.

  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_visibility->get_static_attributes(
    IMPORTING
      static_attributes = ls_visibility ).

  IF ls_visibility-vendor_package = 'X'.
    CLEAR ls_visibility-vendor_package.
  ELSE.
    ls_visibility-vendor_package = 'X'.
  ENDIF.

  lo_nd_visibility->set_static_attributes(
        EXPORTING
          static_attributes = ls_visibility ).

ENDMETHOD.

METHOD onactionvendor_selected .

  DATA lo_nd_bgc_activity  TYPE REF TO if_wd_context_node.
  DATA ls_bgc              TYPE wd_this->element_bgc_activity.

  lo_nd_bgc_activity = wd_context->get_child_node( name = wd_this->wdctx_bgc_activity ).
  lo_nd_bgc_activity->get_static_attributes(
    IMPORTING
      static_attributes = ls_bgc ).

  CLEAR:  wd_this->gv_vendor, wd_this->gv_vendor_homepage,
          wd_this->gv_package_id, wd_this->gt_packages,
          ls_bgc-package_id.

  lo_nd_bgc_activity->set_static_attributes( static_attributes = ls_bgc ).
  IF ls_bgc-vendor_id IS NOT INITIAL.
    wd_this->gv_vendor = ls_bgc-vendor_id.
    wd_this->gv_vendor_homepage = cl_hrrcf_co_bgc_pl=>get_vendor_homepage( wd_this->gv_vendor ).
    wd_this->set_package_field( ).
    wd_this->set_display_fields( '3' ).
  ELSE.
    wd_this->set_display_fields( '2' ).
  ENDIF.

ENDMETHOD.

METHOD onactionview_report .

  DATA: lv_vendor_uri              TYPE rcf_act_vendor_uri,
        lv_url                     type string,
        lt_msg                     TYPE bapirettab,
        lo_api_componentcontroller TYPE REF TO if_wd_component,
        lo_window_mgr              TYPE REF TO if_wd_window_manager,
        lo_window                  TYPE REF TO if_wd_window.

  CALL METHOD cl_hrrcf_co_bgc_pl=>bgc_view_report
    EXPORTING
      iv_act_guid   = wd_comp_controller->gv_act_guid
    IMPORTING
      ev_vendor_uri = lv_vendor_uri
      et_message    = lt_msg.

  APPEND LINES OF lt_msg TO wd_this->gt_msg.

  IF lv_vendor_uri IS NOT INITIAL.
    lo_api_componentcontroller = wd_comp_controller->wd_get_api( ).
    lv_url = lv_vendor_uri.
    lo_window_mgr = lo_api_componentcontroller->get_window_manager( ).
    lo_window = lo_window_mgr->create_external_window( url = lv_url ).
    lo_window->open( ).
  ENDIF.

ENDMETHOD.

endclass.
 