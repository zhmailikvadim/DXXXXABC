*=====================================================================*
* Intf.: if_v_communication  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <V_COMMUNICATION> of
*        component:   <erc_c_cand_overview_ui>
* UDate: 20240723 161449
*=====================================================================*
interface if_v_communication.
 
* +-------------------------------------------------------------------+
* |  context type definitions                                         |
* +-------------------------------------------------------------------+

  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_rcf_communication type string value `RCF_COMMUNICATION`.
  types:
    begin of Element_rcf_communication,
      CHANNEL  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL,
      CHANNEL_DESCRIPTION  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL_DESCRIPTION,
      STREET  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET,
      STREET2  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET2,
      COUNTRY  type RCF_S_CAND_COMMN_ADDRESS_PL-COUNTRY,
      REGION  type RCF_S_CAND_COMMN_ADDRESS_PL-REGION,
      CITY  type RCF_S_CAND_COMMN_ADDRESS_PL-CITY,
      POSTCODE  type RCF_S_CAND_COMMN_ADDRESS_PL-POSTCODE,
      COUNTRY_TXT  type RCF_VH_VALUE_PL,
      POSTCODE_REQUIRED  type WDUI_STATE,
    end of Element_rcf_communication,  "#EC NEEDED
    Elements_rcf_communication type 
       standard table of Element_rcf_communication
       with default key. "#EC NEEDED
  constants:
    wdctx_region_attributes type string value `REGION_ATTRIBUTES`.
  types:
    begin of Element_region_attributes,
      REGION_ENABLE  type WDY_BOOLEAN,
    end of Element_region_attributes,  "#EC NEEDED
    Elements_region_attributes type 
       standard table of Element_region_attributes
       with default key. "#EC NEEDED
  constants:
    wdctx_region_values type string value `REGION_VALUES`.
  types:
    begin of Element_region_values,
      REGION  type REGIO,
      REGION_TXT  type STRING,
    end of Element_region_values,  "#EC NEEDED
    Elements_region_values type 
       standard table of Element_region_values
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_contact_no type string value `RCF_CONTACT_NO`.
  types:
    Element_rcf_contact_no type RCF_S_CAND_COMMN_TELE_PL,
    Elements_rcf_contact_no type 
       standard table of Element_rcf_contact_no
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_display type string value `RCF_DISPLAY`.
  types:
    begin of Element_rcf_display,
      FORMOFADDRESS_TXT  type TEXT10,
      SEX_TXT  type TEXT10,
      TITLE_SPPL_TXT  type TEXT40,
      TITLE_TXT  type TEXT40,
      TITLE_ACA2_TXT  type TEXT40,
      PREFIX_TXT  type TEXT40,
    end of Element_rcf_display,  "#EC NEEDED
    Elements_rcf_display type 
       standard table of Element_rcf_display
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_enable type string value `RCF_ENABLE`.
  types:
    begin of Element_rcf_enable,
      CANDIDATE  type WDY_BOOLEAN,
      REGION  type WDY_BOOLEAN,
    end of Element_rcf_enable,  "#EC NEEDED
    Elements_rcf_enable type 
       standard table of Element_rcf_enable
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_ireferences type string value `RCF_IREFERENCES`.
  types:
    begin of Element_rcf_ireferences,
      URL_CATEGORY  type RCF_S_CAND_INTERNET_REF_PL-URL_CATEGORY,
      INTERNET_REF_URL  type RCF_S_CAND_INTERNET_REF_PL-INTERNET_REF_URL,
      DESCRIPTION  type RCF_S_CAND_INTERNET_REF_PL-DESCRIPTION,
      URL_CATEGORY_TXT  type RCF_S_CAND_INTERNET_REF_PL-URL_CATEGORY_TXT,
      DESCRIPTION_TXT  type RCF_S_CAND_INTERNET_REF_PL-DESCRIPTION_TXT,
      INTERNET_REF_URL_TXT  type RCF_S_CAND_INTERNET_REF_PL-INTERNET_REF_URL_TXT,
      DOC_LANGU  type RCF_S_CAND_INTERNET_REF_PL-DOC_LANGU,
      TEST_LINK_VISIBLE  type WDUI_VISIBILITY,
    end of Element_rcf_ireferences,  "#EC NEEDED
    Elements_rcf_ireferences type 
       standard table of Element_rcf_ireferences
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail type string value `RCF_MAIL`.
  types:
    begin of Element_rcf_mail,
      E_MAIL  type AD_SMTPADR,
    end of Element_rcf_mail,  "#EC NEEDED
    Elements_rcf_mail type 
       standard table of Element_rcf_mail
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_bus_pvt type string value `RCF_MAIL_BUS_PVT`.
  types:
    begin of Element_rcf_mail_bus_pvt,
      BUS_EMAIL  type AD_SMTPADR,
      PVT_EMAIL  type AD_SMTPADR,
      EMAIL_DROP_DOWN  type STRING,
    end of Element_rcf_mail_bus_pvt,  "#EC NEEDED
    Elements_rcf_mail_bus_pvt type 
       standard table of Element_rcf_mail_bus_pvt
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_visible type string value `RCF_MAIL_VISIBLE`.
  types:
    begin of Element_rcf_mail_visible,
      EMAIL_VISIBILITY  type WDUI_VISIBILITY,
      OLD_EMAIL_VISIBILITY  type WDUI_VISIBILITY,
    end of Element_rcf_mail_visible,  "#EC NEEDED
    Elements_rcf_mail_visible type 
       standard table of Element_rcf_mail_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_personel_data type string value `RCF_PERSONEL_DATA`.
  types:
    Element_rcf_personel_data type RCF_S_CAND_PERSONAL_DATA_PL,
    Elements_rcf_personel_data type 
       standard table of Element_rcf_personel_data
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref_contact type string value `RCF_PREF_CONTACT`.
  types:
    begin of Element_rcf_pref_contact,
      PRFD_CNT_ADD  type RCF_COMM_CHANNEL,
      PRFD_CNT_ADD_TXT  type RCF_COMM_CHANNEL_TXT,
      PRFD_CNT_TEL  type RCF_COMM_CHANNEL,
      PRFD_CNT_TEL_TXT  type RCF_COMM_CHANNEL_TXT,
    end of Element_rcf_pref_contact,  "#EC NEEDED
    Elements_rcf_pref_contact type 
       standard table of Element_rcf_pref_contact
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_vsible type string value `RCF_VSIBLE`.
  types:
    begin of Element_rcf_vsible,
      EDIT  type WDUI_VISIBILITY,
      DISPLAY  type WDUI_VISIBILITY,
      NEW_ELEMENTS_VISIBLE  type WDY_BOOLEAN,
    end of Element_rcf_vsible,  "#EC NEEDED
    Elements_rcf_vsible type 
       standard table of Element_rcf_vsible
       with default key. "#EC NEEDED
  constants:
    wdctx_shared_context type string value `SHARED_CONTEXT`.
  types:
    begin of Element_shared_context,
      HROBJECT  type HROBJECT,
      TEMPLATE_HROBJECT  type HROBJECT,
      ACT_GUID  type RCF_ACT_GUID,
      SUBTYPE  type SUBTYP,
      APPLICATION  type CHAR10,
      OPERATION  type RCF_OPERATION_PL,
      IS_DIRTY  type WDY_BOOLEAN,
      SEQUENCE_NR  type INT4,
      REQUI_SUPP_TEAM  type RCF_T_SUPP_TEAM_PL,
      DATA_CHANGED  type WDY_BOOLEAN,
      DISPLAY_MODE  type WDY_BOOLEAN,
      USE_HR_QUALIFICATIONS  type WDY_BOOLEAN,
      SAVE_CREATE_NEXT  type WDY_BOOLEAN,
      NO_OF_UIBB  type INT4,
      IS_APPL_MGMT  type WDY_BOOLEAN,
      EDIT_ALLOWED  type WDY_BOOLEAN,
      IS_INTERNAL_APPLICATION  type WDY_BOOLEAN,
      IS_QUALI_USER_SELECTED  type WDY_BOOLEAN,
      IS_LOCKED  type WDY_BOOLEAN,
      IS_RSM_PARSING  type WDY_BOOLEAN,
      IS_QUAL_FIRST_TIME  type WDY_BOOLEAN,
      SCENARIO  type STRING,
    end of Element_shared_context,  "#EC NEEDED
    Elements_shared_context type 
       standard table of Element_shared_context
       with default key. "#EC NEEDED
  methods CHECK_ADDRESS  ."#EC NEEDED
  methods CHECK_COMMN_DATA
    returning
      value(DATA_CONSISTANT)  type Wdy_Boolean  ."#EC NEEDED
  methods CHECK_IREFERENCES
    exporting
      EV_DATA_CONSISTANT  type Wdy_Boolean  ."#EC NEEDED
  methods GET_ACADAMIC_TITLE  ."#EC NEEDED
  methods GET_COUNTRY  ."#EC NEEDED
  methods GET_FOA  ."#EC NEEDED
  methods GET_GENDER  ."#EC NEEDED
  methods GET_OTHER_TITLE  ."#EC NEEDED
  methods GET_PREFIX  ."#EC NEEDED
  methods GET_URL_CATEGORIES  ."#EC NEEDED
  methods LOAD_REGIONS
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IO_PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_VIEW_CONTROLLER. "#EC NEEDED
 
 
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  action getters                                                   |
* +-------------------------------------------------------------------+

  methods Get_add_ireference_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_cancel_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_close_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_delete_ireference_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_get_region_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_ok_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_on_email_pref_change_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_set_foa_sex_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_set_lang_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_url_entered_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  controller <componentcontroller>
*            of usage   <49hturkt2v5hxb75k1y7s52kk>
**********
  methods  get_componentcontroller_ctr
    returning
      value(Result) type ref to ig_componentcontroller. "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONADD_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONCANCEL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONCLOSE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONDELETE_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONGET_REGION
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONOK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONON_EMAIL_PREF_CHANGE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_FOA_SEX
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_LANG
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONURL_ENTERED
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    LS_TEMP_BUS_PVT_EMAIL  type Element_Rcf_Mail_Bus_Pvt.
  data: 
    LS_TEMP_PDATA  type Element_Rcf_Personel_Data.
  data: 
    LS_TEMP_PRFCNT  type Element_Rcf_Pref_Contact.
  data: 
    LT_TEMP_CDATA  type Elements_Rcf_Contact_No.
  data: 
    LT_TEMP_COMMN  type Elements_Rcf_Communication.
  data: 
    LT_TEMP_IREFERENCES  type Elements_Rcf_Ireferences.
  data: 
    LV_TEMP_MAIL  type Element_Rcf_Mail.
  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Cand_Overview_Ui.
endinterface.
*=====================================================================*
* Class: CL_V_COMMUNICATION_Ctr
* Purp.: definitions for application defined methods of controller
*        V_COMMUNICATION (VIEW)
* UDate: 20240723 161449
*=====================================================================*
class CL_V_COMMUNICATION_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_V_COMMUNICATION
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_cand_overview_ui.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAFTERACTION  ."#EC NEEDED
  methods WDDOBEFOREACTION  ."#EC NEEDED
  methods WDDOEXIT  ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOMODIFYVIEW
    importing
      FIRST_TIME  type Wdy_Boolean 
      VIEW  type ref to If_Wd_View   ."#EC NEEDED
  methods WDDOONCONTEXTMENU
    importing
      CONTEXT_MENU_EVENT  type ref to If_Wd_Context_Menu_Event 
      CONTEXT_MENU_MANAGER  type ref to If_Wd_Context_Menu_Manager 
    returning
      value(MENU)  type ref to Cl_Wd_Menu  ."#EC NEEDED
  methods CHECK_ADDRESS  ."#EC NEEDED
  methods CHECK_COMMN_DATA
    returning
      value(DATA_CONSISTANT)  type Wdy_Boolean  ."#EC NEEDED
  methods CHECK_IREFERENCES
    exporting
      EV_DATA_CONSISTANT  type Wdy_Boolean  ."#EC NEEDED
  methods GET_ACADAMIC_TITLE  ."#EC NEEDED
  methods GET_COUNTRY  ."#EC NEEDED
  methods GET_FOA  ."#EC NEEDED
  methods GET_GENDER  ."#EC NEEDED
  methods GET_OTHER_TITLE  ."#EC NEEDED
  methods GET_PREFIX  ."#EC NEEDED
  methods GET_URL_CATEGORIES  ."#EC NEEDED
  methods LOAD_REGIONS
    importing
      IO_NODE  type ref to If_Wd_Context_Node 
      IO_PARENT_ELEMENT  type ref to If_Wd_Context_Element   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONADD_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONCANCEL
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONCLOSE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONDELETE_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONGET_REGION
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONOK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONON_EMAIL_PREF_CHANGE
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_FOA_SEX
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONSET_LANG
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONURL_ENTERED
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_V_COMMUNICATION,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node,     "#EC NEEDED
    wd_Comp_Controller  type ref to Ig_ComponentController. "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_cand_overview_ui. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_V_COMMUNICATION_Ctr 
* Purp.: explicit definitions derived from application coding
*        <V_COMMUNICATION> (VIEW)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240723 161449
*=====================================================================*
class CL_V_COMMUNICATION_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Comp_Controller = Wd_This->get_ComponentController_Ctr( ).
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAFTERACTION . "#EC NEEDED
endmethod.

method WDDOBEFOREACTION . "#EC NEEDED

ENDMETHOD.

method WDDOEXIT . "#EC NEEDED

endmethod.

METHOD wddoinit .

* Checks for edit or display mode, buffers original data and gets lists of the
* communication data values (such as name prefixes, academic titles etc.).
* Handles also the field status (required or not) of the post code field

  DATA lo_nd_rcf_enable          TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_communication   TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication   TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_contact_no      TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_personel_data   TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_pref_contact    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail            TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_ireferences     TYPE REF TO if_wd_context_node.
  DATA lt_elem_communication     TYPE wdr_context_element_set.
  DATA ls_rcf_communication      TYPE wd_this->element_rcf_communication.
  DATA lv_postcode_req_status    TYPE boole_d.
  DATA lv_postcode_required      TYPE wd_this->element_rcf_communication-postcode_required.
  DATA lv_view                   TYPE REF TO if_wd_view_controller.
  DATA lv_ok                     TYPE string.
  DATA lv_cancel                 TYPE string.
  DATA lv_close                  TYPE string.
  DATA lo_nd_rcf_mail_bus_pvt    TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail_bus_pvt    TYPE REF TO if_wd_context_element.

  lo_nd_rcf_enable = wd_context->get_child_node( name = wd_this->wdctx_rcf_enable ).

  IF wd_comp_controller->gv_candidate = 'X'.
    lo_nd_rcf_enable->set_attribute(
      EXPORTING        name =  `CANDIDATE`
                       value = abap_true ).
  ENDIF.

  IF wd_comp_controller->gv_candidate = ' '.
    lo_nd_rcf_enable->set_attribute(
      EXPORTING        name =  `CANDIDATE`
                       value = abap_false ).
  ENDIF.

* register button events for edit mode and display mode
  lv_view = wd_this->wd_get_api( ).

  IF wd_comp_controller->gv_comm_edit EQ abap_true.           " edit mode
    lv_ok = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/OK' ).
    wd_comp_controller->branch_popup->subscribe_to_button_event(
                      button            = if_wd_window=>co_button_ok
                      button_text       = lv_ok
                      action_name       = 'OK'
                      action_view       = lv_view ).

    lv_cancel = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/CANCEL' ).
    wd_comp_controller->branch_popup->subscribe_to_button_event(
                  button            = if_wd_window=>co_button_cancel
                  button_text       = lv_cancel
                  action_name       = 'CANCEL'
                  action_view       = lv_view ).
  ENDIF.

  IF wd_comp_controller->gv_comm_edit EQ abap_false.           " display mode
    lv_close = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/HEADER_CLOSE' ).
    wd_comp_controller->branch_popup->subscribe_to_button_event(
                    button            = if_wd_window=>co_button_close
                    button_text       = lv_close
                    action_name       = 'CLOSE'
                    action_view       = lv_view ).
  ENDIF.

* Buffer original data
  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).
  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).

* get the lists for communication data  (addresses, name prefixes etc.)
  wd_this->get_country( ).
  wd_this->get_foa( ).
  wd_this->get_other_title( ).
  wd_this->get_acadamic_title( ).
  wd_this->check_address( ).
  wd_this->get_gender( ).
  wd_this->get_prefix( ).
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
    wd_this->get_url_categories( ).
  ENDIF.

* Set postcode field to "required" according to customizing flag t005-xplzs.    "CG
* get all elements of the context node
  lt_elem_communication = lo_nd_rcf_communication->get_elements( ).

  LOOP AT lt_elem_communication INTO lo_el_rcf_communication.
    lo_el_rcf_communication->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_communication ).

    IF ls_rcf_communication-country IS NOT INITIAL.
*     check the status of customizing flag t005-xplzs for the chosen country.
      CALL METHOD wd_assist->check_postalcode_req
        EXPORTING
          iv_country      = ls_rcf_communication-country
        IMPORTING
          ev_postcode_req = lv_postcode_req_status.

      IF lv_postcode_req_status EQ abap_true AND
        ( ls_rcf_communication-street IS NOT INITIAL
        OR ls_rcf_communication-street2 IS NOT INITIAL ).
        lv_postcode_required = 01.                               "required
      ELSE.                                                      "t005-xplzs = ' '
        lv_postcode_required = 00.                               "not required
      ENDIF.

      lo_el_rcf_communication->set_attribute(
        name  = `POSTCODE_REQUIRED`
        value = lv_postcode_required ).
    ENDIF.
    CLEAR lo_el_rcf_communication.

  ENDLOOP.

  CALL METHOD lo_nd_rcf_communication->get_static_attributes_table
    IMPORTING
      table = wd_this->lt_temp_commn.

  CALL METHOD lo_nd_rcf_contact_no->get_static_attributes_table
    IMPORTING
      table = wd_this->lt_temp_cdata.

  CALL METHOD lo_nd_rcf_personel_data->get_static_attributes
    IMPORTING
      static_attributes = wd_this->ls_temp_pdata.

  CALL METHOD lo_nd_rcf_pref_contact->get_static_attributes
    IMPORTING
      static_attributes = wd_this->ls_temp_prfcnt.

  CALL METHOD lo_nd_rcf_mail->get_static_attributes
    IMPORTING
      static_attributes = wd_this->lv_temp_mail.

  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
    lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
    lo_nd_rcf_ireferences->get_static_attributes_table(
      IMPORTING table = wd_this->lt_temp_ireferences ).
  ENDIF.

* Code for Customer Connect Enhancement to enable Private Email for Internal Candidates:
  IF wd_comp_controller->mv_pmail = 'X'.
*   Store values in temporary structure: Will be used on Cancel action.
    lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
    CALL METHOD lo_nd_rcf_mail_bus_pvt->get_static_attributes
      IMPORTING
        static_attributes = wd_this->ls_temp_bus_pvt_email.
  ENDIF.

ENDMETHOD.

METHOD wddomodifyview .

* Sets edit or display mode for communication

  DATA lo_nd_rcf_vsible          TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_vsible          TYPE REF TO if_wd_context_element.
  DATA lv_edit                   TYPE wd_this->element_rcf_vsible-edit.
  DATA lv_display                TYPE wd_this->element_rcf_vsible-display.
  DATA lo_nd_rcf_pref_contact    TYPE REF TO if_wd_context_node.
  DATA lo_node_info              TYPE REF TO if_wd_context_node_info.
  DATA lo_nd_rcf_ireferences     TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_ireferences     TYPE REF TO if_wd_context_element.
  DATA lt_elem_set               TYPE wdr_context_element_set.
  DATA ls_rcf_ireferences        TYPE wd_this->element_rcf_ireferences.
  DATA lo_nd_rcf_mail_visible    TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail_visible    TYPE REF TO if_wd_context_element.
  DATA lo_prlng_lbl              TYPE REF TO cl_wd_label.
  DATA lo_prlng_drp              TYPE REF TO cl_wd_dropdown_by_key.
  DATA lo_prlng_lbl_cp           TYPE REF TO cl_wd_label.
  DATA lo_prlng_drp_cp           TYPE REF TO cl_wd_dropdown_by_key.
  DATA lv_internet_ref_url_txt   TYPE rcf_s_mdl_cand_internet_ref-internet_ref_url_txt.

  lo_nd_rcf_vsible = wd_context->get_child_node( name = wd_this->wdctx_rcf_vsible ).
  lo_el_rcf_vsible = lo_nd_rcf_vsible->get_element( ).

  IF wd_comp_controller->gv_comm_edit = abap_true.
    lv_edit = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible.
    lv_display = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none.
  ENDIF.

  IF wd_comp_controller->gv_comm_edit = abap_false.
    lv_edit = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none.
    lv_display = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible.
  ENDIF.

  lo_el_rcf_vsible->set_attribute(
      EXPORTING      name =  `EDIT`
                    value = lv_edit ).

  lo_el_rcf_vsible->set_attribute(
      EXPORTING      name =  `DISPLAY`
                    value = lv_display ).

  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_node_info = lo_nd_rcf_pref_contact->get_node_info( ).

  lo_node_info->set_attribute_value_set(
    EXPORTING name      = 'PRFD_CNT_ADD'
              value_set = wd_comp_controller->gt_pref_cnt_add ).

  lo_node_info->set_attribute_value_set(
    EXPORTING name      = 'PRFD_CNT_TEL'
              value_set = wd_comp_controller->gt_pref_num ).

* in edit mode, make the "Open Link" link visible or invisible and add the protocol if missing
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true AND
     wd_comp_controller->gv_comm_edit = abap_true.

    lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
    lt_elem_set = lo_nd_rcf_ireferences->get_elements( ).

    LOOP AT lt_elem_set INTO lo_el_rcf_ireferences.

      CLEAR: ls_rcf_ireferences.

      lo_el_rcf_ireferences->get_static_attributes(
        IMPORTING
          static_attributes = ls_rcf_ireferences ).

      CONDENSE ls_rcf_ireferences-internet_ref_url_txt.

      IF ls_rcf_ireferences-internet_ref_url_txt IS NOT INITIAL AND
         ls_rcf_ireferences-internet_ref_url_txt NE wd_assist->gc_default_link.
        ls_rcf_ireferences-test_link_visible = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible.
      ELSE.
        ls_rcf_ireferences-test_link_visible = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none.
      ENDIF.

      IF ls_rcf_ireferences-internet_ref_url_txt IS NOT INITIAL                AND
         ls_rcf_ireferences-internet_ref_url_txt NE wd_assist->gc_default_link AND
         ls_rcf_ireferences-internet_ref_url_txt NP 'http://*'                 AND
         ls_rcf_ireferences-internet_ref_url_txt NP 'https://*'.
*commenting below code since direct assignment w/o checking if URL is valid results in dump in framework
*example if url contains http::/www.linkedin.com/in.. code still appends http:// and url becomes http://http::/www.linl..->dump
         lv_internet_ref_url_txt = wd_assist->gc_default_link && ls_rcf_ireferences-internet_ref_url_txt.
         IF cl_http_utility=>is_valid_url( lv_internet_ref_url_txt ) = abap_true.
            ls_rcf_ireferences-internet_ref_url_txt = lv_internet_ref_url_txt.
         ENDIF.
*        ls_rcf_ireferences-internet_ref_url_txt = wd_assist->gc_default_link && ls_rcf_ireferences-internet_ref_url_txt.
      ENDIF.

      lo_el_rcf_ireferences->set_static_attributes( ls_rcf_ireferences ).

    ENDLOOP.

  ENDIF.

  IF first_time EQ abap_true.

    IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.

      lo_el_rcf_vsible->set_attribute(
        EXPORTING
          name  = `NEW_ELEMENTS_VISIBLE`
          value = abap_true ).

    ENDIF.

    IF ( wd_assist->read_switch_prlng( ) EQ ' ' ).
     lo_prlng_lbl ?= view->get_element( id = 'LBL_PREF_LANG' ).
     lo_prlng_lbl->set_visible( '01' ).
     lo_prlng_drp ?= view->get_element( id = 'DRPDWN_PREF_LAN' ).
     lo_prlng_drp->set_visible( '01' ).
     lo_prlng_lbl_cp ?= view->get_element( id = 'LBL_PREF_LANG_CP' ).
     lo_prlng_lbl_cp->set_visible( '01' ).
     lo_prlng_drp_cp ?= view->get_element( id = 'DRPDWN_PREF_LAN_CP' ).
     lo_prlng_drp_cp->set_visible( '01' ).
    ENDIF.

  ENDIF.

ENDMETHOD.

method WDDOONCONTEXTMENU . "#EC NEEDED
endmethod.

METHOD check_address .

* checks address data and handles the region field depending on the country

  DATA lo_nd_rcf_communication   TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication   TYPE REF TO if_wd_context_element.
  DATA lo_nd_region_values       TYPE REF TO if_wd_context_node.
  DATA lo_nd_region_attributes   TYPE REF TO if_wd_context_node.
  DATA lo_el_region_attributes   TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_enable TYPE REF TO if_wd_context_node.
  DATA lt_elem_address           TYPE wdr_context_element_set.
  DATA lv_candidate     TYPE wd_this->element_rcf_enable-candidate.
  DATA lv_enabled                TYPE wdy_boolean.

* get addresses
  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_nd_rcf_enable = wd_context->get_child_node( name = wd_this->wdctx_rcf_enable ).
  lt_elem_address = lo_nd_rcf_communication->get_elements( ).

* check addresses
  LOOP AT lt_elem_address INTO lo_el_rcf_communication.
*   country changed? -> update regions
    lo_nd_rcf_enable->get_attribute(
          EXPORTING      name =  `CANDIDATE`
          IMPORTING      value = lv_candidate ).
    lo_nd_region_values = lo_el_rcf_communication->get_child_node( name = wd_this->wdctx_region_values ).

    wd_this->load_regions(
      io_node           = lo_nd_region_values
      io_parent_element = lo_el_rcf_communication ).

*   check if region is initial
    IF lo_nd_region_values->get_element_count( ) > 1 AND lv_candidate NE 'X'.
      lv_enabled = abap_false.
    ELSE.
      lv_enabled = abap_true.
    ENDIF.

    lo_nd_region_attributes = lo_el_rcf_communication->get_child_node( name = wd_this->wdctx_region_attributes ).
    lo_el_region_attributes = lo_nd_region_attributes->create_element( ).
    lo_el_region_attributes->set_attribute( name = 'REGION_ENABLE' value = lv_enabled ).
    lo_nd_region_attributes->bind_element( lo_el_region_attributes ).

    CLEAR lo_el_rcf_communication.
  ENDLOOP.

ENDMETHOD.

METHOD check_commn_data.

* reads communication data (address, e-mail) and calls check method

  DATA lo_nd_rcf_pref_contact  TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail          TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_communication TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication TYPE REF TO if_wd_context_element.
  DATA lo_controller           TYPE REF TO if_wd_controller.
  DATA lt_messages             TYPE        bapirettab.
  DATA lt_elem_address         TYPE        wdr_context_element_set.
  DATA ls_rcf_communication    TYPE        wd_this->element_rcf_communication.
  DATA lt_address_data         TYPE        rcf_t_cand_commn_address_pl.
  DATA ls_address_data         TYPE        rcf_s_cand_commn_address_pl.
  DATA lv_prfd_cnt_add         TYPE        wd_this->element_rcf_pref_contact-prfd_cnt_add.
  DATA lv_e_mail               TYPE        wd_this->element_rcf_mail-e_mail.

* Read Preferred Address
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_nd_rcf_pref_contact->get_attribute(
    EXPORTING      name =  `PRFD_CNT_ADD`
    IMPORTING      value = lv_prfd_cnt_add ).

* Read Email
  lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
  lo_nd_rcf_mail->get_attribute(
    EXPORTING
      name =  `E_MAIL`
    IMPORTING
      value = lv_e_mail ).

* Read Address Data
  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lt_elem_address = lo_nd_rcf_communication->get_elements( ).

  LOOP AT lt_elem_address INTO lo_el_rcf_communication.
    lo_el_rcf_communication->get_static_attributes( IMPORTING static_attributes = ls_rcf_communication ).
    MOVE-CORRESPONDING ls_rcf_communication TO ls_address_data. "#EC ENHOK
    APPEND ls_address_data TO lt_address_data.
  ENDLOOP.

* check communication data
  CALL METHOD wd_assist->check_commn_data
    EXPORTING
      is_cand_hrobject             = wd_comp_controller->gs_hrobject
      iv_preferred_address_channel = lv_prfd_cnt_add
      iv_email                     = lv_e_mail
      it_address_data              = lt_address_data
    IMPORTING
      et_messages                  = lt_messages.

  DELETE lt_messages WHERE type NE 'E' AND type NE 'A'.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
    data_consistant = abap_false.
  ELSE.
    data_consistant = abap_true.
  ENDIF.

ENDMETHOD.

method check_ireferences .

  data: lo_api_controller         type ref to if_wd_controller,
        lo_message_manager        type ref to if_wd_message_manager,
        lo_nd_rcf_ireferences     type ref to if_wd_context_node,
        lo_el_rcf_ireferences     type ref to if_wd_context_element,
        lo_node_info              type ref to if_wd_context_node_info,
        lt_context_elements       type wdr_context_element_set,
        ls_rcf_ireferences        type wd_this->element_rcf_ireferences,
        ls_attribute_info         type wdr_context_attribute_info,
        ls_value_key_set          type wdr_context_attr_value,
        lv_message                type string,
        lv_nof_elements           type i,
        lv_url                    type rcf_S_Cand_Internet_Ref_Pl-internet_Ref_Url_Txt.

  ev_data_consistant = abap_true.

  lo_api_controller ?= wd_this->wd_get_api( ).
  lo_message_manager = lo_api_controller->get_message_manager( ).

  lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).

  lo_node_info = lo_node_info = lo_nd_rcf_ireferences->get_node_info( ).
  lo_node_info->get_attribute(
    exporting
      name           = 'URL_CATEGORY'
    receiving
      attribute_info = ls_attribute_info ).

  lo_nd_rcf_ireferences->get_elements(
    receiving
      set  = lt_context_elements ).

  lv_nof_elements = lines( lt_context_elements ).

  loop at lt_context_elements into lo_el_rcf_ireferences.

    clear: ls_value_key_set.

    lo_el_rcf_ireferences->get_static_attributes(
      importing
        static_attributes = ls_rcf_ireferences ).

    lv_url = ls_rcf_ireferences-internet_ref_url_txt. "Start PVA1918320
    condense ls_rcf_ireferences-internet_ref_url_txt NO-GAPS.
    IF lv_url <> ls_rcf_ireferences-internet_ref_url_txt.

      ls_rcf_ireferences-internet_ref_url_txt = lv_url.
      message e045(hrrcf_wd_ui) into lv_message.
      lo_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_rcf_ireferences
          attribute_name = 'INTERNET_REF_URL_TXT' ).

      ev_data_consistant = abap_false.
      RETURN.
    ENDIF. "End PVA1918320
    condense ls_rcf_ireferences-description_txt.

*   the candidate has to specify a URL category
    if ( ls_rcf_ireferences-url_category is initial                                   ) and
       ( ( ls_rcf_ireferences-internet_ref_url_txt is not initial and
           ls_rcf_ireferences-internet_ref_url_txt ne wd_assist->gc_default_link ) or
         ( ls_rcf_ireferences-description_txt is not initial                     )    ).

      message e131(hrrcf0007) into lv_message.

      lo_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_rcf_ireferences
          attribute_name = 'URL_CATEGORY' ).

      ev_data_consistant = abap_false.

*   the candidate has to enter a URL
    elseif ( ls_rcf_ireferences-internet_ref_url_txt is initial or
             ls_rcf_ireferences-internet_ref_url_txt eq wd_assist->gc_default_link ) and
           ( ls_rcf_ireferences-url_category is not initial or
             ls_rcf_ireferences-description_txt is not initial                     ).

      message e132(hrrcf0007) into lv_message.

      lo_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_rcf_ireferences
          attribute_name = 'INTERNET_REF_URL_TXT' ).

      ev_data_consistant = abap_false.

*   delete the context element if no values have been specified by the candidate
    elseif ( ls_rcf_ireferences-internet_ref_url_txt is initial or
             ls_rcf_ireferences-internet_ref_url_txt eq wd_assist->gc_default_link ) and
           ( ls_rcf_ireferences-url_category is initial                            ) and
           ( ls_rcf_ireferences-description_txt is initial                         ).

      if lv_nof_elements gt 1.  "there should be at least one entry

        lo_nd_rcf_ireferences->remove_element(
          exporting
            element = lo_el_rcf_ireferences ).

        lv_nof_elements = lv_nof_elements - 1.

      endif.

*   everything is fine
    else.

*     make the "Test link" link visible
      lo_el_rcf_ireferences->set_attribute(
        exporting
          value = cl_wd_uielement=>e_visible-visible
          name  = 'TEST_LINK_VISIBLE' ).

*     determine the URL category text
      read table ls_attribute_info-value_set
        with key value = ls_rcf_ireferences-url_category
        into ls_value_key_set.

      if sy-subrc eq 0.
        lo_el_rcf_ireferences->set_attribute(
          exporting
            value = ls_value_key_set-text
            name  = 'URL_CATEGORY_TXT' ).
      endif.

    endif.

  endloop.

endmethod.

METHOD get_acadamic_title .

* gets list of academic titles

  DATA lo_nd_rcf_personel_data TYPE REF TO if_wd_context_node.
  DATA lo_node_info            TYPE REF TO if_wd_context_node_info.
  DATA lo_controller           TYPE REF TO if_wd_controller.
  DATA lt_messages                TYPE bapirettab.
  DATA lt_acadamic_values      TYPE rcf_t_vh_pl.
  DATA ls_acadamic_value       TYPE rcf_s_vh_pl.
  DATA lt_value_set            TYPE tihttpnvp.
  DATA ls_value_set            TYPE ihttpnvp.       " WorkArea.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_node_info = lo_nd_rcf_personel_data->get_node_info( ).
  CALL METHOD wd_assist->get_acadamic_title_list
    IMPORTING
      et_acadamic_title = lt_acadamic_values
      et_message        = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* Copy values to key value table for binding:
  LOOP AT lt_acadamic_values INTO ls_acadamic_value.
    CLEAR ls_value_set.
    ls_value_set-name  = ls_acadamic_value-key.
    ls_value_set-value = ls_acadamic_value-value.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'TITLE'
      value_set = lt_value_set.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'TITLE_ACA2'
      value_set = lt_value_set.

ENDMETHOD.

METHOD get_country .

* gets the list of countries

  DATA lo_nd_rcf_communication      TYPE REF TO if_wd_context_node.
  data lo_node_info                 TYPE REF TO if_wd_context_node_info.
  DATA lo_controller                TYPE REF TO if_wd_controller.
  DATA lt_messages                   TYPE bapirettab.
  DATA lt_country_values            TYPE rcf_t_vh_pl.
  data ls_country_value             TYPE rcf_s_vh_pl.
  DATA lt_value_set                 TYPE tihttpnvp.
  data ls_value_set                 TYPE ihttpnvp.

  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_node_info = lo_nd_rcf_communication->get_node_info( ).

  CALL METHOD wd_assist->get_country_list
    IMPORTING
      et_country = lt_country_values
      et_message = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* Copy values to key value table for binding
  LOOP AT lt_country_values INTO ls_country_value.
    CLEAR ls_value_set.
    ls_value_set-name = ls_country_value-key.
    ls_value_set-value = ls_country_value-value.
    APPEND  ls_value_set TO  lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'COUNTRY'
      value_set = lt_value_set.

ENDMETHOD.

METHOD get_foa .

* gets list of forms of address

  DATA lo_nd_rcf_personel_data      TYPE REF TO if_wd_context_node.
  DATA lo_node_info                 TYPE REF TO if_wd_context_node_info.
  DATA lo_controller                TYPE REF TO if_wd_controller.
  DATA lt_messages                   TYPE bapirettab.
  DATA lt_foa_values                TYPE rcf_t_vh_pl.
  DATA ls_foa_value                 TYPE rcf_s_vh_pl.
  DATA lt_value_set                 TYPE tihttpnvp.
  DATA ls_value_set                 TYPE ihttpnvp.       " WorkArea.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_node_info = lo_nd_rcf_personel_data->get_node_info( ).

  CALL METHOD wd_assist->get_title_list
    IMPORTING
      et_title   = lt_foa_values
      et_message = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* Copy values to key value table for binding:
  LOOP AT lt_foa_values INTO ls_foa_value.
    CLEAR ls_value_set.
    ls_value_set-name  = ls_foa_value-key.
    ls_value_set-value = ls_foa_value-value.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'FORMOFADDRESS'
      value_set = lt_value_set.

ENDMETHOD.

method GET_GENDER .

* gets list of gender values

  DATA lo_nd_rcf_personel_data TYPE REF TO if_wd_context_node.
  DATA lo_node_info            TYPE REF TO if_wd_context_node_info.
  DATA lt_gender_values        TYPE rcf_t_vh_pl.
  DATA ls_gender_value         TYPE rcf_s_vh_pl.
  DATA lt_value_set            TYPE tihttpnvp.
  DATA ls_value_set            TYPE ihttpnvp.       " WorkArea.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_node_info = lo_nd_rcf_personel_data->get_node_info( ).

  CALL METHOD wd_assist->get_gender_list
    IMPORTING
      et_gender = lt_gender_values.

* Copy values to key value table for binding:
  LOOP AT lt_gender_values INTO ls_gender_value.
    CLEAR ls_value_set.
    ls_value_set-name  = ls_gender_value-key.
    ls_value_set-value = ls_gender_value-value.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'SEX'
      value_set = lt_value_set.
endmethod.

METHOD get_other_title .

* gets list of other titles

  DATA lo_nd_rcf_personel_data      TYPE REF TO if_wd_context_node.
  DATA lo_node_info                 TYPE REF TO if_wd_context_node_info.
  DATA lo_controller                TYPE REF TO if_wd_controller.
  DATA lt_messages                   TYPE bapirettab.
  DATA lt_other_values              TYPE rcf_t_vh_pl.
  DATA ls_other_value               TYPE rcf_s_vh_pl.
  DATA lt_value_set                 TYPE tihttpnvp.
  DATA ls_value_set                 TYPE ihttpnvp.       " WorkArea.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_node_info = lo_nd_rcf_personel_data->get_node_info( ).

  CALL METHOD wd_assist->get_other_title_list
    IMPORTING
      et_other_title = lt_other_values
      et_message     = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* Copy values to key value table for binding:
  LOOP AT lt_other_values INTO ls_other_value.
    CLEAR ls_value_set.
    ls_value_set-name  = ls_other_value-key.
    ls_value_set-value = ls_other_value-value.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'TITLE_SPPL'
      value_set = lt_value_set.

ENDMETHOD.

METHOD get_prefix .

* gets list of name prefixes
  DATA lo_nd_rcf_personel_data     TYPE REF TO if_wd_context_node.
  DATA lo_node_info                TYPE REF TO if_wd_context_node_info.
  DATA lo_controller               TYPE REF TO if_wd_controller.
  DATA lt_messages                   TYPE bapirettab.
  DATA lt_prefix_values            TYPE rcf_t_vh_pl.
  DATA ls_prefix_value             TYPE rcf_s_vh_pl.
  DATA lt_value_set                TYPE tihttpnvp.
  DATA ls_value_set                TYPE ihttpnvp.       " WorkArea.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_node_info = lo_nd_rcf_personel_data->get_node_info( ).

  CALL METHOD wd_assist->get_prefix_list
    IMPORTING
      et_prefix  = lt_prefix_values
      et_message = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* Copy values to key value table for binding:
  LOOP AT lt_prefix_values INTO ls_prefix_value.
    CLEAR ls_value_set.
    ls_value_set-name  = ls_prefix_value-key.
    ls_value_set-value = ls_prefix_value-value.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'PREFIX1'
      value_set = lt_value_set.

ENDMETHOD.

method get_url_categories .

  data: lo_nd_rcf_ireferences   type ref to if_wd_context_node,
        lo_node_info            type ref to if_wd_context_node_info,
        lt_url_categories       type rcf_t_vh_pl,
        ls_url_category         type rcf_s_vh_pl,
        lt_value_set            type tihttpnvp,
        ls_value_set            type ihttpnvp.

  lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
  lo_node_info = lo_nd_rcf_ireferences->get_node_info( ).

  wd_assist->get_url_categories(
    importing
      et_url_categories = lt_url_categories ).

  loop at lt_url_categories into ls_url_category.
    clear ls_value_set.
    ls_value_set-name  = ls_url_category-key.
    ls_value_set-value = ls_url_category-value.
    append ls_value_set to lt_value_set.
  endloop.

  lo_node_info->set_attribute_value_set(
    exporting
      name      = 'URL_CATEGORY'
      value_set = lt_value_set ).

endmethod.

METHOD load_regions .

* gets list of regions for the specified country and handles the region field

  DATA lo_controller              TYPE REF TO if_wd_controller.
  DATA lt_messages                 TYPE bapirettab.
  DATA lt_region                  TYPE rcf_t_vh_pl.
  DATA ls_region                  TYPE rcf_s_vh_pl.
  DATA lt_region_values           TYPE wd_this->elements_region_values.
  DATA ls_region_value            TYPE wd_this->element_region_values.
  DATA lv_country                 TYPE land1.
  DATA lv_region                  TYPE string.
  DATA lv_index                   TYPE i.
  DATA lv_count                   TYPE i.

* get country key
  io_parent_element->get_attribute( EXPORTING name = 'COUNTRY'
                                    IMPORTING value = lv_country ).
* get region key
  io_parent_element->get_attribute( EXPORTING name = 'REGION'
                                    IMPORTING value = lv_region ).
  IF lv_country IS NOT INITIAL.
*   load regions for specific country
    CALL METHOD wd_assist->get_region_list
      EXPORTING
        iv_country = lv_country
      IMPORTING
        et_region  = lt_region
        et_message = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

*   Copy values to key value table for binding:
    LOOP AT lt_region INTO ls_region.
      ls_region_value-region = ls_region-key.
      ls_region_value-region_txt = ls_region-value.
      APPEND ls_region_value TO lt_region_values.
      IF lv_region = ls_region-key.
        lv_index = sy-tabix.
      ENDIF.
    ENDLOOP.

*   Get region key and region text for binding
    READ TABLE lt_region_values  INTO ls_region_value WITH KEY region = lv_region.   "#EC *
    ls_region-key = ls_region_value-region.
    ls_region-value = ls_region_value-region_txt.
    SORT lt_region_values BY region_txt.

    io_node->bind_table( lt_region_values ).
    DESCRIBE TABLE lt_region_values LINES lv_count.

    IF lv_index > 0. " Set selected region
      io_node->set_lead_selection_index( lv_index ).
    ELSE.
      CLEAR lv_region.
      io_parent_element->set_attribute( EXPORTING name = 'REGION'
                                                 value = lv_region ).
    ENDIF.

    IF lv_count < 2.
      io_node->set_attribute( EXPORTING name = 'REGION'
                                        value = ' ' ).
      io_node->set_attribute( EXPORTING name = 'REGION_TXT'
                                        value = ' ' ).
    ENDIF.

*   Check whether communication popup in display mode and region value is not selected
    IF wd_comp_controller->gv_display_region EQ abap_true AND lv_index = 1.
      CLEAR lt_region_values.
      ls_region_value-region_txt = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
      INSERT ls_region_value INTO lt_region_values INDEX 1.
      io_node->bind_table( lt_region_values ).
      io_node->set_attribute( EXPORTING name = 'REGION_TXT'
                                               value = ' ' ).
    ENDIF.

  ELSE.              " country key is initial

    CLEAR lt_region_values.
    ls_region_value-region_txt = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
    INSERT ls_region_value INTO lt_region_values INDEX 1.
    io_node->bind_table( lt_region_values ).
    io_node->set_attribute( EXPORTING name = 'REGION'
                                               value = ' ' ).

    io_node->set_attribute( EXPORTING name = 'REGION_TXT'
                                                 value = ' ' ).
  ENDIF.

ENDMETHOD.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

method onactionadd_ireference .

  data: lo_api_controller         type ref to if_wd_controller,
        lo_message_manager        type ref to if_wd_message_manager,
        lo_nd_rcf_ireferences     type ref to if_wd_context_node,
        lo_new_context_elem       type ref to if_wd_context_element,
        ls_rcf_ireferences        type wd_this->element_rcf_ireferences,
        lv_index                  type i,
        lv_message                type string.

  lo_api_controller ?= wd_this->wd_get_api( ).
  lo_message_manager = lo_api_controller->get_message_manager( ).

  context_element->get_static_attributes(
    importing
      static_attributes = ls_rcf_ireferences ).

  condense ls_rcf_ireferences-internet_ref_url_txt.

  if ls_rcf_ireferences-url_category is initial.

    message e131(hrrcf0007) into lv_message.

    lo_message_manager->report_attribute_error_message(
      exporting
        message_text   = lv_message
        element        = context_element
        attribute_name = 'URL_CATEGORY' ).

  elseif ls_rcf_ireferences-internet_ref_url_txt is initial or
         ls_rcf_ireferences-internet_ref_url_txt eq wd_assist->gc_default_link.

    message e132(hrrcf0007) into lv_message.

    lo_message_manager->report_attribute_error_message(
      exporting
        message_text   = lv_message
        element        = context_element
        attribute_name = 'INTERNET_REF_URL_TXT' ).

  else.

    clear ls_rcf_ireferences.

    ls_rcf_ireferences-internet_ref_url_txt = wd_assist->gc_default_link.

    lv_index = context_element->get_index( ).
    lv_index = lv_index + 1.

    lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
    lo_new_context_elem = lo_nd_rcf_ireferences->create_element( ).
    lo_new_context_elem->set_static_attributes(
      exporting
        static_attributes = ls_rcf_ireferences ).
    lo_nd_rcf_ireferences->bind_element(
      exporting
        new_item             = lo_new_context_elem
        set_initial_elements = abap_false
        index                = lv_index ).

  endif.

endmethod.

METHOD onactioncancel .

  DATA lo_nd_rcf_personel_data  TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_personel_data  TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_communication  TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_contact_no     TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail           TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail           TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_pref_contact   TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_pref_contact   TYPE REF TO if_wd_context_element.
  DATA ls_rcf_personel_data     TYPE wd_this->element_rcf_personel_data.
  DATA ls_rcf_mail              TYPE wd_this->element_rcf_mail.
  DATA ls_rcf_pref_contact      TYPE wd_this->element_rcf_pref_contact.
  DATA ls_rcf_mail_bus_pvt      TYPE wd_this->element_rcf_mail_bus_pvt.
  DATA lo_nd_rcf_mail_bus_pvt   TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail_bus_pvt   TYPE REF TO if_wd_context_element.

  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).
  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).

  lo_el_rcf_personel_data = lo_nd_rcf_personel_data->get_element( ).
  lo_el_rcf_mail = lo_nd_rcf_mail->get_element( ).
  lo_el_rcf_pref_contact = lo_nd_rcf_pref_contact->get_element( ).

  lo_el_rcf_personel_data->get_static_attributes(
    IMPORTING
      static_attributes = ls_rcf_personel_data ).

  ls_rcf_personel_data = wd_this->ls_temp_pdata.
  lo_el_rcf_personel_data->set_static_attributes(
      EXPORTING   static_attributes = ls_rcf_personel_data ).

  lo_nd_rcf_communication->bind_table( wd_this->lt_temp_commn ).
  wd_this->check_address( ).

  lo_nd_rcf_contact_no->bind_table( wd_this->lt_temp_cdata ).

  ls_rcf_pref_contact = wd_this->ls_temp_prfcnt.
  lo_el_rcf_pref_contact->set_static_attributes(
    EXPORTING  static_attributes = ls_rcf_pref_contact ).

  ls_rcf_mail = wd_this->lv_temp_mail.
  lo_el_rcf_mail->set_static_attributes(
    EXPORTING static_attributes = ls_rcf_mail ).

  IF wd_comp_controller->mv_pmail = 'X'.
    lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt  ).
    lo_el_rcf_mail_bus_pvt = lo_nd_rcf_mail_bus_pvt->get_element( ).
    ls_rcf_mail_bus_pvt = wd_this->ls_temp_bus_pvt_email.
    lo_el_rcf_mail_bus_pvt->set_static_attributes(
    EXPORTING static_attributes = ls_rcf_mail_bus_pvt ).
  ENDIF.
****************************LAK2026192**************************beg
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
      wd_comp_controller->read_cand_internet_references( ).
  ENDIF.
****************************LAK2026192**************************end
  wd_comp_controller->branch_popup->close( ).

ENDMETHOD.

method ONACTIONCLOSE .

  wd_comp_controller->gv_display_region = abap_false.
  wd_comp_controller->branch_popup->close( ).

endmethod.

method onactiondelete_ireference .

  data: lo_nd_rcf_ireferences type ref to if_wd_context_node,
        ls_rcf_ireferences    type wd_this->element_rcf_ireferences,
        lv_nof_elements       type i.

  lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
  lv_nof_elements = lo_nd_rcf_ireferences->get_element_count( ).

* delete the internet reference entry
  if lv_nof_elements gt 1.

    lo_nd_rcf_ireferences->remove_element(
      exporting
        element          = context_element ).

* reset the internet reference entry if it is the last one
  else.

    ls_rcf_ireferences-internet_ref_url_txt = wd_assist->gc_default_link.

    context_element->set_static_attributes(
       static_attributes = ls_rcf_ireferences ).

  endif.

endmethod.

METHOD onactionget_region .

* load regions, handle region field (enable, disable) and handle post code field (required, not required)

  DATA lo_nd_rcf_communication     TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication     TYPE REF TO if_wd_context_element.
  DATA lo_nd_region_values         TYPE REF TO if_wd_context_node.
  DATA lo_nd_region_attributes     TYPE REF TO if_wd_context_node.
  DATA lo_el_region_attributes     TYPE REF TO if_wd_context_element.
  DATA lt_elem_communication       TYPE wdr_context_element_set.
  DATA ls_rcf_communication        TYPE wd_this->element_rcf_communication.
  DATA lv_enabled                  TYPE wdy_boolean.
  DATA lv_postcode_req_status      TYPE boole_d.
  DATA lv_postcode_required        TYPE wd_this->element_rcf_communication-postcode_required.
  DATA lv_selected_country         TYPE land1.

  lo_el_rcf_communication = wdevent->get_context_element( 'CONTEXT_ELEMENT' ).
  lo_el_rcf_communication->set_attribute( EXPORTING name = 'REGION' value = ' ' ).
  lo_nd_region_values = lo_el_rcf_communication->get_child_node( name = wd_this->wdctx_region_values ).

* load regions
  wd_this->load_regions(
    io_node           = lo_nd_region_values
    io_parent_element = lo_el_rcf_communication  ).

* check amount of regions found. If no region is found, disable region field
* disable region field means: lv_enabled = abap_true (!)
  IF lo_nd_region_values->get_element_count( ) > 1.
    lv_enabled = abap_false.
  ELSE.
    lv_enabled = abap_true.
  ENDIF.

  lo_nd_region_attributes = lo_el_rcf_communication->get_child_node( name = wd_this->wdctx_region_attributes ).
  lo_el_region_attributes = lo_nd_region_attributes->create_element( ).
  lo_el_region_attributes->set_attribute( name = 'REGION_ENABLE' value = lv_enabled ).
  lo_nd_region_attributes->bind_element( lo_el_region_attributes ).

* Set postcode field to "required" according to customizing flag t005-xplzs.    "CG
* get the selected country.
  IF lo_el_rcf_communication IS NOT INITIAL.
    lo_el_rcf_communication->get_attribute( EXPORTING name  = `COUNTRY`
                                            IMPORTING value = lv_selected_country ).
  ENDIF.

  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lt_elem_communication = lo_nd_rcf_communication->get_elements( ).

* handle post code field (required or not)
* (make field required depending on t005-xplzs and depending on the entries in the street field)
  LOOP AT lt_elem_communication INTO lo_el_rcf_communication.
    lo_el_rcf_communication->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_communication ).

    IF ls_rcf_communication-country IS NOT INITIAL AND ls_rcf_communication-country = lv_selected_country.
*     check the status of customizing flag t005-xplzs for the chosen country.
      CALL METHOD wd_assist->check_postalcode_req
        EXPORTING
          iv_country      = ls_rcf_communication-country
        IMPORTING
          ev_postcode_req = lv_postcode_req_status.

*     set field to required or not required
      IF lv_postcode_req_status EQ abap_true AND
             ( ls_rcf_communication-street IS NOT INITIAL
   OR ls_rcf_communication-street2 IS NOT INITIAL ).
        lv_postcode_required = 01.                               "required
      ELSE.                                                      "t005-xplzs = ' '
        lv_postcode_required = 00.                               "not required
      ENDIF.

      lo_el_rcf_communication->set_attribute(
        name  = `POSTCODE_REQUIRED`
        value = lv_postcode_required ).

    ELSEIF ls_rcf_communication-country IS INITIAL.
      lv_postcode_required = 00.                                 "not required

      lo_el_rcf_communication->set_attribute(
        name  = `POSTCODE_REQUIRED`
        value = lv_postcode_required ).
    ENDIF.
    CLEAR lo_el_rcf_communication.

  ENDLOOP.

ENDMETHOD.

METHOD onactionok .

  DATA lo_nd_rcf_mail          TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail          TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_personel_data TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_personel_data TYPE REF TO if_wd_context_element.
  DATA lo_nd_region_values     TYPE REF TO if_wd_context_node.
  DATA lo_el_region_values     TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_communication TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_communication TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_display       TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_display       TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_pref_contact  TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_contact_no    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_ireferences   TYPE REF TO if_wd_context_node.
  DATA lo_node_info            TYPE REF TO if_wd_context_node_info.
  DATA lo_context_element      TYPE REF TO if_wd_context_element.
  DATA lo_api_controller       TYPE REF TO if_wd_controller.
  DATA lo_message_manager      TYPE REF TO if_wd_message_manager.
  DATA lt_rcf_communication    TYPE wd_this->elements_rcf_communication.
  DATA ls_rcf_communication    TYPE wd_this->element_rcf_communication.
  DATA lt_elem_communication   TYPE wdr_context_element_set.
  DATA lt_comm_popltd          TYPE wd_this->elements_rcf_communication.
  DATA lt_pop_contact_no       TYPE wd_this->elements_rcf_contact_no.
  DATA lt_region               TYPE wd_this->elements_region_values.
  DATA lt_contact_no           TYPE wd_this->elements_rcf_contact_no.
  DATA ls_contact_no           TYPE wd_this->element_rcf_contact_no.
  DATA lt_rcf_ireferences      TYPE wd_this->elements_rcf_ireferences.
  DATA lt_table                TYPE rcf_t_vh_pl.
  DATA ls_table                TYPE rcf_s_vh_pl.
  DATA lt_messages             TYPE bapirettab.
  DATA ls_message              TYPE bapiret2.
  DATA ls_msg                  TYPE symsg.
  DATA ls_personel_data        TYPE wd_this->element_rcf_personel_data.
  DATA ls_display              TYPE wd_this->element_rcf_display.
  DATA ls_rcf_pref_contact     TYPE wd_this->element_rcf_pref_contact.
  DATA ls_region_values        TYPE wd_this->element_region_values.
  DATA lv_e_mail               TYPE wd_this->element_rcf_mail-e_mail.
  DATA lv_lastname             TYPE wd_this->element_rcf_personel_data-lastname.
  DATA lv_region_txt           TYPE wd_this->element_region_values-region_txt.
  DATA lv_index                TYPE sy-tabix.
  DATA lv_index_comm           TYPE i.
  DATA lv_postcode_req_status  TYPE boole_d.
  DATA lv_postcode_required    TYPE wd_this->element_rcf_communication-postcode_required.
  DATA lv_data_consistant      TYPE wdy_boolean.
  DATA lv_message              TYPE string.

* 1) Read communication data
* 1a) Read e-mail and last name
  lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_el_rcf_mail = lo_nd_rcf_mail->get_element( ).
  lo_el_rcf_personel_data = lo_nd_rcf_personel_data->get_element( ).

  lo_el_rcf_mail->get_attribute(
    EXPORTING        name =  `E_MAIL`
    IMPORTING        value = lv_e_mail ).

  lo_el_rcf_personel_data->get_attribute(
    EXPORTING      name =  `LASTNAME`
    IMPORTING      value = lv_lastname ).

* 1b) Read preferred contact number
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_node_info = lo_nd_rcf_pref_contact->get_node_info( ).

  lo_node_info->set_attribute_value_set(
    EXPORTING name      = 'PRFD_CNT_TEL'
              value_set = wd_comp_controller->gt_pref_num ).

* 2) Check required field: last name
  IF lv_lastname IS INITIAL.
    lv_message = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/ENTER_REQUIRED_FIELDS' ).
    lo_api_controller ?= wd_this->wd_get_api( ).
    CALL METHOD lo_api_controller->get_message_manager
      RECEIVING
        message_manager = lo_message_manager.

    CALL METHOD lo_message_manager->raise_error_message
      EXPORTING
        message_text = lv_message.
  ELSE.
*   3) Check if the email format is correct
    IF lv_e_mail IS NOT INITIAL.
      CALL METHOD wd_assist->check_email_format
        EXPORTING
          iv_email    = lv_e_mail
        IMPORTING
          et_messages = lt_messages.

      IF lt_messages IS NOT INITIAL.
        lo_api_controller ?= wd_this->wd_get_api( ).
        CALL METHOD lo_api_controller->get_message_manager
          RECEIVING
            message_manager = lo_message_manager.
        LOOP AT lt_messages INTO ls_message.
          CALL METHOD lo_message_manager->report_attribute_error_message
            EXPORTING
              message_text   = ls_message-message
              element        = lo_el_rcf_mail
              attribute_name = `E_MAIL`.
        ENDLOOP.
        RETURN.
      ENDIF.
    ENDIF.

*   4) Further checks of the communication data entered
*   4a) Get communication data
    lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
    lo_el_rcf_communication = lo_nd_rcf_communication->get_element( ).

    lo_nd_rcf_communication->get_static_attributes_table(
      IMPORTING
        table = lt_rcf_communication ).

    lo_nd_rcf_pref_contact->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_pref_contact ).

    CLEAR ls_rcf_communication.

*   4b) Check if the address data maintained is complete
    REFRESH lt_comm_popltd.
    LOOP AT lt_rcf_communication INTO ls_rcf_communication.
      lv_index_comm = sy-tabix.
      IF ls_rcf_communication-street IS NOT INITIAL OR
         ls_rcf_communication-street2 IS NOT INITIAL OR
         ls_rcf_communication-postcode IS NOT INITIAL OR
         ls_rcf_communication-country IS NOT INITIAL.

        APPEND ls_rcf_communication TO lt_comm_popltd.

*       check if country is specified
        IF ls_rcf_communication-country IS INITIAL.
          lo_api_controller ?= wd_this->wd_get_api( ).
          CALL METHOD lo_api_controller->get_message_manager
            RECEIVING
              message_manager = lo_message_manager.

          lo_context_element = lo_nd_rcf_communication->get_element( lv_index_comm ).
          ls_msg-msgid = 'HRRCF0007'.
          ls_msg-msgno = 107.
          ls_msg-msgty = 'E'.

          CALL METHOD lo_message_manager->report_attribute_t100_message
            EXPORTING
              attribute_name = 'COUNTRY'
              element        = lo_context_element
              msg            = ls_msg.
          RETURN.
        ENDIF.

*       check if postal code is specified
*       check here also if customizing flag t005-xplzs is not initial.           "CG
        IF ls_rcf_communication-postcode IS INITIAL AND ls_rcf_communication-country IS NOT INITIAL.
          CALL METHOD wd_assist->check_postalcode_req
            EXPORTING
              iv_country      = ls_rcf_communication-country
            IMPORTING
              ev_postcode_req = lv_postcode_req_status.

          IF lv_postcode_req_status EQ abap_true AND
             ( ls_rcf_communication-street IS NOT INITIAL
            OR ls_rcf_communication-street2 IS NOT INITIAL ).
            lv_postcode_required = 01.                   "required
*           set asterix to mark post code as required field
            lo_el_rcf_communication->set_attribute(
              name  = `POSTCODE_REQUIRED`
              value = lv_postcode_required ).
          ENDIF.
        ENDIF.
      ENDIF.
    ENDLOOP.
    CLEAR ls_rcf_communication.

    lv_data_consistant = wd_this->check_commn_data( ).
    IF lv_data_consistant = abap_false.
      RETURN.
    ENDIF.

*   4c) Check communication data: Preferred communication data
    READ TABLE lt_rcf_communication INTO ls_rcf_communication WITH KEY channel = ls_rcf_pref_contact-prfd_cnt_add.

    IF ls_rcf_communication-street IS INITIAL AND
      ls_rcf_communication-street2 IS INITIAL AND
      ls_rcf_communication-postcode IS INITIAL AND
      ls_rcf_communication-country IS INITIAL .
      CALL METHOD lo_node_info->set_attribute_value_set
        EXPORTING
          name      = 'PRFD_CNT_ADD'
          value_set = wd_comp_controller->gt_pref_cnt_add.

      IF lt_comm_popltd IS NOT INITIAL.
        READ TABLE lt_comm_popltd INTO ls_rcf_communication INDEX 1.
        ls_rcf_pref_contact-prfd_cnt_add = ls_rcf_communication-channel.
        ls_rcf_pref_contact-prfd_cnt_add_txt = ls_rcf_communication-channel_description.
        CALL METHOD lo_nd_rcf_pref_contact->set_attribute
          EXPORTING
            value = ls_rcf_communication-channel
            name  = 'PRFD_CNT_ADD'.
        CALL METHOD lo_nd_rcf_pref_contact->set_attribute
          EXPORTING
            value = ls_rcf_communication-channel_description
            name  = 'PRFD_CNT_ADD_TXT'.

      ELSE.
        CLEAR lv_message.
        lv_message = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
        ls_rcf_pref_contact-prfd_cnt_add = '00'.
        ls_rcf_pref_contact-prfd_cnt_add_txt = ls_rcf_communication-channel_description.

        CALL METHOD lo_nd_rcf_pref_contact->set_attribute
          EXPORTING
            value = ls_rcf_pref_contact-prfd_cnt_add
            name  = 'PRFD_CNT_ADD'.
        CALL METHOD lo_nd_rcf_pref_contact->set_attribute
          EXPORTING
            value = ''
            name  = 'PRFD_CNT_ADD_TXT'.
      ENDIF.
    ELSE.
      CALL METHOD lo_nd_rcf_pref_contact->set_attribute
        EXPORTING
          value = ls_rcf_communication-channel
          name  = 'PRFD_CNT_ADD'.
      CALL METHOD lo_nd_rcf_pref_contact->set_attribute
        EXPORTING
          value = ls_rcf_communication-channel_description
          name  = 'PRFD_CNT_ADD_TXT'.
    ENDIF.

*   5) Check if region is changed
    lt_elem_communication = lo_nd_rcf_communication->get_elements( ). "Get number of elements
    lo_nd_rcf_communication->get_static_attributes_table( IMPORTING table = lt_rcf_communication ).

    LOOP AT lt_elem_communication INTO lo_el_rcf_communication.
      lv_index = sy-tabix.

      lo_nd_region_values = lo_el_rcf_communication->get_child_node( name = wd_this->wdctx_region_values ).
      lo_el_region_values = lo_nd_region_values->get_element( ).
      lo_el_region_values->get_attribute( EXPORTING name = `REGION_TXT` IMPORTING  value = lv_region_txt ).
      lo_nd_region_values->get_static_attributes_table( IMPORTING table = lt_region ).
      lo_el_rcf_communication->get_static_attributes( IMPORTING static_attributes = ls_rcf_communication ).

      READ TABLE  lt_region INTO ls_region_values WITH KEY region_txt = lv_region_txt.
      ls_rcf_communication-region = ls_region_values-region.

      IF ls_rcf_communication-country IS NOT INITIAL.
        CALL METHOD wd_assist->get_country_list
          IMPORTING
            et_country = lt_table.

        READ TABLE lt_table INTO ls_table WITH KEY key = ls_rcf_communication-country.
        ls_rcf_communication-country_txt = ls_table-value.
      ELSE.
        ls_rcf_communication-country_txt = ' '.
      ENDIF.

      MODIFY lt_rcf_communication FROM ls_rcf_communication INDEX lv_index.    "assign changed region key
      CLEAR ls_rcf_communication.
    ENDLOOP.

    lo_nd_rcf_communication->bind_table( lt_rcf_communication ).

*   6) assign changed text values
    lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
    lo_nd_rcf_display = wd_context->get_child_node( name = wd_this->wdctx_rcf_display ).
    lo_el_rcf_personel_data = lo_nd_rcf_personel_data->get_element( ).
    lo_el_rcf_display = lo_nd_rcf_display->get_element( ).

    lo_el_rcf_personel_data->get_static_attributes(
      IMPORTING
        static_attributes = ls_personel_data ).
    lo_el_rcf_display->get_static_attributes(
       IMPORTING
         static_attributes = ls_display ).

*   6a) assign form of address text
    IF ls_personel_data-formofaddress NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_title_list( IMPORTING et_title = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-formofaddress.
      ls_display-formofaddress_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name  = 'FORMOFADDRESS_TXT'
                                                 value =  ls_display-formofaddress_txt  ).
    ELSE.
      ls_display-formofaddress_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'FORMOFADDRESS_TXT'
                                                 value =  ls_display-formofaddress_txt  ).
    ENDIF.

*   6b) assign first title text
    IF ls_personel_data-title NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_acadamic_title_list( IMPORTING et_acadamic_title = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-title.
      ls_display-title_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'TITLE_TXT'
                                                 value =  ls_display-title_txt ).
    ELSE.
      ls_display-title_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'TITLE_TXT'
                                                 value =  ls_display-title_txt ).
    ENDIF.

*   6c) assign gender text
    IF ls_personel_data-sex NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_gender_list( IMPORTING et_gender = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-sex.
      ls_display-sex_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name  = 'SEX_TXT'
                                                 value =  ls_display-sex_txt  ).
    ELSE.
      ls_display-sex_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'SEX_TXT'
                                                 value =  ls_display-sex_txt  ).
    ENDIF.

*   6d) assign name affix text
    IF ls_personel_data-title_sppl NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_other_title_list( IMPORTING et_other_title = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-title_sppl.
      ls_display-title_sppl_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name  = 'TITLE_SPPL_TXT'
                                                 value =  ls_display-title_sppl_txt  ).
    ELSE.
      ls_display-title_sppl_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'TITLE_SPPL_TXT'
                                                 value =  ls_display-title_sppl_txt  ).
    ENDIF.

*   6e) assign second title text
    IF ls_personel_data-title_aca2 NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_acadamic_title_list( IMPORTING et_acadamic_title = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-title_aca2.
      ls_display-title_aca2_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name  = 'TITLE_ACA2_TXT'
                                                 value =  ls_display-title_aca2_txt  ).
    ELSE.
      ls_display-title_aca2_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'TITLE_ACA2_TXT'
                                                 value =  ls_display-title_aca2_txt  ).
    ENDIF.

*   6f) assign name prefix
    IF ls_personel_data-prefix1 NE ' '.
      CLEAR : lt_table , ls_table.
      wd_assist->get_prefix_list( IMPORTING et_prefix = lt_table ).

      READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-prefix1.
      ls_display-prefix_txt = ls_table-value.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'PREFIX_TXT'
                                                 value =  ls_display-prefix_txt ).
    ELSE.
      ls_display-prefix_txt = ' '.
      lo_el_rcf_display->set_attribute( EXPORTING name = 'PREFIX_TXT'
                                                 value =  ls_display-prefix_txt ).
    ENDIF.


*   6g) assign changed preferred contact number text
    lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).
    lo_nd_rcf_contact_no->get_static_attributes_table( IMPORTING table = lt_contact_no ).
    CLEAR ls_contact_no.
    LOOP AT lt_contact_no INTO ls_contact_no WHERE telephone IS NOT INITIAL.
      APPEND ls_contact_no TO lt_pop_contact_no.
    ENDLOOP.

    IF lt_pop_contact_no IS NOT INITIAL.
      READ TABLE  lt_pop_contact_no INTO ls_contact_no WITH KEY channel = ls_rcf_pref_contact-prfd_cnt_tel.
      IF sy-subrc  EQ 0.
        lo_nd_rcf_pref_contact->set_attribute( EXPORTING name  = 'PRFD_CNT_TEL'
                                                         value =  ls_contact_no-channel  ).
        lo_nd_rcf_pref_contact->set_attribute( EXPORTING name = 'PRFD_CNT_TEL_TXT'
                                                         value =  ls_contact_no-channel_description  ).
      ELSE.
        READ TABLE  lt_pop_contact_no INTO ls_contact_no INDEX 1.
        lo_nd_rcf_pref_contact->set_attribute( EXPORTING name  = 'PRFD_CNT_TEL'
                                                         value =  ls_contact_no-channel ).
        lo_nd_rcf_pref_contact->set_attribute( EXPORTING name = 'PRFD_CNT_TEL_TXT'
                                                         value =  ls_contact_no-channel_description ).
      ENDIF.
    ELSE.
      lo_nd_rcf_pref_contact->set_attribute( EXPORTING name  = 'PRFD_CNT_TEL'
                                                     value = '00' ).
      lo_nd_rcf_pref_contact->set_attribute( EXPORTING name = 'PRFD_CNT_TEL_TXT'
                                                       value = ' ' ).
    ENDIF.

*   7) check internet references
    IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.

      wd_this->check_ireferences(
        IMPORTING
          ev_data_consistant = lv_data_consistant ).

      IF lv_data_consistant = abap_false.
        RETURN.
      ENDIF.

      lo_nd_rcf_ireferences = wd_context->get_child_node( name = wd_this->wdctx_rcf_ireferences ).
      lo_nd_rcf_ireferences->get_static_attributes_table( IMPORTING table = lt_rcf_ireferences ).

    ENDIF.

*   8) set flag gv_data_changed to true in case of changed communication data
*     (will be used in SAVE method)
    IF wd_this->ls_temp_pdata       NE ls_personel_data      OR
       wd_this->ls_temp_prfcnt      NE ls_rcf_pref_contact   OR
       wd_this->lt_temp_cdata       NE lt_contact_no         OR
       wd_this->lt_temp_commn       NE lt_rcf_communication  OR
       wd_this->lv_temp_mail-e_mail NE lv_e_mail             OR
       wd_this->lt_temp_ireferences NE lt_rcf_ireferences.

      wd_comp_controller->gv_data_changed = abap_true.
    ENDIF.

*   Customer Connect enhancement changes for enabling Private Email:
    IF wd_comp_controller->mv_pmail = 'X'.
      DATA lo_nd_rcf_mail_bus_pvt TYPE REF TO if_wd_context_node.

      DATA lo_el_rcf_mail_bus_pvt TYPE REF TO if_wd_context_element.
      DATA ls_rcf_mail_bus_pvt TYPE wd_this->element_rcf_mail_bus_pvt.
      DATA lv_pvt_email TYPE wd_this->element_rcf_mail_bus_pvt-pvt_email.
      DATA lv_drop_down TYPE wd_this->element_rcf_mail_bus_pvt-email_drop_down.
*      DATA lv_choice TYPE i.
*      DATA lv_text TYPE string.
*
      lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
      lo_el_rcf_mail_bus_pvt = lo_nd_rcf_mail_bus_pvt->get_element( ).
      lo_el_rcf_mail_bus_pvt->get_attribute(
        EXPORTING
          name =  `PVT_EMAIL`
        IMPORTING
          value = lv_pvt_email ).
      lo_el_rcf_mail_bus_pvt->get_attribute(
        EXPORTING
          name =  `EMAIL_DROP_DOWN`
        IMPORTING
          value = lv_drop_down ).

*      CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
*        EXPORTING
*          alias      = 'PAOC_RCF_UI_SELF_SERVICES/BUSINESS_EMAIL'
*        RECEIVING
*          alias_text = lv_text.
*      IF lv_drop_down EQ '1' OR lv_drop_down EQ lv_text .
*        lv_choice = '1'.
*      ELSE.
*        lv_choice = '2'.
*      ENDIF.
*
      IF lv_drop_down NE wd_comp_controller->mv_choice OR lv_pvt_email NE wd_comp_controller->mv_pvt_email.
        wd_comp_controller->mv_email_changed = abap_true.
*        wd_comp_controller->gv_data_changed = abap_true.
      ENDIF.
*
      IF wd_comp_controller->mv_email_changed = abap_true AND lv_pvt_email IS NOT INITIAL.
        CALL METHOD cl_hrrcf_candidate_bupa_bl=>check_email_format
          EXPORTING
            p_email = lv_pvt_email
          IMPORTING
            return  = lt_messages.
        IF lt_messages IS NOT INITIAL.
          lo_api_controller ?= wd_this->wd_get_api( ).
          CALL METHOD lo_api_controller->get_message_manager
            RECEIVING
              message_manager = lo_message_manager.
          LOOP AT lt_messages INTO ls_message.
            CALL METHOD lo_message_manager->report_attribute_error_message
              EXPORTING
                message_text   = ls_message-message
                element        = lo_el_rcf_mail
                attribute_name = `PVT_EMAIL`.
          ENDLOOP.
          RETURN.
        ENDIF.
      ENDIF.
*
    ENDIF.

    wd_comp_controller->branch_popup->close( ).

  ENDIF.

ENDMETHOD.

METHOD onactionon_email_pref_change . "#EC NEEDED
ENDMETHOD.

METHOD onactionset_foa_sex .

* assign gender according to form of adress (FOA)

  DATA lo_nd_rcf_personel_data TYPE REF TO if_wd_context_node.
  DATA lo_controller           TYPE REF TO if_wd_controller.
  DATA lv_sex                  TYPE wd_this->element_rcf_personel_data-sex.
  data lv_formofaddress        type wd_this->element_rcf_personel_data-formofaddress.
  data lt_messages             type bapirettab.

  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_nd_rcf_personel_data->get_attribute(
     EXPORTING  name  = 'FORMOFADDRESS'
     IMPORTING  value = lv_formofaddress ).

* Get Gender According to formofaddress
  CALL METHOD wd_assist->get_sex_for_foa
  EXPORTING
    iv_formofaddress = lv_formofaddress
  IMPORTING
    et_message       = lt_messages
  changing
    cv_sex           = lv_sex    .

  if lt_messages is not initial.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  endif.

* Set Gender Value
  lo_nd_rcf_personel_data->set_attribute(
     EXPORTING  name  = 'SEX'
                value = lv_sex ).

ENDMETHOD.

method ONACTIONSET_LANG .
  wd_comp_controller->get_lang_txt( ).
endmethod.

method onactionurl_entered .

  data: lv_test_link_visible        type wd_this->element_rcf_ireferences-test_link_visible,
        lv_internet_ref_url_txt     type wd_this->element_rcf_ireferences-internet_ref_url_txt,
        lv_data_consistant      TYPE wdy_boolean.  "LAK2026192

  context_element->get_attribute(
    exporting
      name  = 'INTERNET_REF_URL_TXT'
    importing
      value = lv_internet_ref_url_txt ).

  condense lv_internet_ref_url_txt.

  if lv_internet_ref_url_txt is not initial                and
     lv_internet_ref_url_txt ne wd_assist->gc_default_link.
    lv_test_link_visible = cl_wd_uielement=>e_visible-visible.
  else.
    lv_test_link_visible = cl_wd_uielement=>e_visible-none.
  endif.
****************************LAK2026192**************************beg
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.

    wd_this->check_ireferences(
      IMPORTING
        ev_data_consistant = lv_data_consistant ).

    IF lv_data_consistant = abap_false.
      RETURN.
    ENDIF.
  ENDIF.
****************************LAK2026192*****************************end
  context_element->set_attribute(
    exporting
      value = lv_test_link_visible
      name  = 'TEST_LINK_VISIBLE' ).

endmethod.

endclass.
 