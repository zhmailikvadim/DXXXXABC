*=====================================================================*
* Intf.: if_v_dat_over_view  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <V_DAT_OVER_VIEW> of
*        component:   <erc_c_cand_overview_ui>
* UDate: 20241008 095515
*=====================================================================*
interface if_v_dat_over_view.
 
* +-------------------------------------------------------------------+
* |  context type definitions                                         |
* +-------------------------------------------------------------------+

  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_rcf_communication type string value `RCF_COMMUNICATION`.
  types:
    begin of Element_rcf_communication,
      CHANNEL  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL,
      CHANNEL_DESCRIPTION  type RCF_S_CAND_COMMN_ADDRESS_PL-CHANNEL_DESCRIPTION,
      STREET  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET,
      STREET2  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET2,
      COUNTRY  type RCF_S_CAND_COMMN_ADDRESS_PL-COUNTRY,
      REGION  type RCF_S_CAND_COMMN_ADDRESS_PL-REGION,
      CITY  type RCF_S_CAND_COMMN_ADDRESS_PL-CITY,
      POSTCODE  type RCF_S_CAND_COMMN_ADDRESS_PL-POSTCODE,
      COUNTRY_TXT  type RCF_VH_VALUE_PL,
      POSTCODE_REQUIRED  type WDUI_STATE,
    end of Element_rcf_communication,  "#EC NEEDED
    Elements_rcf_communication type 
       standard table of Element_rcf_communication
       with default key. "#EC NEEDED
  constants:
    wdctx_region_attributes type string value `REGION_ATTRIBUTES`.
  types:
    begin of Element_region_attributes,
      REGION_ENABLE  type WDY_BOOLEAN,
    end of Element_region_attributes,  "#EC NEEDED
    Elements_region_attributes type 
       standard table of Element_region_attributes
       with default key. "#EC NEEDED
  constants:
    wdctx_region_values type string value `REGION_VALUES`.
  types:
    begin of Element_region_values,
      REGION  type REGIO,
      REGION_TXT  type STRING,
    end of Element_region_values,  "#EC NEEDED
    Elements_region_values type 
       standard table of Element_region_values
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_comm_visible type string value `RCF_COMM_VISIBLE`.
  types:
    begin of Element_rcf_comm_visible,
      EDIT  type WDUI_VISIBILITY,
      DISPLAY  type WDUI_VISIBILITY,
    end of Element_rcf_comm_visible,  "#EC NEEDED
    Elements_rcf_comm_visible type 
       standard table of Element_rcf_comm_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_contact_no type string value `RCF_CONTACT_NO`.
  types:
    Element_rcf_contact_no type RCF_S_CAND_COMMN_TELE_PL,
    Elements_rcf_contact_no type 
       standard table of Element_rcf_contact_no
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_des_work_loc type string value `RCF_DES_WORK_LOC`.
  types:
    begin of Element_rcf_des_work_loc,
      COUNTRY  type RCF_S_CAND_LOCATION_PL-COUNTRY,
      CITY  type RCF_S_CAND_LOCATION_PL-CITY,
      COUNTRY_TXT  type RCF_S_CAND_LOCATION_PL-COUNTRY_TXT,
      OLD_COUNTRY  type LAND1,
      REGION  type REGIO,
      OPERATION  type CHAR1,
      MANDT  type MANDT,
      PLVAR  type PLVAR,
      OTYPE  type OTYPE,
      OBJID  type OBJEKTID,
      INFTY  type INFOTYP,
      SUBTY  type SUBTYP,
      ISTAT  type ISTAT_D,
      PRIOX  type PRIOX,
      BEGDA  type BEGDATUM,
      ENDDA  type ENDDATUM,
      VARYF  type VARYF,
      SEQNR  type SEQNR,
      AEDTM  type AEDTM,
      UNAME  type USRNAME,
      REASN  type REASN,
      HISTO  type HISTO,
      ITXNR  type ITXNR,
      BRANCH  type RCF_DESIRED_BRANCH,
      WORK_PERMIT  type RCF_WORK_PERMIT,
      DESCRIPTION  type RCF_DESIRED_LOC_DESC,
      BRANCH_TXT  type RCF_BRANCH_NAME,
      WORK_PERMIT_TXT  type DDTEXT,
      DESCRIPTION_TXT  type RCF_ITF_DESCRIPTION,
      DOC_LANGU  type SPRAS,
    end of Element_rcf_des_work_loc,  "#EC NEEDED
    Elements_rcf_des_work_loc type 
       standard table of Element_rcf_des_work_loc
       with default key. "#EC NEEDED
  constants:
    wdctx_cities type string value `CITIES`.
  types:
    begin of Element_cities,
      CITY_NAME  type STRING,
      CITY_KEY  type AD_CITY1,
    end of Element_cities,  "#EC NEEDED
    Elements_cities type 
       standard table of Element_cities
       with default key. "#EC NEEDED
  constants:
    wdctx_enable type string value `ENABLE`.
  types:
    begin of Element_enable,
      REGION_ENABLE  type WDY_BOOLEAN,
      CITY_ENABLE  type WDY_BOOLEAN,
    end of Element_enable,  "#EC NEEDED
    Elements_enable type 
       standard table of Element_enable
       with default key. "#EC NEEDED
  constants:
    wdctx_regions type string value `REGIONS`.
  types:
    Element_regions type RCF_S_CAND_LOCATION_PL,
    Elements_regions type 
       standard table of Element_regions
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_display_commn type string value `RCF_DISPLAY_COMMN`.
  types:
    begin of Element_rcf_display_commn,
      FORMOFADDRESS_TXT  type TEXT10,
      SEX_TXT  type TEXT10,
      TITLE_SPPL_TXT  type TEXT40,
      TITLE_TXT  type TEXT40,
      TITLE_ACA2_TXT  type TEXT40,
      PREFIX_TXT  type TEXT40,
    end of Element_rcf_display_commn,  "#EC NEEDED
    Elements_rcf_display_commn type 
       standard table of Element_rcf_display_commn
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_empl_pref type string value `RCF_EMPL_PREF`.
  constants:
    wdctx_rcf_functional_area type string value `RCF_FUNCTIONAL_AREA`.
  types:
    begin of Element_rcf_functional_area,
      FUNCTIONAL_AREA  type RCF_S_CAND_DESIRED_JOB_PL-FUNCTIONAL_AREA,
      FUNCTIONAL_AREA_TXT  type RCF_S_CAND_DESIRED_JOB_PL-FUNCTIONAL_AREA_TXT,
    end of Element_rcf_functional_area,  "#EC NEEDED
    Elements_rcf_functional_area type 
       standard table of Element_rcf_functional_area
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_hierarchy_level type string value `RCF_HIERARCHY_LEVEL`.
  types:
    begin of Element_rcf_hierarchy_level,
      HIERARCHY_LEVEL  type RCF_S_CAND_DESIRED_JOB_PL-HIERARCHY_LEVEL,
      HIERARCHY_LEVEL_TXT  type RCF_S_CAND_DESIRED_JOB_PL-HIERARCHY_LEVEL_TXT,
    end of Element_rcf_hierarchy_level,  "#EC NEEDED
    Elements_rcf_hierarchy_level type 
       standard table of Element_rcf_hierarchy_level
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_industry type string value `RCF_INDUSTRY`.
  types:
    begin of Element_rcf_industry,
      INDUSTRY  type RCF_S_CAND_DESIRED_JOB_PL-INDUSTRY,
      INDUSTRY_TXT  type RCF_S_CAND_DESIRED_JOB_PL-INDUSTRY_TXT,
    end of Element_rcf_industry,  "#EC NEEDED
    Elements_rcf_industry type 
       standard table of Element_rcf_industry
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_image type string value `RCF_IMAGE`.
  types:
    begin of Element_rcf_image,
      PHOTO  type STRING,
    end of Element_rcf_image,  "#EC NEEDED
    Elements_rcf_image type 
       standard table of Element_rcf_image
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_internal type string value `RCF_INTERNAL`.
  types:
    begin of Element_rcf_internal,
      INTERNAL_CAND  type WDUI_VISIBILITY,
      EXTERNAL_CAND  type WDUI_VISIBILITY,
    end of Element_rcf_internal,  "#EC NEEDED
    Elements_rcf_internal type 
       standard table of Element_rcf_internal
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_intrest_grp type string value `RCF_INTREST_GRP`.
  types:
    Element_rcf_intrest_grp type RCF_S_TARGET_GROUP_LIST,
    Elements_rcf_intrest_grp type 
       standard table of Element_rcf_intrest_grp
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail type string value `RCF_MAIL`.
  types:
    begin of Element_rcf_mail,
      E_MAIL  type AD_SMTPADR,
    end of Element_rcf_mail,  "#EC NEEDED
    Elements_rcf_mail type 
       standard table of Element_rcf_mail
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_bus_pvt type string value `RCF_MAIL_BUS_PVT`.
  types:
    begin of Element_rcf_mail_bus_pvt,
      BUS_EMAIL  type AD_SMTPADR,
      PVT_EMAIL  type AD_SMTPADR,
      EMAIL_DROP_DOWN  type STRING,
    end of Element_rcf_mail_bus_pvt,  "#EC NEEDED
    Elements_rcf_mail_bus_pvt type 
       standard table of Element_rcf_mail_bus_pvt
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_txt type string value `RCF_MAIL_TXT`.
  types:
    begin of Element_rcf_mail_txt,
      EMAIL_PREF_TXT  type STRING,
    end of Element_rcf_mail_txt,  "#EC NEEDED
    Elements_rcf_mail_txt type 
       standard table of Element_rcf_mail_txt
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_mail_visible type string value `RCF_MAIL_VISIBLE`.
  types:
    begin of Element_rcf_mail_visible,
      EMAIL_VISIBILITY  type WDUI_VISIBILITY,
      OLD_EMAIL_VISIBILITY  type WDUI_VISIBILITY,
    end of Element_rcf_mail_visible,  "#EC NEEDED
    Elements_rcf_mail_visible type 
       standard table of Element_rcf_mail_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_personel_data type string value `RCF_PERSONEL_DATA`.
  types:
    Element_rcf_personel_data type RCF_S_CAND_PERSONAL_DATA_PL,
    Elements_rcf_personel_data type 
       standard table of Element_rcf_personel_data
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref type string value `RCF_PREF`.
  types:
    begin of Element_rcf_pref,
      PREF_LANG  type STRING,
    end of Element_rcf_pref,  "#EC NEEDED
    Elements_rcf_pref type 
       standard table of Element_rcf_pref
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_prefernces type string value `RCF_PREFERNCES`.
  types:
    begin of Element_rcf_prefernces,
      CONTRACT_TYPE  type RCF_S_CAND_DESIRED_JOB_PL-CONTRACT_TYPE,
      TRAVELWILLING  type RCF_S_CAND_DESIRED_JOB_PL-TRAVELWILLING,
      WILL_TO_RELOCATE  type RCF_S_CAND_DESIRED_JOB_PL-WILL_TO_RELOCATE,
      CURRENCY  type RCF_S_CAND_DESIRED_JOB_PL-CURRENCY,
      CONTRACT_TXT  type RCF_S_CAND_DESIRED_JOB_PL-CONTRACT_TXT,
      EMPLOYMENT_FRACT_TXT  type RCF_S_CAND_DESIRED_JOB_PL-EMPLOYMENT_FRACT_TXT,
      EMPLOYMENT_FRACT  type RCF_S_CAND_DESIRED_JOB_PL-EMPLOYMENT_FRACT,
      WILL_TO_RELOCATE_TXT  type RCF_S_CAND_DESIRED_JOB_PL-WILL_TO_RELOCATE_TXT,
      SAL_RANGE_TXT  type RCF_S_CAND_DESIRED_JOB_PL-SAL_RANGE_TXT,
      RANGE_ID  type RCF_S_CAND_DESIRED_JOB_PL-RANGE_ID,
      CURRENCY_TXT  type TEXT40,
      DESCRIPTION_TXT  type RCF_S_CAND_DESIRED_JOB_PL-DESCRIPTION_TXT,
    end of Element_rcf_prefernces,  "#EC NEEDED
    Elements_rcf_prefernces type 
       standard table of Element_rcf_prefernces
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref_comm type string value `RCF_PREF_COMM`.
  types:
    begin of Element_rcf_pref_comm,
      STREET  type RCF_S_CAND_COMMN_ADDRESS_PL-STREET,
      POST_CODE  type RCF_S_CAND_COMMN_ADDRESS_PL-POSTCODE,
      POST_CODE_CITY  type STRING,
      COUNTRY  type RCF_VH_VALUE_PL,
      TELEPHONE  type RCF_S_CAND_COMMN_TELE_PL-TELEPHONE,
    end of Element_rcf_pref_comm,  "#EC NEEDED
    Elements_rcf_pref_comm type 
       standard table of Element_rcf_pref_comm
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref_contact type string value `RCF_PREF_CONTACT`.
  types:
    begin of Element_rcf_pref_contact,
      PRFD_CNT_ADD  type RCF_COMM_CHANNEL,
      PRFD_CNT_ADD_TXT  type RCF_COMM_CHANNEL_TXT,
      PRFD_CNT_TEL  type RCF_COMM_CHANNEL,
      PRFD_CNT_TEL_TXT  type RCF_COMM_CHANNEL_TXT,
    end of Element_rcf_pref_contact,  "#EC NEEDED
    Elements_rcf_pref_contact type 
       standard table of Element_rcf_pref_contact
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_pref_vsible type string value `RCF_PREF_VSIBLE`.
  types:
    begin of Element_rcf_pref_vsible,
      EDIT  type WDUI_VISIBILITY,
      DISPLAY  type WDUI_VISIBILITY,
    end of Element_rcf_pref_vsible,  "#EC NEEDED
    Elements_rcf_pref_vsible type 
       standard table of Element_rcf_pref_vsible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_profile_summary type string value `RCF_PROFILE_SUMMARY`.
  types:
    begin of Element_rcf_profile_summary,
      TYPE  type STRING,
      PERSONEL_NUMBER  type STRING,
      LAST_LOG_DATE  type DATUM,
      LAST_PROF_UPADTE  type DATUM,
      TRM_RANK  type STRING,
      ASSIGN_RANK  type STRING,
      QUESTIONARIES  type STRING,
      TALENT_GRPS  type STRING,
      LAST_PROF_UPADTE_BY  type BU_NAME1TX,
    end of Element_rcf_profile_summary,  "#EC NEEDED
    Elements_rcf_profile_summary type 
       standard table of Element_rcf_profile_summary
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_questionnaiers type string value `RCF_QUESTIONNAIERS`.
  types:
    begin of Element_rcf_questionnaiers,
      QUESTIONNAIRE  type STRING,
      TOOLTIP  type TEXT,
      QSTNR_FEEDBACK  type STRING,
      FEEDBACK_TOOLTIP  type STRING,
    end of Element_rcf_questionnaiers,  "#EC NEEDED
    Elements_rcf_questionnaiers type 
       standard table of Element_rcf_questionnaiers
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_requi_visible type string value `RCF_REQUI_VISIBLE`.
  types:
    begin of Element_rcf_requi_visible,
      VISIBLE  type WDUI_VISIBILITY,
    end of Element_rcf_requi_visible,  "#EC NEEDED
    Elements_rcf_requi_visible type 
       standard table of Element_rcf_requi_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_resume type string value `RCF_RESUME`.
  types:
    Element_rcf_resume type RCF_S_CAND_ATTACHMENT_PL,
    Elements_rcf_resume type 
       standard table of Element_rcf_resume
       with default key. "#EC NEEDED
  constants:
    wdctx_rcf_resume_visible type string value `RCF_RESUME_VISIBLE`.
  types:
    begin of Element_rcf_resume_visible,
      VISIBLE  type WDUI_VISIBILITY,
    end of Element_rcf_resume_visible,  "#EC NEEDED
    Elements_rcf_resume_visible type 
       standard table of Element_rcf_resume_visible
       with default key. "#EC NEEDED
  constants:
    wdctx_shared_context type string value `SHARED_CONTEXT`.
  types:
    begin of Element_shared_context,
      HROBJECT  type HROBJECT,
      TEMPLATE_HROBJECT  type HROBJECT,
      ACT_GUID  type RCF_ACT_GUID,
      SUBTYPE  type SUBTYP,
      APPLICATION  type CHAR10,
      OPERATION  type RCF_OPERATION_PL,
      IS_DIRTY  type WDY_BOOLEAN,
      SEQUENCE_NR  type INT4,
      REQUI_SUPP_TEAM  type RCF_T_SUPP_TEAM_PL,
      DATA_CHANGED  type WDY_BOOLEAN,
      DISPLAY_MODE  type WDY_BOOLEAN,
      USE_HR_QUALIFICATIONS  type WDY_BOOLEAN,
      SAVE_CREATE_NEXT  type WDY_BOOLEAN,
      NO_OF_UIBB  type INT4,
      IS_APPL_MGMT  type WDY_BOOLEAN,
      EDIT_ALLOWED  type WDY_BOOLEAN,
      IS_INTERNAL_APPLICATION  type WDY_BOOLEAN,
      IS_QUALI_USER_SELECTED  type WDY_BOOLEAN,
      IS_LOCKED  type WDY_BOOLEAN,
      IS_RSM_PARSING  type WDY_BOOLEAN,
      IS_QUAL_FIRST_TIME  type WDY_BOOLEAN,
      SCENARIO  type STRING,
    end of Element_shared_context,  "#EC NEEDED
    Elements_shared_context type 
       standard table of Element_shared_context
       with default key. "#EC NEEDED
  constants:
    wdctx_visibility type string value `VISIBILITY`.
  types:
    begin of Element_visibility,
      ASSIGNMENT_RANK  type WDUI_VISIBILITY,
      HEADER_QUAL  type STRING,
    end of Element_visibility,  "#EC NEEDED
    Elements_visibility type 
       standard table of Element_visibility
       with default key. "#EC NEEDED
  methods COMMUNICATION  ."#EC NEEDED
  methods INIT_PRIVATE_EMAIL_ENH  ."#EC NEEDED
  methods PREFERENCES  ."#EC NEEDED
  methods PROFILE_SUMMARY  ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_VIEW_CONTROLLER. "#EC NEEDED
 
 
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  action getters                                                   |
* +-------------------------------------------------------------------+

  methods Get_link_assignment_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_comm_data_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_cv_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_edit_commu_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_feedback_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_prefer_add_dat_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_prefer_edit_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_questionaries_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_resume_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_talentgroups_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_link_trm_rank_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  controller <componentcontroller>
*            of usage   <49ky1md1mhueh9ljhyje5ingk>
**********
  methods  get_componentcontroller_ctr
    returning
      value(Result) type ref to ig_componentcontroller. "#EC NEEDED
**********
* @Returns:  <interface> controller of component <componentinterface>
*            of usage <candidate_pop_ui>
**********
  methods  wd_cpifc_candidate_pop_ui
    returning
      value(Result) type ref to iwci_erc_c_candidate_pop_ui.      "#EC NEEDED
**********
* @Returns:  component <COMPONENTINTERFACE>
*            of usage  <candidate_pop_ui>
**********
  methods  wd_cpuse_candidate_pop_ui
    returning
      value(Result) type ref to If_Wd_Component_Usage.  "#EC NEEDED
**********
* @Returns:  <interface> controller of component <componentinterface>
*            of usage <activity_mgmt_ui>
**********
  methods  wd_cpifc_activity_mgmt_ui
    returning
      value(Result) type ref to iwci_erc_c_activity_mgmt_ui.      "#EC NEEDED
**********
* @Returns:  component <COMPONENTINTERFACE>
*            of usage  <activity_mgmt_ui>
**********
  methods  wd_cpuse_activity_mgmt_ui
    returning
      value(Result) type ref to If_Wd_Component_Usage.  "#EC NEEDED
**********
* @Returns:  <interface> controller of component <componentinterface>
*            of usage <quesnnr_pop_ui>
**********
  methods  wd_cpifc_quesnnr_pop_ui
    returning
      value(Result) type ref to iwci_erc_c_quesnnr_pop_ui.      "#EC NEEDED
**********
* @Returns:  component <COMPONENTINTERFACE>
*            of usage  <quesnnr_pop_ui>
**********
  methods  wd_cpuse_quesnnr_pop_ui
    returning
      value(Result) type ref to If_Wd_Component_Usage.  "#EC NEEDED
**********
* @Returns:  <interface> controller of component <componentinterface>
*            of usage <shared_context_u>
**********
  methods  wd_cpifc_shared_context_u
    returning
      value(Result) type ref to iwci_erc_c_shared_context_sd.      "#EC NEEDED
**********
* @Returns:  component <COMPONENTINTERFACE>
*            of usage  <shared_context_u>
**********
  methods  wd_cpuse_shared_context_u
    returning
      value(Result) type ref to If_Wd_Component_Usage.  "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONLINK_ASSIGNMENT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_COMM_DATA
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_CV
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_EDIT_COMMU
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_FEEDBACK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_PREFER_ADD_DAT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_PREFER_EDIT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_QUESTIONARIES
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_RESUME
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_TALENTGROUPS
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_TRM_RANK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods UPDATE_PROFILE_SUMMARY
    importing
      IV_SOURCE  type String optional
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Cand_Overview_Ui.
endinterface.
*=====================================================================*
* Class: CL_V_DAT_OVER_VIEW_Ctr
* Purp.: definitions for application defined methods of controller
*        V_DAT_OVER_VIEW (VIEW)
* UDate: 20241008 095515
*=====================================================================*
class CL_V_DAT_OVER_VIEW_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_V_DAT_OVER_VIEW
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_cand_overview_ui.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAFTERACTION  ."#EC NEEDED
  methods WDDOBEFOREACTION  ."#EC NEEDED
  methods WDDOEXIT  ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOMODIFYVIEW
    importing
      FIRST_TIME  type Wdy_Boolean 
      VIEW  type ref to If_Wd_View   ."#EC NEEDED
  methods WDDOONCONTEXTMENU
    importing
      CONTEXT_MENU_EVENT  type ref to If_Wd_Context_Menu_Event 
      CONTEXT_MENU_MANAGER  type ref to If_Wd_Context_Menu_Manager 
    returning
      value(MENU)  type ref to Cl_Wd_Menu  ."#EC NEEDED
  methods COMMUNICATION  ."#EC NEEDED
  methods INIT_PRIVATE_EMAIL_ENH  ."#EC NEEDED
  methods PREFERENCES  ."#EC NEEDED
  methods PROFILE_SUMMARY  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONLINK_ASSIGNMENT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_COMM_DATA
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_CV
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_EDIT_COMMU
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_FEEDBACK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_PREFER_ADD_DAT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_PREFER_EDIT
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_QUESTIONARIES
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_RESUME
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_TALENTGROUPS
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods ONACTIONLINK_TRM_RANK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
  methods UPDATE_PROFILE_SUMMARY
    importing
      IV_SOURCE  type String optional
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_V_DAT_OVER_VIEW,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node,     "#EC NEEDED
    wd_Comp_Controller  type ref to Ig_ComponentController. "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_cand_overview_ui. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_V_DAT_OVER_VIEW_Ctr 
* Purp.: explicit definitions derived from application coding
*        <V_DAT_OVER_VIEW> (VIEW)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20241008 095515
*=====================================================================*
class CL_V_DAT_OVER_VIEW_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Comp_Controller = Wd_This->get_ComponentController_Ctr( ).
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAFTERACTION . "#EC NEEDED
endmethod.

method WDDOBEFOREACTION . "#EC NEEDED

ENDMETHOD.

method WDDOEXIT . "#EC NEEDED
endmethod.

METHOD wddoinit .

  DATA lo_nd_shared_context    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_requi_visible TYPE REF TO if_wd_context_node.
  DATA lv_hrobject             TYPE wd_this->element_shared_context-hrobject.
  DATA lv_template_hrobject    TYPE wd_this->element_shared_context-template_hrobject.

  lo_nd_rcf_requi_visible = wd_context->get_child_node( name = wd_this->wdctx_rcf_requi_visible ).
  lo_nd_shared_context   = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).

* get the candidate's HROBJECT from the shared context
  lo_nd_shared_context->get_attribute(
    EXPORTING
      name =  `HROBJECT`
    IMPORTING
      value = lv_hrobject ).

* get the requisition HROBJECT from the shared context.
* the requisition HROBJECT will only be available in requisition context mode, not in search context mode .
  lo_nd_shared_context->get_attribute(
    EXPORTING
      name =  `TEMPLATE_HROBJECT`
    IMPORTING
      value = lv_template_hrobject ).

* Keep candidate's HROBJECT and requisition HROBJECT in component controller .
  wd_comp_controller->gs_hrobject = lv_hrobject.
  wd_comp_controller->gs_req_hrobject = lv_template_hrobject.
  IF wd_comp_controller->gs_req_hrobject-objid IS NOT INITIAL.
    CALL METHOD lo_nd_rcf_requi_visible->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible
        name  = 'VISIBLE'.
  ENDIF.

*Get the candidates communication, preferences, and profile summary data
  wd_this->communication(  ).
  wd_this->preferences(  ).
  wd_this->profile_summary(  ).

* read the candidate's internet preferences
  IF cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) EQ abap_true.
    wd_comp_controller->read_cand_internet_references( ).
  ENDIF.

***********"code for Customer Connect - enable alternate E Mail address
wd_this->init_private_email_enh( ).

ENDMETHOD.

METHOD wddomodifyview.

  DATA lo_nd_rcf_profile_summary TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_communication   TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_pref_contact    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_contact_no      TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_pref_comm       TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_resume          TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_resume_visible  TYPE REF TO if_wd_context_node.
  DATA lo_controller             TYPE REF TO if_wd_controller.
  DATA lo_ex                     TYPE REF TO cx_hrrcf_customizing.
  DATA lt_messages               TYPE bapirettab.
  DATA lt_rcf_communication      TYPE wd_this->elements_rcf_communication.
  DATA ls_rcf_communication      TYPE        wd_this->element_rcf_communication.
  DATA lt_rcf_contact_no         TYPE wd_this->elements_rcf_contact_no.
  DATA ls_rcf_contact_no         TYPE wd_this->element_rcf_contact_no.
  DATA lt_tg_list                TYPE rcf_t_tg_assignment_pl.
  DATA ls_tg_list                TYPE rcf_s_tg_assignment_pl.
  DATA ls_rcf_pref_contact       TYPE        wd_this->element_rcf_pref_contact.
  DATA ls_rcf_profile_summary    TYPE        wd_this->element_rcf_profile_summary.
  DATA ls_rcf_pref_comm          TYPE wd_this->element_rcf_pref_comm.
  DATA ls_attachment             TYPE rcf_s_cand_attachment_pl.
  DATA lv_trm_rank               TYPE        stext.
  DATA lv_assign_rank            TYPE        stext.
  DATA lv_attachment_type        TYPE rcf_attachment_type.
  DATA lv_text                   TYPE string.
  DATA tg_count                  TYPE i.
  DATA lo_nd_rcf_mail_bus_pvt    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail_txt        TYPE REF TO if_wd_context_node.
  DATA lo_prlng_lbl              TYPE REF TO cl_wd_label.
  DATA lo_prlng_txt              TYPE REF TO cl_wd_text_view.

  lo_nd_rcf_profile_summary = wd_context->get_child_node( name = wd_this->wdctx_rcf_profile_summary ).

  IF wd_comp_controller->gv_start_time IS INITIAL.
    wd_comp_controller->gv_start_time = 'X'.

*   read attachments
    lo_nd_rcf_resume_visible = wd_context->get_child_node( name = wd_this->wdctx_rcf_resume_visible ).
    lo_nd_rcf_resume = wd_context->get_child_node( name = wd_this->wdctx_rcf_resume ).

    REFRESH wd_comp_controller->gt_attachments.
    CALL METHOD wd_assist->read_cand_attachments
      EXPORTING
        is_cand_hrobject = wd_comp_controller->gs_hrobject
      IMPORTING
        et_attachments   = wd_comp_controller->gt_attachments
        et_messages      = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    TRY.
*       read attachment type for 'Resume'.
        CLEAR lv_attachment_type.
        lv_attachment_type = cl_hrrcf_t77rcf_atttype=>read_resume_atttype( ).

*       display resume link if the resume is available.
        READ TABLE wd_comp_controller->gt_attachments INTO ls_attachment WITH KEY att_type = lv_attachment_type.
        IF sy-subrc = 0.
          CALL METHOD lo_nd_rcf_resume->set_attribute
            EXPORTING
              value = ls_attachment-attachment
              name  = 'ATT_HEADER'.
          CALL METHOD lo_nd_rcf_resume_visible->set_attribute
            EXPORTING
              value = 02
              name  = 'VISIBLE'.
        ELSE.
          CALL METHOD lo_nd_rcf_resume_visible->set_attribute
            EXPORTING
              value = 01
              name  = 'VISIBLE'.
        ENDIF.

      CATCH cx_hrrcf_customizing INTO lo_ex.
        cl_hrrcf_exception_handler=>write_exception_log( ex = lo_ex ).
    ENDTRY.

    TRY.
*       read attachment type for 'Formatted Resume'.
        CLEAR lv_attachment_type.
        lv_attachment_type = cl_hrrcf_t77rcf_atttype=>read_fmtd_rsm_atttype( ).

*       check if formatted resume is available for the candidate
        READ TABLE wd_comp_controller->gt_attachments
          INTO ls_attachment WITH KEY att_type = lv_attachment_type.
        IF sy-subrc = 0.
          CALL METHOD lo_nd_rcf_resume_visible->set_attribute
            EXPORTING
              value = 02
              name  = 'VISIBLE'.
        ENDIF.

      CATCH cx_hrrcf_customizing INTO lo_ex.            "#EC NO_HANDLER
*     Do nothing
*     Formatted Resume attachment type 'F' is not a required customizing entry
    ENDTRY.
  ENDIF.

* Check for ranking change
  IF wd_comp_controller->gv_ranking_changed EQ 'X'.
    lo_nd_rcf_profile_summary->get_static_attributes(
      IMPORTING
        static_attributes = ls_rcf_profile_summary ).

*   get candidate ranking
    CALL METHOD wd_assist->get_candidate_ranking
      EXPORTING
        is_cand_hrobject      = wd_comp_controller->gs_hrobject
        is_requi_hrobject     = wd_comp_controller->gs_req_hrobject
        is_cdcy_hrobject      = wd_comp_controller->gs_cdcy_hrobject                  "MOD_N1689300
      IMPORTING
        ev_trm_ranking        = lv_trm_rank
        ev_assignment_ranking = lv_assign_rank
        et_message            = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

*   Handle TRM or assignment rank
    IF lv_trm_rank IS NOT INITIAL.
      ls_rcf_profile_summary-trm_rank = lv_trm_rank.
    ELSE.
      lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
      ls_rcf_profile_summary-trm_rank = lv_text.
    ENDIF.

    IF lv_assign_rank IS NOT INITIAL.
      ls_rcf_profile_summary-assign_rank = lv_assign_rank.
    ELSE.
      lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
      ls_rcf_profile_summary-assign_rank = lv_text.
    ENDIF.

*   Handle talent group lists
    CALL METHOD wd_assist->get_tg_list
      EXPORTING
        is_tg_hrobject = wd_comp_controller->gs_hrobject
      IMPORTING
        et_tg_list     = lt_tg_list
        et_message     = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.

    DESCRIBE TABLE lt_tg_list LINES tg_count.
    IF tg_count NE 0 AND tg_count NE 1.
      ls_rcf_profile_summary-talent_grps = tg_count.
    ENDIF.

    IF tg_count EQ 0.
      lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
      ls_rcf_profile_summary-talent_grps =  lv_text .
    ENDIF.

    IF tg_count EQ 1.
      READ TABLE lt_tg_list INTO ls_tg_list INDEX 1.
      ls_rcf_profile_summary-talent_grps =  ls_tg_list-tg_title_txt .
    ENDIF.

    CALL METHOD lo_nd_rcf_profile_summary->set_static_attributes( static_attributes = ls_rcf_profile_summary ).
  ENDIF.

* handle communication data
  lo_nd_rcf_communication = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_nd_rcf_communication->get_static_attributes_table(
    IMPORTING
      table = lt_rcf_communication ).

* handle preferred contact data
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_nd_rcf_pref_contact->get_static_attributes(
    IMPORTING
      static_attributes = ls_rcf_pref_contact ).
  READ TABLE lt_rcf_communication INTO ls_rcf_communication WITH KEY channel = ls_rcf_pref_contact-prfd_cnt_add.

  lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).
  lo_nd_rcf_contact_no->get_static_attributes_table(
    IMPORTING
      table = lt_rcf_contact_no ).
  READ TABLE lt_rcf_contact_no INTO ls_rcf_contact_no WITH KEY channel = ls_rcf_pref_contact-prfd_cnt_tel.

* handle preferred communication
  lo_nd_rcf_pref_comm = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_comm ).

  ls_rcf_pref_comm-street         = ls_rcf_communication-street.
  ls_rcf_pref_comm-country = ls_rcf_communication-country_txt.
  ls_rcf_pref_comm-post_code = ls_rcf_communication-postcode.
  ls_rcf_pref_comm-post_code_city = ls_rcf_communication-city.
  ls_rcf_pref_comm-telephone = ls_rcf_contact_no-telephone.

  CONCATENATE ls_rcf_pref_comm-post_code ls_rcf_pref_comm-post_code_city
    INTO ls_rcf_pref_comm-post_code_city SEPARATED BY space.

  CALL METHOD lo_nd_rcf_pref_comm->set_static_attributes( static_attributes = ls_rcf_pref_comm ).

* get candidate profile summary data
  IF wd_comp_controller->gv_save_ok = abap_true.
    wd_this->profile_summary(  ).
  ENDIF.

  IF wd_comp_controller->mv_email_changed = abap_true.
    lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
    CALL METHOD lo_nd_rcf_mail_bus_pvt->get_attribute
      EXPORTING
        name  = 'EMAIL_DROP_DOWN'
      IMPORTING
        value = wd_comp_controller->mv_choice.

    lo_nd_rcf_mail_txt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_txt ).
    IF wd_comp_controller->mv_choice = cl_hrrcf_wd_ui_constants=>gc_bus_email_choice.
      lo_nd_rcf_mail_txt->set_attribute(
            name =  'EMAIL_PREF_TXT'
            value = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/BUSINESS_EMAIL' ) ).
    ELSE.
      lo_nd_rcf_mail_txt->set_attribute(
            name =  'EMAIL_PREF_TXT'
            value = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/PERSONAL_EMAIL' ) ).
    ENDIF.

  ENDIF.

  IF first_time EQ 'X'.
   IF ( wd_assist->read_switch_prlng( ) EQ ' ' ).
    lo_prlng_lbl ?= view->get_element( id = 'LBL_PREF_LANG' ).
    lo_prlng_lbl->set_visible( '01' ).
    lo_prlng_txt ?= view->get_element( id = 'PREF_LANG' ).
    lo_prlng_txt->set_visible( '01' ).
   ENDIF.
  ENDIF.

ENDMETHOD.

method WDDOONCONTEXTMENU . "#EC NEEDED
endmethod.

METHOD communication .

  DATA lo_ex_rfc                 TYPE REF TO cx_hrrcf_rfc_communication.                "N_2455732
  DATA lo_message_manager        TYPE REF TO if_wd_message_manager.                     "N_2455732
  DATA lo_nd_visibility          TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_communication   TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_image           TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_personel_data   TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_resume          TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_resume_visible  TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_internal        TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_contact_no      TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail            TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_pref_contact    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_display_commn   TYPE REF TO if_wd_context_node.
  DATA lo_node_info              TYPE REF TO if_wd_context_node_info.
  DATA lo_controller             TYPE REF TO if_wd_controller.
  DATA lt_messages               TYPE        bapirettab.
  DATA ls_message                TYPE        bapiret2.
  DATA lt_phone_data             TYPE        rcf_t_cand_commn_tele_pl.
  DATA lt_address_data           TYPE        rcf_t_cand_commn_address_pl.
  DATA lt_address_data_new       TYPE        wd_this->elements_rcf_communication.
  DATA lt_table                  TYPE        rcf_t_vh_pl.
  DATA lt_value_set              TYPE        tihttpnvp.
  DATA ls_phone_data             TYPE        rcf_s_cand_commn_tele_pl.
  DATA ls_address_data           TYPE        rcf_s_cand_commn_address_pl.
  DATA ls_address_data_new       TYPE        wd_this->element_rcf_communication.
  DATA ls_table                  TYPE        rcf_s_vh_pl.
  DATA ls_value_set              TYPE        ihttpnvp.
  DATA ls_personel_data          TYPE        wd_this->element_rcf_personel_data.
  DATA ls_rcf_pref_cnt           TYPE        wd_this->element_rcf_pref_contact.
  DATA ls_display                TYPE        wd_this->element_rcf_display_commn.
  DATA ls_attachment             TYPE        rcf_s_cand_attachment_pl.
  DATA lv_image                  TYPE        toauri-uri.
  DATA lv_pref_phone             TYPE        rcf_comm_channel.
  DATA lv_pref_address           TYPE        rcf_comm_channel.
  DATA lv_email                  TYPE        ad_smtpadr.
  DATA lv_hrdata                 TYPE        wdy_boolean.
  DATA lt_candidates             TYPE        rcf_t_hrobject.
  DATA lt_excl_cand              TYPE        rcf_t_hrobject.
  DATA ls_excl_cand              TYPE        hrobject.

  lo_nd_rcf_communication  = wd_context->get_child_node( name = wd_this->wdctx_rcf_communication ).
  lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
  lo_nd_rcf_personel_data = wd_context->get_child_node( name = wd_this->wdctx_rcf_personel_data ).
  lo_nd_rcf_pref_contact = wd_context->get_child_node( name = wd_this->wdctx_rcf_pref_contact ).
  lo_nd_rcf_display_commn = wd_context->get_child_node( name = wd_this->wdctx_rcf_display_commn ).
  lo_nd_visibility = wd_context->get_child_node( name = wd_this->wdctx_visibility ).
  lo_nd_rcf_image = wd_context->get_child_node( name = wd_this->wdctx_rcf_image ).
  lo_nd_rcf_resume = wd_context->get_child_node( name = wd_this->wdctx_rcf_resume ).
  lo_nd_rcf_resume_visible = wd_context->get_child_node( name = wd_this->wdctx_rcf_resume_visible ).
  lo_nd_rcf_internal = wd_context->get_child_node( name = wd_this->wdctx_rcf_internal ).
  lo_nd_rcf_contact_no = wd_context->get_child_node( name = wd_this->wdctx_rcf_contact_no ).

  IF wd_comp_controller->gs_req_hrobject-objid IS INITIAL.
    lo_nd_visibility->set_attribute(
      EXPORTING
        name =  `ASSIGNMENT_RANK`
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none ).
  ENDIF.

  APPEND wd_comp_controller->gs_hrobject TO lt_candidates.

  CALL METHOD wd_assist->is_blocked
    EXPORTING
      pt_candidates = lt_candidates
    IMPORTING
      pt_excl_candidates = lt_excl_cand.

  READ TABLE lt_excl_cand INDEX 1 INTO ls_excl_cand.
  IF ( sy-subrc EQ 0 ) AND
     ( wd_comp_controller->gs_hrobject-objid EQ ls_excl_cand-objid ).

    AUTHORITY-CHECK OBJECT 'B_BUP_PCPT'
             ID 'ACTVT' FIELD '03'.
    IF sy-subrc <> 0.
*   Implement a suitable exception handling here
     ls_message-type = 'E'.
     ls_message-id   = 'HRRCF0001'.
     ls_message-number = '846'.
     APPEND ls_message TO lt_messages.
    ENDIF.

  ENDIF.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

* check if the candidate is internal or external
  CALL METHOD wd_assist->is_internal_cand
    EXPORTING
      is_cand_hrobject = wd_comp_controller->gs_hrobject
    IMPORTING
      ev_is_internal   = wd_comp_controller->gv_internal
      et_messages      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

* read image only for internal candidates
  IF wd_comp_controller->gv_internal EQ abap_true.
    TRY.                                                      "N_2455732
    CALL METHOD wd_assist->read_image
      EXPORTING
        is_cand_hrobject = wd_comp_controller->gs_hrobject
      IMPORTING
        ev_uri           = lv_image
        et_messages      = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    CALL METHOD lo_nd_rcf_image->set_attribute
      EXPORTING
        value = lv_image
        name  = `PHOTO`.
    CATCH cx_hrrcf_rfc_communication INTO lo_ex_rfc.              "Start N_2455732

      cl_hrrcf_exception_handler=>write_exception_log(
        exporting
          ex = lo_ex_rfc ).
      lo_controller ?= wd_this->wd_get_api( ).
      lo_message_manager = lo_controller->get_message_manager( ).
      lo_message_manager->report_t100_message(
        exporting
          msgid = 'HRRCF0002'
          msgno = '800'
          msgty = 'E' ).

    ENDTRY.                                                       "End N_2455732
  ENDIF.

* read attachments
  CALL METHOD wd_assist->read_cand_attachments
    EXPORTING
      is_cand_hrobject = wd_comp_controller->gs_hrobject
    IMPORTING
      et_attachments   = wd_comp_controller->gt_attachments
      et_messages      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* display resume link if the resume is available.
  READ TABLE wd_comp_controller->gt_attachments INTO ls_attachment WITH KEY att_type = 0012.  "#EC *
  IF sy-subrc = 0.
    CALL METHOD lo_nd_rcf_resume->set_attribute
      EXPORTING
        value = ls_attachment-att_type_txt
        name  = 'ATT_TYPE_TXT'.
    CALL METHOD lo_nd_rcf_resume_visible->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible
        name  = 'VISIBLE'.
  ENDIF.

* switch UI properties for internal and external candididates.
  IF wd_comp_controller->gv_internal IS NOT INITIAL.          "internal candidate
    CALL METHOD lo_nd_rcf_internal->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none
        name  = 'EXTERNAL_CAND'.
    CALL METHOD lo_nd_rcf_internal->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible
        name  = 'INTERNAL_CAND'.
*   Check for Switch HRDAT: (Check if user data comes from HR System)
*   If the data comes from the HR system, it should not be allowed to edit the communication information
    CALL METHOD wd_assist->check_switch_hrdata
      IMPORTING
        ev_hrdata = lv_hrdata.

    IF lv_hrdata EQ abap_true. " Data comes from HR System:
      wd_comp_controller->gv_candidate = 'X'.
    ENDIF.

  ELSE.           " external candidate
    CALL METHOD lo_nd_rcf_internal->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible
        name  = 'EXTERNAL_CAND'.
    CALL METHOD lo_nd_rcf_internal->set_attribute
      EXPORTING
        value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none
        name  = 'INTERNAL_CAND'.
    wd_comp_controller->gv_candidate = ' '.
  ENDIF.

* read communication data for internal or external candidate
  CALL METHOD wd_assist->read_cand_communication_info
    EXPORTING
      is_cand_hrobject     = wd_comp_controller->gs_hrobject
    IMPORTING
      et_phone_data        = lt_phone_data
      et_address_data      = lt_address_data
      ev_preferred_phone   = lv_pref_phone
      ev_preferred_address = lv_pref_address
      ev_email             = lv_email
      et_messages          = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

* read the candidate's personnel data
  CALL METHOD wd_assist->read_cand_personal_data
    EXPORTING
      is_cand_hrobject = wd_comp_controller->gs_hrobject
    IMPORTING
      es_personal_data = ls_personel_data
      et_messages      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

******************************************************************************
*For communication pop-up in display mode
******************************************************************************

  LOOP AT lt_address_data INTO ls_address_data.
    CLEAR ls_address_data_new.
    MOVE-CORRESPONDING ls_address_data TO ls_address_data_new. "#EC ENHOK

*   get list of all countries and fill country text
    IF ls_address_data_new-country NE ' '.
      CALL METHOD wd_assist->get_country_list
        IMPORTING
          et_country = lt_table
          et_message = lt_messages.

      IF lt_messages IS NOT INITIAL.
        lo_controller ?= wd_this->wd_get_api( ).
        cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                          io_controller = lo_controller ).
      ENDIF.
      READ TABLE lt_table INTO ls_table WITH KEY key = ls_address_data_new-country.
      ls_address_data_new-country_txt = ls_table-value.
    ENDIF.
    CLEAR lt_messages.

    APPEND ls_address_data_new TO lt_address_data_new.
  ENDLOOP.
  lo_nd_rcf_communication->bind_table( lt_address_data_new ).

* read communication data (address, phone, form of address, academic title etc.)
  CLEAR ls_address_data.
  READ TABLE lt_address_data INTO ls_address_data WITH KEY channel = lv_pref_address.
  ls_rcf_pref_cnt-prfd_cnt_add   = ls_address_data-channel.
  ls_rcf_pref_cnt-prfd_cnt_add_txt = ls_address_data-channel_description.

  CLEAR ls_phone_data.
  READ TABLE lt_phone_data INTO ls_phone_data WITH KEY channel = lv_pref_phone.
  ls_rcf_pref_cnt-prfd_cnt_tel = ls_phone_data-channel.
  ls_rcf_pref_cnt-prfd_cnt_tel_txt = ls_phone_data-channel_description.

  IF ls_personel_data-formofaddress IS NOT INITIAL.
    CLEAR: lt_table, ls_table.
    CALL METHOD wd_assist->get_title_list
      IMPORTING
        et_title   = lt_table
        et_message = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-formofaddress.
    ls_display-formofaddress_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name  = 'FORMOFADDRESS_TXT'
                                               value =  ls_display-formofaddress_txt  ).
  ENDIF.

  IF ls_personel_data-title IS NOT INITIAL.
    CLEAR: lt_table, ls_table.
    CALL METHOD wd_assist->get_acadamic_title_list
      IMPORTING
        et_acadamic_title = lt_table
        et_message        = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    READ TABLE lt_table INTO ls_table WITH KEY key = ls_personel_data-title.
    ls_display-title_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name  = 'TITLE_TXT'
                                               value =  ls_display-title_txt ).
  ENDIF.

  IF ls_personel_data-sex IS NOT INITIAL.
    CLEAR : lt_table , ls_table.
    CALL METHOD wd_assist->get_gender_list
      IMPORTING
        et_gender  = lt_table
        et_message = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-sex.
    ls_display-sex_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name = 'SEX_TXT'
                                               value =  ls_display-sex_txt  ).
  ENDIF.

  IF ls_personel_data-title_sppl IS NOT INITIAL.
    CLEAR: lt_table, ls_table.
    CALL METHOD wd_assist->get_other_title_list
      IMPORTING
        et_other_title = lt_table
        et_message     = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-title_sppl.
    ls_display-title_sppl_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name  = 'TITLE_SPPL_TXT'
                                               value =  ls_display-title_sppl_txt  ).
  ENDIF.

  IF ls_personel_data-title_aca2 IS NOT INITIAL.
    CLEAR: lt_table, ls_table.
    CALL METHOD wd_assist->get_acadamic_title_list
      IMPORTING
        et_acadamic_title = lt_table
        et_message        = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.
    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-title_aca2.
    ls_display-title_aca2_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name  = 'TITLE_ACA2_TXT'
                                               value =  ls_display-title_aca2_txt  ).
  ENDIF.

  IF ls_personel_data-prefix1 IS NOT INITIAL.
    CLEAR : lt_table , ls_table.
    CALL METHOD wd_assist->get_prefix_list
      IMPORTING
        et_prefix  = lt_table
        et_message = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_personel_data-prefix1.
    ls_display-prefix_txt = ls_table-value.
    lo_nd_rcf_display_commn->set_attribute( EXPORTING name  = 'PREFIX_TXT'
                                                      value =  ls_display-prefix_txt ).
  ENDIF.

******************************************************************************
*For communication pop-up in edit mode
******************************************************************************

  lo_node_info = lo_nd_rcf_pref_contact->get_node_info( ).

  SORT lt_address_data BY channel.
  REFRESH lt_value_set.
  ls_value_set-name  = '00'.
  ls_value_set-value = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
  APPEND ls_value_set TO lt_value_set.
  LOOP AT  lt_address_data INTO ls_address_data.
    ls_value_set-name  = ls_address_data-channel.
    ls_value_set-value = ls_address_data-channel_description.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  SORT lt_value_set BY value.

  wd_comp_controller->gt_pref_cnt_add = lt_value_set.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'PRFD_CNT_ADD'
      value_set = lt_value_set.

  IF ls_rcf_pref_cnt-prfd_cnt_add IS INITIAL.
    CLEAR ls_value_set.
    READ TABLE lt_value_set INTO ls_value_set INDEX 1.
    ls_rcf_pref_cnt-prfd_cnt_add = ls_value_set-name.
  ENDIF.

  CLEAR : lt_value_set , ls_value_set.

  SORT lt_phone_data BY channel.
  ls_value_set-name  = '00'.
  ls_value_set-value = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/SELECT' ).
  APPEND ls_value_set TO lt_value_set.
  LOOP AT  lt_phone_data INTO ls_phone_data.
    ls_value_set-name  = ls_phone_data-channel.
    ls_value_set-value = ls_phone_data-channel_description.
    APPEND ls_value_set TO lt_value_set.
  ENDLOOP.

  SORT lt_value_set BY value.

  wd_comp_controller->gt_pref_num = lt_value_set.

  CALL METHOD lo_node_info->set_attribute_value_set
    EXPORTING
      name      = 'PRFD_CNT_TEL'
      value_set = lt_value_set.

  lo_node_info = lo_nd_rcf_communication->get_node_info( ).

  IF ls_rcf_pref_cnt-prfd_cnt_tel IS INITIAL.
    CLEAR ls_value_set.
    READ TABLE lt_value_set INTO ls_value_set INDEX 1.
    ls_rcf_pref_cnt-prfd_cnt_tel = ls_value_set-name.
  ENDIF.
  lo_nd_rcf_contact_no->bind_table( lt_phone_data  ).
  lo_nd_rcf_pref_contact->bind_structure( ls_rcf_pref_cnt ).
  lo_nd_rcf_personel_data->bind_structure( ls_personel_data ).
  IF ( wd_assist->read_switch_prlng( ) EQ 'X' ).
     wd_comp_controller->get_lang_txt( ).
     wd_comp_controller->load_dropdown_list( ).
  ENDIF.
  lo_nd_rcf_mail->set_attribute(
      EXPORTING
        name =  'E_MAIL'
        value = lv_email ).

ENDMETHOD.

METHOD init_private_email_enh.

  DATA lv_gsval                TYPE gsval.
  DATA lo_nd_rcf_mail          TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail          TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_mail_visible  TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail_visible  TYPE REF TO if_wd_context_element.
  DATA lo_nd_rcf_mail_bus_pvt  TYPE REF TO if_wd_context_node.
  DATA lo_el_rcf_mail_bus_pvt  TYPE REF TO if_wd_context_element.
  DATA ls_rcf_mail_bus_pvt     TYPE wd_this->element_rcf_mail_bus_pvt.
  DATA lv_email_drop_down      TYPE wd_this->element_rcf_mail_bus_pvt-email_drop_down.
  DATA ls_email_pref           TYPE wdr_context_attr_value.
  DATA lt_email_pref           TYPE wdr_context_attr_value_list.
  DATA lo_node_info            TYPE REF TO if_wd_context_node_info.
  DATA lo_node                 TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_mail_txt      TYPE REF TO if_wd_context_node.
  DATA lt_messages             TYPE bapirettab.
  DATA lo_current_controller   TYPE REF TO if_wd_controller.
  DATA lo_message_manager      TYPE REF TO if_wd_message_manager.
  DATA lv_error_occured        TYPE wdy_boolean.

* Check Customizing Switch
  CALL METHOD cl_hr_t77s0=>read_gsval
    EXPORTING
      grpid       = 'RECFA'
      semid       = 'PMAIL'
    IMPORTING
      returnvalue = lv_gsval.

  IF  wd_comp_controller->gv_internal IS NOT INITIAL.          "internal candidate.
    wd_comp_controller->mv_pmail = lv_gsval.
  ENDIF.

  lo_nd_rcf_mail_visible = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_visible ).
  lo_el_rcf_mail_visible = lo_nd_rcf_mail_visible->get_element( ).

  IF wd_comp_controller->mv_pmail = 'X'.

*   Hide existing Email field and show the new fields for business email, private e mail & Email preference
    lo_nd_rcf_mail = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail ).
    lo_el_rcf_mail = lo_nd_rcf_mail->get_element( ).

    lo_el_rcf_mail_visible->set_attribute(
        EXPORTING      name = `EMAIL_VISIBILITY`
                      value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible ).

    lo_el_rcf_mail_visible->set_attribute(
        EXPORTING      name = `OLD_EMAIL_VISIBILITY`
                      value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none ).

    "fill values in drop down
    CLEAR lt_email_pref.
    ls_email_pref-value = cl_hrrcf_wd_ui_constants=>gc_bus_email_choice.
    ls_email_pref-text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/BUSINESS_EMAIL' ).
    APPEND ls_email_pref TO  lt_email_pref.
    ls_email_pref-value = cl_hrrcf_wd_ui_constants=>gc_pvt_email_choice.
    ls_email_pref-text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/PERSONAL_EMAIL' ).
    APPEND ls_email_pref TO  lt_email_pref.

    lo_node = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
    lo_node_info = lo_node->get_node_info( ).
*   set attribute value set to dropdown
    lo_node_info->set_attribute_value_set( name = 'EMAIL_DROP_DOWN'  value_set = lt_email_pref ).

    wd_assist->read_email_data(
      EXPORTING
        is_cand_hrobject   = wd_comp_controller->gs_hrobject
      IMPORTING
        ev_bus_email       = wd_comp_controller->mv_bus_email
        ev_pvt_email       = wd_comp_controller->mv_pvt_email
        ev_selected_choice = wd_comp_controller->mv_choice
        et_messages        = lt_messages ).

    lo_current_controller ?= wd_this->wd_get_api( ).
    lo_message_manager = lo_current_controller->get_message_manager( ).

*   check return messages
    cl_hrrcf_wd_services=>check_return_messages(
      EXPORTING
        it_messages        = lt_messages
        io_message_manager = lo_message_manager
        iv_report          = 'X'
      RECEIVING
        rv_error_indicator = lv_error_occured ).
    IF lv_error_occured EQ abap_true.
      RETURN.
    ENDIF.

*   Set the values to Context:
    lo_nd_rcf_mail_bus_pvt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_bus_pvt ).
    lo_el_rcf_mail_bus_pvt = lo_nd_rcf_mail_bus_pvt->get_element( ).

    lo_el_rcf_mail_bus_pvt->set_attribute(
      name =  `PVT_EMAIL`
      value = wd_comp_controller->mv_pvt_email ).
    lo_el_rcf_mail_bus_pvt->set_attribute(
      name =  `BUS_EMAIL`
      value = wd_comp_controller->mv_bus_email ).
    lo_node->set_attribute(
      name =  'EMAIL_DROP_DOWN'
      value = wd_comp_controller->mv_choice ).

    lo_nd_rcf_mail_txt = wd_context->get_child_node( name = wd_this->wdctx_rcf_mail_txt ).
    IF wd_comp_controller->mv_choice = cl_hrrcf_wd_ui_constants=>gc_bus_email_choice.
      lo_nd_rcf_mail_txt->set_attribute(
            name =  'EMAIL_PREF_TXT'
            value = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/BUSINESS_EMAIL' ) ).
    ELSE.
      lo_nd_rcf_mail_txt->set_attribute(
            name =  'EMAIL_PREF_TXT'
            value = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/PERSONAL_EMAIL' ) ).
    ENDIF.

  ELSE. "Switch Off:

    lo_el_rcf_mail_visible->set_attribute(
        EXPORTING      name = `EMAIL_VISIBILITY`
                      value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_none ).

    lo_el_rcf_mail_visible->set_attribute(
        EXPORTING      name = `OLD_EMAIL_VISIBILITY`
                      value = cl_hrrcf_wd_constants_ui=>gc_wdui_visibility_visible ).

  ENDIF.
ENDMETHOD.

METHOD preferences .

  DATA lo_nd_rcf_industry        TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_hierarchy_level TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_functional_area TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_des_work_loc    TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_prefernces      TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_intrest_grp     TYPE REF TO if_wd_context_node.
  DATA lo_controller             TYPE REF TO if_wd_controller.
  DATA lt_messages               TYPE bapirettab.
  DATA lt_desired_job            TYPE rcf_t_cand_desired_job_pl.
  DATA ls_desired_job            TYPE        rcf_s_cand_desired_job_pl.
  DATA lt_desired_loc            TYPE rcf_t_cand_location_pl.
  DATA ls_desired_loc            TYPE        rcf_s_cand_location_pl.
  DATA lt_desired_loc_new        TYPE wd_this->elements_rcf_des_work_loc.
  DATA ls_desired_loc_new        TYPE wd_this->element_rcf_des_work_loc.
  DATA lt_industry               TYPE        wd_this->elements_rcf_industry.
  DATA ls_industry               TYPE wd_this->element_rcf_industry.
  DATA lt_hierarchy_level        TYPE wd_this->elements_rcf_hierarchy_level.
  DATA ls_hierarchy_level        TYPE wd_this->element_rcf_hierarchy_level.
  DATA lt_functional_area        TYPE        wd_this->elements_rcf_functional_area.
  DATA ls_functional_area        TYPE wd_this->element_rcf_functional_area.
  DATA lt_target_group           TYPE rcf_t_vh_pl.
  DATA ls_target_group           TYPE rcf_s_vh_pl.
  DATA lt_table                  TYPE        rcf_t_vh_pl.
  DATA ls_table                  TYPE        rcf_s_vh_pl.
  DATA ls_rcf_prefernces         TYPE wd_this->element_rcf_prefernces.
  DATA ls_rcf_intrest_grp        TYPE wd_this->element_rcf_intrest_grp.
  DATA lv_intrest_grp            TYPE rcf_target_grp.

  lo_nd_rcf_prefernces      = wd_context->get_child_node( name = wd_this->wdctx_rcf_prefernces ).
  lo_nd_rcf_industry = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_INDUSTRY` ).
  lo_nd_rcf_hierarchy_level = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_HIERARCHY_LEVEL` ).
  lo_nd_rcf_functional_area = wd_context->path_get_node( path = `RCF_EMPL_PREF.RCF_FUNCTIONAL_AREA` ).
  lo_nd_rcf_des_work_loc = wd_context->get_child_node( name = wd_this->wdctx_rcf_des_work_loc ).
  lo_nd_rcf_intrest_grp = wd_context->get_child_node( name = wd_this->wdctx_rcf_intrest_grp ).

* read candidate's preferences
  CALL METHOD wd_assist->read_cand_preferences
    EXPORTING
      is_cand_hrobject    = wd_comp_controller->gs_hrobject
    IMPORTING
      et_desired_job      = lt_desired_job
      ev_interest_group   = lv_intrest_grp
      et_desired_location = lt_desired_loc
      et_messages         = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  READ TABLE lt_desired_job INTO ls_desired_job INDEX 1.
  IF sy-subrc = 0.
    MOVE-CORRESPONDING ls_desired_job TO ls_rcf_prefernces.    "#EC ENHOK
    CALL METHOD lo_nd_rcf_prefernces->set_static_attributes( static_attributes = ls_rcf_prefernces ).
  ENDIF.

  lo_nd_rcf_industry->bind_table( lt_table ).
  CLEAR : lt_table , ls_table.

* read entries for industry
  CALL METHOD wd_assist->get_industry_list
    IMPORTING
      et_industry = lt_table
      et_message  = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  LOOP AT lt_desired_job INTO ls_desired_job.
    CLEAR: ls_table. "FA 2045084
    READ TABLE  lt_table INTO ls_table WITH KEY key = ls_desired_job-industry.
    IF ls_table-key NE 0.
      ls_industry-industry    = ls_desired_job-industry.
      ls_industry-industry_txt = ls_desired_job-industry_txt.
      APPEND ls_industry TO lt_industry.
    ENDIF.
  ENDLOOP.

  lo_nd_rcf_industry->bind_table( lt_industry ).
  CLEAR: lt_table, ls_table.

* read entries for functional area
  CALL METHOD wd_assist->get_functional_area
    IMPORTING
      et_functional_area = lt_table
      et_message         = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  LOOP AT lt_desired_job INTO ls_desired_job.
    READ TABLE  lt_table INTO ls_table WITH KEY key = ls_desired_job-functional_area.
    IF ls_table-key NE 0.
      ls_functional_area-functional_area     = ls_desired_job-functional_area.
      ls_functional_area-functional_area_txt = ls_desired_job-functional_area_txt.
      APPEND ls_functional_area TO lt_functional_area.
    ENDIF.
  ENDLOOP.

  lo_nd_rcf_functional_area->bind_table( lt_functional_area ).
  CLEAR: lt_table, ls_table.

* get entries for hierarchy level
  CALL METHOD wd_assist->get_hierarchy_level_list
    IMPORTING
      et_hierarchy = lt_table
      et_message   = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  LOOP AT lt_desired_job INTO ls_desired_job.
    READ TABLE  lt_table INTO ls_table WITH KEY key = ls_desired_job-hierarchy_level.
    IF ls_table-key NE 0.
      ls_hierarchy_level-hierarchy_level     = ls_desired_job-hierarchy_level.
      ls_hierarchy_level-hierarchy_level_txt = ls_desired_job-hierarchy_level_txt.
      APPEND ls_hierarchy_level TO lt_hierarchy_level.
    ENDIF.
  ENDLOOP.

  lo_nd_rcf_hierarchy_level->bind_table( lt_hierarchy_level ).
  CLEAR: lt_table, ls_table.

* get entries for desired job location
  CALL METHOD wd_assist->get_country_for_des_job_loc
    IMPORTING
      et_country = lt_table
      et_message = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  LOOP AT lt_desired_loc INTO ls_desired_loc.
    READ TABLE lt_table INTO ls_table WITH KEY key = ls_desired_loc-country.                    "N 1842092
    IF sy-subrc = 0.                                                                            "N 1842092
      MOVE-CORRESPONDING ls_desired_loc TO ls_desired_loc_new.    "#EC ENHOK
      APPEND ls_desired_loc_new TO lt_desired_loc_new.
    ENDIF.                                                                                      "N 1842092
  ENDLOOP.

  lo_nd_rcf_des_work_loc->bind_table( lt_desired_loc_new ).

* get entries for target group
  CALL METHOD wd_assist->get_target_group
    IMPORTING
      et_target_group = lt_target_group
      et_message      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  IF lv_intrest_grp IS NOT INITIAL.
    READ TABLE lt_target_group INTO ls_target_group WITH KEY key = lv_intrest_grp.
    ls_rcf_intrest_grp-tgroup = ls_target_group-key.
    ls_rcf_intrest_grp-tgroup_txt = ls_target_group-value.
    IF sy-subrc = 0.
      CALL METHOD lo_nd_rcf_intrest_grp->set_static_attributes( static_attributes = ls_rcf_intrest_grp ).
    ENDIF.
  ENDIF.

* display settings for contract type
  IF ls_desired_job-contract_type IS NOT INITIAL.
    CLEAR: lt_table, ls_table.
    CALL METHOD wd_assist->get_contract_type
      IMPORTING
        et_contract_type = lt_table
        et_message       = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_desired_job-contract_type.
    ls_rcf_prefernces-contract_txt  =  ls_table-value.
    lo_nd_rcf_prefernces->set_attribute( EXPORTING name  = 'CONTRACT_TXT'
                                               value =  ls_rcf_prefernces-contract_txt  ).
  ENDIF.

* display settings for will to relocate
  IF ls_desired_job-will_to_relocate IS NOT INITIAL.
    CLEAR : lt_table , ls_table.
    CALL METHOD wd_assist->get_relocate_list
      IMPORTING
        et_relocate = lt_table
        et_message  = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_desired_job-will_to_relocate.
    ls_rcf_prefernces-will_to_relocate_txt  =  ls_table-value.
    lo_nd_rcf_prefernces->set_attribute( EXPORTING name  = 'WILL_TO_RELOCATE_TXT'
                                               value =  ls_rcf_prefernces-will_to_relocate_txt ).
  ENDIF.

* display settings for salary
  IF ls_desired_job-currency IS NOT INITIAL.
    CLEAR : lt_table , ls_table.

    CALL METHOD wd_assist->get_salary_currency_list
      IMPORTING
        et_salary_currency = lt_table
        et_message         = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    READ TABLE lt_table  INTO ls_table WITH KEY key = ls_desired_job-currency.
    ls_rcf_prefernces-currency_txt  =  ls_table-value.
    lo_nd_rcf_prefernces->set_attribute( EXPORTING name  = 'CURRENCY_TXT'
                                               value =  ls_rcf_prefernces-currency_txt ).
  ENDIF.

ENDMETHOD.

METHOD profile_summary .

  DATA lo_nd_rcf_profile_summary TYPE REF TO if_wd_context_node.
  DATA lo_nd_rcf_questionnaiers  TYPE REF TO if_wd_context_node.
  DATA lo_controller             TYPE REF TO if_wd_controller.
  DATA lt_messages               TYPE bapirettab.
  DATA lt_tg_list                TYPE rcf_t_tg_assignment_pl.
  DATA ls_tg_list                TYPE rcf_s_tg_assignment_pl.
  DATA ls_rcf_profile_summary    TYPE wd_this->element_rcf_profile_summary.
  DATA lv_overall_suitability    TYPE rcf_qa_rating.
  DATA lv_feedback               TYPE rcf_qa_rating.
  DATA lv_tooltip                TYPE text.
  DATA lv_emp_type               TYPE string.
  DATA lv_update                 TYPE datum.
  DATA lv_logdate                TYPE datum.
  DATA lv_update_by              TYPE bu_name1tx.
  DATA lv_trm_rank               TYPE stext.
  DATA lv_assign_rank            TYPE stext.
  DATA lv_text                   TYPE string.
  DATA tg_count                  TYPE i.
  DATA cdcy_t_hrobject           TYPE rcf_t_hrobject.
  DATA cdcy_hrobject             TYPE hrobject.
  DATA lo_candidacy_bl           TYPE REF TO cl_hrrcf_candidacy_bl.
  DATA lo_ex                     TYPE REF TO cx_root.

* get candidate profile summary
  lo_nd_rcf_profile_summary = wd_context->get_child_node( name = wd_this->wdctx_rcf_profile_summary ).
  lo_nd_rcf_questionnaiers = wd_context->get_child_node( name = wd_this->wdctx_rcf_questionnaiers ).

  CALL METHOD wd_assist->get_cand_profile_summary
    EXPORTING
      is_cand_hrobject   = wd_comp_controller->gs_hrobject
    IMPORTING
      ev_last_upd_date   = lv_update
      ev_last_upd_by     = lv_update_by
      ev_last_login_date = lv_logdate
      et_message         = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.
  CLEAR lt_messages.

  ls_rcf_profile_summary-last_log_date = lv_logdate.
  ls_rcf_profile_summary-last_prof_upadte = lv_update.
  ls_rcf_profile_summary-last_prof_upadte_by = lv_update_by.

* get candidate information (for internal candidates), e.g. pernr
  IF wd_comp_controller->gv_internal EQ abap_true.
    lv_emp_type = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/INTERNAL_CAND' ).
    ls_rcf_profile_summary-type = lv_emp_type.
    CALL METHOD wd_assist->get_candidate_info
      EXPORTING
        is_cand_hrobject = wd_comp_controller->gs_hrobject
      IMPORTING
        ev_pernr         = wd_comp_controller->gv_pernr
        et_message       = lt_messages.

    IF lt_messages IS NOT INITIAL.
      lo_controller ?= wd_this->wd_get_api( ).
      cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                        io_controller = lo_controller ).
    ENDIF.
    CLEAR lt_messages.

    ls_rcf_profile_summary-personel_number = wd_comp_controller->gv_pernr.

  ELSE.
    lv_emp_type = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/EXTERNAL_CAND' ).
    ls_rcf_profile_summary-type = lv_emp_type.
  ENDIF.

* get candidate rankings
  CALL METHOD wd_assist->get_candidate_ranking
    EXPORTING
      is_cand_hrobject      = wd_comp_controller->gs_hrobject
      is_requi_hrobject     = wd_comp_controller->gs_req_hrobject
      is_cdcy_hrobject      = wd_comp_controller->gs_cdcy_hrobject                  "MOD_N1689300
    IMPORTING
      ev_trm_ranking        = lv_trm_rank
      ev_assignment_ranking = lv_assign_rank
      et_message            = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

  IF lv_trm_rank IS NOT INITIAL.
    ls_rcf_profile_summary-trm_rank = lv_trm_rank.
  ELSE.
    lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
    ls_rcf_profile_summary-trm_rank = lv_text.
  ENDIF.

  IF lv_assign_rank IS NOT INITIAL.
    ls_rcf_profile_summary-assign_rank = lv_assign_rank.
  ELSE.
    lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
    ls_rcf_profile_summary-assign_rank = lv_text.
  ENDIF.

  CALL METHOD lo_nd_rcf_profile_summary->set_static_attributes( static_attributes = ls_rcf_profile_summary ).

* read candidacies and questionnaires
  IF wd_comp_controller->gs_req_hrobject IS NOT INITIAL.
    CALL METHOD wd_assist->read_candidacy
      EXPORTING
        is_hrobject     = wd_comp_controller->gs_hrobject
        is_req_hrobject = wd_comp_controller->gs_req_hrobject
      IMPORTING
        cdcy_hrobject   = cdcy_t_hrobject
        et_message      = lt_messages.

*   candidacy check
    IF cdcy_t_hrobject IS NOT INITIAL.
      READ TABLE  cdcy_t_hrobject INTO cdcy_hrobject INDEX 1.
      CALL METHOD wd_assist->read_questionnaire
        EXPORTING
          is_cdcy_hrobject       = cdcy_hrobject
          iv_read_cand_qas_x     = 'X'
        IMPORTING
          et_message             = lt_messages
          ev_overall_suitability = lv_overall_suitability.

      IF lt_messages IS NOT INITIAL.
        lo_controller ?= wd_this->wd_get_api( ).
        cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                          io_controller = lo_controller ).
      ENDIF.
      CLEAR lt_messages.

*     handle different values of the candidate's suitability
      CASE lv_overall_suitability.

        WHEN '1'. " Failed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QUESTIONNAIRE`
                      value = '~Icon/RedLed' ).
          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/NEGATIVE_FEEDBACK' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `TOOLTIP`
                      value = lv_tooltip ).

        WHEN '2'. " Not completed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QUESTIONNAIRE`
                      value = '~Icon/YellowLed' ).
          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/NO_FEEDBACK_AVAILABLE' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `TOOLTIP`
                      value = lv_tooltip ).

        WHEN '3'. " Passed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QUESTIONNAIRE`
                      value = '~Icon/GreenLed' ).

          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/POSITIVE_FEEDBACK' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `TOOLTIP`
                      value = lv_tooltip ).

      ENDCASE.

*     questionnaire Feedback
      CALL METHOD wd_assist->read_questionnaire
        EXPORTING
          is_cdcy_hrobject       = cdcy_hrobject
          iv_read_cand_qas_x     = ''
        IMPORTING
          et_message             = lt_messages
          ev_overall_suitability = lv_feedback.

      IF lt_messages IS NOT INITIAL.
        lo_controller ?= wd_this->wd_get_api( ).
        cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                          io_controller = lo_controller ).
      ENDIF.
      CLEAR lt_messages.

*     handle different values of the questionnaire feedback
      CASE lv_feedback.
        WHEN '1'. " Failed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QSTNR_FEEDBACK`
                      value = '~Icon/RedLed' ).
          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/NEGATIVE_FEEDBACK' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `FEEDBACK_TOOLTIP`
                      value = lv_tooltip ).

        WHEN '2'. " Not completed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QSTNR_FEEDBACK`
                      value = '~Icon/YellowLed' ).
          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/NO_FEEDBACK_AVAILABLE' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `FEEDBACK_TOOLTIP`
                      value = lv_tooltip ).

        WHEN '3'. " Passed
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `QSTNR_FEEDBACK`
                      value = '~Icon/GreenLed' ).
          lv_tooltip = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI/POSITIVE_FEEDBACK' ).
          lo_nd_rcf_questionnaiers->set_attribute(
            EXPORTING name  = `FEEDBACK_TOOLTIP`
                      value = lv_tooltip ).

      ENDCASE.
    ENDIF. " end of candidacy check
  ENDIF. " end of req_hrobject check

* handle talent group list
  CALL METHOD wd_assist->get_tg_list
    EXPORTING
      is_tg_hrobject = wd_comp_controller->gs_hrobject
    IMPORTING
      et_tg_list     = lt_tg_list
      et_message     = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

  DESCRIBE TABLE lt_tg_list LINES tg_count.

  IF tg_count NE 0 AND tg_count NE 1.
    lo_nd_rcf_profile_summary->set_attribute( EXPORTING name = 'TALENT_GRPS' value = tg_count ).
  ENDIF.

  IF tg_count EQ 0.
    lv_text = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/NONE' ).
    lo_nd_rcf_profile_summary->set_attribute( EXPORTING name = 'TALENT_GRPS' value = lv_text ).
  ENDIF.

  IF tg_count EQ 1.
    READ TABLE lt_tg_list INTO ls_tg_list INDEX 1.
    lo_nd_rcf_profile_summary->set_attribute( EXPORTING name = 'TALENT_GRPS' value = ls_tg_list-tg_title_txt ).
  ENDIF.

ENDMETHOD.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

METHOD onactionlink_assignment .

* reads candidacies, gets rankings and calls assignment popup in display or edit mode

  DATA lo_interfacecontroller_act TYPE REF TO iwci_erc_c_activity_mgmt_ui .
  DATA lo_controller              TYPE REF TO if_wd_controller.
  DATA lo_nd_shared_context       TYPE REF TO if_wd_context_node.
  DATA lo_cmp_usage               TYPE REF TO if_wd_component_usage.
  DATA lt_messages                TYPE bapirettab.
  DATA lv_display_mode            TYPE wd_this->element_shared_context-display_mode.
  DATA lv_act_proc                TYPE rcf_act_proc.
  DATA lv_act_type                TYPE rcf_act_type.
  DATA cdcy_t_hrobject            TYPE rcf_t_hrobject.
  DATA cdcy_hrobject              TYPE hrobject.

  lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
  lo_nd_shared_context->get_attribute(
    EXPORTING      name =  `DISPLAY_MODE`
    IMPORTING     value = lv_display_mode ).

  lo_cmp_usage =   wd_this->wd_cpuse_activity_mgmt_ui( ).
  IF lo_cmp_usage->has_active_component( ) IS INITIAL.
    lo_cmp_usage->create_component( ).
  ENDIF.

  lo_interfacecontroller_act = wd_this->wd_cpifc_activity_mgmt_ui( ).

  lo_interfacecontroller_act->get_ranking_proc_act_type(
        EXPORTING
          is_hrobject = wd_comp_controller->gs_cdcy_hrobject                  "MOD_N1689300
        IMPORTING
          ev_act_proc = lv_act_proc
          ev_act_type = lv_act_type ).

  IF lv_display_mode NE 'X'.

    INSERT wd_comp_controller->gs_cdcy_hrobject INTO TABLE cdcy_t_hrobject.

    lo_interfacecontroller_act->set_activity_context(
        it_hrobject = cdcy_t_hrobject
        iv_act_proc = lv_act_proc
        iv_act_type = lv_act_type
        iv_enabled  = abap_true ).

  ELSE.
    lo_interfacecontroller_act->set_activity_context(
        it_hrobject = cdcy_t_hrobject
        iv_act_proc = lv_act_proc
        iv_act_type = lv_act_type
        iv_enabled  = abap_false ).

  ENDIF.

  wd_comp_controller->gv_ranking_changed = 'X'.

ENDMETHOD.

METHOD onactionlink_comm_data .

* shows 'additional communication data' popup in display mode.

  DATA lo_window_manager TYPE REF TO if_wd_window_manager.
  DATA lo_api_component  TYPE REF TO if_wd_component.
  DATA lv_communication  TYPE string.

  wd_comp_controller->gv_comm_edit = ' '.
  wd_comp_controller->gv_display_region = abap_true.

  lv_communication = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/COMMUNICATION' ).

  lo_api_component  = wd_comp_controller->wd_get_api( ).
  lo_window_manager = lo_api_component->get_window_manager( ).
  wd_comp_controller->branch_popup = lo_window_manager->create_window(
                   window_name            = 'W_COMMUNICATION'
                   title                  = lv_communication
                   close_in_any_case      = abap_false
                   message_display_mode   = if_wd_window=>co_msg_display_mode_selected
                  close_button            = abap_true
                   button_kind            = if_wd_window=>co_buttons_close
                   message_type           = if_wd_window=>co_msg_type_none ).

  wd_comp_controller->branch_popup->open( ).

ENDMETHOD.

method ONACTIONLINK_CV .

    wd_this->onactionlink_resume(
    wdevent = wdevent                  "ref to cl_wd_custom_event
    ).

ENDMETHOD.

METHOD onactionlink_edit_commu .

* shows 'additional communication data' popup in edit mode

  DATA lo_window_manager TYPE REF TO if_wd_window_manager.
  DATA lo_api_component  TYPE REF TO if_wd_component.
  DATA lv_communication  TYPE string.

  wd_comp_controller->gv_comm_edit = 'X'.
  lv_communication = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/EDIT_COMM' ).

  lo_api_component  = wd_comp_controller->wd_get_api( ).
  lo_window_manager = lo_api_component->get_window_manager( ).
  wd_comp_controller->branch_popup = lo_window_manager->create_window(
                   window_name            = 'W_COMMUNICATION'
                   title                  = lv_communication
                   close_in_any_case      = abap_false
                   message_display_mode   = if_wd_window=>co_msg_display_mode_selected
                  close_button            = abap_true
                   button_kind            = if_wd_window=>co_buttons_okcancel
                   message_type           = if_wd_window=>co_msg_type_none ).

  wd_comp_controller->branch_popup->open( ).

ENDMETHOD.

method ONACTIONLINK_FEEDBACK .

* reads candidacies and gets feedback for questionnaire

  DATA lo_cmp_usage           TYPE REF TO if_wd_component_usage.
  DATA lo_interfacecontroller TYPE REF TO iwci_erc_c_quesnnr_pop_ui .
  DATA lo_controller          TYPE REF TO if_wd_controller.
  DATA lt_messages            TYPE bapirettab.
  DATA cdcy_t_hrobject        TYPE rcf_t_hrobject.
  DATA cdcy_hrobject          TYPE hrobject.

  lo_cmp_usage =   wd_this->wd_cpuse_quesnnr_pop_ui( ).
  IF lo_cmp_usage->has_active_component( ) IS INITIAL.
    lo_cmp_usage->create_component( ).
  ENDIF.

  CALL METHOD wd_assist->read_candidacy
    EXPORTING
      is_hrobject     = wd_comp_controller->gs_hrobject
      is_req_hrobject = wd_comp_controller->gs_req_hrobject
    IMPORTING
      cdcy_hrobject   = cdcy_t_hrobject
      et_message      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

  IF cdcy_t_hrobject IS NOT INITIAL.
    READ TABLE  cdcy_t_hrobject INTO cdcy_hrobject INDEX 1.
    lo_interfacecontroller = wd_this->wd_cpifc_quesnnr_pop_ui( ).
    lo_interfacecontroller->call_3rd_party_qas_popup(
      is_cdcy_hrobject = cdcy_hrobject ).
  ENDIF.

endmethod.

METHOD onactionlink_prefer_add_dat .

* opens popup for preferences in display mode

  DATA lo_window_manager TYPE REF TO if_wd_window_manager.
  DATA lo_api_component  TYPE REF TO if_wd_component.
  DATA lv_prefrences     TYPE string.

  wd_comp_controller->gv_pref_edit = ' '.
  wd_comp_controller->gv_display_region = abap_true.

  lv_prefrences = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/PREFERENCES' ).

  lo_api_component  = wd_comp_controller->wd_get_api( ).
  lo_window_manager = lo_api_component->get_window_manager( ).
  wd_comp_controller->branch_popup = lo_window_manager->create_window(
                   window_name            = 'W_PREFERENCE'
                   title                  = lv_prefrences
                   close_in_any_case      = abap_false
                   message_display_mode   = if_wd_window=>co_msg_display_mode_selected
                   close_button           = abap_true
                   button_kind            = if_wd_window=>co_buttons_close
                   message_type           = if_wd_window=>co_msg_type_none ).

  wd_comp_controller->branch_popup->open( ).

ENDMETHOD.

METHOD onactionlink_prefer_edit .

* opens popup for preferences in edit mode

  DATA lo_window_manager TYPE REF TO if_wd_window_manager.
  DATA lo_api_component  TYPE REF TO if_wd_component.
  DATA lv_prefrences     TYPE string.
  DATA lv_edit           TYPE string.
  DATA lv_title          TYPE string.

  wd_comp_controller->gv_pref_edit = 'X'.

  lv_prefrences = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/PREFERENCES' ).
  lv_edit  = cl_wd_utilities=>get_otr_text_by_alias( alias = 'PAOC_RCF_UI/EDIT' ).
  CONCATENATE lv_edit lv_prefrences INTO lv_title SEPARATED BY ' '.

  lo_api_component  = wd_comp_controller->wd_get_api( ).
  lo_window_manager = lo_api_component->get_window_manager( ).
  wd_comp_controller->branch_popup = lo_window_manager->create_window(
                   window_name            = 'W_PREFERENCE'
                   title                  = lv_title
                   close_in_any_case      = abap_false
                   message_display_mode   = if_wd_window=>co_msg_display_mode_selected
                   close_button            = abap_true
                   button_kind            = if_wd_window=>co_buttons_okcancel
                   message_type           = if_wd_window=>co_msg_type_none
                   default_button         = if_wd_window=>co_button_ok ).

  wd_comp_controller->branch_popup->open( ).

ENDMETHOD.

METHOD onactionlink_questionaries .

* reads candidacies, opens popup with information to questionnaires

  DATA lo_cmp_usage           TYPE REF TO if_wd_component_usage.
  DATA lo_interfacecontroller TYPE REF TO iwci_erc_c_quesnnr_pop_ui .
  DATA lo_controller          TYPE REF TO if_wd_controller.
  DATA lt_messages            TYPE bapirettab.
  DATA cdcy_t_hrobject        TYPE rcf_t_hrobject.
  DATA cdcy_hrobject          TYPE hrobject.

  lo_cmp_usage =   wd_this->wd_cpuse_quesnnr_pop_ui( ).
  IF lo_cmp_usage->has_active_component( ) IS INITIAL.
    lo_cmp_usage->create_component( ).
  ENDIF.

  CALL METHOD wd_assist->read_candidacy
    EXPORTING
      is_hrobject     = wd_comp_controller->gs_hrobject
      is_req_hrobject = wd_comp_controller->gs_req_hrobject
    IMPORTING
      cdcy_hrobject   = cdcy_t_hrobject
      et_message      = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

  IF cdcy_t_hrobject IS NOT INITIAL.
    READ TABLE  cdcy_t_hrobject INTO cdcy_hrobject INDEX 1.
    lo_interfacecontroller = wd_this->wd_cpifc_quesnnr_pop_ui( ).
    lo_interfacecontroller->call_candidate_qas_pop(
      is_cdcy_hrobject =  cdcy_hrobject ).

  ENDIF.

ENDMETHOD.

METHOD onactionlink_resume .

* get the latest resume attachment and reads the attachment content

  DATA lo_controller         TYPE REF TO if_wd_controller.
  DATA lt_messages           TYPE bapirettab.
  DATA ls_attachment         TYPE rcf_s_cand_attachment_pl.
  DATA lv_document_content   TYPE        xstring.
  DATA lv_mime_type          TYPE        string.
  DATA lv_filename           TYPE        string.
  DATA lv_att_inplace        TYPE        boole_d VALUE abap_false.    "N 1715151

* get the latest resume attachment:
  CALL METHOD wd_assist->get_latest_resume_attachment
    EXPORTING
      is_cand_hrobject = wd_comp_controller->gs_hrobject
      iv_langu         = sy-langu
    IMPORTING
      es_latest_resume = ls_attachment
      et_message       = lt_messages.

  DELETE lt_messages WHERE type NE 'A' AND type NE 'E'.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
    RETURN.
  ENDIF.

* read attachment content
  IF ls_attachment IS NOT INITIAL.
  CALL METHOD wd_assist->read_attachment_content
    EXPORTING
      is_cand_hrobject    = wd_comp_controller->gs_hrobject
      is_p5134            = ls_attachment-p5134
    IMPORTING
      ev_document_content = lv_document_content
      ev_mime_type        = lv_mime_type
      ev_filename         = lv_filename
      et_messages         = lt_messages.

  IF lt_messages IS NOT INITIAL.
    lo_controller ?= wd_this->wd_get_api( ).
    cl_hrrcf_util_ui=>report_message( it_message    = lt_messages
                                      io_controller = lo_controller ).
  ENDIF.

    DELETE lt_messages WHERE type NE 'A' AND type NE 'E'.

  IF lt_messages IS INITIAL.
    IF lv_mime_type CS 'PDF'.                                     "N 1715151
      lv_att_inplace = abap_true.                                 "N 1715151
    ENDIF.                                                        "N 1715151

*   Send the file for output:
    CALL METHOD cl_wd_runtime_services=>attach_file_to_response
      EXPORTING
        i_filename      = lv_filename
        i_content       = lv_document_content
        i_mime_type     = lv_mime_type
        i_in_new_window = abap_true
        i_inplace       = lv_att_inplace.                         "N 1715151
    ENDIF.
  ENDIF.

ENDMETHOD.

METHOD onactionlink_talentgroups .

* opens popup with the candidate's assignments to talent groups

  DATA lo_cmp_usage           TYPE REF TO if_wd_component_usage.
  DATA lo_interfacecontroller TYPE REF TO iwci_erc_c_candidate_pop_ui .
  DATA lo_window_manager      TYPE REF TO if_wd_window_manager.
  DATA lo_api_component       TYPE REF TO if_wd_component.
  DATA lo_window              TYPE REF TO if_wd_window.
  DATA lo_nd_shared_context   TYPE REF TO if_wd_context_node.
  DATA lv_display_mode        TYPE wd_this->element_shared_context-display_mode.
  DATA lv_title               TYPE        string.

  lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
  lo_nd_shared_context->get_attribute(
    EXPORTING      name =  `DISPLAY_MODE`
    IMPORTING     value = lv_display_mode ).

  lo_cmp_usage = wd_this->wd_cpuse_candidate_pop_ui( ).
  IF lo_cmp_usage->has_active_component( ) IS INITIAL.
    lo_cmp_usage->create_component( ).
  ENDIF.

  lo_interfacecontroller =   wd_this->wd_cpifc_candidate_pop_ui( ).
  lo_api_component  = wd_comp_controller->wd_get_api( ).
    lo_window_manager = lo_api_component->get_window_manager( ).

* handle text for popup window title
  CALL METHOD cl_wd_utilities=>get_otr_text_by_alias
    EXPORTING
      alias      = 'PAOC_RCF_UI/TGS'
    RECEIVING
      alias_text = lv_title.

  lo_window = lo_window_manager->create_window_for_cmp_usage(
                        interface_view_name    = 'W_TG_LIST_POP'
                        component_usage_name   = 'CANDIDATE_POP_UI'
                        title                  = lv_title
                      message_display_mode   = if_wd_window=>co_msg_display_mode_selected ).

    lo_window->set_button_kind( if_wd_window=>co_buttons_close ).
    lo_interfacecontroller->set_candidate(
    EXPORTING
      is_cand_hrobject = wd_comp_controller->gs_hrobject
      io_window        = lo_window ).

  IF lv_display_mode NE 'X'.
    lo_interfacecontroller->set_visibilty( iv_enabled = 'X' ).
  ELSE.
    lo_interfacecontroller->set_visibilty( iv_enabled = ' ' ).
  ENDIF.

  lo_window->open( ).
  wd_comp_controller->gv_ranking_changed = 'X'.

ENDMETHOD.

METHOD onactionlink_trm_rank .

* opens popup with the candidate's TRM rankings

  DATA lo_nd_shared_context       TYPE REF TO if_wd_context_node.
  DATA lo_cmp_usage               TYPE REF TO if_wd_component_usage.
  DATA lo_interfacecontroller_act TYPE REF TO iwci_erc_c_activity_mgmt_ui .
  DATA lt_hrobject                TYPE rcf_t_hrobject.
  DATA lv_act_proc                TYPE rcf_act_proc.
  DATA lv_act_type                TYPE rcf_act_type.
  DATA lv_display_mode            TYPE wd_this->element_shared_context-display_mode.

  lo_nd_shared_context = wd_context->get_child_node( name = wd_this->wdctx_shared_context ).
  lo_nd_shared_context->get_attribute(
    EXPORTING      name =  `DISPLAY_MODE`
    IMPORTING     value = lv_display_mode ).

  lo_cmp_usage = wd_this->wd_cpuse_activity_mgmt_ui( ).
  IF lo_cmp_usage->has_active_component( ) IS INITIAL.
    lo_cmp_usage->create_component( ).
  ENDIF.

  lo_interfacecontroller_act = wd_this->wd_cpifc_activity_mgmt_ui( ).
  lo_interfacecontroller_act->get_ranking_proc_act_type(
        EXPORTING
          is_hrobject = wd_comp_controller->gs_hrobject
        IMPORTING
          ev_act_proc = lv_act_proc
      ev_act_type = lv_act_type ).

  APPEND wd_comp_controller->gs_hrobject TO lt_hrobject.

  IF lv_display_mode NE 'X'.
    lo_interfacecontroller_act->set_activity_context(
        it_hrobject = lt_hrobject
        iv_act_proc = lv_act_proc
        iv_act_type = lv_act_type
        iv_enabled  = abap_true ).
  ELSE.
    lo_interfacecontroller_act->set_activity_context(
        it_hrobject = lt_hrobject
        iv_act_proc = lv_act_proc
        iv_act_type = lv_act_type
        iv_enabled  = abap_false ).
  ENDIF.

wd_comp_controller->gv_ranking_changed = 'X'.

ENDMETHOD.

method UPDATE_PROFILE_SUMMARY .

   wd_this->profile_summary(  ).

endmethod.

endclass.
 