*=====================================================================*
* Intf.: if_vw_personaldata  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <VW_PERSONALDATA> of
*        component:   <hrrcf_c_personl_data_ui>
* UDate: 20240716 104715
*=====================================================================*
interface if_vw_personaldata.
 
* +-------------------------------------------------------------------+
* |  context type definitions                                         |
* +-------------------------------------------------------------------+

  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_address type string value `ADDRESS`.
  types:
    begin of Element_address,
      CHANNEL  type RCF_S_MDL_CAND_COMMN_ADDRESS-CHANNEL,
      CHANNEL_DESCRIPTION  type RCF_S_MDL_CAND_COMMN_ADDRESS-CHANNEL_DESCRIPTION,
      STREET  type RCF_S_MDL_CAND_COMMN_ADDRESS-STREET,
      STREET2  type RCF_S_MDL_CAND_COMMN_ADDRESS-STREET2,
      COUNTRY  type RCF_S_MDL_CAND_COMMN_ADDRESS-COUNTRY,
      CITY  type RCF_S_MDL_CAND_COMMN_ADDRESS-CITY,
      POSTCODE  type RCF_S_MDL_CAND_COMMN_ADDRESS-POSTCODE,
      REGION  type RCF_S_MDL_CAND_COMMN_ADDRESS-REGION,
      OLD_COUNTRY  type RCF_S_MDL_CAND_COMMN_ADDRESS-COUNTRY,
    end of Element_address,  "#EC NEEDED
    Elements_address type 
       standard table of Element_address
       with default key. "#EC NEEDED
  constants:
    wdctx_region_attributes type string value `REGION_ATTRIBUTES`.
  types:
    begin of Element_region_attributes,
      REGION_ENABLED  type WDY_BOOLEAN,
    end of Element_region_attributes,  "#EC NEEDED
    Elements_region_attributes type 
       standard table of Element_region_attributes
       with default key. "#EC NEEDED
  constants:
    wdctx_region_values type string value `REGION_VALUES`.
  types:
    begin of Element_region_values,
      REGION_KEY  type REGIO,
      REGION_NAME  type STRING,
    end of Element_region_values,  "#EC NEEDED
    Elements_region_values type 
       standard table of Element_region_values
       with default key. "#EC NEEDED
  constants:
    wdctx_communicationdata type string value `COMMUNICATIONDATA`.
  types:
    begin of Element_communicationdata,
      EMAIL  type AD_SMTPADR,
    end of Element_communicationdata,  "#EC NEEDED
    Elements_communicationdata type 
       standard table of Element_communicationdata
       with default key. "#EC NEEDED
  constants:
    wdctx_ireferences type string value `IREFERENCES`.
  types:
    begin of Element_ireferences,
      URL_CATEGORY  type RCF_S_MDL_CAND_INTERNET_REF-URL_CATEGORY,
      URL_CATEGORY_TXT  type RCF_S_MDL_CAND_INTERNET_REF-URL_CATEGORY_TXT,
      INTERNET_REF_URL  type RCF_S_MDL_CAND_INTERNET_REF-INTERNET_REF_URL,
      INTERNET_REF_URL_TXT  type RCF_S_MDL_CAND_INTERNET_REF-INTERNET_REF_URL_TXT,
      DESCRIPTION  type RCF_S_MDL_CAND_INTERNET_REF-DESCRIPTION,
      DESCRIPTION_TXT  type RCF_S_MDL_CAND_INTERNET_REF-DESCRIPTION_TXT,
      DOC_LANGU  type RCF_S_MDL_CAND_INTERNET_REF-DOC_LANGU,
      TEST_LINK_VISIBLE  type WDY_BOOLEAN,
    end of Element_ireferences,  "#EC NEEDED
    Elements_ireferences type 
       standard table of Element_ireferences
       with default key. "#EC NEEDED
  constants:
    wdctx_personaldata type string value `PERSONALDATA`.
  types:
    Element_personaldata type RCF_S_MDL_CAND_PERSONAL_DATA,
    Elements_personaldata type 
       standard table of Element_personaldata
       with default key. "#EC NEEDED
  constants:
    wdctx_phone type string value `PHONE`.
  types:
    Element_phone type RCF_S_MDL_CAND_COMMN_TELEPHONE,
    Elements_phone type 
       standard table of Element_phone
       with default key. "#EC NEEDED
  constants:
    wdctx_preferred_channel type string value `PREFERRED_CHANNEL`.
  types:
    begin of Element_preferred_channel,
      ADDRESS_CHANNEL  type RCF_COMM_CHANNEL,
      PHONE_CHANNEL  type RCF_COMM_CHANNEL,
      ADDRESS_CHANNEL_VISIBLE  type WDY_BOOLEAN,
      PHONE_CHANNEL_VISIBLE  type WDY_BOOLEAN,
    end of Element_preferred_channel,  "#EC NEEDED
    Elements_preferred_channel type 
       standard table of Element_preferred_channel
       with default key. "#EC NEEDED
  constants:
    wdctx_ui type string value `UI`.
  types:
    begin of Element_ui,
      COMM_DATA_VISIBLE  type WDY_BOOLEAN,
      NEW_ELEMENTS_VISIBLE  type WDY_BOOLEAN,
      NEW_COMM_DATA_VISIBLE  type WDY_BOOLEAN,
      NO_OF_CHAR_IN_FIELDS  type I,
    end of Element_ui,  "#EC NEEDED
    Elements_ui type 
       standard table of Element_ui
       with default key. "#EC NEEDED
  methods CHECK_ADDRESSES  ."#EC NEEDED
  methods CHECK_COMM_DATA  ."#EC NEEDED
  methods CHECK_FOA_SEX  ."#EC NEEDED
  methods CHECK_IREFERENCES
    returning
      value(RV_ERROR_OCCURRED)  type Wdy_Boolean  ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_VIEW_CONTROLLER. "#EC NEEDED
 
 
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  action getters                                                   |
* +-------------------------------------------------------------------+

  methods Get_add_ireference_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_country_selected_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_delete_ireference_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_foa_selected_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_sex_selected_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_url_entered_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  controller <componentcontroller>
*            of usage   <6priurea6ff8k6lepdwpsyayj>
**********
  methods  get_componentcontroller_ctr
    returning
      value(Result) type ref to ig_componentcontroller. "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONADD_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONCOUNTRY_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONDELETE_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONFOA_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONSEX_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONURL_ENTERED
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Personl_Data.
endinterface.
*=====================================================================*
* Class: CL_VW_PERSONALDATA_Ctr
* Purp.: definitions for application defined methods of controller
*        VW_PERSONALDATA (VIEW)
* UDate: 20240716 104715
*=====================================================================*
class CL_VW_PERSONALDATA_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_VW_PERSONALDATA
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_personl_data.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAFTERACTION  ."#EC NEEDED
  methods WDDOBEFOREACTION  ."#EC NEEDED
  methods WDDOEXIT  ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOMODIFYVIEW
    importing
      FIRST_TIME  type Wdy_Boolean 
      VIEW  type ref to If_Wd_View   ."#EC NEEDED
  methods WDDOONCONTEXTMENU
    importing
      CONTEXT_MENU_EVENT  type ref to If_Wd_Context_Menu_Event 
      CONTEXT_MENU_MANAGER  type ref to If_Wd_Context_Menu_Manager 
    returning
      value(MENU)  type ref to Cl_Wd_Menu  ."#EC NEEDED
  methods CHECK_ADDRESSES  ."#EC NEEDED
  methods CHECK_COMM_DATA  ."#EC NEEDED
  methods CHECK_FOA_SEX  ."#EC NEEDED
  methods CHECK_IREFERENCES
    returning
      value(RV_ERROR_OCCURRED)  type Wdy_Boolean  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONADD_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONCOUNTRY_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONDELETE_IREFERENCE
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONFOA_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONSEX_SELECTED
    importing
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONURL_ENTERED
    importing
      CONTEXT_ELEMENT  type ref to If_Wd_Context_Element 
      ID  type String 
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_VW_PERSONALDATA,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node,     "#EC NEEDED
    wd_Comp_Controller  type ref to Ig_ComponentController. "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_personl_data. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_VW_PERSONALDATA_Ctr 
* Purp.: explicit definitions derived from application coding
*        <VW_PERSONALDATA> (VIEW)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240716 104715
*=====================================================================*
class CL_VW_PERSONALDATA_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Comp_Controller = Wd_This->get_ComponentController_Ctr( ).
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAFTERACTION . "#EC NEEDED
endmethod.

method wddobeforeaction .

  data: lo_view_controller   type ref to if_wd_view_controller,
        lo_node_ui           type ref to if_wd_context_node,
        lt_messages          type cl_wd_dynamic_tool=>t_check_result_message_tab,
        lv_comm_data_visible type wdy_boolean,
        lv_error_iref        type wdy_boolean.

  lo_view_controller = wd_this->wd_get_api( ).

  wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_false ).

  if lo_view_controller->is_current_action_validating( ) = abap_true.

*   check for mandatory fields
    call method cl_wd_dynamic_tool=>check_mandatory_attr_on_view
      exporting
        view_controller  = lo_view_controller
        display_messages = abap_true
      importing
        messages         = lt_messages.

*   check internet references
    if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.
      lv_error_iref = wd_this->check_ireferences( ).
    endif.

    if lt_messages is not initial or
       lv_error_iref eq abap_true.
      wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).
    endif.

  endif.

  lo_node_ui = wd_context->get_child_node( name = if_vw_personaldata=>wdctx_ui ).

  if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_false.
    lo_node_ui->get_attribute(
      exporting
        name  = `COMM_DATA_VISIBLE`
      importing
        value = lv_comm_data_visible ).
  else.
    lo_node_ui->get_attribute(
      exporting
        name  = `NEW_COMM_DATA_VISIBLE`
      importing
        value = lv_comm_data_visible ).
  endif.

* check addresses and communication data only if they are visible
  if lv_comm_data_visible = abap_true.
*   checks for addresses
    wd_this->check_addresses( ).
*   checks for communication data
    wd_this->check_comm_data( ).
  endif.

endmethod.

method WDDOEXIT . "#EC NEEDED
endmethod.

method WDDOINIT . "#EC NEEDED
endmethod.

method wddomodifyview .

  data: lo_nd_ireferences     type ref to if_wd_context_node,
        lo_el_ireferences     type ref to if_wd_context_element,
        lt_elem_set           type wdr_context_element_set,
        ls_ireferences        type wd_this->element_ireferences,
        lv_message            type string.

DATA lv_internet_ref_url_txt  TYPE rcf_s_mdl_cand_internet_ref-internet_ref_url_txt.
  wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_false ).

  if cl_hrrcf_switch_check=>hrerc_sfws_ui_enh_04( ) eq abap_true.

*   make the "Test Link" link visible or invisible and add the protocol if missing
    lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
    lt_elem_set = lo_nd_ireferences->get_elements( ).

    loop at lt_elem_set into lo_el_ireferences.

      clear: ls_ireferences.

      lo_el_ireferences->get_static_attributes(
        importing
          static_attributes = ls_ireferences ).

      condense ls_ireferences-internet_ref_url_txt.

      IF cl_http_utility=>is_valid_url( ls_ireferences-internet_ref_url_txt ) = abap_false.
      message e045(hrrcf_wd_ui) into lv_message.

      wd_comp_controller->go_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_ireferences
          attribute_name = 'INTERNET_REF_URL_TXT' ).
        CLEAR ls_ireferences.
      ENDIF.

      if ls_ireferences-internet_ref_url_txt is not initial and
         ls_ireferences-internet_ref_url_txt ne wd_assist->gc_default_link.
        ls_ireferences-test_link_visible = abap_true.
      else.
        ls_ireferences-test_link_visible = abap_false.
      endif.

      if ls_ireferences-internet_ref_url_txt is not initial                and
         ls_ireferences-internet_ref_url_txt ne wd_assist->gc_default_link and
         ls_ireferences-internet_ref_url_txt np 'http://*'                 and
         ls_ireferences-internet_ref_url_txt np 'https://*'.
*commenting below code since direct assignment w/o checking if URL is valid results in dump in framework
*example if url contains http::/www.linkedin.com/in.. code still appends http:// and url becomes http://http::/www.linl..->dump
*        ls_ireferences-internet_ref_url_txt = wd_assist->gc_default_link && ls_ireferences-internet_ref_url_txt.
         lv_internet_ref_url_txt = wd_assist->gc_default_link && ls_ireferences-internet_ref_url_txt.
         IF cl_http_utility=>is_valid_url( lv_internet_ref_url_txt ) = abap_true.
           ls_ireferences-internet_ref_url_txt = lv_internet_ref_url_txt.
         ENDIF.
      endif.

      lo_el_ireferences->set_static_attributes( ls_ireferences ).

    endloop.

  endif.

endmethod.

method WDDOONCONTEXTMENU . "#EC NEEDED
endmethod.

METHOD check_addresses.

  DATA: lo_node_address           TYPE REF TO if_wd_context_node,
        lo_elem_address           TYPE REF TO if_wd_context_element,
        lt_elem_address           TYPE wdr_context_element_set,
        lt_addresses              TYPE if_vw_personaldata=>elements_address,
        ls_address                TYPE if_vw_personaldata=>element_address,
        ls_address_check          TYPE if_vw_personaldata=>element_address,
        lv_address_count          TYPE i.

  DATA: lo_node_preferred_channel TYPE REF TO if_wd_context_node,
        lo_elem_preferred_channel TYPE REF TO if_wd_context_element,
        ls_preferred_channel      TYPE if_vw_personaldata=>element_preferred_channel,
        lv_address_channel_init   TYPE rcf_comm_channel.

  DATA: lo_node_region             TYPE REF TO if_wd_context_node,
        lo_node_region_attributes  TYPE REF TO if_wd_context_node,
        ls_field_name              TYPE rcf_s_mdl_uis_fieldname,
        lt_field_name              TYPE rcf_t_mdl_uis_fieldname,
        lt_messages                TYPE bapirettab.

  DATA: ls_return                  TYPE bapiret2,
        lv_message                 TYPE string.

* note: an address is valid if it consists of a country;
*       at least one addess has to be maintained (-> BUPA requirement)

* get addresses
  lo_node_address = wd_context->get_child_node( name = if_vw_personaldata=>wdctx_address ).
  lt_elem_address = lo_node_address->get_elements( ).

* get preferred address channel
  lo_node_preferred_channel = wd_context->get_child_node( name = if_vw_personaldata=>wdctx_preferred_channel ).
  lo_elem_preferred_channel = lo_node_preferred_channel->get_element(  ).
  lo_elem_preferred_channel->get_static_attributes(
    IMPORTING
      static_attributes = ls_preferred_channel ).

* check addresses
  LOOP AT lt_elem_address INTO lo_elem_address.

    CLEAR: ls_address,
           ls_address_check.

    lo_elem_address->get_static_attributes( IMPORTING static_attributes = ls_address ).

*   country changed? -> update regions
    IF ls_address-country NE ls_address-old_country.

      lo_node_region = lo_elem_address->get_child_node( name = if_vw_personaldata=>wdctx_region_values ).

      wd_comp_controller->load_regions(
        io_node           = lo_node_region
        io_parent_element = lo_elem_address ).

      lo_node_region_attributes = lo_elem_address->get_child_node( name = if_vw_personaldata=>wdctx_region_attributes ).

      wd_comp_controller->set_region_attributes(
        io_node           = lo_node_region_attributes
        io_parent_element = lo_elem_address ).

      ls_address-old_country = ls_address-country.
      CLEAR ls_address-region.

      lo_elem_address->set_static_attributes(
        EXPORTING
          static_attributes = ls_address ).

    ENDIF.

    ls_address_check = ls_address.
    CLEAR: ls_address_check-channel,
           ls_address_check-channel_description,
           ls_address_check-old_country.

*   a country needs to be maintained for an address
    IF ( ls_address_check IS NOT INITIAL ) AND
       ( ls_address-country IS INITIAL ).

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'AM'
          number = '216'
        IMPORTING
          return = ls_return.

      lv_message = ls_return-message.
      wd_comp_controller->go_message_manager->report_attribute_error_message(
        EXPORTING
          message_text   = lv_message
          element        = lo_elem_address
          attribute_name = 'COUNTRY' ).

      wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).

      CONTINUE.

    ENDIF.

*   count addresses
    IF ls_address-country IS NOT INITIAL.
      lv_address_count = lv_address_count + 1.
    ENDIF.

    CLEAR: lo_elem_address.

  ENDLOOP.

* note 1086850
** no address maintained, so report message
*  IF ( lv_address_count EQ 0 ).
*
*    wd_comp_controller->go_message_manager->report_t100_message(
*      EXPORTING
*        msgid = 'HRRCF_WD_UI'
*        msgno = '016'
*        msgty = 'E'   ).
*
*    wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).
*
*  ENDIF.

* get all addresses as table for further processing
  lo_node_address->get_static_attributes_table(
    IMPORTING
      table  = lt_addresses ).

* check preferred address channel which is initial
  IF ( ls_preferred_channel-address_channel_visible EQ abap_true ) AND
     ( ls_preferred_channel-address_channel EQ lv_address_channel_init ).

*   only one address maintained, so fill preferred address channel
    IF lv_address_count EQ 1.

      LOOP AT lt_addresses INTO ls_address.

        IF ls_address-country IS NOT INITIAL.

          lo_elem_preferred_channel->set_attribute(
            EXPORTING
              value = ls_address-channel
              name  = 'ADDRESS_CHANNEL' ).

          EXIT.

        ENDIF.

        CLEAR: ls_address.

      ENDLOOP.

*   several addresses maintained, so report message
    ELSEIF lv_address_count GT 1.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = 'HRRCF0002'
          number = '021'
        IMPORTING
          return = ls_return.

      lv_message = ls_return-message.
      wd_comp_controller->go_message_manager->report_attribute_error_message(
        EXPORTING
          message_text   = lv_message
          element        = lo_elem_preferred_channel
          attribute_name = 'ADDRESS_CHANNEL' ).

      wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).

    ENDIF.

* check preferred address channel which is not initial
  ELSEIF ( ls_preferred_channel-address_channel_visible EQ abap_true ) AND
         ( ls_preferred_channel-address_channel NE lv_address_channel_init ).

*   no address maintained, so delete preferred address channel
    IF lv_address_count EQ 0.

      lo_elem_preferred_channel->set_attribute(
        EXPORTING
          value = lv_address_channel_init
          name  = 'ADDRESS_CHANNEL' ).

*   only one address maintained, so change preferred address channel
    ELSEIF lv_address_count EQ 1.

      LOOP AT lt_addresses INTO ls_address.

        IF ls_address-country IS NOT INITIAL.

          lo_elem_preferred_channel->set_attribute(
            EXPORTING
              value = ls_address-channel
              name  = 'ADDRESS_CHANNEL' ).

          EXIT.

        ENDIF.

        CLEAR: ls_address.

      ENDLOOP.

*   several addresses maintained, so check if selected preferred address channel is valid
    ELSEIF lv_address_count GT 1.

      READ TABLE lt_addresses WITH KEY channel = ls_preferred_channel-address_channel INTO ls_address.

      CLEAR: ls_address-channel,
             ls_address-channel_description,
             ls_address-old_country.

*     selected preferred address channel is not valid, so report message
      IF ls_address IS INITIAL.

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING
            type   = 'E'
            cl     = 'HRRCF0002'
            number = '021'
          IMPORTING
            return = ls_return.

        lv_message = ls_return-message.
        wd_comp_controller->go_message_manager->report_attribute_error_message(
          EXPORTING
            message_text   = lv_message
            element        = lo_elem_preferred_channel
            attribute_name = 'ADDRESS_CHANNEL' ).

        wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).

      ENDIF.

    ENDIF.

  ENDIF.

ENDMETHOD.

method check_comm_data .

  data: lo_node_phone               type ref to if_wd_context_node,
        lt_phone_numbers            type if_vw_personaldata=>elements_phone,
        ls_phone_number             type if_vw_personaldata=>element_phone,
        lv_phone_count              type i.

  data: lo_node_preferred_channel   type ref to if_wd_context_node,
        lo_elem_preferred_channel   type ref to if_wd_context_element,
        ls_preferred_channel        type if_vw_personaldata=>element_preferred_channel,
        lv_phone_channel_init       type rcf_comm_channel.

  data: ls_return                   type bapiret2,
        lv_message                  type string.

* get phone numbers
  lo_node_phone = wd_context->get_child_node( name = if_vw_personaldata=>wdctx_phone ).
  lo_node_phone->get_static_attributes_table(
    importing
      table  = lt_phone_numbers ).

* get preferred phone channel
  lo_node_preferred_channel = wd_context->get_child_node( name = if_vw_personaldata=>wdctx_preferred_channel ).
  lo_elem_preferred_channel = lo_node_preferred_channel->get_element(  ).
  lo_elem_preferred_channel->get_static_attributes(
    importing
      static_attributes = ls_preferred_channel ).

  if ls_preferred_channel-phone_channel_visible eq abap_true.

*   get number of phone numbers
    loop at lt_phone_numbers into ls_phone_number.

      if ls_phone_number-telephone is not initial.
        lv_phone_count = lv_phone_count + 1.
      endif.

      clear: ls_phone_number.

    endloop.

*   check preferred phone channel which is initial
    if ls_preferred_channel-phone_channel eq lv_phone_channel_init.

*     only one phone number maintained, so fill preferred phone channel
      if lv_phone_count eq 1.

        loop at lt_phone_numbers into ls_phone_number.

          if ls_phone_number-telephone is not initial.

            lo_elem_preferred_channel->set_attribute(
              exporting
                value = ls_phone_number-channel
                name  = 'PHONE_CHANNEL' ).

            exit.

          endif.

          clear: ls_phone_number.

        endloop.

*     several phone numbers maintained, so report message
      elseif lv_phone_count gt 1.

        call function 'BALW_BAPIRETURN_GET2'
          exporting
            type   = 'E'
            cl     = 'HRRCF0002'
            number = '020'
          importing
            return = ls_return.

        lv_message = ls_return-message.
        wd_comp_controller->go_message_manager->report_attribute_error_message(
          exporting
            message_text   = lv_message
            element        = lo_elem_preferred_channel
            attribute_name = 'PHONE_CHANNEL' ).

        wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).

      endif.

*   check preferred phone channel which is not initial
    elseif ls_preferred_channel-phone_channel ne lv_phone_channel_init.

*     no phone number maintained, so delete preferred phone channel
      if lv_phone_count eq 0.

        lo_elem_preferred_channel->set_attribute(
          exporting
            value = lv_phone_channel_init
            name  = 'PHONE_CHANNEL' ).

*     only one phone number maintained, so change preferred phone channel
      elseif lv_phone_count eq 1.

        loop at lt_phone_numbers into ls_phone_number.

          if ls_phone_number-telephone is not initial.

            lo_elem_preferred_channel->set_attribute(
              exporting
                value = ls_phone_number-channel
                name  = 'PHONE_CHANNEL' ).

            exit.

          endif.

          clear: ls_phone_number.

        endloop.

*     several phone numbers maintained, so check if selected preferred phone channel is valid
      elseif lv_phone_count gt 1.

        read table lt_phone_numbers with key channel = ls_preferred_channel-phone_channel into ls_phone_number.

*       selected preferred phone channel is not valid, so report message
        if ls_phone_number-telephone is initial.

          call function 'BALW_BAPIRETURN_GET2'
            exporting
              type   = 'E'
              cl     = 'HRRCF0002'
              number = '020'
            importing
              return = ls_return.

          lv_message = ls_return-message.
          wd_comp_controller->go_message_manager->report_attribute_error_message(
            exporting
              message_text   = lv_message
              element        = lo_elem_preferred_channel
              attribute_name = 'PHONE_CHANNEL' ).

          wd_comp_controller->set_navigation_forbidden( iv_nav_forbidden = abap_true ).

        endif.

      endif.

    endif.

  endif.

endmethod.

method check_foa_sex .

  data: lo_node_personaldata      type ref to if_wd_context_node,
        lo_elem_personaldata      type ref to if_wd_context_element,
        ls_pers_data              type rcf_s_mdl_cand_personal_data.

  lo_node_personaldata = wd_context->get_child_node( name = wd_this->wdctx_personaldata ).
  lo_elem_personaldata = lo_node_personaldata->get_element( ).

* get form of address
  lo_elem_personaldata->get_static_attributes(
    importing
      static_attributes = ls_pers_data ).

  if ls_pers_data-formofaddress is not initial.

*   get sex for selected form of address
    wd_comp_controller->retrieve_foa_sex(
     exporting
       iv_formofaddress = ls_pers_data-formofaddress
     changing
       cv_sex           = ls_pers_data-sex ).

    if ls_pers_data-sex is not initial.

*     update sex
      lo_elem_personaldata->set_attribute(
        exporting
          name  = `SEX`
          value = ls_pers_data-sex ).

    endif.

  endif.

endmethod.

method check_ireferences .

  data: lo_nd_ireferences       type ref to if_wd_context_node,
        lo_el_ireferences       type ref to if_wd_context_element,
        lo_nd_ui                type ref to if_wd_context_node,
        lt_context_elements     type wdr_context_element_set,
        ls_ireferences          type wd_this->element_ireferences,
        lv_message              type string,
        lv_no_of_char_in_fields type wd_this->element_ui-no_of_char_in_fields,
        lv_length               type i.

  clear: rv_error_occurred.

  lo_nd_ui = wd_context->get_child_node( name = wd_this->wdctx_ui ).
  lo_nd_ui->get_attribute(
    exporting
      name =  `NO_OF_CHAR_IN_FIELDS`
    importing
      value = lv_no_of_char_in_fields ).

  lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
  lo_nd_ireferences->get_elements(
    receiving
      set  = lt_context_elements ).

  loop at lt_context_elements into lo_el_ireferences.

    clear: ls_ireferences,
           lv_length.

    lo_el_ireferences->get_static_attributes(
      importing
        static_attributes = ls_ireferences ).

    condense ls_ireferences-internet_ref_url_txt.

    if ls_ireferences-description_txt co space.
      condense ls_ireferences-description_txt.
    endif.

    lv_length = strlen( ls_ireferences-description_txt ).

*   the candidate has to specify a URL category
    if ( ls_ireferences-url_category is initial                                    ) and
       ( ( ls_ireferences-internet_ref_url_txt is not initial and
           ls_ireferences-internet_ref_url_txt ne wd_assist->gc_default_link ) or
         ( ls_ireferences-description_txt is not initial                     )    ).

      message e028(hrrcf_wd_ui) into lv_message.

      wd_comp_controller->go_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_ireferences
          attribute_name = 'URL_CATEGORY' ).

      rv_error_occurred = abap_true.

*   the candidate has to enter a URL
    elseif ( ls_ireferences-internet_ref_url_txt is initial or
             ls_ireferences-internet_ref_url_txt eq wd_assist->gc_default_link ) and
           ( ls_ireferences-url_category is not initial or
             ls_ireferences-description_txt is not initial                     ).

      message e029(hrrcf_wd_ui) into lv_message.

      wd_comp_controller->go_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_ireferences
          attribute_name = 'INTERNET_REF_URL_TXT' ).

      rv_error_occurred = abap_true.

*   the description text must not be longer than the specified max. number of characters
    elseif lv_no_of_char_in_fields is not initial and
           lv_length gt lv_no_of_char_in_fields.

      message e041(hrrcf_wd_ui) into lv_message with lv_no_of_char_in_fields lv_length.

      wd_comp_controller->go_message_manager->report_attribute_error_message(
        exporting
          message_text   = lv_message
          element        = lo_el_ireferences
          attribute_name = 'DESCRIPTION_TXT' ).

      rv_error_occurred = abap_true.

    endif.

  endloop.

endmethod.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

method onactionadd_ireference .

  data: lo_nd_ireferences         type ref to if_wd_context_node,
        lo_new_context_elem       type ref to if_wd_context_element,
        lo_nd_ui                  type ref to if_wd_context_node,
        ls_ireferences            type wd_this->element_ireferences,
        lv_index                  type i,
        lv_message                type string,
        lv_no_of_char_in_fields   type wd_this->element_ui-no_of_char_in_fields,
        lv_length                 type i.

  lo_nd_ui = wd_context->get_child_node( name = wd_this->wdctx_ui ).
  lo_nd_ui->get_attribute(
    exporting
      name =  `NO_OF_CHAR_IN_FIELDS`
    importing
      value = lv_no_of_char_in_fields ).

  context_element->get_static_attributes(
    importing
      static_attributes = ls_ireferences ).

  condense ls_ireferences-internet_ref_url_txt.

  if ls_ireferences-description_txt co space.
    condense ls_ireferences-description_txt.
  endif.

  lv_length = strlen( ls_ireferences-description_txt ).

  if ls_ireferences-url_category is initial.

    message e028(hrrcf_wd_ui) into lv_message.

    wd_comp_controller->go_message_manager->report_attribute_error_message(
      exporting
        message_text   = lv_message
        element        = context_element
        attribute_name = 'URL_CATEGORY' ).

  elseif ls_ireferences-internet_ref_url_txt is initial or
         ls_ireferences-internet_ref_url_txt eq wd_assist->gc_default_link.

    message e029(hrrcf_wd_ui) into lv_message.

    wd_comp_controller->go_message_manager->report_attribute_error_message(
      exporting
        message_text   = lv_message
        element        = context_element
        attribute_name = 'INTERNET_REF_URL_TXT' ).

  elseif lv_no_of_char_in_fields is not initial and
         lv_length gt lv_no_of_char_in_fields.

    message e041(hrrcf_wd_ui) into lv_message with lv_no_of_char_in_fields lv_length.

    wd_comp_controller->go_message_manager->report_attribute_error_message(
      exporting
        message_text   = lv_message
        element        = context_element
        attribute_name = 'DESCRIPTION_TXT' ).

  else.

    clear ls_ireferences.

    ls_ireferences-internet_ref_url_txt = wd_assist->gc_default_link.

    lv_index = context_element->get_index( ).
    lv_index = lv_index + 1.

    lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
    lo_new_context_elem = lo_nd_ireferences->create_element( ).
    lo_new_context_elem->set_static_attributes(
      exporting
        static_attributes = ls_ireferences ).
    lo_nd_ireferences->bind_element(
      exporting
        new_item             = lo_new_context_elem
        set_initial_elements = abap_false
        index                = lv_index ).

  endif.

endmethod.

METHOD onactioncountry_selected . "#EC NEEDED
*--> implementation in method check_addresses
ENDMETHOD.

method onactiondelete_ireference .

  data: lo_nd_ireferences type ref to if_wd_context_node,
        ls_ireferences    type wd_this->element_ireferences,
        lv_nof_elements   type i.

  lo_nd_ireferences = wd_context->get_child_node( name = wd_this->wdctx_ireferences ).
  lv_nof_elements = lo_nd_ireferences->get_element_count( ).

* delete the internet reference entry
  if lv_nof_elements gt 1.

    lo_nd_ireferences->remove_element(
      exporting
        element          = context_element ).

* reset the internet reference entry if it is the last one
  else.

    ls_ireferences-internet_ref_url_txt = wd_assist->gc_default_link.

    context_element->set_static_attributes(
       static_attributes = ls_ireferences ).

  endif.

endmethod.

method onactionfoa_selected .

  wd_this->check_foa_sex( ).

endmethod.

method onactionsex_selected .

  wd_this->check_foa_sex( ).

endmethod.

method onactionurl_entered .

  data: lv_test_link_visible        type wd_this->element_ireferences-test_link_visible,
        lv_internet_ref_url_txt     type wd_this->element_ireferences-internet_ref_url_txt.

  context_element->get_attribute(
    exporting
      name  = 'INTERNET_REF_URL_TXT'
    importing
      value = lv_internet_ref_url_txt ).

  condense lv_internet_ref_url_txt.

  if lv_internet_ref_url_txt is not initial                and
     lv_internet_ref_url_txt ne wd_assist->gc_default_link.
    lv_test_link_visible = abap_true.
  else.
    lv_test_link_visible = abap_false.
  endif.

  context_element->set_attribute(
    exporting
      value = lv_test_link_visible
      name  = 'TEST_LINK_VISIBLE' ).

endmethod.

endclass.
 