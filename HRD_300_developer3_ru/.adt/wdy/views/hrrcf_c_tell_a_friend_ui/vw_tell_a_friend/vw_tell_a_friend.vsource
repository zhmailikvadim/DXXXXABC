*=====================================================================*
* Intf.: if_vw_tell_a_friend  
* Purp.: programming interface for the application class of this
*        controller only
*        controller:  <VW_TELL_A_FRIEND> of
*        component:   <hrrcf_c_tell_a_friend_ui>
* UDate: 20240723 161431
*=====================================================================*
interface if_vw_tell_a_friend.
 
* +-------------------------------------------------------------------+
* |  context type definitions                                         |
* +-------------------------------------------------------------------+

  constants:
    wdctx_context type string value `CONTEXT`.
  constants:
    wdctx_enable_name type string value `ENABLE_NAME`.
  types:
    begin of Element_enable_name,
      ENABLE_F_NAME  type WDY_BOOLEAN,
      ENABLE_L_NAME  type WDY_BOOLEAN,
      VISIBILTY_SENDCOPY  type WDY_BOOLEAN,
    end of Element_enable_name,  "#EC NEEDED
    Elements_enable_name type 
       standard table of Element_enable_name
       with default key. "#EC NEEDED
  constants:
    wdctx_tell_a_friend type string value `TELL_A_FRIEND`.
  types:
    begin of Element_tell_a_friend,
      RECIPIENT_NAME  type STRING,
      RECIPIENT_MAIL  type AD_SMTPADR,
      MESSAGE  type TEXT255,
      SENDER_NAME  type STRING,
      RECIPIENT_FIRST_NAME  type STRING,
      SENDER_FIRST_NAME  type STRING,
      IS_SEND_MAILCOPY  type WDY_BOOLEAN,
      DIRECT_LINK_TO_POSTING  type STRING,
      MAILTO_LINK_TO_POSTING  type STRING,
    end of Element_tell_a_friend,  "#EC NEEDED
    Elements_tell_a_friend type 
       standard table of Element_tell_a_friend
       with default key. "#EC NEEDED
  methods RESET_DATA  ."#EC NEEDED
  methods RETRIEVE_POPUP_REF  ."#EC NEEDED
********
* @Returns:  controller runtime interface
********
  methods wd_get_api
    returning
      value(Result) type ref to IF_WD_VIEW_CONTROLLER. "#EC NEEDED
 
 
********
* @Purpose:  creates an action during runtime
********
   methods wd_create_action
     importing
       Event_Handler   type String
       Is_Validating   type Wdy_Boolean default ''
       Command         type String
       Text_Key        type String
     returning
       value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  action getters                                                   |
* +-------------------------------------------------------------------+

  methods Get_close_click_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_reset_click_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
  methods Get_send_click_Act
    returning
      value(Result) type ref to If_Wd_Action.    "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  component & controller usages                                    |
* +-------------------------------------------------------------------+

**********
* @Returns:  controller <componentcontroller>
*            of usage   <454fvgz28f5df9tkdqexb9mfy>
**********
  methods  get_componentcontroller_ctr
    returning
      value(Result) type ref to ig_componentcontroller. "#EC NEEDED
 
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONCLOSE_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONRESET_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONSEND_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

* +-------------------------------------------------------------------+
* |  application properties                                           |
* +-------------------------------------------------------------------+

  data: 
    WD_ASSIST  type ref to Cl_Hrrcf_M_Tell_A_Friend.
endinterface.
*=====================================================================*
* Class: CL_VW_TELL_A_FRIEND_Ctr
* Purp.: definitions for application defined methods of controller
*        VW_TELL_A_FRIEND (VIEW)
* UDate: 20240723 161431
*=====================================================================*
class CL_VW_TELL_A_FRIEND_Ctr definition final.
*****************
  public section.
*****************
  interfaces:
    _IF_WDR_Tag_As_Application.
  methods Constructor
    importing
      Wd_This    type ref to IF_VW_TELL_A_FRIEND
      Wd_Context type ref to If_Wd_Context_Node
      Wd_Assist  type ref to cl_hrrcf_m_tell_a_friend.
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

  methods WDDOAFTERACTION  ."#EC NEEDED
  methods WDDOBEFOREACTION  ."#EC NEEDED
  methods WDDOEXIT  ."#EC NEEDED
  methods WDDOINIT  ."#EC NEEDED
  methods WDDOMODIFYVIEW
    importing
      FIRST_TIME  type Wdy_Boolean 
      VIEW  type ref to If_Wd_View   ."#EC NEEDED
  methods WDDOONCONTEXTMENU
    importing
      CONTEXT_MENU_EVENT  type ref to If_Wd_Context_Menu_Event 
      CONTEXT_MENU_MANAGER  type ref to If_Wd_Context_Menu_Manager 
    returning
      value(MENU)  type ref to Cl_Wd_Menu  ."#EC NEEDED
  methods RESET_DATA  ."#EC NEEDED
  methods RETRIEVE_POPUP_REF  ."#EC NEEDED
* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

  methods ONACTIONCLOSE_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONRESET_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event 
    returning
      value(RESULT)  type ref to If_Wd_Action  ."#EC NEEDED
  methods ONACTIONSEND_CLICK
    importing
      wdevent  type REF TO cl_wd_custom_event   ."#EC NEEDED
******************
  private section.
******************
* +-------------------------------------------------------------------+
* |  framework properties                                             |
* +-------------------------------------------------------------------+

  data:
    wd_This             type ref to IF_VW_TELL_A_FRIEND,            "#EC NEEDED
    wd_Context          type ref to If_Wd_Context_Node,     "#EC NEEDED
    wd_Comp_Controller  type ref to Ig_ComponentController. "#EC NEEDED
 
  data: 
    wd_Assist type ref to cl_hrrcf_m_tell_a_friend. "#EC NEEDED
 
endclass.
*=====================================================================*
* Class: CL_VW_TELL_A_FRIEND_Ctr 
* Purp.: explicit definitions derived from application coding
*        <VW_TELL_A_FRIEND> (VIEW)
* Notes: NOT intended for use outside of framework driven calls !!
* UDate: 20240723 161431
*=====================================================================*
class CL_VW_TELL_A_FRIEND_Ctr implementation.
 
*=======================
method 
Constructor. "#EC NEEDED
*=======================
" Do NOT modify the Constructor, any changes will not be saved !
 
  Me->Wd_This =    Wd_This.
  Me->Wd_Context = Wd_Context.
  Me->Wd_Comp_Controller = Wd_This->get_ComponentController_Ctr( ).
  Me->Wd_Assist =    Wd_Assist.
endmethod.
 
* +-------------------------------------------------------------------+
* |  general methods                                                  |
* +-------------------------------------------------------------------+

method WDDOAFTERACTION . "#EC NEEDED
endmethod.

METHOD wddobeforeaction .
   DATA:   lo_view_controller   TYPE REF TO if_wd_view_controller,
          lt_messages          TYPE cl_wd_dynamic_tool=>t_check_result_message_tab .


  lo_view_controller = wd_this->wd_get_api( ).
  IF lo_view_controller->is_current_action_validating( ) = abap_true.

* check for mandatory fields

    CALL METHOD cl_wd_dynamic_tool=>check_mandatory_attr_on_view
      EXPORTING
        view_controller  = lo_view_controller
        display_messages = abap_true
      IMPORTING
        messages         = lt_messages.

    IF lt_messages IS NOT INITIAL.

* Errornous situation -> notify component about issues with mandatory fields

    ENDIF.

  ENDIF.
ENDMETHOD.

method WDDOEXIT . "#EC NEEDED
endmethod.

METHOD wddoinit .

  DATA api                                 TYPE REF TO if_wd_view_controller.
  DATA lr_popup                               TYPE REF TO if_wd_window.
  DATA lv_send_btn_text                    TYPE string.
  DATA lv_reset_btn_text                   TYPE string.
  DATA lv_close_btn_text                   TYPE string.
  DATA lv_send_btn_tt_text                 TYPE string.
  DATA lv_reset_btn_tt_text                TYPE string.
  DATA lv_close_btn_tt_text                TYPE string.

**********************************************************************

* retrieve lr_popup reference
  wd_this->retrieve_popup_ref( ).

* reset all data on lr_popup window
  wd_this->reset_data( ).
**********************************************
IF wd_comp_controller->GS_CAND_PERSONAL_DATA IS NOT INITIAL.

    DATA lo_nd_enable_name TYPE REF TO if_wd_context_node.

    DATA lo_el_enable_name TYPE REF TO if_wd_context_element.

*   navigate from <CONTEXT> to <ENABLE_NAME> via lead selection
    lo_nd_enable_name = wd_context->get_child_node( name = wd_this->wdctx_enable_name ).

*   get element via lead selection
    lo_el_enable_name = lo_nd_enable_name->get_element( ).

    lo_el_enable_name->set_attribute( name =  `ENABLE_F_NAME` value = ' ' ).
    lo_el_enable_name->set_attribute( name =  `ENABLE_L_NAME` value = ' ' ).
    lo_el_enable_name->set_attribute( name =  `VISIBILTY_SENDCOPY` value = 'X' ).

ENDIF.
**********************************************
* get texts for button labels from OTR
  lv_send_btn_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/SEND' ).
  lv_reset_btn_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/RESET' ).
  lv_close_btn_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/CLOSE' ).

  lv_send_btn_tt_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/SEND_TOOLTIP' ).
  lv_reset_btn_tt_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/RESET_TOOLTIP' ).
  lv_close_btn_tt_text = cl_wd_utilities=>get_otr_text_by_alias( 'PAOC_RCF_UI_SELF_SERVICES/CLOSE_TOOLTIP' ).

**********************************************
* Subscribe to lr_popup-Event  NEW
**********************************************
* get window controller and popup ref
  api = wd_this->wd_get_api( ).
  lr_popup = wd_comp_controller->mr_popup_window.

* subscribe to event
  IF lr_popup IS BOUND.
    lr_popup->subscribe_to_button_event(
    button = if_wd_window=>co_button_yes
    button_text = lv_send_btn_text
    action_name = 'SEND_CLICK'
    tooltip = lv_send_btn_tt_text
    action_view = api
    is_default_button = abap_true ).

    lr_popup->subscribe_to_button_event(
    button = if_wd_window=>co_button_no
    button_text = lv_reset_btn_text
    action_name = 'RESET_CLICK'
    tooltip = lv_reset_btn_tt_text
    action_view = api
    is_default_button = abap_false ).

    lr_popup->subscribe_to_button_event(
    button = if_wd_window=>co_button_cancel
    button_text = lv_close_btn_text
    action_name = 'CLOSE_CLICK'
    tooltip = lv_close_btn_tt_text
    action_view = api
    is_default_button = abap_false ).
  ENDIF.

ENDMETHOD.

METHOD wddomodifyview .

  DATA lr_view_el TYPE REF TO if_wd_view_element.

  IF first_time EQ abap_true.
    CALL METHOD view->get_element
      EXPORTING
        id      = 'INP_RECEIVER_FIRST_NAME'
      RECEIVING
        element = lr_view_el.

    CALL METHOD view->request_focus_on_view_elem
      EXPORTING
        view_element = lr_view_el.
  ENDIF.

ENDMETHOD.

method WDDOONCONTEXTMENU . "#EC NEEDED
endmethod.

METHOD reset_data .

  DATA lo_nd_tell_a_friend            TYPE REF TO if_wd_context_node.

  wd_comp_controller->go_message_manager->clear_messages( abap_true ).

  lo_nd_tell_a_friend = wd_context->get_child_node( name = wd_this->wdctx_tell_a_friend ).
  lo_nd_tell_a_friend->invalidate( ).
****
IF wd_comp_controller->GS_CAND_PERSONAL_DATA IS NOT INITIAL.

DATA lo_el_tell_a_friend TYPE REF TO if_wd_context_element.

* get element via lead selection
 lo_el_tell_a_friend = lo_nd_tell_a_friend->get_element( ).

  CALL METHOD LO_EL_TELL_A_FRIEND->SET_ATTRIBUTE
    EXPORTING
      VALUE = wd_comp_controller->GS_CAND_PERSONAL_DATA-FIRSTNAME
      NAME  = `SENDER_FIRST_NAME`.

  CALL METHOD LO_EL_TELL_A_FRIEND->SET_ATTRIBUTE
    EXPORTING
      VALUE = wd_comp_controller->GS_CAND_PERSONAL_DATA-LASTNAME
      NAME  = 'SENDER_NAME'.

ENDIF.
***
ENDMETHOD.

METHOD retrieve_popup_ref .

  DATA api                                 TYPE REF TO if_wd_view_controller.
  DATA window_ctlr                         TYPE REF TO if_wd_window_controller.
  DATA lr_popup                            TYPE REF TO if_wd_window.
**********************************************************************

* get window controller
  api = wd_this->wd_get_api( ).
  window_ctlr = api->get_embedding_window_ctlr( ).
* subscribe
  IF window_ctlr IS BOUND.
    lr_popup = window_ctlr->get_window( ).
    IF lr_popup IS BOUND.
      wd_comp_controller->mr_popup_window = lr_popup.
    ENDIF.
  ENDIF.

ENDMETHOD.

* +-------------------------------------------------------------------+
* |  event handlers                                                   |
* +-------------------------------------------------------------------+

METHOD onactionclose_click .

  wd_comp_controller->mr_popup_window->close( ).

ENDMETHOD.

method ONACTIONRESET_CLICK .

  wd_this->reset_data( ).
  wd_comp_controller->go_message_manager->clear_messages( abap_true ).

endmethod.

METHOD onactionsend_click .

  DATA lo_nd_tell_a_friend                TYPE REF TO if_wd_context_node.
  DATA mail_properties                    TYPE if_vw_tell_a_friend=>element_tell_a_friend.
  DATA l_view_controller                  TYPE REF TO if_wd_view_controller.
  DATA lv_is_error                        TYPE wdy_boolean.
  DATA messages                           TYPE bapirettab.
  DATA lv_recipient_full_name             TYPE string.
  DATA lv_sender_full_name                TYPE string.
  DATA mail_message                       TYPE string.
  DATA lv_recipient_name                  TYPE string.
  DATA ls_return                         TYPE bapiret2.
  DATA lt_messages                        TYPE bapirettab.
  DATA lo_message_manager                 TYPE REF TO if_wd_message_manager.
  DATA lv_message                         TYPE string.
  DATA lo_context_element                 TYPE REF TO if_wd_context_element.
  DATA lv_attribute                       TYPE string.
********************************************************************************

* init
  lv_is_error = abap_false.
  wd_comp_controller->go_message_manager->clear_messages( abap_true ).

* check mandatory fields
  l_view_controller = wd_this->wd_get_api( ).
  cl_wd_dynamic_tool=>check_mandatory_attr_on_view( view_controller = l_view_controller ).
  lo_message_manager = l_view_controller->get_message_manager( ).

* get mail properties
  lo_nd_tell_a_friend = wd_context->get_child_node( name = wd_this->wdctx_tell_a_friend ).
  lo_nd_tell_a_friend->get_static_attributes(
    EXPORTING
      index = 1
    IMPORTING
      static_attributes = mail_properties ).

  lv_recipient_name = mail_properties-recipient_name.
CONDENSE lv_recipient_name.

IF lv_recipient_name IS INITIAL.

  MESSAGE e125(HRRCF0002) INTO lv_message.

  lo_context_element = wd_context->path_get_element(
      path                          = 'TELL_A_FRIEND'
  ).
  lv_attribute = 'RECIPIENT_NAME'.
  lo_message_manager->report_attribute_error_message(
    EXPORTING
      message_text              = lv_message
      element                   = lo_context_element
      attribute_name            = lv_attribute
  ).
  lv_is_error = 'X'.
ENDIF.
* Check mail format
  CALL METHOD cl_hrrcf_candidate_bupa_bl=>check_email_format
    EXPORTING
      p_email = mail_properties-recipient_mail
    IMPORTING
      return  = messages.
  APPEND LINES OF messages to lt_messages.
  READ TABLE lt_messages INTO ls_return INDEX 1.
  IF ls_return IS NOT INITIAL AND
     ls_return-type = 'E'.
  CLEAR lv_message.
  MESSAGE ID ls_return-id TYPE ls_return-type NUMBER ls_return-number
    WITH ls_return-message_v1 ls_return-message_v2 ls_return-message_v3 ls_return-message_v4
      INTO lv_message.

  lv_attribute = 'RECIPIENT_MAIL'.
  lo_message_manager->report_attribute_error_message(
    EXPORTING
      message_text              = lv_message
      element                   = lo_context_element
      attribute_name            = lv_attribute
  ).
  lv_is_error = 'X'.
  ENDIF.
** chekc error messages
*  CALL METHOD cl_hrrcf_wd_services=>check_return_messages
*    EXPORTING
*      it_messages        = lt_messages
**      io_message_manager = wd_comp_controller->go_message_manager
*      io_message_manager = lo_message_manager
*    RECEIVING
*      rv_error_indicator = lv_is_error.
  IF lv_is_error EQ 'X'.
    RETURN.
  ENDIF.

**********************************************************************
* send mail to recipient
**********************************************************************

* get sender und recipient full names
  IF mail_properties-recipient_first_name IS NOT INITIAL.
    CONCATENATE mail_properties-recipient_first_name mail_properties-recipient_name INTO lv_recipient_full_name SEPARATED BY space.
  ELSE.
    lv_recipient_full_name = mail_properties-recipient_name.
  ENDIF.
  IF mail_properties-sender_first_name IS NOT INITIAL.
    CONCATENATE mail_properties-sender_first_name mail_properties-sender_name INTO lv_sender_full_name SEPARATED BY space.
  ELSE.
    lv_sender_full_name = mail_properties-sender_name.
  ENDIF.
 mail_message = mail_properties-message.
  wd_comp_controller->sc_send_to_a_friend(
      EXPORTING
        recipient_full_name =             lv_recipient_full_name
        recipient_mail =                  mail_properties-recipient_mail
        sender_full_name =                lv_sender_full_name
        sender_message =                  mail_message
    ).

*******************************************************
  IF mail_properties-IS_SEND_MAILCOPY IS NOT INITIAL.

   wd_comp_controller->sc_send_to_a_friend(
          EXPORTING
            recipient_full_name =             lv_recipient_full_name
            recipient_mail =                  wd_comp_controller->gv_sender_email
            sender_full_name =                lv_sender_full_name
            sender_message =                  mail_message
        ).
  ENDIF.

* fire event
  wd_comp_controller->fire_send_event_evt(
    messages     =  wd_comp_controller->gt_messages
  ).

* close window
  wd_comp_controller->mr_popup_window->close( ).
****
ENDMETHOD.

endclass.
 