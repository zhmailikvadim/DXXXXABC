class CL_HRRCF_SIMPLE_MAIN_OBJECT definition
  public
  abstract
  create protected

  global friends CL_HRRCF_DELETE_MANAGER .

public section.
*"* public components of class CL_HRRCF_SIMPLE_MAIN_OBJECT
*"* do not include other source files here!!!

  interfaces IF_HRRCF_CONSTANTS .

  aliases DELETE_OPERATION
    for IF_HRRCF_CONSTANTS~DELETE_OPERATION .
  aliases FALSE
    for IF_HRRCF_CONSTANTS~FALSE .
  aliases HIGH_DATE
    for IF_HRRCF_CONSTANTS~HIGH_DATE .
  aliases INSERT_OPERATION
    for IF_HRRCF_CONSTANTS~INSERT_OPERATION .
  aliases LOW_DATE
    for IF_HRRCF_CONSTANTS~LOW_DATE .
  aliases MODIFY_OPERATION
    for IF_HRRCF_CONSTANTS~MODIFY_OPERATION .
  aliases MSGCL_ADMIN
    for IF_HRRCF_CONSTANTS~MSGCL_ADMIN .
  aliases MSGCL_USER
    for IF_HRRCF_CONSTANTS~MSGCL_USER .
  aliases TRUE
    for IF_HRRCF_CONSTANTS~TRUE .

  data ID type HROBJID read-only .
  data RECORDS type RCF_T_P1000 read-only .
  data HROBJECT type HROBJECT read-only .
  data NAME type STEXT read-only .
  data MY_OTEXT type OTEXT read-only .
  data CREATE_DATE type DATS read-only .
  class-data LUW_MODE type BOOLE_D read-only value SPACE. "#EC NOTEXT .
  data LOCK_OWNER type SYUNAME read-only .

  events RCF_RELATIONSHIP_CHANGED
    exporting
      value(HROBJECT) type HROBJECT .
  class-events RCF_BUFFER_REFRESH .

  methods CONSTRUCTOR
    importing
      !HROBJECT type HROBJECT
    raising
      CX_HRRCF_MAINTAIN_OBJECT .
  methods ENQUEUE
    importing
      !IV_ENQMODE type ENQMODE default 'E'
      !IV_SCOPE type DDENQSCOPE default '2'
    exporting
      !EV_COUNTER type I
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_MAINTAIN_OBJECT .
  methods DEQUEUE
    importing
      !IV_ENQMODE type ENQMODE default 'E'
      !IV_SCOPE type DDENQSCOPE default '2'
    preferred parameter IV_ENQMODE
    raising
      CX_HRRCF_MAINTAIN_OBJECT .
  methods DELETE
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF_MAINTAIN_OBJECT
      CX_HRRCF_INFOTYPE_OPERATION
      CX_HRRCF_HRKWF_STORAGE
      CX_HRRCF .
  methods CHANGE_OBJECT_NAME
    importing
      !NAME type STEXT
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  methods DELETE_REDUNDANT_TEXT_OBJECTS
  final .
  class-methods REFRESH_RCF_BUFFER .
  class-methods SET_LUW_MODE .
  class-methods CONFIRM_LUW
    importing
      !DIRECT_UPDATE type BOOLE_D default SPACE .
  class-methods RESET_LUW_MODE .
protected section.
*"* protected components of class CL_HRRCF_SIMPLE_MAIN_OBJECT
*"* do not include other source files here!!!

  methods ON_RELATIONSHIP_CHANGE
    for event RCF_RELATIONSHIP_CHANGED of CL_HRRCF_SIMPLE_MAIN_OBJECT
    importing
      !HROBJECT .
  class-methods GET_INSTANCE_FROM_DIRECTORY
    importing
      !HROBJECT type HROBJECT
    exporting
      !INSTANCE type ref to CL_HRRCF_SIMPLE_MAIN_OBJECT .
  class-methods REGISTER_INSTANCE
    importing
      !INSTANCE type ref to CL_HRRCF_SIMPLE_MAIN_OBJECT .
  methods READ_RECORDS
    raising
      CX_HRRCF_INFOTYPE_OPERATION .
  class-methods DEREGISTER_INSTANCE
    importing
      !INSTANCE type ref to CL_HRRCF_SIMPLE_MAIN_OBJECT .
  class-methods CREATE_INTERNAL
    importing
      !NAME type STEXT
      !OTYPE type OTYPE
      !CLASSNAME type SEOCLSNAME
      !COMMIT_WORK type BOOLE_D default 'X'
    exporting
      !INSTANCE type ref to CL_HRRCF_SIMPLE_MAIN_OBJECT
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
  class-methods GET_INTERNAL
    importing
      !CLASSNAME type SEOCLSNAME
      !ID type HROBJID
      !OTYPE type OTYPE
    exporting
      !INSTANCE type ref to CL_HRRCF_SIMPLE_MAIN_OBJECT
    raising
      CX_HRRCF .
  methods GET_RELATIONSHIP
    importing
      !RELAT type RELAT
    exporting
      !RELATIONSHIP_TABLE type ANY .
  methods REGISTER_RELATIONSHIP
    importing
      !RELAT type RELAT
      !RELATIONSHIP_TABLE type ANY .
  methods ON_BUFFER_REFRESH
    for event RCF_BUFFER_REFRESH of CL_HRRCF_SIMPLE_MAIN_OBJECT .
  methods CHECK_BEFORE_DELETE
  abstract
    exporting
      !RETURN type BAPIRETTAB
    raising
      CX_HRRCF .
private section.
*"* private components of class CL_HRRCF_SIMPLE_MAIN_OBJECT
*"* do not include other source files here!!!

  class-data INSTANCE_DIRECTORY type INSTANCE_DIRECTORY .
  data RELATIONSHIP type RELATIONSHIP_DIRECTORY .

  methods ON_NEW_MAIN_OBJECT .
  methods DEREGISTER_EVENT_HANDLERS .
ENDCLASS.



CLASS CL_HRRCF_SIMPLE_MAIN_OBJECT IMPLEMENTATION.


METHOD CHANGE_OBJECT_NAME .

  DATA ls_object TYPE p1000.
  DATA lt_object TYPE TABLE OF p1000.

  DATA ls_hrobject TYPE hrobject.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = ls_object-plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

  ls_object-plvar = me->hrobject-plvar.
  ls_object-otype = me->hrobject-otype.
  ls_object-objid = me->hrobject-objid.
  ls_object-mandt = sy-mandt.
  ls_object-infty = '1000'.
  ls_object-istat = '1'.
  ls_object-langu = sy-langu.
  ls_object-begda = sy-datum.
  ls_object-endda = high_date.

  CONCATENATE me->hrobject-otype ls_object-objid INTO ls_object-short.

  IF NOT name IS INITIAL.
    ls_object-stext = name.
  ELSE.
    ls_object-stext = ls_object-short.
  ENDIF.

  TRANSLATE ls_object-short TO UPPER CASE.               "#EC TRANSLANG
  APPEND ls_object TO lt_object.

* insert object
  CALL FUNCTION 'RH_INSERT_INFTY'
    EXPORTING
      vtask               = 'D'
      authy               = space
    TABLES
      innnn               = lt_object
    EXCEPTIONS
      no_authorization    = 1
      error_during_insert = 2
      repid_form_initial  = 3
      corr_exit           = 4
      begda_greater_endda = 5
      OTHERS              = 6.
  CASE sy-subrc .

    WHEN '0' .                "Success

    WHEN '1' .

      IF 1 EQ 0.
        MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum AusfÃ¼hren dieser Funktion
      ENDIF.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = '5A'
          number = 278
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.

    WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_insert
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.

  ENDCASE .

ENDMETHOD.                    "


METHOD confirm_luw .
*
* Authors: XDP, AS
* Enhancement: XLV
* We found problems (IT5102 isn't written to DB) inside of PA30/PA40
* when we use asynchronous update (VTASK = V). We assume that the
* reason is a COMMIT WORK in the 'wrong' roll area. So we introduced
* an optional parameter to make the direct update (VTASK = D) possible.
*
  DATA lv_vtask TYPE vtask.
*
  CHECK luw_mode = true.
*
  IF direct_update EQ true.
    lv_vtask = 'D'.
  ELSE.
    lv_vtask = 'V'.
  ENDIF.
*
  CALL FUNCTION 'RHAP_SUPPR_INTE_SET'
    EXPORTING
      suppr_inte = 'X'.

  CALL FUNCTION 'RH_UPDATE_DATABASE'
    EXPORTING
      vtask      = lv_vtask
      commit_flg = space.

  CALL FUNCTION 'RHAP_SUPPR_INTE_SET'
    EXPORTING
      suppr_inte = ' '.
*
* After writing the buffer to DB we should clear it.
  CALL FUNCTION 'RH_CLEAR_BUFFER'.
  CALL FUNCTION 'RH_CLEAR_PLOG_TAB'.
*
ENDMETHOD.


METHOD constructor .

  DATA lo_exception TYPE REF TO cx_hrrcf.
  DATA message_par1 TYPE sy-msgv1.
  DATA message_par2 TYPE sy-msgv2.

  DATA ls_record TYPE p1000.

  SET HANDLER on_relationship_change FOR ALL INSTANCES.
  SET HANDLER on_buffer_refresh.

  me->hrobject = hrobject.
  me->id = hrobject-objid.

  SELECT SINGLE otext FROM t777o
               INTO my_otext
         WHERE  langu  = sy-langu
         AND    otype  = me->hrobject-otype.
  IF sy-subrc NE 0.
    SELECT SINGLE otext FROM t777o
                 INTO my_otext
           WHERE  otype  = me->hrobject-otype.          "#EC CI_GENBUFF
  ENDIF.

  TRY.

      CALL METHOD me->read_records.

      SORT me->records BY begda.

      READ TABLE me->records INTO ls_record INDEX 1.
      IF sy-subrc = 0.
        create_date = ls_record-begda.
      ENDIF.


    CATCH cx_hrrcf INTO lo_exception.
      IF 1 EQ 2.
        MESSAGE e011(hrrcf0001) WITH my_otext me->hrobject-objid.
*   &1 &2 nicht vorhanden
      ENDIF.
      message_par1 = my_otext.
      message_par2 = hrobject-objid.
      RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
        EXPORTING
          textid =
            cx_hrrcf_maintain_object=>create_failed
            previous = lo_exception
            message_type = 'E'
            message_class = 'HRRCF0001'
            message_number = '011'
            message_par1 = message_par1
            message_par2 = message_par2.

  ENDTRY.

ENDMETHOD.                    "CONSTRUCTOR


METHOD create_internal .

  DATA ls_object TYPE p1000.
  DATA lt_object TYPE TABLE OF p1000.

  DATA ls_hrobject TYPE hrobject.

  DATA lo_exception TYPE REF TO cx_hrrcf.

  DATA ls_return TYPE bapiret2.

  DATA: lv_objkey TYPE sweinstcou-objkey, "Object key
        l_event TYPE swedumevid-evtid, "Event id
        l_commit_flg TYPE hrrhap-commit_flg.

  CLEAR instance.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = ls_object-plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

  ls_object-otype = otype.

  CALL FUNCTION 'RH_GET_NEXT_NUMBER'
       EXPORTING
*           ACTION     = 'DIRECT'
            ext_number = ls_object-objid                 "#EC dom_equal
            otype      = ls_object-otype
            plvar      = ls_object-plvar
*           TEST_MODE  =
       IMPORTING
            number     = ls_object-objid                 "#EC dom_equal
       EXCEPTIONS
            invalid_action             = 1
            number_must_be_zero        = 2
            invalid_object             = 3
            no_external_interval_found = 4
            no_internal_interval_found = 5
            invalid_number             = 6
            no_more_numbers_available  = 7
            OTHERS                     = 8.
  IF NOT sy-subrc = 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
      EXPORTING
        textid =
          cx_hrrcf_maintain_object=>hr_number_range
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ENDIF.

* prepare the requisition (infotype 1000)
  ls_object-mandt = sy-mandt.
  ls_object-infty = '1000'.
  ls_object-istat = '1'.
  ls_object-langu = sy-langu.
  ls_object-begda = sy-datum.
  ls_object-endda = high_date.

  CONCATENATE otype ls_object-objid INTO ls_object-short.

  IF NOT name IS INITIAL.
    ls_object-stext = name.
  ELSE.
    ls_object-stext = ls_object-short.
  ENDIF.

  TRANSLATE ls_object-short TO UPPER CASE.               "#EC TRANSLANG
  APPEND ls_object TO lt_object.

* Added a check for external commit work.
* This flag was inserted for the call RH_INSERT_INFTY.
* Now it is possible to call this FUBA with vtask 'D' and no commit.
  IF commit_work IS INITIAL                        OR
     cl_hrrcf_simple_main_object=>luw_mode EQ true.
    l_commit_flg = space.
    CALL FUNCTION 'RHAP_SUPPR_INTE_SET'
      EXPORTING
        suppr_inte = 'X'.
  ELSE.
    l_commit_flg = 'X'.
  ENDIF.

* insert object
  CALL FUNCTION 'RH_INSERT_INFTY'
    EXPORTING
      vtask               = 'D'
      authy               = space
      commit_flg          = l_commit_flg
    TABLES
      innnn               = lt_object
    EXCEPTIONS
      no_authorization    = 1
      error_during_insert = 2
      repid_form_initial  = 3
      corr_exit           = 4
      begda_greater_endda = 5
      OTHERS              = 6.
  CASE sy-subrc .

    WHEN '0' .                "Success

    WHEN '1' .

      IF 1 EQ 0.
        MESSAGE e278(5a).
*   Sie haben keine Berechtigung zum AusfÃ¼hren dieser Funktion
      ENDIF.

      CALL FUNCTION 'BALW_BAPIRETURN_GET2'
        EXPORTING
          type   = 'E'
          cl     = '5A'
          number = 278
        IMPORTING
          return = ls_return.
      APPEND ls_return TO return.

    WHEN OTHERS .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
        EXPORTING
          textid = cx_hrrcf_infotype_operation=>error_during_insert
          message_type = sy-msgty
          message_class = sy-msgid
          message_number = sy-msgno
          message_par1 = sy-msgv1
          message_par2 = sy-msgv2
          message_par3 = sy-msgv3
          message_par4 = sy-msgv4.

  ENDCASE .
  CALL FUNCTION 'RHAP_SUPPR_INTE_SET'
    EXPORTING
      suppr_inte = ' '.

  MOVE-CORRESPONDING ls_object TO ls_hrobject.

  TRY.
* ------- New instance ----------------------------------------------*

* XDP Copy Object
      CREATE OBJECT instance
        TYPE
          (classname)
        EXPORTING
          hrobject    = ls_hrobject.

* ------- Register instance in the directory ------------------------*
* XDP Copy Object
      CALL METHOD cl_hrrcf_simple_main_object=>register_instance
        EXPORTING
          instance = instance.

* ------- Object does not exist -------------------------------------*
    CATCH cx_hrrcf INTO lo_exception.

* XDP Copy Object
      CLEAR instance.

      RAISE EXCEPTION TYPE cx_hrrcf
        EXPORTING
           previous = lo_exception.

  ENDTRY.

* ------- Trigger Workflow Event ------------------------------------*
  IF instance IS BOUND.

    CALL METHOD instance->on_new_main_object .

*Declare WF container

    swc_container lt_evt_container.

*Initialize WF container

    swc_create_container lt_evt_container.

*Fill the HR object key

    MOVE instance->hrobject TO lv_objkey.

    CALL FUNCTION 'SWE_EVENT_CREATE'
      EXPORTING
        objtype                      = 'ERC_OBJECT'
        objkey                       = lv_objkey
        event                        = 'Created'            "#EC NOTEXT
*   CREATOR                      =
*   TAKE_WORKITEM_REQUESTER      = ' '
*   START_WITH_DELAY             = ' '
*   START_RECFB_SYNCHRON         = ' '
*   NO_COMMIT_FOR_QUEUE          = ' '
*   DEBUG_FLAG                   = ' '
*   NO_LOGGING                   = ' '
*   IDENT                        =
     IMPORTING
       event_id                      = l_event
     TABLES
       event_container               = lt_evt_container
     EXCEPTIONS
       objtype_not_found             = 1
       OTHERS                        = 2
              .
    IF sy-subrc <> 0.
      TRY.
          DATA lox_hrrcf_maintain_object TYPE REF TO cx_hrrcf_maintain_object.
          RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
            EXPORTING
              textid =
                cx_hrrcf_maintain_object=>business_object_repository
              hrobject = instance->hrobject
              message_type = sy-msgty
              message_class = sy-msgid
              message_number = sy-msgno
              message_par1 = sy-msgv1
              message_par2 = sy-msgv2
              message_par3 = sy-msgv3
              message_par4 = sy-msgv4.
        CATCH cx_hrrcf_maintain_object INTO lox_hrrcf_maintain_object.
          CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
            EXPORTING
              ex = lox_hrrcf_maintain_object.
      ENDTRY.
    ENDIF.

    IF commit_work = 'X' AND
       cl_hrrcf_simple_main_object=>luw_mode EQ false.
      COMMIT WORK AND WAIT.
    ENDIF.

  ENDIF.

ENDMETHOD.


method delete .
* Delete a certain E-Recruiting object and all related infotypes
* On the data base this is done by the function module, but we also
* have to delete the entries in the directories of the classes...
* We definetly cannot ensure that related classes (infotypes) are
* consitent afterwards. They buffer records, i.e. they do not recognize
* the database change
*
* Anyway, it is strongly recommended not to delete any object within
* a stndard application scenario. Deleting objects should only
* take place in administration scenarios. And those scenarios
* have to take care about the consitency of other objects.
*

  data:
    ls_object   type          p1000,
    lt_object   type table of p1000,
    lo_exception type ref to cx_hrrcf_hrkwf_storage,
    lc_instance type ref to   cl_hrrcf_requisition,
    ls_hrobject type          hrobject,
    lt_activity_list type rcf_t_abstract_activities,
    lo_activity type ref to cl_hrrcf_abstract_activity_rec ,
    lt_return type bapirettab ,
    lo_ex type ref to cx_hrrcf_infotype_operation,
    lo_exc type ref to cx_hrrcf.

  data ls_return type bapiret2.

  clear return  . refresh return .

* Delete all documents associated with this object from KWF
  try .

      call method cl_hrrcf_hrkwf_storage=>delete_doc_by_object
        exporting
          hrobject = me->hrobject.

    catch cx_hrrcf_hrkwf_storage into lo_exception.

      raise exception type cx_hrrcf_maintain_object
        exporting
          previous = lo_exception.
  endtry .

* insert change pointer
  try.
      cl_hrrcf_spt_change_pointer=>insert_change_pointer(
        exporting
          hrobject = me->hrobject ).
    catch cx_hrrcf into lo_exc.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exc ).
  endtry.

* Delete all activity records associated with this object
  try.
      call method cl_hrrcf_activity_factory=>get_activities_by_hrobject
        exporting
          hrobject      = me->hrobject
        importing
          activity_list = lt_activity_list.

      if lt_activity_list is not initial .

        loop at lt_activity_list into lo_activity .

          call method lo_activity->delete_record
            importing
              return = lt_return.

          if lt_return is not initial .
            append lines of lt_return to return .
            exit .
          endif.

        endloop .

      endif .

    catch cx_hrrcf_infotype_operation into lo_ex.

      raise exception type cx_hrrcf_maintain_object
        exporting
          previous = lo_ex.
  endtry .

  check return is initial .

* Delete the actual object itself
  call function 'RH_DELETE_OBJECT'
    exporting
     plvar                              = me->hrobject-plvar
     otype                              = me->hrobject-otype
     objid                              = me->hrobject-objid
     vtask                              = 'D'
*   ORDER_FLG                          = 'X'
*   COMMIT_FLG                         = 'X'
     authy                              = space
*   CONFIRM                            = ' '
*   DELETE_1205_WFDID                  = 'X'
*   DELETE_USER_PROFILES               = 'X'
*   DELETE_DEPENDENTS                  = 'X'
*   KEEP_LUPD                          =
*   WORKF_ACTV                         = 'X'
*   NO_EXCEPT_FOREIGN_DATA             = ' '
* IMPORTING
*   CONFIRM_EXIT                       =
* TABLES
*   DEL_OBJECTS                        =
*   ILFCODE                            =
   exceptions
     error_during_delete                = 1
     no_authorization                   = 2
     corr_exit                          = 3
     buffer_upd_with_foreign_data       = 4
     others                             = 5.
  case sy-subrc .

    when '0' .                "Success
* XDP Copy Object
      call method cl_hrrcf_simple_main_object=>deregister_instance
        exporting
          instance = me.

      call method cl_hrrcf_simple_main_object=>refresh_rcf_buffer .

    when '2' .

      if 1 eq 0.
        message e278(5a).
*   Sie haben keine Berechtigung zum AusfÃ¼hren dieser Funktion
      endif.

      call function 'BALW_BAPIRETURN_GET2'
        exporting
          type   = 'E'
          cl     = '5A'
          number = 278
        importing
          return = ls_return.
      append ls_return to return.

    when others .
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
      raise exception type cx_hrrcf_infotype_operation
        exporting
          textid         = cx_hrrcf_maintain_object=>error_during_delete
          hrobject       = ls_hrobject
          message_type   = sy-msgty
          message_class  = sy-msgid
          message_number = sy-msgno
          message_par1   = sy-msgv1
          message_par2   = sy-msgv2
          message_par3   = sy-msgv3
          message_par4   = sy-msgv4.

  endcase .

* insert change pointer again to be on the save side
  try.
      cl_hrrcf_spt_change_pointer=>insert_change_pointer(
        exporting
          hrobject = me->hrobject ).
    catch cx_hrrcf into lo_exc.
      cl_hrrcf_exception_handler=>write_exception_log( lo_exc ).
  endtry.

endmethod.                    "DELETE


METHOD delete_redundant_text_objects .
* Additions: JDH (Note 1502261)

  DATA lt_77rcf_docid TYPE t77rcf_docid_tab.
  DATA ls_77rcf_docid TYPE t77rcf_docid.

  DATA lt_77rcf_spt_infty TYPE t77rcf_spt_infty_tab.
  DATA ls_77rcf_spt_infty TYPE t77rcf_spt_infty.

  DATA lr_infotype_object TYPE REF TO data.
  DATA lo_infotype_object TYPE REF TO cl_hrrcf_infotype.
  FIELD-SYMBOLS <fs_infotype_object>  TYPE any.

  DATA oref TYPE REF TO cx_hrrcf.

  DATA lt_infty_text_tab TYPE rcf_t_hrkwf_infty_text.
  DATA ls_infty_text_tab TYPE rcf_s_hrkwf_infty_text.

  DATA lt_infotype_record TYPE wplog_tab.
  DATA ls_infotype_record TYPE wplog.

  DATA lv_vers_log_x TYPE boole_d.

  FIELD-SYMBOLS <field> TYPE any.
  FIELD-SYMBOLS <struc> TYPE any.

  DATA l_field_name TYPE fieldname.

  DATA lt_return TYPE bapirettab.

  TRY.

      CALL METHOD me->enqueue
        IMPORTING
          return = lt_return.
      DELETE lt_return WHERE type NE 'E'
                         AND type NE 'A'.
      IF NOT lt_return IS INITIAL.
        RETURN.
      ENDIF.

    CATCH cx_hrrcf INTO oref.
* we write the log and continue the program logic
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = oref.
      RETURN.
  ENDTRY.


* get all doc ids from t77rcf_docid
  CALL METHOD cl_hrrcf_t77rcf_docid=>read_all_records
    IMPORTING
      t77rcf_docid_tab = lt_77rcf_docid.

* get all classes for the docids from t77rcf_spt_infty
  CALL METHOD cl_hrrcf_t77rcf_spt_infty=>read_all_records
    IMPORTING
      t77rcf_spt_infty_tab = lt_77rcf_spt_infty.

  CHECK NOT lt_77rcf_docid IS INITIAL.

  IF me->hrobject-otype EQ 'NC'.
    TRY.
        CALL METHOD cl_hrrcf_posting_instance=>is_publication_log_active
          EXPORTING
            is_hrobject   = hrobject
          IMPORTING
            ev_log_active = lv_vers_log_x.
      CATCH cx_hrrcf INTO oref.
        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log( ex = oref ).
        CLEAR oref.
    ENDTRY.
  ENDIF.

  LOOP AT lt_77rcf_docid INTO ls_77rcf_docid.

    IF ls_77rcf_docid-docid EQ 'PUBLISHED_DOC' AND lv_vers_log_x EQ true.
      CONTINUE.  "No deleting of published docs if the version log for publications is active! -> Note 1502261
    ENDIF.

    READ TABLE lt_77rcf_spt_infty
         INTO ls_77rcf_spt_infty
         WITH KEY infty = ls_77rcf_docid-infty.
    CHECK sy-subrc = 0.

*   get generic pointer to the relevant classes
    CLEAR lr_infotype_object.
    CREATE DATA lr_infotype_object
           TYPE REF TO (ls_77rcf_spt_infty-classname).
    ASSIGN lr_infotype_object->* TO <fs_infotype_object>.

    TRY.
* get the instance for the hr object
        CALL METHOD (ls_77rcf_spt_infty-classname)=>get_instance
          EXPORTING
            hrobject = me->hrobject
          IMPORTING
            instance = <fs_infotype_object>.

* cast to cl_hrrcf_infotype
        lo_infotype_object = <fs_infotype_object>.

* get all texts
        CALL METHOD cl_hrrcf_hrkwf_storage=>read_all_infty_text
          EXPORTING
            doc_id         = ls_77rcf_docid-docid
            hrobject       = lo_infotype_object->hrobject
          IMPORTING
            infty_text_tab = lt_infty_text_tab.

* are texts available?
        CHECK NOT lt_infty_text_tab IS INITIAL.

* get all records
        CALL METHOD lo_infotype_object->get_records
          IMPORTING
            infotype_records = lt_infotype_record.

        CONCATENATE '<struc>-' ls_77rcf_docid-fieldname
          INTO l_field_name.

* pointer to version field
        ASSIGN ls_infotype_record TO <struc>
               CASTING TYPE (lo_infotype_object->my_777d-ppnnn).
        ASSIGN (l_field_name) TO <field>.

* compare texts and infotype
        LOOP AT lt_infotype_record INTO ls_infotype_record.

          READ TABLE lt_infty_text_tab INTO ls_infty_text_tab
                     WITH KEY version = <field>.
          IF sy-subrc EQ 0.
* delete correctly linked texts from internal table
            DELETE TABLE lt_infty_text_tab FROM ls_infty_text_tab.
          ENDIF.

        ENDLOOP.

* delete redundant (not linked) texts.
        LOOP AT lt_infty_text_tab INTO ls_infty_text_tab.

          CALL METHOD cl_hrrcf_hrkwf_storage=>delete_doc_by_version
            EXPORTING
              doc_id   = ls_77rcf_docid-docid
              hrobject = lo_infotype_object->hrobject
              version  = ls_infty_text_tab-version.

        ENDLOOP.

      CATCH cx_hrrcf INTO oref.
* we write the log and continue the program logic
        CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
          EXPORTING
            ex = oref.
    ENDTRY.

  ENDLOOP.

  TRY.

      CALL METHOD me->dequeue.

    CATCH cx_hrrcf INTO oref.
* we write the log and continue the program logic
      CALL METHOD cl_hrrcf_exception_handler=>write_exception_log
        EXPORTING
          ex = oref.
  ENDTRY.

ENDMETHOD.


METHOD dequeue .

  DATA l_plvar      TYPE plvar.
  DATA l_objid      TYPE objektid.
  DATA lv_sysubrc   TYPE sy-subrc.
  DATA lv_enq_once  TYPE boole_d VALUE 'X'.

  l_objid = me->id.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

* PEV
  IF ( iv_enqmode <> 'E' ) OR ( iv_scope <> '2' ).
    CALL FUNCTION 'DEQUEUE_EHPLOGIE'
      EXPORTING
        mode_plogi = iv_enqmode
        mandt      = sy-mandt
        plvar      = l_plvar
        otype      = me->hrobject-otype
        objid      = l_objid
        _scope     = iv_scope.

    lv_sysubrc = sy-subrc.
  ELSE.
    CALL FUNCTION 'HR_DEQUEUE_OBJECT'
      EXPORTING
        plvar            = l_plvar
        otype            = me->hrobject-otype
        objid            = l_objid
        dequeue_once     = lv_enq_once
      EXCEPTIONS
        illegal_otype    = 1
        objid_is_initial = 2
        internal_error   = 3
        OTHERS           = 4.

    lv_sysubrc = sy-subrc.
  ENDIF.

  IF lv_sysubrc EQ 0.
    CLEAR lock_owner.
  ELSE.
    RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
      EXPORTING
        textid         = cx_hrrcf_maintain_object=>dequeue_failed
        hrobject       = me->hrobject
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.                    "DEQUEUE


METHOD deregister_event_handlers .
* Author XRG
* Deregister event handlers; needed for buffer refresh, so all object
* references are deleted, and the garbage collector can remove the objects
  SET HANDLER on_relationship_change FOR ALL INSTANCES ACTIVATION ' '.
  SET HANDLER on_buffer_refresh ACTIVATION ' '.
ENDMETHOD.


METHOD deregister_instance .
* XDP Copy Object: Interface Instance
*  DELETE instance_directory WHERE instance = instance.
  DELETE instance_directory WHERE hrobject = instance->hrobject.

ENDMETHOD.                    "DEREGISTER_INSTANCE


METHOD enqueue .

* Extensions: XRG
* New lock concept (PEV)

  DATA l_plvar    TYPE plvar.
  DATA l_objid    TYPE objektid.
  DATA ls_return  TYPE bapiret2.
  DATA l_msgv1    TYPE sy-msgv1.
  DATA l_msgv2    TYPE sy-msgv1.
  DATA l_msgv3    TYPE sy-msgv3.
  DATA lv_sysubrc TYPE sy-subrc.
  DATA lv_enq_once  TYPE boole_d VALUE 'X'.


  l_objid = me->id.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = l_plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

  IF ( iv_enqmode <> 'E' ) OR ( iv_scope <> '2' ).
    CALL FUNCTION 'ENQUEUE_EHPLOGIE'
      EXPORTING
        mode_plogi     = iv_enqmode
        mandt          = sy-mandt
        plvar          = l_plvar
        otype          = me->hrobject-otype
        objid          = l_objid
        _scope         = iv_scope
*       _WAIT          = ' '
*       _COLLECT       = ' '
      EXCEPTIONS
        foreign_lock   = 1
        system_failure = 2
        OTHERS         = 3.

    lv_sysubrc = sy-subrc.
    IF lv_sysubrc = 0.    "currenty user
      IF lock_owner = sy-uname.
        ev_counter = 2.
        RETURN.
      ELSE.
        lock_owner = sy-uname.
        ev_counter = 1.
      ENDIF.
    ELSEIF lv_sysubrc = 1. "foreign lock
      lock_owner = sy-msgv1.
      ev_counter = '1'.
    ENDIF.
  ELSE.
    CALL FUNCTION 'HR_ENQUEUE_OBJECT'
      EXPORTING
        plvar            = l_plvar
        otype            = me->hrobject-otype
        objid            = l_objid
        enqueue_once     = lv_enq_once
      IMPORTING
        lock_user        = lock_owner
      EXCEPTIONS
        enqueue_failed   = 1
        objid_is_initial = 2
        illegal_otype    = 3
        internal_error   = 4
        OTHERS           = 5.

    lv_sysubrc = sy-subrc.
  ENDIF.

  IF lv_sysubrc EQ 1.
*    IF lock_owner NE sy-uname. "wg. Browser
    l_msgv1 = my_otext.
    l_msgv2 = me->id.
    l_msgv3 = lock_owner.

    IF 1 = 0.
      MESSAGE e088(hrrcf0002) WITH '&' '&' '&'.
*       Das Objekt (&1: &2) ist von Benutzer &3 zur Bearbeitung gesperrt
    ENDIF.
    CALL FUNCTION 'BALW_BAPIRETURN_GET2'
      EXPORTING
        type   = 'E'
        cl     = 'HRRCF0002'
        number = '088'
        par1   = l_msgv1
        par2   = l_msgv2
        par3   = l_msgv3
      IMPORTING
        return = ls_return.

    APPEND ls_return TO return.
    RETURN.

  ELSEIF lv_sysubrc NE 0.
    RAISE EXCEPTION TYPE cx_hrrcf_maintain_object
      EXPORTING
        textid         = cx_hrrcf_maintain_object=>enqueue_failed
        hrobject       = me->hrobject
        message_type   = sy-msgty
        message_class  = sy-msgid
        message_number = sy-msgno
        message_par1   = sy-msgv1
        message_par2   = sy-msgv2
        message_par3   = sy-msgv3
        message_par4   = sy-msgv4.
  ENDIF.

ENDMETHOD.                    "ENQUEUE


method GET_INSTANCE_FROM_DIRECTORY .
* XDP Copy Object: Interface Instance

* XDP Copy Object: Type instance_directory_line
  DATA instance_directory_line TYPE instance_directory_line.

  READ TABLE instance_directory INTO instance_directory_line
    WITH TABLE KEY hrobject = hrobject.

  IF sy-subrc IS INITIAL.
    instance = instance_directory_line-instance.
  ELSE.
    CLEAR instance.
  ENDIF.

endmethod.


METHOD get_internal .

  DATA hrobject TYPE hrobject.
  DATA lo_simple_main_object TYPE REF TO cl_hrrcf_simple_main_object.
  DATA lo_exception TYPE REF TO cx_hrrcf.

  CALL FUNCTION 'RH_GET_ACTIVE_WF_PLVAR'
    EXPORTING
      set_default_plvar = 'X'
    IMPORTING
      act_plvar         = hrobject-plvar
    EXCEPTIONS
      no_active_plvar   = 0
      OTHERS            = 0.

  hrobject-otype = otype.
  hrobject-objid = id.

* get instance from directors or create new instance
  CALL METHOD cl_hrrcf_simple_main_object=>get_instance_from_directory
    EXPORTING
      hrobject = hrobject
    IMPORTING
      instance = instance.

  IF instance IS INITIAL.

    TRY.
* ------- New instance ----------------------------------------------*

        CREATE OBJECT instance TYPE (classname)
          EXPORTING
            hrobject                 = hrobject.

* ------- Register instance in the directory ------------------------*
        CALL METHOD cl_hrrcf_simple_main_object=>register_instance
          EXPORTING
            instance = instance.

* ------- Object does not exist -------------------------------------*
      CATCH cx_hrrcf INTO lo_exception.

        CLEAR instance.

        RAISE EXCEPTION TYPE cx_hrrcf
          EXPORTING
             previous = lo_exception.

    ENDTRY.

  ENDIF.

ENDMETHOD.                    "GET_INTERNAL


method GET_RELATIONSHIP .

*Author:Biraj Mandavilli
* This method gets the relationship from the relationship table

  DATA ls_relationship TYPE relationship_directory_line.
  FIELD-SYMBOLS: <fs> TYPE ANY.

* get record from directory
  READ TABLE relationship INTO ls_relationship
                          WITH TABLE KEY relat = relat.

  IF  sy-subrc is INITIAL.

    ASSIGN ls_relationship-relationship->* TO <fs>. "Get Pointer

*   move data
    relationship_table = <fs>.

  ENDIF.

endmethod.


METHOD on_buffer_refresh .

  CLEAR relationship.
  deregister_event_handlers( ).   "XRG

ENDMETHOD.


METHOD on_new_main_object .

ENDMETHOD.


METHOD on_relationship_change .
  CLEAR relationship.
ENDMETHOD.


METHOD read_records .
  DATA ls_records TYPE p1000.
  DATA l_istat TYPE plog-istat VALUE '1'.

* this is just an workaround done for JSQ. MBO
* requires ISTAT to be 3 or 4. Therefore donot
* select based on ISTAT
  IF me->hrobject-otype EQ 'VA' OR
     me->hrobject-otype EQ 'VB' OR
     me->hrobject-otype EQ 'VC'.
    CLEAR l_istat.
  ENDIF.
*
  IF cl_hrrcf_object_buffer=>is_object_buffer_active( ) = abap_true.

    ls_records-plvar = me->hrobject-plvar.
    ls_records-otype = me->hrobject-otype.
    ls_records-objid = me->hrobject-objid.
    ls_records-infty = '1000'.

    CALL FUNCTION 'RH_READ_OBJECT'
      EXPORTING
        plvar                 = me->hrobject-plvar
        otype                 = me->hrobject-otype
        objid                 = me->hrobject-objid
*       REALO                 = ' '
        istat                 = l_istat
        begda                 = low_date
        endda                 = high_date
*       LANGU                 = SY-LANGU
*       OINTERVAL             = 'X'
*       STORE                 = 'X'
        check_stru_auth       = ' '
*       READ_DB               = ' '
      IMPORTING
        obeg                  = ls_records-begda
        oend                  = ls_records-endda
        ostat                 = ls_records-istat
        histo                 = ls_records-histo
        short                 = ls_records-short
        stext                 = ls_records-stext
*       TISTAT                =
*       TLANGU                =
*       DISPLAY_TEXT          =
*     TABLES
*       EXISTENCE             =
      EXCEPTIONS
        not_found             = 1
        OTHERS                = 2.
    IF sy-subrc = 0.
      APPEND ls_records
          TO records.
    ENDIF.

  ELSE.

    CALL FUNCTION 'RH_READ_INFTY'
      EXPORTING
        authority            = 'DISP'
*        with_stru_auth       = 'X'
        with_stru_auth       = ' '
        plvar                = me->hrobject-plvar
        otype                = me->hrobject-otype
        objid                = me->hrobject-objid
        infty                = '1000'
        istat                = l_istat
        begda                = low_date
        endda                = high_date
      TABLES
        innnn                = records
      EXCEPTIONS
        all_infty_with_subty = 1
        nothing_found        = 2
        no_objects           = 3
        wrong_condition      = 4
        wrong_parameters     = 5
        OTHERS               = 6.
  ENDIF.

  IF sy-subrc NE 0.
*XDP preliminary
* -> Currently the RH_XXXX_INFTY do not set the sy-msgno etc.
*    Development Request is addressed
    RAISE EXCEPTION TYPE cx_hrrcf_infotype_operation
      EXPORTING
        textid = cx_hrrcf_infotype_operation=>error_during_read
*       PREVIOUS =
        hrobject = me->hrobject
*       INFOTYPE =
        message_type = sy-msgty
        message_class = sy-msgid
        message_number = sy-msgno
        message_par1 = sy-msgv1
        message_par2 = sy-msgv2
        message_par3 = sy-msgv3
        message_par4 = sy-msgv4.
  ELSE.
    LOOP AT records INTO ls_records WHERE begda LE sy-datum
                                      AND endda GE sy-datum.
      me->name = ls_records-stext.
    ENDLOOP.
  ENDIF.

ENDMETHOD.                    "READ_RECORDS


METHOD refresh_rcf_buffer .

  CLEAR instance_directory.
  CALL METHOD CL_HRRCF_INFOTYPE=>clear_last_buffer_refresh.
  RAISE EVENT rcf_buffer_refresh.  "sequence changed

ENDMETHOD.


method REGISTER_INSTANCE .
* XDP Copy Object: Interface Instance

  DATA instance_directory_line TYPE instance_directory_line.

    instance_directory_line-hrobject  = instance->hrobject.
    instance_directory_line-instance  = instance.

    INSERT instance_directory_line INTO TABLE instance_directory.

endmethod.


method REGISTER_RELATIONSHIP .
*Author:Biraj Mandavilli
*This method registers a relationship for a particular relat value

  DATA ls_relationship TYPE relationship_directory_line.
  FIELD-SYMBOLS: <fs> TYPE ANY.

* create data object first
* (local tables are deleted after leaving the method)
  create data ls_relationship-relationship like relationship_table.
  ASSIGN ls_relationship-relationship->* TO <fs>. "Get Pointer

* prepare directory for e.g. relat 123
  ls_relationship-relat = relat.
* fill new table (data are copied)
  <fs> = relationship_table.
* insert directoryline into directory (one entry for each relationship)
  INSERT ls_relationship INTO TABLE relationship.



endmethod.


method RESET_LUW_MODE.
  luw_mode = ''.
endmethod.


method SET_LUW_MODE.
  luw_mode = true.
endmethod.
ENDCLASS.