class CL_HRRCF_WD_SERVICES definition
  public
  final
  create public .

public section.

  class-data GT_COUNTRY_VH type RCF_T_MDL_UIS_VALUEHELP .

*"* public components of class CL_HRRCF_WD_SERVICES
*"* do not include other source files here!!!
  class-methods CHECK_DDLB_VALUE_SET
    importing
      !IO_NODE type ref to IF_WD_CONTEXT_NODE
      !IV_ATTRIBUTE_NAME type STRING .
  class-methods CHECK_RETURN_MESSAGES
    importing
      !IT_MESSAGES type BAPIRETTAB
      !IO_MESSAGE_MANAGER type ref to IF_WD_MESSAGE_MANAGER
      !IV_REPORT type WDY_BOOLEAN default ABAP_FALSE
    returning
      value(RV_ERROR_INDICATOR) type WDY_BOOLEAN .
  class-methods CONSTRUCT_WD_URL
    importing
      !IV_APPLICATION_NAME type STRING
      !IT_PARAMETERS type TIHTTPNVP
    returning
      value(RV_URL) type STRING .
  class-methods DECODE_PARAM_TO_FIELDS
    importing
      !IV_PARAM type STRING
    returning
      value(RT_FIELDS) type TIHTTPNVP .
  class-methods GET_BL_DESTINATION
    returning
      value(RFC_DEST) type RFCDEST .
  class-methods GET_URL_ACT_DOVR
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    returning
      value(RV_URL) type STRING .
  class-methods GET_URL_APPLWZD_DOVR
    importing
      !IS_APPL_HROBJECT type HROBJECT optional
      !IS_CAND_HROBJECT type HROBJECT
    returning
      value(RV_URL) type STRING .
  class-methods GET_URL_CAND_DOVR
    importing
      !IS_CAND_HROBJECT type HROBJECT
    returning
      value(RV_URL) type STRING .
  class-methods GET_URL_PINST_DOVR
    importing
      !IV_PINST_GUID type RCF_PINST_GUID
    returning
      value(RV_URL) type STRING .
  class-methods IS_EXTERNAL_CANDIDATE
    returning
      value(RV_EXTERNAL_CANDIDATE) type BOOLE_D .
  class-methods RETRIEVE_T77S0_SWITCH
    importing
      !IV_GRPID type GRPID default 'RECFA'
      !IV_SEMID type SEMID
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !EV_GSVAL type GSVAL
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods RETRIEVE_VALUE_HELPS
    importing
      !IT_FIELD_NAMES type RCF_T_MDL_UIS_FIELDNAME
      !IO_CONTEXT_NODE type ref to IF_WD_CONTEXT_NODE
    exporting
      !ET_MESSAGES type BAPIRETTAB .
  class-methods RETRIEVE_T77RCF_MDL_PRM_SWITCH
    importing
      !IV_PARAM_NAME type RCF_MDL_PRM
    exporting
      !ET_MESSAGES type BAPIRETTAB
      !EV_PARAM_VALUE type RCF_MDL_PRM_VALUE
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods RETRIEVE_DOVR_TECHNIQUE
    importing
      !IV_DOVR_TYPE type RCF_MDL_PRM default 'DISPLAY_PDF'
      !IS_CAND_HROBJECT type HROBJECT
    exporting
      !EV_PREF_DATA_OVER type STRING
      !ET_MESSAGES type BAPIRETTAB
    raising
      CX_HRRCF_RFC_COMMUNICATION .
  class-methods GET_URL_QA_TEMPLATE
    importing
      !IS_TPL_HROBJECT type HROBJECT
    returning
      value(RV_URL) type STRING .
  class-methods HELP_FILTER_COLUMN
    importing
      !COL_FILTER_STRING type STRING
    changing
      !OPERATOR type STRING
      !CONDITION type STRING .
  class-methods GET_URL_PARSR_DOVR
    importing
      !IV_ACT_GUID type RCF_ACT_GUID
    returning
      value(RV_URL) type STRING .
  class-methods GET_MAILTO_URL
    importing
      !PA_PINST_GUID type RCF_PINST_GUID
      !IM_CLEAR_DEST type BOOLE_D optional
    returning
      value(RV_URL) type STRING .
  class-methods GET_USE_MAILTO
    returning
      value(RV_USE_MAILTO) type WDY_BOOLEAN .
  class-methods ESCAPE_URL_MAILTO
    importing
      !UNESCAPED type STRING
    returning
      value(ESCAPED) type STRING .
  class-methods GET_TAF_VISIBLE
    exporting
      value(RV_VISIBILITY) type WDY_BOOLEAN .
  class-methods GET_PA_DESTINATION
    returning
      value(RFC_DEST) type RFCDEST .
  class-methods CHECK_USER
    exporting
      !EX_V_CANDIDATE type BOOLE_D
      !EX_V_SERVICEUSER type BOOLE_D .
protected section.
*"* protected components of class CL_HRRCF_WD_SERVICES
*"* do not include other source files here!!!
private section.
*"* private components of class CL_HRRCF_WD_SERVICES
*"* do not include other source files here!!!

  class-data GV_IS_EXTERNAL_CANDIDATE type CHAR1 value '-'. "#EC NOTEXT .

  class-methods FILL_LOG
    importing
      !IS_MESSAGE type BAPIRET2 .
  class-methods RETRIEVE_VALUE_HELP_LIST
    importing
      !IT_FIELD_NAMES type RCF_T_MDL_UIS_FIELDNAME
    exporting
      !ET_VALUEHELP_LIST type RCF_T_MDL_UIS_VALUEHELP
      !ET_MESSAGES type BAPIRETTAB .
  class-methods SAVE_LOG .
ENDCLASS.



CLASS CL_HRRCF_WD_SERVICES IMPLEMENTATION.


METHOD check_ddlb_value_set.

* this method checks iv a certain attribute value is existing in the according value set of the node defined for the attribute.
* It is necessary to do this check for avoiding short dumps when using ddlbs of type "by key". If a selected key is not in the
* value set, it might occurr an exception...
* Thus the selected key will be initialized in this situation...

  DATA: lt_element   TYPE wdr_context_element_set,
        lo_element   TYPE REF TO if_wd_context_element,
        lo_node_info TYPE REF TO if_wd_context_node_info,
        ls_attribute TYPE wdr_context_attribute_info,
        lv_value     TYPE string.

  CHECK io_node IS BOUND AND
        iv_attribute_name IS NOT INITIAL.

  lt_element = io_node->get_elements( ).
  IF lt_element IS NOT INITIAL.
    lo_node_info = io_node->get_node_info( ).
    ls_attribute = lo_node_info->get_attribute( name = iv_attribute_name ).
    LOOP AT lt_element INTO lo_element.
      lo_element->get_attribute( EXPORTING name = iv_attribute_name
                                 IMPORTING value = lv_value ).
      READ TABLE ls_attribute-value_set TRANSPORTING NO FIELDS WITH KEY value = lv_value.
      IF sy-subrc NE 0.
        lv_value = ls_attribute-default_value.
        lo_element->set_attribute( EXPORTING name = iv_attribute_name
                                             value = lv_value ).
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


METHOD check_return_messages.

  DATA: ls_message TYPE bapiret2.

* check for fatal error messages
  LOOP AT it_messages INTO ls_message WHERE type EQ cl_hrrcf_wd_ui_constants=>gc_message_type_a.
*   write message to slg1 log
    fill_log( ls_message ).
  ENDLOOP.
  IF sy-subrc = 0.
*   save messages to slg1 log
    save_log( ).
  ENDIF.

* report messages only if IV_REPORT is initial.                                           "N 1752978
  IF iv_report = abap_false.                                                              "N 1752978
* check if important messages exist and report them
    LOOP AT it_messages INTO ls_message.

    IF ls_message-type EQ cl_hrrcf_wd_ui_constants=>gc_message_type_e OR
       ls_message-type EQ cl_hrrcf_wd_ui_constants=>gc_message_type_w.

      io_message_manager->report_t100_message(
        EXPORTING
          msgid         = ls_message-id
          msgno         = ls_message-number
          msgty         = ls_message-type
          p1            = ls_message-message_v1
          p2            = ls_message-message_v2
          p3            = ls_message-message_v3
          p4            = ls_message-message_v4 ).

      IF ls_message-type EQ cl_hrrcf_wd_ui_constants=>gc_message_type_e.
*     set error indicator
        rv_error_indicator = 'X'.
      ENDIF.
    ELSEIF ls_message-type EQ cl_hrrcf_wd_ui_constants=>gc_message_type_a. "1841055
      io_message_manager->report_t100_message(
        EXPORTING
          msgid         = 'HRRCF0002'
          msgno         = '900'
          msgty         = 'E' ).
*     set error indicator
        rv_error_indicator = 'X'.
    ENDIF.

  ENDLOOP.
  ENDIF.                                                                                  "N 1752978

ENDMETHOD.


METHOD check_user.
* determine what kind of user we are facing. Reg or unreg?
  CALL FUNCTION 'SUSR_USER_IS_SERVICETYPE'
    EXPORTING
      user_name               = sy-uname
    EXCEPTIONS
      user_name_not_exists    = 1
      user_is_not_servicetype = 2
      OTHERS                  = 3.
  IF sy-subrc NE 1.

    IF sy-subrc EQ 2.
      ex_v_candidate = 'X'.
    ELSE.
      ex_v_serviceuser = 'X'.
    ENDIF.

  ENDIF.
ENDMETHOD.


METHOD construct_wd_url.

  CALL METHOD cl_hrrcf_mdl_wd_services=>construct_wd_url
    EXPORTING
      iv_application_name = iv_application_name
      it_parameters       = it_parameters
    RECEIVING
      rv_url              = rv_url.

ENDMETHOD.


METHOD decode_param_to_fields.

  CALL METHOD cl_hrrcf_mdl_wd_services=>decode_param_to_fields
    EXPORTING
      iv_param  = iv_param
    RECEIVING
      rt_fields = rt_fields.

ENDMETHOD.


method ESCAPE_URL_MAILTO.
  data lv_string type string.

*  lv_string = CL_HTTP_UTILITY=>IF_HTTP_UTILITY~ESCAPE_URL( UNESCAPED = unescaped ).
   lv_string = CL_HRRCF_ABAP_DYN_PRG=>ESCAPE_XSS_URL( unescaped ).

  REPLACE ALL OCCURRENCES OF '+' IN lv_string WITH '%20'.

  escaped = lv_string.

endmethod.


METHOD fill_log.

  DATA:
    lv_log_handle TYPE balloghndl,
    ls_log      TYPE bal_s_log,
    ls_msg      TYPE bal_s_msg.


* create external number which is used to select logs later on
  ls_log-object     = cl_hrrcf_exception_handler=>c_log_object. "HRRCF
  ls_log-extnumber  = sy-datum.
  CALL FUNCTION 'BAL_LOG_CREATE'
    EXPORTING
      i_s_log      = ls_log
    IMPORTING
      e_log_handle = lv_log_handle
    EXCEPTIONS
      OTHERS       = 1.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

  ls_msg-msgty = is_message-type.
  ls_msg-msgid = is_message-id.
  ls_msg-msgno = is_message-number.
  ls_msg-msgv1 = is_message-message_v1.
  ls_msg-msgv2 = is_message-message_v2.
  ls_msg-msgv3 = is_message-message_v3.
  ls_msg-msgv4 = is_message-message_v4.

*-- add this message to log file
  CALL FUNCTION 'BAL_LOG_MSG_ADD'
    EXPORTING
      i_log_handle  = lv_log_handle
      i_s_msg       = ls_msg
    EXCEPTIONS
      log_not_found = 0
      OTHERS        = 1.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.


ENDMETHOD.


METHOD get_bl_destination.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_bl_destination
    RECEIVING
      rfc_dest = rfc_dest.

ENDMETHOD.


METHOD get_mailto_url.

  DATA lv_message_text TYPE string.
  DATA lv_posting_url TYPE string.
  DATA lv_message_text_escaped TYPE string.
  DATA lv_rfc_dest TYPE rfc_dest.

    IF im_clear_dest IS INITIAL.
        lv_rfc_dest = cl_hrrcf_services_general=>get_ui_destination( ).
    ENDIF.

  CALL FUNCTION 'HRRCF_WD_GENERATE_POSTING_URL'
    DESTINATION lv_rfc_dest
    EXPORTING
      iv_post_inst_guid     = pa_pinst_guid
      iv_candidate_type     = ''
      iv_check_agent_tell   = abap_true
    IMPORTING
      ev_url                = lv_posting_url
    EXCEPTIONS
      system_failure        = 1
      communication_failure = 2.
  IF sy-subrc NE 0.
    CLEAR lv_posting_url.
  ENDIF.

  lv_message_text = lv_posting_url.
  lv_message_text_escaped = cl_hrrcf_wd_services=>escape_url_mailto( unescaped = lv_message_text ).
  CONCATENATE 'mailto:?body=%0A%0A' lv_message_text_escaped '%0A%0A' INTO rv_url  .
ENDMETHOD.


METHOD get_pa_destination.
  CALL METHOD cl_hrrcf_mdl_wd_services=>get_pa_destination
    RECEIVING
      rfc_dest = rfc_dest.
ENDMETHOD.


METHOD get_taf_visible.
  " returns true if a button "tell-a-friend" should be visible.
  " It depends on two factors:
  " 1) the status of the user (internal, external, registered, unregistered)
  " 2) a value in the customizing table
  "
  "                                        available Tell-a-Friend functionality
  "   parameter value      +--------------------------------------------------------------------------------------
  "                        |     unregistered ext.  |     registered ext.    |   Unreg. int.   |   Reg. int.
  " --------------------------------------------------------------------------------------------------------------
  "   OFF                  |        no button       |     no button          |   no button     | no button
  "   MAILTO               |        mailto          |     mailto             |   mailto        | mailto
  "   REGONLY              |        no butoon       |     normal             |   no button     | normaml
  "   MAILTO_REGONLY       |        no butoon       |     normal             |   no button     | normal
  "  (initial)             |        normal          |     normal             |   normal        | noraml

  DATA: lc_cust_param_name TYPE rcf_mdl_prm,
        lv_cust_value      TYPE rcf_mdl_prm_value,
        lv_gsval           TYPE gsval.

* Set visibility of 'Tell a friend' to false(by default)
  rv_visibility = abap_false.

* Set interface parameter to 'TF_SEND_METHOD'(by default)
  lc_cust_param_name = 'TF_SEND_METHOD'.

* get the value from the customizing table
* it is either "OFF" or "MAILTO" or "REGONLY" or "MAILTO_REGONLY" or initial

  """ Start N_2611303

* determine what kind of user we are facing. Reg or unreg?
  CALL FUNCTION 'SUSR_USER_IS_SERVICETYPE'
    EXPORTING
      user_name               = sy-uname
    EXCEPTIONS
      user_name_not_exists    = 1
      user_is_not_servicetype = 2
      OTHERS                  = 3.
  IF sy-subrc = 2.
  """ End N_2611303

* Note:2364453   " Enable 'Tell a Friend' functionality for Internal candidate(Employees)
*************** code changes start *************************************
      cl_hr_t77s0=>read_gsval(
                EXPORTING
                   grpid       = 'RECFA'    " Group Name
                   semid       = 'INTAF'   " Semantic abbreviation
                IMPORTING
                   returnvalue =  lv_gsval ).

  IF lv_gsval IS NOT INITIAL and ( cl_hrrcf_wd_services=>is_external_candidate( ) = abap_false ).
      lc_cust_param_name = 'ITF_SEND_METHOD'.
  ELSEIF lv_gsval IS INITIAL and ( cl_hrrcf_wd_services=>is_external_candidate( ) = abap_false ).
      RETURN.
  ENDIF.

  ENDIF.                                                                                                   "N_2611303

  TRY.
      CALL METHOD cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch
        EXPORTING
          iv_param_name  = lc_cust_param_name
        IMPORTING
          ev_param_value = lv_cust_value.
    CATCH cx_hrrcf_rfc_communication .
      CLEAR lv_cust_value.
  ENDTRY.

* determine what kind of user we are facing. Reg or unreg?
  CALL FUNCTION 'SUSR_USER_IS_SERVICETYPE'
    EXPORTING
      user_name               = sy-uname
    EXCEPTIONS
      user_name_not_exists    = 1
      user_is_not_servicetype = 2
      OTHERS                  = 3.
  IF sy-subrc = 2. " Registered Candidate

      " external registered candidate/employee -> depends on the customizing parameter value
      IF ( lv_cust_value = 'MAILTO' OR lv_cust_value = ' ' OR lv_cust_value = 'X' OR lv_cust_value = 'REGONLY' OR lv_cust_value = 'MAILTO_REGONLY' or lv_cust_value is INITIAL ).
        rv_visibility = abap_true.
      ENDIF.


  ELSE.

    " unregistered candidate/employee -> depends on the customizing parameter value
    IF ( lv_cust_value = 'MAILTO' ) OR
       (  lv_cust_value = ''  )     OR
       (  lv_cust_value IS INITIAL  ) OR
        (  lv_cust_value = 'X'  ) .
      rv_visibility = abap_true.
    ENDIF.

  ENDIF.

ENDMETHOD.


METHOD get_url_act_dovr.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_act_dovr
    EXPORTING
      iv_act_guid = iv_act_guid
    RECEIVING
      rv_url      = rv_url.

ENDMETHOD.


METHOD get_url_applwzd_dovr.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_applwzd_dovr
    EXPORTING
      is_cand_hrobject = is_cand_hrobject
      is_appl_hrobject = is_appl_hrobject
    RECEIVING
      rv_url           = rv_url.

ENDMETHOD.


METHOD get_url_cand_dovr.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_cand_dovr
    EXPORTING
      is_cand_hrobject = is_cand_hrobject
    RECEIVING
      rv_url           = rv_url.

ENDMETHOD.


method GET_URL_PARSR_DOVR.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_parsr_dovr
    EXPORTING
      iv_act_guid = iv_act_guid
    RECEIVING
      rv_url      = rv_url.

endmethod.


METHOD get_url_pinst_dovr.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_pinst_dovr
    EXPORTING
      iv_pinst_guid = iv_pinst_guid
    RECEIVING
      rv_url        = rv_url.

ENDMETHOD.


METHOD get_url_qa_template.

  CALL METHOD cl_hrrcf_mdl_wd_services=>get_url_qa_template
    EXPORTING
      is_tpl_hrobject = is_tpl_hrobject
    RECEIVING
      rv_url          = rv_url.

ENDMETHOD.


METHOD get_use_mailto.

  " If this method returns a "true", then a Mailto: - popup window is displayed.
  " If the return value is "false", then a "normal" Tell-a-Friend popup is displayed (a form for sending emails)

  "                                  Overview: available Tell-a-Friend functionality
"   parameter value      +--------------------------------------------------------------------------------------
  "                        |     unregistered ext.  |     registered ext.    |   Unreg. int.   |   Reg. int.
  " --------------------------------------------------------------------------------------------------------------
  "   OFF                  |        no button       |     no button          |   no button     | no button
  "   MAILTO               |        mailto          |     mailto             |   mailto        | mailto
  "   REGONLY              |        no butoon       |     normal             |   no button     | normaml
  "   MAILTO_REGONLY       |        no butoon       |     normal             |   no button     | normal
  "  (initial)             |        normal          |     normal             |   normal        | noraml

  DATA lc_cust_param_name TYPE rcf_mdl_prm.

  DATA lv_cust_value TYPE rcf_mdl_prm_value.
  DATA lv_gsval      TYPE gsval.
* Set interface parameter to 'TF_SEND_METHOD'(by default)
  lc_cust_param_name = 'TF_SEND_METHOD'.


* get the value from the customizing table
* it is either "OFF" or "MAILTO" or "REGONLY" or "MAILTO_REGONLY" or initial

  """Start N_2611303
* determine what kind of user we are facing. Reg or unreg?
  CALL FUNCTION 'SUSR_USER_IS_SERVICETYPE'
    EXPORTING
      user_name               = sy-uname
    EXCEPTIONS
      user_name_not_exists    = 1
      user_is_not_servicetype = 2
      OTHERS                  = 3.
  IF sy-subrc = 2.
  """ End N_2611303

* Note:2364453   " Enable 'Tell a Friend' functionality for Internal candidate(Employees)
*************** code changes start *************************************
      cl_hr_t77s0=>read_gsval(
                EXPORTING
                   grpid       = 'RECFA'    " Group Name
                   semid       = 'INTAF'   " Semantic abbreviation
                IMPORTING
                   returnvalue =  lv_gsval ).

  IF lv_gsval IS NOT INITIAL and ( cl_hrrcf_wd_services=>is_external_candidate( ) = abap_false ).
      lc_cust_param_name = 'ITF_SEND_METHOD'.
   ELSEIF lv_gsval IS INITIAL and ( cl_hrrcf_wd_services=>is_external_candidate( ) = abap_false ).
      RETURN.
  ENDIF.

  ENDIF.                                                                                          "N_2611303

* get the value from the customizing table in order to see if we need
* to use MAILTO unstead of normal email sending
  TRY.
      CALL METHOD cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch
        EXPORTING
          iv_param_name  = lc_cust_param_name
        IMPORTING
          ev_param_value = lv_cust_value.

    CATCH cx_hrrcf_rfc_communication .
      CLEAR lv_cust_value.
  ENDTRY.

  rv_use_mailto = abap_false. "initial value means - the old behavior, a "normal" Tell-a-Friend popup for everyone

  IF ( lv_cust_value = 'OFF' ).
    "return value doesn't matter in this case - the user will not see the button "Tell a Friend" anyway
  ENDIF.

  IF ( lv_cust_value = 'MAILTO' ).
    rv_use_mailto = abap_true.
  ENDIF.

  IF ( lv_cust_value = 'REGONLY' ).
    "the registered user will see the "normal" Tell-a-friend popup.
    "the unregistered user will have no "tell-afriend" button at all
    rv_use_mailto = abap_false.
  ENDIF.

  IF ( lv_cust_value = 'MAILTO_REGONLY' ).
    "the registered user will see the "Mailto: " Tell-a-friend popup.
    "the unregistered user will have no "tell-afriend" button at all
    rv_use_mailto = abap_true.
  ENDIF.

ENDMETHOD.


METHOD help_filter_column.

  operator = space.
  condition = col_filter_string.

* Don't bother if there is no filter condition
  CHECK condition IS NOT INITIAL.

  operator = 'EQ'.

* if there is a wildcard or filter condition contains only one element => CP
  IF  ( condition CA '*' ) OR ( STRLEN( condition ) = 1 ).
    operator = 'CP'.
  ELSE.
* condition must contain at least 2 elements. Check if the first 1-2 characters are =, !=, <, >, <>, <=, >=
    CASE condition(1).
      WHEN '>'.
        IF condition+1(1) = '='.
          operator = 'GE'.
          condition = condition+2.
        ELSE.
          operator = 'GT'.
          condition = condition+1.
        ENDIF.
      WHEN '<'.
        IF condition+1(1) = '='.
          operator = 'LE'.
          condition = condition+2.
        ELSEIF condition+1(1) = '>'.
          operator = 'NE'.
          condition = condition+2.
        ELSE.
          operator = 'LT'.
          condition = condition+1.
        ENDIF.
      WHEN '='.
        IF condition+1(1) = '>'.
          operator = 'GE'.
          condition = condition+2.
        ELSEIF condition+1(1) = '<'.
          operator = 'LE'.
          condition = condition+2.
        ELSE.
          operator = 'EQ'.
          condition = condition+1.
        ENDIF.
      WHEN '!'.
        operator = 'NE'.
        IF condition+1(1) = '='.
          condition = condition+2.
        ELSE.
          condition = condition+1.
        ENDIF.
    ENDCASE.
  ENDIF.

  IF STRLEN( condition ) = 0.
    operator = space.
  ENDIF.

ENDMETHOD.


METHOD is_external_candidate.

  CALL METHOD cl_hrrcf_mdl_wd_services=>is_external_candidate
    RECEIVING
      rv_external_candidate = rv_external_candidate.

ENDMETHOD.


METHOD retrieve_dovr_technique.

  DATA: lo_assist      TYPE REF TO cl_hrrcf_m_psettings,
       ls_settings    TYPE rcf_s_mdl_pers_sett,
       lv_gsval       TYPE gsval,
       lv_param_value TYPE rcf_mdl_prm_value.

* (1) check t77s0: recfa datao
  TRY.
      CALL METHOD cl_hrrcf_wd_services=>retrieve_t77s0_switch
        EXPORTING
          iv_semid = 'DATAO'
        IMPORTING
          ev_gsval = lv_gsval.
    CATCH cx_hrrcf_rfc_communication .
  ENDTRY.

  IF lv_gsval IS NOT INITIAL.
*   usage of adobe forms -> PDF
    ev_pref_data_over = 'PDF'.
    RETURN.
  ENDIF.

* (2) check settings at user
  CREATE OBJECT lo_assist.
  CALL METHOD lo_assist->sc_retrieve_pers_settings
    EXPORTING
      is_cand_hrobject = is_cand_hrobject
    IMPORTING
      et_messages      = et_messages
      es_settings      = ls_settings.

  IF ls_settings-pref_data_over IS INITIAL.
*   set pdf as fallback
    TRY.
        CALL METHOD cl_hrrcf_wd_services=>retrieve_t77rcf_mdl_prm_switch
          EXPORTING
            iv_param_name  = iv_dovr_type
          IMPORTING
*            et_messages    = lt_messages
            ev_param_value = lv_param_value.

        IF lv_param_value IS NOT INITIAL.
          ev_pref_data_over = 'PDF'.
        ELSE.
          ev_pref_data_over = 'HTML'.
        ENDIF.

      CATCH cx_hrrcf_rfc_communication .
        ev_pref_data_over = 'HTML'.
    ENDTRY.
  ELSE.
    ev_pref_data_over = ls_settings-pref_data_over.
  ENDIF.

ENDMETHOD.


METHOD retrieve_t77rcf_mdl_prm_switch.

  DATA: lv_rfc_dest             TYPE rfcdest,
        lv_message(80)          TYPE c.                     "#EC NEEDED

  CLEAR: et_messages,
         ev_param_value.

* get RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* read switch from table T77RCF_MDL_PRMC
  CALL FUNCTION 'HRRCF_MDL_UIS_MDL_PRM_RETRIEVE'
    DESTINATION lv_rfc_dest
    EXPORTING
      param_name            = iv_param_name
    IMPORTING
      param_value           = ev_param_value
      messages              = et_messages
    EXCEPTIONS
      communication_failure = 1  MESSAGE lv_message
      system_failure        = 2  MESSAGE lv_message.

  IF sy-subrc <> 0.
*   problem with RFC connection
    CASE sy-subrc.
      WHEN 1.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      WHEN 2.
        RAISE EXCEPTION TYPE cx_hrrcf_rfc_communication
          EXPORTING textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    ENDCASE.
  ENDIF.

ENDMETHOD.


method retrieve_t77s0_switch.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.                     "#EC NEEDED

  clear: et_messages,
         ev_gsval.

* get RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* read switch from table T77S0
  call function 'HRRCF_MDL_UIS_SWITCH_RETRIEVE'
    destination lv_rfc_dest
    exporting
      grp_id                = iv_grpid
      sem_id                = iv_semid
    importing
      gs_val                = ev_gsval
      messages              = et_messages
    exceptions
      communication_failure = 1  message lv_message
      system_failure        = 2  message lv_message.

  if sy-subrc <> 0.
*   problem with RFC connection
    case sy-subrc.
      when 1.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_SYSTEM_FAILURE'.
      when 2.
        raise exception type cx_hrrcf_rfc_communication
          exporting textid = 'CX_HRRCF_RFC_COMM_FAILURE'.
    endcase.
  endif.

endmethod.


METHOD retrieve_value_helps.

  DATA: lt_value_help_list      TYPE rcf_t_mdl_uis_valuehelp,
        ls_value_help           TYPE rcf_s_mdl_uis_valuehelp,
        ls_field_name           TYPE rcf_s_mdl_uis_fieldname,
        lv_field_name           TYPE string,
        lv_attribute_name       TYPE string,
        lv_index                TYPE sytabix.

  DATA: lo_context_node_info    TYPE REF TO if_wd_context_node_info,
        lo_context_attribute    TYPE REF TO data,
        ls_attribute_info       TYPE wdr_context_attribute_info,
        lt_value_set            TYPE tihttpnvp,
        ls_value_set            TYPE ihttpnvp,
        ls_initial_key_value_set TYPE ihttpnvp.

  CLEAR et_messages.

  IF io_context_node IS INITIAL.
    RETURN.
  ENDIF.

* get list of value helps via RFC
  cl_hrrcf_wd_services=>retrieve_value_help_list(
    EXPORTING
      it_field_names    = it_field_names
    IMPORTING
      et_valuehelp_list = lt_value_help_list
      et_messages       = et_messages ).

* fill context attributes with the requested value help
  LOOP AT it_field_names INTO ls_field_name.

    lv_field_name = ls_field_name-fieldname.
    lv_attribute_name = ls_field_name-attribute_name.

    IF ( lv_field_name = 'COUNTRY_DES_JOB' OR lv_field_name = 'COUNTRY' )
         AND lv_attribute_name = 'COUNTRY'.                               "N 1870263
      CLEAR gt_country_vh[].                                              "N 1870263
    ENDIF.                                                                "N 1870263

*   check if context attribute exists
    TRY.

        lo_context_node_info = io_context_node->get_node_info( ).

        IF ls_field_name-attribute_name IS INITIAL.

          lo_context_node_info->get_attribute(
            EXPORTING
              name           = lv_field_name
            RECEIVING
              attribute_info = ls_attribute_info ).

        ELSE.

          lo_context_node_info->get_attribute(
            EXPORTING
              name           = lv_attribute_name
            RECEIVING
              attribute_info = ls_attribute_info ).

        ENDIF.

        IF ls_attribute_info IS INITIAL.
          CONTINUE.
        ENDIF.

      CATCH cx_root.
        CONTINUE.
    ENDTRY.

*   get node info of the context node
    lo_context_node_info = io_context_node->get_node_info( ).

*   build value help set
    LOOP AT lt_value_help_list INTO ls_value_help WHERE fieldname = ls_field_name-fieldname.

      lv_index = sy-tabix.

      ls_value_set-name = ls_value_help-vh_key.
      ls_value_set-value = ls_value_help-vh_value.

      IF ls_value_help-is_init_key IS INITIAL.
        APPEND ls_value_set TO lt_value_set.
      ELSE.
        ls_initial_key_value_set = ls_value_set.
      ENDIF.

      IF ( lv_field_name = 'COUNTRY_DES_JOB' OR lv_field_name = 'COUNTRY' )
           AND lv_attribute_name = 'COUNTRY'.                               "N 1870263
        APPEND ls_value_help TO gt_country_vh.                              "N 1870263
      ENDIF.                                                                "N 1870263

      DELETE lt_value_help_list INDEX lv_index.

      CLEAR: ls_value_help,
             ls_value_set.
    ENDLOOP.

*   sort the value help set
    IF ls_field_name-do_not_sort NE 'X'.
      SORT lt_value_set BY value AS TEXT.
    ENDIF.

*   check if initial key is required
    IF ls_field_name-init_key_included IS NOT INITIAL.
*     insert initial key...
      INSERT ls_initial_key_value_set INTO lt_value_set INDEX 1.
      CLEAR ls_initial_key_value_set.
    ENDIF.

*   bind value help set to the context attribute
    IF ls_field_name-attribute_name IS INITIAL.

      lo_context_node_info->set_attribute_value_set(
        EXPORTING
          name      = lv_field_name
          value_set = lt_value_set ).

    ELSE.
      lo_context_node_info->set_attribute_value_set(
        EXPORTING
          name      = lv_attribute_name
          value_set = lt_value_set ).
    ENDIF.

    CLEAR: lo_context_node_info,
           lo_context_attribute,
           lt_value_set,
           ls_field_name,
           lv_field_name,
           lv_attribute_name.

  ENDLOOP.

ENDMETHOD.


method retrieve_value_help_list.

  data: lv_rfc_dest             type rfcdest,
        lv_message(80)          type c.                     "#EC NEEDED

  clear: et_valuehelp_list,
         et_messages.

* get RFC destination
  lv_rfc_dest = cl_hrrcf_wd_services=>get_bl_destination( ).

* retrieve requested value help(s)
  call function 'HRRCF_MDL_UIS_VH_COMMON'
    destination lv_rfc_dest
    exporting
      field_names           = it_field_names
    importing
      valuehelp_list        = et_valuehelp_list
      messages              = et_messages
    exceptions
      communication_failure = 1  message lv_message
      system_failure        = 2  message lv_message.

endmethod.


METHOD save_log.

*-- replace numbers in logs
  CALL FUNCTION 'BAL_DB_SAVE_PREPARE'
    EXPORTING
      i_replace_in_all_logs = 'X'
    EXCEPTIONS
      log_not_found         = 0
      OTHERS                = 1.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

*-- save logs
  CALL FUNCTION 'BAL_DB_SAVE'
    EXPORTING
      i_save_all = 'X'
    EXCEPTIONS
      OTHERS     = 1.
  IF sy-subrc <> 0.
    EXIT.
  ENDIF.

ENDMETHOD.
ENDCLASS.