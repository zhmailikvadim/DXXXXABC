CLASS zcl_recruitment_set_cand_data DEFINITION
  PUBLIC FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS set_data
      RETURNING VALUE(rt_messages) TYPE bapirettab.

    METHODS constructor
      IMPORTING is_candidate     TYPE zhr_s_sync_btw_erp_and_hr
                is_cand_hrobject TYPE hrobject.

    METHODS periodical_services.

  PRIVATE SECTION.
    DATA mt_messages      TYPE bapirettab.
    DATA ms_candidate     TYPE zhr_s_sync_btw_erp_and_hr.
    DATA ms_cand_hrobject TYPE hrobject.

    METHODS lock_candidate               RAISING cx_hrrcf_rfc_communication.

    METHODS set_cand_addinf.

    METHODS set_personal                 RAISING cx_hrrcf_rfc_communication.

    METHODS set_seminars.

    METHODS set_candidate_family.

    METHODS set_candidate_relatives.

    METHODS set_candidate_common_educ    RAISING cx_hrrcf_rfc_communication.

    METHODS set_candidate_work_exp       RAISING cx_hrrcf_rfc_communication.

    METHODS set_candidate_qualifications RAISING cx_hrrcf_rfc_communication.

    METHODS set_desired_job.

    METHODS set_prof_reccomendations.

    METHODS set_work_conditions.

    METHODS unlock_candidate.

    METHODS set_single_candidate_quali
      IMPORTING is_cand_qualification TYPE rcf_s_mdl_cand_qualification
      RAISING   cx_hrrcf_rfc_communication.

    METHODS set_cand_quali_tractor   RAISING cx_hrrcf_rfc_communication.
    METHODS set_cand_quali_driver    RAISING cx_hrrcf_rfc_communication.
    METHODS set_cand_quali_languages RAISING cx_hrrcf_rfc_communication.

    METHODS delete_cand_qualifications
      RAISING cx_hrrcf_rfc_communication.
ENDCLASS.



CLASS ZCL_RECRUITMENT_SET_CAND_DATA IMPLEMENTATION.


  METHOD constructor.
    ms_candidate = is_candidate.
    ms_cand_hrobject = is_cand_hrobject.
  ENDMETHOD.


  METHOD delete_cand_qualifications.
    DATA(lo_wd_assist) = NEW cl_hrrcf_m_qualis( ).

    lo_wd_assist->sc_retrieve_candidate_qualis( EXPORTING is_cand_hrobject       = ms_cand_hrobject
                                                IMPORTING et_messages            = DATA(lt_messages2)
                                                          et_cand_qualifications = DATA(lt_cand_qualifications) ).
    APPEND LINES OF lt_messages2 TO mt_messages.

    LOOP AT lt_cand_qualifications ASSIGNING FIELD-SYMBOL(<ls_cand_qualifications>).
      lo_wd_assist->sc_delete_candidate_quali( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                                         is_qualification = <ls_cand_qualifications>
                                               IMPORTING et_messages      = DATA(lt_messages1) ).
      APPEND LINES OF lt_messages1 TO mt_messages.
    ENDLOOP.

    SELECT SINGLE objid INTO @ms_cand_hrobject-objid
      FROM hrp5105
      WHERE objid = @ms_cand_hrobject-objid.

    IF sy-subrc <> 0.
      DELETE FROM hrp5105
      WHERE objid = @ms_cand_hrobject-objid.
    ENDIF.
  ENDMETHOD.


  METHOD lock_candidate.
    DATA(lo_wd_assist) = NEW cl_hrrcf_m_candprofile( ).

    lo_wd_assist->sc_lock_cand_hrobject( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                         IMPORTING et_messages      = DATA(lt_messages) ).

    APPEND LINES OF lt_messages TO mt_messages.
  ENDMETHOD.


  METHOD periodical_services.
    DATA job_name   TYPE tbtcjob-jobname VALUE 'SUBMIT_BATCHJOB'. " Batch job name
    DATA job_number TYPE tbtcjob-jobcount.

    CALL FUNCTION 'JOB_OPEN'
      EXPORTING  jobname          = job_name
      IMPORTING  jobcount         = job_number
      EXCEPTIONS cant_create_job  = 1
                 invalid_job_data = 2
                 jobname_missing  = 3
                 OTHERS           = 4.

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    SUBMIT rcf_periodical_services VIA JOB job_name NUMBER job_number
                      AND RETURN.

    IF sy-subrc = 0.
      CALL FUNCTION 'JOB_CLOSE'
        EXPORTING  jobcount             = job_number
                   jobname              = job_name
                   strtimmed            = 'X'
        EXCEPTIONS cant_start_immediate = 1
                   invalid_startdate    = 2
                   jobname_missing      = 3
                   job_close_failed     = 4
                   job_nosteps          = 5
                   job_notex            = 6
                   lock_failed          = 7
                   OTHERS               = 8.
    ENDIF.
  ENDMETHOD.


  METHOD set_candidate_common_educ.
    DATA ls_education TYPE rcf_s_mdl_cand_education.

    DATA(lo_wd_assist) = NEW cl_hrrcf_m_education( ).

    lo_wd_assist->sc_retrieve_educationdata( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                             IMPORTING
                                             " TODO: variable is assigned but never used (ABAP cleaner)
                                                       et_messages      = DATA(lt_messages2)
                                                       et_education     = DATA(lt_work_education) ).

    LOOP AT lt_work_education ASSIGNING FIELD-SYMBOL(<ls_education>).
      lo_wd_assist->sc_delete_education( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                                   is_education     = <ls_education>
                                         IMPORTING et_messages      = DATA(lt_messages1) ).
      APPEND LINES OF lt_messages1 TO mt_messages.
    ENDLOOP.

    LOOP AT ms_candidate-candidate_education ASSIGNING FIELD-SYMBOL(<ls_candidate_education>).

      ls_education-seqnr           = sy-tabix.
      ls_education-start_date      = <ls_candidate_education>-begda.
      ls_education-end_date        = <ls_candidate_education>-endda.
      ls_education-field_of_study1 = <ls_candidate_education>-ftext.
      ls_education-institute       = <ls_candidate_education>-insti.
      ls_education-degree          = <ls_candidate_education>-qualiname.
      ls_education-degree_level    = '05'.

      lo_wd_assist->sc_create_education( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                                   is_education     = ls_education
                                         IMPORTING et_messages      = DATA(lt_messages) ).
      APPEND LINES OF lt_messages TO mt_messages.

    ENDLOOP.
  ENDMETHOD.


  METHOD set_candidate_family.
    DATA ls_cand_family TYPE zhr_cand_family.

    DELETE FROM zhr_cand_family
            WHERE plvar = ms_cand_hrobject-plvar
              AND otype = ms_cand_hrobject-otype
              AND objid = ms_cand_hrobject-objid.

    LOOP AT ms_candidate-candidate_family ASSIGNING FIELD-SYMBOL(<ls_family>).
      ls_cand_family-plvar   = ms_candidate-candidate_header-plvar.
      ls_cand_family-otype   = ms_candidate-candidate_header-otype.
      ls_cand_family-objid   = ms_candidate-candidate_header-objid.
      ls_cand_family-seqnr   = sy-tabix.
      ls_cand_family-begda   = sy-datum.
      ls_cand_family-famsa   = <ls_family>-relat_id.
      ls_cand_family-famsa_t = <ls_family>-relat_degree.
      ls_cand_family-gbdat   = <ls_family>-grdate.
      ls_cand_family-nach2   = <ls_family>-nach2.
      ls_cand_family-nachn   = <ls_family>-nachn.
      ls_cand_family-vorna   = <ls_family>-vorna.
      INSERT zhr_cand_family FROM ls_cand_family.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_candidate_qualifications.
    delete_cand_qualifications( ).
    set_cand_quali_tractor( ).
    set_cand_quali_driver( ).
    set_cand_quali_languages( ).
  ENDMETHOD.


  METHOD set_candidate_relatives.
    DATA lt_cand_relativ TYPE TABLE OF zhr_cand_relativ.

    DELETE FROM zhr_cand_relativ
            WHERE plvar = ms_cand_hrobject-plvar
              AND otype = ms_cand_hrobject-otype
              AND objid = ms_cand_hrobject-objid.

    lt_cand_relativ = VALUE #( FOR ls_cand_relativ IN ms_candidate-candidate_relatives INDEX INTO lv_seqnr
                               ( begda       = sy-datum
                                 seqnr       = lv_seqnr
                                 plvar       = ms_cand_hrobject-plvar
                                 otype       = ms_cand_hrobject-otype
                                 objid       = ms_cand_hrobject-objid
                                 famsa       = ls_cand_relativ-relat_id
                                 nachn       = ls_cand_relativ-relat_fio
                                 vorna       = ls_cand_relativ-relat_name
                                 nach2       = ls_cand_relativ-relat_otch
                                 famsa_t     = ls_cand_relativ-relat_degree
                                 depart_work = ls_cand_relativ-relat_work
                                 profession  = ls_cand_relativ-profession ) ).
    INSERT zhr_cand_relativ FROM TABLE lt_cand_relativ.
  ENDMETHOD.


  METHOD set_candidate_work_exp.
    DATA ls_work_experience TYPE rcf_s_mdl_cand_work_experience.

    LOOP AT ms_candidate-candidate_last_work ASSIGNING FIELD-SYMBOL(<ls_candidate_last_work>).

      ls_work_experience-seqnr               = sy-tabix.
      ls_work_experience-start_date          = <ls_candidate_last_work>-work_period.
      ls_work_experience-end_date            = <ls_candidate_last_work>-work_period_to.
      ls_work_experience-functional_area_txt = <ls_candidate_last_work>-name_org.
      ls_work_experience-industry_txt        = <ls_candidate_last_work>-oruba.
      ls_work_experience-contract_type_txt   = <ls_candidate_last_work>-oruba.
      ls_work_experience-employer            = <ls_candidate_last_work>-last_head.
      ls_work_experience-job_titel           = <ls_candidate_last_work>-name_job.
      ls_work_experience-description_txt     = |{ <ls_candidate_last_work>-name_job },{ <ls_candidate_last_work>-oruba }|.

      DATA(lo_wd_assist) = NEW cl_hrrcf_m_work_exp( ).

      lo_wd_assist->sc_retrieve_work_exp( EXPORTING is_cand_hrobject   = ms_cand_hrobject
                                          IMPORTING
                                          " TODO: variable is assigned but never used (ABAP cleaner)
                                                    et_messages        = DATA(lt_messages2)
                                                    et_work_experience = DATA(lt_work_experience) ).

      LOOP AT lt_work_experience ASSIGNING FIELD-SYMBOL(<ls_work_exp>).
        lo_wd_assist->sc_delete_work_exp( EXPORTING is_cand_hrobject  = ms_cand_hrobject
                                                    is_workexperience = <ls_work_exp>
                                          " TODO: variable is assigned but never used (ABAP cleaner)
                                          IMPORTING et_messages       = DATA(lt_messages1) ).
      ENDLOOP.

      lo_wd_assist->sc_create_work_exp( EXPORTING is_cand_hrobject  = ms_cand_hrobject
                                                  is_workexperience = ls_work_experience
                                        IMPORTING et_messages       = DATA(lt_messages) ).
      APPEND LINES OF lt_messages TO mt_messages.

    ENDLOOP.
  ENDMETHOD.


  METHOD set_cand_addinf.
    DATA ls_cand_addinf TYPE zhr_cand_addinf.

    DELETE FROM zhr_cand_addinf
            WHERE plvar = ms_cand_hrobject-plvar
              AND otype = ms_cand_hrobject-otype
              AND objid = ms_cand_hrobject-objid.

    ls_cand_addinf-plvar    = ms_candidate-candidate_header-plvar.
    ls_cand_addinf-otype    = ms_candidate-candidate_header-otype.
    ls_cand_addinf-objid    = ms_candidate-candidate_header-objid.
    ls_cand_addinf-begda    = sy-datum.
    ls_cand_addinf-fam_stat = ms_candidate-candidate_header-family_stat_id.
    ls_cand_addinf-hobby    = ms_candidate-candidate_header-hobbies.
    ls_cand_addinf-userpc   = ms_candidate-candidate_header-comp_programs.
    INSERT zhr_cand_addinf FROM ls_cand_addinf.
  ENDMETHOD.


  METHOD set_cand_quali_driver.
    DATA ls_cand_qualification TYPE rcf_s_mdl_cand_qualification.

    DATA(ls_cand_header) = REF #( ms_candidate-candidate_header ).

    IF ls_cand_header->drivcat_b = abap_true.
      ls_cand_qualification-q_object_id = '70059714'.
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->drivcat_c = abap_true.
      ls_cand_qualification-q_object_id = '70059715'.
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->drivcat_ce = abap_true.
      ls_cand_qualification-q_object_id = '70059716'.
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->drivcat_de = abap_true.
      ls_cand_qualification-q_object_id = '70059717'.
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
  ENDMETHOD.


  METHOD set_cand_quali_languages.
    DATA ls_cand_qualification TYPE rcf_s_mdl_cand_qualification.

    LOOP AT ms_candidate-candidate_language ASSIGNING FIELD-SYMBOL(<ls_cand_language>).
      ls_cand_qualification-q_object_id = <ls_cand_language>-lang_id.
      ls_cand_qualification-proficiency = <ls_cand_language>-prof_level.
      set_single_candidate_quali( ls_cand_qualification ).
    ENDLOOP.
  ENDMETHOD.


  METHOD set_cand_quali_tractor.
    DATA ls_cand_qualification TYPE rcf_s_mdl_cand_qualification.

    DATA(ls_cand_header) = REF #( ms_candidate-candidate_header ).

    ls_cand_qualification-proficiency = 2.
    IF ls_cand_header->tractcat_a = abap_true.
      ls_cand_qualification-q_object_id = CONV #( '70059792' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->tractcat_b = abap_true.
      ls_cand_qualification-q_object_id = CONV #( '70059793' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->tractcat_c = abap_true.
      ls_cand_qualification-q_object_id = CONV #( '70059794' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->tractcat_d = abap_true.
      ls_cand_qualification-q_object_id = CONV #( '70059795' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->tractcat_e = abap_true.
      ls_cand_qualification-seqnr       = 0.
      ls_cand_qualification-q_object_id = CONV #( '70059796' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
    IF ls_cand_header->tractcat_f = abap_true.
      ls_cand_qualification-q_object_id = CONV #( '70059797' ).
      set_single_candidate_quali( ls_cand_qualification ).
    ENDIF.
  ENDMETHOD.


  METHOD set_data.
    DATA ls_result TYPE bapiret2.

    TRY.
        lock_candidate( ).
        set_personal( ). " Phone, address, e-mail
        set_cand_addinf( ). " Hobbies, Family Status, Comp Programs
        set_seminars( ).
        set_candidate_family( ).
        set_candidate_common_educ( ).
        set_candidate_work_exp( ).
        set_desired_job( ).
        set_candidate_qualifications( ).
        set_candidate_relatives( ).
        set_prof_reccomendations( ).
        unlock_candidate( ).
        rt_messages = mt_messages.
      CATCH cx_root INTO DATA(lo_ex).
        cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).

        CALL FUNCTION 'BALW_BAPIRETURN_GET2'
          EXPORTING type   = 'E'
                    cl     = 'HRRCF0002'
                    number = '800'
          IMPORTING return = ls_result.
        ls_result-message = lo_ex->get_text( ).
        APPEND ls_result TO mt_messages.
    ENDTRY.
  ENDMETHOD.


  METHOD set_desired_job.
    DATA ls_desired_job TYPE rcf_s_mdl_cand_desired_job.
    DATA lt_messages    TYPE bapirettab.
    DATA ls_result      TYPE bapiret2.

    LOOP AT ms_candidate-candidate_desired_profession ASSIGNING FIELD-SYMBOL(<ls_desired_profession>).
      ls_desired_job-seqnr               = sy-tabix.
      ls_desired_job-functional_area_txt = <ls_desired_profession>-name_profess.
      ls_desired_job-payment_info        = ms_candidate-candidate_header-min_salary.
      ls_desired_job-annualsalary_min    = ms_candidate-candidate_header-min_salary.
      ls_desired_job-annualsalary_max    = ms_candidate-candidate_header-min_salary.
      ls_desired_job-travelwilling       = ms_candidate-candidate_header-business_trip_id.
      ls_desired_job-currency            = 'BYN'.
      ls_desired_job-hierarchy_level_txt = |Готовность крайний север: { ms_candidate-candidate_header-business_trip_sever }|.

      TRY.
          CALL FUNCTION 'HRRCF_MDL_CAND_DJOB_CREATE'
            EXPORTING record        = ls_desired_job
                      cand_hrobject = ms_cand_hrobject
            IMPORTING messages      = lt_messages.
          APPEND LINES OF lt_messages TO mt_messages.
        CATCH cx_root INTO DATA(lo_ex).
          cl_hrrcf_exception_handler=>write_exception_log( lo_ex ).
          CALL FUNCTION 'BALW_BAPIRETURN_GET2'
            EXPORTING type   = 'E'
                      cl     = 'HRRCF0002'
                      number = '800'
            IMPORTING return = ls_result.
          APPEND ls_result TO mt_messages.
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_personal.
    DATA ls_cand_hrobject             TYPE hrobject.
    DATA ls_personal_data             TYPE rcf_s_mdl_cand_personal_data.
    DATA lv_email                     TYPE ad_smtpadr.
    DATA lt_phone_data                TYPE rcf_t_mdl_cand_commn_telephone.
    DATA lt_address_data              TYPE rcf_t_mdl_cand_commn_address.
    DATA lv_preferred_phone_channel   TYPE rcf_comm_channel.
    DATA lv_preferred_address_channel TYPE rcf_comm_channel.

    ls_cand_hrobject = CORRESPONDING #( ms_candidate-candidate_header MAPPING objid = objid
                                                                              otype = otype
                                                                              plvar = plvar ).

    ls_personal_data = CORRESPONDING #( ms_candidate-candidate_header MAPPING birthdate = gbdat
                                                                              firstname = vorna
                                                                              lastname =  nachn
                                                                              middlename = nach2 ).

    lv_email = ms_candidate-candidate_header-num01_email.

    lt_phone_data = VALUE #(
        ( channel = '01' channel_description = 'Мобильный телефон' telephone = ms_candidate-candidate_header-num02_phone2 )
        ( channel = '02' channel_description = 'Домашний телефон' telephone = ms_candidate-candidate_header-num02_phone1 ) ).

    IF ms_candidate-candidate_header-land1f IS NOT INITIAL.
      APPEND VALUE #( channel_description = 'Адрес фактического проживания'
                      postcode            = '000000'
                      channel             = '02'
                      country             = ms_candidate-candidate_header-land1f
                      street              = ms_candidate-candidate_header-strasf
                      street2             = ms_candidate-candidate_header-hsnmrf
                      region              = ms_candidate-candidate_header-statef
                      city                = ms_candidate-candidate_header-ort01f  ) TO lt_address_data.
    ENDIF.

    IF ms_candidate-candidate_header-land1 IS NOT INITIAL.
      APPEND VALUE #( channel_description = 'Адрес постоянной регистрации'
                      postcode            = '000000'
                      channel             = '01'
                      country             = ms_candidate-candidate_header-land1
                      street              = ms_candidate-candidate_header-stras
                      street2             = ms_candidate-candidate_header-hsnmr
                      region              = ms_candidate-candidate_header-state
                      city                = ms_candidate-candidate_header-ort01 ) TO lt_address_data.
    ENDIF.

    DATA(lo_hrrcf_m_personl_data) = NEW cl_hrrcf_m_personl_data( ).

*    lo_hrrcf_m_personl_data->sc_retrieve_cand_data( EXPORTING is_cand_hrobject = ms_cand_hrobject
*                                                    IMPORTING
*                                                    " TODO: variable is assigned but never used (ABAP cleaner)
*                                                              et_messages      = DATA(lt_messages2)
*                                                    " TODO: variable is assigned but never used (ABAP cleaner)
*                                                              es_personal_data = DATA(lt_cand_qualifications) ).
    lo_hrrcf_m_personl_data->sc_save_cand_data( EXPORTING is_personal_data             = ls_personal_data
                                                          is_cand_hrobject             = ls_cand_hrobject
                                                          iv_preferred_phone_channel   = '01' "lv_preferred_phone_channel
                                                          iv_preferred_address_channel = '01' "lv_preferred_address_channel
                                                          iv_email                     = lv_email
                                                          it_phone_data                = lt_phone_data
                                                          it_address_data              = lt_address_data
                                                IMPORTING et_messages                  = DATA(lt_messages) ).

    APPEND LINES OF lt_messages TO mt_messages.
  ENDMETHOD.


  METHOD set_prof_reccomendations.
    DATA lt_cand_prof_reccomendations TYPE TABLE OF zhr_cand_workrec.

    DELETE FROM zhr_cand_workrec
            WHERE plvar = ms_cand_hrobject-plvar
              AND otype = ms_cand_hrobject-otype
              AND objid = ms_cand_hrobject-objid.

    lt_cand_prof_reccomendations = VALUE #( FOR ls_candidate_profrecom IN ms_candidate-candidate_profrecom INDEX INTO lv_seqnr
                                            ( begda      = sy-datum
                                              seqnr      = lv_seqnr
                                              plvar      = ms_cand_hrobject-plvar
                                              otype      = ms_cand_hrobject-otype
                                              objid      = ms_cand_hrobject-objid
                                              fio        = ls_candidate_profrecom-fio
                                              place_work = ls_candidate_profrecom-place_work
                                              telnr      = ls_candidate_profrecom-telnr ) ).

    INSERT zhr_cand_workrec FROM TABLE lt_cand_prof_reccomendations.
  ENDMETHOD.


  METHOD set_seminars.
    DATA ls_cand_educ TYPE zhr_cand_educ.

    DELETE FROM zhr_cand_educ
            WHERE plvar = ms_cand_hrobject-plvar
              AND otype = ms_cand_hrobject-otype
              AND objid = ms_cand_hrobject-objid.

    LOOP AT ms_candidate-candidate_seminar ASSIGNING FIELD-SYMBOL(<ls_seminars>).
      ls_cand_educ-plvar      = ms_candidate-candidate_header-plvar.
      ls_cand_educ-otype      = ms_candidate-candidate_header-otype.
      ls_cand_educ-objid      = ms_candidate-candidate_header-objid.
      ls_cand_educ-seqnr      = sy-tabix.
      ls_cand_educ-begda      = sy-datum.
      ls_cand_educ-comp       = <ls_seminars>-comp.
      ls_cand_educ-end_date   = |{ <ls_seminars>-begda }0101|.
      ls_cand_educ-start_date = ls_cand_educ-end_date - <ls_seminars>-anzkl.
      ls_cand_educ-name       = <ls_seminars>-name.
      ls_cand_educ-theme      = <ls_seminars>-ftext.
      INSERT zhr_cand_educ FROM ls_cand_educ.
    ENDLOOP.
  ENDMETHOD.


  METHOD set_single_candidate_quali.
    DATA(ls_cand_qualification) = is_cand_qualification.
    ls_cand_qualification-q_object_type = 'Q'.
    ls_cand_qualification-begda         = sy-datum.
    ls_cand_qualification-endda         = '99991231'.
    ls_cand_qualification-istat         = 1.
    ls_cand_qualification-seqnr         = 1.

    DATA(lo_wd_assist) = NEW cl_hrrcf_m_qualis( ).

    SELECT SINGLE MAX( seqnr ) INTO @DATA(lv_seqnr) FROM hrp5105 WHERE objid = @ms_cand_hrobject-objid.
    DATA(ls_hrp5105) = VALUE hrp5105( objid         = ms_cand_hrobject-objid
                                      otype         = ms_cand_hrobject-otype
                                      plvar         = ms_cand_hrobject-plvar
                                      seqnr         = lv_seqnr + 1
                                      q_object_type = 'Q'
                                      q_object_id   = ls_cand_qualification-q_object_id
                                      begda         = sy-datum
                                      endda         = '99991231'
                                      istat         = 1
                                      infty         = '5105'
                                      otjid         = |{ ms_cand_hrobject-otype }{ ms_cand_hrobject-objid }|
                                      uname         = sy-uname
                                      aedtm         = sy-datum
                                      proficiency   = 2 ).

    ls_cand_qualification = CORRESPONDING #( ls_hrp5105 ).

    lo_wd_assist->sc_create_candidate_quali( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                                       is_qualification = ls_cand_qualification
                                             IMPORTING et_messages      = DATA(lt_messages) ).
    APPEND LINES OF lt_messages TO mt_messages.

    SELECT SINGLE objid INTO @ms_cand_hrobject-objid
      FROM hrp5105
      WHERE objid       = @ms_cand_hrobject-objid
        AND otype       = @ms_cand_hrobject-otype
        AND q_object_id = @ls_cand_qualification-q_object_id
        AND proficiency = @ls_cand_qualification-proficiency.

    IF sy-subrc <> 0.
      MODIFY hrp5105 FROM ls_hrp5105.
    ENDIF.
  ENDMETHOD.


  METHOD set_work_conditions.
    DATA ls_cand_prof_reccomendations TYPE zhr_cand_condit.

    ls_cand_prof_reccomendations = CORRESPONDING #( ms_cand_hrobject ).
    ls_cand_prof_reccomendations-wc_changeschedule      = ms_candidate-candidate_header-wc_changeschedule.
    ls_cand_prof_reccomendations-wc_flexsched           = ms_candidate-candidate_header-wc_flexsched.
    ls_cand_prof_reccomendations-wc_forwhile            = ms_candidate-candidate_header-wc_forwhile.
    ls_cand_prof_reccomendations-wc_fullday             = ms_candidate-candidate_header-wc_fullday.
    ls_cand_prof_reccomendations-wc_housecompens        = ms_candidate-candidate_header-wc_housecompens.
    ls_cand_prof_reccomendations-wc_not_fullday         = ms_candidate-candidate_header-wc_not_fullday.
    ls_cand_prof_reccomendations-wc_parttimenot         = ms_candidate-candidate_header-wc_parttimenot.
    ls_cand_prof_reccomendations-wc_remotework          = ms_candidate-candidate_header-wc_remotework.
    ls_cand_prof_reccomendations-wc_remote_combine_work = ms_candidate-candidate_header-wc_remote_combine_work.
    ls_cand_prof_reccomendations-wc_traveling_work      = ms_candidate-candidate_header-wc_remote_traveling_work.
    ls_cand_prof_reccomendations-wc_tripabroad          = ms_candidate-candidate_header-wc_tripabroad.
    ls_cand_prof_reccomendations-wc_triprb              = ms_candidate-candidate_header-wc_triprb.
    ls_cand_prof_reccomendations-wc_vahta               = ms_candidate-candidate_header-wc_vahta.

    MODIFY zhr_cand_condit FROM ls_cand_prof_reccomendations.
  ENDMETHOD.


  METHOD unlock_candidate.
    UPDATE hrp5102 SET status = '02' WHERE objid = ms_cand_hrobject-objid AND otype = ms_cand_hrobject-otype AND plvar = ms_cand_hrobject-plvar.
    DATA(lo_wd_assist) = NEW cl_hrrcf_m_candprofile( ).
    lo_wd_assist->sc_unlock_cand_hrobject( EXPORTING is_cand_hrobject = ms_cand_hrobject
                                           IMPORTING et_messages      = DATA(lt_messages) ).
    APPEND LINES OF lt_messages TO mt_messages.
    COMMIT WORK AND WAIT.

    periodical_services( ).
  ENDMETHOD.
ENDCLASS.