class ZCL_D_HA_I_T_FAILURE_ACTION_AN definition
  public
  inheriting from /BOBF/CL_LIB_D_SUPERCL_SIMPLE
  final
  create public .

public section.

  methods CREATE_NUMBER
    importing
      !IS_CTX type /BOBF/S_FRW_CTX_DET
      !IT_KEY type /BOBF/T_FRW_KEY
      !IO_READ type ref to /BOBF/IF_FRW_READ
      !IO_MODIFY type ref to /BOBF/IF_FRW_MODIFY
    exporting
      !EO_MESSAGE type ref to /BOBF/IF_FRW_MESSAGE
      !ET_FAILED_KEY type /BOBF/T_FRW_KEY
    raising
      /BOBF/CX_FRW .

  methods /BOBF/IF_FRW_DETERMINATION~EXECUTE
    redefinition .
protected section.
private section.
ENDCLASS.



CLASS ZCL_D_HA_I_T_FAILURE_ACTION_AN IMPLEMENTATION.


  method /BOBF/IF_FRW_DETERMINATION~EXECUTE.
  endmethod.


  method CREATE_NUMBER.
*    DATA:
*      lt_mod            TYPE /bobf/t_frw_modification,
*      lt_changed_fields TYPE /bobf/t_frw_name,
*      ev_id             TYPE NUMC10,
*      lt_malfunc        TYPE ztzha_i_product_t1,
*      lr_data           TYPE REF TO zszha_i_product_t1.
*
*
*    CALL FUNCTION 'NUMBER_GET_NEXT'
*      EXPORTING
*        nr_range_nr = '01'
*        object      = 'ZZHA_N_PR'
*      IMPORTING
*        number      = ev_id.
*
*    io_read->retrieve(
*    EXPORTING
*      iv_node = is_ctx-node_key
*      it_key = it_key
*    IMPORTING
*      et_data = lt_product
*    ).
*
*    LOOP AT lt_product ASSIGNING FIELD-SYMBOL(<fs_product>).
*      APPEND INITIAL LINE TO lt_mod ASSIGNING FIELD-SYMBOL(<fs_mod>).
*      <fs_mod>-node = is_ctx-node_key.
*      <fs_mod>-change_mode = /bobf/if_frw_c=>sc_modify_update.
*      <fs_mod>-key = <fs_product>-key.
*
*      APPEND ZIF_ZHA_I_PRODUCT_T1_C=>sc_node_attribute-zzha_i_product_t-statement_number
*        TO <fs_mod>-changed_fields.
*
*      CREATE DATA lr_data.
*      lr_data->statement_number = ev_id.
*      <fs_mod>-data = lr_data.
*    ENDLOOP.
*
*    io_modify->do_modify( it_modification = lt_mod ).

  endmethod.
ENDCLASS.