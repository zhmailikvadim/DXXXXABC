CLASS zcl_hr_v_check_fields DEFINITION
  PUBLIC
  INHERITING FROM /bobf/cl_lib_v_supercl_simple FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS /bobf/if_frw_validation~execute REDEFINITION.

  PROTECTED SECTION.

  PRIVATE SECTION.
    CONSTANTS gc_msgid TYPE msgid VALUE 'ZHR_RECRUITMENT'.

    METHODS validate_phone_number
      IMPORTING is_ctx            TYPE /bobf/s_frw_ctx_val
                is_header         TYPE zshri_candidateheader3
                iv_phone          TYPE comnr
      EXPORTING eo_message        TYPE REF TO /bobf/if_frw_message
      RETURNING VALUE(rv_success) TYPE abap_bool
      RAISING   cx_sy_matcher
                cx_sy_regex.

    METHODS validate_category_driver
      IMPORTING is_ctx            TYPE /bobf/s_frw_ctx_val
                is_header         TYPE zshri_candidateheader3
      EXPORTING eo_message        TYPE REF TO /bobf/if_frw_message
      RETURNING VALUE(rv_success) TYPE abap_bool.

    METHODS validate_category_tractor
      IMPORTING is_ctx            TYPE /bobf/s_frw_ctx_val
                is_header         TYPE zshri_candidateheader3
      EXPORTING eo_message        TYPE REF TO /bobf/if_frw_message
      RETURNING VALUE(rv_success) TYPE abap_bool.
ENDCLASS.



CLASS ZCL_HR_V_CHECK_FIELDS IMPLEMENTATION.


  METHOD /bobf/if_frw_validation~execute.
    TYPES ty_lt_sysmessages TYPE STANDARD TABLE OF symsg WITH DEFAULT KEY.

    DATA lt_header TYPE zthri_candidateheader3.

    io_read->retrieve( EXPORTING iv_node = is_ctx-node_key
                                 it_key  = it_key
                       IMPORTING et_data = lt_header ).

    LOOP AT lt_header ASSIGNING FIELD-SYMBOL(<ls_header>).
      DATA(lv_success) = abap_true.
      IF validate_phone_number( EXPORTING is_header  = <ls_header>
                                          iv_phone   = <ls_header>-num02_phone1
                                          is_ctx     = is_ctx
                                IMPORTING eo_message = eo_message ) = abap_false AND <ls_header>-num02_phone1 IS NOT INITIAL.

        lv_success = abap_false.
      ENDIF.
      IF validate_phone_number( EXPORTING is_header  = <ls_header>
                                          iv_phone   = <ls_header>-num02_phone2
                                          is_ctx     = is_ctx
                                IMPORTING eo_message = eo_message ) = abap_false.
        lv_success = abap_false.
      ENDIF.
      IF validate_category_driver( EXPORTING is_header  = <ls_header>
                                             is_ctx     = is_ctx
                                   IMPORTING eo_message = eo_message ) = abap_false.
        lv_success = abap_false.
      ENDIF.
      IF validate_category_tractor( EXPORTING is_header  = <ls_header>
                                              is_ctx     = is_ctx
                                    IMPORTING eo_message = eo_message ) = abap_false.
        lv_success = abap_false.
      ENDIF.
      IF lv_success = abap_false.
        APPEND VALUE #( key = <ls_header>-key ) TO et_failed_key.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD validate_category_driver.
    rv_success = abap_true.

    IF is_header-is_driver = abap_false OR ( is_header-is_driver = abap_true AND (    is_header-drivcat_a  = abap_true
                                                                                   OR is_header-drivcat_am = abap_true
                                                                                   OR is_header-drivcat_b  = abap_true
                                                                                   OR is_header-drivcat_be = abap_true
                                                                                   OR is_header-drivcat_c  = abap_true
                                                                                   OR is_header-drivcat_ce = abap_true
                                                                                   OR is_header-drivcat_d  = abap_true
                                                                                   OR is_header-drivcat_de = abap_true
                                                                                   OR is_header-drivcat_f  = abap_true
                                                                                   OR is_header-drivcat_i  = abap_true ) ).
      RETURN.
    ENDIF.

    rv_success = abap_false.

    DATA(ls_message) = VALUE symsg( msgty = /iwbep/cl_cos_logger=>error
                                    msgid = gc_msgid
                                    msgno = '004' ).

    IF lcl_buffer=>get_instance( )->set_messages( ls_message ) = abap_true.
      RETURN.
    ENDIF.

    IF eo_message IS NOT BOUND.
      eo_message = /bobf/cl_frw_factory=>get_message( ).
    ENDIF.

    eo_message->add_message( is_msg  = ls_message
                             iv_node = is_ctx-node_key
                             iv_key  = is_header-key ).
  ENDMETHOD.


  METHOD validate_category_tractor.
    rv_success = abap_true.

    IF is_header-tick_tractor = abap_false OR ( is_header-tick_tractor = abap_true AND (    is_header-tractcat_a = abap_true
                                                                                         OR is_header-tractcat_b = abap_true
                                                                                         OR is_header-tractcat_c = abap_true
                                                                                         OR is_header-tractcat_d = abap_true
                                                                                         OR is_header-tractcat_e = abap_true
                                                                                         OR is_header-tractcat_f = abap_true ) ).
      RETURN.
    ENDIF.

    rv_success = abap_false.

    DATA(ls_message) = VALUE symsg( msgty = /iwbep/cl_cos_logger=>error
                                    msgid = gc_msgid
                                    msgno = '005' ).

    IF lcl_buffer=>get_instance( )->set_messages( ls_message ) = abap_true.
      RETURN.
    ENDIF.

    IF eo_message IS NOT BOUND.
      eo_message = /bobf/cl_frw_factory=>get_message( ).
    ENDIF.

    eo_message->add_message( is_msg  = ls_message
                             iv_node = is_ctx-node_key
                             iv_key  = is_header-key ).
  ENDMETHOD.


  METHOD validate_phone_number.
    CHECK iv_phone IS NOT INITIAL.
    DATA(lv_msg_no) = '002'.

    rv_success = abap_true.

    TRY.
        IF cl_abap_matcher=>create( pattern     = '^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]{8,14}$'
                                    ignore_case = abap_true
                                    text        = iv_phone )->match( ) = abap_true.
          RETURN.
        ENDIF.

        rv_success = abap_false.

        DATA(ls_message) = VALUE symsg( msgty = /iwbep/cl_cos_logger=>error
                                        msgid = gc_msgid
                                        msgno = lv_msg_no
                                        msgv1 = iv_phone ).

        IF lcl_buffer=>get_instance( )->set_messages( ls_message ) = abap_true.
          RETURN.
        ENDIF.

        IF eo_message IS NOT BOUND.
          eo_message = /bobf/cl_frw_factory=>get_message( ).
        ENDIF.

        eo_message->get_messages( IMPORTING et_message = DATA(lt_messages) ).

        IF NOT line_exists( lt_messages[ message->if_t100_message~t100key-msgno = lv_msg_no ] ).
          eo_message->add_message( is_msg  = ls_message
                                   iv_node = is_ctx-node_key
                                   iv_key  = is_header-key ).
        ENDIF.
      CATCH cx_sy_matcher.
    ENDTRY.
  ENDMETHOD.
ENDCLASS.