CLASS ZCL_AA_ARM_AMDP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES IF_AMDP_MARKER_HDB.
    TYPES:
      BEGIN OF GTY_S_GRP_AFASL,
        GROUP_DESCR TYPE J_3RFDEPRGROUPT-DESCRIPT, " ГРУППА ОС
        AFASL       TYPE STRING,
        AFASL_TXT   TYPE STRING,
      END OF GTY_S_GRP_AFASL,
      GTY_T_AFASL TYPE SORTED TABLE OF GTY_S_GRP_AFASL WITH UNIQUE KEY GROUP_DESCR,

      " «ОС, ДВ В МА» И «ОС, ДВ В МА»  -  ОТЧЕТ 1 И 2
      BEGIN OF GTY_S_DATA_MA,
        ANLN1       TYPE ANLN1,                    " СИСТЕМНЫЙ НОМЕР
        ANLN2       TYPE ANLN2,                    " CУБНОМЕР
        INVNR       TYPE INVNR,                    " ИНВЕНТАРНЫЙ НОМЕР
        DEPGR       TYPE J_3RFAMORTGR,             " ГРУППА ОС
        GROUP_DESCR TYPE J_3RFDEPRGROUPT-DESCRIPT, " НАИМЕНОВАНИЕ ГРУППЫ АМОРТИЗАЦИИ
        KANSW       TYPE Z_ARM,                    " ПС (ПЕРЕОЦЕНЕННАЯ) НА НАЧАЛО ПЕРИОДА
        DEPR        TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА НАЧАЛО ГОДА
        POST        TYPE Z_ARM,                    " ПС ПОСТУПЛЕНИЕ ЗА ОТЧЕТНЫЙ ПЕРИОД
        AM_POST     TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ПОСТУПЛЕНИЕ ЗА ПЕРИОД
        REVAL       TYPE Z_ARM,                    " ДООЦЕНКА ПС
        UCENKA      TYPE Z_ARM,                    " УЦЕНКА ПС
        AM_REVAL    TYPE Z_ARM,                    " ДООЦЕНКА НАКОПЛЕННОЙ АМОРТИЗАЦИИ
        AM_UCENKA   TYPE Z_ARM,                    " УЦЕНКА НАКОПЛЕННОЙ АМОРТИЗАЦИИ
        ARM_REC     TYPE Z_ARM,                    " ИЗМЕНЕНИЯ В РЕЗУЛЬТАТЕ РЕКОНСТРУКЦИИ
        WT_BE       TYPE Z_ARM,                    " ВНУТРЕННЕЕ ДВИЖЕНИЕ ПС
        AM_WT       TYPE Z_ARM,                    " ВНУТРЕННЕЕ ДВИЖЕНИЕ НАКОПЛЕННОЙ АМОРТИЗАЦИИ
        VIB         TYPE Z_ARM,                    " ВЫБЫЛО ПС
        AM_VIB      TYPE Z_ARM,                    " ВЫБЫЛО НАКОПЛЕННАЯ АМОРТИЗАЦИЯ
        AM_PER      TYPE Z_ARM,                    " НАЧИСЛЕНО АМОРТИЗАЦИИ ЗА ОТЧЕТНЫЙ ПЕРИОД
        OBESZ       TYPE Z_ARM,                    " СУММЫ ОБЕСЦЕНЕНИЯ
        KANSW_END   TYPE Z_ARM,                    " ПС (ПЕРЕОЦЕНЕННАЯ) НА КОНЕЦ ПЕРИОДА
        AM_END      TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ПЕРИОДА
        AFASL       TYPE CHAR200,
        NDJAR_BEG   TYPE ZZPROPPER,
        NDJAR_END   TYPE ZZPROPPER,
        BRAS        TYPE ZAA_S_ARM_RFC-BRAS,       " КОД СТРОКИ РАСШИФРОВКИ В СООТВЕТСТВИИ СО СПРАВОЧНИКОМ
        BPRED       TYPE ZAA_S_ARM_RFC-BPRED,      " КОД ПРЕДПРИЯТИЯ
        WAERS       TYPE T001-WAERS,
        MONTH       TYPE I,
* --> AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств, переведенные на счет 4701000000 отражаются в графе «Поступило за отчетный период» со знаком “-“
        PS_TO47     TYPE Z_ARM,                    " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ПЕРЕВОД НА СЧ.47
        AM_TO47     TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ПЕРЕВОД НА СЧ.47
        PS_FROM47   TYPE Z_ARM,                    " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ВОЗВРАТ СО СЧ.47
        AM_FROM47   TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ВОЗВРАТ СО СЧ.47
* <-- AK_BUTVILOVSK #26097
      END OF GTY_S_DATA_MA,
      GTY_T_DATA_MA TYPE STANDARD TABLE OF GTY_S_DATA_MA WITH EMPTY KEY,

      " «НАЛИЧИЕ ОС В ПРОСТОЕ» - ОТЧЕТ 3
      BEGIN OF GTY_S_DATA_VID,
        ANLN1       TYPE ANLN1,                    " СИСТЕМНЫЙ НОМЕР
        ANLN2       TYPE ANLN2,                    " CУБНОМЕР
        INVNR       TYPE INVNR,                    " ИНВЕНТАРНЫЙ НОМЕР
        TXTF1       TYPE ZAFULL-TXTF1,             " НАИМЕНОВАНИЕ ОБЪЕКТА
        TXTF2       TYPE ZAFULL-TXTF2,             " НАИМЕНОВАНИЕ ОБЪЕКТА
        ADATU_IN    TYPE ZANLZ-ADATU,              " ДАТА ПЕРЕВОДА В ПРОСТОЙ
        ADATU_OUT   TYPE ZANLZ-ADATU,              " ДАТА ВЫВОДА ИЗ ПРОСТОЯ
        KANSWV      TYPE Z_ARM,                    " ВОССТАНОВИТЕЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ)
        DEPR_END    TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ПЕРИОДА
        OST_ST      TYPE Z_ARM,                    " ОСТАТОЧНАЯ СТОИМОСТЬ
        AM_PER      TYPE Z_ARM,                    " СУММА АМОРТИЗАЦИИ ЗА ОТЧЕТНЫЙ ПЕРИОД
        AM_MONTH    TYPE Z_ARM,                    " СУММА АМОРТИЗАЦИИ В Т.Ч. ЗА МЕСЯЦ
        COSTS       TYPE Z_ARM,                    " ЗАТРАТЫ НА СОДЕРЖАНИЕ ЗА ОТЧЕТНЫЙ ПЕРИОД
        COSTS_MONTH TYPE Z_ARM,                    " ЗАТРАТЫ НА СОДЕРЖАНИЕ В Т.Ч. ЗА МЕСЯЦ
        CAUSE_OUT   TYPE CHAR200,                  " ПРИЧИНА ВЫВОДА ИЗ ЭКСПЛУАТАЦИИ, ПРИНЯТЫЕ МЕРЫ
        BRAS        TYPE ZAA_S_ARM_RFC-BRAS,       " КОД СТРОКИ РАСШИФРОВКИ В СООТВЕТСТВИИ СО СПРАВОЧНИКОМ
        BPRED       TYPE ZAA_S_ARM_RFC-BPRED,      " КОД ПРЕДПРИЯТИЯ
        WAERS       TYPE T001-WAERS,
      END OF GTY_S_DATA_VID,
      GTY_T_DATA_VID TYPE STANDARD TABLE OF GTY_S_DATA_VID WITH EMPTY KEY,

      " «БЕЗВОЗМЕЗДНАЯ ПЕРЕДАЧА ОС» И «ВНЕСЕНИЕ ОС В УК ДРУГИХ ОРГАНИЗАЦИЙ»  - ОТЧЕТ 4 И 5
      BEGIN OF GTY_S_DATA_BWASL,
        ANLN1      TYPE ANLN1,                    " СИСТЕМНЫЙ НОМЕР
        ANLN2      TYPE ANLN2,                    " CУБНОМЕР
        INVNR      TYPE INVNR,                    " ИНВЕНТАРНЫЙ НОМЕР
        TXTF1      TYPE ZAFULL-TXTF1,             " НАИМЕНОВАНИЕ ОБЪЕКТА
        TXTF2      TYPE ZAFULL-TXTF2,             " НАИМЕНОВАНИЕ ОБЪЕКТА
        OKOF       TYPE CHAR200,                  " ШИФР ПО КЛАССИФИКАТОРУ + НАИМЕНОВАНИЕ ГРУППЫ ОС
        DEAKT      TYPE ANLA-DEAKT,               " ДАТА ПЕРЕДАЧИ ДЛЯ 4/ ДАТА ОЦЕНКИ ДЛЯ 5
        DEAKT5     TYPE ANLA-DEAKT,               " ДАТА ВНЕСЕНИЯ ТОЛЬКО ДЛЯ 5
        PER_ST     TYPE Z_ARM,                    " ПС НА ДАТУ СПИСАНИЯ
        AMORT_ST   TYPE Z_ARM,                    " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА ДАТУ СПИСАНИЯ
        OSTAT_ST   TYPE Z_ARM,                    " ОСТАТОЧНАЯ СТОИМОСТЬ
        BU_PARTNER TYPE STRING,                   " КОМУ ПЕРЕДАНО - НАИМЕНОВАНИЕ КОНТРАГЕНТА
        PRIM       TYPE CHAR200,                  " ПРИМЕЧАНИЕ
        BRAS       TYPE ZAA_S_ARM_RFC-BRAS,       " КОД СТРОКИ РАСШИФРОВКИ В СООТВЕТСТВИИ СО СПРАВОЧНИКОМ
        BPRED      TYPE ZAA_S_ARM_RFC-BPRED,      " КОД ПРЕДПРИЯТИЯ
        WAERS      TYPE T001-WAERS,
        FLAG       TYPE CHAR1,
      END OF GTY_S_DATA_BWASL,
      GTY_T_DATA_BWASL TYPE STANDARD TABLE OF GTY_S_DATA_BWASL WITH EMPTY KEY,

      " «СПИСАНИЕ И ИНОЕ ВЫБЫТИЕ ОС» - ОТЧЕТ 6
      BEGIN OF GTY_S_DATA_SPIS,
        ANLN1      TYPE ANLN1,                    " СИСТЕМНЫЙ НОМЕР
        ANLN2      TYPE ANLN2,                    " CУБНОМЕР
        INVNR      TYPE INVNR,                    " ИНВЕНТАРНЫЙ НОМЕР (BSUMMA10)
        TXTF1      TYPE ZAFULL-TXTF1,             " НАИМЕНОВАНИЕ СТАТЬИ
        TXTF2      TYPE ZAFULL-TXTF2,             " НАИМЕНОВАНИЕ СТАТЬИ (BSTATNAME)
        OKOF       TYPE CHAR200,                  " ШИФР ПО КЛАССИФИКАТОРУ (BTEXT12)
        DEAKT      TYPE ANLA-DEAKT,               " ДАТА СПИСАНИЯ (BDATE)
        PER_ST     TYPE Z_ARM,                    " ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ (BSUMMA1)
        OSTAT_91   TYPE Z_ARM,                    " ОСТАТОЧНАЯ СТОИМОСТЬ, СПИСАННАЯ НА СЧЕТ СЧ.91 (BSUMMA2)
        OSTAT_ST   TYPE Z_ARM,                    " ОСТАТОЧНАЯ СТОИМОСТЬ, ИНОЕ ВЫБЫТИЕ (BSUMMA3)
        BU_PARTNER TYPE STRING,                   " ОРГАН УПРАВЛЕНИЯ, СОГЛАСОВАВШИЙ СПИСАНИЕ (BTEXT11) - НАИМЕНОВАНИЕ КОНТРАГЕНТА
        PRIM       TYPE CHAR200,                  " ПРИМЕЧАНИЕ (BTEXT13)
        BRAS       TYPE ZAA_S_ARM_RFC-BRAS,       " КОД СТРОКИ РАСШИФРОВКИ В СООТВЕТСТВИИ СО СПРАВОЧНИКОМ
        BPRED      TYPE ZAA_S_ARM_RFC-BPRED,      " КОД ПРЕДПРИЯТИЯ
        WAERS      TYPE T001-WAERS,
        FLAG       TYPE CHAR1,
      END OF GTY_S_DATA_SPIS,
      GTY_T_DATA_SPIS TYPE STANDARD TABLE OF GTY_S_DATA_SPIS WITH EMPTY KEY,

      " «РБП» - ОТЧЕТ 7
      BEGIN OF GTY_S_DATA_RBP,
        ANLN1     TYPE ANLN1,                    " СИСТЕМНЫЙ НОМЕР
        ANLN2     TYPE ANLN2,                    " CУБНОМЕР
        ANLKL     TYPE ANLKL,
        INVNR     TYPE INVNR,                    " ИНВЕНТАРНЫЙ НОМЕР
        DEPGR     TYPE GLOFAAASSETDATA-GLO_RUS_DEPGR,
        TXTF1     TYPE ZAFULL-TXTF1,             " НАИМЕНОВАНИЕ СТАТЬИ
        TXTF2     TYPE ZAFULL-TXTF2,             " НАИМЕНОВАНИЕ СТАТЬИ
        AKTIV     TYPE ANLA-AKTIV,               " ДАТА ОБРАЗОВАНИЯ
        AKTIV_END TYPE ANLA-AKTIV,               " КОНЕЧНАЯ ДАТА ОТНЕСЕНИЯ НА РАСХОДЫ
        SUMM      TYPE Z_ARM,                    " СУММА
        WAERS     TYPE T001-WAERS,
        KTANSW    TYPE KTANSW,
      END OF GTY_S_DATA_RBP,
      GTY_T_DATA_RBP TYPE STANDARD TABLE OF GTY_S_DATA_RBP WITH EMPTY KEY,
      LR_BWASL TYPE RANGE OF BWASL.

    CLASS-METHODS:
      GET_DATA IMPORTING VALUE(IV_SDATE)     TYPE DATE
                         VALUE(IV_EDATE)     TYPE DATE
                         VALUE(IV_FORM)      TYPE CHAR2
                         VALUE(IV_BUKRS)     TYPE BUKRS
                         VALUE(IV_NDJAR)     TYPE CHAR4
                         VALUE(IV_NDPER)     TYPE CHAR4
                         VALUE(IV_DIV)       TYPE I
                         VALUE(IV_FLT)       TYPE STRING
               EXPORTING VALUE(ET_DATA_MA)   TYPE GTY_T_DATA_MA
                         VALUE(ET_GRP_AFASL) TYPE GTY_T_AFASL
               RAISING   CX_AMDP_ERROR,

      GET_DATA_VID IMPORTING VALUE(IV_SDATE)     TYPE DATE
                             VALUE(IV_EDATE)     TYPE DATE
                             VALUE(IV_BUKRS)     TYPE BUKRS
                             VALUE(IV_DIV)       TYPE I
                             VALUE(IV_FLT)       TYPE STRING
                             VALUE(IV_FLT_RACCT) TYPE STRING
                   EXPORTING VALUE(ET_DATA_VID)  TYPE GTY_T_DATA_VID
                   RAISING   CX_AMDP_ERROR,

      GET_DATA_BWASL IMPORTING VALUE(IV_SDATE) TYPE DATE
                               VALUE(IV_EDATE) TYPE DATE
                               VALUE(IV_FORM)  TYPE CHAR2
                               VALUE(IV_BUKRS) TYPE BUKRS
                               VALUE(IV_DIV)   TYPE I
                               VALUE(IV_FLT)   TYPE STRING
                               VALUE(IV_BWASL) TYPE STRING
                     EXPORTING VALUE(ET_BWASL) TYPE GTY_T_DATA_BWASL
                     RAISING   CX_AMDP_ERROR,

      GET_DATA_SPIS IMPORTING VALUE(IV_SDATE)     TYPE DATE                                          " «СПИСАНИЕ И ИНОЕ ВЫБЫТИЕ ОС» - ОТЧЕТ 6
                              VALUE(IV_EDATE)     TYPE DATE
                              VALUE(IV_BUKRS)     TYPE BUKRS
                              VALUE(IV_DIV)       TYPE I
                              VALUE(IV_FLT)       TYPE STRING
                              VALUE(IV_FLT_BWASL) TYPE STRING
                    EXPORTING VALUE(ET_SPIS)      TYPE GTY_T_DATA_SPIS
                    RAISING   CX_AMDP_ERROR,

      GET_DATA_RBP IMPORTING VALUE(IV_SDATE) TYPE DATE                                          " «РБП» - ОТЧЕТ 7
                             VALUE(IV_BUKRS) TYPE BUKRS
                             VALUE(IV_DIV)   TYPE I
                             VALUE(IV_FLT)   TYPE STRING
                   EXPORTING VALUE(ET_RBP)   TYPE GTY_T_DATA_RBP
                   RAISING   CX_AMDP_ERROR.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_AA_ARM_AMDP IMPLEMENTATION.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB
                              LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                              USING ANLA T001 T095 FAAV_ANLC ZANLU GLOFAAASSETDATA J_3RFDEPRGROUPT
                                    ZAA_V0_MOVE TABW TABWG FAAV_ANLP TVARVC ZAA_UTILS_HDB=>GET_ASSET_VALUES
                                    J_3RFANKA ANLB ANLBZA T093C T090NAT ZAA_UTILS_HDB=>GET_ASSET_VAL_NG.

    --«ОС, ДВ В МА» И «НМА»
    DECLARE LV_MANDT     CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS     CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_AFABE     CHAR(2) := '01';                           -- ОБЛАСТЬ ОЦЕНКУ БУ
    DECLARE LV_GDATE     CHAR(8) := YEAR(:IV_SDATE) ||  '0000';     -- ДАТА НАЧАЛО ГОДА
    DECLARE LV_TYPE      CHAR(10);
    DECLARE LV_NEXT_DATE CHAR(8);

    IF RIGHT (IV_EDATE,2) = 01 THEN
      IV_EDATE = TO_DATS(LAST_DAY( :IV_EDATE ) );
    END IF;
    IF :IV_FORM = 1 THEN
      LV_TYPE = 'FIXEDASSET';
    ELSEIF :IV_FORM = 2 THEN
      LV_TYPE = 'INTANASSET';
    END IF;
    LV_NEXT_DATE = TO_DATS(ADD_DAYS( LAST_DAY( :IV_EDATE ) ,1) );

  LT_DATA =
     SELECT DISTINCT
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.ANLKL,
        FANKA.ANKA_TYPE,
        ANLA.AKTIV,
        ANLA.DEAKT,
        ANLA.INVNR,
        GLO.GLO_RUS_DEPGR AS DEPGR,
        GLO.GLO_RUS_OKOF AS OKOF,
        ZANLU.GRMSFO,
        ZANLU.BU_PARTNER,
        SUBSTRING( AM_GROUP.DESCRIPT, 1, 1 ) || LOWER( SUBSTRING( AM_GROUP.DESCRIPT, 2, LENGTH( AM_GROUP.DESCRIPT ) ) ) AS GROUP_DESCR,
        T095.KTANSW,
        COALESCE(ANLC.KANSW + ANLC.KAUFW,0 ) AS KANSW_YAER,                                                   -- ПС НА НАЧАЛО ГОДА
        COALESCE(ASSET_BEG.KANSW, 0 ) AS KANSW,                                                               -- ПС ЗА ПЕРИОД
        COALESCE( ABS(ANLC.KNAFA + ANLC.KAAFA + ANLC.KAUFN ), 0 ) AS DEPR,                                    -- ИЗНОС - НАКОПЛЕННАЯ АМОРТ. НА НАЧАЛО ГОДА
        ( SELECT ABS( COALESCE( SUM ( NAFAZ + SAFAZ + AAFAZ ), 0 ) )
               FROM FAAV_ANLP
              WHERE MANDT  = ANLA.MANDT
                AND BUKRS  = ANLA.BUKRS
                AND ANLN1  = ANLA.ANLN1
                AND ANLN2  = ANLA.ANLN2
                AND AFABER = :LV_AFABE
                AND GJAHR  = YEAR ( :IV_SDATE )
                AND RIGHT(PERAF,2) BETWEEN MONTH (:IV_SDATE) AND MONTH (:IV_EDATE) ) AS AM_PER,               -- АМОРТИЗАЦИЯ ЗА ПЕРИОД
        COALESCE(ASSETS.KANSW, 0 ) AS KANSW_END,                                                              -- ПС НА КОНЕЦ
        COALESCE(ASSETS.KNAFA + ASSETS.KAAFA + ASSETS.KAUFN, 0 ) AS NV_FIN,                                   -- ВСЯ НА НА СЛЕДУЩИЙ ДЕНЬ КОНЕЧНОГО ПЕРИОДА
        COALESCE(ASSETS.NETVL,0) AS NETVL,                                                                    -- ОС. РАССЧИТЫВАЕТСЯ КАК РАЗНИЦА ПС И АМОРТИЗАЦИИ

        -- СПОСОБ НАЧИСЛЕНИЯ АМОРТИЗАЦИИ - ВСЕ, КОТОРЫЕ ВСТРЕЧАЛИСЬ ЗА ПЕРИОД.
        '' AS AFASL,
        CONCAT( CONCAT( TO_INTEGER(COALESCE(ANLBZA.NDJAR, ANLB.NDJAR) ),','),
        RIGHT( RPAD ( TO_INTEGER(COALESCE(ANLBZA.NDPER, ANLB.NDPER) ) / 12, 4, ' ' ),2) ) AS NDJAR_BEG,       -- СПИ, ЛЕТ, МЕС
        0 AS NDJAR_END,
        TO_INTEGER(COALESCE(ANLBZA.NDJAR, ANLB.NDJAR) ) * 12 + TO_INTEGER(COALESCE(ANLBZA.NDPER, ANLB.NDPER) ) AS MONTH,
        ANLB.AFASL AS AFASLM,
        T001.WAERS,
        0 AS ITOG_1
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                                   -- СЧЕТА ЗАПАСА КЛАССА ОС
                                AND T095.KTOPL = T001.KTOPL
                                AND T095.KTOGR = ANLA.KTOGR
                                AND T095.AFABE = :LV_AFABE
        LEFT JOIN J_3RFANKA AS FANKA ON  FANKA.MANDT = ANLA.MANDT
                                     AND FANKA.ANLKL = ANLA.ANLKL
                                     AND FANKA.ANKA_TYPE = :LV_TYPE
        LEFT OUTER JOIN FAAV_ANLC AS ANLC ON  ANLC.MANDT = ANLA.MANDT                                         -- ПC ЧИСЛЯЩИХСЯ НА НАЧАЛО ОТЧЕТНОГО ГОДА
                                          AND ANLC.BUKRS = ANLA.BUKRS
                                          AND ANLC.ANLN1 = ANLA.ANLN1
                                          AND ANLC.ANLN2 = ANLA.ANLN2
                                          AND ANLC.AFABE = :LV_AFABE
                                          AND ANLC.GJAHR = YEAR(:IV_SDATE)
        LEFT OUTER JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                                       AND ZANLU.INVNR = ANLA.INVNR
        LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                               AND ANLA.BUKRS = GLO.BUKRS
                                               AND ANLA.ANLN1 = GLO.ANLN1
                                               AND ANLA.ANLN2 = GLO.ANLN2
        LEFT OUTER JOIN J_3RFDEPRGROUPT AS AM_GROUP ON  AM_GROUP.MANDT = GLO.MANDT
                                                    AND AM_GROUP.SPRSL = :LV_SPRAS
                                                    AND AM_GROUP.AMORTGR = GLO.GLO_RUS_DEPGR
        LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( P_CLNT => :LV_MANDT, P_DATE => :IV_SDATE, P_AMNT => '') AS ASSET_BEG
                                     ON  ASSET_BEG.BUKRS = ANLA.BUKRS
                                     AND ASSET_BEG.ANLN1 = ANLA.ANLN1
                                     AND ASSET_BEG.ANLN2 = ANLA.ANLN2
                                     AND ASSET_BEG.AFABE = :LV_AFABE
        LEFT OUTER JOIN ANLB AS ANLB ON  ANLB.MANDT = ANLA.MANDT                                              -- ДАННЫЕ ПО ОЦЕНКЕ ОС НА ТЕК МОМЕНТ
                                     AND ANLB.BUKRS = ANLA.BUKRS
                                     AND ANLB.ANLN1 = ANLA.ANLN1
                                     AND ANLB.ANLN2 = ANLA.ANLN2
                                     AND ANLB.AFABE = :LV_AFABE
        LEFT OUTER JOIN ANLBZA AS ANLBZA ON  ANLBZA.MANDT = ANLA.MANDT                                        -- ДАННЫЕ ПО ОЦЕНКЕ НА КОНЕЦ ОТЧЕТА
                                         AND ANLBZA.BUKRS = ANLA.BUKRS
                                         AND ANLBZA.ANLN1 = ANLA.ANLN1
                                         AND ANLBZA.ANLN2 = ANLA.ANLN2
                                         AND ANLBZA.ADATU <= :IV_EDATE
                                         AND ANLBZA.BDATU >= :IV_EDATE
                                         AND ANLBZA.AFABE = :LV_AFABE
        LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( P_CLNT => :LV_MANDT, P_DATE => :LV_NEXT_DATE, P_AMNT => '') AS ASSETS
                                  ON  ASSETS.BUKRS = ANLA.BUKRS
                                  AND ASSETS.ANLN1 = ANLA.ANLN1
                                  AND ASSETS.ANLN2 = ANLA.ANLN2
                                  AND ASSETS.AFABE = :LV_AFABE
      WHERE ANLA.MANDT = :LV_MANDT
        AND ANLA.BUKRS = :IV_BUKRS
        AND ANLA.AKTIV <= :IV_EDATE AND ANLA.AKTIV > '00000000'
        AND ( ANLA.DEAKT >= :IV_SDATE OR ANLA.DEAKT = '00000000' )
        AND FANKA.ANKA_TYPE IS NOT NULL ;

    LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

    IF IS_EMPTY ( :LT_DATA )
      THEN RETURN;
    END IF;
    -- ВЫБОРКА ВСЕХ КОДОВ АМОРТИЗАЦИИ ПО ОТФИЛЬТРОВАННЫМ ОС
    LT_AA_AFASL =
      SELECT DISTINCT
             AA.BUKRS,
             AA.ANLN1,
             AA.ANLN2,
             AA.GROUP_DESCR,
             CASE WHEN T090NAT.AFATXT <> '' THEN COALESCE(ANLBZA.AFASL, ANLB.AFASL) || '-' || T090NAT.AFATXT
                                            ELSE COALESCE(ANLBZA.AFASL, ANLB.AFASL)
             END AS AFASL,
             T090NAT.AFATXT AS AFASL_TXT
        FROM :LT_DATA AS AA
          JOIN ANLB AS ANLB ON  ANLB.MANDT = :LV_MANDT
                            AND ANLB.BUKRS = AA.BUKRS
                            AND ANLB.ANLN1 = AA.ANLN1
                            AND ANLB.ANLN2 = AA.ANLN2
                            AND ANLB.AFABE = :LV_AFABE
          LEFT OUTER JOIN ANLBZA AS ANLBZA  ON  ANLBZA.MANDT = ANLB.MANDT
                                            AND ANLBZA.BUKRS = ANLB.BUKRS
                                            AND ANLBZA.ANLN1 = ANLB.ANLN1
                                            AND ANLBZA.ANLN2 = ANLB.ANLN2
                                            AND ( ANLBZA.ADATU <= :IV_EDATE AND ANLBZA.BDATU >= :IV_SDATE )
                                            AND ANLBZA.AFABE = ANLB.AFABE
          LEFT OUTER JOIN T093C AS T093C ON  T093C.MANDT = ANLB.MANDT
                                         AND T093C.BUKRS = ANLB.BUKRS
          LEFT OUTER JOIN T090NAT AS T090NAT ON  T090NAT.MANDT = T093C.MANDT
                                             AND T090NAT.AFASL = COALESCE(ANLBZA.AFASL, ANLB.AFASL)
                                             AND T090NAT.AFAPL = T093C.AFAPL
                                             AND T090NAT.SPRAS = :LV_SPRAS ;

    LT_DATA =
      SELECT  LT.BUKRS,
              LT.ANLN1,
              LT.ANLN2,
              LT.ANLKL,
              LT.ANKA_TYPE,
              LT.AKTIV,
              LT.DEAKT,
              LT.INVNR,
              LT.DEPGR,
              LT.OKOF,
              LT.GRMSFO,
              LT.BU_PARTNER,
              LT.GROUP_DESCR,
              LT.KTANSW,
              LT.KANSW_YAER,                              -- ПС НА НАЧАЛО ГОДА
              LT.KANSW,                                   -- ПС ЗА ПЕРИОД
              LT.DEPR,                                    -- ИЗНОС - НАКОПЛЕННАЯ АМОРТ. НА НАЧАЛО ГОДА
              LT.AM_PER,                                  -- АМОРТИЗАЦИЯ ЗА ПЕРИОД
              LT.KANSW_END,                               -- ПС НА КОНЕЦ
              LT.NV_FIN,
              LT.NETVL,
              ( SELECT STRING_AGG( AFASL, ', ')
                  FROM :LT_AA_AFASL
                  WHERE BUKRS = LT.BUKRS
                    AND ANLN1 = LT.ANLN1
                    AND ANLN2 = LT.ANLN2 ) AS AFASL,
              LT.NDJAR_BEG,                               -- СПИ, ЛЕТ, МЕС
              0 AS NDJAR_END,
              LT.MONTH,
              LT.AFASLM,
              LT.WAERS,
              CASE WHEN COALESCE(LT.KANSW,0) <> 0 OR COALESCE(LT.DEPR,0) <> 0 OR  COALESCE(LT.AM_PER,0) <> 0 OR COALESCE(LT.KANSW_END,0) <> 0 THEN 1 ELSE 0 END AS ITOG_1
        FROM :LT_DATA AS LT;
        ET_GRP_AFASL =
          SELECT GROUP_DESCR,
                 STRING_AGG( AFASL, ', ') AS AFASL,
                 STRING_AGG( AFASL_TXT, ', ') AS AFASL_TXT
            FROM ( SELECT DISTINCT GROUP_DESCR, AFASL, AFASL_TXT
                     FROM :LT_AA_AFASL ) AS DIST
            GROUP BY GROUP_DESCR;

   LT_MOVS =
     SELECT DISTINCT
        DATA.BUKRS,
        DATA.ANLN1,
        DATA.ANLN2,
        COALESCE(ABS(MOVS.KANSW),0) AS M_KANSW,                                                                                              -- СУММА ДВИЖЕН. СТОИМОСТ.
        COALESCE(ABS(MOVS.DEPRE),0) AS M_DEPR,                                                                                               -- СУММА ДВИЖЕН. ИЗНОСА
        MOVS.LNSAN,
        MOVS.BWASL,
        TABWG.GITCOL,
        MOVS.BELNR,
        DATA.DEPGR AS DEPGR_POST,
        BT_BE.LOW AS BT_BWASL,
        WT_BE.LOW AS WT_BWASL,

        COALESCE( ABS(MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN),0) AS AMORT,
        CASE WHEN ( TABWG.BWATYP = 6 ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN COALESCE(MOVS.KANSW,0) ELSE 0 END AS M_KANSW_R,              -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
        CASE WHEN ( TABWG.BWATYP = 6 ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN COALESCE(MOVS.DEPRE,0) ELSE 0 END AS M_DEPR_R,               -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА

        -- ПС ПОСТУПИЛО ЗА ОТЧЕТНЫЙ ПЕРИОД                                                                                                   -- КОЛОНКА 8
        CASE WHEN TABWG.GITCOL IN ( '1', '3') AND BT_BE.LOW IS NULL AND ARM_REC.LOW IS NULL
              AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
              AND LEFT( MOVS.BWASL, 1) <> 'W'
             THEN COALESCE(MOVS.KANSW,0)--ABS()

             --ЕСЛИ СМЕНЫ НЕ БЫЛО ТО СУММА НЕ ЗАПИСЫВАЕТСЯ В ЭТУ ГРАФУ, А ЗАПИСЫВАЕТСЯ В ГРАФУ ПОСТУПЛЕНИЕ С -.
             WHEN TABWG.GITCOL IN ( '2', '4')  AND BT_BE.LOW IS NULL AND ARM_REC.LOW IS NULL
                    AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
                    AND WT_BE.LOW IS NOT NULL AND LEFT( MOVS.BWASL, 1) <> 'W'
                THEN COALESCE(MOVS.KANSW,0)--  - ABS()
             ELSE 0 END AS POST,

        -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ПОСТУПИВШИХ ЗА ПЕРИОД                                                                                     -- КОЛОНКА 9
        CASE WHEN TABWG.GITCOL IN ( '1', '3') AND BT_BE.LOW IS NULL AND ARM_REC.LOW IS NULL
                  AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
                  AND LEFT( MOVS.BWASL, 1) <> 'W'
             THEN COALESCE( ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 )

             --ЕСЛИ СМЕНЫ НЕ БЫЛО ТО СУММА НЕ ЗАПИСЫВАЕТСЯ В ЭТУ ГРАФУ, А ЗАПИСЫВАЕТСЯ В ГРАФУ ПОСТУПЛЕНИЕ С -.
             WHEN TABWG.GITCOL IN ( '2', '4') AND WT_BE.LOW IS NOT NULL AND LEFT( MOVS.BWASL, 1) <> 'W'
              AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
                THEN - (COALESCE( ABS(MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN), 0 ) )
             ELSE 0 END AS AM_POST,

        -- ИСКЛЮЧИТЬ ДВИЖЕНИЯ W* С ПОСТУПЛЕНИЯ ПС И НА
        CASE WHEN LEFT (MOVS.BWASL,1) = 'W' THEN COALESCE(ABS(MOVS.KANSW),0) ELSE 0 END AS BWASL_OUT_PS,
        CASE WHEN LEFT (MOVS.BWASL,1) = 'W' THEN COALESCE( ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 ) ELSE 0 END AS BWASL_OUT_AM,

        CASE WHEN :IV_FORM = 2 THEN   -- ЕСЛИ ОТЧЕТ НМА - ДООЦЕНКА И УЦЕНКА ВЫВОДИТСЯ В ОДНОЙ КОЛОНКЕ
                                 CASE WHEN ARM_DOP.LOW  IS NOT NULL THEN COALESCE(ABS(MOVS.KANSW),0)                                   -- ДООЦЕНКУ ВЫВОДИМ С +
                                      WHEN ARM_UCEN.LOW IS NOT NULL THEN COALESCE( - ABS(MOVS.KANSW),0)                                -- УЦЕНКУ С -
                                      ELSE 0 END
                                      -- ЕСЛИ ОТЧЕТ ДМА - ВЫВОДИТСЯ ТОЛЬКО ДООЦЕНКА
                               ELSE CASE WHEN ARM_DOP.LOW IS NOT NULL THEN COALESCE(MOVS.KANSW,0)                                      -- ДООЦЕНКА ПС ЗА ПЕРИОД
                                                                      ELSE 0 END
        END AS REVAL,                                                                                                                  -- КОЛОНКА 10

        -- СЧИТАЕТСЯ ТОЛЬКО ДЛЯ ОТЧЕТА ДМА
        CASE WHEN :IV_FORM = 1 AND ARM_UCEN.LOW IS NOT NULL THEN COALESCE(- ABS(MOVS.KANSW),0)
                                                            ELSE 0 END AS UCENKA,                                                      -- КОЛОНКА 11

        -- ДООЦЕНКА АМОРТИЗАЦИИ ЗА ПЕРИОД
        CASE WHEN :IV_FORM = 2 THEN
                                 -- ЕСЛИ ОТЧЕТ НМА - ДООЦЕНКА И УЦЕНКА ВЫВОДИТСЯ В ОДНОЙ КОЛОНКЕ
                                 CASE WHEN ARM_DOP.LOW  IS NOT NULL THEN COALESCE( ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 )    -- ДООЦЕНКУ ВЫВОДИМ С +
                                      WHEN ARM_UCEN.LOW IS NOT NULL THEN COALESCE( - ( ABS(MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN)), 0 ) -- УЦЕНКУ С -
                                      ELSE 0 END
                               -- ЕСЛИ ОТЧЕТ ДМА - ВЫВОДИТСЯ ТОЛЬКО ДООЦЕНКА
                               ELSE CASE WHEN ARM_DOP.LOW  IS NOT NULL THEN COALESCE( ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 )
                                                                       ELSE 0 END
        END AS AM_REVAL,                                                                                                               -- КОЛОНКА 12
        -- СЧИТАЕТСЯ ТОЛЬКО ДЛЯ ОТЧЕТА ДМА
        CASE WHEN :IV_FORM = 1 AND ARM_UCEN.LOW IS NOT NULL THEN COALESCE( - ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 )          -- УЦЕНКА АМОРТИЗАЦИИ ЗА ПЕРИОД
                                                            ELSE 0 END AS AM_UCENKA,                                                   -- КОЛОНКА 13
        CASE WHEN ARM_REC.LOW IS NOT NULL THEN
                                 -- ЕСЛИ ОТЧЕТ НМА - ДООЦЕНКА И УЦЕНКА ВЫВОДИТСЯ В ОДНОЙ КОЛОНКЕ
                                 CASE WHEN TABWG.GITCOL IN ( '1', '3')  THEN COALESCE(MOVS.KANSW,0)                             -- ПО ПОСТУПИВШИМ С + COALESCE(ABS(MOVS.KANSW),0) изменение по тикету #24140
                                      WHEN TABWG.GITCOL IN ( '2', '4')  THEN COALESCE(MOVS.KANSW,0)                             -- ПО ВЫБЫВШИМ С - COALESCE( - ABS(MOVS.KANSW),0) изменение по тикету #24140
                                      ELSE 0 END
                                -- ЕСЛИ ОТЧЕТ ДМА - ВЫВОДИТСЯ ТОЛЬКО ДООЦЕНКА
                                ELSE 0
        END AS ARM_REC,
        CASE WHEN BT_BE.LOW IS NOT NULL -- AND GLO2.GLO_RUS_DEPGR IS NOT NULL
          THEN COALESCE(MOVS.KANSW,0) ELSE 0 END AS WT_BE,
        CASE WHEN BT_BE.LOW IS NOT NULL -- AND GLO2.GLO_RUS_DEPGR IS NOT NULL
          THEN  ( -1 ) * COALESCE(MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN, 0 ) ELSE 0 END AS AM_WT,

        -- ЕСЛИ СМЕНА БЫЛА УЧИТЫВАЕТСЯ КАК ВЫБЫТИЕ, ЕСЛИ СМЕНЫ НЕ БЫЛО ТО СУММА НЕ ЗАПИСЫВАЕТСЯ В ЭТУ ГРАФУ, А ЗАПИСЫВАЕТСЯ В ГРАФУ ПОСТУПЛЕНИЕ С -.
        -- ВЫБИРАЮТСЯ ВСЕ ДВИЖЕНИЯ ВЫБЫТИЯ (2,4)
        CASE WHEN TABWG.GITCOL IN ( '2', '4') AND BT_BE.LOW IS NULL AND WT_BE.LOW IS NULL
              AND ARM_REC.LOW IS NULL                                                                                                 -- КОЛОНКА 17
              AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
             THEN COALESCE( ABS( MOVS.KANSW ), 0 ) ELSE 0 END AS VIB,                                                                 -- ВЫБЫЛО ЗА ГОД ВСЕГО

        CASE WHEN TABWG.GITCOL IN ( '2', '4') AND BT_BE.LOW IS NULL AND  WT_BE.LOW IS NULL
              AND ARM_REC.LOW IS NULL                                                                                                 -- КОЛОНКА 18
              AND TO_ACC47.LOW IS NULL AND FROM_ACC47.LOW IS NULL                          -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
             THEN COALESCE( ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0 ) ELSE 0 END AS AM_VIB,                                    -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ОТЧЕТНОГО ПЕРИОДА (BSUMMA18)


        CASE WHEN TABWG.GITCOL IN ( '2', '4') AND WT_BE.LOW IS NULL
             THEN COALESCE( MOVS.KANSW, 0 ) ELSE 0 END AS GR_VIB,                                                                     -- СМЕНЫ НЕ ПРОЗОШЛО - ИДЕТ В ПОСТУПЛЕНИЕ
        CASE WHEN TABWG.GITCOL IN ( '2', '4') AND WT_BE.LOW IS NULL
             THEN COALESCE( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN, 0 ) ELSE 0 END AS GR_AM_VIB,
             0 AS ITOG_2,
-- --> AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств, переведенные на счет 4701000000 отражаются в графе «Поступило за отчетный период» со знаком “-“
         CASE WHEN ( TABWG.GITCOL = '4' ) AND TO_ACC47.LOW IS NOT NULL THEN COALESCE(ABS( MOVS.KANSW ), 0)
              ELSE 0 END AS PS_TO47,                                                                                                  -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ПЕРЕВОД НА СЧ.47
         CASE WHEN ( TABWG.GITCOL = '4' ) AND TO_ACC47.LOW IS NOT NULL THEN COALESCE(ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0)
              ELSE 0 END AS AM_TO47,                                                                                                  -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ПЕРЕВОД НА СЧ.47
         CASE WHEN ( TABWG.GITCOL = '3' ) AND FROM_ACC47.LOW IS NOT NULL THEN COALESCE(ABS( MOVS.KANSW ), 0)
              ELSE 0 END AS PS_FROM47,                                                                                                -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ВОЗВРАТ СО СЧ.47
         CASE WHEN ( TABWG.GITCOL = '3' ) AND FROM_ACC47.LOW IS NOT NULL THEN COALESCE(ABS( MOVS.KNAFA + MOVS.KAAFA + MOVS.KAUFN ), 0)
              ELSE 0 END AS AM_FROM47                                                                                                 -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ВОЗВРАТ СО СЧ.47
-- <-- AK_BUTVILOVSK #26097
      FROM :LT_DATA AS DATA
        INNER JOIN ZAA_V0_MOVE AS MOVS ON  MOVS.MANDT = :LV_MANDT                                                                     -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                       AND MOVS.BUKRS = DATA.BUKRS
                                       AND MOVS.ANLN1 = DATA.ANLN1
                                       AND MOVS.ANLN2 = DATA.ANLN2
                                       AND MOVS.GJAHR = YEAR(:IV_SDATE)
                                       AND MOVS.AFABE = :LV_AFABE
                                       AND MOVS.LNSAN = '00000'
                                       AND MONTH(MOVS.BUDAT) BETWEEN MONTH(:IV_SDATE) AND MONTH(:IV_EDATE)
        LEFT OUTER JOIN TABW AS TABW ON  TABW.MANDT = MOVS.MANDT
                                     AND TABW.BWASL = MOVS.BWASL
        LEFT OUTER JOIN TABWG AS TABWG ON  TABWG.MANDT  = TABW.MANDT
                                       AND TABWG.BWAGRP = TABW.BWAGRP
                                       AND TABWG.GITCOL IN ( '1', '3', '2', '4' )
        LEFT OUTER JOIN TVARVC AS BT_BE ON  BT_BE.MANDT = MOVS.MANDT
                                        AND BT_BE.TYPE  = 'S'
                                        AND BT_BE.NAME  = 'ZAA_BWASL_BETWEEN_BE'
                                        AND BT_BE.LOW   = MOVS.BWASL
        -- ПЕРЕМЕЩЕНИЯ ZAA_BWASL_WITHIN_BE -- УЧИТЫВАЮТСЯ С + ПОСТУПЛЕНИЕ И С – ВЫБЫТИЕ, ТОЛЬКО, ЕСЛИ ПРИ ЭТОМ В ОС СМЕНИЛАСЬ ГРУППА АМОРТИЗАЦИИ
        LEFT OUTER JOIN TVARVC AS WT_BE ON  WT_BE.MANDT = MOVS.MANDT
                                        AND WT_BE.TYPE  = 'S'
                                        AND WT_BE.NAME  = 'ZAA_BWASL_WITHIN_BE'
                                        AND WT_BE.LOW   = MOVS.BWASL
        -- ДВИЖЕНИЯ ПО РЕКОНСТРУКЦИИ
        LEFT OUTER JOIN TVARVC AS ARM_REC ON  ARM_REC.MANDT = MOVS.MANDT
                                          AND ARM_REC.TYPE  = 'S'
                                          AND ARM_REC.NAME  = 'ZAA_ARM_REC'
                                          AND ARM_REC.LOW   = MOVS.BWASL
        -- ДВИЖЕНИЯ ПО ДООЦЕНКЕ
        LEFT OUTER JOIN TVARVC AS ARM_DOP ON  ARM_DOP.MANDT = MOVS.MANDT
                                          AND ARM_DOP.TYPE  = 'S'
                                          AND ARM_DOP.NAME  = 'ZAA_ARM_DOP'
                                          AND ARM_DOP.LOW   = MOVS.BWASL
        -- ДВИЖЕНИЯ ПО УЦЕНКЕ
        LEFT OUTER JOIN TVARVC AS ARM_UCEN ON  ARM_UCEN.MANDT = MOVS.MANDT
                                           AND ARM_UCEN.TYPE  = 'S'
                                           AND ARM_UCEN.NAME  = 'ZAA_ARM_UCEN'
                                           AND ARM_UCEN.LOW   = MOVS.BWASL
-- --> AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств, переведенные на счет 4701000000 отражаются в графе «Поступило за отчетный период» со знаком “-“
        -- ПЕРЕВОД НА СЧЕТ 47*
        LEFT OUTER JOIN TVARVC AS TO_ACC47 ON  TO_ACC47.MANDT = MOVS.MANDT
                                           AND TO_ACC47.TYPE  = 'S'
                                           AND TO_ACC47.NAME  = 'ZAA_BWASL_TO_ACC47'
                                           AND TO_ACC47.LOW   = MOVS.BWASL
        -- ВОЗВРАТ СО СЧЕТА 47*
        LEFT OUTER JOIN TVARVC AS FROM_ACC47 ON  FROM_ACC47.MANDT = MOVS.MANDT
                                             AND FROM_ACC47.TYPE  = 'S'
                                             AND FROM_ACC47.NAME  = 'ZAA_BWASL_FROM_ACC47'
                                             AND FROM_ACC47.LOW   = MOVS.BWASL;
-- <-- AK_BUTVILOVSK #26097

  LT_VALS_END =
      SELECT BUKRS,
             ANLN1,
             ANLN2,
             SUM( VALUE_END ) AS VL_FIN,                                                                 -- ПС: НА КОНЕЦ
             SUM( NETVL_END ) AS NV_FIN,                                                                 -- ОС: НА КОНЕЦ
             SUM( NETVL_END - VALUE_END ) AS AM_FIN                                                      -- АМОРТИЗАЦИЯ НА КОНЕЦ
        FROM ( SELECT DATA.BUKRS,
                      DATA.ANLN1,
                      DATA.ANLN2,
                      CASE WHEN MOVS.BUDAT <= :IV_EDATE THEN MOVS.KANSW END AS VALUE_END,                -- ПС: НА КОНЕЦ
                      CASE WHEN MOVS.BUDAT <= :IV_EDATE THEN MOVS.NETVL END AS NETVL_END                 -- ОС: НА КОНЕЦ
                 FROM "ZAA_UTILS_HDB=>GET_ASSET_VAL_NG"( :LV_MANDT ) AS MOVS
                   INNER JOIN :LT_DATA AS DATA ON  MOVS.BUKRS = DATA.BUKRS
                                               AND MOVS.ANLN1 = DATA.ANLN1
                                               AND MOVS.ANLN2 = DATA.ANLN2
                                               AND MOVS.AFABE = :LV_AFABE
                                               AND MOVS.BUDAT >= :LV_GDATE
                                               AND MOVS.BUDAT <= :IV_EDATE
            ) GROUP BY BUKRS, ANLN1, ANLN2 ;

   ET_DATA_MA =
     SELECT DATA.ANLN1,                                                                       -- НОМЕР ОС
            DATA.ANLN2,                                                                       -- СУБНОМЕР ОС
            DATA.INVNR,                                                                       -- ИНВЕНТАРНЫЙ НОМЕР
            DATA.DEPGR,                                                                       -- ГРУППА АМОРТИЗАЦИИ
            DATA.GROUP_DESCR,                                                                 -- НАИМЕНОВАНИЕ ГРУППЫ АМОРТИЗАЦИИ (BSTATNAME)
            COALESCE( COALESCE( ABS(DATA.KANSW),0) / :IV_DIV,0) AS KANSW,                     -- ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ НА НАЧАЛО ПЕРИОДА (BSUMMA2)
            COALESCE( COALESCE( DATA.DEPR,0) / :IV_DIV,0) AS DEPR,                            -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА НАЧАЛО ГОДА (BSUMMA3)
            COALESCE( COALESCE( MOVS.POST,0) / :IV_DIV,0) AS POST,                            -- ПC ПОСТУПИЛО ЗА ОТЧЕТНЫЙ ПЕРИОД (BSUMMA4)                      - 8
            COALESCE( COALESCE( MOVS.AM_POST,0) / :IV_DIV,0) AS AM_POST,                      -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ПОСТУПИЛО ЗА ОТЧЕТНЫЙ ПЕРИОД (BSUMMA5) - 9
            COALESCE( COALESCE( MOVS.REVAL,0) / :IV_DIV,0) AS REVAL,                          -- ДООЦЕНКА ПЕРВОНАЧАЛЬНОЙ (ПЕРЕОЦЕНЕННОЙ) СТОИМОСТИ (BSUMMA6)    - 10
            COALESCE( COALESCE( MOVS.UCENKA,0) / :IV_DIV,0) AS UCENKA,                        -- УЦЕНКА ПЕРВОНАЧАЛЬНОЙ (ПЕРЕОЦЕНЕННОЙ)  СТОИМОСТИ (BSUMMA7)     - 11
            COALESCE( COALESCE( MOVS.AM_REVAL,0) / :IV_DIV,0) AS AM_REVAL,                    -- ДООЦЕНКА НАКОПЛЕННОЙ АМОРТИЗАЦИИ (BSUMMA8)                     - 12
            COALESCE( COALESCE( MOVS.AM_UCENKA,0) / :IV_DIV,0) AS AM_UCENKA,                  -- УЦЕНКА НАКОПЛЕННОЙ АМОРТИЗАЦИИ (BSUMMA9)                       - 13
            COALESCE( COALESCE( MOVS.ARM_REC,0) / :IV_DIV,0) AS ARM_REC,                      -- ИЗМЕНЕНИЯ В РЕЗУЛЬТАТЕ РЕКОНСТРУКЦИИ (МОДЕРНИЗАЦИИ, РЕСТАВРАЦИИ И Т.Д.) (BSUMMA10)
            COALESCE( COALESCE( MOVS.WT_BE,0) / :IV_DIV,0) AS WT_BE,                          -- ВНУТРЕННЕЕ ДВИЖЕНИЕ ПЕРВОНАЧАЛЬНОЙ  (ПЕРЕОЦЕНЕННОЙ) СТОИМОСТИ (BSUMMA11)
            COALESCE( COALESCE( MOVS.AM_WT,0) / :IV_DIV,0) AS AM_WT,                          -- ВНУТРЕННЕЕ ДВИЖЕНИЕ НАКОПЛЕННОЙ АМОРТИЗАЦИИ (BSUMMA12)         - 16
            COALESCE( COALESCE( MOVS.VIB,0) / :IV_DIV,0) AS VIB,                              -- ВЫБЫЛО ПЕРВОНАЧАЛЬНОЙ  (ПЕРЕОЦЕНЕННОЙ) СТОИМОСТИ (BSUMMA13)    - 17
            COALESCE( COALESCE( ABS(COALESCE( MOVS.AM_VIB,0) ),0) / :IV_DIV,0) AS AM_VIB,     -- ВЫБЫЛО НАКОПЛЕННАЯ АМОРТИЗАЦИЯ (BSUMMA14) - 18  - COALESCE( DATA.DEPR,0)
            COALESCE( COALESCE( DATA.AM_PER,0) / :IV_DIV,0) AS AM_PER,                        -- НАЧИСЛЕНО АМОРТИЗАЦИИ ЗА ОТЧЕТНЫЙ ПЕРИОД (BSUMMA15)            - 19
            0 AS OBESZ,                                                                       -- СУММЫ ОБЕСЦЕНЕНИЯ
            COALESCE( COALESCE( ABS(DATA.KANSW_END),0) / :IV_DIV,0) AS KANSW_END,             -- ПC НА КОНЕЦ ОТЧЕТНОГО ПЕРИОДА (BSUMMA17)
            COALESCE(ABS(DATA.NV_FIN),0) / :IV_DIV AS AM_END,                                 -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ОТЧЕТНОГО ПЕРИОДА (BSUMMA18)
            DATA.AFASL,                                                                       -- СПОСОБ НАЧИСЛЕНИЯ АМОРТИЗАЦИИ (BTEXT11)
            DATA.NDJAR_BEG,                                                                   -- СПИ НАИМЕНЬШИЙ (BSUMMA19)
            DATA.NDJAR_BEG AS NDJAR_END,                                                      -- СПИ НАИБОЛЬШИЙ (BSUMMA20)
            CASE WHEN :IV_FORM = 1 THEN '333' ELSE '335' END AS BRAS,
            :IV_BUKRS AS BPRED,
            DATA.WAERS,
            DATA.MONTH,
-- --> AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств, переведенные на счет 4701000000 отражаются в графе «Поступило за отчетный период» со знаком “-“
            COALESCE( COALESCE( MOVS.PS_TO47, 0) / :IV_DIV, 0) AS PS_TO47,                    -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ПЕРЕВОД НА СЧ.47
            COALESCE( COALESCE( MOVS.AM_TO47, 0) / :IV_DIV, 0) AS AM_TO47,                    -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ПЕРЕВОД НА СЧ.47
            COALESCE( COALESCE( MOVS.PS_FROM47, 0) / :IV_DIV, 0) AS PS_FROM47,                -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ: ВОЗВРАТ СО СЧ.47
            COALESCE( COALESCE( MOVS.AM_FROM47, 0) / :IV_DIV, 0) AS AM_FROM47                 -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ: ВОЗВРАТ СО СЧ.47
-- <-- AK_BUTVILOVSK #26097
       FROM :LT_DATA AS DATA
         LEFT OUTER JOIN ( SELECT MOVS.BUKRS,
                                  MOVS.ANLN1,
                                  MOVS.ANLN2,
                                  COALESCE(SUM(COALESCE(MOVS.POST,0)),0) AS POST,       -- ИСКЛЮЧАЕМ ДВИЖЕНИЯ W* - MOVS.BWASL_OUT_PS
                                  COALESCE(SUM(COALESCE(MOVS.AM_POST,0)),0) AS AM_POST, -- ИСКЛЮЧАЕМ ДВИЖЕНИЯ W* - MOVS.BWASL_OUT_AM
                                  COALESCE(SUM(COALESCE(MOVS.REVAL,0)),0) AS REVAL,
                                  COALESCE(SUM(COALESCE(MOVS.UCENKA,0)),0) AS UCENKA,
                                  COALESCE(SUM(COALESCE(MOVS.AM_REVAL,0)),1) AS AM_REVAL,
                                  COALESCE(SUM(COALESCE(MOVS.AM_UCENKA,0)),0) AS AM_UCENKA,
                                  COALESCE(SUM(COALESCE(MOVS.ARM_REC,0)),0) AS ARM_REC,
                                  COALESCE(SUM(COALESCE(MOVS.WT_BE,0)),0) AS WT_BE,
                                  COALESCE(SUM(COALESCE(MOVS.AM_WT,0)),0) AS AM_WT,
                                  COALESCE(SUM(COALESCE(MOVS.VIB,0)),0) AS VIB,
                                  COALESCE(SUM(COALESCE(MOVS.AM_VIB,0)),0) AS AM_VIB,         -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ОТЧЕТНОГО ПЕРИОДА (BSUMMA18)
                                  1 AS ITOG_2,
-- --> AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств, переведенные на счет 4701000000 отражаются в графе «Поступило за отчетный период» со знаком “-“
                                  COALESCE(SUM(COALESCE(MOVS.PS_TO47, 0)), 0) AS PS_TO47,
                                  COALESCE(SUM(COALESCE(MOVS.AM_TO47, 0)), 0) AS AM_TO47,
                                  COALESCE(SUM(COALESCE(MOVS.PS_FROM47, 0)), 0) AS PS_FROM47,
                                  COALESCE(SUM(COALESCE(MOVS.AM_FROM47, 0)), 0) AS AM_FROM47
-- <-- AK_BUTVILOVSK #26097
                                FROM :LT_MOVS AS MOVS
                                  WHERE MOVS.POST <> 0 OR MOVS.AM_POST <>0 OR MOVS.REVAL <> 0
                                       OR MOVS.UCENKA <> 0 OR MOVS.AM_REVAL <> 0 OR MOVS.AM_UCENKA <> 0
                                       OR MOVS.ARM_REC <> 0 OR MOVS.WT_BE <> 0 OR MOVS.AM_WT <> 0
                                       OR MOVS.VIB <> 0 OR MOVS.AM_VIB <> 0
                                       OR MOVS.PS_TO47 <> 0 OR MOVS.AM_TO47 <> 0 OR MOVS.PS_FROM47 <> 0 OR MOVS.AM_FROM47 <> 0 -- AK_BUTVILOVSK #26097 ZAA_ARM объекты основных средств
                               GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2
                           ) AS MOVS ON MOVS.BUKRS = DATA.BUKRS
                                    AND MOVS.ANLN1 = DATA.ANLN1
                                    AND MOVS.ANLN2 = DATA.ANLN2
         LEFT JOIN :LT_VALS_END AS VALS ON  VALS.BUKRS = DATA.BUKRS
                                        AND VALS.ANLN1 = DATA.ANLN1
                                        AND VALS.ANLN2 = DATA.ANLN2
           WHERE ( DATA.ITOG_1 + COALESCE(MOVS.ITOG_2,0) ) <> 0
       ORDER BY DATA.DEPGR, DATA.ANLN1 ;
  ENDMETHOD.


  METHOD GET_DATA_BWASL BY DATABASE PROCEDURE FOR HDB
                           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                           USING ANLA T001 ZANLU GLOFAAASSETDATA BUT000
                                 ZAA_V0_MOVE ZAFULL ZAA_IFRS_TYPE_TX T095.

    -- «БЕЗВОЗМЕЗДНАЯ ПЕРЕДАЧА ОС»  И «ВНЕСЕНИЕ ОС В УК ДРУГИХ ОРГАНИЗАЦИЙ» - ОТЧЕТ 4 И 5
    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_AFABE CHAR(2) := '01';  -- ОБЛАСТЬ ОЦЕНКУ БУ

    IF RIGHT (IV_EDATE,2) = 01 THEN
      IV_EDATE = TO_DATS(LAST_DAY( :IV_EDATE ) );
    END IF;

  LT_DATA =
     SELECT
        ANLA.MANDT,
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.ANLKL,
        ANLA.DEAKT,
        ANLA.INVNR,
        GLO.GLO_RUS_DEPGR AS DEPGR,
        GLO.GLO_RUS_OKOF AS OKOF,
        ZAN.GRMSFO,
        CASE WHEN BU.TYPE = '2'
               THEN BU.NAME_ORG1 || BU.NAME_ORG2 || BU.NAME_ORG3 || BU.NAME_ORG4
               ELSE BU.NAME_LAST || CHAR(32) || BU.NAME_FIRST || CHAR(32) || BU.NAMEMIDDLE END AS BU_PARTNER,
        T001.WAERS,
        T095.KTANSW
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        LEFT OUTER JOIN ZANLU AS ZAN ON  ZAN.MANDT = ANLA.MANDT
                                     AND ZAN.INVNR = ANLA.INVNR
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                                   -- СЧЕТА ЗАПАСА КЛАССА ОС
                                AND T095.KTOPL = T001.KTOPL
                                AND T095.KTOGR = ANLA.KTOGR
                                AND T095.AFABE = LV_AFABE
        LEFT JOIN BUT000 AS BU ON  BU.CLIENT  = ZAN.MANDT
                               AND BU.PARTNER = ZAN.BU_PARTNER
        LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                               AND ANLA.BUKRS = GLO.BUKRS
                                               AND ANLA.ANLN1 = GLO.ANLN1
                                               AND ANLA.ANLN2 = GLO.ANLN2
      WHERE ANLA.MANDT = :LV_MANDT
        AND ANLA.BUKRS = :IV_BUKRS
        AND ANLA.AKTIV <= :IV_EDATE AND ANLA.AKTIV > '00000000'
        AND ( ANLA.DEAKT >= :IV_SDATE OR ANLA.DEAKT = '00000000' );

    LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

    IF IS_EMPTY ( :LT_DATA )
      THEN RETURN;
    END IF;

    LT_BWASL =
      SELECT
        DATA.ANLN1,
        DATA.ANLN2,
        DATA.INVNR,                                                                     -- ИНВЕНТАРНЫЙ НОМЕР (BSUMMA10)
        ZF.TXTF1,
        ZF.TXTF2,                                                                       -- НАИМЕНОВАНИЕ ОБЪЕКТА (BSTATNAME)
        DATA.OKOF AS OKOF,                                                              -- ШИФР ПО КЛАССИФИКАТОРУ (BTEXT12)  --- ТОЛЬКО ШИФР  ZTX.DESCRIPTION
        DATA.DEAKT,                                                                     -- ДАТА ОЦЕНКИ (BDATE)
        DATA.DEAKT AS DEAKT5,                                                           -- ДАТА ВНЕСЕНИЯ (BDATE1) ТОЛЬКО ДЛЯ ОТЧЕТА 5
        ABS(MOVS.KANSW) / :IV_DIV AS PER_ST,                                            -- ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ (BSUMMA1)
        MOVS.DEPR / :IV_DIV AS AMORT_ST,                                                -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ
        ( ABS(MOVS.KANSW) - MOVS.DEPR ) / :IV_DIV AS OSTAT_ST,                          -- ОСТАТОЧНАЯ СТОИМОСТЬ (BSUMMA2)
        DATA.BU_PARTNER,                                                                -- В УК КАКОЙ ОРГАНИЗАЦИИ ВНЕСЕНО (BTEXT11)
        MOVS.XBLNR || CHAR(32) || RIGHT(MOVS.BLDAT,2) || '.' || LPAD( MONTH(MOVS.BLDAT), 2, '0') || '.' || YEAR(MOVS.BLDAT) AS PRIM, -- ПРИМЕЧАНИЕ (BTEXT13)
        CASE WHEN :IV_FORM = 4 THEN '314' ELSE '315' END AS BRAS,
        :IV_BUKRS AS BPRED,
        DATA.WAERS,
        CASE WHEN ( ABS(MOVS.KANSW) + MOVS.DEPR + ( ABS(MOVS.KANSW) - MOVS.DEPR ) ) = 0 THEN 0 ELSE 1 END AS FLAG,
        MOVS.BWASL
      FROM :LT_DATA AS DATA
         INNER JOIN ( SELECT MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, SUM( MOVS.KANSW) AS KANSW, SUM( MOVS.M_DEPR) AS DEPR, MOVS.XBLNR, MOVS.BLDAT, -- MOVS.BWASL
                        MAX( MOVS.BWASL ) AS BWASL  -- AK_BUTVILOVSK #24553 Отчет ZAA_ARM - Форм. отчетности для выгрузки в АРМ
                        FROM ( SELECT DATA.BUKRS,
                                      DATA.ANLN1,
                                      DATA.ANLN2,
                                      COALESCE( MOVS.KANSW,0) AS KANSW,
                                      COALESCE( MOVS.DEPRE,0) AS M_DEPR,
                                      MOVS.XBLNR,
                                      MOVS.BLDAT,
                                      MOVS.BWASL,
                                      MOVS.BELNR    -- AK_BUTVILOVSK #27107 ZAA_ARM - Форм. отчетности для выгрузки в АРМ
                                 FROM :LT_DATA AS DATA
                                   -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                   INNER JOIN ZAA_V0_MOVE AS MOVS ON  MOVS.MANDT = DATA.MANDT
                                                                  AND MOVS.BUKRS = DATA.BUKRS
                                                                  AND MOVS.ANLN1 = DATA.ANLN1
                                                                  AND MOVS.ANLN2 = DATA.ANLN2
                                                                  AND MOVS.GJAHR = YEAR( :IV_SDATE )
                                                                  AND MOVS.AFABE = :LV_AFABE
                                                                  AND MOVS.MONAT BETWEEN MONTH( :IV_SDATE ) AND MONTH( :IV_EDATE )
                                   LEFT OUTER JOIN ZAA_V0_MOVE AS MOVS_REV ON  MOVS_REV.MANDT = MOVS.MANDT                                -- СТОРНО ДВИЖЕНИЯ ОС
                                                                           AND MOVS_REV.BUKRS = MOVS.BUKRS
                                                                           AND MOVS_REV.ANLN1 = MOVS.ANLN1
                                                                           AND MOVS_REV.ANLN2 = MOVS.ANLN2
                                                                           AND MOVS_REV.GJAHR = MOVS.GJAHR
                                                                           AND MOVS_REV.AFABE = MOVS.AFABE  || ''
                                                                           AND MOVS_REV.LNRAN = MOVS.LNSAN
                                   WHERE MOVS_REV.BUDAT IS NULL

                             -- ) AS MOVS GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.XBLNR, MOVS.BLDAT, MOVS.BWASL
                             ) AS MOVS GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.XBLNR, MOVS.BLDAT, -- AK_BUTVILOVSK #24553 Отчет ZAA_ARM - Форм. отчетности для выгрузки в АРМ
                                                MOVS.BELNR                                                  -- AK_BUTVILOVSK #27107 ZAA_ARM - Форм. отчетности для выгрузки в АРМ
                    ) AS MOVS ON  MOVS.BUKRS = DATA.BUKRS
                              AND MOVS.ANLN1 = DATA.ANLN1
                              AND MOVS.ANLN2 = DATA.ANLN2
                              AND MOVS.BWASL IS NOT NULL
          LEFT JOIN ZAFULL AS ZF ON  ZF.MANDT = DATA.MANDT
                                 AND ZF.BUKRS = DATA.BUKRS
                                 AND ZF.ANLN1 = DATA.ANLN1
                                 AND ZF.ANLN2 = DATA.ANLN2
          LEFT JOIN ZAA_IFRS_TYPE_TX AS ZTX ON  ZTX.MANDT    = DATA.MANDT
                                            AND ZTX.SPARS    = :LV_SPRAS
                                            AND ZTX.IFRS_GRP = DATA.GRMSFO
       ORDER BY DATA.ANLN1,DATA.ANLN2;
    --ФИЛЬТР ПО ДВИЖЕНИЯМ
    LT_BWASL = APPLY_FILTER (:LT_BWASL, :IV_BWASL);

    ET_BWASL =
       SELECT
          DATA.ANLN1,
          DATA.ANLN2,
          DATA.INVNR,                                                            -- ИНВЕНТАРНЫЙ НОМЕР (BSUMMA10)
          DATA.TXTF1,
          DATA.TXTF2,                                                            -- НАИМЕНОВАНИЕ ОБЪЕКТА (BSTATNAME)
          DATA.OKOF,                                                             -- ШИФР ПО КЛАССИФИКАТОРУ (BTEXT12)  --- ТОЛЬКО ШИФР  ZTX.DESCRIPTION
          DATA.DEAKT,                                                            -- ДАТА ОЦЕНКИ (BDATE)
          DATA.DEAKT5,                                                           -- ДАТА ВНЕСЕНИЯ (BDATE1) ТОЛЬКО ДЛЯ ОТЧЕТА 5
          SUM(DATA.PER_ST) AS PER_ST,                                            -- ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ (BSUMMA1)
          SUM(DATA.AMORT_ST) AS AMORT_ST,                                        -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ
          SUM(DATA.OSTAT_ST) AS OSTAT_ST,                                        -- ОСТАТОЧНАЯ СТОИМОСТЬ (BSUMMA2)
          DATA.BU_PARTNER,                                                       -- В УК КАКОЙ ОРГАНИЗАЦИИ ВНЕСЕНО (BTEXT11)
          DATA.PRIM,                                                             -- ПРИМЕЧАНИЕ (BTEXT13)
          DATA.BRAS,
          DATA.BPRED,
          DATA.WAERS,
          DATA.FLAG
         FROM :LT_BWASL AS DATA
        WHERE DATA.FLAG = 1
        GROUP BY DATA.ANLN1, DATA.ANLN2, DATA.INVNR,DATA.TXTF1, DATA.TXTF2, DATA.OKOF, DATA.DEAKT,
                 DATA.DEAKT5, DATA.BU_PARTNER, DATA.PRIM,DATA.BRAS, DATA.BPRED, DATA.WAERS, DATA.FLAG ;
  ENDMETHOD.


  METHOD GET_DATA_RBP BY DATABASE PROCEDURE FOR HDB
                      LANGUAGE SQLSCRIPT
                      USING ANLA T001 ZANLU ANLB ANLBZA ZAFULL
                            ZAA_UTILS_HDB=>GET_AA_VALS
                            GLOFAAASSETDATA T095.

    -- «РБП» - ОТЧЕТ 7
    DECLARE LV_MANDT    CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_CUR_DATE CHAR(8) := TO_DATS(CURRENT_DATE);
    DECLARE LV_AFABE    CHAR(2) := '01';                                                -- ОБЛАСТЬ ОЦЕНКУ БУ

    ET_RBP =
      SELECT
        ANLA.ANLN1 AS ANLN1,
        ANLA.ANLN2 AS ANLN2,
        ANLA.ANLKL AS ANLKL,
        ANLA.INVNR AS INVNR,
        GLO.GLO_RUS_DEPGR AS DEPGR,
        ZAF.TXTF1 AS TXTF1,                                                            -- НАИМЕНОВАНИЕ СТАТЬИ
        ZAF.TXTF2 AS TXTF2,
        ANLA.AKTIV,                                                                    -- ДАТА ОБРАЗОВАНИЯ

        -- КОНЕЧНАЯ ДАТА ОТНЕСЕНИЯ НА РАСХОДЫ
        -- ЕСЛИ КОД АМОРТИЗАЦИИ R000, НЕ ЗАПОЛНЯЕТСЯ,
        CASE WHEN COALESCE(ANLBZA.AFASL,AN.AFASL) = 'R000' THEN '00000000'
             -- ЕСЛИ ZNLD: ANLA-AKTIV + СРОК ЭКСПЛУАТАЦИИ – 1.
             WHEN COALESCE(ANLBZA.AFASL,AN.AFASL) = 'ZLND'
               THEN TO_DATS(ADD_DAYS(TO_DATS(ADD_MONTHS(TO_DATE (ANLA.AKTIV, 'YYYYMMDD'), TO_INTEGER(COALESCE(ANLBZA.NDJAR, ANLB.NDJAR) ) * 12 + TO_INTEGER(COALESCE(ANLBZA.NDPER, ANLB.NDPER) ) ) ),-1) )
               -- ЕСЛИ ДРУГОЕ:  ПОСЛЕДНИЙ ДЕНЬ ПРЕДЫДУЩЕГО МЕСЯЦА ANLB- AFABG  + СРОК ЭКСПЛУАТАЦИИ
               ELSE CASE WHEN CAST( TO_DATS(LAST_DAY(ADD_MONTHS(AN.AFABG,-1)) ) AS VARCHAR (10)) <> '00000000'
                           THEN TO_DATS(CAST( ADD_MONTHS(CAST( TO_DATS(LAST_DAY(ADD_MONTHS(AN.AFABG,-1)) ) AS VARCHAR (10)),TO_INTEGER(COALESCE(ANLBZA.NDJAR, ANLB.NDJAR) ) * 12 + TO_INTEGER(COALESCE(ANLBZA.NDPER, ANLB.NDPER) ) ) AS VARCHAR (10)))
                           ELSE '00000000' END
        END AS AKTIV_END,

        0.00 SUMM,
        T001.WAERS,
        T095.KTANSW
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        LEFT OUTER JOIN ZANLU AS ZAN ON  ZAN.MANDT = ANLA.MANDT
                                     AND ZAN.INVNR = ANLA.INVNR
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                                   -- СЧЕТА ЗАПАСА КЛАССА ОС
                                 AND T095.KTOPL = T001.KTOPL
                                 AND T095.KTOGR = ANLA.KTOGR
                                 AND T095.AFABE = LV_AFABE
        LEFT JOIN ZAFULL AS ZAF ON  ZAF.MANDT = ANLA.MANDT
                                AND ZAF.BUKRS = ANLA.BUKRS
                                AND ZAF.ANLN1 = ANLA.ANLN1
                                AND ZAF.ANLN2 = ANLA.ANLN2
        LEFT OUTER JOIN ANLB AS ANLB ON  ANLB.MANDT = ANLA.MANDT                                              -- ДАННЫЕ ПО ОЦЕНКЕ ОС НА ТЕК МОМЕНТ
                                     AND ANLB.BUKRS = ANLA.BUKRS
                                     AND ANLB.ANLN1 = ANLA.ANLN1
                                     AND ANLB.ANLN2 = ANLA.ANLN2
                                     AND ANLB.AFABE = :LV_AFABE
        LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                               AND ANLA.BUKRS = GLO.BUKRS
                                               AND ANLA.ANLN1 = GLO.ANLN1
                                               AND ANLA.ANLN2 = GLO.ANLN2
        LEFT OUTER JOIN ANLBZA AS ANLBZA ON  ANLBZA.MANDT = ANLA.MANDT                                        -- ДАННЫЕ ПО ОЦЕНКЕ НА КОНЕЦ ОТЧЕТА
                                         AND ANLBZA.BUKRS = ANLA.BUKRS
                                         AND ANLBZA.ANLN1 = ANLA.ANLN1
                                         AND ANLBZA.ANLN2 = ANLA.ANLN2
                                         AND ANLBZA.ADATU <= :IV_SDATE --IV_EDATE
                                         AND ANLBZA.BDATU >= :IV_SDATE --IV_EDATE
                                         AND ANLBZA.AFABE = :LV_AFABE
        LEFT OUTER JOIN ANLB AS AN ON  AN.MANDT = ANLA.MANDT
                                   AND AN.BUKRS = ANLA.BUKRS
                                   AND AN.ANLN1 = ANLA.ANLN1
                                   AND AN.ANLN2 = ANLA.ANLN2
                                   AND AN.AFABE = LV_AFABE
                                   AND AN.AFABG <> '00000000'
      WHERE ANLA.MANDT = :LV_MANDT
        AND ANLA.BUKRS = :IV_BUKRS
        AND ANLA.AKTIV <= :IV_SDATE AND ANLA.AKTIV > '00000000'
        AND ( ANLA.DEAKT >= :IV_SDATE OR ANLA.DEAKT = '00000000' )
      ORDER BY ANLA.ANLN1,ANLA.ANLN2 ;

    ET_RBP = APPLY_FILTER (:ET_RBP, :IV_FLT);
    IF IS_EMPTY( :ET_RBP )
      THEN RETURN;
    END IF;
    LT_VALS =
      SELECT DISTINCT :LV_MANDT AS CLIENT ,
              :IV_BUKRS AS BUKRS  ,
              RBP.ANLN1  ,
              RBP.ANLN2  ,
              :LV_AFABE AS AFABE  ,
              0.00 AS KANSW  ,
              0.00 AS KAUFW  ,
              0.00 AS KNAFA  ,
              0.00 AS KAAFA  ,
              0.00 AS KAUFN  ,
              0.00 AS NETVL
      FROM :ET_RBP AS RBP;
    /*  Выборка стоимостных значений на конец отчетной даты*/
    CALL "ZAA_UTILS_HDB=>GET_AA_VALS"( IV_DATE => :IV_SDATE, it_asset => :LT_VALS, et_vals => :LT_VALS, iv_end_day => 'X' );
    ET_RBP =
    SELECT
        DATA.ANLN1,
        DATA.ANLN2,
        DATA.ANLKL,
        DATA.INVNR,
        DATA.DEPGR,
        DATA.TXTF1,
        DATA.TXTF2,
        DATA.AKTIV,
        DATA.AKTIV_END,
        ASSET_CUR.NETVL  / :IV_DIV AS  SUMM,
        DATA.WAERS,
        DATA.KTANSW
      FROM :ET_RBP AS DATA
        JOIN :LT_VALS AS ASSET_CUR ON  ASSET_CUR.ANLN1 = DATA.ANLN1
                                   AND ASSET_CUR.ANLN2 = DATA.ANLN2
      WHERE ASSET_CUR.NETVL <> 0;
  ENDMETHOD.


  METHOD GET_DATA_SPIS BY DATABASE PROCEDURE FOR HDB
                          LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                          USING ANLA T001 GLOFAAASSETDATA ZAA_IFRS_TYPE_TX BUT000
                                T095 ZAA_V0_MOVE TABW TABWG BSEG ZAFULL ZANLU.

    -- «СПИСАНИЕ И ИНОЕ ВЫБЫТИЕ ОС» - ОТЧЕТ 6
     DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
     DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
     DECLARE LV_AFABE CHAR(2) := '01';  -- ОБЛАСТЬ ОЦЕНКУ БУ

     IF RIGHT (IV_EDATE,2) = 01 THEN
       IV_EDATE = TO_DATS(LAST_DAY( :IV_EDATE ) );
     END IF;

   LT_DATA =
      SELECT
         ANLA.MANDT,
         ANLA.BUKRS,
         ANLA.ANLN1,
         ANLA.ANLN2,
         ANLA.ANLKL,
         ANLA.DEAKT,
         ANLA.INVNR,
         GLO.GLO_RUS_DEPGR AS DEPGR,
         ZAN.GRMSFO,
         T095.KTANSW,
         CASE WHEN BU.TYPE = '2'
                THEN BU.NAME_ORG1 || BU.NAME_ORG2 || BU.NAME_ORG3 || BU.NAME_ORG4
                ELSE BU.NAME_LAST || CHAR(32) || BU.NAME_FIRST || CHAR(32) || BU.NAMEMIDDLE END AS BU_PARTNER,
         T001.WAERS
       FROM ANLA AS ANLA
         INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                 AND T001.BUKRS = ANLA.BUKRS
         INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                                   -- СЧЕТА ЗАПАСА КЛАССА ОС
                                 AND T095.KTOPL = T001.KTOPL
                                 AND T095.KTOGR = ANLA.KTOGR
                                 AND T095.AFABE = LV_AFABE
         LEFT OUTER JOIN ZANLU AS ZAN ON  ZAN.MANDT = ANLA.MANDT
                                      AND ZAN.INVNR = ANLA.INVNR
         LEFT JOIN BUT000 AS BU ON  BU.CLIENT  = ZAN.MANDT
                                AND BU.PARTNER = ZAN.BU_PARTNER
         LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                                AND ANLA.BUKRS = GLO.BUKRS
                                                AND ANLA.ANLN1 = GLO.ANLN1
                                                AND ANLA.ANLN2 = GLO.ANLN2
       WHERE ANLA.MANDT = :LV_MANDT
         AND ANLA.BUKRS = :IV_BUKRS
         AND ANLA.AKTIV <= :IV_EDATE AND ANLA.AKTIV > '00000000'
         AND ( ANLA.DEAKT >= :IV_SDATE OR ANLA.DEAKT = '00000000');

     LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

     IF IS_EMPTY ( :LT_DATA )
       THEN RETURN;
     END IF;

   LT_SPIS =
      SELECT
         DATA.ANLN1,
         DATA.ANLN2,
         DATA.INVNR,
         ZF.TXTF1,
         ZF.TXTF2,
         GLO.GLO_RUS_OKOF AS OKOF,                                                                               -- || CHAR(32) || ZTX.DESCRIPTION
         MOVS.BUDAT AS DEAKT,
         ABS(MOVS.KANSW) / :IV_DIV AS PER_ST,                                                                    -- ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ (B0MA1)
         CASE WHEN MOVS.CHK > 0 THEN ( ABS(MOVS.KANSW) - ABS(MOVS.DEPR) ) / :IV_DIV ELSE 0 END AS OSTAT_91,      -- ОСТАТОЧНАЯ СТОИМОСТЬ, СПИСАННАЯ НА СЧЕТ СЧ.91 (BSUMMA2)
         CASE WHEN MOVS.CHK = 0 THEN ( ABS(MOVS.KANSW) - ABS(MOVS.DEPR) ) / :IV_DIV ELSE 0 END AS OSTAT_ST,      -- ОСТАТОЧНАЯ СТОИМОСТЬ, ИНОЕ ВЫБЫТИЕ (BSUMMA3)
         '' AS BU_PARTNER,                                                                                       -- ОРГАН УПРАВЛЕНИЯ, СОГЛАСОВАВШИЙ СПИСАНИЕ (BTEXT11)
         MOVS.XBLNR || CHAR(32) || RIGHT(MOVS.BLDAT,2) || '.' || LPAD( MONTH(MOVS.BLDAT), 2, '0') || '.' || YEAR(MOVS.BLDAT) AS PRIM,  -- ПРИМЕЧАНИЕ (BTEXT13)
         '317' AS BRAS,
         :IV_BUKRS AS BPRED,
         DATA.WAERS,
         CASE WHEN ( ABS(MOVS.KANSW) + ( ABS(MOVS.KANSW) - ABS(MOVS.DEPR) ) ) = 0 THEN 0 ELSE 1 END AS FLAG,
         MOVS.BWASL
       FROM :LT_DATA AS DATA
          INNER JOIN ( SELECT MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.BUDAT, SUM( MOVS.KANSW) AS KANSW, MOVS.XBLNR, MOVS.BLDAT, SUM(MOVS.DEPRE) AS DEPR, SUM(MOVS.CHK) AS CHK, MOVS.BWASL
                         FROM ( SELECT DATA.BUKRS, DATA.ANLN1, DATA.ANLN2, MOVS.BUDAT, COALESCE( MOVS.KANSW,0) AS KANSW, MOVS.XBLNR, MOVS.BLDAT, MOVS.DEPRE, BSEG.CHK, MOVS.BWASL
                                  FROM :LT_DATA AS DATA
                                    INNER JOIN ZAA_V0_MOVE AS MOVS ON  MOVS.MANDT = DATA.MANDT                  -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                                                   AND MOVS.BUKRS = DATA.BUKRS
                                                                   AND MOVS.ANLN1 = DATA.ANLN1
                                                                   AND MOVS.ANLN2 = DATA.ANLN2
                                                                   AND MOVS.GJAHR = YEAR( :IV_SDATE )
                                                                   AND MOVS.AFABE = :LV_AFABE
                                                                   AND MOVS.MONAT BETWEEN MONTH( :IV_SDATE ) AND MONTH( :IV_EDATE )
                                                                   AND MOVS.SHKZG = 'H'                         -- ПРОВОДКИ ТОЛЬКО ПО КРЕДИТУ
                                    LEFT OUTER JOIN ZAA_V0_MOVE AS MOVS_REV ON  MOVS_REV.MANDT = MOVS.MANDT     -- СТОРНО ДВИЖЕНИЯ ОС
                                                                            AND MOVS_REV.BUKRS = MOVS.BUKRS
                                                                            AND MOVS_REV.ANLN1 = MOVS.ANLN1
                                                                            AND MOVS_REV.ANLN2 = MOVS.ANLN2
                                                                            AND MOVS_REV.GJAHR = MOVS.GJAHR
                                                                            AND MOVS_REV.AFABE = MOVS.AFABE  || ''
                                                                            AND MOVS_REV.LNRAN = MOVS.LNSAN
                                    INNER JOIN TABW AS TABW ON  TABW.MANDT = MOVS.MANDT
                                                            AND TABW.BWASL = MOVS.BWASL
                                    INNER JOIN TABWG AS TABWG ON  TABWG.MANDT  = TABW.MANDT
                                                              AND TABWG.BWAGRP = TABW.BWAGRP
*--> #8000000371 AK_BUTVILOVS 24.05.2020 ZAA_ARM-Форм.отчетности для выгр. в ARM
*                                                              AND TABWG.GITCOL = '2'
                                                              AND TABWG.GITCOL IN ( '2', '4')
*<-- #8000000371 AK_BUTVILOVS
                                    -- ОС: СПИСАННАЯ НА СЧЕТ СЧ.91 ПО ДЕБЕТУ = 1
                                    LEFT OUTER JOIN ( SELECT BSEG.BUKRS,BSEG.BELNR, BSEG.GJAHR, SUM (BSEG.CHK) AS CHK
                                                        FROM ( SELECT BSEG.BUKRS,BSEG.BELNR, BSEG.GJAHR,
                                                                      CASE WHEN BSEG.HKONT LIKE '91%' THEN 1 ELSE 0 END AS CHK
                                                                 FROM BSEG AS BSEG
                                                                WHERE BSEG.MANDT = :LV_MANDT
                                                                  AND BSEG.SHKZG = 'S'
                                                              ) AS BSEG GROUP BY BSEG.BUKRS,BSEG.BELNR, BSEG.GJAHR
                                                    ) AS BSEG ON  BSEG.BUKRS = MOVS.BUKRS
                                                              AND BSEG.BELNR = MOVS.BELNR
                                                              AND BSEG.GJAHR = MOVS.GJAHR
                                 WHERE MOVS_REV.BUDAT IS NULL
                              ) AS MOVS GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.BUDAT, MOVS.XBLNR, MOVS.BLDAT, MOVS.BWASL
                     ) AS MOVS ON  MOVS.BUKRS = DATA.BUKRS
                               AND MOVS.ANLN1 = DATA.ANLN1
                               AND MOVS.ANLN2 = DATA.ANLN2
           LEFT JOIN ZAFULL AS ZF ON  ZF.MANDT = :LV_MANDT
                                  AND ZF.BUKRS = DATA.BUKRS
                                  AND ZF.ANLN1 = DATA.ANLN1
                                  AND ZF.ANLN2 = DATA.ANLN2
           LEFT JOIN ZAA_IFRS_TYPE_TX AS ZTX ON  ZTX.MANDT    = DATA.MANDT
                                             AND ZTX.SPARS    = :LV_SPRAS
                                             AND ZTX.IFRS_GRP = DATA.GRMSFO
           LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  GLO.MANDT = DATA.MANDT
                                                  AND GLO.BUKRS = DATA.BUKRS
                                                  AND GLO.ANLN1 = DATA.ANLN1
                                                  AND GLO.ANLN2 = DATA.ANLN2
       ORDER BY DATA.ANLN1,DATA.ANLN2 ;

*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
       LT_SPIS = APPLY_FILTER (:LT_SPIS, :IV_FLT_BWASL);

*       ET_SPIS = SELECT DATA.* FROM :LT_SPIS AS DATA WHERE DATA.FLAG = 1 ORDER BY DATA.ANLN1, DATA.ANLN2;
       ET_SPIS = SELECT DATA.ANLN1,
                        DATA.ANLN2,
                        DATA.INVNR,
                        DATA.TXTF1,
                        DATA.TXTF2,
                        DATA.OKOF,
                        DATA.DEAKT,
                        DATA.PER_ST,
                        DATA.OSTAT_91,
                        DATA.OSTAT_ST,
                        DATA.BU_PARTNER,
                        DATA.PRIM,
                        DATA.BRAS,
                        DATA.BPRED,
                        DATA.WAERS,
                        DATA.FLAG FROM :LT_SPIS AS DATA WHERE DATA.FLAG = 1 ORDER BY DATA.ANLN1, DATA.ANLN2;
*<-- #8000000259, #8000000280 AK_BUTVILOVS
  ENDMETHOD.


  METHOD GET_DATA_VID BY DATABASE PROCEDURE FOR HDB
                         LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                         USING ANLA T001 ZANLU ZAA_UTILS_HDB=>GET_ASSET_VALUES
                               ZAA_UTILS_HDB=>GET_ASSET_VAL_NG ZANLZ ZAFULL T095 GLOFAAASSETDATA ACDOCA.

    -- «НАЛИЧИЕ ОС В ПРОСТОЕ» - ВИД ОТЧЕТА 3
    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_GDATE CHAR(8) := YEAR (:IV_SDATE) || '0000';     -- ДАТА НАЧАЛО ГОДА;
    DECLARE LV_AFABE CHAR(2) := '01';                           -- ОБЛАСТЬ ОЦЕНКУ БУ
    DECLARE LV_NEXT_DATE CHAR(8);

    IF RIGHT (IV_EDATE,2) = 01 THEN
      IV_EDATE = TO_DATS(LAST_DAY( :IV_EDATE ) );
    END IF;
    LV_NEXT_DATE = TO_DATS(ADD_DAYS( LAST_DAY( :IV_EDATE ) ,1) );

*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
    LT_ACDOCA =
        SELECT SUM(HSL) AS HSL,
               RACCT,
               ANLN1,
               ANLN2,
               POPER
         FROM ACDOCA
         WHERE RCLNT  = :LV_MANDT
           AND AFABE  = :LV_AFABE
           AND GJAHR  = YEAR ( :IV_SDATE )
           AND RIGHT(POPER,2) BETWEEN MONTH (:IV_SDATE) AND MONTH (:IV_EDATE)
           AND RLDNR  = '0L'
           AND BLART  = 'AF'
           AND RBUKRS = :IV_BUKRS
         GROUP BY POPER, RACCT, ANLN1, ANLN2
         ORDER BY POPER DESC;

    LT_ACDOCA = APPLY_FILTER (:LT_ACDOCA, :IV_FLT_RACCT);
*<-- #8000000259, #8000000280 AK_BUTVILOVS

  LT_DATA =
     SELECT
        ANLA.MANDT,
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.ANLKL,
        ANLA.INVNR,
        GLO.GLO_RUS_DEPGR AS DEPGR,
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        COALESCE( SUM( ACDOCA.HSL ), 0 ) AS AM_PER,
/*        COALESCE( ( SELECT ABS( COALESCE( SUM ( NAFAZ + SAFAZ + AAFAZ ), 0 ) )
                      FROM FAAV_ANLP
                     WHERE MANDT = ANLA.MANDT
                       AND BUKRS = ANLA.BUKRS
                       AND ANLN1 = ANLA.ANLN1
                       AND ANLN2 = ANLA.ANLN2
                       AND AFABER = :LV_AFABE
                       AND GJAHR = YEAR ( :IV_SDATE )
                       AND RIGHT(PERAF,2) BETWEEN MONTH (:IV_SDATE) AND MONTH (:IV_EDATE) ), 0 ) AS AM_PER,   -- АМОРТИЗАЦИЯ ЗА ПЕРИОД */

*<-- #8000000259, #8000000280 AK_BUTVILOVS
        COALESCE(ASSETS.KANSW, 0 ) AS KANSW_END,                                                              -- ПС НА КОНЕЦ - ASSET_END.KANSW
        COALESCE(ASSETS.KNAFA + ASSETS.KAAFA + ASSETS.KAUFN, 0 ) AS NV_FIN,                                   -- ВСЯ НА НА СЛЕДУЩИЙ ДЕНЬ КОНЕЧНОГО ПЕРИОДА
        COALESCE(ASSETS.NETVL,0) AS NETVL,                                                                    -- ОС. РАССЧИТЫВАЕТСЯ КАК РАЗНИЦА ПС И АМОРТИЗАЦИИ
        T001.WAERS,
        T095.KTANSW,
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        ANLA.DEAKT
*<-- #8000000259, #8000000280 AK_BUTVILOVS
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        LEFT OUTER JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                                       AND ZANLU.INVNR = ANLA.INVNR
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                                   -- СЧЕТА ЗАПАСА КЛАССА ОС
                                AND T095.KTOPL = T001.KTOPL
                                AND T095.KTOGR = ANLA.KTOGR
                                AND T095.AFABE = LV_AFABE
        LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( P_CLNT => :LV_MANDT, P_DATE => :LV_NEXT_DATE, P_AMNT => '') AS ASSETS
                                  ON  ASSETS.BUKRS = ANLA.BUKRS
                                  AND ASSETS.ANLN1 = ANLA.ANLN1
                                  AND ASSETS.ANLN2 = ANLA.ANLN2
                                  AND ASSETS.AFABE = :LV_AFABE
        LEFT OUTER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                               AND ANLA.BUKRS = GLO.BUKRS
                                               AND ANLA.ANLN1 = GLO.ANLN1
                                               AND ANLA.ANLN2 = GLO.ANLN2
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        LEFT JOIN :LT_ACDOCA AS ACDOCA ON  ACDOCA.ANLN1  = ANLA.ANLN1
                                       AND ACDOCA.ANLN2  = ANLA.ANLN2
*<-- #8000000259, #8000000280 AK_BUTVILOVS
      WHERE ANLA.MANDT = :LV_MANDT
        AND ANLA.BUKRS = :IV_BUKRS
        AND ANLA.AKTIV <= :IV_EDATE AND ANLA.AKTIV > '00000000'
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        AND ( ANLA.DEAKT >= :IV_SDATE OR ANLA.DEAKT = '00000000' )
*        AND ( ANLA.DEAKT >= :IV_EDATE OR ANLA.DEAKT = '00000000' )
*        AND ( ANLA.DEAKT BETWEEN :IV_SDATE AND :IV_EDATE
*           OR ANLA.DEAKT = '00000000' )
      GROUP BY ANLA.MANDT, ANLA.BUKRS, ANLA.ANLN1, ANLA.ANLN2, ANLA.ANLKL,
               ANLA.INVNR, GLO.GLO_RUS_DEPGR, ASSETS.KANSW, ASSETS.KNAFA, ASSETS.KAAFA,
               ASSETS.KAUFN, ASSETS.NETVL, T001.WAERS, T095.KTANSW, ANLA.DEAKT;
*<-- #8000000259, #8000000280 AK_BUTVILOVS

    LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

    IF IS_EMPTY ( :LT_DATA )
      THEN RETURN;
    END IF;

    LT_VALS_END =
      SELECT BUKRS,
             ANLN1,
             ANLN2,
             SUM( VALUE_END ) AS VL_FIN,                                                                 -- ПС: НА КОНЕЦ
             SUM( NETVL_END ) AS NV_FIN,                                                                 -- ОС: НА КОНЕЦ
             SUM( NETVL_END - VALUE_END ) AS AM_FIN                                                      -- АМОРТИЗАЦИЯ НА КОНЕЦ
        FROM ( SELECT DATA.BUKRS,
                      DATA.ANLN1,
                      DATA.ANLN2,
                      CASE WHEN MOVS.BUDAT <= :IV_EDATE THEN MOVS.KANSW END AS VALUE_END,                -- ПС: НА КОНЕЦ
                      CASE WHEN MOVS.BUDAT <= :IV_EDATE THEN MOVS.NETVL END AS NETVL_END                 -- ОС: НА КОНЕЦ
                 FROM "ZAA_UTILS_HDB=>GET_ASSET_VAL_NG"( :LV_MANDT ) AS MOVS
                   INNER JOIN :LT_DATA AS DATA ON  MOVS.BUKRS = DATA.BUKRS
                                               AND MOVS.ANLN1 = DATA.ANLN1
                                               AND MOVS.ANLN2 = DATA.ANLN2
                                               AND MOVS.AFABE = :LV_AFABE
                                               AND MOVS.BUDAT >= :LV_GDATE
                                               AND MOVS.BUDAT <= :IV_EDATE
            ) GROUP BY BUKRS, ANLN1, ANLN2 ;

  ET_DATA_VID =
      SELECT
        DATA.ANLN1,                                                                                      -- СИСТЕМНЫЙ НОМЕР
        DATA.ANLN2,                                                                                      -- CУБНОМЕР
        DATA.INVNR,                                                                                      -- ИНВЕНТАРНЫЙ НОМЕР
        ZF.TXTF1 AS TXTF1,
        ZF.TXTF2 AS TXTF2,                                                                               -- НАИМЕНОВАНИЕ ОБЪЕКТА (BSTATNAME)
        Z.ADATU AS ADATU_IN,                                                                             -- ДАТА ПЕРЕВОДА В ПРОСТОЙ
        CASE
            WHEN DATA.DEAKT <> '00000000'
                THEN DATA.DEAKT
            WHEN Z.BDATU = '99991231'
                THEN Z.BDATU
            ELSE
                TO_DATS(ADD_DAYS(Z.BDATU,1) )
        END AS ADATU_OUT, -- ДАТА ПЕРЕВОДА В ПРОСТОЙ
        COALESCE(ABS(DATA.KANSW_END),0) / :IV_DIV AS KANSWV,                                             -- ВОССТ-НАЯ(ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ) НА КОНЕЦ ФОРМ. ОТЧЕТА
        COALESCE(ABS(DATA.NV_FIN),0) / :IV_DIV AS DEPR_END,                                              -- НА НА КОНЕЦ ПЕРИОДА  -- VALS.AM_FIN
        COALESCE(ABS(DATA.NETVL),0) / :IV_DIV AS OST_ST,                                                 -- ОСТАТОЧНАЯ СТОИМОСТЬ -- VALS.NV_FIN
        DATA.AM_PER / :IV_DIV AS AM_PER,                                                                 -- СУММА АМОРТИЗАЦИИ ЗА ОТЧЕТНЫЙ ПЕРИОД
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        COALESCE( ACDOCA.HSL, 0 ) / :IV_DIV AS AM_MONTH,
/*        COALESCE( ( SELECT ABS( COALESCE( SUM ( NAFAZ + SAFAZ + AAFAZ ), 0 ) )                           -- АМОРТИЗАЦИЯ ЗА ПОСЛЕДН МЕСЯЦ ПЕРИОДА
                      FROM FAAV_ANLP
                     WHERE MANDT = :LV_MANDT
                       AND BUKRS = DATA.BUKRS
                       AND ANLN1 = DATA.ANLN1
                       AND ANLN2 = DATA.ANLN2
                       AND AFABER = :LV_AFABE
                       AND GJAHR = YEAR ( :IV_SDATE )
                       AND RIGHT(PERAF,2) = MONTH (:IV_EDATE) ), 0 ) / :IV_DIV AS AM_MONTH, */
*<-- #8000000259, #8000000280 AK_BUTVILOVS
        0 AS COSTS,                                                                                      -- ЗАТРАТЫ НА СОДЕРЖАНИЕ ЗА ОТЧЕТНЫЙ ПЕРИОД
        0 AS COSTS_MONTH,                                                                                -- ЗАТРАТЫ НА СОДЕРЖАНИЕ В Т.Ч. ЗА МЕСЯЦ
        '' AS CAUSE_OUT,                                                                                 -- ПРИЧИНА ВЫВОДА ИЗ ЭКСПЛУАТАЦИИ, ПРИНЯТЫЕ МЕРЫ
        '312' AS BRAS,
        :IV_BUKRS AS BPRED,
        DATA.WAERS
      FROM :LT_DATA AS DATA
        LEFT JOIN ZAFULL AS ZF ON  ZF.MANDT = DATA.MANDT
                               AND ZF.BUKRS = DATA.BUKRS
                               AND ZF.ANLN1 = DATA.ANLN1
                               AND ZF.ANLN2 = DATA.ANLN2
        INNER JOIN ( SELECT Z.INVNR, MIN( Z.ADATU ) AS ADATU , MAX (Z.BDATU) AS BDATU
                       FROM ZANLZ AS Z
                      WHERE Z.MANDT = :LV_MANDT
                        AND Z.VIDUSE IN ( '60', '65')
                        -- #36291 V.Zaretsky ZAA_ARM - Форм. отчетности для выгрузки в АРМ 29.01.2024
                        --AND ( (:IV_SDATE BETWEEN Z.ADATU AND Z.BDATU  AND :IV_EDATE BETWEEN Z.ADATU AND Z.BDATU)        -- ОБЕ ДАТЫ В ПЕРИОДЕ ОТЧЕТА
                         AND ( ( Z.ADATU BETWEEN :IV_SDATE AND IV_EDATE  AND Z.BDATU BETWEEN :IV_SDATE AND IV_EDATE )        -- ОБЕ ДАТЫ В ПЕРИОДЕ ОТЧЕТА
                         OR ( Z.ADATU BETWEEN :IV_SDATE AND :IV_EDATE AND Z.BDATU NOT BETWEEN :IV_SDATE AND :IV_EDATE)  -- НАЧАЛО ИНТЕРВАЛА В ПЕРИОДЕ ОТЧЕТА
                         OR ( Z.BDATU BETWEEN :IV_SDATE AND :IV_EDATE AND Z.ADATU NOT BETWEEN :IV_SDATE AND :IV_EDATE)  -- КОНЕЦ ИНТЕРВАЛА В ПЕРИДЕ ОТЧЕТА
                         OR ( Z.ADATU < :IV_SDATE AND LEFT( Z.BDATU,4) = '9999' )                                 -- ВЕЧНЫЙ ИНТЕРВАЛ
                            )
                      GROUP BY Z.INVNR
                      ) AS Z ON Z.INVNR = DATA.INVNR
        LEFT JOIN :LT_VALS_END AS VALS ON VALS.BUKRS = DATA.BUKRS
                                      AND VALS.ANLN1 = DATA.ANLN1
                                      AND VALS.ANLN2 = DATA.ANLN2
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
        LEFT JOIN :LT_ACDOCA AS ACDOCA ON  ACDOCA.ANLN1  = DATA.ANLN1
                                     AND   ACDOCA.ANLN2  = DATA.ANLN2
                                     AND   RIGHT(ACDOCA.POPER,2) = MONTH (:IV_EDATE);
*<-- #8000000259, #8000000280 AK_BUTVILOVS

    ET_DATA_VID = SELECT DATA.ANLN1,
*--> #8000000259, #8000000280 AK_BUTVILOVS Доработка ZAA_ARM
                         DATA.ANLN2,
                         DATA.INVNR,
                         DATA.TXTF1,
                         DATA.TXTF2,
                         DATA.ADATU_IN,
                         DATA.ADATU_OUT,
                         CASE WHEN DATA.ADATU_OUT BETWEEN :IV_SDATE AND :IV_EDATE THEN 0 ELSE DATA.KANSWV END AS KANSWV,
                         CASE WHEN DATA.ADATU_OUT BETWEEN :IV_SDATE AND :IV_EDATE THEN 0 ELSE DATA.DEPR_END END AS DEPR_END,
                         CASE WHEN DATA.ADATU_OUT BETWEEN :IV_SDATE AND :IV_EDATE THEN 0 ELSE DATA.OST_ST END AS OST_ST,
                         DATA.AM_PER,
                         DATA.AM_MONTH,
                         DATA.COSTS,
                         DATA.COSTS_MONTH,
                         DATA.CAUSE_OUT,
                         DATA.BRAS,
                         DATA.BPRED,
                         DATA.WAERS
*<-- #8000000259, #8000000280 AK_BUTVILOVS
                          FROM :ET_DATA_VID AS DATA
                   WHERE (DATA.KANSWV + DATA.DEPR_END + DATA.OST_ST + DATA.AM_PER + DATA.AM_MONTH ) > 0
                   ORDER BY DATA.ANLN1,DATA.ANLN2;
  ENDMETHOD.
ENDCLASS.