class ZCL_AA_DC definition
  public
  final
  create public .

public section.

  types gty_t_ranlb TYPE STANDARD TABLE OF ranlb.
  types gty_t_asset_key TYPE SORTED TABLE OF faa_s_asset_key WITH UNIQUE KEY orgunit asset subnumber. .

  class-methods CHECK_PLAN_VAL_FEHLER
    importing
      !ET_RANLB type GTY_T_RANLB
    returning
      value(RESULT) type ABAP_BOOL .
  class-methods CHECK_PLAN_VAL_VERBU
    importing
      !ET_RANLB type GTY_T_RANLB
    changing
      !CT_ASSET_KEY type gty_t_asset_key .
  class-methods CHECK_PLAN_VAL_MESSAGE
    importing
      !ET_ANLB_SUBNUMBER type FAA_T_ANLB
    changing
      !CV_MESSAGE_CNT type SY-INDEX .
  class-methods PLAN_VALUE_DB_EQUAL_CALC
    importing
      !EV_YEAR type ANLB-LGJAN
      !EV_BUKRS type ANLA-BUKRS
      !EV_ANLN1 type ANLA-ANLN1
      !EV_ANLN2 type ANLA-ANLN2
    returning
      value(RESULT) type ABAP_BOOL .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_AA_DC IMPLEMENTATION.


  METHOD check_plan_val_fehler.
    TYPES:
      BEGIN OF lty_s_check,
        lgjan TYPE anlb-lgjan,
        bukrs TYPE anlb-bukrs,
        anln1 TYPE anlb-anln1,
        anln2 TYPE anlb-anln2,
      END   OF lty_s_check.
    DATA:
      lt_check TYPE STANDARD TABLE OF lty_s_check.
    LOOP AT et_ranlb ASSIGNING FIELD-SYMBOL(<ls_anlb>).
      COLLECT CORRESPONDING lty_s_check( <ls_anlb> ) INTO lt_check.
    ENDLOOP.
    LOOP AT lt_check ASSIGNING FIELD-SYMBOL(<ls_check>).
      IF zcl_aa_dc=>plan_value_db_equal_calc( ev_year  = <ls_check>-lgjan
                                              ev_bukrs = <ls_check>-bukrs
                                              ev_anln1 = <ls_check>-anln1
                                              ev_anln2 = <ls_check>-anln2 ) = abap_false.
        result = 'X'.
        RETURN.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD check_plan_val_message.
    TYPES:
      BEGIN OF lty_s_check,
        lgjan TYPE anlb-lgjan,
        bukrs TYPE anlb-bukrs,
        anln1 TYPE anlb-anln1,
        anln2 TYPE anlb-anln2,
      END   OF lty_s_check.
    DATA:
      lt_check TYPE STANDARD TABLE OF lty_s_check.
    LOOP AT et_anlb_subnumber ASSIGNING FIELD-SYMBOL(<ls_anlb_subnumber>).
      COLLECT CORRESPONDING lty_s_check( <ls_anlb_subnumber> ) INTO lt_check.
    ENDLOOP.
    LOOP AT lt_check ASSIGNING FIELD-SYMBOL(<ls_check>).
      IF zcl_aa_dc=>plan_value_db_equal_calc( ev_year  = <ls_check>-lgjan
                                              ev_bukrs = <ls_check>-bukrs
                                              ev_anln1 = <ls_check>-anln1
                                              ev_anln2 = <ls_check>-anln2 ) = abap_false.
        cv_message_cnt = cv_message_cnt + 1.
        IF 1 = 2. MESSAGE i092(zaa). ENDIF.
        CALL FUNCTION 'MESSAGE_STORE'
          EXPORTING
            arbgb = 'ZAA'
            msgty = 'W'
            txtnr = '092'
            zeile = cv_message_cnt
          EXCEPTIONS
            message_type_not_valid
            not_active
            OTHERS.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


METHOD check_plan_val_verbu.
  TYPES:
    BEGIN OF lty_s_check,
      lgjan TYPE anlb-lgjan,
      bukrs TYPE anlb-bukrs,
      anln1 TYPE anlb-anln1,
      anln2 TYPE anlb-anln2,
    END   OF lty_s_check.
  DATA:
    lt_check TYPE STANDARD TABLE OF lty_s_check.
  LOOP AT et_ranlb ASSIGNING FIELD-SYMBOL(<ls_anlb>).
    COLLECT CORRESPONDING lty_s_check( <ls_anlb> ) INTO lt_check.
  ENDLOOP.
  LOOP AT lt_check ASSIGNING FIELD-SYMBOL(<ls_check>).
    IF zcl_aa_dc=>plan_value_db_equal_calc( ev_year  = <ls_check>-lgjan
                                            ev_bukrs = <ls_check>-bukrs
                                            ev_anln1 = <ls_check>-anln1
                                            ev_anln2 = <ls_check>-anln2 ) = abap_false.
      INSERT VALUE #( orgunit = <ls_check>-bukrs asset = <ls_check>-anln1 subnumber = <ls_check>-anln2 ) INTO TABLE ct_asset_key.
    ENDIF.
  ENDLOOP.
ENDMETHOD.


METHOD plan_value_db_equal_calc.
  DATA:
   ls_post_value TYPE fiaa_dpost.
  cl_fins_acdoc_faa_util=>get_plan_posted_depreciation(
    EXPORTING
      iv_company_code     = ev_bukrs
      iv_asset_main       = ev_anln1
      iv_asset_sub        = ev_anln2
      iv_fiscal_year      = ev_year
      iv_only_posted_depr = ''
    IMPORTING
      et_posted_values  = DATA(lt_dep_post) ).
  SORT lt_dep_post BY peraf afaber.
  DATA(lr_mdo_root) = cl_faa_mdo_factory_static=>get_instance_root(
             iv_bukrs         = ev_bukrs
             iv_anln1         = ev_anln1
             iv_anln2         = ev_anln2
             iv_mode          = if_faa_frw_constants=>gc_mode-display ).
  IF lr_mdo_root->mo_item_manager->mt_dc_data IS INITIAL.
    result = abap_true.
    RETURN.
  ENDIF.
  DELETE lt_dep_post[] WHERE xfeld IS NOT INITIAL.
  LOOP AT lr_mdo_root->mo_item_manager->mt_dc_data ASSIGNING FIELD-SYMBOL(<ls_dc_data>).
    LOOP AT <ls_dc_data>-t_plan_values ASSIGNING FIELD-SYMBOL(<ls_plan_values>)
                                       WHERE gjahr = ev_year
                                         AND slalittype <> '00000'.
      READ TABLE lt_dep_post ASSIGNING FIELD-SYMBOL(<ls_dep_post>)
                             WITH KEY peraf  = <ls_plan_values>-poper
                                      afaber = <ls_plan_values>-afabe
                             BINARY SEARCH.
      IF sy-subrc = 0.
        cl_fins_acdoc_faa_util=>map_slalittype_2_depr_field(
          EXPORTING
            iv_slalittype = <ls_plan_values>-slalittype
            iv_amount     = <ls_plan_values>-hsl
          CHANGING
            cs_post_value = ls_post_value ).

        <ls_dep_post>-nafaz  = <ls_dep_post>-nafaz - ls_post_value-nafaz.
        <ls_dep_post>-safaz  = <ls_dep_post>-safaz - ls_post_value-safaz.
        <ls_dep_post>-aafaz  = <ls_dep_post>-aafaz - ls_post_value-aafaz.
        <ls_dep_post>-mafaz  = <ls_dep_post>-mafaz - ls_post_value-mafaz.
        <ls_dep_post>-zinsz  = <ls_dep_post>-zinsz - ls_post_value-zinsz.
        <ls_dep_post>-aufwz  = <ls_dep_post>-aufwz - ls_post_value-aufwz.
        <ls_dep_post>-aufnz  = <ls_dep_post>-aufnz - ls_post_value-aufnz.
        CLEAR: ls_post_value.
      ENDIF.
    ENDLOOP.
  ENDLOOP.
  DELETE lt_dep_post[] WHERE nafaz = 0 AND safaz = 0 AND aafaz = 0 AND mafaz = 0 AND zinsz = 0 AND aufwz = 0 AND aufnz = 0.
  result = COND #( WHEN lt_dep_post[] IS INITIAL THEN abap_true ELSE abap_false ).
ENDMETHOD.
ENDCLASS.