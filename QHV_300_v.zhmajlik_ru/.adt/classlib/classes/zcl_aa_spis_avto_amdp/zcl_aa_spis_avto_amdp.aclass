CLASS ZCL_AA_SPIS_AVTO_AMDP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES IF_AMDP_MARKER_HDB.

    TYPES:
      BEGIN OF GTY_S_HEADER,
        TDNAME   TYPE TDOBNAME,                       " КЛЮЧ ТЕКСТА
        BUKRS    TYPE BUKRS,                          " ОБОСОБЛЕННОЕ ПОДРАЗДЕЛЕНИЕ
        BNAME    TYPE STRING,                         " НАИМ ОБОСОБЛ ПОДРАЗДЕЛЕНИЯ
        RAUMN    TYPE ANLZ-RAUMN,                     " СТРУКТУРНОЕ ПОДРАЗДЕЛЕНИЕ
        STEXT    TYPE HRP1000-STEXT,
        KTANSW   TYPE T095-KTANSW,                    " СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА   T095-KTANSW ДЛЯ T095-KTOGR = ANKA-KTOGR
        DEAKT    TYPE ANLA-DEAKT,                     " ДАТА СПИСАНИЯ С БУХГАЛТЕРСКОГО УЧЕТА
        LGORT    TYPE ANLZ-LGORT,                     " КОД МОЛ
        LGOBE    TYPE T001L-LGOBE,                    " МОЛ
        PLANR    TYPE ZANLU-PLANTNR,                  " ЗАВОДСКОЙ НОМЕР    ZANLU
        GLNUM    TYPE GLOFAATMDPNDNT-GLO_RUS_TTX_LNUM," ШИФР НОРМАТИВНОГО СРОКА СЛУЖБЫ
        INVNR    TYPE ANLA-INVNR,                     " ИНВЕНТАРНЫЙ НОМЕР
        TXT50    TYPE CHAR256,                        " НАИМЕНОВАНИЕ ОБЪЕКТА ОС
        GJAHR_B  TYPE ZANLU-GJAHR_B,
        AKTIV    TYPE ANLA-AKTIV,
        ZUGDT    TYPE ANLA-ZUGDT,
        MODNUM   TYPE ZANLU-MODNUM,
        TYPBZ    TYPE ANLA-TYPBZ,
        TEXT     TYPE STRING,
      END OF GTY_S_HEADER,
      GTY_T_HEADER TYPE STANDARD TABLE OF GTY_S_HEADER,

      BEGIN OF GTY_S_DATA,
        KANSW   TYPE KANSW,                           " ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ ЗНАЧЕНИЕ НА ДАТУ ФОРМИРОВАНИЯ АКТА.
        KNAFA   TYPE KNAFA,                           " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ                  ЗНАЧЕНИЕ НА ДАТУ ФОРМИРОВАНИЯ АКТА
        NETVL   TYPE VTCUR12,                         " ОСТАТОЧНАЯ СТОИМОСТЬ
        FLAG_ER TYPE I,                               " ПРИЗНАК ТОГО ЧТО ЕСТЬ ДВИЖЕНИЯ ПОСЛЕ ДАТЫ ВЫБЫТИЯ
      END OF GTY_S_DATA,
      GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA,

      BEGIN OF GTY_S_DETAILS_OS,
        TXTF   TYPE CHAR1500,                         " НАИМЕНОВАНИЕ ОБЪЕКТА ОС ПОЛНОЕ НАИМЕНОВАНИЕ ОС (ТАБЛИЦА ZAFULL-TXTF1 + ZAFULL-TXTF2)
        DMNAME TYPE CHAR255,                          " НАИМЕНОВАНИЕ ДРАГОЦЕННЫХ/ПОЛУДРАГОЦЕННЫХ МАТЕРИАЛОВ (МЕТАЛЛОВ, КАМНЕЙ И Т.Д)
        MSEH3  TYPE CHAR10,                           " ЕДИНИЦА ИЗМЕРЕНИЯ
        WEIGHT TYPE CHAR25,                           " КОЛИЧЕСТВО
      END OF GTY_S_DETAILS_OS,
      GTY_T_DETAILS_OS TYPE STANDARD TABLE OF GTY_S_DETAILS_OS,

      BEGIN OF GTY_S_MAT_VALUES,
        MAKTX  TYPE CHAR300,                          " НАИМЕНОВАНИЕ МАТ. ЦЕННОСТИ
        MEINS  TYPE CHAR10,                           " ЕДИНИЦА ИЗМЕРЕНИЯ
        MENGE  TYPE ZAAMAT_AKT-MENGE,                 " КОЛИЧЕСТВО
        COST   TYPE ANLC-KANSW,                       " СТОИМОСТЬ ЕДИНИЦЫ (РУБ., КОП.)
        KANSW  TYPE ANLC-KANSW,                       " СТОИМОСТЬ ВСЕГО (РУБ., КОП.)
        DEBET  TYPE ZAAMAT_AKT-DEBET,                 " СЧЕТ ДЕБЕТА
        KREDIT TYPE ZAAMAT_AKT-KREDIT,                " СЧЕТ КРЕДИТА
      END OF GTY_S_MAT_VALUES,
      GTY_T_MAT_VALUES TYPE STANDARD TABLE OF GTY_S_MAT_VALUES,

      BEGIN OF GTY_S_CORR_ITEMS,
        DEBET  TYPE J_3RKDEBET,                       " СЧЕТ ДЕБЕТА
        KREDIT TYPE J_3RKKREDIT,                      " СЧЕТ КРЕДИТА
        DMBTR  TYPE DMBTR,
      END OF GTY_S_CORR_ITEMS,
      GTY_T_CORR_ITEMS TYPE STANDARD TABLE OF GTY_S_CORR_ITEMS.

    CLASS-METHODS:
      GET_DATA
        IMPORTING
          VALUE(IV_BUKRS)      TYPE BUKRS
          VALUE(IV_ANLN1)      TYPE ANLN1
          VALUE(IV_ANLN2)      TYPE ANLN2
          VALUE(IV_DISPOSAL)   TYPE SY-DATUM
          VALUE(IV_GR)         TYPE CHAR10
          VALUE(IV_KR)         TYPE CHAR10
          VALUE(IV_NO)         TYPE TEXT10
          VALUE(IV_DMTEXT)     TYPE STRING                                           "ДМ ПОСЛЕ СПИСАНИЯ
        EXPORTING
          VALUE(ET_HEADER)     TYPE GTY_T_HEADER
          VALUE(ET_DATA)       TYPE GTY_T_DATA
          VALUE(ET_DETAILS_OS) TYPE GTY_T_DETAILS_OS
          VALUE(ET_MAT_VAL)    TYPE GTY_T_MAT_VALUES
          VALUE(ET_CORR_ITEMS) TYPE GTY_T_CORR_ITEMS
        RAISING CX_AMDP_ERROR.
ENDCLASS.



CLASS ZCL_AA_SPIS_AVTO_AMDP IMPLEMENTATION.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                  USING ANLA T001 T001L ADRC ANLZ ZANLU ZAFULL DD07T T006A T095 FAAV_ANLP GLOFAATMDPNDNT MAKT
                        ZFI_DRAG_MOVEH ZFI_DRAG_MOVEI BKPF FAAV_ANEK HRP1000 ZFI_DRAG_MET ZFI_DRAG_MET_TX
                        ZAAMAT_AKT J_3RK_CORR_ITEMS FAAV_ANEP FAAV_ANEK TABW TABWG FAAT_PLAN_VALUES
                        ZAA_UTILS_HDB=>GET_ASSET_VALUES ZAA_UTILS_HDB=>GET_ASSET_VAL_NG ANLU.

  DECLARE LV_SPRAS   CHAR(1)  := SESSION_CONTEXT('LOCALE_SAP');
  DECLARE LV_MANDT   CHAR(3)  := SESSION_CONTEXT('CLIENT');
  DECLARE LV_ADATE   CHAR(8)  := TO_DATS( LEFT( ADD_MONTHS( :IV_DISPOSAL, 1),8)||'01');
  DECLARE LV_GDATE   CHAR(8)  := YEAR (:IV_DISPOSAL) || '0000';                                -- ДАТА НАЧАЛО ГОДА
  DECLARE LV_EDATEY  CHAR(8)  := YEAR (:IV_DISPOSAL) || '1231';                                -- ДАТА КОНЦА ГОДА
  DECLARE LV_BDATE   CHAR(8)  := TO_DATS( YEAR (:IV_DISPOSAL)||'0101');
  DECLARE LV_EDATE   CHAR(8)  := TO_DATS(LAST_DAY(:IV_DISPOSAL) );                             -- ДАТА ОКОНЧАНИЯ ОТЧЕТА
  DECLARE LV_ADDDATE CHAR(8)  := TO_DATS( ADD_DAYS( :IV_DISPOSAL, 1));
  DECLARE LV_TDNAME  CHAR(70) := CONCAT( CONCAT( RPAD( :IV_BUKRS, 4, '  ' ), :IV_ANLN1), :IV_ANLN2 );

  ET_HEADER =
    SELECT
      CASE WHEN ROW_NUMBER() OVER (PARTITION BY ANLA.MANDT) = 1 THEN :LV_TDNAME END AS TDNAME,
      T001.BUKRS,
      '' AS BNAME,
      ANLZ.RAUMN,
      HRP1000.STEXT,
      T095.KTANSW,
      :IV_DISPOSAL AS DEAKT,
      ANLZ.LGORT,
      T001L.LGOBE,
      ZANLU.PLANTNR AS PLANR,
      GLOFA.GLO_RUS_TTX_LNUM AS GLNUM,
      ANLA.INVNR,
      ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2 AS TXT50,
      ZANLU.GJAHR_B,
      CASE WHEN ANLA.AKTIV <> '' THEN ANLA.AKTIV END AS AKTIV,
      ANLU.ZZBUDATE AS ZUGDT,                                                 --CASE WHEN ANLA.ZUGDT <> '' THEN ANLA.ZUGDT END AS ZUGDT,
      ZANLU.MODNUM AS MODNUM,
      ANLA.TYPBZ AS TYPBZ,
      '' AS TEXT
    FROM ANLA AS ANLA
      INNER JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                             AND T001.BUKRS = ANLA.BUKRS
      LEFT JOIN T095 AS T095 ON T095.MANDT = ANLA.MANDT
                            AND T095.KTOPL = T001.KTOPL
                            AND T095.KTOGR = ANLA.KTOGR
                            AND T095.AFABE = '01'
      LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT = ANLA.MANDT
                                AND ZAFULL.BUKRS = ANLA.BUKRS
                                AND ZAFULL.ANLN1 = ANLA.ANLN1
                                AND ZAFULL.ANLN2 = ANLA.ANLN2
      LEFT JOIN ZANLU AS ZANLU ON ZANLU.MANDT = ANLA.MANDT
                              AND ZANLU.INVNR = ANLA.INVNR
      LEFT JOIN GLOFAATMDPNDNT AS GLOFA ON GLOFA.MANDT = ANLA.MANDT
                                       AND GLOFA.BUKRS = ANLA.BUKRS
                                       AND GLOFA.ANLN1 = ANLA.ANLN1
                                       AND GLOFA.ANLN2 = ANLA.ANLN2
      INNER JOIN ADRC AS ADRC ON ADRC.CLIENT     = T001.MANDT
                             AND ADRC.ADDRNUMBER = T001.ADRNR
      LEFT JOIN ANLZ AS ANLZ ON ANLZ.MANDT = ANLA.MANDT
                            AND ANLZ.BUKRS = ANLA.BUKRS
                            AND ANLZ.ANLN1 = ANLA.ANLN1
                            AND ANLZ.ANLN2 = ANLA.ANLN2
                            AND ANLZ.BDATU >= TO_DATS(:IV_DISPOSAL)
                            AND ANLZ.ADATU <= TO_DATS(:IV_DISPOSAL)
      LEFT JOIN T001L AS T001L ON T001L.MANDT = ANLA.MANDT
                              AND T001L.WERKS = ANLZ.WERKS
                              AND T001L.LGORT = ANLZ.LGORT
      LEFT JOIN HRP1000 AS HRP1000 ON HRP1000.MANDT = ANLA.MANDT
                                  AND HRP1000.PLVAR = '01'
                                  AND HRP1000.OTYPE = 'O'
                                  AND HRP1000.OBJID = ANLZ.RAUMN
                                  AND HRP1000.ISTAT = '1'
                                  AND HRP1000.BEGDA <= TO_DATS(:IV_DISPOSAL)
                                  AND HRP1000.ENDDA >= TO_DATS(:IV_DISPOSAL)
                                  AND HRP1000.LANGU = :LV_SPRAS
      LEFT JOIN ANLU AS ANLU ON ANLU.MANDT = ANLA.MANDT
                            AND ANLU.BUKRS = ANLA.BUKRS
                            AND ANLU.ANLN1 = ANLA.ANLN1
                            AND ANLU.ANLN2 = ANLA.ANLN2

   WHERE ANLA.MANDT = :LV_MANDT
     AND ANLA.BUKRS = :IV_BUKRS
     AND ANLA.ANLN1 = :IV_ANLN1
     AND ANLA.ANLN2 = :IV_ANLN2;

 LT_DATA =
   SELECT
     ANLA.BUKRS,
     ANLA.ANLN1,
     ANLA.ANLN2,
     ABS(STOCK.KANSW) AS KANSW,                                       -- ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
     ANLA.DEAKT
     FROM ANLA AS ANLA
       LEFT JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( :LV_MANDT, :LV_ADDDATE, '' ) AS STOCK
                                  ON  STOCK.BUKRS = ANLA.BUKRS
                                  AND STOCK.ANLN1 = ANLA.ANLN1
                                  AND STOCK.ANLN2 = ANLA.ANLN2
                                  AND STOCK.AFABE = '01'
    WHERE ANLA.MANDT = :LV_MANDT
      AND ANLA.BUKRS = :IV_BUKRS
      AND ANLA.ANLN1 = :IV_ANLN1
      AND ANLA.ANLN2 = :IV_ANLN2
      AND ANLA.DEAKT <> ''
    GROUP BY ANLA.BUKRS, ANLA.ANLN1, ANLA.ANLN2, STOCK.KANSW, STOCK.KNAFA,ANLA.DEAKT;

LT_FAA_ALL =
  SELECT *
    FROM (-- АМОРТИЗАЦИЯ ИЗ ПРОВЕДЕННЫХ ЗНАЧЕНИЙ
          SELECT FAAV.BUKRS AS BUKRS,
                 FAAV.ANLN1 AS ANLN1,
                 FAAV.ANLN2 AS ANLN2,
                 FAAV.PERAF AS POPER,
                 COALESCE(ABS(SUM(FAAV.NAFAZ)),0) AS NAFA,
                 'F' AS TYP
            FROM FAAV_ANLP AS FAAV
           WHERE FAAV.MANDT = :LV_MANDT
             AND FAAV.BUKRS = :IV_BUKRS
             AND FAAV.ANLN1 = :IV_ANLN1
             AND FAAV.ANLN2 = :IV_ANLN2
             AND FAAV.AFABER = '01'
             AND FAAV.PERAF <= LPAD(MONTH( :IV_DISPOSAL ), 3, '0' )
             AND FAAV.GJAHR = YEAR ( :IV_DISPOSAL )
           GROUP BY BUKRS, ANLN1, ANLN2, PERAF
      UNION ALL
          -- АМОРТИЗАЦИЯ ИЗ ПЛАНОВЫХ ЗНАЧЕНИЙ
          SELECT FAAT.BUKRS AS BUKRS,
                 FAAT.ANLN1 AS ANLN1,
                 FAAT.ANLN2 AS ANLN2,
                 FAAT.POPER AS POPER,
                 COALESCE(ABS(SUM(FAAT.HSL)),0) AS NAFA,
                 'P' AS TYP
            FROM FAAT_PLAN_VALUES AS FAAT
           WHERE FAAT.MANDT = :LV_MANDT
             AND FAAT.BUKRS = :IV_BUKRS
             AND FAAT.ANLN1 = :IV_ANLN1
             AND FAAT.ANLN2 = :IV_ANLN2
             AND FAAT.AFABE = '01'
             AND FAAT.GJAHR = YEAR ( :IV_DISPOSAL )
             AND FAAT.POPER <= LPAD(MONTH( :IV_DISPOSAL ), 3, '0' )
           GROUP BY BUKRS, ANLN1, ANLN2, POPER )
   ORDER BY BUKRS, ANLN1,ANLN2, POPER, TYP;

 LT_DATA_PLAN =
   SELECT S1.BUKRS,
          S1.ANLN1,
          S1.ANLN2,
          SUM(S1.NAFA) AS NAFA
     FROM (SELECT S1.BUKRS,
                  S1.ANLN1,
                  S1.ANLN2,
                  S1.POPER,
                  CASE WHEN S2.TYP = S1.TYP AND S1.TYP = 'P' THEN S1.NAFA ELSE 0 END AS NAFA,
                  S1.TYP
             FROM :LT_FAA_ALL AS S1
               LEFT JOIN :LT_FAA_ALL AS S2 ON S2.BUKRS = S1.BUKRS
                                          AND S2.ANLN1 = S1.ANLN1
                                          AND S2.ANLN2 = S1.ANLN2
                                          AND S2.POPER = S1.POPER ) AS S1
    GROUP BY BUKRS, ANLN1, ANLN2;


-- РАССЧИТЫВАЮТСЯ СТОИМОСТИ НА НАЧАЛО И КОНЕЦ ОТЧЕТА
  LT_VALS =
    SELECT BUKRS,
           ANLN1,
           ANLN2,
           ABS(COALESCE(KANSW_DISPB,VALUE_BEG)) AS VALUE_BEG,  -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ
           ABS(COALESCE(NETVL_DISPB,NETVL_BEG)) AS NETVL_BEG,  -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ
           ABS(COALESCE(KANSW_DISPE,VALUE_END)) AS VALUE_END,
           ABS(COALESCE(NETVL_DISPE,NETVL_END)) AS NETVL_END,
           FLAG_ER AS FLAG_ER                                  -- ПРИЗНАК ТОГО ЧТО ЕСТЬ ДВИЖЕНИЯ ПОСЛЕ ДАТЫ ВЫБЫТИЯ
      FROM ( SELECT DT.BUKRS,
                    DT.ANLN1,
                    DT.ANLN2,
                    SUM(CASE WHEN MOVS.BUDAT = :IV_DISPOSAL  THEN MOVS.KANSW END) AS KANSW_DISPB,
                    SUM(CASE WHEN MOVS.BUDAT < :LV_BDATE     THEN MOVS.KANSW END) AS VALUE_BEG,
                    SUM(CASE WHEN MOVS.BUDAT = :IV_DISPOSAL  THEN MOVS.NETVL END) AS NETVL_DISPB,
                    SUM(CASE WHEN MOVS.BUDAT < :LV_BDATE     THEN MOVS.NETVL END) AS NETVL_BEG,

                    SUM(CASE WHEN MOVS.BUDAT = :IV_DISPOSAL  THEN MOVS.KANSW END) AS KANSW_DISPE,
                    SUM(CASE WHEN MOVS.BUDAT <= :LV_EDATE    THEN MOVS.KANSW END) AS VALUE_END,
                    SUM(CASE WHEN MOVS.BUDAT = :IV_DISPOSAL  THEN MOVS.NETVL END) AS NETVL_DISPE,
                    SUM(CASE WHEN MOVS.BUDAT <= :LV_EDATE    THEN MOVS.NETVL END) AS NETVL_END,

                    SUM(CASE WHEN MOVS.BWASL = '' THEN 0
                             ELSE
                               CASE WHEN MOVS.BUDAT > :LV_BDATE AND MOVS.BUDAT <= :LV_EDATEY AND MOVS.BUDAT > :IV_DISPOSAL
                               THEN CASE WHEN MOVS.BUDAT <> :IV_DISPOSAL
                                         THEN 1 ELSE 0 END
                               ELSE 0 END
                    END) AS FLAG_ER
               FROM "ZAA_UTILS_HDB=>GET_ASSET_VAL_NG"( SESSION_CONTEXT('CLIENT') ) AS MOVS
                 INNER JOIN :LT_DATA AS DT ON  DT.BUKRS = MOVS.BUKRS
                                           AND DT.ANLN1 = MOVS.ANLN1
                                           AND DT.ANLN2 = MOVS.ANLN2
              WHERE MOVS.AFABE = '01'
                AND ( DT.DEAKT <> '00000000' AND ( MOVS.BWASL <> '' OR RIGHT (MOVS.BUDAT,4) = '0000' )
                   OR DT.DEAKT = '00000000' ) -- ЕСЛИ СПИСАНИЯ НЕ БЫЛО
                AND MOVS.BUDAT >= :LV_GDATE
                AND MOVS.BUDAT <= :LV_EDATEY
              GROUP BY DT.BUKRS, DT.ANLN1, DT.ANLN2 ) ;


 ET_DATA =
   SELECT CASE WHEN VL.FLAG_ER > 0 THEN COALESCE( VL.VALUE_BEG,DATA.KANSW) ELSE COALESCE( VL.VALUE_END,DATA.KANSW) END               AS KANSW, -- ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
          ( CASE WHEN VL.FLAG_ER > 0 THEN VL.VALUE_BEG - VL.NETVL_BEG ELSE VL.VALUE_END - VL.NETVL_END END ) + COALESCE(PLAN.NAFA,0) AS KNAFA, -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ
          ( CASE WHEN VL.FLAG_ER > 0 THEN VL.NETVL_BEG ELSE VL.NETVL_END END ) - COALESCE(PLAN.NAFA,0)                               AS NETVL,
          VL.FLAG_ER AS FLAG_ER
     FROM :LT_DATA AS DATA
       LEFT JOIN :LT_DATA_PLAN AS PLAN ON PLAN.BUKRS = DATA.BUKRS
                                      AND PLAN.ANLN1 = DATA.ANLN1
                                      AND PLAN.ANLN2 = DATA.ANLN2
       LEFT JOIN :LT_VALS AS VL ON  VL.BUKRS = DATA.BUKRS
                                AND VL.ANLN1 = DATA.ANLN1
                                AND VL.ANLN2 = DATA.ANLN2;

  ET_DETAILS_OS =
    SELECT
      '' AS TXTF,
      DRAG_MET_TX.NAME AS DMNAME,
      CASE
          WHEN DRAG_MET.TYPE_MK = '1' THEN :IV_GR
          WHEN DRAG_MET.TYPE_MK = '2' THEN :IV_KR
      END AS MSEH3,
      CASE WHEN ROW_NUMBER() OVER (PARTITION BY ANLA.MANDT) = 1 AND COUNT( MOVEI.WEIGHT ) = 0 THEN :IV_NO
           ELSE REPLACE ( ABS( SUM(CASE WHEN MOVEH.ACQ_RET <> '' OR MOVEH.ACQ_RET IS NOT NULL THEN MOVEI.WEIGHT
                                        ELSE CASE WHEN MOVEH_2.ACQ_RET = 2 THEN - MOVEI.WEIGHT
                                                  WHEN MOVEH_2.ACQ_RET = 1 THEN MOVEI.WEIGHT END END ) ), '.', ',') END AS WEIGHT
    FROM ANLA AS ANLA
        LEFT JOIN ZFI_DRAG_MOVEH AS MOVEH ON  MOVEH.MANDT = ANLA.MANDT
                                          AND MOVEH.BUKRS = ANLA.BUKRS
                                          AND MOVEH.ANLN1 = ANLA.ANLN1
                                          AND MOVEH.ANLN2 = ANLA.ANLN2
                                          AND MOVEH.DATE_MOVE = :IV_DISPOSAL
                                          AND ACQ_RET = 2
                                          AND MOVEH.STBLG = ''

        LEFT JOIN ZFI_DRAG_MOVEH AS MOVEH_2 ON  MOVEH_2.MANDT = ANLA.MANDT
                                            AND MOVEH_2.BUKRS = ANLA.BUKRS
                                            AND MOVEH_2.ANLN1 = ANLA.ANLN1
                                            AND MOVEH_2.ANLN2 = ANLA.ANLN2
                                            AND MOVEH_2.DATE_MOVE < :IV_DISPOSAL
                                            AND MOVEH_2.STBLG = ''

        LEFT JOIN ZFI_DRAG_MOVEI AS MOVEI ON  MOVEI.MANDT = COALESCE(MOVEH.MANDT,MOVEH_2.MANDT)
                                          AND MOVEI.BUKRS = COALESCE(MOVEH.BUKRS,MOVEH_2.BUKRS)
                                          AND MOVEI.ANLN1 = COALESCE(MOVEH.ANLN1,MOVEH_2.ANLN1)
                                          AND MOVEI.ANLN2 = COALESCE(MOVEH.ANLN2,MOVEH_2.ANLN2)
                                          AND MOVEI.DATE_MOVE = COALESCE(MOVEH.DATE_MOVE,MOVEH_2.DATE_MOVE)
                                          AND MOVEI.NMOVE = COALESCE(MOVEH.NMOVE,MOVEH_2.NMOVE)
        LEFT JOIN ZFI_DRAG_MET AS DRAG_MET ON DRAG_MET.MANDT    = MOVEI.MANDT
                                          AND DRAG_MET.KOD_MK   = MOVEI.KOD_MK
                                          AND DRAG_MET.PASP_KOM = MOVEI.PASP_KOM
        LEFT JOIN ZFI_DRAG_MET_TX AS DRAG_MET_TX
                                          ON  DRAG_MET_TX.MANDT  = DRAG_MET.MANDT
                                          AND DRAG_MET_TX.SPRAS  = :LV_SPRAS
                                          AND DRAG_MET_TX.KOD_MK = DRAG_MET.KOD_MK
        LEFT JOIN DD07T AS DD07T ON DD07T.DOMNAME    = 'ZTYPE_MK'
                                AND DD07T.DDLANGUAGE = :LV_SPRAS
                                AND DD07T.AS4LOCAL   = 'A'
                                AND DD07T.DOMVALUE_L = DRAG_MET.TYPE_MK
        WHERE ANLA.MANDT = :LV_MANDT
          AND ANLA.BUKRS = :IV_BUKRS
          AND ANLA.ANLN1 = :IV_ANLN1
          AND ANLA.ANLN2 = :IV_ANLN2
        GROUP BY ANLA.MANDT, DRAG_MET_TX.NAME, DRAG_MET.TYPE_MK
      UNION
      SELECT
        ''         AS TXTF,
        :IV_DMTEXT AS DMNAME,
        ''         AS MSEH3,
        ''         AS WEIGHT
        FROM ANLA AS ANLA
        INNER JOIN ZANLU AS ZU ON ZU.MANDT = ANLA.MANDT
                              AND ZU.INVNR = ANLA.INVNR
                              AND ZU.DMOFF = 'X'
        WHERE ANLA.MANDT = :LV_MANDT
          AND ANLA.BUKRS = :IV_BUKRS
          AND ANLA.ANLN1 = :IV_ANLN1
          AND ANLA.ANLN2 = :IV_ANLN2;

  ET_MAT_VAL =
    SELECT
      MAKT.MAKTX,
      CASE WHEN T006A.MSEH3 <> '' THEN T006A.MSEH3 ELSE ZAAMAT_AKT.MEINS END AS MEINS,
      ZAAMAT_AKT.MENGE,
      ROUND( ZAAMAT_AKT.COST, 2 ) AS COST,
      ROUND( ZAAMAT_AKT.MENGE * ZAAMAT_AKT.COST, 2 ) AS KANSW,
      ZAAMAT_AKT.DEBET,
      ZAAMAT_AKT.KREDIT
    FROM ANLA AS ANLA
      LEFT JOIN ZAAMAT_AKT AS ZAAMAT_AKT ON  ZAAMAT_AKT.MANDT = ANLA.MANDT
                                         AND ZAAMAT_AKT.INVNR = ANLA.INVNR
      LEFT JOIN MAKT AS MAKT ON  MAKT.MANDT = ANLA.MANDT
                             AND MAKT.MATNR = ZAAMAT_AKT.MATNR
                             AND MAKT.SPRAS = :LV_SPRAS
      LEFT JOIN T006A AS T006A ON  T006A.MANDT = ANLA.MANDT
                               AND T006A.SPRAS = :LV_SPRAS
                               AND T006A.MSEHI = ZAAMAT_AKT.MEINS
    WHERE ANLA.MANDT = :LV_MANDT
      AND ANLA.BUKRS = :IV_BUKRS
      AND ANLA.ANLN1 = :IV_ANLN1
      AND ANLA.ANLN2 = :IV_ANLN2;

  ET_CORR_ITEMS =
    SELECT DISTINCT
      DEBET,
      KREDIT,
      DMBTR
    FROM J_3RK_CORR_ITEMS AS CITEMS
      INNER JOIN BKPF AS BKPF ON  BKPF.MANDT = CITEMS.MANDT
                              AND BKPF.BUKRS = CITEMS.BUKRS
                              AND BKPF.BELNR = CITEMS.BELNR
                              AND BKPF.GJAHR = CITEMS.GJAHR
      INNER JOIN FAAV_ANEK AS ANEK ON  ANEK.MANDT = BKPF.MANDT
                                   AND ANEK.AWTYP = BKPF.AWTYP
                                   AND ANEK.BELNR || ANEK.AWORG = BKPF.AWKEY
                                   AND ANEK.BUDAT = BKPF.BUDAT
                                   AND ANEK.LDGRP = BKPF.LDGRP
      INNER JOIN ANLA AS ANLA ON  ANLA.MANDT = ANEK.MANDT
                              AND ANLA.BUKRS = ANEK.BUKRS
                              AND ANLA.ANLN1 = ANEK.ANLN1
                              AND ANLA.ANLN2 = ANEK.ANLN2
      INNER JOIN FAAV_ANEP AS ANEP ON  ANEP.MANDT = ANEK.MANDT
                                   AND ANEP.BUKRS = ANEK.BUKRS
                                   AND ANEP.ANLN1 = ANEK.ANLN1
                                   AND ANEP.ANLN2 = ANEK.ANLN2
                                   AND ANEP.GJAHR = ANEK.GJAHR
                                   AND ANEP.LNRAN = ANEK.LNRAN
                                   AND ANEP.AFABE = '01'
                                   --AND ANEP.LNSAN <> ''
                                   AND ( ANEP.LNSAN = '' OR ANEP.LNSAN = '00000' ) --СТОРНИРОВАННЫЕ ОТСЕКАЕМ
      INNER JOIN TABW AS TABW ON  TABW.MANDT = ANEP.MANDT
                              AND TABW.BWASL = ANEP.BWASL
      INNER JOIN TABWG AS TABWG ON TABWG.MANDT  = TABW.MANDT
                               AND TABWG.BWAGRP = TABW.BWAGRP
                               AND TABWG.GITCOL = '2'
    WHERE ANEK.MANDT = :LV_MANDT
      AND ANEK.BUKRS = :IV_BUKRS
      AND ANEK.ANLN1 = :IV_ANLN1
      AND ANEK.ANLN2 = :IV_ANLN2
      AND ANEK.LDGRP = 'L1'
      AND CITEMS.BUDAT = :IV_DISPOSAL
    ORDER BY DEBET;

  ENDMETHOD.
ENDCLASS.