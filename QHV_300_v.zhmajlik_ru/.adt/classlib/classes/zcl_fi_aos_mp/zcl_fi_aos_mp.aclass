*********************************************************************************
* Описание         : Анализ основных средств, ДВ в МА, НМА по методам переоценки
* Код ТС           : DEV.030-БНУ.09.O-018
*********************************************************************************
CLASS ZCL_FI_AOS_MP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB .
  TYPES:
    BEGIN OF GTY_S_DATA,
      BUKRS      TYPE BUKRS,
      NAME_BE    TYPE TEXT200,          " НАИМЕНОВАНИЕ  БЕ
      ACCOUNT    TYPE KTANSW,           " СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
      HKONT_NAME TYPE SKAT-TXT20,       " НАИМЕНОВАНИЕ СЧЕТА
      DEPGR      TYPE J_3RFAMORTGR,     " ГРУППА
      DEPTX      TYPE J_3RFAMORTGRDESC, " НАИМЕНОВАНИЕ ГРУППЫ
      MENGE      TYPE ANLA-MENGE,       " КОЛИЧЕСТВО
      NETVL      TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ
      WEAROUT    TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ СО 100% ИЗНОСОМ
      NOTREV     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      NETVLNL    TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      MENGEI     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      NETVLI     TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      MENGED     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
      NETVLD     TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
      NOTE       TYPE CHAR20,           " ПРИМЕЧАНИЕ
      " ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ.
      ANLKL      TYPE ANLA-ANLKL,       " КЛАСС
      ANLKL_NAME TYPE ANKT-TXK20,       " НАИМЕНОВАНИЕ КЛАССА
      ANLN1      TYPE ANLN1,
      ANLN2      TYPE ANLN2,
      INVNR      TYPE ANLA-INVNR,       " ИНВЕНТАРНЫЙ НОМЕР
      NAME_OC    TYPE TEXT200,          " НАИМЕНОВАНИЕ ОС
      LGORT      TYPE ANLZ-LGORT,       " СКЛАД
      NAME_LGORT TYPE T001L-LGOBE,      " НАИМЕНОВАНИЕ СКЛАДА
      PERST      TYPE KANSW,            " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП. -- НА КОНЕЦ ДНЯ 31.12.
      AMORT      TYPE KNAFA,            " СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
    END OF GTY_S_DATA,
    GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA,
    BEGIN OF GTY_S_SKAT,
      SAKNR      TYPE SKAT-SAKNR,
      TXT50      TYPE SKAT-TXT50,
    END OF GTY_S_SKAT,
    GTY_T_SKAT TYPE STANDARD TABLE OF GTY_S_SKAT WITH EMPTY KEY,
    BEGIN OF GTY_S_SUM,
      SUM_MENGE      TYPE ANLA-MENGE,       " КОЛИЧЕСТВО
      SUM_NETVL      TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ
      SUM_WEAROUT    TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ СО 100% ИЗНОСОМ
      SUM_NOTREV     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      SUM_NETVLNL    TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      SUM_MENGEI     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      SUM_NETVLI     TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      SUM_MENGED     TYPE ANLA-MENGE,       " КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
      SUM_NETVLD     TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
    END OF GTY_S_SUM,
    GTY_T_SUM   TYPE STANDARD TABLE OF GTY_S_SUM.

    CLASS-METHODS GET_DATA
      IMPORTING
        VALUE(IV_GJAHR)    TYPE GJAHR
        VALUE(IV_FLT)      TYPE STRING
        VALUE(IV_USECH)    TYPE CHAR1
      EXPORTING
        VALUE(ET_DATA)     TYPE GTY_T_DATA
        VALUE(ET_SKAT)     TYPE GTY_T_SKAT
        VALUE(ET_DATA_EX)  TYPE GTY_T_DATA
        VALUE(ET_ITOG)     TYPE GTY_T_SUM
        VALUE(EV_BUKRS)    TYPE STRING                 "ПЕРЕЧИСЛЕНИЕ НОМЕРОВ БЕ ДЛЯ ВЫВОДА В EXCEL
        VALUE(EV_SAKNR)    TYPE STRING                 "ПЕРЕЧИСЛЕНИЕ НОМЕРОВ СЧЕТОВ ДЛЯ ВЫВОДА В EXCEL
      RAISING
        CX_AMDP_ERROR.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_AOS_MP IMPLEMENTATION.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                  USING ANLA T001 SKAT GLOFAAASSETDATA J_3RFDEPRGROUPT ANKT T001L
                        ANLZ T095 ZAFULL ZFI_REVAS ZAA_UTILS_HDB=>GET_ASSET_VALUES.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    --ОБЛАСТЬ ОЦЕНКИ
    DECLARE LV_AFABE CHAR(2) := '01';
    DECLARE LV_BUDAT CHAR(8) := :IV_GJAHR || '1231';
    --ФОРМИРУЕТСЯ НА ДАТУ
    DECLARE LV_BDATE CHAR(8) := :IV_GJAHR || '0101';
    DECLARE LV_EDATE CHAR(8) := :IV_GJAHR || '1231';

    DECLARE LV_ALL_MONTH CHAR(8) := TO_DATS( ADD_DAYS( LAST_DAY( :LV_EDATE ), 1 ) );

    DECLARE LV_USECH CHAR(1) := :IV_USECH;


    LT_VALS =
      SELECT
         VALS.BUKRS,
         VALS.ANLN1,
         VALS.ANLN2,
         SUM( VALS.KANSW ) AS KANSW,
         SUM( VALS.KNAFA ) AS KNAFA,
         SUM( VALS.KAAFA ) AS KAAFA,
         SUM( VALS.KAUFN ) AS KAUFN,
         SUM( VALS.NETVL ) AS NETVL
      FROM "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( SESSION_CONTEXT('CLIENT'), :LV_ALL_MONTH,  '' ) AS VALS
      WHERE VALS.AFABE = LV_AFABE
      GROUP BY
         VALS.BUKRS,
         VALS.ANLN1,
         VALS.ANLN2;

    --ОС
    LT_DATA =
      SELECT ANLA.BUKRS,
             T001.BUTXT                                         AS NAME_BE,    -- НАИМЕНОВАНИЕ  БЕ
             T095.KTANSW                                        AS ACCOUNT,    -- СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
             SKAT.TXT20                                         AS HKONT_NAME, -- НАИМЕНОВАНИЕ СЧЕТА
             GLOFA.GLO_RUS_DEPGR                                AS DEPGR,      -- ГРУППА
             GROUPT.DESCRIPT                                    AS DEPTX,      -- НАИМЕНОВАНИЕ ГРУППЫ
             ANLA.MENGE                                         AS MENGE,      -- КОЛИЧЕСТВО
             VALS.NETVL                                         AS NETVL,      -- ОСТАТОЧНАЯ СТОИМОСТЬ
             CASE
               WHEN (VALS.NETVL) = 0
                   THEN ANLA.MENGE ELSE '0' END                 AS WEAROUT,    -- КОЛ-ВО ОБЪЕКТОВ СО 100% ИЗНОСОМ
             CASE
               WHEN ( REVAS.INVNR IS NULL OR ( REVAS.INVNR IS NOT NULL AND ( REVAS.STATUS <> 'P' OR REVAS.REV_TYPE <> '9' ) ) )
                   THEN ANLA.MENGE ELSE '0' END                 AS NOTREV,     -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
             CASE
               WHEN ( REVAS.INVNR IS NULL OR ( REVAS.INVNR IS NOT NULL AND ( REVAS.STATUS <> 'P' OR REVAS.REV_TYPE <> '9' ) ) )
                   THEN VALS.NETVL ELSE '0' END    AS NETVLNL,                 -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
             CASE
               WHEN ( REVAS.INVNR IS NOT NULL AND REVAS.STATUS = 'P' AND REVAS.REV_TYPE = '9' AND REVAS.METHOD = 'I' )
                   THEN ANLA.MENGE ELSE '0' END                 AS MENGEI,     -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
             CASE
               WHEN ( REVAS.INVNR IS NOT NULL AND REVAS.STATUS = 'P' AND REVAS.REV_TYPE = '9' AND REVAS.METHOD = 'I' )
                   THEN VALS.NETVL ELSE '0' END    AS NETVLI,                  -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
             CASE
               WHEN ( REVAS.INVNR IS NOT NULL AND REVAS.STATUS = 'P' AND REVAS.REV_TYPE = '9' AND REVAS.METHOD = 'D' )
                   THEN ANLA.MENGE ELSE '0' END                 AS MENGED,     -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
             CASE
               WHEN ( REVAS.INVNR IS NOT NULL AND REVAS.STATUS = 'P' AND REVAS.REV_TYPE = '9' AND REVAS.METHOD = 'D' )
                   THEN VALS.NETVL ELSE '0' END    AS NETVLD,                  -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
             ''                                                 AS NOTE,       -- ПРИМЕЧАНИЕ
             -- ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ.
             ANLA.ANLKL                               AS ANLKL,      -- КЛАСС
             ANKT.TXK20                               AS ANLKL_NAME, -- НАИМЕНОВАНИЕ КЛАССА
             ANLA.ANLN1,
             ANLA.ANLN2,
             ANLA.INVNR,                                                                                                             -- ИНВЕНТАРНЫЙ НОМЕР
             ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2 AS NAME_OC,
             COALESCE(ANLZ.LGORT,'')                  AS LGORT,      -- СКЛАД
             T001L.LGOBE                              AS NAME_LGORT, -- НАИМЕНОВАНИЕ СКЛАДА
             VALS.KANSW                               AS PERST,      -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
             (VALS.KNAFA + VALS.KAAFA + VALS.KAUFN ) * -1 AS AMORT,  -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
             REVAS.METHOD                             AS METHOD
        FROM ANLA AS ANLA
          INNER JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                                 AND T001.BUKRS = ANLA.BUKRS
          INNER JOIN T095 AS T095 ON T095.MANDT = ANLA.MANDT                               -- ДЛЯ ОТЧЕТА В РАЗРЕЗЕ ИНВЕНТАРНЫХ НОМЕРОВ
                                 AND T095.KTOGR = ANLA.KTOGR
                                 AND T095.AFABE = :LV_AFABE
          LEFT JOIN SKAT AS SKAT ON SKAT.MANDT = ANLA.MANDT
                                AND SKAT.SPRAS = :LV_SPRAS
                                AND SKAT.KTOPL = T001.KTOPL
                                AND SKAT.SAKNR = T095.KTANSW
          LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT = ANLA.MANDT
                                    AND ZAFULL.BUKRS = ANLA.BUKRS
                                    AND ZAFULL.ANLN1 = ANLA.ANLN1
                                    AND ZAFULL.ANLN2 = ANLA.ANLN2
          LEFT JOIN GLOFAAASSETDATA AS GLOFA ON GLOFA.MANDT = ANLA.MANDT
                                            AND GLOFA.BUKRS = ANLA.BUKRS
                                            AND GLOFA.ANLN1 = ANLA.ANLN1
                                            AND GLOFA.ANLN2 = ANLA.ANLN2
          LEFT JOIN J_3RFDEPRGROUPT AS GROUPT ON GROUPT.MANDT = GLOFA.MANDT
                                             AND GROUPT.SPRSL = :LV_SPRAS
                                             AND GROUPT.AMORTGR = GLOFA.GLO_RUS_DEPGR
          LEFT JOIN ANKT AS ANKT ON ANKT.MANDT = ANLA.MANDT                                -- НАИМЕНОВАНИЕ КЛАССА ОС
                                AND ANKT.SPRAS = :LV_SPRAS
                                AND ANKT.ANLKL = ANLA.ANLKL
          INNER JOIN ANLZ AS ANLZ ON ANLZ.MANDT = ANLA.MANDT
                                 AND ANLZ.BUKRS = ANLA.BUKRS
                                 AND ANLZ.ANLN1 = ANLA.ANLN1
                                 AND ANLZ.ANLN2 = ANLA.ANLN2
                                 AND ANLZ.ADATU <= :LV_BUDAT
                                 AND ANLZ.BDATU >= :LV_BUDAT        -- НА 31.01.
          LEFT OUTER JOIN T001L AS T001L ON T001L.MANDT = ANLZ.MANDT
                                        AND T001L.WERKS = ANLZ.WERKS
                                        AND T001L.LGORT = ANLZ.LGORT
          LEFT OUTER JOIN :LT_VALS AS VALS ON VALS.BUKRS = ANLA.BUKRS
                                          AND VALS.ANLN1 = ANLA.ANLN1
                                          AND VALS.ANLN2 = ANLA.ANLN2
          LEFT OUTER JOIN ZFI_REVAS AS REVAS ON REVAS.MANDT = ANLA.MANDT
                                            AND REVAS.BUKRS = ANLA.BUKRS
                                            AND REVAS.ANLN1 = ANLA.ANLN1
                                            AND REVAS.ANLN2 = ANLA.ANLN2
                                            AND REVAS.INVNR = ANLA.INVNR
                                            AND REVAS.GJAHR = :IV_GJAHR
                                            AND REVAS.POS_INDEX = '000'
         WHERE ANLA.MANDT = :LV_MANDT
         AND ANLA.AKTIV <= :LV_BUDAT
         AND ANLA.AKTIV <> '00000000'
         AND (ANLA.DEAKT > :LV_BUDAT OR ANLA.DEAKT = '00000000')
         ;

  LT_DATA = APPLY_FILTER ( :LT_DATA, :IV_FLT);
  IF IS_EMPTY ( :LT_DATA ) THEN RETURN; END IF;

-- ДЛЯ ALV
  IF :IV_USECH = 'X' THEN
  ET_DATA =
    SELECT LT_DATA.BUKRS,
           LT_DATA.NAME_BE,                                   -- НАИМЕНОВАНИЕ БЕ
           LT_DATA.ACCOUNT,                                   -- СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
           LT_DATA.HKONT_NAME,
           LT_DATA.DEPGR,
           LT_DATA.DEPTX,
           LT_DATA.MENGE,
           LT_DATA.NETVL,
           LT_DATA.WEAROUT,
           LT_DATA.NOTREV,
           LT_DATA.NETVLNL,
           LT_DATA.MENGEI,
           LT_DATA.NETVLI,
           LT_DATA.MENGED,
           LT_DATA.NETVLD,
           LT_DATA.NOTE,
           -- ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ.
           LT_DATA.ANLKL,
           LT_DATA.ANLKL_NAME,
           LT_DATA.ANLN1,
           LT_DATA.ANLN2,
           LT_DATA.INVNR,                                     -- ИНВЕНТАРНЫЙ НОМЕР
           LT_DATA.NAME_OC,
           LT_DATA.LGORT,
           LT_DATA.NAME_LGORT,
           LT_DATA.PERST,                                     -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
           LT_DATA.AMORT                                      -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
      FROM :LT_DATA AS LT_DATA
      WHERE LT_DATA.PERST <> '0.00'
      ORDER BY LT_DATA.BUKRS;
    ELSE
    ET_DATA =
    SELECT LT_DATA.BUKRS,
           LT_DATA.NAME_BE,                                   -- НАИМЕНОВАНИЕ БЕ
           '' AS ACCOUNT,                                   -- СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
           '' AS HKONT_NAME,
           LT_DATA.DEPGR,
           LT_DATA.DEPTX,
           SUM ( LT_DATA.MENGE )   AS MENGE,
           SUM ( LT_DATA.NETVL )   AS NETVL,
           SUM ( LT_DATA.WEAROUT ) AS WEAROUT,
           SUM ( LT_DATA.NOTREV )  AS NOTREV,
           SUM ( LT_DATA.NETVLNL ) AS NETVLNL,
           SUM ( LT_DATA.MENGEI )  AS MENGEI,
           SUM ( LT_DATA.NETVLI )  AS NETVLI,
           SUM ( LT_DATA.MENGED )  AS MENGED,
           SUM ( LT_DATA.NETVLD )  AS NETVLD,
           '' AS NOTE,
           -- ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ.
           '' AS ANLKL,
           '' AS ANLKL_NAME,
           '' AS ANLN1,
           '' AS ANLN2,
           '' AS INVNR,                                     -- ИНВЕНТАРНЫЙ НОМЕР
           '' AS NAME_OC,
           '' AS LGORT,
           '' AS NAME_LGORT,
           SUM ( LT_DATA.PERST ) AS PERST,                 -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
           SUM ( LT_DATA.AMORT ) AS AMORT                  -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
      FROM :LT_DATA AS LT_DATA
      WHERE LT_DATA.PERST <> '0.00'
      GROUP BY LT_DATA.BUKRS, LT_DATA.NAME_BE, LT_DATA.DEPGR, LT_DATA.DEPTX
      ORDER BY LT_DATA.BUKRS;
  END IF ;

-- ДЛЯ EXCEL
  ET_DATA_EX =
    SELECT '' AS BUKRS,
           '' AS NAME_BE,
           '' AS ACCOUNT,
           '' AS HKONT_NAME,
           LT_DATA.DEPGR,
           LT_DATA.DEPTX,
           SUM ( LT_DATA.MENGE )   AS MENGE,
           SUM ( LT_DATA.NETVL )   AS NETVL,
           SUM ( LT_DATA.WEAROUT ) AS WEAROUT,
           SUM ( LT_DATA.NOTREV )  AS NOTREV,
           SUM ( LT_DATA.NETVLNL ) AS NETVLNL,
           SUM ( LT_DATA.MENGEI )  AS MENGEI,
           SUM ( LT_DATA.NETVLI )  AS NETVLI,
           SUM ( LT_DATA.MENGED )  AS MENGED,
           SUM ( LT_DATA.NETVLD )  AS NETVLD,
           '' AS NOTE,
           -- ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ.
           '' AS ANLKL,
           '' AS ANLKL_NAME,
           '' AS ANLN1,
           '' AS ANLN2,
           '' AS INVNR,
           '' AS NAME_OC,
           '' AS LGORT,
           '' AS NAME_LGORT,
           '0,00' AS PERST,
           '0,00' AS AMORT
      FROM :LT_DATA AS LT_DATA
      WHERE LT_DATA.PERST <> '0.00'
      GROUP BY LT_DATA.DEPGR, LT_DATA.DEPTX;

  ET_ITOG =
    SELECT
      SUM ( LT_DATA.MENGE )   AS SUM_MENGE,            -- КОЛИЧЕСТВО
      SUM ( LT_DATA.NETVL )   AS SUM_NETVL,            -- ОСТАТОЧНАЯ СТОИМОСТЬ
      SUM ( LT_DATA.WEAROUT ) AS SUM_WEAROUT,          -- КОЛ-ВО ОБЪЕКТОВ СО 100% ИЗНОСОМ
      SUM ( LT_DATA.NOTREV )  AS SUM_NOTREV,           -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      SUM ( LT_DATA.NETVLNL ) AS SUM_NETVLNL,          -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ НЕ ПЕРЕОЦЕНИВАЮТСЯ
      SUM ( LT_DATA.MENGEI )  AS SUM_MENGEI,           -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      SUM ( LT_DATA.NETVLI )  AS SUM_NETVLI,           -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ ИНДЕКСНЫМ МЕТОДОМ
      SUM ( LT_DATA.MENGED )  AS SUM_MENGED,           -- КОЛ-ВО ОБЪЕКТОВ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
      SUM ( LT_DATA.NETVLD )  AS SUM_NETVLD            -- ОСТАТОЧНАЯ СТОИМОСТЬ ПО ОБЪЕКТАМ, КОТОРЫЕ ПЕРЕОЦЕНИВАЮТСЯ МЕТОДОМ ПРЯМОЙ ОЦЕНКИ
      FROM :LT_DATA AS LT_DATA
      WHERE LT_DATA.PERST <> '0.00';

  ET_SKAT =
    SELECT DISTINCT
        SKAT.SAKNR,
        SKAT.TXT50
      FROM SKAT AS SKAT
        INNER JOIN :LT_DATA AS LT_DATA ON LT_DATA.ACCOUNT = SKAT.SAKNR
      WHERE SKAT.SPRAS = :LV_SPRAS
        AND SKAT.KTOPL = 'BNFT'
        ORDER BY SKAT.SAKNR;

   --ПЕРЕЧИСЛЕНИЕ НОМЕРОВ БЕ ЧЕРЕЗ ЗАПЯТУЮ ДЛЯ EXCEL
    SELECT STRING_AGG( BUKRS, ', ') INTO EV_BUKRS
        FROM (
             SELECT
                 FIRST_VALUE(D.BUKRS) OVER ( PARTITION BY D.BUKRS ORDER BY D.BUKRS ) AS BUKRS
               FROM :ET_DATA AS D
               GROUP BY BUKRS) ;

   --ПЕРЕЧИСЛЕНИЕ НОМЕРОВ СЧЕТОВ ЧЕРЕЗ ЗАПЯТУЮ ДЛЯ EXCEL
    SELECT STRING_AGG( SAKNR, ', ') INTO EV_SAKNR
        FROM (
             SELECT
                 FIRST_VALUE(S.SAKNR) OVER ( PARTITION BY S.SAKNR ORDER BY S.SAKNR ) AS SAKNR
               FROM :ET_SKAT AS S
               GROUP BY SAKNR) ;

  ENDMETHOD.
ENDCLASS.