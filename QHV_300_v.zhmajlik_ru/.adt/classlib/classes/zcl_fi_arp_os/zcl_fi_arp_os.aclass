CLASS ZCL_FI_ARP_OS DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB.
  TYPES:
    BEGIN OF GTY_S_DATA,
      BUKRS   TYPE ANLA-BUKRS,
*      ANLN1   TYPE ANLA-ANLN1,
*      ANLN2   TYPE ANLA-ANLN2,
      KANSW   TYPE ANLC-KANSW,   " ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ ДО ПЕРЕОЦЕНКИ
      A_KANSW TYPE ANLC-KANSW,   " ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ ПОСЛЕ ПЕРЕОЦЕНКИ
      NETVL   TYPE ANLC-KANSW,   " ОСТАТОЧНАЯ СТОИМОСТЬ ОС ДО ПЕРЕОЦЕНКИ
      A_NETVL TYPE ANLC-KANSW,   " ОСТАТОЧНАЯ СТОИМОСТЬ ОС ПОСЛЕ ПЕРЕОЦЕНКИ
      WAERS   TYPE T001-WAERS,
    END OF GTY_S_DATA,
    GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA.


   TYPES:
     BEGIN OF GTY_S_ASSET,
       BUKRS  TYPE BUKRS,
       ANLN1  TYPE ANLN1,
       ANLN2  TYPE ANLN2,
       INVNR  TYPE INVNR,
       ANLKL  TYPE ANLKL,
       KTANSW TYPE KTANSW,
       WAERS  TYPE WAERS,
       KANSW  TYPE KANSW,
       AMORT  TYPE KNAFA,
       NETVL  TYPE NETVL,
     END OF GTY_S_ASSET,
     GTY_T_ASSET TYPE STANDARD TABLE OF GTY_S_ASSET,


     BEGIN OF GTY_S_REV,
       BUKRS   TYPE BUKRS,
       ANLN1   TYPE ANLN1,
       ANLN2   TYPE ANLN2,
       KANSW   TYPE KANSW,
       A_KANSW TYPE KANSW,
       NETVL   TYPE NETVL,
       A_NETVL TYPE NETVL,
     END OF GTY_S_REV,
     GTY_T_REV TYPE STANDARD TABLE OF GTY_S_REV,

     BEGIN OF GTY_S_OS,
       BUKRS   TYPE BUKRS,
       ANLN1   TYPE ANLN1,
       ANLN2   TYPE ANLN2,
       KANSW   TYPE KANSW,
       A_KANSW TYPE KANSW,
       NETVL   TYPE NETVL,
       A_NETVL TYPE NETVL,
       WAERS   TYPE WAERS,
    END OF GTY_S_OS,
    GTY_T_OS TYPE STANDARD TABLE OF GTY_S_OS.


    CLASS-METHODS:
      GET_DATA
        IMPORTING
          VALUE(IV_BW_83_UP) TYPE ANEP-BWASL
          VALUE(IV_BW_83_DN) TYPE ANEP-BWASL
          VALUE(IV_BW_91_UP) TYPE ANEP-BWASL
          VALUE(IV_BW_91_DN) TYPE ANEP-BWASL
          VALUE(IV_BUKRS)    TYPE BUKRS
          VALUE(IV_FLT)      TYPE STRING
          VALUE(IV_DATE)     TYPE D
        EXPORTING
          VALUE(ET_DATA)     TYPE GTY_T_DATA,

      GET_DATA2
        IMPORTING
          VALUE(IV_BW_83_UP) TYPE ANEP-BWASL
          VALUE(IV_BW_83_DN) TYPE ANEP-BWASL
          VALUE(IV_BW_91_UP) TYPE ANEP-BWASL
          VALUE(IV_BW_91_DN) TYPE ANEP-BWASL
          VALUE(IV_BUKRS)    TYPE BUKRS
          VALUE(IV_FLT)      TYPE STRING
          VALUE(IV_DATE)     TYPE D
        EXPORTING
          VALUE(ET_DATA)     TYPE GTY_T_DATA
          VALUE(ET_OS)       TYPE GTY_T_OS
          VALUE(ET_ASSET)    TYPE GTY_T_ASSET
          VALUE(ET_REV)      TYPE GTY_T_REV.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_ARP_OS IMPLEMENTATION.


METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                            USING ANLA T001 T095 ZAA_V0_MOVE ZFI_REVAS TVARVC.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_DATE  CHAR(8) := SESSION_CONTEXT('SAP_SYSTEM_DATE');
    DECLARE LV_AFABE CHAR(2) := '01';

    --ФОРМИРУЕТСЯ НА ДАТУ СОСТАВЛЕНИЯ АКТА ПРЕДЫДУЩЕГО ГОДА
    DECLARE LV_BDATE CHAR(8) := ( YEAR (:IV_DATE) - 1 ) || '0101';
    DECLARE LV_EDATE CHAR(8) := ( YEAR (:IV_DATE) - 1 ) || '1231';


  LT_DATA =
     SELECT ANLA.BUKRS,
            ANLA.ANLN1,
            ANLA.ANLN2,
            ANLA.INVNR,
            ANLA.ANLKL,
            T095.KTANSW,
            IFNULL(REV.KANSW_AFTER,0.00) - IFNULL(MOVS.KANSW,0.00)                  AS KANSW,                       -- ПС(ПЕРЕОЦЕНЕННАЯ) ОС - СУММА ДО ПЕРЕОЦЕНКИ
            IFNULL(REV.KANSW_AFTER,0.00)                                            AS A_KANSW,                     -- ПС ОС ПОСЛЕ ПЕРЕОЦЕНКИ
            IFNULL(REV.KANSW_AFTER,0.00) - ABS(IFNULL(REV.KNAFA_AFTER,0.00)) -
            IFNULL(MOVS.KANSW,0.00) - IFNULL(MOVS.KNAFA,0.00)                       AS NETVL,                       -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ДО ПЕРЕОЦЕНКИ
            IFNULL(REV.KANSW_AFTER,0.00) - ABS(IFNULL(REV.KNAFA_AFTER,0.00))        AS A_NETVL,                     -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ПОСЛЕ ПЕРЕОЦЕНКИ
            T001.WAERS
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        INNER JOIN T095 AS T095 ON T095.KTOPL = T001.KTOPL                                                          -- СЧЕТА ЗАПАСА КЛАССА ОС
                               AND T095.MANDT = ANLA.MANDT
                               AND T095.KTOGR = ANLA.KTOGR
                               AND T095.AFABE = :LV_AFABE

        LEFT OUTER JOIN ( SELECT MOVS.MANDT,
                                 MOVS.BUKRS,
                                 MOVS.ANLN1,
                                 MOVS.ANLN2,
                                ABS( SUM( MOVS.KANSW ) ) AS KANSW,
                            CASE WHEN MOVS.BUDAT <= :LV_EDATE THEN ABS(SUM( MOVS.KNAFA ))  ELSE 0 END AS KNAFA     -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ ДО ПЕРЕОЦЕНКИ НА 01.01

                       FROM ZAA_V0_MOVE AS MOVS

                      WHERE MOVS.AFABE = :LV_AFABE
                        AND MOVS.LNSAN = '00000'
                        AND MOVS.BWASL IN ( SELECT V.LOW FROM TVARVC AS V WHERE V.NAME = 'ZAA_BWASL_REVAL' AND MANDT = :LV_MANDT AND TYPE = 'S' )
                        AND MOVS.BUDAT BETWEEN :LV_BDATE AND :LV_EDATE       -- НА ДАТУ СОСТАВЛЕНИЯ АКТА ПРЕДЫДУЩЕГО ГОДА

                      GROUP BY MOVS.MANDT,MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.BELNR, MOVS.BUDAT, MOVS.LNRAN

                   ) AS MOVS ON MOVS.MANDT = ANLA.MANDT
                            AND MOVS.BUKRS = ANLA.BUKRS
                            AND MOVS.ANLN1 = ANLA.ANLN1
                            AND MOVS.ANLN2 = ANLA.ANLN2

        LEFT OUTER JOIN ZFI_REVAS AS REV ON REV.MANDT = ANLA.MANDT
                                        AND REV.BUKRS = ANLA.BUKRS
                                        AND REV.ANLN1 = ANLA.ANLN1
                                        AND REV.ANLN2 = ANLA.ANLN2
                                        AND REV.AFABE = :LV_AFABE                                                         -- ГОД ПРЕДШЕСТВУЮЩИЙ ГОДУ ИЗ ДАТЫ АКТА
      WHERE ANLA.MANDT = :LV_MANDT
        AND ANLA.BUKRS = :IV_BUKRS
        AND REV.STATUS = 'P'
        AND REV.REV_TYPE = '9'
        AND REV.GJAHR = YEAR (:LV_BDATE)
                                         ;
    LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

    ET_DATA =
      SELECT DATA.BUKRS,
*      DATA.ANLN1, DATA.ANLN2,
             SUM(DATA.KANSW)   AS KANSW,    -- ПС ОС ДО ПЕРЕОЦЕНКИ
             SUM(DATA.A_KANSW) AS A_KANSW,  -- ПС ОС ПОСЛЕ ПЕРЕОЦЕНКИ
             SUM(DATA.NETVL)   AS NETVL,    -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ДО ПЕРЕОЦЕНКИ
             SUM(DATA.A_NETVL) AS A_NETVL,   -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ПОСЛЕ ПЕРЕОЦЕНКИ
             DATA.WAERS
        FROM :LT_DATA AS DATA
       GROUP BY BUKRS, WAERS
       ;

  ENDMETHOD.


  METHOD GET_DATA2 BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                            USING ANLA T001 T095 ZAA_V0_MOVE ZFI_REVAS TVARVC
                            ZAA_UTILS_HDB=>GET_ASSET_VAL_NG.
---------------------------------------------------------
    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_DATE  CHAR(8) := SESSION_CONTEXT('SAP_SYSTEM_DATE');
    DECLARE LV_AFABE CHAR(2) := '01';

    --ФОРМИРУЕТСЯ НА ДАТУ СОСТАВЛЕНИЯ АКТА ПРЕДЫДУЩЕГО ГОДА
    DECLARE LV_BDATE CHAR(8) := ( YEAR (:IV_DATE) - 1 ) || '0101';
    DECLARE LV_EDATE CHAR(8) := ( YEAR (:IV_DATE) - 1 ) || '1231';
    DECLARE LV_YEAR CHAR(8)  :=  YEAR (:IV_DATE) - 1 ;

  ET_ASSET =
    SELECT
      ANLA.BUKRS,
      ANLA.ANLN1,
      ANLA.ANLN2,
      ANLA.INVNR,
      ANLA.ANLKL,
      T095.KTANSW,
      T001.WAERS,
      NG.KANSW_01                        AS KANSW,
      NG.AMORT_01                        AS AMORT,
      ( NG.KANSW_01 - ABS( NG.AMORT_01)) AS NETVL

   FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        INNER JOIN T095 AS T095 ON T095.KTOPL = T001.KTOPL                                                          -- СЧЕТА ЗАПАСА КЛАССА ОС
                               AND T095.MANDT = ANLA.MANDT
                               AND T095.KTOGR = ANLA.KTOGR
                               AND T095.AFABE = :LV_AFABE

    LEFT JOIN ( SELECT  BUKRS,                                                                        -- выборка остатков на дату переоценки
                              ANLN1,
                              ANLN2,
                              SUM(KANSW_01) AS KANSW_01,
                              SUM(AMORT_01) AS AMORT_01

                      FROM (  SELECT
                                BUKRS,
                                ANLN1,
                                ANLN2,
                                SUM( CASE AFABE WHEN '01' THEN KANSW END )                          AS KANSW_01,
                                SUM( CASE AFABE WHEN '01' THEN - KANSW + NETVL END )                AS AMORT_01

                              FROM "ZAA_UTILS_HDB=>GET_ASSET_VAL_NG"( :LV_MANDT ) AS NG
                              WHERE NG.MONAT <> '13'
                                AND NG.MONAT <> '14'
                                AND NG.BUDAT <= :LV_EDATE
                                AND LEFT( NG.BUDAT,4 ) = :LV_YEAR
                                AND NG.AFABE = '01'
                              GROUP BY BUKRS, ANLN1, ANLN2 )
                      GROUP BY BUKRS, ANLN1, ANLN2 ) AS NG ON  NG.BUKRS = ANLA.BUKRS
                                                           AND NG.ANLN1 = ANLA.ANLN1
                                                           AND NG.ANLN2 = ANLA.ANLN2
        WHERE ANLA.MANDT = :LV_MANDT
          AND ANLA.BUKRS = :IV_BUKRS ;

  ET_ASSET = APPLY_FILTER (:ET_ASSET, :IV_FLT);

 ET_REV =
     SELECT REV.BUKRS,
            REV.ANLN1,
            REV.ANLN2,

            IFNULL(REV.KANSW_AFTER,0.00) - IFNULL(MOVS.KANSW,0.00)                  AS KANSW,                       -- ПС(ПЕРЕОЦЕНЕННАЯ) ОС - СУММА ДО ПЕРЕОЦЕНКИ
            IFNULL(REV.KANSW_AFTER,0.00)                                            AS A_KANSW,                     -- ПС ОС ПОСЛЕ ПЕРЕОЦЕНКИ

            (IFNULL(REV.KANSW_AFTER,0.00) - ABS(IFNULL(REV.KNAFA_AFTER,0.00))) -
               (IFNULL(MOVS.KANSW,0.00) + IFNULL(MOVS.KNAFA,0.00))                  AS NETVL,                       -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ДО ПЕРЕОЦЕНКИ

            IFNULL(REV.KANSW_AFTER,0.00) - ABS(IFNULL(REV.KNAFA_AFTER,0.00))        AS A_NETVL                      -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ПОСЛЕ ПЕРЕОЦЕНКИ

      FROM ZFI_REVAS AS REV
      JOIN :ET_ASSET AS ANLA ON REV.BUKRS = ANLA.BUKRS
                            AND REV.ANLN1 = ANLA.ANLN1
                            AND REV.ANLN2 = ANLA.ANLN2
                            AND REV.AFABE = :LV_AFABE

        JOIN ( SELECT MOVS.MANDT,
                      MOVS.BUKRS,
                      MOVS.ANLN1,
                      MOVS.ANLN2,
                      SUM( MOVS.KANSW ) AS KANSW,
                      CASE WHEN MOVS.BUDAT <= :LV_EDATE THEN SUM( MOVS.KNAFA )  ELSE 0 END AS KNAFA     -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ ДО ПЕРЕОЦЕНКИ НА 01.01

                       FROM ZAA_V0_MOVE AS MOVS

                      WHERE MOVS.AFABE = :LV_AFABE
                        AND MOVS.LNSAN = '00000'
                        AND MOVS.LNSAN = '00000'
                        AND MOVS.MONAT = 13
                        AND MOVS.BWASL IN ( SELECT V.LOW FROM TVARVC AS V WHERE V.NAME = 'ZAA_BWASL_REVAL' AND MANDT = :LV_MANDT AND TYPE = 'S' )
                        AND MOVS.BUDAT BETWEEN :LV_BDATE AND :LV_EDATE       -- НА ДАТУ СОСТАВЛЕНИЯ АКТА ПРЕДЫДУЩЕГО ГОДА

                      GROUP BY MOVS.MANDT,MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2, MOVS.BUDAT -- MOVS.BELNR, MOVS.BUDAT, MOVS.LNRAN

                   ) AS MOVS ON MOVS.BUKRS = ANLA.BUKRS
                            AND MOVS.ANLN1 = ANLA.ANLN1
                            AND MOVS.ANLN2 = ANLA.ANLN2

      WHERE REV.MANDT    = :LV_MANDT
        AND MOVS.MANDT   = :LV_MANDT
        AND REV.STATUS   = 'P'
        AND REV.REV_TYPE = '9'
        AND REV.GJAHR = YEAR (:LV_YEAR)
                                         ;
    ET_OS =
      SELECT
        LT.BUKRS,
        LT.ANLN1,
        LT.ANLN2,

        COALESCE( REV.KANSW,   LT.KANSW )   AS KANSW,
        COALESCE( REV.A_KANSW, LT.KANSW )   AS A_KANSW,
        COALESCE( REV.NETVL,   LT.NETVL )   AS NETVL,
        COALESCE( REV.A_NETVL, LT.NETVL )   AS A_NETVL,

        LT.WAERS

        FROM :ET_ASSET AS LT

        LEFT JOIN :ET_REV AS REV
          ON LT.ANLN1 = REV.ANLN1
         AND LT.ANLN2 = REV.ANLN2
         AND LT.BUKRS = REV.BUKRS
                            ;

    ET_DATA =
      SELECT DATA.BUKRS,
        SUM(DATA.KANSW)   AS KANSW,     -- ПС ОС ДО ПЕРЕОЦЕНКИ
        SUM(DATA.A_KANSW) AS A_KANSW,   -- ПС ОС ПОСЛЕ ПЕРЕОЦЕНКИ
        SUM(DATA.NETVL)   AS NETVL,     -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ДО ПЕРЕОЦЕНКИ
        SUM(DATA.A_NETVL) AS A_NETVL,   -- ОСТАТОЧНАЯ СТОИМОСТЬ ОС ПОСЛЕ ПЕРЕОЦЕНКИ
        DATA.WAERS

        FROM :ET_OS AS DATA

       GROUP BY BUKRS, WAERS
       ;

  ENDMETHOD.
ENDCLASS.