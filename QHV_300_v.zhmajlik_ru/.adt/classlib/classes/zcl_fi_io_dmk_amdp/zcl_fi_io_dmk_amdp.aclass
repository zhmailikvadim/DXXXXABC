*------------------------------------------------------------------------------*
* ОПИСАНИЕ          : ИНВЕНТАРИЗАЦИОННАЯ ОПИСЬ ДРАГОЦЕННЫХ МЕТАЛЛОВ И          *
*                     ДРАГОЦЕННЫХ КАМНЕЙ                                       *
* КОД ТС            : АСУБН.САП-КСУП.DEV.030-БНУ.03.О-208    #14717            *
* РАЗРАБОТЧИК       : ЖУДРО Н.В.                                               *
* ПОСТАНОВКА ЗАДАЧИ : ГАНЖА Т.И.                                               *
*------------------------------------------------------------------------------*
CLASS ZCL_FI_IO_DMK_AMDP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES IF_AMDP_MARKER_HDB.

    TYPES:
      BEGIN OF GTY_S_DATA,
        NUM          TYPE I,                       "НОМЕР ПО ПОРЯДКУ
        BUKRS        TYPE ANLA-BUKRS,              "БЕ
        ANLN1        TYPE ANLA-ANLN1,              "НОМЕР ОС
        ANLN2        TYPE ANLA-ANLN2,              "СУБНОМЕР ОС
        ANLKL        TYPE ANLA-ANLKL,              "КЛАСС ОСНОВНЫХ СРЕДСТВ
        INVNR        TYPE ANLA-INVNR,              "ИНВЕНТАРНЫЙ НОМЕР
        KONTS        TYPE T095-KTANSW,             "ОСНОВНОЙ СЧЕТ
        MAKTX        TYPE ZTEXT300," --ZAFULL-TXTF1 "НАИМЕНОВАНИЕ ОБЪЕКТОВ ОСНОВНЫХ СРЕДСТВ
        MEINS        TYPE ANLA-MEINS,              "КОД ЕДИНИЦЫ ИЗМЕРЕНИЯ
        MSEHL        TYPE T006A-MSEHL,             "ЕДИНИЦА ИЗМЕРЕНИЯ
        GJAHR        TYPE ZANLU-GJAHR_B,           "ГОД ВЫПУСКА
        PLANTNR      TYPE ZANLU-PLANTNR,           "ЗАВОДСКОЙ НОМЕР
        DATE_SPIS    TYPE ANLA-AKTIV,              "ПРЕДПОЛАГАЕМЫЙ СРОК СПИСАНИЯ

        ZOLOTO_P     TYPE ZFI_DRAG_OST-WEIGHT,     "ЗОЛОТО ПО УЧЕТУ (ПО ПАСПОРТУ)
        ZOLOTO_K     TYPE ZFI_DRAG_OST-WEIGHT,     "ЗОЛОТО ПО УЧЕТУ (КОМИССИОННО)
        SEREBRO_P    TYPE ZFI_DRAG_OST-WEIGHT,     "СЕРЕБРО ПО УЧЕТУ (ПО ПАСПОРТУ)
        SEREBRO_K    TYPE ZFI_DRAG_OST-WEIGHT,     "СЕРЕБРО ПО УЧЕТУ (КОМИССИОННО)
        PLATINA_P    TYPE ZFI_DRAG_OST-WEIGHT,     "ПЛАТИНА ПО УЧЕТУ (ПО ПАСПОРТУ)
        PLATINA_K    TYPE ZFI_DRAG_OST-WEIGHT,     "ПЛАТИНА ПО УЧЕТУ (КОМИССИОННО)
        MET_PLAT_P   TYPE ZFI_DRAG_OST-WEIGHT,     "МПГ (ПО ПАСПОРТУ)
        MET_PLAT_K   TYPE ZFI_DRAG_OST-WEIGHT,     "МПГ (КОМИССИОННО)

        ALMAZ_P      TYPE ZFI_DRAG_OST-WEIGHT,     "АЛМАЗЫ (ПО ПАСПОРТУ)
        ALMAZ_K      TYPE ZFI_DRAG_OST-WEIGHT,     "АЛМАЗЫ (КОМИССИОННО)
        RUBIN_P      TYPE ZFI_DRAG_OST-WEIGHT,     "РУБИНЫ (ПО ПАСПОРТУ)
        RUBIN_K      TYPE ZFI_DRAG_OST-WEIGHT,     "РУБИНЫ (КОМИССИОННО)
        IZUMRUD_P    TYPE ZFI_DRAG_OST-WEIGHT,     "ИЗУМРУДЫ (ПО ПАСПОРТУ)
        IZUMRUD_K    TYPE ZFI_DRAG_OST-WEIGHT,     "ИЗУМРУДЫ (КОМИССИОННО)
        SAPFIR_P     TYPE ZFI_DRAG_OST-WEIGHT,     "САПФИРЫ (ПО ПАСПОРТУ)
        SAPFIR_K     TYPE ZFI_DRAG_OST-WEIGHT,     "САПФИРЫ (КОМИССИОННО)
        ZHEMCHUG_P   TYPE ZFI_DRAG_OST-WEIGHT,     "ЖЕМЧУГ (ПО ПАСПОРТУ)
        ZHEMCHUG_K   TYPE ZFI_DRAG_OST-WEIGHT,     "ЖЕМЧУГ (КОМИССИОННО)
        ALEXANDRIT_P TYPE ZFI_DRAG_OST-WEIGHT,     "АЛЕКСАНДРИТЫ (ПО ПАСПОРТУ)
        ALEXANDRIT_K TYPE ZFI_DRAG_OST-WEIGHT,     "АЛЕКСАНДРИТЫ (КОМИССИОННО)

      END OF GTY_S_DATA,

      BEGIN OF GTY_S_SUM,
        SUM_ZOLOTO_P     TYPE p LENGTH 15 DECIMALS 9,      "ЗОЛОТО ПО УЧЕТУ (ПО ПАСПОРТУ)
        SUM_ZOLOTO_K     TYPE p LENGTH 15 DECIMALS 9,      "ЗОЛОТО ПО УЧЕТУ (КОМИССИОННО)
        SUM_SEREBRO_P    TYPE p LENGTH 15 DECIMALS 9,      "СЕРЕБРО ПО УЧЕТУ (ПО ПАСПОРТУ)
        SUM_SEREBRO_K    TYPE p LENGTH 15 DECIMALS 9,      "СЕРЕБРО ПО УЧЕТУ (КОМИССИОННО)
        SUM_PLATINA_P    TYPE p LENGTH 15 DECIMALS 9,      "ПЛАТИНА ПО УЧЕТУ (ПО ПАСПОРТУ)
        SUM_PLATINA_K    TYPE p LENGTH 15 DECIMALS 9,      "ПЛАТИНА ПО УЧЕТУ (КОМИССИОННО)
        SUM_MET_PLAT_P   TYPE p LENGTH 15 DECIMALS 9,      "МПГ (ПО ПАСПОРТУ)
        SUM_MET_PLAT_K   TYPE p LENGTH 15 DECIMALS 9,      "МПГ (КОМИССИОННО)

        SUM_ALMAZ_P      TYPE p LENGTH 15 DECIMALS 9,      "АЛМАЗЫ (ПО ПАСПОРТУ)
        SUM_ALMAZ_K      TYPE p LENGTH 15 DECIMALS 9,      "АЛМАЗЫ (КОМИССИОННО)
        SUM_RUBIN_P      TYPE p LENGTH 15 DECIMALS 9,      "РУБИНЫ (ПО ПАСПОРТУ)
        SUM_RUBIN_K      TYPE p LENGTH 15 DECIMALS 9,      "РУБИНЫ (КОМИССИОННО)
        SUM_IZUMRUD_P    TYPE p LENGTH 15 DECIMALS 9,      "ИЗУМРУДЫ (ПО ПАСПОРТУ)
        SUM_IZUMRUD_K    TYPE p LENGTH 15 DECIMALS 9,      "ИЗУМРУДЫ (КОМИССИОННО)
        SUM_SAPFIR_P     TYPE p LENGTH 15 DECIMALS 9,      "САПФИРЫ (ПО ПАСПОРТУ)
        SUM_SAPFIR_K     TYPE p LENGTH 15 DECIMALS 9,      "САПФИРЫ (КОМИССИОННО)
        SUM_ZHEMCHUG_P   TYPE p LENGTH 15 DECIMALS 9,      "ЖЕМЧУГ (ПО ПАСПОРТУ)
        SUM_ZHEMCHUG_K   TYPE p LENGTH 15 DECIMALS 9,      "ЖЕМЧУГ (КОМИССИОННО)
        SUM_ALEXANDRIT_P TYPE p LENGTH 15 DECIMALS 9,      "АЛЕКСАНДРИТЫ (ПО ПАСПОРТУ)
        SUM_ALEXANDRIT_K TYPE p LENGTH 15 DECIMALS 9,      "АЛЕКСАНДРИТЫ (КОМИССИОННО)
      END OF GTY_S_SUM,

      GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA WITH EMPTY KEY,
      GTY_T_SUM  TYPE STANDARD TABLE OF GTY_S_SUM  WITH EMPTY KEY.

    CLASS-METHODS GET_DATA
      IMPORTING
        VALUE(IV_DATE)   TYPE SY-DATUM
        VALUE(IV_LGORT)  TYPE ANLZ-LGORT
        VALUE(IV_COND)   TYPE STRING
        VALUE(IV_DMTEXT) TYPE STRING       "ДМ ПОСЛЕ СПИСАНИЯ

      EXPORTING
        VALUE(ET_DATA)  TYPE GTY_T_DATA
        VALUE(ET_SUM)   TYPE GTY_T_SUM.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_IO_DMK_AMDP IMPLEMENTATION.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB
                     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                     USING ANLA ANLZ T095 ZAFULL ZANLU T006A ZFI_DRAG_MOVEH ZFI_DRAG_MOVEI ANLB
                           ZAA_UTILS_HDB=>GET_ASSET_SPI.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');

    IF :IV_LGORT = ''
      THEN IV_LGORT := '%';
    END IF;

    ET_DATA =
      SELECT DISTINCT
        0 AS NUM,
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.ANLKL,
        ANLA.INVNR,
        T095.KTANSW AS KONTS,
        CASE WHEN ( ZU.DMOFF = 'X' OR ZU.DKOFF = 'X' )
             -- THEN ZF.TXTF1 || ZF.TXTF2 || CHAR(10) || '(' || :IV_DMTEXT || ')'
                THEN ZF.TXTF1 || ZF.TXTF2 || CHAR(10) || :IV_DMTEXT
             ELSE ZF.TXTF1 || ZF.TXTF2
         END AS MAKTX,
        ANLA.MEINS,
        T6.MSEHL,
        ZU.GJAHR_B AS GJAHR,
        ZU.PLANTNR,
        --TO_DATS( ADD_MONTHS(ANLA.AKTIV,( COALESCE(ANLBZA_END.NDJAR, ANLB.NDJAR) * 12 + COALESCE(ANLBZA_END.NDPER, ANLB.NDPER) ) ) ) AS DATE_SPI,
        TO_DATS( ADD_MONTHS(ANLA.AKTIV,( ANLB.NDJAR * 12 + ANLB.NDPER ) ) ) AS DATE_SPIS,
        0 AS ZOLOTO_P,
        0 AS ZOLOTO_K,
        0 AS SEREBRO_P,
        0 AS SEREBRO_K,
        0 AS PLATINA_P,
        0 AS PLATINA_K,
        0 AS MET_PLAT_P,
        0 AS MET_PLAT_K,
        0 AS ALMAZ_P,
        0 AS ALMAZ_K,
        0 AS RUBIN_P,
        0 AS RUBIN_K,
        0 AS IZUMRUD_P,
        0 AS IZUMRUD_K,
        0 AS SAPFIR_P,
        0 AS SAPFIR_K,
        0 AS ZHEMCHUG_P,
        0 AS ZHEMCHUG_K,
        0 AS ALEXANDRIT_P,
        0 AS ALEXANDRIT_K

      FROM ANLA AS ANLA
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT
                                AND T095.KTOGR = ANLA.KTOGR
        INNER JOIN ANLZ AS ANLZ ON  ANLZ.MANDT = ANLA.MANDT
                                AND ANLZ.BUKRS = ANLA.BUKRS
                                AND ANLZ.ANLN1 = ANLA.ANLN1
                                AND ANLZ.ANLN2 = ANLA.ANLN2
                                AND ANLZ.LGORT LIKE :IV_LGORT
                                AND ANLZ.ADATU <= :IV_DATE
                                AND ANLZ.BDATU >= :IV_DATE
        LEFT JOIN ZAFULL AS ZF ON  ZF.MANDT = ANLA.MANDT
                               AND ZF.BUKRS = ANLA.BUKRS
                               AND ZF.ANLN1 = ANLA.ANLN1
                               AND ZF.ANLN2 = ANLA.ANLN2
        LEFT JOIN ZANLU AS ZU ON  ZU.MANDT = ANLA.MANDT
                              AND ZU.INVNR = ANLA.INVNR
        LEFT JOIN T006A AS T6 ON  T6.MANDT = ANLA.MANDT
                              AND T6.MSEHI = ANLA.MEINS
                              AND T6.SPRAS = :LV_SPRAS
        LEFT OUTER JOIN  "ZAA_UTILS_HDB=>GET_ASSET_SPI"( SESSION_CONTEXT('CLIENT'), :IV_DATE ) as ANLBZA_END
                               ON  ANLBZA_END.BUKRS = ANLA.BUKRS       -- ДАННЫЕ ПО ОЦЕНКЕ НА начало/КОНЕЦ ОТЧЕТА
                               AND ANLBZA_END.ANLN1 = ANLA.ANLN1
                               AND ANLBZA_END.ANLN2 = ANLA.ANLN2
                               AND ANLBZA_END.AFABE = T095.AFABE
        LEFT JOIN ANLB AS ANLB ON  ANLB.BUKRS = ANLA.BUKRS
                               AND ANLB.MANDT = ANLA.MANDT
                               AND ANLB.ANLN1 = ANLA.ANLN1
                               AND ANLB.ANLN2 = ANLA.ANLN2
                               AND ANLB.AFABE = T095.AFABE
                               AND ANLB.BDATU >= :IV_DATE
                               AND ANLB.ADATU <= :IV_DATE
     WHERE ANLA.MANDT  = :LV_MANDT
       AND T095.AFABE  = '01'
       AND ZU.DMDKFLAG = 'X' -- ВЫБОРКА ОС ТОЛЬКО С ПРИЗНАКОМ  ВЕДЕТСЯ УЧЕТ ДМДК
       AND ANLA.AKTIV <= :IV_DATE AND ANLA.AKTIV <> ''
       AND ( ANLA.DEAKT >= :IV_DATE OR ANLA.DEAKT = '00000000' )
     ORDER BY KONTS, MAKTX;

    ET_DATA = APPLY_FILTER (:ET_DATA, :IV_COND);

    -- ВЫБОРКА ОСТАТКОВ ДМ ДК НА ДАТУ
    LT_DMDK =
      SELECT BUKRS AS BUKRS_DM, ANLN1 AS ANLN1_DM, ANLN2 AS ANLN2_DM,
             SUM(C001_1) AS ZOLOTO_P,
             SUM(C001_2) AS ZOLOTO_K,
             SUM(C002_1) AS SEREBRO_P,
             SUM(C002_2) AS SEREBRO_K,
             SUM(C003_1) AS PLATINA_P,
             SUM(C003_2) AS PLATINA_K,
             SUM(C004_1 + C006_1 + C007_1 + C005_1 + C008_1 + C009_1) AS MET_PLAT_P,
             SUM(C004_2 + C006_2 + C007_2 + C005_2 + C008_2 + C009_2 ) AS MET_PLAT_K,
             SUM(C011_1) AS ALMAZ_P,
             SUM(C011_2) AS ALMAZ_K,
             SUM(C014_1) AS RUBIN_P,
             SUM(C014_2) AS RUBIN_K,
             SUM(C012_1) AS IZUMRUD_P,
             SUM(C012_2) AS IZUMRUD_K,
             SUM(C015_1) AS SAPFIR_P,
             SUM(C015_2) AS SAPFIR_K,
             SUM(C013_1) AS ZHEMCHUG_P,
             SUM(C013_2) AS ZHEMCHUG_K,
             SUM(C010_1) AS ALEXANDRIT_P,
             SUM(C010_2) AS ALEXANDRIT_K,
             SUM(C006_1) AS IRID_P,
             SUM(C006_2) AS IRID_K,
             SUM(C007_1) AS OSM_P,
             SUM(C007_2) AS OSM_K,
             SUM(C005_1) AS PALAD_P,
             SUM(C005_2) AS PALAD_K,
             SUM(C008_1) AS ROD_P,
             SUM(C008_2) AS ROD_K,
             SUM(C009_1) AS RUT_P,
             SUM(C009_2) AS RUT_K
         FROM ( SELECT BUKRS, ANLN1, ANLN2,
                       CASE WHEN KOD_MK = '001' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C001_1, -- ЗОЛОТО ПО УЧЕТУ (ПО ПАСПОРТУ)   C001_1
                       CASE WHEN KOD_MK = '001' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C001_2,
                       CASE WHEN KOD_MK = '002' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C002_1, -- СЕРЕБРО ПО УЧЕТУ (ПО ПАСПОРТУ)  C002_1
                       CASE WHEN KOD_MK = '002' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C002_2,
                       CASE WHEN KOD_MK = '003' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C003_1, -- ПЛАТИНА ПО УЧЕТУ (ПО ПАСПОРТУ)  C003_1
                       CASE WHEN KOD_MK = '003' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C003_2,
                       CASE WHEN KOD_MK = '004' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C004_1, -- МПГ (ПО ПАСПОРТУ)               C004_1
                       CASE WHEN KOD_MK = '004' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C004_2,

                       CASE WHEN KOD_MK = '011' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C011_1, -- АЛМАЗЫ (ПО ПАСПОРТУ)            C011_1
                       CASE WHEN KOD_MK = '011' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C011_2,
                       CASE WHEN KOD_MK = '014' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C014_1, -- РУБИНЫ (ПО ПАСПОРТУ)            C014_1
                       CASE WHEN KOD_MK = '014' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C014_2,
                       CASE WHEN KOD_MK = '012' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C012_1, -- ИЗУМРУДЫ (ПО ПАСПОРТУ)          C012_1
                       CASE WHEN KOD_MK = '012' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C012_2,
                       CASE WHEN KOD_MK = '015' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C015_1, -- САПФИРЫ (ПО ПАСПОРТУ)           C015_1
                       CASE WHEN KOD_MK = '015' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C015_2,
                       CASE WHEN KOD_MK = '013' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C013_1, -- ЖЕМЧУГ (ПО ПАСПОРТУ)            C013_1
                       CASE WHEN KOD_MK = '013' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C013_2,
                       CASE WHEN KOD_MK = '010' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C010_1, -- АЛЕКСАНДРИТЫ (ПО ПАСПОРТУ)      C010_1
                       CASE WHEN KOD_MK = '010' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C010_2,

                       -- 20.11.2019 #19980 МПГ = МПГ+Иридий+Осмий+Палладий+Родий+Рутений
                       CASE WHEN KOD_MK = '006' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C006_1,  -- ИРИДИЙ (ПО ПАСПОРТУ)           C006_1
                       CASE WHEN KOD_MK = '006' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C006_2,  -- ИРИДИЙ (КОМИССИОННО)           C006_2
                       CASE WHEN KOD_MK = '007' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C007_1,  -- ОСМИЙ (ПО ПАСПОРТУ)            C007_1
                       CASE WHEN KOD_MK = '007' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C007_2,  -- ОСМИЙ (КОМИССИОННО)            C007_2
                       CASE WHEN KOD_MK = '005' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C005_1,  -- ПАЛЛАДИЙ (ПО ПАСПОРТУ)         C005_1
                       CASE WHEN KOD_MK = '005' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C005_2,  -- ПАЛЛАДИЙ (КОМИССИОННО)         C005_2
                       CASE WHEN KOD_MK = '008' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C008_1,  -- РОДИЙ (ПО ПАСПОРТУ)            C008_1
                       CASE WHEN KOD_MK = '008' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C008_2,  -- РОДИЙ (КОМИССИОННО)            C008_2
                       CASE WHEN KOD_MK = '009' AND PASP_KOM = '1' THEN WEIGHT ELSE 0 END  AS C009_1,  -- РУТЕНИЙ (ПО ПАСПОРТУ)          C009_1
                       CASE WHEN KOD_MK = '009' AND PASP_KOM = '2' THEN WEIGHT ELSE 0 END  AS C009_2   -- РУТЕНИЙ (КОМИССИОННО)          C009_2

                  FROM ( SELECT LT.BUKRS, LT.ANLN1, LT.ANLN2, DP.KOD_MK, DP.PASP_KOM,
                                SUM( CASE WHEN DH.ACQ_RET = 1 THEN DP.WEIGHT ELSE - DP.WEIGHT END ) AS WEIGHT
                           FROM ZFI_DRAG_MOVEH AS DH
                             JOIN ZFI_DRAG_MOVEI AS DP ON  DP.MANDT = DH.MANDT
                                                       AND DP.BUKRS = DH.BUKRS
                                                       AND DP.ANLN2 = DH.ANLN2
                                                       AND DP.ANLN1 = DH.ANLN1
                                                       AND DP.DATE_MOVE = DH.DATE_MOVE
                                                       AND DP.NMOVE = DH.NMOVE
                             JOIN :ET_DATA AS LT ON  LT.BUKRS = DH.BUKRS
                                                 AND LT.ANLN1 = DH.ANLN1
                                                 AND LT.ANLN2 = DH.ANLN2
                          WHERE DH.STBLG = ''
                            AND DH.MANDT = :LV_MANDT
                            AND DH.DATE_MOVE < :IV_DATE
                          GROUP BY DP.KOD_MK, DP.PASP_KOM, LT.BUKRS, LT.ANLN1, LT.ANLN2 )
               ) GROUP BY BUKRS, ANLN1, ANLN2 ;

    ET_DATA = SELECT ROW_NUMBER() OVER () AS NUM, BUKRS, ANLN1, ANLN2, ANLKL, INVNR, KONTS, MAKTX, MEINS, MSEHL, GJAHR, PLANTNR, DATE_SPIS,
                     ZOLOTO_P, ZOLOTO_K, SEREBRO_P, SEREBRO_K, PLATINA_P, PLATINA_K, MET_PLAT_P, MET_PLAT_K, ALMAZ_P, ALMAZ_K,
                     RUBIN_P, RUBIN_K, IZUMRUD_P, IZUMRUD_K, SAPFIR_P, SAPFIR_K, ZHEMCHUG_P, ZHEMCHUG_K, ALEXANDRIT_P, ALEXANDRIT_K
                FROM ( SELECT NUM, BUKRS, ANLN1, ANLN2, ANLKL, INVNR, KONTS, MAKTX, MEINS, MSEHL, GJAHR, PLANTNR, DATE_SPIS,
                              LT.ZOLOTO_P, LT.ZOLOTO_K, LT.SEREBRO_P, LT.SEREBRO_K, LT.PLATINA_P, LT.PLATINA_K, LT.MET_PLAT_P, LT.MET_PLAT_K, LT.ALMAZ_P, LT.ALMAZ_K,
                              LT.RUBIN_P, LT.RUBIN_K, LT.IZUMRUD_P, LT.IZUMRUD_K, LT.SAPFIR_P, LT.SAPFIR_K, LT.ZHEMCHUG_P, LT.ZHEMCHUG_K, LT.ALEXANDRIT_P, LT.ALEXANDRIT_K
                         FROM :ET_DATA AS DATA
                         LEFT JOIN :LT_DMDK AS LT ON  LT.BUKRS_DM = DATA.BUKRS
                                               AND LT.ANLN1_DM = DATA.ANLN1
                                               AND LT.ANLN2_DM = DATA.ANLN2
                                              -- AND NOT ( LT.ZOLOTO_P  = 0 AND LT.ZOLOTO_K  = 0 AND LT.SEREBRO_P  = 0 AND LT.SEREBRO_K  = 0
                                              --       AND LT.PLATINA_P = 0 AND LT.PLATINA_K = 0 AND LT.MET_PLAT_P = 0 AND LT.MET_PLAT_K = 0
                                              --       AND LT.ALMAZ_P   = 0 AND LT.ALMAZ_K   = 0 AND LT.RUBIN_P    = 0 AND LT.RUBIN_K    = 0
                                              --       AND LT.IZUMRUD_P = 0 AND LT.IZUMRUD_K = 0 AND LT.SAPFIR_P   = 0 AND LT.SAPFIR_K   = 0
                                              --       AND LT.ZHEMCHUG_P = 0 AND LT.ZHEMCHUG_K = 0 AND LT.ALEXANDRIT_P = 0 AND LT.ALEXANDRIT_K = 0 ) )
                                                     );

   ET_SUM = SELECT SUM( ZOLOTO_P )   AS SUM_ZOLOTO_P,   SUM( ZOLOTO_K )   AS SUM_ZOLOTO_K,   SUM( SEREBRO_P )    AS SUM_SEREBRO_P,    SUM( SEREBRO_K )    AS SUM_SEREBRO_K,
                   SUM( PLATINA_P )  AS SUM_PLATINA_P,  SUM( PLATINA_K )  AS SUM_PLATINA_K,  SUM( MET_PLAT_P )   AS SUM_MET_PLAT_P,   SUM( MET_PLAT_K )   AS SUM_MET_PLAT_K,
                   SUM( ALMAZ_P )    AS SUM_ALMAZ_P,    SUM( ALMAZ_K )    AS SUM_ALMAZ_K,    SUM( RUBIN_P )      AS SUM_RUBIN_P,      SUM( RUBIN_K )      AS SUM_RUBIN_K,
                   SUM( IZUMRUD_P )  AS SUM_IZUMRUD_P,  SUM( IZUMRUD_K )  AS SUM_IZUMRUD_K,  SUM( SAPFIR_P )     AS SUM_SAPFIR_P,     SUM( SAPFIR_K )     AS SUM_SAPFIR_K,
                   SUM( ZHEMCHUG_P ) AS SUM_ZHEMCHUG_P, SUM( ZHEMCHUG_K ) AS SUM_ZHEMCHUG_K, SUM( ALEXANDRIT_P ) AS SUM_ALEXANDRIT_P, SUM( ALEXANDRIT_K ) AS SUM_ALEXANDRIT_K
              FROM ( SELECT ZOLOTO_P, ZOLOTO_K, SEREBRO_P, SEREBRO_K, PLATINA_P, PLATINA_K, MET_PLAT_P, MET_PLAT_K, ALMAZ_P, ALMAZ_K,
                            RUBIN_P, RUBIN_K, IZUMRUD_P, IZUMRUD_K, SAPFIR_P, SAPFIR_K, ZHEMCHUG_P, ZHEMCHUG_K, ALEXANDRIT_P, ALEXANDRIT_K
                       FROM :ET_DATA );
  ENDMETHOD.
ENDCLASS.