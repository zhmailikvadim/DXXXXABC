*********************************************************************
* ОПИСАНИЕ : СПИСОК ОБЪЕКТОВ ПО ИСТОЧНИКАМ ФИНАНСИРОВАНИЯ НМА
* КОД ТС : АСУБН.САП-КСУП.DEV.030-БНУ.01.O-233
* РАЗРАБОТЧИК : ВОРОЖУН Ю.С.
* ПОСТАНОВКА ЗАДАЧИ : ГАНЖА Т.И.
*********************************************************************
CLASS ZCL_FI_OS_IF DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB.

  TYPES:
     BEGIN OF GTY_S_DATA,
         BUKRS            TYPE BUKRS,
         NAME_BUKRS       TYPE CHAR210,
         ANLKL            TYPE ANLA-ANLKL,
         TXK50            TYPE ANKT-TXK50,             "НАИМЕНОВАНИЕ КЛАССА ОС
         AMORTGR          TYPE J_3RFAMORTGR,
         DESCRIPT         TYPE J_3RFAMORTGRDESC,       "НАИМЕНОВАНИЕ ГРУППЫ
         KTANSW           TYPE T095-KTANSW,            "СЧЕТ, СУБСЧЕТ
         NAME_KTANSW      TYPE TXT50_SKAT,
         ANLN1            TYPE ANLA-ANLN1,             "СИСТЕМНЫЙ НОМЕР
         INVNR            TYPE ANLA-INVNR,             "ИНВЕНТАРНЫЙ НОМЕР
         TXT              TYPE CHAR260,                "НАИМЕНОВАНИЕ ОБЪЕКТА
         ZUGDT            TYPE ANLA-ZUGDT,             "ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
         ZZBUDATE         TYPE ANLU-ZZBUDATE,          "ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
         PERST            TYPE ACDOCA-HSL,             "ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
         AMORT_ENDDA      TYPE ACDOCA-HSL,             "СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
         OSTST            TYPE ACDOCA-HSL,             "ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
         AMORT_PER        TYPE ACDOCA-HSL,             "АМОРТИЗАЦИЯ ЗА МЕСЯЦ

         ISTFIN_SS_RASPR  TYPE ZAA_E_PRCNT,            "ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
         ISTFIN_SS_AMORT  TYPE ACDOCA-HSL,             "ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
         ISTFIN_IF_RASPR  TYPE ZAA_E_PRCNT,            "ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: % РАСПРЕДЕЛЕНИЯ
         ISTFIN_IF_AMORT  TYPE ACDOCA-HSL,             "ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: АМОРТИЗАЦИЯ ЗА ПЕРИОД
         ISTFIN_PS_RASPR  TYPE ZAA_E_PRCNT,            "ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
         ISTFIN_PS_AMORT  TYPE ACDOCA-HSL,             "ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
         WAERS            TYPE T001-WAERS,
         BUKRS_2          TYPE BUKRS,
         NAME_BUKRS_2     TYPE CHAR255,
         ANLN2            TYPE ANLA-ANLN2,             "СУБНОМЕР
         KTNAFG           TYPE T095B-KTNAFG,           "СЧЕТ ЗАТРАТ
         KOSTL            TYPE KOSTL,                  "МВЗ
         KTEXT            TYPE KTEXT,
         CAUFN            TYPE CAUFN,                  "ВНУТРЕННИЙ ЗАКАЗ
         CAUFNK           TYPE AUFTEXT,
         PS_PSP_PNR2      TYPE CHAR50,                 "СПП-ЭЛЕМЕНТ
         POST1            TYPE POST1,
         POS              TYPE I,
     END OF GTY_S_DATA,
     GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA WITH EMPTY KEY,

     BEGIN OF GTY_S_BUKRS,
        BUKRS TYPE BUKRS,
      END OF GTY_S_BUKRS,
      GTY_T_BUKRS TYPE STANDARD TABLE OF GTY_S_BUKRS WITH EMPTY KEY.

     CLASS-METHODS:
      GET_DATA IMPORTING VALUE(IV_GJAHR) TYPE GJAHR
                         VALUE(IV_MONAT) TYPE MONAT
                         VALUE(IV_FLT)   TYPE STRING        "ФИЛЬТР ПО ПРОЧИМ ПОЛЯМ
               EXPORTING VALUE(ET_DATA)  TYPE GTY_T_DATA
                         VALUE(ET_BUKRS) TYPE GTY_T_BUKRS
                 RAISING CX_AMDP_ERROR.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_OS_IF IMPLEMENTATION.


METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                USING ANLA ANLZ T095 ANLU FAAV_ANLP AUFK CSKS CSKT ANKT SKAT ZAFULL T095B T001
                      TKA02 PRPS COBRB ZFKBER_HKONT GLOFAAASSETDATA J_3RFDEPRGROUPT BUT000
                      FAAT_PLAN_VALUES ZAA_UTILS_HDB=>GET_ASSET_VALUES.

    DECLARE LV_MANDT    CHAR( 3) := SESSION_CONTEXT( 'CLIENT' );
    DECLARE LV_SPRAS    CHAR( 1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE I INT;
    DECLARE LV_PARTNER2 CHAR(10);
    DECLARE LV_SDATE    CHAR(8) := IV_GJAHR || :IV_MONAT || '01';                                    -- ДАТА НАЧАЛО ОТЧЕТА
    DECLARE LV_EDATE    CHAR(8) := TO_DATS(ADD_DAYS(LAST_DAY( :IV_GJAHR || :IV_MONAT || '01' ),1) ); -- ДАТА ОКОНЧАНИЯ ОТЧЕТА

    --ОС
    LT_DATA =
     SELECT ANLA.BUKRS,
            BUT000.NAME_ORG1 || BUT000.NAME_ORG2 || BUT000.NAME_ORG3 || BUT000.NAME_ORG4 AS NAME_BUKRS,
            ANLA.ANLKL        AS ANLKL,
            ANKT.TXK50        AS TXK50,
            GLO.GLO_RUS_DEPGR AS AMORTGR,
            J_3GR.DESCRIPT    AS DESCRIPT,
            T095.KTANSW,                                           --СЧЕТ, СУБСЧЕТ
            SKAT.TXT50        AS NAME_KTANSW,
            ANLA.ANLN1,                                            --СИСТЕМНЫЙ НОМЕР
            ANLA.INVNR,                                            --ИНВЕНТАРНЫЙ НОМЕР
            ZAF.TXTF1 || CHAR(32) || ZAF.TXTF2 AS TXT,             --НАИМЕНОВАНИЕ ОБЪЕКТА
            ANLA.ZUGDT,                                            --ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
            AU.ZZBUDATE,                                           --ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
            VALS.KANSW                      AS PERST,              --ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
            VALS.NETVL - VALS.KANSW         AS AMORT_ENDDA,        --СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
            VALS.NETVL                      AS OSTST,              --ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
            CASE WHEN ANLP.AMORT_PER IS NOT NULL THEN ANLP.AMORT_PER
                 --ELSE PLAN_VALUES.HSL                            --ПЛАНОВУЮ НЕ УЧИТЫВАЕМ
                 END AS AMORT_PER,                                 --АМОРТИЗАЦИЯ ЗА МЕСЯЦ
            '0' AS ISTFIN_SS_AMORT,
            '0' AS ISTFIN_IF_RASPR,
            '0' AS ISTFIN_SS_RASPR,
            '0' AS ISTFIN_PS_RASPR,
            ( SELECT SUM ( NAFAZ + SAFAZ + AAFAZ )
                FROM FAAV_ANLP
                WHERE MANDT = :LV_MANDT
                  AND BUKRS = ANLA.BUKRS
                  AND ANLN1 = ANLA.ANLN1
                  AND ANLN2 = ANLA.ANLN2
                  AND AFABER = '26'
                  AND GJAHR  = :IV_GJAHR
                  AND RIGHT(PERAF,2) = :IV_MONAT )
             AS ISTFIN_IF_AMORT,                 --ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            ( SELECT SUM ( NAFAZ + SAFAZ + AAFAZ )
                FROM FAAV_ANLP
                WHERE MANDT = :LV_MANDT
                  AND BUKRS = ANLA.BUKRS
                  AND ANLN1 = ANLA.ANLN1
                  AND ANLN2 = ANLA.ANLN2
                  AND AFABER = '27'
                  AND GJAHR  = :IV_GJAHR
                  AND RIGHT(PERAF,2) = :IV_MONAT )
            AS ISTFIN_PS_AMORT,                  --ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            CASE WHEN AZ.KOSTL IS NOT NULL
                 THEN SUBSTRING( AZ.KOSTL, 3, 2 ) ELSE '' END AS BUKRS_2,
            CASE WHEN AZ.KOSTL IS NOT NULL
                 THEN BUT.NAME_ORG1 || BUT.NAME_ORG2 || BUT.NAME_ORG3 || BUT.NAME_ORG4
                 ELSE '' END AS NAME_BUKRS_2,
            T001.WAERS,
            ANLA.ANLN2,                                   --СУБНОМЕР
            T095B.KTNAFG,                                 --СЧЕТ ЗАТРАТ
            AZ.KOSTL       AS KOSTL,                      --МВЗ
            CSKT.KTEXT     AS KTEXT,
            AZ.CAUFN       AS CAUFN,
            AUFK.KTEXT     AS CAUFNK,                     --ВНУТРЕННИЙ ЗАКАЗ
            AZ.PS_PSP_PNR2 AS PS_PSP_PNR2,
            PRPS.POST1     AS POST1,
            CASE WHEN AUFK.AUART = 'AMOS' THEN AUFK.OBJNR END AS OBJNR,
            '1' AS POS,
            -- В ОТЧЕТ ПОПАДАЮТ ОС ВЫБЫВШИЕ В ТЕКУЩЕМ МЕСЯЦЕ, У КОТОРЫХ ЕСТЬ АМОРТИЗАЦИЯ
            CASE WHEN ( LEFT(ANLA.DEAKT,6) = LEFT( :LV_SDATE, 6 ) AND ANLP.AMORT_PER IS NULL ) THEN 'X' ELSE '1' END DEAKT
            FROM ANLA AS ANLA
              INNER JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                                     AND T001.BUKRS = ANLA.BUKRS
              LEFT JOIN BUT000 AS BUT000 ON BUT000.CLIENT = :LV_MANDT
                                        AND BUT000.PARTNER = LPAD( T001.BUKRS,10,'0' )
              INNER JOIN ANLZ AS AZ ON AZ.MANDT = ANLA.MANDT
                                   AND AZ.BUKRS = ANLA.BUKRS
                                   AND AZ.ANLN1 = ANLA.ANLN1
                                   AND AZ.ANLN2 = ANLA.ANLN2
                                   AND AZ.BDATU >= :LV_EDATE
                                   AND AZ.ADATU <= :LV_EDATE
              LEFT JOIN BUT000 AS BUT ON BUT.CLIENT = :LV_MANDT
                                     AND BUT.PARTNER = LPAD( SUBSTRING( AZ.KOSTL, 3, 2 ),10,'0' )
              INNER JOIN T095 AS T095  ON T095.MANDT  = ANLA.MANDT
                                      AND T095.KTOPL  = T001.KTOPL
                                      AND T095.KTOGR  = ANLA.KTOGR
                                      AND T095.AFABE  = '01'
              INNER JOIN T095B AS T095B ON T095B.MANDT  = ANLA.MANDT
                                       AND T095B.KTOGR  = ANLA.KTOGR
                                       AND T095B.KTOPL  = T001.KTOPL
                                       AND T095B.AFABE  = '01'

              INNER JOIN TKA02 AS TKA02 ON TKA02.BUKRS = ANLA.BUKRS                    --ПРИСВОЕНИЕ КЕ
                                       AND TKA02.MANDT = ANLA.MANDT

              LEFT JOIN ANLU AS AU ON AU.MANDT = ANLA.MANDT
                                  AND AU.BUKRS = ANLA.BUKRS
                                  AND AU.ANLN1 = ANLA.ANLN1
                                  AND AU.ANLN2 = ANLA.ANLN2
              LEFT JOIN ZAFULL AS ZAF ON ZAF.MANDT = ANLA.MANDT
                                     AND ZAF.BUKRS = ANLA.BUKRS
                                     AND ZAF.ANLN1 = ANLA.ANLN1
                                     AND ZAF.ANLN2 = ANLA.ANLN2

              LEFT JOIN GLOFAAASSETDATA AS GLO ON GLO.MANDT = ANLA.MANDT
                                       AND GLO.BUKRS = ANLA.BUKRS
                                       AND GLO.ANLN1 = ANLA.ANLN1
                                       AND GLO.ANLN2 = ANLA.ANLN2
              LEFT JOIN J_3RFDEPRGROUPT AS J_3GR  ON J_3GR.MANDT   = ANLA.MANDT               --НАИМЕНОВАНИЕ ГРУППЫ
                                                 AND J_3GR.SPRSL   = :LV_SPRAS
                                                 AND J_3GR.AMORTGR = GLO.GLO_RUS_DEPGR
              LEFT JOIN ANKT AS ANKT  ON ANKT.MANDT = ANLA.MANDT                              --НАИМЕНОВАНИЕ КЛАССА ОС
                                     AND ANKT.SPRAS = :LV_SPRAS
                                     AND ANKT.ANLKL = ANLA.ANLKL
              LEFT JOIN SKAT AS SKAT  ON SKAT.MANDT = ANLA.MANDT                              --НАИМЕНОВАНИЕ СЧЕТА
                                     AND SKAT.SPRAS = :LV_SPRAS
                                     AND SKAT.KTOPL = T001.KTOPL
                                     AND SKAT.SAKNR = T095.KTANSW

              LEFT OUTER JOIN  "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( :LV_MANDT, :LV_EDATE, '' ) AS VALS ON VALS.BUKRS = ANLA.BUKRS
                                                                                                    AND VALS.ANLN1 = ANLA.ANLN1
                                                                                                    AND VALS.ANLN2 = ANLA.ANLN2
                                                                                                    AND VALS.AFABE = '01'
              LEFT OUTER JOIN ( SELECT BUKRS, ANLN1, ANLN2,
                                       SUM( NAFAZ + SAFAZ + AAFAZ + AUFNZ) AS AMORT_PER -- ТИПОВАЯ + ОСНОВНАЯ + ВНЕПЛАНОВАЯ + КОРРЕКТИР АМОРТ. = ФАКТИЧЕСКАЯ
                                  FROM FAAV_ANLP AS ANLP
                                 WHERE MANDT = :LV_MANDT
                                   AND AFABER = '01'
                                   AND GJAHR = :IV_GJAHR
                                   AND RIGHT(PERAF,2) = :IV_MONAT GROUP BY BUKRS,ANLN1, ANLN2 )
                       AS ANLP ON ANLP.BUKRS = ANLA.BUKRS
                              AND ANLP.ANLN1 = ANLA.ANLN1
                              AND ANLP.ANLN2 = ANLA.ANLN2

              LEFT OUTER JOIN ( SELECT BUKRS, ANLN1, ANLN2, HSL
                                  FROM FAAT_PLAN_VALUES AS PLAN_VALUES
                                  WHERE MANDT = :LV_MANDT
                                    AND AFABE = '01'
                                    AND GJAHR = LEFT(:LV_EDATE,4)
                                    AND RIGHT(POPER,2) = :IV_MONAT )
                       AS PLAN_VALUES ON PLAN_VALUES.BUKRS = ANLA.BUKRS
                                     AND PLAN_VALUES.ANLN1 = ANLA.ANLN1
                                     AND PLAN_VALUES.ANLN2 = ANLA.ANLN2

             LEFT OUTER JOIN PRPS AS PRPS  ON PRPS.MANDT = AZ.MANDT   -- СПП
                                          AND PRPS.PSPNR = AZ.PS_PSP_PNR2

             LEFT OUTER JOIN  CSKS AS CSKS ON CSKS.MANDT = ANLA.MANDT
                                          AND CSKS.KOKRS = TKA02.KOKRS
                                          AND CSKS.KOSTL = AZ.KOSTL
                                          AND CSKS.DATBI >= :LV_SDATE
                                          AND CSKS.DATAB <= :LV_SDATE
             LEFT OUTER JOIN T001 AS C_T001 ON C_T001.MANDT = ANLA.MANDT
                                            AND C_T001.BUKRS = CSKS.BUKRS
             LEFT OUTER JOIN AUFK AS AUFK ON AUFK.MANDT = AZ.MANDT
                                          AND AUFK.AUFNR = AZ.CAUFN    -- ЗАКАЗЫ
             LEFT OUTER JOIN CSKT AS CSKT ON CSKT.MANDT = ANLA.MANDT   -- АКТУАЛЬНОЕ НАЗВАНИЕ МВЗ
                                         AND CSKT.SPRAS = :LV_SPRAS
                                         AND CSKT.KOKRS = TKA02.KOKRS
                                         AND CSKT.KOSTL = AZ.KOSTL
                                         AND CSKT.DATBI = ( SELECT MIN( DATBI ) FROM CSKT AS T
                                                             WHERE T.SPRAS = :LV_SPRAS
                                                               AND T.MANDT = ANLA.MANDT
                                                               AND T.KOKRS = TKA02.KOKRS
                                                               AND T.KOSTL = AZ.KOSTL
                                                               AND T.DATBI >= :LV_SDATE )
           WHERE ANLA.MANDT = :LV_MANDT
              AND ( ANLA.DEAKT >= :LV_SDATE OR ANLA.DEAKT < '19000101' )
              AND ANLA.ZUGDT > '19000101'
              AND ANLA.ZUGDT <= :LV_EDATE;

    LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

    IF IS_EMPTY ( :LT_DATA ) THEN RETURN;
    END IF;

    -- В ОТЧЕТ ПОПАДАЮТ ОС ВЫБЫВШИЕ В ТЕКУЩЕМ МЕСЯЦЕ, У КОТОРЫХ ЕСТЬ АМОРТИЗАЦИЯ
    LT_DATA =
      SELECT * FROM :LT_DATA AS LT
       WHERE LT.DEAKT <> 'X';

    -- ВЫБОРКА ЗАТРАТНОГО СЧЕТА ОРГАНИЗАЦИИ И СУММ ИЗ ПРАВИЛ РАСПРЕДЕЛЕНИЯ
    LT_COBR =
    SELECT BUKRS,
           NAME_BUKRS,
           ANLKL,
           TXK50,
           AMORTGR,
           DESCRIPT,
           KTANSW,
           NAME_KTANSW,                     --СЧЕТ, СУБСЧЕТ
           ANLN1,                           --СИСТЕМНЫЙ НОМЕР
           ANLN2,
           INVNR,                           --ИНВЕНТАРНЫЙ НОМЕР
           TXT,                             --НАИМЕНОВАНИЕ ОБЪЕКТА

           ZUGDT,                           --ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
           ZZBUDATE,                        --ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
           PERST,                           --ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
           AMORT_ENDDA,                     --СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
           OSTST,                           --ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
           AMORT_PER,

           HK_ZATR,
           BUKRS_2,
           BUTXT_2,
           CASE WHEN ( LEAD(OBJNR) OVER( PARTITION BY ANLN1, ANLN2, OBJNR ORDER BY ANLN1, OBJNR) )           IS NULL
                THEN AMORT_PER_Z + AMORT_PER - SUM( AMORT_PER_Z ) OVER ( PARTITION BY ANLN1, ANLN2, OBJNR )
                ELSE AMORT_PER_Z
           END AS AMORT_PER_Z,
           CASE WHEN ( LEAD(OBJNR) OVER( PARTITION BY ANLN1, ANLN2, OBJNR ORDER BY ANLN1, OBJNR) )           IS NULL
                THEN ISTFIN_IF_AMORT_Z + ISTFIN_IF_AMORT - SUM( ISTFIN_IF_AMORT_Z ) OVER ( PARTITION BY ANLN1, ANLN2, OBJNR )
                ELSE ISTFIN_IF_AMORT_Z
           END AS ISTFIN_IF_AMORT_Z,
           CASE WHEN ( LEAD(OBJNR) OVER( PARTITION BY ANLN1, ANLN2, OBJNR ORDER BY ANLN1, OBJNR) )           IS NULL
                THEN ISTFIN_PS_AMORT_Z + ISTFIN_PS_AMORT - SUM( ISTFIN_PS_AMORT_Z ) OVER ( PARTITION BY ANLN1, ANLN2, OBJNR )
                ELSE ISTFIN_PS_AMORT_Z
           END AS ISTFIN_PS_AMORT_Z,

           KTNAFG,                          --СЧЕТ ЗАТРАТ
           KOSTL,                           --МВЗ
           KTEXT,
           CAUFN,                           --ВНУТРЕННИЙ ЗАКАЗ
           CAUFNK,
           PS_PSP_PNR2,
           POST1,
           WAERS
      FROM (
        SELECT LT.BUKRS,
               NAME_BUKRS,
               ANLKL,
               TXK50,
               AMORTGR,
               DESCRIPT,
               KTANSW,                          --СЧЕТ, СУБСЧЕТ
               NAME_KTANSW,
               LT.ANLN1,                        --СИСТЕМНЫЙ НОМЕР
               LT.ANLN2,
               INVNR,                           --ИНВЕНТАРНЫЙ НОМЕР
               TXT,                             --НАИМЕНОВАНИЕ ОБЪЕКТА
               ZUGDT,                           --ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
               ZZBUDATE,                        --ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
               PERST,                           --ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
               AMORT_ENDDA,                     --СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
               OSTST,                           --ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
               AMORT_PER,                       --АМОРТИЗАЦИЯ ЗА МЕСЯЦ

               COBRB.OBJNR,
               BETRR,
               ISTFIN_IF_AMORT,
               ISTFIN_PS_AMORT,

               CASE WHEN COBRB.HKONT <> '' THEN COBRB.HKONT
                    WHEN COALESCE(CSKS.MANDT,AUFK.MANDT,'') = :LV_MANDT AND COALESCE(CSKS.BUKRS,AUFK.BUKRS) = LT.BUKRS  THEN ZH.HKONT
                    WHEN COALESCE(CSKS.MANDT,AUFK.MANDT,'') = :LV_MANDT AND COALESCE(CSKS.BUKRS,AUFK.BUKRS) <> LT.BUKRS THEN '78000000' || CSKS.BUKRS
               END AS HK_ZATR,
               CASE WHEN COBRB.KONTY = 'SK' THEN LT.BUKRS
                                            ELSE COALESCE(CSKS.BUKRS,AUFK.BUKRS) END AS BUKRS_2,
               '' AS BUTXT_2,

               CASE WHEN PROZS <> 0 THEN ROUND(LT.AMORT_PER * PROZS ) / 100                    -- СУММА АМОРТИЗАЦИИ ЗА ПЕРИОД LT.AM_PER
                    WHEN AQZIF <> 0 THEN ROUND(LT.AMORT_PER * AQZIF / SUM( AQZIF )             -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
                    WHEN BETRR <> 0 THEN ROUND(LT.AMORT_PER * BETRR / SUM( BETRR )             -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
               END AS AMORT_PER_Z,

               CASE WHEN PROZS <> 0 THEN ROUND(LT.ISTFIN_IF_AMORT * PROZS ) / 100              -- СУММА АМОРТИЗАЦИИ ЗА ПЕРИОД LT.AM_PER
                    WHEN AQZIF <> 0 THEN ROUND(LT.ISTFIN_IF_AMORT * AQZIF / SUM( AQZIF )       -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
                    WHEN BETRR <> 0 THEN ROUND(LT.ISTFIN_IF_AMORT * BETRR / SUM( BETRR )       -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
               END AS ISTFIN_IF_AMORT_Z,

               CASE WHEN PROZS <> 0 THEN ROUND(LT.ISTFIN_PS_AMORT * PROZS ) / 100              -- СУММА АМОРТИЗАЦИИ ЗА ПЕРИОД LT.AM_PER
                    WHEN AQZIF <> 0 THEN ROUND(LT.ISTFIN_PS_AMORT * AQZIF / SUM( AQZIF )       -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
                    WHEN BETRR <> 0 THEN ROUND(LT.ISTFIN_PS_AMORT * BETRR / SUM( BETRR )       -- РАЗБИВАЕТСЯ ИЛИ ПО ПРОЦЕНТНО ИЛИ ПО ВЕСОВЫМ КОЭФФИЦИЕНТАМ
                      OVER ( PARTITION BY LT.ANLN1, LT.ANLN2,COBRB.OBJNR ) * 100 ) / 100
               END AS ISTFIN_PS_AMORT_Z,
               LT.KTNAFG,                          --СЧЕТ ЗАТРАТ
               LT.KOSTL,                           --МВЗ
               LT.KTEXT,
               LT.CAUFN,                           --ВНУТРЕННИЙ ЗАКАЗ
               LT.CAUFNK,
               LT.PS_PSP_PNR2,
               LT.POST1,
               LT.WAERS
           FROM :LT_DATA AS LT
             INNER JOIN COBRB AS COBRB ON COBRB.MANDT = :LV_MANDT
                                      AND COBRB.OBJNR = LT.OBJNR
                                      AND COBRB.PERBZ = 'PER'
                                      AND ( COBRB.GABJA || RIGHT( COBRB.GABPE,2) <= LEFT( :LV_SDATE,6 )
                                      AND ( COBRB.GBISJ || RIGHT( COBRB.GBISP,2) >= LEFT( :LV_SDATE,6 ) OR COBRB.GBISJ = 0 ) )
             LEFT OUTER JOIN AUFK AS AUFK ON AUFK.MANDT = COBRB.MANDT
                                         AND AUFK.AUFNR = COBRB.AUFNR
             LEFT OUTER JOIN CSKS AS CSKS ON CSKS.MANDT = COBRB.MANDT
                                         AND CSKS.KOSTL = COBRB.KOSTL
                                         AND CSKS.DATBI >= :LV_SDATE
                                         AND CSKS.DATAB <= :LV_SDATE
             LEFT OUTER JOIN ZFKBER_HKONT AS ZH ON ZH.MANDT = :LV_MANDT
                                               AND ZH.FKBER = COALESCE(CSKS.FUNC_AREA, AUFK.FUNC_AREA)
             -- ЕСЛИ АМОРТИЗАЦИИ ЗА ПЕРИОД НЕТ, ТО И РАСПРЕДЕЛЕНИЯ НЕ ИЩЕМ
             WHERE LT.AMORT_PER <> 0
         ) ;

 LT_CL_COBR =
    SELECT DISTINCT LT_COBR.BUKRS, LT_COBR.ANLN1,LT_COBR.ANLN2,
           COUNT(1) OVER ( PARTITION BY LT_COBR.BUKRS,LT_COBR.ANLN1,LT_COBR.ANLN2 ) AS COUNTS,
           CASE WHEN COUNT(1) OVER ( PARTITION BY LT_COBR.BUKRS,LT_COBR.ANLN1,LT_COBR.ANLN2 ) = 1 THEN LT_COBR.BUKRS_2 END AS BUKRS_2,
           CASE WHEN COUNT(1) OVER ( PARTITION BY LT_COBR.BUKRS,LT_COBR.ANLN1,LT_COBR.ANLN2 ) = 1
             THEN BUT000.NAME_ORG1 || BUT000.NAME_ORG2 || BUT000.NAME_ORG3 || BUT000.NAME_ORG4 END AS NAME_BUKRS_2,
           '0' AS RASP_ANLN
       FROM :LT_COBR AS LT_COBR
         LEFT JOIN BUT000 AS BUT000 ON BUT000.CLIENT  = :LV_MANDT
                                   AND BUT000.PARTNER = LPAD( LT_COBR.BUKRS_2,10,'0' )
         ;

  LT_CL_COBR =
    SELECT LT.BUKRS, LT.ANLN1, LT.ANLN2, LT_COBR.COUNTS, LT_COBR.BUKRS_2, LT_COBR.NAME_BUKRS_2,
           LT_COBR.ANLN1 AS RASP_ANLN
       FROM :LT_DATA AS LT
         LEFT JOIN :LT_CL_COBR AS LT_COBR ON LT_COBR.BUKRS = LT.BUKRS
                                         AND LT_COBR.ANLN1 = LT.ANLN1
                                         AND LT_COBR.ANLN2 = LT.ANLN2
         ;

    -- ФОРМИРОВАНИЕ ВЫХОДНОЙ ТАБЛИЦЫ
    ET_DATA =
     SELECT LT_DATA.BUKRS,
            NAME_BUKRS AS NAME_BUKRS,
            ANLKL,
            TXK50,
            AMORTGR,
            DESCRIPT,
            KTANSW,                          --СЧЕТ, СУБСЧЕТ
            NAME_KTANSW,
            LT_DATA.ANLN1,                   --СИСТЕМНЫЙ НОМЕР
            INVNR,                           --ИНВЕНТАРНЫЙ НОМЕР
            TXT,                             --НАИМЕНОВАНИЕ ОБЪЕКТА
            ZUGDT,                           --ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
            ZZBUDATE,                        --ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
            PERST,                           --ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
            AMORT_ENDDA,                     --СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
            OSTST,                           --ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
            AMORT_PER,                       --АМОРТИЗАЦИЯ ЗА МЕСЯЦ
            CASE WHEN AMORT_PER <> '0' THEN
                      100 - ROUND(( COALESCE(ISTFIN_IF_AMORT,0) / AMORT_PER ) * 100, 2) - ROUND(( COALESCE(ISTFIN_PS_AMORT,0) / AMORT_PER ) * 100,2)
                      ELSE '0' END AS ISTFIN_SS_RASPR,                           --ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
            AMORT_PER - COALESCE(ISTFIN_IF_AMORT,0) - COALESCE(ISTFIN_PS_AMORT,0) AS ISTFIN_SS_AMORT, --ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            CASE WHEN AMORT_PER <> '0' THEN
                      ROUND(( ISTFIN_IF_AMORT / AMORT_PER ) * 100,2)
                      ELSE '0' END AS ISTFIN_IF_RASPR,                           --ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: % РАСПРЕДЕЛЕНИЯ
            ISTFIN_IF_AMORT,                                                     --ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            CASE WHEN AMORT_PER <> '0' THEN
                      ROUND(( ISTFIN_PS_AMORT / AMORT_PER ) * 100,2)
                      ELSE '0' END AS ISTFIN_PS_RASPR,                           --ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
            ISTFIN_PS_AMORT,                                                     --ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            LT_DATA.WAERS,
            CASE WHEN CL.COUNTS = 1 THEN CL.BUKRS_2 ELSE LT_DATA.BUKRS_2 END AS BUKRS_2,
            CASE WHEN LT_DATA.AMORT_PER <> 0 AND CL.RASP_ANLN IS NULL THEN LT_DATA.NAME_BUKRS_2
                 WHEN CL.COUNTS = 1 THEN CL.NAME_BUKRS_2 ELSE '' END AS NAME_BUKRS_2,
            LT_DATA.ANLN2,                   --СУБНОМЕР
            KTNAFG,                          --СЧЕТ ЗАТРАТ
            KOSTL,                           --МВЗ
            KTEXT,
            CAUFN,                           --ВНУТРЕННИЙ ЗАКАЗ
            CAUFNK,
            PS_PSP_PNR2,
            POST1,
            ROW_NUMBER ( ) OVER ( ) AS POS
       FROM :LT_DATA AS LT_DATA
         LEFT JOIN :LT_CL_COBR AS CL ON CL.BUKRS = LT_DATA.BUKRS
                                    AND CL.ANLN1 = LT_DATA.ANLN1
                                    AND CL.ANLN2 = LT_DATA.ANLN2
                                    AND CL.COUNTS = 1
  UNION ALL
     SELECT LT_COBR.BUKRS,
            NAME_BUKRS AS NAME_BUKRS,
            ANLKL,
            TXK50,
            AMORTGR,
            DESCRIPT,
            KTANSW,                                 --СЧЕТ, СУБСЧЕТ
            NAME_KTANSW,
            LT_COBR.ANLN1,                          --СИСТЕМНЫЙ НОМЕР
            INVNR,                                  --ИНВЕНТАРНЫЙ НОМЕР
            TXT,                                    --НАИМЕНОВАНИЕ ОБЪЕКТА
            '' AS ZUGDT,                            --ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
            '' AS ZZBUDATE,                         --ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
            '0' AS PERST,                           --ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
            '0' AS AMORT_ENDDA,                     --СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
            '0' AS OSTST,                           --ОСТАТОЧНАЯ СТОИМОСТЬ, РУБ.КОП.
            LT_COBR.AMORT_PER_Z AS AMORT_PER,       --АМОРТИЗАЦИЯ ЗА МЕСЯЦ
            CASE WHEN LT_COBR.AMORT_PER_Z <> '0' THEN
                      100 - ROUND(( LT_COBR.ISTFIN_IF_AMORT_Z / LT_COBR.AMORT_PER_Z ) * 100, 2) - ROUND(( LT_COBR.ISTFIN_PS_AMORT_Z / LT_COBR.AMORT_PER_Z ) * 100,2)
                      ELSE '0' END AS ISTFIN_SS_RASPR,                                 --ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
            LT_COBR.AMORT_PER_Z - LT_COBR.ISTFIN_IF_AMORT_Z - LT_COBR.ISTFIN_PS_AMORT_Z AS ISTFIN_SS_AMORT,    --ИСТОЧНИК ФИНАНСИРОВАНИЯ: СОБСТВЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            CASE WHEN LT_COBR.AMORT_PER_Z <> '0' THEN
                      ROUND(( LT_COBR.ISTFIN_IF_AMORT_Z / LT_COBR.AMORT_PER_Z ) * 100,2)
                      ELSE '0' END AS ISTFIN_IF_RASPR,                                 --ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: % РАСПРЕДЕЛЕНИЯ
            LT_COBR.ISTFIN_IF_AMORT_Z AS ISTFIN_IF_AMORT,                              --ИСТОЧНИК ФИНАНСИРОВАНИЯ ИННОВАЦИОННЫЙ ФОНД: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            CASE WHEN LT_COBR.AMORT_PER_Z <> '0' THEN
                      ROUND(( LT_COBR.ISTFIN_PS_AMORT_Z / LT_COBR.AMORT_PER_Z ) * 100,2)
                      ELSE '0' END AS ISTFIN_PS_RASPR,                                 --ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: % РАСПРЕДЕЛЕНИЯ
            LT_COBR.ISTFIN_PS_AMORT_Z AS ISTFIN_PS_AMORT,                              --ИСТОЧНИК ФИНАНСИРОВАНИЯ ПРИВЛЕЧЕННЫЕ СРЕДСТВА: АМОРТИЗАЦИЯ ЗА ПЕРИОД
            LT_COBR.WAERS,
            LT_COBR.BUKRS_2,
            CASE WHEN T001.BUTXT <> '' THEN BUT000.NAME_ORG1 || BUT000.NAME_ORG2 || BUT000.NAME_ORG3 || BUT000.NAME_ORG4
                 ELSE LT_COBR.BUKRS_2 END AS NAME_BUKRS_2,
            LT_COBR.ANLN2,                   --СУБНОМЕР
            LT_COBR.HK_ZATR   AS KTNAFG,     --СЧЕТ ЗАТРАТ
            KOSTL,                           --МВЗ
            KTEXT,
            CAUFN,                           --ВНУТРЕННИЙ ЗАКАЗ
            CAUFNK,
            PS_PSP_PNR2,
            POST1,
            '0' AS POS
        FROM :LT_COBR AS LT_COBR
              LEFT OUTER JOIN T001 AS T001 ON T001.MANDT = :LV_MANDT
                                          AND T001.BUKRS = LT_COBR.BUKRS_2
              LEFT JOIN BUT000 AS BUT000 ON BUT000.CLIENT  = :LV_MANDT
                                        AND BUT000.PARTNER = LPAD( T001.BUKRS,10,'0' )
              JOIN :LT_CL_COBR AS CL ON CL.BUKRS = LT_COBR.BUKRS
                                    AND CL.ANLN1 = LT_COBR.ANLN1
                                    AND CL.ANLN2 = LT_COBR.ANLN2
                                    AND CL.COUNTS > 1;

    ET_BUKRS = SELECT DISTINCT BUKRS
                 FROM :ET_DATA;

   ENDMETHOD.
ENDCLASS.