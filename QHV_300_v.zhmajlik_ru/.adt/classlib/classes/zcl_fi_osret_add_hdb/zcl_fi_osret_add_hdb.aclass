CLASS ZCL_FI_OSRET_ADD_HDB DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES IF_AMDP_MARKER_HDB.

    TYPES:
      BEGIN OF GTY_S_DATA,
        NUMPOS    TYPE INT2,             " №П/П
        ANLN1     TYPE ZAA_ANLN1,        " СИСТЕМНЫЙ НОМЕР
        GROUP_D   TYPE J_3RFAMORTGR,     " ГРУППА АМОРТИЗАЦИИ
        INVNR     TYPE INVNR_ANLA,       " ИНВЕНТАРНЫЙ НОМЕР
        TXT       TYPE ZAA_NAME_OB,      " НАИМЕНОВАНИЕ ОБЪЕКТА ZAA_ASSETNAME
        AKTIV     TYPE ZAA_AKTIV,        " ДАТА ВВОДА ОБЪЕКТА В ЭКСПЛУАТАЦИЮ
        ZZBUDATE  TYPE ANLU-ZZBUDATE,    " ДАТА ПРИНЯТИЯ К БУХ. УЧЕТУ В БЕ
        SHIFR     TYPE ZAA_OKOF,         " ШИФР НОРМЫ
        COSTRE_AC TYPE ZANLU-COSTRE_AC,  " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ
        "РАСЧЕТНЫЕ ПОЛЯ
        PRST01    TYPE ZAA_INVCARD_KANSW, " ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
        AM01      TYPE ZAA_SAVE_AMORT,   " НАКОПЛЕННАЯ СУММА АМОРТИЗАЦИИ
        DIFF01    TYPE ZAA_OST_ST,       " ОСТАТОЧНАЯ СТОИМОСТЬ (PRST_01 - AM_01)
        PRST30    TYPE ACDOCA-HSL,       " СУММА ДОБАВОЧНОГО КАПИТАЛА В ЧАСТИ ПЕРЕОЦЕНКИ ПЕРВОНАЧАЛЬНОЙ (ПЕРЕОЦЕНЕННОЙ) СТОИМОСТИ (СЧЕТ 83)
        AM30      TYPE ACDOCA-HSL,       " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ПО 30 ОБЛАСТИ НА ДАТУ ВЫБЫТИЯ.
        DIFF30    TYPE ACDOCA-HSL,       " РАЗНИЦА ОТ СУММЫ ПЕРЕОЦЕНКИ ПЕРВОНАЧАЛЬНОЙ (ПЕРЕОЦЕНЕННОЙ) СТОИМОСТИ И СУММЫ ПЕРЕОЦЕНКИ НАКОПЛЕННОЙ АМОРТИЗАЦИИ (PRST_30 - AM_30)
        PRST35    TYPE ACDOCA-HSL,       " СТОИМОСТЬ ОСНОВНОГО СРЕДСТВА (НМА) ПО ПРОЧИМ ДОХОДАМ И РАСХОДАМ (СЧЕТ 91)
        AM35      TYPE ACDOCA-HSL,       " НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ОСНОВНОГО СРЕДСТВА (НМА) ПО ПРОЧИМ ДОХОДАМ И РАСХОДАМ (СЧЕТ 91)
        DESCRIPT  TYPE J_3RFDEPRGROUPT-DESCRIPT,
        "ДОП ПОЛЯ
        BUKRS     TYPE BUKRS,            " БЕ
        ANLKL     TYPE STRING,           " КЛАСС, НАИМЕНОВАНИЕ
        ANLN2     TYPE ANLN2,            " СУБНОМЕР
        BUTXT     TYPE STRING,           " БЕ, НАИМЕНОВАНИЕ
        BUDAT     TYPE BKPF-BUDAT,
        BWASL     TYPE CHAR100,
        BWATXT    TYPE STRING,
        BELNR     TYPE BKPF-BELNR,

      END OF GTY_S_DATA,
      GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA WITH DEFAULT KEY.

    CLASS-METHODS:
      GET_DATA                             "ВЫБОРКА ДАННЫХ ДЛЯ ОТЧЕТА ZFI_AMORT_IZM
        IMPORTING
          VALUE(IV_GJAHR) TYPE BKPF-GJAHR
          VALUE(IV_MFROM) TYPE BKPF-MONAT
          VALUE(IV_MTO)   TYPE BKPF-MONAT
          VALUE(IV_FLT)   TYPE STRING
        EXPORTING
          VALUE(ET_DATA)  TYPE GTY_T_DATA.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_OSRET_ADD_HDB IMPLEMENTATION.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
                  USING ANLA ZAFULL GLOFAAASSETDATA ZANLU J_3RFDEPRGROUPT
                        ZAA_V0_MOVE TABWT ANLU T095 T001 ANKT.-- BKPF.

    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');

    -- ВЫБОРКА СТОИМОСТНЫХ ДАННЫХ
    LT_STOIM =
      SELECT DISTINCT
             ANLA.BUKRS,
             ANLA.ANLN1,
             ANLA.ANLN2,
             ANLA.AKTIV,
             BWASL,
             MOVS.BUDAT,
             ANLA.ANLKL,
             KTANSW,
             ANLA.INVNR,
             T001.BUKRS || CHAR(32) || T001.BUTXT                                  AS BUTXT,
             CASE WHEN MOVS.AFABE = '01' THEN MOVS.BELNR ELSE '' END               AS BELNR,
             MOVS.LNRAN,
             MOVS.LNSAN,
             CASE WHEN MOVS.AFABE = '01' THEN - MOVS.KANSW ELSE 0 END              AS PRST01,
             CASE WHEN MOVS.AFABE = '01' THEN - MOVS.KANSW + MOVS.NETVL ELSE 0 END AS AM01,
             CASE WHEN MOVS.AFABE = '01' THEN - MOVS.NETVL ELSE 0 END              AS DIFF01,
             CASE WHEN MOVS.AFABE = '30' THEN - MOVS.KANSW ELSE 0 END              AS PRST30,
             CASE WHEN MOVS.AFABE = '30' THEN - MOVS.KANSW + MOVS.NETVL ELSE 0 END AS AM30,
             CASE WHEN MOVS.AFABE = '30' THEN - MOVS.NETVL ELSE 0 END              AS DIFF30,
             CASE WHEN MOVS.AFABE = '35' THEN   MOVS.KANSW ELSE 0 END              AS PRST35,
             CASE WHEN MOVS.AFABE = '35' THEN   MOVS.KANSW - MOVS.NETVL ELSE 0 END AS AM35
        FROM ANLA AS ANLA
          INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                  AND T001.BUKRS = ANLA.BUKRS
          INNER JOIN T095 AS T095 ON  T095.MANDT = T001.MANDT
                                  AND T095.KTOPL = T001.KTOPL
                                  AND T095.AFABE = '01'
                                  AND T095.KTOGR = ANLA.KTOGR
          INNER JOIN ZAA_V0_MOVE AS MOVS ON  MOVS.MANDT = ANLA.MANDT
                                         AND MOVS.BUKRS = ANLA.BUKRS
                                         AND MOVS.ANLN1 = ANLA.ANLN1
                                         AND MOVS.ANLN2 = ANLA.ANLN2
                                         AND MOVS.GJAHR = :IV_GJAHR
                                         AND MOVS.MONAT <= :IV_MTO
                                         AND MOVS.MONAT >= :IV_MFROM
                                         AND MOVS.LNSAN = '00000'
                                         AND MOVS.AFABE IN ( '01','30','35')
       WHERE ANLA.MANDT = :LV_MANDT
         AND ANLA.DEAKT <> '00000000';

     LT_STOIM = APPLY_FILTER( :LT_STOIM, :IV_FLT );

     LT_DUB =
       SELECT LT.*
         FROM :LT_STOIM AS LT
        WHERE LT.PRST30 = 0
          AND LT.PRST35 = 0
          AND LT.AM30 = 0
          AND LT.AM35 = 0;

     IF NOT IS_EMPTY ( :LT_DUB ) THEN

     LT_STOIM =
       SELECT LT.*
         FROM :LT_STOIM AS LT
           LEFT JOIN :LT_DUB AS STORNO ON  STORNO.BUKRS = LT.BUKRS
                                       AND STORNO.ANLN1 = LT.ANLN1
                                       AND STORNO.ANLN2 = LT.ANLN2
                                       AND STORNO.LNRAN = LT.LNSAN
        WHERE STORNO.BUKRS IS NULL;
     END IF;

     IF IS_EMPTY ( :LT_STOIM ) THEN
       RETURN;
     END IF;

     LT_DATA =
       SELECT LT.BUKRS,
              LT.ANLN1,
              LT.ANLN2,
              LT.AKTIV,
              LT.BWASL,
              '' AS BWATXT,
              LT.BUDAT,
              LT.ANLKL,
              LT.KTANSW,
              LT.INVNR,
              LT.BUTXT,
              MAX(LT.BELNR)  AS BELNR,
              SUM(LT.PRST01) AS PRST01,
              SUM(LT.AM01)   AS AM01,
              SUM(LT.DIFF01) AS DIFF01,
              SUM(LT.PRST30) AS PRST30,
              SUM(LT.AM30)   AS AM30,
              SUM(LT.DIFF30) AS DIFF30,
              SUM(LT.PRST35) AS PRST35,
              SUM(LT.AM35)   AS AM35
        FROM :LT_STOIM AS LT
       GROUP BY LT.BUKRS, LT.ANLN1, LT.ANLN2, LT.AKTIV, LT.BWASL, LT.BUDAT, LT.ANLKL, LT.KTANSW, LT.INVNR, LT.BUTXT;

   LT_DATA =
     SELECT LT.BUKRS,
            LT.ANLN1,
            LT.ANLN2,
            LT.AKTIV,
            STRING_AGG( LT.BWASL, ',') AS BWASL,
            STRING_AGG(TABWT.BWATXT, '; ') AS BWATXT,
            LT.BUDAT,
            LT.ANLKL,
            LT.KTANSW,
            LT.INVNR,
            LT.BUTXT,
            LT.BELNR,
            SUM(LT.PRST01) AS PRST01,
            SUM(LT.AM01)   AS AM01,
            SUM(LT.DIFF01) AS DIFF01,
            SUM(LT.PRST30) AS PRST30,
            SUM(LT.AM30)   AS AM30,
            SUM(LT.DIFF30) AS DIFF30,
            SUM(LT.PRST35) AS PRST35,
            SUM(LT.AM35)   AS AM35
       FROM :LT_DATA AS LT
         LEFT JOIN TABWT AS TABWT ON  TABWT.MANDT = :LV_MANDT
                                  AND TABWT.BWASL = LT.BWASL
                                  AND TABWT.SPRAS = :LV_SPRAS
      GROUP BY LT.BUKRS, LT.ANLN1, LT.ANLN2, LT.AKTIV, LT.BUDAT,
               LT.ANLKL, LT.KTANSW, LT.INVNR, LT.BUTXT, LT.BELNR;

   ET_DATA =
     SELECT ROW_NUMBER ( ) OVER ( )              AS NUMPOS,
            STOIM.ANLN1,
            G.GLO_RUS_DEPGR                      AS GROUP_D,
            STOIM.INVNR,
            ZAFULL.TXTF1 || ZAFULL.TXTF2         AS TXT,
            STOIM.AKTIV,
            ANLU.ZZBUDATE,
            G.GLO_RUS_OKOF                       AS SHIFR,
            ZANLU.COSTRE_AC,
            STOIM.PRST01,
            STOIM.AM01,
            STOIM.DIFF01,
            STOIM.PRST30,
            STOIM.AM30,
            STOIM.DIFF30,
            - STOIM.PRST35                       AS PRST35,
            STOIM.AM35,
            GT.DESCRIPT,
            STOIM.BUKRS,
            ANKT.ANLKL || CHAR(32) || ANKT.TXK50 AS ANLKL,
            STOIM.ANLN2,
            STOIM.BUTXT,
            STOIM.BUDAT,
            STOIM.BWASL,
            STOIM.BWATXT,
            STOIM.BELNR
     FROM :LT_DATA AS STOIM
       LEFT JOIN ANKT AS ANKT ON  ANKT.MANDT = :LV_MANDT
                              AND ANKT.SPRAS = :LV_SPRAS
                              AND ANKT.ANLKL = STOIM.ANLKL
       LEFT JOIN ZAFULL AS ZAFULL ON  ZAFULL.MANDT = :LV_MANDT
                                  AND ZAFULL.BUKRS = STOIM.BUKRS
                                  AND ZAFULL.ANLN1 = STOIM.ANLN1
                                  AND ZAFULL.ANLN2 = STOIM.ANLN2
       LEFT OUTER JOIN GLOFAAASSETDATA AS G ON  G.MANDT = :LV_MANDT
                                            AND G.BUKRS = STOIM.BUKRS
                                            AND G.ANLN1 = STOIM.ANLN1
                                            AND G.ANLN2 = STOIM.ANLN2
       LEFT OUTER JOIN J_3RFDEPRGROUPT AS GT ON  GT.MANDT = G.MANDT
                                             AND GT.SPRSL = :LV_SPRAS
                                             AND GT.AMORTGR = G.GLO_RUS_DEPGR
       LEFT OUTER JOIN ANLU AS ANLU ON  ANLU.MANDT = :LV_MANDT
                                    AND ANLU.BUKRS = STOIM.BUKRS
                                    AND ANLU.ANLN1 = STOIM.ANLN1
                                    AND ANLU.ANLN2 = STOIM.ANLN2
       LEFT OUTER JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = :LV_MANDT
                                      AND ZANLU.INVNR = STOIM.INVNR
     WHERE STOIM.PRST30 <> 0 OR STOIM.PRST35 <> 0 OR STOIM.AM30 <> 0 OR STOIM.AM35 <> 0;
  ENDMETHOD.
ENDCLASS.