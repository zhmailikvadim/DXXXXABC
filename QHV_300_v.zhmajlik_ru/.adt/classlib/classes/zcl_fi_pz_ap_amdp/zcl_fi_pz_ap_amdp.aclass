CLASS ZCL_FI_PZ_AP_AMDP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB.

    TYPES:
      BEGIN OF GTY_S_HEADER,
        INVNR       TYPE ANLA-INVNR,                   "ИНВЕНТАРНЫЙ НОМЕР
        TXT50       TYPE string,                       "НАИМЕНОВАНИЕ ОБЪЕКТА ОС ОБЪЕКТ
        TTN         TYPE string,                       "НОМЕР И ДАТА ТТН
        MANUF       TYPE ZANLU-MANUF,                  "ЗАВОД ИЗГОТОВИТЕЛЬ
        PLANTNR     TYPE CHAR100, "ZANLU-PLANTNR,      "ЗАВОДСКОЙ НОМЕР
        ZNAMEREGDOC TYPE ZAA_LR_NAME,                  "Наименование документа о регистрации
        ZDATEREGDOC TYPE ZDATEREGDOC,                  "ДАТА ДОКУМЕНТА О РЕГИСТРАЦИИ ZVICNRECA- ZDATEREG (РАКУРС ZRE_ASSET_LINK)
        ZNUMREGDOC  TYPE ZNUMREGDOC,                   "НОМЕР ДОКУМЕНТА О РЕГИСТРАЦИИ ZVICNRECA-ZNUMREGDOC (РАКУРС ZRE_ASSET_LINK)
        ZNUMCADAST  TYPE ZNUMCADAST,                   "КАДАСТРОВЫЙ НОМЕР  VIBDAO- ZZNUMCADAST (РАКУРС ZRE_ASSET_LINK)
        KANSW       TYPE FAAV_ANEP-ANBTR,              "ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
        OTHER       TYPE STRING,                       "КРАТКАЯ ХАРАКТЕРИСТИКА
        NAZNUSE     TYPE CHAR20,                       "УЧАСТИЕ В ПРЕДПРИНИМАТЕЛЬСКОЙ ДЕЯТЕЛЬНОСТИ  ZANLZ-NAZNUSE. 1- ВЫВОДИТСЯ ТЕКСТ «УЧАСТВУЕТ», 2 – ВЫВОДИТСЯ ТЕКСТ «НЕ УЧАСТВУЕТ».
        GLO_OKOF    TYPE GLOFAAASSETDATA-GLO_RUS_OKOF, "ШИФР АМОРТИЗАЦИОННЫХ ОТЧИСЛЕНИЙ GLOFAAASSETDATA-GLO_RUS_OKOF
        KOEF_KI     TYPE ZANLZ-KOEF_KI,                "ПОПРАВОЧНЫЙ КОЭФФИЦИЕНТ ZANLZ-KOEF_KI
        UMSROKGD    TYPE CHAR15,                       "НОРМАТИВНЫЙ СРОК СЛУЖБЫ J_3RFTOKOF-UMSROKGD ДЛЯ GLOFAAASSETDATA-GLO_RUS_OKOF
        NDJAR       TYPE CHAR256,                      "СРОК ПОЛЕЗНОГО ИСПОЛЬЗОВАНИЯ
        AFASL       TYPE CHAR256,                      "СПОСОБ НАЧИСЛЕНИЯ АМОРТИЗАЦИИ   НАИМЕНОВАНИЕ  ДЛЯ ANLB(ANLBZA)-AFASL ПО 01 ОБЛАСТИ.
        BNAME       TYPE CHAR200,                      "НАИМ ОБОСОБЛ ПОДРАЗДЕЛЕНИЯ
   END OF GTY_S_HEADER,
      GTY_T_HEADER TYPE STANDARD TABLE OF GTY_S_HEADER.
   TYPES:
      BEGIN OF GTY_S_DATA_OC,
        POSNR       TYPE POSNR,                        "НОМЕР
        INVNR       TYPE ANLA-INVNR,                   "ИНВЕНТАРНЫЙ НОМЕР
        TXT50       TYPE CHAR256,                      "НАИМЕНОВАНИЕ ОБЪЕКТА ОС ОБЪЕКТ ZAFULL-TXTF1  ZAFULL-TXTF2
        PLANTNR     TYPE ZANLU-PLANTNR,                "ЗАВОДСКОЙ НОМЕР
        UTVDATE     TYPE CHAR10,                       "ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ   ПОЛЕ ОЗОС ZANLU-UTVDATE,
        DOCNUM      TYPE ZFI_HIST_BASE-DOCNUM,         "НОМЕР АКТА ВВОДА    ДО ДАТЫ ЗАГРУЗКИ В СИСТЕМУ ZFI_HIST_BASE- DOCNUM
        DOCDATE     TYPE CHAR10,                       "ДАТА АКТА ВВОДА ДО ДАТЫ ЗАГРУЗКИ В СИСТЕМУ ZFI_HIST_BASE-DOCDATE
        GLO_OKOF    TYPE GLOFAAASSETDATA-GLO_RUS_OKOF, "ШИФР АМОРТИЗАЦИОННЫХ ОТЧИСЛЕНИЙ GLOFAAASSETDATA-GLO_RUS_OKOF
        KOEF_KI     TYPE ZANLZ-KOEF_KI,                "ПОПРАВОЧНЫЙ КОЭФФИЦИЕНТ ZANLZ-KOEF_KI
        UMSROKGD    TYPE CHAR15,                       "НОРМАТИВНЫЙ СРОК СЛУЖБЫ J_3RFTOKOF-UMSROKGD ДЛЯ GLOFAAASSETDATA-GLO_RUS_OKOF
        NDJAR       TYPE CHAR256,                      "СРОК ПОЛЕЗНОГО ИСПОЛЬЗОВАНИЯ
        AFABG       TYPE CHAR256,                      "ОСТАТОЧНЫЙ СРОК СЛУЖБЫ  РАСЧЕТ С УЧЕТОМ ANLB-AFABG , СПИ  И  ПЕРИОДА ОТЧЕТА.
        AFASL       TYPE CHAR256,                      "СПОСОБ НАЧИСЛЕНИЯ АМОРТИЗАЦИИ   НАИМЕНОВАНИЕ  ДЛЯ ANLB(ANLBZA)-AFASL ПО 01 ОБЛАСТИ.
        OTHER       TYPE STRING,                       "КРАТКАЯ ХАРАКТЕРИСТИКА
        KANSW       TYPE FAAV_ANEP-ANBTR,              "ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
        NAZNUSE     TYPE CHAR20,                       "УЧАСТИЕ В ПРЕДПРИНИМАТЕЛЬСКОЙ ДЕЯТЕЛЬНОСТИ  ZANLZ-NAZNUSE. 1- ВЫВОДИТСЯ ТЕКСТ «УЧАСТВУЕТ», 2 – ВЫВОДИТСЯ ТЕКСТ «НЕ УЧАСТВУЕТ».
        PRIZN_Y     TYPE CHAR2,                        "ПРИЗНАК РЕКОНСТРУКЦИИ/МОДЕРНИЗАЦИИ  ВЫВОДИТЬ «ДА», ЕСЛИ ЗНАЧЕНИЕ ПОЛЯ ОЗОС «ВИД ИСПОЛЬЗОВАНИЯ» НА ДАТУ ФОРМИРОВАНИЯ ПРОТОКОЛА
        PLACE       TYPE CHAR256,                      "МЕСТО РАЗМЕЩЕНИЯ    АДРЕСНЫЕ ДАННЫЕ ИЗ ОЗОС.
        JUSTIFIC    TYPE CHAR1,                        "ОБОСНОВАНИЕ УМЕНЬШЕНИЯ СРОКА ПОЛЕЗНОГО ИСПОЛЬЗОВАНИЯ    ПУСТОЕ ПОЛЕ.
        CONCLUS     TYPE CHAR1,                        "Выводы комиссии:    Пустое поле.
   END OF GTY_S_DATA_OC,
      GTY_T_DATA_OC TYPE STANDARD TABLE OF GTY_S_DATA_OC.

   TYPES:
      BEGIN OF GTY_S_DATA_NMA,
        POSNR       TYPE POSNR,                        "НОМЕР
        INVNR       TYPE ANLA-INVNR,                   "ИНВЕНТАРНЫЙ НОМЕР
        TXT50       TYPE CHAR256,                      "НАИМЕНОВАНИЕ ОБЪЕКТА ОС ОБЪЕКТ ZAFULL-TXTF1  ZAFULL-TXTF2
        NAMDOC      TYPE ZAA_LR_NAME,                  "НАИМЕНОВАНИЕ ДОКУМЕНТА О РЕГИСТРАЦИИ    ПУСТОЕ ПОЛЕ
        ZDATEREG    TYPE ZVICNRECA-ZDATEREG,           "ДАТА ДОКУМЕНТА О РЕГИСТРАЦИИ    ZVICNRECA- ZDATEREG (РАКУРС ZRE_ASSET_LINK)
        ZNUMREGDOC  TYPE ZVICNRECA-ZNUMREGDOC,         "НОМЕР ДОКУМЕНТА О РЕГИСТРАЦИИ   ZVICNRECA-ZNUMREGDOC (РАКУРС ZRE_ASSET_LINK)
        ZNUMCADAST  TYPE ZNUMCADAST,                   "КАДАСТРОВЫЙ НОМЕР  VIBDAO- ZZNUMCADAST (РАКУРС ZRE_ASSET_LINK)
        KANSW       TYPE FAAV_ANEP-ANBTR,              "ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ
        OTHER       TYPE STRING,                       "КРАТКАЯ ХАРАКТЕРИСТИКА
        NAZNUSE     TYPE CHAR20,                       "УЧАСТИЕ В ПРЕДПРИНИМАТЕЛЬСКОЙ ДЕЯТЕЛЬНОСТИ  ZANLZ-NAZNUSE. 1- ВЫВОДИТСЯ ТЕКСТ «УЧАСТВУЕТ», 2 – ВЫВОДИТСЯ ТЕКСТ «НЕ УЧАСТВУЕТ».
        UMSROKGD    TYPE CHAR256,                      "НОРМАТИВНЫЙ СРОК СЛУЖБЫ J_3RFTOKOF-UMSROKGD ДЛЯ GLOFAAASSETDATA-GLO_RUS_OKOF J_3RFTOKOF-UMSROKGD,
        NDJAR       TYPE CHAR256,                      "СРОК ПОЛЕЗНОГО ИСПОЛЬЗОВАНИЯ
        AFASL       TYPE CHAR256,                      "СПОСОБ НАЧИСЛЕНИЯ АМОРТИЗАЦИИ   НАИМЕНОВАНИЕ  ДЛЯ ANLB(ANLBZA)-AFASL ПО 01 ОБЛАСТИ.
        NOTE        TYPE CHAR1,                        "ПРИМЕЧАНИЕ  ПУСТОЕ ПОЛЕ
      END OF GTY_S_DATA_NMA,
      GTY_T_DATA_NMA TYPE STANDARD TABLE OF GTY_S_DATA_NMA.

   TYPES:
      BEGIN OF GTY_S_DATA_OC_F.
          INCLUDE TYPE GTY_S_DATA_OC.
   TYPES: TDNAME  TYPE TDOBNAME,
      END OF GTY_S_DATA_OC_F,
       GTY_T_DATA_OC_F TYPE STANDARD TABLE OF GTY_S_DATA_OC_F,

      BEGIN OF GTY_S_DATA_NMA_F.
          INCLUDE TYPE GTY_S_DATA_NMA.
   TYPES: TDNAME  TYPE TDOBNAME,
      END OF GTY_S_DATA_NMA_F,
      GTY_T_DATA_NMA_F TYPE STANDARD TABLE OF GTY_S_DATA_NMA_F.

   TYPES:
      GTY_T_ANLN TYPE STANDARD TABLE OF ZAA_INVENTORY_CARD_ANLN WITH EMPTY KEY .

    CLASS-METHODS GET_DATA
      IMPORTING
        VALUE(IV_BUKRS)  TYPE BUKRS
        VALUE(IV_ANLN1)  TYPE ANLN1
        VALUE(IV_ANLN2)  TYPE ANLN2
        VALUE(IV_YEARS)  TYPE CHAR10
        VALUE(IV_MONTH)  TYPE CHAR10
        VALUE(IV_PARTY)  TYPE CHAR15   "'УЧАСТВУЕТ'
        VALUE(IV_PARTN)  TYPE CHAR15   "'НЕ УЧАСТВУЕТ'
        VALUE(IV_DATUM)  TYPE D
        VALUE(IV_OT)     TYPE CHAR10   "от
      EXPORTING
        VALUE(ET_HEADER) TYPE GTY_T_HEADER
      RAISING
        CX_AMDP_ERROR.

    CLASS-METHODS GET_DATA_OC
      IMPORTING
        VALUE(IV_BUKRS)  TYPE BUKRS
        VALUE(IV_FLT)    TYPE STRING
        VALUE(IV_YEARS)  TYPE CHAR10
        VALUE(IV_MONTH)  TYPE CHAR10
        VALUE(IV_PARTY)  TYPE CHAR15   "'УЧАСТВУЕТ'
        VALUE(IV_PARTN)  TYPE CHAR15   "'НЕ УЧАСТВУЕТ'
        VALUE(IV_YES)    TYPE CHAR15   "ДА
        VALUE(IV_DATUM)  TYPE D
      EXPORTING
        VALUE(ET_DATA)   TYPE GTY_T_DATA_OC_F       "ВЫХОДНАЯ ТАБЛИЦА TYPE . "
      RAISING
        CX_AMDP_ERROR.

    CLASS-METHODS GET_DATA_NMA
      IMPORTING
        VALUE(IV_BUKRS)  TYPE BUKRS
        VALUE(IV_FLT)    TYPE STRING
        VALUE(IV_YEARS)  TYPE CHAR10
        VALUE(IV_MONTH)  TYPE CHAR10
        VALUE(IV_PARTY)  TYPE CHAR15   "'УЧАСТВУЕТ'
        VALUE(IV_PARTN)  TYPE CHAR15   "'НЕ УЧАСТВУЕТ'
        VALUE(IV_DATUM)  TYPE D
      EXPORTING
        VALUE(ET_DATA)   TYPE GTY_T_DATA_NMA_F       "ВЫХОДНАЯ ТАБЛИЦА TYPE . "
        VALUE(EV_SUMM)   TYPE FAAV_ANEP-ANBTR
      RAISING
        CX_AMDP_ERROR.

    CLASS-METHODS READ_ANLN_DATA
      IMPORTING
        VALUE(IV_BUKRS)   TYPE BUKRS
        VALUE(IV_ANLN1)   TYPE ANLN1
        VALUE(IV_ANLN2)   TYPE ANLN2
        VALUE(IV_TYPEFLT) TYPE STRING
      EXPORTING
        VALUE(ET_ANLN)    TYPE GTY_T_ANLN
        VALUE(ET_TYPES)   TYPE WDY_KEY_VALUE_LIST .

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_PZ_AP_AMDP IMPLEMENTATION.


  METHOD GET_DATA
    BY DATABASE PROCEDURE FOR HDB
                LANGUAGE SQLSCRIPT
                OPTIONS READ-ONLY
                USING ANLA GLOFAAASSETDATA ANLB T090NAT T093C  J_3RFTOKOF BUT000
                ZANLU ZAFULL ZANLZ TCURT  ZAA_UTILS_HDB=>GET_ASSET_VALUES ZAA_LINK_AA_RE_HDB=>GET_AA_RE_VALUES
                FAAV_ANEK FAAV_ANEP FAAV_ANEA TABW TABWG .

    DECLARE LV_SPRAS CHAR(1);
    DECLARE LV_MANDT CHAR(3);
    DECLARE LV_DATADD CHAR(8);


    LV_SPRAS = SESSION_CONTEXT('LOCALE_SAP');
    LV_MANDT = SESSION_CONTEXT('CLIENT');
    LV_DATADD = TO_DATS( ADD_DAYS( :IV_DATUM, 1) );  -- НОВЫЙ ДЕНЬ


    ET_HEADER =
    SELECT
       ANLA.INVNR,
       ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2 AS TXT50,
       ZANLU.AKTNUM || CHAR(32) || :IV_OT || CHAR(32) || RIGHT(ZANLU.UTVDATE, 2) || '.' || TO_NCHAR( MONTH(ZANLU.UTVDATE) ,'00') || '.' || YEAR(ZANLU.UTVDATE) AS TTN,
       ZANLU.MANUF,
       ZANLU.PLANTNR,
       ZANLU.LR_NAME AS ZNAMEREGDOC,
       CASE WHEN ZANLU.LR_DATE <> 00000000 THEN ZANLU.LR_DATE ELSE AA_RE_VAL.ZDATEREGDOC END AS ZDATEREGDOC,
       CASE WHEN ZANLU.LR_NUMBER <> ''  THEN ZANLU.LR_NUMBER ELSE AA_RE_VAL.ZNUMREGDOC   END AS ZNUMREGDOC,
       AA_RE_VAL.ZZNUMCADAST  AS ZNUMCADAST,
       CASE WHEN ANLA.AKTIV = :IV_DATUM THEN ASSET_VAL_ACT.KANSW
            WHEN ANLA.DEAKT = :IV_DATUM THEN VALS.KANSW ELSE ASSET_VAL.KANSW END AS KANSW,
       '' AS OTHER,
       CASE WHEN ZANLZ.NAZNUSE = 1 THEN IV_PARTY WHEN ZANLZ.NAZNUSE = 2 THEN IV_PARTN END AS NAZNUSE,
       GLO.GLO_RUS_OKOF AS GLO_OKOF,
       ZANLZ.KOEF_KI AS KOEF_KI,
       CASE WHEN J_3RFTOKOF.UMSROKGD <> 000 THEN CAST(CAST(J_3RFTOKOF.UMSROKGD AS INT) AS VARCHAR(3)) ELSE '' END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN J_3RFTOKOF.FUMSROKPRD <> 000 THEN CAST(CAST(J_3RFTOKOF.FUMSROKPRD AS INT) AS VARCHAR(3)) ELSE '0' END  || CHAR(32) || IV_MONTH AS UMSROKGD,
       CASE WHEN ANLB.NDJAR <> 000 THEN LTRIM ( ANLB.NDJAR, 0 ) ELSE 0 END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN ANLB.NDPER <> 000 THEN LTRIM ( ANLB.NDPER, 0 ) ELSE 0 END || CHAR(32) || IV_MONTH AS NDJAR,
       CASE WHEN T090NAT.AFATXT <> '' THEN T090NAT.AFATXT ELSE ANLB.AFASL END AS AFASL,
       BU.NAME_ORG1 || CHAR(32) || BU.NAME_ORG2 || BU.NAME_ORG3 || BU.NAME_ORG4 AS BNAME
    FROM ANLA AS ANLA
      LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT = ANLA.MANDT
                                 AND ZAFULL.BUKRS = ANLA.BUKRS
                                 AND ZAFULL.ANLN1 = ANLA.ANLN1
                                 AND ZAFULL.ANLN2 = ANLA.ANLN2
      LEFT JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                               AND ZANLU.INVNR = ANLA.INVNR
      LEFT JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( :LV_MANDT, :LV_DATADD, '' ) AS ASSET_VAL
                                                  ON ASSET_VAL.BUKRS  = ANLA.BUKRS
                                                  AND ASSET_VAL.ANLN1 = ANLA.ANLN1
                                                  AND ASSET_VAL.ANLN2 = ANLA.ANLN2
                                                  AND ASSET_VAL.AFABE =  '01'
      LEFT JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( :LV_MANDT, :LV_DATADD, '' ) AS ASSET_VAL_ACT
                                                  ON ASSET_VAL_ACT.BUKRS  = ANLA.BUKRS
                                                  AND ASSET_VAL_ACT.ANLN1 = ANLA.ANLN1
                                                  AND ASSET_VAL_ACT.ANLN2 = ANLA.ANLN2
                                                  AND ASSET_VAL_ACT.AFABE =  '01'
      LEFT JOIN "ZAA_LINK_AA_RE_HDB=>GET_AA_RE_VALUES" ( :LV_MANDT, :LV_DATADD ) AS AA_RE_VAL
                                                        ON AA_RE_VAL.BUKRS = ANLA.BUKRS
                                                        AND AA_RE_VAL.ANLN1 = ANLA.ANLN1
                                                        AND AA_RE_VAL.ANLN2 = ANLA.ANLN2
      LEFT OUTER JOIN TCURT AS TCURT ON TCURT.MANDT  = ANLA.MANDT
                                     AND TCURT.SPRAS = :LV_SPRAS
                                     AND TCURT.WAERS = ZANLU.WAERS
      LEFT JOIN ZANLZ AS ZANLZ ON ZANLZ.MANDT = ANLA.MANDT
                               AND ZANLZ.INVNR = ANLA.INVNR
                               AND ANLA.INVNR <> ''
                               AND ZANLZ.BDATU >= :IV_DATUM
                               AND ZANLZ.ADATU <= :IV_DATUM
      LEFT JOIN GLOFAAASSETDATA AS GLO ON GLO.MANDT = ANLA.MANDT
                                       AND GLO.BUKRS = ANLA.BUKRS
                                       AND GLO.ANLN1 = ANLA.ANLN1
                                       AND GLO.ANLN2 = ANLA.ANLN2
      LEFT JOIN J_3RFTOKOF AS J_3RFTOKOF ON J_3RFTOKOF.MANDT = ANLA.MANDT
                                         AND J_3RFTOKOF.OKOF = GLO.GLO_RUS_OKOF
      LEFT JOIN ANLB AS ANLB ON  ANLB.MANDT = ANLA.MANDT
                             AND ANLB.BUKRS = ANLA.BUKRS
                             AND ANLB.ANLN1 = ANLA.ANLN1
                             AND ANLB.ANLN2 = ANLA.ANLN2
                             AND ANLB.AFABE = '01'
                             AND ANLB.BDATU >= :IV_DATUM
                             AND ANLB.ADATU <= :IV_DATUM
      LEFT JOIN T093C AS T093C ON T093C.BUKRS = ANLA.BUKRS
                               AND T093C.MANDT = ANLA.MANDT
      LEFT JOIN T090NAT AS T090NAT ON T090NAT.MANDT = ZANLU.MANDT
                                   AND T090NAT.AFASL = ANLB.AFASL
                                   AND T090NAT.AFAPL = T093C.AFAPL
                                   AND T090NAT.SPRAS = :LV_SPRAS
      LEFT OUTER JOIN BUT000 AS BU ON BU.CLIENT = ANLA.MANDT
                                   AND BU.PARTNER = '00000000' || ANLA.BUKRS
      LEFT OUTER JOIN ( SELECT DISTINCT
                              ANEK.BUKRS,
                              ANEK.ANLN1,
                              ANEK.ANLN2,
                              ANEK.BUDAT,
                              ABS( SUM ( ANEP.ANBTR + ANEA.AUFWV ) ) AS KANSW
                           FROM FAAV_ANEK AS ANEK
                              INNER JOIN FAAV_ANEP AS ANEP ON  ANEP.MANDT = ANEK.MANDT
                                                           AND ANEP.BUKRS = ANEK.BUKRS
                                                           AND ANEP.ANLN1 = ANEK.ANLN1
                                                           AND ANEP.ANLN2 = ANEK.ANLN2
                                                           AND ANEP.GJAHR = ANEK.GJAHR
                                                           AND ANEP.LNRAN = ANEK.LNRAN
                                                           AND ANEP.AFABE = '01'
                                                           AND ANEP.LNSAN <> ''
                              LEFT OUTER JOIN FAAV_ANEA AS ANEA ON  ANEA.BUKRS = ANEP.BUKRS
                                                                AND ANEA.ANLN1 = ANEP.ANLN1
                                                                AND ANEA.ANLN2 = ANEP.ANLN2
                                                                AND ANEA.GJAHR = ANEP.GJAHR
                                                                AND ANEA.AFABE = ANEP.AFABE
                                                                AND ANEA.LNRAN = ANEP.LNRAN
                                                                AND ANEA.ZUCOD = ANEP.ZUCOD
                                                                AND ANEA.MANDT = ANEP.MANDT
                            INNER JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                                                   AND TABW.BWASL = ANEP.BWASL
                            INNER JOIN TABWG AS TABWG ON TABWG.MANDT  = TABW.MANDT
                                                     AND TABWG.BWAGRP = TABW.BWAGRP
                                                     AND TABWG.GITCOL IN ( '2' , '4' )
                           WHERE ANEK.MANDT = :LV_MANDT
                           GROUP BY ANEK.BUKRS,
                                    ANEK.ANLN1,
                                    ANEK.ANLN2,
                                    ANEK.BUDAT,
                                    ANEP.BELNR
                       ) AS VALS ON VALS.BUKRS = ANLA.BUKRS
                                AND VALS.ANLN1 = ANLA.ANLN1
                                AND VALS.ANLN2 = ANLA.ANLN2
                                AND VALS.BUDAT = ANLA.DEAKT
    WHERE ANLA.MANDT = :LV_MANDT
      AND ANLA.BUKRS = :IV_BUKRS
      AND ANLA.AKTIV <> '00000000'
      AND ANLA.AKTIV <= :IV_DATUM
      AND ANLA.ANLN1 = :IV_ANLN1
      AND ANLA.ANLN2 = :IV_ANLN2
    ORDER BY ANLA.ANLN1, ANLA.ANLN2;

  ENDMETHOD.


METHOD GET_DATA_NMA
    BY DATABASE PROCEDURE FOR HDB
                LANGUAGE SQLSCRIPT
                OPTIONS READ-ONLY
                USING  ANLA GLOFAAASSETDATA ANLB T090NAT T093C  J_3RFTOKOF ZAA_LINK_AA_RE_HDB=>GET_AA_RE_VALUES ANLZ J_3RFANKA
                       ZANLU ZAFULL ZANLZ TCURT  ZAA_UTILS_HDB=>GET_ASSET_VALUES ZAA_LINK_AA_RE_HDB=>GET_AA_RE_VALUES
                       FAAV_ANEK FAAV_ANEP FAAV_ANEA TABW TABWG .

    DECLARE LV_SPRAS CHAR(1);
    DECLARE LV_MANDT CHAR(3);
    DECLARE LV_DATADD CHAR(8);

    LV_SPRAS = SESSION_CONTEXT('LOCALE_SAP');
    LV_MANDT = SESSION_CONTEXT('CLIENT');

    LV_DATADD = TO_DATS( ADD_DAYS( :IV_DATUM, 1) );  -- НОВЫЙ ДЕНЬ

    LT_DATA  =
    SELECT
       ANLA.ANLKL,
       ANLA.ANLN1,
       ANLA.ANLN2,
       ANLZ.LGORT,
       ANLA.MANDT,
       ANLA.INVNR,
       ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2 AS TXT50,
       ZANLU.LR_NAME AS NAMDOC,
       CASE WHEN ZANLU.LR_DATE <> 00000000 THEN ZANLU.LR_DATE ELSE AA_RE_VALUE.ZDATEREGDOC END AS ZDATEREG,
       CASE WHEN ZANLU.LR_NUMBER <> '' THEN ZANLU.LR_NUMBER ELSE AA_RE_VALUE.ZNUMREGDOC END AS ZNUMREGDOC,
       AA_RE_VALUE.ZZNUMCADAST AS ZNUMCADAST,
       CASE WHEN ANLA.DEAKT = :IV_DATUM THEN VALS.KANSW ELSE ASSET_VAL.KANSW END AS KANSW,
       '' AS OTHER,
       CASE WHEN ZANLZ.NAZNUSE = 1 THEN IV_PARTY WHEN ZANLZ.NAZNUSE = 2 THEN IV_PARTN END AS NAZNUSE,
       CASE WHEN ANLB.NDJAR <> 000 THEN LTRIM ( ANLB.NDJAR, 0 ) ELSE 0 END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN ANLB.NDPER <> 000 THEN LTRIM ( ANLB.NDPER, 0 ) ELSE 0 END || CHAR(32) || IV_MONTH AS UMSROKGD,
       CASE WHEN ANLB.NDJAR <> 000 THEN LTRIM ( ANLB.NDJAR, 0 ) ELSE 0 END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN ANLB.NDPER <> 000 THEN LTRIM ( ANLB.NDPER, 0 ) ELSE 0 END || CHAR(32) || IV_MONTH AS NDJAR,
       CASE WHEN T090NAT.AFATXT <> '' THEN T090NAT.AFATXT ELSE ANLB.AFASL END AS AFASL,
       '' AS NOTE,
       RPAD( ANLA.BUKRS, 4, CHAR(32) ) || ANLA.ANLN1 || ANLA.ANLN2 AS TDNAME
    FROM ANLA AS ANLA
      JOIN J_3RFANKA AS J_3RFANKA ON J_3RFANKA.MANDT = ANLA.MANDT
                                  AND J_3RFANKA.ANLKL = ANLA.ANLKL
      LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT = ANLA.MANDT
                                 AND ZAFULL.BUKRS = ANLA.BUKRS
                                 AND ZAFULL.ANLN1 = ANLA.ANLN1
                                 AND ZAFULL.ANLN2 = ANLA.ANLN2
      LEFT JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                               AND ZANLU.INVNR = ANLA.INVNR
      LEFT JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( :LV_MANDT, :LV_DATADD, '' ) AS ASSET_VAL
                                                  ON ASSET_VAL.BUKRS = ANLA.BUKRS
                                                  AND ASSET_VAL.ANLN1 = ANLA.ANLN1
                                                  AND ASSET_VAL.ANLN2 = ANLA.ANLN2
                                                  AND ASSET_VAL.AFABE =  '01'
      LEFT OUTER JOIN TCURT AS TCURT ON TCURT.MANDT  = ANLA.MANDT
                                     AND TCURT.SPRAS = :LV_SPRAS
                                     AND TCURT.WAERS = ZANLU.WAERS

      LEFT JOIN ZANLZ AS ZANLZ ON ZANLZ.MANDT = ANLA.MANDT
                               AND ZANLZ.INVNR = ANLA.INVNR
                               AND ANLA.INVNR <> ''
                               AND ZANLZ.BDATU >= :LV_DATADD
                               AND ZANLZ.ADATU <= :LV_DATADD
      LEFT JOIN GLOFAAASSETDATA AS GLO ON GLO.MANDT = ANLA.MANDT
                                       AND GLO.BUKRS = ANLA.BUKRS
                                       AND GLO.ANLN1 = ANLA.ANLN1
                                       AND GLO.ANLN2 = ANLA.ANLN2
      LEFT JOIN J_3RFTOKOF AS J_3RFTOKOF ON J_3RFTOKOF.MANDT = ANLA.MANDT
                                         AND J_3RFTOKOF.OKOF = GLO.GLO_RUS_OKOF
      LEFT JOIN ANLB AS ANLB ON  ANLB.MANDT = ANLA.MANDT
                             AND ANLB.BUKRS = ANLA.BUKRS
                             AND ANLB.ANLN1 = ANLA.ANLN1
                             AND ANLB.ANLN2 = ANLA.ANLN2
                             AND ANLB.AFABE = '01'
                             AND ANLB.BDATU >= LV_DATADD
                             AND ANLB.ADATU <= LV_DATADD
      LEFT JOIN T093C AS T093C ON T093C.BUKRS = ANLA.BUKRS
                               AND T093C.MANDT = ANLA.MANDT
      LEFT JOIN T090NAT AS T090NAT ON T090NAT.MANDT = ZANLU.MANDT
                                   AND T090NAT.AFASL = ANLB.AFASL
                                   AND T090NAT.AFAPL = T093C.AFAPL
                                   AND T090NAT.SPRAS = LV_SPRAS

      LEFT JOIN "ZAA_LINK_AA_RE_HDB=>GET_AA_RE_VALUES" ( :LV_MANDT, :LV_DATADD ) AS AA_RE_VALUE
                                                        ON  AA_RE_VALUE.BUKRS = ANLA.BUKRS
                                                        AND AA_RE_VALUE.ANLN1 = ANLA.ANLN1
                                                        AND AA_RE_VALUE.ANLN2 = ANLA.ANLN2
      LEFT JOIN ANLZ AS ANLZ ON ANLZ.MANDT = ANLA.MANDT
                             AND ANLZ.BUKRS = ANLA.BUKRS
                             AND ANLZ.ANLN1 = ANLA.ANLN1
                             AND ANLZ.ANLN2 = ANLA.ANLN2
                             AND ANLZ.ADATU <= :LV_DATADD
                             AND ANLZ.BDATU >= :LV_DATADD
      LEFT OUTER JOIN ( SELECT DISTINCT
                           ANEK.BUKRS,
                           ANEK.ANLN1,
                           ANEK.ANLN2,
                           ANEK.BUDAT,
                           ABS( SUM ( ANEP.ANBTR + ANEA.AUFWV ) ) AS KANSW
                         FROM FAAV_ANEK AS ANEK
                           INNER JOIN FAAV_ANEP AS ANEP ON  ANEP.MANDT = ANEK.MANDT
                                                       AND ANEP.BUKRS = ANEK.BUKRS
                                                       AND ANEP.ANLN1 = ANEK.ANLN1
                                                       AND ANEP.ANLN2 = ANEK.ANLN2
                                                       AND ANEP.GJAHR = ANEK.GJAHR
                                                       AND ANEP.LNRAN = ANEK.LNRAN
                                                       AND ANEP.AFABE = '01'
                                                       AND ANEP.LNSAN <> ''
                           LEFT OUTER JOIN FAAV_ANEA AS ANEA ON  ANEA.BUKRS = ANEP.BUKRS
                                                             AND ANEA.ANLN1 = ANEP.ANLN1
                                                             AND ANEA.ANLN2 = ANEP.ANLN2
                                                             AND ANEA.GJAHR = ANEP.GJAHR
                                                             AND ANEA.AFABE = ANEP.AFABE
                                                             AND ANEA.LNRAN = ANEP.LNRAN
                                                             AND ANEA.ZUCOD = ANEP.ZUCOD
                                                             AND ANEA.MANDT = ANEP.MANDT
                           INNER JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                                                  AND TABW.BWASL = ANEP.BWASL
                           INNER JOIN TABWG AS TABWG ON TABWG.MANDT  = TABW.MANDT
                                                    AND TABWG.BWAGRP = TABW.BWAGRP
                                                    AND TABWG.GITCOL IN ( '2', '4' )
                          WHERE ANEK.MANDT = :LV_MANDT
                          GROUP BY ANEK.BUKRS,
                                   ANEK.ANLN1,
                                   ANEK.ANLN2,
                                   ANEK.BUDAT,
                                   ANEP.BELNR
                        ) AS VALS ON  VALS.BUKRS = ANLA.BUKRS
                                  AND VALS.ANLN1 = ANLA.ANLN1
                                  AND VALS.ANLN2 = ANLA.ANLN2
                                  AND VALS.BUDAT = ANLA.DEAKT
    WHERE ANLA.MANDT = :LV_MANDT
      AND ANLA.BUKRS = :IV_BUKRS
      AND ANLA.AKTIV <> '00000000'
      AND ANLA.AKTIV <= :LV_DATADD
      AND (ANLA.DEAKT >= :LV_DATADD OR ANLA.DEAKT = '00000000' )
      AND (ANLA.ZUGDT <= :LV_DATADD AND ANLA.ZUGDT <> '00000000' )
      AND J_3RFANKA.ANKA_TYPE = 'INTANASSET'
    ORDER BY ANLA.ANLN1, ANLA.ANLN2;

    LT_DATA  = APPLY_FILTER( :LT_DATA, :IV_FLT );

    IF IS_EMPTY ( :LT_DATA ) THEN
      RETURN;
    END IF;

    ET_DATA =
    SELECT
      ROW_NUMBER() OVER (PARTITION BY LT.MANDT) AS POSNR,
      INVNR,
      TXT50,
      NAMDOC,
      ZDATEREG,
      ZNUMREGDOC,
      ZNUMCADAST,
      KANSW,
      OTHER,
      NAZNUSE,
      UMSROKGD,
      NDJAR,
      AFASL,
      NOTE,
      TDNAME
    FROM :LT_DATA AS LT;

    SELECT SUM(LT.KANSW) INTO EV_SUMM FROM :LT_DATA AS LT;
  ENDMETHOD.


  METHOD GET_DATA_OC
    BY DATABASE PROCEDURE FOR HDB
                LANGUAGE SQLSCRIPT
                OPTIONS READ-ONLY
                USING ANLA ZANLU ZAFULL J_3RFANKA
                ZANLZ TCURT ZAA_UTILS_HDB=>GET_ASSET_VALUES
                ZAA_UTILS_HDB=>GET_ASSET_SPI
                GLOFAAASSETDATA ANLB T090NAT T093C J_3RFTOKOF ZFI_HIST_BASE
                KNA1 ANLBZA ADRC T001 ANLZ BKPF ACDOCA
                FAAV_ANEK FAAV_ANEP FAAV_ANEA TABW TABWG .

    DECLARE LV_SPRAS CHAR(1);
    DECLARE LV_MANDT CHAR(3);
    DECLARE LV_DATADD CHAR(8);

    LV_SPRAS = SESSION_CONTEXT('LOCALE_SAP');
    LV_MANDT = SESSION_CONTEXT('CLIENT');
    LV_DATADD = TO_DATS( ADD_DAYS( :IV_DATUM, 1) );  -- НОВЫЙ ДЕНЬ

    LT_DATA  =
    SELECT
       ANLA.MANDT,
       ANLA.ANLKL,
       ANLA.ANLN1,
       ANLA.ANLN2,
       ANLZ.LGORT,
       ANLA.INVNR,
       ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2 AS TXT50,
       ZANLU.PLANTNR,
       RIGHT(ZANLU.UTVDATE, 2) || '.' || TO_NCHAR( MONTH(ZANLU.UTVDATE) ,'00') || '.' || YEAR(ZANLU.UTVDATE) AS UTVDATE,
       ZANLU.AKTNUM AS DOCNUM,
       RIGHT(ZANLU.UTVDATE, 2) || '.' || TO_NCHAR( MONTH(ZANLU.UTVDATE) ,'00') || '.' || YEAR(ZANLU.UTVDATE)  AS DOCDATE,
       GLO.GLO_RUS_OKOF AS GLO_OKOF,
       ZANLZ.KOEF_KI AS KOEF_KI,
       CASE WHEN J_3RFTOKOF.UMSROKGD <> 000 THEN CAST(CAST(J_3RFTOKOF.UMSROKGD AS INT) AS VARCHAR(3)) ELSE '' END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN J_3RFTOKOF.FUMSROKPRD <> 000 THEN CAST(CAST(J_3RFTOKOF.FUMSROKPRD AS INT) AS VARCHAR(3)) ELSE '0' END  || CHAR(32) || IV_MONTH AS UMSROKGD,
       CASE WHEN ANLB.NDJAR <> 000 THEN LTRIM ( ANLB.NDJAR, 0 ) ELSE 0 END || CHAR(32) || IV_YEARS || CHAR(32) ||
       CASE WHEN ANLB.NDPER <> 000 THEN LTRIM ( ANLB.NDPER, 0 ) ELSE 0 END || CHAR(32) || IV_MONTH AS NDJAR,
       ANLBZA_BEG.RESTJ || CHAR(32) || IV_YEARS || CHAR(32) || ANLBZA_BEG.RESTP  || CHAR(32) || IV_MONTH AS AFABG,            --ОCC
       CASE WHEN T090NAT.AFATXT <> '' THEN T090NAT.AFATXT ELSE ANLB.AFASL END AS AFASL,
       '' AS OTHER,
       CASE WHEN ANLA.DEAKT = :IV_DATUM THEN VALS.KANSW ELSE ASSET_VAL.KANSW END AS KANSW,
       CASE WHEN ZANLZ.NAZNUSE = 1 THEN IV_PARTY WHEN ZANLZ.NAZNUSE = 2 THEN IV_PARTN END AS NAZNUSE,
       CASE WHEN  ZANLZ.VIDUSE = 40 THEN :IV_YES END AS PRIZN_Y,
       ADRC_BU.POST_CODE1
          ||CASE WHEN ADRC_BU.CITY1 <> '' THEN ','||CHAR(32)||ADRC_BU.CITY1 ELSE '' END
          ||CASE WHEN ADRC_BU.STREET <> '' THEN ','||CHAR(32)||ADRC_BU.STREET ELSE '' END
          ||CASE WHEN ADRC_BU.STR_SUPPL1 <> '' THEN ','||CHAR(32)||ADRC_BU.STR_SUPPL1 ELSE '' END
          ||CASE WHEN ADRC_BU.STR_SUPPL2 <> '' THEN ','||CHAR(32)||ADRC_BU.STR_SUPPL2 ELSE '' END
          ||CASE WHEN ADRC_BU.STR_SUPPL3 <> '' THEN ','||CHAR(32)||ADRC_BU.STR_SUPPL3 ELSE '' END
          ||CASE WHEN ADRC_BU.HOUSE_NUM1 <> '' THEN ','||CHAR(32)||ADRC_BU.HOUSE_NUM1 ELSE '' END
          ||CASE WHEN ADRC_BU.HOUSE_NUM2 <> '' THEN ','||CHAR(32)||ADRC_BU.HOUSE_NUM2 ELSE '' END AS PLACE,
       '' AS JUSTIFIC,
       '' AS CONCLUS,
       RPAD( ANLA.BUKRS, 4, CHAR(32) ) || ANLA.ANLN1 || ANLA.ANLN2 AS TDNAME
    FROM ANLA AS ANLA
      JOIN J_3RFANKA AS J_3RFANKA ON  J_3RFANKA.MANDT = ANLA.MANDT
                                  AND J_3RFANKA.ANLKL = ANLA.ANLKL
      LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT  = ANLA.MANDT
                                 AND ZAFULL.BUKRS = ANLA.BUKRS
                                 AND ZAFULL.ANLN1 = ANLA.ANLN1
                                 AND ZAFULL.ANLN2 = ANLA.ANLN2
      LEFT JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                               AND ZANLU.INVNR = ANLA.INVNR
      LEFT JOIN "ZAA_UTILS_HDB=>GET_ASSET_VALUES" ( :LV_MANDT, :LV_DATADD, '' ) AS ASSET_VAL
                                                  ON  ASSET_VAL.BUKRS = ANLA.BUKRS
                                                  AND ASSET_VAL.ANLN1 = ANLA.ANLN1
                                                  AND ASSET_VAL.ANLN2 = ANLA.ANLN2
                                                  AND ASSET_VAL.AFABE =  '01'
      LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI"( :LV_MANDT, :IV_DATUM ) AS ANLBZA_BEG
                                         ON ANLBZA_BEG.BUKRS = ANLA.BUKRS     -- ДАННЫЕ ПО ОЦЕНКЕ НА НАЧ ОТЧЕТА
                                        AND ANLBZA_BEG.ANLN1 = ANLA.ANLN1
                                        AND ANLBZA_BEG.ANLN2 = ANLA.ANLN2
                                        AND ANLBZA_BEG.AFABE = '01'
      LEFT OUTER JOIN TCURT AS TCURT ON  TCURT.MANDT  = ANLA.MANDT
                                     AND TCURT.SPRAS = :LV_SPRAS
                                     AND TCURT.WAERS = ZANLU.WAERS
      LEFT JOIN ZANLZ AS ZANLZ ON  ZANLZ.MANDT = ANLA.MANDT -- ВРЕМЕННО ЗАВИСИМЫЕ ДОПДАННЫЕ ОС
                               AND ZANLZ.INVNR = ANLA.INVNR
                               AND ANLA.INVNR <> ''
                               AND ZANLZ.BDATU >= :LV_DATADD
                               AND ZANLZ.ADATU <= :LV_DATADD
      LEFT JOIN GLOFAAASSETDATA AS GLO ON  GLO.MANDT = ANLA.MANDT
                                       AND GLO.BUKRS = ANLA.BUKRS
                                       AND GLO.ANLN1 = ANLA.ANLN1
                                       AND GLO.ANLN2 = ANLA.ANLN2
      LEFT JOIN J_3RFTOKOF AS J_3RFTOKOF ON  J_3RFTOKOF.MANDT = ANLA.MANDT
                                         AND J_3RFTOKOF.OKOF = GLO.GLO_RUS_OKOF
      LEFT JOIN ANLB AS ANLB ON  ANLB.MANDT = ANLA.MANDT
                             AND ANLB.BUKRS = ANLA.BUKRS
                             AND ANLB.ANLN1 = ANLA.ANLN1
                             AND ANLB.ANLN2 = ANLA.ANLN2
                             AND ANLB.AFABE = '01'
                             AND ANLB.BDATU >= :LV_DATADD
                             AND ANLB.ADATU <= :LV_DATADD
      LEFT OUTER JOIN ANLBZA AS ANLBZA ON  ANLBZA.BUKRS = ANLA.BUKRS      -- ВРЕМЕННО ЗАВИСИМЫЕ ДАННЫЕ ПО ОЦЕНКЕ ОС
                                       AND ANLBZA.MANDT = ANLA.MANDT
                                       AND ANLBZA.ANLN1 = ANLA.ANLN1
                                       AND ANLBZA.ANLN2 = ANLA.ANLN2
                                       AND ANLBZA.AFABE = '01'
                                       AND ANLBZA.ADATU <= LV_DATADD
                                       AND ANLBZA.BDATU >= LV_DATADD
      LEFT JOIN T093C AS T093C ON  T093C.BUKRS = ANLA.BUKRS
                               AND T093C.MANDT = ANLA.MANDT
      LEFT JOIN T090NAT AS T090NAT ON  T090NAT.MANDT = ZANLU.MANDT
                                   AND T090NAT.AFASL = ANLB.AFASL
                                   AND T090NAT.AFAPL = T093C.AFAPL
                                   AND T090NAT.SPRAS = LV_SPRAS
      LEFT JOIN ANLZ AS ANLZ ON  ANLZ.MANDT = ANLA.MANDT
                             AND ANLZ.BUKRS = ANLA.BUKRS
                             AND ANLZ.ANLN1 = ANLA.ANLN1
                             AND ANLZ.ANLN2 = ANLA.ANLN2
                             AND ANLZ.ADATU <= :LV_DATADD
                             AND ANLZ.BDATU >= :LV_DATADD
      LEFT JOIN ZFI_HIST_BASE AS BASE ON  BASE.MANDT = ANLA.MANDT
                                     AND BASE.INVNR = ANLA.INVNR
      JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                       AND T001.BUKRS = ANLA.BUKRS
      LEFT OUTER JOIN KNA1 AS KN_BU ON  KN_BU.MANDT = T001.MANDT
                                   AND KN_BU.KUNNR = LPAD( T001.BUKRS, 10, '0')
      LEFT OUTER JOIN ADRC AS ADRC_BU ON ADRC_BU.CLIENT = T001.MANDT
                                     AND ADRC_BU.ADDRNUMBER = KN_BU.ADRNR
      LEFT OUTER JOIN ACDOCA AS ACDOCA ON ACDOCA.RCLNT = ANLA.MANDT
                                AND ACDOCA.RBUKRS = ANLA.BUKRS
                                AND ACDOCA.ANLN1 = ANLA.ANLN1
                                AND ACDOCA.ANLN2 = ANLA.ANLN2
                                AND ACDOCA.XREVERSING = ''
                                AND ACDOCA.XREVERSED  = ''
                                AND ACDOCA.AFABE = '01'
                                AND ACDOCA.BZDAT = ANLA.ZUGDT
                                AND ACDOCA.DRCRK = 'H'
      LEFT JOIN BKPF AS BKPF ON BKPF.MANDT = ANLA.MANDT
                            AND BKPF.BUKRS = ANLA.BUKRS
                            AND BKPF.BELNR = ACDOCA.BELNR
                            AND BKPF.GJAHR = ACDOCA.GJAHR
       LEFT OUTER JOIN ( SELECT DISTINCT
                              ANEK.BUKRS,
                              ANEK.ANLN1,
                              ANEK.ANLN2,
                              ANEK.BUDAT,
                              ABS( SUM ( ANEP.ANBTR + ANEA.AUFWV ) ) AS KANSW
                            FROM FAAV_ANEK AS ANEK
                              INNER JOIN FAAV_ANEP AS ANEP ON  ANEP.MANDT = ANEK.MANDT
                                                           AND ANEP.BUKRS = ANEK.BUKRS
                                                           AND ANEP.ANLN1 = ANEK.ANLN1
                                                           AND ANEP.ANLN2 = ANEK.ANLN2
                                                           AND ANEP.GJAHR = ANEK.GJAHR
                                                           AND ANEP.LNRAN = ANEK.LNRAN
                                                           AND ANEP.AFABE = '01'
                                                           AND ANEP.LNSAN <> ''
                              LEFT OUTER JOIN FAAV_ANEA AS ANEA ON  ANEA.BUKRS = ANEP.BUKRS
                                                                AND ANEA.ANLN1 = ANEP.ANLN1
                                                                AND ANEA.ANLN2 = ANEP.ANLN2
                                                                AND ANEA.GJAHR = ANEP.GJAHR
                                                                AND ANEA.AFABE = ANEP.AFABE
                                                                AND ANEA.LNRAN = ANEP.LNRAN
                                                                AND ANEA.ZUCOD = ANEP.ZUCOD
                                                                AND ANEA.MANDT = ANEP.MANDT
                            INNER JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                                                   AND TABW.BWASL = ANEP.BWASL
                            INNER JOIN TABWG AS TABWG ON TABWG.MANDT  = TABW.MANDT
                                                     AND TABWG.BWAGRP = TABW.BWAGRP
                                                     AND TABWG.GITCOL IN ( '2', '4' )
                          WHERE ANEK.MANDT = :LV_MANDT
                          GROUP BY ANEK.BUKRS,
                                   ANEK.ANLN1,
                                   ANEK.ANLN2,
                                   ANEK.BUDAT,
                                   ANEP.BELNR
                        ) AS VALS ON  VALS.BUKRS = ANLA.BUKRS
                                  AND VALS.ANLN1 = ANLA.ANLN1
                                  AND VALS.ANLN2 = ANLA.ANLN2
                                  AND VALS.BUDAT = ANLA.DEAKT

    WHERE ANLA.MANDT = :LV_MANDT
      AND ANLA.BUKRS = :IV_BUKRS
      AND ANLA.AKTIV <> '00000000'
      AND ANLA.AKTIV <= :LV_DATADD
      AND (ANLA.DEAKT >= :LV_DATADD OR ANLA.DEAKT = '00000000' )
      AND (ANLA.ZUGDT <= :LV_DATADD AND ANLA.ZUGDT <> '00000000' )
      AND J_3RFANKA.ANKA_TYPE = 'FIXEDASSET'
    ORDER BY ANLA.ANLN1, ANLA.ANLN2, ANLA.INVNR;


    LT_DATA  = APPLY_FILTER( :LT_DATA, :IV_FLT );

    IF IS_EMPTY ( :LT_DATA ) THEN
      RETURN;
    END IF;

    ET_DATA =
    SELECT
      ROW_NUMBER() OVER (PARTITION BY LT.MANDT) AS POSNR,
      INVNR,
      TXT50,
      PLANTNR,
      UTVDATE,
      DOCNUM,
      DOCDATE,
      GLO_OKOF,
      KOEF_KI,
      UMSROKGD,
      NDJAR,
      AFABG,
      AFASL,
      OTHER,
      KANSW,
      NAZNUSE,
      PRIZN_Y,
      PLACE,
      JUSTIFIC,
      CONCLUS,
      TDNAME
    FROM :LT_DATA AS LT;
  ENDMETHOD.


  METHOD READ_ANLN_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
                        USING ANLA J_3RFANKA DD07T T001 ANLZ.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT( 'CLIENT' );
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT( 'LOCALE_SAP' );
    DECLARE LV_NONUMB STRING := 'Б/Н';

    ET_ANLN =
      SELECT
          ANLA.BUKRS            AS BUKRS,
          ANLA.ANLN1            AS ANLN1,
          ANLA.ANLN2            AS ANLN2,
          ANLA.ANLKL            AS ANLKL,
          ANLA.INVNR            AS INVNR,
          J_3RFANKA.ANKA_TYPE   AS ANTYP,
          ''                    AS ONDATE,
          ANLA.ZUGDT            AS ZUGDT,
          ANLA.AKTIV            AS AKTIV,
          ANLA.DEAKT            AS DEAKT
        FROM ANLA AS ANLA
          LEFT JOIN J_3RFANKA AS J_3RFANKA ON J_3RFANKA.MANDT = ANLA.MANDT
                                          AND J_3RFANKA.ANLKL = ANLA.ANLKL
          LEFT JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
          LEFT JOIN ANLZ AS ANLZ ON ANLZ.MANDT = ANLA.MANDT
                                AND ANLZ.BUKRS = ANLA.BUKRS
                                AND ANLZ.ANLN1 = ANLA.ANLN1
                                AND ANLZ.ANLN2 = ANLA.ANLN2
       WHERE ANLA.MANDT = :LV_MANDT
         AND ANLA.BUKRS = :IV_BUKRS
         AND ANLA.ANLN1 = :IV_ANLN1
         AND ANLA.ANLN2 = :IV_ANLN2;

    LT_TYPES =
      SELECT
          DD07T.DOMVALUE_L  AS KEY,
          DD07T.DDTEXT      AS VALUE
        FROM DD07T AS DD07T
       WHERE DOMNAME = 'J_3RFANKATYPE'
         AND DDLANGUAGE = :LV_SPRAS
         AND AS4LOCAL = 'A';

    ET_TYPES = APPLY_FILTER ( :LT_TYPES, :IV_TYPEFLT );

  ENDMETHOD.
ENDCLASS.