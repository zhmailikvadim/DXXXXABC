CLASS ZCL_FI_STAT_1F_OS_AMDP DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB.
  TYPES:
    BEGIN OF GTY_S_SUM,
      KANSW        TYPE KANSW,      " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ НА НАЧАЛО ГОДА
      ST_POST      TYPE KANSW,      " ПОСТУПИЛО ЗА ГОД ВСЕГО
      ST_NEW_OS    TYPE KANSW,      " ИЗ НИХ ВВЕДЕНО НОВЫХ ОС
      ST_VIB       TYPE KANSW,      " ВЫБЫЛО ЗА ГОД ВСЕГО
      ST_SPISAN_OS TYPE KANSW,      " ИЗ НИХ ЛИКВИДИРОВАНО, СПИСАНО
      KANSW_END    TYPE KANSW,      " ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
      OST_ST_END   TYPE KANSW,      " ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
      AMORT        TYPE KANSW,      " СУММА АМОРТИЗАЦИИ НАЧИСЛЕННОЙ ЗА ГОД
      PS_BEZ_PERZ  TYPE KANSW,      " СТОИМОСТЬ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ НА КОНЕЦ ГОДА - ПЕРВОНОЧАЛЬНАЯ СТОИМОСТЬ
      OST_BEZ_PERZ TYPE KANSW,      " СТОИМОСТЬ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ НА КОНЕЦ ГОДА - ОСТАТОЧНАЯ СТОИМОСТЬ
    END OF GTY_S_SUM,

    BEGIN OF GTY_S_OKOF,
      STR_CODE     TYPE ZSTR_CODE.
      INCLUDE TYPE GTY_S_SUM.
      TYPES:
    END OF GTY_S_OKOF,
    GTY_T_OKOF TYPE STANDARD TABLE OF GTY_S_OKOF WITH EMPTY KEY,

    BEGIN OF GTY_S_OKED,
      STR_NUM     TYPE ZSTR_NUM.
      INCLUDE TYPE GTY_S_SUM.
      TYPES:
    END OF GTY_S_OKED,
    GTY_T_OKED TYPE STANDARD TABLE OF GTY_S_OKED WITH EMPTY KEY,

    BEGIN OF GTY_S_DATA,
      BUKRS        TYPE BUKRS,
      ANLN1        TYPE ANLN1,      " СИСТЕМНЫЙ НОМЕР
      ANLN2        TYPE ANLN2,      " CУБНОМЕР
      AKTIV        TYPE ANLA-AKTIV,
      DEAKT        TYPE ANLA-DEAKT,
      INVNR        TYPE INVNR,      " ИНВЕНТАРНЫЙ НОМЕР
      KTANSW       TYPE KTANSW,
      OCED         TYPE ZANLU-OCED,
      STR_NUM      TYPE ZSTR_NUM,
      GLO_RUS_OKOF TYPE GLOFAAASSETDATA-GLO_RUS_OKOF,
      STR_CODE     TYPE ZSTR_CODE.
      INCLUDE TYPE GTY_S_SUM.
      TYPES:
      WAERS        TYPE T001-WAERS,
    END OF GTY_S_DATA,
    GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA WITH EMPTY KEY,

    LR_BWASL_BT TYPE RANGE OF BWASL,
    BEGIN OF GTY_S_RAZD,
      STR_300   TYPE fins_vtcur12,  "KTANSW,
      STR_301   TYPE fins_vtcur12,  "KTANSW,
      STR_302   TYPE fins_vtcur12,  "KTANSW,
      STR_303   TYPE fins_vtcur12,  "KTANSW,
      STR_400   TYPE fins_vtcur12,  "KTANSW,
      STR_410   TYPE fins_vtcur12,             " #15472
      STR_411   TYPE fins_vtcur12, "KTANSW,
      STR_412   TYPE fins_vtcur12, "KTANSW,
      STR_400_2 TYPE fins_vtcur12, "KTANSW,
      STR_410_2 TYPE fins_vtcur12,             " #15472
      STR_411_2 TYPE fins_vtcur12, "KTANSW,
      STR_412_2 TYPE fins_vtcur12, "KTANSW,
    END OF GTY_S_RAZD,
    GTY_T_RAZD TYPE STANDARD TABLE OF GTY_S_RAZD WITH EMPTY KEY,

    BEGIN OF GTY_S_AMORT_8,
      BUKRS   TYPE BUKRS,
      ANLN1   TYPE ANLN1,
      ANLN2   TYPE ANLN2,
      AM_CURR TYPE KANSW,
    END OF GTY_S_AMORT_8,
    GTY_T_AMORT_8 TYPE STANDARD TABLE OF GTY_S_AMORT_8,

    BEGIN OF GTY_S_STR,
      BUKRS    TYPE BUKRS,
      ANLN1    TYPE ANLN1,
      ANLN2    TYPE ANLN2,
      STR_301  TYPE KANSW,
      AM_CURR8 TYPE KANSW,
    END OF GTY_S_STR,
    GTY_T_STR TYPE STANDARD TABLE OF GTY_S_STR,

    BEGIN OF GTY_S_MOVES,
      BUKRS   TYPE BUKRS,
      ANLN1   TYPE ANLN1,
      ANLN2   TYPE ANLN2,
    END OF GTY_S_MOVES.

  CLASS-METHODS:
      GET_DATA
        IMPORTING VALUE(IV_GJAHR)     TYPE GJAHR
                  VALUE(IR_BWASL_BT)  TYPE LR_BWASL_BT
                  VALUE(IR_BWASL_IN)  TYPE LR_BWASL_BT
                  VALUE(IV_FLT)       TYPE STRING
                  VALUE(IV_FLT_LIZ)   TYPE STRING
        EXPORTING VALUE(ET_DATA)      TYPE GTY_T_DATA
                  VALUE(ET_DATA_OKED) TYPE GTY_T_DATA
                  VALUE(ET_OKOF)      TYPE GTY_T_OKOF
                  VALUE(ET_OKED)      TYPE GTY_T_OKED
                  VALUE(ET_RAZD)      TYPE GTY_T_RAZD
        RAISING   CX_AMDP_ERROR,

        GET_DATA_NEW
        IMPORTING VALUE(IV_GJAHR)     TYPE GJAHR
                  VALUE(IR_BWASL_BT)  TYPE LR_BWASL_BT
                  VALUE(IR_BWASL_IN)  TYPE LR_BWASL_BT
                  VALUE(IV_FLT)       TYPE STRING
                  VALUE(IV_FLT_LIZ)   TYPE STRING
        EXPORTING VALUE(ET_DATA)      TYPE GTY_T_DATA
                  VALUE(ET_DATA_OKED) TYPE GTY_T_DATA
                  VALUE(ET_OKOF)      TYPE GTY_T_OKOF
                  VALUE(ET_OKED)      TYPE GTY_T_OKED
                  VALUE(ET_RAZD)      TYPE GTY_T_RAZD
                  VALUE(ET_AMORT)     TYPE GTY_T_AMORT_8
                  VALUE(LT_AMORT_301) TYPE GTY_T_AMORT_8
                  VALUE(ET_STR)       TYPE GTY_T_STR
        RAISING   CX_AMDP_ERROR.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_FI_STAT_1F_OS_AMDP IMPLEMENTATION.


METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                USING ANLA T001 ZANLU GLOFAAASSETDATA ZAA_V0_MOVE T095 FAAV_ANLC FAAV_ANLP BUT000
                      ZFI_OKED_1F J_3RAOKOF TABW TABWG TVARVC ZAA_UTILS_HDB=>GET_ASSET_SPI. --FAAV_ANEP FAAV_ANEA

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_SDATE CHAR(8) := :IV_GJAHR || '0101';
    DECLARE LV_EDATE CHAR(8) := :IV_GJAHR || '1231'; -- ДАТА ОКОНЧАНИЯ ОТЧЕТА
    DECLARE LV_END_DATE CHAR(8) := TO_DATS(ADD_DAYS(LAST_DAY( :IV_GJAHR || '1231' ) ,1));
    DECLARE LV_KTANSW CHAR(200);

    LT_DATA =
      SELECT DISTINCT
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.AKTIV,
        ANLA.DEAKT,
        ANLA.ORD41,     -- #15472
        ZANLU.INVNR,
        T095.KTANSW,
        ZANLU.OCED,                                                                             -- КОД ОКЕД
        ' ' AS STR_NUM,
        GLO.GLO_RUS_OKOF,                                                                       -- КОД ОКОФ
        J_3.STR_CODE,
        ZANLU.BU_PARTNER,
        BUT.TYPE,
        ANLC.KANSW + ANLC.KAUFW AS KANSW,                                                       -- ПС НА НАЧАЛО ГОДА
        ANLC.KNAFA + ANLC.KAAFA + ANLC.KAUFN AS DEPR,                                           -- ИЗНОС НА НАЧАЛО ГОДА
        T001.WAERS
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                     -- СЧЕТА ЗАПАСА КЛАССА ОС
                                AND T095.KTOPL = T001.KTOPL
                                AND T095.KTOGR = ANLA.KTOGR
                                AND T095.AFABE = '01'
        LEFT JOIN FAAV_ANLC AS ANLC ON  ANLC.MANDT = ANLA.MANDT                                 -- ПC ЧИСЛЯЩИХСЯ НА НАЧАЛО ОТЧЕТНОГО ГОДА
                                    AND ANLC.BUKRS = ANLA.BUKRS
                                    AND ANLC.ANLN1 = ANLA.ANLN1
                                    AND ANLC.ANLN2 = ANLA.ANLN2
                                    AND ANLC.AFABE = '01'
                                    AND ANLC.GJAHR = YEAR ( :LV_SDATE )
        INNER JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                                  AND ZANLU.INVNR = ANLA.INVNR
        LEFT OUTER JOIN BUT000 AS BUT ON  BUT.CLIENT = ZANLU.MANDT
                                      AND BUT.PARTNER = ZANLU.BU_PARTNER
        INNER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                          AND ANLA.BUKRS = GLO.BUKRS
                                          AND ANLA.ANLN1 = GLO.ANLN1
                                          AND ANLA.ANLN2 = GLO.ANLN2
        LEFT OUTER JOIN J_3RAOKOF AS J_3 ON  J_3.MANDT = GLO.MANDT
                                         AND J_3.OKOF  = GLO.GLO_RUS_OKOF
      WHERE ANLA.MANDT = :LV_MANDT
        AND ( ANLA.DEAKT >= :LV_SDATE OR ANLA.DEAKT = '00000000' );

     LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

     -- ПЕРЕЧИСЛЕНИЕ СЧЕТОВ В ЛИЗИНГЕ
     LT_T095 =
       SELECT DISTINCT KTANSW
         FROM T095
        WHERE AFABE = '01';
     LT_T095 = APPLY_FILTER (:LT_T095, :IV_FLT_LIZ);

    SELECT STRING_AGG(KTANSW,',') INTO LV_KTANSW
      FROM :LT_T095;

  -- АМОРТИЗАЦИЯ ЗА ГОД БЕЗ УЧЕТА ПЕРЕОЦЕНКИ
  LT_AMORT =
    SELECT ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2, SUM(ANLP.NAFAZ + ANLP.SAFAZ ) AS AM_CURR --+ ANLP.AAFAZ
      FROM FAAV_ANLP AS ANLP
        INNER JOIN :LT_DATA AS DATA ON ANLP.BUKRS = DATA.BUKRS
                                   AND ANLP.ANLN1 = DATA.ANLN1
                                   AND ANLP.ANLN2 = DATA.ANLN2
     WHERE MANDT = :LV_MANDT
       AND AFABER = '01'
       AND GJAHR = :IV_GJAHR
     GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2;

   --  28.01.2020 # 15472 сумма амортизации за год ( графа 8 ) только по ОС, которые есть на начало года, следующего за годом отчета
   LT_AMORT_8 =
    SELECT ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2, SUM(ANLP.NAFAZ + ANLP.SAFAZ ) AS AM_CURR --+ ANLP.AAFAZ
      FROM FAAV_ANLP AS ANLP
        INNER JOIN :LT_DATA AS DATA ON ANLP.BUKRS = DATA.BUKRS
                                   AND ANLP.ANLN1 = DATA.ANLN1
                                   AND ANLP.ANLN2 = DATA.ANLN2
     WHERE MANDT = :LV_MANDT
       AND AFABER = '01'
       AND GJAHR = :IV_GJAHR
       AND ( DEAKT > :LV_END_DATE OR DEAKT = '00000000' )
     GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2;
   -- 28.01.2020 #15472

     LT_MOVS =
       SELECT
          DATA.BUKRS,
          DATA.ANLN1,
          DATA.ANLN2,
          MOVS.KANSW AS M_KANSW,                                                                               -- СУММА ДВИЖЕН. СТОИМОСТ.
          MOVS.DEPRE AS M_DEPR,                                                                                -- СУММА ДВИЖЕН. ИЗНОСА
          MOVS.BWASL AS BWASL,
          -- 28.01.2020 begin of #15472
*          CASE WHEN ( TABWG.BWATYP = 6 ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.KANSW END AS M_KANSW_R, -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
*          CASE WHEN ( TABWG.BWATYP = 6 ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.DEPRE END AS M_DEPR_R,  -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
          CASE WHEN ( DOOCENKA.LOW IS NOT NULL OR UCENKA.LOW IS NOT NULL ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.KANSW END AS M_KANSW_R, -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
          CASE WHEN ( DOOCENKA.LOW IS NOT NULL OR UCENKA.LOW IS NOT NULL ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.DEPRE END AS M_DEPR_R,  -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
          -- ДООЦЕНКА
          CASE WHEN DOOCENKA.LOW IS NOT NULL THEN MOVS.KANSW END AS M_KANSW_R_UP,
          -- УЦЕНКА
          CASE WHEN UCENKA.LOW IS NOT NULL THEN MOVS.KANSW END AS M_KANSW_R_DN,
          -- ВНЕПЛ АМОРТИЗАЦИЯ
          CASE WHEN AMORTIZ.LOW IS NOT NULL THEN MOVS.KANSW END AS VN_DEPR,
          -- end of #15472

          -- ПОСТУПИЛО ЗА ГОД ВСЕГО
*          CASE WHEN TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) THEN MOVS.KANSW ELSE 0 END AS ST_POST,    --- #15472
           CASE WHEN ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) )                                       --- #15472
                 AND UCENKA.LOW IS NULL THEN MOVS.KANSW ELSE 0 END AS ST_POST,                                                                       --- #15472
          -- ИЗ НИХ ВВЕДЕНО НОВЫХ ОСНОВНЫХ СРЕДСТВ
          CASE WHEN ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) )
                AND DATA.KTANSW NOT IN ( :LV_KTANSW ) AND YEAR ( DATA.AKTIV ) = YEAR ( :LV_SDATE ) -- AND MOVS.BUDAT = DATA.AKTIV
                AND ( UCENKA.LOW IS NULL AND DOOCENKA.LOW IS NULL )                                                                                  --- #15472
                AND NEW_OS.LOW IS NOT NULL                                                                                                           --- #15472
                AND ( DATA.ORD41 = '05' OR DATA.ORD41 = '25' OR DATA.ORD41 = '30' OR DATA.ORD41 = '55' )                                             --- #15472
               THEN MOVS.KANSW ELSE 0 END AS ST_NEW_OS,

          -- ВЫБЫЛО ЗА ГОД ВСЕГО
*          CASE WHEN TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) THEN COALESCE( ABS( MOVS.KANSW ), 0 ) ELSE 0 END AS ST_VIB, --ГРАФА 4  @15472
          CASE WHEN TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) THEN COALESCE( MOVS.KANSW, 0 ) ELSE 0 END AS ST_VIB, --ГРАФА 4  @15472
          -- ИЗ НИХ ЛИКВИДИРОВАНО, СПИСАНО
          CASE WHEN ( TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) )
                AND SPISANIE.LOW IS NOT NULL                                                                  -- #15472 AND YEAR ( DATA.DEAKT ) = YEAR ( :LV_SDATE )
*               THEN COALESCE( ABS( MOVS.KANSW ), 0 ) ELSE 0 END AS ST_SPISAN_OS,                                                                  --- #15472
                THEN COALESCE( MOVS.KANSW, 0 ) ELSE 0 END AS ST_SPISAN_OS,                                                                         --- #15472

          CASE WHEN ( TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) ) -- СТОИМОСТЬ ЖИЛЫХ ПОМЕЩЕНИЙ, ПРОДАННЫХ ГРАЖДАНАМ
                AND DATA.TYPE = 1 AND PROD.LOW IS NOT NULL
               THEN MOVS.KANSW ELSE 0 END AS STR_300,

         CASE WHEN ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) ) -- СУММА АМОРТИЗАЦИИ ПОСТУПИВШИХ ЗА ГОД
                AND YEAR ( MOVS.BUDAT ) = YEAR ( :LV_SDATE )
                AND ( UCENKA.LOW IS NULL AND DOOCENKA.LOW IS NULL )                                                                                 --- #15472
                AND DATA.KTANSW NOT IN ( :LV_KTANSW ) AND YEAR ( DATA.AKTIV ) = YEAR ( :LV_SDATE )                                                  --- #15472
               THEN COALESCE( ABS(AM_CURR ), 0 ) ELSE 0 END AS STR_301,                                                                            --- #15472
*                THEN COALESCE( AM_CURR, 0 ) ELSE 0 END AS STR_301,                                                                                  --- #15472

          CASE WHEN ( TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) ) -- СУММА АМОРТИЗАЦИИ ВЫБЫВШИХ ЗА ГОД
*                AND YEAR ( DATA.DEAKT ) = YEAR ( :LV_SDATE )                                                                                       --- #15472
*               THEN COALESCE( ABS(AM_CURR ), 0 ) ELSE 0 END AS STR_302,                                                                            --- #15472
                THEN COALESCE( MOVS.DEPRE, 0 ) ELSE 0 END AS STR_302,                                                                               --- #15472

          CASE WHEN ( TABWG.GITCOL IN ( '2', '4') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'H' ) ) -- СУММА АМОРТИЗАЦИИ ПО СПИСАННЫМ ОС
                AND SPISANIE.LOW IS NOT NULL                                                                  -- #15472 AND YEAR ( DATA.DEAKT ) = YEAR ( :LV_SDATE )
*               THEN COALESCE( ABS(AM_CURR ), 0 ) ELSE 0 END AS STR_303,                                                                            ---#15472
                THEN COALESCE( MOVS.DEPRE, 0 ) ELSE 0 END AS STR_303,                                                                               ---#15472

          CASE WHEN MODERNIZ.LOW IS NOT NULL AND ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) )
*               THEN COALESCE( ABS( MOVS.KANSW ),0) ELSE 0 END AS STR_400,                                                                          --- #15472
               THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_400,                                                                                  --- #15472
*          CASE WHEN DATA.STR_CODE = '050' AND MODERNIZ.LOW IS NOT NULL                        --- #15472
          CASE WHEN ( DATA.STR_CODE = '050' OR DATA.STR_CODE = '051' OR DATA.STR_CODE = '052' ) AND MODERNIZ.LOW IS NOT NULL                        --- #15472
                AND ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) )
*               THEN COALESCE( ABS( MOVS.KANSW ),0) ELSE 0 END AS STR_411,                                                                          --- #15472
                THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_411,                                                                                 --- #15472

          CASE WHEN DATA.STR_CODE = '060' AND MODERNIZ.LOW IS NOT NULL
                AND ( TABWG.GITCOL IN ( '1', '3') OR ( LEFT ( TABW.BWAGRP, 1) = '8' AND TABW.ANSHKZ = 'S' ) )
*               THEN COALESCE( ABS( MOVS.KANSW ),0) ELSE 0 END AS STR_412                                                                           --- #15472
                THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_412

        FROM :LT_DATA AS DATA
          INNER JOIN ZAA_V0_MOVE AS MOVS ON  MOVS.MANDT = :LV_MANDT                                -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                         AND MOVS.BUKRS = DATA.BUKRS
                                         AND MOVS.ANLN1 = DATA.ANLN1
                                         AND MOVS.ANLN2 = DATA.ANLN2
                                         AND MOVS.GJAHR = :IV_GJAHR
                                         AND MOVS.AFABE = '01'
  --                                       AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND MONTH( :LV_EDATE )                                          --- #15472
                                         AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND '13'                                                          --- #15472
          INNER JOIN TABW AS TABW ON  TABW.MANDT = :LV_MANDT
                                  AND TABW.BWASL = MOVS.BWASL
          INNER JOIN TABWG AS TABWG ON  TABWG.MANDT  = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP
                                    AND TABWG.GITCOL IN ( '1', '3', '2', '4' )

          LEFT JOIN :IR_BWASL_BT AS LT_BT ON MOVS.BWASL = LT_BT.LOW                                -- ИСКЛЮЧАЮТСЯ ОБОРОТЫ МЕЖДУ БЕ
          LEFT JOIN :IR_BWASL_IN AS LT_IN ON MOVS.BWASL = LT_IN.LOW                                -- ИСКЛЮЧАЮТСЯ ОБОРОТЫ ВНУТРИ БЕ

          LEFT JOIN TVARVC AS SPISANIE ON  SPISANIE.MANDT = :LV_MANDT
                                       AND SPISANIE.TYPE  = 'S'
                                       AND SPISANIE.NAME  = 'ZFI_BWASL_SPIS_1FOS'                  -- #15472 'ZAA_BWASL_SPISANIE'
                                       AND SPISANIE.LOW   = MOVS.BWASL
          --У КОТОРЫХ ВИД ДВИЖЕНИЯ ВЫБЫТИЯ «ПРОДАЖА»
          LEFT JOIN TVARVC AS PROD ON  PROD.MANDT = :LV_MANDT
                                   AND PROD.TYPE  = 'S'
                                   AND PROD.NAME  = 'ZAA_BWASL_PRODAJA'
                                   AND PROD.LOW   = MOVS.BWASL
          LEFT JOIN TVARVC AS MODERNIZ ON  MODERNIZ.MANDT = :LV_MANDT
                                       AND MODERNIZ.TYPE  = 'S'
                                       AND MODERNIZ.NAME  = 'ZAA_BWASL_MODERNIZ'
                                       AND MODERNIZ.LOW   = MOVS.BWASL
          -- №15472 ДВИЖЕНИЯ ДООЦЕНКИ
          LEFT JOIN TVARVC AS DOOCENKA ON  DOOCENKA.MANDT  = :LV_MANDT
                                       AND DOOCENKA.TYPE   = 'P'
                                       AND DOOCENKA.LOW    = MOVS.BWASL
                                       AND ( DOOCENKA.NAME = 'ZFI_REVAS_BW_83_UP' OR DOOCENKA.NAME = 'ZFI_REVAS_BW_91_UP' OR
                                             DOOCENKA.NAME = 'ZFI_REVAS_BW_83_UP_ADD' OR DOOCENKA.NAME  = 'ZFI_REVAS_BW_91_UP_ADD' )
          -- ДВИЖЕНИЯ УЦЕНКИ
          LEFT JOIN TVARVC AS UCENKA   ON  UCENKA.MANDT  = :LV_MANDT
                                       AND UCENKA.TYPE   = 'P'
                                       AND UCENKA.LOW    = MOVS.BWASL
                                       AND ( UCENKA.NAME = 'ZFI_REVAS_BW_83_DN' OR UCENKA.NAME = 'ZFI_REVAS_BW_91_DN' OR
                                             UCENKA.NAME = 'ZFI_REVAS_BW_83_DN_ADD' OR UCENKA.NAME  = 'ZFI_REVAS_BW_91_DN_ADD' )
          -- ДВИЖЕНИЯ ДЛЯ НОВЫХ ОСОВ
          LEFT JOIN TVARVC AS NEW_OS   ON  NEW_OS.MANDT  = :LV_MANDT
                                       AND NEW_OS.TYPE   = 'S'
                                       AND NEW_OS.LOW    = MOVS.BWASL
                                       AND NEW_OS.NAME = 'ZAA_BWASL_VVOD_1FOS'
          -- ВНЕПЛАНОВАЯ АМОРТИЗАЦИЯ
          LEFT JOIN TVARVC AS AMORTIZ   ON AMORTIZ.MANDT  = :LV_MANDT
                                       AND AMORTIZ.LOW    = MOVS.BWASL
                                       AND AMORTIZ.NAME   = 'ZAA_BWASL_VNEPL_1FOS'

          -- end of #15472

         LEFT OUTER JOIN :LT_AMORT AS AMORT ON AMORT.BUKRS = DATA.BUKRS                            -- АМОРТИЗАЦИЯ ЗА ГОД
                                           AND AMORT.ANLN1 = DATA.ANLN1
                                           AND AMORT.ANLN2 = DATA.ANLN2
        WHERE LT_BT.LOW IS NULL
          AND LT_IN.LOW IS NULL;

   --АМОРТИЗАЦИЯ ПО ПОСТУПИВШИМ, ВЫБЫВШИМ И СПИСАННЫМ ЗА ГОД
   LT_STR =
     SELECT MOVS.BUKRS,
            MOVS.ANLN1,
            MOVS.ANLN2,
            SUM (MOVS.STR_301) AS STR_301
            --- begin of #15472
*            SUM (MOVS.STR_302) AS STR_302,
*            SUM (MOVS.STR_303) AS STR_303
            --- end of #15472
       FROM ( SELECT DISTINCT
                MOVS.BUKRS,
                MOVS.ANLN1,
                MOVS.ANLN2,
                MOVS.STR_301
*                MOVS.STR_302,
*                MOVS.STR_303
              FROM :LT_MOVS AS MOVS ) AS MOVS
      GROUP BY MOVS.BUKRS,MOVS.ANLN1, MOVS.ANLN2;

  LT_MOVS =
     SELECT
       MOVS.BUKRS,
       MOVS.ANLN1,
       MOVS.ANLN2,
       MOVS.M_KANSW,                                       -- СУММА ДВИЖЕН. СТОИМОСТ.
       MOVS.M_DEPR,                                        -- СУММА ДВИЖЕН. ИЗНОСА
       '' as BWASL,
       MOVS.M_KANSW_R,                                     -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
       MOVS.M_DEPR_R,                                      -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
       MOVS.M_KANSW_R_UP,                                  -- #15472 СУММА ДВИЖЕНИЙ ДООЦЕНКИ
       MOVS.M_KANSW_R_DN,                                  -- #15472 СУММА ДВИЖЕНИЙ УЦЕНКИ
       MOVS.VN_DEPR,                                       -- #15472
       MOVS.ST_POST,
       MOVS.ST_NEW_OS,
*       MOVS.ST_VIB,                                       -- #15472
*       MOVS.ST_SPISAN_OS,                                 -- #15472
       ABS( MOVS.ST_VIB ) AS ST_VIB,                       -- #15472
       ABS( MOVS.ST_SPISAN_OS ) AS ST_SPISAN_OS,           -- #15472
       MOVS.STR_300,
       STR.STR_301,
*       STR.STR_302,                                       -- #15472
*       STR.STR_303,                                       -- #15472
*       MOVS.STR_400,                                      -- #15472
*       MOVS.STR_411,                                      -- #15472
*       MOVS.STR_412                                       -- #15472
       ABS( MOVS.STR_302 ) AS STR_302,                     -- #15472
       ABS( MOVS.STR_303 ) AS STR_303,                     -- #15472
       ABS( MOVS.STR_400 ) AS STR_400,                     -- #15472
       ABS( MOVS.STR_411 ) AS STR_411,                     -- #15472
       ABS( MOVS.STR_412 ) AS STR_412                      -- #15472
            FROM ( SELECT MOVS.BUKRS,
                     MOVS.ANLN1,
                     MOVS.ANLN2,
                     SUM( MOVS.M_KANSW) AS M_KANSW,                                        -- СУММА ДВИЖЕН. СТОИМОСТ.
                     SUM( MOVS.M_DEPR) AS M_DEPR,                                          -- СУММА ДВИЖЕН. ИЗНОСА
                     SUM( MOVS.M_KANSW_R) AS M_KANSW_R,                                    -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
                     SUM( MOVS.M_DEPR_R) AS M_DEPR_R,                                      -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
                     SUM( MOVS.M_KANSW_R_UP) AS M_KANSW_R_UP,                              -- #15472 СУММА ДВИЖЕНИЙ ДООЦЕНКИ
                     SUM( MOVS.M_KANSW_R_DN) AS M_KANSW_R_DN,                              -- #15472 СУММА ДВИЖЕНИЙ УЦЕНКИ
                     SUM( MOVS.VN_DEPR ) AS VN_DEPR,
                     SUM( MOVS.ST_POST ) AS ST_POST,
                     SUM( MOVS.ST_NEW_OS ) AS ST_NEW_OS,
                     SUM( MOVS.ST_VIB ) AS ST_VIB,
                     SUM( MOVS.ST_SPISAN_OS ) AS ST_SPISAN_OS,
                     SUM( MOVS.STR_300 ) AS STR_300,
                     0 AS STR_301,
*                     0 AS STR_302,                                                        -- #15472
*                     0 AS STR_303,                                                        -- #15472
                     SUM( MOVS.STR_302 ) AS STR_302,
                     SUM( MOVS.STR_303 ) AS STR_303,
                     SUM( MOVS.STR_400 ) AS STR_400,
                     SUM( MOVS.STR_411 ) AS STR_411,
                     SUM( MOVS.STR_412 ) AS STR_412
                FROM :LT_MOVS AS MOVS
               GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2) AS MOVS
         INNER JOIN :LT_STR AS STR ON  STR.BUKRS = MOVS.BUKRS
                                   AND STR.ANLN1 = MOVS.ANLN1
                                   AND STR.ANLN2 = MOVS.ANLN2;

  ET_DATA =
     SELECT DISTINCT
        DATA.BUKRS,
        DATA.ANLN1,
        DATA.ANLN2,
        DATA.AKTIV,
        DATA.DEAKT,
        DATA.INVNR,
        DATA.KTANSW,
        DATA.OCED,
        DATA.STR_NUM,
        DATA.GLO_RUS_OKOF,
        DATA.STR_CODE,
        DATA.KANSW,                                                                                            -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ НА НАЧАЛО ГОДА
        MOVS.ST_POST,                                                                                          -- ПОСТУПИЛО ЗА ГОД ВСЕГО
        MOVS.ST_NEW_OS,
*        MOVS.ST_VIB,                                                                                           -- ВЫБЫЛО ЗА ГОД ВСЕГО #15472
        MOVS.ST_VIB + COALESCE( ABS( M_KANSW_R_DN ), 0 ) AS ST_VIB,                                             -- ВЫБЫЛО ЗА ГОД ВСЕГО #15472
        MOVS.ST_SPISAN_OS,

    -- 28.01.2020 begin of #15472
*        DATA.KANSW + COALESCE( M_KANSW, 0 ) AS KANSW_END,                                                      -- ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
*        COALESCE( DATA.KANSW, 0 ) + COALESCE( DATA.DEPR, 0 ) + COALESCE( M_KANSW, 0 ) + COALESCE( M_DEPR, 0 ) + COALESCE( AMORT.AM_CURR, 0 ) AS OST_ST_END, -- ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
*        AMORT.AM_CURR AS AMORT,                                                                                -- АМОРТИЗАЦИЯ ЗА ГОД    28.01.2020 #15472
        CASE WHEN DEAKT > :LV_END_DATE OR DEAKT = '00000000' THEN DATA.KANSW + COALESCE( M_KANSW, 0 )
                                                             ELSE 0 END AS KANSW_END,                          -- ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
        CASE WHEN DEAKT > :LV_END_DATE OR DEAKT = '00000000'
             THEN COALESCE( DATA.KANSW, 0 ) + COALESCE( DATA.DEPR, 0 ) + COALESCE( M_KANSW, 0 ) + COALESCE( M_DEPR, 0 ) + COALESCE( AMORT.AM_CURR, 0 )
             ELSE 0 END        AS OST_ST_END,                                                                  -- ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
        COALESCE( AMORT_8.AM_CURR, 0 ) AS AMORT,                                                                              -- 28.01.2020 #15472
    -- 28.01.2020 end of #15472

        --AMORT.AM_CURR - M_DEPR_R AS AMORT,                                                                   -- АМОРТИЗАЦИЯ БЕЗ ПЕРЕОЦЕНКИ ГРАФА 8
        DATA.KANSW + COALESCE(M_KANSW,0) - COALESCE(M_KANSW_R,0) AS PS_BEZ_PERZ,                               -- ПЕРВ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
        COALESCE(DATA.KANSW, 0 ) + COALESCE(DATA.DEPR, 0 ) + COALESCE(M_KANSW,0) + COALESCE(M_DEPR,0) + COALESCE( AMORT.AM_CURR, 0 ) - COALESCE(M_KANSW_R,0) - COALESCE(M_DEPR_R,0) AS OST_BEZ_PERZ,  -- ОСТАТ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
        --CASE WHEN MOVS.ANSHKZ = 'H' THEN AMORT.AM_CURR ELSE 0 END AS AMORT_POST,                             -- АМОРТИЗАЦИЯ ПО ПОСТУПАЮЩИМ
        DATA.WAERS
       FROM :LT_DATA AS DATA
         LEFT OUTER JOIN :LT_MOVS AS MOVS ON MOVS.BUKRS = DATA.BUKRS
                                         AND MOVS.ANLN1 = DATA.ANLN1
                                         AND MOVS.ANLN2 = DATA.ANLN2
         LEFT OUTER JOIN :LT_AMORT AS AMORT ON AMORT.BUKRS = DATA.BUKRS                                        -- АМОРТИЗАЦИЯ ЗА ГОД
                                           AND AMORT.ANLN1 = DATA.ANLN1
                                           AND AMORT.ANLN2 = DATA.ANLN2
         LEFT OUTER JOIN :LT_AMORT_8 AS AMORT_8 ON AMORT_8.BUKRS = DATA.BUKRS                                   -- 28.01.2020 #15472
                                               AND AMORT_8.ANLN1 = DATA.ANLN1
                                               AND AMORT_8.ANLN2 = DATA.ANLN2;                                  -- #15472

-------------------------------------------------------------------------------------
lt_spi = select data.bukrs as bukrs,
                data.anln1 as anln1,
                DATA.STR_CODE as str_code,
                data.deakt as deakt,
                DATA.OST_ST_END as ost_st_end,
                DATA.KANSW_END as kansw_end,
                SPI.RESTP as restp,
                SPI.RESTJ as restj
                FROM :ET_DATA AS DATA
         LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI" ( :LV_MANDT, :LV_EDATE ) AS SPI ON  SPI.BUKRS = DATA.BUKRS
                            AND SPI.ANLN1 = DATA.ANLN1
                            AND SPI.ANLN2 = DATA.ANLN2
                            AND SPI.AFABE = '01';
-------------------------------------------------------------------------------------

 -- ОБНОВЛЕНИЕ И ИСПОЛЬЗОВАНИЕ ОСНОВНЫХ СРЕДСТВ - ТАБЛИЦА 4
   LT_IST_ST =
     SELECT DATA.BUKRS,
            DATA.ANLN1,
            DATA.ANLN2,
            DATA.AKTIV,
            DATA.DEAKT,
            DATA.INVNR,
            DATA.KTANSW,
            DATA.OCED,
            DATA.STR_NUM,
            DATA.GLO_RUS_OKOF,
            DATA.STR_CODE,
            DATA.KANSW,                                                                              -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ НА НАЧАЛО ГОДА
            DATA.ST_POST,                                                                            -- ПОСТУПИЛО ЗА ГОД ВСЕГО
            DATA.ST_NEW_OS,
            DATA.ST_VIB,                                                                             -- ВЫБЫЛО ЗА ГОД ВСЕГО
            DATA.ST_SPISAN_OS,
            DATA.KANSW_END,                                                                          -- ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
            DATA.OST_ST_END,                                                                         -- ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
            DATA.AMORT,
            DATA.PS_BEZ_PERZ,                                                                        -- ПЕРВ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
            DATA.OST_BEZ_PERZ,                                                                       -- ОСТАТ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
            DATA.WAERS,
            CASE WHEN DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_400_2,
*            CASE WHEN DATA.STR_CODE = '050' AND DATA.OST_ST_END = 0 AND                             -- #15472
            CASE WHEN ( DATA.STR_CODE = '050' OR                                                     -- #15472
                        DATA.STR_CODE = '051' OR                                                     -- #15472
                        DATA.STR_CODE = '052' ) AND                                                  -- #15472
                      DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_411_2, -- СУММА ВОССТ. ПЕРЕОЦЕНЕННОЙ СТОИМ. С СПИ
            CASE WHEN DATA.STR_CODE = '060' AND DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_412_2
       FROM :ET_DATA AS DATA
         LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI" ( :LV_MANDT, :LV_EDATE ) AS SPI ON  SPI.BUKRS = DATA.BUKRS
                            AND SPI.ANLN1 = DATA.ANLN1
                            AND SPI.ANLN2 = DATA.ANLN2
                            AND SPI.AFABE = '01';
  ET_RAZD =
     SELECT SUM( MOVS.STR_300 ) AS STR_300,
            SUM( MOVS.STR_301 ) AS STR_301,
            SUM( MOVS.STR_302 ) AS STR_302,
            SUM( MOVS.STR_303 ) AS STR_303,
            SUM( MOVS.STR_400 ) AS STR_400,
            SUM( MOVS.STR_411 ) + SUM( MOVS.STR_412 ) AS STR_410,                   --- #15472
            SUM( MOVS.STR_411 ) AS STR_411,
            SUM( MOVS.STR_412 ) AS STR_412,
            ( SELECT SUM (IST.STR_400_2) FROM :LT_IST_ST AS IST ) AS STR_400_2,
            ( SELECT SUM (IST.STR_411_2) + SUM (IST.STR_412_2) FROM :LT_IST_ST AS IST ) AS STR_410_2,
            ( SELECT SUM (IST.STR_411_2) FROM :LT_IST_ST AS IST ) AS STR_411_2,
            ( SELECT SUM (IST.STR_412_2) FROM :LT_IST_ST AS IST ) AS STR_412_2
       FROM :LT_MOVS AS MOVS ;

  ET_OKOF =
    SELECT DATA.STR_CODE,
           SUM( DATA.KANSW )        AS KANSW,
           SUM( DATA.ST_POST )      AS ST_POST,
           SUM( DATA.ST_NEW_OS )    AS ST_NEW_OS,
           SUM( DATA.ST_VIB )       AS ST_VIB,
           SUM( DATA.ST_SPISAN_OS ) AS ST_SPISAN_OS,
           SUM( DATA.KANSW_END )    AS KANSW_END,
           SUM( DATA.OST_ST_END )   AS OST_ST_END,
           ABS( SUM( DATA.AMORT ) ) AS AMORT,
           SUM( DATA.PS_BEZ_PERZ )  AS PS_BEZ_PERZ,
           SUM( DATA.OST_BEZ_PERZ ) AS OST_BEZ_PERZ
      FROM :ET_DATA AS DATA
     GROUP BY DATA.STR_CODE, DATA.WAERS
     ORDER BY DATA.STR_CODE;

  ET_DATA_OKED =
     SELECT DISTINCT
         DATA.BUKRS,
         DATA.ANLN1,
         DATA.ANLN2,
         DATA.AKTIV,
         DATA.DEAKT,
         DATA.INVNR,
         DATA.KTANSW,
         DATA.OCED,
         OKED.STR_NUM,
         DATA.GLO_RUS_OKOF,
         DATA.STR_CODE,
         DATA.KANSW,
         DATA.ST_POST,
         DATA.ST_NEW_OS,
         DATA.ST_VIB,
         DATA.ST_SPISAN_OS,
         DATA.KANSW_END,
         DATA.OST_ST_END,
         DATA.AMORT,
         DATA.PS_BEZ_PERZ,
         DATA.OST_BEZ_PERZ,
         DATA.WAERS
       FROM :ET_DATA AS DATA
         LEFT OUTER JOIN ZFI_OKED_1F AS OKED ON OKED.MANDT = :LV_MANDT
                                            AND DATA.OCED LIKE OKED.MATKL || '%';
  ET_OKED =
     SELECT DATA.STR_NUM,
            SUM( DATA.KANSW )        AS KANSW,
            SUM( DATA.ST_POST )      AS ST_POST,
            SUM( DATA.ST_NEW_OS )    AS ST_NEW_OS,
            SUM( DATA.ST_VIB )       AS ST_VIB,
            SUM( DATA.ST_SPISAN_OS ) AS ST_SPISAN_OS,
            SUM( DATA.KANSW_END )    AS KANSW_END,
            SUM( DATA.OST_ST_END )   AS OST_ST_END,
            ABS( SUM( DATA.AMORT ) ) AS AMORT,
            SUM( DATA.PS_BEZ_PERZ )  AS PS_BEZ_PERZ,
            SUM( DATA.OST_BEZ_PERZ ) AS OST_BEZ_PERZ
       FROM :ET_DATA_OKED AS DATA
      GROUP BY DATA.STR_NUM, DATA.WAERS
      ORDER BY DATA.STR_NUM;
ENDMETHOD.


METHOD GET_DATA_NEW BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                USING ANLA T001 ZANLU GLOFAAASSETDATA ZAA_V0_MOVE_NEW T095 FAAV_ANLC FAAV_ANLP BUT000
                      ZFI_OKED_1F J_3RAOKOF TABW TABWG TVARVC ZAA_UTILS_HDB=>GET_ASSET_SPI ZANLU_OCED.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    DECLARE LV_SDATE CHAR(8) := :IV_GJAHR || '0101';
    DECLARE LV_EDATE CHAR(8) := :IV_GJAHR || '1231'; -- ДАТА ОКОНЧАНИЯ ОТЧЕТА
    DECLARE LV_END_DATE CHAR(8) := TO_DATS(ADD_DAYS(LAST_DAY( :IV_GJAHR || '1231' ) ,1));
    DECLARE LV_KTANSW CHAR(200);
    DECLARE LV_EMONTH CHAR(8) := '14';

    LT_DATA =
      SELECT DISTINCT
        ANLA.BUKRS,
        ANLA.ANLN1,
        ANLA.ANLN2,
        ANLA.AKTIV,
        ANLA.DEAKT,
        ANLA.ORD41,
        ANLA.XAFABCH,                                                                           -- КОД Б/У
        ZANLU.INVNR,
        T095.KTANSW,
        -- --> AK_BUTVILOVS #8000000382, Временная привязка кода ОКЭД в карт ОС
        -- ZANLU.OCED AS OCED,                                                              -- ОКЭД
        ZANLU_OCED.OCED AS OCED,                                                                -- ОКЭД
        -- <-- AK_BUTVILOVS #8000000382
        ' ' AS STR_NUM,
        GLO.GLO_RUS_OKOF,                                                                       -- КОД ОКОФ
        J_3.STR_CODE,
        ZANLU.BU_PARTNER,
        BUT.TYPE,
        ANLC.KANSW + ANLC.KAUFW AS KANSW,                                                       -- ПС НА НАЧАЛО ГОДА
        ANLC.KNAFA + ANLC.KAAFA + ANLC.KAUFN AS DEPR,                                           -- ИЗНОС НА НАЧАЛО ГОДА
        T001.WAERS
      FROM ANLA AS ANLA
        INNER JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                AND T001.BUKRS = ANLA.BUKRS
        INNER JOIN T095 AS T095 ON  T095.MANDT = ANLA.MANDT                                     -- СЧЕТА ЗАПАСА КЛАССА ОС
                                AND T095.KTOPL = T001.KTOPL
                                AND T095.KTOGR = ANLA.KTOGR
                                AND T095.AFABE = '01'
        LEFT JOIN FAAV_ANLC AS ANLC ON  ANLC.MANDT = ANLA.MANDT                                 -- ПC ЧИСЛЯЩИХСЯ НА НАЧАЛО ОТЧЕТНОГО ГОДА
                                    AND ANLC.BUKRS = ANLA.BUKRS
                                    AND ANLC.ANLN1 = ANLA.ANLN1
                                    AND ANLC.ANLN2 = ANLA.ANLN2
                                    AND ANLC.AFABE = '01'
                                    AND ANLC.GJAHR = YEAR ( :LV_SDATE )
        INNER JOIN ZANLU AS ZANLU ON  ZANLU.MANDT = ANLA.MANDT
                                  AND ZANLU.INVNR = ANLA.INVNR
        -- --> AK_BUTVILOVS #8000000382, Временная привязка кода ОКЭД в карт ОС
        LEFT OUTER JOIN ZANLU_OCED ON  ZANLU_OCED.MANDT = ANLA.MANDT          -- КОД ОКЭД
                                   AND ZANLU_OCED.ANLN1 = ANLA.ANLN1
                                   AND ZANLU_OCED.ANLN2 = ANLA.ANLN2
                                   AND ZANLU_OCED.INVNR = ANLA.INVNR
                                   AND ZANLU_OCED.ADATU <= :LV_EDATE
                                   AND ZANLU_OCED.BDATU >= :LV_EDATE
        -- <-- AK_BUTVILOVS #8000000382
        LEFT OUTER JOIN BUT000 AS BUT ON  BUT.CLIENT = ZANLU.MANDT
                                      AND BUT.PARTNER = ZANLU.BU_PARTNER
        INNER JOIN GLOFAAASSETDATA AS GLO ON  ANLA.MANDT = GLO.MANDT
                                          AND ANLA.BUKRS = GLO.BUKRS
                                          AND ANLA.ANLN1 = GLO.ANLN1
                                          AND ANLA.ANLN2 = GLO.ANLN2
        LEFT OUTER JOIN J_3RAOKOF AS J_3 ON  J_3.MANDT = GLO.MANDT
                                         AND J_3.OKOF  = GLO.GLO_RUS_OKOF
      WHERE ANLA.MANDT = :LV_MANDT
        AND ( ANLA.DEAKT >= :LV_SDATE OR ANLA.DEAKT = '00000000' );

     LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);

     lt_codes = select invnr,
                       str_code,
                       ROW_NUMBER() OVER ( PARTITION BY data.invnr ORDER BY data.str_code desc ) as row
                       from :lt_data as data;

     lt_data = select
                  t.BUKRS,
                  t.anln1,
                  t.ANLN2,
                  t.AKTIV,
                  t.DEAKT,
                  t.ORD41,
                  t.XAFABCH,
                  t.INVNR,
                  t.KTANSW,
                  t.OCED,
                  t.STR_NUM,
                  t.GLO_RUS_OKOF,
                  codes.STR_CODE,
                  t.BU_PARTNER,
                  t.TYPE,
                  t.KANSW,
                  t.DEPR,
                  t.WAERS
                  from :lt_data as t
                  join :lt_codes as codes on t.invnr = codes.invnr
                  where codes.row = 1;

     -- ПЕРЕЧИСЛЕНИЕ СЧЕТОВ В ЛИЗИНГЕ
     LT_T095 =
       SELECT DISTINCT KTANSW
         FROM T095
        WHERE AFABE = '01';
     LT_T095 = APPLY_FILTER (:LT_T095, :IV_FLT_LIZ);

    SELECT STRING_AGG(KTANSW,',') INTO LV_KTANSW
      FROM :LT_T095;

  -- АМОРТИЗАЦИЯ ЗА ГОД БЕЗ УЧЕТА ПЕРЕОЦЕНКИ
  ET_AMORT =
    SELECT ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2, SUM(ANLP.NAFAZ + ANLP.SAFAZ ) AS AM_CURR --+ ANLP.AAFAZ
      FROM FAAV_ANLP AS ANLP
        INNER JOIN :LT_DATA AS DATA ON ANLP.BUKRS = DATA.BUKRS
                                   AND ANLP.ANLN1 = DATA.ANLN1
                                   AND ANLP.ANLN2 = DATA.ANLN2
     WHERE MANDT = :LV_MANDT
       AND AFABER = '01'
       AND GJAHR = :IV_GJAHR
     GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2;

-------------------------------------------------------------------------------------
   -- сумма амортизации за год ( графа 8 ) только по ОС, которые есть на начало года, следующего за годом отчета
   ET_AMORT_8 =
    SELECT ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2, SUM(ANLP.NAFAZ + ANLP.SAFAZ
                                                              + ANLP.AAFAZ -- #22390
                                                                                     ) AS AM_CURR
      FROM FAAV_ANLP AS ANLP
        INNER JOIN :LT_DATA AS DATA ON ANLP.BUKRS = DATA.BUKRS
                                   AND ANLP.ANLN1 = DATA.ANLN1
                                   AND ANLP.ANLN2 = DATA.ANLN2
     WHERE MANDT = :LV_MANDT
       AND AFABER = '01'
       AND GJAHR = :IV_GJAHR
       AND ( DEAKT > :LV_EDATE OR DEAKT = '00000000' )
     GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2;
   --
-------------------------------------------------------------------------------------

   -- сумма амортизации за год по ОС, поступивших в отчетном году -- #22390
   LT_AMORT_301 =
    SELECT ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2, SUM(ANLP.NAFAZ + ANLP.SAFAZ
                                                              + ANLP.AAFAZ
                                                                                     ) AS AM_CURR
      FROM FAAV_ANLP AS ANLP
        INNER JOIN :LT_DATA AS DATA ON ANLP.BUKRS = DATA.BUKRS
                                   AND ANLP.ANLN1 = DATA.ANLN1
                                   AND ANLP.ANLN2 = DATA.ANLN2
     WHERE MANDT = :LV_MANDT
       AND AFABER = '01'
       AND GJAHR = :IV_GJAHR
       AND AKTIV >= :LV_SDATE
     GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2;
   --
-------------------------------------------------------------------------------------

     lt_temp = select data.bukrs,
                      data.anln1,
                      data.anln2,
                      movs.kansw as kansw,
                      movs.depre as depre,
                      movs.bwasl as bwasl
                FROM :LT_DATA AS DATA
          INNER JOIN ZAA_V0_MOVE_NEW AS MOVS ON  MOVS.MANDT = :LV_MANDT                                -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                             AND MOVS.BUKRS = DATA.BUKRS
                                             AND MOVS.ANLN1 = DATA.ANLN1
                                             AND MOVS.ANLN2 = DATA.ANLN2
                                             AND MOVS.GJAHR = :IV_GJAHR
                                             AND MOVS.AFABE = '01'
                                             -- AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND '13';
                                             AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND :LV_EMONTH;

  LT_MOVS =
       SELECT
          DATA.BUKRS,
          DATA.ANLN1,
          DATA.ANLN2,
          CASE WHEN AMORTIZ.LOW IS NULL THEN MOVS.KANSW ELSE 0 END AS M_KANSW,                                 -- СУММА ДВИЖЕН. СТОИМОСТ.
          MOVS.DEPRE AS M_DEPR,                                                                                -- СУММА ДВИЖЕН. ИЗНОСА
          MOVS.BWASL AS BWASL,

          CASE WHEN ( DOOCENKA.LOW IS NOT NULL OR UCENKA.LOW IS NOT NULL ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.KANSW END AS M_KANSW_R, -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
          CASE WHEN ( DOOCENKA.LOW IS NOT NULL OR UCENKA.LOW IS NOT NULL ) AND RIGHT ( MOVS.BUDAT,4 ) = '1231' THEN MOVS.DEPRE END AS M_DEPR_R,  -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
          -- ДООЦЕНКА
          CASE WHEN DOOCENKA.LOW IS NOT NULL THEN MOVS.KANSW END AS M_KANSW_R_UP,
          -- УЦЕНКА
          CASE WHEN UCENKA.LOW IS NOT NULL THEN MOVS.KANSW END AS M_KANSW_R_DN,
          -- ВНЕПЛ АМОРТИЗАЦИЯ
          CASE WHEN AMORTIZ.LOW IS NOT NULL THEN MOVS.KANSW END AS VN_DEPR,

          -- ПОСТУПИЛО ЗА ГОД ВСЕГО
           CASE WHEN TABWG.GITCOL IN ( '1', '3') AND UCENKA.LOW IS NULL THEN MOVS.KANSW ELSE 0 END AS ST_POST,
          -- ИЗ НИХ ВВЕДЕНО НОВЫХ ОСНОВНЫХ СРЕДСТВ
          CASE WHEN TABWG.GITCOL IN ( '1', '3')
                AND DATA.KTANSW NOT IN ( :LV_KTANSW ) AND YEAR ( DATA.AKTIV ) = YEAR ( :LV_SDATE )
                AND ( UCENKA.LOW IS NULL AND DOOCENKA.LOW IS NULL )
                AND NEW_OS.LOW IS NOT NULL
                AND ( DATA.ORD41 = '05' OR DATA.ORD41 = '25' OR DATA.ORD41 = '30'  OR DATA.ORD41 = '40' OR DATA.ORD41 = '55' OR DATA.ORD41 = ' ' )
                AND DATA.XAFABCH <> 'X'
               THEN MOVS.KANSW ELSE 0 END AS ST_NEW_OS,

          -- ВЫБЫЛО ЗА ГОД ВСЕГО
          CASE WHEN TABWG.GITCOL IN ( '2', '4') THEN COALESCE( MOVS.KANSW, 0 ) ELSE 0 END AS ST_VIB,                     --ГРАФА 4
          -- ИЗ НИХ ЛИКВИДИРОВАНО, СПИСАНО
          CASE WHEN TABWG.GITCOL IN ( '2', '4') AND SPISANIE.LOW IS NOT NULL THEN COALESCE( MOVS.KANSW, 0 ) ELSE 0 END AS ST_SPISAN_OS,

          CASE WHEN TABWG.GITCOL IN ( '2', '4')                                                                          -- СТОИМОСТЬ ЖИЛЫХ ПОМЕЩЕНИЙ, ПРОДАННЫХ ГРАЖДАНАМ
                AND DATA.TYPE = 1 AND PROD.LOW IS NOT NULL
               THEN MOVS.KANSW ELSE 0 END AS STR_300,

          CASE WHEN TABWG.GITCOL IN ( '1', '3')  AND YEAR ( MOVS.BUDAT ) = YEAR ( :LV_SDATE )                            -- СУММА АМОРТИЗАЦИИ ПОСТУПИВШИХ ЗА ГОД
                AND ( UCENKA.LOW IS NULL AND DOOCENKA.LOW IS NULL )
                AND DATA.KTANSW NOT IN ( :LV_KTANSW ) AND YEAR ( DATA.AKTIV ) = YEAR ( :LV_SDATE )
               -- THEN COALESCE( ABS(AM_CURR ), 0 ) ELSE 0 END AS STR_301,
                 THEN COALESCE( AM_CURR, 0 ) ELSE 0 END AS STR_301,

          -- CASE WHEN TABWG.GITCOL IN ( '2', '4') THEN COALESCE( MOVS.DEPRE, 0 ) ELSE 0 END AS STR_302,                     -- СУММА АМОРТИЗАЦИИ ВЫБЫВШИХ ЗА ГОД

          CASE WHEN TABWG.GITCOL IN ( '2', '4') AND MOVS.BWASL NOT IN ( SELECT low from tvarvc WHERE name = 'ZAA_BWASL_BETWEEN_BE' and type = 'S' and sign = 'I' and opti = 'EQ' )
               THEN COALESCE( MOVS.DEPRE, 0 ) ELSE 0 END AS STR_302,

          CASE WHEN TABWG.GITCOL IN ( '2', '4') AND SPISANIE.LOW IS NOT NULL                                              -- СУММА АМОРТИЗАЦИИ ПО СПИСАННЫМ ОС
                THEN COALESCE( MOVS.DEPRE, 0 ) ELSE 0 END AS STR_303,

          CASE WHEN MODERNIZ.LOW IS NOT NULL AND TABWG.GITCOL IN ( '1', '3')
               THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_400,

          CASE WHEN ( DATA.STR_CODE = '050' OR DATA.STR_CODE = '051' OR DATA.STR_CODE = '052' ) AND MODERNIZ.LOW IS NOT NULL
                AND TABWG.GITCOL IN ( '1', '3')   THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_411,

          CASE WHEN DATA.STR_CODE = '060' AND MODERNIZ.LOW IS NOT NULL
                AND TABWG.GITCOL IN ( '1', '3')  THEN COALESCE( MOVS.KANSW,0) ELSE 0 END AS STR_412

        FROM :LT_DATA AS DATA
          INNER JOIN ZAA_V0_MOVE_NEW AS MOVS ON  MOVS.MANDT = :LV_MANDT                                -- ДВИЖЕНИЯ ОС ( ПОСТУПЛЕНИЕ, ВЫБЫТИЕ И Т.Д.) ПРОВОДКА
                                             AND MOVS.BUKRS = DATA.BUKRS
                                             AND MOVS.ANLN1 = DATA.ANLN1
                                             AND MOVS.ANLN2 = DATA.ANLN2
                                             AND MOVS.GJAHR = :IV_GJAHR
                                             AND MOVS.AFABE = '01'
                                             -- AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND '13'
                                             AND MOVS.MONAT BETWEEN MONTH( :LV_SDATE ) AND :LV_EMONTH
          INNER JOIN TABW AS TABW ON  TABW.MANDT = :LV_MANDT
                                  AND TABW.BWASL = MOVS.BWASL
          INNER JOIN TABWG AS TABWG ON  TABWG.MANDT  = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP

          LEFT JOIN :IR_BWASL_BT AS LT_BT ON MOVS.BWASL = LT_BT.LOW                                -- ИСКЛЮЧАЮТСЯ ОБОРОТЫ МЕЖДУ БЕ
          LEFT JOIN :IR_BWASL_IN AS LT_IN ON MOVS.BWASL = LT_IN.LOW                                -- ИСКЛЮЧАЮТСЯ ОБОРОТЫ ВНУТРИ БЕ

          LEFT JOIN TVARVC AS SPISANIE ON  SPISANIE.MANDT = :LV_MANDT
                                       AND SPISANIE.TYPE  = 'S'
                                       AND SPISANIE.NAME  = 'ZAA_BWASL_SPIS_1FOS'
                                       AND SPISANIE.LOW   = MOVS.BWASL
          --У КОТОРЫХ ВИД ДВИЖЕНИЯ ВЫБЫТИЯ «ПРОДАЖА»
          LEFT JOIN TVARVC AS PROD ON  PROD.MANDT = :LV_MANDT
                                   AND PROD.TYPE  = 'S'
                                   AND PROD.NAME  = 'ZAA_BWASL_PRODAJA'
                                   AND PROD.LOW   = MOVS.BWASL
          LEFT JOIN TVARVC AS MODERNIZ ON  MODERNIZ.MANDT = :LV_MANDT
                                       AND MODERNIZ.TYPE  = 'S'
                                       AND MODERNIZ.NAME  = 'ZAA_BWASL_MODERNIZ'
                                       AND MODERNIZ.LOW   = MOVS.BWASL
          --  ДВИЖЕНИЯ ДООЦЕНКИ
          LEFT JOIN TVARVC AS DOOCENKA ON  DOOCENKA.MANDT  = :LV_MANDT
                                       AND DOOCENKA.TYPE   = 'P'
                                       AND DOOCENKA.LOW    = MOVS.BWASL
                                       AND ( DOOCENKA.NAME = 'ZFI_REVAS_BW_83_UP' OR DOOCENKA.NAME = 'ZFI_REVAS_BW_91_UP' OR
                                             DOOCENKA.NAME = 'ZFI_REVAS_BW_83_UP_ADD' OR DOOCENKA.NAME  = 'ZFI_REVAS_BW_91_UP_ADD' )
          -- ДВИЖЕНИЯ УЦЕНКИ
          LEFT JOIN TVARVC AS UCENKA   ON  UCENKA.MANDT  = :LV_MANDT
                                       AND UCENKA.TYPE   = 'P'
                                       AND UCENKA.LOW    = MOVS.BWASL
                                       AND ( UCENKA.NAME = 'ZFI_REVAS_BW_83_DN' OR UCENKA.NAME = 'ZFI_REVAS_BW_91_DN' OR
                                             UCENKA.NAME = 'ZFI_REVAS_BW_83_DN_ADD' OR UCENKA.NAME  = 'ZFI_REVAS_BW_91_DN_ADD' )
          -- ДВИЖЕНИЯ ДЛЯ НОВЫХ ОСОВ
          LEFT JOIN TVARVC AS NEW_OS   ON  NEW_OS.MANDT  = :LV_MANDT
                                       AND NEW_OS.TYPE   = 'S'
                                       AND NEW_OS.LOW    = MOVS.BWASL
                                       AND NEW_OS.NAME = 'ZAA_BWASL_VVOD_1FOS'
          -- ВНЕПЛАНОВАЯ АМОРТИЗАЦИЯ
          LEFT JOIN TVARVC AS AMORTIZ   ON AMORTIZ.MANDT  = :LV_MANDT
                                       AND AMORTIZ.LOW    = MOVS.BWASL
                                       AND AMORTIZ.NAME   = 'ZAA_BWASL_VNEPL_1FOS'


         LEFT OUTER JOIN :ET_AMORT AS AMORT ON AMORT.BUKRS = DATA.BUKRS                            -- АМОРТИЗАЦИЯ ЗА ГОД
                                           AND AMORT.ANLN1 = DATA.ANLN1
                                           AND AMORT.ANLN2 = DATA.ANLN2
        WHERE LT_BT.LOW IS NULL
          AND LT_IN.LOW IS NULL;

   --АМОРТИЗАЦИЯ ПО ПОСТУПИВШИМ, ВЫБЫВШИМ И СПИСАННЫМ ЗА ГОД
    LT_STR =
     SELECT MOVS.BUKRS,
            MOVS.ANLN1,
            MOVS.ANLN2,
            SUM (MOVS.STR_301) AS STR_301
       FROM ( SELECT DISTINCT
                MOVS.BUKRS,
                MOVS.ANLN1,
                MOVS.ANLN2,
                MOVS.STR_301
              FROM :LT_MOVS AS MOVS ) AS MOVS
      GROUP BY MOVS.BUKRS,MOVS.ANLN1, MOVS.ANLN2;

--> #22390
   ET_STR =
     SELECT STR.BUKRS,
            STR.ANLN1,
            STR.ANLN2,
            STR.STR_301,
            COALESCE( AMORT_301.AM_CURR, 0) AS AM_CURR8
       FROM :LT_STR AS STR
       LEFT OUTER JOIN :LT_AMORT_301 AS AMORT_301 ON AMORT_301.BUKRS = STR.BUKRS
                                                 AND AMORT_301.ANLN1 = STR.ANLN1
                                                 AND AMORT_301.ANLN2 = STR.ANLN2 ;
--< #22390

  LT_MOVS =
     SELECT
       MOVS.BUKRS,
       MOVS.ANLN1,
       MOVS.ANLN2,
       MOVS.M_KANSW,                                       -- СУММА ДВИЖЕН. СТОИМОСТ.
       MOVS.M_DEPR,                                        -- СУММА ДВИЖЕН. ИЗНОСА
       '' as BWASL,
       MOVS.M_KANSW_R,                                     -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
       MOVS.M_DEPR_R,                                      -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
       MOVS.M_KANSW_R_UP,                                  -- СУММА ДВИЖЕНИЙ ДООЦЕНКИ
       MOVS.M_KANSW_R_DN,                                  -- СУММА ДВИЖЕНИЙ УЦЕНКИ
       MOVS.VN_DEPR,
       MOVS.ST_POST,
       MOVS.ST_NEW_OS,
       ABS( MOVS.ST_VIB ) AS ST_VIB,
       ABS( MOVS.ST_SPISAN_OS ) AS ST_SPISAN_OS,
       MOVS.STR_300,

      -- COALESCE( STR.STR_301, 0 ) + COALESCE( ABS( MOVS.VN_DEPR ), 0 ) AS STR_301,        -- УЧИТЫВАЕМ ВНЕПЛАНОВУ АМОРТИЗАЦИЮ
       --> #22390
       CASE WHEN STR.STR_301 <> 0 THEN COALESCE( STR.STR_301, 0 ) + COALESCE( ABS( MOVS.VN_DEPR ), 0 )
                                  ELSE COALESCE( STR.AM_CURR8, 0 ) END AS STR_301,
       --< #22390

       ABS( MOVS.STR_302 ) AS STR_302,
       ABS( MOVS.STR_303 ) AS STR_303,
       ABS( MOVS.STR_400 ) AS STR_400,
       ABS( MOVS.STR_411 ) AS STR_411,
       ABS( MOVS.STR_412 ) AS STR_412
            FROM ( SELECT MOVS.BUKRS,
                     MOVS.ANLN1,
                     MOVS.ANLN2,
                     SUM( MOVS.M_KANSW) AS M_KANSW,                                        -- СУММА ДВИЖЕН. СТОИМОСТ.
                     SUM( MOVS.M_DEPR) AS M_DEPR,                                          -- СУММА ДВИЖЕН. ИЗНОСА
                     SUM( MOVS.M_KANSW_R) AS M_KANSW_R,                                    -- СУММА ПЕРЕОЦЕН. СТОИМОСТ.
                     SUM( MOVS.M_DEPR_R) AS M_DEPR_R,                                      -- СУММА ДВИЖЕНИЙ ПЕРЕОЦЕННКИ ИЗНОСА
                     SUM( MOVS.M_KANSW_R_UP) AS M_KANSW_R_UP,                              -- СУММА ДВИЖЕНИЙ ДООЦЕНКИ
                     SUM( MOVS.M_KANSW_R_DN) AS M_KANSW_R_DN,                              -- СУММА ДВИЖЕНИЙ УЦЕНКИ
                     SUM( MOVS.VN_DEPR ) AS VN_DEPR,
                     SUM( MOVS.ST_POST ) AS ST_POST,
                     SUM( MOVS.ST_NEW_OS ) AS ST_NEW_OS,
                     SUM( MOVS.ST_VIB ) AS ST_VIB,
                     SUM( MOVS.ST_SPISAN_OS ) AS ST_SPISAN_OS,
                     SUM( MOVS.STR_300 ) AS STR_300,
                     0 AS STR_301,
                     SUM( MOVS.STR_302 ) AS STR_302,
                     SUM( MOVS.STR_303 ) AS STR_303,
                     SUM( MOVS.STR_400 ) AS STR_400,
                     SUM( MOVS.STR_411 ) AS STR_411,
                     SUM( MOVS.STR_412 ) AS STR_412
                FROM :LT_MOVS AS MOVS
               GROUP BY MOVS.BUKRS, MOVS.ANLN1, MOVS.ANLN2) AS MOVS
         INNER JOIN :ET_STR AS STR ON  STR.BUKRS = MOVS.BUKRS
                                   AND STR.ANLN1 = MOVS.ANLN1
                                   AND STR.ANLN2 = MOVS.ANLN2;

  ET_DATA =
     SELECT DISTINCT
        DATA.BUKRS,
        DATA.ANLN1,
        DATA.ANLN2,
        DATA.AKTIV,
        DATA.DEAKT,
        DATA.INVNR,
        DATA.KTANSW,
        DATA.OCED,
        DATA.STR_NUM,
        DATA.GLO_RUS_OKOF,
        DATA.STR_CODE,
        DATA.KANSW,                                                                                            -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ НА НАЧАЛО ГОДА
        MOVS.ST_POST,                                                                                          -- ПОСТУПИЛО ЗА ГОД ВСЕГО
        MOVS.ST_NEW_OS,
        MOVS.ST_VIB + COALESCE( ABS( M_KANSW_R_DN ), 0 ) AS ST_VIB,                                             -- ВЫБЫЛО ЗА ГОД ВСЕГО
        MOVS.ST_SPISAN_OS,

        DATA.KANSW + COALESCE( M_KANSW, 0 ) AS KANSW_END,                                                       -- ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
        COALESCE( DATA.KANSW, 0 ) + COALESCE( DATA.DEPR, 0 ) + COALESCE( M_KANSW, 0 ) + COALESCE( M_DEPR, 0 ) + COALESCE( AMORT.AM_CURR, 0 ) + COALESCE( VN_DEPR, 0 )
                                AS OST_ST_END,                                                                  -- ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА

        -- COALESCE( AMORT.AM_CURR, 0 ) + COALESCE( VN_DEPR, 0 ) AS AMORT,
        COALESCE( AMORT_8.AM_CURR, 0 ) AS AMORT,

        DATA.KANSW + COALESCE(M_KANSW,0) - COALESCE(M_KANSW_R,0) AS PS_BEZ_PERZ,                               -- ПЕРВ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ

        COALESCE(DATA.KANSW, 0 ) + COALESCE(DATA.DEPR, 0 ) + COALESCE(M_KANSW,0) + COALESCE(M_DEPR,0) + COALESCE( AMORT.AM_CURR, 0 ) + COALESCE( VN_DEPR, 0 )
                                              - COALESCE(M_KANSW_R,0) - COALESCE(M_DEPR_R,0) AS OST_BEZ_PERZ,  -- ОСТАТ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ

        DATA.WAERS

       FROM :LT_DATA AS DATA
         LEFT OUTER JOIN :LT_MOVS AS MOVS ON MOVS.BUKRS = DATA.BUKRS
                                         AND MOVS.ANLN1 = DATA.ANLN1
                                         AND MOVS.ANLN2 = DATA.ANLN2
         LEFT OUTER JOIN :ET_AMORT AS AMORT ON AMORT.BUKRS = DATA.BUKRS                                        -- АМОРТИЗАЦИЯ ЗА ГОД
                                           AND AMORT.ANLN1 = DATA.ANLN1
                                           AND AMORT.ANLN2 = DATA.ANLN2
         LEFT OUTER JOIN :ET_AMORT_8 AS AMORT_8 ON AMORT_8.BUKRS = DATA.BUKRS
                                               AND AMORT_8.ANLN1 = DATA.ANLN1
                                               AND AMORT_8.ANLN2 = DATA.ANLN2;

lt_spi = select data.bukrs as bukrs,
                data.anln1 as anln1,
                DATA.STR_CODE as str_code,
                data.deakt as deakt,
                DATA.OST_ST_END as ost_st_end,
                DATA.KANSW_END as kansw_end,
                SPI.RESTP as restp,
                SPI.RESTJ as restj
                FROM :ET_DATA AS DATA
         LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI" ( :LV_MANDT, :LV_EDATE ) AS SPI ON  SPI.BUKRS = DATA.BUKRS
                            AND SPI.ANLN1 = DATA.ANLN1
                            AND SPI.ANLN2 = DATA.ANLN2
                            AND SPI.AFABE = '01';
-------------------------------------------------------------------------------------

 -- ОБНОВЛЕНИЕ И ИСПОЛЬЗОВАНИЕ ОСНОВНЫХ СРЕДСТВ - ТАБЛИЦА 4
   LT_IST_ST =
     SELECT DATA.BUKRS,
            DATA.ANLN1,
            DATA.ANLN2,
            DATA.AKTIV,
            DATA.DEAKT,
            DATA.INVNR,
            DATA.KTANSW,
            DATA.OCED,
            DATA.STR_NUM,
            DATA.GLO_RUS_OKOF,
            DATA.STR_CODE,
            DATA.KANSW,                                                                              -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ НА НАЧАЛО ГОДА
            DATA.ST_POST,                                                                            -- ПОСТУПИЛО ЗА ГОД ВСЕГО
            DATA.ST_NEW_OS,
            DATA.ST_VIB,                                                                             -- ВЫБЫЛО ЗА ГОД ВСЕГО
            DATA.ST_SPISAN_OS,
            DATA.KANSW_END,                                                                          -- ВОССТАНОВИТЕЛЬНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
            DATA.OST_ST_END,                                                                         -- ОСТАТОЧНАЯ СТОИМОСТЬ НА КОНЕЦ ГОДА
            DATA.AMORT,
            DATA.PS_BEZ_PERZ,                                                                        -- ПЕРВ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
            DATA.OST_BEZ_PERZ,                                                                       -- ОСТАТ.СТОИМ НА КОНЕЦ ГОДА БЕЗ ПЕРЕОЦЕНКИ
            DATA.WAERS,
            CASE WHEN DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_400_2,
            CASE WHEN ( DATA.STR_CODE = '050' OR
                        DATA.STR_CODE = '051' OR
                        DATA.STR_CODE = '052' ) AND
                      DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_411_2, -- СУММА ВОССТ. ПЕРЕОЦЕНЕННОЙ СТОИМ. С СПИ
            CASE WHEN DATA.STR_CODE = '060' AND DATA.OST_ST_END = 0 AND
                      SPI.RESTP <= 0 AND SPI.RESTJ <= 0 THEN DATA.KANSW_END ELSE 0 END AS STR_412_2
       FROM :ET_DATA AS DATA
         LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI" ( :LV_MANDT, :LV_EDATE ) AS SPI ON  SPI.BUKRS = DATA.BUKRS
                            AND SPI.ANLN1 = DATA.ANLN1
                            AND SPI.ANLN2 = DATA.ANLN2
                            AND SPI.AFABE = '01';
  ET_RAZD =
     SELECT SUM( MOVS.STR_300 ) AS STR_300,
            -- SUM( MOVS.STR_301 ) AS STR_301,
            ABS( SUM( MOVS.STR_301 ) ) AS STR_301,
            SUM( MOVS.STR_302 ) AS STR_302,
            SUM( MOVS.STR_303 ) AS STR_303,
            SUM( MOVS.STR_400 ) AS STR_400,
            SUM( MOVS.STR_411 ) + SUM( MOVS.STR_412 ) AS STR_410,
            SUM( MOVS.STR_411 ) AS STR_411,
            SUM( MOVS.STR_412 ) AS STR_412,
            ( SELECT SUM (IST.STR_400_2) FROM :LT_IST_ST AS IST ) AS STR_400_2,
            ( SELECT SUM (IST.STR_411_2) + SUM (IST.STR_412_2) FROM :LT_IST_ST AS IST ) AS STR_410_2,
            ( SELECT SUM (IST.STR_411_2) FROM :LT_IST_ST AS IST ) AS STR_411_2,
            ( SELECT SUM (IST.STR_412_2) FROM :LT_IST_ST AS IST ) AS STR_412_2
       FROM :LT_MOVS AS MOVS ;

  ET_OKOF =
    SELECT DATA.STR_CODE,
           SUM( DATA.KANSW )        AS KANSW,
           SUM( DATA.ST_POST )      AS ST_POST,
           SUM( DATA.ST_NEW_OS )    AS ST_NEW_OS,
           SUM( DATA.ST_VIB )       AS ST_VIB,
           SUM( DATA.ST_SPISAN_OS ) AS ST_SPISAN_OS,
           SUM( DATA.KANSW_END )    AS KANSW_END,
           SUM( DATA.OST_ST_END )   AS OST_ST_END,
           ABS( SUM( DATA.AMORT ) ) AS AMORT,
           SUM( DATA.PS_BEZ_PERZ )  AS PS_BEZ_PERZ,
           SUM( DATA.OST_BEZ_PERZ ) AS OST_BEZ_PERZ
      FROM :ET_DATA AS DATA
     GROUP BY DATA.STR_CODE, DATA.WAERS
     ORDER BY DATA.STR_CODE;

  ET_DATA_OKED =
     SELECT DISTINCT
         DATA.BUKRS,
         DATA.ANLN1,
         DATA.ANLN2,
         DATA.AKTIV,
         DATA.DEAKT,
         DATA.INVNR,
         DATA.KTANSW,
         DATA.OCED,
         OKED.STR_NUM,
         DATA.GLO_RUS_OKOF,
         DATA.STR_CODE,
         DATA.KANSW,
         DATA.ST_POST,
         DATA.ST_NEW_OS,
         DATA.ST_VIB,
         DATA.ST_SPISAN_OS,
         DATA.KANSW_END,
         DATA.OST_ST_END,
         DATA.AMORT,
         DATA.PS_BEZ_PERZ,
         DATA.OST_BEZ_PERZ,
         DATA.WAERS
       FROM :ET_DATA AS DATA
         LEFT OUTER JOIN ZFI_OKED_1F AS OKED ON OKED.MANDT = :LV_MANDT
                                            AND DATA.OCED LIKE OKED.MATKL || '%';
  ET_OKED =
     SELECT DATA.STR_NUM,
            SUM( DATA.KANSW )        AS KANSW,
            SUM( DATA.ST_POST )      AS ST_POST,
            SUM( DATA.ST_NEW_OS )    AS ST_NEW_OS,
            SUM( DATA.ST_VIB )       AS ST_VIB,
            SUM( DATA.ST_SPISAN_OS ) AS ST_SPISAN_OS,
            SUM( DATA.KANSW_END )    AS KANSW_END,
            SUM( DATA.OST_ST_END )   AS OST_ST_END,
            ABS( SUM( DATA.AMORT ) ) AS AMORT,
            SUM( DATA.PS_BEZ_PERZ )  AS PS_BEZ_PERZ,
            SUM( DATA.OST_BEZ_PERZ ) AS OST_BEZ_PERZ
       FROM :ET_DATA_OKED AS DATA
      GROUP BY DATA.STR_NUM, DATA.WAERS
      ORDER BY DATA.STR_NUM;
ENDMETHOD.
ENDCLASS.