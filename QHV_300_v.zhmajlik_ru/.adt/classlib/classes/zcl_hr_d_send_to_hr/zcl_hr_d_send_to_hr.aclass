CLASS zcl_hr_d_send_to_hr DEFINITION
  PUBLIC
  INHERITING FROM /bobf/cl_lib_d_supercl_simple FINAL
  CREATE PUBLIC.

  PUBLIC SECTION.
    METHODS /bobf/if_frw_determination~execute REDEFINITION.

  PROTECTED SECTION.

  PRIVATE SECTION.
    TYPES ty_lt_sysmessages TYPE STANDARD TABLE OF symsg WITH DEFAULT KEY.

    METHODS get_child_data
      IMPORTING iv_association     TYPE /bobf/obm_node_key
                iv_node            TYPE /bobf/obm_assoc_key
                it_key             TYPE /bobf/t_frw_key
                io_read            TYPE REF TO /bobf/if_frw_read
      CHANGING  it_data            TYPE STANDARD TABLE
                ct_export_to_hr    TYPE STANDARD TABLE
      RETURNING VALUE(et_messages) TYPE REF TO /bobf/if_frw_message.

    METHODS send_to_hr
      EXPORTING es_candidate       TYPE zhr_s_sync_btw_erp_and_hr
      CHANGING  cs_candidate       TYPE zhr_s_sync_btw_erp_and_hr
      RETURNING VALUE(rt_messages) TYPE bapirettab.

    METHODS modify_candidate
      IMPORTING is_candidate TYPE zhr_s_sync_btw_erp_and_hr
                is_ctx       TYPE /bobf/s_frw_ctx_det
                io_modify    TYPE REF TO /bobf/if_frw_modify
      CHANGING  ct_header    TYPE zthri_candidateheader3.

    METHODS get_children_data
      IMPORTING i_zif_header_associations LIKE zif_hr_i_candidateheader3_c=>sc_association
                i_zif_header_node         LIKE zif_hr_i_candidateheader3_c=>sc_node
                it_key                    TYPE /bobf/t_frw_key
                io_read                   TYPE REF TO /bobf/if_frw_read
                io_modify                 TYPE REF TO /bobf/if_frw_modify
      CHANGING  cs_sync_btw_erp_and_hr    TYPE zhr_s_sync_btw_erp_and_hr.

    METHODS add_bobf_messages
      IMPORTING it_messages TYPE bapirettab
                it_header   TYPE zthri_candidateheader3
                is_ctx      TYPE /bobf/s_frw_ctx_det
      CHANGING  co_messages TYPE REF TO /bobf/if_frw_message.

    METHODS update_tractor_id
      IMPORTING io_modify  TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_tractor TYPE zthri_candidate_tractor.

    METHODS update_driver_id
      IMPORTING io_modify TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_driver TYPE zthri_candidate_driver.

    METHODS update_family_id
      IMPORTING io_modify TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_family TYPE zthri_candidate_family.

    METHODS update_relatives_id
      IMPORTING io_modify    TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_relatives TYPE zthri_candidate_relatives.

    METHODS update_language_id
      IMPORTING io_modify    TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_languages TYPE zthri_candidate_language3.

    METHODS update_desired_profession_id
      IMPORTING io_modify              TYPE REF TO /bobf/if_frw_modify
      CHANGING  it_desired_professions TYPE zthri_desired_profession.
ENDCLASS.



CLASS ZCL_HR_D_SEND_TO_HR IMPLEMENTATION.


  METHOD /bobf/if_frw_determination~execute.
    DATA lt_header    TYPE zthri_candidateheader3.
    DATA ls_candidate TYPE zhr_s_sync_btw_erp_and_hr.

    DATA(zif_header_associations) = zif_hr_i_candidateheader3_c=>sc_association.
    DATA(zif_header_node) = zif_hr_i_candidateheader3_c=>sc_node.

    return.

    io_read->retrieve( EXPORTING iv_node = is_ctx-node_key
                                 it_key  = it_key
                       IMPORTING et_data = lt_header ).

    IF lt_header[ 1 ]-IsActiveEntity = abap_false.
      RETURN.
    ENDIF.

    ls_candidate-candidate_header = CORRESPONDING #( lt_header[ 1 ] ).

    get_children_data( EXPORTING i_zif_header_associations = zif_header_associations
                                 i_zif_header_node         = zif_header_node
                                 it_key                    = it_key
                                 io_read                   = io_read
                                 io_modify                 = io_modify
                       CHANGING  cs_sync_btw_erp_and_hr    = ls_candidate ).

    DATA(lt_messages) = send_to_hr( IMPORTING es_candidate = ls_candidate
                                    CHANGING  cs_candidate = ls_candidate ).

    IF lt_messages IS NOT INITIAL.
      add_bobf_messages( EXPORTING it_messages = lt_messages
                                   it_header   = lt_header
                                   is_ctx      = is_ctx
                         CHANGING  co_messages = eo_message ).
    ELSE.
      modify_candidate( EXPORTING is_candidate = ls_candidate
                                  is_ctx       = is_ctx
                                  io_modify    = io_modify
                        CHANGING  ct_header    = lt_header ).
    ENDIF.
  ENDMETHOD.


  METHOD add_bobf_messages.
    " TODO: parameter IT_HEADER is never used (ABAP cleaner)
    " TODO: parameter IS_CTX is never used (ABAP cleaner)

    " TODO: variable is assigned but never used (ABAP cleaner)
    DATA lt_sysmessages TYPE ty_lt_sysmessages.

    lt_sysmessages = VALUE #( FOR ls_message IN it_messages
                              ( msgid = ls_message-id
                                msgno = ls_message-log_msg_no
                                msgty = ls_message-type
                                msgv1 = ls_message-message_v1
                                msgv2 = ls_message-message_v2
                                msgv3 = ls_message-message_v3
                                msgv4 = ls_message-message_v4 ) ).

    IF co_messages IS NOT BOUND.
      co_messages = /bobf/cl_frw_factory=>get_message( ).
    ENDIF.

    LOOP AT it_messages ASSIGNING FIELD-SYMBOL(<ls_messages>).
*      IF <ls_messages>-number = '625'.
*        DATA(lv_severinity) = 'I'.
*      ELSE.
*        lv_severinity = /bobf/cm_frw=>co_severity_abend.
*      ENDIF.
      DATA(lv_severinity) = 'I'.
      co_messages->add_cm( io_message = NEW  /bobf/cm_frw_symsg( severity     = lv_severinity
                                                                 message_text = CONV #( <ls_messages>-message ) ) ).
    ENDLOOP.
  ENDMETHOD.


  METHOD get_children_data.
    DATA lt_educations         TYPE zthri_candidate_education3.
    DATA lt_language           TYPE zthri_candidate_language3.
    DATA lt_lastwork           TYPE zthri_candidate_last_work3.
    DATA lt_profrecom          TYPE zthri_candidate_profrecom3.
    DATA lt_relatives          TYPE zthri_candidate_relatives.
    DATA lt_seminar            TYPE zthri_candidate_seminar3.
    DATA lt_family             TYPE zthri_candidate_family.
    DATA lt_driver             TYPE zthri_candidate_driver.
    DATA lt_tractor            TYPE zthri_candidate_tractor.
    DATA lt_desired_profession TYPE zthri_desired_profession.

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateeducation
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_educations
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_education ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatelanguage
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_language
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_language ).

    update_language_id( EXPORTING io_modify    = io_modify
                        CHANGING  it_languages = lt_language ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatelastwork
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_lastwork
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_last_work ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateprofrecom
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_profrecom
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_profrecom ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidaterelat
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_relatives
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_relatives ).

    update_relatives_id( EXPORTING io_modify    = io_modify
                         CHANGING  it_relatives = lt_relatives ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidateseminar
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_seminar
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_seminar ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatefamily
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_family
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_family ).

    update_family_id( EXPORTING io_modify = io_modify
                      CHANGING  it_family = lt_family ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatedriver
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_driver
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_driver ).

    update_driver_id( EXPORTING io_modify = io_modify
                      CHANGING  it_driver = lt_driver ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatetractor
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_tractor
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_tractor ).

    update_tractor_id( EXPORTING io_modify  = io_modify
                       CHANGING  it_tractor = lt_tractor ).

    get_child_data( EXPORTING iv_association  = i_zif_header_associations-zhr_i_candidateheader-_candidatedesired
                              iv_node         = i_zif_header_node-zhr_i_candidateheader
                              it_key          = it_key
                              io_read         = io_read
                    CHANGING  it_data         = lt_desired_profession
                              ct_export_to_hr = cs_sync_btw_erp_and_hr-candidate_desired_profession ).

    update_desired_profession_id( EXPORTING io_modify              = io_modify
                                  CHANGING  it_desired_professions = lt_desired_profession ).
  ENDMETHOD.


  METHOD get_child_data.
    io_read->retrieve_by_association( EXPORTING it_key         = it_key
                                                iv_node        = iv_node
                                                iv_association = iv_association
                                                iv_fill_data   = abap_true
                                      IMPORTING et_data        = it_data
                                                eo_message     = et_messages  ).

    MOVE-CORRESPONDING it_data TO ct_export_to_hr.
  ENDMETHOD.


  METHOD modify_candidate.
    LOOP AT ct_header REFERENCE INTO DATA(ls_header).
      IF ls_header->objid IS INITIAL.
        ls_header->objid        = is_candidate-candidate_header-objid.
        ls_header->otype        = is_candidate-candidate_header-otype.
        ls_header->plvar        = is_candidate-candidate_header-plvar.
        ls_header->zhr_user     = is_candidate-candidate_header-zhr_user.
        ls_header->useralias    = is_candidate-candidate_header-useralias.
        ls_header->password     = is_candidate-candidate_header-password.
        ls_header->created_data = sy-datum.
        ls_header->created_user = sy-uname.
        ls_header->created_time = sy-uzeit.
      ELSE.
        ls_header->changed_data = sy-datum.
        ls_header->changed_user = sy-uname.
        ls_header->changed_time = sy-uzeit.
      ENDIF.
      io_modify->update( iv_node = is_ctx-node_key
                         iv_key  = ls_header->key
                         is_data = ls_header ).
    ENDLOOP.
  ENDMETHOD.


  METHOD send_to_hr.
    SELECT SINGLE name FROM zhr_i_sever_vh
      INTO @cs_candidate-candidate_header-business_trip_sever
      WHERE id = @cs_candidate-candidate_header-business_trip_sever_id.

    CALL FUNCTION 'ZHR_FM_REGISTER_CANDIDATE'
    " DESTINATION 'HRPCLNT300HR'
      DESTINATION 'HRDCLNT300'
      EXPORTING is_candidate        = cs_candidate
                iv_set_all_data     = abap_true
      IMPORTING et_messages         = rt_messages
                es_candidate_header = es_candidate.

    TRY.
        "zcl_recruitment_static=>send_email( CHANGING cs_candidate = es_candidate ).
      CATCH cx_send_req_bcs cx_document_bcs cx_address_bcs.
    ENDTRY.
    DELETE rt_messages WHERE type <> 'E' AND type <> 'A'.
  ENDMETHOD.


  METHOD update_desired_profession_id.
    LOOP AT it_desired_professions REFERENCE INTO DATA(ls_desired_professions).
      SELECT SINGLE id INTO @DATA(lv_id)
        FROM zhr_desirprof_vh
        WHERE stext = @ls_desired_professions->name_profess.

      IF ls_desired_professions->id_profess <> lv_id.
        ls_desired_professions->id_profess = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_desired_profession
                           iv_key  = ls_desired_professions->key
                           is_data = ls_desired_professions ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD update_driver_id.
    LOOP AT it_driver REFERENCE INTO DATA(ls_driver).
      SELECT SINGLE id INTO @DATA(lv_id)
        FROM zhr_i_category_vh
        WHERE name = @ls_driver->name_category.

      IF ls_driver->id_category <> lv_id.
        ls_driver->id_category = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_candidate_driver
                           iv_key  = ls_driver->key
                           is_data = ls_driver ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD update_family_id.
    LOOP AT it_family REFERENCE INTO DATA(ls_family).
      SELECT SINGLE id INTO @DATA(lv_id)
        FROM zhr_i_type_relat_vh
        WHERE description = @ls_family->relat_degree.

      IF ls_family->relat_id <> lv_id.
        ls_family->relat_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_candidate_family
                           iv_key  = ls_family->key
                           is_data = ls_family ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD update_language_id.
    LOOP AT it_languages REFERENCE INTO DATA(ls_languages).
      SELECT SINGLE objid INTO @DATA(lv_id)
        FROM zhr_i_name_langu
        WHERE description = @ls_languages->name_language.

      IF ls_languages->lang_id <> lv_id.
        ls_languages->lang_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_candidate_language
                           iv_key  = ls_languages->key
                           is_data = ls_languages ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD update_relatives_id.
    LOOP AT it_relatives REFERENCE INTO DATA(ls_relatives).
      SELECT SINGLE id INTO @DATA(lv_id)
        FROM zhr_i_type_relat_vh
        WHERE description = @ls_relatives->relat_degree.

      IF ls_relatives->relat_id <> lv_id.
        ls_relatives->relat_id = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_candidate_relatives
                           iv_key  = ls_relatives->key
                           is_data = ls_relatives ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD update_tractor_id.
    LOOP AT it_tractor REFERENCE INTO DATA(ls_tractor).
      SELECT SINGLE id INTO @DATA(lv_id)
        FROM zhr_i_candidate_tractor_vh
        WHERE name = @ls_tractor->name_category.

      IF ls_tractor->id_category <> lv_id.
        ls_tractor->id_category = lv_id.
        io_modify->update( iv_node = zif_hr_i_candidateheader3_c=>sc_node-zhr_i_candidate_tractor
                           iv_key  = ls_tractor->key
                           is_data = ls_tractor ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.