class ZCL_ZFI_D_NLIOS definition
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB .
  TYPES:
    BEGIN OF GTY_S_DATA,
      BUKRS          TYPE BUKRS,            " БЕ
      NAME_BE        TYPE TEXT200,          " НАИМЕНОВАНИЕ  БЕ
      DEPGR          TYPE J_3RFAMORTGR,     " ГРУППА АММОРТИЗАЦИИ
      DEPTX          TYPE J_3RFAMORTGRDESC, " НАИМЕНОВАНИЕ ГРУППЫ АММОРТИЗАЦИИ
      LGORT          TYPE TEXT50,           " СКЛАД + НАИМЕНОВАНИЕ СКЛАДА
      INVNR          TYPE ANLA-INVNR,       " ИНВЕНТАРНЫЙ НОМЕР
      NAME_OC        TYPE TEXT200,          " НАИМЕНОВАНИЕ ОС
      UTVDATE        TYPE ZANLU-UTVDATE,    " ДАТА ВВОДА ОБЪЕКТА
      ZZBUDATE       TYPE ZANLU-UTVDATE,    " ДАТА ПРИНЯТИЯ К Б/У
      OKOF           TYPE J_3RFOKOF,        " ШИФР НОРМАТИВНОГО СРОКА СЛУЖБЫ
      PERST          TYPE KANSW,            " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
      AMORT          TYPE anep-anbtr,       " СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
      NETVL          TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ
      VALUE_AM       TYPE KANSW,            " АМОРТИЗИРУЕМАЯ СТОИМОСТЬ
      UMSROKGD       TYPE TEXT20,           " НОРМАТИВНЫЙ СРОК СЛУЖБЫ, XX ЛЕТ
      SPI            TYPE TEXT20,           " СПИ, XX лет, XX мес
      REST_SPI       TYPE TEXT20,           " ОСТАТОЧНЫЙ СРОК СЛУЖБЫ, XX лет, XX мес
      YNORM          TYPE ZFI_LTAXRATE,     " ГОДОВАЯ НОРМА (%)
      MNORM          TYPE ZFI_LTAXRATE,     " МЕСЯЧНАЯ НОРМА (%)
      SCHL           TYPE ZSROK_2017,       " СУММА ЧИСЕЛ ЛЕТ СПИ
      K_UMO          TYPE ZAA_E_KUMO,       " КОЭФФИЦИЕНТ УСКОРЕНИЯ
      AM_MONTH       TYPE anep-anbtr,       " СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ
      " ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ
      ANLKL          TYPE ANLA-ANLKL,       " КЛАСС
      ANLKL_NAME     TYPE ANKT-TXK20,       " НАИМЕНОВАНИЕ КЛАССА
      ACCOUNT        TYPE KTANSW,           " СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
      HKONT_NAME     TYPE SKAT-TXT20,       " НАИМЕНОВАНИЕ СЧЕТА
      ANLN1          TYPE ANLN1,            " ОС
      ANLN2          TYPE ANLN2,            " СУБНОМЕР
      AFASL          TYPE AFASL,            " КОД АМОРТИЗАЦИИ
    END OF GTY_S_DATA,
    GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA,
    BEGIN OF GTY_S_EXC,
      NP       TYPE TEXT4,            " Н/П
      DEPGR    TYPE J_3RFAMORTGR,     " ГРУППА АММОРТИЗАЦИИ
      LGORT    TYPE TEXT50,           " СКЛАД + НАИМЕНОВАНИЕ СКЛАДА
      INVNR    TYPE ANLA-INVNR,       " ИНВЕНТАРНЫЙ НОМЕР
      NAME_OC  TYPE TEXT200,          " НАИМЕНОВАНИЕ ОС
      UTVDATE  TYPE ZANLU-UTVDATE,    " ДАТА ВВОДА ОБЪЕКТА
      ZZBUDATE TYPE ZANLU-UTVDATE,    " ДАТА ПРИНЯТИЯ К Б/У
      OKOF     TYPE J_3RFOKOF,        " ШИФР НОРМАТИВНОГО СРОКА СЛУЖБЫ
      PERST    TYPE KANSW,            " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
      AMORT    TYPE ANEP-ANBTR,       " СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
      NETVL    TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ
      VALUE_AM TYPE KANSW,            " АМОРТИЗИРУЕМАЯ СТОИМОСТЬ
      UMSROKGD TYPE TEXT20,           " НОРМАТИВНЫЙ СРОК СЛУЖБЫ, XX ЛЕТ
      SPI      TYPE TEXT20,           " СПИ, XX ЛЕТ, XX МЕС
      REST_SPI TYPE TEXT20,           " ОСТАТОЧНЫЙ СРОК СЛУЖБЫ, XX ЛЕТ, XX МЕС
      YNORM    TYPE ZFI_LTAXRATE,     " ГОДОВАЯ НОРМА (%)
      MNORM    TYPE ZFI_LTAXRATE,     " МЕСЯЧНАЯ НОРМА (%)
      SCHL     TYPE ZSROK_2017,       " СУММА ЧИСЕЛ ЛЕТ СПИ
      K_UMO    TYPE ZAA_E_KUMO,       " КОЭФФИЦИЕНТ УСКОРЕНИЯ
      AM_MONTH TYPE ANEP-ANBTR,       " СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ
    END OF GTY_S_EXC,
    GTY_T_EXC  TYPE STANDARD TABLE OF GTY_S_EXC,
    BEGIN OF GTY_S_SKAT,
      SAKNR          TYPE SKAT-SAKNR,
      TXT50          TYPE SKAT-TXT50,
    END OF GTY_S_SKAT,
    GTY_T_SKAT TYPE STANDARD TABLE OF GTY_S_SKAT WITH EMPTY KEY,
    BEGIN OF GTY_S_SUM,
      SUM_PERST          TYPE KANSW,            " ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
      SUM_AMORT          TYPE anep-anbtr,       " СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
      SUM_NETVL          TYPE KANSW,            " ОСТАТОЧНАЯ СТОИМОСТЬ
      SUM_VALUE_AM       TYPE KANSW,            " АМОРТИЗИРУЕМАЯ СТОИМОСТЬ
      SUM_AM_MONTH       TYPE anep-anbtr,       " СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ
    END OF GTY_S_SUM,
    GTY_T_SUM   TYPE STANDARD TABLE OF GTY_S_SUM.

    TYPES:
     BEGIN OF gty_s_amort,
        bukrs TYPE bukrs,   " БЕ
        anln1 TYPE anln1,   " СИСТЕМНЫЙ НОМЕР ОСА
        anln2 TYPE anln2,   " СУБНОМЕР ОС
        afasl TYPE afasl,   " Код амортизации
        budat TYPE bkpf-budat,
     END OF gty_s_amort,
     gty_t_amort TYPE STANDARD TABLE OF gty_s_amort,

     BEGIN OF gty_s_amort_stoim,
        bukrs TYPE bukrs,   " БЕ
        anln1 TYPE anln1,   " СИСТЕМНЫЙ НОМЕР ОСА
        anln2 TYPE anln2,   " СУБНОМЕР ОС
        budat TYPE bkpf-budat,
        netvl TYPE vtcur12, " Остаточная стоимость
     END OF gty_s_amort_stoim,
     gty_t_amort_stoim TYPE STANDARD TABLE OF gty_s_amort_stoim.

       types:
    BEGIN OF gty_s_dates_all,
      bukrs     TYPE bukrs,
      INVNR     TYPE invnr,
      ANLN1     TYPE anln1,
      ANLN2     TYPE anln2,
      load_date TYPE DATE_T093C,
      aktiv     TYPE aktivd,
      budat     TYPE AKTIVD,
      am_date   TYPE budat,
      spi_date  TYPE budat,
      end OF gty_s_dates_all .
  types:
    gty_t_dates_all TYPE STANDARD TABLE OF gty_s_dates_all .

  types:
    BEGIN OF gty_s_vals,
      bukrs     TYPE bukrs,
      ANLN1     TYPE anln1,
      ANLN2     TYPE anln2,
      budat     TYPE budat,
      netvl     TYPE netvl,
    end OF gty_s_vals.
  types:
    gty_t_vals TYPE STANDARD TABLE OF gty_s_vals.

    CLASS-METHODS:
     GET_DATA
      IMPORTING
        VALUE(IV_DATE)     TYPE D
        VALUE(IV_FLT)      TYPE STRING
        VALUE(IV_YEARS)    TYPE CHAR10
        VALUE(IV_MONTH)    TYPE CHAR10
      EXPORTING
        VALUE(ET_DATA)     TYPE GTY_T_DATA
        VALUE(ET_SKAT)     TYPE GTY_T_SKAT
        VALUE(ET_EXC)      TYPE GTY_T_EXC
        VALUE(ET_ITOG)     TYPE GTY_T_SUM
        VALUE(EV_BUKRS)    TYPE STRING                 "ПЕРЕЧИСЛЕНИЕ НОМЕРОВ БЕ ДЛЯ ВЫВОДА В EXCEL
        VALUE(EV_SAKNR)    TYPE STRING                 "ПЕРЕЧИСЛЕНИЕ НОМЕРОВ СЧЕТОВ ДЛЯ ВЫВОДА В EXCEL
      RAISING
        CX_AMDP_ERROR,

      get_asset_amort_value
        IMPORTING
          VALUE(iv_eod)   type abap_bool DEFAULT abap_false   "вывод значений на конец дня
          VALUE(it_am_st) TYPE gty_t_amort
        EXPORTING
          VALUE(et_am_st) TYPE gty_t_amort_stoim,

          get_asset_amort_st
        IMPORTING
          VALUE(iv_eod)   type abap_bool DEFAULT abap_false   "вывод значений на конец дня
          VALUE(it_am_st) TYPE gty_t_amort
        EXPORTING
          VALUE(et_am_st)     TYPE gty_t_amort_stoim
          VALUE(ET_DATES_ALL) TYPE gty_t_dates_all
          VALUE(et_vals)      TYPE gty_t_vals,

         get_asset_values
           IMPORTING
             VALUE(it_am) TYPE gty_t_amort
           EXPORTING
              VALUE(et_vals) TYPE gty_t_vals
          .

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZCL_ZFI_D_NLIOS IMPLEMENTATION.


METHOD get_asset_amort_st
  BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
   OPTIONS READ-ONLY
         USING FAAV_ANLC FAAV_ANEP FAAV_ANEK FAAV_ANLP TABW
               ZREVDATE FAAV_ANEK SETLEAF T093C ANLA TABWG FAAV_ANEA ANLBZA
               ZCL_ZFI_D_NLIOS=>GET_ASSET_VALUES.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT( 'CLIENT' );

-------------------- Все даты
   ET_DATES_ALL =               /*выборка возможных дат расчета амортизируемой стоимости */
       SELECT
              ANLA.BUKRS,
              ANLA.INVNR,
              ANLA.ANLN1,
              ANLA.ANLN2,
              T093C.DATUM                                                                    AS load_date,   /*Дата загрузки*/
              ANLA.AKTIV,                 /*Дата оприходования*/

             ( SELECT TO_DATS( COALESCE ( MAX( ANEK.BUDAT ), '00000000' ) )
                           FROM FAAV_ANEP
                           JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = FAAV_ANEP.MANDT
                                                 AND ANEK.BUKRS = FAAV_ANEP.BUKRS
                                                 AND ANEK.ANLN1 = FAAV_ANEP.ANLN1
                                                 AND ANEK.ANLN2 = FAAV_ANEP.ANLN2
                                                 AND ANEK.LNRAN = FAAV_ANEP.LNRAN
                          WHERE FAAV_ANEP.MANDT = :LV_MANDT
                            AND FAAV_ANEP.BUKRS = IT.BUKRS
                            AND FAAV_ANEP.ANLN1 = IT.ANLN1
                            AND FAAV_ANEP.ANLN2 = IT.ANLN2
                            AND FAAV_ANEP.AFABE = '01'
                            AND FAAV_ANEP.BWASL IN ( SELECT VALFROM
                                                       FROM SETLEAF
                                                      WHERE SETCLASS = '0000'
                                                        AND SUBCLASS = ''
                                                        AND SETNAME  = 'Z_TTYPE_AMORT'
                                                        AND MANDT    = :LV_MANDT )
                           AND  ANEK.BUDAT <= IT.BUDAT )                                      as BUDAT,

             ( SELECT TO_DATS( COALESCE ( MAX( ADATU ), '00000000' ) )  /*Дата установки данного кода амортизации*/
                             FROM ANLBZA
                             WHERE MANDT = :LV_MANDT
                               AND BUKRS =  IT.BUKRS
                               AND ANLN1 =  IT.ANLN1
                               AND ANLN2 =  IT.ANLN2
                               AND AFABE =  '01'
                               AND AFASL =  IT.AFASL
                               AND ADATU <= IT.BUDAT )                        as am_date,

            ( SELECT TO_DATS( COALESCE ( MAX( ADATU ), '00000000' ) ) /*Дата изменения СПИ*/
                               FROM ANLBZA
                               WHERE MANDT = :LV_MANDT
                                 AND BUKRS =  IT.BUKRS
                                 AND ANLN1 =  IT.ANLN1
                                 AND ANLN2 =  IT.ANLN2
                                 AND AFABE =  '01'
                                 AND ADATU <= IT.BUDAT ) as spi_date

          FROM :IT_AM_ST AS IT
            INNER JOIN ANLA AS ANLA ON ANLA.MANDT = :LV_MANDT
                                   AND ANLA.BUKRS = IT.BUKRS
                                   AND ANLA.ANLN1 = IT.ANLN1
                                   AND ANLA.ANLN2 = IT.ANLN2
                                   AND ANLA.ZUGDT <= IT.BUDAT
            INNER JOIN T093C AS T093C ON T093C.MANDT = :LV_MANDT
                                     AND T093C.BUKRS = IT.BUKRS ;

 LT_AM_AFASL =
   SELECT
     LD.BUKRS,
     LD.ANLN1,
     LD.ANLN2,
     NULL       as AFASL,
     TO_DATS(LAST_DAY(ADD_MONTHS(LD.AM_DATE, -1))) AS BUDAT
     FROM :ET_DATES_ALL AS LD
     WHERE LD.AM_DATE <> '00000000';

  -- СТОИМОСТНЫЕ ДАННЫЕ ОС НА ДАТУ УСТАНОВКИ КОДА АМОРТИЗАЦИИ
  CALL "ZCL_ZFI_D_NLIOS=>GET_ASSET_VALUES"( :LT_AM_AFASL, ET_VALS);

---------------------

     LT_DATES_ALL =               /*выборка возможных дат расчета амортизируемой стоимости */
       SELECT ANLA.INVNR,
              ANLA.ANLN1,
              ANLA.ANLN2,
              T093C.DATUM,                                                  /*Дата загрузки*/
              GREATEST( T093C.DATUM,                                        /*Дата загрузки*/
                        ANLA.AKTIV,                                         /*Дата оприходования*/
                                                                            /*Дата переоценки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( VALLAST ), '00000000' ) )
                           FROM ZREVDATE
                          WHERE MANDT = :LV_MANDT
                            AND INVNR = ANLA.INVNR
                            AND VALLAST < IT.BUDAT ) ,
                                                                           /*Дата проводки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( ANEK.BUDAT ), '00000000' ) )
                           FROM FAAV_ANEP
                           JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = FAAV_ANEP.MANDT
                                                 AND ANEK.BUKRS = FAAV_ANEP.BUKRS
                                                 AND ANEK.ANLN1 = FAAV_ANEP.ANLN1
                                                 AND ANEK.ANLN2 = FAAV_ANEP.ANLN2
                                                 AND ANEK.LNRAN = FAAV_ANEP.LNRAN
                          WHERE FAAV_ANEP.MANDT = :LV_MANDT
                            AND FAAV_ANEP.BUKRS = IT.BUKRS
                            AND FAAV_ANEP.ANLN1 = IT.ANLN1
                            AND FAAV_ANEP.ANLN2 = IT.ANLN2
                            AND FAAV_ANEP.AFABE = '01'
                            AND FAAV_ANEP.BWASL IN ( SELECT VALFROM
                                                       FROM SETLEAF
                                                      WHERE SETCLASS = '0000'
                                                        AND SUBCLASS = ''
                                                        AND SETNAME  = 'Z_TTYPE_AMORT'
                                                        AND MANDT    = :LV_MANDT )
                           AND  ANEK.BUDAT <= IT.BUDAT ),

                           ( SELECT TO_DATS( COALESCE ( MAX( ADATU ), '00000000' ) )  /*Дата установки данного кода амортизации*/
                             FROM ANLBZA
                             WHERE MANDT = :LV_MANDT
                               AND BUKRS =  IT.BUKRS
                               AND ANLN1 =  IT.ANLN1
                               AND ANLN2 =  IT.ANLN2
                               AND AFABE =  '01'
                               AND AFASL =  IT.AFASL
                               AND ADATU <= IT.BUDAT ),

                           ( SELECT TO_DATS( COALESCE ( MAX( ADATU ), '00000000' ) ) /*Дата изменения СПИ*/
                               FROM ANLBZA
                               WHERE MANDT = :LV_MANDT
                                 AND BUKRS =  IT.BUKRS
                                 AND ANLN1 =  IT.ANLN1
                                 AND ANLN2 =  IT.ANLN2
                                 AND AFABE =  '01'
                                 AND ADATU <= IT.BUDAT )

                                                          ) as budat,
          IT.BUDAT as rep_date

          FROM :IT_AM_ST AS IT

            INNER JOIN ANLA AS ANLA ON ANLA.MANDT = :LV_MANDT
                                   AND ANLA.BUKRS = IT.BUKRS
                                   AND ANLA.ANLN1 = IT.ANLN1
                                   AND ANLA.ANLN2 = IT.ANLN2
                                   AND ANLA.ZUGDT <= IT.BUDAT
            INNER JOIN T093C AS T093C ON T093C.MANDT = :LV_MANDT
                                     AND T093C.BUKRS = IT.BUKRS ;

    /*определение наибольшей даты для инв номера и признака , это дата загрузки или нет*/
    LT_DATE_LAST =
      SELECT INVNR,
             ANLN2,
             BUDAT,
             CASE WHEN LEAD(INVNR) OVER (PARTITION BY INVNR ORDER BY BUDAT) IS NULL THEN 'X' ELSE '' END AS MAX_DATE,
             CASE WHEN BUDAT = DATUM THEN 'X' ELSE '' END AS LOAD,
             REP_DATE
             FROM :LT_DATES_ALL
             ;

    LT_DATE_LAST = SELECT * FROM :LT_DATE_LAST WHERE MAX_DATE = 'X';

    LT_RET =
    -- ФОРМИРОВАНИЕ Аморт стоим по Инв №
    SELECT
        INVNR AS INVNR,
        ANLN2,
        SUM(NETVL) AS NETVL
      FROM (
        -- ВЫБОРКА ЗНАЧЕНИЙ НА НАЧАЛО ГОДА
        SELECT
             ANLA.INVNR AS INVNR,
             ANLC.MANDT AS CLIENT,
             ANLC.BUKRS AS BUKRS,
             ANLC.ANLN1 AS ANLN1,
             ANLC.ANLN2 AS ANLN2,
             ANLC.AFABE AS AFABE,
             ANLC.KANSW + ANLC.KAUFW + ANLC.KNAFA +  ANLC.KAAFA + ANLC.KAUFN
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.ANSWL ELSE 0.00 END
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.NAFAV ELSE 0.00 END
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.SAFAV ELSE 0.00 END AS NETVL

          FROM ANLA
          JOIN :LT_DATE_LAST as LD ON LD.INVNR = ANLA.INVNR
                                  AND LD.ANLN2 = ANLA.ANLN2
                                  AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
          JOIN FAAV_ANLC AS ANLC ON ANLA.BUKRS = ANLC.BUKRS
                                AND ANLA.ANLN1 = ANLC.ANLN1
                                AND ANLA.ANLN2 = ANLC.ANLN2
                                AND ANLC.AFABE = '01'
                                AND ANLC.MANDT = :LV_MANDT
                                AND ANLC.GJAHR =  YEAR( LD.BUDAT )
          WHERE ANLA.MANDT = :LV_MANDT

        UNION ALL
         -- ВЫБОРКА ДВИЖЕНИЙ СТОИМОСТИ И ИЗНОСА С НАЧАЛА ГОДА ДО ОТЧЕТНОЙ ДАТЫ
        SELECT
            LD.INVNR AS INVNR,
            ANEP.MANDT AS MANDT,
            ANEP.BUKRS AS BUKRS,
            ANEP.ANLN1 AS ANLN1,
            ANEP.ANLN2 AS ANLN2,
            ANEP.AFABE AS AFABE,
            ANEP.ANBTR
            + COALESCE( ANEA.AUFWV, 0 ) + COALESCE( ANEA.AUFWL, 0 )
            + COALESCE( ANEA.NAFAV, 0 ) + COALESCE( ANEA.NAFAL, 0 )
            + COALESCE( ANEA.AAFAV, 0 ) + COALESCE( ANEA.AAFAL, 0 )
            + COALESCE( ANEA.AUFNV, 0 ) + COALESCE( ANEA.AUFNL, 0 )  AS NETVL

          FROM FAAV_ANEP AS ANEP
            JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = ANEP.MANDT
                                  AND ANEK.BUKRS = ANEP.BUKRS
                                  AND ANEK.ANLN1 = ANEP.ANLN1
                                  AND ANEK.ANLN2 = ANEP.ANLN2
                                  AND ANEK.GJAHR = ANEP.GJAHR
                                  AND ANEK.LNRAN = ANEP.LNRAN
            JOIN ANLA ON ANLA.MANDT = ANEK.MANDT
                     AND ANLA.BUKRS = ANEK.BUKRS
                     AND ANLA.ANLN1 = ANEK.ANLN1
                     AND ANLA.ANLN2 = ANEK.ANLN2

            JOIN :LT_DATE_LAST as LD ON LD.INVNR = ANLA.INVNR
                                    AND LD.ANLN2 = ANLA.ANLN2
                                    AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
            JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                             AND TABW.BWASL = ANEP.BWASL
            INNER JOIN TABWG AS TABWG ON  TABWG.MANDT = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP
                                    AND TABWG.BWATYP <> '4'

            LEFT JOIN FAAV_ANEA AS ANEA ON  ANEA.MANDT = ANEP.MANDT
                                        AND ANEA.BUKRS = ANEP.BUKRS
                                        AND ANEA.ANLN1 = ANEP.ANLN1
                                        AND ANEA.ANLN2 = ANEP.ANLN2
                                        AND ANEA.GJAHR = ANEP.GJAHR
                                        AND ANEA.AFABE = ANEP.AFABE
                                        AND ANEA.LNRAN = ANEP.LNRAN
                                        AND ANEA.ZUCOD = ANEP.ZUCOD

          WHERE ANEP.MANDT = :LV_MANDT
            AND ANEP.GJAHR =  YEAR ( LD.BUDAT )
            AND ANEP.AFABE = '01'
            AND ANEK.BUDAT <= LD.BUDAT
            AND YEAR ( ANEK.BUDAT ) = YEAR ( LD.BUDAT )

        UNION ALL
         -- ВЫБОРКА АМОРТИЗАЦИИ С НАЧАЛА ГОДА ДО ОТЧЕТНОГО МЕСЯЦА
        SELECT
            LD.INVNR AS INVNR,
            ANLP.MANDT AS MANDT,
            ANLP.BUKRS AS BUKRS,
            ANLP.ANLN1 AS ANLN1,
            ANLP.ANLN2 AS ANLN2,
            ANLP.AFABER AS AFABE,
            ANLP.NAFAZ + ANLP.AAFAZ +  ANLP.AUFNG  as NETVL

          FROM FAAV_ANLP AS ANLP
            JOIN ANLA ON ANLA.MANDT = ANLP.MANDT
                     AND ANLA.BUKRS = ANLP.BUKRS
                     AND ANLA.ANLN1 = ANLP.ANLN1
                     AND ANLA.ANLN2 = ANLP.ANLN2

            JOIN :LT_DATE_LAST AS LD  ON LD.INVNR = ANLA.INVNR
                              AND LD.ANLN2 = ANLA.ANLN2
                              AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
          WHERE ANLP.MANDT = :LV_MANDT
            AND ANLP.AFABER = '01'
            AND ANLP.GJAHR = YEAR ( LD.BUDAT )
            AND RIGHT( ANLP.PERAF, 2 ) <= MONTH( LD.BUDAT )
      )
        GROUP BY INVNR, ANLN2;

    ET_AM_ST =
    SELECT
        IT.BUKRS,
        IT.ANLN1,
        IT.ANLN2,
        IT.BUDAT,
    --    RET.NETVL
        CASE WHEN VALS.BUDAT <= IT.BUDAT
             THEN  COALESCE(VALS.NETVL, RET.NETVL)
             ELSE RET.NETVL END AS NETVL

     FROM :IT_AM_ST AS IT
       JOIN ANLA ON  ANLA.MANDT = :LV_MANDT
                 AND ANLA.BUKRS = IT.BUKRS
                 AND ANLA.ANLN1 = IT.ANLN1
                 AND ANLA.ANLN2 = IT.ANLN2
       JOIN :LT_RET AS RET ON ANLA.INVNR = RET.INVNR
                          AND ANLA.ANLN2 = RET.ANLN2
       LEFT JOIN :ET_VALS AS VALS ON VALS.BUKRS = IT.BUKRS
                                 AND VALS.ANLN1 = IT.ANLN1
                                 AND VALS.ANLN2 = IT.ANLN2
      ;

  ENDMETHOD.


  METHOD get_asset_amort_value BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                               USING
                               FAAV_ANLC
                               FAAV_ANEP FAAV_ANEK
                               FAAV_ANEA
                               FAAV_ANLP
                               ANLBZA
                               TABW
                               ZREVDATE FAAV_ANEK SETLEAF T093C ANLA
                               TABWG.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT( 'CLIENT' );

    LT_DATES_ALL =               /* выборка возможных дат расчета амортизируемой стоимости */
       SELECT ANLA.INVNR,
              ANLA.ANLN1,
              ANLA.ANLN2,
              T093C.DATUM,                                                  /*Дата загрузки*/
              GREATEST( T093C.DATUM,                                        /*Дата загрузки*/
                        ANLA.AKTIV,                                         /*Дата оприходования*/
                                                                            /*Дата переоценки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( VALLAST ), '00000000' ) )
                           FROM ZREVDATE
                          WHERE MANDT = :LV_MANDT
                            AND INVNR = ANLA.INVNR
                            AND VALLAST < IT.BUDAT ) ,
                                                                           /*Дата проводки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( ANEK.BUDAT ), '00000000' ) )
                           FROM FAAV_ANEP
                           JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = FAAV_ANEP.MANDT
                                                 AND ANEK.BUKRS = FAAV_ANEP.BUKRS
                                                 AND ANEK.ANLN1 = FAAV_ANEP.ANLN1
                                                 AND ANEK.ANLN2 = FAAV_ANEP.ANLN2
                                                 AND ANEK.LNRAN = FAAV_ANEP.LNRAN
                          WHERE FAAV_ANEP.MANDT = :LV_MANDT
                            AND FAAV_ANEP.BUKRS = IT.BUKRS
                            AND FAAV_ANEP.ANLN1 = IT.ANLN1
                            AND FAAV_ANEP.ANLN2 = IT.ANLN2
                            AND FAAV_ANEP.AFABE = '01'
                            AND FAAV_ANEP.BWASL IN ( SELECT VALFROM
                                                       FROM SETLEAF
                                                      WHERE SETCLASS = '0000'
                                                        AND SUBCLASS = ''
                                                        AND SETNAME  = 'Z_TTYPE_AMORT'
                                                        AND MANDT    = :LV_MANDT )
                            AND ( ANEK.BUDAT < IT.BUDAT OR ANEK.BUDAT = IT.BUDAT AND :IV_EOD = 'X' ) ),
                                                                         /* дата изменения СПИ*/
                          ( SELECT TO_DATS( COALESCE( MAX( LAST_DAY( ADD_DAYS(LEFT(ADATU,6) || '01',-1))) , '00000000' ) )
                              FROM ANLBZA WHERE BUKRS = IT.BUKRS
                                            AND ANLN1 = IT.ANLN1
                                            AND ANLN2 = IT.ANLN2
                                            AND AFABE = '01'
                                            AND MANDT = :LV_MANDT
                                            AND ( ADATU <= IT.BUDAT AND ADATU > '19000101' ) )
                             ) as BUDAT
            FROM :IT_AM_ST AS IT
            INNER JOIN ANLA AS ANLA ON ANLA.MANDT = :LV_MANDT
                                   AND ANLA.BUKRS = IT.BUKRS
                                   AND ANLA.ANLN1 = IT.ANLN1
                                   AND ANLA.ANLN2 = IT.ANLN2
                                   AND ANLA.ZUGDT <= IT.BUDAT
            INNER JOIN T093C AS T093C ON T093C.MANDT = :LV_MANDT
                                     AND T093C.BUKRS = IT.BUKRS ;

    /*определение наибольшей даты для инв номера и признака , это дата загрузки или нет*/
    LT_DATE_LAST =
      SELECT INVNR,
             ANLN2,
             BUDAT,
             CASE WHEN LEAD(INVNR) OVER (PARTITION BY INVNR ORDER BY BUDAT) IS NULL THEN 'X' ELSE '' END AS MAX_DATE,
             CASE WHEN BUDAT = DATUM THEN 'X' ELSE '' END AS LOAD
             FROM :LT_DATES_ALL;
    LT_DATE_LAST = SELECT * FROM :LT_DATE_LAST WHERE MAX_DATE = 'X';

    LT_RET =
    -- ФОРМИРОВАНИЕ Аморт стоим по Инв №
    SELECT
        INVNR AS INVNR,
        ANLN2,
        SUM(NETVL) AS NETVL
      FROM (
        -- ВЫБОРКА ЗНАЧЕНИЙ НА НАЧАЛО ГОДА
        SELECT
             ANLA.INVNR AS INVNR,
             ANLC.MANDT AS CLIENT,
             ANLC.BUKRS AS BUKRS,
             ANLC.ANLN1 AS ANLN1,
             ANLC.ANLN2 AS ANLN2,
             ANLC.AFABE AS AFABE,
             ANLC.KANSW + ANLC.KAUFW + ANLC.KNAFA +  ANLC.KAAFA + ANLC.KAUFN
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.ANSWL ELSE 0.00 END
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.NAFAV ELSE 0.00 END
             + CASE WHEN LD.LOAD = 'X' THEN ANLC.SAFAV ELSE 0.00 END AS NETVL
          FROM ANLA
          JOIN :LT_DATE_LAST as LD ON LD.INVNR = ANLA.INVNR
                                  AND LD.ANLN2 = ANLA.ANLN2
                                  AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
          JOIN FAAV_ANLC AS ANLC ON ANLA.BUKRS = ANLC.BUKRS
                                AND ANLA.ANLN1 = ANLC.ANLN1
                                AND ANLA.ANLN2 = ANLC.ANLN2
                                AND ANLC.AFABE = '01'
                                AND ANLC.MANDT = :LV_MANDT
                                AND ANLC.GJAHR =  YEAR( LD.BUDAT )
          WHERE ANLA.MANDT = :LV_MANDT
        UNION ALL
**         -- ВЫБОРКА ДВИЖЕНИЙ СТОИМОСТИ И ИЗНОСА С НАЧАЛА ГОДА ДО ОТЧЕТНОЙ ДАТЫ
        SELECT
            LD.INVNR AS INVNR,
            ANEP.MANDT AS MANDT,
            ANEP.BUKRS AS BUKRS,
            ANEP.ANLN1 AS ANLN1,
            ANEP.ANLN2 AS ANLN2,
            ANEP.AFABE AS AFABE,
            ANEP.ANBTR + COALESCE( ANEA.AUFWV + ANEA.AUFWL + ANEA.NAFAV + ANEA.NAFAL + ANEA.AAFAV + ANEA.AAFAL + ANEA.AUFNV + ANEA.AUFNL, 0 )
            AS NETVL
          FROM FAAV_ANEP AS ANEP
            JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = ANEP.MANDT
                                  AND ANEK.BUKRS = ANEP.BUKRS
                                  AND ANEK.ANLN1 = ANEP.ANLN1
                                  AND ANEK.ANLN2 = ANEP.ANLN2
                                  AND ANEK.GJAHR = ANEP.GJAHR
                                  AND ANEK.LNRAN = ANEP.LNRAN
            JOIN ANLA ON ANLA.MANDT = ANEK.MANDT
                     AND ANLA.BUKRS = ANEK.BUKRS
                     AND ANLA.ANLN1 = ANEK.ANLN1
                     AND ANLA.ANLN2 = ANEK.ANLN2
            JOIN :LT_DATE_LAST as LD ON LD.INVNR = ANLA.INVNR
                                    AND LD.ANLN2 = ANLA.ANLN2
                                    AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
            JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                             AND TABW.BWASL = ANEP.BWASL
            INNER JOIN TABWG AS TABWG ON  TABWG.MANDT = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP
                                    AND TABWG.BWATYP <> '4'
            LEFT OUTER JOIN FAAV_ANEA AS ANEA ON  ANEA.MANDT = ANEP.MANDT
                                              AND ANEA.BUKRS = ANEP.BUKRS
                                              AND ANEA.ANLN1 = ANEP.ANLN1
                                              AND ANEA.ANLN2 = ANEP.ANLN2
                                              AND ANEA.GJAHR = ANEP.GJAHR
                                              AND ANEA.AFABE = ANEP.AFABE
                                              AND ANEA.LNRAN = ANEP.LNRAN
                                              AND ANEA.ZUCOD = ANEP.ZUCOD
          WHERE ANEP.MANDT = :LV_MANDT
            AND ANEP.GJAHR =  YEAR ( LD.BUDAT )
            AND ANEP.AFABE = '01'
            AND ANEK.BUDAT <= LD.BUDAT
        UNION ALL
**         -- ВЫБОРКА АМОРТИЗАЦИИ С НАЧАЛА ГОДА ДО ОТЧЕТНОГО МЕСЯЦА
        SELECT
            LD.INVNR AS INVNR,
            ANLP.MANDT AS MANDT,
            ANLP.BUKRS AS BUKRS,
            ANLP.ANLN1 AS ANLN1,
            ANLP.ANLN2 AS ANLN2,
            ANLP.AFABER AS AFABE,
            ANLP.NAFAZ + ANLP.AAFAZ +  ANLP.AUFNG  as NETVL
          FROM FAAV_ANLP AS ANLP
            JOIN ANLA ON ANLA.MANDT = ANLP.MANDT
                     AND ANLA.BUKRS = ANLP.BUKRS
                     AND ANLA.ANLN1 = ANLP.ANLN1
                     AND ANLA.ANLN2 = ANLP.ANLN2
            JOIN :LT_DATE_LAST AS LD  ON LD.INVNR = ANLA.INVNR
                              AND LD.ANLN2 = ANLA.ANLN2
                              AND  ( ANLA.DEAKT >= LD.BUDAT OR ANLA.DEAKT < '19000101' )
          WHERE ANLP.MANDT = :LV_MANDT
            AND ANLP.AFABER = '01'
            AND ANLP.GJAHR = YEAR ( LD.BUDAT )
            AND RIGHT( ANLP.PERAF, 2 ) <= MONTH( LD.BUDAT )
      )
        GROUP BY INVNR, ANLN2;

    ET_AM_ST =
    SELECT
        IT.BUKRS,
        IT.ANLN1,
        IT.ANLN2,
        IT.BUDAT,
        RET.NETVL
     FROM :IT_AM_ST AS IT
       JOIN ANLA ON  ANLA.MANDT = :LV_MANDT
                 AND ANLA.BUKRS = IT.BUKRS
                 AND ANLA.ANLN1 = IT.ANLN1
                 AND ANLA.ANLN2 = IT.ANLN2
       JOIN :LT_RET AS RET ON ANLA.INVNR = RET.INVNR
                          AND ANLA.ANLN2 = RET.ANLN2
      ;

  ENDMETHOD.


METHOD get_asset_values
   BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
         OPTIONS READ-ONLY
         USING FAAV_ANLC FAAV_ANEP FAAV_ANEK FAAV_ANEA FAAV_ANLP TABW TABWG
         .

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT( 'CLIENT' );

    ET_VALS =
    -- ФОРМИРОВАНИЕ ИТОГОВЫХ СТРОК РАЗРЕЗЕ ОС И ОБЛАСТИ ОЦЕНКИ
    SELECT
        BUKRS,
        ANLN1,
        ANLN2,
        budat,
        SUM(KANSW) + SUM(KAUFW) + SUM(KNAFA) +  SUM(KAAFA) +  SUM(KAUFN) AS NETVL
      FROM (
        -- ВЫБОРКА ЗНАЧЕНИЙ НА НАЧАЛО ГОДА
        SELECT
             ANLC.BUKRS AS BUKRS,
             ANLC.ANLN1 AS ANLN1,
             ANLC.ANLN2 AS ANLN2,
             IT.BUDAT,
             ANLC.AFABE AS AFABE,
             ANLC.KANSW AS KANSW,
             ANLC.KAUFW,
             ANLC.KNAFA,
             ANLC.KAAFA,
             ANLC.KAUFN
          FROM FAAV_ANLC AS ANLC LEFT JOIN :IT_AM AS IT ON IT.BUKRS = ANLC.BUKRS
                                                       AND IT.ANLN1 = ANLC.ANLN1
                                                       AND IT.ANLN2 = ANLC.ANLN2
          WHERE ANLC.MANDT = :LV_MANDT
            AND ANLC.GJAHR = YEAR(IT.BUDAT)
            AND ANLC.AFABE = '01'

        UNION ALL
         -- ВЫБОРКА ДВИЖЕНИЙ СТОИМОСТИ И ИЗНОСА С НАЧАЛА ГОДА ДО ОТЧЕТНОЙ ДАТЫ
        SELECT
            ANEP.BUKRS AS BUKRS,
            ANEP.ANLN1 AS ANLN1,
            ANEP.ANLN2 AS ANLN2,
            IT.BUDAT,
            ANEP.AFABE AS AFABE,
            ANEP.ANBTR AS KANSW,
            ANEA.AUFWV + ANEA.AUFWL AS KAUFW,
            ANEA.NAFAV + ANEA.NAFAL AS KNAFA,
            ANEA.AAFAV + ANEA.AAFAL AS KAAFA,
            ANEA.AUFNV + ANEA.AUFNL AS KAUFN

          FROM FAAV_ANEP AS ANEP

            INNER JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = ANEP.MANDT
                                        AND ANEK.BUKRS = ANEP.BUKRS
                                        AND ANEK.ANLN1 = ANEP.ANLN1
                                        AND ANEK.ANLN2 = ANEP.ANLN2
                                        AND ANEK.GJAHR = ANEP.GJAHR
                                        AND ANEK.LNRAN = ANEP.LNRAN

            LEFT JOIN :IT_AM AS IT ON IT.BUKRS = ANEK.BUKRS
                                  AND IT.ANLN1 = ANEK.ANLN1
                                  AND IT.ANLN2 = ANEK.ANLN2

            INNER JOIN TABW AS TABW ON TABW.MANDT = ANEP.MANDT
                                    AND TABW.BWASL = ANEP.BWASL

            INNER JOIN TABWG AS TABWG ON  TABWG.MANDT = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP
                                    AND TABWG.BWATYP <> '4'

            LEFT OUTER JOIN FAAV_ANEA AS ANEA ON  ANEA.MANDT = ANEP.MANDT
                                              AND ANEA.BUKRS = ANEP.BUKRS
                                              AND ANEA.ANLN1 = ANEP.ANLN1
                                              AND ANEA.ANLN2 = ANEP.ANLN2
                                              AND ANEA.GJAHR = ANEP.GJAHR
                                              AND ANEA.AFABE = '01'
                                              AND ANEA.LNRAN = ANEP.LNRAN
                                              AND ANEA.ZUCOD = ANEP.ZUCOD
          WHERE ANEP.MANDT = :LV_MANDT
            AND ANEP.AFABE = '01'
            AND ANEP.GJAHR = YEAR ( IT.BUDAT )
            AND ANEK.BUDAT <= IT.BUDAT
            AND ANEP.AUGLN = '00000'

        UNION ALL
         -- ВЫБОРКА АМОРТИЗАЦИИ С НАЧАЛА ГОДА ДО ОТЧЕТНОГО МЕСЯЦА
        SELECT
            ANLP.BUKRS AS BUKRS,
            ANLP.ANLN1 AS ANLN1,
            ANLP.ANLN2 AS ANLN2,
            IT.BUDAT,
            ANLP.AFABER AS AFABE,
            0           AS KANSW,
            0           AS KAUFW ,
            ANLP.NAFAZ AS KNAFA,
            ANLP.AAFAZ AS KAAFA,
            ANLP.AUFNG AS KAUFN
          FROM FAAV_ANLP AS ANLP
            LEFT JOIN :IT_AM AS IT ON IT.BUKRS = ANLP.BUKRS
                                  AND IT.ANLN1 = ANLP.ANLN1
                                  AND IT.ANLN2 = ANLP.ANLN2
          WHERE ANLP.MANDT = :LV_MANDT
            AND ANLP.GJAHR = YEAR(IT.BUDAT)
            AND ANLP.PERAF <= LPAD(MONTH( IT.BUDAT ), 3, '0' )
            AND ANLP.AFABER = '01'
      )
      GROUP BY BUKRS,ANLN1,ANLN2,budat
       ;

  ENDMETHOD.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                  USING ANLA T001 SKAT GLOFAAASSETDATA J_3RFDEPRGROUPT ANKT T001L
                        ANLZ T095 ZAFULL ZANLU ANLU ZAA_UTILS_HDB=>GET_ASSET_SPI
                        J_3RFTOKOF ANLB ZAA_KUMO
                        ZCL_ZFI_D_NLIOS=>GET_ASSET_AMORT_ST
                        "ZAA_UTILS_HDB=>GET_ASSET_AMORT_ST
                        zaa_utils_hdb=>get_asset_values_y
                        FAAV_ANEK ZAA_UTILS_HDB=>GET_ASSET_VALUES
                        FAAV_ANEP T093C ZREVDATE SETLEAF ANLBZA
                        FAAV_ANLP
                        FAAT_PLAN_VALUES.

    DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    --ОБЛАСТЬ ОЦЕНКИ
    DECLARE LV_AFABE CHAR(2) := '01';

    --ДАТА ОТЧЕТА
    DECLARE LV_BUDAT CHAR(8) := :IV_DATE;
    DECLARE LV_BDATE CHAR(8) := LEFT( :IV_DATE, 4 ) || '0101';

    DECLARE LV_DATADD   CHAR(8) := TO_DATS( ADD_DAYS( :IV_DATE, 1) );    -- НОВЫЙ МЕСЯЦ

    DECLARE LV_KTOPL CHAR(4) := 'BNFT';

    --ОС
    LT_DATA =
      SELECT ANLA.MANDT,
             ANLA.BUKRS,
             T001.BUTXT                                         AS NAME_BE,    -- НАИМЕНОВАНИЕ  БЕ
             GLOFA.GLO_RUS_DEPGR                                AS DEPGR,      -- ГРУППА АММОРТИЗАЦИИ
             GROUPT.DESCRIPT                                    AS DEPTX,      -- НАИМЕНОВАНИЕ ГРУППЫ АММОРТИЗАЦИИ
             ANLA.ANLKL                                         AS ANLKL,      -- КЛАСС
             ANKT.TXK20                                         AS ANLKL_NAME, -- НАИМЕНОВАНИЕ КЛАССА
             T095.KTANSW                                        AS ACCOUNT,    -- СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
             SKAT.TXT20                                         AS HKONT_NAME, -- НАИМЕНОВАНИЕ СЧЕТА
             ANLA.ANLN1,                                                       -- ОС
             ANLA.ANLN2,                                                       -- СУБНОМЕР
             ANLA.INVNR,                                                       -- ИНВЕНТАРНЫЙ НОМЕР
             ZAFULL.TXTF1 || CHAR(32) || ZAFULL.TXTF2           AS NAME_OC,    -- НАИМЕНОВАНИЕ ОС
             ZANLU.UTVDATE                                      AS UTVDATE,    -- ДАТА ВВОДА ОБЪЕКТА
             ANLU.ZZBUDATE                                      AS ZZBUDATE,   -- ДАТА ПРИНЯТИЯ К Б/У
             GLOFA.GLO_RUS_OKOF                                 AS OKOF,       -- ШИФР НОРМАТИВНОГО СРОКА СЛУЖБЫ
            CAST(SR.UMSROKGD AS INT)                            AS UMSROKGD,   -- НОРМАТИВНЫЙ СРОК СЛУЖБЫ, ЛЕТ
            CAST(SR.FUMSROKPRD AS INT)                          AS FUMSROKPRD, -- НОРМАТИВНЫЙ СРОК СЛУЖБЫ, МЕСЯЦЕВ
            ANLB.AFASL                                          AS AFASL,      -- КОД АМОРТИЗАЦИИ
            CAST(COALESCE(SPI.NDJAR, ANLB.NDJAR) AS INT)        AS NDJAR,      -- СПИ, ЛЕТ
            CAST(COALESCE(SPI.NDPER, ANLB.NDPER) AS INT)        AS NDPER,      -- СПИ, МЕСЯЦЕВ
            SPI.RESTJ                                           AS RESTJ,      -- ОСТАТОЧНЫЙ СРОК СЛУЖБЫ, ЛЕТ
            SPI.RESTP                                           AS RESTP,      -- ОСТАТОЧНЫЙ СРОК СЛУЖБЫ, МЕСЯЦЕВ
            KUMO.K_UMO                                          AS K_UMO,      -- КОЭФФИЦИЕНТ УСКОРЕНИЯ
            COALESCE( NULLIF( (SELECT SUM( -NAFAZ )
                                 FROM FAAV_ANLP
                                WHERE MANDT = :LV_MANDT
                                  AND BUKRS = ANLA.BUKRS
                                  AND ANLN1 = ANLA.ANLN1
                                  AND ANLN2 = ANLA.ANLN2
                                  AND AFABER = :LV_AFABE
                                  AND GJAHR = LEFT(TO_DATS(ADD_DAYS(:IV_DATE, -1)), 4)
                                  AND RIGHT(PERAF, 2 ) = SUBSTRING(:IV_DATE, 5, 2 )), 0 ),
                       ( SELECT SUM( -HSL )
                         FROM FAAT_PLAN_VALUES
                        WHERE MANDT = :LV_MANDT
                          AND BUKRS = ANLA.BUKRS
                          AND ANLN1 = ANLA.ANLN1
                          AND ANLN2 = ANLA.ANLN2
                          AND AFABE = :LV_AFABE
                          AND GJAHR = LEFT(TO_DATS(ADD_DAYS(:IV_DATE, -1)), 4)
                          AND RIGHT(POPER, 2 ) = SUBSTRING(:IV_DATE, 5, 2 ))
                        )                                       AS AM_MONTH,   -- СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ

             COALESCE(ANLZ.LGORT,'')                            AS LGORT,      -- СКЛАД
             T001L.LGOBE                                        AS NAME_LGORT, -- НАИМЕНОВАНИЕ СКЛАДА
             ANLA.ZUGDT                                         AS ZUGDT       -- ДАТА ВВОДА


        FROM ANLA AS ANLA
          INNER JOIN T001 AS T001 ON T001.MANDT = ANLA.MANDT
                                 AND T001.BUKRS = ANLA.BUKRS
          INNER JOIN T095 AS T095 ON T095.MANDT = ANLA.MANDT
                                 AND T095.KTOGR = ANLA.KTOGR
                                 AND T095.AFABE = :LV_AFABE
          LEFT JOIN SKAT AS SKAT ON SKAT.MANDT = ANLA.MANDT
                                AND SKAT.SPRAS = :LV_SPRAS
                                AND SKAT.KTOPL = T001.KTOPL
                                AND SKAT.SAKNR = T095.KTANSW
          LEFT JOIN ZANLU AS ZANLU ON ZANLU.MANDT = ANLA.MANDT
                                  AND ZANLU.INVNR = ANLA.INVNR
          LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.MANDT = ANLA.MANDT
                                    AND ZAFULL.BUKRS = ANLA.BUKRS
                                    AND ZAFULL.ANLN1 = ANLA.ANLN1
                                    AND ZAFULL.ANLN2 = ANLA.ANLN2
          LEFT JOIN GLOFAAASSETDATA AS GLOFA ON GLOFA.MANDT = ANLA.MANDT
                                            AND GLOFA.BUKRS = ANLA.BUKRS
                                            AND GLOFA.ANLN1 = ANLA.ANLN1
                                            AND GLOFA.ANLN2 = ANLA.ANLN2
          LEFT JOIN J_3RFDEPRGROUPT AS GROUPT ON GROUPT.MANDT = GLOFA.MANDT
                                             AND GROUPT.SPRSL = :LV_SPRAS
                                             AND GROUPT.AMORTGR = GLOFA.GLO_RUS_DEPGR
          LEFT  JOIN J_3RFTOKOF     AS SR    ON SR.MANDT = GLOFA.MANDT
                                            AND SR.OKOF  = GLOFA.GLO_RUS_OKOF
          LEFT OUTER JOIN "ZAA_UTILS_HDB=>GET_ASSET_SPI" ( SESSION_CONTEXT('CLIENT'), :IV_DATE ) AS SPI
                                                        ON SPI.BUKRS = ANLA.BUKRS
                                                       AND SPI.ANLN1 = ANLA.ANLN1
                                                       AND SPI.ANLN2 = ANLA.ANLN2
                                                       AND SPI.AFABE = :LV_AFABE
          LEFT OUTER JOIN ANLB AS ANLB ON ANLB.MANDT = ANLA.MANDT
                                      AND ANLB.BUKRS = ANLA.BUKRS
                                      AND ANLB.ANLN1 = ANLA.ANLN1
                                      AND ANLB.ANLN2 = ANLA.ANLN2
                                      AND ANLB.ADATU <= :IV_DATE
                                      AND ANLB.BDATU >= :IV_DATE
                                      AND ANLB.AFABE = :LV_AFABE
          LEFT JOIN ZAA_KUMO AS KUMO ON KUMO.MANDT = ANLA.MANDT
                                    AND KUMO.INVNR = ANLA.INVNR
                                    AND KUMO.ADATU <= :IV_DATE
                                    AND KUMO.BDATU >= :IV_DATE
          LEFT JOIN ANKT AS ANKT ON ANKT.MANDT = ANLA.MANDT
                                AND ANKT.SPRAS = :LV_SPRAS
                                AND ANKT.ANLKL = ANLA.ANLKL
          LEFT JOIN ANLU AS ANLU ON ANLU.MANDT = ANLA.MANDT
                                AND ANLU.ANLN1 = ANLA.ANLN1
                                AND ANLU.ANLN2 = ANLA.ANLN2
          INNER JOIN ANLZ AS ANLZ ON ANLZ.MANDT = ANLA.MANDT
                                 AND ANLZ.BUKRS = ANLA.BUKRS
                                 AND ANLZ.ANLN1 = ANLA.ANLN1
                                 AND ANLZ.ANLN2 = ANLA.ANLN2
                                 AND ANLZ.BDATU >= :IV_DATE
          LEFT OUTER JOIN T001L AS T001L ON T001L.MANDT = ANLZ.MANDT
                                        AND T001L.WERKS = ANLZ.WERKS
                                        AND T001L.LGORT = ANLZ.LGORT
         WHERE ANLA.MANDT = :LV_MANDT
          AND ANLA.AKTIV < :IV_DATE AND ANLA.AKTIV > '19000101'
          AND ( ANLA.DEAKT <= '19000101' OR ANLA.DEAKT > :IV_DATE )
          AND ANLA.ZUGDT <> '00000000' AND ANLA.ZUGDT < :IV_DATE;

  LT_DATA = APPLY_FILTER ( :LT_DATA, :IV_FLT);
  IF IS_EMPTY ( :LT_DATA ) THEN RETURN; END IF;

  -- СТОИМОСТНЫЕ ДАННЫЕ ОС НА ДАТУ ОТЧЕТА
  LT_VALS =
    SELECT VALS.BUKRS,
           VALS.ANLN1,
           VALS.ANLN2,
           SUM( VALS.KANSW ) AS KANSW01,
           SUM( VALS.KAUFW ) AS KAUFW01,
           SUM( VALS.KNAFA ) AS KNAFA01,
           SUM( VALS.KAAFA ) AS KAAFA01,
           SUM( VALS.KAUFN ) AS KAUFN01,
           SUM( VALS.NETVL ) AS NETVL01

      --FROM "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( SESSION_CONTEXT('CLIENT'), :LV_DATADD ,  '' ) AS VALS
      FROM "ZAA_UTILS_HDB=>GET_ASSET_VALUES_Y"( SESSION_CONTEXT('CLIENT'), :IV_DATE,  ' ' ) AS VALS
        INNER JOIN :LT_DATA AS ANL ON ANL.BUKRS = VALS.BUKRS
                                   AND ANL.ANLN1 = VALS.ANLN1
                                   AND ANL.ANLN2 = VALS.ANLN2
      WHERE AFABE = :LV_AFABE
     GROUP BY VALS.BUKRS, VALS.ANLN1, VALS.ANLN2;

  -- СТОИМОСТНЫЕ ДАННЫЕ ОС НА ДАТУ ПОСЛЕДНЕЙ ПРОВОДКИ ПО ОС
    LT_VALS_DATS =
    SELECT VALS.BUKRS,
           VALS.ANLN1,
           VALS.ANLN2,
           SUM( VALS.KANSW ) AS KANSW01,
           SUM( VALS.KAUFW ) AS KAUFW01,
           SUM( VALS.KNAFA ) AS KNAFA01,
           SUM( VALS.KAAFA ) AS KAAFA01,
           SUM( VALS.KAUFN ) AS KAUFN01,
           SUM( VALS.NETVL ) AS NETVL01

      FROM "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( SESSION_CONTEXT('CLIENT'), :LV_DATADD ,  'X' ) AS VALS
        INNER JOIN :LT_DATA AS ANL ON ANL.BUKRS = VALS.BUKRS
                                   AND ANL.ANLN1 = VALS.ANLN1
                                   AND ANL.ANLN2 = VALS.ANLN2
      WHERE AFABE = :LV_AFABE
     GROUP BY VALS.BUKRS, VALS.ANLN1, VALS.ANLN2;

  -- РАССЧИТЫВАЕТСЯ АМОРТ СТОИМОСТЬ

  LT_ASSET_AMST =
    SELECT DISTINCT
           ANLA.BUKRS,
           ANLA.ANLN1,
           ANLA.ANLN2,
           ANLA.AFASL,

           --  :LV_BUDAT AS BUDAT
           CASE WHEN ( ANLA.AFASL = 'ZUMO' OR ANLA.AFASL = 'ZOSM'
           OR  ANLA.AFASL = 'ZSUM'
           )
           THEN LEFT (:LV_BUDAT, 6) || '01'
           ELSE :LV_BUDAT END AS BUDAT

      FROM :LT_DATA AS ANLA;

    CALL "ZCL_ZFI_D_NLIOS=>GET_ASSET_AMORT_ST"( '',:LT_ASSET_AMST, :LT_VALUE_AM, :lt_all_dates, :lt_am_vals ); -- #19501(45)
 --   CALL "ZAA_UTILS_HDB=>GET_ASSET_AMORT_ST"( '',:LT_ASSET_AMST, :LT_VALUE_AM );


  -- ВЫБОРКА ВОЗМОЖНЫХ ДАТ ДЛЯ ПЕРЕСЧЕТА СПИ
     LT_DATES_ALL =
       SELECT ANLA.BUKRS,
              ANLA.INVNR,
              ANLA.ANLN1,
              ANLA.ANLN2,
              T093C.DATUM,                                                  /*Дата загрузки*/
              GREATEST( T093C.DATUM,                                        /*Дата загрузки*/
                        ANLA.AKTIV,                                         /*Дата оприходования*/
                                                                            /*Дата переоценки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( VALLAST ), '00000000' ) )
                           FROM ZREVDATE
                          WHERE MANDT = :LV_MANDT
                            AND INVNR = ANLA.INVNR
                            AND VALLAST < :LV_BUDAT ) ,
                                                                           /*Дата изменения СПИ*/
                       ( SELECT TO_DATS( COALESCE ( MAX( ADATU ), '00000000' ) )
                           FROM ANLBZA
                           WHERE MANDT = :LV_MANDT
                                 AND BUKRS =  ANLA.BUKRS
                                 AND ANLN1 =  ANLA.ANLN1
                                 AND ANLN2 =  ANLA.ANLN2
                                 AND AFABE =  :LV_AFABE
                                 AND ADATU <= :LV_BUDAT),

                                                                           /*Дата проводки*/
                       ( SELECT TO_DATS( COALESCE ( MAX( ANEK.BUDAT ), '00000000' ) )
                           FROM FAAV_ANEP
                           JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = FAAV_ANEP.MANDT
                                                 AND ANEK.BUKRS = FAAV_ANEP.BUKRS
                                                 AND ANEK.ANLN1 = FAAV_ANEP.ANLN1
                                                 AND ANEK.ANLN2 = FAAV_ANEP.ANLN2
                                                 AND ANEK.LNRAN = FAAV_ANEP.LNRAN
                          WHERE FAAV_ANEP.MANDT = :LV_MANDT
                            AND FAAV_ANEP.BUKRS = IT.BUKRS
                            AND FAAV_ANEP.ANLN1 = IT.ANLN1
                            AND FAAV_ANEP.ANLN2 = IT.ANLN2
                            AND FAAV_ANEP.AFABE = '01'
                            AND FAAV_ANEP.BWASL IN ( SELECT VALFROM
                                                       FROM SETLEAF
                                                      WHERE SETCLASS = '0000'
                                                        AND SUBCLASS = ''
                                                        AND SETNAME  = 'Z_TTYPE_AMORT'
                                                        AND MANDT    = :LV_MANDT )
                            AND ANEK.BUDAT < :LV_BUDAT  ) ) as budat
          FROM :LT_DATA  AS IT
            INNER JOIN ANLA AS ANLA ON ANLA.MANDT = :LV_MANDT
                                   AND ANLA.BUKRS = IT.BUKRS
                                   AND ANLA.ANLN1 = IT.ANLN1
                                   AND ANLA.ANLN2 = IT.ANLN2
                                   AND ANLA.ZUGDT <= :LV_BUDAT
            INNER JOIN T093C AS T093C ON T093C.MANDT = :LV_MANDT
                                     AND T093C.BUKRS = IT.BUKRS ;

    -- ОПРЕДЕЛЕНИЕ НАИБОЛЬШЕЙ ДАТЫ
    LT_DATE_LAST =
      SELECT BUKRS,
             INVNR,
             ANLN1,
             ANLN2,
             BUDAT,
             CASE WHEN LEAD(INVNR) OVER (PARTITION BY INVNR ORDER BY BUDAT) IS NULL THEN 'X' ELSE '' END AS MAX_DATE,
             CASE WHEN BUDAT = DATUM THEN 'X' ELSE '' END AS LOAD
             FROM :LT_DATES_ALL;
    LT_DATE_LAST = SELECT * FROM :LT_DATE_LAST WHERE MAX_DATE = 'X';


   -- РАССЧИТЫВАЕМ СЧЛ
   LT_SCHL =
   SELECT
          LT_DATA.BUKRS,
          LT_DATA.INVNR,
          LT_DATA.ANLN1,
          LT_DATA.ANLN2,
          ROUND(((LT_DATA.NDJAR + LT_DATA.NDPER / 12 - MONTHS_BETWEEN(TO_DATE(LT_DATA.ZUGDT), TO_DATE(DT.BUDAT)) / 12 - FLOOR(MONTHS_BETWEEN(TO_DATE(DT.BUDAT), TO_DATE(:LV_BUDAT)) / 12)) *
          (LT_DATA.NDJAR + LT_DATA.NDPER / 12 - MONTHS_BETWEEN(TO_DATE(LT_DATA.ZUGDT), TO_DATE(DT.BUDAT)) / 12 - FLOOR(MONTHS_BETWEEN(TO_DATE(DT.BUDAT), TO_DATE(:LV_BUDAT)) / 12) + 1 )) / 2)
                                                              AS  SCHL         -- СУММА ЧИСЕЛ ЛЕТ СПИ
   FROM :LT_DATA AS LT_DATA
   LEFT JOIN :LT_DATE_LAST as DT ON DT.BUKRS = LT_DATA.BUKRS
                                AND DT.INVNR = LT_DATA.INVNR
                                AND DT.ANLN1 = LT_DATA.ANLN1
                                AND DT.ANLN2 = LT_DATA.ANLN2;

  ET_DATA =
      SELECT LT_DATA.BUKRS,
             LT_DATA.NAME_BE,                                                  -- НАИМЕНОВАНИЕ  БЕ
             LT_DATA.DEPGR,                                                    -- ГРУППА АММОРТИЗАЦИИ
             LT_DATA.DEPTX,                                                    -- НАИМЕНОВАНИЕ ГРУППЫ АММОРТИЗАЦИИ
             LT_DATA.LGORT || char(32) || LT_DATA.NAME_LGORT AS LGORT,         -- СКЛАД + НАИМЕНОВАНИЕ СКЛАДА
             LT_DATA.INVNR,                                                    -- ИНВЕНТАРНЫЙ НОМЕР
             LT_DATA.NAME_OC,                                                  -- НАИМЕНОВАНИЕ ОС
             LT_DATA.UTVDATE,                                                  -- ДАТА ВВОДА ОБЪЕКТА
             LT_DATA.ZZBUDATE,                                                 -- ДАТА ПРИНЯТИЯ К Б/У
             LT_DATA.OKOF,                                                     -- ШИФР НОРМАТИВНОГО СРОКА СЛУЖБЫ
             VALS.KANSW01                                    AS PERST,         -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
             ( VALS.KNAFA01 + VALS.KAAFA01 + VALS.KAUFN01 ) * -1 AS AMORT,     -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
             VALS.NETVL01                                   AS NETVL,          -- ОСТАТОЧНАЯ СТОИМОСТЬ

             CASE
                 WHEN LT_DATA.AFASL = 'ZUMO' THEN CASE WHEN VA.NETVL <> 0 THEN VA.NETVL ELSE VALSD.KANSW01 END
                 WHEN LT_DATA.AFASL = 'ZOSM' THEN CASE WHEN VA.NETVL <> 0 THEN VA.NETVL ELSE VALSD.KANSW01 END
                 WHEN LT_DATA.AFASL = 'ZSUM' THEN CASE WHEN VA.NETVL <> 0 THEN VA.NETVL ELSE VALSD.KANSW01 END END AS VALUE_AM,      -- АМОРТИЗИРУЕМАЯ СТОИМОСТЬ

             CAST(LT_DATA.UMSROKGD || char(32) || :IV_YEARS AS VARCHAR)
                                                             AS UMSROKGD,      -- НОРМАТИВНЫЙ СРОК СЛУЖБЫ, XX ЛЕТ
             CAST( LT_DATA.NDJAR || CHAR(32) || :IV_YEARS || CHAR(32) || LT_DATA.NDPER || CHAR(32) || :IV_MONTH AS VARCHAR)
                                                             AS SPI,           -- СПИ, XX лет, XX мес
             CAST( LT_DATA.RESTJ || CHAR(32) || :IV_YEARS || CHAR(32) || LT_DATA.RESTP || CHAR(32) || :IV_MONTH AS VARCHAR)
                                                             AS REST_SPI,      -- ОСТАТОЧНЫЙ СРОК СЛУЖБЫ, XX лет, XX мес

             12 * 100 * LT_DATA.AM_MONTH / NULLIF( CASE WHEN VA.NETVL <> 0 THEN VA.NETVL ELSE VALSD.KANSW01 END, 0 ) / COALESCE( LT_DATA.K_UMO, 1 )
                                                         AS YNORM,             -- ГОДОВАЯ НОРМА (%)

             100 * LT_DATA.AM_MONTH / NULLIF( CASE WHEN VA.NETVL <> 0 THEN VA.NETVL ELSE VALSD.KANSW01 END, 0 ) / COALESCE( LT_DATA.K_UMO, 1 )
                                                         AS MNORM,             -- МЕСЯЧНАЯ НОРМА (%)
             CASE
               WHEN LT_DATA.AFASL <> 'ZUMO' THEN SCHL.SCHL ELSE 0.00 END AS  SCHL, -- СУММА ЧИСЕЛ ЛЕТ СПИ
             LT_DATA.K_UMO,                                                    -- КОЭФФИЦИЕНТ УСКОРЕНИЯ
             LT_DATA.AM_MONTH,                                                 -- СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ
             -- ДОПОЛНИТЕЛЬНЫЕ ПОЛЯ
             LT_DATA.ANLKL,                                                    -- КЛАСС
             LT_DATA.ANLKL_NAME,                                               -- НАИМЕНОВАНИЕ КЛАССА
             LT_DATA.ACCOUNT,                                                  -- СЧЕТ БУХГАЛТЕРСКОГО УЧЕТА
             LT_DATA.HKONT_NAME,                                               -- НАИМЕНОВАНИЕ СЧЕТА
             LT_DATA.ANLN1,                                                    -- ОС
             LT_DATA.ANLN2,                                                    -- СУБНОМЕР
             LT_DATA.AFASL                                                     -- КОД АМОРТИЗАЦИИ
        FROM :LT_DATA AS LT_DATA
                  LEFT OUTER JOIN :LT_VALUE_AM AS VA ON  LT_DATA.BUKRS = VA.BUKRS
                                             AND VA.ANLN1 = LT_DATA.ANLN1
                                             AND VA.ANLN2 = LT_DATA.ANLN2
                  LEFT OUTER JOIN :LT_VALS AS VALS ON  VALS.BUKRS = LT_DATA.BUKRS
                                                   AND VALS.ANLN1 = LT_DATA.ANLN1
                                                   AND VALS.ANLN2 = LT_DATA.ANLN2
                  LEFT OUTER JOIN :LT_VALS_DATS AS VALSD ON  VALSD.BUKRS = LT_DATA.BUKRS
                                                         AND VALSD.ANLN1 = LT_DATA.ANLN1
                                                         AND VALSD.ANLN2 = LT_DATA.ANLN2
                  LEFT OUTER JOIN :LT_SCHL AS SCHL ON  SCHL.BUKRS = LT_DATA.BUKRS
                                                   AND SCHL.ANLN1 = LT_DATA.ANLN1
                                                   AND SCHL.ANLN2 = LT_DATA.ANLN2
        ORDER BY LT_DATA.BUKRS;

-- ДЛЯ EXCEL
  ET_EXC =
      SELECT
             ''      AS NP,
             ET_DATA.DEPGR,
             ET_DATA.LGORT,
             ET_DATA.INVNR,
             ET_DATA.NAME_OC,
             ET_DATA.UTVDATE,
             ET_DATA.ZZBUDATE,
             ET_DATA.OKOF,
             ET_DATA.PERST,
             ET_DATA.AMORT,
             ET_DATA.NETVL,
             ET_DATA.VALUE_AM,
             ET_DATA.UMSROKGD,
             ET_DATA.SPI,
             ET_DATA.REST_SPI,
             ET_DATA.YNORM,
             ET_DATA.MNORM,
             ET_DATA.SCHL,
             ET_DATA.K_UMO,
             ET_DATA.AM_MONTH
        FROM :ET_DATA AS ET_DATA
      UNION ALL
      SELECT
             ''      AS NP,
             ET_DATA.DEPGR,
             '9999'  AS LGORT,
             ''      AS INVNR,
             ''      AS NAME_OC,
             ''      AS UTVDATE,
             ''      AS ZZBUDATE,
             ''      AS OKOF,
             SUM(ET_DATA.PERST) AS PERST,
             SUM(ET_DATA.AMORT) AS AMORT,
             SUM(ET_DATA.NETVL) AS NETVL,
             SUM(ET_DATA.VALUE_AM) AS VALUE_AM,
             ''      AS UMSROKGD,
             ''      AS SPI,
             ''      AS REST_SPI,
             '0.00'      AS YNORM,
             '0.00'      AS MNORM,
             '0.00'      AS SCHL,
             '0.00'      AS K_UMO,
             SUM(ET_DATA.AM_MONTH) AS AM_MONTH
        FROM :ET_DATA AS ET_DATA

       GROUP BY ET_DATA.DEPGR;


  ET_ITOG =
        SELECT
             SUM(ET_DATA.PERST)            AS SUM_PERST,                           -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ, РУБ.КОП.
             SUM(ET_DATA.AMORT)            AS SUM_AMORT,                           -- СУММА НАКОПЛЕННОЙ АМОРТИЗАЦИИ, РУБ.КОП.
             SUM(ET_DATA.NETVL)            AS SUM_NETVL,                           -- ОСТАТОЧНАЯ СТОИМОСТЬ
             SUM(ET_DATA.VALUE_AM)         AS SUM_VALUE_AM,                        -- АМОРТИЗИРУЕМАЯ СТОИМОСТЬ
             SUM(ET_DATA.AM_MONTH)         AS SUM_AM_MONTH                         -- СУММА АМОРТИЗАЦИИ ЗА МЕСЯЦ
        FROM :ET_DATA AS ET_DATA;

  ET_SKAT =
    SELECT DISTINCT
        SKAT.SAKNR,
        SKAT.TXT50
      FROM SKAT AS SKAT
        INNER JOIN :LT_DATA AS LT_DATA ON LT_DATA.ACCOUNT = SKAT.SAKNR
      WHERE SKAT.MANDT = :LV_MANDT
        AND SKAT.SPRAS = :LV_SPRAS
        AND SKAT.KTOPL = :LV_KTOPL
        ORDER BY SKAT.SAKNR;

   --ПЕРЕЧИСЛЕНИЕ НОМЕРОВ БЕ ЧЕРЕЗ ЗАПЯТУЮ ДЛЯ EXCEL
    SELECT STRING_AGG( BUKRS, ', ') INTO EV_BUKRS
        FROM (
             SELECT
                 FIRST_VALUE(D.BUKRS) OVER ( PARTITION BY D.BUKRS ORDER BY D.BUKRS ) AS BUKRS
               FROM :ET_DATA AS D
               GROUP BY BUKRS) ;

   --ПЕРЕЧИСЛЕНИЕ НОМЕРОВ СЧЕТОВ ЧЕРЕЗ ЗАПЯТУЮ ДЛЯ EXCEL
    SELECT STRING_AGG( SAKNR, ', ') INTO EV_SAKNR
        FROM (
             SELECT
                 FIRST_VALUE(S.SAKNR) OVER ( PARTITION BY S.SAKNR ORDER BY S.SAKNR ) AS SAKNR
               FROM :ET_SKAT AS S
               GROUP BY SAKNR) ;


  ENDMETHOD.
ENDCLASS.