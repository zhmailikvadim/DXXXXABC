CLASS zfi_cl_dbpamort DEFINITION
  PUBLIC
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES:
      gty_t_bwasl TYPE RANGE OF fiaa_aw01_trans-bwasl .
    TYPES:
      BEGIN OF  gty_s_sscr,
        bukrs     TYPE anla-bukrs,
        ondate    TYPE fiaa_aw01_trans-bzdat,
        ona       TYPE ska1-saknr,
        ona_bukrs TYPE bukrs,
        repay     TYPE ska1-saknr,
        revenue   TYPE ska1-saknr,
        free      TYPE ska1-saknr,
        inno      TYPE ska1-saknr,
        attract   TYPE ska1-saknr,
        tax       TYPE proz_rp,
        variant   TYPE disvariant-variant,
        anlkl     TYPE anla-anlkl,
        anln1     TYPE anla-anln1,
        anln2     TYPE anla-anln2,
        bwasl     TYPE anep-bwasl,
        amopr     TYPE zmap_saknr_aufnr-oper_type,
        amopr_liz TYPE zmap_saknr_aufnr-oper_type,   " AK_BUTVILOVS #25439 ZFI_DBPAMORT - Перенос сумм финансовой помощи
        mode      TYPE c LENGTH 1,
        oldmode   TYPE c LENGTH 1,
        it_anlkl  TYPE range_anlkl_in_t,
        it_anln1  TYPE range_anln1_in_t,
        it_anln2  TYPE range_anln2_in_t,
        it_bwasl  TYPE gty_t_bwasl,
        incomes   TYPE gty_t_bwasl,
        retires   TYPE gty_t_bwasl,
        selection TYPE i,
      END OF gty_s_sscr .

    CLASS-DATA gs_sscr TYPE gty_s_sscr .

    CLASS-METHODS load_bwasl_range
      IMPORTING
        VALUE(iv_mode)  TYPE clike OPTIONAL
      CHANGING
        VALUE(ct_bwasl) TYPE gty_t_bwasl OPTIONAL .
    METHODS constructor .
    METHODS select_data
      IMPORTING
        VALUE(iv_use_bwasl) TYPE abap_bool DEFAULT abap_true
      RETURNING
        VALUE(rv_filter)    TYPE string .
    METHODS end_of_selection
      RETURNING
        VALUE(rv_ok) TYPE abap_bool .
    METHODS show_alv_screen .
    CLASS-METHODS f4_variant
      RETURNING
        VALUE(rv_variant) TYPE disvariant-variant .
    CLASS-METHODS f4_bwasl
      RETURNING
        VALUE(rv_bwasl) TYPE bwasl .
protected section.

  types:
    BEGIN OF gty_s_journal,
        status TYPE icon_132,
        belnr  TYPE zfi_dbpamort_hdb=>gty_s_common-belnr,
        anln1  TYPE zfi_dbpamort_hdb=>gty_s_common-anln1,
        anln2  TYPE zfi_dbpamort_hdb=>gty_s_common-anln2.
        INCLUDE TYPE bapiret2 AS bapiret.
    TYPES: END OF gty_s_journal .
  types:
    gty_t_journal TYPE STANDARD TABLE OF gty_s_journal WITH NON-UNIQUE SORTED KEY belnr COMPONENTS belnr .
  types:
    gty_t_ona TYPE STANDARD TABLE OF zfi_dbpamort_hdb=>gty_s_ona WITH DEFAULT KEY .

  data GR_GRID type ref to CL_GUI_ALV_GRID .
  data GR_DETAILS type ref to CL_GUI_ALV_GRID .
  data GT_JOURNAL type GTY_T_JOURNAL .
  data GR_DATA type ref to DATA .
  data GT_ONA type ZFI_DBPAMORT_HDB=>GTY_T_ONA .
  data GR_ONA type ref to GTY_T_ONA .
  data GR_OLD type ref to DATA .

  methods SET_DATA_FLAGS .
  methods MODIFY_ACCOUNTING_FCAT
    importing
      !IR_COLUMNS type ref to CL_SALV_COLUMNS_TABLE
    changing
      !CS_FCAT type LVC_S_FCAT .
  methods PROCESS_COMMAND
    importing
      !IM_FIELD type LVC_FNAME
      !IS_DATA type ZFI_DBPAMORT_HDB=>GTY_S_COMMON
    returning
      value(RV_HANDLED) type ABAP_BOOL .
  methods SHOW_BELNR_ACCOUNTING
    importing
      !IS_DATA type ZFI_DBPAMORT_HDB=>GTY_S_COMMON .
  methods CHANGE_FCAT_LINE
    changing
      value(CS_FCAT) type LVC_S_FCAT .
  methods SHOW_PROTOCOL
    importing
      value(IM_BELNR) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON-BELNR optional
      value(IM_REFRESH_MAIN) type ABAP_BOOL default 'X' .
  methods SET_PAGE_HEADER
    importing
      value(IR_CONTAINER) type ref to CL_GUI_CONTAINER .
  methods FILL_FIELDCAT
    importing
      value(IV_TYPE) type I
      value(IR_REF) type ref to DATA
    returning
      value(RT_FIELDCAT) type LVC_T_FCAT .
  methods ON_SALV_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods ON_SINGLE_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID .
  methods ON_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods POST_DOCUMENTS
    importing
      value(IS_HEADER) type BAPIACHE09 optional
      value(IT_CURRAMT) type BAPIACCR09_TAB optional
      value(IT_ACCGL) type BAPIACGL09_TAB optional
      value(IT_EXTENSION2) type T_BAPIPAREX optional
      value(IM_TEST) type ABAP_BOOL optional
      value(IS_DATA) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON optional
    returning
      value(RV_STATUS) type ICON_132 .
  methods ON_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods GET_DOCUMENT_HEADER
    returning
      value(RS_HEADER) type BAPIACHE09 .
  methods ADD_TO_JOURNAL
    importing
      value(IS_DATA) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON
      value(IT_RETURN) type BAPIRETURN_T
    returning
      value(RM_STATUS) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON-STATUS .
  methods MODIFY_MAIN_GRID
    importing
      value(IM_REFRESH) type ABAP_BOOL default 'X'
      value(IM_HIDE_CHECKBOX) type ABAP_BOOL default 'X' .
  methods DO_STORNO
    importing
      value(IS_DATA) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON
    returning
      value(RV_STATUS) type ICON_132 .
  methods RESOLVE_CHECKABLE
    importing
      value(IM_FIELD) type LVC_S_STYL-FIELDNAME optional
      value(IM_STYLE) type LVC_S_STYL-STYLE optional
    changing
      value(CS_DATA) type ANY .
  methods RAISE_ALL_DONE_MESSAGE .
  PRIVATE SECTION.

    METHODS get_icon
      IMPORTING
        !iv_type       TYPE clike
      RETURNING
        VALUE(rv_icon) TYPE icon_132 .
ENDCLASS.



CLASS ZFI_CL_DBPAMORT IMPLEMENTATION.


  METHOD add_to_journal.
    DATA: lc_status TYPE string VALUE 'A E W S'.

    gt_journal[] = VALUE #( BASE gt_journal[]
      FOR <ls_ret> IN it_return[]
      ( bapiret = <ls_ret>
        belnr = is_data-belnr
        status = me->get_icon( <ls_ret>-type )
        anln1 = is_data-anln1
        anln2 = is_data-anln2 ) ).

    SPLIT lc_status AT space INTO TABLE DATA(lt_status).

    "По статусам, от 'A' к 'S' - т.образом установится наиболее критичный
    LOOP AT lt_status[] ASSIGNING FIELD-SYMBOL(<ls_status>).
      TRY.
          rm_status = me->get_icon( gt_journal[ belnr = is_data-belnr type = <ls_status> ]-type ).
          EXIT.
        CATCH cx_sy_itab_line_not_found.
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.


  METHOD change_fcat_line.
    RETURN.
  ENDMETHOD.


  METHOD constructor.
  ENDMETHOD.


  METHOD do_storno.
    DATA: lv_message TYPE string,
          lt_return  TYPE STANDARD TABLE OF bapiret2.

    SPLIT is_data-belnr_ona AT '/' INTO TABLE DATA(it_belnr).

    SORT gt_ona[] BY belnr_ona storno_ona.

    LOOP AT it_belnr[] ASSIGNING FIELD-SYMBOL(<ls_belnr>).
      "Ранее не сторнированные
      READ TABLE gt_ona[] ASSIGNING FIELD-SYMBOL(<ls_ona>)
                                    WITH KEY belnr_ona  = <ls_belnr>
                                             storno_ona = ''
                                    BINARY SEARCH.
      CHECK sy-subrc = 0.

      CALL FUNCTION 'CALL_FB08'
        EXPORTING
          i_bukrs      = <ls_ona>-bukrs
          i_belnr      = <ls_ona>-belnr_ona
          i_gjahr      = <ls_ona>-gjahr
          i_stgrd      = '01'
        EXCEPTIONS
          not_possible = 1
          OTHERS       = 2.

      DATA(lv_subrc) = sy-subrc.

      IF sy-msgid IS NOT INITIAL.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4 INTO lv_message.
        lt_return[] = VALUE #( BASE lt_return[]
          ( type = sy-msgty
            id = sy-msgid
            number = sy-msgno
            message_v1 = sy-msgv1
            message_v2 = sy-msgv2
            message_v3 = sy-msgv3
            message_v4 = sy-msgv4
            message = lv_message ) ).
      ENDIF.

      IF lv_subrc EQ 0.
        MESSAGE s043(zaa) WITH <ls_ona>-belnr_ona INTO lv_message.
      ELSE.
        MESSAGE e044(zaa) WITH <ls_ona>-belnr_ona INTO lv_message.
      ENDIF.

      lt_return[] = VALUE #( BASE lt_return[]
        ( type = sy-msgty
          id = sy-msgid
          number = sy-msgno
          message_v1 = sy-msgv1
          message_v2 = sy-msgv2
          message_v3 = sy-msgv3
          message_v4 = sy-msgv4
          message = lv_message ) ).
    ENDLOOP.

    rv_status = me->add_to_journal( is_data = is_data it_return = lt_return[] ).

  ENDMETHOD.


  METHOD end_of_selection.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE,
                   <ls_data> TYPE zfi_dbpamort_hdb=>gty_s_common.

    IF NOT gr_data IS BOUND.
      RETURN.
    ENDIF.

    ASSIGN gr_data->* TO <lt_data>.
    IF <lt_data> IS ASSIGNED AND <lt_data>[] IS NOT INITIAL.
      rv_ok = abap_true.

      LOOP AT <lt_data>[] ASSIGNING <ls_data> CASTING.
        <ls_data>-status = me->get_icon( <ls_data>-status ).
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD f4_bwasl.
    DATA: lt_ret   TYPE STANDARD TABLE OF ddshretval.

    SELECT *
      FROM tabwt
      INTO TABLE @DATA(lt_tabwt)
      WHERE spras = @sy-langu.

    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield   = 'BWASL'
        dynpprog   = sy-repid
        dynpnr     = sy-dynnr
        value_org  = 'S'
      TABLES
        value_tab  = lt_tabwt[]
        return_tab = lt_ret[].

    TRY.
        rv_bwasl = lt_ret[ 1 ]-fieldval.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.

  ENDMETHOD.


  METHOD f4_variant.
    DATA(ls_vari) = VALUE disvariant( report = sy-cprog ).
    CALL FUNCTION 'LVC_VARIANT_F4'
      EXPORTING
        is_variant    = ls_vari
        i_save        = 'A'
      IMPORTING
        es_variant    = ls_vari
      EXCEPTIONS
        not_found     = 1
        program_error = 2
        OTHERS        = 3.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE 'I' NUMBER sy-msgno
                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      rv_variant = ls_vari-variant.
    ENDIF.

  ENDMETHOD.


  METHOD fill_fieldcat.
    DATA: lr_descr TYPE REF TO cl_abap_structdescr,
          lr_ref   TYPE REF TO data.
    DATA: lt_def    TYPE STANDARD TABLE OF dfies.
    FIELD-SYMBOLS: <lt_tab> TYPE STANDARD TABLE.

    rt_fieldcat[] = CORRESPONDING #(
      cl_salv_data_descr=>read_structdescr(
        CAST cl_abap_structdescr(
          CAST cl_abap_tabledescr( cl_abap_tabledescr=>describe_by_data_ref( ir_ref ) )->get_table_line_type( ) ) ) ).

    LOOP AT rt_fieldcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'ROW'.
          <ls_fcat>-tech = abap_true.
        WHEN 'CHECK'.
          <ls_fcat>-checkbox = abap_true.
          <ls_fcat>-edit = abap_true.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-scrtext_l = TEXT-04l.
          <ls_fcat>-scrtext_m = TEXT-04m.
          <ls_fcat>-scrtext_s = TEXT-04s.
          <ls_fcat>-reptext = TEXT-04l.
        WHEN 'ANLN1'.
          <ls_fcat>-txt_field = 'TXT50'.
          <ls_fcat>-hotspot = abap_true.
        WHEN 'INVNR'.
          <ls_fcat>-outputlen = 16.
        WHEN 'TXT50'.
          <ls_fcat>-outputlen = 30.
        WHEN 'BUKRS' OR 'ORD41' OR 'ZUGDT' OR 'DEAKT' OR 'GJAHR' OR 'DOCLN' OR 'WAERS' OR 'AWKEY'
            OR 'ROW_COLOR' OR 'SUM_STORNO'.
          <ls_fcat>-no_out = abap_true.
        WHEN 'STATUS'.
          <ls_fcat>-no_out = abap_true.
          <ls_fcat>-icon = abap_true.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-hotspot = abap_true.
          <ls_fcat>-scrtext_l = TEXT-06l.
          <ls_fcat>-scrtext_m = TEXT-06m.
          <ls_fcat>-scrtext_s = TEXT-06s.
          <ls_fcat>-reptext = TEXT-06l.
        WHEN OTHERS.
          me->change_fcat_line( CHANGING cs_fcat = <ls_fcat> ).
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


  METHOD get_document_header.
    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system = rs_header-obj_sys.
    rs_header-username = sy-uname.

    rs_header-bus_act    = 'RFBU'.
    rs_header-doc_type   = 'SA'.
    rs_header-doc_date   = sy-datum.
    rs_header-pstng_date = gs_sscr-ondate.
    rs_header-fisc_year =  gs_sscr-ondate(4).
    rs_header-fis_period = gs_sscr-ondate+4(2).
    rs_header-obj_type   = 'BKPFF'.
  ENDMETHOD.


  METHOD get_icon.
    rv_icon = SWITCH #( iv_type
                WHEN 'S' THEN icon_led_green
                WHEN 'I' THEN icon_led_green
                WHEN 'W' THEN icon_led_yellow
                WHEN 'E' THEN icon_led_red
                WHEN 'A' THEN icon_led_red ).
  ENDMETHOD.


  METHOD load_bwasl_range.
    IF iv_mode IS NOT SUPPLIED.
      DATA(lv_like) = |{ sy-cprog }_%|.

      SELECT name, sign, opti, low, high
        FROM tvarvc
        INTO TABLE @DATA(lt_bwasl)
        WHERE name LIKE @lv_like.

      gs_sscr = VALUE #(
        incomes = VALUE #(
          FOR <ls_bwasl> IN lt_bwasl[]
          WHERE ( name = |{ sy-cprog }_INCOME| )
          ( sign = <ls_bwasl>-sign option = <ls_bwasl>-opti low = <ls_bwasl>-low high = <ls_bwasl>-high ) )
        retires = VALUE #(
          FOR <ls_bwasl> IN lt_bwasl[]
          WHERE ( name = |{ sy-cprog }_RETIRE| )
          ( sign = <ls_bwasl>-sign option = <ls_bwasl>-opti low = <ls_bwasl>-low high = <ls_bwasl>-high ) ) ).

    ELSE.
      gs_sscr = VALUE #( BASE gs_sscr
        incomes = SWITCH #( gs_sscr-mode WHEN 'I' THEN ct_bwasl[] ELSE gs_sscr-incomes[] )
        retires = SWITCH #( gs_sscr-mode WHEN 'R' THEN ct_bwasl[] ELSE gs_sscr-retires[] )
        oldmode = gs_sscr-mode
        mode    = iv_mode ).

      ct_bwasl[] = SWITCH #( iv_mode
        WHEN 'I' THEN gs_sscr-incomes[]
        WHEN 'R' THEN gs_sscr-retires[] ).
    ENDIF.
  ENDMETHOD.


  METHOD modify_accounting_fcat.
    DATA: lr_column TYPE REF TO cl_salv_column_list.

    CASE cs_fcat-fieldname.
      WHEN 'IDX'.
        cs_fcat-tech = abap_true.
      WHEN 'BELNR'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-07l.
        cs_fcat-scrtext_m = TEXT-07m.
        cs_fcat-scrtext_s = TEXT-07s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'BELNR_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-08l.
        cs_fcat-scrtext_m = TEXT-08m.
        cs_fcat-scrtext_s = TEXT-08s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'STORNO_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-09l.
        cs_fcat-scrtext_m = TEXT-09m.
        cs_fcat-scrtext_s = TEXT-09s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'SUM_CARRIED'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-10l.
        cs_fcat-scrtext_m = TEXT-10m.
        cs_fcat-scrtext_s = TEXT-10s.
        cs_fcat-outputlen = 10.
        cs_fcat-do_sum = abap_true.
      WHEN 'SUM_STORNO'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-11l.
        cs_fcat-scrtext_m = TEXT-11m.
        cs_fcat-scrtext_s = TEXT-11s.
        cs_fcat-outputlen = 10.
        cs_fcat-do_sum = abap_true.
    ENDCASE.
  ENDMETHOD.


  METHOD modify_main_grid.
    IF im_hide_checkbox IS SUPPLIED.
      gr_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = DATA(lt_fcat) ).
      lt_fcat[ fieldname = 'CHECK' ]-no_out = im_hide_checkbox.

      lt_fcat[ fieldname = 'STATUS' ]-no_out = SWITCH #( im_hide_checkbox
        WHEN abap_true THEN abap_false
        WHEN abap_false THEN abap_true ).
      gr_grid->set_frontend_fieldcatalog( lt_fcat[] ).
    ENDIF.

    IF im_refresh = abap_true.
      gr_grid->refresh_table_display( ).
    ENDIF.
  ENDMETHOD.


  METHOD on_salv_click.
    DATA(lt_ona) = gr_ona->*.

    TRY.
        DATA(ls_data) = CORRESPONDING zfi_dbpamort_hdb=>gty_s_ona( lt_ona[ row ] ).
      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.

    DATA(lv_belnr) = SWITCH #( column
      WHEN 'BELNR' THEN ls_data-belnr
      WHEN 'BELNR_ONA' THEN ls_data-belnr_ona
      WHEN 'STORNO_ONA' THEN ls_data-storno_ona ).

    CHECK lv_belnr IS NOT INITIAL.
    SET PARAMETER ID 'BUK' FIELD ls_data-bukrs.
    SET PARAMETER ID 'BLN' FIELD lv_belnr.
    SET PARAMETER ID 'GJR' FIELD ls_data-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.

  ENDMETHOD.


  METHOD on_single_click.
    FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE.

    IF NOT gr_data IS BOUND.
      RETURN.
    ENDIF.

    ASSIGN gr_data->* TO <lt_data>.

    DATA(ls_data) = CORRESPONDING zfi_dbpamort_hdb=>gty_s_common( <lt_data>[ e_row_id-index ] ).

    IF me->process_command( im_field = e_column_id-fieldname is_data = ls_data ) = abap_true.
      RETURN.
    ENDIF.

    CASE e_column_id-fieldname.
      WHEN 'ANLN1'.
        CHECK ls_data-anln1 IS NOT INITIAL.
        SET PARAMETER ID 'BUK' FIELD ls_data-bukrs.
        SET PARAMETER ID 'AN1' FIELD ls_data-anln1.
        SET PARAMETER ID 'AN2' FIELD ls_data-anln2.
        CALL TRANSACTION 'AS03' AND SKIP FIRST SCREEN.
      WHEN 'BELNR'.
        CHECK ls_data-belnr IS NOT INITIAL.
        SET PARAMETER ID 'BUK' FIELD ls_data-bukrs.
        SET PARAMETER ID 'BLN' FIELD ls_data-belnr.
        SET PARAMETER ID 'GJR' FIELD ls_data-gjahr.
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      WHEN 'BELNR_ONA'.
        IF ls_data-belnr_ona IS NOT INITIAL.
          me->show_belnr_accounting( ls_data ).
        ENDIF.
      WHEN 'STATUS'.
        me->show_protocol( im_belnr = ls_data-belnr ).
    ENDCASE.
  ENDMETHOD.


  METHOD on_toolbar.
*--> #8000000273 AK_BUTVILOVS Разработка роли для просмотра z-транзакций по БНУ
*    e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
*  ( function = 'EXECUTE' icon = icon_transfer text = TEXT-t03 )
*  ( butn_type = 3 )
*  ( function = 'JOURNAL' icon = icon_protocol text = TEXT-t04 ) ).

    AUTHORITY-CHECK OBJECT 'ZBN_DISPLA'
          ID 'ACTVT' FIELD '02'.
    IF sy-subrc = 0.
      e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
                                                     ( function = 'EXECUTE' icon = icon_transfer text = TEXT-t03 )    " Выполнить проводки
                                                     ( butn_type = 3 ) ).
    ENDIF.
    e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
                                                   ( function = 'JOURNAL' icon = icon_protocol text = TEXT-t04 ) ).
*<-- #8000000273 AK_BUTVILOVS
  ENDMETHOD.


  METHOD on_user_command.

    gr_grid->get_selected_cells( IMPORTING et_cell = DATA(lt_cells) ).
    TRY.
        gs_sscr-selection = lt_cells[ 1 ]-row_id.
      CATCH cx_sy_itab_line_not_found.
    ENDTRY.

    CASE e_ucomm.
      WHEN 'EXECUTE'.
        me->post_documents( ).
        me->select_data( ).
        me->set_data_flags( ).
        gr_grid->refresh_table_display( is_stable = VALUE #( row = abap_true col = abap_true ) ).
      WHEN 'JOURNAL'.
        me->show_protocol( ).
    ENDCASE.

  ENDMETHOD.


  METHOD post_documents.
    DATA: lt_return TYPE STANDARD TABLE OF bapiret2.

    CALL FUNCTION 'BAPI_ACC_DOCUMENT_CHECK'
      EXPORTING
        documentheader = is_header
      TABLES
        accountgl      = it_accgl[]
        currencyamount = it_curramt[]
        extension2     = it_extension2[]
        return         = lt_return[].

    "Проверка на ошибочные документы - не пускаем к проводке проверки со статусом 'A и E'
    "ТипСообщ: S-успешно, E-ошибка, W-предупр., I-инфо, A-прерыв.
    LOOP AT lt_return[] ASSIGNING FIELD-SYMBOL(<ls_ret>) WHERE type = 'A' OR type = 'E'.
      EXIT.
    ENDLOOP.
    IF sy-subrc <> 0 AND im_test = abap_false.
      CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
        EXPORTING
          documentheader = is_header
        TABLES
          accountgl      = it_accgl[]
          currencyamount = it_curramt[]
          extension2     = it_extension2[]
          return         = lt_return[].

      "Проверка на ошибочные документы - не пускаем к проводке проверки со статусом 'A и E'
      "ТипСообщ: S-успешно, E-ошибка, W-предупр., I-инфо, A-прерыв.
      LOOP AT lt_return[] ASSIGNING <ls_ret> WHERE type = 'A' OR type = 'E'.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        EXIT.
      ENDLOOP.
      IF sy-subrc <> 0.     "Без ошибок
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.
      ENDIF.
    ENDIF.

    rv_status = me->add_to_journal( is_data = is_data it_return = lt_return[] ).
  ENDMETHOD.


  METHOD process_command.
    "Dummy, subclasses only
  ENDMETHOD.


  METHOD raise_all_done_message.
    MESSAGE TEXT-e00 TYPE 'I' DISPLAY LIKE 'E'.
  ENDMETHOD.


  METHOD resolve_checkable.
    FIELD-SYMBOLS: <lt_celltab> TYPE lvc_t_styl.

    IF im_field IS NOT SUPPLIED OR im_style IS NOT SUPPLIED.
      RETURN.
    ENDIF.

    ASSIGN COMPONENT 'CELLTAB' OF STRUCTURE cs_data TO <lt_celltab>.
    IF sy-subrc NE 0 OR <lt_celltab> IS NOT ASSIGNED.
      RETURN.
    ENDIF.

    APPEND VALUE lvc_s_styl( fieldname = im_field style = im_style ) TO <lt_celltab>[].

  ENDMETHOD.


  METHOD select_data.
    DATA(lt_seltabs) = VALUE if_shdb_def=>tt_named_dref(
      ( name = 'ANLKL' dref = REF #( gs_sscr-it_anlkl[] ) )
      ( name = 'ANLN1' dref = REF #( gs_sscr-it_anln1[] ) )
      ( name = 'ANLN2' dref = REF #( gs_sscr-it_anln2[] ) ) ).

    IF iv_use_bwasl = abap_true.
      lt_seltabs = VALUE #( BASE lt_seltabs
      ( name = 'BWASL' dref = REF #( gs_sscr-it_bwasl[] ) ) ).
    ENDIF.

    rv_filter = cl_shdb_seltab=>combine_seltabs( lt_seltabs[] ).

  ENDMETHOD.


  METHOD set_data_flags.
    "Dummy
  ENDMETHOD.


  METHOD set_page_header.
    IF cl_gui_alv_grid=>offline( ) IS NOT INITIAL.
      RETURN.
    ENDIF.

    DATA(lr_html) = NEW cl_dd_document( style = 'ALV_GRID' background_color = 35 ).
    gr_grid->list_processing_events( i_event_name = 'TOP_OF_PAGE' i_dyndoc_id = lr_html ).

    " Наименование БЕ
    zcl_names=>get_org_names( EXPORTING it_bukrs = VALUE #( ( sign = 'I' option = 'EQ' low = gs_sscr-bukrs ) )
                              IMPORTING ev_butxt = DATA(lv_butxt) ).

    lr_html->add_text( text = TEXT-t01 sap_emphasis = cl_dd_document=>strong ).
    lr_html->add_gap( width = 7 ).
    lr_html->add_text( text = gs_sscr-bukrs && ` (` && lv_butxt && `)` ).
    lr_html->new_line( ).
    lr_html->add_text( text = TEXT-t02 sap_emphasis = cl_dd_document=>strong ).
    lr_html->add_gap( width = 17 ).
    lr_html->add_text( text = |{ gs_sscr-ondate+6(2) }.{ gs_sscr-ondate+4(2) }.{ gs_sscr-ondate(4) }| ).
    lr_html->display_document( parent = ir_container ).

  ENDMETHOD.


  METHOD show_alv_screen.
    IF gr_grid IS BOUND.
      RETURN.
    ENDIF.

    "формирование каталога полей
    DATA(lt_fcat)    = me->fill_fieldcat( iv_type = 1 ir_ref = gr_data ).
    DATA(ls_variant) = VALUE disvariant( variant = gs_sscr-variant report = sy-cprog ).
    DATA(ls_layout)  = VALUE lvc_s_layo( zebra = abap_true col_opt = abap_true info_fname = 'ROW_COLOR' stylefname = 'CELLTAB' ).

    DATA(lr_splitter) = NEW cl_gui_splitter_container(
      parent = NEW cl_gui_custom_container( container_name = 'ALV_CONTAINER' )
      rows = 2
      columns = 1 ).
    lr_splitter->set_row_height( id = 1 height = 6 ).
    gr_grid = NEW #( i_parent = lr_splitter->get_container( row = 2 column = 1 ) ).

    ASSIGN gr_data->* TO FIELD-SYMBOL(<lt_data>).

    DATA(lt_exclude) = VALUE rsd_t_func(
      ( cl_gui_alv_grid=>mc_fc_loc_copy_row )
      ( cl_gui_alv_grid=>mc_fc_loc_cut )
      ( cl_gui_alv_grid=>mc_fc_loc_delete_row )
      ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
      ( cl_gui_alv_grid=>mc_fc_loc_move_row )
      ( cl_gui_alv_grid=>mc_fc_loc_paste )
      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
      ( cl_gui_alv_grid=>mc_fc_loc_append_row )
      ).

    gr_grid->set_table_for_first_display(
        EXPORTING is_layout             = ls_layout
                  i_save                = 'A'
                  it_toolbar_excluding  = lt_exclude[]
                  is_variant            = ls_variant
        CHANGING  it_outtab             = <lt_data>
                  it_fieldcatalog       = lt_fcat[] ).


    me->set_page_header( lr_splitter->get_container( row = 1 column = 1 ) ).

    SET HANDLER
      me->on_single_click
      me->on_user_command
      me->on_toolbar
      FOR gr_grid.

    gr_grid->set_toolbar_interactive( ).

  ENDMETHOD.


  METHOD show_belnr_accounting.
    DATA: lt_ona TYPE gty_t_ona,
          lr_alv TYPE REF TO cl_salv_table.

    lt_ona[] = VALUE #(
      FOR <ls_ona> IN gt_ona[]
        WHERE ( anln1 = is_data-anln1 AND anln2 = is_data-anln2 )                           " 8000000039, ОНА
*      WHERE ( bukrs = is_data-bukrs AND anln1 = is_data-anln1 AND anln2 = is_data-anln2 )    8000000039, ОНА
      ( <ls_ona> ) ).
    gr_ona = REF #( lt_ona ).

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = lt_ona[] ).
      CATCH cx_salv_msg.
    ENDTRY.

    DATA(lr_columns) = lr_alv->get_columns( ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      me->modify_accounting_fcat( EXPORTING ir_columns = lr_columns CHANGING cs_fcat = <ls_fcat> ).
    ENDLOOP.

    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    lr_sort->add_sort( 'ANLN1' ).
    lr_sort->add_sort( 'ANLN2' ).
    lr_sort->add_sort( 'BELNR' ).
    lr_sort->add_sort( 'GJAHR' ).
    lr_sort->add_sort( 'BELNR_ONA' ).

    DATA(lr_events) = lr_alv->get_event( ).
    SET HANDLER on_salv_click FOR lr_events.

    lr_alv->set_screen_popup(
      start_column = 15
      end_column  = 125
      start_line  = 10
      end_line    = 20 ).

    lr_alv->display( ).

  ENDMETHOD.


  METHOD show_protocol.
    DATA: lr_alv     TYPE REF TO cl_salv_table,
          lt_journal TYPE gty_t_journal.

    IF im_refresh_main EQ abap_true.
      gr_grid->refresh_table_display( ).
    ENDIF.

    IF im_belnr IS SUPPLIED.
      lt_journal[] = VALUE #(
        FOR <ls_jour> IN gt_journal[]
        WHERE ( belnr = im_belnr )
        ( <ls_jour> ) ).
    ELSE.
      lt_journal[] = gt_journal[].
    ENDIF.

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = lt_journal[] ).
      CATCH cx_salv_msg.
    ENDTRY.

    DATA(lr_columns) = lr_alv->get_columns( ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'STATUS'.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-just = 'C'.
          <ls_fcat>-scrtext_l = TEXT-06l.
          <ls_fcat>-scrtext_m = TEXT-06m.
          <ls_fcat>-scrtext_s = TEXT-06s.
          <ls_fcat>-reptext = TEXT-06l.
        WHEN 'TYPE' OR 'ID' OR 'NUMBER' OR 'PARAMETER' OR 'ROW' OR 'FIELD' OR 'SYSTEM'.
          <ls_fcat>-no_out = abap_true.
        WHEN 'MESSAGE'.
          <ls_fcat>-outputlen = 63.
        WHEN OTHERS.
          IF <ls_fcat>-fieldname CP 'MESSAGE_V+' OR <ls_fcat>-fieldname CP 'LOG_*'.
            <ls_fcat>-no_out = abap_true.
          ENDIF.
      ENDCASE.
    ENDLOOP.
    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    lr_sort->add_sort( 'BELNR' ).
    lr_sort->add_sort( 'ANLN1' ).
    lr_sort->add_sort( 'ANLN2' ).

    lr_alv->set_screen_popup(
      start_column = 10
      end_column  = 110
      start_line  = 5
      end_line    = 20 ).

    lr_alv->display( ).

  ENDMETHOD.
ENDCLASS.