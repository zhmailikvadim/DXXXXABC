CLASS zfi_cl_dbpamort_amort DEFINITION
  PUBLIC
  INHERITING FROM zfi_cl_dbpamort
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS constructor .

    METHODS select_data
        REDEFINITION .
  PROTECTED SECTION.

    TYPES:
      BEGIN OF gty_s_data.
        INCLUDE TYPE zfi_dbpamort_hdb=>gty_s_amort.
    TYPES: celltab TYPE lvc_t_styl,
           END OF gty_s_data .

    DATA:
      gt_data TYPE STANDARD TABLE OF gty_s_data WITH NON-UNIQUE KEY primary_key COMPONENTS bukrs anln1 anln2
                                                WITH NON-UNIQUE SORTED KEY check COMPONENTS check.
    DATA:
      gt_old  TYPE STANDARD TABLE OF gty_s_data WITH NON-UNIQUE SORTED KEY key COMPONENTS bukrs anln1 anln2 .

    METHODS change_fcat_line
        REDEFINITION .
    METHODS modify_accounting_fcat
        REDEFINITION .
    METHODS post_documents
        REDEFINITION .
    METHODS process_command
        REDEFINITION .
    METHODS resolve_checkable
        REDEFINITION .
    METHODS set_data_flags
        REDEFINITION .
  PRIVATE SECTION.

    DATA gc_afabe TYPE string .
ENDCLASS.



CLASS ZFI_CL_DBPAMORT_AMORT IMPLEMENTATION.


  METHOD change_fcat_line.
    super->change_fcat_line( CHANGING cs_fcat = cs_fcat ).

    cs_fcat-no_out = SWITCH #( cs_fcat-fieldname
      WHEN 'NAFAZ_25' OR 'AAFAZ_25' OR 'MAFAZ_25' OR 'AUFWZ_25' OR 'AUFNZ_25' THEN abap_true
      WHEN 'NAFAZ_26' OR 'AAFAZ_26' OR 'MAFAZ_26' OR 'AUFWZ_26' OR 'AUFNZ_26' THEN abap_true
      WHEN 'NAFAZ_27' OR 'AAFAZ_27' OR 'MAFAZ_27' OR 'AUFWZ_27' OR 'AUFNZ_27' THEN abap_true
      WHEN 'BLDAT' OR 'BUDAT' OR 'STBLG' THEN abap_true ) .

    DATA(lv_outlen) = 10.

    CASE cs_fcat-fieldname.
      WHEN 'AGREM_26' OR 'AGREM_27' OR 'AGREM_28'.
        cs_fcat-no_out = abap_true.
      WHEN 'PARTN_26' OR 'PARTN_27' OR 'PARTN_28'.
        cs_fcat-no_out = abap_true.
      WHEN 'BELNR_ONA'.
        cs_fcat-col_pos  = 100.                       "В конец списка
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-10l.
        cs_fcat-scrtext_m = TEXT-10m.
        cs_fcat-scrtext_s = TEXT-10s.
        cs_fcat-outputlen = lv_outlen.
        cs_fcat-hotspot = abap_true.
      WHEN 'KANSW'.
        cs_fcat-outputlen = lv_outlen.
      WHEN 'AMORT_25'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-00l.
        cs_fcat-scrtext_m = TEXT-00m.
        cs_fcat-scrtext_s = TEXT-00s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'AMORT_26'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-01l.
        cs_fcat-scrtext_m = TEXT-01m.
        cs_fcat-scrtext_s = TEXT-01s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'AMORT_27'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-02l.
        cs_fcat-scrtext_m = TEXT-02m.
        cs_fcat-scrtext_s = TEXT-02s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'DONE_25'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-03l.
        cs_fcat-scrtext_m = TEXT-03m.
        cs_fcat-scrtext_s = TEXT-03s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'DONE_26'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-04l.
        cs_fcat-scrtext_m = TEXT-04m.
        cs_fcat-scrtext_s = TEXT-04s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'DONE_27'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-05l.
        cs_fcat-scrtext_m = TEXT-05m.
        cs_fcat-scrtext_s = TEXT-05s.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'TODO_25'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-06l.
        cs_fcat-scrtext_m = TEXT-06m.
        cs_fcat-scrtext_s = TEXT-06s.
        cs_fcat-edit = abap_true.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'TODO_26'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-07l.
        cs_fcat-scrtext_m = TEXT-07m.
        cs_fcat-scrtext_s = TEXT-07s.
        cs_fcat-edit = abap_true.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'TODO_27'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-08l.
        cs_fcat-scrtext_m = TEXT-08m.
        cs_fcat-scrtext_s = TEXT-08s.
        cs_fcat-edit = abap_true.
        cs_fcat-outputlen = lv_outlen.

      WHEN 'TODO_ONA'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-09l.
        cs_fcat-scrtext_m = TEXT-09m.
        cs_fcat-scrtext_s = TEXT-09s.
        cs_fcat-edit = abap_true.
        cs_fcat-outputlen = lv_outlen.
      WHEN 'AUFNR'.
        cs_fcat-edit = abap_true.
        cs_fcat-f4availabl = abap_true.
        cs_fcat-ref_table = 'COAS'.
        cs_fcat-ref_field = cs_fcat-fieldname.
    ENDCASE.

  ENDMETHOD.


  METHOD constructor.
    super->constructor( ).
    gr_data = REF #( gt_data ).
  ENDMETHOD.


  METHOD modify_accounting_fcat.
    DATA: lr_column TYPE REF TO cl_salv_column_list.

    super->modify_accounting_fcat( EXPORTING ir_columns = ir_columns CHANGING cs_fcat = cs_fcat ).

    CASE cs_fcat-fieldname.
      WHEN 'BELNR'.
        cs_fcat-no_out = abap_true.
      WHEN 'BELNR_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-11l.
        cs_fcat-scrtext_m = TEXT-11m.
        cs_fcat-scrtext_s = TEXT-11s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'STORNO_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-12l.
        cs_fcat-scrtext_m = TEXT-12m.
        cs_fcat-scrtext_s = TEXT-12s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'SUM_CARRIED'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-13l.
        cs_fcat-scrtext_m = TEXT-13m.
        cs_fcat-scrtext_s = TEXT-13s.
        cs_fcat-outputlen = 10.
    ENDCASE.

  ENDMETHOD.


  METHOD post_documents.
    DATA: lt_curramt   TYPE STANDARD TABLE OF bapiaccr09,
          lt_accgl     TYPE STANDARD TABLE OF bapiacgl09,
          lt_extension TYPE STANDARD TABLE OF bapiparex.

    CLEAR gt_journal[].

    DATA(ls_header) = VALUE #( BASE me->get_document_header( )
      header_txt = TEXT-000 ).

    DATA: ls_common TYPE zfi_dbpamort_hdb=>gty_s_common.

    LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE check = abap_true.
      lt_curramt[] = VALUE #(
       " 5, 10 - проводки по 25 ООценки
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 5 amt_doccur = <ls_data>-todo_25 )
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 10 amt_doccur = - <ls_data>-todo_25 )
       " 15, 20 - проводки по 26 ООценки
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 15
         amt_doccur = <ls_data>-todo_26 )
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 20
         amt_doccur = - <ls_data>-todo_26 )

       " 25, 30 - проводки по 27 ООценки
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 25 amt_doccur = <ls_data>-todo_27 )
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 30 amt_doccur = - <ls_data>-todo_27 )
       " 35, 40 - проводки ОНА
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 35 amt_doccur = <ls_data>-todo_ona )
       ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00' itemno_acc = 40 amt_doccur = - <ls_data>-todo_ona ) ).

      lt_accgl[] = VALUE #(
        " 5, 10 - проводки по 25 ООценки
        ( itemno_acc = 5 comp_code = <ls_data>-bukrs gl_account = gs_sscr-free asset_no = <ls_data>-anln1 sub_number = <ls_data>-anln2
          ref_key_1 = <ls_data>-anln1 ref_key_2 = <ls_data>-anln2
          ref_key_3 = <ls_data>-belnr && <ls_data>-gjahr cmmt_item = 'TECH' part_acct = <ls_data>-partn_25 )
        ( itemno_acc = 10 comp_code = <ls_data>-bukrs gl_account = gs_sscr-revenue orderid = <ls_data>-aufnr
          asset_no = <ls_data>-anln1 sub_number = <ls_data>-anln2 part_acct = <ls_data>-partn_25 )

        " 15, 20 - проводки по 26 ООценки
        ( itemno_acc = 15 comp_code = <ls_data>-bukrs gl_account = gs_sscr-inno asset_no = <ls_data>-anln1
          sub_number = <ls_data>-anln2 ref_key_1 = <ls_data>-anln1 ref_key_2 = <ls_data>-anln2
          ref_key_3 = <ls_data>-belnr && <ls_data>-gjahr cmmt_item = 'TECH' part_acct = <ls_data>-partn_26 )
        ( itemno_acc = 20 comp_code = <ls_data>-bukrs gl_account = gs_sscr-revenue orderid = <ls_data>-aufnr
          asset_no = <ls_data>-anln1 sub_number = <ls_data>-anln2 part_acct = <ls_data>-partn_26 )

        " 25, 30 - проводки по 27 ООценки
        ( itemno_acc = 25 comp_code = <ls_data>-bukrs gl_account = gs_sscr-attract asset_no = <ls_data>-anln1
          sub_number = <ls_data>-anln2 ref_key_1 = <ls_data>-anln1 ref_key_2 = <ls_data>-anln2
          ref_key_3 = <ls_data>-belnr && <ls_data>-gjahr cmmt_item = 'TECH' part_acct = <ls_data>-partn_27 )
        ( itemno_acc = 30 comp_code = <ls_data>-bukrs gl_account = gs_sscr-revenue orderid = <ls_data>-aufnr
          asset_no = <ls_data>-anln1 sub_number = <ls_data>-anln2 part_acct = <ls_data>-partn_27 )

        " 35, 40 - проводки ОНА
         ( itemno_acc = 35 comp_code = gs_sscr-ona_bukrs gl_account = gs_sscr-repay asset_no = <ls_data>-anln1      " 8000000039, ОНА
*        ( itemno_acc = 35 comp_code = <ls_data>-bukrs gl_account = gs_sscr-repay asset_no = <ls_data>-anln1   " 8000000039, ОНА
          sub_number = <ls_data>-anln2 ref_key_1 = <ls_data>-anln1 ref_key_2 = <ls_data>-anln2
          ref_key_3 = <ls_data>-belnr && <ls_data>-gjahr cmmt_item = 'TECH' )
          ( itemno_acc = 40 comp_code = gs_sscr-ona_bukrs gl_account = gs_sscr-ona cmmt_item = 'TECH'     " 8000000039, ОНА
*        ( itemno_acc = 40 comp_code = <ls_data>-bukrs gl_account = gs_sscr-ona cmmt_item = 'TECH'   8000000039, ОНА
          asset_no = <ls_data>-anln1 sub_number = <ls_data>-anln2  ) ).

      lt_extension[] = VALUE #(
        structure = 'ACCIT'
          ( valuepart1 = 'ZZ_ANLN1' valuepart2 = <ls_data>-anln1 valuepart3 = 5 ) "Проводка по Счет ДБП (безвозмездно получ.)
          ( valuepart1 = 'ZZ_ANLN2' valuepart2 = <ls_data>-anln2 valuepart3 = 5 )
          ( valuepart1 = 'ZZ_INVNR' valuepart2 = <ls_data>-invnr valuepart3 = 5 )
          ( valuepart1 = 'ZZ_ANLN1' valuepart2 = <ls_data>-anln1 valuepart3 = 15 ) "Проводка по Счет ДБП (инновац.фонд)
          ( valuepart1 = 'ZZ_ANLN2' valuepart2 = <ls_data>-anln2 valuepart3 = 15 )
          ( valuepart1 = 'ZZ_INVNR' valuepart2 = <ls_data>-invnr valuepart3 = 15 )
          ( valuepart1 = 'ZZ_ANLN1' valuepart2 = <ls_data>-anln1 valuepart3 = 25 ) "Счет ДБП (привлеченные)
          ( valuepart1 = 'ZZ_ANLN2' valuepart2 = <ls_data>-anln2 valuepart3 = 25 )
          ( valuepart1 = 'ZZ_INVNR' valuepart2 = <ls_data>-invnr valuepart3 = 25 ) ).

      <ls_data>-status = super->post_documents(
        is_data       = CORRESPONDING #( <ls_data> )
        is_header     = ls_header
        it_curramt    = lt_curramt[]
        it_accgl      = lt_accgl[]
        it_extension2 = lt_extension[] ).
    ENDLOOP.
    IF sy-subrc NE 0.
      me->raise_all_done_message( ).
      RETURN.
    ENDIF.

    me->modify_main_grid( im_hide_checkbox = abap_true ).
    me->show_protocol( ).
  ENDMETHOD.


  METHOD process_command.
    IF super->process_command( im_field   = im_field is_data    = is_data ) = abap_true.
      RETURN.
    ENDIF.

  ENDMETHOD.


  METHOD resolve_checkable.
    DATA(ls_data) = CONV gty_s_data( cs_data ).
*--> Yermolovich 8000001187
*    IF ls_data-todo_ona LE 0 AND ls_data-todo_25 LE 0 AND ls_data-todo_26 LE 0 AND ls_data-todo_27 LE 0.
    IF ls_data-todo_ona EQ 0 AND ls_data-todo_25 EQ 0 AND ls_data-todo_26 EQ 0 AND ls_data-todo_27 EQ 0.
*<-- Yermolovich 8000001187
      super->resolve_checkable(
        EXPORTING
          im_field = 'CHECK'
          im_style = cl_gui_alv_grid=>mc_style_disabled
        CHANGING
          cs_data = cs_data ).
    ENDIF.

  ENDMETHOD.


  METHOD select_data.
    gt_old[] = gt_data[].
    CLEAR gt_data[].
    gr_old = REF #( gt_old[] ).

    DATA(lt_afabe) = VALUE tty_afabe_rang(
      ( sign = 'I' option = 'EQ' low = '25' )
      ( sign = 'I' option = 'EQ' low = '26' )
      ( sign = 'I' option = 'EQ' low = '27' ) ).

    DATA(lv_afabe) = cl_shdb_seltab=>combine_seltabs(
                        it_named_seltabs = VALUE #(
                          ( name = 'AFABER' dref = REF #( lt_afabe[] ) ) ) ).

    TRY.
        zfi_dbpamort_hdb=>get_amort(
          EXPORTING iv_bukrs       = gs_sscr-bukrs
                    iv_onabuk      = gs_sscr-ona_bukrs    "  # 8000000039, ОНА
                    iv_ondate      = gs_sscr-ondate
                    iv_saknr       = gs_sscr-revenue
                    iv_free        = gs_sscr-free
                    iv_inno        = gs_sscr-inno
                    iv_attrac      = gs_sscr-attract
                    iv_repay       = gs_sscr-repay
                    iv_tax         = gs_sscr-tax
                    iv_opertyp     = gs_sscr-amopr
                    iv_opertyp_liz = gs_sscr-amopr_liz " AK_BUTVILOVS #25439 ZFI_DBPAMORT - Перенос сумм финансовой помощи
                    iv_filter      = super->select_data( iv_use_bwasl = abap_false )
          IMPORTING et_amort       = DATA(lt_data)
                    et_ona         = gt_ona[] ).                   "Sorted, bukrs, anln1, anln2

      CATCH  cx_root.
        MESSAGE i999(zaa) WITH 'Ошибка вызова метода'(t00) 'ZFI_DBPAMORT=>GET_AMORT'.
        RETURN.
    ENDTRY.

    LOOP AT lt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>).
      IF substring_from( val = <ls_data>-belnr_ona sub = '/' ) <> ''.
        <ls_data>-belnr_ona = TEXT-001.
      ENDIF.
      APPEND CORRESPONDING #( <ls_data> ) TO me->gt_data[] ASSIGNING FIELD-SYMBOL(<ls_main>).
      me->resolve_checkable( CHANGING cs_data = <ls_main> ).
    ENDLOOP.

  ENDMETHOD.


  METHOD set_data_flags.
    super->set_data_flags( ).

    LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>).
      READ TABLE gt_old[] ASSIGNING FIELD-SYMBOL(<ls_old>) WITH KEY bukrs = <ls_data>-bukrs
                                                                    anln1 = <ls_data>-anln1
                                                                    anln2 = <ls_data>-anln2
                                                                BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_data>-status = <ls_old>-status.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.
ENDCLASS.