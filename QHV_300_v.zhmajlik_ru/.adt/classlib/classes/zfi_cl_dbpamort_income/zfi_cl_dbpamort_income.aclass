CLASS zfi_cl_dbpamort_income DEFINITION
  PUBLIC
  INHERITING FROM zfi_cl_dbpamort
  CREATE PUBLIC .

  PUBLIC SECTION.

    METHODS constructor .

    METHODS select_data
        REDEFINITION .
  PROTECTED SECTION.

    TYPES:
      BEGIN OF gty_s_data.
        INCLUDE TYPE zfi_dbpamort_hdb=>gty_s_income.
    TYPES: celltab TYPE lvc_t_styl,
           END OF gty_s_data.
    DATA:
      gt_data TYPE STANDARD TABLE OF gty_s_data WITH NON-UNIQUE KEY primary_key COMPONENTS bukrs anln1 anln2
                                                WITH NON-UNIQUE SORTED KEY check COMPONENTS check.
    DATA:
      gt_old  TYPE STANDARD TABLE OF gty_s_data WITH NON-UNIQUE KEY primary_key COMPONENTS bukrs anln1 anln2 .

    METHODS change_fcat_line
        REDEFINITION .
    METHODS modify_accounting_fcat
        REDEFINITION .
    METHODS post_documents
        REDEFINITION .
    METHODS resolve_checkable
        REDEFINITION .
    METHODS set_data_flags
        REDEFINITION .
  PRIVATE SECTION.
ENDCLASS.



CLASS ZFI_CL_DBPAMORT_INCOME IMPLEMENTATION.


  METHOD change_fcat_line.
    super->change_fcat_line( CHANGING cs_fcat = cs_fcat ).

    DATA(lv_sum_length) = 10.

    CASE cs_fcat-fieldname.
      WHEN 'BELNR'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = TEXT-04l.
        cs_fcat-scrtext_m = TEXT-04m.
        cs_fcat-scrtext_s = TEXT-04s.
        cs_fcat-reptext = TEXT-04l.
      WHEN 'SUM_AFABE01'.
        cs_fcat-scrtext_l = TEXT-00l.
        cs_fcat-scrtext_m = TEXT-00m.
        cs_fcat-scrtext_s = TEXT-00s.
        cs_fcat-reptext = TEXT-00l.
        cs_fcat-outputlen = lv_sum_length.
      WHEN 'SUM_AFABE25'.
        cs_fcat-scrtext_l = TEXT-01l.
        cs_fcat-scrtext_m = TEXT-01m.
        cs_fcat-scrtext_s = TEXT-01s.
        cs_fcat-reptext = TEXT-01l.
        cs_fcat-outputlen = lv_sum_length.
      WHEN 'SUM_CARRIED'.
        cs_fcat-scrtext_l = TEXT-02l.
        cs_fcat-scrtext_m = TEXT-02m.
        cs_fcat-scrtext_s = TEXT-02s.
        cs_fcat-reptext = TEXT-02l.
        cs_fcat-outputlen = lv_sum_length.
      WHEN 'SUM_CONDUCT'.
        cs_fcat-scrtext_l = TEXT-03l.
        cs_fcat-scrtext_m = TEXT-03m.
        cs_fcat-scrtext_s = TEXT-03s.
        cs_fcat-reptext = TEXT-03l.
        cs_fcat-outputlen = lv_sum_length.
        cs_fcat-edit = abap_true.
      WHEN 'BELNR_ONA'.
        cs_fcat-col_pos  = 100.                       "В конец списка
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-05l.
        cs_fcat-scrtext_m = TEXT-05m.
        cs_fcat-scrtext_s = TEXT-05s.
        cs_fcat-outputlen = lv_sum_length.
        cs_fcat-hotspot = abap_true.
    ENDCASE.
  ENDMETHOD.


  METHOD resolve_checkable.
    DATA(ls_data) = CONV gty_s_data( cs_data ).

    IF ls_data-sum_conduct LE 0.
      super->resolve_checkable( EXPORTING im_field = 'CHECK' im_style = cl_gui_alv_grid=>mc_style_disabled CHANGING cs_data = cs_data ).
    ENDIF.
  ENDMETHOD.


  METHOD modify_accounting_fcat.
    DATA: lr_column TYPE REF TO cl_salv_column_list.

    super->modify_accounting_fcat( EXPORTING ir_columns = ir_columns CHANGING cs_fcat = cs_fcat ).

    CASE cs_fcat-fieldname.
      WHEN 'BELNR'.
        cs_fcat-no_out = abap_true.
      WHEN 'BELNR_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-05l.
        cs_fcat-scrtext_m = TEXT-05m.
        cs_fcat-scrtext_s = TEXT-05s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'STORNO_ONA'.
        cs_fcat-hotspot = abap_true.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-06l.
        cs_fcat-scrtext_m = TEXT-06m.
        cs_fcat-scrtext_s = TEXT-06s.
        lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
    ENDCASE.
  ENDMETHOD.


  METHOD post_documents.
    DATA: lt_curramt TYPE STANDARD TABLE OF bapiaccr09,
          lt_accgl   TYPE STANDARD TABLE OF bapiacgl09.

    CLEAR gt_journal[].

    DATA(ls_header) = me->get_document_header( ).
    ls_header-header_txt = TEXT-000.

    DATA: ls_common TYPE zfi_dbpamort_hdb=>gty_s_common.

    LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE check = abap_true.
      IF <ls_data>-stblg IS NOT INITIAL AND <ls_data>-sum_conduct NE 0.
        <ls_data>-status = me->do_storno( is_data = CORRESPONDING #( <ls_data> ) ).
      ELSE.
        ls_header-ref_doc_no = <ls_data>-belnr && <ls_data>-gjahr.
        ls_header-obj_key   = <ls_data>-belnr && <ls_data>-gjahr.

        lt_curramt[] = VALUE #(
          ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00'
            itemno_acc = 10 amt_doccur = <ls_data>-sum_conduct )
          ( currency_iso = <ls_data>-waers currency = <ls_data>-waers curr_type = '00'
            itemno_acc = 20 amt_doccur = - <ls_data>-sum_conduct ) ).

        lt_accgl[] = VALUE #(
           ( itemno_acc = 10 comp_code = gs_sscr-ona_bukrs gl_account = gs_sscr-ona asset_no = <ls_data>-anln1  " 8000000039, ОНА
*          ( itemno_acc = 10 comp_code = <ls_data>-bukrs gl_account = gs_sscr-ona asset_no = <ls_data>-anln1    8000000039, ОНА
            sub_number = <ls_data>-anln2 ref_key_1 = <ls_data>-invnr ref_key_3 = <ls_data>-belnr && <ls_data>-gjahr cmmt_item = 'TECH' )
          ( itemno_acc = 20 comp_code = gs_sscr-ona_bukrs gl_account = gs_sscr-repay cmmt_item = 'TECH' ) ).   " 8000000039, ОНА
*          ( itemno_acc = 20 comp_code = <ls_data>-bukrs gl_account = gs_sscr-repay cmmt_item = 'TECH' ) ).   8000000039, ОНА

        <ls_data>-status = super->post_documents(
            is_data     = CORRESPONDING #( <ls_data> )
            is_header   = ls_header
            it_curramt  = lt_curramt[]
            it_accgl  = lt_accgl[] ).
      ENDIF.
    ENDLOOP.
    IF sy-subrc NE 0.
      me->raise_all_done_message( ).
      RETURN.
    ENDIF.

    me->modify_main_grid( im_hide_checkbox = abap_true ).
    me->show_protocol( ).

  ENDMETHOD.


  METHOD select_data.
    gt_old[] = gt_data[].
    CLEAR gt_data[].
    gr_old = REF #( gt_old[] ).

    TRY.
        zfi_dbpamort_hdb=>get_incomes(
          EXPORTING iv_bukrs  = gs_sscr-bukrs
                    iv_onabuk = gs_sscr-ona_bukrs    "  # 8000000039, ОНА
                    iv_ondate = gs_sscr-ondate
                    iv_ord41  = '15'
                    iv_tax    = gs_sscr-tax
                    iv_hkont  = gs_sscr-ona
                    iv_filter = super->select_data( ) && ` AND ( SUM_AFABE01 > 0 OR ( SUM_AFABE25 > 0 ) )`
          IMPORTING et_income = DATA(lt_data)
                    et_ona    = gt_ona[] ).       "Sorted by bukrs, anln1, anln2

      CATCH  cx_root.
        MESSAGE i999(zaa) WITH 'Ошибка вызова метода'(t00) 'ZFI_DBPAMORT=>GET_INCOMES'.
        RETURN.
    ENDTRY.

    LOOP AT lt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>).
      "Необходимо сторнировать проводки ОНА к сторнированому документу поступления
      IF <ls_data>-stblg IS NOT INITIAL.
        <ls_data>-sum_conduct = - <ls_data>-sum_carried.
        <ls_data>-row_color = 'C600'.
      ENDIF.

      IF substring_from( val = <ls_data>-belnr_ona sub = '/' ) <> ''.
        <ls_data>-belnr_ona = TEXT-001.
      ENDIF.

      APPEND CORRESPONDING #( <ls_data> ) TO gt_data[] ASSIGNING FIELD-SYMBOL(<ls_main>).
      me->resolve_checkable( CHANGING cs_data = <ls_main> ).
    ENDLOOP.

  ENDMETHOD.


  METHOD set_data_flags.
    super->set_data_flags( ).

    LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>).
      READ TABLE gt_old[] ASSIGNING FIELD-SYMBOL(<ls_old>) WITH KEY bukrs = <ls_data>-bukrs
                                                                    anln1 = <ls_data>-anln1
                                                                    anln2 = <ls_data>-anln2
                                                                BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_data>-status = <ls_old>-status.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD constructor.
    super->constructor( ).
    gr_data = REF #( gt_data ).
  ENDMETHOD.
ENDCLASS.