class ZFI_CL_NDS_FORORG definition
  public
  create public .

public section.

  types:
    BEGIN OF gty_s_sscr,
        p_bukrs   TYPE anla-bukrs,
        bukrs     TYPE RANGE OF acdoca-rbukrs,
        p_budat   TYPE acdoca-budat,
        budat     TYPE RANGE OF acdoca-budat,
        p_belnr   TYPE acdoca-belnr,
        belnr     TYPE RANGE OF acdoca-belnr,
        partner   TYPE but021_fs-partner,
        alt_saknr TYPE saknr,
        contract  TYPE zz_dopext_key, "zznumdog,
        variant   TYPE disvariant,
        p_land1   TYPE t001-land1,
        land1     TYPE RANGE OF t001-land1,
        p_lifnr   TYPE lfa1-lifnr,
        lifnr     TYPE RANGE OF lfa1-lifnr,
        todo_only TYPE abap_bool,
        begda     TYPE sy-datum,
        endda     TYPE sy-datum,
        newsql    TYPE abap_bool,
        p_mwskz   TYPE acdoca-mwskz,
        mwskz     TYPE RANGE OF acdoca-mwskz,
        acc_01    TYPE string,
        acc_02    TYPE string,
      END OF gty_s_sscr .
  types:
    BEGIN OF gty_s_eas_nds,
        bukrs TYPE bseg-bukrs,
        land1 TYPE lfa1-land1,
        mwskz TYPE bseg-mwskz,
        hkont TYPE bseg-hkont,
      END OF gty_s_eas_nds .
  types:
    gty_t_eas_nds TYPE HASHED TABLE OF gty_s_eas_nds WITH UNIQUE KEY bukrs land1 .

  class-data GS_SSCR type GTY_S_SSCR .

  methods CONSTRUCTOR
    importing
      !IS_SSCR type GTY_S_SSCR .
  methods END_OF_SELECTION_INORG
    returning
      value(RV_OK) type ABAP_BOOL .
  methods END_OF_SELECTION
    returning
      value(RV_OK) type ABAP_BOOL .
  methods SHOW_ALV_SCREEN .
  methods SHOW_ALV_INORG .
  methods SELECT_DATA .
  methods SELECT_DATA_INORG .
protected section.

  types:
    BEGIN OF gty_s_data,
      status TYPE icon_132.
      INCLUDE TYPE zfi_nds_fororg_hdb=>gty_s_data AS main.
  TYPES:
    belnr_text TYPE string,
    documents  TYPE zfi_nds_fororg_hdb=>gty_t_docs,
    celltab    TYPE lvc_t_styl,
    color      TYPE c LENGTH 4,
    long_name  TYPE string,
    END OF gty_s_data .
  types:
    BEGIN OF gty_s_data_inorg.
      INCLUDE TYPE zfi_nds_fororg_hdb=>gty_s_data_inorg AS main_inorg.
  TYPES:
    celltab TYPE lvc_t_styl,
    END OF gty_s_data_inorg .
  types:
    BEGIN OF gty_s_journal,
      status TYPE icon_132,
      belnr  TYPE zfi_dbpamort_hdb=>gty_s_common-belnr.
      INCLUDE TYPE bapiret2 AS bapiret.
  TYPES: END OF gty_s_journal .
  types:
    BEGIN  OF gty_s_position,
      idx   TYPE i,
      name  TYPE string,
      fwbas TYPE gty_s_data-fwbas,
      prozt TYPE gty_s_data-prozt,
      nds   TYPE gty_s_data-sum_todo,
    END OF gty_s_position .
  types:
    BEGIN OF gty_s_document,
      bukrs TYPE gty_s_data-bukrs,
      gjahr TYPE gty_s_data-gjahr,
      belnr TYPE gty_s_data-belnr,
      buzei TYPE gty_s_data-buzei,
    END OF gty_s_document .
  types:
    gty_t_documents TYPE SORTED TABLE OF gty_s_document WITH UNIQUE KEY bukrs  gjahr  belnr buzei .
  types:
    BEGIN  OF gty_s_out,
      name_org  TYPE string,
      period    TYPE string,
      butxt     TYPE string,
      acc_01    TYPE string,
      acc_02    TYPE string,
      acc_03    TYPE string,
      flag      TYPE abap_bool,
      positions TYPE STANDARD TABLE OF gty_s_position WITH DEFAULT KEY,
    END OF gty_s_out .

  data GR_GRID type ref to CL_GUI_ALV_GRID .
  data:
    gt_data       TYPE STANDARD TABLE OF gty_s_data WITH DEFAULT KEY .
  data:
    gt_data_inorg TYPE STANDARD TABLE OF gty_s_data_inorg WITH DEFAULT KEY .
  data:
    gt_jour TYPE STANDARD TABLE OF gty_s_journal WITH DEFAULT KEY .
  data GR_DOCS type ref to DATA .
  data COLOR_POSITIVE type CHAR4 value 'C300' ##NO_TEXT.

  methods READ_DOCUMENTS
    importing
      !IS_DATA type GTY_S_DATA
    returning
      value(RT_DOCUMENTS) type ZFI_NDS_FORORG_HDB=>GTY_T_DOCS .
  methods PERFORM_EXPORT .
  methods MODIFY_DOCUMENTS_FCAT
    importing
      value(IR_COLUMNS) type ref to CL_SALV_COLUMNS_TABLE
    changing
      value(CS_FCAT) type LVC_S_FCAT
    raising
      CX_SALV_NOT_FOUND .
  methods SHOW_DOCUMENTS
    changing
      !CT_DOCS type ZFI_NDS_FORORG_HDB=>GTY_T_DOCS
    raising
      CX_SALV_NOT_FOUND
      CX_SALV_DATA_ERROR .
  methods GET_DOCTEXT
    importing
      value(IS_DATA) type ZFI_NDS_FORORG_HDB=>GTY_S_DATA
      value(IT_DOCS) type ZFI_NDS_FORORG_HDB=>GTY_T_DOCS
    returning
      value(RV_TEXT) type STRING .
  methods FILL_FIELDCAT
    returning
      value(RT_FIELDCAT) type LVC_T_FCAT .
  methods FILL_FIELDCAT_INORG
    returning
      value(RT_FIELDCAT) type LVC_T_FCAT .
  methods FILL_CELLTAB
    importing
      value(IS_DATA) type ZFI_NDS_FORORG_HDB=>GTY_S_DATA
    returning
      value(RT_CELLTAB) type LVC_T_STYL .
  methods SHOW_PROTOCOL
    importing
      value(IM_BELNR) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON-BELNR optional
      value(IM_REFRESH_MAIN) type ABAP_BOOL default 'X'
    raising
      CX_SALV_NOT_FOUND
      CX_SALV_EXISTING
      CX_SALV_DATA_ERROR .
  methods ON_SINGLE_CLICK
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID .
  methods ON_SINGLE_CLICK_INORG
    for event HOTSPOT_CLICK of CL_GUI_ALV_GRID
    importing
      !E_ROW_ID
      !E_COLUMN_ID .
  methods ON_TOOLBAR
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods ON_TOOLBAR_INORG
    for event TOOLBAR of CL_GUI_ALV_GRID
    importing
      !E_OBJECT
      !E_INTERACTIVE .
  methods POST_DOCUMENTS
    raising
      CX_SALV_NOT_FOUND
      CX_SALV_EXISTING
      CX_SALV_DATA_ERROR .
  methods ON_USER_COMMAND_INORG
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods ON_USER_COMMAND
    for event USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
  methods MODIFY_MAIN_GRID
    importing
      value(IM_REFRESH) type ABAP_BOOL default 'X'
      value(IM_HIDE_CHECKBOX) type ABAP_BOOL default 'X' .
  methods ON_MARK_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED .
  methods ON_DATA_CHANGED_FINISHED
    for event DATA_CHANGED_FINISHED of CL_GUI_ALV_GRID
    importing
      !E_MODIFIED
      !ET_GOOD_CELLS .
  methods ON_MENU_BUTTON
    for event BEFORE_USER_COMMAND of CL_GUI_ALV_GRID
    importing
      !E_UCOMM .
private section.

  types:
    BEGIN OF gty_s_icon,
        status TYPE c LENGTH 1,
        name   TYPE icon-name,
        text   TYPE icon_132,
        qinfo  TYPE icon_132,
      END OF gty_s_icon .
  types:
    gty_t_icons TYPE STANDARD TABLE OF gty_s_icon WITH DEFAULT KEY .

  data GT_ICONS type GTY_T_ICONS .
  data GT_EAS_NDS type GTY_T_EAS_NDS .

  methods SAVE_TEXT
    importing
      !IV_XBLNR type XBLNR1
      !IV_BUKRS type BUKRS
      !IV_BELNR type BELNR_D
      !IV_GJAHR type GJAHR
      !IV_DOC_NUM type BELNR_D optional
      !IV_AWKEY type AWKEY optional .
  methods CONVERT_CHAR_TO_NUMERIC
    importing
      !IV_VALUE type C
    returning
      value(RV_RESULT) type MAXBT .
  methods GET_PERIOD_LASTDAY
    importing
      value(IM_PERIOD) type PRIOD optional
      value(IM_DATE) type SY-DATUM optional
    preferred parameter IM_PERIOD
    returning
      value(RV_DATE) type SY-DATUM .
  methods GET_POSITIONS
    changing
      !CS_OUT type GTY_S_OUT .
  methods GET_HEADER
    changing
      !CS_OUT type GTY_S_OUT .
  methods ON_SALV_CLICK
    for event LINK_CLICK of CL_SALV_EVENTS_TABLE
    importing
      !ROW
      !COLUMN .
  methods GET_ICON
    importing
      value(IM_STATUS) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON-STATUS
    returning
      value(RM_STATUS) type ZFI_DBPAMORT_HDB=>GTY_S_COMMON-STATUS .
  methods ADD_TO_JOURNAL_SET_STATUS
    importing
      value(IT_RETURN) type BAPIRETURN_T
      value(IT_DONE) type GTY_T_DOCUMENTS
      value(IS_DATA) type GTY_S_DATA
      value(IS_DOC) type BAPIACHE09 optional .
  methods GET_ORGNAME
    importing
      value(IS_DATA) type ZFI_NDS_FORORG_HDB=>GTY_S_DATA
    returning
      value(RV_TEXT) type STRING .
  methods GET_TAX
    importing
      value(IS_DATA) type ZFI_NDS_FORORG_HDB=>GTY_S_DATA_INORG
    returning
      value(RV_TEXT) type STRING .
ENDCLASS.



CLASS ZFI_CL_NDS_FORORG IMPLEMENTATION.


  METHOD add_to_journal_set_status.
    DATA(lt_return) = it_return[].

    LOOP AT lt_return[] ASSIGNING FIELD-SYMBOL(<ls_return>) WHERE type = 'S' AND id = 'RW' AND number = '605'.
      <ls_return> = VALUE #( BASE <ls_return>
        message_v2 = |{ <ls_return>-message_v2(10) }/{ <ls_return>-message_v2+10(2) }/{ <ls_return>-message_v2+14(4) }|
        message_v3 = '' ).
      MESSAGE ID <ls_return>-id TYPE <ls_return>-type NUMBER <ls_return>-number
        WITH <ls_return>-message_v1 <ls_return>-message_v2 <ls_return>-message_v3 INTO <ls_return>-message.
    ENDLOOP.

    gt_jour[] = VALUE #( BASE gt_jour[]
      FOR <ls_ret> IN lt_return[]
      ( bapiret = <ls_ret>
        belnr = is_data-belnr
        status = me->get_icon( CONV icon_132( <ls_ret>-type ) ) ) ).

    LOOP AT gt_icons[] ASSIGNING FIELD-SYMBOL(<ls_icon>).
      TRY.
          DATA(lv_status) = me->get_icon( CONV icon_132( gt_jour[ belnr = is_data-belnr type = <ls_icon>-status ]-type ) ).
          EXIT.
        CATCH cx_sy_itab_line_not_found.
          RETURN.
      ENDTRY.
    ENDLOOP.

    " Установить статус по всем проведенным
    LOOP AT it_done[] ASSIGNING FIELD-SYMBOL(<ls_done>).
      READ TABLE gt_data[] TRANSPORTING NO FIELDS
                           WITH KEY bukrs = <ls_done>-bukrs
                                    gjahr = <ls_done>-gjahr
                                    belnr = <ls_done>-belnr
                                    buzei = <ls_done>-buzei
                           BINARY SEARCH.
      IF sy-subrc = 0.
        LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>)
                          FROM sy-tabix  .
          IF   <ls_data>-bukrs <> <ls_done>-bukrs
            OR <ls_data>-gjahr <> <ls_done>-gjahr
            OR <ls_data>-belnr <> <ls_done>-belnr
            OR <ls_data>-buzei <> <ls_done>-buzei.
            EXIT.
          ENDIF.
          <ls_data>-status = lv_status.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD constructor.
    gs_sscr = is_sscr.

    gt_icons[] = VALUE gty_t_icons(
      ( status = ''  name = 'ICON_LED_INACTIVE' text = TEXT-ic0 qinfo = TEXT-iq0 )
      ( status = 'A' name = 'ICON_LED_GREEN'    text = TEXT-ic4 qinfo = TEXT-iq4 )
      ( status = 'E' name = 'ICON_LED_RED'      text = TEXT-ic2 qinfo = TEXT-iq2 )
      ( status = 'W' name = 'ICON_LED_YELLOW'   text = TEXT-ic1 qinfo = TEXT-iq1 )
      ( status = 'S' name = 'ICON_LED_GREEN'    text = TEXT-ic3 qinfo = TEXT-iq3 ) ).

  ENDMETHOD.


  METHOD convert_char_to_numeric.
    CALL FUNCTION 'CHAR_FLTP_CONVERSION'
      EXPORTING
        string = iv_value
      IMPORTING
        flstr  = rv_result.
  ENDMETHOD.


  METHOD end_of_selection.
    IF gt_data[] IS NOT INITIAL.
      rv_ok = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD END_OF_SELECTION_INORG.
    IF gt_data_inorg[] IS NOT INITIAL.
      rv_ok = abap_true.
    ENDIF.
  ENDMETHOD.


  METHOD fill_celltab.
    IF is_data-sum_diff = 0.
      INSERT LINES OF VALUE lvc_t_styl( style = cl_gui_alv_grid=>mc_style_disabled
                                      ( fieldname = 'CHECK' )
                                      ( fieldname = 'LAND1' )
                                      ( fieldname = 'SUM_DIFF') ) INTO TABLE rt_celltab.
    ENDIF.
    IF is_data-in_eas = 'X' OR is_data-sum_diff = 0 .
      INSERT LINES OF VALUE lvc_t_styl( style = cl_gui_alv_grid=>mc_style_disabled
        ( fieldname = 'CONTRACT' )
        ( fieldname = 'ALT_SAKNR' )
        ( fieldname = 'PARTNER'   ) ) INTO TABLE rt_celltab[].
    ENDIF.

  ENDMETHOD.


  METHOD fill_fieldcat.
    CONSTANTS lv_currlen TYPE lvc_s_fcat-outputlen VALUE 10.

    rt_fieldcat[] = CORRESPONDING #( cl_salv_data_descr=>read_structdescr(
        CAST cl_abap_structdescr( CAST cl_abap_tabledescr(
          cl_abap_tabledescr=>describe_by_data( gt_data[] ) )->get_table_line_type( ) ) ) ).
    LOOP AT rt_fieldcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      <ls_fcat>-no_out = SWITCH #( <ls_fcat>-fieldname
        WHEN 'GJAHR' OR 'BLDAT' OR 'LIFNR' OR 'KALSM' OR 'IN_EAS' THEN abap_true
        WHEN 'TVAR_NAME' OR 'MWSKZ_NAME' OR 'XBLNR' OR 'LAND_TXT' THEN abap_true
        WHEN 'BUZEI' OR 'LONG_NAME' OR 'MWSKZ2' OR 'MITKZ' THEN abap_true
        WHEN 'DT_KTOSL' OR 'KTOSL68' OR 'KURS_FACTOR' THEN abap_true
        WHEN 'AWKEY' THEN abap_true ). "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ

      <ls_fcat>-no_zero = SWITCH #( <ls_fcat>-fieldname
        WHEN 'WSL' OR 'OVERESTIMATED' OR 'SUM_TODO' THEN abap_true
        WHEN 'SUM_DONE' OR 'SUM_DIFF'   THEN abap_true ).

      <ls_fcat>-hotspot = SWITCH #( <ls_fcat>-fieldname
        WHEN 'BELNR' OR 'BELNR_TEXT'
        OR 'DOC_NUM' "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        THEN abap_true ).

      CASE <ls_fcat>-fieldname.
        WHEN 'LAND1'.
          <ls_fcat>-edit = abap_true.
          <ls_fcat>-ref_table = 'T005'.
          <ls_fcat>-ref_field = 'LAND1'.
        WHEN 'STATUS'.
          <ls_fcat>-no_out = abap_true.
          <ls_fcat>-icon = abap_true.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-hotspot = abap_true.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-09l.
          <ls_fcat>-scrtext_m = TEXT-09m.
          <ls_fcat>-scrtext_s = TEXT-09s.
        WHEN 'CHECK'.
          <ls_fcat>-checkbox = abap_true.
          <ls_fcat>-edit = abap_true.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-00l.
          <ls_fcat>-scrtext_m = TEXT-00m.
          <ls_fcat>-scrtext_s = TEXT-00s.
          <ls_fcat>-outputlen = 5.
        WHEN 'ORG_NAME'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-01l.
          <ls_fcat>-scrtext_m = TEXT-01m.
          <ls_fcat>-scrtext_s = TEXT-01s.
          <ls_fcat>-outputlen = 50.
        WHEN 'FWBAS'.
          <ls_fcat>-outputlen = 12.
        WHEN 'MWSKZ'.
          <ls_fcat>-just = 'C'.
          <ls_fcat>-outputlen = 4.
          <ls_fcat>-ref_table = 'BSEG'.
        WHEN 'PROZT'.
          <ls_fcat>-decimals_o = 0.
        WHEN 'RWCUR'.
          <ls_fcat>-just = 'C'.
        WHEN 'BUDAT'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-02l.
          <ls_fcat>-scrtext_m = TEXT-02m.
          <ls_fcat>-scrtext_s = TEXT-02s.
        WHEN 'UKURS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-03l.
          <ls_fcat>-scrtext_m = TEXT-03m.
          <ls_fcat>-scrtext_s = TEXT-03s.
          <ls_fcat>-no_zero = abap_true.
        WHEN 'WSL'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'RWCUR'.
        WHEN 'OVERESTIMATED'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-04l.
          <ls_fcat>-scrtext_m = TEXT-04m.
          <ls_fcat>-scrtext_s = TEXT-04s.
        WHEN 'SUM_TODO'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-05l.
          <ls_fcat>-scrtext_m = TEXT-05m.
          <ls_fcat>-scrtext_s = TEXT-05s.
        WHEN 'SUM_DONE'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-06l.
          <ls_fcat>-scrtext_m = TEXT-06m.
          <ls_fcat>-scrtext_s = TEXT-06s.
        WHEN 'SUM_BASE_DONE'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-10l.
          <ls_fcat>-scrtext_m = TEXT-10m.
          <ls_fcat>-scrtext_s = TEXT-10s.
        WHEN 'SUM_DIFF'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-07l.
          <ls_fcat>-scrtext_m = TEXT-07m.
          <ls_fcat>-scrtext_s = TEXT-07s.
          <ls_fcat>-edit = abap_true.
          <ls_fcat>-tech = abap_true.
        WHEN 'SUM_BASE'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-14l.
          <ls_fcat>-scrtext_m = TEXT-14m.
          <ls_fcat>-scrtext_s = TEXT-14s.
          <ls_fcat>-edit = abap_true.
        WHEN 'SUM_NDS'.
          <ls_fcat>-outputlen = lv_currlen.
          <ls_fcat>-cfieldname = 'WAERS'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-15l.
          <ls_fcat>-scrtext_m = TEXT-15m.
          <ls_fcat>-scrtext_s = TEXT-15s.
          <ls_fcat>-edit = abap_true.
        WHEN 'BELNR_TEXT'.
          <ls_fcat>-ref_table = 'BKPF'.
          <ls_fcat>-ref_field = 'BELNR'.
          <ls_fcat>-outputlen = 13.
          <ls_fcat>-just = 'C'.
        WHEN 'PARTNER'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-11l.
          <ls_fcat>-scrtext_m = TEXT-11m.
          <ls_fcat>-scrtext_s = TEXT-11s.
          <ls_fcat>-edit = abap_true.
        WHEN 'ALT_SAKNR'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-12l.
          <ls_fcat>-scrtext_m = TEXT-12m.
          <ls_fcat>-scrtext_s = TEXT-12s.
          <ls_fcat>-edit = abap_true.
        WHEN 'MWSKZ68'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-008.
          <ls_fcat>-scrtext_m = TEXT-008.
          <ls_fcat>-scrtext_s = TEXT-008.
          <ls_fcat>-edit = abap_false.
        WHEN 'DT_ACC'.
          <ls_fcat>-reptext = <ls_fcat>-seltext = TEXT-009.
        WHEN 'CR_ACC'.
          <ls_fcat>-reptext = <ls_fcat>-seltext = TEXT-010.
        WHEN 'CONTRACT'.
          <ls_fcat>-edit = abap_true.
          <ls_fcat>-reptext = <ls_fcat>-seltext = TEXT-011.
        WHEN 'KURS_FACTOR'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-13l.
          <ls_fcat>-scrtext_m = TEXT-12m.
          <ls_fcat>-scrtext_s = TEXT-12s.
        "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        WHEN 'DOC_NUM'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-16l.
          <ls_fcat>-scrtext_m = TEXT-16m.
          <ls_fcat>-scrtext_s = TEXT-16s.
        WHEN 'DOC_DATE'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-17l.
          <ls_fcat>-scrtext_m = TEXT-17m.
          <ls_fcat>-scrtext_s = TEXT-17s.
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


  METHOD fill_fieldcat_inorg.

    rt_fieldcat[] = CORRESPONDING #( cl_salv_data_descr=>read_structdescr(
        CAST cl_abap_structdescr( CAST cl_abap_tabledescr(
             cl_abap_tabledescr=>describe_by_data( gt_data_inorg[] ) )->get_table_line_type( ) ) ) ).
    LOOP AT rt_fieldcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'POPER'.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l =
          <ls_fcat>-scrtext_m = <ls_fcat>-scrtext_s = TEXT-012.
        WHEN 'POS'.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l =
          <ls_fcat>-scrtext_m = <ls_fcat>-scrtext_s = TEXT-013.
        WHEN 'BELNR'.
          <ls_fcat>-hotspot   = abap_true.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l = TEXT-014.
        WHEN 'BELNR_OS'.
          <ls_fcat>-hotspot   = abap_true.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l = TEXT-020.
        WHEN 'BUDAT' OR 'LAND_TXT' OR 'LAND'.
          <ls_fcat>-no_out    = abap_true.
        WHEN 'ORG_NAME'.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l = TEXT-01l.
          <ls_fcat>-scrtext_m = TEXT-01m.
          <ls_fcat>-scrtext_s = TEXT-01s.
          <ls_fcat>-outputlen = 50.
        WHEN 'FWBAS'.
          <ls_fcat>-outputlen = 12.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l = TEXT-015.
        WHEN 'MWSKZ'.
          <ls_fcat>-just = 'C'.
          <ls_fcat>-outputlen = 4.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l = TEXT-016.
        WHEN 'PROZT'.
          <ls_fcat>-decimals_o = 0.
          <ls_fcat>-reptext   = <ls_fcat>-scrtext_l =
          <ls_fcat>-scrtext_m = <ls_fcat>-scrtext_s = TEXT-017.
      ENDCASE.
    ENDLOOP.
  ENDMETHOD.


  METHOD get_doctext.
    DATA: lt_docs TYPE STANDARD TABLE OF zfi_nds_fororg_hdb=>gty_s_docs.

    "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    IF is_data-awkey IS NOT INITIAL.
      lt_docs = VALUE #(
      FOR <ls_doc> IN it_docs[]
        WHERE ( xblnr = is_data-xblnr AND mwskz = is_data-mwskz2 AND bktxt = is_data-awkey )
      ( CORRESPONDING #( <ls_doc> ) ) ) .

      SORT lt_docs[] BY bukrs gjahr belnr xblnr bktxt.
      DELETE ADJACENT DUPLICATES FROM lt_docs[] COMPARING bukrs gjahr belnr xblnr bktxt.

      rv_text = SWITCH #( lines( lt_docs )
        WHEN 0 THEN ''
        WHEN 1 THEN lt_docs[ 1 ]-belnr
        ELSE TEXT-001 ).
      "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    ELSE.
      lt_docs = VALUE #(
      FOR <ls_doc> IN it_docs[]
        WHERE ( xblnr = is_data-xblnr AND mwskz = is_data-mwskz2 )
      ( CORRESPONDING #( <ls_doc> ) ) ) .

      SORT lt_docs[] BY bukrs gjahr belnr.
      DELETE ADJACENT DUPLICATES FROM lt_docs[] COMPARING bukrs gjahr belnr.

      rv_text = SWITCH #( lines( lt_docs )
        WHEN 0 THEN ''
        WHEN 1 THEN lt_docs[ 1 ]-belnr
        ELSE TEXT-001 ).
    ENDIF.
  ENDMETHOD.


  METHOD get_header.
    DATA: lt_period TYPE STANDARD TABLE OF hcp_s_begda_endda,
          lv_txt    TYPE string.

    " Периоды и года
    " Полные периоды (01.01.2017 - 31.05.2017) попадают в месяца,
    " Неполные (02.03.2017 - 31.03.2017, 01.04.2017 - 29.04.2017) или без верхней границы (02.01.2017) - игнорируются
    lt_period = VALUE #(
      FOR <ls_budat> IN gs_sscr-budat[]
      WHERE ( sign = 'I' AND option <> 'CP' )
      ( begda = <ls_budat>-low
        endda = SWITCH #( <ls_budat>-option
          WHEN 'BT' THEN <ls_budat>-high ) ) ).
    SORT lt_period BY begda endda DESCENDING.

    LOOP AT lt_period ASSIGNING FIELD-SYMBOL(<ls_period>).
      IF <ls_period>-begda+6(2) = '01' AND <ls_period>-endda = me->get_period_lastday( CONV #( <ls_period>-endda(6) ) ).
        IF <ls_period>-begda(6) = <ls_period>-endda(6).
          CONCATENATE lv_txt <ls_period>-begda+4(2) INTO lv_txt SEPARATED BY space.
        ELSE.
          CONCATENATE lv_txt <ls_period>-begda+4(2) `–` <ls_period>-endda+4(2) INTO lv_txt SEPARATED BY space.
        ENDIF.
      ENDIF.
      CONCATENATE TEXT-006 lv_txt TEXT-018 INTO cs_out-period SEPARATED BY space.
      CLEAR lv_txt.

      FIND FIRST OCCURRENCE OF <ls_period>-begda(4) IN lv_txt.
      IF sy-subrc <> 0.
        CONCATENATE lv_txt <ls_period>-begda(4) INTO lv_txt SEPARATED BY space.
      ENDIF.
      FIND FIRST OCCURRENCE OF <ls_period>-endda(4) IN lv_txt.
      IF sy-subrc <> 0 AND <ls_period>-endda IS NOT INITIAL.
        CONCATENATE lv_txt <ls_period>-endda(4) INTO lv_txt SEPARATED BY space.
      ENDIF.
      CONCATENATE cs_out-period lv_txt TEXT-019 INTO cs_out-period SEPARATED BY space.
    ENDLOOP.

    TRY.
        " Наименование БЕ
        zcl_names=>get_org_names( EXPORTING it_bukrs = gs_sscr-bukrs
                                  IMPORTING ev_butxt = DATA(lv_butxt)
                                            ev_bukrs = DATA(lv_buk) ).
        cs_out-butxt = COND #( WHEN gs_sscr-bukrs[ 1 ]-low = '01' AND gs_sscr-bukrs[ 1 ]-high = '26' THEN TEXT-007 "'РУП ПО «Белоруснефть»'
                               WHEN lv_butxt IS NOT INITIAL THEN lv_butxt
                               WHEN lv_butxt IS INITIAL THEN |{ lv_buk } { TEXT-007 }| ).

        cs_out-name_org = COND gty_s_out-name_org( WHEN sy-cprog = TEXT-000 THEN TEXT-t12 ELSE TEXT-t11 ).

        cs_out-flag = COND #( WHEN strlen( cs_out-butxt ) > 110 THEN abap_false ELSE abap_true ).


        " Подписанты - Руководитель + Глав.бух
        zcl_names=>get_top_chief( EXPORTING iv_bukrs = CONV bukrs( gs_sscr-bukrs[ 1 ]-low )
                                            iv_date  = sy-datum
                                  IMPORTING es_names = DATA(ls_names) ).
        cs_out-acc_01 = COND #( WHEN gs_sscr-acc_01 IS INITIAL THEN ls_names-head_s_fio ELSE gs_sscr-acc_01 ).
        cs_out-acc_02 = COND #( WHEN gs_sscr-acc_02 IS INITIAL THEN ls_names-acc_s_fio ELSE gs_sscr-acc_02 ).

        " Исполнитель
        zcl_names=>get_fio_dolz( EXPORTING iv_uname = sy-uname
                                 IMPORTING et_fio   = DATA(lt_fio) ).
        cs_out-acc_03 = lt_fio[ 1 ]-fio.

      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD get_icon.

    DATA(ls_icon) = gt_icons[ status = im_status ].

    CALL FUNCTION 'ICON_CREATE'
      EXPORTING
        name                  = ls_icon-name
        info                  = ls_icon-qinfo
      IMPORTING
        result                = rm_status
      EXCEPTIONS
        icon_not_found        = 1
        outputfield_too_short = 2
        OTHERS                = 3.

    IF sy-subrc <> 0.
      CLEAR rm_status.
    ENDIF.

  ENDMETHOD.


  METHOD get_orgname.
    DATA: lt_lines TYPE STANDARD TABLE OF tline.

    CALL FUNCTION 'READ_TEXT'
      EXPORTING
        id                      = '0001'
        language                = sy-langu
        name                    = CONV thead-tdname( is_data-lifnr )
        object                  = 'BUT000'
      TABLES
        lines                   = lt_lines[]
      EXCEPTIONS
        id                      = 1
        language                = 2
        name                    = 3
        not_found               = 4
        object                  = 5
        reference_check         = 6
        wrong_access_to_archive = 7
        OTHERS                  = 8.

    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    rv_text = REDUCE #( INIT lv_line TYPE string
      FOR <ls_line> IN lt_lines[]
      NEXT lv_line = |{ lv_line }{ <ls_line>-tdline }| ).

  ENDMETHOD.


  METHOD get_period_lastday.
    IF im_period IS SUPPLIED.
      rv_date = im_period(6) && '01'.
    ELSEIF im_date IS SUPPLIED.
      rv_date = im_date(6) && '01'.
    ELSE.
      RETURN.
    ENDIF.

    ADD 31 TO rv_date.
    rv_date+6(2) = '01'.
    SUBTRACT 1 FROM rv_date.
  ENDMETHOD.


  METHOD get_positions.
    TYPES: lty_t_positions TYPE STANDARD TABLE OF gty_s_position WITH DEFAULT KEY.

    " Имеются контрагенты без длинного текста - их не выводить
    DATA(lv_idx) = 0.
    IF sy-cprog = TEXT-000. " ZFI_NDS_FORORG_NEW
      LOOP AT gt_data_inorg[] ASSIGNING FIELD-SYMBOL(<ls_data_inorg>).
        ADD 1 TO lv_idx.
        cs_out-positions[] = VALUE lty_t_positions( BASE cs_out-positions[]
          ( name = COND #( WHEN <ls_data_inorg>-land_txt IS NOT INITIAL THEN |{ <ls_data_inorg>-org_name }, { <ls_data_inorg>-land_txt }|
                           ELSE <ls_data_inorg>-org_name )
           fwbas = <ls_data_inorg>-fwbas
           prozt = <ls_data_inorg>-prozt
           nds   = <ls_data_inorg>-hwste
           idx   = lv_idx ) ).
      ENDLOOP.
    ELSE.
      LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE long_name <> ''.
        ADD 1 TO lv_idx.
        cs_out-positions[] = VALUE lty_t_positions( BASE cs_out-positions[]
          ( name = |{ <ls_data>-long_name }, { <ls_data>-land_txt }({ <ls_data>-land1 })|
           fwbas = <ls_data>-sum_base_done "overestimated
           prozt = <ls_data>-prozt
           nds   = <ls_data>-sum_done "sum_todo
           idx   = lv_idx ) ).
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD get_tax.
    DATA lt_ftaxp TYPE TABLE OF ftaxp.

    " Получение процента НДС
    CALL FUNCTION 'GET_TAX_PERCENTAGE'
      EXPORTING
        aland   = is_data-land
        datab   = is_data-budat
        mwskz   = is_data-mwskz
        txjcd   = '1'
      TABLES
        t_ftaxp = lt_ftaxp.

    TRY.
        rv_text = lt_ftaxp[ 1 ]-kbetr / 10.
      CATCH cx_sy_itab_line_not_found.
        RETURN.
    ENDTRY.

  ENDMETHOD.


  METHOD modify_documents_fcat.
    DATA lr_column TYPE REF TO cl_salv_column_list.

    lr_column ?= ir_columns->get_column( cs_fcat-fieldname ).

    cs_fcat-no_out = SWITCH #( cs_fcat-fieldname
      WHEN 'STJAH' OR 'BUZEI' OR 'BKTXT' OR 'XBLNR' THEN abap_true ).

    CASE cs_fcat-fieldname.
      WHEN 'IDX'.
        cs_fcat-tech = abap_true.
      WHEN 'BELNR'.
        cs_fcat-scrtext_l = cs_fcat-reptext = TEXT-08l.
        cs_fcat-scrtext_m = TEXT-08m.
        cs_fcat-scrtext_s = TEXT-08s.
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'STBLG'.
        cs_fcat-hotspot = abap_true.
        lr_column->set_cell_type( if_salv_c_cell_type=>hotspot ).
      WHEN 'HSL'.
        lr_column->set_optimized( 'X' ).
    ENDCASE.

  ENDMETHOD.


  METHOD modify_main_grid.
    IF im_hide_checkbox IS SUPPLIED.
      gr_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = DATA(lt_fcat) ).
      lt_fcat[ fieldname = 'CHECK' ]-no_out = im_hide_checkbox.

      lt_fcat[ fieldname = 'STATUS' ]-no_out = SWITCH #( im_hide_checkbox
        WHEN abap_true THEN abap_false
        WHEN abap_false THEN abap_true ).
      gr_grid->set_frontend_fieldcatalog( lt_fcat[] ).
    ENDIF.

    IF im_refresh = abap_true.
      gr_grid->refresh_table_display( ).
    ENDIF.
  ENDMETHOD.


  METHOD on_data_changed_finished.
    DATA: lv_answ TYPE c.

    LOOP AT et_good_cells[] ASSIGNING FIELD-SYMBOL(<ls_cell>).
      ASSIGN gt_data[ <ls_cell>-row_id ] TO FIELD-SYMBOL(<ls_data>).
      IF sy-subrc <> 0 .
        RETURN.
      ENDIF.
      EXIT.
    ENDLOOP.
    IF sy-subrc <> 0 OR <ls_cell> IS NOT ASSIGNED.
      RETURN.
    ENDIF.

    CASE <ls_cell>-fieldname.
      WHEN 'SUM_BASE'.
        DATA(lv_razn) = CONV maxbt( <ls_data>-overestimated - <ls_data>-sum_base_done ).
        IF lv_razn <> <ls_data>-sum_base.
          <ls_data>-color = me->color_positive.
        ENDIF.

        IF lv_razn < CONV maxbt( <ls_cell>-value ).
          DATA(lv_question) = CONV string( TEXT-010 ).
          DATA(lv_cellvalue) = <ls_cell>-value. CONDENSE lv_cellvalue.
          DATA(lv_todo) = CONV char20( <ls_data>-overestimated - <ls_data>-sum_base_done ). CONDENSE lv_todo.

          REPLACE FIRST OCCURRENCE OF '&' IN lv_question WITH <ls_data>-belnr.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_question WITH lv_cellvalue.
          REPLACE FIRST OCCURRENCE OF '&' IN lv_question WITH lv_todo.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              titlebar              = TEXT-005
              text_question         = lv_question
              display_cancel_button = abap_false
            IMPORTING
              answer                = lv_answ.

          IF lv_answ <> '1'.
            <ls_cell>-value = <ls_data>-sum_base = lv_razn.
          ENDIF.
        ENDIF.
        <ls_data>-sum_nds = <ls_data>-sum_base * <ls_data>-prozt / 100.
      WHEN 'LAND1'.
        IF <ls_data>-in_eas = abap_true.
          ASSIGN gt_eas_nds[ bukrs = <ls_data>-bukrs land1 = <ls_cell>-value ] TO FIELD-SYMBOL(<ls_eas_nds>).
          IF sy-subrc = 0.
            <ls_data>-cr_acc = <ls_eas_nds>-hkont.
            <ls_data>-mwskz68 = <ls_eas_nds>-mwskz.
          ELSE.
            CLEAR: <ls_data>-cr_acc, <ls_data>-mwskz68.
          ENDIF.
        ENDIF.
    ENDCASE.

    gr_grid->refresh_table_display( i_soft_refresh = abap_true is_stable = VALUE lvc_s_stbl( row = abap_true col = abap_true ) ).
  ENDMETHOD.


  METHOD on_mark_changed.
    TYPES: lty_t_data TYPE STANDARD TABLE OF gty_s_data WITH DEFAULT KEY.
    DATA: lv_answ TYPE c.

    LOOP AT er_data_changed->mt_mod_cells[] ASSIGNING FIELD-SYMBOL(<ls_cell>) WHERE fieldname = 'CHECK'.
      ASSIGN gt_data[ <ls_cell>-row_id ] TO FIELD-SYMBOL(<ls_data>).

      DATA(lt_data) = VALUE lty_t_data(
        FOR <ls_mod> IN gt_data[]
        WHERE ( belnr = <ls_data>-belnr
          AND gjahr = <ls_data>-gjahr
          AND bukrs = <ls_data>-bukrs
          AND buzei <> <ls_data>-buzei
          AND check <> <ls_cell>-value
          AND sum_diff <> 0 )
        ( <ls_data> ) ).

      IF lt_data[] IS NOT INITIAL.
        DATA(lv_question) = CONV string( TEXT-004 ).
        REPLACE FIRST OCCURRENCE OF '&' IN lv_question WITH <ls_data>-belnr.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
            titlebar              = TEXT-005
            text_question         = lv_question
            display_cancel_button = abap_false
          IMPORTING
            answer                = lv_answ.

        IF lv_answ = '1'.
          LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_new>) WHERE belnr = <ls_data>-belnr AND gjahr = <ls_data>-gjahr
              AND bukrs = <ls_data>-bukrs AND buzei <> <ls_data>-buzei AND check <> <ls_cell>-value AND sum_diff > 0.
            <ls_new>-check = <ls_cell>-value.
          ENDLOOP.
          gr_grid->refresh_table_display( ).
        ENDIF.
      ENDIF.

    ENDLOOP.
  ENDMETHOD.


  METHOD on_menu_button.
    CASE e_ucomm.
      WHEN cl_gui_alv_grid=>mc_fc_refresh.
        me->select_data( ).
        me->modify_main_grid( im_hide_checkbox = abap_false ).
      WHEN 'SELECT_ALL' OR 'DESELECT_ALL'.
        LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE sum_diff > 0.
          READ TABLE <ls_data>-celltab[] TRANSPORTING NO FIELDS WITH KEY fieldname = 'CHECK' style = cl_gui_alv_grid=>mc_style_disabled.
          CHECK sy-subrc NE 0.
          <ls_data>-check = SWITCH #( e_ucomm
            WHEN 'SELECT_ALL'   THEN abap_true
            WHEN 'DESELECT_ALL' THEN abap_false ).
        ENDLOOP.
        gr_grid->refresh_table_display( i_soft_refresh = abap_true ).
    ENDCASE.

  ENDMETHOD.


  METHOD on_salv_click.
    FIELD-SYMBOLS: <lt_docs> TYPE zfi_nds_fororg_hdb=>gty_t_docs.

    ASSIGN gr_docs->* TO <lt_docs>.
    CHECK sy-subrc IS INITIAL.

    DATA(ls_doc) = CORRESPONDING zfi_nds_fororg_hdb=>gty_s_docs( <lt_docs>[ row ] ).

    DATA(lv_belnr) = SWITCH #( column
      WHEN 'BELNR' THEN ls_doc-belnr ).

    CHECK lv_belnr IS NOT INITIAL.
    SET PARAMETER ID 'BUK' FIELD ls_doc-bukrs.
    SET PARAMETER ID 'BLN' FIELD lv_belnr.
    SET PARAMETER ID 'GJR' FIELD ls_doc-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.

  ENDMETHOD.


  METHOD on_single_click.
    ASSIGN gt_data[ e_row_id-index ] TO FIELD-SYMBOL(<ls_data>).

    CASE e_column_id-fieldname.
      WHEN 'BELNR'.
        CHECK <ls_data>-belnr IS NOT INITIAL.
        SET PARAMETER ID 'BUK' FIELD <ls_data>-bukrs.
        SET PARAMETER ID 'BLN' FIELD <ls_data>-belnr.
        SET PARAMETER ID 'GJR' FIELD <ls_data>-gjahr.
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      WHEN 'BELNR_TEXT'.
        IF lines( <ls_data>-documents[] ) = 0.
        ELSEIF lines( <ls_data>-documents[] ) = 1.
          DATA(ls_doc) = CORRESPONDING zfi_nds_fororg_hdb=>gty_s_docs( <ls_data>-documents[ 1 ] ).
          SET PARAMETER ID 'BUK' FIELD ls_doc-bukrs.
          SET PARAMETER ID 'BLN' FIELD ls_doc-belnr.
          SET PARAMETER ID 'GJR' FIELD ls_doc-gjahr.
          CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
        ELSE.
          TRY .
            me->show_documents( CHANGING ct_docs = <ls_data>-documents[] ).
          CATCH cx_salv_not_found cx_salv_data_error.
            RETURN.
          ENDTRY.
        ENDIF.
      "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      WHEN 'DOC_NUM'.
        CHECK <ls_data>-doc_num IS NOT INITIAL.
        SET PARAMETER ID 'BUK' FIELD <ls_data>-bukrs.
        SET PARAMETER ID 'BLN' FIELD <ls_data>-doc_num.
        SET PARAMETER ID 'GJR' FIELD <ls_data>-gjahr.
        CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
      "--<AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    ENDCASE.
  ENDMETHOD.


  METHOD on_single_click_inorg.
    ASSIGN gt_data_inorg[ e_row_id-index ] TO FIELD-SYMBOL(<ls_data>).
    CHECK sy-subrc IS INITIAL.
    CASE e_column_id-fieldname.
      WHEN 'BELNR'.
        DATA(lv_belnr) = <ls_data>-belnr.
      WHEN 'BELNR_OS'.
        lv_belnr = <ls_data>-belnr_os.
    ENDCASE.
    CHECK lv_belnr IS NOT INITIAL.
    SET PARAMETER ID 'BUK' FIELD <ls_data>-bukrs.
    SET PARAMETER ID 'BLN' FIELD lv_belnr.
    SET PARAMETER ID 'GJR' FIELD <ls_data>-gjahr.
    CALL TRANSACTION 'FB03' AND SKIP FIRST SCREEN.
  ENDMETHOD.


  METHOD on_toolbar.
*--> #8000000273 AK_BUTVILOVS Разработка роли для просмотра z-транзакций по БНУ
*    APPEND LINES OF VALUE ttb_button(
*      ( butn_type = 3 )
*      ( function = 'SELECT_ALL'    icon = icon_select_all    quickinfo = TEXT-t08 )
*      ( function = 'DESELECT_ALL'  icon = icon_deselect_all  quickinfo = TEXT-t09 )
*      ( butn_type = 3 )
*      ( function = 'EXECUTE' icon = icon_transfer text = TEXT-t03 )
*      ( function = 'JOURNAL' icon = icon_protocol text = TEXT-t04 )
*      ( function = 'EXPORT' icon = icon_xls text = TEXT-t05 )
*      ) TO e_object->mt_toolbar[].

    e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
                                                   ( butn_type = 3 )
                                                   ( function = 'SELECT_ALL'    icon = icon_select_all    quickinfo = TEXT-t08 )
                                                   ( function = 'DESELECT_ALL'  icon = icon_deselect_all  quickinfo = TEXT-t09 )
                                                   ( butn_type = 3 ) ).
    AUTHORITY-CHECK OBJECT 'ZBN_DISPLA'
          ID 'ACTVT' FIELD '02'.
    IF sy-subrc = 0.
      e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
                                                     ( function = 'EXECUTE' icon = icon_transfer text = TEXT-t03 ) ).   " Выполнить проводки
    ENDIF.

    e_object->mt_toolbar[] = VALUE #( BASE e_object->mt_toolbar[]
                                                   ( function = 'JOURNAL' icon = icon_protocol text = TEXT-t04 )
                                                   ( function = 'EXPORT' icon = icon_xls text = TEXT-t05 ) ).
*<-- #8000000273 AK_BUTVILOVS
  ENDMETHOD.


  METHOD on_toolbar_inorg.
    APPEND LINES OF VALUE ttb_button(
      ( butn_type = 3 )
      ( function = 'EXPORT' icon = icon_xls text = TEXT-t05 )
    ) TO e_object->mt_toolbar[].
  ENDMETHOD.


  METHOD on_user_command.

    CASE e_ucomm.
      WHEN 'EXECUTE'.
        TRY .
            me->post_documents( ).
          CATCH cx_salv_not_found cx_salv_data_error cx_salv_existing.
            RETURN.
        ENDTRY.
      WHEN 'JOURNAL'.
        TRY .
            me->show_protocol( ).
          CATCH cx_salv_not_found cx_salv_data_error cx_salv_existing.
            RETURN.
        ENDTRY.
      WHEN 'EXPORT'.
        me->perform_export( ).
    ENDCASE.
  ENDMETHOD.


  METHOD ON_USER_COMMAND_INORG.
    CASE e_ucomm.
      WHEN 'EXPORT'.
        me->perform_export( ).
    ENDCASE.
  ENDMETHOD.


  METHOD perform_export.
    DATA: ls_out TYPE gty_s_out.
    me->get_header( CHANGING cs_out = ls_out ).
    me->get_positions( CHANGING cs_out = ls_out ).

    DATA(lr_excel) = NEW lcl_exporter( iv_class = 'ZIBA_DOCS' iv_keyid = 'AA' iv_form = 'ZFI_NDS_FORORG.xls' iv_docname = CONV char100( COND #( WHEN sy-cprog = TEXT-000 THEN TEXT-t02 ELSE TEXT-t10 ) ) ).
    DATA(lv_xml) = lr_excel->transform_data( im_show = '' is_source = ls_out ).
    SHIFT lv_xml LEFT BY 1 PLACES.
    lr_excel->set_xml_source( im_map = 'FORM_MAP' im_xml = lv_xml ).
    lr_excel->autofit( iv_range = 'tab1' ).

    IF ls_out-flag IS NOT INITIAL.
      lr_excel->autofit( iv_range = 'org' ).
    ENDIF.
    lr_excel->autofit( iv_range = 'form' ).

    FREE OBJECT lr_excel->gs_sheet.
    CALL FUNCTION 'FLUSH'.

    CLEAR ls_out.

  ENDMETHOD.


  METHOD post_documents.
*--------------------------------------------------------------------
*   История изменений
*--------------------------------------------------------------------
*   Номер       |  Комментарий
*--------------------------------------------------------------------
*  #1           | #12824-68 АСУБН.САП-КСУП.DEV.030-БНУ.38.O-166 Замена НДС для ЕВРОЗЭС
*--------------------------------------------------------------------
    DATA: lt_done      TYPE gty_t_documents,
          lt_account   TYPE TABLE OF bapiacap09,
          lt_real      TYPE TABLE OF bapiacre09,
          lv_summ_todo TYPE bapiaccr09-amt_doccur,
          lt_return    TYPE bapiret2_tab,
          lt_tax       TYPE bapiactx09_tab,
          lt_curramt   TYPE bapiaccr09_tab,
          lt_ext       TYPE bapiparex_t,
          lv_count     TYPE i. "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    gr_grid->check_changed_data( ).
    DATA(ls_header) = VALUE bapiache09(
      username = sy-uname
      bus_act  = 'RFBU'
      doc_type = 'SN'
      obj_type = 'BKPFF' ).

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system = ls_header-obj_sys.

*{ #27706 G.DOMANIKOVA 07/04/2023 ZFI_NDS_FORORG При выделении нескольких документов не выполнятся проводка
*    убрать проверку по количеству строк.
*    "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
*    LOOP AT gt_data INTO DATA(ls_check) WHERE check = abap_true.
*      lv_count = lv_count + 1.
*    ENDLOOP.
*
*    IF lv_count > 1.
*      MESSAGE e000(zfi_esf) WITH TEXT-q02.
*      RETURN.
*    ENDIF.
*    "--<AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
*} #27706 G.DOMANIKOVA

    SORT gt_data[] BY bukrs gjahr belnr buzei doc_num doc_date. "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    CLEAR gt_jour.
    LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_data>) WHERE check = abap_true.
      " Проверка на проведенный ранее (мультипозиционные документы)
      IF line_exists(  lt_done[ bukrs = <ls_data>-bukrs gjahr = <ls_data>-gjahr belnr = <ls_data>-belnr ] ).
        CONTINUE.
      ENDIF.
      IF <ls_data>-belnr_text IS NOT INITIAL.
        MESSAGE e000(zfi_ei) WITH TEXT-q01.
        RETURN.
      ENDIF.

      IF line_exists( gt_eas_nds[ bukrs = <ls_data>-bukrs land1 = <ls_data>-land1 ] ).
        DATA(lv_land_eas) = abap_true.
      ELSE.
        lv_land_eas = abap_false.
      ENDIF.
      IF lv_land_eas <> <ls_data>-in_eas  OR <ls_data>-land1 IS INITIAL.
        IF 1 = 2. MESSAGE e035(zfi_ei). ENDIF.
        MESSAGE ID 'ZFI_EI' TYPE 'E'  NUMBER '035' INTO DATA(lv_message).
        APPEND VALUE #( belnr = <ls_data>-belnr
                        status = me->get_icon( CONV icon_132( 'E' ) )
                        bapiret = VALUE #(  type = 'E'
                                             number = '035'
                                             id = 'ZFI_EI'
                                             message = lv_message
                                            ) ) TO gt_jour[].

        CONTINUE.
      ENDIF.

      " Дозаполним header из дат первичного документа
      ls_header-comp_code  = <ls_data>-bukrs.
      ls_header-doc_date   = <ls_data>-bldat.
      ls_header-ref_doc_no = <ls_data>-belnr && <ls_data>-bukrs(2) && <ls_data>-gjahr.
      "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      IF <ls_data>-doc_num IS NOT INITIAL.
        ls_header-pstng_date = <ls_data>-doc_date.
        ls_header-fisc_year  = <ls_data>-doc_date(4).
        ls_header-fis_period = <ls_data>-doc_date+4(2).
        ls_header-header_txt = <ls_data>-awkey.
        "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
      ELSE.
        ls_header-pstng_date = <ls_data>-budat.
        ls_header-fisc_year  = <ls_data>-budat(4).
        ls_header-fis_period = <ls_data>-budat+4(2).
        ls_header-header_txt = <ls_data>-belnr && <ls_data>-gjahr.
      ENDIF.
*-->  #8000000834 AK_INPRANNIK, ZFI_NDS_FORORG-Красное Сторно
*     доп. кредитование прихода проводится с признаком КРАСНОЕ СТОРНО
      IF ( <ls_data>-sum_nds < 0 ).
        ls_header-neg_postng = abap_true.
        <ls_data>-sum_nds = <ls_data>-sum_nds * -1.
      ENDIF.
*<-- #8000000834 AK_INPRANNIK, ZFI_NDS_FORORG-Красное Сторно

      DATA(lv_index) = 1.
      lv_summ_todo = 0.

      " TODO Тут необходимо переписать выбор данных
      READ TABLE gt_data[] TRANSPORTING NO FIELDS
                           WITH KEY bukrs = <ls_data>-bukrs
                                    gjahr = <ls_data>-gjahr
                                    belnr = <ls_data>-belnr
                                    buzei = <ls_data>-buzei
                                    "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
                                    doc_num = <ls_data>-doc_num
                                    doc_date = <ls_data>-doc_date
                                    "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
                                    check = abap_true
                           BINARY SEARCH.
      LOOP AT gt_data[] ASSIGNING FIELD-SYMBOL(<ls_todo>) FROM sy-tabix.
        IF   <ls_todo>-belnr <> <ls_data>-belnr
          OR <ls_data>-bukrs <> <ls_data>-bukrs
          OR <ls_data>-gjahr <> <ls_data>-gjahr
          "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
          OR <ls_data>-doc_num <> <ls_data>-doc_num
          OR <ls_data>-doc_date <> <ls_data>-doc_date.
          "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
          EXIT.
        ENDIF.
        IF <ls_todo>-check <> abap_true.
          CONTINUE.
        ENDIF.
        ADD 1 TO lv_index.

        " с позиции №1 - проводки по дебету, за циклом добавится кредитовая
        ADD <ls_todo>-sum_nds TO lv_summ_todo.
        APPEND VALUE #( currency_iso = <ls_todo>-waers
                        currency     = <ls_todo>-waers
                        curr_type    = '00'
                        itemno_acc   = lv_index
                        amt_doccur   = <ls_todo>-sum_nds
                        amt_base     = <ls_todo>-sum_base )
        TO  lt_curramt.
        "Заполняем подробный текст
        APPEND  VALUE #( structure  = 'ACCIT'
                         valuepart1 = 'SGTXT'
                         valuepart2 = COND #( WHEN <ls_data>-in_eas = abap_true THEN TEXT-002 ELSE TEXT-003 )
                         valuepart3 = |{ lv_index ALIGN = LEFT }| )
        TO  lt_ext[].
        APPEND VALUE bapiactx09( itemno_acc = lv_index
                                 gl_account = <ls_todo>-dt_acc
                                 tax_code   = <ls_todo>-mwskz2
                                 direct_tax = 'X'
                                 acct_key   = 'VST' )
        TO lt_tax[].
        INSERT  VALUE #(
            bukrs = <ls_todo>-bukrs
            gjahr = <ls_todo>-gjahr
            belnr = <ls_todo>-belnr
            buzei = <ls_todo>-buzei )
            INTO TABLE lt_done[].


      ENDLOOP.
      IF <ls_todo> IS ASSIGNED .
        UNASSIGN <ls_todo>.
      ENDIF.
      ADD 1 TO lv_index.


      APPEND VALUE #(
          currency_iso = <ls_data>-waers
          currency     = <ls_data>-waers
          curr_type    = '00'
          itemno_acc   = lv_index
          amt_doccur   = - lv_summ_todo
          amt_base     = <ls_data>-sum_base
        ) TO lt_curramt[].
      IF <ls_data>-mitkz IS NOT INITIAL.
        lt_real[] = COND #( WHEN <ls_data>-in_eas = abap_false THEN VALUE bapiacre09_tab(
          ( itemno_acc = lv_index contract_no = <ls_data>-contract ) ) ).
        lt_account[] = COND #( WHEN <ls_data>-partner IS NOT INITIAL THEN VALUE bapiacap09_tab(
          ( itemno_acc = lv_index vendor_no = <ls_data>-partner gl_account = <ls_data>-alt_saknr ) ) ).
      ELSE.
* --> AK_BUTVILOVS #8000000939, zfi_nds_fororg Страна не из статдекларир
        DATA:
          lv_answer,
          lv_message_text(40),
          lv_text_question TYPE string.

        IF   <ls_data>-mwskz68 IS INITIAL
          OR <ls_data>-cr_acc  IS INITIAL
          OR <ls_data>-ktosl68 IS INITIAL.
          lv_text_question = |Для документа { <ls_data>-belnr } данных стат декларирования не найдено, выполнять проводку по данным из строки таблицы код страны = { <ls_data>-land1 }?|.
          CALL FUNCTION 'POPUP_TO_CONFIRM'
            EXPORTING
              text_question         = lv_text_question
              text_button_1         = 'Да'(021)
              text_button_2         = 'Нет'(022)
              display_cancel_button = abap_false
            IMPORTING
              answer                = lv_answer
*           TABLES
*             PARAMETER             =
            EXCEPTIONS
              text_not_found        = 1
              OTHERS                = 2.
          CHECK sy-subrc = 0 AND lv_answer = '1'.

          SELECT SINGLE z68~mwskz,
                        zacc~ktosl,
                        zacc~konth FROM zfi_nds_eas_68 AS z68
            JOIN t001 AS t001 ON t001~bukrs = @<ls_data>-bukrs
            JOIN t030k AS zacc ON zacc~ktopl = t001~ktopl
                              AND zacc~mwskz = z68~mwskz
            WHERE z68~country = @<ls_data>-land1
            INTO (@<ls_data>-mwskz68, @<ls_data>-ktosl68, @<ls_data>-cr_acc).
          IF sy-subrc <> 0.
            lv_message_text = |Страна { <ls_data>-land1 } не входит в ЕАЭС.|.
            MESSAGE e000(zfi_ei) WITH lv_message_text.
            RETURN.
          ENDIF.
        ENDIF.
* <-- AK_BUTVILOVS #8000000939

        APPEND VALUE #(
          itemno_acc = lv_index
          gl_account = COND #( WHEN <ls_data>-in_eas = abap_true THEN <ls_data>-cr_acc ELSE <ls_data>-alt_saknr )
          tax_code   = <ls_data>-mwskz68
          direct_tax = 'X'
          acct_key   = <ls_data>-ktosl68
        ) TO lt_tax[].
      ENDIF.

      "Заполняем подробный текст
      APPEND VALUE #(
        structure  = 'ACCIT'
        valuepart1 = 'SGTXT'
        valuepart2 = COND #( WHEN <ls_data>-in_eas = abap_true THEN TEXT-002 ELSE TEXT-003 )
        valuepart3 = lv_index
      ) TO lt_ext[].

      CALL FUNCTION 'BAPI_ACC_DOCUMENT_CHECK'
        EXPORTING
          documentheader = ls_header
        TABLES
          currencyamount = lt_curramt[]
          accounttax     = lt_tax[]
          realestate     = lt_real[]
          accountpayable = lt_account[]
          extension2     = lt_ext[]
          return         = lt_return[].

      " Проверка на ошибочные документы - не пускаем к проводке проверки со статусом 'A и E'
      " ТипСообщ: S-успешно, E-ошибка, W-предупр., I-инфо, A-прерыв.
      LOOP AT lt_return ASSIGNING FIELD-SYMBOL(<ls_ret>) WHERE type = 'A' OR type = 'E'.
        me->add_to_journal_set_status( EXPORTING it_done = lt_done[] it_return = lt_return[] is_data = <ls_data>  ).
        EXIT.
      ENDLOOP.
      IF sy-subrc <> 0.
        DATA(lv_doc) = VALUE bapiache09( ).
        CALL FUNCTION 'BAPI_ACC_DOCUMENT_POST'
          EXPORTING
            documentheader = ls_header
          IMPORTING
            obj_type       = lv_doc-obj_type
            obj_key        = lv_doc-obj_key
            obj_sys        = lv_doc-obj_sys
          TABLES
            currencyamount = lt_curramt[]
            accounttax     = lt_tax[]
            realestate     = lt_real[]
            accountpayable = lt_account[]
            extension2     = lt_ext[]
            return         = lt_return[].

        me->add_to_journal_set_status( EXPORTING it_done = lt_done[] it_return = lt_return[] is_doc = lv_doc is_data = <ls_data>  ).
      ENDIF.

      " Проверка на ошибочные документы - не пускаем к проводке проверки со статусом 'A и E'
      " ТипСообщ: S-успешно, E-ошибка, W-предупр., I-инфо, A-прерыв.
      LOOP AT lt_return ASSIGNING <ls_ret> WHERE type CA 'EAX'.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        CLEAR: lt_tax[], lt_curramt[], lt_real[], lt_account[].             "8000000532, ZFI_NDS_FORORG-Не проводит несколько док
        EXIT.
      ENDLOOP.
      IF sy-subrc <> 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

* --> AK_BUTVILOVS #8000001113, FB03 ZFI_NDS_FORORG Данные декларации
        IF <ls_data>-dt_acc = '1818000000'.
          me->save_text( EXPORTING iv_xblnr = <ls_data>-xblnr
                                   iv_bukrs = lv_doc-obj_key+10(4)
                                   iv_belnr = lv_doc-obj_key(10)
                                   iv_gjahr = CONV #( lv_doc-obj_key+14(4) )
                                   iv_doc_num = <ls_data>-doc_num  "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
                                   iv_awkey = <ls_data>-awkey ).   "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
        ENDIF.
* <-- AK_BUTVILOVS #8000001113

        <ls_data> = VALUE #( BASE <ls_data>
          check = abap_false
          documents = me->read_documents( is_data = <ls_data> )
          belnr_text = me->get_doctext( is_data = CORRESPONDING #( <ls_data> ) it_docs = <ls_data>-documents[] )
          celltab = VALUE #(
            ( fieldname = 'CHECK' style = cl_gui_alv_grid=>mc_style_disabled )
            ( fieldname = 'SUM_DIFF' style = cl_gui_alv_grid=>mc_style_disabled )
            ( fieldname = 'SUM_NDS' style = cl_gui_alv_grid=>mc_style_disabled ) )
          ).
        CLEAR: lt_tax[], lt_curramt[], lt_real[], lt_account[].
      ENDIF.
    ENDLOOP.

    me->modify_main_grid( im_hide_checkbox = abap_true ).
    me->show_protocol( ).
    me->select_data( ).
    me->modify_main_grid( im_hide_checkbox = abap_false ).
  ENDMETHOD.


  METHOD read_documents.
    TRY.
        zfi_nds_fororg_hdb=>get_documents(
          EXPORTING
            iv_xblnr   = |{ is_data-belnr }{ is_data-bukrs(2) }{ is_data-gjahr }|
            iv_account = is_data-dt_acc
          IMPORTING
            et_docs    = rt_documents[] ).
      CATCH cx_root.
        MESSAGE i999 WITH TEXT-t00.
        RETURN.
    ENDTRY.
  ENDMETHOD.


  METHOD save_text.
    TYPES: BEGIN OF lst_text,
             id   TYPE tdid,
             text TYPE tline_t,
           END OF lst_text,
           ltt_texts TYPE TABLE OF lst_text.

    DATA:
      lv_name           TYPE tdobname,
      lv_zzgtd(20),
      lv_date_permitted TYPE dats,
      lv_pr_doc(58),

      lt_texts          TYPE ltt_texts.

    FIELD-SYMBOLS <ls_text> TYPE lst_text.

    lv_name = |{ iv_bukrs WIDTH = 4 }{ iv_belnr }{ iv_gjahr }|.

    "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    IF iv_doc_num IS NOT INITIAL.
      SELECT SINGLE matdoc~zzgtd,
                    zcs_cust_hcd~date_permitted,
                    concat_with_space( zcs_cust_payment~pr_doc_date, zcs_cust_payment~pr_doc_num, 1 ) FROM matdoc
        LEFT JOIN zcs_cust_hcd
          ON zcs_cust_hcd~permission_num = matdoc~zzgtd
        LEFT JOIN zcs_cust_payment
          ON zcs_cust_payment~declarant_id = zcs_cust_hcd~declarant_id
         AND zcs_cust_payment~mode_code    = '5010'
        WHERE matdoc~mblnr = @iv_awkey(10)
          AND matdoc~mjahr = @iv_awkey+10(4)
        INTO (@lv_zzgtd, @lv_date_permitted, @lv_pr_doc).
      "--<AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    ELSE.
      SELECT SINGLE mkpf~zzgtd,
                    zcs_cust_hcd~date_permitted,
                    concat_with_space( zcs_cust_payment~pr_doc_date, zcs_cust_payment~pr_doc_num, 1 ) FROM bkpf
        LEFT JOIN ekbe
          ON concat( ekbe~belnr, ekbe~gjahr ) = bkpf~awkey
          AND ekbe~buzei                       = '0001'
        LEFT JOIN mkpf
          ON mkpf~mblnr = ekbe~lfbnr
          AND mkpf~mjahr = ekbe~lfgja
        LEFT JOIN zcs_cust_hcd
          ON zcs_cust_hcd~permission_num = mkpf~zzgtd
        LEFT JOIN zcs_cust_payment
          ON zcs_cust_payment~declarant_id = zcs_cust_hcd~declarant_id
          AND zcs_cust_payment~mode_code    = '5010'
        WHERE concat( bkpf~belnr, concat( bkpf~bukrs, bkpf~gjahr ) ) = @iv_xblnr
        INTO (@lv_zzgtd, @lv_date_permitted, @lv_pr_doc).
    ENDIF.

    lt_texts = VALUE #( ( id   = '0005'
                          text = COND #( WHEN lv_pr_doc IS NOT INITIAL
                                           THEN VALUE #( ( tdline = |{ lv_pr_doc+6(2) }.{ lv_pr_doc+4(2) }.{ lv_pr_doc(4) }{ lv_pr_doc+8 }| ) ) ) )
                        ( id   = '0007'
                          text = COND #( WHEN lv_zzgtd IS NOT INITIAL
                                           THEN VALUE #( ( tdline = lv_zzgtd ) ) ) )
                        ( id   = '0008'
                          text =  COND #( WHEN lv_date_permitted IS NOT INITIAL
                                            THEN VALUE #( ( tdline = |{ lv_date_permitted+6(2) }.{ lv_date_permitted+4(2) }.{ lv_date_permitted(4) }| ) ) ) ) ).

    LOOP AT lt_texts ASSIGNING <ls_text> WHERE text IS NOT INITIAL.
      CALL FUNCTION 'SAVE_TEXT'
        EXPORTING
          header          = VALUE thead( tdobject   = 'BELEG'
                                         tdname     = lv_name
                                         tdid       = <ls_text>-id
                                         tdspras    = sy-langu
                                         tdlinesize = 72 )
          savemode_direct = 'X'
        TABLES
          lines           = <ls_text>-text
        EXCEPTIONS
          id              = 1
          language        = 2
          name            = 3
          object          = 4
          OTHERS          = 5.
    ENDLOOP.
  ENDMETHOD.


  METHOD select_data.
    IF gs_sscr-newsql = abap_true.
      TRY.
          zfi_nds_fororg_hdb=>get_data_new(
            EXPORTING iv_bdate    = gs_sscr-begda
                      iv_edate    = gs_sscr-endda
                      iv_filter   = cl_shdb_seltab=>combine_seltabs(
                                      it_named_seltabs = VALUE #(
                                                                ( name = 'BUKRS' dref = REF #( gs_sscr-bukrs[] ) )
                                                                ( name = 'BUDAT' dref = REF #( gs_sscr-budat[] ) )
                                                                ( name = 'BELNR' dref = REF #( gs_sscr-belnr[] ) )
                                                                ( name = 'LAND1' dref = REF #( gs_sscr-land1[] ) )
                                                                ( name = 'LIFNR' dref = REF #( gs_sscr-lifnr[] ) ) ) )
                      it_taxes    =  VALUE zfi_nds_fororg_hdb=>gty_t_taxes(
                                      ( name = 'ZFI_NDS_EAS0'    taxrate = 0  in_eas = 'X' )
                                      ( name = 'ZFI_NDS_NOEAS0'  taxrate = 0  in_eas = '')
                                      ( name = 'ZFI_NDS_EAS20'   taxrate = 20 in_eas = 'X' )
                                      ( name = 'ZFI_NDS_NOEAS20' taxrate = 20 in_eas = '') )
                      iv_cr_acc   = gs_sscr-alt_saknr
                      iv_contract = gs_sscr-contract
                      iv_partner  = gs_sscr-partner
            IMPORTING et_data     = DATA(lt_data)
                      et_docs     = DATA(lt_docs)
                      et_eas_nds  = gt_eas_nds ).
        CATCH cx_root INTO DATA(lr_exception).
          MESSAGE i999 WITH TEXT-t00.
          cl_demo_output=>display( lr_exception->get_text( ) ).
          RETURN.
      ENDTRY.
    ELSE.
      TRY.
          zfi_nds_fororg_hdb=>get_data(
            EXPORTING iv_bdate    = gs_sscr-begda
                      iv_edate    = gs_sscr-endda
                      iv_filter   = cl_shdb_seltab=>combine_seltabs(
                                      it_named_seltabs = VALUE #(
                                                                ( name = 'BUKRS' dref = REF #( gs_sscr-bukrs[] ) )
                                                                ( name = 'BUDAT' dref = REF #( gs_sscr-budat[] ) )
                                                                ( name = 'BELNR' dref = REF #( gs_sscr-belnr[] ) )
                                                                ( name = 'LAND1' dref = REF #( gs_sscr-land1[] ) )
                                                                ( name = 'LIFNR' dref = REF #( gs_sscr-lifnr[] ) ) ) )
                      it_taxes    =  VALUE zfi_nds_fororg_hdb=>gty_t_taxes(
                                      ( name = 'ZFI_NDS_EAS0'    taxrate = 0  in_eas = 'X' )
                                      ( name = 'ZFI_NDS_NOEAS0'  taxrate = 0  in_eas = '')
                                      ( name = 'ZFI_NDS_EAS20'   taxrate = 20 in_eas = 'X' )
                                      ( name = 'ZFI_NDS_NOEAS20' taxrate = 20 in_eas = '') )
                      iv_cr_acc   = gs_sscr-alt_saknr
                      iv_contract = gs_sscr-contract
                      iv_partner  = gs_sscr-partner
            IMPORTING et_data     = lt_data
                      et_docs     = lt_docs
                      et_eas_nds  = gt_eas_nds ).
        CATCH cx_root INTO lr_exception.
          MESSAGE i999 WITH TEXT-t00.
          cl_demo_output=>display( lr_exception->get_text( ) ).
          RETURN.
      ENDTRY.
    ENDIF.


    IF gs_sscr-todo_only = abap_true.
      DELETE lt_data[] WHERE sum_diff <= 0.
    ENDIF.

    "--> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    TYPES: BEGIN OF lty_s_res,
             dmbtr TYPE dmbtr,
             awkey TYPE awkey,
             mblnr TYPE mblnr,
             mjahr TYPE mjahr,
           END OF lty_s_res.


    DATA: lt_res TYPE TABLE OF lty_s_res,
          lt_sum TYPE TABLE OF lty_s_res.

    LOOP AT lt_data INTO DATA(ls_data) WHERE mwskz = '8A'
                                          OR mwskz = '8B'
                                          OR mwskz = '8E'.

      SELECT SINGLE mseg~mblnr FROM bseg
        LEFT JOIN mseg ON mseg~mblnr = bseg~fmxdocnr
                      AND mseg~mjahr = bseg~fmxyear
        WHERE bseg~bukrs = @ls_data-bukrs
          AND bseg~belnr = @ls_data-belnr
          AND bseg~gjahr = @ls_data-gjahr
          AND bseg~ktosl = 'WRX'
          AND ( mseg~lgort = '7033' or mseg~lgort = '0002' or mseg~lgort = '7035')
        INTO @DATA(ls_check).

      CHECK sy-subrc = 0.

      SELECT SUM( m~dmbtr ) AS dmbtr, concat( mblnr, mjahr ) AS awkey, mblnr, mjahr FROM mseg AS m
        INNER JOIN bseg AS b ON b~werks = m~werks
                            AND b~matnr = m~matnr
                            AND b~bwtar = m~charg
        WHERE b~bukrs = @ls_data-bukrs
          AND b~belnr = @ls_data-belnr
          AND b~gjahr = @ls_data-gjahr
          AND b~ktosl = 'WRX'
          AND m~xauto = ''
          AND ( m~lgort = '0002' or  m~lgort = '7035' )
          AND m~shkzg = 'H'
        AND NOT EXISTS ( SELECT mblnr FROM mseg
            WHERE smbln = m~mblnr
              AND smblp = m~zeile
              AND sjahr = m~mjahr )
        GROUP BY mblnr, mjahr
        INTO TABLE @lt_sum.

      APPEND LINES OF lt_sum TO lt_res.

      CHECK sy-subrc = 0.

      SELECT belnr, budat, gjahr, awkey FROM bkpf
        FOR ALL ENTRIES IN @lt_sum
        WHERE awtyp = 'MKPF'
          AND awkey = @lt_sum-awkey
        INTO TABLE @DATA(lt_doc).

      CHECK sy-subrc = 0.

      LOOP AT lt_doc INTO DATA(ls_doc).
        INSERT ls_data INTO lt_data ASSIGNING FIELD-SYMBOL(<fs_new_line>).
        <fs_new_line>-doc_num = ls_doc-belnr.
        <fs_new_line>-doc_date = ls_doc-budat.
        <fs_new_line>-awkey = ls_doc-awkey.
      ENDLOOP.
      DELETE TABLE lt_data FROM ls_data.
    ENDLOOP.
    "--< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ

    gt_data[] = VALUE #(
      FOR <ls_data> IN lt_data[]
      ( main = CONV #( <ls_data> )
        celltab = me->fill_celltab( <ls_data> )
        long_name = me->get_orgname( <ls_data> )
        belnr_text = me->get_doctext( is_data = <ls_data> it_docs = lt_docs[] )
*        documents = VALUE #(
*          FOR <ls_doc> IN lt_docs[]
*          WHERE ( xblnr = <ls_data>-xblnr AND mwskz = <ls_data>-mwskz2 AND bktxt = <ls_data>-awkey ) "AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
*          ( CORRESPONDING #( <ls_doc> ) ) )
           ) ).

    "-->AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<fs_data>).
      LOOP AT lt_docs INTO DATA(ls_docs) WHERE xblnr = <fs_data>-xblnr
                                           AND mwskz = <fs_data>-mwskz2.
        IF <fs_data>-awkey IS INITIAL
          OR ls_docs-bktxt = <fs_data>-awkey.
          APPEND ls_docs TO <fs_data>-documents.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    SORT gt_data[] BY bukrs gjahr belnr buzei doc_num doc_date.
    "--<AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ

* --> AK_BUTVILOVS #8000000939, zfi_nds_fororg Страна не из статдекларир
    FIELD-SYMBOLS:
      <ls_data_belnr> TYPE gty_s_data,
      <ls_document>   TYPE zfi_nds_fororg_hdb=>gty_s_docs.

    LOOP AT gt_data ASSIGNING <ls_data_belnr> WHERE ( mwskz68 IS INITIAL
                                                   OR cr_acc  IS INITIAL
                                                   OR ktosl68 IS INITIAL )
                                                AND ( mwskz = '8I'          " коды НДС ЕАС при отсутствии статистической декларации
                                                   OR mwskz = '8G' )
                                                AND belnr_text IS NOT INITIAL.
      CHECK lines( <ls_data_belnr>-documents ) = 1.
      READ TABLE <ls_data_belnr>-documents ASSIGNING <ls_document> INDEX 1.
      CHECK sy-subrc = 0.

      SELECT SINGLE mwskz,
                    hkont,
                    ktosl FROM bset
        " POST_DOCUMENT: брать не первую позицию
        WHERE ktosl <> 'VST'
          AND mwskz <> @<ls_data_belnr>-mwskz2
          AND hkont <> @<ls_data_belnr>-dt_acc
          AND belnr = @<ls_document>-belnr
          AND bukrs = @<ls_document>-bukrs
          AND gjahr = @<ls_document>-gjahr
        INTO (@<ls_data_belnr>-mwskz68, @<ls_data_belnr>-cr_acc, @<ls_data_belnr>-ktosl68).
    ENDLOOP.
* <-- AK_BUTVILOVS #8000000939
* --> AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
    LOOP AT gt_data ASSIGNING <fs_data> WHERE mwskz = '8A'
                                                         OR mwskz = '8B'
                                                         OR mwskz = '8E'.

      IF <fs_data>-awkey IS INITIAL.
        SELECT SINGLE hwbas FROM bset
        WHERE bukrs = @<fs_data>-bukrs
          AND belnr = @<fs_data>-belnr
          AND gjahr = @<fs_data>-gjahr
        INTO @DATA(lv_hwbas).
        CHECK sy-subrc = 0.

        <fs_data>-overestimated = lv_hwbas.
        <fs_data>-sum_todo = <fs_data>-overestimated * <fs_data>-prozt / 100.
        <fs_data>-sum_base = <fs_data>-overestimated - <fs_data>-sum_base_done.
        <fs_data>-sum_nds = <fs_data>-sum_base * <fs_data>-prozt / 100.
        <fs_data>-sum_diff = <fs_data>-sum_todo - <fs_data>-sum_done.
      ELSE.
        READ TABLE lt_res WITH KEY awkey = <fs_data>-awkey INTO DATA(ls_res).
        CHECK sy-subrc = 0.

        SELECT SINGLE fwbas FROM bseg
          WHERE bukrs = @<fs_data>-bukrs
            AND belnr = @<fs_data>-belnr_text
            AND gjahr = @<fs_data>-gjahr
          INTO @DATA(lv_sum_base_done).

        IF sy-subrc <> 0.
          CLEAR lv_sum_base_done.
        ENDIF.

        <fs_data>-overestimated = ls_res-dmbtr.
        <fs_data>-sum_base_done = lv_sum_base_done.
        <fs_data>-sum_todo = <fs_data>-overestimated * <fs_data>-prozt / 100.
        <fs_data>-sum_base = <fs_data>-overestimated - lv_sum_base_done.
        <fs_data>-sum_nds = <fs_data>-sum_base * <fs_data>-prozt / 100.
        <fs_data>-sum_done = <fs_data>-sum_base_done * <fs_data>-prozt / 100.
        <fs_data>-sum_diff = <fs_data>-sum_todo - <fs_data>-sum_done.
      ENDIF.
    ENDLOOP.
* --< AK_RUBAHOV #27300 Доработка по формированию ЭСЧФ
  ENDMETHOD.


  METHOD select_data_inorg.
    DATA: lv_mwskz_old TYPE mwskz,
          lv_budat_old TYPE budat,
          lv_prozt     TYPE string.
    TRY.
        zfi_nds_fororg_hdb=>get_data_inorg(
          EXPORTING iv_bdate  = gs_sscr-begda
                    iv_edate  = gs_sscr-endda
                    iv_filter = cl_shdb_seltab=>combine_seltabs(
                                  it_named_seltabs = VALUE #(
                                    ( name = 'BUKRS' dref = REF #( gs_sscr-bukrs[] ) )
                                    ( name = 'BUDAT' dref = REF #( gs_sscr-budat[] ) )
                                    ( name = 'MWSKZ' dref = REF #( gs_sscr-mwskz[] ) ) ) )
          IMPORTING et_data   = DATA(lt_data) ).
      CATCH cx_root INTO DATA(lr_exception).
        MESSAGE i999 WITH TEXT-t00.
        cl_demo_output=>display( lr_exception->get_text( ) ).
        RETURN.
    ENDTRY.

    SORT lt_data BY mwskz budat land.
    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      IF lv_mwskz_old IS INITIAL OR lv_budat_old IS INITIAL OR
         lv_mwskz_old <> <ls_data>-mwskz OR lv_budat_old <> <ls_data>-budat .
        lv_mwskz_old = <ls_data>-mwskz.
        lv_budat_old = <ls_data>-budat.
        lv_prozt     = me->get_tax( is_data = <ls_data> ).
      ENDIF.
      APPEND VALUE #( main_inorg = <ls_data>
                      prozt      = lv_prozt )
      TO gt_data_inorg.
    ENDLOOP.

    SORT gt_data_inorg BY bukrs gjahr belnr.
  ENDMETHOD.


  METHOD show_alv_inorg.
    IF gr_grid IS BOUND.
      RETURN.
    ENDIF.

    " формирование каталога полей
    DATA(lt_fcat) = me->fill_fieldcat_inorg( ).

    gr_grid = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'ALV_CONTAINER' ) i_appl_events = abap_true ).

    DATA(lt_exclude) = VALUE rsd_t_func(
      ( cl_gui_alv_grid=>mc_fc_loc_copy_row )
      ( cl_gui_alv_grid=>mc_fc_loc_cut )
      ( cl_gui_alv_grid=>mc_fc_loc_delete_row )
      ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
      ( cl_gui_alv_grid=>mc_fc_loc_move_row )
      ( cl_gui_alv_grid=>mc_fc_loc_paste )
      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
      ( cl_gui_alv_grid=>mc_fc_loc_append_row )
      ).

    gr_grid->set_table_for_first_display(
        EXPORTING is_layout             = VALUE lvc_s_layo( zebra = abap_true col_opt = abap_true info_fname = 'COLOR' stylefname = 'CELLTAB' sel_mode = 'A' )
                  i_save                = 'A'
                  it_toolbar_excluding  = lt_exclude[]
                  is_variant            = VALUE disvariant( variant = gs_sscr-variant-variant report = gs_sscr-variant-report )
        CHANGING  it_outtab             = gt_data_inorg[]
                  it_fieldcatalog       = lt_fcat[] ).

    SET HANDLER
      me->on_single_click_inorg
      me->on_user_command_inorg
      me->on_toolbar_inorg
      FOR gr_grid.

    gr_grid->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).
    gr_grid->set_toolbar_interactive( ).

  ENDMETHOD.


  METHOD show_alv_screen.
    IF gr_grid IS BOUND.
      RETURN.
    ENDIF.

    " формирование каталога полей
    DATA(lt_fcat) = me->fill_fieldcat( ).
    DATA(lt_sort) = VALUE lvc_t_sort( ( fieldname = 'BELNR' up = abap_true ) ).

    gr_grid = NEW #( i_parent = NEW cl_gui_custom_container( container_name = 'ALV_CONTAINER' ) i_appl_events = abap_true ).

    DATA(lt_exclude) = VALUE rsd_t_func(
      ( cl_gui_alv_grid=>mc_fc_loc_copy_row )
      ( cl_gui_alv_grid=>mc_fc_loc_cut )
      ( cl_gui_alv_grid=>mc_fc_loc_delete_row )
      ( cl_gui_alv_grid=>mc_fc_loc_insert_row )
      ( cl_gui_alv_grid=>mc_fc_loc_move_row )
      ( cl_gui_alv_grid=>mc_fc_loc_paste )
      ( cl_gui_alv_grid=>mc_fc_loc_paste_new_row )
      ( cl_gui_alv_grid=>mc_fc_loc_append_row )
      ).

    gr_grid->set_table_for_first_display(
        EXPORTING is_layout             = VALUE lvc_s_layo( zebra = abap_true col_opt = abap_true info_fname = 'COLOR' stylefname = 'CELLTAB' sel_mode = 'A' )
                  i_save                = 'A'
                  it_toolbar_excluding  = lt_exclude[]
                  is_variant            = VALUE disvariant( variant = gs_sscr-variant-variant report = gs_sscr-variant-report )
        CHANGING  it_outtab             = gt_data[]
                  it_sort               = lt_sort[]
                  it_fieldcatalog       = lt_fcat[] ).

    SET HANDLER
      me->on_single_click
      me->on_user_command
      me->on_mark_changed
      me->on_toolbar
      me->on_menu_button
      me->on_data_changed_finished
      FOR gr_grid.

    gr_grid->register_edit_event( i_event_id = cl_gui_alv_grid=>mc_evt_modified ).
    gr_grid->set_toolbar_interactive( ).

  ENDMETHOD.


  METHOD show_documents.
    DATA: lr_alv TYPE REF TO cl_salv_table.

    gr_docs = REF #( ct_docs[] ).

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = ct_docs[] ).
      CATCH cx_salv_msg .
        RETURN.
    ENDTRY.

    DATA(lr_functions) = lr_alv->get_functions( ).
    lr_functions->set_all( abap_true ).

    DATA(lr_columns) = lr_alv->get_columns( ).
    lr_columns->set_optimize( 'X' ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      <ls_fcat>-do_sum = COND #( WHEN <ls_fcat>-fieldname = 'HSL' THEN abap_true ).
      me->modify_documents_fcat( EXPORTING ir_columns = lr_columns CHANGING cs_fcat = <ls_fcat> ).
    ENDLOOP.

    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    TRY .
        lr_sort->add_sort( 'BUKRS' ).
        lr_sort->add_sort( 'BELNR' ).
        lr_sort->add_sort( 'GJAHR' ).
        lr_sort->add_sort( 'BUZEI' ).
      CATCH cx_salv_existing.
        RETURN.
    ENDTRY.

    DATA(lr_events) = lr_alv->get_event( ).
    SET HANDLER on_salv_click FOR lr_events.

    lr_alv->set_screen_popup(
      start_column = 15
      end_column  = 180
      start_line  = 5
      end_line    = 25 ).

    lr_alv->display( ).
  ENDMETHOD.


  METHOD show_protocol.
    DATA: lr_alv     TYPE REF TO cl_salv_table,
          lt_journal TYPE STANDARD TABLE OF gty_s_journal WITH DEFAULT KEY.

    IF im_refresh_main = abap_true.
      gr_grid->refresh_table_display( ).
    ENDIF.

    IF im_belnr IS SUPPLIED.
      lt_journal[] = VALUE #(
        FOR <ls_jour> IN gt_jour[]
        WHERE ( belnr = im_belnr )
        ( <ls_jour> ) ).
    ELSE.
      lt_journal[] = gt_jour[].
    ENDIF.

    TRY.
        cl_salv_table=>factory(
          IMPORTING r_salv_table = lr_alv
          CHANGING  t_table      = lt_journal[] ).
      CATCH cx_salv_msg.
        RETURN.
    ENDTRY.

    DATA(lr_columns) = lr_alv->get_columns( ).
    DATA(lr_aggregations) = lr_alv->get_aggregations( ).
    DATA(lt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog( r_columns = lr_columns r_aggregations = lr_aggregations ).

    LOOP AT lt_fcat[] ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'STATUS'.
          <ls_fcat>-outputlen = 5.
          <ls_fcat>-just = 'C'.
          <ls_fcat>-reptext = <ls_fcat>-scrtext_l = TEXT-09l.
          <ls_fcat>-scrtext_m = TEXT-09m.
          <ls_fcat>-scrtext_s = TEXT-09s.
        WHEN 'TYPE' OR 'PARAMETER' OR 'ROW' OR 'FIELD' OR 'SYSTEM'. "OR 'ID' OR 'NUMBER'
          <ls_fcat>-no_out = abap_true.
        WHEN 'MESSAGE'.
          <ls_fcat>-outputlen = 63.
        WHEN 'ID'.
          <ls_fcat>-outputlen = 10.
        WHEN 'NUMBER'.
          <ls_fcat>-outputlen = 7.
        WHEN OTHERS.
          IF <ls_fcat>-fieldname CP 'MESSAGE_V+' OR <ls_fcat>-fieldname CP 'LOG_*'.
            <ls_fcat>-no_out = abap_true.
          ENDIF.
      ENDCASE.
    ENDLOOP.
    cl_salv_controller_metadata=>set_lvc_fieldcatalog( t_fieldcatalog = lt_fcat[] r_columns = lr_columns r_aggregations = lr_aggregations ).

    DATA(lr_sort) = lr_alv->get_sorts( ).
    lr_sort->add_sort( 'BELNR' ).

    lr_alv->set_screen_popup(
      start_column = 10
      end_column  = 115
      start_line  = 5
      end_line    = 20 ).

    lr_alv->display( ).

  ENDMETHOD.
ENDCLASS.