class /AIF/CL_INF_DET_ENGINE_XML definition
  public
  inheriting from /AIF/CL_INF_DET_ENGINE_BASE
  create public .

*"* public components of class /AIF/CL_INF_DET_ENGINE_XML
*"* do not include other source files here!!!
public section.

  methods CONSTRUCTOR .
  methods GET_TYPENAME
    importing
      !IV_INPUT type ANY
    exporting
      !EV_NAME1 type /AIF/LFIELDNAME_INFDET .

  methods /AIF/IF_INF_DET_ENGINE~DETERMINE_INF
    redefinition .
  methods /AIF/IF_INF_DET_ENGINE~GET_INF_DET_VAL
    redefinition .
protected section.
*"* protected components of class /AIF/CL_INF_DET_ENGINE_XML
*"* do not include other source files here!!!
private section.
*"* private components of class /AIF/CL_INF_DET_ENGINE_XML
*"* do not include other source files here!!!

  methods READ_DATA
    importing
      !DATA type ANY
      !IS_INF_DET_CHECKS type /AIF/T_INFDET_CH
    exporting
      !RESULT_DATA type /AIF/VALUE
      !RESULT_STRUC type ref to DATA
      !FIELDNAME type /AIF/LFIELDNAME
    changing
      !ROOT_STRUC type ref to DATA
    raising
      /AIF/CX_INF_DET_BASE .
ENDCLASS.



CLASS /AIF/CL_INF_DET_ENGINE_XML IMPLEMENTATION.


METHOD /aif/if_inf_det_engine~determine_inf.
  DATA:
    lt_finf   TYPE TABLE OF /aif/t_finf,
    lv_lines  TYPE i,
    ls_textid TYPE scx_t100key.
  DATA lv_name TYPE /aif/lfieldname_infdet.
  DATA: lv_ns        TYPE /aif/ns,
        lv_ifname    TYPE /aif/ifname,
        lv_ifversion TYPE /aif/ifversion.
  DATA: lv_ximsgguid  TYPE sxmsmguid.
* get values according customizing "Interface Determination"
  DATA: ls_ifdet    TYPE /aif/t_inf_det,
        lt_ifdetval TYPE TABLE OF /aif/t_infdet_vl.
  FIELD-SYMBOLS: <ls_ifdetval> TYPE /aif/t_infdet_vl.
  DATA lv_category TYPE cccategory.
  SELECT SINGLE cccategory FROM t000 INTO lv_category WHERE mandt = sy-mandt.
  lv_ximsgguid = iv_msgguid.
  lv_name = iv_name1.
  SELECT SINGLE * INTO ls_ifdet
    FROM  /aif/t_inf_det
    WHERE type = type
    AND cust_ns = cust_ns
    AND cust_type = cust_type
    AND name1 = iv_name1
    AND name2 = iv_name2.
  IF sy-subrc = 0.
    IF NOT ls_ifdet-fuba_name IS INITIAL.
      TRY.
          CALL FUNCTION ls_ifdet-fuba_name
            EXPORTING
              iv_type              = type
              iv_cust_ns           = cust_ns
              iv_cust_type         = cust_type
              iv_name1             = iv_name1
              iv_name2             = iv_name2
              iv_input             = iv_input
            IMPORTING
              ev_ns                = lv_ns
              ev_ifname            = lv_ifname
              ev_ifversion         = lv_ifversion
            EXCEPTIONS
              interface_det_failed = 1.
          IF sy-subrc = 0.
            IF lv_ns IS INITIAL AND lv_ifname IS INITIAL AND lv_ifversion IS INITIAL.
              CLEAR ls_textid.
              IF 1 = 2. MESSAGE e004(/aif/engine_xml) WITH iv_name1. ENDIF. " dummy statement for SE91 usage
              ls_textid-msgid = '/AIF/ENGINE_XML'.
              ls_textid-msgno = 004.
              ls_textid-attr1 = iv_name1.
              RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDIF.
            SELECT SINGLE * FROM /aif/t_finf
           INTO es_finf WHERE ns = lv_ns
                        AND ifname = lv_ifname
                        AND ifversion = lv_ifversion.
            IF sy-subrc <> 0.
              CLEAR ls_textid.
              IF 1 = 2. MESSAGE e309(/aif/mes) WITH lv_ns lv_ifname lv_ifversion. ENDIF. " dummy statement for SE91 usage
              ls_textid-msgid = '/AIF/MES'.
              ls_textid-msgno = 309.
              ls_textid-attr1 = lv_ns.
              ls_textid-attr2 = lv_ifname.
              ls_textid-attr3 = lv_ifversion.
              RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = ls_textid.
            ELSE.
              RETURN.
            ENDIF.
          ELSE.
            CLEAR ls_textid.
            IF 1 = 2. MESSAGE e004(/aif/inf_det). ENDIF. " dummy statement for SE91 usage
            ls_textid-msgid = '/AIF/INF_DET'.
            ls_textid-msgno = 004.
            RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = ls_textid.
          ENDIF.
        CATCH cx_sy_dyn_call_illegal_func.
          CLEAR ls_textid.
          ls_textid-msgid = sy-msgid.
          ls_textid-msgno = sy-msgno.
          ls_textid-attr1 = sy-msgv1.
          ls_textid-attr2 = sy-msgv2.
          ls_textid-attr3 = sy-msgv3.
          ls_textid-attr4 = sy-msgv4.
          RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = ls_textid.
      ENDTRY.
    ELSE.
      DATA: lv_value1       TYPE /aif/value,
            lv_value2       TYPE /aif/value,
            lv_value3       TYPE /aif/value,
            lv_value4       TYPE /aif/value,
            lv_value5       TYPE /aif/value,
            lv_found        TYPE c,
            lv_found2       TYPE c,
            lv_found3       TYPE c,
            lv_found4       TYPE c,
            lv_found5       TYPE c,
            lv_without_date TYPE c,
            lv_date         TYPE c,
            ls_ifdetval     TYPE /aif/t_infdet_vl,
            lv_checks       TYPE char01.
      DATA lt_idx_tab_name TYPE TABLE OF /aif/msg_tbl.
      DATA lv_idx_tab_name TYPE /aif/msg_tbl.
      FIELD-SYMBOLS <fs_idx_tab_name> LIKE LINE OF lt_idx_tab_name.
      SELECT *
        INTO TABLE lt_ifdetval
          FROM  /aif/t_infdet_vl
            WHERE type = type
            AND cust_ns = cust_ns
            AND cust_type = cust_type
            AND name1 = iv_name1
            AND name2 = iv_name2.
      SORT lt_ifdetval BY type cust_ns cust_type name1 name2 valuenr ASCENDING.
* Check if the message is restarted
      IF NOT lt_ifdetval IS INITIAL.
        SELECT msg_tbl INTO TABLE lt_idx_tab_name
          FROM /aif/t_inf_tbl
          FOR ALL ENTRIES IN lt_ifdetval
            WHERE ns        = lt_ifdetval-ns
            AND   ifname    = lt_ifdetval-ifname
            AND   ifver     = lt_ifdetval-ifversion.
      ENDIF.
      lv_idx_tab_name = '/AIF/STD_IDX_TBL'.
      APPEND lv_idx_tab_name TO lt_idx_tab_name.
      SORT lt_idx_tab_name.
      DELETE ADJACENT DUPLICATES FROM lt_idx_tab_name.
      IF NOT iv_msgguid IS INITIAL.
        LOOP AT lt_idx_tab_name ASSIGNING <fs_idx_tab_name>.
          CHECK <fs_idx_tab_name> IS NOT INITIAL.
          TRY.
              SELECT SINGLE ns ifname ifver FROM (<fs_idx_tab_name>) INTO (lv_ns, lv_ifname, lv_ifversion) WHERE msgguid = iv_msgguid.
              CHECK sy-subrc = 0.
              SELECT SINGLE * INTO es_finf
                 FROM  /aif/t_finf
                  WHERE ns = lv_ns
                   AND  ifname = lv_ifname
                   AND  ifversion = lv_ifversion.
              EXIT.
            CATCH cx_sy_dynamic_osql_syntax.
              CLEAR ls_textid.
              IF 1 = 2. MESSAGE e311(/aif/mes). ENDIF. " dummy statement for SE91 usage
              ls_textid-msgid = '/AIF/MES'.
              ls_textid-msgno = 311.
              RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
          ENDTRY.
        ENDLOOP.
      ENDIF.
      CHECK es_finf IS INITIAL.
*      TRY.
      me->/aif/if_inf_det_engine~get_inf_det_val(
        EXPORTING
          is_input_struct   = iv_input
          is_inf_det        = ls_ifdet
        CHANGING
          cv_value           = lv_value1
          cv_value2          = lv_value2
          cv_value3          = lv_value3
          cv_value4          = lv_value4
          cv_value5          = lv_value5 ).
      LOOP AT lt_ifdetval ASSIGNING <ls_ifdetval>.
* check if conditions are true
        CLEAR: lv_found, lv_found2, lv_found3, lv_found4, lv_found5, lv_date, lv_checks.
        CASE <ls_ifdetval>-operator.
          WHEN ''.lv_found = 'X'.
          WHEN 'EQ'.IF lv_value1 EQ <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'NE'.IF lv_value1 NE <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'CP'.IF lv_value1 CP <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'NP'.IF lv_value1 NP <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'CA'.IF lv_value1 CA <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'NA'.IF lv_value1 NA <ls_ifdetval>-fieldvalue. lv_found = 'X'.ENDIF.
          WHEN 'MT'.
            TRY.
                CALL METHOD cl_abap_matcher=>matches
                  EXPORTING
                    pattern = <ls_ifdetval>-fieldvalue
                    text    = lv_value1
                  RECEIVING
                    success = lv_found.
              CATCH cx_sy_regex .
**           Enter a valid value instead of &1 in Interface Determination
                CLEAR ls_textid.
                IF 1 = 2. MESSAGE e231(/aif/mes) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
                ls_textid-msgid = '/AIF/MES'.
                ls_textid-msgno = 231.
                ls_textid-attr1 = <ls_ifdetval>-fieldvalue.
                RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDTRY.
          WHEN OTHERS.
        ENDCASE.
        CHECK lv_found = 'X'.
        CASE <ls_ifdetval>-operator2.
          WHEN ''.lv_found2 = 'X'.
          WHEN 'EQ'.IF lv_value2 EQ <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'NE'.IF lv_value2 NE <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'CP'.IF lv_value2 CP <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'NP'.IF lv_value2 NP <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'CA'.IF lv_value2 CA <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'NA'.IF lv_value2 NA <ls_ifdetval>-fieldvalue2. lv_found2 = 'X'.ENDIF.
          WHEN 'MT'.
            TRY.
                CALL METHOD cl_abap_matcher=>matches
                  EXPORTING
                    pattern = <ls_ifdetval>-fieldvalue2
                    text    = lv_value2
                  RECEIVING
                    success = lv_found2.
              CATCH cx_sy_regex .
*           Enter a valid value instead of &1 in Interface Determination
                CLEAR ls_textid.
                IF 1 = 2. MESSAGE e231(/aif/mes) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
                ls_textid-msgid = '/AIF/MES'.
                ls_textid-msgno = 231.
                ls_textid-attr1 = <ls_ifdetval>-fieldvalue2.
                RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDTRY.
          WHEN OTHERS.
        ENDCASE.
        CHECK lv_found2 = 'X'.
        CASE <ls_ifdetval>-operator3.
          WHEN ''.lv_found3 = 'X'.
          WHEN 'EQ'.IF lv_value3 EQ <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'NE'.IF lv_value3 NE <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'CP'.IF lv_value3 CP <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'NP'.IF lv_value3 NP <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'CA'.IF lv_value3 CA <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'NA'.IF lv_value3 NA <ls_ifdetval>-fieldvalue3. lv_found3 = 'X'.ENDIF.
          WHEN 'MT'.
            TRY.
                CALL METHOD cl_abap_matcher=>matches
                  EXPORTING
                    pattern = <ls_ifdetval>-fieldvalue3
                    text    = lv_value3
                  RECEIVING
                    success = lv_found3.
              CATCH cx_sy_regex .
*           Enter a valid value instead of &1 in Interface Determination
                CLEAR ls_textid.
                IF 1 = 2. MESSAGE e231(/aif/mes) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
                ls_textid-msgid = '/AIF/MES'.
                ls_textid-msgno = 231.
                ls_textid-attr1 = <ls_ifdetval>-fieldvalue3.
                RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDTRY.
          WHEN OTHERS.
        ENDCASE.
        CHECK lv_found3 = 'X'.
        CASE <ls_ifdetval>-operator4.
          WHEN ''.lv_found4 = 'X'.
          WHEN 'EQ'.IF lv_value4 EQ <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'NE'.IF lv_value4 NE <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'CP'.IF lv_value4 CP <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'NP'.IF lv_value4 NP <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'CA'.IF lv_value4 CA <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'NA'.IF lv_value4 NA <ls_ifdetval>-fieldvalue4. lv_found4 = 'X'.ENDIF.
          WHEN 'MT'.
            TRY.
                CALL METHOD cl_abap_matcher=>matches
                  EXPORTING
                    pattern = <ls_ifdetval>-fieldvalue4
                    text    = lv_value4
                  RECEIVING
                    success = lv_found4.
              CATCH cx_sy_regex .
*           Enter a valid value instead of &1 in Interface Determination
                CLEAR ls_textid.
                IF 1 = 2. MESSAGE e231(/aif/mes) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
                ls_textid-msgid = '/AIF/MES'.
                ls_textid-msgno = 231.
                ls_textid-attr1 = <ls_ifdetval>-fieldvalue4.
                RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDTRY.
          WHEN OTHERS.
        ENDCASE.
        CHECK lv_found4 = 'X'.
        CASE <ls_ifdetval>-operator5.
          WHEN ''.lv_found5 = 'X'.
          WHEN 'EQ'.IF lv_value5 EQ <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'NE'.IF lv_value5 NE <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'CP'.IF lv_value5 CP <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'NP'.IF lv_value5 NP <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'CA'.IF lv_value5 CA <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'NA'.IF lv_value5 NA <ls_ifdetval>-fieldvalue5. lv_found5 = 'X'.ENDIF.
          WHEN 'MT'.
            TRY.
                CALL METHOD cl_abap_matcher=>matches
                  EXPORTING
                    pattern = <ls_ifdetval>-fieldvalue5
                    text    = lv_value5
                  RECEIVING
                    success = lv_found5.
              CATCH cx_sy_regex .
*           Enter a valid value instead of &1 in Interface Determination
                CLEAR ls_textid.
                IF 1 = 2. MESSAGE e231(/aif/mes) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
                ls_textid-msgid = '/AIF/MES'.
                ls_textid-msgno = 231.
                ls_textid-attr1 = <ls_ifdetval>-fieldvalue5.
                RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
            ENDTRY.
          WHEN OTHERS.
        ENDCASE.
* Check Validity Period and status
        IF NOT <ls_ifdetval>-valid_period_no IS INITIAL.
          DATA ls_validity_period TYPE /aif/valid_perio.
          SELECT SINGLE * FROM /aif/valid_perio
            INTO ls_validity_period
            WHERE valid_period_no = <ls_ifdetval>-valid_period_no.
          IF ( ls_validity_period-valid_from IS INITIAL AND ls_validity_period-valid_to IS INITIAL ).
            lv_date = 'X'.
          ELSEIF ( ls_validity_period-valid_to IS INITIAL
            AND ( ls_validity_period-valid_from < sy-datum ) ).
            lv_date = 'X'.
          ELSEIF ( ls_validity_period-valid_from IS INITIAL
            AND ( ls_validity_period-valid_to > sy-datum ) ).
            lv_date = 'X'.
          ELSEIF ( ( ls_validity_period-valid_from <= sy-datum ) AND ( ls_validity_period-valid_to >= sy-datum )
          AND ( ls_validity_period-valid_from <= ls_validity_period-valid_to ) ).
            lv_date = 'X'.
          ENDIF.
        ELSEIF <ls_ifdetval>-valid_from IS INITIAL AND <ls_ifdetval>-valid_to IS INITIAL.
          lv_date = 'X'.
        ELSEIF <ls_ifdetval>-valid_to IS INITIAL
          AND ( <ls_ifdetval>-valid_from < sy-datum ).
          lv_date = 'X'.
        ELSEIF <ls_ifdetval>-valid_from IS INITIAL
          AND ( <ls_ifdetval>-valid_to > sy-datum ).
          lv_date = 'X'.
        ELSEIF ( <ls_ifdetval>-valid_from <= sy-datum ) AND ( <ls_ifdetval>-valid_to >= sy-datum )
        AND ( <ls_ifdetval>-valid_from <= <ls_ifdetval>-valid_to ).
          lv_date = 'X'.
        ENDIF.
* check if the checks are true
        IF lv_found = 'X' AND lv_found2 = 'X' AND lv_found3 = 'X' AND lv_found4 = 'X' AND lv_found5 = 'X' AND lv_date = 'X'.
          DATA: ls_data_line  TYPE REF TO data,
                ls_root_struc TYPE REF TO data,
                lv_data_field TYPE /aif/value.
          DATA: ls_check   TYPE /aif/t_check,
                lt_tabchk  TYPE TABLE OF /aif/t_tabchk,
                lt_tabfld  TYPE TABLE OF /aif/t_tabfld,
                return_tab TYPE TABLE OF bapiret2.
          DATA dummy_tab TYPE TABLE OF c.
          FIELD-SYMBOLS: <fs_field> TYPE any,
                         <fs_root>  TYPE any.
          DATA lt_infdet_checks TYPE TABLE OF /aif/t_infdet_ch.
          FIELD-SYMBOLS <fs_infdet_checks> LIKE LINE OF lt_infdet_checks.
          FIELD-SYMBOLS: <ls_result_struc> TYPE any.
          DATA lv_fieldname TYPE /aif/lfieldname.
          SELECT * FROM /aif/t_infdet_ch
            INTO TABLE lt_infdet_checks
              WHERE type = type
            AND cust_ns = cust_ns
            AND cust_type = cust_type
            AND name1 = iv_name1
            AND name2 = iv_name2
            AND valuenr = <ls_ifdetval>-valuenr.
          LOOP AT lt_infdet_checks ASSIGNING <fs_infdet_checks>.
            SELECT SINGLE * FROM /aif/t_check INTO ls_check WHERE ns = <fs_infdet_checks>-ns_check
              AND aifcheck = <fs_infdet_checks>-aifcheck.
            SELECT * FROM /aif/t_tabchk INTO TABLE lt_tabchk WHERE ns = <fs_infdet_checks>-ns_check
               AND aifcheck = <fs_infdet_checks>-aifcheck.
            me->read_data(
              EXPORTING
                data              = iv_input
                is_inf_det_checks = <fs_infdet_checks>
              IMPORTING
                result_data       = lv_data_field
                result_struc      = ls_data_line
                fieldname         = lv_fieldname
              CHANGING
                root_struc        = ls_root_struc ).
            ASSIGN ls_root_struc->* TO <fs_root>.
            CHECK <fs_root> IS ASSIGNED.
            ASSIGN ls_data_line->* TO <ls_result_struc>.
            CHECK <ls_result_struc> IS ASSIGNED.
            CALL FUNCTION '/AIF/FILE_EVALUATE_CHECK'
              EXPORTING
                data_struct        = iv_input
                data_line          = <ls_result_struc>
                data_field         = lv_data_field
                fieldname          = lv_fieldname
                fieldname2         = <fs_infdet_checks>-fieldname2
                fieldname3         = <fs_infdet_checks>-fieldname3
                fieldname4         = <fs_infdet_checks>-fieldname4
                fieldname5         = <fs_infdet_checks>-fieldname5
                ls_check           = ls_check
              IMPORTING
                error              = lv_checks
              TABLES
                return_tab         = return_tab
                lt_tabchk          = lt_tabchk
                lt_tabfld          = lt_tabfld
                data_table         = dummy_tab
              EXCEPTIONS
                max_errors_reached = 1.
            IF sy-subrc <> 0.
              CLEAR ls_textid.
              ls_textid-msgid = sy-msgid.
              ls_textid-msgno = sy-msgno.
              ls_textid-attr1 = sy-msgv1.
              ls_textid-attr2 = sy-msgv2.
              ls_textid-attr3 = sy-msgv3.
              ls_textid-attr4 = sy-msgv4.
              RAISE EXCEPTION TYPE /aif/cx_error_handling_general EXPORTING textid = ls_textid.
            ENDIF.
*              CATCH /aif/cx_inf_det_base.
*                MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*            ENDTRY.
* verschiedenen checks in der interface determination mit Und vernküpft, sobald einer falsch neue Interface Determiation zeilen
            IF lv_checks = 'X'.
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDIF.
        IF lv_found = 'X' AND lv_found2 = 'X' AND lv_found3 = 'X' AND lv_found4 = 'X' AND lv_found5 = 'X' AND lv_date = 'X' AND lv_checks = ''.
          ls_ifdetval = <ls_ifdetval>.
          lv_without_date = 'X'.
          SELECT SINGLE * INTO es_finf
            FROM  /aif/t_finf
            WHERE ns = ls_ifdetval-ns
            AND   ifname = ls_ifdetval-ifname
            AND   ifversion = ls_ifdetval-ifversion.
          IF es_finf-ns IS INITIAL AND es_finf-ifname IS INITIAL AND es_finf-ifversion IS INITIAL
          OR es_finf-ddicstructureraw IS INITIAL.
            CLEAR ls_textid.
            IF 1 = 2. MESSAGE e004(/aif/engine_xml) WITH iv_name1. ENDIF. " dummy statement for SE91 usage
            ls_textid-msgid = '/AIF/ENGINE_XML'.
            ls_textid-msgno = 004.
            ls_textid-attr1 = iv_name1.
            RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
          ENDIF.
*         Note: 2119537
          DATA: lv_process_if TYPE /aif/boolean.
          me->check_interface_status(
            EXPORTING
              is_finf       = es_finf
              iv_category   = lv_category
            IMPORTING
              ev_process_if = lv_process_if
                 ).
          IF lv_process_if = 'X'.
*            the determined interface can be processed, so we can exit the interface determination
            RETURN.
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ELSE. "no interface determination was found for the message, check directly for interfaces
* get interface customizing (assuming the class name is used in exactly one interface!)
    IF iv_outbound = ''.
      SELECT * FROM /aif/t_finf
               INTO TABLE lt_finf
               WHERE ddicstructureraw = iv_name1.
    ELSE.
      SELECT * FROM /aif/t_finf
             INTO TABLE lt_finf
             WHERE ddicstructure = iv_name1.
    ENDIF.
    IF sy-subrc <> 0.
      CLEAR ls_textid.
      IF 1 = 2. MESSAGE e004(/aif/engine_xml) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
      ls_textid-msgid = '/AIF/ENGINE_XML'.
      ls_textid-msgno = 004.
      ls_textid-attr1 = iv_name1.
      RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
    ELSE.
* status handling
      FIELD-SYMBOLS: <fs_finf> LIKE LINE OF lt_finf.
      DATA: lt_finf_status TYPE TABLE OF /aif/t_finf.
      LOOP AT lt_finf ASSIGNING <fs_finf>.
*      Note: 2119537
        me->check_interface_status( EXPORTING is_finf       = <fs_finf>
                                              iv_category   = lv_category
                                    IMPORTING ev_process_if = lv_process_if ).
        CHECK lv_process_if = 'X'.
        APPEND <fs_finf> TO lt_finf_status.
      ENDLOOP.
      IF lt_finf_status IS INITIAL .
        CLEAR ls_textid.
        IF 1 = 2. MESSAGE e004(/aif/engine_xml) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
        ls_textid-msgid = '/AIF/ENGINE_XML'.
        ls_textid-msgno = 004.
        ls_textid-attr1 = iv_name1.
        RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
      ELSE.
* check if there are different interfaces, not only different versions
        DATA: ls_finf1 TYPE /aif/t_finf,
              ls_finf2 TYPE /aif/t_finf.
        DESCRIBE TABLE lt_finf_status LINES lv_lines.
        SORT lt_finf_status BY ns ifname ASCENDING ifversion DESCENDING.

          READ TABLE lt_finf_status INTO ls_finf1 INDEX 1.
          READ TABLE lt_finf_status INTO ls_finf2 INDEX lv_lines.
          IF ls_finf1-ifname <> ls_finf2-ifname OR ls_finf1-ns <> ls_finf2-ns.
            CLEAR ls_textid.
            IF 1 = 2. MESSAGE e005(/aif/engine_xml) WITH <ls_ifdetval>-fieldvalue. ENDIF. " dummy statement for SE91 usage
            ls_textid-msgid = '/AIF/ENGINE_XML'.
            ls_textid-msgno = 005.
            ls_textid-attr1 = iv_name1.

*             raise Health check beacuse no unique interface was found
            me->raise_health_check( lt_finf_status ).

            me->appl_log_2( EXPORTING
                              iv_ximsgguid  = lv_ximsgguid
                              is_message    = ls_textid
                            IMPORTING
                              ev_log_handle = ev_log_handle ).
            RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
          ENDIF.
** take highest version
          READ TABLE lt_finf_status INTO es_finf INDEX 1.
      ENDIF.
    ENDIF.
  ENDIF.
*  Begin Note 2399915
*  If still no interface determined, raise interface determination exception
  IF es_finf IS INITIAL.
    CLEAR ls_textid.
    IF 1 = 2. MESSAGE e004(/aif/engine_xml) WITH iv_name1. ENDIF. " dummy statement for SE91 usage
    ls_textid-msgid = '/AIF/ENGINE_XML'.
    ls_textid-msgno = 004.
    ls_textid-attr1 = iv_name1.
    RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING textid = ls_textid.
  ENDIF.
*  End Note 2399915
ENDMETHOD.


METHOD /aif/if_inf_det_engine~get_inf_det_val.
  DATA: lv_fieldcategory TYPE /aif/fieldcategory,
      lv_fieldname TYPE /aif/lfieldname.
  DATA: lv_count TYPE i VALUE 0.
  DATA  lr_server_context  TYPE REF TO if_ws_server_context.
*  FIELD-SYMBOLS: <ls_field>.

  DATA: lv_ddicstruct TYPE tabname.

  FIELD-SYMBOLS: <lv_value> TYPE /aif/value,
                 <lv_field> TYPE ANY.

  CHECK NOT is_inf_det-name1 IS INITIAL.
*  proxyclassname = is_inf_det-name1.
*
*  " get ddic structure and recordtype from class name
*  CALL METHOD me->read_proxyclass_infos
*    EXPORTING
*      iv_proxy_classname  = proxyclassname
*    IMPORTING
*      ev_ddicstruct_input = lv_ddicstruct
*      ev_rectype_input    = rectype_input.
*
*  ddicstruct_input = lv_ddicstruct.

  CLEAR: cv_value, cv_value2, cv_value3, cv_value4, cv_value5.

  DO 5 TIMES.
    CLEAR: lv_fieldname, lv_fieldcategory.
    lv_count = lv_count + 1.
    IF lv_count = 1.
      lv_fieldcategory = is_inf_det-fieldcategory.
      lv_fieldname = is_inf_det-fieldname.
      ASSIGN cv_value TO <lv_value>.
    ELSEIF lv_count = 2.
      lv_fieldcategory = is_inf_det-fieldcategory2.
      lv_fieldname = is_inf_det-fieldname2.
      ASSIGN cv_value2 TO <lv_value>.
    ELSEIF lv_count = 3.
      lv_fieldcategory = is_inf_det-fieldcategory3.
      lv_fieldname = is_inf_det-fieldname3.
      ASSIGN cv_value3 TO <lv_value>.
    ELSEIF lv_count = 4.
      lv_fieldcategory = is_inf_det-fieldcategory4.
      lv_fieldname = is_inf_det-fieldname4.
      ASSIGN cv_value4 TO <lv_value>.
    ELSEIF lv_count = 5.
      lv_fieldcategory = is_inf_det-fieldcategory5.
      lv_fieldname = is_inf_det-fieldname5.
      ASSIGN cv_value5 TO <lv_value>.
    ENDIF.

    CHECK NOT lv_fieldname IS INITIAL.

*    IF NOT rectype_input IS INITIAL.
*      CONCATENATE rectype_input lv_fieldname INTO lv_fieldname SEPARATED BY '-'.
*    ENDIF.

    IF lv_fieldcategory = 'A' OR lv_fieldcategory IS INITIAL.
*    ASSIGN COMPONENT lv_fieldname OF STRUCTURE ps_input_struct TO <ls_field>.
*    pv_value = <ls_field>.
      CALL FUNCTION '/AIF/UTIL_READ_DATA'
        EXPORTING
          data              = is_input_struct
          path              = lv_fieldname
        IMPORTING
          RESULT            = <lv_value>
        EXCEPTIONS
          element_not_found = 1
          empty_table       = 2
          error_occurs      = 3
          OTHERS            = 4.
      IF sy-subrc <> 0.
        CLEAR: <lv_value>.
      ENDIF.

* 'S' = SY fields
    ELSEIF lv_fieldcategory = 'S'.
      ASSIGN COMPONENT lv_fieldname OF STRUCTURE sy TO <lv_field>.
      IF sy-subrc = 0.
        <lv_value> = <lv_field>.
      ELSE.
        CLEAR: <lv_value>.
      ENDIF.

*    ELSEIF lv_fieldcategory = 'X'.
** XI header data
*      DATA: lr_xi_header TYPE REF TO if_wsprotocol_xi_header,
*            lv_fieldname_str TYPE string.
*
*      IF NOT lr_server_context IS BOUND.
*        TRY.
*            CALL METHOD cl_proxy_access=>get_server_context
*              RECEIVING
*                server_context = lr_server_context.
*          CATCH cx_ai_system_fault.
*            RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING
*                textid = /aif/cx_inf_det_base=>servercontext_not_determined.
*        ENDTRY.
*      ENDIF.
*
*      lv_fieldname_str = lv_fieldname.
*      TRY.
*          lr_xi_header ?= lr_server_context->get_protocol( if_wsprotocol=>xi_header ).
*          <lv_value> = lr_xi_header->get_header_field( lv_fieldname_str ).
*        CATCH cx_ai_system_fault .                      "#EC NO_HANDLER
*      ENDTRY.
*    ELSEIF lv_fieldcategory = 'R'.
** WS routing data
*      DATA: lr_ws_routing TYPE REF TO if_wsprotocol_routing,
*            ls_address TYPE sxi_address.
*
*      IF NOT lr_server_context IS BOUND.
*        TRY.
*            CALL METHOD cl_proxy_access=>get_server_context
*              RECEIVING
*                server_context = lr_server_context.
*          CATCH cx_ai_system_fault.
*            RAISE EXCEPTION TYPE /aif/cx_inf_det_base EXPORTING
*                textid = /aif/cx_inf_det_base=>servercontext_not_determined.
*        ENDTRY.
*      ENDIF.
*
*      TRY.
*          lr_ws_routing ?= lr_server_context->get_protocol( if_wsprotocol=>routing ).
*        CATCH cx_ai_system_fault .                      "#EC NO_HANDLER
*      ENDTRY.
*      ls_address = lr_ws_routing->get_sender( ).
*      FIELD-SYMBOLS: <lv_field> TYPE ANY.
*      ASSIGN COMPONENT lv_fieldname OF STRUCTURE ls_address TO <lv_field>.
*      <lv_value> = <lv_field>.
    ENDIF.

    UNASSIGN <lv_value>.
  ENDDO.

ENDMETHOD.


method CONSTRUCTOR.
  super->constructor( ).

  type = 002.
  cust_ns = ''.
  cust_type = ''.
endmethod.


METHOD get_typename.
  DATA lo_typedescr TYPE REF TO cl_abap_typedescr.

  lo_typedescr = cl_abap_typedescr=>describe_by_data( iv_input ).

  IF lo_typedescr IS BOUND.
    ev_name1 = lo_typedescr->get_relative_name( ).
  ENDIF.

ENDMETHOD.


METHOD read_data.
  DATA: lt_fname TYPE TABLE OF string.
  DATA  lo_typedescr TYPE REF TO cl_abap_typedescr.
  DATA: lv_field TYPE /aif/lfieldname,
        lv_fieldname TYPE /aif/lfieldname,
        lv_lines TYPE i,
        lv_tabix TYPE sy-tabix,
         lv_lines_tab TYPE i.

  FIELD-SYMBOLS: <fname> LIKE LINE OF lt_fname,
                 <lv_field> TYPE ANY,
                 <lv_table> TYPE STANDARD TABLE,
                 <lv_struc> TYPE ANY,
                 <lv_res_str> TYPE ANY.

  ASSIGN data TO <lv_struc>.
  ASSIGN result_struc TO <lv_res_str>.

  DATA: lr_aif_root_structure TYPE REF TO data.
  FIELD-SYMBOLS: <ls_root_data> TYPE ANY.
  DATA: lr_aif_result_structure TYPE REF TO data.
  FIELD-SYMBOLS: <ls_result_data> TYPE ANY.

* create root structure
  TRY.
      CREATE DATA lr_aif_root_structure LIKE data.
    CATCH cx_sy_create_data_error.
** Enter a valid type instead of &1
      RAISE EXCEPTION TYPE /aif/cx_inf_det_base
      EXPORTING
        textid     = /aif/cx_inf_det_base=>type_not_found
        typename  = <fname>.
  ENDTRY.

  ASSIGN lr_aif_root_structure->* TO <ls_root_data>.
  CHECK sy-subrc = 0.
  MOVE-CORRESPONDING data TO <ls_root_data>.

*  IF NOT rectype_input IS INITIAL.
*    CONCATENATE rectype_input is_inf_det_checks-fieldname INTO lv_fieldname SEPARATED BY '-'.
*  ENDIF.
  lv_fieldname = is_inf_det_checks-fieldname.

  SPLIT lv_fieldname AT '-' INTO TABLE lt_fname.
  DESCRIBE TABLE lt_fname LINES lv_lines.
  lv_lines = lv_lines - 1.

  LOOP AT lt_fname ASSIGNING <fname>.
    lv_lines_tab = lv_lines.
    lv_tabix = sy-tabix.


* set Reference <lv_field> of Fieldsymbol to specific component <fname> of structure <lv_struc>
    ASSIGN COMPONENT <fname> OF STRUCTURE <lv_struc> TO <lv_field>.
    IF sy-subrc <> 0.
      lv_field = <fname>.
      RAISE EXCEPTION TYPE /aif/cx_inf_det_base
        EXPORTING
          textid    = /aif/cx_inf_det_base=>invalid_field
          fieldname = lv_field.
    ENDIF.

* get typdescr for the specific component
    lo_typedescr = cl_abap_typedescr=>describe_by_data( <lv_field> ).

* selection of Typekinde T/S/E
    IF lo_typedescr->kind EQ 'T'.
* set reference of the table in the Fieldsymbol <lv_field> to the Fieldsymbole <lv_table>
      ASSIGN <lv_field> TO <lv_table>.
      IF sy-subrc <> 0.
        lv_field = <fname>.
        RAISE EXCEPTION TYPE /aif/cx_inf_det_base
          EXPORTING
            textid    = /aif/cx_inf_det_base=>invalid_field
            fieldname = lv_field.
      ENDIF.

* set reference of the structure <lv_struc> to the first column of the table
      READ TABLE <lv_table> ASSIGNING <lv_struc> INDEX 1. " for single selection
      IF sy-subrc <> 0.
        lv_field = <fname>.
        RAISE EXCEPTION TYPE /aif/cx_inf_det_base
          EXPORTING
            textid    = /aif/cx_inf_det_base=>invalid_field
            fieldname = lv_field.
      ENDIF.


    ELSEIF lo_typedescr->kind EQ 'S'.
* set reference of the structure <lv_struc> to the structure in the Fieldsymbole <lv_field>
      ASSIGN <lv_field> TO <lv_struc>.

    ELSEIF lo_typedescr->kind EQ 'E'.
* handover the value in the Fieldsymbol <lv_field>
      result_data = <lv_field>.

    ENDIF.

    IF lv_lines = lv_tabix.
* create result structure
      TRY.
          CREATE DATA lr_aif_result_structure LIKE <lv_struc>.

        CATCH cx_sy_create_data_error.
** Enter a valid type instead of &1
          RAISE EXCEPTION TYPE /aif/cx_inf_det_base
          EXPORTING
            textid     = /aif/cx_inf_det_base=>type_not_found
            typename  = <fname>.
      ENDTRY.

      ASSIGN lr_aif_result_structure->* TO <ls_result_data>.
      CHECK sy-subrc = 0.
      MOVE-CORRESPONDING <lv_struc> TO <ls_result_data>.

      result_struc = lr_aif_result_structure.

    ELSEIF lv_lines_tab = lv_tabix.
      fieldname = <fname>.

    ENDIF.
  ENDLOOP.
  root_struc = lr_aif_root_structure.

ENDMETHOD.
ENDCLASS.