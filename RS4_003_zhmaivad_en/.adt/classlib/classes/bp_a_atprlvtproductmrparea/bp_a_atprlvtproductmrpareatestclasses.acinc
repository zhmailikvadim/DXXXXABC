"! @testing BDEF:A_ATPRLVTPRODUCTMRPAREA
CLASS ltbp_a_atprlvtproductmrparea DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    DATA cut TYPE REF TO lhc_a_atprlvtproductmrparea.

    METHODS:
      setup,
      t_detmavailabilitytimeseries_e FOR TESTING RAISING cx_static_check,
      t_detmavailabilitytimeseries   FOR TESTING RAISING cx_static_check,
      determineavailabilityatdatetme FOR TESTING RAISING cx_static_check,
      determineavailabilityofqty     FOR TESTING RAISING cx_static_check,
      test_lock FOR TESTING RAISING cx_static_check,
      test_authorizations FOR TESTING RAISING cx_static_check,
      test_read FOR TESTING RAISING cx_static_check,
      test_read_empty_keys FOR TESTING RAISING cx_static_check,
      test_read_missing FOR TESTING RAISING cx_static_check.
ENDCLASS.



CLASS ltbp_a_atprlvtproductmrparea IMPLEMENTATION.
  METHOD t_detmavailabilitytimeseries.
    " Given
    DATA keys                TYPE if_atprlvtproductmrparea=>timeseries_keys.
    DATA act_result_action   TYPE if_atprlvtproductmrparea=>timeseries_result.
    DATA exp_result_action   TYPE if_atprlvtproductmrparea=>timeseries_result.
    DATA act_mapped_action   TYPE if_atprlvtproductmrparea=>mapped.
    DATA act_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA exp_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA act_reported_action TYPE if_atprlvtproductmrparea=>reported.
    DATA exp_reported_action TYPE if_atprlvtproductmrparea=>reported.

    keys                = VALUE #( ( %key = VALUE #( mrparea = '0001' product = 'RS_API_07' ) ) ).
    exp_result_action   = VALUE #( ( %key = VALUE #( mrparea = '0001' product = 'RS_API_07' ) ) ).
    exp_failed_action   = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = '0001' product = 'RS_API_07' ) ) ) ).
    exp_reported_action = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = '0001' product = 'RS_API_07' ) ) ) ).

    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'RESULT'   value = exp_result_action
      )->set_parameter( name = 'FAILED'   value = exp_failed_action
      )->set_parameter( name = 'REPORTED' value = exp_reported_action
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).
    td_atp_info_api_get_availy->if_atp_info_api_get_availy~get_time_series_by_mrparea(
      EXPORTING
        keys     = keys
      CHANGING
        result   = act_result_action
        failed   = act_failed_action
        reported = act_reported_action ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->detmavailabilitytimeseries( EXPORTING keys     = keys
                                     CHANGING  result   = act_result_action
                                               mapped   = act_mapped_action
                                               failed   = act_failed_action
                                               reported = act_reported_action ).
    " Then
    cl_abap_unit_assert=>assert_equals( act = act_result_action
                                        exp = exp_result_action ).
    cl_abap_unit_assert=>assert_equals( act = act_failed_action
                                        exp = exp_failed_action ).
    cl_abap_unit_assert=>assert_equals( act = act_reported_action
                                        exp = exp_reported_action ).

    cl_abap_unit_assert=>assert_initial( act_mapped_action ).
    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
  ENDMETHOD.


  METHOD t_detmavailabilitytimeseries_e.
    " _e = empty values

    " Given
    DATA act_result_action   TYPE TABLE FOR ACTION RESULT a_atprlvtproductmrparea\\productmrparea~detmavailabilitytimeseries.
    DATA act_mapped_action   TYPE if_atprlvtproductmrparea=>mapped.
    DATA act_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA act_reported_action TYPE if_atprlvtproductmrparea=>reported.

    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).
    td_atp_info_api_get_availy->if_atp_info_api_get_availy~get_time_series_by_mrparea(
      EXPORTING
        keys     = VALUE #( )
      CHANGING
        result   = act_result_action
        failed   = act_failed_action
        reported = act_reported_action ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->detmavailabilitytimeseries( EXPORTING keys     = VALUE #( )
                                     CHANGING  result   = act_result_action
                                               mapped   = act_mapped_action
                                               failed   = act_failed_action
                                               reported = act_reported_action ).
    " Then
    cl_abap_unit_assert=>assert_initial( act_result_action ).
    cl_abap_unit_assert=>assert_initial( act_mapped_action ).
    cl_abap_unit_assert=>assert_initial( act_failed_action ).
    cl_abap_unit_assert=>assert_initial( act_reported_action ).

    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
  ENDMETHOD.


  METHOD determineavailabilityatdatetme.
    " Given
    CONSTANTS product TYPE matnr VALUE 'RS_API_07'.
    CONSTANTS mrparea TYPE berid VALUE '0001'.

    DATA atdatetme_keys                TYPE if_atprlvtproductmrparea=>atdatetme_keys.
    DATA atdatetme_exp_result_action   TYPE if_atprlvtproductmrparea=>atdatetme_result.
    DATA atdatetme_exp_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA atdatetme_exp_reported_action TYPE if_atprlvtproductmrparea=>reported.
    DATA atdatetme_act_result_action   TYPE if_atprlvtproductmrparea=>atdatetme_result.
    DATA atdatetme_act_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA atdatetme_act_reported_action TYPE if_atprlvtproductmrparea=>reported.

    " Given
    atdatetme_keys = VALUE #( ( %key = VALUE #( mrparea = mrparea product = product ) ) ).

    atdatetme_exp_result_action   = VALUE #( ( %key = VALUE #( mrparea = mrparea product = product ) ) ).
    atdatetme_exp_failed_action   = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = mrparea product = product ) ) ) ).
    atdatetme_exp_reported_action = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = mrparea product = product ) ) ) ).

    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'RESULT'   value = atdatetme_exp_result_action
      )->set_parameter( name = 'FAILED'   value = atdatetme_exp_failed_action
      )->set_parameter( name = 'REPORTED' value = atdatetme_exp_reported_action
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).

    td_atp_info_api_get_availy->if_atp_info_api_get_availy~get_avail_at_datim_by_mrparea(
      EXPORTING
        keys     = atdatetme_keys
      CHANGING
        result   = atdatetme_exp_result_action
        failed   = atdatetme_exp_failed_action
        reported = atdatetme_exp_reported_action ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->determineavailabilityatdatetme( EXPORTING keys     = atdatetme_keys
                                         CHANGING  result   = atdatetme_act_result_action
                                                   failed   = atdatetme_act_failed_action
                                                   reported = atdatetme_act_reported_action ).
    " Then
    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
    cl_abap_unit_assert=>assert_equals( act = atdatetme_act_result_action
                                        exp = atdatetme_exp_result_action ).
    cl_abap_unit_assert=>assert_equals( act = atdatetme_act_failed_action
                                        exp = atdatetme_exp_failed_action ).
    cl_abap_unit_assert=>assert_equals( act = atdatetme_act_reported_action
                                        exp = atdatetme_exp_reported_action ).
  ENDMETHOD.

  METHOD determineavailabilityofqty.
    " Given
    CONSTANTS product TYPE matnr VALUE 'RS_API_07'.
    CONSTANTS mrparea TYPE berid VALUE '0001'.

    DATA ofqty_keys                TYPE if_atprlvtproductmrparea=>ofqty_keys.
    DATA ofqty_exp_result_action   TYPE if_atprlvtproductmrparea=>ofqty_result.
    DATA ofqty_exp_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA ofqty_exp_reported_action TYPE if_atprlvtproductmrparea=>reported.
    DATA ofqty_act_result_action   TYPE if_atprlvtproductmrparea=>ofqty_result.
    DATA ofqty_act_failed_action   TYPE if_atprlvtproductmrparea=>failed.
    DATA ofqty_act_reported_action TYPE if_atprlvtproductmrparea=>reported.

    " Given
    ofqty_keys = VALUE #( ( %key = VALUE #( mrparea = mrparea product = product ) ) ).

    ofqty_exp_result_action   = VALUE #( ( %key = VALUE #( mrparea = mrparea product = product ) ) ).
    ofqty_exp_failed_action   = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = mrparea product = product ) ) ) ).
    ofqty_exp_reported_action = VALUE #( productmrparea = VALUE #(
        ( %key = VALUE #( mrparea = mrparea product = product ) ) ) ).

    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'RESULT'   value = ofqty_exp_result_action
      )->set_parameter( name = 'FAILED'   value = ofqty_exp_failed_action
      )->set_parameter( name = 'REPORTED' value = ofqty_exp_reported_action
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).

    td_atp_info_api_get_availy->if_atp_info_api_get_availy~get_avail_of_qty_by_mrparea(
      EXPORTING
        keys     = ofqty_keys
      CHANGING
        result   = ofqty_exp_result_action
        failed   = ofqty_exp_failed_action
        reported = ofqty_exp_reported_action ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->determineavailabilityofqty( EXPORTING keys     = ofqty_keys
                                         CHANGING  result   = ofqty_act_result_action
                                                   failed   = ofqty_act_failed_action
                                                   reported = ofqty_act_reported_action ).
    " Then
    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
    cl_abap_unit_assert=>assert_equals( act = ofqty_act_result_action
                                        exp = ofqty_exp_result_action ).
    cl_abap_unit_assert=>assert_equals( act = ofqty_act_failed_action
                                        exp = ofqty_exp_failed_action ).
    cl_abap_unit_assert=>assert_equals( act = ofqty_act_reported_action
                                        exp = ofqty_exp_reported_action ).
  ENDMETHOD.


  METHOD test_read.
    " Given
    CONSTANTS product TYPE matnr VALUE 'RDSU01' ##NO_TEXT.
    CONSTANTS mrparea TYPE berid VALUE '0001' ##NO_TEXT.
    DATA result   TYPE if_atprlvtproductmrparea=>result_for_read.
    DATA failed   TYPE if_atprlvtproductmrparea=>failed_for_read.
    DATA reported TYPE if_atprlvtproductmrparea=>reported_for_read.

    DATA(keys) = VALUE if_atprlvtproductmrparea=>keys_for_read(
                           ( %key = VALUE #( mrparea = mrparea product = product ) ) ).
    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'PRODUCT'   value = product
      )->set_parameter( name = 'MRPAREA'    value = mrparea
      )->returning( VALUE a_atprlvtproductmrparea( product = product mrparea = mrparea )
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).
    td_atp_info_api_get_availy->if_atp_info_api_get_availy~read_a_atprlvtproductmrparea( product = product mrparea = mrparea ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->read( EXPORTING keys     = keys
               CHANGING  result   = result
                         failed   = failed
                         reported = reported ).

    " Then
    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
    cl_abap_unit_assert=>assert_initial( failed ).
    cl_abap_unit_assert=>assert_initial( reported ).
    cl_abap_unit_assert=>assert_not_initial( result ).
    cl_abap_unit_assert=>assert_equals( act = result[ 1 ]-product exp = product ).
    cl_abap_unit_assert=>assert_equals( act = result[ 1 ]-mrparea exp = mrparea ).
  ENDMETHOD.


  METHOD test_read_empty_keys.
    " Given
    CONSTANTS product TYPE matnr VALUE 'RDSU01' ##NO_TEXT.
    CONSTANTS mrparea TYPE berid VALUE '0001' ##NO_TEXT.
    DATA result   TYPE if_atprlvtproductmrparea=>result_for_read.
    DATA failed   TYPE if_atprlvtproductmrparea=>failed_for_read.
    DATA reported TYPE if_atprlvtproductmrparea=>reported_for_read.
    DATA keys     TYPE if_atprlvtproductmrparea=>keys_for_read.
    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'PRODUCT'   value = product
      )->set_parameter( name = 'MRPAREA'    value = mrparea
      )->returning( VALUE a_atprlvtproductmrparea( product = product mrparea = mrparea )
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).
    td_atp_info_api_get_availy->if_atp_info_api_get_availy~read_a_atprlvtproductmrparea( product = product mrparea = mrparea ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->read( EXPORTING keys     = keys
               CHANGING  result   = result
                         failed   = failed
                         reported = reported ).

    " Then
*    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
    cl_abap_unit_assert=>assert_initial( result ).
    cl_abap_unit_assert=>assert_not_initial( failed ).
    cl_abap_unit_assert=>assert_not_initial( reported ).
    cl_abap_unit_assert=>assert_equals( act = failed-productmrparea[ 1 ]-%fail-cause exp = if_abap_behv=>cause-unspecific ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_message~t100key-msgno exp = 117 ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_message~t100key-msgid exp = 'ATP_INFO_API' ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_dyn_msg~msgty exp = 'E' ).
  ENDMETHOD.


  METHOD test_read_missing.
    " Given
    CONSTANTS product TYPE matnr VALUE 'RDSU01' ##NO_TEXT.
    CONSTANTS mrparea TYPE berid VALUE '0001' ##NO_TEXT.
    DATA result   TYPE if_atprlvtproductmrparea=>result_for_read.
    DATA failed   TYPE if_atprlvtproductmrparea=>failed_for_read.
    DATA reported TYPE if_atprlvtproductmrparea=>reported_for_read.
    DATA(keys) = VALUE if_atprlvtproductmrparea=>keys_for_read(
                           ( %key = VALUE #( mrparea = mrparea product = product ) ) ).
    DATA(td_atp_info_api_get_availy) = CAST cl_atp_info_api_get_availy( cl_abap_testdouble=>create( 'CL_ATP_INFO_API_GET_AVAILY' ) ).

    cl_abap_testdouble=>configure_call( td_atp_info_api_get_availy
      )->set_parameter( name = 'PRODUCT'   value = product
      )->set_parameter( name = 'MRPAREA'    value = mrparea
      )->returning( VALUE a_atprlvtproductmrparea( )
      )->ignore_all_parameters(
      )->and_expect(
      )->is_called_once( ).
    td_atp_info_api_get_availy->if_atp_info_api_get_availy~read_a_atprlvtproductmrparea( product = product mrparea = mrparea ).

    cut->set_atp_info_api_get_availy( td_atp_info_api_get_availy ).

    " When
    cut->read( EXPORTING keys     = keys
               CHANGING  result   = result
                         failed   = failed
                         reported = reported ).

    " Then
    cl_abap_testdouble=>verify_expectations( td_atp_info_api_get_availy ).
    cl_abap_unit_assert=>assert_initial( result ).
    cl_abap_unit_assert=>assert_not_initial( failed ).
    cl_abap_unit_assert=>assert_not_initial( reported ).
    cl_abap_unit_assert=>assert_equals( act = failed-productmrparea[ 1 ]-%fail-cause exp = if_abap_behv=>cause-not_found ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_message~t100key-msgno exp = 116 ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_message~t100key-msgid exp = 'ATP_INFO_API' ).
    cl_abap_unit_assert=>assert_equals( act = reported-productmrparea[ 1 ]-%msg->if_t100_dyn_msg~msgty exp = 'E' ).
  ENDMETHOD.


  METHOD test_lock.
    cut->lock( keys = VALUE #( ) ).
  ENDMETHOD.


  METHOD test_authorizations.
    cut->get_global_authorizations( requested_authorizations = VALUE #( ) ).
  ENDMETHOD.


  METHOD setup.
    CREATE OBJECT cut FOR TESTING.
  ENDMETHOD.

ENDCLASS.

CLASS ltlsc_a_atprlvtproductmrparea DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.

  PRIVATE SECTION.
    METHODS:
      t_all_methods FOR TESTING RAISING cx_static_check.
ENDCLASS.


CLASS ltlsc_a_atprlvtproductmrparea IMPLEMENTATION.

  METHOD t_all_methods.
    DATA: cut      TYPE REF TO lsc_a_atprlvtproductmrparea,
          failed   TYPE RESPONSE FOR FAILED LATE a_atprlvtproductmrparea,
          reported TYPE RESPONSE FOR REPORTED LATE a_atprlvtproductmrparea.

    CREATE OBJECT cut FOR TESTING.

    cut->finalize( CHANGING failed   = failed
                            reported = reported ).

    cut->check_before_save( CHANGING failed   = failed
                                     reported = reported ).

    cut->save( CHANGING reported = reported ).

    cut->cleanup( ).

    cut->cleanup_finalize( ).

    cl_abap_unit_assert=>assert_true( act = abap_true ).
  ENDMETHOD.

ENDCLASS.