*"* use this source file for any macro definitions you need
*"* in the implementation part of the class

define GET_MAP.
  call 'BEHV_EXEC' id 'OP' field 7 id 'SRCDST' field &1.  "#EC CI_CCALL
  if sy-xform is initial and &4 = '!' ##BOOL_OK.
    raise shortdump type cx_abap_behv_runtime_error
      message e025 with &2 &3
      exporting entity    = &2
                operation = &3 .
  endif.
end-of-definition.

define TO_BASE.
  GET_MAP &2 &4 &5 &1.
  if sy-xform is not initial.
    perform (sy-xform) in program (sy-xprog) using &2 ' ' changing &3.
  else.
    &3 = &2.
"    move-corresponding &2 to &3.  " map form doesn't exist; try to make the best of it
  endif.
end-of-definition.

define TO_PROJ.
  GET_MAP &2 &4 &5 &1.
  if sy-xform is not initial.
    perform (sy-xform) in program (sy-xprog) using &3 ' ' changing &2.
  else.
    &2 = &3.
"    move-corresponding &3 to &2.  " map form doesn't exist (foreign entity); try to make the best of it
  endif.
end-of-definition.


define GET_RELA_FOR_TRG.
  unassign <rela>.
  loop at cl_abap_behv_load=>g_relations using key trg assigning <rela>
   where target_entity = &1
     and kind          = cl_abap_behv_load=>c_relation_base
     and original_root = &2.
     " take (first) PROJ entity in current PROJ BO that is based on BASE response entity
     " NB: there might be several; then we cannot differentiate
    exit.
  endloop.
end-of-definition.

define GET_RELA_FOR_SRC.
  unassign <rela>.
  loop at cl_abap_behv_load=>g_relations using key primary_key assigning <rela>
   where source_entity = &1
     and kind          = cl_abap_behv_load=>c_relation_base
     and original_root = m_proj_root.
     " take (first) PROJ entity in current PROJ BO that is based on BASE response entity
     " NB: there might be several; then we cannot differentiate
    exit.
  endloop.
end-of-definition.


define GET_ABSNAME.
  &1_absname = cl_abap_typedescr=>describe_by_data_ref( &2 )->absolute_name.
end-of-definition.

define GET_ABSNAME_WITH_OTHER_BDEF.
  GET_ABSNAME &2 &3.
  &1_absname = &2_absname.
  replace first occurrence of pcre `BDEF=[^\\]+\\` in &1_absname with |BDEF={ &4 }\\\\|.
end-of-definition.

define CREATE_WITH_OTHER_BDEF.
  GET_ABSNAME_WITH_OTHER_BDEF &1 &2 &5 &3.
  create data &4 type (&1_absname).
end-of-definition.

" create type by exchange of BDEF=... and ENTITY=... in absolute type name (preserve GROUP=...)
define CREATE_WITH_OTHER_ENTITY.
  GET_ABSNAME_WITH_OTHER_BDEF &1 &2 &6 &3.
  replace first occurrence of pcre `ENTITY=[^\\]+\\` in &1_absname with |ENTITY={ &4 }\\\\|.
  create data &5 type (&1_absname).
end-of-definition.

" create FULL type by modification of GROUP absolute type name (delete GROUP=...)
define CREATE_FULL_FOR_GROUP.
  &1_fullname = &1_absname.
  replace first occurrence of pcre `GROUP=[^\\]+\\`   in &1_fullname with ``.
  create data &1_full_ref type (&1_fullname).
end-of-definition.


define CLEAR_AUGM_MEMBERS.
  clear &1->m_augm_root.
  clear &1->m_augm_activities.
  clear &1->m_augm_failed.
  clear &1->m_augm_genrefs.
end-of-definition.

define SET_AUGM_MEMBERS.
  &1->m_augm_root       = &2->m_augm_root.
  &1->m_augm_activities = &2->m_augm_activities.
  &1->m_augm_failed     = &2->m_augm_failed.
  &1->m_augm_genrefs    = &2->m_augm_genrefs.
end-of-definition.

define IF_IS_AUGMENTING.
  if &1 ca 'MP'.
end-of-definition.

define CHK_AUGM_COMPLIANT.
  if &1 is not initial.
    call 'BEHV_EXEC' id 'OP' field 17 id 'ACTIVITIES' field &1
     id 'HANDLERS' field m_augm_handler_names ##NUMBER_OK.  "#EC CI_CCALL
  endif.
end-of-definition.