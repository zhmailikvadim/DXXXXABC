class CL_ABAP_BEHV_TRACER definition
  public
  final
  create public .

public section.

  types:
    begin of T_METHOD,
           pool_name  type classname,
           class_name type classname,
           id         type i,
           name       type string,
           line       type i,
         end of T_METHOD .
  types:
    begin of T_RESPONSE,
           failed   type ref to data,
           mapped   type ref to data,
           reported type ref to data,
         end of T_RESPONSE .

  class-data OBJECT_CTRL type IF_SXT_TYPES=>TY_OBJECT read-only .
  constants C_XTRACE_CORE type IF_SXT_TYPES=>TY_COMPONENT value 'SAP.BC.BEHV.CORE' ##NO_TEXT. " cf. CL_ABAP_BEHV_SXT_COMPONENTS
  constants:
    begin of C_XTRACE.
    constants ESSENTIAL type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-ESSENTIAL_INFORMATION.
    constants EXTENDED  type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-EXTENDED_INFORMATION.
    constants EXPERT    type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-EXPERT_INFORMATION.
    constants VERBOSE   type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-VERBOSE_INFORMATION.
    " default for component BEHV.CORE is EXPERT
    constants DEFAULT   type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-EXPERT_INFORMATION.
    " level for provider exits is ESSENTIAL (absurd, but requested)
    constants PROVIDER_EXIT type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-ESSENTIAL_INFORMATION.
    " level for EML
    constants EML       type IF_SXT_TYPES=>TY_TRACE_LEVEL value IF_SXT_CONSTANTS=>CO_TRACE_LEVEL-EXTENDED_INFORMATION.
  constants end of C_XTRACE .
  class-data XTRACE_LEVEL type IF_SXT_TYPES=>TY_TRACE_LEVEL .
  class-data TRACER type ref to CL_ABAP_BEHV_TRACER .
  constants C_COMP like C_XTRACE_CORE value C_XTRACE_CORE ##NO_TEXT.

  class-methods CLASS_CONSTRUCTOR .
  methods CONSTRUCTOR .
  methods GET_TRACE_LEVEL .
  methods TRACE
    importing
      !TRACE_LEVEL type IF_SXT_TYPES=>TY_TRACE_LEVEL default C_XTRACE-DEFAULT
      !OBJECT type IF_SXT_TYPES=>TY_OBJECT default OBJECT_CTRL
      !PROCEDURE type IF_SXT_TYPES=>TY_PROCEDURE optional
      !MESSAGE type CSEQUENCE optional
      !CONTENT type ANY optional
      !PROPERTIES type IF_SXT_TYPES=>TY_PROPERTY_TAB optional
      !OPTIONS type ref to CL_SXT_TRACE_OPTIONS optional .
  methods TRACE_BEG
    importing
      !TRACE_LEVEL type IF_SXT_TYPES=>TY_TRACE_LEVEL default C_XTRACE-DEFAULT
      !OBJECT type IF_SXT_TYPES=>TY_OBJECT default OBJECT_CTRL
      !PROCEDURE type IF_SXT_TYPES=>TY_PROCEDURE optional
      !MESSAGE type CSEQUENCE optional
      !CONTENT type ANY optional
      !HDLRPARAMS type CL_ABAP_BEHV_CTRL=>TT_HANDLER_PARAM optional
      !ACTIVITIES type ABP_BEHV_ACTIVITIES_TAB optional
      !PROPERTIES type IF_SXT_TYPES=>TY_PROPERTY_TAB optional
      !PROCESSED_OBJECTS type IF_SXT_TYPES=>TY_PROCESSED_OBJECTS optional
      value(HIGHLIGHT) type SYCHAR01 optional
    changing
      !METHOD type T_METHOD optional
    returning
      value(HIERARCHY_NUMBER) type IF_SXT_TYPES=>TY_HIERARCHY_NUMBER .
  methods TRACE_END
    importing
      !HIERARCHY_NUMBER type IF_SXT_TYPES=>TY_HIERARCHY_NUMBER
      !MESSAGE type IF_SXT_TYPES=>TY_MESSAGE optional
      !CONTENT type ANY optional
      value(METHOD) type T_METHOD optional
      !HDLRPARAMS type CL_ABAP_BEHV_CTRL=>TT_HANDLER_PARAM optional
      !ACTIVITIES type ABP_BEHV_ACTIVITIES_TAB optional
      !RESPONSE type T_RESPONSE optional
      !PROPERTIES type IF_SXT_TYPES=>TY_PROPERTY_TAB optional
      value(HIGHLIGHT) type SYCHAR01 optional .
  methods ADD_HEADER_PROPERTIES
    importing
      !PROPERTIES type IF_SXT_TYPES=>TY_PROPERTY_TAB
    returning
      value(DUMMY_RETURN_FOR_USE_IN_EXPR) type I .
  class-methods KINDSTRING
    importing
      !KIND type ABP_BEHV_KIND
    returning
      value(STR) type STRING .
  class-methods OPSTRING
    importing
      !OP type ABP_BEHV_OP
    returning
      value(STR) type STRING .
  class-methods METHOD_LOAD_INFO
    changing
      !TRC_METH type T_METHOD .
protected section.
private section.

  types:
    begin of T_LOAD_TABLE_CACHE,
           pool type c length 30,
           clas type standard table of rclas with empty key,
           vtab type standard table of rvtab with empty key,
           trig type standard table of rtrig with empty key,
           syda type standard table of rsymbdata with empty key,
           cont type standard table of rcont with empty key,
         end of T_LOAD_TABLE_CACHE .
  types:
    TT_LOAD_TABLE_CACHE type hashed table of T_LOAD_TABLE_CACHE with unique key pool .

  class-data OPTIONS_DEFAULT type ref to CL_SXT_TRACE_OPTIONS .
  class-data OPTIONS_HIGHLIGHT type ref to CL_SXT_TRACE_OPTIONS .
  class-data OPTIONS_WARNING type ref to CL_SXT_TRACE_OPTIONS .
  class-data LOAD_TABLE_CACHE type TT_LOAD_TABLE_CACHE .
  constants TEXT_001 type STRING value `ABAP Behavior Controller` ##NO_TEXT.
  data M_TRACER type ref to IF_SXT_TRACER .
ENDCLASS.



CLASS CL_ABAP_BEHV_TRACER IMPLEMENTATION.


  method add_header_properties.
    system-call debugger set system path on.  "#EC CI_SYSTEMCALL
    m_tracer->add_header_properties( component  = c_comp
                                     properties = properties ).
  endmethod.


  method CLASS_CONSTRUCTOR.
    tracer = new cl_abap_behv_tracer( ).
    tracer->get_trace_level( ).
  endmethod.


method CONSTRUCTOR.

constants skip_tracer_in_stack type i value 1.

system-call debugger set system path on.  "#EC CI_SYSTEMCALL
m_tracer = CL_SXT_TRACER_FACTORY=>get_instance( )->get_tracer( ).
object_ctrl = conv #( text_001 ).

options_default = new #( call_stack_nav_offset = skip_tracer_in_stack ).
options_highlight = new #( call_stack_nav_offset = skip_tracer_in_stack
                           highlight = if_sxt_types=>co_highlight-MODERATE ).
*options_warning = new #( call_stack_nav_offset = skip_tracer_in_stack
*                         highlight = if_sxt_types=>co_highlight-STRONG ).
* ... too strong
options_warning = options_highlight.

endmethod.


  method get_trace_level.
    system-call debugger set system path on.  "#EC CI_SYSTEMCALL
    assign xtrace_level to field-symbol(<level>).
    <level> = 0.
    if m_tracer->is_active( component = c_xtrace_core trace_level = c_xtrace-essential ).
      <level> = c_xtrace-essential.
      if m_tracer->is_active( component = c_xtrace_core trace_level = c_xtrace-extended ).
        <level> = c_xtrace-extended.
        if m_tracer->is_active( component = c_xtrace_core trace_level = c_xtrace-expert ).
          <level> = c_xtrace-expert.
          if m_tracer->is_active( component = c_xtrace_core trace_level = c_xtrace-verbose ).
            <level> = c_xtrace-verbose.
          endif.
        endif.
      endif.
    endif.
  endmethod.


method KINDSTRING.

case kind.
  when 'M'. str = `Modify` ##NO_TEXT.
  when 'R'. str = `Read` ##NO_TEXT.
  when 'L'. str = `Lock` ##NO_TEXT.
  when 'F'. str = `Instance Features` ##NO_TEXT.
  when 'G'. str = `Global Features` ##NO_TEXT.
  when 'a'. str = `Instance Authorization` ##NO_TEXT.
  when 'J'. str = `Global Authorization` ##NO_TEXT.
  when 'P'. str = `Precheck` ##NO_TEXT.
  when 'D'. str = `Determination` ##NO_TEXT.
  when 'V'. str = `Validation` ##NO_TEXT.
  when 'y'. str = `Determination On Modify` ##NO_TEXT.
  when 'd'. str = `Determination On Save` ##NO_TEXT.
  when 'v'. str = `Validation On Save` ##NO_TEXT.
  when 'N'. str = `Numbering` ##NO_TEXT.
  when others.
    str = kind.
endcase.

endmethod.


method METHOD_LOAD_INFO.

GET_METHOD_POS trc_meth.  " assigns <trig> etc.

if <trig> is assigned.
  trc_meth-name = <trig>-exto.
endif.

endmethod.


method OPSTRING.

case op.

  when cl_abap_behv_ctrl=>op-create      .  str = `Create` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-update      .  str = `Update` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-delete      .  str = `Delete` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-action      .  str = `Action` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-evaluate    .  str = `Function` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-read        .  str = `Read` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-read_ba     .  str = `Read by Assoc` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-create_ba   .  str = `Create by Assoc` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-lock        .  str = `Lock` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-determine   .  str = `Determine` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-validate    .  str = `Validate` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-lock_edit   .  str = `Lock for Edit` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-augm_create .  str = `Augment Create` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-augm_update .  str = `Augment Update` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-augm_crt_ba .  str = `Augment Create by Assoc` ##NO_TEXT.
  when cl_abap_behv_ctrl=>op-precheck    .  str = `Precheck` ##NO_TEXT.

  when cl_abap_behv_ctrl=>d010behv_op-pseudo-icontrol     .  str = `Instance Features` ##NO_TEXT.
  when cl_abap_behv_ctrl=>d010behv_op-pseudo-gcontrol     .  str = `Global Features` ##NO_TEXT.
  when cl_abap_behv_ctrl=>d010behv_op-pseudo-iauthority   .  str = `Instance Authorization` ##NO_TEXT.
  when cl_abap_behv_ctrl=>d010behv_op-pseudo-gauthority   .  str = `Global Authorization` ##NO_TEXT.
  when cl_abap_behv_ctrl=>d010behv_op-pseudo-action_ind   .  str = `Action` ##NO_TEXT.
  when cl_abap_behv_ctrl=>d010behv_op-pseudo-evaluate_ind .  str = `Function` ##NO_TEXT.

  when others .  str = op.  " ??

endcase.

endmethod.


  method trace.
    if xtrace_level < trace_level.
      return.
    endif.
    system-call debugger set system path on.  "#EC CI_SYSTEMCALL
    m_tracer->trace( component   = c_comp
                     trace_level = trace_level
                     object      = object
                     procedure   = procedure
                     message     = message
                     content     = content
                     properties  = properties
                     options     = options ).
  endmethod.


method trace_beg.

types: begin of t_trc_param,
         name type string,
         role type string,
         data type ref to data,
       end of t_trc_param,
       tt_trc_param type standard table of t_trc_param with empty key.

data params type tt_trc_param.
data content_tab type ABAP_TRANS_SRCBIND_TAB.

assert not ( content is supplied and hdlrparams is supplied ).
assert activities is supplied equiv hdlrparams is supplied.

if xtrace_level < trace_level.
  return.
endif.

system-call debugger set system path on.  "#EC CI_SYSTEMCALL

assign content to field-symbol(<content>).

GET_METHOD_POS method.  " sets method-ID/LINE; assigns <vtab>

if hdlrparams is not initial and activities is not initial.

  data(pidx) = cond i( when <vtab> is assigned then line_index( <tabs>-syda[ trigid = <vtab>-trigid ] ) ).

  loop at hdlrparams assigning field-symbol(<p>).
    assign activities[ <p>-actv_idx ] to field-symbol(<a>).  check sy-subrc = 0.
    insert value #(
     DATA = <a>-instances
     ROLE = |{ opstring( <a>-op ) }{ cond #( when <a>-sub_name is not initial then |({ <a>-sub_name })| ) }| &
            |, { <a>-entity_name }| ) into table params assigning field-symbol(<t>).

    if pidx > 0 and <p>-param_idx >= 0.
      assign <tabs>-syda[ pidx + <p>-param_idx ] to field-symbol(<syda>).
      if sy-subrc = 0 and <syda>-trigid = <vtab>-trigid.  " sanity check
        <t>-NAME = <syda>-name.
      endif.
    endif.

    " add LINKS (REQUEST) parameter where it is an input
    check <a>-links is bound.
    check_links_is_input_for_op <p>-op.
    if <a>-instances is bound.
      " separate parameter for INSTANCE auth/feat
      insert initial line into table params assigning <t>.
      " intrinsic: index of LINKS (REQUEST) parameter = index of RESULTS parameter + 1
      if pidx > 0 and <p>-param_idx >= 0.
        assign <tabs>-syda[ pidx + <p>-param_idx + 1 ] to <syda>.
        if sy-subrc = 0 and <syda>-trigid = <vtab>-trigid.  " sanity check
          <t>-NAME = <syda>-name.
        endif.
      endif.
    else.
      " no separate parameter for GLOBAL auth/feat; append request value to role
      <t>-ROLE = <t>-ROLE && `, `.
    endif.
    if  <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-gcontrol
     or <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-gauthority
     or <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-icontrol
     or <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-iauthority
     " request structure also exists for actions with selective result:
     or <a>-op = cl_abap_behv_ctrl=>op-action
     or <a>-op = cl_abap_behv_ctrl=>op-evaluate
     or <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-action_ind
     or <a>-op = cl_abap_behv_ctrl=>d010behv_op-pseudo-evaluate_ind .
      assign <a>-links->* to field-symbol(<flg>).
      " optimized content for flags-typed LINKS: only filled flags by JSON serialization
      data(wtr) = cl_sxml_string_writer=>create( if_sxml=>co_xt_json ).
      call transformation id options initial_components = 'SUPPRESS' value_handling = 'RAW'
       source r = <flg> result xml wtr.
      data(r) = cl_abap_codepage=>convert_from( wtr->get_output( ) ).
      r = substring_before( val = substring_after( val = r sub = `"R":{` ) sub = `}` occ = -2 ).
      replace all occurrences of `:"01"` in r with ``.  " redundant control flag values
      replace all occurrences of `"` in r with ``.      " redundant JSON quotes
      translate r using `{(})`.                         " non-JSON brackets
      <t>-ROLE &&= |Request { r }| ##NO_TEXT.
    else.
      <t>-DATA = <a>-LINKS.  " does this occur?
    endif.

  endloop.
endif.

if params is not initial.
  if method-name is not initial.
    insert value #( NAME = `METHOD` VALUE = ref #( method-name ) ) into table content_tab.
  endif.
  insert value #( NAME = `PARAMS` VALUE = ref #( params ) ) into table content_tab.
endif.
if content_tab is not initial or content is initial.
  assign content_tab to <content>.
endif.

data(po) = processed_objects.
if method is not initial.
  po = |CLASOLI:{ method-POOL_NAME }:{ method-CLASS_NAME }:{ method-NAME }|.
endif.
hierarchy_number = m_tracer->begin_hierarchy( component         = c_comp
                                              trace_level       = trace_level
                                              object            = object
                                              procedure         = procedure
                                              message           = message
                                              processed_objects = po
                                              content           = <content>
                                              properties        = properties
                                              options           = cond #( when highlight = 'W' then options_warning
                                                                          when highlight is initial then options_default
                                                                          else options_highlight )
).

endmethod.


method trace_end.

types: begin of t_trc_param,
         name type string,
         data type ref to data,
       end of t_trc_param,
       tt_trc_param type standard table of t_trc_param with empty key.

data params type tt_trc_param.
data content_tab type ABAP_TRANS_SRCBIND_TAB.

assert not ( content is supplied and hdlrparams is supplied ).
assert activities is supplied equiv hdlrparams is supplied.

data(msg) = message.
assign content to field-symbol(<content>).

GET_METHOD_POS method.  " sets method-NAME/LINE; assigns <vtab>
GET_METHOD_END method.  " sets method-LINE to last line of method

if response-failed is not initial or response-reported is not initial.
  highlight = 'W'.
endif.

if hdlrparams is not initial and activities is not initial.

  data(pidx) = cond i( when <vtab> is assigned then line_index( <tabs>-syda[ trigid = <vtab>-trigid ] ) ).

  loop at hdlrparams assigning field-symbol(<p>)
   where result_idx >= 0 and ( results is bound or links is bound ).

    assign activities[ <p>-actv_idx ] to field-symbol(<a>).  check sy-subrc = 0.
    assign <tabs>-syda[ pidx + <p>-result_idx ] to field-symbol(<syda>).
    check pidx > 0 and sy-subrc = 0 and <syda>-trigid = <vtab>-trigid.  " sanity check
    insert initial line into table params assigning field-symbol(<t>).
    if <p>-results is bound.
      <t>-NAME = <syda>-name.
      <t>-DATA = <p>-results.
    endif.

    " add LINKS parameter where it is a result
    check <p>-links is bound.
    check_links_is_result_for_op <p>-op.
    " intrinsic: index of LINKS parameter = index of RESULTS parameter + 1
    assign <tabs>-syda[ pidx + <p>-result_idx + 1 ] to <syda>.
    check sy-subrc = 0 and <syda>-trigid = <vtab>-trigid.  " sanity check
    if <p>-results is not bound.
      <t>-DATA = <p>-links.  " LINKS w/o RESULTS: re-purpose inserted line
    else.
      insert value #( DATA = <p>-links ) into table params assigning <t>.
    endif.
    <t>-NAME = <syda>-name.

  endloop.
endif.

if params is not initial.
  insert value #( NAME = `PARAMS` VALUE = ref #( params ) ) into table content_tab.
endif.
if response-mapped is not initial.
  insert value #( NAME = `MAPPED` VALUE = response-mapped ) into table content_tab.
endif.
if response-failed is not initial.
  insert value #( NAME = `FAILED` VALUE = response-failed ) into table content_tab.
endif.
if response-reported is not initial.
  insert value #( NAME = `REPORT` VALUE = response-reported ) into table content_tab.
endif.
if content_tab is not initial and method-name is not initial.
  insert value #( NAME = `METHOD` VALUE = ref #( method-name ) ) into content_tab index 1.
endif.
if content_tab is not initial or content is initial.
  assign content_tab to <content>.
endif.

system-call debugger set system path on.  "#EC CI_SYSTEMCALL

m_tracer->end_hierarchy( hierarchy_number = hierarchy_number
                         message          = msg
                         content          = <content>
                         properties       = properties
                         options           = cond #( when highlight = 'W' then options_warning
                                                     when highlight = ' ' then options_default
                                                     else options_highlight )
).

endmethod.
ENDCLASS.