"! <p class="shorttext synchronized">Runtime Type Services</p>
class CL_ABAP_TYPEDESCR definition
  public
  abstract
  create public

  global friends CL_ABAP_CLASSDESCR
                 CL_ABAP_DATA_TYPE_HANDLE
                 CL_ABAP_ELEMDESCR
                 CL_ABAP_ENUMDESCR
                 CL_ABAP_INTFDESCR
                 CL_ABAP_OBJECTDESCR
                 CL_ABAP_REFDESCR
                 CL_ABAP_STRUCTDESCR
                 CL_ABAP_TABLEDESCR .

public section.

  "! <p class="shorttext synchronized">Absolute type name</p>
  data ABSOLUTE_NAME type ABAP_ABSTYPENAME read-only .
  "! <p class="shorttext synchronized">Decimals with type P</p>
  data DECIMALS type I read-only .
  "! <p class="shorttext synchronized">Incorrect value</p>
  constants FALSE type ABAP_BOOL value ABAP_FALSE ##NO_TEXT.
  "! <p class="shorttext synchronized">Type category (see constants KIND_xxx)</p>
  data KIND type ABAP_TYPECATEGORY read-only .
  "! <p class="shorttext synchronized">Internal length</p>
  data LENGTH type I read-only .
  "! <p class="shorttext synchronized">Internal ABAP type</p>
  data TYPE_KIND type ABAP_TYPEKIND read-only .
  "! <p class="shorttext synchronized">Class</p>
  constants KIND_CLASS type ABAP_TYPECATEGORY value 'C' ##NO_TEXT.
  "! <p class="shorttext synchronized">Elementary Type</p>
  constants KIND_ELEM type ABAP_TYPECATEGORY value 'E' ##NO_TEXT.
  "! <p class="shorttext synchronized">Interface</p>
  constants KIND_INTF type ABAP_TYPECATEGORY value 'I' ##NO_TEXT.
  "! <p class="shorttext synchronized">Reference type</p>
  constants KIND_REF type ABAP_TYPECATEGORY value 'R' ##NO_TEXT.
  "! <p class="shorttext synchronized">Structured type</p>
  constants KIND_STRUCT type ABAP_TYPECATEGORY value 'S' ##NO_TEXT.
  "! <p class="shorttext synchronized">Table type</p>
  constants KIND_TABLE type ABAP_TYPECATEGORY value 'T' ##NO_TEXT.
  "! <p class="shorttext synchronized">Correct value</p>
  constants TRUE type ABAP_BOOL value ABAP_TRUE ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object or object)</p>
  constants TYPEKIND_ANY type ABAP_TYPEKIND value '~' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type C</p>
  constants TYPEKIND_CHAR type ABAP_TYPEKIND value 'C' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (class)</p>
  constants TYPEKIND_CLASS type ABAP_TYPEKIND value '*' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_CLIKE type ABAP_TYPEKIND value '&' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_CSEQUENCE type ABAP_TYPEKIND value '?' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_DATA type ABAP_TYPEKIND value '#' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type D</p>
  constants TYPEKIND_DATE type ABAP_TYPEKIND value 'D' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (generic decimal floating point type)</p>
  constants TYPEKIND_DECFLOAT type ABAP_TYPEKIND value '/' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type a (decimal floating point number, 16 places)</p>
  constants TYPEKIND_DECFLOAT16 type ABAP_TYPEKIND value 'a' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type e (decimal floating point number, 34 places)</p>
  constants TYPEKIND_DECFLOAT34 type ABAP_TYPEKIND value 'e' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type l (data object reference)</p>
  constants TYPEKIND_DREF type ABAP_TYPEKIND value 'l' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type F</p>
  constants TYPEKIND_FLOAT type ABAP_TYPEKIND value 'F' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type X</p>
  constants TYPEKIND_HEX type ABAP_TYPEKIND value 'X' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type I (4 byte integer)</p>
  constants TYPEKIND_INT type ABAP_TYPEKIND value 'I' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type b (1 byte integer)</p>
  constants TYPEKIND_INT1 type ABAP_TYPEKIND value 'b' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type 8 (8 byte integer)</p>
  constants TYPEKIND_INT8 type ABAP_TYPEKIND value '8' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type s (2 byte integer)</p>
  constants TYPEKIND_INT2 type ABAP_TYPEKIND value 's' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (interface)</p>
  constants TYPEKIND_INTF type ABAP_TYPEKIND value '+' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type m (instance reference)</p>
  constants TYPEKIND_IREF type ABAP_TYPEKIND value 'm' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type N</p>
  constants TYPEKIND_NUM type ABAP_TYPEKIND value 'N' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_NUMERIC type ABAP_TYPEKIND value '%' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type r (object reference)</p>
  constants TYPEKIND_OREF type ABAP_TYPEKIND value 'r' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type P</p>
  constants TYPEKIND_PACKED type ABAP_TYPEKIND value 'P' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_SIMPLE type ABAP_TYPEKIND value '$' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type g (character string)</p>
  constants TYPEKIND_STRING type ABAP_TYPEKIND value 'g' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type u (flat structure)</p>
  constants TYPEKIND_STRUCT1 type ABAP_TYPEKIND value 'u' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type v (deep structure)</p>
  constants TYPEKIND_STRUCT2 type ABAP_TYPEKIND value 'v' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type h (internal table)</p>
  constants TYPEKIND_TABLE type ABAP_TYPEKIND value 'h' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type T</p>
  constants TYPEKIND_TIME type ABAP_TYPEKIND value 'T' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type p (time stamp)</p>
  constants TYPEKIND_UTCLONG type ABAP_TYPEKIND value 'p' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type w (wide character)</p>
  constants TYPEKIND_W type ABAP_TYPEKIND value 'w' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type (data object)</p>
  constants TYPEKIND_XSEQUENCE type ABAP_TYPEKIND value '!' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type y (byte string)</p>
  constants TYPEKIND_XSTRING type ABAP_TYPEKIND value 'y' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type for boxed components/attributes</p>
  constants TYPEKIND_BREF type ABAP_TYPEKIND value 'j' ##NO_TEXT.
  "! <p class="shorttext synchronized">Internal type k (enumeration)</p>
  constants TYPEKIND_ENUM type ABAP_TYPEKIND value 'k' ##NO_TEXT.
  "! <p class="shorttext synchronized">Property DBMAXLEN</p>
  constants TYPEPROPKIND_DBMAXLEN type ABAP_TYPEPROPKIND value 'D' ##NO_TEXT.
  "! <p class="shorttext synchronized">Has client field structure</p>
  constants TYPEPROPKIND_HASCLIENT type ABAP_TYPEPROPKIND value 'C' ##NO_TEXT.
  "! <p class="shorttext synchronized">Value unknown</p>
  constants UNDEFINED type ABAP_BOOL value ABAP_UNDEFINED ##NO_TEXT.

  "! <p class="shorttext synchronized">Description of data object type</p>
  "!
  "! @parameter p_data      | <p class="shorttext synchronized">Field</p>
  "! @parameter p_descr_ref | <p class="shorttext synchronized">Reference to description object</p>
  class-methods DESCRIBE_BY_DATA
    importing
      !P_DATA type ANY
    returning
      value(P_DESCR_REF) type ref to CL_ABAP_TYPEDESCR .
  "! <p class="shorttext synchronized">Description of the type using relative/absolute name</p>
  "!
  "! @parameter p_name         | <p class="shorttext synchronized">Type name</p>
  "! @parameter p_descr_ref    | <p class="shorttext synchronized">Reference to description object</p>
  "! @exception type_not_found | <p class="shorttext synchronized">Type with name p_name could not be found</p>
  "! When describe_by_name is called by a method with language version ABAP for SAP Cloud Platform, it is checked whether
  "! type p_name is released or belongs to the same delivery unit as the caller. When the check fails, an exception
  "! cx_sy_rtti_type_not_released is raised.
  class-methods DESCRIBE_BY_NAME
    importing
      !P_NAME type ANY
    returning
      value(P_DESCR_REF) type ref to CL_ABAP_TYPEDESCR
    exceptions
      TYPE_NOT_FOUND .
  "! <p class="shorttext synchronized">Description of object type using reference</p>
  "!
  "! @parameter p_object_ref         | <p class="shorttext synchronized">Reference to described object</p>
  "! @parameter p_descr_ref          | <p class="shorttext synchronized">Reference to description object</p>
  "! @exception reference_is_initial | <p class="shorttext synchronized">Reference invalid</p>
  "! When describe_by_object_ref is called by a method with language version ABAP for SAP Cloud Platform, it is checked whether
  "! the object is released or belongs to the same delivery unit as the caller. When the check fails, an exception
  "! cx_sy_rtti_type_not_released is raised.
  class-methods DESCRIBE_BY_OBJECT_REF
    importing
      !P_OBJECT_REF type ref to OBJECT
    returning
      value(P_DESCR_REF) type ref to CL_ABAP_TYPEDESCR
    exceptions
      REFERENCE_IS_INITIAL .
  "! <p class="shorttext synchronized">Description of data object type using reference</p>
  "!
  "! @parameter p_data_ref           | <p class="shorttext synchronized">Reference to described data object</p>
  "! @parameter p_descr_ref          | <p class="shorttext synchronized">Reference to description object</p>
  "! @exception reference_is_initial | <p class="shorttext synchronized">Reference invalid</p>
  "! When describe_by_object_ref is called by a method with language version ABAP for SAP Cloud Platform, it is checked whether
  "! the referenced data type is released or belongs to the same delivery unit as the caller. When the check fails,
  "! an exception cx_sy_rtti_type_not_released is raised.
  class-methods DESCRIBE_BY_DATA_REF
    importing
      !P_DATA_REF type ref to DATA
    returning
      value(P_DESCR_REF) type ref to CL_ABAP_TYPEDESCR
    exceptions
      REFERENCE_IS_INITIAL .
  "! <p class="shorttext synchronized">Returns special information about specific types</p>
  "!
  "! @parameter p_property_kind | <p class="shorttext synchronized">Kind of the property</p>
  "! @parameter p_value         | <p class="shorttext synchronized">Reference to property value</p>
  methods GET_PROPERTY
    importing
      !P_PROPERTY_KIND type ABAP_TYPEPROPKIND
    returning
      value(P_VALUE) type ref to DATA .
  "! <p class="shorttext synchronized">Returns the relative name of a type</p>
  "!
  "! @parameter p_relative_name | <p class="shorttext synchronized">Relative type name</p>
  methods GET_RELATIVE_NAME
    returning
      value(P_RELATIVE_NAME) type STRING .
  "! <p class="shorttext synchronized">Returns ABAP_TRUE if it is a dictionary type</p>
  "!
  "! @parameter p_abap_bool | <p class="shorttext synchronized">Return code</p>
  methods IS_DDIC_TYPE
    returning
      value(P_ABAP_BOOL) type ABAP_BOOL .
  "! <p class="shorttext synchronized">Returns the nametab header of a dictionary type</p>
  "!
  "! @parameter p_header     | <p class="shorttext synchronized">DDIC header</p>
  "! @exception not_found    | <p class="shorttext synchronized">Type could not be found</p>
  "! @exception no_ddic_type | <p class="shorttext synchronized">Typ is not a dictionary type</p>
  "! Calling get_ddic_header by a method with language version ABAP for SAP Cloud Platform results in the
  "! runtime error call_method_not_permitted.
  methods GET_DDIC_HEADER
    returning
      value(P_HEADER) type X030L
    exceptions
      NOT_FOUND
      NO_DDIC_TYPE .
  "! <p class="shorttext synchronized">Returns the nametab object of a dictionary type</p>
  "!
  "! @parameter p_object     | <p class="shorttext synchronized">DDIC object</p>
  "! @exception not_found    | <p class="shorttext synchronized">Type could not be found</p>
  "! @exception no_ddic_type | <p class="shorttext synchronized">Typ is not a dictionary type</p>
  "! Calling get_ddic_object by a method with language version ABAP for SAP Cloud Platform results in the
  "! runtime error call_method_not_permitted.
  methods GET_DDIC_OBJECT
    returning
      value(P_OBJECT) type DD_X031L_TABLE
    exceptions
      NOT_FOUND
      NO_DDIC_TYPE .
  "! <p class="shorttext synchronized">Ascertains whether a type has a specific attribute</p>
  "!
  "! @parameter p_property_kind | <p class="shorttext synchronized">Kind of the property</p>
  "! @parameter p_abap_bool     | <p class="shorttext synchronized">Flag whether property for type is available</p>
  methods HAS_PROPERTY
    importing
      !P_PROPERTY_KIND type ABAP_TYPEPROPKIND
    returning
      value(P_ABAP_BOOL) type ABAP_BOOL .
  "! <p class="shorttext synchronized">-</p>
  class-methods CLASS_CONSTRUCTOR .
  "! <p class="shorttext synchronized">Can be created from the type (data) objects?</p>
  "!
  "! @parameter p_result | <p class="shorttext synchronized">Return code</p>
  methods IS_INSTANTIATABLE
  abstract
    returning
      value(P_RESULT) type ABAP_BOOL .
protected section.
*"* protected components of class CL_ABAP_TYPEDESCR
*"* do not include other source files here!!!

  types:
    "! <p class="shorttext synchronized">XTYPE_TYPE</p>
    BEGIN OF XTYPE_TYPE,
      I1 TYPE I,
      I2 TYPE I,
    END   OF XTYPE_TYPE .

  "! <p class="shorttext synchronized">Enumeration type (internal use only)</p>
  constants KIND_ENUM type ABAP_TYPECATEGORY value 'e' ##NO_TEXT.
private section.
*"* private components of class CL_ABAP_TYPEDESCR
*"* do not include other source files here!!!

  "! <p class="shorttext synchronized">-</p>
  data DD_X031L_TABLE_CACHE type ref to DD_X031L_TABLE .
  "! <p class="shorttext synchronized">-</p>
  data X030L_CACHE type X030L boxed .

  types:
    BEGIN OF TY_ADMIN_TAB_LINE,
      XTYPE   TYPE XTYPE_TYPE,
      KIND(1) TYPE C,
      REF   TYPE REF TO CL_ABAP_SOFT_REFERENCE,
    END OF TY_ADMIN_TAB_LINE .
  class-data:
    _ADMIN_TAB TYPE HASHED TABLE OF TY_ADMIN_TAB_LINE
                       WITH UNIQUE KEY XTYPE KIND .
  data _ME_XTYPE type XTYPE_TYPE .

  class-methods _GET_BY_XTYPE
    importing
      !P_XTYPE type XTYPE_TYPE
      !P_KIND like KIND
    returning
      value(P_RESULT) type ref to CL_ABAP_TYPEDESCR
    raising
      CX_SY_UNKNOWN_TYPE .
ENDCLASS.



CLASS CL_ABAP_TYPEDESCR IMPLEMENTATION.


METHOD CLASS_CONSTRUCTOR.
*  CALL METHOD CL_ABAP_ELEMDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_REFDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_STRUCTDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_TABLEDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_CLASSDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_INTFDESCR=>LOAD_CLASS.
*  CALL METHOD CL_ABAP_ENUMDESCR=>LOAD_ENUM.
ENDMETHOD.


method DESCRIBE_BY_DATA .
  data:
    CRC     type F.
  data admin_tab_line type ty_admin_tab_line.

* get administration information
  system-call describe administration
    mode 'F' of P_DATA into ADMIN_TAB_LINE-XTYPE
                             CRC
                             ADMIN_TAB_LINE-KIND.

  p_descr_ref ?= _get_by_xtype( p_xtype = ADMIN_TAB_LINE-XTYPE
                                p_kind  = ADMIN_TAB_LINE-KIND ).

endmethod.


method DESCRIBE_BY_DATA_REF .

  data CRC type F.
  data admin_tab_line type ty_admin_tab_line.

* get administration information
  system-call describe administration
    mode 'G' of P_DATA_REF into ADMIN_TAB_LINE-XTYPE
                                CRC
                                ADMIN_TAB_LINE-KIND.

  case ADMIN_TAB_LINE-KIND.
    when_nonoo.
      p_descr_ref ?= _get_by_xtype( p_xtype = ADMIN_TAB_LINE-XTYPE
                            p_kind  = ADMIN_TAB_LINE-KIND ).
    when others.
      raise REFERENCE_IS_INITIAL.
  endcase.

endmethod.


method describe_by_name .

  data crc type XTYPE_TYPE.
  data admin_tab_line type ty_admin_tab_line.

* check name for sequence of c
  system-call check p_name for sequence of c
    class 'CL_ABAP_TYPEDESCR' method 'DESCRIBE_BY_NAME' parameter 'P_NAME'.

* get administration information
  system-call describe administration
    mode 'N' of p_name into admin_tab_line-xtype crc admin_tab_line-kind.

  case admin_tab_line-kind.
    when_all.
      p_descr_ref = _get_by_xtype( p_xtype = admin_tab_line-xtype p_kind = admin_tab_line-kind ).
      return.
    when others.
*     all others are errors, try upper case
      data upper_name type string.
      upper_name = p_name.
      translate upper_name to upper case.
*     get administration information
      system-call describe administration
        mode 'N' of upper_name into admin_tab_line-xtype crc admin_tab_line-kind.
      case admin_tab_line-kind.
        when_all.
          p_descr_ref = _get_by_xtype( p_xtype = admin_tab_line-xtype p_kind = admin_tab_line-kind ).
          return.
        when others.
*         all others are erros
          raise type_not_found.
      endcase.
  endcase.

endmethod.


method DESCRIBE_BY_OBJECT_REF .

  data:
    CRC     type F.
  data admin_tab_line type ty_admin_tab_line.

* get administration information
  system-call describe administration
    mode 'R' of P_OBJECT_REF into ADMIN_TAB_LINE-XTYPE
                                  CRC
                                  ADMIN_TAB_LINE-KIND.
  case ADMIN_TAB_LINE-KIND.
    when KIND_CLASS.
      p_descr_ref ?= _get_by_xtype( p_xtype = ADMIN_TAB_LINE-XTYPE p_kind = ADMIN_TAB_LINE-KIND ).
      return.
    when others.
      raise REFERENCE_IS_INITIAL.
  endcase.

endmethod.


method GET_DDIC_HEADER .

  data:
    rel_name type DDOBJNAME.

  CL_ABAP_RELEASE_BLACKLIST=>CHECK_VERSION_ABAP_FOR_SAP_CP( ).

* check cache
  if x030L_cache is not initial.
    p_header = me->x030l_cache.
    return.
  endif.

* check for dictionary type
  rel_name = me->get_relative_name( ).
  if me->is_ddic_type( ) = ABAP_FALSE or rel_name is initial.
    raise no_ddic_type.
  endif.

* call dictionary interface
  CALL FUNCTION 'DDIF_NAMETAB_GET'
    EXPORTING
      TABNAME           = rel_name
      ALL_TYPES         = 'X'
*     LFIELDNAME        = ' '
*     GROUP_NAMES       = ' '
*     UCLEN             =
    IMPORTING
      X030L_WA          = p_header
*     DTELINFO_WA       =
*     TTYPINFO_WA       =
*     DDOBJTYPE         =
*     DFIES_WA          =
*     LINES_DESCR       =
*   TABLES
*     X031L_TAB         =
*     DFIES_TAB         =
    EXCEPTIONS
      NOT_FOUND         = 1
      OTHERS            = 2
            .
  IF SY-SUBRC <> 0.
    raise not_found.
  ENDIF.

* fill cache
  me->x030l_cache = p_header.

endmethod.


method GET_DDIC_OBJECT .

  data:
    REL_NAME type DDOBJNAME.

  CL_ABAP_RELEASE_BLACKLIST=>CHECK_VERSION_ABAP_FOR_SAP_CP( ).

* check cache
  if DD_X031L_TABLE_CACHE is bound.
    P_OBJECT = DD_X031L_TABLE_CACHE->*.
    return.
  endif.

* check for dictionary type
  REL_NAME = ME->GET_RELATIVE_NAME( ).
  if ME->IS_DDIC_TYPE( ) = ABAP_FALSE or REL_NAME is initial.
    raise NO_DDIC_TYPE.
  endif.

  call function 'DDIF_NAMETAB_GET'
    exporting
      TABNAME           = REL_NAME
      ALL_TYPES         = 'X'
*     LFIELDNAME        = ' '
*     GROUP_NAMES       = ' '
*     UCLEN             =
*   IMPORTING
*     X030L_WA          =
*     DTELINFO_WA       =
*     TTYPINFO_WA       =
*     DDOBJTYPE         =
*     DFIES_WA          =
*     LINES_DESCR       =
    tables
      X031L_TAB         = P_OBJECT
*     DFIES_TAB         =
    exceptions
      NOT_FOUND         = 1
      others            = 2
            .
  if SY-SUBRC <> 0.
    raise NOT_FOUND.
  endif.

* fill cache
  create data DD_X031L_TABLE_CACHE.
  DD_X031L_TABLE_CACHE->* = P_OBJECT.

endmethod.


method GET_PROPERTY.

  SYSTEM-CALL DESCRIBE PROPERTY me->_me_xtype me->kind
                                p_property_kind p_value.

endmethod.


method GET_RELATIVE_NAME .
  data:
    STR1 type STRING,
    STR2 type STRING.
  case ME->TYPE_KIND.
    when CL_ABAP_TYPEDESCR=>TYPEKIND_CLASS.
      split ME->ABSOLUTE_NAME at '\CLASS=' into STR1 STR2.
    when CL_ABAP_TYPEDESCR=>TYPEKIND_INTF.
      split ME->ABSOLUTE_NAME at '\INTERFACE=' into STR1 STR2.
    when others.
      split ME->ABSOLUTE_NAME at '\TYPE=' into STR1 STR2.
  endcase.
  if STR2 is initial.
    P_RELATIVE_NAME = STR1.
  else.
    P_RELATIVE_NAME = STR2.
  endif.
  if strlen( P_RELATIVE_NAME ) >= 2 and P_RELATIVE_NAME(2) = '%_'.
    clear P_RELATIVE_NAME.
  endif.
endmethod.


method HAS_PROPERTY .
  data:
    data_ref type ref to data,
    bool_ref type ref to abap_bool.

  SYSTEM-CALL DESCRIBE PROPERTY me->_me_xtype me->kind
                                p_property_kind data_ref.

  if data_ref is bound.
    try.
      bool_ref ?= data_ref.
    catch CX_SY_MOVE_CAST_ERROR.
      p_abap_bool = abap_true.
      return.
    endtry.
    p_abap_bool = bool_ref->*.
    return.
  endif.

  p_abap_bool = abap_false.

endmethod.


method IS_DDIC_TYPE .
  if absolute_name(6) = '\TYPE=' and me->get_relative_name( ) is not initial.
    p_abap_bool = ABAP_TRUE.
  else.
    p_abap_bool = ABAP_FALSE.
  endif.
endmethod.


METHOD _GET_BY_XTYPE.
  data admin_tab_line type ty_admin_tab_line.
  data tref type ref to cl_abap_typedescr.

  admin_tab_line-xtype = p_xtype.
  admin_tab_line-kind = p_kind.

* look at hash table whether descr object already exists
  read table _ADMIN_TAB from ADMIN_TAB_LINE into ADMIN_TAB_LINE.
  if SY-SUBRC = 0.
    P_RESULT ?= ADMIN_TAB_LINE-REF->GET( ).
    if P_RESULT is bound.
      return.
    endif.
    delete table _ADMIN_TAB from ADMIN_TAB_LINE.
  endif.

* create new descr object
  case ADMIN_TAB_LINE-KIND.
    when KIND_ELEM.
      tref = cl_abap_elemdescr=>create_elemdescr_obj( p_xtype ).
    when KIND_REF.
      tref = cl_abap_refdescr=>create_refdescr_obj( p_xtype ).
    when KIND_STRUCT.
      tref = cl_abap_structdescr=>create_structdescr_obj( p_xtype ).
    when KIND_TABLE.
      tref = cl_abap_tabledescr=>create_tabledescr_obj( p_xtype ).
    when KIND_ENUM.
      tref = cl_abap_enumdescr=>create_enumdescr_obj( p_xtype ).
    when KIND_CLASS.
      tref = cl_abap_classdescr=>create_classdescr_obj( p_xtype ).
    when KIND_INTF.
      tref = cl_abap_intfdescr=>create_intfdescr_obj( p_xtype ).
    when others.
      raise exception type CX_SY_UNKNOWN_TYPE.
  endcase.

  create object ADMIN_TAB_LINE-REF exporting OREF = TREF.
  insert ADMIN_TAB_LINE into table _ADMIN_TAB.
  P_RESULT = TREF.

ENDMETHOD.
ENDCLASS.