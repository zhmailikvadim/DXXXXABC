CLASS ltd_data_access DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_atp_data_access PARTIALLY IMPLEMENTED.
    DATA:
      mt_path_data              TYPE TABLE OF pactlg_path,
      read_vc_data_called_count TYPE i,
      vc_data_for_item          TYPE if_read_order_trans_buffer=>ttsk_vc_data,
      mt_abc_substitutions      TYPE  tbl_atpcs_s4.
ENDCLASS.

CLASS ltd_data_access IMPLEMENTATION.

  METHOD if_atp_data_access~get_fc_catalog_path.
    es_catalog_path = mt_path_data[ 1 ].
  ENDMETHOD.

  METHOD if_atp_data_access~get_fc_catalog_value_help_data.
    et_value = VALUE #( ( prodalloccharc = 'Value1' ) ).
    ev_count = 1.
  ENDMETHOD.

  METHOD if_atp_data_access~get_charac_values.
    LOOP AT ct_charac_values ASSIGNING FIELD-SYMBOL(<fs_charac_value>).
      IF <fs_charac_value>-field_name = 'PLANT'.
        READ TABLE mt_abc_substitutions WITH KEY atpcat = <fs_charac_value>-atpcat
                                                delnr = <fs_charac_value>-delnr
                                                delps = <fs_charac_value>-delps
                                                subitem = <fs_charac_value>-subitem
                                                ASSIGNING FIELD-SYMBOL(<fs_abc_substitution>).
        IF sy-subrc = 0.
          <fs_charac_value>-value = <fs_abc_substitution>-werks.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD if_atp_data_access~get_fc_catalog_path_and_base.
    CLEAR et_catalog_path.
    me->if_atp_data_access~get_fc_catalog_path(
      EXPORTING
        it_catalog_path_uuid = it_catalog_path_uuid
      IMPORTING
        es_catalog_path      = DATA(ls_catalog_path)
    ).
    APPEND ls_catalog_path TO et_catalog_path.
  ENDMETHOD.

  METHOD if_atp_data_access~read_vc_data.
    CLEAR et_vc_data.
    read_vc_data_called_count += 1.
    LOOP AT vc_data_for_item INTO DATA(ls_vc_data) USING KEY order_vc
      WHERE order_id   = is_vc_data_key-order_id
        AND item_id    = is_vc_data_key-item_id
        AND charcintid = is_vc_data_key-charcintid.
      INSERT ls_vc_data INTO TABLE et_vc_data.
    ENDLOOP.
  ENDMETHOD.


ENDCLASS.

CLASS ltd_charc_ctlg_utility DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_charc_ctlg_utility PARTIALLY IMPLEMENTED.
ENDCLASS.

CLASS ltd_charc_ctlg_utility IMPLEMENTATION.

  METHOD if_charc_ctlg_utility~convert_charc_value_out.
    rv_value = iv_value.
  ENDMETHOD.


ENDCLASS.


CLASS ltc_charc_val_utility DEFINITION DEFERRED.
CLASS cl_atp_charc_value_utility DEFINITION LOCAL FRIENDS ltc_charc_val_utility.
CLASS ltc_charc_val_utility DEFINITION FOR TESTING INHERITING FROM cl_aunit_assert
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PUBLIC SECTION.

    DATA:
       f_cut TYPE REF TO cl_atp_charc_value_utility.

    METHODS:

      get_charc_value_interactive   FOR TESTING,
      get_charc_value_interac_lifnr FOR TESTING,
      get_charc_value_interac_parnr FOR TESTING,
      get_charc_value_interac_pernr FOR TESTING,
      get_charc_val_interac_lifnr_n FOR TESTING,
      get_charc_val_interac_parnr_n FOR TESTING,
      get_charc_val_interac_pernr_n FOR TESTING,
      get_charc_value_interac_grp   FOR TESTING,
      get_charc_val_interac_num_grp FOR TESTING,
      get_charc_help_path           FOR TESTING,
      get_charc_help_data           FOR TESTING,
      get_charc_help_data_multi     FOR TESTING,

      select_on_external            FOR TESTING,
      convert_selopt_ext_to_int     FOR TESTING,
      has_multi_value_helps         FOR TESTING.

  PROTECTED SECTION.
  PRIVATE SECTION.
    CLASS-METHODS:
      class_teardown,
      class_setup.

    CLASS-DATA:
        environment TYPE REF TO if_osql_test_environment.

    METHODS:
      teardown.
ENDCLASS.

CLASS ltc_charc_val_utility IMPLEMENTATION.
  METHOD class_setup.
    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'pactlg_path' ) ( 'pactlg_grpval' ) ( 'pactlg_parval' ) ( 'atpsotcritcndn' ) ) ).
  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.

  METHOD teardown.
    cl_atp_buffer_manager=>reset_all_buffer( ).
  ENDMETHOD.

  METHOD  get_charc_value_interac_grp.
    DATA  ls_path_info       TYPE atp_fc_path_info.
    DATA  lt_vbak            TYPE TABLE OF vbak.
    DATA  ls_schedkey        TYPE atp_sched_key.
    DATA  lv_charc_value_act TYPE prodallocationcharacteristic.
    DATA: lt_ctlg_paths    TYPE STANDARD TABLE OF pactlg_path,
          lt_grp_val       TYPE STANDARD TABLE OF pactlg_grpval,
          lt_par_val       TYPE STANDARD TABLE OF pactlg_parval,
          l_parent_path_id TYPE atp_fc_path_info-path_id VALUE 'A1',
          l_group_path_id  TYPE atp_fc_path_info-path_id VALUE 'A2',
          l_so_path_id     TYPE atp_fc_path_info-path_id VALUE 'A0'.

    f_cut = NEW cl_atp_charc_value_utility( ).

    "set the data environment for the group test
*    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'pactlg_path' ) ( 'pactlg_grpval' ) ( 'pactlg_parval' ) ) ).

    "build the path information for group and singe characteristic
    lt_ctlg_paths = VALUE #( ( prodalloccharcctlgpathuuid = 'C1' prodalloccharcctlgpathintid = l_group_path_id
                               prodalloccharccatalogpath = 'DIVISIONGROUP'
                               prodalloccharcctlgparpathintid = l_parent_path_id
                               prodalloccharccatalogcharctype = '02'
                             )
                             ( prodalloccharcctlgpathuuid = 'C2' prodalloccharcctlgpathintid = l_parent_path_id
                               prodalloccharccatalogpath = 'ORGANIZATIONDIVISION' prodalloccharcctlglegacytable = 'VBAK'
                               prodalloccharcctlglegacypath = 'SPART'
                               prodalloccharcctlgparpathintid = l_so_path_id
                               prodalloccharccatalogcharctype = '01'
                               prodalloccharccatalogpathtype = '02'
                             ) ).
    lt_grp_val = VALUE #( ( prodalloccharcctlgpathuuid = 'C1' charcctlgvaluegroupvalueuuid = 'B1' charccatalogvaluegroupvalue = 'DIVALL' ) ).

    lt_par_val = VALUE #( ( charcctlgvaluegroupvalueuuid = 'B1' charccatalogparentpathvalue = '01' prodallocationactivationstatus = '02' ) ).

    ls_path_info = VALUE #( charc_type = '02'
                            path_id = l_group_path_id
                            path = 'DIVISIONGROUP'
                            cat_type = '01'
                            parent_path_id = l_parent_path_id
                            path_type = '02' ).

    lt_vbak = VALUE #( ( vbeln = '1' spart = '01' ) ).
    cl_atp_buffer_manager=>get_vbak_buffer( )->set( it_data = lt_vbak ).

    environment->clear_doubles( ).
    environment->insert_test_data( lt_ctlg_paths ).
    environment->insert_test_data( lt_grp_val ).
    environment->insert_test_data( lt_par_val ).

    ls_schedkey = VALUE #( atpcat = 'VC' delnr = '1' delps = '00010' ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = '' ).

    assert_equals( act = lv_charc_value_act exp = 'DIVALL' ).

  ENDMETHOD.

  METHOD get_charc_val_interac_num_grp.
    DATA  ls_path_info       TYPE atp_fc_path_info.
    DATA  lt_vbak            TYPE TABLE OF vbak.
    DATA  lt_vc_data         TYPE if_read_order_trans_buffer=>ttsk_vc_data.
    DATA  ls_schedkey        TYPE atp_sched_key.
    DATA  lv_charc_value_act TYPE prodallocationcharacteristic.
    DATA: lt_ctlg_paths    TYPE STANDARD TABLE OF pactlg_path,
          lt_grp_val       TYPE STANDARD TABLE OF pactlg_grpval,
          lt_sot_cond      TYPE STANDARD TABLE OF atpsotcritcndn,
          l_parent_path_id TYPE atp_fc_path_info-path_id VALUE 'A1',
          l_group_path_id  TYPE atp_fc_path_info-path_id VALUE 'A2',
          l_so_path_id     TYPE atp_fc_path_info-path_id VALUE 'A0'.

    f_cut = NEW cl_atp_charc_value_utility( ).

    "set the data environment for the group test
*    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'pactlg_path' ) ( 'pactlg_grpval' ) ( 'pactlg_parval' ) ( 'atpsotcritcndn' ) ) ).

    "build the path information for group and singe characteristic
    lt_ctlg_paths = VALUE #( ( prodalloccharcctlgpathuuid = 'C1' prodalloccharcctlgpathintid = l_group_path_id
                               prodalloccharccatalogpath = 'NUMERICGROUP'
                               prodalloccharcctlgparpathintid = l_parent_path_id
                               prodalloccharccatalogcharctype = '02'
                               clfncharacteristicusetype = 'VC'
                               characteristicvaluegrouptype = if_charcvaluegrouptype_c=>sc_continuous
                             )
                             ( prodalloccharcctlgpathuuid = 'C2' prodalloccharcctlgpathintid = l_parent_path_id
                               prodalloccharccatalogpath = 'VC_CHARC' prodalloccharcctlglegacytable = ''
                               prodalloccharcctlglegacypath = ''
                               prodalloccharcctlgparpathintid = l_so_path_id
                               prodalloccharccatalogcharctype = '01'
                               clfncharacteristicusetype = 'VC'
                               prodalloccharccatalogpathtype = '02'
                               charcinternalid = '11'
                             ) ).
    lt_grp_val = VALUE #( ( prodalloccharcctlgpathuuid = 'C1' charcctlgvaluegroupvalueuuid = 'B1' charccatalogvaluegroupvalue = '10_to_20' atpseloptntooldefuuid = '100' ) ).

    lt_sot_cond = VALUE #( (  atpseloptntoolcritrncndnuuid = '1'
                              atpseloptntooldefuuid = '100'
                              atpseloptntoolcndncomprnoptr = cl_atp_sot_comparison_operator=>c_comparison_operator-is_between
                              atpseloptntoolcndnrgfrvalue = 10
                              atpseloptntoolcndnrgtovalue = 20 ) ).

    ls_path_info = VALUE #( charc_type = '02'
                            path_id = l_group_path_id
                            path = 'NUMERICGROUP'
                            cat_type = '01'
                            parent_path_id = l_parent_path_id
                            path_type = '02'
                            characteristicvaluegrouptype = if_charcvaluegrouptype_c=>sc_continuous ).

    lt_vbak = VALUE #( ( vbeln = '1' spart = '01' ) ).
    cl_atp_buffer_manager=>get_vbak_buffer( )->set( it_data = lt_vbak ).

    environment->clear_doubles( ).
    environment->insert_test_data( lt_ctlg_paths ).
    environment->insert_test_data( lt_grp_val ).
    environment->insert_test_data( lt_sot_cond ).


    ls_schedkey = VALUE #( atpcat = 'VC' delnr = '1' delps = '00010' ).
    lt_vc_data = VALUE #( ( order_id = '1' item_id = '00010' charcintid = '11' charcvalue = '15') ).
    cl_atp_buffer_manager=>get_vc_buffer( )->set( it_data = lt_vc_data ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = '' ).

    assert_equals( act = lv_charc_value_act exp = '10_to_20' ).
  ENDMETHOD.

  METHOD get_charc_value_interactive.
* Test if characteristic value are given provided path.

    DATA ls_path_info TYPE atp_fc_path_info.
    DATA ls_schedkey  TYPE atp_sched_key.
    DATA lt_t001w TYPE TABLE OF t001w.
    DATA lt_tvko TYPE TABLE OF tvko.
    DATA lt_ekko TYPE TABLE OF ekko.
    DATA lt_ekpo TYPE TABLE OF ekpo.
    DATA lt_sto_cust_data TYPE if_read_order_trans_buffer=>tts_customer.
    DATA lt_vbak TYPE TABLE OF vbak.
    DATA lt_vbap TYPE TABLE OF vbap.
    DATA lt_vbkd TYPE TABLE OF vbkd.
    DATA lt_address TYPE TABLE OF adrc.
    DATA lt_partner TYPE TABLE OF vbpavb.
    DATA lv_charc_value_act TYPE prodallocationcharacteristic.
    DATA lv_charc_value_exp TYPE prodallocationcharacteristic.

* Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    "sales header (vbak)
    lt_vbak = VALUE #( ( vbeln = '1' vkorg = '0011' ) ).
    cl_atp_buffer_manager=>get_vbak_buffer( )->set( it_data = lt_vbak ).

    "sales item (vbap)
    lt_vbap = VALUE #( ( vbeln = '1' posnr = '2' werks = '0001' ) ).
    cl_atp_buffer_manager=>get_vbap_buffer( )->set( it_data = lt_vbap ).

*    "sto header (ekko)
    lt_ekko = VALUE #( ( ebeln = '1' ekgrp = '001' ) ).
    cl_atp_buffer_manager=>get_ekko_buffer( )->set( it_data = lt_ekko ).

*    "sto item (ekpo)
    lt_ekpo = VALUE #( ( ebeln = '1' ebelp = '2' kunnr = 'XYZ' ) ).
    cl_atp_buffer_manager=>get_ekpo_buffer( )->set( it_data = lt_ekpo ).

    "sto customer data
    lt_sto_cust_data = VALUE #( ( order_id = '1' item_id = '2' order_type = if_prodallocordertype_c=>sc_stock_transport country = 'ES' region = '129' ) ).
    cl_atp_buffer_manager=>get_sto_customer_buffer( )->set( it_data = lt_sto_cust_data ).

    "plant (t001w)
    lt_t001w = VALUE #( ( werks = '0001' name1 = 'Walldorf' adrnr = '8' ) ).
    cl_atp_buffer_manager=>get_t001w_buffer( )->set( it_data = lt_t001w ).

    "sales org (TVKO)
    lt_tvko = VALUE #( ( vkorg = '0011' ) ).
    cl_atp_buffer_manager=>get_salesorg_buffer( )->set( it_data = lt_tvko ).

    "business data (vbkd)
    lt_vbkd = VALUE #( ( vbeln = '1' bzirk = 'QWERZ' ) "on header level there is always(!) business data stored with initial posnr
                       ( vbeln = '1' posnr = '2' bzirk = 'QWERY' ) ).
    cl_atp_buffer_manager=>get_business_data_buffer( )->set( it_data = lt_vbkd ).

    "address number
    lt_address = VALUE #( ( addrnumber = '1' date_from = '20180101' country = 'DE' region = '123' )
                          ( addrnumber = '2' date_from = '20180101' country = 'DE' region = '987' )
                          ( addrnumber = '8' date_from = '20180101' country = 'EN' region = '125' ) ).
    cl_atp_buffer_manager=>get_address_buffer( )->set( it_data = lt_address ).

    "partner function
    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' land1 = 'DEx' kunnr = 'XYZ' adrnr = '1' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' land1 = 'DEy' kunnr = 'ABC' adrnr = '2' ) ).
    cl_atp_buffer_manager=>get_partner_buffer( )->set( it_data = lt_partner ).


* Call method under test


    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    " STO Document Header
    ls_path_info = VALUE #( db_table = 'EKKO'
                            order_field = 'EKGRP' ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = '' ).

    lv_charc_value_exp = '001'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).



    ls_schedkey = VALUE #( atpcat = 'VC' delnr = '1' delps = '2' ).

    " SO Document Header
    ls_path_info = VALUE #( db_table = 'VBAK'
                            order_field = 'VKORG' ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = '' ).

    lv_charc_value_exp = '0011'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    " Location information
    ls_path_info = VALUE #( db_table = 'T001W'
                                order_field = 'NAME1' ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = '0001' ).

    lv_charc_value_exp = 'Walldorf'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    " Sales Org information
    ls_path_info = VALUE #( db_table = 'TVKO'
                                order_field = 'VKORG' ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = '0011'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    " Partner function information
    ls_path_info = VALUE #( path = 'PATHDUMMY-CUSTOMER'
                            order_field = 'KUNNR'
                            sel_key = 'PARTNERFUNCTION'
                            sel_value = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = 'XYZ'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

    ls_path_info = VALUE #( path = 'PATHDUMMY-COUNTRY'
                            order_field = 'KUNNR'
                            sel_key = 'PARTNERFUNCTION'
                            sel_value = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = 'DEx'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

    ls_path_info = VALUE #( path = 'PATHDUMMY-REGION'
                            order_field = 'KUNNR'
                            sel_key = 'PARTNERFUNCTION'
                            sel_value = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = '123'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    " Business information
    ls_path_info = VALUE #( path = ''
                            db_table = 'VBKD'
                            order_field = 'BZIRK'
                            ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = 'QWERZ'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    " Production plant address information
    ls_path_info = VALUE #( path = if_prod_alloc_charc_catalog_c=>sc_path-gc_item_plant_addr && '-COUNTRY'
                            ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = 'EN'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

    ls_path_info = VALUE #( path = if_prod_alloc_charc_catalog_c=>sc_path-gc_item_plant_addr && '-REGION'
                            ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = '125'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).


    " STO Customer information
    ls_path_info = VALUE #( path = if_prod_alloc_charc_catalog_c=>sc_path-gc_sto_item_shp_adr && '-REGION'
                            ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = '129'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    ls_path_info = VALUE #( path = if_prod_alloc_charc_catalog_c=>sc_path-gc_sto_item_shp_adr && '-COUNTRY'
                            ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = 'ES'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


    ls_path_info = VALUE #( path = if_prod_alloc_charc_catalog_c=>sc_path-gc_sto_item_shp_sa ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).

    lv_charc_value_exp = ''. " no value found in buffer
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).


  ENDMETHOD.

  METHOD get_charc_help_path.

    DATA: lo_data_access TYPE REF TO ltd_data_access,
          ls_path_exp    TYPE pactlg_path.

    lo_data_access = NEW ltd_data_access( ).
    ls_path_exp-prodalloccharcctlgpathuuid = '1'.
    ls_path_exp-abapdataelement            = 'MATNR'.
    INSERT ls_path_exp INTO TABLE lo_data_access->mt_path_data.

    f_cut = NEW cl_atp_charc_value_utility( io_data_access = lo_data_access ).

    f_cut->get_charc_value_help_path(
      EXPORTING
        it_filter_select_options = VALUE #( ( property = 'ProdAllocCharcCtlgPathUUID'
                                              select_options = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) ) ) )
      IMPORTING
        es_catalog_path          = DATA(ls_catalog_path_act)
        et_id_selopt             = DATA(lt_id_selopt_act)
        et_desc_selopt           = DATA(lt_desc_selopt_act)
    ).

    cl_aunit_assert=>assert_equals( exp = ls_path_exp
                                    act = ls_catalog_path_act ).


    f_cut->get_charc_value_help_path(
      EXPORTING
        it_filter_select_options = VALUE #( ( property = 'ATPFldCtlgCharcValue'
                                              select_options = VALUE #( ( sign = 'I' option = 'EQ' low = '1' ) ) ) )
      IMPORTING
        es_catalog_path          = ls_catalog_path_act
        et_id_selopt             = lt_id_selopt_act
        et_desc_selopt           = lt_desc_selopt_act
    ).

    cl_aunit_assert=>assert_equals( exp = ls_path_exp
                                    act = ls_catalog_path_act ).

  ENDMETHOD.

  METHOD get_charc_help_data.
    "only checks if delegation works.
    DATA lo_data_access TYPE REF TO ltd_data_access.
    DATA lo_charc_ctlg_utility TYPE REF TO ltd_charc_ctlg_utility.
    DATA ls_catalog_path  TYPE pactlg_path.

    lo_data_access = NEW ltd_data_access( ).
    lo_charc_ctlg_utility = NEW ltd_charc_ctlg_utility( ).
    ls_catalog_path-prodalloccharcvaluehelp = 'I_ALLOCCHARCCTLGVALGRPVAL'.

    f_cut = NEW cl_atp_charc_value_utility( io_data_access = lo_data_access
                                            io_charc_ctlg_utility = lo_charc_ctlg_utility ).

    f_cut->get_charc_value_help_data(
      EXPORTING
        is_catalog_path = ls_catalog_path
        is_paging       = VALUE #( )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

    cl_aunit_assert=>assert_equals( exp = 'Value1' act = lt_value_act[ 1 ]-prodalloccharc ).
    cl_aunit_assert=>assert_equals( exp = 1 act = lv_count_act ).

  ENDMETHOD.

  METHOD get_charc_value_interac_lifnr.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpavb,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' lifnr = 'XYZ' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' lifnr = 'ABC' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-CUSTOMER'
                            order_field = 'LIFNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = 'XYZ'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.

  METHOD get_charc_value_interac_parnr.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpa,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' parnr = '0012345678' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' parnr = '8765432100' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-CUSTOMER'
                            order_field = 'PARNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = '0012345678'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.

  METHOD get_charc_value_interac_pernr.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpavb,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' pernr = '12345678' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' pernr = '87654321' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-CUSTOMER'
                            order_field = 'PERNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = '12345678'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.

  METHOD get_charc_val_interac_lifnr_n.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpavb,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' lifnr = 'XYZ' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' lifnr = 'ABC' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'VC' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-SUPPLIER' " new handling of partners
                            order_field = 'LIFNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = 'XYZ'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.

  METHOD get_charc_val_interac_parnr_n.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpa,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' parnr = '0012345678' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' parnr = '8765432100' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-CONTACTPERSON'
                            order_field = 'PARNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = '0012345678'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.

  METHOD get_charc_val_interac_pernr_n.

    DATA: ls_path_info       TYPE atp_fc_path_info,
          ls_schedkey        TYPE atp_sched_key,
          lt_partner         TYPE TABLE OF vbpavb,
          lv_charc_value_act TYPE prodallocationcharacteristic,
          lv_charc_value_exp TYPE prodallocationcharacteristic.

    "Set up test data
    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_partner = VALUE #( ( vbeln = '1' posnr = '2' parvw = 'AB' pernr = '12345678' )
                          ( vbeln = '1' posnr = '2' parvw = 'WE' pernr = '87654321' ) ).

    cl_atp_buffer_manager=>set_partner_data(
      EXPORTING
        it_partner_data = CORRESPONDING #( lt_partner )
    ).

    "Call method under test

    ls_schedkey = VALUE #( atpcat = 'U1' delnr = '1' delps = '2' ).

    ls_path_info = VALUE #( path        = 'PATHDUMMY-PERSONNEL'
                            order_field = 'PERNR'
                            sel_key     = 'PARTNERFUNCTION'
                            sel_value   = 'AB'  ).

    lv_charc_value_act =  f_cut->get_charc_value_for_path(
                              EXPORTING
                                is_path_info    = ls_path_info
                                is_schedkey     = ls_schedkey
                                iv_location     = ''
                          ).
    "Assert
    lv_charc_value_exp = '12345678'.
    cl_aunit_assert=>assert_equals( act = lv_charc_value_act exp = lv_charc_value_exp ).

  ENDMETHOD.


  METHOD select_on_external.

    DATA:
      ls_paging      TYPE /iwbep/s_mgw_paging,
      lt_id_selopt   TYPE /iwbep/t_cod_select_options,
      lt_desc_selopt TYPE /iwbep/t_cod_select_options,
      lv_selopt_and  TYPE boole_d,
      lt_value       TYPE tbl_atp_charc_value_value_help,
      lt_value_exp   TYPE tbl_atp_charc_value_value_help,   "Expeted data
      lv_count       TYPE i.

    f_cut = NEW cl_atp_charc_value_utility( ).


    CLEAR: ls_paging, lt_id_selopt, lt_desc_selopt, lt_value.

    lt_value = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456A'  prodalloccharcdesc = 'XYZ1' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    f_cut->select_on_external(
      EXPORTING
        is_paging      = ls_paging
        it_id_selopt   = lt_id_selopt
        it_desc_selopt = lt_desc_selopt
        iv_selopt_and  = lv_selopt_and
      CHANGING
        ct_value       = lt_value
        cv_count       = lv_count
    ).

    cl_aunit_assert=>assert_equals( act = lt_value exp = lt_value ).  "No select options => no changed values.

    CLEAR: ls_paging, lt_id_selopt, lt_desc_selopt, lt_value.

    lt_value = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456A'  prodalloccharcdesc = 'XYZ1' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    lt_id_selopt = VALUE #( sign = 'I'  option = 'CP'
      ( low = '123*' )
    ).

    lt_value_exp = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
    ).

    f_cut->select_on_external(
      EXPORTING
        is_paging      = ls_paging
        it_id_selopt   = lt_id_selopt
        it_desc_selopt = lt_desc_selopt
        iv_selopt_and  = lv_selopt_and
      CHANGING
        ct_value       = lt_value
        cv_count       = lv_count
    ).

    cl_aunit_assert=>assert_equals( act = lt_value exp = lt_value_exp ).  "Select with IDs

    CLEAR: ls_paging, lt_id_selopt, lt_desc_selopt, lt_value.

    lt_value = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456A'  prodalloccharcdesc = 'XYZ1' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    lt_desc_selopt = VALUE #( sign = 'I'  option = 'EQ'
      ( low = 'XYZ2' )
    ).

    lt_value_exp = VALUE #(
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    f_cut->select_on_external(
      EXPORTING
        is_paging      = ls_paging
        it_id_selopt   = lt_id_selopt
        it_desc_selopt = lt_desc_selopt
        iv_selopt_and  = abap_false
      CHANGING
        ct_value       = lt_value
        cv_count       = lv_count
    ).

    cl_aunit_assert=>assert_equals( act = lt_value exp = lt_value_exp ).  "Select with descriptions


    CLEAR: ls_paging, lt_id_selopt, lt_desc_selopt, lt_value.

    lt_value = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456A'  prodalloccharcdesc = 'XYZ1' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    lt_id_selopt = VALUE #( sign = 'I'  option = 'CP'
      ( low = '123*' )
    ).

    lt_desc_selopt = VALUE #( sign = 'I'  option = 'EQ'
      ( low = 'XYZ2' )
    ).

    lt_value_exp = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    f_cut->select_on_external(
      EXPORTING
        is_paging      = ls_paging
        it_id_selopt   = lt_id_selopt
        it_desc_selopt = lt_desc_selopt
        iv_selopt_and  = abap_false
      CHANGING
        ct_value       = lt_value
        cv_count       = lv_count
    ).

    cl_aunit_assert=>assert_equals( act = lt_value exp = lt_value_exp ).  "Select with IDs OR descriptions

    CLEAR: ls_paging, lt_id_selopt, lt_desc_selopt, lt_value.

    ls_paging-skip = 1.
    ls_paging-top  = 2.

    lt_value = VALUE #(
      ( prodalloccharc = '123A'  prodalloccharcdesc = 'UVW1' )
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456A'  prodalloccharcdesc = 'XYZ1' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    lt_id_selopt = VALUE #( sign = 'I'  option = 'CP'
      ( low = '123*' )
    ).

    lt_desc_selopt = VALUE #( sign = 'I'  option = 'EQ'
      ( low = 'XYZ2' )
    ).

    lt_value_exp = VALUE #(
      ( prodalloccharc = '123B'  prodalloccharcdesc = 'UVW2' )
      ( prodalloccharc = '456B'  prodalloccharcdesc = 'XYZ2' )
    ).

    f_cut->select_on_external(
      EXPORTING
        is_paging      = ls_paging
        it_id_selopt   = lt_id_selopt
        it_desc_selopt = lt_desc_selopt
        iv_selopt_and  = abap_false
      CHANGING
        ct_value       = lt_value
        cv_count       = lv_count
    ).

    cl_aunit_assert=>assert_equals( act = lt_value exp = lt_value_exp ).  "Select with skip and top

  ENDMETHOD.


  METHOD convert_selopt_ext_to_int.

    DATA:
      ls_catalog_path       TYPE pactlg_path,
      lt_id_selopt_ext      TYPE /iwbep/t_cod_select_options,
      lt_id_selopt_int      TYPE /iwbep/t_cod_select_options,
      lt_id_selopt_exp      TYPE /iwbep/t_cod_select_options,   "Expected values
      lv_select_on_external TYPE boole_d.

    f_cut = NEW cl_atp_charc_value_utility( ).

    CLEAR: ls_catalog_path, lt_id_selopt_ext, lt_id_selopt_int, lt_id_selopt_exp, lv_select_on_external.

    ls_catalog_path-charcvalueconversionroutine = ''.
    ls_catalog_path-abapdataelement             = 'LPRIO'.

    lt_id_selopt_ext = VALUE #( sign = 'I'  option = 'CP'
      ( low = '1*' )
      ( low = '2*' )
    ).

    "No conversion routine => internal data should be the same as external data.
    lt_id_selopt_exp = lt_id_selopt_ext.

    f_cut->convert_selopt_ext_to_int(
      EXPORTING
        is_catalog_path       = ls_catalog_path
        it_id_selopt          = lt_id_selopt_ext
      IMPORTING
        et_id_selopt          = lt_id_selopt_int
        ev_select_on_external = lv_select_on_external
    ).

    cl_aunit_assert=>assert_equals( act = lt_id_selopt_int exp = lt_id_selopt_exp ).
    cl_aunit_assert=>assert_equals( act = lv_select_on_external exp = abap_false ).


    CLEAR: ls_catalog_path, lt_id_selopt_ext, lt_id_selopt_int, lt_id_selopt_exp, lv_select_on_external.

    ls_catalog_path-charcvalueconversionroutine = 'AUART'.
    ls_catalog_path-abapdataelement             = 'AUART'.

    lt_id_selopt_ext = VALUE #( sign = 'I'  option = 'CP'
      ( low = 'O*' )
      ( low = 'T*' )
    ).

    "'Special' conversion routine. Select options can't be converted into internal format and must be initial.
    CLEAR lt_id_selopt_exp.

    f_cut->convert_selopt_ext_to_int(
      EXPORTING
        is_catalog_path       = ls_catalog_path
        it_id_selopt          = lt_id_selopt_ext
      IMPORTING
        et_id_selopt          = lt_id_selopt_int
        ev_select_on_external = lv_select_on_external
    ).

    cl_aunit_assert=>assert_equals( act = lt_id_selopt_int exp = lt_id_selopt_exp ).
    cl_aunit_assert=>assert_equals( act = lv_select_on_external exp = abap_true ).


    CLEAR: ls_catalog_path, lt_id_selopt_ext, lt_id_selopt_int, lt_id_selopt_exp, lv_select_on_external.

    ls_catalog_path-charcvalueconversionroutine = 'ALPHA'.
    ls_catalog_path-abapdataelement             = 'KUNNR'.

    lt_id_selopt_ext = VALUE #( sign = 'I'  option = 'CP'
      ( low = 'A*' )
      ( low = '123456*' )
    ).

    "Conversion routine 'ALPHA' add leading zeros to numbers.
    lt_id_selopt_exp = VALUE #( sign = 'I'  option = 'CP'
      ( low = 'A*' )
      ( low = '123456*' )
      ( low = '0123456*' )
      ( low = '00123456*' )
      ( low = '000123456*' )
      ( low = '0000123456*' )
    ).

    f_cut->convert_selopt_ext_to_int(
      EXPORTING
        is_catalog_path       = ls_catalog_path
        it_id_selopt          = lt_id_selopt_ext
      IMPORTING
        et_id_selopt          = lt_id_selopt_int
        ev_select_on_external = lv_select_on_external
    ).

    cl_aunit_assert=>assert_equals( act = lt_id_selopt_int exp = lt_id_selopt_exp ).
    cl_aunit_assert=>assert_equals( act = lv_select_on_external exp = abap_false ).

  ENDMETHOD.


  METHOD has_multi_value_helps.

    DATA:
      lt_catalog_path TYPE pactlg_path_tab,
      lv_multi        TYPE boole_d.

    f_cut = NEW cl_atp_charc_value_utility( ).

    lt_catalog_path = VALUE #(
      ( prodalloccharcctlgpathuuid = '1'  prodalloccharcctlgpathintid = '1'  prodalloccharcvaluehelp = 'I_SUPPLIER' )
      ( prodalloccharcctlgpathuuid = '2'  prodalloccharcctlgpathintid = '2'  prodalloccharcvaluehelp = 'I_CUSTOMER' )
      ( prodalloccharcctlgpathuuid = '3'  prodalloccharcctlgpathintid = '3'  prodalloccharcvaluehelp = '' )
    ).

    lv_multi = f_cut->has_multi_value_helps( it_catalog_path = lt_catalog_path ).
    cl_aunit_assert=>assert_equals( act = lv_multi exp = abap_true ).


    lt_catalog_path = VALUE #(
      ( prodalloccharcctlgpathuuid = '1'  prodalloccharcctlgpathintid = '1'  prodalloccharcvaluehelp = 'I_MATERIALSTDVH' )
      ( prodalloccharcctlgpathuuid = '2'  prodalloccharcctlgpathintid = '2'  prodalloccharcvaluehelp = 'I_MATERIALSTDVH' )
      ( prodalloccharcctlgpathuuid = '3'  prodalloccharcctlgpathintid = '3'  prodalloccharcvaluehelp = '' )
    ).

    lv_multi = f_cut->has_multi_value_helps( it_catalog_path = lt_catalog_path ).
    cl_aunit_assert=>assert_equals( act = lv_multi exp = abap_false ).

    lt_catalog_path = VALUE #(
      ( prodalloccharcctlgpathuuid = '1'  prodalloccharcctlgpathintid = '1'  prodalloccharcvaluehelp = cl_atp_charc_value_utility=>gc_valgrp )
      ( prodalloccharcctlgpathuuid = '2'  prodalloccharcctlgpathintid = '2'  prodalloccharcvaluehelp = cl_atp_charc_value_utility=>gc_valgrp )
      ( prodalloccharcctlgpathuuid = '3'  prodalloccharcctlgpathintid = '3'  prodalloccharcvaluehelp = '' )
    ).

    lv_multi = f_cut->has_multi_value_helps( it_catalog_path = lt_catalog_path ).
    cl_aunit_assert=>assert_equals( act = lv_multi exp = abap_true ).

  ENDMETHOD.


  METHOD get_charc_help_data_multi.

    DATA:
      lo_data_access        TYPE REF TO ltd_data_access,
      lo_charc_ctlg_utility TYPE REF TO ltd_charc_ctlg_utility,
      ls_catalog_path       TYPE pactlg_path,
      lt_catalog_path       TYPE pactlg_path_tab,
      ls_paging             TYPE /iwbep/s_mgw_paging,
      lt_id_selopt          TYPE /iwbep/t_cod_select_options,
      lt_desc_selopt        TYPE /iwbep/t_cod_select_options,
      lv_has_count          TYPE boole_d,
      lv_selopt_and         TYPE boole_d,
      lt_value              TYPE tbl_atp_charc_value_value_help,
      lv_count              TYPE i.

    lo_data_access = NEW ltd_data_access( ).
    lo_charc_ctlg_utility = NEW ltd_charc_ctlg_utility( ).
    ls_catalog_path-prodalloccharcvaluehelp = 'I_ALLOCCHARCCTLGVALGRPVAL'.

    f_cut = NEW cl_atp_charc_value_utility( io_data_access = lo_data_access
                                            io_charc_ctlg_utility = lo_charc_ctlg_utility ).


    f_cut->get_charc_value_help_data_mult(
      EXPORTING
        it_catalog_path = lt_catalog_path
        is_paging       = ls_paging
        it_id_selopt    = lt_id_selopt
        it_desc_selopt  = lt_desc_selopt
        iv_has_count    = lv_has_count
        iv_selopt_and   = lv_selopt_and
      IMPORTING
        et_value        = lt_value
        ev_count        = lv_count
    ).

    cl_aunit_assert=>assert_initial( act = lt_value ).
    cl_aunit_assert=>assert_initial( act = lv_count ).

    lt_catalog_path = VALUE #(
      ( prodalloccharcctlgpathuuid = '1'  prodalloccharcctlgpathintid = '1'  prodalloccharcvaluehelp = cl_atp_charc_value_utility=>gc_valgrp )
      ( prodalloccharcctlgpathuuid = '2'  prodalloccharcctlgpathintid = '2'  prodalloccharcvaluehelp = cl_atp_charc_value_utility=>gc_valgrp )
      ( prodalloccharcctlgpathuuid = '3'  prodalloccharcctlgpathintid = '3'  prodalloccharcvaluehelp = '' )
    ).

    ls_paging-top = 10.

    f_cut->get_charc_value_help_data_mult(
      EXPORTING
        it_catalog_path = lt_catalog_path
        is_paging       = ls_paging
        it_id_selopt    = lt_id_selopt
        it_desc_selopt  = lt_desc_selopt
        iv_has_count    = lv_has_count
        iv_selopt_and   = lv_selopt_and
      IMPORTING
        et_value        = lt_value
        ev_count        = lv_count
    ).

    cl_aunit_assert=>assert_not_initial( act = lt_value ).
    cl_aunit_assert=>assert_not_initial( act = lv_count ).

  ENDMETHOD.

ENDCLASS.



CLASS ltc_charc_val_utility2 DEFINITION DEFERRED.
CLASS cl_atp_charc_value_utility DEFINITION LOCAL FRIENDS ltc_charc_val_utility2.
CLASS ltc_charc_val_utility2 DEFINITION FOR TESTING DURATION SHORT RISK LEVEL HARMLESS INHERITING FROM cl_aunit_assert.
  PRIVATE SECTION.
    DATA: class_under_test          TYPE REF TO cl_atp_charc_value_utility,
          data_access_mock          TYPE REF TO ltd_data_access,
          path_info                 TYPE atp_fc_path_info,
          schedkey                  TYPE atp_sched_key,
          method_success            TYPE boole_d,
          charc_value               TYPE prodallocationcharacteristic,
          plant                     TYPE werks_ext,
          mt_value_grp_values       TYPE STANDARD TABLE OF pactlg_grpval,
          mt_value_grp_par_values   TYPE STANDARD TABLE OF pactlg_parval,
          vc_data_db                TYPE STANDARD TABLE OF i_varconfignprodinstancevalue,
          path_data_db              TYPE STANDARD TABLE OF pactlg_path,
          item_data_db              TYPE STANDARD TABLE OF i_salesdocumentitem,
          root_data_db              TYPE STANDARD TABLE OF i_salesdocument,
          sto_item_shipping_data_db TYPE STANDARD TABLE OF i_stocktransportordershipping,
          plant_data_db             TYPE STANDARD TABLE OF t001w,
          address_data_db           TYPE STANDARD TABLE OF adrc,
          sot_data_db               TYPE STANDARD TABLE OF i_atpseloptntoolcritrncndn,
          doc_partner_data_tab      TYPE STANDARD TABLE OF p_prodallocsalesorderpartner,
          mt_bop_keys               TYPE tbl_atp_sched_key,
          mv_context                TYPE prodalloccharccatalogusetype,
          mt_path_infos             TYPE tbl_atp_fc_path_info,
          mt_orders_with_values     TYPE cl_atp_charc_value_utility=>tt_order_cvc,
          mt_pal_data               TYPE if_read_pal_data=>tt_pal,
          mt_scheduleline           TYPE tbl_atp_req_char_value_deter.


    CONSTANTS:
      a_requirement_document         TYPE atp_sched_key-delnr VALUE 'ORDER1',
      another_requirement_document   TYPE atp_sched_key-delnr VALUE 'ORDER2',
      a_requirement_order_item       TYPE atp_sched_key-delps VALUE '000010',
      another_requirement_order_item TYPE atp_sched_key-delps VALUE '000020',
      atp_cat_vc                     TYPE atp_sched_key-atpcat VALUE 'VC',
      atp_cat_u1                     TYPE atp_sched_key-atpcat VALUE 'U1',
      a_cuobj_id                     TYPE i_salesdocumentitem-productconfiguration VALUE '1',
      another_cuobj_id               TYPE i_salesdocumentitem-productconfiguration VALUE '2',
      a_plant                        TYPE  werks_ext VALUE '0001',
      another_plant                  TYPE  werks_ext VALUE '0002',
      customer_a                     TYPE  i_stocktransportordershipping-shiptoparty VALUE 'CUST_A',
      customer_b                     TYPE  i_stocktransportordershipping-shiptoparty VALUE 'CUST_B',
      an_adr_nr                      TYPE t001w-adrnr VALUE '1',
      germany                        TYPE adrc-country VALUE 'DE',
      bw                             TYPE adrc-region VALUE 'BW',
      france                         TYPE adrc-country VALUE 'F',
      another_adr_nr                 TYPE t001w-adrnr VALUE '2',
      a_path_int_id                  TYPE atp_fc_path_info-path_id VALUE 'A1',
      a_path_uuid                    TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B1',
      another_path_uuid              TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B2',
      a_value_grp_path_uuid          TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B5',
      stocktransport_ship_node_uuid  TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B7',
      item_plant_path_uuid           TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B4',
      item_path_uuid                 TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B6',
      root_path_uuid                 TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B8',
      vc_folder_path_uuid            TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'B3',
      default_value_uuid             TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'C1',
      a_grp_value_uuid               TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'C2',
      another_grp_value_uuid         TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'C3',
      value_grp_par_value_uuid       TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'D1',
      a_ph_uuid                      TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'D2',
      another_val_grp_val_uuid       TYPE pactlg_path-prodalloccharcctlgpathuuid VALUE 'D3',
      default_grp_value              TYPE pactlg_grpval-charccatalogvaluegroupvalue VALUE 'fallback',
      a_grp_value                    TYPE pactlg_grpval-charccatalogvaluegroupvalue VALUE 'AAA',
      a_abc_grp_value                TYPE pactlg_grpval-charccatalogvaluegroupvalue VALUE 'Alternative1',
      another_abc_grp_value          TYPE pactlg_grpval-charccatalogvaluegroupvalue VALUE 'Alternative2',
      another_path_int_id            TYPE atp_fc_path_info-path_id VALUE 'A2',
      vc_folder_path_int_id          TYPE atp_fc_path_info-path_id VALUE 'A3',
      plant_country_path             TYPE atp_fc_path_info-path_id VALUE 'A4',
      sto_shp_to_party_path          TYPE atp_fc_path_info-path_id VALUE 'A8',
      sto_ship_path                  TYPE atp_fc_path_info-path_id VALUE 'A9',
      item_plant_path                TYPE atp_fc_path_info-path_id VALUE 'A5',
      item_path                      TYPE atp_fc_path_info-path_id VALUE 'A6',
      root_path                      TYPE atp_fc_path_info-path_id VALUE 'A7',
      hier_path_id                   TYPE atp_fc_path_info-path_id VALUE '12',
      a_ph_val_grp_path_id           TYPE atp_fc_path_info-path_id VALUE 'E1',
      vc_folder_path                 TYPE pactlg_path-prodalloccharccatalogpath VALUE if_atp_ctlg_path=>vc_path,
      a_value_grp_path               TYPE pactlg_path-prodalloccharccatalogpath VALUE 'PLANT_COUNTRY',
      hier_path                      TYPE pactlg_path-prodalloccharccatalogpath VALUE '\_ITEM\_PRODUCTHIERARCHYSALES-CHARCCTLGSLSPRODHIERNODEID',
      hier_path_ph                   TYPE pactlg_path-prodalloccharccatalogpath VALUE '\_ITEM\_PRODUCTHIERARCHYSALES-CHARCCTLGSLSPRODHIERID',
      a_vc_char_int_id               TYPE atp_fc_path_info-charcinternalid VALUE '1234',
      a_hier_char_int_id             TYPE atp_fc_path_info-charcinternalid VALUE '1237',
      another_vc_char_int_id         TYPE atp_fc_path_info-charcinternalid VALUE '1235',
      third_vc_char_int_id           TYPE atp_fc_path_info-charcinternalid VALUE '1236',
      a_vc_charc_value               TYPE if_read_order_trans_buffer=>ty_vc_data-charcvalue VALUE 'VALUE1',
      another_vc_charc_value         TYPE if_read_order_trans_buffer=>ty_vc_data-charcvalue VALUE 'VALUE2',
      a_ph_value                     TYPE prodallocationcharacteristic VALUE 'PH1',
      a_document_partner             TYPE parvw VALUE 'PH',
      a_partner_path                 TYPE atp_fc_path_info-path_id VALUE 'A8',
      a_partner_grp_path             TYPE prodalloccharccatalogpath VALUE '\_PARTNER',
      a_grp_partner_path             TYPE pactlg_path-prodalloccharccatalogpath VALUE 'PARTNER-CUSTOMER',
      a_sales_org                    TYPE vkorg VALUE '0001'.

    METHODS:
      get_charc_value_for_vc_path FOR TESTING,
      get_ch_vl_for_vc_path_w_lg_tab FOR TESTING,
      get_vc_ch_vl_for_non_vc_schdky FOR TESTING,
      get_vc_values_from_db FOR TESTING,
      get_vc_values_w_lg_table_fr_db FOR TESTING RAISING cx_static_check,
      get_grp_value_so_item FOR TESTING,
      get_grp_value_sto_items_db FOR TESTING,
      get_grp_value_num_vc FOR TESTING,
      get_hier_charc_value_value_grp FOR TESTING RAISING cx_static_check,
      get_grp_val_so_ph_charc_online FOR TESTING,
      get_partner_data_bop FOR TESTING,
      get_abc_changed_characteristic FOR TESTING RAISING cx_static_check,
      get_grp_abc_changed_char FOR TESTING RAISING cx_static_check,
      get_grp_abc_changed_mat_char FOR TESTING RAISING cx_static_check,
      adjust_values_vbkd_item FOR TESTING,
      adjust_values_vbkd_header FOR TESTING,
      adjust_values_partial FOR TESTING,
      given_sto_sto_shp_path_info,
      setup,
      given_a_sched_key,
      given_a_plant,
      given_a_vc_path,
      given_sched_key_has_vc,
      get_charc_value_for_path,
      shall_call_get_vc_data_once,
      shall_return_success,
      shall_return_vc_charac_value,
      given_sched_key_has_no_vc,
      shall_return_failure,
      shall_not_return_vc_char_value,
      given_sched_keys_with_vc_data,
      given_vc_path_info,
      get_Value_or_substn_from_DB,
      get_value,
      shall_read_vc_data_f_schd_keys,
      create_db_mock_data,
      given_context_pal,
      given_context_bop,
      given_a_vc_path_with_lg_table,
      given_vc_path_info_with_lg_tab,
      given_so_items_w_plant_address,
      given_so_with_partner,
      given_value_grp_has_default,
      given_value_grp_plant_country,
      given_value_grp_numeric,
      given_grp_value_for_france,
      given_numeric_grp_value,
      given_vc_paths,
      shall_read_grp_values_for_keys,
      given_value_grp_path_info,
      given_num_value_grp_path_info,
      givn_sto_items_w_sh_to_party,
      given_value_grp_sto_shp_to,
      given_grp_value_for_cust_a,
      shall_read_grp_vls_for_cust_a,
      given_sto_value_grp_path_info,
      given_sot_conditions,
      given_numeric_vc_data,
      given_so_items_w_vc,
      given_a_hier_path,
      given_hier_path_info_w_lg_tab,
      given_pal_data,
      given_hier_path_info_value_grp,
      given_ph_path_info_val_grp,
      given_hier_charc_valuegrp_mock,
      given_partner_path_data,
      given_grp_partner_path_data,
      given_val_grp_part_path_inf,
      shall_read_partner_values,
      given_so_with_plant_substitute,
      given_plant_path,
      given_grp_value_for_plant,
      given_grp_plant_path_info,
      shall_read_plant_for_subitem
        IMPORTING
          subitem TYPE i
          plant   TYPE werks_ext,
      shall_read_grp_val_for_subitem
        IMPORTING
          subitem TYPE i
          grp_val TYPE string,
      given_scheduleline.
    CLASS-METHODS:
      class_setup,
      class_teardown.
    CLASS-DATA:
        environment TYPE REF TO if_osql_test_environment.
ENDCLASS.
CLASS ltc_charc_val_utility2 IMPLEMENTATION.
  METHOD get_charc_value_for_vc_path.
    given_a_sched_key( ).
    given_a_vc_path( ).
    given_sched_key_has_vc( ).
    get_charc_value_for_path( ).
    shall_call_get_vc_data_once( ).
    shall_return_success( ).
    shall_return_vc_charac_value(  ).
  ENDMETHOD.

  METHOD get_ch_vl_for_vc_path_w_lg_tab.
    given_a_sched_key( ).
    given_a_vc_path_with_lg_table( ).
    given_sched_key_has_vc( ).
    get_charc_value_for_path( ).
    shall_call_get_vc_data_once( ).
    shall_return_success( ).
    shall_return_vc_charac_value(  ).
  ENDMETHOD.
  METHOD setup.
    environment->clear_doubles( ).
    CLEAR mt_bop_keys.
    CLEAR mt_orders_with_values.
    CLEAR mt_path_infos.
    data_access_mock = NEW ltd_data_access( ).
    class_under_test = NEW #( io_data_access = data_access_mock ).
*    cl_feature_toggle_4_test=>define_test_toggle( if_prod_alloc_charc_catalog_c=>sc_feature_toggle-classification_characteristics ) .
  ENDMETHOD.


  METHOD given_a_sched_key.
    schedkey = VALUE #( delnr = a_requirement_document delps = a_requirement_order_item atpcat = 'VC' ).
  ENDMETHOD.


  METHOD given_a_vc_path.
    path_info = VALUE #( path_id = a_path_int_id clfncharacteristicusetype = 'VC' charcinternalid = a_vc_char_int_id ).
  ENDMETHOD.


  METHOD get_charc_value_for_path.
    class_under_test->get_charc_value_for_path(
      EXPORTING
        is_path_info   = path_info
        is_schedkey    = schedkey
        iv_location    = plant
        IMPORTING
          ev_success     = method_success
        RECEIVING
          rv_charc_value = charc_value
    ).
  ENDMETHOD.


  METHOD shall_call_get_vc_data_once.
    assert_equals( act = data_access_mock->read_vc_data_called_count exp = 1 ).
  ENDMETHOD.

  METHOD given_sched_key_has_vc.
    data_access_mock->vc_data_for_item = VALUE #( order_id = a_requirement_document item_id = a_requirement_order_item ( charcintid = a_vc_char_int_id charcvalue = a_vc_charc_value )
    ( charcintid = another_vc_char_int_id charcvalue = another_vc_charc_value ) ).
  ENDMETHOD.

  METHOD given_a_plant.
    plant = a_plant.
  ENDMETHOD.


  METHOD shall_return_success.
    assert_equals( act = method_success exp = abap_true ).
  ENDMETHOD.


  METHOD shall_return_vc_charac_value.
    assert_equals( act = charc_value exp = a_vc_charc_value ).
  ENDMETHOD.

  METHOD get_vc_ch_vl_for_non_vc_schdky.
    given_a_sched_key( ).
    given_a_vc_path( ).
    given_sched_key_has_no_vc( ).
    get_charc_value_for_path( ).
    shall_call_get_vc_data_once( ).
    shall_return_failure( ).
    shall_not_return_vc_char_value(  ).
  ENDMETHOD.


  METHOD given_sched_key_has_no_vc.
    CLEAR data_access_mock->vc_data_for_item.
  ENDMETHOD.


  METHOD shall_return_failure.
    assert_equals( act = method_success exp = abap_false ).
  ENDMETHOD.


  METHOD shall_not_return_vc_char_value.
    assert_initial( act = charc_value ).
  ENDMETHOD.

  METHOD get_vc_values_from_db.
    given_context_pal( ).
    given_sched_keys_with_vc_data( ).
    given_vc_path_info( ).

    given_vc_paths( ).
    get_value( ).
    shall_read_vc_data_f_schd_keys( ).

  ENDMETHOD.

*method get

  METHOD get_vc_values_w_lg_table_fr_db.
    given_context_pal( ).
    given_sched_keys_with_vc_data( ).
    given_vc_path_info_with_lg_tab( ).
    given_vc_paths( ).
    get_value( ).
    shall_read_vc_data_f_schd_keys( ).

  ENDMETHOD.

  METHOD class_setup.
    environment = cl_osql_test_environment=>create( i_dependency_list = VALUE #( ( 'I_VarConfignProdInstanceValue' )
  ( 'I_SalesDocument' )   ( 'I_SalesDocumentItem' ) ( 'PACTLG_PATH' ) ( 'T001W' ) ( 'ADRC' ) ( 'PACTLG_GRPVAL' ) ( 'pactlg_parval' )
     ( 'KNA1' ) ( 'I_StockTransportOrderShipping' ) ( 'i_atpseloptntoolcritrncndn' ) ( 'VBAP' ) ( 'uhdt_node' ) ( 'P_ProdAllocSalesOrderPartner' ) ) ).
  ENDMETHOD.

  METHOD class_teardown.
    environment->destroy( ).
  ENDMETHOD.


  METHOD given_sched_keys_with_vc_data.
    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc ( delnr = a_requirement_document delps = a_requirement_order_item  )
                                                ( delnr = another_requirement_document delps = a_requirement_order_item  )
                                                ).
    mt_scheduleline = CORRESPONDING #( mt_bop_keys ).
    item_data_db = VALUE #( ( salesdocument = a_requirement_document salesdocumentitem = a_requirement_order_item
                              productconfiguration = a_cuobj_id )
                            ( salesdocument = another_requirement_document salesdocumentitem = a_requirement_order_item
                             productconfiguration = another_cuobj_id ) ).
    vc_data_db = VALUE #( ( variantconfigurationinstance = a_cuobj_id
                            charcinternalid = a_vc_char_int_id
                           charcvalue = a_vc_charc_value )
                            ( variantconfigurationinstance = a_cuobj_id
                            charcinternalid = another_vc_char_int_id
                           charcvalue = another_vc_charc_value )
                           ( variantconfigurationinstance = another_cuobj_id
                            charcinternalid = another_vc_char_int_id
                           charcvalue = a_vc_charc_value )
                            ( variantconfigurationinstance = another_cuobj_id
                            charcinternalid = third_vc_char_int_id
                           charcvalue = a_vc_charc_value ) ).
  ENDMETHOD.


  METHOD given_vc_path_info.

    INSERT VALUE #( path_id = another_path_int_id parent_path_id = vc_folder_path_int_id
      path = vc_folder_path && `-VC_CHARAC`
      clfncharacteristicusetype = 'VC'
      charcinternalid = another_vc_char_int_id  cat_type = '01'
      charc_type = '01'
      )  INTO TABLE mt_path_infos.
    INSERT VALUE #( path_id = a_path_int_id parent_path_id = vc_folder_path_int_id
       path = vc_folder_path && `-VC_CHARAC`
       clfncharacteristicusetype = 'VC'
       charcinternalid = a_vc_char_int_id  cat_type = '01'
       charc_type = '01'
       ) INTO TABLE mt_path_infos.

  ENDMETHOD.

  METHOD create_db_mock_data.

*  environment->clear_doubles( ).

    environment->insert_test_data( path_data_db ).
    environment->insert_test_data( item_data_db ).
    environment->insert_test_data( vc_data_db ).
    environment->insert_test_data( plant_data_db ).
    environment->insert_test_data( address_data_db ).
    environment->insert_test_data(  mt_value_grp_values ).
    environment->insert_test_data(  mt_value_grp_par_values ).
    environment->insert_test_data( sto_item_shipping_data_db ).
    environment->insert_test_data( sot_data_db ).
    environment->insert_test_data( doc_partner_data_tab ).
  ENDMETHOD.



  METHOD get_Value_or_substn_from_DB.
    create_db_mock_data( ).

    DATA: lt_pal_data TYPE if_read_pal_data=>tt_pal.
    class_under_test->get_Value_or_substn_from_DB(
        EXPORTING
          it_scheduleline          = mt_scheduleline
          it_path_info             = mt_path_infos
          it_pal_data              = mt_pal_data
        IMPORTING
          et_order_cvc             = mt_orders_with_values
      ).
  ENDMETHOD.

  METHOD get_value.
    create_db_mock_data( ).

    class_under_test->get_charc_value_from_db(
        EXPORTING
          it_sched_key  = CORRESPONDING #( mt_scheduleline )
          iv_context    = mv_context
          it_path_info  = mt_path_infos
          it_pal_data   = mt_pal_data
        IMPORTING
          et_order_cvc = mt_orders_with_values
      ).
  ENDMETHOD.

  METHOD shall_read_vc_data_f_schd_keys.
    assert_equals( exp = 2 act = lines( mt_orders_with_values ) ).
    LOOP AT mt_orders_with_values INTO DATA(ls_order_with_values).
      IF ls_order_with_values-sched_key-delnr = a_requirement_document.
        assert_equals(
          EXPORTING
            exp                  =  a_requirement_order_item
            act                  = ls_order_with_values-sched_key-delps
        ).
        assert_equals( exp = 2 act = lines( ls_order_with_values-cvc_data ) ).
        READ TABLE ls_order_with_values-cvc_data WITH TABLE KEY path_id = a_path_int_id
        INTO DATA(ls_cvc_data).
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = a_vc_charc_value act = ls_cvc_data-value ).
        READ TABLE ls_order_with_values-cvc_data WITH TABLE KEY path_id = another_path_int_id
       INTO ls_cvc_data.
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = another_vc_charc_value act = ls_cvc_data-value ).
      ELSEIF ls_order_with_values-sched_key-delnr = another_requirement_document.

        assert_equals(
          EXPORTING
            exp                  =  a_requirement_order_item
            act                  = ls_order_with_values-sched_key-delps
        ).
        assert_equals( exp = 1 act = lines( ls_order_with_values-cvc_data ) ).
        READ TABLE ls_order_with_values-cvc_data WITH TABLE KEY path_id = another_path_int_id
        INTO ls_cvc_data.
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = a_vc_charc_value act = ls_cvc_data-value ).

      ELSE.
        fail( msg = 'Unexpected sales order id read' ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD given_context_pal.
    mv_context = '01'.

  ENDMETHOD.

  METHOD given_pal_data.

    mt_pal_data = VALUE #( ( path_id =  hier_path_id pao_uuid = '10001' db_clmn_id = 'PRODALLOCCHARC01'  ) ).

  ENDMETHOD.

  METHOD given_a_hier_path.
    path_info = VALUE #( path_id =  hier_path_id
    db_table = 'VBAP'
    order_field = 'PRODH_UNIV_SALES_PARNT_NODID'
    charccatalogpathhierarchytype = 'PH'
    charcinternalid = a_hier_char_int_id
    data_element = 'CHARCCTLGSLSPRODHIERID' ).

  ENDMETHOD.

  METHOD given_plant_path.
    mt_path_infos = VALUE #(  (  "prodalloccharcctlgpathuuid = '011'
                                        path_id = '11135'
*                                     prodalloccharcctlgparpathintid = '11110'
                                        path = '\_ITEM\_PLANT-PLANT'
                                        db_table = 'VBAP'
                                        order_field = 'PLANT'
                                        data_element = 'WERKS_D'
                                        charc_type = '01'
                                        cat_type = '01' )
                                    ).
  ENDMETHOD.

  METHOD given_hier_path_info_w_lg_tab.
    INSERT VALUE #(
                    path_id        = hier_path_id
                    parent_path_id = hier_path_id
                    path           = hier_path
                    charc_type     = '01'
                    cat_type       = '01'
                    order_field = 'PRODH_UNIV_SALES_PARNT_NODID'
                    charccatalogpathhierarchytype = 'PH'
                  ) INTO TABLE mt_path_infos.

  ENDMETHOD.

  METHOD given_hier_path_info_value_grp.

    INSERT VALUE #( path_id                      = another_path_int_id
                    parent_path_id               = hier_path_id
                    path                         = a_value_grp_path  "the name of the value group, actual value is not important
                    path_type                    = if_pacharccatalogpathtype_c=>sc_charcacteristic
                    charc_type                   = if_pacharccatalogcharctype_c=>sc_charc_value_group
                    clfncharacteristicusetype    = if_clfncharacteristicusetype_c=>sc_domainvalues-noclassification
                    cat_type                     = if_prodalloccharccatalogtype_c=>sc_sales_order
                    characteristicvaluegrouptype = if_charcvaluegrouptype_c=>sc_discrete
                    charccatalogpathhierarchytype = if_charcctlgpathhiertype_c=>sc_domainvalues-nohierarchy
                    data_element                 = 'CHAR40'
                  ) INTO TABLE mt_path_infos.

  ENDMETHOD.

  METHOD given_ph_path_info_val_grp.

    INSERT VALUE #( path_id                       = a_ph_val_grp_path_id
                    parent_path_id                = another_path_int_id
                    path                          = a_value_grp_path
                    path_type                     = if_pacharccatalogpathtype_c=>sc_charcacteristic
                    cat_type                      = if_prodalloccharccatalogtype_c=>sc_sales_order
                    charc_type                    = if_pacharccatalogcharctype_c=>sc_charc_value_group
                    clfncharacteristicusetype     = if_clfncharacteristicusetype_c=>sc_domainvalues-noclassification
                    characteristicvaluegrouptype  = if_charcvaluegrouptype_c=>sc_discrete
                    charccatalogpathhierarchytype = if_charcctlgpathhiertype_c=>sc_domainvalues-nohierarchy
                  )
      INTO TABLE mt_path_infos.
  ENDMETHOD.

  METHOD given_a_vc_path_with_lg_table.
    path_info = VALUE #( path_id = a_path_int_id db_table = 'VBAP' order_field = 'MATNR' clfncharacteristicusetype = 'VC' charcinternalid = a_vc_char_int_id ).

  ENDMETHOD.


  METHOD given_vc_path_info_with_lg_tab.
    mt_path_infos = VALUE #(
                            ( path_id = another_path_int_id parent_path_id = vc_folder_path_int_id
                               path = vc_folder_path && `-VC_CHARAC`
                               clfncharacteristicusetype = 'VC'
                               charcinternalid = another_vc_char_int_id  cat_type = '01'
                               charc_type = '01'
                               order_field = 'MATNR'
                               db_table = 'VBAP'

                               )
                             ( path_id = a_path_int_id parent_path_id = vc_folder_path_int_id
                               path = vc_folder_path && `-VC_CHARAC`
                               clfncharacteristicusetype = 'VC'
                               charcinternalid = a_vc_char_int_id  cat_type = '01'
                               charc_type = '01'

                               )

                                ).

  ENDMETHOD.

  METHOD given_value_grp_path_info.
    INSERT VALUE #(
                    path_id        = a_path_int_id
                    parent_path_id = plant_country_path
                    path           = a_value_grp_path
                    charc_type     = '02'
                    cat_type       = '01'
                  ) INTO TABLE mt_path_infos.

  ENDMETHOD.

  METHOD given_num_value_grp_path_info.
    INSERT  VALUE #( charc_type = '02'
                     path_id = 'A1'
                     path = 'NUMERICGROUP'
                     cat_type = '01'
                     parent_path_id = 'A2'
                     path_type = '02'
                     characteristicvaluegrouptype = if_charcvaluegrouptype_c=>sc_continuous ) INTO TABLE mt_path_infos.

  ENDMETHOD.

  METHOD get_grp_value_so_item.
    given_context_pal( ).
    given_so_items_w_plant_address( ).
    given_value_grp_plant_country( ).
    given_grp_value_for_france( ).
    given_value_grp_has_default( ).
    given_value_grp_path_info( ).
    get_value( ).
    shall_read_grp_values_for_keys( ).

  ENDMETHOD.

  METHOD get_grp_value_sto_items_db.
    given_context_pal( ).
    givn_sto_items_w_sh_to_party( ).
    given_value_grp_sto_shp_to( ).
    given_grp_value_for_cust_a( ).
    given_sto_value_grp_path_info( ).
    given_sto_sto_shp_path_info( ).
    get_Value_or_substn_from_DB( ).
    shall_read_grp_vls_for_cust_a( ).
  ENDMETHOD.

  METHOD get_grp_value_num_vc.
    given_context_pal( ).
    given_so_items_w_vc( ).
    given_value_grp_numeric( ).
    given_numeric_grp_value( ).
    given_value_grp_has_default( ).
    given_num_value_grp_path_info( ).
    given_numeric_vc_data( ).
    given_sot_conditions( ).
    get_value( ).
    shall_read_grp_values_for_keys( ).
  ENDMETHOD.

  METHOD given_hier_charc_valuegrp_mock.
    DATA: lt_ctlg_paths TYPE STANDARD TABLE OF pactlg_path.
    DATA: lt_uhdt_node TYPE STANDARD TABLE OF uhdt_node.
    DATA: lt_vbap TYPE STANDARD TABLE OF vbap.
    DATA: lt_pactlg_parval TYPE STANDARD TABLE OF pactlg_parval.
    DATA: lt_pactlg_grpval TYPE STANDARD TABLE OF pactlg_grpval.
    DATA: a_so_path_id       TYPE atp_fc_path_info-path_id VALUE '12',
          a_sales_order      TYPE atp_sched_key-delnr VALUE 'ORDER1',
          a_sales_order_item TYPE atp_sched_key-delps VALUE '000010',
          a_paretn_path_id   TYPE atp_fc_path_info-path_id VALUE 'A2'.

    lt_pactlg_parval = VALUE #( ( charcctlgparentpathvalueuuid = 'C1' charccatalogparentpathvalue = 'NODE1' charcctlgvaluegroupvalueuuid = '4711' ) ).

    lt_pactlg_grpval = VALUE #( ( charcctlgvaluegroupvalueuuid = '4711' charccatalogvaluegroupvalue = 'GROUP1' prodalloccharcctlgpathuuid = a_so_path_id ) ).

    lt_ctlg_paths = VALUE #( "the hierarchy characteristic
                             ( prodalloccharccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order
                               prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_pal
                               prodalloccharccatalogcharctype = if_pacharccatalogcharctype_c=>sc_base
                               prodalloccharccatalogpathtype = if_pacharccatalogpathtype_c=>sc_charcacteristic
                               charccatalogpathhierarchytype = if_charcctlgpathhiertype_c=>sc_domainvalues-producthierarchy
                               abapdataelement = 'CHARCCTLGSLSPRODHIERID'
                               prodalloccharcctlgpathuuid = a_path_uuid
                               prodalloccharcctlgpathintid = a_so_path_id
                               prodalloccharccatalogpath = hier_path
                               prodalloccharcctlglegacytable = if_atp_ctlg_path=>vbap
                               prodalloccharcctlglegacypath = 'PRODH_UNIV_SALES_PARNT_NODID'
                               prodalloccharcctlgparpathintid = a_paretn_path_id
                              )
                              " the value group
                              ( prodalloccharccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order
                                prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_pal
                                prodalloccharccatalogcharctype = if_pacharccatalogcharctype_c=>sc_charc_value_group
                                prodalloccharccatalogpathtype = if_pacharccatalogpathtype_c=>sc_charcacteristic
                                charccatalogpathhierarchytype = if_charcctlgpathhiertype_c=>sc_domainvalues-nohierarchy
                                abapdataelement = 'CHAR40'
                                prodalloccharcctlgpathuuid = a_so_path_id
                                prodalloccharcctlgpathintid = a_paretn_path_id
                                prodalloccharccatalogpath = a_value_grp_path  "the name of the value group, actual value is not important
                                prodalloccharcctlgparpathintid = a_so_path_id
                               )
                            ).

    lt_uhdt_node = VALUE #( ( node_id = '12345'
                              node_lval = 'NODE1' )  ).

    lt_vbap = VALUE #( ( vbeln = a_sales_order
                         posnr = a_sales_order_item
                         prodh_univ_sales_parnt_nodid = '12345' ) ).

    environment->clear_doubles( ).
    environment->insert_test_data( lt_pactlg_parval ).
    environment->insert_test_data( lt_pactlg_grpval ).
    environment->insert_test_data( lt_ctlg_paths ).
    environment->insert_test_data( lt_uhdt_node ).
    environment->insert_test_data( lt_vbap ).

  ENDMETHOD.

  METHOD get_hier_charc_value_value_grp.
    DATA: lo_cut             TYPE REF TO cl_atp_charc_value_utility,
          lt_vbap            TYPE TABLE OF vbap,
          lv_charac          TYPE prodallocationcharacteristic,
          lt_order_cvc_exp   TYPE cl_atp_charc_value_utility=>tt_order_cvc,
          a_so_path_id       TYPE atp_fc_path_info-path_id VALUE '12',
          a_sales_order      TYPE atp_sched_key-delnr VALUE 'ORDER1',
          a_sales_order_item TYPE atp_sched_key-delps VALUE '000010',
          a_paretn_path_id   TYPE atp_fc_path_info-path_id VALUE 'A2',
          ph_so_order_field  TYPE atp_fc_path_info-order_field VALUE 'node_id'.

    lt_order_cvc_exp = VALUE #( ( sched_key = VALUE #( atpcat = 'VC'
                                                       delps = a_sales_order_item
                                                       delnr = a_sales_order  )
                                  cvc_data = VALUE #( (  path_id = a_paretn_path_id
                                                         value = 'GROUP1' ) ) ) ).
    given_hier_charc_valuegrp_mock( ).
    given_context_pal( ).
    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc
                            ( delnr = a_sales_order
                              delps = a_sales_order_item  ) ).
    given_pal_data(  ).
    given_hier_path_info_value_grp(  ).

    lo_cut = NEW cl_atp_charc_value_utility( ).

    lo_cut->get_charc_value_from_db(
      EXPORTING
           it_sched_key = mt_bop_keys
           iv_context   = mv_context
           it_path_info = mt_path_infos
           it_pal_data = mt_pal_data
      IMPORTING
        et_order_cvc             = DATA(it_order_cvc)
        et_charac_hierarchy_path = DATA(it_charac_hierarchy_path)
    ).

    cl_aunit_assert=>assert_equals(
      EXPORTING
        exp                  = lt_order_cvc_exp
        act                  = it_order_cvc
    ).
  ENDMETHOD.

  METHOD get_grp_val_so_ph_charc_online.
* Get group values of value groups with base characteristics SO PH and PH node in online check case.

    DATA:
      lo_cut                        TYPE REF TO cl_atp_charc_value_utility,
      lo_prod_hierarchy_util_double TYPE REF TO if_atp_hierarchy_utility,
      lo_db_access_double           TYPE REF TO if_pal_db_access,
      lt_vbap                       TYPE TABLE OF vbap,
      lt_value_group_mapping        TYPE TABLE OF if_read_pal_data=>ty_value_group_value_map
                                      WITH DEFAULT KEY
                                      WITH NON-UNIQUE SORTED KEY group_value_map COMPONENTS value_group_path_id value_group_base_value.


* Set PH path info
    given_ph_path_info_val_grp( ).

* Set sched key
    given_a_sched_key( ).

* Setup hierarchy translation access mocking.
    lo_prod_hierarchy_util_double ?= cl_abap_testdouble=>create( 'if_atp_hierarchy_utility' ).

* This is what the result will be...
    cl_abap_testdouble=>configure_call( lo_prod_hierarchy_util_double )->set_parameter(
                                                                           name  = 'ev_charac_value'
                                                                           value = a_ph_value
                                                                         ).

* ...if the call is like this.
    lo_prod_hierarchy_util_double->determine_hierarchy_evaluation(
       EXPORTING
         iv_charac_value   = CONV #( a_ph_uuid )
         iv_charac         = if_prod_alloc_charc_catalog_c=>sc_hierarchy_charc-sales_prodhier_id
         iv_hierarchy_type = if_charcctlgpathhiertype_c=>sc_domainvalues-producthierarchy
     ).

* Setup DB access mocking.
    lo_db_access_double ?= cl_abap_testdouble=>create( 'if_pal_db_access' ).

* This is what the result will be...
    cl_abap_testdouble=>configure_call( lo_db_access_double )->set_parameter(
                                                                 name  = 'es_base_path_info'
                                                                 value = VALUE if_read_pal_data=>ty_value_group_base_info(
                                                                                 path_id             = a_ph_val_grp_path_id
                                                                                 base_path_id        = another_path_int_id
                                                                                 base_par_path_id    = another_path_int_id
                                                                                 base_char_type      = if_pacharccatalogcharctype_c=>sc_base
                                                                                 base_path_type      = if_pacharccatalogpathtype_c=>sc_charcacteristic
                                                                                 base_path           = hier_path_ph
                                                                                 base_order_field    = 'PRODH_UNIV_SALES_PARNT_NODID'
                                                                                 base_db_table       = 'VBAP'
                                                                                 base_hierarchy_type = if_charcctlgpathhiertype_c=>sc_domainvalues-producthierarchy
                                                                                 sched_key_data      = VALUE #( ( schedkey ) )
                                                                               )
                                                            ).

* ...if the call is like this.
    lo_db_access_double->get_base_info_for_value_grp(
      EXPORTING
        iv_value_grp_parpathintid = mt_path_infos[ KEY primary_key COMPONENTS path_id = a_ph_val_grp_path_id ]-parent_path_id
    ).

* This is what the result will be...
    lt_value_group_mapping = VALUE #( ( value_group_path_id    = a_ph_val_grp_path_id
                                        value_group_base_value = a_ph_value
                                        value_group_value      = a_grp_value ) ).

    cl_abap_testdouble=>configure_call( lo_db_access_double )->set_parameter(
                                                                 name = 'ct_value_grp_value_map'
                                                                 value = lt_value_group_mapping ).

* ...if the call is like this.
    CLEAR lt_value_group_mapping[ 1 ]-value_group_value.

    lo_db_access_double->get_grp_values_for_base_values(
      CHANGING
        ct_value_grp_value_map = lt_value_group_mapping
    ).

* Set mocking data in buffer mananger
    lt_vbap = VALUE #( ( vbeln = schedkey-delnr
                         posnr = schedkey-delps
                         prodh_univ_sales_parnt_nodid = a_ph_uuid ) ).

    cl_atp_buffer_manager=>get_vbap_buffer( )->set( it_data = lt_vbap ).

* Call method under test:
* The test ensures that the PH characteristic value of the SO item of field VBAP-PRODH_UNIV_SALES_PARNT_NODID in varialbe a_ph_uuid (a UUID!)
* is translated to the PH ID in variable a_ph_value. Based on that for the PH ID the corresponding group value a_grp_value is found,
* since a_ph_value is a parent value assigned to the group value a_grp_value.
    lo_cut = NEW cl_atp_charc_value_utility( io_hierarchy_utility = lo_prod_hierarchy_util_double
                                             io_pal_db_access     = lo_db_access_double ).
    lo_cut->grp_charc_value_online(
      EXPORTING
        is_path_info   = mt_path_infos[ KEY primary_key COMPONENTS path_id = a_ph_val_grp_path_id ]
        is_schedkey    = schedkey
        iv_location    = a_plant
      IMPORTING
        ev_success     = DATA(lv_success)
      RECEIVING
        rv_charc_value = DATA(rv_grp_val)
    ).

    cl_aunit_assert=>assert_equals(
      EXPORTING
        exp                  = a_grp_value
        act                  = rv_grp_val
    ).

    cl_aunit_assert=>assert_equals(
      EXPORTING
        exp                  = abap_true
        act                  = lv_success
    ).
  ENDMETHOD.


  METHOD given_so_items_w_plant_address.
    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc ( delnr = a_requirement_document delps = a_requirement_order_item  )
                                                 ( delnr = another_requirement_document delps = a_requirement_order_item  )
                                                 ).
   mt_scheduleline = CORRESPONDING #( mt_bop_keys ).
    item_data_db = VALUE #( ( salesdocument = a_requirement_document salesdocumentitem = a_requirement_order_item
                              plant = a_plant )
                            ( salesdocument = another_requirement_document salesdocumentitem = a_requirement_order_item
                             plant = another_plant ) ).
    plant_data_db = VALUE #( ( werks = a_plant adrnr = an_adr_nr ) ( werks = another_plant adrnr = another_adr_nr ) ).

    address_data_db = VALUE #( ( addrnumber = an_adr_nr country = germany region = bw )
     ( addrnumber = another_adr_nr country = france region = bw ) ).

  ENDMETHOD.


  METHOD given_value_grp_has_default.

    INSERT VALUE #( charcctlgvaluegroupvalueuuid = default_value_uuid
    prodalloccharcctlgpathuuid = a_value_grp_path_uuid charccatalogvaluegroupvalue = default_grp_value
    charcctlggroupvalueisfallback = abap_true ) INTO TABLE mt_value_grp_values.
  ENDMETHOD.


  METHOD given_value_grp_plant_country.
    path_data_db =  VALUE #( prodalloccharccatalogtype = '01' prodalloccharccatalogusetype = mv_context (    prodalloccharcctlgpathuuid = a_value_grp_path_uuid
                                     prodalloccharcctlgpathintid = a_path_int_id
                                     prodalloccharcctlgparpathintid = plant_country_path
                                     prodalloccharccatalogpath = a_value_grp_path


                                     prodalloccharccatalogcharctype = '02'
                                     prodalloccharccatalogpathtype = '02' )
                                      (    prodalloccharcctlgpathuuid = another_path_uuid
                                     prodalloccharcctlgpathintid = plant_country_path
                                     prodalloccharcctlgparpathintid = item_plant_path
                                     prodalloccharccatalogpath = '\_ITEM\_PLANT\_ADDRESS-COUNTRY'
                                     prodalloccharcctlglegacytable = 'ADRC'
                                     prodalloccharcctlglegacypath = 'COUNTRY'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '02' )
                                     (    prodalloccharcctlgpathuuid = item_plant_path_uuid
                                     prodalloccharcctlgpathintid = item_plant_path
                                     prodalloccharcctlgparpathintid = item_path
                                     prodalloccharccatalogpath = '\_ITEM\_PLANT'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'WERKS'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01' )
                                      (    prodalloccharcctlgpathuuid = item_path_uuid
                                     prodalloccharcctlgpathintid = item_path
                                     prodalloccharcctlgparpathintid = root_path
                                     prodalloccharccatalogpath = '\_ITEM-SALESDOCUMENTITEM'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'POSNR'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01' ) ).
  ENDMETHOD.

  METHOD given_value_grp_numeric.
    path_data_db = VALUE #( ( prodalloccharcctlgpathuuid = a_value_grp_path_uuid prodalloccharcctlgpathintid = 'A1'
                                 prodalloccharccatalogpath = 'NUMERICGROUP'
                                 prodalloccharcctlgparpathintid = 'A2'
                                 prodalloccharccatalogcharctype = '02'
                                 clfncharacteristicusetype = 'VC'
                                 characteristicvaluegrouptype = if_charcvaluegrouptype_c=>sc_continuous
                               )
                               ( prodalloccharcctlgpathuuid = 'C2' prodalloccharcctlgpathintid = 'A2'
                                 prodalloccharccatalogpath = 'VC_CHARC' prodalloccharcctlglegacytable = ''
                                 prodalloccharcctlglegacypath = ''
                                 prodalloccharcctlgparpathintid = 'A3'
                                 prodalloccharccatalogcharctype = '01'
                                 clfncharacteristicusetype = 'VC'
                                 prodalloccharccatalogpathtype = '02'
                                 charcinternalid = a_vc_char_int_id
                               ) ).
  ENDMETHOD.

  METHOD given_grp_value_for_france.
    INSERT VALUE #( charcctlgvaluegroupvalueuuid = a_grp_value_uuid
       prodalloccharcctlgpathuuid = a_value_grp_path_uuid charccatalogvaluegroupvalue = a_grp_value
       charcctlggroupvalueisfallback = abap_false ) INTO TABLE mt_value_grp_values.

    INSERT VALUE #( charcctlgparentpathvalueuuid = value_grp_par_value_uuid
    charcctlgvaluegroupvalueuuid = a_grp_value_uuid
    charccatalogparentpathvalue = france
    prodallocationactivationstatus = '02'
    prodalloccharcctlgparpathintid = plant_country_path ) INTO TABLE mt_value_grp_par_values.
  ENDMETHOD.

  METHOD given_numeric_grp_value.
    INSERT  VALUE #(  prodalloccharcctlgpathuuid = a_value_grp_path_uuid
                       charcctlgvaluegroupvalueuuid = 'B1'
                       charccatalogvaluegroupvalue = a_grp_value
                       atpseloptntooldefuuid = '100' )  INTO TABLE mt_value_grp_values.
  ENDMETHOD.


  METHOD given_vc_paths.

    path_data_db = VALUE #( prodalloccharccatalogusetype = mv_context ( prodalloccharcctlgpathuuid = a_path_uuid
                              prodalloccharcctlgpathintid = a_path_int_id
                              prodalloccharcctlgparpathintid = vc_folder_path_int_id
                              prodalloccharccatalogpath = vc_folder_path && `-VC_CHARAC`
                              clfncharacteristicusetype = 'VC'
                              charcinternalid = a_vc_char_int_id
                              prodalloccharccatalogcharctype = '01'
                              prodalloccharccatalogpathtype = '02' )
                              ( prodalloccharcctlgpathuuid = another_path_uuid
                              prodalloccharcctlgpathintid = another_path_int_id
                              prodalloccharcctlgparpathintid = vc_folder_path_int_id
                              prodalloccharccatalogpath = vc_folder_path && `-VC_CHARAC`
                              clfncharacteristicusetype = 'VC'
                              charcinternalid = another_vc_char_int_id
                              prodalloccharccatalogcharctype = '01'
                              prodalloccharccatalogpathtype = '02' )
                              ( prodalloccharcctlgpathuuid = vc_folder_path_uuid
                              prodalloccharcctlgpathintid = vc_folder_path_int_id
                              prodalloccharcctlgparpathintid = ''
                              prodalloccharccatalogpath = vc_folder_path
                              clfncharacteristicusetype = 'VC'
                              charcinternalid = ''
                              prodalloccharccatalogcharctype = '01'
                              prodalloccharccatalogpathtype = '01' ) ).

  ENDMETHOD.


  METHOD shall_read_grp_values_for_keys.
    assert_equals( exp = 2 act = lines( mt_orders_with_values ) ).

    LOOP AT mt_orders_with_values REFERENCE INTO DATA(lr_order).
      READ TABLE lr_order->cvc_data WITH TABLE KEY path_id = a_path_int_id REFERENCE INTO DATA(lr_cvc).
      assert_equals( exp = 0 act = sy-subrc ).
      IF lr_order->sched_key-delnr = a_requirement_document.
        assert_equals( exp = default_grp_value act = lr_cvc->value ).
      ELSEIF lr_order->sched_key-delnr = another_requirement_document.
        assert_equals( exp = a_grp_value act = lr_cvc->value ).
      ELSE.
        fail( ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


  METHOD givn_sto_items_w_sh_to_party.
    mt_bop_keys = VALUE #(  atpcat = atp_cat_u1 ( delnr = a_requirement_document delps = a_requirement_order_item  )
                                                  ( delnr = another_requirement_document delps = a_requirement_order_item  )
                                                   ( delnr = another_requirement_document delps = another_requirement_order_item  )
                                                  ).
    mt_scheduleline = CORRESPONDING #( mt_bop_keys ).
    sto_item_shipping_data_db = VALUE #( ( purchaseorder = a_requirement_document purchaseorderitem = a_requirement_order_item
                              shiptoparty = customer_a )
                            ( purchaseorder = another_requirement_document purchaseorderitem = a_requirement_order_item
                            shiptoparty = customer_a )
                            ( purchaseorder = another_requirement_document purchaseorderitem = another_requirement_order_item
                            shiptoparty = customer_b ) ).

  ENDMETHOD.


  METHOD given_value_grp_sto_shp_to.
    path_data_db =  VALUE #( prodalloccharccatalogtype = '02' prodalloccharccatalogusetype = mv_context (    prodalloccharcctlgpathuuid = a_value_grp_path_uuid
                                      prodalloccharcctlgpathintid = a_path_int_id
                                      prodalloccharcctlgparpathintid = sto_shp_to_party_path
                                      prodalloccharccatalogpath = a_value_grp_path
                                      prodalloccharccatalogcharctype = '02'
                                      prodalloccharccatalogpathtype = '02' )
                                       (    prodalloccharcctlgpathuuid = a_path_uuid
                                      prodalloccharcctlgpathintid = sto_shp_to_party_path
                                      prodalloccharcctlgparpathintid = another_path_int_id
                                      prodalloccharccatalogpath = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING\_SHIPTOPARTY-CUSTOMER'
                                      prodalloccharcctlgaltvpath = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING-SHIPTOPARTY'
                                      abapdataelement = 'KUNNR'
                                      prodalloccharcctlglegacytable = 'EKPV'
                                      prodalloccharcctlglegacypath = 'KUNNR'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '02' )
                                       (    prodalloccharcctlgpathuuid = another_path_uuid
                                      prodalloccharcctlgpathintid = another_path_int_id
                                      prodalloccharcctlgparpathintid =  sto_ship_path
                                      prodalloccharccatalogpath = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING\_SHIPTOPARTY'
                                      abapdataelement = 'KUNWE'
                                      prodalloccharcctlglegacytable = 'EKPV'
                                      prodalloccharcctlglegacypath = 'KUNNR'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01' )

                                     (    prodalloccharcctlgpathuuid = stocktransport_ship_node_uuid
                                      prodalloccharcctlgpathintid =  sto_ship_path
                                      prodalloccharcctlgparpathintid = item_path
                                      prodalloccharccatalogpath = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING'
                                      abapdataelement = 'STOSHIPPINGDATA'
                                      prodalloccharcctlglegacytable = 'EKPV'

                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01' )

                                    (    prodalloccharcctlgpathuuid = item_path_uuid
                                      prodalloccharcctlgpathintid =  item_path
                                      prodalloccharcctlgparpathintid = root_path
                                      prodalloccharccatalogpath = '\_STOCKTRANSPORTORDERITEM-PURCHASEORDERITEM'
                                      prodalloccharcctlglegacypath =  'EBELP'
                                      prodalloccharcctlglegacytable = 'EKPO'
                                      abapdataelement = 'VDM_STOCKTRANSPORTORDERITEM'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01' )
                                      (    prodalloccharcctlgpathuuid = root_path_uuid
                                      prodalloccharcctlgpathintid =  root_path
                                      prodalloccharcctlgparpathintid = ''
                                      abapdataelement = 'VDM_STOCKTRANSPORTORDER'
                                      prodalloccharccatalogpath = 'PURCHASEORDER'
                                      prodalloccharcctlglegacypath =  'EBELN'
                                      prodalloccharcctlglegacytable = 'EKKO'

                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01' )
                                    ).

  ENDMETHOD.


  METHOD given_grp_value_for_cust_a.
    INSERT VALUE #( charcctlgvaluegroupvalueuuid = a_grp_value_uuid
        prodalloccharcctlgpathuuid = a_value_grp_path_uuid charccatalogvaluegroupvalue = a_grp_value
        charcctlggroupvalueisfallback = abap_false ) INTO TABLE mt_value_grp_values.

    INSERT VALUE #( charcctlgparentpathvalueuuid = value_grp_par_value_uuid
    charcctlgvaluegroupvalueuuid = a_grp_value_uuid
    charccatalogparentpathvalue = customer_a
    prodallocationactivationstatus = '02'
    prodalloccharcctlgparpathintid = sto_shp_to_party_path ) INTO TABLE mt_value_grp_par_values.

  ENDMETHOD.


  METHOD shall_read_grp_vls_for_cust_a.
    assert_equals( exp = 3 act = lines( mt_orders_with_values ) ).

    LOOP AT mt_orders_with_values REFERENCE INTO DATA(lr_order).
      READ TABLE lr_order->cvc_data WITH TABLE KEY path_id = a_path_int_id REFERENCE INTO DATA(lr_cvc).
      IF lr_order->sched_key-delnr = a_requirement_document.
        assert_equals( exp = a_grp_value act = lr_cvc->value ).
      ELSEIF lr_order->sched_key-delnr = another_requirement_document.
        assert_equals( exp = a_grp_value act = lr_cvc->value ).
      ELSE.
        fail( ).
      ENDIF.
    ENDLOOP.

  ENDMETHOD.

  METHOD given_sto_sto_shp_path_info.
    INSERT VALUE #(  path_id = sto_shp_to_party_path parent_path_id = another_path_int_id
                             path = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING\_SHIPTOPARTY-CUSTOMER'
                             alt_path = '\_STOCKTRANSPORTORDERITEM\_STOCKTRANSPORTSHIPPING-SHIPTOPARTY'
                             charc_type = '01'
                             cat_type = '02'
      ) INTO TABLE mt_path_infos.
  ENDMETHOD.


  METHOD given_sto_value_grp_path_info.

    INSERT VALUE #(  path_id = a_path_int_id parent_path_id = sto_shp_to_party_path
                                path = a_value_grp_path
                                charc_type = '02'
                                cat_type = '02'
         ) INTO TABLE mt_path_infos.



  ENDMETHOD.

  METHOD given_sot_conditions.
    sot_data_db = VALUE #( (  atpseloptntoolcritrncndnuuid = '1'
                                atpseloptntooldefuuid = '100'
                                atpseloptntoolcndncomprnoptr = cl_atp_sot_comparison_operator=>c_comparison_operator-is_between
                                atpseloptntoolcndnrgfrvalue = '10'
                                atpseloptntoolcndnrgtovalue = '20' )
                           (  atpseloptntoolcritrncndnuuid = '2'
                                atpseloptntooldefuuid = '100'
                                atpseloptntoolcndncomprnoptr = cl_atp_sot_comparison_operator=>c_comparison_operator-is_between
                                atpseloptntoolcndnrgfrvalue = '11'
                                atpseloptntoolcndnrgtovalue = '19' ) ).
  ENDMETHOD.

  METHOD given_numeric_vc_data.
    vc_data_db = VALUE #( ( variantconfigurationinstance = a_cuobj_id
                            charcinternalid = a_vc_char_int_id
                           charcfromnumericvalue = '30' )
                            ( variantconfigurationinstance = another_cuobj_id
                            charcinternalid = a_vc_char_int_id
                           charcfromnumericvalue = '15' ) ).
  ENDMETHOD.

  METHOD given_so_items_w_vc.
    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc ( delnr = a_requirement_document delps = a_requirement_order_item  )
                                                 ( delnr = another_requirement_document delps = a_requirement_order_item  )
                                                 ).
    item_data_db = VALUE #( ( salesdocument = a_requirement_document salesdocumentitem = a_requirement_order_item
                              plant = a_plant productconfiguration = a_cuobj_id )
                            ( salesdocument = another_requirement_document salesdocumentitem = a_requirement_order_item
                             plant = another_plant  productconfiguration = another_cuobj_id )
                           ).
    plant_data_db = VALUE #( ( werks = a_plant adrnr = an_adr_nr ) ( werks = another_plant adrnr = another_adr_nr ) ).

    mt_scheduleline = VALUE #( (
                                 atpcat = 'VC'
                                 delnr = a_requirement_document
                                 delps = a_requirement_order_item
                                )
                                (
                                 atpcat = 'VC'
                                 delnr = another_requirement_document
                                 delps = a_requirement_order_item
                                )
                              ).
  ENDMETHOD.


  METHOD get_partner_data_bop.
    environment->clear_doubles(  ).
    given_context_bop( ).
    given_so_with_partner(  ).
    given_partner_path_data(  ).
    given_val_grp_part_path_inf(  ).
    get_Value_or_substn_from_DB( ).
    shall_read_partner_values(  ).
  ENDMETHOD.

  METHOD get_abc_changed_characteristic.
    environment->clear_doubles(  ).
    given_context_bop( ).
    given_so_with_plant_substitute( ).
    given_partner_path_data( ).
    given_plant_path( ).
    given_scheduleline(  ).
    get_Value_or_substn_from_DB( ).
    shall_read_plant_for_subitem( subitem = 1 plant = a_plant ).
    shall_read_plant_for_subitem( subitem = 2 plant = another_plant ).
  ENDMETHOD.



  METHOD given_so_with_partner.

    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc ( delnr = a_requirement_document delps = a_requirement_order_item  ) ).

    item_data_db = VALUE #( ( salesdocument = a_requirement_document salesdocumentitem = a_requirement_order_item ) ).

    address_data_db = VALUE #( ( address_id = 'A11' addrnumber = 'A1'  country = 'DE' county = 'Germany' region = 'BW') ).

    doc_partner_data_tab = VALUE #( ( vbeln = a_requirement_document posnr = a_requirement_order_item parvw = a_document_partner kunnr = customer_a adrnr = 'A1') ).

  ENDMETHOD.

  METHOD given_partner_path_data.
    path_data_db =  VALUE #( prodalloccharccatalogtype = '01' prodalloccharccatalogusetype = mv_context
                                (    prodalloccharcctlgpathuuid = '004'
                                     prodalloccharcctlgpathintid = '11121'
                                     prodalloccharcctlgparpathintid = '11113'
                                     prodalloccharccatalogpath = '\_PARTNER-CUSTOMER'
                                     prodalloccharcctlglegacytable = 'VBPA'
                                     prodalloccharcctlglegacypath = 'KUNNR'
                                     abapdataelement = 'KUNNR'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '02'
                                 )
                                 (   prodalloccharcctlgpathuuid = '003'
                                     prodalloccharcctlgpathintid = '11113'
                                     prodalloccharcctlgparpathintid = '11112'
                                     prodalloccharccatalogpath = '\_PARTNER-PARTNERFUNCTION'
                                     prodalloccharcctlglegacytable = 'VBPA'
                                     prodalloccharcctlglegacypath = 'PARVW'
                                     abapdataelement = 'PARVW'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '002'
                                     prodalloccharcctlgpathintid = '11112'
                                     prodalloccharcctlgparpathintid = '11111'
                                     prodalloccharccatalogpath = '\_PARTNER'
                                     prodalloccharcctlglegacytable = 'VBPA'
                                     prodalloccharcctlglegacypath = 'PARVW'
                                     abapdataelement = 'PARVW'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '03'
                                 )
                                 (    prodalloccharcctlgpathuuid = '001'
                                     prodalloccharcctlgpathintid = '11111'
                                     prodalloccharcctlgparpathintid = '00000000000000000000000000000000'
                                     prodalloccharccatalogpath = 'SALESDOCUMENT'
                                     prodalloccharcctlglegacytable = 'VBAK'
                                     prodalloccharcctlglegacypath = 'VBELN'
                                     abapdataelement = 'VBELN'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '005'
                                     prodalloccharcctlgpathintid = '11110'
                                     prodalloccharcctlgparpathintid = '11111'
                                     prodalloccharccatalogpath = '\_ITEM-SALESDOCUMENTITEM'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'POSNR'
                                     abapdataelement = 'POSNR_VA'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '006'
                                     prodalloccharcctlgpathintid = '11130'
                                     prodalloccharcctlgparpathintid = '11110'
                                     prodalloccharccatalogpath = '\_ITEM\_PARTNER'
                                     prodalloccharcctlglegacytable = 'VBPA'
                                     prodalloccharcctlglegacypath = 'PARVW'
                                     abapdataelement = 'BF_PARTNEB'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '007'
                                     prodalloccharcctlgpathintid = '11131'
                                     prodalloccharcctlgparpathintid = '11130'
                                     prodalloccharccatalogpath = '\_ITEM\_PARTNER-PARTNERFUNCTION'
                                     prodalloccharcctlglegacytable = 'VBPA'
                                     prodalloccharcctlglegacypath = 'PARVW'
                                     abapdataelement = 'PARVW'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '008'
                                     prodalloccharcctlgpathintid = '11132'
                                     prodalloccharcctlgparpathintid = '11131'
                                     prodalloccharccatalogpath = '\_ITEM\_PARTNER\_ADDRESS-COUNTRY'
                                     prodalloccharcctlglegacytable = 'ADRC'
                                     prodalloccharcctlglegacypath = 'COUNTRY'
                                     abapdataelement = 'LAND1'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '009'
                                     prodalloccharcctlgpathintid = '11133'
                                     prodalloccharcctlgparpathintid = '11113'
                                     prodalloccharccatalogpath = '\_PARTNER\_ADDRESS-REGION'
                                     prodalloccharcctlglegacytable = 'ADRC'
                                     prodalloccharcctlglegacypath = 'REGION'
                                     abapdataelement = 'REGIO'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '010'
                                     prodalloccharcctlgpathintid = '11134'
                                     prodalloccharcctlgparpathintid = '11111'
                                     prodalloccharccatalogpath = 'DISTRIBUTIONCHANNEL'
                                     prodalloccharcctlglegacytable = 'ADRC'
                                     prodalloccharcctlglegacypath = 'VBAK'
                                     abapdataelement = 'VTWEG'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '011'
                                     prodalloccharcctlgpathintid = '11135'
                                     prodalloccharcctlgparpathintid = '11110'
                                     prodalloccharccatalogpath = '\_ITEM\_PLANT-PLANT'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'PLANT'
                                     abapdataelement = 'WERKS_D'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '012'
                                     prodalloccharcctlgpathintid = '11136'
                                     prodalloccharcctlgparpathintid = '11111'
                                     prodalloccharccatalogpath = 'SALESORGANIZATION'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'SALESORGANIZATION'
                                     abapdataelement = 'VKORG'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 (    prodalloccharcctlgpathuuid = '013'
                                     prodalloccharcctlgpathintid = '11136'
                                     prodalloccharcctlgparpathintid = '11110'
                                     prodalloccharccatalogpath = '\_ITEM\_MATERIAL-MATERIAL'
                                     prodalloccharcctlglegacytable = 'VBAP'
                                     prodalloccharcctlglegacypath = 'MATNR'
                                     abapdataelement = 'MATNR'
                                     prodalloccharccatalogcharctype = '01'
                                     prodalloccharccatalogpathtype = '01'
                                 )
                                 ).
  ENDMETHOD.

  METHOD given_val_grp_part_path_inf.
    INSERT VALUE #(
                   path_id        = '11121'
                   parent_path_id = '11113'
                   path           = '\_PARTNER-CUSTOMER'
                   data_element   = 'KUNNR'
                   charc_type     = '01'
                   cat_type       = '01'
                   order_field    = 'KUNNR'
                   db_table       = 'VBPA'
                   sel_key        = 'PARTNERFUNCTION'
                   sel_value      = 'PH'
                 ) INTO TABLE mt_path_infos.
    INSERT VALUE #(
                   path_id        = '11113'
                   parent_path_id = '11112'
                   path           = '\_PARTNER-PARTNERFUNCTION'
                   data_element   = 'PARVW'
                   charc_type     = '01'
                   cat_type       = '01'
                   order_field    = 'PARVW'
                   db_table       = 'VBPA'
                   sel_key        = 'PARTNERFUNCTION'
                   sel_value      = 'PH'
                 ) INTO TABLE mt_path_infos.
    INSERT VALUE #(
                   path_id        = '11132'
                   parent_path_id = '11131'
                   path           = '\_ITEM\_PARTNER\_ADDRESS-COUNTRY'
                   data_element   = 'LAND1'
                   charc_type     = '01'
                   cat_type       = '01'
                   order_field    = 'COUNTRY'
                   db_table       = 'ADRC'
                   sel_key        = 'PARTNERFUNCTION'
                   sel_value      = 'PH'
                 ) INTO TABLE mt_path_infos.
    INSERT VALUE #(
                   path_id        = '11133'
                   parent_path_id = '11113'
                   path           = '\_ITEM\_PARTNER\_ADDRESS-COUNTRY'
                   data_element   = 'LAND1'
                   charc_type     = '01'
                   cat_type       = '01'
                   order_field    = 'REGION'
                   db_table       = 'ADRC'
                   sel_key        = 'PARTNERFUNCTION'
                   sel_value      = 'PH'
                 ) INTO TABLE mt_path_infos.
  ENDMETHOD.

  METHOD given_context_bop.
    mv_context = '02'.
  ENDMETHOD.


  METHOD shall_read_partner_values.
    LOOP AT mt_orders_with_values REFERENCE INTO DATA(lr_ord).
      IF lr_ord->sched_key-delnr = a_requirement_document.
        READ TABLE lr_ord->cvc_data WITH TABLE KEY path_id = '11121' REFERENCE INTO DATA(lr_cvc).
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = customer_a act = lr_cvc->value ).
        READ TABLE lr_ord->cvc_data WITH TABLE KEY path_id = '11113' REFERENCE INTO lr_cvc.
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = a_document_partner act = lr_cvc->value ).
        READ TABLE lr_ord->cvc_data WITH TABLE KEY path_id = '11132' REFERENCE INTO lr_cvc.
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = 'DE' act = lr_cvc->value ).
        READ TABLE lr_ord->cvc_data WITH TABLE KEY path_id = '11133' REFERENCE INTO lr_cvc.
        assert_equals( exp = 0 act = sy-subrc ).
        assert_equals( exp = 'BW' act = lr_cvc->value ).
      ELSE.
        fail(  ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD given_so_with_plant_substitute.

    mt_bop_keys = VALUE #(  atpcat = atp_cat_vc ( delnr = a_requirement_document delps = a_requirement_order_item subitem = 1  )
                                                   ( delnr = a_requirement_document delps = a_requirement_order_item subitem = 2 )

                                                   ).
    item_data_db = VALUE #( ( salesdocument = a_requirement_document salesdocumentitem = a_requirement_order_item
                             plant = a_plant  )
                           ( salesdocument = another_requirement_document salesdocumentitem = a_requirement_order_item
                            plant = another_plant  productconfiguration = another_cuobj_id )
                          ).
    plant_data_db = VALUE #( ( werks = a_plant adrnr = an_adr_nr ) ( werks = another_plant adrnr = another_adr_nr ) ).
    data_access_mock->mt_abc_substitutions = VALUE #( atpcat = atp_cat_vc delnr = a_requirement_document
                                                      delps =  a_requirement_order_item
                                                      ( subitem = 1 werks = a_plant  )
                                                      ( subitem = 2 werks = another_plant  ) ).
    doc_partner_data_tab = VALUE #( ( adrnr = an_adr_nr vbeln = a_requirement_document posnr = a_requirement_order_item ) ).
    address_data_db = VALUE #( ( addrnumber = an_adr_nr country = france  ) ).
  ENDMETHOD.





  METHOD shall_read_plant_for_subitem.
    READ TABLE mt_orders_with_values WITH KEY sched_key-subitem = subitem ASSIGNING FIELD-SYMBOL(<fs_order>).
    assert_equals( exp = plant act = <fs_order>-cvc_data[ 1 ]-value ).
  ENDMETHOD.

  METHOD get_grp_abc_changed_char.
    environment->clear_doubles(  ).
    given_context_bop( ).
    given_so_with_plant_substitute( ).
    given_grp_partner_path_data( ).
    given_grp_plant_path_info( ).
    given_grp_value_for_plant(  ).
    given_scheduleline(  ).
    get_Value_or_substn_from_DB( ).
    shall_read_grp_val_for_subitem( subitem = 1 grp_val = a_abc_grp_value ).
    shall_read_grp_val_for_subitem( subitem = 2 grp_val = another_abc_grp_value ).
  ENDMETHOD.

  METHOD given_grp_partner_path_data.
    path_data_db =  VALUE #( prodalloccharccatalogtype = '01' prodalloccharccatalogusetype = mv_context
                                 (    prodalloccharcctlgpathuuid = a_value_grp_path_uuid
                                      prodalloccharcctlgpathintid = a_path_int_id
                                      prodalloccharcctlgparpathintid = '11135'
                                      prodalloccharccatalogpath = 'PLANT_GROUP'
                                      prodalloccharccatalogcharctype = '02'
                                      prodalloccharccatalogpathtype = '02' )
                                 (    prodalloccharcctlgpathuuid = '004'
                                      prodalloccharcctlgpathintid = '11121'
                                      prodalloccharcctlgparpathintid = '11113'
                                      prodalloccharccatalogpath = '\_PARTNER-CUSTOMER'
                                      prodalloccharcctlglegacytable = 'VBPA'
                                      prodalloccharcctlglegacypath = 'KUNNR'
                                      abapdataelement = 'KUNNR'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '02'
                                  )
                                  (   prodalloccharcctlgpathuuid = '003'
                                      prodalloccharcctlgpathintid = '11113'
                                      prodalloccharcctlgparpathintid = '11112'
                                      prodalloccharccatalogpath = '\_PARTNER-PARTNERFUNCTION'
                                      prodalloccharcctlglegacytable = 'VBPA'
                                      prodalloccharcctlglegacypath = 'PARVW'
                                      abapdataelement = 'PARVW'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '002'
                                      prodalloccharcctlgpathintid = '11112'
                                      prodalloccharcctlgparpathintid = '11111'
                                      prodalloccharccatalogpath = '\_PARTNER'
                                      prodalloccharcctlglegacytable = 'VBPA'
                                      prodalloccharcctlglegacypath = 'PARVW'
                                      abapdataelement = 'PARVW'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '03'
                                  )
                                  (    prodalloccharcctlgpathuuid = '001'
                                      prodalloccharcctlgpathintid = '11111'
                                      prodalloccharcctlgparpathintid = '00000000000000000000000000000000'
                                      prodalloccharccatalogpath = 'SALESDOCUMENT'
                                      prodalloccharcctlglegacytable = 'VBAK'
                                      prodalloccharcctlglegacypath = 'VBELN'
                                      abapdataelement = 'VBELN'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '005'
                                      prodalloccharcctlgpathintid = '11110'
                                      prodalloccharcctlgparpathintid = '11111'
                                      prodalloccharccatalogpath = '\_ITEM-SALESDOCUMENTITEM'
                                      prodalloccharcctlglegacytable = 'VBAP'
                                      prodalloccharcctlglegacypath = 'POSNR'
                                      abapdataelement = 'POSNR_VA'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '006'
                                      prodalloccharcctlgpathintid = '11130'
                                      prodalloccharcctlgparpathintid = '11110'
                                      prodalloccharccatalogpath = '\_ITEM\_PARTNER'
                                      prodalloccharcctlglegacytable = 'VBPA'
                                      prodalloccharcctlglegacypath = 'PARVW'
                                      abapdataelement = 'BF_PARTNEB'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '007'
                                      prodalloccharcctlgpathintid = '11131'
                                      prodalloccharcctlgparpathintid = '11130'
                                      prodalloccharccatalogpath = '\_ITEM\_PARTNER-PARTNERFUNCTION'
                                      prodalloccharcctlglegacytable = 'VBPA'
                                      prodalloccharcctlglegacypath = 'PARVW'
                                      abapdataelement = 'PARVW'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '008'
                                      prodalloccharcctlgpathintid = '11132'
                                      prodalloccharcctlgparpathintid = '11131'
                                      prodalloccharccatalogpath = '\_ITEM\_PARTNER\_ADDRESS-COUNTRY'
                                      prodalloccharcctlglegacytable = 'ADRC'
                                      prodalloccharcctlglegacypath = 'COUNTRY'
                                      abapdataelement = 'LAND1'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '009'
                                      prodalloccharcctlgpathintid = '11133'
                                      prodalloccharcctlgparpathintid = '11113'
                                      prodalloccharccatalogpath = '\_PARTNER\_ADDRESS-REGION'
                                      prodalloccharcctlglegacytable = 'ADRC'
                                      prodalloccharcctlglegacypath = 'REGION'
                                      abapdataelement = 'REGIO'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '010'
                                      prodalloccharcctlgpathintid = '11134'
                                      prodalloccharcctlgparpathintid = '11111'
                                      prodalloccharccatalogpath = 'DISTRIBUTIONCHANNEL'
                                      prodalloccharcctlglegacytable = 'ADRC'
                                      prodalloccharcctlglegacypath = 'VBAK'
                                      abapdataelement = 'VTWEG'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '011'
                                      prodalloccharcctlgpathintid = '11135'
                                      prodalloccharcctlgparpathintid = '11110'
                                      prodalloccharccatalogpath = '\_ITEM\_PLANT-PLANT'
                                      prodalloccharcctlglegacytable = 'VBAP'
                                      prodalloccharcctlglegacypath = 'PLANT'
                                      abapdataelement = 'WERKS_D'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  (    prodalloccharcctlgpathuuid = '012'
                                      prodalloccharcctlgpathintid = '11136'
                                      prodalloccharcctlgparpathintid = '11111'
                                      prodalloccharccatalogpath = 'SALESORGANIZATION'
                                      prodalloccharcctlglegacytable = 'VBAP'
                                      prodalloccharcctlglegacypath = 'SALESORGANIZATION'
                                      abapdataelement = 'VKORG'
                                      prodalloccharccatalogcharctype = '01'
                                      prodalloccharccatalogpathtype = '01'
                                  )
                                  ).
  ENDMETHOD.

  METHOD given_grp_plant_path_info.
    INSERT VALUE #(
                    path_id        = 'A1'
                    parent_path_id = '11135'
                    path           = 'PLANT_GROUP'
                    charc_type     = '02'
                    cat_type       = '01'
                  ) INTO TABLE mt_path_infos .
  ENDMETHOD.

  METHOD given_grp_value_for_plant.
    INSERT VALUE #( charcctlgvaluegroupvalueuuid = a_grp_value_uuid
        prodalloccharcctlgpathuuid = a_value_grp_path_uuid charccatalogvaluegroupvalue = a_abc_grp_value
        charcctlggroupvalueisfallback = abap_false ) INTO TABLE mt_value_grp_values.

    INSERT VALUE #( charcctlgvaluegroupvalueuuid = another_grp_value_uuid
       prodalloccharcctlgpathuuid = a_value_grp_path_uuid charccatalogvaluegroupvalue = another_abc_grp_value
       charcctlggroupvalueisfallback = abap_false ) INTO TABLE mt_value_grp_values.

    INSERT VALUE #( charcctlgparentpathvalueuuid = value_grp_par_value_uuid
    charcctlgvaluegroupvalueuuid = a_grp_value_uuid
    charccatalogparentpathvalue = a_plant
    prodallocationactivationstatus = '02'
    prodalloccharcctlgparpathintid = '11135' ) INTO TABLE mt_value_grp_par_values.

    INSERT VALUE #( charcctlgparentpathvalueuuid = another_val_grp_val_uuid
    charcctlgvaluegroupvalueuuid = another_grp_value_uuid
    charccatalogparentpathvalue = another_plant
    prodallocationactivationstatus = '02'
    prodalloccharcctlgparpathintid = '11135' ) INTO TABLE mt_value_grp_par_values.
  ENDMETHOD.


  METHOD given_scheduleline.
    mt_scheduleline = VALUE #( (
                                 atpcat = 'VC'
                                 delnr = a_requirement_document
                                 delps = a_requirement_order_item
                                 subitem = 1
                                 matnr = 'MAT1'
                                 werks = '0001'
                                )
                                (
                                 atpcat = 'VC'
                                 delnr = a_requirement_document
                                 delps = a_requirement_order_item
                                 subitem = 2
                                 matnr = 'MAT2'
                                 werks = '0002'
                                )
                              ).
  ENDMETHOD.

  METHOD shall_read_grp_val_for_subitem.
    READ TABLE mt_orders_with_values WITH KEY sched_key-subitem = subitem ASSIGNING FIELD-SYMBOL(<fs_order>).
    assert_equals( exp = grp_val act = <fs_order>-cvc_data[ 1 ]-value ).
  ENDMETHOD.

  METHOD get_grp_abc_changed_mat_char.
    environment->clear_doubles(  ).
    given_context_bop( ).
*    given_so_with_plant_substitute( ).
*    given_grp_partner_path_data( ).
*    given_grp_plant_path_info( ).
*    given_grp_value_for_plant(  ).
*    given_scheduleline(  ).
*    get_charc_value_from_db( ).
*    shall_read_grp_val_for_subitem( subitem = 1 grp_val = a_abc_grp_value ).
*    shall_read_grp_val_for_subitem( subitem = 2 grp_val = another_abc_grp_value ).
  ENDMETHOD.

  METHOD adjust_values_vbkd_item.

* Test: All legacy field adjustments are taken from VBAK, VBAP and VBKD item level.
*       For this we populate the VBKD header and item level.
    class_under_test->adjust_field_values(
      EXPORTING
        is_vbak = VALUE #( vbeln = a_requirement_document
                           vbtyp = '1'
                           knumv = '1'
                           auart = '1'
                           vkorg = '1'
                           vtweg = '1'
                           vkbur = '1'
                           vkgrp = '1'
                           kunnr = '1'
                           kvgr1 = '1'
                           kvgr2 = '1'
                           kvgr3 = '1'
                           kvgr4 = '1'
                           kvgr5 = '1'
                           audat = '1'
                           augru = '1'
                           vdatu = '1'
                           vsbed = '1'
                         )
        is_vbap = VALUE #( vbeln = a_requirement_document
                           posnr = a_requirement_order_item
                           spart = '1'
                          )
        it_vbkd = VALUE #(
* We just addd more than the required entries for testing purposes. The important ones are those for
* VBELN = a_requirement_document.
                           ( vbeln = another_requirement_document
                             bstkd = '9'
                             bzirk = '9'
                             kdgrp = '9'
                             vsart = '9'
                             fkdat = '9'
                             fplnr = '9'
                           )
                           ( vbeln = another_requirement_document
                             posnr = another_requirement_order_item
                             bstkd = '8'
                             bzirk = '8'
                             kdgrp = '8'
                             vsart = '8'
                             fkdat = '8'
                             fplnr = '8'
                           )
                           ( vbeln = a_requirement_document
                             bstkd = '1'
                             bzirk = '1'
                             kdgrp = '1'
                             vsart = '1'
                             fkdat = '1'
                             fplnr = '1'
                           )
                           ( vbeln = a_requirement_document
                             posnr = a_requirement_order_item
                             bstkd = '2'
                             bzirk = '2'
                             kdgrp = '2'
                             vsart = '2'
                             fkdat = '2'
                             fplnr = '2'
                           )
                         )
       RECEIVING
         rs_vbap = DATA(ls_vbap)
    ).

    assert_equals(
        exp = VALUE vbap( vbeln     = a_requirement_document
                          posnr     = a_requirement_order_item
                          spart     = '1'
                          vbtyp_ana = '1'
                          knumv_ana = '1'
                          auart_ana = '1'
                          vkorg_ana = '1'
                          vtweg_ana = '1'
                          vkbur_ana = '1'
                          vkgrp_ana = '1'
                          kunnr_ana = '1'
                          kvgr1_ana = '1'
                          kvgr2_ana = '1'
                          kvgr3_ana = '1'
                          kvgr4_ana = '1'
                          kvgr5_ana = '1'
                          audat_ana = '1'
                          augru_ana = '1'
                          vdatu_ana = '1'
                          vsbed_ana = '1'
                          spart_ana = '1'
                          bstkd_ana = '2'
                          bzirk_ana = '2'
                          kdgrp_ana = '2'
                          vsart_ana = '2'
                          fkdat_ana = '2'
                          fplnr_ana = '2'
                        )
        act = ls_vbap
    ).
  ENDMETHOD.

  METHOD adjust_values_vbkd_header.

* Test: All legacy field adjustments are taken from VBAK, VBAP and VBKD item level.
*       For this we populate the VBKD header and item level.
    class_under_test->adjust_field_values(
      EXPORTING
        is_vbak = VALUE #( vbeln = a_requirement_document
                           vbtyp = '1'
                           knumv = '1'
                           auart = '1'
                           vkorg = '1'
                           vtweg = '1'
                           vkbur = '1'
                           vkgrp = '1'
                           kunnr = '1'
                           kvgr1 = '1'
                           kvgr2 = '1'
                           kvgr3 = '1'
                           kvgr4 = '1'
                           kvgr5 = '1'
                           audat = '1'
                           augru = '1'
                           vdatu = '1'
                           vsbed = '1'
                         )
        is_vbap = VALUE #( vbeln = a_requirement_document
                           posnr = a_requirement_order_item
                           spart = '1'
                          )
        it_vbkd = VALUE #(
* We just addd more than the required entries for testing purposes. The important ones are those for
* VBELN = a_requirement_document.
                           ( vbeln = another_requirement_document
                             bstkd = '9'
                             bzirk = '9'
                             kdgrp = '9'
                             vsart = '9'
                             fkdat = '9'
                             fplnr = '9'
                           )
                           ( vbeln = another_requirement_document
                             posnr = another_requirement_order_item
                             bstkd = '8'
                             bzirk = '8'
                             kdgrp = '8'
                             vsart = '8'
                             fkdat = '8'
                             fplnr = '8'
                           )
                           ( vbeln = a_requirement_document
                             bstkd = '1'
                             bzirk = '1'
                             kdgrp = '1'
                             vsart = '1'
                             fkdat = '1'
                             fplnr = '1'
                           )
                           ( vbeln = a_requirement_document
                             posnr = '100000'
                             bstkd = '2'
                             bzirk = '2'
                             kdgrp = '2'
                             vsart = '2'
                             fkdat = '2'
                             fplnr = '2'
                           )
                         )
       RECEIVING
         rs_vbap = DATA(ls_vbap)
    ).

    assert_equals(
        exp = VALUE vbap( vbeln     = a_requirement_document
                          posnr     = a_requirement_order_item
                          spart     = '1'
                          vbtyp_ana = '1'
                          knumv_ana = '1'
                          auart_ana = '1'
                          vkorg_ana = '1'
                          vtweg_ana = '1'
                          vkbur_ana = '1'
                          vkgrp_ana = '1'
                          kunnr_ana = '1'
                          kvgr1_ana = '1'
                          kvgr2_ana = '1'
                          kvgr3_ana = '1'
                          kvgr4_ana = '1'
                          kvgr5_ana = '1'
                          audat_ana = '1'
                          augru_ana = '1'
                          vdatu_ana = '1'
                          vsbed_ana = '1'
                          spart_ana = '1'
                          bstkd_ana = '1'
                          bzirk_ana = '1'
                          kdgrp_ana = '1'
                          vsart_ana = '1'
                          fkdat_ana = '1'
                          fplnr_ana = '1'
                        )
        act = ls_vbap
    ).
  ENDMETHOD.

 METHOD adjust_values_partial.

* Test: All legacy field adjustments are taken from VBAK, VBAP. There is no VBKD entry.
*       For this we populate the VBKD header and item level.
    class_under_test->adjust_field_values(
      EXPORTING
        is_vbak = VALUE #( vbeln = a_requirement_document
                           vbtyp = '1'
                           knumv = '1'
                           auart = '1'
                           vkorg = '1'
                           vtweg = '1'
                           vkbur = '1'
                           vkgrp = '1'
                           kunnr = '1'
                           kvgr1 = '1'
                           kvgr2 = '1'
                           kvgr3 = '1'
                           kvgr4 = '1'
                           kvgr5 = '1'
                           audat = '1'
                           augru = '1'
                           vdatu = '1'
                           vsbed = '1'
                         )
        is_vbap = VALUE #( vbeln = a_requirement_document
                           posnr = a_requirement_order_item
                           spart = '1'
                          )
        it_vbkd = VALUE #(
* We just addd more than the required entries for testing purposes.
                           ( vbeln = another_requirement_document
                             bstkd = '9'
                             bzirk = '9'
                             kdgrp = '9'
                             vsart = '9'
                             fkdat = '9'
                             fplnr = '9'
                           )
                           ( vbeln = another_requirement_document
                             posnr = another_requirement_order_item
                             bstkd = '8'
                             bzirk = '8'
                             kdgrp = '8'
                             vsart = '8'
                             fkdat = '8'
                             fplnr = '8'
                           )
                         )
       RECEIVING
         rs_vbap = DATA(ls_vbap)
    ).

    assert_equals(
        exp = VALUE vbap( vbeln     = a_requirement_document
                          posnr     = a_requirement_order_item
                          spart     = '1'
                          vbtyp_ana = '1'
                          knumv_ana = '1'
                          auart_ana = '1'
                          vkorg_ana = '1'
                          vtweg_ana = '1'
                          vkbur_ana = '1'
                          vkgrp_ana = '1'
                          kunnr_ana = '1'
                          kvgr1_ana = '1'
                          kvgr2_ana = '1'
                          kvgr3_ana = '1'
                          kvgr4_ana = '1'
                          kvgr5_ana = '1'
                          audat_ana = '1'
                          augru_ana = '1'
                          vdatu_ana = '1'
                          vsbed_ana = '1'
                          spart_ana = '1'
                        )
        act = ls_vbap
    ).
  ENDMETHOD.
ENDCLASS.