CLASS ltd_pal_db DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_pal_db_access PARTIALLY IMPLEMENTED.

    METHODS:
      clear.
    DATA:
      mt_address   TYPE if_pal_db_access=>tts_address,
      mt_salesorg  TYPE if_pal_db_access=>tts_salesorg,
      mt_salesarea TYPE STANDARD TABLE OF knvv.
ENDCLASS.

CLASS ltd_pal_db IMPLEMENTATION.
  METHOD if_pal_db_access~get_address_data.
    rt_address = mt_address.
  ENDMETHOD.

  METHOD if_pal_db_access~get_salesorg_data.
    IF 0 < lines( mt_salesorg ).
      rs_salesorg = mt_salesorg[ 1 ].
    ENDIF.
  ENDMETHOD.

  METHOD if_pal_db_access~get_salesarea_data.
    IF 0 < lines( mt_salesarea ).
      rs_salearea = mt_salesarea[ 1 ].
    ENDIF.
  ENDMETHOD.

  METHOD clear.
    CLEAR mt_address.
    CLEAR mt_salesorg.
    CLEAR mt_salesarea.
  ENDMETHOD.
ENDCLASS.

CLASS ltd_fc_db DEFINITION FOR TESTING
DURATION SHORT
RISK LEVEL HARMLESS.
  PUBLIC SECTION.
    INTERFACES if_atp_fieldcatalog_db PARTIALLY IMPLEMENTED.

    DATA: mt_catalogpath       TYPE pactlg_path_tab,
          ms_catalogpath       TYPE pactlg_path,
          ms_catalogpathref    TYPE if_atp_fieldcatalog_db=>ts_catalog_path_ref,
          ms_catalog           TYPE pactlg,
          ms_catalog_path_text TYPE if_atp_data_access=>ts_catalog_path_text.
ENDCLASS.

CLASS ltd_fc_db IMPLEMENTATION.

  METHOD if_atp_fieldcatalog_db~read_catalog_path.
    es_catalog_path = ms_catalogpath.
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_value_for_value_help.
    et_value = VALUE #( ( prodalloccharc = 'XXX' ) ).
    ev_count = 1.
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_paths.
    et_catalog_path = VALUE #( ( ms_catalogpath ) ).
    INSERT LINES OF mt_catalogpath INTO TABLE et_catalog_path.
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_base_paths.
    et_catalog_path = VALUE #( ( ms_catalogpath ) ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_info_via_type.
    es_catalog_info = CORRESPONDING #( ms_catalog ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs.
    et_catalog_path_ref = VALUE #( ( ms_catalogpathref ) ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs_by.
    et_catalog_path_ref = VALUE #( ( ms_catalogpathref ) ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_all_path_refs_for_charc.
    et_path_ref_for_charc = CORRESPONDING #( VALUE pactlg_path_tab( ( ms_catalogpath ) ) MAPPING resulting_path_uuid = prodalloccharcctlgpathuuid ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_catalog_path_text.
    et_catalog_path_text = CORRESPONDING #( VALUE if_atp_data_access=>tt_catalog_path_text( ( ms_catalog_path_text ) ) ).
  ENDMETHOD.

  METHOD if_atp_fieldcatalog_db~read_value_groups.

    DATA: ls_value_group_parent LIKE LINE OF et_value_group_parent,
          lst_value_group_value LIKE LINE OF et_value_group_value.

    CLEAR: et_value_group_parent,
           et_value_group_value.

    ls_value_group_parent = CORRESPONDING #( ms_catalogpath MAPPING parent_path_int_id = prodalloccharcctlgpathuuid ).
    INSERT ls_value_group_parent INTO TABLE et_value_group_parent.

    lst_value_group_value = CORRESPONDING #( ms_catalogpath MAPPING group_path_uuid = prodalloccharcctlgpathuuid ).
    INSERT lst_value_group_value INTO TABLE et_value_group_value.

  ENDMETHOD.

ENDCLASS.



CLASS ltc_data_access DEFINITION DEFERRED.
CLASS cl_atp_data_access DEFINITION LOCAL FRIENDS ltc_data_access.
CLASS ltc_data_access DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PRIVATE SECTION.
    DATA:
      f_cut                   TYPE REF TO cl_atp_data_access.

    METHODS:
      setup,
      teardown,
      atpmat_from_buf_and_db         FOR TESTING,
      atpmat_not_in_buf_and_db       FOR TESTING,
      atpplant_from_buf_and_db       FOR TESTING,
      atpplant_not_in_buf_and_db     FOR TESTING,
      setup_atpplant,
      atpplant_from_plant_key        FOR TESTING,
      atpplant_from_mat_key_table    FOR TESTING,
      atpplant_from_mat_key_struc    FOR TESTING,
      atpplant_without_supplied_key  FOR TESTING,
      atpplant_all_keys_supplied     FOR TESTING,
      atpplant_with_duplicate_keys   FOR TESTING,

      atpstorloc_from_buf_and_db     FOR TESTING,
      atpstorloc_not_in_buf_and_db   FOR TESTING,
      address_from_buf_and_db        FOR TESTING,

      partner_mixed                  FOR TESTING,
      partner_from_item_in_buffer    FOR TESTING,
      partner_from_item_in_db        FOR TESTING,
      partner_from_header_in_buffer  FOR TESTING,
      partner_from_header_in_db      FOR TESTING,
      partner_not_existent           FOR TESTING,
      partner_empty_key              FOR TESTING,

      get_vc_data_from_buf           FOR TESTING,
      get_location_data              FOR TESTING,
      get_tvap                       FOR TESTING,
      get_tvap_multi                 FOR TESTING,
      get_enhanced_check_methods     FOR TESTING,
      get_salesorg_data              FOR TESTING,
      get_sto_customer_data          FOR TESTING,
      customer_data                  FOR TESTING,
      get_salesarea_data             FOR TESTING,
      get_req_delivery_date          FOR TESTING,
      fieldcat_info_via_path_delegat FOR TESTING,
      fieldcat_path_delegate         FOR TESTING,
      fieldcat_path_mix_fld_val_hlp  FOR TESTING,
      fieldcat_path_ref_delegate     FOR TESTING,
      fieldcat_path_ref_by_delegate  FOR TESTING,
      fieldcat_value_delegate        FOR TESTING,
      fieldcat_all_path_delegate     FOR TESTING,
      fieldcat_path_text_delegate    FOR TESTING,
      fieldcat_value_group_delegate  FOR TESTING,
      subitems_from_buf_and_db       FOR TESTING,
      items_from_buf_and_db          FOR TESTING,
      slines_from_buf_and_db         FOR TESTING,
      slines_from_buffer             FOR TESTING,
      slines_from_buffer_empty_key   FOR TESTING,
      slines_not_found_fill_buffer   FOR TESTING,
      convert_appl_buf_to_item_data  FOR TESTING,
      negative_keys_from_db          FOR TESTING,
      t010_get_product_sales_data    FOR TESTING,
      t011_is_sd_merge_active        FOR TESTING,
      vbap_db_state_field_in_bop     FOR TESTING.

ENDCLASS.

CLASS ltc_data_access IMPLEMENTATION.
  METHOD setup.

  ENDMETHOD.

  METHOD teardown.
    cl_atp_buffer_manager=>reset_all_buffer( ).
  ENDMETHOD.

  METHOD atpmat_from_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    DATA lt_atpmat_data TYPE TABLE OF atpmat.

* Set test data
    lt_atpmat_data = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' )
                              ( matnr = '124' werks = '0002' berid = '0002' ) ).
    cl_atp_buffer_manager=>get_atpmat_buffer( )->set( it_data = lt_atpmat_data ).

    lo_masterdata_db->set_atpmat( VALUE #( ( matnr = '222' werks = '0001' berid = '0001' ) ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_atpmat(
      EXPORTING
        it_mat_key = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' )
                            ( matnr = '124' werks = '0002' berid = '0002' )
                            ( matnr = '222' werks = '0001' berid = '0001' ) )
      IMPORTING
        et_atpmat  = DATA(lt_atpmat_act) ).

    " Check test result
    DATA lt_atpmat_exp TYPE tbl_atpmat.
    lt_atpmat_exp = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' )
                             ( matnr = '124' werks = '0002' berid = '0002' )
                             ( matnr = '222' werks = '0001' berid = '0001' ) ).
    cl_aunit_assert=>assert_equals( exp = lt_atpmat_exp act = lt_atpmat_act ).

* Call method under test with single request
    f_cut->if_atp_data_access~get_atpmat(
      EXPORTING
        it_mat_key = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' ) )
      IMPORTING
        et_atpmat  = DATA(lt_atpmat_act_single) ).
    " Check test result
    DATA ls_atpmat_exp TYPE atpmat.
    ls_atpmat_exp = VALUE #( matnr = '123' werks = '0001' berid = '0001' ).
    cl_aunit_assert=>assert_equals( exp = ls_atpmat_exp act = lt_atpmat_act_single[ 1 ] ).
  ENDMETHOD.

  METHOD atpmat_not_in_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db = lo_masterdata_db ).

* Set test data

    " Call method under test
    f_cut->if_atp_data_access~get_atpmat(
      EXPORTING
        it_mat_key = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' ) )
      IMPORTING
        et_atpmat  = DATA(lt_atpmat_act) ) ##needed.

    " Check test result
    cl_atp_buffer_manager=>get_atpmat_buffer( )->get_all(
      IMPORTING
        et_data          = DATA(lr_data)
        et_negative_data = DATA(lr_negative_buf_data)
    ).

    FIELD-SYMBOLS <lt_data> TYPE ANY TABLE.
    FIELD-SYMBOLS <lt_negative_buf_data> TYPE ANY TABLE.

    ASSIGN lr_data->* TO <lt_data>.
    cl_aunit_assert=>assert_initial( act = <lt_data> ).

    ASSIGN lr_negative_buf_data->* TO <lt_negative_buf_data>.

    cl_aunit_assert=>assert_equals( act = lines( <lt_negative_buf_data> ) exp = 1 ).

  ENDMETHOD.

  METHOD atpplant_from_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    DATA lt_atpplant_data TYPE TABLE OF atpplant.

* Set test data
    lt_atpplant_data = VALUE #( ( werks = '0001' fabkl = 'XX' tzone = 'UTC' )
                                ( werks = '0002' fabkl = 'ZZ' tzone = 'UTC' ) ).
    cl_atp_buffer_manager=>get_atpplant_buffer( )->set( it_data = lt_atpplant_data ).

    lo_masterdata_db->set_atpplant( VALUE #( ( werks = '0003' fabkl = 'VV' tzone = 'UTC' ) ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        it_mat_key  = VALUE #( ( matnr = '0001' werks = '0001' berid = '0001' )
                               ( matnr = '0001' werks = '0002' berid = '0002' )
                               ( matnr = '0001' werks = '0003' berid = '0001' ) )
      IMPORTING
        et_atpplant = DATA(lt_atpplant_act) ).

    " Check test result
    DATA lt_atpplant_exp TYPE tbl_atpplant.
    lt_atpplant_exp = VALUE #( ( werks = '0001' fabkl = 'XX'  tzone = 'UTC' )
                               ( werks = '0002' fabkl = 'ZZ'  tzone = 'UTC' )
                               ( werks = '0003' fabkl = 'VV'  tzone = 'UTC' ) ).
    cl_aunit_assert=>assert_equals( exp = lt_atpplant_exp act = lt_atpplant_act ).

* Call method under test with single request
    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        is_mat_key  = VALUE #( matnr = '0001' werks = '0001' berid = '0001' )
      IMPORTING
        es_atpplant = DATA(ls_atpplant_act) ).
    " Check test result
    DATA ls_atpplant_exp TYPE atpplant.
    ls_atpplant_exp = VALUE #( werks = '0001' fabkl = 'XX'  tzone = 'UTC' ).
    cl_aunit_assert=>assert_equals( exp = ls_atpplant_exp act = ls_atpplant_act ).
  ENDMETHOD.

  METHOD atpplant_not_in_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db = lo_masterdata_db ).


* Set test data

    " Call method under test
    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        it_mat_key  = VALUE #( ( matnr = '123' werks = '0001' berid = '0001' ) )
      IMPORTING
        et_atpplant = DATA(lt_atpplant_act) ) ##needed.

    " Check test result
    cl_atp_buffer_manager=>get_atpplant_buffer( )->get_all(
      IMPORTING
        et_data          = DATA(lr_data)
        et_negative_data = DATA(lr_negative_buf_data)
    ).

    FIELD-SYMBOLS <lt_data> TYPE ANY TABLE.
    FIELD-SYMBOLS <lt_negative_buf_data> TYPE ANY TABLE.

    ASSIGN lr_data->* TO <lt_data>.
    cl_aunit_assert=>assert_initial( act = <lt_data> ).

    ASSIGN lr_negative_buf_data->* TO <lt_negative_buf_data>.

    cl_aunit_assert=>assert_equals( act = lines( <lt_negative_buf_data> ) exp = 1 ).

  ENDMETHOD.

  METHOD setup_atpplant.

    DATA lo_masterdata_access TYPE REF TO if_atp_master_data_access.
    lo_masterdata_access = NEW cl_atp_master_data_access(  ).

    f_cut = NEW cl_atp_data_access( io_masterdata_access = lo_masterdata_access ).

    DATA(lo_plant_buffer) = cl_atp_buffer_manager=>get_atpplant_buffer( ).
    DATA(lt_buffered_plant) = VALUE tbl_atpplant( ( werks = '0001' fabkl = 'XX'  tzone = 'UTC' ) ).
    lo_plant_buffer->set( lt_buffered_plant ).

  ENDMETHOD.

  METHOD atpplant_from_plant_key.

    setup_atpplant( ).

    DATA(lt_plant_key) = VALUE if_atp_data_access=>tt_plant_keys(
      ( werks = '0001' )
    ).

    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        it_plant_key = CORRESPONDING #( lt_plant_key )
      IMPORTING
        et_atpplant   = DATA(lt_actual_atpplant)
    ).

    DATA(lt_expected_atpplant) = VALUE tbl_atpplant(
      (
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
      )
    ).

    cl_aunit_assert=>assert_equals(
      exp = lt_expected_atpplant
      act = lt_actual_atpplant
    ).

  ENDMETHOD.

  METHOD atpplant_from_mat_key_table.

   setup_atpplant( ).

   DATA(it_mat_key) = VALUE tbl_atp_mat_key(
       (
         matnr = '0001'
         werks = '0001'
         berid = '0001'
       )
     ).

    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        it_mat_key    = it_mat_key
      IMPORTING
        et_atpplant   = DATA(lt_actual_atpplant)
    ).
    DATA(lt_expected_atpplant) = VALUE tbl_atpplant(
      (
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
      )
    ).

    cl_aunit_assert=>assert_equals(
      exp = lt_expected_atpplant
      act = lt_actual_atpplant
    ).

  ENDMETHOD.

   METHOD atpplant_from_mat_key_struc.

    setup_atpplant( ).

    DATA(ls_mat_key) = VALUE atp_mat_key(
       matnr = '0001'
       werks = '0001'
       berid = '0001'
    ).

    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        is_mat_key    = ls_mat_key
      IMPORTING
        es_atpplant   = DATA(ls_actual_atpplant)
    ).
    DATA(ls_expected_atpplant) = VALUE atpplant(
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
    ).

    cl_aunit_assert=>assert_equals(
      exp = ls_expected_atpplant
      act = ls_actual_atpplant
    ).

  ENDMETHOD.

  METHOD atpplant_without_supplied_key.

    setup_atpplant( ).

    f_cut->if_atp_data_access~get_atpplant(
      IMPORTING
        et_atpplant   = DATA(lt_actual_atpplant)
    ).

    DATA(lt_expected_atpplant) = VALUE tbl_atpplant(  ).

    cl_aunit_assert=>assert_equals(
      exp = lt_expected_atpplant
      act = lt_actual_atpplant
    ).

  ENDMETHOD.

  METHOD atpplant_all_keys_supplied.

    setup_atpplant( ).

    DATA(it_plant_key) = VALUE if_atp_data_access=>tt_plant_keys(
      ( werks = '0001' )
    ).

    DATA(is_mat_key) = VALUE atp_mat_key(
         matnr = '0001'
         werks = '0003'
         berid = '0001'
    ).

    DATA(it_mat_key) = VALUE tbl_atp_mat_key(
       (
         matnr = '0001'
         werks = '0002'
         berid = '0001'
       )
    ).

    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        is_mat_key = is_mat_key
        it_mat_key = it_mat_key
        it_plant_key = CORRESPONDING #( it_plant_key )
      IMPORTING
        et_atpplant   = DATA(lt_actual_atpplant)
    ).

    DATA(lt_expected_atpplant) = VALUE tbl_atpplant(
      (
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
      )
    ).

    cl_aunit_assert=>assert_equals(
      exp = lt_expected_atpplant
      act = lt_actual_atpplant
    ).

  ENDMETHOD.

  METHOD atpplant_with_duplicate_keys.

    setup_atpplant( ).

     DATA(it_mat_key) = VALUE tbl_atp_mat_key(
       (
         matnr = '0001'
         werks = '0001'
         berid = '0001'
       )
       (
         matnr = '0002'
         werks = '0001'
         berid = '0002'
       )
    ).

    f_cut->if_atp_data_access~get_atpplant(
      EXPORTING
        it_mat_key    = it_mat_key
      IMPORTING
        es_atpplant   = DATA(ls_actual_atpplant)
        et_atpplant   = DATA(lt_actual_atpplant)
    ).

    DATA(lt_expected_atpplant) = VALUE tbl_atpplant(
      (
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
      )
    ).

    DATA(ls_expected_atpplant) = VALUE atpplant(
        werks = '0001'
        fabkl = 'XX'
        tzone = 'UTC'
    ).

    cl_aunit_assert=>assert_equals(
      exp = lt_expected_atpplant
      act = lt_actual_atpplant
    ).

    cl_aunit_assert=>assert_equals(
      exp = ls_expected_atpplant
      act = ls_actual_atpplant
    ).

  ENDMETHOD.

  METHOD atpstorloc_from_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    DATA lt_atpstorloc_data TYPE TABLE OF atp_storage_location.

* Set test data
    lt_atpstorloc_data = VALUE #( ( werks = '0001' lgort = '0001' land1 = 'DE' regio = '08' )
                                  ( werks = '0001' lgort = '0002' land1 = 'DE' regio = '09' ) ).
    cl_atp_buffer_manager=>get_atp_stor_loc_buffer( )->set( it_data = lt_atpstorloc_data ).

    lo_masterdata_db->set_atp_stor_loc( VALUE #( ( werks = '0001' lgort = '0003' land1 = 'DE' regio = '11' ) ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_atp_stor_loc(
      EXPORTING
        it_stor_loc_key  = VALUE #( ( werks = '0001' lgort = '0001' )
                                    ( werks = '0001' lgort = '0002' )
                                    ( werks = '0001' lgort = '0003' ) )
      IMPORTING
        et_atp_storage_location = DATA(lt_atpstorloc_act) ).

    " Check test result
    DATA lt_atpstorloc_exp TYPE tbl_atp_storage_location.
    lt_atpstorloc_exp = VALUE #( ( werks = '0001' lgort = '0001' land1 = 'DE' regio = '08' )
                                 ( werks = '0001' lgort = '0002' land1 = 'DE' regio = '09' )
                                 ( werks = '0001' lgort = '0003' land1 = 'DE' regio = '11' ) ).
    cl_aunit_assert=>assert_equals( exp = lt_atpstorloc_exp act = lt_atpstorloc_act ).
  ENDMETHOD.

  METHOD atpstorloc_not_in_buf_and_db.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db = lo_masterdata_db ).


* Set test data

    " Call method under test
    f_cut->if_atp_data_access~get_atp_stor_loc(
      EXPORTING
        it_stor_loc_key          = VALUE #( ( werks = '0001' lgort = '0004' ) )
      IMPORTING
        et_atp_storage_location  = DATA(lt_atpstorloc_act) ) ##needed.

    " Check test result
    cl_atp_buffer_manager=>get_atp_stor_loc_buffer( )->get_all(
      IMPORTING
        et_data          = DATA(lr_data)
        et_negative_data = DATA(lr_negative_buf_data)
    ).

    FIELD-SYMBOLS <lt_data> TYPE ANY TABLE.
    FIELD-SYMBOLS <lt_negative_buf_data> TYPE ANY TABLE.

    ASSIGN lr_data->* TO <lt_data>.
    cl_aunit_assert=>assert_initial( act = <lt_data> ).

    ASSIGN lr_negative_buf_data->* TO <lt_negative_buf_data>.

    cl_aunit_assert=>assert_equals( act = lines( <lt_negative_buf_data> ) exp = 1 ).

  ENDMETHOD.

  METHOD address_from_buf_and_db.
    DATA ls_address_act TYPE if_atp_data_access=>ty_address.
    DATA ls_address_exp TYPE if_atp_data_access=>ty_address.

    DATA lo_pal_db TYPE REF TO ltd_pal_db.
    lo_pal_db =  NEW ltd_pal_db( ).
    f_cut = NEW cl_atp_data_access( io_pal_db = lo_pal_db ).

    DATA lt_address_data TYPE TABLE OF adrc.

* Set test data
    lt_address_data = VALUE #( ( addrnumber = '122' date_from = '20180101' nation = 'D' country = 'A' region = 'X'  )
                               ( addrnumber = '123' country = 'A' region = 'X' )
                               ( addrnumber = '124' country = 'A' region = 'Y' ) ).
    cl_atp_buffer_manager=>get_address_buffer( )->set( it_data = lt_address_data ).

    lo_pal_db->mt_address = VALUE #( ( addrnumber = '125' country = 'B' region = 'Z' ) ).

    " Call method under test ->> non key read
    ls_address_act = f_cut->if_atp_data_access~get_address( iv_addrnumber = '123' ).

    " Check test result
    ls_address_exp = VALUE #( addrnumber = '123' country = 'A' region = 'X' ).
    cl_aunit_assert=>assert_equals( exp = ls_address_exp act = ls_address_act ).

    " Call method under test ->> non key read
    ls_address_act = f_cut->if_atp_data_access~get_address( iv_addrnumber = '124' ).

    " Check test result
    ls_address_exp = VALUE #( addrnumber = '124' country = 'A' region = 'Y' ).
    cl_aunit_assert=>assert_equals( exp = ls_address_exp act = ls_address_act ).

    " Call method under test ->> non key read
    ls_address_act = f_cut->if_atp_data_access~get_address( iv_addrnumber = '125' ).

    " Check test result
    ls_address_exp = VALUE #( addrnumber = '125' country = 'B' region = 'Z' ).
    cl_aunit_assert=>assert_equals( exp = ls_address_exp act = ls_address_act ).

    " Call method under test ->> empty addressnumber
    ls_address_act = f_cut->if_atp_data_access~get_address( iv_addrnumber = '' ).

    " Check test result
    cl_aunit_assert=>assert_initial( act = ls_address_act ).

    " Call method under test ->> full key to read
    DATA ls_address_key TYPE adrc.
    ls_address_key = VALUE #( addrnumber = '122' date_from = '20180101' nation = 'D' ).
    ls_address_act = f_cut->if_atp_data_access~get_address( is_address_key = ls_address_key ).

    " Check test result
    ls_address_exp = VALUE #( addrnumber = '122' country = 'A' region = 'X' ).
    cl_aunit_assert=>assert_equals( exp = ls_address_exp act = ls_address_act ).


    " Call method under test
    CLEAR lo_pal_db->mt_address.
    ls_address_act = f_cut->if_atp_data_access~get_address( iv_addrnumber = '126' ). "neither in Buffer nor in DB

    " Check test result
    cl_aunit_assert=>assert_initial( act = ls_address_act ).

  ENDMETHOD.


  METHOD get_location_data.
    DATA: ls_expected1 TYPE if_atp_data_access=>ty_location,
          ls_expected2 TYPE if_atp_data_access=>ty_location,
          lt_buff_exp  TYPE if_atp_data_access=>tts_location,
          lt_buff_act  TYPE if_atp_data_access=>tts_location,
          lt_t001w     TYPE TABLE OF t001w.
    DATA lo_masterdata_db TYPE REF TO td_atp_pac_db_masterdata.
    lo_masterdata_db = NEW td_atp_pac_db_masterdata(  ).
    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

*--> set mock data

    lt_t001w = VALUE #( ( werks = '1'
                           name1 = 'plant1'
                           vkorg = '0002' ) ).
    cl_atp_buffer_manager=>get_t001w_buffer( )->set( it_data = lt_t001w ).

    lo_masterdata_db->set_content(
      it_t001w = VALUE #( ( werks = '2'
                           name1 = 'plant2'
                           vkorg = '0002' ) ) ).

    "expected
    lt_buff_exp = VALUE #( ( werks = '1'
                             name1 = 'plant1'
                             vkorg = '0002' )
                           ( werks = '2'
                             name1 = 'plant2'
                             vkorg = '0002' ) ).
    ls_expected1 = VALUE #( werks = '1'
                           name1 = 'plant1'
                           vkorg = '0002' ).
    ls_expected2 = VALUE #( werks = '2'
                            name1 = 'plant2'
                            vkorg = '0002' ).


*--> method under test
    DATA(rs_location1) = f_cut->if_atp_data_access~get_location_data( iv_location_id = '1' ).
    DATA(rs_location2) = f_cut->if_atp_data_access~get_location_data( iv_location_id = '2' ).
    lo_masterdata_db->set_content( ). "next location shall not exist in buffer or DB
    DATA(rs_location3) = f_cut->if_atp_data_access~get_location_data( iv_location_id = '3' ). "no result!

    cl_atp_buffer_manager=>get_t001w_buffer( )->get_all(
          IMPORTING
            et_data = DATA(lr_buff_act)
        ).
    FIELD-SYMBOLS <lt_buff_act> TYPE ANY TABLE.
    ASSIGN lr_buff_act->* TO <lt_buff_act>.
    lt_buff_act = CORRESPONDING #( <lt_buff_act> ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = rs_location1 exp = ls_expected1 ).
    cl_abap_unit_assert=>assert_equals( act = rs_location2 exp = ls_expected2 ).
    cl_abap_unit_assert=>assert_initial( act = rs_location3 ).
    cl_abap_unit_assert=>assert_equals( act = lt_buff_act exp = lt_buff_exp ).

  ENDMETHOD.


  METHOD get_tvap.

    DATA: ls_tvap_tan_exp TYPE if_atp_pac_db=>ts_tvap,
          ls_tvap_tap_exp TYPE if_atp_pac_db=>ts_tvap,
          ls_tvap_zdl_exp TYPE if_atp_pac_db=>ts_tvap,
          lt_buff_exp     TYPE if_atp_pac_db=>tt_tvap,
          lt_buff_act     TYPE if_atp_pac_db=>tt_tvap.

    FIELD-SYMBOLS <lt_buff_act> TYPE ANY TABLE.

    DATA(lo_masterdata_db) = NEW td_atp_pac_db_masterdata(  ).

    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    "Expected data
    ls_tvap_tan_exp = VALUE #( pstyv = 'TAN' chaut = 'X' ).
    ls_tvap_tap_exp = VALUE #( pstyv = 'TAPA' chaut = space ).
    ls_tvap_zdl_exp = VALUE #( pstyv = 'ZDL' delivery_group_type = 'Z' ).

    INSERT ls_tvap_tan_exp INTO TABLE lt_buff_exp.
    INSERT ls_tvap_tap_exp INTO TABLE lt_buff_exp.
    INSERT ls_tvap_zdl_exp INTO TABLE lt_buff_exp.

    "set mock data
    lo_masterdata_db->set_content( it_tvap = lt_buff_exp ).


    "First call
    DATA(rs_tvap_tan) = f_cut->if_atp_data_access~get_tvap( iv_item_category = 'TAN' ).
    cl_abap_unit_assert=>assert_equals( act = rs_tvap_tan exp = ls_tvap_tan_exp ).

    "Second call: Buffered Result identical
    DATA(rs_tvap_tan_buf) = f_cut->if_atp_data_access~get_tvap( iv_item_category = 'TAN' ).
    cl_abap_unit_assert=>assert_equals( act = rs_tvap_tan_buf exp = ls_tvap_tan_exp ).

    "Request others to fill up buffer
    DATA(rs_tvap_tap) = f_cut->if_atp_data_access~get_tvap( iv_item_category = 'TAPA' ).
    cl_abap_unit_assert=>assert_equals( act = rs_tvap_tap exp = ls_tvap_tap_exp ).

    DATA(rs_tvap_zdl) = f_cut->if_atp_data_access~get_tvap( iv_item_category = 'ZDL' ).
    cl_abap_unit_assert=>assert_equals( act = rs_tvap_zdl exp = ls_tvap_zdl_exp ).

    "Second call: Buffered Result identical
    DATA(rs_tvap_zdl_buf) = f_cut->if_atp_data_access~get_tvap( iv_item_category = 'ZDL' ).
    cl_abap_unit_assert=>assert_equals( act = rs_tvap_zdl_buf exp = ls_tvap_zdl_exp ).


    cl_atp_buffer_manager=>get_tvap_buffer( )->get_all( IMPORTING et_data = DATA(lr_buff_act) ).
    ASSIGN lr_buff_act->* TO <lt_buff_act>.
    lt_buff_act = CORRESPONDING #( <lt_buff_act>  ).

    cl_abap_unit_assert=>assert_equals( act = lt_buff_act exp = lt_buff_exp ).


  ENDMETHOD.

  METHOD get_tvap_multi.

    DATA: lt_tvap_tan_exp TYPE if_atp_pac_db=>tt_tvap,
          lt_tvap_tap_exp TYPE if_atp_pac_db=>tt_tvap,
          lt_tvap_zdl_exp TYPE if_atp_pac_db=>tt_tvap,
          lt_buff_exp     TYPE if_atp_pac_db=>tt_tvap,
          lt_buff_act     TYPE if_atp_pac_db=>tt_tvap,
          lt_tvap_two_exp TYPE if_atp_pac_db=>tt_tvap.

    FIELD-SYMBOLS <lt_buff_act> TYPE ANY TABLE.

    DATA(lo_masterdata_db) = NEW td_atp_pac_db_masterdata(  ).

    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    "Expected data
    lt_tvap_tan_exp = VALUE #( ( pstyv = 'TAN' chaut = 'X' ) ).
    lt_tvap_tap_exp = VALUE #( ( pstyv = 'TAPA' chaut = space ) ).
    lt_tvap_zdl_exp = VALUE #( ( pstyv = 'ZDL' delivery_group_type = 'Z' ) ).

    INSERT LINES OF lt_tvap_tan_exp INTO TABLE lt_buff_exp.
    INSERT LINES OF lt_tvap_tap_exp INTO TABLE lt_buff_exp.
    INSERT LINES OF lt_tvap_zdl_exp INTO TABLE lt_buff_exp.

    INSERT LINES OF lt_tvap_tan_exp INTO TABLE lt_tvap_two_exp.
    INSERT LINES OF lt_tvap_zdl_exp INTO TABLE lt_tvap_two_exp.


    "set mock data
    lo_masterdata_db->set_content( it_tvap = lt_buff_exp ).


    "First call
    DATA(rt_tvap_tan) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'TAN' ) ) ).
    cl_abap_unit_assert=>assert_equals( act = rt_tvap_tan exp = lt_tvap_tan_exp ).

    "Second call: Buffered Result identical
    DATA(rt_tvap_tan_buf) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'TAN' ) ) ).
    cl_abap_unit_assert=>assert_equals( act = rt_tvap_tan_buf exp = lt_tvap_tan_exp ).

    "Request others to fill up buffer
    DATA(rt_tvap_tap) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'TAPA' ) ) ).
    cl_abap_unit_assert=>assert_equals( act = rt_tvap_tap exp = lt_tvap_tap_exp ).

    DATA(rt_tvap_zdl) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'ZDL' ) ) ).
    cl_abap_unit_assert=>assert_equals( act = rt_tvap_zdl exp = lt_tvap_zdl_exp ).

    "Second call: Buffered Result identical
    DATA(rt_tvap_zdl_buf) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'ZDL' ) ) ).
    cl_abap_unit_assert=>assert_equals( act = rt_tvap_zdl_buf exp = lt_tvap_zdl_exp ).


    cl_atp_buffer_manager=>get_tvap_buffer( )->get_all( IMPORTING et_data = DATA(lr_buff_act) ).
    ASSIGN lr_buff_act->* TO <lt_buff_act>.
    lt_buff_act = CORRESPONDING #( <lt_buff_act>  ).

    cl_abap_unit_assert=>assert_equals( act = lt_buff_act exp = lt_buff_exp ).

    "Test Multi-Access
    FREE f_cut.
    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).

    DATA(rt_tvap_two) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'ZDL' ) ( pstyv = 'TAN' ) ) ).
    th_atp_coordinator=>assert_table_equals( it_act = rt_tvap_two it_exp = lt_tvap_two_exp iv_ignore_order = abap_true ).

*    cl_abap_unit_assert=>assert_equals( act = rt_tvap_two  exp = lt_tvap_two_exp ).

    DATA(rt_tvap_three) = f_cut->if_atp_data_access~get_tvap_multi( it_item_category = VALUE #( ( pstyv = 'ZDL' ) ( pstyv = 'TAN' ) ( pstyv = 'TAPA' ) ) ).
*    cl_abap_unit_assert=>assert_equals( act = rt_tvap_three  exp = lt_buff_exp ).
    th_atp_coordinator=>assert_table_equals( it_act = rt_tvap_three it_exp = lt_buff_exp iv_ignore_order = abap_true ).

  ENDMETHOD.

  METHOD get_enhanced_check_methods.

    DATA: lo_td_customizing_db          TYPE REF TO if_atp_customizing_db,
          lt_enhanced_check_methods_db  TYPE tbl_atp_enh_chk,
          lt_enhanced_check_methods_buf TYPE tbl_atp_enh_chk,
          lt_enhanced_check_methods_exp TYPE tbl_atp_enh_chk.

    lo_td_customizing_db ?= cl_abap_testdouble=>create( 'IF_ATP_CUSTOMIZING_DB' ).
    f_cut = NEW cl_atp_data_access( io_customizing_db = lo_td_customizing_db ).

**** 1. No entries in buffer and DB ******************************
*    no entries -> all enhanced check methods are inactive

    cl_abap_testdouble=>configure_call( lo_td_customizing_db )->returning( lt_enhanced_check_methods_db ).
    lo_td_customizing_db->read_enhanced_check_methods( ).

    DATA(lt_enhanced_check_methods_act) = f_cut->if_atp_data_access~get_enhanced_check_methods(
      it_enhanced_check_key = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                       ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                       ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) )
    ).
    lt_enhanced_check_methods_exp = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) ).
    cl_abap_unit_assert=>assert_equals(
      act = lt_enhanced_check_methods_act
      exp = lt_enhanced_check_methods_exp
      msg = 'Wrong enhanced check methods for no customizing'
    ).

**** 2. Test negative buffer **********************************************
*    negative buffer is still filled from 1 -> DB entries are not read

    lt_enhanced_check_methods_db = VALUE #( ( atprelevantdocumentpurpose = space prodavailabilitycheckgroup = space altvbasedconfirmationisactive = 'X'
                                                                                                                    atpsupplycreationisactive     = 'X' )
                                            ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = space altvbasedconfirmationisactive = 'X' )
                                            ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC'  atpsupplycreationisactive     = 'X' ) ).
    cl_abap_testdouble=>configure_call( lo_td_customizing_db )->returning( lt_enhanced_check_methods_db ).
    lo_td_customizing_db->read_enhanced_check_methods( ).

    lt_enhanced_check_methods_act = f_cut->if_atp_data_access~get_enhanced_check_methods(
      it_enhanced_check_key = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                       ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                       ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) )
    ).
    lt_enhanced_check_methods_exp = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) ).
    cl_abap_unit_assert=>assert_equals(
      act = lt_enhanced_check_methods_act
      exp = lt_enhanced_check_methods_exp
      msg = 'Wrong enhanced check methods from negative buffer'
    ).

**** 3. Test via DB **********************************************
*    buffer (and negative buffer) is empty -> customizing is read from DB

    cl_atp_buffer_manager=>get_atp_enh_chk_buffer( )->reset( ).
    lt_enhanced_check_methods_db = VALUE #( ( atprelevantdocumentpurpose = space prodavailabilitycheckgroup = space altvbasedconfirmationisactive = 'X'
                                                                                                                    atpsupplycreationisactive     = 'X' )
                                            ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = space altvbasedconfirmationisactive = 'X' )
                                            ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC'  atpsupplycreationisactive     = 'X' ) ).

    cl_abap_testdouble=>configure_call( lo_td_customizing_db )->returning( lt_enhanced_check_methods_db ).
    lo_td_customizing_db->read_enhanced_check_methods( ).

    lt_enhanced_check_methods_act = f_cut->if_atp_data_access~get_enhanced_check_methods(
        it_enhanced_check_key     = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) )
    ).
    lt_enhanced_check_methods_exp = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' altvbasedconfirmationisactive = 'X' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' atpsupplycreationisactive     = 'X' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' altvbasedconfirmationisactive = 'X'
                                                                                                                    atpsupplycreationisactive     = 'X' ) ).
    cl_abap_unit_assert=>assert_equals(
      act = lt_enhanced_check_methods_act
      exp = lt_enhanced_check_methods_exp
      msg = 'Wrong enhanced check methods from DB'
    ).


**** 4. Test via buffer ********************************************
*    customizing is read from buffer

    cl_atp_buffer_manager=>get_atp_enh_chk_buffer( )->reset( ).
    lt_enhanced_check_methods_buf = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = space atpsupplycreationisactive     = 'X' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB'  altvbasedconfirmationisactive = 'X' ) ).
    cl_atp_buffer_manager=>get_atp_enh_chk_buffer( )->set( lt_enhanced_check_methods_buf ).

    lt_enhanced_check_methods_act = f_cut->if_atp_data_access~get_enhanced_check_methods(
        it_enhanced_check_key     = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) )
    ).
    lt_enhanced_check_methods_exp = VALUE #( ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'AB' altvbasedconfirmationisactive = 'X' )
                                             ( atprelevantdocumentpurpose = 'SLS' prodavailabilitycheckgroup = 'SC' atpsupplycreationisactive     = 'X' )
                                             ( atprelevantdocumentpurpose = 'XYZ' prodavailabilitycheckgroup = 'SC' ) ).
    cl_abap_unit_assert=>assert_equals(
      act = lt_enhanced_check_methods_act
      exp = lt_enhanced_check_methods_exp
      msg = 'Wrong enhanced check methods from buffer'
    ).

  ENDMETHOD.


  METHOD get_salesorg_data.
    DATA lt_buff_exp  TYPE if_pal_db_access=>tts_salesorg.
    DATA lt_buff_act  TYPE if_pal_db_access=>tts_salesorg.
    DATA lo_pal_db TYPE REF TO ltd_pal_db.
    DATA lt_tvko TYPE TABLE OF tvko.

    lo_pal_db = NEW ltd_pal_db( ).
    f_cut = NEW cl_atp_data_access( io_pal_db = lo_pal_db ).

*--> set mock data
    lt_tvko = VALUE #( ( bukrs = '1'
                         vkorg = '1' ) ).
    cl_atp_buffer_manager=>get_salesorg_buffer( )->set( it_data = lt_tvko ).
    lo_pal_db->mt_salesorg = VALUE #( ( bukrs = '1'
                                       vkorg = '2' ) ).
    "expected
    lt_buff_exp = VALUE #( ( bukrs = '1'
                             vkorg = '1' )
                           ( bukrs = '1'
                             vkorg = '2' ) ).
*--> method under test
    DATA(rs_salesorg1) = f_cut->if_atp_data_access~get_salesorg_data( iv_salesorg = '1' ).
    DATA(rs_salesorg2) = f_cut->if_atp_data_access~get_salesorg_data( iv_salesorg = '2' ).
    lo_pal_db->clear( ). "next location shall not exist in buffer or DB
    DATA(rs_salesorg3) = f_cut->if_atp_data_access~get_salesorg_data( iv_salesorg = '3' ). "no result!

    cl_atp_buffer_manager=>get_salesorg_buffer( )->get_all(
          IMPORTING
            et_data = DATA(lr_buff_act)
        ).
    FIELD-SYMBOLS <lt_buff_act> TYPE ANY TABLE.
    ASSIGN lr_buff_act->* TO <lt_buff_act>.
    lt_buff_act = CORRESPONDING #( <lt_buff_act> ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = rs_salesorg1 exp = lt_buff_exp[ 1 ] ).
    cl_abap_unit_assert=>assert_equals( act = rs_salesorg2 exp = lt_buff_exp[ 2 ] ).
    cl_abap_unit_assert=>assert_initial( act = rs_salesorg3 ).
    cl_abap_unit_assert=>assert_equals( act = lt_buff_act exp = lt_buff_exp ).
  ENDMETHOD.

  METHOD customer_data.
    DATA:
      lt_buff_exp TYPE if_atp_data_access=>tts_customer,
      lt_kna1     TYPE TABLE OF kna1.

    f_cut = NEW cl_atp_data_access( ).

*--> set mock data
    lt_kna1 = VALUE #( ( kunnr = '1'
                         land1 = 'DE'
                         name1 = 'ABC ')
                        ( kunnr = '2'
                         land1 = 'EN'
                         name1 = 'XXXX ')
                        ( kunnr = '7'
                         land1 = 'ES'
                         name1 = 'Inc. ') ).
    cl_atp_buffer_manager=>get_customer_buffer( )->set( it_data = lt_kna1 ).

    "expected
    lt_buff_exp = VALUE #( ( kunnr = '1'
                         land1 = 'DE'
                         name1 = 'ABC ')
                        ( kunnr = '7'
                         land1 = 'ES'
                         name1 = 'Inc. ') ).

*--> method under test
    f_cut->if_atp_data_access~get_customer_data(
      EXPORTING
        iv_kunnr         = '1'
      IMPORTING
        et_customer_data = DATA(lt_cust1) ).
    f_cut->if_atp_data_access~get_customer_data(
      EXPORTING
        iv_kunnr         = '7'
      IMPORTING
        et_customer_data = DATA(lt_cust2) ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = lt_cust1[ 1 ] exp = lt_buff_exp[ 1 ] ).
    cl_abap_unit_assert=>assert_equals( act = lt_cust2[ 1 ] exp = lt_buff_exp[ 2 ] ).
  ENDMETHOD.

  METHOD get_vc_data_from_buf.
    DATA: lt_vc_data TYPE if_read_order_trans_buffer=>ttsk_vc_data.

    lt_vc_data = VALUE #(  item_id = '000010'
                  (  order_id = 'ORDER1' charcintid = '1234' charcvalue = 'VALUE1' )
                  ( order_id = 'ORDER1' charcintid = '1235' charcvalue = 'VALUE2' )
                  ( order_id = 'ORDER1' charcintid = '1236' charcvalue = 'VALUE2' )
                  (  order_id = 'ORDER2' charcintid = '1234' charcvalue = 'VALUE3' )
                  (  order_id = '' charcintid = '1234' charcvalue = 'VALUE6' ) ).
    f_cut = NEW cl_atp_data_access( ).
    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER2' item_id = '000010' charcintid = '1234' )
      IMPORTING
        et_vc_data     = DATA(lt_act)
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 0 ).
    cl_atp_buffer_manager=>get_vc_buffer( )->set( it_data = lt_vc_data ).
    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER1' item_id = '000010' charcintid = '1234' )
      IMPORTING
        et_vc_data     = lt_act
    ).

    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_act[ 1 ]-charcvalue exp = 'VALUE1' ).

    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER2' item_id = '000010' charcintid = '1234' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_act[ 1 ]-charcvalue exp = 'VALUE3' ).
    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER3' item_id = '000010' charcintid = '1234' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 0 ).
    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER1' item_id = '000010' charcintid = '1236' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_act[ 1 ]-charcvalue exp = 'VALUE2' ).

    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER1' item_id = '' charcintid = '1234' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 0 ).

    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER1' item_id = '000010' charcintid = '' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 0 ).

    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = 'ORDER1' item_id = '000010' charcintid = '1234567' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 0 ).

    f_cut->if_atp_data_access~read_vc_data(
      EXPORTING
        is_vc_data_key = VALUE #( order_id = '' item_id = '000010' charcintid = '1234' )
      IMPORTING
        et_vc_data     = lt_act
    ).
    cl_abap_unit_assert=>assert_equals( act = lines( lt_act ) exp = 1 ).
    cl_abap_unit_assert=>assert_equals( act = lt_act[ 1 ]-charcvalue exp = 'VALUE6' ).

  ENDMETHOD.

  METHOD partner_mixed.

    DATA: lt_actual         TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected       TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_buffer TYPE TABLE OF vbpavb,
          lo_buffer         TYPE REF TO if_atp_buffer.


*--> set mock data
    f_cut = NEW cl_atp_data_access( io_document_data_provider = NEW td_atp_document_data_provider( ) ).
    lo_buffer = cl_atp_buffer_manager=>get_partner_buffer( ).

    "set data
    lt_expected = VALUE #( ( vbeln = '1'
                             posnr = '10'
                             parvw = 'AG'
                             kunnr = 'PAL_CUS_01' )
                           ( vbeln = '2'
                             posnr = '10'
                             parvw = 'SP'
                             kunnr = 'PAL_CUS_02' ) ).
    "fill buffer
    lt_partner_buffer = VALUE #( ( vbeln = '1'
                          posnr = '10'
                          parvw = 'AG'
                          kunnr = 'PAL_CUS_01' )
                        ( vbeln = '2'
                          posnr = '10'
                          parvw = 'SP'
                          kunnr = 'PAL_CUS_02' )
                        ( vbeln = '2'
                          posnr = '20'
                          parvw = 'MF'
                          kunnr = 'PAL_CUS_03' ) ).
    lo_buffer->set( it_data = lt_partner_buffer ).

*--> method under test
    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = VALUE #( ( delnr = '1' "found in buffer
                                          delps = '10'
                                          partner_function = 'AG' )
                                        ( delnr = '2' "found in buffer
                                          delps = '10'
                                          partner_function = 'SP' )
                                        ( delnr = '3' "not found
                                          delps = '10'
                                          partner_function = 'SP' ) )
      IMPORTING
        et_partner_data      = lt_actual
    ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = lt_actual exp = lt_expected ).
  ENDMETHOD.

  METHOD partner_from_header_in_buffer.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_buffer       TYPE TABLE OF vbpavb,
          lo_buffer               TYPE REF TO if_atp_buffer,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    f_cut = NEW cl_atp_data_access( io_document_data_provider = NEW td_atp_document_data_provider( ) ).
    lo_buffer = cl_atp_buffer_manager=>get_partner_buffer( ).

    lt_partner_buffer = VALUE #( (  vbeln = '1'
                          posnr = '0'
                          parvw = 'AG'
                          kunnr = 'PAL_CUS_01' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'RE'
                          kunnr = 'PAL_CUS_02' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'RG'
                          kunnr = 'PAL_CUS_03' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'WE'
                          kunnr = 'PAL_CUS_04' ) ).

    lo_buffer->set( it_data = lt_partner_buffer ).

    lt_partner_function_key = VALUE #( ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'RG' )
                                       ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'AG' )
                                        ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    lt_expected = VALUE #( ( vbeln = '1'
                             posnr = '0'
                             parvw = 'AG'
                             kunnr = 'PAL_CUS_01' )
                           ( vbeln = '1'
                             posnr = '0'
                             parvw = 'RG'
                             kunnr = 'PAL_CUS_03' ) ).


    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act          = lt_actual
        it_exp          = lt_expected
        iv_ignore_order = abap_true
    ).

  ENDMETHOD.

  METHOD partner_from_header_in_db.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_db           TYPE if_atp_data_access=>ttsk_partner_data,
          lo_document_dp          TYPE REF TO td_atp_document_data_provider,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    lo_document_dp = NEW #(  ).
    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_dp ).

    lt_partner_db = VALUE #( (  vbeln = '1'
                          posnr = '0'
                          parvw = 'AG'
                          kunnr = 'PAL_CUS_01' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'RE'
                          kunnr = 'PAL_CUS_02' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'RG'
                          kunnr = 'PAL_CUS_03' )
                        ( vbeln = '1'
                          posnr = '0'
                          parvw = 'WE'
                          kunnr = 'PAL_CUS_04' ) ).

    lo_document_dp->set_partner_data( partner_data = lt_partner_db ).

    lt_partner_function_key = VALUE #( ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'AG' ) ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    lt_expected = VALUE #( ( vbeln = '1'
                             posnr = '0'
                             parvw = 'AG'
                             kunnr = 'PAL_CUS_01' ) ).


    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_actual
        it_exp = lt_expected
    ).

  ENDMETHOD.

  METHOD partner_from_item_in_buffer.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_buffer       TYPE TABLE OF vbpavb,
          lo_buffer               TYPE REF TO if_atp_buffer,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    f_cut = NEW cl_atp_data_access( io_document_data_provider = NEW td_atp_document_data_provider( ) ).
    lo_buffer = cl_atp_buffer_manager=>get_partner_buffer( ).

    lt_partner_buffer = VALUE #( (  vbeln = '1'
                          posnr = '10'
                          parvw = 'AG'
                          kunnr = 'PAL_CUS_01' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'RE'
                          kunnr = 'PAL_CUS_02' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'RG'
                          kunnr = 'PAL_CUS_03' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'WE'
                          kunnr = 'PAL_CUS_04' ) ).

    lo_buffer->set( it_data = lt_partner_buffer ).

    lt_partner_function_key = VALUE #( ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'AG' ) ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    lt_expected = VALUE #( ( vbeln = '1'
                             posnr = '10'
                             parvw = 'AG'
                             kunnr = 'PAL_CUS_01' ) ).


    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_actual
        it_exp = lt_expected
    ).

  ENDMETHOD.

  METHOD partner_from_item_in_db.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_db           TYPE if_atp_data_access=>ttsk_partner_data,
          lo_document_dp          TYPE REF TO td_atp_document_data_provider,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    lo_document_dp = NEW #(  ).
    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_dp ).

    lt_partner_db = VALUE #( (  vbeln = '1'
                          posnr = '10'
                          parvw = 'AG'
                          kunnr = 'PAL_CUS_01' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'RE'
                          kunnr = 'PAL_CUS_02' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'RG'
                          kunnr = 'PAL_CUS_03' )
                        ( vbeln = '1'
                          posnr = '10'
                          parvw = 'WE'
                          kunnr = 'PAL_CUS_04' ) ).

    lo_document_dp->set_partner_data( partner_data = lt_partner_db ).

    lt_partner_function_key = VALUE #( ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'AG' ) ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    lt_expected = VALUE #( ( vbeln = '1'
                             posnr = '10'
                             parvw = 'AG'
                             kunnr = 'PAL_CUS_01' ) ).


    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_actual
        it_exp = lt_expected
    ).

  ENDMETHOD.

  METHOD partner_not_existent.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    f_cut = NEW cl_atp_data_access( io_document_data_provider = NEW td_atp_document_data_provider( ) ).

    lt_partner_function_key = VALUE #( ( delnr            = '1'
                                         delps            = '10'
                                         partner_function = 'AG' ) ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_actual
        it_exp = lt_expected
    ).

  ENDMETHOD.

  METHOD partner_empty_key.

    DATA: lt_actual               TYPE if_atp_data_access=>ttsk_partner_data,
          lt_expected             TYPE if_atp_data_access=>ttsk_partner_data,
          lt_partner_function_key TYPE if_atp_data_access=>tt_partner_function.

    f_cut = NEW cl_atp_data_access( io_document_data_provider = NEW td_atp_document_data_provider( ) ).

    f_cut->if_atp_data_access~get_partner_data(
      EXPORTING
        it_partner_functions = lt_partner_function_key
      IMPORTING
        et_partner_data      = lt_actual
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_actual
        it_exp = lt_expected
    ).

  ENDMETHOD.

  METHOD get_sto_customer_data.
    DATA: lt_buff_exp     TYPE if_read_order_trans_buffer=>tts_customer,
          lt_buff_act     TYPE if_read_order_trans_buffer=>tts_customer,
          lo_buffer       TYPE REF TO if_atp_buffer,
          lt_sto_cust_buf TYPE if_read_order_trans_buffer=>tts_customer.

    f_cut = NEW cl_atp_data_access( ).
    lo_buffer = cl_atp_buffer_manager=>get_sto_customer_buffer( ).
*--> set mock data
    lt_sto_cust_buf = VALUE #( ( order_id = '1'
                        item_id = '10'
                        order_type = if_prodallocordertype_c=>sc_sales_order
                        country = 'DE'
                        region = '01'
                        customer = 'PAL_CUS_01' ) ).
    lo_buffer->set( it_data = lt_sto_cust_buf ).

    "expected
    lt_buff_exp = VALUE #( ( order_id = '1'
                             item_id = '10'
                             order_type = if_prodallocordertype_c=>sc_sales_order
                             country = 'DE'
                             region = '01'
                             customer = 'PAL_CUS_01' ) ).
*--> method under test
    DATA(rs_customer1) = f_cut->if_atp_data_access~get_sto_customer_data( is_btd_ref = VALUE #( order_id = '1'
                                                                                                item_id = '10'
                                                                                                order_type = if_prodallocordertype_c=>sc_sales_order ) ).
    DATA(rs_customer2) = f_cut->if_atp_data_access~get_sto_customer_data( is_btd_ref = VALUE #( order_id = '1' "no result for this call
                                                                                                item_id = '10'
                                                                                                order_type = if_prodallocordertype_c=>sc_stock_transport ) ).

    lo_buffer->get_all(
      IMPORTING
        et_data = DATA(lr_all_data)
    ).
    FIELD-SYMBOLS <lt_all_buffered_data> TYPE ANY TABLE.
    ASSIGN lr_all_data->* TO <lt_all_buffered_data>.
    lt_buff_act = CORRESPONDING #( <lt_all_buffered_data> ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = rs_customer1 exp = lt_buff_exp[ 1 ] ).
    cl_abap_unit_assert=>assert_initial( act = rs_customer2 ).
    cl_abap_unit_assert=>assert_equals( act = <lt_all_buffered_data> exp = lt_buff_exp ).
  ENDMETHOD.

  METHOD get_salesarea_data.
    DATA lt_buff_exp  TYPE  STANDARD TABLE OF knvv.
    DATA lt_buff_act  TYPE STANDARD TABLE OF knvv.
    DATA lo_pal_db TYPE REF TO ltd_pal_db.
    DATA lt_knvv TYPE TABLE OF knvv.

    lo_pal_db = NEW ltd_pal_db( ).
    f_cut = NEW cl_atp_data_access( io_pal_db = lo_pal_db ).

*--> set mock data
    lt_knvv = VALUE #( ( kunnr = '1'
                         vkorg = '1'
                         vtweg = '1'
                         spart = '1' ) ).
    cl_atp_buffer_manager=>get_knvv_buffer( )->set( it_data = lt_knvv ).
    lo_pal_db->mt_salesarea = VALUE #( ( kunnr = '1'
                                         vkorg = '2'
                                         vtweg = '1'
                                         spart = '1' ) ).
    "expected
    lt_buff_exp = VALUE #( ( kunnr = '1'
                             vkorg = '1'
                             vtweg = '1'
                             spart = '1' )
                           ( kunnr = '1'
                             vkorg = '2'
                             vtweg = '1'
                             spart = '1' ) ).
*--> method under test
    DATA(rs_salesarea1) = f_cut->if_atp_data_access~get_salesarea_data( iv_customer    = '1'
                                                                        iv_salesorg    = '1'
                                                                        iv_distchannel = '1'
                                                                        iv_division    = '1' ).
    DATA(rs_salesarea2) = f_cut->if_atp_data_access~get_salesarea_data( iv_customer    = '1'
                                                                        iv_salesorg    = '2'
                                                                        iv_distchannel = '1'
                                                                        iv_division    = '1' ).
    lo_pal_db->clear( ). "next location shall not exist in buffer or DB
    DATA(rs_salesarea3) = f_cut->if_atp_data_access~get_salesarea_data( iv_customer    = '1'
                                                                        iv_salesorg    = '3'
                                                                        iv_distchannel = '1'
                                                                        iv_division    = '1' ). "no result!

    cl_atp_buffer_manager=>get_knvv_buffer( )->get_all(
          IMPORTING
            et_data = DATA(lr_buff_act)
        ).
    FIELD-SYMBOLS <lt_buff_act> TYPE ANY TABLE.
    ASSIGN lr_buff_act->* TO <lt_buff_act>.
    lt_buff_act = CORRESPONDING #( <lt_buff_act> ).

*--> validate results
    cl_abap_unit_assert=>assert_equals( act = rs_salesarea1 exp = lt_buff_exp[ 1 ] ).
    cl_abap_unit_assert=>assert_equals( act = rs_salesarea2 exp = lt_buff_exp[ 2 ] ).
    cl_abap_unit_assert=>assert_initial( act = rs_salesarea3 ).
    cl_abap_unit_assert=>assert_equals( act = lt_buff_act exp = lt_buff_exp ).
  ENDMETHOD.

  METHOD get_req_delivery_date.

    DATA: lt_scheduleline_data           TYPE if_atp_order_info_data_providr=>tt_scheduleline,
          ls_scheduleline_key            TYPE atp_sched_key_wo_subitem,
          lv_requested_delivery_date_exp TYPE edatu VALUE '20150202'.

* Set test data
    ls_scheduleline_key-atpcat = cl_atpcat_c=>sales_order.
    ls_scheduleline_key-delnr  = '123'.
    ls_scheduleline_key-delps  = '00001'.
    ls_scheduleline_key-delet  = '0001'.

    lt_scheduleline_data = VALUE #( ( sched_key  = CORRESPONDING #( ls_scheduleline_key )
                                      sline_date = lv_requested_delivery_date_exp ) ).

    cl_atp_buffer_manager=>get_scheduleline_buffer( )->set( it_data = lt_scheduleline_data ).

    f_cut = NEW cl_atp_data_access( ).

    DATA(lv_requested_delivery_date) = f_cut->if_atp_data_access~get_requested_delivery_date( is_scheduleline_key = ls_scheduleline_key ).


*--> validate results
    cl_abap_unit_assert=>assert_equals( act = lv_requested_delivery_date
                                        exp = lv_requested_delivery_date_exp ).
  ENDMETHOD.

  METHOD fieldcat_info_via_path_delegat.
    DATA: lo_fc_db            TYPE REF TO ltd_fc_db,
          ls_catalog_info_exp TYPE pactlg.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_catalog_info_exp = VALUE #( prodalloccharccataloguuid = '1' prodalloccharccatalogtype = if_prodalloccharccatalogtype_c=>sc_sales_order prodalloccharccatalogusetype = if_prodalloccharcctlgusetype_c=>sc_bop ).

    lo_fc_db->ms_catalog = ls_catalog_info_exp.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    f_cut->if_atp_data_access~get_fc_catalog_info_via_type(
      EXPORTING
        iv_catalog_type     = ls_catalog_info_exp-prodalloccharccatalogtype
        iv_catalog_use_type = ls_catalog_info_exp-prodalloccharccatalogusetype
      IMPORTING
        es_catalog_info     = DATA(ls_catalog_info_act)
    ).

    cl_aunit_assert=>assert_equals( exp = ls_catalog_info_exp
                                    act = ls_catalog_info_act ).

  ENDMETHOD.

  METHOD fieldcat_path_delegate.
    DATA lo_fc_db TYPE REF TO ltd_fc_db.
    DATA ls_pathdata_exp TYPE pactlg_path .

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_pathdata_exp = VALUE #( prodalloccharcctlgpathuuid = '1' prodalloccharccatalogpath = 'path\id' prodalloccharccatalogusetype = '02' ).

    lo_fc_db->ms_catalogpath = ls_pathdata_exp.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    DATA lt_path_uuid TYPE if_atp_data_access=>tt_fc_catalog_path_uuid.
    INSERT VALUE #( charc_path_uuid = ls_pathdata_exp-prodalloccharcctlgpathuuid ) INTO TABLE lt_path_uuid.

    f_cut->if_atp_data_access~get_fc_catalog_path(
      EXPORTING
        it_catalog_path_uuid = lt_path_uuid
      IMPORTING
        es_catalog_path      = DATA(ls_catalog_path_act)
    ).

    cl_aunit_assert=>assert_equals( exp = ls_pathdata_exp act = ls_catalog_path_act ).

  ENDMETHOD.

  METHOD fieldcat_path_mix_fld_val_hlp.

    DATA: lo_fc_db     TYPE REF TO ltd_fc_db,
          lt_path      TYPE pactlg_path_tab,
          ls_base_path LIKE LINE OF lt_path,
          ls_path_exp  LIKE LINE OF lt_path.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_path_exp = VALUE #( prodalloccharcctlgpathuuid = 'A1' prodalloccharcctlgpathintid = 'A1' prodalloccharccatalogtype = '99'
                           prodalloccharcvaluehelp        = 'I_Material'
                           prodalloccharcvalhelptblfield  = 'Material'
                           prodalloccharcvalhelptextlink  = '_Text'
                           prodalloccharcvalhelptxttblfld = 'Description' ).

    lt_path = VALUE #( ( prodalloccharcctlgpathuuid = 'A1' prodalloccharcctlgpathintid = 'A1' prodalloccharccatalogtype = '99' ) ).

    ls_base_path = ls_path_exp.
    ls_base_path-prodalloccharcctlgpathuuid  = 'B1'.
    ls_base_path-prodalloccharcctlgpathintid = 'B1'.
    ls_base_path-prodalloccharccatalogtype   = '02'.

    lo_fc_db->ms_catalogpathref-prodalloccharcctlgpathuuid  = 'A1'.
    lo_fc_db->ms_catalogpathref-basecharccatalogpathuuid    = 'B1'.
    lo_fc_db->ms_catalogpathref-basecharccatalogpathintid   = 'B1'.
    lo_fc_db->ms_catalogpathref-prodalloccharccatalogismain = abap_true.

    lo_fc_db->ms_catalogpath = ls_base_path.
    lo_fc_db->mt_catalogpath = lt_path.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    DATA lt_path_uuid TYPE if_atp_data_access=>tt_fc_catalog_path_uuid.
    INSERT VALUE #( charc_path_uuid = ls_path_exp-prodalloccharcctlgpathuuid ) INTO TABLE lt_path_uuid.

    f_cut->if_atp_data_access~get_fc_catalog_path(
      EXPORTING
        it_catalog_path_uuid = lt_path_uuid
      IMPORTING
        es_catalog_path      = DATA(ls_path_act)
    ).

    cl_aunit_assert=>assert_equals( exp = ls_path_exp act = ls_path_act ).

  ENDMETHOD.

  METHOD fieldcat_path_ref_delegate.
    DATA lo_fc_db TYPE REF TO ltd_fc_db.
    DATA ls_path_ref_exp TYPE if_atp_fieldcatalog_db=>ts_catalog_path_ref.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_path_ref_exp = VALUE #( prodalloccharcctlgpathrefuuid = 1
                               prodalloccharccataloguuid = 8 ).

    lo_fc_db->ms_catalogpathref = ls_path_ref_exp.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    DATA lt_path_ref_uuid TYPE if_atp_fieldcatalog_db=>tt_catalog_path_ref_uuid.
    INSERT VALUE #( charc_path_ref_uuid = ls_path_ref_exp-prodalloccharcctlgpathrefuuid ) INTO TABLE lt_path_ref_uuid.

    f_cut->if_atp_data_access~get_fc_catalog_path_ref(
      EXPORTING
        it_catalog_path_ref_uuid = lt_path_ref_uuid
      IMPORTING
        es_catalog_path_ref      = DATA(ls_catalog_path_ref_act)
    ).

    cl_aunit_assert=>assert_equals( exp = ls_path_ref_exp
                                    act = ls_catalog_path_ref_act ).

  ENDMETHOD.


  METHOD fieldcat_path_ref_by_delegate.
    DATA lo_fc_db TYPE REF TO ltd_fc_db.
    DATA ls_path_ref_exp TYPE if_atp_fieldcatalog_db=>ts_catalog_path_ref.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_path_ref_exp = VALUE #( prodalloccharcctlgpathrefuuid = 1
                               prodalloccharccataloguuid = 8 ).

    lo_fc_db->ms_catalogpathref = ls_path_ref_exp.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    f_cut->if_atp_data_access~get_fc_catalog_path_ref_by(
      EXPORTING
        it_catalog_uuid     = VALUE #( ( catalog_uuid = 8 ) )
      IMPORTING
        et_catalog_path_ref = DATA(lt_catalog_path_ref_act) ).

    DATA lt_path_ref_exp TYPE if_atp_fieldcatalog_db=>tt_catalog_path_ref.
    INSERT ls_path_ref_exp INTO TABLE lt_path_ref_exp.

    cl_aunit_assert=>assert_equals( exp = lt_path_ref_exp
                                    act = lt_catalog_path_ref_act ).

  ENDMETHOD.

  METHOD fieldcat_value_delegate.
* Test delegation of field catalog value retrieval
    DATA lo_fc_db TYPE REF TO ltd_fc_db.
    DATA lt_value_exp TYPE tbl_atp_charc_value_value_help.

    lo_fc_db =  NEW ltd_fc_db( ).
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).

* Call method under test
    f_cut->if_atp_data_access~get_fc_catalog_value_help_data(
      EXPORTING
        is_catalog_path = VALUE #( prodalloccharcctlgpathuuid = '444' )
        is_paging       = VALUE #( )
      IMPORTING
        et_value        = DATA(lt_value_act)
        ev_count        = DATA(lv_count_act)
    ).

    lt_value_exp = VALUE #( ( prodalloccharc = 'XXX' ) ).

    cl_aunit_assert=>assert_equals( exp = lt_value_exp act = lt_value_act ).
    cl_aunit_assert=>assert_equals( exp = 1 act = lv_count_act ).

  ENDMETHOD.

  METHOD fieldcat_all_path_delegate.
    DATA: lo_fc_db                  TYPE REF TO ltd_fc_db,
          lt_path_ref_for_charc_exp TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc,
          lt_path_ref_for_charc     TYPE if_atp_fieldcatalog_db=>tt_path_ref_for_charc_input.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    lt_path_ref_for_charc_exp = VALUE #( ( given_path_uuid = 'E1' requested_catalog_uuid = 'D2' resulting_path_uuid = 'E2' ) ).

    lo_fc_db->ms_catalogpath = VALUE #( prodalloccharcctlgpathuuid = 'E2' ).
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    lt_path_ref_for_charc = CORRESPONDING #( lt_path_ref_for_charc_exp DISCARDING DUPLICATES ).

    f_cut->if_atp_data_access~read_all_path_refs_for_charc(
      EXPORTING
        it_path_ref_for_charc = lt_path_ref_for_charc
      IMPORTING
        et_path_ref_for_charc = DATA(lt_path_ref_for_charc_act)
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act                  = lt_path_ref_for_charc_act
        it_exp                  = lt_path_ref_for_charc_exp
        it_component_to_compare = VALUE #( ( |RESULTING_PATH_UUID| ) )
    ).

  ENDMETHOD.

  METHOD fieldcat_path_text_delegate.

    DATA: lo_fc_db                 TYPE REF TO ltd_fc_db,
          lt_catalog_path_text_exp TYPE if_atp_data_access=>tt_catalog_path_text,
          lt_catalog_path_int_id   TYPE if_atp_data_access=>tt_catalog_path_int_id.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    lt_catalog_path_text_exp = VALUE #( ( charc_path_int_id = '1' text = 'UniTestText' ) ).

    lo_fc_db->ms_catalog_path_text = VALUE #( charc_path_int_id = '1' text = 'UniTestText' ).

    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).

* Call method under test
    lt_catalog_path_int_id = CORRESPONDING #( lt_catalog_path_text_exp DISCARDING DUPLICATES ).

    f_cut->if_atp_data_access~read_catalog_path_text(
      EXPORTING
        it_catalog_path_int_id = lt_catalog_path_int_id
      IMPORTING
        et_catalog_path_text   = DATA(lt_catalog_path_text_act)
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_catalog_path_text_act
        it_exp = lt_catalog_path_text_exp
    ).

  ENDMETHOD.

  METHOD fieldcat_value_group_delegate.

    DATA: lo_fc_db                  TYPE REF TO ltd_fc_db,
          lt_value_group_value_exp  TYPE if_atp_data_access=>tt_value_group_value,
          lt_value_group_parent_exp TYPE if_atp_data_access=>tt_value_group_parent,
          ls_pathdata_exp           TYPE pactlg_path.

    lo_fc_db =  NEW ltd_fc_db( ).

* Test data
    ls_pathdata_exp = VALUE #( prodalloccharcctlgpathuuid = '1' ).

    lt_value_group_value_exp = VALUE #( ( group_path_uuid = '1' ) ).

    lt_value_group_parent_exp = VALUE #( ( parent_path_int_id = '1' ) ). " workaround to use int id

    lo_fc_db->ms_catalogpath = ls_pathdata_exp.
    f_cut = NEW cl_atp_data_access( io_fieldcatalog_db = lo_fc_db ).


* Call method under test
    DATA lt_catalog_path_uuid TYPE if_atp_data_access=>tt_fc_catalog_path_uuid.
    INSERT VALUE #( charc_path_uuid = ls_pathdata_exp-prodalloccharcctlgpathuuid ) INTO TABLE lt_catalog_path_uuid.

    f_cut->if_atp_data_access~read_value_groups(
      EXPORTING
        it_catalog_path_uuid  = lt_catalog_path_uuid
      IMPORTING
        et_value_group_parent = DATA(lt_value_group_parent_act)
        et_value_group_value  = DATA(lt_value_group_value_act)
    ).

    cl_aunit_assert=>assert_equals( exp = lt_value_group_value_exp
                                    act = lt_value_group_value_act ).

    cl_aunit_assert=>assert_equals( exp = lt_value_group_parent_exp
                                    act = lt_value_group_parent_act ).

  ENDMETHOD.


  METHOD subitems_from_buf_and_db.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbap_db_state_data_in_buf TYPE if_atp_data_access=>tt_vbap_db_state_data,
          lt_subitems_db               TYPE if_atp_data_access=>tt_vbap_db_state_data,
          lt_main_item_key             TYPE tbl_atp_item_key_wo_subitem,
          lt_subitems_exp              TYPE if_atp_data_access=>tt_vbap_db_state_data.

* Set test data
    lt_vbap_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                            ( delnr = '1' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original )
                                            ( delnr = '1' delps = '20' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem  )
                                            ( delnr = '1' delps = '30' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem  ) ).

    lt_subitems_db = VALUE #( atpcat = 'VC'
                              ( delnr = '42' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive )
                              ( delnr = '42' delps = '40' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original     )
                              ( delnr = '42' delps = '50' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                              ( delnr = '42' delps = '60' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                              ( delnr = '42' delps = '70' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    cl_atp_buffer_manager=>get_vbap_db_state_buffer( )->set( it_data = lt_vbap_db_state_data_in_buf ).

    lo_document_data_provider->set_subitems( subitems = lt_subitems_db ).

    lt_main_item_key = VALUE #( atpcat = 'VC'
                                ( delnr = '1'  delps = '10' )
                                ( delnr = '42' delps = '10' )
                                ( delnr = '42' delps = '40' )
                                ( delnr = '42' delps = '70' ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_subitems(
      EXPORTING
        it_item_key = lt_main_item_key
      IMPORTING
        et_subitems = DATA(lt_subitems_act)
    ).

    INSERT LINES OF CORRESPONDING if_atp_data_access=>tt_vbap_db_state_data( lt_vbap_db_state_data_in_buf ) INTO TABLE lt_subitems_exp.
    INSERT LINES OF CORRESPONDING if_atp_data_access=>tt_vbap_db_state_data( lt_subitems_db )               INTO TABLE lt_subitems_exp.
    DELETE lt_subitems_exp WHERE substitution_status <> cl_atp_abc_c=>item_status-subitem.

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_subitems_act
        it_exp = lt_subitems_exp
    ).

    "Check that (negative) Buffer is really used
    lt_subitems_db = VALUE #( atpcat = 'VC'
                              ( delnr = '42' delps = '10' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-abc_inactive )
                              ( delnr = '42' delps = '20' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-abc_inactive )
                              ( delnr = '42' delps = '90' uepos = '' substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    lo_document_data_provider->set_subitems( subitems = lt_subitems_db ).

    f_cut->if_atp_data_access~get_subitems(
      EXPORTING
        it_item_key = lt_main_item_key
      IMPORTING
        et_subitems = lt_subitems_act
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_subitems_act
        it_exp = lt_subitems_exp
    ).

  ENDMETHOD.

  METHOD items_from_buf_and_db.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbap_db_state_data_in_buf TYPE if_atp_data_access=>tt_vbap_db_state_data,
          lt_items_db                  TYPE if_atp_data_access=>tt_vbap_db_state_data,
          lt_main_item_key             TYPE tbl_atp_item_key_wo_subitem,
          lt_item_data_exp             TYPE if_atp_order_info_data_providr=>tt_item.

* Set test data
    lt_vbap_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                            ( delnr = '1' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original )
                                            ( delnr = '1' delps = '20' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem  )
                                            ( delnr = '1' delps = '30' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem  ) ).

    lt_items_db = VALUE #( atpcat = 'VC'
                           ( delnr = '42' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive )
                           ( delnr = '42' delps = '40' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original     )
                           ( delnr = '42' delps = '50' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                           ( delnr = '42' delps = '60' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                           ( delnr = '42' delps = '70' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    cl_atp_buffer_manager=>get_vbap_db_state_buffer( )->set( it_data = lt_vbap_db_state_data_in_buf ).

    lo_document_data_provider->set_items( items = lt_items_db ).

    lt_main_item_key = VALUE #( atpcat = 'VC'
                                ( delnr = '1'  delps = '10' )
                                ( delnr = '42' delps = '10' )
                                ( delnr = '42' delps = '40' )
                                ( delnr = '42' delps = '70' ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_item_data_before_check(
      EXPORTING
        it_item_key  = lt_main_item_key
      IMPORTING
        et_item_data = DATA(lt_item_data_act)
    ).

    lt_item_data_exp = VALUE #( atpcat = 'VC'
                                ( delnr = '1'  delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original     )
*                                ( delnr = '1'  delps = '20' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem      )
*                                ( delnr = '1'  delps = '30' uepos = '10' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                                ( delnr = '42' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive )
                                ( delnr = '42' delps = '40' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-original     )
*                                ( delnr = '42' delps = '50' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
*                                ( delnr = '42' delps = '60' uepos = '40' substitution_status = cl_atp_abc_c=>item_status-subitem      )
                                ( delnr = '42' delps = '70' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_item_data_act
        it_exp = lt_item_data_exp
    ).

  ENDMETHOD.

  METHOD slines_from_buf_and_db.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbep_db_state_data_in_buf TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_sline_db                  TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_item_key                  TYPE tbl_atp_item_key_wo_subitem,
          lt_sline_data_exp            TYPE if_atp_data_access=>tt_vbep_db_state_data.

* Set test data
    lt_vbep_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                            ( delnr = '1' delps = '10' delet = '1' )
                                            ( delnr = '1' delps = '10' delet = '2' )
                                            ( delnr = '1' delps = '20' delet = '1' )
                                            ( delnr = '1' delps = '30' delet = '1' ) ).

    lt_sline_db = VALUE #( atpcat = 'VC'
                           ( delnr = '42' delps = '10' delet = '1' )
                           ( delnr = '42' delps = '10' delet = '2' )
                           ( delnr = '42' delps = '40' delet = '1' )
                           ( delnr = '42' delps = '50' delet = '1' )
                           ( delnr = '42' delps = '60' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '2' ) ).

    cl_atp_buffer_manager=>get_vbep_db_state_buffer( )->set( it_data = lt_vbep_db_state_data_in_buf ).

    lo_document_data_provider->set_slines( slines = lt_sline_db ).

    lt_item_key = VALUE #( atpcat = 'VC'
                           ( delnr = '1'  delps = '10' )
                           ( delnr = '42' delps = '10' )
                           ( delnr = '42' delps = '40' )
                           ( delnr = '42' delps = '70' ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_db_slines_for_items(
      EXPORTING
        it_item_key          = lt_item_key
      IMPORTING
        et_scheduleline_data = DATA(lt_sline_data_act)
    ).

    lt_sline_data_exp = VALUE #( atpcat = 'VC'
                                 ( delnr = '1'  delps = '10' delet = '1' )
                                 ( delnr = '1'  delps = '10' delet = '2' )
                                 ( delnr = '42' delps = '10' delet = '1' )
                                 ( delnr = '42' delps = '10' delet = '2' )
                                 ( delnr = '42' delps = '40' delet = '1' )
                                 ( delnr = '42' delps = '70' delet = '1' )
                                 ( delnr = '42' delps = '70' delet = '2' ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_sline_data_act
        it_exp = lt_sline_data_exp
    ).

  ENDMETHOD.

  METHOD slines_from_buffer.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbep_db_state_data_in_buf TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_sline_db                  TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_item_key                  TYPE tbl_atp_item_key_wo_subitem,
          lt_sline_data_exp            TYPE if_atp_data_access=>tt_vbep_db_state_data.

* Set test data
    lt_vbep_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                            ( delnr = '1'  delps = '10' delet = '1' )
                                            ( delnr = '1'  delps = '10' delet = '2' )
                                            ( delnr = '1'  delps = '20' delet = '1' )
                                            ( delnr = '1'  delps = '30' delet = '1' )
                                            ( delnr = '42' delps = '10' delet = '1' )
                                            ( delnr = '42' delps = '10' delet = '2' ) ).

    lt_sline_db = VALUE #( atpcat = 'VC'
                           ( delnr = '42' delps = '10' delet = '1' )
                           ( delnr = '42' delps = '10' delet = '2' )
                           ( delnr = '42' delps = '40' delet = '1' )
                           ( delnr = '42' delps = '50' delet = '1' )
                           ( delnr = '42' delps = '60' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '3' ) ).

    cl_atp_buffer_manager=>get_vbep_db_state_buffer( )->set( it_data = lt_vbep_db_state_data_in_buf ).

    lo_document_data_provider->set_slines( slines = lt_sline_db ).

    lt_item_key = VALUE #( atpcat = 'VC'
                           ( delnr = '1'  delps = '10' )
                           ( delnr = '42' delps = '10' )
                           ( delnr = '43' delps = '10' ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_db_slines_for_items(
      EXPORTING
        it_item_key          = lt_item_key
      IMPORTING
        et_scheduleline_data = DATA(lt_sline_data_act)
    ).

    lt_sline_data_exp = VALUE #( atpcat = 'VC'
                                 ( delnr = '1'  delps = '10' delet = '1' )
                                 ( delnr = '1'  delps = '10' delet = '2' )
                                 ( delnr = '42' delps = '10' delet = '1' )
                                 ( delnr = '42' delps = '10' delet = '2' ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_sline_data_act
        it_exp = lt_sline_data_exp
    ).

  ENDMETHOD.

  METHOD slines_from_buffer_empty_key.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbep_db_state_data_in_buf TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_sline_db                  TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_item_key                  TYPE tbl_atp_item_key_wo_subitem,
          lt_sline_data_exp            TYPE if_atp_data_access=>tt_vbep_db_state_data.

* Set test data
    lt_vbep_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                            ( delnr = '1'  delps = '10' delet = '1' )
                                            ( delnr = '1'  delps = '10' delet = '2' )
                                            ( delnr = '1'  delps = '20' delet = '1' )
                                            ( delnr = '1'  delps = '30' delet = '1' )
                                            ( delnr = '42' delps = '10' delet = '1' )
                                            ( delnr = '42' delps = '10' delet = '2' ) ).

    lt_sline_db = VALUE #( atpcat = 'VC'
                           ( delnr = '42' delps = '10' delet = '1' )
                           ( delnr = '42' delps = '10' delet = '2' )
                           ( delnr = '42' delps = '40' delet = '1' )
                           ( delnr = '42' delps = '50' delet = '1' )
                           ( delnr = '42' delps = '60' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '1' )
                           ( delnr = '42' delps = '70' delet = '3' ) ).

    cl_atp_buffer_manager=>get_vbep_db_state_buffer( )->set( it_data = lt_vbep_db_state_data_in_buf ).

    lo_document_data_provider->set_slines( slines = lt_sline_db ).

    " Call method under test
    f_cut->if_atp_data_access~get_db_slines_for_items(
      EXPORTING
        it_item_key          = lt_item_key
      IMPORTING
        et_scheduleline_data = DATA(lt_sline_data_act)
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_sline_data_act
        it_exp = lt_sline_data_exp
    ).

  ENDMETHOD.

  METHOD slines_not_found_fill_buffer.

    DATA lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).

    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    DATA: lt_vbep_db_state_data_in_buf   TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_vbep_db_state_data_negative TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_vbep_db_state_buffer_act    TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_vbep_db_state_negative_act  TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_sline_db                    TYPE if_atp_data_access=>tt_vbep_db_state_data,
          lt_item_key                    TYPE tbl_atp_item_key_wo_subitem,
          lt_sline_data_exp              TYPE if_atp_data_access=>tt_vbep_db_state_data.


    lt_sline_db = VALUE #( atpcat = 'VC'
                           ( delnr = '1' delps = '10' delet = '1' )
                           ( delnr = '1' delps = '10' delet = '2' )
                           ( delnr = '42' delps = '40' delet = '1' ) ).

    lo_document_data_provider->set_slines( slines = lt_sline_db ).

    lt_item_key = VALUE #( atpcat = 'VC'
                           ( delnr = '1' delps = '10' )
                           ( delnr = '2' delps = '10' ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_db_slines_for_items(
      EXPORTING
        it_item_key          = lt_item_key
      IMPORTING
        et_scheduleline_data = DATA(lt_sline_data_act)
    ).

    cl_atp_buffer_manager=>get_vbep_db_state_buffer( )->get_all(
      IMPORTING
        et_data          = DATA(lt_vbep_db_state_data_act)
        et_negative_data = DATA(lt_vbep_db_state_neg_data_act)
    ).

    lt_sline_data_exp = VALUE #( atpcat = 'VC'
                           ( delnr = '1' delps = '10' delet = '1' )
                           ( delnr = '1' delps = '10' delet = '2' ) ).

    FIELD-SYMBOLS: <lt_vbep_db_state_act>     TYPE if_atp_data_access=>tt_vbep_db_state_data,
                   <lt_vbep_db_state_neg_act> TYPE ANY TABLE.

    ASSIGN lt_vbep_db_state_data_act->* TO <lt_vbep_db_state_act>.
    ASSIGN lt_vbep_db_state_neg_data_act->* TO <lt_vbep_db_state_neg_act>.

    lt_vbep_db_state_buffer_act = CORRESPONDING #( <lt_vbep_db_state_act> ).
    lt_vbep_db_state_negative_act = CORRESPONDING #( <lt_vbep_db_state_neg_act> ).

    lt_vbep_db_state_data_in_buf = VALUE #( atpcat = 'VC'
                                     ( delnr = '1' delps = '10' delet = '1' )
                                     ( delnr = '1' delps = '10' delet = '2' )
                                   ).

    lt_vbep_db_state_data_negative = VALUE #( ( atpcat = 'VC' delnr = '2' delps = '10' ) ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_sline_data_act
        it_exp = lt_sline_data_exp
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_vbep_db_state_buffer_act
        it_exp = lt_vbep_db_state_data_in_buf
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_vbep_db_state_negative_act
        it_exp = lt_vbep_db_state_data_negative
    ).

  ENDMETHOD.

  METHOD convert_appl_buf_to_item_data.

    DATA:
      lt_item_key               TYPE tbl_atp_item_key_wo_subitem,
      lt_xvbap                  TYPE va_vbapvb_t,
      lt_yvbap                  TYPE va_vbapvb_t,
      lt_vbap                   TYPE vbap_t,
      lt_item_data              TYPE if_atp_data_access=>tt_vbap_db_state_data,
      lt_item_data_exp          TYPE if_atp_data_access=>tt_vbap_db_state_data,
      lo_document_data_provider TYPE REF TO td_atp_document_data_provider.

    lo_document_data_provider = NEW #(  ).
    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    lt_item_key = VALUE #( atpcat = 'VC' delnr = '0000004711'
                              ( delps = '000010' ) ).

    lt_vbap = VALUE #(  vbeln = '0000004711' original_plant = 'VBAP'
                          ( posnr = '000010' )
                          ( posnr = '000020' ) ).

    lt_yvbap = VALUE #( vbeln = '0000004711' original_plant = 'YYYY'
                          ( posnr = '000010' )
                          ( posnr = '000020' )
                          ( posnr = '000030' )  ).

    lt_xvbap = VALUE #( vbeln = '0000004711' original_plant = 'XXXX'
                          ( posnr = '000010' )
                          ( posnr = '000020' )
                          ( posnr = '000030' )
                          ( posnr = '000040' )  ).


    lt_item_data_exp = VALUE #( atpcat = 'VC' delnr = '0000004711'
                                  ( delps = '000010' original_plant = 'VBAP'  )
                                  ( delps = '000020' original_plant = 'VBAP')
                                  ( delps = '000030' original_plant = 'YYYY' )
                                  ( delps = '000040' original_plant = 'XXXX' )  ).

    f_cut->convert_appl_buf_to_item_data(
      EXPORTING
        it_item_key  = lt_item_key
        it_xvbap     = lt_xvbap
        it_yvbap     = lt_yvbap
        it_vbap      = lt_vbap
      IMPORTING
        et_item_data = lt_item_data
    ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_item_data
        it_exp = lt_item_data_exp
    ).

  ENDMETHOD.


  METHOD negative_keys_from_db.

    DATA:
      lo_document_data_provider TYPE REF TO td_atp_document_data_provider,
      lt_items_db               TYPE if_atp_data_access=>tt_vbap_db_state_data,
      lt_main_item_key          TYPE tbl_atp_item_key_wo_subitem,
      lt_item_data_act          TYPE if_atp_order_info_data_providr=>tt_item,
      lt_item_data_exp          TYPE if_atp_order_info_data_providr=>tt_item.

    lo_document_data_provider = NEW #(  ).
    f_cut = NEW cl_atp_data_access( io_document_data_provider = lo_document_data_provider ).

    "Set test data
    lt_items_db = VALUE #( atpcat = 'VC'
                           ( delnr = '42' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    lo_document_data_provider->set_items( items = lt_items_db ).

    lt_main_item_key = VALUE #( atpcat = 'VC'
                                ( delnr = '1'  delps = '10' )
                                ( delnr = '42' delps = '10' )
                                ( delnr = '42' delps = '40' )
                                ( delnr = '42' delps = '70' ) ).

    lt_item_data_exp = VALUE #( atpcat = 'VC'
                                ( delnr = '42' delps = '10' uepos = ''   substitution_status = cl_atp_abc_c=>item_status-abc_inactive ) ).

    " Call method under test
    f_cut->if_atp_data_access~get_item_data_before_check(
      EXPORTING
        it_item_key  = lt_main_item_key
      IMPORTING
        et_item_data = lt_item_data_act ).

    f_cut->if_atp_data_access~get_item_data_before_check(
      EXPORTING
        it_item_key  = lt_main_item_key
      IMPORTING
        et_item_data = lt_item_data_act ).

    th_atp_coordinator=>assert_table_equals(
      EXPORTING
        it_act = lt_item_data_act
        it_exp = lt_item_data_exp ).

  ENDMETHOD.

  METHOD t010_get_product_sales_data.

    DATA:
      lt_product_sales_data_key TYPE if_atp_pac_db=>tt_product_sales_data_key,
      lt_product_sales_data_exp TYPE if_atp_pac_db=>tt_product_sales_data.

    DATA(lo_masterdata_db) = NEW td_atp_pac_db_masterdata(  ).

    f_cut = NEW cl_atp_data_access( io_masterdata_db   = lo_masterdata_db ).


    lt_product_sales_data_exp = VALUE #( product = 'AUNIT_ATP' delivery_unit_uom = 'EA'
                                          ( sales_organization = 'AUT1' distribution_channel = 'AA' item_category_group = 'NORM' )
                                          ( sales_organization = 'AUT1' distribution_channel = 'ZZ' item_category_group = 'ABCD' )
                                          ( sales_organization = 'AUT2' distribution_channel = 'BB' item_category_group = 'LUMF' )
                                        ).

    lt_product_sales_data_key = CORRESPONDING #( lt_product_sales_data_exp ).

    lo_masterdata_db->set_content( EXPORTING it_product_sales_data = lt_product_sales_data_exp ).


    f_cut->if_atp_data_access~get_product_sales_data(
      EXPORTING
        it_product_sales_data_key = lt_product_sales_data_key
      IMPORTING
        et_product_sales_data     = DATA(lt_product_sales_data_act)
    ).

    th_atp_table_assert=>equals( EXPORTING it_act = lt_product_sales_data_act it_exp = lt_product_sales_data_exp ).

    DELETE lt_product_sales_data_key INDEX 2.
    DELETE lt_product_sales_data_exp INDEX 2.

    f_cut->if_atp_data_access~get_product_sales_data(
      EXPORTING
        it_product_sales_data_key = lt_product_sales_data_key
      IMPORTING
        et_product_sales_data     = lt_product_sales_data_act
    ).

    th_atp_table_assert=>equals( EXPORTING it_act = lt_product_sales_data_act it_exp = lt_product_sales_data_exp ).

  ENDMETHOD.

  METHOD t011_is_sd_merge_active.

    DATA(lo_sd_dbsel_cust) = NEW td_atp_sd_dbsel_cust( ).

    f_cut = NEW cl_atp_data_access( io_sd_dbsel_cust = lo_sd_dbsel_cust ).

    "Initial State: Empty
    DATA(lv_active) = f_cut->if_atp_data_access~is_sd_merge_active( ).
    cl_aunit_assert=>assert_initial( act = lv_active ).

    "Set to active
    lo_sd_dbsel_cust->mv_sd_merge_active = abap_true.

    lv_active = f_cut->if_atp_data_access~is_sd_merge_active( ).
    cl_aunit_assert=>assert_equals( exp = abap_true act = lv_active ).

  ENDMETHOD.


  METHOD vbap_db_state_field_in_bop.

    DATA:
      ls_vbap_db_state      TYPE if_atp_data_access=>ts_vbap_db_state_data,
      ls_atp_bob_order_data TYPE atp_bop_order_data,
      lo_struc_descriptor   TYPE REF TO cl_abap_structdescr,
      lv_error              TYPE boole_d.

    "Get Data
    lo_struc_descriptor ?= cl_abap_typedescr=>describe_by_data( p_data = ls_vbap_db_state ).
    DATA(lt_vbap_db_state_components) = th_atp_table_assert=>get_all_components( io_structure = lo_struc_descriptor ).

    FREE lo_struc_descriptor.

    lo_struc_descriptor ?= cl_abap_typedescr=>describe_by_data( p_data = ls_atp_bob_order_data ).
    DATA(lt_atp_bop_components) = th_atp_table_assert=>get_all_components( io_structure = lo_struc_descriptor ).

    "Compare structures - DB_State is a subset of BOP Structure
    LOOP AT lt_vbap_db_state_components ASSIGNING FIELD-SYMBOL(<ls_vbap_db_state_component>).
      READ TABLE lt_atp_bop_components
        TRANSPORTING NO FIELDS
        WITH TABLE KEY
          name = <ls_vbap_db_state_component>-name.
      IF sy-subrc NE 0.
        lv_error = abap_true.
        CONCATENATE <ls_vbap_db_state_component>-name ' missing in structure ATP_BOP_ODER_DATA' INTO DATA(lv_error_message).
        cl_aunit_assert=>fail( EXPORTING msg = lv_error_message level = if_aunit_constants=>severity-medium quit = if_aunit_constants=>quit-no ).
      ENDIF.
    ENDLOOP.

    "Additional Information what else to adapt
    lv_error_message = 'Check CL_ATP_BOP_DB_TRANSACTIONAL->READ_ORDER_DATA_FROM_ITEM_KEYS and CDS Views ATPC_CDS_UNION, ATPC_CDS_VBEP'.
    cl_aunit_assert=>assert_initial( EXPORTING act = lv_error msg = lv_error_message ).

  ENDMETHOD.

ENDCLASS.