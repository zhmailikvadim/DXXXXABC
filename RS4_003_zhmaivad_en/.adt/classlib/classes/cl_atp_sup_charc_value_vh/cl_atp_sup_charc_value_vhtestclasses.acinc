CLASS tc_atp_sup_charc_value_vh DEFINITION DEFERRED.
CLASS cl_atp_sup_charc_value_vh DEFINITION LOCAL FRIENDS tc_atp_sup_charc_value_vh.

CLASS tc_atp_sup_charc_value_vh DEFINITION FINAL FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS.
  PROTECTED SECTION.
    TYPES charc_values_vh_entries TYPE STANDARD TABLE OF c_supprotcharcvaluevh.

  PRIVATE SECTION.
    DATA: cut TYPE REF TO cl_atp_sup_charc_value_vh.

    METHODS:
      check_charc_value              FOR TESTING RAISING cx_static_check,
      check_charc_value_no_found     FOR TESTING RAISING cx_static_check,
      get_main_catalog_path          FOR TESTING RAISING cx_static_check,
      get_main_catalog_paths         FOR TESTING RAISING cx_static_check,
      update_filter_range            FOR TESTING RAISING cx_static_check,
      update_filter_range_empty      FOR TESTING RAISING cx_static_check,
      update_filter_range_empty_line FOR TESTING RAISING cx_static_check,
      check_charc_value_no_equal     FOR TESTING RAISING cx_static_check,
      select                         FOR TESTING RAISING cx_static_check,

      mock_get_charc_value_help_path
        IMPORTING
          charc_value_utility TYPE REF TO cl_atp_charc_value_utility,
      mock_get_charc_value_help_data
        IMPORTING
          charc_value         TYPE string
          charc_value_utility TYPE REF TO cl_atp_charc_value_utility
          et_value            TYPE tbl_atp_charc_value_value_help,
      mock_paging
        IMPORTING
          td_request TYPE REF TO if_rap_query_request,
      mock_query_filter
        IMPORTING
          td_request TYPE REF TO if_rap_query_request
        RAISING
          cx_rap_query_filter_no_range,
      mock_request
        IMPORTING
          td_request TYPE REF TO if_rap_query_request,
      mock_response
        IMPORTING
          td_response TYPE REF TO if_rap_query_response
          results     TYPE charc_values_vh_entries.
ENDCLASS.


CLASS tc_atp_sup_charc_value_vh IMPLEMENTATION.

  METHOD select.

    " Given
    DATA(td_request) = CAST if_rap_query_request( cl_abap_testdouble=>create( 'if_rap_query_request' ) ).
    mock_request( td_request ).
    mock_paging( td_request ).
    mock_query_filter( td_request ).

    DATA(td_response) = CAST if_rap_query_response( cl_abap_testdouble=>create( 'if_rap_query_response' ) ).
    mock_response( td_response = td_response
                   results     = CORRESPONDING charc_values_vh_entries( VALUE tbl_atp_charc_value_value_help( ) MAPPING charcvalue            = prodalloccharc
                                                                                                                        charcvaluedescription = prodalloccharcdesc ) ).
    cut = NEW #(  ).

    " When
    cut->if_rap_query_provider~select( io_request  = td_request
                                       io_response = td_response ).

    " Then
    cl_abap_testdouble=>verify_expectations( td_request ).
    cl_abap_testdouble=>verify_expectations( td_response ).

  ENDMETHOD.

  METHOD check_charc_value.

    " Given
    DATA charc_value TYPE string VALUE 'charc_value'.

    DATA(td_charc_value_utility) = CAST cl_atp_charc_value_utility( cl_abap_testdouble=>create( 'cl_atp_charc_value_utility' ) ).

    mock_get_charc_value_help_path( td_charc_value_utility ).

    mock_get_charc_value_help_data( charc_value_utility = td_charc_value_utility
                                    charc_value         = charc_value
                                    et_value            = VALUE tbl_atp_charc_value_value_help( ( prodalloccharc = charc_value ) ) ).
    cut = NEW #( charc_utility = td_charc_value_utility ).

    " When
    cut->check_charc_value( EXPORTING characteristic_uuid     = VALUE #(  )
                                      charc_value             = charc_value
                            IMPORTING vh_value_found          = DATA(vh_value_found)
                                      vh_existence_check_type = DATA(vh_existence_check_type) ).

    " Then
    cl_abap_unit_assert=>assert_true( vh_value_found ).
    cl_abap_unit_assert=>assert_initial(  vh_existence_check_type ).

  ENDMETHOD.

  METHOD check_charc_value_no_equal.

    " Given
    DATA charc_value TYPE string VALUE '01'.

    DATA(td_charc_value_utility) = CAST cl_atp_charc_value_utility( cl_abap_testdouble=>create( 'cl_atp_charc_value_utility' ) ).

    mock_get_charc_value_help_path( td_charc_value_utility ).

    mock_get_charc_value_help_data( charc_value_utility = td_charc_value_utility
                                    charc_value         = charc_value
                                    et_value            = VALUE tbl_atp_charc_value_value_help( ( prodalloccharc = '1' ) ) ).
    cut = NEW #( charc_utility = td_charc_value_utility ).

    " When
    cut->check_charc_value( EXPORTING characteristic_uuid     = VALUE #(  )
                                      charc_value             = charc_value
                            IMPORTING vh_value_found          = DATA(vh_value_found)
                                      vh_existence_check_type = DATA(vh_existence_check_type) ).

    " Then
    cl_abap_unit_assert=>assert_false( vh_value_found ).
    cl_abap_unit_assert=>assert_initial( act = vh_existence_check_type ).

  ENDMETHOD.

  METHOD check_charc_value_no_found.

    " Given
    DATA charc_value TYPE string VALUE 'charc_value'.

    DATA(td_charc_value_utility) = CAST cl_atp_charc_value_utility( cl_abap_testdouble=>create( 'cl_atp_charc_value_utility' ) ).

    mock_get_charc_value_help_path( td_charc_value_utility ).

    mock_get_charc_value_help_data( charc_value_utility = td_charc_value_utility
                                    charc_value         = charc_value
                                    et_value            = VALUE tbl_atp_charc_value_value_help( ) ).
    cut = NEW #( charc_utility = td_charc_value_utility ).

    " When
    cut->check_charc_value( EXPORTING characteristic_uuid     = VALUE #(  )
                                      charc_value             = charc_value
                            IMPORTING vh_value_found          = DATA(vh_value_found)
                                      vh_existence_check_type = DATA(vh_existence_check_type) ).

    " Then
    cl_abap_unit_assert=>assert_false( vh_value_found ).
    cl_abap_unit_assert=>assert_initial( act = vh_existence_check_type ).

  ENDMETHOD.

  METHOD get_main_catalog_path.
    cut = NEW #(  ).

    cl_abap_unit_assert=>assert_equals( act = cut->get_main_catalog_path( catalog_paths = VALUE #( ( prodalloccharcctlgpathuuid = 1 ) ) )
                                        exp = VALUE pactlg_path( prodalloccharcctlgpathuuid = 1 ) ).
  ENDMETHOD.

  METHOD get_main_catalog_paths.
    " Given
    DATA(td_atp_sup_pac_catalog_dba) = CAST cl_atp_sup_pac_catalog_dba( cl_abap_testdouble=>create( 'cl_atp_sup_pac_catalog_dba' ) ).
    cl_abap_testdouble=>configure_call( td_atp_sup_pac_catalog_dba
                                        )->ignore_all_parameters(
                                        )->returning( VALUE pactlg_pathref( client = sy-mandt prodalloccharcctlgpathuuid = 2 basecharccatalogpathuuid = 2 ) ).

    td_atp_sup_pac_catalog_dba->read_pathref_main_catalog( catalogpath_uuid = '1' ).

    cut = NEW #( sup_pac_catalog_dba = td_atp_sup_pac_catalog_dba ).

    " When
    DATA(catalog_path) = cut->get_main_catalog_path( VALUE #( ( prodalloccharcctlgpathuuid = 1 prodalloccharcctlgpathintid = 1 prodalloccharcctlgparpathintid = 1 prodalloccharccatalogtype = '99' )
                                                              ( prodalloccharcctlgpathuuid = 2 prodalloccharcctlgpathintid = 2 prodalloccharcctlgparpathintid = 2 ) ) ).
    " Then
    cl_abap_unit_assert=>assert_equals( act = catalog_path
                                        exp = VALUE pactlg_path( prodalloccharcctlgpathuuid = 2 prodalloccharcctlgpathintid = 2 prodalloccharcctlgparpathintid = 2 ) ).
  ENDMETHOD.

  METHOD update_filter_range.
    "Given
    DATA(charc_value_filter)      = VALUE /iwbep/t_cod_select_options( ( sign = 'I' option = 'EQ' low = |charc_value| ) ).
    DATA(charc_value_desc_filter) = VALUE /iwbep/t_cod_select_options( ( sign = 'I' option = 'EQ' low = |charc_value_desc| ) ).
    DATA(charc_path_uuid_filter)  = VALUE /iwbep/t_cod_select_options( ( sign = 'I' option = 'EQ' low = |characteristic_uuid| ) ).

    DATA(filter_range) = VALUE if_rap_query_filter=>tt_name_range_pairs( ( name = 'SUPPROTCHARCCTLGPATHUUID' range = charc_path_uuid_filter )
                                                                         ( name = 'CHARCVALUE'               range = charc_value_filter )
                                                                         ( name = 'CHARCVALUEDESCRIPTION'    range = charc_value_desc_filter ) ).
    "When
    NEW cl_atp_sup_charc_value_vh(  )->update_filter_range( IMPORTING charc_value_sel_opt      = DATA(charc_value_sel_opt)
                                                                      charc_value_desc_sel_opt = DATA(charc_value_desc_sel_opt)
                                                            CHANGING  filter_range             = filter_range ).
    "Then
    cl_abap_unit_assert=>assert_equals( act = charc_value_sel_opt
                                        exp = charc_value_filter ).
    cl_abap_unit_assert=>assert_equals( act = charc_value_desc_sel_opt
                                        exp = charc_value_desc_filter ).
    cl_abap_unit_assert=>assert_equals( act = filter_range
                                        exp = VALUE if_rap_query_filter=>tt_name_range_pairs( ( name = 'ProdAllocCharcCtlgPathUUID' range = charc_path_uuid_filter )
                                                                                              ( name = 'CHARCVALUE'                 range = charc_value_filter )
                                                                                              ( name = 'CHARCVALUEDESCRIPTION'      range = charc_value_desc_filter ) ) ).
  ENDMETHOD.

  METHOD update_filter_range_empty.
    "Given
    DATA(filter_range) = VALUE if_rap_query_filter=>tt_name_range_pairs( ).
    "When
    NEW cl_atp_sup_charc_value_vh(  )->update_filter_range( IMPORTING charc_value_sel_opt      = DATA(charc_value_sel_opt)
                                                                      charc_value_desc_sel_opt = DATA(charc_value_desc_sel_opt)
                                                            CHANGING  filter_range             = filter_range ).
    "Then
    cl_abap_unit_assert=>assert_initial( charc_value_sel_opt ).
    cl_abap_unit_assert=>assert_initial( charc_value_desc_sel_opt ).
    cl_abap_unit_assert=>assert_initial( filter_range ).
  ENDMETHOD.

  METHOD update_filter_range_empty_line.
    "Given
    DATA(filter_range) = VALUE if_rap_query_filter=>tt_name_range_pairs( (  ) ).
    "When
    NEW cl_atp_sup_charc_value_vh(  )->update_filter_range( IMPORTING charc_value_sel_opt      = DATA(charc_value_sel_opt)
                                                                      charc_value_desc_sel_opt = DATA(charc_value_desc_sel_opt)
                                                            CHANGING  filter_range             = filter_range ).
    "Then
    cl_abap_unit_assert=>assert_initial( charc_value_sel_opt ).
    cl_abap_unit_assert=>assert_initial( charc_value_desc_sel_opt ).
    cl_abap_unit_assert=>assert_equals( act = filter_range
                                        exp = VALUE if_rap_query_filter=>tt_name_range_pairs( (  ) ) ).
  ENDMETHOD.


  METHOD mock_get_charc_value_help_path.

    cl_abap_testdouble=>configure_call( charc_value_utility
                                        )->ignore_all_parameters( ).
    charc_value_utility->get_charc_value_help_path( it_filter_select_options = VALUE #( ) ).

  ENDMETHOD.


  METHOD mock_get_charc_value_help_data.

    cl_abap_testdouble=>configure_call( charc_value_utility
                                        )->set_parameter( name  ='ET_VALUE'
                                                          value = et_value ).

    DATA(charc_value_filter) = VALUE /iwbep/t_cod_select_options( ( sign = 'I' option = 'EQ' low = charc_value ) ).

    charc_value_utility->get_charc_value_help_data( is_catalog_path  = VALUE #( )
                                                    is_paging        = VALUE #( top  = 1 )
                                                    it_id_selopt     = CORRESPONDING #( charc_value_filter )
                                                    iv_has_count     = abap_false
                                                    iv_selopt_and    = abap_true
                                                    iv_no_conversion = abap_true ).

  ENDMETHOD.


  METHOD mock_paging.

    DATA(td_query_paging) = CAST if_rap_query_paging( cl_abap_testdouble=>create( 'if_rap_query_paging' ) ).
    cl_abap_testdouble=>configure_call( td_request )->returning( td_query_paging ).
    td_request->get_paging( ).

    cl_abap_testdouble=>configure_call( td_query_paging )->returning( 1 )->and_expect( )->is_called_once( ).
    td_request->get_paging( )->get_page_size( ).

    cl_abap_testdouble=>configure_call( td_query_paging )->returning( 1 )->and_expect( )->is_called_once( ).
    td_request->get_paging( )->get_offset( ).

  ENDMETHOD.


  METHOD mock_query_filter.

    DATA(td_query_filter)  = CAST if_rap_query_filter( cl_abap_testdouble=>create( 'if_rap_query_filter' ) ).
    cl_abap_testdouble=>configure_call( td_request )->returning( td_query_filter ).
    td_request->get_filter( ).

    cl_abap_testdouble=>configure_call( td_query_filter )->returning( VALUE if_rap_query_filter=>tt_name_range_pairs(  ) )->and_expect( )->is_called_once( ).
    td_query_filter->get_as_ranges( ).

  ENDMETHOD.


  METHOD mock_request.

    cl_abap_testdouble=>configure_call( td_request )->returning( abap_true )->and_expect( )->is_called_times( 2 ).
    td_request->is_total_numb_of_rec_requested( ).

    cl_abap_testdouble=>configure_call( td_request )->returning( abap_true )->and_expect( )->is_never_called( ).
    td_request->is_data_requested( ).

  ENDMETHOD.


  METHOD mock_response.

    cl_abap_testdouble=>configure_call( td_response )->and_expect( )->is_called_once( ).
    td_response->set_data( results ).


    cl_abap_testdouble=>configure_call( td_response )->and_expect( )->is_called_once( ).
    td_response->set_total_number_of_records( 0 ).


  ENDMETHOD.

ENDCLASS.