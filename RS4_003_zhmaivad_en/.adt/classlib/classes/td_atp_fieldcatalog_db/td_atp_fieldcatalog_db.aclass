class TD_ATP_FIELDCATALOG_DB definition
  public
  inheriting from CL_ATP_FIELDCATALOG_DB
  create public
  for testing .

public section.

  methods SET_CATALOG_PATHS
    importing
      !IT_CATALOG_PATH type PACTLG_PATH_TAB .
  methods SET_VALUE_GROUPS
    importing
      !IT_VALUE_GROUP_VALUE_MAP type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_VALUE_MAP optional
      !IT_VALUE_GROUP_VALUE type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_VALUE optional
      !IT_VALUE_GROUP_PARENT type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_PARENT optional .
  methods SET_CATALOGS
    importing
      !IT_CATALOG type IF_ATP_FIELDCATALOG_DB=>TT_CATALOG .

  methods IF_ATP_FIELDCATALOG_DB~READ_ALL_PATH_REFS_FOR_CHARC
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_BASE_PATHS
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_INFO
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_INFO_BY_USETYPE
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_INFO_VIA_TYPE
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATHS
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATHS_BY
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_REF
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_REFS
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_REFS_BY
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_TEXT
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_CATALOG_TEXT
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_VALUE_FOR_VALUE_HELP
    redefinition .
  methods IF_ATP_FIELDCATALOG_DB~READ_VALUE_GROUPS
    redefinition .
protected section.

  data MT_CATALOG_PATH type PACTLG_PATH_TAB .
  data MT_VALUE_GROUP_VALUE_MAP type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_VALUE_MAP .
  data MT_VALUE_GROUP_VALUE type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_VALUE .
  data MT_VALUE_GROUP_PARENT type IF_ATP_DATA_ACCESS=>TT_VALUE_GROUP_PARENT .
  data MT_CATALOG type IF_ATP_FIELDCATALOG_DB=>TT_CATALOG .
private section.
ENDCLASS.



CLASS TD_ATP_FIELDCATALOG_DB IMPLEMENTATION.


  METHOD if_atp_fieldcatalog_db~read_all_path_refs_for_charc.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_base_paths.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info_by_usetype.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_info_via_type.

    CLEAR es_catalog_info.

    READ TABLE mt_catalog INTO es_catalog_info WITH KEY prodalloccharccatalogtype    = iv_catalog_type
                                                        prodalloccharccatalogusetype = iv_catalog_use_type.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_paths.

    LOOP AT it_catalog_path_uuid ASSIGNING FIELD-SYMBOL(<ls_catalog_path_uuid>).

      READ TABLE mt_catalog_path ASSIGNING FIELD-SYMBOL(<ls_catalog_path>)
                                 WITH KEY prodalloccharcctlgpathuuid  = <ls_catalog_path_uuid>-charc_path_uuid.
      IF sy-subrc = 0.
        INSERT <ls_catalog_path> INTO TABLE et_catalog_path.
      ENDIF.

    ENDLOOP.

    LOOP AT it_catalog_path_int_id ASSIGNING FIELD-SYMBOL(<ls_catalog_path_int_id>).

      READ TABLE mt_catalog_path ASSIGNING <ls_catalog_path>
                                 WITH KEY prodalloccharcctlgpathintid  = <ls_catalog_path_int_id>-charc_path_int_id  ##PRIMKEY[PATH_ID].
      IF sy-subrc = 0.
        INSERT <ls_catalog_path> INTO TABLE et_catalog_path.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_paths_by.

    CLEAR et_catalog_path.

    LOOP AT mt_catalog_path ASSIGNING FIELD-SYMBOL(<ls_catalog_path>)
                            WHERE prodalloccharccatalogtype    = iv_catalog_type
                              AND prodalloccharccatalogusetype = iv_catalog_use_type.

      INSERT <ls_catalog_path> INTO TABLE et_catalog_path.
    ENDLOOP.

  ENDMETHOD.


  method IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_REF.
*SUPER->IF_ATP_FIELDCATALOG_DB~READ_CATALOG_PATH_REF(
*  EXPORTING
*    IV_CATALOG_PATH_REF_UUID = IV_CATALOG_PATH_REF_UUID
**  IMPORTING
**    es_catalog_path_ref      = es_catalog_path_ref
*       ).
  endmethod.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_refs_by.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_path_text.

  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_catalog_text.
    et_catalog_text = CORRESPONDING #( it_catalog_uuid ).
    MODIFY et_catalog_text FROM VALUE #( catalog_Text = 'Unit Test Text' ) TRANSPORTING catalog_Text WHERE catalog_Text IS INITIAL.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_value_for_value_help.
  ENDMETHOD.


  METHOD if_atp_fieldcatalog_db~read_value_groups.

    CLEAR: et_value_group,
           et_value_group_parent,
           et_value_group_value.

    LOOP AT mt_value_group_value_map ASSIGNING FIELD-SYMBOL(<ls_value_group_value_map>).

      READ TABLE it_catalog_path_uuid ASSIGNING FIELD-SYMBOL(<ls_catalog_path_uuid>)
                                      WITH KEY charc_path_uuid = <ls_value_group_value_map>-value_group_path_uuid.
      IF sy-subrc = 0.
        INSERT <ls_value_group_value_map> INTO TABLE et_value_group.
      ENDIF.

    ENDLOOP.

    LOOP AT mt_value_group_value ASSIGNING FIELD-SYMBOL(<ls_value_group_value>).

      READ TABLE it_catalog_path_uuid ASSIGNING <ls_catalog_path_uuid>
                                      WITH KEY charc_path_uuid = <ls_value_group_value>-group_path_uuid.
      IF sy-subrc = 0.
        INSERT <ls_value_group_value> INTO TABLE et_value_group_value.
      ENDIF.

    ENDLOOP.

    LOOP AT mt_value_group_parent ASSIGNING FIELD-SYMBOL(<ls_value_group_parent>).

      READ TABLE et_value_group_value ASSIGNING <ls_value_group_value>
                                      WITH KEY group_uuid = <ls_value_group_parent>-group_uuid.
      IF sy-subrc = 0.
        INSERT <ls_value_group_parent> INTO TABLE et_value_group_parent.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.


  METHOD set_catalogs.
    mt_catalog = it_catalog.
  ENDMETHOD.


  METHOD set_catalog_paths.

    mt_catalog_path = it_catalog_path.

  ENDMETHOD.


  METHOD set_value_groups.
    mt_value_group_value_map = it_value_group_value_map.
    mt_value_group_value     = it_value_group_value.
    mt_value_group_parent    = it_value_group_parent.
  ENDMETHOD.
ENDCLASS.