CLASS zcl_sd_sto_process_base DEFINITION
  PUBLIC
  ABSTRACT
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_sd_sto_process_handler.
    METHODS constructor
      IMPORTING
        it_bsart               TYPE zif_sd_sto_ud_const=>mtyp_t_bsart             OPTIONAL    "
        iv_ekorg               TYPE zif_sd_sto_ud_const=>mtyp_ekorg               OPTIONAL    "
        it_ekgrp               TYPE zif_sd_sto_ud_const=>mtyp_t_ekgrp             OPTIONAL
        it_sto_ud              TYPE zif_sd_sto_ud_const=>mtyp_t_sto_ud            OPTIONAL
        it_ebeln               TYPE zif_sd_sto_ud_const=>mtyp_t_ebeln             OPTIONAL
        it_werks_r             TYPE zif_sd_sto_ud_const=>mtyp_t_werks_r           OPTIONAL    "
        it_lgort               TYPE zif_sd_sto_ud_const=>mtyp_t_lgort             OPTIONAL
        it_werks_s             TYPE zif_sd_sto_ud_const=>mtyp_t_werks_s           OPTIONAL
        it_bsgru               TYPE zif_sd_sto_ud_const=>mtyp_t_bsgru             OPTIONAL
        it_erdat               TYPE zif_sd_sto_ud_const=>mtyp_t_erdat             OPTIONAL    "
        it_ernam               TYPE zif_sd_sto_ud_const=>mtyp_t_ernam             OPTIONAL
        iv_days_from_gr        TYPE zif_sd_sto_ud_const=>mtyp_days_from_gr        OPTIONAL
        iv_days_from_gi        TYPE zif_sd_sto_ud_const=>mtyp_days_from_gi        OPTIONAL
        iv_is_search_by_ud_sto TYPE zif_sd_sto_ud_const=>mtyp_is_search_by_ud_sto OPTIONAL
        iv_sto_extra_indicator TYPE zif_sd_sto_ud_const=>mtyp_sto_extra_indicator OPTIONAL.

protected section.

  types:
    mtyp_t_sto_ud_log TYPE SORTED TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE KEY under_delivered_sto under_delivered_sto_item .
  types:
    BEGIN OF mtyp_s_pur_order_key,
        ebeln TYPE I_PurchaseOrderAPI01-PurchaseOrder,
        ebelp TYPE I_PurchaseOrderItemAPI01-PurchaseOrderItem,
      END OF mtyp_s_pur_order_key .
  types:
    BEGIN OF mtyp_s_pur_order_key_del,
        ebeln TYPE I_PurchaseOrderAPI01-PurchaseOrder,
        ebelp TYPE I_PurchaseOrderItemAPI01-PurchaseOrderItem,
        xblnr TYPE xblnr1,
      END OF mtyp_s_pur_order_key_del .
  types:
    mtyp_t_pur_order_key_del TYPE STANDARD TABLE OF mtyp_s_pur_order_key_del WITH KEY ebeln ebelp .
  types:
    BEGIN OF mtyp_s_sto_ud_header,
        ebeln            TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp            TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        xblnr            TYPE I_PurchaseOrderHistoryAPI01-DocumentReferenceID,
        ekorg            TYPE I_PurchaseOrderAPI01-PurchasingOrganization,
        bsart            TYPE I_PurchaseOrderAPI01-PurchaseOrderType,
        quant_short      TYPE I_PurchaseOrderHistoryAPI01-Quantity,
        validation_error TYPE string,
      END OF mtyp_s_sto_ud_header .
  types:
    BEGIN OF mtyp_s_sto_ud_header_2,
        ebeln            TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp            TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        outbound_dn      TYPE I_POSupplierConfirmationAPI01-DeliveryDocument,
        ekorg            TYPE I_PurchaseOrderAPI01-PurchasingOrganization,
        bsart            TYPE I_PurchaseOrderAPI01-PurchaseOrderType,
        quant_short      TYPE I_PurchaseOrderHistoryAPI01-Quantity,
        validation_error TYPE string,
      END OF mtyp_s_sto_ud_header_2 .
  types:
    mtyp_t_pur_order_key TYPE STANDARD TABLE OF mtyp_s_pur_order_key WITH KEY ebeln ebelp .
  types:
    BEGIN OF mtyp_s_pur_order_data,
        ebeln                  TYPE I_PurchaseOrderAPI01-PurchaseOrder,
        ebelp                  TYPE I_PurchaseOrderItemAPI01-PurchaseOrderItem,
        bukrs                  TYPE I_PurchaseOrderAPI01-CompanyCode,
        ihrez                  TYPE I_PurchaseOrderAPI01-CorrespncExternalReference,
        bsart                  TYPE I_PurchaseOrderAPI01-PurchaseOrderType,
        lifnr                  TYPE I_PurchaseOrderAPI01-Supplier,
        ekorg                  TYPE I_PurchaseOrderAPI01-PurchasingOrganization,
        ekgrp                  TYPE I_PurchaseOrderAPI01-PurchasingGroup,
        reswk                  TYPE I_PurchaseOrderAPI01-SupplyingPlant,
        adrnr                  TYPE I_PurchaseOrderAPI01-ManualSupplierAddressID,
        zz1_zsales_channel_pdh TYPE I_PurchaseOrderAPI01-zz1_zsales_channel_pdh,
        netpr                  TYPE I_PurchaseOrderItemAPI01-NetPriceAmount,
        matnr                  TYPE I_PurchaseOrderItemAPI01-Material,
        menge                  TYPE I_PurchaseOrderItemAPI01-OrderQuantity,
        meins                  TYPE I_PurchaseOrderItemAPI01-PurchaseOrderQuantityUnit,
        werks                  TYPE I_PurchaseOrderItemAPI01-Plant,
        umrez                  TYPE I_PurchaseOrderItemAPI01-OrderItemQtyToBaseQtyNmrtr,
        umren                  TYPE I_PurchaseOrderItemAPI01-OrderItemQtyToBaseQtyDnmntr,
        lmein                  TYPE I_PurchaseOrderItemAPI01-BaseUnit,
        ematn                  TYPE I_PurchaseOrderItemAPI01-ManufacturerMaterial,
        lgort                  TYPE I_PurchaseOrderItemAPI01-StorageLocation,
        txz01                  TYPE I_PurchaseOrderItemAPI01-PurchaseOrderItemText,
        ko_prctr               TYPE I_PurchaseOrderItemAPI01-ProfitCenter,
        idnlf                  TYPE I_PurchaseOrderItemAPI01-SupplierMaterialNumber,
      END OF mtyp_s_pur_order_data .
  types:
    mtyp_t_pur_order_data TYPE STANDARD TABLE OF mtyp_s_pur_order_data WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_material_sto_ud,
        ebeln TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        matnr TYPE I_Material-Material,
        maktx TYPE I_ProductDescription-ProductDescription,
      END OF mtyp_s_material_sto_ud .
  types:
    mtyp_t_material_sto_ud TYPE STANDARD TABLE OF mtyp_s_material_sto_ud WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_ekbe_pgi,
        ebeln TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        belnr TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryDocument,
        vgabe TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryDocumentType,
      END OF mtyp_s_ekbe_pgi .
  types:
    mtyp_t_ekbe_pgi TYPE STANDARD TABLE OF mtyp_s_ekbe_pgi WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_matdoc,
        mblnr TYPE I_MaterialDocumentHeader_2-MaterialDocument, " mkpf
        mjahr TYPE I_MaterialDocumentHeader_2-MaterialDocumentYear,
      END OF mtyp_s_matdoc .
  types:
    mtyp_t_matdoc TYPE STANDARD TABLE OF mtyp_s_matdoc WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_matdoc_data,
        mblnr TYPE I_MaterialDocumentHeader_2-MaterialDocument,
        mjahr TYPE I_MaterialDocumentHeader_2-MaterialDocumentYear,
        werks TYPE I_MaterialDocumentItem_2-Plant, "mseg
        lgort TYPE I_MaterialDocumentItem_2-StorageLocation,
        matnr TYPE I_MaterialDocumentItem_2-Material,
        menge TYPE I_MaterialDocumentItem_2-QuantityInBaseUnit,
        meins TYPE I_MaterialDocumentItem_2-MaterialBaseUnit,
      END OF mtyp_s_matdoc_data .
  types:
    mtyp_t_matdoc_data TYPE STANDARD TABLE OF mtyp_s_matdoc_data WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_matdoc_data_da,
        mblnr TYPE I_MaterialDocumentHeader_2-MaterialDocument,
        mjahr TYPE I_MaterialDocumentHeader_2-MaterialDocumentYear,
        zeile TYPE I_MaterialDocumentItem_2-materialdocumentitem,
        werks TYPE I_MaterialDocumentItem_2-Plant, "mseg
        lgort TYPE I_MaterialDocumentItem_2-StorageLocation,
        matnr TYPE I_MaterialDocumentItem_2-Material,
        menge TYPE I_MaterialDocumentItem_2-QuantityInBaseUnit,
        meins TYPE I_MaterialDocumentItem_2-MaterialBaseUnit,
        po    TYPE I_MaterialDocumentItem_2-purchaseorder,
        po_i  TYPE I_MaterialDocumentItem_2-purchaseorderitem,
      END OF mtyp_s_matdoc_data_da .
  types:
    mtyp_t_matdoc_data_da TYPE STANDARD TABLE OF mtyp_s_matdoc_data_da WITH DEFAULT KEY .
  types:
    BEGIN OF mtyp_s_delivery_key,
        vbeln TYPE I_DeliveryDocument-DeliveryDocument,
        posnr TYPE I_DeliveryDocumentItem-DeliveryDocumentItem,
      END OF mtyp_s_delivery_key .
  types:
    mtyp_t_delivery_keys TYPE STANDARD TABLE OF mtyp_s_delivery_key WITH KEY vbeln posnr .
  types:
    BEGIN OF mtyp_s_delivery,
        vbeln       TYPE I_DeliveryDocument-DeliveryDocument,
        posnr       TYPE I_DeliveryDocumentItem-DeliveryDocumentItem,
        quantity_su TYPE ebumng,
      END OF mtyp_s_delivery .
  types:
    mtyp_t_delivery TYPE STANDARD TABLE OF mtyp_s_delivery WITH KEY vbeln posnr .
  types:
    BEGIN OF mtyp_s_delivery_data,
        vbeln TYPE I_DeliveryDocument-DeliveryDocument,
        posnr TYPE I_DeliveryDocumentItem-DeliveryDocumentItem,
        werks TYPE I_DeliveryDocumentItem-Plant,
        lgort TYPE I_DeliveryDocumentItem-StorageLocation,
        bwart TYPE I_DeliveryDocumentItem-GoodsMovementType,
        meins TYPE I_DeliveryDocumentItem-BaseUnit,
        vrkme TYPE I_DeliveryDocumentItem-DeliveryQuantityUnit,
        wbstk TYPE I_DeliveryDocument-OverallGoodsMovementStatus,
      END OF mtyp_s_delivery_data .
  types:
    mtyp_t_deliveries_data TYPE STANDARD TABLE OF mtyp_s_delivery_data WITH DEFAULT KEY .
  types:
    mtyp_t_bapiret TYPE STANDARD TABLE OF bapireturn .    "bapiret2 .
  types:
    BEGIN OF mtyp_s_found_sto,
        ebeln       TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp       TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        xblnr       TYPE I_PurchaseOrderHistoryAPI01-DocumentReferenceID,
        short_quant TYPE I_PurchaseOrderHistoryAPI01-Quantity,
        bewtp       TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryCategory,
        belnr       TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryDocument,
      END OF mtyp_s_found_sto .
  types:
    BEGIN OF mtyp_s_linked_sto_dn,
        ebeln    TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrder,
        ebelp    TYPE I_PurchaseOrderHistoryAPI01-PurchaseOrderItem,
        xblnr    TYPE I_PurchaseOrderHistoryAPI01-DocumentReferenceID,
        quantity TYPE I_PurchaseOrderHistoryAPI01-Quantity,
        bewtp    TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryCategory,
        belnr    TYPE I_PurchaseOrderHistoryAPI01-PurchasingHistoryDocument,
        venum    TYPE I_HandlingUnitTP-HandlingUnitInternalID , " vekp
      END OF mtyp_s_linked_sto_dn .
  types:
    mtyp_t_linked_sto_dn TYPE STANDARD TABLE OF mtyp_s_linked_sto_dn WITH DEFAULT KEY .
  types:
    BEGIN OF MTYP_S_HU,
             objnr TYPE j_objnr,
         END OF mtyp_s_hu .
  types:
    MTYP_T_HU TYPE STANDARD TABLE OF mtyp_s_hu WITH KEY objnr .
  types:
    MTYP_T_HU_STAT TYPE STANDARD TABLE OF husstat WITH KEY objnr stat .
  types:
    BEGIN OF MTYP_S_DELIVERY_HU_STAT,
           vbeln TYPE vbeln_vl,
           posnr TYPE posnr_vl,
           venum TYPE venum,
           menge TYPE vemng,
           userst_t TYPE char4,
         END OF mtyp_s_delivery_hu_stat .
  types:
    MTYP_T_DELIVERY_HU_STAT TYPE STANDARD TABLE OF mtyp_s_delivery_hu_stat WITH KEY vbeln posnr .
  types:
    MTYP_T_STO_UD_MSG TYPE STANDARD TABLE OF zsd_t_sto_ud_msg .

  data MT_BSART type ZIF_SD_STO_UD_CONST=>MTYP_T_BSART .
  data MV_EKORG type ZIF_SD_STO_UD_CONST=>MTYP_EKORG .
  data MT_EKGRP type ZIF_SD_STO_UD_CONST=>MTYP_T_EKGRP .
  data MT_STO_UD type ZIF_SD_STO_UD_CONST=>MTYP_T_STO_UD .
  data MT_EBELN type ZIF_SD_STO_UD_CONST=>MTYP_T_EBELN .
  data MT_WERKS_R type ZIF_SD_STO_UD_CONST=>MTYP_T_WERKS_R .
  data MT_LGORT type ZIF_SD_STO_UD_CONST=>MTYP_T_LGORT .
  data MT_WERKS_S type ZIF_SD_STO_UD_CONST=>MTYP_T_WERKS_S .
  data MT_BSGRU type ZIF_SD_STO_UD_CONST=>MTYP_T_BSGRU .
  data MT_ERDAT type ZIF_SD_STO_UD_CONST=>MTYP_T_ERDAT .
  data MT_ERNAM type ZIF_SD_STO_UD_CONST=>MTYP_T_ERNAM .
  data MV_STO_EXTRA_INDICATOR type ZIF_SD_STO_UD_CONST=>MTYP_STO_EXTRA_INDICATOR .
  data MV_DAYS_FROM_GR type ZIF_SD_STO_UD_CONST=>MTYP_DAYS_FROM_GR .
  data MV_DAYS_FROM_GI type ZIF_SD_STO_UD_CONST=>MTYP_DAYS_FROM_GI .
  data MV_IS_SEARCH_BY_UD_STO type ZIF_SD_STO_UD_CONST=>MTYP_IS_SEARCH_BY_UD_STO .
  data MT_HM_1081 type ZPE_TT_HM_TABLE .
  data MT_HM_1087 type ZPE_TT_HM_TABLE .
  data MT_HM_876_BWART type ZPE_TT_HM_TABLE .
  data MV_HM_717_BWART_101 type BWART .
  data MV_HM_685_STO_INTER_ZU50 type ZPE_HM_FIELD .
  data MV_HM_685_STO_INTRA_ZU55 type ZPE_HM_FIELD .
  data MV_HM_685_STO_INTRA_ZU65 type ZPE_HM_FIELD .
  data MV_HM_685_STO_INTER_ZU60 type ZPE_HM_FIELD .
  data MV_HM_1042_LFART_ZEL type ZPE_HM_FIELD .
  constants MC_NO_DATA_FOUND_ERROR type STRING value 'Required data is not found' ##NO_TEXT.
  data:
    mt_sto_ud_logs TYPE STANDARD TABLE OF zsd_t_sto_ud_log .

  methods UPDATE_UD_STO_LOG
    importing
      !ITS_UD_STO_LOG type MTYP_T_STO_UD_LOG
      !IT_MESSAGES type MTYP_T_STO_UD_MSG optional
    raising
      ZCX_SD_STO_UD .
  methods GET_STO_UD_LOGS
    importing
      value(IV_STATUS) type ZSD_STO_PROCESS_STATUS
      !IV_PROCESS type ZSD_STO_UD_PROCESS
    returning
      value(RTS_STO_UD_LOGS) type MTYP_T_STO_UD_LOG .
  methods VLDT_PLANT_SLOC_EXIST_IN_HM
    raising
      ZCX_SD_STO_UD .
  methods UPDATE_UD_STO_MSG
    importing
      !IT_MESSAGES type MTYP_T_STO_UD_MSG .
private section.

  types:
    BEGIN OF mtyp_s_delivery_hu,
        venum    TYPE venum,
        vpobjkey TYPE c LENGTH 20,
        hu_item  TYPE vepos,
        menge    TYPE vemng,
        venum_hu TYPE c LENGTH 22,
      END OF mtyp_s_delivery_hu .
  types:
    mtyp_t_delivery_hu TYPE STANDARD TABLE OF mtyp_s_delivery_hu WITH DEFAULT KEY .

  data MV_ALT_BAPI_IBD_CREATE type ABAP_BOOL value ABAP_TRUE ##NO_TEXT.

  methods GET_PURCHASE_ORDERS_DATA
    importing
      !IT_PURCHASE_ORDER_KEYS type MTYP_T_PUR_ORDER_KEY
    returning
      value(RT_RESULT) type MTYP_T_PUR_ORDER_DATA .
  methods GET_DELIVERIES_DATA
    importing
      !IT_DELIVERY_KEYS type MTYP_T_DELIVERY_KEYS
    returning
      value(RT_RESULT) type MTYP_T_DELIVERIES_DATA .
  methods GET_MATERIALS_FROM_UD_STO
    importing
      !ITS_STO_UD_LOG type MTYP_T_STO_UD_LOG
    returning
      value(RT_MATERIALS_STO_UD) type MTYP_T_MATERIAL_STO_UD .
  methods CREATE_IBD_USING_ALT_BAPI
    importing
      !IS_STO_UD_LOG type ZSD_T_STO_UD_LOG
      !IS_PUR_ORDER_DATA type MTYP_S_PUR_ORDER_DATA
    exporting
      !ET_RETURN type MTYP_T_BAPIRET
      !EV_DELIVERY_NO type I_DELIVERYDOCUMENT-DELIVERYDOCUMENT .
  methods IS_INTRA_COMPANY_MOVEMENT
    importing
      !IV_SUPPLYING_PLANT type RESWK
      !IV_RECEIVING_PLANT type EWERK
    returning
      value(RV_RESULT) type ABAP_BOOL .
  methods GET_EKBE_BELNR_FOR_STO_CREATED
    importing
      !IT_PURCHASE_ORDER_KEYS type MTYP_T_PUR_ORDER_KEY
    returning
      value(RT_RESULT) type MTYP_T_EKBE_PGI .
  methods GET_EKBE_PGI_FOR_REFUSE_RETURN
    importing
      !IT_PURCHASE_ORDER_KEYS type MTYP_T_PUR_ORDER_KEY_DEL
    returning
      value(RT_RESULT) type MTYP_T_EKBE_PGI .
  methods GET_MATDOC_PUR_HIST_DATA
    importing
      !IT_MATDOC type MTYP_T_MATDOC
    returning
      value(RT_RESULT) type MTYP_T_MATDOC_DATA .
  methods VLDT_AND_GET_HU_REFUSAL_INFO_2   ##RELAX
    importing
      !IS_FOUND_STO type MTYP_S_STO_UD_HEADER_2
    returning
      value(RT_VENUM) type MTYP_T_LINKED_STO_DN .
  methods GET_OBJKEY   ##RELAX
    importing
      !IT_ITEMS type MTYP_T_DELIVERY
    returning
      value(RT_OBJKEY) type MTYP_T_DELIVERY_HU .
  methods GET_HU_INFO
    importing
      !IV_PROCESS type ZSD_STO_UD_PROCESS
      !IT_ITEMS type MTYP_T_DELIVERY
    returning
      value(RT_TABLE) type MTYP_T_DELIVERY_HU_STAT .
  methods GET_HU_STATUS
    importing
      !IT_HU type MTYP_T_HU
    returning
      value(RT_STAT) type MTYP_T_HU_STAT .
  methods GET_LATEST_GM_DOC_SD_FLOW
    importing
      !IV_VBELN type VBELN
    returning
      value(RS_VBFA) type I_SDDOCUMENTMULTILEVELPROCFLOW .
  methods GET_MATDOC_DOWN_ADJ
    importing
      !IT_MATDOC type MTYP_T_MATDOC
    returning
      value(RT_RESULT) type MTYP_T_MATDOC_DATA_DA .
ENDCLASS.



CLASS ZCL_SD_STO_PROCESS_BASE IMPLEMENTATION.


  METHOD constructor.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 18.03.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*

    IF iv_is_search_by_ud_sto = abap_true.
      IF it_sto_ud IS INITIAL.
        " UnderDelivered STO parameter is required to be filled
        MESSAGE e009(zsd_sto_ud).
      ENDIF.
    ELSEIF iv_is_search_by_ud_sto = abap_false AND ( it_bsart IS INITIAL OR iv_ekorg IS INITIAL OR it_werks_r IS INITIAL ).
      " STO Type, Pur.Org and Rec.Plant parameters are required to be filled
      MESSAGE e010(zsd_sto_ud).
    ENDIF.

    mt_bsart        = it_bsart       .
    mv_ekorg        = iv_ekorg       .
    mt_ekgrp        = it_ekgrp       .
    mt_sto_ud       = it_sto_ud      .
    mt_ebeln        = it_ebeln       .
    mt_werks_r      = it_werks_r     .
    mt_lgort        = it_lgort       .
    mt_werks_s      = it_werks_s     .
    mt_bsgru        = it_bsgru       .
    mt_erdat        = it_erdat       .
    mt_ernam        = it_ernam       .
    mv_days_from_gr = iv_days_from_gr.
    mv_days_from_gi = iv_days_from_gi.
    mv_is_search_by_ud_sto = iv_is_search_by_ud_sto.
    mv_sto_extra_indicator = iv_sto_extra_indicator.

    TRY.
        mt_hm_1081      = zcl_pe_hm_basic=>get_table( '1081' ).
        mt_hm_1087      = zcl_pe_hm_basic=>get_table( '1087' ).
        mt_hm_876_bwart = zcl_pe_hm_basic=>get_table( '876' ).
        mv_hm_685_sto_inter_zu50 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '009' ).
        mv_hm_685_sto_intra_zu55 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '010' ).
        mv_hm_685_sto_intra_zu65 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '012' ).
        mv_hm_685_sto_inter_zu60 = zcl_pe_hm_basic=>get_value( iv_id = '685'  iv_sequence = '011' ).
        mv_hm_1042_lfart_zel     = zcl_pe_hm_basic=>get_value( iv_id = '1042' iv_sequence = '001' ).
        mv_hm_717_bwart_101      = zcl_pe_hm_basic=>get_value( iv_id = '717'  iv_sequence = '001' ).

      CATCH zcx_pe_hm INTO DATA(lo_exception).
        MESSAGE lo_exception.
    ENDTRY.

  ENDMETHOD.


  METHOD create_ibd_using_alt_bapi.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    DATA   lt_komdlgn TYPE STANDARD TABLE OF komdlgn.
    DATA   lt_vbfs    TYPE STANDARD TABLE OF vbfs.
    DATA   lt_vbls    TYPE STANDARD TABLE OF vbls.

    DATA ls_vbsk    TYPE vbsk.
    DATA ls_komdlgn TYPE komdlgn.
    DATA ls_vbls    TYPE vbls.

    CLEAR: ev_delivery_no, et_return.

    ls_vbsk-mandt = sy-mandt.
    ls_vbsk-ernam = sy-uname.
    ls_vbsk-erdat = sy-datum.
    ls_vbsk-uzeit = sy-uzeit.

    IF mt_werks_r IS NOT INITIAL.
      DATA(ls_hm_sloc) = VALUE #( mt_hm_1087[ field1 = mt_werks_r[ 1 ]-low ] OPTIONAL ).
    ENDIF.

    ls_komdlgn-lfart = mv_hm_1042_lfart_zel.
    ls_komdlgn-matnr = is_pur_order_data-matnr.
    ls_komdlgn-werks = ls_hm_sloc-field1.
    ls_komdlgn-lfimg = is_sto_ud_log-quantity_short.
    ls_komdlgn-vrkme = is_pur_order_data-meins.
    ls_komdlgn-meins = is_pur_order_data-lmein.
    ls_komdlgn-vgbel = is_pur_order_data-ebeln.
    ls_komdlgn-vgpos = is_pur_order_data-ebelp.
    ls_komdlgn-ematn = is_pur_order_data-ematn.
    ls_komdlgn-vgtyp = 'V'.
    ls_komdlgn-kzazu = 'X'.

    ls_komdlgn-lifex = is_sto_ud_log-under_delivered_dn. "
    ls_komdlgn-verur = is_sto_ud_log-under_delivered_dn. "
    ls_komdlgn-lgort = ls_hm_sloc-field2.
    ls_komdlgn-lifnr = COND #( WHEN is_pur_order_data-reswk IS NOT INITIAL THEN is_pur_order_data-reswk ELSE is_pur_order_data-lifnr ).

    ls_komdlgn-kdmat = is_pur_order_data-idnlf.
    ls_komdlgn-spe_lifex_type = 'S'.
    ls_komdlgn-lfdat = sy-datum.
    ls_komdlgn-lfuhr = sy-uzeit.
    ls_komdlgn-wadat = sy-datum.
    ls_komdlgn-wauhr = sy-uzeit.
    ls_komdlgn-wadat_ist = sy-datum.

    APPEND ls_komdlgn TO lt_komdlgn.
    IF lt_komdlgn[] IS NOT INITIAL.
      CALL FUNCTION 'GN_DELIVERY_CREATE'
        EXPORTING
          vbsk_i        = ls_vbsk
        TABLES
          xkomdlgn      = lt_komdlgn
          xvbfs         = lt_vbfs
          xvbls         = lt_vbls
        EXCEPTIONS
          error_message = 1
          OTHERS        = 2.
    ENDIF.

    IF sy-subrc <> 0 OR line_exists( lt_vbfs[ msgty = 'E' ] ).
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      DATA: ls_return TYPE bapireturn.
      DATA(ls_vbfs) = VALUE #( lt_vbfs[ msgty = 'E' ] OPTIONAL ).
      CALL FUNCTION 'BALW_BAPIRETURN_GET'
        EXPORTING
          type       = ls_vbfs-msgty
          cl         = ls_vbfs-msgid
          number     = CONV symsgno( ls_vbfs-msgno )
          par1       = ls_vbfs-msgv1
          par2       = ls_vbfs-msgv2
          par3       = ls_vbfs-msgv3
          par4       = ls_vbfs-msgv4
        IMPORTING
          bapireturn = ls_return.
      APPEND ls_return TO et_return.
    ELSE.
      DATA(lv_index) = lines( lt_vbls ).
      READ TABLE lt_vbls INTO ls_vbls INDEX lv_index.     "#EC CI_SUBRC
      DATA(lv_vbeln) = ls_vbls-vbeln_lif.
      ev_delivery_no = lv_vbeln.
    ENDIF.

  ENDMETHOD.


  METHOD get_deliveries_data.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    DATA lt_delivery_keys_wo_posnr LIKE it_delivery_keys.
    DATA lt_delivery_keys_with_posnr LIKE it_delivery_keys.

    LOOP AT it_delivery_keys ASSIGNING FIELD-SYMBOL(<ls_delivery_key>).
      IF <ls_delivery_key>-posnr IS INITIAL AND <ls_delivery_key>-vbeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_delivery_keys_wo_posnr ASSIGNING FIELD-SYMBOL(<ls_delivery_wo_posnr>).
        <ls_delivery_wo_posnr> = CORRESPONDING #( <ls_delivery_key> ).
      ELSEIF  <ls_delivery_key>-posnr IS NOT INITIAL AND <ls_delivery_key>-vbeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_delivery_keys_with_posnr ASSIGNING FIELD-SYMBOL(<ls_delivery_with_posnr>).
        <ls_delivery_with_posnr> = CORRESPONDING #( <ls_delivery_key> ).
      ELSE.
        RETURN.
      ENDIF.
    ENDLOOP.

    IF lt_delivery_keys_wo_posnr IS NOT INITIAL.
      SELECT
        DeliveryDocument                               AS vbeln,
        DeliveryDocumentItem                           AS posnr,
        Plant                                          AS werks,
        StorageLocation                                AS lgort,
        GoodsMovementType                              AS bwart,
        BaseUnit                                       AS meins,
        DeliveryQuantityUnit                           AS vrkme,
        \_DeliveryDocument-OverallGoodsMovementStatus  AS wbstk
        FROM  i_deliverydocumentitem AS tab_lips
        INNER JOIN @lt_delivery_keys_wo_posnr AS itab ON itab~vbeln = tab_lips~DeliveryDocument
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC
    ENDIF.

    IF lt_delivery_keys_with_posnr IS NOT INITIAL.
      SELECT
        DeliveryDocument                               AS vbeln,
        DeliveryDocumentItem                           AS posnr,
        Plant                                          AS werks,
        StorageLocation                                AS lgort,
        GoodsMovementType                              AS bwart,
        BaseUnit                                       AS meins,
        DeliveryQuantityUnit                           AS vrkme,
        \_DeliveryDocument-OverallGoodsMovementStatus  AS wbstk
        FROM  i_deliverydocumentitem AS delivery_item
        INNER JOIN @lt_delivery_keys_with_posnr AS itab ON itab~vbeln = delivery_item~DeliveryDocument
                                                       AND itab~posnr = delivery_item~DeliveryDocumentItem
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC

    ENDIF.

  ENDMETHOD.


  METHOD get_ekbe_belnr_for_sto_created.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* konranar     | 13.11.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    CHECK it_purchase_order_keys IS NOT INITIAL.

    DO 3 TIMES.

      SELECT "#EC CI_SEL_NESTED
        PurchaseOrder AS ebeln,
        PurchaseOrderItem AS ebelp,
        PurchasingHistoryDocument AS belnr,
        PurchasingHistoryDocumentType AS vgabe,
        DocumentReferenceID  AS xblnr
        FROM i_purchaseorderhistoryapi01
        FOR ALL ENTRIES IN @it_purchase_order_keys
        WHERE PurchaseOrder = @it_purchase_order_keys-ebeln
        AND   PurchasingHistoryDocumentType = '8' "vgabe
        INTO CORRESPONDING FIELDS OF TABLE @rt_result.
      IF sy-subrc = 0.
        RETURN.
      ELSE.
        WAIT UP TO 1 SECONDS.
      ENDIF.

    ENDDO.

  ENDMETHOD.


  METHOD get_ekbe_pgi_for_refuse_return.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 18.08.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    IF it_purchase_order_keys IS NOT INITIAL.
      SELECT
        PurchaseOrder AS ebeln,
        PurchaseOrderItem AS ebelp,
        PurchasingHistoryDocument AS belnr,
        PurchasingHistoryDocumentType AS vgabe,
        DocumentReferenceID  AS xblnr
        FROM i_purchaseorderhistoryapi01
        FOR ALL ENTRIES IN @it_purchase_order_keys
        WHERE PurchaseOrder = @it_purchase_order_keys-ebeln
        AND DocumentReferenceID  = @it_purchase_order_keys-xblnr
        AND   PurchasingHistoryDocumentType = '1' "vgabe
        INTO CORRESPONDING FIELDS OF TABLE @rt_result.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  method GET_HU_INFO.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KONRANAR     | 27.10.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    IF it_items[] IS INITIAL.
      RETURN.
    ENDIF.

    SELECT DISTINCT                                  "#EC CI_SEL_NESTED
      hu_tab~HandlingUnitInternalID AS venum,
      hu_tab~HandlingUnitReferenceDocument AS vpobjkey,
      i_del_items~posnr,
      SUM( hu_tab~handlingunitquantity ) AS menge,
      CAST( hu_tab~HandlingUnitInternalID AS CHAR( 22 ) ) AS venum_hu
      FROM i_handlingunititemtp AS hu_tab
      INNER JOIN @it_items AS i_del_items ON hu_tab~HandlingUnitReferenceDocument = i_del_items~vbeln AND
                                             hu_tab~handlingunitrefdocumentitem = CONCAT( '0000', i_del_items~posnr )
      GROUP BY hu_tab~HandlingUnitInternalID, hu_tab~HandlingUnitReferenceDocument, i_del_items~posnr
      INTO TABLE @DATA(lt_result).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    DATA(lt_status) = get_hu_status( VALUE #( FOR <ls_line> IN lt_result
                                              ( objnr = <ls_line>-venum ) ) ).

    LOOP AT lt_result ASSIGNING FIELD-SYMBOL(<ls_result>).

      rt_table = VALUE #( BASE rt_table
                          ( vbeln = <ls_result>-vpobjkey
                            posnr = <ls_result>-posnr
                            menge = <ls_result>-menge
                            venum = <ls_result>-venum
                            userst_t = COND #( WHEN line_exists( lt_status[ objnr = |HU{ <ls_result>-venum }| ##WARN_OK
                                                                            stat  = zif_sd_sto_ud_const=>mc_hu_status-init
                                                                            inact = abap_false ] ) THEN zif_sd_sto_ud_const=>mc_hu_user_stat_t-init
                                               WHEN line_exists( lt_status[ objnr = |HU{ <ls_result>-venum }| ##WARN_OK
                                                                            stat  = zif_sd_sto_ud_const=>mc_hu_status-refu
                                                                            inact = abap_false ] ) THEN zif_sd_sto_ud_const=>mc_hu_user_stat_t-refu
                                               ELSE zif_sd_sto_ud_const=>mc_hu_user_stat_t-other ) ) ).

    ENDLOOP.

    DELETE rt_table WHERE userst_t = zif_sd_sto_ud_const=>mc_hu_user_stat_t-other.

    IF iv_process = zif_sd_sto_ud_const=>mc_process-refusal.
      DELETE rt_table WHERE userst_t = zif_sd_sto_ud_const=>mc_hu_user_stat_t-init.
    ELSE.
      DELETE rt_table WHERE userst_t = zif_sd_sto_ud_const=>mc_hu_user_stat_t-refu.
    ENDIF.

  endmethod.


  method GET_HU_STATUS.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KONRANAR     | 27.10.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    CHECK it_hu IS NOT INITIAL.

    DATA(lt_hu) = VALUE mtyp_t_hu( FOR <ls_line> IN it_hu
                                   ( objnr = |HU{ <ls_line>-objnr }| ) ).

    SORT lt_hu BY objnr.
    DELETE ADJACENT DUPLICATES FROM lt_hu COMPARING objnr.

    SELECT
      objnr,
      stat,
      inact,
      chgnr
      FROM zsd_i_rp_husstat
      FOR ALL ENTRIES IN @lt_hu
      WHERE objnr = @lt_hu-objnr
      INTO CORRESPONDING FIELDS OF TABLE @rt_stat  ##TOO_MANY_ITAB_FIELDS.
    IF sy-subrc <> 0.
      CLEAR: rt_stat.
    ENDIF.

  endmethod.


  METHOD get_latest_gm_doc_sd_flow.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KONRANAR     | 09.11.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    SELECT "#EC CI_SEL_NESTED
      PrecedingDocument,
      PrecedingDocumentItem,
      PrecedingDocumentCategory,
      SubsequentDocument,
      SubsequentDocumentItem,
      SubsequentDocumentCategory,
      MaterialDocumentYear,
      CreationDate,
      creationtime
      FROM i_sddocumentmultilevelprocflow WITH PRIVILEGED ACCESS
      WHERE PrecedingDocument = @iv_vbeln AND
            SubsequentDocumentCategory = 'R'
      ORDER BY CreationDate DESCENDING, creationtime DESCENDING, subsequentdocument DESCENDING
      INTO CORRESPONDING FIELDS OF @rs_vbfa
      UP TO 1 ROWS.
    ENDSELECT.
    IF sy-subrc <> 0.
      CLEAR: rs_vbfa.
    ENDIF.

  ENDMETHOD.


  METHOD GET_MATDOC_DOWN_ADJ.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KONRANAR     | 24.01.2023 | 26244 : defect T4MTEMP-80296             *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    CHECK it_matdoc IS NOT INITIAL.

    SELECT
    mat_doc~MaterialDocument AS mblnr,
    mat_doc~MaterialDocumentYear AS mjahr,
    mat_doc~materialdocumentitem AS ziele,
    purchase_history~Plant AS werks,
    mat_doc~StorageLocation AS lgort,
    purchase_history~material AS matnr,
    purchase_history~quantity AS menge,
    mat_doc~MaterialBaseUnit AS meins,
    mat_doc~purchaseorder AS po,
    mat_doc~purchaseorderitem AS po_i
    FROM i_purchaseorderhistoryapi01 AS purchase_history
    INNER JOIN i_materialdocumentitem_2 AS mat_doc ON mat_doc~MaterialDocument = purchase_history~PurchasingHistoryDocument
                                                 AND mat_doc~MaterialDocumentYear = purchase_history~PurchasingHistoryDocumentYear
                                                 AND mat_doc~MaterialDocumentItem = purchase_history~PurchasingHistoryDocumentItem
    FOR ALL ENTRIES IN @it_matdoc
    WHERE purchase_history~PurchasingHistoryDocument = @it_matdoc-mblnr
      AND purchase_history~PurchasingHistoryDocumentYear = @it_matdoc-mjahr
    INTO CORRESPONDING FIELDS OF TABLE @rt_result.
    IF sy-subrc = 0.
      RETURN.
    ENDIF.

  ENDMETHOD.


  METHOD get_matdoc_pur_hist_data.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    IF  it_matdoc IS NOT INITIAL.
      SELECT
      mat_doc~MaterialDocument AS mblnr,
      mat_doc~MaterialDocumentYear AS mjahr,
      purchase_history~Plant AS werks,
      mat_doc~StorageLocation AS lgort,
      purchase_history~material AS matnr,
      purchase_history~quantity AS menge,
      mat_doc~MaterialBaseUnit AS meins
      FROM i_purchaseorderhistoryapi01 AS purchase_history
      INNER JOIN i_materialdocumentitem_2 AS mat_doc ON mat_doc~MaterialDocument = purchase_history~PurchasingHistoryDocument
                                                   AND mat_doc~MaterialDocumentYear = purchase_history~PurchasingHistoryDocumentYear
                                                   AND mat_doc~MaterialDocumentItem = purchase_history~PurchasingHistoryDocumentItem
      FOR ALL ENTRIES IN @it_matdoc
      WHERE purchase_history~PurchasingHistoryDocument = @it_matdoc-mblnr
        AND purchase_history~PurchasingHistoryDocumentYear = @it_matdoc-mjahr
      INTO CORRESPONDING FIELDS OF TABLE @rt_result.
      IF sy-subrc = 0.
        RETURN.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_materials_from_ud_sto.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    " Get corresponding materials from under-delivered STO and its item.
    IF its_sto_ud_log IS NOT INITIAL.
      SELECT
        purchase_history~PurchaseOrder AS ebeln,
        purchase_history~PurchaseOrderItem AS ebelp,
        purchase_history~Material AS matnr,
        i_productdescription~ProductDescription AS maktx
        FROM i_purchaseorderhistoryapi01 AS purchase_history
        INNER JOIN i_productdescription ON purchase_history~Material = i_productdescription~Product AND i_productdescription~language = @sy-langu
        FOR ALL ENTRIES IN @its_sto_ud_log
        WHERE  purchase_history~PurchaseOrder = @its_sto_ud_log-under_delivered_sto
        AND   purchase_history~PurchaseOrderItem = @its_sto_ud_log-under_delivered_sto_item
        AND   purchase_history~DocumentReferenceID  = @its_sto_ud_log-under_delivered_dn
        INTO CORRESPONDING FIELDS OF TABLE @rt_materials_sto_ud.
      IF sy-subrc = 0.
      ELSE.
        MESSAGE e002(zsd_sto_ud) INTO DATA(lv_msg).         "#EC NEEDED
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD get_objkey.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*

    DATA lt_r_posnr TYPE RANGE OF posnr_vl.
    DATA ls_r_posnr LIKE LINE OF lt_r_posnr.


    IF it_items[] IS INITIAL.
      RETURN.
    ENDIF.

    LOOP AT it_items ASSIGNING FIELD-SYMBOL(<ls_itm>).
      CLEAR ls_r_posnr.
      ls_r_posnr-sign = 'I'.
      ls_r_posnr-option = 'EQ'.
      ls_r_posnr-low = <ls_itm>-posnr.
      COLLECT ls_r_posnr INTO lt_r_posnr.
    ENDLOOP.

    SELECT DISTINCT                                  "#EC CI_SEL_NESTED
     hu_vekp~HandlingUnitInternalID AS venum,
     hu_vekp~HandlingUnitReferenceDocument AS vpobjkey,
     handlingunititem       AS hu_item,
     hu_tab~handlingunitquantity AS menge,
     CAST( hu_vekp~HandlingUnitInternalID AS CHAR( 22 ) ) AS venum_hu
     FROM i_handlingunittp AS hu_vekp
     INNER JOIN @it_items AS i_del_items ON hu_vekp~HandlingUnitReferenceDocument = i_del_items~vbeln
     INNER JOIN i_handlingunititemtp AS hu_tab ON hu_vekp~HandlingUnitInternalID = hu_tab~handlingunitinternalid
     INTO TABLE @DATA(lt_result).
    IF sy-subrc = 0.
      LOOP AT lt_result ASSIGNING FIELD-SYMBOL(<ls_result>).
        <ls_result>-venum_hu = |HU{ <ls_result>-venum ALPHA = IN }|.
        " Ignore already completed HUs
        SELECT SINGLE stat AS status                 "#EC CI_SEL_NESTED
          FROM husstat AS hu_vekp_txt
          WHERE objnr = @<ls_result>-venum_hu
          AND stat = @zif_sd_sto_ud_const=>mc_hu_status-comp
          AND inact = @abap_false
          INTO @DATA(lv_result_txt).
        IF sy-subrc = 0 OR lv_result_txt IS NOT INITIAL.
          CONTINUE.
        ELSE.
          APPEND <ls_result> TO rt_objkey.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD get_purchase_orders_data.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    DATA lt_pur_orders_wo_item_key LIKE it_purchase_order_keys.
    DATA lt_pur_orders_with_item_key LIKE it_purchase_order_keys.

    LOOP AT it_purchase_order_keys ASSIGNING FIELD-SYMBOL(<ls_pur_order_key>).
      IF <ls_pur_order_key>-ebelp IS INITIAL AND <ls_pur_order_key>-ebeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_pur_orders_wo_item_key ASSIGNING FIELD-SYMBOL(<ls_pur_order_wo_item_key>).
        <ls_pur_order_wo_item_key> = CORRESPONDING #( <ls_pur_order_key> ).
      ELSEIF  <ls_pur_order_key>-ebelp IS NOT INITIAL AND <ls_pur_order_key>-ebeln IS NOT INITIAL.
        APPEND INITIAL LINE TO lt_pur_orders_with_item_key ASSIGNING FIELD-SYMBOL(<ls_pur_order_with_item_key>).
        <ls_pur_order_with_item_key> = CORRESPONDING #( <ls_pur_order_key> ).
      ELSE.
        RETURN.
      ENDIF.
    ENDLOOP.

    SORT lt_pur_orders_wo_item_key BY ebeln.
    DELETE ADJACENT DUPLICATES FROM lt_pur_orders_wo_item_key COMPARING ebeln.

    IF lt_pur_orders_wo_item_key IS NOT INITIAL.
      SELECT
        PurchaseOrder                              AS ebeln,
        \_PurchaseOrder-CompanyCode                AS bukrs,
        \_PurchaseOrder-CorrespncExternalReference AS ihrez,
        \_PurchaseOrder-PurchaseOrderType          AS bsart,
        \_PurchaseOrder-Supplier                   AS lifnr,
        \_PurchaseOrder-PurchasingOrganization     AS ekorg,
        \_PurchaseOrder-PurchasingGroup            AS ekgrp,
        \_PurchaseOrder-SupplyingPlant             AS reswk,
        \_PurchaseOrder-ManualSupplierAddressID    AS adrnr,
        \_PurchaseOrder-zz1_zsales_channel_pdh     AS zz1_zsales_channel_pdh,
        NetPriceAmount                             AS netpr,
        PurchaseOrderItem                          AS ebelp,
        Material                                   AS matnr,
        OrderQuantity                              AS menge,
        PurchaseOrderQuantityUnit                  AS meins,
        Plant                                      AS werks,
        OrderItemQtyToBaseQtyNmrtr                 AS umrez,
        OrderItemQtyToBaseQtyDnmntr                AS umren,
        BaseUnit                                   AS lmein,
        ManufacturerMaterial                       AS ematn,
        StorageLocation                            AS lgort,
        PurchaseOrderItemText                      AS txz01,
        ProfitCenter                               AS ko_prctr,
        SupplierMaterialNumber                     AS idnlf
        FROM i_purchaseorderitemapi01 AS tab_ekpo
        INNER JOIN @lt_pur_orders_wo_item_key AS itab ON itab~ebeln = tab_ekpo~PurchaseOrder
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC

    ENDIF.

    IF lt_pur_orders_with_item_key IS NOT INITIAL.
      SELECT
        PurchaseOrder                              AS ebeln,
        \_PurchaseOrder-CompanyCode                AS bukrs,
        \_PurchaseOrder-CorrespncExternalReference AS ihrez,
        \_PurchaseOrder-PurchaseOrderType          AS bsart,
        \_PurchaseOrder-Supplier                   AS lifnr,
        \_PurchaseOrder-PurchasingOrganization     AS ekorg,
        \_PurchaseOrder-PurchasingGroup            AS ekgrp,
        \_PurchaseOrder-SupplyingPlant             AS reswk,
        \_PurchaseOrder-ManualSupplierAddressID    AS adrnr,
        \_PurchaseOrder-zz1_zsales_channel_pdh     AS zz1_zsales_channel_pdh,
        NetPriceAmount                             AS netpr,
        PurchaseOrderItem                          AS ebelp,
        Material                                   AS matnr,
        OrderQuantity                              AS menge,
        PurchaseOrderQuantityUnit                  AS meins,
        Plant                                      AS werks,
        OrderItemQtyToBaseQtyNmrtr                 AS umrez,
        OrderItemQtyToBaseQtyDnmntr                AS umren,
        BaseUnit                                   AS lmein,
        ManufacturerMaterial                       AS ematn,
        StorageLocation                            AS lgort,
        PurchaseOrderItemText                      AS txz01,
        ProfitCenter                               AS ko_prctr,
        SupplierMaterialNumber                     AS idnlf
        FROM i_purchaseorderitemapi01 AS tab_ekpo
        INNER JOIN @lt_pur_orders_with_item_key AS itab ON  itab~ebeln = tab_ekpo~PurchaseOrder
                                                        AND itab~ebelp = tab_ekpo~PurchaseOrderItem
        APPENDING CORRESPONDING FIELDS OF TABLE @rt_result. "#EC CI_SUBRC
    ENDIF.

  ENDMETHOD.


  METHOD get_sto_ud_logs.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    IF mt_sto_ud_logs IS NOT INITIAL.
      SELECT *
        FROM zsd_t_sto_ud_log
        FOR ALL ENTRIES IN @mt_sto_ud_logs
        WHERE under_delivered_sto =  @mt_sto_ud_logs-under_delivered_sto
        AND   under_delivered_sto_item = @mt_sto_ud_logs-under_delivered_sto_item
        AND   status = @iv_status
        AND   process = @iv_process
        INTO CORRESPONDING FIELDS OF TABLE @rts_sto_ud_logs.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD is_intra_company_movement.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
    " If the company code Is the same (BURKS) then intracompany, if different then intercompany.
    SELECT SINGLE CompanyCode AS bukrs               "#EC CI_SEL_NESTED
      FROM i_valuationarea "t001k
      WHERE ValuationArea = @iv_supplying_plant
      INTO @DATA(lv_bukrs_supplying).
    IF sy-subrc = 0.
      SELECT SINGLE  CompanyCode AS bukrs            "#EC CI_SEL_NESTED
        FROM i_valuationarea
        WHERE ValuationArea = @iv_receiving_plant
        INTO @DATA(lv_bukrs_receiving).
      IF sy-subrc = 0 AND lv_bukrs_receiving = lv_bukrs_supplying.
        rv_result = abap_true.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD update_ud_sto_log.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.06.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* KONRANAR     | 01.11.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    MODIFY zsd_t_sto_ud_log FROM TABLE its_ud_sto_log.
    IF sy-subrc = 0 AND sy-dbcnt > 0.
      COMMIT WORK AND WAIT.
    ENDIF.
    IF it_messages IS SUPPLIED.
      MODIFY zsd_t_sto_ud_msg FROM TABLE it_messages.
      IF sy-subrc = 0 AND sy-dbcnt > 0.
        COMMIT WORK AND WAIT.
      ENDIF.
    ENDIF.


    LOOP AT its_ud_sto_log ASSIGNING FIELD-SYMBOL(<ls_ud_sto_log>) WHERE error_msg_text IS NOT INITIAL . "#EC CI_SORTSEQ
      DELETE  mt_sto_ud_logs WHERE under_delivered_sto = <ls_ud_sto_log>-under_delivered_sto
                               AND under_delivered_sto_item =  <ls_ud_sto_log>-under_delivered_sto_item.
      IF mt_sto_ud_logs IS INITIAL.
        RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e007(zsd_sto_ud) WITH |{ <ls_ud_sto_log>-status(1) }{ <ls_ud_sto_log>-status+1(1) + 1 }0| <ls_ud_sto_log>-error_msg_text.
*        RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e007(zsd_sto_ud) WITH <ls_ud_sto_log>-status <ls_ud_sto_log>-error_msg_text.
      ENDIF.
    ENDLOOP.


  ENDMETHOD.


  method UPDATE_UD_STO_MSG.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* KONRANAR     | 31.10.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    MODIFY zsd_t_sto_ud_msg FROM TABLE it_messages.
    IF sy-subrc = 0 AND sy-dbcnt > 0.
      COMMIT WORK AND WAIT.
    ENDIF.

  endmethod.


  METHOD vldt_and_get_hu_refusal_info_2.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 06.06.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    DATA: ls_refused_handling_units LIKE LINE OF rt_venum.
    " Find the inbound delivery(store) from the STO
    SELECT                       "#EC CI_SEL_NESTED       "#EC CI_SUBRC
      sup_conf_ekes~PurchaseOrder                 AS ebeln,
      sup_conf_ekes~PurchaseOrderItem             AS ebelp,
      sup_conf_ekes~DeliveryDocument              AS vbeln,
      SUM( hu_item_vepo~HandlingUnitQuantity )           AS menge
      FROM I_POSupplierConfirmationAPI01 AS sup_conf_ekes
      INNER JOIN i_handlingunititemtp    AS hu_item_vepo ON hu_item_vepo~HandlingUnitReferenceDocument =  sup_conf_ekes~DeliveryDocument
      WHERE PurchaseOrder = @is_found_sto-ebeln
      AND   PurchaseOrderItem = @is_found_sto-ebelp
      AND   SupplierConfirmationExtNumber = @is_found_sto-outbound_dn
      GROUP BY  sup_conf_ekes~PurchaseOrder,
      sup_conf_ekes~PurchaseOrderItem ,
      sup_conf_ekes~DeliveryDocument
      INTO TABLE @DATA(lt_sup_conf_ekes).
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    " Find Handling Units
    SELECT DISTINCT                                  "#EC CI_SEL_NESTED
     hu_vekp~HandlingUnitInternalID AS venum,
     hu_vekp~HandlingUnitReferenceDocument AS vpobjkey,
     hu_tab~handlingunitquantity AS menge,
     CAST( hu_vekp~HandlingUnitInternalID AS CHAR( 22 ) ) AS venum_hu
     FROM i_handlingunittp AS hu_vekp
     INNER JOIN @lt_sup_conf_ekes AS i_sup_conf_ekes ON hu_vekp~HandlingUnitReferenceDocument = i_sup_conf_ekes~vbeln
     INNER JOIN i_handlingunititemtp AS hu_tab ON hu_vekp~HandlingUnitInternalID = hu_tab~handlingunitinternalid
     INTO TABLE @DATA(lt_result).
    IF sy-subrc = 0.
      LOOP AT lt_result ASSIGNING FIELD-SYMBOL(<ls_result>).
        <ls_result>-venum_hu = |HU{ <ls_result>-venum ALPHA = IN }|.
        " Check Status of the Handling Units
        SELECT SINGLE stat AS status                 "#EC CI_SEL_NESTED
          FROM husstat AS hu_vekp_txt
          WHERE objnr = @<ls_result>-venum_hu
          AND stat = @zif_sd_sto_ud_const=>mc_hu_status-refu
          AND inact = @abap_false
          INTO @DATA(lv_result_txt).
        IF sy-subrc = 0 OR lv_result_txt IS NOT INITIAL.
          ls_refused_handling_units = CORRESPONDING #( is_found_sto ).
          ls_refused_handling_units-venum = <ls_result>-venum.

          ls_refused_handling_units-quantity = <ls_result>-menge.
          APPEND ls_refused_handling_units TO rt_venum.

        ENDIF.
        CLEAR: lv_result_txt.
      ENDLOOP.

*      " Compare the Handling Unit Qty with status REFU with under delivered qty, and log the error if necessary

    ENDIF.

  ENDMETHOD.


  METHOD vldt_plant_sloc_exist_in_hm.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.06.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    " Check if the selected plant and storage location combinations are maintained in Hardcode Manager
    IF mt_werks_s IS NOT INITIAL.
      SELECT plant~Plant AS werks
         FROM i_plant AS plant
         WHERE plant~Plant IN @mt_werks_r
           OR  plant~Plant IN @mt_werks_s
         INTO TABLE @DATA(lt_werks).
    ELSE.
      SELECT plant~Plant AS werks
        FROM i_plant AS plant
        WHERE plant~Plant IN @mt_werks_r
        INTO TABLE @lt_werks.
    ENDIF.

    IF sy-subrc = 0.
      IF mt_lgort IS NOT INITIAL.
        SELECT sloc~StorageLocation AS lgort       "#EC CI_NO_TRANSFORM
          FROM i_storagelocation AS sloc                "#EC CI_GENBUFF
          FOR ALL ENTRIES IN @lt_werks
          WHERE sloc~Plant = @lt_werks-werks
          AND sloc~StorageLocation IN @mt_lgort
          INTO TABLE @DATA(lt_lgort).
        IF sy-subrc = 0.
          LOOP AT lt_lgort ASSIGNING FIELD-SYMBOL(<ls_lgort>).
            LOOP AT lt_werks ASSIGNING FIELD-SYMBOL(<ls_werks>). "#EC CI_NESTED
              READ TABLE mt_hm_1087 ASSIGNING FIELD-SYMBOL(<ls_hm_1087>) WITH KEY field1 = <ls_werks>-werks  field2 = <ls_lgort>-lgort.
              IF sy-subrc <> 0.
                RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e001(zsd_sto_ud) WITH <ls_werks>-werks <ls_lgort>-lgort .
              ENDIF.
            ENDLOOP.
          ENDLOOP.
        ENDIF.
      ELSE.
        LOOP AT lt_werks ASSIGNING <ls_werks>.
          READ TABLE mt_hm_1087 ASSIGNING <ls_hm_1087> WITH KEY field1 = <ls_werks>-werks .
          IF sy-subrc <> 0.
            RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e001(zsd_sto_ud) WITH <ls_werks>-werks.
          ENDIF.
        ENDLOOP.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_inbound_delivery.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.06.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
    DATA ls_inb_del_header TYPE bbp_inbd_l.
    DATA lt_inb_del_detail TYPE TABLE OF bbp_inbd_d.
    DATA lt_return         TYPE TABLE OF bapireturn.
    DATA lv_delivery       TYPE I_DeliveryDocument-DeliveryDocument.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.

      vldt_plant_sloc_exist_in_hm( ).

      " Get corresponding materials from under-delivered STO and its item.
      DATA(lt_pur_orders_data) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_sto_ud_log IN lts_sto_ud_logs
                                                                                           ( ebeln = ls_sto_ud_log-under_delivered_sto  ebelp = ls_sto_ud_log-under_delivered_sto_item  ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        " Inbound Delivery details parameters
        DATA(ls_pur_order_data) = VALUE #( lt_pur_orders_data[ ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item ] OPTIONAL ).
        IF ls_pur_order_data IS INITIAL.
          <ls_sto_ud_log>-error_msg_text = mc_no_data_found_error.
          CONTINUE.
        ENDIF.

        IF mv_alt_bapi_ibd_create = abap_true.
          create_ibd_using_alt_bapi( EXPORTING is_sto_ud_log     = <ls_sto_ud_log>
                                               is_pur_order_data = ls_pur_order_data
                                     IMPORTING et_return         = lt_return
                                               ev_delivery_no    = lv_delivery ).

          IF line_exists( lt_return[ type = 'E' ] ) OR lv_delivery IS INITIAL .
            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
            <ls_sto_ud_log>-error_msg_no = ls_return-code.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-virtual_gr_ibd = lv_delivery.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text, ls_return.
          ENDIF.
        ELSE.
          ls_inb_del_header-delivery  = <ls_sto_ud_log>-under_delivered_dn.
          ls_inb_del_header-deliv_ext = <ls_sto_ud_log>-under_delivered_dn.
          ls_inb_del_header-deliv_date = sy-datum.
          ls_inb_del_header-deliv_time = sy-uzeit.


          lt_inb_del_detail = VALUE #( BASE lt_inb_del_detail
                                       ( delivery   = <ls_sto_ud_log>-under_delivered_dn
                                         deliv_item = <ls_sto_ud_log>-under_delivered_dn
                                         po_number  = <ls_sto_ud_log>-under_delivered_sto
                                         po_item    = <ls_sto_ud_log>-under_delivered_sto_item
                                         material   = ls_pur_order_data-matnr
                                         deliv_qty  = <ls_sto_ud_log>-quantity_short
                                         unit       = ls_pur_order_data-meins
                                          ) ).
          " Create Inbound delivery
          CALL FUNCTION 'BBP_INB_DELIVERY_CREATE'
            EXPORTING
              is_inb_delivery_header = ls_inb_del_header
            IMPORTING
              ef_delivery            = lv_delivery
            TABLES
              it_inb_delivery_detail = lt_inb_del_detail
              return                 = lt_return.
          IF line_exists( lt_return[ type = 'E' ] ) .
            ls_return = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
            <ls_sto_ud_log>-error_msg_no = ls_return-code.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-virtual_gr_ibd = lv_delivery.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
          CLEAR: ls_inb_del_header, lt_inb_del_detail, ls_return.
        ENDIF.

        CLEAR: lt_return.
      ENDLOOP.

      update_ud_sto_log( lts_sto_ud_logs ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_outbound_delivery.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 20.03.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.08.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    " Within this step, the OBD automatically created in step 4 will need to be retrieved and stored in the log table.
    " If OBD is not found in the PO history for the virtual return STO created in previous, then the OBD has to be created.
    DATA lt_stock_trans_items  TYPE STANDARD TABLE OF bapidlvreftosto.
    DATA lv_obd_delivery TYPE vbeln_vl.
    DATA lt_return  TYPE STANDARD TABLE OF bapiret2.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    "Select all entries in the STO UD Log table where given status and process
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).

    IF lts_sto_ud_logs IS NOT INITIAL.

      " Find their DN number: select BELNR from table EKBE where EBELN = virtual return STO number from Z table and VGABE = 8
      DATA(lt_ekbe_for_sto_created) = get_ekbe_belnr_for_sto_created( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                           ( ebeln = ls_line-virtual_return_sto ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        READ TABLE lt_ekbe_for_sto_created ASSIGNING FIELD-SYMBOL(<ls_ekbe_for_sto_created>) WITH KEY ebeln = <ls_sto_ud_log>-virtual_return_sto.
        IF sy-subrc = 0.
          <ls_sto_ud_log>-virtual_obd_created = <ls_ekbe_for_sto_created>-belnr.
          <ls_sto_ud_log>-status = iv_status.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ELSE.

          lt_stock_trans_items = VALUE #( FOR <ls_line> IN lts_sto_ud_logs WHERE ( virtual_return_sto = <ls_sto_ud_log>-virtual_return_sto ) "#EC CI_SORTSEQ
                                          ( ref_doc = <ls_sto_ud_log>-virtual_return_sto
                                            ref_item = <ls_line>-virtual_return_sto_item
                                             )  ).

          CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_STO'
            IMPORTING
              delivery          = lv_obd_delivery
            TABLES
              stock_trans_items = lt_stock_trans_items
              return            = lt_return.
          IF line_exists( lt_return[ type = 'E' id = 'VR' number = '420' ] ).
            DATA(lt_ekbe_for_sto_created_cur) = get_ekbe_belnr_for_sto_created( it_purchase_order_keys = VALUE #( ( ebeln = <ls_sto_ud_log>-virtual_return_sto ) ) ).
            IF lt_ekbe_for_sto_created_cur IS NOT INITIAL.
              <ls_sto_ud_log>-virtual_obd_created = VALUE #( lt_ekbe_for_sto_created_cur[ 1 ]-belnr OPTIONAL ).
              <ls_sto_ud_log>-status = iv_status.
              CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
            ELSE.
              DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
              <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
              <ls_sto_ud_log>-error_msg_text = ls_return-message.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
              lt_message = VALUE #( BASE lt_message
                                    FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_message>-id
                                      msg_no = <ls_message>-number
                                      msg_type = <ls_message>-type
                                      msg_text = ls_return-message
                                      message_v1 = <ls_message>-message_v1
                                      message_v2 = <ls_message>-message_v2
                                      message_v3 = <ls_message>-message_v3
                                      message_v4 = <ls_message>-message_v4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
            ENDIF.
          ELSEIF line_exists( lt_return[ type = 'E' ] ).
            ls_return = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
            <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            lt_message = VALUE #( BASE lt_message
                                  FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                  ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                    under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                    under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                    under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                    under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                    msg_id = <ls_message>-id
                                    msg_no = <ls_message>-number
                                    msg_type = <ls_message>-type
                                    msg_text = ls_return-message
                                    message_v1 = <ls_message>-message_v1
                                    message_v2 = <ls_message>-message_v2
                                    message_v3 = <ls_message>-message_v3
                                    message_v4 = <ls_message>-message_v4
                                    creation_date = sy-datum
                                    creation_time = sy-uzeit ) ).
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-virtual_obd_created = lv_obd_delivery.
            APPEND VALUE #( ebeln = <ls_sto_ud_log>-virtual_return_sto belnr = lv_obd_delivery ) TO lt_ekbe_for_sto_created.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
        ENDIF.

        CLEAR: lt_stock_trans_items.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_refusal_inbound_deliver.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 22.03.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    DATA lt_return          TYPE STANDARD TABLE OF bapiret2 .
    DATA lv_ef_inb_deliv_num       TYPE I_DeliveryDocument-DeliveryDocument.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        " Check Inbound Delivery is created automatically,

        DO 2 TIMES.

          SELECT SINGLE DeliveryDocument   AS vbeln    "#EC CI_SEL_NESTED
            FROM I_POSupplierConfirmationAPI01 AS sup_conf_ekes
            WHERE CAST( sup_conf_ekes~SupplierConfirmationExtNumber AS SSTRING ) = @<ls_sto_ud_log>-virtual_obd_created
            INTO @DATA(lv_refusal_ibd).
          IF sy-subrc = 0.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-refusal_ibd = lv_refusal_ibd.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
            DATA(lv_found) = abap_true.
            EXIT.
          ELSE.
            WAIT UP TO 1 SECONDS.
          ENDIF.

        ENDDO.

        CHECK lv_found = abap_false.
        " Otherwise, Call the BAPI to create it
        CALL FUNCTION 'SHP_IBDLV_CREATE_FROM_OBDLV'
          EXPORTING
            if_outb_deliv_num = <ls_sto_ud_log>-virtual_obd_created
          IMPORTING
            ef_inb_deliv_num  = lv_ef_inb_deliv_num
          TABLES
            et_return         = lt_return.

        IF line_exists( lt_return[ type = 'E' ] ) .
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          lt_message = VALUE #( BASE lt_message
                                FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                  under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                  under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                  under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                  under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                  msg_id = <ls_message>-id
                                  msg_no = <ls_message>-number
                                  msg_type = <ls_message>-type
                                  msg_text = ls_return-message
                                  message_v1 = <ls_message>-message_v1
                                  message_v2 = <ls_message>-message_v2
                                  message_v3 = <ls_message>-message_v3
                                  message_v4 = <ls_message>-message_v4
                                  creation_date = sy-datum
                                  creation_time = sy-uzeit ) ).
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
          <ls_sto_ud_log>-status = iv_status.
          <ls_sto_ud_log>-refusal_ibd = lv_ef_inb_deliv_num.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.
        CLEAR:  ls_return.

        CLEAR: lt_return.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_refusal_outbound_dlvry.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 20.03.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    " Within this step, the OBD automatically created in step 4 will need to be retrieved and stored in the log table.
    " If OBD is not found in the PO history for the virtual return STO created in previous, then the OBD has to be created.
    DATA lt_stock_trans_items  TYPE STANDARD TABLE OF bapidlvreftosto.
    DATA lv_obd_delivery TYPE vbeln_vl.
    DATA lt_return  TYPE STANDARD TABLE OF bapiret2.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    "Select all entries in the STO UD Log table where given status and process
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).


    IF lts_sto_ud_logs IS NOT INITIAL.

      " Find their DN number: select BELNR from table EKBE where EBELN = virtual return STO number from Z table and VGABE = 8
      DATA(lt_ekbe_for_sto_created) = get_ekbe_belnr_for_sto_created( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                           ( ebeln = ls_line-virtual_return_sto ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        READ TABLE lt_ekbe_for_sto_created ASSIGNING FIELD-SYMBOL(<ls_ekbe_for_sto_created>) WITH KEY ebeln = <ls_sto_ud_log>-under_delivered_sto.
        IF sy-subrc = 0.
          <ls_sto_ud_log>-virtual_obd_created = <ls_ekbe_for_sto_created>-belnr.
          <ls_sto_ud_log>-status = iv_status.
          lv_obd_delivery = <ls_ekbe_for_sto_created>-belnr.
        ELSE.

          lt_stock_trans_items = VALUE #( BASE lt_stock_trans_items
                                          ( ref_doc  = <ls_sto_ud_log>-virtual_return_sto
                                            ref_item = <ls_sto_ud_log>-under_delivered_sto_item
                                            dlv_qty  = <ls_sto_ud_log>-quantity_short
                                            sales_unit = 'EA'
                                            sales_unit_iso = 'EA' )  ).

          CALL FUNCTION 'BAPI_OUTB_DELIVERY_CREATE_STO'
            EXPORTING
              ship_point        = mt_werks_r[ 1 ]-low
              due_date          = sy-datum
            IMPORTING
              delivery          = lv_obd_delivery
            TABLES
              stock_trans_items = lt_stock_trans_items
              return            = lt_return.
          IF line_exists( lt_return[ type = 'E' ] ).
            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
            <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            lt_message = VALUE #( BASE lt_message
                                  FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                  ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                    under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                    under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                    under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                    under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                    msg_id = <ls_message>-id
                                    msg_no = <ls_message>-number
                                    msg_type = <ls_message>-type
                                    msg_text = ls_return-message
                                    message_v1 = <ls_message>-message_v1
                                    message_v2 = <ls_message>-message_v2
                                    message_v3 = <ls_message>-message_v3
                                    message_v4 = <ls_message>-message_v4
                                    creation_date = sy-datum
                                    creation_time = sy-uzeit ) ).
            CONTINUE.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-virtual_obd_created = lv_obd_delivery.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
        ENDIF.

        CLEAR: lt_stock_trans_items, lv_obd_delivery.
      ENDLOOP.


      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_refusal_sto.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_key, "CR 73429
             under_delivered_sto TYPE	zsd_sto_ud,
             virtual_gr_ibd TYPE zsd_sto_ud_virtual_gr_ibd,
           END OF ltyp_s_key,
           ltyp_t_key TYPE STANDARD TABLE OF ltyp_s_key WITH KEY PRIMARY_KEY COMPONENTS under_delivered_sto virtual_gr_ibd.

    DATA lt_return  TYPE STANDARD TABLE OF bapiret2.
    DATA ls_exp_po_header TYPE bapimepoheader.
    DATA: lt_processed TYPE ltyp_t_key.
    DATA ls_is_header TYPE bapimepoheader.
    DATA ls_is_header_x TYPE bapimepoheaderx.
    DATA lt_it_items  TYPE STANDARD TABLE OF bapimepoitem .
    DATA lt_it_items_x  TYPE STANDARD TABLE OF bapimepoitemx.
    DATA lv_ebelp TYPE ebelp.
    DATA lt_message type mtyp_t_sto_ud_msg.
    DATA: ls_pocustheader      TYPE zsc_s_pocustheader,
          ls_pocustheaderx     TYPE zsc_s_pocustheaderx,
          ls_ext               TYPE bapiparex,
          lt_ext               TYPE TABLE of bapiparex.

    "Select all entries in the STO UD Log table where given status and process
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).


    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(lt_pur_order_data) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                          ( ebeln = ls_line-under_delivered_sto  ebelp = ls_line-under_delivered_sto_item ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        CHECK NOT line_exists( lt_processed[ under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                             virtual_gr_ibd      = <ls_sto_ud_log>-virtual_gr_ibd ] ). "CR 73429
        APPEND VALUE #( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                        virtual_gr_ibd      = <ls_sto_ud_log>-virtual_gr_ibd ) TO lt_processed. "CR 73429

        DATA(ls_pur_order_data) = VALUE #( lt_pur_order_data[ ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item ] OPTIONAL ).

        DATA(ls_hm_rec_sloc) = VALUE #( mt_hm_1087[ field1 = mt_werks_r[ 1 ]-low ] OPTIONAL ).
        DATA(ls_hm_sen_sloc) = VALUE #( mt_hm_1087[ field1 = COND #( WHEN mt_werks_s IS NOT INITIAL THEN mt_werks_s[ 1 ]-low  ELSE ls_pur_order_data-reswk ) ] OPTIONAL ).


        " Fill PO Header
        ls_is_header-ref_1 = <ls_sto_ud_log>-under_delivered_sto .
        ls_is_header-comp_code = ls_pur_order_data-bukrs.
        DATA(lv_is_intra_company) = is_intra_company_movement( iv_receiving_plant = ls_pur_order_data-werks
                                                               iv_supplying_plant = COND #( WHEN ls_pur_order_data-reswk IS NOT INITIAL THEN ls_pur_order_data-reswk ELSE ls_pur_order_data-lifnr ) ).

        ls_is_header-doc_type = COND #( WHEN lv_is_intra_company = abap_true THEN mv_hm_685_sto_intra_zu55
                                                                          ELSE mv_hm_685_sto_inter_zu50  ).
        ls_is_header-purch_org = ls_pur_order_data-ekorg.
        ls_is_header-pur_group = ls_pur_order_data-ekgrp.
        ls_is_header-suppl_plnt = ls_pur_order_data-reswk.
        ls_is_header-creat_date = sy-datum.
        ls_is_header-vendor = ls_pur_order_data-lifnr.
        ls_is_header_x-ref_1 = abap_true.
        ls_is_header_x-comp_code = abap_true.
        ls_is_header_x-doc_type = abap_true.
        ls_is_header_x-purch_org = abap_true.
        ls_is_header_x-pur_group = abap_true.
        ls_is_header_x-suppl_plnt = abap_true.
        ls_is_header_x-vendor = abap_true.
        ls_is_header_x-creat_date = abap_true.
        ls_is_header_x-item_intvl = abap_true.

        ls_pocustheader = VALUE #( zz1_zorderreason_pdh = zif_sd_sto_ud_const=>mc_order_reason-refusal_header
                                   zz1_zsales_channel_pdh = ls_pur_order_data-zz1_zsales_channel_pdh ).
        ls_pocustheaderx = VALUE #( zz1_zorderreason_pdh = abap_true zz1_zsales_channel_pdh = abap_true ).
        ls_ext-structure = 'ZSC_S_POCUSTHEADER'.
        ls_ext-valuepart1 = ls_pocustheader.
        APPEND ls_ext TO lt_ext.
        ls_ext-structure = 'ZSC_S_POCUSTHEADERX'.
        ls_ext-valuepart1 = ls_pocustheaderx.
        APPEND ls_ext TO lt_ext.

        LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_group>) WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto AND
                                                                         virtual_gr_ibd      = <ls_sto_ud_log>-virtual_gr_ibd.
           DATA(ls_pur_order_data_item) = VALUE #( lt_pur_order_data[ ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item ] OPTIONAL ).
          " Fill PO Item
          lt_it_items = VALUE #( BASE lt_it_items
                                ( material       = ls_pur_order_data_item-matnr
                                  po_item        = <ls_group>-under_delivered_sto_item
                                  plant          = ls_pur_order_data-werks
                                  stge_loc       = ls_hm_rec_sloc-field2
                                  suppl_stloc    = ls_hm_sen_sloc-field2
                                  quantity       = <ls_group>-quantity_short
                                  po_unit        = ls_pur_order_data_item-meins
                                  ret_item       = abap_true
                                  order_reason   = zif_sd_sto_ud_const=>mc_order_reason-refusal
                                  net_price      = ls_pur_order_data-netpr
                                  src_stock_type = cl_atp_customizing_c=>stock_type_quality
                                  ) ).

          lt_it_items_x = VALUE #( BASE lt_it_items_x
                                  ( po_item    = <ls_group>-under_delivered_sto_item
                                    material     = abap_true
                                    plant        = abap_true
                                    stge_loc     = abap_true
                                    suppl_stloc  = abap_true
                                    quantity     = abap_true
                                    po_unit      = abap_true
                                    ret_item     = abap_true
                                    order_reason = abap_true
                                    net_price    = abap_true
                                    src_stock_type = abap_true
                                    ) ).
        ENDLOOP.


        CALL FUNCTION 'BAPI_PO_CREATE1'
          EXPORTING
            poheader               = ls_is_header
            poheaderx              = ls_is_header_x
          IMPORTING
            expheader              = ls_exp_po_header
          TABLES
            return                 = lt_return
            poitem                 = lt_it_items
            poitemx                = lt_it_items_x
            extensionin            = lt_ext
          .

        IF line_exists( lt_return[ type = 'E' ] ).

          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

          LOOP AT lts_sto_ud_logs ASSIGNING <ls_group> WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto AND
                                                             virtual_gr_ibd      = <ls_sto_ud_log>-virtual_gr_ibd.

            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
            <ls_group>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_group>-error_msg_text = ls_return-message.
            lt_message = VALUE #( BASE lt_message
                                  FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                  ( under_delivered_sto = <ls_group>-under_delivered_sto
                                    under_delivered_sto_item = <ls_group>-under_delivered_sto_item
                                    under_delivered_dn = <ls_group>-under_delivered_dn
                                    under_delivered_dn_item = <ls_group>-under_delivered_dn_item
                                    under_delivered_hu = <ls_group>-under_delivered_hu step = iv_status
                                    msg_id = <ls_message>-id
                                    msg_no = <ls_message>-number
                                    msg_type = <ls_message>-type
                                    msg_text = ls_return-message
                                    message_v1 = <ls_message>-message_v1
                                    message_v2 = <ls_message>-message_v2
                                    message_v3 = <ls_message>-message_v3
                                    message_v4 = <ls_message>-message_v4
                                    creation_date = sy-datum
                                    creation_time = sy-uzeit ) ).
          ENDLOOP.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
          lv_ebelp = 10.
          LOOP AT lts_sto_ud_logs ASSIGNING <ls_group> WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto AND
                                                             virtual_gr_ibd      = <ls_sto_ud_log>-virtual_gr_ibd.
            <ls_group>-status = iv_status.
            <ls_group>-virtual_return_sto = ls_exp_po_header-po_number .
            <ls_group>-virtual_return_sto_item = lv_ebelp.
            CLEAR: <ls_group>-error_msg_no, <ls_group>-error_msg_text.
            lv_ebelp += 10.
          ENDLOOP.
        ENDIF.

        CLEAR: lt_it_items, lt_it_items_x, ls_is_header, ls_is_header_x.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~create_virtual_sto.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.05.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 27.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_key, "CR 73429
             under_delivered_sto TYPE	zsd_sto_ud,
           END OF ltyp_s_key,
           ltyp_t_key TYPE STANDARD TABLE OF ltyp_s_key WITH KEY PRIMARY_KEY COMPONENTS under_delivered_sto.

    DATA lt_return  TYPE STANDARD TABLE OF bapiret2.
    DATA ls_exp_po_header TYPE bapimepoheader.

    DATA ls_is_header TYPE bapimepoheader.
    DATA ls_is_header_x TYPE bapimepoheaderx.
    DATA lt_it_items  TYPE STANDARD TABLE OF bapimepoitem .
    DATA lt_it_items_x  TYPE STANDARD TABLE OF bapimepoitemx.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.
    DATA: lt_processed TYPE ltyp_t_key.
    DATA lv_ebelp TYPE ebelp.
    DATA: ls_pocustheader      TYPE zsc_s_pocustheader,
          ls_pocustheaderx     TYPE zsc_s_pocustheaderx,
          ls_ext               TYPE bapiparex,
          lt_ext               TYPE TABLE of bapiparex.

    "Select all entries in the STO UD Log table where given status and process
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status  iv_process = iv_process ).


    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(lt_pur_order_data) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                          ( ebeln = ls_line-under_delivered_sto  ebelp = ls_line-under_delivered_sto_item ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        DATA(ls_pur_order_data) = VALUE #( lt_pur_order_data[ ebeln = <ls_sto_ud_log>-under_delivered_sto ] OPTIONAL ).
        CHECK NOT line_exists( lt_processed[ under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto ] ). "CR 73429
        APPEND VALUE #( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto ) TO lt_processed. "CR 73429

        DATA(ls_hm_rec_sloc) = VALUE #( mt_hm_1087[ field1 = mt_werks_r[ 1 ]-low ] OPTIONAL ).
        DATA(ls_hm_sen_sloc) = VALUE #( mt_hm_1087[ field1 = COND #( WHEN mt_werks_s IS NOT INITIAL THEN mt_werks_s[ 1 ]-low  ELSE ls_pur_order_data-reswk ) ] OPTIONAL ).


        " Fill PO Header
        ls_is_header-ref_1 = <ls_sto_ud_log>-under_delivered_sto .
        ls_is_header-comp_code = ls_pur_order_data-bukrs.
        DATA(lv_is_intra_company) = is_intra_company_movement( iv_receiving_plant = ls_pur_order_data-werks
                                                               iv_supplying_plant = COND #( WHEN ls_pur_order_data-reswk IS NOT INITIAL THEN ls_pur_order_data-reswk ELSE ls_pur_order_data-lifnr ) ).

        ls_is_header-doc_type = COND #( WHEN lv_is_intra_company = abap_true THEN mv_hm_685_sto_intra_zu65
                                                                          ELSE mv_hm_685_sto_inter_zu60  ).
        ls_is_header-purch_org = ls_pur_order_data-ekorg.
        ls_is_header-pur_group = ls_pur_order_data-ekgrp.
        ls_is_header-suppl_plnt = ls_pur_order_data-reswk.
        ls_is_header-creat_date = sy-datum.
        ls_is_header-vendor = ls_pur_order_data-lifnr.
        ls_is_header_x-ref_1 = abap_true.
        ls_is_header_x-comp_code = abap_true.
        ls_is_header_x-doc_type = abap_true.
        ls_is_header_x-purch_org = abap_true.
        ls_is_header_x-pur_group = abap_true.
        ls_is_header_x-suppl_plnt = abap_true.
        ls_is_header_x-vendor = abap_true.
        ls_is_header_x-creat_date = abap_true.
        ls_is_header_x-item_intvl = abap_true. " to prevent automatic item number assignment.
        ls_pocustheader = VALUE #( zz1_zorderreason_pdh = zif_sd_sto_ud_const=>mc_order_reason-virtual
                                   zz1_zsales_channel_pdh = ls_pur_order_data-zz1_zsales_channel_pdh ).
        ls_pocustheaderx = VALUE #( zz1_zorderreason_pdh = abap_true zz1_zsales_channel_pdh = abap_true ).
        ls_ext-structure = 'ZSC_S_POCUSTHEADER'.
        ls_ext-valuepart1 = ls_pocustheader.
        APPEND ls_ext TO lt_ext.
        ls_ext-structure = 'ZSC_S_POCUSTHEADERX'.
        ls_ext-valuepart1 = ls_pocustheaderx.
        APPEND ls_ext TO lt_ext.
        lv_ebelp = 10.
        LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_group>) WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto.
          DATA(ls_pur_order_data_item) = VALUE #( lt_pur_order_data[ ebeln = <ls_group>-under_delivered_sto ebelp = <ls_group>-under_delivered_sto_item ] OPTIONAL ).
          " Fill PO Item
          lt_it_items = VALUE #( BASE lt_it_items
                                ( material     = ls_pur_order_data_item-matnr
                                  po_item     = lv_ebelp
                                  plant          = ls_pur_order_data-werks
                                  stge_loc       = ls_hm_rec_sloc-field2
                                  suppl_stloc    = ls_hm_sen_sloc-field2
                                  quantity       = <ls_group>-quantity_short
                                  po_unit        = ls_pur_order_data_item-meins
                                  ret_item       = abap_true
                                  src_stock_type = cl_atp_customizing_c=>stock_type_blocked "CR 63689
                                  qual_insp      = cl_atp_customizing_c=>stock_type_blocked "CR 63689
                                  ) ).
          lt_it_items_x = VALUE #( BASE lt_it_items_x
                                  ( po_item = lv_ebelp
                                    material       = abap_true
                                    plant          = abap_true
                                    stge_loc       = abap_true
                                    suppl_stloc    = abap_true
                                    quantity       = abap_true
                                    po_unit        = abap_true
                                    ret_item       = abap_true
                                    src_stock_type = abap_true "CR 63689
                                    qual_insp      = abap_true ) ). "CR 63689
          lv_ebelp += 10.
        ENDLOOP.

        CALL FUNCTION 'BAPI_PO_CREATE1'
          EXPORTING
            poheader               = ls_is_header
            poheaderx              = ls_is_header_x
          IMPORTING
            expheader              = ls_exp_po_header
          TABLES
            return                 = lt_return
            poitem                 = lt_it_items
            poitemx                = lt_it_items_x
            extensionin            = lt_ext
          .

        IF line_exists( lt_return[ type = 'E' ] ).

          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

          LOOP AT lts_sto_ud_logs ASSIGNING <ls_group> WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto.
            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
            <ls_group>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_group>-error_msg_text = ls_return-message.
            lt_message = VALUE #( BASE lt_message
                                    FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                    ( under_delivered_sto = <ls_group>-under_delivered_sto
                                      under_delivered_sto_item = <ls_group>-under_delivered_sto_item
                                      under_delivered_dn = <ls_group>-under_delivered_dn
                                      under_delivered_dn_item = <ls_group>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_message>-id
                                      msg_no = <ls_message>-number
                                      msg_type = <ls_message>-type
                                      msg_text = ls_return-message
                                      message_v1 = <ls_message>-message_v1
                                      message_v2 = <ls_message>-message_v2
                                      message_v3 = <ls_message>-message_v3
                                      message_v4 = <ls_message>-message_v4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
          ENDLOOP.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
          lv_ebelp = 10.
          LOOP AT lts_sto_ud_logs ASSIGNING <ls_group> WHERE under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto.
            <ls_group>-status = iv_status.
            <ls_group>-virtual_return_sto = ls_exp_po_header-po_number .
            <ls_group>-virtual_return_sto_item = lv_ebelp.
            CLEAR: <ls_group>-error_msg_no, <ls_group>-error_msg_text.
            lv_ebelp += 10.
          ENDLOOP.
        ENDIF.

        CLEAR: lt_it_items, lt_it_items_x, ls_is_header, ls_is_header_x.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~down_adjustment_receiving_plnt.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 22.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.08.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_matdoc,
         mblnr TYPE matdoc-mblnr,
         mjahr TYPE matdoc-gjahr,
       END OF ltyp_matdoc,
       ltyp_t_matdoc TYPE STANDARD TABLE OF ltyp_matdoc WITH KEY PRIMARY_KEY COMPONENTS mblnr mjahr.

    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.
    DATA lt_matdoc_list TYPE ltyp_t_matdoc.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status   iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(ls_hm_bwart_708) = VALUE #( mt_hm_876_bwart[ field1 = '708' ] OPTIONAL ). "#EC CI_STDSEQ

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_collect>).
        COLLECT VALUE ltyp_matdoc( mblnr = <ls_collect>-virtual_gr_matdoc mjahr = <ls_collect>-virtual_gr_matdoc_year ) INTO lt_matdoc_list.
      ENDLOOP.

      DATA(lt_matdoc_data) = get_matdoc_down_adj( VALUE #( FOR <ls_line> IN lt_matdoc_list
                                                           ( mblnr = <ls_line>-mblnr mjahr = <ls_line>-mjahr ) ) ).

      LOOP AT lt_matdoc_list ASSIGNING FIELD-SYMBOL(<ls_matdoc_gi>).

        IF NOT line_exists( lt_matdoc_data[ mblnr = <ls_matdoc_gi>-mblnr mjahr = <ls_matdoc_gi>-mjahr ] ).

          LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_no_data>).

            <ls_no_data>-error_msg_text = mc_no_data_found_error.
            CONTINUE.

          ENDLOOP.

        ENDIF.

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_06.
        ls_goodsmvt_header-doc_date     = sy-datum.
        ls_goodsmvt_header-pstng_date   = sy-datum.
        ls_goodsmvt_header-pr_uname     = sy-uname.
        ls_goodsmvt_header-ref_doc_no   = <ls_matdoc_gi>-mblnr.

        lt_goodsmvt_item = VALUE #( FOR <ls_item> IN lt_matdoc_data WHERE ( mblnr = <ls_matdoc_gi>-mblnr AND mjahr = <ls_matdoc_gi>-mjahr )
                                    ( po_number            = <ls_item>-po
                                      po_item              = <ls_item>-po_i
                                      move_type            = ls_hm_bwart_708-field1
                                      move_reas            = ls_hm_bwart_708-field3
                                      ref_doc              = <ls_matdoc_gi>-mblnr
                                      plant                = <ls_item>-werks
                                      entry_qnt            = <ls_item>-menge
                                      entry_uom            = <ls_item>-meins
                                      material             = <ls_item>-matnr
                                      stge_loc             = <ls_item>-lgort
                                      no_more_gr           = abap_true ) ).

        SORT lt_goodsmvt_item BY po_number po_item.

        " Post the down adjustment in sending plant
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
        ENDIF.

        LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>) WHERE virtual_gr_matdoc = <ls_matdoc_gi>-mblnr AND
                                                                              virtual_gr_matdoc_year = <ls_matdoc_gi>-mjahr.

          IF line_exists( lt_return[ type = 'E' ] ).

            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
            <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.

            lt_message = VALUE #( BASE lt_message
                                    FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_message>-id
                                      msg_no = <ls_message>-number
                                      msg_type = <ls_message>-type
                                      msg_text = ls_return-message
                                      message_v1 = <ls_message>-message_v1
                                      message_v2 = <ls_message>-message_v2
                                      message_v3 = <ls_message>-message_v3
                                      message_v4 = <ls_message>-message_v4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
          ELSE.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-down_adjustment_matdoc = ls_goodsmvt_headret-mat_doc.
            <ls_sto_ud_log>-down_adjustment_matdoc_year = ls_goodsmvt_headret-doc_year.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.

        ENDLOOP.

        CLEAR: lt_goodsmvt_item.

      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~down_adjustment_sending_plant.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 06.08.2023 | 19848 : Development - Store Refusal Auto *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 27.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_matdoc,
             mblnr TYPE matdoc-mblnr,
             mjahr TYPE matdoc-gjahr,
           END OF ltyp_matdoc,
           ltyp_t_matdoc TYPE STANDARD TABLE OF ltyp_matdoc WITH KEY PRIMARY_KEY COMPONENTS mblnr mjahr.

    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.
    DATA lt_matdoc_list TYPE ltyp_t_matdoc.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(ls_hm_bwart_708) = VALUE #( mt_hm_876_bwart[ field1 = '708' ] OPTIONAL ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_collect>).
        COLLECT VALUE ltyp_matdoc( mblnr = <ls_collect>-virt_return_sto_gi_matdoc mjahr = <ls_collect>-virt_return_sto_gi_matdoc_year ) INTO lt_matdoc_list.
      ENDLOOP.

      DATA(lt_matdoc_data) = get_matdoc_down_adj( VALUE #( FOR <ls_line> IN lt_matdoc_list
                                                           ( mblnr = <ls_line>-mblnr mjahr = <ls_line>-mjahr ) ) ).

      LOOP AT lt_matdoc_list ASSIGNING FIELD-SYMBOL(<ls_matdoc_gi>).

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_06.
        ls_goodsmvt_header-doc_date     = sy-datum.
        ls_goodsmvt_header-pstng_date   = sy-datum.
        ls_goodsmvt_header-pr_uname     = sy-uname.
        ls_goodsmvt_header-ref_doc_no   = <ls_matdoc_gi>-mblnr.

        lt_goodsmvt_item = VALUE #( FOR <ls_item> IN lt_matdoc_data WHERE ( mblnr = <ls_matdoc_gi>-mblnr AND mjahr = <ls_matdoc_gi>-mjahr )
                                    ( po_number            = <ls_item>-po
                                      po_item              = <ls_item>-po_i
                                      move_type            = ls_hm_bwart_708-field1
                                      move_reas            = ls_hm_bwart_708-field2
                                      ref_doc              = <ls_matdoc_gi>-mblnr
                                      plant                = <ls_item>-werks
                                      entry_qnt            = <ls_item>-menge
                                      entry_uom            = <ls_item>-meins
                                      material             = <ls_item>-matnr
                                      stge_loc             = <ls_item>-lgort
                                      no_more_gr           = abap_true ) ).

        SORT lt_goodsmvt_item BY po_number po_item.

        " Post the down adjustment in sending plant
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
        ENDIF.

        LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>) WHERE virt_return_sto_gi_matdoc = <ls_matdoc_gi>-mblnr AND
                                                                              virt_return_sto_gi_matdoc_year = <ls_matdoc_gi>-mjahr.

          IF line_exists( lt_return[ type = 'E' ] ).

            DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ).
            <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.

            lt_message = VALUE #( BASE lt_message
                                    FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_message>-id
                                      msg_no = <ls_message>-number
                                      msg_type = <ls_message>-type
                                      msg_text = ls_return-message
                                      message_v1 = <ls_message>-message_v1
                                      message_v2 = <ls_message>-message_v2
                                      message_v3 = <ls_message>-message_v3
                                      message_v4 = <ls_message>-message_v4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
          ELSE.
            <ls_sto_ud_log>-status = iv_status.
            <ls_sto_ud_log>-down_adjustment_matdoc = ls_goodsmvt_headret-mat_doc.
            <ls_sto_ud_log>-down_adjustment_matdoc_year = ls_goodsmvt_headret-doc_year.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.

        ENDLOOP.

        CLEAR: lt_goodsmvt_item.

      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.
  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~find_under_delivery_sto_new.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 27.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    DATA lt_sto_ud_log TYPE STANDARD TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE SORTED KEY
         key_fields COMPONENTS  under_delivered_sto under_delivered_sto_item under_delivered_dn under_delivered_dn_item under_delivered_hu.
    DATA lt_sto_ud_log_to_exclude TYPE STANDARD TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE SORTED KEY
         key_fields COMPONENTS  under_delivered_sto under_delivered_sto_item under_delivered_dn under_delivered_dn_item.
    DATA lts_sto_ud_log_to_update TYPE mtyp_t_sto_ud_log.


    SELECT
    FROM I_POSupplierConfirmationAPI01 AS supplier_confirmation
    INNER JOIN ekes AS ekes_tab  ON ekes_tab~ebeln = supplier_confirmation~PurchaseOrder
                                AND ekes_tab~ebelp = supplier_confirmation~PurchaseOrderItem
                                AND ekes_tab~etens = supplier_confirmation~SequentialNmbrOfSuplrConf
    FIELDS DISTINCT
      supplier_confirmation~PurchaseOrder                                                  AS ebeln,
      supplier_confirmation~PurchaseOrderItem                                              AS ebelp,
      supplier_confirmation~CreationDate                                                   AS erdat,
      supplier_confirmation~MRPRelevantQuantity                                            AS dabmg,
      supplier_confirmation~ConfirmedQuantity                                              AS menge,
      supplier_confirmation~ConfirmedQuantity - supplier_confirmation~MRPRelevantQuantity  AS quant_short,
      supplier_confirmation~DeliveryDocument                                               AS inbound_dn,
      supplier_confirmation~DeliveryDocumentItem                                           AS inbound_dn_item,
      ekes_tab~vbeln_st                                                                    AS outbound_dn,
      ekes_tab~vbelp_st                                                                    AS outbound_dn_item,
      CAST( '00000000' AS DATS )                                                           AS latest_outbound_erdat,
      CAST( '00000000' AS DATS )                                                           AS latest_inbound_erdat,
      CAST( 0 AS INT2 )                                                                    AS days_from_outbound_dn,
      CAST( 0 AS INT2 )                                                                    AS days_from_inbound_dn,
      \_PurchaseOrder-PurchaseOrderType                                                    AS bsart,
      \_PurchaseOrder-PurchasingOrganization                                               AS ekorg,
      \_PurchaseOrderItem-IsCompletelyDelivered                                            AS elikz,
      supplier_confirmation~SupplierConfirmationCategory                                   AS ebtyp
    WHERE \_PurchaseOrder-PurchaseOrderType                            IN @mt_bsart
      AND \_PurchaseOrder-PurchasingOrganization                       = @mv_ekorg
      AND \_PurchaseOrder-PurchasingGroup                              IN @mt_ekgrp
      AND \_PurchaseOrder-PurchaseOrder                                IN @mt_ebeln
      AND \_PurchaseOrderItem-Plant                                    IN @mt_werks_r
      AND \_PurchaseOrderItem-StorageLocation                          IN @mt_lgort
      AND \_PurchaseOrder-SupplyingPlant                               IN @mt_werks_s
      AND \_PurchaseOrderItem-PurchasingOrderReason                    IN @mt_bsgru
      AND \_PurchaseOrder-CreationDate                                 IN @mt_erdat
      AND \_PurchaseOrder-CreatedByUser                                IN @mt_ernam
      AND supplier_confirmation~SupplierConfirmationCategory           = 'LA'
      AND \_PurchaseOrder-PurchasingDocumentDeletionCode               = @space
      AND \_PurchaseOrderItem-PurchasingDocumentDeletionCode           = @space
      AND supplier_confirmation~IsDeleted                              = @space
      ORDER BY  supplier_confirmation~PurchaseOrder, supplier_confirmation~PurchaseOrderItem, supplier_confirmation~CreationDate
    INTO TABLE @DATA(lt_ud_sto).
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e003(zsd_sto_ud).
    ELSE.
      SELECT
      FROM I_SDDocumentMultiLevelProcFlow WITH PRIVILEGED ACCESS AS sd_doc_flow
      INNER JOIN @lt_ud_sto AS sto_ud  ON sd_doc_flow~PrecedingDocument          = sto_ud~outbound_dn
                                      AND sd_doc_flow~PrecedingDocumentItem      = sto_ud~outbound_dn_item
                                      AND sd_doc_flow~SubsequentDocumentCategory = 'R'
      FIELDS  sd_doc_flow~PrecedingDocument,
              sd_doc_flow~PrecedingDocumentItem,
              sd_doc_flow~CreationDate           AS erdat,
              sd_doc_flow~CreationTime           AS erzet,
              dats_days_between( sd_doc_flow~CreationDate, @sy-datum ) AS days_from_entry
      INTO TABLE @DATA(lt_outbound_deliveries)
        .
      IF sy-subrc = 0.
        " Check the last GI date: select ERDAT from table VBFA. If there are multiple records sort to find the latest date ERDAT.
        SORT lt_outbound_deliveries  BY PrecedingDocument PrecedingDocumentItem erdat DESCENDING erzet DESCENDING.
        LOOP AT lt_ud_sto ASSIGNING FIELD-SYMBOL(<ls_ud_sto_result>).
          READ TABLE lt_outbound_deliveries ASSIGNING FIELD-SYMBOL(<ls_vbfa_outbound>) WITH KEY PrecedingDocument     = <ls_ud_sto_result>-outbound_dn
                                                                                          PrecedingDocumentItem = <ls_ud_sto_result>-outbound_dn_item.
          IF sy-subrc = 0.
            <ls_ud_sto_result>-latest_outbound_erdat  = <ls_vbfa_outbound>-erdat.
            <ls_ud_sto_result>-days_from_outbound_dn  = <ls_vbfa_outbound>-days_from_entry.
          ENDIF.
        ENDLOOP.
      ENDIF.

      SELECT
      FROM I_SDDocumentMultiLevelProcFlow WITH PRIVILEGED ACCESS AS sd_doc_flow
      INNER JOIN @lt_ud_sto AS sto_ud  ON sd_doc_flow~PrecedingDocument          = sto_ud~inbound_dn
                                      AND sd_doc_flow~PrecedingDocumentItem      = sto_ud~inbound_dn_item
                                      AND sd_doc_flow~SubsequentDocumentCategory = 'R'
      FIELDS  sd_doc_flow~PrecedingDocument,
              sd_doc_flow~PrecedingDocumentItem,
              sd_doc_flow~CreationDate           AS erdat,
              sd_doc_flow~CreationTime           AS erzet,
              dats_days_between( sd_doc_flow~CreationDate, @sy-datum ) AS days_from_entry
      INTO TABLE @DATA(lt_vbfa_inbound)
        .
      IF sy-subrc = 0.
        " Check the last GI date: select ERDAT from table VBFA. If there are multiple records sort to find the latest date ERDAT.
        SORT lt_outbound_deliveries  BY PrecedingDocument PrecedingDocumentItem erdat DESCENDING erzet DESCENDING.
        LOOP AT lt_ud_sto ASSIGNING <ls_ud_sto_result>.
          READ TABLE lt_vbfa_inbound ASSIGNING FIELD-SYMBOL(<ls_vbfa_inbound>) WITH KEY PrecedingDocument     = <ls_ud_sto_result>-inbound_dn
                                                                                        PrecedingDocumentItem = <ls_ud_sto_result>-inbound_dn_item.
          IF sy-subrc = 0.
            <ls_ud_sto_result>-latest_inbound_erdat  = <ls_vbfa_inbound>-erdat.
            <ls_ud_sto_result>-days_from_inbound_dn  = <ls_vbfa_inbound>-days_from_entry.
          ENDIF.
        ENDLOOP.
      ENDIF.

      DATA(lt_hus) = get_hu_info( it_items = VALUE #( FOR <ls_line> IN lt_ud_sto " CR 63689
                                                      ( vbeln = <ls_line>-inbound_dn
                                                        posnr = <ls_line>-inbound_dn_item ) )
                                  iv_process = iv_process ).

      " Determine the Under-Delivered STOs
      LOOP AT lt_ud_sto ASSIGNING FIELD-SYMBOL(<ls_ud_sto>).
        READ TABLE mt_hm_1081 ASSIGNING FIELD-SYMBOL(<ls_hm_1081>) WITH KEY field1 = <ls_ud_sto>-ekorg field2 = <ls_ud_sto>-bsart field3 = mv_sto_extra_indicator. "#EC CI_STDSEQ
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.
        " If there is no GoodsReceipt yet
        IF <ls_ud_sto>-dabmg = 0 AND <ls_ud_sto>-days_from_outbound_dn < mv_days_from_gi.
          CONTINUE.
          " if there are already some GoodsReceipt
        ELSEIF <ls_ud_sto>-dabmg > 0 AND <ls_ud_sto>-days_from_inbound_dn < mv_days_from_gr.
          CONTINUE.
        ENDIF.

        " CR 63689
        DATA(lv_short) = <ls_ud_sto>-quant_short.
        DATA(lv_process) = <ls_hm_1081>-field5.

        IF <ls_hm_1081>-field4 = abap_true AND lt_hus IS NOT INITIAL.

          LOOP AT lt_hus ASSIGNING FIELD-SYMBOL(<ls_hu>) WHERE vbeln = <ls_ud_sto>-inbound_dn AND
                                                               posnr = <ls_ud_sto>-inbound_dn_item.

            CHECK NOT line_exists( lt_sto_ud_log[ KEY key_fields COMPONENTS
                                                  under_delivered_sto = <ls_ud_sto>-ebeln
                                                  under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                                  under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                                  under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                                  under_delivered_hu = <ls_hu>-venum ] ).

            lt_sto_ud_log = VALUE #( BASE lt_sto_ud_log (
                                    under_delivered_sto       = <ls_ud_sto>-ebeln
                                    under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                    status                    = iv_status
                                    process                   = COND #( WHEN <ls_hu>-userst_t = zif_sd_sto_ud_const=>mc_hu_user_stat_t-refu
                                                                        THEN zif_sd_sto_ud_const=>mc_process-refusal
                                                                        ELSE lv_process )
                                    under_delivered_hu        = <ls_hu>-venum
                                    under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                    under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                    virtual_gr_ibd            = <ls_ud_sto>-inbound_dn
                                    virtual_gr_ibd_item       = <ls_ud_sto>-inbound_dn_item
                                    quantity_short            = <ls_hu>-menge
                                    waiting_days_from_gr      = mv_days_from_gr
                                    waiting_days_from_gi      = mv_days_from_gi
                                    created_on                = sy-datum ) ) .

          ENDLOOP.

        ELSE.

          lt_sto_ud_log = VALUE #( BASE lt_sto_ud_log (
                                    under_delivered_sto       = <ls_ud_sto>-ebeln
                                    under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                    status                    = iv_status
                                    process                   = lv_process
                                    under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                    under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                    virtual_gr_ibd            = <ls_ud_sto>-inbound_dn
                                    virtual_gr_ibd_item       = <ls_ud_sto>-inbound_dn_item
                                    quantity_short            = lv_short
                                    waiting_days_from_gr      = mv_days_from_gr
                                    waiting_days_from_gi      = mv_days_from_gi
                                    created_on                = sy-datum ) ) .
        ENDIF.

      ENDLOOP.
    ENDIF.

    mt_sto_ud_logs = lt_sto_ud_log.

    " Validate that the existing logs with higher status would not be overwritten
    IF lt_sto_ud_log IS NOT INITIAL.
      SELECT *                                "#EC CI_ALL_FIELDS_NEEDED
        FROM zsd_t_sto_ud_log
        FOR ALL ENTRIES IN @lt_sto_ud_log
        WHERE under_delivered_sto = @lt_sto_ud_log-under_delivered_sto
        AND under_delivered_sto_item = @lt_sto_ud_log-under_delivered_sto_item
        AND status <> @iv_status
        INTO TABLE @lt_sto_ud_log_to_exclude.             "#EC CI_SUBRC
    ENDIF.

    lts_sto_ud_log_to_update = FILTER #( lt_sto_ud_log EXCEPT IN lt_sto_ud_log_to_exclude USING KEY key_fields
                                         WHERE under_delivered_sto = under_delivered_sto AND
                                               under_delivered_sto_item = under_delivered_sto_item ).

    IF lts_sto_ud_log_to_update IS NOT INITIAL.
      update_ud_sto_log( lts_sto_ud_log_to_update ).
    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~find_under_delivery_sto_refu_2.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* KONRANAR     | 27.10.2023 | 26244 : HU CR 63689                      *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*

    DATA lt_sto_ud_log TYPE STANDARD TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE SORTED KEY
         key_fields COMPONENTS  under_delivered_sto under_delivered_sto_item under_delivered_dn under_delivered_dn_item under_delivered_hu.
    DATA lt_sto_ud_log_to_exclude TYPE STANDARD TABLE OF zsd_t_sto_ud_log WITH NON-UNIQUE SORTED KEY
         key_fields COMPONENTS  under_delivered_sto under_delivered_sto_item under_delivered_dn under_delivered_dn_item.
    DATA lts_sto_ud_log_to_update TYPE mtyp_t_sto_ud_log.


    SELECT
    FROM I_POSupplierConfirmationAPI01 AS supplier_confirmation
    INNER JOIN ekes AS ekes_tab  ON ekes_tab~ebeln = supplier_confirmation~PurchaseOrder
                                AND ekes_tab~ebelp = supplier_confirmation~PurchaseOrderItem
                                AND ekes_tab~etens = supplier_confirmation~SequentialNmbrOfSuplrConf
    FIELDS DISTINCT
      supplier_confirmation~PurchaseOrder                                                  AS ebeln,
      supplier_confirmation~PurchaseOrderItem                                              AS ebelp,
      supplier_confirmation~CreationDate                                                   AS erdat,
      supplier_confirmation~MRPRelevantQuantity                                            AS dabmg,
      supplier_confirmation~ConfirmedQuantity                                              AS menge,
      supplier_confirmation~ConfirmedQuantity - supplier_confirmation~MRPRelevantQuantity  AS quant_short,
      supplier_confirmation~DeliveryDocument                                               AS inbound_dn,
      supplier_confirmation~DeliveryDocumentItem                                           AS inbound_dn_item,
      ekes_tab~vbeln_st                                                                    AS outbound_dn,
      ekes_tab~vbelp_st                                                                    AS outbound_dn_item,
      CAST( '00000000' AS DATS )                                                           AS latest_outbound_erdat,
      CAST( '00000000' AS DATS )                                                           AS latest_inbound_erdat,
      CAST( 0 AS INT2 )                                                                    AS days_from_outbound_dn,
      CAST( 0 AS INT2 )                                                                    AS days_from_inbound_dn,
      \_PurchaseOrder-PurchaseOrderType                                                    AS bsart,
      \_PurchaseOrder-PurchasingOrganization                                               AS ekorg,
      \_PurchaseOrderItem-IsCompletelyDelivered                                            AS elikz,
      supplier_confirmation~SupplierConfirmationCategory                                   AS ebtyp
    WHERE \_PurchaseOrder-PurchaseOrderType                            IN @mt_bsart
      AND \_PurchaseOrder-PurchasingOrganization                       = @mv_ekorg
      AND \_PurchaseOrder-PurchasingGroup                              IN @mt_ekgrp
      AND \_PurchaseOrder-PurchaseOrder                                IN @mt_ebeln
      AND \_PurchaseOrderItem-Plant                                    IN @mt_werks_r
      AND \_PurchaseOrderItem-StorageLocation                          IN @mt_lgort
      AND \_PurchaseOrder-SupplyingPlant                               IN @mt_werks_s
      AND \_PurchaseOrderItem-PurchasingOrderReason                    IN @mt_bsgru
      AND \_PurchaseOrder-CreationDate                                 IN @mt_erdat
      AND \_PurchaseOrder-CreatedByUser                                IN @mt_ernam
      AND supplier_confirmation~SupplierConfirmationCategory           = 'LA'
      AND \_PurchaseOrder-PurchasingDocumentDeletionCode               = @space
      AND \_PurchaseOrderItem-PurchasingDocumentDeletionCode           = @space
      AND supplier_confirmation~IsDeleted                              = @space
      ORDER BY  supplier_confirmation~PurchaseOrder, supplier_confirmation~PurchaseOrderItem, supplier_confirmation~CreationDate
    INTO TABLE @DATA(lt_ud_sto).
    IF sy-subrc <> 0.
      RAISE EXCEPTION TYPE zcx_sd_sto_ud MESSAGE e003(zsd_sto_ud).
    ELSE.
      SELECT
      FROM I_SDDocumentMultiLevelProcFlow WITH PRIVILEGED ACCESS AS sd_doc_flow
      INNER JOIN @lt_ud_sto AS sto_ud  ON sd_doc_flow~PrecedingDocument          = sto_ud~outbound_dn
                                      AND sd_doc_flow~PrecedingDocumentItem      = sto_ud~outbound_dn_item
                                      AND sd_doc_flow~SubsequentDocumentCategory = 'R'
      FIELDS  sd_doc_flow~PrecedingDocument,
              sd_doc_flow~PrecedingDocumentItem,
              sd_doc_flow~CreationDate           AS erdat,
              sd_doc_flow~CreationTime           AS erzet,
              dats_days_between( sd_doc_flow~CreationDate, @sy-datum ) AS days_from_entry
      INTO TABLE @DATA(lt_vbfa_outbound)
        .
      IF sy-subrc = 0.
        " Check the last GI date: select ERDAT from table VBFA. If there are multiple records sort to find the latest date ERDAT.
        SORT lt_vbfa_outbound  BY PrecedingDocument PrecedingDocumentItem erdat DESCENDING erzet DESCENDING.
        LOOP AT lt_ud_sto ASSIGNING FIELD-SYMBOL(<ls_ud_sto_result>).
          READ TABLE lt_vbfa_outbound ASSIGNING FIELD-SYMBOL(<ls_vbfa_outbound>) WITH KEY PrecedingDocument     = <ls_ud_sto_result>-outbound_dn
                                                                                          PrecedingDocumentItem = <ls_ud_sto_result>-outbound_dn_item.
          IF sy-subrc = 0.
            <ls_ud_sto_result>-latest_outbound_erdat  = <ls_vbfa_outbound>-erdat.
            <ls_ud_sto_result>-days_from_outbound_dn  = <ls_vbfa_outbound>-days_from_entry.
          ENDIF.
        ENDLOOP.
      ENDIF.

      SELECT
      FROM I_SDDocumentMultiLevelProcFlow WITH PRIVILEGED ACCESS AS sd_doc_flow
      INNER JOIN @lt_ud_sto AS sto_ud  ON sd_doc_flow~PrecedingDocument          = sto_ud~inbound_dn
                                      AND sd_doc_flow~PrecedingDocumentItem      = sto_ud~inbound_dn_item
                                      AND sd_doc_flow~SubsequentDocumentCategory = 'R'
      FIELDS  sd_doc_flow~PrecedingDocument,
              sd_doc_flow~PrecedingDocumentItem,
              sd_doc_flow~CreationDate           AS erdat,
              sd_doc_flow~CreationTime           AS erzet,
              dats_days_between( sd_doc_flow~CreationDate, @sy-datum ) AS days_from_entry
      INTO TABLE @DATA(lt_vbfa_inbound)
        .
      IF sy-subrc = 0.
        " Check the last GI date: select ERDAT from table VBFA. If there are multiple records sort to find the latest date ERDAT.
        SORT lt_vbfa_outbound  BY PrecedingDocument PrecedingDocumentItem erdat DESCENDING erzet DESCENDING.
        LOOP AT lt_ud_sto ASSIGNING <ls_ud_sto_result>.
          READ TABLE lt_vbfa_inbound ASSIGNING FIELD-SYMBOL(<ls_vbfa_inbound>) WITH KEY PrecedingDocument     = <ls_ud_sto_result>-inbound_dn
                                                                                        PrecedingDocumentItem = <ls_ud_sto_result>-inbound_dn_item.
          IF sy-subrc = 0.
            <ls_ud_sto_result>-latest_inbound_erdat  = <ls_vbfa_inbound>-erdat.
            <ls_ud_sto_result>-days_from_inbound_dn  = <ls_vbfa_inbound>-days_from_entry.
          ENDIF.
        ENDLOOP.
      ENDIF.

      DATA(lt_hus) = get_hu_info( it_items = VALUE #( FOR <ls_line> IN lt_ud_sto " CR 63689
                                                      ( vbeln = <ls_line>-inbound_dn
                                                        posnr = <ls_line>-inbound_dn_item ) )
                                  iv_process = iv_process ).

      " Determine the Under-Delivered STOs
      LOOP AT lt_ud_sto ASSIGNING FIELD-SYMBOL(<ls_ud_sto>).
        READ TABLE mt_hm_1081 ASSIGNING FIELD-SYMBOL(<ls_hm_1081>) WITH KEY field1 = <ls_ud_sto>-ekorg field2 = <ls_ud_sto>-bsart field3 = mv_sto_extra_indicator. "#EC CI_STDSEQ
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.
        " If there is no GoodsReceipt yet
        IF <ls_ud_sto>-dabmg = 0 AND <ls_ud_sto>-days_from_outbound_dn < mv_days_from_gi.
          CONTINUE.
          " if there are already some GoodsReceipt
        ELSEIF <ls_ud_sto>-dabmg > 0 AND <ls_ud_sto>-days_from_inbound_dn < mv_days_from_gr.
          CONTINUE.
        ENDIF.

        IF <ls_hm_1081>-field4 = abap_true. "HU handling enabled

          LOOP AT lt_hus ASSIGNING FIELD-SYMBOL(<ls_hu>) WHERE vbeln = <ls_ud_sto>-inbound_dn AND
                                                               posnr = <ls_ud_sto>-inbound_dn_item.

            CHECK NOT line_exists( lt_sto_ud_log[ KEY key_fields COMPONENTS
                                                  under_delivered_sto = <ls_ud_sto>-ebeln
                                                  under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                                  under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                                  under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                                  under_delivered_hu = <ls_hu>-venum ] ).

            lt_sto_ud_log = VALUE #( BASE lt_sto_ud_log (
                                    under_delivered_sto       = <ls_ud_sto>-ebeln
                                    under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                    status                    = iv_status
                                    process                   = COND #( WHEN <ls_hu>-userst_t = zif_sd_sto_ud_const=>mc_hu_user_stat_t-refu
                                                                        THEN zif_sd_sto_ud_const=>mc_process-refusal
                                                                        ELSE <ls_hm_1081>-field5 )
                                    under_delivered_hu        = <ls_hu>-venum
                                    under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                    under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                    virtual_gr_ibd            = <ls_ud_sto>-inbound_dn
                                    virtual_gr_ibd_item       = <ls_ud_sto>-inbound_dn_item
                                    quantity_short            = <ls_hu>-menge
                                    waiting_days_from_gr      = mv_days_from_gr
                                    waiting_days_from_gi      = mv_days_from_gi
                                    created_on                = sy-datum ) ) .

          ENDLOOP.

        ELSE.

          lt_sto_ud_log = VALUE #( BASE lt_sto_ud_log (
                                    under_delivered_sto       = <ls_ud_sto>-ebeln
                                    under_delivered_sto_item  = <ls_ud_sto>-ebelp
                                    status                    = iv_status
                                    process                   = <ls_hm_1081>-field5
                                    under_delivered_dn        = <ls_ud_sto>-outbound_dn
                                    under_delivered_dn_item   = <ls_ud_sto>-outbound_dn_item
                                    virtual_gr_ibd            = <ls_ud_sto>-inbound_dn
                                    virtual_gr_ibd_item       = <ls_ud_sto>-inbound_dn_item
                                    quantity_short            = <ls_ud_sto>-quant_short
                                    waiting_days_from_gr      = mv_days_from_gr
                                    waiting_days_from_gi      = mv_days_from_gi
                                    created_on                = sy-datum
                                     ) ) .
        ENDIF.
      ENDLOOP.
    ENDIF.

    mt_sto_ud_logs = lt_sto_ud_log.

    " Validate that the existing logs with higher status would not be overwritten
    IF lt_sto_ud_log IS NOT INITIAL.
      SELECT *                                "#EC CI_ALL_FIELDS_NEEDED
        FROM zsd_t_sto_ud_log
        FOR ALL ENTRIES IN @lt_sto_ud_log
        WHERE under_delivered_sto = @lt_sto_ud_log-under_delivered_sto
        AND under_delivered_sto_item = @lt_sto_ud_log-under_delivered_sto_item
        AND status <> @iv_status
        INTO TABLE @lt_sto_ud_log_to_exclude.             "#EC CI_SUBRC
    ENDIF.

    lts_sto_ud_log_to_update = FILTER #( lt_sto_ud_log EXCEPT IN lt_sto_ud_log_to_exclude USING KEY key_fields
                                         WHERE under_delivered_sto = under_delivered_sto AND
                                               under_delivered_sto_item = under_delivered_sto_item ).

    IF lts_sto_ud_log_to_update IS NOT INITIAL.
      update_ud_sto_log( lts_sto_ud_log_to_update ).
    ENDIF.
  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~post_goods_issue.

************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    DATA ls_vbkok_wa TYPE vbkok.
    DATA lt_vbpok_tab  TYPE STANDARD TABLE OF vbpok.
    DATA lt_prot   TYPE STANDARD TABLE OF prott.
    DATA ls_return TYPE bapiret1.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    "Select all entries in the STO UD Log table with given status and process.
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status   iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      " Find their DN number: select BELNR from table EKBE where EBELN = virtual return STO number from Z table and VGABE = 8
      DATA(lt_ekbe_pgi) = get_ekbe_belnr_for_sto_created( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                           ( ebeln = ls_line-virtual_return_sto ) ) ).


      DATA(lt_deliveries_data) = get_deliveries_data( it_delivery_keys = VALUE #( FOR ls_ekbe_pgi_line IN lt_ekbe_pgi
                                                                                ( vbeln = ls_ekbe_pgi_line-belnr ) ) ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        CHECK <ls_sto_ud_log>-virt_return_sto_gi_matdoc IS INITIAL.
        " Here check if it was automatically created already...
        " Check Inbound Delivery is created automatically,
        SELECT SINGLE DeliveryDocument   AS vbeln    "#EC CI_SEL_NESTED
          FROM I_POSupplierConfirmationAPI01 AS sup_conf_ekes
          WHERE CAST( sup_conf_ekes~SupplierConfirmationExtNumber AS SSTRING ) = @<ls_sto_ud_log>-virtual_obd_created
          INTO @DATA(lv_refusal_ibd).
        IF sy-subrc = 0 AND lv_refusal_ibd IS NOT INITIAL.
          <ls_sto_ud_log>-status = iv_status.
          SELECT MaterialDocument AS mblnr, MaterialDocumentYear AS mjahr "#EC CI_SEL_NESTED
          FROM I_MaterialDocumentHeader_2
          WHERE DeliveryDocument = @ls_vbkok_wa-vbeln_vl " le_vbeln
          ORDER BY mblnr DESCENDING
          INTO TABLE @DATA(lt_ekko_1).
          IF sy-subrc = 0.
            <ls_sto_ud_log>-virt_return_sto_gi_matdoc = lt_ekko_1[ 1 ]-mblnr .
            <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year = lt_ekko_1[ 1 ]-mjahr.
          ENDIF.
        ELSE.


          DATA(ls_ekbe_pgi) = VALUE #( lt_ekbe_pgi[ ebeln = <ls_sto_ud_log>-virtual_return_sto ] OPTIONAL ).
          DATA(ls_lips) = VALUE #( lt_deliveries_data[ vbeln = ls_ekbe_pgi-belnr ] OPTIONAL ).

          ls_vbkok_wa-vbeln_vl = |{ ls_lips-vbeln ALPHA = IN }|.
          ls_vbkok_wa-vbeln    = |{ ls_lips-vbeln ALPHA = IN }|.
          ls_vbkok_wa-wabuc = abap_true.

          CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
            EXPORTING
              vbkok_wa               = ls_vbkok_wa
              synchron               = abap_true
              delivery               = ls_vbkok_wa-vbeln_vl
              if_error_messages_send = ' '
            TABLES
              vbpok_tab              = lt_vbpok_tab
              prot                   = lt_prot.

          IF line_exists( lt_prot[ msgty = 'E' ] ).
            DATA(ls_prot) = VALUE #( lt_prot[ msgty = 'E' ] OPTIONAL ).
            CALL FUNCTION 'BALW_BAPIRETURN_GET1'
              EXPORTING
                type       = ls_prot-msgty
                cl         = ls_prot-msgid
                number     = CONV symsgno( ls_prot-msgno )
                par1       = ls_prot-msgv1
                par2       = ls_prot-msgv2
                par3       = ls_prot-msgv3
                par4       = ls_prot-msgv4
              IMPORTING
                bapireturn = ls_return.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            <ls_sto_ud_log>-error_msg_no   = |{ ls_return-id }-{ ls_return-number }|.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            LOOP AT lt_prot ASSIGNING FIELD-SYMBOL(<ls_prot>) WHERE msgty = 'E'.
              CALL FUNCTION 'BALW_BAPIRETURN_GET1'
              EXPORTING
                type       = <ls_prot>-msgty
                cl         = <ls_prot>-msgid
                number     = CONV symsgno( <ls_prot>-msgno )
                par1       = <ls_prot>-msgv1
                par2       = <ls_prot>-msgv2
                par3       = <ls_prot>-msgv3
                par4       = <ls_prot>-msgv4
              IMPORTING
                bapireturn = ls_return.

              lt_message = VALUE #( BASE lt_message
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_prot>-msgid
                                      msg_no = <ls_prot>-msgno
                                      msg_type = <ls_prot>-msgty
                                      msg_text = ls_return-message
                                      message_v1 = <ls_prot>-msgv1
                                      message_v2 = <ls_prot>-msgv2
                                      message_v3 = <ls_prot>-msgv3
                                      message_v4 = <ls_prot>-msgv4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
            ENDLOOP.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            SELECT DISTINCT MaterialDocument AS mblnr, MaterialDocumentYear AS mjahr,
                   \_materialdocumentitem-purchaseorder AS ebeln,
                   \_materialdocumentitem-purchaseorderitem AS ebelp "#EC CI_SEL_NESTED
            FROM I_MaterialDocumentHeader_2
            WHERE DeliveryDocument = @ls_vbkok_wa-vbeln_vl
            ORDER BY mblnr DESCENDING
            INTO TABLE @DATA(lt_ekko).
            IF sy-subrc = 0.
              LOOP AT lt_ekko ASSIGNING FIELD-SYMBOL(<ls_new_ekko>) .
                ASSIGN lts_sto_ud_logs[ virtual_return_sto = <ls_new_ekko>-ebeln
                                        virtual_return_sto_item = <ls_new_ekko>-ebelp ] TO FIELD-SYMBOL(<ls_change>).
                IF sy-subrc = 0.
                  <ls_change>-virt_return_sto_gi_matdoc = <ls_new_ekko>-mblnr .
                  <ls_change>-virt_return_sto_gi_matdoc_year = <ls_new_ekko>-mjahr.
                  <ls_change>-status = iv_status.
                ELSE.
                  <ls_sto_ud_log>-virt_return_sto_gi_matdoc = <ls_new_ekko>-mblnr .
                  <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year = <ls_new_ekko>-mjahr.
                ENDIF.
              ENDLOOP.
            ENDIF.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
          CLEAR: ls_vbkok_wa.
        ENDIF.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~post_goods_issue_refusal.

************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    DATA ls_vbkok_wa TYPE vbkok.
    DATA lt_vbpok_tab  TYPE STANDARD TABLE OF vbpok.
    DATA lt_prot   TYPE STANDARD TABLE OF prott.
    DATA ls_return TYPE bapiret1.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    "Select all entries in the STO UD Log table with given status and process.
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status   iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      " Find their DN number: select BELNR from table EKBE where EBELN = virtual return STO number from Z table and VGABE = 1
      DATA(lt_ekbe_pgi) = get_ekbe_pgi_for_refuse_return( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                           ( ebeln = ls_line-virtual_return_sto
                                                                                             xblnr = ls_line-virtual_obd_created ) ) ).


      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        CHECK <ls_sto_ud_log>-virt_return_sto_gi_matdoc IS INITIAL.
        " Here check if it was automatically created already...
        " Check Inbound Delivery is created automatically,
        READ TABLE lt_ekbe_pgi ASSIGNING FIELD-SYMBOL(<ls_ekbe_pgi>) WITH KEY ebeln = <ls_sto_ud_log>-virtual_return_sto.
        IF sy-subrc = 0 AND <ls_ekbe_pgi>-belnr IS NOT INITIAL.

          <ls_sto_ud_log>-status = iv_status.
          <ls_sto_ud_log>-virt_return_sto_gi_matdoc = <ls_ekbe_pgi>-belnr.
          <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year = sy-datum(4).
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ELSE.



          ls_vbkok_wa-vbeln_vl = |{ <ls_sto_ud_log>-virtual_obd_created ALPHA = IN }|.
          ls_vbkok_wa-vbeln    = |{ <ls_sto_ud_log>-virtual_obd_created ALPHA = IN }|.
          ls_vbkok_wa-wabuc = abap_true.

          CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
            EXPORTING
              vbkok_wa               = ls_vbkok_wa
              synchron               = abap_true
              delivery               = ls_vbkok_wa-vbeln_vl
              if_error_messages_send = ' '
            TABLES
              vbpok_tab              = lt_vbpok_tab
              prot                   = lt_prot.

          IF line_exists( lt_prot[ msgty = 'E' ] ).
            DATA(ls_prot) = VALUE #( lt_prot[ msgty = 'E' ] OPTIONAL ).
            CALL FUNCTION 'BALW_BAPIRETURN_GET1'
              EXPORTING
                type       = ls_prot-msgty
                cl         = ls_prot-msgid
                number     = CONV symsgno( ls_prot-msgno )
                par1       = ls_prot-msgv1
                par2       = ls_prot-msgv2
                par3       = ls_prot-msgv3
                par4       = ls_prot-msgv4
              IMPORTING
                bapireturn = ls_return.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            <ls_sto_ud_log>-error_msg_no   = |{ ls_return-id }-{ ls_return-number }|.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            LOOP AT lt_prot ASSIGNING FIELD-SYMBOL(<ls_prot>) WHERE msgty = 'E'.
              CALL FUNCTION 'BALW_BAPIRETURN_GET1'
              EXPORTING
                type       = <ls_prot>-msgty
                cl         = <ls_prot>-msgid
                number     = CONV symsgno( <ls_prot>-msgno )
                par1       = <ls_prot>-msgv1
                par2       = <ls_prot>-msgv2
                par3       = <ls_prot>-msgv3
                par4       = <ls_prot>-msgv4
              IMPORTING
                bapireturn = ls_return.

              lt_message = VALUE #( BASE lt_message
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_prot>-msgid
                                      msg_no = <ls_prot>-msgno
                                      msg_type = <ls_prot>-msgty
                                      msg_text = ls_return-message
                                      message_v1 = <ls_prot>-msgv1
                                      message_v2 = <ls_prot>-msgv2
                                      message_v3 = <ls_prot>-msgv3
                                      message_v4 = <ls_prot>-msgv4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
            ENDLOOP.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            SELECT MaterialDocument AS mblnr, MaterialDocumentYear AS mjahr,
                   \_materialdocumentitem-purchaseorder AS ebeln,
                   \_materialdocumentitem-purchaseorderitem AS ebelp "#EC CI_SEL_NESTED
            FROM I_MaterialDocumentHeader_2
            WHERE DeliveryDocument = @ls_vbkok_wa-vbeln_vl
            ORDER BY mblnr DESCENDING
            INTO TABLE @DATA(lt_ekko).
            IF sy-subrc = 0.
              LOOP AT lt_ekko ASSIGNING FIELD-SYMBOL(<ls_new_ekko>) .
                ASSIGN lts_sto_ud_logs[ virtual_return_sto = <ls_new_ekko>-ebeln
                                        virtual_return_sto_item = <ls_new_ekko>-ebelp ] TO FIELD-SYMBOL(<ls_change>).
                IF sy-subrc = 0.
                  <ls_change>-virt_return_sto_gi_matdoc = <ls_new_ekko>-mblnr .
                  <ls_change>-virt_return_sto_gi_matdoc_year = <ls_new_ekko>-mjahr.
                  <ls_change>-status = iv_status.
                ELSE.
                  <ls_sto_ud_log>-virt_return_sto_gi_matdoc = <ls_new_ekko>-mblnr .
                  <ls_sto_ud_log>-virt_return_sto_gi_matdoc_year = <ls_new_ekko>-mjahr.
                ENDIF.
              ENDLOOP.
            ENDIF.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
          ENDIF.
          CLEAR: ls_vbkok_wa.
        ENDIF.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~post_gr_for_virtual_return_sto.

************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 31.10.2023 | 26244 : CR 63689 HU addit                *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    DATA ls_goodsmvt_header TYPE bapi2017_gm_head_01 .
    DATA ls_goodsmvt_code   TYPE bapi2017_gm_code .
    DATA lt_goodsmvt_item   TYPE STANDARD TABLE OF bapi2017_gm_item_create.
    DATA lt_return          TYPE STANDARD TABLE OF bapiret2.
    DATA ls_goodsmvt_headret TYPE bapi2017_gm_head_ret.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.

    "Select all entries in the STO UD Log table with given status and process.
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status  = iv_prev_status   iv_process = iv_process  ).

    IF lts_sto_ud_logs IS NOT INITIAL.
      DATA(lt_po_items) = get_purchase_orders_data( it_purchase_order_keys = VALUE #( FOR ls_line IN lts_sto_ud_logs
                                                                                    ( ebeln = ls_line-virtual_return_sto ) ) ).

      DATA(ls_hm_bwart_161) = VALUE #( mt_hm_876_bwart[ field1 = '161' ] OPTIONAL ).


      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).

        ls_goodsmvt_code = zif_sd_sto_ud_const=>mc_goodsmvt_code-code_01.
        ls_goodsmvt_header-doc_date = sy-datum.
        ls_goodsmvt_header-pstng_date = sy-datum.
        ls_goodsmvt_header-pr_uname = sy-uname.

        LOOP AT lt_po_items ASSIGNING FIELD-SYMBOL(<ls_return_sto_item>) WHERE ebeln = <ls_sto_ud_log>-virtual_return_sto AND ebelp = <ls_sto_ud_log>-virtual_return_sto_item. "#EC CI_STDSEQ  "#EC CI_NESTED
          lt_goodsmvt_item = VALUE #( BASE lt_goodsmvt_item
                                      ( po_number            = <ls_return_sto_item>-ebeln
                                        po_item              = <ls_return_sto_item>-ebelp
                                        move_type            =  ls_hm_bwart_161-field1 " 161
                                        mvt_ind              = zif_sd_sto_ud_const=>mc_movement_indicator-purchase_order "'B'
                                        stck_type            = cl_atp_customizing_c=>stock_type_blocked "CR 63689
                                        entry_qnt            = <ls_sto_ud_log>-quantity_short
                                        entry_uom            = <ls_return_sto_item>-meins
                                        entry_uom_iso        = <ls_sto_ud_log>-quantity_short
                                        plant                = <ls_return_sto_item>-werks
                                        material             = <ls_return_sto_item>-matnr
                                        stge_loc             = <ls_return_sto_item>-lgort
                                         ) ) .

        ENDLOOP.

        " post the GR for the Virtual return STO
        CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
          EXPORTING
            goodsmvt_header  = ls_goodsmvt_header
            goodsmvt_code    = ls_goodsmvt_code
          IMPORTING
            goodsmvt_headret = ls_goodsmvt_headret
          TABLES
            goodsmvt_item    = lt_goodsmvt_item
            return           = lt_return.
        IF line_exists( lt_return[ type = 'E' ] ).
          DATA(ls_return) = VALUE #( lt_return[ type = 'E' ] OPTIONAL ). "#EC CI_STDSEQ
          <ls_sto_ud_log>-error_msg_no = |{ ls_return-id }-{ ls_return-number }|.
          <ls_sto_ud_log>-error_msg_text = ls_return-message.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
          lt_message = VALUE #( BASE lt_message
                                  FOR <ls_message> IN lt_return WHERE ( type = 'E' OR type = 'A' )
                                  ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                    under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                    under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                    under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                    under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                    msg_id = <ls_message>-id
                                    msg_no = <ls_message>-number
                                    msg_type = <ls_message>-type
                                    msg_text = ls_return-message
                                    message_v1 = <ls_message>-message_v1
                                    message_v2 = <ls_message>-message_v2
                                    message_v3 = <ls_message>-message_v3
                                    message_v4 = <ls_message>-message_v4
                                    creation_date = sy-datum
                                    creation_time = sy-uzeit ) ).
        ELSE.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
          <ls_sto_ud_log>-status = iv_status.
          <ls_sto_ud_log>-virt_return_sto_gr_matdoc = ls_goodsmvt_headret-mat_doc.
          <ls_sto_ud_log>-virt_return_sto_gr_matdoc_year = ls_goodsmvt_headret-doc_year.
          CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
        ENDIF.

        CLEAR: lt_goodsmvt_item.
      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).
    ENDIF.

  ENDMETHOD.


  METHOD zif_sd_sto_process_handler~post_virtual_goods_receipt.
************************************************************************
*  R E V I S I O N   H I S T O R Y                                     *
************************************************************************
* AUTHOR       | DATE       | CHANGE NUMBER & DESCRIPTION              *
*              |            | TRANSPORT REQUESTS                       *
************************************************************************
* ADAKHIKB     | 13.02.2023 | 17175 : Virutal Return STO UnderDelivery *
*              |            | DS4K941244                               *
*----------------------------------------------------------------------*
* ADAKHIKB     | 09.08.2023 | 19848 : STO UnderDelivery Handling       *
*              |            | DS4K949317                               *
*----------------------------------------------------------------------*
* konranar     | 27.10.2023 | 26244 : CR 8928 HU addit                 *
*              |            | DS4K968189                               *
*----------------------------------------------------------------------*
    TYPES: BEGIN OF ltyp_s_vbeln_matdoc,
             vbeln TYPE vbeln,
             mblnr TYPE mblnr,
             mjahr TYPE mjahr,
           END OF ltyp_s_vbeln_matdoc,
           ltyp_t_vbeln_matdoc TYPE STANDARD TABLE OF ltyp_s_vbeln_matdoc WITH KEY primary_key COMPONENTS vbeln.

    DATA: lt_vbeln_matdoc TYPE ltyp_t_vbeln_matdoc.
    DATA ls_vbkok_wa  TYPE vbkok.
    DATA lt_vbpok_tab TYPE STANDARD TABLE OF vbpok.
    DATA lt_prot      TYPE STANDARD TABLE OF prott.
    DATA ls_return    TYPE bapiret1 .
    DATA lt_emptykey TYPE STANDARD TABLE OF zsd_t_sto_ud_log WITH EMPTY KEY.
    DATA lt_message TYPE mtyp_t_sto_ud_msg.
    DATA lt_partial_gr_objects TYPE TABLE OF pgr_objects.

    zcl_sd_sto_ud_process_virt_ret=>gv_step_2 = abap_true.

    " Get the Under-delivered STOs info from the log table
    DATA(lts_sto_ud_logs) = get_sto_ud_logs( iv_status = iv_prev_status   iv_process = iv_process ).
    IF lts_sto_ud_logs IS NOT INITIAL.
      lt_emptykey = lts_sto_ud_logs.
      "additional info for PO CR 63689
      SELECT
        supplier_confirmation~PurchaseOrder                                                  AS ebeln,
        supplier_confirmation~PurchaseOrderItem                                              AS ebelp,
        \_PurchaseOrder-PurchaseOrderType                                                    AS bsart,
        \_PurchaseOrder-PurchasingOrganization                                               AS ekorg,
        \_PurchaseOrderItem-storagelocation                                                  AS lgort,
        \_PurchaseOrderItem-plant                                                            AS store
        FROM I_POSupplierConfirmationAPI01 AS supplier_confirmation
        INNER JOIN @lt_emptykey AS lt ON lt~under_delivered_sto      = supplier_confirmation~PurchaseOrder  AND
                                       lt~under_delivered_sto_item = supplier_confirmation~PurchaseOrderItem
        INTO TABLE @DATA(lt_po_info).
      IF sy-subrc <> 0.
        CLEAR: lt_po_info.
      ENDIF.

      TRY.
          DATA(ls_cust) = cl_rtst_rcv_product_utils=>get_instance( )->read_customizing( VALUE #( lt_po_info[ 1 ]-store OPTIONAL ) ).
        CATCH /iwbep/cx_mgw_tech_exception
              /iwbep/cx_mgw_busi_exception.
          CLEAR: ls_cust.
      ENDTRY.

      DATA(lt_deliveries_data)   = get_deliveries_data( it_delivery_keys = VALUE #( FOR ls_sto_ud_log IN lts_sto_ud_logs
                                                                                   ( vbeln = ls_sto_ud_log-virtual_gr_ibd ) ) ).
      vldt_plant_sloc_exist_in_hm( ).

      LOOP AT lts_sto_ud_logs ASSIGNING FIELD-SYMBOL(<ls_sto_ud_log>).
        DATA(ls_delivery_data) = VALUE #( lt_deliveries_data[ vbeln = <ls_sto_ud_log>-virtual_gr_ibd ] OPTIONAL ). "#EC CI_STDSEQ
        IF ls_delivery_data-wbstk <> 'C'.
          CLEAR: lt_partial_gr_objects, lt_vbpok_tab.
          ls_vbkok_wa-vbeln_vl = |{ <ls_sto_ud_log>-virtual_gr_ibd ALPHA = IN }|.
          ls_vbkok_wa-vbeln    = |{ <ls_sto_ud_log>-virtual_gr_ibd ALPHA = IN }|.
          ls_vbkok_wa-wabuc = abap_true.
          ls_vbkok_wa-wadat_ist = sy-datlo.
          IF <ls_sto_ud_log>-under_delivered_hu IS NOT INITIAL.
            ls_vbkok_wa-kzebu = abap_true.
            lt_partial_gr_objects = VALUE #( ( objtyp = '01' objkey = <ls_sto_ud_log>-under_delivered_hu ) ).

            CALL FUNCTION 'HU_PACKING_REFRESH'.
            CALL FUNCTION 'SERIAL_INTTAB_REFRESH'
              EXPORTING
                objects_status_refresh = 'C'.
            lt_vbpok_tab = VALUE #( ( vbeln_vl = ls_vbkok_wa-vbeln_vl
                                      posnr_vl = |{ <ls_sto_ud_log>-virtual_gr_ibd_item ALPHA = IN }|
                                      lgort    = VALUE #( lt_po_info[ ebeln = <ls_sto_ud_log>-under_delivered_sto
                                                                      ebelp = <ls_sto_ud_log>-under_delivered_sto_item ]-lgort OPTIONAL )
                                      bwart    =  ls_cust-movement_type_ref_doc
                                      ebumg_bme = <ls_sto_ud_log>-quantity_short
                                      insmk = cl_atp_customizing_c=>stock_type_blocked
                                      taqui = abap_true
                                      pikmg = <ls_sto_ud_log>-quantity_short
                                      lfimg = <ls_sto_ud_log>-quantity_short
                                      lgmng = <ls_sto_ud_log>-quantity_short ) ).
          ELSE.
            READ TABLE lt_vbeln_matdoc WITH TABLE KEY vbeln = ls_vbkok_wa-vbeln_vl ASSIGNING FIELD-SYMBOL(<ls_vbeln_matdoc>).
            IF sy-subrc = 0.
              <ls_sto_ud_log>-status = iv_status.
              <ls_sto_ud_log>-virtual_gr_matdoc = <ls_vbeln_matdoc>-mblnr.
              <ls_sto_ud_log>-virtual_gr_matdoc_year = <ls_vbeln_matdoc>-mjahr.
              CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
              CONTINUE.
            ENDIF.
          ENDIF.

          CALL FUNCTION 'WS_DELIVERY_UPDATE_2'
            EXPORTING
              vbkok_wa               = ls_vbkok_wa
              synchron               = abap_true
              delivery               = ls_vbkok_wa-vbeln_vl
              if_error_messages_send = ' '
            TABLES
              vbpok_tab              = lt_vbpok_tab
              prot                   = lt_prot
              it_objects             = lt_partial_gr_objects.

          IF line_exists( lt_prot[ msgty = 'E' ] ).
            DATA(ls_prot) = VALUE #( lt_prot[ msgty = 'E' ] OPTIONAL ).
            CALL FUNCTION 'BALW_BAPIRETURN_GET1'
              EXPORTING
                type       = ls_prot-msgty
                cl         = ls_prot-msgid
                number     = CONV symsgno( ls_prot-msgno )
                par1       = ls_prot-msgv1
                par2       = ls_prot-msgv2
                par3       = ls_prot-msgv3
                par4       = ls_prot-msgv4
              IMPORTING
                bapireturn = ls_return.
            <ls_sto_ud_log>-error_msg_text = ls_return-message.
            <ls_sto_ud_log>-error_msg_no   = |{ ls_return-id }-{ ls_return-number }|.
            APPEND VALUE #( vbeln = ls_vbkok_wa-vbeln_vl ) TO lt_vbeln_matdoc.
            CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
            LOOP AT lt_prot ASSIGNING FIELD-SYMBOL(<ls_prot>) WHERE msgty = 'E'.
              CALL FUNCTION 'BALW_BAPIRETURN_GET1'
                EXPORTING
                  type       = <ls_prot>-msgty
                  cl         = <ls_prot>-msgid
                  number     = CONV symsgno( <ls_prot>-msgno )
                  par1       = <ls_prot>-msgv1
                  par2       = <ls_prot>-msgv2
                  par3       = <ls_prot>-msgv3
                  par4       = <ls_prot>-msgv4
                IMPORTING
                  bapireturn = ls_return.

              lt_message = VALUE #( BASE lt_message
                                    ( under_delivered_sto = <ls_sto_ud_log>-under_delivered_sto
                                      under_delivered_sto_item = <ls_sto_ud_log>-under_delivered_sto_item
                                      under_delivered_dn = <ls_sto_ud_log>-under_delivered_dn
                                      under_delivered_dn_item = <ls_sto_ud_log>-under_delivered_dn_item
                                      under_delivered_hu = <ls_sto_ud_log>-under_delivered_hu step = iv_status
                                      msg_id = <ls_prot>-msgid
                                      msg_no = <ls_prot>-msgno
                                      msg_type = <ls_prot>-msgty
                                      msg_text = ls_return-message
                                      message_v1 = <ls_prot>-msgv1
                                      message_v2 = <ls_prot>-msgv2
                                      message_v3 = <ls_prot>-msgv3
                                      message_v4 = <ls_prot>-msgv4
                                      creation_date = sy-datum
                                      creation_time = sy-uzeit ) ).
            ENDLOOP.
          ELSE.
            CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
            <ls_sto_ud_log>-status = iv_status.
            DATA(ls_vbfa) =  get_latest_gm_doc_sd_flow( iv_vbeln = ls_vbkok_wa-vbeln_vl ).
            <ls_sto_ud_log>-virtual_gr_matdoc = ls_vbfa-subsequentdocument.
            <ls_sto_ud_log>-virtual_gr_matdoc_year = ls_vbfa-MaterialDocumentYear.
            CLEAR: <ls_sto_ud_log>-error_msg_no, <ls_sto_ud_log>-error_msg_text.
            APPEND VALUE #( vbeln = ls_vbkok_wa-vbeln_vl
                            mblnr = ls_vbfa-subsequentdocument
                            mjahr = ls_vbfa-MaterialDocumentYear ) TO lt_vbeln_matdoc.
          ENDIF.
          CLEAR: ls_vbkok_wa.
        ENDIF.
        "additional check CR 63689
        READ TABLE lt_po_info ASSIGNING FIELD-SYMBOL(<ls_po>) WITH KEY ebeln = <ls_sto_ud_log>-under_delivered_sto ebelp = <ls_sto_ud_log>-under_delivered_sto_item.
        IF sy-subrc = 0.
          READ TABLE mt_hm_1081 ASSIGNING FIELD-SYMBOL(<ls_hm_1081>) WITH KEY field1 = <ls_po>-ekorg field2 = <ls_po>-bsart field3 = mv_sto_extra_indicator.
          IF sy-subrc <> 0.
            CONTINUE.
          ENDIF.
        ENDIF.

        " Change handling unit status for virtual return and downadjustment process
        IF iv_process <> zif_sd_sto_ud_const=>mc_process-refusal AND <ls_sto_ud_log>-virtual_gr_matdoc IS NOT INITIAL AND <ls_hm_1081>-field4 = abap_true AND
          <ls_sto_ud_log>-under_delivered_hu IS NOT INITIAL.

          zcl_sd_rp_hu_status=>get_instance( )->update_hu_status( iv_handling_unit_id = <ls_sto_ud_log>-under_delivered_hu
                                                                   iv_new_status       = 'VRET' ).

          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT' EXPORTING wait = abap_true.
        ENDIF.

      ENDLOOP.

      update_ud_sto_log( its_ud_sto_log = lts_sto_ud_logs
                         it_messages = lt_message ).

    ENDIF.

    zcl_sd_sto_ud_process_virt_ret=>gv_step_2 = abap_false.

  ENDMETHOD.
ENDCLASS.