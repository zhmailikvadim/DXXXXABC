FUNCTION TSEG_DIALOG_DATA
  IMPORTING
    VALUE(IF_HANDLE) TYPE TSEGHDLHDR
    VALUE(IF_DIALOG_VIEW) TYPE TSEGTEMPLV OPTIONAL
    VALUE(IF_DIALOG_ZONE) TYPE TIMEZONE OPTIONAL
  EXPORTING
    VALUE(ET_DIAE) TYPE TSEG_DIAETAB
    VALUE(ET_DIAI) TYPE TSEG_DIAITAB
    VALUE(ES_DIAH) TYPE TSEG_DIAHWA
  EXCEPTIONS
    FATAL_ERROR.



DATA:
  LX_HEADER          TYPE  TSEG_HEADERDATAWA,
  LX_TEMPLATE        TYPE  TSEG_TEMPLATECUSTWA,
  LF_TEMPLATE_VIEW   TYPE  TSEGTEMPLV,
  LS_ROW             TYPE  TSEGDIAROW,
  LS_COL             TYPE  TSEGDIACOL,
  LS_DIAH            TYPE  ITSEGDIAH,
* ls_diai            TYPE  itsegdiai,
  LS_DIAIACT         TYPE  TSEG_DIAISORTWA,
  LS_DIAIBEF         TYPE  TSEG_DIAISORTWA,
  LS_DIAE            TYPE  TSEG_DIAEWA,
  LT_DIAE            TYPE  TSEG_DIAETAB,
  LS_EVCNRANGE       TYPE  TSEG_EVCNRANGEWA,
  LS_EVVTRANGE       TYPE  TSEG_EVVTRANGEWA,
  LS_EVVNRANGE       TYPE  TSEG_EVVNRANGEWA,
  LT_EVCNRANGE       TYPE  TSEG_EVCNRANGETAB,
  LT_EVVTRANGE       TYPE  TSEG_EVVTRANGETAB,
  LT_EVVNRANGE       TYPE  TSEG_EVVNRANGETAB,
  LF_FNAM            TYPE  FIELDNAME,
  LS_SORT            TYPE TSEG_SORTWA,
  LT_SORT            TYPE TSEG_SORTTAB,
  LF_MAXCOL          TYPE I,
  LF_SUBRC           TYPE I.
DATA:
  LF_EVEN_FLGAP  TYPE TSEGEVTAPP.

FIELD-SYMBOLS:
  <DIAE>             TYPE  ITSEGDIAE,
  <DIAI>             TYPE  ITSEGDIAI,
  <EVCNRANG>         TYPE  ITSEGEVCN,
  <EVVTRANG>         TYPE  ITSEGEVVT,
  <EVVNRANG>         TYPE  ITSEGEVVN,
  <TPLECUST>         TYPE  TSEG_TPLECUSTWA,
  <TPLVCUST>         TYPE  TSEG_TPLVCUSTWA,
  <EVTYCUST>         TYPE  TSEG_EVTYCUSTWA,
  <TIMECUST>         TYPE  TSEG_TIMECUSTWA,
  <FS1>,
  <FS2>,
  <APPL>             TYPE TSEG_APPLKEYWA.

* read header
READ TABLE GT_HEADER INTO LX_HEADER
    WITH TABLE KEY
        HEAD_HDL = IF_HANDLE.
IF NOT SY-SUBRC IS INITIAL.
* RAISE HANDLE_NOT_FOUND.
  RAISE FATAL_ERROR.
ENDIF.

* read template
READ TABLE GT_TEMPLATE INTO LX_TEMPLATE
    WITH TABLE KEY
        TEPL = LX_HEADER-HEAD_TPL.
IF NOT SY-SUBRC IS INITIAL.
  RAISE FATAL_ERROR.
ENDIF.

* read template view
IF IF_DIALOG_VIEW IS INITIAL.
  LF_TEMPLATE_VIEW = LX_TEMPLATE-TEPL_VIWDF.
ELSE.
  LF_TEMPLATE_VIEW = IF_DIALOG_VIEW.
ENDIF.
*
IF LF_TEMPLATE_VIEW IS INITIAL.
  RAISE FATAL_ERROR.
ELSE.
  READ TABLE LX_TEMPLATE-TPLV ASSIGNING <TPLVCUST>
      WITH TABLE KEY
          TEPL_VIW  =  LF_TEMPLATE_VIEW.
  IF NOT SY-SUBRC IS INITIAL.
    RAISE FATAL_ERROR.
  ENDIF.
ENDIF.

* build range tabs
* .. version count
LT_EVCNRANGE[] = LX_HEADER-EVCN[].
*     .. enhance with default events (if not existing yet)
LOOP AT LX_TEMPLATE-TPLE ASSIGNING <TPLECUST>
    WHERE EVEN_FLGOP = GC_FALSE.
  READ TABLE LT_EVCNRANGE
      WITH TABLE KEY
          EVEN     = <TPLECUST>-EVEN
          EVEN_CNT = GC_EVEN_COUNT_INITIAL
      TRANSPORTING NO FIELDS.
  IF NOT SY-SUBRC IS INITIAL.
    CLEAR LS_EVCNRANGE.
    LS_EVCNRANGE-EVEN     =  <TPLECUST>-EVEN.
    LS_EVCNRANGE-EVEN_CNT =  GC_EVEN_COUNT_INITIAL.
    INSERT LS_EVCNRANGE INTO TABLE LT_EVCNRANGE.
  ENDIF.
ENDLOOP.
* ..version type
CASE <TPLVCUST>-TEPL_RANVT.
  WHEN GC_VERTY_SPACE.   "nur Plan               (TSEGVERTYP = 0)
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_0.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
  WHEN GC_VERTY_0.       "nur Plan               (TSEGVERTYP = 0)
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_0.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
  WHEN GC_VERTY_1.       "Plan und Ist           (TSEGVERTYP = 0 + 1)
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_0.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_1.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
  WHEN GC_VERTY_2.       "Plan, Ist und Prognose (TSEGVERTYP = 0, 1 + 2)
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_0.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_1.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
    LS_EVVTRANGE-EVEN_VERTY = GC_VERTY_2.
    INSERT LS_EVVTRANGE INTO TABLE LT_EVVTRANGE.
ENDCASE.
* .. version number
*    --> NOT supported yet
LS_EVVNRANGE-EVEN_VERNU = 0.
INSERT LS_EVVNRANGE INTO TABLE LT_EVVNRANGE.


FREE LX_HEADER-DIAI.
*-----------------------------------------------------------------------
* build dialog item table internal (DIAI)
*-----------------------------------------------------------------------
LOOP AT LT_EVCNRANGE ASSIGNING <EVCNRANG>.
  READ TABLE LX_TEMPLATE-TPLE ASSIGNING <TPLECUST>
      WITH TABLE KEY
          TEPL = LX_HEADER-HEAD_TPL
          EVEN = <EVCNRANG>-EVEN.
  IF NOT SY-SUBRC IS INITIAL.
    RAISE FATAL_ERROR.
  ENDIF.
  LOOP AT LT_EVVTRANGE ASSIGNING <EVVTRANG>.
    LOOP AT LT_EVVNRANGE ASSIGNING <EVVNRANG>.
      PERFORM INSERT_DIAI
          USING <EVCNRANG>
                <EVVTRANG>
                <EVVNRANG>
                LX_TEMPLATE
          CHANGING
                LX_HEADER.
    ENDLOOP.
  ENDLOOP.
ENDLOOP.

* sort dialog table internal (DIAI)
SORT LX_HEADER-DIAI BY
    (<TPLVCUST>-TEPL_FIE01)
    (<TPLVCUST>-TEPL_FIE02)
    (<TPLVCUST>-TEPL_FIE03)
    (<TPLVCUST>-TEPL_FIE04)
    (<TPLVCUST>-TEPL_FIE05)
    (<TPLVCUST>-TEPL_FIE06).

* extract sort fields from template view into itab
DO 6 TIMES
    VARYING LS_SORT-SORTFLD
    FROM <TPLVCUST>-TEPL_FIE01
    NEXT <TPLVCUST>-TEPL_FIE02.
  LS_SORT-SORTPOS = SY-INDEX.
  APPEND LS_SORT TO LT_SORT.
ENDDO.

* set row/column
LOOP AT LX_HEADER-DIAI ASSIGNING <DIAI>.
  CLEAR LS_DIAIACT.
  LOOP AT LT_SORT INTO LS_SORT.
    CONCATENATE '<DIAI>-' LS_SORT-SORTFLD INTO LF_FNAM.
    ASSIGN (LF_FNAM) TO <FS1>.
    CONCATENATE 'LS_DIAIACT-'  LS_SORT-SORTFLD INTO LF_FNAM.
    ASSIGN (LF_FNAM) TO <FS2>.
    <FS2> = <FS1>.
    IF SY-TABIX = <TPLVCUST>-TEPL_VIWLI.
      EXIT.
    ENDIF.
  ENDLOOP.
* set row/col
  IF LS_DIAIACT <> LS_DIAIBEF.
    ADD 1 TO LS_ROW.
    CLEAR    LS_COL.
  ENDIF.
  ADD 1 TO LS_COL.
  <DIAI>-DIAG_ROW = LS_ROW.
  <DIAI>-DIAG_COL = LS_COL.
  LS_DIAIBEF      = LS_DIAIACT.
ENDLOOP.

* export dialog table internal
ET_DIAI[] = LX_HEADER-DIAI[].


*-----------------------------------------------------------------------
* build dialog header table external (diah)
*-----------------------------------------------------------------------
* .. header
CLEAR LS_DIAH.
LS_DIAH-HEAD_HDL    = LX_HEADER-HEAD_HDL.
*s_diah-head_txt    =
LS_DIAH-HEAD_DISPF  = GC_FALSE.

* .. version type   -> display only if on row level
READ TABLE LT_SORT INTO LS_SORT
    WITH KEY
        SORTFLD  = 'EVEN_VERTY'.
IF SY-SUBRC IS INITIAL AND LS_SORT-SORTPOS <= <TPLVCUST>-TEPL_VIWLI.
  LS_DIAH-EVEN_VERTF  =  GC_TRUE.
ENDIF.

* .. version number -> display only if on row level
READ TABLE LT_SORT INTO LS_SORT
    WITH KEY
        SORTFLD  = 'EVEN_VERNU'.
IF SY-SUBRC IS INITIAL AND LS_SORT-SORTPOS <= <TPLVCUST>-TEPL_VIWLI.
  LS_DIAH-EVEN_VERNF  =  GC_TRUE.
ENDIF.

* .. time type (begin/end) -> display only if on row level
READ TABLE LT_SORT INTO LS_SORT
    WITH KEY
        SORTFLD  = 'EVEN_TIMTY'.
IF SY-SUBRC IS INITIAL AND LS_SORT-SORTPOS <= <TPLVCUST>-TEPL_VIWLI.
  LS_DIAH-EVEN_TIMTF  = GC_TRUE.
ENDIF.

* .. version counter flag
LS_DIAH-EVEN_COUNF = <TPLVCUST>-TEPL_DISEC.
* .. sort flag
LS_DIAH-EVEN_SORTF = <TPLVCUST>-TEPL_DISSO.
* .. text flag
LS_DIAH-EVEN_TEXTF = <TPLVCUST>-TEPL_DISTX.
* .. address flag
LS_DIAH-EVEN_ADRSF = <TPLVCUST>-TEPL_DISAD.
* .. application flag
LS_DIAH-EVEN_APPLF = <TPLVCUST>-TEPL_DISAP.

* .. columns only if needed
* .. 'disp only' control for some fields
*loop at  lx_header-diai assigning <diai>.
*  case <diai>-diag_col.
*    when 1.
*        ls_diah-even_cl01f  = gc_true.
*    when 2.
*        ls_diah-even_cl02f  = gc_true.
*    when 3.
*        ls_diah-even_cl03f  = gc_true.
*    when 4.
*        ls_diah-even_cl04f  = gc_true.
*    when 5.
*        ls_diah-even_cl05f  = gc_true.
*    when 6.
*        ls_diah-even_cl06f  = gc_true.
*  endcase.
*  if <diai>-diag_col  > lf_maxcol.
*    lf_maxcol = <diai>-diag_col.
*  endif.
*endloop.

CASE <TPLVCUST>-TEPL_VIW.
  WHEN 'STD'.
    LS_DIAH-EVEN_CL01F = LS_DIAH-EVEN_CL02F =
    LS_DIAH-EVEN_CL03F = LS_DIAH-EVEN_CL04F = GC_TRUE.
    LF_MAXCOL = 4.
  WHEN 'STDSM'.
    LS_DIAH-EVEN_CL01F = LS_DIAH-EVEN_CL02F = GC_TRUE.
    LF_MAXCOL = 2.
  WHEN OTHERS.
    LS_DIAH-EVEN_CL01F = LS_DIAH-EVEN_CL02F =
    LS_DIAH-EVEN_CL03F = LS_DIAH-EVEN_CL04F = GC_TRUE.
    LF_MAXCOL = 4.
ENDCASE.

* texts
LS_DIAH-EVEN_TXT   = TEXT-180.
IF LS_DIAH-EVEN_CL01F = GC_TRUE.  LS_DIAH-EVEN_COL01  = TEXT-191. ENDIF.
IF LS_DIAH-EVEN_CL02F = GC_TRUE.  LS_DIAH-EVEN_COL02  = TEXT-192. ENDIF.
IF LS_DIAH-EVEN_CL03F = GC_TRUE.  LS_DIAH-EVEN_COL03  = TEXT-193. ENDIF.
IF LS_DIAH-EVEN_CL04F = GC_TRUE.  LS_DIAH-EVEN_COL04  = TEXT-194. ENDIF.
IF LS_DIAH-EVEN_CL05F = GC_TRUE.  LS_DIAH-EVEN_COL05  = TEXT-195. ENDIF.
IF LS_DIAH-EVEN_CL06F = GC_TRUE.  LS_DIAH-EVEN_COL06  = TEXT-196. ENDIF.


*-----------------------------------------------------------------------
* build dialog item table external (diae)
*-----------------------------------------------------------------------
DATA:
  LF_TEXT_ORIGIN   TYPE C.
CONSTANTS:
  LC_TEXT_EVENT    TYPE C VALUE 'E',
  LC_TEXT_TIME     TYPE C VALUE 'T'.

* origin of text information: event or time
READ TABLE LT_SORT INTO LS_SORT
    WITH KEY
        SORTFLD  = 'EVEN_TIMTY'.
IF SY-SUBRC IS INITIAL AND LS_SORT-SORTPOS <= <TPLVCUST>-TEPL_VIWLI.
  LF_TEXT_ORIGIN = LC_TEXT_TIME.
ELSE.
  LF_TEXT_ORIGIN = LC_TEXT_EVENT.
ENDIF.

CLEAR:
    LS_DIAE,
    LF_EVEN_FLGAP.
LOOP AT LX_HEADER-DIAI ASSIGNING <DIAI>.
* alternative time zone for popup in dialog
  if not if_dialog_zone is initial.
    <DIAI>-DIAG_ZON = IF_DIALOG_ZONE.
  else.
    <DIAI>-DIAG_ZON = <DIAI>-LOCA_ZON.
  endif.

* flag for application data
* .. in update mode, header flgap is set
  IF NOT LX_HEADER-HEAD_FLGAP IS INITIAL.
    READ TABLE LX_HEADER-APPL ASSIGNING <APPL>
        WITH TABLE KEY
            EVEN         =   <DIAI>-EVEN
            EVEN_CNT     =   <DIAI>-EVEN_CNT
            EVEN_VERTY   =   <DIAI>-EVEN_VERTY
            EVEN_VERNU   =   <DIAI>-EVEN_VERNU.
    IF SY-SUBRC IS INITIAL.
      <DIAI>-EVEN_FLGAP = GC_TRUE.
      PERFORM EVEN_MODIFY_FLGAP
          USING
              <DIAI>-EVEN
              <DIAI>-EVEN_CNT
              LF_EVEN_FLGAP
          CHANGING
              LX_HEADER
              LF_SUBRC.
      if not sy-subrc is initial.
        raise fatal_error.
      endif.
    ENDIF.
  ENDIF.
* .. diai flgap is set
  IF NOT <DIAI>-EVEN_FLGAP IS INITIAL.
    LF_EVEN_FLGAP     = GC_TRUE.
  ENDIF.

  MOVE-CORRESPONDING <DIAI>  TO LS_DIAE.

* header text not filled yet
  LS_DIAE-HEAD_TXT    = SPACE.

* event/time text
  READ TABLE LX_TEMPLATE-EVTY ASSIGNING <EVTYCUST>
      WITH TABLE KEY
          EVEN  = <DIAI>-EVEN.
  IF NOT SY-SUBRC IS INITIAL.
    RAISE FATAL_ERROR.
  ENDIF.
  CASE LF_TEXT_ORIGIN.
    WHEN LC_TEXT_EVENT.
*     READ TABLE lx_template-evtyt ASSIGNING <evtyt>
*         WITH TABLE KEY
*             lang  = sy-langu
*             even  = ls_diai-even.
*     IF sy-subrc IS INITIAL.
      LS_DIAE-EVEN_TXT    =  <EVTYCUST>-TEXT_40.
*     ENDIF.
    WHEN LC_TEXT_TIME.
      CASE <DIAI>-EVEN_TIMTY.
        WHEN GC_TIMTY_FROM.
          READ TABLE LX_TEMPLATE-TIME  ASSIGNING <TIMECUST>
              WITH TABLE KEY
                  TIME  = <EVTYCUST>-EVEN_TIMFR.
          IF SY-SUBRC IS INITIAL.
            LS_DIAE-EVEN_TXT    =  <TIMECUST>-TEXT_40.
          ENDIF.
        WHEN GC_TIMTY_TO.
          READ TABLE LX_TEMPLATE-TIME  ASSIGNING <TIMECUST>
              WITH TABLE KEY
                  TIME  = <EVTYCUST>-EVEN_TIMTO.
          IF SY-SUBRC IS INITIAL.
            LS_DIAE-EVEN_TXT    =  <TIMECUST>-TEXT_40.
          ENDIF.
      ENDCASE.
  ENDCASE.
  IF LS_DIAE-EVEN_TXT IS INITIAL.
    CONCATENATE '<'  <DIAI>-EVEN  '>' INTO LS_DIAE-EVEN.
  ENDIF.

* version type
  IF LS_DIAH-EVEN_VERTF  =  GC_TRUE.
*   ls_diae-even_verty  = version type
*   ls_diae-even_vertt  = ..           text
*   ls_diae-even_verti  = ..           icon
  ENDIF.

* time type (from/to)
  IF LS_DIAH-EVEN_TIMTF  =  GC_TRUE.
*   ls_diae-even-timty  = time type
*   ls_diae-even-timtt  = ..            text
*   ls_diae-even-timti  = ..            icon
  ENDIF.

* text
* application data

* time stamps / zones / .. in columns
  CASE <DIAI>-DIAG_COL.
    WHEN 1.
      IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX01  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST01.
      LS_DIAE-LOCA_ZON01  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS01  = <DIAI>-DIAG_DIS.

    WHEN 2.
      IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX02  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST02.
      LS_DIAE-LOCA_ZON02  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS02  = <DIAI>-DIAG_DIS.

    WHEN 3.
      IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX03  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST03.
      LS_DIAE-LOCA_ZON03  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS03  = <DIAI>-DIAG_DIS.

    WHEN 4.
      IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX04  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST04.
      LS_DIAE-LOCA_ZON04  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS04  = <DIAI>-DIAG_DIS.

    WHEN 5.
      IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX05  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST05.
      LS_DIAE-LOCA_ZON05  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS05  = <DIAI>-DIAG_DIS.

    WHEN 6.
       IF <DIAI>-TIME_FLGFX  = GC_TRUE.
        LS_DIAE-TIME_FIX06  = GC_TRUE.
      ENDIF.
      PERFORM CONVERT2LOCAL
          USING     <DIAI>-TIME_TST
                    <DIAI>-DIAG_ZON
          CHANGING  LS_DIAE-TIME_TST06.
      LS_DIAE-LOCA_ZON06  = <DIAI>-DIAG_ZON.
      LS_DIAE-DIAG_DIS06  = <DIAI>-DIAG_DIS.

  ENDCASE.
  IF <DIAI>-DIAG_COL = LF_MAXCOL.
    LS_DIAE-EVEN_FLGAP = LF_EVEN_FLGAP.
    APPEND LS_DIAE TO LT_DIAE.
    CLEAR:
        LS_DIAE,
        LF_EVEN_FLGAP.
  ENDIF.
ENDLOOP.

ET_DIAE[] = LT_DIAE[].
ES_DIAH   = LS_DIAH.

LX_HEADER-DIAE[] = LT_DIAE[].
MODIFY TABLE GT_HEADER FROM LX_HEADER.
ENDFUNCTION.