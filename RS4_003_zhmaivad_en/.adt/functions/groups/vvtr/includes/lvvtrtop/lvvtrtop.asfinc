FUNCTION-POOL vvtr                       MESSAGE-ID xe.

TYPE-POOLS: vvtr,
            ledsp,
            vse.

TABLES: likp    ,           "Vertriebsbeleg: Lieferung: Kopfdaten
*        lips    ,           "Vertriebsbeleg: Lieferung: positionsdaten
        ekko    ,
        makt    ,
        vbadr   ,                                           "
        vbak    ,                                           "
        vbpa    ,                                           "
        vxsiq   ,
        vxsiqt  ,
        vxsifn  ,
        vxsifnt ,
        vxsip   ,              "        Produktcode
        vxsipt  ,             "         Produktcode Bezeichnung
        vxsitd  ,            "          Spediteurkennung
        vxsitdt ,           "Spediteurkennung Bezeichnung
        vxsitdl ,                      "KEP: Datenfeld Typ
        vxsitdlt,                      "KEP: Datenfeld Typ Bezeichnung
        vxsitdlv,           "KEP: Spediteursdaten pro Versandstelle
*        vxsitdu ,                      "KEP: URLs
*        vxsis   ,           "KEP: Sonderabwicklung -> Spediteur Service
*        vxsisr,                        "KEP: Route -> Spediteur Service
*        vxsisv,             "KEP: Versandbedingung -> Spediteur Service
        vxsits,                        "KEP: Spediteurs Service Codes
        vxsitst,            "KEP: Spediteurs Service Codes Text
        vxsig,                         "KEP: Spediteurs Gewichtscodes
        vlbl,                          "KEP: Labeldaten zum Paket
        vlbltd,                        "KEP: Spediteure
        vtrkh,                         "Trackingdaten Kopf
        vtrkp,                         "Trackingdaten Position
        vxtrks,                        "Tracking Status Detail
        vxtrkst,                       "Tracking Status Detail
        vttk,                          "Transportkopf
        vekp,               "Vertriebsbeleg: Versandelementkopf
*        vbpa,                          "Vertriebsbeleg: Partner
*        tcaurl,                        "Carrier-URL-Connection
        tcavar,             "Carrier-URL-Connection: Substitution of Var
        tvro,                          "Routen
        tvakt,                         "Verkaufsbelege: Arten: Texte
        tvlkt,                         "Lieferungen: Arten: Texte
        tvtft,
        tvst,
        tvtkt,                         "Transportarten: Bezeichnungen
        tvfkt,
        tvshp,              "Versandparameter auf Mandantenebene
        tvbst.              "Vertriebsbelege: Bearbeitungsstatus: Texte

TABLES: vtrk_g.

* --
DATA: g_gcd TYPE vvtr_gcd.

* Work Satzbetten
DATA: w_likp   LIKE likp.
DATA: w_likpvb LIKE likpvb.
DATA: w_lips   LIKE lips.
DATA: w_sadrvb LIKE sadrvb.
DATA: w_vbak   LIKE vbak.
DATA: w_ekko   LIKE ekko.
DATA: w_vbpa   LIKE vbpa.
DATA: w_vbpavb LIKE vbpavb.
DATA: w_vbadr  LIKE vbadr.
DATA: w_vlbltd LIKE vlbltd.
DATA: w_vekp   LIKE vekp.
DATA: w_vekpvb LIKE vekpvb.
DATA: w_vepo   LIKE vepo.
DATA: w_vlbl   LIKE vlbl.
DATA: w_vtrkh         LIKE vtrkh.
DATA: w_vxsits        LIKE vxsits.
DATA: w_dd07v         LIKE dd07v.

* Memory for tables
DATA: t_vlbl      LIKE vlbl      OCCURS 0 WITH HEADER LINE.
DATA: t_vlbltd    LIKE vlbltd    OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitd    LIKE vxsitd    OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitdu   LIKE vxsitdu   OCCURS 0 WITH HEADER LINE.
DATA: t_vxsiv     LIKE vxsiv     OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitdl   LIKE vxsitdl   OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitdlt  LIKE vxsitdlt  OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitdlv  LIKE vxsitdlv  OCCURS 0 WITH HEADER LINE.
DATA: t_vxsits    LIKE vxsits    OCCURS 0 WITH HEADER LINE.
DATA: t_vxsitst   LIKE vxsitst   OCCURS 0 WITH HEADER LINE.
DATA: t_vxtrks    LIKE vxtrks    OCCURS 0 WITH HEADER LINE.
DATA: t_vxtrkst   LIKE vxtrkst   OCCURS 0 WITH HEADER LINE.
DATA: t_t002      LIKE t002      OCCURS 0 WITH HEADER LINE.
* -- globales Memory
*
* -- yvlbl hält DB-Stand
DATA: yvlbl      LIKE vlbl      OCCURS 0 WITH HEADER LINE.
* -- xvlbl hält neuen Stand
DATA: xvlbl      LIKE vlbl      OCCURS 0 WITH HEADER LINE.
* -- yvtrkh hält DB-Stand
DATA: yvtrkh     LIKE vtrkh     OCCURS 0 WITH HEADER LINE.
* -- xvtrkh hält neuen Stand
DATA: xvtrkh     LIKE vtrkh     OCCURS 0 WITH HEADER LINE.
DATA: xvtrkp     LIKE vtrkp     OCCURS 0 WITH HEADER LINE.
DATA: yvtrkp     LIKE vtrkp     OCCURS 0 WITH HEADER LINE.

DATA: copy_xvtrkh LIKE vtrkh     OCCURS 0,                    "v_616080
      copy_xvlbl  LIKE vlbl      OCCURS 0.                    "^_616080

* -- ALV Tree Benutzerparameter XSITREE
DATA: g_xsitree(10).

* -- Errorlog für VLBL
DATA: BEGIN OF gt_vlbllog OCCURS 0,
        vbtyp   TYPE  vbtypl,
        vbeln   TYPE  vbeln,
        xsitd   TYPE  xsitd,
        vlabtyp TYPE  vlabtyp.
        INCLUDE STRUCTURE bapiret2.
DATA: END OF gt_vlbllog.

DATA: gt_vlbllog_temp LIKE bapiret2 OCCURS 0 WITH HEADER LINE.

* -- IDOC DELVRYxx Verarbeitung
DATA: g_idoc_input_delvry.      " FLAG: IDOC_INPUT_DELVRY ist aktiv
DATA: gt_vlbldlgn  LIKE vlbldlgn OCCURS 0 WITH HEADER LINE.

* -- Subscreen Aufruf aus Lieferung
DATA: g_xsi_set_data.           " FLAG: Lieferung hat Daten gesetzt
DATA: g_xsi_set_vbeln     TYPE vbeln.
DATA: g_fcode             LIKE t185f-fcode.
DATA  g_result_ucomm      LIKE sy-ucomm.
* -- übergeordnete Lieferungen
DATA: gt_ue       TYPE vvtr_ue   OCCURS 0 WITH HEADER LINE.
* --

DATA  g_likpisvekp.   " Lieferung/Transport ohne Packstücke = 'X'

* string_find_word_fuzzy
FIELD-SYMBOLS: <s1>, <s2>.
DATA: str_1_len TYPE i.
DATA: str_2_len TYPE i.
DATA: string_1(255) TYPE c.
DATA: string_2(255) TYPE c.
DATA: nmaxlaenge TYPE i.

INCLUDE rvdirekt.
INCLUDE sdzavdat.
INCLUDE shpconst.
INCLUDE <icon>.
*
CONSTANTS: posnr_initial LIKE lips-posnr VALUE '000000'.
CONSTANTS: c_url_zusa TYPE xsiurltyp VALUE '14'.  "Zusatzangebot
CONSTANTS: c_url_xmltrack TYPE xsiurltyp
                                     VALUE '08'.  "XML-Tracking-Server
*     Einzel Paketverfolgung
CONSTANTS: c_url_single_xmltrack TYPE xsiurltyp
                                     VALUE '05'.
*              Multi Paketverfolgung
CONSTANTS: c_url_multi_xmltrack TYPE xsiurltyp
                                     VALUE '06'.

*              who calls XSI_GET_CARRIER_DATA?
CONSTANTS: c_xsi_caller_hupast(6) TYPE c VALUE 'hupast'.
DATA:      g_xsi_caller(6) TYPE c.

* -- Dynprofelder 2000
DATA:  track_vbak.
DATA:  track_ekko.
DATA:  track_likp.
DATA:  track_vekp.
DATA:  track_bstnk.
DATA:  track_trackn.
DATA:  track_transport.

DATA: BEGIN OF gt_docs OCCURS 0,
         vpobj     LIKE  vekp-vpobj,
         vpobjkey  LIKE  vekp-vpobjkey,
      END OF gt_docs.
DATA: g_text(132).
DATA: g_anz    TYPE   i.
* -- Zeitzonen-Nützlichkeiten
DATA: BEGIN OF g_timestamp,
         date  TYPE d,
         time  TYPE t,
         dummy,
      END OF g_timestamp.

DATA: g_tznzone TYPE tznzone.

* -- Incompletion log
DATA: BEGIN OF gt_incomplete OCCURS 0,
         vbeln     TYPE vbeln,
         xsiuv     TYPE xfeld,
      END OF gt_incomplete.

DATA: g_xsiuv      TYPE xfeld.

* -- Task-Management
DATA: g_tasknr     TYPE i VALUE 0.
DATA: g_taskname(32).
DATA: g_task_lines TYPE i.
DATA: BEGIN OF gt_task OCCURS 0,
        taskname LIKE g_taskname,
        xsitd    TYPE xsitd,
        waitsec  TYPE i,
      END OF gt_task.

* -- Tracking-Daten-Anforderung
DATA: gt_vtrkkeyext LIKE vtrkkeyext OCCURS 0 WITH HEADER LINE.

* -- Tracking Konstanten
INCLUDE lvvtrto2.

* -- Für XSI_TREE Screen 4000/1
DATA: g_vbtyp        TYPE vbtypl.
DATA: g_vbeln        TYPE vbeln.
DATA: g_xsitd        TYPE xsitd.
DATA: gt_vlbl_save   LIKE vlbl  OCCURS 0.

* -- Signature
DATA: pic_signature      TYPE REF TO cl_gui_html_viewer,
      pic_signature_cont TYPE REF TO cl_gui_custom_container.

* -- Tracking aktuell?
DATA: g_trk_aktuell   TYPE vbeln.

* -- Tracking aktuell?
DATA: g_url_aktuell   TYPE vbeln.
DATA: gt_urls         LIKE vxsitrku OCCURS 0 WITH HEADER LINE.

* -- ALV Tree aktuell
DATA: g_tree_aktuell   TYPE vbeln.     " <-- Objekt mit diesem Beleg

* -- top node in ALV TREE uses these VBTYP VBELN
DATA: g_top_vbtyp TYPE vbtypl.
DATA: g_top_vbeln TYPE vbeln.
DATA: g_top_vbeln2 TYPE vbeln.                              "n_523953

* -- Für Screen 4500
DATA: gt_vtrk_g       LIKE vtrk_g   OCCURS 0 WITH HEADER LINE.

DATA: g_trk_grid      TYPE REF TO cl_gui_alv_grid,
      g_trk_grid_cont TYPE REF TO cl_gui_custom_container.

DATA: g_date_req(10).
DATA: g_time_req(8).

* -- Für Screen 4510
DATA: gt_track_url    LIKE vxsitrku OCCURS 0 WITH HEADER LINE.

DATA: track_html      TYPE REF TO cl_gui_html_viewer,
      track_html_cont TYPE REF TO cl_gui_custom_container.

*
DATA: BEGIN OF gt_verpackt OCCURS 0,
        vbeln  LIKE  lips-vbeln,
        posnr  LIKE  lips-posnr,
        vrkme  LIKE  lips-vrkme,
        lfimg  LIKE  lips-lfimg,
      END OF gt_verpackt.

DATA: gt_unverpackt LIKE gt_verpackt OCCURS 0 WITH HEADER LINE.

* -- Layout-Dynpro 4000
DATA: sub_screen_nr LIKE sy-dynnr.

* -- for custom edit-screen.
DATA: detail_repid     LIKE sy-repid.
DATA: detail_screen_nr LIKE sy-dynnr.

DATA: g_vtrk_g         LIKE vtrk_g.
DATA: g_nkey           TYPE lvc_nkey.

DATA: g_trtyp.                         "Anzeige, Änderung, Neu

* -- Screen 4006 ALV Tree

DATA: g_refreshbutton TYPE xfeld.                           "n_526213
DATA: BEGIN OF changeflag,                                  "v_547937
         changed,
         vbeln LIKE vtrkh-uevbeln,
      END OF changeflag.
DATA: g_changeflag LIKE changeflag OCCURS 0 WITH HEADER LINE."^_547937

DATA: g_alv_tree         TYPE REF TO cl_gui_alv_tree,
      g_alv_tree_cont    TYPE REF TO cl_gui_custom_container.
DATA: gt_visible         TYPE lvc_t_nkey WITH HEADER LINE.

DATA: mr_toolbar TYPE REF TO cl_gui_toolbar.

DATA: gt_err TYPE vvtr_t_err WITH HEADER LINE.
* --
CLASS lcl_toolbar_event_receiver DEFINITION.

  PUBLIC SECTION.
    METHODS: on_function_selected
               FOR EVENT function_selected OF cl_gui_toolbar
                 IMPORTING fcode,

             on_toolbar_dropdown
               FOR EVENT dropdown_clicked OF cl_gui_toolbar
                 IMPORTING fcode
                           posx
                           posy.


ENDCLASS.                    "lcl_toolbar_event_receiver DEFINITION


*---------------------------------------------------------------------*
*       CLASS lcl_tree_event_receiver DEFINITION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_tree_event_receiver DEFINITION.

  PUBLIC SECTION.
    METHODS handle_node_double_click
      FOR EVENT node_double_click OF cl_gui_alv_tree
      IMPORTING node_key.

    METHODS handle_item_double_click
      FOR EVENT item_double_click OF cl_gui_alv_tree
      IMPORTING node_key fieldname.

    METHODS handle_node_ctmenu_request
      FOR EVENT node_context_menu_request OF cl_gui_alv_tree
        IMPORTING node_key
                  menu.
    METHODS handle_node_ctmenu_selected
      FOR EVENT node_context_menu_selected OF cl_gui_alv_tree
        IMPORTING node_key
                  fcode.
    METHODS handle_item_ctmenu_request
      FOR EVENT item_context_menu_request OF cl_gui_alv_tree
        IMPORTING node_key
                  fieldname
                  menu.
    METHODS handle_item_ctmenu_selected
      FOR EVENT item_context_menu_selected OF cl_gui_alv_tree
        IMPORTING node_key
                  fieldname
                  fcode.

    METHODS handle_expand_nc
       FOR EVENT expand_nc OF cl_gui_alv_tree
         IMPORTING node_key
         .

ENDCLASS.                    "lcl_tree_event_receiver DEFINITION

* ---

DATA:                                  "g_handle_tree TYPE i,
      "selected               VALUE 'X',
    toolbar_event_receiver TYPE REF TO lcl_toolbar_event_receiver.


DATA: tree_event_receiver TYPE REF TO lcl_tree_event_receiver.

DATA: "gt_header       TYPE TABLE OF slis_listheader WITH HEADER LINE,
      gt_fieldcat_lvc TYPE lvc_t_fcat WITH HEADER LINE.
*      gt_sort         TYPE lvc_t_sort. "Sortiertabelle


* -- Sort-Flag
DATA: t_sort_vlbl.
DATA: t_sort_vlbltd.
DATA: t_sort_vxsitd.
DATA: t_sort_vxsitdu.
DATA: t_sort_vxsiv.
DATA: t_sort_vxsitdl.
DATA: t_sort_vxsitdlt.
DATA: t_sort_vxsitdlv.
DATA: t_sort_vxsits.
DATA: t_sort_vxsitst.
DATA: t_sort_vxtrks.
DATA: t_sort_vxtrkst.











* -- Interface-Methoden Aufruf
DEFINE _interface.
  call function &1
    exporting
      i_vbtyp   = i_vbtyp
      i_vbeln   = i_vbeln
    tables
      pt_vlbl   = xvlbl
      pt_return = gt_vlbllog_temp
    changing
      c_daten   = c_daten
      c_vxsitdl = t_vxsitdl
    exceptions
      not_found = 1
      others    = 2.
END-OF-DEFINITION.

DATA: g_save_subrc LIKE sy-subrc.
DATA: g_debug(10).
* Über Benutzerparameter-Id XSD wird gesteuert an welchen Stellen
* ein Breakpoint auftritt. (Flags können kombiniert werden.)
*
* 1..unexpected error
* 2..die wichtigsten Ablaufentscheidungen
* 3..doppelt soviele Ablaufentscheidungen
* 4..unerwartete/interessante Ergebnisse

* -- Breakpoint salonfähig für Fehlersuche
DEFINE _break.
  set extended check off.
  break-point.
  set extended check on.
END-OF-DEFINITION.

* -- Debugparameter auswerten
DEFINE _if_debug_info_ca.
  g_save_subrc = sy-subrc.
  get parameter id 'XSD' field g_debug.
  sy-subrc = g_save_subrc.
  if g_debug ca &1.
  END-OF-DEFINITION.

* -- ENDIF (wegen pretty printer)
  DEFINE _endif.
  endif.
END-OF-DEFINITION.


* -- Break und raise unexpected_error bei 'unmöglichen' fehlern
DEFINE _unexpected_error.
  if sy-subrc ne 0.
    _if_debug_info_ca '1'.
    _break.
    _endif.
    raise unexpected_error.
  endif.
END-OF-DEFINITION.

* -- RAISE EXCEPTION
DEFINE _raise.
  _if_debug_info_ca '1'.
  _break.
  _endif.
  raise &1.
END-OF-DEFINITION.

* -- RAISE IF SY-SUBRC = &1 EXCEPTION
DEFINE _raise_if.
  if sy-subrc eq &1.
    _if_debug_info_ca '1'.
    _break.
    _endif.
    raise &2.
  endif.
END-OF-DEFINITION.


* -- Haltepunkt bei Ablaufentscheidenden Entscheidungen
DEFINE _ablauf.
  _if_debug_info_ca '2'.
  _break.
  _endif.
END-OF-DEFINITION.

* -- noch mehr Haltepunkte bei Ablaufentscheidenden Entscheidungen
DEFINE _ablauf_detail.
  _if_debug_info_ca '3'.
  _break.
  _endif.
END-OF-DEFINITION.

DEFINE _ablauf_if.
  _if_debug_info_ca '234'.
  if sy-subrc ne 0.
    _break.
  endif.
  _endif.
END-OF-DEFINITION.

DEFINE _init_cont.
  if &1_cont is initial.

    create object &1_cont
        exporting
            container_name = '&1'
        exceptions
            others = 1.
    case sy-subrc.
      when 0.
*
      when others.
        raise cntl_error.
    endcase.
  endif.
END-OF-DEFINITION.

DEFINE _init_html.
  _init_cont &1.
  if &1 is initial.
    create object &1
           exporting
              parent    = &1_cont.
    if sy-subrc ne 0.
      raise cntl_error.
    endif.
  endif.
END-OF-DEFINITION.

DEFINE _init_alv.
  _init_cont &1.
  if &1 is initial.
    create object &1
           exporting
              i_parent    = &1_cont.
    if sy-subrc ne 0.
      raise cntl_error.
    endif.
  endif.
END-OF-DEFINITION.

* -- Tabellen gebuffert lesen

DEFINE _fill_tab.

  read table t_&1 transporting no fields
                 with key xsitd = &2.
  if sy-subrc ne 0.
    select * into table t_&1
                from &1
                where xsitd = &2.
    clear t_sort_&1.
  endif.

END-OF-DEFINITION.

DEFINE _read_tab.

  if ( t_&1-xsitd ne &2
    or t_&1-&3    ne &4 ).
    read table t_&1 with key xsitd = &2
                            &3 = &4
                            binary search.
    if sy-subrc ne 0.
      _fill_tab &1 &2.

      if t_sort_&1 is initial.
        sort t_&1.
        t_sort_&1 = 'X'.
      endif.

      read table t_&1 with key xsitd = &2
                              &3 = &4
                              binary search.
    endif.
  else.
* -- damit sy-tabix richtig zeigt:
    read table t_&1 transporting no fields
                with key xsitd = &2
                            &3 = &4
                            binary search.
    sy-subrc = 0.
  endif.

END-OF-DEFINITION.

* -- Lang = Spache

DEFINE _fill_tab_lang.

  read table t_&1 transporting no fields
                 with key xsitd = &2
                          langu = &3.
  if sy-subrc ne 0.
    select * into table t_&1
                from &1
                where xsitd = &2
                  and langu = &3.
    clear t_sort_&1.
  endif.

END-OF-DEFINITION.


DEFINE _read_tab_lang.

  if ( t_&1-xsitd ne &2
    or t_&1-langu    ne &3
    or t_&1-&4    ne &5 ).

    read table t_&1 with key xsitd = &2
                          langu = &3
                          &4 = &5
                          binary search.
    if sy-subrc ne 0.
      _fill_tab_lang &1 &2 &3.

      if t_sort_&1 is initial.
        sort t_&1.
        t_sort_&1 = 'X'.
      endif.

      read table t_&1 with key xsitd = &2
                              langu = &3
                              &4 = &5
                              binary search.
    endif.
  else.
* -- damit sy-tabix richtig zeigt:
    read table t_&1 transporting no fields
                with key xsitd = &2
                         langu = &3
                            &4 = &5
                            binary search.
    sy-subrc = 0.
  endif.

END-OF-DEFINITION.

* --------------- Macros für bestimmte Tabellen

* - vxsitd
DEFINE _read_vxsitd.

  if t_vxsitd-xsitd = &1.
    sy-subrc = 0.
* -- sy-tabix richtig stellen
    read table t_vxsitd transporting no fields
                        with key xsitd = &1.
  else.
    read table t_vxsitd with key xsitd = &1.
    if sy-subrc ne 0.
      select * appending table t_vxsitd
                  from vxsitd
                  where xsitd = &1.
      sort t_vxsitd.
      read table t_vxsitd with key xsitd = &1.
    endif.
  endif.

END-OF-DEFINITION.

* - vxsits
DEFINE _read_vxsits.

  _read_tab vxsits &1 xsisrvc &2.

END-OF-DEFINITION.

* - vxsitst
DEFINE _read_vxsitst.

  _read_tab_lang vxsitst &1 &2 xsisrvc &3.

END-OF-DEFINITION.

* - VXSITDU
DEFINE _read_vxsitdu.

  _read_tab vxsitdu &1 xsiurltyp &2.

END-OF-DEFINITION.

* - VXSITDL
DEFINE _read_vxsitdl.

  _read_tab vxsitdl &1 vlabtyp &2.

END-OF-DEFINITION.

* - VXSITDLT
DEFINE _read_vxsitdlt.

  _read_tab_lang vxsitdlt &1 &2 vlabtyp &3.

END-OF-DEFINITION.

* - vtrkst
DEFINE _read_vxtrkst.

  _read_tab_lang vxtrkst &1 &2 trkstatd &3.

END-OF-DEFINITION.

* - vxtrks
DEFINE _read_vxtrks.

  _read_tab vxtrks &1 trkstatd &2.

END-OF-DEFINITION.

* - vxsiv
DEFINE _read_vxsiv.

  _read_tab vxsiv &1 vstel &2.

END-OF-DEFINITION.

* -- vlbltd
DEFINE _read_vlbltd.
  if t_vlbltd[] is initial.
    select * into table t_vlbltd                        "#EC CI_NOWHERE
        from vlbltd.
    sort t_vlbltd.
  endif.
  read table t_vlbltd with key tdlnr = &1
                               expkz = &2
                               binary search.
END-OF-DEFINITION.

DATA: gt_temp_vtrkh LIKE vtrkh OCCURS 0.
DATA: g_gefunden TYPE xfeld.

* -- vtrkh
DEFINE _read_xvtrkh2.
  read table xvtrkh  with key vbtyp = &1
                              vbeln = &2
                              binary search.
 if &1 is not initial or &2 is not initial.                "n_1964270
  if sy-subrc ne 0.
    select * into table gt_temp_vtrkh
                from vtrkh
                where vbtyp = &1
                  and vbeln = &2.
    if sy-subrc eq 0.
      append lines of gt_temp_vtrkh to xvtrkh.
      append lines of gt_temp_vtrkh to yvtrkh.
      refresh gt_temp_vtrkh.                                "n_694430
      sort xvtrkh.

      read table xvtrkh  with key vbtyp = &1
                                  vbeln = &2
                                  binary search.
    endif.
  endif.
 endif.                                                    "n_1964270
END-OF-DEFINITION.

DEFINE _read_xvtrkh3.
  read table xvtrkh  with key vbtyp = &2
                              vbeln = &3
                              xsitd = &1
                              binary search.
  if sy-subrc ne 0.
    select * into table gt_temp_vtrkh
                from vtrkh
                where vbtyp = &2
                  and vbeln = &3.
    if sy-subrc eq 0.
      append lines of gt_temp_vtrkh to xvtrkh.
      append lines of gt_temp_vtrkh to yvtrkh.
      refresh gt_temp_vtrkh.                                "n_694430
      sort xvtrkh.

      read table xvtrkh  with key vbtyp = &2
                                  vbeln = &3
                                  xsitd = &1
                                  binary search.
    endif.
  endif.
END-OF-DEFINITION.

DEFINE _read_xvtrkh_ue.
  read table xvtrkh  with key uevbtyp = &2
                              uevbeln = &3
                              xsitd   = &1
                              binary search.
  if sy-subrc ne 0.
    select * into table gt_temp_vtrkh
                from vtrkh
                where uevbtyp = &2
                  and uevbeln = &3.
    if sy-subrc eq 0.
      append lines of gt_temp_vtrkh to xvtrkh.
      append lines of gt_temp_vtrkh to yvtrkh.
      refresh gt_temp_vtrkh.                                "n_694430
      sort xvtrkh.

      read table xvtrkh  with key uevbtyp = &2
                                  uevbeln = &3
                                  xsitd = &1
                                  binary search.
    endif.
  endif.
END-OF-DEFINITION.

DATA: g_temp_tabix LIKE sy-tabix.
DATA: g_temp_vtrkh LIKE vtrkh.

* -- vtrkh über übergeordnetes Ojekt lesen
DEFINE _fill_xvtrkh_ue.
  if not &2 is initial.                                     "n_571988
    select * into table gt_temp_vtrkh
                from vtrkh
                where uevbtyp = &1
                  and uevbeln = &2.
    if sy-subrc eq 0.
      loop at gt_temp_vtrkh into g_temp_vtrkh.
        g_temp_tabix = sy-tabix.
        read table xvtrkh with key xsitd = g_temp_vtrkh-xsitd
                                   vbtyp = g_temp_vtrkh-vbtyp
                                   vbeln = g_temp_vtrkh-vbeln.
        if sy-subrc eq 0.
          delete gt_temp_vtrkh index g_temp_tabix.
        endif.
      endloop.
      if not gt_temp_vtrkh[] is initial.
        append lines of gt_temp_vtrkh to xvtrkh.
        append lines of gt_temp_vtrkh to yvtrkh.
        refresh gt_temp_vtrkh.                              "n_694430
        sort xvtrkh.
        sort yvtrkh.
        delete adjacent duplicates from xvtrkh.
        delete adjacent duplicates from yvtrkh.
      endif.
    endif.
  endif.
END-OF-DEFINITION.

DATA: gt_temp_vtrkp LIKE vtrkp OCCURS 0.

* -- vtrkp2 - über vbtyp vbeln - lesen
DEFINE _fill_xvtrkp2.
  read table xvtrkp  with key vbtyp = &1
                              vbeln = &2
                              binary search.
  if sy-subrc ne 0.
    select * into table gt_temp_vtrkp
                from  vtrkp
                where vbtyp = &1
                  and vbeln = &2.
    if not gt_temp_vtrkp[] is initial.
      append lines of gt_temp_vtrkp to xvtrkp.
      append lines of gt_temp_vtrkp to yvtrkp.
      sort xvtrkp.
    endif.
  endif.
END-OF-DEFINITION.


DATA: gt_temp_vlbl LIKE vlbl OCCURS 0.

* -- vlbl - über vbtyp vbeln - lesen
DEFINE _fill_xvlbl2.
  read table xvlbl transporting no fields
                     with key vbtyp = &1
                              vbeln = &2
                              binary search.
  if sy-subrc ne 0.
    select * into table gt_temp_vlbl                  "#EC CI_SGLSELECT
                from  vlbl
                where vbtyp = &1
                  and vbeln = &2.
    if not gt_temp_vlbl[] is initial.
      append lines of gt_temp_vlbl to xvlbl.
      append lines of gt_temp_vlbl to yvlbl.
      sort xvlbl.
    endif.
  endif.
END-OF-DEFINITION.

DEFINE _read_xvlbl.
  read table xvlbl  with key vbtyp   = &2
                             vbeln   = &3
                             xsitd   = &1
                             vlabtyp = &4
                             binary search.
  if sy-subrc ne 0.
    _fill_xvlbl2 &2 &3.
    if sy-subrc eq 0.
      read table xvlbl  with key vbtyp   = &2
                                 vbeln   = &3
                                 xsitd   = &1
                                 vlabtyp = &4
                                 binary search.
    endif.
  endif.
END-OF-DEFINITION.

DATA: g_macro_test4(4).
DATA: g_macro_subrc       LIKE sy-subrc.

DEFINE _message_break.

  g_macro_subrc = sy-subrc.
  g_macro_test4 = '&1'.
  if g_macro_test4(1) ca 'Aa'.
    sy-subrc = 4.
    _ablauf_if.
  endif.
  sy-subrc = g_macro_subrc.

END-OF-DEFINITION.

DEFINE _message0.
  _message_break &1
  message &1.
END-OF-DEFINITION.

DEFINE _message0.
  _message_break &1
  message &1.
END-OF-DEFINITION.

DEFINE _message1.
  _message_break &1.
  message &1 with &2.
END-OF-DEFINITION.

DEFINE _message2.
  _message_break &1.
  message &1 with &2 &3.
  if g_macro_test4 = 'WITH'.           " Fehler im Macroaufruf?
    _break.
  endif.
END-OF-DEFINITION.

DEFINE _message3.
  _message_break &1.
  message &1 with &2 &3 &4.
  if g_macro_test4 = 'WITH'.           " Fehler im Macroaufruf?
    _break.
  endif.
END-OF-DEFINITION.

DEFINE _message4.
  _message_break &1.
  message &1 with &2 &3 &4 &5.
  if g_macro_test4 = 'WITH'.           " Fehler im Macroaufruf?
    _break.
  endif.
END-OF-DEFINITION.

DEFINE _message_log.
  message &1&2 with &3 &4 &5 &6 into
                     gt_vlbllog_temp-message.
  gt_vlbllog_temp-id = sy-msgid.
  gt_vlbllog_temp-type = sy-msgty.
  gt_vlbllog_temp-number = sy-msgno.
  gt_vlbllog_temp-message_v1 = sy-msgv1.
  gt_vlbllog_temp-message_v2 = sy-msgv2.
  gt_vlbllog_temp-message_v3 = sy-msgv3.
  gt_vlbllog_temp-message_v4 = sy-msgv4.

  IF sy-msgno EQ '060' OR sy-msgno EQ '061'.              "n_v_979940
    concatenate 'Number Range Object: '
     gt_vlbllog_temp-message_v2 into gt_vlbllog_temp-message_v2.
  ELSE.
    concatenate 'Number Range Object: '
     gt_vlbllog_temp-message_v1 into gt_vlbllog_temp-message_v2.
  ENDIF.
  concatenate 'Number Range Sub-Object: '
   gt_vlbllog_temp-message_v3 into gt_vlbllog_temp-message_v3.
  concatenate 'Number Range Interval: '
   gt_vlbllog_temp-message_v4 into gt_vlbllog_temp-message_v4.
* End of insertion                                        "n_^_979940
  append gt_vlbllog_temp.
END-OF-DEFINITION.










*  -- Klassenimplementierung

*---------------------------------------------------------------------*
*       CLASS lcl_toolbar_event_receiver IMPLEMENTATION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_toolbar_event_receiver IMPLEMENTATION.

  METHOD on_function_selected.

    DATA: l_selected_node  TYPE lvc_nkey.
    DATA: ls_vtrk_g        TYPE vtrk_g.

    CASE fcode.
      WHEN 'COOP'.
* -- optimale spaltenbreite setzen
        CALL METHOD g_alv_tree->column_optimize.
      WHEN OTHERS.

        IF fcode = 'TRAC'.                                  "v_n_526213
          g_refreshbutton = 'X'.
        ENDIF.                                              "^_n_526213

* -- get selected node
        PERFORM alv_tree_get_selected_node
                         CHANGING l_selected_node
                                  ls_vtrk_g.
* -- verarbeite fcode
        PERFORM alv_tree_fcode USING fcode
                                     l_selected_node
                                     ls_vtrk_g
                                     space.                 "n_554765
    ENDCASE.
* UPDATE frontend.
    CALL METHOD g_alv_tree->frontend_update.
    CLEAR fcode.
  ENDMETHOD.                    "on_function_selected

  METHOD on_toolbar_dropdown.
    DATA: l_menu TYPE REF TO cl_ctmenu.
    CREATE OBJECT l_menu.
* create contextmenu
    IF fcode = 'BROW'.
      PERFORM alv_tree_menu_request USING l_menu space.     "c_554765
* show dropdownbox
      CALL METHOD mr_toolbar->track_context_menu
        EXPORTING
          context_menu = l_menu
          posx         = posx
          posy         = posy.

    ENDIF.

  ENDMETHOD.                    "on_toolbar_dropdown


ENDCLASS.                    "lcl_toolbar_event_receiver IMPLEMENTATION

*---------------------------------------------------------------------*
*       CLASS lcl_tree_event_receiver IMPLEMENTATION
*---------------------------------------------------------------------*
*       ........                                                      *
*---------------------------------------------------------------------*
CLASS lcl_tree_event_receiver IMPLEMENTATION.

  METHOD handle_node_double_click.
    DATA: ls_vtrk_g TYPE vtrk_g.
*       get selected node
    CALL METHOD cl_gui_cfw=>flush.
    CALL METHOD g_alv_tree->get_outtab_line
      EXPORTING
        i_node_key    = node_key
      IMPORTING
        e_outtab_line = ls_vtrk_g.
    PERFORM alv_tree_fcode_dbl_click USING node_key
                                           ls_vtrk_g
                                           space.           "n_554765
* UPDATE frontend.
    CALL METHOD g_alv_tree->frontend_update.
  ENDMETHOD.                    "handle_node_double_click


  METHOD handle_item_double_click.
    DATA: ls_vtrk_g TYPE vtrk_g.
*       get selected node
    CALL METHOD cl_gui_cfw=>flush.
    CALL METHOD g_alv_tree->get_outtab_line
      EXPORTING
        i_node_key    = node_key
      IMPORTING
        e_outtab_line = ls_vtrk_g.
    PERFORM alv_tree_fcode_dbl_click USING node_key
                                           ls_vtrk_g
                                           fieldname.       "n_554765
* UPDATE frontend.
    CALL METHOD g_alv_tree->frontend_update.
  ENDMETHOD.                    "handle_item_double_click


  METHOD handle_node_ctmenu_request.
*    DATA: l_menu TYPE REF TO cl_ctmenu.
*    CREATE OBJECT l_menu.

    PERFORM alv_tree_menu_request USING menu space.         "c_554765

  ENDMETHOD.                    "handle_node_ctmenu_request

  METHOD handle_node_ctmenu_selected.

    DATA: ls_vtrk_g TYPE vtrk_g.

    CALL METHOD g_alv_tree->get_outtab_line
      EXPORTING
        i_node_key    = node_key
      IMPORTING
        e_outtab_line = ls_vtrk_g.

    PERFORM alv_tree_fcode USING fcode
                                 node_key
                                 ls_vtrk_g
                                 space.                     "n_554765

  ENDMETHOD.                    "handle_node_ctmenu_selected


  METHOD handle_item_ctmenu_request .

    PERFORM alv_tree_menu_request USING menu fieldname.     "c_554765

  ENDMETHOD.                    "handle_item_ctmenu_request


  METHOD handle_item_ctmenu_selected.

    DATA: ls_vtrk_g TYPE vtrk_g.

    CALL METHOD g_alv_tree->get_outtab_line
      EXPORTING
        i_node_key    = node_key
      IMPORTING
        e_outtab_line = ls_vtrk_g.
    PERFORM alv_tree_fcode USING fcode
                                 node_key
                                 ls_vtrk_g
                                 fieldname.                 "n_554765
  ENDMETHOD.                    "handle_item_ctmenu_selected

  METHOD handle_expand_nc.

    sy-subrc = 0.

  ENDMETHOD.                    "handle_expand_nc
ENDCLASS.                    "lcl_tree_event_receiver IMPLEMENTATION