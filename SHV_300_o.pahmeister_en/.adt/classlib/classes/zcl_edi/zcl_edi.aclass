class ZCL_EDI definition
  public
  inheriting from ZCL_EDI_BASE
  create public .

public section.

  constants MV_SPECIAL_ISO type STRING value 'Особая ЕИ' ##NO_TEXT.

  class-methods CHECK_SINGLE_STEP_MOVE
    importing
      !IT_ITEMS type ZTT_EDOC_I_ALV .
  class-methods SEND_FREE_TEXT
    importing
      !IT_MESSAGE type SOLI_TAB
      !IV_DOCNUM type ZMM_EDOC_H-DOCNUM .
  class-methods SEND_NOTIFY
    importing
      !IS_HEADER type ZST_EDOC_HEADER .
  class-methods CREATE_GUID
    returning
      value(RV_GUID) type GUID16 .
  class-methods SAP_OSP_ADDRESS
    importing
      !IV_GLN type STRING
    returning
      value(RV_ADR) type STRING .
  class-methods RECEIVE_IDENTIFICATION
    importing
      !IT_IDENTIFICATION type ZTT_EDI_NODE_LINE_ITEM_IDENTIF
    changing
      !CT_CODE_MARKS type ZTT_EDOC_CM
      !EV_ITEM_GUID type ZMM_EDOC_I-ITEM_GUID .
  class-methods READ_BP
    importing
      !IV_PARTNER type BU_PARTNER
    exporting
      !EV_GLN type CSEQUENCE
      !EV_NAME type CSEQUENCE
      !EV_ADDRESS type CSEQUENCE
      !EV_VAT type CSEQUENCE .
  class-methods READ_CONTRAGENT
    importing
      !IV_PARTNER type BU_PARTNER
    returning
      value(RS_PARTNER) type ZST_EDI_INVOICE_CONTRAGENT .
  class-methods GET_OSP_ADDRESS
    importing
      !IV_VSTEL type VSTEL
    returning
      value(RV_ADR) type STRING .
  class-methods FILL_EVENT_LOG
    importing
      !IV_DOCNUM type ZST_EDOC_HEADER-DOCNUM
    returning
      value(RV_LOG) type STRING .
  class-methods FILL_IDENTIFICATION
    importing
      !IV_ITEM_GUID type ZMM_EDOC_I-ITEM_GUID
    exporting
      !ET_IDENTIFICATION type ZTT_EDI_NODE_LINE_ITEM_IDENTIF .
  class-methods GENERATE_NOTE_ID
    importing
      !IV_GLN type ZST_EDOC_HEADER-GLNSH
    returning
      value(RV_NOTEID) type ZMM_EDOC_H-NOTEID .
  class-methods UPDATE_HISTORY
    importing
      !IV_EDOCID type ZMM_EDOC_HIS2-EDOCID
      !IV_DIRECTION type ZMM_EDOC_HIS2-DIRECTION
      !IV_DOCNUM type ZMM_EDOC_H-DOCNUM
      !IV_EDOCTYPE type ZMM_EDOC_EDOCTYPE
      !IS_DELIVERY_NOTE type ZST_EDI_DELIVERY_NOTE
      !IS_ACKNOWLEDGEMENT type ZST_EDI_ACKNOWLEDGEMENT
      !IV_NOTEID type ZMM_EDOC_H-NOTEID
      !IV_NOTEDAT type ZMM_EDOC_H-NOTEDAT
      !IV_XML type XSTRING .
  class-methods EDI_DATE_TIME
    importing
      !IV_TIMESTAMP type ZMM_EDOC_CRDAT_T optional
    returning
      value(RV_DATE_TIME) type STRING .
  class-methods EDI_DOCUMENT_ID
    returning
      value(RV_DOC_ID) type STRING .
  class-methods SAP_DATE_TIME
    importing
      !IV_DATE_TIME type STRING
    returning
      value(RV_TIMESTAMP) type ZMM_EDOC_CRDAT_T .
  class-methods SEND_EMAIL_NEW_STATUS
    importing
      !IV_NEW_STATUS2 type ZMM_EDOC_STATUS2
      !IV_DOCNUM type ZMM_EDOC_DOCNUM .
  class-methods GET_DOMAIN_DESCRIPTION
    importing
      !P_FIELD type ANY
    returning
      value(CV_RETURN) type VAL_TEXT .
  class-methods SAP_CURR
    importing
      !IV_CURR type STRING
    returning
      value(RV_WAERS) type WAERS .
  class-methods ISO_UNIT
    importing
      !IV_MEINS type T006-MSEHI
      !IV_DOCPOS type ZMM_EDOC_I-DOCPOS
    changing
      value(CT_EXTRA) type ZTT_EDI_NODE_BL_EXTRA_FIELD
    returning
      value(RV_UNIT) type T006-ISOCODE .
  class-methods ISO_LAND
    importing
      !IV_LAND type T005-LAND1
    returning
      value(RV_LAND) type T005-INTCA .
  class-methods ISO_CURR
    importing
      !IV_WAERS type WAERS
    returning
      value(RV_CURR) type TCURC-ISOCD .
  class-methods SAP_LAND
    importing
      !IV_LAND type STRING
    returning
      value(RV_LAND) type T005-LAND1 .
  class-methods SAP_UNIT
    importing
      !IV_UNIT type STRING
    returning
      value(RV_MEINS) type T006-MSEHI .
  class-methods SAP_PARTNER
    importing
      !IV_GLN type STRING
    returning
      value(RV_PARTNER) type BU_PARTNER .
  class-methods SAP_OSP
    importing
      !IV_GLN type STRING
    returning
      value(RV_PARTNER) type BU_PARTNER .
  class-methods FILL_M
    importing
      !IV_IN type SIMPLE
      !IV_TEXT type CSEQUENCE
    returning
      value(RV_OUT) type STRING .
  class-methods FILL_NUM
    importing
      !IV_IN type ANY
    returning
      value(RV_OUT) type STRING .
  class-methods FILL_FIELD
    importing
      !IV_IN type SIMPLE
    exporting
      !EV_OUT type STRING .
  class-methods FILL_C
    importing
      !IV_IN type SIMPLE
    returning
      value(RV_OUT) type STRING .
  class-methods FILL_BLRWBR
    importing
      !IV_FCODE type STRING default '11'
      !IS_HEADER type ZST_EDOC_HEADER
    exporting
      !ES_DELIVERY_NOTE type ZST_EDI_DELIVERY_NOTE .
  class-methods UPDATE_CLASSIFICATION
    importing
      !IS_HEADER type ZST_EDOC_HEADER
      !IT_ITEMS type ZTT_EDOC_I .
  class-methods FILL_BLRWBL
    importing
      !IV_FCODE type STRING default '9'
      !IS_HEADER type ZST_EDOC_HEADER
      !IT_ITEMS type ZTT_EDOC_I
    exporting
      !ES_DELIVERY_NOTE type ZST_EDI_DELIVERY_NOTE .
  class-methods FILL_BLRINV
    importing
      value(IS_ACT) type ZCO_EDI_ACT
      value(IT_ITEMS) type ZCL_EDI_ACTS=>CTY_T_ITEMS
      value(IT_ATTACH) type ZCL_EDI_ACTS=>CTY_T_ATTACHMENTS
      value(IV_FCODE) type NUMC1 default 9
      value(IS_SENDER) type ZST_EDI_INVOICE_CONTRAGENT
      value(IS_RECEIVER) type ZST_EDI_INVOICE_CONTRAGENT
      value(IV_EXPORT) type ABAP_BOOL optional
      value(IV_BATCH) type ABAP_BOOL optional
      value(IR_LOGGER) type ref to ZCL_LOGGER optional
    returning
      value(RS_NOTE) type ZST_EDI_INVOICE .
  class-methods FILL_BLRDNR
    importing
      !IV_FCODE type STRING default '11'
      !IS_HEADER type ZST_EDOC_HEADER
    exporting
      !ES_DELIVERY_NOTE type ZST_EDI_DELIVERY_NOTE .
  class-methods FILL_BLRDLN
    importing
      !IV_FCODE type STRING default '9'
      !IS_HEADER type ZST_EDOC_HEADER
      !IT_ITEMS type ZTT_EDOC_I
    exporting
      !ES_DELIVERY_NOTE type ZST_EDI_DELIVERY_NOTE .
  class-methods FILL_ACT_BLRAPN
    importing
      !IS_ACT type ZCO_EDI_ACT
      !IV_FCODE type STRING default '6'
      !IV_CODE type CHAR4 default '2650'
      !IV_DESCRIPTION type STRING optional
    exporting
      value(EV_XML) type XSTRING
      value(ES_EDOC) type ZST_EDI_INVOICE
    returning
      value(RS_ACKNOWLEDGEMENT) type ZST_EDI_ACKNOWLEDGEMENT .
  class-methods FILL_BLRAPN
    importing
      !IS_HEADER type ZST_EDOC_HEADER
      !IV_FCODE type STRING default '6'
      !IV_CODE type CHAR4 default '2750'
      !IV_DESCRIPTION type STRING optional
      !IS_REF_EDOC type ZMM_EDOC_HIS2 optional
    exporting
      !ES_ACKNOWLEDGEMENT type ZST_EDI_ACKNOWLEDGEMENT .
  class-methods RECEIVE_BLRWBL
    importing
      !IS_DATA type ZST_EDI_DELIVERY_NOTE
    exporting
      !EV_DOCNUM type ZMM_EDOC_H-DOCNUM .
  class-methods RECEIVE_BLRWBR
    importing
      !IS_DATA type ZST_EDI_DELIVERY_NOTE
      !IV_DOCNUM type ZMM_EDOC_H-DOCNUM .
  class-methods GENERATE_INPUT_DOCNUM
    returning
      value(RV_DOCNUM) type ZMM_EDOC_DOCNUM .
  class-methods GENERATE_OUTPUT_DOCNUM
    returning
      value(RV_DOCNUM) type ZMM_EDOC_DOCNUM .
  class-methods GET_WERKS_BY_GLN
    importing
      !IV_GLN type STRING
    returning
      value(RV_WERKS) type WERKS_D .
  class-methods GET_BUKRS
    importing
      !IV_WERKS type WERKS_D
    returning
      value(RV_BUKRS) type BUKRS .
  class-methods GET_DIRECTION
    importing
      !IV_IN type STRING
    returning
      value(RV_OUT) type ZMM_EDOC_MESS_DIRECTION .
  class-methods CLASS_CONSTRUCTOR .
  class-methods CHECK_MIGO_ITEM
    importing
      value(IS_ITEM) type GOITEM optional
    returning
      value(RT_BAPIRET) type BAPIRET2_T .
  class-methods CHECK_VL02N_ITEMS
    importing
      value(IT_XLIPS) type SHP_LIPS_T optional
    returning
      value(RT_RETURN) type SHP_BADI_ERROR_LOG_T .
  class-methods EDI_GET_ADDRESS
    importing
      !IV_BUKRS type BUKRS
    returning
      value(RS_RESULT) type BAPI0002_3 .
  class-methods EXTRACT_CERTIFICATE_OWNER
    importing
      value(IV_CERTLINE) type STRING
    returning
      value(RV_OWNER) type STRING .
  class-methods FILL_BLRNEO
    importing
      value(IS_AVISO) type ZFI_EDI_ANN
      value(IT_ITEMS) type ZCL_EDI_AVISO=>GTY_T_ITEMS
      value(IV_FCODE) type NUMC1 default 9
      value(IS_SENDER) type ZST_EDI_NATIFICATION_SENDER
      value(IS_RECEIVER) type ZST_EDI_NATIFICATION_RECEIVER
      value(IR_LOGGER) type ref to ZCL_LOGGER optional
      value(IT_ACCOUNT) type ZFI_PRINT_ANN_T_HKONT
      value(IV_KWORD) type C optional
      value(IV_DWORD) type C optional
    returning
      value(RS_NOTE) type ZST_EDI_NATIFICATION .
  class-methods FILL_AVISO_BLRAPN
    importing
      value(IV_INVID) type ZFI_EDI_ANN-INVID
      !IV_FCODE type STRING optional
    exporting
      value(EV_XML) type XSTRING
      value(ES_DOC) type ZST_EDI_NATIFICATION
    returning
      value(RS_ACKNOWLEDGEMENT) type ZST_EDI_ACKNOWLEDGEMENT .
protected section.
private section.

  types:
    BEGIN OF mts_ident_node,
      code_guid  TYPE zmm_edoc_cm-code_guid,
      code_mark  TYPE zmm_edoc_cm-code_mark,
      upper_guid TYPE zmm_edoc_cm-upper_guid,
      group_pack TYPE zmm_edoc_cm-group_pack,
      cm_order   TYPE zmm_edoc_cm-cm_order,
    END OF mts_ident_node .
  types:
    mtt_ident_nodes TYPE SORTED TABLE OF mts_ident_node WITH NON-UNIQUE KEY upper_guid cm_order .
  types:
    begin of mts_blrwbl_charg,
      docpos type  zmm_edoc_i-docpos,
      charg  type zmm_edoc_i-charg,
    end of mts_blrwbl_charg .
  types:
    mtt_blrwbl_chargs type STANDARD TABLE OF mts_blrwbl_charg with DEFAULT KEY .

  class-data MV_TZONE type SY-ZONLO .
  class-data:
    BEGIN OF MS_CONFIG,
                batch  type abap_bool,
                logger type ref to zcl_logger,
              END OF ms_config .

  class-methods WRITE_CHARACTERISTIC
    importing
      value(IV_NAME) type CLIKE
      value(IV_VALUE) type CLIKE
    changing
      !CT_CHARS type CHAR_ALLOCATION_TT .
  class-methods READ_BLRWBL_CHARGS
    importing
      !IV_NOTEID type ZMM_EDOC_H-NOTEID
    returning
      value(RT_CHARGS) type MTT_BLRWBL_CHARGS .
  class-methods FILL_IDENT_NODE
    importing
      !IS_UPPER_NODE type MTS_IDENT_NODE optional
      !IS_NODE type MTS_IDENT_NODE
      !IT_NODES type MTT_IDENT_NODES
    changing
      !CT_IDENTIFICATION type ZTT_EDI_NODE_LINE_ITEM_IDENTIF .
ENDCLASS.



CLASS ZCL_EDI IMPLEMENTATION.


METHOD check_migo_item.
  IF is_item-shkzg <> 'H'.
    RETURN.
  ENDIF.

  DATA: lv_partner TYPE but000-partner.

  lv_partner = |{ is_item-werks(2) ALPHA = IN }|.

  SELECT SINGLE h~docnum, h~status2, h~doctype, h~noteid, i~matnrs, i~charg, b~partner
    INTO @DATA(ls_item)
    FROM zmm_edoc_i AS i
      LEFT JOIN zmm_edoc_h AS h ON h~docnum   = i~docnum
      LEFT JOIN zmm_edoc_bp AS b ON b~docnum  = i~docnum
                                AND b~bptype  = 'RE'
                                AND b~partner = @lv_partner
  WHERE i~matnrs = @is_item-matnr
    AND i~charg  = @is_item-charg
    AND i~tnved  <> ''.

  IF sy-subrc = 0 AND ls_item-partner IS NOT INITIAL.
    IF ls_item-status2 <> zcl_edi=>msc_stat2-f02 AND ls_item-status2 <> zcl_edi=>msc_stat2-f01 AND ls_item-status2 <> zcl_edi=>msc_stat2-r50.
      rt_bapiret[] = VALUE #( ( type       = 'E'
                                id         = 'ZMM_AC_EDI'
                                number     = '077'
                                message_v1 = ls_item-noteid ) ).
    ENDIF.
  ENDIF.

ENDMETHOD.


  METHOD check_single_step_move.
    DATA: ls_return TYPE bapireturn,
          lt_wmdvsx TYPE STANDARD TABLE OF bapiwmdvs,
          lt_wmdvex TYPE STANDARD TABLE OF bapiwmdve.

    IF it_items[] IS INITIAL.
      RETURN.
    ENDIF.

    SELECT mblnr, mjahr, zeile, umwrk, meins, umlgo, umcha, ummat, menge
      FROM matdoc
      INTO TABLE @DATA(lt_matdoc)
      FOR ALL ENTRIES IN @it_items[]
      WHERE mblnr = @it_items-mblnr
        AND mjahr = @it_items-mjahr
        AND zeile = @it_items-mblpo.

    LOOP AT lt_matdoc[] ASSIGNING FIELD-SYMBOL(<ls_matdoc>) WHERE ummat IS NOT INITIAL.
      "#26380 - определения материала с прослеживаемостью
      READ TABLE it_items[] ASSIGNING FIELD-SYMBOL(<ls_item>) WITH KEY mblnr = <ls_matdoc>-mblnr
                                                                       mjahr = <ls_matdoc>-mjahr
                                                                       mblpo = <ls_matdoc>-zeile.
      IF sy-subrc = 0.
        CHECK <ls_item>-tnved    <> '' AND <ls_item>-prevtype <> '' AND <ls_item>-prevnote <> ''
          AND <ls_item>-prevdat  <> '00000000000000' AND <ls_item>-prevline <> ''.
      ENDIF.

      CALL FUNCTION 'BAPI_MATERIAL_AVAILABILITY'
        EXPORTING
          plant    = <ls_matdoc>-umwrk
          material = CONV matnr18( <ls_matdoc>-ummat )
          unit     = <ls_matdoc>-meins
          stge_loc = <ls_matdoc>-umlgo
          batch    = <ls_matdoc>-umcha
        IMPORTING
          return   = ls_return
        TABLES
          wmdvsx   = lt_wmdvsx[]
          wmdvex   = lt_wmdvex[].

      "Согласно постановке - в данном случае выберется запас одного материала.
      DATA(lv_exist) =  VALUE #( lt_wmdvex[ 1 ]-com_qty DEFAULT 0 ).
      IF <ls_matdoc>-menge > lv_exist.
        MESSAGE e076 WITH lv_exist <ls_matdoc>-menge INTO zcl_log_helper=>mv_dummy.
        zcl_log_helper=>add( ).
      ENDIF.
    ENDLOOP.


  ENDMETHOD.


METHOD check_vl02n_items.
  IF it_xlips[] IS INITIAL.
    RETURN.
  ENDIF.

  TYPES: BEGIN OF lty_s_items,
           docnum  TYPE zmm_edoc_h-docnum,
           doctype TYPE zmm_edoc_h-doctype,
           status2 TYPE zmm_edoc_h-status2,
           noteid  TYPE zmm_edoc_h-noteid,
           matnrs  TYPE zmm_edoc_i-matnrs,
           charg   TYPE zmm_edoc_i-charg,
           partner TYPE but000-partner,
         END OF lty_s_items.
  DATA: lt_items TYPE STANDARD TABLE OF lty_s_items.

  lt_items[] = VALUE #( FOR <ls_xlips> IN it_xlips[]
                        ( matnrs  = <ls_xlips>-matnr
                          charg   = <ls_xlips>-charg
                          partner = |{ <ls_xlips>-werks(2) ALPHA = IN }| ) ).

  SELECT h~docnum, h~doctype, h~status2, h~noteid, i~matnrs, i~charg, b~partner
    FROM zmm_edoc_i AS i
      LEFT JOIN zmm_edoc_h AS h ON h~docnum   = i~docnum
      LEFT JOIN zmm_edoc_bp AS b ON b~docnum  = i~docnum
                                AND b~bptype  = 'RE'
    INTO TABLE @lt_items[]
    FOR ALL ENTRIES IN @lt_items[]
    WHERE i~matnrs  = @lt_items-matnrs
      AND i~charg   = @lt_items-charg
      AND i~tnved   <> ''
      AND b~partner = @lt_items-partner.

  IF sy-subrc = 0.
    LOOP AT lt_items[] ASSIGNING FIELD-SYMBOL(<ls_item>) WHERE partner IS NOT INITIAL.
      IF <ls_item>-status2 <> zcl_edi=>msc_stat2-f02 AND <ls_item>-status2 <> zcl_edi=>msc_stat2-f01 AND <ls_item>-status2 <> zcl_edi=>msc_stat2-r50.
        rt_return[] = VALUE #( ( msgty = 'E'
                                 msgid = 'ZMM_AC_EDI'
                                 msgno = '077'
                                 msgv1 = <ls_item>-noteid ) ).
      ENDIF.
    ENDLOOP.
  ENDIF.

ENDMETHOD.


  METHOD class_constructor.
    CALL FUNCTION 'GET_SYSTEM_TIMEZONE'
      IMPORTING
        timezone            = mv_tzone
      EXCEPTIONS
        customizing_missing = 1
        OTHERS              = 2.
    IF sy-subrc <> 0.
      mv_tzone = sy-zonlo.
    ENDIF.
  ENDMETHOD.


  METHOD create_guid.
    TRY.
        rv_guid = cl_system_uuid=>create_uuid_x16_static( ).
      CATCH cx_root INTO DATA(lx_root).
        zcl_log_helper=>add( io_exception = lx_root ).
    ENDTRY.
  ENDMETHOD.


  METHOD edi_date_time.
    DATA:
      lv_timestamp TYPE timestamp,
      lv_date      TYPE d,
      lv_time      TYPE t.

    IF iv_timestamp IS SUPPLIED.
      lv_timestamp = iv_timestamp.
    ELSE.
      GET TIME STAMP FIELD lv_timestamp.
    ENDIF.

    CONVERT TIME STAMP lv_timestamp TIME ZONE mv_tzone
        INTO DATE lv_date TIME lv_time.

    rv_date_time = |{ lv_date }{ lv_time }| .
  ENDMETHOD.


  METHOD edi_document_id.
    DATA:
      lv_docnum TYPE zmm_edoc_docnum .

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '04'
        object                  = 'ZMM_EDI'
      IMPORTING
        number                  = lv_docnum
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    rv_doc_id = |{ lv_docnum }|.
  ENDMETHOD.


  METHOD edi_get_address.
    CALL FUNCTION 'BAPI_COMPANYCODE_GETDETAIL'
      EXPORTING
        companycodeid       = iv_bukrs
      IMPORTING
        companycode_address = rs_result.
  ENDMETHOD.


  METHOD extract_certificate_owner.
    FIND REGEX 'OID.2.5.4.4\S(.+), OID.2.5.4.41\S(.+)' IN iv_certline SUBMATCHES DATA(lv_surname) DATA(lv_names).
    IF sy-subrc = 0.
      rv_owner = |{ lv_surname } { lv_names }|.
    ENDIF.
  ENDMETHOD.


METHOD fill_act_blrapn.

  SELECT a~act_id, h~docid, h~prvid, h~type, h~tstamp, h~refid, h~reftype, h~refdate,
         h~glnsh, h~glnre
    FROM zco_edi_act AS a
      LEFT JOIN zco_edi_history AS h ON h~invid = a~invid
    INTO TABLE @DATA(lt_history)
    WHERE a~act_id   = @is_act-act_id
      AND h~type     = 'BLRAPN'
      AND h~apncode  = '2560'.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  SORT lt_history[] BY tstamp DESCENDING.
  READ TABLE lt_history[] ASSIGNING FIELD-SYMBOL(<ls_history>) INDEX 1.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  rs_acknowledgement = VALUE #( BASE rs_acknowledgement
    edi_type           = zcl_edi=>msc_edoctype-blrapn
    document_id        = fill_m( iv_in = edi_document_id( )    iv_text = 'Номер документа' )
    function_code      = fill_m( iv_in = iv_fcode              iv_text = 'Функция сообщения' )
    creation_date_time = fill_m( iv_in = edi_date_time( )      iv_text = 'Дата создания' )
    delivery_note_id   = fill_m( iv_in = is_act-invid          iv_text = 'Номер накладной' )
    delivery_note_date = fill_m( iv_in = is_act-datum          iv_text = 'Дата накладной' )

    reference_doc-type     = fill_m( iv_in = <ls_history>-reftype iv_text = 'Тип ссылочного сообщения' )
    reference_doc-id       = fill_m( iv_in = <ls_history>-refid   iv_text = 'Номер ссылочного сообщения' )
    reference_doc-doc_date = fill_m( iv_in = <ls_history>-refdate iv_text = 'Дата ссылочного сообщения' )

    shipper-gln            = fill_m( iv_in = <ls_history>-glnsh   iv_text = 'GLN грузоотправителя' )
    receiver-gln           = fill_m( iv_in = <ls_history>-glnre   iv_text = 'GLN грузополучателя' )

    error_or_acknowledgement-code        = fill_m( iv_in = iv_code iv_text = 'Код ошибки или подтверждения' )
    error_or_acknowledgement-description = fill_c( iv_description ) ).
*    cond #( when iv_description is SUPPLIED then iv_description
*                                                           else SWITCH #( iv_code when '2650' then ''" text-001
*                                                                                  when '2750' then text-002 ) ) ) ).

  IF ev_xml IS REQUESTED.
    zcl_edi_xml=>serialization_raw( EXPORTING iv_edoctype        = rs_acknowledgement-edi_type
                                              is_acknowledgement = rs_acknowledgement
                                    IMPORTING ev_doc_raw         = ev_xml ).
  ENDIF.

  IF es_edoc IS REQUESTED.
    es_edoc = CORRESPONDING #( rs_acknowledgement MAPPING creation_timestamp = creation_date_time ).
  ENDIF.

ENDMETHOD.


  method FILL_AVISO_BLRAPN.

*  SELECT a~act_id, h~docid, h~prvid, h~type, h~tstamp, h~refid, h~reftype, h~refdate,
*         h~glnsh, h~glnre
*    FROM zco_edi_act AS a
*      LEFT JOIN zco_edi_history AS h ON h~invid = a~invid
*    INTO TABLE @DATA(lt_history)
*    WHERE a~act_id   = @is_act-act_id
*      AND h~type     = 'BLRAPN'
*      AND h~apncode  = '2560'.

  SELECT *
    FROM zfi_edi_messages
    INTO TABLE @DATA(lt_mess)
    WHERE invid   = @iv_invid
     AND  apncode = '2550'.

  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  SORT lt_mess[] BY create_date DESCENDING.
  READ TABLE lt_mess[] ASSIGNING FIELD-SYMBOL(<fs_mess>) INDEX 1.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  rs_acknowledgement = VALUE #( BASE rs_acknowledgement
    edi_type           = zcl_edi=>msc_edoctype-blrapn
    document_id        = fill_m( iv_in = edi_document_id( ) iv_text = 'Номер документа' )
    function_code      = fill_m( iv_in = <fs_mess>-fcode    iv_text = 'Функция сообщения' )
    creation_date_time = fill_m( iv_in = edi_date_time( )   iv_text = 'Дата создания' )
    delivery_note_id   = fill_m( iv_in = <fs_mess>-invid    iv_text = 'Номер накладной' )
    delivery_note_date = fill_m( iv_in = <fs_mess>-docdate  iv_text = 'Дата накладной' )

    reference_doc-type     = fill_m( iv_in = <fs_mess>-reftype                  iv_text = 'Тип ссылочного сообщения' )
    reference_doc-id       = fill_m( iv_in = <fs_mess>-refid                    iv_text = 'Номер ссылочного сообщения' )
    reference_doc-doc_date = fill_m( iv_in = edi_date_time( <fs_mess>-refdate ) iv_text = 'Дата ссылочного сообщения' )

    shipper-gln            = fill_m( iv_in = <fs_mess>-glnsh iv_text = 'GLN грузоотправителя' )
    receiver-gln           = fill_m( iv_in = <fs_mess>-glnre iv_text = 'GLN грузополучателя' )

    error_or_acknowledgement-code        = fill_m( iv_in = iv_fcode iv_text = 'Код ошибки или подтверждения' )
    error_or_acknowledgement-description = fill_c( <fs_mess>-descrp ) ).
*    cond #( when iv_description is SUPPLIED then iv_description
*                                                           else SWITCH #( iv_code when '2650' then ''" text-001
*                                                                                  when '2750' then text-002 ) ) ) ).

  IF ev_xml IS REQUESTED.
    zcl_edi_xml=>serialization_raw( EXPORTING iv_edoctype        = rs_acknowledgement-edi_type
                                              is_acknowledgement = rs_acknowledgement
                                    IMPORTING ev_doc_raw         = ev_xml ).
  ENDIF.

  IF es_doc IS REQUESTED.
    es_doc = CORRESPONDING #( rs_acknowledgement MAPPING creation_timestamp = creation_date_time ).
    es_doc-sender-gln        = rs_acknowledgement-shipper-gln.
    "es_doc-function_code     = rs_acknowledgement-error_or_acknowledgement-code.
    es_doc-natification_type = rs_acknowledgement-reference_doc-type.
    es_doc-natification_id   = rs_acknowledgement-reference_doc-id.
    es_doc-natification_date = <fs_mess>-refdate.
  ENDIF.

ENDMETHOD.


  METHOD fill_blrapn.
    DATA:
      ls_ref_edoc TYPE zmm_edoc_his2.

    CASE iv_code.
      WHEN '2750'. " 1
        SELECT SINGLE * INTO ls_ref_edoc
              FROM zmm_edoc_his2
              WHERE docnum = is_header-docnum
               AND direction = msc_direction-input
               AND  fcode  = '9'
          AND processed = 'X'.
      WHEN '2651'
        OR '2650'.
        ls_ref_edoc = is_ref_edoc.
    ENDCASE.

    es_acknowledgement-document_id        = fill_m( iv_in = edi_document_id( ) iv_text = 'Номер документа' ).
    es_acknowledgement-function_code      = fill_m( iv_in = iv_fcode            iv_text = 'Функция сообщения' ).
    es_acknowledgement-creation_date_time = fill_m( iv_in = edi_date_time( )    iv_text = 'Дата создания' ).
    es_acknowledgement-delivery_note_id   = fill_m( iv_in = ls_ref_edoc-noteid    iv_text = 'Номер накладной' ).
    es_acknowledgement-delivery_note_date = fill_m( iv_in = ls_ref_edoc-notedat   iv_text = 'Дата накладной' ).

    es_acknowledgement-reference_doc-type     = fill_m( iv_in = ls_ref_edoc-edoctype iv_text = 'Тип ссылочного сообщения' ).
    es_acknowledgement-reference_doc-id       = fill_m( iv_in = ls_ref_edoc-edocnum  iv_text = 'Номер ссылочного сообщения' ).
    es_acknowledgement-reference_doc-doc_date = fill_m( iv_in = edi_date_time( ls_ref_edoc-crdat ) iv_text = 'Дата ссылочного сообщения' ).

    es_acknowledgement-shipper-gln                     = fill_m( iv_in = ls_ref_edoc-glnsh iv_text = 'GLN грузоотправителя' ).

    es_acknowledgement-receiver-gln                     = fill_m( iv_in = ls_ref_edoc-glnre iv_text = 'GLN грузополучателя' ).

    es_acknowledgement-error_or_acknowledgement-code        = fill_m( iv_in = iv_code iv_text = 'Код ошибки или подтверждения' ).
    es_acknowledgement-error_or_acknowledgement-description = fill_c( iv_description ).
  ENDMETHOD.


  METHOD fill_blrdln.
    DATA:
      lv_flag  TYPE abap_bool.
    FIELD-SYMBOLS:
      <ls_doc>             TYPE zst_edi_delivery_note,
      <ls_item>            TYPE zmm_edoc_i,

      <ls_shipper>         TYPE zst_edi_node_bl_shipper,
      <ls_receiver>        TYPE zst_edi_node_bl_receiver,
      <ls_transit_country> TYPE zst_edi_node_bl_trans_country,
      <ls_ship_from>       TYPE zst_edi_node_bl_ship_from,
      <ls_ship_to>         TYPE zst_edi_node_bl_ship_to,
      <ls_carrier>         TYPE zst_edi_node_bl_carrier,
      <ls_extra_field>     TYPE zst_edi_node_bl_extra_field,
      <ls_line_item>       TYPE zst_edi_node_bl_line_item,
      <ls_sgby01>          TYPE zst_edi_node_bl_sgby01,
      <ls_total>           TYPE zst_edi_node_bl_total.

    SELECT *
      FROM zmm_edoc_efield
      INTO TABLE @DATA(lt_extra)
      WHERE docnum = @is_header-docnum.

*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    SELECT sign, opti AS option, low, high
      FROM tvarvc
      WHERE name = 'ZMM_34265O'
        AND type = 'S'
      INTO TABLE @DATA(lr_ZMM_34265O).

    SELECT sign, opti AS option, low, high
      FROM tvarvc
      WHERE name = 'ZMM_34265P'
        AND type = 'S'
      INTO TABLE @DATA(lr_ZMM_ZMM_34265P).
    IF is_header-bpre IN lr_ZMM_34265O AND is_header-bpsh IN lr_ZMM_ZMM_34265P.
      lv_flag = abap_true.
    ENDIF.
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость

    ASSIGN es_delivery_note TO <ls_doc>.

    <ls_doc>-delivery_note_type = fill_m( iv_in = is_header-tntype    iv_text = 'Тип накладной' ).
    <ls_doc>-document_id        = fill_m( iv_in = edi_document_id( )  iv_text = 'Номер документа' ).
    <ls_doc>-creation_date_time = fill_m( iv_in = edi_date_time( )    iv_text = 'Дата создания' ).
    <ls_doc>-function_code      = fill_m( iv_in = iv_fcode            iv_text = 'Функция сообщения' ).
    <ls_doc>-delivery_note_id   = fill_m( iv_in = is_header-noteid    iv_text = 'Номер накладной' ).
    <ls_doc>-delivery_note_date = fill_m( iv_in = is_header-notedat   iv_text = 'Дата накладной' ).
    <ls_doc>-contract_name      = fill_m( iv_in = 'Договор'           iv_text = 'Договор' ).
    <ls_doc>-contract_id        = fill_m( iv_in = is_header-zzext_key iv_text = '№ договора/дополнительного соглашения' ).
    <ls_doc>-contract_date      = fill_c( is_header-dcdoc ).

    IF   is_header-trans_id  IS NOT INITIAL
      OR is_header-trans_dat IS NOT INITIAL
      OR is_header-trans_nam IS NOT INITIAL.
      APPEND INITIAL LINE TO <ls_doc>-document ASSIGNING FIELD-SYMBOL(<ls_document>). " C
      <ls_document>-document_id   = fill_c( is_header-trans_id ).
      <ls_document>-document_date = fill_m( iv_in = is_header-trans_dat iv_text = 'Дата переданного документа' ).
      <ls_document>-document_name = fill_m( iv_in = is_header-trans_nam iv_text = 'Наим. переданного документа' ).
    ENDIF.

    ASSIGN <ls_doc>-shipper TO <ls_shipper>.                      " M
    <ls_shipper>-gln                     = fill_m( iv_in = is_header-glnsh iv_text = 'GLN грузоотправителя' ).
    <ls_shipper>-name                    = fill_m( iv_in = is_header-namsh iv_text = 'Имя грузоотправителя' ).
    <ls_shipper>-country                 = fill_c( is_header-landsh ).
    <ls_shipper>-address                 = fill_m( iv_in = is_header-adrsh iv_text = 'Адрес грузоотправителя' ).
    <ls_shipper>-vat_registration_number = fill_m( iv_in = is_header-vatsh iv_text = 'УНП грузоотправителя' ).
    <ls_shipper>-contact                 = fill_m( iv_in = is_header-consh iv_text = 'Отпуск разрешил' ).

    ASSIGN <ls_doc>-receiver TO <ls_receiver>.                    " M
    <ls_receiver>-gln                     = fill_m( iv_in = is_header-glnre iv_text = 'GLN грузополучателя' ).
    <ls_receiver>-name                    = fill_m( iv_in = is_header-namre iv_text = 'Имя грузополучателя' ).
    <ls_receiver>-address                 = fill_m( iv_in = is_header-adrre iv_text = 'Адрес грузополучателя' ).
    <ls_receiver>-country                 = fill_c( is_header-landre ).
    <ls_receiver>-vat_registration_number = fill_m( iv_in = is_header-vatre iv_text = 'УНП грузополучателя' ).
    IF is_header-transit IS NOT INITIAL.
      APPEND INITIAL LINE TO <ls_receiver>-transit_country_list ASSIGNING <ls_transit_country>.
      <ls_transit_country>-transit_country = is_header-transit.
    ENDIF.

    ASSIGN <ls_doc>-ship_from TO <ls_ship_from>.                  " M
    <ls_ship_from>-gln     = fill_c( is_header-glnsf ).
    <ls_ship_from>-address = fill_c( is_header-adrsf ).
    <ls_ship_from>-contact = fill_m( iv_in = is_header-consf iv_text = 'Сдал грузоотправитель' ).

    IF   is_header-glnst IS NOT INITIAL
      OR is_header-adrst IS NOT INITIAL.
      ASSIGN <ls_doc>-ship_to TO <ls_ship_to>.                      " C
      <ls_ship_to>-gln     = fill_c( is_header-glnst ).
      <ls_ship_to>-address = fill_c( is_header-adrst ).
    ENDIF.

    ASSIGN <ls_doc>-carrier TO <ls_carrier>.                      " M
*    <ls_carrier>-transport_contact        = fill_m( iv_in = is_header-contr iv_text = 'Водитель' ).
    <ls_carrier>-delivery_contact         = fill_m( iv_in = is_header-conca iv_text = 'Товар к перевозке принял' ).
*    <ls_carrier>-delivery_contact         = fill_c( is_header-conca ).
    <ls_carrier>-proxy_id                 = fill_c( is_header-prxid ).
    <ls_carrier>-proxy_date               = fill_c( is_header-prxdt ).
    <ls_carrier>-party_issuing_proxy_name = fill_c( is_header-prxnm ).
    <ls_carrier>-base_shipping_doc_name   = fill_c( is_header-delnam ).
    <ls_carrier>-base_shipping_doc_id     = fill_c( is_header-delid ).
    <ls_carrier>-base_shipping_doc_date   = fill_c( is_header-deldat ).

    <ls_doc>-order_id             = fill_c( '' ).
    <ls_doc>-currency             = fill_m( iv_in = iso_curr( is_header-waers ) iv_text = 'Код валюты' ).

    IF 1 = 2.
      APPEND INITIAL LINE TO <ls_doc>-extra_field ASSIGNING <ls_extra_field>. " C
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
      <ls_extra_field>-field_code  = fill_c( '' ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
    ENDIF.

    LOOP AT lt_extra[] ASSIGNING FIELD-SYMBOL(<ls_extra>) WHERE ( code = 'Z_ROST' OR code = 'Z_RAZM' )
                                                            AND docpos = 0.
      APPEND INITIAL LINE TO <ls_doc>-extra_field[] ASSIGNING <ls_extra_field>.
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = <ls_extra>-name ).
      <ls_extra_field>-field_code  = fill_m( iv_in = '' iv_text = <ls_extra>-code ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = <ls_extra>-value ).
    ENDLOOP.

    LOOP AT it_items ASSIGNING <ls_item>.
      APPEND INITIAL LINE TO <ls_doc>-despatchadvicelogisticunitline-line_item ASSIGNING <ls_line_item>. " M
      <ls_line_item>-line_item_number           = fill_m( iv_in = <ls_item>-docpos iv_text = 'Позиция документа' ).
      <ls_line_item>-line_item_sign             = fill_m( iv_in = <ls_item>-itsign iv_text = 'Признак вида товарной позиции' ).
      <ls_line_item>-line_item_id               = fill_c( <ls_item>-gtin ).
*      <ls_line_item>-line_item_identification   = fill_c( '' ).
      <ls_line_item>-item_custom_code           = fill_c( <ls_item>-tnved ).
      <ls_line_item>-delivery_type_prev         = fill_c( <ls_item>-prevtype ).
      <ls_line_item>-delivery_note_prev         = fill_c( <ls_item>-prevnote ).
      <ls_line_item>-delivery_note_date_prev    = fill_c( <ls_item>-prevdat ).
      <ls_line_item>-delivery_note_prev_line_id = fill_c( <ls_item>-prevline ).
      <ls_line_item>-line_item_buyer_id         = fill_c( <ls_item>-matnrb ).
      <ls_line_item>-line_item_supplier_id      = fill_c( <ls_item>-matnrs ).
      <ls_line_item>-line_item_name             = fill_m( iv_in = <ls_item>-maktx iv_text = 'Наименование материала' ).
      <ls_line_item>-quantity_despatched        = fill_m( iv_in = <ls_item>-lfimg iv_text = 'Фактически поставленное количество (ПЕ)' ).
*      <ls_line_item>-line_item_quantity_uom     = fill_m( iv_in = iso_unit( <ls_item>-meins ) iv_text = 'Базисная единица измерения' ).
      <ls_line_item>-line_item_quantity_uom     = fill_m( iv_in = iso_unit( EXPORTING iv_meins  = <ls_item>-meins
                                                                                      iv_docpos = <ls_item>-docpos
                                                                            CHANGING  ct_extra = <ls_doc>-extra_field[] )
                                                          iv_text = 'Базисная единица измерения' ).
      <ls_line_item>-country_of_origin            = fill_c( <ls_item>-z_origin ).
      <ls_line_item>-best_before_date             = fill_c( <ls_item>-sellby ).
      <ls_line_item>-quantity_despatched_spt      = fill_c( <ls_item>-sptdesp ).
      <ls_line_item>-line_item_quantity_spt       = fill_c( <ls_item>-sptquan ).
      <ls_line_item>-line_item_price_spt          = fill_c( <ls_item>-sptprice ).
*-->  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      IF <ls_item>-vrate = 0 AND <ls_doc>-shipper-vat_registration_number = <ls_doc>-receiver-vat_registration_number .
        <ls_line_item>-tax_rate = 'Без НДС'.
        <ls_line_item>-line_item_amount_charges         = fill_c( '0.00' ).

      ELSE.
        <ls_line_item>-tax_rate                       = fill_c( <ls_item>-vrate ).
        <ls_line_item>-line_item_amount_charges       = fill_c( <ls_item>-brate ).
      ENDIF.
*<--  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      <ls_line_item>-additional_information       = fill_c( <ls_item>-z_info ).
      <ls_line_item>-line_item_party_number       = fill_c( <ls_item>-charg ). "Открыто в связи с проверками прослеживаемости RM#25722.
      <ls_line_item>-line_item_product_date       = fill_c( <ls_item>-proddat ).

*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
      IF lv_flag IS NOT INITIAL AND <ls_item>-cost IS INITIAL.
        <ls_line_item>-amount_without_charges       = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-amount_without_charges       = fill_m( iv_in = <ls_item>-cost iv_text = 'Стоимость ВВ' ).
      ENDIF.

      IF lv_flag IS NOT INITIAL AND <ls_item>-price IS INITIAL.
        <ls_line_item>-line_item_price              = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-line_item_price              = fill_m( iv_in = <ls_item>-price iv_text = 'Цена' ).
      ENDIF.

      IF lv_flag IS NOT INITIAL AND <ls_item>-total IS INITIAL.
        <ls_line_item>-line_item_amount             = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-line_item_amount             = fill_m( iv_in = <ls_item>-total iv_text = 'Сумма с НДС' ).
      ENDIF.
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость

*      <ls_line_item>-amount_without_charges       = fill_m( iv_in = <ls_item>-cost iv_text = 'Стоимость ВВ' ).
*      <ls_line_item>-line_item_amount             = fill_m( iv_in = <ls_item>-total iv_text = 'Сумма с НДС' ).
*      <ls_line_item>-line_item_price              = fill_m( iv_in = <ls_item>-price iv_text = 'Цена' ).
      <ls_line_item>-line_item_manufacturer_price = fill_c( iv_in = <ls_item>-mprice ).
      <ls_line_item>-bulk_discount_rate           = fill_c( <ls_item>-bdiscnt ).
      <ls_line_item>-discount_rate                = fill_c( <ls_item>-discnt ).
      <ls_line_item>-line_item_amount_excise      = fill_c( <ls_item>-excise ).

      IF 1 = 2.
        APPEND INITIAL LINE TO <ls_line_item>-sgby01 ASSIGNING <ls_sgby01>.   " C
        <ls_sgby01>-sertificate_type    = fill_m( iv_in = '' iv_text = 'sertificate_type' ).
        <ls_sgby01>-sertificate_id      = fill_m( iv_in = '' iv_text = 'sertificate_id' ).
        <ls_sgby01>-begin_sertif_date   = fill_c( '' ).
        <ls_sgby01>-end_sertif_date     = fill_c( '' ).
        <ls_sgby01>-sertif_party_number = fill_c( '' ).
        <ls_sgby01>-sertif_product_date = fill_c( '' ).
        <ls_sgby01>-name                = fill_c( '' ).
      ENDIF.

      fill_identification( EXPORTING iv_item_guid      = <ls_item>-item_guid
                           IMPORTING et_identification = <ls_line_item>-line_item_identification ).

      IF 1 = 2.
        APPEND INITIAL LINE TO <ls_line_item>-line_item_extra_field ASSIGNING <ls_extra_field>. " C
        <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
        <ls_extra_field>-field_code  = fill_c( '' ).
        <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
      ENDIF.

      LOOP AT lt_extra[] ASSIGNING <ls_extra> WHERE ( code = 'Z_ROST' OR code = 'Z_RAZM' )
                                                AND docpos = <ls_item>-docpos.
        APPEND INITIAL LINE TO <ls_line_item>-line_item_extra_field[] ASSIGNING <ls_extra_field>.
        <ls_extra_field>-field_name  = fill_m( iv_in = <ls_extra>-name iv_text = 'Наименование доп. поля' ).
        <ls_extra_field>-field_code  = fill_m( iv_in = <ls_extra>-code iv_text = 'Параметр доп. поля' ).
        <ls_extra_field>-field_value = fill_m( iv_in = <ls_extra>-value iv_text = 'Значение доп. поля' ).
      ENDLOOP.

    ENDLOOP.
    IF it_items IS INITIAL.
      " В документе нет ни одной позиции
      MESSAGE e021 INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
    ENDIF.

    ASSIGN <ls_doc>-total TO <ls_total>.   " M
*-->  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      IF is_header-brate IS INITIAL AND <ls_doc>-shipper-vat_registration_number = <ls_doc>-receiver-vat_registration_number .
        <ls_total>-total_amount_charges         = fill_c( '0.00' ).
      ELSE.
        <ls_total>-total_amount_charges         = fill_c( is_header-brate ).
      ENDIF.
*<--  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    IF lv_flag IS NOT INITIAL AND is_header-total  IS INITIAL.
      <ls_total>-total_amount = fill_c( '0.00' ).
    ELSE.
      <ls_total>-total_amount = fill_m( iv_in = is_header-total          iv_text = 'Сумма с НДС' ).
    ENDIF.
    IF lv_flag IS NOT INITIAL AND is_header-cost IS INITIAL.
      <ls_total>-total_amount_without_charges = fill_c( '0.00' ).
    ELSE.
      <ls_total>-total_amount_without_charges = fill_m( iv_in = is_header-cost           iv_text = 'Итого Стоимость' ).
    ENDIF.
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
*    <ls_total>-total_amount_without_charges = fill_m( iv_in = is_header-cost           iv_text = 'Итого Стоимость' ).
    "<ls_total>-total_amount_charges         = fill_c( is_header-brate ).
*    <ls_total>-total_amount                 = fill_m( iv_in = is_header-total          iv_text = 'Сумма с НДС' ).
    <ls_total>-total_line_item              = fill_m( iv_in = is_header-total_items    iv_text = 'Итого позиций' ).
    <ls_total>-total_line_item_quantity     = fill_m( iv_in = is_header-total_quantity iv_text = 'Итого количество' ).
    <ls_total>-total_amount_excise          = fill_c( is_header-excise ).

  ENDMETHOD.


  METHOD fill_blrdnr.
    DATA:
*      lv_crdat  TYPE string,
*      lv_docnum TYPE string,

      BEGIN OF ls_edoc_his,
        edocnum TYPE zmm_edoc_his2-edocnum,
        crdat   TYPE zmm_edoc_his2-crdat,
      END OF ls_edoc_his.

    FIELD-SYMBOLS:
      <ls_doc>           TYPE zst_edi_delivery_note,
      <ls_reference_doc> TYPE zst_edi_node_bl_ref_doc,
      <ls_shipper>       TYPE zst_edi_node_bl_shipper,
      <ls_receiver>      TYPE zst_edi_node_bl_receiver,
      <ls_ship_to>       TYPE zst_edi_node_bl_ship_to,
      <ls_extra_field>   TYPE zst_edi_node_bl_extra_field.


*    IF is_header-crdat IS NOT INITIAL.
*      lv_crdat = |{ is_header-crdat }000000|.
*    ENDIF.

*    IF is_header-docnum IS NOT INITIAL.
*      lv_docnum = |{ is_header-docnum ALPHA = OUT }_{ sy-datum }{ sy-uzeit }|.
*      CONDENSE lv_docnum NO-GAPS.
*    ENDIF.

    "Склад LGORT на 16.09.2021 не участвует в сообщении blrdnr - проверяем его вне заполнения сообщения.
    "28.12.2021 -  Склад обязательный, если в накладной есть поставка
    IF is_header-vbeln is not initial and is_header-lgort is INITIAL.
      MESSAGE e020 WITH 'Склад поступления' INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
    ENDIF.

    SELECT SINGLE edocnum crdat INTO ls_edoc_his
          FROM zmm_edoc_his2
          WHERE docnum = is_header-docnum
           AND  fcode  = '9'.
    IF sy-subrc <> 0.
      " Не найден документ-оригинал для документа &1, накладной &2
      MESSAGE e023 WITH is_header-docnum is_header-noteid INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
      RETURN.
    ENDIF.

    ASSIGN es_delivery_note TO <ls_doc>.

    <ls_doc>-delivery_note_type = fill_m( iv_in = is_header-tntype   iv_text = 'Тип накладной' ).
    <ls_doc>-document_id        = fill_m( iv_in = edi_document_id( ) iv_text = 'Номер документа' ).
    <ls_doc>-creation_date_time = fill_m( iv_in = edi_date_time( )   iv_text = 'Дата создания' ).
    <ls_doc>-function_code      = fill_m( iv_in = iv_fcode           iv_text = 'Функция сообщения' ).

    ASSIGN <ls_doc>-reference_doc TO <ls_reference_doc>.
    <ls_reference_doc>-id       = fill_m( iv_in = ls_edoc_his-edocnum  iv_text = 'Номер ссылочного сообщения' ).
    <ls_reference_doc>-doc_date = fill_m( iv_in = edi_date_time( ls_edoc_his-crdat ) iv_text = 'Дата ссылочного сообщения' ).

    <ls_doc>-delivery_note_id   = fill_m( iv_in = is_header-noteid    iv_text = 'Номер накладной' ).
    <ls_doc>-delivery_note_date = fill_m( iv_in = is_header-notedat   iv_text = 'Дата накладной' ).

    ASSIGN <ls_doc>-shipper TO <ls_shipper>.                      " M
    <ls_shipper>-gln                     = fill_m( iv_in = is_header-glnsh iv_text = 'GLN грузоотправителя' ).
    <ls_shipper>-name                    = fill_m( iv_in = is_header-namsh iv_text = 'Имя грузоотправителя' ).
    <ls_shipper>-address                 = fill_m( iv_in = is_header-adrsh iv_text = 'Адрес грузоотправителя' ).
    <ls_shipper>-vat_registration_number = fill_m( iv_in = is_header-vatsh iv_text = 'УНП грузоотправителя' ).

    ASSIGN <ls_doc>-receiver TO <ls_receiver>.                    " M
    <ls_receiver>-gln                     = fill_m( iv_in = is_header-glnre iv_text = 'GLN грузополучателя' ).
    <ls_receiver>-name                    = fill_m( iv_in = is_header-namre iv_text = 'Имя грузополучателя' ).
    <ls_receiver>-address                 = fill_m( iv_in = is_header-adrre iv_text = 'Адрес грузополучателя' ).
    <ls_receiver>-vat_registration_number = fill_m( iv_in = is_header-vatre iv_text = 'УНП грузополучателя' ).

    ASSIGN <ls_doc>-ship_to TO <ls_ship_to>.                      " M
    <ls_ship_to>-contact = fill_m( iv_in = is_header-contst iv_text = 'Принял грузополучатель' ).

    IF 1 = 2.
      APPEND INITIAL LINE TO <ls_doc>-extra_field ASSIGNING <ls_extra_field>. " C
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
      <ls_extra_field>-field_code  = fill_c( '' ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
    ENDIF.

  ENDMETHOD.


  METHOD fill_blrinv.
    DATA lv_symbol TYPE C LENGTH 1.
    rs_note = VALUE #(
     edi_type           = zcl_edi=>msc_edoctype-blrinv
     invoice_type       = fill_m( iv_in = '270'                                         iv_text = 'Тип накладной' ) "21/02/2022 - 700->270
     document_id        = SWITCH #( iv_export WHEN abap_true THEN is_act-act_id
                                              ELSE fill_m( iv_in = zcl_edi=>edi_document_id( ) iv_text = 'Номер документа' ) )
     creation_timestamp = SWITCH #( iv_export WHEN abap_true THEN |{ is_act-creat_date }000000|
                                              ELSE fill_m( iv_in = zcl_edi=>edi_date_time( )   iv_text = 'Дата и время составления' ) )
     creation_place     = fill_m( iv_in = zcl_edi=>edi_get_address( is_act-bukrs )-city iv_text = 'Место составления' )
     function_code      = fill_m( iv_in = iv_fcode                                      iv_text = 'Функция сообщения' )
     invoice_id         = fill_m( iv_in = is_act-invid                                  iv_text = 'Номер Акта' )
     invoice_date       = fill_m( iv_in = is_act-datum                                  iv_text = 'Дата акта' )
     contract_name      = fill_m( iv_in = is_act-contr_n                                iv_text = 'Договор' )
     contract_id        = fill_m( iv_in = is_act-contr_id                               iv_text = 'Номер документа основания' )
     contract_date      = fill_m( iv_in = is_act-dt_dog                                 iv_text = 'Дата документа основания' )
     attachments        = VALUE #( FOR <ls_attach> IN it_attach[] INDEX INTO lv_idx
                                   ( index          = fill_c( lv_idx )
                                     document_id    = fill_c( <ls_attach>-documentid )
                                     document_date  = fill_c( <ls_attach>-documentdate )
                                     document_name  = fill_c( <ls_attach>-documentname )
                                     content        = fill_c( cl_http_utility=>encode_x_base64( unencoded = <ls_attach>-attcontent ) )
                                     content_type   = SWITCH #( <ls_attach>-atttype
                                                        WHEN '' THEN 'UNKNOWN'
                                                        ELSE fill_m( iv_in = <ls_attach>-atttype                  iv_text = 'Тип вложения' ) )
                                     content_name   = fill_m( iv_in = <ls_attach>-attname                         iv_text = 'Имя вложения' ) ) )
     supplier           = VALUE #( gln                      = fill_m( iv_in = is_sender-gln                       iv_text = 'GLN-номер поставщика' )
                                   name                     = fill_m( iv_in = is_sender-name                      iv_text = 'Наименование поставщика' )
                                   address                  = fill_m( iv_in = is_sender-address                   iv_text = 'Адрес поставщика' )
                                   vat_registration_number  = fill_m( iv_in = is_sender-vat_registration_number   iv_text = 'УНП поставщика' )
                                   contact                  = fill_m( iv_in = shift_left( val = |{ is_act-sh_position } { is_act-sh_contact }| sub = ` ` )
                                                                                                                  iv_text = 'Ответственное лицо' ) )
     buyer              = VALUE #( gln                      = fill_m( iv_in = is_receiver-gln                     iv_text = 'GLN-номер покупателя' )
                                   name                     = fill_m( iv_in = is_receiver-name                    iv_text = 'Наименование покупателя' )
                                   address                  = fill_m( iv_in = is_receiver-address                 iv_text = 'Адрес покупателя' )
                                   vat_registration_number  = fill_m( iv_in = is_receiver-vat_registration_number iv_text = 'УНП покупателя' )
                                   contact                  = fill_m( iv_in = shift_left( val = |{ is_act-re_position } { is_act-re_contact }| sub = ` ` )
                                                                                                                  iv_text = 'Ответственное лицо' ) )
     currency           = fill_m( iv_in = is_act-waers        iv_text = 'Код валюты' )
                                   ).
    rs_note-items[] = VALUE #( FOR <ls_itm> IN it_items[]
                                   INDEX INTO lv_idx
                                   ( number             = fill_m( iv_in = lv_idx                             iv_text = 'Порядковый номер выполненной работы, оказанной услуги' )
                                     supplier_id        = fill_c( iv_in = <ls_itm>-aufnr )
                                     name               = fill_m( iv_in = <ls_itm>-ktext                     iv_text = |{ is_act-act_id }({ lv_idx }) - Наименование работы, услуги| )
*                                     quantity           = condense( fill_c( iv_in = COND #( WHEN <ls_itm>-menge <> 0 THEN <ls_itm>-menge ELSE 1 ) ) )
                                     quantity           = fill_num( iv_in = COND #( WHEN <ls_itm>-menge <> 0 THEN <ls_itm>-menge ELSE 1 ) )
                                     quantity_uom       = fill_m( iv_in = <ls_itm>-okei  iv_text = |{ is_act-act_id }({ lv_idx }) - Единица измерения количества работ/услуг| )
*                                     quantity_uom       = fill_m( iv_in = 'PCE'  iv_text = |{ is_act-act_id }({ lv_idx }) - Единица измерения количества работ/услуг| )
                                     amount_wo_charges  = condense( fill_c( iv_in = <ls_itm>-summa ) )"        iv_text = 'Стоимость в белорусских рублях' )
                                     amount             = condense( fill_c( iv_in = <ls_itm>-summa ) )"        iv_text = 'Общая сумма с НДС в белорусских рублях' )
                                     price              = condense( fill_c( iv_in = <ls_itm>-price ) )"        iv_text = 'Цена в белорусских рублях' )
                                   ) ).

    IF is_act-manual = abap_true AND rs_note-items[] IS INITIAL.
      rs_note-items[] = VALUE #( ( number             = '1'
                                   name               = is_act-ktext
                                   quantity           = '1'
                                   quantity_uom       = 'PCE'
                                   amount_wo_charges  = condense( fill_c( iv_in = is_act-summa ) )
                                   amount             = condense( fill_c( iv_in = is_act-summa ) )
                                   price              = condense( fill_c( iv_in = is_act-summa ) ) ) ).
    ENDIF.

    LOOP AT rs_note-items[] ASSIGNING FIELD-SYMBOL(<ls_item>).
      rs_note-total-amount_wo_charges = rs_note-total-amount_wo_charges + <ls_item>-amount_wo_charges.
      rs_note-total-amount            = rs_note-total-amount + <ls_item>-amount.
      rs_note-total-items_count       = rs_note-total-items_count + 1.
    ENDLOOP.

    CONDENSE: rs_note-total-amount_wo_charges, rs_note-total-amount, rs_note-total-items_count.
    lv_symbol = substring( off = strlen( rs_note-total-amount_wo_charges ) - 1 len = 1 val = rs_note-total-amount_wo_charges ).
    IF lv_symbol = '-'.
      DATA(lv_length) = strlen( rs_note-total-amount_wo_charges ) - 1.
      rs_note-total-amount_wo_charges = rs_note-total-amount_wo_charges+lv_length(1) && rs_note-total-amount_wo_charges(lv_length).
    ENDIF.
    lv_symbol =  substring( off = strlen( rs_note-total-amount ) - 1 len = 1 val = rs_note-total-amount ).
    IF lv_symbol = '-'.
      lv_length = strlen( rs_note-total-amount ) - 1.
      rs_note-total-amount = rs_note-total-amount+lv_length(1) && rs_note-total-amount(lv_length).
    ENDIF.

  ENDMETHOD.


  METHOD fill_blrneo.

    DATA:
      iv_period TYPE FTI_MONTH_YEAR,
      lv_txt    TYPE STRING,
      lv_period TYPE zfi_print_ann_head-period.

    CONCATENATE  is_aviso-datum+0(4) is_aviso-datum+4(2) INTO iv_period.
    SELECT SINGLE ltx FROM t247 INTO  @lv_period  WHERE spras = @sy-langu AND mnr = @iv_period.

    CONCATENATE lv_period iv_period(4) INTO lv_period SEPARATED BY space.
    rs_note = VALUE #(
      edi_type           = zcl_edi=>msc_edoctype-blrneo
      natification_type  = fill_m( iv_in = '526'                                iv_text = 'Вид извещения' )
      document_id        = SWITCH #( iv_fcode WHEN 9 THEN is_aviso-ann_id
                                              ELSE fill_m( iv_in = zcl_edi=>edi_document_id( ) iv_text = 'Номер документа' ) )"fill_m( iv_in = is_aviso-ann_id                      iv_text = 'Уникальный номер электронного извещения' )
      creation_timestamp = fill_m( iv_in = zcl_edi=>edi_date_time( )            iv_text = 'Дата и время создания извещения' )"fill_m( iv_in = |{ is_aviso-creat_date }000000|      iv_text = 'Дата и время создания извещения' )
      function_code      = fill_m( iv_in = iv_fcode                             iv_text = 'Функция извещения' )
      natification_id    = fill_m( iv_in = is_aviso-invid                       iv_text = 'Номер извещения' )
      natification_date  = fill_m( iv_in = is_aviso-datum                       iv_text = 'Дата извещения' )
      account_id         = fill_m( iv_in = is_aviso-account_id                  iv_text = 'Номер счета' )
      account_date       = fill_m( iv_in = lv_period                            iv_text = 'Дата счета' )
      total              = VALUE #( total_debet  = fill_m( iv_in = iv_dword     iv_text = 'Сумма в белорусских рублях' )
                                    total_credit = fill_m( iv_in = iv_kword     iv_text = 'Сумма в белорусских рублях' ) )

      "fill_m( iv_in = is_aviso-summa                       iv_text = 'Сумма в белорусских рублях' )
      sender             = VALUE #( gln     = fill_m( iv_in = is_sender-gln     iv_text = 'GLN-номер отправителя извещения' )
                                    name    = fill_m( iv_in = is_sender-name    iv_text = 'Наименование отправителя извещения')
                                    contact = fill_m( iv_in = is_sender-contact iv_text = 'Ответственное лицо') )

      receiver           = VALUE #( gln     = fill_m( iv_in = is_receiver-gln   iv_text = 'GLN-номер получателя извещения' )
                                    name    = fill_m( iv_in = is_receiver-name  iv_text = 'Наименование получателя извещения') )

*      ship_from          = VALUE #( gln     = fill_m( iv_in = is_receiver-gln   iv_text = 'GLN-номер места отправления извещения' )
*                                    address = fill_m( iv_in = is_receiver-name  iv_text = 'Адрес места отправления извещения') )
*
*      ship_to            = VALUE #( gln     = fill_m( iv_in = is_receiver-gln   iv_text = 'GLN-номер места доставления извещения' )
*                                    address = fill_m( iv_in = is_receiver-name  iv_text = 'Адрес места доставления извещения') )
    ).
    "
*    LOOP AT it_items ASSIGNING FIELD-SYMBOL(<ls_item>).
*      CONCATENATE <ls_item>-txt <ls_item>-sgtxt INTO <ls_item>-sgtxt SEPARATED BY space.
*    ENDLOOP.
    rs_note-items[] = VALUE #( FOR <ls_itm> IN it_items[] INDEX INTO lv_index
                                ( id_number      = fill_m( iv_in = lv_index        iv_text = 'Порядковый номер записи')
                                  name           = fill_m( iv_in = <ls_itm>-text   iv_text = 'Содержание записи')
                                  account_debit  = fill_m( iv_in = <ls_itm>-debet  iv_text = 'Счет дебет')
                                  account_credit = fill_m( iv_in = <ls_itm>-kredit iv_text = 'Счет кредит')
                                  amount         = fill_m( iv_in = <ls_itm>-dmbtr  iv_text = 'Сумма в белорусских рублях') ) ).

    rs_note-account[] = VALUE #( FOR <ls_accs> IN it_account[] INDEX INTO lv_index
                                ( id_number      = fill_m( iv_in = lv_index        iv_text = 'Порядковый номер записи')
                                  name           = fill_m( iv_in = <ls_accs>-hkont  iv_text = 'Номер счета')
                                  account_debit  = SWITCH #( <ls_accs>-ddmbtr WHEN 0 THEN '0.00'
                                                                                     ELSE fill_m( iv_in = <ls_accs>-ddmbtr  iv_text = 'Сумма в белорусских рублях') )
                                  account_credit = SWITCH #( <ls_accs>-kdmbtr WHEN 0 THEN '0.00'
                                                                                     ELSE fill_m( iv_in = <ls_accs>-kdmbtr  iv_text = 'Сумма в белорусских рублях') ) ) ).

  ENDMETHOD.


  METHOD fill_blrwbl.
    DATA:
      lv_flag  TYPE abap_bool.
    FIELD-SYMBOLS:
      <ls_doc>           TYPE zst_edi_delivery_note,
      <ls_item>          TYPE zmm_edoc_i,

      <ls_shipper>       TYPE zst_edi_node_bl_shipper,
      <ls_receiver>      TYPE zst_edi_node_bl_receiver,
      <ls_freight_payer> TYPE zst_edi_node_bl_freight_payer,
      <ls_ship_from>     TYPE zst_edi_node_bl_ship_from,
      <ls_ship_to>       TYPE zst_edi_node_bl_ship_to,
      <ls_carrier>       TYPE zst_edi_node_bl_carrier,
      <ls_extra_field>   TYPE zst_edi_node_bl_extra_field,
      <ls_line_item>     TYPE zst_edi_node_bl_line_item,
      <ls_sgby01>        TYPE zst_edi_node_bl_sgby01,
      <ls_total>         TYPE zst_edi_node_bl_total.

    SELECT *
      FROM zmm_edoc_efield
      INTO TABLE @DATA(lt_extra)
      WHERE docnum = @is_header-docnum.
*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    SELECT sign, opti AS option, low, high
      FROM tvarvc
      WHERE name = 'ZMM_34265O'
        AND type = 'S'
      INTO TABLE @DATA(lr_ZMM_34265O).

    SELECT sign, opti AS option, low, high
      FROM tvarvc
      WHERE name = 'ZMM_34265P'
        AND type = 'S'
      INTO TABLE @DATA(lr_ZMM_ZMM_34265P).
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    IF is_header-bpre IN lr_ZMM_34265O AND is_header-bpsh IN lr_ZMM_ZMM_34265P.
      lv_flag = abap_true.
    ENDIF.
*    lv_flag = abap_false.
    ASSIGN es_delivery_note TO <ls_doc>.

    <ls_doc>-delivery_note_type = fill_m( iv_in = is_header-tntype    iv_text = 'Тип накладной' ).
    <ls_doc>-document_id        = fill_m( iv_in = edi_document_id( )  iv_text = 'Номер документа' ).
    <ls_doc>-creation_date_time = fill_m( iv_in = edi_date_time( )    iv_text = 'Дата создания' ).
    <ls_doc>-function_code      = fill_m( iv_in = iv_fcode            iv_text = 'Функция сообщения' ).
    <ls_doc>-delivery_note_id   = fill_m( iv_in = is_header-noteid    iv_text = 'Номер накладной' ).
    <ls_doc>-delivery_note_date = fill_m( iv_in = is_header-notedat   iv_text = 'Дата накладной' ).
    <ls_doc>-contract_name      = fill_m( iv_in = 'Договор'           iv_text = 'Договор' ).
    <ls_doc>-contract_id        = fill_m( iv_in = is_header-zzext_key iv_text = '№ договора/дополнительного соглашения' ).
    <ls_doc>-contract_date      = fill_c( is_header-dcdoc ).
    <ls_doc>-waybill_id         = fill_c( is_header-waybill ).

    IF   is_header-trans_id  IS NOT INITIAL
      OR is_header-trans_dat IS NOT INITIAL
      OR is_header-trans_nam IS NOT INITIAL.
      APPEND INITIAL LINE TO <ls_doc>-document ASSIGNING FIELD-SYMBOL(<ls_document>). " C
      <ls_document>-document_id   = fill_c( is_header-trans_id ).
      <ls_document>-document_date = fill_c( is_header-trans_dat ).
      <ls_document>-document_name = fill_m( iv_in = is_header-trans_nam iv_text = 'Наим. переданного документа' ).
    ENDIF.

    ASSIGN <ls_doc>-shipper TO <ls_shipper>.                      " M
    <ls_shipper>-gln                     = fill_m( iv_in = is_header-glnsh iv_text = 'GLN грузоотправителя' ).
    <ls_shipper>-name                    = fill_m( iv_in = is_header-namsh iv_text = 'Имя грузоотправителя' ).
    <ls_shipper>-country                 = fill_c( is_header-landsh ).
    <ls_shipper>-address                 = fill_m( iv_in = is_header-adrsh iv_text = 'Адрес грузоотправителя' ).
    <ls_shipper>-vat_registration_number = fill_m( iv_in = is_header-vatsh iv_text = 'УНП грузоотправителя' ).
    <ls_shipper>-contact                 = fill_m( iv_in = is_header-consh iv_text = 'Отпуск разрешил' ).

    ASSIGN <ls_doc>-receiver TO <ls_receiver>.                    " M
    <ls_receiver>-gln                     = fill_m( iv_in = is_header-glnre iv_text = 'GLN грузополучателя' ).
    <ls_receiver>-name                    = fill_m( iv_in = is_header-namre iv_text = 'Имя грузополучателя' ).
    <ls_receiver>-address                 = fill_m( iv_in = is_header-adrre iv_text = 'Адрес грузополучателя' ).
    <ls_receiver>-vat_registration_number = fill_m( iv_in = is_header-vatre iv_text = 'УНП грузополучателя' ).

    IF NOT ( is_header-glnpa IS INITIAL
         AND is_header-nampa IS INITIAL
         AND is_header-adrpa IS INITIAL
         AND is_header-vatpa IS INITIAL ).
      ASSIGN <ls_doc>-freight_payer TO <ls_freight_payer>.          " C
      <ls_freight_payer>-gln                     = fill_c( is_header-glnpa ).
      <ls_freight_payer>-name                    = fill_m( iv_in = is_header-nampa iv_text = 'Имя плательщика' ).
      <ls_freight_payer>-address                 = fill_m( iv_in = is_header-adrpa iv_text = 'Адрес плательщика' ).
      <ls_freight_payer>-vat_registration_number = fill_m( iv_in = is_header-vatpa iv_text = 'УНП плательщика' ).
    ENDIF.

    ASSIGN <ls_doc>-ship_from TO <ls_ship_from>.                  " M
    <ls_ship_from>-gln     = fill_m( iv_in = is_header-glnsf iv_text = 'GLN пункта погрузки' ).
    <ls_ship_from>-address = fill_m( iv_in = is_header-adrsf iv_text = 'Адрес пункта погрузки' ).
    <ls_ship_from>-contact = fill_m( iv_in = is_header-consf iv_text = 'Сдал грузоотправитель' ).

    ASSIGN <ls_doc>-ship_to TO <ls_ship_to>.                      " M
    <ls_ship_to>-gln     = fill_m( iv_in = is_header-glnst iv_text = 'GLN пункта разгрузки' ).
    <ls_ship_to>-address = fill_m( iv_in = is_header-adrst iv_text = 'Адрес пункта разгрузки' ).

    ASSIGN <ls_doc>-carrier TO <ls_carrier>.                      " M
    <ls_carrier>-transport_contact        = fill_m( iv_in = is_header-contr iv_text = 'Водитель' ).
    <ls_carrier>-delivery_contact         = fill_m( iv_in = is_header-conca iv_text = 'Товар к перевозке принял' ).
    <ls_carrier>-proxy_id                 = fill_c( is_header-prxid ).
    <ls_carrier>-proxy_date               = fill_c( is_header-prxdt ).
    <ls_carrier>-party_issuing_proxy_name = fill_c( is_header-prxnm ).

    <ls_doc>-quantity_trip        = fill_c( is_header-quantr ).
    <ls_doc>-transport_owner_name = fill_c( is_header-trnown ).
    <ls_doc>-transport_id         = fill_m( iv_in = is_header-trnsp iv_text = 'Марка и гос. номер транспорта' ).
    <ls_doc>-trailer_id           = fill_c( is_header-trailer ).
    <ls_doc>-seal_id              = fill_c( is_header-sealid ).
    <ls_doc>-order_id             = fill_c( '' ).
    <ls_doc>-currency             = fill_m( iv_in = iso_curr( is_header-waers ) iv_text = 'Код валюты' ).

    IF 1 = 2.
      APPEND INITIAL LINE TO <ls_doc>-extra_field ASSIGNING <ls_extra_field>. " C
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
      <ls_extra_field>-field_code  = fill_c( '' ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
    ENDIF.

    LOOP AT lt_extra[] ASSIGNING FIELD-SYMBOL(<ls_extra>) WHERE ( code = 'Z_ROST' OR code = 'Z_RAZM' )
                                                            AND docpos = 0.
      APPEND INITIAL LINE TO <ls_doc>-extra_field[] ASSIGNING <ls_extra_field>.
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = <ls_extra>-name ).
      <ls_extra_field>-field_code  = fill_m( iv_in = '' iv_text = <ls_extra>-code ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = <ls_extra>-value ).
    ENDLOOP.

    LOOP AT it_items ASSIGNING <ls_item>.
      APPEND INITIAL LINE TO <ls_doc>-despatchadvicelogisticunitline-line_item ASSIGNING <ls_line_item>. " M
      <ls_line_item>-line_item_number          = fill_m( iv_in = <ls_item>-docpos iv_text = 'Позиция документа' ).
      <ls_line_item>-line_item_sign             = fill_m( iv_in = <ls_item>-itsign iv_text = 'Признак вида товарной позиции' ).
      <ls_line_item>-line_item_id               = fill_c( <ls_item>-gtin ).
      <ls_line_item>-line_item_buyer_id         = fill_c( <ls_item>-matnrb ).
      <ls_line_item>-item_custom_code           = fill_c( <ls_item>-tnved ).
      <ls_line_item>-delivery_type_prev         = fill_c( <ls_item>-prevtype ).
      <ls_line_item>-delivery_note_prev         = fill_c( <ls_item>-prevnote ).
      <ls_line_item>-delivery_note_date_prev    = fill_c( <ls_item>-prevdat ).
      <ls_line_item>-delivery_note_prev_line_id = fill_c( <ls_item>-prevline ).
      <ls_line_item>-line_item_supplier_id      = fill_c( <ls_item>-matnrs ).
      <ls_line_item>-line_item_name             = fill_m( iv_in = <ls_item>-maktx iv_text = 'Наименование материала' ).
      <ls_line_item>-gross_weight_value         = fill_m( iv_in = <ls_item>-brgew iv_text = 'Вес брутто' ).
      <ls_line_item>-quantity_despatched        = fill_m( iv_in = <ls_item>-lfimg iv_text = 'Фактически поставленное количество (ПЕ)' ).
*      <ls_line_item>-line_item_quantity_uom     = fill_m( iv_in = iso_unit( <ls_item>-meins ) iv_text = 'Базисная единица измерения' ).
      <ls_line_item>-line_item_quantity_uom     = fill_m( iv_in = iso_unit( EXPORTING iv_meins  = <ls_item>-meins
                                                                                      iv_docpos = <ls_item>-docpos
                                                                            CHANGING  ct_extra = <ls_doc>-extra_field[] )
                                                          iv_text = 'Базисная единица измерения' ).
      <ls_line_item>-despatchunitquantitydespatched = fill_c( <ls_item>-anzpk ).
      <ls_line_item>-country_of_origin              = fill_c( <ls_item>-z_origin ).
      <ls_line_item>-best_before_date               = fill_c( <ls_item>-sellby ).
      <ls_line_item>-quantity_despatched_spt        = fill_c( <ls_item>-sptdesp ).
      <ls_line_item>-line_item_quantity_spt         = fill_c( <ls_item>-sptquan ).
      <ls_line_item>-line_item_price_spt            = fill_c( <ls_item>-sptprice ).
*-->  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      IF <ls_item>-vrate = 0 AND <ls_doc>-shipper-vat_registration_number = <ls_doc>-receiver-vat_registration_number .
        <ls_line_item>-tax_rate = 'Без НДС'.
        <ls_line_item>-line_item_amount_charges       = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-tax_rate                       = fill_c( <ls_item>-vrate ).
        <ls_line_item>-line_item_amount_charges       = fill_c( <ls_item>-brate ).
      ENDIF.
*<--  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      <ls_line_item>-additional_information         = fill_c( <ls_item>-z_info ).
      <ls_line_item>-line_item_party_number         = fill_c( <ls_item>-charg ).
      <ls_line_item>-line_item_product_date         = fill_c( <ls_item>-proddat ).
*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
      IF lv_flag IS NOT INITIAL AND <ls_item>-cost IS INITIAL.
        <ls_line_item>-amount_without_charges       = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-amount_without_charges       = fill_m( iv_in = <ls_item>-cost iv_text = 'Стоимость ВВ' ).
      ENDIF.

      IF lv_flag IS NOT INITIAL AND <ls_item>-price IS INITIAL.
        <ls_line_item>-line_item_price              = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-line_item_price              = fill_m( iv_in = <ls_item>-price iv_text = 'Цена' ).
      ENDIF.

      IF lv_flag IS NOT INITIAL AND <ls_item>-total IS INITIAL.
        <ls_line_item>-line_item_amount             = fill_c( '0.00' ).
      ELSE.
        <ls_line_item>-line_item_amount             = fill_m( iv_in = <ls_item>-total iv_text = 'Сумма с НДС' ).
      ENDIF.
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
      <ls_line_item>-line_item_manufacturer_price = fill_c( iv_in = <ls_item>-mprice ).
      <ls_line_item>-bulk_discount_rate           = fill_c( <ls_item>-bdiscnt ).
      <ls_line_item>-discount_rate                = fill_c( <ls_item>-discnt ).
      <ls_line_item>-line_item_amount_excise      = fill_c( <ls_item>-excise ).

      IF 1 = 2.
        APPEND INITIAL LINE TO <ls_line_item>-sgby01 ASSIGNING <ls_sgby01>.   " C
        <ls_sgby01>-sertificate_type    = fill_m( iv_in = '' iv_text = 'sertificate_type' ).
        <ls_sgby01>-sertificate_id      = fill_m( iv_in = '' iv_text = 'sertificate_id' ).
        <ls_sgby01>-begin_sertif_date   = fill_c( '' ).
        <ls_sgby01>-end_sertif_date     = fill_c( '' ).
        <ls_sgby01>-sertif_party_number = fill_c( '' ).
        <ls_sgby01>-sertif_product_date = fill_c( '' ).
        <ls_sgby01>-name                = fill_c( '' ).
      ENDIF.

      fill_identification( EXPORTING iv_item_guid      = <ls_item>-item_guid
                           IMPORTING et_identification = <ls_line_item>-line_item_identification ).
      IF 1 = 2.
        APPEND INITIAL LINE TO <ls_line_item>-line_item_extra_field ASSIGNING <ls_extra_field>. " C
        <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
        <ls_extra_field>-field_code  = fill_c( '' ).
        <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
      ENDIF.

      LOOP AT lt_extra[] ASSIGNING <ls_extra> WHERE ( code = 'Z_ROST' OR code = 'Z_RAZM' )
                                                AND docpos = <ls_item>-docpos.
        APPEND INITIAL LINE TO <ls_line_item>-line_item_extra_field[] ASSIGNING <ls_extra_field>.
        <ls_extra_field>-field_name  = fill_m( iv_in = <ls_extra>-name iv_text = 'Наименование доп. поля' ).
        <ls_extra_field>-field_code  = fill_m( iv_in = <ls_extra>-code iv_text = 'Параметр доп. поля' ).
        <ls_extra_field>-field_value = fill_m( iv_in = <ls_extra>-value iv_text = 'Значение доп. поля' ).
      ENDLOOP.

    ENDLOOP.

    IF it_items IS INITIAL.
      " В документе нет ни одной позиции
      MESSAGE e021 INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
    ENDIF.

    ASSIGN <ls_doc>-total TO <ls_total>.   " M
*-->  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
      IF is_header-brate IS INITIAL AND <ls_doc>-shipper-vat_registration_number = <ls_doc>-receiver-vat_registration_number .
        <ls_total>-total_amount_charges         = fill_c( '0.00' ).
      ELSE.
        <ls_total>-total_amount_charges         = fill_c( is_header-brate ).
      ENDIF.
*<--  V.Zaretsky #32975 - Указание в накладных "Без НДС" и прочерк
    "<ls_total>-total_amount_charges         = fill_c( is_header-brate ).
*-->  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    IF lv_flag IS NOT INITIAL AND is_header-total   IS INITIAL.
      <ls_total>-total_amount = fill_c( '0.00' ).
    ELSE.
      <ls_total>-total_amount = fill_m( iv_in = is_header-total          iv_text = 'Сумма с НДС' ).
    ENDIF.
    IF lv_flag IS NOT INITIAL AND is_header-cost IS INITIAL.
      <ls_total>-total_amount_without_charges = fill_c( '0.00' ).
    ELSE.
      <ls_total>-total_amount_without_charges = fill_m( iv_in = is_header-cost           iv_text = 'Итого Стоимость' ).
    ENDIF.
*<--  V.Zaretsky #34265 - ZMM_EDI Доработка ЭТТН ZX7, нулевая стоимость
    "<ls_total>-total_amount                 = fill_m( iv_in = is_header-total          iv_text = 'Сумма с НДС' ).
    "<ls_total>-total_amount_without_charges = fill_m( iv_in = is_header-cost           iv_text = 'Итого Стоимость' ).
    <ls_total>-total_line_item              = fill_m( iv_in = is_header-total_items    iv_text = 'Итого позиций' ).
    <ls_total>-total_line_item_quantity     = fill_m( iv_in = is_header-total_quantity iv_text = 'Итого количество' ).
    <ls_total>-total_gross_weight           = fill_m( iv_in = is_header-brgew          iv_text = 'Итого Вес брутто' ).
    <ls_total>-total_despatch_unit_quantity = fill_c( is_header-anzpk ).
    <ls_total>-total_amount_excise          = fill_c( is_header-excise ).

  ENDMETHOD.


  METHOD fill_blrwbr.
    DATA:
*      lv_crdat         TYPE string,
*      lv_docnum        TYPE string,
*      lv_xml           TYPE xstring,
*      lt_subnodes      TYPE zcl_edi_xml=>mtt_xml_subtree,
*      ls_delivery_note TYPE zst_edi_delivery_note,

      BEGIN OF ls_edoc_his,
        edocid  TYPE zmm_edoc_his2-edocid,
        edocnum TYPE zmm_edoc_his2-edocnum,
        crdat   TYPE zmm_edoc_his2-crdat,
      END OF ls_edoc_his.

    FIELD-SYMBOLS:
      <ls_doc>           TYPE zst_edi_delivery_note,
      <ls_reference_doc> TYPE zst_edi_node_bl_ref_doc,
      <ls_report>        TYPE zst_edi_node_bl_report,
      <ls_shipper>       TYPE zst_edi_node_bl_shipper,
      <ls_receiver>      TYPE zst_edi_node_bl_receiver,
      <ls_ship_from>     TYPE zst_edi_node_bl_ship_from,
      <ls_ship_to>       TYPE zst_edi_node_bl_ship_to,
      <ls_extra_field>   TYPE zst_edi_node_bl_extra_field,
      <ls_subnode>       TYPE zcl_edi_xml=>mst_xml_subtree.


*    IF is_header-crdat IS NOT INITIAL.
*      lv_crdat = |{ is_header-crdat }000000|.
*    ENDIF.

*    IF is_header-docnum IS NOT INITIAL.
*      lv_docnum = |{ is_header-docnum ALPHA = OUT }_{ sy-datum }{ sy-uzeit }|.
*      CONDENSE lv_docnum NO-GAPS.
*    ENDIF.

    "Склад LGORT на 24.09.2021 не участвует в сообщении blrwbr - проверяем его вне заполнения сообщения.
    "28.12.2021 -  Склад обязательный, если в накладной есть поставка
    IF is_header-vbeln is not initial and is_header-lgort is INITIAL.
      MESSAGE e020 WITH 'Склад поступления' INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
    ENDIF.

    SELECT SINGLE edocid edocnum crdat INTO ls_edoc_his
          FROM zmm_edoc_his2
          WHERE docnum = is_header-docnum
           AND  fcode  = '9'.
    IF sy-subrc <> 0.
      " Не найден документ-оригинал для документа &1, накладной &2
      MESSAGE e023 WITH is_header-docnum is_header-noteid INTO zcl_log_helper=>mv_dummy.
      zcl_log_helper=>add( ).
      RETURN.
*    ELSE.
*      SELECT SINGLE xml INTO lv_xml
*          FROM zmm_edi_mess
*          WHERE bukrs     = is_header-bukrs
*           AND  edocid    = ls_edoc_his-edocid
*           AND  direction = msc_direction-input.
*
*      zcl_edi_xml=>read_xml( EXPORTING iv_xml      = lv_xml
*                                  it_names    = VALUE #( ( name = 'BLRWBL' ) )
*                        IMPORTING et_subnodes = lt_subnodes ).
*
*      READ TABLE lt_subnodes ASSIGNING <ls_subnode>
*          WITH KEY name = 'BLRWBL'.
*      CHECK sy-subrc = 0.
*
*      TRY.
*          CALL TRANSFORMATION zmm_ac_edi_dn_2
*              SOURCE XML lv_xml+<ls_subnode>-pos(<ls_subnode>-len)
*              RESULT delivery_note = ls_delivery_note.
*        CATCH cx_root INTO DATA(lx_root).
*          MESSAGE lx_root TYPE 'I'.
*          RETURN.
*      ENDTRY.
    ENDIF.

    ASSIGN es_delivery_note TO <ls_doc>.

    <ls_doc>-delivery_note_type = fill_m( iv_in = is_header-tntype   iv_text = 'Тип накладной' ).
    <ls_doc>-document_id        = fill_m( iv_in = edi_document_id( ) iv_text = 'Номер документа' ).
    <ls_doc>-creation_date_time = fill_m( iv_in = edi_date_time( )   iv_text = 'Дата создания' ).
    <ls_doc>-function_code      = fill_m( iv_in = iv_fcode           iv_text = 'Функция сообщения' ).

    ASSIGN <ls_doc>-reference_doc TO <ls_reference_doc>.
    <ls_reference_doc>-id       = fill_m( iv_in = ls_edoc_his-edocnum  iv_text = 'Номер ссылочного сообщения' ).
    <ls_reference_doc>-doc_date = fill_m( iv_in = edi_date_time( ls_edoc_his-crdat ) iv_text = 'Дата ссылочного сообщения' ).

    <ls_doc>-delivery_note_id   = fill_m( iv_in = is_header-noteid    iv_text = 'Номер накладной' ).
    <ls_doc>-delivery_note_date = fill_m( iv_in = is_header-notedat   iv_text = 'Дата накладной' ).

    IF NOT ( is_header-repid  IS INITIAL
          OR is_header-repdat IS INITIAL
          OR is_header-repnam IS INITIAL ).
      APPEND INITIAL LINE TO <ls_doc>-report ASSIGNING <ls_report>.
      <ls_report>-report_id   = fill_m( iv_in = is_header-repid     iv_text = 'Номер акта' ).
      <ls_report>-report_date = fill_m( iv_in = is_header-repdat    iv_text = 'Дата акта' ).
      <ls_report>-report_name = fill_m( iv_in = is_header-repnam    iv_text = 'Название акта' ).
    ENDIF.

    ASSIGN <ls_doc>-shipper TO <ls_shipper>.                      " M
    <ls_shipper>-gln                     = fill_m( iv_in = is_header-glnsh iv_text = 'GLN грузоотправителя' ).
    <ls_shipper>-name                    = fill_m( iv_in = is_header-namsh iv_text = 'Имя грузоотправителя' ).
    <ls_shipper>-address                 = fill_m( iv_in = is_header-adrsh iv_text = 'Адрес грузоотправителя' ).
    <ls_shipper>-vat_registration_number = fill_m( iv_in = is_header-vatsh iv_text = 'УНП грузоотправителя' ).

    ASSIGN <ls_doc>-receiver TO <ls_receiver>.                    " M
    <ls_receiver>-gln                     = fill_m( iv_in = is_header-glnre iv_text = 'GLN грузополучателя' ).
    <ls_receiver>-name                    = fill_m( iv_in = is_header-namre iv_text = 'Имя грузополучателя' ).
    <ls_receiver>-address                 = fill_m( iv_in = is_header-adrre iv_text = 'Адрес грузополучателя' ).
    <ls_receiver>-vat_registration_number = fill_m( iv_in = is_header-vatre iv_text = 'УНП грузополучателя' ).

    ASSIGN <ls_doc>-ship_to TO <ls_ship_to>.                      " M
    <ls_ship_to>-gln     = fill_m( iv_in = is_header-glnst iv_text = 'GLN пункта разгрузки' ).
    <ls_ship_to>-address = fill_m( iv_in = is_header-adrst iv_text = 'Адрес пункта разгрузки' ).
    <ls_ship_to>-contact = fill_m( iv_in = is_header-contst iv_text = 'Принял грузополучатель' ).

    <ls_doc>-seal_id              = fill_c( is_header-sealid ).

    IF 1 = 2.
      APPEND INITIAL LINE TO <ls_doc>-extra_field ASSIGNING <ls_extra_field>. " C
      <ls_extra_field>-field_name  = fill_m( iv_in = '' iv_text = 'field_name' ).
      <ls_extra_field>-field_code  = fill_c( '' ).
      <ls_extra_field>-field_value = fill_m( iv_in = '' iv_text = 'field_value' ).
    ENDIF.

  ENDMETHOD.


  METHOD fill_c.
    IF iv_in IS NOT INITIAL.
      fill_field( EXPORTING iv_in = iv_in
                  IMPORTING ev_out = rv_out ).
    ENDIF.

  ENDMETHOD.


METHOD fill_event_log.

*  DATA: BEGIN OF ts_zmm_edoc_his2,
*          mandt         TYPE zmm_edoc_his2-mandt,
*          edocid        TYPE zmm_edoc_his2-edocid,
*          direction     TYPE zmm_edoc_his2-direction,
*          docnum        TYPE zmm_edoc_his2-docnum,
*          edocnum       TYPE zmm_edoc_his2-edocnum,
*          edoctype      TYPE zmm_edoc_his2-edoctype,
*          fcode         TYPE zmm_edoc_his2-fcode,
*          ercode        TYPE zmm_edoc_his2-ercode,
*          getdat        TYPE zmm_edoc_his2-getdat,
*          crdat         TYPE zmm_edoc_his2-crdat,
*          crrec         TYPE zmm_edoc_his2-crrec,
*          noteid        TYPE zmm_edoc_his2-noteid,
*          notedat       TYPE zmm_edoc_his2-notedat,
*          refid         TYPE zmm_edoc_his2-refid,
*          reftype       TYPE zmm_edoc_his2-reftype,
*          refdat        TYPE zmm_edoc_his2-refdat,
*          glnsh         TYPE zmm_edoc_his2-glnsh,
*          glnre         TYPE zmm_edoc_his2-glnre,
*          descrp        TYPE zmm_edoc_his2-descrp,
*          status        TYPE zmm_edoc_his2-status,
*          xml           TYPE zmm_edoc_his2-xml,
*          processed     TYPE zmm_edoc_his2-processed,
*          verified      TYPE zmm_edoc_his2-verified,
*          origin_status TYPE zmm_edoc_his2-origin_status,
*          origin_stname TYPE zmm_edoc_his2-origin_stname,
*          recip_status  TYPE zmm_edoc_his2-recip_status,
*          recip_stname  TYPE zmm_edoc_his2-recip_stname,
*          sys_status    TYPE zmm_edoc_his2-sys_status,
*          sys_stname    TYPE zmm_edoc_his2-sys_stname,
*          mns_status    TYPE zmm_edoc_his2-mns_status,
*          mns_stname    TYPE zmm_edoc_his2-mns_stname,
*        END OF ts_zmm_edoc_his2.
  DATA:
    lv_field     TYPE text30,
    lv_nl        TYPE string,
    lv_doc       TYPE string,
    lv_direction TYPE string.

  SELECT * INTO TABLE @DATA(lt_hist)
      FROM zmm_edoc_his2
      WHERE docnum = @iv_docnum.

  SORT lt_hist BY getdat crdat crrec.

  LOOP AT lt_hist ASSIGNING FIELD-SYMBOL(<ls_hist>).
    CLEAR:
      lv_direction,
      lv_doc.
*    WRITE getdat TO lv_dat.
    CASE <ls_hist>-direction.
      WHEN zcl_edi=>msc_direction-input.
        IF <ls_hist>-edoctype = zcl_edi=>msc_edoctype-blrapn.
          lv_direction = |Получено|.
        ELSE.
          lv_direction = |Получена|.
        ENDIF.
      WHEN zcl_edi=>msc_direction-output.
        IF <ls_hist>-edoctype = zcl_edi=>msc_edoctype-blrapn.
          lv_direction = |Отправлено|.
        ELSE.
          lv_direction = |Отправлена|.
        ENDIF.
    ENDCASE.

    CASE <ls_hist>-edoctype.
      WHEN zcl_edi=>msc_edoctype-blrwbl
        OR zcl_edi=>msc_edoctype-blrdln.
        IF <ls_hist>-fcode = '9'.
          lv_doc = |накладная оригинал|.
        ELSEIF <ls_hist>-fcode = '1'.
          lv_doc = |отмена накладной|.
        ENDIF.
      WHEN zcl_edi=>msc_edoctype-blrwbr
        OR zcl_edi=>msc_edoctype-blrdnr.
        lv_doc = |накладная ответ|.
      WHEN zcl_edi=>msc_edoctype-blrapn.
        CASE <ls_hist>-ercode.
          WHEN '2550'.
            lv_doc = |подтверждение о получении накладной|.
          WHEN '2560'.
            lv_doc = |подтверждение об отправке накладной|.
          WHEN '2650'.
            lv_doc = |извещение о получении накладной|.
          WHEN '2551'.
            lv_doc = |Подтверждение о получении извещения|.
          WHEN '2750'.
            lv_doc = |уведомление об изменении:{ cl_abap_char_utilities=>cr_lf }{ cl_abap_char_utilities=>horizontal_tab }{ <ls_hist>-descrp }|.
          WHEN '2651'.
            lv_doc = |извещение о получении уведомления|.
          WHEN '2570'.
            lv_doc = |уведомление об ошибке:{ cl_abap_char_utilities=>cr_lf }{ cl_abap_char_utilities=>horizontal_tab }{ <ls_hist>-descrp }|.
          WHEN '2571'.
            lv_doc = |предупреждение о несоответствии:{ cl_abap_char_utilities=>cr_lf }{ cl_abap_char_utilities=>horizontal_tab }{ <ls_hist>-descrp }|.
        ENDCASE.
    ENDCASE.


    rv_log = |{ rv_log }{ lv_nl }{ <ls_hist>-getdat TIMESTAMP = USER TIMEZONE = sy-zonlo }{ cl_abap_char_utilities=>horizontal_tab }{ lv_direction } { lv_doc } |.
    lv_nl = cl_abap_char_utilities=>cr_lf.
  ENDLOOP.

ENDMETHOD.


  METHOD fill_field.
    STATICS lv_type TYPE c LENGTH 1.
    FIELD-SYMBOLS <lv_in> TYPE numeric.
    DESCRIBE FIELD iv_in TYPE lv_type.

    IF lv_type CA 'bsI8P'.
      ASSIGN iv_in TO <lv_in>.
      ev_out = |{ <lv_in> SIGN = LEFT NUMBER = RAW }|.
    ELSEIF lv_type = 'N'.
      ev_out = iv_in.
      SHIFT ev_out LEFT DELETING LEADING '0'.
    ELSEIF lv_type = 'C'.
      ev_out = condense( iv_in ).
    ELSE.
      ev_out = iv_in.
    ENDIF.
  ENDMETHOD.


  METHOD fill_identification.

    DATA:
      lt_nodes       TYPE mtt_ident_nodes.

    CLEAR et_identification.

    IF iv_item_guid IS INITIAL.
      RETURN.
    ENDIF.

    SELECT code_guid, code_mark, upper_guid, group_pack, cm_order
          INTO CORRESPONDING FIELDS OF TABLE @lt_nodes
          FROM zmm_edoc_cm
          WHERE item_guid = @iv_item_guid.
    CHECK sy-subrc = 0.

    fill_ident_node( EXPORTING is_node           = VALUE #( code_mark = mc_top_level_code_mark )
                               it_nodes          = lt_nodes
                     CHANGING  ct_identification = et_identification ).
  ENDMETHOD.


  METHOD fill_ident_node.
    DATA:
      lv_index          TYPE i,
      ls_identification TYPE zst_edi_node_line_item_identif,
*      ls_gp_header      TYPE zst_edi_node_group_packing_hea,
      lv_space          TYPE string,
      lv_cnt            TYPE i,
      lv_group          TYPE abap_bool.
    FIELD-SYMBOLS:
*      <ls_identification> TYPE zst_edi_node_line_item_identif,
      <ls_gp_header> TYPE zst_edi_node_group_packing_hea,
      <ls_node>      TYPE mts_ident_node.

    lv_index = lines( ct_identification ) + 1.

    IF is_node-code_guid IS NOT INITIAL.
      APPEND INITIAL LINE TO ls_identification-group_packing_header ASSIGNING <ls_gp_header>.
      <ls_gp_header>-group_packing_code_mark = is_node-code_mark.
      <ls_gp_header>-upper_level_code_mark   = is_upper_node-code_mark.
    ENDIF.

    LOOP AT it_nodes ASSIGNING <ls_node> WHERE upper_guid = is_node-code_guid.

      CONCATENATE ls_identification-field_code_mark lv_space <ls_node>-code_mark
          INTO ls_identification-field_code_mark.
      lv_space = ` `.

      ADD 1 TO lv_cnt.
      lv_group = <ls_node>-group_pack.

      CHECK <ls_node>-group_pack = abap_true.
      fill_ident_node( EXPORTING is_upper_node     = is_node
                                 is_node           = <ls_node>
                                 it_nodes          = it_nodes
                       CHANGING  ct_identification = ct_identification ).
    ENDLOOP.
    IF sy-subrc = 0 AND ( is_node-code_guid IS NOT INITIAL OR lv_cnt > 1 OR lv_group = abap_false ).
      INSERT ls_identification INTO ct_identification INDEX lv_index.
    ENDIF.
  ENDMETHOD.


  METHOD FILL_M.
    IF iv_in IS NOT INITIAL.
      fill_field( EXPORTING iv_in = iv_in
                  IMPORTING ev_out = rv_out ).
    ELSE.
      " Не заполнено обязательное поле "&1"
      if ms_config-batch = abap_false.
        MESSAGE e020 WITH iv_text INTO zcl_log_helper=>mv_dummy.
        zcl_log_helper=>add( ).
      elseif ms_config-logger is BOUND.
        ms_config-logger->add_message( iv_class   = 'ZMM_AC_EDI'
                                       iv_message = 'E020'
                                       iv_msgv1   = iv_text ).
      endif.
    ENDIF.

  ENDMETHOD.


  METHOD fill_num.
    STATICS lv_type TYPE c LENGTH 1.
    FIELD-SYMBOLS <lv_in> TYPE numeric.
    DESCRIBE FIELD iv_in TYPE lv_type.

    IF lv_type CA 'bsI8P'.
      ASSIGN iv_in TO <lv_in>.
      rv_out = |{ <lv_in> SIGN = LEFT NUMBER = RAW }|.
      SHIFT rv_out RIGHT DELETING TRAILING: '0'.
      SHIFT rv_out RIGHT DELETING TRAILING: '.'.
      CONDENSE rv_out.
    ELSEIF lv_type = 'N'.
      rv_out = iv_in.
      SHIFT rv_out LEFT DELETING LEADING '0'.
    ELSEIF lv_type = 'C'.
      rv_out = condense( iv_in ).
    ELSE.
      rv_out = iv_in.
    ENDIF.
  ENDMETHOD.


  METHOD generate_input_docnum.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '02'
        object                  = 'ZMM_EDI'
      IMPORTING
        number                  = rv_docnum
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.


  METHOD generate_note_id.

    DATA:
      lv_provider TYPE tvarvc-low,
      lv_docnum   TYPE zmm_edoc_docnum.

    SELECT SINGLE low INTO lv_provider
        FROM tvarvc
        WHERE name = 'ZMM_EDI_PROVIDER'.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '03'
        object                  = 'ZMM_EDI'
      IMPORTING
        number                  = lv_docnum
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.

    CONCATENATE lv_provider iv_gln lv_docnum
        INTO rv_noteid SEPARATED BY '-'.

  ENDMETHOD.


  METHOD GENERATE_OUTPUT_DOCNUM.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr             = '01'
        object                  = 'ZMM_EDI'
      IMPORTING
        number                  = rv_docnum
      EXCEPTIONS
        interval_not_found      = 1
        number_range_not_intern = 2
        object_not_found        = 3
        quantity_is_0           = 4
        quantity_is_not_1       = 5
        interval_overflow       = 6
        buffer_overflow         = 7
        OTHERS                  = 8.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

  ENDMETHOD.


  METHOD get_bukrs.
    TYPES:
      BEGIN OF lst_buf,
        werks TYPE werks_d,
        bukrs TYPE bukrs,
      END OF lst_buf.
    STATICS:
      st_buf TYPE STANDARD TABLE OF lst_buf.

    DATA:
      lv_bwkey TYPE bwkey.

    CLEAR rv_bukrs.

    READ TABLE st_buf ASSIGNING FIELD-SYMBOL(<ls_buf>)
        WITH KEY werks = iv_werks
        BINARY SEARCH.
    IF sy-subrc <> 0.
      INSERT INITIAL LINE INTO st_buf INDEX sy-tabix ASSIGNING <ls_buf>.
      <ls_buf>-werks = iv_werks.

      SELECT SINGLE bwkey INTO lv_bwkey
        FROM t001w
        WHERE werks = iv_werks.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      SELECT SINGLE bukrs INTO <ls_buf>-bukrs
          FROM t001k
          WHERE bwkey = lv_bwkey.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.
    ENDIF.

    rv_bukrs = <ls_buf>-bukrs.

  ENDMETHOD.


  METHOD get_direction.
    CLEAR rv_out.
    CASE iv_in.
      WHEN `1`.
        rv_out = msc_direction-output.
      WHEN `-1`.
        rv_out = msc_direction-input.
    ENDCASE.
  ENDMETHOD.


  METHOD get_domain_description.

    DATA : lo_element TYPE REF TO cl_abap_elemdescr,
           lt_values  TYPE ddfixvalues,
           ls_value   TYPE ddfixvalue.

    CLEAR cv_return.
    lo_element ?= cl_abap_typedescr=>describe_by_data( p_field ) .
    lt_values =  lo_element->get_ddic_fixed_values( sy-langu ) .
    READ TABLE lt_values INTO ls_value WITH KEY low = p_field .
    IF sy-subrc = 0 .
      cv_return = ls_value-ddtext .
    ENDIF.

  ENDMETHOD.


  METHOD get_osp_address.
    DATA:
      BEGIN OF ls_adrc,
        city1      TYPE adrc-city1,
        street     TYPE adrc-street,
        house_num1 TYPE adrc-house_num1,
        post_code1 TYPE adrc-post_code1,
      END OF ls_adrc,
      lv_adrnr TYPE tvst-adrnr.

    FIELD-SYMBOLS:
      <lv_fld> TYPE csequence.

    DO 1 TIMES.
      SELECT SINGLE adrnr INTO lv_adrnr
          FROM tvst
          WHERE vstel = iv_vstel.
      CHECK sy-subrc = 0.

      SELECT SINGLE city1, street, house_num1, post_code1
        INTO @ls_adrc
        FROM adrc
        WHERE addrnumber = @lv_adrnr.
      CHECK sy-subrc = 0.
      DO.
        ASSIGN COMPONENT sy-index OF STRUCTURE ls_adrc TO <lv_fld>.
        IF sy-subrc <> 0.
          EXIT.
        ENDIF.
        CHECK <lv_fld> <> ''.
        IF rv_adr = ''.
          rv_adr = <lv_fld>.
        ELSE.
          CONCATENATE rv_adr <lv_fld> INTO rv_adr SEPARATED BY ', '.
        ENDIF.
      ENDDO.
      CONDENSE rv_adr.
    ENDDO.

  ENDMETHOD.


  METHOD get_werks_by_gln.
  ENDMETHOD.


  METHOD iso_curr.

    CLEAR rv_curr.
    IF iv_waers IS INITIAL.
      RETURN.
    ENDIF.

    SELECT SINGLE isocd INTO rv_curr
        FROM tcurc
        WHERE waers = iv_waers.

  ENDMETHOD.


  METHOD iso_land.
    CLEAR rv_land.
    IF iv_land IS INITIAL.
      RETURN.
    ENDIF.
    SELECT SINGLE intca INTO rv_land
          FROM t005
          WHERE land1 = iv_land.
  ENDMETHOD.


  METHOD iso_unit.
    IF iv_meins IS INITIAL.
      RETURN.
    ENDIF.

    SELECT SINGLE t~msehi, t~isocode, e~nnmsehi, e~nnisocode, e~isocode AS iom_iso
      FROM t006 AS t
      LEFT JOIN zmm_edi_iom AS e ON e~nnmsehi = t~msehi
      INTO @DATA(ls_unit)
      WHERE t~msehi = @iv_meins.

    IF sy-subrc = 0 AND ls_unit-nnisocode <> ''.
      "substitution.
      rv_unit = ls_unit-nnisocode.
      READ TABLE ct_extra[] ASSIGNING FIELD-SYMBOL(<ls_extra>) WITH KEY field_name  = mv_special_iso
                                                                        field_code  = iv_docpos
                                                                        field_value = ls_unit-isocode.
      IF sy-subrc <> 0.
        ct_extra[] = VALUE #( BASE ct_extra[]
        ( field_name  = mv_special_iso
          field_code  = iv_docpos
          field_value = COND #( WHEN ls_unit-isocode IS NOT INITIAL THEN ls_unit-isocode ELSE ls_unit-iom_iso ) ) ).
      ENDIF.
    ELSE.
      rv_unit = ls_unit-isocode.
    ENDIF.

  ENDMETHOD.


METHOD read_blrwbl_chargs.
  SELECT SINGLE docnum, doctype
    FROM zmm_edoc_h
    INTO @DATA(ls_note)
    WHERE noteid = @iv_noteid
      AND doctype = 'O'.
  IF sy-subrc <> 0.
    RETURN.
  ENDIF.

  SELECT item~mblnr, item~mjahr, item~mblpo, mat~vgart, mat~umcha, wl~charg
    FROM zmm_edoc_i AS item
      LEFT JOIN matdoc AS mat ON mat~mblnr = item~mblnr
                             AND mat~mjahr = item~mjahr
                             AND mat~zeile = item~mblpo
      LEFT JOIN matdoc AS wl  ON wl~mblnr = mat~lfbnr
                             AND wl~mjahr = mat~lfbja
                             AND wl~zeile = mat~lfpos
    INTO TABLE @DATA(lt_positions)
    WHERE docnum = @ls_note-docnum.

  LOOP AT lt_positions[] ASSIGNING FIELD-SYMBOL(<ls_pos>).
    APPEND VALUE #( docpos = <ls_pos>-mblpo
                    charg = SWITCH #( <ls_pos>-vgart WHEN 'WA' THEN <ls_pos>-umcha
                                                     WHEN 'WL' THEN <ls_pos>-charg ) ) TO rt_chargs[].
  ENDLOOP.
ENDMETHOD.


  METHOD read_bp.
    DATA:
      BEGIN OF ls_name,
        name_org1 TYPE but000-name_org1,
        name_org2 TYPE but000-name_org2,
        name_org3 TYPE but000-name_org3,
        name_org4 TYPE but000-name_org4,
      END OF ls_name,
      ls_data_partner TYPE bapibus1006_central_person,
      ls_data_organ   TYPE  bapibus1006_central_organ.


    SELECT SINGLE b~partner,
           e~gln,
           b~name_org1,
           b~name_org2,
           b~name_org3,
           b~name_org4,
           b~bu_group,
           b~type,
           a~post_code1,
           a~city1,
           a~street,
           y0~taxnum AS by0,
           y2~taxnum AS by2
        FROM zmm_eanc_gln_map  AS e
        JOIN but000            AS b  ON b~partner    = e~object_key
        JOIN but020            AS b2 ON b2~partner   = b~partner
        JOIN adrc              AS a  ON a~addrnumber = b2~addrnumber
        LEFT JOIN dfkkbptaxnum AS y0 ON y0~partner   = b~partner
                                    AND y0~taxtype   = 'BY0'
        LEFT JOIN dfkkbptaxnum AS y2 ON y2~partner   = b~partner
                                    AND y2~taxtype   = 'BY2'
        WHERE object = 'PARTNERNUM'
         AND  object_key = @iv_partner
*           AND  gln              IN @gln
        INTO @DATA(ls_data).

*          ev_partner = ls_data-partner.
    ev_gln = ls_data-gln.

    CONCATENATE ls_data-post_code1
                ls_data-city1
                ls_data-street INTO ev_address
      SEPARATED BY ', '.
    ev_address = |{ ev_address }{ ls_data-name_org3 } { ls_data-name_org4 }|.

    IF ls_data-bu_group = 'BNST' OR ls_data-bu_group = 'BNFL' OR ls_data-type = '1'.
      ev_vat = '-'.
    ELSEIF ls_data-by0 IS NOT INITIAL.
      ev_vat = ls_data-by0.
    ELSE.
      ev_vat = ls_data-by2.
    ENDIF.

    MOVE-CORRESPONDING ls_data TO ls_name.
    CONDENSE ls_name.
    ev_name = ls_name.

    IF ev_name IS INITIAL.
      CLEAR: ls_data_partner,
         ls_data_organ.
      CALL FUNCTION 'BUPA_CENTRAL_GET_DETAIL'
        EXPORTING
          iv_partner     = iv_partner
        IMPORTING
          es_data_person = ls_data_partner
          es_data_organ  = ls_data_organ.

      CONCATENATE ls_data_partner-firstname
                  ls_data_partner-lastname INTO ev_name
                  SEPARATED BY space.
      IF ev_name IS INITIAL.
        CONCATENATE ls_data_organ-name1
                    ls_data_organ-name2
                    ls_data_organ-name3
                    ls_data_organ-name4 INTO ev_name
                    SEPARATED BY space.
      ENDIF.

    ENDIF.
  ENDMETHOD.


  METHOD read_contragent.
    zcl_edi=>read_bp( EXPORTING iv_partner = iv_partner
                      IMPORTING ev_gln     = rs_partner-gln
                                ev_name    = rs_partner-name
                                ev_address = rs_partner-address
                                ev_vat     = rs_partner-vat_registration_number ).



  ENDMETHOD.


METHOD receive_blrwbl.
  DATA:
    ls_header     TYPE zmm_edoc_h,
    ls_header_go  TYPE zmm_edoc_h,
    lt_items      TYPE ztt_edoc_i,
    lt_partners   TYPE ztt_edoc_bp,
    lt_code_marks TYPE ztt_edoc_cm,
    lt_gtin       TYPE STANDARD TABLE OF zmm_gtin WITH DEFAULT KEY,
    lt_efields    TYPE STANDARD TABLE OF zmm_edoc_efield.

  FIELD-SYMBOLS:
    <ls_in_item> TYPE zst_edi_node_bl_line_item,
    <ls_item>    TYPE zmm_edoc_i,
    <ls_partner> TYPE zmm_edoc_bp.

* Заголовок
  ls_header-docnum  = generate_input_docnum( ). " Номер документа
  ev_docnum = ls_header-docnum.

  ls_header-doctype = msc_direction-input. " Тип документа: Входящий
  ls_header-crdat   = sap_date_time( is_data-creation_date_time ). " Дата создания
  " Заполнение создателя сделаем при первом подписании документа
*  ls_header-crnam   = sy-uname. " Имя пользователя, создавшего объект
  ls_header-noteid  = is_data-delivery_note_id. " Номер накладной
  ls_header-notedat = is_data-delivery_note_date. " Дата накладной
*    ls_header-ref_nid = ''. " Номер ссылочной накладной
*    ls_header-ref_ndt = ''. " Дата ссылочной накладной
  ls_header-zzext_key = is_data-contract_id. " № договора/дополнительного соглашения
  ls_header-dcdoc   = is_data-contract_date. " Дата заключения договора
  ls_header-werks   = get_werks_by_gln( is_data-receiver-vat_registration_number ). " Завод
  ls_header-ebeln   = ''. " Номер документа закупки
  ls_header-ebeln   = is_data-order_id. " Номер документа закупки ???Только для BLRDLN???
*    ls_header-vbeln   = ''. " Поставка
  ls_header-waers   = sap_curr( is_data-currency ). " Код валюты
  ls_header-consh   = is_data-shipper-contact. " Отпуск разрешил
  ls_header-transit = VALUE #( is_data-receiver-transit_country_list[ 1 ]-transit_country OPTIONAL ). " Код транзитной страны
  ls_header-consf   = is_data-ship_from-contact. " Сдал грузоотправитель
*    ls_header-contst  = ''. " Принял грузополучатель
  ls_header-conca   = is_data-carrier-delivery_contact. " Товар к перевозке принял
  ls_header-prxid   = is_data-carrier-proxy_id. " Номер доверенности
  ls_header-prxdt   = is_data-carrier-proxy_date. " Дата доверенности
  ls_header-prxnm   = is_data-carrier-party_issuing_proxy_name. " Организация, выдавшая доверенность
  ls_header-waybill = is_data-waybill_id. " Номер путевого листа
  ls_header-quantr  = is_data-quantity_trip. " Количество ездок
  ls_header-contr   = is_data-carrier-transport_contact. " Водитель
  ls_header-trnown  = is_data-transport_owner_name. " Владелец автомобиля
  ls_header-trnsp   = is_data-transport_id. " Марка и гос. номер транспорта
  ls_header-trailer = is_data-trailer_id. " Марка и гос. номер прицепа
*    ls_header-sealid  = ''. " Номер пломбы
  ls_header-anzpk   = is_data-total-total_despatch_unit_quantity. " Количество мест
  ls_header-tntype  = is_data-delivery_note_type. " Тип накладной
  ls_header-trans_id  = VALUE #( is_data-document[ 1 ]-document_id   OPTIONAL ). " Номер переданного документа
  ls_header-trans_dat = VALUE #( is_data-document[ 1 ]-document_date OPTIONAL ). " Дата  переданного документа
  ls_header-trans_nam = VALUE #( is_data-document[ 1 ]-document_name OPTIONAL ). " Наим. переданного документа
*    ls_header-delnam  = ''. " Наименование док. доставки
*    ls_header-delid   = ''. " Номер документа доставки
*    ls_header-deldat  = ''. " Дата документа доставки
*    ls_header-repid   = ''. " Номер акта
*    ls_header-repdat  = ''. " Дата акта
*    ls_header-repnam  = ''. " Название акта
*    ls_header-edocid  = ''. " Номер электронного сообщения присвоенного EDI провайдером

  DATA(lt_chargs) = zcl_edi=>read_blrwbl_chargs( ls_header-noteid ).

* Позиции
  LOOP AT is_data-despatchadvicelogisticunitline-line_item ASSIGNING <ls_in_item>.
    APPEND INITIAL LINE TO lt_items ASSIGNING <ls_item>.

    <ls_item>-docnum   = ls_header-docnum.                   " Номер документа
    <ls_item>-docpos   = <ls_in_item>-line_item_number.      " Позиция документа
    <ls_item>-gtin     = <ls_in_item>-line_item_id.          " GTIN товара
    <ls_item>-matnrb   = <ls_in_item>-line_item_buyer_id.    " Номер материала покупателя
    <ls_item>-matnrs   = <ls_in_item>-line_item_supplier_id. " Номер материала поставщика
    <ls_item>-maktx    = <ls_in_item>-line_item_name.        " Наименование материала
    <ls_item>-tnved    = <ls_in_item>-item_custom_code.      " Код ТНВЭД товара
    <ls_item>-prevtype = <ls_in_item>-delivery_type_prev.    " Тип приходного документа
    <ls_item>-prevnote = <ls_in_item>-delivery_note_prev.    " Номер приходного документа
    <ls_item>-prevdat  = <ls_in_item>-delivery_note_date_prev.    " Дата приходного документа
    <ls_item>-prevline = <ls_in_item>-delivery_note_prev_line_id. " Номер позиции приходного документа
    <ls_item>-lfimg    = <ls_in_item>-quantity_despatched.        " Фактически поставленное количество (ПЕ)
    "Подмена кода ISO из Особых ЕИ "24296
    DATA(lv_unit) = VALUE t006-isocode( is_data-extra_field[ field_name = mv_special_iso
                                                             field_code = <ls_item>-docpos ]-field_value DEFAULT '' ).
    <ls_item>-meins    = sap_unit( SWITCH #( lv_unit WHEN '' THEN <ls_in_item>-line_item_quantity_uom
                                                             ELSE lv_unit ) ).     " Базисная единица измерения
    "RM 25235_3
    "<ls_item>-charg    = <ls_in_item>-line_item_party_number.     " Номер партии
    <ls_item>-charg     = VALUE #( lt_chargs[ docpos = <ls_item>-docpos ]-charg OPTIONAL ).

    <ls_item>-brgew    = replace( val = <ls_in_item>-gross_weight_value sub = ',' with = '.' ).         " Вес брутто, RM 25305 - замена запятой на точку
    <ls_item>-price    = <ls_in_item>-line_item_price.            " Цена
    <ls_item>-mprice   = <ls_in_item>-line_item_manufacturer_price. " Цена изготовителя
    <ls_item>-vrate    = <ls_in_item>-tax_rate.                  " Ставка НДС
    <ls_item>-cost     = <ls_in_item>-amount_without_charges.    " Стоимость ВВ
    <ls_item>-brate    = <ls_in_item>-line_item_amount_charges.  " Сумма НДС
    <ls_item>-total    = <ls_in_item>-line_item_amount.          " Сумма с НДС
*      <ls_item>-mblnr    = <ls_in_item>-.                         " Номер документа материала
*      <ls_item>-mjahr    = <ls_in_item>-.                         " Год документа материала
*      <ls_item>-mblpo    = <ls_in_item>-.                         " Позиция документа материала
    <ls_item>-itsign   = <ls_in_item>-line_item_sign.                 " Признак вида товарной позиции
    <ls_item>-anzpk    = <ls_in_item>-despatchunitquantitydespatched. " Количество мест
    <ls_item>-z_origin = sap_land( <ls_in_item>-country_of_origin ).              " Страна происхождения
    <ls_item>-z_info   = <ls_in_item>-additional_information.         " Примечание
    <ls_item>-sellby   = <ls_in_item>-best_before_date.               " Срок реализации
    <ls_item>-sptdesp  = <ls_in_item>-quantity_despatched_spt.        " Кол-во для прослеживаемости
    <ls_item>-sptquan  = <ls_in_item>-line_item_quantity_spt.         " ЕИ для прослеживаемости
    <ls_item>-sptprice = <ls_in_item>-line_item_price_spt.            " Цена единицы товара для прослеживаемости
    <ls_item>-proddat  = <ls_in_item>-line_item_product_date.         " Дата производства
    <ls_item>-bdiscnt  = <ls_in_item>-bulk_discount_rate.             " Оптовая скидка
    <ls_item>-discnt   = <ls_in_item>-discount_rate.                  " Скидка
    <ls_item>-excise   = <ls_in_item>-line_item_amount_excise.        " Сумма акциза

    LOOP AT <ls_in_item>-line_item_extra_field[] ASSIGNING FIELD-SYMBOL(<ls_extra>).
      APPEND VALUE #( docnum = <ls_item>-docnum
                      docpos = <ls_item>-docpos
                      code   = <ls_extra>-field_code
                      name   = <ls_extra>-field_name
                      value  = <ls_extra>-field_value ) TO lt_efields[].
    ENDLOOP.


    receive_identification( EXPORTING it_identification = <ls_in_item>-line_item_identification
                            CHANGING  ct_code_marks     = lt_code_marks
                                      ev_item_guid      = <ls_item>-item_guid ).

    CHECK <ls_item>-gtin IS NOT INITIAL.

    READ TABLE lt_gtin ASSIGNING FIELD-SYMBOL(<ls_gtin>)
        WITH KEY gtin = <ls_item>-gtin
        BINARY SEARCH.
    IF sy-subrc <> 0.
      INSERT INITIAL LINE INTO lt_gtin INDEX sy-tabix ASSIGNING <ls_gtin>.
      <ls_gtin>-gtin = <ls_item>-gtin.
      SELECT SINGLE name INTO <ls_gtin>-name
            FROM zmm_gtin
            WHERE gtin = <ls_item>-gtin.
    ENDIF.

    IF <ls_gtin>-name IS INITIAL.
      <ls_gtin>-name = <ls_in_item>-line_item_name.
    ENDIF.

    IF <ls_item>-item_guid IS INITIAL.
      <ls_gtin>-flcm = abap_false.
    ELSE.
      <ls_gtin>-flcm = abap_true.
    ENDIF.
  ENDLOOP.

* Грузоотправитель
  IF is_data-shipper IS NOT INITIAL.
    APPEND INITIAL LINE TO lt_partners ASSIGNING <ls_partner>.
    <ls_partner>-docnum  = ls_header-docnum.
    <ls_partner>-bptype  = msc_bptype-shipper.
    <ls_partner>-partner = sap_partner( is_data-shipper-gln ).
    <ls_partner>-name    = is_data-shipper-name.
    <ls_partner>-addres  = is_data-shipper-address.
    <ls_partner>-vat     = is_data-shipper-vat_registration_number.
    <ls_partner>-gln     = is_data-shipper-gln.
    <ls_partner>-land    = sap_land( is_data-shipper-country ).
  ENDIF.
* Грузополучатель
  IF is_data-receiver IS NOT INITIAL.
    APPEND INITIAL LINE TO lt_partners ASSIGNING <ls_partner>.
    <ls_partner>-docnum  = ls_header-docnum.
    <ls_partner>-bptype  = msc_bptype-receiver.
    <ls_partner>-partner = sap_partner( is_data-receiver-gln ).
    <ls_partner>-name    = is_data-receiver-name.
    <ls_partner>-addres  = is_data-receiver-address.
    <ls_partner>-vat     = is_data-receiver-vat_registration_number.
    <ls_partner>-gln     = is_data-receiver-gln.
    <ls_partner>-land    = sap_land( is_data-receiver-country ).
  ENDIF.

* Плательщик
  IF is_data-freight_payer IS NOT INITIAL.
    APPEND INITIAL LINE TO lt_partners ASSIGNING <ls_partner>.
    <ls_partner>-docnum  = ls_header-docnum.
    <ls_partner>-bptype  = msc_bptype-payer.
    <ls_partner>-partner = sap_partner( is_data-freight_payer-gln ).
    <ls_partner>-name    = is_data-freight_payer-name.
    <ls_partner>-addres  = is_data-freight_payer-address.
    <ls_partner>-vat     = is_data-freight_payer-vat_registration_number.
    <ls_partner>-gln     = is_data-freight_payer-gln.
  ENDIF.

* Пункт отгрузки
  IF   is_data-ship_from-gln     IS NOT INITIAL
    OR is_data-ship_from-address IS NOT INITIAL.
    APPEND INITIAL LINE TO lt_partners ASSIGNING <ls_partner>.
    <ls_partner>-docnum  = ls_header-docnum.
    <ls_partner>-bptype  = msc_bptype-ship_from.
    <ls_partner>-partner = sap_osp( is_data-ship_from-gln ).
    <ls_partner>-addres  = is_data-ship_from-address.
    <ls_partner>-gln     = is_data-ship_from-gln.
  ENDIF.

* Пункт разгрузки
  IF   is_data-ship_to-gln IS NOT INITIAL
    OR is_data-ship_to-address IS NOT INITIAL.
    APPEND INITIAL LINE TO lt_partners ASSIGNING <ls_partner>.
    <ls_partner>-docnum  = ls_header-docnum.
    <ls_partner>-bptype  = msc_bptype-ship_to.
    <ls_partner>-partner = sap_osp( is_data-ship_to-gln ).
    IF is_data-ship_to-address = ''.
      <ls_partner>-addres = sap_osp_address( is_data-ship_to-gln ).
    ELSE.
      <ls_partner>-addres  = is_data-ship_to-address.
    ENDIF.
    <ls_partner>-gln     = is_data-ship_to-gln.
  ENDIF.

  SELECT SINGLE * INTO ls_header_go
      FROM zmm_edoc_h
      WHERE noteid  = ls_header-noteid
*       and  notedat =
       AND  doctype = msc_direction-output.
  IF sy-subrc = 0.
    ls_header-ebeln = ls_header_go-ebeln.
    ls_header-vbeln = ls_header_go-vbeln.
    ls_header-vptnr = ls_header_go-vptnr.
  ENDIF.

  INSERT zmm_edoc_h   FROM ls_header.
  INSERT zmm_edoc_i   FROM TABLE lt_items.
  INSERT zmm_edoc_bp  FROM TABLE lt_partners.
  INSERT zmm_edoc_cm  FROM TABLE lt_code_marks.

  IF lt_efields[] IS NOT INITIAL.
    MODIFY zmm_edoc_efield FROM TABLE lt_efields[].
  ENDIF.

  MODIFY zmm_gtin FROM TABLE lt_gtin.

ENDMETHOD.


  METHOD receive_blrwbr.
    DATA:
      BEGIN OF ls_header,
        docnum TYPE zmm_edoc_h-docnum,
*        status TYPE zmm_edoc_h-status,
        contst TYPE zmm_edoc_h-contst,
        sealid TYPE zmm_edoc_h-sealid,
        repid  TYPE zmm_edoc_h-repid,
        repnam TYPE zmm_edoc_h-repnam,
        repdat TYPE zmm_edoc_h-repdat,
      END OF ls_header.
    FIELD-SYMBOLS:
      <ls_report>  TYPE zst_edi_node_bl_report.


*    SELECT SINGLE docnum status contst sealid repid repnam repdat
*        INTO CORRESPONDING FIELDS OF ls_header
*        FROM zmm_edoc_h
*        WHERE doctype = msc_direction-output
*         AND  noteid  = is_data-delivery_note_id.
*    IF sy-subrc <> 0.
*      " Накладная-оригинал &1 не найдена, подтвердить невозможно
*      MESSAGE e043 WITH is_data-delivery_note_id INTO zcl_log_helper=>mv_dummy.
*      zcl_log_helper=>add( ).
*      RETURN.
*    ELSE.
*      ev_docnum = ls_header-docnum.
*    ENDIF.

*    CASE is_data-function_code.
*      WHEN '11'.
*    IF ls_header-status = msc_status-s22_resived_gp.
*      ls_header-status = msc_status-s24_confirmed_gp.
*    ELSE.
*      RETURN.
*    ENDIF.

* Заголовок
    ls_header-contst  = is_data-ship_to-contact . " Принял грузополучатель
    ls_header-sealid  = is_data-seal_id.

    READ TABLE is_data-report INDEX 1 ASSIGNING <ls_report>.
    IF sy-subrc = 0.
      ls_header-repid  = <ls_report>-report_id.
      ls_header-repnam = <ls_report>-report_name.
      ls_header-repdat = <ls_report>-report_date.
    ENDIF.

    UPDATE zmm_edoc_h SET contst = ls_header-contst
                          sealid = ls_header-sealid
                          repid  = ls_header-repid
                          repnam = ls_header-repnam
                          repdat = ls_header-repdat
        WHERE docnum  = iv_docnum.
*    ENDCASE.
*
*    ev_processed = abap_true.
  ENDMETHOD.


  METHOD receive_identification.
    TYPES:
      ts_ident TYPE zmm_edoc_cm,
      tt_ident TYPE SORTED TABLE OF ts_ident WITH UNIQUE KEY code_mark.
    DATA:
      lt_ident       TYPE tt_ident,
      lv_parent_guid TYPE zmm_edoc_cm-upper_guid,
      lt_code_marks  TYPE STANDARD TABLE OF zmm_edoc_cm-code_mark,
      lv_order       TYPE zmm_edoc_cm-cm_order.


    FIELD-SYMBOLS:
      <ls_identification> TYPE zst_edi_node_line_item_identif,
      <ls_packing_header> TYPE zst_edi_node_group_packing_hea,
      <ls_upper_code>     TYPE ts_ident,
      <ls_packing_ident>  TYPE ts_ident,
      <ls_code_ident>     TYPE ts_ident.

    CHECK it_identification IS NOT INITIAL.
    ev_item_guid = create_guid( ).

    LOOP AT it_identification ASSIGNING <ls_identification>.

      UNASSIGN:
        <ls_upper_code>,
        <ls_packing_ident>.

      READ TABLE <ls_identification>-group_packing_header ASSIGNING <ls_packing_header> INDEX 1.
      IF sy-subrc = 0. " Для сериализации/десериализации используется таблица, но формат XML допускает существование максимум 1 узла

        " Код вышестоящией групповой упаковки
        IF <ls_packing_header>-upper_level_code_mark <> mc_top_level_code_mark.
          READ TABLE lt_ident ASSIGNING <ls_upper_code>
              WITH TABLE KEY code_mark = <ls_packing_header>-upper_level_code_mark.
          IF sy-subrc <> 0.
            INSERT VALUE #( code_mark = <ls_packing_header>-upper_level_code_mark
                            code_guid = create_guid( ) ) INTO TABLE lt_ident ASSIGNING <ls_upper_code>.
          ENDIF.
          <ls_upper_code>-group_pack = abap_true .
        ENDIF.

        " Код текущей групповой упаковки
        READ TABLE lt_ident ASSIGNING <ls_packing_ident>
            WITH TABLE KEY code_mark = <ls_packing_header>-group_packing_code_mark.
        IF sy-subrc <> 0.
          INSERT VALUE #( code_mark = <ls_packing_header>-group_packing_code_mark
                          code_guid = create_guid( ) ) INTO TABLE lt_ident ASSIGNING <ls_packing_ident>.
        ENDIF.
        <ls_packing_ident>-group_pack = abap_true.
        IF <ls_upper_code> IS ASSIGNED.
          IF <ls_packing_ident>-upper_guid IS INITIAL.
            <ls_packing_ident>-upper_guid = <ls_upper_code>-code_guid.
          ELSEIF <ls_packing_ident>-upper_guid <> <ls_upper_code>-code_guid.
            " Дерево кодов маркировки имеет противоречивую струртуру
            MESSAGE w055 INTO zcl_log_helper=>mv_dummy.
            zcl_log_helper=>add( ).
          ENDIF.
        ENDIF.
      ENDIF.

      " Перечень кодов, входящих в группу
      CLEAR lt_code_marks.
      SPLIT <ls_identification>-field_code_mark AT space INTO TABLE lt_code_marks.
      LOOP AT lt_code_marks ASSIGNING FIELD-SYMBOL(<lv_code_mark>).
        lv_order = sy-tabix.
        READ TABLE lt_ident ASSIGNING <ls_code_ident>
            WITH TABLE KEY code_mark = <lv_code_mark>.
        IF sy-subrc <> 0.
          INSERT VALUE #( code_mark = <lv_code_mark>
                          code_guid = create_guid( ) ) INTO TABLE lt_ident ASSIGNING <ls_code_ident>.
        ENDIF.
        <ls_code_ident>-cm_order = lv_order.
        IF <ls_packing_ident> IS ASSIGNED.
          IF <ls_code_ident>-upper_guid IS INITIAL.
            <ls_code_ident>-upper_guid = <ls_packing_ident>-code_guid.
          ELSEIF <ls_code_ident>-upper_guid <> <ls_packing_ident>-code_guid.
            " Дерево кодов маркировки имеет противоречивую струртуру
            MESSAGE w055 INTO zcl_log_helper=>mv_dummy.
            zcl_log_helper=>add( ).
          ENDIF.
        ENDIF.
      ENDLOOP.
    ENDLOOP.

    MODIFY lt_ident FROM VALUE #( item_guid = ev_item_guid ) TRANSPORTING item_guid
        WHERE item_guid IS INITIAL.

    APPEND LINES OF lt_ident TO ct_code_marks.
  ENDMETHOD.


  METHOD sap_curr.

    CLEAR rv_waers.
    IF iv_curr IS INITIAL.
      RETURN.
    ENDIF.

    SELECT waers INTO @rv_waers
        FROM tcurc
        WHERE isocd = @iv_curr
        ORDER BY xprimary DESCENDING.
      EXIT.
    ENDSELECT.

  ENDMETHOD.


  METHOD sap_date_time.
    DATA:
      lv_n14 TYPE n LENGTH 14,
      BEGIN OF ls_date_time,
        date TYPE d,
        time TYPE t,
      END OF ls_date_time.

    CLEAR rv_timestamp.

*    CHECK strlen( iv_date_time ) = 14.
*    CHECK iv_date_time CO '1234567890 -:'.
    lv_n14 = iv_date_time.
    ls_date_time = lv_n14.

    CONVERT DATE ls_date_time-date
            TIME ls_date_time-time
            INTO TIME STAMP rv_timestamp
            TIME ZONE mv_tzone .
  ENDMETHOD.


  METHOD sap_land.
    CLEAR rv_land.
    IF iv_land IS INITIAL.
      RETURN.
    ENDIF.
    SELECT land1 INTO @rv_land
          FROM t005
          WHERE intca = @iv_land.
      EXIT.
    ENDSELECT.
  ENDMETHOD.


  METHOD sap_osp.
    TYPES:
      BEGIN OF lst_buf,
        gln     TYPE eane_iln,
        partner TYPE bu_partner,
      END OF lst_buf.
    STATICS:
       st_buf TYPE STANDARD TABLE OF lst_buf WITH DEFAULT KEY.

    READ TABLE st_buf ASSIGNING FIELD-SYMBOL(<ls_buf>)
        WITH KEY gln = iv_gln
        BINARY SEARCH.
    IF sy-subrc <> 0.
      INSERT INITIAL LINE INTO st_buf ASSIGNING <ls_buf> INDEX sy-tabix.
      <ls_buf>-gln = iv_gln.
      SELECT SINGLE object_key INTO <ls_buf>-partner
          FROM zmm_eanc_gln_map
          WHERE gln = <ls_buf>-gln
           AND  object = 'OSP'.
    ENDIF.

    rv_partner = <ls_buf>-partner.
  ENDMETHOD.


  METHOD sap_osp_address.
    DATA:
      lv_object_key TYPE zmm_eanc_gln_map-object_key.

*    CLEAR cv_text.
    DO 1 TIMES.
      SELECT SINGLE object_key INTO lv_object_key
          FROM zmm_eanc_gln_map
        WHERE gln    = iv_gln
         AND  object = 'OSP'.
      CHECK sy-subrc = 0.

      rv_adr = get_osp_address( CONV #( lv_object_key ) ).
    ENDDO.

  ENDMETHOD.


  METHOD sap_partner.
    TYPES:
      BEGIN OF lst_buf,
        gln     TYPE eane_iln,
        partner TYPE bu_partner,
      END OF lst_buf.
    STATICS:
       st_buf TYPE STANDARD TABLE OF lst_buf WITH DEFAULT KEY.

    READ TABLE st_buf ASSIGNING FIELD-SYMBOL(<ls_buf>)
        WITH KEY gln = iv_gln
        BINARY SEARCH.
    IF sy-subrc <> 0.
      INSERT INITIAL LINE INTO st_buf ASSIGNING <ls_buf> INDEX sy-tabix.
      <ls_buf>-gln = iv_gln.
      SELECT SINGLE object_key INTO <ls_buf>-partner
          FROM zmm_eanc_gln_map
          WHERE gln = <ls_buf>-gln
           AND  object = 'PARTNERNUM'.
    ENDIF.

    rv_partner = <ls_buf>-partner.
  ENDMETHOD.


  METHOD sap_unit.
    CLEAR rv_meins.
    IF iv_unit IS INITIAL.
      RETURN.
    ENDIF.
    SELECT msehi INTO @rv_meins
          FROM t006
          WHERE isocode = @iv_unit
          ORDER BY PRIMARY.
      EXIT.
    ENDSELECT.
  ENDMETHOD.


  METHOD send_email_new_status.
    DATA: lv_subject        TYPE so_obj_des,
          ls_body           TYPE soli,
          lt_body           TYPE soli_tab,
          lv_sender_mail    TYPE adr6-smtp_addr VALUE 'mail_sap@beloil.by',
          lv_recipient_mail TYPE adr6-smtp_addr,
          lv_result         TYPE flag,
          lv_doctype        TYPE string,
          lt_users          TYPE STANDARD TABLE OF xubname WITH DEFAULT KEY,
          lv_user           TYPE xubname,
          lv_gln            TYPE zmm_edoc_bpgln.

    CASE iv_new_status2.
      WHEN msc_stat2-s10  " 'Открыта',
        OR msc_stat2-s20  " 'Подтверждена провайдером',
        OR msc_stat2-s30  " 'Получена контрагентом',
        OR msc_stat2-r50  " 'Ответ создан',
        OR msc_stat2-r60  " 'Изменения отправлены',
        OR msc_stat2-s70  " 'Изменения получены',
        OR msc_stat2-u01. " 'Обработка провайдером',
        RETURN.
      WHEN msc_stat2-s11  " 'Отменена провайдером',
        OR msc_stat2-r40  " 'Требуется ответ',
        OR msc_stat2-r41  " 'Ответ отменен',
        OR msc_stat2-f01  " 'Ответ подтвержден',
        OR msc_stat2-f02  " 'Отмена подтверждена',
        OR msc_stat2-u02. " 'Требуется подтверждение',
    ENDCASE.

    SELECT SINGLE crnam, doctype
        FROM zmm_edoc_h INTO @DATA(ls_header)
        WHERE docnum = @iv_docnum.
    CHECK sy-subrc = 0 .

    IF ls_header-crnam IS NOT INITIAL.
      APPEND ls_header-crnam TO lt_users.
    ELSEIF iv_new_status2 = msc_stat2-u02. " 'Требуется подтверждение'.
      SELECT SINGLE gln INTO @lv_gln
          FROM zmm_edoc_bp
          WHERE docnum = @iv_docnum
           AND  bptype = @zcl_edi_base=>msc_bptype-ship_to
           AND  gln    <> ''.
      IF sy-subrc <> 0.
        SELECT SINGLE gln INTO @lv_gln
            FROM zmm_edoc_bp
            WHERE docnum = @iv_docnum
             AND  bptype = @zcl_edi_base=>msc_bptype-receiver
             AND  gln    <> ''.
      ENDIF.
      IF sy-subrc = 0.
        SELECT DISTINCT user_name INTO TABLE @lt_users
            FROM zmm_edi_respon
            WHERE gln        = @lv_gln
             AND  respon     = ''
             AND  user_name <> ''.
      ENDIF.
    ENDIF.

    CHECK lt_users IS NOT INITIAL.

    lv_subject = 'EDI-Нефть'(901).

    IF ls_header-doctype = msc_doctype-sender.
      lv_doctype = 'исходящей'.
    ELSEIF ls_header-doctype = msc_doctype-receiver.
      lv_doctype = 'входящей'.
    ENDIF.

    ls_body-line = |Статус { lv_doctype } электронной накладной № { iv_docnum } изменён на { iv_new_status2 }|.
    APPEND ls_body TO lt_body.

    LOOP AT lt_users INTO lv_user.
      CALL FUNCTION 'Z_GET_SMTP_OF_USER'
        EXPORTING
          iv_user          = lv_user
        IMPORTING
          smtp_address     = lv_recipient_mail
        EXCEPTIONS
          no_email_address = 1
          OTHERS           = 2.
      IF sy-subrc <> 0.
        RETURN.
      ENDIF.

      CALL FUNCTION 'ZSEND_MAIL'
        EXPORTING
          subject        = lv_subject
          message_body   = lt_body
          sender_mail    = lv_sender_mail
          recipient_mail = lv_recipient_mail
        IMPORTING
          result         = lv_result.
    ENDLOOP.

  ENDMETHOD.


  METHOD send_free_text.
    DATA: lv_subject        TYPE so_obj_des,
          ls_body           TYPE soli,
          lt_body           TYPE soli_tab,
          lv_sender_mail    TYPE adr6-smtp_addr VALUE 'mail_sap@beloil.by',
          lv_recipient_mail TYPE adr6-smtp_addr,
          lv_result         TYPE flag,
          lv_doctype        TYPE string.

    SELECT SINGLE crnam, doctype
        FROM zmm_edoc_h INTO @DATA(ls_header)
        WHERE docnum = @iv_docnum.
    CHECK sy-subrc = 0 .

    CALL FUNCTION 'Z_GET_SMTP_OF_USER'
      EXPORTING
        iv_user          = ls_header-crnam
      IMPORTING
        smtp_address     = lv_recipient_mail
      EXCEPTIONS
        no_email_address = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.

    lv_subject = 'EDI-Нефть'(901).

    CALL FUNCTION 'ZSEND_MAIL'
      EXPORTING
        subject        = lv_subject
        message_body   = it_message[]
        sender_mail    = lv_sender_mail
        recipient_mail = lv_recipient_mail
      IMPORTING
        result         = lv_result.

  ENDMETHOD.


  METHOD send_notify.
    DATA: lv_subject        TYPE so_obj_des,
          ls_body           TYPE soli,
          lt_body           TYPE soli_tab,
          lv_sender_mail    TYPE adr6-smtp_addr VALUE 'mail_sap@beloil.by',
          lv_recipient_mail TYPE adr6-smtp_addr,
          lv_result         TYPE flag,
          lv_doctype        TYPE string.

    SELECT user_name INTO TABLE @DATA(lt_bname)
        FROM zmm_edi_respon
        WHERE gln = @is_header-glnsf
          AND  respon    = @abap_true.
    IF sy-subrc <> 0.
      SELECT user_name INTO TABLE @lt_bname
          FROM zmm_edi_respon
          WHERE gln = @is_header-glnsh
            AND  respon    = @abap_true.
      " Для GLN &1 не задан ни один ответственный
      IF sy-subrc <> 0.
        MESSAGE e063 WITH is_header-glnsh.
      ENDIF.
    ENDIF.

    lv_subject = 'EDI-Нефть'(901).

    IF is_header-doctype = msc_doctype-sender.
      lv_doctype = 'исходящую'.
    ELSEIF is_header-doctype = msc_doctype-receiver.
      lv_doctype = 'входящую'.
    ENDIF.

    ls_body-line = |Требуется подписать { lv_doctype } электронную накладную { is_header-docnum }|.
    APPEND ls_body TO lt_body.

    LOOP AT lt_bname ASSIGNING FIELD-SYMBOL(<ls_bname>).
      CLEAR:
       lv_recipient_mail.
      CALL FUNCTION 'Z_GET_SMTP_OF_USER'
        EXPORTING
          iv_user          = <ls_bname>-user_name
        IMPORTING
          smtp_address     = lv_recipient_mail
        EXCEPTIONS
          no_email_address = 1
          OTHERS           = 2.
      CHECK sy-subrc = 0.

      CALL FUNCTION 'ZSEND_MAIL'
        EXPORTING
          subject        = lv_subject
          message_body   = lt_body
          sender_mail    = lv_sender_mail
          recipient_mail = lv_recipient_mail
        IMPORTING
          result         = lv_result.

      IF lv_result = abap_true.
        " Уведомление успешно отправлено
        MESSAGE s062.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


METHOD update_classification.
  TYPES: lty_matnr TYPE n LENGTH 18.
  TYPES: BEGIN OF lty_s_objkey,
           matnr TYPE goitem-matnr, "goitem-matnr,
           charg TYPE goitem-charg,
         END OF lty_s_objkey.

  DATA: lt_alloclist TYPE TABLE OF bapi1003_alloc_list,
        lt_return    TYPE bapiret2_t,
        lt_num       TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
        lt_char      TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
        lt_curr      TYPE STANDARD TABLE OF bapi1003_alloc_values_curr.

  LOOP AT it_items[] ASSIGNING FIELD-SYMBOL(<ls_item>).
    CHECK <ls_item>-charg IS NOT INITIAL.
*    ls_objkey = VALUE #( matnr = CONV lty_matnr( <ls_item>-matnrs )
*                         charg = <ls_item>-charg ).

    CALL FUNCTION 'BAPI_OBJCL_GETCLASSES'
      EXPORTING
        objectkey_imp_long = CONV bapi1003_key-object_long( VALUE lty_s_objkey( matnr = CONV lty_matnr( <ls_item>-matnrs )
                                                                                charg = <ls_item>-charg ) )
        objecttable_imp    = 'MCH1'
        classtype_imp      = '023'
      TABLES
        alloclist          = lt_alloclist[]
        return             = lt_return[].

    LOOP AT lt_alloclist[] ASSIGNING FIELD-SYMBOL(<ls_alloc>).
      " Получение признаков партии материала по теку-му классу
      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objectkey       = <ls_alloc>-object
          objecttable     = 'MCH1'
          classnum        = <ls_alloc>-classnum
          classtype       = '023'
        TABLES
          allocvaluesnum  = lt_num[]
          allocvalueschar = lt_char[]
          allocvaluescurr = lt_curr[]
          return          = lt_return[].

      write_characteristic( EXPORTING iv_name  = 'EDI_TTN'
                                      iv_value = is_header-docnum
                            CHANGING  ct_chars = lt_char[] ).
      write_characteristic( EXPORTING iv_name  = 'EDI_TTN_POS'
                                      iv_value = <ls_item>-docpos
                            CHANGING  ct_chars = lt_char[] ).

      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey          = <ls_alloc>-object
          objecttable        = 'MCH1'
          classnum           = <ls_alloc>-classnum
          classtype          = '023'
        TABLES
          allocvaluesnumnew  = lt_num[]
          allocvaluescharnew = lt_char[]
          allocvaluescurrnew = lt_curr[]
          return             = lt_return[].

      LOOP AT lt_return[] TRANSPORTING NO FIELDS WHERE type CA 'AE'.
        EXIT.
      ENDLOOP.
      IF sy-subrc <> 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'.
        CONTINUE.
      ENDIF.

      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      LOOP AT lt_return[] ASSIGNING FIELD-SYMBOL(<ls_ret>) WHERE type CA 'AE'.
        MESSAGE ID <ls_ret>-id TYPE <ls_ret>-type NUMBER <ls_ret>-number
          WITH <ls_ret>-message_v1 <ls_ret>-message_v2 <ls_ret>-message_v3 <ls_ret>-message_v4 INTO zcl_log_helper=>mv_dummy.
        zcl_log_helper=>add( ).
      ENDLOOP.
    ENDLOOP.


  ENDLOOP.
ENDMETHOD.


  METHOD update_history.
    DATA:
      ls_edoc_his2        TYPE zmm_edoc_his2.


    ls_edoc_his2-edocid = iv_edocid.
    ls_edoc_his2-direction = zcl_edi=>msc_direction-output.
    ls_edoc_his2-docnum    = iv_docnum.
    ls_edoc_his2-edoctype  = iv_edoctype.
    IF iv_edoctype = zcl_edi=>msc_edoctype-blrapn.
      ls_edoc_his2-fcode     = is_acknowledgement-function_code.
      ls_edoc_his2-ercode    = is_acknowledgement-error_or_acknowledgement-code.
      ls_edoc_his2-descrp    = is_acknowledgement-error_or_acknowledgement-description.
      ls_edoc_his2-edocnum   = is_acknowledgement-document_id.
      ls_edoc_his2-refid     = is_acknowledgement-reference_doc-id.
      ls_edoc_his2-reftype   = is_acknowledgement-reference_doc-type.
      ls_edoc_his2-refdat    = zcl_edi=>sap_date_time( is_acknowledgement-reference_doc-doc_date ).
      ls_edoc_his2-crdat     = zcl_edi=>sap_date_time( is_acknowledgement-creation_date_time ).
      ls_edoc_his2-glnsh     = is_acknowledgement-shipper-gln.
      ls_edoc_his2-glnre     = is_acknowledgement-receiver-gln.
    ELSE.
      ls_edoc_his2-fcode     = is_delivery_note-function_code.
      ls_edoc_his2-edocnum   = is_delivery_note-document_id.
      ls_edoc_his2-refid     = is_delivery_note-reference_doc-id.
      ls_edoc_his2-reftype   = is_delivery_note-reference_doc-type.
      ls_edoc_his2-refdat    = zcl_edi=>sap_date_time( is_delivery_note-reference_doc-doc_date ).
      ls_edoc_his2-crdat     = zcl_edi=>sap_date_time( is_delivery_note-creation_date_time ).
      ls_edoc_his2-glnsh     = is_delivery_note-shipper-gln.
      ls_edoc_his2-glnre     = is_delivery_note-receiver-gln.
    ENDIF.
*    ls_edoc_his2-getdat    = .
    GET TIME STAMP FIELD ls_edoc_his2-crrec.
    ls_edoc_his2-noteid    = iv_noteid.
    ls_edoc_his2-notedat   = iv_notedat.
    ls_edoc_his2-status    = ''.
    ls_edoc_his2-xml       = iv_xml.
    ls_edoc_his2-processed = ''.

    INSERT zmm_edoc_his2 FROM ls_edoc_his2.

  ENDMETHOD.


METHOD write_characteristic.
  READ TABLE ct_chars[] ASSIGNING FIELD-SYMBOL(<ls_char>) WITH KEY charact = iv_name.
  IF sy-subrc <> 0.
    APPEND VALUE #( charact             = iv_name
                    charact_descr       = iv_name ) TO ct_chars[] ASSIGNING <ls_char>.
  ENDIF.

  <ls_char> = VALUE #( BASE <ls_char> value_char          = iv_value
                                      value_neutral       = iv_value
                                      value_char_long     = iv_value
                                      value_neutral_long  = iv_value ).
ENDMETHOD.
ENDCLASS.