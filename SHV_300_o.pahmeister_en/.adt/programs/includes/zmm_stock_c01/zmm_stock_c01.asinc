*&---------------------------------------------------------------------*
*&  Include           ZMM_STOCK_C01
*&---------------------------------------------------------------------*

CLASS lcl_classification DEFINITION FINAL CREATE PRIVATE.
  PUBLIC SECTION.
    TYPES:
      BEGIN OF ty_s_objek_class,
        objek TYPE zmm_stock-objek,
        class TYPE klah-class,
      END OF ty_s_objek_class,

      ty_t_objek_class TYPE HASHED TABLE OF ty_s_objek_class
                              WITH UNIQUE KEY objek,

      BEGIN OF ty_s_class_attr,
        class TYPE klah-class,
        atnam TYPE atnam,
      END OF ty_s_class_attr,

      BEGIN OF ty_s_attr_prop,
        atnam  TYPE atnam,
        atinn  TYPE atinn,
        atbez  TYPE cabnt-atbez,
        atfor  TYPE cabn-atfor,
        msehi  TYPE cabn-msehi,
        anzst  TYPE cabn-anzst,
        anzdz  TYPE cabn-anzdz,
        atkla  TYPE cabn-atkla,
        atinp  TYPE cabn-atinp,
        atprf  TYPE cabn-atprf,
        atkle  TYPE cabn-atkle,
        valout TYPE abap_bool,
      END OF ty_s_attr_prop,

      ty_t_attr_prop TYPE HASHED TABLE OF ty_s_attr_prop
                            WITH UNIQUE KEY atnam,

      BEGIN OF ty_s_attr_value,
        objek TYPE inob-objek,
        atnam TYPE cabn-atnam,
        atwrt TYPE ausp-atwrt,
        atflv TYPE ausp-atflv,
      END OF ty_s_attr_value,

      ty_t_attr_value TYPE HASHED TABLE OF ty_s_attr_value
                              WITH UNIQUE KEY objek atnam
                              WITH NON-UNIQUE SORTED KEY objek
                                COMPONENTS objek
                              WITH NON-UNIQUE SORTED KEY atnam
                                COMPONENTS atnam,

      BEGIN OF ty_s_atwrt_out,
        atnam TYPE atnam,
        atwrt TYPE atwrt,
        atwtb TYPE atwtb,
      END OF ty_s_atwrt_out,

      ty_t_atwrt_out TYPE HASHED TABLE OF ty_s_atwrt_out
                             WITH UNIQUE KEY atnam atwrt,

      ty_t_atnam     TYPE STANDARD TABLE OF atnam
                        WITH DEFAULT KEY,

      ty_mode        TYPE char1.

    CONSTANTS:
      c_col_attr_prefix       TYPE lvc_s_fcat-fieldname VALUE 'ZATTR_',
      c_col_attr_text_postfix TYPE lvc_s_fcat-fieldname VALUE '_TEXT',
      c_attr_quality_sertif   TYPE cabn-atnam           VALUE 'Z_SERTIF2',

      BEGIN OF c_mode,
        edit TYPE ty_mode VALUE 'E',
        view TYPE ty_mode VALUE 'V',
      END OF c_mode.

    CLASS-DATA:
      instance TYPE REF TO lcl_classification READ-ONLY.

    CLASS-METHODS:
      init
        IMPORTING
          it_stock TYPE zmm_stock_t
          it_atnam TYPE ty_t_atnam OPTIONAL
          iv_mode  TYPE ty_mode DEFAULT c_mode-edit,
      press_10inv.                                                      "18.05.2017 YVarazhun rm13165 Инвентаризационная опись 10 ИНВ

    DATA:
      mode TYPE ty_mode READ-ONLY.

    METHODS:
      get_fcat
        IMPORTING
                  iv_last_col_pos TYPE lvc_s_fcat-col_pos OPTIONAL
        RETURNING VALUE(rt_fcat)  TYPE lvc_t_fcat,
      set_data
        IMPORTING
          ir_data TYPE REF TO data,
      save
        RETURNING VALUE(rt_return) TYPE bapiret2_t,
      handle_f4
        IMPORTING
          iv_fieldname  TYPE lvc_fname
          iv_fieldvalue TYPE lvc_value
          is_row_no     TYPE lvc_s_roid
          ir_event_data TYPE REF TO cl_alv_event_data
          it_bad_cells  TYPE lvc_t_modi
          iv_display    TYPE char01,
      handle_data_changed
        IMPORTING
          ir_data_changed TYPE REF TO cl_alv_changed_data_protocol
          iv_onf4         TYPE char01,
      is_classif_attr
        IMPORTING
                  iv_fieldname    TYPE lvc_s_fcat-fieldname
        RETURNING VALUE(rv_value) TYPE abap_bool,
      get_register_f4
        RETURNING VALUE(rt_f4) TYPE lvc_t_f4.

  PRIVATE SECTION.
    TYPES:
      BEGIN OF ty_s_z_post_text,
        lifnr TYPE lifnr,
        name  TYPE lfa1-name1,
      END OF ty_s_z_post_text.
*--> V.Zaretsky #27499
    TYPES:
      BEGIN OF ty_s_z_ncc_dov_params,
        attorney_id       TYPE zmm_attorney-attorney_id,
        attorney_sub      TYPE zmm_attorney-attorney_sub,
        attorney_sub_id   TYPE zmm_sub_attorney-attorney_sub_id,
        name1             TYPE string,
        name2             TYPE string,
        name3             TYPE string,
        name4             TYPE string,
        attorney_sub_ndoc TYPE zz_ndoc,
        attorney_ndoc     TYPE zz_ndoc,
        attorney_instance TYPE zmm_instance-instance_name,
      END OF ty_s_z_ncc_dov_params.
*<-- V.Zaretsky #27499
    DATA:
      t_objek_class   TYPE ty_t_objek_class,
      t_class_attr    TYPE SORTED TABLE OF ty_s_class_attr
                             WITH UNIQUE KEY class atnam,
      t_property      TYPE ty_t_attr_prop,
      t_value         TYPE ty_t_attr_value,
      t_changed_value TYPE ty_t_attr_value,
      t_atwrt_out     TYPE ty_t_atwrt_out,
      data_ref        TYPE REF TO data,
      attr_pattern    TYPE lvc_s_fcat-fieldname,
      attr_prefix_len TYPE int4,
      t_z_post_text   TYPE HASHED TABLE OF ty_s_z_post_text
                             WITH UNIQUE KEY lifnr,
      t_z_ncc_params  TYPE HASHED TABLE OF ty_s_z_ncc_dov_params " V.Zaretsky #27499
                             WITH UNIQUE KEY attorney_id attorney_sub,
      mv_commit_text  TYPE abap_bool.

    METHODS:
      constructor
        IMPORTING
          it_stock TYPE zmm_stock_t
          it_atnam TYPE ty_t_atnam OPTIONAL
          iv_mode  TYPE ty_mode DEFAULT c_mode-edit,
      set_value_out,
      set_atwrt_out,
      add_changed_atnam
        IMPORTING
          iv_row_id TYPE lvc_s_roid-row_id
          iv_atnam  TYPE atnam
          iv_atwrt  TYPE atwrt OPTIONAL
          iv_atflv  TYPE ausp-atflv OPTIONAL,
      atflv2curr
        IMPORTING
                  iv_atflv        TYPE atflv
                  iv_msehi        TYPE msehi
        RETURNING VALUE(rv_value) TYPE dmbtr,
      fetch_z_post_text,
      get_attorney_params "V.Zaretsky #27499
        IMPORTING
                  iv_z_ncc_dov    TYPE atwrt
                  iv_z_ncc_sub    TYPE atwrt
        RETURNING VALUE(rv_param) TYPE ty_s_z_ncc_dov_params,
      get_z_post_text
        IMPORTING
                  iv_z_post      TYPE atwrt
        RETURNING VALUE(rv_text) TYPE ty_s_z_post_text-name,
      get_atnam_order
        RETURNING VALUE(rt_atnam) TYPE ty_t_atnam,
      is_attr_enabled
        IMPORTING
                  iv_row_id       TYPE lvc_s_roid-row_id
                  iv_atnam        TYPE atnam
        RETURNING VALUE(rv_value) TYPE abap_bool,
      get_objek
        IMPORTING
                  iv_row_id       TYPE lvc_s_roid-row_id
        RETURNING VALUE(rv_value) TYPE cuobn.
ENDCLASS.

CLASS lcl_classification IMPLEMENTATION.
*--------------------------------------------------------------------*
*         P U B L I C
*--------------------------------------------------------------------*
  METHOD init.
    IF instance IS BOUND.
      FREE instance.
    ENDIF.

    IF iv_mode = c_mode-edit.
      AUTHORITY-CHECK OBJECT 'M_MATE_CHG'
        ID 'ACTVT' FIELD '02'
        ID 'BEGRU' FIELD ''.
      IF sy-subrc <> 0.
        MESSAGE e419(12).
      ENDIF.
    ENDIF.

    CREATE OBJECT instance
      EXPORTING
        it_stock = it_stock
        it_atnam = it_atnam.
  ENDMETHOD.

  METHOD get_fcat.
    DATA:
      lv_last_col_pos TYPE lvc_s_fcat-col_pos,
      lv_msehi_out    TYPE text10,
      lt_atnam_order  TYPE ty_t_atnam,
      lv_edit         TYPE lvc_s_fcat-edit.

    FIELD-SYMBOLS:
      <ls_attr_prop> TYPE ty_s_attr_prop,
      <ls_fcat>      TYPE lvc_s_fcat,
      <ls_fcat_text> TYPE lvc_s_fcat,
      <lv_atnam>     TYPE atnam.

    lv_last_col_pos = iv_last_col_pos.

    lt_atnam_order = me->get_atnam_order( ).

    IF me->mode = c_mode-edit.
      lv_edit = 'X'.
    ENDIF.

    LOOP AT lt_atnam_order ASSIGNING <lv_atnam>.
      READ TABLE me->t_property ASSIGNING <ls_attr_prop>
        WITH TABLE KEY atnam = <lv_atnam>.
      CHECK sy-subrc = 0.

      lv_last_col_pos = lv_last_col_pos + 1.
      APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat>.
      <ls_fcat>-col_pos   = lv_last_col_pos.
      <ls_fcat>-fieldname = c_col_attr_prefix && <ls_attr_prop>-atnam.
      <ls_fcat>-scrtext_l = <ls_attr_prop>-atbez.
      <ls_fcat>-datatype  = <ls_attr_prop>-atfor.

      IF <ls_attr_prop>-atfor = 'DATE'.
        <ls_fcat>-datatype = 'DATS'.
      ENDIF.

      <ls_fcat>-sp_group  = 'Z'.
      <ls_fcat>-col_opt   = 'X'.
      <ls_fcat>-no_zero   = 'X'.
      <ls_fcat>-edit      = lv_edit.
      <ls_fcat>-lowercase = <ls_attr_prop>-atkle.

      IF <ls_fcat>-lowercase IS INITIAL AND <ls_attr_prop>-valout = abap_true.
        <ls_fcat>-lowercase = 'X'.
      ENDIF.

      IF <ls_attr_prop>-msehi IS NOT INITIAL.
        CLEAR lv_msehi_out.
        CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
          EXPORTING
            input  = <ls_attr_prop>-msehi
          IMPORTING
            output = lv_msehi_out
          EXCEPTIONS
            OTHERS = 0.

        IF lv_msehi_out IS NOT INITIAL.
          <ls_fcat>-scrtext_l = <ls_fcat>-scrtext_l && `,` && lv_msehi_out.
        ENDIF.
      ENDIF.

      CASE <ls_attr_prop>-atfor.
        WHEN 'DATE'.
          <ls_fcat>-inttype = 'D'.
        WHEN 'TIME'.
          <ls_fcat>-inttype = 'T'.
        WHEN 'CURR'.
          <ls_fcat>-inttype   = 'P'.
          <ls_fcat>-dd_outlen = <ls_attr_prop>-anzst.
          <ls_fcat>-decimals  = <ls_attr_prop>-anzdz.
          <ls_fcat>-currency  = <ls_attr_prop>-msehi.
        WHEN 'NUM'.
          <ls_fcat>-inttype   = 'P'.
          <ls_fcat>-dd_outlen = <ls_attr_prop>-anzst.
          <ls_fcat>-decimals  = <ls_attr_prop>-anzdz.
          <ls_fcat>-quantity  = <ls_attr_prop>-msehi.

          IF <ls_attr_prop>-atkla = 'BN_DGM'.
            <ls_fcat>-no_zero = 'X'.
          ENDIF.
        WHEN OTHERS.
          <ls_fcat>-inttype    = 'C'.
          <ls_fcat>-intlen     = 30.
          <ls_fcat>-f4availabl = 'X'.
      ENDCASE.

      IF <ls_attr_prop>-atnam = 'Z_POST'.
        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && <ls_attr_prop>-atnam && c_col_attr_text_postfix.
        <ls_fcat_text>-scrtext_l = TEXT-f10.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 35.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.
      ENDIF.
*--> V.Zaretsky #27499
      IF <ls_attr_prop>-atnam = 'Z_NCC_DOV'.
        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && 'SUB_ATTORNEY'.
        <ls_fcat_text>-scrtext_l = TEXT-f53.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 35.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.

        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && 'SUB_NDOC'.
        <ls_fcat_text>-scrtext_l = TEXT-f54.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 35.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.

        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && 'NDOC'.
        <ls_fcat_text>-scrtext_l = TEXT-f55.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 35.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.

        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && 'INSTANCE'.
        <ls_fcat_text>-scrtext_l = TEXT-f56.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 35.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.

        lv_last_col_pos = lv_last_col_pos + 1.
        APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat_text>.
        <ls_fcat_text>-col_pos   = lv_last_col_pos.
        <ls_fcat_text>-tabname   = 'OBJECT_TAB'.
        <ls_fcat_text>-fieldname = c_col_attr_prefix && 'PARTNER'.
        <ls_fcat_text>-scrtext_l = TEXT-f57.
        <ls_fcat_text>-inttype   = 'C'.
        <ls_fcat_text>-intlen    = 128.
        <ls_fcat_text>-lowercase = 'X'.
        <ls_fcat_text>-col_opt   = 'X'.
      ENDIF.
*<-- V.Zaretsky #27499
    ENDLOOP.

    lv_last_col_pos = lv_last_col_pos + 1.
    APPEND INITIAL LINE TO rt_fcat ASSIGNING <ls_fcat>.
    <ls_fcat>-col_pos   = lv_last_col_pos.
    <ls_fcat>-fieldname = 'CELLSTYLE'.
    <ls_fcat>-tech      = 'X'.
    <ls_fcat>-ref_table = 'ZMM_STOCK_REV_STYLE'.
    <ls_fcat>-ref_field = 'CELLSTYLE'.
  ENDMETHOD.

  METHOD set_data.
    DATA:
      lr_line      TYPE REF TO data,
      lt_objek     TYPE SORTED TABLE OF inob-objek
                          WITH UNIQUE KEY table_line,
      lv_fieldname TYPE lvc_s_fcat-fieldname,
      ls_cellstyle TYPE lvc_s_styl,
      lv_date_char TYPE char10,
      lv_date_f    TYPE p LENGTH 10.

    FIELD-SYMBOLS:
      <lt_table>       TYPE STANDARD TABLE,
      <ls_line>        TYPE any,
      <lv_objek>       TYPE inob-objek,
      <ls_attr_value>  TYPE ty_s_attr_value,
      <lv_table_val>   TYPE any,
      <lt_cellstyle>   TYPE lvc_t_styl,
      <ls_objek_class> TYPE ty_s_objek_class,
      <ls_attr_prop>   TYPE ty_s_attr_prop,
      <ls_atwrt_out>   TYPE ty_s_atwrt_out.

    me->data_ref = ir_data.

    ASSIGN me->data_ref->* TO <lt_table>.

    CREATE DATA lr_line LIKE LINE OF <lt_table>.
    ASSIGN lr_line->* TO <ls_line>.

    ASSIGN COMPONENT 'CELLSTYLE' OF STRUCTURE <ls_line> TO <lt_cellstyle>.
    ASSERT sy-subrc = 0.

    LOOP AT <lt_table> ASSIGNING <ls_line>.
      ASSIGN COMPONENT 'OBJEK' OF STRUCTURE <ls_line> TO <lv_objek>.
      INSERT <lv_objek> INTO TABLE lt_objek.
    ENDLOOP.

    SELECT DISTINCT inob~objek
           cabn~atnam
           ausp~atwrt
           ausp~atflv
      INTO TABLE me->t_value
      FROM inob
        INNER JOIN ausp ON ausp~objek = inob~cuobj
                       AND ausp~mafid = 'O'
                       AND ausp~klart = gc_charg_class_type
        INNER JOIN cabn ON cabn~atinn = ausp~atinn
      FOR ALL ENTRIES IN lt_objek
      WHERE inob~objek = lt_objek-table_line.

    IF sy-subrc = 0.
      me->set_atwrt_out( ).
      me->fetch_z_post_text( ).
    ENDIF.

    LOOP AT <lt_table> ASSIGNING <ls_line>.
      ASSIGN COMPONENT 'OBJEK' OF STRUCTURE <ls_line> TO <lv_objek>.

      LOOP AT me->t_value ASSIGNING <ls_attr_value>
                          USING KEY objek
                          WHERE objek = <lv_objek>.
        lv_fieldname = c_col_attr_prefix && <ls_attr_value>-atnam.

        ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
        CHECK sy-subrc = 0.

        READ TABLE me->t_property ASSIGNING <ls_attr_prop>
          WITH TABLE KEY atnam = <ls_attr_value>-atnam.
        CHECK sy-subrc = 0.

        CASE <ls_attr_prop>-atfor.
          WHEN 'NUM'.
            <lv_table_val> = <ls_attr_value>-atflv.
          WHEN 'DATE' OR 'TIME'.
            lv_date_char = lv_date_f = <ls_attr_value>-atflv.
            <lv_table_val> = condense( lv_date_char ).
          WHEN 'CURR'.
            <lv_table_val> = me->atflv2curr(
              iv_atflv = <ls_attr_value>-atflv
              iv_msehi = <ls_attr_prop>-msehi ).
          WHEN OTHERS.
            READ TABLE me->t_atwrt_out ASSIGNING <ls_atwrt_out>
              WITH TABLE KEY atnam = <ls_attr_value>-atnam
                             atwrt = <ls_attr_value>-atwrt.
            IF sy-subrc = 0.
              <lv_table_val> = <ls_atwrt_out>-atwtb.
            ELSE.
              <lv_table_val> = <ls_attr_value>-atwrt.
            ENDIF.

            IF <ls_attr_value>-atnam = 'Z_POST'.
              lv_fieldname = c_col_attr_prefix && <ls_attr_value>-atnam && c_col_attr_text_postfix.
              ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
              CHECK sy-subrc = 0.

              <lv_table_val> = me->get_z_post_text( <ls_attr_value>-atwrt ).
            ENDIF.
*-->V.Zaretsky #27499
            IF <ls_attr_value>-atnam = 'Z_NCC_DOV'.
              DATA(lv_z_ncc_dov) = <ls_attr_value>-atwrt.
            ENDIF.
            IF <ls_attr_value>-atnam = 'Z_SUB_DOV'.
              DATA(lv_z_ncc_sub) = <ls_attr_value>-atwrt.
            ENDIF.

        ENDCASE.
        IF lv_z_ncc_dov IS NOT INITIAL.
          DATA(ls_param) = me->get_attorney_params( EXPORTING iv_z_ncc_dov = lv_z_ncc_dov
                                                              iv_z_ncc_sub = lv_z_ncc_sub ).

          lv_fieldname = c_col_attr_prefix && 'SUB_ATTORNEY'.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
          CHECK sy-subrc = 0.
          "SHIFT ls_param-attorney_sub_id LEFT DELETING LEADING '0'.
          <lv_table_val> = ls_param-attorney_sub_id.

          lv_fieldname = c_col_attr_prefix && 'SUB_NDOC'.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
          CHECK sy-subrc = 0.
          <lv_table_val> = ls_param-attorney_sub_ndoc.

          lv_fieldname = c_col_attr_prefix && 'NDOC'.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
          CHECK sy-subrc = 0.
          <lv_table_val> = ls_param-attorney_ndoc.

          lv_fieldname = c_col_attr_prefix && 'INSTANCE'.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
          CHECK sy-subrc = 0.
          <lv_table_val> = ls_param-attorney_instance.

          lv_fieldname = c_col_attr_prefix && 'PARTNER'.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE <ls_line> TO <lv_table_val>.
          CHECK sy-subrc = 0.
          CONCATENATE ls_param-name1 ls_param-name2 ls_param-name3 ls_param-name4 INTO DATA(lv_partner) SEPARATED BY space.
          <lv_table_val> = lv_partner.
        ENDIF.
*<--V.Zaretsky #27499
      ENDLOOP.

      IF me->mode = c_mode-edit.
        ASSIGN COMPONENT 'CELLSTYLE' OF STRUCTURE <ls_line> TO <lt_cellstyle>.

        READ TABLE me->t_objek_class ASSIGNING <ls_objek_class>
          WITH TABLE KEY objek = <lv_objek>.
        IF sy-subrc <> 0.
          UNASSIGN <ls_objek_class>.
        ENDIF.

        LOOP AT me->t_property ASSIGNING <ls_attr_prop>.
          ls_cellstyle-fieldname = c_col_attr_prefix && <ls_attr_prop>-atnam.
          ls_cellstyle-style     = cl_gui_alv_grid=>mc_style_disabled.

          IF <ls_attr_prop>-atinp IS INITIAL AND <ls_objek_class> IS ASSIGNED.
            READ TABLE me->t_class_attr TRANSPORTING NO FIELDS
              WITH TABLE KEY class = <ls_objek_class>-class
                             atnam = <ls_attr_prop>-atnam.
            IF sy-subrc = 0.
              ls_cellstyle-style = cl_gui_alv_grid=>mc_style_enabled.
            ENDIF.
          ENDIF.

          INSERT ls_cellstyle INTO TABLE <lt_cellstyle>.
        ENDLOOP.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD save.
    DATA:
      lt_saving_val  TYPE ty_t_attr_value,
      lt_objek_class TYPE ty_t_objek_class,
      lt_val_num     TYPE STANDARD TABLE OF bapi1003_alloc_values_num,
      lt_val_char    TYPE STANDARD TABLE OF bapi1003_alloc_values_char,
      lt_val_curr    TYPE STANDARD TABLE OF bapi1003_alloc_values_curr,
      lt_return      TYPE bapiret2_t,
      lv_text_saved  TYPE abap_bool.

    FIELD-SYMBOLS:
      <ls_changed_val> TYPE ty_s_attr_value,
      <ls_val>         TYPE ty_s_attr_value,
      <ls_objek_class> TYPE ty_s_objek_class,
      <ls_attr_prop>   TYPE ty_s_attr_prop,
      <ls_val_num>     TYPE bapi1003_alloc_values_num,
      <ls_val_char>    TYPE bapi1003_alloc_values_char,
      <ls_val_curr>    TYPE bapi1003_alloc_values_curr,
      <ls_return>      TYPE bapiret2.

    IF mv_commit_text = abap_true.                                             "{31.07.2017 VSansouski Сохранение текстов признака партии "Cведения о сертиф. качества"
      CALL FUNCTION 'COMMIT_TEXT'
        EXPORTING
          object          = 'ZATTR'
          savemode_direct = 'X'.

      COMMIT WORK AND WAIT.

      mv_commit_text = abap_false.
      lv_text_saved  = abap_true.
    ENDIF.                                                                     "}31.07.2017 VSansouski Сохранение текстов признака партии "Cведения о сертиф. качества"

    LOOP AT me->t_changed_value ASSIGNING <ls_changed_val>.
      READ TABLE me->t_value ASSIGNING <ls_val>
        WITH TABLE KEY objek = <ls_changed_val>-objek
                       atnam = <ls_changed_val>-atnam.
      IF sy-subrc = 0.
        IF <ls_changed_val>-atwrt <> <ls_val>-atwrt OR
           <ls_changed_val>-atflv <> <ls_val>-atflv.
          INSERT <ls_changed_val> INTO TABLE lt_saving_val.
        ELSE.
          DELETE me->t_changed_value
            WHERE objek = <ls_val>-objek
              AND atnam = <ls_val>-atnam.
        ENDIF.
      ELSE.
        IF <ls_changed_val>-atwrt IS NOT INITIAL OR
           <ls_changed_val>-atflv IS NOT INITIAL.
          INSERT <ls_changed_val> INTO TABLE lt_saving_val.
        ELSE.
          DELETE me->t_changed_value
            WHERE objek = <ls_changed_val>-objek
              AND atnam = <ls_changed_val>-atnam.
        ENDIF.
      ENDIF.
    ENDLOOP.

    IF lt_saving_val IS INITIAL.
      IF lv_text_saved = abap_false.
        IF 1 <> 1.
          MESSAGE s043(sv).
        ELSE.
          APPEND INITIAL LINE TO rt_return ASSIGNING <ls_return>.
          <ls_return>-type   = 'S'.
          <ls_return>-id     = 'SV'.
          <ls_return>-number = '043'.
        ENDIF.
      ENDIF.

      RETURN.
    ENDIF.

    LOOP AT lt_saving_val ASSIGNING <ls_val>.
      READ TABLE me->t_objek_class ASSIGNING <ls_objek_class>
        WITH TABLE KEY objek = <ls_val>-objek.
      ASSERT sy-subrc = 0.

      INSERT <ls_objek_class> INTO TABLE lt_objek_class.
    ENDLOOP.

    LOOP AT lt_objek_class ASSIGNING <ls_objek_class>.
      CALL FUNCTION 'BAPI_OBJCL_GETDETAIL'
        EXPORTING
          objecttable     = 'MCH1'
          classnum        = <ls_objek_class>-class
          classtype       = '023'
          objectkey_long  = <ls_objek_class>-objek
        TABLES
          allocvaluesnum  = lt_val_num
          allocvalueschar = lt_val_char
          allocvaluescurr = lt_val_curr
          return          = lt_return.

      LOOP AT lt_return TRANSPORTING NO FIELDS
                        WHERE type CA 'AEX'.
        EXIT.
      ENDLOOP.

      IF sy-subrc = 0.
        APPEND LINES OF lt_return TO rt_return.
        CONTINUE.
      ENDIF.

      LOOP AT lt_saving_val ASSIGNING <ls_val>
                            USING KEY objek
                            WHERE objek = <ls_objek_class>-objek.
        READ TABLE me->t_property ASSIGNING <ls_attr_prop>
          WITH TABLE KEY atnam = <ls_val>-atnam.
        ASSERT sy-subrc = 0.

        CASE <ls_attr_prop>-atfor.
          WHEN 'NUM' OR 'DATE' OR 'TIME'.
            IF <ls_val>-atflv IS NOT INITIAL.
              READ TABLE lt_val_num ASSIGNING <ls_val_num>
                WITH KEY charact = <ls_val>-atnam.
              IF sy-subrc <> 0.
                APPEND INITIAL LINE TO lt_val_num ASSIGNING <ls_val_num>.
                <ls_val_num>-charact = <ls_val>-atnam.
              ENDIF.

              <ls_val_num>-instance   = 1.
              <ls_val_num>-value_from = <ls_val>-atflv.
              <ls_val_num>-unit_from  = <ls_attr_prop>-msehi.
            ELSE.
              DELETE lt_val_num
                WHERE charact = <ls_val>-atnam.
            ENDIF.
          WHEN 'CURR'.
            IF <ls_val>-atflv IS NOT INITIAL.
              READ TABLE lt_val_curr ASSIGNING <ls_val_curr>
                WITH KEY charact = <ls_val>-atnam.
              IF sy-subrc <> 0.
                APPEND INITIAL LINE TO lt_val_curr ASSIGNING <ls_val_curr>.
                <ls_val_curr>-charact = <ls_val>-atnam.
              ENDIF.

              <ls_val_curr>-instance      = 1.
              <ls_val_curr>-value_from    = <ls_val>-atflv.
              <ls_val_curr>-currency_from = <ls_attr_prop>-msehi.
            ELSE.
              DELETE lt_val_curr
                WHERE charact = <ls_val>-atnam.
            ENDIF.
          WHEN OTHERS.
            READ TABLE lt_val_char ASSIGNING <ls_val_char>
              WITH KEY charact = <ls_val>-atnam.
            IF sy-subrc <> 0.
              APPEND INITIAL LINE TO lt_val_char ASSIGNING <ls_val_char>.
              <ls_val_char>-charact = <ls_val>-atnam.
            ENDIF.

            <ls_val_char>-instance      = 1.
            <ls_val_char>-value_neutral = <ls_val>-atwrt.
            <ls_val_char>-value_neutral_long = <ls_val>-atwrt.

            IF <ls_val>-atwrt IS INITIAL.
              CLEAR <ls_val_char>-value_char.
              CLEAR <ls_val_char>-value_char_long.
            ENDIF.
        ENDCASE.
      ENDLOOP.

      CALL FUNCTION 'BAPI_OBJCL_CHANGE'
        EXPORTING
          objectkey_long     = <ls_objek_class>-objek
          objecttable        = 'MCH1'
          classnum           = <ls_objek_class>-class
          classtype          = '023'
          no_default_values  = 'X'
        TABLES
          allocvaluesnumnew  = lt_val_num
          allocvaluescharnew = lt_val_char
          allocvaluescurrnew = lt_val_curr
          return             = lt_return.

      LOOP AT lt_return TRANSPORTING NO FIELDS
                        WHERE type CA 'AEX'.
        EXIT.
      ENDLOOP.

      IF sy-subrc <> 0.
        CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
          EXPORTING
            wait = 'X'.

        LOOP AT lt_saving_val ASSIGNING <ls_val>
                              USING KEY objek
                              WHERE objek = <ls_objek_class>-objek.
          DELETE me->t_value
            WHERE objek = <ls_val>-objek
              AND atnam = <ls_val>-atnam.

          DELETE me->t_changed_value
            WHERE objek = <ls_val>-objek
              AND atnam = <ls_val>-atnam.

          INSERT <ls_val> INTO TABLE me->t_value.
        ENDLOOP.
      ELSE.
        CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

        APPEND LINES OF lt_return TO rt_return.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.

  METHOD handle_f4.
    DATA:
      lv_atnam        TYPE atnam,
      lt_value        TYPE STANDARD TABLE OF api_value,
      ls_atwrt_out    TYPE ty_s_atwrt_out,
      lv_attr_enabled TYPE abap_bool,
      lv_func_name    TYPE rs38l-name.

    FIELD-SYMBOLS:
      <ls_value>     TYPE api_value,
      <lt_modi>      TYPE lvc_t_modi,
      <ls_modi>      TYPE lvc_s_modi,
      <ls_attr_prop> TYPE ty_s_attr_prop.

    IF iv_fieldname CP me->attr_pattern.
      lv_atnam = iv_fieldname+me->attr_prefix_len.

      READ TABLE me->t_property ASSIGNING <ls_attr_prop>
        WITH TABLE KEY atnam = lv_atnam.
      ASSERT sy-subrc = 0.

      IF <ls_attr_prop>-atprf IS NOT INITIAL.                                  "{31.07.2017 VSasnouski DEV.04-18R Сохранения ключа партии для последующей обработки внутри функций признака
        lv_func_name = <ls_attr_prop>-atprf && '_SET_OBJ'.

        CALL FUNCTION 'FUNCTION_EXISTS'
          EXPORTING
            funcname = lv_func_name
          EXCEPTIONS
            OTHERS   = 1.

        IF sy-subrc = 0.
          CALL FUNCTION lv_func_name
            EXPORTING
              iv_objek = get_objek( is_row_no-row_id ).
        ENDIF.
      ENDIF.                                                                   "}31.07.2017 VSasnouski DEV.04-18R Сохранения ключа партии для последующей обработки внутри функций признака

      lv_attr_enabled = me->is_attr_enabled(
        iv_row_id = is_row_no-row_id
        iv_atnam  = lv_atnam ).

      CALL FUNCTION 'C107TSN_CHARACTER_F4'
        EXPORTING
          i_character = lv_atnam
        TABLES
          e_value_tab = lt_value
        EXCEPTIONS
          OTHERS      = 1.

      IF sy-subrc = 0.
        IF lv_attr_enabled = abap_true.
          READ TABLE lt_value ASSIGNING <ls_value> INDEX 1.
          IF sy-subrc = 0.
            ASSIGN ir_event_data->m_data->* TO <lt_modi>.

            APPEND INITIAL LINE TO <lt_modi> ASSIGNING <ls_modi>.
            <ls_modi>-row_id    = is_row_no-row_id.
            <ls_modi>-fieldname = iv_fieldname.

            IF <ls_attr_prop>-valout = abap_true.
              ls_atwrt_out-atnam = lv_atnam.
              ls_atwrt_out-atwrt = <ls_value>-atwrt.
              ls_atwrt_out-atwtb = <ls_value>-atwtb.
              INSERT ls_atwrt_out INTO TABLE me->t_atwrt_out.

              <ls_modi>-value = <ls_value>-atwtb.
            ELSE.
              <ls_modi>-value = <ls_value>-atwrt.
            ENDIF.

            me->add_changed_atnam(
              iv_row_id = is_row_no-row_id
              iv_atnam  = lv_atnam
              iv_atwrt  = <ls_value>-atwrt ).

            IF lv_atnam = 'Z_POST'.
              APPEND INITIAL LINE TO <lt_modi> ASSIGNING <ls_modi>.
              <ls_modi>-row_id    = is_row_no-row_id.
              <ls_modi>-fieldname = c_col_attr_prefix && lv_atnam && c_col_attr_text_postfix.
              <ls_modi>-value     = me->get_z_post_text( <ls_value>-atwrt ).
            ENDIF.
          ENDIF.
        ELSEIF me->mode = c_mode-edit AND lv_atnam = c_attr_quality_sertif.    "{31.07.2017 VSansouski Получение части введенного значения признака партии "Cведения о сертиф. качества"
          READ TABLE lt_value ASSIGNING <ls_value> INDEX 1.
          IF sy-subrc = 0.
            ASSIGN ir_event_data->m_data->* TO <lt_modi>.
            APPEND INITIAL LINE TO <lt_modi> ASSIGNING <ls_modi>.
            <ls_modi>-row_id    = is_row_no-row_id.
            <ls_modi>-fieldname = c_col_attr_prefix && lv_atnam.
            <ls_modi>-value     = <ls_value>-atwrt.

            mv_commit_text = abap_true.
          ENDIF.
        ENDIF.                                                                 "}31.07.2017 VSansouski Получение части введенного значения признака партии "Cведения о сертиф. качества"
      ELSE.
        MESSAGE ID sy-msgid TYPE 'S' NUMBER sy-msgno
          WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4
          DISPLAY LIKE sy-msgty.
      ENDIF.

      ir_event_data->m_event_handled = 'X'.
    ENDIF.
  ENDMETHOD.

  METHOD is_classif_attr.
    IF iv_fieldname CP me->attr_pattern.
      rv_value = abap_true.
    ENDIF.
  ENDMETHOD.

  METHOD handle_data_changed.
    DATA:
      lv_atnam          TYPE atnam,
      lv_atwrt          TYPE atwrt,
      lv_atflv          TYPE ausp-atflv,
      lv_atwtb          TYPE atwtb,
      ls_atwrt_out      TYPE ty_s_atwrt_out,
      lv_value_relation TYPE atcod.

    FIELD-SYMBOLS:
      <ls_mod_cell>  TYPE lvc_s_modi,
      <ls_attr_prop> TYPE ty_s_attr_prop,
      <ls_atwrt_out> TYPE ty_s_atwrt_out.

    IF iv_onf4 IS NOT INITIAL.
      RETURN.
    ENDIF.

    LOOP AT ir_data_changed->mt_mod_cells ASSIGNING <ls_mod_cell>.
      CHECK <ls_mod_cell>-fieldname CP me->attr_pattern.

      lv_atnam = <ls_mod_cell>-fieldname+me->attr_prefix_len.

      READ TABLE me->t_property ASSIGNING <ls_attr_prop>
        WITH TABLE KEY atnam = lv_atnam.
      CHECK sy-subrc = 0.

      CLEAR lv_atflv.

      lv_atwrt = <ls_mod_cell>-value.

      IF lv_atwrt IS NOT INITIAL.
        IF <ls_attr_prop>-atfor = 'CHAR'.
          IF <ls_attr_prop>-valout = abap_true.
            READ TABLE me->t_atwrt_out ASSIGNING <ls_atwrt_out>
              WITH TABLE KEY atnam = lv_atnam
                             atwrt = lv_atwrt.
            IF sy-subrc <> 0.
              IF <ls_attr_prop>-atprf IS NOT INITIAL.
                CALL FUNCTION 'CTHE_FUNCTION_DESCR'
                  EXPORTING
                    function    = <ls_attr_prop>-atprf
                    charact     = <ls_attr_prop>-atnam
                    charact_no  = <ls_attr_prop>-atinn
                    value       = lv_atwrt
                  IMPORTING
                    description = lv_atwtb
                  EXCEPTIONS
                    OTHERS      = 1.

                IF sy-subrc <> 0.
                  ir_data_changed->add_protocol_entry(
                    i_msgid     = sy-msgid
                    i_msgty     = sy-msgty
                    i_msgno     = sy-msgno
                    i_msgv1     = sy-msgv1
                    i_msgv2     = sy-msgv2
                    i_msgv3     = sy-msgv3
                    i_msgv4     = sy-msgv4
                    i_fieldname = <ls_mod_cell>-fieldname
                    i_row_id    = <ls_mod_cell>-row_id ).

                  CONTINUE.
                ENDIF.
              ELSE.
                SELECT cawnt~atwtb UP TO 1 ROWS
                  INTO lv_atwtb
                  FROM cawn
                    INNER JOIN cawnt ON cawnt~atinn = cawn~atinn
                                    AND cawnt~atzhl = cawn~atzhl
                                    AND cawnt~spras = sy-langu
                  WHERE cawn~atinn = <ls_attr_prop>-atinn
                    AND cawn~atwrt = lv_atwrt.
                ENDSELECT.

                IF sy-subrc <> 0.
                  IF 1 <> 1.
                    MESSAGE e801(c1) WITH <ls_attr_prop>-atbez lv_atwrt.
                  ELSE.
                    ir_data_changed->add_protocol_entry(
                      i_msgid     = 'C1'
                      i_msgty     = 'E'
                      i_msgno     = '801'
                      i_msgv1     = <ls_attr_prop>-atbez
                      i_msgv2     = lv_atwrt
                      i_fieldname = <ls_mod_cell>-fieldname
                      i_row_id    = <ls_mod_cell>-row_id ).
                  ENDIF.

                  CONTINUE.
                ENDIF.
              ENDIF.

              ls_atwrt_out-atnam = lv_atnam.
              ls_atwrt_out-atwrt = lv_atwrt.
              ls_atwrt_out-atwtb = lv_atwtb.
              INSERT ls_atwrt_out INTO TABLE me->t_atwrt_out ASSIGNING <ls_atwrt_out>.
            ENDIF.

            ir_data_changed->modify_cell(
              i_row_id    = <ls_mod_cell>-row_id
              i_fieldname = <ls_mod_cell>-fieldname
              i_value     = <ls_atwrt_out>-atwtb ).
          ENDIF.

          IF lv_atnam = 'Z_POST'.
            ir_data_changed->modify_cell(
              i_row_id    = <ls_mod_cell>-row_id
              i_fieldname = c_col_attr_prefix && lv_atnam && c_col_attr_text_postfix
              i_value     = me->get_z_post_text( lv_atwrt ) ).
          ENDIF.
        ELSE.
          CALL FUNCTION 'CTBP_CONVERT_VALUE_EXT_TO_INT'
            EXPORTING
              charactname           = lv_atnam
              value_external        = lv_atwrt
              iv_no_authority_check = 'X'
            IMPORTING
              value_from            = lv_atflv
              value_relation        = lv_value_relation
            EXCEPTIONS
              OTHERS                = 1.

          IF sy-subrc <> 0.
            ir_data_changed->add_protocol_entry(
              i_msgid     = sy-msgid
              i_msgty     = sy-msgty
              i_msgno     = sy-msgno
              i_msgv1     = sy-msgv1
              i_msgv2     = sy-msgv2
              i_msgv3     = sy-msgv3
              i_msgv4     = sy-msgv4
              i_fieldname = <ls_mod_cell>-fieldname
              i_row_id    = <ls_mod_cell>-row_id ).

            CONTINUE.
          ELSEIF lv_value_relation <> '1'.
            IF 1 <> 1.
              MESSAGE e801(c1) WITH <ls_attr_prop>-atbez lv_atwrt.
            ELSE.
              ir_data_changed->add_protocol_entry(
                i_msgid     = 'C1'
                i_msgty     = 'E'
                i_msgno     = '801'
                i_msgv1     = <ls_attr_prop>-atbez
                i_msgv2     = lv_atwrt
                i_fieldname = <ls_mod_cell>-fieldname
                i_row_id    = <ls_mod_cell>-row_id ).
            ENDIF.

            CONTINUE.
          ENDIF.

          CLEAR lv_atwrt.
        ENDIF.
      ENDIF.

      me->add_changed_atnam(
        iv_row_id = <ls_mod_cell>-row_id
        iv_atnam  = lv_atnam
        iv_atwrt  = lv_atwrt
        iv_atflv  = lv_atflv ).
    ENDLOOP.
  ENDMETHOD.

  METHOD get_register_f4.
    DATA:
      ls_f4 TYPE lvc_s_f4.

    FIELD-SYMBOLS:
      <ls_attr_prop> TYPE ty_s_attr_prop.

    LOOP AT me->t_property ASSIGNING <ls_attr_prop>.
      ls_f4-fieldname = c_col_attr_prefix && <ls_attr_prop>-atnam.
      ls_f4-register  = 'X'.
      INSERT ls_f4 INTO TABLE rt_f4.
    ENDLOOP.
  ENDMETHOD.
*--------------------------------------------------------------------*
*         P R I V A T E
*--------------------------------------------------------------------*
  METHOD constructor.
    DATA:
      ls_objek_class TYPE ty_s_objek_class,
      ls_class_attr  TYPE ty_s_class_attr,
      ls_attr_prop   TYPE ty_s_attr_prop,
      lt_accep_atnam TYPE RANGE OF atnam.

    FIELD-SYMBOLS:
      <ls_stock>       TYPE zmm_stock,
      <ls_objek_class> TYPE ty_s_objek_class,
      <ls_class_attr>  TYPE ty_s_class_attr,
      <lv_atnam>       TYPE atnam,
      <ls_accep_atnam> LIKE LINE OF lt_accep_atnam.

    me->attr_pattern    = c_col_attr_prefix && `*`.
    me->attr_prefix_len = strlen( c_col_attr_prefix ).

    IF it_stock IS INITIAL.
      RETURN.
    ENDIF.

    me->mode = iv_mode.

    LOOP AT it_atnam ASSIGNING <lv_atnam>.
      APPEND INITIAL LINE TO lt_accep_atnam ASSIGNING <ls_accep_atnam>.
      <ls_accep_atnam> = 'IEQ'.
      <ls_accep_atnam>-low = <lv_atnam>.
    ENDLOOP.

    LOOP AT it_stock ASSIGNING <ls_stock>.
      ls_objek_class-objek = <ls_stock>-objek.
      INSERT ls_objek_class INTO TABLE me->t_objek_class.
    ENDLOOP.

    SELECT inob~objek
           klah~class
      INTO TABLE me->t_objek_class
      FROM inob
        INNER JOIN kssk ON inob~cuobj = kssk~objek
        INNER JOIN klah ON kssk~clint = klah~clint
      FOR ALL ENTRIES IN me->t_objek_class
      WHERE inob~obtab = gc_charg_object_table
        AND inob~objek = me->t_objek_class-objek
        AND inob~klart = gc_charg_class_type.
    IF sy-subrc = 0.
      LOOP AT me->t_objek_class ASSIGNING <ls_objek_class>.
        ls_class_attr-class = <ls_objek_class>-class.
        INSERT ls_class_attr INTO TABLE me->t_class_attr.
      ENDLOOP.

      SELECT klah~class
             cabn~atnam
        INTO TABLE me->t_class_attr
        FROM klah
          INNER JOIN ksml ON ksml~clint = klah~clint
          INNER JOIN cabn ON cabn~atinn = ksml~imerk
                         AND cabn~adzhl = ''
          FOR ALL ENTRIES IN me->t_class_attr
        WHERE klah~klart = gc_charg_class_type
          AND klah~class = me->t_class_attr-class
          AND cabn~atnam IN lt_accep_atnam.

      IF sy-subrc = 0.
        LOOP AT me->t_class_attr ASSIGNING <ls_class_attr>.
          ls_attr_prop-atnam = <ls_class_attr>-atnam.
          INSERT ls_attr_prop INTO TABLE me->t_property.
        ENDLOOP.

        SORT me->t_property BY atnam.

        SELECT cabn~atnam
               cabn~atinn
               cabnt~atbez
               cabn~atfor
               cabn~msehi
               cabn~anzst
               cabn~anzdz
               cabn~atkla
               cabn~atinp
               cabn~atprf
               cabn~atkle
          INTO TABLE me->t_property
          FROM cabn
            LEFT JOIN cabnt ON cabnt~atinn = cabn~atinn
                           AND cabnt~spras = sy-langu
            FOR ALL ENTRIES IN me->t_property
          WHERE cabn~atnam = me->t_property-atnam.

        me->set_value_out( ).

        ASSIGN t_property[ atnam = c_attr_quality_sertif ]                     "{31.07.2017 VSasnouski Значение признака ведется через редактор (вызывается по F4)
          TO FIELD-SYMBOL(<ls_property>).
        IF sy-subrc = 0 AND <ls_property>-atinp IS INITIAL.
          <ls_property>-atinp = 'X'.
        ENDIF.                                                                 "}31.07.2017 VSasnouski Значение признака ведется через редактор (вызывается по F4)
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD set_value_out.
    DATA:
      lt_cawn_atnam TYPE SORTED TABLE OF atnam
                           WITH UNIQUE KEY table_line.

    FIELD-SYMBOLS:
      <ls_attr_prop> TYPE ty_s_attr_prop,
      <lv_atnam>     TYPE atnam.

    LOOP AT me->t_property ASSIGNING <ls_attr_prop>
                           WHERE atfor = 'CHAR'.
      IF <ls_attr_prop>-atprf IS NOT INITIAL.
        <ls_attr_prop>-valout = abap_true.
      ELSE.
        INSERT <ls_attr_prop>-atnam INTO TABLE lt_cawn_atnam.
      ENDIF.
    ENDLOOP.

    IF lt_cawn_atnam IS NOT INITIAL.
      SELECT cabn~atnam
        INTO TABLE lt_cawn_atnam
        FROM cabn
          INNER JOIN cawn ON cawn~atinn = cabn~atinn
        FOR ALL ENTRIES IN lt_cawn_atnam
        WHERE cabn~atnam = lt_cawn_atnam-table_line.

      LOOP AT lt_cawn_atnam ASSIGNING <lv_atnam>.
        READ TABLE me->t_property ASSIGNING <ls_attr_prop>
          WITH TABLE KEY atnam = <lv_atnam>.
        CHECK sy-subrc = 0.

        <ls_attr_prop>-valout = abap_true.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.

  METHOD set_atwrt_out.
    TYPES:
      BEGIN OF lty_s_atwtb,
        atinn TYPE atinn,
        atwrt TYPE atwrt,
        atwtb TYPE atwtb,
      END OF lty_s_atwtb.

    DATA:
      ls_atwrt_out TYPE ty_s_atwrt_out,
      lt_atwtb     TYPE SORTED TABLE OF lty_s_atwtb
                          WITH UNIQUE KEY atinn atwrt,
      ls_atwtb     TYPE lty_s_atwtb,
      lv_func_name TYPE rs38l-name.

    FIELD-SYMBOLS:
      <ls_attr_prop>  TYPE ty_s_attr_prop,
      <ls_attr_value> TYPE ty_s_attr_value,
      <ls_atwtb>      TYPE lty_s_atwtb.

    LOOP AT me->t_property ASSIGNING <ls_attr_prop>
                           WHERE valout = abap_true.
      IF <ls_attr_prop>-atprf IS NOT INITIAL.
        ls_atwrt_out-atnam = <ls_attr_prop>-atnam.

        LOOP AT me->t_value ASSIGNING <ls_attr_value>
                            USING KEY atnam
                            WHERE atnam = <ls_attr_prop>-atnam.
          ls_atwrt_out-atwrt = <ls_attr_value>-atwrt.

          lv_func_name = <ls_attr_prop>-atprf && '_SET_OBJ'.                   "{31.07.2017 VSasnouski DEV.04-18R Сохранения ключа партии для последующей обработки внутри функций признака

          CALL FUNCTION 'FUNCTION_EXISTS'
            EXPORTING
              funcname = lv_func_name
            EXCEPTIONS
              OTHERS   = 1.

          IF sy-subrc = 0.
            CALL FUNCTION lv_func_name
              EXPORTING
                iv_objek = <ls_attr_value>-objek.
          ENDIF.                                                               "}31.07.2017 VSasnouski DEV.04-18R Сохранения ключа партии для последующей обработки внутри функций признака

          CALL FUNCTION 'CTHE_FUNCTION_DESCR'
            EXPORTING
              function              = <ls_attr_prop>-atprf
              charact               = <ls_attr_prop>-atnam
              charact_no            = <ls_attr_prop>-atinn
              value                 = <ls_attr_value>-atwrt
            IMPORTING
              description           = ls_atwrt_out-atwtb
            EXCEPTIONS
              description_not_found = 1
              OTHERS                = 2.

          IF sy-subrc = 1.
            ls_atwrt_out-atwtb = ls_atwrt_out-atwrt.
          ELSEIF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.

          INSERT ls_atwrt_out INTO TABLE me->t_atwrt_out.
          CLEAR ls_atwrt_out.
        ENDLOOP.
      ELSE.
        ls_atwtb-atinn = <ls_attr_prop>-atinn.

        LOOP AT me->t_value ASSIGNING <ls_attr_value>
                            USING KEY atnam
                            WHERE atnam = <ls_attr_prop>-atnam.
          ls_atwtb-atwrt = <ls_attr_value>-atwrt.
          INSERT ls_atwtb INTO TABLE lt_atwtb.
        ENDLOOP.
      ENDIF.
    ENDLOOP.

    IF lt_atwtb IS NOT INITIAL.
      SELECT cawn~atinn
             cawn~atwrt
             cawnt~atwtb
        INTO TABLE lt_atwtb
        FROM cawn
          INNER JOIN cawnt ON cawnt~atinn = cawn~atinn
                          AND cawnt~atzhl = cawn~atzhl
                          AND cawnt~spras = sy-langu
        FOR ALL ENTRIES IN lt_atwtb
        WHERE cawn~atinn = lt_atwtb-atinn
          AND cawn~atwrt = lt_atwtb-atwrt.

      LOOP AT me->t_property ASSIGNING <ls_attr_prop>
                             WHERE valout = abap_true
                               AND atprf = ''.
        ls_atwrt_out-atnam = <ls_attr_prop>-atnam.

        LOOP AT lt_atwtb ASSIGNING <ls_atwtb>
                         WHERE atinn = <ls_attr_prop>-atinn.
          ls_atwrt_out-atwrt = <ls_atwtb>-atwrt.
          ls_atwrt_out-atwtb = <ls_atwtb>-atwtb.
          INSERT ls_atwrt_out INTO TABLE me->t_atwrt_out.
        ENDLOOP.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.

  METHOD add_changed_atnam.
    DATA:
      ls_changed_value TYPE ty_s_attr_value,
      lv_objek         TYPE cuobn.

    lv_objek = get_objek( iv_row_id ).
    ASSERT lv_objek IS NOT INITIAL.

    DELETE me->t_changed_value
      WHERE objek = lv_objek
        AND atnam = iv_atnam.

    ls_changed_value-objek = lv_objek.
    ls_changed_value-atnam = iv_atnam.

    IF iv_atwrt IS NOT INITIAL.
      ls_changed_value-atwrt = iv_atwrt.
    ELSEIF iv_atflv IS NOT INITIAL.
      ls_changed_value-atflv = iv_atflv.
    ENDIF.

    INSERT ls_changed_value INTO TABLE me->t_changed_value.
  ENDMETHOD.

  METHOD atflv2curr.
    DATA:
      lv_in    TYPE bapicurr-bapicurr,
      lv_out   TYPE bapicurr-bapicurr,
      lv_waers TYPE waers.

    lv_out = iv_atflv.
    lv_waers = iv_msehi.

    CALL FUNCTION 'CURRENCY_AMOUNT_BAPI_TO_SAP'
      EXPORTING
        currency    = lv_waers
        bapi_amount = lv_out
      IMPORTING
        sap_amount  = lv_in
      EXCEPTIONS
        OTHERS      = 1.

    IF sy-subrc = 0.
      rv_value = lv_in.
    ELSE.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.

  METHOD fetch_z_post_text.
    DATA:
      ls_z_post_text TYPE ty_s_z_post_text.

    FIELD-SYMBOLS:
      <ls_attr_value> TYPE ty_s_attr_value.

    CLEAR me->t_z_post_text.

    LOOP AT me->t_value ASSIGNING <ls_attr_value>
                        USING KEY atnam
                        WHERE atnam = 'Z_POST'.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <ls_attr_value>-atwrt
        IMPORTING
          output = ls_z_post_text-lifnr.

      INSERT ls_z_post_text INTO TABLE me->t_z_post_text.
    ENDLOOP.

    IF me->t_z_post_text IS NOT INITIAL.
      SORT me->t_z_post_text BY lifnr.

      SELECT lifnr
             name1
        INTO TABLE me->t_z_post_text
        FROM lfa1
        FOR ALL ENTRIES IN me->t_z_post_text
        WHERE lifnr = me->t_z_post_text-lifnr.
    ENDIF.
  ENDMETHOD.

*--> V.Zaretsky #27499
  METHOD  get_attorney_params.
    DATA:
      lv_attorney_id     TYPE zmm_attorney-attorney_id,
      lv_attorney_sub    TYPE zmm_attorney-attorney_sub,
      ls_attorney_params TYPE ty_s_z_ncc_dov_params.

    FIELD-SYMBOLS:
      <ls_attorney_params> TYPE ty_s_z_ncc_dov_params.

    IF iv_z_ncc_dov IS INITIAL.
      RETURN.
    ENDIF.

    lv_attorney_id  = iv_z_ncc_dov.
    lv_attorney_sub = iv_z_ncc_sub.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = iv_z_ncc_dov
*      IMPORTING
*        output = lv_attorney_id.
*
*    IF iv_z_ncc_sub IS INITIAL.
*      lv_attorney_sub = '0'.
*
*    ELSE.
*      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*        EXPORTING
*          input  = iv_z_ncc_sub
*        IMPORTING
*          output = lv_attorney_sub.
*    ENDIF.

    READ TABLE me->t_z_ncc_params ASSIGNING <ls_attorney_params>
      WITH TABLE KEY attorney_id = lv_attorney_id attorney_sub = lv_attorney_sub.
    IF sy-subrc <> 0.
      ls_attorney_params-attorney_id  = lv_attorney_id.
      ls_attorney_params-attorney_sub = lv_attorney_sub.
        SELECT SINGLE a~attorney_sub_id AS sub_dov_id,
              c1~zz_ndoc AS sub_dogovor,
              c2~zz_ndoc AS ncc_dogovor,
              b~name_org1, b~name_org2, b~name_org3, b~name_org4,
              i~instance_name AS instance
        FROM zmm_sub_attorney AS a
          LEFT JOIN rmps_t_case_attr AS c1 ON  c1~zext_key   = a~ext_key
          LEFT JOIN but000           AS b  ON  c1~zz_partner = b~partner
          LEFT JOIN zmm_attorney     AS at ON  a~attorney_id = at~attorney_id
                                           AND a~attorney_sub = at~attorney_sub
          LEFT JOIN rmps_t_case_attr AS c2 ON  c2~zext_key = at~ext_key
          LEFT JOIN zmm_instance     AS i  ON  at~instance_id = i~instance_id
        INTO ( @ls_attorney_params-attorney_sub_id,
        @ls_attorney_params-attorney_sub_ndoc,
        @ls_attorney_params-attorney_ndoc,
        @ls_attorney_params-name1, @ls_attorney_params-name2,
        @ls_attorney_params-name3, @ls_attorney_params-name4,
        @ls_attorney_params-attorney_instance )
        WHERE a~attorney_id  = @lv_attorney_id
        AND   a~attorney_sub = @lv_attorney_sub.
      INSERT ls_attorney_params INTO TABLE me->t_z_ncc_params ASSIGNING <ls_attorney_params>.
    ENDIF.

    rv_param = <ls_attorney_params>.
  ENDMETHOD.
*<-- V.Zaretsky #27499


  METHOD get_z_post_text.
    DATA:
      lv_lifnr       TYPE lifnr,
      ls_z_post_text TYPE ty_s_z_post_text.

    FIELD-SYMBOLS:
      <ls_z_post_text> TYPE ty_s_z_post_text.

    IF iv_z_post IS INITIAL.
      RETURN.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = iv_z_post
      IMPORTING
        output = lv_lifnr.

    READ TABLE me->t_z_post_text ASSIGNING <ls_z_post_text>
      WITH TABLE KEY lifnr = lv_lifnr.
    IF sy-subrc <> 0.
      ls_z_post_text-lifnr = lv_lifnr.

      SELECT SINGLE name1
        INTO ls_z_post_text-name
        FROM lfa1
        WHERE lifnr = lv_lifnr.

      INSERT ls_z_post_text INTO TABLE me->t_z_post_text ASSIGNING <ls_z_post_text>.
    ENDIF.

    rv_text = <ls_z_post_text>-name.
  ENDMETHOD.

  METHOD get_atnam_order.
    DATA:
      lt_main TYPE ty_t_atnam,
      lt_dgm  TYPE ty_t_atnam.

    FIELD-SYMBOLS:
      <ls_attr_prop> TYPE ty_s_attr_prop.

    LOOP AT me->t_property ASSIGNING <ls_attr_prop>.
      IF <ls_attr_prop>-atkla = 'BN_DGM'.
        APPEND <ls_attr_prop>-atnam TO lt_dgm.
      ELSE.
        APPEND <ls_attr_prop>-atnam TO lt_main.
      ENDIF.
    ENDLOOP.

    APPEND LINES OF lt_main TO rt_atnam.
    APPEND LINES OF lt_dgm TO rt_atnam.
  ENDMETHOD.

  METHOD is_attr_enabled.
    DATA:
      lv_fieldname TYPE lvc_s_styl-fieldname.

    FIELD-SYMBOLS:
      <lt_data>      TYPE STANDARD TABLE,
      <ls_line>      TYPE any,
      <lt_cellstyle> TYPE lvc_t_styl,
      <ls_cellstyle> TYPE lvc_s_styl.

    IF me->mode = c_mode-view.
      RETURN.
    ENDIF.

    ASSIGN me->data_ref->* TO <lt_data>.

    READ TABLE <lt_data> ASSIGNING <ls_line> INDEX iv_row_id.
    IF sy-subrc = 0.
      ASSIGN COMPONENT 'CELLSTYLE' OF STRUCTURE <ls_line> TO <lt_cellstyle>.
      IF sy-subrc = 0.
        lv_fieldname = c_col_attr_prefix && iv_atnam.

        READ TABLE <lt_cellstyle> ASSIGNING <ls_cellstyle>
          WITH TABLE KEY fieldname = lv_fieldname.
        IF sy-subrc = 0 AND <ls_cellstyle>-style = cl_gui_alv_grid=>mc_style_enabled.
          rv_value = abap_true.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD press_10inv.
    FIELD-SYMBOLS: <ls_clabs_aum> TYPE fin_quantity,
                   <ls_zinvstock> TYPE fin_quantity,
                   <ls_zinvizl>   TYPE zmm_stock-zinvizl,
                   <ls_zinvndst>  TYPE zmm_stock-zinvndst.

    IF <gf_idata_tab> IS NOT ASSIGNED.
      RETURN.
    ENDIF.

    "Если НАЖАТА - в поле ZINVSTOCK записывается значение поля CLABS_AUM
    IF gv_press10inv = abap_true.
      LOOP AT <gf_idata_tab> ASSIGNING <gf_fline>.
        ASSIGN COMPONENT 'CLABS_AUM' OF STRUCTURE <gf_fline> TO <ls_clabs_aum>.
        IF sy-subrc = 0.
          ASSIGN COMPONENT 'ZINVSTOCK' OF STRUCTURE <gf_fline> TO <ls_zinvstock>.
          IF sy-subrc = 0.
            <ls_zinvstock> = <ls_clabs_aum>.
            ASSIGN COMPONENT 'ZINVIZL' OF STRUCTURE <gf_fline> TO <ls_zinvizl>.
            IF sy-subrc = 0.
              <ls_zinvizl> = 0.
            ENDIF.
            ASSIGN COMPONENT 'ZINVNDST' OF STRUCTURE <gf_fline> TO <ls_zinvndst>.
            IF sy-subrc = 0.
              <ls_zinvndst> = 0.
            ENDIF.
          ENDIF.
        ENDIF.
      ENDLOOP.
      "Если ОТЖАТА - возврат первоначальных значениний в поля ZINVSTOCK, ZINVIZL, ZINVNDST
    ELSE.
      CLEAR <gf_idata_tab>.
      <gf_idata_tab> = <gf_idata_tab_old>.
    ENDIF.

    gr_alv_grid1->refresh_table_display( EXCEPTIONS OTHERS = 0 ).
  ENDMETHOD.

  METHOD get_objek.
    DATA:
      lv_fieldname TYPE lvc_s_styl-fieldname.

    FIELD-SYMBOLS:
      <lt_data>  TYPE STANDARD TABLE,
      <ls_line>  TYPE any,
      <lv_value> TYPE any.

    ASSIGN me->data_ref->* TO <lt_data>.

    READ TABLE <lt_data> ASSIGNING <ls_line> INDEX iv_row_id.
    IF sy-subrc = 0.
      ASSIGN COMPONENT 'OBJEK' OF STRUCTURE <ls_line> TO <lv_value>.
      IF sy-subrc = 0.
        rv_value = <lv_value>.
      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
