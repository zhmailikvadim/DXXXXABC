class ZCL_API_ATTACHMENTS definition
  public
  inheriting from CL_REST_RESOURCE
  create public .

public section.

  types:
    BEGIN OF mty_s_attachment,
        task_id        TYPE string,
        location_id    TYPE string,
        cntrl_point_id TYPE string,
        filename       TYPE string,
        description    TYPE string,
        mimetype       TYPE string,
        uuid           TYPE string,
        content        TYPE string,
        doc_id         TYPE bapisignat-doc_count,
      END OF mty_s_attachment .
  types:
    mty_t_attachments TYPE STANDARD TABLE OF mty_s_attachment WITH DEFAULT KEY .

  class-methods READ_ATTACHMENTS
    importing
      value(IV_TASK) type STRING optional
      value(IV_LOCATION) type STRING optional
      value(IV_POINT) type STRING optional
      value(IV_UUID) type STRING optional
      value(IV_FILE) type STRING optional
      value(IV_NO_CONTENT) type ABAP_BOOL optional
      value(IV_HAS_TASK_IN_KEY) type ABAP_BOOL default ABAP_FALSE
    returning
      value(RT_ATTACHMENTS) type MTY_T_ATTACHMENTS .
  class-methods STORE_ATTACHMENTS
    importing
      value(IS_ATTACHMENT) type MTY_S_ATTACHMENT
    exporting
      value(EV_UUID) type MTY_S_ATTACHMENT-UUID
    changing
      value(CT_ERRORS) type WDY_KEY_VALUE_LIST
    returning
      value(RV_OK) type ABAP_BOOL .
  class-methods DELETE_ATTACHMENTS
    importing
      value(IV_TASK) type STRING
      value(IV_LOCATION) type STRING optional
      value(IV_POINT) type STRING optional .

  methods IF_REST_RESOURCE~GET
    redefinition .
  methods IF_REST_RESOURCE~POST
    redefinition .
  methods IF_REST_RESOURCE~PUT
    redefinition .
protected section.
private section.

  constants MV_FILE_UID type STRING value 'file' ##NO_TEXT.
  constants MV_URI_FILTER type STRING value 'filter' ##NO_TEXT.
  constants MV_TASK_UID type STRING value 'task_id' ##NO_TEXT.
  constants MV_POINT_UID type STRING value 'control_point' ##NO_TEXT.
  constants MV_LOCATION_UID type STRING value 'location' ##NO_TEXT.
  class-data MT_SIGNATURE type DPCOMMON_T_BAPISIGNAT .
  constants MV_NOCONTENT_UID type STRING value 'no_content' ##NO_TEXT.
  constants MV_DOCUMENT_UID type STRING value 'uuid' ##NO_TEXT.
  constants MV_HASTASKKEY_UID type STRING value 'with_task' ##NO_TEXT.

  class-methods READ_PROPERTY
    importing
      value(IV_DOCUMENT) type BDS_DCOUNT
      value(IV_KEY) type BDS_PROPNA default 'BDS_KEYWORD'
      value(IV_PROPERTY) type BDS_PROPVA optional
    returning
      value(RV_VALUE) type STRING .
ENDCLASS.



CLASS ZCL_API_ATTACHMENTS IMPLEMENTATION.


  METHOD delete_attachments.
    DATA: lt_signature  TYPE STANDARD TABLE OF bapisignat.

    IF iv_location IS NOT INITIAL OR iv_point IS NOT INITIAL.
      DATA(lt_attach) = read_attachments( iv_task       = iv_task
                                          iv_location   = iv_location
                                          iv_point      = iv_point
                                          iv_no_content = abap_true ).

      CHECK lt_attach[] IS NOT INITIAL.

      LOOP AT lt_attach[] ASSIGNING FIELD-SYMBOL(<ls_attach>).
        lt_signature[] = VALUE #( BASE lt_signature[] FOR <ls_sign> IN mt_signature[]
                                                      WHERE ( doc_count = <ls_attach>-doc_id )
                                                      ( <ls_sign> ) ).
      ENDLOOP.
    ENDIF.

    cl_bds_document_set=>delete( EXPORTING classname      = 'ZEHS'
                                           classtype      = 'OT'
                                           object_key     = CONV #( iv_task )
                                           x_force_delete = abap_true
                                 CHANGING  signature      = lt_signature[] ).

  ENDMETHOD.


  METHOD if_rest_resource~get.
*    DATA: lt_content    TYPE STANDARD TABLE OF bapiconten,
*          lt_sign       TYPE STANDARD TABLE OF bapisignat,
*          lt_components TYPE STANDARD TABLE OF bapicompon,
*          lt_comps      TYPE STANDARD TABLE OF bapicompon.
*    DATA: lt_response   TYPE STANDARD TABLE OF mty_s_attachment.

    DATA(lv_task_id)  = mo_request->get_uri_query_parameter( iv_name = me->mv_task_uid ).
    IF lv_task_id IS NOT INITIAL.
      DATA(lv_objectkey) = CONV sbdst_object_key( lv_task_id ).
    ENDIF.
    DATA(lv_location) = mo_request->get_uri_query_parameter( iv_name = me->mv_location_uid ).
    DATA(lv_point) = mo_request->get_uri_query_parameter( iv_name = me->mv_point_uid ).
    DATA(lv_uuid) = mo_request->get_uri_query_parameter( iv_name = me->mv_document_uid ).
    DATA(lv_file_name) = cl_http_utility=>if_http_utility~unescape_url( mo_request->get_uri_query_parameter( iv_name = me->mv_file_uid ) ).

    data(lt_response) = me->read_attachments( iv_task       = mo_request->get_uri_query_parameter( iv_name = me->mv_task_uid )
                                              iv_location   =  mo_request->get_uri_query_parameter( iv_name = me->mv_location_uid )
                                              iv_point      = mo_request->get_uri_query_parameter( iv_name = me->mv_point_uid )
                                              iv_uuid       = mo_request->get_uri_query_parameter( iv_name = me->mv_document_uid )
                                              iv_file       = cl_http_utility=>if_http_utility~unescape_url( mo_request->get_uri_query_parameter( iv_name = me->mv_file_uid ) )
                                              iv_no_content = mo_request->has_uri_query_parameter( iv_name = me->mv_nocontent_uid )
                                              iv_has_task_in_key = mo_request->has_uri_query_parameter( iv_name = me->mv_hastaskkey_uid ) ).

*    cl_bds_document_set=>get_with_table( EXPORTING classname  = 'ZEHS'
*                                                   classtype  = 'OT'
*                                                   object_key = lv_objectkey
*                                         CHANGING  content    = lt_content[]
*                                                   signature  = me->mt_signature[]
*                                                   components = lt_components[] ).
*
*    DATA(lv_no_content) = mo_request->has_uri_query_parameter( iv_name = me->mv_nocontent_uid ).
*
*    IF lv_task_id IS INITIAL AND lv_file_name IS INITIAL AND lv_location IS INITIAL AND lv_point IS INITIAL AND lv_uuid IS INITIAL.
**      lt_response[] = CORRESPONDING #( lt_components[] ).
*      LOOP AT lt_components[] ASSIGNING FIELD-SYMBOL(<ls_component>).
*
*        APPEND VALUE #( task_id        = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'TASK' )
*                        location_id    = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'LOCATION' )
*                        cntrl_point_id = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'CONTROL_POINT' )
*                        filename       = <ls_component>-comp_id
*                        description    = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_key      = 'DESCRIPTION' )
*                        mimetype       = <ls_component>-mimetype ) TO lt_response[].
*      ENDLOOP.
*
*      zcl_api_utils=>process_response( EXPORTING ir_data   = REF #( lt_response[] )
*                                       CHANGING  cr_response = me->mo_response ).
*      RETURN.
*    ELSE.
*      LOOP AT lt_components[] ASSIGNING <ls_component>.
*        IF lv_file_name IS NOT INITIAL.
*          CHECK <ls_component>-comp_id = lv_file_name.
*        ENDIF.
*
*        IF lv_location IS NOT INITIAL.
*          CHECK me->read_property( iv_document = <ls_component>-doc_count
*                                   iv_property = 'LOCATION' ) = lv_location.
**          CHECK sy-subrc = 0.
*        ENDIF.
*
*        IF lv_point IS NOT INITIAL.
*          CHECK me->read_property( iv_document = <ls_component>-doc_count
*                                   iv_property = 'CONTROL_POINT' ) = lv_point.
*        ENDIF.
*
*        lt_sign[] = VALUE #( FOR <ls_signature> IN me->mt_signature[]
*                             WHERE ( doc_count = <ls_component>-doc_count )
*                             ( CORRESPONDING #( <ls_signature> ) ) ).
*
*        IF lv_uuid IS NOT INITIAL.
*          DELETE lt_sign[] WHERE doc_id NP |* { lv_uuid }|.
*          CHECK lt_sign[] IS NOT INITIAL.
*        ENDIF.
*
*        CLEAR: lt_content[].
*        cl_bds_document_set=>get_with_table( EXPORTING classname  = 'ZEHS'
*                                                       classtype  = 'OT'
*                                             CHANGING  content    = lt_content[]
*                                                       signature  = lt_sign[]
*                                                       components = lt_comps[] ).
*
*        DATA(lv_content) = REDUCE #( INIT lv_value TYPE xstring
*                                     FOR <ls_line> IN lt_content[]
*                                     NEXT lv_value = lv_value && <ls_line>-line ).
*
*        lv_content =  lv_content(<ls_component>-comp_size).
*
*        APPEND VALUE #( task_id        = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'TASK_ID' )
*                        location_id    = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'LOCATION' )
*                        cntrl_point_id = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_property = 'CONTROL_POINT' )
*                        filename       = <ls_component>-comp_id
*                        description    = me->read_property( iv_document = <ls_component>-doc_count
*                                                            iv_key      = 'DESCRIPTION' )
*                        mimetype       = <ls_component>-mimetype
*                        uuid           = lt_sign[ 1 ]-doc_id+10
*                        content        = SWITCH #( lv_no_content WHEN abap_true THEN ''
*                                                                 ELSE me->read_property( iv_document = <ls_component>-doc_count
*                                                                                         iv_property = 'PREFIX' ) && cl_http_utility=>encode_x_base64( lv_content ) ) ) TO lt_response[].
*      ENDLOOP.
*    ENDIF.

    zcl_api_utils=>post_filter_data( EXPORTING iv_filter = mo_request->get_uri_query_parameter( iv_name = me->mv_uri_filter )
                                     CHANGING  ct_data   = lt_response[] ).

    zcl_api_utils=>process_response(
      EXPORTING
        ir_data   = REF #( lt_response[] )
      CHANGING
        cr_response = me->mo_response ).

  ENDMETHOD.


  METHOD if_rest_resource~post.
    DATA: lv_uuid TYPE mty_s_attachment-uuid.

    DATA: lt_errors   TYPE wdy_key_value_list,
          lt_request  TYPE STANDARD TABLE OF mty_s_attachment,
          lt_response TYPE STANDARD TABLE OF mty_s_attachment.

*    DATA: lv_length  TYPE i.
*          LT_CONTENT    type standard table of BAPICONTEN,
*          LT_REQUEST    type standard table of MTY_S_ATTACHMENT,
*          LT_SIGNATURE  type standard table of BAPISIGNAT,
*          LT_COMPONENTS type stanDARD TABLE OF bapicompon,


    zcl_api_utils=>get_data_from_request( EXPORTING ir_request = me->mo_request
                                          CHANGING  ct_errors  = lt_errors[]
                                                    c_data     = lt_request[] ).

    IF lt_errors[] IS NOT INITIAL.
      zcl_api_utils=>process_response( EXPORTING it_errors = lt_errors[]
                                       CHANGING  cr_response = me->mo_response ).
      RETURN.
    ENDIF.

    LOOP AT lt_request[] ASSIGNING FIELD-SYMBOL(<ls_request>).
      CHECK <ls_request>-content IS NOT INITIAL.

      IF me->store_attachments( EXPORTING is_attachment = <ls_request>
                                IMPORTING ev_uuid       = lv_uuid
                                CHANGING  ct_errors     = lt_errors[] ).
        lt_response[] = VALUE #( BASE lt_response[] ( task_id        = <ls_request>-task_id
                                                      location_id    = <ls_request>-location_id
                                                      cntrl_point_id = <ls_request>-cntrl_point_id
                                                      filename       = <ls_request>-filename
                                                      description    = <ls_request>-description
                                                      mimetype       = <ls_request>-mimetype
                                                      uuid           = lv_uuid ) ). "VALUE #( lt_signature[ 1 ]-doc_id+10 OPTIONAL ) ) )
      ENDIF.

*      "Обрезать data:image/jpeg;base64,:
*      FIND REGEX '(^\S+base64,)(\S+)' IN <ls_request>-content SUBMATCHES DATA(lv_prefix)
*                                                                         <ls_request>-content.
*      "Если sy-subrc = 0, префикс отрежется и сложится в lv_prefix.
*
*      DATA(lv_xstring) = cl_http_utility=>decode_x_base64( <ls_request>-content ).
*      cl_bcs_convert=>xstring_to_xtab( EXPORTING iv_xstring = lv_xstring
*                                       IMPORTING et_xtab    = lt_content[]  ).
*
*      lt_signature[] = VALUE #( doc_count = 1
*                                comp_count = 1
*                                ( prop_name = 'BDS_DOCUMENTTYPE'  prop_value = 'BDS_IMAGE')
*                                ( prop_name = 'BDS_DOCUMENTCLASS' prop_value = 'JPG'        ) "'JPG' ) "Таблица ->TOADD
*                                ( prop_name = 'DESCRIPTION'       prop_value = <ls_request>-description )
*                                ( prop_name = 'BDS_KEYWORD'       prop_value = |TASK={ <ls_request>-task_id }| )
*                                ( prop_name = 'BDS_KEYWORD'       prop_value = |LOCATION={ <ls_request>-location_id }| )
*                                ( prop_name = 'BDS_KEYWORD'       prop_value = |CONTROL_POINT={ <ls_request>-cntrl_point_id }| )
*                                ( prop_name = 'BDS_KEYWORD'       prop_value = |PREFIX={ lv_prefix }| ) ).
*
*      DATA(lv_objectkey) = CONV sbdst_object_key( <ls_request>-task_id ).
*
*      cl_bds_document_set=>create_with_table( EXPORTING classname  = 'ZEHS'
*                                                        classtype  = 'OT'
*                                                        components = VALUE #( ( doc_count  = 1
*                                                                                comp_count = 1
*                                                                                comp_id    = <ls_request>-filename
*                                                                                mimetype   = <ls_request>-mimetype   "'application/octet-stream' "'image/jpeg' "Таблица ->TOADD
*                                                                                comp_size  = xstrlen( lv_xstring ) ) )
*                                                        content    = lt_content[]
*                                              CHANGING  signature  = lt_signature[]
*                                                        object_key = lv_objectkey
*                                              EXCEPTIONS internal_error  = 1
*                                                         error_kpro      = 2
*                                                         parameter_error = 3
*                                                         not_authorized  = 4
*                                                         not_allowed     = 5
*                                                         nothing_found   = 6
*                                                         OTHERS          = 7 ).
*      IF sy-subrc <> 0.
*        lt_errors[] = VALUE #( BASE lt_errors[] ( key = zcl_api_utils=>gc_err_create
*                                                  value = SWITCH #( sy-subrc WHEN 1 THEN 'INTERNAL ERROR'
*                                                                             WHEN 2 THEN 'ERROR KPRO'
*                                                                             WHEN 3 THEN 'PARAMETER ERROR'
*                                                                             WHEN 4 THEN 'NOT AUTHORIZED'
*                                                                             WHEN 5 THEN 'NOT ALLOWED'
*                                                                             WHEN 6 THEN 'NOTHING FOUND'
*                                                                             WHEN 7 THEN 'OTHER ERROR' ) ) ).
*      ELSE.
*        lt_response[] = VALUE #( BASE lt_response[] ( task_id        = <ls_request>-task_id
*                                                      location_id    = <ls_request>-location_id
*                                                      cntrl_point_id = <ls_request>-cntrl_point_id
*                                                      filename       = <ls_request>-filename
*                                                      description    = <ls_request>-description
*                                                      mimetype       = <ls_request>-mimetype
*                                                      uuid           = VALUE #( lt_signature[ 1 ]-doc_id+10 OPTIONAL ) ) ).
*      ENDIF.
    ENDLOOP.

    zcl_api_utils=>process_response( EXPORTING it_errors = lt_errors[]
                                               ir_data   = REF #( lt_response[] )
                                     CHANGING  cr_response = me->mo_response ).

  ENDMETHOD.


  METHOD if_rest_resource~put.
    me->if_rest_resource~post( io_entity = io_entity ).
  ENDMETHOD.


  METHOD read_attachments.
    DATA: "lv_content    type xstring,
      lt_content    TYPE STANDARD TABLE OF bapiconten,
      lt_sign       TYPE STANDARD TABLE OF bapisignat,
      lt_components TYPE STANDARD TABLE OF bapicompon,
      lt_comps      TYPE STANDARD TABLE OF bapicompon.

    IF iv_task IS NOT INITIAL.
      DATA(lv_objectkey) = CONV sbdst_object_key( shift_left( val = iv_task sub = '0' ) ).
    ENDIF.

    CLEAR mt_signature[].

    cl_bds_document_set=>get_with_table( EXPORTING classname  = 'ZEHS'
                                                   classtype  = 'OT'
                                                   object_key = lv_objectkey
                                         CHANGING  content    = lt_content[]
                                                   signature  = mt_signature[]
                                                   components = lt_components[] ).



    IF iv_task IS INITIAL AND iv_file IS INITIAL AND iv_location IS INITIAL AND iv_point IS INITIAL AND iv_uuid IS INITIAL.
      LOOP AT lt_components[] ASSIGNING FIELD-SYMBOL(<ls_component>).

        APPEND VALUE #( task_id        = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'TASK' )
                        location_id    = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'LOCATION' )
                        cntrl_point_id = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'CONTROL_POINT' )
                        filename       = <ls_component>-comp_id
                        description    = read_property( iv_document = <ls_component>-doc_count
                                                        iv_key      = 'DESCRIPTION' )
                        mimetype       = <ls_component>-mimetype ) TO rt_attachments[].
      ENDLOOP.

      RETURN.
    ELSE.
      LOOP AT lt_components[] ASSIGNING <ls_component>.
        IF iv_file IS NOT INITIAL.
          CHECK <ls_component>-comp_id = iv_file.
        ENDIF.

        IF iv_has_task_in_key = 'X' AND iv_task IS NOT INITIAL.
          CHECK read_property( iv_document = <ls_component>-doc_count
                               iv_property = 'TASK' ) = iv_task.
        ENDIF.

        IF iv_location IS NOT INITIAL.
          CHECK read_property( iv_document = <ls_component>-doc_count
                               iv_property = 'LOCATION' ) = iv_location.
        ENDIF.

        IF iv_point IS NOT INITIAL.
          CHECK read_property( iv_document = <ls_component>-doc_count
                               iv_property = 'CONTROL_POINT' ) = iv_point.
        ENDIF.

        lt_sign[] = VALUE #( FOR <ls_signature> IN mt_signature[]
                             WHERE ( doc_count = <ls_component>-doc_count )
                             ( CORRESPONDING #( <ls_signature> ) ) ).

        IF iv_uuid IS NOT INITIAL.
          DELETE lt_sign[] WHERE doc_id NP |* { iv_uuid }|.
          CHECK lt_sign[] IS NOT INITIAL.
        ENDIF.

        CLEAR: lt_content[].
        cl_bds_document_set=>get_with_table( EXPORTING classname  = 'ZEHS'
                                                       classtype  = 'OT'
                                             CHANGING  content    = lt_content[]
                                                       signature  = lt_sign[]
                                                       components = lt_comps[] ).

*        LOOP AT lt_content[] ASSIGNING FIELD-SYMBOL(<ls_content>).
*          lv_content = |{ lv_content }{ <ls_content>-line }|.
*        ENDLOOP.
*        DATA(lv_content) = REDUCE #( INIT lv_value TYPE xstring
*                                     FOR <ls_line> IN lt_content[]
*                                     NEXT lv_value = lv_value && <ls_line>-line ).

        DATA(lv_content) = cl_bcs_convert=>xtab_to_xstring( lt_content[] ).
        lv_content =  lv_content(<ls_component>-comp_size).

        APPEND VALUE #( task_id        = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'TASK' )
                        location_id    = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'LOCATION' )
                        cntrl_point_id = read_property( iv_document = <ls_component>-doc_count
                                                        iv_property = 'CONTROL_POINT' )
                        filename       = <ls_component>-comp_id
                        description    = read_property( iv_document = <ls_component>-doc_count
                                                        iv_key      = 'DESCRIPTION' )
                        mimetype       = <ls_component>-mimetype
                        uuid           = lt_sign[ 1 ]-doc_id+10
                        content        = SWITCH #( iv_no_content WHEN abap_true THEN ''
                                                                 ELSE read_property( iv_document = <ls_component>-doc_count
                                                                                     iv_property = 'PREFIX' ) && cl_http_utility=>encode_x_base64( lv_content ) )
                        doc_id         = <ls_component>-doc_count ) TO rt_attachments[].
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


  METHOD read_property.
    LOOP AT mt_signature[] ASSIGNING FIELD-SYMBOL(<ls_signature>) WHERE doc_count  = iv_document
                                                                    AND prop_name  = iv_key.
      IF iv_property IS SUPPLIED.
        CHECK <ls_signature>-prop_value CP |{ iv_property }=*|.
        rv_value = shift_left( val = <ls_signature>-prop_value places = strlen( iv_property ) + 1 ).
        EXIT.
      ENDIF.

      rv_value = <ls_signature>-prop_value.
      EXIT.
    ENDLOOP.
  ENDMETHOD.


  METHOD store_attachments.
    DATA: lv_length     TYPE i,
          lt_content    TYPE STANDARD TABLE OF bapiconten,
          lt_request    TYPE STANDARD TABLE OF mty_s_attachment,
          lt_signature  TYPE STANDARD TABLE OF bapisignat,
          lt_components TYPE STANDARD TABLE OF bapicompon.

    "Обрезать data:image/jpeg;base64,:
    FIND REGEX '(^data:(\S+);base64,)(.+)$' IN is_attachment-content SUBMATCHES DATA(lv_prefix)
                                                                                DATA(lv_mimetype)
                                                                                is_attachment-content.
*    Если sy-subrc = 0, префикс отрежется и сложится в lv_prefix.

    FIND REGEX '^image/(\S+)' IN lv_mimetype SUBMATCHES DATA(lv_imageclass).

    DATA(lv_xstring) = cl_http_utility=>decode_x_base64( is_attachment-content ).
    cl_bcs_convert=>xstring_to_xtab( EXPORTING iv_xstring = lv_xstring
                                     IMPORTING et_xtab    = lt_content[]  ).

    lt_signature[] = VALUE #( doc_count = 1
                              comp_count = 1
                              ( prop_name = 'BDS_DOCUMENTTYPE'  prop_value = 'BDS_IMAGE')
                              ( prop_name = 'BDS_DOCUMENTCLASS' prop_value = COND #( WHEN lv_imageclass IS INITIAL
                                                                                     THEN 'JPG'
                                                                                     ELSE to_upper( lv_imageclass ) ) )
                              ( prop_name = 'DESCRIPTION'       prop_value = is_attachment-description )
                              ( prop_name = 'BDS_KEYWORD'       prop_value = |TASK={ is_attachment-task_id }| )
                              ( prop_name = 'BDS_KEYWORD'       prop_value = |LOCATION={ is_attachment-location_id }| )
                              ( prop_name = 'BDS_KEYWORD'       prop_value = |CONTROL_POINT={ is_attachment-cntrl_point_id }| )
                              ( prop_name = 'BDS_KEYWORD'       prop_value = |PREFIX={ lv_prefix }| ) ).

    DATA(lv_objectkey) = CONV sbdst_object_key( is_attachment-task_id ).

    cl_bds_document_set=>create_with_table( EXPORTING classname  = 'ZEHS'
                                                      classtype  = 'OT'
                                                      components = VALUE #( ( doc_count  = 1
                                                                              comp_count = 1
                                                                              comp_id    = is_attachment-filename
                                                                              mimetype   = COND #( WHEN is_attachment-mimetype IS INITIAL
                                                                                                   THEN lv_mimetype
                                                                                                   ELSE is_attachment-mimetype )
                                                                              comp_size  = xstrlen( lv_xstring ) ) )
                                                      content    = lt_content[]
                                            CHANGING  signature  = lt_signature[]
                                                      object_key = lv_objectkey
                                            EXCEPTIONS internal_error  = 1
                                                       error_kpro      = 2
                                                       parameter_error = 3
                                                       not_authorized  = 4
                                                       not_allowed     = 5
                                                       nothing_found   = 6
                                                       OTHERS          = 7 ).
    IF sy-subrc <> 0.
      ct_errors[] = VALUE #( BASE ct_errors[] ( key = zcl_api_utils=>gc_err_create
                                                value = SWITCH #( sy-subrc WHEN 1 THEN 'INTERNAL ERROR'
                                                                           WHEN 2 THEN 'ERROR KPRO'
                                                                           WHEN 3 THEN 'PARAMETER ERROR'
                                                                           WHEN 4 THEN 'NOT AUTHORIZED'
                                                                           WHEN 5 THEN 'NOT ALLOWED'
                                                                           WHEN 6 THEN 'NOTHING FOUND'
                                                                           WHEN 7 THEN 'OTHER ERROR' ) ) ).
    ELSE.
      ev_uuid = VALUE #( lt_signature[ 1 ]-doc_id+10 OPTIONAL ).
      rv_ok   = abap_true.
    ENDIF.
  ENDMETHOD.
ENDCLASS.