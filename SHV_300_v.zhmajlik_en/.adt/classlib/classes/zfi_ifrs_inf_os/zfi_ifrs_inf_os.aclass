CLASS zfi_ifrs_inf_os DEFINITION
    PUBLIC FINAL CREATE PUBLIC.

  PUBLIC SECTION.
    INTERFACES: if_amdp_marker_hdb.

    TYPES:
      BEGIN OF ty_s_retirement_detail,
        bukrs          TYPE anla-bukrs,
        anln1          TYPE anla-anln1,
        anln2          TYPE anla-anln2,
        invnr          TYPE zfiaa_price_hist-invnr,
        retire_date    TYPE anek-budat,
        retire_sum     TYPE anep-anbtr,
        retire_nachisl TYPE anep-nafab,
        retire_spisan  TYPE anep-anbtr,
      END OF ty_s_retirement_detail,
      tt_retirement_detail TYPE STANDARD TABLE OF ty_s_retirement_detail,
      BEGIN OF ty_s_data_new,
        bukrs                TYPE anla-bukrs,                      "01.БЕ
        ktansw_01            TYPE t095-ktansw,                     "02.Счет учета по БСБУ
        ktansw_50            TYPE t095-ktansw,                     "03.Счет учета по МСФО
        anlkl                TYPE anla-anlkl,                      "04.Класс ОС
        anln1                TYPE anla-anln1,                      "05.Основное средство
        anln2                TYPE anla-anln2,                      "06.Субномер
        invnr                TYPE anla-invnr,                      "07.Инвентарный номер
        txtf1                TYPE zafull-txtf1,                    "08.Наименование объекта
*        grmsfo               TYPE zanlu-grmsfo,                   "09.Группа ОС (НМА) по МСФО
        grmsfo               TYPE zanlu_ifrs-grmsfo,               "09.Группа ОС (НМА) по МСФО  "AK_BADYLEVIC #25832 Изменить «Группу ОС, НМА по МСФО» в карточках ОС
        afabe523             TYPE anlc-afabe,                      "10.Область оценки 52/53
        expdate              TYPE zanlu-expdate,                   "11.Дата начала эксплуатации по МСФО
        ipc                  TYPE dec1_4,                          "12.Индекс CPI
        pst_in_nks_p         TYPE anep-anbtr,                      "13.Сумма затрат НКС на начало года
        inf_pst_in_nks_c     TYPE anep-anbtr,                      "14.Сумма затрат НКС на начало года с учетом инфлирования на отчетную дату
        pst_in_nks_c         TYPE anep-anbtr,                      "15.Сумма затрат НКС за текущий год
        inf_pst_in_nks_p     TYPE anep-anbtr,                      "16.Сумма затрат НКС за текущий год с учетом инфлирования на отчетную дату
        inf_pst_in_nks_n     TYPE anep-anbtr,                      "17.Сумма инфлирования затрат НКС на начало года
        inf_pst_in_nks_t     TYPE anep-anbtr,                      "18.Сумма инфлирования затрат НКС за текущий год
        sum_pst_in_nks       TYPE anep-anbtr,                      "49.∑ пров в SAP затрат НКС за отч месяц
        sum_inf_pst_in_nks_n TYPE anep-anbtr,                      "50.∑ пров в SAP инфл затрат НКС НГ за отч месяц
        sum_inf_pst_in_nks_t TYPE anep-anbtr,                      "51.∑ пров в SAP инфл затрат НКС ТГ за отч месяц
        price_first          TYPE anep-anbtr,                      "19.Стоимость подлежащая инфлированию за отчетный месяц
        amort_na_y_nach      TYPE anep-anbtr,                      "20.Накопленная амортизация на начало года до инфлирования за отчетный месяц
        amort_nach_year      TYPE anep-anbtr,                      "21.Начисленная амортизация текущего года по 52/53 областям оценки
        fall_nach_year       TYPE anep-anbtr,                      "22.Начисленное обесценение до инфлирования за отчетный период
        sum_inf_pst_month    TYPE anep-anbtr,                      "23.Сумма проведенного в SAP инфлирования ПСт за отчетный месяц
        sum_inf_amort_month  TYPE anep-anbtr,                      "24.Сумма проведенного в SAP инфлирования амортизации на НГ за отчетный месяц
        sum_p_inf_amort_m    TYPE anep-anbtr,                      "25.Сумма проведенного в SAP инфлирования амортизации ТГ за отчетный месяц
        sum_p_inf_fall_m     TYPE anep-anbtr,                      "26.Сумма проведенного в SAP инфлирования обесценения за отчетный месяц
        sum_inf_pst          TYPE anep-anbtr,                      "27.Планируемая сумма инфлирования ПСт за отчетный месяц
        sum_inf_amort_ng     TYPE anep-anbtr,                      "28.Планируемая сумма инфлирования амортизации НГ за отчетный месяц
        sum_inf_amort_om     TYPE anep-anbtr,                      "29.Планируемая сумма инфлирования текущей амортизации ТГ за отчетный месяц
        sum_inf_fall_om      TYPE anep-anbtr,                      "30.Планируемая сумма инфлирования обесценения за отчетный месяц
        pst_no_move_from_inf TYPE anep-anbtr,                      "31.#Стоимость после предыдущего инфлирования
        amort_no_move_ng_inf TYPE anep-anbtr,                      "32.#Амортизации НГ после предыдущего инфлирования
        amort_no_move_tg_inf TYPE anep-anbtr,                      "33.#Амортизации ТГ после предыдущего инфлирования
        move_pst_from_inf    TYPE anep-anbtr,                      "34.#Поступление ПСт после предыдущего инфлирования
        move_amort_ng_inf    TYPE anep-anbtr,                      "35.#Поступление амортизации НГ после предыдущего инфлирования
        move_amort_tg_inf    TYPE anep-anbtr,                      "36.#Поступление амортизации ТГ после предыдущего инфлирования
        inf_move_pst_om      TYPE anep-anbtr,                      "37.#Инфлирования поступления ПСт за отчетный месяц
        inf_move_amort_ng    TYPE anep-anbtr,                      "38.#Инфлирования поступления амортизации НГ за отчетный месяц
        inf_move_amort_tg    TYPE anep-anbtr,                      "39.#Инфлирования поступления амортизации ТГ за отчетный месяц
        ret_pst_from_inf     TYPE anep-anbtr,                      "40.#Выбытие ПСт после предыдущего инфлирования
        ret_amort_ng_inf     TYPE anep-anbtr,                      "41.#Выбытие амортизации НГ после предыдущего инфлирования
        ret_amort_tg_inf     TYPE anep-anbtr,                      "42.#Выбытие амортизации ТГ после предыдущего инфлирования
        inf_ret_pst_om       TYPE anep-anbtr,                      "43.#Инфлирования выбытия ПСт за отчетный месяц
        inf_ret_amort_ng     TYPE anep-anbtr,                      "44.#Инфлирования выбытия амортизации НГ за отчетный месяц
        inf_ret_amort_tg     TYPE anep-anbtr,                      "45.#Инфлирования выбытия амортизации ТГ за отчетный месяц
        budat_last           type budat,
        status               TYPE char01,                          "46.Статус
        status_aa            TYPE char255,                         "47.Номер FI документа
        status_fi            TYPE char255,                         "48.Ошибка
        " Вспомогательные данные
        bukrs_waers          TYPE waers,                           "Код валюты БЕ
        awtyp                TYPE awtyp,                           "Ссылочная операция
        aworg                TYPE aworg,                           "Ссылочные организационные единицы
        awref                TYPE awref,                           "Номер ссылочного документа
        lnran                TYPE lnran,                           "Текущий номер отдельной позиции ОснСр в финансовом году
        awsys                TYPE awsys,                           "Логическая система исходного документа
        gjahr                TYPE gjahr,                           "Финансовый год
        deakt                TYPE budat,                           "Дата выбытия
      END OF ty_s_data_new,
      tt_data_new TYPE STANDARD TABLE OF ty_s_data_new,
      tt_ifrs_wbs TYPE TABLE OF zt_ifrs_wbs1,
      BEGIN OF ty_s_hist_amount_detail,
        bukrs    TYPE anla-bukrs,
        anln1    TYPE anla-anln1,
        anln2    TYPE anla-anln2,
        invnr    TYPE zfiaa_price_hist-invnr,
        datum    TYPE zfiaa_price_hist-budat,
        typez    TYPE zfiaa_price_hist-typez,
        active   TYPE zfiaa_price_hist-inter,
        amount   TYPE zfiaa_price_hist-anbtr,
        inf_date TYPE zfiaa_price_hist-budat,
        inf_sum  TYPE zfiaa_price_hist-anbtr,
      END OF ty_s_hist_amount_detail,
      tt_hist_amount_detail TYPE STANDARD TABLE OF ty_s_hist_amount_detail,

      BEGIN OF ty_s_invnr,
        invnr       TYPE zfiaa_price_hist-invnr,
        flag        TYPE char01,
        bukrs       TYPE anla-bukrs,                      "1. БЕ
        anlkl       TYPE anla-anlkl,                      "2. Класс ОС
        anln1       TYPE anla-anln1,                      "3. Основное средство
        anln2       TYPE anla-anln2,                      "4. Субномер
        hist_amount TYPE zfiaa_price_hist-anbtr,          "7. Историческая стоимость
      END OF ty_s_invnr,
      tt_invnr TYPE SORTED TABLE OF ty_s_invnr WITH NON-UNIQUE KEY invnr,


      BEGIN OF ty_s_test,
        step   TYPE d,
        timing TYPE p LENGTH 10 DECIMALS 6,
      END OF ty_s_test,
      BEGIN OF ty_s_os,
        bukrs TYPE anla-bukrs,
        anln1 TYPE anla-anln1,
        anln2 TYPE anla-anln2,
        invnr TYPE zfiaa_price_hist-invnr,
      END OF ty_s_os,
      tt_test TYPE STANDARD TABLE OF ty_s_test,
      tt_os   TYPE STANDARD TABLE OF ty_s_os.

    CLASS-METHODS:
      check_storno
        IMPORTING
          VALUE(ev_bdate) TYPE dats
        CHANGING
          VALUE(ct_invnr) TYPE tt_invnr,
      storno
        IMPORTING
          VALUE(ev_adate) TYPE dats
          VALUE(ev_bdate) TYPE dats
        CHANGING
          VALUE(ct_invnr) TYPE tt_invnr,
      check_post
        IMPORTING
          VALUE(ev_bdate) TYPE dats
        CHANGING
          VALUE(ct_invnr) TYPE tt_invnr,
      post
        IMPORTING
          VALUE(ev_adate) TYPE dats
          VALUE(ev_bdate) TYPE dats
        CHANGING
          VALUE(ct_invnr) TYPE tt_invnr,
      get_hist_amount_detail
        IMPORTING
          VALUE(et_os)     TYPE tt_os
          VALUE(ev_adate)  TYPE dats
          VALUE(ev_bdate)  TYPE dats
        EXPORTING
          VALUE(it_result) TYPE tt_hist_amount_detail,
      get_retirement_detail
        IMPORTING
          VALUE(et_os)     TYPE tt_os
          VALUE(ev_adate)  TYPE dats
          VALUE(ev_bdate)  TYPE dats
        EXPORTING
          VALUE(it_result) TYPE tt_retirement_detail,
      get_data
        IMPORTING
          VALUE(et_update)     TYPE tt_invnr
          VALUE(ev_where)      TYPE string
          VALUE(ev_adate)      TYPE dats
          VALUE(ev_bdate)      TYPE dats
          VALUE(et_ifrs_wbs_c) TYPE tt_ifrs_wbs
*          VALUE(et_ifrs_wbs_p) TYPE tt_ifrs_wbs
        EXPORTING
          VALUE(it_result_new) TYPE tt_data_new.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZFI_IFRS_INF_OS IMPLEMENTATION.


  METHOD check_post BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT
                  USING
                  faav_anep
                  zfi_ifrs_inf_t
                  .
    --проверка возможности инфлирования
    ct_invnr =
    SELECT
        hist.invnr,
        CASE
            WHEN EXISTS( SELECT *
                            FROM faav_anep AS anep
                            WHERE anep.mandt = SESSION_CONTEXT('CLIENT')
                              AND anep.gjahr = EXTRACT (YEAR FROM :ev_bdate)
                              AND anep.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T )
                              AND anep.bzdat = :ev_bdate
                              AND anep.lnsan = 0
                              AND anep.bukrs = hist.bukrs
                              AND anep.anln1 = hist.anln1
                              AND anep.anln2 = hist.anln2 ) THEN 'I' --за текущий период уже проинфлировано
            ELSE ''
        END AS flag,
        hist.bukrs,
        hist.anlkl,
        hist.anln1,
        hist.anln2,
        hist.hist_amount
      FROM :ct_invnr AS hist;
  ENDMETHOD.


  METHOD check_storno BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT
                  USING
                  faav_anep
                  zfi_ifrs_inf_t
                  .
    --Проверка возможности сторнирования
    ct_invnr =
    SELECT
        invnr,
        CASE
            WHEN NOT EXISTS( SELECT *
                            FROM faav_anep AS anep
                            WHERE anep.mandt = SESSION_CONTEXT('CLIENT')
                              AND anep.gjahr = EXTRACT (YEAR FROM :ev_bdate)
                              AND anep.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T )
                              AND anep.bzdat = :ev_bdate
                              AND anep.lnsan = 0
                              AND anep.bukrs = os.bukrs
                              AND anep.anln1 = os.anln1
                              AND anep.anln2 = os.anln2 ) THEN 'S' --на данный период нет проведённого документа
            ELSE ''
        END AS flag,
        os.bukrs,
        os.anlkl,
        os.anln1,
        os.anln2,
        os.hist_amount
      FROM :ct_invnr AS os
      WHERE flag <> 'X';
  ENDMETHOD.


  METHOD GET_DATA BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
                  USING T001 T095 ANLA FAAV_ANLC FAAV_ANEP FAAV_ANEK FAAV_ANEA ACDOCA ZFI_IFRS_INF_T
                    ZCL_FI_IFRS_CPI=>ZT_CPI_FIAA_00 ZCL_FI_IFRS_CPI=>ZT_CPI_FIAA_02
                    PRPS ZAFULL ZANLU ZCL_FI_IFRS_CPI=>ZT_FI_IFRS_CPI_REL
                    ZANLU_IFRS.  --AK_BADYLEVIC #25832 Изменить «Группу ОС, НМА по МСФО» в карточках ОС


    DECLARE I INT;
    DECLARE LV_PREV_ADATE CHAR(8);
    DECLARE LV_PREV_BDATE CHAR(8);
    DECLARE LV_INIT_ANLC NUMBER;
    DECLARE LV_GJAHR CHAR(4);
    DECLARE LV_PERIOD CHAR(3);
    DECLARE LV_POPER CHAR(3) := '0' || SUBSTRING(:EV_BDATE,5,2);
    DECLARE LV_SDATE STRING := LEFT(:EV_ADATE,4) || '0101';
    DECLARE LV_BDATE STRING := LEFT(:EV_ADATE,4) || '1231';
    DECLARE LV_FISCYEARPER NVARCHAR(7);
    DECLARE LV_CPI FLOAT;
    DECLARE LV_CPI_N DEC;
    DECLARE LT_CPI1 DEC;
    DECLARE LT_CPI2 DEC;

    LV_GJAHR = EXTRACT (YEAR FROM :EV_BDATE);
    LV_PERIOD = '0' || SUBSTRING(:EV_BDATE,5,2);
    LV_PREV_ADATE = TO_DATS(LAST_DAY(ADD_MONTHS(:EV_ADATE,-1)));
    LV_PREV_BDATE = TO_DATS(LAST_DAY(ADD_MONTHS(:EV_BDATE,-1)));

    LV_FISCYEARPER = :LV_GJAHR * 1000 + :LV_PERIOD;

    LT_OS_FILTERED_NEW =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLKL,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.INVNR        AS INVNR,
              T095_01.KTANSW    AS KTANSW_01,
              T095_50.KTANSW    AS KTANSW_50,
              ZAFULL.TXTF1      AS TXTF1,
              ZANLU_IFRS.GRMSFO AS GRMSFO,
              ZANLU.EXPDATE     AS EXPDATE,
              ANLC.AFABE        AS AFABE523,
              ''                AS OBJNR,
              ANLA.DEAKT        AS DEAKT
          FROM ANLA AS ANLA
            INNER JOIN T001 AS T001 ON  T001.BUKRS = ANLA.BUKRS
                                    AND T001.MANDT = SESSION_CONTEXT('CLIENT')
            LEFT JOIN T095 AS T095_01 ON T095_01.KTOPL = T001.KTOPL
                                     AND T095_01.MANDT = SESSION_CONTEXT('CLIENT')
                                     AND T095_01.KTOGR = ANLA.KTOGR
                                     AND T095_01.AFABE = '01'
            LEFT JOIN T095 AS T095_50 ON T095_50.KTOPL = T001.KTOPL
                                     AND T095_50.MANDT = SESSION_CONTEXT('CLIENT')
                                     AND T095_50.KTOGR = ANLA.KTOGR
                                     AND T095_50.AFABE = '50'
            LEFT JOIN ZAFULL AS ZAFULL ON ZAFULL.BUKRS =  ANLA.BUKRS
                                      AND ZAFULL.ANLN1 = ANLA.ANLN1
                                      AND ZAFULL.ANLN2 = ANLA.ANLN2
            LEFT JOIN ZANLU AS ZANLU ON ZANLU.INVNR = ANLA.INVNR
                                    AND ZANLU.MANDT = SESSION_CONTEXT('CLIENT')
*{          AK_BADYLEVIC #25832 Изменить «Группу ОС, НМА по МСФО» в карточках ОС
            LEFT JOIN ZANLU_IFRS AS ZANLU_IFRS ON ZANLU_IFRS.MANDT = ANLA.MANDT
                                              AND ZANLU_IFRS.BUKRS = ANLA.BUKRS
                                              AND ZANLU_IFRS.ANLN1 = ANLA.ANLN1
                                              AND ZANLU_IFRS.ANLN2 = ANLA.ANLN2
*}          AK_BADYLEVIC #25832 Изменить «Группу ОС, НМА по МСФО» в карточках ОС
            INNER JOIN FAAV_ANLC AS ANLC ON ANLC.MANDT = ANLA.MANDT
                                        AND ANLC.BUKRS = ANLA.BUKRS
                                        AND ANLC.ANLN1 = ANLA.ANLN1
                                        AND ANLC.ANLN2 = ANLA.ANLN2
                                        AND ANLC.GJAHR = :LV_GJAHR
                                        AND ANLC.AFABE BETWEEN '52' AND '53'
          WHERE ANLA.MANDT = SESSION_CONTEXT('CLIENT'); -- AND ANLA.DEAKT = '00000000'

    LT_OS_FILTERED_NEW = APPLY_FILTER (:LT_OS_FILTERED_NEW, :EV_WHERE);
    IF IS_EMPTY ( :LT_OS_FILTERED_NEW ) THEN RETURN;
    END IF;

-- НАХОДИМ НОМЕР СПП PRPS.POSID
    LT_POSID  =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              PRPS.OBJNR
          FROM :LT_OS_FILTERED_NEW AS ANLA
             LEFT JOIN ACDOCA AS ACDOCA1 ON ACDOCA1.RCLNT  = ANLA.MANDT
                                        AND ACDOCA1.RBUKRS = ANLA.BUKRS
                                        AND ACDOCA1.ANLN1  = ANLA.ANLN1
                                        AND ACDOCA1.ANLN2  = ANLA.ANLN2
                                        AND ACDOCA1.GJAHR  = :LV_GJAHR
                                        AND ACDOCA1.AFABE  = 50
                                        AND ( ACDOCA1.GKONT LIKE 'M08%' OR ACDOCA1.GKONT LIKE 'M01%' )
                                        AND ( ACDOCA1.RACCT LIKE 'M01%' OR ACDOCA1.RACCT LIKE 'M04%' )
                                        AND ACDOCA1.POPER  = :LV_PERIOD
                                        AND ACDOCA1.XREVERSING = ''
                                        AND ACDOCA1.XREVERSED  = ''
             LEFT JOIN PRPS AS PRPS ON PRPS.MANDT = ANLA.MANDT
                                   AND PRPS.OBJNR = ACDOCA1.PAROB1

          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          ANLA.AFABE523,
          PRPS.OBJNR;

    LT_CPI = SELECT * FROM "ZCL_FI_IFRS_CPI=>ZT_FI_IFRS_CPI_REL"(
                                      P_PERIOD => :LV_FISCYEARPER,
                                      P_CLNT =>  SESSION_CONTEXT('CLIENT') );


    SELECT CPI.ZCPICUMM INTO LT_CPI1 FROM :LT_CPI AS CPI
      WHERE CPI.RCLNT = SESSION_CONTEXT('CLIENT')
        AND CPI.GJAHR = :LV_GJAHR
        AND CPI.POPER = :LV_POPER;

    SELECT CPI.ZCPICUMM_PREV INTO LT_CPI2 FROM :LT_CPI AS CPI
      WHERE CPI.RCLNT = SESSION_CONTEXT('CLIENT')
        AND CPI.GJAHR = :LV_GJAHR
        AND CPI.POPER = '001';

    IF  :LT_CPI2 IS NOT NULL THEN
      LV_CPI_N := :LT_CPI1 / :LT_CPI2;
    ELSE LV_CPI_N := 1;
    END IF;

-- ОПРЕДЕЛЯЕМ ЗАТРАТЫ ТЕКУЩЕГО ГОДА
    LT_OS_HSL_C =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              MAX( CASE WHEN ANLA.AFABE523 = 52 AND IFRS_WBS_C.GJAHR = :LV_GJAHR  THEN IFRS_WBS_C.CPI END )                                                                      AS IPC,
              --∑ ЗАТРАТ НКС НА НАЧАЛО ГОДА
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 AND LEFT(IFRS_WBS_C.DATE_INFL,4) < :LV_GJAHR THEN CAST (IFRS_WBS_C.HSL AS DEC) END ),2 ),0.00 )                   AS PST_IN_NKS_P,
              --∑ ЗАТРАТ НКС ЗА ТЕК. ГОД
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 AND LEFT(IFRS_WBS_C.DATE_INFL,4) = :LV_GJAHR  THEN CAST (IFRS_WBS_C.HSL AS DEC) END ),2 ),0.00 )                  AS PST_IN_NKS_C,
              --∑ ЗАТРАТ НКС НА ТЕК. ГОД
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 THEN CAST (IFRS_WBS_C.HSL AS DEC) END ),2 ),0.00 )                                                                AS PST_IN_NKS_C_F,
              --∑ ЗАТР НКС НА НАЧГОД С УЧЕТИНФЛНАОТЧДАТУ
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 AND LEFT(IFRS_WBS_C.DATE_INFL,4) < :LV_GJAHR THEN CAST (IFRS_WBS_C.HSL_INFL AS DEC) / :LV_CPI_N  END ),2 ),0.00 ) AS INF_PST_IN_NKS_P,
              --ОБЩАЯ ∑ ИНФЛ. ЗАТРАТ НКС ЗА ТЕК. ГОД
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 AND LEFT(IFRS_WBS_C.DATE_INFL,4) = :LV_GJAHR THEN CAST (IFRS_WBS_C.HSL_INFL AS DEC) END ),2 ),0.00 )              AS INF_PST_IN_NKS_C,
              --ОБЩАЯ ∑ ИНФЛ. ЗАТРАТ НКС НА ТЕК. ГОД
              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 THEN CAST (IFRS_WBS_C.HSL_INFL AS DEC) END ),2 ),0.00 )                                                           AS INF_PST_IN_NKS_C_F
          FROM :LT_POSID AS ANLA
             LEFT JOIN :ET_IFRS_WBS_C AS IFRS_WBS_C ON IFRS_WBS_C.OBJNR  = ANLA.OBJNR
                                                   AND IFRS_WBS_C.RBUKRS = ANLA.BUKRS
                                                   AND ( IFRS_WBS_C.RACCT LIKE '308%100' OR IFRS_WBS_C.RACCT LIKE 'M308%' )
                                                   AND IFRS_WBS_C.RACCT <> 'M308808510'           -- AK_BUTVILOVSK #24465 Инфлирование, виды движения МР3 и МР5
                                                   AND IFRS_WBS_C.XREVERSING = ''
                                                   AND IFRS_WBS_C.XREVERSED  = ''

          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          ANLA.AFABE523;

-- ОПРЕДЕЛЯЕМ ВСЕ ЗАТРАТЫ НА 12 ПЕРИОД ПРОШЛОГО ЗА ОТЧЕТНЫМ ГОДА.
*    LT_OS_HSL_P =
*          SELECT
*              ANLA.MANDT,
*              ANLA.BUKRS,
*              ANLA.ANLN1,
*              ANLA.ANLN2,
*              ANLA.AFABE523,
*              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 THEN CAST (IFRS_WBS_P.HSL AS DEC) END ),2 ),0.00 )      AS PST_IN_NKS_P,                 --∑ затрат НКС на начало года
*              IFNULL( ROUND( SUM( CASE WHEN ANLA.AFABE523 = 52 THEN CAST (IFRS_WBS_P.HSL_INFL AS DEC)  END ),2 ),0.00 ) AS INF_PST_IN_NKS_P              --∑ затр НКС на НачГод с УчетИнфлНаОтчДату
*           FROM :LT_POSID  AS ANLA
*              LEFT JOIN :ET_IFRS_WBS_P AS IFRS_WBS_P ON IFRS_WBS_P.OBJNR  = ANLA.OBJNR
*                                                    AND IFRS_WBS_P.RBUKRS = ANLA.BUKRS
*                                                    AND ( IFRS_WBS_P.RACCT LIKE '308%100' OR IFRS_WBS_P.RACCT LIKE 'M308%' )
*                                                    AND IFRS_WBS_P.XREVERSING = ''
*                                                    AND IFRS_WBS_P.XREVERSED  = ''
*
*          GROUP BY
*          ANLA.MANDT,
*          ANLA.BUKRS,
*          ANLA.ANLN1,
*          ANLA.ANLN2,
*          ANLA.AFABE523;

-- ПРОВЕДЕННОЕ ИНФЛИРОВАНИЕ
    LT_OS_SUM_P_INF =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                              ( 'IP','IN','MP','MN') )                            --,'PP','PN','CP','CN'
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEP.ANBTR
                      ELSE 0 END ),0.00 )                                                                    AS SUM_INF_PST_MONTH,   -- ∑ ПРОВЕД ИНФЛ ПСТ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                               ( 'IP','IN','MP','MN') )                          -- ,'PP','PN','CP','CN'
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :LV_BDATE
                      THEN ANEP.ANBTR
                      ELSE 0 END ),0.00 )                                                                    AS SUM_INF_PST_GJAHR,   -- ∑ ПРОВЕД ИНФЛ ПСТ ЗА ПЕРИОД С ОТЧ МЕСЯЦА ДО КОНЦА ГОДА
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                              ( 'IP','IN','MP','MN','PP','PN','CP','CN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEA.NAFAV
                      ELSE 0 END ),0.00 )                                                                    AS SUM_INF_AMORT_MONTH, -- ∑ ПРОВЕД ИНФЛ АМОРТ ЗА ОТЧ МЕСЯЦ
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                              ( 'IP','IN','MP','MN','PP','PN','CP','CN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :LV_BDATE
                      THEN ANEA.NAFAV
                      ELSE 0 END ),0.00 )                                                                    AS SUM_INF_AMORT_GJAHR, -- ∑ ПРОВЕД ИНФЛ АМОРТ ЗА ПЕРИОД С ОТЧ МЕСЯЦА ДО КОНЦА ГОДА
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                              ( 'IP','IN','MP','MN','PP','PN','CP','CN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEA.NAFAL
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_AMORT_M,   -- ∑ ПРОВЕД ИНФЛ ТЕК АМОРТ ЗА ОТЧ МЕСЯЦ
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                              ( 'IP','IN','MP','MN','PP','PN','CP','CN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :LV_BDATE
                      THEN ANEA.NAFAL
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_AMORT_G,   -- ∑ ПРОВЕД ИНФЛ ТЕК АМОРТ ЗА ПЕРИОД С ОТЧ МЕСЯЦА ДО КОНЦА ГОДА
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                                                            ( 'IP','IN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEA.SAFAV
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_FALL_M,    -- ∑ ПРОВЕД ИНФЛ ОБЕСЦЕНЕНИЯ ЗА ОТЧ МЕСЯЦ
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                                                            ( 'IP','IN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :LV_BDATE
                      THEN ANEA.SAFAV
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_FALL_G,    -- ∑ ПРОВЕД ИНФЛ ОБЕСЦЕНЕНИЯ ЗА ПЕРИОД С ОТЧ МЕСЯЦА ДО КОНЦА ГОДА
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                                                            ( 'AU','AN' ) )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEP.ANBTR
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_NKS_IN,        -- ∑ ВВОД НКС (52 ОБЛАСТЬ)
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                                                            ( 'PP','PN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEP.ANBTR
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_NKS_NG,    -- ∑ ИНФЛИРОВАНИЕ ВВОДА НКС НА НАЧ.ГОДА
              IFNULL( SUM( CASE WHEN ANEP.BWASL IN ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN
                                                                                            ( 'CP','CN') )
                                               AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
                      THEN ANEP.ANBTR
                      ELSE 0 END ),0.00 )                                                                    AS SUM_P_INF_NKS_TG     -- ∑ ИНФЛИРОВАНИЕ ВВОДА НКС ЗА ТЕК.ГОД
          FROM :LT_OS_FILTERED_NEW AS ANLA
             LEFT JOIN FAAV_ANEP AS ANEP ON ANEP.MANDT = ANLA.MANDT
                                        AND ANEP.BUKRS = ANLA.BUKRS
                                        AND ANEP.ANLN1 = ANLA.ANLN1
                                        AND ANEP.ANLN2 = ANLA.ANLN2
                                        AND ANEP.GJAHR = :LV_GJAHR
                                        AND ANEP.AFABE = ANLA.AFABE523
             LEFT JOIN FAAV_ANEA AS ANEA ON ANEA.MANDT = ANEP.MANDT
                                        AND ANEA.BUKRS = ANEP.BUKRS
                                        AND ANEA.ANLN1 = ANEP.ANLN1
                                        AND ANEA.ANLN2 = ANEP.ANLN2
                                        AND ANEA.GJAHR = :LV_GJAHR
                                        AND ANEA.AFABE = ANEP.AFABE
                                        AND ANEA.LNRAN = ANEP.LNRAN
             LEFT JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = ANEP.MANDT
                                        AND ANEK.BUKRS = ANEP.BUKRS
                                        AND ANEK.ANLN1 = ANEP.ANLN1
                                        AND ANEK.ANLN2 = ANEP.ANLN2
                                        AND ANEK.GJAHR = :LV_GJAHR
                                        AND ANEK.LNRAN = ANEP.LNRAN
          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          ANLA.AFABE523;

    SELECT CASE WHEN CPI.ZCPICUMM_PREV <> 0 THEN CPI.ZCPICUMM / CPI.ZCPICUMM_PREV ELSE '1' END INTO LV_CPI
    FROM :LT_CPI AS CPI
    WHERE CPI.RCLNT = SESSION_CONTEXT('CLIENT')
      AND CPI.GJAHR = :LV_GJAHR
      AND CPI.POPER = :LV_POPER;

    LT_OS_FIAA_00 =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              IFNULL( SUM( SLD_E.KANSW ),0.00 ) AS  PRICE_FIRST,
              IFNULL( SUM( SLD_E.KNAFA ),0.00 ) AS  AMORT_NA_Y_NACH,
              IFNULL( SUM( SLD_E.KAAFA ),0.00 ) AS  AMORT_NACH_YEAR,
              IFNULL( SUM( SLD_E.KSAFA ),0.00 ) AS  FALL_NACH_YEAR,
              ROUND(:LV_CPI,4) AS IPC_00,
              IFNULL( SUM( SLD_E.KANSW * ( ROUND(:LV_CPI,4) - 1 ) ),0.00 ) AS SUM_INF_PST,
              IFNULL( SUM( SLD_E.KNAFA * ( ROUND(:LV_CPI,4) - 1 ) ),0.00 ) AS SUM_INF_AMORT_NG,
              IFNULL( SUM( SLD_E.KAAFA * ( ROUND(:LV_CPI,4) - 1 ) ),0.00 ) AS SUM_INF_AMORT_OM,
              IFNULL( SUM( SLD_E.KSAFA * ( ROUND(:LV_CPI,4) - 1 ) ),0.00 ) AS SUM_INF_FALL_OM
          FROM :LT_OS_FILTERED_NEW  AS ANLA
                LEFT JOIN "ZCL_FI_IFRS_CPI=>ZT_CPI_FIAA_00"( SESSION_CONTEXT('CLIENT'),
                      :EV_BDATE,
                      SUBSTRING(:EV_ADATE,5,2),
                      YEAR(:EV_BDATE)
                      ) AS SLD_E ON SLD_E.MANDT = ANLA.MANDT
                                AND SLD_E.BUKRS = ANLA.BUKRS
                                AND SLD_E.ANLN1 = ANLA.ANLN1
                                AND SLD_E.ANLN2 = ANLA.ANLN2
                                AND SLD_E.AFABE = ANLA.AFABE523
                LEFT JOIN :LT_CPI AS CPI ON CPI.RCLNT = ANLA.MANDT
                                        AND CPI.GJAHR = :LV_GJAHR
                                        AND CPI.POPER = :LV_POPER

          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          CPI.ZCPICUMM,
          CPI.ZCPICUMM_PREV,
          ANLA.AFABE523;
* ДВИЖЕНИЕ С 01.01 ПО НАЧАЛО ОТЧЕТНОГО ПЕРИОДА
    IF SUBSTRING(:EV_ADATE,5,2) <> '01' THEN
    LT_OS_FIAA_02_1 =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              IFNULL( SUM( CASE WHEN MVS.KANSW > 0 THEN MVS.KANSW END ),0.00 )                        AS MOVE_PST_FROM_INF,
              IFNULL( SUM( CASE WHEN MVS.KANSW < 0 THEN MVS.KANSW END ),0.00 )                        AS RET_PST_FROM_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KNAFA < 0 THEN MVS.KNAFA END ),0.00 ) AS MOVE_AMORT_NG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KNAFA > 0 THEN MVS.KNAFA END ),0.00 ) AS RET_AMORT_NG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KAAFA < 0 THEN MVS.KAAFA END ),0.00 ) AS MOVE_AMORT_TG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KAAFA > 0 THEN MVS.KAAFA END ),0.00 ) AS RET_AMORT_TG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KSAFA < 0 THEN MVS.KSAFA END ),0.00 ) AS MOVE_AMORT_SD_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KSAFA > 0 THEN MVS.KSAFA END ),0.00 ) AS RET_AMORT_SD_INF,
              ROUND(:LV_CPI,4) AS IPC_02_1,
              IFNULL( SUM( CASE WHEN MVS.KANSW > 0 THEN MVS.KANSW * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 )                        AS INF_MOVE_PST_OM,
              IFNULL( SUM( CASE WHEN MVS.KANSW < 0 THEN MVS.KANSW * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 )                        AS INF_RET_PST_OM,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KNAFA < 0 THEN MVS.KNAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_NG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KNAFA > 0 THEN MVS.KNAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_NG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KAAFA < 0 THEN MVS.KAAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_TG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KAAFA > 0 THEN MVS.KAAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_TG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KSAFA < 0 THEN MVS.KSAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_SD,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KSAFA > 0 THEN MVS.KSAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_SD
           FROM :LT_OS_FILTERED_NEW  AS ANLA
                LEFT JOIN "ZCL_FI_IFRS_CPI=>ZT_CPI_FIAA_02"( SESSION_CONTEXT('CLIENT'),
                      :LV_SDATE,
                      :LV_PREV_BDATE,
                      SUBSTRING(:EV_ADATE,5,2),
                      YEAR(:EV_ADATE)
                      ) AS MVS ON MVS.MANDT = ANLA.MANDT
                              AND MVS.BUKRS = ANLA.BUKRS
                              AND MVS.ANLN1 = ANLA.ANLN1
                              AND MVS.ANLN2 = ANLA.ANLN2
                              AND MVS.AFABE = ANLA.AFABE523
                LEFT JOIN :LT_CPI AS CPI ON CPI.RCLNT = ANLA.MANDT
                                        AND CPI.GJAHR = :LV_GJAHR
                                        AND CPI.POPER = :LV_POPER
          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          CPI.ZCPICUMM,
          CPI.ZCPICUMM_PREV,
          ANLA.AFABE523;
    ELSE
    LT_OS_FIAA_02_1 =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              '0.00' AS MOVE_PST_FROM_INF,
              '0.00' AS RET_PST_FROM_INF,
              '0.00' AS MOVE_AMORT_NG_INF,
              '0.00' AS RET_AMORT_NG_INF,
              '0.00' AS MOVE_AMORT_TG_INF,
              '0.00' AS RET_AMORT_TG_INF,
              '0.00' AS MOVE_AMORT_SD_INF,
              '0.00' AS RET_AMORT_SD_INF,
              '1.00' AS IPC_02_1,
              '0.00' AS INF_MOVE_PST_OM,
              '0.00' AS INF_RET_PST_OM,
              '0.00' AS INF_MOVE_AMORT_NG,
              '0.00' AS INF_RET_AMORT_NG,
              '0.00' AS INF_MOVE_AMORT_TG,
              '0.00' AS INF_RET_AMORT_TG,
              '0.00' AS INF_MOVE_AMORT_SD,
              '0.00' AS INF_RET_AMORT_SD
           FROM :LT_OS_FILTERED_NEW  AS ANLA;

    END IF;
* ДВИЖЕНИЕ С НАЧАЛА ОТЧЕТНОГО ПЕРИОДА
    LT_OS_FIAA_02_2 =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              IFNULL( SUM( CASE WHEN MVS.KANSW > 0 AND MVS.ANBWA NOT IN
                         ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN ( 'AU','AN','PP','PN','CP','CN') )
                         THEN MVS.KANSW END ),0.00 )                                                     AS MOVE_PST_FROM_INF,
* --> AK_BUTVILOVSK #24667 Программа инфлирования за июль в стоимости, подлежащей инфлированию - неправильная сумма
              -- IFNULL( SUM( CASE WHEN MVS.KANSW < 0 THEN MVS.KANSW END ),0.00 )                           AS RET_PST_FROM_INF,
              IFNULL( SUM( CASE WHEN MVS.KANSW < 0 AND MVS.ANBWA NOT IN
                         ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN ( 'AU','AN','PP','PN','CP','CN') )
                         THEN MVS.KANSW END ),0.00 )                                                     AS RET_PST_FROM_INF,
* <-- AK_BUTVILOVSK #24667
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500'  OR MVS.KNAFA < 0 THEN MVS.KNAFA END ),0.00 )    AS MOVE_AMORT_NG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KNAFA > 0 THEN MVS.KNAFA END ),0.00 )    AS RET_AMORT_NG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KAAFA < 0 THEN MVS.KAAFA END ),0.00 )    AS MOVE_AMORT_TG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KAAFA > 0 THEN MVS.KAAFA END ),0.00 )    AS RET_AMORT_TG_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KSAFA < 0 THEN MVS.KSAFA END ),0.00 )    AS MOVE_AMORT_SD_INF,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KSAFA > 0 THEN MVS.KSAFA END ),0.00 )    AS RET_AMORT_SD_INF,
              ROUND(:LV_CPI,4) AS IPC_02_2,
              IFNULL( SUM( CASE WHEN MVS.KANSW > 0 AND MVS.ANBWA NOT IN
                         ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN ( 'AU','AN','PP','PN','CP','CN') )
                          THEN MVS.KANSW * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 )                                                 AS INF_MOVE_PST_OM,
* --> AK_BUTVILOVSK #24667 Программа инфлирования за июль в стоимости, подлежащей инфлированию - неправильная сумма
              -- IFNULL( SUM( CASE WHEN MVS.KANSW < 0 THEN MVS.KANSW * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 )                        AS INF_RET_PST_OM,
              IFNULL( SUM( CASE WHEN MVS.KANSW < 0 AND MVS.ANBWA NOT IN
                         ( SELECT BWASL FROM ZFI_IFRS_INF_T WHERE INFL_TYPE IN ( 'AU','AN','PP','PN','CP','CN') )
                          THEN MVS.KANSW * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 )                                                 AS INF_RET_PST_OM,
* <-- AK_BUTVILOVSK #24667
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KNAFA < 0 THEN MVS.KNAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_NG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KNAFA > 0 THEN MVS.KNAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_NG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KAAFA < 0 THEN MVS.KAAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_TG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KAAFA > 0 THEN MVS.KAAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_TG,
              IFNULL( SUM( CASE WHEN MVS.ANBWA =  '500' OR  MVS.KSAFA < 0 THEN MVS.KSAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_MOVE_AMORT_SD,
              IFNULL( SUM( CASE WHEN MVS.ANBWA <> '500' AND MVS.KSAFA > 0 THEN MVS.KSAFA * ( ROUND(:LV_CPI,4) -1 ) END ),0.00 ) AS INF_RET_AMORT_SD,
              MAX(CASE WHEN MVS.ANBWA <> '500' THEN MVS.BUDAT_LAST END)                                                         AS BUDAT_LAST
           FROM :LT_OS_FILTERED_NEW  AS ANLA
                LEFT JOIN "ZCL_FI_IFRS_CPI=>ZT_CPI_FIAA_02"( SESSION_CONTEXT('CLIENT'),
                      :EV_ADATE,
                      :LV_BDATE,
                      SUBSTRING(:EV_ADATE,5,2),
                      YEAR(:EV_ADATE)
                      ) AS MVS ON MVS.MANDT = ANLA.MANDT
                              AND MVS.BUKRS = ANLA.BUKRS
                              AND MVS.ANLN1 = ANLA.ANLN1
                              AND MVS.ANLN2 = ANLA.ANLN2
                              AND MVS.AFABE = ANLA.AFABE523
                LEFT JOIN :LT_CPI AS CPI ON CPI.RCLNT = ANLA.MANDT
                                        AND CPI.GJAHR = :LV_GJAHR
                                        AND CPI.POPER = :LV_POPER
          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          CPI.ZCPICUMM,
          CPI.ZCPICUMM_PREV,
          ANLA.AFABE523;

    LT_OS_FIAA =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              ROUND(SLD_00.PRICE_FIRST + MVS_01.MOVE_PST_FROM_INF + MVS_02.MOVE_PST_FROM_INF
                                       + MVS_01.RET_PST_FROM_INF  + MVS_02.RET_PST_FROM_INF,2)                AS PRICE_FIRST,
              ROUND(SLD_00.AMORT_NA_Y_NACH + MVS_01.MOVE_AMORT_NG_INF + MVS_02.MOVE_AMORT_NG_INF
                                           + MVS_01.RET_AMORT_NG_INF  + MVS_02.RET_AMORT_NG_INF,2)            AS AMORT_NA_Y_NACH,
              ROUND(SLD_00.AMORT_NACH_YEAR + MVS_01.MOVE_AMORT_TG_INF + MVS_02.MOVE_AMORT_TG_INF
                                           + MVS_01.RET_AMORT_TG_INF  + MVS_02.RET_AMORT_TG_INF,2)            AS AMORT_NACH_YEAR,
              ROUND(SLD_00.FALL_NACH_YEAR  + MVS_01.MOVE_AMORT_SD_INF + MVS_02.MOVE_AMORT_SD_INF
                                           + MVS_01.RET_AMORT_SD_INF  + MVS_02.RET_AMORT_SD_INF,2)            AS FALL_NACH_YEAR,
              ROUND(SLD_00.SUM_INF_PST + MVS_01.INF_MOVE_PST_OM + MVS_02.INF_MOVE_PST_OM
                                       + MVS_01.INF_RET_PST_OM  + MVS_02.INF_RET_PST_OM
                                       - (SUM_P_INF.SUM_INF_PST_GJAHR * (MVS_02.IPC_02_2 - 1)),2)             AS SUM_INF_PST,
              ROUND(SLD_00.SUM_INF_AMORT_NG + MVS_01.INF_MOVE_AMORT_NG + MVS_02.INF_MOVE_AMORT_NG
                                            + MVS_01.INF_RET_AMORT_NG + MVS_02.INF_RET_AMORT_NG
                                            - (SUM_P_INF.SUM_INF_AMORT_GJAHR * (MVS_02.IPC_02_2 - 1)),2)      AS SUM_INF_AMORT_NG,
              ROUND(SLD_00.SUM_INF_AMORT_OM + MVS_01.INF_MOVE_AMORT_TG + MVS_02.INF_MOVE_AMORT_TG
                                            + MVS_01.INF_RET_AMORT_TG  + MVS_02.INF_RET_AMORT_TG
                                            - (SUM_P_INF.SUM_P_INF_AMORT_G * (MVS_02.IPC_02_2 - 1)),2)        AS SUM_INF_AMORT_OM,
              ROUND(SLD_00.SUM_INF_FALL_OM  + MVS_01.INF_MOVE_AMORT_SD + MVS_02.INF_MOVE_AMORT_SD
                                            + MVS_01.INF_RET_AMORT_SD + MVS_02.INF_RET_AMORT_SD
                                            - (SUM_P_INF.SUM_P_INF_FALL_G  * (MVS_02.IPC_02_2 - 1)),2)        AS SUM_INF_FALL_OM,
              ROUND(SLD_00.PRICE_FIRST + MVS_01.MOVE_PST_FROM_INF + MVS_01.RET_PST_FROM_INF,2)                AS PST_NO_MOVE_FROM_INF,
              ROUND(SLD_00.AMORT_NA_Y_NACH + MVS_01.MOVE_AMORT_NG_INF + MVS_01.RET_AMORT_NG_INF
                                           + MVS_01.MOVE_AMORT_SD_INF + MVS_01.RET_AMORT_SD_INF
                                           + SLD_00.FALL_NACH_YEAR,2)                                         AS AMORT_NO_MOVE_NG_INF,
              ROUND(SLD_00.AMORT_NACH_YEAR + MVS_01.MOVE_AMORT_TG_INF + MVS_01.RET_AMORT_TG_INF,2)            AS AMORT_NO_MOVE_TG_INF,
              ROUND(MVS_02.MOVE_PST_FROM_INF - SUM_P_INF.SUM_INF_PST_GJAHR,2)                                 AS MOVE_PST_FROM_INF,
              ROUND(MVS_02.MOVE_AMORT_NG_INF - SUM_P_INF.SUM_INF_AMORT_GJAHR,2)                               AS MOVE_AMORT_NG_INF,
              ROUND(MVS_02.MOVE_AMORT_TG_INF - SUM_P_INF.SUM_P_INF_AMORT_G,2)                                 AS MOVE_AMORT_TG_INF,
              ROUND(MVS_02.INF_MOVE_PST_OM   - (SUM_P_INF.SUM_INF_PST_GJAHR   * (MVS_02.IPC_02_2 - 1)),2)     AS INF_MOVE_PST_OM,
              ROUND(MVS_02.INF_MOVE_AMORT_NG - (SUM_P_INF.SUM_INF_AMORT_GJAHR * (MVS_02.IPC_02_2 - 1)),2)     AS INF_MOVE_AMORT_NG,
              ROUND(MVS_02.INF_MOVE_AMORT_TG - (SUM_P_INF.SUM_P_INF_AMORT_G   * (MVS_02.IPC_02_2 - 1)),2)     AS INF_MOVE_AMORT_TG,
              ROUND(MVS_02.RET_PST_FROM_INF,2)                                                                AS RET_PST_FROM_INF,
              ROUND(MVS_02.RET_AMORT_NG_INF,2)                                                                AS RET_AMORT_NG_INF,
              ROUND(MVS_02.RET_AMORT_TG_INF,2)                                                                AS RET_AMORT_TG_INF,
              ROUND(MVS_02.INF_RET_PST_OM,2)                                                                  AS INF_RET_PST_OM,
              ROUND(MVS_02.INF_RET_AMORT_NG,2)                                                                AS INF_RET_AMORT_NG,
              ROUND(MVS_02.INF_RET_AMORT_TG,2)                                                                AS INF_RET_AMORT_TG,
              CASE WHEN SLD_00.IPC_00 <> 0 THEN ROUND( SLD_00.IPC_00,4 ) ELSE ROUND( MVS_02.IPC_02_2, 4 ) END AS IPC,
              MVS_02.BUDAT_LAST                                                                               AS BUDAT_LAST
          FROM :LT_OS_FILTERED_NEW  AS ANLA
             LEFT JOIN :LT_OS_FIAA_00 AS SLD_00 ON  SLD_00.MANDT    = ANLA.MANDT
                                                AND SLD_00.BUKRS    = ANLA.BUKRS
                                                AND SLD_00.ANLN1    = ANLA.ANLN1
                                                AND SLD_00.ANLN2    = ANLA.ANLN2
                                                AND SLD_00.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_FIAA_02_1 AS MVS_01 ON MVS_01.MANDT    = ANLA.MANDT
                                                 AND MVS_01.BUKRS    = ANLA.BUKRS
                                                 AND MVS_01.ANLN1    = ANLA.ANLN1
                                                 AND MVS_01.ANLN2    = ANLA.ANLN2
                                                 AND MVS_01.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_FIAA_02_2 AS MVS_02 ON MVS_02.MANDT    = ANLA.MANDT
                                                 AND MVS_02.BUKRS    = ANLA.BUKRS
                                                 AND MVS_02.ANLN1    = ANLA.ANLN1
                                                 AND MVS_02.ANLN2    = ANLA.ANLN2
                                                 AND MVS_02.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_SUM_P_INF AS SUM_P_INF ON SUM_P_INF.MANDT    = ANLA.MANDT
                                                    AND SUM_P_INF.BUKRS    = ANLA.BUKRS
                                                    AND SUM_P_INF.ANLN1    = ANLA.ANLN1
                                                    AND SUM_P_INF.ANLN2    = ANLA.ANLN2
                                                    AND SUM_P_INF.AFABE523 = ANLA.AFABE523;

    LT_OS_STORNO =
          SELECT
              ANLA.MANDT,
              ANLA.BUKRS,
              ANLA.ANLN1,
              ANLA.ANLN2,
              ANLA.AFABE523,
              ANEK.AWTYP,
              ANEK.AWORG,
              ANEP.BELNR AS AWREF,
              ANEP.LNRAN,
              ACDOCA.AWSYS,
              ANEP.GJAHR
          FROM :LT_OS_FILTERED_NEW AS ANLA
             LEFT JOIN FAAV_ANEP AS ANEP ON ANEP.MANDT = ANLA.MANDT
                                        AND ANEP.BUKRS = ANLA.BUKRS
                                        AND ANEP.ANLN1 = ANLA.ANLN1
                                        AND ANEP.ANLN2 = ANLA.ANLN2
                                        AND ANEP.GJAHR = :LV_GJAHR
                                        AND ANEP.AFABE = ANLA.AFABE523
                                        AND ANEP.LNRAN = ( SELECT MAX( LNRAN)
                                                              FROM FAAV_ANEP AS ANEP1
                                                              WHERE ANEP1.BUKRS = ANLA.BUKRS
                                                                 AND ANEP1.ANLN1 = ANLA.ANLN1
                                                                 AND ANEP1.ANLN2 = ANLA.ANLN2
                                                                 AND ANEP1.GJAHR = :LV_GJAHR
                                                                 AND ANEP1.AFABE = ANLA.AFABE523)
                                        AND ANEP.BZDAT BETWEEN :EV_ADATE AND :EV_BDATE
             LEFT JOIN FAAV_ANEK AS ANEK ON ANEK.MANDT = ANLA.MANDT
                                        AND ANEK.BUKRS = ANLA.BUKRS
                                        AND ANEK.ANLN1 = ANLA.ANLN1
                                        AND ANEK.ANLN2 = ANLA.ANLN2
                                        AND ANEK.GJAHR = :LV_GJAHR
                                        AND ANEK.LNRAN = ANEP.LNRAN
                                        AND ANEK.BUDAT BETWEEN :EV_ADATE AND :EV_BDATE
             LEFT JOIN ACDOCA AS ACDOCA ON ACDOCA.RCLNT = ANLA.MANDT
                                       AND ACDOCA.RBUKRS = ANLA.BUKRS
                                       AND ACDOCA.ANLN1 = ANLA.ANLN1
                                       AND ACDOCA.ANLN2 = ANLA.ANLN2
                                       AND ACDOCA.GJAHR = :LV_GJAHR
                                       AND ACDOCA.AWREF = ANEP.BELNR
                                       AND ACDOCA.AWORG = ANEK.AWORG
                                       AND ACDOCA.AFABE = ANLA.AFABE523
          GROUP BY
          ANLA.MANDT,
          ANLA.BUKRS,
          ANLA.ANLN1,
          ANLA.ANLN2,
          ANLA.AFABE523,
          ANEK.AWTYP,
          ANEK.AWORG,
          ANEP.BELNR,
          ANEP.LNRAN,
          ACDOCA.AWSYS,
          ANEP.GJAHR;

    IT_RESULT_NEW =
          SELECT
              ANLA.BUKRS,
              ANLA.KTANSW_01,
              ANLA.KTANSW_50,
              ANLA.ANLKL,                                                                                                         -- КЛАСС ОС
              ANLA.ANLN1,                                                                                                         -- ОСНОВНОЕ СРЕДСТВО
              ANLA.ANLN2,                                                                                                         -- СУБНОМЕР
              ANLA.INVNR,                                                                                                         -- ИНВЕНТАРНЫЙ НОМЕР
              ANLA.TXTF1,                                                                                                         -- НАИМЕНОВАНИЕ ОБЪЕКТА
              ANLA.GRMSFO,                                                                                                        -- ГРУППА ОС (НМА) ПО МСФО
              ANLA.AFABE523,                                                                                                      -- ОБЛАСТЬ ОЦЕНКИ 52/53
              ANLA.EXPDATE,                                                                                                       -- ДАТА НАЧАЛА ЭКСПЛУАТАЦИИ ПО МСФО
              to_varchar( FIAA.IPC )                                                                       AS IPC,                                                                                                    -- ИПЦ
              HSL_C.PST_IN_NKS_P                                                                           AS PST_IN_NKS_P,       -- ∑ ЗАТРАТ НКС ПРЕДЫДУЩИЙ ГОД
              HSL_C.INF_PST_IN_NKS_C                                                                       AS INF_PST_IN_NKS_C,   -- ∑ ЗАТР НКС ЗА ТЕКГОД С УЧЕТИНФЛНАОТЧДАТУ
              HSL_C.PST_IN_NKS_C                                                                           AS PST_IN_NKS_C,       -- ∑ ЗАТРАТ НКС ЗА ТЕК. ГОД
              HSL_C.INF_PST_IN_NKS_C_F - HSL_C.INF_PST_IN_NKS_C                                            AS INF_PST_IN_NKS_P,   -- ∑ ЗАТР НКС ЗА ПРЕДГОД С УЧЕТИНФЛНАОТЧДАТУ
              (HSL_C.INF_PST_IN_NKS_C_F - HSL_C.PST_IN_NKS_C_F)
              - (HSL_C.INF_PST_IN_NKS_C_F - HSL_C.PST_IN_NKS_C
              - HSL_C.INF_PST_IN_NKS_P )                                                                   AS INF_PST_IN_NKS_N,   -- ∑ ИНФЛ. ЗАТРАТ НКС НАЧ. ГОДА
              ((HSL_C.INF_PST_IN_NKS_C_F - HSL_C.PST_IN_NKS_C)
              - HSL_C.INF_PST_IN_NKS_P )                                                                   AS INF_PST_IN_NKS_T,   -- ∑ ИНФЛ. ЗАТРАТ НКС ТЕК. ГОДА
              SUM_P_INF.SUM_P_NKS_IN                                                                       AS SUM_PST_IN_NKS,
              SUM_P_INF.SUM_P_INF_NKS_NG                                                                   AS SUM_INF_PST_IN_NKS_N,
              SUM_P_INF.SUM_P_INF_NKS_TG                                                                   AS SUM_INF_PST_IN_NKS_T,
              FIAA.PRICE_FIRST - SUM_P_INF.SUM_INF_PST_GJAHR                                               AS PRICE_FIRST,        -- ПЕРВОНАЧАЛЬНАЯ СТОИМОСТЬ ОБЪЕКТА  - SUM_P_NKS_IN
              FIAA.AMORT_NA_Y_NACH - SUM_P_INF.SUM_INF_AMORT_GJAHR                                         AS AMORT_NA_Y_NACH,    -- АМОРТИЗАЦИЯ НА НАЧАЛО ГОДА
              FIAA.AMORT_NACH_YEAR - SUM_P_INF.SUM_P_INF_AMORT_G                                           AS AMORT_NACH_YEAR,    -- НАЧИСЛЕННАЯ АМОРТИЗАЦИЯ ТЕКУЩЕГО ГОДА
              FIAA.FALL_NACH_YEAR - SUM_P_INF.SUM_P_INF_FALL_G                                             AS FALL_NACH_YEAR,
              SUM_P_INF.SUM_INF_PST_MONTH                                                                  AS SUM_INF_PST_MONTH,  -- ∑ ПРОВЕД ИНФЛ ПСТ ЗА ОТЧЕТНЫЙ МЕСЯЦ   - SUM_P_INF.SUM_P_INF_NKS_NG - SUM_P_INF.SUM_P_INF_NKS_TG
              SUM_P_INF.SUM_INF_AMORT_MONTH                                                                AS SUM_INF_AMORT_MONTH,-- ∑ ПРОВЕД ИНФЛ АМОРТ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              SUM_P_INF.SUM_P_INF_AMORT_M                                                                  AS SUM_P_INF_AMORT_M,  -- ∑ ПРОВЕД ИНФЛ ТЕК АМОРТ ЗА ОТЧ МЕСЯЦ
              SUM_P_INF.SUM_P_INF_FALL_M                                                                   AS SUM_P_INF_FALL_M,   -- ∑ ПРОВЕД ИНФЛ ОБЕСЦЕНЕНИЯ ЗА ОТ МЕСЯЦ
              FIAA.SUM_INF_PST                                                                             AS SUM_INF_PST,        -- ∑ ИНФЛ ПСТ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.SUM_INF_AMORT_NG,                                                                                              -- ∑ ИНФЛ АМОРТ НГ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.SUM_INF_AMORT_OM,                                                                                              -- ∑ ИНФЛ ТЕКУЩЕЙ АМОРТ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.SUM_INF_FALL_OM,
              FIAA.PST_NO_MOVE_FROM_INF,
              FIAA.AMORT_NO_MOVE_NG_INF AS AMORT_NO_MOVE_NG_INF,
              FIAA.AMORT_NO_MOVE_TG_INF,
              FIAA.MOVE_PST_FROM_INF,                                                                                             -- ДВИЖ ПСТ С МОМЕНТА ПОСЛЕДНЕГО ИНФЛ
              FIAA.MOVE_AMORT_NG_INF,                                                                                             -- ДВИЖ АМОРТ НГ С МОМЕНТА ПОСЛЕДНЕГО ИНФЛ
              FIAA.MOVE_AMORT_TG_INF,                                                                                             -- ДВИЖ АМОРТ ТГ С МОМЕНТА ПОСЛЕДНЕГО ИНФЛ
              FIAA.INF_MOVE_PST_OM,                                                                                               -- ИНФЛ ДВИЖЕНИЙ ПСТ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.INF_MOVE_AMORT_NG,                                                                                             -- ИНФЛ ДВИЖЕНИЙ АМОРТ НГ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.INF_MOVE_AMORT_TG,                                                                                             -- ИНФЛ ДВИЖЕНИЙ АМОРТ ТГ ЗА ОТЧЕТНЫЙ МЕСЯЦ
              FIAA.RET_PST_FROM_INF,
              FIAA.RET_AMORT_NG_INF,
              FIAA.RET_AMORT_TG_INF,
              FIAA.INF_RET_PST_OM,
              FIAA.INF_RET_AMORT_NG,
              FIAA.INF_RET_AMORT_TG,
              FIAA.BUDAT_LAST,
              '' AS STATUS,
              '' AS STATUS_AA,
              '' AS STATUS_FI,
              WAERS AS BUKRS_WAERS,
              STORNO.AWTYP,
              STORNO.AWORG,
              STORNO.AWREF,
              STORNO.LNRAN,
              STORNO.AWSYS,
              STORNO.GJAHR,
              ANLA.DEAKT
          FROM :LT_OS_FILTERED_NEW AS ANLA
             LEFT JOIN :LT_OS_FIAA AS FIAA ON FIAA.MANDT    = ANLA.MANDT
                                          AND FIAA.BUKRS    = ANLA.BUKRS
                                          AND FIAA.ANLN1    = ANLA.ANLN1
                                          AND FIAA.ANLN2    = ANLA.ANLN2
                                          AND FIAA.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_HSL_C AS HSL_C ON HSL_C.MANDT    = ANLA.MANDT
                                            AND HSL_C.BUKRS    = ANLA.BUKRS
                                            AND HSL_C.ANLN1    = ANLA.ANLN1
                                            AND HSL_C.ANLN2    = ANLA.ANLN2
                                            AND HSL_C.AFABE523 = ANLA.AFABE523
*             LEFT JOIN :LT_OS_HSL_P AS HSL_P ON HSL_P.MANDT    = ANLA.MANDT
*                                            AND HSL_P.BUKRS    = ANLA.BUKRS
*                                            AND HSL_P.ANLN1    = ANLA.ANLN1
*                                            AND HSL_P.ANLN2    = ANLA.ANLN2
*                                            AND HSL_P.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_STORNO AS STORNO ON STORNO.MANDT    = ANLA.MANDT
                                              AND STORNO.BUKRS    = ANLA.BUKRS
                                              AND STORNO.ANLN1    = ANLA.ANLN1
                                              AND STORNO.ANLN2    = ANLA.ANLN2
                                              AND STORNO.AFABE523 = ANLA.AFABE523
             LEFT JOIN :LT_OS_SUM_P_INF AS SUM_P_INF ON SUM_P_INF.MANDT    = ANLA.MANDT
                                                    AND SUM_P_INF.BUKRS    = ANLA.BUKRS
                                                    AND SUM_P_INF.ANLN1    = ANLA.ANLN1
                                                    AND SUM_P_INF.ANLN2    = ANLA.ANLN2
                                                    AND SUM_P_INF.AFABE523 = ANLA.AFABE523
             INNER JOIN T001 AS T001 ON T001.BUKRS = ANLA.BUKRS
                                     AND T001.MANDT = SESSION_CONTEXT('CLIENT');

  ENDMETHOD.


  METHOD get_hist_amount_detail BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT
                  OPTIONS READ-ONLY.
    DECLARE lv_prev_adate DATE;
    lv_prev_adate = ADD_MONTHS(:ev_adate, -1);
 it_result =
 Select
        os.BUKRS,
        os.ANLN1,
        os.ANLN2,
        os.invnr,
        '' as datum,
        '' as typez,
        '' as active,
        '' as amount,
        '' as inf_date,
        '' as inf_sum
      FROM :et_os AS os;

  ENDMETHOD.


  METHOD get_retirement_detail BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT
                  OPTIONS READ-ONLY
                  USING
                  FAAV_ANEP
                  TABW
                  TABWG
                  FAAV_anek
                  .
    --Выбока выбытия
    it_result =
    SELECT
        os.BUKRS,
        os.ANLN1,
        os.ANLN2,
        os.invnr,
        anek.BUDAT AS retire_date,
        SUM(anep.anbtr) AS retire_sum,
        SUM(ANEP.NAFAB) AS retire_nachisl,
        SUM(anep.anbtr - ANEP.NAFAB) AS retire_spisan
      FROM :et_os AS os
        INNER JOIN FAAV_ANEP AS anep ON anep.mandt = SESSION_CONTEXT('CLIENT')
                                    AND anep.bukrs = os.bukrs
                                    AND anep.anln1 = os.anln1
                                    AND anep.anln2 = os.anln2
                                    AND anep.GJAHR = EXTRACT (YEAR FROM :ev_bdate)
                                    AND anep.bwasl IN ( SELECT
                                                            bwasl
                                                          FROM TABW
                                                          WHERE mandt = SESSION_CONTEXT('CLIENT')
                                                            AND BWAGRP IN ( SELECT
                                                                                bwagrp
                                                                              FROM TABWG
                                                                              WHERE mandt = SESSION_CONTEXT('CLIENT')
                                                                                AND PERGRP = '3' ) ) -- 3 = Выбытие
        INNER JOIN FAAV_anek AS anek ON anek.mandt = SESSION_CONTEXT('CLIENT')
                                    AND anek.bukrs = anep.bukrs
                                    AND anek.anln1 = anep.anln1
                                    AND anek.anln2 = anep.anln2
                                    AND anek.GJAHR = anep.gjahr
                                    AND anek.lnran = anep.lnran
                                    AND anek.BUDAT BETWEEN :ev_adate AND :ev_bdate
      GROUP BY os.BUKRS, os.ANLN1, os.ANLN2, os.invnr, anek.BUDAT;
  ENDMETHOD.


  METHOD post BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT.
    lt_os =
    SELECT
        '' AS bukrs,
        '' AS anln1,
        '' AS anln2,
        invnr
      FROM :ct_invnr
      WHERE flag = '';


  ENDMETHOD.


  METHOD storno BY DATABASE PROCEDURE
                  FOR HDB
                  LANGUAGE SQLSCRIPT
                  USING
                  zfiaa_price_hist
                  .
    --удаление из истории
    DELETE FROM zfiaa_price_hist
      WHERE mandt = SESSION_CONTEXT('CLIENT')
       -- AND inf_date = :ev_bdate
        AND invnr IN ( SELECT invnr FROM :ct_invnr WHERE flag = '' );
  ENDMETHOD.
ENDCLASS.