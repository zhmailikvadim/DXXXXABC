*&---------------------------------------------------------------------*
*& Include          ZFI_REGISTR_ACC_C01
*&---------------------------------------------------------------------*
CLASS lcl_report IMPLEMENTATION.
  METHOD get_last_date.
    rv_date = iv_date(6) && '01'.
    rv_date = rv_date + 33.
    rv_date+6 = '01'.
    rv_date = rv_date - 1.
  ENDMETHOD.

  METHOD at_selection_screen_input.
    " проверка корректности дат для режима "Учет оценки открытых позиций в иностранной валюте"
    IF  p_crval = abap_true.
      DATA(lv_last_day) =  get_last_date( s_date-high ).
      IF NOT ( s_date-low IS NOT INITIAL
         AND s_date-low+6 = '01'
         AND s_date-high IS NOT INITIAL
         AND lv_last_day+6 = s_date-high+6 ).
        MESSAGE e118(zfi).
      ENDIF.
    ENDIF.
  ENDMETHOD.

  METHOD run.
    " проверка полномочий по БЕ
    SELECT bukrs
      FROM t001
      INTO TABLE @DATA(lt_bukrs)
      WHERE bukrs IN @s_bukrs.
    LOOP AT lt_bukrs ASSIGNING FIELD-SYMBOL(<ls_bukrs>).
      AUTHORITY-CHECK OBJECT 'F_BKPF_BUK'
       ID 'BUKRS' FIELD <ls_bukrs>
       ID 'ACTVT' FIELD '03'.
      IF sy-subrc <> 0.
        MESSAGE i007(zfi) WITH <ls_bukrs>.
        RETURN.
      ENDIF.
    ENDLOOP.
    " проверка полномочий по счетам
    SELECT DISTINCT begru
      FROM skb1
      INTO TABLE @DATA(lt_begru)
      WHERE bukrs IN @s_bukrs
        AND saknr IN @s_hkont.
    LOOP AT lt_begru ASSIGNING FIELD-SYMBOL(<ls_begru>).
      AUTHORITY-CHECK OBJECT 'F_BKPF_BES'
       ID 'BRGRU' FIELD <ls_begru>
       ID 'ACTVT' FIELD '03'.
      IF sy-subrc <> 0.
        MESSAGE e009(fdbl) WITH <ls_begru>.
        RETURN.
      ENDIF.
    ENDLOOP.
    get_data( ).
    CALL SCREEN '0100'.
  ENDMETHOD.

  METHOD on_item_double_click.
    FREE gt_detail.
    gv_det_fname = fieldname.

    IF fieldname = 'DEBET' OR fieldname =  'KREDIT'
      OR fieldname CP 'K_*' OR fieldname CP 'D_*'.
      get_trn_detail( EXPORTING iv_fname = fieldname
                                iv_level = grouplevel
                                iv_index = index_outtab ).
    ELSEIF fieldname(3) = 'SLD'.
      get_sld_detail( EXPORTING iv_fname = fieldname
                               iv_level = grouplevel
                               iv_index = index_outtab
                      IMPORTING ev_date = DATA(lv_sld_date) ).
    ENDIF.
    IF gt_detail IS NOT INITIAL.
      CLEAR lcl_report=>gv_ok_200.
      lcl_detail=>show( EXPORTING iv_det_fname = gv_det_fname
                                  iv_date      = lv_sld_date ).

    ENDIF.
  ENDMETHOD.

  METHOD get_sld_detail.
    DATA:
      lt_bukrs   TYPE RANGE OF bukrs,
      lt_hkont   TYPE RANGE OF hkont,
      lt_partner TYPE RANGE OF but000-partner,
      lt_vptnr   TYPE RANGE OF but000-partner,
      lt_vertn   TYPE RANGE OF bseg-vertn,
      lt_zuonr   TYPE RANGE OF bseg-zuonr,
      ls_data    TYPE zfi_registr_acc,
      lv_hk_mask TYPE string,
      lv_shkzg   TYPE shkzg.
    FIELD-SYMBOLS:
      <lt_tree> TYPE STANDARD TABLE.

    ev_date = COND budat( WHEN iv_fname CP 'SLD_I*' THEN s_date[ 1 ]-low
                          WHEN iv_fname CP 'SLD_O*' THEN
                            COND budat( WHEN s_date[ 1 ]-high IS INITIAL THEN s_date[ 1 ]-low
                                                                         ELSE s_date[ 1 ]-high ) + 1
                         ).
    DATA(gv_year_s) =  COND gjahr( WHEN s_date[ 1 ]-high IS INITIAL THEN s_date[ 1 ]-low(4)
                                   ELSE s_date[ 1 ]-high(4) ).
    lv_shkzg = COND char1( WHEN iv_fname = 'SLD_ID' OR iv_fname = 'SLD_OD' THEN 'S'
                           WHEN iv_fname = 'SLD_IK' OR iv_fname = 'SLD_OK' THEN 'H'
                           ELSE space
                          ) .
    ASSIGN gr_data->* TO <lt_tree>.

    READ TABLE <lt_tree> ASSIGNING FIELD-SYMBOL(<ls_tree>) INDEX iv_index.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
    MOVE-CORRESPONDING <ls_tree> TO ls_data.
    gr_tree->get_hierarchy( IMPORTING et_sort = DATA(lt_sort) ).
    "определяются ограничения для вызова расшифровки
    LOOP AT lt_sort ASSIGNING FIELD-SYMBOL(<ls_sort>).
      CASE <ls_sort>-fieldname.
        WHEN 'BUKRS'.
          IF ls_data-bukrs <> space.
            APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-bukrs ) TO lt_bukrs .
          ENDIF.

        WHEN 'HKONT_NAME'.
          IF ls_data-hkont_name IS NOT INITIAL.
            IF p_mlev > 0.
              APPEND VALUE #( sign = 'I' option = 'CP' low = ls_data-hkont_name )  TO lt_hkont .
            ELSEIF ls_data-hkont IS NOT INITIAL.
              APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-hkont )  TO lt_hkont .
            ENDIF.
          ENDIF.
        WHEN 'PARTNER_NAME'.
          IF p_vptnr = abap_true.
            APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-partner )  TO lt_vptnr.
          ELSE.
            APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-partner )  TO lt_partner .
          ENDIF.
        WHEN 'ZUONR'.
          APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-zuonr )  TO lt_zuonr .
        WHEN 'AGREMNT_NAME'.
          APPEND VALUE #( sign = 'I' option = 'EQ' low = ls_data-agremnt )  TO lt_vertn .
      ENDCASE.
      IF <ls_sort>-fieldname = iv_level.
        EXIT.
      ENDIF.

    ENDLOOP.
    " проверка что счет основной
    IF ls_data-hkont IS NOT INITIAL.
      SELECT SINGLE
        CASE WHEN skb1~mitkz = 'D' OR skb1~mitkz = 'K' OR skb1~xopvw = 'X'
             THEN ' '
             ELSE 'X'
        END
        FROM skb1
* --> AK_BUTVILOVSK #8000000954, Ошибка расшифровки сальдо zfi_regby_k
        JOIN t001 ON t001~bukrs = skb1~bukrs
                 AND t001~ktopl = 'BNFT'
* <-- AK_BUTVILOVSK #8000000954
        WHERE ( skb1~bukrs = @ls_data-bukrs OR @ls_data-bukrs = '' )
          AND skb1~saknr = @ls_data-hkont
        INTO @DATA(lv_hk_main).
    ELSEIF ls_data-hkont_name IS NOT INITIAL.
      lv_hk_mask = ls_data-hkont_name.
      TRANSLATE lv_hk_mask USING '*%'.
      SELECT SINGLE 'X'
       FROM skb1
       WHERE ( bukrs = @ls_data-bukrs OR @ls_data-bukrs = '' )
         AND saknr LIKE @lv_hk_mask
         AND ( mitkz <> 'D' AND mitkz <> 'K' AND  xopvw <> 'X' )
      INTO @lv_hk_main .
    ENDIF.
    " просмотр сальдо основного счета
    IF lv_hk_main = abap_true.
      IF NOT ( iv_level = 'HKONT_NAME' OR iv_level = '') . "
        MESSAGE i003(zfi).
        RETURN.
      ENDIF.
      IF lt_bukrs[] IS INITIAL.
        lt_bukrs[] = s_bukrs[].
      ENDIF.

      SUBMIT fagl_account_balance
          WITH racct IN  lt_hkont[]
          WITH rbukrs IN lt_bukrs[]
          WITH ryear = gv_year_s
          AND RETURN.
      RETURN.
    ENDIF.

    gr_sldtrn->get_sld_detail( EXPORTING it_bukrs_rng   = lt_bukrs[]
                                         it_hkont_rng   = lt_hkont[]
                                         it_partner_rng = lt_partner[]
                                         it_vptnr_rng   = lt_vptnr[]
                                         it_zuonr_rng   = lt_zuonr[]
                                         it_vertn_rng   = lt_vertn[]
                                         iv_detbal      = p_detbal
                                         iv_date        = ev_date
                                         iv_shkzg       = lv_shkzg
* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
                                         iv_fname       = COND lvc_fname( WHEN p_crval = abap_true THEN iv_fname
                                                                                                   ELSE space )
                                         iv_budat_low   = s_date[ 1 ]-low
                                         iv_budat_high  = s_date[ 1 ]-high
* <-- AK_BUTVILOVS #8000001029
                               IMPORTING et_detail      = gt_detail
   ).

  ENDMETHOD.
  METHOD get_trn_detail.
    DATA:
      lt_bukrs   TYPE RANGE OF bseg-bukrs,
      lt_date    TYPE RANGE OF bseg-h_budat,
      lt_hkont   TYPE RANGE OF bseg-hkont,
      lt_gkont   TYPE RANGE OF bseg-hkont,
      lt_partner TYPE RANGE OF but000-partner,
      lt_vptnr   TYPE RANGE OF but000-partner,
      lt_vertn   TYPE RANGE OF bseg-vertn,
      lt_mnagr   TYPE RANGE OF bseg-vertn,
      lt_zuonr   TYPE RANGE OF bseg-zuonr,
      ls_data    TYPE zfi_registr_acc,
      lv_shkzg   TYPE shkzg.
    FIELD-SYMBOLS:
    <lt_tree> TYPE STANDARD TABLE.
    lv_shkzg = COND #( WHEN iv_fname = 'DEBET'  OR iv_fname CP 'D_*' THEN  'S'
                       WHEN iv_fname = 'KREDIT' OR iv_fname CP 'K_*' THEN 'H' ).
    IF lv_shkzg IS INITIAL.
      RETURN.
    ENDIF.
    ASSIGN gr_data->* TO <lt_tree>.

    READ TABLE <lt_tree> ASSIGNING FIELD-SYMBOL(<ls_tree>) INDEX iv_index.
    IF sy-subrc <> 0.
      RETURN.
    ENDIF.
    MOVE-CORRESPONDING <ls_tree> TO ls_data.
    gr_tree->get_hierarchy( IMPORTING et_sort = DATA(lt_sort) ).
    LOOP AT lt_sort ASSIGNING FIELD-SYMBOL(<ls_sort>).
      CASE <ls_sort>-fieldname.
        WHEN 'BUKRS'.
          IF ls_data-bukrs <> space.
            lt_bukrs = VALUE #( ( sign = 'I' option = 'EQ' low = ls_data-bukrs ) )  .
          ENDIF.
        WHEN 'HKONT_NAME'.
          IF ls_data-hkont_name IS NOT INITIAL.
            lt_hkont = VALUE #( ( sign = 'I' option = 'CP' low = ls_data-hkont ) ) .
          ENDIF.
        WHEN 'PARTNER_NAME'.
          lt_partner = VALUE #( ( sign = 'I' option = 'EQ' low = ls_data-partner ) ).
        WHEN 'ZZ_DOPEXT_KEY'.
          lt_mnagr = VALUE #( ( sign = 'I' option = 'EQ' low = ls_data-zz_dopext_key ) ).
        WHEN 'ZUONR'.
          lt_zuonr = VALUE #( ( sign = 'I' option = 'EQ' low = ls_data-zuonr ) ).
        WHEN 'AGREMNT_NAME'.
          APPEND VALUE #(  sign = 'I' option = 'EQ' low = ls_data-agremnt )  TO lt_vertn .
      ENDCASE.
      IF <ls_sort>-fieldname = iv_level.
        EXIT.
      ENDIF.
    ENDLOOP.
    IF iv_fname CP 'K_*' OR iv_fname CP 'D_*'. " оборот конкретного счета
      DATA(lv_last) = strlen( iv_fname ) - 1.
      IF iv_fname+lv_last = '*'.
        lt_gkont = VALUE #( ( sign = 'I' option = 'CP' low = iv_fname+2 ) ).
      ELSE.
        lt_gkont = VALUE #( ( sign = 'I' option = 'EQ' low = iv_fname+2 ) ).
      ENDIF.
    ENDIF.

    gr_sldtrn->get_trn_detail( EXPORTING it_bukrs_rng = lt_bukrs[]
                                         it_hkont_rng = lt_hkont[]
                                         it_gkont_rng = lt_gkont[]
                                         it_partner_rng = lt_partner[]
                                         it_vptnr_rng = lt_vptnr[]
                                         it_vertn_rng = lt_vertn[]
                                         it_zuonr_rng = lt_zuonr[]
                                         it_date_rng  = lt_date[]
                                         iv_shkzg     = lv_shkzg
                               IMPORTING et_detail    = gt_detail
                             ).

  ENDMETHOD.
  METHOD get_data.
    DATA:
      lv_partn  TYPE abap_bool,
      lv_zuonr  TYPE abap_bool,
      lv_id_typ TYPE but0id-type,
      lv_id_num TYPE but0id-idnumber.
    DATA(lv_vertn) = p_vertn.
    DATA(lv_ndoc)  = p_ndoc.
    IF sy-tcode <> 'ZFI_REGBY_K'.
      CLEAR: p_crval.
    ENDIF.
    IF p_agrmn = abap_false.
      CLEAR: lv_vertn,lv_ndoc.
    ENDIF.
    IF sy-tcode <> lcl_report=>gv_scode.
      lv_partn = abap_true.
    ENDIF.

    IF p_zuonr = abap_true OR p_zuon = abap_true.
      lv_zuonr = abap_true.
    ENDIF.
    IF p_bgrp = abap_true.
      lv_id_typ = 'BSBU'.
      CASE 'X'.
        WHEN p_b01. lv_id_num = '100'.
        WHEN p_b02. lv_id_num = '010'.
        WHEN p_b03. lv_id_num = '001'.
      ENDCASE.
    ENDIF.
    IF p_mgrp = abap_true.
      lv_id_typ = 'MSFO'.
      CASE 'X'.
        WHEN p_m01. lv_id_num = '10000'.
        WHEN p_m02. lv_id_num = '01000'.
        WHEN p_m03. lv_id_num = '00100'.
        WHEN p_m04. lv_id_num = '00010'.
        WHEN p_m05. lv_id_num = '00001'.
      ENDCASE.
    ENDIF.
    gv_edate =  s_date[ 1 ]-high.
    IF gv_edate IS INITIAL.
      gv_edate = s_date[ 1 ]-low.
    ENDIF.

    gr_sldtrn = NEW #( ).
    gr_sldtrn->gv_optim = p_optim.
    IF p_nodet = abap_true.
      p_slddt = abap_false.
    ENDIF.
    gr_sldtrn->get_data( EXPORTING it_bukrs_rng     = s_bukrs[]
                                   it_hkont_rng     = s_hkont[]
                                   it_gkont_rng     = s_gkont[]
                                   it_date_rng      = s_date[]
                                   it_partner_rng   = s_partn[]
                                   it_vertn_rng     = s_vertn[]
                                   it_mnagr_rng     = s_mnagr[]
                                   iv_bcurr         = p_bcurr
                                   iv_dbukr         = p_bukrs
                                   iv_acurr         = p_acurr
                                   iv_hiderv        = p_hiderv
                                   iv_hidept        = p_hidept
                                   iv_inturn        = p_inturn
                                   iv_zuonr         = lv_zuonr
                                   iv_partner       = lv_partn
                                   iv_vertn         = lv_vertn
                                   iv_vptnr         = p_vptnr
                                   iv_sld_an        = p_slddt
                                   iv_ndoc          = lv_ndoc
                                   iv_mainagr       = p_dop
                                   iv_mlev          = p_mlev
                                   iv_clev          = p_clev
                                   iv_id_num        = lv_id_num
                                   iv_id_typ        = lv_id_typ
                                   iv_crval         = p_crval
                                   iv_accounting_cd = p_acc_cd    " AK_BUTVILOVSK #25179 ZFI_REGBY_K Доработка отчета с вариантом запуска "Без учета документов изменений"
                         IMPORTING et_data          = gt_data
                        ).
  ENDMETHOD.

  METHOD create_fcat.
    DEFINE set_attr.
      IF <ls_fcat>-fieldname = &1.
        IF &2 <> space.
           MOVE &2 TO <ls_fcat>-seltext.
           MOVE &2 TO <ls_fcat>-coltext.
        ENDIF.
        IF &3 <> 0.
          MOVE &3 TO <ls_fcat>-outputlen.
        ENDIF.
        <ls_fcat>-do_sum = &4.
        <ls_fcat>-tech = &5.
      ENDIF.
    END-OF-DEFINITION.
    DATA:
      lv_kpos      TYPE i, "позиция в каталоге колонке дебет
      lv_dpos      TYPE i, "позиция в каталоге колонки кредит
      lv_cnt       TYPE i, " количество выводимыхколонок отчета
      lt_fcat_add  TYPE lvc_t_fcat,
      lv_fieldname TYPE lvc_s_fcat-fieldname,
      lv_discript  TYPE lvc_s_fcat-scrtext_m.

    " заполение каталога полей
    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
        i_bypassing_buffer = abap_true
        i_structure_name   = 'ZFI_REGISTR_ACC'
      CHANGING
        ct_fieldcat        = gt_fcat.
    LOOP AT gt_fcat ASSIGNING FIELD-SYMBOL(<ls_fcat>).
      CASE <ls_fcat>-fieldname.
        WHEN 'HLEVEL' OR 'HKEY' OR 'XOPVW' OR 'CNT_K' OR 'CNT_D'.
          <ls_fcat>-tech = abap_true.
          CONTINUE.
      ENDCASE.
      IF <ls_fcat>-fieldname = 'DEBET'.
        lv_dpos = sy-tabix.
      ELSEIF <ls_fcat>-fieldname = 'KREDIT'.
        lv_kpos = sy-tabix.
      ENDIF.
      IF  <ls_fcat>-fieldname = 'BUDAT'.
        <ls_fcat>-ref_field = 'BUDAT'.
        <ls_fcat>-ref_table = 'BKPF'.
      ENDIF.
      IF  <ls_fcat>-fieldname = 'MONAT'.
        <ls_fcat>-ref_field = 'MONAT'.
        <ls_fcat>-ref_table = 'BKPF'.
      ENDIF.
      set_attr:
        'BUKRS'        'БЕ'(t01)              4 ''  'X',
        'HKONT'        'Счет'(t02)            gc_w_sum ''  '',
        'AGREMNT_NAME' 'Договор'(t28)         gc_w_sum ''  '',
        'PARTNER_NAME' 'Контрагент'(t29)      gc_w_sum ''  '',
        'HKONT_NAME'   'Название счета'(t03)  gc_w_sum ''  '',
        'GKONT'        ''                     gc_w_sum ''  '',
        'WAERS'        ''                     5 ''  '',
        'SLD_I'        'Входящее сальдо'(t07) gc_w_sum 'X' '',
        'SLD_ID'       'Д_ВходCальдо'(t08)    gc_w_sum 'X' '',
        'SLD_IK'       'К_ВходCальдо'(t09)    gc_w_sum 'X' '',
        'DEBET'        'Дебет'(t10)           gc_w_sum 'X' '',
        'KREDIT'       'Кредит'(t11)          gc_w_sum 'X' '',
        'SLD_O'        'Исходящее сальдо'(t12) gc_w_sum 'X' '',
        'HK_GRP'       '' 0 '' 'X',
        'GK_GRP'       '' 0 '' 'X',
        'SLD_OD'       'Д_ИсхCальдо'(t13)     gc_w_sum 'X' '',
        'SLD_OK'       'К_ИсхCальдо'(t14)     gc_w_sum 'X' ''.
      CASE <ls_fcat>-fieldname.
        WHEN 'HKONT' OR 'HKONT_NAME' OR 'MNAME'        OR  'PARTNER_NAME' OR 'PARTNER'
         OR  'ZUONR' OR 'AGREMNT'    OR 'AGREMNT_NAME' OR  'GKONT'        OR 'KVART'
         OR  'MONAT' OR 'BUDAT'      OR 'BUKRS'.
          <ls_fcat>-no_out = abap_true.
          CONTINUE.
        WHEN 'ZZ_DOPEXT_KEY'.
          IF p_dop IS INITIAL.
            <ls_fcat>-tech = abap_true.
            CONTINUE.
          ENDIF.
      ENDCASE.

      IF p_detbal IS INITIAL.
        IF <ls_fcat>-fieldname = 'SLD_OD' OR
           <ls_fcat>-fieldname = 'SLD_OK' OR
           <ls_fcat>-fieldname = 'SLD_ID' OR
           <ls_fcat>-fieldname = 'SLD_IK' .
          <ls_fcat>-tech = abap_true.
          CONTINUE.
        ENDIF.
      ELSE.
        IF <ls_fcat>-fieldname = 'SLD_O' OR
           <ls_fcat>-fieldname = 'SLD_I' .
          <ls_fcat>-tech = abap_true.
          CONTINUE.
        ENDIF.
      ENDIF.
    ENDLOOP.
    "определяем количество корсчетов
    DATA(ls_fieldcat) = VALUE lvc_s_fcat( cfieldname = 'WAERS'
                                          do_sum     = 'X'
                                          decimals   = 2
                                          datatype   = 'CURR'
                                          inttype	   = 'P'
                                          intlen     = 23 ).

    LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      CHECK <ls_data>-gkont <> space.
      IF p_clev > 0.
        <ls_data>-gkont = <ls_data>-gkont(p_clev) && '*'.
      ENDIF.
      IF <ls_data>-cnt_d > 0.
        lv_fieldname = |D_{ <ls_data>-gkont }|.
        READ TABLE lt_fcat_add TRANSPORTING NO FIELDS
                               WITH KEY fieldname = lv_fieldname
                               BINARY SEARCH.
        IF sy-subrc <> 0.
          lv_discript  = |K_{ <ls_data>-gkont }|.
          INSERT VALUE #(
              BASE ls_fieldcat
              seltext   = lv_discript
              coltext   = lv_discript
              fieldname = lv_fieldname
            ) INTO lt_fcat_add INDEX sy-tabix.
        ENDIF.
      ENDIF.
      IF <ls_data>-cnt_k > 0.
        lv_fieldname = |K_{ <ls_data>-gkont }|.
        READ TABLE lt_fcat_add TRANSPORTING NO FIELDS
                               WITH KEY fieldname = lv_fieldname
                               BINARY SEARCH.
        IF sy-subrc <> 0.
          lv_discript  = |Д_{ <ls_data>-gkont }|.
          INSERT VALUE #(
              BASE ls_fieldcat
              seltext   = lv_discript
              coltext   = lv_discript
              fieldname = lv_fieldname
            ) INTO lt_fcat_add INDEX sy-tabix.
        ENDIF.
      ENDIF.
    ENDLOOP.
    SORT lt_fcat_add BY fieldname DESCENDING.
    "колонки корсчетов добавляются в общий каталог
    LOOP AT lt_fcat_add ASSIGNING FIELD-SYMBOL(<ls_add>).
      IF <ls_add>-fieldname(1) = 'D'.
        INSERT <ls_add> INTO gt_fcat INDEX lv_dpos.
      ELSEIF <ls_add>-fieldname(1) = 'K'.
        INSERT <ls_add> INTO gt_fcat INDEX lv_kpos.
      ENDIF.
    ENDLOOP.
    CALL METHOD cl_alv_table_create=>create_dynamic_table
      EXPORTING
        it_fieldcatalog = gt_fcat
      IMPORTING
        ep_table        = gr_data.
    LOOP AT gt_fcat ASSIGNING <ls_fcat>.
      <ls_fcat>-col_pos = sy-tabix.
      IF <ls_fcat>-no_out = abap_false.
        ADD 1 TO lv_cnt.
      ENDIF.
    ENDLOOP.
    IF lv_cnt > 250.
      MESSAGE i121(zfi).
      LEAVE TO SCREEN 0.
    ENDIF.

  ENDMETHOD.

  METHOD init_tree.
    DATA:
      ls_variant TYPE disvariant,
      lr_cont    TYPE REF TO cl_gui_custom_container.
    FIELD-SYMBOLS:
      <lt_data> TYPE STANDARD TABLE.

    IF gr_tree IS BOUND.
      RETURN.
    ENDIF.
    form_date_head( ).

    create_fcat( ).                   " создание каталога полей и динамической таблицы
    build_sort_table( ).              " задание уровней группировки
    ASSIGN gr_data->* TO <lt_data>.

    lr_cont = NEW cl_gui_custom_container( container_name = 'SC_TREE' ).
    IF lr_cont IS NOT BOUND.
      RETURN.
    ENDIF.

    gr_tree = NEW #( i_parent              = lr_cont
                     i_node_selection_mode = cl_gui_column_tree=>node_sel_mode_multiple
                     i_item_selection      = 'X'
                     i_no_html_header      = 'X'
                     i_no_toolbar          = abap_false ).
    IF gr_tree IS NOT BOUND.
      RETURN.
    ENDIF.

    ls_variant-report = sy-repid.

    gr_tree->set_registered_events( EXPORTING events = VALUE #( ( eventid = cl_gui_column_tree=>eventid_item_double_click )
                                                                ( eventid = cl_gui_column_tree=>eventid_expand_no_children ) )
                                    EXCEPTIONS cntl_error                = 1
                                               cntl_system_error         = 2
                                               illegal_event_combination = 3 ).
    IF sy-subrc = 0.
      SET HANDLER on_item_double_click FOR gr_tree.
    ELSE.
      RETURN.
    ENDIF.
    fill_tree_table( CHANGING ct_data = <lt_data> ).
    gr_tree->set_table_for_first_display( EXPORTING i_save          = 'A'
                                                    is_variant      = ls_variant
                                          CHANGING  it_sort         = gt_sort
                                                    it_outtab       = <lt_data>
                                                    it_fieldcatalog = gt_fcat ).

    gr_tree->frontend_update( ).
    gr_tree->get_toolbar_object( IMPORTING er_toolbar =  DATA(lr_tbar) ).
    lr_tbar->add_button( EXPORTING fcode     = 'DWL_XLS'
                                   icon      = icon_xls
                                   butn_type = cntb_btype_button
                                   text      = ''
                                   quickinfo = TEXT-t62 ).
    lr_tbar->add_button( EXPORTING fcode     = 'DWL_XLS_WAERS'
                                   icon      = icon_xls
                                   butn_type = cntb_btype_button
                                   text      = ''
                                   quickinfo = TEXT-t63 ).

* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
    DATA:
      lv_bukrs        TYPE bukrs,
      lv_hkont        TYPE hkont,
      lv_last_day     TYPE datum,
      lv_mandt        TYPE mandt,

      lt_unique_bukrs TYPE SORTED TABLE OF bukrs WITH UNIQUE KEY table_line,
      lt_unique_hkont TYPE SORTED TABLE OF hkont WITH UNIQUE KEY table_line.

    SELECT bukrs FROM t001
      WHERE bukrs IN @s_bukrs
      INTO TABLE @lt_unique_bukrs.
    IF sy-subrc = 0.
*{   REPLACE        SHVK900285                                        1
*\      SELECT saknr AS hkont FROM skb1
*\        WHERE bukrs IN @s_bukrs
*\          AND saknr IN @s_hkont
*\          AND fstag = 'H001'
*\        INTO TABLE @lt_unique_hkont.
      SELECT distinct saknr AS hkont FROM skb1
        WHERE bukrs IN @s_bukrs
          AND saknr IN @s_hkont
          AND fstag = 'H001'
        INTO TABLE @lt_unique_hkont.
*}   REPLACE
    ENDIF.

    IF    lines( lt_unique_bukrs ) = 1
      AND lines( lt_unique_hkont ) = 1
      AND lines( s_date )          = 1
      AND p_vptnr                  = abap_true
      AND p_slddt                  = abap_true
      AND p_detbal                 = abap_false
      AND s_date-sign              = 'I'
      AND s_date-option            = 'BT'
      AND s_date-high              IS NOT INITIAL.
      READ TABLE lt_unique_bukrs INTO lv_bukrs INDEX 1.
      READ TABLE lt_unique_hkont INTO lv_hkont INDEX 1.

      CALL FUNCTION 'LAST_DAY_OF_MONTHS'
        EXPORTING
          day_in            = s_date-high
        IMPORTING
          last_day_of_month = lv_last_day
        EXCEPTIONS
          day_in_no_date    = 1
          OTHERS            = 2.
      IF lv_last_day = s_date-high.
        SELECT SINGLE mandt FROM zfi_vptnr_saldo
          WHERE budat > @lv_last_day
            AND bukrs IN @s_bukrs
            AND hkont IN @s_hkont
          INTO @lv_mandt.
        IF sy-subrc <> 0.
          lr_tbar->add_button( EXPORTING fcode     = 'SAVE_BALANCE'
                                         icon      = ''
                                         butn_type = cntb_btype_button
                                         text      = TEXT-t74
                                         quickinfo = TEXT-t74 ).
        ENDIF.
      ENDIF.
    ENDIF.
* <-- AK_BUTVILOVS #8000001029
    SET HANDLER on_function_selected FOR lr_tbar.
    gr_tree->frontend_update( ).
  ENDMETHOD.

  METHOD build_sort_table.

    DEFINE add_sort.
      ADD 1 TO lv_pos.
      APPEND INITIAL LINE TO gt_sort ASSIGNING <ls_sort>.
      <ls_sort>-spos      = lv_pos.
      <ls_sort>-fieldname = &1.
      <ls_sort>-up        = 'X'.
      <ls_sort>-subtot    = 'X'.
    END-OF-DEFINITION.
    DATA:
    lv_pos TYPE i.
    FIELD-SYMBOLS:
    <ls_sort> TYPE lvc_s_sort.

    add_sort 'WAERS'.
    IF p_bukrs = abap_true.
      add_sort 'BUKRS'.
    ENDIF.
    add_sort 'HKONT_NAME'.
    IF p_vptnr = abap_true OR sy-tcode <> lcl_report=>gv_scode.
      add_sort 'PARTNER_NAME'.
    ENDIF.
    IF p_dop = abap_true.
      add_sort 'ZZ_DOPEXT_KEY'.
    ENDIF.
    IF p_agrmn = abap_true.
      add_sort 'AGREMNT_NAME'.
    ENDIF.
    IF p_zuonr = abap_true
     OR p_zuon = abap_true.
      add_sort 'ZUONR'.
    ENDIF.
  ENDMETHOD.                               " BUILD_SORT_TABLE

  METHOD form_date_head.
    " Наименование БЕ
    zcl_names=>get_org_names( EXPORTING it_bukrs = s_bukrs[]
                              IMPORTING ev_butxt = DATA(lv_org_name)
                                        ev_bukrs = DATA(lv_bukrs) ).
    gv_bukrs     = COND #( WHEN lv_org_name IS NOT INITIAL THEN lv_bukrs ELSE '' ) .
    gv_prod_name = COND #( WHEN lv_org_name IS NOT INITIAL THEN lv_org_name ELSE lv_bukrs ).
  ENDMETHOD.

  METHOD on_function_selected.
    gv_fcode = fcode.
    CASE fcode.
      WHEN 'DWL_XLS' OR 'DWL_XLS_WAERS'. out_to_excel( ).
* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
      WHEN 'SAVE_BALANCE'.
        save_balance( ).
* <-- AK_BUTVILOVS #8000001029
    ENDCASE.
  ENDMETHOD.
  METHOD excel_sld.
    TYPES:
      BEGIN OF lty_s_registr,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        sgtxt      TYPE sgtxt,
        hkont_name TYPE zfi_registr_acc-hkont_name,
        partner    TYPE lifnr,
        sld_id     TYPE zfi_registr_acc-sld_id,
        sld_ik     TYPE zfi_registr_acc-sld_ik,
        sld_od     TYPE zfi_registr_acc-sld_od,
        sld_ok     TYPE zfi_registr_acc-sld_ok,
        debet      TYPE zfi_registr_acc-debet,
        kredit     TYPE zfi_registr_acc-kredit,
      END OF lty_s_registr,

      BEGIN OF lty_s_gkontd,
        hkont   TYPE hkont,
        bukrs   TYPE bukrs,
        name    TYPE char200,
        gkont_d TYPE gkont,
        gkont_k TYPE gkont,
        dmbtr_d TYPE dmbtr,
        dmbtr_k TYPE dmbtr,
        sign    TYPE char1,
      END OF lty_s_gkontd,

      BEGIN OF lty_s_cluster,
        clustr TYPE stxl-clustr,
        clustd TYPE stxl-clustd,
      END OF lty_s_cluster,

      BEGIN OF lty_s_stxl,
        tdobject TYPE stxl-tdobject,
        tdid     TYPE stxl-tdid,
        tdname   TYPE stxl-tdname,
        cluster  TYPE lty_s_cluster,
      END OF lty_s_stxl,

      BEGIN OF lty_s_text,
        bukrs TYPE bukrs,
        belnr TYPE belnr_d,
        gjahr TYPE gjahr,
        buzei TYPE buzei,
        text  TYPE string,
      END OF lty_s_text,
      lty_t_text TYPE STANDARD TABLE OF lty_s_text WITH DEFAULT KEY.

    DATA:
      lt_main          TYPE STANDARD TABLE OF gty_s_tab_excel WITH NON-UNIQUE SORTED KEY key1 COMPONENTS  hkont bukrs belnr gjahr gkont_d gkont_k sgtxt p_buzei c_buzei,
      lt_collect       TYPE TABLE OF gty_s_collect,
      lt_coll_buk      TYPE SORTED TABLE OF gty_s_collect WITH UNIQUE KEY hkont bukrs sgtxt,
      lt_group_waers   TYPE TABLE OF gty_s_tab_excel,
      lt_detail        TYPE STANDARD TABLE OF zfi_registr_acc_detail,
      ls_kont          TYPE  gty_s_tab_excel,
      lt_group_gkont   TYPE TABLE OF gty_s_tab_excel,
      lt_group_gkont_d TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_d,
      lt_group_gkont_k TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_k,
      lt_detail_ex     TYPE TABLE OF zfi_registr_acc_detail,
      lt_hkont         TYPE RANGE OF bseg-hkont,
      ls_data_ex       TYPE lty_s_registr,
      ls_main_sum      TYPE gty_s_tab_excel,
      lv_blart         TYPE char20,
      lv_old_one       TYPE i,
      lv_nom           TYPE i,
      lv_tabix         TYPE i,
      lv_insert_line   TYPE char1,
      lv_flag          TYPE char1,
      lv_gkont_d       TYPE gkont,
      lv_gkont_k       TYPE gkont,
      lt_text          TYPE lty_t_text.

    FIELD-SYMBOLS: <lt_data_ex> TYPE STANDARD TABLE.

    SELECT blart, ltext
      FROM t003t
      INTO TABLE @DATA(lt_blart)
     WHERE spras = @sy-langu
     ORDER BY blart.

    ASSIGN gr_data->* TO <lt_data_ex>.
    " группируем по счету
    LOOP AT <lt_data_ex> ASSIGNING FIELD-SYMBOL(<ls_data_ex>).
      MOVE-CORRESPONDING <ls_data_ex> TO ls_data_ex.

      READ TABLE lt_collect[] ASSIGNING FIELD-SYMBOL(<ls_collect>)
                              WITH KEY hkont = COND #( WHEN p_mlev IS INITIAL
                                                       THEN ls_data_ex-hkont
                                                       ELSE ls_data_ex-hkont_name )
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = COND #( WHEN p_mlev IS INITIAL
                                        THEN ls_data_ex-hkont
                                        ELSE ls_data_ex-hkont_name )
                        bukrs = ls_data_ex-bukrs
                        hkont_name = ls_data_ex-hkont_name
                      ) INTO lt_collect INDEX sy-tabix ASSIGNING <ls_collect> .
      ENDIF.
      <ls_collect>-sld_id = <ls_collect>-sld_id + ls_data_ex-sld_id.
      <ls_collect>-sld_ik = <ls_collect>-sld_ik + ls_data_ex-sld_ik.
      <ls_collect>-sld_od = <ls_collect>-sld_od + ls_data_ex-sld_od.
      <ls_collect>-sld_ok = <ls_collect>-sld_ok + ls_data_ex-sld_ok.
      <ls_collect>-debet  = <ls_collect>-debet  + ls_data_ex-debet.
      <ls_collect>-kredit = <ls_collect>-kredit + ls_data_ex-kredit.
    ENDLOOP.
    SORT lt_collect BY hkont.
    lt_hkont[] = VALUE #(
        FOR <ls> IN lt_collect (
          sign = 'I'
          option = COND #( WHEN p_mlev IS INITIAL
                           THEN 'EQ'
                           ELSE 'CP')
          low = <ls>-hkont
        ) ).

    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng =  lt_hkont
                                         iv_shkzg     = 'H'
                               IMPORTING et_detail    = lt_detail
                              ).
    APPEND LINES OF lt_detail TO lt_detail_ex.
    CLEAR lt_detail.
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng =  lt_hkont
                                         iv_shkzg     = 'S'
                               IMPORTING et_detail    = lt_detail ).
    APPEND LINES OF lt_detail TO lt_detail_ex.

    lcl_report=>read_text( CHANGING ct_text   = lt_text
                                    ct_detail = lt_detail_ex ).

    DATA(lv_num_razn) = gc_kont - p_mlev.
    DATA(lv_num_rzkont) = gc_kont - p_clev.
    SORT lt_text BY bukrs belnr gjahr buzei.

    LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail>).
      READ TABLE lt_text ASSIGNING FIELD-SYMBOL(<ls_text>)
                         WITH KEY bukrs = <ls_detail>-bukrs
                                  belnr = <ls_detail>-belnr
                                  gjahr = <ls_detail>-gjahr
                                  buzei = <ls_detail>-p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_detail>-p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_detail>-p_hkont IS NOT INITIAL.
        <ls_detail>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_clev > 0 AND <ls_detail>-c_hkont IS NOT INITIAL.
        <ls_detail>-c_hkont+p_clev(lv_num_rzkont) = '*'.
      ENDIF.

      INSERT VALUE #( hkont = <ls_detail>-p_hkont
                      bukrs = <ls_detail>-bukrs
                      sgtxt = <ls_detail>-p_sgtxt
                    ) INTO TABLE lt_coll_buk.

      " группировка по валюте
      READ TABLE lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_group_waers>)
                                WITH KEY hkont = <ls_detail>-p_hkont
                                         waers = <ls_detail>-waers_doc
                                BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        waers = <ls_detail>-waers_doc
                      ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers>.
      ENDIF.
      IF <ls_detail>-shkzg = 'S'.
        <ls_group_waers>-wrbtr_d = <ls_group_waers>-wrbtr_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_group_waers>-wrbtr_k = <ls_group_waers>-wrbtr_k + <ls_detail>-wrbtr.
      ENDIF.
      " группировка по корреспонд. счету по дебету
      READ TABLE lt_group_gkont_d ASSIGNING FIELD-SYMBOL(<ls_group_gkont_d>)
                                  WITH KEY hkont   = <ls_detail>-p_hkont
                                           gkont_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '' )
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        gkont_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '' )
                      ) INTO lt_group_gkont_d INDEX sy-tabix ASSIGNING <ls_group_gkont_d>.
      ENDIF.
      <ls_group_gkont_d>-dmbtr_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_group_gkont_d>-dmbtr_d + <ls_detail>-dmbtr ELSE <ls_group_gkont_d>-dmbtr_d ).

      " группировка по корреспонд. счету по кредиту
      READ TABLE lt_group_gkont_k ASSIGNING FIELD-SYMBOL(<ls_group_gkont_k>)
                                  WITH KEY hkont   = <ls_detail>-p_hkont
                                           gkont_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '' )
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        gkont_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '')
                      ) INTO lt_group_gkont_k INDEX sy-tabix ASSIGNING <ls_group_gkont_k>.
      ENDIF.
      <ls_group_gkont_k>-dmbtr_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_group_gkont_k>-dmbtr_k + <ls_detail>-dmbtr ELSE <ls_group_gkont_k>-dmbtr_k ).
    ENDLOOP.

    DELETE lt_group_gkont_k WHERE gkont_k IS INITIAL AND dmbtr_k IS INITIAL.
    DELETE lt_group_gkont_d WHERE gkont_d IS INITIAL AND dmbtr_d IS INITIAL.

    UNASSIGN: <ls_group_gkont_k>,<ls_group_gkont_d>.
    SORT lt_detail_ex BY p_hkont shkzg DESCENDING bukrs p_sgtxt budat belnr.
    " формирование таблицы для вывода в эксель
    LOOP AT lt_collect ASSIGNING FIELD-SYMBOL(<ls_col>).

      CLEAR: ls_main_sum,lv_old_one.

      READ TABLE lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_hkont>)
                              WITH KEY p_hkont = <ls_col>-hkont
                              BINARY SEARCH.
      IF sy-subrc = 0.
        APPEND VALUE #( nom     = TEXT-067 && ` `  && <ls_col>-hkont_name
                        sld_id  = <ls_col>-sld_id
                        sld_ik  = <ls_col>-sld_ik
                        sld_od  = <ls_col>-sld_od
                        sld_ok  = <ls_col>-sld_ok
                        dmbtr_d = <ls_col>-debet
                        dmbtr_k = <ls_col>-kredit
                      ) TO lt_main.
      ELSE.                                                                     " { 8000000641 Неверно формируется выходная форма AK_INPRANNIK
        APPEND VALUE #( nom     = TEXT-067 && ` `  && <ls_col>-hkont_name       "выводим также счета, по которым не было оборотов
                        sld_id  = <ls_col>-sld_id
                        sld_ik  = <ls_col>-sld_ik
                        sld_od  = <ls_col>-sld_od
                        sld_ok  = <ls_col>-sld_ok
                        dmbtr_d = <ls_col>-debet
                        dmbtr_k = <ls_col>-kredit
                      ) TO lt_main.
        lv_insert_line = 'X'.                                                   " } 8000000641 Неверно формируется выходная форма AK_INPRANNIK
      ENDIF.

      LOOP AT lt_coll_buk ASSIGNING FIELD-SYMBOL(<ls_coll_b>) WHERE hkont = <ls_col>-hkont.
        CLEAR: lv_old_one.

        LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail_hk>) WHERE p_hkont = <ls_col>-hkont
                                                                      AND bukrs   = <ls_coll_b>-bukrs
                                                                      AND p_sgtxt = <ls_coll_b>-sgtxt.
          CLEAR: lv_gkont_d,lv_gkont_k.
          ADD 1 TO lv_old_one.
          IF lv_old_one = 1.
            lv_flag = 'X'.
          ENDIF.
          TRY.
              lv_blart = lt_blart[ blart = <ls_detail_hk>-blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          IF <ls_detail_hk>-shkzg = 'S'.
            lv_gkont_d = COND #( WHEN <ls_detail_hk>-c_hkont IS INITIAL AND <ls_detail_hk>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_detail_hk>-c_hkont ).
          ELSE.
            lv_gkont_k = COND #( WHEN <ls_detail_hk>-c_hkont IS INITIAL AND <ls_detail_hk>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_detail_hk>-c_hkont ).
          ENDIF.
          READ TABLE  lt_main ASSIGNING FIELD-SYMBOL(<ls_excel>)
                              WITH KEY key1
                              COMPONENTS hkont   = <ls_col>-hkont
                                         bukrs_t = <ls_detail_hk>-bukrs
                                         belnr   = <ls_detail_hk>-belnr
                                         gjahr   = <ls_detail_hk>-gjahr
                                         p_buzei = <ls_detail_hk>-p_buzei
                                         c_buzei = <ls_detail_hk>-c_buzei
                                         sgtxt   = <ls_coll_b>-sgtxt.
          IF sy-subrc <> 0.
            lv_nom = lv_nom + 1.
            APPEND VALUE #(  nom      = lv_nom
                             bukrs    = COND #( WHEN lv_flag IS NOT INITIAL THEN <ls_detail_hk>-bukrs ELSE '')
                             sgtxt    = COND #( WHEN lv_flag IS NOT INITIAL THEN <ls_detail_hk>-p_sgtxt ELSE '-"-')
                             name_pyd = lv_blart
                             belnr    = <ls_detail_hk>-belnr
                             budat    = <ls_detail_hk>-budat
                             nom_pyd  = <ls_detail_hk>-xblnr
                             bldat    = <ls_detail_hk>-bldat
                             waers    = COND #( WHEN <ls_detail_hk>-waers_doc = p_waers
                                                  OR <ls_detail_hk>-wrbtr IS INITIAL
                                                THEN ''
                                                ELSE <ls_detail_hk>-waers_doc )
                             sld_id  = ''
                             sld_ik  = ''
                             gkont_d = lv_gkont_d
                             dmbtr_d = COND #( WHEN <ls_detail_hk>-shkzg = 'S' THEN <ls_detail_hk>-dmbtr ELSE '' )
                             wrbtr_d = COND #( WHEN <ls_detail_hk>-shkzg = 'S' AND <ls_detail_hk>-waers_doc <> p_waers THEN <ls_detail_hk>-wrbtr ELSE '' )
                             gkont_k = lv_gkont_k
                             dmbtr_k = COND #( WHEN <ls_detail_hk>-shkzg = 'H' THEN <ls_detail_hk>-dmbtr ELSE '' )
                             wrbtr_k = COND #( WHEN <ls_detail_hk>-shkzg = 'H' AND <ls_detail_hk>-waers_doc <> p_waers THEN <ls_detail_hk>-wrbtr ELSE '' )
                             sld_od  = ''
                             sld_ok  = ''
                             gjahr   = <ls_detail_hk>-gjahr
                             bukrs_t = <ls_detail_hk>-bukrs
                             hkont   = <ls_detail_hk>-p_hkont
                             c_buzei = <ls_detail_hk>-c_buzei
                             p_buzei = <ls_detail_hk>-p_buzei
                           ) TO lt_main.
          ENDIF.
          CLEAR lv_flag.
          IF <ls_detail_hk>-shkzg = 'S'.
            ls_main_sum-dmbtr_d = ls_main_sum-dmbtr_d + <ls_detail_hk>-dmbtr.
            IF <ls_detail_hk>-waers_doc <> p_waers.
              ls_main_sum-wrbtr_d = ls_main_sum-wrbtr_d + <ls_detail_hk>-wrbtr.
            ENDIF.
          ELSE.
            ls_main_sum-dmbtr_k = ls_main_sum-dmbtr_k + <ls_detail_hk>-dmbtr.
            IF <ls_detail_hk>-waers_doc <> p_waers.
              ls_main_sum-wrbtr_k = ls_main_sum-wrbtr_k + <ls_detail_hk>-wrbtr.
            ENDIF.
          ENDIF.
          lv_insert_line = 'X'.
        ENDLOOP.

      ENDLOOP.
      IF lv_insert_line IS NOT INITIAL.
        ls_main_sum-sgtxt = TEXT-066 && ` ` && <ls_col>-hkont.
        ls_main_sum-sld_od = <ls_col>-sld_od.
        ls_main_sum-sld_ok = <ls_col>-sld_ok.
        ls_main_sum-sld_ik = <ls_col>-sld_ik.
        ls_main_sum-sld_id = <ls_col>-sld_id.
        APPEND ls_main_sum TO lt_main.  " таблица - Всего по счету

        UNASSIGN: <ls_group_gkont_d>.

        " в разрезе валют
        IF gv_fcode = 'DWL_XLS_WAERS'.
          LOOP AT lt_group_waers ASSIGNING <ls_group_waers> WHERE hkont = <ls_col>-hkont.
            IF <ls_group_waers>-waers <> p_waers AND ( <ls_group_waers>-wrbtr_d IS NOT INITIAL
                                                  OR <ls_group_waers>-wrbtr_k IS NOT INITIAL ).
              lv_tabix = lv_tabix + 1.
              <ls_group_waers>-bukrs = ''.
              IF lv_tabix = 1.
                <ls_group_waers>-sgtxt = TEXT-064.
              ENDIF.
              <ls_group_waers>-bukrs = ''.
              <ls_group_waers>-sign = 'W'.
              APPEND <ls_group_waers> TO lt_main.
            ENDIF.
          ENDLOOP.
        ENDIF.

        CLEAR lv_tabix.

        LOOP AT lt_group_gkont_d ASSIGNING <ls_group_gkont_d> WHERE hkont = <ls_col>-hkont.
          APPEND VALUE #( gkont_d = <ls_group_gkont_d>-gkont_d
                          gkont_k = <ls_group_gkont_d>-gkont_k
                          dmbtr_d = <ls_group_gkont_d>-dmbtr_d
                          dmbtr_k = <ls_group_gkont_d>-dmbtr_k
                          sign = 'S'
                        ) TO lt_group_gkont.
        ENDLOOP.

        UNASSIGN: <ls_group_gkont_d>.

        " добавляем по счету и бе корреспонденцию по кредиту в табл
        LOOP AT lt_group_gkont_k ASSIGNING <ls_group_gkont_k> WHERE hkont = <ls_col>-hkont.
          lv_tabix = lv_tabix + 1.
          ASSIGN lt_group_gkont[ lv_tabix ] TO FIELD-SYMBOL(<ls_group_gkont>).
          IF sy-subrc = 0.
            <ls_group_gkont>-gkont_k = <ls_group_gkont_k>-gkont_k.
            <ls_group_gkont>-dmbtr_k = <ls_group_gkont_k>-dmbtr_k.
          ELSE.
            APPEND VALUE #( gkont_d = <ls_group_gkont_k>-gkont_d
                            gkont_k = <ls_group_gkont_k>-gkont_k
                            dmbtr_d = <ls_group_gkont_k>-dmbtr_d
                            dmbtr_k = <ls_group_gkont_k>-dmbtr_k
                            sign = 'S'
                          ) TO lt_group_gkont.
          ENDIF.
        ENDLOOP.
        CLEAR lv_tabix.
        UNASSIGN: <ls_group_waers>,<ls_group_gkont>.

        ls_kont-gkont_d = '!'.
        ls_kont-gkont_k = '!'.
        MODIFY lt_group_gkont FROM ls_kont
                              TRANSPORTING gkont_d
                              WHERE gkont_d IS INITIAL AND dmbtr_d IS NOT INITIAL.

        MODIFY lt_group_gkont FROM ls_kont
                              TRANSPORTING gkont_k
                              WHERE gkont_k IS INITIAL AND dmbtr_k IS NOT INITIAL.

        ASSIGN lt_group_gkont[ 1 ] TO <ls_group_gkont>.
        IF sy-subrc = 0.
          <ls_group_gkont>-sgtxt = TEXT-065.
        ENDIF.

        APPEND LINES OF lt_group_gkont TO lt_main.
      ENDIF.
      CLEAR: lt_group_gkont,lv_insert_line.

    ENDLOOP.

    MOVE-CORRESPONDING lt_main TO ct_main.
  ENDMETHOD.

  METHOD read_text.
    TYPES:
      BEGIN OF lty_s_cluster,
        clustr TYPE stxl-clustr,
        clustd TYPE stxl-clustd,
      END OF lty_s_cluster,

      BEGIN OF lty_s_stxl,
        tdobject TYPE stxl-tdobject,
        tdid     TYPE stxl-tdid,
        tdname   TYPE stxl-tdname,
        cluster  TYPE lty_s_cluster,
      END OF lty_s_stxl.

    CONSTANTS:
      BEGIN OF lc_text,
        id     TYPE stxl-tdid     VALUE '0001',
        object TYPE stxl-tdobject VALUE 'DOC_ITEM',
      END OF lc_text.

    DATA: lv_text_name TYPE stxl-tdname,
          lt_cluster   TYPE STANDARD TABLE OF lty_s_cluster,
          lt_tlines    TYPE STANDARD TABLE OF tline,
          lt_detail    TYPE TABLE OF zfi_registr_acc_detail,
          lt_stxl      TYPE STANDARD TABLE OF lty_s_stxl.

    MOVE-CORRESPONDING ct_detail TO lt_detail.

    LOOP AT lt_detail ASSIGNING FIELD-SYMBOL(<ls_det_sgtxt>).
      lv_text_name(4)    = <ls_det_sgtxt>-bukrs.
      lv_text_name+4(10) = <ls_det_sgtxt>-belnr.
      lv_text_name+14(4) = <ls_det_sgtxt>-gjahr.
      lv_text_name+18(3) = <ls_det_sgtxt>-p_buzei.
      READ TABLE lt_stxl TRANSPORTING NO FIELDS
                         WITH KEY tdobject = lc_text-object
                                  tdid     = lc_text-id
                                  tdname   = lv_text_name
                         BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( tdobject = lc_text-object
                        tdid     = lc_text-id
                        tdname   = lv_text_name ) INTO lt_stxl INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    " Вычитываем Подробный текст по позициям бух. документа
    IF lt_stxl IS NOT INITIAL.
      SELECT tdobject tdid tdname clustr clustd
        FROM stxl
        INTO TABLE lt_stxl
        FOR ALL ENTRIES IN lt_stxl
        WHERE tdobject = lt_stxl-tdobject
          AND tdid     = lt_stxl-tdid
          AND tdname   = lt_stxl-tdname
          AND tdspras  = sy-langu.

      SORT lt_stxl BY tdobject tdid tdname.
    ENDIF.

    LOOP AT lt_stxl ASSIGNING FIELD-SYMBOL(<ls_stxl>).
      APPEND <ls_stxl>-cluster TO lt_cluster.

      AT END OF tdname.
        IF lt_cluster IS NOT INITIAL.
          IMPORT tline = lt_tlines FROM INTERNAL TABLE lt_cluster.

          APPEND VALUE gty_s_text(
               bukrs = <ls_stxl>-tdname(2)
               belnr = <ls_stxl>-tdname+4(10)
               gjahr = <ls_stxl>-tdname+14(4)
               buzei = <ls_stxl>-tdname+18(3)
               text  = REDUCE #( INIT lv_t TYPE string
                                  FOR ls_lines IN lt_tlines
                                 NEXT lv_t = lv_t && ` ` && ls_lines-tdline )
           ) TO ct_text.
          CLEAR: lt_cluster, lt_tlines.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.

  METHOD read_text_trn.
    TYPES:
      BEGIN OF lty_s_cluster,
        clustr TYPE stxl-clustr,
        clustd TYPE stxl-clustd,
      END OF lty_s_cluster,

      BEGIN OF lty_s_stxl,
        tdobject TYPE stxl-tdobject,
        tdid     TYPE stxl-tdid,
        tdname   TYPE stxl-tdname,
        cluster  TYPE lty_s_cluster,
      END OF lty_s_stxl.

    CONSTANTS:
      BEGIN OF lc_text,
        id     TYPE stxl-tdid     VALUE '0001',
        object TYPE stxl-tdobject VALUE 'DOC_ITEM',
      END OF lc_text.

    DATA: lv_text_name TYPE stxl-tdname,
          lt_cluster   TYPE STANDARD TABLE OF lty_s_cluster,
          lt_tlines    TYPE STANDARD TABLE OF tline,
          lt_stxl      TYPE STANDARD TABLE OF lty_s_stxl,
          lt_data      TYPE STANDARD TABLE OF gty_s_detail.

    MOVE-CORRESPONDING ct_data TO lt_data.

    LOOP AT lt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      lv_text_name(4)    = <ls_data>-r_data->bukrs.
      lv_text_name+4(10) = <ls_data>-r_data->belnr.
      lv_text_name+14(4) = <ls_data>-r_data->gjahr.
      lv_text_name+18(3) = <ls_data>-r_data->p_buzei.
      READ TABLE lt_stxl TRANSPORTING NO FIELDS
                         WITH KEY tdobject = lc_text-object
                                  tdid     = lc_text-id
                                  tdname   = lv_text_name
                         BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( tdobject = lc_text-object
                        tdid     = lc_text-id
                        tdname   = lv_text_name ) INTO lt_stxl INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    " Вычитываем Подробный текст по позициям бух. документа
    IF lt_stxl IS NOT INITIAL.
      SELECT tdobject tdid tdname clustr clustd
        FROM stxl
        INTO TABLE lt_stxl
         FOR ALL ENTRIES IN lt_stxl
       WHERE tdobject = lt_stxl-tdobject
         AND tdid     = lt_stxl-tdid
         AND tdname   = lt_stxl-tdname
         AND tdspras  = sy-langu.

      SORT lt_stxl BY tdobject tdid tdname.
    ENDIF.

    LOOP AT lt_stxl ASSIGNING FIELD-SYMBOL(<ls_stxl>).
      APPEND <ls_stxl>-cluster TO lt_cluster.

      AT END OF tdname.
        IF lt_cluster IS NOT INITIAL.
          IMPORT tline = lt_tlines FROM INTERNAL TABLE lt_cluster.

          APPEND VALUE gty_s_text(
               bukrs = <ls_stxl>-tdname(2)
               belnr = <ls_stxl>-tdname+4(10)
               gjahr = <ls_stxl>-tdname+14(4)
               buzei = <ls_stxl>-tdname+18(3)
               text  = REDUCE #( INIT lv_t TYPE string
                                  FOR ls_lines IN lt_tlines
                                 NEXT lv_t = lv_t && ` ` && ls_lines-tdline )
          ) TO ct_text.
          CLEAR: lt_cluster, lt_tlines.
        ENDIF.
      ENDAT.
    ENDLOOP.
  ENDMETHOD.

  METHOD exc_agreement.
    DATA: lt_vertn TYPE STANDARD TABLE OF gty_s_vertn.

    FIELD-SYMBOLS: <ls_beg_data>    TYPE gty_s_detail,
                   <ls_detail_data> TYPE zfi_registr_acc_detail.


    LOOP AT ct_beg ASSIGNING FIELD-SYMBOL(<ls_beg>).
      ASSIGN <ls_beg> TO <ls_beg_data>.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <ls_beg_data>-p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <ls_beg_data>-p_vertn ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.
    UNASSIGN: <ls_beg_data>.

    LOOP AT ct_end ASSIGNING FIELD-SYMBOL(<ls_end>).
      ASSIGN <ls_beg> TO <ls_beg_data>.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <ls_beg_data>-p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <ls_beg_data>-p_vertn ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    LOOP AT ct_detail ASSIGNING FIELD-SYMBOL(<ls_detail>).
      ASSIGN <ls_detail> TO <ls_detail_data>.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <ls_detail_data>-p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <ls_detail_data>-p_vertn ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    SORT lt_vertn BY zext_key.
    IF lt_vertn IS NOT INITIAL.
      SELECT zext_key, zz_ndoc
        FROM zcase
        INTO TABLE @lt_vertn
         FOR ALL ENTRIES IN @lt_vertn
       WHERE zext_key = @lt_vertn-zext_key
         AND langu = @sy-langu.
    ENDIF.
    ct_vertn[] = lt_vertn[].
  ENDMETHOD.

  METHOD exc_agreement_buk.
    DATA: lt_vertn TYPE STANDARD TABLE OF gty_s_vertn .

    FIELD-SYMBOLS:
      <lv_vertn> TYPE zfi_registr_acc_detail-p_vertn.


    LOOP AT ct_beg ASSIGNING FIELD-SYMBOL(<ls_beg>).
      ASSIGN COMPONENT 'P_VERTN' OF STRUCTURE <ls_beg> TO <lv_vertn>.
      ASSERT sy-subrc = 0.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <lv_vertn>
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <lv_vertn> ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    LOOP AT ct_end ASSIGNING FIELD-SYMBOL(<ls_end>).
      ASSIGN COMPONENT 'P_VERTN' OF STRUCTURE <ls_end> TO <lv_vertn>.
      ASSERT sy-subrc = 0.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <lv_vertn>
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <lv_vertn> ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    LOOP AT ct_detail ASSIGNING FIELD-SYMBOL(<ls_detail>).
      ASSIGN COMPONENT 'P_VERTN' OF STRUCTURE <ls_detail> TO <lv_vertn>.
      ASSERT sy-subrc = 0.
      READ TABLE lt_vertn TRANSPORTING NO FIELDS
                          WITH KEY zext_key = <lv_vertn>
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( zext_key = <lv_vertn> ) INTO lt_vertn INDEX sy-tabix.
      ENDIF.
    ENDLOOP.

    SORT lt_vertn BY zext_key.
    IF lt_vertn IS NOT INITIAL.
      SELECT zext_key, zz_ndoc
        FROM zcase
        INTO TABLE @lt_vertn
         FOR ALL ENTRIES IN @lt_vertn
       WHERE zext_key = @lt_vertn-zext_key
         AND langu = @sy-langu.
    ENDIF.
    ct_vertn[] = lt_vertn[].
  ENDMETHOD.

  METHOD excel_sld_whbukrs.
    TYPES:
      BEGIN OF lty_s_registr,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        sgtxt      TYPE sgtxt,
        hkont_name TYPE zfi_registr_acc-hkont_name,
        partner    TYPE lifnr,
        sld_id     TYPE zfi_registr_acc-sld_id,
        sld_ik     TYPE zfi_registr_acc-sld_ik,
        sld_od     TYPE zfi_registr_acc-sld_od,
        sld_ok     TYPE zfi_registr_acc-sld_ok,
        debet      TYPE zfi_registr_acc-debet,
        kredit     TYPE zfi_registr_acc-kredit,
      END OF lty_s_registr,

      BEGIN OF lty_s_gkontd,
        hkont   TYPE hkont,
        bukrs   TYPE bukrs,
        name    TYPE char200,
        gkont_d TYPE gkont,
        gkont_k TYPE gkont,
        dmbtr_d TYPE dmbtr,
        dmbtr_k TYPE dmbtr,
        sign    TYPE char1,
      END OF lty_s_gkontd.

    DATA:
      lt_main          TYPE STANDARD TABLE OF gty_s_tab_excel WITH NON-UNIQUE SORTED KEY key1 COMPONENTS  hkont budat belnr bukrs gkont_d gkont_k sgtxt p_buzei c_buzei,
      lt_collect       TYPE TABLE OF gty_s_collect,
      lt_coll_buk      TYPE SORTED TABLE OF gty_s_collect WITH UNIQUE KEY hkont sgtxt,
      lt_group_waers   TYPE TABLE OF gty_s_tab_excel,
      lt_detail        TYPE STANDARD TABLE OF zfi_registr_acc_detail,
      ls_kont          TYPE gty_s_tab_excel,
      lt_group_gkont   TYPE TABLE OF gty_s_tab_excel,
      lt_group_gkont_d TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_d,
      lt_group_gkont_k TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_k,
      lt_detail_ex     TYPE TABLE OF zfi_registr_acc_detail,
      lt_hkont         TYPE RANGE OF bseg-hkont,
      ls_data_ex       TYPE lty_s_registr,
      ls_main_sum      TYPE gty_s_tab_excel,
      lv_blart         TYPE char20,
      lv_old_one       TYPE i,
      lv_nom           TYPE i,
      lv_tabix         TYPE i,
      lv_insert_line   TYPE char1,
      lv_flag          TYPE char1,
      lv_gkont_d       TYPE gkont,
      lv_gkont_k       TYPE gkont,
      lt_text          TYPE gty_t_text.

    FIELD-SYMBOLS: <lt_data_ex> TYPE STANDARD TABLE.

    SELECT blart, ltext
      FROM t003t
      INTO TABLE @DATA(lt_blart)
     WHERE spras = @sy-langu
     ORDER BY blart.

    ASSIGN gr_data->* TO <lt_data_ex>.
    " группируем по счету
    LOOP AT <lt_data_ex> ASSIGNING FIELD-SYMBOL(<ls_data_ex>).
      MOVE-CORRESPONDING <ls_data_ex> TO ls_data_ex.

      READ TABLE lt_collect[] ASSIGNING FIELD-SYMBOL(<ls_collect>)
                              WITH KEY hkont = COND #( WHEN p_mlev IS INITIAL
                                               THEN ls_data_ex-hkont
                                               ELSE ls_data_ex-hkont_name )
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = COND #( WHEN p_mlev IS INITIAL
                                        THEN ls_data_ex-hkont
                                        ELSE ls_data_ex-hkont_name )
                        bukrs = ls_data_ex-bukrs
                        hkont_name = ls_data_ex-hkont_name
                      ) INTO lt_collect INDEX sy-tabix ASSIGNING <ls_collect> .
      ENDIF.
      <ls_collect>-sld_id = <ls_collect>-sld_id + ls_data_ex-sld_id.
      <ls_collect>-sld_ik = <ls_collect>-sld_ik + ls_data_ex-sld_ik.
      <ls_collect>-sld_od = <ls_collect>-sld_od + ls_data_ex-sld_od.
      <ls_collect>-sld_ok = <ls_collect>-sld_ok + ls_data_ex-sld_ok.
      <ls_collect>-debet  = <ls_collect>-debet  + ls_data_ex-debet.
      <ls_collect>-kredit = <ls_collect>-kredit + ls_data_ex-kredit.
    ENDLOOP.
    SORT lt_collect BY hkont.
    lt_hkont[] = VALUE #(
        FOR <ls> IN lt_collect (
          sign = 'I'
          option = COND #( WHEN p_mlev IS INITIAL
                           THEN 'EQ'
                           ELSE 'CP')
          low = <ls>-hkont
        ) ).

    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng = lt_hkont
                                         iv_shkzg     = 'H'
                               IMPORTING et_detail    = lt_detail
                              ).
    APPEND LINES OF lt_detail TO lt_detail_ex.
    CLEAR lt_detail.
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng = lt_hkont
                                         iv_shkzg     = 'S'
                               IMPORTING et_detail    = lt_detail ).
    APPEND LINES OF lt_detail TO lt_detail_ex.

    lcl_report=>read_text( CHANGING ct_text   = lt_text
                                    ct_detail = lt_detail_ex ).

    DATA(lv_num_razn) = gc_kont - p_mlev.
    DATA(lv_num_rzkont) = gc_kont - p_clev.
    SORT lt_text BY bukrs belnr gjahr buzei.

    LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail>).
      READ TABLE lt_text ASSIGNING FIELD-SYMBOL(<ls_text>)
                         WITH KEY bukrs = <ls_detail>-bukrs
                                  belnr = <ls_detail>-belnr
                                  gjahr = <ls_detail>-gjahr
                                  buzei = <ls_detail>-p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_detail>-p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_detail>-p_hkont IS NOT INITIAL.
        <ls_detail>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_clev > 0 AND <ls_detail>-c_hkont IS NOT INITIAL.
        <ls_detail>-c_hkont+p_clev(lv_num_rzkont) = '*'.
      ENDIF.

      INSERT VALUE #( hkont = <ls_detail>-p_hkont
                      sgtxt = <ls_detail>-p_sgtxt
                    ) INTO TABLE lt_coll_buk.

      " группировка по валюте
      READ TABLE lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_group_waers>)
                                WITH KEY  hkont = <ls_detail>-p_hkont
                                          waers = <ls_detail>-waers_doc
                                BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        waers = <ls_detail>-waers_doc
                      ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers> .
      ENDIF.
      IF <ls_detail>-shkzg = 'S'.
        <ls_group_waers>-wrbtr_d = <ls_group_waers>-wrbtr_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_group_waers>-wrbtr_k = <ls_group_waers>-wrbtr_k + <ls_detail>-wrbtr.
      ENDIF.
      " группировка по корреспонд. счету по дебету
      READ TABLE lt_group_gkont_d ASSIGNING FIELD-SYMBOL(<ls_group_gkont_d>)
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           gkont_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '')
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        gkont_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '')
                      ) INTO lt_group_gkont_d INDEX sy-tabix ASSIGNING <ls_group_gkont_d>.
      ENDIF.
      <ls_group_gkont_d>-dmbtr_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_group_gkont_d>-dmbtr_d + <ls_detail>-dmbtr ELSE <ls_group_gkont_d>-dmbtr_d ).

      " группировка по корреспонд. счету по кредиту
      READ TABLE lt_group_gkont_k ASSIGNING FIELD-SYMBOL(<ls_group_gkont_k>)
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           gkont_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '')
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        gkont_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '')
                      ) INTO lt_group_gkont_k INDEX sy-tabix ASSIGNING <ls_group_gkont_k>.
      ENDIF.
      <ls_group_gkont_k>-dmbtr_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_group_gkont_k>-dmbtr_k + <ls_detail>-dmbtr ELSE <ls_group_gkont_k>-dmbtr_k ).
    ENDLOOP.
    DELETE lt_group_gkont_k WHERE gkont_k IS INITIAL AND dmbtr_k IS INITIAL.
    DELETE lt_group_gkont_d WHERE gkont_d IS INITIAL AND dmbtr_d IS INITIAL.

    UNASSIGN: <ls_group_gkont_k>,<ls_group_gkont_d>.

    SORT lt_detail_ex BY p_hkont shkzg DESCENDING bukrs p_sgtxt budat belnr.

    " формирование таблицы для вывода в эксель
    LOOP AT lt_collect ASSIGNING FIELD-SYMBOL(<ls_col>).

      CLEAR: ls_main_sum,lv_old_one.
      " ранее выбирались по счету если есть обороты, теперь сальдо выводится всегда даже без оборотов
      APPEND VALUE #( nom     = |{ TEXT-067 } { <ls_col>-hkont_name }|
                      sld_id  = <ls_col>-sld_id
                      sld_ik  = <ls_col>-sld_ik
                      sld_od  = <ls_col>-sld_od
                      sld_ok  = <ls_col>-sld_ok
                      dmbtr_d = <ls_col>-debet
                      dmbtr_k = <ls_col>-kredit
                    ) TO lt_main.

      LOOP AT lt_coll_buk ASSIGNING FIELD-SYMBOL(<ls_coll_b>) WHERE hkont = <ls_col>-hkont.
        CLEAR: lv_old_one.

        LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail_hk>) WHERE p_hkont = <ls_col>-hkont
                                                                      AND p_sgtxt = <ls_coll_b>-sgtxt.
          CLEAR: lv_gkont_d,lv_gkont_k.
          ADD 1 TO lv_old_one.
          IF lv_old_one = 1.
            lv_flag = 'X'.
          ENDIF.
          TRY.
              lv_blart = lt_blart[ blart = <ls_detail_hk>-blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          IF <ls_detail_hk>-shkzg = 'S'.
            lv_gkont_d = COND #( WHEN <ls_detail_hk>-c_hkont IS INITIAL AND <ls_detail_hk>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_detail_hk>-c_hkont ).
          ELSE.
            lv_gkont_k = COND #( WHEN <ls_detail_hk>-c_hkont IS INITIAL AND <ls_detail_hk>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_detail_hk>-c_hkont ).
          ENDIF.
          READ TABLE  lt_main ASSIGNING FIELD-SYMBOL(<ls_excel>)
                              WITH KEY key1
                              COMPONENTS
                                        hkont = <ls_col>-hkont
                                        belnr = <ls_detail_hk>-belnr
                                        bukrs_t = <ls_detail_hk>-bukrs
                                        gjahr = <ls_detail_hk>-gjahr
                                        p_buzei = <ls_detail_hk>-p_buzei
                                        c_buzei = <ls_detail_hk>-c_buzei
                                        sgtxt = <ls_coll_b>-sgtxt.
          IF sy-subrc <> 0.
            lv_nom = lv_nom + 1.
            APPEND VALUE #( nom      = lv_nom
                            bukrs    = <ls_detail_hk>-bukrs
                            sgtxt    = COND #( WHEN lv_flag IS NOT INITIAL THEN <ls_detail_hk>-p_sgtxt ELSE '-"-')
                            name_pyd = lv_blart
                            belnr    = <ls_detail_hk>-belnr
                            budat    = <ls_detail_hk>-budat
                            nom_pyd  = <ls_detail_hk>-xblnr
                            bldat    = <ls_detail_hk>-bldat
                            waers    = COND #( WHEN <ls_detail_hk>-waers_doc = p_waers
                                                 OR   <ls_detail_hk>-wrbtr IS INITIAL
                                               THEN ''
                                               ELSE <ls_detail_hk>-waers_doc )
                            sld_id  = ''
                            sld_ik  = ''
                            gkont_d = lv_gkont_d
                            dmbtr_d = COND #( WHEN <ls_detail_hk>-shkzg = 'S' THEN <ls_detail_hk>-dmbtr ELSE '' )
                            wrbtr_d = COND #( WHEN <ls_detail_hk>-shkzg = 'S' AND <ls_detail_hk>-waers_doc <> p_waers THEN <ls_detail_hk>-wrbtr ELSE '' )
                            gkont_k = lv_gkont_k
                            dmbtr_k = COND #( WHEN <ls_detail_hk>-shkzg = 'H' THEN <ls_detail_hk>-dmbtr ELSE '' )
                            wrbtr_k = COND #( WHEN <ls_detail_hk>-shkzg = 'H' AND <ls_detail_hk>-waers_doc <> p_waers THEN <ls_detail_hk>-wrbtr ELSE '' )
                            sld_od  = ''
                            sld_ok  = ''
                            gjahr   = <ls_detail_hk>-gjahr
                            bukrs_t = <ls_detail_hk>-bukrs
                            hkont   = <ls_detail_hk>-p_hkont
                            p_buzei = <ls_detail_hk>-p_buzei
                            c_buzei = <ls_detail_hk>-c_buzei
                          ) TO lt_main.
          ENDIF.
          CLEAR lv_flag.
          IF <ls_detail_hk>-shkzg = 'S'.
            ls_main_sum-dmbtr_d = ls_main_sum-dmbtr_d + <ls_detail_hk>-dmbtr.
            IF <ls_detail_hk>-waers_doc <> p_waers.
              ls_main_sum-wrbtr_d = ls_main_sum-wrbtr_d + <ls_detail_hk>-wrbtr.
            ENDIF.
          ELSE.
            ls_main_sum-dmbtr_k = ls_main_sum-dmbtr_k + <ls_detail_hk>-dmbtr.
            IF <ls_detail_hk>-waers_doc <> p_waers.
              ls_main_sum-wrbtr_k = ls_main_sum-wrbtr_k + <ls_detail_hk>-wrbtr.
            ENDIF.
          ENDIF.
        ENDLOOP.

      ENDLOOP.

      ls_main_sum-sgtxt = TEXT-066 && ` ` && <ls_col>-hkont.
      ls_main_sum-sld_od = <ls_col>-sld_od.
      ls_main_sum-sld_ok = <ls_col>-sld_ok.
      ls_main_sum-sld_ik = <ls_col>-sld_ik.
      ls_main_sum-sld_id = <ls_col>-sld_id.
      APPEND ls_main_sum TO lt_main.  " таблица - Всего по счету

      UNASSIGN: <ls_group_gkont_d>.

      " в разрезе валют
      IF gv_fcode = 'DWL_XLS_WAERS'.
        LOOP AT lt_group_waers ASSIGNING <ls_group_waers> WHERE hkont = <ls_col>-hkont.
          IF <ls_group_waers>-waers <> p_waers AND ( <ls_group_waers>-wrbtr_d IS NOT INITIAL
                                                  OR <ls_group_waers>-wrbtr_k IS NOT INITIAL ).
            lv_tabix = lv_tabix + 1.
            <ls_group_waers>-bukrs = ''.
            IF lv_tabix = 1.
              <ls_group_waers>-sgtxt = TEXT-064.
            ENDIF.
            <ls_group_waers>-bukrs = ''.
            <ls_group_waers>-sign = 'W'.
            APPEND  <ls_group_waers> TO lt_main.
          ENDIF.
        ENDLOOP.
      ENDIF.

      CLEAR lv_tabix.

      LOOP AT lt_group_gkont_d ASSIGNING <ls_group_gkont_d> WHERE hkont = <ls_col>-hkont.
        APPEND VALUE #( gkont_d = <ls_group_gkont_d>-gkont_d
                        gkont_k = <ls_group_gkont_d>-gkont_k
                        dmbtr_d = <ls_group_gkont_d>-dmbtr_d
                        dmbtr_k = <ls_group_gkont_d>-dmbtr_k
                        sign = 'S'
                      ) TO lt_group_gkont.
      ENDLOOP.
      UNASSIGN: <ls_group_gkont_d>.

      " добавляем по счету и бе корреспонденцию по кредиту в табл
      LOOP AT lt_group_gkont_k ASSIGNING <ls_group_gkont_k> WHERE hkont = <ls_col>-hkont.
        lv_tabix = lv_tabix + 1.
        ASSIGN lt_group_gkont[ lv_tabix ] TO FIELD-SYMBOL(<ls_group_gkont>).
        IF sy-subrc = 0.
          <ls_group_gkont>-gkont_k = <ls_group_gkont_k>-gkont_k.
          <ls_group_gkont>-dmbtr_k = <ls_group_gkont_k>-dmbtr_k.
        ELSE.
          APPEND VALUE #( gkont_d = <ls_group_gkont_k>-gkont_d
                          gkont_k = <ls_group_gkont_k>-gkont_k
                          dmbtr_d = <ls_group_gkont_k>-dmbtr_d
                          dmbtr_k = <ls_group_gkont_k>-dmbtr_k
                          sign = 'S'
                        ) TO lt_group_gkont.
        ENDIF.
      ENDLOOP.
      CLEAR lv_tabix.
      UNASSIGN: <ls_group_waers>,<ls_group_gkont>.

      ls_kont-gkont_d = '!'.
      ls_kont-gkont_k = '!'.
      MODIFY lt_group_gkont FROM ls_kont TRANSPORTING gkont_d
                                              WHERE gkont_d IS INITIAL AND dmbtr_d IS NOT INITIAL.

      MODIFY lt_group_gkont FROM ls_kont TRANSPORTING gkont_k
                                              WHERE gkont_k IS INITIAL AND dmbtr_k IS NOT INITIAL.

      ASSIGN lt_group_gkont[ 1 ] TO <ls_group_gkont>.
      IF sy-subrc = 0.
        <ls_group_gkont>-sgtxt = TEXT-065.
      ENDIF.
      APPEND LINES OF lt_group_gkont TO lt_main.

      CLEAR: lt_group_gkont,lv_insert_line.
    ENDLOOP.

    MOVE-CORRESPONDING lt_main TO ct_main.
  ENDMETHOD.

  METHOD excel_trn.
    TYPES:
      BEGIN OF lty_s_but000,
        partner TYPE bu_partner,
        name    TYPE  string,
      END OF lty_s_but000,

      BEGIN OF lty_s_kunnr,
        lifnr      TYPE lifnr,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        vertn      TYPE ranl,
        blart      TYPE blart,
        dmbtr_sn_d TYPE dmbtr,
        wrbtr_sn_d TYPE wrbtr,
        dmbtr_sn_k TYPE dmbtr,
        wrbtr_sn_k TYPE wrbtr,
        dmbtr_g_d  TYPE dmbtr,
        wrbtr_g_d  TYPE wrbtr,
        dmbtr_g_k  TYPE dmbtr,
        wrbtr_g_k  TYPE wrbtr,
        dmbtr_sk_d TYPE dmbtr,
        wrbtr_sk_d TYPE wrbtr,
        dmbtr_sk_k TYPE dmbtr,
        wrbtr_sk_k TYPE wrbtr,
      END OF lty_s_kunnr,

      BEGIN OF lty_s_collect,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        hkont_name TYPE zfi_registr_acc-hkont_name,
        sld_id     TYPE zfi_registr_acc-sld_id,
        sld_ik     TYPE zfi_registr_acc-sld_ik,
        sld_od     TYPE zfi_registr_acc-sld_od,
        sld_ok     TYPE zfi_registr_acc-sld_ok,
        debet      TYPE zfi_registr_acc-debet,
        kredit     TYPE zfi_registr_acc-kredit,
      END OF lty_s_collect,

      BEGIN OF lty_s_ex,
        name    TYPE char200,
        lifnr   TYPE lifnr,
        bukrs   TYPE bukrs,
        nom     TYPE char5,
        nom_dog TYPE char13,
        hkont   TYPE hkont,
      END OF lty_s_ex,

      BEGIN OF lty_s_registr,
        hkont        TYPE hkont,
        bukrs        TYPE bukrs,
        hkont_name   TYPE zfi_registr_acc-hkont_name,
        partner      TYPE lifnr,
        sld_id       TYPE zfi_registr_acc-sld_id,
        sld_ik       TYPE zfi_registr_acc-sld_ik,
        sld_od       TYPE zfi_registr_acc-sld_od,
        sld_ok       TYPE zfi_registr_acc-sld_ok,
        debet        TYPE zfi_registr_acc-debet,
        kredit       TYPE zfi_registr_acc-kredit,
        partner_name TYPE string,
      END   OF lty_s_registr,

      BEGIN OF lty_s_gkontd,
        hkont     TYPE hkont,
        name      TYPE char200,
        gkont_g_d TYPE gkont,
        gkont_g_k TYPE gkont,
        dmbtr_g_d TYPE dmbtr,
        dmbtr_g_k TYPE dmbtr,
        sign      TYPE char1,
      END OF lty_s_gkontd,

      BEGIN OF lty_s_waers,
        hkont      TYPE hkont,
        waers      TYPE waers,
        wrbtr_sn_d TYPE wrbtr,
        wrbtr_sn_k TYPE wrbtr,
        wrbtr_g_d  TYPE wrbtr,
        wrbtr_g_k  TYPE wrbtr,
        wrbtr_sk_d TYPE wrbtr,
        wrbtr_sk_k TYPE wrbtr,
      END OF lty_s_waers,
      BEGIN OF lty_s_text,
        bukrs TYPE bukrs,
        belnr TYPE belnr_d,
        gjahr TYPE gjahr,
        buzei TYPE buzei,
        text  TYPE string,
      END OF lty_s_text,
      lty_t_text TYPE STANDARD TABLE OF lty_s_text WITH DEFAULT KEY.

    DATA:
      lt_sld_beg_c TYPE STANDARD TABLE OF gty_s_detail,
      lt_sld_end_c TYPE STANDARD TABLE OF gty_s_detail.

    DATA:
      lt_sum_sld_e     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_group_gkont_d TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_g_d,
      lt_group_gkont_k TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_g_k,
      lt_sum_sld_b     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_main_waers    TYPE SORTED TABLE OF lty_s_waers  WITH UNIQUE KEY hkont waers,
      lt_sum_hkont     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_group_waers_k TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont bukrs kod waers,
      lt_kunnr         TYPE SORTED TABLE OF lty_s_kunnr  WITH UNIQUE KEY hkont bukrs lifnr vertn,
      lt_but000        TYPE SORTED TABLE OF lty_s_but000 WITH UNIQUE KEY partner,
      lt_excel_trn     TYPE STANDARD TABLE OF gty_s_trn  WITH NON-UNIQUE SORTED KEY key1 COMPONENTS hkont budat belnr bukrs_t
                                                                                                    vertn gkont_g_d sign p_buzei c_buzei,
      lt_detail        TYPE STANDARD TABLE OF zfi_registr_acc_detail,
      lt_vertn         TYPE STANDARD TABLE OF gty_s_vertn,
      lt_detail_ex     TYPE TABLE OF zfi_registr_acc_detail,
      lt_group_gkont   TYPE TABLE OF gty_s_trn,
      lt_hkont         TYPE RANGE OF bseg-hkont,
      lt_collect       TYPE TABLE OF lty_s_collect,
      lt_group_waers   TYPE TABLE OF  gty_s_trn,
      ls_sum           TYPE gty_s_trn,
      ls_main_sum      TYPE gty_s_trn,
      ls_waers         TYPE gty_s_trn,
      ls_data_ex       TYPE lty_s_registr,
      ls_waers_k       TYPE gty_s_trn,
      lv_old_lifnr     TYPE lifnr,
      ls_sum_trn       TYPE  gty_s_trn,
      ls_ex            TYPE lty_s_ex,
      ls_ex_waers      TYPE lty_s_ex,
      ls_kont          TYPE  gty_s_trn,
      lv_blart         TYPE char20,
      lv_count         TYPE i,
      lv_old_nom       TYPE i,
      lv_nom           TYPE i,
      lv_waers_c       TYPE i,
      lv_tabix         TYPE i,
      lv_t_c           TYPE i,
      lv_c             TYPE i,
      lv_waers_nom     TYPE i,
      lv_flag          TYPE char1,
      lv_flag_ins      TYPE char1,
      lv_insert_nom    TYPE char1,
      lv_gkont_d       TYPE gkont,
      lv_gkont_k       TYPE gkont,
      lv_partner       TYPE but000-partner,
      lv_edate         TYPE bkpf-budat,
      lt_text          TYPE lty_t_text.

    FIELD-SYMBOLS: <lt_data_ex> TYPE STANDARD TABLE.

    " наименование вида документа
    SELECT blart, ltext
      FROM t003t
      INTO TABLE @DATA(lt_blart)
     WHERE spras = @sy-langu
     ORDER BY blart.


    ASSIGN gr_data->* TO <lt_data_ex>.
    " группируем по счету
    LOOP AT <lt_data_ex> ASSIGNING FIELD-SYMBOL(<ls_data_ex>).
      MOVE-CORRESPONDING <ls_data_ex> TO ls_data_ex.
      IF NOT line_exists( lt_but000[ partner = ls_data_ex-partner ] ).
        SPLIT ls_data_ex-partner_name AT '-' INTO lv_partner ls_data_ex-partner_name.
        CONDENSE ls_data_ex-partner_name.
        INSERT VALUE #( partner = ls_data_ex-partner name = ls_data_ex-partner_name )
          INTO TABLE lt_but000.
      ENDIF.
      " группировка по счетам
      READ TABLE lt_collect[] ASSIGNING FIELD-SYMBOL(<ls_collect>)
                              WITH KEY hkont = COND #( WHEN p_mlev IS INITIAL
                                                       THEN ls_data_ex-hkont
                                                       ELSE ls_data_ex-hkont_name )
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = COND #( WHEN p_mlev IS INITIAL
                                        THEN ls_data_ex-hkont
                                        ELSE ls_data_ex-hkont_name )
                        bukrs = ls_data_ex-bukrs
                        hkont_name = ls_data_ex-hkont_name
                      ) INTO lt_collect INDEX sy-tabix ASSIGNING <ls_collect> .
      ENDIF.
      <ls_collect>-sld_id =  <ls_collect>-sld_id + ls_data_ex-sld_id.
      <ls_collect>-sld_ik =  <ls_collect>-sld_ik + ls_data_ex-sld_ik.
      <ls_collect>-sld_od =  <ls_collect>-sld_od + ls_data_ex-sld_od.
      <ls_collect>-sld_ok =  <ls_collect>-sld_ok + ls_data_ex-sld_ok.
      <ls_collect>-debet  =  <ls_collect>-debet  + ls_data_ex-debet.
      <ls_collect>-kredit =  <ls_collect>-kredit + ls_data_ex-kredit.
      " Добавляем Контрагентов
      READ TABLE lt_but000 ASSIGNING FIELD-SYMBOL(<ls_but000>)
                           WITH KEY partner = ls_data_ex-partner
                           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( partner = ls_data_ex-partner ) INTO lt_but000 INDEX sy-tabix ASSIGNING <ls_but000>.
      ENDIF.
    ENDLOOP.
    SORT lt_collect BY hkont.
    lt_hkont[] = VALUE #( FOR <ls> IN lt_collect (
                            sign   = 'I'
                            option = COND #( WHEN p_mlev IS INITIAL THEN 'EQ' ELSE 'CP')
                            low    = <ls>-hkont
                         ) ).

    lv_edate = COND budat( WHEN s_date[ 1 ]-high IS INITIAL THEN s_date[ 1 ]-low
                           ELSE s_date[ 1 ]-high ) + 1 .
    " сальдо на начало по дебету
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = s_date-low
                                         iv_detbal     = abap_true
                                         iv_shkzg      = 'S'
                               IMPORTING et_detail     = DATA(lt_sld_beg_s_data)
                             ).
    LOOP AT lt_sld_beg_s_data REFERENCE INTO DATA(lr_sld).
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                    ) TO lt_sld_beg_c.
    ENDLOOP.
    " сальдо на начало по кредиту
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = s_date-low
                                         iv_detbal     = abap_true
                                         iv_shkzg      = 'H'
                               IMPORTING et_detail     = DATA(lt_sld_beg_h_data)
                             ).
    LOOP AT lt_sld_beg_h_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                    ) TO lt_sld_beg_c.
    ENDLOOP.

    " сальдо на конец по кредиту
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = lv_edate
                                         iv_detbal     = abap_true
                                         iv_shkzg      = 'H'
                               IMPORTING et_detail     = DATA(lt_sld_end_s_data)
                             ).

    LOOP AT lt_sld_end_s_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                    ) TO lt_sld_end_c.
    ENDLOOP.

    " сальдо на конец по дебету
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = lv_edate
                                         iv_detbal     = abap_true
                                         iv_shkzg      = 'S'
                               IMPORTING et_detail     = DATA(lt_sld_end_h_data)
                              ).
    LOOP AT lt_sld_end_h_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                    ) TO lt_sld_end_c.
    ENDLOOP.

    SORT lt_sld_end_c BY p_hkont shkzg DESCENDING p_lifnr p_vertn budat belnr.
    SORT lt_sld_beg_c BY p_hkont shkzg DESCENDING p_lifnr p_vertn budat belnr.

    " обороты по кредиту
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng =  lt_hkont[]
                                         iv_shkzg     = 'H'
                               IMPORTING et_detail    = lt_detail
                              ).
    LOOP AT lt_detail REFERENCE INTO DATA(lr_detail).
      lr_detail->p_lifnr = COND #( WHEN lr_detail->p_lifnr IS INITIAL THEN lr_detail->p_kunnr ELSE lr_detail->p_lifnr ).
    ENDLOOP.
    APPEND LINES OF lt_detail TO lt_detail_ex.
    CLEAR lt_detail.
    " обороты по дебету
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng =  lt_hkont[]
                                         iv_shkzg     = 'S'
                               IMPORTING et_detail    = lt_detail
                              ).
    LOOP AT lt_detail REFERENCE INTO lr_detail.
      lr_detail->p_lifnr = COND #( WHEN lr_detail->p_lifnr IS INITIAL THEN lr_detail->p_kunnr ELSE lr_detail->p_lifnr ).
    ENDLOOP.
    APPEND LINES OF lt_detail TO lt_detail_ex.
    DATA(lv_num_razn) = gc_kont - p_mlev.
    DATA(lv_num_rzkont) = gc_kont - p_clev.
    lcl_report=>read_text_trn( CHANGING ct_text  = lt_text
                                        ct_data  = lt_sld_beg_c ).
    IF p_ndoc IS NOT INITIAL.
      lcl_report=>exc_agreement( CHANGING ct_beg    = lt_sld_beg_c
                                          ct_end    = lt_sld_end_c
                                          ct_detail = lt_detail_ex
                                          ct_vertn  = lt_vertn ).
    ENDIF.
    SORT lt_text BY bukrs belnr gjahr buzei.
    " считаем общие суммы для каждого счета по сальдо на начало
    LOOP AT lt_sld_beg_c ASSIGNING FIELD-SYMBOL(<ls_sld_beg>).
*      <ls_sld_beg>-r_data->summ = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->summ < 0
*                                           THEN <ls_sld_beg>-r_data->summ * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->summ ).
*      <ls_sld_beg>-r_data->wrbtr = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->wrbtr < 0
*                                           THEN <ls_sld_beg>-r_data->wrbtr * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->wrbtr ).
      READ TABLE lt_text ASSIGNING FIELD-SYMBOL(<ls_text>)
                         WITH KEY bukrs = <ls_sld_beg>-r_data->bukrs
                                  belnr = <ls_sld_beg>-r_data->belnr
                                  gjahr = <ls_sld_beg>-r_data->gjahr
                                  buzei = <ls_sld_beg>-r_data->p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_sld_beg>-r_data->p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_sld_beg>-p_hkont IS NOT INITIAL.
        <ls_sld_beg>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_mlev > 0 AND <ls_sld_beg>-r_data->p_hkont IS NOT INITIAL.
        <ls_sld_beg>-r_data->p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.

      " код контрагента для счета
      READ TABLE lt_kunnr ASSIGNING FIELD-SYMBOL(<ls_kunnr>)
                          WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                   bukrs = <ls_sld_beg>-r_data->bukrs
                                   lifnr = <ls_sld_beg>-r_data->p_lifnr
                                   vertn = <ls_sld_beg>-r_data->p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_sld_beg>-r_data->p_lifnr
                        hkont = <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        vertn = <ls_sld_beg>-r_data->p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      READ TABLE lt_sum_sld_b ASSIGNING FIELD-SYMBOL(<ls_sum_sld_b>)
                              WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                              BINARY SEARCH.
      IF sy-subrc <> 0.

        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont ) INTO lt_sum_sld_b INDEX sy-tabix ASSIGNING <ls_sum_sld_b>.
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_sum_sld_b>-dmbtr_sn_d = <ls_sum_sld_b>-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_sum_sld_b>-wrbtr_sn_d = <ls_sum_sld_b>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        <ls_sum_sld_b>-dmbtr_sn_k = <ls_sum_sld_b>-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_sum_sld_b>-wrbtr_sn_k = <ls_sum_sld_b>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING FIELD-SYMBOL(<ls_main_waers>)
                               WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                        waers = <ls_sld_beg>-r_data->waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont
                        waers = <ls_sld_beg>-r_data->waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers> .
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sn_d = <ls_main_waers>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sn_k = <ls_main_waers>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      " группировка по валюте контрагента по сальдо на начало
      READ TABLE lt_group_waers_k ASSIGNING FIELD-SYMBOL(<ls_group_waers_k>)
                                  WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                           bukrs = <ls_sld_beg>-r_data->bukrs
                                           kod   = <ls_sld_beg>-r_data->p_lifnr
                                           waers = <ls_sld_beg>-r_data->waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_sld_beg>-r_data->waers_doc <> p_waers.

        INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                        hkont =  <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        kod   = <ls_sld_beg>-r_data->p_lifnr
                      ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k> .
      ENDIF.
      IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
        <ls_group_waers_k>-wrbtr_sn_k = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' THEN <ls_group_waers_k>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr ELSE <ls_group_waers_k>-wrbtr_sn_k ).
        <ls_group_waers_k>-wrbtr_sn_d = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'S' THEN <ls_group_waers_k>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr ELSE <ls_group_waers_k>-wrbtr_sn_d  ).
      ENDIF.
    ENDLOOP.
    UNASSIGN: <ls_sld_beg>,<ls_kunnr>,<ls_group_waers_k>,<ls_main_waers>,<ls_text>.

    lcl_report=>read_text_trn( CHANGING ct_text = lt_text
                                        ct_data = lt_sld_end_c ).
    SORT lt_text BY bukrs belnr gjahr buzei.
    " считаем общие суммы для каждого счета по сальдо на конец
    LOOP AT lt_sld_end_c ASSIGNING <ls_sld_beg>.
*      <ls_sld_beg>-r_data->summ = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->summ < 0
*                                           THEN <ls_sld_beg>-r_data->summ * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->summ ).
*      <ls_sld_beg>-r_data->wrbtr = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND  <ls_sld_beg>-r_data->wrbtr < 0
*                                           THEN <ls_sld_beg>-r_data->wrbtr * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->wrbtr ).
      READ TABLE lt_text ASSIGNING <ls_text>
                         WITH KEY bukrs = <ls_sld_beg>-r_data->bukrs
                                  belnr = <ls_sld_beg>-r_data->belnr
                                  gjahr = <ls_sld_beg>-r_data->gjahr
                                  buzei = <ls_sld_beg>-r_data->p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_sld_beg>-r_data->p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_sld_beg>-p_hkont IS NOT INITIAL.
        <ls_sld_beg>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_mlev > 0 AND <ls_sld_beg>-r_data->p_hkont IS NOT INITIAL.
        <ls_sld_beg>-r_data->p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.

      READ TABLE lt_kunnr ASSIGNING <ls_kunnr>
                          WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                   bukrs = <ls_sld_beg>-r_data->bukrs
                                   lifnr = <ls_sld_beg>-r_data->p_lifnr
                                   vertn = <ls_sld_beg>-r_data->p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_sld_beg>-r_data->p_lifnr
                        hkont = <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        vertn = <ls_sld_beg>-r_data->p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING <ls_main_waers>
                               WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                        waers = <ls_sld_beg>-r_data->waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont
                        waers = <ls_sld_beg>-r_data->waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers> .
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sk_d = <ls_main_waers>-wrbtr_sk_d  + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sk_k = <ls_main_waers>-wrbtr_sk_k  + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      READ TABLE lt_sum_sld_e ASSIGNING FIELD-SYMBOL(<ls_sum_sld_e>)
                              WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                              BINARY SEARCH.
      IF sy-subrc <> 0.

        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont ) INTO lt_sum_sld_e INDEX sy-tabix ASSIGNING <ls_sum_sld_e> .
      ENDIF.

      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        " суммы сальдо на конец
        <ls_sum_sld_e>-dmbtr_sk_d = <ls_sum_sld_e>-dmbtr_sk_d + <ls_sld_beg>-r_data->summ.
        <ls_sum_sld_e>-wrbtr_sk_d = <ls_sum_sld_e>-wrbtr_sk_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_sum_sld_e>-dmbtr_sk_k = <ls_sum_sld_e>-dmbtr_sk_k + <ls_sld_beg>-r_data->summ.
        <ls_sum_sld_e>-wrbtr_sk_k = <ls_sum_sld_e>-wrbtr_sk_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      " группировка по валюте контрагента по сальдо на конец
      READ TABLE lt_group_waers_k ASSIGNING <ls_group_waers_k>
                                  WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                           bukrs = <ls_sld_beg>-r_data->bukrs
                                           kod   = <ls_sld_beg>-r_data->p_lifnr
                                           waers = <ls_sld_beg>-r_data->waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_sld_beg>-r_data->waers_doc <> p_waers.
        INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                        hkont =  <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        kod   = <ls_sld_beg>-r_data->p_lifnr
                      ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k> .
      ENDIF.

      IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
        <ls_group_waers_k>-wrbtr_sk_k = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' THEN <ls_group_waers_k>-wrbtr_sk_k + <ls_sld_beg>-r_data->wrbtr ELSE <ls_group_waers_k>-wrbtr_sk_k ).
        <ls_group_waers_k>-wrbtr_sk_d = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'S' THEN <ls_group_waers_k>-wrbtr_sk_d + <ls_sld_beg>-r_data->wrbtr ELSE <ls_group_waers_k>-wrbtr_sk_d  ).
      ENDIF.
    ENDLOOP.
    UNASSIGN: <ls_sum_sld_e>,<ls_kunnr>,<ls_group_waers_k>,<ls_main_waers>,<ls_text>.

    lcl_report=>read_text( CHANGING ct_text   = lt_text
                                    ct_detail = lt_detail_ex ).
    SORT lt_text BY bukrs belnr gjahr buzei.
    LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail>).
      READ TABLE lt_text ASSIGNING <ls_text>
                         WITH KEY bukrs = <ls_detail>-bukrs
                                  belnr = <ls_detail>-belnr
                                  gjahr = <ls_detail>-gjahr
                                  buzei = <ls_detail>-p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_detail>-p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_detail>-p_hkont IS NOT INITIAL.
        <ls_detail>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_clev > 0 AND <ls_detail>-c_hkont IS NOT INITIAL.
        <ls_detail>-c_hkont+p_clev(lv_num_rzkont) = '*'.
      ENDIF.

      " получаем общие суммы для каждого счета
      READ TABLE lt_sum_hkont[] ASSIGNING FIELD-SYMBOL(<ls_sum_hkont>)
                                WITH KEY hkont = <ls_detail>-p_hkont
                                BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        name = TEXT-066
                      ) INTO lt_sum_hkont INDEX sy-tabix ASSIGNING <ls_sum_hkont> .
      ENDIF.
      IF <ls_detail>-shkzg = 'S'.
        <ls_sum_hkont>-dmbtr_g_d = <ls_sum_hkont>-dmbtr_g_d + <ls_detail>-dmbtr.
        <ls_sum_hkont>-wrbtr_g_d = <ls_sum_hkont>-wrbtr_g_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_sum_hkont>-dmbtr_g_k = <ls_sum_hkont>-dmbtr_g_k + <ls_detail>-dmbtr.
        <ls_sum_hkont>-wrbtr_g_k = <ls_sum_hkont>-wrbtr_g_k + <ls_detail>-wrbtr.
      ENDIF.
      " уникальный номер контрагента
      READ TABLE lt_but000 ASSIGNING <ls_but000>
                           WITH KEY partner = <ls_detail>-p_lifnr
                           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( partner = <ls_detail>-p_lifnr ) INTO lt_but000 INDEX sy-tabix ASSIGNING <ls_but000>.
      ENDIF.

      " код контрагента для счета
      READ TABLE lt_kunnr ASSIGNING <ls_kunnr>
                          WITH KEY hkont = <ls_detail>-p_hkont
                                   bukrs = <ls_detail>-bukrs
                                   lifnr = <ls_detail>-p_lifnr
                                   vertn = <ls_detail>-p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_detail>-p_lifnr
                        hkont = <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        vertn = <ls_detail>-p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_detail>-shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_detail>-dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_detail>-dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_detail>-wrbtr.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING <ls_main_waers>
                               WITH KEY hkont = <ls_detail>-p_hkont
                                        waers = <ls_detail>-waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        waers = <ls_detail>-waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers> .
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_detail>-shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_g_d = <ls_main_waers>-wrbtr_g_d + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_detail>-shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_g_k = <ls_main_waers>-wrbtr_g_k + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.

      " группировка по валюте контрагента по оборотам
      READ TABLE lt_group_waers_k ASSIGNING <ls_group_waers_k>
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           bukrs = <ls_detail>-bukrs
                                           kod   = <ls_detail>-p_lifnr
                                           waers = <ls_detail>-waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_detail>-waers_doc <> p_waers.
        INSERT VALUE #( waers = <ls_detail>-waers_doc
                        hkont = <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        kod   = <ls_detail>-p_lifnr
                      ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k> .
      ENDIF.

      IF <ls_detail>-waers_doc <> p_waers.
        IF <ls_detail>-shkzg = 'S'.
          <ls_group_waers_k>-wrbtr_g_d = <ls_group_waers_k>-wrbtr_g_d + <ls_detail>-wrbtr.
        ELSE.
          <ls_group_waers_k>-wrbtr_g_k = <ls_group_waers_k>-wrbtr_g_k + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.
      UNASSIGN <ls_group_waers_k>.

      " группировка по корреспонд. счету по дебету
      READ TABLE lt_group_gkont_d ASSIGNING FIELD-SYMBOL(<ls_group_gkont_d>)
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           gkont_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '')
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( gkont_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '')
                        hkont = <ls_detail>-p_hkont
                      ) INTO lt_group_gkont_d INDEX sy-tabix ASSIGNING <ls_group_gkont_d>.
      ENDIF.
      <ls_group_gkont_d>-dmbtr_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_group_gkont_d>-dmbtr_g_d + <ls_detail>-dmbtr ELSE <ls_group_gkont_d>-dmbtr_g_d ).

      " группировка по корреспонд. счету по кредиту
      READ TABLE lt_group_gkont_k ASSIGNING FIELD-SYMBOL(<ls_group_gkont_k>)
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           gkont_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '')
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( gkont_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '')
                        hkont = <ls_detail>-p_hkont
                      ) INTO lt_group_gkont_k INDEX sy-tabix ASSIGNING <ls_group_gkont_k>.
      ENDIF.
      <ls_group_gkont_k>-dmbtr_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_group_gkont_k>-dmbtr_g_k + <ls_detail>-dmbtr ELSE <ls_group_gkont_k>-dmbtr_g_k ).

      UNASSIGN: <ls_group_gkont_k>,<ls_group_gkont_d>.
    ENDLOOP.

    DELETE lt_group_gkont_k WHERE gkont_g_k IS INITIAL AND dmbtr_g_k IS INITIAL.
    DELETE lt_group_gkont_d WHERE gkont_g_d IS INITIAL AND dmbtr_g_d IS INITIAL.

    CLEAR:ls_sum.
    UNASSIGN: <ls_kunnr>,<ls_sld_beg>,<ls_sum_sld_b>,<ls_group_gkont_d>,<ls_group_gkont_k>.

    IF lt_sld_beg_c[] IS INITIAL AND lt_sld_end_c IS INITIAL AND lt_detail_ex IS INITIAL.
      RETURN.
    ENDIF.

    SORT lt_detail_ex BY p_hkont bukrs p_lifnr p_vertn  budat belnr.
    LOOP AT lt_collect ASSIGNING FIELD-SYMBOL(<ls_col>).
      CLEAR: ls_main_sum.

      APPEND VALUE #( nom        = TEXT-067 && ` ` && <ls_col>-hkont_name
                      dmbtr_sn_d = <ls_col>-sld_id
                      dmbtr_sn_k = <ls_col>-sld_ik
                      dmbtr_sk_d = <ls_col>-sld_od
                      dmbtr_sk_k = <ls_col>-sld_ok
                      dmbtr_g_d  = <ls_col>-debet
                      dmbtr_g_k  = <ls_col>-kredit
                    ) TO lt_excel_trn .
      UNASSIGN <ls_sum_sld_b>.

      " идем по котрагентам
      LOOP AT lt_kunnr ASSIGNING <ls_kunnr> WHERE hkont = <ls_col>-hkont.
        CLEAR: ls_sum,lv_tabix,lv_old_nom,lv_insert_nom.
        lv_count = lv_count + 1.
        lv_old_nom = lv_old_nom + 1.
        IF lv_old_nom = 1.
          lv_flag_ins = 'X'.
          lv_old_lifnr = '!!!'.
        ENDIF.
        lv_nom = lv_nom + 1.
        IF lv_count > 1.
          IF ls_ex_waers-lifnr <> <ls_kunnr>-lifnr.
            " таблица Итого по контрагенту:
            ls_sum_trn-name = TEXT-070.
            ls_sum_trn-kod = ls_ex_waers-lifnr.
            APPEND ls_sum_trn TO lt_excel_trn.
            " таблица в том числе в разрезе валют по контрагенту:
            IF gv_fcode = 'DWL_XLS_WAERS'.
              LOOP AT lt_group_waers_k ASSIGNING FIELD-SYMBOL(<ls_waers_k>) WHERE hkont = ls_ex_waers-hkont
                                                                              AND bukrs = ls_ex_waers-bukrs
                                                                              AND kod   = ls_ex_waers-lifnr
                                                                              AND waers <> p_waers.
                MOVE-CORRESPONDING <ls_waers_k> TO ls_waers_k.
                ADD 1 TO lv_c.
                IF lv_c = 1.
                  ls_waers_k-name = TEXT-071.
                ENDIF.
                ls_waers_k-bukrs = ''.
                ls_waers_k-kod   = ''.
                ls_waers_k-sign  = 'W'.
                APPEND ls_waers_k TO lt_excel_trn.
              ENDLOOP.
            ENDIF.
            CLEAR: ls_sum_trn,lv_c,ls_waers_k.
          ENDIF.
        ENDIF.

        " запоминаем старый счет, контрагент, бе, чтобы использовать для заполнения табл В разрезе валют по контрагенту
        ls_ex_waers-hkont = <ls_kunnr>-hkont.
        ls_ex_waers-lifnr = <ls_kunnr>-lifnr.
        ls_ex_waers-bukrs = <ls_kunnr>-bukrs.

        " расшифровка сальдо на начало по дебету и кредиту
        LOOP AT lt_sld_beg_c ASSIGNING <ls_sld_beg> WHERE r_data->p_hkont = <ls_col>-hkont
                                                      AND r_data->bukrs   = <ls_kunnr>-bukrs
                                                      AND r_data->p_lifnr = <ls_kunnr>-lifnr
                                                      AND r_data->p_vertn = <ls_kunnr>-vertn.
          " наименование вида документа
          TRY.
              lv_blart = lt_blart[ blart = <ls_sld_beg>-r_data->blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          " наименование контрагента
          READ TABLE lt_but000 ASSIGNING FIELD-SYMBOL(<ls_partner>)
                               WITH KEY partner = <ls_sld_beg>-r_data->p_lifnr
                               BINARY SEARCH.
          IF sy-subrc = 0.
            ls_ex-name = COND #( WHEN lv_old_lifnr = <ls_sld_beg>-r_data->p_lifnr THEN '' ELSE <ls_partner>-name ).
          ENDIF.

          READ TABLE lt_excel_trn ASSIGNING FIELD-SYMBOL(<ls_excel>)
                                  WITH KEY key1
                                  COMPONENTS
                                          hkont = <ls_sld_beg>-r_data->p_hkont
                                          budat = <ls_sld_beg>-r_data->budat
                                          belnr = <ls_sld_beg>-r_data->belnr
                                          bukrs_t = <ls_sld_beg>-r_data->bukrs
                                          vertn = <ls_sld_beg>-r_data->p_vertn
                                          p_buzei = <ls_sld_beg>-r_data->p_buzei
                                          c_buzei = <ls_sld_beg>-r_data->c_buzei.
          IF sy-subrc <> 0.
            IF <ls_sld_beg>-r_data->shkzg = 'S'.
              lv_gkont_d = COND #( WHEN   <ls_sld_beg>-r_data->c_hkont IS INITIAL AND <ls_sld_beg>-r_data->dmbtr IS NOT INITIAL THEN '!' ELSE <ls_sld_beg>-r_data->c_hkont ).
            ELSE.
              lv_gkont_k = COND #( WHEN   <ls_sld_beg>-r_data->c_hkont IS INITIAL AND <ls_sld_beg>-r_data->dmbtr IS NOT INITIAL THEN '!' ELSE <ls_sld_beg>-r_data->c_hkont ).
            ENDIF.

            APPEND VALUE #( nom     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN lv_nom ELSE '')
                            bukrs   = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_beg>-r_data->bukrs ELSE '')
                            kod     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_beg>-r_data->p_lifnr ELSE '')
                            name    = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN ls_ex-name ELSE '')
                            nom_dog = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_beg>-r_data->p_vertn ELSE '')
                            name_pyd = lv_blart
                            belnr   = <ls_sld_beg>-r_data->belnr
                            budat   = <ls_sld_beg>-r_data->budat
                            nom_pyd = <ls_sld_beg>-r_data->xblnr
                            bldat   = <ls_sld_beg>-r_data->bldat
                            sgtxt   = <ls_sld_beg>-r_data->p_sgtxt
                            waers   = COND #( WHEN <ls_sld_beg>-r_data->waers_doc = p_waers
                                              THEN ''
                                              ELSE <ls_sld_beg>-r_data->waers_doc )
                            gjahr   = <ls_sld_beg>-r_data->gjahr
                            bukrs_t = <ls_sld_beg>-r_data->bukrs
                            hkont   = <ls_sld_beg>-r_data->p_hkont
                            vertn   = <ls_sld_beg>-r_data->p_vertn
                            lifnr   = <ls_kunnr>-lifnr
                            sign    = 'B'
                            p_buzei = <ls_sld_beg>-r_data->p_buzei
                            c_buzei = <ls_sld_beg>-r_data->c_buzei
                          ) TO lt_excel_trn ASSIGNING <ls_excel>.
            lv_insert_nom = 'X'.
          ENDIF.
          CLEAR lv_flag_ins.
          IF <ls_sld_beg>-r_data->shkzg = 'S'.
            <ls_excel>-dmbtr_sn_d = <ls_excel>-dmbtr_sn_d  + <ls_sld_beg>-r_data->summ.
            IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sn_d = <ls_excel>-wrbtr_sn_d  + <ls_sld_beg>-r_data->wrbtr.
              ls_sum-wrbtr_sn_d  = ls_sum-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
              ls_main_sum-wrbtr_sn_d  = ls_main_sum-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sn_d  = ls_sum-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
            ls_main_sum-dmbtr_sn_d  = ls_main_sum-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
          ELSE.
            <ls_excel>-dmbtr_sn_k = <ls_excel>-dmbtr_sn_k  + <ls_sld_beg>-r_data->summ.
            IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sn_k = <ls_excel>-wrbtr_sn_k  + <ls_sld_beg>-r_data->wrbtr.
              ls_sum-wrbtr_sn_k  = ls_sum-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
              ls_main_sum-wrbtr_sn_k  = ls_main_sum-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sn_k  = ls_sum-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
            ls_main_sum-dmbtr_sn_k  = ls_main_sum-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
          ENDIF.
          lv_flag = 'X'.

          " группировка по валюте
          IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
            READ TABLE lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_group_waers>)
                                      WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                               bukrs = <ls_sld_beg>-r_data->bukrs
                                               lifnr = <ls_sld_beg>-r_data->p_lifnr
                                               vertn = <ls_sld_beg>-r_data->p_vertn
                                               waers = <ls_sld_beg>-r_data->waers_doc
                                      BINARY SEARCH.
            IF sy-subrc <> 0.
              INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                              hkont = <ls_sld_beg>-r_data->p_hkont
                              bukrs = <ls_sld_beg>-r_data->bukrs
                              vertn = <ls_sld_beg>-r_data->p_vertn
                              lifnr = <ls_sld_beg>-r_data->p_lifnr
                            ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers> .
            ENDIF.
            IF <ls_sld_beg>-r_data->shkzg = 'S'.
              <ls_group_waers>-wrbtr_sn_d = <ls_group_waers>-wrbtr_sn_d  + <ls_sld_beg>-r_data->wrbtr.
            ELSE.
              <ls_group_waers>-wrbtr_sn_k = <ls_group_waers>-wrbtr_sn_k  + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
          ENDIF.
        ENDLOOP.
        UNASSIGN: <ls_group_waers>.
        " расписываем обороты
        READ TABLE lt_detail_ex TRANSPORTING NO FIELDS
                                WITH KEY p_hkont = <ls_col>-hkont
                                         bukrs   = <ls_kunnr>-bukrs
                                         p_lifnr = <ls_kunnr>-lifnr
                                         p_vertn = <ls_kunnr>-vertn
                                BINARY SEARCH.
        IF sy-subrc = 0.
          LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_contract>)
                               FROM sy-tabix .
            IF   <ls_contract>-p_hkont  <> <ls_col>-hkont
              OR <ls_contract>-bukrs    <> <ls_kunnr>-bukrs
              OR <ls_contract>-p_lifnr  <> <ls_kunnr>-lifnr
              OR <ls_contract>-p_vertn  <> <ls_kunnr>-vertn.
              EXIT.
            ENDIF.

            CLEAR: lv_gkont_d,lv_gkont_k.
            IF <ls_contract>-shkzg = 'S'.
              ls_sum-dmbtr_g_d  = ls_sum-dmbtr_g_d + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                ls_sum-wrbtr_g_d  = ls_sum-wrbtr_g_d + <ls_contract>-wrbtr.
              ENDIF.
            ELSE.
              ls_sum-dmbtr_g_k  = ls_sum-dmbtr_g_k + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                ls_sum-wrbtr_g_k  = ls_sum-wrbtr_g_k + <ls_contract>-wrbtr.
              ENDIF.
            ENDIF.
            ADD 1 TO lv_tabix.

            " наименование вида документа
            TRY.
                lv_blart = lt_blart[ blart = <ls_contract>-blart ]-ltext.
              CATCH cx_sy_itab_line_not_found.
                sy-subrc = 0.
            ENDTRY.
            UNASSIGN <ls_partner>.

            " наименование контрагента
            READ TABLE lt_but000 ASSIGNING <ls_partner>
                                 WITH KEY partner = <ls_contract>-p_lifnr
                                 BINARY SEARCH.
            IF sy-subrc = 0.
              ls_ex-name = COND #( WHEN lv_insert_nom IS NOT INITIAL THEN '' ELSE <ls_partner>-name ).
            ENDIF.

            IF lv_insert_nom IS NOT INITIAL.
              ls_ex-lifnr  = ''.
              ls_ex-bukrs  = ''.
              ls_ex-nom    = ''.
              ls_ex-nom_dog = ''.
            ELSE.
              ls_ex-lifnr  = <ls_contract>-p_lifnr.
              ls_ex-bukrs  = <ls_contract>-bukrs.
              ls_ex-nom    = lv_nom.
              ls_ex-nom_dog = <ls_contract>-p_vertn.
            ENDIF.

            UNASSIGN <ls_excel>.
            " обороты по дебету
            READ TABLE  lt_excel_trn ASSIGNING <ls_excel>
                                     WITH KEY key1
                                     COMPONENTS
                                               hkont = <ls_contract>-p_hkont
                                               budat = <ls_contract>-budat
                                               belnr = <ls_contract>-belnr
                                               bukrs_t = <ls_contract>-bukrs
                                               vertn = <ls_contract>-p_vertn
                                               p_buzei = <ls_contract>-p_buzei
                                               c_buzei = <ls_contract>-c_buzei.
            IF sy-subrc <> 0.
              IF <ls_contract>-shkzg = 'S'.
                lv_gkont_d = COND #( WHEN   <ls_contract>-c_hkont IS INITIAL AND <ls_contract>-summ IS NOT INITIAL THEN '!' ELSE <ls_contract>-c_hkont ).
              ELSE.
                lv_gkont_k = COND #( WHEN   <ls_contract>-c_hkont IS INITIAL AND <ls_contract>-summ IS NOT INITIAL THEN '!' ELSE <ls_contract>-c_hkont ).
              ENDIF.

              APPEND VALUE #( nom      = ls_ex-nom
                              bukrs    = ls_ex-bukrs
                              kod      = ls_ex-lifnr
                              name     = ls_ex-name
                              nom_dog  = ls_ex-nom_dog
                              name_pyd = lv_blart
                              belnr    = <ls_contract>-belnr
                              budat    = <ls_contract>-budat
                              nom_pyd  = <ls_contract>-xblnr
                              bldat    = <ls_contract>-bldat
                              sgtxt    = <ls_contract>-p_sgtxt
                              waers    = COND #( WHEN <ls_contract>-waers_doc = p_waers
                                                 THEN ''
                                                 ELSE <ls_contract>-waers_doc )
                              gkont_g_d = lv_gkont_d
                              gkont_g_k = lv_gkont_k
                              gjahr     = <ls_contract>-gjahr
                              bukrs_t   = <ls_contract>-bukrs
                              hkont     = <ls_contract>-p_hkont
                              vertn     = <ls_contract>-p_vertn
                              lifnr     = <ls_kunnr>-lifnr
                              sign      = 'O'
                              p_buzei   = <ls_contract>-p_buzei
                              c_buzei   = <ls_contract>-c_buzei
                            ) TO lt_excel_trn ASSIGNING <ls_excel>.
              lv_insert_nom = 'X'.
            ENDIF.
            CLEAR lv_flag_ins.
            IF <ls_contract>-shkzg = 'S'.
              <ls_excel>-dmbtr_g_d  =  <ls_excel>-dmbtr_g_d + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                <ls_excel>-wrbtr_g_d  = <ls_excel>-wrbtr_g_d + <ls_contract>-wrbtr.
                ls_main_sum-wrbtr_g_d = ls_main_sum-wrbtr_g_d + <ls_contract>-wrbtr.
              ENDIF.
              ls_main_sum-dmbtr_g_d   = ls_main_sum-dmbtr_g_d + <ls_contract>-dmbtr.
            ELSE.
              <ls_excel>-dmbtr_g_k  =  <ls_excel>-dmbtr_g_k + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                <ls_excel>-wrbtr_g_k  = <ls_excel>-wrbtr_g_k + <ls_contract>-wrbtr.
                ls_main_sum-wrbtr_g_k = ls_main_sum-wrbtr_g_k + <ls_contract>-wrbtr.
              ENDIF.
              ls_main_sum-dmbtr_g_k = ls_main_sum-dmbtr_g_k + <ls_contract>-dmbtr.
            ENDIF.
            " группировка по валюте
            IF <ls_contract>-waers_doc <> p_waers.
              READ TABLE lt_group_waers ASSIGNING <ls_group_waers>
                                        WITH KEY hkont = <ls_contract>-p_hkont
                                                 bukrs = <ls_contract>-bukrs
                                                 lifnr = <ls_contract>-p_lifnr
                                                 vertn = <ls_contract>-p_vertn
                                                 waers = <ls_contract>-waers_doc
                                        BINARY SEARCH.
              IF sy-subrc <> 0.
                INSERT VALUE #( waers = <ls_contract>-waers_doc
                                hkont = <ls_contract>-p_hkont
                                bukrs = <ls_contract>-bukrs
                                vertn = <ls_contract>-p_vertn
                                lifnr = <ls_contract>-p_lifnr
                              ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers> .
              ENDIF.
              IF <ls_group_waers> IS ASSIGNED.
                IF <ls_contract>-shkzg = 'S'.
                  <ls_group_waers>-wrbtr_g_d =  <ls_group_waers>-wrbtr_g_d + <ls_contract>-wrbtr.
                ELSE.
                  <ls_group_waers>-wrbtr_g_k =  <ls_group_waers>-wrbtr_g_k + <ls_contract>-wrbtr.
                ENDIF.
              ENDIF.
            ENDIF.
            UNASSIGN: <ls_group_waers>.
            lv_flag = 'X'.
            lv_old_lifnr = <ls_contract>-p_lifnr.
          ENDLOOP.
        ENDIF.

        UNASSIGN: <ls_partner>,<ls_excel>,<ls_group_waers>.

        " расшифровка сальдо на конец по дебету и кредиту
        LOOP AT lt_sld_end_c ASSIGNING FIELD-SYMBOL(<ls_sld_end>) WHERE r_data->p_hkont = <ls_col>-hkont
                                                                    AND r_data->bukrs   = <ls_kunnr>-bukrs
                                                                    AND r_data->p_lifnr = <ls_kunnr>-lifnr
                                                                    AND r_data->p_vertn = <ls_kunnr>-vertn.
          " наименование вида документа
          TRY.
              lv_blart = lt_blart[ blart = <ls_sld_end>-r_data->blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          " наименование контрагента
          READ TABLE lt_but000 ASSIGNING <ls_partner>
                               WITH KEY partner = <ls_sld_end>-r_data->p_lifnr
                               BINARY SEARCH.
          IF sy-subrc = 0.
            ls_ex-name = COND #( WHEN lv_old_lifnr = <ls_sld_end>-r_data->p_lifnr THEN '' ELSE <ls_partner>-name ).
          ENDIF.

          READ TABLE  lt_excel_trn ASSIGNING <ls_excel>
                                   WITH KEY key1
                                   COMPONENTS
                                             hkont = <ls_sld_end>-r_data->p_hkont
                                             budat = <ls_sld_end>-r_data->budat
                                             belnr = <ls_sld_end>-r_data->belnr
                                             bukrs_t = <ls_sld_end>-r_data->bukrs
                                             vertn = <ls_sld_end>-r_data->p_vertn
                                             sign = ''.
          IF sy-subrc <> 0.
            IF <ls_sld_end>-r_data->shkzg = 'S'.
              lv_gkont_d = COND #( WHEN <ls_sld_end>-r_data->c_hkont IS INITIAL AND <ls_sld_end>-r_data->summ IS NOT INITIAL THEN '!' ELSE <ls_sld_end>-r_data->c_hkont ).
            ELSE.
              lv_gkont_k = COND #( WHEN <ls_sld_end>-r_data->c_hkont IS INITIAL AND <ls_sld_end>-r_data->summ IS NOT INITIAL THEN '!' ELSE <ls_sld_end>-r_data->c_hkont ).
            ENDIF.

            APPEND VALUE #( nom     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN lv_nom ELSE '')
                            bukrs   = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_end>-r_data->bukrs ELSE '')
                            kod     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_end>-r_data->p_lifnr ELSE '')
                            name    = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN ls_ex-name ELSE '')
                            nom_dog = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN  <ls_sld_end>-r_data->p_vertn ELSE '')
                            name_pyd = lv_blart
                            belnr   = <ls_sld_end>-r_data->belnr
                            budat   = <ls_sld_end>-r_data->budat
                            nom_pyd = <ls_sld_end>-r_data->xblnr
                            bldat   = <ls_sld_end>-r_data->bldat
                            sgtxt   = <ls_sld_end>-r_data->p_sgtxt
                            waers   = COND #( WHEN <ls_sld_end>-r_data->waers_doc = p_waers
                                              THEN ''
                                              ELSE <ls_sld_end>-r_data->waers_doc )
                            gjahr   = <ls_sld_end>-r_data->gjahr
                            bukrs_t = <ls_sld_end>-r_data->bukrs
                            hkont   = <ls_sld_end>-r_data->p_hkont
                            vertn   = <ls_sld_end>-r_data->p_vertn
                            lifnr   = <ls_kunnr>-lifnr
                            sign    = ' '
                          ) TO lt_excel_trn ASSIGNING <ls_excel>.
            lv_insert_nom = 'X'.
          ENDIF.
          IF <ls_excel>-sign = 'B' OR <ls_excel>-sign = 'O'.
            CONTINUE.
          ENDIF.
          CLEAR lv_flag_ins.

          IF <ls_sld_end>-r_data->shkzg = 'S'.
            <ls_excel>-dmbtr_sk_d = <ls_excel>-dmbtr_sk_d  + <ls_sld_end>-r_data->summ.
            IF <ls_sld_end>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sk_d = <ls_excel>-wrbtr_sk_d  + <ls_sld_end>-r_data->wrbtr.
              ls_sum-wrbtr_sk_d  = ls_sum-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
              ls_main_sum-wrbtr_sk_d  = ls_main_sum-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sk_d  = ls_sum-dmbtr_sk_d + <ls_sld_end>-r_data->summ.
            ls_main_sum-dmbtr_sk_d  = ls_main_sum-dmbtr_sk_d + <ls_sld_end>-r_data->summ.
          ELSE.
            <ls_excel>-dmbtr_sk_k = <ls_excel>-dmbtr_sk_k  + <ls_sld_end>-r_data->summ.
            IF <ls_sld_end>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sk_k = <ls_excel>-wrbtr_sk_k  + <ls_sld_end>-r_data->wrbtr.
              ls_sum-wrbtr_sk_k  = ls_sum-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
              ls_main_sum-wrbtr_sk_k  = ls_main_sum-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sk_k  = ls_sum-dmbtr_sk_k + <ls_sld_end>-r_data->summ.
            ls_main_sum-dmbtr_sk_k =  ls_main_sum-dmbtr_sk_k + <ls_sld_end>-r_data->summ.
          ENDIF.
          lv_flag = 'X'.

          " группировка по валюте
          IF <ls_sld_end>-r_data->waers_doc <> p_waers.
            READ TABLE lt_group_waers ASSIGNING <ls_group_waers>
                                      WITH KEY hkont = <ls_sld_end>-r_data->p_hkont
                                               bukrs = <ls_sld_end>-r_data->bukrs
                                               lifnr = <ls_sld_end>-r_data->p_lifnr
                                               vertn = <ls_sld_end>-r_data->p_vertn
                                               waers = <ls_sld_end>-r_data->waers_doc
                                      BINARY SEARCH.
            IF sy-subrc <> 0.
              INSERT VALUE #( waers = <ls_sld_end>-r_data->waers_doc
                              hkont = <ls_sld_end>-r_data->p_hkont
                              bukrs = <ls_sld_end>-r_data->bukrs
                              vertn = <ls_sld_end>-r_data->p_vertn
                              lifnr = <ls_sld_end>-r_data->p_lifnr
                            ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers> .
            ENDIF.
            IF <ls_sld_end>-r_data->shkzg = 'S'.
              <ls_group_waers>-wrbtr_sk_d = <ls_group_waers>-wrbtr_sk_d  + <ls_sld_end>-r_data->wrbtr.
            ELSE.
              <ls_group_waers>-wrbtr_sk_k = <ls_group_waers>-wrbtr_sk_k  + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
          ENDIF.
        ENDLOOP.
        UNASSIGN <ls_group_waers>.

        " таблица - итого по договору
        IF lv_flag IS NOT INITIAL.
          IF <ls_excel> IS ASSIGNED.
            UNASSIGN <ls_excel>.
          ENDIF.
          CLEAR lv_flag.
          ls_sum-name = TEXT-068.
          ls_sum-nom_dog = <ls_kunnr>-vertn.
          APPEND ls_sum TO lt_excel_trn.
          " суммы для контрагента
          ls_sum_trn-dmbtr_g_d = ls_sum_trn-dmbtr_g_d + ls_sum-dmbtr_g_d.
          ls_sum_trn-dmbtr_g_k = ls_sum_trn-dmbtr_g_k + ls_sum-dmbtr_g_k.

          ls_sum_trn-wrbtr_g_d = ls_sum_trn-wrbtr_g_d + ls_sum-wrbtr_g_d.
          ls_sum_trn-wrbtr_g_k = ls_sum_trn-wrbtr_g_k + ls_sum-wrbtr_g_k.
          ls_sum_trn-wrbtr_sk_k = ls_sum_trn-wrbtr_sk_k + ls_sum-wrbtr_sk_k.
          ls_sum_trn-wrbtr_sk_d = ls_sum_trn-wrbtr_sk_d + ls_sum-wrbtr_sk_d.
          ls_sum_trn-wrbtr_sn_k = ls_sum_trn-wrbtr_sn_k + ls_sum-wrbtr_sn_k.
          ls_sum_trn-wrbtr_sn_d = ls_sum_trn-wrbtr_sn_d + ls_sum-wrbtr_sn_d.

          ls_sum_trn-dmbtr_sk_d = ls_sum_trn-dmbtr_sk_d + ls_sum-dmbtr_sk_d.
          ls_sum_trn-dmbtr_sk_k = ls_sum_trn-dmbtr_sk_k + ls_sum-dmbtr_sk_k.
          ls_sum_trn-dmbtr_sn_d = ls_sum_trn-dmbtr_sn_d + ls_sum-dmbtr_sn_d.
          ls_sum_trn-dmbtr_sn_k = ls_sum_trn-dmbtr_sn_k + ls_sum-dmbtr_sn_k.
        ENDIF.
        "таблица - в том числе в разрезе валют по договору:
        " выводим таблицу только , если нажата кнопка на гриде 'С валютой отчет'
        IF lt_group_waers IS NOT INITIAL AND gv_fcode = 'DWL_XLS_WAERS'.
          LOOP AT lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_waers>)
                                 WHERE hkont = <ls_kunnr>-hkont
                                   AND bukrs = <ls_kunnr>-bukrs
                                   AND lifnr = <ls_kunnr>-lifnr
                                   AND vertn = <ls_kunnr>-vertn
                                   AND waers <> p_waers.
            lv_waers_c = lv_waers_c + 1.
            MOVE <ls_waers> TO ls_waers.
            IF lv_waers_c = 1.
              ls_waers-name = TEXT-069.
            ENDIF.
            ls_waers-bukrs = ''.
            ls_waers-kod = ''.
            ls_waers-sign = 'W'.
            APPEND ls_waers TO lt_excel_trn.
          ENDLOOP.
          CLEAR: lv_waers_c,ls_waers.
        ENDIF.
        UNASSIGN <ls_waers_k>.
      ENDLOOP.

      " таблица Итого по контрагенту:
      ls_sum_trn-name = TEXT-070.
      ls_sum_trn-kod = ls_ex_waers-lifnr.
      APPEND ls_sum_trn TO lt_excel_trn.
      "таблица в том числе в разрезе валют по контрагенту:
      IF gv_fcode = 'DWL_XLS_WAERS'.
        LOOP AT lt_group_waers_k ASSIGNING <ls_waers_k>
                                 WHERE hkont = ls_ex_waers-hkont
                                   AND bukrs = ls_ex_waers-bukrs
                                   AND kod = ls_ex_waers-lifnr
                                   AND waers <> p_waers.

          MOVE-CORRESPONDING <ls_waers_k> TO ls_waers_k.

          lv_c = lv_c + 1.
          IF lv_c = 1.
            ls_waers_k-name = TEXT-071.
          ENDIF.
          ls_waers_k-bukrs = ''.
          ls_waers_k-kod   = ''.
          ls_waers_k-sign   = 'W'.
          APPEND ls_waers_k TO lt_excel_trn.
        ENDLOOP.
      ENDIF.
      CLEAR: ls_sum_trn,lv_c,lv_count,ls_waers_k.

      LOOP AT lt_group_gkont_d ASSIGNING <ls_group_gkont_d> WHERE hkont = <ls_col>-hkont.
        APPEND VALUE #( gkont_g_d = <ls_group_gkont_d>-gkont_g_d
                        gkont_g_k = <ls_group_gkont_d>-gkont_g_k
                        dmbtr_g_d = <ls_group_gkont_d>-dmbtr_g_d
                        dmbtr_g_k = <ls_group_gkont_d>-dmbtr_g_k
                        sign = 'S'
                      ) TO lt_group_gkont.
      ENDLOOP.

      UNASSIGN: <ls_group_gkont_d>.

      " добавляем по счету и бе корреспонденцию по кредиту в табл
      LOOP AT lt_group_gkont_k ASSIGNING <ls_group_gkont_k> WHERE hkont = <ls_col>-hkont.
        lv_t_c = lv_t_c + 1.
        ASSIGN lt_group_gkont[ lv_t_c ] TO FIELD-SYMBOL(<ls_group_gkont>).
        IF sy-subrc = 0.
          <ls_group_gkont>-gkont_g_k = <ls_group_gkont_k>-gkont_g_k.
          <ls_group_gkont>-dmbtr_g_k = <ls_group_gkont_k>-dmbtr_g_k.
        ELSE.
          APPEND VALUE #( gkont_g_d = <ls_group_gkont_k>-gkont_g_d
                          gkont_g_k = <ls_group_gkont_k>-gkont_g_k
                          dmbtr_g_d = <ls_group_gkont_k>-dmbtr_g_d
                          dmbtr_g_k = <ls_group_gkont_k>-dmbtr_g_k
                          sign = 'S'
                        ) TO lt_group_gkont.
        ENDIF.
      ENDLOOP.
      CLEAR lv_t_c.
      UNASSIGN <ls_group_gkont>.

      ls_kont-gkont_g_d = '!'.
      ls_kont-gkont_g_k = '!'.
      MODIFY lt_group_gkont FROM ls_kont TRANSPORTING gkont_g_d gkont_g_k
                                              WHERE ( gkont_g_d IS INITIAL AND dmbtr_g_d IS NOT INITIAL )
                                                 OR ( gkont_g_k IS INITIAL AND dmbtr_g_k IS NOT INITIAL ).
      ASSIGN lt_group_gkont[ 1 ] TO <ls_group_gkont>.
      IF sy-subrc = 0.
        <ls_group_gkont>-name = TEXT-065.
      ENDIF.

      UNASSIGN: <ls_sum_hkont>,<ls_group_gkont_k>,<ls_group_gkont_d>,<ls_group_gkont>.

      ls_main_sum-name = TEXT-066.
      APPEND ls_main_sum TO lt_excel_trn.  " таблица - Всего по счету
      LOOP AT lt_main_waers ASSIGNING FIELD-SYMBOL(<ls_w>)
                            WHERE hkont = <ls_col>-hkont
                              AND waers <> p_waers.
        lv_waers_nom = lv_waers_nom + 1.
        APPEND VALUE #( name = COND #( WHEN lv_waers_nom = 1 THEN TEXT-072 ELSE '' )
                        waers = <ls_w>-waers
                        wrbtr_sn_d = <ls_w>-wrbtr_sn_d
                        wrbtr_sn_k = <ls_w>-wrbtr_sn_k
                        wrbtr_g_d  = <ls_w>-wrbtr_g_d
                        wrbtr_g_k  = <ls_w>-wrbtr_g_k
                        wrbtr_sk_d = <ls_w>-wrbtr_sk_d
                        wrbtr_sk_k = <ls_w>-wrbtr_sk_k
                        sign = 'W' ) TO lt_excel_trn.
      ENDLOOP.
      APPEND LINES OF lt_group_gkont TO lt_excel_trn.
      CLEAR: ls_ex-nom, lt_group_gkont,lv_nom,lv_waers_nom.
    ENDLOOP.
    UNASSIGN <ls_excel>.
    IF  p_ndoc IS NOT INITIAL.
      SORT lt_vertn BY zext_key.
      LOOP AT lt_excel_trn ASSIGNING FIELD-SYMBOL(<ls_excel_aggr>) WHERE nom_dog IS NOT INITIAL.
        READ TABLE lt_vertn ASSIGNING FIELD-SYMBOL(<ls_vertn>)
                            WITH KEY zext_key = <ls_excel_aggr>-nom_dog
                            BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_excel_aggr>-nom_dog = <ls_vertn>-zz_ndoc.
        ENDIF.
      ENDLOOP.
    ENDIF.

    MOVE-CORRESPONDING lt_excel_trn TO ct_excel_trn.
  ENDMETHOD.

  METHOD excel_trn_whbukrs.
    TYPES:
      BEGIN OF lty_s_but000,
        partner TYPE bu_partner,
        name    TYPE string,
      END OF lty_s_but000,

      BEGIN OF lty_s_kunnr,
        lifnr      TYPE lifnr,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        vertn      TYPE ranl,
        blart      TYPE blart,
        dmbtr_sn_d TYPE dmbtr,
        wrbtr_sn_d TYPE wrbtr,
        dmbtr_sn_k TYPE dmbtr,
        wrbtr_sn_k TYPE wrbtr,
        dmbtr_g_d  TYPE dmbtr,
        wrbtr_g_d  TYPE wrbtr,
        dmbtr_g_k  TYPE dmbtr,
        wrbtr_g_k  TYPE wrbtr,
        dmbtr_sk_d TYPE dmbtr,
        wrbtr_sk_d TYPE wrbtr,
        dmbtr_sk_k TYPE dmbtr,
        wrbtr_sk_k TYPE wrbtr,
      END OF lty_s_kunnr,

      BEGIN OF lty_s_collect,
        hkont      TYPE hkont,
        bukrs      TYPE bukrs,
        hkont_name TYPE zfi_registr_acc-hkont_name,
        sld_id     TYPE zfi_registr_acc-sld_id,
        sld_ik     TYPE zfi_registr_acc-sld_ik,
        sld_od     TYPE zfi_registr_acc-sld_od,
        sld_ok     TYPE zfi_registr_acc-sld_ok,
        debet      TYPE zfi_registr_acc-debet,
        kredit     TYPE zfi_registr_acc-kredit,
      END OF lty_s_collect,

      BEGIN OF lty_s_ex,
        name    TYPE char200,
        lifnr   TYPE lifnr,
        bukrs   TYPE bukrs,
        nom     TYPE char5,
        nom_dog TYPE char13,
        hkont   TYPE hkont,
      END OF lty_s_ex,

      BEGIN OF lty_s_registr,
        hkont        TYPE hkont,
        bukrs        TYPE bukrs,
        hkont_name   TYPE zfi_registr_acc-hkont_name,
        partner      TYPE lifnr,
        sld_id       TYPE zfi_registr_acc-sld_id,
        sld_ik       TYPE zfi_registr_acc-sld_ik,
        sld_od       TYPE zfi_registr_acc-sld_od,
        sld_ok       TYPE zfi_registr_acc-sld_ok,
        debet        TYPE zfi_registr_acc-debet,
        kredit       TYPE zfi_registr_acc-kredit,
        partner_name TYPE string,
      END OF lty_s_registr,

      BEGIN OF lty_s_gkontd,
        hkont     TYPE hkont,
        name      TYPE char200,
        gkont_g_d TYPE gkont,
        gkont_g_k TYPE gkont,
        dmbtr_g_d TYPE dmbtr,
        dmbtr_g_k TYPE dmbtr,
        sign      TYPE char1,
      END OF lty_s_gkontd,

      BEGIN OF lty_s_waers,
        hkont      TYPE hkont,
        waers      TYPE waers,
        wrbtr_sn_d TYPE wrbtr,
        wrbtr_sn_k TYPE wrbtr,
        wrbtr_g_d  TYPE wrbtr,
        wrbtr_g_k  TYPE wrbtr,
        wrbtr_sk_d TYPE wrbtr,
        wrbtr_sk_k TYPE wrbtr,
      END OF lty_s_waers,
      BEGIN OF lty_s_text,
        bukrs TYPE bukrs,
        belnr TYPE belnr_d,
        gjahr TYPE gjahr,
        buzei TYPE buzei,
        text  TYPE string,
      END OF lty_s_text,
      lty_t_text TYPE STANDARD TABLE OF lty_s_text WITH DEFAULT KEY.

    DATA:
      lt_sld_beg_c TYPE STANDARD TABLE OF gty_s_detail_tr,
      lt_sld_end_c TYPE STANDARD TABLE OF gty_s_detail_tr.

    DATA:
      lt_sum_sld_e     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_group_gkont_d TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_g_d,
      lt_group_gkont_k TYPE SORTED TABLE OF lty_s_gkontd WITH UNIQUE KEY hkont gkont_g_k,
      lt_sum_sld_b     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_main_waers    TYPE SORTED TABLE OF lty_s_waers  WITH UNIQUE KEY hkont waers,
      lt_sum_hkont     TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont,
      lt_group_waers_k TYPE SORTED TABLE OF gty_s_trn    WITH UNIQUE KEY hkont kod waers,
      lt_kunnr         TYPE SORTED TABLE OF lty_s_kunnr  WITH UNIQUE KEY hkont lifnr vertn,
      lt_but000        TYPE SORTED TABLE OF lty_s_but000 WITH UNIQUE KEY partner,
      lt_excel_trn     TYPE STANDARD TABLE OF gty_s_trn  WITH NON-UNIQUE SORTED KEY key1 COMPONENTS hkont budat belnr bukrs_t vertn gkont_g_d sign p_buzei c_buzei lifnr,
      lt_detail        TYPE STANDARD TABLE OF zfi_registr_acc_detail,
      lt_detail_ex     TYPE TABLE OF zfi_registr_acc_detail,
      lt_vertn         TYPE STANDARD TABLE OF gty_s_vertn,
      lt_group_gkont   TYPE TABLE OF gty_s_trn,
      lt_hkont         TYPE RANGE OF bseg-hkont,
      lt_collect       TYPE TABLE OF lty_s_collect,
      lt_group_waers   TYPE TABLE OF  gty_s_trn,
      ls_sum           TYPE gty_s_trn,
      ls_main_sum      TYPE gty_s_trn,
      ls_waers         TYPE gty_s_trn,
      ls_data_ex       TYPE lty_s_registr,
      ls_waers_k       TYPE gty_s_trn,
      lv_old_lifnr     TYPE lifnr,
      ls_sum_trn       TYPE  gty_s_trn,
      ls_ex            TYPE lty_s_ex,
      ls_ex_waers      TYPE lty_s_ex,
      ls_kont          TYPE  gty_s_trn,
      lv_blart         TYPE char20,
      lv_count         TYPE i,
      lv_old_nom       TYPE i,
      lv_nom           TYPE i,
      lv_waers_c       TYPE i,
      lv_tabix         TYPE i,
      lv_t_c           TYPE i,
      lv_c             TYPE i,
      lv_waers_nom     TYPE i,
      lv_flag          TYPE char1,
      lv_flag_ins      TYPE char1,
      lv_insert_nom    TYPE char1,
      lv_edate         TYPE d,
      lv_gkont_d       TYPE gkont,
      lv_gkont_k       TYPE gkont,
      lv_partner       TYPE string,
      lt_text          TYPE lty_t_text.

    FIELD-SYMBOLS: <lt_data_ex> TYPE STANDARD TABLE.
    " наименование вида документа
    SELECT blart, ltext
      FROM t003t
      INTO TABLE @DATA(lt_blart)
      WHERE spras = @sy-langu
      ORDER BY blart.

    ASSIGN gr_data->* TO <lt_data_ex>.
    " группируем по счету
    LOOP AT <lt_data_ex> ASSIGNING FIELD-SYMBOL(<ls_data_ex>).
      MOVE-CORRESPONDING <ls_data_ex> TO ls_data_ex.
      IF NOT line_exists( lt_but000[ partner = ls_data_ex-partner ] ).
        SPLIT ls_data_ex-partner_name AT '-' INTO lv_partner ls_data_ex-partner_name.
        CONDENSE ls_data_ex-partner_name.
        CONDENSE lv_partner.
        IF ls_data_ex-partner_name = ls_data_ex-partner.
          ls_data_ex-partner_name = lv_partner.
          lv_partner = ls_data_ex-partner.
        ENDIF.
        INSERT VALUE #( partner = ls_data_ex-partner name = ls_data_ex-partner_name )
          INTO TABLE lt_but000.
      ENDIF.
      " группировка по счетам
      READ TABLE lt_collect[] ASSIGNING FIELD-SYMBOL(<ls_collect>)
                              WITH KEY hkont = COND #( WHEN p_mlev IS INITIAL
                                                       THEN ls_data_ex-hkont
                                                       ELSE ls_data_ex-hkont_name )
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = COND #( WHEN p_mlev IS INITIAL
                                        THEN ls_data_ex-hkont
                                        ELSE ls_data_ex-hkont_name )
                        bukrs = ls_data_ex-bukrs
                        hkont_name = ls_data_ex-hkont_name
                      ) INTO lt_collect INDEX sy-tabix ASSIGNING <ls_collect>.
      ENDIF.
      <ls_collect>-sld_id = <ls_collect>-sld_id + ls_data_ex-sld_id.
      <ls_collect>-sld_ik = <ls_collect>-sld_ik + ls_data_ex-sld_ik.
      <ls_collect>-sld_od = <ls_collect>-sld_od + ls_data_ex-sld_od.
      <ls_collect>-sld_ok = <ls_collect>-sld_ok + ls_data_ex-sld_ok.
      <ls_collect>-debet  = <ls_collect>-debet  + ls_data_ex-debet.
      <ls_collect>-kredit = <ls_collect>-kredit + ls_data_ex-kredit.
      " Добавляем Контрагентов
      READ TABLE lt_but000 ASSIGNING FIELD-SYMBOL(<ls_but000>)
                           WITH KEY partner = ls_data_ex-partner
                           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( partner = ls_data_ex-partner
                      ) INTO lt_but000 INDEX sy-tabix ASSIGNING <ls_but000>.
      ENDIF.
    ENDLOOP.
    SORT lt_collect BY hkont.
    lt_hkont[] = VALUE #( FOR <ls> IN lt_collect (
                            sign = 'I'
                            option = COND #( WHEN p_mlev IS INITIAL
                                             THEN 'EQ'
                                             ELSE 'CP')
                            low = <ls>-hkont
                         ) ).

    lv_edate = COND #( WHEN s_date-high IS INITIAL
                         THEN s_date-low + 1
                         ELSE s_date-high + 1 ).

    " сальдо на начало по дебету
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = VALUE #( s_date[ 1 ]-low )
                                         iv_shkzg      = 'S'
                                         iv_detbal     = abap_true
                               IMPORTING et_detail     = DATA(lt_sld_beg_s_data)
                             ).
    LOOP AT lt_sld_beg_s_data REFERENCE INTO DATA(lr_sld).
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                      bukrs   = lr_sld->bukrs
                    ) TO lt_sld_beg_c.
    ENDLOOP.
    " сальдо на начало по кредиту
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = VALUE #( s_date[ 1 ]-low )
                                         iv_shkzg      = 'H'
                                         iv_detbal     = abap_true
                               IMPORTING et_detail     = DATA(lt_sld_beg_h_data)
                             ).
    LOOP AT lt_sld_beg_h_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                      bukrs   = lr_sld->bukrs
                    ) TO lt_sld_beg_c.
    ENDLOOP.

    " сальдо на конец по кредиту
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = lv_edate
                                         iv_shkzg      = 'H'
                                         iv_detbal     = abap_true
                               IMPORTING et_detail     = DATA(lt_sld_end_s_data)
                             ).
    LOOP AT lt_sld_end_s_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                      bukrs   = lr_sld->bukrs
                    ) TO lt_sld_end_c.
    ENDLOOP.

    " сальдо на конец по дебету
    gr_sldtrn->get_sld_detail( EXPORTING it_hkont_rng  = lt_hkont[]
                                         iv_date       = lv_edate
                                         iv_shkzg      = 'S'
                                         iv_detbal     = abap_true
                               IMPORTING et_detail     = DATA(lt_sld_end_h_data)
                              ).
    LOOP AT lt_sld_end_h_data REFERENCE INTO lr_sld.
      lr_sld->p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr ).
      APPEND VALUE #( r_data  = lr_sld
                      p_hkont = lr_sld->p_hkont
                      shkzg   = lr_sld->shkzg
                      p_lifnr = COND #( WHEN lr_sld->p_lifnr IS INITIAL THEN lr_sld->p_kunnr ELSE lr_sld->p_lifnr )
                      p_vertn = lr_sld->p_vertn
                      budat   = lr_sld->budat
                      belnr   = lr_sld->belnr
                      bukrs   = lr_sld->bukrs
                    ) TO lt_sld_end_c.
    ENDLOOP.

    SORT lt_sld_end_c BY p_hkont shkzg DESCENDING p_lifnr p_vertn budat belnr bukrs.
    SORT lt_sld_beg_c BY p_hkont shkzg DESCENDING p_lifnr p_vertn budat belnr bukrs.

    " обороты по кредиту
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng = lt_hkont[]
                                         iv_shkzg     = 'H'
                               IMPORTING et_detail    = lt_detail
                              ).
    LOOP AT lt_detail REFERENCE INTO DATA(lr_detail).
      lr_detail->p_lifnr = COND #( WHEN lr_detail->p_lifnr IS INITIAL THEN lr_detail->p_kunnr ELSE lr_detail->p_lifnr ).
    ENDLOOP.
    APPEND LINES OF lt_detail TO lt_detail_ex.
    CLEAR lt_detail.
    " обороты по дебету
    gr_sldtrn->get_trn_detail( EXPORTING it_hkont_rng = lt_hkont[]
                                         iv_shkzg     = 'S'
                               IMPORTING et_detail    = lt_detail
                              ).
    LOOP AT lt_detail REFERENCE INTO lr_detail.
      lr_detail->p_lifnr = COND #( WHEN lr_detail->p_lifnr IS INITIAL THEN lr_detail->p_kunnr ELSE lr_detail->p_lifnr ).
    ENDLOOP.
    APPEND LINES OF lt_detail TO lt_detail_ex.
    DATA(lv_num_razn) = gc_kont - p_mlev.
    DATA(lv_num_rzkont) = gc_kont - p_clev.
    lcl_report=>read_text_trn( CHANGING ct_text = lt_text
                                        ct_data = lt_sld_beg_c ).

    IF  p_ndoc IS NOT INITIAL.
      lcl_report=>exc_agreement_buk( CHANGING ct_beg    = lt_sld_beg_c
                                              ct_end    = lt_sld_end_c
                                              ct_detail = lt_detail_ex
                                              ct_vertn  = lt_vertn ).
    ENDIF.
    SORT lt_text BY bukrs belnr gjahr buzei.
    " считаем общие суммы для каждого счета по сальдо на начало
    LOOP AT lt_sld_beg_c ASSIGNING FIELD-SYMBOL(<ls_sld_beg>).
*      <ls_sld_beg>-r_data->summ = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->summ < 0
*                                           THEN <ls_sld_beg>-r_data->summ * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->summ ).
*      <ls_sld_beg>-r_data->wrbtr = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->wrbtr < 0
*                                           THEN <ls_sld_beg>-r_data->wrbtr * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->wrbtr ).
      READ TABLE lt_text ASSIGNING FIELD-SYMBOL(<ls_text>)
                         WITH KEY bukrs = <ls_sld_beg>-r_data->bukrs
                                  belnr = <ls_sld_beg>-r_data->belnr
                                  gjahr = <ls_sld_beg>-r_data->gjahr
                                  buzei = <ls_sld_beg>-r_data->p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_sld_beg>-r_data->p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_sld_beg>-p_hkont IS NOT INITIAL.
        <ls_sld_beg>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_mlev > 0 AND <ls_sld_beg>-r_data->p_hkont IS NOT INITIAL.
        <ls_sld_beg>-r_data->p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.

      " код контрагента для счета
      READ TABLE lt_kunnr ASSIGNING FIELD-SYMBOL(<ls_kunnr>)
                          WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                   lifnr = <ls_sld_beg>-r_data->p_lifnr
                                   vertn = <ls_sld_beg>-r_data->p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_sld_beg>-r_data->p_lifnr
                        hkont = <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        vertn = <ls_sld_beg>-r_data->p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      READ TABLE lt_sum_sld_b ASSIGNING FIELD-SYMBOL(<ls_sum_sld_b>)
                              WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont
                      ) INTO lt_sum_sld_b INDEX sy-tabix ASSIGNING <ls_sum_sld_b> .
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_sum_sld_b>-dmbtr_sn_d = <ls_sum_sld_b>-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_sum_sld_b>-wrbtr_sn_d = <ls_sum_sld_b>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        <ls_sum_sld_b>-dmbtr_sn_k = <ls_sum_sld_b>-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_sum_sld_b>-wrbtr_sn_k = <ls_sum_sld_b>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING FIELD-SYMBOL(<ls_main_waers>)
                               WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                        waers = <ls_sld_beg>-r_data->waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont
                        waers = <ls_sld_beg>-r_data->waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers>.
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sn_d = <ls_main_waers>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sn_k = <ls_main_waers>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      " группировка по валюте контрагента по сальдо на начало
      READ TABLE lt_group_waers_k ASSIGNING FIELD-SYMBOL(<ls_group_waers_k>)
                                  WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                           kod   = <ls_sld_beg>-r_data->p_lifnr
                                           waers = <ls_sld_beg>-r_data->waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_sld_beg>-r_data->waers_doc <> p_waers.
        INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                        hkont =  <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        kod   = <ls_sld_beg>-r_data->p_lifnr
                      ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k>.
      ENDIF.
      IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
        <ls_group_waers_k>-wrbtr_sn_k = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' THEN <ls_group_waers_k>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr
                                                                                      ELSE <ls_group_waers_k>-wrbtr_sn_k ).
        <ls_group_waers_k>-wrbtr_sn_d = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'S' THEN <ls_group_waers_k>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr
                                                                                      ELSE <ls_group_waers_k>-wrbtr_sn_d  ).
      ENDIF.
    ENDLOOP.
    UNASSIGN: <ls_sld_beg>,<ls_kunnr>,<ls_group_waers_k>,<ls_main_waers>,<ls_text>.
    lcl_report=>read_text_trn( CHANGING ct_text = lt_text
                                        ct_data = lt_sld_end_c ).
    SORT lt_text BY bukrs belnr gjahr buzei.

    " считаем общие суммы для каждого счета по сальдо на конец
    LOOP AT lt_sld_end_c ASSIGNING <ls_sld_beg>.
*      <ls_sld_beg>-r_data->summ = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->summ < 0
*                                           THEN <ls_sld_beg>-r_data->summ * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->summ ).
*      <ls_sld_beg>-r_data->wrbtr = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' AND <ls_sld_beg>-r_data->wrbtr < 0
*                                           THEN <ls_sld_beg>-r_data->wrbtr * ( -1 )
*                                           ELSE <ls_sld_beg>-r_data->wrbtr ).
      READ TABLE lt_text ASSIGNING <ls_text>
                         WITH KEY bukrs = <ls_sld_beg>-r_data->bukrs
                                  belnr = <ls_sld_beg>-r_data->belnr
                                  gjahr = <ls_sld_beg>-r_data->gjahr
                                  buzei = <ls_sld_beg>-r_data->p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_sld_beg>-r_data->p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_sld_beg>-p_hkont IS NOT INITIAL.
        <ls_sld_beg>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_mlev > 0 AND <ls_sld_beg>-r_data->p_hkont IS NOT INITIAL.
        <ls_sld_beg>-r_data->p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      READ TABLE lt_kunnr ASSIGNING <ls_kunnr>
                          WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                   lifnr = <ls_sld_beg>-r_data->p_lifnr
                                   vertn = <ls_sld_beg>-r_data->p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_sld_beg>-r_data->p_lifnr
                        hkont = <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        vertn = <ls_sld_beg>-r_data->p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_sld_beg>-r_data->dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING <ls_main_waers>
                               WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                        waers = <ls_sld_beg>-r_data->waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont
                        waers = <ls_sld_beg>-r_data->waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers>.
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_sld_beg>-r_data->shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sk_d = <ls_main_waers>-wrbtr_sk_d + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_sld_beg>-r_data->shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_sk_k = <ls_main_waers>-wrbtr_sk_k + <ls_sld_beg>-r_data->wrbtr.
        ENDIF.
      ENDIF.

      READ TABLE lt_sum_sld_e ASSIGNING FIELD-SYMBOL(<ls_sum_sld_e>)
                              WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                              BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_sld_beg>-r_data->p_hkont ) INTO lt_sum_sld_e INDEX sy-tabix ASSIGNING <ls_sum_sld_e> .
      ENDIF.

      IF <ls_sld_beg>-r_data->shkzg = 'S'.
        " суммы сальдо на конец
        <ls_sum_sld_e>-dmbtr_sk_d = <ls_sum_sld_e>-dmbtr_sk_d + <ls_sld_beg>-r_data->summ.
        <ls_sum_sld_e>-wrbtr_sk_d = <ls_sum_sld_e>-wrbtr_sk_d + <ls_sld_beg>-r_data->wrbtr.
      ELSE.
        <ls_sum_sld_e>-dmbtr_sk_k = <ls_sum_sld_e>-dmbtr_sk_k + <ls_sld_beg>-r_data->summ.
        <ls_sum_sld_e>-wrbtr_sk_k = <ls_sum_sld_e>-wrbtr_sk_k + <ls_sld_beg>-r_data->wrbtr.
      ENDIF.

      " группировка по валюте контрагента по сальдо на конец
      READ TABLE lt_group_waers_k ASSIGNING <ls_group_waers_k>
                                  WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                           kod   = <ls_sld_beg>-r_data->p_lifnr
                                           waers = <ls_sld_beg>-r_data->waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_sld_beg>-r_data->waers_doc <> p_waers.
        INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                        hkont =  <ls_sld_beg>-r_data->p_hkont
                        bukrs = <ls_sld_beg>-r_data->bukrs
                        kod   = <ls_sld_beg>-r_data->p_lifnr
                       ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k>.
      ENDIF.
      IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
        <ls_group_waers_k>-wrbtr_sk_k = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'H' THEN <ls_group_waers_k>-wrbtr_sk_k + <ls_sld_beg>-r_data->wrbtr
                                                                                      ELSE <ls_group_waers_k>-wrbtr_sk_k ).
        <ls_group_waers_k>-wrbtr_sk_d = COND #( WHEN <ls_sld_beg>-r_data->shkzg = 'S' THEN <ls_group_waers_k>-wrbtr_sk_d + <ls_sld_beg>-r_data->wrbtr
                                                                                      ELSE <ls_group_waers_k>-wrbtr_sk_d  ).
      ENDIF.
    ENDLOOP.
    UNASSIGN: <ls_sum_sld_e>,<ls_kunnr>,<ls_group_waers_k>,<ls_main_waers>,<ls_text>.
    lcl_report=>read_text( CHANGING ct_text   = lt_text
                                    ct_detail = lt_detail_ex ).
    SORT lt_text BY bukrs belnr gjahr buzei.

    LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_detail>).
      READ TABLE lt_text ASSIGNING <ls_text>
                         WITH KEY bukrs = <ls_detail>-bukrs
                                  belnr = <ls_detail>-belnr
                                  gjahr = <ls_detail>-gjahr
                                  buzei = <ls_detail>-p_buzei
                         BINARY SEARCH.
      IF sy-subrc = 0.
        <ls_detail>-p_sgtxt = <ls_text>-text.
      ENDIF.

      IF p_mlev > 0 AND <ls_detail>-p_hkont IS NOT INITIAL.
        <ls_detail>-p_hkont+p_mlev(lv_num_razn) = '*'.
      ENDIF.
      IF p_clev > 0 AND <ls_detail>-c_hkont IS NOT INITIAL.
        <ls_detail>-c_hkont+p_clev(lv_num_rzkont) = '*'.
      ENDIF.
      " получаем общие суммы для каждого счета
      READ TABLE lt_sum_hkont[] ASSIGNING FIELD-SYMBOL(<ls_sum_hkont>)
                                WITH KEY hkont = <ls_detail>-p_hkont
                                BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        name = TEXT-066
                      ) INTO lt_sum_hkont INDEX sy-tabix ASSIGNING <ls_sum_hkont>.
      ENDIF.
      IF <ls_detail>-shkzg = 'S'.
        <ls_sum_hkont>-dmbtr_g_d = <ls_sum_hkont>-dmbtr_g_d + <ls_detail>-dmbtr.
        <ls_sum_hkont>-wrbtr_g_d = <ls_sum_hkont>-wrbtr_g_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_sum_hkont>-dmbtr_g_k = <ls_sum_hkont>-dmbtr_g_k + <ls_detail>-dmbtr.
        <ls_sum_hkont>-wrbtr_g_k = <ls_sum_hkont>-wrbtr_g_k + <ls_detail>-wrbtr.
      ENDIF.
      " уникальный номер контрагента
      READ TABLE lt_but000 ASSIGNING <ls_but000>
                           WITH KEY partner = <ls_detail>-p_lifnr
                           BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( partner = <ls_detail>-p_lifnr ) INTO lt_but000 INDEX sy-tabix ASSIGNING <ls_but000>.
      ENDIF.

      " код контрагента для счета
      READ TABLE lt_kunnr ASSIGNING <ls_kunnr>
                          WITH KEY hkont = <ls_detail>-p_hkont
                                   lifnr = <ls_detail>-p_lifnr
                                   vertn = <ls_detail>-p_vertn
                          BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( lifnr = <ls_detail>-p_lifnr
                        hkont = <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        vertn = <ls_detail>-p_vertn
                      ) INTO lt_kunnr INDEX sy-tabix ASSIGNING <ls_kunnr>.
      ENDIF.
      " итого по контрагентам  - обороты
      IF <ls_detail>-shkzg = 'S'.
        <ls_kunnr>-dmbtr_g_d = <ls_kunnr>-dmbtr_g_d + <ls_detail>-dmbtr.
        <ls_kunnr>-wrbtr_g_d = <ls_kunnr>-wrbtr_g_d + <ls_detail>-wrbtr.
      ELSE.
        <ls_kunnr>-dmbtr_g_k = <ls_kunnr>-dmbtr_g_k + <ls_detail>-dmbtr.
        <ls_kunnr>-wrbtr_g_k = <ls_kunnr>-wrbtr_g_k + <ls_detail>-wrbtr.
      ENDIF.

      " в разрезе валют по счету
      READ TABLE lt_main_waers ASSIGNING <ls_main_waers>
                               WITH KEY hkont = <ls_detail>-p_hkont
                                        waers = <ls_detail>-waers_doc
                               BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( hkont = <ls_detail>-p_hkont
                        waers = <ls_detail>-waers_doc
                      ) INTO lt_main_waers INDEX sy-tabix ASSIGNING <ls_main_waers>.
      ENDIF.
      " суммы сальдо на начало
      IF  <ls_detail>-shkzg = 'S'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_g_d = <ls_main_waers>-wrbtr_g_d + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.
      IF <ls_detail>-shkzg = 'H'.
        IF gv_fcode = 'DWL_XLS_WAERS'.
          <ls_main_waers>-wrbtr_g_k = <ls_main_waers>-wrbtr_g_k + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.

      " группировка по валюте контрагента по оборотам
      READ TABLE lt_group_waers_k ASSIGNING <ls_group_waers_k>
                                  WITH KEY hkont = <ls_detail>-p_hkont
                                           kod   = <ls_detail>-p_lifnr
                                           waers = <ls_detail>-waers_doc
                                  BINARY SEARCH.
      IF sy-subrc <> 0 AND <ls_detail>-waers_doc <> p_waers.
        INSERT VALUE #( waers = <ls_detail>-waers_doc
                        hkont =  <ls_detail>-p_hkont
                        bukrs = <ls_detail>-bukrs
                        kod   = <ls_detail>-p_lifnr
                      ) INTO lt_group_waers_k INDEX sy-tabix ASSIGNING <ls_group_waers_k>.
      ENDIF.
      IF <ls_detail>-waers_doc <> p_waers.
        IF <ls_detail>-shkzg = 'S'.
          <ls_group_waers_k>-wrbtr_g_d = <ls_group_waers_k>-wrbtr_g_d + <ls_detail>-wrbtr.
        ELSE.
          <ls_group_waers_k>-wrbtr_g_k = <ls_group_waers_k>-wrbtr_g_k + <ls_detail>-wrbtr.
        ENDIF.
      ENDIF.
      UNASSIGN <ls_group_waers_k>.

      " группировка по корреспонд. счету по дебету
      READ TABLE lt_group_gkont_d ASSIGNING FIELD-SYMBOL(<ls_group_gkont_d>)
                                  WITH KEY hkont     = <ls_detail>-p_hkont
                                           gkont_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '' )
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( gkont_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_detail>-c_hkont ELSE '' )
                        hkont     = <ls_detail>-p_hkont
                      ) INTO lt_group_gkont_d INDEX sy-tabix ASSIGNING <ls_group_gkont_d>.
      ENDIF.
      <ls_group_gkont_d>-dmbtr_g_d = COND #( WHEN <ls_detail>-shkzg = 'S' THEN <ls_group_gkont_d>-dmbtr_g_d + <ls_detail>-dmbtr ELSE <ls_group_gkont_d>-dmbtr_g_d ).

      " группировка по корреспонд. счету по кредиту
      READ TABLE lt_group_gkont_k ASSIGNING FIELD-SYMBOL(<ls_group_gkont_k>)
                                  WITH KEY hkont     = <ls_detail>-p_hkont
                                           gkont_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '' )
                                  BINARY SEARCH.
      IF sy-subrc <> 0.
        INSERT VALUE #( gkont_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_detail>-c_hkont ELSE '' )
                        hkont     = <ls_detail>-p_hkont
                      ) INTO lt_group_gkont_k INDEX sy-tabix ASSIGNING <ls_group_gkont_k>.
      ENDIF.
      <ls_group_gkont_k>-dmbtr_g_k = COND #( WHEN <ls_detail>-shkzg = 'H' THEN <ls_group_gkont_k>-dmbtr_g_k + <ls_detail>-dmbtr ELSE <ls_group_gkont_k>-dmbtr_g_k ).
      UNASSIGN: <ls_group_gkont_k>,<ls_group_gkont_d>.
    ENDLOOP.

    DELETE lt_group_gkont_k WHERE gkont_g_k IS INITIAL AND dmbtr_g_k IS INITIAL.
    DELETE lt_group_gkont_d WHERE gkont_g_d IS INITIAL AND dmbtr_g_d IS INITIAL.

    CLEAR:ls_sum.
    UNASSIGN: <ls_kunnr>,<ls_sld_beg>,<ls_sum_sld_b>,<ls_group_gkont_d>,<ls_group_gkont_k>.


    IF lt_sld_beg_c[] IS INITIAL AND lt_sld_end_c IS INITIAL AND lt_detail_ex IS INITIAL.
      RETURN.
    ENDIF.

    SORT lt_detail_ex BY p_hkont p_lifnr p_vertn budat belnr bukrs.

    LOOP AT lt_collect ASSIGNING FIELD-SYMBOL(<ls_col>).
      CLEAR: ls_main_sum.

      APPEND VALUE #( nom = TEXT-067 && ` ` && <ls_col>-hkont_name
                      dmbtr_sn_d = <ls_col>-sld_id
                      dmbtr_sn_k = <ls_col>-sld_ik
                      dmbtr_sk_d = <ls_col>-sld_od
                      dmbtr_sk_k = <ls_col>-sld_ok
                      dmbtr_g_d  = <ls_col>-debet
                      dmbtr_g_k  = <ls_col>-kredit
                    ) TO lt_excel_trn.
      UNASSIGN <ls_sum_sld_b>.

      " идем по котрагентам
      LOOP AT lt_kunnr ASSIGNING <ls_kunnr> WHERE hkont = <ls_col>-hkont.
        CLEAR: ls_sum,lv_tabix,lv_old_nom,lv_insert_nom.
        lv_count = lv_count + 1.
        lv_old_nom = lv_old_nom + 1.
        IF lv_old_nom = 1.
          lv_flag_ins = 'X'.
          lv_old_lifnr = '!!!'.
        ENDIF.
        lv_nom = lv_nom + 1.
        IF lv_count > 1.
          IF ls_ex_waers-lifnr <> <ls_kunnr>-lifnr.
            " таблица Итого по контрагенту:
            ls_sum_trn-name = TEXT-070.
            ls_sum_trn-kod = ls_ex_waers-lifnr.
            APPEND ls_sum_trn TO lt_excel_trn.
            " таблица в том числе в разрезе валют по контрагенту:
            IF gv_fcode = 'DWL_XLS_WAERS'.
              LOOP AT lt_group_waers_k ASSIGNING FIELD-SYMBOL(<ls_waers_k>) WHERE hkont = ls_ex_waers-hkont
                                                                              AND kod   = ls_ex_waers-lifnr
                                                                              AND waers <> p_waers.
                MOVE-CORRESPONDING <ls_waers_k> TO ls_waers_k.
                ADD 1 TO lv_c.
                IF lv_c = 1.
                  ls_waers_k-name = TEXT-071.
                ENDIF.
                ls_waers_k-bukrs = ''.
                ls_waers_k-kod   = ''.
                ls_waers_k-sign   = 'W'.
                APPEND ls_waers_k TO lt_excel_trn.
              ENDLOOP.
            ENDIF.
            CLEAR: ls_sum_trn,lv_c,ls_waers_k.
          ENDIF.
        ENDIF.

        " запоминаем старый счет, контрагент, бе, чтобы использовать для заполнения табл В разрезе валют по контрагенту
        ls_ex_waers-hkont = <ls_kunnr>-hkont.
        ls_ex_waers-lifnr = <ls_kunnr>-lifnr.

        " расшифровка сальдо на начало по дебету и кредиту
        LOOP AT lt_sld_beg_c ASSIGNING <ls_sld_beg> WHERE r_data->p_hkont = <ls_col>-hkont
                                                      AND r_data->p_lifnr = <ls_kunnr>-lifnr
                                                      AND r_data->p_vertn = <ls_kunnr>-vertn.
          " наименование вида документа
          TRY.
              lv_blart = lt_blart[ blart = <ls_sld_beg>-r_data->blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          " наименование контрагента
          READ TABLE lt_but000 ASSIGNING FIELD-SYMBOL(<ls_partner>)
                               WITH KEY partner = <ls_sld_beg>-r_data->p_lifnr
                               BINARY SEARCH.
          IF sy-subrc = 0.
            ls_ex-name = COND #( WHEN lv_old_lifnr = <ls_sld_beg>-r_data->p_lifnr THEN ''
                                   ELSE <ls_partner>-name ).
          ENDIF.

          READ TABLE  lt_excel_trn ASSIGNING FIELD-SYMBOL(<ls_excel>)
                                   WITH KEY key1
                                   COMPONENTS hkont   = <ls_sld_beg>-r_data->p_hkont
                                              budat   = <ls_sld_beg>-r_data->budat
                                              belnr   = <ls_sld_beg>-r_data->belnr
                                              bukrs_t = <ls_sld_beg>-r_data->bukrs
                                              vertn   = <ls_sld_beg>-r_data->p_vertn
                                              p_buzei = <ls_sld_beg>-r_data->p_buzei
                                              c_buzei = <ls_sld_beg>-r_data->c_buzei.
          IF sy-subrc <> 0.
            IF <ls_sld_beg>-r_data->shkzg = 'S'.
              lv_gkont_d = COND #( WHEN <ls_sld_beg>-r_data->c_hkont IS INITIAL AND <ls_sld_beg>-r_data->summ IS NOT INITIAL THEN '!'
                                     ELSE <ls_sld_beg>-r_data->c_hkont ).
            ELSE.
              lv_gkont_k = COND #( WHEN <ls_sld_beg>-r_data->c_hkont IS INITIAL AND <ls_sld_beg>-r_data->summ IS NOT INITIAL THEN '!'
                                     ELSE <ls_sld_beg>-r_data->c_hkont ).
            ENDIF.

            APPEND VALUE #( nom      = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN lv_nom ELSE '' )
                            bukrs    = <ls_sld_beg>-r_data->bukrs
                            kod      = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_beg>-r_data->p_lifnr ELSE '' )
                            name     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN ls_ex-name ELSE '' )
                            nom_dog  = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_beg>-r_data->p_vertn ELSE '' )
                            name_pyd = lv_blart
                            belnr    = <ls_sld_beg>-r_data->belnr
                            budat    = <ls_sld_beg>-r_data->budat
                            nom_pyd  = <ls_sld_beg>-r_data->xblnr
                            bldat    = <ls_sld_beg>-r_data->bldat
                            sgtxt    = <ls_sld_beg>-r_data->p_sgtxt
                            waers    = COND #( WHEN <ls_sld_beg>-r_data->waers_doc = p_waers THEN '' ELSE <ls_sld_beg>-r_data->waers_doc )
                            gjahr    = <ls_sld_beg>-r_data->gjahr
                            bukrs_t  = <ls_sld_beg>-r_data->bukrs
                            hkont    = <ls_sld_beg>-r_data->p_hkont
                            vertn    = <ls_sld_beg>-r_data->p_vertn
                            lifnr    = <ls_kunnr>-lifnr
                            sign     = 'B'
                            p_buzei  = <ls_sld_beg>-r_data->p_buzei
                            c_buzei  = <ls_sld_beg>-r_data->c_buzei
                          ) TO lt_excel_trn ASSIGNING <ls_excel>.
            lv_insert_nom = 'X'.
          ENDIF.
          CLEAR lv_flag_ins.
          IF <ls_sld_beg>-r_data->shkzg = 'S'.
            <ls_excel>-dmbtr_sn_d = <ls_excel>-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
            IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sn_d  = <ls_excel>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
              ls_sum-wrbtr_sn_d      = ls_sum-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
              ls_main_sum-wrbtr_sn_d = ls_main_sum-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sn_d      = ls_sum-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
            ls_main_sum-dmbtr_sn_d = ls_main_sum-dmbtr_sn_d + <ls_sld_beg>-r_data->summ.
          ELSE.
            <ls_excel>-dmbtr_sn_k = <ls_excel>-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
            IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sn_k  = <ls_excel>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
              ls_sum-wrbtr_sn_k      = ls_sum-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
              ls_main_sum-wrbtr_sn_k = ls_main_sum-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sn_k      = ls_sum-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
            ls_main_sum-dmbtr_sn_k = ls_main_sum-dmbtr_sn_k + <ls_sld_beg>-r_data->summ.
          ENDIF.
          lv_flag = 'X'.

          " группировка по валюте
          IF <ls_sld_beg>-r_data->waers_doc <> p_waers.
            READ TABLE lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_group_waers>)
                                      WITH KEY hkont = <ls_sld_beg>-r_data->p_hkont
                                               lifnr = <ls_sld_beg>-r_data->p_lifnr
                                               vertn = <ls_sld_beg>-r_data->p_vertn
                                               waers = <ls_sld_beg>-r_data->waers_doc
                                      BINARY SEARCH.
            IF sy-subrc <> 0.
              INSERT VALUE #( waers = <ls_sld_beg>-r_data->waers_doc
                              hkont = <ls_sld_beg>-r_data->p_hkont
                              bukrs = <ls_sld_beg>-r_data->bukrs
                              vertn = <ls_sld_beg>-r_data->p_vertn
                              lifnr = <ls_sld_beg>-r_data->p_lifnr
                            ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers>.
            ENDIF.
            IF <ls_sld_beg>-r_data->shkzg = 'S'.
              <ls_group_waers>-wrbtr_sn_d = <ls_group_waers>-wrbtr_sn_d + <ls_sld_beg>-r_data->wrbtr.
            ELSE.
              <ls_group_waers>-wrbtr_sn_k = <ls_group_waers>-wrbtr_sn_k + <ls_sld_beg>-r_data->wrbtr.
            ENDIF.
          ENDIF.
        ENDLOOP.
        UNASSIGN: <ls_group_waers>.
        " расписываем обороты
        READ TABLE lt_detail_ex TRANSPORTING NO FIELDS
                                WITH KEY p_hkont = <ls_col>-hkont
                                         p_lifnr = <ls_kunnr>-lifnr
                                         p_vertn = <ls_kunnr>-vertn
                                BINARY SEARCH.
        IF sy-subrc = 0.
          LOOP AT lt_detail_ex ASSIGNING FIELD-SYMBOL(<ls_contract>)
                               FROM sy-tabix.
            IF   <ls_contract>-p_hkont <> <ls_col>-hkont
              OR <ls_contract>-p_lifnr <> <ls_kunnr>-lifnr
              OR <ls_contract>-p_vertn <> <ls_kunnr>-vertn.
              EXIT.
            ENDIF.

            CLEAR: lv_gkont_d,lv_gkont_k.
            IF <ls_contract>-shkzg = 'S'.
              ls_sum-dmbtr_g_d = ls_sum-dmbtr_g_d + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                ls_sum-wrbtr_g_d = ls_sum-wrbtr_g_d + <ls_contract>-wrbtr.
              ENDIF.
            ELSE.
              ls_sum-dmbtr_g_k = ls_sum-dmbtr_g_k + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                ls_sum-wrbtr_g_k = ls_sum-wrbtr_g_k + <ls_contract>-wrbtr.
              ENDIF.
            ENDIF.
            ADD 1 TO lv_tabix.

            " наименование вида документа
            TRY.
                lv_blart = lt_blart[ blart = <ls_contract>-blart ]-ltext.
              CATCH cx_sy_itab_line_not_found.
                sy-subrc = 0.
            ENDTRY.
            UNASSIGN <ls_partner>.

            " наименование контрагента
            READ TABLE lt_but000 ASSIGNING <ls_partner>
                                 WITH KEY partner = <ls_contract>-p_lifnr
                                 BINARY SEARCH.
            IF sy-subrc = 0.
              ls_ex-name = COND #( WHEN lv_insert_nom IS NOT INITIAL THEN ''
                                     ELSE <ls_partner>-name ).
            ENDIF.

            IF lv_insert_nom IS NOT INITIAL.
              ls_ex-lifnr  = ''.
              ls_ex-nom    = ''.
              ls_ex-nom_dog = ''.
            ELSE.
              ls_ex-lifnr  = <ls_contract>-p_lifnr.
              ls_ex-nom    = lv_nom.
              ls_ex-nom_dog = <ls_contract>-p_vertn.
            ENDIF.

            UNASSIGN <ls_excel>.
            " обороты по дебету
            READ TABLE  lt_excel_trn ASSIGNING <ls_excel>
                                     WITH KEY key1
                                     COMPONENTS hkont   = <ls_contract>-p_hkont
                                                budat   = <ls_contract>-budat
                                                belnr   = <ls_contract>-belnr
                                                bukrs_t = <ls_contract>-bukrs
                                                vertn   = <ls_contract>-p_vertn
                                                p_buzei = <ls_contract>-p_buzei
                                                c_buzei = <ls_contract>-c_buzei.
            IF sy-subrc <> 0.
              IF <ls_contract>-shkzg = 'S'.
                lv_gkont_d = COND #( WHEN <ls_contract>-c_hkont IS INITIAL AND <ls_contract>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_contract>-c_hkont ).
              ELSE.
                lv_gkont_k = COND #( WHEN <ls_contract>-c_hkont IS INITIAL AND <ls_contract>-dmbtr IS NOT INITIAL THEN '!' ELSE <ls_contract>-c_hkont ).
              ENDIF.

              APPEND VALUE #( nom       = ls_ex-nom
                              bukrs     = <ls_contract>-bukrs
                              kod       = ls_ex-lifnr
                              name      = ls_ex-name
                              nom_dog   = ls_ex-nom_dog
                              name_pyd  = lv_blart
                              belnr     = <ls_contract>-belnr
                              budat     = <ls_contract>-budat
                              nom_pyd   = <ls_contract>-xblnr
                              bldat     = <ls_contract>-bldat
                              sgtxt     = <ls_contract>-p_sgtxt
                              waers     = COND #( WHEN <ls_contract>-waers_doc = p_waers THEN '' ELSE <ls_contract>-waers_doc )
                              gkont_g_d = lv_gkont_d
                              gkont_g_k = lv_gkont_k
                              gjahr     = <ls_contract>-gjahr
                              bukrs_t   = <ls_contract>-bukrs
                              hkont     = <ls_contract>-p_hkont
                              vertn     = <ls_contract>-p_vertn
                              lifnr     = <ls_kunnr>-lifnr
                              sign      = 'O'
                              p_buzei   = <ls_contract>-p_buzei
                              c_buzei   = <ls_contract>-c_buzei
                            ) TO lt_excel_trn ASSIGNING <ls_excel>.
              lv_insert_nom = 'X'.
            ENDIF.
            CLEAR lv_flag_ins.
            IF <ls_contract>-shkzg = 'S'.
              <ls_excel>-dmbtr_g_d = <ls_excel>-dmbtr_g_d + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                <ls_excel>-wrbtr_g_d  = <ls_excel>-wrbtr_g_d + <ls_contract>-wrbtr.
                ls_main_sum-wrbtr_g_d = ls_main_sum-wrbtr_g_d + <ls_contract>-wrbtr.
              ENDIF.
              ls_main_sum-dmbtr_g_d = ls_main_sum-dmbtr_g_d + <ls_contract>-dmbtr.
            ELSE.
              <ls_excel>-dmbtr_g_k = <ls_excel>-dmbtr_g_k + <ls_contract>-dmbtr.
              IF <ls_contract>-waers_doc <> p_waers.
                <ls_excel>-wrbtr_g_k  = <ls_excel>-wrbtr_g_k + <ls_contract>-wrbtr.
                ls_main_sum-wrbtr_g_k = ls_main_sum-wrbtr_g_k + <ls_contract>-wrbtr.
              ENDIF.
              ls_main_sum-dmbtr_g_k = ls_main_sum-dmbtr_g_k + <ls_contract>-dmbtr.
            ENDIF.
            " группировка по валюте
            IF <ls_contract>-waers_doc <> p_waers.
              READ TABLE lt_group_waers ASSIGNING <ls_group_waers>
                                        WITH KEY hkont = <ls_contract>-p_hkont
                                                 lifnr = <ls_contract>-p_lifnr
                                                 vertn = <ls_contract>-p_vertn
                                                 waers = <ls_contract>-waers_doc
                                        BINARY SEARCH.
              IF sy-subrc <> 0.
                INSERT VALUE #( waers = <ls_contract>-waers_doc
                                hkont = <ls_contract>-p_hkont
                                bukrs = <ls_contract>-bukrs
                                vertn = <ls_contract>-p_vertn
                                lifnr = <ls_contract>-p_lifnr
                              ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers>.
              ENDIF.
              IF <ls_group_waers> IS ASSIGNED.
                IF <ls_contract>-shkzg = 'S'.
                  <ls_group_waers>-wrbtr_g_d = <ls_group_waers>-wrbtr_g_d + <ls_contract>-wrbtr.
                ELSE.
                  <ls_group_waers>-wrbtr_g_k = <ls_group_waers>-wrbtr_g_k + <ls_contract>-wrbtr.
                ENDIF.
              ENDIF.
            ENDIF.
            UNASSIGN: <ls_group_waers>.
            lv_flag = 'X'.
            lv_old_lifnr = <ls_contract>-p_lifnr.
          ENDLOOP.
        ENDIF.

        UNASSIGN: <ls_partner>,<ls_excel>,<ls_group_waers>.

        " расшифровка сальдо на конец по дебету и кредиту
        LOOP AT lt_sld_end_c ASSIGNING FIELD-SYMBOL(<ls_sld_end>) WHERE r_data->p_hkont = <ls_col>-hkont
                                                                    AND r_data->p_lifnr = <ls_kunnr>-lifnr
                                                                    AND r_data->p_vertn = <ls_kunnr>-vertn.
          " наименование вида документа
          TRY.
              lv_blart = lt_blart[ blart = <ls_sld_end>-r_data->blart ]-ltext.
            CATCH cx_sy_itab_line_not_found.
              sy-subrc = 0.
          ENDTRY.

          " наименование контрагента
          READ TABLE lt_but000 ASSIGNING <ls_partner>
                               WITH KEY partner = <ls_sld_end>-r_data->p_lifnr
                               BINARY SEARCH.
          IF sy-subrc = 0.
            ls_ex-name = COND #( WHEN lv_old_lifnr = <ls_sld_end>-r_data->p_lifnr THEN ''
                                   ELSE <ls_partner>-name ).
          ENDIF.

          READ TABLE  lt_excel_trn ASSIGNING <ls_excel>
                                   WITH KEY key1
                                   COMPONENTS hkont   = <ls_sld_end>-r_data->p_hkont
                                              budat   = <ls_sld_end>-r_data->budat
                                              belnr   = <ls_sld_end>-r_data->belnr
                                              bukrs_t = <ls_sld_end>-r_data->bukrs
                                              vertn   = <ls_sld_end>-r_data->p_vertn
                                              sign    = ''
                                              lifnr   = <ls_sld_end>-r_data->p_lifnr.
          IF sy-subrc <> 0.
            IF <ls_sld_end>-r_data->shkzg = 'S'.
              lv_gkont_d = COND #( WHEN <ls_sld_end>-r_data->c_hkont IS INITIAL AND <ls_sld_end>-r_data->summ IS NOT INITIAL THEN '!'
                                     ELSE <ls_sld_end>-r_data->c_hkont ).
            ELSE.
              lv_gkont_k = COND #( WHEN <ls_sld_end>-r_data->c_hkont IS INITIAL AND <ls_sld_end>-r_data->summ IS NOT INITIAL THEN '!'
                                     ELSE <ls_sld_end>-r_data->c_hkont ).
            ENDIF.

            APPEND VALUE #( nom      = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN lv_nom ELSE '')
                            bukrs    = <ls_sld_end>-r_data->bukrs
                            kod      = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN <ls_sld_end>-r_data->p_lifnr ELSE '')
                            name     = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN ls_ex-name ELSE '')
                            nom_dog  = COND #( WHEN lv_flag_ins IS NOT INITIAL THEN  <ls_sld_end>-r_data->p_vertn ELSE '')
                            name_pyd = lv_blart
                            belnr    = <ls_sld_end>-r_data->belnr
                            budat    = <ls_sld_end>-r_data->budat
                            nom_pyd  = <ls_sld_end>-r_data->xblnr
                            bldat    = <ls_sld_end>-r_data->bldat
                            sgtxt    = <ls_sld_end>-r_data->p_sgtxt
                            waers    = COND #( WHEN <ls_sld_end>-r_data->waers_doc = p_waers THEN '' ELSE <ls_sld_end>-r_data->waers_doc )
                            gjahr    = <ls_sld_end>-r_data->gjahr
                            bukrs_t  = <ls_sld_end>-r_data->bukrs
                            hkont    = <ls_sld_end>-r_data->p_hkont
                            vertn    = <ls_sld_end>-r_data->p_vertn
                            lifnr    = <ls_kunnr>-lifnr
                            sign     = ' '
                          ) TO lt_excel_trn ASSIGNING <ls_excel>.
            lv_insert_nom = 'X'.
          ENDIF.
          IF <ls_excel>-sign = 'B' OR <ls_excel>-sign = 'O'.
            CONTINUE.
          ENDIF.
          CLEAR lv_flag_ins.

          IF <ls_sld_end>-r_data->shkzg = 'S'.
            <ls_excel>-dmbtr_sk_d = <ls_excel>-dmbtr_sk_d + <ls_sld_end>-r_data->summ.
            IF <ls_sld_end>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sk_d  = <ls_excel>-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
              ls_sum-wrbtr_sk_d      = ls_sum-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
              ls_main_sum-wrbtr_sk_d = ls_main_sum-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sk_d      = ls_sum-dmbtr_sk_d + <ls_sld_end>-r_data->summ.
            ls_main_sum-dmbtr_sk_d = ls_main_sum-dmbtr_sk_d + <ls_sld_end>-r_data->summ.
          ELSE.
            <ls_excel>-dmbtr_sk_k = <ls_excel>-dmbtr_sk_k + <ls_sld_end>-r_data->summ.
            IF <ls_sld_end>-r_data->waers_doc <> p_waers.
              <ls_excel>-wrbtr_sk_k  = <ls_excel>-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
              ls_sum-wrbtr_sk_k      = ls_sum-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
              ls_main_sum-wrbtr_sk_k = ls_main_sum-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
            ls_sum-dmbtr_sk_k      = ls_sum-dmbtr_sk_k + <ls_sld_end>-r_data->summ.
            ls_main_sum-dmbtr_sk_k = ls_main_sum-dmbtr_sk_k + <ls_sld_end>-r_data->summ.
          ENDIF.
          lv_flag = 'X'.

          " группировка по валюте
          IF <ls_sld_end>-r_data->waers_doc <> p_waers.
            READ TABLE lt_group_waers ASSIGNING <ls_group_waers>
                                      WITH KEY hkont = <ls_sld_end>-r_data->p_hkont
                                               lifnr = <ls_sld_end>-r_data->p_lifnr
                                               vertn = <ls_sld_end>-r_data->p_vertn
                                               waers = <ls_sld_end>-r_data->waers_doc
                                      BINARY SEARCH.
            IF sy-subrc <> 0.
              INSERT VALUE #( waers = <ls_sld_end>-r_data->waers_doc
                              hkont = <ls_sld_end>-r_data->p_hkont
                              bukrs = <ls_sld_end>-r_data->bukrs
                              vertn = <ls_sld_end>-r_data->p_vertn
                              lifnr = <ls_sld_end>-r_data->p_lifnr
                            ) INTO lt_group_waers INDEX sy-tabix ASSIGNING <ls_group_waers>.
            ENDIF.
            IF <ls_sld_end>-r_data->shkzg = 'S'.
              <ls_group_waers>-wrbtr_sk_d = <ls_group_waers>-wrbtr_sk_d + <ls_sld_end>-r_data->wrbtr.
            ELSE.
              <ls_group_waers>-wrbtr_sk_k = <ls_group_waers>-wrbtr_sk_k + <ls_sld_end>-r_data->wrbtr.
            ENDIF.
          ENDIF.
        ENDLOOP.
        UNASSIGN <ls_group_waers>.

        " таблица - итого по договору
        IF lv_flag IS NOT INITIAL.
          IF <ls_excel> IS ASSIGNED.
            UNASSIGN <ls_excel>.
          ENDIF.
          CLEAR lv_flag.
          ls_sum-name = TEXT-068.
          ls_sum-nom_dog = <ls_kunnr>-vertn.
          APPEND ls_sum TO lt_excel_trn.
          " суммы для контрагента
          ls_sum_trn-dmbtr_g_d  = ls_sum_trn-dmbtr_g_d + ls_sum-dmbtr_g_d.
          ls_sum_trn-dmbtr_g_k  = ls_sum_trn-dmbtr_g_k + ls_sum-dmbtr_g_k.

          ls_sum_trn-wrbtr_g_d  = ls_sum_trn-wrbtr_g_d  + ls_sum-wrbtr_g_d.
          ls_sum_trn-wrbtr_g_k  = ls_sum_trn-wrbtr_g_k  + ls_sum-wrbtr_g_k.
          ls_sum_trn-wrbtr_sk_k = ls_sum_trn-wrbtr_sk_k + ls_sum-wrbtr_sk_k.
          ls_sum_trn-wrbtr_sk_d = ls_sum_trn-wrbtr_sk_d + ls_sum-wrbtr_sk_d.
          ls_sum_trn-wrbtr_sn_k = ls_sum_trn-wrbtr_sn_k + ls_sum-wrbtr_sn_k.
          ls_sum_trn-wrbtr_sn_d = ls_sum_trn-wrbtr_sn_d + ls_sum-wrbtr_sn_d.

          ls_sum_trn-dmbtr_sk_d = ls_sum_trn-dmbtr_sk_d + ls_sum-dmbtr_sk_d.
          ls_sum_trn-dmbtr_sk_k = ls_sum_trn-dmbtr_sk_k + ls_sum-dmbtr_sk_k.
          ls_sum_trn-dmbtr_sn_d = ls_sum_trn-dmbtr_sn_d + ls_sum-dmbtr_sn_d.
          ls_sum_trn-dmbtr_sn_k = ls_sum_trn-dmbtr_sn_k + ls_sum-dmbtr_sn_k.
        ENDIF.
        "таблица - в том числе в разрезе валют по договору:
        " выводим таблицу только , если нажата кнопка на гриде 'С валютой отчет'
        IF lt_group_waers IS NOT INITIAL AND gv_fcode = 'DWL_XLS_WAERS'.
          LOOP AT lt_group_waers ASSIGNING FIELD-SYMBOL(<ls_waers>)
                                 WHERE hkont = <ls_kunnr>-hkont
                                   AND lifnr = <ls_kunnr>-lifnr
                                   AND vertn = <ls_kunnr>-vertn
                                   AND waers <> p_waers.
            lv_waers_c = lv_waers_c + 1.
            MOVE <ls_waers> TO ls_waers.
            IF lv_waers_c = 1.
              ls_waers-name = TEXT-069.
            ENDIF.
            ls_waers-bukrs = ''.
            ls_waers-kod = ''.
            ls_waers-sign = 'W'.
            APPEND ls_waers TO lt_excel_trn.
          ENDLOOP.
          CLEAR: lv_waers_c,ls_waers.
        ENDIF.
        UNASSIGN <ls_waers_k>.
      ENDLOOP.

      " таблица Итого по контрагенту:
      ls_sum_trn-name = TEXT-070.
      ls_sum_trn-kod  = ls_ex_waers-lifnr.
      APPEND ls_sum_trn TO lt_excel_trn.

      "таблица в том числе в разрезе валют по контрагенту:
      IF gv_fcode = 'DWL_XLS_WAERS'.
        LOOP AT lt_group_waers_k ASSIGNING <ls_waers_k>
                                 WHERE hkont = ls_ex_waers-hkont
                                   AND kod   = ls_ex_waers-lifnr
                                   AND waers <> p_waers.
          MOVE-CORRESPONDING <ls_waers_k> TO ls_waers_k.
          lv_c = lv_c + 1.
          IF lv_c = 1.
            ls_waers_k-name = TEXT-071.
          ENDIF.
          ls_waers_k-bukrs = ''.
          ls_waers_k-kod   = ''.
          ls_waers_k-sign  = 'W'.
          APPEND ls_waers_k TO lt_excel_trn.
        ENDLOOP.
      ENDIF.
      CLEAR: ls_sum_trn,lv_c,lv_count,ls_waers_k.

      LOOP AT lt_group_gkont_d ASSIGNING <ls_group_gkont_d> WHERE hkont = <ls_col>-hkont.
        APPEND VALUE #( gkont_g_d = <ls_group_gkont_d>-gkont_g_d
                        gkont_g_k = <ls_group_gkont_d>-gkont_g_k
                        dmbtr_g_d = <ls_group_gkont_d>-dmbtr_g_d
                        dmbtr_g_k = <ls_group_gkont_d>-dmbtr_g_k
                        sign = 'S'
                      ) TO lt_group_gkont.
      ENDLOOP.
      UNASSIGN: <ls_group_gkont_d>.

      " добавляем по счету и бе корреспонденцию по кредиту в табл
      LOOP AT lt_group_gkont_k ASSIGNING <ls_group_gkont_k> WHERE hkont = <ls_col>-hkont.
        lv_t_c = lv_t_c + 1.
        ASSIGN lt_group_gkont[ lv_t_c ] TO FIELD-SYMBOL(<ls_group_gkont>).
        IF sy-subrc = 0.
          <ls_group_gkont>-gkont_g_k = <ls_group_gkont_k>-gkont_g_k.
          <ls_group_gkont>-dmbtr_g_k = <ls_group_gkont_k>-dmbtr_g_k.
        ELSE.
          APPEND VALUE #( gkont_g_d = <ls_group_gkont_k>-gkont_g_d
                          gkont_g_k = <ls_group_gkont_k>-gkont_g_k
                          dmbtr_g_d = <ls_group_gkont_k>-dmbtr_g_d
                          dmbtr_g_k = <ls_group_gkont_k>-dmbtr_g_k
                          sign = 'S'
                        ) TO lt_group_gkont.
        ENDIF.
      ENDLOOP.
      CLEAR lv_t_c.
      UNASSIGN <ls_group_gkont>.

      ls_kont-gkont_g_d = '!'.
      ls_kont-gkont_g_k = '!'.
      MODIFY lt_group_gkont FROM ls_kont TRANSPORTING gkont_g_d gkont_g_k
                                              WHERE ( gkont_g_d IS INITIAL AND dmbtr_g_d IS NOT INITIAL )
                                                 OR ( gkont_g_k IS INITIAL AND dmbtr_g_k IS NOT INITIAL ).
      ASSIGN lt_group_gkont[ 1 ] TO <ls_group_gkont>.
      IF sy-subrc = 0.
        <ls_group_gkont>-name = TEXT-065.
      ENDIF.

      UNASSIGN: <ls_sum_hkont>,<ls_group_gkont_k>,<ls_group_gkont_d>,<ls_group_gkont>.

      ls_main_sum-name = TEXT-066.
      APPEND ls_main_sum TO lt_excel_trn.  " таблица - Всего по счету
      LOOP AT lt_main_waers ASSIGNING FIELD-SYMBOL(<ls_w>)
                            WHERE hkont = <ls_col>-hkont
                              AND waers <> p_waers.
        lv_waers_nom = lv_waers_nom + 1.
        APPEND VALUE #( name       = COND #( WHEN lv_waers_nom = 1 THEN TEXT-072 ELSE '' )
                        waers      = <ls_w>-waers
                        wrbtr_sn_d = <ls_w>-wrbtr_sn_d
                        wrbtr_sn_k = <ls_w>-wrbtr_sn_k
                        wrbtr_g_d  = <ls_w>-wrbtr_g_d
                        wrbtr_g_k  = <ls_w>-wrbtr_g_k
                        wrbtr_sk_d = <ls_w>-wrbtr_sk_d
                        wrbtr_sk_k = <ls_w>-wrbtr_sk_k
                        sign = 'W' ) TO lt_excel_trn.
      ENDLOOP.
      APPEND LINES OF lt_group_gkont TO lt_excel_trn.
      CLEAR: ls_ex-nom, lt_group_gkont, lv_nom, lv_waers_nom.
    ENDLOOP.
    UNASSIGN <ls_excel>.
    IF  p_ndoc IS NOT INITIAL.
      SORT lt_vertn BY zext_key.
      LOOP AT lt_excel_trn ASSIGNING FIELD-SYMBOL(<ls_excel_aggr>) WHERE nom_dog IS NOT INITIAL.
        READ TABLE lt_vertn ASSIGNING FIELD-SYMBOL(<ls_vertn>)
                            WITH KEY zext_key = <ls_excel_aggr>-nom_dog
                            BINARY SEARCH.
        IF sy-subrc = 0.
          <ls_excel_aggr>-nom_dog = <ls_vertn>-zz_ndoc.
        ENDIF.
      ENDLOOP.
    ENDIF.
    MOVE-CORRESPONDING lt_excel_trn TO ct_excel_trn.
  ENDMETHOD.

  METHOD out_to_excel.
    DATA:
      lv_error     TYPE text100,
      lt_main      TYPE STANDARD TABLE OF gty_s_tab_excel WITH DEFAULT KEY,
      lt_excel_trn TYPE STANDARD TABLE OF gty_s_trn,
      lt_gr_acc    TYPE gty_t_acc,
      lv_lines_s   TYPE i,
      lv_date_s    TYPE char100,
      lv_date      TYPE char10,
      lv_gr_name   TYPE string,
      lv_date_h    TYPE char10,
      lv_gr        TYPE zfi_group.

    DATA(lr_excel) = NEW zcl_excel_simple( ).

    p_forms = COND #( WHEN sy-tcode = 'ZFI_REGBY_S' THEN 'ZFI_ACC_SLD.xlsm'
                      WHEN sy-tcode = 'ZFI_REGBY_K' THEN 'ZFI_ACC_TRN.xls').

    lr_excel->load_from_reposid( EXPORTING iv_classname = 'ZIBA_DOCS'
                                           iv_keyid     = 'FI'
                                           iv_formname  = p_forms
                                           iv_docname   = 'Регистр счета'(t61)
                                 IMPORTING ev_error     = lv_error
                               ).
    IF lv_error IS NOT INITIAL.
      MESSAGE e069(zfi) WITH lv_error.
    ENDIF.

    SELECT * FROM zfi_gr_acc
     INTO TABLE @lt_gr_acc
     ORDER BY zgroup.
    IF sy-tcode = 'ZFI_REGBY_K'.
      IF p_bukrs IS NOT INITIAL.
        lcl_report=>excel_trn( CHANGING ct_excel_trn = lt_excel_trn ).
      ELSE.
        lcl_report=>excel_trn_whbukrs( CHANGING ct_excel_trn = lt_excel_trn ).
      ENDIF.
    ENDIF.

    IF sy-tcode = 'ZFI_REGBY_S'.
      IF p_bukrs IS NOT INITIAL.
        lcl_report=>excel_sld( CHANGING ct_main = lt_main ).
      ELSE.
        lcl_report=>excel_sld_whbukrs( CHANGING ct_main = lt_main ).
      ENDIF.
    ENDIF.

    CALL METHOD OF lr_excel->gr_workbook 'Worksheets' = lr_excel->gs_sheet
      EXPORTING
        #1 = 2.
    CALL METHOD OF lr_excel->gs_sheet 'Activate'.

    IF gv_bukrs IS NOT INITIAL.
      " главный бухгалтер
      zcl_names=>get_top_chief( EXPORTING iv_bukrs     = gv_bukrs
                                          iv_date      = sy-datum
                                          iv_desc_fio  = abap_true
                                IMPORTING es_names = DATA(ls_names)
                               ).
      lr_excel->set_celn( EXPORTING iv_name = TEXT-ex1 iv_value = gv_prod_name ).                     " butxt
    ELSE.
      lr_excel->set_celn( EXPORTING iv_name = TEXT-ex1 iv_value = TEXT-t01 && `: ` && gv_prod_name ). " butxt
    ENDIF.

    "выборано несколько счетов
    LOOP AT s_hkont ASSIGNING FIELD-SYMBOL(<ls_hkont>).
      IF sy-tabix = 1.
        IF <ls_hkont>-option <> 'BT'.
          lv_gr_name = lv_gr_name && <ls_hkont>-low.
        ELSE.
          lv_gr_name = <ls_hkont>-low && ` - ` && <ls_hkont>-high.
        ENDIF.

      ELSE.
        IF <ls_hkont>-option <> 'BT'.
          lv_gr_name = lv_gr_name && `, ` && <ls_hkont>-low.
        ELSE.
          lv_gr_name = lv_gr_name && `, ` && <ls_hkont>-low && ` - ` && <ls_hkont>-high.
        ENDIF.
      ENDIF.
    ENDLOOP.
    lr_excel->set_celn( EXPORTING iv_name = TEXT-ex2 iv_value = lv_gr_name ).                        " hkont

    IF lines( s_hkont ) = 1 AND s_hkont-high IS INITIAL.
      FIND '*' IN s_hkont-low .
      IF sy-subrc = 0.
        CONCATENATE s_hkont-low(2) '*' INTO lv_gr.
        ASSIGN lt_gr_acc[ zgroup = lv_gr ] TO FIELD-SYMBOL(<ls_gr>).
        IF sy-subrc = 0.
          DATA(lv_name) = <ls_gr>-name.
        ENDIF.
        lr_excel->set_celn( EXPORTING iv_name = TEXT-ex2 iv_value = s_hkont-low && ` ` && lv_name ). " hkont
      ELSE .
        SELECT SINGLE txt50
          FROM skat
          INTO @DATA(lv_skat)
         WHERE spras = @sy-langu
           AND ktopl = 'BNFT'
           AND saknr = @s_hkont-low.

        lr_excel->set_celn( EXPORTING iv_name = TEXT-ex2 iv_value = s_hkont-low && ` ` && lv_skat ). " hkont
      ENDIF.
    ENDIF.

    WRITE s_date-low TO lv_date.                                                                     " дата

    IF s_date-high IS INITIAL.
      CONCATENATE TEXT-t42 lv_date TEXT-t43 lv_date
        INTO lv_date_s SEPARATED BY space.
    ELSE.
      WRITE s_date-high TO lv_date_h.
      CONCATENATE TEXT-t42 lv_date TEXT-t43 lv_date_h
        INTO lv_date_s SEPARATED BY space.
    ENDIF.

    lr_excel->set_celn( EXPORTING iv_name = TEXT-ex3 iv_value = lv_date_s ).                         " date_s

    CALL METHOD OF lr_excel->gr_workbook 'Worksheets' = lr_excel->gs_sheet
       EXPORTING
         #1 = 1.
    CALL METHOD OF lr_excel->gs_sheet 'Activate'.

    " ФИО исполнителя
    zcl_names=>get_fio_dolz( EXPORTING iv_uname = sy-uname
                             IMPORTING et_fio   = DATA(lt_fio) ).
    lr_excel->set_celn( EXPORTING iv_name = 'isp'    iv_value = lt_fio[ 1 ]-fio ).
    lr_excel->set_celn( EXPORTING iv_name = TEXT-ex4 iv_value = lt_fio[ 1 ]-stext ).                 " dolg

    IF ls_names-acc_position IS INITIAL.
      ls_names-acc_position = TEXT-t69.
    ENDIF.

    lr_excel->set_celn( EXPORTING iv_name = 'byh'    iv_value = ls_names-acc_s_fio ).
    lr_excel->set_celn( EXPORTING iv_name = TEXT-ex5 iv_value = ls_names-acc_position ).             " gl_byh

    IF sy-tcode = 'ZFI_REGBY_S'.
      IF lt_main IS NOT INITIAL.
        lr_excel->out_table( EXPORTING it_data   = lt_main
                                       iv_insert = abap_true
                                       iv_frame  = abap_true
                                       iv_name   = 'TABLE' ).
      ENDIF.
    ELSE.
      lr_excel->out_table( EXPORTING it_data   = lt_excel_trn
                                     iv_insert = abap_true
                                     iv_frame  = abap_true
                                     iv_name   = 'TABLE' ).
    ENDIF.
    lv_lines_s = COND i( WHEN sy-tcode = 'ZFI_REGBY_S' THEN lines( lt_main ) ELSE lines( lt_excel_trn ) ).
    lr_excel->gr_proxy->execute_macro( EXPORTING macro_string = 'Module1.Format'
                                                 param_count = 2
                                                 param1 = gv_fcode
                                                 param2 = lv_lines_s
                                      ).
    CALL FUNCTION 'FLUSH'.
  ENDMETHOD.
  METHOD fill_print_table.
    DEFINE set_value.
      ASSIGN COMPONENT &2 OF STRUCTURE &1 TO <lv_field>.
      IF sy-subrc = 0.
        <lv_field> = &3.
      ENDIF.
    END-OF-DEFINITION.
    DEFINE get_value.
      ASSIGN COMPONENT &2 OF STRUCTURE &1 TO <lv_field>.
      IF sy-subrc = 0.
        &3 = <lv_field>.
      ENDIF.
    END-OF-DEFINITION.
    TYPES:
      BEGIN OF lty_s_sort,
        bukrs      TYPE bseg-bukrs,
        hkont_name TYPE char200,
        ref_line   TYPE REF TO data,
      END OF lty_s_sort.
    DATA:
      lt_sort TYPE STANDARD TABLE OF lty_s_sort,
      lv_cnt  TYPE i,
      lv_last TYPE abap_bool,
      lv_str  TYPE string.
    FIELD-SYMBOLS:
      <ls_tot_bukrs> TYPE any,
      <ls_tot_hkont> TYPE any,
      <ls_tot_all>   TYPE any,
      <lv_field>     TYPE any,
      <ls_fcat>      TYPE lvc_s_fcat,
      <ls_data>      TYPE any,
      <lv_from>      TYPE any,
      <lv_to>        TYPE any,
      <lt_data>      TYPE STANDARD TABLE.

    ASSIGN gr_data->* TO <lt_data>.
    MOVE-CORRESPONDING <lt_data> TO ct_data.
    SORT ct_data.
    " формирование ссылочной таблицы для сортировки
    LOOP AT  ct_data ASSIGNING <ls_data>.
      APPEND INITIAL LINE TO lt_sort ASSIGNING FIELD-SYMBOL(<ls_sort>).
      get_value <ls_data> 'BUKRS'      <ls_sort>-bukrs.
      get_value <ls_data> 'HKONT_NAME' <ls_sort>-hkont_name.
      GET REFERENCE OF <ls_data> INTO <ls_sort>-ref_line.
    ENDLOOP.
    "добавляется строка в конец таблицы для итогов по Счету
    IF iv_colan > 0.
      APPEND INITIAL LINE TO ct_data ASSIGNING <ls_tot_hkont>.
    ENDIF.

    "добавляются строка в конец таблицы для итогов по БЕ
    IF p_bukrs = abap_true.
      APPEND INITIAL LINE TO ct_data ASSIGNING <ls_tot_bukrs>.
    ENDIF.
    "добавляются строка в конец таблицы для итогов по всему предпиятию
    APPEND INITIAL LINE TO ct_data ASSIGNING <ls_tot_all>.
    set_value <ls_tot_all> 'BUKRS' 'BOLD'.
    set_value <ls_tot_all> 'HKONT_NAME' 'Всего:'(t45).

    LOOP AT lt_sort ASSIGNING <ls_sort>.
      AT LAST.
        lv_last = abap_true.
      ENDAT.
      ADD 1 TO lv_cnt.
      AT NEW hkont_name.
        IF <ls_tot_hkont> IS ASSIGNED.
          CLEAR <ls_tot_hkont>.
        ENDIF.
      ENDAT.
      AT NEW bukrs.
        IF <ls_tot_bukrs> IS ASSIGNED.
          CLEAR <ls_tot_bukrs>.
        ENDIF.
      ENDAT.
      " добавление сумм в итого
      ASSIGN <ls_sort>-ref_line->* TO <ls_data>.
      LOOP AT it_fcat ASSIGNING <ls_fcat> WHERE cfieldname <> space .
        " итого по счету
        ASSIGN COMPONENT <ls_fcat>-fieldname OF STRUCTURE <ls_data> TO <lv_from>.
        CHECK sy-subrc = 0.
        IF <ls_tot_hkont> IS ASSIGNED.
          ASSIGN COMPONENT <ls_fcat>-fieldname OF STRUCTURE  <ls_tot_hkont> TO <lv_to>.
          IF sy-subrc = 0.
            ADD <lv_from> TO <lv_to>.
          ENDIF.
        ENDIF.
        " итого по БЕ
        IF <ls_tot_bukrs> IS ASSIGNED.
          ASSIGN COMPONENT <ls_fcat>-fieldname OF STRUCTURE  <ls_tot_bukrs> TO <lv_to>.
          IF sy-subrc = 0.
            ADD <lv_from> TO <lv_to>.
          ENDIF.
        ENDIF.
        " итого по предприятию
        ASSIGN COMPONENT <ls_fcat>-fieldname OF STRUCTURE  <ls_tot_all> TO <lv_to>.
        IF sy-subrc = 0.
          ADD <lv_from> TO <lv_to>.
        ENDIF.
      ENDLOOP.
      AT END OF hkont_name.
        IF <ls_tot_hkont> IS ASSIGNED.
          set_value <ls_tot_hkont> 'BUKRS' 'BOLD'.
          lv_str = TEXT-t44 && ` ` && <ls_sort>-hkont_name.
          set_value <ls_tot_hkont> 'HKONT_NAME' lv_str.
          IF lv_last = abap_false.
            ADD 1 TO lv_cnt.
            INSERT <ls_tot_hkont> INTO ct_data INDEX lv_cnt.
          ENDIF.
        ENDIF.
      ENDAT.
      AT END OF bukrs.
        IF <ls_tot_bukrs> IS ASSIGNED.
          set_value <ls_tot_bukrs> 'BUKRS' 'BOLD'.
          lv_str = TEXT-t30 && ` ` && <ls_sort>-bukrs.
          set_value <ls_tot_bukrs> 'HKONT_NAME' lv_str.
          IF lv_last = abap_false.
            ADD 1 TO lv_cnt.
            INSERT <ls_tot_bukrs> INTO ct_data INDEX lv_cnt.
          ENDIF.
        ENDIF.
      ENDAT.
    ENDLOOP.

  ENDMETHOD.
  METHOD fill_tree_table.
    DATA: lv_fname TYPE string.

    LOOP AT gt_data ASSIGNING FIELD-SYMBOL(<ls_data>).
      IF p_mlev > 0.
        <ls_data>-hkont = <ls_data>-hkont_name = <ls_data>-hkont(p_mlev) && '*'.
        CLEAR: <ls_data>-hk_grp.
      ELSE.
        <ls_data>-hkont_name = <ls_data>-hkont && ` - ` &&  <ls_data>-hkont_name.
      ENDIF.
      IF <ls_data>-agremnt IS INITIAL.
        <ls_data>-agremnt_name = 'б/д'(t31).
      ENDIF.
      IF <ls_data>-agremnt_name IS INITIAL.
        <ls_data>-agremnt_name = <ls_data>-agremnt.
      ENDIF.
      IF p_srtcd = abap_true.
        <ls_data>-partner_name = <ls_data>-partner && ` - ` &&  <ls_data>-partner_name.
      ELSE.
        <ls_data>-partner_name = <ls_data>-partner_name && ` - ` && <ls_data>-partner.
      ENDIF.
    ENDLOOP.
    SORT gt_data.
    DATA ls_sum TYPE zfi_registr_acc_sum.
    LOOP AT gt_data ASSIGNING <ls_data>.
      AT NEW zuonr."добавление строки по всем счетам корреспонденции
        APPEND INITIAL LINE TO ct_data ASSIGNING FIELD-SYMBOL(<ls_ext>).
        MOVE-CORRESPONDING <ls_data> TO <ls_ext>.
      ENDAT.
      ADD <ls_data>-sld_i  TO ls_sum-sld_i .
      ADD <ls_data>-sld_id TO ls_sum-sld_id.
      ADD <ls_data>-sld_ik TO ls_sum-sld_ik.
      ADD <ls_data>-debet  TO ls_sum-debet .
      ADD <ls_data>-kredit TO ls_sum-kredit.
      ADD <ls_data>-sld_o  TO ls_sum-sld_o .
      ADD <ls_data>-sld_od TO ls_sum-sld_od.
      ADD <ls_data>-sld_ok TO ls_sum-sld_ok.
      IF <ls_data>-gkont IS NOT INITIAL.
        IF <ls_data>-cnt_d > 0.
          lv_fname = 'D_' && <ls_data>-gkont.
          ASSIGN COMPONENT lv_fname OF STRUCTURE <ls_ext> TO FIELD-SYMBOL(<lv_comp>).
          IF sy-subrc = 0.
            ADD <ls_data>-debet TO <lv_comp>.
          ENDIF.
        ENDIF.
        IF <ls_data>-cnt_k > 0.
          lv_fname = 'K_' && <ls_data>-gkont.
          ASSIGN COMPONENT lv_fname OF STRUCTURE <ls_ext> TO <lv_comp>.
          IF sy-subrc = 0.
            ADD <ls_data>-kredit TO <lv_comp> .
          ENDIF.
        ENDIF.
      ENDIF.
      AT END OF zuonr.
        MOVE-CORRESPONDING ls_sum TO <ls_ext>.
        CLEAR: ls_sum.
      ENDAT.
    ENDLOOP.
    FREE gt_data.
  ENDMETHOD.

* --> AK_BUTVILOVS #8000001029, ZFI_REGBY_S-УСО-ДОРАБОТКА-КОНТРАГЕНТЫ
  METHOD save_balance.
    DATA:
      lv_bukrs        TYPE bukrs,
      lv_hkont        TYPE hkont,

      ls_vptnr_saldo  TYPE zfi_vptnr_saldo,
      ls_data         TYPE zfi_registr_acc,

      lt_unique_bukrs TYPE SORTED TABLE OF bukrs WITH UNIQUE KEY table_line,
      lt_unique_hkont TYPE SORTED TABLE OF hkont WITH UNIQUE KEY table_line,
      lt_vptnr_saldo  TYPE TABLE OF zfi_vptnr_saldo.

    FIELD-SYMBOLS <lt_tree> TYPE STANDARD TABLE.

    SELECT bukrs FROM t001
      WHERE bukrs IN @s_bukrs
      INTO TABLE @lt_unique_bukrs.
    IF sy-subrc = 0.
      SELECT saknr AS hkont FROM skb1
        WHERE bukrs IN @s_bukrs
          AND saknr IN @s_hkont
          AND fstag = 'H001'
        INTO TABLE @lt_unique_hkont.
    ENDIF.

    READ TABLE lt_unique_bukrs INTO lv_bukrs INDEX 1.
    READ TABLE lt_unique_hkont INTO lv_hkont INDEX 1.

    ls_vptnr_saldo-bukrs = lv_bukrs.
    ls_vptnr_saldo-hkont = lv_hkont.
    ls_vptnr_saldo-budat = s_date[ 1 ]-high.

    ASSIGN gr_data->* TO <lt_tree>.
    CHECK sy-subrc = 0.

    LOOP AT <lt_tree> ASSIGNING FIELD-SYMBOL(<ls_tree>).
      MOVE-CORRESPONDING <ls_tree> TO ls_data.

      CHECK ls_data-sld_o <> 0.

      ls_vptnr_saldo-vptnr = ls_data-partner.
      ls_vptnr_saldo-dmbtr = ls_data-sld_o.

      APPEND ls_vptnr_saldo TO lt_vptnr_saldo.
    ENDLOOP.

    MODIFY zfi_vptnr_saldo FROM TABLE lt_vptnr_saldo.
    IF sy-subrc = 0.
      MESSAGE s194(zfi) WITH sy-dbcnt.
      COMMIT WORK.
    ENDIF.
  ENDMETHOD.
* <-- AK_BUTVILOVS #8000001029
ENDCLASS.
