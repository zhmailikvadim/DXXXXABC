*"* local class implementation for public class
*"* use this source file for the implementation part of
*"* local helper classes
CLASS lcl_error_text_provider DEFINITION.

  PUBLIC SECTION.
    CLASS-METHODS get_text_impl_class_error
      IMPORTING iv_content_cat             TYPE /bobf/obm_content_cat
                iv_content_key             TYPE /bobf/conf_key
                iv_content_name            TYPE /bobf/obm_name
                iv_content_class           TYPE seoclsname
                iv_node_key                TYPE /bobf/obm_node_key
                io_configuration           TYPE REF TO /bobf/if_frw_configuration
                iv_method_name             TYPE string OPTIONAL
      RETURNING value(rv_application_info) TYPE string.
    CLASS-METHODS get_text_sam_error
      IMPORTING iv_error_type              TYPE string
                iv_bo_key                  TYPE /bobf/obm_bo_key
                iv_message                 TYPE string
                io_configuration           TYPE REF TO /bobf/if_frw_configuration
      RETURNING value(rv_application_info) TYPE string.
    CLASS-METHODS get_text_static_action_fail
      IMPORTING iv_content_key             TYPE /bobf/conf_key
                iv_content_name            TYPE /bobf/obm_name
                iv_content_class           TYPE seoclsname
                iv_node_key                TYPE /bobf/obm_node_key
                io_configuration           TYPE REF TO /bobf/if_frw_configuration
      RETURNING value(rv_application_info) TYPE string.
    CLASS-METHODS get_text_node_cat_not_found
      IMPORTING
        iv_node_key                        TYPE /bobf/obm_bo_key
        io_configuration                   TYPE REF TO /bobf/if_frw_configuration
      RETURNING value(rv_application_info) TYPE string.


ENDCLASS.                    "lcl_error_text_provider DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_error_text_provider IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_error_text_provider IMPLEMENTATION.

  METHOD get_text_node_cat_not_found.

    DATA ls_node_conf             TYPE /bobf/s_confro_node.
    DATA lv_application_component TYPE ufps_posid.
    DATA lv_text                  TYPE string.

    io_configuration->get_node(
      EXPORTING
        iv_node_key = iv_node_key
      IMPORTING
        es_node     = ls_node_conf
    ).

    lv_application_component = /bobf/cl_conf_toolbox=>get_component( iv_bo_key = io_configuration->ms_obj-bo_key ).

    lv_text = |The node category of instances of node '| && ls_node_conf-node_name &&
      |' of BO '| && io_configuration->ms_obj-bo_name && |' could not be determined by implementation class '| &&
      ls_node_conf-node_class && |'; As the issue occured within an internal call and not by wrong user input,| &&
      |it is caused by wrong implentation of application '| && lv_application_component && |'|.

    rv_application_info = /bobf/cl_conf_toolbox=>parse_application_information( iv_message = lv_text ).

  ENDMETHOD.                    "get_text_node_cat_not_found

  METHOD get_text_impl_class_error.

    DATA:
      lv_bo_name               TYPE /bobf/obm_name,
      lv_application_component TYPE ufps_posid,
      lv_error_text            TYPE string,
      ls_node                  TYPE /bobf/s_confro_node.

    lv_bo_name = io_configuration->ms_obj-bo_name.
    lv_application_component = /bobf/cl_conf_toolbox=>get_component( iv_bo_key = io_configuration->ms_obj-bo_key ). "#EC CI_SEL_NESTED - error handling in LOOPs is OK

*    lv_error_text = |An error has occured! |.               "#EC NOTEXT
*    IF lv_application_component IS NOT INITIAL.
*      lv_error_text = lv_error_text && |(Responsible Component: "| && lv_application_component && |")|. "#EC NOTEXT
*    ENDIF.

    IF iv_node_key IS NOT INITIAL.
      io_configuration->get_node(
        EXPORTING
          iv_node_key = iv_node_key
        IMPORTING
          es_node     = ls_node ).
    ENDIF.

    CASE iv_content_cat.

      WHEN /bobf/if_conf_c=>sc_content_act.  "Action
        if iv_method_name = 'FRW_END_MODIFY'. "#EC NOTEXT
          lv_error_text = lv_error_text && |While executing action "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                       |" an exception has occured. The method "EXECUTE" of class "| && iv_content_class &&
                       |" didn't call "END_MODIFY" and the subsequent framework call of "END_MODIFY" led to the exception chain below. | &&
                       |Root cause may be a lock situation or...|. "#EC NOTEXT
        else.
          lv_error_text = lv_error_text && |While executing action "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                          |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                          |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT
        endif.

      WHEN /bobf/if_conf_c=>sc_content_det.  "Determination
        if iv_method_name = 'FRW_END_MODIFY'. "#EC NOTEXT
          lv_error_text = lv_error_text && |While executing determination "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                       |" an exception has occured. The method "EXECUTE" of class "| && iv_content_class &&
                       |" didn't call "END_MODIFY" and the subsequent framework call of "END_MODIFY" led to the exception chain below. | &&
                       |Root cause may be a lock situation or...|. "#EC NOTEXT
        else.
          lv_error_text = lv_error_text && |While executing determination "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                       |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                       |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT
        endif.

      WHEN /bobf/if_conf_c=>sc_content_val.  "Validation
        lv_error_text = lv_error_text && |While executing validation "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                       |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                       |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT

      WHEN /bobf/if_conf_c=>sc_content_ass.  "Association
        lv_error_text = lv_error_text && |While executing association "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                       |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                       |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT

      WHEN /bobf/if_conf_c=>sc_content_nod.  "Node
        lv_error_text = lv_error_text && |While executing logic of node "| && iv_content_name && |" of business object "| && lv_bo_name &&
                        |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                        |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT

      WHEN /bobf/if_conf_c=>sc_content_qry.  "Query
        lv_error_text = lv_error_text && |While executing query "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                        |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                        |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT

      WHEN /bobf/if_conf_c=>sc_content_vset. "ID Value Set and Code Value Set
        lv_error_text = lv_error_text && |While executing value set "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                        |" an exception has occured. The method "| && iv_method_name && |" of class "| && iv_content_class &&
                        |" contains errors, which are described in the exception chain below.|. "#EC NOTEXT
      WHEN OTHERS.
        RETURN.
    ENDCASE.

    IF lv_application_component IS NOT INITIAL.
      lv_error_text = lv_error_text && | Please open a ticket to the responsible component "| && lv_application_component && |"!|.
    ENDIF.

    "format application information text
    rv_application_info = /bobf/cl_conf_toolbox=>parse_application_information( iv_message = lv_error_text ).

  ENDMETHOD.                    "get_text_impl_class_error

  METHOD get_text_static_action_fail.
    DATA:
      lv_bo_name               TYPE /bobf/obm_name,
      lv_application_component TYPE ufps_posid,
      lv_error_text            TYPE string,
      ls_node                  TYPE /bobf/s_confro_node.

    lv_bo_name = io_configuration->ms_obj-bo_name.
    lv_application_component = /bobf/cl_conf_toolbox=>get_component( iv_bo_key = io_configuration->ms_obj-bo_key ). "#EC CI_SEL_NESTED - error handling in LOOPs is OK

    IF iv_node_key IS NOT INITIAL.
      io_configuration->get_node(
        EXPORTING
          iv_node_key = iv_node_key
        IMPORTING
          es_node     = ls_node ).
    ENDIF.

    lv_error_text = lv_error_text && |While executing action "| && iv_content_name && |" of node "| && ls_node-node_name && |" of business object "| && lv_bo_name &&
                 |" an error has occured. The method "EXECUTE" of class "| && iv_content_class &&
                 |" didn't set the value for the exporting parameter EV_STATIC_ACTION_FAILED which led to this exception.|. "#EC NOTEXT

    IF lv_application_component IS NOT INITIAL.
      lv_error_text = lv_error_text && | Please open a ticket to the responsible component "| && lv_application_component && |"!|.
    ENDIF.

    "format application information text
    rv_application_info = /bobf/cl_conf_toolbox=>parse_application_information( iv_message = lv_error_text ).
  ENDMETHOD.

  METHOD get_text_sam_error.

    DATA:
      lv_message_text  TYPE string,
      lv_app_component TYPE ufps_posid,
      lv_error_msg     TYPE string.

    /bobf/cl_conf_toolbox=>get_component(
      EXPORTING
        iv_bo_key    = iv_bo_key
      RECEIVING
        ev_component = lv_app_component ).

*    lv_error_msg  = |An error has occured! |. "#EC NOTEXT
*    IF lv_app_component IS NOT INITIAL.
*      lv_error_msg  = lv_error_msg && |(Responsible Component: "| && lv_app_component && |")|. "#EC NOTEXT
*    ENDIF.

    lv_error_msg = lv_error_msg && |While executing business object "| && io_configuration->ms_obj-bo_name &&
                   |" an exception has occured. The | && iv_error_type && |" of one or more status values has failed.|. "#EC NOTEXT

    IF iv_message IS NOT INITIAL.
      lv_error_msg = lv_error_msg && | The error message "| && iv_message && |" and the exception chain below describe the error.|. "#EC NOTEXT
    ELSE.
      lv_error_msg = lv_error_msg && | The exception chain below describes the error.|. "#EC NOTEXT
    ENDIF.

    IF lv_app_component IS NOT INITIAL.
      lv_error_msg = lv_error_msg && | Please open a ticket to the responsible component "| && lv_app_component && |"!|. "#EC NOTEXT
    ENDIF.

    lv_message_text = /bobf/cl_conf_toolbox=>parse_application_information( iv_message = lv_error_msg  ).
    rv_application_info = lv_message_text.

  ENDMETHOD.                    "get_text_sam_error

ENDCLASS.                    "lcl_error_text_provider IMPLEMENTATION









CLASS lcl_key_table_selector_cud DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_cu DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_cd DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_ud DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_c DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_u DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.


CLASS lcl_key_table_selector_d DEFINITION INHERITING FROM lcla_key_table_selector FINAL.
  PUBLIC SECTION.
    METHODS get_key_combination REDEFINITION.
ENDCLASS.









CLASS lcla_key_table_selector IMPLEMENTATION.

  METHOD create_instance.

    IF it_key_create IS NOT INITIAL.
      IF it_key_update IS NOT INITIAL.
        IF it_key_delete IS NOT INITIAL.

          ro_instance = NEW lcl_key_table_selector_cud( ).
          ro_instance->mt_key_delete = it_key_delete.

        ELSE.

          ro_instance = NEW lcl_key_table_selector_cu( ).

        ENDIF.
        ro_instance->mt_key_update = it_key_update.
      ELSE.
        IF it_key_delete IS NOT INITIAL.

          ro_instance = NEW lcl_key_table_selector_cd( ).
          ro_instance->mt_key_delete = it_key_delete.

        ELSE.

          ro_instance = NEW lcl_key_table_selector_c( ).

        ENDIF.
      ENDIF.
      ro_instance->mt_key_create = it_key_create.
    ELSE.
      IF it_key_update IS NOT INITIAL.
        IF it_key_delete IS NOT INITIAL.

          ro_instance = NEW lcl_key_table_selector_ud( ).
          ro_instance->mt_key_delete = it_key_delete.

        ELSE.

          ro_instance = NEW lcl_key_table_selector_u( ).

        ENDIF.
        ro_instance->mt_key_update = it_key_update.
      ELSE.
        IF it_key_delete IS NOT INITIAL.

          ro_instance = NEW lcl_key_table_selector_d( ).
          ro_instance->mt_key_delete = it_key_delete.

        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD create_instance_cu.

    IF it_key_create IS NOT INITIAL.
      IF it_key_update IS NOT INITIAL.

        ro_instance = NEW lcl_key_table_selector_cu( ).
        ro_instance->mt_key_update = it_key_update.

      ELSE.

        ro_instance = NEW lcl_key_table_selector_c( ).

      ENDIF.
      ro_instance->mt_key_create = it_key_create.
    ELSE.
      IF it_key_update IS NOT INITIAL.

        ro_instance = NEW lcl_key_table_selector_u( ).
        ro_instance->mt_key_update = it_key_update.

      ENDIF.
    ENDIF.

  ENDMETHOD.




ENDCLASS.






CLASS lcl_key_table_selector_cud IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_create = abap_true.
      IF iv_update = abap_true.
        IF iv_delete = abap_true.

          IF mt_key_cud IS INITIAL.
            mt_key_cud = mt_key_create.
            APPEND LINES OF mt_key_update TO mt_key_cud.
            APPEND LINES OF mt_key_delete TO mt_key_cud.
          ENDIF.
          et_key = mt_key_cud.

        ELSE.

          IF mt_key_cu IS INITIAL.
            mt_key_cu = mt_key_create.
            APPEND LINES OF mt_key_update TO mt_key_cu.
          ENDIF.
          et_key = mt_key_cu.

        ENDIF.
      ELSE.
        IF iv_delete = abap_true.

          IF mt_key_cd IS INITIAL.
            mt_key_cd = mt_key_create.
            APPEND LINES OF mt_key_delete TO mt_key_cd.
          ENDIF.
          et_key = mt_key_cd.

        ELSE.
          et_key = mt_key_create.
        ENDIF.
      ENDIF.
    ELSE.
      IF iv_update = abap_true.
        IF iv_delete = abap_true.

          IF mt_key_ud IS INITIAL.
            mt_key_ud = mt_key_create.
            APPEND LINES OF mt_key_update TO mt_key_ud.
          ENDIF.
          et_key = mt_key_ud.

        ELSE.
          et_key = mt_key_update.
        ENDIF.
      ELSE.
        IF iv_delete = abap_true.
          et_key = mt_key_delete.
        ELSE.
          CLEAR et_key.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.







CLASS lcl_key_table_selector_cu IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_create = abap_true.
      IF iv_update = abap_true.

        IF mt_key_cu IS INITIAL.
          mt_key_cu = mt_key_create.
          APPEND LINES OF mt_key_update TO mt_key_cu.
        ENDIF.
        et_key = mt_key_cu.

      ELSE.
        et_key = mt_key_create.
      ENDIF.
    ELSE.
      IF iv_update = abap_true.
        et_key = mt_key_update.
      ELSE.
        CLEAR et_key.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.






CLASS lcl_key_table_selector_cd IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_create = abap_true.
      IF iv_delete = abap_true.

        IF mt_key_cd IS INITIAL.
          mt_key_cd = mt_key_create.
          APPEND LINES OF mt_key_delete TO mt_key_cd.
        ENDIF.
        et_key = mt_key_cd.

      ELSE.
        et_key = mt_key_create.
      ENDIF.
    ELSE.
      IF iv_delete = abap_true.
        et_key = mt_key_delete.
      ELSE.
        CLEAR et_key.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.






CLASS lcl_key_table_selector_ud IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_update = abap_true.
      IF iv_delete = abap_true.

        IF mt_key_ud IS INITIAL.
          mt_key_ud = mt_key_update.
          APPEND LINES OF mt_key_delete TO mt_key_ud.
        ENDIF.
        et_key = mt_key_ud.

      ELSE.
        et_key = mt_key_update.
      ENDIF.
    ELSE.
      IF iv_delete = abap_true.
        et_key = mt_key_delete.
      ELSE.
        CLEAR et_key.
      ENDIF.
    ENDIF.

  ENDMETHOD.

ENDCLASS.






CLASS lcl_key_table_selector_c IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_create = abap_true.
      et_key = mt_key_create.
    ELSE.
      CLEAR et_key.
    ENDIF.

  ENDMETHOD.

ENDCLASS.






CLASS lcl_key_table_selector_u IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_update = abap_true.
      et_key = mt_key_update.
    ELSE.
      CLEAR et_key.
    ENDIF.

  ENDMETHOD.

ENDCLASS.







CLASS lcl_key_table_selector_d IMPLEMENTATION.

  METHOD get_key_combination.

    IF iv_delete = abap_true.
      et_key = mt_key_delete.
    ELSE.
      CLEAR et_key.
    ENDIF.

  ENDMETHOD.

ENDCLASS.
