* --------------------------------------------------------------
CLASS abap_unit_testclass DEFINITION FOR TESTING
  DURATION MEDIUM RISK LEVEL HARMLESS FINAL.
*?<asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
*?<asx:values>
*?<TESTCLASS_OPTIONS>
*?<TEST_CLASS>abap_unit_testclass
*?</TEST_CLASS>
*?<OBJECT_UNDER_TEST>/bobf/CL_FRW
*?</OBJECT_UNDER_TEST>
*?<OBJECT_IS_LOCAL/>
*?<GENERATE_FIXTURE/>
*?<GENERATE_CLASS_FIXTURE/>
*?<GENERATE_INVOCATION/>
*?<GENERATE_ASSERT_EQUAL/>
*?</TESTCLASS_OPTIONS>
*?</asx:values>
*?</asx:abap>
* --------------------------------------------------------------
* ===============
  PUBLIC SECTION.
* ===============

* ================
  PRIVATE SECTION.
* ================
    DATA:
      mo_bopf TYPE REF TO /bobf/if_frw_service_layer.

    METHODS: setup.
    METHODS: teardown.

    METHODS: cleanup.
    METHODS: retrieve FOR TESTING.
    METHODS: check    FOR TESTING.
    METHODS: correct  FOR TESTING.

ENDCLASS.       "Abap_Unit_Testclass
* --------------------------------------------------------------
CLASS abap_unit_testclass IMPLEMENTATION.
* --------------------------------------------------------------

* --------------------------------------------------------------
  METHOD setup.
* --------------------------------------------------------------

    DATA:
      lx_frw  TYPE REF TO /bobf/cx_frw,
      lv_text TYPE string.

    TRY.
        mo_bopf = /bobf/cl_frw_factory=>get_bopf( iv_bo_key = /bobf/if_conf_obj_c=>sc_bo_key ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg  = lv_text ).
    ENDTRY.

  ENDMETHOD.       "Setup

* --------------------------------------------------------------
  METHOD teardown.
* --------------------------------------------------------------

    cleanup( ).

  ENDMETHOD.       "Teardown


* --------------------------------------------------------------
  METHOD cleanup.
* --------------------------------------------------------------

    DATA:
      lo_message TYPE REF TO /bobf/if_frw_message,
      lv_error   TYPE boole_d VALUE abap_false,
      lv_text    TYPE string,
      lx_frw     TYPE REF TO /bobf/cx_frw.


    TRY.
        mo_bopf->do_cleanup(
          IMPORTING
            eo_message = lo_message ).

        IF lo_message IS BOUND.
          lv_error = lo_message->check( ).
        ENDIF.
        cl_aunit_assert=>assert_equals(
          act   = lv_error
          exp   = abap_false
          msg   = 'Testing value ERROR' ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg   = lv_text ).
    ENDTRY.

  ENDMETHOD.       "cleanup

* --------------------------------------------------------------
  METHOD retrieve.
* --------------------------------------------------------------

    DATA:
      ls_key     TYPE /bobf/s_frw_key,
      lt_key     TYPE /bobf/t_frw_key,
      lt_data    TYPE /bobf/t_conf_bo,
      ls_data    TYPE /bobf/s_conf_bo,
      lo_message TYPE REF TO /bobf/if_frw_message,
      lx_frw     TYPE REF TO /bobf/cx_frw,
      lv_lines   TYPE i,
      lv_error   TYPE boole_d,
      lv_text    TYPE string.


    ls_key-key = /bobf/if_conf_obj_c=>sc_bo_key.
    APPEND ls_key TO lt_key.

    TRY.
        mo_bopf->retrieve(
         EXPORTING
           iv_node_key  = /bobf/if_conf_obj_c=>sc_node-root
           it_key       = lt_key
           iv_fill_data = abap_true
         IMPORTING
          et_data       = lt_data
          eo_message    = lo_message ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg   = lv_text ).
    ENDTRY.

    IF lo_message IS BOUND.
      lv_error = lo_message->check( ).
    ENDIF.
    cl_aunit_assert=>assert_equals(
      act   = lv_error
      exp   = abap_false
      msg   = 'Testing value ERROR' ).

    DESCRIBE TABLE lt_data LINES lv_lines.
    cl_aunit_assert=>assert_equals(
      act   = lv_lines
      exp   = 1
      msg   = 'Testing value ET_DATA' ).

    CHECK lv_lines = 1.
    READ TABLE lt_data INTO ls_data INDEX 1.
    cl_aunit_assert=>assert_equals(
      act   = ls_data-bo_name
      exp   = /bobf/if_conf_obj_c=>sc_bo_name
      msg   = 'Testing value ET_DATA' ).

  ENDMETHOD.       "Retrieve

* --------------------------------------------------------------
  METHOD check.
* --------------------------------------------------------------

    DATA:
      ls_key     TYPE /bobf/s_frw_key,
      lt_key     TYPE /bobf/t_frw_key,
      lo_message TYPE REF TO /bobf/if_frw_message,
      lx_frw     TYPE REF TO /bobf/cx_frw,
      lv_error   TYPE boole_d,
      lv_text    TYPE string.


    ls_key-key = /bobf/if_conf_obj_c=>sc_bo_key.
    APPEND ls_key TO lt_key.

    TRY.
        mo_bopf->check_consistency(
         EXPORTING
           iv_node_key    = /bobf/if_conf_obj_c=>sc_node-root
           it_key         = lt_key
           iv_check_scope = /bobf/if_frw_c=>sc_scope_substructure
           iv_check_group = /bobf/if_conf_obj_c=>sc_group-check_model
         IMPORTING
          eo_message      = lo_message ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg   = lv_text ).
    ENDTRY.

    IF lo_message IS BOUND.
      lv_error = lo_message->check( ).
    ENDIF.
    cl_aunit_assert=>assert_equals(
      act   = lv_error
      exp   = abap_false
      msg   = 'Testing value ERROR' ).

  ENDMETHOD.       "Check

* --------------------------------------------------------------
  METHOD correct.
* --------------------------------------------------------------

    DATA:
      ls_key        TYPE /bobf/s_frw_key,
      lt_key        TYPE /bobf/t_frw_key,
      lt_failed_key TYPE /bobf/t_frw_key,
      ls_action     TYPE /bobf/s_frw_action,
      lo_message    TYPE REF TO /bobf/if_frw_message,
      lx_frw        TYPE REF TO /bobf/cx_frw,
      lv_error      TYPE boole_d,
      lv_text       TYPE string.


    ls_key-key = /bobf/if_conf_obj_c=>sc_bo_key.
    APPEND ls_key TO lt_key.

    TRY.
        mo_bopf->retrieve_by_association(
         EXPORTING
           iv_node_key    = /bobf/if_conf_obj_c=>sc_node-root
           iv_association = /bobf/if_conf_obj_c=>sc_association-root-version
           it_key         = lt_key
         IMPORTING
          et_failed_key   = lt_failed_key
          et_target_key   = ls_action-key
          eo_message      = lo_message ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg   = lv_text ).
    ENDTRY.

    IF lo_message IS BOUND.
      lv_error = lo_message->check( ).
    ENDIF.
    cl_aunit_assert=>assert_equals(
      act   = lv_error
      exp   = abap_false
      msg   = 'Testing value ERROR' ).

    cl_aunit_assert=>assert_initial(
      act   = lt_failed_key
      msg   = 'Testing value ET_FAILED_KEY' ).

    cl_aunit_assert=>assert_not_initial(
      act   = ls_action-key
      msg   = 'Testing value ET_TARGET_KEY' ).

    ls_action-act_key = /bobf/if_conf_obj_c=>sc_action-version-check_and_correct.

    TRY.
        mo_bopf->do_action(
         EXPORTING
           is_action     = ls_action
         IMPORTING
           eo_message    = lo_message
           et_failed_key = lt_failed_key ).

      CATCH /bobf/cx_frw INTO lx_frw.
        lv_text = lx_frw->get_text( ).
        cl_aunit_assert=>abort(
          EXPORTING
            msg   = lv_text ).
    ENDTRY.

    IF lo_message IS BOUND.
      lv_error = lo_message->check( ).
    ENDIF.
    cl_aunit_assert=>assert_equals(
      act   = lv_error
      exp   = abap_false
      msg   = 'Testing value ERROR' ).

    cl_aunit_assert=>assert_initial(
      act   = lt_failed_key
      msg   = 'Testing value ET_FAILED_KEY' ).

  ENDMETHOD.       "Correct

ENDCLASS.       "Abap_Unit_Testclass

CLASS ltc_needs_notify_keyload DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltc_needs_notify_keyload.

CLASS ltc_needs_notify_keyload DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    METHODS load_attributes_not_bound FOR TESTING.
    METHODS load_attributes_initial FOR TESTING.
    METHODS load_attributes_in_request FOR TESTING.
    METHODS load_attributes_not_in_request FOR TESTING.
    METHODS initial_requested_attributes FOR TESTING.
    METHODS auth_determ_overrides_all FOR TESTING.


ENDCLASS.

CLASS ltc_needs_notify_keyload IMPLEMENTATION.

  METHOD load_attributes_not_bound.
    /bobf/cl_frw=>needs_notify_keyload(
      EXPORTING
        it_requested_attributes = VALUE #( ( |FIELD1| ) ( |FIELD2| ) )
        ir_load_attribute_tab   = VALUE #( )
        iv_has_transient_elements = abap_true
        iv_has_auth_determ = abap_false
      IMPORTING
        ev_transient_fields_requested = DATA(lv_trans_req)
      RECEIVING
        rv_notify_keyload = DATA(lv_notify_keyload)
    ).

    cl_abap_unit_assert=>assert_false( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_true( lv_trans_req ).
  ENDMETHOD.

  METHOD load_attributes_initial.
    /bobf/cl_frw=>needs_notify_keyload(
     EXPORTING
       it_requested_attributes = VALUE #( ( |FIELD1| ) ( |FIELD2| ) )
       ir_load_attribute_tab   = NEW #( )
       iv_has_transient_elements = abap_true
       iv_has_auth_determ = abap_false
     IMPORTING
       ev_transient_fields_requested = DATA(lv_trans_req)
     RECEIVING
       rv_notify_keyload = DATA(lv_notify_keyload)
   ).
    cl_abap_unit_assert=>assert_false( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_true( lv_trans_req ).

  ENDMETHOD.

  METHOD load_attributes_in_request.
    /bobf/cl_frw=>needs_notify_keyload(
      EXPORTING
        it_requested_attributes = VALUE #( ( |FIELD1| ) ( |FIELD2| ) )
        ir_load_attribute_tab   = NEW #( ( |FIELD3| ) ( |FIELD2| ) )
        iv_has_transient_elements = abap_true
        iv_has_auth_determ = abap_false
      IMPORTING
        ev_transient_fields_requested = DATA(lv_trans_req)
      RECEIVING
        rv_notify_keyload = DATA(lv_notify_keyload)
    ).
    cl_abap_unit_assert=>assert_false( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_true( lv_trans_req ).

  ENDMETHOD.

  METHOD load_attributes_not_in_request.
    /bobf/cl_frw=>needs_notify_keyload(
      EXPORTING
        it_requested_attributes = VALUE #( ( |FIELD1| ) ( |FIELD2| ) )
        ir_load_attribute_tab   = NEW #( ( |FIELD3| ) )
        iv_has_transient_elements = abap_true
        iv_has_auth_determ = abap_false
      IMPORTING
        ev_transient_fields_requested = DATA(lv_trans_req)
      RECEIVING
        rv_notify_keyload = DATA(lv_notify_keyload)
    ).
    cl_abap_unit_assert=>assert_true( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_false( lv_trans_req ).

  ENDMETHOD.

  METHOD initial_requested_attributes.
    /bobf/cl_frw=>needs_notify_keyload(
      EXPORTING
        it_requested_attributes = VALUE #( )
        ir_load_attribute_tab   = NEW #( ( |FIELD3| ) )
        iv_has_transient_elements = abap_true
        iv_has_auth_determ = abap_false
      IMPORTING
        ev_transient_fields_requested = DATA(lv_trans_req)
      RECEIVING
        rv_notify_keyload = DATA(lv_notify_keyload)
    ).
    cl_abap_unit_assert=>assert_false( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_true( lv_trans_req ).
  ENDMETHOD.

  METHOD auth_determ_overrides_all.

    /bobf/cl_frw=>needs_notify_keyload(
      EXPORTING
        it_requested_attributes = VALUE #( ( |FIELD1| ) ( |FIELD2| ) )
        ir_load_attribute_tab   = NEW #( ( |FIELD3| ) )
        iv_has_transient_elements = abap_true
        iv_has_auth_determ = abap_true
      IMPORTING
        ev_transient_fields_requested = DATA(lv_trans_req)
      RECEIVING
        rv_notify_keyload = DATA(lv_notify_keyload)
    ).

    cl_abap_unit_assert=>assert_true( lv_notify_keyload ).
    cl_abap_unit_assert=>assert_true( lv_trans_req ).

  ENDMETHOD.

ENDCLASS.

INTERFACE lif_mock_bo.
  CONSTANTS BEGIN OF root_key.
  CONSTANTS   key1 TYPE /bobf/conf_key VALUE '1'.
  CONSTANTS   key2 TYPE /bobf/conf_key VALUE '2'.
  CONSTANTS   key3 TYPE /bobf/conf_key VALUE '3'.
  CONSTANTS   key4 TYPE /bobf/conf_key VALUE '4'.
  CONSTANTS END OF root_key.

  CONSTANTS BEGIN OF item_key.
  CONSTANTS   key31 TYPE /bobf/conf_key VALUE '31'.
  CONSTANTS   key32 TYPE /bobf/conf_key VALUE '32'.
  CONSTANTS   key41 TYPE /bobf/conf_key VALUE '41'.
  CONSTANTS   key42 TYPE /bobf/conf_key VALUE '42'.
  CONSTANTS END OF item_key.

  CONSTANTS BEGIN OF delegated_key.
  CONSTANTS   key25 TYPE /bobf/conf_key VALUE '25'.
  CONSTANTS   key35 TYPE /bobf/conf_key VALUE '35'.
  CONSTANTS   key36 TYPE /bobf/conf_key VALUE '36'.
  CONSTANTS   key45 TYPE /bobf/conf_key VALUE '45'.
  CONSTANTS   key46 TYPE /bobf/conf_key VALUE '46'.
  CONSTANTS END OF delegated_key.

  CONSTANTS BEGIN OF node_key.
  CONSTANTS   root      TYPE /bobf/conf_key VALUE '1001'.
  CONSTANTS   item      TYPE /bobf/conf_key VALUE '1002'.
  CONSTANTS   delegated TYPE /bobf/conf_key VALUE '1003'.
  CONSTANTS   another   TYPE /bobf/conf_key VALUE '1004'.
  CONSTANTS END OF node_key.

  CONSTANTS BEGIN OF associations.
  CONSTANTS to_root TYPE /bobf/obm_assoc_key VALUE '100'.
  CONSTANTS END OF associations.
ENDINTERFACE.


CLASS ltd_sadl_transaction_mngr DEFINITION FOR TESTING INHERITING FROM /bobf/cl_sadl_transaction_mngr.
  PUBLIC SECTION.
    CLASS-DATA mo_sadl_transaction_mgr TYPE REF TO /bobf/cl_sadl_transaction_mngr.
    METHODS constructor.
    CLASS-METHODS get_instance RETURNING VALUE(ro_sadl_tra_mngr) TYPE REF TO /bobf/cl_sadl_transaction_mngr.
*    METHODS setup.
  PRIVATE SECTION.
ENDCLASS.

CLASS ltd_sadl_transaction_mngr IMPLEMENTATION.
  METHOD constructor.
    DATA(lo_bopf_transaction_mgr) = NEW /bobf/cl_tra_transaction_mgr( ).   "ltd_bopf_transaction_manager( ).
    super->constructor( iv_entity_type = cl_sadl_entity_factory=>co_type-cds   "set the flag
                        io_bopf_transaction_mngr = lo_bopf_transaction_mgr ).
    mo_sadl_transaction_mgr = me.
  ENDMETHOD.


  METHOD get_instance.
    IF mo_sadl_transaction_mgr IS NOT BOUND.
      NEW ltd_sadl_transaction_mngr( ).
    ENDIF.
    ro_sadl_tra_mngr = mo_sadl_transaction_mgr.
  ENDMETHOD.
ENDCLASS.

CLASS ltd_buffer_fill_change_fail DEFINITION FOR TESTING.
  PUBLIC SECTION.
    TYPES BEGIN OF gty_root_key.
    TYPES   iv_node_key   TYPE /bobf/conf_key.
    TYPES   it_key        TYPE /bobf/t_frw_key.
    TYPES   iv_state      TYPE /bobf/conf_state.
    TYPES   io_change     TYPE REF TO /bobf/if_frw_change.
    TYPES   et_key_link   TYPE /bobf/t_frw_key_link.
    TYPES   et_target_key TYPE /bobf/t_frw_key.
    TYPES   et_failed_key TYPE /bobf/t_frw_key.
    TYPES END OF gty_root_key.
    TYPES gtt_root_key TYPE STANDARD TABLE OF gty_root_key WITH EMPTY KEY.
    DATA mt_root_key TYPE gtt_root_key.
    METHODS set_root_keys IMPORTING it_root_key TYPE gtt_root_key.
    INTERFACES /bobf/if_frw_buffer PARTIALLY IMPLEMENTED.
ENDCLASS.

CLASS ltd_buffer_fill_change_fail IMPLEMENTATION.
  METHOD set_root_keys.
    mt_root_key = it_root_key.
  ENDMETHOD.

  METHOD /bobf/if_frw_buffer~get_root_key.
*   IMPORTING
*     IV_NODE_KEY
*     IT_KEY
*     IV_STATE
*     IO_CHANGE
*     ET_KEY_LINK
*     ET_TARGET_KEY
*     ET_FAILED_KEY
    READ TABLE mt_root_key INTO DATA(ls_root_key) WITH KEY
      iv_node_key = iv_node_key
      it_key = it_key
      iv_state = iv_state.

    et_key_link = ls_root_key-et_key_link.
    et_target_key = ls_root_key-et_target_key.
    et_failed_key = ls_root_key-et_failed_key.

  ENDMETHOD.
ENDCLASS.


CLASS ltd_conf_fill_change_fail DEFINITION FOR TESTING.
  PUBLIC SECTION.
    INTERFACES /bobf/if_frw_configuration PARTIALLY IMPLEMENTED.

ENDCLASS.

CLASS ltd_conf_fill_change_fail IMPLEMENTATION.
  METHOD /bobf/if_frw_configuration~get_node.

    es_node = VALUE #(
      node_key = iv_node_key ).
    IF iv_node_key = lif_mock_bo=>node_key-delegated.
      es_node-delegation_class = 'LTD_DELEG_FILL_CHANGE_FAIL'.
    ENDIF.
    /bobf/if_frw_configuration~ms_last_node = es_node.

  ENDMETHOD.
ENDCLASS.

CLASS ltd_frw_fill_change_fail DEFINITION FOR TESTING INHERITING FROM /bobf/cl_frw CREATE PUBLIC.
  PUBLIC SECTION.
    DATA mv_after_loading_called TYPE i.
    DATA mo_message TYPE REF TO /bobf/if_frw_message.
    METHODS set_after_loading_message
      IMPORTING
        io_message TYPE REF TO /bobf/if_frw_message.
  PROTECTED SECTION.

    METHODS after_loading REDEFINITION.
ENDCLASS.

CLASS ltd_frw_fill_change_fail IMPLEMENTATION.
  METHOD set_after_loading_message.
    mo_message = io_message.
  ENDMETHOD.
  METHOD after_loading.
    CLEAR et_failed_node.
    CLEAR et_loaded_node.
    eo_message = mo_message.
    mv_after_loading_called = mv_after_loading_called + 1.
  ENDMETHOD.

ENDCLASS.

CLASS ltd_deleg_fill_change_fail DEFINITION FOR TESTING.
  PUBLIC SECTION.
    TYPES BEGIN OF gty_get_root_key.
    TYPES   iv_node_key   TYPE /bobf/conf_key.
    TYPES   it_key        TYPE /bobf/t_frw_key.
    TYPES   iv_state      TYPE /bobf/conf_state.
    TYPES   io_read       TYPE REF TO /bobf/if_frw_read.
    TYPES   et_key_link   TYPE /bobf/t_frw_key_link.
    TYPES   et_failed_key TYPE /bobf/t_frw_key.
    TYPES END OF gty_get_root_key.

    TYPES gtt_get_root_key TYPE STANDARD TABLE OF gty_get_root_key WITH EMPTY KEY.

    METHODS constructor
      IMPORTING
        io_conf TYPE REF TO /bobf/if_frw_configuration.
    METHODS set_data_get_root_key
      IMPORTING
        it_get_root_key TYPE gtt_get_root_key.
    INTERFACES /bobf/if_frw_delegation PARTIALLY IMPLEMENTED.

  PRIVATE SECTION.
    DATA mt_get_root_key TYPE gtt_get_root_key.
    DATA mo_conf TYPE REF TO /bobf/if_frw_configuration.

ENDCLASS.

CLASS ltd_deleg_fill_change_fail IMPLEMENTATION.
  METHOD constructor.
    mo_conf = io_conf.
  ENDMETHOD.
  METHOD set_data_get_root_key.
    mt_get_root_key = it_get_root_key.
  ENDMETHOD.

  METHOD /bobf/if_frw_delegation~get_root_key.
*   IV_NODE_KEY
*   IT_KEY
*   IV_STATE
*   IO_READ
*   ET_KEY_LINK
*   ET_FAILED_KEY

    READ TABLE mt_get_root_key INTO DATA(ls_get_root_key) WITH KEY
      iv_node_key = iv_node_key
      it_key      = it_key
      iv_state    = iv_state.
    et_key_link = ls_get_root_key-et_key_link.
    et_failed_key = ls_get_root_key-et_failed_key.

    "to do a metadata access, which is unexpected by the framework
    mo_conf->get_node(
      EXPORTING
        iv_node_key = lif_mock_bo=>node_key-another
    ).

  ENDMETHOD.
ENDCLASS.

CLASS ltc_fill_change_fail DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltc_fill_change_fail.

CLASS ltc_fill_change_fail DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.

    DATA mo_cut TYPE REF TO /bobf/cl_frw.
    DATA mo_delegation TYPE REF TO ltd_deleg_fill_change_fail.

    METHODS setup RAISING /bobf/cx_frw.
    METHODS nothing_to_do FOR TESTING.
    METHODS after_modify_with_buffer FOR TESTING.
    METHODS after_validation_with_buffer FOR TESTING.
    METHODS after_modify_with_delegation FOR TESTING.
    METHODS after_valid_with_delegation FOR TESTING.
    METHODS changes_no_failed_root_keys FOR TESTING.
    METHODS process_messages FOR TESTING.
    METHODS durable_message_container FOR TESTING.
ENDCLASS.

CLASS ltc_fill_change_fail IMPLEMENTATION.
  METHOD setup.

    TEST-INJECTION on_construct.
      RETURN.
    END-TEST-INJECTION.
    CREATE OBJECT mo_cut TYPE ltd_frw_fill_change_fail
      EXPORTING
        io_conf = NEW ltd_conf_fill_change_fail( ).

    mo_cut->mo_buffer = NEW ltd_buffer_fill_change_fail( ).
    CREATE OBJECT mo_delegation
      EXPORTING
        io_conf = mo_cut->mo_conf.

    INSERT VALUE #(
      node_key = lif_mock_bo=>node_key-delegated
      delegation = mo_delegation )
      INTO TABLE mo_cut->mt_delegation.

  ENDMETHOD.

  METHOD nothing_to_do.

    DATA lo_message TYPE REF TO /bobf/if_frw_message.

    "don't supply io_change
    mo_cut->do_det_fill_change_fail(
        EXPORTING
          iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
          iv_current_state   = /bobf/if_conf_c=>sc_state_current
          it_failed_root_key = VALUE #( )
          io_change          = VALUE #( )
        CHANGING
          co_message         = lo_message
      ).

    cl_abap_unit_assert=>assert_not_bound( lo_message ).
    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_det ).
    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_val ).

  ENDMETHOD.

  METHOD after_modify_with_buffer.

*   test scenario:
    "- 1 created root, 1 updated item, one deleted item processed after modify
    "-> all changes expected in mo_change_fail_det

    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.


    lt_failed_root_key = VALUE #(
      ( key = lif_mock_bo=>root_key-key3 ) ( key = lif_mock_bo=>root_key-key4 )
    ).

    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-root
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>root_key-key3 )
                                ( node_key = lif_mock_bo=>node_key-item
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>item_key-key41 )
                                ( node_key = lif_mock_bo=>node_key-item
                                  change_mode = /bobf/if_frw_c=>sc_modify_delete
                                  key = lif_mock_bo=>item_key-key42 ) )
    ).

    lo_buffer ?= mo_cut->mo_buffer.
    lo_buffer->set_root_keys( it_root_key = VALUE #(
        ( iv_node_key = lif_mock_bo=>node_key-root
          it_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
          iv_state = /bobf/if_conf_c=>sc_state_current
          et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
          et_key_link = VALUE #( ( source_key = lif_mock_bo=>root_key-key3 target_key = lif_mock_bo=>root_key-key3 ) ) )
        ( iv_node_key = lif_mock_bo=>node_key-item
          it_key = VALUE #(
            ( key = lif_mock_bo=>item_key-key41 )
            ( key = lif_mock_bo=>item_key-key42 ) )
          iv_state = /bobf/if_conf_c=>sc_state_current
          et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
          et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key41 target_key = lif_mock_bo=>root_key-key4 ) )
          et_failed_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-item
        it_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) )
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key42 target_key = lif_mock_bo=>root_key-key4 ) )
        iv_state = /bobf/if_conf_c=>sc_state_database ) )
    ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_val ).
    cl_abap_unit_assert=>assert_bound( mo_cut->mo_change_fail_det ).

    mo_cut->mo_change_fail_det->get_changes(
      IMPORTING
        et_change       = DATA(lt_change_fail_det)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( lt_change_fail_det ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_create
               key = lif_mock_bo=>root_key-key3
               node_key = lif_mock_bo=>node_key-root )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_update
               key = lif_mock_bo=>item_key-key41
               node_key = lif_mock_bo=>node_key-item )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_delete
               key = lif_mock_bo=>item_key-key42
               node_key = lif_mock_bo=>node_key-item )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_equals(
       exp = 2
       act = CAST ltd_frw_fill_change_fail( mo_cut )->mv_after_loading_called
    ).

  ENDMETHOD.

  METHOD after_validation_with_buffer.

*   test scenario:
    "- 1 created root, 1 updated item, one deleted item processed after validation
    "-> all changes expected in mo_change_fail_val

    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.


    lt_failed_root_key = VALUE #(
      ( key = lif_mock_bo=>root_key-key3 ) ( key = lif_mock_bo=>root_key-key4 )
    ).

    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-root
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>root_key-key3 )
                                ( node_key = lif_mock_bo=>node_key-item
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>item_key-key41 )
                                ( node_key = lif_mock_bo=>node_key-item
                                  change_mode = /bobf/if_frw_c=>sc_modify_delete
                                  key = lif_mock_bo=>item_key-key42 ) )
    ).

    lo_buffer ?= mo_cut->mo_buffer.
    lo_buffer->set_root_keys( it_root_key = VALUE #(
        ( iv_node_key = lif_mock_bo=>node_key-root
          it_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
          iv_state = /bobf/if_conf_c=>sc_state_current
          et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
          et_key_link = VALUE #( ( source_key = lif_mock_bo=>root_key-key3 target_key = lif_mock_bo=>root_key-key3 ) ) )
        ( iv_node_key = lif_mock_bo=>node_key-item
          it_key = VALUE #(
            ( key = lif_mock_bo=>item_key-key41 )
            ( key = lif_mock_bo=>item_key-key42 ) )
          iv_state = /bobf/if_conf_c=>sc_state_current
          et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
          et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key41 target_key = lif_mock_bo=>root_key-key4 ) )
          et_failed_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-item
        it_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) )
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key42 target_key = lif_mock_bo=>root_key-key4 ) )
        iv_state = /bobf/if_conf_c=>sc_state_database ) )
    ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_validation
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_bound( mo_cut->mo_change_fail_val ).
    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_det ).

    mo_cut->mo_change_fail_val->get_changes(
      IMPORTING
        et_change       = DATA(lt_change_fail_val)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( lt_change_fail_val ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_create
               key = lif_mock_bo=>root_key-key3
               node_key = lif_mock_bo=>node_key-root )
      table = lt_change_fail_val
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_update
               key = lif_mock_bo=>item_key-key41
               node_key = lif_mock_bo=>node_key-item )
      table = lt_change_fail_val
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_delete
               key = lif_mock_bo=>item_key-key42
               node_key = lif_mock_bo=>node_key-item )
      table = lt_change_fail_val
    ).

  ENDMETHOD.

  METHOD changes_no_failed_root_keys.

*   test scenario:
    "- no failed root keys
    "- 1 created root, 1 updated item; processed after modify
    "-> all changes expected in mo_change_fail_val

    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.


    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-root
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>root_key-key3 )
                                ( node_key = lif_mock_bo=>node_key-item
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>item_key-key41 ) )
    ).

    lo_buffer ?= mo_cut->mo_buffer.

    lo_buffer->set_root_keys( it_root_key = VALUE #(
      ( iv_node_key = lif_mock_bo=>node_key-root
        it_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>root_key-key3 target_key = lif_mock_bo=>root_key-key3 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-item
        it_key = VALUE #( ( key = lif_mock_bo=>item_key-key41 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key41 target_key = lif_mock_bo=>root_key-key4 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-item
        it_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_failed_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-item
        it_key = VALUE #( ( key = lif_mock_bo=>item_key-key42 ) )
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key4 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>item_key-key42 target_key = lif_mock_bo=>root_key-key4 ) )
        iv_state = /bobf/if_conf_c=>sc_state_database ) )
    ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = VALUE #( )
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_val ).
    cl_abap_unit_assert=>assert_bound( mo_cut->mo_change_fail_det ).

    mo_cut->mo_change_fail_det->get_changes(
      IMPORTING
        et_change       = DATA(lt_change_fail_det)
    ).

    cl_abap_unit_assert=>assert_initial( lt_change_fail_det ).
    cl_abap_unit_assert=>assert_initial( CAST ltd_frw_fill_change_fail( mo_cut )->mv_after_loading_called ).

  ENDMETHOD.

  METHOD after_modify_with_delegation.

*   test scenario:
    "- 1 created root, 1 created delegation, one deleted delegation processed after modify
    "-> all changes expected in mo_change_fail_det

    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.


    lt_failed_root_key = VALUE #(
      ( key = lif_mock_bo=>root_key-key3 ) ( key = lif_mock_bo=>root_key-key4 )
    ).

    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-root
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>root_key-key3 )
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>delegated_key-key45 )
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_delete
                                  key = lif_mock_bo=>delegated_key-key46 ) )
    ).

    lo_buffer ?= mo_cut->mo_buffer.
    lo_buffer->set_root_keys( it_root_key = VALUE #(
      ( iv_node_key = lif_mock_bo=>node_key-root
        it_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>root_key-key3 target_key = lif_mock_bo=>root_key-key3 ) ) ) )
    ).

    mo_delegation->set_data_get_root_key( it_get_root_key = VALUE #(
      ( iv_node_key = lif_mock_bo=>node_key-delegated
        it_key = VALUE #(
                  ( key = lif_mock_bo=>delegated_key-key45 )
                  ( key = lif_mock_bo=>delegated_key-key46 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>delegated_key-key45 target_key = lif_mock_bo=>root_key-key4 ) )
        et_failed_key = VALUE #( ( key = lif_mock_bo=>delegated_key-key46 ) ) )
      ( iv_node_key = lif_mock_bo=>node_key-delegated
        it_key = VALUE #( ( key = lif_mock_bo=>delegated_key-key46 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>delegated_key-key46 target_key = lif_mock_bo=>root_key-key4 ) )
        iv_state = /bobf/if_conf_c=>sc_state_database ) )
    ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_val ).
    cl_abap_unit_assert=>assert_bound( mo_cut->mo_change_fail_det ).

    mo_cut->mo_change_fail_det->get_changes(
      IMPORTING
        et_change       = DATA(lt_change_fail_det)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( lt_change_fail_det ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_create
               key = lif_mock_bo=>root_key-key3
               node_key = lif_mock_bo=>node_key-root )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_create
               key = lif_mock_bo=>delegated_key-key45
               node_key = lif_mock_bo=>node_key-delegated )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_delete
               key = lif_mock_bo=>delegated_key-key46
               node_key = lif_mock_bo=>node_key-delegated )
      table = lt_change_fail_det
    ).

    cl_abap_unit_assert=>assert_equals(
        exp = 1  "for root3
        act = CAST ltd_frw_fill_change_fail( mo_cut )->mv_after_loading_called ).

  ENDMETHOD.

  METHOD after_valid_with_delegation.

*   test scenario:
    "- 3 updated delegations, 1 created delegation, processed after validation
    "- The created delegation instance has no failed root key
    "-> all changes expected in mo_change_fail_val

    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.


    lt_failed_root_key = VALUE #(
      ( key = lif_mock_bo=>root_key-key3 ) ( key = lif_mock_bo=>root_key-key4 )
    ).

    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>delegated_key-key25 )
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>delegated_key-key35 )
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>delegated_key-key45 )
                                ( node_key = lif_mock_bo=>node_key-delegated
                                  change_mode = /bobf/if_frw_c=>sc_modify_update
                                  key = lif_mock_bo=>delegated_key-key46 ) )
    ).

    mo_delegation->set_data_get_root_key( it_get_root_key = VALUE #(
      ( iv_node_key = lif_mock_bo=>node_key-delegated
        it_key = VALUE #(
          ( key = lif_mock_bo=>delegated_key-key25 )
          ( key = lif_mock_bo=>delegated_key-key35 )
          ( key = lif_mock_bo=>delegated_key-key45 )
          ( key = lif_mock_bo=>delegated_key-key46 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_key_link = VALUE #(
          ( source_key = lif_mock_bo=>delegated_key-key25 target_key = lif_mock_bo=>root_key-key2 )
          ( source_key = lif_mock_bo=>delegated_key-key35 target_key = lif_mock_bo=>root_key-key3 )
          ( source_key = lif_mock_bo=>delegated_key-key45 target_key = lif_mock_bo=>root_key-key4 )
          ( source_key = lif_mock_bo=>delegated_key-key46 target_key = lif_mock_bo=>root_key-key4 ) ) ) )
    ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_validation
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_bound( mo_cut->mo_change_fail_val ).
    cl_abap_unit_assert=>assert_not_bound( mo_cut->mo_change_fail_det ).

    mo_cut->mo_change_fail_val->get_changes(
      IMPORTING
        et_change       = DATA(lt_change_fail_val)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 3 act = lines( lt_change_fail_val ) ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_update
               key = lif_mock_bo=>delegated_key-key35
               node_key = lif_mock_bo=>node_key-delegated )
      table = lt_change_fail_val
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_update
               key = lif_mock_bo=>delegated_key-key45
               node_key = lif_mock_bo=>node_key-delegated )
      table = lt_change_fail_val
    ).

    cl_abap_unit_assert=>assert_table_contains(
      line = VALUE /bobf/s_frw_change(
               change_mode = /bobf/if_frw_c=>sc_modify_update
               key = lif_mock_bo=>delegated_key-key46
               node_key = lif_mock_bo=>node_key-delegated )
      table = lt_change_fail_val
    ).

    cl_abap_unit_assert=>assert_initial( act = CAST ltd_frw_fill_change_fail( mo_cut )->mv_after_loading_called ).

  ENDMETHOD.

  METHOD process_messages.

*   test scenario:
    "- 1 created root, after loading gets executed and returns messages
    DATA lo_change          TYPE REF TO /bobf/if_frw_change.
    DATA lt_failed_root_key TYPE /bobf/t_frw_key.
    DATA lo_message         TYPE REF TO /bobf/if_frw_message.
    DATA lo_after_load_msg  TYPE REF TO /bobf/if_frw_message.
    DATA lo_buffer          TYPE REF TO ltd_buffer_fill_change_fail.
    DATA lm_frw1            TYPE REF TO /bobf/cm_frw_core.
    DATA lm_frw2            TYPE REF TO /bobf/cm_frw_core.


    lt_failed_root_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) ).

    lo_change = /bobf/cl_frw_factory=>get_change( ).
    lo_change->add(
      EXPORTING
        it_change          = VALUE #(
                                ( node_key = lif_mock_bo=>node_key-root
                                  change_mode = /bobf/if_frw_c=>sc_modify_create
                                  key = lif_mock_bo=>root_key-key3 ) )
    ).

    lo_buffer ?= mo_cut->mo_buffer.
    lo_buffer->set_root_keys( it_root_key = VALUE #(
      ( iv_node_key = lif_mock_bo=>node_key-root
        it_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        iv_state = /bobf/if_conf_c=>sc_state_current
        et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) )
        et_key_link = VALUE #( ( source_key = lif_mock_bo=>root_key-key3 target_key = lif_mock_bo=>root_key-key3 ) ) ) )
    ).

    "create after loading messages.
    CREATE OBJECT lm_frw1.
    CREATE OBJECT lm_frw2.

    lo_after_load_msg = /bobf/cl_frw_factory=>get_message( ).
    lo_after_load_msg->add_cm(
      EXPORTING
        io_message = lm_frw1
    ).

    lo_after_load_msg->add_cm(
      EXPORTING
        io_message = lm_frw2
    ).

    CAST ltd_frw_fill_change_fail( mo_cut )->set_after_loading_message( io_message = lo_after_load_msg ).


*   test: lo_message not bound
    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_bound( lo_message ).

    lo_message->get(
      IMPORTING
        et_message = DATA(lt_message)
    ).

    cl_abap_unit_assert=>assert_equals( exp = 2 act = lines( lt_message ) ).

    cl_abap_unit_assert=>assert_table_contains(
      EXPORTING
        line             = lm_frw1
        table            = lt_message
    ).

    cl_abap_unit_assert=>assert_table_contains(
      EXPORTING
        line             = lm_frw2
        table            = lt_message
    ).

    "test: lo_message bound and filled with 1 message; 2nd message added from after loading
    lo_message = /bobf/cl_frw_factory=>get_message( ).
    lo_message->add_cm( lm_frw1 ).

    lo_after_load_msg = /bobf/cl_frw_factory=>get_message( ).
    lo_after_load_msg->add_cm( lm_frw2 ).

    CAST ltd_frw_fill_change_fail( mo_cut )->set_after_loading_message( io_message = lo_after_load_msg ).

    mo_cut->do_det_fill_change_fail(
      EXPORTING
        iv_exectime        = /bobf/if_conf_c=>sc_time_after_modify
        iv_current_state   = /bobf/if_conf_c=>sc_state_current
        it_failed_root_key = lt_failed_root_key
        io_change          = lo_change
      CHANGING
        co_message         = lo_message
    ).

    cl_abap_unit_assert=>assert_bound( lo_message ).

    lo_message->get(
      IMPORTING
        et_message = lt_message
    ).

    cl_abap_unit_assert=>assert_equals( exp = 2 act = lines( lt_message ) ).

    cl_abap_unit_assert=>assert_table_contains(
      EXPORTING
        line             = lm_frw1
        table            = lt_message
    ).

    cl_abap_unit_assert=>assert_table_contains(
      EXPORTING
        line             = lm_frw2
        table            = lt_message
    ).


  ENDMETHOD.


  METHOD durable_message_container.
    DATA lo_sadl_transaction_mngr TYPE REF TO /bobf/cl_sadl_transaction_mngr.

    "create a normal BOPF message object before calling the sadl transaction manager
    " that set the "durable" flag.
    DATA(lo_message) = /bobf/cl_frw_factory=>get_message( ).

    lo_sadl_transaction_mngr = ltd_sadl_transaction_mngr=>get_instance( ).
    TRY.
        mo_cut->create_durable_msg_container( CHANGING co_message = lo_message ).
      CATCH /bobf/cx_frw INTO DATA(lx_frw) .
        cl_abap_unit_assert=>fail( 'Creating durable message container fails.' ).
    ENDTRY.
  ENDMETHOD.
ENDCLASS.

CLASS ltc_cleanup_mods_unchanged DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltc_cleanup_mods_unchanged.
CLASS ltc_cleanup_mods_unchanged DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.
  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw.

    METHODS setup RAISING /bobf/cx_frw.
    METHODS cleanup_unchanged FOR TESTING.
ENDCLASS.

CLASS ltc_cleanup_mods_unchanged IMPLEMENTATION.
  METHOD setup.
    TEST-INJECTION on_construct.
      RETURN.
    END-TEST-INJECTION.

    CREATE OBJECT mo_cut
      EXPORTING
        io_conf = VALUE #( ).
  ENDMETHOD.
  METHOD cleanup_unchanged.

    "checks whether unchanged data is removed from modification tables

    DATA lt_mod                TYPE /bobf/t_frw_modification.
    DATA lt_changed            TYPE /bobf/t_frw_node_data.
    DATA lt_unchanged          TYPE /bobf/t_frw_node_data.
    DATA lt_update             TYPE /bobf/t_frw_node.
    DATA lt_node_state_create  TYPE /bobf/t_frw_node.
    DATA lt_update_data        TYPE /bobf/t_frw_node_data.
    DATA lt_update_data_status TYPE /bobf/t_frw_node_data.

    lt_mod = VALUE #(
      ( change_mode = /bobf/if_frw_c=>sc_modify_update
        node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key1 ) "unchanged
      ( change_mode = /bobf/if_frw_c=>sc_modify_update
        node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key2 ) "changed
      ( change_mode = /bobf/if_frw_c=>sc_modify_update
        node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key3 ) "unchanged
      ( change_mode = /bobf/if_frw_c=>sc_modify_create
        node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key4 ) "created
      ( change_mode = /bobf/if_frw_c=>sc_modify_update "unchanged
        node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key31 )
      ( change_mode = /bobf/if_frw_c=>sc_modify_update "unchanged, but changed again
        node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key32 )
      ( change_mode = /bobf/if_frw_c=>sc_modify_update "unchanged
        node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key41 )
      ( change_mode = /bobf/if_frw_c=>sc_modify_update "unchanged
        node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key42 ) ).

    lt_unchanged = VALUE #(
      ( node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key1 )
      ( node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key3 )
      ( node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key31 )
      ( node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key32 )
      ( node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key41 )
      ( node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key42 ) ).

    lt_changed = VALUE #(
      ( node = lif_mock_bo=>node_key-root
        key = lif_mock_bo=>root_key-key2 )
      ( node = lif_mock_bo=>node_key-item
        key = lif_mock_bo=>item_key-key32 ) ).

    lt_update = CORRESPONDING #( lt_mod ).
    lt_node_state_create = CORRESPONDING #( lt_mod ).
    lt_update_data = CORRESPONDING #( lt_mod ).
    lt_update_data_status = CORRESPONDING #( lt_mod ).

    mo_cut->cleanup_mods_from_unchanged(
      EXPORTING
        it_unchanged          = lt_unchanged
        it_changed            = lt_changed
      CHANGING
        ct_mod                = lt_mod
        ct_update             = lt_update
        ct_node_state_create  = lt_node_state_create
        ct_update_data        = lt_update_data
        ct_update_data_status = lt_update_data_status
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = VALUE /bobf/t_frw_modification(
              ( change_mode = /bobf/if_frw_c=>sc_modify_update
                node = lif_mock_bo=>node_key-root
                key = lif_mock_bo=>root_key-key2 ) "changed
              ( change_mode = /bobf/if_frw_c=>sc_modify_create
                node = lif_mock_bo=>node_key-root
                key = lif_mock_bo=>root_key-key4 ) "created
              ( change_mode = /bobf/if_frw_c=>sc_modify_update "unchanged, but changed again
                node = lif_mock_bo=>node_key-item
                key = lif_mock_bo=>item_key-key32 ) )
       act = lt_mod
    ).

    cl_abap_unit_assert=>assert_equals(
       exp = CORRESPONDING /bobf/t_frw_node( lt_mod )
       act = lt_update
    ).

    cl_abap_unit_assert=>assert_equals(
       exp = CORRESPONDING /bobf/t_frw_node( lt_mod )
       act = lt_node_state_create
    ).

    cl_abap_unit_assert=>assert_equals(
       exp = CORRESPONDING /bobf/t_frw_node_data( lt_mod )
       act = lt_update_data
    ).

    cl_abap_unit_assert=>assert_equals(
       exp = CORRESPONDING /bobf/t_frw_node_data( lt_mod )
       act = lt_update_data_status
    ).

  ENDMETHOD.
ENDCLASS.

CLASS ltd_conf_get_state_for_read DEFINITION FOR TESTING.
  PUBLIC SECTION.
    CONSTANTS bo_key1 TYPE /bobf/conf_key VALUE '1'.
    CONSTANTS bo_key2 TYPE /bobf/conf_key VALUE '2'.
    INTERFACES /bobf/if_frw_configuration PARTIALLY IMPLEMENTED.
    METHODS constructor IMPORTING iv_bo_key TYPE /bobf/conf_key.
ENDCLASS.


CLASS ltd_conf_get_state_for_read IMPLEMENTATION.
  METHOD constructor.
    /bobf/if_frw_configuration~ms_obj-bo_key = iv_bo_key.
  ENDMETHOD.

ENDCLASS.

CLASS ltd_authority_context DEFINITION FOR TESTING INHERITING FROM /bobf/cl_frw_authority_context.
  PUBLIC SECTION.
    CLASS-METHODS set_cross_bo_states IMPORTING is_rba_cross_bo_states TYPE /bobf/cl_frw_authority_context=>ty_rba_cross_bo_states.
    CLASS-METHODS get_cross_bo_states RETURNING VALUE(rs_rba_cross_bo_states) TYPE /bobf/cl_frw_authority_context=>ty_rba_cross_bo_states.
ENDCLASS.

CLASS ltd_authority_context IMPLEMENTATION.
  METHOD set_cross_bo_states.
    set_rba_cross_bo_states( is_rba_cross_bo_states ).
  ENDMETHOD.

  METHOD get_cross_bo_states.
    rs_rba_cross_bo_states = get_rba_cross_bo_states( ).
  ENDMETHOD.
ENDCLASS.

CLASS ltc_get_state_for_read DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltc_get_state_for_read.
CLASS ltc_get_state_for_read DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION SHORT.

  PRIVATE SECTION.
    DATA mo_cut TYPE REF TO /bobf/cl_frw.
    METHODS setup RAISING /bobf/cx_frw.
    METHODS without_authority_context FOR TESTING RAISING /bobf/cx_frw.
    methods with_auth_context_same_bo FOR TESTING RAISING /bobf/cx_frw.
    methods with_auth_context_diff_bo FOR TESTING RAISING /bobf/cx_frw.

ENDCLASS.


CLASS ltc_get_state_for_read IMPLEMENTATION.

  METHOD setup.

    TEST-INJECTION on_construct.
      RETURN.
    END-TEST-INJECTION.

    ltd_authority_context=>set_cross_bo_states( value #( ) ).
  ENDMETHOD.
  METHOD without_authority_context.

    CREATE OBJECT mo_cut
      EXPORTING
        io_conf = NEW ltd_conf_get_state_for_read( ltd_conf_get_state_for_read=>bo_key1 ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_current
      act = mo_cut->get_state_for_read( iv_before_image = abap_false )
    ).


    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_current
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).


    mo_cut->mv_modifying_transaction = abap_true.
    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_database
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).

  ENDMETHOD.

  method with_auth_context_same_bo.

    CREATE OBJECT mo_cut
      EXPORTING
        io_conf = NEW ltd_conf_get_state_for_read( ltd_conf_get_state_for_read=>bo_key1 ).

    ltd_authority_context=>set_cross_bo_states( is_rba_cross_bo_states = value #(
      bo_key = ltd_conf_get_state_for_read=>bo_key1
      before_state = /bobf/if_conf_c=>sc_state_last_determined
      current_state = /bobf/if_conf_c=>sc_state_last_validated )
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_last_validated
      act = mo_cut->get_state_for_read( iv_before_image = abap_false )
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_last_validated
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).


    mo_cut->mv_modifying_transaction = abap_true.
    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_last_determined
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).

  ENDMETHOD.

  method with_auth_context_diff_bo.

    CREATE OBJECT mo_cut
      EXPORTING
        io_conf = NEW ltd_conf_get_state_for_read( ltd_conf_get_state_for_read=>bo_key2 ).

    ltd_authority_context=>set_cross_bo_states( is_rba_cross_bo_states = value #(
      bo_key = ltd_conf_get_state_for_read=>bo_key1
      before_state = /bobf/if_conf_c=>sc_state_last_determined
      current_state = /bobf/if_conf_c=>sc_state_last_validated )
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_current
      act = mo_cut->get_state_for_read( iv_before_image = abap_false )
    ).

    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_current
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).


    mo_cut->mv_modifying_transaction = abap_true.
    cl_abap_unit_assert=>assert_equals(
      exp = /bobf/if_conf_c=>sc_state_database
      act = mo_cut->get_state_for_read( iv_before_image = abap_true )
    ).

  ENDMETHOD.

ENDCLASS.


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"  Validation Trigger tests
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
CLASS ltc_evaluate_triggered_valkeys DEFINITION DEFERRED.

CLASS ltd_evaluate_triggered_valkeys DEFINITION
FOR TESTING
INHERITING FROM /bobf/cl_frw
FRIENDS ltc_evaluate_triggered_valkeys.

  PUBLIC SECTION.
    CLASS-DATA gv_return_failed_key TYPE abap_bool.


  PROTECTED SECTION.
    METHODS retrieve REDEFINITION.
    METHODS retrieve_by_association REDEFINITION.

ENDCLASS.


CLASS ltd_evaluate_triggered_valkeys IMPLEMENTATION.

  METHOD retrieve.
    CLEAR et_failed_key.

    IF gv_return_failed_key = abap_true.
      et_failed_key = VALUE #( ( it_key[ 1 ] ) ).
    ENDIF.

  ENDMETHOD.


  METHOD retrieve_by_association.
    CLEAR et_failed_key.
    et_target_key = VALUE #( ( key = lif_mock_bo=>root_key-key3 ) ).
  ENDMETHOD.

ENDCLASS.




CLASS ltc_evaluate_triggered_valkeys DEFINITION
FOR TESTING
RISK LEVEL HARMLESS
DURATION SHORT.

  PUBLIC SECTION.
    INTERFACES /bobf/if_frw_configuration PARTIALLY IMPLEMENTED.
    METHODS constructor.

  PRIVATE SECTION.

    DATA mo_cut               TYPE REF TO ltd_evaluate_triggered_valkeys.
    DATA mo_message           TYPE REF TO /bobf/if_frw_message.
    DATA mo_change            TYPE REF TO /bobf/cl_frw_change.
    DATA ms_validation        TYPE /bobf/s_confro_val_list.
    DATA mv_processing_mode   TYPE /bobf/frw_processing_mode.
    DATA mv_use_check_trigger TYPE abap_bool.
    DATA mv_last_state        TYPE /bobf/conf_state.

    METHODS setup RAISING /bobf/cx_frw.
    METHODS dummy_call FOR TESTING.
    METHODS val_trigger_on_root FOR TESTING.
    METHODS valtrigger_rootitem_first_item FOR TESTING.
    METHODS valtrigger_rootitem_first_root FOR TESTING.
    METHODS valtrigger_rootitem_diff_nodes FOR TESTING.
    METHODS valtrigger_non_existent_root FOR TESTING.
    METHODS valtrg_non_existent_diff_nodes FOR TESTING.

    METHODS _prepare_val_trigger_nodes
      IMPORTING is_val_trigger TYPE /bobf/s_confro_val_trigger OPTIONAL.

ENDCLASS.


CLASS ltc_evaluate_triggered_valkeys IMPLEMENTATION.

  METHOD constructor.
    /bobf/if_frw_configuration~ms_obj-smart_validations = abap_false.
  ENDMETHOD.


  METHOD setup.


    TEST-INJECTION on_construct.
      RETURN.
    END-TEST-INJECTION.

    CREATE OBJECT mo_cut EXPORTING io_conf = NEW ltc_evaluate_triggered_valkeys( ).

    " Set the retrieve method to return nothing
    CLEAR mo_cut->gv_return_failed_key.

    CREATE OBJECT mo_change.
    mo_change->/bobf/if_frw_change~add( it_change = VALUE #( ( key = lif_mock_bo=>root_key-key3
                                                               node_key = lif_mock_bo=>node_key-root
                                                               change_mode = /bobf/if_frw_c=>sc_modify_update )

                                                             ( key = lif_mock_bo=>item_key-key31
                                                               node_key = lif_mock_bo=>node_key-item
                                                               change_mode = /bobf/if_frw_c=>sc_modify_update ) ) ).
    CREATE DATA ms_validation-val_trigger.
    ms_validation-node_key = lif_mock_bo=>node_key-root.

  ENDMETHOD.


  METHOD _prepare_val_trigger_nodes.

    IF is_val_trigger IS NOT INITIAL.
      APPEND is_val_trigger TO ms_validation-val_trigger->*.
    ENDIF.

  ENDMETHOD.


  METHOD dummy_call.
    " Smoke test
    DATA lt_key TYPE /bobf/t_frw_key.

    _prepare_val_trigger_nodes( ).

    INSERT INITIAL LINE INTO TABLE lt_key. "see if ET_KEY is properly cleared
    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = lt_key
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_initial( lt_key ).

  ENDMETHOD.


  METHOD val_trigger_on_root.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_exp_key     TYPE /bobf/t_frw_key.

    " Set one record for trigger node
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    " We expect the resultant table to contain a line with node key = 3
    lt_exp_key = VALUE #( ( key = '3' ) ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = DATA(lt_act_key)
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_equals( act = lt_act_key
                                        exp = lt_exp_key ).

  ENDMETHOD.


  METHOD valtrigger_rootitem_first_item.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_exp_key     TYPE /bobf/t_frw_key.

    " Set two records for trigger node
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    CLEAR ls_val_trigger.
    ls_val_trigger-node_key = lif_mock_bo=>node_key-item.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    ls_val_trigger-assoc = NEW #( assoc_key = lif_mock_bo=>associations-to_root
                                  source_node_key = lif_mock_bo=>node_key-root ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    " We expect the resultant table to contain two lines with node keys = 3 & 31
    lt_exp_key = VALUE #( ( key = '3' ) ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = DATA(lt_act_key)
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_equals( act = lt_act_key
                                        exp = lt_exp_key ).

  ENDMETHOD.


  METHOD valtrigger_rootitem_first_root.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_exp_key     TYPE /bobf/t_frw_key.

    " Set two records for trigger node
    ls_val_trigger-node_key = lif_mock_bo=>node_key-item.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    ls_val_trigger-assoc = NEW #( assoc_key = lif_mock_bo=>associations-to_root
                                  source_node_key = lif_mock_bo=>node_key-root ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    CLEAR ls_val_trigger.
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    " We expect the resultant table to contain two lines with node keys = 3 & 31
    lt_exp_key = VALUE #( ( key = '3' ) ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = DATA(lt_act_key)
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_equals( act = lt_act_key
                                        exp = lt_exp_key ).

  ENDMETHOD.


  METHOD valtrigger_rootitem_diff_nodes.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_exp_key     TYPE /bobf/t_frw_key.

    " Set two records for trigger node
    mo_change->/bobf/if_frw_change~add( it_change = VALUE #( ( key = lif_mock_bo=>root_key-key1
                                                               node_key = lif_mock_bo=>node_key-root
                                                               change_mode = /bobf/if_frw_c=>sc_modify_update ) ) ).

    ls_val_trigger-node_key = lif_mock_bo=>node_key-item.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    CLEAR ls_val_trigger.
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    " We expect the resultant table to contain two lines with node keys = 3 & 31
    lt_exp_key = VALUE #( ( key = '1' )
                          ( key = '3' ) ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = DATA(lt_act_key)
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_equals( act = lt_act_key
                                        exp = lt_exp_key ).

  ENDMETHOD.


  METHOD valtrigger_non_existent_root.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_act_key     TYPE /bobf/t_frw_key.

    " Set the retrieve method to return a failed key
    mo_cut->gv_return_failed_key = abap_true.

    " Set one trigger node for ROOT
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = lt_act_key
                                          CHANGING
                                           co_message           = mo_message ).

    " An initial key is returned because, we set the current key to non existent in the retrieve method
    cl_abap_unit_assert=>assert_initial( act = lt_act_key ).
  ENDMETHOD.


  METHOD valtrg_non_existent_diff_nodes.

    DATA ls_val_trigger TYPE /bobf/s_confro_val_trigger.
    DATA lt_exp_key     TYPE /bobf/t_frw_key.

    " Set the retrieve method to return a failed key
    mo_cut->gv_return_failed_key = abap_true.

    " Set two records for trigger node
    mo_change->/bobf/if_frw_change~add( it_change = VALUE #( ( key = lif_mock_bo=>root_key-key1
                                                               node_key = lif_mock_bo=>node_key-root
                                                               change_mode = /bobf/if_frw_c=>sc_modify_update ) ) ).

    ls_val_trigger-node_key = lif_mock_bo=>node_key-item.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    CLEAR ls_val_trigger.
    ls_val_trigger-node_key = lif_mock_bo=>node_key-root.
    ls_val_trigger-change_mode = VALUE #( update = abap_true ).
    _prepare_val_trigger_nodes( ls_val_trigger ).

    " We expect only one key, as the other key is non-existing and will be deleted
    lt_exp_key = VALUE #( ( key = '3' ) ).

    mo_cut->determine_triggered_val_keys( EXPORTING
                                           is_validation        = ms_validation
                                           io_change            = mo_change
                                           iv_processing_mode   = mv_processing_mode
                                           iv_use_check_trigger = mv_use_check_trigger
                                           iv_last_state        = mv_last_state
                                          IMPORTING
                                           et_key               = DATA(lt_act_key)
                                          CHANGING
                                           co_message           = mo_message ).

    cl_abap_unit_assert=>assert_equals( act = lt_act_key
                                        exp = lt_exp_key ).

  ENDMETHOD.

ENDCLASS.

















CLASS lth_constants DEFINITION FOR TESTING.
  PUBLIC SECTION.

    TYPES:

      BEGIN OF ty_node_list,
        notif_not_by_bopf   TYPE /bobf/s_confro_node,
        no_delegation_class TYPE /bobf/s_confro_node,
        with_notifications  TYPE /bobf/s_confro_node,
        alternative_1       TYPE /bobf/s_confro_node,
      END OF ty_node_list,

      BEGIN OF ty_assoc_trigger_list,
        no_trigger     TYPE /bobf/s_confro_assoc_chg_trig,
        create         TYPE /bobf/s_confro_assoc_chg_trig,
        delete         TYPE /bobf/s_confro_assoc_chg_trig,
        buffer         TYPE /bobf/s_confro_assoc_chg_trig,
        impl           TYPE /bobf/s_confro_assoc_chg_trig,
        all_no_resolve TYPE /bobf/s_confro_assoc_chg_trig,
        all            TYPE /bobf/s_confro_assoc_chg_trig,
      END OF ty_assoc_trigger_list,

      BEGIN OF ty_change_list,
        failed   TYPE /bobf/s_frw_change,
        internal TYPE /bobf/s_frw_change,
        create   TYPE /bobf/s_frw_change,
        update   TYPE /bobf/s_frw_change,
        delete   TYPE /bobf/s_frw_change,
      END OF ty_change_list.

    CONSTANTS:
      gc_dummy_node          TYPE /bobf/obm_node_key  VALUE '999999999',
      gc_dummy_assoc         TYPE /bobf/obm_assoc_key VALUE '888888888',
      gc_dummy_resolve_assoc TYPE /bobf/obm_assoc_key VALUE '777777777',
      gc_dummy_source_node   TYPE /bobf/obm_node_key  VALUE '666666666',
      gc_source_node_key1    TYPE /bobf/obm_node_key  VALUE '1111',
      gc_source_node_key2    TYPE /bobf/obm_node_key  VALUE '2222'.

    CLASS-DATA:
      sc_node          TYPE ty_node_list,
      sc_assoc_trigger TYPE ty_assoc_trigger_list,
      sc_change        TYPE ty_change_list.

    CLASS-METHODS:
      class_constructor,
      create_assoc_trigger IMPORTING is_assoc_trigger        TYPE /bobf/s_confro_assoc_chg_trig
                                     iv_node_key             TYPE /bobf/obm_node_key
                                     iv_source_node_key      TYPE /bobf/obm_node_key OPTIONAL
                                     iv_assoc_key            TYPE /bobf/obm_assoc_key OPTIONAL
                                     iv_resolve_assoc_key    TYPE /bobf/obm_assoc_key OPTIONAL
                           RETURNING VALUE(rs_assoc_trigger) TYPE /bobf/s_confro_assoc_chg_trig,
      create_changes IMPORTING is_change      TYPE /bobf/s_frw_change
                               iv_node_key    TYPE /bobf/obm_node_key
                               iv_n_o_changes TYPE i
                     EXPORTING et_change      TYPE /bobf/t_frw_change.
ENDCLASS.


CLASS lth_constants IMPLEMENTATION.

  METHOD class_constructor.

    sc_node = VALUE #(
      notif_not_by_bopf   = VALUE #( node_key                    = '1'
                                     delegation_class            = 'DUMMY_CLASS' )
      no_delegation_class = VALUE #( node_key                    = '2'
                                     assoc_change_notifs_by_bopf = abap_true )
      with_notifications  = VALUE #( node_key                    = '3'
                                     assoc_change_notifs_by_bopf = abap_true
                                     delegation_class            = 'SOME_CLASS' )
      alternative_1       = VALUE #( node_key                    = '4'
                                     assoc_change_notifs_by_bopf = abap_true
                                     delegation_class            = 'SOME_CLASS' )
    ) ##LITERAL.

    sc_assoc_trigger  = VALUE #(
      no_trigger     = VALUE #( resolve_assoc_key = gc_dummy_resolve_assoc
                                assoc_key         = gc_dummy_assoc
                                assoc             = NEW #( assoc_key       = gc_dummy_assoc
                                                           target_node_key = gc_dummy_node
                                                           source_node_key = gc_dummy_source_node
                                                           change_resolve  = /bobf/if_conf_c=>sc_assoc_change_bopf ) )
      create         = VALUE #( create    = abap_true
                                assoc_key = gc_dummy_assoc
                                assoc     = NEW #( assoc_key = gc_dummy_assoc
                                                   target_node_key = gc_dummy_node
                                                   source_node_key = gc_dummy_source_node
                                                   change_resolve  = /bobf/if_conf_c=>sc_assoc_change_bopf ) )
      delete         = VALUE #( delete    = abap_true
                                assoc_key = gc_dummy_assoc
                                assoc     = NEW #( assoc_key       = gc_dummy_assoc
                                                   target_node_key = gc_dummy_node
                                                   source_node_key = gc_dummy_source_node
                                                   change_resolve  = /bobf/if_conf_c=>sc_assoc_change_bopf ) )
      buffer         = VALUE #( create            = abap_true
                                update            = abap_true
                                delete            = abap_true
                                resolve_assoc_key = gc_dummy_resolve_assoc
                                assoc_key         = gc_dummy_assoc
                                assoc             = NEW #( assoc_key = gc_dummy_assoc
                                                           target_node_key = gc_dummy_node
                                                           source_node_key = gc_dummy_source_node
                                                           change_resolve  = /bobf/if_conf_c=>sc_assoc_change_buffer ) )
      impl           = VALUE #( create            = abap_true
                                update            = abap_true
                                delete            = abap_true
                                resolve_assoc_key = gc_dummy_resolve_assoc
                                assoc_key         = gc_dummy_assoc
                                assoc             = NEW #( assoc_key       = gc_dummy_assoc
                                                           target_node_key = gc_dummy_node
                                                           source_node_key = gc_dummy_source_node
                                                           change_resolve  = /bobf/if_conf_c=>sc_assoc_change_impl ) )
      all_no_resolve = VALUE #( create    = abap_true
                                update    = abap_true
                                delete    = abap_true
                                assoc_key = gc_dummy_assoc
                                assoc     = NEW #( assoc_key       = gc_dummy_assoc
                                                   target_node_key = gc_dummy_node
                                                   source_node_key = gc_dummy_source_node
                                                   change_resolve  = /bobf/if_conf_c=>sc_assoc_change_bopf ) )
      all            = VALUE #( create            = abap_true
                                update            = abap_true
                                delete            = abap_true
                                resolve_assoc_key = gc_dummy_resolve_assoc
                                assoc_key         = gc_dummy_assoc
                                assoc             = NEW #( assoc_key = gc_dummy_assoc
                                                           target_node_key = gc_dummy_node
                                                           source_node_key = gc_dummy_source_node
                                                           change_resolve  = /bobf/if_conf_c=>sc_assoc_change_bopf ) )
    ).

    sc_change = VALUE #(
      failed   = VALUE #( node_key = gc_dummy_node
                          failed = abap_true
                          external = abap_true )
      internal = VALUE #( node_key = gc_dummy_node )
      create   = VALUE #( node_key = gc_dummy_node
                          failed = abap_false
                          external = abap_true
                          change_mode = /bobf/if_frw_c=>sc_modify_create )
      update   = VALUE #( node_key = gc_dummy_node
                          failed = abap_false
                          external = abap_true
                          change_mode = /bobf/if_frw_c=>sc_modify_update )
      delete   = VALUE #( node_key = gc_dummy_node
                          failed = abap_false
                          external = abap_true
                          change_mode = /bobf/if_frw_c=>sc_modify_delete )
    ).

  ENDMETHOD.


  METHOD create_assoc_trigger.

    rs_assoc_trigger = is_assoc_trigger.

    IF iv_resolve_assoc_key IS NOT INITIAL.
      rs_assoc_trigger-resolve_assoc_key = iv_resolve_assoc_key.
    ELSE.
      IF is_assoc_trigger-resolve_assoc_key = gc_dummy_resolve_assoc.
        rs_assoc_trigger-resolve_assoc_key = /bobf/cl_frw_factory=>get_new_key( ).
      ENDIF.
    ENDIF.

    IF iv_assoc_key IS NOT INITIAL.
      rs_assoc_trigger-assoc_key = iv_assoc_key.
    ELSE.
      IF is_assoc_trigger-assoc_key = gc_dummy_assoc.
        rs_assoc_trigger-assoc_key = /bobf/cl_frw_factory=>get_new_key( ).
      ENDIF.
    ENDIF.

    CHECK is_assoc_trigger-assoc IS BOUND.

    rs_assoc_trigger-assoc = NEW #( ).
    ASSIGN is_assoc_trigger-assoc->* TO FIELD-SYMBOL(<ls_assoc_in>).
    ASSIGN rs_assoc_trigger-assoc->* TO FIELD-SYMBOL(<ls_assoc_out>).
    <ls_assoc_out> = <ls_assoc_in>.

    rs_assoc_trigger-assoc->assoc_key = rs_assoc_trigger-assoc_key.
    rs_assoc_trigger-assoc->target_node_key = iv_node_key.

    IF iv_source_node_key IS NOT INITIAL.
      rs_assoc_trigger-assoc->source_node_key = iv_source_node_key.
    ELSE.
      rs_assoc_trigger-assoc->source_node_key = /bobf/cl_frw_factory=>get_new_key( ).
    ENDIF.

  ENDMETHOD.


  METHOD create_changes.

    DATA:
      ls_change TYPE /bobf/s_frw_change.

    CLEAR:
      et_change.

    DO iv_n_o_changes TIMES.
      ls_change = is_change.
      ls_change-node_key = iv_node_key.
      ls_change-key = /bobf/cl_frw_factory=>get_new_key( ).
      INSERT ls_change INTO TABLE et_change.
    ENDDO.

  ENDMETHOD.

ENDCLASS.












CLASS ltd_frw_rba DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltd_frw_rba.
CLASS ltd_frw_rba DEFINITION FOR TESTING INHERITING FROM /bobf/cl_frw CREATE PUBLIC.
  PUBLIC SECTION.
    TYPES:
      BEGIN OF ty_assoc_buffer,
        assoc_key  TYPE /bobf/obm_assoc_key,
        t_key_link TYPE /bobf/t_frw_key_link,
      END OF ty_assoc_buffer,
      tt_assoc_buffer TYPE STANDARD TABLE OF ty_assoc_buffer.
    METHODS:
      "! Stores the relation between a source and a target key for a give association
      add_assoc_buffer_entry IMPORTING iv_assoc_key  TYPE /bobf/obm_assoc_key
                                       iv_source_key TYPE /bobf/conf_key
                                       iv_target_key TYPE /bobf/conf_key,
      "! All entries in it_source_key will get the same target_key for the given association
      fill_new_assoc_target_key IMPORTING iv_assoc_key         TYPE /bobf/obm_assoc_key
                                          it_source_key        TYPE /bobf/t_frw_key
                                RETURNING VALUE(rv_target_key) TYPE /bobf/conf_key,
      clear_assoc_buffer,
      disable_content_changes.
  PROTECTED SECTION.
    METHODS:
      retrieve_by_association REDEFINITION.
  PRIVATE SECTION.
    DATA:
      mt_assoc_buffer TYPE tt_assoc_buffer.
ENDCLASS.


CLASS ltd_frw_rba IMPLEMENTATION.

  METHOD retrieve_by_association.

    CLEAR:
      et_target_key.
    READ TABLE mt_assoc_buffer ASSIGNING FIELD-SYMBOL(<ls_assoc_buffer>) WITH KEY assoc_key = iv_association.
    IF sy-subrc <> 0.
      cl_abap_unit_assert=>abort( msg = 'Association not found' ).
    ENDIF.

    LOOP AT it_key INTO DATA(ls_key).
      READ TABLE <ls_assoc_buffer>-t_key_link INTO DATA(ls_key_link) WITH KEY source_key = ls_key-key.
      CHECK sy-subrc = 0.
      INSERT VALUE #( key = ls_key_link-target_key ) INTO TABLE et_target_key.
    ENDLOOP.

    SORT et_target_key.
    DELETE ADJACENT DUPLICATES FROM et_target_key.

  ENDMETHOD.


  METHOD add_assoc_buffer_entry.

    READ TABLE mt_assoc_buffer ASSIGNING FIELD-SYMBOL(<ls_assoc_buffer>) WITH KEY assoc_key = iv_assoc_key.
    IF sy-subrc = 0.
      INSERT VALUE #( source_key = iv_source_key
                      target_key = iv_target_key ) INTO TABLE <ls_assoc_buffer>-t_key_link.
    ELSE.
      INSERT VALUE #( assoc_key  = iv_assoc_key
                      t_key_link = VALUE #( ( source_key = iv_source_key
                                              target_key = iv_target_key ) )
                    ) INTO TABLE mt_assoc_buffer.
    ENDIF.

  ENDMETHOD.


  METHOD fill_new_assoc_target_key.

    rv_target_key = /bobf/cl_frw_factory=>get_new_key( ).
    LOOP AT it_source_key INTO DATA(ls_source_key).
      add_assoc_buffer_entry( iv_source_key = ls_source_key-key
                              iv_target_key = rv_target_key
                              iv_assoc_key  = iv_assoc_key ).
    ENDLOOP.

  ENDMETHOD.


  METHOD clear_assoc_buffer.
    CLEAR mt_assoc_buffer.
  ENDMETHOD.


  METHOD disable_content_changes.
    DATA lo_super TYPE REF TO /bobf/cl_frw.
    lo_super = me.
    lo_super->mv_no_content_changes = abap_true.
  ENDMETHOD.

ENDCLASS.











CLASS ltd_conf_assoc_changes DEFINITION FOR TESTING.
  PUBLIC SECTION.
    INTERFACES /bobf/if_frw_configuration PARTIALLY IMPLEMENTED.
    METHODS:
      constructor,
      disable_change_notifications,
      chnge_notfications_not_by_bopf,
      add_node_conf IMPORTING is_node_conf TYPE /bobf/s_confro_node,
      add_assoc_conf IMPORTING is_assoc_conf TYPE /bobf/s_confro_assoc,
      add_assoc_change_trigger IMPORTING is_assoc_change_trigger TYPE /bobf/s_confro_assoc_chg_trig.
  PRIVATE SECTION.
    DATA:
      mt_node_conf            TYPE /bobf/t_confro_node,
      mt_assoc_conf           TYPE /bobf/t_confro_assoc,
      mt_assoc_change_trigger TYPE /bobf/t_confro_assoc_chg_trig.
ENDCLASS.


CLASS ltd_conf_assoc_changes IMPLEMENTATION.

  METHOD constructor.
    /bobf/if_frw_configuration~ms_obj-notify_association_changes  = abap_true.
    /bobf/if_frw_configuration~ms_obj-assoc_change_notifs_by_bopf = abap_true.
  ENDMETHOD.


  METHOD disable_change_notifications.
    /bobf/if_frw_configuration~ms_obj-notify_association_changes  = abap_false.
  ENDMETHOD.


  METHOD chnge_notfications_not_by_bopf.
    /bobf/if_frw_configuration~ms_obj-assoc_change_notifs_by_bopf = abap_false.
  ENDMETHOD.


  METHOD add_node_conf.
    INSERT is_node_conf INTO TABLE mt_node_conf.
  ENDMETHOD.


  METHOD add_assoc_conf.
    INSERT is_assoc_conf INTO TABLE mt_assoc_conf.
  ENDMETHOD.


  METHOD add_assoc_change_trigger.

    FIELD-SYMBOLS <ls_assoc> TYPE /bobf/s_confro_assoc.

    INSERT is_assoc_change_trigger INTO TABLE mt_assoc_change_trigger.
    cl_abap_unit_assert=>assert_bound( is_assoc_change_trigger-assoc ).
    ASSIGN is_assoc_change_trigger-assoc->* TO <ls_assoc>.
    INSERT <ls_assoc> INTO TABLE mt_assoc_conf.

    " Also add a dummy configuration for the resolve association
    CHECK is_assoc_change_trigger-resolve_assoc_key IS NOT INITIAL.
    INSERT VALUE #( assoc_key = is_assoc_change_trigger-resolve_assoc_key ) INTO TABLE mt_assoc_conf.

  ENDMETHOD.



  METHOD /bobf/if_frw_configuration~get_node.

    CLEAR es_node.
    READ TABLE mt_node_conf INTO es_node WITH KEY node_key = iv_node_key.
    IF sy-subrc <> 0.
      cl_abap_unit_assert=>abort( msg = 'Node not found' ).
    ENDIF.
    /bobf/if_frw_configuration~ms_last_node = es_node.

  ENDMETHOD.


  METHOD /bobf/if_frw_configuration~get_assoc.

    CLEAR es_assoc.
    READ TABLE mt_assoc_conf INTO es_assoc WITH KEY assoc_key = iv_assoc_key.
    IF sy-subrc <> 0.
      cl_abap_unit_assert=>abort( msg = 'Association not found' ).
    ENDIF.
    /bobf/if_frw_configuration~ms_last_assoc = es_assoc.

  ENDMETHOD.


  METHOD /bobf/if_frw_configuration~get_assoc_change.

    DATA:
      lt_assoc_key TYPE SORTED TABLE OF /bobf/obm_assoc_key WITH NON-UNIQUE KEY table_line.

    CLEAR et_association_change_trigger.

    LOOP AT mt_assoc_conf ASSIGNING FIELD-SYMBOL(<ls_assoc>) WHERE target_node_key = iv_node_key. "#EC CI_SORTSEQ
      INSERT <ls_assoc>-assoc_key INTO TABLE lt_assoc_key.
    ENDLOOP.

    et_association_change_trigger = FILTER #( mt_assoc_change_trigger IN lt_assoc_key WHERE assoc_key = table_line ).

  ENDMETHOD.

ENDCLASS.








CLASS ltca_notify_assoc_changes DEFINITION DEFERRED.
CLASS /bobf/cl_frw DEFINITION LOCAL FRIENDS ltca_notify_assoc_changes.
CLASS ltca_notify_assoc_changes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG ABSTRACT.

  PROTECTED SECTION.

    TYPES:
      BEGIN OF ty_chg_trig_target_conf,
        change_node_key               TYPE /bobf/obm_node_key,
        change_template               TYPE /bobf/s_frw_change,
        t_change                      TYPE /bobf/t_frw_change,
        number_of_changes             TYPE i,
        source_node_key               TYPE /bobf/obm_node_key,
        assoc_trigger_template        TYPE /bobf/s_confro_assoc_chg_trig,
        assoc_trigger                 TYPE /bobf/s_confro_assoc_chg_trig,
        sources_share_target          TYPE abap_bool,
        t_target_key                  TYPE /bobf/t_frw_key,
        add_expectation_to_change_obj TYPE abap_bool,
      END OF ty_chg_trig_target_conf.


    DATA:
      mo_conf                 TYPE REF TO ltd_conf_assoc_changes,
      mo_cut_td               TYPE REF TO ltd_frw_rba,
      mo_change               TYPE REF TO /bobf/cl_frw_change,
      mv_delete               TYPE abap_bool,
      mv_dependent_objects    TYPE abap_bool,
      ms_chg_trig_target_conf TYPE ty_chg_trig_target_conf,
      mt_content_change_exp   TYPE /bobf/t_frw_change_content.

    METHODS:
      "! Executes the code under test
      execute_notify_assoc_changes,
      "! Creates input changes from ms_chg_trig_target_conf and adds them to the input change object
      prepare_and_add_changes,
      "! Creates an association with trigger from ms_chg_trig_target_conf and registers it in the BO configuration
      prepare_and_add_trigger,
      "! Add target keys to an association from ms_chg_trig_target_conf. The corresponding source keys are the ones
      "! in the changes that were previously created in prepare_and_add_changes
      prepare_and_add_targets,
      "! Simplest preparation: call prepare_and_add_changes, prepare_and_add_trigger
      "! and prepare_and_add_targets without changing ms_chg_trig_target_conf in between
      prepare_change_trigger_target,
      "! Simulate already existing content changes for an incoming association
      add_targets_to_expectation,
      "! Simulate already existing content changes for an outgoing association
      add_change_keys_to_expectation,
      assert_no_content_changes,
      assert_expected_content_chnges.


  PRIVATE SECTION.

    DATA:
      mo_cut TYPE REF TO /bobf/cl_frw.

    METHODS:
      setup RAISING /bobf/cx_frw,
      add_changes IMPORTING it_change TYPE /bobf/t_frw_change.

ENDCLASS.


CLASS ltca_notify_assoc_changes IMPLEMENTATION.

  METHOD setup.

    CLEAR:
      mv_delete,
      mv_dependent_objects,
      ms_chg_trig_target_conf,
      mt_content_change_exp.

    mo_conf = NEW #( ).

    TEST-INJECTION on_construct.
      RETURN.
    END-TEST-INJECTION.

    mo_cut_td = NEW #( mo_conf ).
    mo_cut = mo_cut_td.
    mo_change = NEW #( ).

    " Inject node configurations which can then be accessed by the tests
    mo_conf->add_node_conf( lth_constants=>sc_node-with_notifications ).
    mo_conf->add_node_conf( lth_constants=>sc_node-alternative_1 ).
    mo_conf->add_node_conf( lth_constants=>sc_node-notif_not_by_bopf ).
    mo_conf->add_node_conf( lth_constants=>sc_node-no_delegation_class ).

    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.

    " Number of changes of a given combination of the fields of /bobf/s_frw_change
    ms_chg_trig_target_conf-number_of_changes = 11 ##LITERAL.

  ENDMETHOD.


  METHOD execute_notify_assoc_changes.

    IF mv_delete = abap_true.
      IF mv_dependent_objects = abap_true.
        SET RUN TIME ANALYZER ON.
        mo_cut->notify_association_changes_do( EXPORTING io_change = mo_change ).
        SET RUN TIME ANALYZER OFF.
      ELSE.
        SET RUN TIME ANALYZER ON.
        mo_cut->notify_association_changes_d( EXPORTING io_change = mo_change ).
        SET RUN TIME ANALYZER OFF.
      ENDIF.
    ELSE.
      IF mv_dependent_objects = abap_true.
        SET RUN TIME ANALYZER ON.
        mo_cut->notify_association_changes_do( EXPORTING io_change = mo_change
                                                         iv_state  = /bobf/if_conf_c=>sc_state_current ).
        SET RUN TIME ANALYZER OFF.
      ELSE.
        SET RUN TIME ANALYZER ON.
        mo_cut->notify_association_changes_cu( EXPORTING io_change = mo_change ).
        SET RUN TIME ANALYZER OFF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


  METHOD add_changes.

    DATA:
      lt_external_change LIKE it_change,
      lt_internal_change LIKE it_change.

    LOOP AT it_change ASSIGNING FIELD-SYMBOL(<ls_change>).
      IF <ls_change>-external = abap_true.
        INSERT <ls_change> INTO TABLE lt_external_change.
      ELSE.
        INSERT <ls_change> INTO TABLE lt_internal_change.
      ENDIF.
    ENDLOOP.

    mo_change->trace_external_changes( abap_true ).
    mo_change->/bobf/if_frw_change~add( it_change = lt_external_change ).

    mo_change->trace_external_changes( abap_false ).
    mo_change->/bobf/if_frw_change~add( it_change = lt_internal_change ).

  ENDMETHOD.


  METHOD prepare_and_add_changes.

    CLEAR ms_chg_trig_target_conf-t_change.

    " Create a list of changes for test input
    lth_constants=>create_changes( EXPORTING is_change      = ms_chg_trig_target_conf-change_template
                                             iv_node_key    = ms_chg_trig_target_conf-change_node_key
                                             iv_n_o_changes = ms_chg_trig_target_conf-number_of_changes
                                   IMPORTING et_change      = ms_chg_trig_target_conf-t_change ).

    " Register created changes in test input mo_change
    add_changes( ms_chg_trig_target_conf-t_change ).

  ENDMETHOD.


  METHOD prepare_and_add_trigger.

    CLEAR ms_chg_trig_target_conf-assoc_trigger.

    " Create an association with trigger
    ms_chg_trig_target_conf-assoc_trigger = lth_constants=>create_assoc_trigger(
                                                is_assoc_trigger   = ms_chg_trig_target_conf-assoc_trigger_template
                                                iv_node_key        = ms_chg_trig_target_conf-change_node_key
                                                iv_source_node_key = ms_chg_trig_target_conf-source_node_key ).

    " Register the created association and its trigger in the BO configuration
    " If the resolve association is set, it is also registered
    mo_conf->add_assoc_change_trigger( ms_chg_trig_target_conf-assoc_trigger ).

  ENDMETHOD.


  METHOD prepare_and_add_targets.

    DATA lt_source_key TYPE /bobf/t_frw_key.

    CLEAR ms_chg_trig_target_conf-t_target_key.

    " Determine if the association itself or its resolve association is used
    IF ms_chg_trig_target_conf-assoc_trigger-resolve_assoc_key IS NOT INITIAL.
      " Incoming association
      DATA(lv_assoc_key) = ms_chg_trig_target_conf-assoc_trigger-resolve_assoc_key.
    ELSE.
      " Outgoing association
      lv_assoc_key = ms_chg_trig_target_conf-assoc_trigger-assoc_key.
    ENDIF.
    cl_abap_unit_assert=>assert_not_initial( act = lv_assoc_key
                                             msg = 'Neither assoc nor resolve_assoc is set for the given trigger' ).

    " Use keys from the created changes as source keys
    lt_source_key = CORRESPONDING #( ms_chg_trig_target_conf-t_change ).

    " Provide target keys for the test and register them in the FRW test double
    " for the retrieve_by_association call
    IF ms_chg_trig_target_conf-sources_share_target = abap_true.
      " All sources get the same target
      INSERT VALUE #( key = mo_cut_td->fill_new_assoc_target_key(
                                         iv_assoc_key  = lv_assoc_key
                                         it_source_key = lt_source_key )
                    ) INTO TABLE ms_chg_trig_target_conf-t_target_key.
    ELSE.
      " Each source gets its own target
      LOOP AT lt_source_key INTO DATA(ls_source_key).
        INSERT VALUE #( key = mo_cut_td->fill_new_assoc_target_key(
                                           iv_assoc_key  = lv_assoc_key
                                           it_source_key = VALUE #( ( key = ls_source_key-key ) ) )
                      ) INTO TABLE ms_chg_trig_target_conf-t_target_key.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD prepare_change_trigger_target.
    prepare_and_add_changes( ).
    prepare_and_add_trigger( ).
    prepare_and_add_targets( ).
  ENDMETHOD.


  METHOD add_targets_to_expectation.

    DATA:
      ls_content_change TYPE /bobf/s_frw_change_content,
      lt_content_change TYPE /bobf/t_frw_change_content.
    FIELD-SYMBOLS:
      <ls_assoc> TYPE /bobf/s_confro_assoc.

    ls_content_change-change_mode = /bobf/if_frw_c=>sc_modify_association.
    ls_content_change-content_key = ms_chg_trig_target_conf-assoc_trigger-assoc_key.

    CHECK ms_chg_trig_target_conf-assoc_trigger-resolve_assoc_key IS NOT INITIAL.
    ls_content_change-node_key = ms_chg_trig_target_conf-source_node_key.

    LOOP AT ms_chg_trig_target_conf-t_target_key INTO DATA(ls_target_key).
      ls_content_change-key = ls_target_key-key.
      APPEND ls_content_change TO mt_content_change_exp.
      APPEND ls_content_change TO lt_content_change.
    ENDLOOP.

    CHECK ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true.
    mo_change->/bobf/if_frw_change~add( it_content_change = lt_content_change ).

  ENDMETHOD.


  METHOD add_change_keys_to_expectation.

    DATA:
      ls_content_change TYPE /bobf/s_frw_change_content,
      lt_content_change TYPE /bobf/t_frw_change_content.
    FIELD-SYMBOLS:
      <ls_assoc> TYPE /bobf/s_confro_assoc.

    ls_content_change-change_mode = /bobf/if_frw_c=>sc_modify_association.
    ls_content_change-content_key = ms_chg_trig_target_conf-assoc_trigger-assoc_key.

    LOOP AT ms_chg_trig_target_conf-t_change ASSIGNING FIELD-SYMBOL(<ls_change>).
      ls_content_change-node_key = <ls_change>-node_key.
      ls_content_change-key = <ls_change>-key.
      APPEND ls_content_change TO mt_content_change_exp.
      APPEND ls_content_change TO lt_content_change.
    ENDLOOP.

    CHECK ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true.
    mo_change->/bobf/if_frw_change~add( it_content_change = lt_content_change ).

  ENDMETHOD.


  METHOD assert_no_content_changes.
    mo_change->get( IMPORTING et_content_change = DATA(lt_content_change) ).
    cl_abap_unit_assert=>assert_initial( lt_content_change ).
  ENDMETHOD.


  METHOD assert_expected_content_chnges.

    mo_change->get( IMPORTING et_content_change = DATA(lt_content_change) ).

    " The following ASSERT may fail if duplicates are not considered properly
*    cl_abap_unit_assert=>assert_equals( act = lines( lt_content_change )
*                                        exp = lines( mt_content_change_exp ) ).

    LOOP AT mt_content_change_exp ASSIGNING FIELD-SYMBOL(<ls_content_change_exp>).
      READ TABLE lt_content_change TRANSPORTING NO FIELDS WITH KEY node_key    = <ls_content_change_exp>-node_key
                                                                   key         = <ls_content_change_exp>-key
                                                                   change_mode = <ls_content_change_exp>-change_mode
                                                                   content_key = <ls_content_change_exp>-content_key.
      cl_abap_unit_assert=>assert_subrc( exp = 0 ).
    ENDLOOP.

    LOOP AT lt_content_change ASSIGNING FIELD-SYMBOL(<ls_content_change>).
      READ TABLE mt_content_change_exp TRANSPORTING NO FIELDS WITH KEY node_key    = <ls_content_change>-node_key
                                                                       key         = <ls_content_change>-key
                                                                       change_mode = <ls_content_change>-change_mode
                                                                       content_key = <ls_content_change>-content_key.
      cl_abap_unit_assert=>assert_subrc( exp = 0 ).
    ENDLOOP.

  ENDMETHOD.

ENDCLASS.













CLASS ltc_no_assoc_changes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_notify_assoc_changes.
  PROTECTED SECTION.
    METHODS:
      content_changes_disabled FOR TESTING,
      conf_notification_disabled FOR TESTING,
      conf_notif_not_by_bopf FOR TESTING,
      node_assoc_chng_not_by_bopf FOR TESTING,
      node_depobj_delegation_init FOR TESTING,
      change_failed FOR TESTING,
      change_internal FOR TESTING,
      delete_mode_create FOR TESTING,
      delete_mode_update FOR TESTING,
      nodelete_mode_delete FOR TESTING,
      mode_create_no_trigger FOR TESTING,
      mode_create_no_resolve FOR TESTING,
      mode_update_no_trigger FOR TESTING,
      mode_delete_no_trigger FOR TESTING,
      mode_delete_no_resolve FOR TESTING,
      mode_create_buffer FOR TESTING,
      mode_create_impl FOR TESTING,
      mode_update_buffer FOR TESTING,
      mode_update_impl FOR TESTING,
      mode_delete_buffer FOR TESTING,
      mode_delete_impl FOR TESTING.
ENDCLASS.


CLASS ltc_no_assoc_changes IMPLEMENTATION.

  METHOD content_changes_disabled.

    " Prepare test data
    mo_cut_td->disable_content_changes( ).
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD conf_notification_disabled.

    " Prepare test data
    mo_conf->disable_change_notifications( ).
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD conf_notif_not_by_bopf.

    " Prepare test data
    mo_conf->chnge_notfications_not_by_bopf( ).
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD node_assoc_chng_not_by_bopf.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-notif_not_by_bopf-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD node_depobj_delegation_init.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-no_delegation_class-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD change_failed.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-failed.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD change_internal.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-internal.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD delete_mode_create.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD delete_mode_update.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD nodelete_mode_delete.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_create_no_trigger.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-no_trigger.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_create_no_resolve.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-create.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_update_no_trigger.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-no_trigger.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_delete_no_trigger.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-no_trigger.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_delete_no_resolve.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-delete.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_create_buffer.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-buffer.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_create_impl.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-impl.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_update_buffer.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-buffer.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_update_impl.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-impl.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_delete_buffer.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-buffer.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.


  METHOD mode_delete_impl.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-impl.
    prepare_change_trigger_target( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_no_content_changes( ).

  ENDMETHOD.

ENDCLASS.

























CLASS ltca_single_assoc_change DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_notify_assoc_changes ABSTRACT.
  PROTECTED SECTION.
    METHODS:
      mode_create FOR TESTING,
      mode_update FOR TESTING,
      mode_delete FOR TESTING,
      mode_create_do FOR TESTING,
      delete_mode_create_do FOR TESTING,
      mode_update_do FOR TESTING,
      delete_mode_update_do FOR TESTING,
      mode_delete_do FOR TESTING,
      nodelete_mode_delete_do FOR TESTING,
      mode_update_outgoing FOR TESTING.
  PRIVATE SECTION.
    METHODS:
      setup.
ENDCLASS.


CLASS ltca_single_assoc_change IMPLEMENTATION.

  METHOD setup.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
  ENDMETHOD.


  METHOD mode_create.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_update.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_delete.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_create_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD delete_mode_create_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_update_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD delete_mode_update_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_delete_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    mv_delete = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD nodelete_mode_delete_do.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_change_trigger_target( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_update_outgoing.

    " Prepare test data
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    prepare_change_trigger_target( ).
    add_change_keys_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.

ENDCLASS.








CLASS ltc_single_change_1target DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_single_assoc_change.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_single_change_1target IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-sources_share_target = abap_true.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_false.
  ENDMETHOD.
ENDCLASS.














CLASS ltc_single_change_targets DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_single_assoc_change.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_single_change_targets IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-sources_share_target = abap_false.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_false.
  ENDMETHOD.
ENDCLASS.















CLASS ltc_single_chg_ex_1target DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltc_single_change_1target.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_single_chg_ex_1target IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true. " New content changes are already in change object
  ENDMETHOD.
ENDCLASS.
















CLASS ltc_single_chg_ex_targets DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltc_single_change_targets.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_single_chg_ex_targets IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true. " New content changes are already in change object
  ENDMETHOD.
ENDCLASS.





















CLASS ltc_multi_change_1node DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_notify_assoc_changes.
  PROTECTED SECTION.
    METHODS:
      mode_cud_nodelete_same_assoc FOR TESTING,
      mode_cud_delete_same_assoc FOR TESTING,
      mode_cud_out_same_assoc FOR TESTING,
      mode_cud_do_same_assoc FOR TESTING,
      mode_cud_do_out_same_assoc FOR TESTING,
      mode_cud_nodelete_diff_assoc FOR TESTING,
      mode_cud_delete_diff_assoc FOR TESTING,
      mode_cud_out_diff_assoc FOR TESTING,
      mode_cud_do_diff_assoc FOR TESTING,
      mode_cud_do_out_diff_assoc FOR TESTING.

  PRIVATE SECTION.
    METHODS:
      setup.
ENDCLASS.

CLASS ltc_multi_change_1node IMPLEMENTATION.

  METHOD setup.
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
  ENDMETHOD.


  METHOD mode_cud_nodelete_same_assoc.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_delete_same_assoc.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_out_same_assoc.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_do_same_assoc.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_do_out_same_assoc.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_nodelete_diff_assoc.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_delete_diff_assoc.

    " Prepare test data
    mv_delete = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_out_diff_assoc.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_do_diff_assoc.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_do_out_diff_assoc.

    " Prepare test data
    mv_dependent_objects = abap_true.
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.

ENDCLASS.









CLASS ltc_multi_chg_ex_1node DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltc_multi_change_1node.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_multi_chg_ex_1node IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true.
  ENDMETHOD.
ENDCLASS.



















CLASS ltc_multi_change_nodes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltca_notify_assoc_changes.
  PROTECTED SECTION.
    METHODS:
      mode_create FOR TESTING,
      mode_update FOR TESTING,
      mode_update_outgoing FOR TESTING,
      mode_delete FOR TESTING,
      mode_cud_same_assoc FOR TESTING,
      mode_cud_diff_assoc FOR TESTING.

  PRIVATE SECTION.
    METHODS:
      setup.
ENDCLASS.


CLASS ltc_multi_change_nodes IMPLEMENTATION.

  METHOD setup.
    mv_dependent_objects = abap_true.
  ENDMETHOD.


  METHOD mode_create.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_update.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_update_outgoing.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all_no_resolve.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_change_keys_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_delete.

    " Prepare test data
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.
    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
    prepare_and_add_trigger( ).
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_same_assoc.

    " Prepare test data: associations have CUD triggers, CUD changes exist
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.

    " First node
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Second node
    ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
    ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
    prepare_and_add_trigger( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
    prepare_and_add_changes( ).
    prepare_and_add_targets( ).
    add_targets_to_expectation( ).

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.


  METHOD mode_cud_diff_assoc.

    " Prepare test data: associations have CUD triggers, CUD changes exist, but only one type per association
    ms_chg_trig_target_conf-assoc_trigger_template = lth_constants=>sc_assoc_trigger-all.

    DO 3 TIMES ##LITERAL.
      CASE sy-index.
        WHEN 1 ##LITERAL.
          ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-create.
        WHEN 2 ##LITERAL.
          ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-update.
        WHEN 3 ##LITERAL.
          ms_chg_trig_target_conf-change_template = lth_constants=>sc_change-delete.
      ENDCASE.

      ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-with_notifications-node_key.
      ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key1.
      prepare_and_add_trigger( ).
      prepare_and_add_changes( ).
      prepare_and_add_targets( ).
      add_targets_to_expectation( ).

      ms_chg_trig_target_conf-change_node_key = lth_constants=>sc_node-alternative_1-node_key.
      ms_chg_trig_target_conf-source_node_key = lth_constants=>gc_source_node_key2.
      prepare_and_add_trigger( ).
      prepare_and_add_changes( ).
      prepare_and_add_targets( ).
      add_targets_to_expectation( ).
    ENDDO.

    " Execute test
    execute_notify_assoc_changes( ).

    " Verify result
    assert_expected_content_chnges( ).

  ENDMETHOD.

ENDCLASS.















CLASS ltc_multi_chg_ex_nodes DEFINITION FOR TESTING RISK LEVEL HARMLESS DURATION LONG INHERITING FROM ltc_multi_change_nodes.
  PRIVATE SECTION.
    METHODS setup.
ENDCLASS.

CLASS ltc_multi_chg_ex_nodes IMPLEMENTATION.
  METHOD setup.
    ms_chg_trig_target_conf-add_expectation_to_change_obj = abap_true.
  ENDMETHOD.
ENDCLASS.
