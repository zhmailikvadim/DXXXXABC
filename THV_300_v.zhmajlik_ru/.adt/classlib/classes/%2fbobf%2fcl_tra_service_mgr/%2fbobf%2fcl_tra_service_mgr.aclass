CLASS /bobf/cl_tra_service_mgr DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC

  GLOBAL FRIENDS /bobf/cl_dac_implementation
                 /bobf/cl_tool_trace
                 /bobf/cl_tra_serv_mgr_factory
                 /bobf/cl_tra_transaction_mgr.

  PUBLIC SECTION.

    INTERFACES /bobf/if_tra_service_manager .
    INTERFACES /bobf/if_tra_serv_mgr_compl .
    INTERFACES /bobf/if_tra_serv_mgr_transact .
    INTERFACES /bobf/if_tra_clone .

    METHODS constructor
      IMPORTING
        !iv_bo_key                    TYPE /bobf/obm_bo_key
        !io_compl_transaction_manager TYPE REF TO /bobf/if_tra_trans_mgr_compl .
    METHODS handle_notify_changes
          FOR EVENT notify_changes OF /bobf/if_frw_service_layer
      IMPORTING
          !io_change .
  PROTECTED SECTION.

  PRIVATE SECTION.

    DATA mv_after_succesful_save_active TYPE boolean .
    DATA mv_is_cds_based_bo TYPE boole_d .
    CLASS-DATA gv_application_error TYPE boole_d .
    DATA mo_bopf TYPE REF TO /bobf/if_frw_service_layer .
    DATA mo_conf TYPE REF TO /bobf/if_frw_configuration .
    DATA mv_bo_key TYPE /bobf/obm_bo_key .
    DATA mo_compl_transaction_manager TYPE REF TO /bobf/if_tra_trans_mgr_compl .
    DATA mt_default_value_request TYPE /bobf/t_frw_node .
    CLASS-DATA gv_sync_point_active TYPE boole_d .
    DATA mo_bopf_clone TYPE REF TO /bobf/if_frw_service_layer .
    DATA mo_dac_message TYPE REF TO /bobf/if_frw_message .
    DATA mo_direct_access TYPE REF TO /bobf/if_frw_direct_access .

    METHODS plugins_disabled
      RETURNING
        VALUE(rv_disabled) TYPE boole_d .
    METHODS set_configuration_error
      IMPORTING
        !io_exception TYPE REF TO cx_root OPTIONAL .
    METHODS direct_write_enabled
      RETURNING
        VALUE(rv_direct_write_enabled) TYPE abap_bool .
    METHODS set_application_error
      IMPORTING
        !io_exception TYPE REF TO cx_root OPTIONAL .

    METHODS sort_modify_request
      CHANGING
        !ct_modification TYPE /bobf/t_frw_modification .
    METHODS evaluate_association_bindings
      IMPORTING
        !is_assocb              TYPE REF TO /bobf/t_confro_assocb
        !is_data                TYPE REF TO data
        !is_parameters          TYPE REF TO data OPTIONAL
        !it_filtered_attributes TYPE /bobf/t_frw_name OPTIONAL
      RETURNING
        VALUE(rv_result)        TYPE boole_d .
    METHODS add_internal_message
      IMPORTING
        !io_message TYPE REF TO /bobf/if_frw_message .
    METHODS get_direct_access
      RETURNING
        VALUE(ro_direct_access) TYPE REF TO /bobf/if_frw_direct_access .
    METHODS check_authority_statically
      IMPORTING
        is_auth_context       TYPE /bobf/s_frw_ctx_auth
        io_bopf               TYPE REF TO /bobf/if_frw_service_layer OPTIONAL
        iv_bo_key             TYPE /bobf/obm_bo_key OPTIONAL
      RETURNING
        VALUE(rv_auth_failed) TYPE boolean.

ENDCLASS.



CLASS /BOBF/CL_TRA_SERVICE_MGR IMPLEMENTATION.


  METHOD /bobf/if_tra_clone~clone.
    " Call the frw clone
    DATA: lo_bopf TYPE REF TO /bobf/if_tra_clone.

    lo_bopf ?= mo_bopf.
    mo_bopf_clone ?= lo_bopf->clone( ).

  ENDMETHOD.                    "/bobf/if_tra_clone~clone


  METHOD /bobf/if_tra_clone~destroy_clone.
    CLEAR mo_bopf_clone.
  ENDMETHOD.                    "/BOBF/IF_TRA_CLONE~DESTROY_CLONE


  METHOD /bobf/if_tra_clone~restore_from_clone.
    DATA: lo_bopf TYPE REF TO /bobf/if_tra_clone.
    IF mo_bopf_clone IS BOUND.
      CLEAR mo_bopf.
      mo_bopf = mo_bopf_clone.
      "reset event handler to the new buffer address
      lo_bopf ?= mo_bopf.
      lo_bopf->restore_from_clone( ).
    ENDIF.
    " delete the old mo_bopf_clone
    CLEAR mo_bopf_clone.
  ENDMETHOD.                    "/bobf/if_tra_clone~restore_from_clone


  METHOD /bobf/if_tra_service_manager~check_action.

    DATA:
      lv_privileged_before     TYPE        boole_d,
      ls_frw_action            TYPE        /bobf/s_frw_action,
      ls_plugin                TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lt_message               TYPE        /bobf/cm_frw=>tt_frw,
      lt_failed_key            TYPE        /bobf/t_frw_key,
      lt_failed_key_all        TYPE        /bobf/t_frw_key,
      lt_failed_action_key     TYPE        /bobf/t_frw_key,
      lt_failed_action_key_all TYPE        /bobf/t_frw_key,
      lt_key                   TYPE        /bobf/t_frw_key,
      ls_key                   TYPE        /bobf/s_frw_key,
      lv_skip_core             TYPE        boolean,
      lv_skip                  TYPE        boolean,
      lv_callstack_level       TYPE        i,
      lo_cl_frw_message        TYPE REF TO /bobf/cl_frw_message,
      lo_plugin_message        TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all    TYPE REF TO /bobf/if_frw_message,
      ls_auth_context          TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed           TYPE        boolean.

    " clear export parameters
    CLEAR:
      eo_message,
      et_failed_key,
      et_failed_action_key.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF iv_act_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    lt_key = it_key.

    IF mo_conf->ms_last_action-act_key <> iv_act_key.
      mo_conf->get_act( iv_act_key  = iv_act_key ).
    ENDIF.
    IF mo_conf->ms_last_action-act_cat <> /bobf/if_conf_c=>sc_action_standard.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push check_action call onto the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_check
      IMPORTING
        ev_level = lv_callstack_level
        ev_different_bo = DATA(lv_is_different_bo)
        ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-check_action.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_true.
      et_failed_key = it_key.
    ELSE.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_check_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_check_action(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_act_key              = iv_act_key
              is_parameters           = is_parameters
            IMPORTING
              ev_skip_bo              = lv_skip
              et_failed_key           = lt_failed_key
              et_failed_action_key    = lt_failed_action_key
              eo_message              = lo_plugin_message
            CHANGING
              ct_key                  = lt_key ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.

          LOOP AT lt_failed_key INTO ls_key.
            DELETE lt_key WHERE key = ls_key-key.
          ENDLOOP.
          LOOP AT lt_failed_action_key INTO ls_key.
            DELETE lt_key WHERE key = ls_key-key.
          ENDLOOP.
          INSERT LINES OF lt_failed_key        INTO TABLE lt_failed_key_all.
          INSERT LINES OF lt_failed_action_key INTO TABLE lt_failed_action_key_all.
          CLEAR lt_failed_key.
          CLEAR lt_failed_action_key.

          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " add pre plugin messages to the callstack
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the check_action call
      IF lv_skip_core = abap_false.
        ls_frw_action-act_key    = iv_act_key.
        ls_frw_action-key        = lt_key.
        ls_frw_action-parameters = is_parameters.
        mo_bopf->check_action(
          EXPORTING
            is_action     = ls_frw_action
          IMPORTING
            eo_message    = eo_message
            et_failed_key = et_failed_key ).

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_check_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        INSERT LINES OF lt_failed_key_all        INTO TABLE et_failed_key.
        INSERT LINES OF lt_failed_action_key_all INTO TABLE et_failed_action_key.

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_check_action(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_act_key              = iv_act_key
              is_parameters           = is_parameters
              it_key                  = lt_key
            CHANGING
              ct_failed_key           = et_failed_key
              ct_failed_action_key    = et_failed_action_key
              ct_message              = lt_message ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).

      ENDIF.

    ENDIF.

    " decrease and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    " currently, we do not distinguish between ET_FAILED_KEY and ET_FAILED_ACTION_KEY, but this will be the case in future
    et_failed_action_key = et_failed_key.

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


  ENDMETHOD.                    "/bobf/if_tra_service_manager~check_action


  METHOD /bobf/if_tra_service_manager~check_and_determine.

    DATA:
      lv_privileged_before  TYPE        boole_d,
      lo_frw_change         TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message     TYPE REF TO /bobf/cl_frw_message,
      ls_plugin             TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_change      TYPE REF TO /bobf/if_frw_change,
      lo_plugin_message     TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all TYPE REF TO /bobf/if_frw_message,
      lt_message            TYPE        /bobf/cm_frw=>tt_frw,
      lt_key                TYPE        /bobf/t_frw_key,
      lv_callstack_level    TYPE        i,
      lv_skip_core          TYPE        boolean,
      lv_skip               TYPE        boolean,
      ls_auth_context       TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed        TYPE        boolean.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message,
      ev_rejected.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_key IS INITIAL.
      RETURN.
    ENDIF.

    lt_key = it_key.

    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    IF iv_check_scope <> /bobf/if_frw_c=>sc_scope_local
      AND iv_check_scope <> /bobf/if_frw_c=>sc_scope_substructure.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push the check_and_determin to onto the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_modify
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
       iv_callstack_level = lv_callstack_level
       iv_bo_is_different_in_level = lv_is_different_bo ).


    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-change.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-check_and_determine.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_check_and_determine plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        " loop over pre plugins
        lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_check_and_determine(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_node_key             = iv_node_key
              iv_check_scope          = iv_check_scope
              io_change               = lo_plugin_change
            IMPORTING
              ev_skip_bo              = lv_skip
              eo_message              = lo_plugin_message
            CHANGING
              ct_key                  = lt_key ).
          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " add messages to the callstack
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " add changes to the callstack
        IF lo_plugin_change IS BOUND.
          IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_plugin_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the check_and_determine call
      IF lv_skip_core = abap_false AND lt_key IS NOT INITIAL.
        mo_bopf->check_and_determine(
          EXPORTING
            iv_node_key    = iv_node_key
            it_key         = lt_key
          iv_check_scope = iv_check_scope
        IMPORTING
          eo_change      = lo_frw_change
          eo_message     = eo_message
          ev_rejected    = ev_rejected ).

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_do_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        " create empty change object
        lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_check_and_determine(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_node_key             = iv_node_key
              iv_check_scope          = iv_check_scope
              it_key                  = lt_key
              io_change               = lo_frw_change
            CHANGING
              ct_message              = lt_message ).
        ENDLOOP.

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).

      ENDIF.

    ENDIF.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

    " ensure that always a bound change object is returned
    " (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS REQUESTED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


  ENDMETHOD.                    "/bobf/if_tra_service_manager~check_and_determine


  METHOD /bobf/if_tra_service_manager~check_consistency.

    DATA:
      lv_privileged_before  TYPE        boole_d,
      lo_cl_frw_message     TYPE REF TO /bobf/cl_frw_message,
      ls_plugin             TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_message     TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all TYPE REF TO /bobf/if_frw_message,
      lv_callstack_level    TYPE        i,
      lt_message            TYPE        /bobf/cm_frw=>tt_frw,
      lt_key                TYPE        /bobf/t_frw_key,
      lv_skip_core          TYPE        boolean,
      lv_skip               TYPE        boolean,
      ls_auth_context       TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed        TYPE        boolean.

    " clear export parameters
    CLEAR : eo_message,
            et_inconsistent_key.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_key IS INITIAL.
      RETURN.
    ENDIF.

    lt_key = it_key.

    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    IF iv_check_scope <> /bobf/if_frw_c=>sc_scope_local
      AND iv_check_scope <> /bobf/if_frw_c=>sc_scope_substructure.
      set_application_error( ).
    ENDIF.

    IF iv_check_group IS NOT INITIAL.
      IF mo_conf->ms_last_group-group_key <> iv_check_group.
        mo_conf->get_group( iv_group_key = iv_check_group ).
      ENDIF.
      IF mo_conf->ms_last_group-group_cat <> /bobf/if_conf_c=>sc_group_cat_check.
        set_application_error( ).
      ENDIF.
    ENDIF.

    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.

    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push the check_consistency call onto the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_check
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-check.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-check_consistency.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_check_consistency plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_check_consistency(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_node_key             = iv_node_key
              iv_check_scope          = iv_check_scope
              iv_check_group          = iv_check_group
            IMPORTING
              ev_skip_bo              = lv_skip
              eo_message              = lo_plugin_message
            CHANGING
              ct_key                  = lt_key ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " add messages to the callstack (messages caused by nested service manager calls during pre_do_action)
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the check_consistency call
      IF lv_skip_core = abap_false AND lt_key IS NOT INITIAL.
        mo_bopf->check_consistency(
          EXPORTING
            iv_node_key               = iv_node_key
            it_key                    = lt_key
            iv_check_scope            = iv_check_scope
            iv_check_group            = iv_check_group
            iv_fill_inconsistent_key  = iv_fill_inconsistent_key
          IMPORTING
            eo_message                = eo_message
            et_inconsistent_key       = et_inconsistent_key ).

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_check_consistency plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_check_consistency(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_node_key             = iv_node_key
              iv_check_scope          = iv_check_scope
              iv_check_group          = iv_check_group
              it_key                  = lt_key
            CHANGING
              ct_message              = lt_message ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).

      ENDIF.

    ENDIF.

    " decrease and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~check_consistency


  METHOD /bobf/if_tra_service_manager~convert_altern_key.

    DATA:
      lv_privileged_before TYPE        boole_d,
      lo_frw_change        TYPE REF TO /bobf/if_frw_change,
      ls_plugin            TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lv_callstack_level   TYPE        i,
      lv_skip_core         TYPE        boolean,
      ls_auth_context      TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed       TYPE        boolean.

    " clear export parameters
    CLEAR:
      eo_message,
      et_result,
      et_key,
      eo_change.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_key IS INITIAL.
      RETURN.
    ENDIF.

    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    IF iv_altkey_key NE /bobf/if_frw_c=>sc_alternative_key_key.
      " a source altkey key is handed over (it is not the default parameter value) - check its consistency
      IF mo_conf->ms_last_altkey-altkey_key <> iv_altkey_key.
        mo_conf->get_altkey( iv_altkey_key  = iv_altkey_key ).
      ENDIF.
      IF mo_conf->ms_last_altkey-node_key <> iv_node_key.
        " the handed over source altkey key doesn't refer to an alternative key located at the given node
        set_application_error( ).
      ENDIF.
    ENDIF.

    IF iv_target_altkey_key NE /bobf/if_frw_c=>sc_alternative_key_key.
      " a target altkey key is handed over (it is not the default parameter value) - check its consistency
      IF mo_conf->ms_last_altkey-altkey_key <> iv_target_altkey_key.
        mo_conf->get_altkey( iv_altkey_key  = iv_target_altkey_key ).
      ENDIF.
      IF mo_conf->ms_last_altkey-node_key <> iv_node_key.
        " the handed over target altkey key doesn't refer to an alternative key located at the given node
        set_application_error( ).
      ENDIF.
    ENDIF.

    " increase the callstack: push the convert_altern_key call onto the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
        iv_callstack_level = lv_callstack_level
        iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-convert_altern_key.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins -> no pre plugin possible due to signature contract

      " forward the convert_altern_key call
      IF lv_skip_core = abap_false.
        IF et_key IS SUPPLIED.
          mo_bopf->convert_altern_key(
            EXPORTING
              iv_node_key          = iv_node_key
              iv_altkey_key        = iv_altkey_key
              iv_target_altkey_key = iv_target_altkey_key
              it_key               = it_key
              iv_check_existence   = iv_check_existence
              iv_before_image      = iv_before_image
              iv_invalidate_cache  = iv_invalidate_cache
            IMPORTING
              eo_message           = eo_message
              eo_change            = lo_frw_change
              et_result            = et_result
              et_key               = et_key ).
        ELSE.
          mo_bopf->convert_altern_key(
            EXPORTING
              iv_node_key          = iv_node_key
              iv_altkey_key        = iv_altkey_key
              iv_target_altkey_key = iv_target_altkey_key
              it_key               = it_key
              iv_check_existence   = iv_check_existence
              iv_before_image      = iv_before_image
              iv_invalidate_cache  = iv_invalidate_cache
            IMPORTING
              eo_message           = eo_message
              eo_change            = lo_frw_change
              et_result            = et_result ).
        ENDIF.

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.
        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.


        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.

          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the post_convert_altern_key plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        " create empty change object
        lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

        " loop over post plugins
        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          IF et_key IS SUPPLIED.
            ls_plugin-service_instance->post_convert_altern_key(
               EXPORTING
                iv_bo_key            = mo_conf->ms_obj-bo_key
                iv_node_key          = iv_node_key
                iv_altkey_key        = iv_altkey_key
                iv_target_altkey_key = iv_target_altkey_key
                it_key               = it_key
                iv_check_existence   = iv_check_existence
                iv_before_image      = iv_before_image
                iv_invalidate_cache  = iv_invalidate_cache
                io_change            = lo_frw_change
              CHANGING
                ct_result            = et_result
                ct_key               = et_key ).
          ELSE.
            ls_plugin-service_instance->post_convert_altern_key(
               EXPORTING
                iv_bo_key            = mo_conf->ms_obj-bo_key
                iv_node_key          = iv_node_key
                iv_altkey_key        = iv_altkey_key
                iv_target_altkey_key = iv_target_altkey_key
                it_key               = it_key
                iv_check_existence   = iv_check_existence
                iv_before_image      = iv_before_image
                iv_invalidate_cache  = iv_invalidate_cache
                io_change            = lo_frw_change
              CHANGING
                ct_result            = et_result ).
          ENDIF.
        ENDLOOP.

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.
    ELSE.
      " If the static authority check fails, we fill the et_key with empty value
      IF et_key IS SUPPLIED.
        DO lines( it_key ) TIMES.
          APPEND INITIAL LINE TO et_key.
        ENDDO.
      ENDIF.
    ENDIF.

    " decrease and get the changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

    " ensure that always a bound change object is returned
    " (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS SUPPLIED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


  ENDMETHOD.                    "/bobf/if_tra_service_manager~convert_altern_key


  METHOD /bobf/if_tra_service_manager~do_action.

    DATA:
      lv_privileged_before     TYPE        boole_d,
      ls_frw_action            TYPE        /bobf/s_frw_action,
      lo_frw_change            TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message        TYPE REF TO /bobf/cl_frw_message,
      ls_plugin                TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_change         TYPE REF TO /bobf/if_frw_change,
      lo_plugin_message        TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all    TYPE REF TO /bobf/if_frw_message,
      lt_message               TYPE        /bobf/cm_frw=>tt_frw,
      lt_failed_key            TYPE        /bobf/t_frw_key,
      lt_failed_key_all        TYPE        /bobf/t_frw_key,
      lt_failed_action_key     TYPE        /bobf/t_frw_key,
      lt_failed_action_key_all TYPE        /bobf/t_frw_key,
      lt_key                   TYPE        /bobf/t_frw_key,
      ls_key                   TYPE        /bobf/s_frw_key,
      ls_auth_context          TYPE        /bobf/s_frw_ctx_auth,
      lv_skip_core             TYPE        boolean,
      lv_callstack_level       TYPE        i,
      lv_auth_failed           TYPE        boolean,
      lv_skip                  TYPE        boolean.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message,
      et_failed_key,
      et_failed_action_key,
      et_data.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF iv_act_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    lt_key = it_key.

    mo_conf->get_act( EXPORTING iv_act_key  = iv_act_key
                      IMPORTING es_action = DATA(ls_action_conf) ).
    IF  ls_action_conf-act_cat <> /bobf/if_conf_c=>sc_action_standard.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push the do_action call onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_modify
      IMPORTING
        ev_different_bo        = DATA(lv_is_different_bo)
        ev_level               = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
                              iv_callstack_level          = lv_callstack_level
                              iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-execute.
    ls_auth_context-bo_service = ls_action_conf-act_name.
    ls_auth_context-node_key = ls_action_conf-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_true.
      et_failed_key = it_key.

      IF ls_action_conf-act_cardinality = /bobf/if_conf_c=>sc_act_card_static.
        ev_static_action_failed = abap_true.
      ENDIF.
    ELSE.

      " call pre_do_action plugins
      IF plugins_disabled( ) = abap_false AND mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_do_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        " execute pre_do_action plugins
        lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_do_action(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_act_key              = iv_act_key
              is_parameters           = is_parameters
              io_change               = lo_plugin_change
            IMPORTING
              ev_skip_bo              = lv_skip
              et_failed_key           = lt_failed_key
              et_failed_action_key    = lt_failed_action_key
              ev_static_action_failed = ev_static_action_failed
              eo_message              = lo_plugin_message
            CHANGING
              ct_key                  = lt_key ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.

          LOOP AT lt_failed_key INTO ls_key.
            DELETE lt_key WHERE key = ls_key-key.
          ENDLOOP.
          LOOP AT lt_failed_action_key INTO ls_key.
            DELETE lt_key WHERE key = ls_key-key.
          ENDLOOP.
          INSERT LINES OF lt_failed_key        INTO TABLE lt_failed_key_all.
          INSERT LINES OF lt_failed_action_key INTO TABLE lt_failed_action_key_all.
          CLEAR lt_failed_key.
          CLEAR lt_failed_action_key.

          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " add messages to the callstack
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " add changes to the callstack
        IF lo_plugin_change IS BOUND.
          IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_plugin_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the check_action call
      IF lv_skip_core = abap_false.
        ls_frw_action-act_key    = iv_act_key.
        ls_frw_action-key        = lt_key.
        ls_frw_action-parameters = is_parameters.
        mo_bopf->do_action(
            EXPORTING
              is_action               = ls_frw_action
            IMPORTING
              eo_change               = lo_frw_change
              eo_message              = eo_message
              et_failed_key           = et_failed_key
              ev_static_action_failed = ev_static_action_failed
              et_data                 = et_data ).

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_do_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        INSERT LINES OF lt_failed_key_all        INTO TABLE et_failed_key.
        INSERT LINES OF lt_failed_action_key_all INTO TABLE et_failed_action_key.

        " create empty change object
        lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_do_action(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_act_key              = iv_act_key
              is_parameters           = is_parameters
              it_key                  = lt_key
              io_change               = lo_frw_change
            CHANGING
              ct_failed_key           = et_failed_key
              ct_failed_action_key    = et_failed_action_key
              cv_static_action_failed = ev_static_action_failed
              ct_message              = lt_message ).
        ENDLOOP.

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change(
              EXPORTING
                iv_bo_key = mv_bo_key
                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).

      ENDIF.

    ENDIF.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

    " currently, we do not distinguish between ET_FAILED_KEY and ET_FAILED_ACTION_KEY, but this will be the case in future
    et_failed_action_key = et_failed_key.

    " ensure that always a bound change object is returned
    " (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS REQUESTED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~do_action


  METHOD /bobf/if_tra_service_manager~get_new_key.

    " clear export parameter
    CLEAR:
      ev_key,
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " forward the get_new_key call
    ev_key = /bobf/cl_frw_factory=>get_new_key( ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~get_new_key


  METHOD /bobf/if_tra_service_manager~modify.

    DATA:
      lv_privileged_before       TYPE        boole_d,
      lo_frw_change              TYPE REF TO /bobf/if_frw_change,
      lo_plugin_change           TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message          TYPE REF TO /bobf/cl_frw_message,
      lo_plugin_message          TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all      TYPE REF TO /bobf/if_frw_message,
      ls_plugin                  TYPE /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lt_modification            TYPE /bobf/t_frw_modification,
      lt_message                 TYPE /bobf/cm_frw=>tt_frw,
      lv_callstack_level         TYPE i,
      lv_skip_core               TYPE abap_bool,
      lv_skip                    TYPE abap_bool,
      lv_direct_write_successful TYPE abap_bool.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_modification IS INITIAL.
      RETURN.
    ENDIF.

    " increase the callstack: push the modify call onto the callstack
    mo_compl_transaction_manager->callstack_push( EXPORTING iv_bo_key              = mv_bo_key
                                                            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_modify
                                                  IMPORTING ev_level               = lv_callstack_level
                                                            ev_different_bo        = DATA(lv_is_different_bo) ).

* We currently do not have cases where bypassing the buffer really works (too many
* preconditions which are never met in reality).
* Therefore, the call below is commented for the time being.
* Tests (also disabled) are in /BOBF/CL_TST_DRAFT_BYPASS_CORE
*
*    get_direct_access( )->try_modify( EXPORTING it_modification = it_modification
*                                      IMPORTING eo_change       = lo_frw_change
*                                                ev_successful   = lv_direct_write_successful ).

    IF lv_direct_write_successful = abap_true.

      IF lo_frw_change IS BOUND AND lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ).
        mo_compl_transaction_manager->callstack_add_change( iv_bo_key            = mv_bo_key
                                                            iv_change_only_on_db = abap_true "avoids unnecessary SAVE sequence
                                                            io_change            = lo_frw_change ).
      ENDIF.

    ELSE.

      lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
          iv_callstack_level = lv_callstack_level
          iv_bo_is_different_in_level = lv_is_different_bo ).

      " sort the modify call
      lt_modification = it_modification.
      sort_modify_request( CHANGING ct_modification = lt_modification ).

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " push the pre_modify plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push( iv_bo_key              = mv_bo_key
          iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_modify( EXPORTING iv_bo_key       = mo_conf->ms_obj-bo_key
                                                            io_change       = lo_plugin_change
                                                  IMPORTING eo_message      = lo_plugin_message
                                                            ev_skip_bo      = lv_skip
                                                  CHANGING  ct_modification = lt_modification ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        IF it_modification <> lt_modification.
          sort_modify_request( CHANGING ct_modification = lt_modification ).
        ENDIF.

        " add messages to the callstack
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message( lo_plugin_message_all ).
        ENDIF.

        " add changes to the callstack
        IF lo_plugin_change IS BOUND.
          IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change( iv_bo_key = mv_bo_key
                                                                io_change = lo_plugin_change ).
          ENDIF.
        ENDIF.

        mo_compl_transaction_manager->callstack_pop( ).
      ENDIF.

      " forward the modify call
      IF lv_skip_core = abap_false.
        " Check if sync point is active and then clone the object before doing the modify.
        IF gv_sync_point_active = abap_true AND mo_bopf_clone IS NOT BOUND.
          me->/bobf/if_tra_clone~clone( ).
        ENDIF.

        mo_bopf->modify( EXPORTING it_modification = lt_modification
                         IMPORTING eo_change       = lo_frw_change
                                   eo_message      = eo_message ).

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change( iv_bo_key = mv_bo_key
                                                                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message( lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message( lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_do_action plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push( iv_bo_key              = mv_bo_key
                                                      iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        " create empty change object
        lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_modify( EXPORTING iv_bo_key       = mo_conf->ms_obj-bo_key
                                                             it_modification = lt_modification
                                                             io_change       = lo_frw_change
                                                   CHANGING  ct_message      = lt_message ).
        ENDLOOP.

        " add changes to the callstack
        IF lo_frw_change IS BOUND.
          IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
            mo_compl_transaction_manager->callstack_add_change( iv_bo_key = mv_bo_key
                                                                io_change = lo_frw_change ).
          ENDIF.
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message( eo_message ).
      ENDIF.

      /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


    ENDIF. " lv_direct_write_successful = abap_false.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop( IMPORTING eo_message = eo_message
                                                           eo_change  = eo_change ).

    " ensure that always a bound change object is returned (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS REQUESTED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "/bobf/if_tra_service_manager~modify


  METHOD /bobf/if_tra_service_manager~query.

    DATA:
      lv_privileged_before    TYPE        boole_d,
      lt_failed_key           TYPE        /bobf/t_frw_key,
      ls_key                  TYPE        /bobf/s_frw_key,
      lo_cl_frw_message       TYPE REF TO /bobf/cl_frw_message,
      lo_message              TYPE REF TO /bobf/if_frw_message, "#EC NEEDED
      ls_plugin               TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_message       TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all   TYPE REF TO /bobf/if_frw_message,
      lt_selection_parameters TYPE        /bobf/t_frw_query_selparam,
      lt_filter_key           TYPE        /bobf/t_frw_key,
      lt_message              TYPE        /bobf/cm_frw=>tt_frw,
      lv_skip_core            TYPE        boolean,
      lv_skip                 TYPE        boolean,
      lv_callstack_level      TYPE        i,
      lv_retrieve_before_img  TYPE        boolean,
      ls_auth_context         TYPE        /bobf/s_frw_ctx_auth.

    " clear export parameters
    CLEAR:
      et_key,
      eo_message,
      es_query_info,
      et_data,
      et_key.

    " check import parameters
    IF iv_query_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    lt_selection_parameters = it_selection_parameters.
    lt_filter_key           = it_filter_key.

    IF mo_conf->ms_last_query-query_key <> iv_query_key.
      mo_conf->get_query( iv_query_key = iv_query_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_key <> mo_conf->ms_last_query-node_key.
      mo_conf->get_node( iv_node_key = mo_conf->ms_last_query-node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    " it's okay if either both are filled or both are empty
    IF ( mo_conf->ms_last_query-result_type   IS NOT INITIAL OR
         mo_conf->ms_last_query-result_type_t IS NOT INITIAL )
       AND
       ( mo_conf->ms_last_query-result_type   IS INITIAL OR
         mo_conf->ms_last_query-result_type_t IS INITIAL ).
      set_application_error( ).
    ENDIF.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
        iv_callstack_level = lv_callstack_level
        iv_bo_is_different_in_level = lv_is_different_bo ).


    "set authority context for static check
    ls_auth_context-activity   = /bobf/cl_frw_authority_check=>sc_activity-query.
    ls_auth_context-bo_service = mo_conf->ms_last_query-query_name.
    ls_auth_context-node_key   = mo_conf->ms_last_query-node_key.

    DATA(lv_auth_failed) = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins (only support standard queries - not for generic queries)
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_query plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_query(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_query_key            = iv_query_key
              is_query_options        = is_query_options
              iv_fill_data            = iv_fill_data
              it_requested_attributes = it_requested_attributes
            IMPORTING
              ev_skip_bo              = lv_skip
              eo_message              = lo_plugin_message
            CHANGING
              ct_selection_parameters = lt_selection_parameters
              ct_filter_key           = lt_filter_key ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " add messages to the callstack (messages caused by nested service manager calls during pre_do_action)
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).
      ENDIF.

      "get authority information for dynamic check of query results:
      IF mo_conf->ms_obj-has_authority_checks = abap_true.
        DATA lo_query_authorities TYPE REF TO /bobf/if_frw_authority_query.
        lo_query_authorities = NEW /bobf/cl_frw_authority_query(
          io_bopf            = mo_bopf
          io_conf            = mo_conf
          iv_node_key        = mo_conf->ms_last_query-node_key
          iv_privileged_mode = /bobf/cl_frw_authority_context=>gv_privileged ).
      ENDIF.

      " distinguish into generic queries and node-related queries
      IF mo_conf->ms_last_query-result_type   IS NOT INITIAL AND
         mo_conf->ms_last_query-result_type_t IS NOT INITIAL.

        " forward the query call
        IF lv_skip_core = abap_false.
          IF mo_conf->ms_obj-has_authority_checks = abap_true.
            mo_bopf->query(
              EXPORTING
                iv_query_key             = iv_query_key
                it_filter_key            = it_filter_key
                it_selection_parameters  = it_selection_parameters
                io_query_authorities     = lo_query_authorities
                is_query_options         = is_query_options
                iv_fill_data             = iv_fill_data
                it_requested_attributes  = it_requested_attributes
              IMPORTING
                et_key                  = et_key
                eo_message              = eo_message
                es_query_info           = es_query_info
                et_data                 = et_data ).
          ELSE.
            mo_bopf->query(
            EXPORTING
              iv_query_key             = iv_query_key
              it_filter_key            = it_filter_key
              it_selection_parameters  = it_selection_parameters
              is_query_options         = is_query_options
              iv_fill_data             = iv_fill_data
              it_requested_attributes  = it_requested_attributes
            IMPORTING
              et_key                  = et_key
              eo_message              = eo_message
              es_query_info           = es_query_info
              et_data                 = et_data ).
          ENDIF.

          " add returned messages to the callstack
          IF eo_message IS BOUND.
            lo_cl_frw_message ?= eo_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message( lo_cl_frw_message ).
          ENDIF.

          " add internal messages (e.g. from DAC)
          IF mo_dac_message IS BOUND.
            lo_cl_frw_message ?= mo_dac_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.
          CLEAR mo_dac_message.
        ENDIF.

      ELSE.
        " forward the query call
        IF lv_skip_core = abap_false.
          IF mo_conf->ms_obj-has_authority_checks = abap_true.
            mo_bopf->query(
              EXPORTING
                iv_query_key             = iv_query_key
                it_filter_key            = lt_filter_key
                it_selection_parameters  = lt_selection_parameters
                io_query_authorities     = lo_query_authorities
                is_query_options         = is_query_options
                iv_fill_data             = iv_fill_data
                it_requested_attributes  = it_requested_attributes
              IMPORTING
                et_key                  = et_key
                eo_message              = eo_message
                es_query_info           = es_query_info ).
          ELSE.
            mo_bopf->query(
            EXPORTING
              iv_query_key             = iv_query_key
              it_filter_key            = lt_filter_key
              it_selection_parameters  = lt_selection_parameters
              is_query_options         = is_query_options
              iv_fill_data             = iv_fill_data
              it_requested_attributes  = it_requested_attributes
            IMPORTING
              et_key                  = et_key
              eo_message              = eo_message
              es_query_info           = es_query_info ).
          ENDIF.

          " add returned messages to the callstack
          IF eo_message IS BOUND.
            lo_cl_frw_message ?= eo_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message( lo_cl_frw_message ).
          ENDIF.

          " add internal messages (e.g. from DAC)
          IF mo_dac_message IS BOUND.
            lo_cl_frw_message ?= mo_dac_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.
          CLEAR mo_dac_message.

        ENDIF.

        " if the filling of the requested data is desired
        IF iv_fill_data = abap_true.
          IF mo_conf->ms_last_query-query_key <> iv_query_key.
            mo_conf->get_query( iv_query_key = iv_query_key ).
          ENDIF.

          "during after succesful save, retrieve the current data, not the before image
          lv_retrieve_before_img = boolc( mv_after_succesful_save_active = abap_false ).
          "Authority check has already been executed within execution of the query.
          "Now, the subsequent retrieve is privileged
          DATA(lv_previous_privileged_mode) = /bobf/cl_frw_authority_context=>set_privileged_mode( ).

          me->/bobf/if_tra_service_manager~retrieve(
             EXPORTING
              iv_node_key             = mo_conf->ms_last_query-node_key
              it_key                  = et_key
              iv_before_image         = lv_retrieve_before_img
              iv_fill_data            = abap_true
              iv_invalidate_cache     = abap_false
              it_requested_attributes = it_requested_attributes
            IMPORTING
              eo_message              = lo_message
              " the changes done by the retrieve call after the query call are not delivered:
              " eo_change               = lo_change
              et_data                 = et_data
              et_failed_key           = lt_failed_key ).

          /bobf/cl_frw_authority_context=>restore_privileged_mode( iv_mode = lv_previous_privileged_mode ).

          " subtract the failed keys of the retrieve from the et_key of the query
          LOOP AT et_key INTO ls_key.
            READ TABLE lt_failed_key WITH KEY key_sort COMPONENTS key = ls_key-key TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              DELETE et_key.
            ENDIF.
          ENDLOOP.
        ENDIF.

      ENDIF.


      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack (before post plugin execution)
        lo_plugin_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF lo_plugin_message IS BOUND.
          lo_plugin_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_query plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_query(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_query_key            = iv_query_key
              it_filter_key           = lt_filter_key
              it_selection_parameters = lt_selection_parameters
              is_query_options        = is_query_options
              iv_fill_data            = iv_fill_data
              it_requested_attributes = it_requested_attributes
            CHANGING
              ct_message              = lt_message
              cs_query_info           = es_query_info
              ct_key                  = et_key
              ct_data                 = et_data ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        lo_plugin_message = /bobf/cl_frw_factory=>get_message( ).
        lo_plugin_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = lo_plugin_message ).
      ENDIF.
    ENDIF.

    " decrease query and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~query


  METHOD /bobf/if_tra_service_manager~retrieve.

    DATA:
      lv_privileged_before      TYPE        boole_d,
      lo_frw_change             TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message         TYPE REF TO /bobf/cl_frw_message,
      ls_plugin                 TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_change          TYPE REF TO /bobf/if_frw_change,
      lo_plugin_message         TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all     TYPE REF TO /bobf/if_frw_message,
      lt_message                TYPE        /bobf/cm_frw=>tt_frw,
      lt_failed_key             TYPE        /bobf/t_frw_key,
      lt_failed_key_all         TYPE        /bobf/t_frw_key,
      lt_key                    TYPE        /bobf/t_frw_key,
      ls_key                    TYPE        /bobf/s_frw_key,
      lv_skip_core              TYPE        boolean,
      lv_skip                   TYPE        boolean,
      lv_callstack_level        TYPE        i,
      ls_auth_context           TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed            TYPE        boolean,
      lv_direct_retr_successful TYPE        boolean.

    " clear export parameters
    CLEAR:
      eo_message,
      eo_change,
      et_data,
      et_failed_key.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_key IS INITIAL.
      RETURN.
    ENDIF.

    lt_key = it_key.

    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    IF iv_edit_mode <> /bobf/if_conf_c=>sc_edit_read_only
      AND iv_edit_mode <> /bobf/if_conf_c=>sc_edit_optimistic
      AND iv_edit_mode <> /bobf/if_conf_c=>sc_edit_exclusive.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push retrieve call onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

* We currently do not have cases where bypassing the buffer really works (too many
* preconditions which are never met in reality).
* Therefore, the call below is commented for the time being:
* Tests (also disabled) are in /BOBF/CL_TST_DRAFT_BYPASS_CORE
*
*    get_direct_access( )->try_retrieve( EXPORTING iv_node_key             = iv_node_key
*                                                  it_key                  = it_key
*                                                  iv_before_image         = iv_before_image
*                                                  iv_edit_mode            = iv_edit_mode
*                                                  iv_fill_data            = iv_fill_data
*                                                  iv_invalidate_cache     = iv_invalidate_cache
*                                                  it_requested_attributes = it_requested_attributes
*                                        IMPORTING et_data                 = et_data
*                                                  et_failed_key           = et_failed_key
*                                                  ev_successful           = lv_direct_retr_successful ).

    IF lv_direct_retr_successful = abap_false.

      lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
        iv_callstack_level = lv_callstack_level
        iv_bo_is_different_in_level = lv_is_different_bo ).

      ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
      ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve.
      ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

      lv_auth_failed = check_authority_statically( ls_auth_context ).

      IF lv_auth_failed = abap_true.
        et_failed_key = it_key.
      ELSE.

        " call pre plugins
        IF plugins_disabled( ) = abap_false AND
          mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

          " increase the callstack: push the pre_retrieve plugins execution onto the stack
          mo_compl_transaction_manager->callstack_push(
            EXPORTING
              iv_bo_key              = mv_bo_key
              iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

          lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
          LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
            ls_plugin-service_instance->pre_retrieve(
              EXPORTING
                iv_bo_key               = mo_conf->ms_obj-bo_key
                iv_node_key             = iv_node_key
                iv_before_image         = iv_before_image
                iv_edit_mode            = iv_edit_mode
                iv_fill_data            = iv_fill_data
                iv_invalidate_cache     = iv_invalidate_cache
                it_requested_attributes = it_requested_attributes
                io_change               = lo_plugin_change
              IMPORTING
                ev_skip_bo              = lv_skip
                et_failed_key           = lt_failed_key
                eo_message              = lo_plugin_message
              CHANGING
                ct_key                  = lt_key ).

            IF lv_skip = abap_true.
              lv_skip_core = abap_true.
            ENDIF.

            LOOP AT lt_failed_key INTO ls_key.
              DELETE lt_key WHERE key = ls_key-key.
            ENDLOOP.
            INSERT LINES OF lt_failed_key INTO TABLE lt_failed_key_all.
            CLEAR lt_failed_key.

            IF lo_plugin_message_all IS BOUND.
              lo_plugin_message_all->add( lo_plugin_message ).
            ELSE.
              lo_plugin_message_all = lo_plugin_message.
            ENDIF.
          ENDLOOP.

          " add messages to the callstack
          IF lo_plugin_message_all IS BOUND.
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_plugin_message_all ).
          ENDIF.

          " add changes to the callstack
          IF lo_plugin_change IS BOUND.
            IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_plugin_change ).
            ENDIF.
          ENDIF.

          " decrease callstack
          mo_compl_transaction_manager->callstack_pop( ).

        ENDIF.

        " forward retrieve call
        IF lv_skip_core = abap_false AND lt_key IS NOT INITIAL.
          mo_bopf->retrieve(
            EXPORTING
              iv_node_key             = iv_node_key
              it_key                  = lt_key
            iv_before_image         = iv_before_image
            iv_edit_mode            = iv_edit_mode
            iv_fill_data            = iv_fill_data
            iv_invalidate_cache     = iv_invalidate_cache
            it_requested_attributes = it_requested_attributes
          IMPORTING
            eo_message              = eo_message
            eo_change               = lo_frw_change
            et_data                 = et_data
            et_failed_key           = et_failed_key ).

          " add changes to the callstack
          IF lo_frw_change IS BOUND.
            IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_frw_change ).
            ENDIF.
          ENDIF.

          " add returned messages to the callstack
          IF eo_message IS BOUND.
            lo_cl_frw_message ?= eo_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.

          " add internal messages (e.g. from DAC)
          IF mo_dac_message IS BOUND.
            lo_cl_frw_message ?= mo_dac_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.
          CLEAR mo_dac_message.

        ENDIF.

        " call post plugins
        IF plugins_disabled( ) = abap_false AND
          mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

          " get messages from the callstack
          eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
          IF eo_message IS BOUND.
            eo_message->get( IMPORTING et_message = lt_message ).
          ENDIF.

          " increase the callstack: push the post_retrieve execution onto the stack
          mo_compl_transaction_manager->callstack_push(
            EXPORTING
              iv_bo_key              = mv_bo_key
              iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

          INSERT LINES OF lt_failed_key_all INTO TABLE et_failed_key.

          " create empty change object
          lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

          LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
            ls_plugin-service_instance->post_retrieve(
              EXPORTING
                iv_bo_key               = mo_conf->ms_obj-bo_key
                iv_node_key             = iv_node_key
                it_key                  = lt_key
                iv_before_image         = iv_before_image
                iv_edit_mode            = iv_edit_mode
                iv_fill_data            = iv_fill_data
                iv_invalidate_cache     = iv_invalidate_cache
                it_requested_attributes = it_requested_attributes
                io_change               = lo_frw_change
              CHANGING
                ct_failed_key           = et_failed_key
                ct_data                 = et_data
                ct_message              = lt_message ).
          ENDLOOP.

          " add changes to the callstack
          IF lo_frw_change IS BOUND.
            IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_frw_change ).
            ENDIF.
          ENDIF.

          " decrease callstack
          mo_compl_transaction_manager->callstack_pop( ).

          " set messages to the topmost callstack object
          eo_message = /bobf/cl_frw_factory=>get_message( ).
          eo_message->add_cm( it_message = lt_message ).
          mo_compl_transaction_manager->callstack_set_top_message(
            EXPORTING
              io_message = eo_message ).
        ENDIF.

      ENDIF.

      /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


    ENDIF. "lv_direct_retr_successful = abap_false

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop( IMPORTING eo_message = eo_message
        eo_change  = eo_change ).

    " ensure that always a bound change object is returned
    " (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS REQUESTED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve


  METHOD /bobf/if_tra_service_manager~retrieve_by_association.

    DATA:
      lv_privileged_before      TYPE        boole_d,
      ls_key                    TYPE        /bobf/s_frw_key,
      lt_altkey_result          TYPE        /bobf/t_frw_keyindex,
      ls_altkey_result          TYPE        /bobf/s_frw_keyindex,
      ls_key_link               TYPE        /bobf/s_frw_key_link,
      lv_retrieve_data          TYPE        boole_d,
      lv_lock_after_filtering   TYPE        boole_d,
      lv_edit_mode              TYPE        /bobf/conf_edit_mode,
      lt_requested_attribute    TYPE        /bobf/t_frw_name,
      ls_confro_node            TYPE        /bobf/s_confro_node,
      ls_confro_target_node     TYPE        /bobf/s_confro_node,
      ls_confro_assoc           TYPE        /bobf/s_confro_assoc,
      ls_xbo_binding            TYPE        /bobf/s_confro_assocb,
      lt_retrieve_failed_key    TYPE        /bobf/t_frw_key,
      ls_failed_key             TYPE        /bobf/s_frw_key,
      lv_fill_failed_key        TYPE        boole_d,
      ls_target_key             TYPE        /bobf/s_frw_key,
      ls_confro_altkey          TYPE        /bobf/s_confro_altkey,
      ls_plugin                 TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lv_skip_core              TYPE        boolean,
      lv_skip                   TYPE        boolean,
      lv_callstack_level        TYPE        i,
      lt_failed_key             TYPE        /bobf/t_frw_key,
      lt_key                    TYPE        /bobf/t_frw_key,
      lt_failed_key_all         TYPE        /bobf/t_frw_key,
      lt_message                TYPE        /bobf/cm_frw=>tt_frw,
      ls_auth_context           TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed            TYPE        boolean,
      lt_auth_failed_trg_key    TYPE        /bobf/t_frw_key,
      lo_plugin_change          TYPE REF TO /bobf/if_frw_change,
      lo_plugin_message         TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all     TYPE REF TO /bobf/if_frw_message,
      ls_ref_target_data        TYPE REF TO data,
      lo_confro_target_bo       TYPE REF TO /bobf/if_frw_configuration,
      lo_change                 TYPE REF TO /bobf/if_tra_change, "#EC NEEDED
      lo_frw_change             TYPE REF TO /bobf/if_frw_change,
      lo_target_service_manager TYPE REF TO /bobf/if_tra_service_manager,
      lo_service_manager        TYPE REF TO /bobf/if_tra_service_manager,
      lo_message                TYPE REF TO /bobf/if_frw_message,
      lo_cl_frw_message         TYPE REF TO /bobf/cl_frw_message,
      lt_source_data            TYPE REF TO data,
      lt_target_data            TYPE REF TO data,
      lo_target_conf            TYPE REF TO /bobf/if_frw_configuration,
      lt_target_altkey          TYPE REF TO data,
      ls_target_altkey          TYPE REF TO data,
      lo_target_bopf            TYPE REF TO /bobf/if_frw_service_layer.

    DATA:
      lo_tmp_message             TYPE REF TO /bobf/if_frw_message,
      lt_tmp_message             TYPE        /bobf/cm_frw=>tt_frw,
      lo_tmp_message_cm          TYPE REF TO /bobf/cm_frw,
      lv_filtered_messages       TYPE        boole_d,
      lt_instance_failed_binding TYPE        /bobf/t_frw_key2.

    FIELD-SYMBOLS:
      <lv_key>           TYPE any,
      <lv_target_key>    TYPE any,
      <ls_source_data>   TYPE any,
      <ls_target_altkey> TYPE any,
      <ls_target_data>   TYPE any,
      <lt_target_altkey> TYPE STANDARD TABLE,
      <lt_target_data>   TYPE INDEX TABLE,
      <lt_source_data>   TYPE STANDARD TABLE.

    " clear export parameters
    CLEAR:
      eo_message,
      eo_change,
      et_data,
      et_key_link,
      et_target_key,
      et_failed_key.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF it_key IS INITIAL.
      RETURN.
    ENDIF.

    " get the node's configuration
    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    mo_conf->get_node(
      EXPORTING
        iv_node_key = iv_node_key
      IMPORTING
        es_node     = ls_confro_node ).

    IF ls_confro_node IS INITIAL.
      set_application_error( ).
    ELSEIF ls_confro_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    " get the association's configuration
    IF iv_association IS INITIAL.
      set_application_error( ).
    ENDIF.

    mo_conf->get_assoc(
      EXPORTING
        iv_assoc_key = iv_association
      IMPORTING
        es_assoc     = ls_confro_assoc ).

    IF ls_confro_assoc IS INITIAL.
      set_application_error( ).
    ELSEIF ls_confro_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_lock
        OR ls_confro_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_message
        OR ls_confro_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_property.
      set_application_error( ).
    ENDIF.

    mo_compl_transaction_manager->callstack_push(
       EXPORTING iv_bo_key              = mv_bo_key
                 iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
       IMPORTING ev_level               = lv_callstack_level
                 ev_different_bo        = DATA(lv_is_different_bo)
    ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).

    " check source node
    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-rba_source_node.
    ls_auth_context-node_key = ls_confro_assoc-source_node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.
      " check target node
      ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
      ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-rba_target_node.
      IF ls_confro_assoc-assoc_cat = /bobf/if_conf_c=>sc_assoccat_xbo.
        mo_conf->get_node(
          EXPORTING iv_node_key = ls_confro_assoc-target_node_key
          IMPORTING es_node     = ls_confro_target_node ).
        TRY.
            lo_target_bopf = /bobf/cl_frw_factory=>get_bopf( ls_confro_target_node-ref_bo_key ).
          CATCH /bobf/cx_frw. " target BO doesn't exist...
            set_application_error( ).
        ENDTRY.
        ls_auth_context-node_key = ls_confro_target_node-ref_node_key.
        lv_auth_failed = check_authority_statically( io_bopf         = lo_target_bopf
                                                     iv_bo_key       = ls_confro_target_node-ref_bo_key
                                                     is_auth_context = ls_auth_context ).
      ELSE.
        ls_auth_context-node_key = ls_confro_assoc-target_node_key.
        lv_auth_failed = check_authority_statically( ls_auth_context ).
      ENDIF.
    ENDIF.

    IF lv_auth_failed = abap_true.
      et_failed_key = it_key.
      " decrease the callstack (retrieve_by_association)
      mo_compl_transaction_manager->callstack_pop(
        IMPORTING
          eo_message = eo_message
          eo_change  = eo_change ).
    ELSE.

      " is current association is a cross business association?
      IF ls_confro_assoc-assoc_cat = /bobf/if_conf_c=>sc_assoccat_xbo.

        IF ls_confro_assoc-target_node->ref_bo_key IS INITIAL
          OR ls_confro_assoc-target_node->ref_node_key IS INITIAL.
          " the representation node is not completely maintained - maintain ref_bo_key and ref_node_key
          set_application_error( ).
        ENDIF.

        " check if the association is implemented or shall be resolved by the help of bindings
        READ TABLE ls_confro_assoc-assoc_binding->* WITH KEY from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_cross_bo INTO ls_xbo_binding.
        IF sy-subrc = 0.

********************************************************************************
          " association shall be resolved by the help of bindings
********************************************************************************

          " pre plugins
          lt_key = it_key.

          " call pre_retrieve_by_association plugins
          IF plugins_disabled( ) = abap_false AND
            mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

            " increase the callstack: push the pre_retrieve_by_association execution onto the stack
            mo_compl_transaction_manager->callstack_push(
              EXPORTING
                iv_bo_key              = mv_bo_key
                iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

            " execute pre_retrieve_by_association plugins
            lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
            LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.

              ls_plugin-service_instance->pre_retrieve_by_association(
                EXPORTING
                  iv_bo_key               = mo_conf->ms_obj-bo_key
                  iv_node_key             = iv_node_key
                  iv_association          = iv_association
                  is_parameters           = is_parameters
                  it_filtered_attributes  = it_filtered_attributes
                  iv_before_image         = iv_before_image
                  iv_edit_mode            = iv_edit_mode
                  iv_fill_data            = iv_fill_data
                  iv_invalidate_cache     = iv_invalidate_cache
                  it_requested_attributes = it_requested_attributes
                  io_change               = lo_plugin_change
                IMPORTING
                  ev_skip_bo              = lv_skip
                  eo_message              = lo_plugin_message
                  et_failed_key           = lt_failed_key
                CHANGING
                  ct_key                  = lt_key ).

              IF lv_skip = abap_true.
                lv_skip_core = abap_true.
              ENDIF.

              LOOP AT lt_failed_key INTO ls_key.
                DELETE lt_key WHERE key = ls_key-key.
              ENDLOOP.
              INSERT LINES OF lt_failed_key INTO TABLE lt_failed_key_all.
              CLEAR lt_failed_key.

              IF lo_plugin_message_all IS BOUND.
                lo_plugin_message_all->add( lo_plugin_message ).
              ELSE.
                lo_plugin_message_all = lo_plugin_message.
              ENDIF.
            ENDLOOP.

            " add changes to the callstack
            IF lo_plugin_change IS BOUND.
              IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_plugin_change ).
              ENDIF.
            ENDIF.

            " add messages to the callstack (messages caused by nested service manager calls during pre_do_action)
            IF lo_plugin_message_all IS BOUND.
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_plugin_message_all ).
            ENDIF.

            " decrease callstack
            mo_compl_transaction_manager->callstack_pop( ).

          ENDIF.

          " forward retrieve_by_association (with filldata = false) to the association's implementation
          IF lv_skip_core = abap_false.

            " ____________________________________________________________________
            " check authorization on source node:
            " this is implicitely processed by subsequent call of mo_bopf->retrieve

            " read source instance data
            IF ls_confro_node-data_table_type IS NOT INITIAL.
              CREATE DATA lt_source_data TYPE (ls_confro_node-data_table_type).
              ASSIGN lt_source_data->* TO <lt_source_data>.
            ELSEIF ls_confro_node-data_type IS NOT INITIAL.
              CREATE DATA lt_source_data TYPE TABLE OF (ls_confro_node-data_type).
              ASSIGN lt_source_data->* TO <lt_source_data>.
            ELSE.
              " neither table type nor data type maintained
              set_application_error( ).
            ENDIF.

            CLEAR lt_requested_attribute.
            INSERT ls_xbo_binding-from_binding INTO TABLE lt_requested_attribute.

            " <correction>
            " Corrective Measure:  0120061532 0001230736 2014
            " use service manager to include instances delivered by plugins (e.g. archiving)
            DATA lo_tra_change TYPE REF TO /bobf/if_tra_change.
            me->/bobf/if_tra_service_manager~retrieve(
                  EXPORTING
                    iv_node_key             = iv_node_key
                    it_key                  = lt_key
                    iv_before_image         = iv_before_image
                    iv_edit_mode            = iv_edit_mode
                    iv_fill_data            = abap_true
                    iv_invalidate_cache     = iv_invalidate_cache
                    it_requested_attributes = lt_requested_attribute
                  IMPORTING
                    eo_message              = lo_message
                eo_change               = lo_tra_change
                    et_data                 = <lt_source_data>
                    et_failed_key           = et_failed_key ).
            lo_tra_change->get_bo_changes(
              EXPORTING
                iv_bo_key = mv_bo_key
              IMPORTING
                eo_change = lo_frw_change ).
            " </correction>

            " add returned changes to the callstack
            IF lo_frw_change IS BOUND.
              IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_frw_change ).
              ENDIF.
            ENDIF.

            " add returned messages to the callstack
            IF lo_message IS BOUND.
              lo_cl_frw_message ?= lo_message.
              lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_cl_frw_message ).
            ENDIF.

            " add internal messages (e.g. from DAC)
            IF mo_dac_message IS BOUND.
              lo_cl_frw_message ?= mo_dac_message.
              lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_cl_frw_message ).
            ENDIF.
            CLEAR mo_dac_message.

            " check if cross BO association's target node attribute is KEY - performance optimization possible (no altkey conversion necessary)
            IF ls_xbo_binding-attribute = /bobf/if_conf_c=>sc_attribute_name_key.

              " target node attribute of the binding is KEY
              " extract target node's instance keys out of source instance data
              LOOP AT <lt_source_data> ASSIGNING <ls_source_data>.
                ASSIGN COMPONENT /bobf/if_conf_c=>sc_attribute_name_key OF STRUCTURE <ls_source_data> TO <lv_key>.
                IF sy-subrc = 0 AND <lv_key> IS NOT INITIAL.
                  ASSIGN COMPONENT ls_xbo_binding-from_binding OF STRUCTURE <ls_source_data> TO <lv_target_key>.
                  IF sy-subrc = 0.
                    IF <lv_target_key> IS NOT INITIAL.
                      " get target instance key
                      ls_target_key-key = <lv_target_key>.
                      INSERT ls_target_key INTO TABLE et_target_key.
                      " build key link table
                      ls_key_link-source_key = <lv_key>.
                      ls_key_link-target_key = <lv_target_key>.
                      INSERT ls_key_link INTO TABLE et_key_link.
                    ENDIF.
                  ELSE.
                    " source node does not consist of the attribute defined in the binding
                    set_application_error( ).
                  ENDIF.
                ELSE.
                  " source instance KEY field is initial or source node does not consist of the KEY attribute at all
                  set_application_error( ).
                ENDIF.
              ENDLOOP.

            ELSE.

              " target node attribute of the binding is a real ALTKEY
              " execute convert_altern_key

              " get altkey configuration
              TRY.
                  lo_target_conf = /bobf/cl_frw_factory=>get_configuration( iv_bo_key = ls_confro_assoc-target_node->ref_bo_key ).
                CATCH /bobf/cx_frw.
                  set_application_error( ).
              ENDTRY.
              IF ls_xbo_binding-altkey IS INITIAL.
                " binding must contain altkey
                set_application_error( ).
              ENDIF.
              lo_target_conf->get_altkey(
                EXPORTING
                  iv_node_key    = ls_confro_assoc-target_node->ref_node_key
                  iv_altkey_key  = ls_xbo_binding-altkey
                IMPORTING
                  es_altkey      = ls_confro_altkey ).

              " >>> internal ticket 0000057141 2014
              " IF ls_confro_altkey-altkey_is_structured = abap_true.
              "   " cross BO association binding is only allowed with non-structured altkeys
              "   set_application_error( ).
              " ENDIF.

              IF ls_confro_altkey-data_type IS INITIAL.
                " data type of the altkey not maintained
                set_application_error( ).
              ENDIF.

              " extract target altkeys out of source instance data
              CREATE DATA ls_target_altkey TYPE (ls_confro_altkey-data_type).
              ASSIGN ls_target_altkey->* TO <ls_target_altkey>.
              IF ls_confro_altkey-data_table_type IS NOT INITIAL.
                CREATE DATA lt_target_altkey TYPE (ls_confro_altkey-data_table_type).
                ASSIGN lt_target_altkey->* TO <lt_target_altkey>.
              ELSE.
                CREATE DATA lt_target_altkey LIKE TABLE OF <ls_target_altkey>.
                ASSIGN lt_target_altkey->* TO <lt_target_altkey>.
              ENDIF.
              LOOP AT <lt_source_data> ASSIGNING <ls_source_data>.
                " >>> internal ticket 0000057141 2014
                IF ls_confro_altkey-altkey_is_structured = abap_true.
                  " the following is intended to work only for accidentially configured structured altkeys with *one* component.
                  " in this special case the altkey name equals the name of the component. *real* structured altkeys don't work! ...
                  FIELD-SYMBOLS <lv_target_altkey_component> TYPE any.
                  ASSIGN COMPONENT ls_confro_altkey-altkey_name OF STRUCTURE <ls_target_altkey> TO <lv_target_altkey_component>.
                  IF sy-subrc <> 0.
                    " seems not to be the special case...
                    set_application_error( ).
                  ENDIF.
                  FIELD-SYMBOLS <lv_source_component> TYPE any.
                  ASSIGN COMPONENT ls_xbo_binding-from_binding OF STRUCTURE <ls_source_data> TO <lv_source_component>.
                  <lv_target_altkey_component> = <lv_source_component>.
                ELSE.
                  " <<<
                  ASSIGN COMPONENT ls_xbo_binding-from_binding OF STRUCTURE <ls_source_data> TO <ls_target_altkey>.
                ENDIF.
                IF sy-subrc = 0.
                  INSERT <ls_target_altkey> INTO TABLE <lt_target_altkey>.
                ELSE.
                  " source node does not consist of the attribute defined in the 'from binding' part of the binding
                  set_application_error( ).
                ENDIF.
              ENDLOOP.

              " convert alternative keys on the target node
              lo_target_service_manager = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( iv_bo_key = ls_confro_assoc-target_node->ref_bo_key ).
              lo_target_service_manager->convert_altern_key(
                EXPORTING
                  iv_node_key          = ls_confro_assoc-target_node->ref_node_key
                  iv_altkey_key        = ls_confro_altkey-altkey_key
                  iv_target_altkey_key = /bobf/if_frw_c=>sc_alternative_key_key
                  it_key               = <lt_target_altkey>
                  iv_before_image      = iv_before_image
                  iv_invalidate_cache  = iv_invalidate_cache
                IMPORTING
                  eo_change            = lo_change
                  et_result            = lt_altkey_result ).

              " build et_key_link and et_target_key
              LOOP AT <lt_source_data> ASSIGNING <ls_source_data>.
                ASSIGN COMPONENT /bobf/if_conf_c=>sc_attribute_name_key OF STRUCTURE <ls_source_data> TO <lv_key>.
                IF sy-subrc = 0.
                  LOOP AT lt_altkey_result INTO ls_altkey_result WHERE index = sy-tabix.
                    IF ls_altkey_result-key IS NOT INITIAL.
                      " this source entry has an altkey
                      ls_key_link-source_key = <lv_key>.
                      ls_key_link-target_key = ls_altkey_result-key.
                      INSERT ls_key_link INTO TABLE et_key_link.
                      ls_target_key-key = ls_altkey_result-key.
                      INSERT ls_target_key INTO TABLE et_target_key.
                    ENDIF.
                  ENDLOOP.
                ELSE.
                  " the attribute defined in the binding must exist on the source node
                  set_application_error( ).
                ENDIF.
              ENDLOOP.
            ENDIF.

            " ____________________________________________________________________
            " check authorization on target node
            mo_conf->get_node(
              EXPORTING iv_node_key = ls_confro_assoc-target_node_key
              IMPORTING es_node     = ls_confro_target_node ).
            TRY.
                lo_target_bopf = /bobf/cl_frw_factory=>get_bopf( ls_confro_target_node-ref_bo_key ).
              CATCH /bobf/cx_frw. " target BO doesn't exist...
                set_application_error( ).
            ENDTRY.
            lo_target_bopf->check_authority(
              EXPORTING
                is_ctx        = VALUE #( activity            = /bobf/cl_frw_authority_check=>sc_activity-display
                                         activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-rba_target_node
                                         bo_service          = space
                                         node_key            = ls_confro_target_node-ref_node_key )
                it_key        = et_target_key
              IMPORTING
                et_failed_key = lt_auth_failed_trg_key
            ).
            " update exporting tables for key link, target keys and failed keys
            IF lt_auth_failed_trg_key IS NOT INITIAL.
              LOOP AT lt_auth_failed_trg_key INTO ls_key.
                LOOP AT et_key_link INTO ls_key_link USING KEY target_key WHERE target_key = ls_key-key.
                  DELETE et_key_link USING KEY loop_key.
                  ls_failed_key-key = ls_key_link-source_key.
                  APPEND ls_failed_key TO et_failed_key.
                ENDLOOP.
                DELETE et_target_key USING KEY key_sort WHERE key = ls_key-key.
              ENDLOOP.
              SORT et_failed_key.
              DELETE ADJACENT DUPLICATES FROM et_failed_key.
            ENDIF.

          ENDIF.

          " retrieve target instance data if necessary (either iv_fill_data is true or constant/assoc bindings exist)
          lv_retrieve_data = iv_fill_data.
          IF lv_retrieve_data = abap_false.
            READ TABLE ls_confro_assoc-assoc_binding->* WITH KEY from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_filter TRANSPORTING NO FIELDS.
            IF sy-subrc = 0 AND ls_confro_assoc-param_data_type IS NOT INITIAL.
              lv_retrieve_data = abap_true.
              lv_lock_after_filtering = abap_true.
            ENDIF.
            READ TABLE ls_confro_assoc-assoc_binding->* WITH KEY from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_constant TRANSPORTING NO FIELDS.
            IF sy-subrc = 0.
              lv_retrieve_data = abap_true.
              lv_lock_after_filtering = abap_true.
            ENDIF.
          ENDIF.
          " retrieve target instance data, if IV_EDIT_MODE isn't read-only, so that target instances get locked // internal ticket 718243 2014...
          IF iv_edit_mode <> /bobf/if_conf_c=>sc_edit_read_only.
            lv_retrieve_data = abap_true.
          ENDIF.
          IF lv_retrieve_data = abap_true.

            " retrieve all target instance data
            TRY.
                lo_confro_target_bo = /bobf/cl_frw_factory=>get_configuration( iv_bo_key = ls_confro_assoc-target_node->ref_bo_key ).
              CATCH /bobf/cx_frw.
                set_application_error( ).
            ENDTRY.
            lo_confro_target_bo->get_node(
              EXPORTING
                iv_node_key = ls_confro_assoc-target_node->ref_node_key
              IMPORTING
                es_node     = ls_confro_target_node ).

            IF ls_confro_target_node-data_table_type IS NOT INITIAL.
              CREATE DATA lt_target_data TYPE (ls_confro_target_node-data_table_type).
              ASSIGN lt_target_data->* TO <lt_target_data>.
            ELSEIF ls_confro_target_node-data_type IS NOT INITIAL.
              CREATE DATA lt_target_data TYPE STANDARD TABLE OF (ls_confro_target_node-data_type).
              ASSIGN lt_target_data->* TO <lt_target_data>.
            ELSE.
              " neither a combined structure nor a table type is maintained on the binding's target node
              set_application_error( ).
            ENDIF.

            " delete duplicated keys
            SORT et_target_key.
            DELETE ADJACENT DUPLICATES FROM et_target_key.

            " ITM 1055518 2013 (performance)...
            CLEAR lt_requested_attribute.
            IF it_requested_attributes IS NOT INITIAL.
              APPEND LINES OF it_requested_attributes TO lt_requested_attribute.
              FIELD-SYMBOLS <ls_assoc_binding> TYPE /bobf/s_confro_assocb.
              LOOP AT ls_confro_assoc-assoc_binding->* ASSIGNING <ls_assoc_binding>
                WHERE from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_filter
                   OR from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_constant. "#EC CI_SORTSEQ
                APPEND <ls_assoc_binding>-attribute TO lt_requested_attribute.
              ENDLOOP.
              SORT lt_requested_attribute.
              DELETE ADJACENT DUPLICATES FROM lt_requested_attribute.
            ENDIF.

            IF lv_lock_after_filtering = abap_true.
              "in case of filtering read without locking to prevent too many locks (inc 0120050410 0000049953 2014)
              lv_edit_mode = /bobf/if_conf_c=>sc_edit_read_only.
            ELSE.
              lv_edit_mode = iv_edit_mode.
            ENDIF.

            lo_target_service_manager = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( iv_bo_key = ls_confro_assoc-target_node->ref_bo_key ).
            lo_target_service_manager->retrieve(
              EXPORTING
                iv_node_key     = ls_confro_assoc-target_node->ref_node_key
                it_key          = et_target_key
                iv_before_image = iv_before_image
                iv_edit_mode        = lv_edit_mode
                iv_invalidate_cache = iv_invalidate_cache
                it_requested_attributes = lt_requested_attribute " ITM 1055518 2013 (performance)...
              IMPORTING
                eo_message      = lo_message
                eo_change       = lo_change
                et_data         = <lt_target_data>
                et_failed_key   = lt_retrieve_failed_key ).

            " delete all key_links of the retrieve_by_association call, which target to a key, which has failed the retrieve call.
            IF lt_retrieve_failed_key IS NOT INITIAL.
              LOOP AT et_key_link INTO ls_key_link.
                READ TABLE lt_retrieve_failed_key WITH KEY key_sort COMPONENTS key = ls_key_link-target_key TRANSPORTING NO FIELDS.
                IF sy-subrc = 0.
                  DELETE et_key_link.
                ENDIF.
              ENDLOOP.
            ENDIF.

            " remove also non existing target instance keys from et_target_key ???

            " apply bindings on the retrieved target data
            LOOP AT <lt_target_data> REFERENCE INTO ls_ref_target_data.
              IF evaluate_association_bindings(
                  is_assocb              = ls_confro_assoc-assoc_binding
                  is_data                = ls_ref_target_data
                  is_parameters          = is_parameters
                  it_filtered_attributes = it_filtered_attributes ) = abap_false.
                ASSIGN ls_ref_target_data->* TO <ls_target_data>.
                IF sy-subrc = 0.
                  ASSIGN COMPONENT /bobf/if_conf_c=>sc_attribute_name_key OF STRUCTURE <ls_target_data> TO <lv_key>.
                  ls_key-key = <lv_key>.
                  IF sy-subrc = 0 AND <lv_key> IS NOT INITIAL.
                    " exclude instance from results
                    ##primkey[target_key]
                    DELETE et_key_link WHERE target_key = ls_key-key. "#EC CI_SORTSEQ
                    ##primkey[target_key]
                    DELETE et_target_key WHERE key = ls_key-key.
                    DELETE <lt_target_data>.
                    " remember target instances failed the binding conditions
                    " (in order to remove corresponding locking messages related to them)
                    INSERT ls_key-key INTO TABLE lt_instance_failed_binding.
                  ELSE.
                    set_application_error( ).
                  ENDIF.
                ELSE.
                  set_application_error( ).
                ENDIF.
              ENDIF.
            ENDLOOP.

            IF lv_lock_after_filtering = abap_true AND iv_edit_mode <> /bobf/if_conf_c=>sc_edit_read_only.
              "the filtered result is not yet locked. Do this now.
              lo_target_service_manager->retrieve(
                EXPORTING
                  iv_node_key             = ls_confro_assoc-target_node->ref_node_key
                  it_key                  = et_target_key
                  iv_before_image         = iv_before_image
                  iv_edit_mode            = iv_edit_mode
                  iv_invalidate_cache     = iv_invalidate_cache
                  it_requested_attributes = lt_requested_attribute
                IMPORTING
                  eo_message      = lo_message
                  eo_change       = lo_change
                  et_data         = <lt_target_data>
                  et_failed_key   = lt_retrieve_failed_key ).
            ENDIF.

            " remove lock failed messages for instances, which do not fulfill the binding
            " condition and thus are filtered out. only lock failed messages related to instances,
            " which are part of the result should be there

            IF iv_edit_mode NE /bobf/if_conf_c=>sc_edit_read_only.
              " otherwise there wouldn't be any lock error messages

              " get the current messages from the callstack
              lo_tmp_message = mo_compl_transaction_manager->callstack_get_top_message( ).
              IF lo_tmp_message IS BOUND.

                " get all messages
                lo_tmp_message->get( IMPORTING et_message = lt_tmp_message ).

                " remember if something has been changed
                lv_filtered_messages = abap_false.

                " check messages if they are related to filtered out instances
                LOOP AT lt_tmp_message INTO lo_tmp_message_cm.
                  IF lo_tmp_message_cm->if_t100_message~t100key-msgid = '/BOBF/FRW_COMMON'
                    AND lo_tmp_message_cm->if_t100_message~t100key-msgno = '101'.
                    " it is a lock error message
                    IF lo_tmp_message_cm->ms_origin_location-node_key = ls_confro_assoc-target_node->ref_node_key
                      AND lo_tmp_message_cm->ms_origin_location-bo_key = ls_confro_assoc-target_node->ref_bo_key.
                      " related to the same target node and BO
                      READ TABLE lt_instance_failed_binding TRANSPORTING NO FIELDS
                           WITH KEY key_sort COMPONENTS table_line = lo_tmp_message_cm->ms_origin_location-key.
                      IF sy-subrc = 0.
                        " this message is related to an instance, which is filtered out by binding, thus remove
                        DELETE lt_tmp_message.
                        lv_filtered_messages = abap_true.
                      ENDIF.
                    ENDIF.
                  ENDIF.
                ENDLOOP.

                IF lv_filtered_messages = abap_true.
                  " some lock messages are filtered thus put the reduced list of messages onto the callstack
                  lo_tmp_message = /bobf/cl_frw_factory=>get_message( ).
                  lo_tmp_message->add_cm( it_message = lt_tmp_message ).
                  mo_compl_transaction_manager->callstack_set_top_message(
                    EXPORTING
                      io_message = lo_tmp_message ).
                ENDIF.
              ENDIF.
            ENDIF.

            " return data which have survived binding conditions
            IF et_data IS REQUESTED AND iv_fill_data = abap_true.
              et_data = <lt_target_data>.
            ENDIF.
            DELETE et_target_key WHERE key IS INITIAL.
          ELSE.

            " retrieving the target data is not necessary

            " existence check of the target instances
            " if KEY is the target attribut, the target instance keys are read out of the source node without checking yet
            IF ls_xbo_binding-attribute = /bobf/if_conf_c=>sc_attribute_name_key.
              " convert alternative keys on the target node
              lo_target_service_manager = /bobf/cl_tra_serv_mgr_factory=>get_service_manager( iv_bo_key = ls_confro_assoc-target_node->ref_bo_key ).
              lo_target_service_manager->retrieve(
                EXPORTING
                  iv_node_key     = ls_confro_assoc-target_node->ref_node_key
                  it_key          = et_target_key
                  iv_fill_data    = abap_false
                  iv_before_image = iv_before_image
                  iv_edit_mode        = iv_edit_mode
                  iv_invalidate_cache = iv_invalidate_cache
                IMPORTING
                  eo_message      = lo_message
                  eo_change       = lo_change
                  et_failed_key   = lt_retrieve_failed_key ).

              " delete all key_links of the retrieve_by_association call, which target to a key, which has failed the retrieve call.
              LOOP AT lt_retrieve_failed_key INTO ls_failed_key.
                ##primkey[target_key]
                DELETE et_key_link WHERE target_key = ls_failed_key-key. "#EC CI_SORTSEQ
                ##primkey[target_key]
                DELETE et_target_key WHERE key = ls_failed_key-key.
              ENDLOOP.
            ENDIF.

            " return only keys of target instances (data is not necessary)
            DELETE et_target_key WHERE key IS INITIAL.

          ENDIF.

          " call post_retrieve_by_association
          IF plugins_disabled( ) = abap_false AND
            mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

            " get messages from the callstack
            eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
            IF eo_message IS BOUND.
              eo_message->get( IMPORTING et_message = lt_message ).
            ENDIF.

            " increase the callstack: push the post_retrieve_by_association plugins execution onto the stack
            mo_compl_transaction_manager->callstack_push(
              EXPORTING
                iv_bo_key              = mv_bo_key
                iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

            INSERT LINES OF lt_failed_key_all INTO TABLE et_failed_key.

            " create empty change object
            lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

            LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
              ls_plugin-service_instance->post_retrieve_by_association(
                EXPORTING
                  iv_bo_key               = mo_conf->ms_obj-bo_key
                  iv_node_key             = iv_node_key
                  it_key                  = lt_key
                  iv_association          = iv_association
                  is_parameters           = is_parameters
                  it_filtered_attributes  = it_filtered_attributes
                  iv_before_image         = iv_before_image
                  iv_edit_mode            = iv_edit_mode
                  iv_fill_data            = iv_fill_data
                  iv_invalidate_cache     = iv_invalidate_cache
                  it_requested_attributes = it_requested_attributes
                  io_change               = lo_frw_change
                CHANGING
                  ct_key_link             = et_key_link
                  ct_target_key           = et_target_key
                  ct_failed_key           = et_failed_key
                  ct_data                 = et_data
                  ct_message              = lt_message ).
            ENDLOOP.

            " add changes to the callstack
            IF lo_frw_change IS BOUND.
              IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_frw_change ).
              ENDIF.
            ENDIF.

            " decrease callstack
            mo_compl_transaction_manager->callstack_pop( ).

            " set messages to the topmost callstack object
            eo_message = /bobf/cl_frw_factory=>get_message( ).
            eo_message->add_cm( it_message = lt_message ).
            mo_compl_transaction_manager->callstack_set_top_message(
              EXPORTING
                io_message = eo_message ).
          ENDIF.

          " decrease callstack RBA
          mo_compl_transaction_manager->callstack_pop(
            IMPORTING
              eo_message = eo_message
              eo_change  = eo_change ).


        ELSE.

********************************************************************************
          " implemented cross BO association
********************************************************************************
          IF et_failed_key IS REQUESTED.
            lv_fill_failed_key = abap_true.
          ENDIF.

          " pre plugins
          lt_key = it_key.

          " call pre_retrieve_by_association plugins
          IF plugins_disabled( ) = abap_false AND
            mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

            " increase the callstack: push the pre_retrieve_by_association execution onto the stack
            mo_compl_transaction_manager->callstack_push(
              EXPORTING
                iv_bo_key              = mv_bo_key
                iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

            " execute pre_retrieve_by_association plugins
            lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
            LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.

              ls_plugin-service_instance->pre_retrieve_by_association(
                EXPORTING
                  iv_bo_key               = mo_conf->ms_obj-bo_key
                  iv_node_key             = iv_node_key
                  iv_association          = iv_association
                  is_parameters           = is_parameters
                  it_filtered_attributes  = it_filtered_attributes
                  iv_before_image         = iv_before_image
                  iv_edit_mode            = iv_edit_mode
                  iv_fill_data            = iv_fill_data
                  iv_invalidate_cache     = iv_invalidate_cache
                  it_requested_attributes = it_requested_attributes
                  io_change               = lo_plugin_change
                IMPORTING
                  ev_skip_bo              = lv_skip
                  eo_message              = lo_plugin_message
                  et_failed_key           = lt_failed_key
                CHANGING
                  ct_key                  = lt_key ).

              IF lv_skip = abap_true.
                lv_skip_core = abap_true.
              ENDIF.

              LOOP AT lt_failed_key INTO ls_key.
                DELETE lt_key WHERE key = ls_key-key.
              ENDLOOP.
              INSERT LINES OF lt_failed_key INTO TABLE lt_failed_key_all.
              CLEAR lt_failed_key.

              IF lo_plugin_message_all IS BOUND.
                lo_plugin_message_all->add( lo_plugin_message ).
              ELSE.
                lo_plugin_message_all = lo_plugin_message.
              ENDIF.
            ENDLOOP.

            " add messages to the callstack
            IF lo_plugin_message_all IS BOUND.
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_plugin_message_all ).
            ENDIF.

            " add changes to the callstack
            IF lo_plugin_change IS BOUND.
              IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_plugin_change ).
              ENDIF.
            ENDIF.

            " add internal messages (e.g. from DAC)
            IF mo_dac_message IS BOUND.
              lo_cl_frw_message ?= mo_dac_message.
              lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                 io_message = lo_cl_frw_message ).
            ENDIF.
            CLEAR mo_dac_message.

            " decrease callstack
            mo_compl_transaction_manager->callstack_pop( ).

          ENDIF.

          " forward retrieve_by_association (with filldata = false) to the association's implementation
          IF lv_skip_core = abap_false.

            " ____________________________________________________________________
            " check authorization on source node:
            " this is implicitely processed by subsequent call of mo_bopf->retrieve_by_association

            mo_bopf->retrieve_by_association(
              EXPORTING
              iv_node_key             = iv_node_key
              it_key                  = lt_key
              iv_association          = iv_association
              is_parameters           = is_parameters
              it_filtered_attributes  = it_filtered_attributes
              iv_fill_data            = abap_false
              iv_before_image         = iv_before_image
              iv_invalidate_cache     = iv_invalidate_cache
              iv_edit_mode            = iv_edit_mode
              iv_fill_failed_key      = lv_fill_failed_key
              it_requested_attributes = it_requested_attributes
            IMPORTING
              eo_message              = lo_message
              eo_change               = lo_frw_change
              et_key_link             = et_key_link
              et_target_key           = et_target_key
              et_failed_key           = et_failed_key ).

            " add returned changes to the callstack
            IF lo_frw_change IS BOUND.
              IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_frw_change ).
              ENDIF.
            ENDIF.

            " add returned messages to the callstack
            IF lo_message IS BOUND.
              lo_cl_frw_message ?= lo_message.
              lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_cl_frw_message ).
            ENDIF.

            " add internal messages (e.g. from DAC)
            IF mo_dac_message IS BOUND.
              lo_cl_frw_message ?= mo_dac_message.
              lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
              mo_compl_transaction_manager->callstack_add_message(
                EXPORTING
                  io_message = lo_cl_frw_message ).
            ENDIF.
            CLEAR mo_dac_message.

            " ____________________________________________________________________
            " check authorization on target node
            mo_conf->get_node(
              EXPORTING iv_node_key = ls_confro_assoc-target_node_key
              IMPORTING es_node     = ls_confro_target_node ).
            TRY.
                lo_target_bopf = /bobf/cl_frw_factory=>get_bopf( ls_confro_target_node-ref_bo_key ).
              CATCH /bobf/cx_frw. " target BO doesn't exist...
                set_application_error( ).
            ENDTRY.
            lo_target_bopf->check_authority(
              EXPORTING
                is_ctx        = VALUE #( activity            = /bobf/cl_frw_authority_check=>sc_activity-display
                                         activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-rba_target_node
                                         bo_service          = space
                                         node_key            = ls_confro_target_node-ref_node_key )
                it_key        = et_target_key
              IMPORTING
                et_failed_key = lt_auth_failed_trg_key
            ).
            " update exporting tables for key link, target keys and failed keys
            IF lt_auth_failed_trg_key IS NOT INITIAL.
              LOOP AT lt_auth_failed_trg_key INTO ls_key.
                LOOP AT et_key_link INTO ls_key_link USING KEY target_key WHERE target_key = ls_key-key.
                  DELETE et_key_link USING KEY loop_key.
                  ls_failed_key-key = ls_key_link-source_key.
                  APPEND ls_failed_key TO et_failed_key.
                ENDLOOP.
                DELETE et_target_key USING KEY key_sort WHERE key = ls_key-key.
              ENDLOOP.
              SORT et_failed_key.
              DELETE ADJACENT DUPLICATES FROM et_failed_key.
            ENDIF.

          ENDIF.

          IF iv_fill_data = abap_false.
            CLEAR et_data.
          ELSE.
            " cross BO association and iv_fill_data = abap_true => retrieve target instance data
            " get service manager of the target BO
            /bobf/cl_tra_serv_mgr_factory=>get_service_manager(
              EXPORTING
                iv_bo_key          = ls_confro_assoc-target_node->ref_bo_key
              RECEIVING
                eo_service_manager = lo_service_manager ).

            " execute the retrieve to fill data on the target BO and target node
            lo_service_manager->retrieve(
              EXPORTING
                iv_node_key             = ls_confro_assoc-target_node->ref_node_key
                it_key                  = et_target_key
                iv_before_image         = iv_before_image
                iv_edit_mode            = iv_edit_mode
                iv_fill_data            = abap_true
                iv_invalidate_cache     = iv_invalidate_cache
                it_requested_attributes = it_requested_attributes
              IMPORTING
                eo_message              = lo_message
                eo_change               = lo_change
                et_data                 = et_data
                et_failed_key           = lt_retrieve_failed_key ).

            " delete all key_links of the retrieve_by_association call, which target to a key, which has failed the retrieve call.
            LOOP AT lt_retrieve_failed_key INTO ls_failed_key.
              DELETE et_key_link USING KEY target_key WHERE target_key = ls_failed_key-key.
            ENDLOOP.
          ENDIF.

          " call post_retrieve_by_association
          IF mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

            " get messages from the callstack
            eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
            IF eo_message IS BOUND.
              eo_message->get( IMPORTING et_message = lt_message ).
            ENDIF.

            " increase the callstack: push the post_retrieve_by_association plugins execution onto the stack
            mo_compl_transaction_manager->callstack_push(
              EXPORTING
                iv_bo_key              = mv_bo_key
                iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

            INSERT LINES OF lt_failed_key_all INTO TABLE et_failed_key.

            " create empty change object
            lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

            LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
              ls_plugin-service_instance->post_retrieve_by_association(
                EXPORTING
                  iv_bo_key               = mo_conf->ms_obj-bo_key
                  iv_node_key             = iv_node_key
                  it_key                  = lt_key
                  iv_association          = iv_association
                  is_parameters           = is_parameters
                  it_filtered_attributes  = it_filtered_attributes
                  iv_before_image         = iv_before_image
                  iv_edit_mode            = iv_edit_mode
                  iv_fill_data            = iv_fill_data
                  iv_invalidate_cache     = iv_invalidate_cache
                  it_requested_attributes = it_requested_attributes
                  io_change               = lo_frw_change
                CHANGING
                  ct_key_link             = et_key_link
                  ct_target_key           = et_target_key
                  ct_failed_key           = et_failed_key
                  ct_data                 = et_data
                  ct_message              = lt_message ).
            ENDLOOP.

            " add changes to the callstack
            IF lo_frw_change IS BOUND.
              IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
                mo_compl_transaction_manager->callstack_add_change(
                  EXPORTING
                    iv_bo_key = mv_bo_key
                    io_change = lo_frw_change ).
              ENDIF.
            ENDIF.

            " decrease callstack
            mo_compl_transaction_manager->callstack_pop( ).

            " set messages to the topmost callstack object
            eo_message = /bobf/cl_frw_factory=>get_message( ).
            eo_message->add_cm( it_message = lt_message ).
            mo_compl_transaction_manager->callstack_set_top_message(
              EXPORTING
                io_message = eo_message ).
          ENDIF.

          " decrease callstack
          mo_compl_transaction_manager->callstack_pop(
            IMPORTING
              eo_message = eo_message
              eo_change  = eo_change ).
        ENDIF.

      ELSE.
********************************************************************************
        " no cross BO association - just forward retrieve-by-association call
********************************************************************************
        IF et_failed_key IS REQUESTED.
          lv_fill_failed_key = abap_true.
        ENDIF.

        lt_key = it_key.

        " call pre_retrieve_by_association plugins
        IF plugins_disabled( ) = abap_false AND
          mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

          " increase the callstack: push the pre_retrieve_by_association execution onto the stack
          mo_compl_transaction_manager->callstack_push(
            EXPORTING
              iv_bo_key              = mv_bo_key
              iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

          " execute pre_retrieve_by_association plugins
          lo_plugin_change = /bobf/cl_frw_factory=>get_change( ).
          LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.

            ls_plugin-service_instance->pre_retrieve_by_association(
              EXPORTING
                iv_bo_key               = mo_conf->ms_obj-bo_key
                iv_node_key             = iv_node_key
                iv_association          = iv_association
                is_parameters           = is_parameters
                it_filtered_attributes  = it_filtered_attributes
                iv_before_image         = iv_before_image
                iv_edit_mode            = iv_edit_mode
                iv_fill_data            = iv_fill_data
                iv_invalidate_cache     = iv_invalidate_cache
                it_requested_attributes = it_requested_attributes
                io_change               = lo_plugin_change
              IMPORTING
                ev_skip_bo              = lv_skip
                eo_message              = lo_plugin_message
                et_failed_key           = lt_failed_key
              CHANGING
                ct_key                  = lt_key ).

            IF lv_skip = abap_true.
              lv_skip_core = abap_true.
            ENDIF.

            LOOP AT lt_failed_key INTO ls_key.
              DELETE lt_key WHERE key = ls_key-key.
            ENDLOOP.
            INSERT LINES OF lt_failed_key INTO TABLE lt_failed_key_all.
            CLEAR lt_failed_key.

            IF lo_plugin_message_all IS BOUND.
              lo_plugin_message_all->add( lo_plugin_message ).
            ELSE.
              lo_plugin_message_all = lo_plugin_message.
            ENDIF.
          ENDLOOP.

          " add messages to the callstack
          IF lo_plugin_message_all IS BOUND.
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_plugin_message_all ).
          ENDIF.

          " add internal messages (e.g. from DAC)
          IF mo_dac_message IS BOUND.
            lo_cl_frw_message ?= mo_dac_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.
          CLEAR mo_dac_message.

          " add changes to the callstack
          IF lo_plugin_change IS BOUND.
            IF lo_plugin_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_plugin_change ).
            ENDIF.
          ENDIF.

          " decrease callstack
          mo_compl_transaction_manager->callstack_pop( ).

        ENDIF.

        IF lv_skip = abap_false.
          mo_bopf->retrieve_by_association(
            EXPORTING
              iv_node_key             = iv_node_key
              it_key                  = lt_key
              iv_association          = iv_association
              is_parameters           = is_parameters
              it_filtered_attributes  = it_filtered_attributes
              iv_fill_data            = iv_fill_data
              iv_before_image         = iv_before_image
              iv_invalidate_cache     = iv_invalidate_cache
              iv_edit_mode            = iv_edit_mode
              iv_fill_failed_key      = lv_fill_failed_key
              it_requested_attributes = it_requested_attributes
            IMPORTING
              eo_message              = lo_message
              eo_change               = lo_frw_change
              et_data                 = et_data
              et_key_link             = et_key_link
              et_target_key           = et_target_key
              et_failed_key           = et_failed_key ).

          " add returned changes to the callstack
          IF lo_frw_change IS BOUND.
            IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_frw_change ).
            ENDIF.
          ENDIF.

          " add returned messages to the callstack
          IF lo_message IS BOUND.
            lo_cl_frw_message ?= lo_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.

          " add internal messages (e.g. from DAC)
          IF mo_dac_message IS BOUND.
            lo_cl_frw_message ?= mo_dac_message.
            lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
            mo_compl_transaction_manager->callstack_add_message(
              EXPORTING
                io_message = lo_cl_frw_message ).
          ENDIF.
          CLEAR mo_dac_message.

        ENDIF.

        " call post_retrieve_by_association
        IF plugins_disabled( ) = abap_false AND
          mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

          " get messages from the callstack
          eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
          IF eo_message IS BOUND.
            eo_message->get( IMPORTING et_message = lt_message ).
          ENDIF.

          " increase the callstack: push the post_retrieve_by_association plugins execution onto the stack
          mo_compl_transaction_manager->callstack_push(
            EXPORTING
              iv_bo_key              = mv_bo_key
              iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

          INSERT LINES OF lt_failed_key_all INTO TABLE et_failed_key.

          " create empty change object
          lo_frw_change = /bobf/cl_frw_factory=>get_change( ).

          LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
            ls_plugin-service_instance->post_retrieve_by_association(
              EXPORTING
                iv_bo_key               = mo_conf->ms_obj-bo_key
                iv_node_key             = iv_node_key
                it_key                  = lt_key
                iv_association          = iv_association
                is_parameters           = is_parameters
                it_filtered_attributes  = it_filtered_attributes
                iv_before_image         = iv_before_image
                iv_edit_mode            = iv_edit_mode
                iv_fill_data            = iv_fill_data
                iv_invalidate_cache     = iv_invalidate_cache
                it_requested_attributes = it_requested_attributes
                io_change               = lo_frw_change
              CHANGING
                ct_key_link             = et_key_link
                ct_target_key           = et_target_key
                ct_failed_key           = et_failed_key
                ct_data                 = et_data
                ct_message              = lt_message ).
          ENDLOOP.

          " add changes to the callstack
          IF lo_frw_change IS BOUND.
            IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
              mo_compl_transaction_manager->callstack_add_change(
                EXPORTING
                  iv_bo_key = mv_bo_key
                  io_change = lo_frw_change ).
            ENDIF.
          ENDIF.

          " decrease callstack
          mo_compl_transaction_manager->callstack_pop( ).

          " set messages to the topmost callstack object
          eo_message = /bobf/cl_frw_factory=>get_message( ).
          eo_message->add_cm( it_message = lt_message ).
          mo_compl_transaction_manager->callstack_set_top_message(
            EXPORTING
              io_message = eo_message ).
        ENDIF.

        " decrease the callstack (retrieve_by_association)
        mo_compl_transaction_manager->callstack_pop(
          IMPORTING
            eo_message = eo_message
            eo_change  = eo_change ).
      ENDIF.

    ENDIF.

    " ensure that always a bound change object is returned
    " (in order to be more robust)
    IF eo_change IS NOT BOUND.
      IF eo_change IS REQUESTED.
        CREATE OBJECT eo_change TYPE /bobf/cl_tra_change.
      ENDIF.
    ENDIF.

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_by_association


  METHOD /bobf/if_tra_service_manager~retrieve_code_value_set.

    DATA:
      lv_privileged_before TYPE        boole_d,
      ls_plugin            TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lt_key               TYPE        /bobf/t_frw_key,
      lv_skip_core         TYPE        boolean,
      lv_callstack_level   TYPE        i,
      lv_skip              TYPE        boolean,
      ls_auth_context      TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed       TYPE        boolean.

    " clear export parameter
    CLEAR:
      eo_message,
      et_code_values.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    lt_key = it_key.

    " check import parameters
    IF iv_vset_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    " get value set configuration
    IF mo_conf->ms_last_vset-vset_key <> iv_vset_key.
      mo_conf->get_value_set( iv_vset_key = iv_vset_key ).
    ENDIF.

    " increase the callstack: push retrieve_code_value_set onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_level = lv_callstack_level
        ev_different_bo = DATA(lv_is_different_bo) ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve_code_value_set.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre retrieve_code_value_set plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_retrieve_code_value_set execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_retrieve_code_value_set(
            EXPORTING
              iv_bo_key         = mo_conf->ms_obj-bo_key
              iv_vset_key       = iv_vset_key
              iv_key_is_default = iv_key_is_default
              is_parameters     = is_parameters
              it_attributes     = it_attributes
            IMPORTING
              ev_skip_bo        = lv_skip
            CHANGING
              ct_key            = lt_key ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward retrieve_by call
      IF lv_skip_core = abap_false AND lt_key IS NOT INITIAL.
        mo_bopf->retrieve_code_value_set(
          EXPORTING
            iv_vset_key       = iv_vset_key
              it_key            = lt_key
            iv_key_is_default = iv_key_is_default
            is_parameters     = is_parameters
            it_attributes     = it_attributes
          IMPORTING
            et_code_values    = et_code_values ).

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the post_retrieve_code_value_set plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_retrieve_code_value_set(
            EXPORTING
              iv_bo_key         = mo_conf->ms_obj-bo_key
              iv_vset_key       = iv_vset_key
              iv_key_is_default = iv_key_is_default
              it_key            = lt_key
              is_parameters     = is_parameters
              it_attributes     = it_attributes
            CHANGING
              ct_code_values    = et_code_values ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

    ENDIF.

    " decrease the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_code_value_set


  METHOD /bobf/if_tra_service_manager~retrieve_default_action_param.

    DATA:
      lv_privileged_before TYPE        boole_d,
      ls_plugin            TYPE /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lt_key               TYPE /bobf/t_frw_key,
      lv_callstack_level   TYPE i,
      lv_skip_core         TYPE boolean,
      lv_skip              TYPE boolean,
      ls_auth_context      TYPE /bobf/s_frw_ctx_auth,
      lv_auth_failed       TYPE boolean.

    CLEAR:
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    lt_key = it_key.

    " check import parameters
    IF iv_act_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    " get action configuration
    IF mo_conf->ms_last_action-act_key <> iv_act_key.
      mo_conf->get_act( iv_act_key  = iv_act_key ).
    ENDIF.
    IF mo_conf->ms_last_action-act_cat <> /bobf/if_conf_c=>sc_action_standard.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push retrieve_default_action_param onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo        = DATA(lv_is_different_bo)
        ev_level               = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
        iv_callstack_level = lv_callstack_level
        iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve_default_action_param.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_retrieve_default_action_param execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_retrieve_dflt_action_para(
            EXPORTING
              iv_bo_key     = mo_conf->ms_obj-bo_key
              iv_act_key    = iv_act_key
            IMPORTING
              ev_skip_bo    = lv_skip
            CHANGING
              ct_key        = lt_key
              cs_parameters = cs_parameters ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the check_action call
      IF lv_skip_core = abap_false.
        mo_bopf->retrieve_default_action_param(
          EXPORTING
            iv_act_key    = iv_act_key
            it_key        = lt_key
          CHANGING
            cs_parameters = cs_parameters ).

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the post_retrieve_default_action_param execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_retrieve_dflt_action_para(
            EXPORTING
              iv_bo_key     = mo_conf->ms_obj-bo_key
              iv_act_key    = iv_act_key
              it_key        = lt_key
            CHANGING
              cs_parameters = cs_parameters ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

    ENDIF.

    " decrease the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).



  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_default_action_param


  METHOD /bobf/if_tra_service_manager~retrieve_default_node_values.

    DATA:
      lv_privileged_before   TYPE        boole_d,
      ls_modification        TYPE        /bobf/s_frw_modification,
      lt_modification        TYPE        /bobf/t_frw_modification,
      ls_node                TYPE        /bobf/s_frw_node,
      ls_data                TYPE REF TO data,
      lt_copied_ct_data      TYPE REF TO data,
      ls_plugin              TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_property     TYPE REF TO /bobf/if_frw_property,
      lo_plugin_property_all TYPE REF TO /bobf/if_frw_property,
      lo_plugin_message      TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all  TYPE REF TO /bobf/if_frw_message,
      lo_cl_frw_message      TYPE REF TO /bobf/cl_frw_message,
      lt_message             TYPE        /bobf/cm_frw=>tt_frw,
      lt_property            TYPE        /bobf/t_frw_property_k,
      lt_plugin_property     TYPE        /bobf/t_frw_property_k,
      lv_callstack_level     TYPE        i,
      lv_skip_core           TYPE        boolean,
      lv_skip                TYPE        boolean,
      ls_auth_context        TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed         TYPE        boolean.

    FIELD-SYMBOLS:
      <lt_copied_ct_data> TYPE ANY TABLE,
      <lv_key>            TYPE      any,
      <ls_data>           TYPE      any.

    " clear exporting parameter
    CLEAR:
      eo_message,
      eo_property.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    " get node configuration
    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    IF iv_assoc_key IS NOT INITIAL.
      IF mo_conf->ms_last_assoc-assoc_key <> iv_assoc_key.
        mo_conf->get_assoc( iv_assoc_key  = iv_assoc_key ).
      ENDIF.
      IF mo_conf->ms_last_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_lock    OR
         mo_conf->ms_last_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_message OR
         mo_conf->ms_last_assoc-assoc_type = /bobf/if_conf_c=>sc_assoccat_property.
        set_application_error( ).
      ENDIF.
    ENDIF.

    " Check if source information is consistent:
    IF mo_conf->ms_last_node-root_node_key = iv_node_key.
      IF iv_assoc_key IS NOT INITIAL AND mo_conf->ms_last_assoc-assoc_class IS NOT INITIAL.
        "implemented association -> allowed
        IF iv_source_key IS INITIAL.
          set_application_error( ).
        ENDIF.
      ELSE.
        "no (implemented) association -> no source allowed
        IF iv_assoc_key  IS NOT INITIAL OR
           iv_source_key IS NOT INITIAL.
          set_application_error( ).
        ENDIF.
      ENDIF.
    ELSE.
      "not at root -> need source data
      IF iv_assoc_key  IS INITIAL OR
         iv_source_key IS INITIAL.
        set_application_error( ).
      ENDIF.
    ENDIF.

    " increase the callstack: push retrieve_default_node_values onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo        = DATA(lv_is_different_bo)
        ev_level               = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve_default_node_values.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.
    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_retrieve_default_node_values execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_retrieve_dflt_node_values(
            EXPORTING
              iv_bo_key                    = mo_conf->ms_obj-bo_key
              iv_node_key                  = iv_node_key
              iv_source_key                = iv_source_key
              iv_assoc_key                 = iv_assoc_key
              is_assoc_parameters          = is_assoc_parameters
              it_assoc_filtered_attributes = it_assoc_filtered_attributes
            IMPORTING
              eo_message                   = lo_plugin_message
              ev_skip_bo                   = lv_skip
              eo_property                  = lo_plugin_property ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_property IS BOUND.
            lo_plugin_property->get_property( IMPORTING et_property = lt_property ).
            lo_plugin_property_all->add( lt_property ).
          ELSE.
            lo_plugin_property_all = lo_plugin_property.
          ENDIF.

          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " call BOPF
      IF lv_skip_core = abap_false AND ct_data IS NOT INITIAL.
        " create modification container
        ls_modification-node        = iv_node_key.
        ls_modification-source_key = iv_source_key.
        ls_modification-association =  iv_assoc_key.

        " copy the ct_data, because it is cleared in the bopf method and the references are freed
        CREATE DATA lt_copied_ct_data LIKE ct_data.
        ASSIGN lt_copied_ct_data->* TO <lt_copied_ct_data>.
        <lt_copied_ct_data> = ct_data.

        LOOP AT <lt_copied_ct_data> REFERENCE INTO ls_data.

          ASSIGN ls_data->* TO <ls_data>.
          IF <ls_data> IS NOT ASSIGNED.
            set_application_error( ).
          ENDIF.

          ASSIGN COMPONENT /bobf/if_conf_c=>sc_attribute_name_key OF STRUCTURE <ls_data> TO <lv_key>.
          IF <lv_key> IS NOT ASSIGNED.
            set_application_error( ).
          ENDIF.

          READ TABLE mt_default_value_request WITH TABLE KEY primary_key COMPONENTS node = iv_node_key key = <lv_key> TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            " the default values for this node instance have been requested before - thus changemode "update"
            ls_modification-change_mode = /bobf/if_frw_c=>sc_modify_update.
          ELSE.
            " the default values for this node instance have been requested for the first time - thus changemode "create"
            ls_modification-change_mode = /bobf/if_frw_c=>sc_modify_create.
            " memorize the requested node instance
            ls_node-key = <lv_key>.
            ls_node-node = ls_modification-node.
            INSERT ls_node INTO TABLE mt_default_value_request.
          ENDIF.

          ls_modification-key = <lv_key>.
          ls_modification-data = ls_data.

          IF iv_assoc_key IS NOT INITIAL.
            ls_modification-source_node = mo_conf->ms_last_assoc-source_node_key.
          ENDIF.

          INSERT ls_modification INTO TABLE lt_modification.
        ENDLOOP.

        " forward the retrieve_default_node_values call
        mo_bopf->retrieve_default_node_values(
          EXPORTING
            iv_node_key                  = iv_node_key
            it_modification              = lt_modification
            is_assoc_parameters          = is_assoc_parameters
            it_assoc_filtered_attributes = it_assoc_filtered_attributes
          IMPORTING
            eo_message                   = eo_message
            et_data                      = ct_data
            eo_property                  = eo_property ).

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.


      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_retrieve_default_node_values execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        IF eo_property IS BOUND.
          eo_property->get_property( IMPORTING et_property = lt_property ).
        ENDIF.
        IF lo_plugin_property_all IS BOUND.
          lo_plugin_property_all->get_property( IMPORTING et_property = lt_plugin_property ).
          INSERT LINES OF lt_plugin_property INTO TABLE lt_property.
        ENDIF.

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_retrieve_dflt_node_values(
            EXPORTING
              iv_bo_key                    = mo_conf->ms_obj-bo_key
              iv_node_key                  = iv_node_key
              iv_source_key                = iv_source_key
              iv_assoc_key                 = iv_assoc_key
              is_assoc_parameters          = is_assoc_parameters
              it_assoc_filtered_attributes = it_assoc_filtered_attributes
            CHANGING
              ct_message                   = lt_message
              ct_data                      = ct_data
              ct_property                  = lt_property ).
        ENDLOOP.

        CLEAR eo_property.
        IF lt_property IS NOT INITIAL.
          eo_property = /bobf/cl_frw_factory=>get_property( ).
          eo_property->add( lt_property ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).

      ENDIF.

    ENDIF.

    " decrease the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
         eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).


  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_default_node_values


  METHOD /bobf/if_tra_service_manager~retrieve_default_query_param.

    DATA:
      lv_privileged_before TYPE        boole_d,
      ls_plugin            TYPE /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lv_skip_core         TYPE boolean,
      lv_callstack_level   TYPE i,
      lv_skip              TYPE boolean,
      ls_auth_context      TYPE /bobf/s_frw_ctx_auth,
      lv_auth_failed       TYPE boolean.

    CLEAR:
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameter
    IF iv_query_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    " get query configuration
    IF mo_conf->ms_last_query-query_key <> iv_query_key.
      mo_conf->get_query( iv_query_key = iv_query_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_key <> mo_conf->ms_last_query-node_key.
      mo_conf->get_node( iv_node_key = mo_conf->ms_last_query-node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push retrieve_default_query_param onto the stack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read
      IMPORTING
        ev_different_bo = DATA(lv_is_different_bo)
        ev_level = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
        iv_callstack_level = lv_callstack_level
        iv_bo_is_different_in_level = lv_is_different_bo ).

    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve_default_query_param.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_retrieve_default_query_param plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          ls_plugin-service_instance->pre_retrieve_dflt_query_param(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
              iv_query_key            = iv_query_key
            IMPORTING
              ev_skip_bo              = lv_skip
            CHANGING
              ct_selection_parameters = ct_selection_parameters ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward retreive_default_query_param call
      IF lv_skip_core = abap_false.
        mo_bopf->retrieve_default_query_param(
          EXPORTING
            iv_query_key            = iv_query_key
          CHANGING
            ct_selection_parameters = ct_selection_parameters ).

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the post_retrieve_default_query_param execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_retrieve_dflt_query_param(
            EXPORTING
              iv_bo_key               = mo_conf->ms_obj-bo_key
          iv_query_key            = iv_query_key
        CHANGING
          ct_selection_parameters = ct_selection_parameters ).
        ENDLOOP.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

    ENDIF.

    " decrease the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_default_query_param


  METHOD /bobf/if_tra_service_manager~retrieve_property.

    DATA:
      lv_privileged_before         TYPE        boole_d,
      lo_cl_frw_message            TYPE REF TO /bobf/cl_frw_message,
      ls_plugin                    TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lo_plugin_property           TYPE REF TO /bobf/if_frw_property,
      lo_plugin_property_all       TYPE REF TO /bobf/if_frw_property,
      lo_plugin_message            TYPE REF TO /bobf/if_frw_message,
      lo_plugin_message_all        TYPE REF TO /bobf/if_frw_message,
      lt_property                  TYPE        /bobf/t_frw_property_k,
      lt_plugin_property           TYPE        /bobf/t_frw_property_k,
      lt_message                   TYPE        /bobf/cm_frw=>tt_frw,
      lt_key                       TYPE        /bobf/t_frw_key,
      lv_node_property             TYPE        boole_d,
      lv_node_attribute_property   TYPE        boole_d,
      lt_node_attribute            TYPE        /bobf/t_frw_name,
      lv_assoc_property            TYPE        boole_d,
      lt_assoc                     TYPE        /bobf/t_frw_key2,
      lv_assoc_attribute_property  TYPE        boole_d,
      lv_action_property           TYPE        boole_d,
      lt_action                    TYPE        /bobf/t_frw_key2,
      lv_callstack_level           TYPE        i,
      lv_action_attribute_property TYPE        boole_d,
      lv_query_property            TYPE        boole_d,
      lt_query                     TYPE        /bobf/t_frw_key2,
      lv_query_attribute_property  TYPE        boole_d,
      lv_skip_core                 TYPE        boolean,
      lv_skip                      TYPE        boolean,
      ls_auth_context              TYPE        /bobf/s_frw_ctx_auth,
      lv_auth_failed               TYPE        boolean.

    CLEAR:
      eo_message,
      eo_property.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " check import parameters
    IF iv_node_key IS INITIAL.
      set_application_error( ).
    ENDIF.

    lt_key                       = it_key.
    lv_node_property             = iv_node_property.
    lv_node_attribute_property   = iv_node_attribute_property.
    lt_node_attribute            = it_node_attribute.
    lv_assoc_property            = iv_assoc_property.
    lt_assoc                     = it_assoc.
    lv_assoc_attribute_property  = iv_assoc_attribute_property.
    lv_action_property           = iv_action_property.
    lt_action                    = it_action.
    lv_action_attribute_property = iv_action_attribute_property.
    lv_query_property            = iv_query_property.
    lt_query                     = it_query.
    lv_query_attribute_property  = iv_query_attribute_property.

    " get node configuration
    IF mo_conf->ms_last_node-node_key <> iv_node_key.
      mo_conf->get_node( iv_node_key = iv_node_key ).
    ENDIF.
    IF mo_conf->ms_last_node-node_type <> /bobf/if_conf_c=>sc_node_type_normal.
      set_application_error( ).
    ENDIF.

    " increase the callstack: push retrieve_property onto the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_check
      IMPORTING
        ev_different_bo        = DATA(lv_is_different_bo)
        ev_level               = lv_callstack_level ).

    lv_privileged_before = /bobf/cl_frw_authority_context=>set_privileged_mode_by_level(
      iv_callstack_level = lv_callstack_level
      iv_bo_is_different_in_level = lv_is_different_bo ).


    ls_auth_context-activity = /bobf/cl_frw_authority_check=>sc_activity-display.
    ls_auth_context-activity_supplement = /bobf/cl_frw_authority_check=>sc_activity_supplement-retrieve_property.
    ls_auth_context-node_key = mo_conf->ms_last_node-node_key.

    lv_auth_failed = check_authority_statically( ls_auth_context ).

    IF lv_auth_failed = abap_false.

      " call pre plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " increase the callstack: push the pre_retrieve_property plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin USING KEY alphabetical.
          CLEAR lo_plugin_property.
          ls_plugin-service_instance->pre_retrieve_property(
            EXPORTING
              iv_bo_key                    = mo_conf->ms_obj-bo_key
              iv_node_key                  = iv_node_key
              iv_key_is_default            = iv_key_is_default
            IMPORTING
              ev_skip_bo                   = lv_skip
              eo_property                  = lo_plugin_property
              eo_message                   = lo_plugin_message
            CHANGING
              ct_key                       = lt_key
              cv_node_property             = lv_node_property
              cv_node_attribute_property   = lv_node_attribute_property
              ct_node_attribute            = lt_node_attribute
              cv_assoc_property            = lv_assoc_property
              ct_assoc                     = lt_assoc
              cv_assoc_attribute_property  = lv_assoc_attribute_property
              cv_action_property           = lv_action_property
              ct_action                    = lt_action
              cv_action_attribute_property = lv_action_attribute_property
              cv_query_property            = lv_query_property
              ct_query                     = lt_query
              cv_query_attribute_property  = lv_query_attribute_property ).

          IF lv_skip = abap_true.
            lv_skip_core = abap_true.
          ENDIF.
          IF lo_plugin_message_all IS BOUND.
            lo_plugin_message_all->add( lo_plugin_message ).
          ELSE.
            lo_plugin_message_all = lo_plugin_message.
          ENDIF.
          IF lo_plugin_property IS BOUND.
            lo_plugin_property->get_property( IMPORTING et_property = lt_property ).
            lo_plugin_property_all->add( lt_property ).
          ELSE.
            lo_plugin_property_all = lo_plugin_property.
          ENDIF.
        ENDLOOP.

        " add messages to the callstack
        IF lo_plugin_message_all IS BOUND.
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_plugin_message_all ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

      ENDIF.

      " forward the retrieve_property call
      IF lv_skip_core = abap_false AND lt_key IS NOT INITIAL.
        mo_bopf->retrieve_property(
          EXPORTING
            iv_node_key                  = iv_node_key
              it_key                       = lt_key
              iv_key_is_default            = iv_key_is_default
              iv_node_property             = lv_node_property
              iv_node_attribute_property   = lv_node_attribute_property
              it_node_attribute            = lt_node_attribute
              iv_assoc_property            = lv_assoc_property
              it_assoc                     = lt_assoc
              iv_assoc_attribute_property  = lv_assoc_attribute_property
              iv_action_property           = lv_action_property
              it_action                    = lt_action
              iv_action_attribute_property = lv_action_attribute_property
              iv_query_property            = lv_query_property
              it_query                     = lt_query
              iv_query_attribute_property  = lv_query_attribute_property
          IMPORTING
            eo_property                  = eo_property
            eo_message                   = eo_message  ).

        " add returned messages to the callstack
        IF eo_message IS BOUND.
          lo_cl_frw_message ?= eo_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.

        " add internal messages (e.g. from DAC)
        IF mo_dac_message IS BOUND.
          lo_cl_frw_message ?= mo_dac_message.
          lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
          mo_compl_transaction_manager->callstack_add_message(
            EXPORTING
              io_message = lo_cl_frw_message ).
        ENDIF.
        CLEAR mo_dac_message.

      ENDIF.

      " call post plugins
      IF plugins_disabled( ) = abap_false AND
        mo_compl_transaction_manager->mt_service_plugin IS NOT INITIAL.

        " get messages from the callstack
        CLEAR eo_message.
        eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
        IF eo_message IS BOUND.
          eo_message->get( IMPORTING et_message = lt_message ).
        ENDIF.

        " increase the callstack: push the post_retrieve_property plugins execution onto the stack
        mo_compl_transaction_manager->callstack_push(
          EXPORTING
            iv_bo_key              = mv_bo_key
            iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).


        IF eo_property IS BOUND.
          eo_property->get_property( IMPORTING et_property = lt_property ).
        ENDIF.
        IF lo_plugin_property_all IS BOUND.
          lo_plugin_property_all->get_property( IMPORTING et_property = lt_plugin_property ).
          INSERT LINES OF lt_plugin_property INTO TABLE lt_property.
        ENDIF.

        LOOP AT mo_compl_transaction_manager->mt_service_plugin INTO ls_plugin.
          ls_plugin-service_instance->post_retrieve_property(
            EXPORTING
              iv_bo_key                    = mo_conf->ms_obj-bo_key
              iv_node_key                  = iv_node_key
              it_key                       = lt_key
              iv_key_is_default            = iv_key_is_default
              iv_node_property             = lv_node_property
              iv_node_attribute_property   = lv_node_attribute_property
              it_node_attribute            = lt_node_attribute
              iv_assoc_property            = lv_assoc_property
              it_assoc                     = lt_assoc
              iv_assoc_attribute_property  = lv_assoc_attribute_property
              iv_action_property           = lv_action_property
              it_action                    = lt_action
              iv_action_attribute_property = lv_action_attribute_property
              iv_query_property            = lv_query_property
              it_query                     = lt_query
              iv_query_attribute_property  = lv_query_attribute_property
            CHANGING
              ct_property                  = lt_property
              ct_message                   = lt_message ).
        ENDLOOP.

        " take over properties
        CLEAR eo_property.
        IF lt_property IS NOT INITIAL.
          eo_property = /bobf/cl_frw_factory=>get_property( ).
          eo_property->add( lt_property ).
        ENDIF.

        " decrease callstack
        mo_compl_transaction_manager->callstack_pop( ).

        " set messages to the topmost callstack object
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
        mo_compl_transaction_manager->callstack_set_top_message(
          EXPORTING
            io_message = eo_message ).
      ENDIF.

    ENDIF.

    " decrease and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

    /bobf/cl_frw_authority_context=>restore_privileged_mode( lv_privileged_before ).

  ENDMETHOD.                    "/bobf/if_tra_service_manager~retrieve_property


  METHOD /bobf/if_tra_serv_mgr_transact~adjust_numbers.

    DATA:
      lo_frw_change     TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_adjust_numbers ).

    " forward the adjust_numbers call
    mo_bopf->adjust_numbers(
       IMPORTING
        "et_adjusted_numbers
         eo_change  = lo_frw_change
         eo_message = eo_message ).

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~adjust_numbers


  METHOD /bobf/if_tra_serv_mgr_transact~after_failed_save.

    DATA:
      lo_frw_change     TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message,
      eo_change.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_after_failed_save ).

*    handle_durable_lock( ).

    " forward the after_failed_save call
    mo_bopf->after_failed_save(
      IMPORTING
        eo_message = eo_message
        eo_change  = lo_frw_change ).

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~after_failed_save


  METHOD /bobf/if_tra_serv_mgr_transact~after_successful_save.

    DATA:
      lo_frw_change     TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message,
      eo_change.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.
    mv_after_succesful_save_active = abap_true.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_after_successful_save ).

*    handle_durable_lock( ).

    " forward the after_successful_save call
    mo_bopf->after_successful_save(
      IMPORTING
        eo_message = eo_message
        eo_change  = lo_frw_change ).

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).
    mv_after_succesful_save_active = abap_false.

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~after_successful_save


  METHOD /bobf/if_tra_serv_mgr_transact~check_before_save.

    DATA:
      ls_plugin         TYPE        /bobf/if_tra_trans_mgr_compl=>ty_plugin,
      lt_message        TYPE        /bobf/cm_frw=>tt_frw,
      lv_rejected       TYPE        boole_d,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message,
      ev_rejected.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_check_before_save ).

    " forward the check_before_save call
    mo_bopf->check_before_save(
      IMPORTING
        eo_message  = eo_message
        ev_rejected = ev_rejected ).

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " call post plugins
    IF plugins_disabled( ) = abap_false AND
       mo_compl_transaction_manager->mt_sm_transaction_plugin IS NOT INITIAL.

      " get messages from the callstack
      eo_message = mo_compl_transaction_manager->callstack_get_top_message( ).
      IF eo_message IS BOUND.
        eo_message->get( IMPORTING et_message = lt_message ).
      ENDIF.

      " increase the callstack: push the post_check_before_save plugins execution onto the stack
      mo_compl_transaction_manager->callstack_push(
        EXPORTING
          iv_bo_key              = mv_bo_key
          iv_new_callstack_state = /bobf/if_tra_c=>gc_state_read ).

      LOOP AT mo_compl_transaction_manager->mt_sm_transaction_plugin INTO ls_plugin.
        ls_plugin-sm_transaction_instance->post_check_before_save(
          EXPORTING
            iv_bo_key       = mo_conf->ms_obj-bo_key
            iv_bo_rejected  = ev_rejected
          IMPORTING
            ev_rejected     = lv_rejected
          CHANGING
            ct_message      = lt_message ).
        IF ev_rejected = abap_false AND lv_rejected = abap_true.
          " the plugin may reject, but it must not be able to make the BO's rejection undone
          ev_rejected = abap_true.
        ENDIF.
      ENDLOOP.

      " decrease callstack
      mo_compl_transaction_manager->callstack_pop( ).

      " set messages to the topmost callstack object
      CLEAR eo_message.
      IF lt_message IS NOT INITIAL.
        eo_message = /bobf/cl_frw_factory=>get_message( ).
        eo_message->add_cm( it_message = lt_message ).
      ENDIF.
      mo_compl_transaction_manager->callstack_set_top_message(
        EXPORTING
          io_message = eo_message ).
    ENDIF.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~check_before_save


  METHOD /bobf/if_tra_serv_mgr_transact~do_cleanup.

    DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_do_cleanup ).

*    handle_durable_lock( ).

    " forward the do_cleanup call
    mo_bopf->do_cleanup(
      EXPORTING
        iv_cleanup_mode = iv_cleanup_mode
      IMPORTING
        eo_message      = eo_message  ).

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~do_cleanup


  METHOD /bobf/if_tra_serv_mgr_transact~do_save.

    DATA lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message,
      ev_rejected.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_do_save ).

    " forward the check_before_save call
    mo_bopf->do_save(
      IMPORTING
        eo_message  = eo_message
        ev_rejected = ev_rejected ).

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~do_save


  METHOD /bobf/if_tra_serv_mgr_transact~finalize.

    DATA:
      lo_frw_change     TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_message,
      eo_change,
      ev_rejected.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_finalize ).

    " forward the finalize call
    mo_bopf->finalize(
      IMPORTING
        eo_message  = eo_message
        eo_change   = lo_frw_change
        ev_rejected = ev_rejected ).

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~finalize


  METHOD /bobf/if_tra_serv_mgr_transact~on_business_object_changed.

    DATA:
      ls_confro_action  TYPE        /bobf/s_confro_act_list,
      lt_confro_node    TYPE        /bobf/t_confro_node,
      ls_confro_node    TYPE        /bobf/s_confro_node,
      lo_frw_change     TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message,
      ls_bopf_changes   TYPE REF TO /bobf/s_frw_handle_bo_events.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_on_business_object_c ).

    " determine the representation nodes and find the representation node,
    " to which an event handling action belongs
    mo_conf->get_node_tab(
      IMPORTING
        et_node = lt_confro_node ).

    " call event handling action of the corresponding representation node
    LOOP AT lt_confro_node INTO ls_confro_node WHERE node_type = /bobf/if_conf_c=>sc_node_type_bo
       AND ref_bo_key = iv_publishing_bo_key.           "#EC CI_SORTSEQ

      " get event handling action
      mo_conf->get_act(
        EXPORTING
          iv_node_key = ls_confro_node-node_key
          iv_act_cat  = /bobf/if_conf_c=>sc_action_handle_bo_events
        IMPORTING
          es_action   = ls_confro_action ).

      IF ls_confro_action IS NOT INITIAL.
        " forward on_business_object_changed call
        CREATE DATA ls_bopf_changes.
        ls_bopf_changes->change = io_change.
        mo_bopf->on_business_object_changed(
          EXPORTING
            iv_node_key   = ls_confro_node-node_key
            is_bo_changes = ls_bopf_changes
          IMPORTING
            eo_message    = eo_message
            eo_change     = lo_frw_change ).
        EXIT.
      ENDIF.
    ENDLOOP.

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~on_business_object_changed


  METHOD /bobf/if_tra_serv_mgr_transact~on_numbers_adjusted.

    DATA:
      lv_adjusted_numbers     TYPE        /bobf/s_tra_adjusted_numbers,
      lv_ref_adjusted_numbers TYPE REF TO data,
      lo_frw_change           TYPE REF TO /bobf/if_frw_change,
      lo_cl_frw_message       TYPE REF TO /bobf/cl_frw_message.

    " clear export parameters
    CLEAR:
      eo_change,
      eo_message.

    " check if an application error has been occured before
    ASSERT gv_application_error = abap_false.

    " increase the callstack
    mo_compl_transaction_manager->callstack_push(
      EXPORTING
        iv_bo_key              = mv_bo_key
        iv_new_callstack_state = /bobf/if_tra_c=>gc_state_on_numbers_adjusted ).

    " forward the on_numbers_adjusted call
    lv_adjusted_numbers-change = io_change.
    GET REFERENCE OF lv_adjusted_numbers INTO lv_ref_adjusted_numbers.

    mo_bopf->on_numbers_adjusted(
      EXPORTING
        is_param   = lv_ref_adjusted_numbers
      IMPORTING
        eo_message = eo_message
        eo_change  = lo_frw_change ).

    " add returned changes to the callstack
    IF lo_frw_change IS BOUND.
      IF lo_frw_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
        mo_compl_transaction_manager->callstack_add_change(
          EXPORTING
            iv_bo_key = mv_bo_key
            io_change = lo_frw_change ).
      ENDIF.
    ENDIF.

    " add returned messages to the callstack
    IF eo_message IS BOUND.
      lo_cl_frw_message ?= eo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.

    " add internal messages (e.g. from DAC)
    IF mo_dac_message IS BOUND.
      lo_cl_frw_message ?= mo_dac_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( EXPORTING iv_bo_key = mv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message(
        EXPORTING
          io_message = lo_cl_frw_message ).
    ENDIF.
    CLEAR mo_dac_message.

    " decrease and get the messages and changes from the callstack
    mo_compl_transaction_manager->callstack_pop(
      IMPORTING
        eo_message = eo_message
        eo_change  = eo_change ).

  ENDMETHOD.                    "/bobf/if_tra_serv_mgr_transact~on_numbers_adjusted


  METHOD add_internal_message.

    IF mo_dac_message IS NOT BOUND.
      mo_dac_message = /bobf/cl_frw_factory=>get_message( ).
    ENDIF.

    mo_dac_message->add( io_message = io_message ).

  ENDMETHOD.


  METHOD check_authority_statically.

    DATA: lo_message        TYPE REF TO /bobf/if_frw_message,
          lo_cl_frw_message TYPE REF TO /bobf/cl_frw_message,
          lo_bopf           TYPE REF TO /bobf/if_frw_service_layer,
          lv_bo_key         TYPE /bobf/obm_bo_key.

    IF io_bopf IS BOUND.
      lo_bopf = io_bopf.
      lv_bo_key = iv_bo_key.
    ELSE.
      lo_bopf = mo_bopf.
      lv_bo_key = mv_bo_key.
    ENDIF.
    lo_bopf->check_authority_statically( EXPORTING is_ctx     = is_auth_context
                                         IMPORTING ev_failed  = rv_auth_failed
                                                   eo_message = lo_message ).
    IF lo_message IS BOUND.
      lo_cl_frw_message ?= lo_message.
      lo_cl_frw_message->set_bo_key_in_origin_location( lv_bo_key ).
      mo_compl_transaction_manager->callstack_add_message( lo_message ).
    ENDIF.

  ENDMETHOD.


  METHOD constructor.
    DATA lo_cx_frw TYPE REF TO /bobf/cx_frw.

    " check importing parameter
    IF iv_bo_key IS INITIAL
    OR io_compl_transaction_manager IS NOT BOUND.
      set_configuration_error( ).
    ENDIF.

    mv_bo_key = iv_bo_key.
    mo_compl_transaction_manager = io_compl_transaction_manager .

    " get BOPF service layer and configuration
    TRY.
        mo_bopf = /bobf/cl_frw_factory=>get_bopf( iv_bo_key ). "does NOT raise exception for unknown BO_KEY

        IF mo_bopf IS NOT BOUND.
          RAISE EXCEPTION TYPE /bobf/cx_conf
            EXPORTING
              textid = /bobf/cx_conf=>bo_not_found_in_conf.
        ENDIF.
      CATCH /bobf/cx_frw INTO lo_cx_frw.
        set_configuration_error( lo_cx_frw ).
    ENDTRY.
    TRY.
        mo_conf = /bobf/cl_frw_factory=>get_configuration( iv_bo_key ). "raises exception for unknown BO_KEY

        IF mo_conf IS NOT BOUND.
          RAISE EXCEPTION TYPE /bobf/cx_conf
            EXPORTING
              textid = /bobf/cx_conf=>bo_not_found_in_conf.
        ENDIF.
      CATCH /bobf/cx_frw INTO lo_cx_frw.
        set_configuration_error( lo_cx_frw ).
    ENDTRY.


    " register event handler for notify_changes event raised by bopf
    SET HANDLER handle_notify_changes FOR mo_bopf.
    " Create DAC message Container
    mo_dac_message = /bobf/cl_frw_factory=>get_message( ).

    mv_is_cds_based_bo = xsdbool( mo_conf->identify_scenario( ) IS NOT INITIAL ).
  ENDMETHOD.


  METHOD direct_write_enabled.
    CHECK plugins_disabled( ) = abap_true. "implicitly checks for Draft BO

    rv_direct_write_enabled = abap_true.
  ENDMETHOD.


  METHOD evaluate_association_bindings.

    DATA:
      lv_found  TYPE boole_d,
      ls_assocb TYPE /bobf/s_confro_assocb.

    FIELD-SYMBOLS:
      <ls_data>      TYPE any,
      <lv_attribute> TYPE any,
      <ls_filter>    TYPE any,
      <lv_value>     TYPE any,
      <lv_value2>    TYPE any.

    lv_found = abap_true.
    ASSIGN is_data->* TO <ls_data>.
    IF sy-subrc NE 0.
      set_application_error( ).
    ENDIF.

    LOOP AT is_assocb->* INTO ls_assocb
      WHERE from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_filter OR
            from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_constant. "#EC CI_SORTSEQ

      IF ls_assocb-from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_constant.
        " evaluate constant binding
        ASSIGN COMPONENT ls_assocb-attribute OF STRUCTURE <ls_data> TO <lv_attribute>.
        IF sy-subrc NE 0.
          set_application_error( ).
        ENDIF.
        ASSIGN (ls_assocb-constant) TO <lv_value>.
        IF sy-subrc NE 0.
          set_application_error( ).
        ENDIF.

      ELSE.
        IF is_parameters IS SUPPLIED.
          ASSIGN is_parameters->* TO <ls_filter>.
          IF sy-subrc NE 0 OR <ls_filter> IS INITIAL.
            CONTINUE.
          ENDIF.
        ENDIF.
        " evaluate association parameter filter
        READ TABLE it_filtered_attributes
          WITH KEY table_line = ls_assocb-from_binding
          TRANSPORTING NO FIELDS.
        CHECK sy-subrc = 0.
        ASSIGN COMPONENT ls_assocb-attribute OF STRUCTURE <ls_data> TO <lv_attribute>.
        IF sy-subrc NE 0.
          set_application_error( ).
        ENDIF.
        ASSIGN COMPONENT ls_assocb-from_binding OF STRUCTURE <ls_filter> TO <lv_value>.
        IF sy-subrc NE 0.
          set_application_error( ).
        ENDIF.
      ENDIF.

      CASE ls_assocb-sign.
        WHEN /bobf/if_conf_c=>sc_sign_between.
          IF ls_assocb-from_binding_cat = /bobf/if_conf_c=>sc_assocbcat_filter.
            ASSIGN COMPONENT ls_assocb-to_binding OF STRUCTURE <ls_filter> TO <lv_value2>.
            IF sy-subrc NE 0.
              set_application_error( ).
              EXIT.
            ENDIF.
            IF <lv_attribute> < <lv_value> OR
               <lv_attribute> > <lv_value2>.
              lv_found = abap_false.
              EXIT.
            ENDIF.
          ELSE.
            " between sign only supported for filter bindings -> configuration error
            set_application_error( ).
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_equal.
          IF <lv_attribute> <> <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_not_equal.
          IF <lv_attribute> = <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_greater.
          IF <lv_attribute> <= <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_greater_equal.
          IF <lv_attribute> < <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_less.
          IF <lv_attribute> >= <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN /bobf/if_conf_c=>sc_sign_less_equal.
          IF <lv_attribute> > <lv_value>.
            lv_found = abap_false.
            EXIT.
          ENDIF.

        WHEN OTHERS.
*      unknown sign -> configuration error
          set_application_error( ).
      ENDCASE.
    ENDLOOP.

    rv_result = lv_found.

  ENDMETHOD.                    "evaluate_association_bindings


  METHOD get_direct_access.
    DATA lo_bopf_frw TYPE REF TO /bobf/cl_frw.

    IF mo_direct_access IS NOT BOUND.

      IF direct_write_enabled( ).
        TRY.
            lo_bopf_frw ?= mo_bopf.
            mo_direct_access = lo_bopf_frw->get_direct_access( ).
          CATCH cx_sy_move_cast_error ##no_handler.
        ENDTRY.
      ENDIF.

      IF mo_direct_access IS NOT BOUND.
        mo_direct_access = NEW lcl_no_direct_access( ).
      ENDIF.
    ENDIF.

    ro_direct_access = mo_direct_access.
  ENDMETHOD.


  METHOD handle_notify_changes.

    IF io_change IS NOT BOUND.
      RETURN.
    ENDIF.

    " just forward the changes to the privat callstack_add_change of the transaction manager
    IF io_change->has_changes( iv_change_mode = /bobf/if_frw_c=>sc_modify ) = abap_true.
      mo_compl_transaction_manager->callstack_add_change(
        EXPORTING
          iv_bo_key = mv_bo_key
          io_change = io_change ).
    ENDIF.

  ENDMETHOD.                    "handle_notify_changes


  METHOD plugins_disabled.
    " Disable plugins for all BOs that are generated based on a CDS view
    rv_disabled = mv_is_cds_based_bo.
  ENDMETHOD.


  METHOD set_application_error.

    DATA:
      lx_previous          TYPE REF TO cx_root,
      lv_previous_text     TYPE        string,              "#EC NEEDED
      lx_pre_previous      TYPE REF TO cx_root,             "#EC NEEDED
      lv_pre_previous_text TYPE        string,              "#EC NEEDED
      lv_prev_progname     TYPE        syrepid,             "#EC NEEDED
      lv_prev_inclname     TYPE        syrepid,             "#EC NEEDED
      lv_prev_line         TYPE        i,                   "#EC NEEDED
      lv_pre_prev_progname TYPE        syrepid,             "#EC NEEDED
      lv_pre_prev_inclname TYPE        syrepid,             "#EC NEEDED
      lv_pre_prev_line     TYPE        i.                   "#EC NEEDED

    " remember the fatal exception in order to refuse any further transaction manager calls
    gv_application_error = abap_true.

    " enrich to ease dump analysing
    IF io_exception           IS BOUND AND
       io_exception->previous IS BOUND.

      lx_previous = io_exception->previous.
      lv_previous_text = lx_previous->get_text( ).

      lx_previous->get_source_position(
        IMPORTING
          program_name = lv_prev_progname
          include_name = lv_prev_inclname
          source_line  = lv_prev_line ).

      IF lx_previous->previous IS BOUND.
        lx_pre_previous = lx_previous->previous.
        lv_pre_previous_text = lx_pre_previous->get_text( ).
        lx_previous->get_source_position(
          IMPORTING
            program_name = lv_pre_prev_progname
            include_name = lv_pre_prev_inclname
            source_line  = lv_pre_prev_line ).
      ENDIF.

    ENDIF.

    RAISE EXCEPTION TYPE /bobf/cx_frw_fatal
      EXPORTING
        textid   = /bobf/cx_frw_fatal=>sc_application_error
        previous = io_exception.

  ENDMETHOD.                    "set_application_error


  METHOD set_configuration_error.

    DATA:
      lx_previous          TYPE REF TO cx_root,
      lv_previous_text     TYPE        string,              "#EC NEEDED
      lx_pre_previous      TYPE REF TO cx_root,             "#EC NEEDED
      lv_pre_previous_text TYPE        string,              "#EC NEEDED
      lv_prev_progname     TYPE        syrepid,             "#EC NEEDED
      lv_prev_inclname     TYPE        syrepid,             "#EC NEEDED
      lv_prev_line         TYPE        i,                   "#EC NEEDED
      lv_pre_prev_progname TYPE        syrepid,             "#EC NEEDED
      lv_pre_prev_inclname TYPE        syrepid,             "#EC NEEDED
      lv_pre_prev_line     TYPE        i.                   "#EC NEEDED

    " remember the fatal exception in order to refuse any further transaction manager calls
    gv_application_error = abap_true.

    " enrich to ease dump analysing
    IF io_exception           IS BOUND AND
       io_exception->previous IS BOUND.
      lx_previous = io_exception->previous.
      lv_previous_text = lx_previous->get_text( ).
      lx_previous->get_source_position(
        IMPORTING
          program_name = lv_prev_progname
          include_name = lv_prev_inclname
          source_line  = lv_prev_line ).
      IF lx_previous->previous IS BOUND.
        lx_pre_previous = lx_previous->previous.
        lv_pre_previous_text = lx_pre_previous->get_text( ).
        lx_previous->get_source_position(
          IMPORTING
            program_name = lv_pre_prev_progname
            include_name = lv_pre_prev_inclname
            source_line  = lv_pre_prev_line ).
      ENDIF.
    ENDIF.

    RAISE EXCEPTION TYPE /bobf/cx_frw_fatal
      EXPORTING
        textid   = /bobf/cx_frw_fatal=>sc_configuration_error
        previous = io_exception.


  ENDMETHOD.                    "set_configuration_error


  METHOD sort_modify_request.

    TYPES: BEGIN OF ty_key_node,
             key      TYPE /bobf/conf_key,
             node_key TYPE /bobf/conf_key,
           END OF ty_key_node.

    DATA:
      lt_create                 TYPE /bobf/t_frw_modification,    "BS: No ESF - use BOPF table type
      lt_update                 TYPE /bobf/t_frw_modification,
      lt_delete                 TYPE /bobf/t_frw_modification,
      lt_modify_duplicate_check TYPE /bobf/t_frw_modification,
      lv_quit                   TYPE boole_d,
      ls_key_node               TYPE ty_key_node,
      lv_tabix_create_sorted    TYPE sytabix,
      lt_key_node               TYPE HASHED TABLE OF ty_key_node WITH UNIQUE KEY key node_key,
      ls_key_node_before        TYPE ty_key_node,
      lt_key_node_before        TYPE HASHED TABLE OF ty_key_node WITH UNIQUE KEY key node_key.

    FIELD-SYMBOLS:
      <ls_modify>                   TYPE /bobf/s_frw_modification.

    " separate tasks
    LOOP AT ct_modification ASSIGNING <ls_modify>.
      CASE <ls_modify>-change_mode.
        WHEN /bobf/if_frw_c=>sc_modify_create.
          IF <ls_modify>-key IS INITIAL.
            <ls_modify>-key = /bobf/cl_frw_factory=>get_new_key( ).
          ENDIF.
          APPEND <ls_modify> TO lt_create.
        WHEN /bobf/if_frw_c=>sc_modify_update.
          IF <ls_modify>-key IS INITIAL.
            set_application_error( ).
          ENDIF.
          APPEND <ls_modify> TO lt_update.
        WHEN /bobf/if_frw_c=>sc_modify_delete.
          IF <ls_modify>-key IS INITIAL.
            set_application_error( ).
          ENDIF.
          APPEND <ls_modify> TO lt_delete.
        WHEN OTHERS.
          set_application_error( ).
      ENDCASE.
    ENDLOOP.

    " sort create tasks
    IF lt_create IS NOT INITIAL.

      " check if duplicate create modifications exist (same node_key and key)
      LOOP AT lt_create ASSIGNING <ls_modify>.           "#EC CI_STDSEQ
        ls_key_node-key      = <ls_modify>-key.
        ls_key_node-node_key = <ls_modify>-node.
        INSERT ls_key_node INTO TABLE lt_key_node.
        IF sy-subrc <> 0.
          " duplicated create modification exist
          set_application_error( ).
        ENDIF.
      ENDLOOP.

      " sort create modifications: ensure that parent node is created before child node if both are created in the same call
      WHILE lv_quit = abap_false.
        lv_quit = abap_true.
        CLEAR lt_key_node_before.
        LOOP AT lt_create ASSIGNING <ls_modify>.
          lv_tabix_create_sorted = sy-tabix.
          " is the parent node of the create modification also created in this container?
          READ TABLE lt_key_node
            WITH KEY key      = <ls_modify>-source_key
                     node_key = <ls_modify>-source_node
            TRANSPORTING NO FIELDS.
          IF sy-subrc = 0.
            " the parent's create modification is located it the same container
            " is it located after the current create modification?
            READ TABLE lt_key_node_before
              WITH KEY key      = <ls_modify>-source_key
                       node_key = <ls_modify>-source_node
            TRANSPORTING NO FIELDS.
            IF sy-subrc NE 0.
              " the parent's create is located after the current modification - put the current modification to the end of the container
              " (ensures the parent in front)
              APPEND <ls_modify> TO lt_create.
              DELETE lt_create INDEX lv_tabix_create_sorted.
              " do not quit the loop until sort is completed
              lv_quit = abap_false.
            ENDIF.
          ENDIF.

          " remember all instances before the current
          IF <ls_modify> IS ASSIGNED. " no switch has taken place
            ls_key_node_before-key      = <ls_modify>-key.
            ls_key_node_before-node_key = <ls_modify>-node.
            INSERT ls_key_node_before INTO TABLE lt_key_node_before.
          ENDIF.
        ENDLOOP.
      ENDWHILE.
    ENDIF.

    " combine sorted exporting structure
    CLEAR ct_modification.
    APPEND LINES OF lt_update TO ct_modification.
    APPEND LINES OF lt_delete TO ct_modification.

    " check update & delete tasks
    IF ct_modification IS NOT INITIAL .
      lt_modify_duplicate_check = ct_modification.
      SORT lt_modify_duplicate_check BY node key.
      DELETE ADJACENT DUPLICATES FROM lt_modify_duplicate_check COMPARING node key.
      IF sy-subrc = 0.
        " at least one duplicate entry detected
        set_application_error( ).
      ENDIF.
    ENDIF.

    " combine sorted exporting structure
    INSERT LINES OF lt_create INTO ct_modification INDEX 1.

  ENDMETHOD.                    "sort_modify_request
ENDCLASS.