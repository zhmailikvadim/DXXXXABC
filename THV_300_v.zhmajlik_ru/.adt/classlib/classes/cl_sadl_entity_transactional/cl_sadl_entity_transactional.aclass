CLASS cl_sadl_entity_transactional DEFINITION
  PUBLIC
  ABSTRACT
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES if_badi_interface .
    INTERFACES if_sadl_entity_transactional
      FINAL METHODS create
      create_action_parameter_ref
      create_by_association
      create_by_association_single
      create_entity_key_struct_ref
      create_entity_key_table_ref
      create_entity_structure_ref
      create_entity_table_ref
      create_single
      delete
      delete_single
      execute
      execute_single
      get_message_handler
      get_properties
      get_properties_action
      get_properties_action_single
      get_properties_elements
      get_properties_elements_single
      get_properties_entity
      get_properties_entity_single
      read
      read_by_association
      read_by_association_single
      read_keys_by_association
      read_key_by_association_single
      read_single
      update
      update_single .
    INTERFACES if_sadl_entity_container_fctry .
    INTERFACES if_sadl_entity_transact_props .

    TYPES:
      BEGIN OF ty_key_element_value,
        name  TYPE sadl_entity_element,
        value TYPE string,
      END OF ty_key_element_value .
    TYPES:
      tt_key_element_values TYPE STANDARD TABLE OF ty_key_element_value WITH KEY name .

    METHODS constructor
      IMPORTING
        !iv_entity_type TYPE sadl_entity_type
        !iv_entity_id   TYPE sadl_entity_id
      RAISING
        cx_sadl_static
        cx_sadl_contract_violation .
  PROTECTED SECTION.

    CONSTANTS co_register TYPE string VALUE 'Register transactional condition provider'. "#EC NOTEXT
    DATA mv_sadl_entity_type TYPE sadl_entity_type .
    DATA mo_sadl_entity TYPE REF TO if_sadl_entity .

    METHODS get_sadl_entity IMPORTING iv_entity_id     TYPE sadl_entity_id OPTIONAL
                            RETURNING VALUE(ro_entity) TYPE REF TO if_sadl_entity
                            RAISING   cx_sadl_static .

    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create IMPORTING iv_requested_alternative_key TYPE if_sadl_entity=>ty_key_name OPTIONAL
                    EXPORTING et_failed                    TYPE if_sadl_entity_transactional=>tt_tabix
                    CHANGING  ct_entity_data               TYPE STANDARD TABLE
                    RAISING   cx_sadl_static
                              cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_by_association IMPORTING iv_association_name            TYPE sadl_entity_association
                                             iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                             is_source_key_values           TYPE data
                                             iv_requested_target_alt_key    TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                   EXPORTING ev_source_failed               TYPE abap_bool
                                             et_target_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                   CHANGING  ct_target_entity_data          TYPE STANDARD TABLE
                                   RAISING   cx_sadl_static
                                             cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _update IMPORTING iv_alternative_key_name       TYPE if_sadl_entity=>ty_key_name OPTIONAL
                              it_updated_elements_per_tabix TYPE if_sadl_entity_transactional=>tt_elements_per_tabix OPTIONAL
                              it_entity_data                TYPE STANDARD TABLE
                    EXPORTING et_failed                     TYPE if_sadl_entity_transactional=>tt_tabix
                    RAISING   cx_sadl_static
                              cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _delete IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                              it_key_values           TYPE INDEX TABLE
                    EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                    RAISING   cx_sadl_static
                              cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read_keys_by_association IMPORTING iv_association_name            TYPE sadl_entity_association
                                                iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                it_source_key_values           TYPE INDEX TABLE
                                                iv_target_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                iv_target_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                                      EXPORTING et_source_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                                et_target_key_values           TYPE INDEX TABLE
                                                et_links                       TYPE if_sadl_entity_transactional=>tt_tabix_links
                                      RAISING   cx_sadl_static
                                                cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read_by_association IMPORTING iv_association_name            TYPE sadl_entity_association
                                           iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                           it_source_key_values           TYPE INDEX TABLE
                                           iv_target_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                           it_requested_elements          TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                           iv_target_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                                 EXPORTING et_source_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                           et_target_entity_data          TYPE STANDARD TABLE
                                           et_links                       TYPE if_sadl_entity_transactional=>tt_tabix_links
                                 RAISING   cx_sadl_static
                                           cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                            it_requested_elements   TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                            it_key_values           TYPE INDEX TABLE
                            iv_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                  EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                            et_entity_data          TYPE STANDARD TABLE
                  RAISING   cx_sadl_static
                            cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_single IMPORTING iv_requested_alternative_key TYPE if_sadl_entity=>ty_key_name OPTIONAL
                           EXPORTING ev_failed                    TYPE abap_bool
                           CHANGING  cs_entity_data               TYPE data
                           RAISING   cx_sadl_static
                                     cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_by_association_single IMPORTING iv_association_name            TYPE sadl_entity_association
                                                    iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                    is_source_key_values           TYPE data
                                                    iv_requested_target_alt_key    TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                          EXPORTING ev_source_failed               TYPE abap_bool
                                                    ev_target_failed               TYPE abap_bool
                                          CHANGING  cs_target_entity_data          TYPE data
                                          RAISING   cx_sadl_static
                                                    cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _update_single IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                     it_updated_elements     TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                     is_entity_data          TYPE data
                           EXPORTING ev_failed               TYPE abap_bool
                           RAISING   cx_sadl_static
                                     cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _delete_single IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                     is_key_values           TYPE data
                           EXPORTING ev_failed               TYPE abap_bool
                           RAISING   cx_sadl_static
                                     cx_sadl_contract_violation .
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read_key_by_assoc_single IMPORTING iv_association_name            TYPE sadl_entity_association
                                                iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                is_source_key_values           TYPE data
                                                iv_target_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                iv_target_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                                      EXPORTING ev_source_failed               TYPE abap_bool
                                                et_target_key_values           TYPE INDEX TABLE
                                      RAISING   cx_sadl_static
                                                cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read_single IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                   is_key_values           TYPE data
                                   it_requested_elements   TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                   iv_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                         EXPORTING ev_failed               TYPE abap_bool
                                   es_entity_data          TYPE data
                         RAISING   cx_sadl_static
                                   cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _read_by_association_single IMPORTING iv_association_name            TYPE sadl_entity_association
                                                  iv_source_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                  is_source_key_values           TYPE data
                                                  iv_target_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                                  it_requested_elements          TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                                  iv_target_edit_mode            TYPE if_sadl_entity_transactional=>ty_edit_mode
                                        EXPORTING ev_source_failed               TYPE abap_bool
                                                  et_target_entity_data          TYPE STANDARD TABLE
                                        RAISING   cx_sadl_static
                                                  cx_sadl_contract_violation.

    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _execute IMPORTING iv_action_name          TYPE sadl_entity_action
                               i_action_parameters     TYPE data OPTIONAL
                               iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                               it_key_values           TYPE INDEX TABLE OPTIONAL
                     EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                               ev_static_action_failed TYPE abap_bool
                               et_data                 TYPE ANY TABLE
                     RAISING   cx_sadl_static cx_sadl_contract_violation.

    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _execute_single IMPORTING iv_action_name          TYPE sadl_entity_action
                                      i_action_parameters     TYPE data OPTIONAL
                                      iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                      is_key_values           TYPE data
                            EXPORTING ev_failed               TYPE abap_bool
                                      et_data                 TYPE ANY TABLE
                            RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_entity_table_ref RETURNING VALUE(rr_table_ref) TYPE REF TO data
                                     RAISING   cx_sadl_static
                                               cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_entity_structure_ref RETURNING VALUE(rr_structure_ref) TYPE REF TO data
                                         RAISING   cx_sadl_static
                                                   cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_entity_key_struct_ref IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name
                                          RETURNING VALUE(rr_structure_ref) TYPE REF TO data
                                          RAISING   cx_sadl_static
                                                    cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_entity_key_table_ref IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name
                                         RETURNING VALUE(rr_table_ref)     TYPE REF TO data
                                         RAISING   cx_sadl_static
                                                   cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _create_action_parameter_ref IMPORTING iv_action_name TYPE sadl_entity_action
                                         RETURNING VALUE(rr_data) TYPE REF TO data
                                         RAISING   cx_sadl_static
                                                   cx_sadl_contract_violation.

    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _get_properties_action IMPORTING iv_action_name          TYPE sadl_entity_action
                                             iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name
                                             it_key_values           TYPE INDEX TABLE
                                   EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                             et_properties           TYPE if_sadl_entity_transactional=>tt_properties_action
                                   RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _get_properties_association IMPORTING iv_association_name     TYPE sadl_entity_association
                                                  iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name
                                                  it_key_values           TYPE INDEX TABLE
                                        EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                                  et_properties           TYPE if_sadl_entity_transact_props=>tt_properties_association
                                        RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _get_properties_elements IMPORTING it_requested_elements       TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                               iv_alternative_key_name     TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                               it_key_values               TYPE INDEX TABLE
                                     EXPORTING et_failed                   TYPE if_sadl_entity_transactional=>tt_tabix
                                               et_props_by_tabix_and_elems TYPE if_sadl_entity_transactional=>tt_props_elements_by_tabix
                                     RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Intended to be overwritten
    "! For documentation of its parameters, see corresponding method of if_sadl_entity_transactional
    METHODS _get_properties_entity IMPORTING iv_alternative_key_name TYPE if_sadl_entity=>ty_key_name OPTIONAL
                                             it_key_values           TYPE INDEX TABLE
                                   EXPORTING et_failed               TYPE if_sadl_entity_transactional=>tt_tabix
                                             et_properties           TYPE if_sadl_entity_transactional=>tt_properties_entity
                                   RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Returns the requested properties for multiple instances. An existence check for the supplied key values is NOT required.
    "! @parameter iv_alternative_key_name | Name of the key the instance to be read is represented by. If initial, the primary key is used.
    "! @parameter it_key_values | Table of key values representing the instance to be read. Therefore the table structure must at least contain the elements of the specified key.
    "! @parameter iv_fill_entity_properties | indicates if entity properties should be read.
    "! @parameter it_requested_elements | Table containing the element names for which the properties should be read. If initial, NO element properties are read.
    "! @parameter it_requested_actions | Table containing the action names for which the properties should be read. If initial, NO action properties are read.
    "! @parameter it_requested_associations | Table containing the association names for which the properties should be read. If initial, NO association properties are read.
    "! @parameter et_entity_properties | Entity properties for the requested instances. These are the merged static and dynamic properties.
    "! If a tabix has no entry in et_entity_properties, the consumer uses the properties specified in es_default_entity_properties.
    "! @parameter et_element_properties | Properties for the requested elements. One table line contains the merged static and dynamic properties of one element of one instance.
    "! @parameter es_default_entity_properties | Must be filled if entity properties are requested and a line of et_entity_properties is omitted.
    "! If a combination tabix/element name has no entry in et_element_properties, et_default_element_properties must have an entry for that element name, which
    "! will be used by the consumer instead.
    "! @parameter et_default_element_properties | Must be filled if element properties are requested and a line of et_element_properties is omitted.
    "! @parameter et_action_properties | Properties for the requested actions. Analogous to et_element_properties.
    "! @parameter et_default_action_properties | Must be filled if action properties are requested and a line of et_action_properties is omitted.
    "! @parameter et_association_properties | Properties for the requested associations. Analogous to et_element_properties.
    "! @parameter et_default_assoc_properties | Must be filled if association properties are requested and a line of et_association_properties is omitted.
    METHODS _get_properties IMPORTING it_key_values                 TYPE INDEX TABLE
                                      iv_alternative_key_name       TYPE if_sadl_public_types=>ty_key_name OPTIONAL
                                      iv_fill_entity_properties     TYPE abap_bool OPTIONAL
                                      it_requested_elements         TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                                      it_requested_actions          TYPE string_sorted_table OPTIONAL
                                      it_requested_associations     TYPE string_sorted_table OPTIONAL
                            EXPORTING et_entity_properties          TYPE if_sadl_entity_transactional=>tt_properties_entity_by_tabix
                                      es_default_entity_properties  TYPE if_sadl_entity_transactional=>ty_properties_entity
                                      et_element_properties         TYPE if_sadl_entity_transactional=>tt_props_elements_by_tabix
                                      et_default_element_properties TYPE if_sadl_entity_transactional=>tt_properties_elements_by_name
                                      et_action_properties          TYPE if_sadl_entity_transactional=>tt_properties_actions_by_tabix
                                      et_default_action_properties  TYPE if_sadl_entity_transactional=>tt_properties_by_action
                                      et_association_properties     TYPE if_sadl_entity_transactional=>tt_props_associations_by_tabix
                                      et_default_assoc_properties   TYPE if_sadl_entity_transactional=>tt_properties_by_association
                            RAISING   cx_sadl_static cx_sadl_contract_violation.
    "! Frameworks can redefine this method. It returns an instance of cl_sadl_frwk_message_handler or its subclass.
    METHODS _create_message_handler RETURNING VALUE(ro_message_handler) TYPE REF TO cl_sadl_frwk_message_handler.
    "! Frameworks can call this method in order to get the message handler, e.g. to add a message.
    METHODS _get_message_handler FINAL RETURNING VALUE(ro_message_handler) TYPE REF TO cl_sadl_frwk_message_handler.
    "! Frameworks can call this method in order to add a message. It is meant for the 95% case (one message location; entity type and id are the
    "! ones of the entity adding the message).
    METHODS _add_message IMPORTING iv_severity           TYPE if_sadl_message_handler=>ty_severity
                                   io_message            TYPE REF TO if_t100_message
                                   iv_lifetime           TYPE if_sadl_message_handler=>ty_lifetime OPTIONAL
                                   iv_symptom            TYPE if_sadl_message_handler=>ty_symptom OPTIONAL
                                   iv_context            TYPE if_sadl_message_handler=>ty_context OPTIONAL
                                   is_primary_key_values TYPE data OPTIONAL
                                   it_element_names      TYPE if_sadl_entity_transactional=>tt_element_names OPTIONAL
                         RAISING   cx_sadl_static cx_sadl_contract_violation.

  PRIVATE SECTION.
    DATA mo_message_handler TYPE REF TO cl_sadl_frwk_message_handler.
    DATA mo_calc_exit_handler TYPE REF TO cl_sadl_exit_handler.

    METHODS create_table_and_append_line IMPORTING is_line                  TYPE data
                                         RETURNING VALUE(rr_standard_table) TYPE REF TO data.

    METHODS before_read IMPORTING iv_association_name   TYPE sadl_entity_association OPTIONAL
                        CHANGING  ct_requested_elements TYPE if_sadl_entity_transactional=>tt_element_names
                        RAISING   cx_sadl_static cx_sadl_contract_violation.
    METHODS after_read CHANGING ct_entity_data TYPE STANDARD TABLE RAISING cx_sadl_static cx_sadl_contract_violation.
    METHODS after_read_single CHANGING cs_entity_data TYPE data RAISING cx_sadl_static cx_sadl_contract_violation.
    METHODS _get_updated_elements
      IMPORTING
        it_updated_elements        TYPE if_sadl_entity_transactional=>tt_element_names
      RETURNING
        VALUE(rt_updated_elements) TYPE if_sadl_entity_transactional=>tt_element_names
      RAISING
        cx_sadl_entity..
ENDCLASS.



CLASS CL_SADL_ENTITY_TRANSACTIONAL IMPLEMENTATION.


  METHOD after_read.
    CHECK mo_calc_exit_handler IS BOUND.
    mo_calc_exit_handler->execute_calculation( CHANGING ct_data_rows = ct_entity_data ).
  ENDMETHOD.


  METHOD after_read_single.
    DATA lr_entity_data TYPE REF TO data.
    FIELD-SYMBOLS <lt_entity_data> TYPE STANDARD TABLE.

    CHECK mo_calc_exit_handler IS BOUND.
    CHECK mo_calc_exit_handler->needs_calculation( ) = abap_true.
    CREATE DATA lr_entity_data LIKE STANDARD TABLE OF cs_entity_data WITH DEFAULT KEY.
    ASSIGN lr_entity_data->* TO <lt_entity_data>.
    <lt_entity_data> = VALUE #( (  cs_entity_data ) ).
    after_read( CHANGING ct_entity_data = <lt_entity_data> ).
    cs_entity_data = <lt_entity_data>[ 1 ].
  ENDMETHOD.


  METHOD before_read.
    DATA lt_requested_elements TYPE if_sadl_public_types=>tt_requested_elements.

    CLEAR mo_calc_exit_handler.
    CHECK mo_sadl_entity IS BOUND.
    CHECK mo_sadl_entity->get_type( ) = 'SADL'. "for the time being
    IF iv_association_name IS INITIAL.
      DATA(lo_sadl_entity) = mo_sadl_entity.
    ELSE.
      TRY.
          lo_sadl_entity = mo_sadl_entity->get_association_target( iv_association_name ).
        CATCH cx_sadl_static.
          RETURN.
      ENDTRY.
    ENDIF.
    DATA(lv_entity_id) = lo_sadl_entity->get_id( ).
    TRY.
        DATA(lo_mdp) = cl_sadl_mdp_factory=>get_mdp_for_id( lv_entity_id ).
      CATCH cx_sadl_load_not_in_cache.
        RETURN.
    ENDTRY.
    mo_calc_exit_handler = NEW cl_sadl_exit_handler( io_mdp = lo_mdp iv_entity_id = lv_entity_id ).
    lt_requested_elements = CONV #( ct_requested_elements ).
    mo_calc_exit_handler->adjust_requested( CHANGING ct_requested_element = lt_requested_elements ).
    CLEAR ct_requested_elements.
    INSERT LINES OF lt_requested_elements INTO TABLE ct_requested_elements.
  ENDMETHOD.


  METHOD constructor.
    mv_sadl_entity_type = iv_entity_type.
    mo_sadl_entity = cl_sadl_entity_factory=>get_instance( )->get_entity( iv_id = iv_entity_id  iv_type = iv_entity_type ).
  ENDMETHOD.


  METHOD create_table_and_append_line.
    FIELD-SYMBOLS <t_data> TYPE STANDARD TABLE.
    CREATE DATA rr_standard_table LIKE TABLE OF is_line.
    ASSIGN rr_standard_table->* TO <t_data>.
    APPEND is_line TO <t_data>.
  ENDMETHOD.


  METHOD get_sadl_entity.
    IF iv_entity_id IS INITIAL.
      ro_entity = mo_sadl_entity.
    ELSE.
      ro_entity = cl_sadl_entity_factory=>get_instance( )->get_entity( iv_id = iv_entity_id  iv_type = mv_sadl_entity_type ).
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_action_parameter_ref.
    rr_data = _create_action_parameter_ref( iv_action_name ).
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_entity_key_struct_ref.
    rr_structure_ref = _create_entity_key_struct_ref( iv_alternative_key_name ).
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_entity_key_table_ref.
    rr_table_ref = _create_entity_key_table_ref( iv_alternative_key_name ).
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_entity_structure_ref.
    rr_structure_ref = _create_entity_structure_ref( ).
  ENDMETHOD.


  METHOD if_sadl_entity_container_fctry~create_entity_table_ref.
    rr_table_ref = _create_entity_table_ref( ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~create.
    _create( EXPORTING iv_requested_alternative_key = iv_requested_alternative_key
             IMPORTING et_failed                    = et_failed
             CHANGING  ct_entity_data               = ct_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~create_by_association.
    _create_by_association( EXPORTING iv_association_name            = iv_association_name
                                      iv_source_alternative_key_name = iv_source_alternative_key_name
                                      is_source_key_values           = is_source_key_values
                                      iv_requested_target_alt_key    = iv_requested_target_alt_key
                            IMPORTING ev_source_failed               = ev_source_failed
                                      et_target_failed               = et_target_failed
                            CHANGING  ct_target_entity_data          = ct_target_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~create_by_association_single.
    _create_by_association_single( EXPORTING iv_association_name            = iv_association_name
                                             iv_source_alternative_key_name = iv_source_alternative_key_name
                                             is_source_key_values           = is_source_key_values
                                             iv_requested_target_alt_key    = iv_requested_target_alt_key
                                   IMPORTING ev_source_failed               = ev_source_failed
                                             ev_target_failed               = ev_target_failed
                                   CHANGING  cs_target_entity_data          = cs_target_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~create_single.
    _create_single( EXPORTING iv_requested_alternative_key = iv_requested_alternative_key
                    IMPORTING ev_failed                    = ev_failed
                    CHANGING  cs_entity_data               = cs_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~delete.
    _delete( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                       it_key_values           = it_key_values
             IMPORTING et_failed               = et_failed ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~delete_single.
    _delete_single( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                              is_key_values           = is_key_values
                    IMPORTING ev_failed               = ev_failed ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~execute.
    _execute( EXPORTING iv_action_name          = iv_action_name
                        i_action_parameters     = i_action_parameters
                        iv_alternative_key_name = iv_alternative_key_name
                        it_key_values           = it_key_values
              IMPORTING et_failed               = et_failed
                        ev_static_action_failed = ev_static_action_failed
                        et_data                 = et_data  ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~execute_single.
    _execute_single( EXPORTING iv_action_name          = iv_action_name
                               i_action_parameters     = i_action_parameters
                               iv_alternative_key_name = iv_alternative_key_name
                               is_key_values           = is_key_values
                     IMPORTING ev_failed               = ev_failed
                               et_data                 = et_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~get_message_handler.
    ro_message_handler = _get_message_handler( ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read.
    DATA(lt_requested_elements) = it_requested_elements.
    before_read( CHANGING ct_requested_elements = lt_requested_elements ).
    _read( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                     it_requested_elements   = lt_requested_elements
                     it_key_values           = it_key_values
                     iv_edit_mode            = iv_edit_mode
           IMPORTING et_failed               = et_failed
                     et_entity_data          = et_entity_data ).
    after_read( CHANGING ct_entity_data = et_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_by_association.
    DATA(lt_requested_elements) = it_requested_elements.
    before_read( EXPORTING iv_association_name = iv_association_name CHANGING ct_requested_elements = lt_requested_elements ).
    _read_by_association( EXPORTING iv_association_name            = iv_association_name
                                    iv_source_alternative_key_name = iv_source_alternative_key_name
                                    it_source_key_values           = it_source_key_values
                                    iv_target_alternative_key_name = iv_target_alternative_key_name
                                    it_requested_elements          = lt_requested_elements
                                    iv_target_edit_mode            = iv_target_edit_mode
                          IMPORTING et_source_failed               = et_source_failed
                                    et_target_entity_data          = et_target_entity_data
                                    et_links                       = et_links ).
    after_read( CHANGING ct_entity_data = et_target_entity_data ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_by_association_single.
    DATA(lt_requested_elements) = it_requested_elements.
    before_read( EXPORTING iv_association_name = iv_association_name CHANGING ct_requested_elements = lt_requested_elements ).
    _read_by_association_single( EXPORTING iv_association_name            = iv_association_name
                                           iv_source_alternative_key_name = iv_source_alternative_key_name
                                           is_source_key_values           = is_source_key_values
                                           iv_target_alternative_key_name = iv_target_alternative_key_name
                                           it_requested_elements          = it_requested_elements
                                           iv_target_edit_mode            = iv_target_edit_mode
                                 IMPORTING ev_source_failed               = ev_source_failed
                                           et_target_entity_data          = et_target_entity_data ).
    IF ev_source_failed = abap_false.
      after_read( CHANGING ct_entity_data = et_target_entity_data ).
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_keys_by_association.
    _read_keys_by_association( EXPORTING iv_association_name            = iv_association_name
                                         iv_source_alternative_key_name = iv_source_alternative_key_name
                                         it_source_key_values           = it_source_key_values
                                         iv_target_alternative_key_name = iv_target_alternative_key_name
                                         iv_target_edit_mode            = iv_target_edit_mode
                               IMPORTING et_source_failed               = et_source_failed
                                         et_target_key_values           = et_target_key_values
                                         et_links                       = et_links ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_key_by_association_single.
    _read_key_by_assoc_single( EXPORTING iv_association_name            = iv_association_name
                                         iv_source_alternative_key_name = iv_source_alternative_key_name
                                         is_source_key_values           = is_source_key_values
                                         iv_target_alternative_key_name = iv_target_alternative_key_name
                                         iv_target_edit_mode            = iv_target_edit_mode
                               IMPORTING ev_source_failed               = ev_source_failed
                                         et_target_key_values           = et_target_key_values ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~read_single.
    DATA(lt_requested_elements) = it_requested_elements.
    before_read( CHANGING ct_requested_elements = lt_requested_elements ).
    _read_single( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                            it_requested_elements   = lt_requested_elements
                            is_key_values           = is_key_values
                            iv_edit_mode            = iv_edit_mode
                  IMPORTING ev_failed               = ev_failed
                            es_entity_data          = es_entity_data ).
    IF ev_failed = abap_false.
      after_read_single( CHANGING cs_entity_data = es_entity_data ).
    ENDIF.
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~update.
*    DATA(lt_updated_elements_per_tabix) = it_updated_elements_per_tabix.
*    LOOP AT lt_updated_elements_per_tabix ASSIGNING FIELD-SYMBOL(<s_elements_per_tabix>).
*      <s_elements_per_tabix>-elements = _get_updated_elements( <s_elements_per_tabix>-elements ).
*    ENDLOOP.
    _update( EXPORTING iv_alternative_key_name       = iv_alternative_key_name
                       it_updated_elements_per_tabix = it_updated_elements_per_tabix
                       it_entity_data                = it_entity_data
             IMPORTING et_failed                     = et_failed ).
  ENDMETHOD.


  METHOD if_sadl_entity_transactional~update_single.
*    DATA(lt_updated_elements) = _get_updated_elements( it_updated_elements ).
    _update_single( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                              it_updated_elements     = it_updated_elements
                              is_entity_data          = is_entity_data
                    IMPORTING ev_failed               = ev_failed ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties.
    _get_properties( EXPORTING it_key_values                 = it_key_values
                               iv_alternative_key_name       = iv_alternative_key_name
                               iv_fill_entity_properties     = iv_fill_entity_properties
                               it_requested_elements         = it_requested_elements
                               it_requested_actions          = it_requested_actions
                               it_requested_associations     = it_requested_associations
                     IMPORTING et_entity_properties          = et_entity_properties
                               es_default_entity_properties  = es_default_entity_properties
                               et_element_properties         = et_element_properties
                               et_default_element_properties = et_default_element_properties
                               et_action_properties          = et_action_properties
                               et_default_action_properties  = et_default_action_properties
                               et_association_properties     = et_association_properties
                               et_default_assoc_properties   = et_default_assoc_properties ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_action.
    _get_properties_action( EXPORTING iv_action_name          = iv_action_name
                                      it_key_values           = it_key_values
                                      iv_alternative_key_name = iv_alternative_key_name
                            IMPORTING et_failed               = et_failed
                                      et_properties           = et_properties ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_action_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_key_values) = create_table_and_append_line( is_key_values  ).
    ASSIGN lr_key_values->* TO <t_key_values>.

    CLEAR es_properties.

    if_sadl_entity_transactional~get_properties_action( EXPORTING iv_action_name          = iv_action_name
                                                                  iv_alternative_key_name = iv_alternative_key_name
                                                                  it_key_values           = <t_key_values>
                                                        IMPORTING et_failed               = DATA(lt_failed)
                                                                  et_properties           = DATA(lt_properties) ).
    IF lt_properties IS NOT INITIAL.
      es_properties = lt_properties[ 1 ].
    ENDIF.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_association.
    CLEAR: et_failed, et_properties.
    _get_properties_association( EXPORTING iv_association_name     = iv_association_name
                                           it_key_values           = it_key_values
                                           iv_alternative_key_name = iv_alternative_key_name
                                 IMPORTING et_failed               = et_failed
                                           et_properties           = et_properties ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_assoc_single.
    CLEAR: es_properties, ev_failed.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_key_values  ).
    ASSIGN lr_data->* TO <t_key_values>.

    CLEAR es_properties.

    _get_properties_association( EXPORTING iv_association_name     = iv_association_name
                                           iv_alternative_key_name = iv_alternative_key_name
                                           it_key_values           = <t_key_values>
                                 IMPORTING et_failed               = DATA(lt_failed)
                                           et_properties           = DATA(lt_properties) ).
    IF lt_properties IS NOT INITIAL.
      es_properties = lt_properties[ 1 ].
    ENDIF.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_elements.
    _get_properties_elements( EXPORTING it_requested_elements       = it_requested_elements
                                        iv_alternative_key_name     = iv_alternative_key_name
                                        it_key_values               = it_key_values
                              IMPORTING et_failed                   = et_failed
                                        et_props_by_tabix_and_elems = et_props_by_tabix_and_elems ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_elements_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_key_values) = create_table_and_append_line( is_key_values  ).
    ASSIGN lr_key_values->* TO <t_key_values>.

    CLEAR et_properties_by_element.

    if_sadl_entity_transactional~get_properties_elements( EXPORTING it_requested_elements       = it_requested_elements
                                                                    iv_alternative_key_name     = iv_alternative_key_name
                                                                    it_key_values               = <t_key_values>
                                                          IMPORTING et_failed                   = DATA(lt_failed)
                                                                    et_props_by_tabix_and_elems = DATA(lt_props_by_tabix_and_elems) ).
    MOVE-CORRESPONDING lt_props_by_tabix_and_elems TO et_properties_by_element.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_entity.
    _get_properties_entity( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                                      it_key_values           = it_key_values
                            IMPORTING et_failed               = et_failed
                                      et_properties           = et_properties ).
  ENDMETHOD.


  METHOD if_sadl_entity_transact_props~get_properties_entity_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_key_values  ).
    ASSIGN lr_data->* TO <t_key_values>.

    CLEAR es_properties.

    if_sadl_entity_transactional~get_properties_entity( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                                                                  it_key_values           = <t_key_values>
                                                        IMPORTING et_failed               = DATA(lt_failed)
                                                                  et_properties           = DATA(lt_properties) ).
    IF lt_properties IS NOT INITIAL.
      es_properties = lt_properties[ 1 ].
    ENDIF.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _add_message.
    DATA ls_location TYPE if_sadl_message_handler=>ty_location.
    ls_location = VALUE #( entity_type   = get_sadl_entity( )->get_type( )
                           entity_id     = get_sadl_entity( )->get_id( )
                           element_names = it_element_names ).
    IF is_primary_key_values IS SUPPLIED AND is_primary_key_values IS NOT INITIAL.
      " create data reference on Heap (instead of Stack) and copy the content into it
      CREATE DATA ls_location-primary_key_values LIKE is_primary_key_values.
      ASSIGN ls_location-primary_key_values->* TO FIELD-SYMBOL(<deref>).
      <deref> = is_primary_key_values.
    ENDIF.

    _get_message_handler( )->add_message( is_message = VALUE #( locations = VALUE #( ( ls_location ) )
                                                                message   = io_message
                                                                severity  = iv_severity
                                                                lifetime  = iv_lifetime
                                                                context   = iv_context
                                                                symptom   = iv_symptom ) ).
  ENDMETHOD.


  METHOD _create.
    " Intended to be overwritten
    CLEAR: et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_create'.
  ENDMETHOD.


  METHOD _create_action_parameter_ref.
    DATA(lv_data_type) = mo_sadl_entity->get_action( iv_action_name )-data_type.
    IF lv_data_type IS NOT INITIAL.
      CREATE DATA rr_data TYPE (lv_data_type).
    ELSE.
      RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
        EXPORTING
          textid      = cx_sadl_entity_trans_impl=>no_data_type
          entity_id   = get_sadl_entity( )->get_id( )
          entity_type = get_sadl_entity( )->get_type( ).
    ENDIF.
  ENDMETHOD.


  METHOD _create_by_association.
    " Intended to be overwritten
    CLEAR: et_target_failed, ev_source_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_create_by_association'.
  ENDMETHOD.


  METHOD _create_by_association_single.
    FIELD-SYMBOLS <t_data> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( cs_target_entity_data ).
    ASSIGN lr_data->* TO <t_data>.

    CLEAR cs_target_entity_data.
    _create_by_association( EXPORTING iv_association_name            = iv_association_name
                                      iv_source_alternative_key_name = iv_source_alternative_key_name
                                      is_source_key_values           = is_source_key_values
                                      iv_requested_target_alt_key    = iv_requested_target_alt_key
                            IMPORTING ev_source_failed               = ev_source_failed
                                      et_target_failed               = DATA(lt_target_failed)
                            CHANGING  ct_target_entity_data          = <t_data> ).
    IF <t_data> IS NOT INITIAL.
      READ TABLE <t_data> INDEX 1 INTO cs_target_entity_data.
    ENDIF.
    ev_target_failed = boolc( lt_target_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _create_entity_key_struct_ref.
    " Per default the entity container is used that automatically includes all key fields
    rr_structure_ref = _create_entity_structure_ref( ).
  ENDMETHOD.


  METHOD _create_entity_key_table_ref.
    " Per default the entity container is used that automatically includes all key fields
    rr_table_ref = _create_entity_table_ref( ).
  ENDMETHOD.


  METHOD _create_entity_structure_ref.
    DATA(lv_entity_row_type) = get_sadl_entity( )->get_row_type_name( ).
    IF lv_entity_row_type IS NOT INITIAL.
      CREATE DATA rr_structure_ref TYPE (lv_entity_row_type).
    ELSE.
      RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
        EXPORTING
          textid      = cx_sadl_entity_trans_impl=>no_data_type
          entity_id   = get_sadl_entity( )->get_id( )
          entity_type = get_sadl_entity( )->get_type( ).
    ENDIF.
  ENDMETHOD.


  METHOD _create_entity_table_ref.
    DATA(lv_entity_row_type) = get_sadl_entity( )->get_row_type_name( ).
    IF lv_entity_row_type IS NOT INITIAL.
      CREATE DATA rr_table_ref TYPE STANDARD TABLE OF (lv_entity_row_type).
    ELSE.
      RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
        EXPORTING
          textid      = cx_sadl_entity_trans_impl=>no_data_type
          entity_id   = get_sadl_entity( )->get_id( )
          entity_type = get_sadl_entity( )->get_type( ).
    ENDIF.
  ENDMETHOD.


  METHOD _create_message_handler.
    ro_message_handler = NEW cl_sadl_frwk_message_handler( ).
  ENDMETHOD.


  METHOD _create_single.
    FIELD-SYMBOLS <t_data> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( cs_entity_data ).
    ASSIGN lr_data->* TO <t_data>.

    CLEAR cs_entity_data.
    _create( EXPORTING iv_requested_alternative_key = iv_requested_alternative_key
             IMPORTING et_failed      = DATA(lt_failed)
             CHANGING  ct_entity_data = <t_data> ).

    IF <t_data> IS NOT INITIAL.
      READ TABLE <t_data> INDEX 1 INTO cs_entity_data.
    ENDIF.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _delete.
    " Intended to be overwritten
    CLEAR: et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_delete'.
  ENDMETHOD.


  METHOD _delete_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_key_values_tab) = create_table_and_append_line( is_key_values ).
    ASSIGN lr_key_values_tab->* TO <t_key_values>.

    _delete( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                       it_key_values           = <t_key_values>
             IMPORTING et_failed               = DATA(lt_failed) ).
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _execute.
    CLEAR et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_execute' ##no_text.
  ENDMETHOD.


  METHOD _execute_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_key_values ).
    ASSIGN lr_data->* TO <t_key_values>.

    _execute( EXPORTING iv_action_name          = iv_action_name
                        iv_alternative_key_name = iv_alternative_key_name
                        i_action_parameters     = i_action_parameters
                        it_key_values           = <t_key_values>
              IMPORTING et_failed               = DATA(lt_failed)
                        ev_static_action_failed = ev_failed
                        et_data                 = et_data ).
    ev_failed = boolc( lt_failed IS NOT INITIAL OR ev_failed = abap_true ).
  ENDMETHOD.


  METHOD _get_message_handler.
    IF mo_message_handler IS NOT BOUND.
      mo_message_handler = _create_message_handler( ).
    ENDIF.
    ro_message_handler = mo_message_handler.
  ENDMETHOD.


  METHOD _get_properties.
    CLEAR: et_entity_properties,  es_default_entity_properties, et_element_properties, et_default_element_properties,
           et_action_properties, et_default_action_properties, et_association_properties, et_default_assoc_properties.
    " can be overwritten in order to optimize performance
    LOOP AT it_requested_actions INTO DATA(lv_action).
      _get_properties_action( EXPORTING iv_action_name          = lv_action
                                        iv_alternative_key_name = iv_alternative_key_name
                                        it_key_values           = it_key_values
                              IMPORTING et_properties           = DATA(lt_single_action_p) ).
      LOOP AT lt_single_action_p INTO DATA(ls_action_p).
        INSERT VALUE #( action = lv_action  tabix = sy-tabix  properties = ls_action_p ) INTO TABLE et_action_properties.
      ENDLOOP.
    ENDLOOP.

    LOOP AT it_requested_associations INTO DATA(lv_association).
      _get_properties_association( EXPORTING iv_association_name     = lv_association
                                             iv_alternative_key_name = iv_alternative_key_name
                                             it_key_values           = it_key_values
                                   IMPORTING et_properties           = DATA(lt_single_association_p) ).
      LOOP AT lt_single_association_p INTO DATA(ls_association_p).
        INSERT VALUE #( association = lv_association  tabix = sy-tabix  properties = ls_association_p ) INTO TABLE et_association_properties.
      ENDLOOP.
    ENDLOOP.

    IF iv_fill_entity_properties = abap_true.
      _get_properties_entity( EXPORTING iv_alternative_key_name = iv_alternative_key_name
                                        it_key_values           = it_key_values
                              IMPORTING et_properties           = DATA(lt_entity_p) ).
      LOOP AT lt_entity_p INTO DATA(ls_entity_p).
        INSERT VALUE #( tabix = sy-tabix  properties = ls_entity_p ) INTO TABLE et_entity_properties.
      ENDLOOP.
    ENDIF.

    IF it_requested_elements IS NOT INITIAL.
      _get_properties_elements( EXPORTING it_requested_elements       = it_requested_elements
                                          iv_alternative_key_name     = iv_alternative_key_name
                                          it_key_values               = it_key_values
                                IMPORTING et_props_by_tabix_and_elems = et_element_properties ).
    ENDIF.
  ENDMETHOD.


  METHOD _get_properties_action.
    " Intended to be overwritten
    CLEAR: et_properties, et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_get_properties_action'.
  ENDMETHOD.


  METHOD _get_properties_association.
    " Intended to be overwritten
    CLEAR: et_properties, et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_get_properties_association'.
  ENDMETHOD.


  METHOD _get_properties_elements.
    " Intended to be overwritten
    CLEAR: et_props_by_tabix_and_elems, et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_get_properties_elements'.
  ENDMETHOD.


  METHOD _get_properties_entity.
    " Intended to be overwritten
    CLEAR: et_properties, et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_get_properties_entity'.
  ENDMETHOD.


  METHOD _get_updated_elements.

    rt_updated_elements  = it_updated_elements.
    IF rt_updated_elements IS INITIAL.
      mo_sadl_entity->get_elements( IMPORTING et_elements = DATA(lt_elements) ).
      mo_sadl_entity->get_primary_key_elements( IMPORTING et_primary_key_elements = DATA(lt_key_elems) ).
      LOOP AT lt_elements ASSIGNING FIELD-SYMBOL(<s_element>).
        READ TABLE lt_key_elems WITH KEY table_line = <s_element>-name TRANSPORTING NO FIELDS. "#EC CI_STDSEQ
        IF sy-subrc <> 0.
          INSERT <s_element>-name INTO TABLE rt_updated_elements.
        ENDIF.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  METHOD _read.
    " Intended to be overwritten
    CLEAR: et_failed, et_entity_data.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_read_by_association'.
  ENDMETHOD.


  METHOD _read_by_association.
    " Intended to be overwritten
    CLEAR: et_links, et_source_failed, et_target_entity_data.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_read_by_association'.
  ENDMETHOD.


  METHOD _read_by_association_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_source_key_values  ).
    ASSIGN lr_data->* TO <t_key_values>.

    CLEAR et_target_entity_data.

    _read_by_association( EXPORTING iv_association_name            = iv_association_name
                                    iv_source_alternative_key_name = iv_source_alternative_key_name
                                    it_requested_elements          = it_requested_elements
                                    it_source_key_values           = <t_key_values>
                                    iv_target_edit_mode            = iv_target_edit_mode
                          IMPORTING et_source_failed               = DATA(lt_source_failed)
                                    et_target_entity_data          = et_target_entity_data ).
    ev_source_failed = boolc( lt_source_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _read_keys_by_association.
    " Intended to be overwritten
    CLEAR: et_links, et_source_failed, et_target_key_values.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '_read_keys_by_association'.
  ENDMETHOD.


  METHOD _read_key_by_assoc_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_source_key_values  ).
    ASSIGN lr_data->* TO <t_key_values>.

    CLEAR: et_target_key_values.

    _read_keys_by_association( EXPORTING iv_association_name            = iv_association_name
                                         iv_source_alternative_key_name = iv_source_alternative_key_name
                                         it_source_key_values           = <t_key_values>
                                         iv_target_alternative_key_name = iv_target_alternative_key_name
                                         iv_target_edit_mode            = iv_target_edit_mode
                               IMPORTING et_source_failed               = DATA(lt_source_failed)
                                         et_target_key_values           = et_target_key_values ).
    ev_source_failed = boolc( lt_source_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _read_single.
    FIELD-SYMBOLS <t_key_values> TYPE STANDARD TABLE.
    DATA(lr_data) = create_table_and_append_line( is_key_values  ).
    ASSIGN lr_data->* TO <t_key_values>.

    DATA lr_data_values TYPE REF TO data.
    FIELD-SYMBOLS <t_data_values> TYPE STANDARD TABLE .
    CREATE DATA lr_data_values LIKE STANDARD TABLE OF es_entity_data.
    ASSIGN lr_data_values->* TO <t_data_values>.

    CLEAR es_entity_data.

    _read( EXPORTING  iv_alternative_key_name = iv_alternative_key_name
                      it_requested_elements   = it_requested_elements
                      it_key_values           = <t_key_values>
                      iv_edit_mode            = iv_edit_mode
           IMPORTING  et_entity_data          = <t_data_values>
                      et_failed               = DATA(lt_failed) ).

    IF <t_data_values> IS NOT INITIAL.
      READ TABLE <t_data_values> INDEX 1 INTO es_entity_data.
    ENDIF.
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.


  METHOD _update.
    " Intended to be overwritten
    CLEAR: et_failed.
    RAISE EXCEPTION TYPE cx_sadl_entity_trans_impl
      EXPORTING
        textid = cx_sadl_entity_trans_impl=>not_implemented_yet
        name   = '__update'.
  ENDMETHOD.


  METHOD _update_single.
    FIELD-SYMBOLS <t_data> TYPE STANDARD TABLE.
    DATA(lr_data_values) = create_table_and_append_line( is_entity_data  ).
    ASSIGN lr_data_values->* TO <t_data>.

    _update( EXPORTING iv_alternative_key_name       = iv_alternative_key_name
                       it_updated_elements_per_tabix = VALUE #( ( tabix = 1  elements = it_updated_elements ) )
                       it_entity_data                = <t_data>
             IMPORTING et_failed                     = DATA(lt_failed) ).
    ev_failed = boolc( lt_failed IS NOT INITIAL ).
  ENDMETHOD.
ENDCLASS.