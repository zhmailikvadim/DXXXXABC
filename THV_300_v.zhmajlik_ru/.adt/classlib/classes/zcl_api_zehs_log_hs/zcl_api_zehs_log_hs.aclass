CLASS zcl_api_zehs_log_hs DEFINITION
  PUBLIC
  INHERITING FROM cl_rest_resource
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES ts_zehs_log_hs TYPE zehs_log_hs.

    TYPES BEGIN OF ts_pa11.
    TYPES resp_text TYPE pa0001-ename.
    TYPES END OF ts_pa11.

    TYPES BEGIN OF ts_pa12.
    TYPES cr_user_text TYPE pa0001-ename.
    TYPES END OF ts_pa12.

    TYPES BEGIN OF ts_log_tc.
    TYPES resp      TYPE zehs_log_tc-fname.
    TYPES dline_dat TYPE zehs_log_tc-dline_dat.
    TYPES date_fin  TYPE zehs_log_tc-date_fin.
    TYPES END OF ts_log_tc.

    TYPES BEGIN OF ts_pointinfo.
    TYPES atwrt TYPE zehs_pointinfo-atwrt.
    TYPES END OF ts_pointinfo.

    TYPES BEGIN OF ts_db_data .
    TYPES zehs_log_hs    TYPE ts_zehs_log_hs.
    TYPES zehs_pointinfo TYPE ts_pointinfo.
    TYPES zehs_log_tc    TYPE ts_log_tc.
    TYPES pa11           TYPE ts_pa11.
    TYPES pa12           TYPE ts_pa12.
    TYPES END OF ts_db_data.
    TYPES:
      tt_db_data TYPE STANDARD TABLE OF ts_db_data WITH DEFAULT KEY .

    TYPES BEGIN OF ts_log_hs .
    TYPES log_id         TYPE zehs_log_hs-log_id.
    TYPES ehfnd_location TYPE string."zehs_log_hs-ehfnd_location.
    TYPES location        TYPE wdy_key_value.
    TYPES cntrl_point_id TYPE string."zehs_log_hs-cntrl_point_id.
    TYPES cntrl_point     TYPE wdy_key_value.
    TYPES id             TYPE string."zehs_log_hs-id.
    TYPES cr_date        TYPE zehs_log_hs-cr_date.
    TYPES cr_user        TYPE zehs_log_hs-cr_user.
    TYPES cr_user_value   TYPE wdy_key_value.
    TYPES action         TYPE zehs_log_hs-action.
    TYPES doc_link       TYPE zehs_log_hs-doc_link.
    TYPES doc_link_list   TYPE SORTED TABLE OF wdy_key_value
                          WITH UNIQUE KEY primary_key COMPONENTS key.
    TYPES description    TYPE zehs_log_hs-description.
    TYPES uuid TYPE string.
    INCLUDE TYPE ts_log_tc.
    TYPES resp_value      TYPE wdy_key_value.
    TYPES END OF ts_log_hs.
    TYPES:
      tt_log_hs TYPE STANDARD TABLE OF ts_log_hs WITH DEFAULT KEY .

    METHODS if_rest_resource~delete
        REDEFINITION .
    METHODS if_rest_resource~get
        REDEFINITION .
    METHODS if_rest_resource~post
        REDEFINITION .
    METHODS if_rest_resource~put
        REDEFINITION .
protected section.

  methods READ_LOG_HS
    importing
      !IR_REQUEST type ref to IF_REST_REQUEST
    exporting
      !ET_RESULT type TT_LOG_HS
      !ET_ERRORS type WDY_KEY_VALUE_LIST .
  methods DELETE_LOG_HS
    importing
      !IR_REQUEST type ref to IF_REST_REQUEST
    exporting
      !ET_ERRORS type WDY_KEY_VALUE_LIST .
  methods CREATE_LOG_HS
    importing
      !IR_REQUEST type ref to IF_REST_REQUEST
    exporting
      !ET_ERRORS type WDY_KEY_VALUE_LIST
      !ET_RESULT type TT_LOG_HS .
  methods UPDATE_LOG_HS
    importing
      !IR_REQUEST type ref to IF_REST_REQUEST
    exporting
      !ET_ERRORS type WDY_KEY_VALUE_LIST
      !ET_RESULT type TT_LOG_HS .
  methods READ_DB_LOG_HS
    importing
      value(IV_SQL_WHERE) type STRING
    exporting
      !ET_LOG_HS type TT_LOG_HS
    changing
      value(CT_ERRORS) type WDY_KEY_VALUE_LIST .
  methods DELETE_DB_LOG_HS
    importing
      !IT_DB_DATA type TT_DB_DATA
    changing
      !CT_ERRORS type WDY_KEY_VALUE_LIST .
  methods GET_NEXT_LOG_HS_NUMBER
    returning
      value(RV_NEXT_ID) type ZEHS_REC_ID .
  methods CREATE_DB_LOG_HS
    importing
      !IR_REQ_DATA type ref to TT_LOG_HS
    changing
      !CT_DB_DATA type TT_DB_DATA
      !CT_ERRORS type WDY_KEY_VALUE_LIST .
  methods UPDATE_DB_LOG_HS
    importing
      !IT_DB_DATA type TT_DB_DATA
      !IR_REQ_DATA type ref to TT_LOG_HS
    changing
      !CT_ERRORS type WDY_KEY_VALUE_LIST .
private section.

  constants GC_URI_LOG_ID type STRING value 'log_id' ##NO_TEXT.
  constants GC_URI_ID type STRING value 'id' ##NO_TEXT.
  constants GC_URI_CNTRL_POINT_ID type STRING value 'point_id' ##NO_TEXT.
  constants GC_URI_CR_DATE type STRING value 'date' ##NO_TEXT.
  constants GC_URI_FILTER type STRING value 'filter' ##NO_TEXT.
  constants GC_FLD_LOG_ID type NAME_FELD value 'LOG_ID' ##NO_TEXT.
  constants GC_FLD_ID type NAME_FELD value 'ID' ##NO_TEXT.
  constants GC_FLD_CNTRL_POINT_ID type NAME_FELD value 'CNTRL_POINT_ID' ##NO_TEXT.
  constants GC_FLD_CR_DATE type NAME_FELD value 'CR_DATE' ##NO_TEXT.
  constants GC_ERR_INSERT type WDY_KEY_VALUE-KEY value 'INSERT' ##NO_TEXT.
  constants GC_ERR_NO_BODY_FIELD type WDY_KEY_VALUE-KEY value 'NO_BODY_FIELD' ##NO_TEXT.
  constants GC_TIMEZONE type STRING value 'UTC' ##NO_TEXT.
  constants GC_AUTH_KOKRS type NAME_FELD value 'KOKRS' ##NO_TEXT.
  constants GC_AUTH_BUKRS type NAME_FELD value 'BUKRS' ##NO_TEXT.
  constants GC_AUTH_ORGEH type NAME_FELD value 'ORGEH' ##NO_TEXT.
  constants GC_TAB_ZEHS_LOG_HS type TABNAME value 'ZEHS_LOG_HS' ##NO_TEXT.
  constants GC_URI_UUID type STRING value 'uuid' ##NO_TEXT.
  constants GC_FLD_UUID type NAME_FELD value 'UUID_HIS' ##NO_TEXT.

  methods SET_TASK
    importing
      !IV_ID type ZEHS_REC_ID
    returning
      value(RV_VALUE) type STRING .
ENDCLASS.



CLASS ZCL_API_ZEHS_LOG_HS IMPLEMENTATION.


  method create_db_log_hs.

    loop at ct_db_data assigning field-symbol(<ls_db_data>).

      assign ir_req_data->*[ log_id         = <ls_db_data>-zehs_log_hs-log_id
                             ehfnd_location = <ls_db_data>-zehs_log_hs-ehfnd_location
                             uuid           = <ls_db_data>-zehs_log_hs-uuid_his
                             cntrl_point_id = <ls_db_data>-zehs_log_hs-cntrl_point_id ]-doc_link_list to field-symbol(<lt_file>).
      if sy-subrc = 0 and <lt_file> is not initial.
        loop at <lt_file> assigning field-symbol(<ls_file>).
          zcl_api_attachments=>store_attachments( exporting is_attachment = value #( task_id        = me->set_task( <ls_db_data>-zehs_log_hs-id )
                                                                                     location_id    = <ls_db_data>-zehs_log_hs-ehfnd_location
                                                                                     cntrl_point_id = <ls_db_data>-zehs_log_hs-cntrl_point_id
                                                                                     log_tc_uuid    = <ls_db_data>-zehs_log_hs-uuid_his
                                                                                     filename       = <ls_file>-key
                                                                                     description    = <ls_file>-key
                                                                                     content        = <ls_file>-value )
                                                  changing  ct_errors = ct_errors[] ).
        endloop.
      endif.
      unassign <lt_file>.
      if ct_errors is initial.

        insert zehs_log_hs from @<ls_db_data>-zehs_log_hs.
        if sy-subrc eq 0.

          commit work.
        else.

          rollback work.
          ct_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = gc_err_insert
                                                         iv_value  = replace( val  = 'Ошибка добавления истории записи журнала номер: &'(008)
                                                                              sub  = '&'
                                                                              with = shift_left( val = <ls_db_data>-zehs_log_hs-log_id
                                                                                                 sub = '0' ) )
                                                         it_errors = ct_errors ).
        endif.
      endif.
    endloop.
  endmethod.


  method create_log_hs.

    data:
      lt_req_data type tt_log_hs,
      lt_db_data  type tt_db_data.

    field-symbols:
      <fs_components> type abap_compdescr.

    zcl_api_utils=>get_data_from_request( exporting ir_request = ir_request
                                          changing  ct_errors  = et_errors
                                                    c_data     = lt_req_data ).
    " Prepare data
    lt_db_data = value #( for ls_req_data in lt_req_data
                          ( value #( base value #( zehs_log_hs = corresponding #( ls_req_data ) )
                                     zehs_log_hs-id      = get_next_log_hs_number( )
                                     zehs_log_hs-uuid_his = ls_req_data-uuid
                                     zehs_log_hs-cr_user = cond #( when ls_req_data-cr_user is initial
                                                                   then sy-uname
                                                                   else ls_req_data-cr_user )
                                     zehs_log_hs-cr_date = cond #( when ls_req_data-cr_date is initial
                                                                   then sy-datum
                                                                   else ls_req_data-cr_date ) ) ) ).
    if lt_db_data is not initial.
      if et_errors is initial.
        " Check required field values
        data(lt_body_fields) = value wdy_key_value_list( ( key = gc_fld_log_id )
                                                         ( key = gc_fld_cntrl_point_id ) ).
        loop at lt_body_fields assigning field-symbol(<ls_body_field>).
          loop at lt_db_data assigning field-symbol(<ls_db_data>).
            assign component <ls_body_field>-key of structure <ls_db_data>-zehs_log_hs to field-symbol(<lv_field>).
            if sy-subrc = 0 and <lv_field> is initial.
              et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = gc_err_no_body_field
                                                             iv_value  = replace( val  = 'Поле & отсутствует или не содержит значение'(014)
                                                                                  sub  = '&'
                                                                                  with = <ls_body_field>-key )
                                                             it_errors = et_errors ).
              exit.
            endif.
          endloop.
        endloop.
        if et_errors is initial.

          create_db_log_hs( exporting ir_req_data = ref #( lt_req_data )
                            changing  ct_db_data  = lt_db_data
                                      ct_errors   = et_errors ).
          " Response body data
          et_result = value #( for ls_req_data in lt_req_data
                               for ls_db_data in lt_db_data where ( zehs_log_hs-log_id         = ls_req_data-log_id and
                                                                    zehs_log_hs-ehfnd_location = ls_req_data-ehfnd_location and
                                                                    zehs_log_hs-cntrl_point_id = ls_req_data-cntrl_point_id )
                               ( value #( base ls_req_data
                                          id      = shift_left( val = ls_db_data-zehs_log_hs-id
                                                                sub = '0' )
                                          cr_user = ls_db_data-zehs_log_hs-cr_user
                                          cr_date = ls_db_data-zehs_log_hs-cr_date ) ) ).
        endif.
      endif.
    else.
      et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err_db_no_data
                                                     iv_value  = conv #( 'Записи степеней тяжести не найдены'(001) )
                                                     it_errors = et_errors ).
    endif.
  endmethod.


  METHOD DELETE_DB_LOG_HS.

    LOOP AT it_db_data ASSIGNING FIELD-SYMBOL(<ls_db_data>).

      zcl_api_attachments=>delete_attachments( iv_task     = me->set_task( <ls_db_data>-zehs_log_hs-id )
                                               iv_location = |{ <ls_db_data>-zehs_log_hs-ehfnd_location }|
                                               iv_point    = |{ <ls_db_data>-zehs_log_hs-cntrl_point_id }| ).

      DELETE zehs_log_hs FROM @<ls_db_data>-zehs_log_hs.
      IF sy-subrc EQ 0.

        COMMIT WORK.
      ELSE.

        ct_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err_delete
                                                       iv_value  = replace( val  = 'Ошибка удаления истории записи номер: &'(007)
                                                                            sub  = '&'
                                                                            with = shift_left( val = <ls_db_data>-zehs_log_hs-id
                                                                                               sub = '0' ) )
                                                       it_errors = ct_errors ).
        ROLLBACK WORK.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD DELETE_LOG_HS.

    DATA:
      lt_req_data TYPE tt_log_hs,
      lt_db_data  TYPE tt_db_data.

    zcl_api_utils=>get_data_from_request( EXPORTING ir_request = ir_request
                                          CHANGING  ct_errors  = et_errors
                                                    c_data     = lt_req_data ).
    lt_db_data = VALUE #( FOR ls_req_data IN lt_req_data
                          ( zehs_log_hs = CORRESPONDING #( ls_req_data ) ) ).
    IF lt_db_data IS NOT INITIAL.
      IF et_errors IS INITIAL.

        DATA(lt_body_fields) = VALUE wdy_key_value_list( ( key = gc_fld_id ) ).
        LOOP AT lt_body_fields ASSIGNING FIELD-SYMBOL(<ls_body_field>).
          LOOP AT lt_db_data ASSIGNING FIELD-SYMBOL(<ls_db_data>).
            ASSIGN COMPONENT <ls_body_field>-key OF STRUCTURE <ls_db_data>-zehs_log_hs TO FIELD-SYMBOL(<lv_field>).
            IF sy-subrc = 0 AND <lv_field> IS INITIAL.
              et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = gc_err_no_body_field
                                                             iv_value  = replace( val  = 'Поле & отсутствует или не содержит значение'(014)
                                                                                  sub  = '&'
                                                                                  with = <ls_body_field>-key )
                                                             it_errors = et_errors ).
              EXIT.
            ENDIF.
          ENDLOOP.
        ENDLOOP.
        IF et_errors IS INITIAL.

          delete_db_log_hs( EXPORTING it_db_data = lt_db_data
                            CHANGING  ct_errors  = et_errors ).
        ENDIF.
      ENDIF.
    ELSE.
      et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err_db_no_data
                                                     iv_value  = CONV #( 'Записи степеней тяжести не найдены'(001) )
                                                     it_errors = et_errors ).
    ENDIF.
  ENDMETHOD.


  METHOD GET_NEXT_LOG_HS_NUMBER.
    CONSTANTS:
      lc_range_no     TYPE inri-nrrangenr VALUE '01',
      lc_range_object TYPE inri-object VALUE 'ZEHS_INCHS'.

    CALL FUNCTION 'NUMBER_GET_NEXT'
      EXPORTING
        nr_range_nr = lc_range_no
        object      = lc_range_object
      IMPORTING
        number      = rv_next_id.
  ENDMETHOD.


  METHOD if_rest_resource~delete.

    delete_log_hs( EXPORTING ir_request = mo_request
                   IMPORTING et_errors = DATA(lt_errors) ).

    zcl_api_utils=>process_response( EXPORTING it_errors   = lt_errors
                                     CHANGING  cr_response = mo_response ).
  ENDMETHOD.


  METHOD if_rest_resource~get.

    read_log_hs( EXPORTING ir_request = mo_request
                 IMPORTING et_result  = DATA(lt_result)
                           et_errors  = DATA(lt_errors) ).

    zcl_api_utils=>post_filter_data( EXPORTING iv_filter = mo_request->get_uri_query_parameter( gc_uri_filter )
                                     CHANGING  ct_data   = lt_result ).

    zcl_api_utils=>process_response( EXPORTING it_errors   = lt_errors
                                               ir_data     = REF #( lt_result )
                                     CHANGING  cr_response = mo_response ).
  ENDMETHOD.


  METHOD if_rest_resource~post.

    create_log_hs( EXPORTING ir_request = mo_request
                   IMPORTING et_result = DATA(lt_result)
                             et_errors = DATA(lt_errors) ).

    zcl_api_utils=>process_response( EXPORTING ir_data     = REF #( lt_result )
                                               it_errors   = lt_errors
                                     CHANGING  cr_response = mo_response ).
  ENDMETHOD.


  METHOD if_rest_resource~put.

    update_log_hs( EXPORTING ir_request = mo_request
                   IMPORTING et_result  = DATA(lt_result)
                             et_errors  = DATA(lt_errors) ).

    zcl_api_utils=>process_response( EXPORTING ir_data     = REF #( lt_result )
                                               it_errors   = lt_errors
                                     CHANGING  cr_response = mo_response ).
  ENDMETHOD.


  METHOD READ_DB_LOG_HS.

    TRY.

        SELECT zehs_log_hs~*,
               zehs_log_tc~fname      AS resp,
               pa11~ename             AS resp_text,
               pa12~ename             AS cr_user_text,
               ehfndd_loc_root~id     AS revision_id,
               ehfndd_loc_text~text   AS revision_id_text,
*               zehs_log_tc~dline_dat,
*               zehs_log_tc~date_fin,
               zehs_pointinfo~atwrt   AS cntrl_point_text
          FROM zehs_log_hs
          LEFT JOIN zehs_log_tc ON zehs_log_hs~log_id         = zehs_log_tc~id
                               AND zehs_log_hs~ehfnd_location = zehs_log_tc~ehfnd_location
                               AND zehs_log_hs~cntrl_point_id = zehs_log_tc~cntrl_point
                               AND zehs_log_hs~uuid_his = zehs_log_tc~uuid
          LEFT JOIN zehs_pointinfo ON zehs_log_hs~cntrl_point_id = zehs_pointinfo~db_key
          LEFT JOIN ehfndd_loc_rev ON zehs_log_hs~ehfnd_location  = ehfndd_loc_rev~db_key
                                  AND zehs_log_hs~cr_date        <= ehfndd_loc_rev~end_date
                                  AND zehs_log_hs~cr_date        >= ehfndd_loc_rev~split_date
          LEFT JOIN ehfndd_loc_root ON ehfndd_loc_rev~parent_key = ehfndd_loc_root~db_key
          LEFT JOIN ehfndd_loc_text ON ehfndd_loc_rev~db_key    = ehfndd_loc_text~parent_key
          LEFT JOIN pa0001 AS pa11 ON zehs_log_tc~fname    = pa11~pernr
                                  AND zehs_log_hs~cr_date <= pa11~endda
                                  AND zehs_log_hs~cr_date >= pa11~begda
          LEFT JOIN pa0105 ON pa0105~subty         = '0001'
                          AND zehs_log_hs~cr_date <= pa0105~endda
                          AND zehs_log_hs~cr_date >= pa0105~begda
                          AND zehs_log_hs~cr_user  = pa0105~usrid
          LEFT JOIN pa0001 AS pa12 ON pa0105~pernr         = pa12~pernr
                                  AND zehs_log_hs~cr_date <= pa12~endda
                                  AND zehs_log_hs~cr_date >= pa12~begda
         WHERE (iv_sql_where)
         ORDER BY zehs_log_hs~cr_date, zehs_log_hs~id
          INTO TABLE @DATA(lt_data).

      CATCH cx_sy_dynamic_osql_semantics INTO DATA(lx_exc).
        ct_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err
                                                       iv_value  = lx_exc->get_text( )
                                                       it_errors = ct_errors ).
    ENDTRY.

    et_log_hs = VALUE #( FOR ls_data IN lt_data
                         LET ls_log_hs = CORRESPONDING ts_log_hs( BASE ( CORRESPONDING #( ls_data ) )
                                                                  ls_data-zehs_log_hs ) IN
                         ( VALUE #( BASE ls_log_hs
                                    id            = shift_left( val = ls_log_hs-id
                                                                sub = '0' )
                                    location      = VALUE #( key   = ls_log_hs-ehfnd_location
                                                             value = ls_data-revision_id_text )
                                    cntrl_point   = VALUE #( key   = ls_log_hs-cntrl_point_id
                                                             value = ls_data-cntrl_point_text )
                                    resp_value    = VALUE #( key   = shift_left( val = ls_log_hs-resp
                                                                                 sub = '0' )
                                                             value = ls_data-resp_text )
                                    cr_user_value = VALUE #( key   = ls_log_hs-cr_user
                                                             value = ls_data-cr_user_text ) ) ) ).
  ENDMETHOD.


  method read_log_hs.

    constants cv_value type string value if_sadl_query_engine_types=>co_condition_types-simple_value.
    constants cv_eq    type string value if_sadl_query_engine_types=>co_condition_types-equals.
    constants cv_and   type string value if_sadl_query_engine_types=>co_condition_types-and.

    data:
      mo_sql        type ref to cl_sadl_sql_statement,
      lt_cond       type if_sadl_query_engine_types=>tt_complex_condition,
      lt_field_info type if_auth_condition_types=>tt_field_info.

    if et_errors is initial.
      data(lv_uri_log_id) = ir_request->get_uri_query_parameter( iv_name = gc_uri_log_id ).
      lt_field_info = cond #( when ir_request->has_uri_query_parameter( gc_uri_log_id )
                              then value #( base lt_field_info ( field_alias     = gc_fld_log_id
                                                                 table_ddic_name = gc_tab_zehs_log_hs
                                                                 field_name      = gc_fld_log_id ) )
                              else lt_field_info ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_log_id )
                        then value #( base lt_cond ( type = cv_value value     = lv_uri_log_id )
                                                   ( type = cv_eq    attribute = gc_fld_log_id ) )
                        else lt_cond ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_log_id )
                         and lines( lt_field_info ) > 1
                        then value #( base lt_cond ( type = cv_and ) )
                        else lt_cond ).

      data(lv_uri_cntrl_point_id) = ir_request->get_uri_query_parameter( iv_name = gc_uri_cntrl_point_id ).
      lt_field_info = cond #( when ir_request->has_uri_query_parameter( gc_uri_cntrl_point_id )
                              then value #( base lt_field_info ( field_alias     = gc_fld_cntrl_point_id
                                                                 table_ddic_name = gc_tab_zehs_log_hs
                                                                 field_name      = gc_fld_cntrl_point_id ) )
                              else lt_field_info ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_cntrl_point_id )
                        then value #( base lt_cond ( type = cv_value value     = lv_uri_cntrl_point_id )
                                                   ( type = cv_eq    attribute = gc_fld_cntrl_point_id ) )
                        else lt_cond ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_cntrl_point_id )
                         and lines( lt_field_info ) > 1
                        then value #( base lt_cond ( type = cv_and ) )
                        else lt_cond ).

*-->КТОТ Расширение для возможности ведения разных нарушений для одних и тех же точек контроля o.tararenko
      data(lv_uri_uuid) = ir_request->get_uri_query_parameter( iv_name = gc_uri_uuid ).
      lt_field_info = cond #( when ir_request->has_uri_query_parameter( gc_uri_uuid )
                              then value #( base lt_field_info ( field_alias     = gc_fld_uuid
                                                                 table_ddic_name = gc_tab_zehs_log_hs
                                                                 field_name      = gc_fld_uuid ) )
                              else lt_field_info ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_uuid )
                        then value #( base lt_cond ( type = cv_value value     = lv_uri_uuid )
                                                   ( type = cv_eq    attribute = gc_fld_uuid ) )
                        else lt_cond ).
      lt_cond = cond #( when ir_request->has_uri_query_parameter( gc_uri_uuid )
                         and lines( lt_field_info ) > 1
                        then value #( base lt_cond ( type = cv_and ) )
*<--КТОТ Расширение для возможности ведения разных нарушений для одних и тех же точек контроля o.tararenko
                        else lt_cond ).

      data(lv_uri_id) = ir_request->get_uri_query_parameter( iv_name = gc_uri_id ).
      lt_field_info = cond #( when lv_uri_id is initial
                              then lt_field_info
                              else value #( base lt_field_info ( field_alias     = gc_fld_id
                                                                 table_ddic_name = gc_tab_zehs_log_hs
                                                                 field_name      = gc_fld_id ) ) ).
      lt_cond = cond #( when lv_uri_id is initial
                        then lt_cond
                        else value #( base lt_cond ( type = cv_value value     = lv_uri_id )
                                                   ( type = cv_eq    attribute = gc_fld_id ) ) ).
      lt_cond = cond #( when lv_uri_id is not initial and lines( lt_field_info ) > 1
                        then value #( base lt_cond ( type = cv_and ) )
                        else lt_cond ).

      data(lv_uri_cr_date) = ir_request->get_uri_query_parameter( iv_name = gc_uri_cr_date ).
      lt_field_info = cond #( when lv_uri_cr_date is initial
                              then lt_field_info
                              else value #( base lt_field_info ( field_alias     = gc_fld_cr_date
                                                                 table_ddic_name = gc_tab_zehs_log_hs
                                                                 field_name      = gc_fld_cr_date ) ) ).
      lt_cond = cond #( when lv_uri_cr_date is initial
                        then lt_cond
                        else value #( base lt_cond ( type = cv_value value     = lv_uri_cr_date )
                                                   ( type = cv_eq    attribute = gc_fld_cr_date ) ) ).
      lt_cond = cond #( when lv_uri_cr_date is not initial and lines( lt_field_info ) > 1
                        then value #( base lt_cond ( type = cv_and ) )
                        else lt_cond ).

      mo_sql = cl_sadl_sql_statement=>create_for_open_sql( ).
      data(lo_cond_to_sql) = new cl_sadl_cond_to_sql( mo_sql ).
      data(lv_sql_where) = lo_cond_to_sql->convert_sadl_cond_to_sql( it_sadl_conditions = lt_cond
                                                                     it_field_info      = lt_field_info ).

      read_db_log_hs( exporting iv_sql_where = lv_sql_where
                      importing et_log_hs    = et_result
                      changing  ct_errors    = et_errors ).
    endif.
  endmethod.


  METHOD set_task.
    rv_value = |{ gc_tab_zehs_log_hs }{ shift_left( val = iv_id sub = '0' ) }|.
  ENDMETHOD.


  METHOD UPDATE_DB_LOG_HS.

    LOOP AT it_db_data ASSIGNING FIELD-SYMBOL(<ls_db_data>).

      zcl_api_attachments=>delete_attachments( iv_task     = me->set_task( <ls_db_data>-zehs_log_hs-id )
                                               iv_location = |{ <ls_db_data>-zehs_log_hs-ehfnd_location }|
                                               iv_point    = |{ <ls_db_data>-zehs_log_hs-cntrl_point_id }| ).

      ASSIGN ir_req_data->*[ log_id         = <ls_db_data>-zehs_log_hs-log_id
                             ehfnd_location = <ls_db_data>-zehs_log_hs-ehfnd_location
                             cntrl_point_id = <ls_db_data>-zehs_log_hs-cntrl_point_id ]-doc_link_list TO FIELD-SYMBOL(<lt_file>).
      IF sy-subrc = 0 AND <lt_file> IS NOT INITIAL.
        LOOP AT <lt_file> ASSIGNING FIELD-SYMBOL(<ls_file>).
          zcl_api_attachments=>store_attachments( EXPORTING is_attachment = VALUE #( task_id        = me->set_task( <ls_db_data>-zehs_log_hs-id )
                                                                                     location_id    = <ls_db_data>-zehs_log_hs-ehfnd_location
                                                                                     cntrl_point_id = <ls_db_data>-zehs_log_hs-cntrl_point_id
                                                                                     filename       = <ls_file>-key
                                                                                     description    = <ls_file>-key
                                                                                     content        = <ls_file>-value )
                                                  CHANGING  ct_errors = ct_errors[] ).
        ENDLOOP.
      ENDIF.
      UNASSIGN <lt_file>.

      UPDATE zehs_log_hs FROM @<ls_db_data>-zehs_log_hs.
      IF sy-subrc = 0.

        COMMIT WORK.
      ELSE.

        ROLLBACK WORK.
        ct_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err_update
                                                       iv_value  = replace( val  = 'Ошибка изменения истории записи номер: &'(011)
                                                                            sub  = '&'
                                                                            with = shift_left( val = <ls_db_data>-zehs_log_hs-id
                                                                                               sub = '0' ) )
                                                       it_errors = ct_errors ).
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  METHOD UPDATE_LOG_HS.

    DATA:
      lt_req_data TYPE tt_log_hs,
      lt_db_data  TYPE tt_db_data.

    zcl_api_utils=>get_data_from_request( EXPORTING ir_request = ir_request
                                          CHANGING  ct_errors  = et_errors
                                                    c_data     = lt_req_data ).
    " Prepare data
    lt_db_data = VALUE #( FOR ls_req_data IN lt_req_data
                          ( VALUE #( BASE VALUE #( zehs_log_hs = CORRESPONDING #( ls_req_data ) )
                                     zehs_log_hs-id      = |{ ls_req_data-id ALPHA = IN }| ) ) ).
    IF lt_db_data IS NOT INITIAL.
      IF et_errors IS INITIAL.
        " Check required field values
        DATA(lt_body_fields) = VALUE wdy_key_value_list( ( key = gc_fld_log_id )
                                                         ( key = gc_fld_cntrl_point_id )
                                                         ( key = gc_fld_id ) ).
        LOOP AT lt_body_fields ASSIGNING FIELD-SYMBOL(<ls_body_field>).
          LOOP AT lt_db_data ASSIGNING FIELD-SYMBOL(<ls_db_data>).
            ASSIGN COMPONENT <ls_body_field>-key OF STRUCTURE <ls_db_data>-zehs_log_hs TO FIELD-SYMBOL(<lv_field>).
            IF sy-subrc = 0 AND <lv_field> IS INITIAL.
              et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = gc_err_no_body_field
                                                             iv_value  = replace( val  = 'Поле & отсутствует или не содержит значение'(014)
                                                                                  sub  = '&'
                                                                                  with = <ls_body_field>-key )
                                                             it_errors = et_errors ).
            ENDIF.
          ENDLOOP.
        ENDLOOP.
        IF et_errors IS INITIAL.

          update_db_log_hs( EXPORTING it_db_data  = lt_db_data
                                      ir_req_data = REF #( lt_req_data )
                            CHANGING  ct_errors   = et_errors ).
          " Response body data
          et_result = lt_req_data.
        ENDIF.
      ENDIF.
    ELSE.
      et_errors = zcl_api_utils=>write_to_error_tbl( iv_key    = zcl_api_utils=>gc_err_db_no_data
                                                     iv_value  = CONV #( 'Записи степеней тяжести не найдены'(001) )
                                                     it_errors = et_errors ).
    ENDIF.
  ENDMETHOD.
ENDCLASS.