 CLASS ZFI_OS_OE_HDB DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
  INTERFACES IF_AMDP_MARKER_HDB.
   TYPES:
      BEGIN OF GTY_S_DATA,
        KTANSW            TYPE CHAR200,          "СЧЕТ БУХ УЧЕТА
        RAUMN             TYPE ANLZ-RAUMN,       "ПОДРАЗДЕЛЕНИЕ НОМЕР
        RAUMN_TX          TYPE CHAR200,          "ПОДРАЗДЕЛЕНИЕ ТЕКСТ
        BUTXT             TYPE CHAR200,          "БЕ
        J_3RFDEPRGROUP    TYPE GLOFAAASSETDATA-GLO_RUS_DEPGR,          "ГРУППА НОМЕР
        J_3RFDEPRGROUP_TX TYPE CHAR200,          "ГРУППА ТЕКСТ
        ANLKL             TYPE ANLA-ANLKL,       "КЛАСС НОМЕР
        ANLKL_TX          TYPE CHAR200,          "КЛАСС ТЕКСТ
        ANLN1             TYPE ANLA-ANLN1,       "СИСТЕМНЫЙ НОМЕР
        INVNR             TYPE ANLA-INVNR,       "ИНВЕНТАРНЫЙ НОМЕР ОС
        OSNAME            TYPE STRING,           "НАИМЕНОВАНИЕ ОБЪЕКТА
        KTNAFG            TYPE T095B-KTNAFG,     "СЧЕТ ЗАТРАТ
        KOSTL             TYPE ANLZ-KOSTL,       "МВЗ НОМЕР
        KOSTL_TX          TYPE CHAR50,           "МВЗ ТЕКСТ
        CAUFN             TYPE ANLZ-CAUFN,       "ВНУТРЕННИЙ ЗАКАЗ НОМЕР
        CAUFN_TX          TYPE CHAR70,           "ВНУТРЕННИЙ ЗАКАЗ ТЕКСТ
        PS_PSP_PNR2       TYPE PRPS-POSKI,       "СПП-ЭЛЕМЕНТ НОМЕР
        PS_PSP_PNR2_TX    TYPE CHAR50,           "СПП-ЭЛЕМЕНТ ТЕКСТ
        FUNC_AREA         TYPE CSKS-FUNC_AREA,   "ФУНКЦИОНАЛЬНАЯ СФЕРА
        AKTIV             TYPE ANLA-AKTIV,       "ДАТА ВВОДА В ЭКСПЛУАТАЦИЮ
        ZZBUDATE          TYPE ANLU-ZZBUDATE,    "ДАТА ПРИНЯТИЯ К БУХГАЛТЕРСКОМУ УЧЕТУ
        ADATU             TYPE ZANLZ-ADATU,      "ДАТА ОСТАНОВКИ ЭКСПЛУАТАЦИИ
        BDATU             TYPE ZANLZ-BDATU,      "ДАТА ВЫВОДА ИЗ ОСТАНОВКИ ЭКСПЛУАТАЦИИ
        ADATU_AM          TYPE ZAA_E_BEG_VL,     "НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА ДАТУ ОСТАНОВКИ
        PEROST_AM         TYPE ZAA_E_BEG_VL,     "НАКОПЛЕННАЯ АМОРТИЗАЦИЯ ЗА ПЕРИОД ОСТАНОВКИ
        LMONTH_AM         TYPE ZAA_E_BEG_VL,     "НАЧИСЛЕННАЯ АМОРТИЗАЦИЯ ЗА ПОСЛЕДНИЙ МЕСЯЦ НАХОЖДЕНИЯ В ОСТАНОВКЕ ЭКСПЛУАТАЦИИ
        PERIOD_AM         TYPE ZAA_E_BEG_VL,     "НАЧИСЛЕННАЯ АМОРТИЗАЦИЯ ЗА ПЕРИОД ФОРМИРОВАНИЯ ОТЧЕТА
        COST_END          TYPE ZAA_E_BEG_VL,     "ПЕРВОНАЧАЛЬНАЯ (ПЕРЕОЦЕНЕННАЯ) СТОИМОСТЬ НА ПОСЛЕДНЮЮ ДАТУ ФОРМИРОВАНИЯ ОТЧЕТА
        TOTAL_AM          TYPE ZAA_E_FIN_VL,     "НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА ПОСЛЕДНЮЮ ДАТУ ФОРМИРОВАНИЯ ОТЧЕТА
        DIFFERENCE        TYPE ZAA_E_FIN_VL,     "ОСТАТОЧНАЯ СТОИМОСТЬ НА ПОСЛЕДНЮЮ ДАТУ ФОРМИРОВАНИЯ ОТЧЕТА
        NOTE              TYPE STRING,           "ПРИМЕЧАНИЯ
        BUKRS             TYPE ANLA-BUKRS,
        ANLN2             TYPE ANLA-ANLN2,
      END OF GTY_S_DATA,
        GTY_T_DATA TYPE STANDARD TABLE OF GTY_S_DATA WITH EMPTY KEY.
    CLASS-METHODS:
      GET_DATA                                "ВЫБОРКА ДАННЫХ ДЛЯ ОТЧЕТА ZFI_OS_SA
        IMPORTING
          VALUE(IV_PERBEGIN) TYPE MCS0-SPMON
          VALUE(IV_PEREND)   TYPE MCS0-SPMON
          VALUE(IV_FLT)      TYPE STRING      "ФИЛЬТР ПО ПРОЧИМ ПОЛЯМ
        EXPORTING
          VALUE(EV_SDATE)  TYPE CHAR10
          VALUE(EV_EDATE)  TYPE CHAR10
          VALUE(EV_KTANSW) TYPE CHAR200
          VALUE(EV_BUTXT)  TYPE STRING
          VALUE(ET_DATA)   TYPE GTY_T_DATA.   "ВЫХОДНАЯ ТАБЛИЦА
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZFI_OS_OE_HDB IMPLEMENTATION.


METHOD GET_DATA  BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
                 USING ANLA T001 ANKT ZAFULL ANLU GLOFAAASSETDATA PRPS BUT000
                       FAAV_PLAN_VALUES T095 T095B SKAT CSKS AUFK ANLZ ZANLZ
                       ZAA_UTILS_HDB=>GET_ASSET_VALUES HRP1000 ZAA_VIDUSE_TEXT
                       ZAA_UTILS_HDB=>GET_ASSET_VAL_NG J_3RFDEPRGROUPT CSKT.
  DECLARE LV_MANDT CHAR(3) := SESSION_CONTEXT('CLIENT');
  DECLARE LV_SPRAS CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
  DECLARE LV_SDATE CHAR(8) := :IV_PERBEGIN || '01';                      -- ДАТА НАЧАЛО ОТЧЕТА
  DECLARE LV_GDATE CHAR(8) := LEFT (:IV_PERBEGIN,4) ||  '0000';          -- ДАТА НАЧАЛО ГОДА
  DECLARE LV_EDATE CHAR(8) := TO_DATS(LAST_DAY( :IV_PEREND || '01' ) );  -- ДАТА КОНЦА ОТЧЕТА
  DECLARE LV_IDX INT := 0;


  LT_DATA = SELECT
                T001.BUKRS,
                T095.KTANSW AS KTANSW,
                SKAT.TXT20,
                T095B.KTNAFG,
                B.NAME_ORG1 || B.NAME_ORG2 || B.NAME_ORG3 || B.NAME_ORG4 AS BUTXT,
                ANLZ.RAUMN,
                HR.STEXT,
                ANLA.ANLN1,
                ANLA.ANLN2,
                ANLA.INVNR,
                ANLA.ANLKL AS ANLKL,
                ANKT.TXK20 AS ANLKL_TX,
                ZAFULL.TXTF1 || ZAFULL.TXTF2 AS OSNAME,
                ANLZ.KOSTL AS KOSTL,
                CSKT.KTEXT AS KOSTL_TX,
                ANLZ.CAUFN AS CAUFN,
                AUFK.KTEXT AS CAUFN_TX,
                PRPS.POSKI AS PS_PSP_PNR2,                                     --ANLZ.PS_PSP_PNR2 || CHAR(32) ||
                PRPS.POST1 AS PS_PSP_PNR2_TX,
                CASE WHEN ANLZ.CAUFN = '' THEN CSKS.FUNC_AREA
                     WHEN ANLZ.KOSTL = '' THEN AUFK.FUNC_AREA
                END  AS FUNC_AREA,
                ANLA.AKTIV,
                ANLU.ZZBUDATE,
                ZZ.ADATU,
                CASE WHEN ZZ.BDATU = '99991231' OR ZZ.BDATU ='00000000' THEN ZZ.BDATU ELSE TO_DATS( ADD_DAYS( ZZ.BDATU, 1 ) ) END AS BDATU,
                0 AS ADATU_AM,
                0 AS PEROST_AM,
                0 AS LMONTH_AM,
                0 AS PERIOD_AM,
                EVAL.KANSW AS COST_END,
                0 AS TOTAL_AM,
                0 AS DIFFERENCE,
                ZZ.VIDUSE,
                VIDUSE.VIDUSE_NAME AS VIDUSE_T,
                GLO.GLO_RUS_DEPGR AS J_3RFDEPRGROUP,
                GRNAME.DESCRIPT  AS J_3RFDEPRGROUP_TX,
                CASE WHEN RIGHT(:IV_PEREND,2) <= SUBSTRING(ZZ.BDATU,5,2) AND LEFT(:IV_PEREND,4) <= LEFT(ZZ.BDATU,4) THEN 'X'
                END AS OSTANOV,
                CASE WHEN RIGHT(:IV_PERBEGIN,2) >= SUBSTRING(ZZ.ADATU,5,2) AND LEFT(:IV_PERBEGIN,4) >= LEFT(ZZ.ADATU,4) THEN 'X'
                END AS OSTANOV_BEFORE,
                ANLZ.KOSTL AS KOSTL_F,
                ANLZ.CAUFN AS CAUFN_F,
                ANLA.ANLKL AS ANLKL_F,
                GRNAME.AMORTGR AS AMORTGR,
                '' AS UP
             FROM ANLA AS ANLA
               JOIN T001 AS T001 ON  T001.MANDT = ANLA.MANDT
                                 AND T001.BUKRS = ANLA.BUKRS
               LEFT JOIN BUT000 AS B ON  B.CLIENT = T001.MANDT
                                     AND B.PARTNER = LPAD( T001.BUKRS,10,'0' )
               JOIN T095 AS T095 ON  T095.MANDT = T001.MANDT
                                 AND T095.KTOPL = T001.KTOPL
                                 AND T095.KTOGR = ANLA.KTOGR
                                 AND T095.AFABE = '01'
               JOIN T095B AS T095B ON  T095B.MANDT = T001.MANDT
                                   AND T095B.KTOPL = T001.KTOPL
                                   AND T095B.KTOGR = T095.KTOGR
                                   AND T095B.AFABE = '01'
               LEFT JOIN SKAT AS SKAT ON  SKAT.MANDT = T095.MANDT                          -- НАИМЕНОВАНИЕ БУХ. СЧЕТА
                                      AND SKAT.KTOPL = T095.KTOPL
                                      AND SKAT.SAKNR = T095.KTANSW
                                      AND SKAT.SPRAS = :LV_SPRAS
               LEFT JOIN ANKT AS ANKT ON  ANKT.MANDT = ANLA.MANDT                          -- НАИМЕНОВАНИЕ КЛАССА ОС
                                      AND ANKT.ANLKL = ANLA.ANLKL
                                      AND ANKT.SPRAS = :LV_SPRAS
               LEFT JOIN ANLU AS ANLU ON  ANLU.MANDT = ANLA.MANDT                          -- ПОЛНЫЕ ПОЛЬЗОВАТЕЛЬСКИЕ ПОЛЯ
                                      AND ANLU.BUKRS = ANLA.BUKRS
                                      AND ANLU.ANLN1 = ANLA.ANLN1
                                      AND ANLU.ANLN2 = ANLA.ANLN2
               JOIN ZAFULL AS ZAFULL ON  ZAFULL.MANDT = ANLA.MANDT                         -- ПОЛНЫЕ НАИМЕНОВАНИЯ ОС
                                     AND ZAFULL.BUKRS = ANLA.BUKRS
                                     AND ZAFULL.ANLN1 = ANLA.ANLN1
                                     AND ZAFULL.ANLN2 = ANLA.ANLN2
               LEFT JOIN GLOFAAASSETDATA AS GLO ON  GLO.MANDT = ANLA.MANDT                 -- ГРУППА АМОРТИЗАЦИИ
                                                AND GLO.BUKRS = ANLA.BUKRS
                                                AND GLO.ANLN1 = ANLA.ANLN1
                                                AND GLO.ANLN2 = ANLA.ANLN2
               LEFT JOIN J_3RFDEPRGROUPT AS GRNAME ON  GRNAME.MANDT   = GLO.MANDT          -- НАИМЕНОВАНИЕ ГРУППЫ АМОРТИЗАЦИИ
                                                   AND GRNAME.AMORTGR = GLO.GLO_RUS_DEPGR
                                                   AND GRNAME.SPRSL   = :LV_SPRAS
               LEFT JOIN ZANLZ AS ZZ ON  ZZ.MANDT = ANLA.MANDT
                                     AND ZZ.INVNR = ANLA.INVNR
                                     AND ( (:LV_SDATE BETWEEN ZZ.ADATU AND ZZ.BDATU AND :LV_EDATE BETWEEN ZZ.ADATU AND ZZ.BDATU )     --ОБЕ ДАТЫ В ПЕРИОДЕ ОТЧЕТА
                                      OR (ZZ.BDATU BETWEEN :LV_SDATE AND :LV_EDATE AND ZZ.ADATU BETWEEN :LV_SDATE AND :LV_EDATE )     --ОБЕ ДАТЫ В ИНТЕРВАЛЕ
                                      OR (ZZ.ADATU BETWEEN :LV_SDATE AND :LV_EDATE AND ZZ.BDATU NOT BETWEEN :LV_SDATE AND :LV_EDATE)  --НАЧАЛО ИНТЕРВАЛА В ПЕРИОДЕ ОТЧЕТА
                                      OR (ZZ.BDATU BETWEEN :LV_SDATE AND :LV_EDATE AND ZZ.ADATU NOT BETWEEN :LV_SDATE AND :LV_EDATE ) --КОНЕЦ ИНТЕРВАЛА В ПЕРИДЕ ОТЧЕТА
                                      OR (LEFT( ZZ.ADATU,4) = '1900' AND LEFT(ZZ.BDATU,4) = '9999' ) )                                --ВЕЧНЫЙ ИНТЕРВАЛ
               LEFT JOIN ZAA_VIDUSE_TEXT AS VIDUSE ON  VIDUSE.MANDT = ZZ.MANDT
                                                   AND VIDUSE.VIDUSE = ZZ.VIDUSE
                                                   AND VIDUSE.SPRAS = :LV_SPRAS
               LEFT JOIN  "ZAA_UTILS_HDB=>GET_ASSET_VALUES"( :LV_MANDT, :LV_EDATE, '' )    -- СТОИМОСТНЫЕ ЗНАЧЕНИЯ ОС НА КОНЕЦ ОТЧЕТА
                                           AS EVAL ON  EVAL.BUKRS = ANLA.BUKRS
                                                   AND EVAL.ANLN1 = ANLA.ANLN1
                                                   AND EVAL.ANLN2 = ANLA.ANLN2
                                                   AND EVAL.AFABE = '01'
               LEFT JOIN ANLZ AS ANLZ ON  ANLZ.MANDT = ANLA.MANDT
                                      AND ANLZ.BUKRS = ANLA.BUKRS
                                      AND ANLZ.ANLN1 = ANLA.ANLN1
                                      AND ANLZ.ANLN2 = ANLA.ANLN2
                                      AND ZZ.BDATU BETWEEN ANLZ.ADATU AND ANLZ.BDATU
               LEFT JOIN AUFK AS AUFK ON AUFK.MANDT = ANLZ.MANDT                           -- ФУНКЦ. СФЕРА ДЛЯ ВНУТР. ЗАКАЗА
                                     AND AUFK.AUFNR = ANLZ.CAUFN
               LEFT JOIN CSKS AS CSKS ON CSKS.MANDT = ANLZ.MANDT                           -- ФУНКЦ. СФЕРА ДЛЯ МВЗ
                                     AND CSKS.KOSTL = ANLZ.KOSTL
                                     AND CSKS.DATAB <= :LV_SDATE
                                     AND CSKS.DATBI >= :LV_EDATE
               LEFT JOIN  ( SELECT DISTINCT CSKT.MANDT, CSKT.KOSTL, CSKT.KTEXT
                              FROM CSKT AS CSKT
                             WHERE CSKT.MANDT = :LV_MANDT
                               AND CSKT.SPRAS = :LV_SPRAS
                               AND CSKT.DATBI >= :LV_EDATE
                          ) AS CSKT ON  CSKT.MANDT = ANLZ.MANDT
                                    AND CSKT.KOSTL = ANLZ.KOSTL
               LEFT JOIN PRPS AS PRPS ON  PRPS.MANDT = ANLZ.MANDT
                                      AND PRPS.PSPNR = ANLZ.PS_PSP_PNR2
               LEFT JOIN HRP1000 AS HR ON HR.MANDT = ANLZ.MANDT                            -- НАИМЕНОВАНИЕ СТРУКТУРНОГО ПОДРАЗДЕЛЕНИЯ
                                      AND HR.OBJID = ANLZ.RAUMN
                                      AND HR.BEGDA <= :LV_SDATE
                                      AND HR.ENDDA >= :LV_EDATE
                                      AND HR.LANGU = :LV_SPRAS
             WHERE ANLA.MANDT = :LV_MANDT
             AND ANLA.ZUGDT <= :IV_PEREND AND ANLA.ZUGDT != '00000000' AND ( ANLA.DEAKT >= :IV_PERBEGIN OR ANLA.DEAKT = '00000000' )
             ORDER BY KTANSW ASC, RAUMN ASC, ANLN1 ASC, ADATU ASC, VIDUSE ASC;

  LT_DATA = APPLY_FILTER (:LT_DATA, :IV_FLT);
  IF IS_EMPTY ( :LT_DATA ) THEN RETURN;
  END IF;

 LT_NP = SELECT DT.BUKRS, DT.ANLN1, DT.ANLN2
                FROM :LT_DATA AS DT
                GROUP BY DT.BUKRS, DT.ANLN1, DT.ANLN2;

  LT_VALUE_END =
    SELECT  BUKRS, ANLN1, ANLN2,
            SUM( VALUE_BEG ) AS VALUE_BEG,
            SUM( NETVL_BEG ) AS NETVL_BEG,
            SUM( KNAFA_BEG ) AS KNAFA_BEG,
            SUM( VALUE_END ) AS VALUE_END,
            SUM( NETVL_END ) AS NETVL_END,
            SUM( KNAFA_END ) AS KNAFA_END
      FROM ( SELECT DT.BUKRS, DT.ANLN1, DT.ANLN2,
                    CASE WHEN MOVS.BUDAT < :LV_SDATE  THEN COALESCE( MOVS.KANSW, 0 ) END    AS VALUE_BEG,
                    CASE WHEN MOVS.BUDAT < :LV_SDATE  THEN COALESCE( MOVS.NETVL, 0 ) END    AS NETVL_BEG,
                    CASE WHEN MOVS.BUDAT < :LV_SDATE  THEN COALESCE( MOVS.KNAFA, 0 ) END    AS KNAFA_BEG,
                    CASE WHEN MOVS.BUDAT <= :LV_EDATE THEN COALESCE( MOVS.KANSW, 0 ) END    AS VALUE_END,
                    CASE WHEN MOVS.BUDAT <= :LV_EDATE THEN COALESCE( MOVS.NETVL, 0 ) END    AS NETVL_END,
                    CASE WHEN MOVS.BUDAT <= :LV_EDATE THEN COALESCE( MOVS.KNAFA, 0 ) END    AS KNAFA_END
               FROM "ZAA_UTILS_HDB=>GET_ASSET_VAL_NG"( SESSION_CONTEXT('CLIENT') ) AS MOVS
                 INNER JOIN :LT_NP AS DT ON  MOVS.BUKRS = DT.BUKRS
                                           AND MOVS.ANLN1 = DT.ANLN1
                                           AND MOVS.ANLN2 = DT.ANLN2
                                           AND MOVS.AFABE = '01'
                                           AND MOVS.BUDAT >= :LV_GDATE
                                           AND MOVS.BUDAT <= :LV_EDATE
           ) GROUP BY BUKRS, ANLN1, ANLN2 ;

  --ПОДСЧЕТ АМОРТИЗАЦИИ НА КОНКРЕТНЫЕ ДАТЫ И ЗА ОПРЕДЕЛЕННЫЕ ПЕРИОДЫ
   LT_VALS =
     SELECT DISTINCT
         ANLP.BUKRS,
         ANLP.ANLN1,
         ANLP.ANLN2,
         ANLA.ADATU,
         ANLA.BDATU,
         CASE WHEN ANLA.OSTANOV_BEFORE = 'X' THEN
           (SELECT SUM (ANLP.HSL ) * (-1)
              FROM FAAV_PLAN_VALUES AS ANLP
             WHERE ANLP.MANDT = :LV_MANDT
               AND ANLP.BUKRS = ANLA.BUKRS
               AND ANLP.ANLN1 = ANLA.ANLN1
               AND ANLP.ANLN2 = ANLA.ANLN2
               AND ANLP.AFABER = '01'
               AND TO_DATS(( ANLP.GJAHR || RIGHT(ANLP.POPER,2) || '01' )) < :LV_SDATE
               AND ANLP.POSTED  = 'X'
              GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 )
         ELSE
           (SELECT SUM (ANLP.HSL ) * (-1)
              FROM FAAV_PLAN_VALUES AS ANLP
             WHERE ANLP.MANDT = :LV_MANDT
               AND ANLP.BUKRS = ANLA.BUKRS
               AND ANLP.ANLN1 = ANLA.ANLN1
               AND ANLP.ANLN2 = ANLA.ANLN2
               AND ANLP.AFABER = '01'
               AND TO_DATS(( ANLP.GJAHR || RIGHT(ANLP.POPER,2) || '01' )) < ANLA.ADATU
               AND ANLP.POSTED  = 'X'
             GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 ) END AS ADATU_AM,    -- АМОРТИЗАЦИЯ НА ДАТУ ZANLZ.ADATU (Т.Е. ДО ОСТАНОВА)

         (SELECT SUM (ANLP.HSL ) * (-1)
            FROM FAAV_PLAN_VALUES AS ANLP
           WHERE ANLP.MANDT = :LV_MANDT
             AND ANLP.BUKRS = ANLA.BUKRS
             AND ANLP.ANLN1 = ANLA.ANLN1
             AND ANLP.ANLN2 = ANLA.ANLN2
             AND ANLP.AFABER = '01'
             AND TO_DATS(( ANLP.GJAHR || RIGHT(ANLP.POPER,2) || '01' )) BETWEEN ANLA.ADATU AND ANLA.BDATU
             AND TO_DATS(( ANLP.GJAHR || RIGHT(ANLP.POPER,2) || '01' )) BETWEEN :LV_SDATE AND :LV_EDATE
             AND ANLP.POSTED  = 'X'
           GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 ) AS PEROST_AM,         -- АМОРТИЗАЦИЯ ЗА ПЕРИОД ОСТАНОВКИ

         CASE WHEN ANLA.OSTANOV = 'X' THEN
           (SELECT SUM (ANLP.HSL ) * (-1)
              FROM FAAV_PLAN_VALUES AS ANLP
             WHERE ANLP.MANDT = :LV_MANDT
               AND ANLP.BUKRS = ANLA.BUKRS
               AND ANLP.ANLN1 = ANLA.ANLN1
               AND ANLP.ANLN2 = ANLA.ANLN2
               AND ANLP.AFABER = '01'
               AND ANLP.GJAHR  = LEFT(:IV_PEREND,4)
               AND RIGHT(ANLP.POPER,2) = RIGHT(:IV_PEREND,2)
               AND ANLP.POSTED  = 'X'
             GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 )
         ELSE
           (SELECT SUM (ANLP.HSL ) * (-1)
              FROM FAAV_PLAN_VALUES AS ANLP
             WHERE ANLP.MANDT = :LV_MANDT
               AND ANLP.BUKRS = ANLA.BUKRS
               AND ANLP.ANLN1 = ANLA.ANLN1
               AND ANLP.ANLN2 = ANLA.ANLN2
               AND ANLP.AFABER = '01'
               AND ANLP.GJAHR  = LEFT(ANLA.BDATU,4)
               AND RIGHT(ANLP.POPER,2) = SUBSTR(ANLA.BDATU,5,2)
               AND ANLP.POSTED  = 'X'
             GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 ) END AS LMONTH_AM,   -- АМОРТИЗАЦИЯ НА ПОСЛЕДНИЙ МЕСЯЦ ОСТАНОВКИ ЛИБО НА ПОСЛЕДНИЙ ДЕНЬ ОТЧЕТА

         (SELECT SUM (ANLP.HSL ) * (-1)
            FROM FAAV_PLAN_VALUES AS ANLP
           WHERE ANLP.MANDT = :LV_MANDT
             AND ANLP.BUKRS = ANLA.BUKRS
             AND ANLP.ANLN1 = ANLA.ANLN1
             AND ANLP.ANLN2 = ANLA.ANLN2
             AND ANLP.AFABER = '01'
             AND ANLP.GJAHR  = LEFT(:IV_PERBEGIN,4)
             AND RIGHT(ANLP.POPER,2) BETWEEN RIGHT(:IV_PERBEGIN,2) AND RIGHT(:IV_PEREND,2)
             AND ANLP.POSTED  = 'X'
           GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 ) AS PERIOD_AM,         -- АМОРТИЗАЦИЯ ЗА ПЕРИОД ФОРМИРОВАНИЯ ОТЧЕТА
         ANLA.COST_END,                                                        -- ПЕРЕОЦЕНЕННАЯ СТОИМОСТЬ НА КОНЕЦ ФОРМИРОВАНИЯ ОТЧЕТА
         (SELECT SUM (ANLP.HSL ) * (-1)
            FROM FAAV_PLAN_VALUES AS ANLP
           WHERE ANLP.MANDT = :LV_MANDT
             AND ANLP.BUKRS = ANLA.BUKRS
             AND ANLP.ANLN1 = ANLA.ANLN1
             AND ANLP.ANLN2 = ANLA.ANLN2
             AND ANLP.AFABER = '01'
             AND TO_DATS( ANLP.GJAHR || RIGHT(ANLP.POPER,2) || '01' ) <= :LV_EDATE
             AND ANLP.POSTED  = 'X'
            GROUP BY ANLP.BUKRS, ANLP.ANLN1, ANLP.ANLN2 ) AS TOTAL_AM          -- НАКОПЛЕННАЯ АМОРТИЗАЦИЯ НА КОНЕЦ ПЕРИОДА - НА ПОСЛЕДНЮЮ ДАТУ ФОРМИРОВАНИЯ ОТЧЕТА
            FROM FAAV_PLAN_VALUES AS ANLP                                      -- ПЛАНОВЫЕ ЗНАЧЕНИЯ АМОРТИЗАЦИЙ
              JOIN :LT_DATA AS ANLA ON  ANLP.BUKRS = ANLA.BUKRS
                                    AND ANLP.ANLN1 = ANLA.ANLN1
                                    AND ANLP.ANLN2 = ANLA.ANLN2
           WHERE ANLP.MANDT = :LV_MANDT
             AND ANLP.BUKRS = ANLA.BUKRS
             AND ANLP.ANLN1 = ANLA.ANLN1
             AND ANLP.ANLN2 = ANLA.ANLN2
             AND ANLP.AFABER = '01'
             AND ANLP.POSTED = 'X';



    LT_DATA =   SELECT * FROM (                                                                                     --свертка периодов
    SELECT  BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN, STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                    KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE, ADATU,
                    CASE WHEN LEAD(BDATU) OVER (PARTITION BY BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN, STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                                KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,
                                ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                                J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR ORDER BY ADATU, BDATU)
                                IS NULL
                                THEN BDATU
                    ELSE LEAD(BDATU) OVER (PARTITION BY BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN, STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                                KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,
                                ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                                J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR ORDER BY ADATU, BDATU)
                    END
                    AS BDATU,
                    ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                    J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR, UP

        FROM (
                SELECT
                *,
                LEAD(ADD_DAYS(ADATU,-1)) OVER (PARTITION BY BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN, STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                    KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,
                    ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                    J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR ORDER BY ADATU, BDATU) AS LEAD_ADATU,
                CASE WHEN BDATU =  LEAD(ADD_DAYS(ADATU,-1)) OVER (PARTITION BY BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN,
                    STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                    KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,
                    ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                    J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR ORDER BY ADATU, BDATU) THEN 'Y' END AS DOWN,
                CASE  WHEN ADATU =  LAG(ADD_DAYS(BDATU,1)) OVER (PARTITION BY BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN,
                    STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                    KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,
                    ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                    J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,OSTANOV,OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR ORDER BY ADATU, BDATU)  THEN 'Y' END UP
                FROM
                (   SELECT BUKRS, KTANSW, TXT20, KTNAFG, BUTXT, RAUMN, STEXT,ANLN1,ANLN2,INVNR,ANLKL,ANLKL_TX,OSNAME,
                    KOSTL, KOSTL_TX,CAUFN,CAUFN_TX,PS_PSP_PNR2,PS_PSP_PNR2_TX,FUNC_AREA,AKTIV,ZZBUDATE,ADATU, BDATU,
                    ADATU_AM,PEROST_AM,LMONTH_AM,PERIOD_AM,COST_END,TOTAL_AM,DIFFERENCE,VIDUSE,VIDUSE_T,
                    J_3RFDEPRGROUP,J_3RFDEPRGROUP_TX,'' AS OSTANOV,'' AS OSTANOV_BEFORE,KOSTL_F,CAUFN_F,ANLKL_F,AMORTGR
                    FROM :LT_DATA

                    ) AS ANLZ
               )
            WHERE UP IS NULL OR DOWN IS NULL
        )
        WHERE UP IS NULL;


  EV_SDATE = RIGHT(:LV_SDATE,2) || '.' || SUBSTR(:LV_SDATE, 5,2 ) || '.' || LEFT(:LV_SDATE,4);
  EV_EDATE = RIGHT(:LV_EDATE,2) || '.' || SUBSTR(:LV_EDATE, 5,2 ) || '.' || LEFT(:LV_EDATE,4);

  ET_DATA =
    SELECT
      :LT_DATA.KTANSW,
      :LT_DATA.RAUMN AS RAUMN,
      :LT_DATA.STEXT AS RAUMN_TX,
      :LT_DATA.BUTXT,
      :LT_DATA.J_3RFDEPRGROUP,
      :LT_DATA.J_3RFDEPRGROUP_TX,
      :LT_DATA.ANLKL,
      :LT_DATA.ANLKL_TX,
      :LT_DATA.ANLN1,
      :LT_DATA.INVNR,
      :LT_DATA.OSNAME,
      :LT_DATA.KTNAFG,
      :LT_DATA.KOSTL,
      :LT_DATA.KOSTL_TX,
      :LT_DATA.CAUFN,
      :LT_DATA.CAUFN_TX,
      :LT_DATA.PS_PSP_PNR2,
      :LT_DATA.PS_PSP_PNR2_TX,
      :LT_DATA.FUNC_AREA,
      :LT_DATA.AKTIV,
      :LT_DATA.ZZBUDATE,
      :LT_DATA.ADATU,
      :LT_DATA.BDATU,
      :LT_VALS.ADATU_AM,
      :LT_VALS.PEROST_AM,
      :LT_VALS.LMONTH_AM,
      :LT_VALS.PERIOD_AM,
      VL.VALUE_END                                                      AS COST_END,
      (VL.KNAFA_END) * (-1)                                             AS TOTAL_AM,
      VL.NETVL_END                                                      AS DIFFERENCE,
      :LT_DATA.VIDUSE || CHAR(32) || :LT_DATA.VIDUSE_T AS NOTE,

      :LT_DATA.BUKRS,
      :LT_DATA.ANLN2
    FROM :LT_DATA
      LEFT JOIN :LT_VALS ON  :LT_VALS.BUKRS = :LT_DATA.BUKRS
                         AND :LT_VALS.ANLN1 = :LT_DATA.ANLN1
                         AND :LT_VALS.ANLN2 = :LT_DATA.ANLN2
                         AND :LT_VALS.ADATU = :LT_DATA.ADATU
                         AND :LT_VALS.BDATU = :LT_DATA.BDATU
      LEFT JOIN :LT_VALUE_END AS VL ON  VL.BUKRS = :LT_DATA.BUKRS
                                    AND VL.ANLN1 = :LT_DATA.ANLN1
                                    AND VL.ANLN2 = :LT_DATA.ANLN2
   ORDER BY :LT_DATA.KTANSW ASC, :LT_DATA.RAUMN ASC, :LT_DATA.ANLN1 ASC, :LT_DATA.ADATU ASC, :LT_DATA.VIDUSE ASC;

   --ПЕРЕЧИСЛЕНИЕ СЧЕТОВ БУ ДЛЯ ЗАГОЛОВКА ОТЧЕТА
   SELECT STRING_AGG( KTANSW, ',') INTO EV_KTANSW
     FROM ( SELECT FIRST_VALUE(D.KTANSW) OVER ( PARTITION BY D.KTANSW ORDER BY D.KTANSW ) AS KTANSW
              FROM :ET_DATA AS D
             GROUP BY KTANSW ) ;

    --ПЕРЕЧИСЛЕНИЕ НОМЕРОВ БЕ ЧЕРЕЗ ЗАПЯТУЮ ДЛЯ EXCEL
    SELECT STRING_AGG( BUTXT, ',') INTO EV_BUTXT
      FROM ( SELECT FIRST_VALUE(D.BUTXT) OVER ( PARTITION BY D.BUTXT ORDER BY D.BUTXT ) AS BUTXT
               FROM :ET_DATA AS D
              GROUP BY BUTXT ) ;

ENDMETHOD.
ENDCLASS.