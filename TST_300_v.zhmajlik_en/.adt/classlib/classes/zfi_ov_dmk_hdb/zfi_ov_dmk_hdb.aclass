CLASS zfi_ov_dmk_hdb DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES if_amdp_marker_hdb.

    TYPES:
      gty_weight type p LENGTH 16 DECIMALS 9,
      BEGIN OF gty_s_data,
        pos        TYPE i,             "1   Позиция
        anln1      type anla-anln1,    "2   Номер основного средства
        invnr      TYPE anla-invnr,    "3   Инвентарный номер ANLA-INVNR
        aa_name    TYPE string,        "4   Наименование объекта  ZAFULL-TXTF1  ZAFULL-TXTF2
        lgort      TYPE t001l-lgort,   "5   Склад  ANLZ-STORT
        lgort_name TYPE string,        "6   Наименование склада
        name       TYPE string,        "7   Наименование драгметаллов и драгоценных камней  ZFI_DRAG_MET_TX-NAME
        rest_i     TYPE gty_weight,    "8   Остаток на начало периода Выбор из таблиц ZFI_DRAG_MOVEН,  ZFI_DRAG_MOVEI        на начало периода
        move_i     TYPE gty_weight,    "9   Поступило Выбор движений за период из таблиц ZFI_DRAG_MOVEН,  ZFI_DRAG_MOVEI ZFI_DRAG_MOVEН- ACQ_RET = 1 (приход)
        move_1     TYPE gty_weight,    "10   Списано Выбор движений за период из таблиц ZFI_DRAG_MOVEН,  ZFI_DRAG_MOVEI   ZFI_DRAG_MOVEН- ACQ_RET = 2 (расход)  ZFI_OV_DMK-TYPE = 1
        move_2     TYPE gty_weight,    "11  Реализовано и передано  Выбор движений за период из таблиц ZFI_DRAG_MOVEН,  ZFI_DRAG_MOVEI  ZFI_DRAG_MOVEН- ACQ_RET = 2 (расход)   ZFI_OV_DMK-TYPE = 2
        move_3     TYPE gty_weight,    "12  Недостачи, хищения  Выбор движений за период из таблиц ZFI_DRAG_MOVEН,  ZFI_DRAG_MOVEI ZFI_DRAG_MOVEН- ACQ_RET = 2 (расход)   ZFI_OV_DMK-TYPE = 3
        lgrt_i     TYPE gty_weight,    "13  поступило на склад
        lgrt_o     TYPE gty_weight,    "14  поступило на склад
        move_o     TYPE gty_weight,    "15  прочие движения
        rest_o     TYPE gty_weight,    "16  Остаток на конец периода  Расчетное значение. Графа «Остаток на начало периода» + графа «Поступило» – (графа «Списано» + графа «Реализовано и передано» + графа «Недостачи, хищения»)
        anln2      type anla-anln2,    "17  Субномер
        ktansw     TYPE t095-ktansw,"2 "18  Счет бухгалтерского учета T095-KTANSW для T095-KTOGR = ANKA-KTOGR
        kod_mk     type zfi_drag_met-kod_mk,
        bukrs      type anla-bukrs,
      END of gty_s_data,
        gty_t_data TYPE STANDARD TABLE OF gty_s_data WITH EMPTY KEY.
    CLASS-METHODS:
      get_data                             "Выборка данных для отчета ZFI_AMORT_ASSETS
        IMPORTING
          VALUE(iv_sdate)  TYPE sy-datum     "дата c
          VALUE(iv_edate)  TYPE sy-datum     "дата по
          VALUE(iv_lgort)  TYPE anlz-lgort   "склад
          VALUE(iv_werks)  TYPE anlz-werks   "склад
          VALUE(iv_fullg)  TYPE string       "склад c названием
          VALUE(iv_total)  TYPE abap_bool DEFAULT abap_false   "только итоги
          VALUE(iv_flt)    TYPE string       "фильтр по прочим полям
          VALUE(iv_dmtext) TYPE string       "ДМ после списания

        EXPORTING
          VALUE(et_data)  TYPE gty_t_data
        .
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.



CLASS ZFI_OV_DMK_HDB IMPLEMENTATION.


  METHOD  GET_DATA
       BY DATABASE PROCEDURE FOR HDB LANGUAGE SQLSCRIPT
       USING ANLA T095 ANLZ T001 ZAFULL ZANLU T095 ZFI_DRAG_MET_TX T001L
       ZFI_DRAG_MOVEH ZFI_DRAG_MOVEI ZFI_OV_DMK TABW TABWG
       .
    DECLARE LV_MANDT  CHAR(3) := SESSION_CONTEXT('CLIENT');
    DECLARE LV_SPRAS  CHAR(1) := SESSION_CONTEXT('LOCALE_SAP');
    -- ВЫБОРКА ОСНОВНЫХ ДАННЫХ ОС
    LT_DATA =
      SELECT ANLA.BUKRS,
             ANLA.ANLN1,
             ANLA.ANLN2,
             T095.KTANSW,
             ANLA.INVNR,
             CASE WHEN ZANLUD.DMOFF = 'X' THEN ZF.TXTF1 || ZF.TXTF2 || CHAR(10) || '(' || :iv_dmtext || ')'
                                          ELSE ZF.TXTF1 || ZF.TXTF2
               END AS AA_NAME,
             ANLZ.LGORT,
             T001L.LGORT || CHAR( 32) || T001L.LGOBE AS FULL_LGORT,
             ANLZ.WERKS,
             ANLA.ANLKL,
             ZEND.LGORT AS LGORT_E,
             ZEND.WERKS AS WERKS_E
       FROM ANLA AS ANLA
         JOIN T001 AS T001 ON  T001.BUKRS = ANLA.BUKRS
                           AND T001.MANDT = ANLA.MANDT
         JOIN T095 AS T095 ON  T095.KTOPL = T001.KTOPL
                           AND T095.MANDT = ANLA.MANDT
                           AND T095.KTOGR = ANLA.KTOGR
                           AND T095.AFABE = '01'
         LEFT JOIN ZAFULL AS ZF ON ZF.BUKRS = ANLA.BUKRS
                               AND ZF.MANDT = ANLA.MANDT
                               AND ZF.ANLN1 = ANLA.ANLN1
                               AND ZF.ANLN2 = ANLA.ANLN2
         JOIN ZANLU AS ZANLU ON  ZANLU.INVNR = ANLA.INVNR
                             AND ZANLU.MANDT = ANLA.MANDT
                             AND ZANLU.DMDKFLAG = 'X'
         LEFT JOIN ZANLU AS ZANLUD ON ZANLUD.MANDT = ANLA.MANDT
                                  AND ZANLUD.INVNR = ANLA.INVNR
                                  AND ZANLUD.DMOFF = 'X'
         LEFT JOIN ANLZ AS ANLZ ON ANLZ.BUKRS = ANLA.BUKRS
                                AND ANLZ.MANDT = ANLA.MANDT
                                AND ANLZ.ANLN1 = ANLA.ANLN1
                                AND ANLZ.ANLN2 = ANLA.ANLN2
                                AND ANLZ.ADATU <= :IV_SDATE
                                AND ANLZ.BDATU >= :IV_SDATE
         LEFT JOIN T001L AS T001L ON T001L.MANDT = ANLZ.MANDT
                                AND T001L.WERKS = ANLZ.WERKS
                                AND T001L.LGORT = ANLZ.LGORT
         LEFT JOIN ANLZ AS ZEND ON ZEND.BUKRS = ANLA.BUKRS
                                AND ZEND.MANDT = ANLA.MANDT
                                AND ZEND.ANLN1 = ANLA.ANLN1
                                AND ZEND.ANLN2 = ANLA.ANLN2
                                AND ZEND.ADATU <= :IV_EDATE
                                AND ZEND.BDATU >= :IV_EDATE
       WHERE EXISTS ( SELECT LGORT FROM ANLZ  AS ANLZ
                      WHERE ANLZ.BUKRS = ANLA.BUKRS
                        AND ANLZ.MANDT = ANLA.MANDT
                        AND ANLZ.ANLN1 = ANLA.ANLN1
                        AND ANLZ.ANLN2 = ANLA.ANLN2
                        AND ( ANLZ.LGORT = :IV_LGORT OR :IV_LGORT = '' )
                        AND ANLZ.ADATU <= :IV_EDATE
                        AND ANLZ.BDATU >= :IV_SDATE )
        AND ANLA.AKTIV >= '19000101' AND ANLA.AKTIV <= :IV_EDATE
        AND ANLA.MANDT = :LV_MANDT
        AND ( ANLA.DEAKT < '19000101' OR ANLA.DEAKT >= :IV_SDATE );

    LT_DATA = APPLY_FILTER(:LT_DATA, :IV_FLT ) ;

    --  ВЫБОРКА ВСЕХ ДВИЖЕНИЙ ПО ДМ
    LT_DMK_MOVE =
       SELECT LT.BUKRS, LT.ANLN1, LT.ANLN2, DP.KOD_MK, ZN.NAME,
              DH.DATE_MOVE,
              CASE WHEN DH.ACQ_RET = '2' THEN
                        CASE WHEN BTYP.TYPE IN ('1', '2','3' ) THEN BTYP.TYPE
                                         ELSE '0'  END

                   WHEN DH.ACQ_RET = '1' THEN
                        CASE WHEN  TABWG.GITCOL = 1 OR TABWG.GITCOL = '3' AND BTYP.TYPE = '4'
                             THEN '4' ELSE '0' END
                   ELSE '0' END AS TYP,
              ANLZ.LGORT,
              ANLZ.WERKS,
              CASE WHEN DH.ACQ_RET = 1 THEN  DP.WEIGHT ELSE  - DP.WEIGHT END AS WEIGHT
         FROM ZFI_DRAG_MOVEH AS DH
           JOIN ZFI_DRAG_MOVEI AS DP ON   DP.MANDT       = DH.MANDT
                                     AND DP.BUKRS       =  DH.BUKRS
                                     AND DP.ANLN2       =  DH.ANLN2
                                     AND DP.ANLN1       =  DH.ANLN1
                                     AND DP.DATE_MOVE   =  DH.DATE_MOVE
                                     AND DP.NMOVE       =  DH.NMOVE
           JOIN :LT_DATA AS LT ON  LT.BUKRS = DH.BUKRS
                               AND LT.ANLN1 = DH.ANLN1
                               AND LT.ANLN2 = DH.ANLN2
           LEFT JOIN ZFI_OV_DMK AS BTYP ON BTYP.BWASL = CASE WHEN DH.BWASL_A <> '' THEN DH.BWASL_A ELSE DH.BWASL_M END
                                        AND BTYP.MANDT = DH.MANDT
           LEFT JOIN TABW AS TABW ON TABW.BWASL = CASE WHEN DH.BWASL_A <> '' THEN DH.BWASL_A ELSE DH.BWASL_M END
                                        AND TABW.MANDT = DH.MANDT
           LEFT JOIN TABWG AS TABWG ON TABWG.MANDT = TABW.MANDT
                                    AND TABWG.BWAGRP = TABW.BWAGRP
           LEFT JOIN ZFI_DRAG_MET_TX AS ZN ON ZN.MANDT = DP.MANDT
                                          AND ZN.KOD_MK = DP.KOD_MK
                                          AND ZN.SPRAS = :LV_SPRAS
           LEFT JOIN ANLZ AS ANLZ ON  ANLZ.MANDT =  :LV_MANDT --ВЫБОРКА СКЛАДА НА ДАТУ ПРОВОДКИ
                                  AND ANLZ.BUKRS =  LT.BUKRS
                                  AND ANLZ.ANLN1 =  LT.ANLN1
                                  AND ANLZ.ANLN2 =  LT.ANLN2
                                  AND ANLZ.BDATU >= DH.DATE_MOVE
                                  AND ANLZ.ADATU <= DH.DATE_MOVE
         WHERE DH.STBLG = ''
           AND DH.MANDT = :LV_MANDT
           AND DH.DATE_MOVE <= :IV_EDATE
         ORDER BY LT.ANLN1, LT.ANLN2, DH.DATE_MOVE
           ;


    -- ДВИЖЕНИЕ ПО СКЛАДУ
    IF :IV_LGORT <> '' THEN
      BEGIN
      -- ОПРЕДЕЛЕНИЕ ДАТ ДВИЖЕНИЙ ПОСТУПЛЕНИЯ И ВЫБЫТИЯ  НА СКЛАД
        LT_LG_DATES =
          SELECT LT.BUKRS, LT.ANLN1, LT.ANLN2,
                 CASE WHEN ANLZ.ADATU >  A_FROM.BDATU AND A_FROM.BDATU   = TO_DATS(ADD_DAYS(ANLZ.ADATU, - 1))  THEN ANLZ.ADATU
                   WHEN ANLZ.BDATU <  A_FROM.ADATU
                   THEN CASE WHEN A_FROM.ADATU   = TO_DATS(ADD_DAYS(ANLZ.BDATU, 1))  THEN ANLZ.BDATU  END
                 END  AS DATE_MOVE,
                 CASE WHEN ANLZ.ADATU >  A_FROM.BDATU AND A_FROM.BDATU   = TO_DATS(ADD_DAYS(ANLZ.ADATU, - 1))  THEN '1'
                    WHEN ANLZ.BDATU <  A_FROM.ADATU THEN
                      CASE WHEN A_FROM.ADATU   = TO_DATS(ADD_DAYS(ANLZ.BDATU, 1))    THEN '2' END
                 END  AS ACQ_RET
            FROM :LT_DATA AS LT
              JOIN ANLZ AS ANLZ ON  ANLZ.MANDT =  :LV_MANDT
                                AND ANLZ.BUKRS =  LT.BUKRS
                                AND ANLZ.ANLN1 =  LT.ANLN1
                                AND ANLZ.ANLN2 =  LT.ANLN2
                                AND ANLZ.BDATU >= :IV_SDATE
                                AND ANLZ.ADATU <= :IV_EDATE
                                AND ANLZ.LGORT =  :IV_LGORT
                                AND ANLZ.WERKS =  :IV_WERKS
              JOIN ANLZ AS A_FROM ON  A_FROM.MANDT =  ANLZ.MANDT
                                       AND A_FROM.BUKRS =  ANLZ.BUKRS
                                       AND A_FROM.ANLN1 =  ANLZ.ANLN1
                                       AND A_FROM.ANLN2 =  ANLZ.ANLN2
                                       AND ( A_FROM.LGORT <>  ANLZ.LGORT OR A_FROM.WERKS <>  ANLZ.WERKS );
          LT_LG_DATES =
            SELECT *
              FROM  :LT_LG_DATES
              WHERE COALESCE(ACQ_RET,'') <> '';

      -- ФОРМИРОВАНИЕ СУММ НА ДАТУ ПЕРЕМЕЩЕНИЯ СО СКЛАДА
        LT_LGRT_DMK =
          SELECT LT.BUKRS,LT.ANLN1, LT.ANLN2, LT.KOD_MK,
                 SUM( CASE WHEN LT.DATE_MOVE < LG.DATE_MOVE THEN LT.WEIGHT ELSE 0 END ) AS LGRT_I,
                 0 AS LGRT_O
            FROM :LT_DMK_MOVE AS LT
              JOIN  :LT_LG_DATES AS LG ON LT.ANLN1 = LG.ANLN1
                                       AND LT.ANLN2 = LG.ANLN2
            WHERE  LG.ACQ_RET = '1'
            GROUP BY LT.BUKRS,LT.ANLN1, LT.ANLN2, LT.KOD_MK, LG.DATE_MOVE
          UNION ALL
            SELECT LT.BUKRS, LT.ANLN1, LT.ANLN2, LT.KOD_MK,
                 0 AS LGRT_I,
                 SUM( CASE WHEN LT.DATE_MOVE <= LG.DATE_MOVE THEN - LT.WEIGHT ELSE 0 END ) AS LGRT_O
            FROM :LT_DMK_MOVE AS LT
              JOIN  :LT_LG_DATES AS LG ON LT.ANLN1 = LG.ANLN1
                                                        AND LT.ANLN2 = LG.ANLN2
            WHERE  LG.ACQ_RET = '2'
            GROUP BY LT.BUKRS,LT.ANLN1, LT.ANLN2, LT.KOD_MK, LG.DATE_MOVE;
      END ;

    END IF ;




 -- ФОРМИРОВАНИЕ ИТОГОВ ПО ДВИЖЕНИЯМ ДЛЯ ОС
    LT_DMK_MOVE_TOTAL =
      SELECT LT.BUKRS,
        LT.ANLN1, LT.ANLN2, KOD_MK, NAME,
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LD.LGORT AND :IV_WERKS = LD.WERKS ) AND DATE_MOVE <   :IV_SDATE THEN WEIGHT ELSE 0 END )               AS REST_I, -- САЛЬДО НАЧ
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LD.LGORT_E AND :IV_WERKS = LD.WERKS_E ) THEN WEIGHT ELSE 0 END )                                       AS REST_O, -- САЛЬДО КОНЕЧ
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LT.LGORT AND :IV_WERKS = LT.WERKS ) AND DATE_MOVE >=  :IV_SDATE AND TYP = '4' THEN WEIGHT ELSE 0 END ) AS MOVE_I, -- ПОСТУПИЛО
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LT.LGORT AND :IV_WERKS = LT.WERKS ) AND DATE_MOVE >=  :IV_SDATE AND TYP = '1' THEN WEIGHT ELSE 0 END ) AS MOVE_1, -- СПИСАНО
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LT.LGORT AND :IV_WERKS = LT.WERKS ) AND DATE_MOVE >=  :IV_SDATE AND TYP = '2' THEN WEIGHT ELSE 0 END ) AS MOVE_2, -- РЕАЛИЗОВАНО И ПЕРЕДАНО
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LT.LGORT AND :IV_WERKS = LT.WERKS ) AND DATE_MOVE >=  :IV_SDATE AND TYP = '3' THEN WEIGHT ELSE 0 END ) AS MOVE_3, -- НЕДОСТАЧИ, ХИЩЕНИЯ
        SUM ( CASE WHEN ( :IV_LGORT = '' OR :IV_LGORT = LT.LGORT AND :IV_WERKS = LT.WERKS ) AND DATE_MOVE >=  :IV_SDATE AND TYP = '0' THEN WEIGHT ELSE 0 END ) AS MOVE_O, -- ПРОЧИЕ ДВИЖЕНИЯ
        0.0 AS LGRT_I,
        0.0 AS LGRT_O
      FROM   :LT_DMK_MOVE AS LT
       JOIN :LT_DATA AS LD ON  LD.ANLN1 = LT.ANLN1
                           AND LD.ANLN2 = LT.ANLN2
                           AND LD.BUKRS = LT.BUKRS
       GROUP BY LT.BUKRS, LT.ANLN1, LT.ANLN2, LT.KOD_MK, NAME;

     IF  :IV_LGORT <> '' THEN --ЕСЛИ НАДО УЧИТЫВАТЬ ДВИЖЕНИЕ ПО СКЛАДУ ТО ДОБАВЛЯЮТСЯ ДВИЖЕНИЯ ПО СКЛАДУ
         LT_DMK_MOVE_TOTAL =
           SELECT *
             FROM :LT_DMK_MOVE_TOTAL
           UNION ALL
             SELECT BUKRS,
                    ANLN1, ANLN2, LG.KOD_MK, NAME,
                    0 AS REST_I,
                    0 AS REST_O,
                    0 AS MOVE_I,
                    0 AS MOVE_1,
                    0 AS MOVE_2,
                    0 AS MOVE_3,
                    0 AS MOVE_O,
                    LG.LGRT_I AS LGRT_I,
                    LG.LGRT_O AS LGRT_O
                FROM :LT_LGRT_DMK AS LG
                  LEFT JOIN ZFI_DRAG_MET_TX AS ZN ON ZN.MANDT = :LV_MANDT
                                                 AND ZN.KOD_MK = LG.KOD_MK
                                                 AND ZN.SPRAS = :LV_SPRAS ;

      END IF;
      LT_DMK_MOVE_TOTAL =
        SELECT  BUKRS, ANLN1, ANLN2, KOD_MK, NAME,
              SUM(REST_I) AS REST_I,
              SUM(REST_O) AS REST_O,
              SUM(MOVE_I) AS MOVE_I,
              SUM(MOVE_1) AS MOVE_1,
              SUM(MOVE_2) AS MOVE_2,
              SUM(MOVE_3) AS MOVE_3,
              SUM(MOVE_O) AS MOVE_O,
              SUM(LGRT_I) AS LGRT_I,
              SUM(LGRT_O) AS LGRT_O
         FROM :LT_DMK_MOVE_TOTAL
         GROUP BY   BUKRS, ANLN1, ANLN2, KOD_MK, NAME;

    IF :IV_TOTAL = '' THEN

    ET_DATA =
      SELECT
            ROW_NUMBER ( ) OVER ( ) AS  POS,
            LT.ANLN1,
            LT.INVNR,
            LT.AA_NAME,
            CASE WHEN :IV_LGORT <> '' THEN LEFT(:IV_FULLG, 4 )  ELSE LEFT(LT.FULL_LGORT, 4) END AS LGORT,
            RIGHT(LT.FULL_LGORT, LENGTH(LT.FULL_LGORT) - 5) AS LGORT_NAME,
            MT.NAME  ,
            MT.REST_I,
            MT.MOVE_I,
            MT.MOVE_1*-1 as move_1,
            MT.MOVE_2*-1 as move_2,
            MT.MOVE_3*-1 as move_3,
            MT.LGRT_I,
            MT.LGRT_O,
            MT.MOVE_O,
            MT.REST_O,
            LT.ANLN2,
            LT.KTANSW,
            MT.KOD_MK,
            LT.BUKRS
        FROM :LT_DATA AS LT
         LEFT JOIN :LT_DMK_MOVE_TOTAL AS MT ON  MT.ANLN1 = LT.ANLN1
                                            AND MT.ANLN2 = LT.ANLN2
                                            AND MT.BUKRS = LT.BUKRS
        WHERE
            MT.REST_I <> 0 OR
            MT.MOVE_I <> 0 OR
            MT.MOVE_1 <> 0 OR
            MT.MOVE_2 <> 0 OR
            MT.MOVE_3 <> 0 OR
            MT.LGRT_I <> 0 OR
            MT.LGRT_O <> 0 OR
            MT.REST_O <> 0
        ;
    ELSE -- ЕСЛИ ТОЛЬКО ИТОГИ ПО ДМ ДК
      ET_DATA =
        SELECT
              ROW_NUMBER ( ) OVER ( ) AS  POS,
              '' AS ANLN1,
              '' AS INVNR,
              '' AS AA_NAME,
              '' AS LGORT,
              '' AS LGORT_NAME,
              '' AS NAME ,
              SUM( MT.REST_I ) AS REST_I,
              SUM( MT.MOVE_I ) AS MOVE_I,
              (SUM( MT.MOVE_1 ))*-1 AS MOVE_1,
              (SUM( MT.MOVE_2 ))*-1 AS MOVE_2,
              (SUM( MT.MOVE_3 ))*-1 AS MOVE_3,
              0 AS LGRT_I,
              0 AS LGRT_O,
              0 AS MOVE_O,
              SUM(MT.REST_O) AS REST_O,
              '' AS ANLN2,
              '' AS KTANSW,
              MT.KOD_MK,
              '' AS BUKRS
          FROM :LT_DMK_MOVE_TOTAL AS MT
          WHERE MT.REST_I <> 0 OR
                MT.MOVE_I <> 0 OR
                MT.MOVE_1 <> 0 OR
                MT.MOVE_2 <> 0 OR
                MT.MOVE_3 <> 0 OR
                MT.LGRT_I <> 0 OR
                MT.LGRT_O <> 0 OR
                MT.REST_O <> 0
            GROUP BY MT.KOD_MK
            ;
    END IF;
  ENDMETHOD.
ENDCLASS.